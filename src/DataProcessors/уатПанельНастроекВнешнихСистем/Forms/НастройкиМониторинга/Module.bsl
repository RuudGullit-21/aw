
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Автотест = Истина;
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПараметрыРеглЗаданий();
	
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.Omnicomm_ПериодичностьХранения);
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.АвтоГРАФ_ПериодичностьХранения);
	УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(Элементы.Wialon_ПериодичностьХранения);
	
	Если Метаданные.Константы.Найти("уатКонфигурацияДляРФ") <> Неопределено Тогда
		Элементы.СтраницаЦСМ.Видимость = уатОбщегоНазначения.КонфигурацияДляРФ();
	КонецЕсли;
	
	УстановитьСтатусУчетныхЗаписей();
	ПроверитьПодключениеПСМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Автотест Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьВидимостьИНастройкиРеквизитов();
	ОбновитьДанныеРеглЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьНастройки();
	СохранитьПараметрыРеглЗаданий();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если Модифицированность Тогда 
		ТекстНСТР = НСтр("ru='Необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/data/Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиРегламентныхЗаданий" Тогда
		СтандартнаяОбработка = Ложь;

		ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
		
		ПараметрыНастроек = Новый Структура();
		ПараметрыНастроек.Вставить("ТипВнешнейСистемы",
			ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"));
		
		Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
			ПараметрыНастроек.Вставить("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm"));
				
			МассивТС = Новый Массив;
			Для Каждого ТекТС Из Omnicomm_ТаблТС Цикл
				МассивТС.Добавить(ТекТС.ТС);
			КонецЦикла;
			ПараметрыНастроек.Вставить("МассивТС", МассивТС);

			ПараметрыНастроек.Вставить("ЗагрузитьПробегИРасходГСМ",       Omnicomm_ЗагрузитьПробегИРасходГСМ);
			ПараметрыНастроек.Вставить("ЗагрузитьДополнительныеСведения", Omnicomm_ЗагрузитьДополнительныеСведения);
			ПараметрыНастроек.Вставить("ЗагрузитьКоординаты",             Omnicomm_ЗагрузитьКоординаты);
			ПараметрыНастроек.Вставить("ИнтервалЗагрузки",                Omnicomm_ИнтервалЗагрузки);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
			ПараметрыНастроек.Вставить("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon"));
				
			МассивТС = Новый Массив;
			Для Каждого ТекТС Из Wialon_ТаблТС Цикл
				МассивТС.Добавить(ТекТС.ТС);
			КонецЦикла;
			ПараметрыНастроек.Вставить("МассивТС", МассивТС);

			ПараметрыНастроек.Вставить("ЗагрузитьПробегИРасходГСМ",       Wialon_ЗагрузитьПробегИРасходГСМ);
			ПараметрыНастроек.Вставить("ЗагрузитьДополнительныеСведения", Wialon_ЗагрузитьДополнительныеСведения);
			ПараметрыНастроек.Вставить("ЗагрузитьКоординаты",             Wialon_ЗагрузитьКоординаты);
			ПараметрыНастроек.Вставить("ИнтервалЗагрузки",                Wialon_ИнтервалЗагрузки);

		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
			ПараметрыНастроек.Вставить("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ"));
				
			МассивТС = Новый Массив;
			Для Каждого ТекТС Из СКАУТ_ТаблТС Цикл
				МассивТС.Добавить(ТекТС.ТС);
			КонецЦикла;
			ПараметрыНастроек.Вставить("МассивТС", МассивТС);

			ПараметрыНастроек.Вставить("ЗагрузитьПробегИРасходГСМ",       СКАУТ_ЗагрузитьПробегИРасходГСМ);
			ПараметрыНастроек.Вставить("ЗагрузитьДополнительныеСведения", СКАУТ_ЗагрузитьДополнительныеСведения);
			ПараметрыНастроек.Вставить("ЗагрузитьКоординаты",             СКАУТ_ЗагрузитьКоординаты);
			ПараметрыНастроек.Вставить("ИнтервалЗагрузки",                СКАУТ_ИнтервалЗагрузки);

		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
			ПараметрыНастроек.Вставить("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ"));
				
			МассивТС = Новый Массив;
			Для Каждого ТекТС Из АвтоГРАФ_ТаблТС Цикл
				МассивТС.Добавить(ТекТС.ТС);
			КонецЦикла;
			ПараметрыНастроек.Вставить("МассивТС", МассивТС);

			ПараметрыНастроек.Вставить("ЗагрузитьПробегИРасходГСМ",       АвтоГРАФ_ЗагрузитьПробегИРасходГСМ);
			ПараметрыНастроек.Вставить("ЗагрузитьДополнительныеСведения", АвтоГРАФ_ЗагрузитьДополнительныеСведения);
			ПараметрыНастроек.Вставить("ЗагрузитьКоординаты",             АвтоГРАФ_ЗагрузитьКоординаты);
			ПараметрыНастроек.Вставить("ИнтервалЗагрузки",                АвтоГРАФ_ИнтервалЗагрузки);
		КонецЕсли;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиРегламентныхЗаданий", ПараметрыНастроек,
			,,,, ОповещениеОЗакрытии); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьOmnicommПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.уатИспользоватьOmnicomm Тогда
		Omnicomm_ЧасовойПоясПоПодразделению                = Ложь;
		Omnicomm_ЧасовойПояс                               = 3;
		Omnicomm_ЗагрузитьПробегИРасходГСМ                 = Ложь;
		Omnicomm_ЗагрузитьДополнительныеСведения           = Ложь;
		Omnicomm_ЗагрузитьКоординаты                       = Ложь;
		Omnicomm_ПериодичностьХранения                     = 60;
		Omnicomm_ИнтервалЗагрузки                          = "Сутки";
		Omnicomm_ИнтервалХраненияКоординат                 = 60;
		Omnicomm_ТаблТС.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьИНастройкиРеквизитов();
	ОбновитьДанныеРеглЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьЦСМПриИзменении(Элемент)
		
	УстановитьВидимостьИНастройкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьСКАУТПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.уатИспользоватьСКАУТ Тогда
		СКАУТ_ЧасовойПоясПоПодразделению      = Ложь;
		СКАУТ_ЧасовойПояс                     = "Europe/Moscow";
		СКАУТ_ЗагрузитьПробегИРасходГСМ       = Ложь;
		СКАУТ_ЗагрузитьДополнительныеСведения = Ложь;
		СКАУТ_ЗагрузитьКоординаты             = Ложь;
		СКАУТ_ИнтервалЗагрузки                = "Сутки";
		СКАУТ_ИнтервалХраненияКоординат       = 60;
		СКАУТ_ТаблТС.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьИНастройкиРеквизитов();
	ОбновитьДанныеРеглЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьАвтоГРАФПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.уатИспользоватьАвтоГРАФ Тогда
		АвтоГРАФ_ЗагрузитьПробегИРасходГСМ       = Ложь;
		АвтоГРАФ_ЗагрузитьДополнительныеСведения = Ложь;
		АвтоГРАФ_ЗагрузитьКоординаты             = Ложь;
		АвтоГРАФ_ПериодичностьХранения           = 60;
		АвтоГРАФ_ИнтервалЗагрузки                = "Сутки";
		АвтоГРАФ_ИнтервалХраненияКоординат       = 60;
		АвтоГРАФ_ЧасовойПояс                     = 3;
		АвтоГРАФ_ТаблТС.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьИНастройкиРеквизитов();
	ОбновитьДанныеРеглЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьWialonПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.уатИспользоватьWialon Тогда
		Wialon_ИспользоватьСмены               = Ложь;
		Wialon_ВидЗагружаемогоПробега          = 0;
		Wialon_ИсточникКоординат               = 0;
		Wialon_ЧасовойПоясПоПодразделению      = Ложь;
		Wialon_ЧасовойПояс                     = 3;
		Wialon_ЗагрузитьПробегИРасходГСМ       = Ложь;
		Wialon_ЗагрузитьДополнительныеСведения = Ложь;
		Wialon_ЗагрузитьКоординаты             = Ложь;
		Wialon_ПериодичностьХранения           = 60;
		Wialon_ИнтервалЗагрузки                = "Сутки";
		Wialon_ИнтервалХраненияКоординат       = 60;
		Wialon_ТаблТС.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьИНастройкиРеквизитов();
	ОбновитьДанныеРеглЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Omnicomm_ЧасовойПоясПереключательПриИзменении(Элемент)
	Omnicomm_ЧасовойПоясПоПодразделению = Omnicomm_ЧасовойПоясПереключатель = "ЗависитОтПодразделения";
	УстановитьВидимостьИНастройкиРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура АвтоГРАФ_ЧасовойПоясПереключательПриИзменении(Элемент)
	АвтоГРАФ_ЧасовойПоясПоПодразделению = АвтоГРАФ_ЧасовойПоясПереключатель = "ЗависитОтПодразделения";
	УстановитьВидимостьИНастройкиРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура СКАУТ_ЧасовойПоясПереключательПриИзменении(Элемент)
	СКАУТ_ЧасовойПоясПоПодразделению = СКАУТ_ЧасовойПоясПереключатель = "ЗависитОтПодразделения";
	УстановитьВидимостьИНастройкиРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура СКАУТ_ЧасовойПоясНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму(
		"Обработка.уатПанельНастроекВнешнихСистем.Форма.ВыборЧасовогоПоясаСКАУТ", 
		Новый Структура("НачальноеЗначениеВыбора", СКАУТ_ЧасовойПояс), 
		Элемент,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ЧасовойПоясПереключательПриИзменении(Элемент)
	Wialon_ЧасовойПоясПоПодразделению = Wialon_ЧасовойПоясПереключатель = "ЗависитОтПодразделения";
	УстановитьВидимостьИНастройкиРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ИспользоватьСменыПриИзменении(Элемент)
	
	УстановитьВидимостьИНастройкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ИспользоватьСменыПодробноНажатие(Элемент)
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(
		НСтр("ru = 'При использовании смен результаты запросов будут разбиваться по интервалам короткой длительности - сменам.
              |Длительность смены определяется настройкой. При использовании смен скорость загрузки данных существенно увеличивается за счет того, что допускается возможность загрузки большого объема данных одним запросом.
              |Например, данные за период в 1 неделю с продолжительностью смены 1 час будут загружены одним запросом.
              |При расчете смен могут возникать небольшие расхождения в результатах, полученных с использованием смен и без них. 
              |Подробнее о загрузке данных по группе объектов на сайте'"),
		" ",
		Новый ФорматированнаяСтрока(НСтр("ru = 'Отчеты по группе объектов'"),,,, "https://docs.wialon.com/ru/hosting/user/reports/adv/group")
	);
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ВидЗагружаемогоПробегаПодробноНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://help.wialon.com/help/wialon-hosting/ru/user-guide/monitoring-system/units/unit-properties/trip-detector");
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ИсточникКоординатПробегаПодробноНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://help.wialon.com/help/wialon-hosting/ru/user-guide/monitoring-system/reports/report-templates/report-contents/tables/table-types/sensor-tracing");
	
КонецПроцедуры

&НаКлиенте
Процедура Wialon_ПериодичностьХраненияПриИзменении(Элемент)
	Если Wialon_ПериодичностьХранения = 0 Тогда
		Wialon_ЗагружатьВсеДанные = Истина;
	Иначе
		Wialon_ЗагружатьВсеДанные = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРегламентноеЗадание(Команда)
	ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
		ИдентификаторРеглЗадания = Omnicomm_ЗагрузкаДанных;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
		ИдентификаторРеглЗадания = Wialon_ЗагрузкаДанных;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
		ИдентификаторРеглЗадания = СКАУТ_ЗагрузкаДанных;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
		ИдентификаторРеглЗадания = АвтоГРАФ_ЗагрузкаДанных;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЦСМ Тогда
		ИдентификаторРеглЗадания = ЦСМ_ЗагрузкаДанных;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторРеглЗадания);
	ПараметрыФормы.Вставить("Действие",      "Изменить");
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусРегламентногоЗадания(Команда)
	
	ОбновитьДанныеРеглЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗадание(Команда)
	
	Если Модифицированность Тогда 
		ТекстНСТР = НСтр("ru='Необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
		РеглЗадание             = Omnicomm_ЗагрузкаДанных;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных Omnicomm'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
		РеглЗадание             = Wialon_ЗагрузкаДанных;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных Wialon'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
		РеглЗадание             = СКАУТ_ЗагрузкаДанных;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных СКАУТ'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
		РеглЗадание             = АвтоГРАФ_ЗагрузкаДанных;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных АвтоГРАФ'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЦСМ Тогда
		РеглЗадание             = ЦСМ_ЗагрузкаДанных;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка текущего местоположения ТС'");
	КонецЕсли;

	ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПСМ(Команда)
	СистемаМониторинга = ТекущийЭлемент.Заголовок;
	СистемаМониторинга = СтрЗаменить(СистемаМониторинга, Нстр("en = 'Settings '; ru = 'Настройки '"),"");
	ИдентификаторДействия = "ОбщаяФорма.уатНастройкиМониторинга.НастройкиПСМ";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
	уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия, СистемаМониторинга);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройке(Команда)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора      = Неопределено;
	
	ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
		ПараметрыВыбора = Новый Структура("Ключ",
		ПредопределенноеЗначение("Справочник.уатУчетныеЗаписиСистемыМониторинга.Omnicomm"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
		ПараметрыВыбора = Новый Структура("Ключ",
		ПредопределенноеЗначение("Справочник.уатУчетныеЗаписиСистемыМониторинга.Wialon"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
		ПараметрыВыбора = Новый Структура("Ключ",
		ПредопределенноеЗначение("Справочник.уатУчетныеЗаписиСистемыМониторинга.СКАУТ"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
		ПараметрыВыбора = Новый Структура("Ключ",
		ПредопределенноеЗначение("Справочник.уатУчетныеЗаписиСистемыМониторинга.АвтоГРАФ5"));
	КонецЕсли;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьУчетнуюЗапись", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатУчетныеЗаписиСистемыМониторинга.Форма.ФормаЭлемента", ПараметрыВыбора,,,,,ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСписку(Команда)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора      = Неопределено;
	
	ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
		ЗначениеОтбора  = Новый Структура("СистемаМониторинга",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
		ЗначениеОтбора  = Новый Структура("СистемаМониторинга",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
		ЗначениеОтбора  = Новый Структура("СистемаМониторинга",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
		ЗначениеОтбора  = Новый Структура("СистемаМониторинга",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	КонецЕсли;
	ОткрытьФорму("Справочник.уатУчетныеЗаписиСистемыМониторинга.Форма.ФормаСписка", ПараметрыВыбора); 
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьИНастройкиРеквизитов()
	
	Элементы.СтраницаЦСМ.Картинка		 = ?(НаборКонстант.уатИспользоватьЦСМ,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаOmnicomm.Картинка	 = ?(НаборКонстант.уатИспользоватьOmnicomm,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаСКАУТ.Картинка		 = ?(НаборКонстант.уатИспользоватьСКАУТ,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаАвтоГРАФ.Картинка	 = ?(НаборКонстант.уатИспользоватьАвтоГРАФ,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаWialon.Картинка	 = ?(НаборКонстант.уатИспользоватьWialon,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаПСМ.Картинка		 = ?(уатИспользоватьПСМ,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);

	Элементы.ПанельЦСМ.Видимость          = НаборКонстант.уатИспользоватьЦСМ;
	Элементы.ПанельOmnicomm.Видимость     = НаборКонстант.уатИспользоватьOmnicomm;
	Элементы.ПанельСКАУТ.Видимость        = НаборКонстант.уатИспользоватьСКАУТ;
	Элементы.ПанельWialon.Видимость       = НаборКонстант.уатИспользоватьWialon;
	Элементы.ПанельАвтоГРАФ.Видимость     = НаборКонстант.уатИспользоватьАвтоГРАФ;

	Если Wialon_ИспользоватьСмены Тогда 
		Элементы.Wialon_ПериодичностьХранения_Заголовок.Заголовок = НСтр("ru = 'Длительность смены'");
	Иначе 
		Элементы.Wialon_ПериодичностьХранения_Заголовок.Заголовок = НСтр("en='Storing downloaded data at intervals';ru='Хранение загруженных данных с интервалом'");
	КонецЕсли;
	
	Если Omnicomm_ЧасовойПоясПоПодразделению Тогда 
		Элементы.Omnicomm_ЧасовойПояс.Видимость = Ложь;
		Элементы.Omnicomm_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.Omnicomm_ЧасовойПоясПереключатель.Подсказка =
			Нстр("ru = 'Часовой пояс указывается в форме ""Установка прав и настроек"" по подразделению.
			|Настройка: Корректировка времени для загрузки данных Omnicomm.'");
	Иначе 
		Элементы.Omnicomm_ЧасовойПояс.Видимость = Истина;
		Элементы.Omnicomm_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.Omnicomm_ЧасовойПоясПереключатель.Подсказка = "";
	КонецЕсли;
	
	Если АвтоГРАФ_ЧасовойПоясПоПодразделению Тогда 
		Элементы.АвтоГРАФ_ЧасовойПояс.Видимость = Ложь;
		Элементы.АвтоГРАФ_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.АвтоГРАФ_ЧасовойПоясПереключатель.Подсказка =
			Нстр("ru = 'Часовой пояс указывается в форме ""Установка прав и настроек"" по подразделению.
			|Настройка: Корректировка времени для загрузки данных АвтоГРАФ 5.'");
	Иначе 
		Элементы.АвтоГРАФ_ЧасовойПояс.Видимость = Истина;
		Элементы.АвтоГРАФ_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.АвтоГРАФ_ЧасовойПоясПереключатель.Подсказка = "";
	КонецЕсли;

	
	Если СКАУТ_ЧасовойПоясПоПодразделению Тогда 
		Элементы.СКАУТ_ЧасовойПояс.Видимость = Ложь;
		Элементы.СКАУТ_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.СКАУТ_ЧасовойПоясПереключатель.Подсказка =
			Нстр("ru = 'Часовой пояс указывается в форме ""Установка прав и настроек"" по подразделению.
			|Настройка: Часовой пояс для взаимодействия с системой мониторинга СКАУТ.'");

	Иначе 
		Элементы.СКАУТ_ЧасовойПояс.Видимость = Истина;
		Элементы.СКАУТ_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.СКАУТ_ЧасовойПоясПереключатель.Подсказка = "";
	КонецЕсли;
	
	Если Wialon_ЧасовойПоясПоПодразделению Тогда 
		Элементы.Wialon_ЧасовойПояс.Видимость = Ложь;
		Элементы.Wialon_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.Wialon_ЧасовойПоясПереключатель.Подсказка =
			Нстр("ru = 'Часовой пояс указывается в форме ""Установка прав и настроек"" по подразделению.
			|Настройка: Корректировка времени для загрузки данных Wialon.'");

	Иначе 
		Элементы.Wialon_ЧасовойПояс.Видимость = Истина;
		Элементы.Wialon_ЧасовойПоясПереключатель.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.Wialon_ЧасовойПоясПереключатель.Подсказка = "";
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыРеглЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяСистема		 = Справочники.уатВнешниеСистемы.Omnicomm;
	СтруктураПараметров	 = уатМониторинг.ПолучитьНастройкиМониторинга(ВнешняяСистема);
	
	Omnicomm_ЗагрузитьПробегИРасходГСМ           = СтруктураПараметров.ЗагрузитьПробегРасход;
	Omnicomm_ЗагрузитьДополнительныеСведения     = СтруктураПараметров.ЗагрузитьДопСведения;
	Omnicomm_ЗагрузитьКоординаты                 = СтруктураПараметров.ЗагрузитьКоординаты;
	Omnicomm_ИнтервалЗагрузки                    = СтруктураПараметров.ИнтервалЗагрузки;
	Omnicomm_ПериодичностьХранения      = СтруктураПараметров.ПериодичностьХранения;
	Omnicomm_ЧасовойПояс                = СтруктураПараметров.ЧасовойПояс;
	Omnicomm_ЧасовойПоясПоПодразделению = СтруктураПараметров.ЧасовойПоясПоПодразделению;
	Omnicomm_ЧасовойПоясПереключатель   = ?(Omnicomm_ЧасовойПоясПоПодразделению, "ЗависитОтПодразделения", "Общий");
	Omnicomm_ИнтервалХраненияКоординат  = СтруктураПараметров.ИнтервалХраненияКоординат;
	Omnicomm_ТаблТС.Очистить();
	Для Каждого ТекТС Из СтруктураПараметров.МассивТС Цикл
		НоваяСтрока = Omnicomm_ТаблТС.Добавить();
		НоваяСтрока.ТС = ТекТС;
	КонецЦикла;
	
	ВнешняяСистема		 = Справочники.уатВнешниеСистемы.СКАУТ;
	СтруктураПараметров	 = уатМониторинг.ПолучитьНастройкиМониторинга(ВнешняяСистема);

	СКАУТ_ЗагрузитьПробегИРасходГСМ       = СтруктураПараметров.ЗагрузитьПробегРасход;
	СКАУТ_ЗагрузитьДополнительныеСведения = СтруктураПараметров.ЗагрузитьДопСведения;
	СКАУТ_ЗагрузитьКоординаты        = СтруктураПараметров.ЗагрузитьКоординаты;
	СКАУТ_ИнтервалЗагрузки           = СтруктураПараметров.ИнтервалЗагрузки;
	СКАУТ_ЧасовойПояс                = СтруктураПараметров.ЧасовойПояс;
	СКАУТ_ЧасовойПоясПоПодразделению = СтруктураПараметров.ЧасовойПоясПоПодразделению;
	СКАУТ_ЧасовойПоясПереключатель   = ?(СКАУТ_ЧасовойПоясПоПодразделению, "ЗависитОтПодразделения", "Общий");
	СКАУТ_ИнтервалХраненияКоординат  = СтруктураПараметров.ИнтервалХраненияКоординат;
	СКАУТ_ТаблТС.Очистить();
	Для Каждого ТекТС Из СтруктураПараметров.МассивТС Цикл 
		НовСтр = СКАУТ_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	
	ВнешняяСистема		 = Справочники.уатВнешниеСистемы.Wialon;
	СтруктураПараметров	 = уатМониторинг.ПолучитьНастройкиМониторинга(ВнешняяСистема);

	Wialon_ЗагрузитьПробегИРасходГСМ       = СтруктураПараметров.ЗагрузитьПробегРасход;
	Wialon_ЗагрузитьДополнительныеСведения = СтруктураПараметров.ЗагрузитьДопСведения;
	Wialon_ЗагрузитьКоординаты        = СтруктураПараметров.ЗагрузитьКоординаты;
	Wialon_ИнтервалЗагрузки           = СтруктураПараметров.ИнтервалЗагрузки;
	Wialon_ИспользоватьСмены          = СтруктураПараметров.ИспользоватьСмены;
	Wialon_ВидЗагружаемогоПробега     = СтруктураПараметров.ВидЗагружаемогоПробега;
	Wialon_ИсточникКоординат          = СтруктураПараметров.ИсточникКоординат;
	Wialon_ЧасовойПоясПоПодразделению = СтруктураПараметров.ЧасовойПоясПоПодразделению;
	Wialon_ЧасовойПоясПереключатель   = ?(Wialon_ЧасовойПоясПоПодразделению, "ЗависитОтПодразделения", "Общий");
	Wialon_ЧасовойПояс                = СтруктураПараметров.ЧасовойПояс;
	Wialon_ПериодичностьХранения      = СтруктураПараметров.ПериодичностьХранения;
	Wialon_ЗагружатьВсеДанные         = СтруктураПараметров.ЗагружатьВсеДанные;
	Wialon_ИнтервалХраненияКоординат  = СтруктураПараметров.ИнтервалХраненияКоординат;
	Wialon_ВремяЖизниСсылкиНаЛокатор  = СтруктураПараметров.ВремяЖизниСсылкиНаЛокатор;

	Если Wialon_ЗагружатьВсеДанные Тогда
		Wialon_ПериодичностьХранения = 0;
	КонецЕсли;
	
	Wialon_ТаблТС.Очистить();
	Для Каждого ТекТС Из СтруктураПараметров.МассивТС Цикл 
		НовСтр = Wialon_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	
	ВнешняяСистема		 = Справочники.уатВнешниеСистемы.АвтоГРАФ;
	СтруктураПараметров	 = уатМониторинг.ПолучитьНастройкиМониторинга(ВнешняяСистема);

	АвтоГРАФ_ЗагрузитьПробегИРасходГСМ       = СтруктураПараметров.ЗагрузитьПробегРасход;
	АвтоГРАФ_ЗагрузитьДополнительныеСведения = СтруктураПараметров.ЗагрузитьДопСведения;
	АвтоГРАФ_ЗагрузитьКоординаты        = СтруктураПараметров.ЗагрузитьКоординаты;
	АвтоГРАФ_ИнтервалЗагрузки           = СтруктураПараметров.ИнтервалЗагрузки;
	АвтоГРАФ_ПериодичностьХранения      = СтруктураПараметров.ПериодичностьХранения;
	АвтоГРАФ_ИнтервалХраненияКоординат  = СтруктураПараметров.ИнтервалХраненияКоординат;
	АвтоГРАФ_ЧасовойПояс                = СтруктураПараметров.ЧасовойПояс;
	АвтоГРАФ_ЧасовойПоясПоПодразделению = СтруктураПараметров.ЧасовойПоясПоПодразделению;
	АвтоГРАФ_ЧасовойПоясПереключатель   = ?(АвтоГРАФ_ЧасовойПоясПоПодразделению, "ЗависитОтПодразделения", "Общий");

	АвтоГРАФ_ТаблТС.Очистить();
	Для Каждого ТекТС Из СтруктураПараметров.МассивТС Цикл 
		НовСтр = АвтоГРАФ_ТаблТС.Добавить();
		НовСтр.ТС = ТекТС;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыРеглЗаданий()
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗагрузитьПробегРасход",      Omnicomm_ЗагрузитьПробегИРасходГСМ);
	СтруктураПараметров.Вставить("ЗагрузитьДопСведения",       Omnicomm_ЗагрузитьДополнительныеСведения);
	СтруктураПараметров.Вставить("ЗагрузитьКоординаты",        Omnicomm_ЗагрузитьКоординаты);
	СтруктураПараметров.Вставить("ИнтервалЗагрузки",           Omnicomm_ИнтервалЗагрузки);
	СтруктураПараметров.Вставить("ПериодичностьХранения",      Omnicomm_ПериодичностьХранения);
	СтруктураПараметров.Вставить("ЧасовойПояс",                Omnicomm_ЧасовойПояс);
	СтруктураПараметров.Вставить("ЧасовойПоясПоПодразделению", Omnicomm_ЧасовойПоясПоПодразделению);
	СтруктураПараметров.Вставить("ИнтервалХраненияКоординат",  Omnicomm_ИнтервалХраненияКоординат);
	мсвТС = Новый Массив;
	Для Каждого ТекСтрока Из Omnicomm_ТаблТС Цикл
		мсвТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	СтруктураПараметров.Вставить("МассивТС", мсвТС);
	ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Установить(ХранилищеНастроек);
	
	ПараметрыСКАУТ = Новый Структура;
	ПараметрыСКАУТ.Вставить("ЗагрузитьПробегРасход",      СКАУТ_ЗагрузитьПробегИРасходГСМ);
	ПараметрыСКАУТ.Вставить("ЗагрузитьДопСведения",       СКАУТ_ЗагрузитьДополнительныеСведения);
	ПараметрыСКАУТ.Вставить("ЗагрузитьКоординаты",        СКАУТ_ЗагрузитьКоординаты);
	ПараметрыСКАУТ.Вставить("ИнтервалЗагрузки",           СКАУТ_ИнтервалЗагрузки);
	ПараметрыСКАУТ.Вставить("ЧасовойПоясПоПодразделению", СКАУТ_ЧасовойПоясПоПодразделению);
	ПараметрыСКАУТ.Вставить("ЧасовойПояс",                СКАУТ_ЧасовойПояс);
	ПараметрыСКАУТ.Вставить("ИнтервалХраненияКоординат",  СКАУТ_ИнтервалХраненияКоординат);
	ТССКАУТ = Новый Массив;
	Для Каждого ТекСтр Из СКАУТ_ТаблТС Цикл 
		ТССКАУТ.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыСКАУТ.Вставить("МассивТС", ТССКАУТ);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхСКАУТ.Установить(Новый ХранилищеЗначения(ПараметрыСКАУТ, Новый СжатиеДанных(9)));
	
	ПараметрыWialon = Новый Структура;
	ПараметрыWialon.Вставить("ЗагрузитьПробегРасход",      Wialon_ЗагрузитьПробегИРасходГСМ);
	ПараметрыWialon.Вставить("ЗагрузитьДопСведения",       Wialon_ЗагрузитьДополнительныеСведения);
	ПараметрыWialon.Вставить("ЗагрузитьКоординаты",        Wialon_ЗагрузитьКоординаты);
	ПараметрыWialon.Вставить("ИнтервалЗагрузки",           Wialon_ИнтервалЗагрузки);
	ПараметрыWialon.Вставить("ПериодичностьХранения",      Wialon_ПериодичностьХранения);
	ПараметрыWialon.Вставить("ЗагружатьВсеДанные",         Wialon_ЗагружатьВсеДанные);
	ПараметрыWialon.Вставить("ИспользоватьСмены",          Wialon_ИспользоватьСмены);
	ПараметрыWialon.Вставить("ВидЗагружаемогоПробега",     Wialon_ВидЗагружаемогоПробега);
	ПараметрыWialon.Вставить("ИсточникКоординат",          Wialon_ИсточникКоординат);
	ПараметрыWialon.Вставить("ЧасовойПоясПоПодразделению", Wialon_ЧасовойПоясПоПодразделению);
	ПараметрыWialon.Вставить("ЧасовойПояс",                Wialon_ЧасовойПояс);
	ПараметрыWialon.Вставить("ИнтервалХраненияКоординат",  Wialon_ИнтервалХраненияКоординат);
	ПараметрыWialon.Вставить("ВремяЖизниСсылкиНаЛокатор",  Wialon_ВремяЖизниСсылкиНаЛокатор);
	
	ТСWialon = Новый Массив;
	Для Каждого ТекСтр Из Wialon_ТаблТС Цикл 
		ТСWialon.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыWialon.Вставить("МассивТС", ТСWialon);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Установить(Новый ХранилищеЗначения(ПараметрыWialon, Новый СжатиеДанных(9)));
	
	ПараметрыАвтоГРАФ = Новый Структура;
	ПараметрыАвтоГРАФ.Вставить("ЗагрузитьПробегРасход",      АвтоГРАФ_ЗагрузитьПробегИРасходГСМ);
	ПараметрыАвтоГРАФ.Вставить("ЗагрузитьДопСведения",       АвтоГРАФ_ЗагрузитьДополнительныеСведения);
	ПараметрыАвтоГРАФ.Вставить("ЗагрузитьКоординаты",        АвтоГРАФ_ЗагрузитьКоординаты);
	ПараметрыАвтоГРАФ.Вставить("ИнтервалЗагрузки",           АвтоГРАФ_ИнтервалЗагрузки);
	ПараметрыАвтоГРАФ.Вставить("ПериодичностьХранения",      АвтоГРАФ_ПериодичностьХранения);
	ПараметрыАвтоГРАФ.Вставить("ИнтервалХраненияКоординат",  АвтоГРАФ_ИнтервалХраненияКоординат);
	ПараметрыАвтоГРАФ.Вставить("ЧасовойПояс",                АвтоГРАФ_ЧасовойПояс);
	ПараметрыАвтоГРАФ.Вставить("ЧасовойПоясПоПодразделению", АвтоГРАФ_ЧасовойПоясПоПодразделению);
	ТСАвтоГРАФ = Новый Массив;
	Для Каждого ТекСтр Из АвтоГРАФ_ТаблТС Цикл 
		ТСАвтоГРАФ.Добавить(ТекСтр.ТС);
	КонецЦикла;
	ПараметрыАвтоГРАФ.Вставить("МассивТС", ТСАвтоГРАФ);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтоГРАФ.Установить(Новый ХранилищеЗначения(ПараметрыАвтоГРАФ, Новый СжатиеДанных(9)));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораВариантовПериодичностиХраненияДанных(ЭлементСписок)
	
	ЭлементСписок.СписокВыбора.Очистить();
	
	Если ЭлементСписок = Элементы.Wialon_ПериодичностьХранения Тогда 
		ЭлементСписок.СписокВыбора.Добавить(0,    НСтр("en='Загружать все данные';ru='Загружать все данные'"));
		ЭлементСписок.СписокВыбора.Добавить(1440, НСтр("en='24 hours';ru='24 часа'"));
		ЭлементСписок.СписокВыбора.Добавить(720,  НСтр("en='12 hours';ru='12 часов'"));
		ЭлементСписок.СписокВыбора.Добавить(60,   НСтр("en='1 hour';ru='1 час'"));
		
	ИначеЕсли ЭлементСписок = Элементы.Omnicomm_ПериодичностьХранения Тогда 
		ЭлементСписок.СписокВыбора.Добавить(1440, НСтр("en='24 hours';ru='24 часа'"));
		ЭлементСписок.СписокВыбора.Добавить(720,  НСтр("en='12 hours';ru='12 часов'"));
		ЭлементСписок.СписокВыбора.Добавить(60,   НСтр("en='1 hour';ru='1 час'"));
		ЭлементСписок.СписокВыбора.Добавить(30,   НСтр("en='30 minutes';ru='30 минут'"));
		ЭлементСписок.СписокВыбора.Добавить(15,   НСтр("en='15 minutes';ru='15 минут'"));
		
	Иначе 
		ЭлементСписок.СписокВыбора.Добавить(1440, НСтр("en='24 hours';ru='24 часа'"));
		ЭлементСписок.СписокВыбора.Добавить(720,  НСтр("en='12 hours';ru='12 часов'"));
		ЭлементСписок.СписокВыбора.Добавить(60,   НСтр("en='1 hour';ru='1 час'"));
		ЭлементСписок.СписокВыбора.Добавить(30,   НСтр("en='30 minutes';ru='30 минут'"));
		ЭлементСписок.СписокВыбора.Добавить(15,   НСтр("en='15 minutes';ru='15 минут'"));
		ЭлементСписок.СписокВыбора.Добавить(10,   НСтр("en='10 minutes';ru='10 минут'"));
		ЭлементСписок.СписокВыбора.Добавить(5,    НСтр("en='5 minutes';ru='5 минут'"));
		ЭлементСписок.СписокВыбора.Добавить(1,    НСтр("en='1 minute';ru='1 минута'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("Omnicomm_УчетнаяЗапись",	Справочники.уатУчетныеЗаписиСистемыМониторинга.Omnicomm);
	СтруктураНастроек.Вставить("СКАУТ_УчетнаяЗапись",		Справочники.уатУчетныеЗаписиСистемыМониторинга.СКАУТ);
	СтруктураНастроек.Вставить("АвтоГРАФ_УчетнаяЗапись",	Справочники.уатУчетныеЗаписиСистемыМониторинга.АвтоГРАФ5);
	СтруктураНастроек.Вставить("Wialon_УчетнаяЗапись",		Справочники.уатУчетныеЗаписиСистемыМониторинга.Wialon);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатНастройкиМониторинга", 
		"УчетнаяЗапись", 
		СтруктураНастроек
	);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеПСМ()
	
	МассивПСМ = Новый Массив();
	уатРаботаСРасширениями.ПСМ_ЗаполнитьМассивПСМ(МассивПСМ);
	
	Элементы.СтраницаПСМ.Видимость = МассивПСМ.Количество() > 0;
	Если Элементы.СтраницаПСМ.Видимость Тогда
		Если МассивПСМ.Количество() > 1 Тогда
			Элементы.СтраницаПСМ.Заголовок = Нстр("en = 'Connecting systems'; ru = 'Подключаемые системы'");
			Элементы.ГруппаПСМ.Заголовок   = Нстр("en = 'Connected systems settings:'; ru = 'Настройки подключаемых систем'");
		Иначе
			Элементы.СтраницаПСМ.Заголовок = МассивПСМ[0];
			Элементы.ГруппаПСМ.Заголовок   = "";
		КонецЕсли;
		
		Счетчик = 0;
		Для Каждого ТекСтрока Из МассивПСМ Цикл
			КнопкаНастрокиПСМ = Элементы.Добавить("НастройкиПСМ" + Счетчик, Тип("КнопкаФормы"), Элементы.ГруппаПСМ);
			КнопкаНастрокиПСМ.Заголовок   = Нстр("en = 'Settings'; ru = 'Настройки'") + " " + ТекСтрока;
			КнопкаНастрокиПСМ.ИмяКоманды  = "НастройкиПСМ";
			КнопкаНастрокиПСМ.Вид         = ВидКнопкиФормы.Гиперссылка;
			КнопкаНастрокиПСМ.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КнопкаНастрокиПСМ.Картинка    = БиблиотекаКартинок.уатОткрытьВДругомОкне;
			
			Счетчик = Счетчик + 1;
			
			уатИспользоватьПСМ = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусУчетныхЗаписей()
	
	УЗOmnicommНастроена  = Ложь;
	УЗWialonНастроена    = Ложь;
	УЗСКАУТНастроена     = Ложь;
	УЗАвтоГРАФНастроена  = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатУчетныеЗаписиСистемыМониторинга.Ссылка КАК Ссылка,
	               |	уатУчетныеЗаписиСистемыМониторинга.СистемаМониторинга КАК СистемаМониторинга
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиСистемыМониторинга КАК уатУчетныеЗаписиСистемыМониторинга
	               |ГДЕ
	               |	НЕ уатУчетныеЗаписиСистемыМониторинга.ПометкаУдаления
	               |	И (ВЫРАЗИТЬ(уатУчетныеЗаписиСистемыМониторинга.АдресСервиса КАК СТРОКА(100))) <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm Тогда
			УЗOmnicommНастроена  = Истина;
		ИначеЕсли Выборка.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
			УЗWialonНастроена    = Истина;
		ИначеЕсли Выборка.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
			УЗСКАУТНастроена     = Истина;
		ИначеЕсли Выборка.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
			УЗАвтоГРАФНастроена  = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаПодсказкаOmnicommУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗOmnicommНастроена,
		Элементы.ГруппаПодсказкаOmnicommУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаOmnicommУчетнаяЗаписьНеНастроена);
		
	Элементы.ГруппаПодсказкаWialonУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗWialonНастроена,
		Элементы.ГруппаПодсказкаWialonУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаWialonУчетнаяЗаписьНеНастроена);
		
	Элементы.ГруппаПодсказкаСКАУТУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗСКАУТНастроена,
		Элементы.ГруппаПодсказкаСКАУТУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаСКАУТУчетнаяЗаписьНеНастроена);
		
	Элементы.ГруппаПодсказкаАвтоГРАФУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗАвтоГРАФНастроена,
		Элементы.ГруппаПодсказкаАвтоГРАФУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаАвтоГРАФУчетнаяЗаписьНеНастроена);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Модифицированность = Истина;
		
		ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
		
		Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
			
			Omnicomm_ТаблТС.Очистить();
			Для Каждого ТекТС Из Результат.МассивТС Цикл
				НоваяСтрока = Omnicomm_ТаблТС.Добавить();
				НоваяСтрока.ТС = ТекТС;
			КонецЦикла;
			
			Результат.Свойство("ЗагрузитьПробегИРасходГСМ",       Omnicomm_ЗагрузитьПробегИРасходГСМ);
			Результат.Свойство("ЗагрузитьДополнительныеСведения", Omnicomm_ЗагрузитьДополнительныеСведения);
			Результат.Свойство("ЗагрузитьКоординаты",             Omnicomm_ЗагрузитьКоординаты);
			Результат.Свойство("ИнтервалЗагрузки",                Omnicomm_ИнтервалЗагрузки);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
			Wialon_ТаблТС.Очистить();
			Для Каждого ТекТС Из Результат.МассивТС Цикл
				НоваяСтрока = Wialon_ТаблТС.Добавить();
				НоваяСтрока.ТС = ТекТС;
			КонецЦикла;
			
			Результат.Свойство("ЗагрузитьПробегИРасходГСМ",       Wialon_ЗагрузитьПробегИРасходГСМ);
			Результат.Свойство("ЗагрузитьДополнительныеСведения", Wialon_ЗагрузитьДополнительныеСведения);
			Результат.Свойство("ЗагрузитьКоординаты",             Wialon_ЗагрузитьКоординаты);
			Результат.Свойство("ИнтервалЗагрузки",                Wialon_ИнтервалЗагрузки);
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
			СКАУТ_ТаблТС.Очистить();
			Для Каждого ТекТС Из Результат.МассивТС Цикл
				НоваяСтрока = СКАУТ_ТаблТС.Добавить();
				НоваяСтрока.ТС = ТекТС;
			КонецЦикла;
			
			Результат.Свойство("ЗагрузитьПробегИРасходГСМ",       СКАУТ_ЗагрузитьПробегИРасходГСМ);
			Результат.Свойство("ЗагрузитьДополнительныеСведения", СКАУТ_ЗагрузитьДополнительныеСведения);
			Результат.Свойство("ЗагрузитьКоординаты",             СКАУТ_ЗагрузитьКоординаты);
			Результат.Свойство("ИнтервалЗагрузки",                СКАУТ_ИнтервалЗагрузки);
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
			АвтоГРАФ_ТаблТС.Очистить();
			Для Каждого ТекТС Из Результат.МассивТС Цикл
				НоваяСтрока = АвтоГРАФ_ТаблТС.Добавить();
				НоваяСтрока.ТС = ТекТС;
			КонецЦикла;
			
			Результат.Свойство("ЗагрузитьПробегИРасходГСМ",       АвтоГРАФ_ЗагрузитьПробегИРасходГСМ);
			Результат.Свойство("ЗагрузитьДополнительныеСведения", АвтоГРАФ_ЗагрузитьДополнительныеСведения);
			Результат.Свойство("ЗагрузитьКоординаты",             АвтоГРАФ_ЗагрузитьКоординаты);
			Результат.Свойство("ИнтервалЗагрузки",                АвтоГРАФ_ИнтервалЗагрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУчетнуюЗапись(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьСтатусУчетныхЗаписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРеглЗаданий(ОбновитьВсе = Истина)
	Попытка
		ОбновитьДанныеРеглЗаданийСервер(ОбновитьВсе);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеглЗаданийСервер(ОбновитьВсе = Истина)
	
	Если ОбновитьВсе Тогда
		ОбновитьOmnicomm  = НаборКонстант.уатИспользоватьOmnicomm;
		ОбновитьWialon    = НаборКонстант.уатИспользоватьWialon;
		ОбновитьСКАУТ     = НаборКонстант.уатИспользоватьСКАУТ;
		ОбновитьАвтоГРАФ  = НаборКонстант.уатИспользоватьАвтоГРАФ;
		ОбновитьЦСМ       = НаборКонстант.уатИспользоватьЦСМ;
	Иначе
		ОбновитьOmnicomm  = Ложь;
		ОбновитьWialon    = Ложь;
		ОбновитьСКАУТ     = Ложь;
		ОбновитьАвтоГРАФ  = Ложь;
		ОбновитьЦСМ       = Ложь;
		
		ТекущаяСтраница = Элементы.СтраницыСистемыМониторинга.ТекущаяСтраница;
		Если ТекущаяСтраница = Элементы.СтраницаOmnicomm Тогда
			ОбновитьOmnicomm  = НаборКонстант.уатИспользоватьOmnicomm;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаWialon Тогда
			ОбновитьWialon    = НаборКонстант.уатИспользоватьWialon;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСКАУТ Тогда
			ОбновитьСКАУТ     = НаборКонстант.уатИспользоватьСКАУТ;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаАвтоГРАФ Тогда
			ОбновитьАвтоГРАФ  = НаборКонстант.уатИспользоватьАвтоГРАФ;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЦСМ Тогда
			ОбновитьЦСМ  = НаборКонстант.уатИспользоватьЦСМ;
		КонецЕсли;
	КонецЕсли;

	Если ОбновитьOmnicomm Тогда
		ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
		ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");
		
		РеглЗаданиеOmnicomm_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхOmnicomm);
		Omnicomm_ЗагрузкаДанных            = РеглЗаданиеOmnicomm_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗаданиеOmnicomm_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, Omnicomm_ЗагрузкаДанных));
			Подсказка = ?(РеглЗаданиеOmnicomm_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.Omnicomm_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.Omnicomm_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьWialon Тогда
		ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
		ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");
		
		РеглЗаданиеWialon_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхWialon);
		Wialon_ЗагрузкаДанных            = РеглЗаданиеWialon_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗаданиеWialon_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, Wialon_ЗагрузкаДанных));
			Подсказка = ?(РеглЗаданиеWialon_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.Wialon_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.Wialon_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьСКАУТ Тогда
		ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
		ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");
		
		РеглЗаданиеСКАУТ_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхСКАУТ);
		СКАУТ_ЗагрузкаДанных            = РеглЗаданиеСКАУТ_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗаданиеСКАУТ_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, СКАУТ_ЗагрузкаДанных));
			Подсказка = ?(РеглЗаданиеСКАУТ_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.СКАУТ_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.СКАУТ_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьАвтоГРАФ Тогда
		ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
		ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");
		
		РеглЗаданиеАвтоГРАФ_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхАвтоГРАФ);
		АвтоГРАФ_ЗагрузкаДанных            = РеглЗаданиеАвтоГРАФ_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗаданиеАвтоГРАФ_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, АвтоГРАФ_ЗагрузкаДанных));
			Подсказка = ?(РеглЗаданиеАвтоГРАФ_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.АвтоГРАФ_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.АвтоГРАФ_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьЦСМ Тогда
		ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
		ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");
		
		РеглЗаданиеАвтоЦСМ_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаТекущегоМестоположенияТС);
		ЦСМ_ЗагрузкаДанных                = РеглЗаданиеАвтоЦСМ_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗаданиеАвтоЦСМ_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ЦСМ_ЗагрузкаДанных));
			Подсказка = ?(РеглЗаданиеАвтоЦСМ_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.ЦСМ_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.ЦСМ_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование)
	МассивСообщенийОбОшибках = Новый Массив;
	
	ПараметрыВыполнения = ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(РеглЗадание);
	Если ПараметрыВыполнения.ЗапускВыполнен Тогда
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Запущена процедура регламентного задания';en='Scheduled job is launched'"), ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en = '%1.
                                                                      |The procedure is run in background job%2'; ru = '%1.
                                                                      |Процедура запущена в фоновом задании %2'"),
		РеглЗаданиеНаименование,
		Строка(ПараметрыВыполнения.МоментЗапуска)),
		БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		
		ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Добавить(
		ПараметрыВыполнения.ИдентификаторФоновогоЗадания,
		РеглЗаданиеНаименование);
		
		ПодключитьОбработчикОжидания(
		"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 0.1, Истина);
	ИначеЕсли ПараметрыВыполнения.ПроцедураУжеВыполняется Тогда
		МассивСообщенийОбОшибках.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("en = 'Procedure of scheduled job ""%1"" is
              |already executed in background job ""%2"" started %3.'; ru = 'Процедура регламентного задания ""%1""
              |  уже выполняется в фоновом задании ""%2"", начатом %3.'"),
		РеглЗаданиеНаименование,
		ПараметрыВыполнения.ПредставлениеФоновогоЗадания,
		Строка(ПараметрыВыполнения.МоментЗапуска)));
	КонецЕсли;
	
	КоличествоОшибок = МассивСообщенийОбОшибках.Количество();
	Если КоличествоОшибок > 0 Тогда
		ЗаголовокТекстаПроОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Задания выполнены с ошибками (%1 из %2)';en='Jobs are completed with errors (%1 out of %2)'"),
		Формат(КоличествоОшибок, "ЧГ="),
		Формат(1, "ЧГ="));
		
		ТекстВсехОшибок = Новый ТекстовыйДокумент;
		ТекстВсехОшибок.ДобавитьСтроку(ЗаголовокТекстаПроОшибки + ":");
		Для Каждого ТекстЭтойОшибки Из МассивСообщенийОбОшибках Цикл
			ТекстВсехОшибок.ДобавитьСтроку("");
			ТекстВсехОшибок.ДобавитьСтроку(ТекстЭтойОшибки);
		КонецЦикла;
		
		Если КоличествоОшибок > 5 Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru='Показать ошибки';en='Show errors'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(
			Новый ОписаниеОповещения(
			"ВыполнитьРегламентноеЗаданиеВручнуюЗавершение", ЭтотОбъект, ТекстВсехОшибок),
			ЗаголовокТекстаПроОшибки, Кнопки);
		Иначе
			ПоказатьПредупреждение(, СокрЛП(ТекстВсехОшибок.ПолучитьТекст()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручнуюЗавершение(Ответ, ТекстВсехОшибок) Экспорт
	
	Если Ответ = 1 Тогда
		ТекстВсехОшибок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания()
	
	ОповещенияОбОкончанииВыполнения = ОповещенияОбОкончанииВыполненияРегламентныхЗаданий();
	Для каждого Оповещение Из ОповещенияОбОкончанииВыполнения Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Выполнена процедура регламентного задания';en='Scheduled job procedure is executed'"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = '%1. The procedure is completed in background job %2'; ru = '%1. Процедура завершена в фоновом задании %2'"),
				Оповещение.ПредставлениеРегламентногоЗадания,
				Строка(Оповещение.МоментОкончания)),
			БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		ОбновитьДанныеРеглЗаданий(Ложь);
	КонецЦикла;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		
		ПодключитьОбработчикОжидания(
			"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(Знач ИдентификаторРегламентногоЗадания)
	
	Результат = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОповещенияОбОкончанииВыполненияРегламентныхЗаданий()
	
	ОповещенияОбОкончанииВыполнения = Новый Массив;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		Индекс = ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() - 1;
		
		УстановитьПривилегированныйРежим(Истина);
		Пока Индекс >= 0 Цикл
			
			НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Значение);
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если МассивФоновыхЗаданий.Количество() = 1 Тогда
				МоментОкончания = МассивФоновыхЗаданий[0].Конец;
				
				Если ЗначениеЗаполнено(МоментОкончания) Тогда
					
					ОповещенияОбОкончанииВыполнения.Добавить(
						Новый Структура(
							"ПредставлениеРегламентногоЗадания,
							|МоментОкончания",
							ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Представление,
							МоментОкончания));
					
					ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
				КонецЕсли;
			Иначе
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ОповещенияОбОкончанииВыполнения;
	
КонецФункции

#КонецОбласти

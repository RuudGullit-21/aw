
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Диспетчер = Пользователи.АвторизованныйПользователь();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Чаты, "Диспетчер", Диспетчер);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСообщений, "Чат", Неопределено);
	
	ДатаОткрытия = ТекущаяДатаСеанса();
	
	ОбсужденияДоступны = уатМобильноеПриложениеВодителяСервер.СоздатьСлужебноеОбсуждение() <> Неопределено;
	Если НЕ ОбсужденияДоступны Тогда
		Элементы.Чаты.АвтоОбновление            = Истина;
		Элементы.СписокСообщений.АвтоОбновление = Истина;
	КонецЕсли;
	ОчиститьУстаревшиеСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если НЕ ПользовательВключенВГруппуДиспетчеров(Диспетчер) Тогда
		ТекстПредупреждения = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Пользователь не включен ни в один чат.'"),
		Символы.ПС,
		НСтр("ru = 'Перейти к'"), 
		" ",
		Новый ФорматированнаяСтрока(НСтр("ru='списку чатов'"),,,, "e1cib/list/Справочник.уатЧаты")
		);					
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;

	ПодписатьсяНаСлужебноеОбсуждение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ГруппыДиспетчеров_Запись"
		ИЛИ ИмяСобытия = "Чаты_Запись" Тогда 
		Элементы.Чаты.Обновить();
		Элементы.СписокСообщений.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолучательСообщенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ПредставлениеКоманды = Новый ФорматированнаяСтрока(Нстр("ru = 'Заполнить водителями на линии'"),
			,,, "ЗаполнитьВодителямиНаЛинии");
		ДанныеВыбора.Добавить("ЗаполнитьВодителямиНаЛинии", ПредставлениеКоманды);
		
		ПредставлениеКоманды = Новый ФорматированнаяСтрока(Нстр("ru = 'Заполнить всеми водителями'"),
			,,, "ЗаполнитьВсемиВодителями");
		ДанныеВыбора.Добавить("ЗаполнитьВсемиВодителями", ПредставлениеКоманды);
	Иначе
		ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		мсвВодителей = ПолучитьСписокВыбораВодителей(ТекущиеДанные.Ссылка);
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Ссылка", мсвВодителей);
		ДанныеВыбора = уатЗащищенныеФункцииСервер.ПодобратьСписокФизическихЛиц(Текст, СтруктураОтбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучательСообщенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ЗаполнитьВодителямиНаЛинии" Тогда
		ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		мсвВодителей = ПолучитьСписокВыбораВодителей(ТекущиеДанные.Ссылка);
		
		ПолучитьВсехВодителейНаЛинии(мсвВодителей);
	ИначеЕсли ВыбранноеЗначение = "ЗаполнитьВсемиВодителями" Тогда
		ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьВсемиВодителямиСервер(ТекущиеДанные.Ссылка);
	Иначе
		Если ПолучателиСообщений.НайтиСтроки(Новый Структура("Водитель",
				ВыбранноеЗначение)).Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		НовыйПолучатль = ПолучателиСообщений.Добавить();
		НовыйПолучатль.Водитель   = ВыбранноеЗначение;
		НовыйПолучатль.Тег        = ВыбранноеЗначение;

		ПрикрепитьТегНаСервере(ВыбранноеЗначение, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мсвВодителей = ПолучитьСписокВыбораВодителей(ТекущиеДанные.Ссылка);
	Если мсвВодителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Ссылка", мсвВодителей);
	
	ПараметрыВыбора = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПолучательСообщенияПриИзменении(Элемент)
	ПолучательСообщения       = Неопределено;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстСообщения;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = Теги.НайтиПоИдентификатору(ТегИД);
	
	ДекорацияТегОбработкаНавигационнойСсылкиСервер(СтрокаТегов.НаименованиеЭлемента);
	
	ТегПолучатели = ПолучателиСообщений.НайтиСтроки(Новый Структура("Тег", СтрокаТегов.Тег));
	Для Каждого ТекСтрока Из ТегПолучатели Цикл
		ПолучателиСообщений.Удалить(ТекСтрока);
	КонецЦикла;
	
	Теги.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТегов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТегНажатие(Элемент)	
	ОткрытьФорму("РегистрСведений.уатВодителиНаЛинии.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Чаты

&НаКлиенте
Процедура ЧатыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСообщений, "Чат", Неопределено);
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСообщений, "Чат", ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ЧатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокСообщений

&НаКлиенте
Процедура СписокСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокСообщений.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ",
		ПолучитьКлючЗаписиРегистраЧатыСВодителями(ТекСтрока.Отправитель, ТекСтрока.ИдентификаторСообщения));
	ОткрытьФорму("РегистрСведений.уатЧатыСВодителями.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокСообщенийПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ДатаПрочтения        = ТекущаяДатаСеанса();
	СообщенияПрочитаны   = Ложь;
	ВодителиКРегистрации = Новый Массив();

	Для Каждого ТекСтрока Из Строки Цикл
		ДанныеСообщения = ТекСтрока.Значение.Данные;
		Если НЕ ДанныеСообщения.Прочитано
			И (ДанныеСообщения.ВидСообщения = Перечисления.уатВидыСообщенийМобильногоПриложения.Входящее
			ИЛИ ДанныеСообщения.ВидСообщения = Перечисления.уатВидыСообщенийМобильногоПриложения.Опоздание) Тогда
			УстановитьСтатусПрочитано(ДанныеСообщения.Отправитель,
				ДанныеСообщения.Чат, ДанныеСообщения.ИдентификаторСообщения, ДатаПрочтения, ВодителиКРегистрации);
			СообщенияПрочитаны = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщенияПрочитаны Тогда
		уатМобильноеПриложениеВодителяСервер.ЗарегистрироватьНеобходимостьОбновленияСообщений(ВодителиКРегистрации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	ТекущиеДанные = Элементы.Чаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Возврат;
	КонецЕсли;

	ТекстОшибки = "";
	Если СоздатьСообщения(ТекущиеДанные.Ссылка, ТекстОшибки) Тогда 
		ТекстСообщения = "";
		ПолучателиСообщений.Очистить();
		УдалитьВсеТеги();
		Элементы.СписокСообщений.Обновить();
	Иначе
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧат(Команда)
	ОткрытьФорму("Справочник.уатЧаты.Форма.ФормаЭлемента");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиРегистраЧатыСВодителями(Знач Отправитель, Знач Идентификатор)
	
	ПараметрыКлюча = Новый Структура("Отправитель, Идентификатор", Отправитель, Идентификатор);
	
	Возврат РегистрыСведений.уатЧатыСВодителями.СоздатьКлючЗаписи(ПараметрыКлюча);
	
КонецФункции // ПолучитьКлючЗаписиРегистраСообщенийВодителям()

&НаСервере
Процедура ПолучитьВсехВодителейНаЛинии(мсвДоступныхВодителей)
	
	Тег = Нстр("ru = 'Все водители на линии'");

	СтрокиДляУдаления = ПолучателиСообщений.НайтиСтроки(Новый Структура("Тег", Тег));
	Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл
		ПолучателиСообщений.Удалить(ТекСтрока);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвДоступныхВодителей", мсвДоступныхВодителей);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	|ГДЕ
	|	уатВодителиНаЛинии.ФизическоеЛицо В(&мсвДоступныхВодителей)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = Нстр("ru = 'Нет водителей на линии'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	МассивВодителей = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		Если ПолучателиСообщений.НайтиСтроки(Новый Структура("Водитель",
			Выборка.ФизическоеЛицо)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВодителей.Добавить(Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	Если МассивВодителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	 
	ПредставлениеТега = СтрШаблон(Нстр("ru = '%1 (%2)'"), Тег, МассивВодителей.Количество());
	Для Каждого ТекСтрока Из МассивВодителей Цикл
		НовыйПолучатль = ПолучателиСообщений.Добавить();
		НовыйПолучатль.Водитель   = ТекСтрока;
		НовыйПолучатль.Тег        = ТекСтрока;
		
		ПрикрепитьТегНаСервере(ТекСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьТегНаСервере(Тег, ПредставлениеТега)
	
	ТекСтроки = Теги.НайтиСтроки(Новый Структура("Тег", Тег));
	Если ТекСтроки.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ТекСтроки Цикл
			ТекСтрока.Представление         = ФорматированнаяСтрокаПредставленияТега(ПредставлениеТега,
				ТекСтрока.НавигационнаяСсылка);
			ТекСтрока.ОбновитьПредставление = Истина;
		КонецЦикла;
		ОбновитьЭлементыТегов();
		Возврат;
	КонецЕсли;
	
	СтрокаТегов = Теги.Добавить();
	СтрокаТегов.НавигационнаяСсылка = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	СтрокаТегов.Тег                 = Тег;
	СтрокаТегов.Представление       = ФорматированнаяСтрокаПредставленияТега(ПредставлениеТега,
		СтрокаТегов.НавигационнаяСсылка);
	
	ОбновитьЭлементыТегов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТегов()
		
	Индекс       = 1;
	ИндексГруппы = 1;
	ТекГруппа = Элементы.ГруппаОблакоТеговСтрока;

	Для Каждого ТекНовыйТег Из Теги Цикл
		
		Если Индекс <= 4 Тогда
			ТекГруппаТега = ТекГруппа;
		Иначе
			НаименованиеГруппы = "ГруппаОблакоТеговСтрока" + ИндексГруппы;
			ТекГруппаТега = Элементы.Найти(НаименованиеГруппы);
			Если ТекГруппаТега = Неопределено Тогда
				ТекГруппаТега = Элементы.Добавить(НаименованиеГруппы, Тип("ГруппаФормы"), Элементы.ГруппаОблакоТегов);
				ТекГруппаТега.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
				ТекГруппаТега.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ЗаполнитьЗначенияСвойств(ТекГруппаТега, ТекГруппа,,"ПутьКДаннымЗаголовка");
			КонецЕсли;
			ИндексГруппы = ИндексГруппы + 1;
			Индекс = 0;
		КонецЕсли;
		Индекс = Индекс + 1;
		
		Если ТекНовыйТег.ОбновитьПредставление Тогда
			НаименованиеЭлемента = "ДекорацияТег" + ТекНовыйТег.ПолучитьИдентификатор();
			
			ТекТег = Элементы.Найти(НаименованиеЭлемента);
			Если ТекТег <> Неопределено Тогда
				ТекТег.Заголовок	 = ТекНовыйТег.Представление;
			КонецЕсли;
			ТекНовыйТег.ОбновитьПредставление = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекНовыйТег.НаименованиеЭлемента) Тогда 
			НаименованиеЭлемента = "ДекорацияТег" + ТекНовыйТег.ПолучитьИдентификатор();

			ТекНовыйТег.НаименованиеЭлемента = НаименованиеЭлемента;
			
			НовыйТег = Элементы.Добавить(ТекНовыйТег.НаименованиеЭлемента, Тип("ДекорацияФормы"), ТекГруппаТега);
			ЗаполнитьЗначенияСвойств(НовыйТег, Элементы.ПустойТег);
			НовыйТег.Видимость	 = Истина;
			НовыйТег.Заголовок	 = ТекНовыйТег.Представление;
			НовыйТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияТегОбработкаНавигационнойСсылки");
			
			Если ТекНовыйТег.Тег = "Все водители на линии" Тогда
				НовыйТег.Гиперссылка = Истина;
				НовыйТег.УстановитьДействие("Нажатие", "ДекорацияТегНажатие");
			КонецЕсли;

			
		Иначе
			НаименованиеЭлемента = "ДекорацияТег" + ТекНовыйТег.ПолучитьИдентификатор();
			ТекТег = Элементы.Найти(НаименованиеЭлемента);
			Если ТекТег <> Неопределено 
				И ТекТег.Родитель <> ТекГруппаТега Тогда
				Элементы.Переместить(ТекТег, ТекГруппаТега);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеТеги()
	
	Теги.Очистить();
	
	мсвУдаляемыхТегов = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.ГруппаОблакоТегов.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекСтрока) = Тип("ГруппаФормы") 
			И НЕ ТекСтрока = Элементы.ГруппаОблакоТеговСтрока Тогда
			мсвУдаляемыхТегов.Добавить(ТекСтрока);
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("ГруппаФормы") Тогда
			Для Каждого ТекТег Из Элементы.ГруппаОблакоТеговСтрока.ПодчиненныеЭлементы Цикл
				мсвУдаляемыхТегов.Добавить(ТекТег);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекТег Из мсвУдаляемыхТегов Цикл
		Элементы.Удалить(ТекТег);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, НавигационнаяСсылкаФС)
	
	Цвет	     = Новый Цвет(117, 115, 105);
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Символы.НПП + НаименованиеТега + Символы.НПП,, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.уатУдалить, , , , НавигационнаяСсылкаФС));

	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Процедура ДекорацияТегОбработкаНавигационнойСсылкиСервер(НаименованиеЭлемента)
	
	ТекТег = Элементы.Найти(НаименованиеЭлемента);
	Если ТекТег <> Неопределено Тогда
		Элементы.Удалить(ТекТег);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПрочитано(Отправитель, Получатель, Идентификатор, ДатаПрочтения, ВодителиКРегистрации)
	
	НаборЗаписей = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Получатель.Установить(Получатель);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		Запись.ДатаПрочтения = ДатаПрочтения;
		Запись.Прочитано     = Истина;
	КонецЦикла;
	
	Если НаборЗаписей.Количество() = 0 Тогда

		Запись = НаборЗаписей.Добавить();
		Запись.Получатель    = Получатель;
		Запись.Идентификатор = Идентификатор;
		Запись.ДатаПрочтения = ДатаПрочтения;
		Запись.Прочитано     = Истина;
	КонецЕсли;

	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
	КонецПопытки;

	ВодителиКРегистрации.Добавить(Отправитель);
	
	уатМобильноеПриложениеВодителяСервер.ПроверитьВыполнитьОтправкуPUSH();

КонецПроцедуры

&НаСервере
Функция СоздатьСообщения(Чат, ТекстОшибки)
	
	Если ПолучателиСообщений.Количество() = 0 Тогда
		ТекПолучателиСообщений = Чат.Водители;
	Иначе
		ТекПолучателиСообщений = ПолучателиСообщений;
	КонецЕсли;
	
	Если ТекПолучателиСообщений.Количество() = 0 Тогда
		ТекстОшибки = Нстр("ru = 'Не выбраны получатели сообщения'");
		Возврат Ложь;
	КонецЕсли;

	ВодителиКРегистрации = Новый Массив();
	Для Каждого ТекВодитель Из ТекПолучателиСообщений Цикл
		Если НЕ ЗначениеЗаполнено(ТекВодитель.Водитель) Тогда
			Продолжить;
		Конецесли;
		Водитель = ТекВодитель.Водитель;
		ВодителиКРегистрации.Добавить(Водитель);
	КонецЦикла;

	СообщениеСоздано = РегистрыСведений.уатЧатыСВодителями.СоздатьСообщениеМобильногоПриложения(
		ВодителиКРегистрации,
		ТекстСообщения,
		Чат,
		Диспетчер,
		Перечисления.уатВидыСообщенийМобильногоПриложения.Исходящее,
		ТекущаяДатаСеанса(),
		Ложь,
		,,,,,
		ТекстОшибки
		);
	
	Если НЕ СообщениеСоздано Тогда
		Возврат Ложь;
	КонецЕсли;
	
	уатМобильноеПриложениеВодителяСервер.ЗарегистрироватьНеобходимостьОбновленияСообщений(ВодителиКРегистрации);
	уатМобильноеПриложениеВодителяСервер.ПроверитьВыполнитьОтправкуPUSH();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьсяНаСлужебноеОбсуждение()
	
	Если НЕ ОбсужденияДоступны Тогда
		Возврат;
	КонецЕсли;
	КлючСлужебногоОбсуждения = уатМобильноеПриложениеВодителяСервер.КлючСлужебногоОбсуждения();

	ОшибкаПодключения = Новый ОписаниеОповещения("ОшибкаПодключения", ЭтотОбъект);
	ОбработкаСообщенийСервера = Новый ОписаниеОповещения("ОбработкаСообщенийСервера", ЭтотОбъект);
	СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(ОшибкаПодключения, КлючСлужебногоОбсуждения, ОбработкаСообщенийСервера);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаСообщенийСервера(Сообщение, ДополнительныеПараметры) Экспорт 
	
	Если Сообщение.Дата < ДатаОткрытия Тогда
		Возврат;
	КонецЕсли;   
	УдалитьУстаревшиеСообщение(Сообщение.Идентификатор);

	Элементы.Чаты.Обновить();
	Элементы.СписокСообщений.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУстаревшиеСообщения() 
	Если НЕ ОбсужденияДоступны Тогда
		Возврат;
	КонецЕсли;
	
	Попытка 
		КлючСлужебногоОбсуждения = уатМобильноеПриложениеВодителяСервер.КлючСлужебногоОбсуждения(); 
		ИдентификаторОбсуждения  = СистемаВзаимодействия.ПолучитьОбсуждение(КлючСлужебногоОбсуждения).Идентификатор;   
		
		УстановитьПривилегированныйРежим(Истина);   
		ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
		ОтборСообщений.Обсуждение            = ИдентификаторОбсуждения;
		ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Возр;
		ОтборСообщений.Количество            = 250;
		
		Сообщения   = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		Для Каждого Сообщение Из Сообщения Цикл
			Если НЕ ЗначениеЗаполнено(Сообщение.Текст)
				И Сообщение.Дата < ТекущаяДата Тогда
				СистемаВзаимодействия.УдалитьСообщение(Сообщение.Идентификатор); 
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУстаревшиеСообщение(ИдентификаторСообщения) 

	Попытка 
		УстановитьПривилегированныйРежим(Истина);
		СистемаВзаимодействия.УдалитьСообщение(ИдентификаторСообщения);
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ОшибкаПодключения(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораВодителей(Чат)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Чат", Чат);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЧатыВодители.Водитель КАК Водитель
	|ИЗ
	|	Справочник.уатЧаты.Водители КАК уатЧатыВодители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПользователиМобильногоПриложения КАК уатПользователиМобильногоПриложения
	|		ПО уатЧатыВодители.Водитель = уатПользователиМобильногоПриложения.Пользователь
	|			И (уатПользователиМобильногоПриложения.ИспользоватьЧат)
	|ГДЕ
	|	уатЧатыВодители.Ссылка = &Чат";

	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвВодителей = Новый Массив();
	Пока Выборка.Следующий() Цикл
		мсвВодителей.Добавить(Выборка.Водитель);
	КонецЦикла;
	Возврат мсвВодителей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВсемиВодителямиСервер(Чат)
	мсвВодителей = ПолучитьСписокВыбораВодителей(Чат);
	Для Каждого ТекВодитель Из мсвВодителей Цикл
		Если ПолучателиСообщений.НайтиСтроки(Новый Структура("Водитель",
			ТекВодитель)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПолучатль = ПолучателиСообщений.Добавить();
		НовыйПолучатль.Водитель   = ТекВодитель;
		НовыйПолучатль.Тег        = ТекВодитель;
		
		ПрикрепитьТегНаСервере(ТекВодитель, ТекВодитель);
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательВключенВГруппуДиспетчеров(Диспетчер)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Диспетчер", Диспетчер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатЧаты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатЧаты КАК уатЧаты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатГруппыДиспетчеров.Диспетчеры КАК уатГруппыДиспетчеровДиспетчеры
	               |		ПО уатЧаты.ГруппаДиспетчеров = уатГруппыДиспетчеровДиспетчеры.Ссылка
	               |			И (уатГруппыДиспетчеровДиспетчеры.Диспетчер = &Диспетчер)
	               |ГДЕ
	               |	НЕ уатЧаты.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

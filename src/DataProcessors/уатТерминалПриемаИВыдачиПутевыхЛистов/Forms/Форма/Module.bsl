
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если Параметры.Свойство("ОтображатьКнопкуЗакрытия") Тогда
		ОтображатьКнопкуЗакрытия = Параметры.ОтображатьКнопкуЗакрытия;
	КонецЕсли;
	
	ПолноеИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	ЗаполнитьСписокТипов();
	
	ЦветНажатойКнопки = Новый Цвет(230, 230, 210);
	ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
	УстановитьОграниченияДляРолиВодитель();
	
	Элементы.ШапкаАвторизации.ТекущаяСтраница = Элементы.ШапкаАвторизацииНадпись;
	
	ЗагрузитьНастройкиТерминала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	#Если ВебКлиент Тогда
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	Элементы.ГруппаПрицепы.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
	Элементы.ГруппаЗаправки.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки;
	Элементы.ГруппаПанельИнформации.Видимость  = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершено;
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработкаОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		//И ВводДоступен()
		Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкод(Параметр);
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ОбработатьМагнитныйКод(Параметр);
		ИначеЕсли ИмяСобытия = "RFID" Тогда
			ОбработатьКодRFID(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПриПолученииПодписи" Тогда
		Если Параметр.Результат Тогда
			ПутевойЛист_Подписан = Истина;
			Элементы.ДекорацияПодписьНеверныйПароль.Видимость = Ложь;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершено;
			Элементы.ПанельСЦифрами.Видимость = Ложь;
			ОбновитьСтатусПодписиПЛ();
		Иначе
			Элементы.ДекорацияПодписьНеверныйПароль.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Возврат;
	
	Если ЗавершениеРаботы Тогда 
		НужноЗакрытьФорму = Истина;
		Возврат;
		
	ИначеЕсли НужноЗакрытьФорму <> Истина Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Terminal will be closed. Continue?';ru='Терминал будет закрыт. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборДаты") Тогда
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекЭлементФормыИмя = "ПутевойЛистДатаВыезда" Тогда
			ПутевойЛист_ДатаВыезда = ВыбранноеЗначение;
		ИначеЕсли ТекЭлементФормыИмя = "ПутевойЛистДатаВозвращения" Тогда
			ПутевойЛист_ДатаВозвращения = ВыбранноеЗначение;
		КонецЕсли;
		
		// позиционируемся на исходное поле ввода
		ТекущийЭлемент = Элементы[ТекЭлементФормыИмя];
	
		// обработка изменения значения
		Попытка
			Выполнить(ТекЭлементФормыИмя + "ПриИзменении(Неопределено)");
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутевойЛист_ДатаВыездаПриИзменении(Элемент)
	ИзмениласьДатаВыезда = Истина;
	ПроверитьЗаполнениеШапки();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистВремяВыездаПриИзменении(Элемент)
	ИзмениласьДатаВыезда = Истина;
	ПроверитьЗаполнениеШапки();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистДатаВозвращенияПриИзменении(Элемент)
	ИзмениласьДатаВозврата = Истина;
	ПроверитьЗаполнениеШапки();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистВремяВозвращенияПриИзменении(Элемент)
	ИзмениласьДатаВозврата = Истина;
	ПроверитьЗаполнениеШапки();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Прицепы_Прицеп1ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп1) Тогда
		ПриИзмененииПрицепа(1, ПутевойЛист_Прицепы_Прицеп1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Прицепы_Прицеп2ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп2) Тогда
		ПриИзмененииПрицепа(2, ПутевойЛист_Прицепы_Прицеп2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Прицепы_Прицеп3ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп3) Тогда
		ПриИзмененииПрицепа(3, ПутевойЛист_Прицепы_Прицеп3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Прицепы_Прицеп4ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп4) Тогда
		ПриИзмененииПрицепа(4, ПутевойЛист_Прицепы_Прицеп4);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_ВыполненоТумблерПриИзменении(Элемент)
	ПутевойЛист_Задание_Выполнено = НЕ ПутевойЛист_Задание_Выполнено;
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].Выполнено = ПутевойЛист_Задание_Выполнено;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_УсловиеРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].УсловиеРаботы = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].Контрагент = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_ОбъектСтроительстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].Контрагент = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_УсловиеРаботыПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].УсловиеРаботы = ПутевойЛист_Задание_УсловиеРаботы;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КоличествоКмГрузПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].КоличествоКмГруз = ПутевойЛист_Задание_КоличествоКмГруз;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КоличествоКмПорожнийПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].КоличествоКмПорожний = ПутевойЛист_Задание_КоличествоКмПорожний;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КоличествоЧасовПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].КоличествоЧасов = ПутевойЛист_Задание_КоличествоЧасов;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КоличествоЕздокПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].КоличествоЕздок = ПутевойЛист_Задание_КоличествоЕздок;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КоличествоОперацийПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].КоличествоОпераций = ПутевойЛист_Задание_КоличествоОпераций;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КоличествоТоннПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].КоличествоТонн = ПутевойЛист_Задание_КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_ОбъемПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].Объем = ПутевойЛист_Задание_Объем;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_КонтрагентПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].Контрагент = ПутевойЛист_Задание_Контрагент;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Задание_ОбъектСтроительстваПриИзменении(Элемент)
	ПутевойЛист_Задание[ПутевойЛист_Задание_НомерСтроки-1].ОбъектСтроительства = ПутевойЛист_Задание_ОбъектСтроительства;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Дата1ПриИзменении(Элемент)
	ПутевойЛист_Простои_ДатаПриИзменении(1);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Дата2ПриИзменении(Элемент)
	ПутевойЛист_Простои_ДатаПриИзменении(2);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Дата3ПриИзменении(Элемент)
	ПутевойЛист_Простои_ДатаПриИзменении(3);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Дата4ПриИзменении(Элемент)
	ПутевойЛист_Простои_ДатаПриИзменении(4);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Дата5ПриИзменении(Элемент)
	ПутевойЛист_Простои_ДатаПриИзменении(5);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Дата6ПриИзменении(Элемент)
	ПутевойЛист_Простои_ДатаПриИзменении(6);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Конец1ПриИзменении(Элемент)
	ПроверитьЗаполнениеПростоев();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Конец2ПриИзменении(Элемент)
	ПроверитьЗаполнениеПростоев();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Конец3ПриИзменении(Элемент)
	ПроверитьЗаполнениеПростоев();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Конец4ПриИзменении(Элемент)
	ПроверитьЗаполнениеПростоев();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Конец5ПриИзменении(Элемент)
	ПроверитьЗаполнениеПростоев();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_Конец6ПриИзменении(Элемент)
	ПроверитьЗаполнениеПростоев();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ВидЗаправкиПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ВидЗаправки = ПутевойЛист_Заправки_ВидЗаправки;
	ПриИзмененииВидаЗаправки();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ВидЗаправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_АЗСПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].АЗС = ПутевойЛист_Заправки_АЗС;
	ПроверитьЗаполнениеЗаправкиПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_АЗСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПутевойЛист_Заправки_АЗСПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ТСПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ТС = ПутевойЛист_Заправки_ТС;
	Если ЗначениеЗаполнено(ПутевойЛист_Заправки_ТС) Тогда
		Если ПутевойЛист_Заправки_ВидЗаправки <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
			ПутевойЛист_Заправки_ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ПутевойЛист_Заправки_ТС, "Модель"), "ОсновноеТопливо");
			ПутевойЛист_Заправки_ГСМПриИзменении(Неопределено);
						
			Если ПутевойЛист_Заправки_ВидЗаправки =	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
				ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
				ПутевойЛист_Заправки_ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ПутевойЛист_Заправки_ТС, Водитель,,ПутевойЛист_ДатаВыезда);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеЗаправкиПЛ();
	ОбновитьСписокДоступныхПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ГСМПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ГСМ = ПутевойЛист_Заправки_ГСМ;
	ПроверитьЗаполнениеЗаправкиПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ГСМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ГСМ = ПутевойЛист_Заправки_ГСМ;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	мсвГруппДляОтбора = Новый Массив;
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон"));
		мУчитыватьТЖ = Ложь;
	Иначе	
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", ПутевойЛист_Заправки_ТС, ПутевойЛист_Организация, мУчитыватьТЖ);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ПластикКартаПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ПластиковаяКарта = ПутевойЛист_Заправки_ПластиковаяКарта;
	ПроверитьЗаполнениеЗаправкиПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ПластикКартаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ПластиковаяКарта = ПутевойЛист_Заправки_ПластиковаяКарта;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_ТалоныПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].Талоны = ПутевойЛист_Заправки_Талоны;
	ПроверитьЗаполнениеЗаправкиПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_КоличествоПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].Количество = ПутевойЛист_Заправки_Количество;
	ПроверитьЗаполнениеЗаправкиПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Заправки_СуммаПриИзменении(Элемент)
	ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].Сумма = ПутевойЛист_Заправки_Сумма;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПутевогоЛистаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//Элементы.ГруппаКлавиатура.Доступность = Ложь;
	Элементы.ГруппаПрицепы.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
	Элементы.ГруппаЗаправки.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки;
	ТекЭлементФормыИмя = "";
	
	УстановитьТаймерРаботыСоСтраницей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокДокументов

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьПутевойЛистИзСписка(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	ТекПЛ = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекПЛ = Неопределено Тогда
		Элементы.ВыбратьПутевойЛистИзСпискаПечать.Заголовок = НСтр("en='Print';ru='Печать'");
	Иначе
		Элементы.ВыбратьПутевойЛистИзСпискаПечать.Заголовок = НСтр("en='Print';ru='Печать'") + " " + ПолучитьКраткоеИмяПФ(ТекПЛ.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьПутевойЛист(Команда)
	РежимРаботыОбработки = 0;
	
	мсвПЛ = СписокПЛВодителя(Водитель);
	
	КоличОткрытыхПЛ = мсвПЛ.Количество();
	Если КоличОткрытыхПЛ = 0 Тогда
		Элементы.СтраницыСтатусРежимаВыбора.ТекущаяСтраница = Элементы.СтатусРежимОшибка;
		Возврат;
	КонецЕсли;
			
	Если КоличОткрытыхПЛ = 1 Тогда
		ПечатьПЛ(мсвПЛ[0]);
	Иначе
		Элементы.ПанельСЦифрами.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПЛ;
		Элементы.СтраницыКнопкаВыбратьИзСписка.ТекущаяСтраница = Элементы.СтраницыКнопкаВыбратьИзСпискаПечать;
	КонецЕсли;
	
	УстановитьТаймерРаботыСоСтраницей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПутевойЛист(Команда)
	РежимРаботыОбработки = 1;
	
	мсвПЛ = СписокПЛВодителя(Водитель);
	
	КоличОткрытыхПЛ = мсвПЛ.Количество();
	Если КоличОткрытыхПЛ = 0 Тогда
		Элементы.СтраницыСтатусРежимаВыбора.ТекущаяСтраница = Элементы.СтатусРежимОшибка;
		Возврат;
	КонецЕсли;
	
	
	Если КоличОткрытыхПЛ = 1 Тогда
		НачатьЗакрытиеПутевогоЛиста(мсвПЛ[0]);
	Иначе
		Элементы.ПанельСЦифрами.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПЛ;
		Элементы.СтраницыКнопкаВыбратьИзСписка.ТекущаяСтраница = Элементы.СтраницыКнопкаВыбратьИзСпискаВыбрать;
		Элементы.СписокДокументов.Обновить();
		УстановитьТаймерРаботыСоСтраницей();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура Выход(Команда)
	ТекстНСТР = НСтр("en='Exit and go to authorization?';ru='Завершить работу и перейти к авторизации?'");
	ДиалогОКОтмена(ТекстНСТР, Новый ОписаниеОповещения("ВыходПродолжение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПутевойЛистИзСписка(Команда)
	ТекПЛ = Элементы.СписокДокументов.ТекущаяСтрока;
	Если ТекПЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если РежимРаботыОбработки = 0 Тогда
		ПечатьПЛ(ТекПЛ);
	Иначе
		НачатьЗакрытиеПутевогоЛиста(ТекПЛ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПЛназад(Команда)
	ТекстНСТР = НСтр("en='Return to mode selection?';ru='Вернуться к выбору режима?'");
	ДиалогОКОтмена(ТекстНСТР, Новый ОписаниеОповещения("СписокПЛназадПродолжение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НазадПоПЛ(Команда)
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершено Тогда
		Если ПутевойЛист_Подписан Тогда
			ТекстНСТР = НСтр("en='The driver.s signature will be canceled!';ru='Подпись водителя будет аннулирована!'");
			ДиалогОКОтмена(ТекстНСТР,
				Новый ОписаниеОповещения("НазадПоПЛАннулироватьПодпись", ЭтотОбъект));
			Возврат;
		КонецЕсли;
		
		Элементы.ПанельСЦифрами.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист;
	Иначе
		Если Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗадание Тогда
			Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
			Элементы.ГруппаКнопкаНазад.ТекущаяСтраница = Элементы.СтраницаКнопкаОтмена;
			Элементы.ГруппаПрицепы.Видимость = Истина;
		ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаПростои Тогда
			Если НЕ ПроверитьЗаполнениеПростоев() Тогда
				Возврат;
			КонецЕсли;
			Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗадание;
		ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки Тогда
			Если НЕ ПроверитьЗаполнениеЗаправкиПЛ() Тогда
				Возврат;
			КонецЕсли;
			Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаПростои;
			Элементы.ГруппаКнопкаВперед.ТекущаяСтраница = Элементы.СтраницаДалее;
		КонецЕсли;
		
		ОбновитьНадписьНавигации();
	КонецЕсли;
	
	НазадПоПЛПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура НазадПоПЛАннулироватьПодпись(Результат, ДопПараметры) Экспорт
	Если Результат Тогда
		АннулироватьПодписьВодителя();
		Элементы.ПанельСЦифрами.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист;
		НазадПоПЛПродолжение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазадПоПЛПродолжение()
	Элементы.ГруппаПрицепы.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
		И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
	Элементы.ГруппаЗаправки.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
		И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки;
	УстановитьТаймерРаботыСоСтраницей();
КонецПроцедуры
	
&НаКлиенте
Процедура ВпередПоПЛ(Команда)
	Если Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка Тогда
		Если НЕ ПроверитьЗаполнениеШапки() Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ПанельСЦифрами.Видимость = Истина;
		Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗадание;
		Элементы.ГруппаКнопкаНазад.ТекущаяСтраница = Элементы.СтраницаКнопкаНазад;
		
	ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗадание Тогда
		Элементы.ПанельСЦифрами.Видимость = Истина;
		Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаПростои;
		
	ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаПростои Тогда
		Если НЕ ПроверитьЗаполнениеПростоев() Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ПанельСЦифрами.Видимость = Истина;
		Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки;
		ОтобразитьСтрокуЗаправок(1);
		Элементы.ГруппаКнопкаВперед.ТекущаяСтраница = Элементы.СтраницаЗакрыть;
		
	КонецЕсли;
	
	Элементы.ГруппаПрицепы.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
	Элементы.ГруппаЗаправки.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки;
	ОбновитьНадписьНавигации();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеШапки()
	// проверка корректности периода ПЛ
	Если ПутевойЛистДатаВремяВыезда() > ПутевойЛистДатаВремяВозвращения() Тогда
		НадписьНекорректноеЗаполнениеШапки = НСтр("en='Specified incorrect period';ru='Указан некорректный период'");
		Элементы.НадписьНекорректноеЗаполнениеШапки.Видимость = Истина;
	Иначе
		НадписьНекорректноеЗаполнениеШапки = "";
		Элементы.НадписьНекорректноеЗаполнениеШапки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаКнопкаВперед.Доступность = НадписьНекорректноеЗаполнениеШапки = "";
	
	Возврат (НадписьНекорректноеЗаполнениеШапки = "");
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПростоев()
	// проверка корректности периода простоя
	НадписьНекорректноеЗаполнениеПростоев = "";
	Для НомерПростоя = 1 По 6 Цикл
		Если НЕ Элементы["Простой" + НомерПростоя].Видимость Тогда
			Прервать;
		КонецЕсли;
		
		НачПростоя = ЭтотОбъект["ПутевойЛист_Простои_Начало" + НомерПростоя];
		КонПростоя = ЭтотОбъект["ПутевойЛист_Простои_Конец" + НомерПростоя];
		Если КонПростоя <> НачалоДня(КонПростоя) И НачПростоя > КонПростоя Тогда
			ТекстНСТР = НСтр("en='Specified an invalid period in line %1';ru='Указан некорректный период в строке %1'");
			НадписьНекорректноеЗаполнениеПростоев = СтрШаблон(ТекстНСТР, НомерПростоя);
			Прервать;
		КонецЕсли;
		
		КонПростоя_ = ?(КонПростоя = НачалоДня(КонПростоя), КонецДня(КонПростоя), КонПростоя);
		
		ПутевойЛистДатаВремяВыезда = ПутевойЛистДатаВремяВыезда();
		ПутевойЛистДатаВремяВозвращения = ПутевойЛистДатаВремяВозвращения();
		флМногодневный = (НачалоДня(ПутевойЛистДатаВремяВыезда) <> НачалоДня(ПутевойЛистДатаВремяВозвращения));
		ФорматГраницыПЛ = ?(флМногодневный, "ДФ='dd.MM.yyyy HH:mm'", "ДФ=HH:mm");
		Если ПутевойЛистДатаВремяВыезда <> '00010101' И ПутевойЛистДатаВремяВозвращения <> '00010101'
			И (НачПростоя < ПутевойЛистДатаВремяВыезда ИЛИ КонПростоя_ > ПутевойЛистДатаВремяВозвращения) Тогда
			ТекстНСТР = НСтр("en='The downtime period in line %1 overrun of waybill (%2 - %3)';"
				+ "ru='Период простоя в строке %1 выходит за границы путевого листа (%2 - %3)'");
			НадписьНекорректноеЗаполнениеПростоев = СтрШаблон(ТекстНСТР,
				НомерПростоя,
				Формат(ПутевойЛистДатаВремяВыезда, ФорматГраницыПЛ),
				Формат(ПутевойЛистДатаВремяВозвращения, ФорматГраницыПЛ));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаКнопкаВперед.Доступность = НадписьНекорректноеЗаполнениеПростоев = "";
	
	Возврат (НадписьНекорректноеЗаполнениеПростоев = "");
КонецФункции
	
&НаКлиенте
Процедура НеСогласенСПробегомGPS(Команда)
	Элементы.ГруппаСтраницыСпидометрВозврат.ТекущаяСтраница = Элементы.ГруппаСтраницаСпидометрВозвратGPSнеСогласен;
	ВодительНеСогласенСПробегомGPS = Истина;
	ПутевойЛист_СпидометрВозвращенияВодитель = 0;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_СпидометрВозвращенияВодитель", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СогласенСПробегомGPS(Команда)
	Элементы.ГруппаСтраницыСпидометрВозврат.ТекущаяСтраница = Элементы.ГруппаСтраницаСпидометрВозвратGPS;
	ВодительНеСогласенСПробегомGPS = Ложь;
	ПутевойЛист_СпидометрВозвращенияВодитель = 0;
КонецПроцедуры

&НаКлиенте
Процедура НеСогласенСОстаткомТопливаGPS(Команда)
	Элементы.ГруппаСтраницыТопливоВозврат.ТекущаяСтраница = Элементы.ГруппаСтраницыТопливоВозвратGPSнеСогласен;
	ВодительНеСогласенСРасходомТопливаGPS = Истина;
	ПутевойЛист_ОстатокТопливаВозвратВодитель = 0;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_ОстатокТопливаВозвратВодитель", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СогласенСОстаткомТопливаGPS(Команда)
	Элементы.ГруппаСтраницыТопливоВозврат.ТекущаяСтраница = Элементы.ГруппаСтраницыТопливоВозвратGPS;
	ВодительНеСогласенСРасходомТопливаGPS = Ложь;
	ПутевойЛист_ОстатокТопливаВозвратВодитель = 0;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуРежима(Команда)
	ТекстНСТР = НСтр("en='Return to selection mode?"
"All unsaved data will be lost!';ru='Вернуться к выбору режима?"
"Все несохраненные данные будут утеряны!'");
	
	Если ПутевойЛист_Подписан Тогда
		ТекстНСТР = ТекстНСТР + Символы.ПС + 
			НСтр("en='The driver.s signature will be canceled!';ru='Подпись водителя будет аннулирована!'");
	КонецЕсли;
		
	ДиалогОКОтмена(ТекстНСТР,
		Новый ОписаниеОповещения("ПерейтиКВыборуРежимаПродолжение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрицеп(Команда)
	
	Элементы["ДекорацияЗаголовок1"].Видимость = Истина;
	Элементы["ДекорацияЗаголовок2"].Видимость = Истина;
	Элементы["ДекорацияЗаголовок3"].Видимость = Истина;
	Элементы["ДекорацияЗаголовок4"].Видимость = Истина;
	
	Для Сч = 1 По 4 Цикл
		Если Элементы["Прицеп" + Сч].Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["Прицеп" + Сч].Видимость = Истина;
		Элементы["ГруппаПрицеп" + Сч].Видимость = Истина;
		Элементы["ПутевойЛист_Прицепы_СчВыезда" + Сч].Видимость = Истина;
		Элементы["ПутевойЛист_Прицепы_СчВозврата" + Сч].Видимость = Истина;
		
		Прервать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрицеп1(Команда)
	ВыбратьПрицеп(1);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрицеп2(Команда)
	ВыбратьПрицеп(2);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрицеп3(Команда)
	ВыбратьПрицеп(3);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрицеп4(Команда)
	ВыбратьПрицеп(4);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрицеп1(Команда)
	УдалитьПрицеп(1);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрицеп2(Команда)
	УдалитьПрицеп(2);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрицеп3(Команда)
	УдалитьПрицеп(3);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрицеп4(Команда)
	УдалитьПрицеп(4);
КонецПроцедуры

&НаКлиенте
Процедура НеСогласенПрицеп1(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен1.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен1GPS;
	ВодительНеСогласенСоСчПрицеп1 = Истина;
	ПутевойЛист_Прицепы_СчВозврата1НеСогласен = 0;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_СчПрицеп1", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СогласенПрицеп1(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен1.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен1GPS;
	ВодительНеСогласенСоСчПрицеп1 = Ложь;
	ПутевойЛист_Прицепы_СчВозврата1НеСогласен = 0;
КонецПроцедуры

&НаКлиенте
Процедура НеСогласенПрицеп2(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен2.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен2GPS;
	ВодительНеСогласенСоСчПрицеп2 = Истина;
	ПутевойЛист_Прицепы_СчВозврата2НеСогласен = 0;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_СчПрицеп2", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СогласенПрицеп2(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен2.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен2GPS;
	ВодительНеСогласенСоСчПрицеп2 = Ложь;
	ПутевойЛист_Прицепы_СчВозврата2НеСогласен = 0;
КонецПроцедуры

&НаКлиенте
Процедура НеСогласенПрицеп3(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен3.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен3GPS;
	ВодительНеСогласенСоСчПрицеп3 = Истина;
	ПутевойЛист_Прицепы_СчВозврата3НеСогласен = 0;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_СчПрицеп3", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СогласенПрицеп3(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен3.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен3GPS;
	ВодительНеСогласенСоСчПрицеп3 = Ложь;
	ПутевойЛист_Прицепы_СчВозврата3НеСогласен = 0;
КонецПроцедуры

&НаКлиенте
Процедура НеСогласенПрицеп4(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен4.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен4GPS;
	ВодительНеСогласенСоСчПрицеп4 = Истина;
	ПутевойЛист_Прицепы_СчВозврата4НеСогласен = 0;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_СчПрицеп4", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СогласенПрицеп4(Команда)
	Элементы.ГруппаСтраницыПрицепыНеСогласен4.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен4GPS;
	ВодительНеСогласенСоСчПрицеп4 = Ложь;
	ПутевойЛист_Прицепы_СчВозврата4НеСогласен = 0;
КонецПроцедуры

&НаКлиенте
Процедура Кнопка1(Команда)
	ОбработкаНажатияНаКнопку("1");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка2(Команда)
	ОбработкаНажатияНаКнопку("2");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка3(Команда)
	ОбработкаНажатияНаКнопку("3");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка4(Команда)
	ОбработкаНажатияНаКнопку("4");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка5(Команда)
	ОбработкаНажатияНаКнопку("5");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка6(Команда)
	ОбработкаНажатияНаКнопку("6");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка7(Команда)
	ОбработкаНажатияНаКнопку("7");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка8(Команда)
	ОбработкаНажатияНаКнопку("8");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка9(Команда)
	ОбработкаНажатияНаКнопку("9");
КонецПроцедуры

&НаКлиенте
Процедура Кнопка0(Команда)
	ОбработкаНажатияНаКнопку("0");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗапятая(Команда)
	ИзменитьРежимВводДробныхЗначений();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаС(Команда)
	ОбработкаНажатияНаКнопку("С");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадание(Команда)
	НоваяСтрока = ПутевойЛист_Задание.Добавить();
	НоваяСтрока.КоличествоЕздок = 1;
	
	ОтобразитьСтрокуЗадания(ПутевойЛист_Задание.Количество());
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗадание(Команда)
	ТекстНСТР = НСтр("en='Delete line %  job?';ru='Удалить строку %1 задания?'");
	ТекстНСТР = СтрШаблон(ТекстНСТР, ПутевойЛист_Задание_НомерСтроки);
	ДиалогОКОтмена(ТекстНСТР,
		Новый ОписаниеОповещения("УдалитьЗаданиеПродолжение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя(Индекс)
	ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + Индекс] = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя1(Команда)
	УдалитьВидПростоя(1);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя2(Команда)
	УдалитьВидПростоя(2);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя3(Команда)
	УдалитьВидПростоя(3);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя4(Команда)
	УдалитьВидПростоя(4);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя5(Команда)
	УдалитьВидПростоя(5);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидПростоя6(Команда)
	УдалитьВидПростоя(6);
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееЗадание(Команда)
	Если ПутевойЛист_Задание_НомерСтроки < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьСтрокуЗадания(ПутевойЛист_Задание_НомерСтроки - 1);
КонецПроцедуры

&НаКлиенте
Процедура СледующееЗадание(Команда)
	Если ПутевойЛист_Задание_НомерСтроки = ПутевойЛист_Задание.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьСтрокуЗадания(ПутевойЛист_Задание_НомерСтроки + 1);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУсловиеРаботы(Команда)
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораУсловиеРаботы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора", "УсловиеРаботы"),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУсловиеРаботы(Команда)
	ПутевойЛист_Задание_УсловиеРаботы = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагента(Команда)
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораКонтрагент", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочниковГруппы",
		Новый Структура("ИмяОбъектаВыбора", "Контрагент"),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
	
	&НаКлиенте
Процедура УдалитьКонтрагента(Команда)
	ПутевойЛист_Задание_Контрагент = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектСтроительства(Команда)
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораОбъектСтроительства", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочниковГруппы",
		Новый Структура("ИмяОбъектаВыбора", "ОбъектСтроительства"),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
	
	&НаКлиенте
Процедура УдалитьОбъектСтроительства(Команда)
	ПутевойЛист_Задание_ОбъектСтроительства = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПростой(Команда)
	Для Сч = 1 По 6 Цикл
		Если Элементы["Простой" + Сч].Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Элементы.ГруппаПростоиЗаголовок.Видимость Тогда
			Элементы.ГруппаПростоиЗаголовок.Видимость = Истина;
		КонецЕсли;
		
		Элементы["Простой" + Сч].Видимость = Истина;
		
		// заполнение реквизитов по-умолчанию
		ЭтотОбъект["ПутевойЛист_Простои_Начало" + Сч] = ПутевойЛистДатаВремяВыезда();
		ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч] = ПутевойЛистДатаВремяВыезда();
		
		Прервать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой1(Команда)
	ВыбратьПростой(1);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой2(Команда)
	ВыбратьПростой(2);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой3(Команда)
	ВыбратьПростой(3);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой4(Команда)
	ВыбратьПростой(4);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой5(Команда)
	ВыбратьПростой(5);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой6(Команда)
	ВыбратьПростой(6);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой1(Команда)
	УдалитьПростой(1);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой2(Команда)
	УдалитьПростой(2);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой3(Команда)
	УдалитьПростой(3);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой4(Команда)
	УдалитьПростой(4);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой5(Команда)
	УдалитьПростой(5);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой6(Команда)
	УдалитьПростой(6);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправку(Команда)
	Если НЕ ПроверитьЗаполнениеЗаправкиПЛ() Тогда
		Возврат;
	КонецЕсли;
	
	ПутевойЛист_Заправки.Добавить();
	ПутевойЛист_Заправки_НомерСтроки = ПутевойЛист_Заправки.Количество();
	
	// заполнение реквизитов по-умолчанию
	ПутевойЛист_Заправки_АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист_Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС"));
	ПутевойЛист_Заправки_АЗСПриИзменении(Неопределено);
	ПутевойЛист_Заправки_ВидЗаправки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист_Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки"));
	ПутевойЛист_Заправки_ВидЗаправкиПриИзменении(Неопределено);
	ПутевойЛист_Заправки_ТС = ПутевойЛист_ТС;
	ПутевойЛист_Заправки_ТСПриИзменении(Неопределено);
		
	ОтобразитьСтрокуЗаправок(ПутевойЛист_Заправки.Количество());
	ПриИзмененииВидаЗаправки();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаправку(Команда)
	ТекстНСТР = НСтр("en='Delete refueling %1?';ru='Удалить заправку %1?'");
	ТекстНСТР = СтрШаблон(ТекстНСТР, ПутевойЛист_Заправки_НомерСтроки);
	ДиалогОКОтмена(ТекстНСТР,
		Новый ОписаниеОповещения("УдалитьЗаправкуПродолжение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяЗаправка(Команда)
	Если ПутевойЛист_Заправки_НомерСтроки < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеЗаправкиПЛ() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьСтрокуЗаправок(ПутевойЛист_Заправки_НомерСтроки - 1);
КонецПроцедуры

&НаКлиенте
Процедура СледующаяЗаправка(Команда)
	Если ПутевойЛист_Заправки_НомерСтроки = ПутевойЛист_Заправки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеЗаправкиПЛ() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьСтрокуЗаправок(ПутевойЛист_Заправки_НомерСтроки + 1);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидЗаправки(Команда)
	СписВидовЗаправки = Новый СписокЗначений;
	СписВидовЗаправки.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные"));
	СписВидовЗаправки.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"));
	СписВидовЗаправки.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"));
	СписВидовЗаправки.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик"));
	СписВидовЗаправки.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад"));
	СписВидовЗаправки.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны"));
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораВидЗаправки", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора, СписокОбъектов, Заголовок", "Список", СписВидовЗаправки, НСтр("en = 'Choose fueling type'; ru = 'Выберите вид заправки'")),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАЗС(Команда)
	ЭтоАЗССклад = ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны");
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораАЗС", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора, ЭтоАЗССклад", "АЗС", ЭтоАЗССклад),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТСвЗаправке(Команда)
	СписокТС = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ПутевойЛист_ТС) Тогда
		СписокТС.Добавить(ПутевойЛист_ТС);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп1) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп2) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп3) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп3);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп4) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп4);
	КонецЕсли;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораТС", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
	Новый Структура("ИмяОбъектаВыбора, СписокОбъектов, Заголовок", "Список", СписокТС, НСтр("en = 'Choose'; ru = 'Выберите'") + " " + Элементы.ПутевойЛист_Заправки_ТС.Заголовок),
	ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГСМ(Команда)
	//уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПутевойЛист_Заправки_ГСМ);
	
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
	КонецЕсли;
	
	ГСМ = Неопределено;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораГСМ", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
	Новый Структура("ИмяОбъектаВыбора, СписокОбъектов, Заголовок", "Список", СписокГСМдляТС(ПутевойЛист_Организация, ПутевойЛист_ТС, мГруппаГСМ), НСтр("en = 'Choose'; ru = 'Выберите'") + " " + Элементы.ПутевойЛист_Заправки_ГСМ.Заголовок),
	ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПластиковуюКарту(Команда)
	//ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаВыбора",, Элементы.ПутевойЛист_Заправки_ПластикКарта);
	
	СписокВладельцев = Новый СписокЗначений;
	СписокВладельцев.Добавить(ПутевойЛист_ТС);
	СписокВладельцев.Добавить(Водитель);
	
	ПластикКарта = Неопределено;

	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораПластиковойКарты", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора, СписокОбъектов, Заголовок", "Список", СписокПластикКарт(СписокВладельцев, ПутевойЛист_ДатаВыезда), НСтр("en = 'Choose fuel card'; ru = 'Выберите топливную карту'")),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОбъяснительной(Команда)
	ТабДок = СформироватьОбъяснительную();
	ДиалогОКОтмена(Нстр("en = 'Document sent to print'; ru = 'Документ отправлен на печать'"),, Истина);
	//ТабДок.Показать();
	ТабДок.Напечатать();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПЛЗавершение(Команда)
	ПечатьПЛ(ПутевойЛист_Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	Если НЕ ПроверитьЗаполнениеЗаправкиПЛ() Тогда
		Возврат;
	КонецЕсли;
			
	Элементы.ПечатьОбъснительной.Видимость = (ВодительНеСогласенСПробегомGPS ИЛИ ВодительНеСогласенСРасходомТопливаGPS);
	ОбновитьИнформациюГотово();
	
	ИспользованиеGPS = уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(ПутевойЛист_ТС);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершено;
	
	Строка2 = ?(ЗначениеЗаполнено(ПутевойЛист_СпидометрВозвращенияВодитель), Новый ФорматированнаяСтрока(" (" + Формат(ПутевойЛист_СпидометрВозвращенияВодитель, "ЧЦ=9; ЧДЦ=1") + ")", ,Новый Цвет(0,150,70)), Новый ФорматированнаяСтрока(""));
	Элементы.ПутевойЛист_СпидометрВозвращенияСтрока.Заголовок  = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(Строка(Формат(ПутевойЛист_СпидометрВозвращения, "ЧЦ=9; ЧДЦ=1"))), Строка2);
	
	Строка2 = ?(ЗначениеЗаполнено(ПутевойЛист_ОстатокТопливаВозвратВодитель), Новый ФорматированнаяСтрока(" (" + Формат(ПутевойЛист_ОстатокТопливаВозвратВодитель, "ЧЦ=9; ЧДЦ=1") + ")", ,Новый Цвет(0,150,70)), Новый ФорматированнаяСтрока(""));
	Элементы.ПутевойЛист_ОстатокТопливаВозвратСтрока.Заголовок = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(Строка(Формат(ПутевойЛист_ОстатокТопливаВозврат,"ЧЦ=9; ЧДЦ=1"))), Строка2);
	Элементы.ПанельСЦифрами.Видимость = Ложь;
	Элементы.ГруппаПанельИнформации.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершено;
	УстановитьТаймерРаботыСоСтраницей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПЛ(Команда)
	ТекстНСТР = НСтр("en='Сlose waybill?';ru='Закрыть путевой лист?'");
	ДиалогОКОтмена(ТекстНСТР, Новый ОписаниеОповещения("ЗакрытьПЛПродолжение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПЛ(Команда)
	мсвДокументы = Новый Массив;
	мсвДокументы.Добавить(ПутевойЛист_Ссылка);
	ДопПараметры = Новый Структура("ТолькоПоискПодписанныхФайлов, ТерминалПарольПодписи", Истина, ПодписьПЛ_Пароль);
	соотвФайлы = уатЖурналыТранспортныхДокументов.НайтиДобавитьФайлыДляПодписи(мсвДокументы, ДопПараметры);
	Если соотвФайлы.Количество() = 0 Тогда
		Элементы.ДекорацияПодписьНеверныйПароль.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодписьПЛ;
		Элементы.ПанельСЦифрами.Видимость = Истина;
	Иначе
		ДопПараметры = Новый Структура("ОповеститьОЗавершении, ТерминалПарольПодписи, ТерминалСотрудник",
			Истина, ПодписьПЛ_Пароль, Водитель);
		уатЖурналыТранспортныхДокументовКлиент.Подписать(ПутевойЛист_Ссылка, УникальныйИдентификатор, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПЛОтменитьВводПароля(Команда)
	ПодписьПЛ_Пароль = "";
	Элементы.ДекорацияПодписьНеверныйПароль.Видимость = Ложь;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершено;
	Элементы.ПанельСЦифрами.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПЛВвестиПароль(Команда)
	ДопПараметры = Новый Структура("ОповеститьОЗавершении, ТерминалПарольПодписи, ТерминалСотрудник",
		Истина, ПодписьПЛ_Пароль, Водитель);
	уатЖурналыТранспортныхДокументовКлиент.Подписать(ПутевойЛист_Ссылка, УникальныйИдентификатор, ДопПараметры);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СписокПЛВодителя(Водитель)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.Рассчитан
	|	И уатПутевойЛист.Водитель1 = &Водитель
	|	И уатПутевойЛист.Проведен
	|	И НЕ уатПутевойЛист.ЗакрытВодителем");
	Запрос.УстановитьПараметр("Водитель", Водитель);
	мсвПЛ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");					  
	
	Возврат мсвПЛ;
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеПЛвФормуСервер(ПутевойЛист)
	Если Ложь Тогда
		ПутевойЛист = Документы.уатПутевойЛист.СоздатьДокумент();
	КонецЕсли;
	
	Если ПутевойЛист.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
		Элементы.НеСогласенСОстаткомТопливаGPS.Видимость 			 = Ложь;
		Элементы.ПутевойЛист_ОстатокТопливаВозвратВодитель.Видимость = Ложь;
		Элементы.СогласенСОстаткомТопливаGPS.Видимость 				 = Ложь;
	Иначе
		Элементы.НеСогласенСОстаткомТопливаGPS.Видимость			 = Истина;
		Элементы.ПутевойЛист_ОстатокТопливаВозвратВодитель.Видимость = Истина;
		Элементы.СогласенСОстаткомТопливаGPS.Видимость 				 = Истина;
	КонецЕсли;
	
	//Шапка
	ПутевойЛист_Ссылка = ПутевойЛист;
	ПутевойЛист_Номер  = ПутевойЛист.Номер;
	ПутевойЛист_Организация = ПутевойЛист.Организация;
	ПутевойЛист_ТС = ПутевойЛист.ТранспортноеСредство;
	ПутевойЛист_НомерТС = Строка(ПутевойЛист_ТС);
	ПутевойЛист_МодельТС = ПутевойЛист_ТС.Модель;
	ПутевойЛист_ДатаВыезда = ПутевойЛист.ДатаВыезда;
	ПутевойЛист_ВремяВыезда = ПутевойЛист.ДатаВыезда;
	ПутевойЛист_ДатаВозвращения = ПутевойЛист.ДатаВозвращения;
	ПутевойЛист_ВремяВозвращения = ПутевойЛист.ДатаВозвращения;
	ПутевойЛист_СпидометрВыезда = ПутевойЛист.СпидометрВыезда;
	ПутевойЛист_СпидометрВозвращения = ПутевойЛист.СпидометрВозвращения;
	ПутевойЛист_СпидометрВозвращенияВодитель = 0;
	
	ПутевойЛист_ОстатокТопливаВыезд = 0;
	ПутевойЛист_ОстатокТопливаВозврат = 0;
	ПутевойЛист_ОстатокТопливаВозвратВодитель = 0;
	
	ПутевойЛист_ВыдатьКоличествоГорючего = ПутевойЛист.ВыдатьКоличествоГорючего;
	ПутевойЛист_ПробегПоGPS = ПутевойЛист.ПробегПоGPS;
	
	ОснТопливо = ПолучитьЗначениеРеквизита(ПутевойЛист_МодельТС, "ОсновноеТопливо");
	Для Каждого ТекСтрока Из ПутевойЛист.РасходГСМ Цикл
		Если ПутевойЛист_ТС = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ПутевойЛист_ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ПутевойЛист_ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Прицепы
	Если ПутевойЛист.Прицепы.Количество() = 0 И НЕ Элементы.ГруппаПрицепыКоманды.Видимость Тогда
		Элементы.Разделитель2.Видимость     = Ложь;
		Элементы.ГруппаПрицепыНиз.Видимость = Ложь;
	КонецЕсли;
	
	НомСтр = 0;
	Для Каждого ТекСтрока Из ПутевойЛист.Прицепы Цикл
		НомСтр = НомСтр + 1;
		
		Если НомСтр > 4 Тогда
			Прервать;
		КонецЕсли;
		
		ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + НомСтр] = ТекСтрока.ТС;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + НомСтр] = ТекСтрока.СчетчикМЧGPS;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + НомСтр] = ТекСтрока.СчетчикМЧВыезда;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + НомСтр] = ТекСтрока.СчетчикМЧВозвращения;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + НомСтр + "НеСогласен"] = 0;
	КонецЦикла;
	// остальное чистим
	Для Сч = НомСтр+1 По 4 Цикл
		ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч] = Неопределено;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + Сч] = 0;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + Сч] = 0;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч] = 0;
		ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч + "НеСогласен"] = 0;
	КонецЦикла;
	
	//Задание
	НомСтр = 0;
	ПутевойЛист_Задание.Очистить();
	Для Каждого ТекСтрока Из ПутевойЛист.Задание Цикл
		НомСтр = НомСтр + 1;
		
		НоваяСтрока = ПутевойЛист_Задание.Добавить();
		НоваяСтрока.Выполнено = ТекСтрока.Выполнено;
		НоваяСтрока.КоличествоЕздок = ТекСтрока.КоличествоЕздок;
		НоваяСтрока.КоличествоКмГруз = ТекСтрока.КоличествоКмГруз;
		НоваяСтрока.КоличествоКмПорожний = ТекСтрока.КоличествоКмПорожний;
		НоваяСтрока.КоличествоОпераций = ТекСтрока.КоличествоОпераций;
		НоваяСтрока.КоличествоТонн = ТекСтрока.КоличествоТонн;
		НоваяСтрока.КоличествоЧасов = ТекСтрока.КоличествоЧасов;
		НоваяСтрока.УсловиеРаботы = ТекСтрока.УсловиеРаботы;
		НоваяСтрока.НомерСтрокиСтарый   = ТекСтрока.НомерСтроки;
		НоваяСтрока.Объем               = ТекСтрока.Объем;
		НоваяСтрока.Контрагент          = ТекСтрока.Контрагент;
		НоваяСтрока.ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
	КонецЦикла;
		
	//Простои
	НомСтр = 0;
	Для Каждого ТекСтрока Из ПутевойЛист.Простои Цикл
		НомСтр = НомСтр + 1;
		
		Если НомСтр > 6 Тогда
			Прервать;
		КонецЕсли;
		
		ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + НомСтр] = ТекСтрока.ВидПростоя;
		ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + НомСтр] = ТекСтрока.ВключенДвигатель;
		ЭтотОбъект["ПутевойЛист_Простои_Начало" + НомСтр] = ТекСтрока.НачалоПростоя;
		ЭтотОбъект["ПутевойЛист_Простои_Конец" + НомСтр] = ТекСтрока.КонецПростоя;
	КонецЦикла;
	// остальное чистим
	Для Сч = НомСтр+1 По 6 Цикл
		ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + Сч] = Неопределено;
		ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + Сч] = Неопределено;
		ЭтотОбъект["ПутевойЛист_Простои_Начало" + Сч] = Неопределено;
		ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч] = Неопределено;
	КонецЦикла;
	
	//Заправки
	НомСтр = 0;
	ПутевойЛист_Заправки.Очистить();
	тблЗаправки = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(ПутевойЛист);
	Для Каждого ТекСтрока Из тблЗаправки Цикл
		НомСтр = НомСтр + 1;
		
		НоваяСтрока = ПутевойЛист_Заправки.Добавить();
		НоваяСтрока.ТС = ТекСтрока.ТС;
		НоваяСтрока.АЗС = ТекСтрока.АЗС;
		НоваяСтрока.ВидЗаправки = ТекСтрока.ВидДвиженияГСМ;
		НоваяСтрока.ГСМ = ТекСтрока.ГСМ;
		НоваяСтрока.Количество = ТекСтрока.Количество;
		НоваяСтрока.Сумма = ТекСтрока.Сумма;
		НоваяСтрока.ПластиковаяКарта = ТекСтрока.ПластиковаяКарта;
		НоваяСтрока.Талоны = ТекСтрока.НомераТалонов;
		НоваяСтрока.Ссылка = ТекСтрока.Ссылка;
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьОбъяснительную()
	ТабДок = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("Объяснительная");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Организация = ПутевойЛист_Организация;
	
	Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ПутевойЛист_Организация, ПутевойЛист_ДатаВыезда);
	//ОбластьШапка.Параметры.Директор = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Руководители.Руководитель);
	ОбластьШапка.Параметры.Директор = Руководители.Руководитель;
	
	ОбластьШапка.Параметры.Водитель = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель.ФизическоеЛицо);
	
	ОбластьШапка.Параметры.ТС = ПутевойЛист_ТС;
	ОбластьШапка.Параметры.Дата = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ВодительРасшифровка = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель.ФизическоеЛицо);
	
	ОбластьШапка.Параметры.Пробег = ПутевойЛист_СпидометрВозвращенияВодитель;
	ОбластьШапка.Параметры.ПробегGPS = ПутевойЛист_СпидометрВозвращения;
	
	ТабДок.Вывести(ОбластьШапка);
	
	Возврат ТабДок;
КонецФункции

&НаСервереБезКонтекста
Функция ДокументыТСВодителя(Водитель, ТС, ТекДата)
	Рез = Новый СписокЗначений;
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокТСДляТО.ВидТО КАК ВидОбслуживания,
	|	СписокТСДляТО.ВидТО КАК ВидТО,
	|	СписокТСДляТО.ПлановаяДатаТО КАК ПлановаяДатаТО
	|ПОМЕСТИТЬ втСписокТСДляТО
	|ИЗ
	|	&СписокТСДляТО КАК СписокТСДляТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрСведенийуатДокументыВодителей.ВидДокумента КАК ВидДокумента,
	|	РегистрСведенийуатДокументыВодителей.Серия КАК Серия,
	|	РегистрСведенийуатДокументыВодителей.Номер КАК Номер,
	|	РегистрСведенийуатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	РегистрСведенийуатДокументыВодителей.ДатаОкончания КАК ДатаОкончания,
	|	РегистрСведенийуатДокументыВодителей.КемВыдан КАК КемВыдан,
	|	РегистрСведенийуатДокументыВодителей.ОткрытыеКатегории КАК Категория,
	|	ВЫБОР
	|		КОГДА РегистрСведенийуатДокументыВодителей.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ДОБАВИТЬКДАТЕ(РегистрСведенийуатДокументыВодителей.ДатаОкончания, ДЕНЬ, -&ДниДоОкончанияДействияДокументовВодителей) <= &ДатаОкончания
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДокПросрочен,
	|	ЛОЖЬ КАК ЭтоТО
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК РегистрСведенийуатДокументыВодителей
	|ГДЕ
	|	РегистрСведенийуатДокументыВодителей.ВладелецДокументов = &Сотрудник
	|	И НЕ РегистрСведенийуатДокументыВодителей.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|	И РегистрСведенийуатДокументыВодителей.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РегистрСведенийуатДокументыВодителей.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрСведенийуатДокументыТС.ВидДокумента,
	|	РегистрСведенийуатДокументыТС.Серия,
	|	РегистрСведенийуатДокументыТС.Номер,
	|	РегистрСведенийуатДокументыТС.ДатаВыдачи,
	|	РегистрСведенийуатДокументыТС.ДатаОкончания,
	|	РегистрСведенийуатДокументыТС.КемВыдан,
	|	РегистрСведенийуатДокументыТС.ОткрытыеКатегории,
	|	ВЫБОР
	|		КОГДА НЕ РегистрСведенийуатДокументыТС.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|				И РегистрСведенийуатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ДОБАВИТЬКДАТЕ(РегистрСведенийуатДокументыТС.ДатаОкончания, ДЕНЬ, -&ДниДоОкончанияДействияДокументовТС) <= &ДатаОкончания
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК РегистрСведенийуатДокументыТС
	|ГДЕ
	|	РегистрСведенийуатДокументыТС.ВладелецДокументов = &ТС
	|	И НЕ РегистрСведенийуатДокументыТС.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|	И РегистрСведенийуатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РегистрСведенийуатДокументыТС.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСписокТСДляТО.ВидОбслуживания,
	|	втСписокТСДляТО.ВидТО,
	|	NULL,
	|	NULL,
	|	втСписокТСДляТО.ПлановаяДатаТО,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА
	|ИЗ
	|	втСписокТСДляТО КАК втСписокТСДляТО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания");
	Запрос.УстановитьПараметр("ДниДоОкончанияДействияДокументовВодителей",
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(),	"ОсновнаяОрганизация"), ПредопределенноеЗначение(
		"ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей")));
	Запрос.УстановитьПараметр("ДниДоОкончанияДействияДокументовТС",
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(),	"ОсновнаяОрганизация"), ПредопределенноеЗначение(
		"ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС")));
	Запрос.УстановитьПараметр("ДатаОкончания", ТекДата);
	Запрос.УстановитьПараметр("Сотрудник", Водитель);
	Запрос.УстановитьПараметр("ТС", ТС);

	СписокТСДляТО = уатОбщегоНазначения.СписокТСДляТО(ТекДата, ТС);
	СписокТСДляТО = СписокТСДляТО.Выгрузить();
	Запрос.УстановитьПараметр("СписокТСДляТО", СписокТСДляТО);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаПредставлениеДок = "" + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy");
		Если Выборка.ЭтоТО = Ложь И НЕ Выборка.ДокПросрочен Тогда
			Если Выборка.ДатаОкончания >= ТекДата Тогда
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Нстр("en = 'Expires'; ru = 'Истекает срок действия'");
			Иначе
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Нстр("en = 'Expired'; ru = 'Истек срок действия'");
			КонецЕсли;
			
			СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Выборка.ВидДокумента;
			Если ЗначениеЗаполнено(Выборка.Серия) Тогда
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Выборка.Серия;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Номер) Тогда
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Выборка.Номер;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДатаВыдачи) Тогда
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + НСтр("en='from';ru='от'") + " " + Формат(Выборка.ДатаВыдачи, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			Рез.Добавить(СтрокаПредставлениеДок);
		ИначеЕсли Выборка.ЭтоТО = Истина Тогда
			Если Выборка.ДатаОкончания >= ТекДата Тогда
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Нстр("en = 'will come time for maintenance ('; ru = 'наступит срок ТО ('") + Выборка.ВидДокумента + ")";
			Иначе
				СтрокаПредставлениеДок = СтрокаПредставлениеДок + " " + Нстр("en = 'it''s time for maintenance ('; ru = 'наступил срок ТО ('") + Выборка.ВидДокумента + ")";
			КонецЕсли;
			Рез.Добавить(СтрокаПредставлениеДок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ПолучитьПутьКДанным(ИмяЭлементаФормы)
	Возврат Элементы[ИмяЭлементаФормы].ПутьКДанным;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокТипов()
	Если ТипыЭлементовФормы.Количество() > 0 Тогда
		ТипыЭлементовФормы.Очистить();
	КонецЕсли;
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_СпидометрВозвращения"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 9; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_СпидометрВозвращенияВодитель"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 9; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_ОстатокТопливаВозврат"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 8; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_ОстатокТопливаВозвратВодитель"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 8; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_ДатаВыезда"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛистДатаВозвращения"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛистВремяВыезда"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛистВремяВозвращения"; НовТип.ТипЭлемента = "Время";
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_Прицеп1"; НовТип.ТипЭлемента = "СправочникСсылка.уатТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_Прицеп2"; НовТип.ТипЭлемента = "СправочникСсылка.уатТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_Прицеп3"; НовТип.ТипЭлемента = "СправочникСсылка.уатТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_Прицеп4"; НовТип.ТипЭлемента = "СправочникСсылка.уатТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВыезда1"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВыезда2"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВыезда3"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВыезда4"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата1"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата2"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата3"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата4"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 11; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата1НеСогласен"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 9; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата2НеСогласен"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 9; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата3НеСогласен"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 9; НовТип.Точность = 1;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Прицепы_СчВозврата4НеСогласен"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 9; НовТип.Точность = 1;
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_КоличествоКмГруз"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 7; НовТип.Точность = 3;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_КоличествоКмПорожний"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 7; НовТип.Точность = 3;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_КоличествоЧасов"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 6; НовТип.Точность = 2;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_КоличествоЕздок"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 3; НовТип.Точность = 0;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_КоличествоОпераций"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 3; НовТип.Точность = 0;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_КоличествоТонн"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 10; НовТип.Точность = 3;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_УсловиеРаботы"; НовТип.ТипЭлемента = "СправочникСсылка.уатУсловияРаботы";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_Контрагент"; НовТип.ТипЭлемента = "СправочникСсылка.Контрагенты";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_ОбъектСтроительства"; НовТип.ТипЭлемента = "СправочникСсылка.уатОбъектыСтроительства";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Задание_Объем"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 15; НовТип.Точность = 3;
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Дата1"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Дата2"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Дата3"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Дата4"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Дата5"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Дата6"; НовТип.ТипЭлемента = "Дата";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Начало1"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Начало2"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Начало3"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Начало4"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Начало5"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Начало6"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Конец1"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Конец2"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Конец3"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Конец4"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Конец5"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_Конец6"; НовТип.ТипЭлемента = "Время";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_ВидПростоя1"; НовТип.ТипЭлемента = "СправочникСсылка.уатСостояниеТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_ВидПростоя2"; НовТип.ТипЭлемента = "СправочникСсылка.уатСостояниеТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_ВидПростоя3"; НовТип.ТипЭлемента = "СправочникСсылка.уатСостояниеТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_ВидПростоя4"; НовТип.ТипЭлемента = "СправочникСсылка.уатСостояниеТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_ВидПростоя5"; НовТип.ТипЭлемента = "СправочникСсылка.уатСостояниеТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Простои_ВидПростоя6"; НовТип.ТипЭлемента = "СправочникСсылка.уатСостояниеТС";
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_ВидЗаправки"; НовТип.ТипЭлемента = "ПеречислениеСсылка.уатВидыДвиженияГСМ";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_АЗС"; НовТип.ТипЭлемента = "СправочникСсылка.уатАЗС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_ТС"; НовТип.ТипЭлемента = "СправочникСсылка.уатТС";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_ГСМ"; НовТип.ТипЭлемента = "СправочникСсылка.Номенклатура";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_ПластикКарта"; НовТип.ТипЭлемента = "СправочникСсылка.уатПластиковыеКарты";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_Талоны"; НовТип.ТипЭлемента = "Строка";
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_Количество"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 10; НовТип.Точность = 3;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПутевойЛист_Заправки_Сумма"; НовТип.ТипЭлемента = "Число"; НовТип.Длина = 10; НовТип.Точность = 2;
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "Логин"; НовТип.ТипЭлемента = "Строка"; НовТип.Длина = 50;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "Пароль"; НовТип.ТипЭлемента = "Строка"; НовТип.Длина = 50;
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПарольКлавиатура"; НовТип.ТипЭлемента = "Строка"; НовТип.Длина = 50;
	
	НовТип = ТипыЭлементовФормы.Добавить(); НовТип.ИмяЭлемента = "ПодписьПЛ_Пароль"; НовТип.ТипЭлемента = "Строка"; НовТип.Длина = 50;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Объект, ИменаРеквизитов)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект, ИменаРеквизитов);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаСервере
Процедура УстановитьОграниченияДляРолиВодитель()
	Если НЕ РольДоступна("ПолныеПрава") 
		И НЕ РольДоступна("уатПрикладнаяРольДиспетчер") 
		И НЕ РольДоступна("уатДобавлениеИзменениеПутевыхЛистов") Тогда
		Элементы.ГруппаПрицепыКоманды.Видимость = Ложь;
		Элементы.УдалитьПрицеп1.Видимость = Ложь;
		Элементы.УдалитьПрицеп2.Видимость = Ложь;
		Элементы.УдалитьПрицеп3.Видимость = Ложь;
		Элементы.УдалитьПрицеп4.Видимость = Ложь;
		Элементы.ВыбратьПрицеп1.Видимость = Ложь;
		Элементы.ВыбратьПрицеп2.Видимость = Ложь;
		Элементы.ВыбратьПрицеп3.Видимость = Ложь;
		Элементы.ВыбратьПрицеп4.Видимость = Ложь;
		Элементы.ПутевойЛист_Прицепы_Прицеп1.ТолькоПросмотр = Истина;
		Элементы.ПутевойЛист_Прицепы_Прицеп2.ТолькоПросмотр = Истина;
		Элементы.ПутевойЛист_Прицепы_Прицеп3.ТолькоПросмотр = Истина;
		Элементы.ПутевойЛист_Прицепы_Прицеп4.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПутевойЛистДатаВремяВыезда()
	Рез = НачалоДня(ПутевойЛист_ДатаВыезда) + (ПутевойЛист_ВремяВыезда - НачалоДня(ПутевойЛист_ВремяВыезда));
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ПутевойЛистДатаВремяВозвращения()
	Рез = НачалоДня(ПутевойЛист_ДатаВозвращения) + (ПутевойЛист_ВремяВозвращения - НачалоДня(ПутевойЛист_ВремяВозвращения));
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборАЗС()
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Истина);
	Иначе
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Ложь);
	КонецЕсли;
	МассивПарамВыбора = Новый Массив();
	МассивПарамВыбора.Добавить(НовыйПараметр);
	Элементы.ПутевойЛист_Заправки_АЗС.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокПутевойЛист()
	Если НЕ ЗначениеЗаполнено(ПутевойЛист_Ссылка) Тогда
		ЗаголовокПутевойЛист = "";
		Возврат;
	КонецЕсли;
	
	ЗаголовокПутевойЛист = НСтр("en='Waybill closure';ru='Закрытие путевого листа'") + " №" + ПутевойЛист_Номер;
	
	Если ЗначениеЗаполнено(ПутевойЛист_НомерТС) Тогда
		ЗаголовокПутевойЛист = ЗаголовокПутевойЛист + " (" + СокрЛП(уатОбщегоНазначения.уатПредставлениеМоделиТС(ПутевойЛист_ТС)) + ")";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьНавигации()
	Если Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка Тогда
		НадписьНавигация = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока("Основное", Новый Шрифт(Элементы.НадписьНавигация.Шрифт,,,Истина)),
			" > Задание > Простои > Заправки > Готово");
		
	ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗадание Тогда
		НадписьНавигация = Новый ФорматированнаяСтрока(
			"Основное > ",
			Новый ФорматированнаяСтрока("Задание", Новый Шрифт(Элементы.НадписьНавигация.Шрифт,,,Истина)),
			" > Простои > Заправки > Готово");
		
	ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаПростои Тогда
		НадписьНавигация = Новый ФорматированнаяСтрока(
			"Основное > Задание > ",
			Новый ФорматированнаяСтрока("Простои", Новый Шрифт(Элементы.НадписьНавигация.Шрифт,,,Истина)),
			" > Заправки > Готово");
		
	ИначеЕсли Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки Тогда
		НадписьНавигация = Новый ФорматированнаяСтрока(
			"Основное > Задание > Простои > ",
			Новый ФорматированнаяСтрока("Заправки", Новый Шрифт(Элементы.НадписьНавигация.Шрифт,,,Истина)),
			" > Готово");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОжидания()
	Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") И ТекЭлементФормыИмя <> ТекущийЭлемент.Имя Тогда
		ПриИзмененииТекущегоЭлемента();
		ТекЭлементФормыИмя = ТекущийЭлемент.Имя;
		СброситьРежимВводДробныхЗначений();
	КонецЕсли;
	
	//Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") И НЕ ТекущийЭлемент.ТолькоПросмотр Тогда
	//	Если НЕ Элементы.ГруппаКлавиатура.Доступность Тогда
	//		Элементы.ГруппаКлавиатура.Доступность = Истина;
	//	КонецЕсли;
	//Иначе
	//	Если Элементы.ГруппаКлавиатура.Доступность Тогда
	//		Элементы.ГруппаКлавиатура.Доступность = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
			
	ПодключитьОбработчикОжидания("Подключаемый_ОбработкаОжидания", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоЭлемента()
	СтарыйЭлементИмя = ТекЭлементФормыИмя;
	НовыйЭлементИмя = ТекущийЭлемент.Имя;
	
	Если (СтарыйЭлементИмя = "ПутевойЛист_ДатаВыезда" И НовыйЭлементИмя <> "ПутевойЛистВремяВыезда"
		ИЛИ СтарыйЭлементИмя = "ПутевойЛистВремяВыезда" И НовыйЭлементИмя <> "ПутевойЛист_ДатаВыезда") И ИзмениласьДатаВыезда
		ИЛИ (СтарыйЭлементИмя = "ПутевойЛистДатаВозвращения" И НовыйЭлементИмя <> "ПутевойЛистВремяВозвращения"
		ИЛИ СтарыйЭлементИмя = "ПутевойЛистВремяВозвращения" И НовыйЭлементИмя <> "ПутевойЛистДатаВозвращения") И ИзмениласьДатаВозврата Тогда
		
		Если уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(ПутевойЛист_ТС) Тогда
			ОбновитьПоказанияGPS();
		КонецЕсли;
	КонецЕсли;
	
	Если СтарыйЭлементИмя = "ПутевойЛист_ДатаВыезда" И НовыйЭлементИмя <> "ПутевойЛистВремяВыезда"
		ИЛИ СтарыйЭлементИмя = "ПутевойЛистВремяВыезда" И НовыйЭлементИмя <> "ПутевойЛист_ДатаВыезда" Тогда
		ИзмениласьДатаВыезда = Ложь;
	КонецЕсли;
	Если СтарыйЭлементИмя = "ПутевойЛистДатаВозвращения" И НовыйЭлементИмя <> "ПутевойЛистВремяВозвращения"
		ИЛИ СтарыйЭлементИмя = "ПутевойЛистВремяВозвращения" И НовыйЭлементИмя <> "ПутевойЛистДатаВозвращения" Тогда
		ИзмениласьДатаВозврата = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ТипТекущегоЭлемента()
	//Попытка
	//	ТекТип = ТипЗнч(Вычислить(ТекЭлементФормыИмя));
	//	Если ТекТип = Тип("Число") Тогда
	//		Возврат "Число";
	//	ИначеЕсли ТекТип = Тип("Дата") Тогда
	//		Возврат "Дата";
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	РезТип = Неопределено;
	
	мсвСтрокПоиск = ТипыЭлементовФормы.НайтиСтроки(Новый Структура("ИмяЭлемента", ТекЭлементФормыИмя));
	Если мсвСтрокПоиск.Количество() <> 0 Тогда
		РезТип = Новый Структура("Представление, Длина, Точность", мсвСтрокПоиск[0].ТипЭлемента, мсвСтрокПоиск[0].Длина, мсвСтрокПоиск[0].Точность);
	КонецЕсли;
		
	Возврат РезТип;
КонецФункции

&НаКлиенте
Процедура ИзменитьРежимВводДробныхЗначений()
	ТипТекЭлемента = ТипТекущегоЭлемента();
	Если ТипТекЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипТекЭлемента.Представление = "Число" И ТипТекЭлемента.Точность > 0 ИЛИ ТипТекЭлемента.Представление = "Время" Тогда
		Если РежимВводаДробныхЗначений = 0 Тогда
			РежимВводаДробныхЗначений = 1;
		Иначе
			РежимВводаДробныхЗначений = 0;
		КонецЕсли;
	ИначеЕсли ТипТекЭлемента.Представление = "Дата" Тогда
		Если РежимВводаДробныхЗначений = 0 Тогда
			РежимВводаДробныхЗначений = 1;
		ИначеЕсли РежимВводаДробныхЗначений = 1 Тогда
			РежимВводаДробныхЗначений = 2;
		Иначе
			РежимВводаДробныхЗначений = 0;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПриИзмененииРежимаВводаДробныхЗначений();
КонецПроцедуры

&НаКлиенте
Процедура СброситьРежимВводДробныхЗначений()
	РежимВводаДробныхЗначений = 0;
	ПриИзмененииРежимаВводаДробныхЗначений();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаВводаДробныхЗначений()
	ТипТекЭлемента = ТипТекущегоЭлемента();
	Если ТипТекЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВводаДробныхЗначений = 0 Тогда
		Элементы.КнопкаЗапятая.ЦветФона = ЦветФонаКнопки;
		ТекущийДробныйРазряд = 0;
	Иначе
		Элементы.КнопкаЗапятая.ЦветФона = ЦветНажатойКнопки;
		ТекущийДробныйРазряд = 1;
	КонецЕсли;
	
	Если ТипТекЭлемента.Представление = "Время" Тогда
		ПредставлениеЗапятой = ":";
	ИначеЕсли ТипТекЭлемента.Представление = "Дата" Тогда
		ПредставлениеЗапятой = ".";
	Иначе
		Если ТекЭлементФормыИмя = "ПутевойЛист_Задание_КоличествоЧасов" Тогда
			ПредставлениеЗапятой = ":";
		Иначе
			ПредставлениеЗапятой = ",";
		КонецЕсли;
	КонецЕсли;
	Если Элементы.КнопкаЗапятая.Заголовок <> ПредставлениеЗапятой Тогда
		Элементы.КнопкаЗапятая.Заголовок = ПредставлениеЗапятой;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПЛ(ПутевойЛист)
	
	КоличествоРаспечатанныхКопийПЛ = ПолучитьСчетчикРаспечатанныхКопийПЛ(ПутевойЛист, Водитель);
	
	Если КоличествоРаспечатанныхКопийПЛ < МаксимальноеКоличествоКопийПЛ Тогда
		мСписок = Новый Массив;
		мСписок.Добавить(ПутевойЛист);
		ОбъектыПечати = Новый СписокЗначений;
		
		ТабДок = СформироватьМакетПечати(мСписок, ОбъектыПечати);
		
		ДиалогОКОтмена(Нстр("en = 'Document sent to print'; ru = 'Документ отправлен на печать'"),, Истина);
		
		//ТабДок.Показать();
		

		ТабДок.Напечатать();
		
		УстановитьСчетчикРаспечатанныхКопийПЛ(ПутевойЛист, Водитель, КоличествоРаспечатанныхКопийПЛ);
	Иначе
		ТекстНСтр = Нстр("ru = 'Превышено максимальное количесто распечатанных копий путевого листа'");
		ДиалогОКОтмена(ТекстНСТР,,Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьМакетПечати(мСписок, ОбъектыПечати)
	
	ТабДок = Документы.уатПутевойЛист.ПечатьВесьДокумент(мСписок, ОбъектыПечати);

	Возврат ТабДок;
	
КонецФункции // СформироватьМакетПечати()

&НаСервереБезКонтекста
Функция ПолучитьСчетчикРаспечатанныхКопийПЛ(ПутевойЛист, Водитель)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Сотрудник", Водитель);
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатКоличествоРаспечатанныхКопийПЛ.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.уатКоличествоРаспечатанныхКопийПЛ КАК уатКоличествоРаспечатанныхКопийПЛ
	               |ГДЕ
	               |	уатКоличествоРаспечатанныхКопийПЛ.Сотрудник = &Сотрудник
	               |	И уатКоличествоРаспечатанныхКопийПЛ.ПутевойЛист = &ПутевойЛист";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСчетчикРаспечатанныхКопийПЛ(ПутевойЛист, Водитель, ТекКопий)
	
	Запись = РегистрыСведений.уатКоличествоРаспечатанныхКопийПЛ.СоздатьМенеджерЗаписи();
	Запись.ПутевойЛист	 = ПутевойЛист;
	Запись.Сотрудник	 = Водитель;
	Запись.Значение		 = ТекКопий + 1;
	Запись.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПЛвФорму(ПутевойЛист)
	ЗагрузитьДанныеПЛвФормуСервер(ПутевойЛист);
	ОбновитьОтображениеТЧПЛ();
	ЗаполнитьДокументыВодителейИТС();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеТЧПЛ()
	//прицепы
	//флВидимостьПрицепыЗаголовок = Ложь;
	Для Сч = 1 По 4 Цикл
		ЕстьПрицеп = ЗначениеЗаполнено(Вычислить("ПутевойЛист_Прицепы_Прицеп" + Сч));
		Элементы["Прицеп" + Сч].Видимость                          = ЕстьПрицеп;
		Элементы["ГруппаПрицеп" + Сч].Видимость                    = ЕстьПрицеп;
		Элементы["ПутевойЛист_Прицепы_СчВыезда" + Сч].Видимость    = ЕстьПрицеп;
		Элементы["ПутевойЛист_Прицепы_СчВозврата" + Сч].Видимость  = ЕстьПрицеп;
		//Если НЕ Элементы.ГруппаПрицепыЗаголовок.Видимость И ЕстьПрицеп Тогда
		//	флВидимостьПрицепыЗаголовок = Истина;
		//КонецЕсли;
	КонецЦикла;
	//Если Элементы.ГруппаПрицепыЗаголовок.Видимость <> флВидимостьПрицепыЗаголовок Тогда
	//	Элементы.ГруппаПрицепыЗаголовок.Видимость = флВидимостьПрицепыЗаголовок;
	//КонецЕсли;
	
	//простои
	//флВидимостьПростоиЗаголовок = Ложь;
	Для Сч = 1 По 6 Цикл
		ЕстьПростой = ЗначениеЗаполнено(Вычислить("ПутевойЛист_Простои_ВидПростоя" + Сч))
			ИЛИ ЗначениеЗаполнено(Вычислить("ПутевойЛист_Простои_Начало" + Сч));
		Элементы["Простой" + Сч].Видимость = ЕстьПростой;
		//Если НЕ Элементы.ГруппаПростоиЗаголовок.Видимость И ЕстьПростой Тогда
		//	флВидимостьПростоиЗаголовок = Истина;
		//КонецЕсли;
	КонецЦикла;
	//Если Элементы.ГруппаПростоиЗаголовок.Видимость <> флВидимостьПрицепыЗаголовок Тогда
	//	Элементы.ГруппаПростоиЗаголовок.Видимость = флВидимостьПрицепыЗаголовок;
	//КонецЕсли;
	
	//задание
	ОтобразитьСтрокуЗадания(1);
	
	//заправки
	//ОтобразитьСтрокуЗаправок(1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыВодителейИТС()
	СтрокаЗанятость_ТО_Документы = "";
	СписДокументовТСВодителя = ДокументыТСВодителя(Водитель, ПутевойЛист_ТС, ТекущаяДата());
	Для Каждого ТекДок Из СписДокументовТСВодителя Цикл
		СтрокаЗанятость_ТО_Документы = СтрокаЗанятость_ТО_Документы + ?(ЗначениеЗаполнено(СтрокаЗанятость_ТО_Документы), Символы.ПС, "") + ТекДок.Значение + Символы.ПС;
	КонецЦикла;
	СтрокаЗанятость_Ремонты = Занятость_Ремонты(ПутевойЛист_ТС, ПутевойЛистДатаВремяВыезда());
	СтрокаЗанятость_ТО_Документы = СтрокаЗанятость_ТО_Документы + ?(ЗначениеЗаполнено(СтрокаЗанятость_ТО_Документы), Символы.ПС, "") + СтрокаЗанятость_Ремонты;
	
	Элементы.ГруппаПросрочДокументыПанель.Видимость = ЗначениеЗаполнено(СтрокаЗанятость_ТО_Документы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНавигациюЗадания()
	
	Элементы.ГруппаЗаданиеКомандыНавигация.Доступность = (ПутевойЛист_Задание.Количество() > 0);
	Элементы.ПредыдущееЗадание.Доступность = (ПутевойЛист_Задание_НомерСтроки > 1);
	Элементы.СледующееЗадание.Доступность  = (ПутевойЛист_Задание_НомерСтроки <> ПутевойЛист_Задание.Количество());
	
	Элементы.УдалитьЗадание.Видимость = (ПутевойЛист_Задание.Количество() > 0);
	Если ПутевойЛист_Задание.Количество() = 0 Тогда
		Элементы.ГруппаЗадание.Заголовок = Нстр("en = 'Job'; ru = 'Задание'");
	Иначе
		Элементы.ГруппаЗадание.Заголовок = Нстр("en = 'Job'; ru = 'Задание'") + " " + ПутевойЛист_Задание_НомерСтроки + " " + НСтр("en='from';ru='из'") + " " + ПутевойЛист_Задание.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНавигациюЗаправок()
	Элементы.УдалитьЗаправку.Видимость = (ПутевойЛист_Заправки.Количество() > 0);
	Элементы.ГруппаЗаправкиКомандыНавигация.Доступность = (ПутевойЛист_Заправки.Количество() > 0);
	Элементы.ПредыдущаяЗаправка.Доступность = (ПутевойЛист_Заправки_НомерСтроки > 1);
	Элементы.СледующаяЗаправка.Доступность  = (ПутевойЛист_Заправки_НомерСтроки <> ПутевойЛист_Заправки.Количество());
	Если ПутевойЛист_Заправки.Количество() = 0 Тогда
		Элементы.ГруппаЗаправки.Заголовок = Нстр("en = 'Fueling'; ru = 'Заправки ГСМ'");
	Иначе
		Элементы.ГруппаЗаправки.Заголовок = Нстр("en = 'Fueling'; ru = 'Заправки ГСМ'") + " " + ПутевойЛист_Заправки_НомерСтроки + " " + НСтр("en='from';ru='из'") + " " + ПутевойЛист_Заправки.Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗакрытиеПутевогоЛиста(ТекПЛ)
	ЗагрузитьДанныеПЛвФорму(ТекПЛ);
	Элементы.ПанельСЦифрами.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист;
	Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
	Элементы.ГруппаКнопкаНазад.ТекущаяСтраница = Элементы.СтраницаКнопкаОтмена;
	Элементы.ГруппаКнопкаВперед.ТекущаяСтраница = Элементы.СтраницаДалее;
	Элементы.ГруппаПрицепы.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаШапка;
	Элементы.ГруппаЗаправки.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПутевойЛист
			И Элементы.СтраницыПутевогоЛиста.ТекущаяСтраница = Элементы.СтраницаЗаправки;

	
	Если НЕ Элементы.Прицеп1.Видимость Тогда
		Элементы.ДекорацияЗаголовок1.Видимость = Ложь;
		Элементы.ДекорацияЗаголовок2.Видимость = Ложь;
		Элементы.ДекорацияЗаголовок3.Видимость = Ложь;
		Элементы.ДекорацияЗаголовок4.Видимость = Ложь;
	КонецЕсли;
	Если НЕ Элементы.Простой1.Видимость Тогда
		Элементы.ГруппаПростоиЗаголовок.Видимость = Ложь;
	КонецЕсли;
	
	ВодительНеСогласенСПробегомGPS = Ложь;
	ВодительНеСогласенСРасходомТопливаGPS = Ложь;
	ВодительНеСогласенСоСчПрицеп1 = Ложь;
	ВодительНеСогласенСоСчПрицеп2 = Ложь;
	ВодительНеСогласенСоСчПрицеп3 = Ложь;
	ВодительНеСогласенСоСчПрицеп4 = Ложь;
	НадписьНекорректноеЗаполнениеШапки = "";
	НадписьНекорректноеЗаполнениеПростоев = "";
	
	УстановитьВидимостьДоступностьНеСогласен();
	
	ОбновитьНадписьНавигации();
	ОбновитьСтатусПодписиПЛ();
	ПутевойЛист_Подписан = Ложь;
	
	УстановитьЗаголовокПутевойЛист();
	
	// обновление данных GPS делаем после перехода на страницу ПЛ
	ПодключитьОбработчикОжидания("ОбновитьПоказанияGPS", 1, Истина);
	УстановитьТаймерРаботыСоСтраницей();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтрокуЗадания(НомерСтроки)
	
	Если ПутевойЛист_Задание.Количество() = 0 Тогда
		Элементы.ГруппаЗаданиеСтрока.Видимость = Ложь;
		
		ПутевойЛист_Задание_Выполнено = Ложь;
		ПутевойЛист_Задание_ВыполненоТумблер = 0;
		ПутевойЛист_Задание_КоличествоЕздок = 0;
		ПутевойЛист_Задание_КоличествоКмГруз = 0;
		ПутевойЛист_Задание_КоличествоКмПорожний = 0;
		ПутевойЛист_Задание_КоличествоОпераций = 0;
		ПутевойЛист_Задание_Объем = 0;
		ПутевойЛист_Задание_КоличествоТонн = 0;
		ПутевойЛист_Задание_КоличествоЧасов = 0;
		ПутевойЛист_Задание_УсловиеРаботы       = Неопределено;
		ПутевойЛист_Задание_Контрагент          = Неопределено;
		ПутевойЛист_Задание_ОбъектСтроительства = Неопределено;
		ПутевойЛист_Задание_НомерСтроки = 0;
	Иначе
		Элементы.ГруппаЗаданиеСтрока.Видимость = Истина;
		
		ТекСтрока = ПутевойЛист_Задание[НомерСтроки-1];
		
		ПутевойЛист_Задание_Выполнено = ТекСтрока.Выполнено;
		ПутевойЛист_Задание_ВыполненоТумблер = ?(ТекСтрока.Выполнено, 1, 0);
		ПутевойЛист_Задание_КоличествоЕздок = ТекСтрока.КоличествоЕздок;
		ПутевойЛист_Задание_КоличествоКмГруз = ТекСтрока.КоличествоКмГруз;
		ПутевойЛист_Задание_КоличествоКмПорожний = ТекСтрока.КоличествоКмПорожний;
		ПутевойЛист_Задание_КоличествоОпераций = ТекСтрока.КоличествоОпераций;
		ПутевойЛист_Задание_КоличествоТонн = ТекСтрока.КоличествоТонн;
		ПутевойЛист_Задание_Объем = ТекСтрока.Объем;
		ПутевойЛист_Задание_КоличествоЧасов = ТекСтрока.КоличествоЧасов;
		ПутевойЛист_Задание_УсловиеРаботы = ТекСтрока.УсловиеРаботы;
		ПутевойЛист_Задание_Контрагент          = ТекСтрока.Контрагент;
		ПутевойЛист_Задание_ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
		ПутевойЛист_Задание_НомерСтроки = НомерСтроки;
	КонецЕсли;
	
	ОбновитьНавигациюЗадания();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтрокуЗаправок(НомерСтроки)
	Если ПутевойЛист_Заправки.Количество() = 0 Тогда
		Элементы.ГруппаЗаправкиСтрока.Видимость = Ложь;
		
		ПутевойЛист_Заправки_АЗС = Неопределено;
		ПутевойЛист_Заправки_ТС = Неопределено;
		ПутевойЛист_Заправки_ВидЗаправки = Неопределено;
		ПутевойЛист_Заправки_ГСМ = Неопределено;
		ПутевойЛист_Заправки_Количество = Неопределено;
		ПутевойЛист_Заправки_Сумма = Неопределено;
		ПутевойЛист_Заправки_ПластиковаяКарта = Неопределено;
		ПутевойЛист_Заправки_Талоны = Неопределено;
		ПутевойЛист_Заправки_НомерСтроки = 0;
		ПутевойЛист_Заправки_Ссылка = Неопределено;
	Иначе
		Элементы.ГруппаЗаправкиСтрока.Видимость = Истина;
		
		ТекСтрока = ПутевойЛист_Заправки[НомерСтроки-1];
		
		ПутевойЛист_Заправки_АЗС = ТекСтрока.АЗС;
		ПутевойЛист_Заправки_ВидЗаправки = ТекСтрока.ВидЗаправки;
		ПутевойЛист_Заправки_ТС = ТекСтрока.ТС;
		ПутевойЛист_Заправки_ГСМ = ТекСтрока.ГСМ;
		ПутевойЛист_Заправки_Количество = ТекСтрока.Количество;
		ПутевойЛист_Заправки_Сумма = ТекСтрока.Сумма;
		ПутевойЛист_Заправки_ПластиковаяКарта = ТекСтрока.ПластиковаяКарта;
		ПутевойЛист_Заправки_Талоны = ТекСтрока.Талоны;
		ПутевойЛист_Заправки_НомерСтроки = НомерСтроки;
		ПутевойЛист_Заправки_Ссылка = ТекСтрока.Ссылка;
		
		ПриИзмененииВидаЗаправки();
	КонецЕсли;
	
	ОбновитьНавигациюЗаправок();
	ОбновитьСписокДоступныхПластиковыхКарт();
	УстановитьОтборАЗС();
	
	СписокТС = Новый Массив;
	Если ЗначениеЗаполнено(ПутевойЛист_ТС) Тогда
		СписокТС.Добавить(ПутевойЛист_ТС);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп1) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп2) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп3) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп3);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутевойЛист_Прицепы_Прицеп4) Тогда
		СписокТС.Добавить(ПутевойЛист_Прицепы_Прицеп4);
	КонецЕсли;
	
	Элементы.ПутевойЛист_Заправки_ТС.СписокВыбора.ЗагрузитьЗначения(СписокТС);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДоступныхПластиковыхКарт()
	Элементы.ПутевойЛист_Заправки_ПластикКарта.СписокВыбора.Очистить();
	СписокКарт = ПолучитьСписокДоступныхПластиковыхКартСервер(Водитель, ПутевойЛист_ТС, ПутевойЛист_ВремяВыезда);
	Элементы.ПутевойЛист_Заправки_ПластикКарта.СписокВыбора.ЗагрузитьЗначения(СписокКарт.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхПластиковыхКартСервер(Водитель, ТС, ПутевойЛист_ВремяВыезда)
	
	СписокКарт = Новый СписокЗначений;
	
	СписокВладельцев = Новый СписокЗначений;
	СписокВладельцев.Добавить(ТС);
	СписокВладельцев.Добавить(Водитель);
	
	СписокКарт = уатОбщегоНазначения.уатСписокТопливныхКарт(СписокВладельцев, ПутевойЛист_ВремяВыезда);
	Возврат СписокКарт;
	
КонецФункции

&НаКлиенте
Функция ДиалогОКОтмена(ТекстДиалога, ОповещениеОРезультате = Неопределено, ПечатьПЛ = 0)
	
	Если ОповещениеОРезультате = Неопределено Тогда
		ТекОписаниеОповещения = Неопределено;
	Иначе
		ТекОписаниеОповещения = Новый ОписаниеОповещения("ДиалогОКОтменаПродолжение", ЭтотОбъект, Новый Структура("ОповещениеОРезультате", ОповещениеОРезультате))
	КонецЕсли;
		
	ОткрытьФорму(ПолноеИмяОбработки + ".Форма.Диалог",
		Новый Структура("ТекстДиалога, ПечатьПЛ", ТекстДиалога, ПечатьПЛ), 
		ЭтотОбъект,
		,
		,
		,
		ТекОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

&НаКлиенте
Процедура ДиалогОКОтменаПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОРезультате, (РезультатЗакрытия = Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНеСогласен()
	Элементы.ГруппаСтраницыСпидометрВозврат.ТекущаяСтраница = Элементы.ГруппаСтраницаСпидометрВозвратGPS;
	Элементы.ГруппаСтраницыТопливоВозврат.ТекущаяСтраница = Элементы.ГруппаСтраницыТопливоВозвратGPS;
	Элементы.ГруппаСтраницыПрицепыНеСогласен1.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен1GPS;
	Элементы.ГруппаСтраницыПрицепыНеСогласен2.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен2GPS;
	Элементы.ГруппаСтраницыПрицепыНеСогласен3.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен3GPS;
	Элементы.ГруппаСтраницыПрицепыНеСогласен4.ТекущаяСтраница = Элементы.ГруппаСтраницыПрицепыНеСогласен4GPS;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказанияGPS()
	ИспользуетGPS = уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(ПутевойЛист_ТС);
	Если НЕ ИспользуетGPS Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("ТранспортноеСредство", ПутевойЛист_ТС);
	ОбъектСтруктура.Вставить("ДатаВыезда", ПутевойЛистДатаВремяВыезда());
	ОбъектСтруктура.Вставить("ДатаВозвращения", ПутевойЛистДатаВремяВозвращения());
	ОбъектСтруктура.Вставить("СпидометрВыезда", ПутевойЛист_СпидометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения", ПутевойЛист_СпидометрВозвращения);
	ОбъектСтруктура.Вставить("Организация", ПутевойЛист_Организация);
	мсвПрицепы = Новый Массив;
	Для Сч = 1 По 4 Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч]) Тогда
			СтруктураПрицеп = Новый Структура("ТС, СпидометрВыезда, СпидометрВозвращения",
			ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч],
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + Сч],
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч]);
			мсвПрицепы.Добавить(СтруктураПрицеп);
		КонецЕсли;
	КонецЦикла;
	ОбъектСтруктура.Вставить("Прицепы", мсвПрицепы);
	РезультатСтруктура = Новый Структура;
	
	Попытка
		ТекущийЭлементИмя = ТекущийЭлемент.Имя;
	Исключение
		ТекущийЭлементИмя = "";
	КонецПопытки;
	
	//РАСЧЕТ
	ПараметрыФормы = Новый Структура("ОбъектСтруктура", ОбъектСтруктура);
	ДополнительныеПараметры = Новый Структура("СтарыйЭлементИмя, НовыйЭлементИмя", ТекЭлементФормыИмя, ТекущийЭлементИмя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПоказанияGPSзавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ДлительнаяОперацияОбновлениеGPS", ПараметрыФормы,
		ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказанияGPSзавершение(РезультатСтруктура, ДополнительныеПараметры) Экспорт
	Если РезультатСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// todo: реализовать заполнение остатка топлива при возврате
	
	//Если РезультатСтруктура.Свойство("РасходТоплива") Тогда
	//	ЗаполнитьГСМПоGPSСервер(РезультатСтруктура);
	//Иначе
	//	ЗаполнитьГСМПоGPSСервер();
	//КонецЕсли;
	
	// заполнение основных реквизитов
	Если РезультатСтруктура.Свойство("СчетчикВыезда") Тогда
		ПутевойЛист_СпидометрВыезда = РезультатСтруктура.СчетчикВыезда;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("СчетчикВозвращения") Тогда
		ПутевойЛист_СпидометрВозвращения = РезультатСтруктура.СчетчикВозвращения;
	КонецЕсли;
	
	// Текущая реализация не позволяет корректно занести показатели уровня топлива по мониторнингу в ПЛ
	
	//Если РезультатСтруктура.Свойство("ОстатокТопливаВыезд") Тогда
	//	ПутевойЛист_ОстатокТопливаВыезд = РезультатСтруктура.ОстатокТопливаВыезд;
	//КонецЕсли;
	//Если РезультатСтруктура.Свойство("ОстатокТопливаВозврат") Тогда
	//	ПутевойЛист_ОстатокТопливаВозврат = РезультатСтруктура.ОстатокТопливаВозврат;
	//КонецЕсли;
	
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		ПутевойЛист_ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;

		
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		Для Сч = 1 По 4 Цикл
			Если ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч] = ТекПрицеп.ТС Тогда 
				Если ТекПрицеп.Свойство("СчетчикВыезда") Тогда
					ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + Сч] = ТекПрицеп.СчетчикВыезда;
				КонецЕсли;
				Если ТекПрицеп.Свойство("СчетчикВозвращения") Тогда
					ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч] = ТекПрицеп.СчетчикВозвращения;
				КонецЕсли;
				Если ТекПрицеп.Свойство("СчетчикПоGPS") Тогда
					ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + Сч] = ТекПрицеп.СчетчикПоGPS;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//// обновляем ТЧ Расход ГСМ
	//Если РезультатСтруктура.Свойство("РасходГСМ") Тогда
	//	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "ОсновноеТопливо");
	//	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
	//		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
	//			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
	//			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
	//			Если РезультатСтруктура.Свойство("РасходПоФакту") Тогда
	//				ТекСтрока.РасходПоФакту = РезультатСтруктура.РасходПоФакту;
	//			КонецЕсли;
	//			Если РезультатСтруктура.Свойство("ВыдатьКоличествоГорючего") Тогда
	//				ТекСтрока.Выдано = РезультатСтруктура.ВыдатьКоличествоГорючего;
	//			КонецЕсли;
	//			Если РезультатСтруктура.Свойство("Активен") Тогда
	//				ТекСтрока.Активен = РезультатСтруктура.Активен;
	//			КонецЕсли;
	//			
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Если ДополнительныеПараметры.СтарыйЭлементИмя = "ПутевойЛист_ДатаВыезда" И ДополнительныеПараметры.НовыйЭлементИмя <> "ПутевойЛистВремяВыезда"
		ИЛИ ДополнительныеПараметры.СтарыйЭлементИмя = "ПутевойЛистВремяВыезда" И ДополнительныеПараметры.НовыйЭлементИмя <> "ПутевойЛист_ДатаВыезда" Тогда
		ИзмениласьДатаВыезда = Ложь;
	КонецЕсли;
	Если ДополнительныеПараметры.СтарыйЭлементИмя = "ПутевойЛистДатаВозвращения" И ДополнительныеПараметры.НовыйЭлементИмя <> "ПутевойЛистВремяВозвращения"
		ИЛИ ДополнительныеПараметры.СтарыйЭлементИмя = "ПутевойЛистВремяВозвращения" И ДополнительныеПараметры.НовыйЭлементИмя <> "ПутевойЛистДатаВозвращения" Тогда
		ИзмениласьДатаВозврата = Ложь;
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьГСМПоGPSСервер(РезультатСтруктура = Неопределено, флВыезд = Ложь)
//	
//	ДокОбъект = ПутевойЛист_Ссылка.ПолучитьОбъект();
//	
//	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(ДокОбъект);
//	
//	Если РезультатСтруктура = Неопределено Тогда
//		РасходТоплива = Неопределено;
//	Иначе
//		РасходТоплива = РезультатСтруктура.РасходТоплива;
//	КонецЕсли;
//	
//	уатПутевыеЛисты.ЗаполнитьГСМПоGPSСервер(ДокОбъект, ПараметрыРасчетаГСМ, РасходТоплива, флВыезд);
//	
//	Если флВыезд И ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВыезд") Тогда
//		ПутевойЛист_ОстатокТопливаВыезд = ПараметрыРасчетаГСМ.ОстатокТопливаВыезд;
//	ИначеЕсли НЕ флВыезд И ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВозврат") Тогда
//		ПутевойЛист_ОстатокТопливаВозврат = ПараметрыРасчетаГСМ.ОстатокТопливаВозврат;
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Авторизован = ВодительАвторизован(Авторизация_Логин, Авторизация_Пароль, Водитель);
	
	Если Авторизован Тогда
		Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусВодитель;
		Элементы.ПодписатьПЛ.Видимость = ВидимостьКнопкиПодписать(Водитель);
		ПерейтиНаСтраницуВыборРежима();
	Иначе
		Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусОшибка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВодительАвторизован(Логин, Пароль, Водитель)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПараметрыАвторизацииТерминала.Сотрудник КАК Сотрудник,
	|	уатПараметрыАвторизацииТерминала.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ
	|	РегистрСведений.уатПараметрыАвторизацииТерминала КАК уатПараметрыАвторизацииТерминала
	|ГДЕ
	|	уатПараметрыАвторизацииТерминала.Логин = &Логин
	|	И уатПараметрыАвторизацииТерминала.Пароль = &Пароль");
	
	Запрос.УстановитьПараметр("Логин", Логин);
	Запрос.УстановитьПараметр("Пароль", Пароль);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Водитель = Выборка.Сотрудник;
		Возврат Истина;
	Иначе
		Водитель = Неопределено;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВернутьсяКСтраницеАвторизации()
	
	Водитель = Неопределено;
	Авторизация_Логин = "";
	Авторизация_Пароль = "";
	Авторизация_ПарольКлавиатура = "";
	Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусВодитель;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация;
	Элементы.ПанельСЦифрами.Видимость = Истина;
	
	Попытка
		ОтключитьОбработчикОжидания("ТаймерРаботыСоСтраницей");
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(Параметр)
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаАвторизация
		И Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаВыборРежима
		И Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаСписокПЛ Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодПЛ = уатОбщегоНазначенияКлиент.ПолучитьШтрихкодПоДаннымСобытия(Параметр);
	
	Если ЗначениеЗаполнено(ШтрихкодПЛ) Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация Тогда //авторизация по штрихкоду
			ТекПЛ = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(ШтрихкодПЛ);
			Если ТипЗнч(ТекПЛ) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
				Если РазрешитьАвторизациюПоШтрихкоду Тогда
					Если ЗначениеЗаполнено(ТекПЛ) И ПЛдоступенДляЗакрытияВодителем(ТекПЛ) Тогда
						Водитель = ПолучитьЗначениеРеквизита(ТекПЛ, "Водитель1");
						уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокДокументов.Отбор, "Водитель1", Водитель);
						
						// отсканирован ПЛ авторизованного водителя - переходим к его закрытию
						НачатьЗакрытиеПутевогоЛиста(ТекПЛ);
					КонецЕсли;
				Иначе
					Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусОшибкаШтрихкодПЛ;
				КонецЕсли;
			Иначе
				
				Водитель = ПолучитьВладельцаКарты(ШтрихкодПЛ, "ШК");
				Если ЗначениеЗаполнено(Водитель) Тогда
					Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусВодитель;
					ПерейтиНаСтраницуВыборРежима();
				Иначе
					Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусОшибкаМагнитнаяКарта;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборРежима
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПЛ
			И Элементы.СтраницыКнопкаВыбратьИзСписка.ТекущаяСтраница = Элементы.СтраницыКнопкаВыбратьИзСпискаВыбрать Тогда //получение путевого листа по штрихкоду
			
			ТекПЛ = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(ШтрихкодПЛ);
			Если ТипЗнч(ТекПЛ) = Тип("ДокументСсылка.уатПутевойЛист")
				И ПЛдоступенДляЗакрытияВодителем(ТекПЛ) Тогда
				
				Если ЗначениеЗаполнено(ТекПЛ) И ПолучитьЗначениеРеквизита(ТекПЛ, "Водитель1") = Водитель Тогда
					уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокДокументов.Отбор, "Водитель1", Водитель);
					
					// отсканирован ПЛ авторизованного водителя - переходим к его закрытию
					НачатьЗакрытиеПутевогоЛиста(ТекПЛ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПЛдоступенДляЗакрытияВодителем(ПЛссылка)
	Возврат ПЛссылка.Проведен И НЕ ПЛссылка.Рассчитан И НЕ ПЛссылка.ЗакрытВодителем;
КонецФункции

&НаКлиенте
Процедура ОбработатьМагнитныйКод(Данные)
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаАвторизация Тогда
		Возврат;
	КонецЕсли;
	
	КодКарты = уатОбщегоНазначенияКлиент.ПолучитьМагнитныйКодПоДаннымСобытия(Данные);
	Водитель = ПолучитьВладельцаКарты(КодКарты, "МК");
	
	Если ЗначениеЗаполнено(Водитель) Тогда
		Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусВодитель;
		ПерейтиНаСтраницуВыборРежима();
	Иначе
		Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусОшибкаМагнитнаяКарта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодRFID(Данные)
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаАвторизация Тогда
		Возврат;
	КонецЕсли;
	
	КодКарты = уатОбщегоНазначенияКлиент.ПолучитьRFIDКодПоДаннымСобытия(Данные);
	Водитель = ПолучитьВладельцаКарты(КодКарты, "RFID");
	
	Если ЗначениеЗаполнено(Водитель) Тогда
		Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусВодитель;
		ПерейтиНаСтраницуВыборРежима();
	Иначе
		Элементы.СтраницыСтатус.ТекущаяСтраница = Элементы.СтатусОшибкаМагнитнаяКарта;
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ПерейтиНаСтраницуВыборРежима()
	Элементы.ПанельСЦифрами.Видимость = Ложь;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборРежима;
	Элементы.СтраницыСтатусРежимаВыбора.ТекущаяСтраница = Элементы.СтатусРежимОК;
	
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(СписокДокументов.Отбор, "Водитель1", Водитель);
	
	АннулироватьПодписьВодителя();
		
	мсвПЛ = СписокПЛВодителя(Водитель);
	Если мсвПЛ.Количество() = 1 Тогда
		Элементы.ПолучитьПутевойЛист.Заголовок = НСтр("en='Print';ru='Печать'") + " " + ПолучитьКраткоеИмяПФ(мсвПЛ[0]);
	Иначе
		Элементы.ПолучитьПутевойЛист.Заголовок = НСтр("en='Print waybill';ru='Печать путевого листа'");
	КонецЕсли;
	УстановитьТаймерРаботыСоСтраницей();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаКарты(КодКарты, ТипКода = "ШК")
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатКартыДоступа.ВладелецКарты
	|ИЗ
	|	Справочник.уатКартыДоступа КАК уатКартыДоступа
	|ГДЕ
	|	НЕ уатКартыДоступа.ПометкаУдаления
	|	И уатКартыДоступа.Статус = &СтатусАктивная");
	Если ТипКода = "ШК" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатКартыДоступа.ШтрихКод = &КодКарты";
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
	ИначеЕсли ТипКода = "МК" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатКартыДоступа.МагнитныйКод = &КодКарты";
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
	Иначе //RFID
		Запрос.Текст = Запрос.Текст + "
		|	И уатКартыДоступа.КодRFID = &КодКарты";
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусАктивная", Перечисления.уатСтатусыКарт.Действует);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВладелецКарты;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВыходПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ВернутьсяКСтраницеАвторизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НужноЗакрытьФорму = Неопределено;
	Иначе
		НужноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	    
КонецПроцедуры

&НаКлиенте
Процедура СписокПЛназадПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда
		ПерейтиНаСтраницуВыборРежима();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_СпидометрВозвращенияВодитель()
	ТекущийЭлемент = Элементы.ПутевойЛист_СпидометрВозвращенияВодитель;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_ОстатокТопливаВозвратВодитель()
	ТекущийЭлемент = Элементы.ПутевойЛист_ОстатокТопливаВозвратВодитель;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуРежимаПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда
		ПерейтиНаСтраницуВыборРежима();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрицеп(НомерПрицепа)
	ДопПараметры = Новый Структура("НомерПрицепа", НомерПрицепа);
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораПрицепа", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора", "Прицеп"),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПрицепа(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПриИзмененииПрицепа(ДопПараметры.НомерПрицепа, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПрицепа(НомерПрицепа, ЗначениеПрицепа)
	СчВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ЗначениеПрицепа, ПутевойЛистДатаВремяВыезда());
	
	ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + НомерПрицепа] = ЗначениеПрицепа;
	ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + НомерПрицепа] = СчВыезда;
	ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + НомерПрицепа] = СчВыезда;
	ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + НомерПрицепа] = 0;
	
	ОбновитьПоказанияGPS();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрицеп(НомерПрицепа)
	ТекстНСТР = НСтр("en='Delete trailer %1 ?';ru='Удалить прицеп %1 ?'");
	ТекстНСТР = СтрШаблон(ТекстНСТР, НомерПрицепа);
	ДиалогОКОтмена(ТекстНСТР, 
		Новый ОписаниеОповещения("УдалитьПрицепПродолжение", ЭтотОбъект, Новый Структура("НомерПрицепа",НомерПрицепа)));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрицепПродолжение(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	НомерПрицепа = ДопПараметры.НомерПрицепа;
	
	// сначала считаем количество прицепов до удаления
	КоличПрицепов = 4;
	Для Сч = 1 По 4 Цикл
		Если НЕ Элементы["Прицеп" + Сч].Видимость Тогда
			КоличПрицепов = Сч-1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// скрываем неиспользуемые прицепы (их будет КоличПрицепов-1)
	Для Сч = 1 По 4 Цикл
		ВидомостьПрицепа = (Сч < КоличПрицепов);
		Если Элементы["Прицеп" + Сч].Видимость <> ВидомостьПрицепа Тогда
			Элементы["Прицеп" + Сч].Видимость                          = ВидомостьПрицепа;
			Элементы["ГруппаПрицеп" + Сч].Видимость                    = ВидомостьПрицепа;
			Элементы["ПутевойЛист_Прицепы_СчВыезда" + Сч].Видимость    = ВидомостьПрицепа;
			Элементы["ПутевойЛист_Прицепы_СчВозврата" + Сч].Видимость = ВидомостьПрицепа;
		КонецЕсли;
	КонецЦикла;
	
	// сдвигаем значение на один, закрывая дырку, если мы удалили не последний прицеп
	Для Сч = НомерПрицепа По КоличПрицепов Цикл
		Если Сч < 4 Тогда
			ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч] = ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + Сч] = ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч] = ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + Сч] = ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч + "НеСогласен"] = ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + (Сч+1) + "НеСогласен"];
			
			ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + (Сч+1)] = Неопределено;
			ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + (Сч+1)] = 0;
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + (Сч+1)] = 0;
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + (Сч+1)] = 0;
			ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + (Сч+1) + "НеСогласен"] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличПрицепов = 1 Тогда
		Элементы.ДекорацияЗаголовок1.Видимость = Ложь;
		Элементы.ДекорацияЗаголовок2.Видимость = Ложь;
		Элементы.ДекорацияЗаголовок3.Видимость = Ложь;
		Элементы.ДекорацияЗаголовок4.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_СчПрицеп1()
	ТекущийЭлемент = Элементы.ПутевойЛист_Прицепы_СчВозврата1НеСогласен;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_СчПрицеп2()
	ТекущийЭлемент = Элементы.ПутевойЛист_Прицепы_СчВозврата2НеСогласен;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_СчПрицеп3()
	ТекущийЭлемент = Элементы.ПутевойЛист_Прицепы_СчВозврата3НеСогласен;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_СчПрицеп4()
	ТекущийЭлемент = Элементы.ПутевойЛист_Прицепы_СчВозврата4НеСогласен;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияНаКнопку(Кнопка)
	Если НЕ ЗначениеЗаполнено(ТекЭлементФормыИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияВТекЭлементе = ТипТекущегоЭлемента();
	Если ТипЗначенияВТекЭлементе = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекЭлементФормы = Элементы[ТекЭлементФормыИмя];
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация 
			И (ТекЭлементФормыИмя <> "Логин" И ТекЭлементФормыИмя <> "ПарольКлавиатура" И ТекЭлементФормыИмя <> "Пароль") Тогда
			Возврат;
		КонецЕсли;
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодписьПЛ И ТекЭлементФормыИмя <> "ПодписьПЛ_Пароль" Тогда
			Возврат;
		КонецЕсли;
		Если ТекЭлементФормы.ТолькоПросмотр И ТекЭлементФормыИмя <> "Логин" И ТекЭлементФормыИмя <> "ПарольКлавиатура"
			И ТекЭлементФормыИмя <> "Пароль" Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	ПутьКДанным = ПолучитьПутьКДанным(ТекЭлементФормыИмя);
	
	Если Кнопка = "С" Тогда //стираем значение
		Если ТипЗначенияВТекЭлементе.Представление = "Время" Тогда
			ЭтотОбъект[ПутьКДанным] = НачалоДня(ЭтотОбъект[ПутьКДанным]);
		ИначеЕсли ТипЗначенияВТекЭлементе.Представление = "Дата" Тогда
			ЭтотОбъект[ПутьКДанным] = '00010101';
			//ЭтотОбъект[ПутьКДанным] = '00010101' + (ЭтотОбъект[ПутьКДанным] - НачалоДня(ЭтотОбъект[ПутьКДанным]));
		Иначе
			ЭтотОбъект[ПутьКДанным] = Неопределено;
		КонецЕсли;
		СброситьРежимВводДробныхЗначений();
		
		Если ТекЭлементФормыИмя = "ПарольКлавиатура" Тогда
			Авторизация_Пароль = "";
		КонецЕсли;
		
	ИначеЕсли Кнопка = "К" Тогда //отображаем форму выбора даты из календаря
		Если ТипЗначенияВТекЭлементе.Представление = "Дата" Тогда
			ТекДата = ЭтотОбъект[ПутьКДанным];
			Если ТекДата = '00010101' Тогда
				ТекДата = ТекущаяДата();
			КонецЕсли;
						
			ПараметрыВыбораДаты = Новый Структура(
			"НачальноеЗначение, 
			|НачалоПериодаОтображения, 
			|КонецПериодаОтображения, 
			|Заголовок, 
			|ПоясняющийТекст");
			
			ПараметрыВыбораДаты.НачальноеЗначение = ТекДата;
			ПараметрыВыбораДаты.НачалоПериодаОтображения = НачалоМесяца(ТекДата);
			ПараметрыВыбораДаты.КонецПериодаОтображения = КонецМесяца(ТекДата);
			ПараметрыВыбораДаты.Заголовок = "Выбор даты";
			
			ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыВыбораДаты, ЭтотОбъект);
	
			СброситьРежимВводДробныхЗначений();
			Возврат;
		КонецЕсли;
		
	Иначе //дописываем справа цифру
		Если ТипЗначенияВТекЭлементе.Представление = "Число" Тогда
			ЦелЧастьСтрока = Формат(Цел(ЭтотОбъект[ПутьКДанным]), "ЧН=; ЧГ=");
			Если ТекущийДробныйРазряд = 1 Тогда //начинаем вводить дробную часть - очищаем старые символы
				ДробЧастьСтрока = Формат(0, "ЧЦ=" + ТипЗначенияВТекЭлементе.Точность + "; ЧН=; ЧГ=; ЧВН=");	
			Иначе
				Если ЭтотОбъект[ПутьКДанным] - Цел(ЭтотОбъект[ПутьКДанным]) = 0 Тогда
					ДробЧастьСтрока = Формат(0, "ЧЦ=" + ТипЗначенияВТекЭлементе.Точность + "; ЧН=; ЧГ=; ЧВН=");
				Иначе
					ЗначениеСтрока = Формат(ЭтотОбъект[ПутьКДанным], "ЧДЦ=" + ТипЗначенияВТекЭлементе.Точность + "; ЧГ=");
					ДробЧастьСтрока = Прав(ЗначениеСтрока, ТипЗначенияВТекЭлементе.Точность);
				КонецЕсли;
			КонецЕсли;
			
			Если РежимВводаДробныхЗначений = 0 Тогда
				ЦелЧастьСтрока = ЦелЧастьСтрока + Кнопка;
				ДлинаЦелойЧасти = ТипЗначенияВТекЭлементе.Длина - ТипЗначенияВТекЭлементе.Точность;
				Если СтрДлина(ЦелЧастьСтрока) > ДлинаЦелойЧасти Тогда
					ЦелЧастьСтрока = Прав(ЦелЧастьСтрока, ДлинаЦелойЧасти);
				КонецЕсли;
			Иначе
				Если ТекЭлементФормыИмя = "ПутевойЛист_Задание_КоличествоЧасов" Тогда
					ДробЧастьСтрока = ДробЧастьСтрока + Кнопка;
				Иначе
					Если ТекущийДробныйРазряд < ТипЗначенияВТекЭлементе.Точность Тогда
						ДробЧастьСтрока = Лев(ДробЧастьСтрока, ТекущийДробныйРазряд-1) + Кнопка + Сред(ДробЧастьСтрока, ТекущийДробныйРазряд+1);
					ИначеЕсли ТекущийДробныйРазряд = ТипЗначенияВТекЭлементе.Точность Тогда
						ДробЧастьСтрока = Лев(ДробЧастьСтрока, ТекущийДробныйРазряд-1) + Кнопка;
					Иначе
						ДробЧастьСтрока = ДробЧастьСтрока + Кнопка;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрДлина(ДробЧастьСтрока) > ТипЗначенияВТекЭлементе.Точность Тогда
					ДробЧастьСтрока = Прав(ДробЧастьСтрока, ТипЗначенияВТекЭлементе.Точность);
				КонецЕсли;
				Если ТекЭлементФормыИмя = "ПутевойЛист_Задание_КоличествоЧасов" И Число(ДробЧастьСтрока) > 59 Тогда
					ДробЧастьСтрока = Формат(Число(Прав(ДробЧастьСтрока, 1)), "ЧЦ=" + ТипЗначенияВТекЭлементе.Точность + "; ЧВН=");
				КонецЕсли;
				
				ТекущийДробныйРазряд = ТекущийДробныйРазряд + 1;
			КонецЕсли;
			
			ЗначениеСтрока = ?(ЦелЧастьСтрока = "", "0", ЦелЧастьСтрока);
			Если НЕ ПустаяСтрока(ДробЧастьСтрока) Тогда
				Если СтрДлина(ДробЧастьСтрока) < ТипЗначенияВТекЭлементе.Точность Тогда
					ДробЧастьСтрока = Формат(Число(ДробЧастьСтрока), "ЧЦ=" + ТипЗначенияВТекЭлементе.Точность + "; ЧВН=");
				КонецЕсли;
				ЗначениеСтрока = ЗначениеСтрока + "." + ДробЧастьСтрока;
			КонецЕсли;
			
			ЭтотОбъект[ПутьКДанным] = Число(ЗначениеСтрока);
				
		ИначеЕсли ТипЗначенияВТекЭлементе.Представление = "Время" Тогда
			Если РежимВводаДробныхЗначений = 0 Тогда //часы
				ТекДатаВремя = ЭтотОбъект[ПутьКДанным];
				ЗначениеСтрока = Строка(Час(ЭтотОбъект[ПутьКДанным])) + Кнопка;
				Если СтрДлина(ЗначениеСтрока) > 2 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 2);
				КонецЕсли;
				НовоеЗначение = Число(ЗначениеСтрока);
				Если НовоеЗначение > 23 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 1);
					НовоеЗначение = Число(ЗначениеСтрока);
				КонецЕсли;
				
				ЭтотОбъект[ПутьКДанным] = Дата(Год(ТекДатаВремя), Месяц(ТекДатаВремя), День(ТекДатаВремя),
					НовоеЗначение, Минута(ТекДатаВремя), Секунда(ТекДатаВремя));
				
			Иначе //минуты
				ТекДатаВремя = ЭтотОбъект[ПутьКДанным];
				ЗначениеСтрока = Строка(Минута(ЭтотОбъект[ПутьКДанным])) + Кнопка;
				Если СтрДлина(ЗначениеСтрока) > 2 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 2);
				КонецЕсли;
				
				НовоеЗначение = Число(ЗначениеСтрока);
				Если НовоеЗначение > 59 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 1);
					НовоеЗначение = Число(ЗначениеСтрока);
				КонецЕсли;
				
				ЭтотОбъект[ПутьКДанным] = Дата(Год(ТекДатаВремя), Месяц(ТекДатаВремя), День(ТекДатаВремя),
					Час(ТекДатаВремя), НовоеЗначение, Секунда(ТекДатаВремя));
					
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияВТекЭлементе.Представление = "Дата" Тогда
			Если РежимВводаДробныхЗначений = 0 Тогда //дни
				ТекДатаВремя = ЭтотОбъект[ПутьКДанным];
				ЗначениеСтрока = Строка(День(ЭтотОбъект[ПутьКДанным])) + Кнопка;
				Если СтрДлина(ЗначениеСтрока) > 2 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 2);
				КонецЕсли;
				
				НовоеЗначение = Число(ЗначениеСтрока);
				
				КоличДнейМесяца = КоличествоДнейМесяца(Месяц(ТекДатаВремя), Год(ТекДатаВремя));
					 
				Если НовоеЗначение > КоличДнейМесяца Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 1);
					НовоеЗначение = Число(ЗначениеСтрока);
				КонецЕсли;
				
				Если НовоеЗначение = 0 Тогда
					НовоеЗначение = 1;
				КонецЕсли;
				
				ЭтотОбъект[ПутьКДанным] = Дата(Год(ТекДатаВремя), Месяц(ТекДатаВремя), НовоеЗначение,
					Час(ТекДатаВремя), Минута(ТекДатаВремя), Секунда(ТекДатаВремя));
				
			ИначеЕсли РежимВводаДробныхЗначений = 1 Тогда //месяцы
				ТекДатаВремя = ЭтотОбъект[ПутьКДанным];
				ЗначениеСтрока = Строка(Месяц(ЭтотОбъект[ПутьКДанным])) + Кнопка;
				Если СтрДлина(ЗначениеСтрока) > 2 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 2);
				КонецЕсли;
				
				НовоеЗначение = Число(ЗначениеСтрока);
				Если НовоеЗначение > 12 Тогда
					ЗначениеСтрока = Прав(ЗначениеСтрока, 1);
					НовоеЗначение = Число(ЗначениеСтрока);
				КонецЕсли;
				
				КоличДнейМесяца = КоличествоДнейМесяца(НовоеЗначение, Год(ТекДатаВремя));
				
				Если День(ТекДатаВремя) > КоличДнейМесяца Тогда
					НовоеЗначениеДень = КоличДнейМесяца;
				Иначе
					НовоеЗначениеДень = День(ТекДатаВремя);
				КонецЕсли;
				
				Если НовоеЗначение = 0 Тогда
					НовоеЗначение = 1;
				КонецЕсли;
				
				ЭтотОбъект[ПутьКДанным] = Дата(Год(ТекДатаВремя), НовоеЗначение, НовоеЗначениеДень,
					Час(ТекДатаВремя), Минута(ТекДатаВремя), Секунда(ТекДатаВремя));
				
			Иначе //годы
				ТекДатаВремя = ЭтотОбъект[ПутьКДанным];
				
				ТекГод = Год(ЭтотОбъект[ПутьКДанным]);
				ТекГодСтрока = Формат(ТекГод, "ЧГ=");
				
				СтрокаСтолетие = Лев(Формат(Год(ТекущаяДата()), "ЧГ="), 2);
				Если Лев(ТекГодСтрока, 2) <> СтрокаСтолетие Тогда
					ТекГодСтрока = СтрокаСтолетие + "00";
				КонецЕсли;
				
				ЗначениеСтрока = Лев(ТекГодСтрока, 2) + Прав(Прав(ТекГодСтрока, 2) + Кнопка, 2);
				НовоеЗначение = Число(ЗначениеСтрока);
				
				КоличДнейМесяца = КоличествоДнейМесяца(Месяц(ТекДатаВремя), НовоеЗначение);
				
				Если День(ТекДатаВремя) > КоличДнейМесяца Тогда
					НовоеЗначениеДень = КоличДнейМесяца;
				Иначе
					НовоеЗначениеДень = День(ТекДатаВремя);
				КонецЕсли;
				
				ЭтотОбъект[ПутьКДанным] = Дата(НовоеЗначение, Месяц(ТекДатаВремя), НовоеЗначениеДень,
					Час(ТекДатаВремя), Минута(ТекДатаВремя), Секунда(ТекДатаВремя));
					
			КонецЕсли;
			
		Иначе
			Если ТекЭлементФормыИмя = "ПарольКлавиатура" Тогда
				Авторизация_Пароль = Авторизация_Пароль + Кнопка;
				СимволыПароль = "";
				Для Сч = 1 По СтрДлина(Авторизация_Пароль) Цикл
					СимволыПароль = СимволыПароль + "*";
				КонецЦикла;
				Авторизация_ПарольКлавиатура = СимволыПароль;
			Иначе
				Попытка
					Элементы[ПутьКДанным].ИзменитьСтроку();
				Исключение
				КонецПопытки;
				Попытка
					ЭтотОбъект[ПутьКДанным] = ЭтотОбъект[ПутьКДанным] + Кнопка;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// позиционируемся на исходное поле ввода
	ТекущийЭлемент = Элементы[ТекЭлементФормыИмя];
	
	// обработка изменения значения
	Попытка
		Выполнить(ТекЭлементФормыИмя + "ПриИзменении(Неопределено)");
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция КоличествоДнейМесяца(ТекМесяц, ТекГод)
	Если ТекМесяц = 1 ИЛИ ТекМесяц = 3 ИЛИ ТекМесяц = 5 ИЛИ ТекМесяц = 7
		ИЛИ ТекМесяц = 8 ИЛИ ТекМесяц = 10  ИЛИ ТекМесяц = 12 Тогда
		
		КоличДнейМесяца = 31;
	Иначе
		Если ТекМесяц = 2 Тогда
			Если ТекГод%4=0 Тогда
				КоличДнейМесяца = 29;
			Иначе
				КоличДнейМесяца = 28;
			КонецЕсли;
		Иначе
			КоличДнейМесяца = 30;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличДнейМесяца;
КонецФункции

&НаКлиенте
Процедура УдалитьЗаданиеПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПутевойЛист_Задание.Удалить(ПутевойЛист_Задание_НомерСтроки - 1);
	ОтобразитьСтрокуЗадания(ПутевойЛист_Задание.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУсловиеРаботы(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Задание_УсловиеРаботы = Результат;
		ПутевойЛист_Задание_УсловиеРаботыПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОбъектСтроительства(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Задание_ОбъектСтроительства = Результат;
		ПутевойЛист_Задание_ОбъектСтроительстваПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКонтрагент(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Задание_Контрагент = Результат;
		ПутевойЛист_Задание_КонтрагентПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПростой(НомерПростоя)
	ДопПараметры = Новый Структура("НомерПростоя", НомерПростоя);
	ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораПростоя", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора", "ВидПростоя"),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПростоя(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + ДопПараметры.НомерПростоя] = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛист_Простои_ДатаПриИзменении(НомерПростоя)
	ЭтотОбъект["ПутевойЛист_Простои_Конец" + НомерПростоя] = НачалоДня(ЭтотОбъект["ПутевойЛист_Простои_Начало" + НомерПростоя])
		+ (ЭтотОбъект["ПутевойЛист_Простои_Конец" + НомерПростоя] - НачалоДня(ЭтотОбъект["ПутевойЛист_Простои_Конец" + НомерПростоя]));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростой(НомерПростоя)
	ТекстНСТР = НСтр("en='Delete downtime %1 ?';ru='Удалить простой %1 ?'");
	ТекстНСТР = СтрШаблон(ТекстНСТР, НомерПростоя);
	ДиалогОКОтмена(ТекстНСТР,
		Новый ОписаниеОповещения("УдалитьПростойПродолжение", ЭтотОбъект, Новый Структура("НомерПростоя",НомерПростоя)));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПростойПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	НомерПростоя = ДопПараметры.НомерПростоя;
	
	// сначала считаем количество простоев до удаления
	КоличПростоев = 6;
	Для Сч = 1 По 6 Цикл
		Если НЕ Элементы["Простой" + Сч].Видимость Тогда
			КоличПростоев = Сч-1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// скрываем неиспользуемые простои (их будет КоличПростоев-1)
	Для Сч = 1 По 6 Цикл
		ВидомостьПростоя = (Сч < КоличПростоев);
		Если Элементы["Простой" + Сч].Видимость <> ВидомостьПростоя Тогда
			Элементы["Простой" + Сч].Видимость = ВидомостьПростоя;
		КонецЕсли;
	КонецЦикла;
	
	// сдвигаем значение на один, закрывая дырку, если мы удалили не последний простой
	Для Сч = НомерПростоя По КоличПростоев Цикл
		Если Сч < 6 Тогда
			ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + Сч] = ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Простои_Начало" + Сч] = ЭтотОбъект["ПутевойЛист_Простои_Начало" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч] = ЭтотОбъект["ПутевойЛист_Простои_Конец" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + Сч] = ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + (Сч+1)];
			ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + (Сч+1)] = Неопределено;
			ЭтотОбъект["ПутевойЛист_Простои_Начало" + (Сч+1)] = '00010101';
			ЭтотОбъект["ПутевойЛист_Простои_Конец" + (Сч+1)] = '00010101';
			ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + (Сч+1)] = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличПростоев = 1 Тогда
		Элементы.ГруппаПростоиЗаголовок.Видимость = Ложь;
	КонецЕсли;
	
	ПроверитьЗаполнениеПростоев();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеЗаправкиПЛ()

	Если ПутевойЛист_Заправки.Количество() = 0 Тогда
		// если ни одной заправки нет считаем, что заполнено корректно
		Возврат Истина;
	КонецЕсли;

	мсвОбязРеквизиты = Новый Массив;
	мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ВидЗаправки");
	мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_АЗС");
	мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ТС");
	мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ГСМ");
	мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_Количество");
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ПластиковаяКарта");
	ИначеЕсли ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_Талоны");
	КонецЕсли;
	
	Проверка = Истина;
	Для Каждого ТекОбязРекв Из мсвОбязРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ТекОбязРекв]) И НЕ Элементы["Декорация" + ТекОбязРекв].Видимость Тогда
			Элементы["Декорация" + ТекОбязРекв].Видимость = Истина;
		ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект[ТекОбязРекв]) И Элементы["Декорация" + ТекОбязРекв].Видимость Тогда
			Элементы["Декорация" + ТекОбязРекв].Видимость = Ложь;
		КонецЕСли;
		Если Элементы["Декорация" + ТекОбязРекв].Видимость Тогда
			Проверка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Проверка И ПутевойЛист_Заправки.Количество() > 2 Тогда
		Для Каждого ТекСтрока Из ПутевойЛист_Заправки Цикл
			Если ПутевойЛист_Заправки_НомерСтроки = ТекСтрока.НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
			мсвОбязРеквизиты = Новый Массив;
			мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ВидЗаправки");
			мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_АЗС");
			мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ТС");
			мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ГСМ");
			мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_Количество");
			Если ТекСтрока.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
				ИЛИ ТекСтрока.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
				мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_ПластиковаяКарта");
			ИначеЕсли ТекСтрока.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
				мсвОбязРеквизиты.Добавить("ПутевойЛист_Заправки_Талоны");
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекОбязРекв Из мсвОбязРеквизиты Цикл
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ТекОбязРекв]) Тогда
				Проверка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.ГруппаКнопкаВперед.Доступность = Проверка;
	
	Возврат Проверка;
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаЗаправки()
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Элементы.ГруппаПластиковаяКарта.Видимость = Истина;
		ПутевойЛист_Заправки_ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ПутевойЛист_ТС, "Модель"), "ОсновноеТопливо");
		ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ГСМ = ПутевойЛист_Заправки_ГСМ;;
		ПутевойЛист_Заправки_ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ПутевойЛист_ТС, Водитель,,ПутевойЛист_ДатаВыезда);
		ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ПластиковаяКарта = ПутевойЛист_Заправки_ПластиковаяКарта;
	Иначе
		Элементы.ГруппаПластиковаяКарта.Видимость = Ложь;
		ПутевойЛист_Заправки_ПластиковаяКарта = Неопределено;
		ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].ПластиковаяКарта = ПутевойЛист_Заправки_ПластиковаяКарта;
	КонецЕсли;
	
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		Элементы.ГруппаЗаправкиТалоны.Видимость = Истина;
	Иначе
		Элементы.ГруппаЗаправкиТалоны.Видимость = Ложь;
		ПутевойЛист_Заправки_Талоны = "";
		ПутевойЛист_Заправки[ПутевойЛист_Заправки_НомерСтроки-1].Талоны = ПутевойЛист_Заправки_Талоны;
	КонецЕсли;
	
	Если ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		Элементы.ГруппаЗаправкиСумма.Видимость = Ложь;
		ПутевойЛист_Заправки_Сумма = 0;
		ПутевойЛист_Заправки_СуммаПриИзменении(Неопределено);
	Иначе
		Элементы.ГруппаЗаправкиСумма.Видимость = Истина;
	КонецЕсли;
	
	мГруппаГСМ = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ПутевойЛист_Заправки_ГСМ, "ГруппаГСМ");
	Если (ПутевойЛист_Заправки_ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И 
		мГруппаГСМ <> ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон")) ИЛИ
		(ПутевойЛист_Заправки_ВидЗаправки <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И 
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон")) Тогда
		ПутевойЛист_Заправки_ГСМ = Неопределено;
	КонецЕсли;
	
	УстановитьОтборАЗС();
	ПроверитьЗаполнениеЗаправкиПЛ();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаправкуПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда
		Если НЕ ПутевойЛист_Заправки_Ссылка.Пустая() Тогда
			// Добавляем в кэш удаленных строк заправок, чтобы после закрытия ПЛ пометить на удаление сами документы заправок
			СтрокаЗаправкиДляУдаления = ПутевойЛист_УдаленныеЗаправки.Добавить();
			СтрокаЗаправкиДляУдаления.Ссылка = ПутевойЛист_Заправки_Ссылка;
			СтрокаЗаправкиДляУдаления.НомерСтроки = ПутевойЛист_Заправки_НомерСтроки;
		КонецЕсли;
		
		ПутевойЛист_Заправки.Удалить(ПутевойЛист_Заправки_НомерСтроки - 1);
		ОтобразитьСтрокуЗаправок(ПутевойЛист_Заправки.Количество());
		
		Элементы.ДекорацияПутевойЛист_Заправки_АЗС.Видимость				 = Ложь;
		Элементы.ДекорацияПутевойЛист_Заправки_ВидЗаправки.Видимость		 = Ложь;
		Элементы.ДекорацияПутевойЛист_Заправки_ГСМ.Видимость 				 = Ложь;
		Элементы.ДекорацияПутевойЛист_Заправки_Количество.Видимость			 = Ложь;
		Элементы.ДекорацияПутевойЛист_Заправки_ПластиковаяКарта.Видимость	 = Ложь;
		Элементы.ДекорацияПутевойЛист_Заправки_ТС.Видимость					 = Ложь;
		Элементы.ДекорацияПутевойЛист_Заправки_Талоны.Видимость				 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАЗС(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Заправки_АЗС = Результат;
		ПутевойЛист_Заправки_АЗСПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВидЗаправки(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Заправки_ВидЗаправки = Результат;
		ПутевойЛист_Заправки_ВидЗаправкиПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТС(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Заправки_ТС = Результат;
		ПутевойЛист_Заправки_ТСПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Заправки_ГСМ = Результат;
		ПутевойЛист_Заправки_ГСМПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокГСМдляТС(Организация, ТС, ГруппаГСМ)
	БезАналогов = Ложь;
	УчитыватьТЖ = Истина;
	
	списокГСМ = Новый СписокЗначений;
	
	мсвСтруктур = уатЗащищенныеФункцииСервер.СписокГСМдляТССервер(Организация, ТС, ГруппаГСМ, БезАналогов);
	Для Каждого ТекЭл Из мсвСтруктур Цикл
		списокГСМ.Добавить(ТекЭл.ГСМ);
	КонецЦикла;
			
	Если УчитыватьТЖ Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатНоменклатураГСМ.Номенклатура
		|ИЗ
		|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|ГДЕ
		|	уатНоменклатураГСМ.ВестиУчетОстатковТЖ");
		тблТЖ = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекСтрока Из тблТЖ Цикл
			списокГСМ.Добавить(ТекСтрока.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат списокГСМ;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПластиковойКарты(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПутевойЛист_Заправки_ПластиковаяКарта = Результат;
		ПутевойЛист_Заправки_ПластикКартаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПластикКарт(ВладельцыКарт, ПутевойЛист_ДатаВыезда)
	Возврат уатОбщегоНазначения.уатСписокТопливныхКарт(ВладельцыКарт, ПутевойЛист_ДатаВыезда);
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюГотово()
	Если ЗначениеЗаполнено(ПутевойЛист_Ссылка) И ЗначениеЗаполнено(ПутевойЛист_НомерТС) Тогда
		ЗаголовокЗавершено = НСтр("en='Vehicle:';ru='Проверьте данные перед закрытием ПЛ №'") + ПутевойЛист_Номер;
		Если ЗначениеЗаполнено(ПутевойЛист_НомерТС) Тогда
			ЗаголовокЗавершено = ЗаголовокЗавершено + " (" + СокрЛП(уатОбщегоНазначения.уатПредставлениеМоделиТС(ПутевойЛист_ТС)) + ")";
		КонецЕсли;
	Иначе
		ЗаголовокЗавершено = "";
	КонецЕсли;
	
	стрПрицепы = "";
	Для Сч = 1 По 4 Цикл
		Если Элементы["Прицеп" + Сч].Видимость Тогда
			стрПрицепы = стрПрицепы + ", " + Строка(ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч]);
		КонецЕсли;
	КонецЦикла;
	Если стрПрицепы = "" Тогда
		Готово_Прицепы = НСтр("en='<no>';ru='<нет>'");
	Иначе
		Готово_Прицепы = Сред(стрПрицепы, 3);
	КонецЕсли;
	
	ВсегоПростоевСек = 0; 
	Для Сч = 1 По 6 Цикл
		Если Элементы["Простой" + Сч].Видимость Тогда
			НачалоПростояДатаВремя = ЭтотОбъект["ПутевойЛист_Простои_Начало" + Сч];
			КонецПростояДатаВремя = НачалоДня(НачалоПростояДатаВремя) + (ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч] - НачалоДня(ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч]));
			Если КонецПростояДатаВремя = '00010101' Тогда
				ПродолжитПростояСек = НачалоДня(НачалоПростояДатаВремя + 24*3600) - НачалоПростояДатаВремя;
			Иначе
				ПродолжитПростояСек = КонецПростояДатаВремя - НачалоПростояДатаВремя;
			КонецЕсли;
			
			ВсегоПростоевСек = ВсегоПростоевСек + ПродолжитПростояСек;
		КонецЕсли;
	КонецЦикла;
	Если ВсегоПростоевСек = 0 Тогда
		Готово_Простои = НСтр("en='<no>';ru='<нет>'");
	Иначе
		Готово_Простои = "" + Формат(Цел(ВсегоПростоевСек/3600), "ЧН=0") + ":" + Формат(Цел((ВсегоПростоевСек - Цел(ВсегоПростоевСек/3600) * 3600) / 60), "ЧЦ=2; ЧН=00; ЧВН=");
	КонецЕсли;
	
	Готово_Заправки = "";
	Готово_Талоны = 0;
	Для Каждого ТекЗаправка Из ПутевойЛист_Заправки Цикл
		Если ТекЗаправка.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
			Готово_Талоны = Готово_Талоны + ТекЗаправка.Количество;
		Иначе
			Готово_Заправки = Готово_Заправки + ТекЗаправка.Количество;
		КонецЕсли;
	КонецЦикла;
	Если Готово_Талоны > 0 Тогда
		Готово_Заправки = "" + Готово_Заправки + ", талонов: " + Готово_Талоны;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Готово_Заправки) Тогда
		Готово_Заправки = НСтр("en='<no>';ru='<нет>'");
	КонецЕсли;
	
	Готово_Сливы = "";
	Готово_Сливы = КоличествоСливовПЛ(ПутевойЛист_Ссылка);
	Если НЕ ЗначениеЗаполнено(Готово_Сливы) Тогда
		Готово_Сливы = НСтр("en='<no>';ru='<нет>'");
	КонецЕсли;
	
	ТекРежимРасчетаТопливаПЛ = ТекущийРежимРасчетаТоплива(ПутевойЛист_Ссылка);
	СтруктураПоказателиПоДокументу = ПоказателиПоДокументу();
	
	Если ТекРежимРасчетаТопливаПЛ <> ПредопределенноеЗначение("Перечисление.уатВидыРасчетаРасходаГСМ.ПоНорме") Тогда
		РасходФакт = СтруктураПоказателиПоДокументу.РасходФакт + Готово_Заправки - Готово_Сливы;
	Иначе 
		// расшифровка расхода ГСМ
		РасходФакт = РасчитатьРасходГСМПоНормам();
	КонецЕсли;
	
	Готово_РасходФакт = РасходФакт;
	Готово_ОбщийПробег = СтруктураПоказателиПоДокументу.ПробегОбщий;
	Готово_ПробегСГрузом = СтруктураПоказателиПоДокументу.ПробегСГрузом;
	Готово_ПробегПоСпидометру = СтруктураПоказателиПоДокументу.ПробегПоСпидометру;
	Готово_ПробегПорожний = СтруктураПоказателиПоДокументу.ПробегПорожний;
	
	// надпись на кнопке Печать
	Элементы.ПечатьПЛ.Заголовок = НСтр("en='Print';ru='Печать'") + " " + ПолучитьКраткоеИмяПФ(ПутевойЛист_Ссылка);
	
КонецПроцедуры

&НаСервере
Функция РасчитатьРасходГСМПоНормам()
	
	ДокОбъект = ПутевойЛист_Ссылка.ПолучитьОбъект();
	
	Если ВодительНеСогласенСПробегомGPS Тогда
		ДокОбъект.СпидометрВозвращения = ПутевойЛист_СпидометрВозвращенияВодитель;
		ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива(ДокОбъект);
	Иначе
		Если ДокОбъект.СпидометрВозвращения <> ПутевойЛист_СпидометрВозвращения Тогда
			ДокОбъект.СпидометрВозвращения = ПутевойЛист_СпидометрВозвращения;
			Если ПутевойЛист_СпидометрВыезда = ПутевойЛист_СпидометрВозвращения Или ПутевойЛист_СпидометрВозвращения = 0 Тогда
				РасчитатьОдометрПоВыполненнымСтрокамЗадания(ДокОбъект);
			Иначе 
				ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива(ДокОбъект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	ОсновноеТопливо = "";
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.ТранспортноеСредство) Тогда
		ТекстНСТР = НСтр("en='Vehicle not specified';ru='Не указано ТС'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОсновноеТопливо) И ЗначениеЗаполнено(ДокОбъект.ТранспортноеСредство) Тогда
		ОсновноеТопливо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокОбъект.ТранспортноеСредство, "Модель"), "ОсновноеТопливо");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеТопливо) Тогда
		ТекстНСТР = НСтр("en='Main fuel of vehicle isn`t fill'; ru='Не указано основное топливо ТС'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(ДокОбъект);
	Отказ = Ложь;
	
	РасходФакт = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ДокОбъект.ТранспортноеСредство, ОсновноеТопливо, Отказ);
	
	Возврат РасходФакт;
		
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоСливовПЛ(ПЛ_Ссылка)
	
	Готово_Сливы = 0;
	ПутевойЛист_Сливы = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(ПЛ_Ссылка);
	Для Каждого ТекСлив Из ПутевойЛист_Сливы Цикл
		Готово_Сливы = Готово_Сливы + ТекСлив.Количество;	
	КонецЦикла;
	
	Возврат Готово_Сливы;
		
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийРежимРасчетаТоплива(ДокументПЛ)
	
	Возврат ДокументПЛ.РасчетФактРасходаГСМ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКраткоеИмяПФ(ПутевойЛист_Ссылка)
	Если ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._3 Тогда
		Рез = " (Форма 3)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._3спец Тогда
		Рез = " (Форма 3 спец)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._412_АПК Тогда
		Рез = " (Форма 412-АПК)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._4М Тогда
		Рез = " (Форма 4-М)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._4П Тогда
		Рез = " (Форма 4-П)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._4С Тогда
		Рез = " (Форма 4-С)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._6 Тогда
		Рез = " (Форма 6)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
		Рез = " (Форма 6 спец)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._ПА1 Тогда
		Рез = " (Форма ПА-1)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._ПГ1 Тогда
		Рез = " (Форма ПГ-1)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._ПЛ1 Тогда
		Рез = " (Форма ПЛ-1)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._ЭСМ1 Тогда
		Рез = " (Форма ЭСМ-1)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._ЭСМ2 Тогда
		Рез = " (Форма ЭСМ-2)";
	ИначеЕсли ПутевойЛист_Ссылка.ВидПЛ = Перечисления.уатВидыПЛ._ЭСМ3 Тогда
		Рез = " (Форма ЭСМ-3)";
	Иначе
		Рез = "";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
// Возвращает строку описания невыполненных рем. листов
// Если все выполнены или нет ремонтов вовсе, то возвращается пустая строка
//
Функция Занятость_Ремонты(ТС, ТекДата)
	Рез = "";
	
	// не выполнен последний ремонтный лист
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатРемонтныйЛист.Номер,
	|	уатРемонтныйЛист.Дата
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Проведен
	|	И (НЕ уатРемонтныйЛист.ПометкаУдаления)
	|	И (НЕ уатРемонтныйЛист.Выполнен)
	|	И уатРемонтныйЛист.ТС = &ТС
	|	И уатРемонтныйЛист.ДатаНачала < &ТекДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &ТекДата
	|		ИНАЧЕ уатРемонтныйЛист.ДатаОкончания
	|	КОНЕЦ УБЫВ,
	|	уатРемонтныйЛист.ДатаНачала УБЫВ";
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Рез = НСтр("en='Repair list not closed';ru='Не закрыт ремонтный лист'") + " " + Строка(Результат.Номер) + " " + НСтр("en='from';ru='от'") + " " + Формат(Результат.Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ПоказателиПоДокументу()
	Рез = Новый Структура("РасходФакт, РасходНорма, ПробегПоСпидометру, ПробегОбщий, ПробегСГрузом, ПробегПорожний", 0, 0, 0, 0, 0, 0);
	Если ?(ПутевойЛист_СпидометрВозвращенияВодитель, ПутевойЛист_СпидометрВозвращенияВодитель, ПутевойЛист_СпидометрВозвращения) = 0 Тогда
		Рез.ПробегПоСпидометру = Нстр("ru = 'Не заполнен'");
	Иначе
		Рез.ПробегПоСпидометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ПутевойЛист_СпидометрВыезда, ?(ПутевойЛист_СпидометрВозвращенияВодитель, ПутевойЛист_СпидометрВозвращенияВодитель, ПутевойЛист_СпидометрВозвращения));
	КонецЕсли;
	Рез.РасходФакт = ПутевойЛист_ОстатокТопливаВыезд - ?(ПутевойЛист_ОстатокТопливаВозвратВодитель, ПутевойЛист_ОстатокТопливаВозвратВодитель, ПутевойЛист_ОстатокТопливаВозврат);
	
	Для Каждого ТекСтрока Из ПутевойЛист_Задание Цикл
		Если ТекСтрока.Выполнено Тогда
			Рез.ПробегСГрузом = Рез.ПробегСГрузом + ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
			Рез.ПробегПорожний = Рез.ПробегПорожний + ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок;
		КонецЕсли;
	КонецЦикла;
	Рез.ПробегОбщий = Рез.ПробегСГрузом + Рез.ПробегПорожний;
	
	// Todo okoe: реализовать заполнение документа-объекта ПЛ, его расчет и вычисление факта и нормы расхода ГСМ
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ЗакрытьПЛПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда
		Если ЗаписатьПЛсервер() Тогда
			ПерейтиНаСтраницуВыборРежима();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПЛсервер()
	флМодифицирован = Ложь;
	
	ДокПЛ = ПутевойЛист_Ссылка.ПолучитьОбъект();
	
	ПутевойЛистДатаВремяВыезда = НачалоДня(ПутевойЛист_ДатаВыезда) + (ПутевойЛист_ВремяВыезда - НачалоДня(ПутевойЛист_ВремяВыезда));
	ПутевойЛистДатаВремяВозращения = НачалоДня(ПутевойЛист_ДатаВозвращения) + (ПутевойЛист_ВремяВозвращения - НачалоДня(ПутевойЛист_ВремяВозвращения));
		
	Если ДокПЛ.ДатаВыезда <> ПутевойЛистДатаВремяВыезда Тогда
		ДокПЛ.ДатаВыезда = ПутевойЛистДатаВремяВыезда;
		флМодифицирован = Истина;
	КонецЕсли;
	
	Если ДокПЛ.ДатаВозвращения <> ПутевойЛистДатаВремяВозращения Тогда
		ДокПЛ.ДатаВозвращения = ПутевойЛистДатаВремяВозращения;
		флМодифицирован = Истина;
	КонецЕсли;
	
	Если ДокПЛ.СпидометрВыезда <> ПутевойЛист_СпидометрВыезда Тогда
		ДокПЛ.СпидометрВыезда = ПутевойЛист_СпидометрВыезда;
		флМодифицирован = Истина;
	КонецЕсли;
	
	Если ВодительНеСогласенСПробегомGPS Тогда
		ДокПЛ.СпидометрВозвращения = ПутевойЛист_СпидометрВозвращенияВодитель;
		флМодифицирован = Истина;
	Иначе
		Если ДокПЛ.СпидометрВозвращения <> ПутевойЛист_СпидометрВозвращения Тогда
			ДокПЛ.СпидометрВозвращения = ПутевойЛист_СпидометрВозвращения;
			флМодифицирован = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокПЛ.ВыдатьКоличествоГорючего <> ПутевойЛист_ВыдатьКоличествоГорючего Тогда
		ДокПЛ.ВыдатьКоличествоГорючего = ПутевойЛист_ВыдатьКоличествоГорючего;
		флМодифицирован = Истина;
	КонецЕсли;
	
	Если ДокПЛ.ПробегПоGPS <> ПутевойЛист_ПробегПоGPS Тогда
		ДокПЛ.ПробегПоGPS = ПутевойЛист_ПробегПоGPS;
		флМодифицирован = Истина;
	КонецЕсли;
	
	ОснТопливо = ПолучитьЗначениеРеквизита(ПутевойЛист_МодельТС, "ОсновноеТопливо");
	Для Каждого ТекСтрокаРасходГСМ Из ДокПЛ.РасходГСМ Цикл
		Если ПутевойЛист_ТС = ТекСтрокаРасходГСМ.ТС И ОснТопливо = ТекСтрокаРасходГСМ.ГСМ Тогда
			Если ВодительНеСогласенСРасходомТопливаGPS Тогда
				ТекСтрокаРасходГСМ.ОстатокПриВыезде = ПутевойЛист_ОстатокТопливаВыезд;
				ТекСтрокаРасходГСМ.ОстатокПриВозвращении = ПутевойЛист_ОстатокТопливаВозвратВодитель;
				ТекСтрокаРасходГСМ.РасходПоФакту = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.ОстатокПриВозвращении
								+ ТекСтрокаРасходГСМ.Выдано - ТекСтрокаРасходГСМ.Сдано;
				флМодифицирован = Истина;
			Иначе
				Если ТекСтрокаРасходГСМ.ОстатокПриВозвращении <> ПутевойЛист_ОстатокТопливаВозврат Тогда
					ТекСтрокаРасходГСМ.ОстатокПриВыезде = ПутевойЛист_ОстатокТопливаВыезд;
					ТекСтрокаРасходГСМ.ОстатокПриВозвращении = ПутевойЛист_ОстатокТопливаВозврат;
					ТекСтрокаРасходГСМ.РасходПоФакту = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.ОстатокПриВозвращении
								+ ТекСтрокаРасходГСМ.Выдано - ТекСтрокаРасходГСМ.Сдано;
					флМодифицирован = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СравнитьТабличныеЧасти("Прицепы")
		ИЛИ ВодительНеСогласенСоСчПрицеп1 ИЛИ ВодительНеСогласенСоСчПрицеп2
		ИЛИ ВодительНеСогласенСоСчПрицеп3 ИЛИ ВодительНеСогласенСоСчПрицеп4 Тогда
		
		ДокПЛ.Прицепы.Очистить();
		Для Сч = 1 По 4 Цикл
			ТекПрицеп = ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч];
			Если НЕ ЗначениеЗаполнено(ТекПрицеп) Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = ДокПЛ.Прицепы.Добавить();
			НоваяСтрока.ТС = ТекПрицеп;
			НоваяСтрока.СчетчикМЧGPS = ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + Сч];
			НоваяСтрока.СчетчикМЧВыезда = ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + Сч];
			Если ЭтотОбъект["ВодительНеСогласенСоСчПрицеп" + Сч] Тогда
				НоваяСтрока.СчетчикМЧВозвращения = ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч + "НеСогласен"];
			Иначе
				НоваяСтрока.СчетчикМЧВозвращения = ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч];
			КонецЕсли;
		КонецЦикла;
		
		флМодифицирован = Истина;
	КонецЕсли;
	
	Если НЕ СравнитьТабличныеЧасти("Простои") Тогда
		ДокПЛ.Простои.Очистить();
		Для Сч = 1 По 6 Цикл
			ТекВидПростоя = ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + Сч];
			Если НЕ ЗначениеЗаполнено(ТекВидПростоя) Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = ДокПЛ.Простои.Добавить();
			НоваяСтрока.ВидПростоя = ТекВидПростоя;
			НоваяСтрока.ВключенДвигатель = ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + Сч];
			НоваяСтрока.НачалоПростоя = ЭтотОбъект["ПутевойЛист_Простои_Начало" + Сч];
			НоваяСтрока.КонецПростоя = ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч];
			Если НоваяСтрока.КонецПростоя = НачалоДня(НоваяСтрока.КонецПростоя) Тогда
				НоваяСтрока.ВремяПростоя = '00010101' + ((НоваяСтрока.КонецПростоя + 3600*24) - НоваяСтрока.НачалоПростоя);
			Иначе
				НоваяСтрока.ВремяПростоя = '00010101' + (НоваяСтрока.КонецПростоя - НоваяСтрока.НачалоПростоя);
			КонецЕсли;
			
		КонецЦикла;
		
		флМодифицирован = Истина;
	КонецЕсли;
	
	Если НЕ СравнитьТабличныеЧасти("Задание") Тогда
		// сначала изменяем данные в старых строках задания
		Для Каждого ТекСтрока Из ПутевойЛист_Задание Цикл
			Если ТекСтрока.НомерСтрокиСтарый = 0 Тогда //новая строка задания
				Продолжить;
			КонецЕсли;
			
			// Поиск делаем перебором потому, что стандартный поиск НайтиСтроки() не работает по номеру строки
			флСтрокаНайдена = Ложь;
			Для Каждого ТекСтрокаПоиск Из ДокПЛ.Задание Цикл
				Если ТекСтрокаПоиск.НомерСтроки = ТекСтрока.НомерСтрокиСтарый Тогда
					флСтрокаНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флСтрокаНайдена Тогда
				ТекСтрокаПоиск.Выполнено = ТекСтрока.Выполнено;
				ТекСтрокаПоиск.КоличествоЕздок = ТекСтрока.КоличествоЕздок;
				ТекСтрокаПоиск.КоличествоКмГруз = ТекСтрока.КоличествоКмГруз;
				ТекСтрокаПоиск.КоличествоКмПорожний = ТекСтрока.КоличествоКмПорожний;
				ТекСтрокаПоиск.КоличествоОпераций = ТекСтрока.КоличествоОпераций;
				ТекСтрокаПоиск.КоличествоТонн = ТекСтрока.КоличествоТонн;
				ТекСтрокаПоиск.Объем = ТекСтрока.Объем;
				ТекСтрокаПоиск.КоличествоЧасов = ТекСтрока.КоличествоЧасов;
				ТекСтрокаПоиск.УсловиеРаботы = ТекСтрока.УсловиеРаботы;
				ТекСтрокаПоиск.Контрагент          = ТекСтрока.Контрагент;
				ТекСтрокаПоиск.ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
			Иначе
				// во время закрытия ПЛ уже ктото (диспетчер) изменил Задание
				ТекСтрока.НомерСтрокиСтарый = 0;
			КонецЕсли;
		КонецЦикла;
		
		// теперь удаляем строки, удаленные из ПЛ в терминале
		мсвСтрокУдалить = Новый Массив;
		Для Каждого ТекСтрока Из ДокПЛ.Задание Цикл
			мсвПоиск = ПутевойЛист_Задание.НайтиСтроки(Новый Структура("НомерСтрокиСтарый", ТекСтрока.НомерСтроки));
			Если мсвПоиск.Количество() = 0 Тогда
				мсвСтрокУдалить.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
			ДокПЛ.Задание.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
		// добавляем новые строки
		Для Каждого ТекСтрока Из ПутевойЛист_Задание Цикл
			Если ТекСтрока.НомерСтрокиСтарый <> 0 Тогда //пропускаем старые строки задания
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокПЛ.Задание.Добавить();
			НоваяСтрока.Выполнено = ТекСтрока.Выполнено;
			НоваяСтрока.КоличествоЕздок = ТекСтрока.КоличествоЕздок;
			НоваяСтрока.КоличествоКмГруз = ТекСтрока.КоличествоКмГруз;
			НоваяСтрока.КоличествоКмПорожний = ТекСтрока.КоличествоКмПорожний;
			НоваяСтрока.КоличествоОпераций = ТекСтрока.КоличествоОпераций;
			НоваяСтрока.КоличествоТонн = ТекСтрока.КоличествоТонн;
			НоваяСтрока.Объем = ТекСтрока.Объем;
			НоваяСтрока.КоличествоЧасов = ТекСтрока.КоличествоЧасов;
			НоваяСтрока.УсловиеРаботы = ТекСтрока.УсловиеРаботы;
			НоваяСтрока.Контрагент = ТекСтрока.Контрагент;
			НоваяСтрока.ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
		КонецЦикла;
		
		флМодифицирован = Истина;
	КонецЕсли;
	
	// корректируем старые и добавляем новые заправки ГСМ
	Для Каждого ТекСтрокаЗаправки Из ПутевойЛист_Заправки Цикл
		Если ТекСтрокаЗаправки.Ссылка.Пустая() Тогда // новая заправка
			ДокЗаправка = Документы.уатЗаправкаГСМ.СоздатьДокумент();
			ДокЗаправка.Заполнить(ПутевойЛист_Ссылка);
			ДокЗаправка.ВидДвиженияГСМ = ТекСтрокаЗаправки.ВидЗаправки;
			НайденнаяСтрока = ДокЗаправка.Заправки[0];
			
		Иначе //изменение старой заправки
			ДокЗаправка = ТекСтрокаЗаправки.Ссылка.ПолучитьОбъект();
			ДокЗаправка.ВидДвиженияГСМ = ТекСтрокаЗаправки.ВидЗаправки;
			НайденнаяСтрока = ДокЗаправка.Заправки.Найти(ТекСтрокаЗаправки.НомерСтроки, "НомерСтроки");
			
		КонецЕсли;
		
		ДокЗаправка.АЗС = ТекСтрокаЗаправки.АЗС;
		
		НайденнаяСтрока.Дата 			= ПутевойЛистДатаВремяВыезда;
		НайденнаяСтрока.Водитель 		= ПутевойЛист_Ссылка.Водитель1;
		НайденнаяСтрока.ТС 				= ТекСтрокаЗаправки.ТС;
		НайденнаяСтрока.ГСМ 			= ТекСтрокаЗаправки.ГСМ;
		НайденнаяСтрока.Количество 		= ТекСтрокаЗаправки.Количество;
		НайденнаяСтрока.Сумма 			= ТекСтрокаЗаправки.Сумма;
		НайденнаяСтрока.Цена 			= ?(ТекСтрокаЗаправки.Количество = 0, 0, ТекСтрокаЗаправки.Сумма/ТекСтрокаЗаправки.Количество);
		НайденнаяСтрока.Валюта 			= Константы.ВалютаРегламентированногоУчета.Получить();
		НайденнаяСтрока.ПластиковаяКарта= ТекСтрокаЗаправки.ПластиковаяКарта;
		НайденнаяСтрока.НомераТалонов	= ТекСтрокаЗаправки.Талоны;
		Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.СтавкаНДС) Тогда
			НайденнаяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, ДокЗаправка);
		КонецЕсли;
		Если ЗначениеЗаполнено(НайденнаяСтрока.СтавкаНДС) Тогда
			уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, ДокЗаправка);
		КонецЕсли;
		
		Попытка
			ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстНСТР = НСтр("en='An error occurred while writing to the fueling! Contact administrator';ru='Возникла ошибка при записи заправки ГСМ! Обратитесь к администратору'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			
			ИмяСобытияВЖурналеРегистрации = НСтр("en='Waybills statement terminal. Error while waybill closing';ru='Терминал выписки ПЛ. Ошибка при закрытии ПЛ'");
			КомментарийВЖурналеРегистрации = НСтр("en='Driver';ru='Водитель'") + " " + Водитель + ": " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
									УровеньЖурналаРегистрации.Ошибка,
									Метаданные.Документы.уатЗаправкаГСМ,
									ДокЗаправка.Ссылка,
									КомментарийВЖурналеРегистрации);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	// помечаем на удаление заправки ГСМ, удаленные в АРМ
	Для Каждого ТекСтрокаУдалить Из ПутевойЛист_УдаленныеЗаправки Цикл
		ДокЗаправка = ТекСтрокаУдалить.Ссылка.ПолучитьОбъект();
		
		мСтроки = ДокЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, НомерСтроки", ПутевойЛист_Ссылка, ТекСтрокаУдалить.НомерСтроки));
		Если мСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для сч = 0 По мСтроки.Количество() - 1 Цикл
			ДокЗаправка.Заправки.Удалить(мСтроки[сч]);
		КонецЦикла;	
		
		// дЗаправкаГСМ.ПакетнаяОбработкаТиповыхДокументов = Ложь;
		Если ДокЗаправка.Заправки.Количество() = 0 Тогда
			Попытка
				ДокЗаправка.Записать();
				ДокЗаправка.УстановитьПометкуУдаления(Истина);
			Исключение
				ТекстНСТР = НСтр("en='An error occurred while writing to the fueling! Contact administrator';ru='Возникла ошибка при записи заправки ГСМ! Обратитесь к администратору'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);

				ИмяСобытияВЖурналеРегистрации = НСтр("en='Waybills statement terminal. Error while waybill closing';ru='Терминал выписки ПЛ. Ошибка при закрытии ПЛ'");
				КомментарийВЖурналеРегистрации = НСтр("en='Driver';ru='Водитель'") + " " + Водитель + ": " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
											УровеньЖурналаРегистрации.Ошибка,
											Метаданные.Документы.уатЗаправкаГСМ,
											ДокЗаправка.Ссылка,
											КомментарийВЖурналеРегистрации);
				Возврат Ложь;
			КонецПопытки;
		Иначе
			мРежимЗаписи = ?(ДокЗаправка.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			Попытка
				ДокЗаправка.Записать();
			Исключение
				ТекстНСТР = НСтр("en='An error occurred while writing to the fueling! Contact administrator';ru='Возникла ошибка при записи заправки ГСМ! Обратитесь к администратору'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				
				ИмяСобытияВЖурналеРегистрации = НСтр("en='Waybills statement terminal. Error while waybill closing';ru='Терминал выписки ПЛ. Ошибка при закрытии ПЛ'");
				КомментарийВЖурналеРегистрации = НСтр("en='Driver';ru='Водитель'") + " " + Водитель + ": " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
										УровеньЖурналаРегистрации.Ошибка, 
										Метаданные.Документы.уатЗаправкаГСМ,
										ДокЗаправка.Ссылка,
										КомментарийВЖурналеРегистрации);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ПутевойЛист_УдаленныеЗаправки.Очистить();
	
	// Расчет итогов путевого листа в зависимости от значения настройки
	ПравоОрганизации   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокПЛ.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.АвтоматическийРасчетИтоговПриЗакрытииПЛЧерезТерминал);
	ПравоПодразделения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокПЛ.Подразделение,
		ПланыВидовХарактеристик.уатПраваИНастройки.АвтоматическийРасчетИтоговПриЗакрытииПЛЧерезТерминал);
		
	флРасчетИтогов = Ложь;
	Если ПравоОрганизации ИЛИ ПравоПодразделения Тогда
		флРасчетИтогов = АвтоматическийРасчетИтоговПриЗакрытииЧерезТерминал(ДокПЛ);
		Если НЕ флРасчетИтогов Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// установка статуса ПЛ - закрыт водителем
	ДокПЛ.ЗакрытВодителем = Истина;
	
	//Если флМодифицирован Тогда
	Попытка
		ДокПЛ.Записать(?(флРасчетИтогов, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		ТекстНСТР = НСтр("en='Error occurred when closing waybill! Contact to administrator';ru='Возникла ошибка при закрытии путевого листа! Обратитесь к администратору'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		
		ИмяСобытияВЖурналеРегистрации = НСтр("en='Waybills statement terminal. Error while waybill closing';ru='Терминал выписки ПЛ. Ошибка при закрытии ПЛ'");
		КомментарийВЖурналеРегистрации = НСтр("en='Driver';ru='Водитель'") + " " + Водитель + ": " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Документы.уатПутевойЛист,
		ДокПЛ.Ссылка,
		КомментарийВЖурналеРегистрации);
		Возврат Ложь;
	КонецПопытки;
	//КонецЕсли;
	
	ПутевойЛист_Подписан = Ложь;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура РасчитатьОдометрПоВыполненнымСтрокамЗадания(ДокПЛ)
	
	// Код выполняет расчет одометра ТС по выполненным строкам задания
	РежимыРасчетаПробегов = ПолучитьРежимыРасчетаПробеговПоЗаданию();
	
	мЗначениеСпидометра = 0;
	мЗначениеСчетчика   = 0;
	
	мЭтапыЗадания = Новый Массив;
	Для Каждого ТекСтрока Из ДокПЛ.Задание Цикл
		Если мЭтапыЗадания.Найти(ТекСтрока.НомерЕздки) = Неопределено Тогда
			мЭтапыЗадания.Добавить(ТекСтрока.НомерЕздки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекНомерЭтапа Из мЭтапыЗадания Цикл
		ТекПробегСГрузом  = 0;
		ТекПробегПорожний = 0;
		
		Для Каждого ТекСтрока Из ДокПЛ.Задание Цикл
			Если НЕ ТекСтрока.Выполнено ИЛИ ТекСтрока.НомерЕздки <> ТекНомерЭтапа Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ РежимыРасчетаПробегов.ПробегСГрузом_СуммированиеПоЭтапам И ТекСтрока.НомерЕздки <> 0 Тогда
				ТекПробегСГрузом = Макс(ТекПробегСГрузом, ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок);
			Иначе
				ТекПробегСГрузом = ТекПробегСГрузом + ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
			КонецЕсли;
			
			Если НЕ РежимыРасчетаПробегов.ПробегПорожний_СуммированиеПоЭтапам И ТекСтрока.НомерЕздки <> 0 Тогда
				ТекПробегПорожний = Макс(ТекПробегПорожний, ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок);
			Иначе
				ТекПробегПорожний = ТекПробегПорожний + ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок;
			КонецЕсли;
			
			мЗначениеСчетчика = мЗначениеСчетчика + Цел(ТекСтрока.КоличествоЧасов) + (ТекСтрока.КоличествоЧасов -
				Цел(ТекСтрока.КоличествоЧасов))*100/60;
				
			// добавляем спецработы
			ДобавитьПробегСпецработ(мЗначениеСпидометра, ТекСтрока);
		КонецЦикла;
		
		мЗначениеСпидометра = мЗначениеСпидометра + ТекПробегСГрузом + ТекПробегПорожний;
	КонецЦикла;
			
	Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ДокПЛ.ТранспортноеСредство, "Модель"), "НаличиеСпидометра") Тогда 
		ДокПЛ.СпидометрВозвращения = ДокПЛ.СпидометрВыезда + мЗначениеСпидометра;
		ДокПЛ.СпидометрВозвращения = ДокПЛ.СпидометрВозвращения + ДокПЛ.НулевойПробегВыезда + ДокПЛ.НулевойПробегВозвращения;
	Иначе 
		ДокПЛ.СпидометрВозвращения = ДокПЛ.СпидометрВыезда + мЗначениеСчетчика;
	КонецЕсли;
	
	ЗаполнятьПробегПрицепов = ПолучитьПраваИНастройкиПользователя(ДокПЛ.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов"));
		
	Для Каждого ТекПрицеп Из ДокПЛ.Прицепы Цикл
		МодельПрицепа = ПолучитьЗначениеРеквизита(ТекПрицеп.ТС, "Модель");
		МодельПрицепаРеквизиты = ПолучитьЗначенияРеквизитов(МодельПрицепа, "НаличиеСпидометра, ВидМоделиТС");
			
		Если МодельПрицепаРеквизиты.НаличиеСпидометра Тогда 
			Если МодельПрицепаРеквизиты.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп")
				ИЛИ ЗаполнятьПробегПрицепов Тогда
				
				ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВыезда + мЗначениеСпидометра
					+ ДокПЛ.НулевойПробегВыезда + ДокПЛ.НулевойПробегВозвращения;
			КонецЕсли;
		Иначе 
			ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВыезда + мЗначениеСчетчика;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива(ДокПЛ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива(ДокПЛ)
	МодельТС = ПолучитьЗначениеРеквизита(ДокПЛ.ТранспортноеСредство, "Модель");
	МодельТСРеквизиты = ПолучитьЗначенияРеквизитов(МодельТС, "ОсновноеТопливо, ДополнительноеТопливо");
	
	Для Каждого ТекСтрока Из ДокПЛ.РасходГСМ Цикл
		Если ТекСтрока.ТС <> ДокПЛ.ТранспортноеСредство Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ГСМ = МодельТСРеквизиты.ОсновноеТопливо Тогда
			ТекСтрока.Пробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ДокПЛ.СпидометрВыезда, ДокПЛ.СпидометрВозвращения);
			
		ИначеЕсли ТекСтрока.ГСМ = МодельТСРеквизиты.ДополнительноеТопливо Тогда
			ТекСтрока.Активен = ДокПЛ.РаботаНаДвухВидахТоплива;
			ТекСтрока.Пробег = 0;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
функция АвтоматическийРасчетИтоговПриЗакрытииЧерезТерминал(ДокПЛ, ТекстСообщОшибки = "")
	
	Если ВодительНеСогласенСПробегомGPS Тогда
		ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива(ДокПЛ);
	Иначе
		Если ПутевойЛист_СпидометрВыезда = ПутевойЛист_СпидометрВозвращения ИЛИ ПутевойЛист_СпидометрВозвращения = 0 Тогда
			РасчитатьОдометрПоВыполненнымСтрокамЗадания(ДокПЛ);
		Иначе 
			ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива(ДокПЛ);
		КонецЕсли;		
	КонецЕсли;
		
	// Расчет итогов
	//Попытка
		уатПутевыеЛисты.ПересчетВыданногоГСМ(ДокПЛ);
		Отказ_ = Ложь;
		Рез = ДокПЛ.РасчетИтогов(Отказ_, Ложь);
		
		Если ДокПЛ.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Или ДокПЛ.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
			ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ДокПЛ.ТранспортноеСредство, "Модель"), "ОсновноеТопливо");
			Для Каждого ТекСтрока Из ДокПЛ.РасходГСМ Цикл
				Если ТекСтрока.Активен Тогда
					Если ТекСтрока.ТС = ДокПЛ.ТранспортноеСредство И ТекСтрока.ГСМ = ОснТопливо Тогда
						ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Возврат Рез;
		
	//Исключение
	//	Сообщение = Новый СообщениеПользователю();
	//	ТекстСообщения = СтрШаблон("Ошибка при расчете итогов в документе " + ДокПЛ.Ссылка);
	//	Сообщение.Текст = ТекстСообщения;
	//	Сообщение.Сообщить();
	//	
	//	Возврат Ложь;
	//	
	//КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРежимыРасчетаПробеговПоЗаданию()
	
	ПробегСГрузом_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособРасчетаПоНомеруЭтапа = 0);
	ПробегПорожний_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ПробегПорожний.СпособРасчетаПоНомеруЭтапа = 0);
	
	Возврат Новый Структура("ПробегСГрузом_СуммированиеПоЭтапам, ПробегПорожний_СуммированиеПоЭтапам", 
		ПробегСГрузом_СуммированиеПоЭтапам, ПробегПорожний_СуммированиеПоЭтапам);
	
	КонецФункции // ПолучитьРежимыРасчетаПробеговПоЗаданию()
		
&НаСервере
Процедура ДобавитьПробегСпецработ(КоличествоВыработки, ТекСтрока)
	Для Сч = 1 По 5 Цикл
		ТекСпецРабота = ТекСтрока["СпецРабота" + Сч];
		Если ЗначениеЗаполнено(ТекСпецРабота)
			И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСпецРабота, "УвеличитьОбщийПробегНаПробегСпец") Тогда
			КоличествоВыработки = КоличествоВыработки + ТекСтрока["КоличествоСпецРаботы" + Сч];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаСервере
Функция СравнитьТабличныеЧасти(ИмяТЧ)
	Если ИмяТЧ = "Прицепы" Тогда
		// считаем количество прицепов
		КоличПрицепов = 0;
		Для Сч = 1 По 4 Цикл
			Если НЕ Элементы["Прицеп" + Сч].Видимость Тогда
				Если Сч > 0 Тогда
					КоличПрицепов = Сч-1;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			КоличПрицепов = Сч;
		КонецЦикла;
		
		Если КоличПрицепов <> ПутевойЛист_Ссылка.Прицепы.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
			
		Для Сч = 1 По КоличПрицепов Цикл
			Если ЭтотОбъект["ПутевойЛист_Прицепы_Прицеп" + Сч] <> ПутевойЛист_Ссылка.Прицепы[Сч - 1].ТС
				ИЛИ ЭтотОбъект["ПутевойЛист_Прицепы_СчGPS" + Сч] <> ПутевойЛист_Ссылка.Прицепы[Сч - 1].СчетчикМЧGPS
				ИЛИ ЭтотОбъект["ПутевойЛист_Прицепы_СчВыезда" + Сч] <> ПутевойЛист_Ссылка.Прицепы[Сч - 1].СчетчикМЧВыезда
				ИЛИ ЭтотОбъект["ПутевойЛист_Прицепы_СчВозврата" + Сч] <> ПутевойЛист_Ссылка.Прицепы[Сч - 1].СчетчикМЧВозвращения Тогда
				
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Простои" Тогда
		// считаем количество простоев
		КоличПростоев = 0;
		Для Сч = 1 По 6 Цикл
			Если НЕ Элементы["Простой" + Сч].Видимость Тогда
				Если Сч > 0 Тогда
					КоличПростоев = Сч-1;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			КоличПростоев = Сч;
		КонецЦикла;
		
		Если КоличПростоев <> ПутевойЛист_Ссылка.Простои.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Сч = 1 По КоличПростоев Цикл
			Если ЭтотОбъект["ПутевойЛист_Простои_ВидПростоя" + Сч] <> ПутевойЛист_Ссылка.Простои[Сч - 1].ВидПростоя
				ИЛИ ЭтотОбъект["ПутевойЛист_Простои_ВклДвиг" + Сч] <> ПутевойЛист_Ссылка.Простои[Сч - 1].ВключенДвигатель
				ИЛИ ЭтотОбъект["ПутевойЛист_Простои_Начало" + Сч] <> ПутевойЛист_Ссылка.Простои[Сч - 1].НачалоПростоя
				ИЛИ ЭтотОбъект["ПутевойЛист_Простои_Конец" + Сч] <> ПутевойЛист_Ссылка.Простои[Сч - 1].КонецПростоя Тогда
								
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Задание" Тогда
		Если ПутевойЛист_Задание.Количество() <> ПутевойЛист_Ссылка.Задание.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Сч = 1 По ПутевойЛист_Задание.Количество() Цикл
			Если ПутевойЛист_Задание[Сч-1].Выполнено <> ПутевойЛист_Ссылка.Задание[Сч-1].Выполнено
				ИЛИ ПутевойЛист_Задание[Сч-1].КоличествоЕздок <> ПутевойЛист_Ссылка.Задание[Сч-1].КоличествоЕздок
				ИЛИ ПутевойЛист_Задание[Сч-1].КоличествоКмГруз <> ПутевойЛист_Ссылка.Задание[Сч-1].КоличествоКмГруз
				ИЛИ ПутевойЛист_Задание[Сч-1].КоличествоКмПорожний <> ПутевойЛист_Ссылка.Задание[Сч-1].КоличествоКмПорожний
				ИЛИ ПутевойЛист_Задание[Сч-1].КоличествоОпераций <> ПутевойЛист_Ссылка.Задание[Сч-1].КоличествоОпераций
				ИЛИ ПутевойЛист_Задание[Сч-1].КоличествоТонн <> ПутевойЛист_Ссылка.Задание[Сч-1].КоличествоТонн
				ИЛИ ПутевойЛист_Задание[Сч-1].КоличествоЧасов <> ПутевойЛист_Ссылка.Задание[Сч-1].КоличествоЧасов
				ИЛИ ПутевойЛист_Задание[Сч-1].УсловиеРаботы <> ПутевойЛист_Ссылка.Задание[Сч-1].УсловиеРаботы
				ИЛИ ПутевойЛист_Задание[Сч-1].Объем <> ПутевойЛист_Ссылка.Задание[Сч-1].Объем
				ИЛИ ПутевойЛист_Задание[Сч-1].Контрагент = ПутевойЛист_Ссылка.Задание[Сч-1].Контрагент
				ИЛИ ПутевойЛист_Задание[Сч-1].ОбъектСтроительства = ПутевойЛист_Ссылка.Задание[Сч-1].ОбъектСтроительства

				Тогда
				
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ЗакрытьТерминалИЗавершитьРаботуПредприятия(Команда)
	
	НужноЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КлавиатураАвторизация(Команда)
	Элементы.ГруппаКлавиатураАвторизация.Видимость = НЕ Элементы.ГруппаКлавиатураАвторизация.Видимость;
	флКлавиатураВидимость = Элементы.ГруппаКлавиатураАвторизация.Видимость;
	Элементы.ПарольКлавиатура.Видимость = флКлавиатураВидимость;
	Элементы.Пароль.Видимость = НЕ флКлавиатураВидимость;
	Элементы.Логин.ТолькоПросмотр = флКлавиатураВидимость;
	Элементы.КлавиатураАвторизация.ЦветФона = ?(флКлавиатураВидимость, WebЦвета.СеребристоСерый, ЦветФонаКнопки);
	Если флКлавиатураВидимость Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_Логин", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_Логин()
	ТекущийЭлемент = Элементы.Логин;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиТерминала()
	НастройкиТерминала = Константы.уатНастройкиТерминалаПЛ.Получить().Получить();
	Если НастройкиТерминала = Неопределено Тогда
		мТаймерРаботыСоСтраницей      = Дата(1,1,1,0,2,0);
		ТаймерРаботыСоСтраницей       = Минута(мТаймерРаботыСоСтраницей)*60 + Секунда(мТаймерРаботыСоСтраницей);
		МаксимальноеКоличествоКопийПЛ = 3;
		Возврат;
	КонецЕсли;
	
	Если НастройкиТерминала.Свойство("Комментарий") Тогда
		Комментарий = НастройкиТерминала.Комментарий;
	КонецЕсли;
	Если НастройкиТерминала.Свойство("РазрешитьАвторизациюПоШтрихкоду") Тогда
		РазрешитьАвторизациюПоШтрихкоду = НастройкиТерминала.РазрешитьАвторизациюПоШтрихкоду;
	КонецЕсли;
	Если НастройкиТерминала.Свойство("МаксимальноеКоличествоКопийПЛ") Тогда
		МаксимальноеКоличествоКопийПЛ = НастройкиТерминала.МаксимальноеКоличествоКопийПЛ;
	Иначе
		МаксимальноеКоличествоКопийПЛ = 3;
	КонецЕсли;
	Если НастройкиТерминала.Свойство("ТаймерРаботыСоСтраницей") Тогда
		мТаймерРаботыСоСтраницей = НастройкиТерминала.ТаймерРаботыСоСтраницей;
	Иначе
		мТаймерРаботыСоСтраницей = Дата(1,1,1,0,2,0);
	КонецЕсли;

	ТаймерРаботыСоСтраницей = Минута(мТаймерРаботыСоСтраницей)*60 + Секунда(мТаймерРаботыСоСтраницей);
	
	Если ПустаяСтрока(Комментарий) Тогда
		Элементы.Комментарий.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗанятость_ТО_ДокументыПриИзменении(Элемент)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗанятость_ТО_ДокументыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаЗанятость_ТО_Документы = СтрокаЗанятость_ТО_Документы;
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ТаймерРаботыСоСтраницей()
	ТекстНСТР = НСтр("ru='Продолжить работу?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗадатьВопросПродолжитьРаботу", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет, 10);
	
	Попытка
		ОтключитьОбработчикОжидания("ТаймерРаботыСоСтраницейЗавершение");
	Исключение
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ТаймерРаботыСоСтраницейЗавершение", 10, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймерРаботыСоСтраницейЗавершение()
	ВернутьсяКСтраницеАвторизации();
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПродолжитьРаботу(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВернутьсяКСтраницеАвторизации();
	Иначе
		УстановитьТаймерРаботыСоСтраницей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТаймерРаботыСоСтраницей()
	
	Если НЕ ЗначениеЗаполнено(ТаймерРаботыСоСтраницей) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОтключитьОбработчикОжидания("ТаймерРаботыСоСтраницейЗавершение");
	Исключение
	КонецПопытки;
	
	Попытка
		ОтключитьОбработчикОжидания("ТаймерРаботыСоСтраницей");
	Исключение
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ТаймерРаботыСоСтраницей", ТаймерРаботыСоСтраницей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПодписиПЛ()
	флПодписьВодителя = ПЛПодписанВодителем(ПутевойЛист_Ссылка); //прописать получение
	Если флПодписьВодителя Тогда
		Элементы.ПодписатьПЛ.Доступность = Ложь;
		Элементы.ПодписатьПЛ.Заголовок   = "Подписан";
		Элементы.ГруппаПрицепы.Доступность = Ложь;
	Иначе
		Элементы.ПодписатьПЛ.Доступность = Истина;
		Элементы.ПодписатьПЛ.Заголовок   = "Подписать";
		Элементы.ГруппаПрицепы.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПЛПодписанВодителем(ДокументСсылка)
	СостояниеПодписейПЛ = уатЖурналыТранспортныхДокументов.СостояниеПодписейПЛСтруктура(ДокументСсылка);
	Возврат СостояниеПодписейПЛ.ВодительПослерейсовый;
КонецФункции

&НаСервереБезКонтекста
Функция ВидимостьКнопкиПодписать(Сотрудник)
	Возврат ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи")
		И ЗначениеЗаполнено(уатЖурналыТранспортныхДокументов.ПолучитьСертификатИзНастроекТерминала(Сотрудник));
КонецФункции

&НаКлиенте
Процедура АннулироватьПодписьВодителя()
	Если НЕ ПутевойЛист_Подписан Тогда
		Возврат;
	КонецЕсли;
	
	списАннулируемыеПодписи = Новый СписокЗначений;
	списАннулируемыеПодписи.Добавить(Неопределено, "ВодительПослерейсовый");
	
	ДопПараметры = Новый Структура("АннулируемыеПодписи, ТерминалПарольПодписи", списАннулируемыеПодписи, "");
	уатЖурналыТранспортныхДокументов.ИзменитьСостоянияПодписейПЛ(ПутевойЛист_Ссылка, ДопПараметры);
	
	ПутевойЛист_Подписан = Ложь;
	ОбновитьСтатусПодписиПЛ();
КонецПроцедуры

#КонецОбласти

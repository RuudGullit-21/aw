
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - Заполнить настройки в форме по структуре
//
// Параметры:
//  Форма				 - 	 - 
//  ВариантНастройки	 - 	 - 
//  СтруктураНастроекАРМ - 	 - 
//
Процедура ЗаполнитьНастройкиВФормеПоСтруктуре(Форма, ВариантНастройки, СтруктураНастроекАРМ) Экспорт
	
	СтруктураНастроек = Неопределено;
	
	Если ЗначениеЗаполнено(ВариантНастройки) Тогда 
		СпрОб = ВариантНастройки.ПолучитьОбъект();
		Если Не СпрОб = Неопределено И Не СпрОб.ПометкаУдаления Тогда 
			ХранилищеНастроек = СпрОб.НастройкиХранилище.Получить();
			Если Не ХранилищеНастроек = Неопределено Тогда 
				СтруктураНастроек = ХранилищеНастроек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено Тогда 
		СтруктураНастроек = СтруктураНастроекАРМ;
		
		Форма.НастройкаРежимОтображенияМЛ = 1;
		Форма.НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"; 
		Форма.НастройкаАлгоритмОптимизации = "Очередей";
	КонецЕсли;
	
	Форма.НастройкаПриоритетМаршрутизации.Очистить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если Не СтруктураНастроек.Свойство("ОтображатьЭлектронныеКартыПриОткрытии") Тогда 
			Форма.ОтображатьЭлектронныеКартыПриОткрытии = Истина;
		КонецЕсли;
		Если Не СтруктураНастроек.Свойство("НастройкаУказыватьНаименованиеЭтапаВручную") Тогда 
			Форма.НастройкаУказыватьНаименованиеЭтапаВручную = Истина;
		КонецЕсли;
		Если Не СтруктураНастроек.Свойство("НастройкаАлгоритмМаршрутизацииСтрока") Тогда 
			Форма.НастройкаАлгоритмМаршрутизацииСтрока = НаименованиеАлгоритма(Форма.НастройкаАлгоритмМаршрутизации);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("НастройкаАлгоритмОптимизации") Тогда 
			Форма.НастройкаАлгоритмОптимизации = "Очередей";
		КонецЕсли;

		Если СтруктураНастроек.Свойство("ЭкспертныеНастройки") 
			И Форма.ИмяФормы = "Обработка.уатАРМЛогиста_уэ.Форма.ФормаНастроек" Тогда
			ЭкспертныеНастройки = СтруктураНастроек.ЭкспертныеНастройки;
			Форма.НастройкаВнешнийМаршрутизатор_critical_lateness_risk_probability = ЭкспертныеНастройки.critical_lateness_risk_probability;
			Форма.НастройкаВнешнийМаршрутизатор_matrix_router                      = ЭкспертныеНастройки.matrix_router;
			Форма.НастройкаВнешнийМаршрутизатор_minimize_lateness_risk             = ЭкспертныеНастройки.minimize_lateness_risk;
			Форма.НастройкаВнешнийМаршрутизатор_quality                            = ЭкспертныеНастройки.quality;
			Форма.НастройкаВнешнийМаршрутизатор_restart_on_drop                    = ЭкспертныеНастройки.restart_on_drop;
			Форма.НастройкаВнешнийМаршрутизатор_solver_time_limit                  = ЭкспертныеНастройки.solver_time_limit;
			Форма.НастройкаВнешнийМаршрутизатор_thread_count                       = ЭкспертныеНастройки.thread_count;
			Форма.НастройкаВнешнийМаршрутизатор_weighted_drop_penalty              = ЭкспертныеНастройки.weighted_drop_penalty;
			Форма.НастройкаВнешнийМаршрутизатор_flexible_start_time                = ЭкспертныеНастройки.flexible_start_time;
			Форма.НастройкаВнешнийМаршрутизатор_proximity_factor                   = ЭкспертныеНастройки.proximity_factor;
			Форма.НастройкаВнешнийМаршрутизатор_routing_mode                       = ЭкспертныеНастройки.routing_mode;
			Форма.НастройкаВнешнийМаршрутизатор_avoid_tolls                        = ЭкспертныеНастройки.avoid_tolls;
			
			Форма.НастройкаПунктыВыдачи.Очистить();
			Форма.НастройкаПунктыВыдачиСтрока = "";
			Для Каждого ТекСтрока Из ЭкспертныеНастройки.ТаблицаПунктыВыдачи Цикл 
				Форма.НастройкаПунктыВыдачи.Добавить(ТекСтрока);
				Форма.НастройкаПунктыВыдачиСтрока = ?(ЗначениеЗаполнено(Форма.НастройкаПунктыВыдачиСтрока), Форма.НастройкаПунктыВыдачиСтрока + "; ", "")
				+ Справочники.уатПунктыНазначения.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекСтрока)).Наименование;
			КонецЦикла;
			
			ЭкспертныеНастройки.Свойство("ПресетНастройкиСклада",					 Форма.ПресетНастройкиСклада);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиЗаказа",					 Форма.ПресетНастройкиЗаказа);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиКурьераИлиАвтомобиля",		 Форма.ПресетНастройкиКурьераИлиАвтомобиля);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиСменыКурьера",				 Форма.ПресетНастройкиСменыКурьера);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиГлобальныеОпции",			 Форма.ПресетНастройкиГлобальныеОпции);
			
			ЭкспертныеНастройки.Свойство("ПресетНастройкиСклада_ПриоритетНастроек",					 Форма.ПресетНастройкиСклада_ПриоритетНастроек);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиЗаказа_ПриоритетНастроек",					 Форма.ПресетНастройкиЗаказа_ПриоритетНастроек);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиКурьераИлиАвтомобиля_ПриоритетНастроек",	 Форма.ПресетНастройкиКурьераИлиАвтомобиля_ПриоритетНастроек);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиСменыКурьера_ПриоритетНастроек",			 Форма.ПресетНастройкиСменыКурьера_ПриоритетНастроек);
			ЭкспертныеНастройки.Свойство("ПресетНастройкиГлобальныеОпции_ПриоритетНастроек",		 Форма.ПресетНастройкиГлобальныеОпции_ПриоритетНастроек);
		КонецЕсли; 
 
		
		Если СтруктураНастроек.Свойство("ЭкспертныеНастройкиОптимизации") 
			И Форма.ИмяФормы = "Обработка.уатАРМЛогиста_уэ.Форма.ФормаНастроек" Тогда
			ЭкспертныеНастройкиОптимизации = СтруктураНастроек.ЭкспертныеНастройкиОптимизации;
			ЭкспертныеНастройкиОптимизации.Свойство("weighted_drop_penalty",	 Форма.Оптимизация_weighted_drop_penalty);
			ЭкспертныеНастройкиОптимизации.Свойство("flexible_start_time",		 Форма.Оптимизация_flexible_start_time);
			ЭкспертныеНастройкиОптимизации.Свойство("proximity_factor",			 Форма.Оптимизация_proximity_factor);
			
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиСклада",					 Форма.Оптимизация_ПресетНастройкиСклада);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиЗаказа",					 Форма.Оптимизация_ПресетНастройкиЗаказа);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиКурьераИлиАвтомобиля",		 Форма.Оптимизация_ПресетНастройкиКурьераИлиАвтомобиля);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиСменыКурьера",				 Форма.Оптимизация_ПресетНастройкиСменыКурьера);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиГлобальныеОпции",			 Форма.Оптимизация_ПресетНастройкиГлобальныеОпции);
			
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиСклада_ПриоритетНастроек",					 Форма.Оптимизация_ПресетНастройкиСклада_ПриоритетНастроек);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиЗаказа_ПриоритетНастроек",					 Форма.Оптимизация_ПресетНастройкиЗаказа_ПриоритетНастроек);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиКурьераИлиАвтомобиля_ПриоритетНастроек",	 Форма.Оптимизация_ПресетНастройкиКурьераИлиАвтомобиля_ПриоритетНастроек);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиСменыКурьера_ПриоритетНастроек",			 Форма.Оптимизация_ПресетНастройкиСменыКурьера_ПриоритетНастроек);
			ЭкспертныеНастройкиОптимизации.Свойство("ПресетНастройкиГлобальныеОпции_ПриоритетНастроек",			 Форма.Оптимизация_ПресетНастройкиГлобальныеОпции_ПриоритетНастроек);
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(Форма, СтруктураНастроек);
		Если СтруктураНастроек.Свойство("НастрокаРежимОтображенияМЛ") Тогда 
			Форма.НастройкаРежимОтображенияМЛ = СтруктураНастроек.НастрокаРежимОтображенияМЛ;
		ИначеЕсли СтруктураНастроек.Свойство("НастройкаРежимОтображенияМЛ") Тогда
			Форма.НастройкаРежимОтображенияМЛ = СтруктураНастроек.НастройкаРежимОтображенияМЛ;
		Иначе	
			Форма.НастройкаРежимОтображенияМЛ = 1;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОтборПоЗонамХранилище") Тогда 
			ВосстановитьНастройкиОтборовЗон(СтруктураНастроек.ОтборПоЗонамХранилище.Получить().Строки, Форма.ОтборЗоны.ПолучитьЭлементы());
		ИначеЕсли Не СтруктураНастроекАРМ = Неопределено 
			И ТипЗнч(СтруктураНастроекАРМ) = Тип("Структура") Тогда
			Если СтруктураНастроекАРМ.Свойство("ОтборПоЗонамХранилище") Тогда 
				ВосстановитьНастройкиОтборовЗон(СтруктураНастроекАРМ.ОтборПоЗонамХранилище.Получить().Строки, Форма.ОтборЗоны.ПолучитьЭлементы());
				Если СтруктураНастроекАРМ.Свойство("ПроверкаПунктаОтправленияВЗоне") Тогда
					Форма.ПроверкаПунктаОтправленияВЗоне = СтруктураНастроекАРМ.ПроверкаПунктаОтправленияВЗоне;
				КонецЕсли;
				Если СтруктураНастроекАРМ.Свойство("ПроверкаПунктаНазначенияВЗоне") Тогда
					Форма.ПроверкаПунктаНазначенияВЗоне = СтруктураНастроекАРМ.ПроверкаПунктаНазначенияВЗоне;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Тогда 
			Форма.НастройкаИндивидуальныйГаражТС = 0;
		КонецЕсли;
		
		Если Не СтруктураНастроек.Свойство("НастройкаЧасовойПояс") Тогда 
			Форма.НастройкаЧасовойПояс = 3;
		КонецЕсли;
		
		Если НЕ СтруктураНастроек.Свойство("Оптимизация_НастройкаЧасовойПояс") Тогда 
			Форма.Оптимизация_НастройкаЧасовойПояс = 3;
		КонецЕсли;
		
		Если НЕ СтруктураНастроек.Свойство("НастройкаКоличествоДнейПланирования") Тогда 
			Форма.НастройкаКоличествоДнейПланирования = 1;
		КонецЕсли;

		Если Не СтруктураНастроек.Свойство("НастройкаПредставлениеЗаказаНаТС") Тогда 
			Форма.НастройкаПредставлениеЗаказаНаТС = "номер контрагент";
		КонецЕсли;
		
	Иначе
		Форма.НастройкаРежимИзмененияДокументовИзПланировщика = Истина;
		Форма.НастройкаУказыватьНаименованиеЭтапаВручную      = Истина;
		Форма.НастройкаЧасовойПояс                            = 3;
		Форма.Оптимизация_НастройкаЧасовойПояс                = 3; 
		Форма.НастройкаКоличествоДнейПланирования             = 1;
	КонецЕсли;
	
	Если НЕ Константы.уатИспользоватьРазмещениеВСекциях_уэ.Получить() Тогда 
		Форма.НастройкаУчитыватьСекцииТранспортныхСредств = Ложь;
		Форма.НастройкаСмешиватьГрузыВСекциях = Ложь;
	КонецЕсли;
	
	Если НЕ Константы.уатИспользоватьРасчетТары_уэ.Получить() Тогда 
		Форма.НастройкаИспользоватьРасчетТары = Ложь;
		Форма.НастройкаУчитыватьГруппировкуВМаршрутномЛисте = Ложь;
		Форма.НастройкаУчитыватьУпаковкуВПаллетыВМЛ         = Ложь;

		Форма.НастройкаСмешиватьГрузыВСекциях = Ложь;
	КонецЕсли;
	
	Если Не СтруктураНастроекАРМ = Неопределено И ТипЗнч(СтруктураНастроекАРМ) = Тип("Структура") 
			И Форма.ИмяФормы = "Обработка.уатАРМЛогиста_уэ.Форма.Форма" Тогда
		СтруктураНастроекАРМ.Свойство("НастройкаКоличествоДнейДоДатыПланирования", Форма.НастройкаКоличествоДнейДоДатыПланирования);
	КонецЕсли;
	
	Если Форма.НастройкаПриоритетМаршрутизации.Количество() = 0 Тогда 
		Форма.НастройкаПриоритетМаршрутизации.Добавить("КритерийОптимальности", НСтр("en='criterion of optimality';ru='критерий оптимальности'"));
		Форма.НастройкаПриоритетМаршрутизации.Добавить("ПриоритетЗаказа",       НСтр("en='order priority';ru='приоритет заказа'"));
		Форма.НастройкаПриоритетМаршрутизации.Добавить("РазмерЗаказа",          НСтр("en='size of order';ru='размер заказа'"));
		Форма.НастройкаПриоритетМаршрутизации.Добавить("ВременныеОкна",         НСтр("en='time windows';ru='временные окна'"));
		Форма.НастройкаПриоритетМаршрутизации.Добавить("РазрешенныеТипыТС",     НСтр("en='permitted vehicles types';ru='разрешенные типы ТС'"));
	КонецЕсли;
	
	Если Форма.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 0 Тогда 
		Форма.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 100;
	КонецЕсли;
	
	Если Форма.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу = 0 Тогда 
		Форма.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу = 100;
	КонецЕсли;
	
	Если Форма.НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему = 0 Тогда 
		Форма.НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему = 100;
	КонецЕсли;

	Если Форма.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу = 0 Тогда 
		Форма.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу = 100;
	КонецЕсли;

	Если Форма.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 0 Тогда 
		Форма.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 100;
	КонецЕсли;
		
	Если Форма.ИмяФормы = "Обработка.уатАРМЛогиста_уэ.Форма.Форма" Тогда 
		Если Форма.НастройкаКоличествоДнейДоДатыПланирования = 0 Тогда 
			Форма.НастройкаКоличествоДнейДоДатыПланирования = 1;
		КонецЕсли;
		
		Если Форма.НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Тогда
			Форма.НастройкаВремяВыездаИзГаража              = 1;
			Если СтруктураНастроек.Свойство("НастройкаВремяВыездаТранспортныхСредств") Тогда
				Форма.НастройкаВремяВыездаТранспортныхСредств = СтруктураНастроек.НастройкаВремяВыездаТранспортныхСредств;
			КонецЕсли;
			Если СтруктураНастроек.Свойство("НастройкаВремяВозвратаТранспортныхСредств") Тогда
				Форма.НастройкаВремяВозвратаТранспортныхСредств = ?(ЗначениеЗаполнено(СтруктураНастроек.НастройкаВремяВозвратаТранспортныхСредств), СтруктураНастроек.НастройкаВремяВозвратаТранспортныхСредств, КонецДня(СтруктураНастроек.НастройкаВремяВозвратаТранспортныхСредств));
			Иначе
				Форма.НастройкаВремяВозвратаТранспортныхСредств = КонецДня(Форма.НастройкаВремяВыездаТранспортныхСредств);
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.НастройкаАлгоритмОптимизации = "Яндекс" Тогда
			Форма.Оптимизация_НастройкаВремяВыездаИзГаража = 1;
			Если СтруктураНастроек.Свойство("Оптимизация_НастройкаВремяВыездаТранспортныхСредств") Тогда
				Форма.Оптимизация_НастройкаВремяВыездаТранспортныхСредств = СтруктураНастроек.Оптимизация_НастройкаВремяВыездаТранспортныхСредств;
			КонецЕсли;
			Если СтруктураНастроек.Свойство("Оптимизация_НастройкаВремяВозвратаТранспортныхСредств") Тогда
				Форма.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств = ?(ЗначениеЗаполнено(СтруктураНастроек.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств),
					СтруктураНастроек.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств, КонецДня(СтруктураНастроек.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств));
			Иначе
				Форма.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств = КонецДня(Форма.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.НастройкаУчитыватьОкноПогрузкиТерминалов 
		И Форма.НастройкаКларкРайтРежимДоставки = 1 Тогда
		Форма.НастройкаУчитыватьОкноПогрузкиТерминалов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Получить распределение кларк райт
//
// Параметры:
//  АдресВрХранилища							 - 	 - 
//  ВхЗаказы									 - 	 - 
//  ВхЗаказыПоКоординатам						 - 	 - 
//  ВхМсвТС										 - 	 - 
//  ВхМсвВиртТС									 - 	 - 
//  АдресДепо									 - 	 - 
//  НастройкаКластеризации						 - 	 - 
//  РежимОптимизации							 - 	 - 
//  ОграничениеЧасов							 - 	 - 
//  ОграничениеПоРасстоянию						 - 	 - 
//  МаксимальноеКоличествоЗаказовТС				 - 	 - 
//  МаксимальноеЧислоПунктов					 - 	 - 
//  ВремяВыезда									 - 	 - 
//  СжиматьЗаказы								 - 	 - 
//  УчитыватьОграниченияПоЗагрузкеТС			 - 	 - 
//  ВозвратВГаражСобственныеТС					 - 	 - 
//  ВозвратВГаражПривлеченныеТС					 - 	 - 
//  ВозвратВГаражВиртуальныеТС					 - 	 - 
//  УчитыватьОкнаПоЗаказам						 - 	 - 
//  ПараметрыСжатия								 - 	 - 
//  УчитыватьРазрешенныеТипыТС					 - 	 - 
//  РежимВремениВыездаИзГаража					 - 	 - 
//  ПараметрРазмераЗаказа						 - 	 - 
//  ПриоритетыМаршрутизации						 - 	 - 
//  УчитыватьОкноПогрузкиТерминалов				 - 	 - 
//  ИспользоватьВПриоритетеСобственныйТранспорт	 - 	 - 
//  ПонижающийКоэффициентЗагрузкиКузоваПоОбъему	 - 	 - 
//  ПонижающийКоэффициентЗагрузкиКузоваПоВесу	 - 	 - 
//  КларкРайтРежимДоставки						 - 	 - 
//  УчитыватьНаправленияПеревозки				 - 	 - 
//  УчитыватьСекцииТранспортныхСредств			 - 	 - 
//  СмешиватьГрузыВСекциях						 - 	 - 
//  ИспользоватьХарактеристикиЗаказовНаТС		 - 	 - 
//
Процедура ПолучитьРаспределение_КларкРайт(АдресВрХранилища, Знач ВхЗаказы, Знач ВхЗаказыПоКоординатам, Знач ВхМсвТС, Знач ВхМсвВиртТС,
		Знач АдресДепо, Знач НастройкаКластеризации, Знач РежимОптимизации, Знач ОграничениеЧасов=0, 
		Знач ОграничениеПоРасстоянию=0, Знач МаксимальноеКоличествоЗаказовТС=0, Знач МаксимальноеЧислоПунктов=0,
		Знач ВремяВыезда='00010101000000', Знач СжиматьЗаказы=Ложь, Знач УчитыватьОграниченияПоЗагрузкеТС=Ложь,
		Знач ВозвратВГаражСобственныеТС=Ложь, Знач ВозвратВГаражПривлеченныеТС=Ложь, Знач ВозвратВГаражВиртуальныеТС=Ложь,
		Знач УчитыватьОкнаПоЗаказам=Ложь, ПараметрыСжатия=Неопределено, 
		Знач УчитыватьРазрешенныеТипыТС=Ложь, Знач РежимВремениВыездаИзГаража=0, Знач ПараметрРазмераЗаказа=0, 
		Знач ПриоритетыМаршрутизации=Неопределено, Знач УчитыватьОкноПогрузкиТерминалов=Ложь, 
		Знач ИспользоватьВПриоритетеСобственныйТранспорт=Ложь, Знач ПонижающийКоэффициентЗагрузкиКузоваПоОбъему=100, 
		Знач ПонижающийКоэффициентЗагрузкиКузоваПоВесу=100, Знач КларкРайтРежимДоставки=0, 
		Знач УчитыватьНаправленияПеревозки=Ложь, Знач УчитыватьСекцииТранспортныхСредств=Ложь,
		Знач СмешиватьГрузыВСекциях=Ложь, Знач ИспользоватьХарактеристикиЗаказовНаТС=Ложь) Экспорт
	
	// Подготовка данных.
	// Помещение сообщения во временное хранилище (используется для отображения в форме длительной операции.
	ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю", "Выполняется маршрутизация заказов"), АдресВрХранилища);
	
	// Инициализация параметров сжатия, если они не были переданы.
	Если ПараметрыСжатия = Неопределено Тогда 
		ПараметрыСжатия = Новый Структура();
	КонецЕсли;
	Если Не ПараметрыСжатия.Свойство("МаксВес") Тогда 
		ПараметрыСжатия.Вставить("МаксВес", 0);
	КонецЕсли;
	Если Не ПараметрыСжатия.Свойство("МаксОбъем") Тогда 
		ПараметрыСжатия.Вставить("МаксОбъем", 0);
	КонецЕсли;
	Если Не ПараметрыСжатия.Свойство("МаксУпак") Тогда 
		ПараметрыСжатия.Вставить("МаксУпак", 0);
	КонецЕсли;
	Если Не ПараметрыСжатия.Свойство("МаксВремя") Тогда 
		ПараметрыСжатия.Вставить("МаксВремя", 0);
	КонецЕсли;
	Если Не ПараметрыСжатия.Свойство("МаксРасстояние") Тогда 
		ПараметрыСжатия.Вставить("МаксРасстояние", 0);
	КонецЕсли;
	
	// Определение типа маршрутов. Для алгоритма Кларка-Райта возможны два сценария:
	// 1. Сборные маршруты - по всем заказам одинаковые пункты разгрузки (ТС забирают грузы по заказам и привозят их на базу).
	// 2. Развозочные маршруты - по всем заказам одинаковые пункты погрузки (ТС загружаются на базе и везут грузы по заказам).
	
	Если КларкРайтРежимДоставки = 1 Тогда 
		ФормироватьСборныеМаршруты = Истина;
	Иначе 
		ФормироватьСборныеМаршруты = Ложь;
	КонецЕсли;
	
	АдресДепоВрем = АдресДепо;
	ШиротаДепо  = АдресДепо.Лат;
	ДолготаДепо = АдресДепо.Лон;
	
	// Если используется кластеризация - вместо адреса депо используется кластер, в который этот адрес входит.
	флИспользованиеКластеризации = уатЗащищенныеФункцииСервер_уэ.ПолучитьИспользованиеКластеризации();
	
	Если флИспользованиеКластеризации Тогда 
		ЗапросКластерОтправления = Новый Запрос();
		ЗапросКластерОтправления.УстановитьПараметр("ПунктНазначения", АдресДепоВрем);
		ЗапросКластерОтправления.УстановитьПараметр("НастройкаКластеризации", НастройкаКластеризации);
		ЗапросКластерОтправления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПривязкаПунктовНазначенияККластерам_уэ.Кластер
		|ИЗ
		|	РегистрСведений.уатПривязкаПунктовНазначенияККластерам_уэ КАК уатПривязкаПунктовНазначенияККластерам_уэ
		|ГДЕ
		|	уатПривязкаПунктовНазначенияККластерам_уэ.ПунктНазначения = &ПунктНазначения
		|	И уатПривязкаПунктовНазначенияККластерам_уэ.Кластер.НастройкаКластеризации = &НастройкаКластеризации";
		
		ВыборкаКластерОтправления = ЗапросКластерОтправления.Выполнить().Выбрать();
		Если ВыборкаКластерОтправления.Следующий() Тогда 
			АдресДепоВрем = ВыборкаКластерОтправления.Кластер;
		Иначе 
			ПоместитьВоВременноеХранилище(Новый Структура("ТекстОшибки", "Адрес пункта отправления не привязан к кластеру."), АдресВрХранилища);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Получение данных о средней скорости. Данные получаются из базы и кэшируются (для уменьшения нагрузки на СУБД).
	ЗапросСредняяСкорость = Новый Запрос();
	ЗапросСредняяСкорость.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСредняяСкоростьДвижения.НачалоПериода,
	|	уатСредняяСкоростьДвижения.КонецПериода,
	|	уатСредняяСкоростьДвижения.Скорость
	|ИЗ
	|	РегистрСведений.уатСредняяСкоростьДвижения КАК уатСредняяСкоростьДвижения";
	
	ТабСкоростей = ЗапросСредняяСкорость.Выполнить().Выгрузить();
	
	// Группировка входящих заказов по направлениям перевозки.
	ЗаказыПоНаправлениямПеревозки = Новый ТаблицаЗначений();
	ЗаказыПоНаправлениямПеревозки.Колонки.Добавить("НаправлениеПеревозки", Новый ОписаниеТипов("СправочникСсылка.уатНаправленияПеревозок"));
	ЗаказыПоНаправлениямПеревозки.Колонки.Добавить("Заказы",               Новый ОписаниеТипов("Массив"));
	ЗаказыПоНаправлениямПеревозки.Колонки.Добавить("ЗаказыПоКоординатам",  Новый ОписаниеТипов("Массив"));
	
	Для Каждого ТекСтрока Из ВхЗаказы Цикл 
		Если УчитыватьНаправленияПеревозки Тогда 
			ТекНаправлениеПеревозки = ТекСтрока.Заказ.НаправлениеПеревозки;
		Иначе 
			ТекНаправлениеПеревозки = Справочники.уатНаправленияПеревозок.ПустаяСсылка();
		КонецЕсли;
		
		НайдСтрока = ЗаказыПоНаправлениямПеревозки.Найти(ТекНаправлениеПеревозки, "НаправлениеПеревозки");
		Если НайдСтрока = Неопределено Тогда 
			НайдСтрока = ЗаказыПоНаправлениямПеревозки.Добавить();
			НайдСтрока.НаправлениеПеревозки = ТекНаправлениеПеревозки;
		КонецЕсли;
		
		НайдСтрока.Заказы.Добавить(ТекСтрока);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ВхЗаказыПоКоординатам Цикл 
		Если УчитыватьНаправленияПеревозки Тогда 
			ТекНаправлениеПеревозки = ТекСтрока.Заказ.НаправлениеПеревозки;
		Иначе 
			ТекНаправлениеПеревозки = Справочники.уатНаправленияПеревозок.ПустаяСсылка();
		КонецЕсли;
		
		НайдСтрока = ЗаказыПоНаправлениямПеревозки.Найти(ТекНаправлениеПеревозки, "НаправлениеПеревозки");
		Если НайдСтрока = Неопределено Тогда 
			НайдСтрока = ЗаказыПоНаправлениямПеревозки.Добавить();
			НайдСтрока.НаправлениеПеревозки = ТекНаправлениеПеревозки;
		КонецЕсли;
		
		НайдСтрока.ЗаказыПоКоординатам.Добавить(ТекСтрока);
	КонецЦикла;
	
	КоличествоНаправленийПеревозки = ЗаказыПоНаправлениямПеревозки.Количество();
	
	СчКоличествоЭтапов = 0;
	Если ВхМсвТС.Количество() Тогда
		СчКоличествоЭтапов = СчКоличествоЭтапов + КоличествоНаправленийПеревозки;
	КонецЕсли;
	Если ВхМсвВиртТС.Количество() Тогда 
		СчКоличествоЭтапов = СчКоличествоЭтапов + КоличествоНаправленийПеревозки;
	КонецЕсли;
	Если УчитыватьОграниченияПоЗагрузкеТС Тогда 
		СчКоличествоЭтапов = СчКоличествоЭтапов + КоличествоНаправленийПеревозки;
	КонецЕсли;
	СчТекЭтап = 0;
	
	// Переменная "КонечныеПулы" хранит результат распределения заказов по ТС.
	КонечныеПулы = Новый Массив();
	
	Для Каждого ТекНаправление Из ЗаказыПоНаправлениямПеревозки Цикл 
		Заказы = Новый Массив();
		Для Каждого ТекСтрока Из ТекНаправление.Заказы Цикл 
			Заказы.Добавить(ТекСтрока);
		КонецЦикла;
		
		ЗаказыПоКоординатам = Новый Массив();
		Для Каждого ТекСтрока Из ТекНаправление.ЗаказыПоКоординатам Цикл 
			ЗаказыПоКоординатам.Добавить(ТекСтрока);
		КонецЦикла;
		
		мсвТС = Новый Массив();
		Для Каждого ТекСтрока Из ВхМсвТС Цикл 
			мсвТС.Добавить(ТекСтрока);
		КонецЦикла;
		
		мсвВиртТС = Новый Массив();
		Для Каждого ТекСтрока Из ВхМсвВиртТС Цикл 
			мсвВиртТС.Добавить(ТекСтрока);
		КонецЦикла;
		
		// Преобразование массива ТС в таблицу.
		табТСВходная = Новый ТаблицаЗначений();
		табТСВходная.Колонки.Добавить("ТС",           Новый ОписаниеТипов("СправочникСсылка.уатТС"));
		табТСВходная.Колонки.Добавить("Прицеп1",      Новый ОписаниеТипов("СправочникСсылка.уатТС"));
		табТСВходная.Колонки.Добавить("Прицеп2",      Новый ОписаниеТипов("СправочникСсылка.уатТС"));
		табТСВходная.Колонки.Добавить("ДатаВыездаТС", Новый ОписаниеТипов("Дата"));
		
		Для Каждого ТекСтрока Из мсвТС Цикл 
			НовСтрока = табТСВходная.Добавить();
			НовСтрока.ТС           = ТекСтрока.ТС;
			НовСтрока.Прицеп1      = ТекСтрока.Прицеп1;
			НовСтрока.Прицеп2      = ТекСтрока.Прицеп2;
			НовСтрока.ДатаВыездаТС = ТекСтрока.ДатаВыездаТС;
		КонецЦикла;
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц();
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		// Подготовка суммарных характеристик по всем ТС (ВОХ должны содержать характеристики всей сцепки.
		Запрос.УстановитьПараметр("табТСВходная",                                табТСВходная);
		Запрос.УстановитьПараметр("ИспользоватьВПриоритетеСобственныйТранспорт", ИспользоватьВПриоритетеСобственныйТранспорт);
		Запрос.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоОбъему", ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100);
		Запрос.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоВесу",   ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100);
		Запрос.УстановитьПараметр("ВозвратВГаражСобственныеТС",                  ВозвратВГаражСобственныеТС);
		Запрос.УстановитьПараметр("ВозвратВГаражПривлеченныеТС",                 ВозвратВГаражПривлеченныеТС);
		Запрос.УстановитьПараметр("ВозвратВГаражВиртуальныеТС",                  ВозвратВГаражВиртуальныеТС);
		
		Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
			Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1000);
		Иначе 
			Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1);
		КонецЕсли;
		
		Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
			Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1000);
		Иначе 
			Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1);
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	табТСВходная.ТС КАК ТС,
		|	табТСВходная.Прицеп1 КАК Прицеп1,
		|	табТСВходная.Прицеп2 КАК Прицеп2,
		|	табТСВходная.ДатаВыездаТС КАК ДатаВыездаТС
		|ПОМЕСТИТЬ ВТ_ТСВходПараметр
		|ИЗ
		|	&табТСВходная КАК табТСВходная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.ТС КАК Справочник.уатТС) КАК ТС,
		|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
		|	ВЫБОР
		|		КОГДА ВТ_ТСВходПараметр.Прицеп2 = ВТ_ТСВходПараметр.Прицеп1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
		|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп2 КАК Справочник.уатТС)
		|	КОНЕЦ КАК Прицеп2,
		|	ВТ_ТСВходПараметр.ДатаВыездаТС КАК ДатаВыездаТС
		|ПОМЕСТИТЬ ВТ_ТСтипизированная
		|ИЗ
		|	ВТ_ТСВходПараметр КАК ВТ_ТСВходПараметр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТСтипизированная.ТС КАК Ссылка,
		|	ВТ_ТСтипизированная.Прицеп1 КАК Прицеп1,
		|	ВТ_ТСтипизированная.Прицеп2 КАК Прицеп2,
		|	(ВТ_ТСтипизированная.ТС.Модель.Грузоподъемность * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности) * &ПонижающийКоэффициентЗагрузкиКузоваПоВесу КАК Грузоподъемность,
		|	(ВТ_ТСтипизированная.ТС.Модель.ОбъемКузова * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова) * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему КАК ОбъемКузова,
		|	ВТ_ТСтипизированная.ТС.Модель.МинимальныйВесГруза * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальныйВесГруза, 0) * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальныйВесГруза, 0) * &КоэфГрузоподъемности КАК МинимальныйВесГруза,
		|	ВТ_ТСтипизированная.ТС.Модель.МинимальныйОбъемГруза * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальныйОбъемГруза, 0) * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальныйОбъемГруза, 0) * &КоэфОбъемаКузова КАК МинимальныйОбъемГруза,
		|	ВТ_ТСтипизированная.ТС.Модель.МинимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальноеКоличествоУпаковок, 0) КАК МинимальноеКоличествоУпаковок,
		|	ВТ_ТСтипизированная.ТС.Модель.МаксимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МаксимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МаксимальноеКоличествоУпаковок, 0) КАК МаксимальноеКоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ВТ_ТСтипизированная.ТС.ТипТС = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
		|			ТОГДА ВТ_ТСтипизированная.ТС.Модель.ТипТС
		|		ИНАЧЕ ВТ_ТСтипизированная.ТС.ТипТС
		|	КОНЕЦ КАК ТипТС,
		|	ВЫБОР
		|		КОГДА &ИспользоватьВПриоритетеСобственныйТранспорт
		|				И ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет,
		|	ВТ_ТСтипизированная.ДатаВыездаТС КАК ДатаВыездаТС,
		|	ВЫБОР
		|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
		|				И &ВозвратВГаражСобственныеТС
		|			ТОГДА ИСТИНА
		|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
		|				И &ВозвратВГаражПривлеченныеТС
		|			ТОГДА ИСТИНА
		|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
		|				И &ВозвратВГаражВиртуальныеТС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВозвратВГараж
		|ПОМЕСТИТЬ ВТ_ТС_Подготовка
		|ИЗ
		|	ВТ_ТСтипизированная КАК ВТ_ТСтипизированная";
		
		Запрос.Выполнить();
		
		// Получение максимальных характеристик всех ТС (необходимо для сжатия заказов).
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ТранспортныеСредства.Грузоподъемность) КАК МаксГрузоподъемность,
		|	МАКСИМУМ(ТранспортныеСредства.ОбъемКузова) КАК МаксОбъемКузова
		|ИЗ
		|	ВТ_ТС_Подготовка КАК ТранспортныеСредства";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			МаксГрузоподъемность = Выборка.МаксГрузоподъемность;
			МаксОбъемКузова      = Выборка.МаксОбъемКузова;
		Иначе 
			МаксГрузоподъемность = 0;
			МаксОбъемКузова      = 0;
		КонецЕсли;
		
		// Если используется сжатие и параметры сжатия не установлены - необходимо установить
		// данные параметры по-умолчанию (1/3 от максимальной характеристики ТС).
		Если СжиматьЗаказы Тогда 
			Если ПараметрыСжатия.МаксВес = 0 Или ПараметрыСжатия.МаксОбъем = 0 Или ПараметрыСжатия.МаксУпак = 0 Тогда 
				ВсегоТС            = 0;
				ГрузоподъемностьТС = 0;
				ОбъемКузоваТС      = 0;
				МаксУпаковокТС     = 0;
				
				Для Каждого ТекТС Из мсвТС Цикл 
					ВсегоТС = ВсегоТС + 1;
					
					ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекТС.ТС);
					ГрузоподъемностьТС = ГрузоподъемностьТС + ГрузоподъемностьИОбъемТС.Грузоподъемность * ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100;
					ОбъемКузоваТС      = ОбъемКузоваТС + ГрузоподъемностьИОбъемТС.ОбъемКузова * ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100;
					МаксУпаковокТС     = МаксУпаковокТС + ТекТС.ТС.Модель.МаксимальноеКоличествоУпаковок;
					
					Если ЗначениеЗаполнено(ТекТС.Прицеп1) Тогда 
						ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекТС.Прицеп1);
						ГрузоподъемностьТС = ГрузоподъемностьТС + ГрузоподъемностьИОбъемТС.Грузоподъемность * ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100;
						ОбъемКузоваТС      = ОбъемКузоваТС + ГрузоподъемностьИОбъемТС.ОбъемКузова * ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100;
						МаксУпаковокТС     = МаксУпаковокТС + ТекТС.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекТС.Прицеп2) И Не ТекТС.Прицеп1 = ТекТС.Прицеп2 Тогда 
						ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекТС.Прицеп2);
						ГрузоподъемностьТС = ГрузоподъемностьТС + ГрузоподъемностьИОбъемТС.Грузоподъемность * ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100;
						ОбъемКузоваТС      = ОбъемКузоваТС + ГрузоподъемностьИОбъемТС.ОбъемКузова * ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100;
						МаксУпаковокТС     = МаксУпаковокТС + ТекТС.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТекВиртТС Из мсвВиртТС Цикл 
					ВсегоТС = ВсегоТС + ТекВиртТС.КоличествоВиртуальныхТС;
					
					текГрузоподъемность = 0;
					текОбъемКузова      = 0;
					текМаксУпаковок     = 0;
					
					ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекВиртТС.ТС);
					текГрузоподъемность = текГрузоподъемность + ГрузоподъемностьИОбъемТС.Грузоподъемность * ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100;
					текОбъемКузова      = текОбъемКузова + ГрузоподъемностьИОбъемТС.ОбъемКузова * ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100;
					текМаксУпаковок     = текМаксУпаковок + ТекВиртТС.ТС.Модель.МаксимальноеКоличествоУпаковок;
					
					Если ЗначениеЗаполнено(ТекВиртТС.Прицеп1) Тогда 
						ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекВиртТС.Прицеп1);
						текГрузоподъемность = текГрузоподъемность + ГрузоподъемностьИОбъемТС.Грузоподъемность * ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100;
						текОбъемКузова      = текОбъемКузова + ГрузоподъемностьИОбъемТС.ОбъемКузова * ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100;
						текМаксУпаковок     = текМаксУпаковок + ТекВиртТС.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекВиртТС.Прицеп2) И Не ТекВиртТС.Прицеп1 = ТекВиртТС.Прицеп2 Тогда 
						ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекВиртТС.Прицеп2);
						текГрузоподъемность = текГрузоподъемность + ГрузоподъемностьИОбъемТС.Грузоподъемность * ПонижающийКоэффициентЗагрузкиКузоваПоВесу/100;
						текОбъемКузова      = текОбъемКузова + ГрузоподъемностьИОбъемТС.ОбъемКузова * ПонижающийКоэффициентЗагрузкиКузоваПоОбъему/100;
						текМаксУпаковок     = текМаксУпаковок + ТекВиртТС.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
					КонецЕсли;
					
					ГрузоподъемностьТС = ГрузоподъемностьТС + текГрузоподъемность * ТекВиртТС.КоличествоВиртуальныхТС;
					ОбъемКузоваТС      = ОбъемКузоваТС + текОбъемКузова * ТекВиртТС.КоличествоВиртуальныхТС;
					МаксУпаковокТС     = МаксУпаковокТС + текМаксУпаковок * ТекВиртТС.КоличествоВиртуальныхТС;
				КонецЦикла;
				
				Если ПараметрыСжатия.МаксВес = 0 Тогда 
					ПараметрыСжатия.МаксВес = ?(ВсегоТС = 0, 0, (ГрузоподъемностьТС / ВсегоТС) / 3);
				КонецЕсли;
				
				Если ПараметрыСжатия.МаксОбъем = 0 Тогда 
					ПараметрыСжатия.МаксОбъем = ?(ВсегоТС = 0, 0, (ОбъемКузоваТС / ВсегоТС) / 3);
				КонецЕсли;
				
				Если ПараметрыСжатия.МаксУпак = 0 Тогда 
					ПараметрыСжатия.МаксУпак  = ?(ВсегоТС = 0, 0, (МаксУпаковокТС / ВсегоТС) / 3);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеИсходныхЗаказов = СформироватьТаблицуИсходныхЗаказов(
			Заказы, 
			ЗаказыПоКоординатам, 
			флИспользованиеКластеризации, 
			НастройкаКластеризации, 
			СжиматьЗаказы,
			ФормироватьСборныеМаршруты,
			АдресДепо,
			АдресДепоВрем,
			УчитыватьОкнаПоЗаказам,
			ИспользоватьХарактеристикиЗаказовНаТС
		);
		
		Если УчитыватьОкноПогрузкиТерминалов И Не ФормироватьСборныеМаршруты Тогда 
			ПунктПогрузкиПоТерминалам = АдресДепо;
		Иначе 
			ПунктПогрузкиПоТерминалам = Неопределено;
		КонецЕсли;
		
		ДанныеПоТСИПереходам = СформироватьДанныеПоТСИПереходам(
			Запрос, 
			АдресДепоВрем, 
			НастройкаКластеризации, 
			УчитыватьРазрешенныеТипыТС,
			МаксГрузоподъемность,
			МаксОбъемКузова, 
			флИспользованиеКластеризации,
			ДанныеИсходныхЗаказов.МассивПунктов,
			ДанныеИсходныхЗаказов.МассивАдресов,
			ПунктПогрузкиПоТерминалам,
			УчитыватьСекцииТранспортныхСредств,
			мсвВиртТС,
			ДанныеИсходныхЗаказов.НаборХарактеристик,
			ИспользоватьХарактеристикиЗаказовНаТС
		);
		
		ТаблицаИсходЗаказов                = ДанныеИсходныхЗаказов.ТаблицаЗаказов;
		СоотвТаблРасстояний                = ДанныеПоТСИПереходам.СоотвТаблРасстояний;
		СоотТипыТС                         = ДанныеПоТСИПереходам.СоотТипыТС;
		СоотРазрешенныеТипыПунктов         = ДанныеПоТСИПереходам.СоотРазрешенныеТипыПунктов;
		ТабТС                              = ДанныеПоТСИПереходам.ТабТС;
		СтоянкиПоТипамТС                   = ДанныеПоТСИПереходам.СтоянкиПоТипамТС;
		ТерминалыПогрузки                  = ДанныеПоТСИПереходам.ТерминалыПогрузки;
		СоотРазрешенныеТСПоХарактеристикам = ДанныеПоТСИПереходам.СоотРазрешенныеТСПоХарактеристикам;
		
		табОграниченияТС = ТабТС.Скопировать();
		
		Если СоотвТаблРасстояний.Получить(АдресДепоВрем) = Неопределено Тогда 
			ТекстОшибки = НСтр("ru = 'Не удалось построить маршруты из гаража к пунктам отправления по заказам.'")
				+ Символы.ПС + НСтр("ru = 'Возможно, не заполнена информация о расстоянии между пунктами назначения.'");
			ПоместитьВоВременноеХранилище(Новый Структура("ТекстОшибки", ТекстОшибки), АдресВрХранилища);
			Возврат;
		КонецЕсли;
		
		// Таблица для накопления FTL заказов. Маршрутизация таких заказов выполняется не в основной итерации алгоритма,
		// а после обхода не FTL заказов в конце маршрутизации.
		ТаблFTLЗаказы = Новый ТаблицаЗначений();
		ТаблFTLЗаказы.Колонки.Добавить("Ссылка",                     Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		ТаблFTLЗаказы.Колонки.Добавить("СтрокаПакета",               Новый ОписаниеТипов("Число, Неопределено"));
		ТаблFTLЗаказы.Колонки.Добавить("Груз",                       Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено"));
		ТаблFTLЗаказы.Колонки.Добавить("Количество",                 Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("ВесБрутто",                  Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("Объем",                      Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("КоличествоУпаковок",         Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("ПунктПогрузки",              Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, СправочникСсылка.уатКластеры_уэ"));
		ТаблFTLЗаказы.Колонки.Добавить("ПунктРазгрузки",             Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, СправочникСсылка.уатКластеры_уэ"));
		ТаблFTLЗаказы.Колонки.Добавить("СтоянкаПунктОтправления",    Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("СтоянкаПунктНазначения",     Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("КатегорияПунктаОтправления", Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		ТаблFTLЗаказы.Колонки.Добавить("КатегорияПунктаНазначения",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		ТаблFTLЗаказы.Колонки.Добавить("Приоритет",                  Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("АдресОтправления",           Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		ТаблFTLЗаказы.Колонки.Добавить("АдресНазначения",            Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		ТаблFTLЗаказы.Колонки.Добавить("Время",                      Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("Расстояние",                 Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("ОтправлениеС",               Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблFTLЗаказы.Колонки.Добавить("ОтправлениеПо",              Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблFTLЗаказы.Колонки.Добавить("ДоставкаС",                  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблFTLЗаказы.Колонки.Добавить("ДоставкаПо",                 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТаблFTLЗаказы.Колонки.Добавить("ЛатОтпр",                    Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("ЛонОтпр",                    Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("ЛатНазн",                    Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("ЛонНазн",                    Новый ОписаниеТипов("Число"));
		ТаблFTLЗаказы.Колонки.Добавить("НаборХарактеристик",         Новый ОписаниеТипов("УникальныйИдентификатор"));
		
		FTL_МаксимальныйВес   = Неопределено;
		FTL_МаксимальныйОбъем = Неопределено;
		
		СоотРазрешенныеТСПоЗаказам = Новый Соответствие();
		
		// Соответствие для хранения отношения виртуального заказа (группа заказов при сжатии или маршрутизируемого пакета
		// в случае маршрутизации заказов с детализацией по грузовым местам или по товарам.
		СоотвГруппЗаказов = Новый Соответствие();
		
		// Таблица, содержащая маршрутизируемые пакеты.
		ТабЗаказы = Новый ТаблицаЗначений();
		ТабЗаказы.Колонки.Добавить("Ссылка",                     Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТабЗаказы.Колонки.Добавить("Груз",                       Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено"));
		ТабЗаказы.Колонки.Добавить("ВесБрутто",                  Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("Объем",                      Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("ПунктПогрузки",              Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, СправочникСсылка.уатКластеры_уэ"));
		ТабЗаказы.Колонки.Добавить("ПунктРазгрузки",             Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, СправочникСсылка.уатКластеры_уэ"));
		ТабЗаказы.Колонки.Добавить("СтоянкаПунктОтправления",    Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("СтоянкаПунктНазначения",     Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("КатегорияПунктаОтправления", Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		ТабЗаказы.Колонки.Добавить("КатегорияПунктаНазначения",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		ТабЗаказы.Колонки.Добавить("Приоритет",                  Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("АдресОтправления",           Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		ТабЗаказы.Колонки.Добавить("АдресНазначения",            Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		ТабЗаказы.Колонки.Добавить("КоличествоУпаковок",         Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("ОтправлениеС",               Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТабЗаказы.Колонки.Добавить("ОтправлениеПо",              Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТабЗаказы.Колонки.Добавить("ДоставкаС",                  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТабЗаказы.Колонки.Добавить("ДоставкаПо",                 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
		ТабЗаказы.Колонки.Добавить("ЗаказСсылка",                Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		ТабЗаказы.Колонки.Добавить("ЛатОтпр",                    Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("ЛонОтпр",                    Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("ЛатНазн",                    Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("ЛонНазн",                    Новый ОписаниеТипов("Число"));
		ТабЗаказы.Колонки.Добавить("НаборХарактеристик",         Новый ОписаниеТипов("УникальныйИдентификатор"));
		
		Если СжиматьЗаказы Тогда 
			// Если необходимо сжатие заказов - выполняется обход заказов и формирование пакетов для маршрутизации.
			Если ПараметрыСжатия.МаксВремя = 0 Тогда 
				ПараметрыСжатия.МаксВремя = Цел(ОграничениеЧасов / 3);
			КонецЕсли;
			Если ПараметрыСжатия.МаксРасстояние = 0 Тогда 
				ПараметрыСжатия.МаксРасстояние = Цел(ОграничениеПоРасстоянию / 3);
			КонецЕсли;
			
			Для Каждого СтрокаЛатОтпр Из ТаблицаИсходЗаказов.Строки Цикл 
				Для Каждого СтрокаЛонОтпр Из СтрокаЛатОтпр.Строки Цикл 
					Для Каждого СтрокаЛатНазн Из СтрокаЛонОтпр.Строки Цикл 
						Для Каждого СтрокаЛонНазн Из СтрокаЛатНазн.Строки Цикл 
							// Определение времени и расстояния между гаражом и пунктом погрузки.
							Если АдресДепоВрем = СтрокаЛонОтпр.ПунктПогрузки Тогда 
								мВремяВПути = 0;
								мРасстояниеВПути = 0;
								
							Иначе 
								Узел1 = СоотвТаблРасстояний.Получить(АдресДепоВрем);
								Если Узел1 = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								Узел2 = Узел1.Получить(СтрокаЛонОтпр.ПунктПогрузки);
								Если Узел2 = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								мВремяВПути = Узел2.Время;
								мРасстояниеВПути = Узел2.Расстояние;
							КонецЕсли;
							
							// Определение времени и расстояния между пунктом погрузки и пунктом разгрузки.
							Если Не СтрокаЛонОтпр.ПунктПогрузки = СтрокаЛонНазн.ПунктРазгрузки Тогда 
								Узел1 = СоотвТаблРасстояний.Получить(СтрокаЛонОтпр.ПунктПогрузки);
								Если Узел1 = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								Узел2 = Узел1.Получить(СтрокаЛонНазн.ПунктРазгрузки);
								Если Узел2 = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								мВремяВПути = СложитьВремяЧЧММ(мВремяВПути, Узел2.Время);
								мРасстояниеВПути = мРасстояниеВПути + Узел2.Расстояние;
							КонецЕсли;
							        
							// Определение времени и расстояния между пунктом разгрузки и гаражом.
							Если Не АдресДепоВрем = СтрокаЛонНазн.ПунктРазгрузки Тогда 
								Узел1 = СоотвТаблРасстояний.Получить(СтрокаЛонНазн.ПунктРазгрузки);
								Если Узел1 = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								Узел2 = Узел1.Получить(АдресДепоВрем);
								Если Узел2 = Неопределено Тогда 
									Продолжить;
								КонецЕсли;
								мВремяВПути = СложитьВремяЧЧММ(мВремяВПути, Узел2.Время);
								мРасстояниеВПути = мРасстояниеВПути + Узел2.Расстояние;
							КонецЕсли;
							
							Для Каждого ВыборкаСсылкаПунктаОтправления Из СтрокаЛонНазн.Строки Цикл
								Если ВыборкаСсылкаПунктаОтправления.ДопСтоянкаПунктОтправления > 0 Тогда
									ДопСтоянкаПунктОтправления = ВыборкаСсылкаПунктаОтправления.ДопСтоянкаПунктОтправления;
								Иначе
									СтруктПоиска = Новый Структура("КатегорияПункта, ТипТС", ВыборкаСсылкаПунктаОтправления.КатегорияПунктаОтправления, Неопределено);
									СтрокиСтоянкаПунктОтправления = СтоянкиПоТипамТС.НайтиСтроки(СтруктПоиска);
									Если СтрокиСтоянкаПунктОтправления.Количество() И СтрокиСтоянкаПунктОтправления[0].Стоянка > 0 Тогда 
										ДопСтоянкаПунктОтправления = СтрокиСтоянкаПунктОтправления[0].Стоянка;
									Иначе 
										ДопСтоянкаПунктОтправления = 0;
									КонецЕсли;
								КонецЕсли;
								
								Для Каждого ВыборкаСсылкаПунктаНазначения Из ВыборкаСсылкаПунктаОтправления.Строки Цикл
									Если ВыборкаСсылкаПунктаНазначения.ДопСтоянкаПунктНазначения > 0 Тогда
										ДопСтоянкаПунктНазначения = ВыборкаСсылкаПунктаОтправления.ДопСтоянкаПунктНазначения;
									Иначе 
										СтруктПоиска = Новый Структура("КатегорияПункта, ТипТС", ВыборкаСсылкаПунктаНазначения.КатегорияПунктаНазначения, Неопределено);
										СтрокиСтоянкаПунктНазначения = СтоянкиПоТипамТС.НайтиСтроки(СтруктПоиска);
										Если СтрокиСтоянкаПунктНазначения.Количество() И СтрокиСтоянкаПунктНазначения[0].Стоянка > 0 Тогда 
											ДопСтоянкаПунктНазначения = СтрокиСтоянкаПунктНазначения[0].Стоянка;
										Иначе 
											ДопСтоянкаПунктНазначения = 0;
										КонецЕсли;
									КонецЕсли;
									
									Для Каждого СтрокаНабор Из ВыборкаСсылкаПунктаНазначения.Строки Цикл 
										// Определение состава группы заказов, входящих в одну маршрутизируеую группу.
										ВсегоВес   = 0;
										ВсегоОбъем = 0;
										СтоянкаПО  = 0;
										СтоянкаПН  = 0;
										мПриоритет = 0;
										мУпаковок  = 0;
										
										ТекОтправлениеС  = '00010101000000';
										ТекОтправлениеПо = '00010101235959';
										ТекДоставкаС     = '00010101000000';
										ТекДоставкаПо    = '00010101235959';
										
										ДлительностьОкнаОтправления = 0;
										ДлительностьОкнаНазначения  = 0;
										
										мсвВложенныеЗаказы = Новый Массив();
										
										Для Каждого ВыборкаЗаказы Из СтрокаНабор.Строки Цикл 
											Если ВыборкаЗаказы.FTL Тогда 
												FTL_МаксимальныйВес   = ?(FTL_МаксимальныйВес=Неопределено, ВыборкаЗаказы.ВесБрутто, Макс(FTL_МаксимальныйВес, ВыборкаЗаказы.ВесБрутто));
												FTL_МаксимальныйОбъем = ?(FTL_МаксимальныйОбъем=Неопределено, ВыборкаЗаказы.Объем, Макс(FTL_МаксимальныйОбъем, ВыборкаЗаказы.Объем));
												
												НовСтр = ТаблFTLЗаказы.Добавить();
												ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаказы);
												
												УстановитьРазрешенныеТСЗаказов(СоотРазрешенныеТСПоЗаказам, СоотТипыТС, СоотРазрешенныеТипыПунктов,
														ВыборкаЗаказы.Ссылка, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения);
												
												Продолжить;
											КонецЕсли;
											
											Если УчитыватьОкнаПоЗаказам Тогда 
												Если мсвВложенныеЗаказы.Количество() = 0 Тогда 
													ТекОтправлениеС  = ВыборкаЗаказы.ОтправлениеС;
													ТекОтправлениеПо = ВыборкаЗаказы.ОтправлениеПо;
													
													ТекДоставкаС  = ВыборкаЗаказы.ДоставкаС;
													ТекДоставкаПо = ВыборкаЗаказы.ДоставкаПо;
													
													Если ТекОтправлениеС > ТекОтправлениеПо Тогда 
														ДлительностьОкнаОтправления = (ТекОтправлениеС - ТекОтправлениеПо) / 3600;
													Иначе 
														ДлительностьОкнаОтправления = (ТекОтправлениеПо - ТекОтправлениеС) / 3600;
													КонецЕсли;
													
													Если ТекДоставкаС > ТекДоставкаПо Тогда 
														ДлительностьОкнаНазначения = (ТекДоставкаС - ТекДоставкаПо) / 3600;
													Иначе 
														ДлительностьОкнаНазначения = (ТекДоставкаПо - ТекДоставкаС) / 3600;
													КонецЕсли;
													
												Иначе 
													// Проверка на пересечение окна по заказу и текущего окна группы.
													Если Не (уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(ВыборкаЗаказы.ОтправлениеС, ТекОтправлениеС, ТекОтправлениеПо)
															Или уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(ВыборкаЗаказы.ОтправлениеПо, ТекОтправлениеС, ТекОтправлениеПо)) Тогда 
														ДлительностьОкнаОтправления = -1;
														
													Иначе 
														Если Не (ТекОтправлениеС <= ТекОтправлениеПо И ВыборкаЗаказы.ОтправлениеС > ВыборкаЗаказы.ОтправлениеПо) Тогда 
															ТекОтправлениеС = Макс(ТекОтправлениеС, ВыборкаЗаказы.ОтправлениеС);
														КонецЕсли;
														ТекОтправлениеПо = Мин(ТекОтправлениеПо, ВыборкаЗаказы.ОтправлениеПо);
														
														Если ТекОтправлениеС > ТекОтправлениеПо Тогда 
															ДлительностьОкнаОтправления = (ТекОтправлениеС - ТекОтправлениеПо) / 3600;
														Иначе 
															ДлительностьОкнаОтправления = (ТекОтправлениеПо - ТекОтправлениеС) / 3600;
														КонецЕсли;
													КонецЕсли;
													
													// Проверка на пересечение окна по заказу и текущего окна группы.
													Если Не (уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(ВыборкаЗаказы.ДоставкаС, ТекДоставкаС, ТекДоставкаПо)
															Или уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(ВыборкаЗаказы.ДоставкаПо, ТекДоставкаС, ТекДоставкаПо)) Тогда 
														ДлительностьОкнаНазначения = -1;
														
													Иначе 
														Если Не (ТекДоставкаС <= ТекДоставкаПо И ВыборкаЗаказы.ДоставкаС > ВыборкаЗаказы.ДоставкаПо) Тогда 
															ТекДоставкаС = Макс(ТекДоставкаС, ВыборкаЗаказы.ДоставкаС);
														КонецЕсли;
														ТекДоставкаПо = Мин(ТекДоставкаПо, ВыборкаЗаказы.ДоставкаПо);
														
														Если ТекДоставкаС > ТекДоставкаПо Тогда 
															ДлительностьОкнаНазначения = (ТекДоставкаС - ТекДоставкаПо) / 3600;
														Иначе 
															ДлительностьОкнаНазначения = (ТекДоставкаПо - ТекДоставкаС) / 3600;
														КонецЕсли;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
											
											ОбщВремя = мВремяВПути;
											ОбщВремя = СложитьВремяЧЧММ(ОбщВремя, ДопСтоянкаПунктОтправления);
											ОбщВремя = СложитьВремяЧЧММ(ОбщВремя, ВыборкаЗаказы.СтоянкаПунктОтправления);
											ОбщВремя = СложитьВремяЧЧММ(ОбщВремя, ДопСтоянкаПунктНазначения);
											ОбщВремя = СложитьВремяЧЧММ(ОбщВремя, ВыборкаЗаказы.СтоянкаПунктНазначения);
											
											Если (МаксимальноеКоличествоЗаказовТС = 0 Или мсвВложенныеЗаказы.Количество() <= МаксимальноеКоличествоЗаказовТС)
													И (ПараметрыСжатия.МаксВремя = 0 Или ОбщВремя <= ПараметрыСжатия.МаксВремя)
													И (ПараметрыСжатия.МаксРасстояние = 0 Или мРасстояниеВПути <= ПараметрыСжатия.МаксРасстояние)
													И (ПараметрыСжатия.МаксВес = 0 Или ВсегоВес <= ПараметрыСжатия.МаксВес)
													И (ПараметрыСжатия.МаксОбъем = 0 Или ВсегоОбъем <= ПараметрыСжатия.МаксОбъем)
													И (ПараметрыСжатия.МаксУпак = 0 Или мУпаковок <= ПараметрыСжатия.МаксУпак)
													И ДлительностьОкнаОтправления >= 0 И ДлительностьОкнаНазначения >=0 Тогда 
												мсвВложенныеЗаказы.Добавить(Новый Структура("Заказ, Пакет, АдресОтправления, АдресНазначения, ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн",
													ВыборкаЗаказы.Ссылка, ВыборкаЗаказы.СтрокаПакета, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения,
													ВыборкаЗаказы.ЛатОтпр, ВыборкаЗаказы.ЛонОтпр, ВыборкаЗаказы.ЛатНазн, ВыборкаЗаказы.ЛонНазн));
												ВсегоВес   = ВсегоВес + ВыборкаЗаказы.ВесБрутто;
												ВсегоОбъем = ВсегоОбъем + ВыборкаЗаказы.Объем;
												мУпаковок  = мУпаковок + ВыборкаЗаказы.КоличествоУпаковок;
												мПриоритет = ?(мПриоритет < ВыборкаЗаказы.Приоритет, ВыборкаЗаказы.Приоритет, мПриоритет);
												
												СтоянкаПО = СложитьВремяЧЧММ(СтоянкаПО, ВыборкаЗаказы.СтоянкаПунктОтправления);
												СтоянкаПН = СложитьВремяЧЧММ(СтоянкаПН, ВыборкаЗаказы.СтоянкаПунктНазначения);
												
											Иначе 
												GUIDГруппы = Новый УникальныйИдентификатор();
												НовСтр = ТабЗаказы.Добавить();
												НовСтр.Ссылка                     = GUIDГруппы;
												НовСтр.ВесБрутто                  = ВсегоВес;
												НовСтр.Объем                      = ВсегоОбъем;
												НовСтр.ПунктПогрузки              = СтрокаЛонОтпр.ПунктПогрузки;
												НовСтр.ПунктРазгрузки             = СтрокаЛонНазн.ПунктРазгрузки;
												НовСтр.СтоянкаПунктОтправления    = СтоянкаПО;
												НовСтр.СтоянкаПунктНазначения     = СтоянкаПН;
												НовСтр.КатегорияПунктаОтправления = ВыборкаСсылкаПунктаОтправления.КатегорияПунктаОтправления;
												НовСтр.КатегорияПунктаНазначения  = ВыборкаСсылкаПунктаНазначения.КатегорияПунктаНазначения;
												НовСтр.Приоритет                  = мПриоритет;
												НовСтр.АдресОтправления           = ВыборкаЗаказы.АдресОтправления;
												НовСтр.АдресНазначения            = ВыборкаЗаказы.АдресНазначения;
												НовСтр.КоличествоУпаковок         = мУпаковок;
												НовСтр.ОтправлениеС               = ТекОтправлениеС;
												НовСтр.ОтправлениеПо              = ТекОтправлениеПо;
												НовСтр.ДоставкаС                  = ТекДоставкаС;
												НовСтр.ДоставкаПо                 = ТекДоставкаПо;
												НовСтр.ЛатОтпр                    = ВыборкаЗаказы.ЛатОтпр;
												НовСтр.ЛонОтпр                    = ВыборкаЗаказы.ЛонОтпр;
												НовСтр.ЛатНазн                    = ВыборкаЗаказы.ЛатНазн;
												НовСтр.ЛонНазн                    = ВыборкаЗаказы.ЛонНазн;
												НовСтр.НаборХарактеристик         = СтрокаНабор.НаборХарактеристик;
												
												СоотвГруппЗаказов.Вставить(GUIDГруппы, мсвВложенныеЗаказы);
												
												Если УчитыватьРазрешенныеТипыТС Тогда 
													УстановитьРазрешенныеТСЗаказов(СоотРазрешенныеТСПоЗаказам, СоотТипыТС, СоотРазрешенныеТипыПунктов,
														GUIDГруппы, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения);
												КонецЕсли;
												
												ВсегоВес   = ВыборкаЗаказы.ВесБрутто;
												ВсегоОбъем = ВыборкаЗаказы.Объем;
												СтоянкаПО  = ВыборкаЗаказы.СтоянкаПунктОтправления;
												СтоянкаПН  = ВыборкаЗаказы.СтоянкаПунктНазначения;
												мсвВложенныеЗаказы = Новый Массив();
												мсвВложенныеЗаказы.Добавить(Новый Структура("Заказ, Пакет, АдресОтправления, АдресНазначения, ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн",
													ВыборкаЗаказы.Ссылка, ВыборкаЗаказы.СтрокаПакета, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения,
													ВыборкаЗаказы.ЛатОтпр, ВыборкаЗаказы.ЛонОтпр, ВыборкаЗаказы.ЛатНазн, ВыборкаЗаказы.ЛонНазн));
												мПриоритет = ВыборкаЗаказы.Приоритет;
												мУпаковок  = ВыборкаЗаказы.КоличествоУпаковок;
												
												Если УчитыватьОкнаПоЗаказам Тогда 
													ТекОтправлениеС  = ВыборкаЗаказы.ОтправлениеС;
													ТекОтправлениеПо = ВыборкаЗаказы.ОтправлениеПо;
													
													ТекДоставкаС  = ВыборкаЗаказы.ДоставкаС;
													ТекДоставкаПо = ВыборкаЗаказы.ДоставкаПо;
													
													Если ТекОтправлениеС > ТекОтправлениеПо Тогда 
														ДлительностьОкнаОтправления = (ТекОтправлениеС - ТекОтправлениеПо) / 3600;
													Иначе 
														ДлительностьОкнаОтправления = (ТекОтправлениеПо - ТекОтправлениеС) / 3600;
													КонецЕсли;
													
													Если ТекДоставкаС > ТекДоставкаПо Тогда 
														ДлительностьОкнаНазначения = (ТекДоставкаС - ТекДоставкаПо) / 3600;
													Иначе 
														ДлительностьОкнаНазначения = (ТекДоставкаПо - ТекДоставкаС) / 3600;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
										
										Если мсвВложенныеЗаказы.Количество() Тогда 
											GUIDГруппы = Новый УникальныйИдентификатор();
											НовСтр = ТабЗаказы.Добавить();
											НовСтр.Ссылка                     = GUIDГруппы;
											НовСтр.ВесБрутто                  = ВсегоВес;
											НовСтр.Объем                      = ВсегоОбъем;
											НовСтр.ПунктПогрузки              = СтрокаЛонОтпр.ПунктПогрузки;
											НовСтр.ПунктРазгрузки             = СтрокаЛонНазн.ПунктРазгрузки;
											НовСтр.СтоянкаПунктОтправления    = СтоянкаПО;
											НовСтр.СтоянкаПунктНазначения     = СтоянкаПН;
											НовСтр.КатегорияПунктаОтправления = ВыборкаСсылкаПунктаОтправления.КатегорияПунктаОтправления;
											НовСтр.КатегорияПунктаНазначения  = ВыборкаСсылкаПунктаНазначения.КатегорияПунктаНазначения;
											НовСтр.Приоритет                  = мПриоритет;
											НовСтр.АдресОтправления           = мсвВложенныеЗаказы[0].АдресОтправления;
											НовСтр.АдресНазначения            = мсвВложенныеЗаказы[0].АдресНазначения;
											НовСтр.КоличествоУпаковок         = мУпаковок;
											НовСтр.ОтправлениеС               = ТекОтправлениеС;
											НовСтр.ОтправлениеПо              = ТекОтправлениеПо;
											НовСтр.ДоставкаС                  = ТекДоставкаС;
											НовСтр.ДоставкаПо                 = ТекДоставкаПо;
											НовСтр.ЛатОтпр                    = мсвВложенныеЗаказы[0].ЛатОтпр;
											НовСтр.ЛонОтпр                    = мсвВложенныеЗаказы[0].ЛонОтпр;
											НовСтр.ЛатНазн                    = мсвВложенныеЗаказы[0].ЛатНазн;
											НовСтр.ЛонНазн                    = мсвВложенныеЗаказы[0].ЛонНазн;
											НовСтр.НаборХарактеристик         = СтрокаНабор.НаборХарактеристик;
											
											СоотвГруппЗаказов.Вставить(GUIDГруппы, мсвВложенныеЗаказы);
											
											Если УчитыватьРазрешенныеТипыТС Тогда 
												УстановитьРазрешенныеТСЗаказов(СоотРазрешенныеТСПоЗаказам, СоотТипыТС, СоотРазрешенныеТипыПунктов,
													GUIDГруппы, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения);
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		Иначе 
			// Если сжатие не используется - в таблицу заказов переносится:
			// если заказ с детализацией "по заказу в целом" - каждый заказ по отдельности,
			// если заказ с детализацией "по товарам" или "по грузовым местам" - каждая строка ТЧ по заказу.
			Для Каждого ВыборкаЗаказы Из ТаблицаИсходЗаказов Цикл 
				Если ВыборкаЗаказы.FTL Тогда
					FTL_МаксимальныйВес   = ?(FTL_МаксимальныйВес = Неопределено, ВыборкаЗаказы.ВесБрутто, Макс(FTL_МаксимальныйВес, ВыборкаЗаказы.ВесБрутто));
					FTL_МаксимальныйОбъем = ?(FTL_МаксимальныйОбъем = Неопределено, ВыборкаЗаказы.Объем, Макс(FTL_МаксимальныйОбъем, ВыборкаЗаказы.Объем));
					
					НовСтр = ТаблFTLЗаказы.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаказы);
					
					УстановитьРазрешенныеТСЗаказов(СоотРазрешенныеТСПоЗаказам, СоотТипыТС, СоотРазрешенныеТипыПунктов,
						ВыборкаЗаказы.Ссылка, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения);
					
				Иначе 
					мсвЗаказы = Новый Массив();
					мсвЗаказы.Добавить(Новый Структура("Заказ, Пакет, АдресОтправления, АдресНазначения, ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн", 
						ВыборкаЗаказы.Ссылка, ВыборкаЗаказы.СтрокаПакета, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения,
						ВыборкаЗаказы.ЛатОтпр, ВыборкаЗаказы.ЛонОтпр, ВыборкаЗаказы.ЛатНазн, ВыборкаЗаказы.ЛонНазн));
					
					GUIDПакета = Новый УникальныйИдентификатор();
					СоотвГруппЗаказов.Вставить(GUIDПакета, мсвЗаказы);
					
					Если УчитыватьРазрешенныеТипыТС Тогда 
						УстановитьРазрешенныеТСЗаказов(СоотРазрешенныеТСПоЗаказам, СоотТипыТС, СоотРазрешенныеТипыПунктов,
							GUIDПакета, ВыборкаЗаказы.АдресОтправления, ВыборкаЗаказы.АдресНазначения);
					КонецЕсли;
					
					НовСтр = ТабЗаказы.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаказы,, "Ссылка");
					НовСтр.Ссылка = GUIDПакета;
					НовСтр.ЗаказСсылка = ВыборкаЗаказы.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТабЗаказы.Индексы.Добавить("Ссылка");
		
		// Подготовка матрицы выигрышей.
		МатрицаВыигрышей = Новый ТаблицаЗначений();
		МатрицаВыигрышей.Колонки.Добавить("ЗаказА",             Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, УникальныйИдентификатор"));
		МатрицаВыигрышей.Колонки.Добавить("ЗаказБ",             Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, УникальныйИдентификатор"));
		МатрицаВыигрышей.Колонки.Добавить("Выигрыш",            Новый ОписаниеТипов("Число"));
		МатрицаВыигрышей.Колонки.Добавить("Приоритет",          Новый ОписаниеТипов("Число"));
		МатрицаВыигрышей.Колонки.Добавить("ПриоритетПоАдресам", Новый ОписаниеТипов("Число"));
		МатрицаВыигрышей.Колонки.Добавить("ЗаказСсылка",        Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		
		мВсегоЗаказов = ТабЗаказы.Количество();
		Для Сч1 = -1 По мВсегоЗаказов - 2 Цикл 
			Для Сч2 = Сч1 + 1 По мВсегоЗаказов - 1 Цикл 
				мВыигрыш = 0;
				
				// Время/расстояние от базы до заказа А.
				// +d0i.
				Пункт1 = АдресДепоВрем;
				Пункт2 = ?(Сч1 = -1, АдресДепоВрем, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].ПунктПогрузки, ТабЗаказы[Сч1].ПунктРазгрузки));
				Адрес1 = АдресДепо;
				Адрес2 = ?(Сч1 = -1, АдресДепо, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].АдресОтправления, ТабЗаказы[Сч1].АдресНазначения));
				
				ЛатОтпр = ШиротаДепо;
				ЛонОтпр = ДолготаДепо;
				ЛатНазн = ?(Сч1 = -1, ШиротаДепо, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].ЛатОтпр, ТабЗаказы[Сч1].ЛатНазн));
				ЛонНазн = ?(Сч1 = -1, ДолготаДепо, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].ЛонОтпр, ТабЗаказы[Сч1].ЛонНазн));
				
				Если Пункт1 = Пункт2 Тогда 
					Если Адрес1 = Адрес2 Тогда 
						мВыигрыш = 0;
					Иначе 
						ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн);
						мВыигрыш = ?(РежимОптимизации = 0, ДанныеПоКластеру.Время, ДанныеПоКластеру.Расстояние);
					КонецЕсли;
					
				Иначе 
					Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
					Если Узел1 = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					Узел2 = Узел1.Получить(Пункт2);
					Если Узел2 = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					мВыигрыш = ?(РежимОптимизации = 0, Узел2.Время, Узел2.Расстояние);
				КонецЕсли;
				
				// Время/расстояние от базы до заказа Б.
				// +d0j.
				Пункт1 = АдресДепоВрем;
				Пункт2 = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].ПунктПогрузки, ТабЗаказы[Сч2].ПунктРазгрузки);
				Адрес1 = АдресДепо;
				Адрес2 = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].АдресОтправления, ТабЗаказы[Сч2].АдресНазначения);
				
				ЛатОтпр = ШиротаДепо;
				ЛонОтпр = ДолготаДепо;
				ЛатНазн = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].ЛатОтпр, ТабЗаказы[Сч2].ЛатНазн);
				ЛонНазн = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].ЛонОтпр, ТабЗаказы[Сч2].ЛонНазн);
				
				Если Пункт1 = Пункт2 Тогда 
					Если Не Адрес1 = Адрес2 Тогда 
						ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн);
						Если РежимОптимизации = 0 Тогда 
							мВыигрыш = СложитьВремяЧЧММ(мВыигрыш, ДанныеПоКластеру.Время);
						Иначе 
							мВыигрыш = мВыигрыш + ДанныеПоКластеру.Расстояние;
						КонецЕсли;
					КонецЕсли;
					
				Иначе 
					Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
					Если Узел1 = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					Узел2 = Узел1.Получить(Пункт2);
					Если Узел2 = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					Если РежимОптимизации = 0 Тогда 
						мВыигрыш = СложитьВремяЧЧММ(мВыигрыш, Узел2.Время);
					Иначе 
						мВыигрыш = мВыигрыш + Узел2.Расстояние;
					КонецЕсли;
				КонецЕсли;
				
				// Время/расстояние между заказами А и Б.
				// -dij.
				Пункт1 = ?(Сч1 = -1, АдресДепоВрем, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].ПунктПогрузки, ТабЗаказы[Сч1].ПунктРазгрузки));
				Пункт2 = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].ПунктПогрузки, ТабЗаказы[Сч2].ПунктРазгрузки);
				Адрес1 = ?(Сч1 = -1, АдресДепо, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].АдресОтправления, ТабЗаказы[Сч1].АдресНазначения));
				Адрес2 = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].АдресОтправления, ТабЗаказы[Сч2].АдресНазначения);
				
				ЛатОтпр = ?(Сч1 = -1, ШиротаДепо, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].ЛатОтпр, ТабЗаказы[Сч1].ЛатНазн));
				ЛонОтпр = ?(Сч1 = -1, ДолготаДепо, ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч1].ЛонОтпр, ТабЗаказы[Сч1].ЛонНазн));
				ЛатНазн = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].ЛатОтпр, ТабЗаказы[Сч2].ЛатНазн);
				ЛонНазн = ?(ФормироватьСборныеМаршруты, ТабЗаказы[Сч2].ЛонОтпр, ТабЗаказы[Сч2].ЛонНазн);
				
				Если Пункт1 = Пункт2 Тогда 
					Если Не Адрес1 = Адрес2 Тогда 
						ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн);
						Если РежимОптимизации = 0 Тогда 
							мВыигрыш = СложитьВремяЧЧММ(мВыигрыш, -ДанныеПоКластеру.Время);
						Иначе 
							мВыигрыш = мВыигрыш - ДанныеПоКластеру.Расстояние;
						КонецЕсли;
					КонецЕсли;
					
				Иначе 
					Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
					Если Узел1 = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					Узел2 = Узел1.Получить(Пункт2);
					Если Узел2 = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					Если РежимОптимизации = 0 Тогда 
						мВыигрыш = СложитьВремяЧЧММ(мВыигрыш, -Узел2.Время);
					Иначе 
						мВыигрыш = мВыигрыш - Узел2.Расстояние;
					КонецЕсли;
				КонецЕсли;
				
				Если мВыигрыш < 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				НовСтрока = МатрицаВыигрышей.Добавить();                     
				НовСтрока.ЗаказА    = ?(Сч1 = -1, Документы.уатЗаказГрузоотправителя.ПустаяСсылка(), ТабЗаказы[Сч1].Ссылка);
				НовСтрока.ЗаказБ    = ТабЗаказы[Сч2].Ссылка;
				НовСтрока.Выигрыш   = мВыигрыш;
				НовСтрока.Приоритет = ?(?(Сч1 = -1, 0, ТабЗаказы[Сч1].Приоритет) < ТабЗаказы[Сч2].Приоритет, ТабЗаказы[Сч2].Приоритет, ?(Сч1 = -1, 0, ТабЗаказы[Сч1].Приоритет));
				
				Если Сч1 >= 0 
						И ТабЗаказы[Сч1].АдресОтправления = ТабЗаказы[Сч2].АдресОтправления 
						И ТабЗаказы[Сч1].АдресНазначения = ТабЗаказы[Сч2].АдресНазначения Тогда 
					НовСтрока.ПриоритетПоАдресам = 1;
				КонецЕсли;
				
				Если Сч1 >= 0 И ТабЗаказы[Сч1].ЗаказСсылка = ТабЗаказы[Сч2].ЗаказСсылка Тогда 
					НовСтрока.ЗаказСсылка = ТабЗаказы[Сч1].ЗаказСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Упорядочивание матрицы.
		МатрицаВыигрышей.Сортировать("Выигрыш Убыв, Приоритет Убыв, ПриоритетПоАдресам Убыв, ЗаказСсылка Убыв");
		
		// Перменная "пулы" хранит результат распределения заказов по ТС.
		пулы = Новый Массив();
		
		// Этап маршрутизации не FTL заказов на собственные и привлеченные ТС.
		Если ТабТС.Строки.Количество() Тогда
			СчТекЭтап = СчТекЭтап + 1;
			ТекстНСТР = НСтр("en='Step %1 / %2 Routing of orders for company and external vehicle.';ru='Этап %1 / %2 Маршрутизация заказов на собственные и привлеченные ТС.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, СчТекЭтап, СчКоличествоЭтапов + Символы.ПС);
			
			ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей(
				АдресВрХранилища, 
				пулы, 
				МатрицаВыигрышей,
				ТабЗаказы,
				ТабТС,
				ОграничениеЧасов,
				ОграничениеПоРасстоянию,
				МаксимальноеЧислоПунктов,
				ТабСкоростей, 
				СоотвТаблРасстояний, 
				АдресДепоВрем,
				АдресДепо,
				ШиротаДепо,
				ДолготаДепо,
				ВремяВыезда,
				ФормироватьСборныеМаршруты,
				Ложь,
				ТекстНСТР,
				УчитыватьОграниченияПоЗагрузкеТС,
				МаксимальноеКоличествоЗаказовТС,
				УчитыватьОкнаПоЗаказам,
				УчитыватьРазрешенныеТипыТС,
				СоотРазрешенныеТСПоЗаказам,
				РежимВремениВыездаИзГаража,
				СоотвГруппЗаказов,
				СтоянкиПоТипамТС,
				УчитыватьОкноПогрузкиТерминалов,
				ТерминалыПогрузки,
				УчитыватьСекцииТранспортныхСредств,
				СмешиватьГрузыВСекциях,
				СоотРазрешенныеТСПоХарактеристикам,
				ИспользоватьХарактеристикиЗаказовНаТС
			);
		КонецЕсли;
		
		// Этап маршрутизации не FTL заказов на виртуальные ТС.
		Если мсвВиртТС.Количество() Тогда 
			// Преобразование массива виртуальных ТС в таблицу значений.
			ТабВиртТС = Новый ТаблицаЗначений();
			ТабВиртТС.Колонки.Добавить("ТС",                      Новый ОписаниеТипов("СправочникСсылка.уатТС"));
			ТабВиртТС.Колонки.Добавить("Прицеп1",                 Новый ОписаниеТипов("СправочникСсылка.уатТС"));
			ТабВиртТС.Колонки.Добавить("Прицеп2",                 Новый ОписаниеТипов("СправочникСсылка.уатТС"));
			ТабВиртТС.Колонки.Добавить("КоличествоВиртуальныхТС", Новый ОписаниеТипов("Число"));
			ТабВиртТС.Колонки.Добавить("ДатаВыездаТС",            Новый ОписаниеТипов("Дата"));
			
			Для Каждого ТекВиртТС Из мсвВиртТС Цикл 
				НовСтрока = ТабВиртТС.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекВиртТС);
			КонецЦикла;
			
			МенеджерВТВирт = Новый МенеджерВременныхТаблиц();
			
			ЗапросВиртТС = Новый Запрос();
			ЗапросВиртТС.МенеджерВременныхТаблиц = МенеджерВТВирт;
			
			// Получение суммарных характеристик сцепки.
			ЗапросВиртТС.УстановитьПараметр("табТСВходная",                                ТабВиртТС);
			ЗапросВиртТС.УстановитьПараметр("ИспользоватьВПриоритетеСобственныйТранспорт", ИспользоватьВПриоритетеСобственныйТранспорт);
			ЗапросВиртТС.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоОбъему", ПонижающийКоэффициентЗагрузкиКузоваПоОбъему / 100);
			ЗапросВиртТС.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоВесу",   ПонижающийКоэффициентЗагрузкиКузоваПоВесу / 100);
			ЗапросВиртТС.УстановитьПараметр("ВозвратВГаражСобственныеТС",                  ВозвратВГаражСобственныеТС);
			ЗапросВиртТС.УстановитьПараметр("ВозвратВГаражПривлеченныеТС",                 ВозвратВГаражПривлеченныеТС);
			ЗапросВиртТС.УстановитьПараметр("ВозвратВГаражВиртуальныеТС",                  ВозвратВГаражВиртуальныеТС);
			
			Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
				ЗапросВиртТС.УстановитьПараметр("КоэфГрузоподъемности", 1000);
			Иначе 
				ЗапросВиртТС.УстановитьПараметр("КоэфГрузоподъемности", 1);
			КонецЕсли;
			
			Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
				ЗапросВиртТС.УстановитьПараметр("КоэфОбъемаКузова", 1000);
			Иначе 
				ЗапросВиртТС.УстановитьПараметр("КоэфОбъемаКузова", 1);
			КонецЕсли;
			
			ЗапросВиртТС.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	табТСВходная.ТС КАК ТС,
			|	табТСВходная.Прицеп1 КАК Прицеп1,
			|	табТСВходная.Прицеп2 КАК Прицеп2,
			|	табТСВходная.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
			|	табТСВходная.ДатаВыездаТС КАК ДатаВыездаТС
			|ПОМЕСТИТЬ ВТ_ТСВходПараметр
			|ИЗ
			|	&табТСВходная КАК табТСВходная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.ТС КАК Справочник.уатТС) КАК ТС,
			|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
			|	ВЫБОР
			|		КОГДА ВТ_ТСВходПараметр.Прицеп2 = ВТ_ТСВходПараметр.Прицеп1
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
			|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп2 КАК Справочник.уатТС)
			|	КОНЕЦ КАК Прицеп2,
			|	ВТ_ТСВходПараметр.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
			|	ВТ_ТСВходПараметр.ДатаВыездаТС КАК ДатаВыездаТС
			|ПОМЕСТИТЬ ВТ_ТСтипизированная
			|ИЗ
			|	ВТ_ТСВходПараметр КАК ВТ_ТСВходПараметр
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_ТСтипизированная.ТС КАК Ссылка,
			|	ВТ_ТСтипизированная.Прицеп1 КАК Прицеп1,
			|	ВТ_ТСтипизированная.Прицеп2 КАК Прицеп2,
			|	(ВТ_ТСтипизированная.ТС.Модель.Грузоподъемность * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности) * &ПонижающийКоэффициентЗагрузкиКузоваПоВесу КАК Грузоподъемность,
			|	(ВТ_ТСтипизированная.ТС.Модель.ОбъемКузова * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова) * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему КАК ОбъемКузова,
			|	ВТ_ТСтипизированная.ТС.Модель.МинимальныйВесГруза * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальныйВесГруза, 0) * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальныйВесГруза, 0) * &КоэфГрузоподъемности КАК МинимальныйВесГруза,
			|	ВТ_ТСтипизированная.ТС.Модель.МинимальныйОбъемГруза * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальныйОбъемГруза, 0) * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальныйОбъемГруза, 0) * &КоэфОбъемаКузова КАК МинимальныйОбъемГруза,
			|	ВТ_ТСтипизированная.ТС.Модель.МинимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальноеКоличествоУпаковок, 0) КАК МинимальноеКоличествоУпаковок,
			|	ВТ_ТСтипизированная.ТС.Модель.МаксимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МаксимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МаксимальноеКоличествоУпаковок, 0) КАК МаксимальноеКоличествоУпаковок,
			|	ВТ_ТСтипизированная.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
			|	ВЫБОР
			|		КОГДА ВТ_ТСтипизированная.ТС.ТипТС = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
			|			ТОГДА ВТ_ТСтипизированная.ТС.Модель.ТипТС
			|		ИНАЧЕ ВТ_ТСтипизированная.ТС.ТипТС
			|	КОНЕЦ КАК ТипТС,
			|	ВЫБОР
			|		КОГДА &ИспользоватьВПриоритетеСобственныйТранспорт
			|				И ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Приоритет,
			|	ВТ_ТСтипизированная.ДатаВыездаТС КАК ДатаВыездаТС,
			|	ВЫБОР
			|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
			|				И &ВозвратВГаражСобственныеТС
			|			ТОГДА ИСТИНА
			|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
			|				И &ВозвратВГаражПривлеченныеТС
			|			ТОГДА ИСТИНА
			|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
			|				И &ВозвратВГаражВиртуальныеТС
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ВозвратВГараж
			|ПОМЕСТИТЬ ВТ_ТС_Подготовка
			|ИЗ
			|	ВТ_ТСтипизированная КАК ВТ_ТСтипизированная";
			
			ЗапросВиртТС.Выполнить();
			
			// Получение максимальных характеристик виртуальных ТС.
			ЗапросВиртТС.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ТранспортныеСредства.Грузоподъемность) КАК МаксГрузоподъемность,
			|	МАКСИМУМ(ТранспортныеСредства.ОбъемКузова) КАК МаксОбъемКузова
			|ИЗ
			|	ВТ_ТС_Подготовка КАК ТранспортныеСредства";
			
			ВыборкаВиртТС = ЗапросВиртТС.Выполнить().Выбрать();
			
			Если ВыборкаВиртТС.Следующий() Тогда 
				МаксГрузоподъемностьВиртТС = ВыборкаВиртТС.МаксГрузоподъемность;
				МаксОбъемКузоваВиртТС      = ВыборкаВиртТС.МаксОбъемКузова;
			Иначе 
				МаксГрузоподъемностьВиртТС = 0;
				МаксОбъемКузоваВиртТС      = 0;
			КонецЕсли;
			
			ЗапросВиртТС.УстановитьПараметр("МаксГрузоподъемность", МаксГрузоподъемностьВиртТС);
			ЗапросВиртТС.УстановитьПараметр("МаксОбъемКузова",      МаксОбъемКузоваВиртТС);
			ЗапросВиртТС.УстановитьПараметр("УчитыватьСекцииТС",    УчитыватьСекцииТранспортныхСредств);
			
			ЗапросВиртТС.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫРАЗИТЬ(ТранспортныеСредства.Ссылка КАК Справочник.уатТС) КАК Ссылка,
			|	ВЫРАЗИТЬ(ТранспортныеСредства.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
			|	ВЫРАЗИТЬ(ТранспортныеСредства.Прицеп2 КАК Справочник.уатТС) КАК Прицеп2,
			|	ТранспортныеСредства.Грузоподъемность КАК Грузоподъемность,
			|	ТранспортныеСредства.ОбъемКузова КАК ОбъемКузова,
			|	(ВЫБОР
			|		КОГДА &МаксГрузоподъемность = 0
			|			ТОГДА 0
			|		ИНАЧЕ ТранспортныеСредства.Грузоподъемность / &МаксГрузоподъемность
			|	КОНЕЦ + ВЫБОР
			|		КОГДА &МаксОбъемКузова = 0
			|			ТОГДА 0
			|		ИНАЧЕ ТранспортныеСредства.ОбъемКузова / &МаксОбъемКузова
			|	КОНЕЦ) / 2 КАК Порядок,
			|	ТранспортныеСредства.МинимальныйВесГруза КАК МинимальныйВесГруза,
			|	ТранспортныеСредства.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
			|	ТранспортныеСредства.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
			|	ТранспортныеСредства.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
			|	ТранспортныеСредства.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
			|	ТранспортныеСредства.ТипТС КАК ТипТС,
			|	ТранспортныеСредства.Приоритет КАК Приоритет,
			|	ТранспортныеСредства.ДатаВыездаТС КАК ДатаВыездаТС,
			|	ТранспортныеСредства.ВозвратВГараж КАК ВозвратВГараж
			|ПОМЕСТИТЬ ВТ_ТС
			|ИЗ
			|	ВТ_ТС_Подготовка КАК ТранспортныеСредства
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабТССекции.Ссылка КАК Ссылка,
			|	ТабТССекции.Грузоподъемность КАК Грузоподъемность,
			|	ТабТССекции.ОбъемКузова КАК ОбъемКузова,
			|	ТабТССекции.Секция КАК Секция,
			|	ТабТССекции.Порядок КАК Порядок,
			|	ТабТССекции.МинимальныйВесГруза КАК МинимальныйВесГруза,
			|	ТабТССекции.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
			|	ТабТССекции.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
			|	ТабТССекции.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
			|	ТабТССекции.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
			|	ТабТССекции.ТипТС КАК ТипТС,
			|	ТабТССекции.Приоритет КАК Приоритет,
			|	ТабТССекции.ДатаВыездаТС КАК ДатаВыездаТС,
			|	ТабТССекции.ВозвратВГараж КАК ВозвратВГараж
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_ТС1.Ссылка КАК Ссылка,
			|		ВТ_ТС1.Грузоподъемность КАК Грузоподъемность,
			|		ВЫБОР
			|			КОГДА &УчитыватьСекцииТС
			|				ТОГДА ЕСТЬNULL(СекцииТранспортныхСредств1.Объем, ВТ_ТС1.Ссылка.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему
			|			ИНАЧЕ ВТ_ТС1.ОбъемКузова
			|		КОНЕЦ КАК ОбъемКузова,
			|		ЕСТЬNULL(СекцииТранспортныхСредств1.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)) КАК Секция,
			|		ВЫБОР
			|			КОГДА &УчитыватьСекцииТС
			|				ТОГДА ЕСТЬNULL(СекцииТранспортныхСредств1.Объем, ВТ_ТС1.Ссылка.Модель.ОбъемКузова)
			|			ИНАЧЕ ВТ_ТС1.Порядок
			|		КОНЕЦ КАК Порядок,
			|		ВТ_ТС1.МинимальныйВесГруза КАК МинимальныйВесГруза,
			|		ВТ_ТС1.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
			|		ВТ_ТС1.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
			|		ВТ_ТС1.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
			|		ВТ_ТС1.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
			|		ВТ_ТС1.ТипТС КАК ТипТС,
			|		ВТ_ТС1.Приоритет КАК Приоритет,
			|		ВТ_ТС1.ДатаВыездаТС КАК ДатаВыездаТС,
			|		ВТ_ТС1.ВозвратВГараж КАК ВозвратВГараж
			|	ИЗ
			|		ВТ_ТС КАК ВТ_ТС1
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств1
			|			ПО (&УчитыватьСекцииТС)
			|				И (СекцииТранспортныхСредств1.Владелец = ВТ_ТС1.Ссылка)
			|				И (НЕ СекцииТранспортныхСредств1.ПометкаУдаления)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВТ_ТС2.Ссылка,
			|		ВТ_ТС2.Грузоподъемность,
			|		ЕСТЬNULL(СекцииТранспортныхСредств2.Объем, ВТ_ТС2.Прицеп1.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
			|		ЕСТЬNULL(СекцииТранспортныхСредств2.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)),
			|		ЕСТЬNULL(СекцииТранспортныхСредств2.Объем, ВТ_ТС2.Прицеп1.Модель.ОбъемКузова),
			|		ВТ_ТС2.МинимальныйВесГруза,
			|		ВТ_ТС2.МинимальныйОбъемГруза,
			|		ВТ_ТС2.МинимальноеКоличествоУпаковок,
			|		ВТ_ТС2.МаксимальноеКоличествоУпаковок,
			|		ВТ_ТС2.КоличествоВиртуальныхТС,
			|		ВТ_ТС2.ТипТС,
			|		ВТ_ТС2.Приоритет,
			|		ВТ_ТС2.ДатаВыездаТС,
			|		ВТ_ТС2.ВозвратВГараж
			|	ИЗ
			|		ВТ_ТС КАК ВТ_ТС2
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств2
			|			ПО (СекцииТранспортныхСредств2.Владелец = ВТ_ТС2.Прицеп1)
			|				И (НЕ СекцииТранспортныхСредств2.ПометкаУдаления)
			|	ГДЕ
			|		&УчитыватьСекцииТС
			|		И ВТ_ТС2.Прицеп1.Наименование ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВТ_ТС3.Ссылка,
			|		ВТ_ТС3.Грузоподъемность,
			|		ЕСТЬNULL(СекцииТранспортныхСредств3.Объем, ВТ_ТС3.Прицеп2.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
			|		ЕСТЬNULL(СекцииТранспортныхСредств3.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)),
			|		ЕСТЬNULL(СекцииТранспортныхСредств3.Объем, ВТ_ТС3.Прицеп2.Модель.ОбъемКузова),
			|		ВТ_ТС3.МинимальныйВесГруза,
			|		ВТ_ТС3.МинимальныйОбъемГруза,
			|		ВТ_ТС3.МинимальноеКоличествоУпаковок,
			|		ВТ_ТС3.МаксимальноеКоличествоУпаковок,
			|		ВТ_ТС3.КоличествоВиртуальныхТС,
			|		ВТ_ТС3.ТипТС,
			|		ВТ_ТС3.Приоритет,
			|		ВТ_ТС3.ДатаВыездаТС,
			|		ВТ_ТС3.ВозвратВГараж
			|	ИЗ
			|		ВТ_ТС КАК ВТ_ТС3
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств3
			|			ПО (СекцииТранспортныхСредств3.Владелец = ВТ_ТС3.Прицеп2)
			|				И (НЕ СекцииТранспортныхСредств3.ПометкаУдаления)
			|	ГДЕ
			|		&УчитыватьСекцииТС
			|		И ВТ_ТС3.Прицеп2.Наименование ЕСТЬ НЕ NULL ) КАК ТабТССекции
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет УБЫВ,
			|	Порядок
			|ИТОГИ
			|	МАКСИМУМ(Грузоподъемность),
			|	СУММА(ОбъемКузова),
			|	МИНИМУМ(Порядок),
			|	МАКСИМУМ(МинимальныйВесГруза),
			|	МАКСИМУМ(МинимальныйОбъемГруза),
			|	МАКСИМУМ(МинимальноеКоличествоУпаковок),
			|	МАКСИМУМ(МаксимальноеКоличествоУпаковок),
			|	МАКСИМУМ(КоличествоВиртуальныхТС),
			|	МАКСИМУМ(ТипТС),
			|	МАКСИМУМ(Приоритет),
			|	МАКСИМУМ(ДатаВыездаТС),
			|	МАКСИМУМ(ВозвратВГараж)
			|ПО
			|	Ссылка";
			
			ТабВиртТСДляМаршрутизации = Новый ДеревоЗначений();
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("Ссылка",                         Новый ОписаниеТипов("СправочникСсылка.уатТС"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("Грузоподъемность",               Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("ОбъемКузова",                    Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("Секция",                         Новый ОписаниеТипов("СправочникСсылка.уатСекцииТС"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("Порядок",                        Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("МинимальныйВесГруза",            Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("МинимальныйОбъемГруза",          Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("МинимальноеКоличествоУпаковок",  Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("МаксимальноеКоличествоУпаковок", Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("ТипТС",                          Новый ОписаниеТипов("СправочникСсылка.уатТипыТС"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("Приоритет",                      Новый ОписаниеТипов("Число"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("ДатаВыездаТС",                   Новый ОписаниеТипов("Дата"));
			ТабВиртТСДляМаршрутизации.Колонки.Добавить("ВозвратВГараж",                  Новый ОписаниеТипов("Булево"));
			
			ВыборкаВиртТСДляМаршрутизации = ЗапросВиртТС.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВиртТСДляМаршрутизации.Следующий() Цикл 
				Для СчВиртТС = 1 По ВыборкаВиртТСДляМаршрутизации.КоличествоВиртуальныхТС Цикл 
					НовСтрокаВирт = ТабВиртТСДляМаршрутизации.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаВирт, ВыборкаВиртТСДляМаршрутизации);
					
					ВыборкаДетальныеЗаписи = ВыборкаВиртТСДляМаршрутизации.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
						НовСтрокаДетально = НовСтрокаВирт.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаДетально, ВыборкаДетальныеЗаписи);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			СчТекЭтап = СчТекЭтап + 1;
			ТекстНСТР = НСтр("en='Step %1 / %2 Routing orders on virtual vehicle.';ru='Этап %1 / %2 Маршрутизация заказов на виртуальные ТС.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, СчТекЭтап, СчКоличествоЭтапов + Символы.ПС);
			ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей(
				АдресВрХранилища, 
				пулы, 
				МатрицаВыигрышей,
				ТабЗаказы,
				ТабВиртТСДляМаршрутизации,
				ОграничениеЧасов,
				ОграничениеПоРасстоянию,
				МаксимальноеЧислоПунктов,
				ТабСкоростей, 
				СоотвТаблРасстояний, 
				АдресДепоВрем,
				АдресДепо,
				ШиротаДепо,
				ДолготаДепо,
				ВремяВыезда,
				ФормироватьСборныеМаршруты,
				Ложь,
				ТекстНСТР,
				УчитыватьОграниченияПоЗагрузкеТС,
				МаксимальноеКоличествоЗаказовТС,
				УчитыватьОкнаПоЗаказам,
				УчитыватьРазрешенныеТипыТС,
				СоотРазрешенныеТСПоЗаказам,
				РежимВремениВыездаИзГаража,
				СоотвГруппЗаказов,
				СтоянкиПоТипамТС,
				УчитыватьОкноПогрузкиТерминалов,
				ТерминалыПогрузки,
				УчитыватьСекцииТранспортныхСредств,
				СмешиватьГрузыВСекциях,
				СоотРазрешенныеТСПоХарактеристикам,
				ИспользоватьХарактеристикиЗаказовНаТС
			);
			
			МенеджерВТВирт.Закрыть();
		КонецЕсли;
		
		// При использовании ограничения по минимальным характеристикам выполняется перераспределение маршрутов
		// не удовлетворяющих требованиям.
		Если УчитыватьОграниченияПоЗагрузкеТС Тогда 
			Если мсвВиртТС.Количество() Тогда 
				ТабВиртТС = Новый ТаблицаЗначений();
				ТабВиртТС.Колонки.Добавить("ТС",                      Новый ОписаниеТипов("СправочникСсылка.уатТС"));
				ТабВиртТС.Колонки.Добавить("Прицеп1",                 Новый ОписаниеТипов("СправочникСсылка.уатТС"));
				ТабВиртТС.Колонки.Добавить("Прицеп2",                 Новый ОписаниеТипов("СправочникСсылка.уатТС"));
				ТабВиртТС.Колонки.Добавить("КоличествоВиртуальныхТС", Новый ОписаниеТипов("Число"));
				ТабВиртТС.Колонки.Добавить("ДатаВыездаТС",            Новый ОписаниеТипов("Дата"));
				
				Для Каждого ТекВиртТС Из мсвВиртТС Цикл 
					НовСтрока = ТабВиртТС.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекВиртТС);
				КонецЦикла;
				
				МенеджерВТВирт = Новый МенеджерВременныхТаблиц();
				
				ЗапросВиртТС = Новый Запрос();
				ЗапросВиртТС.МенеджерВременныхТаблиц = МенеджерВТВирт;
				
				ЗапросВиртТС.УстановитьПараметр("табТСВходная",                                ТабВиртТС);
				ЗапросВиртТС.УстановитьПараметр("ИспользоватьВПриоритетеСобственныйТранспорт", ИспользоватьВПриоритетеСобственныйТранспорт);
				ЗапросВиртТС.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоОбъему", ПонижающийКоэффициентЗагрузкиКузоваПоОбъему / 100);
				ЗапросВиртТС.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоВесу",   ПонижающийКоэффициентЗагрузкиКузоваПоВесу / 100);
				ЗапросВиртТС.УстановитьПараметр("ВозвратВГаражСобственныеТС",                  ВозвратВГаражСобственныеТС);
				ЗапросВиртТС.УстановитьПараметр("ВозвратВГаражПривлеченныеТС",                 ВозвратВГаражПривлеченныеТС);
				ЗапросВиртТС.УстановитьПараметр("ВозвратВГаражВиртуальныеТС",                  ВозвратВГаражВиртуальныеТС);
				
				Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
					ЗапросВиртТС.УстановитьПараметр("КоэфГрузоподъемности", 1000);
				Иначе 
					ЗапросВиртТС.УстановитьПараметр("КоэфГрузоподъемности", 1);
				КонецЕсли;
				
				Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
					ЗапросВиртТС.УстановитьПараметр("КоэфОбъемаКузова", 1000);
				Иначе 
					ЗапросВиртТС.УстановитьПараметр("КоэфОбъемаКузова", 1);
				КонецЕсли;
				
				ЗапросВиртТС.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	табТСВходная.ТС КАК ТС,
				|	табТСВходная.Прицеп1 КАК Прицеп1,
				|	табТСВходная.Прицеп2 КАК Прицеп2,
				|	табТСВходная.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
				|	табТСВходная.ДатаВыездаТС КАК ДатаВыездаТС
				|ПОМЕСТИТЬ ВТ_ТСВходПараметр
				|ИЗ
				|	&табТСВходная КАК табТСВходная
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.ТС КАК Справочник.уатТС) КАК ТС,
				|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
				|	ВЫБОР
				|		КОГДА ВТ_ТСВходПараметр.Прицеп2 = ВТ_ТСВходПараметр.Прицеп1
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
				|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп2 КАК Справочник.уатТС)
				|	КОНЕЦ КАК Прицеп2,
				|	ВТ_ТСВходПараметр.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
				|	ВТ_ТСВходПараметр.ДатаВыездаТС КАК ДатаВыездаТС
				|ПОМЕСТИТЬ ВТ_ТСтипизированная
				|ИЗ
				|	ВТ_ТСВходПараметр КАК ВТ_ТСВходПараметр
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВТ_ТСтипизированная.ТС КАК Ссылка,
				|	ВТ_ТСтипизированная.Прицеп1 КАК Прицеп1,
				|	ВТ_ТСтипизированная.Прицеп2 КАК Прицеп2,
				|	(ВТ_ТСтипизированная.ТС.Модель.Грузоподъемность * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности) * &ПонижающийКоэффициентЗагрузкиКузоваПоВесу КАК Грузоподъемность,
				|	(ВТ_ТСтипизированная.ТС.Модель.ОбъемКузова * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова) * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему КАК ОбъемКузова,
				|	ВТ_ТСтипизированная.ТС.Модель.МинимальныйВесГруза * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальныйВесГруза, 0) * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальныйВесГруза, 0) * &КоэфГрузоподъемности КАК МинимальныйВесГруза,
				|	ВТ_ТСтипизированная.ТС.Модель.МинимальныйОбъемГруза * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальныйОбъемГруза, 0) * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальныйОбъемГруза, 0) * &КоэфОбъемаКузова КАК МинимальныйОбъемГруза,
				|	ВТ_ТСтипизированная.ТС.Модель.МинимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МинимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МинимальноеКоличествоУпаковок, 0) КАК МинимальноеКоличествоУпаковок,
				|	ВТ_ТСтипизированная.ТС.Модель.МаксимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МаксимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МаксимальноеКоличествоУпаковок, 0) КАК МаксимальноеКоличествоУпаковок,
				|	ВТ_ТСтипизированная.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
				|	ВЫБОР
				|		КОГДА ВТ_ТСтипизированная.ТС.ТипТС = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
				|			ТОГДА ВТ_ТСтипизированная.ТС.Модель.ТипТС
				|		ИНАЧЕ ВТ_ТСтипизированная.ТС.ТипТС
				|	КОНЕЦ КАК ТипТС,
				|	ВЫБОР
				|		КОГДА &ИспользоватьВПриоритетеСобственныйТранспорт
				|				И ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Приоритет,
				|	ВТ_ТСтипизированная.ДатаВыездаТС КАК ДатаВыездаТС,
				|	ВЫБОР
				|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
				|				И &ВозвратВГаражСобственныеТС
				|			ТОГДА ИСТИНА
				|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
				|				И &ВозвратВГаражПривлеченныеТС
				|			ТОГДА ИСТИНА
				|		КОГДА ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
				|				И &ВозвратВГаражВиртуальныеТС
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ВозвратВГараж
				|ПОМЕСТИТЬ ВТ_ТС_Подготовка
				|ИЗ
				|	ВТ_ТСтипизированная КАК ВТ_ТСтипизированная";
				
				ЗапросВиртТС.Выполнить();
				
				ЗапросВиртТС.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МАКСИМУМ(ТранспортныеСредства.Грузоподъемность) КАК МаксГрузоподъемность,
				|	МАКСИМУМ(ТранспортныеСредства.ОбъемКузова) КАК МаксОбъемКузова
				|ИЗ
				|	ВТ_ТС_Подготовка КАК ТранспортныеСредства";
				
				ВыборкаВиртТС = ЗапросВиртТС.Выполнить().Выбрать();
				
				Если ВыборкаВиртТС.Следующий() Тогда 
					МаксГрузоподъемностьВиртТС = ВыборкаВиртТС.МаксГрузоподъемность;
					МаксОбъемКузоваВиртТС      = ВыборкаВиртТС.МаксОбъемКузова;
				Иначе 
					МаксГрузоподъемностьВиртТС = 0;
					МаксОбъемКузоваВиртТС      = 0;
				КонецЕсли;
				
				ЗапросВиртТС.УстановитьПараметр("МаксГрузоподъемность", МаксГрузоподъемностьВиртТС);
				ЗапросВиртТС.УстановитьПараметр("МаксОбъемКузова",      МаксОбъемКузоваВиртТС);
				ЗапросВиртТС.УстановитьПараметр("УчитыватьСекцииТС",    УчитыватьСекцииТранспортныхСредств);
				
				ЗапросВиртТС.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫРАЗИТЬ(ТранспортныеСредства.Ссылка КАК Справочник.уатТС) КАК Ссылка,
				|	ВЫРАЗИТЬ(ТранспортныеСредства.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
				|	ВЫРАЗИТЬ(ТранспортныеСредства.Прицеп2 КАК Справочник.уатТС) КАК Прицеп2,
				|	ТранспортныеСредства.Грузоподъемность КАК Грузоподъемность,
				|	ТранспортныеСредства.ОбъемКузова КАК ОбъемКузова,
				|	(ВЫБОР
				|		КОГДА &МаксГрузоподъемность = 0
				|			ТОГДА 0
				|		ИНАЧЕ ТранспортныеСредства.Грузоподъемность / &МаксГрузоподъемность
				|	КОНЕЦ + ВЫБОР
				|		КОГДА &МаксОбъемКузова = 0
				|			ТОГДА 0
				|		ИНАЧЕ ТранспортныеСредства.ОбъемКузова / &МаксОбъемКузова
				|	КОНЕЦ) / 2 КАК Порядок,
				|	ТранспортныеСредства.МинимальныйВесГруза КАК МинимальныйВесГруза,
				|	ТранспортныеСредства.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
				|	ТранспортныеСредства.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
				|	ТранспортныеСредства.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
				|	ТранспортныеСредства.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
				|	ТранспортныеСредства.ТипТС КАК ТипТС,
				|	ТранспортныеСредства.Приоритет КАК Приоритет,
				|	ТранспортныеСредства.ДатаВыездаТС КАК ДатаВыездаТС,
				|	ТранспортныеСредства.ВозвратВГараж КАК ВозвратВГараж
				|ПОМЕСТИТЬ ВТ_ТС
				|ИЗ
				|	ВТ_ТС_Подготовка КАК ТранспортныеСредства
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТабТССекции.Ссылка КАК Ссылка,
				|	ТабТССекции.Грузоподъемность КАК Грузоподъемность,
				|	ТабТССекции.ОбъемКузова КАК ОбъемКузова,
				|	ТабТССекции.Секция КАК Секция,
				|	ТабТССекции.Порядок КАК Порядок,
				|	ТабТССекции.МинимальныйВесГруза КАК МинимальныйВесГруза,
				|	ТабТССекции.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
				|	ТабТССекции.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
				|	ТабТССекции.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
				|	ТабТССекции.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
				|	ТабТССекции.ТипТС КАК ТипТС,
				|	ТабТССекции.Приоритет КАК Приоритет,
				|	ТабТССекции.ДатаВыездаТС КАК ДатаВыездаТС,
				|	ТабТССекции.ВозвратВГараж КАК ВозвратВГараж
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВТ_ТС1.Ссылка КАК Ссылка,
				|		ВТ_ТС1.Грузоподъемность КАК Грузоподъемность,
				|		ВЫБОР
				|			КОГДА &УчитыватьСекцииТС
				|				ТОГДА ЕСТЬNULL(СекцииТранспортныхСредств1.Объем, ВТ_ТС1.Ссылка.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему
				|			ИНАЧЕ ВТ_ТС1.ОбъемКузова
				|		КОНЕЦ КАК ОбъемКузова,
				|		ЕСТЬNULL(СекцииТранспортныхСредств1.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)) КАК Секция,
				|		ВЫБОР
				|			КОГДА &УчитыватьСекцииТС
				|				ТОГДА ЕСТЬNULL(СекцииТранспортныхСредств1.Объем, ВТ_ТС1.Ссылка.Модель.ОбъемКузова)
				|			ИНАЧЕ ВТ_ТС1.Порядок
				|		КОНЕЦ КАК Порядок,
				|		ВТ_ТС1.МинимальныйВесГруза КАК МинимальныйВесГруза,
				|		ВТ_ТС1.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
				|		ВТ_ТС1.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
				|		ВТ_ТС1.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
				|		ВТ_ТС1.КоличествоВиртуальныхТС КАК КоличествоВиртуальныхТС,
				|		ВТ_ТС1.ТипТС КАК ТипТС,
				|		ВТ_ТС1.Приоритет КАК Приоритет,
				|		ВТ_ТС1.ДатаВыездаТС КАК ДатаВыездаТС,
				|		ВТ_ТС1.ВозвратВГараж КАК ВозвратВГараж
				|	ИЗ
				|		ВТ_ТС КАК ВТ_ТС1
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств1
				|			ПО (&УчитыватьСекцииТС)
				|				И (СекцииТранспортныхСредств1.Владелец = ВТ_ТС1.Ссылка)
				|				И (НЕ СекцииТранспортныхСредств1.ПометкаУдаления)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ВТ_ТС2.Ссылка,
				|		ВТ_ТС2.Грузоподъемность,
				|		ЕСТЬNULL(СекцииТранспортныхСредств2.Объем, ВТ_ТС2.Прицеп1.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
				|		ЕСТЬNULL(СекцииТранспортныхСредств2.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)),
				|		ЕСТЬNULL(СекцииТранспортныхСредств2.Объем, ВТ_ТС2.Прицеп1.Модель.ОбъемКузова),
				|		ВТ_ТС2.МинимальныйВесГруза,
				|		ВТ_ТС2.МинимальныйОбъемГруза,
				|		ВТ_ТС2.МинимальноеКоличествоУпаковок,
				|		ВТ_ТС2.МаксимальноеКоличествоУпаковок,
				|		ВТ_ТС2.КоличествоВиртуальныхТС,
				|		ВТ_ТС2.ТипТС,
				|		ВТ_ТС2.Приоритет,
				|		ВТ_ТС2.ДатаВыездаТС,
				|		ВТ_ТС2.ВозвратВГараж
				|	ИЗ
				|		ВТ_ТС КАК ВТ_ТС2
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств2
				|			ПО (СекцииТранспортныхСредств2.Владелец = ВТ_ТС2.Прицеп1)
				|				И (НЕ СекцииТранспортныхСредств2.ПометкаУдаления)
				|	ГДЕ
				|		&УчитыватьСекцииТС
				|		И ВТ_ТС2.Прицеп1.Наименование ЕСТЬ НЕ NULL 
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ВТ_ТС3.Ссылка,
				|		ВТ_ТС3.Грузоподъемность,
				|		ЕСТЬNULL(СекцииТранспортныхСредств3.Объем, ВТ_ТС3.Прицеп2.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
				|		ЕСТЬNULL(СекцииТранспортныхСредств3.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)),
				|		ЕСТЬNULL(СекцииТранспортныхСредств3.Объем, ВТ_ТС3.Прицеп2.Модель.ОбъемКузова),
				|		ВТ_ТС3.МинимальныйВесГруза,
				|		ВТ_ТС3.МинимальныйОбъемГруза,
				|		ВТ_ТС3.МинимальноеКоличествоУпаковок,
				|		ВТ_ТС3.МаксимальноеКоличествоУпаковок,
				|		ВТ_ТС3.КоличествоВиртуальныхТС,
				|		ВТ_ТС3.ТипТС,
				|		ВТ_ТС3.Приоритет,
				|		ВТ_ТС3.ДатаВыездаТС,
				|		ВТ_ТС3.ВозвратВГараж
				|	ИЗ
				|		ВТ_ТС КАК ВТ_ТС3
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств3
				|			ПО (СекцииТранспортныхСредств3.Владелец = ВТ_ТС3.Прицеп2)
				|				И (НЕ СекцииТранспортныхСредств3.ПометкаУдаления)
				|	ГДЕ
				|		&УчитыватьСекцииТС
				|		И ВТ_ТС3.Прицеп2.Наименование ЕСТЬ НЕ NULL ) КАК ТабТССекции
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет УБЫВ,
				|	Порядок
				|ИТОГИ
				|	МАКСИМУМ(Грузоподъемность),
				|	СУММА(ОбъемКузова),
				|	МИНИМУМ(Порядок),
				|	МАКСИМУМ(МинимальныйВесГруза),
				|	МАКСИМУМ(МинимальныйОбъемГруза),
				|	МАКСИМУМ(МинимальноеКоличествоУпаковок),
				|	МАКСИМУМ(МаксимальноеКоличествоУпаковок),
				|	МАКСИМУМ(КоличествоВиртуальныхТС),
				|	МАКСИМУМ(ТипТС),
				|	МАКСИМУМ(Приоритет),
				|	МАКСИМУМ(ДатаВыездаТС),
				|	МАКСИМУМ(ВозвратВГараж)
				|ПО
				|	Ссылка";
				
				ВыборкаВиртТСДляМаршрутизации = ЗапросВиртТС.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВиртТСДляМаршрутизации.Следующий() Цикл 
					Для СчВиртТС = 1 По ВыборкаВиртТСДляМаршрутизации.КоличествоВиртуальныхТС Цикл 
						НовСтрокаВирт = табОграниченияТС.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаВирт, ВыборкаВиртТСДляМаршрутизации);
						
						ВыборкаДетальныеЗаписи = ВыборкаВиртТСДляМаршрутизации.Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
							НовСтрокаДетально = НовСтрокаВирт.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаДетально, ВыборкаДетальныеЗаписи);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				
				МенеджерВТВирт.Закрыть();
			КонецЕсли;
			
			индЭлемента = пулы.Количество() - 1;
			
			// Обход пулов, полученных на предыдущих этапах. Если ВОХ маршрута меньше минимальной характеристики ТС
			// происходит расформирование пула. Расформированные заказы повторно маршрутизируются на задействованные ТС,
			// новые ТС не выделяются.
			Пока индЭлемента >= 0 Цикл 
				ТекПул = пулы[индЭлемента];
				
				Если ТекПул.МаксимальныйВес < ТекПул.МинимальныйВесГрузаТС Или ТекПул.МаксимальныйОбъем < ТекПул.МинимальныйОбъемГрузаТС 
						Или ТекПул.ВсегоУпаковок < ТекПул.МинимальноеКоличествоУпаковокТС Тогда 
					Если УчитыватьОкноПогрузкиТерминалов Тогда 
						ВосстановитьОкноТерминала(ТерминалыПогрузки.ДоступныеОкна, ТекПул.Терминал, ТекПул.ТерминалПосещениеС, ТекПул.ТерминалПосещениеПо);
					КонецЕсли;
					
					пулы.Удалить(индЭлемента);
				КонецЕсли;
				индЭлемента = индЭлемента - 1;
			КонецЦикла;
			
			Для Каждого ТекПул Из пулы Цикл 
				Для Каждого ТекТСпула Из ТекПул.мсвТС Цикл 
					табОграниченияТС.Строки.Удалить(табОграниченияТС.Строки.Найти(ТекТСпула.Ссылка, "Ссылка"));
				КонецЦикла;
			КонецЦикла;
			
			СчТекЭтап = СчТекЭтап + 1;
			ТекстНСТР = НСтр("en='Stage %1 / %2 Redistribution of orders between vehicles taking into account the minimum characteristics.';ru='Этап %1 / %2 Перераспределение заказов между ТС с учетом минимальных характеристик.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, СчТекЭтап, СчКоличествоЭтапов + Символы.ПС);
			ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей(
				АдресВрХранилища, 
				пулы, 
				МатрицаВыигрышей,
				ТабЗаказы,
				табОграниченияТС,
				ОграничениеЧасов,
				ОграничениеПоРасстоянию,
				МаксимальноеЧислоПунктов,
				ТабСкоростей, 
				СоотвТаблРасстояний, 
				АдресДепоВрем,
				АдресДепо,
				ШиротаДепо,
				ДолготаДепо,
				ВремяВыезда,
				ФормироватьСборныеМаршруты,
				Истина,
				ТекстНСТР,
				УчитыватьОграниченияПоЗагрузкеТС,
				МаксимальноеКоличествоЗаказовТС,
				УчитыватьОкнаПоЗаказам,
				УчитыватьРазрешенныеТипыТС,
				СоотРазрешенныеТСПоЗаказам,
				РежимВремениВыездаИзГаража,
				СоотвГруппЗаказов,
				СтоянкиПоТипамТС,
				УчитыватьОкноПогрузкиТерминалов,
				ТерминалыПогрузки,
				УчитыватьСекцииТранспортныхСредств,
				СмешиватьГрузыВСекциях,
				СоотРазрешенныеТСПоХарактеристикам,
				ИспользоватьХарактеристикиЗаказовНаТС
			);
		КонецЕсли;
		
		// Обратное преобразование групп (заказов или пакетов).
		ПредставлениеЕИОбъема = Строка(Константы.уатЕдиницаИзмеренияОбъема.Получить());
		мсвДопПулы = Новый Массив();
		Для Каждого ТекПул Из пулы Цикл 
			СчТС = ТекПул.мсвТС.Количество() - 1;
			Пока СчТС >= 0 Цикл 
				СтрокаТС = ТекПул.мсвТС[СчТС];
				
				Если УчитыватьСекцииТранспортныхСредств Тогда 
					ТабСекций = Новый ТаблицаЗначений();
					ТабСекций.Колонки.Добавить("Секция", Новый ОписаниеТипов("СправочникСсылка.уатСекцииТС"));
					ТабСекций.Колонки.Добавить("Заказ",  Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, УникальныйИдентификатор"));
					ТабСекций.Колонки.Добавить("Объем",  Новый ОписаниеТипов("Число"));
					
					СтрокиСекций = ТекПул.ТабСекций.НайтиСтроки(Новый Структура("ТС", СтрокаТС.Ссылка));
					Для Каждого СтрокаСекции Из СтрокиСекций Цикл 
						Для Каждого СтрокаЗаказа Из СтрокаСекции.Заказы Цикл 
							НовСекция = ТабСекций.Добавить();
							НовСекция.Секция = СтрокаСекции.Секция;
							НовСекция.Заказ  = СтрокаЗаказа.Заказ;
							НовСекция.Объем  = СтрокаЗаказа.Объем;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				мсвНовПул = Новый Массив();
				
				Для Каждого ТекМаршрут Из ТекПул.маршрут Цикл 
					Если УчитыватьСекцииТранспортныхСредств И ТабСекций.Найти(ТекМаршрут.заказ, "Заказ") = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					
					мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(ТекМаршрут.заказ);
					Для СчИсхЗаказ = 0 По мсвИсходныеЗаказы.Количество() - 1 Цикл 
						ТекИсхЗаказ = мсвИсходныеЗаказы[СчИсхЗаказ];
						
						Если СжиматьЗаказы Тогда 
							СтрокиЗаказа = ТаблицаИсходЗаказов.Строки.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекИсхЗаказ.Заказ, ТекИсхЗаказ.Пакет), Истина);
						Иначе 
							СтрокиЗаказа = ТаблицаИсходЗаказов.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекИсхЗаказ.Заказ, ТекИсхЗаказ.Пакет));
						КонецЕсли;
						
						СекцииПоЗаказу = Новый Массив();
						
						Если УчитыватьСекцииТранспортныхСредств Тогда 
							РазмещенныйОбъем = 0;
							
							НайдСекции = ТабСекций.НайтиСтроки(Новый Структура("Заказ", ТекМаршрут.заказ));
							Для Каждого СтрокаСекции Из НайдСекции Цикл 
								РазмещенныйОбъем = РазмещенныйОбъем + СтрокаСекции.Объем;
								СекцииПоЗаказу.Добавить(Новый Структура("Секция, Объем", СтрокаСекции.Секция, СтрокаСекции.Объем));
							КонецЦикла;
							
						Иначе 
							РазмещенныйОбъем = СтрокиЗаказа[0].Объем;
						КонецЕсли;
						
						Если СтрокиЗаказа[0].Объем = 0 Тогда 
							КоличествоПоЗаказу = СтрокиЗаказа[0].Количество;
						Иначе 
							КоличествоПоЗаказу = СтрокиЗаказа[0].Количество * (РазмещенныйОбъем / СтрокиЗаказа[0].Объем);
						КонецЕсли;
						
						Если СчИсхЗаказ = 0 Тогда 
							ТекОжидание = ТекМаршрут.Ожидание;
							ТекВремя = ТекМаршрут.Время;
							ТекРасстояние = ТекМаршрут.Расстояние;
						Иначе 
							ТекОжидание = 0;
							ТекВремя = 0;
							ТекРасстояние = 0;
						КонецЕсли;
						
						мсвНовПул.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,СекцииПоЗаказу, Время, Расстояние",
							ТекИсхЗаказ.Заказ, СтрокиЗаказа[0].Груз, СтрокиЗаказа[0].СтрокаПакета, КоличествоПоЗаказу, 
							ТекМаршрут.Операция, ТекОжидание, СекцииПоЗаказу, ТекВремя, ТекРасстояние));
					КонецЦикла;
				КонецЦикла;
				
				Если СчТС = 0 Тогда 
					ТекПул.ТС                               = СтрокаТС.Ссылка;
					ТекПул.ТипТС                            = СтрокаТС.ТипТС;
					ТекПул.ГрузоподъемностьТС               = СтрокаТС.Грузоподъемность;
					ТекПул.ОбъемКузоваТС                    = СтрокаТС.ОбъемКузова;
					ТекПул.ПорядокТС                        = СтрокаТС.Порядок;
					ТекПул.МинимальныйВесГрузаТС            = СтрокаТС.МинимальныйВесГруза;
					ТекПул.МинимальныйОбъемГрузаТС          = СтрокаТС.МинимальныйОбъемГруза;
					ТекПул.МинимальноеКоличествоУпаковокТС  = СтрокаТС.МинимальноеКоличествоУпаковок;
					ТекПул.МаксимальноеКоличествоУпаковокТС = СтрокаТС.МаксимальноеКоличествоУпаковок;
					ТекПул.ПриоритетТС                      = СтрокаТС.Приоритет;
					ТекПул.ДатаВыездаТС                     = СтрокаТС.ДатаВыездаТС;
					ТекПул.ВозвратВГараж                    = СтрокаТС.ВозвратВГараж;
					ТекПул.маршрут                          = мсвНовПул;
					ТекПул.МаксимальныйВес                  = 0;
					ТекПул.МаксимальныйОбъем                = 0;
					ТекПул.ВсегоУпаковок                    = 0;
					ТекПул.ВсегоЗаказов                     = 0;
					
					ТекПул.Удалить("ТабСекций");
					ТекПул.Удалить("мсвТС");
					
				Иначе 
					мНовПул = Новый Структура();
					мНовПул.Вставить("ТС",                               СтрокаТС.Ссылка);
					мНовПул.Вставить("ТипТС",                            СтрокаТС.ТипТС);
					мНовПул.Вставить("ГрузоподъемностьТС",               СтрокаТС.Грузоподъемность);
					мНовПул.Вставить("ОбъемКузоваТС",                    СтрокаТС.ОбъемКузова);
					мНовПул.Вставить("ПорядокТС",                        СтрокаТС.Порядок);
					мНовПул.Вставить("МинимальныйВесГрузаТС",            СтрокаТС.МинимальныйВесГруза);
					мНовПул.Вставить("МинимальныйОбъемГрузаТС",          СтрокаТС.МинимальныйОбъемГруза);
					мНовПул.Вставить("МинимальноеКоличествоУпаковокТС",  СтрокаТС.МинимальноеКоличествоУпаковок);
					мНовПул.Вставить("МаксимальноеКоличествоУпаковокТС", СтрокаТС.МаксимальноеКоличествоУпаковок);
					мНовПул.Вставить("ПриоритетТС",                      СтрокаТС.Приоритет);
					мНовПул.Вставить("ДатаВыездаТС",                     СтрокаТС.ДатаВыездаТС);
					мНовПул.Вставить("ВозвратВГараж",                    СтрокаТС.ВозвратВГараж);
					мНовПул.Вставить("маршрут",                          мсвНовПул);
					мНовПул.Вставить("МаксимальныйВес",                  0);
					мНовПул.Вставить("МаксимальныйОбъем",                0);
					мНовПул.Вставить("ВсегоУпаковок",                    0);
					мНовПул.Вставить("ВсегоЗаказов",                     0);
					мНовПул.Вставить("ВремяВыездаНаМаршрут",             ТекПул.ВремяВыездаНаМаршрут);
					мНовПул.Вставить("Терминал",                         ТекПул.Терминал);
					мНовПул.Вставить("ТерминалПосещениеС",               ТекПул.ТерминалПосещениеС);
					мНовПул.Вставить("ТерминалПосещениеПо",              ТекПул.ТерминалПосещениеПо);
					
					мсвДопПулы.Добавить(мНовПул);
				КонецЕсли;
				
				СчТС = СчТС - 1;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ТекДопПул Из мсвДопПулы Цикл 
			пулы.Добавить(ТекДопПул);
		КонецЦикла;
		
		// Пул дополняется пунктами, не участвующими в маршрутизации.
		// Например, если выполнялась развозка (т.е. ТС загружались на базе и везли груз по заказам) до
		// выполнения этого кода в пуле будут только пункты разгрузки.
		// После выполнения кода - в пул будут так же помещены пункты погрузки.
		Для Каждого ТекПул Из пулы Цикл
			мсвПредПункты = Новый Массив();
			Индекс = ТекПул.маршрут.Количество() - 1;
			Для Сч = 0 По Индекс Цикл 
				Если ФормироватьСборныеМаршруты Тогда 
					СтрокаПула = ТекПул.маршрут[Сч];
					ТекПул.маршрут.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,СекцииПоЗаказу, Время, Расстояние", 
						СтрокаПула.заказ, СтрокаПула.Груз, СтрокаПула.СтрокаПакета, СтрокаПула.Количество, 
						Перечисления.уатТипыТочекМаршрута.Разгрузка, 0, СтрокаПула.СекцииПоЗаказу, 0, 0));
				Иначе 
					СтрокаПула = ТекПул.маршрут[Сч];
					мсвПредПункты.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,СекцииПоЗаказу, Время, Расстояние", 
						СтрокаПула.заказ, СтрокаПула.Груз, СтрокаПула.СтрокаПакета, СтрокаПула.Количество, 
						Перечисления.уатТипыТочекМаршрута.Погрузка, 0, СтрокаПула.СекцииПоЗаказу, 0, 0));
				КонецЕсли;
			КонецЦикла;
			Для Сч = 0 По мсвПредПункты.Количество() - 1 Цикл 
				ТекПул.маршрут.Вставить(Сч, мсвПредПункты[Сч]);
			КонецЦикла;
		КонецЦикла;
		
		// Этап маршрутизации FTL заказов.
		Если ТаблFTLЗаказы.Количество() Тогда 
			// Подготовка данных по заказам.
			Для Каждого ТекЗаказ Из ТаблFTLЗаказы Цикл 
				ТекЗаказ.Порядок = (?(FTL_МаксимальныйВес = 0, 0, ТекЗаказ.ВесБрутто / FTL_МаксимальныйВес) + ?(FTL_МаксимальныйОбъем = 0, 0, ТекЗаказ.Объем / FTL_МаксимальныйОбъем)) / 2;
			КонецЦикла;
			
			ТаблFTLЗаказы.Сортировать("Порядок УБЫВ");
			
			// Подготовка данных по ТС.
			ТаблFTLТС = Новый ТаблицаЗначений();
			ТаблFTLТС.Колонки.Добавить("ТС",                             Новый ОписаниеТипов("СправочникСсылка.уатТС"));
			ТаблFTLТС.Колонки.Добавить("Грузоподъемность",               Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ОбъемКузова",                    Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("Порядок",                        Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ВозвратВГараж",                  Новый ОписаниеТипов("Булево"));
			ТаблFTLТС.Колонки.Добавить("ДоступноеВремя",                 Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ДоступноеРасстояние",            Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ВремяВыезда",                    Новый ОписаниеТипов("Дата"));
			ТаблFTLТС.Колонки.Добавить("МинимальноеКоличествоУпаковок",  Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("МаксимальноеКоличествоУпаковок", Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ДопЗаказыFTL",                   Новый ОписаниеТипов("Массив"));
			ТаблFTLТС.Колонки.Добавить("ВсегоЗаказов",                   Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ВсегоПунктов",                   Новый ОписаниеТипов("Число"));
			ТаблFTLТС.Колонки.Добавить("ТипТС",                          Новый ОписаниеТипов("СправочникСсылка.уатТипыТС"));
			ТаблFTLТС.Колонки.Добавить("Приоритет",                      Новый ОписаниеТипов("Число"));
			
			// Если ТС задействовано в развозке - определеяется оставшееся время и расстояние,
			// доступное ТС для выполнения FTL заказов.
			Для Каждого ТекТС Из пулы Цикл
				мсвПосещенныеПункты = Новый Массив();
				врОбщВремя          = 0;
				врОбщРасстояние     = 0;
				
				Если Не ФормироватьСборныеМаршруты Тогда 
					// Время стоянок перед выездом.
					Для Каждого ТекЭлем Из ТекТС.маршрут Цикл 
						Если СжиматьЗаказы Тогда 
							стрЗаказ = ТаблицаИсходЗаказов.Строки.Найти(ТекЭлем.заказ, "Ссылка", Истина);
						Иначе 
							стрЗаказ = ТаблицаИсходЗаказов.Найти(ТекЭлем.заказ, "Ссылка");
						КонецЕсли;
						
						СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, ТекТС.ТипТС);
						
						Если мсвПосещенныеПункты.Найти(стрЗаказ.АдресОтправления) = Неопределено Тогда 
							врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
							мсвПосещенныеПункты.Добавить(стрЗаказ.АдресОтправления);
						КонецЕсли;
						
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, стрЗаказ.СтоянкаПунктОтправления);
					КонецЦикла;
				КонецЕсли;
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(ТекТС.ВремяВыездаНаМаршрут, врОбщВремя);
				флОшибкаРасчета  = Ложь;
				
				врПредПункт = АдресДепоВрем;
				врПредАдрес = АдресДепо;
				врПредЛат   = ШиротаДепо;
				врПредЛон   = ДолготаДепо;
				
				Для Каждого ТекЭлем Из ТекТС.маршрут Цикл 
					Если СжиматьЗаказы Тогда 
						стрЗаказ = ТаблицаИсходЗаказов.Строки.Найти(ТекЭлем.заказ, "Ссылка", Истина);
					Иначе 
						стрЗаказ = ТаблицаИсходЗаказов.Найти(ТекЭлем.заказ, "Ссылка");
					КонецЕсли;
					
					Пункт1 = врПредПункт;
					Пункт2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.ПунктПогрузки, стрЗаказ.ПунктРазгрузки);
					Адрес1 = врПредАдрес;
					Адрес2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения);
					
					текЛат = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛатОтпр, стрЗаказ.ЛатНазн);
					текЛон = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛонОтпр, стрЗаказ.ЛонНазн);
					
					текВремя      = 0;
					текРасстояние = 0;
					
					Если Пункт1 = Пункт2 Тогда 
						Если Не Адрес1 = Адрес2 Тогда 
							ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
							текВремя = ДанныеПоКластеру.Время;
							текРасстояние = ДанныеПоКластеру.Расстояние;
						КонецЕсли;
						
					Иначе 
						Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
						Если Узел1 = Неопределено Тогда 
							флОшибкаРасчета = Истина;
							Прервать;
						КонецЕсли;
						Узел2 = Узел1.Получить(Пункт2);
						Если Узел2 = Неопределено Тогда 
							флОшибкаРасчета = Истина;
							Прервать;
						КонецЕсли;
						
						текВремя = Узел2.Время;
						текРасстояние = Узел2.Расстояние;
					КонецЕсли;
					
					врПредПункт = Пункт2;
					врПредАдрес = Адрес2;
					врПредЛат   = текЛат;
					врПредЛон   = текЛон;
					
					врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
						текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
					
					врОбщРасстояние = врОбщРасстояние + текРасстояние;
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения), ТекТС.ТипТС);
					
					Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения)) = Неопределено Тогда 
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
						врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
						мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения));
					КонецЕсли;
					
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
				КонецЦикла;
				
				Если ТекТС.ВозвратВГараж Тогда 
					Пункт1 = врПредПункт;
					Пункт2 = АдресДепоВрем;
					Адрес1 = врПредАдрес;
					Адрес2 = АдресДепо;
					
					текВремя      = 0;
					текРасстояние = 0;
					
					Если Пункт1 = Пункт2 Тогда 
						Если Не Адрес1 = Адрес2 Тогда 
							ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
							текВремя = ДанныеПоКластеру.Время;
							текРасстояние = ДанныеПоКластеру.Расстояние;
						КонецЕсли;
						
					Иначе 
						Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
						Если Узел1 = Неопределено Тогда 
							флОшибкаРасчета = Истина;
						КонецЕсли;
						Узел2 = Узел1.Получить(Пункт2);
						Если Узел2 = Неопределено Тогда 
							флОшибкаРасчета = Истина;
						Иначе 
							текВремя = Узел2.Время;
							текРасстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
					
					Если флОшибкаРасчета Тогда 
						Продолжить;
					КонецЕсли;
					
					врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
						текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
					
					врОбщРасстояние = врОбщРасстояние + текРасстояние;
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
				КонецЕсли;
				
				Если ФормироватьСборныеМаршруты Тогда 
					// Время стоянок при возвращении.
					Для Каждого ТекЭлем Из ТекТС.маршрут Цикл 
						Если СжиматьЗаказы Тогда 
							стрЗаказ = ТаблицаИсходЗаказов.Строки.Найти(ТекЭлем.заказ, "Ссылка", Истина);
						Иначе 
							стрЗаказ = ТаблицаИсходЗаказов.Найти(ТекЭлем.заказ, "Ссылка");
						КонецЕсли;
						
						СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресНазначения, ТекТС.ТипТС);
						
						Если мсвПосещенныеПункты.Найти(стрЗаказ.АдресНазначения) = Неопределено Тогда 
							врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
							врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
							мсвПосещенныеПункты.Добавить(стрЗаказ.АдресНазначения);
						КонецЕсли;
						
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, стрЗаказ.СтоянкаПунктНазначения);
						врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, стрЗаказ.СтоянкаПунктНазначения);
					КонецЦикла;
				КонецЕсли;
				
				мсвПунктыМаршрута = Новый Массив();
				Если Не МаксимальноеЧислоПунктов = 0 Тогда 
					мсвПунктыМаршрута.Добавить(АдресДепо);
					
					Для Каждого ТекЭлМаршрута Из ТекТС.маршрут Цикл 
						СтрокаТабЗаказы = ТабЗаказы.Найти(ТекЭлМаршрута.заказ, "ЗаказСсылка");
						Если Не СтрокаТабЗаказы = Неопределено Тогда 
							Если ФормироватьСборныеМаршруты Тогда 
								ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
							Иначе 
								ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
							КонецЕсли;
							
							Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
								мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ТекТС.ВозвратВГараж Тогда 
						Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = АдресДепо Тогда 
							мсвПунктыМаршрута.Добавить(АдресДепо);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовСтрТС = ТаблFTLТС.Добавить();
				НовСтрТС.ТС                             = ТекТС.ТС;
				НовСтрТС.Грузоподъемность               = ТекТС.ГрузоподъемностьТС;
				НовСтрТС.ОбъемКузова                    = ТекТС.ОбъемКузоваТС;
				НовСтрТС.Порядок                        = ТекТС.ПорядокТС;
				НовСтрТС.ДоступноеВремя                 = ?(ОграничениеЧасов = 0, 999999999999999, СложитьВремяЧЧММ(ОграничениеЧасов, -врОбщВремя));
				НовСтрТС.ДоступноеРасстояние            = ?(ОграничениеПоРасстоянию = 0, 999999999999999, ОграничениеПоРасстоянию - врОбщРасстояние);
				НовСтрТС.ВремяВыезда                    = врТекВремяВТочке;
				НовСтрТС.МинимальноеКоличествоУпаковок  = ТекТС.МинимальноеКоличествоУпаковокТС;
				НовСтрТС.МаксимальноеКоличествоУпаковок = ТекТС.МаксимальноеКоличествоУпаковокТС;
				НовСтрТС.ВсегоЗаказов                   = ТекТС.ВсегоЗаказов;
				НовСтрТС.ВсегоПунктов                   = мсвПунктыМаршрута.Количество();
				НовСтрТС.ТипТС                          = ТекТС.ТипТС;
				НовСтрТС.Приоритет                      = ТекТС.ПриоритетТС;
				НовСтрТС.ВозвратВГараж                  = ТекТС.ВозвратВГараж;
			КонецЦикла;
			
			// Для не задействованых ТС используется все доступное время и расстояние.
			Для Каждого ТекТС Из ТабТС.Строки Цикл 
				НовСтрТС = ТаблFTLТС.Добавить();
				НовСтрТС.ТС                             = ТекТС.Ссылка;
				НовСтрТС.Грузоподъемность               = ТекТС.Грузоподъемность;
				НовСтрТС.ОбъемКузова                    = ТекТС.ОбъемКузова;
				НовСтрТС.Порядок                        = ТекТС.Порядок;
				НовСтрТС.ДоступноеВремя                 = ?(ОграничениеЧасов = 0, 999999999999999, ОграничениеЧасов);
				НовСтрТС.ДоступноеРасстояние            = ?(ОграничениеПоРасстоянию = 0, 999999999999999, ОграничениеПоРасстоянию);
				НовСтрТС.ВремяВыезда                    = ?(ЗначениеЗаполнено(ТекТС.ДатаВыездаТС), ТекТС.ДатаВыездаТС, ВремяВыезда);
				НовСтрТС.МинимальноеКоличествоУпаковок  = ТекТС.МинимальноеКоличествоУпаковок;
				НовСтрТС.МаксимальноеКоличествоУпаковок = ТекТС.МаксимальноеКоличествоУпаковок;
				НовСтрТС.ВсегоЗаказов                   = 0;
				НовСтрТС.ВсегоПунктов                   = 0;
				НовСтрТС.ТипТС                          = ТекТС.ТипТС;
				НовСтрТС.Приоритет                      = ТекТС.Приоритет;
				НовСтрТС.ВозвратВГараж                  = ТекТС.ВозвратВГараж;
			КонецЦикла;
			
			ТаблFTLТС.Сортировать("Приоритет Убыв, Порядок Возр");
			
			// Обход таблицы FTL заказов, определение возможности назначения заказа на ТС.
			Для Каждого ТекРаспределяемыйЗаказ Из ТаблFTLЗаказы Цикл 
				мсвРазрешенныеТСПоЗаказу = Неопределено;
				Если УчитыватьРазрешенныеТипыТС Тогда 
					мсвРазрешенныеТСПоЗаказу = СоотРазрешенныеТСПоЗаказам.Получить(ТекРаспределяемыйЗаказ.Ссылка);
				КонецЕсли;
				
				мсвРазрешенныеТСПоХарактеристикам = Неопределено;
				Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
					мсвРазрешенныеТСПоХарактеристикам = СоотРазрешенныеТСПоХарактеристикам.Получить(ТекРаспределяемыйЗаказ.НаборХарактеристик);
				КонецЕсли;
				
				Для Каждого ТекТС Из ТаблFTLТС Цикл 
					Если (ТекТС.Грузоподъемность <> 0 И ТекТС.Грузоподъемность < ТекРаспределяемыйЗаказ.ВесБрутто) 
							Или (ТекТС.ОбъемКузова<> 0 И ТекТС.ОбъемКузова < ТекРаспределяемыйЗаказ.Объем) 
							Или (ТекТС.МаксимальноеКоличествоУпаковок <> 0 И ТекТС.МаксимальноеКоличествоУпаковок < ТекРаспределяемыйЗаказ.КоличествоУпаковок)
							Или (УчитыватьОграниченияПоЗагрузкеТС И ТекТС.МинимальноеКоличествоУпаковок <> 0 И ТекТС.МинимальноеКоличествоУпаковок > ТекРаспределяемыйЗаказ.КоличествоУпаковок)
							Или (МаксимальноеКоличествоЗаказовТС <> 0 И (ТекТС.ДопЗаказыFTL.Количество() + ТекТС.ВсегоЗаказов) > МаксимальноеКоличествоЗаказовТС)
							Или (мсвРазрешенныеТСПоЗаказу <> Неопределено И мсвРазрешенныеТСПоЗаказу.Найти(ТекТС.ТС) = Неопределено)
							Или (мсвРазрешенныеТСПоХарактеристикам <> Неопределено И мсвРазрешенныеТСПоХарактеристикам.Найти(ТекТС.ТС) = Неопределено) Тогда 
						Продолжить;
					КонецЕсли;
					
					врОбщВремя = 0;
					
					врТекВремяВТочке = ТекТС.ВремяВыезда;
					
					Пункт1 = АдресДепоВрем;
					Пункт2 = ТекРаспределяемыйЗаказ.ПунктПогрузки;
					Адрес1 = АдресДепо;
					Адрес2 = ТекРаспределяемыйЗаказ.АдресОтправления;
					
					текВремя      = 0;
					текРасстояние = 0;
					
					Если Пункт1 = Пункт2 Тогда 
						Если Не Адрес1 = Адрес2 Тогда 
							ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(ШиротаДепо, ДолготаДепо, ТекРаспределяемыйЗаказ.ЛатОтпр, ТекРаспределяемыйЗаказ.ЛонОтпр);
							текВремя = ДанныеПоКластеру.Время;
							текРасстояние = ДанныеПоКластеру.Расстояние;
						КонецЕсли;
						
					Иначе 
						Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
						Если Узел1 = Неопределено Тогда 
							Прервать;
						КонецЕсли;
						Узел2 = Узел1.Получить(Пункт2);
						Если Узел2 = Неопределено Тогда 
							Прервать;
						Иначе 
							текВремя = Узел2.Время;
							текРасстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
					
					врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
						текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
					
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
					
					ОжиданиеПосещения = 0;
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекРаспределяемыйЗаказ.ОтправлениеС, ТекРаспределяемыйЗаказ.ОтправлениеПо, ОжиданиеПосещения) Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ОжиданиеПосещения > 0 Тогда 
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
						врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
					КонецЕсли;
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекРаспределяемыйЗаказ.ОтправлениеС, ТекРаспределяемыйЗаказ.ОтправлениеПо) Тогда 
						Продолжить;
					КонецЕсли;
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(ТекРаспределяемыйЗаказ.АдресОтправления, ТекТС.ТипТС);
					
					текТерминал            = Неопределено;
					текТерминалОкноС       = Неопределено;
					текТерминалОкноПо      = Неопределено;
					текТерминалПосещениеС  = Неопределено;
					текТерминалПосещениеПо = Неопределено;
					
					ОжиданиеТерминала = 0;
					Если Не ОпределитьТерминалПогрузкиИОкно(врТекВремяВТочке, СтоянкаПоТипуТС, ТекТС.ТипТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, 
							текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо, ОжиданиеТерминала) Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ОжиданиеТерминала > 0 Тогда 
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеТерминала);
						врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеТерминала);
					КонецЕсли;
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекРаспределяемыйЗаказ.ОтправлениеС, ТекРаспределяемыйЗаказ.ОтправлениеПо) Тогда 
						Продолжить;
					КонецЕсли;
					
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ТекРаспределяемыйЗаказ.Время);
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ТекРаспределяемыйЗаказ.Время);
					
					ОжиданиеПосещенияРазгрузки = 0;
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекРаспределяемыйЗаказ.ДоставкаС, ТекРаспределяемыйЗаказ.ДоставкаПо, ОжиданиеПосещенияРазгрузки) Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ОжиданиеПосещенияРазгрузки > 0 Тогда 
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещенияРазгрузки);
						врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещенияРазгрузки);
					КонецЕсли;
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекРаспределяемыйЗаказ.ДоставкаС, ТекРаспределяемыйЗаказ.ДоставкаПо) Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТекТС.ВозвратВГараж Тогда
						Пункт1 = ТекРаспределяемыйЗаказ.ПунктРазгрузки;
						Пункт2 = АдресДепоВрем;
						Адрес1 = ТекРаспределяемыйЗаказ.АдресНазначения;
						Адрес2 = АдресДепо;
						
						текВремя      = 0;
						текРасстояние = 0;
						
						Если Пункт1 = Пункт2 Тогда 
							Если Не Адрес1 = Адрес2 Тогда 
								ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(ТекРаспределяемыйЗаказ.ЛатНазн, ТекРаспределяемыйЗаказ.ЛонНазн, ШиротаДепо, ДолготаДепо);
								текВремя = ДанныеПоКластеру.Время;
								текРасстояние = ДанныеПоКластеру.Расстояние;
							КонецЕсли;
							
						Иначе 
							Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
							Если Узел1 = Неопределено Тогда 
								Прервать;
							КонецЕсли;
							Узел2 = Узел1.Получить(Пункт2);
							Если Узел2 = Неопределено Тогда 
								Прервать;
							Иначе 
								текВремя = Узел2.Время;
								текРасстояние = Узел2.Расстояние;
							КонецЕсли;
						КонецЕсли;
						
						врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
							текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
						
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
					КонецЕсли;
					
					Если врОбщВремя > ТекТС.ДоступноеВремя Тогда 
						Продолжить;
					КонецЕсли;
					
					Если Не МаксимальноеЧислоПунктов = 0 Тогда 
						ТекЧислоПунктов = ТекТС.ВсегоПунктов + ТекТС.ДопЗаказыFTL.Количество() * 2;
						
						Если ТекЧислоПунктов > МаксимальноеЧислоПунктов Тогда 
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ОжиданиеПосещенияПогрузки = СложитьВремяЧЧММ(ОжиданиеПосещения, ОжиданиеТерминала);
					
					ЗафиксироватьТерминалПогрузкиИОкно(УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, Неопределено, Неопределено,
						Неопределено, текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо);
					
					ТекТС.ДопЗаказыFTL.Добавить(Новый Структура("заказ, Груз, СтрокаПакета, Количество, ОжиданиеПосещенияПогрузки, ОжиданиеПосещенияРазгрузки, текТерминал",
						ТекРаспределяемыйЗаказ.Ссылка, ТекРаспределяемыйЗаказ.Груз, ТекРаспределяемыйЗаказ.СтрокаПакета, ТекРаспределяемыйЗаказ.Количество,
						ОжиданиеПосещенияПогрузки, ОжиданиеПосещенияРазгрузки, текТерминал));
					Прервать;
				КонецЦикла;
			КонецЦикла;
			
			// Обход результата назначения. Если FTL заказы были назначены на ТС - выполняется размещение заказов в пул.
			Для Каждого ТекТС Из ТаблFTLТС Цикл 
				Если ТекТС.ДопЗаказыFTL.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ТабТС.Строки.Найти(ТекТС.ТС, "Ссылка") = Неопределено Тогда 
					Для Каждого ТекПул Из пулы Цикл 
						Если Не ТекПул.ТС = ТекТС.ТС Тогда 
							Продолжить;
						КонецЕсли;
						
						Для Каждого СтрокаДопЗаказа Из ТекТС.ДопЗаказыFTL Цикл 
							ТекПул.маршрут.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,Терминал, Время, Расстояние",
								СтрокаДопЗаказа.Заказ, СтрокаДопЗаказа.Груз, СтрокаДопЗаказа.СтрокаПакета, СтрокаДопЗаказа.Количество,
								Перечисления.уатТипыТочекМаршрута.Погрузка, СтрокаДопЗаказа.ОжиданиеПосещенияПогрузки, СтрокаДопЗаказа.текТерминал));
							ТекПул.маршрут.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,Терминал, Время, Расстояние",
								СтрокаДопЗаказа.Заказ, СтрокаДопЗаказа.Груз, СтрокаДопЗаказа.СтрокаПакета, СтрокаДопЗаказа.Количество,
								Перечисления.уатТипыТочекМаршрута.Разгрузка, СтрокаДопЗаказа.ОжиданиеПосещенияРазгрузки, СтрокаДопЗаказа.текТерминал));
						КонецЦикла;
					КонецЦикла;
					
				Иначе 
					мНовМаршрут = Новый Массив();
					
					Для Каждого СтрокаДопЗаказа Из ТекТС.ДопЗаказыFTL Цикл 
						мНовМаршрут.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,Терминал, Время, Расстояние",
							СтрокаДопЗаказа.Заказ, СтрокаДопЗаказа.Груз, СтрокаДопЗаказа.СтрокаПакета, СтрокаДопЗаказа.Количество, 
							Перечисления.уатТипыТочекМаршрута.Погрузка, СтрокаДопЗаказа.ОжиданиеПосещенияПогрузки, СтрокаДопЗаказа.текТерминал));
						мНовМаршрут.Добавить(Новый Структура("заказ,Груз,СтрокаПакета,Количество,Операция,Ожидание,Терминал, Время, Расстояние",
							СтрокаДопЗаказа.Заказ, СтрокаДопЗаказа.Груз, СтрокаДопЗаказа.СтрокаПакета, СтрокаДопЗаказа.Количество,
							Перечисления.уатТипыТочекМаршрута.Разгрузка, СтрокаДопЗаказа.ОжиданиеПосещенияРазгрузки, СтрокаДопЗаказа.текТерминал));
					КонецЦикла;
					
					пулы.Добавить(Новый Структура(
						"ТС, ДатаВыездаТС, маршрут, ВремяВыездаНаМаршрут, ТипТС, ВозвратВГараж",
						ТекТС.ТС, ТекТС.ВремяВыезда, мНовМаршрут, ТекТС.ВремяВыезда, ТекТС.ТипТС, ТекТС.ВозвратВГараж));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МенеджерВТ.Закрыть();
		
		// Если учет гаража возвращения и временные окна отключены - выполняется попытка
		// преобразовать кольцевой маршрут в линейный.
		Для Каждого ТекПул Из пулы Цикл 
			ЗаказыПостОбработка = Новый ТаблицаЗначений();
			ЗаказыПостОбработка.Колонки.Добавить("Ссылка",                        Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
			ЗаказыПостОбработка.Колонки.Добавить("СтрокаПакета",                  Новый ОписаниеТипов("Число, Неопределено"));
			ЗаказыПостОбработка.Колонки.Добавить("Груз",                          Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено"));
			ЗаказыПостОбработка.Колонки.Добавить("Количество",                    Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("ВесБрутто",                     Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("Объем",                         Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("КоличествоУпаковок",            Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("СтоянкаПунктОтправления",       Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("СтоянкаПунктНазначения",        Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("КатегорияПунктаОтправления",    Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
			ЗаказыПостОбработка.Колонки.Добавить("КатегорияПунктаНазначения",     Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
			ЗаказыПостОбработка.Колонки.Добавить("АдресОтправления",              Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
			ЗаказыПостОбработка.Колонки.Добавить("АдресНазначения",               Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
			ЗаказыПостОбработка.Колонки.Добавить("Время",                         Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("Расстояние",                    Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("ОтправлениеС",                  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
			ЗаказыПостОбработка.Колонки.Добавить("ОтправлениеПо",                 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
			ЗаказыПостОбработка.Колонки.Добавить("ДоставкаС",                     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
			ЗаказыПостОбработка.Колонки.Добавить("ДоставкаПо",                    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
			ЗаказыПостОбработка.Колонки.Добавить("ЛатОтпр",                       Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("ЛонОтпр",                       Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("ЛатНазн",                       Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("ЛонНазн",                       Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("Ожидание",                      Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("СекцииПоЗаказу",                Новый ОписаниеТипов("Массив"));
			ЗаказыПостОбработка.Колонки.Добавить("ВремяОтПредыдущегоПункта",      Новый ОписаниеТипов("Число"));
			ЗаказыПостОбработка.Колонки.Добавить("РасстояниеОтПредыдущегоПункта", Новый ОписаниеТипов("Число"));
			
			мсвАдресаЗаказов = Новый Массив();
			мсвАдресаЗаказов.Добавить(АдресДепо);
			
			мсвЗаказыПула = Новый Массив();
			Для Каждого ТекСтрокаМаршрута Из ТекПул.маршрут Цикл 
				Если Не ТекСтрокаМаршрута.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
					Продолжить;
				КонецЕсли;
				
				Если СжиматьЗаказы Тогда 
					СтрокиЗаказа = ТаблицаИсходЗаказов.Строки.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета), Истина);
				Иначе 
					СтрокиЗаказа = ТаблицаИсходЗаказов.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета));
				КонецЕсли;
				
				НовСтрока = ЗаказыПостОбработка.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокиЗаказа[0]);
				
				НовСтрока.Количество         = ТекСтрокаМаршрута.Количество;
				НовСтрока.ВесБрутто          = СтрокиЗаказа[0].ВесБрутто * (ТекСтрокаМаршрута.Количество / СтрокиЗаказа[0].Количество);
				НовСтрока.Объем              = СтрокиЗаказа[0].Объем * (ТекСтрокаМаршрута.Количество / СтрокиЗаказа[0].Количество);
				НовСтрока.КоличествоУпаковок = СтрокиЗаказа[0].КоличествоУпаковок * (ТекСтрокаМаршрута.Количество / СтрокиЗаказа[0].Количество);
				
				Если ТекСтрокаМаршрута.Свойство("СекцииПоЗаказу") Тогда 
					НовСтрока.СекцииПоЗаказу = ТекСтрокаМаршрута.СекцииПоЗаказу;
				КонецЕсли;
				
				НовСтрока.Время      = 999999999999999;
				НовСтрока.Расстояние = 999999999999999;
				
				мсвАдресаЗаказов.Добавить(НовСтрока.АдресОтправления);
				мсвАдресаЗаказов.Добавить(НовСтрока.АдресНазначения);
			КонецЦикла;
			
			МенеджерВТПостОбработка = Новый МенеджерВременныхТаблиц();
			
			ЗапросПереходовПостОбработка = Новый Запрос();
			ЗапросПереходовПостОбработка.МенеджерВременныхТаблиц = МенеджерВТПостОбработка;
			
			ЗапросПереходовПостОбработка.УстановитьПараметр("мсвАдресаЗаказов", мсвАдресаЗаказов);
			
			ЗапросПереходовПостОбработка.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	уатПунктыНазначения.Ссылка КАК Пункт,
			|	уатПунктыНазначения.Лат КАК Лат,
			|	уатПунктыНазначения.Лон КАК Лон
			|ПОМЕСТИТЬ ВТ_Пункты
			|ИЗ
			|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
			|ГДЕ
			|	уатПунктыНазначения.Ссылка В(&мсвАдресаЗаказов)";
			
			ЗапросПереходовПостОбработка.Выполнить();
			
			ЗапросПереходовПостОбработка.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Пункт1 КАК Пункт1,
			|	ВложенныйЗапрос.Пункт1Лат КАК Пункт1Лат,
			|	ВложенныйЗапрос.Пункт1Лон КАК Пункт1Лон,
			|	ВложенныйЗапрос.Пункт2 КАК Пункт2,
			|	ВложенныйЗапрос.Пункт2Лат КАК Пункт2Лат,
			|	ВложенныйЗапрос.Пункт2Лон КАК Пункт2Лон
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПунктыПогрузки.Пункт КАК Пункт1,
			|		ПунктыПогрузки.Лат КАК Пункт1Лат,
			|		ПунктыПогрузки.Лон КАК Пункт1Лон,
			|		ПунктыРазгрузки.Пункт КАК Пункт2,
			|		ПунктыРазгрузки.Лат КАК Пункт2Лат,
			|		ПунктыРазгрузки.Лон КАК Пункт2Лон
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ВТ_Пункты.Пункт КАК Пункт,
			|			ВТ_Пункты.Лат КАК Лат,
			|			ВТ_Пункты.Лон КАК Лон
			|		ИЗ
			|			ВТ_Пункты КАК ВТ_Пункты
			|		ГДЕ
			|			ВТ_Пункты.Лат <> 0
			|			И ВТ_Пункты.Лон <> 0) КАК ПунктыПогрузки,
			|		(ВЫБРАТЬ
			|			ВТ_Пункты.Пункт КАК Пункт,
			|			ВТ_Пункты.Лат КАК Лат,
			|			ВТ_Пункты.Лон КАК Лон
			|		ИЗ
			|			ВТ_Пункты КАК ВТ_Пункты
			|		ГДЕ
			|			ВТ_Пункты.Лат <> 0
			|			И ВТ_Пункты.Лон <> 0) КАК ПунктыРазгрузки) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуПунктами КАК ТаблицаВремяРасстояниеПрямое
			|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеПрямое.Пункт1
			|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеПрямое.Пункт2
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуПунктами КАК ТаблицаВремяРасстояниеОбратное
			|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеОбратное.Пункт2
			|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеОбратное.Пункт1
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
			|		КОНЕЦ = -1
			|	И ВЫБОР
			|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
			|		КОНЕЦ = -1";
			
			ВыборкаДляЗапросаOSM = ЗапросПереходовПостОбработка.Выполнить().Выбрать();
			Пока ВыборкаДляЗапросаOSM.Следующий() Цикл 
				мсвТочкиМаршрута = Новый Массив();
				мсвТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ВыборкаДляЗапросаOSM.Пункт1Лат, ВыборкаДляЗапросаOSM.Пункт1Лон));
				мсвТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ВыборкаДляЗапросаOSM.Пункт2Лат, ВыборкаДляЗапросаOSM.Пункт2Лон));
				
				ДанныеМаршрута = Неопределено;
				ТекстОшибкиOSM = "";
				Если уатЗащищенныеФункцииСервер.РассчитатьМаршрут(мсвТочкиМаршрута, ДанныеМаршрута, ТекстОшибкиOSM) Тогда 
					мВремяСек = ДанныеМаршрута.Время;
					мВремяЧас = Цел(мВремяСек / 3600);
					мВремяМин = Цел((мВремяСек - мВремяЧас * 3600) / 60);
					
					ТекВремя      = мВремяЧас + (мВремяМин / 100);
					ТекРасстояние = Окр(ДанныеМаршрута.Расстояние / 1000, 1);
					
					НаборЗаписей = РегистрыСведений.уатРасстоянияМеждуПунктами.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Пункт1.Установить(ВыборкаДляЗапросаOSM.Пункт1);
					НаборЗаписей.Отбор.Пункт2.Установить(ВыборкаДляЗапросаOSM.Пункт2);
					
					Запись = НаборЗаписей.Добавить();
					Запись.Пункт1     = ВыборкаДляЗапросаOSM.Пункт1;
					Запись.Пункт2     = ВыборкаДляЗапросаOSM.Пункт2;
					Запись.Время      = ТекВремя;
					Запись.Расстояние = ТекРасстояние;
					
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			
			ЗапросПереходовПостОбработка.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Пункт1 КАК Пункт1,
			|	ВложенныйЗапрос.Пункт2 КАК Пункт2,
			|	ВЫБОР
			|		КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
			|	КОНЕЦ КАК Время,
			|	ВЫБОР
			|		КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
			|	КОНЕЦ КАК Расстояние
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПунктыПогрузки.Пункт КАК Пункт1,
			|		ПунктыРазгрузки.Пункт КАК Пункт2
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ВТ_Пункты.Пункт КАК Пункт
			|		ИЗ
			|			ВТ_Пункты КАК ВТ_Пункты) КАК ПунктыПогрузки,
			|		(ВЫБРАТЬ
			|			ВТ_Пункты.Пункт КАК Пункт
			|		ИЗ
			|			ВТ_Пункты КАК ВТ_Пункты) КАК ПунктыРазгрузки) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуПунктами КАК ТаблицаВремяРасстояниеПрямое
			|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеПрямое.Пункт1
			|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеПрямое.Пункт2
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуПунктами КАК ТаблицаВремяРасстояниеОбратное
			|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеОбратное.Пункт2
			|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеОбратное.Пункт1
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
			|		КОНЕЦ <> -1
			|	И ВЫБОР
			|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
			|		КОНЕЦ <> -1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Пункты";
			
			СоотвПереходовПостОбработка = Новый Соответствие();
			
			ВыборкаПереходовПостОбработка = ЗапросПереходовПостОбработка.Выполнить().Выбрать();
			Пока ВыборкаПереходовПостОбработка.Следующий() Цикл 
				СтрокаП1 = СоотвПереходовПостОбработка.Получить(ВыборкаПереходовПостОбработка.Пункт1);
				Если СтрокаП1 = Неопределено Тогда 
					СоотвПереходовПостОбработка.Вставить(ВыборкаПереходовПостОбработка.Пункт1, Новый Соответствие());
					СтрокаП1 = СоотвПереходовПостОбработка.Получить(ВыборкаПереходовПостОбработка.Пункт1);
					СтрокаП1.Вставить(ВыборкаПереходовПостОбработка.Пункт1, Новый Структура("Время,Расстояние", 0, 0));
				КонецЕсли;
				
				СтрокаП2 = СтрокаП1.Получить(ВыборкаПереходовПостОбработка.Пункт2);
				Если СтрокаП2 = Неопределено Тогда 
					СтрокаП1.Вставить(ВыборкаПереходовПостОбработка.Пункт2, Новый Структура("Время,Расстояние", Неопределено, Неопределено));
					СтрокаП2 = СтрокаП1.Получить(ВыборкаПереходовПостОбработка.Пункт2);
				КонецЕсли;
				
				СтрокаП2.Время      = ВыборкаПереходовПостОбработка.Время;
				СтрокаП2.Расстояние = ВыборкаПереходовПостОбработка.Расстояние;
			КонецЦикла;
			
			МенеджерВТПостОбработка.Закрыть();
			
			Для Каждого СтрокаЗаказа Из ЗаказыПостОбработка Цикл 
				Если СтрокаЗаказа.АдресОтправления = СтрокаЗаказа.АдресНазначения Тогда 
					СтрокаЗаказа.Время      = 0;
					СтрокаЗаказа.Расстояние = 0;
					
				Иначе 
					Узел1 = СоотвПереходовПостОбработка.Получить(СтрокаЗаказа.АдресОтправления);
					Если Узел1 = Неопределено Тогда 
						ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(СтрокаЗаказа.ЛатОтпр, СтрокаЗаказа.ЛонОтпр, СтрокаЗаказа.ЛатНазн, СтрокаЗаказа.ЛонНазн);
						СтрокаЗаказа.Время      = ДанныеПоКоординатам.Время;
						СтрокаЗаказа.Расстояние = ДанныеПоКоординатам.Расстояние;
					Иначе 
						Узел2 = Узел1.Получить(СтрокаЗаказа.АдресНазначения);
						Если Узел2 = Неопределено Тогда 
							ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(СтрокаЗаказа.ЛатОтпр, СтрокаЗаказа.ЛонОтпр, СтрокаЗаказа.ЛатНазн, СтрокаЗаказа.ЛонНазн);
							СтрокаЗаказа.Время      = ДанныеПоКоординатам.Время;
							СтрокаЗаказа.Расстояние = ДанныеПоКоординатам.Расстояние;
						Иначе 
							СтрокаЗаказа.Время      = Узел2.Время;
							СтрокаЗаказа.Расстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ЗаказыПостОбработка.Сортировать("" + ?(РежимОптимизации = 0, "Время", "Расстояние") + ", АдресОтправления, АдресНазначения");
			
			// Заказы выстраиваются в порядке удаления от базы.
			// Выполняется расчет полученного маршрута.
			флОшибкаРасчета     = Ложь;
			мсвПосещенныеПункты = Новый Массив();
			врОбщВремя          = 0;
			врОбщРасстояние     = 0;
			
			Если ЗначениеЗаполнено(ТекПул.ДатаВыездаТС) Тогда 
				ВремяВыездаНаМаршрут = ТекПул.ДатаВыездаТС;
				
			Иначе 
				ВремяВыездаНаМаршрут = ТекПул.ВремяВыездаНаМаршрут;
			КонецЕсли;
			
			врТекВремяВТочке = ВремяВыездаНаМаршрут;
			
			Если Не ФормироватьСборныеМаршруты Тогда 
				// Время стоянок перед выездом.
				Для Каждого ТекСтрока Из ЗаказыПостОбработка Цикл 
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(ТекСтрока.АдресОтправления, ТекПул.ТипТС);
					
					ВремяСтоянкиВПункте = 0;
					
					Если мсвПосещенныеПункты.Найти(ТекСтрока.АдресОтправления) = Неопределено Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
						мсвПосещенныеПункты.Добавить(ТекСтрока.АдресОтправления);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, ТекСтрока.СтоянкаПунктОтправления);
					
					ОжиданиеПосещения = 0;
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекСтрока.ОтправлениеС, ТекСтрока.ОтправлениеПо, ОжиданиеПосещения) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					
					Если ОжиданиеПосещения > 0 Тогда 
						Если ЗаказыПостОбработка.Индекс(ТекСтрока) = 0 Тогда 
							ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеПосещения);
							врТекВремяВТочке = ВремяВыездаНаМаршрут;
						Иначе 
							флОшибкаРасчета = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				КонецЦикла;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Продолжить;
			КонецЕсли;
			
			Если УчитыватьОкноПогрузкиТерминалов И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекПул.ТерминалПосещениеС, ТекПул.ТерминалПосещениеПо) Тогда 
				флОшибкаРасчета = Истина;
				Продолжить;
			КонецЕсли;
			
			врПредАдрес = АдресДепо;
			врПредЛат   = ШиротаДепо;
			врПредЛон   = ДолготаДепо;
			
			Для Каждого ТекСтрока Из ЗаказыПостОбработка Цикл 
				Адрес1 = врПредАдрес;
				Адрес2 = ?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения);
				
				текЛат = ?(ФормироватьСборныеМаршруты, ТекСтрока.ЛатОтпр, ТекСтрока.ЛатНазн);
				текЛон = ?(ФормироватьСборныеМаршруты, ТекСтрока.ЛонОтпр, ТекСтрока.ЛонНазн);
				
				текВремя      = 0;
				текРасстояние = 0;
				
				Если Адрес1 = Адрес2 Тогда 
					текВремя      = 0;
					текРасстояние = 0;
					
				Иначе 
					Узел1 = СоотвПереходовПостОбработка.Получить(Адрес1);
					Если Узел1 = Неопределено Тогда 
						ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
						текВремя      = ДанныеПоКоординатам.Время;
						текРасстояние = ДанныеПоКоординатам.Расстояние;
						
					Иначе 
						Узел2 = Узел1.Получить(Адрес2);
						Если Узел2 = Неопределено Тогда 
							ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
							текВремя      = ДанныеПоКоординатам.Время;
							текРасстояние = ДанныеПоКоординатам.Расстояние;
						Иначе 
							текВремя      = Узел2.Время;
							текРасстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				врПредАдрес = Адрес2;
				врПредЛат   = текЛат;
				врПредЛон   = текЛон;
				
				врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
					текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
				
				врОбщРасстояние = врОбщРасстояние + текРасстояние;
				ТекСтрока.ВремяОтПредыдущегоПункта      = врВремя;
				ТекСтрока.РасстояниеОтПредыдущегоПункта = текРасстояние;
				
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
				
				Если УчитыватьОкнаПоЗаказам Тогда 
					НачалоОкна    = ?(ФормироватьСборныеМаршруты, ТекСтрока.ОтправлениеС, ТекСтрока.ДоставкаС);
					ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, ТекСтрока.ОтправлениеПо, ТекСтрока.ДоставкаПо);
					
					ОжиданиеПосещения = 0;
					Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					
					ТекСтрока.Ожидание = ОжиданиеПосещения;
					
					Если ОжиданиеПосещения > 0 Тогда 
						врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
						врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
					КонецЕсли;
				КонецЕсли;
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения), ТекПул.ТипТС);
				
				ВремяСтоянкиВПункте = 0;
				
				Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения)) = Неопределено Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения));
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, ?(ФормироватьСборныеМаршруты, ТекСтрока.СтоянкаПунктОтправления, ТекСтрока.СтоянкаПунктНазначения));
				
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
			КонецЦикла;
			
			Если флОшибкаРасчета Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ТекПул.ВозвратВГараж Тогда 
				Адрес1 = врПредАдрес;
				Адрес2 = АдресДепо;
				
				текВремя      = 0;
				текРасстояние = 0;
				
				Если Адрес1 = Адрес2 Тогда 
					текВремя      = 0;
					текРасстояние = 0;
					
				Иначе 
					Узел1 = СоотвПереходовПостОбработка.Получить(Адрес1);
					Если Узел1 = Неопределено Тогда 
						ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
						текВремя      = ДанныеПоКоординатам.Время;
						текРасстояние = ДанныеПоКоординатам.Расстояние;
						
					Иначе 
						Узел2 = Узел1.Получить(Адрес2);
						Если Узел2 = Неопределено Тогда 
							ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
							текВремя      = ДанныеПоКоординатам.Время;
							текРасстояние = ДанныеПоКоординатам.Расстояние;
						Иначе 
							текВремя      = Узел2.Время;
							текРасстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
					текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
				
				врОбщРасстояние = врОбщРасстояние + текРасстояние;
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			КонецЕсли;
			
			Если ФормироватьСборныеМаршруты Тогда 
				// Время стоянок при возвращении.
				Для Каждого ТекСтрока Из ЗаказыПостОбработка Цикл 
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(ТекСтрока.АдресНазначения, ТекПул.ТипТС);
					
					ВремяСтоянкиВПункте = 0;
					
					Если мсвПосещенныеПункты.Найти(ТекСтрока.АдресНазначения) = Неопределено Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
						мсвПосещенныеПункты.Добавить(ТекСтрока.АдресНазначения);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, ТекСтрока.СтоянкаПунктНазначения);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, ТекСтрока.ДоставкаС, ТекСтрока.ДоставкаПо) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				КонецЦикла;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не ОграничениеЧасов = 0 И врОбщВремя > ОграничениеЧасов Тогда 
				// Первышена максимальная длительность маршрута.
				Продолжить;
			КонецЕсли;
			
			Если Не ОграничениеПоРасстоянию = 0 И врОбщРасстояние > ОграничениеПоРасстоянию Тогда 
				// Превышена протяженность маршрута.
				Продолжить;
			КонецЕсли;
			
			Если Не МаксимальноеЧислоПунктов = 0 Тогда 
				мсвПунктыМаршрута = Новый Массив();
				мсвПунктыМаршрута.Добавить(АдресДепо);
				
				Для Каждого ТекЭлМаршрута Из ЗаказыПостОбработка Цикл 
					Если ФормироватьСборныеМаршруты Тогда 
						ТекАдресЗаказа = ТекЭлМаршрута.АдресОтправления;
					Иначе 
						ТекАдресЗаказа = ТекЭлМаршрута.АдресНазначения;
					КонецЕсли;
					
					Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
						мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
					КонецЕсли;
				КонецЦикла;
				
				Если ТекПул.ВозвратВГараж Тогда 
					Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = АдресДепо Тогда 
						мсвПунктыМаршрута.Добавить(АдресДепо);
					КонецЕсли;
				КонецЕсли;
				
				Если мсвПунктыМаршрута.Количество() > МаксимальноеЧислоПунктов Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Проверить, что новый маршрут стал не хуже старого.
			мсвПредПосещенныеПункты = Новый Массив();
			врПредОбщВремя          = 0;
			врПредОбщРасстояние     = 0;
			
			ПредВремяВыездаНаМаршрут = ТекПул.ВремяВыездаНаМаршрут;
			
			врПредТекВремяВТочке = ПредВремяВыездаНаМаршрут;
			
			Если Не ФормироватьСборныеМаршруты Тогда 
				// Время стоянок перед выездом.
				
				Для Каждого ТекСтрокаМаршрута Из ТекПул.маршрут Цикл 
					Если Не ТекСтрокаМаршрута.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
						Продолжить;
					КонецЕсли;
					
					Если СжиматьЗаказы Тогда 
						СтрокиЗаказа = ТаблицаИсходЗаказов.Строки.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета), Истина);
					Иначе 
						СтрокиЗаказа = ТаблицаИсходЗаказов.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета));
					КонецЕсли;
					
					ТекСтрока = СтрокиЗаказа[0];
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(ТекСтрока.АдресОтправления, ТекПул.ТипТС);
					
					ВремяСтоянкиВПункте = 0;
					
					Если мсвПредПосещенныеПункты.Найти(ТекСтрока.АдресОтправления) = Неопределено Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
						мсвПредПосещенныеПункты.Добавить(ТекСтрока.АдресОтправления);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, ТекСтрока.СтоянкаПунктОтправления);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врПредТекВремяВТочке, ТекСтрока.ОтправлениеС, ТекСтрока.ОтправлениеПо) Тогда 
						Прервать;
					КонецЕсли;
					
					врПредТекВремяВТочке = СложитьВремя1СЧЧММ(врПредТекВремяВТочке, ВремяСтоянкиВПункте);
					врПредОбщВремя = СложитьВремяЧЧММ(врПредОбщВремя, ВремяСтоянкиВПункте);
				КонецЦикла;
			КонецЕсли;
			
			Если УчитыватьОкноПогрузкиТерминалов И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врПредТекВремяВТочке, ТекПул.ТерминалПосещениеС, ТекПул.ТерминалПосещениеПо) Тогда 
				Продолжить;
			КонецЕсли;
			
			врПредАдрес = АдресДепо;
			врПредЛат   = ШиротаДепо;
			врПредЛон   = ДолготаДепо;
			
			Для Каждого ТекСтрокаМаршрута Из ТекПул.маршрут Цикл 
				Если Не ТекСтрокаМаршрута.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
					Продолжить;
				КонецЕсли;
				
				Если СжиматьЗаказы Тогда 
					СтрокиЗаказа = ТаблицаИсходЗаказов.Строки.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета), Истина);
				Иначе 
					СтрокиЗаказа = ТаблицаИсходЗаказов.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета));
				КонецЕсли;
				
				ТекСтрока = СтрокиЗаказа[0];
				
				Адрес1 = врПредАдрес;
				Адрес2 = ?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения);
				
				текЛат = ?(ФормироватьСборныеМаршруты, ТекСтрока.ЛатОтпр, ТекСтрока.ЛатНазн);
				текЛон = ?(ФормироватьСборныеМаршруты, ТекСтрока.ЛонОтпр, ТекСтрока.ЛонНазн);
				
				текВремя      = 0;
				текРасстояние = 0;
				
				Если Адрес1 = Адрес2 Тогда 
					текВремя      = 0;
					текРасстояние = 0;
					
				Иначе 
					Узел1 = СоотвПереходовПостОбработка.Получить(Адрес1);
					Если Узел1 = Неопределено Тогда 
						ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
						текВремя      = ДанныеПоКоординатам.Время;
						текРасстояние = ДанныеПоКоординатам.Расстояние;
						
					Иначе 
						Узел2 = Узел1.Получить(Адрес2);
						Если Узел2 = Неопределено Тогда 
							ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
							текВремя      = ДанныеПоКоординатам.Время;
							текРасстояние = ДанныеПоКоординатам.Расстояние;
						Иначе 
							текВремя      = Узел2.Время;
							текРасстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				врПредАдрес = Адрес2;
				врПредЛат   = текЛат;
				врПредЛон   = текЛон;
				
				врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
					текВремя, '00010101' + (врПредТекВремяВТочке - НачалоДня(врПредТекВремяВТочке)), ТабСкоростей);
				
				врПредОбщРасстояние = врПредОбщРасстояние + текРасстояние;
				врПредОбщВремя = СложитьВремяЧЧММ(врПредОбщВремя, врВремя);
				врПредТекВремяВТочке = СложитьВремя1СЧЧММ(врПредТекВремяВТочке, врВремя);
				
				Если УчитыватьОкнаПоЗаказам Тогда 
					НачалоОкна    = ?(ФормироватьСборныеМаршруты, ТекСтрока.ОтправлениеС, ТекСтрока.ДоставкаС);
					ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, ТекСтрока.ОтправлениеПо, ТекСтрока.ДоставкаПо);
					
					ОжиданиеПосещения = 0;
					Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врПредТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
						Прервать;
					КонецЕсли;
					
					Если ОжиданиеПосещения > 0 Тогда 
						врПредТекВремяВТочке = СложитьВремя1СЧЧММ(врПредТекВремяВТочке, ОжиданиеПосещения);
						врПредОбщВремя = СложитьВремяЧЧММ(врПредОбщВремя, ОжиданиеПосещения);
					КонецЕсли;
				КонецЕсли;
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения), ТекПул.ТипТС);
				
				ВремяСтоянкиВПункте = 0;
				
				Если мсвПредПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения)) = Неопределено Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					мсвПредПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекСтрока.АдресОтправления, ТекСтрока.АдресНазначения));
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, ?(ФормироватьСборныеМаршруты, ТекСтрока.СтоянкаПунктОтправления, ТекСтрока.СтоянкаПунктНазначения));
				
				врПредОбщВремя = СложитьВремяЧЧММ(врПредОбщВремя, ВремяСтоянкиВПункте);
				врПредТекВремяВТочке = СложитьВремя1СЧЧММ(врПредТекВремяВТочке, ВремяСтоянкиВПункте);
			КонецЦикла;
			
			Если ТекПул.ВозвратВГараж Тогда 
				Адрес1 = врПредАдрес;
				Адрес2 = АдресДепо;
				
				текВремя      = 0;
				текРасстояние = 0;
				
				Если Адрес1 = Адрес2 Тогда 
					текВремя      = 0;
					текРасстояние = 0;
					
				Иначе 
					Узел1 = СоотвПереходовПостОбработка.Получить(Адрес1);
					Если Узел1 = Неопределено Тогда 
						ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
						текВремя      = ДанныеПоКоординатам.Время;
						текРасстояние = ДанныеПоКоординатам.Расстояние;
						
					Иначе 
						Узел2 = Узел1.Получить(Адрес2);
						Если Узел2 = Неопределено Тогда 
							ДанныеПоКоординатам = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
							текВремя      = ДанныеПоКоординатам.Время;
							текРасстояние = ДанныеПоКоординатам.Расстояние;
						Иначе 
							текВремя      = Узел2.Время;
							текРасстояние = Узел2.Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
					текВремя, '00010101' + (врПредТекВремяВТочке - НачалоДня(врПредТекВремяВТочке)), ТабСкоростей);
				
				врПредОбщРасстояние = врПредОбщРасстояние + текРасстояние;
				врПредОбщВремя = СложитьВремяЧЧММ(врПредОбщВремя, врВремя);
				врПредТекВремяВТочке = СложитьВремя1СЧЧММ(врПредТекВремяВТочке, врВремя);
			КонецЕсли;
			
			Если ФормироватьСборныеМаршруты Тогда 
				// Время стоянок при возвращении.
				Для Каждого ТекСтрокаМаршрута Из ТекПул.маршрут Цикл 
					Если Не ТекСтрокаМаршрута.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
						Продолжить;
					КонецЕсли;
					
					Если СжиматьЗаказы Тогда 
						СтрокиЗаказа = ТаблицаИсходЗаказов.Строки.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета), Истина);
					Иначе 
						СтрокиЗаказа = ТаблицаИсходЗаказов.НайтиСтроки(Новый Структура("Ссылка, СтрокаПакета", ТекСтрокаМаршрута.Заказ, ТекСтрокаМаршрута.СтрокаПакета));
					КонецЕсли;
					
					ТекСтрока = СтрокиЗаказа[0];
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(ТекСтрока.АдресНазначения, ТекПул.ТипТС);
					
					ВремяСтоянкиВПункте = 0;
					
					Если мсвПредПосещенныеПункты.Найти(ТекСтрока.АдресНазначения) = Неопределено Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
						мсвПредПосещенныеПункты.Добавить(ТекСтрока.АдресНазначения);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, ТекСтрока.СтоянкаПунктНазначения);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врПредТекВремяВТочке, ТекСтрока.ДоставкаС, ТекСтрока.ДоставкаПо) Тогда 
						Прервать;
					КонецЕсли;
					
					врПредТекВремяВТочке = СложитьВремя1СЧЧММ(врПредТекВремяВТочке, ВремяСтоянкиВПункте);
					врПредОбщВремя = СложитьВремяЧЧММ(врПредОбщВремя, ВремяСтоянкиВПункте);
				КонецЦикла;
			КонецЕсли;
			
			Если РежимОптимизации = 0 Тогда 
				// Оптимизация по времени.
				Если врПредОбщВремя < врОбщВремя Тогда 
					// Новый маршрут не оптимален.
					Продолжить;
				КонецЕсли;
				
			Иначе 
				// Оптимизация по расстоянию.
				Если врПредОбщРасстояние < врОбщРасстояние Тогда 
					// Новый маршрут не оптимален.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Если полученный маршрут удовлетворяет всем ограничениям -
			// происходит перезапись старого маршрута новым.
			ТекПул.ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут;
			
			ТекПул.маршрут.Очистить();
			
			Для Каждого ТекСтрока Из ЗаказыПостОбработка Цикл 
				ДанныеЗаказа = Новый Структура();
				ДанныеЗаказа.Вставить("заказ",          ТекСтрока.Ссылка);
				ДанныеЗаказа.Вставить("Груз",           ТекСтрока.Груз);
				ДанныеЗаказа.Вставить("НомерСтроки",    ТекСтрока.СтрокаПакета);
				ДанныеЗаказа.Вставить("Количество",     ТекСтрока.Количество);
				ДанныеЗаказа.Вставить("Операция",       Перечисления.уатТипыТочекМаршрута.Погрузка);
				Если ФормироватьСборныеМаршруты Тогда
					ДанныеЗаказа.Вставить("Ожидание",   ТекСтрока.Ожидание);
					ДанныеЗаказа.Вставить("Время",      ТекСтрока.ВремяОтПредыдущегоПункта);
					ДанныеЗаказа.Вставить("Расстояние", ТекСтрока.РасстояниеОтПредыдущегоПункта);
				Иначе
					ДанныеЗаказа.Вставить("Ожидание",   0);
					ДанныеЗаказа.Вставить("Время",      0);
					ДанныеЗаказа.Вставить("Расстояние", 0);
				КонецЕсли;
				ДанныеЗаказа.Вставить("СекцииПоЗаказу", ТекСтрока.СекцииПоЗаказу);
				
				ТекПул.маршрут.Добавить(ДанныеЗаказа);
			КонецЦикла;
			
			Для Каждого ТекСтрока Из ЗаказыПостОбработка Цикл 
				ДанныеЗаказа = Новый Структура();
				ДанныеЗаказа.Вставить("заказ",          ТекСтрока.Ссылка);
				ДанныеЗаказа.Вставить("Груз",           ТекСтрока.Груз);
				ДанныеЗаказа.Вставить("НомерСтроки",    ТекСтрока.СтрокаПакета);
				ДанныеЗаказа.Вставить("Количество",     ТекСтрока.Количество);
				ДанныеЗаказа.Вставить("Операция",       Перечисления.уатТипыТочекМаршрута.Разгрузка);
				Если ФормироватьСборныеМаршруты Тогда
					ДанныеЗаказа.Вставить("Ожидание",   0);
					ДанныеЗаказа.Вставить("Время",      0);
					ДанныеЗаказа.Вставить("Расстояние", 0);
				Иначе
					ДанныеЗаказа.Вставить("Ожидание",   ТекСтрока.Ожидание);
					ДанныеЗаказа.Вставить("Время",      ТекСтрока.ВремяОтПредыдущегоПункта);
					ДанныеЗаказа.Вставить("Расстояние", ТекСтрока.РасстояниеОтПредыдущегоПункта);
				КонецЕсли;
				ДанныеЗаказа.Вставить("СекцииПоЗаказу", ТекСтрока.СекцииПоЗаказу);
				
				ТекПул.маршрут.Добавить(ДанныеЗаказа);
			КонецЦикла;
			
			// В строке каждого заказа указано время/расстояние от предыдущего пункта,
			// а должно быть время/расстояние до следующего пункта, поэтому их надо сдвинуть
			Для Сч = 0 По ТекПул.маршрут.Количество()-2 Цикл
				ТекущаяСтрока   = ТекПул.маршрут[Сч];
				СледующаяСтрока = ТекПул.маршрут[Сч+1];
				ТекущаяСтрока.Время      = СледующаяСтрока.Время;
				ТекущаяСтрока.Расстояние = СледующаяСтрока.Расстояние;
			КонецЦикла;
			Если ТекПул.маршрут.Количество() > 0 Тогда
				ПоследняяСтрока = ТекПул.маршрут[ТекПул.маршрут.Количество()-1];
				ПоследняяСтрока.Время      = 0;
				ПоследняяСтрока.Расстояние = 0;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПула Из пулы Цикл 
			СтрокаПула.Вставить("НаправлениеПеревозки", ТекНаправление.НаправлениеПеревозки);
			КонечныеПулы.Добавить(СтрокаПула);
			
			МаксИндСтрок = ВхМсвТС.Количество() - 1;
			Для ИндСтроки = 0 По МаксИндСтрок Цикл 
				Если ВхМсвТС[МаксИндСтрок - ИндСтроки].ТС = СтрокаПула.ТС Тогда 
					ВхМсвТС.Удалить(МаксИндСтрок - ИндСтроки);
				КонецЕсли;
			КонецЦикла;
			
			МаксИндСтрок = ВхМсвВиртТС.Количество() - 1;
			Для ИндСтроки = 0 По МаксИндСтрок Цикл 
				Если ВхМсвВиртТС[МаксИндСтрок - ИндСтроки].ТС = СтрокаПула.ТС Тогда 
					ВхМсвВиртТС[МаксИндСтрок - ИндСтроки].КоличествоВиртуальныхТС = ВхМсвВиртТС[МаксИндСтрок - ИндСтроки].КоличествоВиртуальныхТС - 1;
					Если ВхМсвВиртТС[МаксИндСтрок - ИндСтроки].КоличествоВиртуальныхТС < 1 Тогда 
						ВхМсвВиртТС.Удалить(МаксИндСтрок - ИндСтроки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// По окончании маршрутизации результат помещается во временное хранилище.
	// Данные из хранилища извлекаются на стороне АРМ Логиста.
	ТекстНСТР = НСтр("en='Executing of orders routing';ru='Выполняется маршрутизация заказов'");
	ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, пулы", ТекстНСТР, КонечныеПулы), АдресВрХранилища);
	
КонецПроцедуры

// Процедура - Выполнить распределение заказов по алгоритму "Фиксированные маршруты"
//
// Параметры:
//  АдресВрХранилища							 - 	 - 
//  мсвЗаказы									 - 	 - 
//  мсвТС										 - 	 - 
//  УчитыватьРазрешенныеТипыТС					 - 	 - 
//  УчитыватьОкнаПоЗаказам						 - 	 - 
//  УчитыватьОкноПогрузкиТерминалов				 - 	 - 
//  ИспользоватьВПриоритетеСобственныйТранспорт	 - 	 - 
//  ПонижающийКоэффициентЗагрузкиКузоваПоОбъему	 - 	 - 
//  ПонижающийКоэффициентЗагрузкиКузоваПоВесу	 - 	 - 
//
Процедура ВыполнитьРаспределениеЗаказовПоМаршрутам(АдресВрХранилища, мсвЗаказы, мсвТС,
		УчитыватьКоличество = Истина, УчитыватьОбъем = Истина, УчитыватьГрузоподъемность = Истина,
		ПонижающийКоэффициентЗагрузкиКузоваПоОбъему=100, ПонижающийКоэффициентЗагрузкиКузоваПоВесу=100,
		НастройкаНесколькоМаршрутныхЛистовНаТС = Ложь) Экспорт
	
	// Подготовка данных.
	// Помещение сообщения во временное хранилище (используется для отображения в форме длительной операции.
	ТекстНСТР = НСтр("en='Executing of orders routing';ru='Выполняется маршрутизация заказов'");
	ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю", ТекстНСТР), АдресВрХранилища);
	
	ДанныеПоЗаказам = СформироватьТаблицуЗаказовДляРаспределения(мсвЗаказы);
	
	ДопДанные = СформироватьДопДанныеДляРаспределения(мсвТС, Ложь, ДанныеПоЗаказам.МассивПунктов,
		Ложь, ПонижающийКоэффициентЗагрузкиКузоваПоОбъему, 
		ПонижающийКоэффициентЗагрузкиКузоваПоВесу);
	
	СтоянкиПоТипамТС = ДопДанные.СтоянкиПоТипамТС;
	
	ДанныеПоМаршрутам = ПолучитьМаршрутыПоЗаказам(мсвЗаказы);
	
	ТаблицаЧастоты = ДанныеПоМаршрутам.МаршрутыПоЗаказам.Скопировать();
	ТаблицаЧастоты.Свернуть("Маршрут", "Частота");
	
	ТабЗаказов = ДанныеПоЗаказам.ТаблицаЗаказов;
	
	СоотРазрешенныеТСПоЗаказам = Новый Соответствие();
	
	ТабЗаказов.Сортировать("Приоритет Убыв, ЗаказГрузоотправителя Убыв");
	ТабЗаказов.Индексы.Добавить("Ссылка");
	
	ТабТС = ДопДанные.ТабТС;
		
	пулы = Новый ТаблицаЗначений();
	пулы.Колонки.Добавить("Маршрут",                            Новый ОписаниеТипов("СправочникСсылка.уатМаршруты"));
	пулы.Колонки.Добавить("ТС",                                 Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	пулы.Колонки.Добавить("ПосещенныеПункты",                   Новый ОписаниеТипов("Массив"));
	пулы.Колонки.Добавить("РазмещенныеЗаказы",                  Новый ОписаниеТипов("ТаблицаЗначений"));
	пулы.Колонки.Добавить("МаксимальныйВес",                    Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("МаксимальныйОбъем",                  Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("ВсегоУпаковок",                      Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("ГрузоподъемностьТС",                 Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("ОбъемКузоваТС",                      Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("МаксимальноеКоличествоУпаковокТС",   Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("ПорядокТС",                          Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("ТипТС",                              Новый ОписаниеТипов("СправочникСсылка.уатТипыТС"));
	пулы.Колонки.Добавить("ПриоритетТС",                        Новый ОписаниеТипов("Число"));
	пулы.Колонки.Добавить("ВремяВыездаНаМаршрут",               Новый ОписаниеТипов("Дата"));
	пулы.Колонки.Добавить("IDМаршрутногоЛиста",                 Новый ОписаниеТипов("Строка"));
	пулы.Колонки.Добавить("ТСУниверсальное",                    Новый ОписаниеТипов("Булево"));
	пулы.Колонки.Добавить("ЗапрещеноИзменениеМаршрутногоЛиста", Новый ОписаниеТипов("Булево"));
	
	// Заполняем пулы маршрутов существующими данными маршрутных листов, в случае если проводится допланирование
	Для Каждого ТекТС Из мсвТС Цикл
		Если ТекТС.Свойство("СуществующиеМаршрутныеЛисты") Тогда
			Для Каждого ДанныеМаршрутногоЛиста Из ТекТС.СуществующиеМаршрутныеЛисты Цикл
				НайденныеСтроки = ТабТС.НайтиСтроки(Новый Структура("Ссылка", ТекТС.ТС));
				ТекСтрокаТС = Неопределено;
				Для Каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
					Если ТекНайденнаяСтрока.Маршрут = ДанныеМаршрутногоЛиста.Маршрут Тогда
						ТекСтрокаТС = ТекНайденнаяСтрока;
						Прервать;
					ИначеЕсли Не ЗначениеЗаполнено(ТекНайденнаяСтрока.Маршрут) Тогда
						ТекСтрокаТС = ТекНайденнаяСтрока;
					КонецЕсли;
				КонецЦикла;
				Если ТекСтрокаТС = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПула = Неопределено;
				МаксимальныйВес = 0;
				МаксимальныйОбъем = 0;
				ВсегоУпаковок = 0;
				ПодходящийМаршрут = Новый Структура("Маршрут, IDМаршрутногоЛиста", ДанныеМаршрутногоЛиста.Маршрут, ДанныеМаршрутногоЛиста.IDМаршрутногоЛиста);
				мсвУчтенныхЗаказов = Новый Массив;
				
				НайденныеСтроки = ТабЗаказов.НайтиСтроки(Новый Структура("IDМаршрутногоЛиста", ДанныеМаршрутногоЛиста.IDМаршрутногоЛиста));
				Для Каждого ДанныеЗаказа Из НайденныеСтроки Цикл
					МаксимальныйВес   = МаксимальныйВес + ДанныеЗаказа.ВесБрутто;
					МаксимальныйОбъем = МаксимальныйОбъем + ДанныеЗаказа.Объем;
					ВсегоУпаковок     = ВсегоУпаковок + ДанныеЗаказа.КоличествоУпаковок;
					ДобавитьЗаказВПул(пулы, ТабТС, ДанныеПоМаршрутам, СтрокаПула, ТекСтрокаТС, ДанныеЗаказа, ПодходящийМаршрут,
						МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, мсвУчтенныхЗаказов, ДанныеМаршрутногоЛиста.ЗапрещеноИзменениеМаршрутногоЛиста);
					ТекСтрокаТС = Неопределено;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мсвУчтенныхЗаказов = Новый Массив;
	Для Каждого ТекСтрокаЗаказа Из ТабЗаказов Цикл 
		
		Если ТекСтрокаЗаказа.МаршрутныйЛистСоздан Тогда
			// Ничего делать не надо, т.к. этот заказ (груз) уже распределен в Маршрутный лист, 
			// и сейчас используется только для допланирования.
			Продолжить;
		КонецЕсли;
		
		ТабПодходящихМаршрутов = Новый ТаблицаЗначений();
		ТабПодходящихМаршрутов.Колонки.Добавить("Маршрут",               Новый ОписаниеТипов("СправочникСсылка.уатМаршруты"));
		ТабПодходящихМаршрутов.Колонки.Добавить("ТС",                    Новый ОписаниеТипов("СправочникСсылка.уатТС"));
		ТабПодходящихМаршрутов.Колонки.Добавить("КритерийОптимальности", Новый ОписаниеТипов("Число"));
		ТабПодходящихМаршрутов.Колонки.Добавить("IDМаршрутногоЛиста",    Новый ОписаниеТипов("Строка"));
		ТабПодходящихМаршрутов.Колонки.Добавить("ИндексСтрокиПула",      Новый ОписаниеТипов("Число"));
		
		РазрешенныеМаршруты = ДанныеПоМаршрутам.МаршрутыПоЗаказам.НайтиСтроки(Новый Структура("Заказ", ТекСтрокаЗаказа.ЗаказГрузоотправителя));
		Для Каждого РазрешенныйМаршрут Из РазрешенныеМаршруты Цикл
			
			Если ТабТС.Количество() Тогда 
				НовСтрока = ТабПодходящихМаршрутов.Добавить();
				НовСтрока.Маршрут = РазрешенныйМаршрут.Маршрут;
				НовСтрока.ТС      = Справочники.уатТС.ПустаяСсылка();
				Если ТекСтрокаЗаказа.ПунктПогрузки = ТекСтрокаЗаказа.ПунктРазгрузки Тогда 
					КоличествоПосещенных = 1;
				Иначе 
					КоличествоПосещенных = 2;
				КонецЕсли;
				ЧастотаИспользования = ТаблицаЧастоты.НайтиСтроки(Новый Структура("Маршрут", РазрешенныйМаршрут.Маршрут))[0].Частота;
				НовСтрока.КритерийОптимальности = КоличествоПосещенных / РазрешенныйМаршрут.КоличествоПунктов + ЧастотаИспользования;
			КонецЕсли;
			
			Для Индекс = 0 По пулы.Количество()-1 Цикл
				СтрокаПула = пулы[Индекс];
				Если СтрокаПула.Маршрут = РазрешенныйМаршрут.Маршрут И Не СтрокаПула.ЗапрещеноИзменениеМаршрутногоЛиста Тогда 
					НовСтрока = ТабПодходящихМаршрутов.Добавить();
					НовСтрока.Маршрут = СтрокаПула.Маршрут;
					НовСтрока.ТС      = СтрокаПула.ТС;
					НовСтрока.ИндексСтрокиПула = Индекс;
					
					КоличествоПосещенных = СтрокаПула.ПосещенныеПункты.Количество();
					
					Если СтрокаПула.ПосещенныеПункты.Найти(ТекСтрокаЗаказа.ПунктПогрузки) = Неопределено Тогда 
						КоличествоПосещенных = КоличествоПосещенных + 1;
					КонецЕсли;
					
					Если Не ТекСтрокаЗаказа.ПунктПогрузки = ТекСтрокаЗаказа.ПунктРазгрузки 
						И СтрокаПула.ПосещенныеПункты.Найти(ТекСтрокаЗаказа.ПунктРазгрузки) = Неопределено Тогда 
						КоличествоПосещенных = КоличествоПосещенных + 1;
					КонецЕсли;
					
					ЧастотаИспользования = ТаблицаЧастоты.НайтиСтроки(Новый Структура("Маршрут", РазрешенныйМаршрут.Маршрут))[0].Частота;
					НовСтрока.КритерийОптимальности = КоличествоПосещенных / РазрешенныйМаршрут.КоличествоПунктов + ЧастотаИспользования;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТабПодходящихМаршрутов.Сортировать("КритерийОптимальности Убыв , ТС Убыв");
		
		Для Каждого ПодходящийМаршрут Из ТабПодходящихМаршрутов Цикл 
			СтрокаПула = Неопределено;
			МаксимальныйВес   = 0;
			МаксимальныйОбъем = 0;
			ВсегоУпаковок     = 0;
			
			Если ЗначениеЗаполнено(ПодходящийМаршрут.ТС) Тогда 
				// Если используются виртуальные ТС, то недостаточно поиска по маршруту и ТС, т.к. виртуальные ТС могут совпадать
				СтрокаПула = пулы[ПодходящийМаршрут.ИндексСтрокиПула];
				
				МаксимальныйВес   = СтрокаПула.МаксимальныйВес;
				МаксимальныйОбъем = СтрокаПула.МаксимальныйОбъем;
				ВсегоУпаковок     = СтрокаПула.ВсегоУпаковок;
			КонецЕсли;
			
			МаксимальныйВес   = МаксимальныйВес + ТекСтрокаЗаказа.ВесБрутто;
			МаксимальныйОбъем = МаксимальныйОбъем + ТекСтрокаЗаказа.Объем;
			ВсегоУпаковок     = ВсегоУпаковок + ТекСтрокаЗаказа.КоличествоУпаковок;
			
			мСтрокаТабТС = Неопределено;
			
			// Изменение (или выбор) ТС, назначенного для пула
			Если СтрокаПула = Неопределено
				Или ((СтрокаПула.ГрузоподъемностьТС <> 0 И МаксимальныйВес > СтрокаПула.ГрузоподъемностьТС И УчитыватьГрузоподъемность)
				Или (СтрокаПула.ОбъемКузоваТС <> 0 И МаксимальныйОбъем > СтрокаПула.ОбъемКузоваТС И УчитыватьОбъем)
				Или (СтрокаПула.МаксимальноеКоличествоУпаковокТС <> 0 И ВсегоУпаковок > СтрокаПула.МаксимальноеКоличествоУпаковокТС И УчитыватьКоличество)) Тогда
				
				Если Не (СтрокаПула = Неопределено) И ЗначениеЗаполнено(СтрокаПула.IDМаршрутногоЛиста) Тогда
					// При допланировании изменение ТС, назначенного для Маршрутного листа, не допускается.
					Продолжить;
				КонецЕсли;
				
				ТабТСМаршрута = ТабТС.СкопироватьКолонки();
				ЗакрепленныеЗаМаршрутомТС = ТабТС.НайтиСтроки(Новый Структура("Маршрут", ПодходящийМаршрут.Маршрут));
				// Первый приоритет - у ТС, распределенных на данный маршрут, не имеющих других сформированных МЛ.
				// Второй приоритет - у ТС, распределенных на данный маршрут, имеющих сформированные МЛ по другим маршрутам.
				// Второй приоритет разрешен только при включенном флаге "Несколько маршрутных листов на одно ТС".
				ТСВторогоПриоритета = Новый Массив;
				Для Каждого ТСМаршрута Из ЗакрепленныеЗаМаршрутомТС Цикл
					Если пулы.Найти(ТСМаршрута.Ссылка, "ТС") = Неопределено Тогда
						НовыйТС = ТабТСМаршрута.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйТС, ТСМаршрута);
					ИначеЕсли НастройкаНесколькоМаршрутныхЛистовНаТС Тогда
						ТСВторогоПриоритета.Добавить(ТСМаршрута);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТСМаршрута Из ТСВторогоПриоритета Цикл
					НовыйТС = ТабТСМаршрута.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйТС, ТСМаршрута);
				КонецЦикла;
				
				// Третий приоритет - у универсальных ТС, не закрепленные ни за каким маршрутом, не имеющих сформированных МЛ
				УниверсальныеТС = ТабТС.НайтиСтроки(Новый Структура("Маршрут", Справочники.уатМаршруты.ПустаяСсылка()));
				Для Каждого ТСМаршрута Из УниверсальныеТС Цикл
					НовыйТС = ТабТСМаршрута.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйТС, ТСМаршрута);
				КонецЦикла;
				
				Для Каждого ТекЭлТабТС Из ТабТСМаршрута Цикл 
					
					Если (ТекЭлТабТС.Грузоподъемность = 0 Или ТекЭлТабТС.Грузоподъемность >= МаксимальныйВес Или Не УчитыватьГрузоподъемность)
						И (ТекЭлТабТС.ОбъемКузова = 0 Или ТекЭлТабТС.ОбъемКузова >= МаксимальныйОбъем Или Не УчитыватьОбъем)
						И (ТекЭлТабТС.МаксимальноеКоличествоУпаковок = 0 Или ТекЭлТабТС.МаксимальноеКоличествоУпаковок >= ВсегоУпаковок Или Не УчитыватьКоличество) Тогда 
						мСтрокаТабТС = ТекЭлТабТС;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если мСтрокаТабТС = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПула = Неопределено И мСтрокаТабТС = Неопределено Тогда 
				Продолжить;
			Иначе
				ДобавитьЗаказВПул(пулы, ТабТС, ДанныеПоМаршрутам, СтрокаПула, мСтрокаТабТС, ТекСтрокаЗаказа, ПодходящийМаршрут,
					МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, мсвУчтенныхЗаказов);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	РезультатРаспределения = Новый Массив();
	
	Для Каждого ТекСтрока Из пулы Цикл
		// Игнорируем маршрутный лист, который не мог быть изменен
		Если ТекСтрока.ЗапрещеноИзменениеМаршрутногоЛиста Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрока.РазмещенныеЗаказы.Сортировать("Порядок Возр, МаршрутныйЛистСоздан Убыв");
		МаршрутыйЛистМодифицирован = Ложь;
		РазмещенныеЗаказы = Новый Массив();
		
		Для Каждого СтрокаПогрузки Из ТекСтрока.РазмещенныеЗаказы Цикл 
			СтрокаЗаказа = ТабЗаказов.Найти(СтрокаПогрузки.Заказ, "Ссылка");
			
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("Заказ",        СтрокаЗаказа.ЗаказГрузоотправителя);
			ДанныеСтроки.Вставить("Груз",         СтрокаЗаказа.Груз);
			ДанныеСтроки.Вставить("СтрокаПакета", СтрокаЗаказа.СтрокаПакета);
			ДанныеСтроки.Вставить("Количество",   СтрокаЗаказа.Количество);
			ДанныеСтроки.Вставить("Операция",     Перечисления.уатТипыТочекМаршрута.Погрузка);
			ДанныеСтроки.Вставить("ОкноС",        СтрокаЗаказа.ЗаказГрузоотправителя.ОтправлениеС);
			ДанныеСтроки.Вставить("ОкноПо",       СтрокаЗаказа.ЗаказГрузоотправителя.ОтправлениеПо);
			ДанныеСтроки.Вставить("МаршрутныйЛистСоздан", СтрокаЗаказа.МаршрутныйЛистСоздан);
			ДанныеСтроки.Вставить("Адрес",        СтрокаЗаказа.ПунктПогрузки);
			Если Не СтрокаЗаказа.МаршрутныйЛистСоздан Тогда
				// В маршрутный лист добавлен заказ, которого там раньше не было
				МаршрутыйЛистМодифицирован = Истина;
			КонецЕсли;

			РазмещенныеЗаказы.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		Для Каждого СтрокаРазгрузки Из ТекСтрока.РазмещенныеЗаказы Цикл 
			СтрокаЗаказа = ТабЗаказов.Найти(СтрокаРазгрузки.Заказ, "Ссылка");
			
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("Заказ",        СтрокаЗаказа.ЗаказГрузоотправителя);
			ДанныеСтроки.Вставить("Груз",         СтрокаЗаказа.Груз);
			ДанныеСтроки.Вставить("СтрокаПакета", СтрокаЗаказа.СтрокаПакета);
			ДанныеСтроки.Вставить("Количество",   СтрокаЗаказа.Количество);
			ДанныеСтроки.Вставить("Операция",     Перечисления.уатТипыТочекМаршрута.Разгрузка);
			ДанныеСтроки.Вставить("ОкноС",        СтрокаЗаказа.ЗаказГрузоотправителя.ДоставкаС);
			ДанныеСтроки.Вставить("ОкноПо",       СтрокаЗаказа.ЗаказГрузоотправителя.ДоставкаПо);
			ДанныеСтроки.Вставить("МаршрутныйЛистСоздан", СтрокаЗаказа.МаршрутныйЛистСоздан);
			ДанныеСтроки.Вставить("Адрес",        СтрокаЗаказа.ПунктРазгрузки);
			Если Не СтрокаЗаказа.МаршрутныйЛистСоздан Тогда
				// В маршрутный лист добавлен заказ, которого там раньше не было
				МаршрутыйЛистМодифицирован = Истина;
			КонецЕсли;
			
			РазмещенныеЗаказы.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ДанныеРазмещения = Новый Структура();
		ДанныеРазмещения.Вставить("ТС",                   ТекСтрока.ТС);
		ДанныеРазмещения.Вставить("маршрут",              РазмещенныеЗаказы);
		ДанныеРазмещения.Вставить("ВремяВыездаНаМаршрут", ТекСтрока.ВремяВыездаНаМаршрут);
		ДанныеРазмещения.Вставить("ПодобранныйМаршрут",   ТекСтрока.Маршрут);
		ДанныеРазмещения.Вставить("НочнойМаршрут",        ТекСтрока.Маршрут.НочнойМаршрут);
		ДанныеРазмещения.Вставить("IDМаршрутногоЛиста",   ТекСтрока.IDМаршрутногоЛиста);
		ДанныеРазмещения.Вставить("Модифицированность",   МаршрутыйЛистМодифицирован);
		
		РезультатРаспределения.Добавить(ДанныеРазмещения);
	КонецЦикла;
	
	// По окончании маршрутизации результат помещается во временное хранилище.
	// Данные из хранилища извлекаются на стороне АРМ Логиста.
	ТекстНСТР = НСтр("en='Executing of orders routing';ru='Выполняется маршрутизация заказов'");
	ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, пулы", ТекстНСТР, РезультатРаспределения), АдресВрХранилища);
	
КонецПроцедуры

#Область СлужебныеМетодыДляАлгоритмаКларкаРайта

// Функция - Получить данные размещения заказов по секциям
//
// Параметры:
//  ЗаказыКРазмещению		 - 	 - 
//  ДеревоТС				 - 	 - Если в дереве нет строк, то мы не можем задействовать новые ТС.
//  СмешиватьГрузыВСекциях	 - 	 - 
//  ТекущиеСекции			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьДанныеРазмещенияЗаказовПоСекциям(ЗаказыКРазмещению, ДеревоТС, СмешиватьГрузыВСекциях,
	ТекущиеСекции=Неопределено, РазрешеноЗаменятьТС = Ложь) Экспорт
	
	ДанныеРазмещенияЗаказовПоСекциям = Новый Структура(
		"Размещено, СтрокиДерева, ТаблицаРазмещения", 
		Ложь, 
		Новый Массив(), 
		Новый ТаблицаЗначений()
	);
	
	ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Колонки.Добавить("ТС",             Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Колонки.Добавить("Секция",         Новый ОписаниеТипов("СправочникСсылка.уатСекцииТС"));
	ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Колонки.Добавить("ОбъемСекции",    Новый ОписаниеТипов("Число"));
	ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Колонки.Добавить("СвободныйОбъем", Новый ОписаниеТипов("Число"));
	ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Колонки.Добавить("Груз",           Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура, Неопределено, Строка"));
	ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Колонки.Добавить("Заказы",         Новый ОписаниеТипов("Массив"));
	
	флРазмещено = Истина;
	
	Если ТекущиеСекции = Неопределено Тогда 
		флРазмещено = Ложь;
		
	Иначе 
		Для Каждого ТекСтрока Из ТекущиеСекции Цикл 
			НовСтрока = ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Добавить();
			НовСтрока.ТС             = ТекСтрока.ТС;
			НовСтрока.Секция         = ТекСтрока.Секция;
			НовСтрока.ОбъемСекции    = ТекСтрока.ОбъемСекции;
			НовСтрока.СвободныйОбъем = ТекСтрока.ОбъемСекции;
		КонецЦикла;
		
		ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Сортировать("СвободныйОбъем ВОЗР");
		
		Для Каждого ТекЗаказ Из ЗаказыКРазмещению Цикл 
			Если Не флРазмещено Тогда 
				Прервать;
			КонецЕсли;
			
			ТребуетсяРазместить = ТекЗаказ.Объем;
			
			Пока ТребуетсяРазместить > 0 Цикл 
				ПодходящаяСекция = Неопределено;
				Для Каждого ТекСекция Из ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения Цикл 
					Если ТекСекция.СвободныйОбъем > 0 И ((СмешиватьГрузыВСекциях 
							И (ТекСекция.Заказы.Количество() = 0 
							Или (ТекСекция.Заказы.Количество() <> 0 И ТекСекция.Груз = ТекЗаказ.Груз)))
							Или (Не СмешиватьГрузыВСекциях И ТекСекция.Заказы.Количество() = 0)) Тогда 
						// Секция подходит.
						ПодходящаяСекция = ТекСекция;
					Иначе 
						Продолжить;
					КонецЕсли;
					
					Если ПодходящаяСекция.СвободныйОбъем >= ТребуетсяРазместить Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ПодходящаяСекция = Неопределено Тогда 
					Прервать;
					
				Иначе 
					Если ТребуетсяРазместить > ПодходящаяСекция.СвободныйОбъем Тогда 
						КоличествоРазместить = ПодходящаяСекция.СвободныйОбъем;
					Иначе 
						КоличествоРазместить = ТребуетсяРазместить;
					КонецЕсли;
					
					ПодходящаяСекция.СвободныйОбъем = ПодходящаяСекция.СвободныйОбъем - КоличествоРазместить;
					ТребуетсяРазместить = ТребуетсяРазместить - КоличествоРазместить;
					
					ПодходящаяСекция.Груз = ТекЗаказ.Груз;
					
					ПодходящаяСекция.Заказы.Добавить(Новый Структура("Заказ, Объем", ТекЗаказ.Заказ, КоличествоРазместить));
				КонецЕсли;
			КонецЦикла;
			
			Если ТребуетсяРазместить > 0 И РазрешеноЗаменятьТС Тогда
				// Грузы не поместились в существующие ТС. Будем пытаться изменить состав ТС.
				флРазмещено = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если флРазмещено Тогда 
		ДанныеРазмещенияЗаказовПоСекциям.Размещено = Истина;
		
	Иначе 
		флРазмещено = Истина;
		ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Очистить();
		
		НеразмещенныйВесЗаказов   = 0;
		НеразмещенныйОбъемЗаказов = 0;
		Для Каждого ТекЗаказ Из ЗаказыКРазмещению Цикл 
			НеразмещенныйВесЗаказов   = НеразмещенныйВесЗаказов + ТекЗаказ.ВесБрутто;
			НеразмещенныйОбъемЗаказов = НеразмещенныйОбъемЗаказов + ТекЗаказ.Объем;
		КонецЦикла;
		
		ДеревоТС.Строки.Сортировать("ОбъемКузова ВОЗР");
		
		Пока НеразмещенныйОбъемЗаказов > 0 Цикл 
			ПодходящееТС = Неопределено;
			Для Каждого ТекСтрокаДерева Из ДеревоТС.Строки Цикл 
				Если ТекСтрокаДерева.Грузоподъемность < НеразмещенныйВесЗаказов Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Найти(ТекСтрокаДерева.Ссылка, "ТС") = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				ПодходящееТС = ТекСтрокаДерева;
				
				Если ПодходящееТС.ОбъемКузова >= НеразмещенныйОбъемЗаказов Тогда 
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПодходящееТС = Неопределено Тогда 
				Если ДанныеРазмещенияЗаказовПоСекциям.СтрокиДерева.Количество() = 0 Тогда 
					флРазмещено = Ложь;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ПодходящееТС.Строки Цикл 
				НовСтрока = ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Добавить();
				НовСтрока.ТС             = ТекСтрока.Ссылка;
				НовСтрока.Секция         = ТекСтрока.Секция;
				НовСтрока.ОбъемСекции    = ТекСтрока.ОбъемКузова;
				НовСтрока.СвободныйОбъем = ТекСтрока.ОбъемКузова;
			КонецЦикла;
			
			ДанныеРазмещенияЗаказовПоСекциям.СтрокиДерева.Добавить(ПодходящееТС);
			
			ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения.Сортировать("ОбъемСекции ВОЗР");
			
			Для Каждого ТекЗаказ Из ЗаказыКРазмещению Цикл 
				Если ТекЗаказ.Объем = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ТребуетсяРазместить = ТекЗаказ.Объем;
				
				Пока ТребуетсяРазместить > 0 Цикл 
					ПодходящаяСекция = Неопределено;
					Для Каждого ТекСекция Из ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения Цикл 
						Если ТекСекция.СвободныйОбъем > 0 
								И ((СмешиватьГрузыВСекциях 
								И (ТекСекция.Заказы.Количество() = 0 
								Или (ТекСекция.Заказы.Количество() <> 0 И ТекСекция.Груз = ТекЗаказ.Груз)))
								Или (Не СмешиватьГрузыВСекциях И ТекСекция.Заказы.Количество() = 0)) Тогда 
							// Секция подходит.
							ПодходящаяСекция = ТекСекция;
						Иначе 
							Продолжить;
						КонецЕсли;
						
						Если ПодходящаяСекция.СвободныйОбъем >= ТребуетсяРазместить Тогда 
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ПодходящаяСекция = Неопределено Тогда 
						Прервать;
						
					Иначе 
						Если ТребуетсяРазместить > ПодходящаяСекция.СвободныйОбъем Тогда 
							КоличествоРазместить = ПодходящаяСекция.СвободныйОбъем;
						Иначе 
							КоличествоРазместить = ТребуетсяРазместить;
						КонецЕсли;
						
						ПодходящаяСекция.СвободныйОбъем = ПодходящаяСекция.СвободныйОбъем - КоличествоРазместить;
						ТребуетсяРазместить = ТребуетсяРазместить - КоличествоРазместить;
						
						ПодходящаяСекция.Груз = ТекЗаказ.Груз;
						
						ПодходящаяСекция.Заказы.Добавить(Новый Структура("Заказ, Объем", ТекЗаказ.Заказ, КоличествоРазместить));
						
						ТекЗаказ.Объем = ТекЗаказ.Объем - КоличествоРазместить;
						НеразмещенныйОбъемЗаказов = НеразмещенныйОбъемЗаказов - КоличествоРазместить;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если флРазмещено Тогда 
			ДанныеРазмещенияЗаказовПоСекциям.Размещено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеРазмещенияЗаказовПоСекциям;
	
КонецФункции // ПолучитьДанныеРазмещенияЗаказовПоСекциям()

#КонецОбласти

#Область СлужебныеМетодыДляАлгоритмаРаспределенияЗаказов

// Функция - Получить маршруты по заказам
//
// Параметры:
//  мсвЗаказы	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьМаршрутыПоЗаказам(мсвЗаказы) Экспорт
	
	ЗаказыДляЗапроса = Новый Массив();
	Для Каждого ТекСтрока Из мсвЗаказы Цикл 
		Если ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ЗаказыДляЗапроса.Добавить(ТекСтрока);
		Иначе 
			ЗаказыДляЗапроса.Добавить(ТекСтрока.Заказ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказыДляЗапроса", ЗаказыДляЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.АдресОтправления КАК Справочник.уатПунктыНазначения) КАК АдресОтправления,
	|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.АдресНазначения КАК Справочник.уатПунктыНазначения) КАК АдресНазначения,
	|	уатЗаказГрузоотправителя.Маршрут КАК Маршрут
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&ЗаказыДляЗапроса)
	|	И уатЗаказГрузоотправителя.FTL = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АдресОтправления,
	|	АдресНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутыЭтапы.Ссылка КАК Ссылка,
	|	уатМаршрутыЭтапы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления
	|ПОМЕСТИТЬ ВТ_Маршруты
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
	|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка
	|			И (НЕ уатМаршруты.ПометкаУдаления)
	|			И (уатМаршруты.ПредставлениеМаршрутаОднимПунктом)
	|			И (уатМаршруты.ИспользоватьДляПланированияВАРМЛогиста)
	|			И (уатМаршрутыЭтапы.ПунктОтправления В
	|				(ВЫБРАТЬ
	|					ВРТ.АдресОтправления
	|				ИЗ
	|					ВТ_Заказы КАК ВРТ
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ
	|					ВРТ.АдресНазначения
	|				ИЗ
	|					ВТ_Заказы КАК ВРТ))
	|ГДЕ
	|	уатМаршруты.ПометкаУдаления = ЛОЖЬ
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Маршруты.Ссылка КАК Ссылка,
	|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_Маршруты.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_Маршруты КАК ВТ_Маршруты) КАК ВТ_Маршруты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ПО ВТ_Маршруты.Ссылка = уатМаршрутыЭтапы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	уатМаршрутыЭтапы.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Маршруты.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутыЭтапы.НомерСтроки ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоПунктов
	|ПОМЕСТИТЬ ВТ_КоличествоПунктовМаршрутов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_Маршруты.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_Маршруты КАК ВТ_Маршруты) КАК ВТ_Маршруты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ПО ВТ_Маршруты.Ссылка = уатМаршрутыЭтапы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Маршруты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_МаршрутыОтправление.Ссылка КАК Ссылка,
	|	ВТ_МаршрутыОтправление.ПунктОтправления КАК АдресОтправления,
	|	ВТ_МаршрутыНазначение.ПунктОтправления КАК АдресНазначения
	|ПОМЕСТИТЬ ВТ_ПарыМаршрутов
	|ИЗ
	|	ВТ_Маршруты КАК ВТ_МаршрутыОтправление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Маршруты КАК ВТ_МаршрутыНазначение
	|		ПО ВТ_МаршрутыОтправление.Ссылка = ВТ_МаршрутыНазначение.Ссылка
	|			И (ВТ_МаршрутыОтправление.НомерСтроки = 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АдресОтправления,
	|	АдресНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Заказы.Ссылка КАК Заказ,
	|	ВТ_ПарыМаршрутов.Ссылка КАК Маршрут,
	|	ВТ_КоличествоПунктовМаршрутов.КоличествоПунктов КАК КоличествоПунктов
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПарыМаршрутов КАК ВТ_ПарыМаршрутов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоПунктовМаршрутов КАК ВТ_КоличествоПунктовМаршрутов
	|			ПО ВТ_ПарыМаршрутов.Ссылка = ВТ_КоличествоПунктовМаршрутов.Ссылка
	|		ПО ВТ_Заказы.АдресОтправления = ВТ_ПарыМаршрутов.АдресОтправления
	|			И ВТ_Заказы.АдресНазначения = ВТ_ПарыМаршрутов.АдресНазначения
	|			И (ВЫБОР
	|				КОГДА ВТ_Заказы.Маршрут = ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Заказы.Маршрут = ВТ_ПарыМаршрутов.Ссылка
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Заказы.Ссылка КАК Заказ,
	|	ВТ_Заказы.Маршрут КАК Маршрут,
	|	уатМаршрутыТранспортныеСредства.ТС КАК ТС
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.ТранспортныеСредства КАК уатМаршрутыТранспортныеСредства
	|		ПО ВТ_Заказы.Маршрут = уатМаршрутыТранспортныеСредства.Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТабМаршрутыПоЗаказам = Новый ТаблицаЗначений;
	ТабМаршрутыПоЗаказам.Колонки.Добавить("Маршрут");
	ТабМаршрутыПоЗаказам.Колонки.Добавить("Заказ");
	ТабМаршрутыПоЗаказам.Колонки.Добавить("КоличествоПунктов");
	ТабМаршрутыПоЗаказам.Колонки.Добавить("Частота");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[5].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Заказ.Маршрут) Тогда
			НоваяСтрока = ТабМаршрутыПоЗаказам.Добавить();
			НоваяСтрока.Маршрут           = ВыборкаДетальныеЗаписи.Маршрут;
			НоваяСтрока.Заказ             = ВыборкаДетальныеЗаписи.Заказ;
			НоваяСтрока.КоличествоПунктов = ВыборкаДетальныеЗаписи.КоличествоПунктов;
			НоваяСтрока.Частота           = 1;
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Заказ.Грузополучатель = Неопределено Тогда
			Грузополучатель = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			Грузополучатель = ВыборкаДетальныеЗаписи.Заказ.Грузополучатель;
		КонецЕсли;
		
		Сч = 1;
		Пока Сч <> ВыборкаДетальныеЗаписи.Маршрут.Этапы.Количество() Цикл
			Если (Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Маршрут.Этапы[Сч].Грузополучатель) Или 
				ВыборкаДетальныеЗаписи.Маршрут.Этапы[Сч].Грузополучатель = Грузополучатель) И
				ВыборкаДетальныеЗаписи.Маршрут.Этапы[Сч].ПунктОтправления = ВыборкаДетальныеЗаписи.Заказ.АдресНазначения Тогда
				
				НоваяСтрока = ТабМаршрутыПоЗаказам.Добавить();
				НоваяСтрока.Маршрут           = ВыборкаДетальныеЗаписи.Маршрут;
				НоваяСтрока.Заказ             = ВыборкаДетальныеЗаписи.Заказ;
				НоваяСтрока.КоличествоПунктов = ВыборкаДетальныеЗаписи.КоличествоПунктов;
				НоваяСтрока.Частота           = 1;
				Прервать;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ТабЗаказовСМаршрутами = РезультатЗапроса[6].Выгрузить();
	
	СоотПунктыМаршрутов = Новый Соответствие();
	
	ВыборкаМаршруты = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаршруты.Следующий() Цикл 
		мсвПункты = Новый Массив();
		
		ВыборкаПункты = ВыборкаМаршруты.Выбрать();
		Пока ВыборкаПункты.Следующий() Цикл 
			мсвПункты.Добавить(ВыборкаПункты.ПунктОтправления);
		КонецЦикла;
		
		СоотПунктыМаршрутов.Вставить(ВыборкаМаршруты.Ссылка, мсвПункты);
	КонецЦикла;
	
	Возврат Новый Структура("МаршрутыПоЗаказам, ПунктыМаршрутов, ТСМаршрута", ТабМаршрутыПоЗаказам, СоотПунктыМаршрутов, ТабЗаказовСМаршрутами);
	
КонецФункции // ПолучитьМаршрутыПоЗаказам()

#КонецОбласти

Функция ПолучитьВремяВПутиСУчетомСреднейСкорости(Расстояние, ВремяВПути, ВремяВыезда, ТабСкоростей) Экспорт
	
	ТекВремяВыезда = '00010101000000' + (ВремяВыезда - НачалоДня(ВремяВыезда));
	
	СредняяСкорость = 0;
	Для Каждого ТекСтрока Из ТабСкоростей Цикл 
		Если (ТекСтрока.НачалоПериода > ТекСтрока.КонецПериода
					И (ТекВремяВыезда >= ТекСтрока.НачалоПериода
					Или ТекВремяВыезда <= ТекСтрока.КонецПериода))
				Или (ТекВремяВыезда >= ТекСтрока.НачалоПериода И ТекВремяВыезда <= ТекСтрока.КонецПериода) Тогда 
			СредняяСкорость = ТекСтрока.Скорость;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СредняяСкорость = 0 Тогда 
		Возврат ВремяВПути;
	КонецЕсли;
	
	мВремяСек = (Расстояние / СредняяСкорость) * 3600;
	мВремяЧЧ  = Цел(мВремяСек / 3600);
	мВремяММ  = Цел((мВремяСек - (мВремяЧЧ * 3600)) / 60);
	
	Возврат мВремяЧЧ + (мВремяММ / 100);
	
КонецФункции

#Область ОбщиеМетоды

// Функция предназначена для расчета суммарного времени, представленном в формате чч:мм.
//
// Параметры:
//  Время1	 - Число - первое время.
//  Время2	 - Число - второе время.
// 
// Возвращаемое значение:
//   - результат расчета - суммарное время.
//
Функция СложитьВремяЧЧММ(Время1, Время2) Экспорт
	
	Время1Час = Цел(Время1);
	Время1Мин = (Время1 - Время1Час) * 100;
	Время1Мин = Время1Час * 60 + Время1Мин;
	
	Время2Час = Цел(Время2);
	Время2Мин = (Время2 - Время2Час) * 100;
	Время2Мин = Время2Час * 60 + Время2Мин;
	
	ВремяРезМин = Время1Мин + Время2Мин;
	ВремяРезЧас = Цел(ВремяРезМин / 60);
	ВремяРезМин = (ВремяРезМин - ВремяРезЧас * 60) / 100;
	
	Возврат ВремяРезЧас + ВремяРезМин;
	
КонецФункции

// Функция - Функция предназначена для расчета суммарного времени, представленном в формате 1С:Предприятие и чч:мм.
//
// Параметры:
//  Время1С		 - Время - время в формате 1С:Предприятие.
//  ВремяЧЧММ	 - Число - время в формате чч:мм.
// 
// Возвращаемое значение:
//   - результат расчета - суммарное время в формате 1С:Предприятие.
//
Функция СложитьВремя1СЧЧММ(Время1С, ВремяЧЧММ) Экспорт
	
	Возврат Время1С + Цел(ВремяЧЧММ) * 60 * 60 + (ВремяЧЧММ - Цел(ВремяЧЧММ)) * 100 * 60;
	
КонецФункции

// Функция предназначена для получения средней скорости движения в пределах одного кластера
//  для определения времени движения в алгоритмах маршрутизации.
// 
// Возвращаемое значение:
//   - Число, средняя скорость движения, км/ч.
//
Функция ПолучитьСреднююСкоростьДвиженияПоКластеру() Экспорт
	
	Возврат 20;
	
КонецФункции // ПолучитьСреднююСкоростьДвиженияПоКластеру()

// Функция - Время расстояние по координатам
//
// Параметры:
//  ЛатОтпр	 - 	 - 
//  ЛонОтпр	 - 	 - 
//  ЛатНазн	 - 	 - 
//  ЛонНазн	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВремяРасстояниеПоКоординатам(ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн) Экспорт
	
	ВремяРасстояние = Новый Структура("Время, Расстояние", 0, 0);
	
	Если (ЛатОтпр = 0 И ЛонОтпр = 0) Или (ЛатНазн = 0 И ЛонНазн = 0) Тогда 
		Возврат ВремяРасстояние;
	КонецЕсли;
	
	ВремяРасстояние.Расстояние = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(ЛатОтпр, ЛонОтпр, ЛатНазн, ЛонНазн);
	ВремяРасстояние.Расстояние = ВремяРасстояние.Расстояние / 1000; // Преобразование метров в км.
	ВремяРасстояние.Расстояние = ВремяРасстояние.Расстояние * 1.5; // Увеличение расстояния для учета нелинейности движения.
	
	ВремяРасстояние.Время = ВремяРасстояние.Расстояние / ПолучитьСреднююСкоростьДвиженияПоКластеру();
	
	Возврат ВремяРасстояние;
	
КонецФункции // ВремяРасстояниеПоКоординатам()

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетодыДляАлгоритмаКларкаРайта

// Функция предназначена для формирования таблицы заказов для дальнейшей маршрутизации.
//
Функция СформироватьТаблицуИсходныхЗаказов(мсвЗаказы, мсвЗаказыПоКоординатам, флИспользованиеКластеризации,
		НастройкаКластеризации, СжиматьЗаказы, ФормироватьСборныеМаршруты, АдресДепо, АдресДепоВрем,
		УчитыватьОкнаПоЗаказам, ИспользоватьХарактеристикиЗаказовНаТС)
	
	ЗаказыБезКоординат = Новый Массив();
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		ЗаказыБезКоординат.Добавить(ТекЗаказ.Заказ);
	КонецЦикла;
	
	ТабЗаказыПоКоординатам = Новый ТаблицаЗначений();
	ТабЗаказыПоКоординатам.Колонки.Добавить("Ссылка",           Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ПунктПогрузки",    Новый ОписаниеТипов("СправочникСсылка.уатКластеры_уэ"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ПунктРазгрузки",   Новый ОписаниеТипов("СправочникСсылка.уатКластеры_уэ"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("Приоритет",        Новый ОписаниеТипов("Число"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("АдресОтправления", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("АдресНазначения",  Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ОтправлениеС",     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ОтправлениеПо",    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ДоставкаС",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ДоставкаПо",       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ЛатОтпр",          Новый ОписаниеТипов("Число"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ЛонОтпр",          Новый ОписаниеТипов("Число"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ЛатНазн",          Новый ОписаниеТипов("Число"));
	ТабЗаказыПоКоординатам.Колонки.Добавить("ЛонНазн",          Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекЗаказКоорд Из мсвЗаказыПоКоординатам Цикл 
		Если ФормироватьСборныеМаршруты Тогда 
			Если Не ТекЗаказКоорд.АдресНазначения = АдресДепо Тогда 
				Продолжить;
			КонецЕсли;
		Иначе 
			Если Не ТекЗаказКоорд.АдресОтправления = АдресДепо Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовСтр = ТабЗаказыПоКоординатам.Добавить();
		НовСтр.Ссылка           = ТекЗаказКоорд.Заказ;
		НовСтр.ПунктПогрузки    = ТекЗаказКоорд.КластерОтправления;
		НовСтр.ПунктРазгрузки   = ТекЗаказКоорд.КластерНазначения;
		НовСтр.Приоритет        = ТекЗаказКоорд.ПриоритетМаршрутизации;
		НовСтр.АдресОтправления = ТекЗаказКоорд.АдресОтправления;
		НовСтр.АдресНазначения  = ТекЗаказКоорд.АдресНазначения;
		НовСтр.ОтправлениеС     = ТекЗаказКоорд.ОтправлениеС;
		НовСтр.ОтправлениеПо    = ТекЗаказКоорд.ОтправлениеПо;
		НовСтр.ДоставкаС        = ТекЗаказКоорд.ДоставкаС;
		НовСтр.ДоставкаПо       = ТекЗаказКоорд.ДоставкаПо;
		НовСтр.ЛатОтпр          = ТекЗаказКоорд.ЛатОтпр;
		НовСтр.ЛонОтпр          = ТекЗаказКоорд.ЛонОтпр;
		НовСтр.ЛатНазн          = ТекЗаказКоорд.ЛатНазн;
		НовСтр.ЛонНазн          = ТекЗаказКоорд.ЛонНазн;
	КонецЦикла;
	
	ТекстОбщегоЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗаказыПоКоординатам.Ссылка КАК Ссылка,
	|	ТабЗаказыПоКоординатам.ПунктПогрузки КАК ПунктПогрузки,
	|	ТабЗаказыПоКоординатам.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ТабЗаказыПоКоординатам.Приоритет КАК Приоритет,
	|	ТабЗаказыПоКоординатам.АдресОтправления КАК АдресОтправления,
	|	ТабЗаказыПоКоординатам.АдресНазначения КАК АдресНазначения,
	|	ТабЗаказыПоКоординатам.ОтправлениеС КАК ОтправлениеС,
	|	ТабЗаказыПоКоординатам.ОтправлениеПо КАК ОтправлениеПо,
	|	ТабЗаказыПоКоординатам.ДоставкаС КАК ДоставкаС,
	|	ТабЗаказыПоКоординатам.ДоставкаПо КАК ДоставкаПо,
	|	ТабЗаказыПоКоординатам.ЛатОтпр КАК ЛатОтпр,
	|	ТабЗаказыПоКоординатам.ЛонОтпр КАК ЛонОтпр,
	|	ТабЗаказыПоКоординатам.ЛатНазн КАК ЛатНазн,
	|	ТабЗаказыПоКоординатам.ЛонНазн КАК ЛонНазн
	|ПОМЕСТИТЬ ВТ_ЗаказыПоКоординатам
	|ИЗ
	|	&ТабЗаказыПоКоординатам КАК ТабЗаказыПоКоординатам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПеревозку.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &флИспользованиеКластеризации
	|			ТОГДА ЕСТЬNULL(уатПривязкаПунктовОтправления.Кластер, ЗНАЧЕНИЕ(Справочник.уатКластеры_уэ.ПустаяСсылка))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказНаПеревозку.АдресОтправления КАК Справочник.уатПунктыНазначения)
	|	КОНЕЦ КАК ПунктПогрузки,
	|	ВЫБОР
	|		КОГДА &флИспользованиеКластеризации
	|			ТОГДА ЕСТЬNULL(уатПривязкаПунктовНазначения.Кластер, ЗНАЧЕНИЕ(Справочник.уатКластеры_уэ.ПустаяСсылка))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказНаПеревозку.АдресНазначения КАК Справочник.уатПунктыНазначения)
	|	КОНЕЦ КАК ПунктРазгрузки,
	|	ЗаказНаПеревозку.Приоритет КАК Приоритет,
	|	ЗаказНаПеревозку.АдресОтправления КАК АдресОтправления,
	|	ЗаказНаПеревозку.АдресНазначения КАК АдресНазначения,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МИНУТА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаказНаПеревозку.ОтправлениеС, ДЕНЬ), ЗаказНаПеревозку.ОтправлениеС, МИНУТА)) КАК ОтправлениеС,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МИНУТА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаказНаПеревозку.ОтправлениеПо, ДЕНЬ), ЗаказНаПеревозку.ОтправлениеПо, МИНУТА)) КАК ОтправлениеПо,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МИНУТА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаказНаПеревозку.ДоставкаС, ДЕНЬ), ЗаказНаПеревозку.ДоставкаС, МИНУТА)) КАК ДоставкаС,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МИНУТА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаказНаПеревозку.ДоставкаПо, ДЕНЬ), ЗаказНаПеревозку.ДоставкаПо, МИНУТА)) КАК ДоставкаПо,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеревозку.АдресОтправления) = ТИП(Справочник.уатПунктыНазначения)
	|			ТОГДА ЗаказНаПеревозку.АдресОтправления.Лат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛатОтпр,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеревозку.АдресОтправления) = ТИП(Справочник.уатПунктыНазначения)
	|			ТОГДА ЗаказНаПеревозку.АдресОтправления.Лон
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛонОтпр,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеревозку.АдресНазначения) = ТИП(Справочник.уатПунктыНазначения)
	|			ТОГДА ЗаказНаПеревозку.АдресНазначения.Лат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛатНазн,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеревозку.АдресНазначения) = ТИП(Справочник.уатПунктыНазначения)
	|			ТОГДА ЗаказНаПеревозку.АдресНазначения.Лон
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛонНазн
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК ЗаказНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияККластерам_уэ КАК уатПривязкаПунктовОтправления
	|		ПО (&флИспользованиеКластеризации)
	|			И ЗаказНаПеревозку.АдресОтправления = уатПривязкаПунктовОтправления.ПунктНазначения
	|			И (уатПривязкаПунктовОтправления.Кластер.НастройкаКластеризации = &НастройкаКластеризации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияККластерам_уэ КАК уатПривязкаПунктовНазначения
	|		ПО (&флИспользованиеКластеризации)
	|			И ЗаказНаПеревозку.АдресНазначения = уатПривязкаПунктовНазначения.ПунктНазначения
	|			И (уатПривязкаПунктовНазначения.Кластер.НастройкаКластеризации = &НастройкаКластеризации)
	|ГДЕ
	|	ЗаказНаПеревозку.Ссылка В(&ЗаказыБезКоординат)
	|	И ВЫБОР
	|			КОГДА &ФормироватьСборныеМаршруты
	|				ТОГДА ЗаказНаПеревозку.АдресНазначения = &АдресДепо
	|			ИНАЧЕ ЗаказНаПеревозку.АдресОтправления = &АдресДепо
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаказыПоКоординатам.Ссылка,
	|	ВТ_ЗаказыПоКоординатам.ПунктПогрузки,
	|	ВТ_ЗаказыПоКоординатам.ПунктРазгрузки,
	|	ВТ_ЗаказыПоКоординатам.Приоритет,
	|	ВТ_ЗаказыПоКоординатам.АдресОтправления,
	|	ВТ_ЗаказыПоКоординатам.АдресНазначения,
	|	ВТ_ЗаказыПоКоординатам.ОтправлениеС,
	|	ВТ_ЗаказыПоКоординатам.ОтправлениеПо,
	|	ВТ_ЗаказыПоКоординатам.ДоставкаС,
	|	ВТ_ЗаказыПоКоординатам.ДоставкаПо,
	|	ВТ_ЗаказыПоКоординатам.ЛатОтпр,
	|	ВТ_ЗаказыПоКоординатам.ЛонОтпр,
	|	ВТ_ЗаказыПоКоординатам.ЛатНазн,
	|	ВТ_ЗаказыПоКоординатам.ЛонНазн
	|ИЗ
	|	ВТ_ЗаказыПоКоординатам КАК ВТ_ЗаказыПоКоординатам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Документы.ПунктПогрузки КАК Пункт
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Документы.ПунктРазгрузки
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Документы.АдресОтправления КАК Адрес
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Документы.АдресНазначения
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&АдресДепо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителяХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Характеристики КАК уатЗаказГрузоотправителяХарактеристики
	|		ПО ВТ_Документы.Ссылка = уатЗаказГрузоотправителяХарактеристики.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ЗаказыБезКоординат",           ЗаказыБезКоординат);
	Запрос.УстановитьПараметр("ТабЗаказыПоКоординатам",       ТабЗаказыПоКоординатам);
	Запрос.УстановитьПараметр("флИспользованиеКластеризации", флИспользованиеКластеризации);
	Запрос.УстановитьПараметр("НастройкаКластеризации",       НастройкаКластеризации);
	Запрос.УстановитьПараметр("АдресДепоВрем",                АдресДепоВрем);
	Запрос.УстановитьПараметр("АдресДепо",                    АдресДепо);
	Запрос.УстановитьПараметр("ФормироватьСборныеМаршруты",   ФормироватьСборныеМаршруты);
	
	Если флИспользованиеКластеризации Тогда 
		СхемаОбщегоЗапроса = Новый СхемаЗапроса();
		СхемаОбщегоЗапроса.УстановитьТекстЗапроса(ТекстОбщегоЗапроса);
		
		Если ФормироватьСборныеМаршруты Тогда 
			СхемаОбщегоЗапроса.ПакетЗапросов[1].Операторы[0].Отбор.Добавить("уатПривязкаПунктовНазначения.Кластер = &АдресДепоВрем");
		Иначе 
			СхемаОбщегоЗапроса.ПакетЗапросов[1].Операторы[0].Отбор.Добавить("уатПривязкаПунктовОтправления.Кластер = &АдресДепоВрем");
		КонецЕсли;
		
		Запрос.Текст = СхемаОбщегоЗапроса.ПолучитьТекстЗапроса();
		
	Иначе 
		Запрос.Текст = ТекстОбщегоЗапроса;
	КонецЕсли;
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	мсвПунктов = РезультатПакет[2].Выгрузить().ВыгрузитьКолонку("Пункт");
	мсвАдресов = РезультатПакет[3].Выгрузить().ВыгрузитьКолонку("Адрес");
	
	НаборХарактеристик = Новый Соответствие();
	
	ТаблНаборыПоЗаказам = Новый ТаблицаЗначений();
	ТаблНаборыПоЗаказам.Колонки.Добавить("Заказ",              Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблНаборыПоЗаказам.Колонки.Добавить("НаборХарактеристик", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
		ХарактеристикиЗаказов = РезультатПакет[4].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого СтрокаЗаказ Из ХарактеристикиЗаказов.Строки Цикл 
			ХарактеристикиЗаказа = Новый Массив();
			
			Для Каждого СтрокаХарактеристики Из СтрокаЗаказ.Строки Цикл 
				Если Не СтрокаХарактеристики.Характеристика = Null Тогда 
					ХарактеристикиЗаказа.Добавить(СтрокаХарактеристики.Характеристика);
				КонецЕсли;
			КонецЦикла;
			
			idНабора = Неопределено;
			
			Для Каждого ТекНабор Из НаборХарактеристик Цикл 
				флНаборИдентичен = Истина;
				
				Если Не ТекНабор.Значение.Количество() = ХарактеристикиЗаказа.Количество() Тогда 
					флНаборИдентичен = Ложь;
					
				Иначе 
					Для Каждого ТекХарактеристика Из ХарактеристикиЗаказа Цикл 
						Если ТекНабор.Значение.Найти(ТекХарактеристика) = Неопределено Тогда 
							флНаборИдентичен = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если флНаборИдентичен Тогда 
					idНабора = ТекНабор.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если idНабора = Неопределено Тогда 
				idНабора = Новый УникальныйИдентификатор();
				НаборХарактеристик.Вставить(idНабора, ХарактеристикиЗаказа);
			КонецЕсли;
			
			НовСтрока = ТаблНаборыПоЗаказам.Добавить();
			НовСтрока.Заказ = СтрокаЗаказ.Ссылка;
			НовСтрока.НаборХарактеристик = idНабора;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаборыПоЗаказам", ТаблНаборыПоЗаказам);
	
	ТекстЗапросаПоЗаказам =
	"ВЫБРАТЬ
	|	НаборыПоЗаказам.Заказ КАК Заказ,
	|	НаборыПоЗаказам.НаборХарактеристик КАК НаборХарактеристик
	|ПОМЕСТИТЬ ВТ_НаборыПоЗаказам
	|ИЗ
	|	&НаборыПоЗаказам КАК НаборыПоЗаказам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ГрузовойСостав.НомерСтроки, ЕСТЬNULL(ТоварныйСостав.НомерСтроки, 0)) КАК СтрокаПакета,
	|	ЕСТЬNULL(ГрузовойСостав.ГрузовоеМесто, ЕСТЬNULL(ТоварныйСостав.Номенклатура, НЕОПРЕДЕЛЕНО)) КАК Груз,
	|	ЕСТЬNULL(ГрузовойСостав.КоличествоМест, ЕСТЬNULL(ТоварныйСостав.Количество, 1)) КАК Количество,
	|	ЕСТЬNULL(ГрузовойСостав.ВесБрутто, ЕСТЬNULL(ТоварныйСостав.ВесБрутто, ВТ_Документы.Ссылка.ВесБрутто)) + ЕСТЬNULL(ГрузовойСостав.ВесТары, ЕСТЬNULL(ТоварныйСостав.ВесТары, ВТ_Документы.Ссылка.ВесТары)) КАК ВесБрутто,
	|	ЕСТЬNULL(ГрузовойСостав.Объем, ЕСТЬNULL(ТоварныйСостав.Объем, ВТ_Документы.Ссылка.Объем)) КАК Объем,
	|	ЕСТЬNULL(ГрузовойСостав.КоличествоМест, ЕСТЬNULL(ТоварныйСостав.КоличествоМест, ВТ_Документы.Ссылка.КоличествоМест)) КАК КоличествоУпаковок,
	|	ВТ_Документы.ПунктПогрузки КАК ПунктПогрузки,
	|	ВТ_Документы.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ВТ_Документы.Ссылка.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	|	ВТ_Документы.Ссылка.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения,
	|	ЕСТЬNULL(ПунктыОтправления.ТипПункта, ЗНАЧЕНИЕ(Справочник.уатТипыПунктов.ПустаяСсылка)) КАК КатегорияПунктаОтправления,
	|	ЕСТЬNULL(ПунктыОтправления.СтоянкаДоп, 0) КАК ДопСтоянкаПунктОтправления,
	|	ЕСТЬNULL(ПунктыОтправления.Ссылка, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК СсылкаПунктаОтправления,
	|	ЕСТЬNULL(ПунктыНазначения.ТипПункта, ЗНАЧЕНИЕ(Справочник.уатТипыПунктов.ПустаяСсылка)) КАК КатегорияПунктаНазначения,
	|	ЕСТЬNULL(ПунктыНазначения.СтоянкаДоп, 0) КАК ДопСтоянкаПунктНазначения,
	|	ЕСТЬNULL(ПунктыНазначения.Ссылка, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК СсылкаПунктаНазначения,
	|	ВТ_Документы.Приоритет КАК Приоритет,
	|	ВТ_Документы.АдресОтправления КАК АдресОтправления,
	|	ВТ_Документы.АдресНазначения КАК АдресНазначения,
	|	ВТ_Документы.Ссылка.FTL КАК FTL,
	|	ВТ_Документы.ОтправлениеС КАК ОтправлениеС,
	|	ВТ_Документы.ОтправлениеПо КАК ОтправлениеПо,
	|	ВТ_Документы.ДоставкаС КАК ДоставкаС,
	|	ВТ_Документы.ДоставкаПо КАК ДоставкаПо,
	|	ВТ_Документы.Ссылка.Время КАК Время,
	|	ВТ_Документы.Ссылка.Расстояние КАК Расстояние,
	|	ВТ_Документы.ЛатОтпр КАК ЛатОтпр,
	|	ВТ_Документы.ЛонОтпр КАК ЛонОтпр,
	|	ВТ_Документы.ЛатНазн КАК ЛатНазн,
	|	ВТ_Документы.ЛонНазн КАК ЛонНазн,
	|	НаборыПоЗаказам.НаборХарактеристик КАК НаборХарактеристик
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК ГрузовойСостав
	|		ПО ВТ_Документы.Ссылка = ГрузовойСостав.Ссылка
	|			И (ВТ_Документы.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК ТоварныйСостав
	|		ПО ВТ_Документы.Ссылка = ТоварныйСостав.Ссылка
	|			И (ВТ_Документы.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК ПунктыОтправления
	|		ПО ВТ_Документы.Ссылка.АдресОтправления = ПунктыОтправления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК ПунктыНазначения
	|		ПО ВТ_Документы.Ссылка.АдресНазначения = ПунктыНазначения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаборыПоЗаказам КАК НаборыПоЗаказам
	|		ПО ВТ_Документы.Ссылка = НаборыПоЗаказам.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправлениеС,
	|	ОтправлениеПо,
	|	ДоставкаС,
	|	ДоставкаПо
	|ИТОГИ
	|	МАКСИМУМ(ПунктПогрузки),
	|	МАКСИМУМ(ПунктРазгрузки),
	|	МАКСИМУМ(АдресОтправления),
	|	МАКСИМУМ(АдресНазначения),
	|	МАКСИМУМ(КатегорияПунктаОтправления),
	|	МАКСИМУМ(КатегорияПунктаНазначения),
	|	МАКСИМУМ(ДопСтоянкаПунктОтправления),
	|	МАКСИМУМ(ДопСтоянкаПунктНазначения)
	|ПО
	|	ЛатОтпр,
	|	ЛонОтпр,
	|	ЛатНазн,
	|	ЛонНазн,
	|	СсылкаПунктаОтправления,
	|	СсылкаПунктаНазначения,
	|	НаборХарактеристик";
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаПоЗаказам);
	
	Если Не СжиматьЗаказы Тогда 
		СхемаЗапроса.ПакетЗапросов[1].КонтрольныеТочкиИтогов.Очистить();
		СхемаЗапроса.ПакетЗапросов[1].ВыраженияИтогов.Очистить();
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ЗапросРезультат = Запрос.ВыполнитьПакет();
	РезультатЗапроса = ЗапросРезультат[1].Выгрузить(?(СжиматьЗаказы, ОбходРезультатаЗапроса.ПоГруппировкам, ОбходРезультатаЗапроса.Прямой));
	
	ТабРассмотренныеГрузы = Новый ТаблицаЗначений();
	ТабРассмотренныеГрузы.Колонки.Добавить("Ссылка");
	ТабРассмотренныеГрузы.Колонки.Добавить("Груз");
	ТабРассмотренныеГрузы.Колонки.Добавить("GUID");
	ТабРассмотренныеГрузы.Колонки.Добавить("НомерСтроки");
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		НовСтрока = ТабРассмотренныеГрузы.Добавить();
		НовСтрока.Ссылка      = ТекЗаказ.Заказ;
		НовСтрока.Груз        = ТекЗаказ.Груз;
		НовСтрока.GUID        = ТекЗаказ.GUID;
		НовСтрока.НомерСтроки = ТекЗаказ.НомерСтроки;
		
		Если ЗначениеЗаполнено(ТекЗаказ.НомерСтроки) Тогда
			Если СжиматьЗаказы Тогда 
				НайдСтроки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("Ссылка, Груз, СтрокаПакета", ТекЗаказ.Заказ, ТекЗаказ.Груз, ТекЗаказ.НомерСтроки), Истина);
			Иначе 
				НайдСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Ссылка, Груз, СтрокаПакета", ТекЗаказ.Заказ, ТекЗаказ.Груз, ТекЗаказ.НомерСтроки));
			КонецЕсли;
		Иначе
			Если СжиматьЗаказы Тогда 
				НайдСтроки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("Ссылка, Груз", ТекЗаказ.Заказ, ТекЗаказ.Груз), Истина);
			Иначе 
				НайдСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Ссылка, Груз", ТекЗаказ.Заказ, ТекЗаказ.Груз));
			КонецЕсли;
		КонецЕсли;
		
		КоличествоУчтено = ТекЗаказ.Количество;
		
		мсвСтрокиУдалить = Новый Массив();
		
		Сч = НайдСтроки.Количество() - 1;
		Пока Сч >= 0 Цикл 
			ТекСтрока = НайдСтроки[Сч];
			
			Если КоличествоУчтено = 0 Тогда 
				мсвСтрокиУдалить.Добавить(ТекСтрока);
				
			ИначеЕсли ТекСтрока.Количество < КоличествоУчтено Тогда 
				КоличествоУчтено = КоличествоУчтено - ТекСтрока.Количество;
			Иначе 
				КоэфПересчета = ?(ТекСтрока.Количество = 0, 0, КоличествоУчтено / ТекСтрока.Количество);
				
				ТекСтрока.Количество = КоличествоУчтено;
				КоличествоУчтено = 0;
				
				ТекСтрока.ВесБрутто          = ТекСтрока.ВесБрутто * КоэфПересчета;
				ТекСтрока.Объем              = ТекСтрока.Объем * КоэфПересчета;
				ТекСтрока.КоличествоУпаковок = ТекСтрока.КоличествоУпаковок * КоэфПересчета;
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
		
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл 
			Если СжиматьЗаказы Тогда 
				РезультатЗапроса.Строки.Удалить(ТекСтрокаУдалить);
			Иначе 
				РезультатЗапроса.Удалить(ТекСтрокаУдалить);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказыПоКоординатам Цикл 
		НовСтрока = ТабРассмотренныеГрузы.Добавить();
		НовСтрока.Ссылка = ТекЗаказ.Заказ;
		НовСтрока.Груз   = ТекЗаказ.Груз;
		НовСтрока.GUID        = ТекЗаказ.GUID;
		НовСтрока.НомерСтроки = ТекЗаказ.НомерСтроки;

		Если ЗначениеЗаполнено(ТекЗаказ.НомерСтроки) Тогда
			Если СжиматьЗаказы Тогда 
				НайдСтроки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("Ссылка, Груз, СтрокаПакета", ТекЗаказ.Заказ, ТекЗаказ.Груз, ТекЗаказ.НомерСтроки), Истина);
			Иначе 
				НайдСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Ссылка, Груз, СтрокаПакета", ТекЗаказ.Заказ, ТекЗаказ.Груз, ТекЗаказ.НомерСтроки));
			КонецЕсли;
		Иначе
			Если СжиматьЗаказы Тогда 
				НайдСтроки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("Ссылка, Груз", ТекЗаказ.Заказ, ТекЗаказ.Груз), Истина);
			Иначе 
				НайдСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Ссылка, Груз", ТекЗаказ.Заказ, ТекЗаказ.Груз));
			КонецЕсли;
		КонецЕсли;
		
		КоличествоУчтено = ТекЗаказ.Количество;
		
		мсвСтрокиУдалить = Новый Массив();
		
		Сч = НайдСтроки.Количество() - 1;
		Пока Сч >= 0 Цикл 
			ТекСтрока = НайдСтроки[Сч];
			
			Если КоличествоУчтено = 0 Тогда 
				мсвСтрокиУдалить.Добавить(ТекСтрока);
				
			ИначеЕсли ТекСтрока.Количество < КоличествоУчтено Тогда 
				КоличествоУчтено = КоличествоУчтено - ТекСтрока.Количество;
			Иначе 
				КоэфПересчета = ?(ТекСтрока.Количество = 0, 0, КоличествоУчтено / ТекСтрока.Количество);
				
				ТекСтрока.Количество = КоличествоУчтено;
				КоличествоУчтено = 0;
				
				ТекСтрока.ВесБрутто          = ТекСтрока.ВесБрутто * КоэфПересчета;
				ТекСтрока.Объем              = ТекСтрока.Объем * КоэфПересчета;
				ТекСтрока.КоличествоУпаковок = ТекСтрока.КоличествоУпаковок * КоэфПересчета;
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
		
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл 
			Если СжиматьЗаказы Тогда 
				РезультатЗапроса.Строки.Удалить(ТекСтрокаУдалить);
			Иначе 
				РезультатЗапроса.Удалить(ТекСтрокаУдалить);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если СжиматьЗаказы Тогда 
		Для Каждого СтрокаЛатОтпр Из РезультатЗапроса.Строки Цикл 
			Для Каждого СтрокаЛонОтпр Из СтрокаЛатОтпр.Строки Цикл 
				Для Каждого СтрокаЛатНазн Из СтрокаЛонОтпр.Строки Цикл 
					Для Каждого СтрокаЛонНазн Из СтрокаЛатНазн.Строки Цикл 
						Для Каждого СтрокаСсылкаПогрузка Из СтрокаЛонНазн.Строки Цикл 
							Для Каждого СтрокаСсылкаРазгрузка Из СтрокаСсылкаПогрузка.Строки Цикл 
								Для Каждого ТекНабор Из СтрокаСсылкаРазгрузка.Строки Цикл 
									мсвСтрокиУдалить = Новый Массив();
									
									Для Каждого ТекСтрока Из ТекНабор.Строки Цикл 
										НайдСтроки = ТабРассмотренныеГрузы.НайтиСтроки(Новый Структура("Ссылка, Груз, НомерСтроки", ТекСтрока.Ссылка, ТекСтрока.Груз, ТекСтрока.СтрокаПакета));
										Если НайдСтроки.Количество() = 0 Тогда 
											мсвСтрокиУдалить.Добавить(ТекСтрока);
										КонецЕсли;
									КонецЦикла;
									
									Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл 
										ТекНабор.Строки.Удалить(ТекСтрокаУдалить);
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	Иначе 
		мсвСтрокиУдалить = Новый Массив();
		
		Для Каждого ТекСтрока Из РезультатЗапроса Цикл 
			НайдСтроки = ТабРассмотренныеГрузы.НайтиСтроки(Новый Структура("Ссылка, Груз, НомерСтроки", ТекСтрока.Ссылка, ТекСтрока.Груз, ТекСтрока.СтрокаПакета));
			Если НайдСтроки.Количество() = 0 Тогда 
				мсвСтрокиУдалить.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл 
			РезультатЗапроса.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ТаблицаЗаказов, МассивПунктов, МассивАдресов, НаборХарактеристик", РезультатЗапроса, мсвПунктов, мсвАдресов, НаборХарактеристик);
	
КонецФункции // СформироватьТаблицуИсходныхЗаказов()

// Функция предназначена для подготовки данных по ТС, времени и расстоянию между пунктами и пр.
//
Функция СформироватьДанныеПоТСИПереходам(Запрос, АдресДепоВрем, НастройкаКластеризации, УчитыватьРазрешенныеТипыТС,
		МаксГрузоподъемность, МаксОбъемКузова, флИспользованиеКластеризации, мсвПунктыПоЗаказу, мсвАдресаПоЗаказу, 
		ПунктПогрузкиПоТерминалам, УчитыватьСекцииТранспортныхСредств, ВиртуальныеТС, НаборХарактеристик,
		ИспользоватьХарактеристикиЗаказовНаТС)
	
	Запрос.УстановитьПараметр("ПунктПогрузкиПоТерминалам", ПунктПогрузкиПоТерминалам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТерминалыРазрешенныеТипыТС.Ссылка КАК Терминал,
	|	уатТерминалыРазрешенныеТипыТС.ТипТС КАК ТипТС,
	|	уатТерминалыРазрешенныеТипыТС.Ссылка.Владелец.ВремяДоступностиС КАК ВремяНачалаПогрузки,
	|	уатТерминалыРазрешенныеТипыТС.Ссылка.Владелец.ВремяДоступностиПо КАК ВремяОкончанияПогрузки
	|ИЗ
	|	Справочник.уатТерминалы.РазрешенныеТипыТС КАК уатТерминалыРазрешенныеТипыТС
	|ГДЕ
	|	уатТерминалыРазрешенныеТипыТС.Ссылка.Владелец = &ПунктПогрузкиПоТерминалам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатТерминалы.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	уатТерминалы.Владелец.ВремяДоступностиС,
	|	уатТерминалы.Владелец.ВремяДоступностиПо
	|ИЗ
	|	Справочник.уатТерминалы КАК уатТерминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТерминалы.РазрешенныеТипыТС КАК уатТерминалыРазрешенныеТипыТС
	|		ПО уатТерминалы.Ссылка = уатТерминалыРазрешенныеТипыТС.Ссылка
	|ГДЕ
	|	уатТерминалы.Владелец = &ПунктПогрузкиПоТерминалам
	|	И уатТерминалыРазрешенныеТипыТС.НомерСтроки ЕСТЬ NULL
	|ИТОГИ
	|	МАКСИМУМ(ВремяНачалаПогрузки),
	|	МАКСИМУМ(ВремяОкончанияПогрузки)
	|ПО
	|	Терминал";
	
	мсвРазрешенныеТипыПоТерминалам = Новый Массив();
	
	Если ПунктПогрузкиПоТерминалам = Неопределено Тогда 
		флТерминалБезОтбораПоТипамТС = Истина;
	Иначе 
		флТерминалБезОтбораПоТипамТС = Ложь;
	КонецЕсли;
	
	ДанныеПоТерминалам = Новый Структура("РазрешенныеТипы, ДоступныеОкна", Новый Соответствие(), Новый ТаблицаЗначений());
	
	ДанныеПоТерминалам.ДоступныеОкна.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.уатТерминалы"));
	ДанныеПоТерминалам.ДоступныеОкна.Колонки.Добавить("ОкноС",    Новый ОписаниеТипов("Дата"));
	ДанныеПоТерминалам.ДоступныеОкна.Колонки.Добавить("ОкноПо",   Новый ОписаниеТипов("Дата"));
	
	ВыборкаТерминалы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТерминалы.Следующий() Цикл 
		НовСтрокаОкно = ДанныеПоТерминалам.ДоступныеОкна.Добавить();
		НовСтрокаОкно.Терминал = ВыборкаТерминалы.Терминал;
		НовСтрокаОкно.ОкноС    = ВыборкаТерминалы.Терминал.Владелец.ВремяДоступностиС;
		
		Если ВыборкаТерминалы.Терминал.Владелец.ВремяДоступностиПо = '00010101000000' Тогда 
			НовСтрокаОкно.ОкноПо = '00010101235959';
		Иначе 
			НовСтрокаОкно.ОкноПо = ВыборкаТерминалы.Терминал.Владелец.ВремяДоступностиПо;
		КонецЕсли;
		
		мсвДоступныеТипы = Новый Массив();
		ВыборкаТипыТерминалов = ВыборкаТерминалы.Выбрать();
		Пока ВыборкаТипыТерминалов.Следующий() Цикл 
			Если ВыборкаТипыТерминалов.ТипТС = Неопределено Тогда 
				флТерминалБезОтбораПоТипамТС = Истина;
			КонецЕсли;
			мсвРазрешенныеТипыПоТерминалам.Добавить(ВыборкаТипыТерминалов.ТипТС);
			
			Если Не ВыборкаТипыТерминалов.ТипТС = Неопределено Тогда 
				мсвДоступныеТипы.Добавить(ВыборкаТипыТерминалов.ТипТС);
			КонецЕсли;
		КонецЦикла;
		
		Если мсвДоступныеТипы.Количество() Тогда 
			ДанныеПоТерминалам.РазрешенныеТипы.Вставить(ВыборкаТерминалы.Терминал, мсвДоступныеТипы);
		КонецЕсли;
	КонецЦикла;
	
	мсвВиртуальныеТС = Новый Массив();
	Для Каждого ТекВиртТС Из ВиртуальныеТС Цикл 
		мсвВиртуальныеТС.Добавить(ТекВиртТС.ТС);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АдресДепо",                      АдресДепоВрем);
	Запрос.УстановитьПараметр("НастройкаКластеризации",         НастройкаКластеризации);
	Запрос.УстановитьПараметр("МаксГрузоподъемность",           МаксГрузоподъемность);
	Запрос.УстановитьПараметр("МаксОбъемКузова",                МаксОбъемКузова);
	Запрос.УстановитьПараметр("флИспользованиеКластеризации",   флИспользованиеКластеризации);
	Запрос.УстановитьПараметр("мсвПунктыПоЗаказу",              мсвПунктыПоЗаказу);
	Запрос.УстановитьПараметр("мсвАдресаПоЗаказу",              мсвАдресаПоЗаказу);
	Запрос.УстановитьПараметр("флТерминалБезОтбораПоТипамТС",   флТерминалБезОтбораПоТипамТС);
	Запрос.УстановитьПараметр("мсвРазрешенныеТипыПоТерминалам", мсвРазрешенныеТипыПоТерминалам);
	Запрос.УстановитьПараметр("УчитыватьСекцииТС",              УчитыватьСекцииТранспортныхСредств);
	Запрос.УстановитьПараметр("мсвВиртуальныеТС",               мсвВиртуальныеТС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТранспортныеСредства.Ссылка КАК Справочник.уатТС) КАК Ссылка,
	|	ВЫРАЗИТЬ(ТранспортныеСредства.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
	|	ВЫРАЗИТЬ(ТранспортныеСредства.Прицеп2 КАК Справочник.уатТС) КАК Прицеп2,
	|	ТранспортныеСредства.Грузоподъемность КАК Грузоподъемность,
	|	ТранспортныеСредства.ОбъемКузова КАК ОбъемКузова,
	|	(ВЫБОР
	|		КОГДА &МаксГрузоподъемность = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТранспортныеСредства.Грузоподъемность / &МаксГрузоподъемность
	|	КОНЕЦ + ВЫБОР
	|		КОГДА &МаксОбъемКузова = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТранспортныеСредства.ОбъемКузова / &МаксОбъемКузова
	|	КОНЕЦ) / 2 КАК Порядок,
	|	ТранспортныеСредства.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|	ТранспортныеСредства.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|	ТранспортныеСредства.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ТранспортныеСредства.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ТранспортныеСредства.ТипТС КАК ТипТС,
	|	ТранспортныеСредства.Приоритет КАК Приоритет,
	|	ТранспортныеСредства.ДатаВыездаТС КАК ДатаВыездаТС,
	|	ТранспортныеСредства.ВозвратВГараж КАК ВозвратВГараж
	|ПОМЕСТИТЬ ВТ_ТС
	|ИЗ
	|	ВТ_ТС_Подготовка КАК ТранспортныеСредства
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &флТерминалБезОтбораПоТипамТС
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТранспортныеСредства.ТипТС В (&мсвРазрешенныеТипыПоТерминалам)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Пункт КАК Пункт
	|ПОМЕСТИТЬ ВТ_Пункты
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		уатКластеры_уэ.Ссылка КАК Пункт
	|	ИЗ
	|		Справочник.уатКластеры_уэ КАК уатКластеры_уэ
	|	ГДЕ
	|		уатКластеры_уэ.Ссылка В(&мсвПунктыПоЗаказу)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		уатПунктыНазначения.Ссылка
	|	ИЗ
	|		Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|	ГДЕ
	|		уатПунктыНазначения.Ссылка В(&мсвПунктыПоЗаказу)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&АдресДепо) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабТССекции.Ссылка КАК Ссылка,
	|	ТабТССекции.Грузоподъемность КАК Грузоподъемность,
	|	ТабТССекции.ОбъемКузова КАК ОбъемКузова,
	|	ТабТССекции.Секция КАК Секция,
	|	ТабТССекции.Порядок КАК Порядок,
	|	ТабТССекции.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|	ТабТССекции.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|	ТабТССекции.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ТабТССекции.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ТабТССекции.ТипТС КАК ТипТС,
	|	ТабТССекции.Приоритет КАК Приоритет,
	|	ТабТССекции.ДатаВыездаТС КАК ДатаВыездаТС,
	|	ТабТССекции.ВозвратВГараж КАК ВозвратВГараж
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТС1.Ссылка КАК Ссылка,
	|		ВТ_ТС1.Грузоподъемность КАК Грузоподъемность,
	|		ВЫБОР
	|			КОГДА &УчитыватьСекцииТС
	|				ТОГДА ЕСТЬNULL(СекцииТранспортныхСредств1.Объем, ВТ_ТС1.Ссылка.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему
	|			ИНАЧЕ ВТ_ТС1.ОбъемКузова
	|		КОНЕЦ КАК ОбъемКузова,
	|		ЕСТЬNULL(СекцииТранспортныхСредств1.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)) КАК Секция,
	|		ВЫБОР
	|			КОГДА &УчитыватьСекцииТС
	|				ТОГДА ЕСТЬNULL(СекцииТранспортныхСредств1.Объем, ВТ_ТС1.Ссылка.Модель.ОбъемКузова)
	|			ИНАЧЕ ВТ_ТС1.Порядок
	|		КОНЕЦ КАК Порядок,
	|		ВТ_ТС1.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|		ВТ_ТС1.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|		ВТ_ТС1.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|		ВТ_ТС1.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|		ВТ_ТС1.ТипТС КАК ТипТС,
	|		ВТ_ТС1.Приоритет КАК Приоритет,
	|		ВТ_ТС1.ДатаВыездаТС КАК ДатаВыездаТС,
	|		ВТ_ТС1.ВозвратВГараж КАК ВозвратВГараж
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС1
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств1
	|			ПО (&УчитыватьСекцииТС)
	|				И (СекцииТранспортныхСредств1.Владелец = ВТ_ТС1.Ссылка)
	|				И (НЕ СекцииТранспортныхСредств1.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ТС2.Ссылка,
	|		ВТ_ТС2.Грузоподъемность,
	|		ЕСТЬNULL(СекцииТранспортныхСредств2.Объем, ВТ_ТС2.Прицеп1.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
	|		ЕСТЬNULL(СекцииТранспортныхСредств2.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)),
	|		ЕСТЬNULL(СекцииТранспортныхСредств2.Объем, ВТ_ТС2.Прицеп1.Модель.ОбъемКузова),
	|		ВТ_ТС2.МинимальныйВесГруза,
	|		ВТ_ТС2.МинимальныйОбъемГруза,
	|		ВТ_ТС2.МинимальноеКоличествоУпаковок,
	|		ВТ_ТС2.МаксимальноеКоличествоУпаковок,
	|		ВТ_ТС2.ТипТС,
	|		ВТ_ТС2.Приоритет,
	|		ВТ_ТС2.ДатаВыездаТС,
	|		ВТ_ТС2.ВозвратВГараж
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС2
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств2
	|			ПО (СекцииТранспортныхСредств2.Владелец = ВТ_ТС2.Прицеп1)
	|				И (НЕ СекцииТранспортныхСредств2.ПометкаУдаления)
	|	ГДЕ
	|		&УчитыватьСекцииТС
	|		И ВТ_ТС2.Прицеп1.Наименование ЕСТЬ НЕ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ТС3.Ссылка,
	|		ВТ_ТС3.Грузоподъемность,
	|		ЕСТЬNULL(СекцииТранспортныхСредств3.Объем, ВТ_ТС3.Прицеп2.Модель.ОбъемКузова) * &КоэфОбъемаКузова * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
	|		ЕСТЬNULL(СекцииТранспортныхСредств3.Ссылка, ЗНАЧЕНИЕ(Справочник.уатСекцииТС.ПустаяСсылка)),
	|		ЕСТЬNULL(СекцииТранспортныхСредств3.Объем, ВТ_ТС3.Прицеп2.Модель.ОбъемКузова),
	|		ВТ_ТС3.МинимальныйВесГруза,
	|		ВТ_ТС3.МинимальныйОбъемГруза,
	|		ВТ_ТС3.МинимальноеКоличествоУпаковок,
	|		ВТ_ТС3.МаксимальноеКоличествоУпаковок,
	|		ВТ_ТС3.ТипТС,
	|		ВТ_ТС3.Приоритет,
	|		ВТ_ТС3.ДатаВыездаТС,
	|		ВТ_ТС3.ВозвратВГараж
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС3
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСекцииТС КАК СекцииТранспортныхСредств3
	|			ПО (СекцииТранспортныхСредств3.Владелец = ВТ_ТС3.Прицеп2)
	|				И (НЕ СекцииТранспортныхСредств3.ПометкаУдаления)
	|	ГДЕ
	|		&УчитыватьСекцииТС
	|		И ВТ_ТС3.Прицеп2.Наименование ЕСТЬ НЕ NULL ) КАК ТабТССекции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ,
	|	Порядок
	|ИТОГИ
	|	МАКСИМУМ(Грузоподъемность),
	|	СУММА(ОбъемКузова),
	|	МИНИМУМ(Порядок),
	|	МАКСИМУМ(МинимальныйВесГруза),
	|	МАКСИМУМ(МинимальныйОбъемГруза),
	|	МАКСИМУМ(МинимальноеКоличествоУпаковок),
	|	МАКСИМУМ(МаксимальноеКоличествоУпаковок),
	|	МАКСИМУМ(ТипТС),
	|	МАКСИМУМ(Приоритет),
	|	МАКСИМУМ(ДатаВыездаТС),
	|	МАКСИМУМ(ВозвратВГараж)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Пункт1 КАК Пункт1,
	|	ВложенныйЗапрос.Пункт2 КАК Пункт2,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
	|	КОНЕЦ КАК Время,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
	|	КОНЕЦ КАК Расстояние
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПунктыПогрузки.Пункт КАК Пункт1,
	|		ПунктыРазгрузки.Пункт КАК Пункт2
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Пункты.Пункт КАК Пункт
	|		ИЗ
	|			ВТ_Пункты КАК ВТ_Пункты) КАК ПунктыПогрузки,
	|		(ВЫБРАТЬ
	|			ВТ_Пункты.Пункт КАК Пункт
	|		ИЗ
	|			ВТ_Пункты КАК ВТ_Пункты) КАК ПунктыРазгрузки) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуКластерами_уэ КАК ТаблицаВремяРасстояниеПрямое
	|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеПрямое.КластерОтправления
	|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеПрямое.КластерПрибытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуКластерами_уэ КАК ТаблицаВремяРасстояниеОбратное
	|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеОбратное.КластерПрибытия
	|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеОбратное.КластерОтправления
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
	|		КОНЕЦ <> -1
	|	И ВЫБОР
	|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
	|		КОНЕЦ <> -1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Пункт1 КАК Пункт1,
	|	ВложенныйЗапрос.Пункт2 КАК Пункт2,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
	|	КОНЕЦ КАК Время,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
	|	КОНЕЦ КАК Расстояние
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПунктыПогрузки.Пункт КАК Пункт1,
	|		ПунктыРазгрузки.Пункт КАК Пункт2
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Пункты.Пункт КАК Пункт
	|		ИЗ
	|			ВТ_Пункты КАК ВТ_Пункты) КАК ПунктыПогрузки,
	|		(ВЫБРАТЬ
	|			ВТ_Пункты.Пункт КАК Пункт
	|		ИЗ
	|			ВТ_Пункты КАК ВТ_Пункты) КАК ПунктыРазгрузки) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуПунктами КАК ТаблицаВремяРасстояниеПрямое
	|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеПрямое.Пункт1
	|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеПрямое.Пункт2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасстоянияМеждуПунктами КАК ТаблицаВремяРасстояниеОбратное
	|		ПО ВложенныйЗапрос.Пункт1 = ТаблицаВремяРасстояниеОбратное.Пункт2
	|			И ВложенныйЗапрос.Пункт2 = ТаблицаВремяРасстояниеОбратное.Пункт1
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Время, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Время, -1))
	|		КОНЕЦ <> -1
	|	И ВЫБОР
	|			КОГДА ВложенныйЗапрос.Пункт1 = ВложенныйЗапрос.Пункт2
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаВремяРасстояниеПрямое.Расстояние, ЕСТЬNULL(ТаблицаВремяРасстояниеОбратное.Расстояние, -1))
	|		КОНЕЦ <> -1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблТиповТС.Ссылка КАК Ссылка,
	|	ТаблТиповТС.ТипТС КАК ТипТС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТС.Ссылка КАК Ссылка,
	|		уатТС.ТипТС КАК ТипТС
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|			ПО ВТ_ТС.Ссылка = уатТС.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ТС.Ссылка,
	|		уатМоделиТС.ТипТС
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|				ПО уатТС.Модель = уатМоделиТС.Ссылка
	|			ПО ВТ_ТС.Ссылка = уатТС.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВиртуальныеТС.Ссылка,
	|		ВиртуальныеТС.ТипТС
	|	ИЗ
	|		Справочник.уатТС КАК ВиртуальныеТС
	|	ГДЕ
	|		ВиртуальныеТС.Ссылка В(&мсвВиртуальныеТС)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВиртуальныеТС.Ссылка,
	|		уатМоделиТС.ТипТС
	|	ИЗ
	|		Справочник.уатТС КАК ВиртуальныеТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|			ПО ВиртуальныеТС.Модель = уатМоделиТС.Ссылка
	|				И (ВиртуальныеТС.Ссылка В (&мсвВиртуальныеТС))) КАК ТаблТиповТС
	|ИТОГИ ПО
	|	ТипТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Ссылка КАК ПунктПогрузки,
	|	уатТипыПунктовРазрешенныеТипыТС.ТипТС КАК ТипТС
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов.РазрешенныеТипыТС КАК уатТипыПунктовРазрешенныеТипыТС
	|		ПО уатПунктыНазначения.ТипПункта = уатТипыПунктовРазрешенныеТипыТС.Ссылка
	|			И (уатПунктыНазначения.Ссылка В (&мсвАдресаПоЗаказу))
	|ИТОГИ ПО
	|	ПунктПогрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТипыПунктовРазрешенныеТипыТС.Ссылка КАК КатегорияПункта,
	|	уатТипыПунктовРазрешенныеТипыТС.ТипТС КАК ТипТС,
	|	уатТипыПунктовРазрешенныеТипыТС.СтоянкаДоп КАК Стоянка
	|ИЗ
	|	Справочник.уатТипыПунктов.РазрешенныеТипыТС КАК уатТипыПунктовРазрешенныеТипыТС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатТипыПунктов.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	уатТипыПунктов.СтоянкаДоп
	|ИЗ
	|	Справочник.уатТипыПунктов КАК уатТипыПунктов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблТСДляХарактеристик.Ссылка КАК Ссылка,
	|	уатТСХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТС.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВиртуальныеТС.Ссылка
	|	ИЗ
	|		Справочник.уатТС КАК ВиртуальныеТС
	|	ГДЕ
	|		ВиртуальныеТС.Ссылка В(&мсвВиртуальныеТС)) КАК ТаблТСДляХарактеристик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС.Характеристики КАК уатТСХарактеристики
	|		ПО ТаблТСДляХарактеристик.Ссылка = уатТСХарактеристики.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоотвТаблРасстояний = Новый Соответствие();
	Если флИспользованиеКластеризации Тогда 
		ВыборкаПунктов = РезультатЗапроса[3].Выбрать();
	Иначе 
		ВыборкаПунктов = РезультатЗапроса[4].Выбрать();
	КонецЕсли;
	Пока ВыборкаПунктов.Следующий() Цикл 
		СтрокаП1 = СоотвТаблРасстояний.Получить(ВыборкаПунктов.Пункт1);
		Если СтрокаП1 = Неопределено Тогда 
			СоотвТаблРасстояний.Вставить(ВыборкаПунктов.Пункт1, Новый Соответствие());
			СтрокаП1 = СоотвТаблРасстояний.Получить(ВыборкаПунктов.Пункт1);
			СтрокаП1.Вставить(ВыборкаПунктов.Пункт1, Новый Структура("Время,Расстояние", 0, 0));
		КонецЕсли;
		СтрокаП2 = СтрокаП1.Получить(ВыборкаПунктов.Пункт2);
		Если СтрокаП2 = Неопределено Тогда 
			СтрокаП1.Вставить(ВыборкаПунктов.Пункт2, Новый Структура("Время,Расстояние", Неопределено, Неопределено));
			СтрокаП2 = СтрокаП1.Получить(ВыборкаПунктов.Пункт2);
		КонецЕсли;
		СтрокаП2.Время      = ВыборкаПунктов.Время;
		СтрокаП2.Расстояние = ВыборкаПунктов.Расстояние;
	КонецЦикла;
	
	СоотТипыТС = Новый Соответствие();
	СоотРазрешенныеТипыПунктов = Новый Соответствие();
	Если УчитыватьРазрешенныеТипыТС Тогда 
		ВыборкаТипыТС = РезультатЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипыТС.Следующий() Цикл 
			мсвТСПоТипу = Новый Массив();
			ВыборкаТСДетально = ВыборкаТипыТС.Выбрать();
			Пока ВыборкаТСДетально.Следующий() Цикл 
				мсвТСПоТипу.Добавить(ВыборкаТСДетально.Ссылка);
			КонецЦикла;
			Если мсвТСПоТипу.Количество() Тогда 
				СоотТипыТС.Вставить(ВыборкаТипыТС.ТипТС, мсвТСПоТипу);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаТипыПунктов = уатОбщегоНазначения.ПолучитьРазрешенныеТипыТС(мсвАдресаПоЗаказу).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипыПунктов.Следующий() Цикл 
			мсвТипыПунктов = Новый Массив();
			ВыборкаТипыДетально = ВыборкаТипыПунктов.Выбрать();
			Пока ВыборкаТипыДетально.Следующий() Цикл 
				мсвТипыПунктов.Добавить(ВыборкаТипыДетально.ТипТС);
			КонецЦикла;
			Если мсвТипыПунктов.Количество() Тогда 
				СоотРазрешенныеТипыПунктов.Вставить(ВыборкаТипыПунктов.ПунктПогрузки, мсвТипыПунктов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТабТС = РезультатЗапроса[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтоянкиПоТипамТС = РезультатЗапроса[7].Выгрузить();
	
	СоотРазрешенныеТСПоХарактеристикам = Новый Соответствие();
	
	Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
		ХарактеристикиТС = РезультатЗапроса[8].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого ТекНабор Из НаборХарактеристик Цикл 
			РазрешенныеТС = Новый Массив();
			
			Для Каждого СтрокаТС Из ХарактеристикиТС.Строки Цикл 
				ТекХарактеристики = Новый Массив();
				
				Для Каждого СтрокаХарактеристики Из СтрокаТС.Строки Цикл 
					Если Не СтрокаХарактеристики.Характеристика = Null Тогда 
						ТекХарактеристики.Добавить(СтрокаХарактеристики.Характеристика);
					КонецЕсли;
				КонецЦикла;
				
				флНаборРазрешен = Истина;
				
				Для Каждого ТекХарактеристика Из ТекНабор.Значение Цикл 
					Если ТекХарактеристики.Найти(ТекХарактеристика) = Неопределено Тогда 
						флНаборРазрешен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флНаборРазрешен Тогда 
					РазрешенныеТС.Добавить(СтрокаТС.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			СоотРазрешенныеТСПоХарактеристикам.Вставить(ТекНабор.Ключ, РазрешенныеТС);
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("СоотвТаблРасстояний",                СоотвТаблРасстояний);
	Результат.Вставить("СоотТипыТС",                         СоотТипыТС);
	Результат.Вставить("СоотРазрешенныеТипыПунктов",         СоотРазрешенныеТипыПунктов);
	Результат.Вставить("ТабТС",                              ТабТС);
	Результат.Вставить("СтоянкиПоТипамТС",                   СтоянкиПоТипамТС);
	Результат.Вставить("ТерминалыПогрузки",                  ДанныеПоТерминалам);
	Результат.Вставить("СоотРазрешенныеТСПоХарактеристикам", СоотРазрешенныеТСПоХарактеристикам);
	
	Возврат Результат;
	
КонецФункции // СформироватьДанныеПоТСИПереходам()

// Процедура выполняет обход матрицы выигрышей и распределяет заказы по ТС.
//
Процедура ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей(АдресВрХранилища, пулы, МатрицаВыигрышей, ТабЗаказы, 
		ТабТС, ОграничениеЧасов, ОграничениеПоРасстоянию, МаксимальноеЧислоПунктов, ТабСкоростей, СоотвТаблРасстояний, 
		АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо, ВремяВыезда, ФормироватьСборныеМаршруты, ЗапретитьСозданиеНовыхПулов, ТекстНадписиСтатуса,
		УчитыватьОграниченияПоЗагрузкеТС, МаксимальноеКоличествоЗаказовТС, УчитыватьОкнаПоЗаказам, 
		УчитыватьРазрешенныеТипыТС, СоотРазрешенныеТСПоЗаказам, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
		СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, УчитыватьСекцииТранспортныхСредств,
		СмешиватьГрузыВСекциях, СоотРазрешенныеТСПоХарактеристикам, ИспользоватьХарактеристикиЗаказовНаТС)
	
	// Определение общего количества итераций.
	ВсегоИтерацийСтатус = МатрицаВыигрышей.Количество();
	ТекИтерацияСтатус   = 0;
	
	Для Каждого ТекВыигрыш Из МатрицаВыигрышей Цикл 
		// Инкремент к счетчику итераций и помещение результата во временное хранилище (используется для отображения прогресса
		// маршрутизации в форме длительной операции).
		ТекИтерацияСтатус = ТекИтерацияСтатус + 1;
		ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю,Прогресс", ТекстНадписиСтатуса, Цел(ТекИтерацияСтатус * 100 / ВсегоИтерацийСтатус)), АдресВрХранилища);
		
		// Инициализация переменных, которые будут хранить пулы, в которых размещена пара заказов.
		мПулА = Неопределено;
		мПулБ = Неопределено;
		
		РазмещеныВОдномМаршруте = Ложь;
		Для Каждого ТекПул Из пулы Цикл 
			счВхождений = 0;
			Для Каждого ТекЭлемент Из ТекПул.маршрут Цикл 
				Если ТекЭлемент.заказ = ТекВыигрыш.ЗаказА Тогда
					мПулА       = ТекПул;
					счВхождений = счВхождений + 1;
				КонецЕсли;
				Если ТекЭлемент.заказ = ТекВыигрыш.ЗаказБ Тогда
					мПулБ       = ТекПул;
					счВхождений = счВхождений + 1;
				КонецЕсли;
				Если счВхождений > 1 Тогда 
					РазмещеныВОдномМаршруте = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Если текущая пара заказов уже размещена в одном маршруте - переход к следующему выигрышу.
		Если РазмещеныВОдномМаршруте Тогда 
			Продолжить;
		КонецЕсли;
		
		// Заказ должен быть строго в начале или конце пула.
		Если Не мПулА = Неопределено И Не (мПулА.маршрут[0].заказ = ТекВыигрыш.ЗаказА Или мПулА.маршрут[мПулА.маршрут.Количество() - 1].заказ = ТекВыигрыш.ЗаказА) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не мПулБ = Неопределено И Не (мПулБ.маршрут[0].заказ = ТекВыигрыш.ЗаказБ Или мПулБ.маршрут[мПулБ.маршрут.Количество() - 1].заказ = ТекВыигрыш.ЗаказБ) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Если предыдущие проверки пройдены - происходит попытка склеить два заказа между собой.
		// Возможны такие варианты дальнейшего развития событий:
		//   - (1):
		//         1.1 [а   ] + [б   ]
		//         1.2 [   a] + [б   ]
		//         1.3 [а   ] + [   б]
		//         1.4 [   a] + [   б]
		//   - (2):
		//         2.1 [б   ] + [а   ]
		//         2.2 [   б] + [а   ]
		//         2.3 [б   ] + [   а]
		//         2.4 [   б] + [   а]
		//   - (3): [   a] + (б)
		//   - (4): [   б] + (а)
		//   - (5):    (a) + (б)
		//   - (6):    (б) + [а   ]
		//   - (7):    (a) + [б   ]
		// где:
		//    а     - первый склеиваемый заказ;
		//    б     - второй склеиваемый заказ;
		//   [    ] - уже имеющийся маршрут;
		//   ( )    - отдельный добавляемый элемент.
		
		Если мПулА = Неопределено Тогда 
			Если мПулБ = Неопределено Тогда 
				// Вариант (5): оба заказа еще не размещены ни в одном ТС.
				// Если это домаршрутизация или нет свободных ТС - переходим к следующему выигрышу.
				Если ЗапретитьСозданиеНовыхПулов Или ТабТС.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант5(ТекВыигрыш, пулы, ТабТС, ТабЗаказы, ТабСкоростей, 
						ВремяВыезда, СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
						ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
						УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, МаксимальноеКоличествоЗаказовТС,
						СоотвГруппЗаказов, СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, 
						УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях, СоотРазрешенныеТСПоХарактеристикам,
						ИспользоватьХарактеристикиЗаказовНаТС) Тогда 
					Продолжить;
				КонецЕсли;
				
			Иначе 
				// Варианты (7), (4) заказ добавляется в существующий маршрут.
				стрЗаказА = ТабЗаказы.Найти(ТекВыигрыш.ЗаказА, "Ссылка");
				
				Если стрЗаказА = Неопределено Тогда 
					МаксимальныйВес   = мПулБ.МаксимальныйВес;
					МаксимальныйОбъем = мПулБ.МаксимальныйОбъем;
					ВсегоУпаковок     = мПулБ.ВсегоУпаковок;
					ВсегоЗаказов      = мПулБ.ВсегоЗаказов;
				Иначе 
					МаксимальныйВес   = стрЗаказА.ВесБрутто + мПулБ.МаксимальныйВес;
					МаксимальныйОбъем = стрЗаказА.Объем + мПулБ.МаксимальныйОбъем;
					ВсегоУпаковок     = стрЗаказА.КоличествоУпаковок + мПулБ.ВсегоУпаковок;
					ВсегоЗаказов      = 1 + мПулБ.ВсегоЗаказов;
				КонецЕсли;
				
				Если МаксимальноеКоличествоЗаказовТС <> 0 И ВсегоЗаказов > МаксимальноеКоличествоЗаказовТС Тогда 
					Продолжить;
				КонецЕсли;
				
				мсвРазрешенныеТСПоЗаказуА = Неопределено;
				Если УчитыватьРазрешенныеТипыТС Тогда 
					мсвРазрешенныеТСПоЗаказуА = СоотРазрешенныеТСПоЗаказам.Получить(ТекВыигрыш.ЗаказА);
				КонецЕсли;
				
				мсвРазрешенныеТСПоХарактеристикам = Неопределено;
				Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
					Если Не стрЗаказА = Неопределено Тогда
						мсвРазрешенныеТСПоХарактеристикам = СоотРазрешенныеТСПоХарактеристикам.Получить(стрЗаказА.НаборХарактеристик);
					КонецЕсли;
				КонецЕсли;
				
				// Подбор ТС с учетом ограничений.
				Если УчитыватьСекцииТранспортныхСредств Тогда 
					мсвЗаказыКРазмещению = Новый Массив();
					Если Не стрЗаказА = Неопределено Тогда 
						мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекВыигрыш.ЗаказА, стрЗаказА.Груз, стрЗаказА.Объем, стрЗаказА.ВесБрутто));
					КонецЕсли;
					Для Каждого ТекСтрокаМаршрута Из мПулБ.маршрут Цикл 
						стрЗаказ = ТабЗаказы.Найти(ТекСтрокаМаршрута.заказ, "Ссылка");
						мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекСтрокаМаршрута.заказ, стрЗаказ.Груз, стрЗаказ.Объем, стрЗаказ.ВесБрутто));
					КонецЦикла;
					РазрешеноЗаменятьТС = Истина;
					ДанныеРазмещенияЗаказовПоСекциям = ПолучитьДанныеРазмещенияЗаказовПоСекциям(
						мсвЗаказыКРазмещению, 
						ТабТС, 
						СмешиватьГрузыВСекциях,
						?(мПулБ.ГрузоподъемностьТС <> 0 И МаксимальныйВес > мПулБ.ГрузоподъемностьТС, Неопределено, мПулБ.ТабСекций),
						РазрешеноЗаменятьТС
					);
					
					Если Не ДанныеРазмещенияЗаказовПоСекциям.Размещено Тогда 
						Продолжить;
					КонецЕсли;
					
					мСтрокиТабТС = ДанныеРазмещенияЗаказовПоСекциям.СтрокиДерева;
					
				Иначе 
					мСтрокиТабТС = Новый Массив();
					Если (мПулБ.ГрузоподъемностьТС <> 0 И МаксимальныйВес > мПулБ.ГрузоподъемностьТС)
							Или (мПулБ.ОбъемКузоваТС <> 0 И МаксимальныйОбъем > мПулБ.ОбъемКузоваТС)
							Или (мПулБ.МаксимальноеКоличествоУпаковокТС <> 0 И ВсегоУпаковок > мПулБ.МаксимальноеКоличествоУпаковокТС)
							Или (Не мсвРазрешенныеТСПоЗаказуА = Неопределено И мсвРазрешенныеТСПоЗаказуА.Найти(мПулБ.ТС) = Неопределено)
							Или (Не мсвРазрешенныеТСПоХарактеристикам = Неопределено И мсвРазрешенныеТСПоХарактеристикам.Найти(мПулБ.ТС) = Неопределено) Тогда 
						
						Для Каждого ТекЭлТабТС Из ТабТС.Строки Цикл 
							флРазрешеноПоТипам = Истина;
							
							Если УчитыватьРазрешенныеТипыТС Тогда 
								Для Каждого СтрокаМаршрута Из мПулБ.маршрут Цикл 
									мсвРазрешенныеТС = СоотРазрешенныеТСПоЗаказам.Получить(СтрокаМаршрута.заказ);
									Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
										флРазрешеноПоТипам = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								Если Не мсвРазрешенныеТСПоЗаказуА = Неопределено И мсвРазрешенныеТСПоЗаказуА.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
									флРазрешеноПоТипам = Ложь;
								КонецЕсли;
							КонецЕсли;
							
							Если Не флРазрешеноПоТипам Тогда 
								Продолжить;
							КонецЕсли;
							
							флРазрешеноПоХарактеристикам = Истина;
							
							Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
								Для Каждого СтрокаМаршрута Из мПулБ.маршрут Цикл 
									ТекСтрокаЗаказ = ТабЗаказы.Найти(СтрокаМаршрута.заказ, "Ссылка");
									мсвРазрешенныеТС = СоотРазрешенныеТСПоХарактеристикам.Получить(ТекСтрокаЗаказ.НаборХарактеристик);
									Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
										флРазрешеноПоХарактеристикам = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								Если Не мсвРазрешенныеТСПоХарактеристикам = Неопределено И мсвРазрешенныеТСПоХарактеристикам.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
									флРазрешеноПоХарактеристикам = Ложь;
								КонецЕсли;
							КонецЕсли;
							
							Если Не флРазрешеноПоХарактеристикам Тогда 
								Продолжить;
							КонецЕсли;
							
							Если (ТекЭлТабТС.Грузоподъемность = 0 Или ТекЭлТабТС.Грузоподъемность >= МаксимальныйВес)
									И (ТекЭлТабТС.ОбъемКузова = 0 Или ТекЭлТабТС.ОбъемКузова >= МаксимальныйОбъем)
									И (ТекЭлТабТС.МаксимальноеКоличествоУпаковок = 0 Или ТекЭлТабТС.МаксимальноеКоличествоУпаковок >= ВсегоУпаковок) Тогда 
								мСтрокиТабТС.Добавить(ТекЭлТабТС);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если мСтрокиТабТС.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если мПулБ.маршрут[0].заказ = ТекВыигрыш.ЗаказБ Тогда 
					// (7).
					Если Не ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант67(ТекВыигрыш.ЗаказА, мПулБ, пулы, ТабТС, 
							ТабЗаказы, ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
							СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
							ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
							УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
							СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мСтрокиТабТС, 
							УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях) Тогда 
						Продолжить;
					КонецЕсли;
					
				Иначе 
					// (4).
					Если Не ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант34(ТекВыигрыш.ЗаказА, мПулБ, пулы, ТабТС, 
							ТабЗаказы, ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
							СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
							ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
							УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
							СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мСтрокиТабТС, 
							УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях) Тогда 
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Выполняется замена ТС на более емкое.
				Если мСтрокиТабТС.Количество() Тогда 
					// Вернуть старые ТС.
					Для Каждого СтарыйТС Из мПулБ.мсвТС Цикл 
						НовСтрТС = ТабТС.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрТС, СтарыйТС);
						
						Если УчитыватьСекцииТранспортныхСредств Тогда 
							СекцииТС = мПулБ.ТабСекций.НайтиСтроки(Новый Структура("ТС", СтарыйТС.Ссылка));
							Для Каждого ТекСекция Из СекцииТС Цикл 
								СтрокаСекции = НовСтрТС.Строки.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаСекции, НовСтрТС);
								СтрокаСекции.Секция      = ТекСекция.Секция;
								СтрокаСекции.ОбъемКузова = ТекСекция.ОбъемСекции;
							КонецЦикла;
							
						Иначе 
							ПодСтрока = НовСтрТС.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(ПодСтрока, НовСтрТС);
						КонецЕсли;
					КонецЦикла;
					
					// Подставить новые в пул.
					мПулБ.мсвТС.Очистить();
					мПулБ.ТС    = мСтрокиТабТС[0].Ссылка;
					мПулБ.ТипТС = мСтрокиТабТС[0].ТипТС;
					
					мПулБ.ГрузоподъемностьТС               = 0;
					мПулБ.ОбъемКузоваТС                    = 0;
					мПулБ.ПорядокТС                        = 0;
					мПулБ.МинимальныйВесГрузаТС            = 0;
					мПулБ.МинимальныйОбъемГрузаТС          = 0;
					мПулБ.МинимальноеКоличествоУпаковокТС  = 0;
					мПулБ.МаксимальноеКоличествоУпаковокТС = 0;
					мПулБ.ПриоритетТС                      = 99;
					мПулБ.ДатаВыездаТС                     = '00010101';
					мПулБ.ВозвратВГараж                    = Ложь;
					
					Для Каждого ТекСтрокаТС Из мСтрокиТабТС Цикл 
						ДанныеПоТС = Новый Структура();
						ДанныеПоТС.Вставить("Ссылка",                         ТекСтрокаТС.Ссылка);
						ДанныеПоТС.Вставить("Грузоподъемность",               ТекСтрокаТС.Грузоподъемность);
						ДанныеПоТС.Вставить("ОбъемКузова",                    ТекСтрокаТС.ОбъемКузова);
						ДанныеПоТС.Вставить("Порядок",                        ТекСтрокаТС.Порядок);
						ДанныеПоТС.Вставить("МинимальныйВесГруза",            ТекСтрокаТС.МинимальныйВесГруза);
						ДанныеПоТС.Вставить("МинимальныйОбъемГруза",          ТекСтрокаТС.МинимальныйОбъемГруза);
						ДанныеПоТС.Вставить("МинимальноеКоличествоУпаковок",  ТекСтрокаТС.МинимальноеКоличествоУпаковок);
						ДанныеПоТС.Вставить("МаксимальноеКоличествоУпаковок", ТекСтрокаТС.МаксимальноеКоличествоУпаковок);
						ДанныеПоТС.Вставить("ТипТС",                          ТекСтрокаТС.ТипТС);
						ДанныеПоТС.Вставить("Приоритет",                      ТекСтрокаТС.Приоритет);
						ДанныеПоТС.Вставить("ДатаВыездаТС",                   ТекСтрокаТС.ДатаВыездаТС);
						ДанныеПоТС.Вставить("ВозвратВГараж",                  ТекСтрокаТС.ВозвратВГараж);
						мПулБ.мсвТС.Добавить(ДанныеПоТС);
						
						мПулБ.ГрузоподъемностьТС               = мПулБ.ГрузоподъемностьТС + ТекСтрокаТС.Грузоподъемность;
						мПулБ.ОбъемКузоваТС                    = мПулБ.ОбъемКузоваТС + ТекСтрокаТС.ОбъемКузова;
						мПулБ.ПорядокТС                        = мПулБ.ПорядокТС + ТекСтрокаТС.Порядок;
						мПулБ.МинимальныйВесГрузаТС            = мПулБ.МинимальныйВесГрузаТС + ТекСтрокаТС.МинимальныйВесГруза;
						мПулБ.МинимальныйОбъемГрузаТС          = мПулБ.МинимальныйОбъемГрузаТС + ТекСтрокаТС.МинимальныйОбъемГруза;
						мПулБ.МинимальноеКоличествоУпаковокТС  = мПулБ.МинимальноеКоличествоУпаковокТС + ТекСтрокаТС.МинимальноеКоличествоУпаковок;
						мПулБ.МаксимальноеКоличествоУпаковокТС = мПулБ.МаксимальноеКоличествоУпаковокТС + ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
						мПулБ.ПриоритетТС                      = Мин(мПулБ.ПриоритетТС, ТекСтрокаТС.Приоритет);
						мПулБ.ДатаВыездаТС                     = Макс(мПулБ.ДатаВыездаТС, ТекСтрокаТС.ДатаВыездаТС);
						мПулБ.ВозвратВГараж                    = Макс(мПулБ.ВозвратВГараж, ТекСтрокаТС.ВозвратВГараж);
						
						// Удалить новые ТС из таблицы.
						ТабТС.Строки.Удалить(ТекСтрокаТС);
					КонецЦикла;
					
					ТабТС.Строки.Сортировать("Приоритет Убыв, Порядок Возр");
				КонецЕсли;
				
				Если УчитыватьСекцииТранспортныхСредств Тогда 
					мПулБ.ТабСекций.Очистить();
					Для Каждого ТекСтр Из ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения Цикл 
						НовСтр = мПулБ.ТабСекций.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			Если мПулБ = Неопределено Тогда 
				// Вариант (6), (3). Добавление заказа к существующему маршруту.
				стрЗаказБ = ТабЗаказы.Найти(ТекВыигрыш.ЗаказБ, "Ссылка");
				
				МаксимальныйВес   = мПулА.МаксимальныйВес + стрЗаказБ.ВесБрутто;
				МаксимальныйОбъем = мПулА.МаксимальныйОбъем + стрЗаказБ.Объем;
				ВсегоУпаковок     = мПулА.ВсегоУпаковок + стрЗаказБ.КоличествоУпаковок;
				ВсегоЗаказов      = мПулА.ВсегоЗаказов + 1;
				
				Если МаксимальноеКоличествоЗаказовТС <> 0 И ВсегоЗаказов > МаксимальноеКоличествоЗаказовТС Тогда 
					Продолжить;
				КонецЕсли;
				
				мсвРазрешенныеТСПоЗаказуБ = Неопределено;
				Если УчитыватьРазрешенныеТипыТС Тогда 
					мсвРазрешенныеТСПоЗаказуБ = СоотРазрешенныеТСПоЗаказам.Получить(ТекВыигрыш.ЗаказБ);
				КонецЕсли;
				
				мсвРазрешенныеТСПоХарактеристикам = Неопределено;
				Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
					мсвРазрешенныеТСПоХарактеристикам = СоотРазрешенныеТСПоХарактеристикам.Получить(стрЗаказБ.НаборХарактеристик);
				КонецЕсли;
				
				Если УчитыватьСекцииТранспортныхСредств Тогда 
					мсвЗаказыКРазмещению = Новый Массив();
					мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекВыигрыш.ЗаказБ, стрЗаказБ.Груз, стрЗаказБ.Объем, стрЗаказБ.ВесБрутто));
					Для Каждого ТекСтрокаМаршрута Из мПулА.маршрут Цикл 
						стрЗаказ = ТабЗаказы.Найти(ТекСтрокаМаршрута.заказ, "Ссылка");
						мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекСтрокаМаршрута.заказ, стрЗаказ.Груз, стрЗаказ.Объем, стрЗаказ.ВесБрутто));
					КонецЦикла;
					РазрешеноЗаменятьТС = Истина;
					ДанныеРазмещенияЗаказовПоСекциям = ПолучитьДанныеРазмещенияЗаказовПоСекциям(
						мсвЗаказыКРазмещению, 
						ТабТС, 
						СмешиватьГрузыВСекциях,
						?(мПулА.ГрузоподъемностьТС <> 0 И МаксимальныйВес > мПулА.ГрузоподъемностьТС, Неопределено, мПулА.ТабСекций),
						РазрешеноЗаменятьТС
					);
					
					Если Не ДанныеРазмещенияЗаказовПоСекциям.Размещено Тогда 
						Продолжить;
					КонецЕсли;
					
					мСтрокиТабТС = ДанныеРазмещенияЗаказовПоСекциям.СтрокиДерева;
					
				Иначе 
					мСтрокиТабТС = Новый Массив();
					Если (мПулА.ГрузоподъемностьТС <> 0 И МаксимальныйВес > мПулА.ГрузоподъемностьТС)
							Или (мПулА.ОбъемКузоваТС <> 0 И МаксимальныйОбъем > мПулА.ОбъемКузоваТС)
							Или (мПулА.МаксимальноеКоличествоУпаковокТС <> 0 И ВсегоУпаковок > мПулА.МаксимальноеКоличествоУпаковокТС)
							Или (Не мсвРазрешенныеТСПоЗаказуБ = Неопределено И мсвРазрешенныеТСПоЗаказуБ.Найти(мПулА.ТС) = Неопределено)
							Или (Не мсвРазрешенныеТСПоХарактеристикам = Неопределено И мсвРазрешенныеТСПоХарактеристикам.Найти(мПулА.ТС) = Неопределено) Тогда 
						
						Для Каждого ТекЭлТабТС Из ТабТС.Строки Цикл 
							флРазрешеноПоТипам = Истина;
							
							Если УчитыватьРазрешенныеТипыТС Тогда 
								Для Каждого СтрокаМаршрута Из мПулА.маршрут Цикл 
									мсвРазрешенныеТС = СоотРазрешенныеТСПоЗаказам.Получить(СтрокаМаршрута.заказ);
									Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
										флРазрешеноПоТипам = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								Если Не мсвРазрешенныеТСПоЗаказуБ = Неопределено И мсвРазрешенныеТСПоЗаказуБ.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
									флРазрешеноПоТипам = Ложь;
								КонецЕсли;
							КонецЕсли;
							
							Если Не флРазрешеноПоТипам Тогда 
								Продолжить;
							КонецЕсли;
							
							флРазрешеноПоХарактеристикам = Истина;
							
							Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
								Для Каждого СтрокаМаршрута Из мПулА.маршрут Цикл 
									ТекСтрокаЗаказ = ТабЗаказы.Найти(СтрокаМаршрута.заказ, "Ссылка");
									мсвРазрешенныеТС = СоотРазрешенныеТСПоХарактеристикам.Получить(ТекСтрокаЗаказ.НаборХарактеристик);
									Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
										флРазрешеноПоХарактеристикам = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								Если Не мсвРазрешенныеТСПоХарактеристикам = Неопределено И мсвРазрешенныеТСПоХарактеристикам.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
									флРазрешеноПоХарактеристикам = Ложь;
								КонецЕсли;
							КонецЕсли;
							
							Если Не флРазрешеноПоХарактеристикам Тогда 
								Продолжить;
							КонецЕсли;
							
							Если (ТекЭлТабТС.Грузоподъемность = 0 Или ТекЭлТабТС.Грузоподъемность >= МаксимальныйВес)
									И (ТекЭлТабТС.ОбъемКузова = 0 Или ТекЭлТабТС.ОбъемКузова >= МаксимальныйОбъем) 
									И (ТекЭлТабТС.МаксимальноеКоличествоУпаковок = 0 Или ТекЭлТабТС.МаксимальноеКоличествоУпаковок >= ВсегоУпаковок) Тогда 
								мСтрокиТабТС.Добавить(ТекЭлТабТС);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если мСтрокиТабТС.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если мПулА.маршрут[0].заказ = ТекВыигрыш.ЗаказА Тогда 
					// (6).
					Если Не ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант67(ТекВыигрыш.ЗаказБ, мПулА, пулы, ТабТС, 
							ТабЗаказы, ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
							СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
							ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
							УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
							СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мСтрокиТабТС, 
							УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях) Тогда 
						Продолжить;
					КонецЕсли;
					
				Иначе 
					// (3).
					Если Не ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант34(ТекВыигрыш.ЗаказБ, мПулА, пулы, ТабТС, 
							ТабЗаказы, ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
							СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
							ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
							УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
							СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мСтрокиТабТС, 
							УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях) Тогда 
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Выполняется замена ТС на более емкое.
				Если мСтрокиТабТС.Количество() Тогда 
					// Вернуть старые ТС.
					Для Каждого СтарыйТС Из мПулА.мсвТС Цикл 
						НовСтрТС = ТабТС.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрТС, СтарыйТС);
						
						Если УчитыватьСекцииТранспортныхСредств Тогда 
							СекцииТС = мПулА.ТабСекций.НайтиСтроки(Новый Структура("ТС", СтарыйТС.Ссылка));
							Для Каждого ТекСекция Из СекцииТС Цикл 
								СтрокаСекции = НовСтрТС.Строки.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаСекции, НовСтрТС);
								СтрокаСекции.Секция      = ТекСекция.Секция;
								СтрокаСекции.ОбъемКузова = ТекСекция.ОбъемСекции;
							КонецЦикла;
							
						Иначе 
							ПодСтрока = НовСтрТС.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(ПодСтрока, НовСтрТС);
						КонецЕсли;
					КонецЦикла;
					
					// Подставить новые в пул.
					мПулА.мсвТС.Очистить();
					мПулА.ТС    = мСтрокиТабТС[0].Ссылка;
					мПулА.ТипТС = мСтрокиТабТС[0].ТипТС;
					
					мПулА.ГрузоподъемностьТС               = 0;
					мПулА.ОбъемКузоваТС                    = 0;
					мПулА.ПорядокТС                        = 0;
					мПулА.МинимальныйВесГрузаТС            = 0;
					мПулА.МинимальныйОбъемГрузаТС          = 0;
					мПулА.МинимальноеКоличествоУпаковокТС  = 0;
					мПулА.МаксимальноеКоличествоУпаковокТС = 0;
					мПулА.ПриоритетТС                      = 99;
					мПулА.ДатаВыездаТС                     = '00010101';
					мПулА.ВозвратВГараж                    = Ложь;
					
					Для Каждого ТекСтрокаТС Из мСтрокиТабТС Цикл 
						ДанныеПоТС = Новый Структура();
						ДанныеПоТС.Вставить("Ссылка",                         ТекСтрокаТС.Ссылка);
						ДанныеПоТС.Вставить("Грузоподъемность",               ТекСтрокаТС.Грузоподъемность);
						ДанныеПоТС.Вставить("ОбъемКузова",                    ТекСтрокаТС.ОбъемКузова);
						ДанныеПоТС.Вставить("Порядок",                        ТекСтрокаТС.Порядок);
						ДанныеПоТС.Вставить("МинимальныйВесГруза",            ТекСтрокаТС.МинимальныйВесГруза);
						ДанныеПоТС.Вставить("МинимальныйОбъемГруза",          ТекСтрокаТС.МинимальныйОбъемГруза);
						ДанныеПоТС.Вставить("МинимальноеКоличествоУпаковок",  ТекСтрокаТС.МинимальноеКоличествоУпаковок);
						ДанныеПоТС.Вставить("МаксимальноеКоличествоУпаковок", ТекСтрокаТС.МаксимальноеКоличествоУпаковок);
						ДанныеПоТС.Вставить("ТипТС",                          ТекСтрокаТС.ТипТС);
						ДанныеПоТС.Вставить("Приоритет",                      ТекСтрокаТС.Приоритет);
						ДанныеПоТС.Вставить("ДатаВыездаТС",                   ТекСтрокаТС.ДатаВыездаТС);
						ДанныеПоТС.Вставить("ВозвратВГараж",                  ТекСтрокаТС.ВозвратВГараж);
						мПулА.мсвТС.Добавить(ДанныеПоТС);
						
						мПулА.ГрузоподъемностьТС               = мПулА.ГрузоподъемностьТС + ТекСтрокаТС.Грузоподъемность;
						мПулА.ОбъемКузоваТС                    = мПулА.ОбъемКузоваТС + ТекСтрокаТС.ОбъемКузова;
						мПулА.ПорядокТС                        = мПулА.ПорядокТС + ТекСтрокаТС.Порядок;
						мПулА.МинимальныйВесГрузаТС            = мПулА.МинимальныйВесГрузаТС + ТекСтрокаТС.МинимальныйВесГруза;
						мПулА.МинимальныйОбъемГрузаТС          = мПулА.МинимальныйОбъемГрузаТС + ТекСтрокаТС.МинимальныйОбъемГруза;
						мПулА.МинимальноеКоличествоУпаковокТС  = мПулА.МинимальноеКоличествоУпаковокТС + ТекСтрокаТС.МинимальноеКоличествоУпаковок;
						мПулА.МаксимальноеКоличествоУпаковокТС = мПулА.МаксимальноеКоличествоУпаковокТС + ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
						мПулА.ПриоритетТС                      = Мин(мПулА.ПриоритетТС, ТекСтрокаТС.Приоритет);
						мПулА.ДатаВыездаТС                     = Макс(мПулА.ДатаВыездаТС, ТекСтрокаТС.ДатаВыездаТС);
						мПулА.ВозвратВГараж                    = Макс(мПулА.ВозвратВГараж, ТекСтрокаТС.ВозвратВГараж);
						
						// Удалить новые ТС из таблицы.
						ТабТС.Строки.Удалить(ТекСтрокаТС);
					КонецЦикла;
					
					ТабТС.Строки.Сортировать("Приоритет Убыв, Порядок Возр");
				КонецЕсли;
				
				Если УчитыватьСекцииТранспортныхСредств Тогда 
					мПулА.ТабСекций.Очистить();
					Для Каждого ТекСтр Из ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения Цикл 
						НовСтр = мПулА.ТабСекций.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
					КонецЦикла;
				КонецЕсли;
				
			Иначе 
				// Варианты (2), (1). Объединение двух существующих маршрутов в один.
				
				МаксимальныйВес   = мПулА.МаксимальныйВес + мПулБ.МаксимальныйВес;
				МаксимальныйОбъем = мПулА.МаксимальныйОбъем + мПулБ.МаксимальныйОбъем;
				ВсегоУпаковок     = мПулА.ВсегоУпаковок + мПулБ.ВсегоУпаковок;
				ВсегоЗаказов      = мПулА.ВсегоЗаказов + мПулБ.ВсегоЗаказов;
				
				Если МаксимальноеКоличествоЗаказовТС <> 0 И ВсегоЗаказов > МаксимальноеКоличествоЗаказовТС Тогда 
					Продолжить;
				КонецЕсли;
				
				Если мПулА.маршрут[0].заказ = ТекВыигрыш.ЗаказА И мПулБ.маршрут[0].заказ = ТекВыигрыш.ЗаказБ Тогда 
					// 1.1. + 2.1.
					ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант12(мПулА, мПулБ, пулы, ТабТС, ТабЗаказы, 
						ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
						СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
						ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
						УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
						СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки,
						УчитыватьСекцииТранспортныхСредств, Истина, Ложь, СмешиватьГрузыВСекциях,
						СоотРазрешенныеТСПоХарактеристикам, ИспользоватьХарактеристикиЗаказовНаТС
					);
					
				ИначеЕсли мПулА.маршрут[мПулА.маршрут.Количество() - 1].заказ = ТекВыигрыш.ЗаказА И мПулБ.маршрут[0].заказ = ТекВыигрыш.ЗаказБ Тогда
					// 1.2. + 2.3.
					ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант12(мПулА, мПулБ, пулы, ТабТС, ТабЗаказы, 
						ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
						СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
						ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
						УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
						СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки,
						УчитыватьСекцииТранспортныхСредств, Ложь, Ложь, СмешиватьГрузыВСекциях,
						СоотРазрешенныеТСПоХарактеристикам, ИспользоватьХарактеристикиЗаказовНаТС
					);
					
				ИначеЕсли мПулА.маршрут[0].заказ = ТекВыигрыш.ЗаказА И мПулБ.маршрут[мПулБ.маршрут.Количество() - 1].заказ = ТекВыигрыш.ЗаказБ Тогда 
					// 1.3. + 2.2.
					ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант12(мПулБ, мПулА, пулы, ТабТС, ТабЗаказы, 
						ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
						СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
						ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
						УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
						СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки,
						УчитыватьСекцииТранспортныхСредств, Ложь, Ложь, СмешиватьГрузыВСекциях,
						СоотРазрешенныеТСПоХарактеристикам, ИспользоватьХарактеристикиЗаказовНаТС
					);
					
				ИначеЕсли мПулА.маршрут[мПулА.маршрут.Количество() - 1].заказ = ТекВыигрыш.ЗаказА И мПулБ.маршрут[мПулБ.маршрут.Количество() - 1].заказ = ТекВыигрыш.ЗаказБ Тогда
					// 1.4. + 2.4.
					ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант12(мПулА, мПулБ, пулы, ТабТС, ТабЗаказы, 
						ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, ВремяВыезда, 
						СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
						ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
						УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов, 
						СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки,
						УчитыватьСекцииТранспортныхСредств, Ложь, Истина, СмешиватьГрузыВСекциях,
						СоотРазрешенныеТСПоХарактеристикам, ИспользоватьХарактеристикиЗаказовНаТС
					);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант12(мПулА, мПулБ, пулы, ТабТС, ТабЗаказы, 
		ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, Знач ВремяВыезда, 
		СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
		ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС,
		УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов,
		СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, УчитыватьСекцииТранспортныхСредств,
		ИнверсияПулаА=Ложь, ИнверсияПулаБ=Ложь, СмешиватьГрузыВСекциях, СоотРазрешенныеТСПоХарактеристикам,
		ИспользоватьХарактеристикиЗаказовНаТС)
	
	МаршрутПулА = Новый Массив();
	Если ИнверсияПулаА Тогда
		Для Каждого ТекСтрокаМаршрута Из мПулА.маршрут Цикл 
			МаршрутПулА.Вставить(0, Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
				ТекСтрокаМаршрута.заказ, ТекСтрокаМаршрута.Операция, ТекСтрокаМаршрута.Ожидание, ТекСтрокаМаршрута.Время, ТекСтрокаМаршрута.Расстояние));
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрокаМаршрута Из мПулА.маршрут Цикл 
			МаршрутПулА.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
				ТекСтрокаМаршрута.заказ, ТекСтрокаМаршрута.Операция, ТекСтрокаМаршрута.Ожидание, ТекСтрокаМаршрута.Время, ТекСтрокаМаршрута.Расстояние));
		КонецЦикла;
	КонецЕсли;
	
	МаршрутПулБ = Новый Массив();
	Если ИнверсияПулаБ Тогда
		Для Каждого ТекСтрокаМаршрута Из мПулБ.маршрут Цикл 
			МаршрутПулБ.Вставить(0, Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
				ТекСтрокаМаршрута.заказ, ТекСтрокаМаршрута.Операция, ТекСтрокаМаршрута.Ожидание, ТекСтрокаМаршрута.Время, ТекСтрокаМаршрута.Расстояние));
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрокаМаршрута Из мПулБ.маршрут Цикл 
			МаршрутПулБ.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
				ТекСтрокаМаршрута.заказ, ТекСтрокаМаршрута.Операция, ТекСтрокаМаршрута.Ожидание, ТекСтрокаМаршрута.Время, ТекСтрокаМаршрута.Расстояние));
		КонецЦикла;
	КонецЕсли;
	
	флРазрешеноПоТипам = Истина;
	Если УчитыватьРазрешенныеТипыТС Тогда 
		Для Каждого СтрокаМаршрута Из МаршрутПулБ Цикл 
			мсвРазрешенныеТС = СоотРазрешенныеТСПоЗаказам.Получить(СтрокаМаршрута.заказ);
			Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(мПулА.ТС) = Неопределено Тогда 
				флРазрешеноПоТипам = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	флРазрешеноПоХарактеристикам = Истина;
	
	Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
		Для Каждого СтрокаМаршрута Из МаршрутПулБ Цикл 
			ТекСтрокаЗаказ = ТабЗаказы.Найти(СтрокаМаршрута.заказ, "Ссылка");
			мсвРазрешенныеТС = СоотРазрешенныеТСПоХарактеристикам.Получить(ТекСтрокаЗаказ.НаборХарактеристик);
			Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(мПулА.ТС) = Неопределено Тогда 
				флРазрешеноПоХарактеристикам = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если УчитыватьСекцииТранспортныхСредств Тогда 
		мсвЗаказыКРазмещению = Новый Массив();
		Для Каждого ТекСтрокаМаршрута Из МаршрутПулА Цикл 
			стрЗаказ = ТабЗаказы.Найти(ТекСтрокаМаршрута.заказ, "Ссылка");
			мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекСтрокаМаршрута.заказ, стрЗаказ.Груз, стрЗаказ.Объем, стрЗаказ.ВесБрутто));
		КонецЦикла;
		Для Каждого ТекСтрокаМаршрута Из МаршрутПулБ Цикл 
			стрЗаказ = ТабЗаказы.Найти(ТекСтрокаМаршрута.заказ, "Ссылка");
			мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекСтрокаМаршрута.заказ, стрЗаказ.Груз, стрЗаказ.Объем, стрЗаказ.ВесБрутто));
		КонецЦикла;
		РазрешеноЗаменятьТС = Истина;
		ДанныеРазмещенияЗаказовПоСекциям = ПолучитьДанныеРазмещенияЗаказовПоСекциям(
			мсвЗаказыКРазмещению, 
			ТабТС, 
			СмешиватьГрузыВСекциях,
			?(мПулА.ГрузоподъемностьТС <> 0 И МаксимальныйВес > мПулА.ГрузоподъемностьТС, Неопределено, мПулА.ТабСекций),
			РазрешеноЗаменятьТС
		);
		
		Если Не ДанныеРазмещенияЗаказовПоСекциям.Размещено Тогда 
			Возврат;
		КонецЕсли;
		
		мСтрокиТабТС = ДанныеРазмещенияЗаказовПоСекциям.СтрокиДерева;
		
	Иначе 
		мСтрокиТабТС = Новый Массив();
		Если (мПулА.ГрузоподъемностьТС <> 0 И МаксимальныйВес > мПулА.ГрузоподъемностьТС)
				Или (мПулА.ОбъемКузоваТС <> 0 И МаксимальныйОбъем > мПулА.ОбъемКузоваТС)
				Или (мПулА.МаксимальноеКоличествоУпаковокТС <> 0 И ВсегоУпаковок > мПулА.МаксимальноеКоличествоУпаковокТС)
				Или Не флРазрешеноПоТипам Или Не флРазрешеноПоХарактеристикам Тогда 
			
			Для Каждого ТекЭлТабТС Из ТабТС.Строки Цикл 
				флРазрешеноПоТипам = Истина;
				
				Если УчитыватьРазрешенныеТипыТС Тогда 
					Для Каждого СтрокаМаршрута Из МаршрутПулА Цикл 
						мсвРазрешенныеТС = СоотРазрешенныеТСПоЗаказам.Получить(СтрокаМаршрута.заказ);
						Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
							флРазрешеноПоТипам = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого СтрокаМаршрута Из МаршрутПулБ Цикл 
						мсвРазрешенныеТС = СоотРазрешенныеТСПоЗаказам.Получить(СтрокаМаршрута.заказ);
						Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
							флРазрешеноПоТипам = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не флРазрешеноПоТипам Тогда 
					Продолжить;
				КонецЕсли;
				
				флРазрешеноПоХарактеристикам = Истина;
				
				Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
					Для Каждого СтрокаМаршрута Из МаршрутПулА Цикл 
						ТекСтрокаЗаказ = ТабЗаказы.Найти(СтрокаМаршрута.заказ, "Ссылка");
						мсвРазрешенныеТС = СоотРазрешенныеТСПоХарактеристикам.Получить(ТекСтрокаЗаказ.НаборХарактеристик);
						Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
							флРазрешеноПоХарактеристикам = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого СтрокаМаршрута Из МаршрутПулБ Цикл 
						ТекСтрокаЗаказ = ТабЗаказы.Найти(СтрокаМаршрута.заказ, "Ссылка");
						мсвРазрешенныеТС = СоотРазрешенныеТСПоХарактеристикам.Получить(ТекСтрокаЗаказ.НаборХарактеристик);
						Если Не мсвРазрешенныеТС = Неопределено И мсвРазрешенныеТС.Найти(ТекЭлТабТС.Ссылка) = Неопределено Тогда 
							флРазрешеноПоХарактеристикам = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не флРазрешеноПоХарактеристикам Тогда 
					Продолжить;
				КонецЕсли;
				
				Если (ТекЭлТабТС.Грузоподъемность = 0 Или ТекЭлТабТС.Грузоподъемность >= МаксимальныйВес)
						И (ТекЭлТабТС.ОбъемКузова = 0 Или ТекЭлТабТС.ОбъемКузова >= МаксимальныйОбъем)
						И (ТекЭлТабТС.МаксимальноеКоличествоУпаковок = 0 Или ТекЭлТабТС.МаксимальноеКоличествоУпаковок >= ВсегоУпаковок) Тогда 
					мСтрокиТабТС.Добавить(ТекЭлТабТС);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если мСтрокиТабТС.Количество() = 0 Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мПулА.ДатаВыездаТС) Тогда 
		ВремяВыездаНаМаршрут = мПулА.ДатаВыездаТС;
		
	Иначе 
		ВремяВыездаНаМаршрут = ВремяВыезда;
		Если РежимВремениВыездаИзГаража = 0 Тогда 
			Если МаршрутПулА.Количество() Тогда 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулА[0].заказ, "Ссылка");
				ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
			Иначе 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[0].заказ, "Ссылка");
				ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для ИтерацияВремени = 1 По 2 Цикл 
		текТерминал            = мПулА.Терминал;
		текТерминалОкноС       = Неопределено;
		текТерминалОкноПо      = Неопределено;
		текТерминалПосещениеС  = мПулА.ТерминалПосещениеС;
		текТерминалПосещениеПо = мПулА.ТерминалПосещениеПо;
		
		мсвПосещенныеПункты = Новый Массив();
		врОбщВремя          = 0;
		врОбщРасстояние     = 0;
		флОшибкаРасчета     = Ложь;
		
		врТекВремяВТочке = ВремяВыездаНаМаршрут;
		
		Если Не ФормироватьСборныеМаршруты Тогда 
			// Время стоянок перед выездом.
			Для Сч = 0 По МаршрутПулА.Количество()-1 Цикл 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулА[Сч].заказ, "Ссылка");
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
					?(мСтрокиТабТС.Количество() = 0, мПулА.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
				
				ОжиданиеПосещения = 0;
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_1");				
				
				Если ОжиданиеПосещения > 0 Тогда 
					Если Сч = 0 Тогда 
						ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеПосещения);
						врТекВремяВТочке = ВремяВыездаНаМаршрут;
					Иначе 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
				КонецЦикла;
			КонецЦикла;
			
			Для Сч = 0 По МаршрутПулБ.Количество() - 1 Цикл 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
					?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
				
				ОжиданиеПосещения = 0;
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_2");				
				
				Если ОжиданиеПосещения > 0 Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
				КонецЦикла;
			КонецЦикла;
			
			ОжиданиеТерминала = 0;
			Если Не ОпределитьТерминалПогрузкиИОкно(ВремяВыездаНаМаршрут, врОбщВремя, ?(мСтрокиТабТС.Количество() = 0, мПулА.ТипТС, мСтрокиТабТС[0].ТипТС), УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, 
					текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо, ОжиданиеТерминала, мПулБ.Терминал, 
					мПулБ.ТерминалПосещениеС, мПулБ.ТерминалПосещениеПо) Тогда 
				флОшибкаРасчета = Истина;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Возврат;
			КонецЕсли;
			
			мсвПосещенныеПункты = Новый Массив;
			
			Если ОжиданиеТерминала > 0 Тогда 
				ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеТерминала);
				врТекВремяВТочке = ВремяВыездаНаМаршрут;
				
				Для Сч = 0 По МаршрутПулА.Количество() - 1 Цикл 
					стрЗаказ = ТабЗаказы.Найти(МаршрутПулА[Сч].заказ, "Ссылка");
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
						?(мСтрокиТабТС.Количество() = 0, мПулА.ТипТС, мСтрокиТабТС[0].ТипТС));
					
					мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
					
					ВремяСтоянкиВПункте = 0;
					
					флЕстьНовые = Ложь;
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
							флЕстьНовые = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флЕстьНовые Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_3");									
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
					
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
					КонецЦикла;
				КонецЦикла;
				
				Для Сч = 0 По МаршрутПулБ.Количество() - 1 Цикл 
					стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
						?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
					
					мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
					
					ВремяСтоянкиВПункте = 0;
					
					флЕстьНовые = Ложь;
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
							флЕстьНовые = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флЕстьНовые Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_4");									
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
					
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат;
		КонецЕсли;
		
		врПредПункт = АдресДепоВрем;
		врПредАдрес = АдресДепо;
		врПредЛат   = ШиротаДепо;
		врПредЛон   = ДолготаДепо;
		
		Для Сч = 0 По МаршрутПулА.Количество() - 1 Цикл 
			стрЗаказ = ТабЗаказы.Найти(МаршрутПулА[Сч].заказ, "Ссылка");
			
			Пункт1 = врПредПункт;
			Пункт2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.ПунктПогрузки, стрЗаказ.ПунктРазгрузки);
			Адрес1 = врПредАдрес;
			Адрес2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения);
			
			текЛат = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛатОтпр, стрЗаказ.ЛатНазн);
			текЛон = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛонОтпр, стрЗаказ.ЛонНазн);
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			врПредПункт = Пункт2;
			врПредАдрес = Адрес2;
			врПредЛат   = текЛат;
			врПредЛон   = текЛон;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			МаршрутПулА[Сч].Время = врВремя;
			МаршрутПулА[Сч].Расстояние = текРасстояние;
			
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			
			Если УчитыватьОкнаПоЗаказам Тогда 
				НачалоОкна    = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеС, стрЗаказ.ДоставкаС);
				ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеПо, стрЗаказ.ДоставкаПо);
				
				ОжиданиеПосещения = 0;
				Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_5");
				
				МаршрутПулА[Сч].Ожидание = ОжиданиеПосещения;
				
				Если ОжиданиеПосещения > 0 Тогда 
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
				КонецЕсли;
			КонецЕсли;
			
			СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения), 
				?(мСтрокиТабТС.Количество() = 0, мПулА.ТипТС, мСтрокиТабТС[0].ТипТС));
			
			мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
			
			флЕстьНовые = Ложь;
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения)) = Неопределено Тогда 
					флЕстьНовые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕстьНовые Тогда 
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
			КонецЕсли;
			
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения));
			КонецЦикла;
		КонецЦикла;
		
		Если флОшибкаРасчета Тогда 
			Возврат;
		КонецЕсли;
		
		Для Сч = 0 По МаршрутПулБ.Количество() - 1 Цикл 
			стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
			
			Пункт1 = врПредПункт;
			Пункт2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.ПунктПогрузки, стрЗаказ.ПунктРазгрузки);
			Адрес1 = врПредАдрес;
			Адрес2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения);
			
			текЛат = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛатОтпр, стрЗаказ.ЛатНазн);
			текЛон = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛонОтпр, стрЗаказ.ЛонНазн);
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			врПредПункт = Пункт2;
			врПредАдрес = Адрес2;
			врПредЛат   = текЛат;
			врПредЛон   = текЛон;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			МаршрутПулБ[Сч].Время = врВремя;
			МаршрутПулБ[Сч].Расстояние = текРасстояние;
			
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			
			Если УчитыватьОкнаПоЗаказам Тогда 
				НачалоОкна    = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеС, стрЗаказ.ДоставкаС);
				ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеПо, стрЗаказ.ДоставкаПо);
				
				ОжиданиеПосещения = 0;
				Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_5");
				
				МаршрутПулБ[Сч].Ожидание = ОжиданиеПосещения;
				
				Если ОжиданиеПосещения > 0 Тогда 
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
				КонецЕсли;
			КонецЕсли;
			
			СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения), 
				?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
			
			мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
			
			флЕстьНовые = Ложь;
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения)) = Неопределено Тогда 
					флЕстьНовые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕстьНовые Тогда 
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
			КонецЕсли;
			
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения));
			КонецЦикла;
		КонецЦикла;
		
		Если флОшибкаРасчета Тогда 
			Возврат;
		КонецЕсли;
		
		Если ?(мСтрокиТабТС.Количество() = 0, мПулА.ВозвратВГараж, мСтрокиТабТС[0].ВозвратВГараж) Тогда 
			Пункт1 = врПредПункт;
			Пункт2 = АдресДепоВрем;
			Адрес1 = врПредАдрес;
			Адрес2 = АдресДепо;
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Возврат;
			КонецЕсли;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
		КонецЕсли;
		
		Если ФормироватьСборныеМаршруты Тогда 
			// Время стоянок при возвращении.
			Для Сч = 0 По МаршрутПулА.Количество() - 1 Цикл 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулА[Сч].заказ, "Ссылка");
				
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ДоставкаС, стрЗаказ.ДоставкаПо) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_7");
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресНазначения, 
					?(мСтрокиТабТС.Количество() = 0, мПулА.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресНазначения) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктНазначения);
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресНазначения);
				КонецЦикла;
			КонецЦикла;
			
			Если флОшибкаРасчета Тогда 
				Возврат;
			КонецЕсли;
			
			Для Сч = 0 По МаршрутПулБ.Количество() - 1 Цикл 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
				
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ДоставкаС, стрЗаказ.ДоставкаПо) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, мПулА.ТС, мПулБ.ТС, "12_8");
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресНазначения, 
					?(мСтрокиТабТС.Количество() = 0, мПулА.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресНазначения) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктНазначения);
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресНазначения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не ОграничениеПоРасстоянию = 0 И врОбщРасстояние > ОграничениеПоРасстоянию Тогда 
			// Превышена протяженность маршрута.
			Возврат;
		КонецЕсли;
		
		Если Не ОграничениеЧасов = 0 И врОбщВремя > ОграничениеЧасов Тогда 
			Если ИтерацияВремени = 1 Тогда 
				КорректировкаВыезда = врОбщВремя - ОграничениеЧасов;
				КоррЧас = Цел(КорректировкаВыезда);
				КоррМин = (КорректировкаВыезда - КоррЧас) * 100;
				ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут + КоррЧас * 3600 + КоррМин * 60;
				Продолжить;
				
			Иначе 
				// Первышена максимальная длительность маршрута.
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если Не МаксимальноеЧислоПунктов = 0 Тогда 
		мсвПунктыМаршрута = Новый Массив();
		мсвПунктыМаршрута.Добавить(АдресДепо);
		
		Для Каждого ТекЭлМаршрута Из МаршрутПулА Цикл 
			СтрокаТабЗаказы = ТабЗаказы.Найти(ТекЭлМаршрута.заказ, "Ссылка");
			Если Не СтрокаТабЗаказы = Неопределено Тогда 
				Если ФормироватьСборныеМаршруты Тогда 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
				Иначе 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
				КонецЕсли;
				
				Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
					мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЭлМаршрута Из МаршрутПулБ Цикл 
			СтрокаТабЗаказы = ТабЗаказы.Найти(ТекЭлМаршрута.заказ, "Ссылка");
			Если Не СтрокаТабЗаказы = Неопределено Тогда 
				Если ФормироватьСборныеМаршруты Тогда 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
				Иначе 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
				КонецЕсли;
				
				Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
					мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ?(мСтрокиТабТС.Количество() = 0, мПулА.ВозвратВГараж, мСтрокиТабТС[0].ВозвратВГараж) Тогда 
			Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = АдресДепо Тогда 
				мсвПунктыМаршрута.Добавить(АдресДепо);
			КонецЕсли;
		КонецЕсли;
		
		Если мсвПунктыМаршрута.Количество() > МаксимальноеЧислоПунктов Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТерминалПогрузкиИОкно(УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мПулА.Терминал, мПулА.ТерминалПосещениеС,
		мПулА.ТерминалПосещениеПо, текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо,
		мПулБ.Терминал, мПулБ.ТерминалПосещениеС, мПулБ.ТерминалПосещениеПо);
	
	мПулА.МаксимальныйВес      = МаксимальныйВес;
	мПулА.МаксимальныйОбъем    = МаксимальныйОбъем;
	мПулА.ВсегоУпаковок        = ВсегоУпаковок;
	мПулА.ВсегоЗаказов         = ВсегоЗаказов;
	мПулА.ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут;
	мПулА.Терминал             = текТерминал;
	мПулА.ТерминалПосещениеС   = текТерминалПосещениеС;
	мПулА.ТерминалПосещениеПо  = текТерминалПосещениеПо;
	
	мПулА.маршрут.Очистить();
	Для Каждого ТекМаршрут Из МаршрутПулА Цикл 
		мПулА.маршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние", ТекМаршрут.заказ, ТекМаршрут.Операция, ТекМаршрут.Ожидание, ТекМаршрут.Время, ТекМаршрут.Расстояние));
	КонецЦикла;
	Для Каждого ТекМаршрут Из МаршрутПулБ Цикл 
		мПулА.маршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние", ТекМаршрут.заказ, ТекМаршрут.Операция, ТекМаршрут.Ожидание, ТекМаршрут.Время, ТекМаршрут.Расстояние));
	КонецЦикла;
	
	// Вернуть старые ТС.
	Для Каждого СтарыйТС Из мПулБ.мсвТС Цикл 
		НовСтрТС = ТабТС.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрТС, СтарыйТС);
		
		Если УчитыватьСекцииТранспортныхСредств Тогда 
			СекцииТС = мПулБ.ТабСекций.НайтиСтроки(Новый Структура("ТС", СтарыйТС.Ссылка));
			Для Каждого ТекСекция Из СекцииТС Цикл 
				СтрокаСекции = НовСтрТС.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСекции, НовСтрТС);
				СтрокаСекции.Секция      = ТекСекция.Секция;
				СтрокаСекции.ОбъемКузова = ТекСекция.ОбъемСекции;
			КонецЦикла;
			
		Иначе 
			ПодСтрока = НовСтрТС.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПодСтрока, НовСтрТС);
		КонецЕсли;
	КонецЦикла;
	
	пулы.Удалить(пулы.Найти(мПулБ));
	
	// Выполняется замена ТС на более емкое.
	Если мСтрокиТабТС.Количество() Тогда 
		// вернуть старые ТС
		Для Каждого СтарыйТС Из мПулА.мсвТС Цикл 
			НовСтрТС = ТабТС.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТС, СтарыйТС);
			
			Если УчитыватьСекцииТранспортныхСредств Тогда 
				СекцииТС = мПулА.ТабСекций.НайтиСтроки(Новый Структура("ТС", СтарыйТС.Ссылка));
				Для Каждого ТекСекция Из СекцииТС Цикл 
					СтрокаСекции = НовСтрТС.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСекции, НовСтрТС);
					СтрокаСекции.Секция      = ТекСекция.Секция;
					СтрокаСекции.ОбъемКузова = ТекСекция.ОбъемСекции;
				КонецЦикла;
				
			Иначе 
				ПодСтрока = НовСтрТС.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(ПодСтрока, НовСтрТС);
			КонецЕсли;
		КонецЦикла;
		
		// Подставить новые в пул.
		мПулА.мсвТС.Очистить();
		мПулА.ТС    = мСтрокиТабТС[0].Ссылка;
		мПулА.ТипТС = мСтрокиТабТС[0].ТипТС;
		
		мПулА.ГрузоподъемностьТС               = 0;
		мПулА.ОбъемКузоваТС                    = 0;
		мПулА.ПорядокТС                        = 0;
		мПулА.МинимальныйВесГрузаТС            = 0;
		мПулА.МинимальныйОбъемГрузаТС          = 0;
		мПулА.МинимальноеКоличествоУпаковокТС  = 0;
		мПулА.МаксимальноеКоличествоУпаковокТС = 0;
		мПулА.ПриоритетТС                      = 99;
		мПулА.ДатаВыездаТС                     = '00010101';
		мПулА.ВозвратВГараж                    = Ложь;
		
		Для Каждого ТекСтрокаТС Из мСтрокиТабТС Цикл 
			ДанныеПоТС = Новый Структура();
			ДанныеПоТС.Вставить("Ссылка",                         ТекСтрокаТС.Ссылка);
			ДанныеПоТС.Вставить("Грузоподъемность",               ТекСтрокаТС.Грузоподъемность);
			ДанныеПоТС.Вставить("ОбъемКузова",                    ТекСтрокаТС.ОбъемКузова);
			ДанныеПоТС.Вставить("Порядок",                        ТекСтрокаТС.Порядок);
			ДанныеПоТС.Вставить("МинимальныйВесГруза",            ТекСтрокаТС.МинимальныйВесГруза);
			ДанныеПоТС.Вставить("МинимальныйОбъемГруза",          ТекСтрокаТС.МинимальныйОбъемГруза);
			ДанныеПоТС.Вставить("МинимальноеКоличествоУпаковок",  ТекСтрокаТС.МинимальноеКоличествоУпаковок);
			ДанныеПоТС.Вставить("МаксимальноеКоличествоУпаковок", ТекСтрокаТС.МаксимальноеКоличествоУпаковок);
			ДанныеПоТС.Вставить("ТипТС",                          ТекСтрокаТС.ТипТС);
			ДанныеПоТС.Вставить("Приоритет",                      ТекСтрокаТС.Приоритет);
			ДанныеПоТС.Вставить("ДатаВыездаТС",                   ТекСтрокаТС.ДатаВыездаТС);
			ДанныеПоТС.Вставить("ВозвратВГараж",                  ТекСтрокаТС.ВозвратВГараж);
			мПулА.мсвТС.Добавить(ДанныеПоТС);
			
			мПулА.ГрузоподъемностьТС               = мПулА.ГрузоподъемностьТС + ТекСтрокаТС.Грузоподъемность;
			мПулА.ОбъемКузоваТС                    = мПулА.ОбъемКузоваТС + ТекСтрокаТС.ОбъемКузова;
			мПулА.ПорядокТС                        = мПулА.ПорядокТС + ТекСтрокаТС.Порядок;
			мПулА.МинимальныйВесГрузаТС            = мПулА.МинимальныйВесГрузаТС + ТекСтрокаТС.МинимальныйВесГруза;
			мПулА.МинимальныйОбъемГрузаТС          = мПулА.МинимальныйОбъемГрузаТС + ТекСтрокаТС.МинимальныйОбъемГруза;
			мПулА.МинимальноеКоличествоУпаковокТС  = мПулА.МинимальноеКоличествоУпаковокТС + ТекСтрокаТС.МинимальноеКоличествоУпаковок;
			мПулА.МаксимальноеКоличествоУпаковокТС = мПулА.МаксимальноеКоличествоУпаковокТС + ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
			мПулА.ПриоритетТС                      = Мин(мПулА.ПриоритетТС, ТекСтрокаТС.Приоритет);
			мПулА.ДатаВыездаТС                     = Макс(мПулА.ДатаВыездаТС, ТекСтрокаТС.ДатаВыездаТС);
			мПулА.ВозвратВГараж                    = Макс(мПулА.ВозвратВГараж, ТекСтрокаТС.ВозвратВГараж);
			
			// Удалить новые ТС из таблицы.
			ТабТС.Строки.Удалить(ТекСтрокаТС);
		КонецЦикла;
	КонецЕсли;
	
	ТабТС.Строки.Сортировать("Приоритет Убыв, Порядок Возр");
	
	Если УчитыватьСекцииТранспортныхСредств Тогда 
		мПулА.ТабСекций.Очистить();
		Для Каждого ТекСтр Из ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения Цикл 
			НовСтр = мПулА.ТабСекций.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант34(ЗаказА, мПулБ, пулы, ТабТС, ТабЗаказы, 
		ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, Знач ВремяВыезда, 
		СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
		ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС, 
		УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов,
		СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мСтрокиТабТС,
		УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях)
	
	МаршрутПулБ = Новый Массив();
	Для Каждого ТекСтрокаМаршрута Из мПулБ.маршрут Цикл 
		МаршрутПулБ.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
			ТекСтрокаМаршрута.заказ, ТекСтрокаМаршрута.Операция, ТекСтрокаМаршрута.Ожидание, ТекСтрокаМаршрута.Время, ТекСтрокаМаршрута.Расстояние));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(мПулБ.ДатаВыездаТС) Тогда 
		ВремяВыездаНаМаршрут = мПулБ.ДатаВыездаТС;
		
	Иначе 
		ВремяВыездаНаМаршрут = ВремяВыезда;
		Если РежимВремениВыездаИзГаража = 0 Тогда 
			стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
			Если стрЗаказ = Неопределено Тогда 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[0].заказ, "Ссылка");
				ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
			Иначе 
				ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для ИтерацияВремени = 1 По 2 Цикл 
		текТерминал            = мПулБ.Терминал;
		текТерминалОкноС       = Неопределено;
		текТерминалОкноПо      = Неопределено;
		текТерминалПосещениеС  = мПулБ.ТерминалПосещениеС;
		текТерминалПосещениеПо = мПулБ.ТерминалПосещениеПо;
		
		мсвПосещенныеПункты = Новый Массив();
		врОбщВремя          = 0;
		врОбщРасстояние     = 0;
		врТекВремяВТочке    = ВремяВыездаНаМаршрут;
		флОшибкаРасчета     = Ложь;
		ОжиданиеПоЗаказу    = 0;
		ВремяПоЗаказу       = 0;
		РасстояниеПоЗаказу  = 0;
		
		мПулБмаршрутКоличество = МаршрутПулБ.Количество();
		Если Не ФормироватьСборныеМаршруты Тогда 
			// Время стоянок перед выездом.
			Для Сч = 0 По мПулБмаршрутКоличество Цикл 
				Если Сч = мПулБмаршрутКоличество Тогда 
					стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
				Иначе 
					стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
				КонецЕсли;
				
				Если стрЗаказ = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
					?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
				
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, 0 , , мПулБ.ТС, "34_1");
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
				КонецЦикла;
			КонецЦикла;
			
			ОжиданиеТерминала = 0;
			Если Не ОпределитьТерминалПогрузкиИОкно(ВремяВыездаНаМаршрут, врОбщВремя, ?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС), УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, 
					текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо, ОжиданиеТерминала) Тогда 
				флОшибкаРасчета = Истина;
			КонецЕсли;
			
			мсвПосещенныеПункты = Новый Массив;
			
			Если ОжиданиеТерминала > 0 Тогда 
				ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеТерминала);
				врТекВремяВТочке = ВремяВыездаНаМаршрут;
				
				Для Сч = -1 По МаршрутПулБ.Количество() - 1 Цикл 
					Если Сч = -1 Тогда 
						стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
					Иначе 
						стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
					КонецЕсли;
					
					Если стрЗаказ = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
						?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
					
					мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
					
					ВремяСтоянкиВПункте = 0;
					
					флЕстьНовые = Ложь;
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
							флЕстьНовые = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флЕстьНовые Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, 0, , мПулБ.ТС, "34_2");					
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
					
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		врПредПункт = АдресДепоВрем;
		врПредАдрес = АдресДепо;
		врПредЛат   = ШиротаДепо;
		врПредЛон   = ДолготаДепо;
		
		Для Сч = 0 По мПулБмаршрутКоличество Цикл 
			Если Сч = мПулБмаршрутКоличество Тогда 
				стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
			Иначе 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
			КонецЕсли;
			
			Если стрЗаказ = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Пункт1 = врПредПункт;
			Пункт2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.ПунктПогрузки, стрЗаказ.ПунктРазгрузки);
			Адрес1 = врПредАдрес;
			Адрес2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения);
			
			текЛат = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛатОтпр, стрЗаказ.ЛатНазн);
			текЛон = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛонОтпр, стрЗаказ.ЛонНазн);
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			врПредПункт = Пункт2;
			врПредАдрес = Адрес2;
			врПредЛат   = текЛат;
			врПредЛон   = текЛон;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			Если Сч = мПулБмаршрутКоличество Тогда 
				ВремяПоЗаказу      = врВремя;
				РасстояниеПоЗаказу = текРасстояние;
			Иначе
				МаршрутПулБ[Сч].Время      = врВремя;
				МаршрутПулБ[Сч].Расстояние = текРасстояние;
			КонецЕсли;
			
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			
			Если УчитыватьОкнаПоЗаказам Тогда 
				НачалоОкна    = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеС, стрЗаказ.ДоставкаС);
				ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеПо, стрЗаказ.ДоставкаПо);
				
				ОжиданиеПосещения = 0;
				Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, ,мПулБ.ТС, "34_3");
				
				Если Сч = мПулБмаршрутКоличество Тогда 
					ОжиданиеПоЗаказу = ОжиданиеПосещения;
				Иначе
					МаршрутПулБ[Сч].Ожидание = ОжиданиеПосещения;
				КонецЕсли;
				
				Если ОжиданиеПосещения > 0 Тогда 
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
				КонецЕсли;
			КонецЕсли;
			
			СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения), 
				?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
			
			мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
			
			флЕстьНовые = Ложь;
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения)) = Неопределено Тогда 
					флЕстьНовые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕстьНовые Тогда 
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
			КонецЕсли;
			
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения));
			КонецЦикла;
		КонецЦикла;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если мПулБ.ВозвратВГараж Тогда 
			Пункт1 = врПредПункт;
			Пункт2 = АдресДепоВрем;
			Адрес1 = врПредАдрес;
			Адрес2 = АдресДепо;
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Возврат Ложь;
			КонецЕсли;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
		КонецЕсли;
		
		Если ФормироватьСборныеМаршруты Тогда 
			// Время стоянок при возвращении.
			Для Сч = 0 По мПулБмаршрутКоличество Цикл 
				Если Сч = мПулБмаршрутКоличество Тогда 
					стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
				Иначе 
					стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
				КонецЕсли;
				
				Если стрЗаказ = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ДоставкаС, стрЗаказ.ДоставкаПо) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, ,мПулБ.ТС, "34_4");
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресНазначения, 
					?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресНазначения) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктНазначения);
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресНазначения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ОграничениеПоРасстоянию = 0 И врОбщРасстояние > ОграничениеПоРасстоянию Тогда 
			// Превышена протяженность маршрута.
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ОграничениеЧасов = 0 И врОбщВремя > ОграничениеЧасов Тогда 
			Если ИтерацияВремени = 1 Тогда 
				КорректировкаВыезда = врОбщВремя - ОграничениеЧасов;
				КоррЧас = Цел(КорректировкаВыезда);
				КоррМин = (КорректировкаВыезда - КоррЧас) * 100;
				ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут + КоррЧас * 3600 + КоррМин * 60;
				Продолжить;
				
			Иначе 
				// Первышена максимальная длительность маршрута.
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если Не МаксимальноеЧислоПунктов = 0 Тогда 
		мсвПунктыМаршрута = Новый Массив();
		мсвПунктыМаршрута.Добавить(АдресДепо);
		
		Для Каждого ТекЭлМаршрута Из МаршрутПулБ Цикл 
			СтрокаТабЗаказы = ТабЗаказы.Найти(ТекЭлМаршрута.заказ, "Ссылка");
			Если Не СтрокаТабЗаказы = Неопределено Тогда 
				Если ФормироватьСборныеМаршруты Тогда 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
				Иначе 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
				КонецЕсли;
				
				Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
					мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗаказА) Тогда 
			СтрокаТабЗаказы = ТабЗаказы.Найти(ЗаказА, "Ссылка");
			Если Не СтрокаТабЗаказы = Неопределено Тогда 
				Если ФормироватьСборныеМаршруты Тогда 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
				Иначе 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
				КонецЕсли;
				
				Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
					мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если мПулБ.ВозвратВГараж Тогда 
			Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = АдресДепо Тогда 
				мсвПунктыМаршрута.Добавить(АдресДепо);
			КонецЕсли;
		КонецЕсли;
		
		Если мсвПунктыМаршрута.Количество() > МаксимальноеЧислоПунктов Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если все проверки пройдены - заказ добавляется в маршрут.
	ЗафиксироватьТерминалПогрузкиИОкно(УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мПулБ.Терминал, мПулБ.ТерминалПосещениеС,
		мПулБ.ТерминалПосещениеПо, текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо);
	
	мПулБ.ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут;
	мПулБ.МаксимальныйВес      = МаксимальныйВес;
	мПулБ.МаксимальныйОбъем    = МаксимальныйОбъем;
	мПулБ.ВсегоУпаковок        = ВсегоУпаковок;
	мПулБ.ВсегоЗаказов         = ВсегоЗаказов;
	мПулБ.Терминал             = текТерминал;
	мПулБ.ТерминалПосещениеС   = текТерминалПосещениеС;
	мПулБ.ТерминалПосещениеПо  = текТерминалПосещениеПо;
	
	мПулБ.маршрут.Очистить();
	Для Каждого ТекМаршрут Из МаршрутПулБ Цикл 
		мПулБ.маршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
			ТекМаршрут.заказ, ТекМаршрут.Операция, ТекМаршрут.Ожидание, ТекМаршрут.Время, ТекМаршрут.Расстояние));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаказА) Тогда 
		мПулБ.маршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
			ЗаказА, ?(ФормироватьСборныеМаршруты, Перечисления.уатТипыТочекМаршрута.Погрузка, Перечисления.уатТипыТочекМаршрута.Разгрузка), ОжиданиеПоЗаказу, ВремяПоЗаказу, РасстояниеПоЗаказу));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант34()

Функция ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант5(ТекВыигрыш, пулы, ТабТС, ТабЗаказы, 
		ТабСкоростей, Знач ВремяВыезда, СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо,
		ШиротаДепо, ДолготаДепо, ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов,
		УчитыватьРазрешенныеТипыТС, УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража,
		МаксимальноеКоличествоЗаказовТС, СоотвГруппЗаказов, СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов,
		ТерминалыПогрузки, УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях,
		СоотРазрешенныеТСПоХарактеристикам, ИспользоватьХарактеристикиЗаказовНаТС)
	
	// Получение данных по заказам.
	стрЗаказА = ТабЗаказы.Найти(ТекВыигрыш.ЗаказА, "Ссылка");
	стрЗаказБ = ТабЗаказы.Найти(ТекВыигрыш.ЗаказБ, "Ссылка");
	
	// Определение максимальных характеристик.
	Если стрЗаказА = Неопределено Тогда 
		МаксимальныйВес   = стрЗаказБ.ВесБрутто;
		МаксимальныйОбъем = стрЗаказБ.Объем;
		ВсегоУпаковок     = стрЗаказБ.КоличествоУпаковок;
		ВсегоЗаказов      = 1;
	Иначе 
		МаксимальныйВес   = стрЗаказА.ВесБрутто + стрЗаказБ.ВесБрутто;
		МаксимальныйОбъем = стрЗаказА.Объем + стрЗаказБ.Объем;
		ВсегоУпаковок     = стрЗаказА.КоличествоУпаковок + стрЗаказБ.КоличествоУпаковок;
		ВсегоЗаказов      = 2;
	КонецЕсли;
	
	Если МаксимальноеКоличествоЗаказовТС <> 0 И ВсегоЗаказов > МаксимальноеКоличествоЗаказовТС Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	мсвРазрешенныеТСПоЗаказуА = Неопределено;
	мсвРазрешенныеТСПоЗаказуБ = Неопределено;
	Если УчитыватьРазрешенныеТипыТС Тогда 
		мсвРазрешенныеТСПоЗаказуА = СоотРазрешенныеТСПоЗаказам.Получить(ТекВыигрыш.ЗаказА);
		мсвРазрешенныеТСПоЗаказуБ = СоотРазрешенныеТСПоЗаказам.Получить(ТекВыигрыш.ЗаказБ);
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиЗаказовНаТС Тогда 
		Если стрЗаказА = Неопределено Тогда 
			мсвРазрешенныеТСПоХарактеристикамА = Неопределено;
		Иначе 
			мсвРазрешенныеТСПоХарактеристикамА = СоотРазрешенныеТСПоХарактеристикам.Получить(стрЗаказА.НаборХарактеристик);
		КонецЕсли;
		
		мсвРазрешенныеТСПоХарактеристикамБ = СоотРазрешенныеТСПоХарактеристикам.Получить(стрЗаказБ.НаборХарактеристик);
	Иначе 
		мсвРазрешенныеТСПоХарактеристикамА = Неопределено;
		мсвРазрешенныеТСПоХарактеристикамБ = Неопределено;
	КонецЕсли;
	
	// Подбор ТС с учетом ограничений.
	Если УчитыватьСекцииТранспортныхСредств Тогда 
		мсвЗаказыКРазмещению = Новый Массив();
		Если Не стрЗаказА = Неопределено Тогда 
			мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекВыигрыш.ЗаказА, стрЗаказА.Груз, стрЗаказА.Объем, стрЗаказА.ВесБрутто));
		КонецЕсли;
		мсвЗаказыКРазмещению.Добавить(Новый Структура("Заказ, Груз, Объем, ВесБрутто", ТекВыигрыш.ЗаказБ, стрЗаказБ.Груз, стрЗаказБ.Объем, стрЗаказБ.ВесБрутто));
		РазрешеноЗаменятьТС = Истина;
		ДанныеРазмещенияЗаказовПоСекциям = ПолучитьДанныеРазмещенияЗаказовПоСекциям(
			мсвЗаказыКРазмещению, 
			ТабТС, 
			СмешиватьГрузыВСекциях,
			,
			РазрешеноЗаменятьТС
		);
		
		Если Не ДанныеРазмещенияЗаказовПоСекциям.Размещено Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		мСтрокиТабТС = ДанныеРазмещенияЗаказовПоСекциям.СтрокиДерева;
		
		Если мСтрокиТабТС.Количество() = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	Иначе 
		мСтрокиТабТС = Новый Массив();
		Для Каждого ТекЭлТабТС Из ТабТС.Строки Цикл 
			Если (ТекЭлТабТС.Грузоподъемность = 0 Или ТекЭлТабТС.Грузоподъемность >= МаксимальныйВес)
					И (ТекЭлТабТС.ОбъемКузова = 0 Или ТекЭлТабТС.ОбъемКузова >= МаксимальныйОбъем)
					И (ТекЭлТабТС.МаксимальноеКоличествоУпаковок = 0 Или ТекЭлТабТС.МаксимальноеКоличествоУпаковок >= ВсегоУпаковок) 
					И (мсвРазрешенныеТСПоЗаказуА = Неопределено Или Не мсвРазрешенныеТСПоЗаказуА.Найти(ТекЭлТабТС.Ссылка) = Неопределено)
					И (мсвРазрешенныеТСПоЗаказуБ = Неопределено Или Не мсвРазрешенныеТСПоЗаказуБ.Найти(ТекЭлТабТС.Ссылка) = Неопределено)
					И (мсвРазрешенныеТСПоХарактеристикамА = Неопределено Или Не мсвРазрешенныеТСПоХарактеристикамА.Найти(ТекЭлТабТС.Ссылка) = Неопределено)
					И (мсвРазрешенныеТСПоХарактеристикамБ = Неопределено Или Не мсвРазрешенныеТСПоХарактеристикамБ.Найти(ТекЭлТабТС.Ссылка) = Неопределено) Тогда 
				мСтрокиТабТС.Добавить(ТекЭлТабТС);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если мСтрокиТабТС.Количество() = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование нового пула.
	мНовМаршрут = Новый Массив();
	Если Не стрЗаказА = Неопределено Тогда 
		мНовМаршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние", ТекВыигрыш.ЗаказА, ?(ФормироватьСборныеМаршруты, Перечисления.уатТипыТочекМаршрута.Погрузка, Перечисления.уатТипыТочекМаршрута.Разгрузка), 0, 0, 0));
	КонецЕсли;
	мНовМаршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние", ТекВыигрыш.ЗаказБ, ?(ФормироватьСборныеМаршруты, Перечисления.уатТипыТочекМаршрута.Погрузка, Перечисления.уатТипыТочекМаршрута.Разгрузка), 0, 0, 0));
	
	мНовПул = Новый Структура();
	мНовПул.Вставить("мсвТС", Новый Массив());
	мНовПул.Вставить("ТС",    мСтрокиТабТС[0].Ссылка);
	мНовПул.Вставить("ТипТС", мСтрокиТабТС[0].ТипТС);
	
	мНовПул.Вставить("ГрузоподъемностьТС",               0);
	мНовПул.Вставить("ОбъемКузоваТС",                    0);
	мНовПул.Вставить("ПорядокТС",                        0);
	мНовПул.Вставить("МинимальныйВесГрузаТС",            0);
	мНовПул.Вставить("МинимальныйОбъемГрузаТС",          0);
	мНовПул.Вставить("МинимальноеКоличествоУпаковокТС",  0);
	мНовПул.Вставить("МаксимальноеКоличествоУпаковокТС", 0);
	мНовПул.Вставить("ПриоритетТС",                      99);
	мНовПул.Вставить("ДатаВыездаТС",                     '00010101');
	мНовПул.Вставить("ВозвратВГараж",                    Ложь);
	
	Для Каждого ТекСтрокаТС Из мСтрокиТабТС Цикл 
		ДанныеПоТС = Новый Структура();
		ДанныеПоТС.Вставить("Ссылка",                         ТекСтрокаТС.Ссылка);
		ДанныеПоТС.Вставить("Грузоподъемность",               ТекСтрокаТС.Грузоподъемность);
		ДанныеПоТС.Вставить("ОбъемКузова",                    ТекСтрокаТС.ОбъемКузова);
		ДанныеПоТС.Вставить("Порядок",                        ТекСтрокаТС.Порядок);
		ДанныеПоТС.Вставить("МинимальныйВесГруза",            ТекСтрокаТС.МинимальныйВесГруза);
		ДанныеПоТС.Вставить("МинимальныйОбъемГруза",          ТекСтрокаТС.МинимальныйОбъемГруза);
		ДанныеПоТС.Вставить("МинимальноеКоличествоУпаковок",  ТекСтрокаТС.МинимальноеКоличествоУпаковок);
		ДанныеПоТС.Вставить("МаксимальноеКоличествоУпаковок", ТекСтрокаТС.МаксимальноеКоличествоУпаковок);
		ДанныеПоТС.Вставить("ТипТС",                          ТекСтрокаТС.ТипТС);
		ДанныеПоТС.Вставить("Приоритет",                      ТекСтрокаТС.Приоритет);
		ДанныеПоТС.Вставить("ДатаВыездаТС",                   ТекСтрокаТС.ДатаВыездаТС);
		ДанныеПоТС.Вставить("ВозвратВГараж",                  ТекСтрокаТС.ВозвратВГараж);
		мНовПул.мсвТС.Добавить(ДанныеПоТС);
		
		мНовПул.ГрузоподъемностьТС               = мНовПул.ГрузоподъемностьТС + ТекСтрокаТС.Грузоподъемность;
		мНовПул.ОбъемКузоваТС                    = мНовПул.ОбъемКузоваТС + ТекСтрокаТС.ОбъемКузова;
		мНовПул.ПорядокТС                        = мНовПул.ПорядокТС + ТекСтрокаТС.Порядок;
		мНовПул.МинимальныйВесГрузаТС            = мНовПул.МинимальныйВесГрузаТС + ТекСтрокаТС.МинимальныйВесГруза;
		мНовПул.МинимальныйОбъемГрузаТС          = мНовПул.МинимальныйОбъемГрузаТС + ТекСтрокаТС.МинимальныйОбъемГруза;
		мНовПул.МинимальноеКоличествоУпаковокТС  = мНовПул.МинимальноеКоличествоУпаковокТС + ТекСтрокаТС.МинимальноеКоличествоУпаковок;
		мНовПул.МаксимальноеКоличествоУпаковокТС = мНовПул.МаксимальноеКоличествоУпаковокТС + ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
		мНовПул.ПриоритетТС                      = Мин(мНовПул.ПриоритетТС, ТекСтрокаТС.Приоритет);
		мНовПул.ДатаВыездаТС                     = Макс(мНовПул.ДатаВыездаТС, ТекСтрокаТС.ДатаВыездаТС);
		мНовПул.ВозвратВГараж                    = Макс(мНовПул.ВозвратВГараж, ТекСтрокаТС.ВозвратВГараж);
	КонецЦикла;
	
	мНовПул.Вставить("маршрут",              мНовМаршрут);
	мНовПул.Вставить("МаксимальныйВес",      МаксимальныйВес);
	мНовПул.Вставить("МаксимальныйОбъем",    МаксимальныйОбъем);
	мНовПул.Вставить("ВсегоУпаковок",        ВсегоУпаковок);
	мНовПул.Вставить("ВсегоЗаказов",         ВсегоЗаказов);
	мНовПул.Вставить("ВремяВыездаНаМаршрут", '00010101000000');
	мНовПул.Вставить("Терминал",             Неопределено);
	мНовПул.Вставить("ТерминалПосещениеС",   Неопределено);
	мНовПул.Вставить("ТерминалПосещениеПо",  Неопределено);
	мНовПул.Вставить("ТабСекций",            Новый ТаблицаЗначений());
	
	Если ЗначениеЗаполнено(мНовПул.ДатаВыездаТС) Тогда 
		ВремяВыездаНаМаршрут = мНовПул.ДатаВыездаТС;
		
	Иначе 
		ВремяВыездаНаМаршрут = ВремяВыезда;
		Если РежимВремениВыездаИзГаража = 0 И мНовПул.маршрут.Количество() Тогда 
			стрЗаказ = ТабЗаказы.Найти(мНовПул.маршрут[0].заказ, "Ссылка");
			ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
		КонецЕсли;
	КонецЕсли;
	мНовПул.ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут;
	
	Если УчитыватьСекцииТранспортныхСредств Тогда 
		мНовПул.ТабСекций = ДанныеРазмещенияЗаказовПоСекциям.ТаблицаРазмещения;
	КонецЕсли;
	
	Для ИтерацияВремени = 1 По 2 Цикл 
		текТерминал            = Неопределено;
		текТерминалОкноС       = Неопределено;
		текТерминалОкноПо      = Неопределено;
		текТерминалПосещениеС  = Неопределено;
		текТерминалПосещениеПо = Неопределено;
		
		мсвПосещенныеПункты = Новый Массив();
		врОбщВремя          = 0;
		врОбщРасстояние     = 0;
		
		// Проверка ограничений по времени смены, окнам.
		врТекВремяВТочке = ВремяВыездаНаМаршрут;
		
		флОшибкаРасчета = Ложь;
		
		Если Не ФормироватьСборныеМаршруты Тогда 
			// Время стоянок перед выездом.
			Для Сч = 0 По мНовПул.маршрут.Количество() - 1 Цикл 
				стрЗаказ = ТабЗаказы.Найти(мНовПул.маршрут[Сч].заказ, "Ссылка");
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, мСтрокиТабТС[0].ТипТС);
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
				
				ОжиданиеПосещения = 0;
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, , , "5_1");

				Если ОжиданиеПосещения > 0 Тогда 
					Если Сч = 0 Тогда 
						ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеПосещения);
						врТекВремяВТочке = ВремяВыездаНаМаршрут;
					Иначе 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
				КонецЦикла;
			КонецЦикла;
			
			ОжиданиеТерминала = 0;
			Если Не ОпределитьТерминалПогрузкиИОкно(ВремяВыездаНаМаршрут, врОбщВремя, мСтрокиТабТС[0].ТипТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, 
					текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо, ОжиданиеТерминала) Тогда 
				флОшибкаРасчета = Истина;
			КонецЕсли;
			
			мсвПосещенныеПункты = Новый Массив;
			
			Если ОжиданиеТерминала > 0 Тогда 
				ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеТерминала);
				врТекВремяВТочке = ВремяВыездаНаМаршрут;
				
				Для Сч = 0 По мНовПул.маршрут.Количество() - 1 Цикл 
					стрЗаказ = ТабЗаказы.Найти(мНовПул.маршрут[Сч].заказ, "Ссылка");
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, мСтрокиТабТС[0].ТипТС);
					
					мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
					
					ВремяСтоянкиВПункте = 0;
					
					флЕстьНовые = Ложь;
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
							флЕстьНовые = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флЕстьНовые Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, , , "5_2");
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
					
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		врПредПункт = АдресДепоВрем;
		врПредАдрес = АдресДепо;
		врПредЛат   = ШиротаДепо;
		врПредЛон   = ДолготаДепо;
		
		Для Сч = 0 По мНовПул.маршрут.Количество() - 1 Цикл 
			стрЗаказ = ТабЗаказы.Найти(мНовПул.маршрут[Сч].заказ, "Ссылка");
			
			Пункт1 = врПредПункт;
			Пункт2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.ПунктПогрузки, стрЗаказ.ПунктРазгрузки);
			Адрес1 = врПредАдрес;
			Адрес2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения);
			
			текЛат = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛатОтпр, стрЗаказ.ЛатНазн);
			текЛон = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛонОтпр, стрЗаказ.ЛонНазн);
			
			текВремя      = 0;
			текРасстояние = 0;;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			врПредПункт = Пункт2;
			врПредАдрес = Адрес2;
			врПредЛат   = текЛат;
			врПредЛон   = текЛон;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			мНовПул.маршрут[Сч].Время      = врВремя;
			мНовПул.маршрут[Сч].Расстояние = текРасстояние;
			
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
			
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			
			Если УчитыватьОкнаПоЗаказам Тогда 
				НачалоОкна    = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеС, стрЗаказ.ДоставкаС);
				ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеПо, стрЗаказ.ДоставкаПо);
				
				ОжиданиеПосещения = 0;
				Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, , , "5_3");
				
				мНовПул.маршрут[Сч].Ожидание = ОжиданиеПосещения;
				
				Если ОжиданиеПосещения > 0 Тогда 
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
				КонецЕсли;
			КонецЕсли;
			
			СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения), мСтрокиТабТС[0].ТипТС);
			
			мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
			
			флЕстьНовые = Ложь;
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения)) = Неопределено Тогда 
					флЕстьНовые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕстьНовые Тогда 
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
			КонецЕсли;
			
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения));
			КонецЦикла;
		КонецЦикла;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если мНовПул.ВозвратВГараж Тогда 
			Пункт1 = врПредПункт;
			Пункт2 = АдресДепоВрем;
			Адрес1 = врПредАдрес;
			Адрес2 = АдресДепо;
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Возврат Ложь;
			КонецЕсли;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
		КонецЕсли;
		
		Если ФормироватьСборныеМаршруты Тогда 
			// Время стоянок при возвращении.
			Для Сч = 0 По мНовПул.маршрут.Количество() - 1 Цикл 
				стрЗаказ = ТабЗаказы.Найти(мНовПул.маршрут[Сч].заказ, "Ссылка");
				
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ДоставкаС, стрЗаказ.ДоставкаПо) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, , , "5_4");								
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресНазначения, мСтрокиТабТС[0].ТипТС);
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресНазначения) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктНазначения);
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресНазначения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ОграничениеПоРасстоянию = 0 И врОбщРасстояние > ОграничениеПоРасстоянию Тогда 
			// Превышена протяженность маршрута.
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ОграничениеЧасов = 0 И врОбщВремя > ОграничениеЧасов Тогда 
			Если ИтерацияВремени = 1 Тогда 
				КорректировкаВыезда = врОбщВремя - ОграничениеЧасов;
				КоррЧас = Цел(КорректировкаВыезда);
				КоррМин = (КорректировкаВыезда - КоррЧас) * 100;
				ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут + КоррЧас * 3600 + КоррМин * 60;
				Продолжить;
				
			Иначе 
				// Первышена максимальная длительность маршрута.
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если Не МаксимальноеЧислоПунктов = 0 Тогда 
		мсвПунктыМаршрута = Новый Массив();
		мсвПунктыМаршрута.Добавить(АдресДепо);
		
		Если Не стрЗаказА = Неопределено Тогда 
			Если ФормироватьСборныеМаршруты Тогда 
				ТекАдресЗаказа = стрЗаказА.АдресОтправления;
			Иначе 
				ТекАдресЗаказа = стрЗаказА.АдресНазначения;
			КонецЕсли;
			
			Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
				мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
			КонецЕсли;
		КонецЕсли;
		
		Если ФормироватьСборныеМаршруты Тогда 
			ТекАдресЗаказа = стрЗаказБ.АдресОтправления;
		Иначе 
			ТекАдресЗаказа = стрЗаказБ.АдресНазначения;
		КонецЕсли;
		
		Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
			мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
		КонецЕсли;
		
		Если мНовПул.ВозвратВГараж Тогда 
			Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = АдресДепо Тогда 
				мсвПунктыМаршрута.Добавить(АдресДепо);
			КонецЕсли;
		КонецЕсли;
		
		Если мсвПунктыМаршрута.Количество() > МаксимальноеЧислоПунктов Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТерминалПогрузкиИОкно(УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мНовПул.Терминал, мНовПул.ТерминалПосещениеС,
		мНовПул.ТерминалПосещениеПо, текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо);
	
	// Если все проверки пройдены - назначение заказов на ТС.
	мНовПул.ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут;
	мНовПул.Терминал             = текТерминал;
	мНовПул.ТерминалПосещениеС   = текТерминалПосещениеС;
	мНовПул.ТерминалПосещениеПо  = текТерминалПосещениеПо;
	
	пулы.Добавить(мНовПул);
	
	Для Каждого СтрокаТС Из мСтрокиТабТС Цикл 
		ТабТС.Строки.Удалить(СтрокаТС);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант5()

Функция ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант67(ЗаказА, мПулБ, пулы, ТабТС, ТабЗаказы, 
		ТабСкоростей, МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, ВсегоЗаказов, Знач ВремяВыезда, 
		СоотРазрешенныеТСПоЗаказам, СоотвТаблРасстояний, АдресДепоВрем, АдресДепо, ШиротаДепо, ДолготаДепо,
		ОграничениеПоРасстоянию, ОграничениеЧасов, МаксимальноеЧислоПунктов, УчитыватьРазрешенныеТипыТС,
		УчитыватьОкнаПоЗаказам, ФормироватьСборныеМаршруты, РежимВремениВыездаИзГаража, СоотвГруппЗаказов,
		СтоянкиПоТипамТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мСтрокиТабТС,
		УчитыватьСекцииТранспортныхСредств, СмешиватьГрузыВСекциях)
	
	МаршрутПулБ = Новый Массив();
	Для Каждого ТекСтрокаМаршрута Из мПулБ.маршрут Цикл 
		МаршрутПулБ.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
			ТекСтрокаМаршрута.заказ, ТекСтрокаМаршрута.Операция, ТекСтрокаМаршрута.Ожидание, ТекСтрокаМаршрута.Время, ТекСтрокаМаршрута.Расстояние));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(мПулБ.ДатаВыездаТС) Тогда 
		ВремяВыездаНаМаршрут = мПулБ.ДатаВыездаТС;
		
	Иначе 
		ВремяВыездаНаМаршрут = ВремяВыезда;
		Если РежимВремениВыездаИзГаража = 0 Тогда 
			стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
			Если стрЗаказ = Неопределено Тогда 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[0].заказ, "Ссылка");
				ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
			Иначе 
				ВремяВыездаНаМаршрут = НачалоДня(ВремяВыездаНаМаршрут) + (стрЗаказ.ОтправлениеС - '00010101');
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для ИтерацияВремени = 1 По 2 Цикл 
		текТерминал            = мПулБ.Терминал;
		текТерминалОкноС       = Неопределено;
		текТерминалОкноПо      = Неопределено;
		текТерминалПосещениеС  = мПулБ.ТерминалПосещениеС;
		текТерминалПосещениеПо = мПулБ.ТерминалПосещениеПо;
		
		мсвПосещенныеПункты = Новый Массив();
		врОбщВремя          = 0;
		врОбщРасстояние     = 0;
		флОшибкаРасчета     = Ложь;
		ОжиданиеПоЗаказу    = 0;
		ВремяПоЗаказу       = 0;
		РасстояниеПоЗаказу  = 0;
		
		врТекВремяВТочке = ВремяВыездаНаМаршрут;
		
		Если Не ФормироватьСборныеМаршруты Тогда 
			// Время стоянок перед выездом.
			Для Сч = -1 По МаршрутПулБ.Количество() - 1 Цикл 
				Если Сч = -1 Тогда 
					стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
				Иначе 
					стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
				КонецЕсли;
				
				Если стрЗаказ = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
					?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
				
				ОжиданиеПосещения = 0;
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, ОжиданиеПосещения, , мПулБ.ТС, "67_1");				
				
				Если ОжиданиеПосещения > 0 Тогда 
					Если Сч = -1 Тогда 
						ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеПосещения);
						врТекВремяВТочке = ВремяВыездаНаМаршрут;
					Иначе 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
				КонецЦикла;
			КонецЦикла;
			
			ОжиданиеТерминала = 0;
			Если Не ОпределитьТерминалПогрузкиИОкно(ВремяВыездаНаМаршрут, врОбщВремя, ?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС), УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, 
					текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо, ОжиданиеТерминала) Тогда 
				флОшибкаРасчета = Истина;
			КонецЕсли;
			
			мсвПосещенныеПункты = Новый Массив;
			
			Если ОжиданиеТерминала > 0 Тогда 
				ВремяВыездаНаМаршрут = СложитьВремя1СЧЧММ(ВремяВыездаНаМаршрут, ОжиданиеТерминала);
				врТекВремяВТочке = ВремяВыездаНаМаршрут;
				
				Для Сч = -1 По МаршрутПулБ.Количество() - 1 Цикл 
					Если Сч = -1 Тогда 
						стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
					Иначе 
						стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
					КонецЕсли;
					
					Если стрЗаказ = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					
					СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресОтправления, 
						?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
					
					мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
					
					ВремяСтоянкиВПункте = 0;
					
					флЕстьНовые = Ложь;
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресОтправления) = Неопределено Тогда 
							флЕстьНовые = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флЕстьНовые Тогда 
						ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
					КонецЕсли;
					
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктОтправления);
					
					Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
						флОшибкаРасчета = Истина;
						Прервать;
					КонецЕсли;
					ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо, 0, 0, , мПулБ.ТС, "67_2");					
					
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
					
					Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
						мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресОтправления);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		врПредПункт = АдресДепоВрем;
		врПредАдрес = АдресДепо;
		врПредЛат   = ШиротаДепо;
		врПредЛон   = ДолготаДепо;
		
		Для Сч = -1 По МаршрутПулБ.Количество() - 1 Цикл 
			Если Сч = -1 Тогда 
				стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
			Иначе 
				стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
			КонецЕсли;
			
			Если стрЗаказ = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Пункт1 = врПредПункт;
			Пункт2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.ПунктПогрузки, стрЗаказ.ПунктРазгрузки);
			Адрес1 = врПредАдрес;
			Адрес2 = ?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения);
			
			текЛат = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛатОтпр, стрЗаказ.ЛатНазн);
			текЛон = ?(ФормироватьСборныеМаршруты, стрЗаказ.ЛонОтпр, стрЗаказ.ЛонНазн);
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, текЛат, текЛон);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			врПредПункт = Пункт2;
			врПредАдрес = Адрес2;
			врПредЛат   = текЛат;
			врПредЛон   = текЛон;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			Если Сч = -1 Тогда 
				ВремяПоЗаказу      = врВремя;
				РасстояниеПоЗаказу = текРасстояние
			Иначе 
				МаршрутПулБ[Сч].Время      = врВремя;
				МаршрутПулБ[Сч].Расстояние = текРасстояние
			КонецЕсли;
			
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			
			Если УчитыватьОкнаПоЗаказам Тогда 
				НачалоОкна    = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеС, стрЗаказ.ДоставкаС);
				ОкончаниеОкна = ?(ФормироватьСборныеМаршруты, стрЗаказ.ОтправлениеПо, стрЗаказ.ДоставкаПо);
				
				ОжиданиеПосещения = 0;
				Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПосещения) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				ЗаписьЖурналаОкна(стрЗаказ.ЗаказСсылка.Номер, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, 0, ОжиданиеПосещения, , мПулБ.ТС, "67_3");				
				
				Если Сч = -1 Тогда 
					ОжиданиеПоЗаказу = ОжиданиеПосещения;
				Иначе 
					МаршрутПулБ[Сч].Ожидание = ОжиданиеПосещения;
				КонецЕсли;
				
				Если ОжиданиеПосещения > 0 Тогда 
					врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ОжиданиеПосещения);
					врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ОжиданиеПосещения);
				КонецЕсли;
			КонецЕсли;
			
			СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(?(ФормироватьСборныеМаршруты, стрЗаказ.АдресОтправления, стрЗаказ.АдресНазначения), 
				?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
			
			мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
			
			флЕстьНовые = Ложь;
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				Если мсвПосещенныеПункты.Найти(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения)) = Неопределено Тогда 
					флЕстьНовые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕстьНовые Тогда 
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, СтоянкаПоТипуТС);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, СтоянкаПоТипуТС);
			КонецЕсли;
			
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ?(ФормироватьСборныеМаршруты, стрЗаказ.СтоянкаПунктОтправления, стрЗаказ.СтоянкаПунктНазначения));
			
			Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
				мсвПосещенныеПункты.Добавить(?(ФормироватьСборныеМаршруты, ТекИсхЗаказ.АдресОтправления, ТекИсхЗаказ.АдресНазначения));
			КонецЦикла;
		КонецЦикла;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если мПулБ.ВозвратВГараж Тогда 
			Пункт1 = врПредПункт;
			Пункт2 = АдресДепоВрем;
			Адрес1 = врПредАдрес;
			Адрес2 = АдресДепо;
			
			текВремя      = 0;
			текРасстояние = 0;
			
			Если Пункт1 = Пункт2 Тогда 
				Если Не Адрес1 = Адрес2 Тогда 
					ДанныеПоКластеру = ВремяРасстояниеПоКоординатам(врПредЛат, врПредЛон, ШиротаДепо, ДолготаДепо);
					текВремя = ДанныеПоКластеру.Время;
					текРасстояние = ДанныеПоКластеру.Расстояние;
				КонецЕсли;
				
			Иначе 
				Узел1 = СоотвТаблРасстояний.Получить(Пункт1);
				Если Узел1 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				КонецЕсли;
				Узел2 = Узел1.Получить(Пункт2);
				Если Узел2 = Неопределено Тогда 
					флОшибкаРасчета = Истина;
				Иначе 
					текВремя = Узел2.Время;
					текРасстояние = Узел2.Расстояние;
				КонецЕсли;
			КонецЕсли;
			
			Если флОшибкаРасчета Тогда 
				Возврат Ложь;
			КонецЕсли;
			
			врВремя = ПолучитьВремяВПутиСУчетомСреднейСкорости(текРасстояние,
				текВремя, '00010101' + (врТекВремяВТочке - НачалоДня(врТекВремяВТочке)), ТабСкоростей);
			
			врОбщРасстояние = врОбщРасстояние + текРасстояние;
			врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, врВремя);
			врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, врВремя);
		КонецЕсли;
		
		Если ФормироватьСборныеМаршруты Тогда 
			// Время стоянок при возвращении.
			Для Сч = -1 По МаршрутПулБ.Количество() - 1 Цикл 
				Если Сч = -1 Тогда 
					стрЗаказ = ТабЗаказы.Найти(ЗаказА, "Ссылка");
				Иначе 
					стрЗаказ = ТабЗаказы.Найти(МаршрутПулБ[Сч].заказ, "Ссылка");
				КонецЕсли;
				
				Если стрЗаказ = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если УчитыватьОкнаПоЗаказам И Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(врТекВремяВТочке, стрЗаказ.ОтправлениеС, стрЗаказ.ОтправлениеПо) Тогда 
					флОшибкаРасчета = Истина;
					Прервать;
				КонецЕсли;
				
				СтоянкаПоТипуТС = ПолучитьСтоянкуПоТипуТС(стрЗаказ.АдресНазначения, 
					?(мСтрокиТабТС.Количество() = 0, мПулБ.ТипТС, мСтрокиТабТС[0].ТипТС));
				
				мсвИсходныеЗаказы = СоотвГруппЗаказов.Получить(стрЗаказ.Ссылка);
				
				ВремяСтоянкиВПункте = 0;
				
				флЕстьНовые = Ложь;
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					Если мсвПосещенныеПункты.Найти(ТекИсхЗаказ.АдресНазначения) = Неопределено Тогда 
						флЕстьНовые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флЕстьНовые Тогда 
					ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, СтоянкаПоТипуТС);
				КонецЕсли;
				
				ВремяСтоянкиВПункте = СложитьВремяЧЧММ(ВремяСтоянкиВПункте, стрЗаказ.СтоянкаПунктНазначения);
				
				врТекВремяВТочке = СложитьВремя1СЧЧММ(врТекВремяВТочке, ВремяСтоянкиВПункте);
				врОбщВремя = СложитьВремяЧЧММ(врОбщВремя, ВремяСтоянкиВПункте);
				
				Для Каждого ТекИсхЗаказ Из мсвИсходныеЗаказы Цикл 
					мсвПосещенныеПункты.Добавить(ТекИсхЗаказ.АдресНазначения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если флОшибкаРасчета Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ОграничениеПоРасстоянию = 0 И врОбщРасстояние > ОграничениеПоРасстоянию Тогда 
			// Превышена протяженность маршрута.
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ОграничениеЧасов = 0 И врОбщВремя > ОграничениеЧасов Тогда 
			Если ИтерацияВремени = 1 Тогда 
				КорректировкаВыезда = врОбщВремя - ОграничениеЧасов;
				КоррЧас = Цел(КорректировкаВыезда);
				КоррМин = (КорректировкаВыезда - КоррЧас) * 100;
				ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут + КоррЧас * 3600 + КоррМин * 60;
				Продолжить;
				
			Иначе 
				// Первышена максимальная длительность маршрута.
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если Не МаксимальноеЧислоПунктов = 0 Тогда 
		мсвПунктыМаршрута = Новый Массив();
		мсвПунктыМаршрута.Добавить(АдресДепо);
		
		Если ЗначениеЗаполнено(ЗаказА) Тогда 
			СтрокаТабЗаказы = ТабЗаказы.Найти(ЗаказА, "Ссылка");
			Если Не СтрокаТабЗаказы = Неопределено Тогда 
				Если ФормироватьСборныеМаршруты Тогда 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
				Иначе 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
				КонецЕсли;
				
				Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
					мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекЭлМаршрута Из МаршрутПулБ Цикл 
			СтрокаТабЗаказы = ТабЗаказы.Найти(ТекЭлМаршрута.заказ, "Ссылка");
			Если Не СтрокаТабЗаказы = Неопределено Тогда 
				Если ФормироватьСборныеМаршруты Тогда 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресОтправления;
				Иначе 
					ТекАдресЗаказа = СтрокаТабЗаказы.АдресНазначения;
				КонецЕсли;
				
				Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = ТекАдресЗаказа Тогда 
					мсвПунктыМаршрута.Добавить(ТекАдресЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если мПулБ.ВозвратВГараж Тогда 
			Если Не мсвПунктыМаршрута[мсвПунктыМаршрута.Количество() - 1] = АдресДепо Тогда 
				мсвПунктыМаршрута.Добавить(АдресДепо);
			КонецЕсли;
		КонецЕсли;
		
		Если мсвПунктыМаршрута.Количество() > МаксимальноеЧислоПунктов Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если все проверки пройдены - заказ добавляется в маршрут.
	ЗафиксироватьТерминалПогрузкиИОкно(УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, мПулБ.Терминал, мПулБ.ТерминалПосещениеС,
		мПулБ.ТерминалПосещениеПо, текТерминал, текТерминалОкноС, текТерминалОкноПо, текТерминалПосещениеС, текТерминалПосещениеПо);
	
	мПулБ.МаксимальныйВес      = МаксимальныйВес;
	мПулБ.МаксимальныйОбъем    = МаксимальныйОбъем;
	мПулБ.ВсегоУпаковок        = ВсегоУпаковок;
	мПулБ.ВсегоЗаказов         = ВсегоЗаказов;
	мПулБ.ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут;
	мПулБ.Терминал             = текТерминал;
	мПулБ.ТерминалПосещениеС   = текТерминалПосещениеС;
	мПулБ.ТерминалПосещениеПо  = текТерминалПосещениеПо;
	
	мПулБ.маршрут.Очистить();
	Для Каждого ТекМаршрут Из МаршрутПулБ Цикл 
		мПулБ.маршрут.Добавить(Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
			ТекМаршрут.заказ, ТекМаршрут.Операция, ТекМаршрут.Ожидание, ТекМаршрут.Время, ТекМаршрут.Расстояние));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаказА) Тогда 
		мПулБ.маршрут.Вставить(0, Новый Структура("заказ,Операция,Ожидание, Время, Расстояние",
			ЗаказА, ?(ФормироватьСборныеМаршруты, Перечисления.уатТипыТочекМаршрута.Погрузка, Перечисления.уатТипыТочекМаршрута.Разгрузка), ОжиданиеПоЗаказу, ВремяПоЗаказу, РасстояниеПоЗаказу));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьРаспределение_КларкРайт_ОбходМатрицыВыигрышей_Вариант67()

#КонецОбласти

#Область СлужебныеМетодыДляАлгоритмаРаспределенияЗаказов

Функция СформироватьТаблицуЗаказовДляРаспределения(мсвЗаказы)
	
	ЗаказыДляЗапроса = Новый Массив();
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		ЗаказыДляЗапроса.Добавить(ТекЗаказ.Заказ);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказыДляЗапроса", ЗаказыДляЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПеревозку.Ссылка КАК ЗаказГрузоотправителя,
	|	ЕСТЬNULL(ЗаказГрузовойСостав.НомерСтроки, ЕСТЬNULL(ЗаказТоварныйСостав.НомерСтроки, 0)) КАК СтрокаПакета,
	|	ЕСТЬNULL(ЗаказГрузовойСостав.ГрузовоеМесто, ЕСТЬNULL(ЗаказТоварныйСостав.Номенклатура, НЕОПРЕДЕЛЕНО)) КАК Груз,
	|	ЕСТЬNULL(ЗаказГрузовойСостав.КоличествоМест, ЕСТЬNULL(ЗаказТоварныйСостав.Количество, 1)) КАК Количество,
	|	ЕСТЬNULL(ЗаказГрузовойСостав.ВесБрутто, ЕСТЬNULL(ЗаказТоварныйСостав.ВесБрутто, ЗаказНаПеревозку.Ссылка.ВесБрутто)) + ЕСТЬNULL(ЗаказГрузовойСостав.ВесТары, ЕСТЬNULL(ЗаказТоварныйСостав.ВесТары, ЗаказНаПеревозку.Ссылка.ВесТары)) КАК ВесБрутто,
	|	ЕСТЬNULL(ЗаказГрузовойСостав.Объем, ЕСТЬNULL(ЗаказТоварныйСостав.Объем, ЗаказНаПеревозку.Ссылка.Объем)) КАК Объем,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказГрузовойСостав.ВидУпаковки.Коэффициент = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЗаказГрузовойСостав.КоличествоМест / ЗаказГрузовойСостав.ВидУпаковки.Коэффициент
	|		КОНЕЦ, ЕСТЬNULL(ЗаказТоварныйСостав.КоличествоМест, ЗаказНаПеревозку.Ссылка.КоличествоМест)) КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ЗаказНаПеревозку.АдресОтправления КАК Справочник.уатПунктыНазначения) КАК ПунктПогрузки,
	|	ВЫРАЗИТЬ(ЗаказНаПеревозку.АдресНазначения КАК Справочник.уатПунктыНазначения) КАК ПунктРазгрузки,
	|	ЗаказНаПеревозку.Ссылка.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	|	ЗаказНаПеревозку.Ссылка.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения,
	|	ЕСТЬNULL(ПунктыОтправления.ТипПункта, ЗНАЧЕНИЕ(Справочник.уатТипыПунктов.ПустаяСсылка)) КАК КатегорияПунктаОтправления,
	|	ЕСТЬNULL(ПунктыНазначения.ТипПункта, ЗНАЧЕНИЕ(Справочник.уатТипыПунктов.ПустаяСсылка)) КАК КатегорияПунктаНазначения,
	|	ЗаказНаПеревозку.Приоритет КАК Приоритет,
	|	ЗаказНаПеревозку.Ссылка.FTL КАК FTL,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МИНУТА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаказНаПеревозку.ОтправлениеС, ДЕНЬ), ЗаказНаПеревозку.ОтправлениеС, МИНУТА)) КАК ОтправлениеС,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), МИНУТА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаказНаПеревозку.ОтправлениеПо, ДЕНЬ), ЗаказНаПеревозку.ОтправлениеПо, МИНУТА)) КАК ОтправлениеПо
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК ЗаказНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК ЗаказГрузовойСостав
	|		ПО ЗаказНаПеревозку.Ссылка = ЗаказГрузовойСостав.Ссылка
	|			И (ЗаказНаПеревозку.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК ЗаказТоварныйСостав
	|		ПО ЗаказНаПеревозку.Ссылка = ЗаказТоварныйСостав.Ссылка
	|			И (ЗаказНаПеревозку.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК ПунктыОтправления
	|		ПО ЗаказНаПеревозку.Ссылка.АдресОтправления = ПунктыОтправления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК ПунктыНазначения
	|		ПО ЗаказНаПеревозку.Ссылка.АдресНазначения = ПунктыНазначения.Ссылка
	|ГДЕ
	|	ЗаказНаПеревозку.Ссылка В(&ЗаказыДляЗапроса)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("МаршрутныйЛистСоздан", Новый ОписаниеТипов("Булево"));
	РезультатЗапроса.Колонки.Добавить("IDМаршрутногоЛиста", Новый ОписаниеТипов("Строка"));
	
	ТабРассмотренныеГрузы = Новый ТаблицаЗначений();
	ТабРассмотренныеГрузы.Колонки.Добавить("Ссылка");
	ТабРассмотренныеГрузы.Колонки.Добавить("Груз");
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		НовСтрока = ТабРассмотренныеГрузы.Добавить();
		НовСтрока.Ссылка = ТекЗаказ.Заказ;
		НовСтрока.Груз   = ТекЗаказ.Груз;
		
		НайдСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Груз", ТекЗаказ.Заказ, ТекЗаказ.Груз));
		
		КоличествоУчтено = ТекЗаказ.Количество;
		
		мсвСтрокиУдалить = Новый Массив();
		
		Сч = НайдСтроки.Количество() - 1;
		Пока Сч >= 0 Цикл 
			ТекСтрока = НайдСтроки[Сч];
			Если ТекЗаказ.Свойство("МаршрутныйЛистСоздан") Тогда
				ТекСтрока.МаршрутныйЛистСоздан = ТекЗаказ.МаршрутныйЛистСоздан;
			КонецЕсли;
			Если ТекЗаказ.Свойство("IDМаршрутногоЛиста") Тогда
				ТекСтрока.IDМаршрутногоЛиста = ТекЗаказ.IDМаршрутногоЛиста;
			КонецЕсли;
			
			Если КоличествоУчтено = 0 Тогда 
				мсвСтрокиУдалить.Добавить(ТекСтрока);
				
			ИначеЕсли ТекСтрока.Количество < КоличествоУчтено Тогда 
				КоличествоУчтено = КоличествоУчтено - ТекСтрока.Количество;
				
			Иначе 
				КоэфПересчета = ?(ТекСтрока.Количество = 0, 0, КоличествоУчтено / ТекСтрока.Количество);
				
				ТекСтрока.Количество = КоличествоУчтено;
				КоличествоУчтено = 0;
				
				ТекСтрока.ВесБрутто          = ТекСтрока.ВесБрутто * КоэфПересчета;
				ТекСтрока.Объем              = ТекСтрока.Объем * КоэфПересчета;
				ТекСтрока.КоличествоУпаковок = ТекСтрока.КоличествоУпаковок * КоэфПересчета;
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
		
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл 
			РезультатЗапроса.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЦикла;
	
	мсвСтрокиУдалить = Новый Массив();
	
	мсвПунктов = Новый Массив();
	
	Для Каждого ТекСтрока Из РезультатЗапроса Цикл 
		НайдСтроки = ТабРассмотренныеГрузы.НайтиСтроки(Новый Структура("Ссылка, Груз", ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.Груз));
		Если НайдСтроки.Количество() = 0 Тогда 
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		Иначе 
			Если мсвПунктов.Найти(ТекСтрока.ПунктПогрузки) = Неопределено Тогда 
				мсвПунктов.Добавить(ТекСтрока.ПунктПогрузки);
			КонецЕсли;
			Если мсвПунктов.Найти(ТекСтрока.ПунктРазгрузки) = Неопределено Тогда 
				мсвПунктов.Добавить(ТекСтрока.ПунктРазгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл 
		РезультатЗапроса.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	РезультатЗапроса.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого ТекСтрока Из РезультатЗапроса Цикл 
		ТекСтрока.Ссылка = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаЗаказов, МассивПунктов", РезультатЗапроса, мсвПунктов);
	
КонецФункции // СформироватьТаблицуЗаказовДляРаспределения()

Функция СформироватьДопДанныеДляРаспределения(мсвТС, УчитыватьРазрешенныеТипыТС, мсвПунктыПоЗаказу,
		ИспользоватьВПриоритетеСобственныйТранспорт, ПонижающийКоэффициентЗагрузкиКузоваПоОбъему, 
		ПонижающийКоэффициентЗагрузкиКузоваПоВесу)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТерминалыРазрешенныеТипыТС.Ссылка.Владелец КАК ПунктПогрузкиПоТерминалам,
	|	уатТерминалыРазрешенныеТипыТС.Ссылка КАК Терминал,
	|	уатТерминалыРазрешенныеТипыТС.ТипТС КАК ТипТС,
	|	уатТерминалыРазрешенныеТипыТС.Ссылка.Владелец.ВремяДоступностиС КАК ВремяНачалаПогрузки,
	|	уатТерминалыРазрешенныеТипыТС.Ссылка.Владелец.ВремяДоступностиПо КАК ВремяОкончанияПогрузки
	|ИЗ
	|	Справочник.уатТерминалы.РазрешенныеТипыТС КАК уатТерминалыРазрешенныеТипыТС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатТерминалы.Ссылка.Владелец,
	|	уатТерминалы.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	уатТерминалы.Владелец.ВремяДоступностиС,
	|	уатТерминалы.Владелец.ВремяДоступностиПо
	|ИЗ
	|	Справочник.уатТерминалы КАК уатТерминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТерминалы.РазрешенныеТипыТС КАК уатТерминалыРазрешенныеТипыТС
	|		ПО уатТерминалы.Ссылка = уатТерминалыРазрешенныеТипыТС.Ссылка
	|ГДЕ
	|	уатТерминалыРазрешенныеТипыТС.НомерСтроки ЕСТЬ NULL
	|ИТОГИ
	|	МАКСИМУМ(ВремяНачалаПогрузки),
	|	МАКСИМУМ(ВремяОкончанияПогрузки)
	|ПО
	|	ПунктПогрузкиПоТерминалам,
	|	Терминал";
	
	ТерминалыПогрузки = Новый Соответствие();
	
	ВыборкаТерминалыПункта = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТерминалыПункта.Следующий() Цикл 
		ДанныеПоТерминалам = Новый Структура("РазрешенныеТипы, ДоступныеОкна", Новый Соответствие(), Новый ТаблицаЗначений());
		
		ДанныеПоТерминалам.ДоступныеОкна.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.уатТерминалы"));
		ДанныеПоТерминалам.ДоступныеОкна.Колонки.Добавить("ОкноС",    Новый ОписаниеТипов("Дата"));
		ДанныеПоТерминалам.ДоступныеОкна.Колонки.Добавить("ОкноПо",   Новый ОписаниеТипов("Дата"));
		
		ВыборкаТерминалы = ВыборкаТерминалыПункта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТерминалы.Следующий() Цикл 
			НовСтрокаОкно = ДанныеПоТерминалам.ДоступныеОкна.Добавить();
			НовСтрокаОкно.Терминал = ВыборкаТерминалы.Терминал;
			НовСтрокаОкно.ОкноС    = ВыборкаТерминалы.Терминал.Владелец.ВремяДоступностиС;
			
			Если ВыборкаТерминалы.Терминал.Владелец.ВремяДоступностиПо = '00010101000000' Тогда 
				НовСтрокаОкно.ОкноПо = '00010101235959';
			Иначе 
				НовСтрокаОкно.ОкноПо = ВыборкаТерминалы.Терминал.Владелец.ВремяДоступностиПо;
			КонецЕсли;
			
			мсвДоступныеТипы = Новый Массив();
			ВыборкаТипыТерминалов = ВыборкаТерминалы.Выбрать();
			Пока ВыборкаТипыТерминалов.Следующий() Цикл 
				Если Не ВыборкаТипыТерминалов.ТипТС = Неопределено Тогда 
					мсвДоступныеТипы.Добавить(ВыборкаТипыТерминалов.ТипТС);
				КонецЕсли;
			КонецЦикла;
			
			Если мсвДоступныеТипы.Количество() Тогда 
				ДанныеПоТерминалам.РазрешенныеТипы.Вставить(ВыборкаТерминалы.Терминал, мсвДоступныеТипы);
			КонецЕсли;
		КонецЦикла;
		
		ТерминалыПогрузки.Вставить(ВыборкаТерминалыПункта.ПунктПогрузкиПоТерминалам, ДанныеПоТерминалам);
	КонецЦикла;
	
	табТСВходная = Новый ТаблицаЗначений();
	табТСВходная.Колонки.Добавить("ТС",      Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	табТСВходная.Колонки.Добавить("Прицеп1", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	табТСВходная.Колонки.Добавить("Прицеп2", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	
	Для Каждого ТекСтрока Из мсвТС Цикл 
		Прицеп1 = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Прицеп2 = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		
		Для Сч = 1 По ТекСтрока.Прицепы.Количество() Цикл 
			ТекПрицеп = ТекСтрока.Прицепы[Сч - 1];
			
			Если Сч = 1 Тогда 
				Прицеп1 = ТекПрицеп.Прицеп;
			Иначе 
				Прицеп2 = ТекПрицеп.Прицеп;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекСтрока.ЭтоВиртуальноеТС Тогда 
			Для СчТС = 1 По ТекСтрока.КоличествоВиртуальныхТС Цикл 
				НовСтрока = табТСВходная.Добавить();
				НовСтрока.ТС      = ТекСтрока.ТС;
				НовСтрока.Прицеп1 = Прицеп1;
				НовСтрока.Прицеп2 = Прицеп2;
			КонецЦикла;
			
		Иначе 
			НовСтрока = табТСВходная.Добавить();
			НовСтрока.ТС      = ТекСтрока.ТС;
			НовСтрока.Прицеп1 = Прицеп1;
			НовСтрока.Прицеп2 = Прицеп2;
		КонецЕсли;
	КонецЦикла;
	
	// {pugili 18.11.2020}
	МаршрутыТС = Новый ТаблицаЗначений;
	МаршрутыТС.Колонки.Добавить("ТС",      Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	МаршрутыТС.Колонки.Добавить("Маршрут", Новый ОписаниеТипов("СправочникСсылка.уатМаршруты"));
	Для Каждого ТекСтрока Из мсвТС Цикл
		Для Каждого ТекМаршрут Из ТекСтрока.Маршруты Цикл
			НовСтрока = МаршрутыТС.Добавить();
			НовСтрока.ТС = ТекСтрока.ТС;
			НовСтрока.Маршрут = ТекМаршрут;
		КонецЦикла;
	КонецЦикла;
	Запрос.УстановитьПараметр("МаршрутыТС",                                  МаршрутыТС);
	Запрос.УстановитьПараметр("табТСВходная",                                табТСВходная);
	Запрос.УстановитьПараметр("ИспользоватьВПриоритетеСобственныйТранспорт", ИспользоватьВПриоритетеСобственныйТранспорт);
	Запрос.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоОбъему", ПонижающийКоэффициентЗагрузкиКузоваПоОбъему / 100);
	Запрос.УстановитьПараметр("ПонижающийКоэффициентЗагрузкиКузоваПоВесу",   ПонижающийКоэффициентЗагрузкиКузоваПоВесу / 100);
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1);
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	табТСВходная.ТС КАК ТС,
	|	табТСВходная.Прицеп1 КАК Прицеп1,
	|	табТСВходная.Прицеп2 КАК Прицеп2
	|ПОМЕСТИТЬ ВТ_ТСВходПараметр
	|ИЗ
	|	&табТСВходная КАК табТСВходная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.ТС КАК Справочник.уатТС) КАК ТС,
	|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп1 КАК Справочник.уатТС) КАК Прицеп1,
	|	ВЫРАЗИТЬ(ВТ_ТСВходПараметр.Прицеп2 КАК Справочник.уатТС) КАК Прицеп2
	|ПОМЕСТИТЬ ВТ_ТСтипизированная
	|ИЗ
	|	ВТ_ТСВходПараметр КАК ВТ_ТСВходПараметр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТСтипизированная.ТС КАК Ссылка,
	|	(ВТ_ТСтипизированная.ТС.Модель.Грузоподъемность * &КоэфГрузоподъемности + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности + ВЫБОР
	|		КОГДА ВТ_ТСтипизированная.Прицеп1 = ВТ_ТСтипизированная.Прицеп2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|	КОНЕЦ) * &ПонижающийКоэффициентЗагрузкиКузоваПоВесу КАК Грузоподъемность,
	|	(ВТ_ТСтипизированная.ТС.Модель.ОбъемКузова * &КоэфОбъемаКузова + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова + ВЫБОР
	|		КОГДА ВТ_ТСтипизированная.Прицеп1 = ВТ_ТСтипизированная.Прицеп2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова
	|	КОНЕЦ) * &ПонижающийКоэффициентЗагрузкиКузоваПоОбъему КАК ОбъемКузова,
	|	ВТ_ТСтипизированная.ТС.Модель.МаксимальноеКоличествоУпаковок + ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп1.Модель.МаксимальноеКоличествоУпаковок, 0) + ВЫБОР
	|		КОГДА ВТ_ТСтипизированная.Прицеп1 = ВТ_ТСтипизированная.Прицеп2
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ТСтипизированная.Прицеп2.Модель.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ВТ_ТСтипизированная.ТС.ТипТС = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
	|			ТОГДА ВТ_ТСтипизированная.ТС.Модель.ТипТС
	|		ИНАЧЕ ВТ_ТСтипизированная.ТС.ТипТС
	|	КОНЕЦ КАК ТипТС,
	|	ВЫБОР
	|		КОГДА &ИспользоватьВПриоритетеСобственныйТранспорт
	|				И ВТ_ТСтипизированная.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ТС_Подготовка
	|ИЗ
	|	ВТ_ТСтипизированная КАК ВТ_ТСтипизированная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутыТС.ТС КАК ТС,
	|	МаршрутыТС.Маршрут КАК Маршрут
	|ПОМЕСТИТЬ ВТ_МаршрутыТС
	|ИЗ
	|	&МаршрутыТС КАК МаршрутыТС";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ТранспортныеСредства.Грузоподъемность) КАК МаксГрузоподъемность,
	|	МАКСИМУМ(ТранспортныеСредства.ОбъемКузова) КАК МаксОбъемКузова
	|ИЗ
	|	ВТ_ТС_Подготовка КАК ТранспортныеСредства";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		МаксГрузоподъемность = Выборка.МаксГрузоподъемность;
		МаксОбъемКузова      = Выборка.МаксОбъемКузова;
	Иначе 
		МаксГрузоподъемность = 0;
		МаксОбъемКузова      = 0;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МаксГрузоподъемность", МаксГрузоподъемность);
	Запрос.УстановитьПараметр("МаксОбъемКузова",      МаксОбъемКузова);
	Запрос.УстановитьПараметр("мсвПунктыПоЗаказу",    мсвПунктыПоЗаказу);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТранспортныеСредства.Ссылка КАК Ссылка,
	|	ТранспортныеСредства.Грузоподъемность КАК Грузоподъемность,
	|	ТранспортныеСредства.ОбъемКузова КАК ОбъемКузова,
	|	(ВЫБОР
	|		КОГДА &МаксГрузоподъемность = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТранспортныеСредства.Грузоподъемность / &МаксГрузоподъемность
	|	КОНЕЦ + ВЫБОР
	|		КОГДА &МаксОбъемКузова = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТранспортныеСредства.ОбъемКузова / &МаксОбъемКузова
	|	КОНЕЦ) / 2 КАК Порядок,
	|	ТранспортныеСредства.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ТранспортныеСредства.ТипТС КАК ТипТС,
	|	ТранспортныеСредства.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ТС
	|ИЗ
	|	ВТ_ТС_Подготовка КАК ТранспортныеСредства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТС.Ссылка КАК Ссылка,
	|	ВТ_ТС.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_ТС.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_ТС.Порядок КАК Порядок,
	|	ВТ_ТС.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ВТ_ТС.ТипТС КАК ТипТС,
	|	ВТ_ТС.Приоритет КАК Приоритет,
	|	ЕСТЬNULL(ВТ_МаршрутыТС.Маршрут, ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)) КАК Маршрут
	|ИЗ
	|	ВТ_ТС КАК ВТ_ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыТС КАК ВТ_МаршрутыТС
	|		ПО ВТ_ТС.Ссылка = ВТ_МаршрутыТС.ТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблТиповТС.Ссылка КАК Ссылка,
	|	ТаблТиповТС.ТипТС КАК ТипТС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТС.Ссылка КАК Ссылка,
	|		уатТС.ТипТС КАК ТипТС
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|			ПО ВТ_ТС.Ссылка = уатТС.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ТС.Ссылка,
	|		уатМоделиТС.ТипТС
	|	ИЗ
	|		ВТ_ТС КАК ВТ_ТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|				ПО уатТС.Модель = уатМоделиТС.Ссылка
	|			ПО ВТ_ТС.Ссылка = уатТС.Ссылка) КАК ТаблТиповТС
	|ИТОГИ ПО
	|	ТипТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Ссылка КАК ПунктПогрузки,
	|	уатТипыПунктовРазрешенныеТипыТС.ТипТС КАК ТипТС
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов.РазрешенныеТипыТС КАК уатТипыПунктовРазрешенныеТипыТС
	|		ПО уатПунктыНазначения.ТипПункта = уатТипыПунктовРазрешенныеТипыТС.Ссылка
	|			И (уатПунктыНазначения.Ссылка В (&мсвПунктыПоЗаказу))
	|ИТОГИ ПО
	|	ПунктПогрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТипыПунктовРазрешенныеТипыТС.Ссылка КАК КатегорияПункта,
	|	уатТипыПунктовРазрешенныеТипыТС.ТипТС КАК ТипТС,
	|	уатТипыПунктовРазрешенныеТипыТС.СтоянкаДоп КАК Стоянка
	|ИЗ
	|	Справочник.уатТипыПунктов.РазрешенныеТипыТС КАК уатТипыПунктовРазрешенныеТипыТС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатТипыПунктов.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	уатТипыПунктов.СтоянкаДоп
	|ИЗ
	|	Справочник.уатТипыПунктов КАК уатТипыПунктов";
	// {/pugili 18.11.2020}
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоотТипыТС = Новый Соответствие();
	СоотРазрешенныеТипыПунктов = Новый Соответствие();
	Если УчитыватьРазрешенныеТипыТС Тогда 
		ВыборкаТипыТС = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипыТС.Следующий() Цикл 
			мсвТСПоТипу = Новый Массив();
			ВыборкаТСДетально = ВыборкаТипыТС.Выбрать();
			Пока ВыборкаТСДетально.Следующий() Цикл 
				мсвТСПоТипу.Добавить(ВыборкаТСДетально.Ссылка);
			КонецЦикла;
			Если мсвТСПоТипу.Количество() Тогда 
				СоотТипыТС.Вставить(ВыборкаТипыТС.ТипТС, мсвТСПоТипу);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаТипыПунктов =  уатОбщегоНазначения.ПолучитьРазрешенныеТипыТС(мсвПунктыПоЗаказу).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипыПунктов.Следующий() Цикл 
			мсвТипыПунктов = Новый Массив();
			ВыборкаТипыДетально = ВыборкаТипыПунктов.Выбрать();
			Пока ВыборкаТипыДетально.Следующий() Цикл 
				мсвТипыПунктов.Добавить(ВыборкаТипыДетально.ТипТС);
			КонецЦикла;
			Если мсвТипыПунктов.Количество() Тогда 
				СоотРазрешенныеТипыПунктов.Вставить(ВыборкаТипыПунктов.ПунктПогрузки, мсвТипыПунктов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТабТС = РезультатЗапроса[1].Выгрузить();
	
	СтоянкиПоТипамТС = РезультатЗапроса[4].Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Возврат Новый Структура("СоотТипыТС, СоотРазрешенныеТипыПунктов, ТабТС, СтоянкиПоТипамТС, ТерминалыПогрузки", 
		СоотТипыТС, СоотРазрешенныеТипыПунктов, ТабТС, СтоянкиПоТипамТС, ТерминалыПогрузки);
	
КонецФункции // СформироватьДопДанныеДляРаспределения()

// {pugili 05.11.2020}

Процедура ДобавитьЗаказВПул(пулы, ТабТС, ДанныеПоМаршрутам, СтрокаПула, мСтрокаТабТС, ТекСтрокаЗаказа, ПодходящийМаршрут, 
	МаксимальныйВес, МаксимальныйОбъем, ВсегоУпаковок, мсвУчтенныхЗаказов, ЗапрещеноИзменениеМаршрутногоЛиста = Ложь)
	
	Если мСтрокаТабТС = Неопределено Тогда 
		ТекТипТС = СтрокаПула.ТипТС;
	Иначе 
		ТекТипТС = мСтрокаТабТС.ТипТС;
	КонецЕсли;
	
	// Расчет времени прибытия на погрузку
	Если СтрокаПула = Неопределено Тогда 
		СтоянкаПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрокаЗаказа.ПунктПогрузки, ТекТипТС);
		ВремяВыездаНаМаршрут = уатЗащищенныеФункцииСервер.СложитьВремя(Дата(1,1,1), ПодходящийМаршрут.Маршрут.ВремяОтправления);
		ВремяВыездаНаМаршрут  = ВремяВыездаНаМаршрут - Цел(СтоянкаПункта) * 60 * 60 - (СтоянкаПункта - Цел(СтоянкаПункта)) * 100 * 60;
		
		мсвУчтенныхЗаказов = Новый Массив();
	Иначе 
		ВремяВыездаНаМаршрут = СтрокаПула.ВремяВыездаНаМаршрут;
	КонецЕсли;
	
	Если мсвУчтенныхЗаказов.Найти(ТекСтрокаЗаказа.ЗаказГрузоотправителя) = Неопределено Тогда
		// Для исключения дублей заказов
		ВремяВыездаНаМаршрут = ВремяВыездаНаМаршрут - Цел(ТекСтрокаЗаказа.ЗаказГрузоотправителя.СтоянкаПунктОтправления) * 60 * 60 - 
		(ТекСтрокаЗаказа.ЗаказГрузоотправителя.СтоянкаПунктОтправления - Цел(ТекСтрокаЗаказа.ЗаказГрузоотправителя.СтоянкаПунктОтправления)) * 100 * 60;
		
		мсвУчтенныхЗаказов.Добавить(ТекСтрокаЗаказа.ЗаказГрузоотправителя);
	КонецЕсли;
	// Конец расчет времени
	
	Если СтрокаПула = Неопределено Тогда 
		СтрокаПула = пулы.Добавить();
		СтрокаПула.Маршрут = ПодходящийМаршрут.Маршрут;
		Если ЗначениеЗаполнено(ПодходящийМаршрут.IDМаршрутногоЛиста) Тогда
			СтрокаПула.IDМаршрутногоЛиста = ПодходящийМаршрут.IDМаршрутногоЛиста;
		КонецЕсли;
		
		СтрокаПула.РазмещенныеЗаказы.Колонки.Добавить("Заказ",                Новый ОписаниеТипов("УникальныйИдентификатор"));
		СтрокаПула.РазмещенныеЗаказы.Колонки.Добавить("Порядок",              Новый ОписаниеТипов("Число"));
		СтрокаПула.РазмещенныеЗаказы.Колонки.Добавить("МаршрутныйЛистСоздан", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если Не мСтрокаТабТС = Неопределено Тогда 
		Если ЗначениеЗаполнено(СтрокаПула.ТС) Тогда 
			// Вернуть старый ТС в таблицу свободных.
			НовСтрТС = ТабТС.Добавить();
			НовСтрТС.Ссылка                         = СтрокаПула.ТС;
			НовСтрТС.Грузоподъемность               = СтрокаПула.ГрузоподъемностьТС;
			НовСтрТС.ОбъемКузова                    = СтрокаПула.ОбъемКузоваТС;
			НовСтрТС.Порядок                        = СтрокаПула.ПорядокТС;
			НовСтрТС.МаксимальноеКоличествоУпаковок = СтрокаПула.МаксимальноеКоличествоУпаковокТС;
			НовСтрТС.ТипТС                          = СтрокаПула.ТипТС;
			НовСтрТС.Приоритет                      = СтрокаПула.ПриоритетТС;
			
			Если СтрокаПула.ТСУниверсальное Тогда
				НовСтрТС.Маршрут                    = Справочники.уатМаршруты.ПустаяСсылка();
			Иначе
				НовСтрТС.Маршрут                    = СтрокаПула.Маршрут;
			КонецЕсли;
		КонецЕсли;
		
		// Подставить новый в пул.
		СтрокаПула.ТС                               = мСтрокаТабТС.Ссылка;
		СтрокаПула.ГрузоподъемностьТС               = мСтрокаТабТС.Грузоподъемность;
		СтрокаПула.ОбъемКузоваТС                    = мСтрокаТабТС.ОбъемКузова;
		СтрокаПула.ПорядокТС                        = мСтрокаТабТС.Порядок;
		СтрокаПула.МаксимальноеКоличествоУпаковокТС = мСтрокаТабТС.МаксимальноеКоличествоУпаковок;
		СтрокаПула.ТипТС                            = мСтрокаТабТС.ТипТС;
		СтрокаПула.ПриоритетТС                      = мСтрокаТабТС.Приоритет;
		// {pugili 18.11.2020}
		СтрокаПула.ТСУниверсальное                  = Не ЗначениеЗаполнено(мСтрокаТабТС.Маршрут);
		// {/pugili 18.11.2020}
		
		// Удалить новый ТС из таблицы.
		ТабТС.Удалить(ТабТС.НайтиСтроки(Новый Структура("Ссылка, Маршрут", мСтрокаТабТС.Ссылка, мСтрокаТабТС.Маршрут))[0]);
		
		ТабТС.Сортировать("Приоритет Убыв, Порядок Возр");
	КонецЕсли;
	
	Если СтрокаПула.ПосещенныеПункты.Найти(ТекСтрокаЗаказа.ПунктПогрузки) = Неопределено Тогда 
		СтрокаПула.ПосещенныеПункты.Добавить(ТекСтрокаЗаказа.ПунктПогрузки);
	КонецЕсли;
	
	Если СтрокаПула.ПосещенныеПункты.Найти(ТекСтрокаЗаказа.ПунктРазгрузки) = Неопределено Тогда 
		СтрокаПула.ПосещенныеПункты.Добавить(ТекСтрокаЗаказа.ПунктРазгрузки);
	КонецЕсли;
	
	Если СтрокаПула.РазмещенныеЗаказы.Найти(ТекСтрокаЗаказа.Ссылка, "Заказ") = Неопределено Тогда 
		// В таблицу размещенных заказов не попадают заказы, не связанные с маршрутом, 
		// которые могут возникнуть только при допланировании. 
		// Это позволит игнорировать пункты, связанные с такими заказами, при сопоставлении пунктов по маршруту и по МЛ.
		мсвПункты = ДанныеПоМаршрутам.ПунктыМаршрутов.Получить(СтрокаПула.Маршрут);
		Если мсвПункты.Количество() > 0 И мсвПункты[0] = ТекСтрокаЗаказа.ПунктПогрузки Тогда
			ПорядокПоМаршруту = мсвПункты.Найти(ТекСтрокаЗаказа.ПунктРазгрузки);
			Если ПорядокПоМаршруту <> Неопределено Тогда
				НовСтрока = СтрокаПула.РазмещенныеЗаказы.Добавить();
				НовСтрока.Заказ = ТекСтрокаЗаказа.Ссылка;
				НовСтрока.МаршрутныйЛистСоздан = ТекСтрокаЗаказа.МаршрутныйЛистСоздан;
				НовСтрока.Порядок = ПорядокПоМаршруту;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Признак МЛ, в который нельзя добавлять новые заказы. 
	// Используется для передачи существующих МЛ при включенном флаге "Несколько МЛ для одного ТС".
	СтрокаПула.ЗапрещеноИзменениеМаршрутногоЛиста = ЗапрещеноИзменениеМаршрутногоЛиста;
	СтрокаПула.МаксимальныйВес                    = МаксимальныйВес;
	СтрокаПула.МаксимальныйОбъем                  = МаксимальныйОбъем;
	СтрокаПула.ВсегоУпаковок                      = ВсегоУпаковок;
	СтрокаПула.ВремяВыездаНаМаршрут               = ВремяВыездаНаМаршрут;
	
КонецПроцедуры

// {/pugili 05.11.2020}
#КонецОбласти

#Область ОбщиеМетоды

// Процедура предназначена для заполнения соответствия между заказами и ТС
// согласно списка разрешенных типов ТС по пунктам заказов.
//
Процедура УстановитьРазрешенныеТСЗаказов(СоотРазрешенныеТСПоЗаказам, СоотТипыТС, СоотРазрешенныеТипыПунктов, Заказ, АдресОтправления, АдресНазначения)
	
	РазрешенныеТипыПогрузка  = СоотРазрешенныеТипыПунктов.Получить(АдресОтправления);
	РазрешенныеТипыРазгрузка = СоотРазрешенныеТипыПунктов.Получить(АдресНазначения);
	
	Если РазрешенныеТипыПогрузка = Неопределено Тогда 
		РазрешенныеТипыПогрузка = Новый Массив();
	КонецЕсли;
	
	Если РазрешенныеТипыРазгрузка = Неопределено Тогда 
		РазрешенныеТипыРазгрузка = Новый Массив();
	КонецЕсли;
	
	Если РазрешенныеТипыПогрузка.Количество() И РазрешенныеТипыРазгрузка.Количество() Тогда 
		// Разрешены только те, которые есть в обоих массивах.
		мсвДоступныеТС = Новый Массив();
		
		Для Каждого ТекТип Из РазрешенныеТипыПогрузка Цикл 
			Если РазрешенныеТипыРазгрузка.Найти(ТекТип) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ДоступныеТС = СоотТипыТС.Получить(ТекТип);
			Если ДоступныеТС = Неопределено Тогда 
				ДоступныеТС = Новый Массив();
			КонецЕсли;
			
			Для Каждого ТекТС Из ДоступныеТС Цикл 
				мсвДоступныеТС.Добавить(ТекТС);
			КонецЦикла;
		КонецЦикла;
		
		СоотРазрешенныеТСПоЗаказам.Вставить(Заказ, мсвДоступныеТС);
		
	ИначеЕсли РазрешенныеТипыПогрузка.Количество() Тогда
		мсвДоступныеТС = Новый Массив();
		
		Для Каждого ТекТип Из РазрешенныеТипыПогрузка Цикл 
			ДоступныеТС = СоотТипыТС.Получить(ТекТип);
			Если ДоступныеТС = Неопределено Тогда 
				ДоступныеТС = Новый Массив();
			КонецЕсли;
			
			Для Каждого ТекТС Из ДоступныеТС Цикл 
				мсвДоступныеТС.Добавить(ТекТС);
			КонецЦикла;
		КонецЦикла;
		
		СоотРазрешенныеТСПоЗаказам.Вставить(Заказ, мсвДоступныеТС);
		
	ИначеЕсли РазрешенныеТипыРазгрузка.Количество() Тогда
		мсвДоступныеТС = Новый Массив();
		
		Для Каждого ТекТип Из РазрешенныеТипыРазгрузка Цикл 
			ДоступныеТС = СоотТипыТС.Получить(ТекТип);
			Если ДоступныеТС = Неопределено Тогда 
				ДоступныеТС = Новый Массив();
			КонецЕсли;
			
			Для Каждого ТекТС Из ДоступныеТС Цикл 
				мсвДоступныеТС.Добавить(ТекТС);
			КонецЦикла;
		КонецЦикла;
		
		СоотРазрешенныеТСПоЗаказам.Вставить(Заказ, мсвДоступныеТС);
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для получения времени стоянки в пункте по категории пункта и типу ТС.
//
Функция ПолучитьСтоянкуПоТипуТС(Пункт=Неопределено, ТипТС=Неопределено)
	
	СтоянкаПоТипуТС = 0;
	СтоянкаПоТипуТС = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Пункт, ТипТС);
	
	Возврат СтоянкаПоТипуТС;
	
КонецФункции // ПолучитьСтоянкуПоТипуТС()

// Функция предназначена для подбора терминала погрузки с учетом окна погрузки терминала, окна по заказу, типа ТС.
//
Функция ОпределитьТерминалПогрузкиИОкно(Знач НачалоПериодаПосещения, Знач ПродолжительностьПосещения, ТекТипТС, УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, ТекТерминал, 
		ТекТерминалОкноС, ТекТерминалОкноПо, ТекТерминалПосещениеС, ТекТерминалПосещениеПо, ОжиданиеПосещения, СтарыйТерминал2=Неопределено, 
		СтарыйТерминалПосещениеС2=Неопределено, СтарыйТерминалПосещениеПо2=Неопределено)
	
	// Подбор терминала по доступному окну.
	Если УчитыватьОкноПогрузкиТерминалов Тогда 
		КонецПериодаПосещения = СложитьВремя1СЧЧММ(НачалоПериодаПосещения, ПродолжительностьПосещения);
		
		ДоступныеОкна = ТерминалыПогрузки.ДоступныеОкна.Скопировать();
		
		Если Не ТекТерминал = Неопределено Тогда 
			ВосстановитьОкноТерминала(ДоступныеОкна, ТекТерминал, ТекТерминалПосещениеС, ТекТерминалПосещениеПо);
		КонецЕсли;
		
		Если Не СтарыйТерминал2 = Неопределено Тогда 
			ВосстановитьОкноТерминала(ДоступныеОкна, СтарыйТерминал2, СтарыйТерминалПосещениеС2, СтарыйТерминалПосещениеПо2);
		КонецЕсли;
		
		ДоступныеОкна.Сортировать("ОкноС, ОкноПо");
		
		ПодходящееОкно = Неопределено;
		Для Каждого ТекОкно Из ДоступныеОкна Цикл 
			// Проверка на разрешенные типы ТС.
			РазрешенныеТипы = ТерминалыПогрузки.РазрешенныеТипы.Получить(ТекОкно.Терминал);
			Если Не РазрешенныеТипы = Неопределено Тогда 
				Если ЗначениеЗаполнено(ТекТипТС) Тогда 
					Если РазрешенныеТипы.Найти(ТекТипТС) = Неопределено Тогда 
						// Не подходит.
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(НачалоПериодаПосещения, ТекОкно.ОкноС, ТекОкно.ОкноПо, ОжиданиеПосещения) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ОжиданиеПосещения > 0 Тогда 
				КонецПериодаПроверка = СложитьВремя1СЧЧММ(КонецПериодаПосещения, ОжиданиеПосещения);
			Иначе 
				КонецПериодаПроверка = КонецПериодаПосещения;
			КонецЕсли;
			
			Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(КонецПериодаПроверка, ТекОкно.ОкноС, ТекОкно.ОкноПо) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПодходящееОкно = ТекОкно;
			Прервать;
		КонецЦикла;
		
		Если ПодходящееОкно = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если ОжиданиеПосещения > 0 Тогда 
			НачалоПериодаПосещения = СложитьВремя1СЧЧММ(НачалоПериодаПосещения, ОжиданиеПосещения);
			КонецПериодаПосещения  = СложитьВремя1СЧЧММ(КонецПериодаПосещения, ОжиданиеПосещения);
		КонецЕсли;
		
		ТекТерминал            = ПодходящееОкно.Терминал;
		ТекТерминалОкноС       = ПодходящееОкно.ОкноС;
		ТекТерминалОкноПо      = ПодходящееОкно.ОкноПо;
		ТекТерминалПосещениеС  = '00010101000000' + (НачалоПериодаПосещения - НачалоДня(НачалоПериодаПосещения));
		ТекТерминалПосещениеПо = '00010101000000' + (КонецПериодаПосещения - НачалоДня(КонецПериодаПосещения));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОпределитьТерминалПогрузкиИОкно()

Процедура ЗафиксироватьТерминалПогрузкиИОкно(УчитыватьОкноПогрузкиТерминалов, ТерминалыПогрузки, СтарыйТерминал, СтарыйТерминалПосещениеС, 
		СтарыйТерминалПосещениеПо, НовыйТерминал, НовыйТерминалОкноС, НовыйТерминалОкноПо, НовыйТерминалПосещениеС, НовыйТерминалПосещениеПо,
		СтарыйТерминал2=Неопределено, СтарыйТерминалПосещениеС2=Неопределено, СтарыйТерминалПосещениеПо2=Неопределено)
	
	Если Не УчитыватьОкноПогрузкиТерминалов Тогда 
		Возврат;
	КонецЕсли;
	
	Если НовыйТерминал = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не СтарыйТерминал = Неопределено Тогда 
		ВосстановитьОкноТерминала(ТерминалыПогрузки.ДоступныеОкна, СтарыйТерминал, СтарыйТерминалПосещениеС, СтарыйТерминалПосещениеПо);
	КонецЕсли;
	
	Если Не СтарыйТерминал2 = Неопределено Тогда 
		ВосстановитьОкноТерминала(ТерминалыПогрузки.ДоступныеОкна, СтарыйТерминал2, СтарыйТерминалПосещениеС2, СтарыйТерминалПосещениеПо2);
	КонецЕсли;
	
	ТерминалыПогрузки.ДоступныеОкна.Сортировать("ОкноС, ОкноПо");
	
	СтрокаОкнаТерминала = Неопределено;
	Для Каждого ТекСтрока Из ТерминалыПогрузки.ДоступныеОкна Цикл 
		Если ТекСтрока.Терминал = НовыйТерминал И ТекСтрока.ОкноС = НовыйТерминалОкноС И ТекСтрока.ОкноПо = НовыйТерминалОкноПо Тогда 
			СтрокаОкнаТерминала = ТекСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыйТерминалОкноС = НовыйТерминалПосещениеС И НовыйТерминалОкноПо = НовыйТерминалПосещениеПо Тогда 
		ТерминалыПогрузки.ДоступныеОкна.Удалить(СтрокаОкнаТерминала);
		
	ИначеЕсли НовыйТерминалОкноС = НовыйТерминалПосещениеС Тогда 
		СтрокаОкнаТерминала.ОкноС = НовыйТерминалПосещениеПо;
		
	ИначеЕсли НовыйТерминалОкноПо = НовыйТерминалПосещениеПо Тогда 
		СтрокаОкнаТерминала.ОкноПо = НовыйТерминалПосещениеС;
		
	Иначе 
		СтрокаОкнаТерминала.ОкноПо = НовыйТерминалПосещениеС;
		
		НовСтрока = ТерминалыПогрузки.ДоступныеОкна.Добавить();
		НовСтрока.Терминал = НовыйТерминал;
		НовСтрока.ОкноС    = НовыйТерминалПосещениеПо;
		НовСтрока.ОкноПо   = НовыйТерминалОкноПо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьОкноТерминала(ДоступныеОкна, ТекТерминал, ТекТерминалОкноС, ТекТерминалОкноПо)
	
	Если ТекТерминал = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НайдСтроки = ДоступныеОкна.НайтиСтроки(Новый Структура("Терминал", ТекТерминал));
	
	Если НайдСтроки.Количество() = 0 Тогда 
		// Вариант 1: такого терминала нет.
		НовСтрока = ДоступныеОкна.Добавить();
		НовСтрока.Терминал = ТекТерминал;
		НовСтрока.ОкноС    = ТекТерминалОкноС;
		НовСтрока.ОкноПо   = ТекТерминалОкноПо;
		
		Возврат;
	КонецЕсли;
	
	ЛевЭлемент  = Неопределено;
	ПравЭлемент = Неопределено;
	Для Каждого ТекНайдСтрока Из НайдСтроки Цикл 
		Если ТекНайдСтрока.ОкноПо = ТекТерминалОкноС Тогда 
			ЛевЭлемент = ТекНайдСтрока;
		КонецЕсли;
		
		Если ТекНайдСтрока.ОкноС = ТекТерминалОкноПо Тогда 
			ПравЭлемент = ТекНайдСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Если ЛевЭлемент = Неопределено И ПравЭлемент = Неопределено Тогда 
		// Вариант 2: текТерминал ни с чем не "склеивается".
		НовСтрока = ДоступныеОкна.Добавить();
		НовСтрока.Терминал = ТекТерминал;
		НовСтрока.ОкноС    = ТекТерминалОкноС;
		НовСтрока.ОкноПо   = ТекТерминалОкноПо;
		
	ИначеЕсли ЛевЭлемент = Неопределено Тогда 
		// Вариант 3: добавление текТерминала к началу существующего.
		ПравЭлемент.ОкноС = ТекТерминалОкноС;
		
	ИначеЕсли ПравЭлемент = Неопределено Тогда 
		// Вариант 4: добавление текТерминала к концу существующего.
		ЛевЭлемент.ОкноПо = ТекТерминалОкноПо;
		
	Иначе 
		// Вариант 5: текТерминал объединяет 2 существующих элемента.
		ЛевЭлемент.ОкноПо = ПравЭлемент.ОкноПо;
		ДоступныеОкна.Удалить(ПравЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Запись журнала окна
//
// Параметры:
//  ЗаказСсылка			 - 	Номер заказа 
//  врТекВремяВТочке	 - 	Время прибытия в пункт
//  НачалоОкна			 - 	Начало окна по заказу
//  ОкончаниеОкна		 - 	Окончания окна по заказу
//  ОжиданиеПред		 - 	Ожидание до сдвига
//  ОжиданиеНов	 		 - 	Ожидание после сдвига
//  ТСПулА				 - 	ТС пула А 
//  ТСПулБ				 - 	ТС пула Б
//  IDстр				 - 	Идентификатор строки 
//
Процедура ЗаписьЖурналаОкна(ЗаказСсылка, врТекВремяВТочке, НачалоОкна, ОкончаниеОкна, ОжиданиеПред=0, ОжиданиеНов=0, ТСПулА="", ТСПулБ="", IDстр)
	//Стр = Строка(ЗаказСсылка) + "; ПулА:" + ТСПулА + "; ПулБ:" + ТСПулБ + ";" + "ID:" + IDстр + Символы.ПС 
	//+  "время в тек.точке:" + врТекВремяВТочке + "; окно с: " + НачалоОкна + "; окно по: " + ОкончаниеОкна + "; ожид.пред.: "+ ОжиданиеПред  + "; ожид.нов: "+ ОжиданиеНов;
	//ЗаписьЖурналаРегистрации("Маршрутизация",,,,Стр);
КонецПроцедуры // ЗаписьЖурналаОкна()

Функция НаименованиеАлгоритма(НастройкаАлгоритмМаршрутизации)
	
	Если НастройкаАлгоритмМаршрутизации = 0 Тогда
		Возврат "Очередей";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 1 Тогда
		Возврат "КларкРайт";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 3 Тогда
		Возврат "Яндекс";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 4 Тогда
		Возврат "RarusVRP";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 5 Тогда
		Возврат "ФиксМаршруты";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Процедура ВосстановитьНастройкиОтборовЗон(КоллекцияХранимыхОтборов, КоллекцияНовыхОтборов)
	
	Для Каждого ТекУзел Из КоллекцияХранимыхОтборов Цикл 
		НовУзел = КоллекцияНовыхОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(НовУзел, ТекУзел);
		ВосстановитьНастройкиОтборовЗон(ТекУзел.Строки, НовУзел.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
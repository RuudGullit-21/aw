
#Область Переменные_Формы

&НаКлиенте
Перем РежимУказанияАдреса Экспорт; // 0 - выбор груза, 1 - указание адреса в дереве заказов, 2 - указание адреса в дереве маршрутов.
&НаКлиенте
Перем ЗакрытьФорму;
&НаКлиенте          
Перем ФормаДлительнойОперации;
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперации;
&НаКлиенте
Перем ВремяНачалаМаршрутизации;
&НаКлиенте
Перем ИмяИсточникаПеретаскиванияВМаршруты;
&НаКлиенте
Перем СтруктураПолейЭтапаМаршрутизации; // Реквизиты справочника "Этапы маршрутизации" выбранные пользователем.
&НаКлиенте
Перем ОтмеченныеЗаказы; // Соответствие отмеченных заказов в тч "ЗаказыСписок".
&НаКлиенте
Перем ИсточникВыделенияНаКарте;
&НаКлиенте
Перем МассивРаспределенныхЗаказов;
&НаКлиенте
Перем ТекВремяСтроки;
&НаКлиенте
Перем мБуфСтрока;
&НаКлиенте
Перем ФормаКарты;
&НаКлиенте
Перем ФормаПланировщика;
&НаКлиенте
Перем МассивЗаказовДляПерезаписи;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизатор;
&НаКлиенте
Перем ПометкаНаУдаление;
&НаКлиенте
Перем ЗаказыДляМаршрутизации;
&НаКлиенте
Перем ЗаказДляФокусировки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// Конец блока стандартных операций
	
	// Необходимо для открытия предупреждения при запуске в варианте поставки ПРОФ
	// если продолжить создание формы - возникнет ошибка при обращении к защ.обработке.
	Если ДопПараметрыОткрытие.ОшибкаВариантаПоставки Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	// Конец ПодключаемоеОборудование

	УстановитьПервоначальныеЗначенияПеременныхСервер();
	уатАРМ.УстановитьОграниченияИспользованияВОтбореЗаказыСписок(ЭтотОбъект);
	
	ЗаполнитьСписокТСПриСозданииНаСервере();
	УстановитьВидимостьПанелейРежимаОтображенияМЛ();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец блока стандартных операций
	
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УстановитьПервоначальныеЗначенияПеременныхКлиент();
	УстановитьВидимостьДоступность();
	ЗаказыСписокОбновитьПорядок();
	
	Если НастройкаПриОткрытииЗаполнятьСпискомТС Тогда
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	КонецЕсли;
	
	Если ОтображатьЭлектронныеКартыПриОткрытии Тогда 
		ИнициализацияКарты();
		ПодключитьОбработчикОжидания("ОбновитьКартуПослеОткрытияАРМЛогиста", 1, Истина);
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		
		#Если ВебКлиент Тогда
			ТекстОшибки = НСтр("ru='Для работы с ТС установите стандартные настройки формы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		#КонецЕсли
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ
		НЕ Модифицированность Тогда 
		ЗакрытьФорму = Истина;
		Возврат;
		
	ИначеЕсли ЗакрытьФорму = Неопределено
		ИЛИ ЗакрытьФорму = Ложь Тогда 
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ПередЗакрытиемПослеПодтверждения", ЭтотОбъект);
		ТекстВопроса = НСтр("en='AWP Logistician will be closed. Continue?';ru='АРМ Логиста будет закрыт. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ФормаДлительнойОперации           = Неопределено;
	ПараметрыОбработчикаОжидания      = Неопределено;
	ОповещениеПослеДлительнойОперации = Неопределено;
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов Тогда 
		ФлагОбновлениеСпискаЗаказов = Истина;
		Если ИмяСобытия = "Изменен маршрутный лист" 
				Или ИмяСобытия = "Изменено закрытие заказов на ТС"
				Или ИмяСобытия = "Изменен ремонтный лист"
				Или ИмяСобытия = "Изменена диспозиция ТС" Тогда 
			ОбновитьЗаказы(Неопределено);
			ОбновитьДанныеПоСтоянкамСервер();
			ОбновитьДеревоМаршрутовНаКлиенте();
			
			Если НастройкаРежимОтображенияМЛ = 1 
				И ИмяСобытия = "Изменен маршрутный лист"  Тогда
				МЛ            = Параметр;
				СтрокаМЛ = МаршрутыСписок.НайтиСтроки(Новый Структура("МЛ", МЛ));
				Если СтрокаМЛ.Количество() <> 0 Тогда
					МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаМЛ[0], Истина);
				КонецЕсли;
			КонецЕсли;
		
			ОтобразитьДанныеНаКарте_МЛисты();
			
		ИначеЕсли ИмяСобытия = "Изменен заказ грузоотправителя" Тогда
			ОбновитьЗаказы(Неопределено);
			ОбновитьДеревоМаршрутовНаКлиенте();   
			Подключаемый_ОтобразитьДанныеНаКарте_Заказы();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЭлектронныеКарты_ОбработчикАвтообновления" Тогда
		ОтобразитьДанныеНаКартеOSM();
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_АктивизацияСтрокиТС" Тогда
		GUIDТС  = Параметр.GUIDТС;
		GUIDМЛ  = Параметр.GUIDМЛ;
		
		GUIDМЛПодбора = GUIDМЛ;
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			
			СтрокаТС = Неопределено;
			Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаТС.GUID = GUIDТС Тогда 
					СтрокаТС = ТекСтрокаТС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаТС = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			ТССсылка = СтрокаТС.ТС;
			
			СтрокаМЛ = Неопределено;
			Для Каждого ТекСтрокаМЛ Из СтрокаТС.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаМЛ.GUID = GUIDМЛ Тогда 
					СтрокаМЛ = ТекСтрокаМЛ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаТС.ПолучитьЭлементы().Количество() = 0 Тогда 
				СтрокаМЛ = СтрокаТС;
			КонецЕсли;
			Если СтрокаМЛ = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Элементы.МаршрутыДерево.ТекущаяСтрока = СтрокаМЛ.ПолучитьИдентификатор();
			МаршрутыДеревоПриАктивизацииСтроки(Неопределено);
		Иначе
			СтрокаТСПриемник = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", GUIDТС));
			Если СтрокаТСПриемник.Количество() = 0 Тогда
				Возврат;
			КОнецЕсли;
			ТССсылка = СтрокаТСПриемник[0].ТС;
			
			ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено
				ИЛИ (ТекущиеДанные <> Неопределено
				И ТекущиеДанные.GUID <> GUIDТС) Тогда
				Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТСПриемник[0].ПолучитьИдентификатор();
				МаршрутыСписокПриАктивизацииСтрокиКлиент();
			КОнецЕсли;

		КонецЕсли;
		
		Если Параметр.ПерестроениеМЛ Тогда
			Оповестить("АРМЛогиста_АктивизацияСтрокиТС",
				Новый Структура("ТС, GUID", ТССсылка, GUIDМЛ), ЭтотОбъект);
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте_МЛ", 0.1, Истина);

	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_МаршрутыПереместитьВверх"
		ИЛИ ИмяСобытия = "ЭлектронныеКарты_МаршрутыПереместитьВниз"
		ИЛИ ИмяСобытия = "ЭлектронныеКарты_МаршрутыУдалитьЗаказ"
		ИЛИ ИмяСобытия = "ЭлектронныеКарты_ОптимальноеПерестроениеЗаказов" Тогда
		GUIDПункта = Параметр.GUIDПункта;
		GUIDЗаказа = Параметр.GUIDЗаказа;
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			
			ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
			ТССсылка    = ТекущиеДанные.ТС;
		Иначе
			ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТССсылка = ТекущиеДанные.ТС;
			
			ТекущиеДанные = МаршрутыСписокЗаказовДерево;
		КонецЕсли;
			
		СтрокаПункт = Неопределено;
		Для Каждого ТекСтрокаПункт Из ТекущиеДанные.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаПункт.GUIDПункта = GUIDПункта Тогда 
				СтрокаПункт = ТекСтрокаПункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПункт = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ТекСтрока = СтрокаПункт;
		
		Если ЗначениеЗаполнено(GUIDЗаказа) Тогда
			СтрокаЗаказ = Неопределено;
			Для Каждого ТекСтрокаЗаказ Из СтрокаПункт.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаЗаказ.GUIDЗаказа = GUIDЗаказа Тогда 
					СтрокаЗаказ = ТекСтрокаЗаказ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаЗаказ = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			ТекСтрока = СтрокаЗаказ;
		КонецЕсли;
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Элементы.МаршрутыДерево.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
			МаршрутыДеревоПриАктивизацииСтроки(Неопределено);
		Иначе
			Элементы.МаршрутыСписокЗаказовДерево.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		Если ИмяСобытия = "ЭлектронныеКарты_МаршрутыПереместитьВверх" Тогда
			МаршрутыПереместитьВверх(Неопределено);
		ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_МаршрутыПереместитьВниз" Тогда
			МаршрутыПереместитьВниз(Неопределено);
		ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_МаршрутыУдалитьЗаказ" Тогда
			МассивЗаказов = Новый Массив();
			Если ЗначениеЗаполнено(ТекСтрока.Этап) Тогда 
				МассивЗаказов.Добавить(ТекСтрока.Этап);
			Иначе  
				МассивЗаказов = Новый Массив();
				Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл 
					МассивЗаказов.Добавить(ТекСтрокаЗаказ.Этап);
				КонецЦикла; 
			КонецЕсли;

			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				МаршрутыДеревоПередУдалением(Неопределено, Истина);
			Иначе
				МаршрутыДеревоПередУдалениемЗавершение();
			КонецЕсли;  
			ОтобразитьДанныеНаКарте_Заказ(МассивЗаказов);
		ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_ОптимальноеПерестроениеЗаказов" Тогда
			ОптимальноеПерестроениеЗаказов(Неопределено);
		КонецЕсли;
		
		Если НастройкаРежимОтображенияМЛ = 0 
			И ТекРодитель <> Неопределено Тогда
			Элементы.МаршрутыДерево.ТекущаяСтрока = ТекРодитель.ПолучитьИдентификатор();
			МаршрутыДеревоПриАктивизацииСтроки(Неопределено);
		КонецЕсли;
		Оповестить("АРМЛогиста_АктивизацияСтрокиТС",, ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_МаршрутыПеретаскивание" Тогда
		GUIDПунктаИсточник = Параметр.GUIDПунктаИсточник;
		GUIDЗаказаИсточник = Параметр.GUIDЗаказаИсточник;
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			
			ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
			ТССсылка    = ТекущиеДанные.ТС;
		Иначе
			ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТССсылка = ТекущиеДанные.ТС;
			
			ТекущиеДанные = МаршрутыСписокЗаказовДерево;
		КонецЕсли;
		
		СтрокаПункт = Неопределено;
		Для Каждого ТекСтрокаПункт Из ТекущиеДанные.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаПункт.GUIDПункта = GUIDПунктаИсточник Тогда 
				СтрокаПункт = ТекСтрокаПункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПункт = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ТекСтрока = СтрокаПункт;
		
		Если ЗначениеЗаполнено(GUIDЗаказаИсточник) Тогда
			СтрокаЗаказ = Неопределено;
			Для Каждого ТекСтрокаЗаказ Из СтрокаПункт.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаЗаказ.GUIDЗаказа = GUIDЗаказаИсточник Тогда 
					СтрокаЗаказ = ТекСтрокаЗаказ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаЗаказ = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			ТекСтрока = СтрокаЗаказ;
		КонецЕсли;
		
		GUIDПунктаПриемник = Параметр.GUIDПунктаПриемник;
		GUIDЗаказаПриемник = Параметр.GUIDЗаказаПриемник;
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			
			ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
			ТССсылка    = ТекущиеДанные.ТС;
		Иначе
			ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТССсылка = ТекущиеДанные.ТС;
			
			ТекущиеДанные = МаршрутыСписокЗаказовДерево;
		КонецЕсли;
		
		СтрокаПункт = Неопределено;
		Для Каждого ТекСтрокаПункт Из ТекущиеДанные.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаПункт.GUIDПункта = GUIDПунктаПриемник Тогда 
				СтрокаПункт = ТекСтрокаПункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПункт = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ТекСтрокаПриемник = СтрокаПункт;
		
		Если ЗначениеЗаполнено(GUIDЗаказаПриемник) Тогда
			СтрокаЗаказ = Неопределено;
			Для Каждого ТекСтрокаЗаказ Из СтрокаПункт.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаЗаказ.GUIDЗаказа = GUIDЗаказаПриемник Тогда 
					СтрокаЗаказ = ТекСтрокаЗаказ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаЗаказ = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			ТекСтрокаПриемник = СтрокаЗаказ;
		КонецЕсли;

		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Элементы.МаршрутыДерево.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
			МаршрутыДеревоПриАктивизацииСтроки(Неопределено);
		Иначе
			Элементы.МаршрутыСписокЗаказовДерево.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыПеретаскивания = Новый Структура("Действие,Значение,ДопустимыеДействия",
			ДействиеПеретаскивания.Перемещение, ТекСтрока);
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыДерево";
			МаршрутыДеревоПроверкаПеретаскивания(Неопределено, ПараметрыПеретаскивания,
				Ложь, ТекСтрокаПриемник.ПолучитьИдентификатор(), Неопределено);
			МаршрутыДеревоПеретаскивание(Неопределено, ПараметрыПеретаскивания,
				Ложь, ТекСтрокаПриемник.ПолучитьИдентификатор(), Неопределено);
		Иначе
			ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокЗаказовДерево";
			МаршрутыСписокЗаказовДеревоПроверкаПеретаскивания(Неопределено, ПараметрыПеретаскивания,
				Ложь, ТекСтрокаПриемник.ПолучитьИдентификатор(), Неопределено);
			МаршрутыСписокЗаказовДеревоПеретаскивание(Неопределено, ПараметрыПеретаскивания,
				Ложь, ТекСтрокаПриемник.ПолучитьИдентификатор(), Неопределено);
		КонецЕсли;
		Оповестить("АРМЛогиста_АктивизацияСтрокиТС",, ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_МаршрутыДобавитьПункт" Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			МаршрутыДобавитьПунктЗавершение(Параметр, Неопределено);
		Иначе
			МаршрутыДобавитьПунктЗавершениеСписок(Параметр, Неопределено);
		КонецЕсли;
		Оповестить("АРМЛогиста_АктивизацияСтрокиТС",, ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_МаршрутыДобавитьГараж" Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПослеЗакрытияФормыВыбораГаража(Параметр, ТекДанные);
		Иначе
			ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПослеЗакрытияФормыВыбораГаражаСписок(Параметр, ТекДанные);
		КонецЕсли;
		Оповестить("АРМЛогиста_АктивизацияСтрокиТС",, ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_ВыделитьМаршрут" Тогда
		ИсточникВыделенияНаКарте = 2;
		ВыделитьМаршрутНаКарте(Неопределено);
		
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_ЗаписатьМаршруты" Тогда
		СоздатьМаршрутныеЛисты(Неопределено);
		Оповестить("АРМЛогиста_АктивизацияСтрокиТС",, ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_ПодборЗаказов" Тогда
		ПодборЗаказовВАРМИзКарты(Параметр);
		Оповестить("АРМЛогиста_АктивизацияСтрокиТС",
			Новый Структура("ТС, GUID", Параметр.ТС, Параметр.GUID), ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_Закрытие"
		И Параметр = "РежимКарты_АРМЛогиста" Тогда
		ФормаКарты = Неопределено;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_уатЗаказГрузоотправителя" 
		ИЛИ  ИмяСобытия = "Изменен путевой лист" Тогда
		ФлагОбновлениеСпискаЗаказов = Истина;
		Если НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов Тогда
			ОбновитьЗаказы(Неопределено);
			ОбновитьДеревоМаршрутовНаКлиенте();
			Подключаемый_ОтобразитьДанныеНаКарте_Заказы();
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "Обновить маршрутные листы АРМ" Тогда
		МЛ              = Параметр.МЛ;
		ТС              = Параметр.ТС;
		НачалоИнтервала = Параметр.НачалоИнтервала;

		Если НастройкаРежимОтображенияМЛ = 1 Тогда
			СтрокаМЛ = МаршрутыСписок.НайтиСтроки(Новый Структура("МЛ", МЛ));
			Если СтрокаМЛ.Количество() <> 0 Тогда
				Если СтрокаМЛ[0].GUID <> ТС Тогда
					
					СтрокаТСИсточник = СтрокаМЛ[0]; 
					СтрокаТСПриемник = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТС));
					Если СтрокаТСПриемник.Количество() = 0 Тогда
						Возврат;
					КОнецЕсли;
					СтрокаТСПриемник = СтрокаТСПриемник[0];
					
					Пункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", СтрокаТСИсточник.GUID));
					Если Пункты.Количество() Тогда
						РазницаВремени = НачалоИнтервала - Пункты[0].ВремяПрибытияВПункт;  
						Для Каждого ТекСтрокаЗаказ Из Пункты Цикл
							ТекСтрокаЗаказ.ВремяПрибытияВПункт = ТекСтрокаЗаказ.ВремяПрибытияВПункт + РазницаВремени;
							ТекСтрокаЗаказ.УбытиеПлан          = ТекСтрокаЗаказ.УбытиеПлан + РазницаВремени;
						КонецЦикла;
					КонецЕсли;
					
					ПараметрыПеретаскивания = Новый Структура("Значение", СтрокаТСИсточник);
					
					МаршрутыПеретаскиваниеМеждуТССписок(ПараметрыПеретаскивания, СтрокаТСПриемник); // Между ТС.
					ОбновитьХарактеристикиТС(СтрокаТСПриемник);
					МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСИсточник, Истина);
					МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСПриемник, Истина);
				Иначе
					Пункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ТС));
					Если Пункты.Количество() Тогда
						РазницаВремени = НачалоИнтервала - Пункты[0].ВремяПрибытияВПункт;  
						Для Каждого ТекСтрокаЗаказ Из Пункты Цикл
							ТекСтрокаЗаказ.ВремяПрибытияВПункт = ТекСтрокаЗаказ.ВремяПрибытияВПункт + РазницаВремени;
							ТекСтрокаЗаказ.УбытиеПлан          = ТекСтрокаЗаказ.УбытиеПлан + РазницаВремени;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбновитьДеревоМаршрутов(Неопределено);
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяСобытия = "Изменен маршрутный лист из планировщика" Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			ТСПерем  = Параметр.СтрокаТС;
			СтрокаТС = Неопределено;
			Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
				Если (ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") И ТекСтрокаТС.ТС = ТСПерем) Или ТекСтрокаТС.GUID = ТСПерем Тогда 
					СтрокаТС = ТекСтрокаТС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаТС = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			СтрокаМЛ = Неопределено;
			Для Каждого ТекСтрокаМЛ Из СтрокаТС.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаМЛ.Группировка = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка") Тогда 
					СтрокаМЛ = ТекСтрокаМЛ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаМЛ = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Если СтрокаМЛ.ПолучитьЭлементы().Количество() Тогда
				РазницаВремени = Параметр.ДатаНачала - СтрокаМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт;  
				Для Каждого ТекСтрокаЗаказ Из СтрокаМЛ.ПолучитьЭлементы() Цикл
					ТекСтрокаЗаказ.ВремяПрибытияВПункт = ТекСтрокаЗаказ.ВремяПрибытияВПункт + РазницаВремени;
					ТекСтрокаЗаказ.УбытиеПлан          = ТекСтрокаЗаказ.УбытиеПлан + РазницаВремени;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", Параметр.GUID, "Пункт"));
			Если ЭлементыВетка.Количество() <> 0 Тогда
				
				РазницаВремени = Параметр.ДатаНачала - ЭлементыВетка[0].ВремяПрибытияВПункт;  
				Для Каждого ТекСтрокаЗаказ Из ЭлементыВетка Цикл
					ТекСтрокаЗаказ.ВремяПрибытияВПункт = ТекСтрокаЗаказ.ВремяПрибытияВПункт + РазницаВремени;
					ТекСтрокаЗаказ.УбытиеПлан          = ТекСтрокаЗаказ.УбытиеПлан + РазницаВремени;
				КонецЦикла;
				
				ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
				Если ТекущиеДанные = Неопределено Тогда
					Возврат;
				КонецЕсли;
				Если ТекущиеДанные.GUID = Параметр.GUID Тогда
					МаршрутыСписокПриАктивизацииСтроки(Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	//Если Источник = ФормаПланировщика И ИмяСобытия = "ИзменитьРабочуюДатуАРМ" Тогда 
	//	ДатаПланирования = Параметр;
	//	НачальнаяДатаПланирования = Параметр;
	//	УстановитьЗначениеДатаПланированияСпискаЗаказов();
	//	ОбновитьСписокЗаказов();
	//	ОбновитьДеревоМаршрутовНаКлиенте();
	//КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	НачальнаяДатаПланирования = ДатаПланирования;
	УстановитьЗначениеДатаПланированияСпискаЗаказов();
	ОбновитьСписокЗаказов();
	ОбновитьДеревоМаршрутовНаКлиенте();
	ОбновитьДатуПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоличествоДнейДоДатыПланированияПриИзменении(Элемент)
	
	СохранитьНастройки();
	
	УстановитьЗначениеДатаПланированияСпискаЗаказов();
	ОбновитьСписокЗаказов();
	ОбновитьДеревоМаршрутовНаКлиенте();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЗаказыСписок

&НаКлиенте
Процедура ОбновитьКартуПослеОткрытияАРМЛогиста()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ЗаказыСписокИспользование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		КлючСтроки          = Элемент.ТекущаяСтрока;
		ТекущаяСтрокаЗаказа = ОтмеченныеЗаказы.Найти(КлючСтроки);

		Если ТекущаяСтрокаЗаказа = Неопределено Тогда 
			МодифицироватьОтметкуЗаказа(ТекущиеДанные, Истина, КлючСтроки);
		Иначе
			МодифицироватьОтметкуЗаказа(ТекущиеДанные, Ложь, КлючСтроки);
		КонецЕсли;
		
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
		Элементы.ЗаказыСписок.Обновить();
		
		Если ТекущаяСтрокаЗаказа = Неопределено Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте_Заказ", 0.1, Истина); 
		Иначе 
			ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте_Заказ_Удалить", 0.1, Истина); 
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;

		Если Поле = Элементы.ЗаказыСписокАдресНазначения Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).АдресНазначения;
		ИначеЕсли Поле = Элементы.ЗаказыСписокАдресОтправления Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).АдресОтправления;
		ИначеЕсли Поле = Элементы.ЗаказыСписокМаршрут Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).Маршрут;
		ИначеЕсли Поле = Элементы.ЗаказыСписокНаправлениеПеревозки Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).НаправлениеПеревозки;
		ИначеЕсли Поле = Элементы.ЗаказыСписокКонтрагент Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).Контрагент;
		ИначеЕсли Поле = Элементы.ЗаказыСписокГруз Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).Груз;
		ИначеЕсли Поле = Элементы.ЗаказыСписокГрузоотправитель Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).Грузоотправитель;
		ИначеЕсли Поле = Элементы.ЗаказыСписокГрузополучатель Тогда
			ЗначениеПоля = ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока).Грузополучатель;
		Иначе
			ЗначениеПоля = ВыбраннаяСтрока.Ссылка;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, ?(ЗначениеЗаполнено(ЗначениеПоля), ЗначениеПоля, ВыбраннаяСтрока.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаказыСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("ОтмеченныеЗаказы") Тогда
		ОтмеченныеЗаказы = ДополнительныеСвойства.ОтмеченныеЗаказы;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтмеченныеЗаказы) Тогда
		ОтмеченныеЗаказы = Новый Массив();
	КонецЕсли;
	
	КлючиСтрок     = Строки.ПолучитьКлючи();
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Ссылка",				 Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторСтроки",	 Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	
	Для Каждого ТекСтрока Из КлючиСтрок Цикл
		НоваяСтрока = ТаблицаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказов.Ссылка КАК Ссылка,
	               |	ТаблицаЗаказов.ИдентификаторСтроки КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ втЗаказыНаТС
	               |ИЗ
	               |	&ТаблицаЗаказов КАК ТаблицаЗаказов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказыНаТС.Ссылка КАК Ссылка,
	               |	втЗаказыНаТС.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ втСтрокиЗаказов
	               |ИЗ
	               |	втЗаказыНаТС КАК втЗаказыНаТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЗаказыНаТС.Ссылка КАК Ссылка
	               |					ИЗ
	               |						втЗаказыНаТС КАК втЗаказыНаТС)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказыНаТС.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказыНаТС.ИдентификаторСтроки,
	               |	втЗаказыНаТС.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСтрокиЗаказов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	втСтрокиЗаказов.Статус КАК Статус,
	               |	уатСтатусы_уэ.ЦветТекстаПоУмолчанию КАК ЦветТекстаПоУмолчанию,
	               |	уатСтатусы_уэ.ЦветФонаПоУмолчанию КАК ЦветФонаПоУмолчанию,
	               |	уатСтатусы_уэ.Наименование КАК НаименованиеСтатуса,
	               |	втСтрокиЗаказов.Ссылка КАК Ссылка
	               |ИЗ
	               |	втСтрокиЗаказов КАК втСтрокиЗаказов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	               |		ПО втСтрокиЗаказов.Статус = уатСтатусы_уэ.Ссылка";
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
		ВыборкаЗаказ.Ссылка, ВыборкаЗаказ.ИдентификаторСтроки);
		
		СтрокаСписка        = Строки[КлючСтроки];
		
		ДанныеСтрокаСписка  = СтрокаСписка.Данные;
			
		ТекущаяСтрокаЗаказа = ОтмеченныеЗаказы.Найти(КлючСтроки);
		Если ТекущаяСтрокаЗаказа <> Неопределено Тогда 
			ДанныеСтрокаСписка.Использование = 1;
		КонецЕсли;
		
		ДанныеСтрокаСписка.СостояниеВыполненияСтрока = Строка(ДанныеСтрокаСписка.ПроцентВыполнения)
			+ "% " + Нстр("en = 'done'; ru = 'выполнено'");
			
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЗаказ.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЗаказ.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеСтрокаСписка.Статус = ВыборкаЗаказ.Статус;
		
		Попытка
			Если НЕ ЦветТекста = Неопределено Тогда 
				СтрокаСписка.Оформление["Статус"].УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			КонецЕсли;
			Если НЕ ЦветФона = Неопределено Тогда 
				СтрокаСписка.Оформление["Статус"].УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ИмяИсточникаПеретаскиванияВМаршруты = "";
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;

	КлючСтроки          = Элемент.ТекущаяСтрока;
	ТекущаяСтрокаЗаказа = ОтмеченныеЗаказы.Найти(КлючСтроки);
		
	Если ТекущаяСтрокаЗаказа = Неопределено Тогда 
		
		МодифицироватьОтметкуЗаказа(ТекущиеДанные, Истина);
		
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);

	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ИмяИсточникаПеретаскиванияВМаршруты = "";
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПриАктивизацииСтроки(Элемент)
	
	МаршрутыСписокПриАктивизацииСтрокиКлиент();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПриАктивизацииСтрокиКлиент(ТекДанные = Неопределено, флОбновитьСтоянки = Ложь, ЗаказДобавлен = Истина)
	
	МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ВыделитьТСНаПланировщике(ТекДанные.GUID);
		УстановитьПометкуРежимПересчетаВремени();
		
	КонецЕсли;

	Элементы.ПометитьНаУдаление.Доступность = ЗначениеЗаполнено(ТекДанные.МЛ) ИЛИ ТекДанные.НовыйМЛ;
	
	Если (МаршрутыСписокЗаказов.Количество() = 0
		И (ЗначениеЗаполнено(ТекДанные.МЛ) ИЛИ ТекДанные.НовыйМЛ))
		ИЛИ (МаршрутыСписокЗаказов.Количество() <> 0
		И МаршрутыСписокЗаказов[0].GUIDТС <> ТекДанные.GUID) Тогда
		флОбновитьСтоянки = Истина;
		ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекДанные.АдресВременногоХранилища, ТекДанные.GUID);
	КонецЕсли;

	ДатаИВремяОтправленияПлан                  = ТекДанные.ДатаИВремяОтправленияПлан;
	СпособПересчетаПлановогоВремениПоУмолчанию = ТекДанные.ПересчетВремени;
	
	ОбновитьДеревоТекущегоМаршрута(ТекДанные.GUID);
	
	Если ЗаказДобавлен Тогда
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные);
	КонецЕсли;

	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекДанные, Истина, НЕ флОбновитьСтоянки);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекДанные);
	Если флОбновитьСтоянки Тогда
		ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекДанные);
	КонецЕсли;
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекДанные);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекДанные);
	ОбновитьДанныеТекущегоМаршрута(ТекДанные);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные, Ложь);
	СвернутьВсеМаршруты(Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПолучитьИзВременногоХранилищаТаблицуМаршрутов(АдресВременногоХранилища = "", GUIDТекТС = "")
	
	СохранитьВоВременноеХранилищеТаблицуМаршрутов(GUIDТекТС);
	
	МаршрутыСписокЗаказов.Очистить();
	Если НЕ ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаМаршрутов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для Каждого ТекСтрока Из ТаблицаМаршрутов Цикл
		НоваяСтрока = МаршрутыСписокЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВременногоХранилищаДляМЛ()
	
	ТаблицаМаршрутыСписокЗаказов = Новый Массив();
	СтруктураСтроки = ПолучитьСтруктуруСтрокиТаблицыМаршрутов();
	
	Для Каждого ТекСтрока Из МаршрутыСписокЗаказов Цикл
		ТекСтрокаСтруктура = Новый Структура(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекСтрокаСтруктура, ТекСтрока);
		ТаблицаМаршрутыСписокЗаказов.Добавить(ТекСтрокаСтруктура);
	КонецЦикла;
	
	МаршрутыСписокЗаказов.Очистить();
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаМаршрутыСписокЗаказов, Новый УникальныйИдентификатор);
	Возврат АдресВременногоХранилища;
	
КонецФункции

&НаСервере
Процедура СохранитьВоВременноеХранилищеТаблицуМаршрутов(GUIDТекТС = "")
	
	Если МаршрутыСписокЗаказов.Количество() <> 0 Тогда
		GUIDТС = МаршрутыСписокЗаказов[0].GUIDТС;
		
		ПредТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", GUIDТС));
		Если ПредТС.Количество() <> 0 Тогда
			
			ТаблицаМаршрутыСписокЗаказов = Новый Массив();
			СтруктураСтроки = ПолучитьСтруктуруСтрокиТаблицыМаршрутов();
	
			Для Каждого ТекСтрока Из МаршрутыСписокЗаказов Цикл
				Если GUIDТС <> ТекСтрока.GUIDТС Тогда
					ПредТС = ПредТС[0];
					ПредТС.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаМаршрутыСписокЗаказов, Новый УникальныйИдентификатор);
					
					ТаблицаМаршрутыСписокЗаказов = Новый Массив();
					GUIDТС = ТекСтрока.GUIDТС;
					ПредТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТекСтрока.GUIDТС));
					
					ТекСтрокаСтруктура = Новый Структура(СтруктураСтроки);
					ЗаполнитьЗначенияСвойств(ТекСтрокаСтруктура, ТекСтрока);
					ТаблицаМаршрутыСписокЗаказов.Добавить(ТекСтрокаСтруктура);
					Продолжить;
				КонецЕсли;
				ТекСтрокаСтруктура = Новый Структура(СтруктураСтроки);
				ЗаполнитьЗначенияСвойств(ТекСтрокаСтруктура, ТекСтрока);
				ТаблицаМаршрутыСписокЗаказов.Добавить(ТекСтрокаСтруктура);
			КонецЦикла;

			ПредТС = ПредТС[0];
			ПредТС.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаМаршрутыСписокЗаказов, Новый УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли МаршрутыСписокЗаказов.Количество() = 0
		И ЗначениеЗаполнено(GUIDТекТС) Тогда
		//ПредТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", GUIDТекТС));
		//Если ПредТС.Количество() <> 0 Тогда
		//	ПредТС[0].АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый Массив(), Новый УникальныйИдентификатор);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруСтрокиТаблицыМаршрутов()
	
	СтруктураСтроки = "GUID,GUIDТС,GUIDПункта,GUIDЗаказа,ЗаказЗаписан,МЛДляЗаписи,Адрес,Группировка,Лат,
	|Лон,УровеньДерева,Расстояние,ВремяВПути,ВремяПрибытияВПункт,Ожидание,МаршрутныйЛистЗаписан,
	|СтоянкаИзПункта,Операция,Этап,Стоянка,Количество,Контрагент,Грузоотправитель,Грузополучатель,
	|Терминал,ДетализацияЗакрытия,ЦветДокумента,Номер,FTL,ОкноС,ОкноПо,ВесБрутто,Объем,
	|КолМест,ВесТары,Группа,Паллета,Размещение,УбытиеПлан,ЕдиницаИзмерения,Количество,Контрагент,
	|НомерСтроки,СтоянкиНеИспользуются,Код,Маршрут";
	Возврат СтруктураСтроки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_МаршрутыДерево

&НаКлиенте
Процедура МаршрутыДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МаршрутыГруппировка Тогда
		
		Если Элемент.ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
	
		СтандартнаяОбработка = Ложь;
		
		ЭлементЭтап        = Элемент.ТекущиеДанные.Этап;
		ЭлементГруппировка = Элемент.ТекущиеДанные.Группировка;
		Если ЗначениеЗаполнено(ЭлементГруппировка)
			И (ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.уатТС")
			ИЛИ ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.уатПунктыНазначения")
			ИЛИ ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.Номенклатура") 
			ИЛИ ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")
			ИЛИ ТипЗнч(ЭлементГруппировка) = Тип("ДокументСсылка.уатМаршрутныйЛист")) Тогда
			ПоказатьЗначение(Неопределено, ЭлементГруппировка);
		ИначеЕсли ТипЗнч(ЭлементЭтап) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ПоказатьЗначение(Неопределено, ЭлементЭтап);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.МаршрутыСписокПрицеп1
		ИЛИ Поле = Элементы.МаршрутыСписокПрицеп2 Тогда
		СтандартнаяОбработка = Истина;
	ИначеЕсли Поле = Элементы.МаршрутыСписокМЛ Тогда
		
		МЛ = Элемент.ТекущиеДанные.МЛ;
		Если ЗначениеЗаполнено(МЛ)
			И ТипЗнч(МЛ) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ПоказатьЗначение(Неопределено, МЛ);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.МаршрутыСписокТС Тогда
		
		ТС = Элемент.ТекущиеДанные.ТС;
		Если ЗначениеЗаполнено(ТС)
			И ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
			ПоказатьЗначение(Неопределено, ТС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МаршрутыСписокЗаказовДеревоПунктЗаказНоменклатура Тогда
		
		Если Элемент.ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ЭлементГруппировка = Элемент.ТекущиеДанные.Группировка;
		ЭлементЭтап        = Элемент.ТекущиеДанные.Этап;
		Если ЗначениеЗаполнено(ЭлементГруппировка)
			И (ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.уатПунктыНазначения")
			ИЛИ ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.Номенклатура") 
			ИЛИ ТипЗнч(ЭлементГруппировка) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")) Тогда
			ПоказатьЗначение(Неопределено, ЭлементГруппировка);
		ИначеЕсли ТипЗнч(ЭлементЭтап) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ПоказатьЗначение(Неопределено, ЭлементЭтап);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыДерево";
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Число") Тогда		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаИдентификатор, Поле)
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	
	Если Не (ТипЗнч(СтрокаИсточник) = Тип("ДанныеФормыЭлементДерева") 
			ИЛИ Не СтрокаИдентификатор = Неопределено ИЛИ ТипЗнч(СтрокаИсточник) = Тип("Массив")) Тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат; 
	КонецЕсли;
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		СтрокаДерева = Неопределено;
	Иначе 
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			СтрокаДерева = МаршрутыДерево.НайтиПоИдентификатору(СтрокаИдентификатор);
		Иначе
			СтрокаДерева = МаршрутыСписок.НайтиПоИдентификатору(СтрокаИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева = Неопределено 
		ИЛИ СтрокаИсточник = Неопределено Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыДерево" Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок" Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;

	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписок" Тогда
		Если ТипЗнч(СтрокаИсточник) = Тип("Массив") 
			И СтрокаИсточник.Количество() = 1 Тогда
			СтрокаИсточник = МаршрутыСписок.НайтиПоИдентификатору(СтрокаИсточник[0]);
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(СтрокаИсточник.МЛ)
			ИЛИ СтрокаИсточник.НовыйМЛ) Тогда
			СтандартнаяОбработка             = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыДерево" Тогда
		
		Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
			СтрокаИсточник = МаршрутыДерево.НайтиПоИдентификатору(СтрокаИсточник);
		КонецЕсли;
		
		Если СтрокаИсточник.ПолучитьРодителя() = Неопределено Тогда // Тянем ТС.
			Если СтрокаДерева.ПолучитьРодителя() <> Неопределено Тогда // ТС можно тянуть только на ТС.
				СтандартнаяОбработка             = Ложь;
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТСИсточник = СтрокаИсточник;
		Пока СтрокаТСИсточник.ПолучитьРодителя() <> Неопределено Цикл
			СтрокаТСИсточник = СтрокаТСИсточник.ПолучитьРодителя();
		КонецЦикла;
		
		СтрокаТСПриемник = СтрокаДерева;
		Пока СтрокаТСПриемник.ПолучитьРодителя() <> Неопределено цикл
			СтрокаТСПриемник = СтрокаТСПриемник.ПолучитьРодителя();
		КонецЦикла;
		
		СтрокаМЛИсточник = СтрокаИсточник;
		Если СтрокаМЛИсточник.ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		ИначеЕсли СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		Иначе 
			Пока СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаМЛИсточник = СтрокаМЛИсточник.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		СтрокаМЛПриемник = СтрокаДерева;
		Если СтрокаМЛПриемник.ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛПриемник = Неопределено;
			
		ИначеЕсли СтрокаМЛПриемник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛПриемник = Неопределено;
			
		Иначе 
			Пока СтрокаМЛПриемник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаМЛПриемник = СтрокаМЛПриемник.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаТСИсточник = СтрокаТСПриемник Тогда
			// Перетаскиваем внутри ТС. Разрешено только в пределах одного МЛ.
			Если Не СтрокаМЛИсточник = Неопределено И Не СтрокаМЛПриемник = Неопределено И СтрокаМЛИсточник = СтрокаМЛПриемник Тогда 
				СтрокаПунктПриемник = СтрокаДерева;
				Пока Не СтрокаПунктПриемник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
					СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
				КонецЦикла;
				СтрокаПунктИсточник = СтрокаИсточник;
				Пока Не СтрокаПунктИсточник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
					СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
				КонецЦикла;
				
				Если СтрокаПунктИсточник = СтрокаПунктПриемник Тогда
					СтандартнаяОбработка             = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					Возврат;
				КонецЕсли;
				
				ПеретаскиваниеВозможно = Истина;
				
				Если СтрокаИсточник.ПолучитьРодителя() = СтрокаМЛИсточник И СтрокаИсточник.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаЗаказ Из СтрокаИсточник.ПолучитьЭлементы() Цикл
						Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(ТекСтрокаНоменклатура,СтрокаДерева,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
								ПеретаскиваниеВозможно = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ПеретаскиваниеВозможно Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли СтрокаИсточник.ПолучитьРодителя() = СтрокаМЛИсточник И Не СтрокаИсточник.ПолучитьЭлементы().Количество() Тогда
					// просто пункт
				ИначеЕсли СтрокаИсточник.УровеньДерева = "Заказ" Тогда
					Для Каждого ТекСтрокаНоменклатура Из СтрокаИсточник.ПолучитьЭлементы() Цикл
						Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(ТекСтрокаНоменклатура,СтрокаДерева,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
							ПеретаскиваниеВозможно = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли СтрокаИсточник.УровеньДерева = "Номенклатура"  Тогда
					ПеретаскиваниеВозможно = ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(СтрокаИсточник, СтрокаДерева, СтрокаПунктИсточник, СтрокаПунктПриемник);
				КонецЕсли;
				
				Если ПеретаскиваниеВозможно Тогда 
					СтандартнаяОбработка             = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
					Возврат;
					
				Иначе 
					СтандартнаяОбработка             = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					Возврат;
				КонецЕсли;
				
			Иначе 
				СтандартнаяОбработка             = Ложь;
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокЗаказовДерево" Тогда
		
		Если ТипЗнч(СтрокаИсточник) = Тип("Массив") 
			И СтрокаИсточник.Количество() <> 0 Тогда
			СтрокаИсточник = СтрокаИсточник[0];
		КонецЕсли;
		СтрокаТСИсточник = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", СтрокаИсточник.GUIDТС))[0];

		СтрокаТСПриемник = СтрокаДерева;
		
		СтрокаМЛИсточник = СтрокаИсточник;
		Если СтрокаМЛИсточник.ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		ИначеЕсли СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		Иначе 
			Пока СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаМЛИсточник = СтрокаМЛИсточник.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		СтрокаМЛПриемник = СтрокаДерева;
		
		Если СтрокаТСИсточник = СтрокаТСПриемник Тогда
			// Перетаскиваем внутри ТС. Разрешено только в пределах одного МЛ.
			Если Не СтрокаМЛИсточник = Неопределено И Не СтрокаМЛПриемник = Неопределено И СтрокаМЛИсточник = СтрокаМЛПриемник Тогда 
				СтрокаПунктПриемник = СтрокаДерева;
				Пока Не СтрокаПунктПриемник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
					СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
				КонецЦикла;
				СтрокаПунктИсточник = СтрокаИсточник;
				Пока Не СтрокаПунктИсточник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
					СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
				КонецЦикла;
				
				Если СтрокаПунктИсточник = СтрокаПунктПриемник Тогда
					СтандартнаяОбработка             = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					Возврат;
				КонецЕсли;
				
				ПеретаскиваниеВозможно = Истина;
				
				Если СтрокаИсточник.ПолучитьРодителя() = СтрокаМЛИсточник И СтрокаИсточник.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаЗаказ Из СтрокаИсточник.ПолучитьЭлементы() Цикл
						Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(ТекСтрокаНоменклатура,СтрокаДерева,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
								ПеретаскиваниеВозможно = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ПеретаскиваниеВозможно Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли СтрокаИсточник.ПолучитьРодителя() = СтрокаМЛИсточник И Не СтрокаИсточник.ПолучитьЭлементы().Количество() Тогда
					// просто пункт
				ИначеЕсли СтрокаИсточник.УровеньДерева = "Заказ" Тогда
					Для Каждого ТекСтрокаНоменклатура Из СтрокаИсточник.ПолучитьЭлементы() Цикл
						Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(ТекСтрокаНоменклатура,СтрокаДерева,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
							ПеретаскиваниеВозможно = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли СтрокаИсточник.УровеньДерева = "Номенклатура"  Тогда
					ПеретаскиваниеВозможно = ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(СтрокаИсточник, СтрокаДерева, СтрокаПунктИсточник, СтрокаПунктПриемник);
				КонецЕсли;
				
				Если ПеретаскиваниеВозможно Тогда 
					СтандартнаяОбработка             = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
					Возврат;
					
				Иначе 
					СтандартнаяОбработка             = Ложь;
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					Возврат;
				КонецЕсли;
				
			Иначе 
				СтандартнаяОбработка             = Ложь;
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		

	Иначе
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаИдентификатор, Поле)
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		СтрокаИсточник = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(СтрокаИсточник);
	КонецЕсли;
	
	Если НЕ (ТипЗнч(СтрокаИсточник) = Тип("ДанныеФормыЭлементДерева") 
			ИЛИ НЕ СтрокаИдентификатор = Неопределено
			ИЛИ ТипЗнч(СтрокаИсточник) = Тип("Массив")) Тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат; 
	КонецЕсли;
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		СтрокаДерева = Неопределено;
	Иначе 
		СтрокаДерева = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(СтрокаИдентификатор);
	КонецЕсли;
	
	СтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	
	Если СтрокаДерева = Неопределено 
		И СтрокаТС = Неопределено Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок" Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;

	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокЗаказовДерево" Тогда
		
		СтрокаТСИсточник = СтрокаИсточник;
		Если ТипЗнч(СтрокаИсточник) = Тип("Массив") 
			И СтрокаИсточник.Количество() = 1 Тогда
			СтрокаИсточник = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(СтрокаИсточник[0]);
		КонецЕсли;
		
		СтрокаТСПриемник = СтрокаДерева;
		
		СтрокаМЛИсточник = СтрокаИсточник;
		Если СтрокаМЛИсточник.ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		ИначеЕсли СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		Иначе 
			Пока СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаМЛИсточник = СтрокаМЛИсточник.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		СтрокаМЛПриемник = СтрокаДерева;
		Если СтрокаМЛПриемник <> Неопределено Тогда
			Если СтрокаМЛПриемник.ПолучитьРодителя() = Неопределено Тогда 
				СтрокаМЛПриемник = Неопределено;
				
			ИначеЕсли СтрокаМЛПриемник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
				СтрокаМЛПриемник = Неопределено;
				
			Иначе 
				Пока СтрокаМЛПриемник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
					СтрокаМЛПриемник = СтрокаМЛПриемник.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка             = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
		
		// Перетаскиваем внутри ТС. Разрешено только в пределах одного МЛ.

		СтрокаПунктПриемник = СтрокаДерева;
		Если СтрокаПунктПриемник <> Неопределено Тогда
			Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
				СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
			КонецЦикла;
		Иначе
			СтандартнаяОбработка             = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		СтрокаПунктИсточник = СтрокаИсточник;
		Пока Не СтрокаПунктИсточник.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
		КонецЦикла;
		
		Если СтрокаПунктИсточник = СтрокаПунктПриемник Тогда
			СтандартнаяОбработка             = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		ПеретаскиваниеВозможно = Истина;
		
		Если СтрокаИсточник.УровеньДерева = "Пункт" Тогда
			
			Для Каждого ТекСтрокаЗаказ Из СтрокаИсточник.ПолучитьЭлементы() Цикл
				Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
					Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутовСписок(ТекСтрокаНоменклатура, СтрокаДерева, СтрокаПунктИсточник, СтрокаПунктПриемник) Тогда
						ПеретаскиваниеВозможно = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ПеретаскиваниеВозможно Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтрокаИсточник.УровеньДерева = "Заказ" Тогда
			Для Каждого ТекСтрокаНоменклатура Из СтрокаИсточник.ПолучитьЭлементы() Цикл
				Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутовСписок(ТекСтрокаНоменклатура, СтрокаДерева, СтрокаПунктИсточник, СтрокаПунктПриемник) Тогда
					ПеретаскиваниеВозможно = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИсточник.ПолучитьЭлементы().Количество() = 0 Тогда
				Если Не ПроверитьВозможностьПеретаскиванияВДеревеМаршрутовСписок(СтрокаИсточник, СтрокаДерева, СтрокаПунктИсточник, СтрокаПунктПриемник) Тогда
					ПеретаскиваниеВозможно = Ложь;
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли СтрокаИсточник.УровеньДерева = "Номенклатура"  Тогда
			ПеретаскиваниеВозможно = ПроверитьВозможностьПеретаскиванияВДеревеМаршрутовСписок(СтрокаИсточник, СтрокаДерева, СтрокаПунктИсточник, СтрокаПунктПриемник);
		КонецЕсли;
		
		Если ПеретаскиваниеВозможно Тогда 
			СтандартнаяОбработка             = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
			Возврат;
			
		Иначе 
			СтандартнаяОбработка             = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
				
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		

	Иначе
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ИмяИсточникаПеретаскиванияВМаршруты = "";
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Строка = МаршрутыДерево.НайтиПоИдентификатору(Строка);
		Иначе
			Строка = МаршрутыСписок.НайтиПоИдентификатору(Строка);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		СтрокаИсточник = ПараметрыПеретаскивания.Значение[0];
	Иначе
		СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			СтрокаИсточник = МаршрутыДерево.НайтиПоИдентификатору(СтрокаИсточник);
		Иначе
			СтрокаИсточник = МаршрутыСписок.НайтиПоИдентификатору(СтрокаИсточник);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СтрокаТСПриемник = Строка;
		Пока СтрокаТСПриемник.ПолучитьРодителя() <> Неопределено Цикл
			СтрокаТСПриемник = СтрокаТСПриемник.ПолучитьРодителя();
		КонецЦикла;
	Иначе
		СтрокаТСПриемник = Строка;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	Если ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок" Тогда
		
		Если НастройкаРежимОтображенияМЛ = 1 Тогда
			ОбновитьОбщиеИтогиПоТекущемуМаршруту(СтрокаТСПриемник);
		КонецЕсли;
	
		СтрокаИсточник = ЗаполнитьДанныеСтрокиЗаказа(СтрокаИсточник);
		
		СтандартнаяОбработка = Ложь;
		ДатаПредОтправления = Неопределено;
		ДатаПредПрибытия    = Неопределено;
		
		КоличествоСтрокаТСПриемник = 0;
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			КоличествоСтрокаТСПриемник = СтрокаТСПриемник.ПолучитьЭлементы().Количество();
		Иначе
			КоличествоСтрокаТСПриемник = ?(ЗначениеЗаполнено(СтрокаТСПриемник.МЛ) ИЛИ СтрокаТСПриемник.НовыйМЛ, 1, 0);
		КонецЕсли;
		
		Если КоличествоСтрокаТСПриемник = 0
			И СтрокаИсточник.ЭтоЭтап 
			И ЕстьПредварительныеДатыЭтапа(СтрокаИсточник.Ссылка, ДатаПредОтправления, ДатаПредПрибытия) Тогда 
			Оповещение = Новый ОписаниеОповещения("МаршрутыДеревоПеретаскиваниеОтветНаВопрос", ЭтотОбъект, 
				Новый Структура("Элемент,ПараметрыПеретаскивания,Строка,Поле,ДатаПланирования,СтрокаТСПриемник,ДатаПредОтправления,ДатаПредПрибытия", 
					Элемент, ПараметрыПеретаскивания, Строка, Поле, ДатаПланирования, СтрокаТСПриемник, ДатаПредОтправления, ДатаПредПрибытия));
			ТекстВопроса = НСтр("en='Use preliminary dates and duration of the stage to fill in routing list?';ru='Использовать предварительные даты и продолжительность этапа для заполнения маршрутного листа?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе 
			Если НастройкаВремяВыездаИзГаража = 1 Тогда 
				мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
			Иначе
				ОтправлениеС      = СтрокаИсточник.ОтправлениеС;
				ВремяОтправления  = ОтправлениеС - НачалоДня(ОтправлениеС);
				мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
			КонецЕсли;
			ПеретаскиваниеНаМаршруты(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, мДатаИВремяНачала);

			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				ОбновитьХарактеристикиТСДерево(СтрокаТСПриемник);
				ОбновитьВременныеХарактеристикиМашрута(СтрокаТСПриемник);
				ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
				ОтобразитьИтоговыеДанныеПоМаршрутам();
				
			Иначе
				МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСПриемник, Истина, Ложь);
				Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТСПриемник.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
		ОбновитьСписокЗаказов(Ложь);
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыДерево" Тогда
		
		СтрокаТСИсточник = СтрокаИсточник;
		Пока СтрокаТСИсточник.ПолучитьРодителя() <> Неопределено Цикл
			СтрокаТСИсточник = СтрокаТСИсточник.ПолучитьРодителя();
		КонецЦикла;
		
		СтрокаМЛИсточник = СтрокаИсточник;
		Если СтрокаМЛИсточник.ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		ИначеЕсли СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛИсточник = Неопределено;
			
		Иначе 
			Пока СтрокаМЛИсточник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаМЛИсточник = СтрокаМЛИсточник.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		СтрокаМЛПриемник = Строка;
		Если СтрокаМЛПриемник.ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛПриемник = Неопределено;
			
		ИначеЕсли СтрокаМЛПриемник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда 
			СтрокаМЛПриемник = Неопределено;
			
		Иначе 
			Пока СтрокаМЛПриемник.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаМЛПриемник = СтрокаМЛПриемник.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		Если Строка.ПолучитьРодителя() = Неопределено И СтрокаИсточник.ПолучитьРодителя() = Неопределено Тогда // Машину На Машину - просто сдвиг.
			ИндексПриемник = МаршрутыДерево.ПолучитьЭлементы().Индекс(СтрокаТСПриемник);
			ИндексИсточник = МаршрутыДерево.ПолучитьЭлементы().Индекс(СтрокаТСИсточник);
			МаршрутыДерево.ПолучитьЭлементы().Сдвинуть(МаршрутыДерево.ПолучитьЭлементы().Индекс(СтрокаТСИсточник), ИндексПриемник - ИндексИсточник);
			Возврат;
			
		Иначе
			Если Не СтрокаМЛИсточник = Неопределено И Не СтрокаМЛПриемник = Неопределено И СтрокаМЛИсточник = СтрокаМЛПриемник Тогда 
				МаршрутыПеретаскиваниеВнутриМаршрута(СтрокаИсточник, Строка);
				
			Иначе 
				МаршрутыПеретаскиваниеМеждуТС(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле); // Между ТС.
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			ОбновитьВременныеХарактеристикиМашрута(СтрокаТСПриемник);
			ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
			ОтобразитьИтоговыеДанныеПоМаршрутам();
			
		Иначе
			МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСИсточник, Истина);
			МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСПриемник, Истина);
			Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТСПриемник.ПолучитьИдентификатор();
		КонецЕсли;
		
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписок" Тогда
		
		МаршрутыПеретаскиваниеМеждуТС(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле); // Между ТС.
		СтрокаТСИсточник = СтрокаИсточник;
		
		ОбновитьХарактеристикиТС(СтрокаТСПриемник);
		
		МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСИсточник, Истина);
		МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСПриемник, Истина);
		
		Если ЗначениеЗаполнено(СтрокаТСИсточник.МЛ)
			ИЛИ СтрокаТСИсточник.НовыйМЛ Тогда
			СтрокаТСИсточник.СоздатьМаршрутныйЛист = Истина;
		КонецЕсли;
		СтрокаТСПриемник.СоздатьМаршрутныйЛист = Истина;

		СтрокаТСИсточник.Модифицированность = Истина;
		СтрокаТСПриемник.Модифицированность = Истина;
		Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТСПриемник.ПолучитьИдентификатор();


	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокЗаказовДерево" Тогда
		
		СтрокаТСИсточник = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", СтрокаИсточник.GUIDТС))[0];
		СтрокаМЛИсточник = СтрокаИсточник;
		Если НЕ ЗначениеЗаполнено(СтрокаТСИсточник.МЛ)
			ИЛИ НЕ СтрокаТСИсточник.НовыйМЛ Тогда 
			СтрокаМЛИсточник = Неопределено;
		КонецЕсли;
		
		флагГараж = Ложь;
		МаршрутыПеретаскиваниеМеждуТСДеревоСписок(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаТСПриемник, Поле, флагГараж); // Между ТС.
		
		Если флагГараж Тогда
			Возврат;
		КонецЕсли;

		МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСИсточник, Истина);
		МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТСПриемник, Истина);
		
		Если ЗначениеЗаполнено(СтрокаТСИсточник.МЛ)
			ИЛИ СтрокаТСИсточник.НовыйМЛ Тогда
			СтрокаТСИсточник.СоздатьМаршрутныйЛист = Истина;
		КонецЕсли;
		СтрокаТСПриемник.СоздатьМаршрутныйЛист = Истина;
		СтрокаТСИсточник.Модифицированность = Истина;
		СтрокаТСПриемник.Модифицированность = Истина;
		Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТСПриемник.ПолучитьИдентификатор();
		
	Иначе 
		
		ИмяИсточникаПеретаскиванияВМаршруты = "";
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыДеревоПеретаскиваниеЗавершение(Новый Структура("СтрокаТСПриемник", СтрокаТСПриемник));
		
		Элементы.МаршрутыДерево.ТекущаяСтрока = СтрокаТСПриемник.ПолучитьИдентификатор();
		МаршрутыДеревоПриАктивизацииСтроки(Неопределено);

	Иначе
		МассивОшибок = Новый Массив();
		Если НастройкаКонтрольВременныхОконЗаказов Тогда 
			ПроверитьСостоянияВхожденияВОкнаСписок(МассивОшибок);
		КонецЕсли;
		Если МассивОшибок.Количество() Тогда 
			СтрокаОшибки = "";
			Для Каждого ТекОшибка Из МассивОшибок Цикл 
				СтрокаОшибки = СтрокаОшибки + ?(СтрокаОшибки="","",Символы.ПС) + ТекОшибка;
			КонецЦикла;
			ТекстНСТР = НСтр("en='Check of entry in windows';ru='Проверка вхождения в окна'");
			ПоказатьОповещениеПользователя(ТекстНСТР,, СтрокаОшибки, БиблиотекаКартинок.Ошибка32);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПланировщик(); 
	
	ОтобразитьДанныеНаКарте_Заказы();
	ОтобразитьДанныеНаКарте_МЛ(СтрокаТСПриемник.GUID);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПеретаскиваниеМеждуТСДеревоСписок(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаТСПриемник, Колонка, Гараж = Ложь)
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Массив") Тогда
		СтрокаИсточник = СтрокаИсточник[0];
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		СтрокаИсточник = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(СтрокаИсточник);
	КонецЕсли;
	
	ПеретаскиваемыеЗаказы = Новый Массив();
	Если СтрокаИсточник.ПолучитьРодителя() = Неопределено Тогда // Пункт.
		
		Для Каждого ТекСтрока Из СтрокаИсточник.ПолучитьЭлементы() Цикл	
			Если ТекСтрока.FTL Тогда
				мсвГрузы = Новый Массив();
				
				пПогрузка    = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				
				СоответсвиеГрузов = Новый Соответствие();
				ТекЭтап  = ТекСтрока.Этап;
				Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
					Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
						Если ТекЗаказ.Этап <> ТекЭтап Тогда
							Продолжить;
						КонецЕсли;
						Если ТекЗаказ.Операция = пПогрузка
							ИЛИ ТекЗаказ.Операция = пДопПогрузка Тогда
							
							Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
								Если СоответсвиеГрузов.Получить(ТекГруз.Код) = Неопределено Тогда
									ДанныеГруза = Новый Структура();
									ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
									ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
									ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
									ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
									ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
									ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
									ДанныеГруза.Вставить("Код",              ТекГруз.Код);
									ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
									мсвГрузы.Добавить(ДанныеГруза);
									СоответсвиеГрузов.Вставить(ТекГруз.Код, ТекГруз.Группировка);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				мсвГрузы = Новый Массив();
				Для Каждого ТекГруз Из ТекСтрока.ПолучитьЭлементы() Цикл 
					ДанныеГруза = Новый Структура();
					ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
					ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
					ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
					ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
					ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
					ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
					ДанныеГруза.Вставить("Код",              ТекГруз.Код);
					ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
					мсвГрузы.Добавить(ДанныеГруза);
				КонецЦикла;
			КонецЕсли;
			ДанныеЗаказа = Новый Структура();
			ДанныеЗаказа.Вставить("Заказ",       ТекСтрока.Этап);
			ДанныеЗаказа.Вставить("МЛДляЗаписи", ТекСтрока.МЛДляЗаписи);
			ДанныеЗаказа.Вставить("Грузы", ?(мсвГрузы.Количество(), мсвГрузы, Неопределено));
			ПеретаскиваемыеЗаказы.Добавить(ДанныеЗаказа);
		КонецЦикла;
		
		Если СтрокаИсточник.ПолучитьЭлементы().Количество() = 0 Тогда
			Гараж = Истина;
			Возврат;
		КонецЕсли;

	ИначеЕсли СтрокаИсточник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Заказ.
		
		Если СтрокаИсточник.FTL Тогда
			мсвГрузы = Новый Массив();
			
			пПогрузка    = ТипыТочекМаршрута_Погрузка;
			пДопПогрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
			
			СоответсвиеГрузов = Новый Соответствие();
			ТекЭтап  = СтрокаИсточник.Этап;
			Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
					Если ТекЗаказ.Этап <> ТекЭтап Тогда
						Продолжить;
					КонецЕсли;
					Если ТекЗаказ.Операция = пПогрузка
						ИЛИ ТекЗаказ.Операция = пДопПогрузка Тогда
						
						Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
							Если СоответсвиеГрузов.Получить(ТекГруз.Код) = Неопределено Тогда
								ДанныеГруза = Новый Структура();
								ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
								ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
								ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
								ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
								ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
								ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
								ДанныеГруза.Вставить("Код",              ТекГруз.Код);
								ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
								мсвГрузы.Добавить(ДанныеГруза);
								СоответсвиеГрузов.Вставить(ТекГруз.Код, ТекГруз.Группировка);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			
			мсвГрузы = Новый Массив();
			Для Каждого ТекГруз Из СтрокаИсточник.ПолучитьЭлементы() Цикл 
				ДанныеГруза = Новый Структура();
				ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
				ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
				ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
				ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
				ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
				ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
				ДанныеГруза.Вставить("Код",              ТекГруз.Код);
				ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
				мсвГрузы.Добавить(ДанныеГруза);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Заказ",       СтрокаИсточник.Этап);
		ДанныеЗаказа.Вставить("МЛДляЗаписи", СтрокаИсточник.МЛДляЗаписи);
		ДанныеЗаказа.Вставить("Грузы", ?(мсвГрузы.Количество(), мсвГрузы, Неопределено));
		ПеретаскиваемыеЗаказы.Добавить(ДанныеЗаказа);

	Иначе // Груз.
		УзелЗаказ = СтрокаИсточник.ПолучитьРодителя();
		Если УзелЗаказ.FTL Тогда
			мсвГрузы = Новый Массив();
			
			пПогрузка    = ТипыТочекМаршрута_Погрузка;
			пДопПогрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
			
			СоответсвиеГрузов = Новый Соответствие();
			ТекЭтап  = УзелЗаказ.Этап;
			Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
					Если ТекЗаказ.Этап <> ТекЭтап Тогда
						Продолжить;
					КонецЕсли;
					Если ТекЗаказ.Операция = пПогрузка
						ИЛИ ТекЗаказ.Операция = пДопПогрузка Тогда
						
						Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
							Если СоответсвиеГрузов.Получить(ТекГруз.Код) = Неопределено Тогда
								ДанныеГруза = Новый Структура();
								ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
								ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
								ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
								ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
								ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
								ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
								ДанныеГруза.Вставить("Код",              ТекГруз.Код);
								ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
								мсвГрузы.Добавить(ДанныеГруза);
								СоответсвиеГрузов.Вставить(ТекГруз.Код, ТекГруз.Группировка);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			
			мсвГрузы = Новый Массив();
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("Груз",             СтрокаИсточник.Группировка);
			ДанныеГруза.Вставить("ЕдиницаИзмерения", СтрокаИсточник.ЕдиницаИзмерения);
			ДанныеГруза.Вставить("Количество",       СтрокаИсточник.Количество);
			ДанныеГруза.Вставить("ВесБрутто",        СтрокаИсточник.ВесБрутто);
			ДанныеГруза.Вставить("Объем",            СтрокаИсточник.Объем);
			ДанныеГруза.Вставить("КолМест",          СтрокаИсточник.КолМест);
			ДанныеГруза.Вставить("Код",              СтрокаИсточник.Код);
			ДанныеГруза.Вставить("НомерСтроки",      СтрокаИсточник.НомерСтроки);
			мсвГрузы.Добавить(ДанныеГруза);
		КонецЕсли;
		
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Заказ",       СтрокаИсточник.ПолучитьРодителя().Этап);
		ДанныеЗаказа.Вставить("МЛДляЗаписи", СтрокаИсточник.ПолучитьРодителя().МЛДляЗаписи);
		ДанныеЗаказа.Вставить("Грузы", мсвГрузы);
		ПеретаскиваемыеЗаказы.Добавить(ДанныеЗаказа);
	КонецЕсли;
	
	ЗаполнитьРеквизитыШапкиЗаказов(ПеретаскиваемыеЗаказы);
	ЗаполнитьСтрокиПогрузкиРазгрузки(МаршрутыСписокЗаказовДерево, ПеретаскиваемыеЗаказы);
	Если НастройкаВремяВыездаИзГаража = 1 Тогда 
		мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	Иначе
		ОтправлениеС = ПолучитьДатуОтправления(СтрокаИсточник.Этап);
		ВремяОтправления = ОтправлениеС - НачалоДня(ОтправлениеС);
		мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
	КонецЕсли;
	
	ПеретаскиваниеНаМаршруты(
	Неопределено, 
	Неопределено,
	Неопределено,
	СтрокаТСПриемник,
	Неопределено,
	мДатаИВремяНачала,
	Ложь,
	Истина,
	ПеретаскиваемыеЗаказы
	);
	
	ТекТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", СтрокаИсточник.GUIDТС))[0];
	УдалитьПозициюИзМаршрута(ТекТС,,СтрокаИсточник,,Ложь);
	ОбновитьДанныеТекущегоМаршрута(ТекТС);
	СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Строка = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		СтрокаИсточник = ПараметрыПеретаскивания.Значение[0];
	Иначе
		СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		СтрокаИсточник = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(СтрокаИсточник);
	КонецЕсли;
	
	СтрокаТСПриемник = Элементы.МаршрутыСписок.ТекущиеДанные;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	Если ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок" Тогда
		
		СтрокаИсточник = ЗаполнитьДанныеСтрокиЗаказа(СтрокаИсточник);
		
		СтандартнаяОбработка = Ложь;
		ДатаПредОтправления  = Неопределено;
		ДатаПредПрибытия     = Неопределено;
		
		КоличествоСтрокаТСПриемник = 1;
		
		Если КоличествоСтрокаТСПриемник = 0
			И СтрокаИсточник.ЭтоЭтап 
			И ЕстьПредварительныеДатыЭтапа(СтрокаИсточник.Ссылка, ДатаПредОтправления, ДатаПредПрибытия) Тогда 
			Оповещение = Новый ОписаниеОповещения("МаршрутыДеревоПеретаскиваниеОтветНаВопрос", ЭтотОбъект, 
				Новый Структура("Элемент,ПараметрыПеретаскивания,Строка,Поле,ДатаПланирования,СтрокаТСПриемник,ДатаПредОтправления,ДатаПредПрибытия", 
					Элемент, ПараметрыПеретаскивания, Строка, Поле, ДатаПланирования, СтрокаТСПриемник, ДатаПредОтправления, ДатаПредПрибытия));
			ТекстВопроса = НСтр("en='Use preliminary dates and duration of the stage to fill in routing list?';ru='Использовать предварительные даты и продолжительность этапа для заполнения маршрутного листа?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе 
			Если НастройкаВремяВыездаИзГаража = 1 Тогда 
				мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
			Иначе
				ОтправлениеС      = СтрокаИсточник.ОтправлениеС;
				ВремяОтправления  = ОтправлениеС - НачалоДня(ОтправлениеС);
				мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
			КонецЕсли;
			
			ПеретаскиваниеНаМаршрутыСписокЗаказовДерево(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, мДатаИВремяНачала);
			
			ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекДанные = Неопределено Тогда
				ОбновитьВременныеХарактеристикиМашрута(СтрокаТСПриемник);
				ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута(Истина, СтрокаТСПриемник.ПолучитьИдентификатор());
				ОтобразитьИтоговыеДанныеПоМаршрутам();
				
				ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
				ОбновитьСписокЗаказов(Ложь);
				Возврат;
			КонецЕсли;

			МаршрутыСписокПриАктивизацииСтроки(Неопределено);
			ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные);
			ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекДанные);
			ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекДанные);
			ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекДанные);
			ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекДанные);
			ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекДанные);
			ОбновитьДанныеТекущегоМаршрута(ТекДанные);
			ПересчитатьНомераПунктовТекущегоМаршрута();
			ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные, Ложь);
			
		КонецЕсли;
		
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
		ОбновитьСписокЗаказов(Ложь);
	
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокЗаказовДерево" Тогда 
		СтандартнаяОбработка = Ложь;
		ДатаПредОтправления = Неопределено;
		ДатаПредПрибытия    = Неопределено;
		МаршрутыПереместитьСписок(Строка);
		
	Иначе
		ИмяИсточникаПеретаскиванияВМаршруты = "";
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПеретаскиваниеОтветНаВопрос(РезультатВопроса, ДопПараметры) Экспорт 
	
	ПараметрыПеретаскивания = ДопПараметры.ПараметрыПеретаскивания;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		СтрокаИсточник = ПараметрыПеретаскивания.Значение[0];
	Иначе
		СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		СтрокаИсточник = МаршрутыДерево.НайтиПоИдентификатору(СтрокаИсточник);
	КонецЕсли;
	
	Если НастройкаВремяВыездаИзГаража = 1 Тогда 
		мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	Иначе
		ОтправлениеС = ПолучитьДатуОтправления(СтрокаИсточник.Ссылка);
		ВремяОтправления = ОтправлениеС-НачалоДня(ОтправлениеС);
		мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
	КонецЕсли;
	
	ПеретаскиваниеНаМаршруты(ДопПараметры.Элемент, ДопПараметры.ПараметрыПеретаскивания, Ложь, ДопПараметры.Строка, ДопПараметры.Поле, мДатаИВремяНачала);
	
	Если НастройкаРежимОтображенияМЛ = 1 Тогда
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута(Истина, ДопПараметры.СтрокаТСПриемник.ПолучитьИдентификатор());
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь, Истина, ДопПараметры.СтрокаТСПриемник.ПолучитьИдентификатор());
	Иначе
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Если Не ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы().Количество() = 0 И Не ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество() = 0 Тогда 
				Для Сч=0 По ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество()-1 Цикл 
					ТекСтрока = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[Сч];
					
					Если Сч = 0 Тогда 
						ТекСтрока.ВремяПрибытияВПункт = ДопПараметры.ДатаПредОтправления;
						
						мСтоянкаСтрока = 0;
						Для Каждого ПодСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл 
							мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ПодСтрока.Стоянка);
						КонецЦикла;
						мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ТекСтрока.СтоянкаИзПункта);
						
						ТекСтрока.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ВремяПрибытияВПункт, мСтоянкаСтрока);
						
						мВремяВПутиСек       = ДопПараметры.ДатаПредПрибытия - ТекСтрока.УбытиеПлан;
						мВремяВПутиЧас       = Цел(мВремяВПутиСек/3600);
						мВремяВПутиМин       = Цел((мВремяВПутиСек - мВремяВПутиЧас*3600)/60);
						мВремяВПути          = мВремяВПутиЧас + мВремяВПутиМин/100;
						ТекСтрока.ВремяВПути = мВремяВПути;
						
					ИначеЕсли Сч = 1 Тогда 
						ТекСтрока.ВремяПрибытияВПункт = ДопПараметры.ДатаПредПрибытия;
						
						мСтоянкаСтрока = 0;
						Для Каждого ПодСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл 
							мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ПодСтрока.Стоянка);
						КонецЦикла;
						мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ТекСтрока.СтоянкаИзПункта);
						
						ТекСтрока.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ВремяПрибытияВПункт, мСтоянкаСтрока);
						
					ИначеЕсли Сч > 1 Тогда  
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество() = 2 Тогда 
					текПункт1 = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0];
					текПункт2 = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[1];
					НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт1, текПункт2));
					Если НайдСтроки.Количество() Тогда 
						НайдСтроки[0].Время = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].ВремяВПути;
						
					Иначе 
						НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт2, текПункт1));
						Если НайдСтроки.Количество() Тогда 
							НайдСтроки[0].Время = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].ВремяВПути;
							
						Иначе 
							НовСтрока = кэшВремяРасстояниеМеждуПунктами.Добавить();
							НовСтрока.Пункт1     = текПункт1;
							НовСтрока.Пункт2     = текПункт2;
							НовСтрока.Время      = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].ВремяВПути;
							НовСтрока.Расстояние = ДопПараметры.СтрокаТСПриемник.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДопПараметры.СтрокаТСПриемник.МЛ)
				ИЛИ ДопПараметры.СтрокаТСПриемник.НовыйМЛ Тогда 
				
				ЭлементыВеткаПункт = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ДопПараметры.СтрокаТСПриемник.GUID, "Пункт"));
				Для Сч=0 По ЭлементыВеткаПункт.Количество()-1 Цикл 
					ТекСтрока = ЭлементыВеткаПункт[Сч];
					
					Если Сч = 0 Тогда 
						ТекСтрока.ВремяПрибытияВПункт = ДопПараметры.ДатаПредОтправления;
						
						мСтоянкаСтрока = 0;
						
						ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
						ДопПараметры.СтрокаТСПриемник.GUID, ТекСтрока.GUIDПункта, "Заказ"));
						Для Каждого ПодСтрока Из ЭлементыВеткаЗаказ Цикл 
							мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ПодСтрока.Стоянка);
						КонецЦикла;
								
						мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ТекСтрока.СтоянкаИзПункта);
						
						ТекСтрока.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ВремяПрибытияВПункт, мСтоянкаСтрока);
						
						мВремяВПутиСек       = ДопПараметры.ДатаПредПрибытия - ТекСтрока.УбытиеПлан;
						мВремяВПутиЧас       = Цел(мВремяВПутиСек/3600);
						мВремяВПутиМин       = Цел((мВремяВПутиСек - мВремяВПутиЧас*3600)/60);
						мВремяВПути          = мВремяВПутиЧас + мВремяВПутиМин/100;
						ТекСтрока.ВремяВПути = мВремяВПути;
						
					ИначеЕсли Сч = 1 Тогда 
						ТекСтрока.ВремяПрибытияВПункт = ДопПараметры.ДатаПредПрибытия;
						
						мСтоянкаСтрока = 0;
						ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
							ДопПараметры.СтрокаТСПриемник.GUID, ТекСтрока.GUIDПункта, "Заказ"));
						Для Каждого ПодСтрока Из ЭлементыВеткаЗаказ Цикл 
							мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ПодСтрока.Стоянка);
						КонецЦикла;
						мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ТекСтрока.СтоянкаИзПункта);
						
						ТекСтрока.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ВремяПрибытияВПункт, мСтоянкаСтрока);
						
					ИначеЕсли Сч > 1 Тогда  
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементыВеткаПункт.Количество() = 2 Тогда 
					текПункт1 = ЭлементыВеткаПункт[0];
					текПункт2 = ЭлементыВеткаПункт[1];
					НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт1.Адрес, текПункт2.Адрес));
					Если НайдСтроки.Количество() Тогда 
						НайдСтроки[0].Время = текПункт1.ВремяВПути;
						
					Иначе 
						НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт2.Адрес, текПункт1.Адрес));
						Если НайдСтроки.Количество() Тогда 
							НайдСтроки[0].Время = текПункт1.ВремяВПути;
							
						Иначе 
							НовСтрока = кэшВремяРасстояниеМеждуПунктами.Добавить();
							НовСтрока.Пункт1     = текПункт1.Адрес;
							НовСтрока.Пункт2     = текПункт2.АДрес;
							НовСтрока.Время      = текПункт1.ВремяВПути;
							НовСтрока.Расстояние = текПункт1.Расстояние;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОбновитьВременныеХарактеристикиМашрута(ДопПараметры.СтрокаТСПриемник);
		
	Иначе 
		ОбновитьВременныеХарактеристикиМашрута(ДопПараметры.СтрокаТСПриемник);
	КонецЕсли;
	
	ОбновитьДанныеПоСтоянкамСервер();
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Общее

&НаКлиенте
Процедура ОткрытьКарту(Команда)
	ИнициализацияКарты();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТСпоЗаказу(Команда)
	
	ИмяКлючевойОперации = "уатОперации.НазначениеТСнаЗаказ.АРМЛогиста";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ЗаказыСписок.ТекущаяСтрока;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	КлючСтроки = ТекущаяСтрока;
	
	ТекущаяСтрокаЗаказа = ОтмеченныеЗаказы.Найти(КлючСтроки);
	
	Если ТекущаяСтрокаЗаказа = Неопределено Тогда
		МодифицироватьОтметкуЗаказа(ТекущиеДанные, Истина, КлючСтроки);
		
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
		Элементы.ЗаказыСписок.Обновить();
	Конецесли;
	
	ВыполнитьПодборТСпоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	Период        = ДиалогПериода.Период;
	
	Период.ДатаНачала    = ?(НачалоДня(ДатаПланирования) = '00010101', '00010101',
		УстановитьЗначениеОтправлениеСпискаЗаказов());
	Период.ДатаОкончания = ?(НачалоДня(ДатаПланирования) = '00010101', '39991231', КонецДня(ДатаПланирования));
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатАРМЛогиста_уэ.Форма.ФормаНастроек",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчет_уатПланированиеСкладскихТерминалов_уэ(Команда)
	
	ПараметрыФормы = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.уатПланированиеСкладскихТерминалов_уэ.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийПересчетВремени(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
			ПоказатьПредупреждение(, НСтр("en='Change calculation mode is available only for routing list.';ru='Изменение режима пересчета доступно только для маршрутного листа.'"));
			Возврат;
		КонецЕсли;
		
		ТекМЛ = ТекущиеДанные;
		Пока Не ТекМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл 
			ТекМЛ = ТекМЛ.ПолучитьРодителя();
		КонецЦикла;
		
		Если ТекМЛ.ПересчетВремени = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		ТекМЛ.ПересчетВремени = 0;
	Иначе
		ТекМЛ = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекМЛ = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(ТекМЛ.МЛ)
			ИЛИ ТекМЛ.НовыйМЛ) Тогда 
			ПоказатьПредупреждение(, НСтр("en='Change calculation mode is available only for routing list.';ru='Изменение режима пересчета доступно только для маршрутного листа.'"));
			Возврат;
		КонецЕсли;
		
		Если ТекМЛ.ПересчетВремени = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		ТекМЛ.ПересчетВремени = 0;
	КонецЕсли;
	
	СпособПересчетаПлановогоВремениПоУмолчанию = ТекМЛ.ПересчетВремени;
	
	СохранитьСпособПересчетаПлановогоВремени();
	УстановитьПометкуРежимПересчетаВремени();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутах(СтрокаЗаказа, СтрокаПунктИсточник, СтрокаПунктПриемник)
	НайдСтрокиЗаказов = НайтиСтрокиВДереве(МаршрутыДерево, Новый Структура("Этап", СтрокаЗаказа.Этап), Истина);
	Если НайдСтрокиЗаказов[0] = СтрокаЗаказа.ПолучитьИдентификатор() Тогда
		СтрокаПунктСмежный = МаршрутыДерево.НайтиПоИдентификатору(НайдСтрокиЗаказов[1]);
	Иначе
		СтрокаПунктСмежный = МаршрутыДерево.НайтиПоИдентификатору(НайдСтрокиЗаказов[0]);
	КонецЕсли;
	Пока СтрокаПунктСмежный.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() <> Неопределено цикл
		СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
	КонецЦикла;
	
	СтрокиУровняМЛ = СтрокаПунктИсточник.ПолучитьРодителя().ПолучитьЭлементы();
	
	ИндексИсточник = СтрокиУровняМЛ.Индекс(СтрокаПунктИсточник);
	ИндексПриемник = СтрокиУровняМЛ.Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = СтрокиУровняМЛ.Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаЗаказа.Операция = ТипыТочекМаршрута_Погрузка Тогда
		// перетягиваем вниз и погрузка не окажется ниже разгрузки
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		// перетягиваем вверх и разгрузка не окажется выше погрузки
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутахСписок(СтрокаЗаказа, СтрокаПунктИсточник, СтрокаПунктПриемник)
	НайдСтрокиЗаказов = НайтиСтрокиВДереве(МаршрутыСписокЗаказовДерево, Новый Структура("Этап", СтрокаЗаказа.Этап), Истина);
	Если НайдСтрокиЗаказов[0] = СтрокаЗаказа.ПолучитьИдентификатор() Тогда
		СтрокаПунктСмежный = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(НайдСтрокиЗаказов[1]);
	Иначе
		СтрокаПунктСмежный = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(НайдСтрокиЗаказов[0]);
	КонецЕсли;
	Пока СтрокаПунктСмежный.ПолучитьРодителя() <> Неопределено цикл
		СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
	КонецЦикла;
	
	СтрокиУровняМЛ = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы();
	
	ИндексИсточник = СтрокиУровняМЛ.Индекс(СтрокаПунктИсточник);
	ИндексПриемник = СтрокиУровняМЛ.Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = СтрокиУровняМЛ.Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаЗаказа.Операция = ТипыТочекМаршрута_Погрузка Тогда
		// перетягиваем вниз и погрузка не окажется ниже разгрузки
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		// перетягиваем вверх и разгрузка не окажется выше погрузки
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
КонецФункции

&НаКлиенте
Процедура МаршрутыПереместитьВверх(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыПереместитьВверхДерево();
	Иначе
		МаршрутыПереместитьВверхСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПереместитьВверхДерево()
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаТС = ТекСтрока;
	Пока ТекСтрокаТС.ПолучитьРодителя() <> Неопределено Цикл
		ТекСтрокаТС = ТекСтрокаТС.ПолучитьРодителя();
	КонецЦикла;
	
	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	
	Если ТекСтрокаРодитель = Неопределено Тогда //уровень ТС
		ИндексТекСтрокиТС = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаТС);
		Если ИндексТекСтрокиТС = 0 Тогда
			Возврат;
		КонецЕсли;
		МаршрутыДерево.ПолучитьЭлементы().Сдвинуть(ИндексТекСтрокиТС, -1);
		
	ИначеЕсли Не (ТекСтрока.УровеньДерева = "МЛ" Или ЗначениеЗаполнено(ТекСтрока.Этап)) Тогда
		ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексПункта = 0 тогда
			Возврат;
		КонецЕсли;
		
		ПеремещениеВозможно = Истина;
		СтрокаПунктПриемник = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта - 1];
		Для каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
			ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутах(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
			Если НЕ ПеремещениеВозможно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПеремещениеВозможно Тогда
			Возврат;
		КонецЕсли;
		
		ИндексТекСтрокиТС = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаТС);
		
		Если ИндексПункта = 1 Тогда //строки вверху через одну нету. проверять нечего.
			ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, -1);
		Иначе
			ПровСтрокаСверху = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта - 2];
			Если ПровСтрокаСверху.Группировка = ТекСтрока.Группировка Тогда
				Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
					НовСтрока = ПровСтрокаСверху.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ,, "ЗатратыНаПеревозку,GUID,СоздаватьЗаказПеревозчику,Секции");
				КонецЦикла;
				ТекСтрокаРодитель.ПолучитьЭлементы().Удалить(ИндексПункта);
			Иначе
				ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, -1); //пункты не совпадают, просто сдвигаем
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПунктПриемникРодитель = СтрокаПунктПриемник.ПолучитьРодителя();
		
		ИндексПриемник = СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
		Если ИндексПриемник = СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Количество() - 1 Тогда
			Возврат;
		Иначе
			СтрокаПунктНиже = СтрокаПунктПриемникРодитель.ПолучитьЭлементы()[ИндексПриемник + 1];
			Если СтрокаПунктНиже.Группировка = СтрокаПунктПриемник.Группировка Тогда
				Для Каждого ТекСтрокаЗаказ ИЗ СтрокаПунктПриемник.ПолучитьЭлементы() Цикл
					НовСтрока = СтрокаПунктНиже.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ,, "ЗатратыНаПеревозку,GUID,СоздаватьЗаказПеревозчику,Секции");
				КонецЦикла;
				СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Удалить(ИндексПриемник);
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьВременныеХарактеристикиМашрута(ТекСтрокаРодитель);
		
	ИначеЕсли ТекСтрока.УровеньДерева = "МЛ" Или ЗначениеЗаполнено(ТекСтрока.Этап) Тогда
		ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексСтроки = 0 тогда
			Возврат;
		КонецЕсли;
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексСтроки, -1);
	КонецЕсли;
	
	УстановитьПризнакМодифицированности();
	ОбновитьДеревоМаршрутовНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПереместитьВверхСписок()
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Неопределено;
	
	ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекСтрокаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтрокаТС.СоздатьМаршрутныйЛист = Истина;
	ТекСтрокаТС.Модифицированность    = Истина;
	
	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	
	Если ТекСтрокаРодитель = Неопределено Тогда
		ИндексПункта = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексПункта = 0 тогда
			Возврат;
		КонецЕсли;
		
		ПеремещениеВозможно = Истина;
		СтрокаПунктПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПункта - 1];
		Для каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
			ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутахСписок(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
			Если НЕ ПеремещениеВозможно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПеремещениеВозможно Тогда
			Возврат;
		КонецЕсли;
		
		ИндексТекСтрокиТС = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаТС);
		
		Если ИндексПункта = 1 Тогда //строки вверху через одну нету. проверять нечего.
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, -1);
		Иначе
			ПровСтрокаСверху = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПункта - 2];
			Если ПровСтрокаСверху.Адрес = ТекСтрока.Адрес Тогда
				Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
					НовСтрока = ПровСтрокаСверху.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
					НовСтрока.GUIDПункта = ПровСтрокаСверху.GUIDПункта;
					
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрока.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
						НовСтрокаНом.GUIDПункта = ПровСтрокаСверху.GUIDПункта;
						
						ТекСтрокаЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказ.ПолучитьЭлементы().Индекс(ТекСтрокаНом));
					КонецЦикла;
				КонецЦикла;
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ИндексПункта);
			Иначе
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, -1); //пункты не совпадают, просто сдвигаем
			КонецЕсли;
		КонецЕсли;
		
		ИндексПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
		Если НЕ ИндексПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 1 Тогда
			СтрокаПунктНиже = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПриемник + 1];
			Если СтрокаПунктНиже.Адрес = СтрокаПунктПриемник.Адрес Тогда
				Для Каждого ТекСтрокаЗаказ ИЗ СтрокаПунктПриемник.ПолучитьЭлементы() Цикл
					НовСтрока = СтрокаПунктНиже.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
					НовСтрока.GUIDПункта = СтрокаПунктПриемник.GUIDПункта;
					
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрока.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
						НовСтрокаНом.GUIDПункта = СтрокаПунктНиже.GUIDПункта;
						
						ТекСтрокаЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказ.ПолучитьЭлементы().Индекс(ТекСтрокаНом));
					КонецЦикла;

				КонецЦикла;
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ИндексПриемник);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		
		Если ИндексСтроки = 0 тогда
			Возврат;
		КонецЕсли;
		
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексСтроки, -1);
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекСтрокаТС);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекСтрокаТС);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьДанныеТекущегоМаршрута(ТекСтрокаТС);
	ПересчитатьНомераПунктовТекущегоМаршрута();
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекСтрокаТС, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНомераПунктовТекущегоМаршрута()
	
	НомерПункта = 1;
	Для Каждого ТекСтрокаПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		ТекСтрокаПункт.НомерПункта = НомерПункта;
		НомерПункта = НомерПункта + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПереместитьСписок(ТекСтрокаПриемник)
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекСтрокаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтрокаТС.Модифицированность    = Истина;
	ТекСтрокаТС.СоздатьМаршрутныйЛист = Истина;
	
	ИндексПунктаПриемника = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(ТекСтрокаПриемник);
	
	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	
	Если ТекСтрокаРодитель = Неопределено Тогда
		ИндексПункта = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексПункта = 0 тогда
			Возврат;
		КонецЕсли;
				
		ПеремещениеВозможно = Истина;
		Если ИндексПунктаПриемника < 0 Тогда
			ПеремещениеВозможно = Ложь;
		Иначе
			СтрокаПунктПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПунктаПриемника];
			Для каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
				ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутахСписок(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
				Если НЕ ПеремещениеВозможно Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ПеремещениеВозможно Тогда
			Возврат;
		КонецЕсли;
		
		ИндексТекСтрокиТС = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаТС);
		
		Если ИндексПункта > ИндексПунктаПриемника Тогда
			
			Если ИндексПункта = 1 Тогда //строки вверху через одну нету. проверять нечего.
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, ИндексПунктаПриемника - ИндексПункта);
			Иначе
				ПровСтрокаСверху = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПунктаПриемника];
				Если ПровСтрокаСверху.Адрес = ТекСтрока.Адрес Тогда
					Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
						НовСтрока = ПровСтрокаСверху.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
						НовСтрока.GUIDПункта = ПровСтрокаСверху.GUIDПункта;
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							НовСтрокаНом = НовСтрока.ПолучитьЭлементы().Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
							НовСтрокаНом.GUIDПункта = ПровСтрокаСверху.GUIDПункта;
							
							ТекСтрокаЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказ.ПолучитьЭлементы().Индекс(ТекСтрокаНом));
						КонецЦикла;
					КонецЦикла;
					МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ИндексПункта);
				Иначе
					МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, ИндексПунктаПриемника - ИндексПункта); //пункты не совпадают, просто сдвигаем
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ИндексПункта = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 2 Тогда //строки вверху через одну нету. проверять нечего.
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, ИндексПунктаПриемника - ИндексПункта);
			Иначе
				ПровСтрокаСнизу = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПунктаПриемника];
				Если ПровСтрокаСнизу.Адрес = ТекСтрока.Адрес Тогда
					Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
						НовСтрока = ПровСтрокаСнизу.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
						НовСтрока.GUIDПункта = ПровСтрокаСнизу.GUIDПункта;
						
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							НовСтрокаНом = НовСтрока.ПолучитьЭлементы().Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
							НовСтрокаНом.GUIDПункта = ПровСтрокаСнизу.GUIDПункта;
							
							ТекСтрокаЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказ.ПолучитьЭлементы().Индекс(ТекСтрокаНом));
						КонецЦикла;
						
					КонецЦикла;
					МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ИндексПункта);
				Иначе
					МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, ИндексПунктаПриемника - ИндексПункта); //пункты не совпадают, просто сдвигаем
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ТекСтрока.УровеньДерева = "Заказ" Тогда
		
		НовСтрокаПункт = Неопределено;
		НовСтрокаЗаказ = Неопределено;
		
		СтрокаПриемникВДереве = ТекСтрокаПриемник;
		СтрокаПунктПриемник = СтрокаПриемникВДереве;
		Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
		КонецЦикла;

		СтрокаПунктИсточник = ТекСтрока;
		Пока Не СтрокаПунктИсточник.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
		КонецЦикла;
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеТекущегоМаршрута(СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			НовСтрокаПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Вставить(МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник));
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, ТекСтрока.ПолучитьРодителя());
			НовСтрокаПункт.GUIDПункта = Строка(Новый УникальныйИдентификатор());
			
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если СтрокаПриемникВДереве.УровеньДерева = "Заказ" Тогда
			СтрокаПриемникВДереве = СтрокаПриемникВДереве.ПолучитьРодителя();
		ИначеЕсли СтрокаПриемникВДереве.УровеньДерева = "Номенклатура" Тогда
			СтрокаПриемникВДереве = СтрокаПриемникВДереве.ПолучитьРодителя().ПолучитьРодителя();
		КонецЕсли;
		
		Если СтрокаПриемникВДереве.УровеньДерева = "Пункт" Тогда
			Если НовСтрокаПункт.ПолучитьЭлементы().Количество() 
				И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].Этап = ТекСтрока.Этап 
				И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].Операция = ТекСтрока.Операция Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1];
				
			Иначе
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрока);
				НовСтрокаЗаказ.GUIDПункта = НовСтрокаПункт.GUIDПункта;
			КонецЕсли;
			
		ИначеЕсли СтрокаПриемникВДереве.УровеньДерева = "Заказ" Или СтрокаПриемникВДереве.УровеньДерева = "Номенклатура" Тогда 
			мСтрЗаказ = ?(СтрокаПриемникВДереве.УровеньДерева = "Заказ", СтрокаПриемникВДереве, СтрокаПриемникВДереве.ПолучитьРодителя());
			
			Если мСтрЗаказ.Этап = ТекСтрока.Этап И мСтрЗаказ.Операция = ТекСтрока.Операция Тогда 
				НовСтрокаЗаказ = СтрокаПриемникВДереве;
				
			ИначеЕсли (Не мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ) = 0)
				И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].Этап = ТекСтрока.Этап
				И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].Операция = ТекСтрока.Операция Тогда 
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1];
				
			Иначе 
				ТекИндекс = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ);
				Если НовСтрокаПункт.ПолучитьЭлементы().Количество() < ТекИндекс Тогда
					Возврат;
				КонецЕслИ;
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Вставить(ТекИндекс);
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого мТекСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
			НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, мТекСтрока);
			НовСтрокаНоменклатура.GUIDПункта = НовСтрокаЗаказ.GUIDПункта;
			
		КонецЦикла;
		
		мРод = ТекСтрока.ПолучитьРодителя();
		ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекСтрока);
		Если мРод.ПолучитьЭлементы().Количество() = 0 Тогда
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(мРод);
		КонецЕсли;

		
	Иначе
		ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		ИндексКонСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 2;
		Если ИндексСтроки = ?(ИндексКонСтроки - 2 < 0, 0, ИндексКонСтроки) тогда
			Возврат;
		КонецЕсли;
		
		Если ИндексСтроки + ИндексКонСтроки >= ТекСтрокаРодитель.ПолучитьЭлементы().Количество() Тогда
			Возврат;
		КонецЕсли;
		
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексСтроки, ИндексКонСтроки);
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекСтрокаТС);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекСтрокаТС);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьДанныеТекущегоМаршрута(ТекСтрокаТС);
	ПересчитатьНомераПунктовТекущегоМаршрута();
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекСтрокаТС, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПереместитьВниз(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыПереместитьВнизДерево();
	Иначе
		МаршрутыПереместитьВнизСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПереместитьВнизДерево()
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаТС = ТекСтрока;
	Пока ТекСтрокаТС.ПолучитьРодителя() <> Неопределено Цикл
		ТекСтрокаТС = ТекСтрокаТС.ПолучитьРодителя();
	КонецЦикла;
	
	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	
	Если ТекСтрокаРодитель = Неопределено Тогда //уровень ТС
		ИндексТекСтрокиТС = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаТС);
		Если ИндексТекСтрокиТС = (МаршрутыДерево.ПолучитьЭлементы().Количество() - 1) Тогда
			Возврат;
		КонецЕсли;
		МаршрутыДерево.ПолучитьЭлементы().Сдвинуть(ИндексТекСтрокиТС, 1);
		
		
	ИначеЕсли Не (ТекСтрока.УровеньДерева = "МЛ" Или ЗначениеЗаполнено(ТекСтрока.Этап)) Тогда
		ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПеремещениеВозможно = Истина;
		СтрокаПунктПриемник = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта + 1];
		Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
			ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутах(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
			Если НЕ ПеремещениеВозможно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПеремещениеВозможно Тогда
			Возврат;
		КонецЕсли;
		
		Если ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 2 Тогда //строки внизу через одну нету. проверять нечего.
			ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, 1);
		Иначе
			ПровСтрокаСнизу = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта + 1];
			Если ПровСтрокаСнизу.Группировка = ТекСтрока.Группировка Тогда
				Для Каждого ТекСтрокаЗаказ ИЗ ТекСтрока.ПолучитьЭлементы() Цикл
					НовСтрока = ПровСтрокаСнизу.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ,, "ЗатратыНаПеревозку,GUID,СоздаватьЗаказПеревозчику,Секции");
				КонецЦикла;
				ТекСтрокаРодитель.ПолучитьЭлементы().Удалить(ИндексПункта);
			Иначе
				ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, 1); //пункты не совпадают, просто сдвигаем
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПунктПриемникРодитель = СтрокаПунктПриемник.ПолучитьРодителя();
		
		ИндексПриемник = СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
		Если ИндексПриемник = 0 Тогда
			Возврат;
		Иначе
			СтрокаПунктВыше = СтрокаПунктПриемникРодитель.ПолучитьЭлементы()[ИндексПриемник - 1];
			Если СтрокаПунктВыше.Группировка = СтрокаПунктПриемник.Группировка Тогда
				Для Каждого ТекСтрокаЗаказ ИЗ СтрокаПунктПриемник.ПолучитьЭлементы() Цикл
					НовСтрока = СтрокаПунктВыше.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ,, "ЗатратыНаПеревозку,GUID,СоздаватьЗаказПеревозчику,Секции");
				КонецЦикла;
				СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Удалить(ИндексПриемник);
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьВременныеХарактеристикиМашрута(ТекСтрокаРодитель);
		
	ИначеЕсли ТекСтрока.УровеньДерева = "МЛ" Или ЗначениеЗаполнено(ТекСтрока.Этап) Тогда
		ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 1 тогда
			Возврат;
		КонецЕсли;
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексСтроки, 1);
	КонецЕсли;
	
	УстановитьПризнакМодифицированности();
	ОбновитьДеревоМаршрутовНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПереместитьВнизСписок()
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекСтрокаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтрокаТС.СоздатьМаршрутныйЛист = Истина;
	ТекСтрокаТС.Модифицированность    = Истина;

	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	
	Если ТекСтрокаРодитель = Неопределено Тогда
		ИндексПункта = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексПункта = 0 
			ИЛИ ИндексПункта + 1 = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() тогда
			Возврат;
		КонецЕсли;
		
		ПеремещениеВозможно = Истина;
		СтрокаПунктПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПункта + 1];
		Для каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
			ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутахСписок(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
			Если НЕ ПеремещениеВозможно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПеремещениеВозможно Тогда
			Возврат;
		КонецЕсли;
		
		ИндексТекСтрокиТС = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаТС);
		
		Если ИндексПункта = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 2 Тогда //строки вверху через одну нету. проверять нечего.
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, 1);
		Иначе
			ПровСтрокаСнизу = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПункта + 1];
			Если ПровСтрокаСнизу.Адрес = ТекСтрока.Адрес Тогда
				Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
					НовСтрока = ПровСтрокаСнизу.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
					НовСтрока.GUIDПункта = ПровСтрокаСнизу.GUIDПункта;
					
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрока.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
						НовСтрокаНом.GUIDПункта = ПровСтрокаСнизу.GUIDПункта;
						
						ТекСтрокаЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказ.ПолучитьЭлементы().Индекс(ТекСтрокаНом));
					КонецЦикла;

				КонецЦикла;
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ИндексПункта);
			Иначе
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Сдвинуть(ИндексПункта, 1); //пункты не совпадают, просто сдвигаем
			КонецЕсли;
		КонецЕсли;
		
		ИндексПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
		Если НЕ ИндексПриемник = 0 Тогда
			СтрокаПунктВыше = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПриемник - 1];
			Если СтрокаПунктВыше.Адрес = СтрокаПунктПриемник.Адрес Тогда
				Для Каждого ТекСтрокаЗаказ ИЗ СтрокаПунктПриемник.ПолучитьЭлементы() Цикл
					НовСтрока = СтрокаПунктВыше.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
					НовСтрока.GUIDПункта = СтрокаПунктВыше.GUIDПункта;
					
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрока.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
						НовСтрокаНом.GUIDПункта = СтрокаПунктВыше.GUIDПункта;
						
						ТекСтрокаЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказ.ПолучитьЭлементы().Индекс(ТекСтрокаНом));
					КонецЦикла;

				КонецЦикла;
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ИндексПриемник);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
		Если ИндексСтроки = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 1 тогда
			Возврат;
		КонецЕсли;
		
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексСтроки, 1);
	КонецЕсли;
	
	ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ТекСтрокаТС.GUID));
	Для Каждого ТекСтрока Из ЭлементыВетка Цикл
		МаршрутыСписокЗаказов.Удалить(ТекСтрока);
	КонецЦИкла;
	
	Для Каждого ТекСтрокаПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаПункт, ТекСтрокаПункт);
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрокаЗаказ);
			Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекСтрокаТС);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекСтрокаТС);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекСтрокаТС);
	ОбновитьДанныеТекущегоМаршрута(ТекСтрокаТС);
	ПересчитатьНомераПунктовТекущегоМаршрута();
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекСтрокаТС, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойПересчетВремени(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
			ПоказатьПредупреждение(, НСтр("en='Change calculation mode is available only for routing list.';ru='Изменение режима пересчета доступно только для маршрутного листа.'"));
			Возврат;
		КонецЕсли;
		
		ТекМЛ = ТекущиеДанные;
		Пока Не ТекМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл 
			ТекМЛ = ТекМЛ.ПолучитьРодителя();
		КонецЦикла;
		
		Если ТекМЛ.ПересчетВремени = 1 Тогда 
			Возврат;
		КонецЕсли;
		
		ТекМЛ.ПересчетВремени = 1;
	Иначе
		ТекМЛ = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекМЛ = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(ТекМЛ.МЛ)
			ИЛИ ТекМЛ.НовыйМЛ) Тогда 
			ПоказатьПредупреждение(, НСтр("en='Change calculation mode is available only for routing list.';ru='Изменение режима пересчета доступно только для маршрутного листа.'"));
			Возврат;
		КонецЕсли;
		
		Если ТекМЛ.ПересчетВремени = 1 Тогда 
			Возврат;
		КонецЕсли;
		
		ТекМЛ.ПересчетВремени = 1;
	КонецЕсли;
	
	СпособПересчетаПлановогоВремениПоУмолчанию = ТекМЛ.ПересчетВремени;
	
	СохранитьСпособПересчетаПлановогоВремени();
	УстановитьПометкуРежимПересчетаВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланировщик(Команда)
	
	ИмяКлючевойОперации = "уатОперации.Планировщик.АРМЛогиста";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ПараметрыПланировщика = Новый Структура("НачальнаяДатаПланирования, НастройкаРежимОтображенияМЛ",
	НачальнаяДатаПланирования, НастройкаРежимОтображенияМЛ);
	Если НастройкаРежимОткрытияПланировщика = 1 Тогда
		ТекстПредупреждения = НСтр("ru='Открытие планировщика...'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 1);
	КонецЕсли;
	ФормаПланировщика = ОткрытьФорму("Обработка.уатАРМДиспетчера.Форма.ФормаПланировщика", ПараметрыПланировщика);
	ОбновитьПланировщик();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыСписок

&НаКлиенте
Процедура ОткрытьОтбор(Команда)
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("АдресВрХранилища",	 ПолучитьСтруктуруПараметровОтборовАдрес());
	
	ОписаниеОповещенияОЗакрытииФормаОтбора = Новый ОписаниеОповещения("СоздатьОтборЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаОтбора",ПараметрыПередачи, ЭтотОбъект,,,,
		ОписаниеОповещенияОЗакрытииФормаОтбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСортировку(Команда)
	ОписаниеОповещенияОЗакрытииФормаОтбора = Новый ОписаниеОповещения("СоздатьСортировкуЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаСортировки",,ЭтотОбъект,,,,
		ОписаниеОповещенияОЗакрытииФормаОтбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КонтактыДанныеПоЗаказам(Команда)
	
	ТекущаяСтрока  = Элементы.ЗаказыСписок.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено 
		ИЛИ ТипЗнч(Элементы.ЗаказыСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекстНСТР = НСтр("en='To open form select document.';ru='Для открытия формы необходимо выбрать документ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ТекЗаказ = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда 
		ТекЗаказ = ТекущаяСтрока.Ссылка;
	КонецЕсли;
	
	Если ТекЗаказ = Неопределено Тогда
		ТекстНСТР = НСтр("en='To open form select document.';ru='Для открытия формы необходимо выбрать документ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументИсточник", ТекЗаказ);
	ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокСоздатьМаршрутныйЛистПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЗаказНаКарте(Команда)
	
	ТекущийЗаказ = Неопределено;
	
	ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.ЗаказыСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Использование Тогда 
		
		КлючСтроки = Элементы.ЗаказыСписок.ТекущаяСтрока;
		ТекущаяСтрокаЗаказа = ОтмеченныеЗаказы.Найти(КлючСтроки);
		
		Если ТекущаяСтрокаЗаказа = Неопределено Тогда 
			МодифицироватьОтметкуЗаказа(ТекущиеДанные, Истина, КлючСтроки);
		Иначе
			МодифицироватьОтметкуЗаказа(ТекущиеДанные, Ложь, КлючСтроки);
		КонецЕсли;
			
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
		Элементы.ЗаказыСписок.Обновить();
		
		ОбновитьСписокЗаказов();

	КонецЕсли;
	
	ИсточникВыделенияНаКарте = 1;
	Если ФормаКарты = Неопределено Тогда
		ИнициализацияКарты();
	КонецЕсли;
	
	ОтобразитьДанныеНаКартеOSM(,ТекущиеДанные.Ссылка,,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиМаршрутныйЛистПоЗаказу(Команда)
	
	ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.ЗаказыСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаЗаказа = ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("Этап", СтрокаЗаказа.Ссылка);
	НайденныеСтроки = НайтиСтрокиВПроизвольномДереве(МаршрутыДерево.ПолучитьЭлементы(), СтруктураОтбора, Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='Order is not found in list of routing lists';ru='Заказ не найден в списке маршрутных листов'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	Иначе 
		Элементы.МаршрутыДерево.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказы(Команда)
	
	УстановитьЗначениеДатаПланированияСпискаЗаказов();
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеЗаказы(Команда)
	
	ОтмеченныеЗаказы.Очистить();
	ОтметитьВсеЗаказы = Истина;
	ОбновитьСписокЗаказов();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте_Заказы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенныеЗаказы(Команда)
	
	ВыделенныеСтроки = Элементы.ЗаказыСписок.ВыделенныеСтроки;
	Если НЕ ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		КлючСтроки          = ТекСтрока;
		ТекущаяСтрокаЗаказа = ОтмеченныеЗаказы.Найти(КлючСтроки);
		
		ТекущиеДанные = Элементы.ЗаказыСписок.ДанныеСтроки(КлючСтроки);

		Если НЕ ТекущиеДанные.Свойство("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаЗаказа = Неопределено Тогда 
			МодифицироватьОтметкуЗаказа(ТекущиеДанные, Истина, КлючСтроки);
		Иначе
			МодифицироватьОтметкуЗаказа(ТекущиеДанные, Ложь, КлючСтроки);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
	ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
	ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
	Элементы.ЗаказыСписок.Обновить();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте_Заказы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВсехЗаказов(Команда)
	
	ОтмеченныеЗаказы.Очистить();

	СнятьОтметкиСоВсехЗаказов = Истина;
	
	ОбновитьСписокЗаказов();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте_Заказы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	МассивМЛ = ИзменитьВыделенныеСервер();
	ИзменитьВыделенныеСтроки(МассивМЛ);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьВыделенныеСервер()
	
	ДеревоМаршрутовСервер = РеквизитФормыВЗначение("МаршрутыДерево");
	
	МассивМЛ = Новый Массив();
	Для Каждого ТекСтрокаТС Из ДеревоМаршрутовСервер.Строки Цикл
		Если ТекСтрокаТС.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.Строки Цикл
			Если Не ТекСтрокаМЛ.СоздатьМаршрутныйЛист Или ТекСтрокаМЛ.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.Группировка) И ТипЗнч(ТекСтрокаМЛ.Группировка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
				НовДок = ТекСтрокаМЛ.Группировка;
				МассивМЛ.Добавить(НовДок);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивМЛ;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьВыделенныеСтроки(МассивЭлементов)
	
	ПараметрыФормы = Новый Структура("МассивОбъектов", МассивЭлементов);
	
	Если ПараметрыФормы.МассивОбъектов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта.';en='Command cannot be executed for the specified object.'"));
		Возврат;
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.уатФормаОбработкиДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоЗаказам(Команда)
	
	Если ГруппировкаЗаказовПредставление = "БезГруппировки" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "БезГруппировки";
	УстановитьПометкуКнопкиГруппировки(1);
	
	ДобавитьГруппировкуСпискуЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоКонтрагенту(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоКонтрагенту" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоКонтрагенту";
	УстановитьПометкуКнопкиГруппировки(2);
	
	ДобавитьГруппировкуСпискуЗаказов("Контрагент");

КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоАдресуОтправления(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоАдресуОтправления" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоАдресуОтправления";
	УстановитьПометкуКнопкиГруппировки(3);
	
	ДобавитьГруппировкуСпискуЗаказов("АдресОтправления");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоАдресуНазначения(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоАдресуНазначения" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоАдресуНазначения";
	УстановитьПометкуКнопкиГруппировки(4);
	
	ДобавитьГруппировкуСпискуЗаказов("АдресНазначения");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоДатеОтправления(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоДатеОтправления" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоДатеОтправления";
	УстановитьПометкуКнопкиГруппировки(5);
	
	ДобавитьГруппировкуСпискуЗаказов("ОтправлениеС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоДатеПрибытия(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоДатеПрибытия" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоДатеПрибытия";
	УстановитьПометкуКнопкиГруппировки(6);
	
	ДобавитьГруппировкуСпискуЗаказов("ДоставкаС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоГрузоотправителю(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоГрузоотправителю" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоГрузоотправителю";
	УстановитьПометкуКнопкиГруппировки(7);
	
	ДобавитьГруппировкуСпискуЗаказов("Грузоотправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоГрузополучателю(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоГрузополучателю" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоГрузополучателю";
	УстановитьПометкуКнопкиГруппировки(8);
	
	ДобавитьГруппировкуСпискуЗаказов("Грузополучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоНаправлениямПеревозки(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоНаправлениямПеревозки" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоНаправлениямПеревозки";
	УстановитьПометкуКнопкиГруппировки(9);
	
	ДобавитьГруппировкуСпискуЗаказов("НаправлениеПеревозки");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоМаршруту(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоМаршрутам" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоМаршрутам";
	УстановитьПометкуКнопкиГруппировки(10);
	
	ДобавитьГруппировкуСпискуЗаказов("Маршрут");
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутыСписокДерево

&НаКлиенте
Процедура ОбновитьДеревоМаршрутов(Команда)
	
	ОбновитьХарактеристикиТС();
	ОбновитьДеревоМаршрутовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТСпоМаршрутномуЛисту(Команда)
	
	ИмяКлючевойОперации = "уатОперации.НазначениеТСнаМЛ.АРМЛогиста";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекСтрокаТС = Элементы.МаршрутыДерево.ТекущиеДанные;
		
		Если ТекСтрокаТС = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекСтрокаТС.УровеньДерева = "ТС" Тогда
			ТекстНСТР = НСтр("en='It is nessecary to select routing list';ru='Необходимо выбрать маршрутный лист'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		Пока ТекСтрокаТС.УровеньДерева <> "МЛ" Цикл
			ТекСтрокаТС = ТекСтрокаТС.ПолучитьРодителя();
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ТекСтрокаТС.Группировка) Тогда 
			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				Оповещение   = Новый ОписаниеОповещения("ПодобратьТСпоМаршрутномуЛистуЗаписьДокумента", ЭтотОбъект);
			Иначе
				Оповещение   = Новый ОписаниеОповещения("ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок", ЭтотОбъект);
			КонецЕсли;
			
			Оповещение   = Новый ОписаниеОповещения("ПодобратьТСпоМаршрутномуЛистуЗаписьДокумента", ЭтотОбъект);
			ТекстВопроса = НСтр("en='For vehicle selection it is necessary to write routing list. Continue?';ru='Для подбора ТС требуется записать маршрутный лист. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе 
			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				ПодобратьТСпоМаршрутномуЛистуЗаписьДокумента(КодВозвратаДиалога.Да, Неопределено);
			Иначе
				ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
		КонецЕсли;

	Иначе
		ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
		
		Если ТекСтрокаТС = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаТС.МЛ)
			И НЕ ТекСтрокаТС.НовыйМЛ Тогда
			ТекстНСТР = НСтр("en='It is nessecary to select routing list';ru='Необходимо выбрать маршрутный лист'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрокаТС.МЛ) Тогда 
			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				Оповещение   = Новый ОписаниеОповещения("ПодобратьТСпоМаршрутномуЛистуЗаписьДокумента", ЭтотОбъект);
			Иначе
				Оповещение   = Новый ОписаниеОповещения("ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок", ЭтотОбъект);
			КонецЕсли;
			
			ТекстВопроса = НСтр("en='For vehicle selection it is necessary to write routing list. Continue?';ru='Для подбора ТС требуется записать маршрутный лист. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе 
			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				ПодобратьТСпоМаршрутномуЛистуЗаписьДокумента(КодВозвратаДиалога.Да, Неопределено);
			Иначе
				ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	
	ДопПараметры = Новый Структура("ТС, МЛ", ТекСтрокаТС.ТС, Неопределено);
	
	Для Каждого ТекСтрокаДереваТС Из МаршрутыСписок Цикл 
		Если ЗначениеЗаполнено(ТекСтрокаДереваТС.МЛ)
			ИЛИ ТекСтрокаДереваТС.НовыйМЛ Тогда 
			ТекСтрокаДереваТС.СоздатьМаршрутныйЛист = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ТекСтрокаТС.СоздатьМаршрутныйЛист = Истина;
	
	мсвМаршрутныеЛисты = Неопределено;
	МассивОшибокСозданияМЛ = Новый Массив();
	СоздатьМЛСервер(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ);
	Если МассивОшибокСозданияМЛ.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрокаТС.МЛ) Тогда 
		ДопПараметры.МЛ = ТекСтрокаТС.МЛ;
	ИначеЕсли мсвМаршрутныеЛисты.Количество() Тогда 
		ДопПараметры.МЛ = мсвМаршрутныеЛисты[0];
	КонецЕсли;
	
	ОбновитьДеревоМаршрутовНаКлиенте();
	ВыполнитьПодборТСпоМаршрутномуЛисту(ТекСтрокаТС, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТСпоМаршрутномуЛистуЗаписьДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрокаТС = Элементы.МаршрутыДерево.ТекущиеДанные;
	
	Пока ТекСтрокаТС.УровеньДерева <> "МЛ" Цикл
		ТекСтрокаТС = ТекСтрокаТС.ПолучитьРодителя();
	КонецЦикла;
	
	ДопПараметры = Новый Структура("ТС, МЛ", ТекСтрокаТС.ПолучитьРодителя().ТС, Неопределено);
	
	Для Каждого ТекСтрокаДереваТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		Для Каждого ТекСтрокаДереваМЛ Из ТекСтрокаДереваТС.ПолучитьЭлементы() Цикл 
			ТекСтрокаДереваМЛ.СоздатьМаршрутныйЛист = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ТекСтрокаТС.СоздатьМаршрутныйЛист = Истина;
	
	мсвМаршрутныеЛисты = Неопределено;
	МассивОшибокСозданияМЛ = Новый Массив();
	СоздатьМЛСервер(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ);
	Если МассивОшибокСозданияМЛ.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрокаТС.Группировка) Тогда 
		ДопПараметры.МЛ = ТекСтрокаТС.Группировка;
	ИначеЕсли мсвМаршрутныеЛисты.Количество() Тогда 
		ДопПараметры.МЛ = мсвМаршрутныеЛисты[0];
	КонецЕсли;
	
	ОбновитьДеревоМаршрутовНаКлиенте();
	
	РазвернутьВсеМаршрутыПоМаршрутнымЛистам(Неопределено);
	
	ВыполнитьПодборТСпоМаршрутномуЛисту(ТекСтрокаТС, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоМаршрутномуЛисту(ТекСтрокаТС, ДопПараметры)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ВыполнитьПодборТСпоМаршрутномуЛистуДерево(ТекСтрокаТС, ДопПараметры);
	Иначе
		ВыполнитьПодборТСпоМаршрутномуЛистуСписок(ТекСтрокаТС, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоМаршрутномуЛистуДерево(ТекСтрокаТС, ДопПараметры)
	
	Если ТекСтрокаТС = Неопределено Тогда 
		ТекСтрокаТС = Элементы.МаршрутыДерево.ТекущиеДанные;
	КонецЕсли;
	
	Пока ТекСтрокаТС.УровеньДерева <> "МЛ" Цикл
		ТекСтрокаТС = ТекСтрокаТС.ПолучитьРодителя();
	КонецЦикла;
	
	ТекТС = ДопПараметры.ТС;
	ТекМЛ = ДопПараметры.МЛ;
	МЛАдресОтправления = ЗначениеРеквизитаОбъекта(ТекМЛ, "АдресОтправления");
	Если ТипЗнч(МЛАдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛатОтправления = ЗначениеРеквизитаОбъекта(МЛАдресОтправления, "Лат");
	Иначе
		ЛатОтправления = 0;
	КонецЕсли;
	Если ТипЗнч(МЛАдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛонОтправления = ЗначениеРеквизитаОбъекта(МЛАдресОтправления, "Лон");
	Иначе
		ЛонОтправления = 0;
	КонецЕсли;
	МЛОтправлениеПо = ЗначениеРеквизитаОбъекта(ТекМЛ, "ДатаИВремяОтправления");
	Если МЛОтправлениеПо = '00010101' Тогда
		МЛОтправлениеПо = ЗначениеРеквизитаОбъекта(ТекМЛ, "ДатаИВремяОтправленияПлан");
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МаршрутныйЛист", ТекМЛ);
	ПараметрыФормы.Вставить("ТС", Новый Массив());
	ПараметрыФормы.Вставить("ТекущееТС", ТекТС);
	ПараметрыФормы.Вставить("ЛатОтправления",      ЛатОтправления);
	ПараметрыФормы.Вставить("ЛонОтправления",      ЛонОтправления);
	ПараметрыФормы.Вставить("ОтправлениеПо",       МЛОтправлениеПо);
	ПараметрыФормы.Вставить("ТипКартографии",      ТипКартографии);
	ПараметрыФормы.Вставить("ТекОрганизация",      ТекОрганизация);
	ПараметрыФормы.Вставить("НастройкаВремяАктуальностиКоординат", НастройкаВремяАктуальностиКоординат);
	ПараметрыФормы.Вставить("ЭтоЯндекс",           НастройкаАлгоритмМаршрутизации = 3);

	Для Каждого ТекСтрокаДерева Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		стрУзелТС = Новый Структура();
		стрУзелТС.Вставить("Ссылка",                          ТекСтрокаДерева.ТС);
		стрУзелТС.Вставить("Представление",                   ТекСтрокаДерева.ТСПредставление);
		стрУзелТС.Вставить("Прицеп1",                         ТекСтрокаДерева.Прицеп1);
		стрУзелТС.Вставить("Прицеп2",                         ТекСтрокаДерева.Прицеп2);
		стрУзелТС.Вставить("ВесПредставление",                ТекСтрокаДерева.ВесПредставление);
		стрУзелТС.Вставить("ОбъемПредставление",              ТекСтрокаДерева.ОбъемПредставление);
		стрУзелТС.Вставить("КоличествоУпаковокПредставление", ТекСтрокаДерева.КоличествоУпаковокПредставление);
		стрУзелТС.Вставить("НаправлениеПеревозки",            ТекСтрокаДерева.НаправлениеПеревозки);
		стрУзелТС.Вставить("ГрузоподъемностьСцепки",          0);
		стрУзелТС.Вставить("Вес",                             ТекСтрокаТС.ВесБрутто);
		стрУзелТС.Вставить("ОбъемСцепки",                     0);
		стрУзелТС.Вставить("Объем",                           ТекСтрокаТС.Объем);
		стрУзелТС.Вставить("МаксимальноеКоличествоУпаковок",  0);
		стрУзелТС.Вставить("КоличествоУпаковок",              ТекСтрокаТС.КолМест);
		
		ДанныеМЛ = Новый Структура("Группировка,Прицеп1,Прицеп2,ДатаПланирования,НастройкаОрганизацияМЛИсточник,НастройкаОрганизацияМЛ,ДатаИВремяПрибытияВПункт,Строки",
		Неопределено,
		Неопределено,
		Неопределено,
		ДатаПланирования,
		НастройкаОрганизацияМЛИсточник,
		НастройкаОрганизацияМЛ,
		'00010101',
		Новый Массив());
		
		стрУзелТС.Вставить("ДанныеМЛ", ДанныеМЛ);
		
		Если ТекСтрокаДерева.ПолучитьЭлементы().Количество() Тогда 
			СтрокаМЛ = ТекСтрокаДерева.ПолучитьЭлементы()[ТекСтрокаДерева.ПолучитьЭлементы().Количество()-1];
			Если СтрокаМЛ.ПолучитьЭлементы().Количество() Тогда 
				стрУзелТС.ДанныеМЛ.Группировка = СтрокаМЛ.Группировка;
				стрУзелТС.ДанныеМЛ.Прицеп1     = СтрокаМЛ.Прицеп1;
				стрУзелТС.ДанныеМЛ.Прицеп2     = СтрокаМЛ.Прицеп2;
				стрУзелТС.ДанныеМЛ.ДатаИВремяПрибытияВПункт = СтрокаМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт;
				
				Для Каждого СтрокаПункт Из СтрокаМЛ.ПолучитьЭлементы() Цикл 
					стрСтрокаПункта = Новый Структура("СтоянкаИзПункта,Стоянка,Адрес,Расстояние,ВремяВПути,Строки",
					СтрокаПункт.СтоянкаИзПункта,
					СтрокаПункт.Стоянка,
					СтрокаПункт.Адрес,
					СтрокаПункт.Расстояние,
					СтрокаПункт.ВремяВПути,
					Новый Массив());
					
					Для Каждого СтрокаЗаказ Из СтрокаПункт.ПолучитьЭлементы() Цикл 
						стрСтрокаЗаказа = Новый Структура("Операция,Этап,Стоянка,ДетализацияЗакрытия,ВесБрутто,Объем,Количество,КолМест,Строки",
						СтрокаЗаказ.Операция,
						СтрокаЗаказ.Этап,
						СтрокаЗаказ.Стоянка,
						СтрокаЗаказ.ДетализацияЗакрытия,
						СтрокаЗаказ.ВесБрутто,
						СтрокаЗаказ.Объем,
						СтрокаЗаказ.Количество,
						СтрокаЗаказ.КолМест,
						Новый Массив());
						
						Для Каждого СтрокаГруз Из СтрокаЗаказ.ПолучитьЭлементы() Цикл 
							стрСтрокаГруза = Новый Структура("Группировка,ВесБрутто,Объем,ЕдиницаИзмерения,Количество,КолМест",
							СтрокаГруз.Группировка,
							СтрокаГруз.ВесБрутто,
							СтрокаГруз.Объем,
							СтрокаГруз.ЕдиницаИзмерения,
							СтрокаГруз.Количество,
							СтрокаГруз.КолМест);
							
							стрСтрокаЗаказа.Строки.Добавить(стрСтрокаГруза);
						КонецЦикла;
						
						стрСтрокаПункта.Строки.Добавить(стрСтрокаЗаказа);
					КонецЦикла;
					
					стрУзелТС.ДанныеМЛ.Строки.Добавить(стрСтрокаПункта);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы.ТС.Добавить(стрУзелТС);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодборТСпоМаршрутномуЛистуПослеЗакрытияФормыНазначения", ЭтотОбъект, Новый Структура("СтрокаЗаказа", ТекСтрокаТС));
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоМаршрутномуЛистуСписок(ТекСтрокаТС, ДопПараметры)
	
	Если ТекСтрокаТС = Неопределено Тогда 
		ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	КонецЕсли;
		
	ТекТС = ДопПараметры.ТС;
	ТекМЛ = ДопПараметры.МЛ;
	
	МЛАдресОтправления = ЗначениеРеквизитаОбъекта(ТекМЛ, "АдресОтправления");
	Если ТипЗнч(МЛАдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛатОтправления = ЗначениеРеквизитаОбъекта(МЛАдресОтправления, "Лат");
	Иначе
		ЛатОтправления = 0;
	КонецЕсли;
	Если ТипЗнч(МЛАдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛонОтправления = ЗначениеРеквизитаОбъекта(МЛАдресОтправления, "Лон");
	Иначе
		ЛонОтправления = 0;
	КонецЕсли;
	МЛОтправлениеПо = ЗначениеРеквизитаОбъекта(ТекМЛ, "ДатаИВремяОтправления");
	Если МЛОтправлениеПо = '00010101' Тогда
		МЛОтправлениеПо = ЗначениеРеквизитаОбъекта(ТекМЛ, "ДатаИВремяОтправленияПлан");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МаршрутныйЛист", ТекМЛ);
	ПараметрыФормы.Вставить("ТС", Новый Массив());
	ПараметрыФормы.Вставить("ТекущееТС", ТекТС);
	ПараметрыФормы.Вставить("ЛатОтправления",      ЛатОтправления);
	ПараметрыФормы.Вставить("ЛонОтправления",      ЛонОтправления);
	ПараметрыФормы.Вставить("ОтправлениеПо",       МЛОтправлениеПо);
	ПараметрыФормы.Вставить("ТипКартографии",      ТипКартографии);
	ПараметрыФормы.Вставить("ТекОрганизация",      ТекОрганизация);
	ПараметрыФормы.Вставить("НастройкаВремяАктуальностиКоординат", НастройкаВремяАктуальностиКоординат);
	ПараметрыФормы.Вставить("ЭтоЯндекс",           НастройкаАлгоритмМаршрутизации = 3);

	Для Каждого ТекСтрокаДерева Из МаршрутыСписок Цикл 
		стрУзелТС = Новый Структура();
		стрУзелТС.Вставить("Ссылка",                          ТекСтрокаДерева.ТС);
		стрУзелТС.Вставить("Представление",                   ТекСтрокаДерева.ТСПредставление);
		стрУзелТС.Вставить("Прицеп1",                         ТекСтрокаДерева.Прицеп1);
		стрУзелТС.Вставить("Прицеп2",                         ТекСтрокаДерева.Прицеп2);
		стрУзелТС.Вставить("ВесПредставление",                ТекСтрокаДерева.ВесПредставление);
		стрУзелТС.Вставить("ОбъемПредставление",              ТекСтрокаДерева.ОбъемПредставление);
		стрУзелТС.Вставить("КоличествоУпаковокПредставление", ТекСтрокаДерева.КоличествоУпаковокПредставление);
		стрУзелТС.Вставить("НаправлениеПеревозки",            ТекСтрокаДерева.НаправлениеПеревозки);
		стрУзелТС.Вставить("ГрузоподъемностьСцепки",          0);
		стрУзелТС.Вставить("Вес",                             ТекСтрокаТС.ВесБрутто);
		стрУзелТС.Вставить("ОбъемСцепки",                     0);
		стрУзелТС.Вставить("Объем",                           ТекСтрокаТС.Объем);
		стрУзелТС.Вставить("МаксимальноеКоличествоУпаковок",  0);
		стрУзелТС.Вставить("КоличествоУпаковок",              ТекСтрокаТС.КолМест);
		
		ДанныеМЛ = Новый Структура("Группировка,Прицеп1,Прицеп2,ДатаПланирования,НастройкаОрганизацияМЛИсточник,НастройкаОрганизацияМЛ,ДатаИВремяПрибытияВПункт,Строки",
		Неопределено,
		Неопределено,
		Неопределено,
		ДатаПланирования,
		НастройкаОрганизацияМЛИсточник,
		НастройкаОрганизацияМЛ,
		'00010101',
		Новый Массив());
		
		стрУзелТС.Вставить("ДанныеМЛ", ДанныеМЛ);
		
		Если ЗначениеЗаполнено(ТекСтрокаДерева.МЛ)
			ИЛИ ТекСтрокаДерева.НовыйМЛ Тогда 
			СтрокаМЛ = ТекСтрокаДерева;
			ЭлементыВеткаПункт = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаМЛ.GUID, "Пункт"));
			Если ЭлементыВеткаПункт.Количество() Тогда 
				стрУзелТС.ДанныеМЛ.Группировка = СтрокаМЛ.МЛ;
				стрУзелТС.ДанныеМЛ.Прицеп1     = СтрокаМЛ.Прицеп1;
				стрУзелТС.ДанныеМЛ.Прицеп2     = СтрокаМЛ.Прицеп2;
				
				
				стрУзелТС.ДанныеМЛ.ДатаИВремяПрибытияВПункт = ЭлементыВеткаПункт[0].ВремяПрибытияВПункт;
				
				Для Каждого СтрокаПункт Из ЭлементыВеткаПункт Цикл 
					стрСтрокаПункта = Новый Структура("СтоянкаИзПункта,Стоянка,Адрес,Расстояние,ВремяВПути,Строки",
					СтрокаПункт.СтоянкаИзПункта,
					СтрокаПункт.Стоянка,
					СтрокаПункт.Адрес,
					СтрокаПункт.Расстояние,
					СтрокаПункт.ВремяВПути,
					Новый Массив());
					
					ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева", СтрокаМЛ.GUID, СтрокаПункт.GUIDПункта, "Заказ"));
					
					Для Каждого СтрокаЗаказ Из ЭлементыВеткаЗаказ Цикл 
						стрСтрокаЗаказа = Новый Структура("Операция,Этап,Стоянка,ДетализацияЗакрытия,ВесБрутто,Объем,Количество,КолМест,Строки",
						СтрокаЗаказ.Операция,
						СтрокаЗаказ.Этап,
						СтрокаЗаказ.Стоянка,
						СтрокаЗаказ.ДетализацияЗакрытия,
						СтрокаЗаказ.ВесБрутто,
						СтрокаЗаказ.Объем,
						СтрокаЗаказ.Количество,
						СтрокаЗаказ.КолМест,
						Новый Массив());
						
						ЭлементыВеткаНом = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, GUIDЗаказа, УровеньДерева",
						СтрокаМЛ.GUID, СтрокаПункт.GUIDПункта, СтрокаЗаказ.GUIDЗаказа, "Номенклатура"));
						
						Для Каждого СтрокаГруз Из ЭлементыВеткаНом Цикл 
							стрСтрокаГруза = Новый Структура("Группировка,ВесБрутто,Объем,ЕдиницаИзмерения,Количество,КолМест",
							СтрокаГруз.Группировка,
							СтрокаГруз.ВесБрутто,
							СтрокаГруз.Объем,
							СтрокаГруз.ЕдиницаИзмерения,
							СтрокаГруз.Количество,
							СтрокаГруз.КолМест);
							
							стрСтрокаЗаказа.Строки.Добавить(стрСтрокаГруза);
						КонецЦикла;
						
						стрСтрокаПункта.Строки.Добавить(стрСтрокаЗаказа);
					КонецЦикла;
					
					стрУзелТС.ДанныеМЛ.Строки.Добавить(стрСтрокаПункта);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы.ТС.Добавить(стрУзелТС);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодборТСпоМаршрутномуЛистуПослеЗакрытияФормыНазначения", ЭтотОбъект, Новый Структура("СтрокаЗаказа", ТекСтрокаТС));
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоМаршрутномуЛистуПослеЗакрытияФормыНазначения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоМаршрутовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьВсемиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСобственнымиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСобственнымиТССЭкипажем(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьПривлеченнымиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьВиртуальнымиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьТСпоЗонамОтбора(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыРасширеннаяФормаЗаполнения(Команда)
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаЗаполненияТС",
		Новый Структура("ДатаПланирования, НастройкаАлгоритмМаршрутизации", ДатаПланирования, НастройкаАлгоритмМаршрутизации),ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ФормаЗаполненияТСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьУдалитьТсбезМаршрутов(Команда)
	
	ТекстВопроса = НСтр("en='Vehicle without routes will be removed from the list. Continue?';ru='ТС без маршрутов будут удалены из списка. Продолжить?'");
	ОповещениеОтветНаВопрос = Новый ОписаниеОповещения("МаршрутыЗаполнитьУдалитьТсбезМаршрутовПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеОтветНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьУдалитьТсбезМаршрутовПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СтрокиДерева = МаршрутыДерево.ПолучитьЭлементы();
		
		Сч = СтрокиДерева.Количество()-1;
		Пока Сч >= 0 Цикл
			Если СтрокиДерева[Сч].ПолучитьЭлементы().Количество() тогда
				Сч = Сч - 1;
				Продолжить;
			КонецЕсли;
			
			СтрокиДерева.Удалить(СтрокиДерева[Сч]);
			
			Сч = Сч - 1; 
		КонецЦикла;
	Иначе
		МассивДляУдаления = Новый Массив();
		Для Каждого ТекСтрока Из МаршрутыСписок Цикл
			Если ЗначениеЗаполнено(ТекСтрока.МЛ)
				ИЛИ ТекСтрока.НовыйМЛ Тогда
				Продолжить;
			КонецЕсли;
			МассивДляУдаления.Добавить(ТекСтрока);
		КонецЦикла;
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			МаршрутыСписок.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	ОбновитьПланировщик();

КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ТекстВопроса = НСтр("en='All generated routes will be cleared. Continue?';
		|ru='Все не сохраненные изменения в Маршрутных листах будут потеряны. Продолжить?'");
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			СтрокиМаршрутов = МаршрутыДерево.ПолучитьЭлементы();
		Иначе
			СтрокиМаршрутов = МаршрутыСписок;
		КонецЕсли;

		Если СтрокиМаршрутов.Количество() Тогда 
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ФормаЗаполненияТСОчистка", ЭтотОбъект, Результат),
				ТекстВопроса,
				РежимДиалогаВопрос.ОКОтмена);
		Иначе 
			ФормаЗаполненияТСЗаполнение(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			МаршрутыДерево.ПолучитьЭлементы().Очистить();
		Иначе
			МаршрутыСписок.Очистить();
			МаршрутыСписокЗаказов.Очистить();
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		ФормаЗаполненияТСЗаполнение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСЗаполнение(Результат)
	
	Если МассивРаспределенныхЗаказов.Количество() <> 0 Тогда
		МассивРаспределенныхЗаказов = Новый Массив();
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
		Элементы.ЗаказыСписок.Обновить();
	КонецЕсли;

	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ФормаЗаполненияТСЗаполнениеДерево(Результат);
	Иначе
		ФормаЗаполненияТСЗаполнениеСписок(Результат);
	КонецЕсли; 
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСЗаполнениеДерево(Результат)
	
	// Сохраним состояние флажков "СоздатьМаршрутныйЛист" до обновления дерева маршрутов.
	соотПризнакиПоТС = Новый Соответствие();
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		соотПризнакиПоМЛ = Новый Соответствие();
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл 
			соотПризнакиПоМЛ.Вставить(ТекСтрокаМЛ.Группировка, ТекСтрокаМЛ.СоздатьМаршрутныйЛист);
		КонецЦикла;
		соотПризнакиПоТС.Вставить(ТекСтрокаТС.ТС, соотПризнакиПоМЛ);
	КонецЦикла;
	
	ФормаЗаполненияТСЗаполнениеСервер(Результат);
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
	ОтобразитьИтоговыеДанныеПоМаршрутам();

	// Восстановим состояние флажков "СоздатьМаршрутныйЛист" до обновления дерева маршрутов.
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		УзелТС = соотПризнакиПоТС.Получить(ТекСтрокаТС.ТС);
		Если УзелТС = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл 
			ЗначФлага = УзелТС.Получить(ТекСтрокаМЛ.Группировка);
			Если ЗначФлага = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекСтрокаМЛ.СоздатьМаршрутныйЛист = ЗначФлага;
		КонецЦикла;
	КонецЦикла;
	
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ФормаЗаполненияТСЗаполнениеСервер(Результат)
	
	ПредТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	
	МассивТС = Новый Массив();
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекТС Из Результат Цикл
			Если ТСЕстьВМаршрутахСервер(ТекТС.ТС) И Не ТекТС.ТС = ПредТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекТС.ТС = ПредТС Тогда
				МассивТС.Добавить(ТекТС.ТС);
				НовСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС,,,, Истина);
			КонецЕсли;
			ПредТС = ТекТС.ТС;
		КонецЦикла;
	Иначе
		Для Каждого ТекТС Из Результат Цикл
			Если НЕ ТекТС.ТС = ПредТС Тогда
				МассивТС.Добавить(ТекТС.ТС);
				
				НовСтрока = МаршрутыСписок.Добавить();
				ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС,,,, Истина);
			КонецЕсли;
			ПредТС = ТекТС.ТС;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер(МассивТС);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормаЗаполненияТСЗаполнениеСписок(Результат)
	
	ФормаЗаполненияТСЗаполнениеСервер(Результат);
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьПоРазнарядке(Команда)
	ТекстВопроса = НСтр("en='All generated routes will be cleared. Continue?';ru='Все сформированные маршруты будут очищены. Продолжить?'");
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СтрокиМаршрутов = МаршрутыДерево.ПолучитьЭлементы();
	Иначе
		СтрокиМаршрутов = МаршрутыСписок;
	КонецЕсли;

	Если СтрокиМаршрутов.Количество() Тогда 
		ПоказатьВопрос(
		Новый ОписаниеОповещения("МаршрутыЗаполнитьПоРазнарядкеОчистка", ЭтотОбъект),
		ТекстВопроса,
		РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ДатаНачала    = ?(НачалоДня(ДатаПланирования) = '00010101', '00010101', КонецДня(ДатаПланирования)
			- НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1;
		ДатаОкончания = ?(НачалоДня(ДатаПланирования) = '00010101', '39991231', КонецДня(ДатаПланирования));
		
		ПараметрыФормы = Новый Структура("РежимВыбора, Отбор, ДатаНачала, ДатаОкончания", Истина,
		Новый Структура("ВидОперации, ПометкаНаУдаление",
		ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов"), Ложь),ДатаНачала, ДатаОкончания);
		ОткрытьФорму("Документ.уатРазнарядка.Форма.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,, Новый ОписаниеОповещения("ФормаЗаполненияТСПоРазнарядкеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьПоРазнарядкеОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормаЗаполненияТСПоРазнарядкеЗавершение", ЭтотОбъект);
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			МаршрутыДерево.ПолучитьЭлементы().Очистить();
		Иначе
			МаршрутыСписок.Очистить();
			МаршрутыСписокЗаказов.Очистить();
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		
		ДатаНачала    = ?(НачалоДня(ДатаПланирования) = '00010101', '00010101', КонецДня(ДатаПланирования)
		- НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1;
		ДатаОкончания = ?(НачалоДня(ДатаПланирования) = '00010101', '39991231', КонецДня(ДатаПланирования));
		
		ПараметрыФормы = Новый Структура("РежимВыбора, Отбор, ДатаНачала, ДатаОкончания", Истина,
		Новый Структура("ВидОперации, ПометкаНаУдаление",
		ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов"), Ложь),ДатаНачала, ДатаОкончания);
		ОткрытьФорму("Документ.уатРазнарядка.Форма.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСПоРазнарядкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если МассивРаспределенныхЗаказов.Количество() <> 0 Тогда
		МассивРаспределенныхЗаказов = Новый Массив();
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
		Элементы.ЗаказыСписок.Обновить();
	КонецЕсли;

	Если ТипЗнч(Результат) = Тип("ДокументСсылка.уатРазнарядка") Тогда
		
		МаршрутыТСПоРазнарядкеЗавершениеСервер(Результат);
		
	КонецЕсли;

	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		ОбновитьДанныеПоСтоянкамСервер();
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;
	КонецЕсли;

	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокиРазнарядки(Разнарядка)
	
	Возврат уатАРМ.ПолучитьСтрокиРазнарядки(Разнарядка);
	
КонецФункции

&НаСервере
Процедура МаршрутыТСПоРазнарядкеЗавершениеСервер(Разнарядка)
	
	мсвТС = ПолучитьСтрокиРазнарядки(Разнарядка);

	МассивТС = Новый Массив();
	СоответствиеТС = Новый Соответствие;
	Для Каждого ТекСтрока Из мсвТС Цикл 
		Если МассивТС.Найти(ТекСтрока.ТС) = Неопределено Тогда 
			МассивТС.Добавить(ТекСтрока.ТС);
			СоответствиеТС.Вставить(ТекСтрока.ТС, Новый Структура("Прицеп1, Прицеп2", ТекСтрока.Прицеп1, ТекСтрока.Прицеп2));
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);

	ТабМаршрутов = Новый Соответствие;
	мсвТС  = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, ТабМаршрутов, МассивТС);
	ПредТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекТС Из мсвТС Цикл
			Если ТСЕстьВМаршрутахСервер(ТекТС.ТС)
				И НЕ ТекТС.ТС = ПредТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ТекТС.ТС = ПредТС Тогда
				НовСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
				СтрокаРазнарядки = СоответствиеТС.Получить(ТекТС.ТС);
				Если СтрокаРазнарядки <> Неопределено Тогда
					ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС, СтрокаРазнарядки.Прицеп1, СтрокаРазнарядки.Прицеп2, ТабМаршрутов);
				КонецЕсли;
			КонецЕсли;
			ПредТС = ТекТС.ТС;
		КонецЦикла;
	Иначе
		Для Каждого ТекТС Из мсвТС Цикл
			Если НЕ ТекТС.ТС = ПредТС Тогда
				НовСтрока = МаршрутыСписок.Добавить();
				СтрокаРазнарядки = СоответствиеТС.Получить(ТекТС.ТС);
				Если СтрокаРазнарядки <> Неопределено Тогда
					ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС, СтрокаРазнарядки.Прицеп1, СтрокаРазнарядки.Прицеп2, ТабМаршрутов);
				КонецЕсли;
			КонецЕсли;
			ПредТС = ТекТС.ТС;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
		
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьПоМаршрутам(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьВсеТСсМаршрутами(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьТСпоЗонеОтбора(Команда)
	Если ПравоОграничениеЗонПоСотруднику Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", мсвДоступныхЗон(ТекПользователь)));
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("Справочник.уатГеозоны_уэ.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ТСпоЗонеОтбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыОчистить(Команда)
	
	ТекстВопроса = НСтр("en='All generated routes will be cleared. Continue?';ru='Все сформированные маршруты будут очищены. Продолжить?'");
	ОповещениеОтветНаВопрос = Новый ОписаниеОповещения("МаршрутыОчиститьПродолжение", ЭтотОбъект);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СтрокиМаршрутов = МаршрутыДерево.ПолучитьЭлементы();
	Иначе
		СтрокиМаршрутов = МаршрутыСписок;
	КонецЕсли;
	
	Если СтрокиМаршрутов.Количество() = 0 Тогда
		МаршрутыОчиститьПродолжение(КодВозвратаДиалога.Да, Неопределено);
	Иначе 
		ПоказатьВопрос(ОповещениеОтветНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьТС(Команда)
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт"));
	
	ПараметрыВыбора = Новый Структура("Отбор", Новый Структура("ВидМоделиТС", РазрешенныеВидыТС));
	
	ОткрытьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыВыбора, ЭтотОбъект,,,, Новый ОписаниеОповещения("МаршрутыДобавитьТСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыДанныеПоМЛ(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		КонтактыДанныеПоМЛДерево();
	Иначе
		КонтактыДанныеПоМЛСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыДанныеПоМЛДерево()
	
	ТекущаяСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстНСТР = НСтр("en='To open form choose vehicle, routing list or order.';ru='Для открытия формы необходимо выбрать ТС, маршрутный лист или заказ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ТекТС    = Неопределено;
	ТекМЛ    = Неопределено;
	ТекЗаказ = Неопределено;
	
	СтрокаТС = ТекущаяСтрока;
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		ТекТС = ТекущаяСтрока.ТС;
	ИначеЕсли ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда
		ТекТС = ТекущаяСтрока.ПолучитьРодителя().ТС;
		ТекМЛ = ТекущаяСтрока.Группировка;
	ИначеЕсли ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда
		ТекТС    = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ТС;
		ТекМЛ    = ТекущаяСтрока.ПолучитьРодителя().Группировка;
	ИначеЕсли ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда
		ТекТС    = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ТС;
		ТекМЛ    = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().Группировка;
		ТекЗаказ = ТекущаяСтрока.Этап;
	ИначеЕсли ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда
		ТекТС    = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ТС;
		ТекМЛ    = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().Группировка;
		ТекЗаказ = ТекущаяСтрока.ПолучитьРодителя().Этап;
	КонецЕсли;
	
	Если ТекТС = Неопределено Тогда 
		ТекстНСТР = НСтр("en='To open form choose vehicle, routing list or order.';ru='Для открытия формы необходимо выбрать ТС, маршрутный лист или заказ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	
	Если ТекМЛ = Неопределено И ТекЗаказ = Неопределено Тогда
		ПараметрыФормы.Вставить("ДокументИсточник", ТекТС);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	ИначеЕсли ТекМЛ <> Неопределено И ТекЗаказ = Неопределено Тогда
		ПараметрыФормы.Вставить("ДокументИсточник", ТекМЛ);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	Иначе 
		ПараметрыФормы.Вставить("ДокументИсточник", ТекЗаказ);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыДанныеПоМЛСписок()

	ТекущаяСтрока = Элементы.МаршрутыСписок.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстНСТР = НСтр("en='To open form choose vehicle, routing list or order.';ru='Для открытия формы необходимо выбрать ТС, маршрутный лист или заказ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ТекТС    = Неопределено;
	ТекМЛ    = Неопределено;
	ТекЗаказ = Неопределено;
	
	СтрокаТС = ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.МЛ) Тогда
		ТекТС = ТекущаяСтрока.ТС;
		
	Иначе
		ТекТС = ТекущаяСтрока.ТС;
		ТекМЛ = ТекущаяСтрока.МЛ;
	КонецЕсли;
	
	Если ТекТС = Неопределено Тогда 
		ТекстНСТР = НСтр("en='To open form choose vehicle, routing list or order.';ru='Для открытия формы необходимо выбрать ТС, маршрутный лист или заказ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	
	Если ТекМЛ = Неопределено И ТекЗаказ = Неопределено Тогда
		ПараметрыФормы.Вставить("ДокументИсточник", ТекТС);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	ИначеЕсли ТекМЛ <> Неопределено И ТекЗаказ = Неопределено Тогда
		ПараметрыФормы.Вставить("ДокументИсточник", ТекМЛ);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	Иначе 
		ПараметрыФормы.Вставить("ДокументИсточник", ТекЗаказ);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутыЗаказов(Команда)
	
	МассивЗаказовДляЗаписи  = Новый Массив();
	РабочаяДатаПланирования = ДатаПланирования;
	ФлагМаршрутизация       = Истина;
	Маршрутизация();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.уатТС") Тогда
		Если ЗначениеРеквизитаОбъекта(Результат, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда 
			Оповещение = Новый ОписаниеОповещения("МаршрутыДобавитьТСЗавершениеВыборКоличества", ЭтотОбъект, Результат);
			ПоказатьВводЧисла(Оповещение, 1, "Введите количество виртуальных ТС", 15, 0);
		Иначе 
			МаршрутыДобавитьТСЗавершениеВыборКоличества(1, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьТСЗавершениеВыборКоличества(ЧислоТС, ТС_ссылка) Экспорт 
	
	Если ЧислоТС = Неопределено
		Или ЧислоТС < 1 Тогда 
		Возврат;
	КонецЕсли;
	
	МаршрутыДобавитьТСЗавершениеВыборКоличестваСервер(ЧислоТС, ТС_ссылка);
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Если ЗначениеРеквизитаОбъекта(ТС_ссылка, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
			ОбновитьХарактеристикиТСДерево(); // Для обновления представлений виртуальных ТС с учетом количетва
		КонецЕсли;
		ОбновитьДанныеПоСтоянкамСервер();
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ОбновитьПланировщик();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);

КонецПроцедуры

&НаСервере
Процедура МаршрутыДобавитьТСЗавершениеВыборКоличестваСервер(ЧислоТС, ТС_ссылка)
	
	МассивТС = Новый Массив();
	МассивТС.Добавить(ТС_ссылка);
	
	СоответсвиеМаршрутов = Новый Соответствие();
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);
	мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, СоответсвиеМаршрутов, МассивТС);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекТС Из мсвТС Цикл
			Если ЗначениеРеквизитаОбъекта(ТекТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда 
				строкаТСГруппаВирт = Неопределено;
				Для Каждого ТекСтрокаДерева Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
					Если ТекСтрокаДерева.ТС = ТекТС.ТС И ТекСтрокаДерева.КоличествоВиртуальныхТС > 0
						И ТекСтрокаДерева.СобственноеТС = 6 Тогда 
						строкаТСГруппаВирт = ТекСтрокаДерева;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если строкаТСГруппаВирт = Неопределено Тогда 
					строкаТСГруппаВирт = МаршрутыДерево.ПолучитьЭлементы().Добавить();
					ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, строкаТСГруппаВирт, ТекТС,,, СоответсвиеМаршрутов);
					строкаТСГруппаВирт.КоличествоВиртуальныхТС = ЧислоТС;
				Иначе 
					строкаТСГруппаВирт.КоличествоВиртуальныхТС = строкаТСГруппаВирт.КоличествоВиртуальныхТС + ЧислоТС;
				КонецЕсли;
				
			ИначеЕсли Не ТСЕстьВМаршрутахСервер(ТекТС.ТС) Тогда
				строкаТС = МаршрутыДерево.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, строкаТС, ТекТС, ТекТС.Прицеп1, ТекТС.Прицеп2, СоответсвиеМаршрутов);
			КонецЕсли;
		КонецЦикла;
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	Иначе
		МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, СоответсвиеМаршрутов, Ложь, ЧислоТС);
		
		ПараметрыЗапросаТС.ТСсМЛ = Истина;
		мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования);
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Список(мсвТС, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьМЛ(Команда)
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыДобавитьМЛДерево();
	Иначе
		МаршрутыДобавитьМЛСписок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ПометкаНаУдаление = Истина;
	МаршрутыДеревоПередУдалением(Неопределено, Ложь);
	ПометкаНаУдаление = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьМЛДерево()

	ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТС = ТекДанные;
	Пока Истина Цикл
		ТекРодитель = СтрокаТС.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			Прервать;
		КонецЕсли;
		СтрокаТС = ТекРодитель;
	КонецЦикла;
	
	Если СтрокаТС.СобственноеТС = 6 И СтрокаТС.КоличествоВиртуальныхТС > 0 Тогда 
		НовСтрокаТС = МаршрутыДерево.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаТС, СтрокаТС,, "ЗатратыНаПеревозку,GUID,Секции");
		СтрокаТС.КоличествоВиртуальныхТС = СтрокаТС.КоличествоВиртуальныхТС - 1;
		НовСтрокаТС.КоличествоВиртуальныхТС = 0;
		
		Если СтрокаТС.КоличествоВиртуальныхТС < 1 Тогда 
			МаршрутыДерево.ПолучитьЭлементы().Удалить(СтрокаТС);
		КонецЕсли;
		
		СтрокаТС = НовСтрокаТС;
	КонецЕсли;
	
	НовСтрока = СтрокаТС.ПолучитьЭлементы().Добавить();
	НовСтрока.Прицеп1         = СтрокаТС.Прицеп1;
	НовСтрока.Прицеп2         = СтрокаТС.Прицеп2;
	НовСтрока.ПересчетВремени = СпособПересчетаПлановогоВремениПоУмолчанию;
	
	Элементы.МаршрутыДерево.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьМЛСписок()

	ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.МЛ)
		ИЛИ ТекДанные.НовыйМЛ Тогда
		СтрокаТС   = МаршрутыСписок.Вставить(МаршрутыСписок.Индекс(ТекДанные));
		ЗаполнитьЗначенияСвойств(СтрокаТС, ТекДанные,,"ЗатратыНаПеревозку, Секции");
		СтрокаТС.GUID                     = Строка(Новый УникальныйИдентификатор);
		СтрокаТС.МЛ                       = Неопределено;
		СтрокаТС.НовыйМЛ                  = Ложь;
		СтрокаТС.СоздатьМаршрутныйЛист    = Ложь;
		СтрокаТС.ЦветДокумента            = 0;
		СтрокаТС.АдресВременногоХранилища = "";
		СтрокаТС.КоличествоЗаказов        = 0;
		
		МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаТС, Истина, Ложь);
		Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТС.ПолучитьИдентификатор();
		
		ОтобразитьИтоговыеДанныеПоМаршрутам();
	Иначе
		ТекстНСТР = НСтр("ru='Нельзя добавить еще одну строку для данного ТС с пустым маршрутным листом!'");
		ПоказатьПредупреждение(, ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьПункт(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыДобавитьПунктДерево();
	Иначе
		МаршрутыДобавитьПунктСписок();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьПунктДерево()
	
	ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = ТекДанные;
	Если СтрокаМЛ.ПолучитьРодителя() = Неопределено Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора",,ЭтотОбъект,,,, Новый ОписаниеОповещения("МаршрутыДобавитьПунктЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьПунктСписок()
	
	ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = ТекДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаМЛ.МЛ)
		И НЕ СтрокаМЛ.НовыйМЛ Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора",,ЭтотОбъект,,,, Новый ОписаниеОповещения("МаршрутыДобавитьПунктЗавершениеСписок", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьГараж(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыДобавитьГаражДерево();
	Иначе
		МаршрутыДобавитьГаражСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьГаражДерево()
	
	ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = ТекДанные;
	Если СтрокаМЛ.ПолучитьРодителя() = Неопределено Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Гараж", Истина));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораГаража", ЭтотОбъект, ТекДанные);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьГаражСписок()
	
	ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = ТекДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаМЛ.МЛ)
		И НЕ СтрокаМЛ.НовыйМЛ Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли; 
		
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Гараж", Истина));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораГаражаСписок", ЭтотОбъект, ТекДанные);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораГаража(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = ДополнительныеПараметры;
	Пока Не СтрокаМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл 
		СтрокаМЛ = СтрокаМЛ.ПолучитьРодителя();
	КонецЦикла;
	
	Если СтрокаМЛ.ПолучитьЭлементы().Количество() Тогда 
		СтрокаПервогоПункта = СтрокаМЛ.ПолучитьЭлементы()[0];
	Иначе 
		СтрокаПервогоПункта = Неопределено;
	КонецЕсли;
	
	СтруктураДанныхГаража = ПредставлениеПункт(РезультатЗакрытия);
	
	Если СтрокаМЛ.ПолучитьЭлементы().Количество() = 0 
			Или (СтрокаМЛ.ПолучитьЭлементы().Количество() И Не СтрокаМЛ.ПолучитьЭлементы()[0].Адрес = РезультатЗакрытия) Тогда 
		СтрокаГаражВыезд = СтрокаМЛ.ПолучитьЭлементы().Вставить(0);
		СтрокаГаражВыезд.Группировка   = РезультатЗакрытия;
		СтрокаГаражВыезд.Адрес         = РезультатЗакрытия;
		СтрокаГаражВыезд.Лат           = СтруктураДанныхГаража.Лат;
		СтрокаГаражВыезд.Лон           = СтруктураДанныхГаража.Лон;
		СтрокаГаражВыезд.УровеньДерева = "Пункт";
		
		Если СтрокаПервогоПункта = Неопределено Тогда 
			// Установка рабочей даты в качестве времени прибытия в первый пункт
			СтрокаГаражВыезд.ВремяПрибытияВПункт = ДатаПланирования;
		КонецЕсли;
		
	Иначе
		СтрокаГаражВыезд = Неопределено;
	КонецЕсли;
	
	Если Не СтрокаМЛ.ПолучитьЭлементы()[СтрокаМЛ.ПолучитьЭлементы().Количество()-1].Адрес = РезультатЗакрытия Тогда 
		СтрокаГаражВозврат = СтрокаМЛ.ПолучитьЭлементы().Добавить();
		СтрокаГаражВозврат.Группировка   = РезультатЗакрытия;
		СтрокаГаражВозврат.Адрес         = РезультатЗакрытия;
		СтрокаГаражВозврат.Лат           = СтруктураДанныхГаража.Лат;
		СтрокаГаражВозврат.Лон           = СтруктураДанныхГаража.Лон;
		СтрокаГаражВозврат.УровеньДерева = "Пункт";
	Иначе 
		СтрокаГаражВозврат = Неопределено;
	КонецЕсли;
	
	Если Не СтрокаПервогоПункта = Неопределено И Не СтрокаГаражВыезд = Неопределено И ЗначениеЗаполнено(СтрокаПервогоПункта.ВремяПрибытияВПункт) Тогда 
		СтрокаГаражВыезд.ВремяПрибытияВПункт = СтрокаПервогоПункта.ВремяПрибытияВПункт;
		
		ОбновитьВременныеХарактеристикиМашрута(СтрокаМЛ);
		
		СтрокаГаражВыезд.УбытиеПлан          = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПервогоПункта.ВремяПрибытияВПункт, -СтрокаГаражВыезд.ВремяВПути);
		СтрокаГаражВыезд.ВремяПрибытияВПункт = СтрокаГаражВыезд.УбытиеПлан;
		
		ОбновитьДеревоМаршрутовНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораГаражаСписок(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = ДополнительныеПараметры;
	
	Если МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() Тогда 
		СтрокаПервогоПункта = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];
	Иначе 
		СтрокаПервогоПункта = Неопределено;
	КонецЕсли;
	
	СтруктураДанныхГаража = ПредставлениеПункт(РезультатЗакрытия);
	
	Если МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 
			Или (МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() И Не МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].Адрес = РезультатЗакрытия) Тогда 
		СтрокаГаражВыезд = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Вставить(0);
		СтрокаГаражВыезд.GUIDТС        = СтрокаМЛ.GUID;
		СтрокаГаражВыезд.GUIDПункта    = Строка(Новый УникальныйИдентификатор);
		СтрокаГаражВыезд.Группировка   = РезультатЗакрытия;
		СтрокаГаражВыезд.Адрес         = РезультатЗакрытия;
		СтрокаГаражВыезд.Лат           = СтруктураДанныхГаража.Лат;
		СтрокаГаражВыезд.Лон           = СтруктураДанныхГаража.Лон;
		СтрокаГаражВыезд.УровеньДерева = "Пункт";
		
		Если СтрокаПервогоПункта = Неопределено Тогда 
			// Установка рабочей даты в качестве времени прибытия в первый пункт
			СтрокаГаражВыезд.ВремяПрибытияВПункт = ДатаПланирования;
		КонецЕсли;
		
	Иначе
		СтрокаГаражВыезд = Неопределено;
	КонецЕсли;
	
	Если Не МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество()-1].Адрес = РезультатЗакрытия Тогда 
		СтрокаГаражВозврат = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Добавить();
		СтрокаГаражВозврат.GUIDТС        = СтрокаМЛ.GUID;
		СтрокаГаражВозврат.GUIDПункта    = Строка(Новый УникальныйИдентификатор);
		СтрокаГаражВозврат.Группировка   = РезультатЗакрытия;
		СтрокаГаражВозврат.Адрес         = РезультатЗакрытия;
		СтрокаГаражВозврат.Лат           = СтруктураДанныхГаража.Лат;
		СтрокаГаражВозврат.Лон           = СтруктураДанныхГаража.Лон;
		СтрокаГаражВозврат.УровеньДерева = "Пункт";
	Иначе 
		СтрокаГаражВозврат = Неопределено;
	КонецЕсли;
	
	Если Не СтрокаПервогоПункта = Неопределено И Не СтрокаГаражВыезд = Неопределено И ЗначениеЗаполнено(СтрокаПервогоПункта.ВремяПрибытияВПункт) Тогда 
		СтрокаГаражВыезд.ВремяПрибытияВПункт = СтрокаПервогоПункта.ВремяПрибытияВПункт;
		
		ОбновитьВременныеХарактеристикиМашрута(СтрокаМЛ);
		
		СтрокаГаражВыезд.УбытиеПлан          = СложитьВремя(СтрокаПервогоПункта.ВремяПрибытияВПункт, -СтрокаГаражВыезд.ВремяВПути);
		СтрокаГаражВыезд.ВремяПрибытияВПункт = СтрокаГаражВыезд.УбытиеПлан;
		
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(СтрокаМЛ);
		ОбновитьВременныеХарактеристикиТекущегоМаршрута(СтрокаМЛ);
		ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(СтрокаМЛ);
		ОбновитьДанныеПоСтоянкамТекущегоМаршрута(СтрокаМЛ);
		ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, СтрокаМЛ);
		ОтобразитьИтоговыеДанныеТекущегоМаршрута(СтрокаМЛ);
		ОбновитьДанныеТекущегоМаршрута(СтрокаМЛ);
		ПересчитатьНомераПунктовТекущегоМаршрута();
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(СтрокаМЛ, Ложь);

	ИначеЕсли НЕ СтрокаГаражВозврат = Неопределено Тогда
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(СтрокаМЛ);
		ОбновитьВременныеХарактеристикиТекущегоМаршрута(СтрокаМЛ);
		ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(СтрокаМЛ);
		ОбновитьДанныеПоСтоянкамТекущегоМаршрута(СтрокаМЛ);
		ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, СтрокаМЛ);
		ОтобразитьИтоговыеДанныеТекущегоМаршрута(СтрокаМЛ);
		ОбновитьДанныеТекущегоМаршрута(СтрокаМЛ);
		ПересчитатьНомераПунктовТекущегоМаршрута();
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(СтрокаМЛ, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьПунктЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		
		ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекДанные = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		СтрокаМЛ = ТекДанные;
		Если СтрокаМЛ.ПолучитьРодителя() = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		Пока СтрокаМЛ.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено цикл
			СтрокаМЛ = СтрокаМЛ.ПолучитьРодителя();
		КонецЦикла;
		
		НовСтрокаПункт = СтрокаМЛ.ПолучитьЭлементы().Добавить();
		НовСтрокаПункт.GUID = Строка(Новый УникальныйИдентификатор);
		НовСтрокаПункт.GUIDТС     = СтрокаМЛ.GUIDТС;
		НовСтрокаПункт.GUIDМЛ     = СтрокаМЛ.GUID;
		НовСтрокаПункт.GUIDПункта = НовСтрокаПункт.GUID;

		// Установка рабочей даты в качестве времени прибытия в первый пункт
		Если НовСтрокаПункт = СтрокаМЛ.ПолучитьЭлементы()[0] Тогда
			НовСтрокаПункт.ВремяПрибытияВПункт = ДатаПланирования;
		КонецЕсли;
		
		НовСтрокаПункт.Группировка   = Результат;
		НовСтрокаПункт.Адрес         = Результат;
		НовСтрокаПункт.УровеньДерева = "Пункт";
		
		СтруктураПункт = ПредставлениеПункт(Результат);
		НовСтрокаПункт.Лат = СтруктураПункт.Лат;
		НовСтрокаПункт.Лон = СтруктураПункт.Лон;
		
		Элементы.МаршрутыДерево.ТекущаяСтрока = НовСтрокаПункт.ПолучитьИдентификатор();
		ОбновитьДеревоМаршрутовНаКлиенте(Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДобавитьПунктЗавершениеСписок(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		
		ТекТС = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекТС = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекТС.МЛ)
			И НЕ ТекТС.НовыйМЛ Тогда
			Возврат;
		КонецЕсли; 
		
		НовСтрокаПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Добавить();
		НовСтрокаПункт.GUIDТС     = ТекТС.GUID;
		НовСтрокаПункт.GUIDПункта = Строка(Новый УникальныйИдентификатор);
		
		// Установка рабочей даты в качестве времени прибытия в первый пункт
		Если НовСтрокаПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] Тогда
			НовСтрокаПункт.ВремяПрибытияВПункт = ДатаПланирования;
		КонецЕсли;
		
		НовСтрокаПункт.Группировка   = Результат;
		НовСтрокаПункт.Адрес         = Результат;
		НовСтрокаПункт.УровеньДерева = "Пункт";

		СтруктураПункт = ПредставлениеПункт(Результат);
		НовСтрокаПункт.Лат = СтруктураПункт.Лат;
		НовСтрокаПункт.Лон = СтруктураПункт.Лон;
		
		Элементы.МаршрутыСписокЗаказовДерево.ТекущаяСтрока = НовСтрокаПункт.ПолучитьИдентификатор();
		
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекТС);
		ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекТС);
		ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекТС);
		ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекТС);
		ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекТС);
		ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекТС);
		ОбновитьДанныеТекущегоМаршрута(ТекТС);
		ПересчитатьНомераПунктовТекущегоМаршрута();
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекТС, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПункт(ТекАдрес)
	СтруктураПункт = Новый Структура("Лат, Лон", 0, 0);
	СтруктураПункт.Лат             = ТекАдрес.Лат;
	СтруктураПункт.Лон             = ТекАдрес.Лон;
	Возврат СтруктураПункт;	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общее

&НаКлиенте
Процедура ПередЗакрытиемПослеПодтверждения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		РазницаДней = (НачалоДня(Период.ДатаОкончания) - НачалоДня(Период.ДатаНачала));
		НастройкаКоличествоДнейДоДатыПланирования = РазницаДней /(60*60*24) + 1;
		НастройкаКоличествоДнейДоДатыПланирования = ?(ЗначениеЗаполнено(НастройкаКоличествоДнейДоДатыПланирования),
			НастройкаКоличествоДнейДоДатыПланирования, 1);
		ДатаПланирования = ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, ДатаПланирования);
	КонецЕсли;
	
	СохранитьНастройки();
	
	УстановитьЗначениеДатаПланированияСпискаЗаказов();
	ОбновитьСписокЗаказов();
	ОбновитьДеревоМаршрутовНаКлиенте();
	ОбновитьДатуПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВариантНастройки = Результат.ВариантНастройки;
		
		флТребуетсяОбновление = Ложь;
		
		ПредНастройкаРежимОтображенияМЛ      = НастройкаРежимОтображенияМЛ;
		ПредНастройкаЗаполненияСпискаЗаказов = НастройкаЗаполненияСпискаЗаказов;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СтруктураНастроек);
		
		Если НастройкаРежимОтображенияМЛ <> ПредНастройкаРежимОтображенияМЛ Тогда
			#Если ВебКлиент Тогда
				ТекстОшибки = НСтр("ru='Для работы с ТС установите стандартные настройки формы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			#КонецЕсли

			МаршрутыОчиститьПродолжение(КодВозвратаДиалога.Да, Неопределено);
		КонецЕсли;
		
		Если ПредНастройкаЗаполненияСпискаЗаказов <> НастройкаЗаполненияСпискаЗаказов Тогда
			УстановитьЗначениеДатаПланированияСпискаЗаказов();
			ОбновитьСписокЗаказов();
		КонецЕсли;

		УстановитьВидимостьДоступность();
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
		
	КонецЕсли;
	
	// Средние скорости могли быть изменены через форму настроек
	ОбновитьКэшСредняяСкоростьДвижения();
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПанелейРежимаОтображенияМЛ()
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
				
		Элементы.ГруппаМаршрутыСтраницы.ТекущаяСтраница = Элементы.СтраницаМаршрутыДерево;
		Элементы.ГруппаРазвернутьМаршруты.Видимость     = Истина;
		Элементы.СвернутьВсеМаршруты.Видимость          = Истина;
		Элементы.УдалитьСписок.Видимость                = Ложь;
		Элементы.Удалить.Видимость                      = Истина;
		Элементы.ПометитьНаУдаление.Видимость           = Ложь;
		Элементы.МаршрутыДобавитьПункт.Видимость        = Истина;
		Элементы.МаршрутыДобавитьГараж.Видимость        = Истина;
		Элементы.Переместить(Элементы.ГруппаКомандыМаршруты, Элементы.ГруппаПанельМЛДерево);
	Иначе
		Элементы.ГруппаМаршрутыСтраницы.ТекущаяСтраница = Элементы.СтраницаМаршрутыСписок;
		Элементы.ГруппаРазвернутьМаршруты.Видимость     = Ложь;
		Элементы.СвернутьВсеМаршруты.Видимость          = Ложь;
		Элементы.УдалитьСписок.Видимость                = Истина;
		Элементы.Удалить.Видимость                      = Ложь;
		Элементы.ПометитьНаУдаление.Видимость           = Истина;
		Элементы.МаршрутыДобавитьПункт.Видимость        = Ложь;
		Элементы.МаршрутыДобавитьГараж.Видимость        = Ложь;
		Элементы.Переместить(Элементы.ГруппаКомандыМаршруты, Элементы.ГруппаПанельМЛСписок);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СоздатьМаршрутыЗаказов.Видимость   = ИспользоватьАвтоматическуюМаршрутизацию;
	//Элементы.СоздатьМаршрутыЗаказов.Доступность =
	//		НЕ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.ПустаяСсылка");

	ЭлементПоказатьСекции = Элементы.Найти("ПоказатьСекции");
	Если НЕ ЭлементПоказатьСекции = Неопределено Тогда 
		ЭлементПоказатьСекции.Видимость = НастройкаУчитыватьСекцииТранспортныхСредств;
	КонецЕсли;
	
	Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
		
		Элементы.МаршрутыДеревоМаршрутРаспредление.Видимость = Истина;
		Элементы.МаршрутыДеревоПрицеп1.Видимость             = Ложь;
		Элементы.МаршрутыДеревоПрицеп2.Видимость             = Ложь;
		Элементы.МаршрутыДеревоРазмещение.Видимость          = Ложь;
		Элементы.МаршрутыДеревоТерминал.Видимость            = Ложь;
		
		Элементы.МаршрутыСписокМаршрут.Видимость             = Истина;
		Элементы.МаршрутыСписокПрицеп1.Видимость             = Ложь;
		Элементы.МаршрутыСписокПрицеп2.Видимость             = Ложь;
		Элементы.МаршрутыСписокРазмещение.Видимость          = Ложь;
		Элементы.МаршрутыСписокТерминал.Видимость            = Ложь;

	Иначе
		Элементы.МаршрутыДеревоМаршрутРаспредление.Видимость = Ложь;
		Элементы.МаршрутыДеревоПрицеп1.Видимость             = Истина;
		Элементы.МаршрутыДеревоПрицеп2.Видимость             = Истина;
		Элементы.МаршрутыДеревоРазмещение.Видимость          = Истина;
		Элементы.МаршрутыДеревоТерминал.Видимость            = Истина;
		
		Элементы.МаршрутыСписокМаршрут.Видимость             = Ложь;
		Элементы.МаршрутыСписокПрицеп1.Видимость             = Истина;
		Элементы.МаршрутыСписокПрицеп2.Видимость             = Истина;
		Элементы.МаршрутыСписокРазмещение.Видимость          = Истина;
		Элементы.МаршрутыСписокТерминал.Видимость            = Истина;
	КонецЕсли;

	УстановитьИконкиОтбораИСортировки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИконкиОтбораИСортировки()
	
	уатАРМКлиент.УстановитьИконкиОтбораИСортировки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПервоначальныеЗначенияПеременныхСервер()
	
	ДатаПланирования          = ТекущаяДатаСеанса();
	НачальнаяДатаПланирования = ДатаПланирования; 
	
	ИспользоватьАвтоматическуюМаршрутизацию = Константы.уатИспользоватьАвтоматическуюМаршрутизацию_уэ.Получить();
	
	ИспользоватьРазмещениеВСекциях        = Константы.уатИспользоватьРазмещениеВСекциях_уэ.Получить();
	ИспользоватьРасчетТары                = Константы.уатИспользоватьРасчетТары_уэ.Получить();
	ИспользоватьХарактеристикиЗаказовНаТС = Константы.уатИспользоватьХарактеристикиЗаказовНаТС_уэ.Получить();
	ИспользованиеКластеризации            = уатЗащищенныеФункцииСервер_уэ.ПолучитьИспользованиеКластеризации();
	
	ВосстановитьНастройки();
	Если НастройкаКоличествоДнейДоДатыПланирования = 0 Тогда
		НастройкаКоличествоДнейДоДатыПланирования = 1;
	КонецЕсли;
	
	ОбновитьСписокЗон();
	ОбновитьКэшСредняяСкоростьДвижения();
	
	НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
	ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
	ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", Новый Массив());
	
	уатАРМ.УстановитьПервоначальныеЗначенияПеременныхСервер(ЭтотОбъект);
	
	МассивЗаказов = ЗаполнитьСписокЗаказов(АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, ДатаПланирования,
		НастройкаКоличествоДнейДоДатыПланирования, НастройкаЗаполненияСпискаЗаказов);
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", МассивЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшСредняяСкоростьДвижения()
	
	кэшСредняяСкоростьДвижения.Очистить();
	
	НаборЗаписей = РегистрыСведений.уатСредняяСкоростьДвижения.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		НовСтрока = кэшСредняяСкоростьДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Запись);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПервоначальныеЗначенияПеременныхКлиент()
	
	ИмяИсточникаПеретаскиванияВМаршруты = "";
	ПометкаНаУдаление           = Ложь;
	ОтмеченныеЗаказы            = Новый Массив();
	МассивРаспределенныхЗаказов = Новый Массив();
	
	Элементы.ГруппаПанель.Высота = 1;

	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДатаПланированияСпискаЗаказов()
	
	МассивЗаказов = ЗаполнитьСписокЗаказов(АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, ДатаПланирования,
		НастройкаКоличествоДнейДоДатыПланирования, НастройкаЗаполненияСпискаЗаказов);
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", МассивЗаказов);
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьЗначениеОтправлениеСпискаЗаказов()
	
	ОтправлениеС = КонецДня(ДатаПланирования) - (НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1;
	
	Возврат ОтправлениеС;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		ВариантНастройки = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма",
			"уатАРМЛогиста_ВариантНастройки"
		);
		
		СтруктураНастроекАРМ = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма",
			"уатАРМЛогиста_Настройки"
		);
		
	Иначе 
		СтруктураНастроекАРМ = Неопределено;
	КонецЕсли;
	
	Обработки.уатАРМЛогиста_уэ.ЗаполнитьНастройкиВФормеПоСтруктуре(ЭтотОбъект, ВариантНастройки, СтруктураНастроекАРМ);
		
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		НастройкиПорядкаДереваЗаказов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМЛогистаНовый_уэ.Форма.ОсновнаяФорма", "уатАРМЛогиста_НастройкиКомпоновщика_Порядок");
	Иначе 
		НастройкиПорядкаДереваЗаказов = Неопределено;
	КонецЕсли;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		НастройкиОтбораДереваЗаказов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМЛогистаНовый_уэ.Форма.ОсновнаяФорма", "уатАРМЛогиста_НастройкиКомпоновщика_Отбор");
	Иначе 
		НастройкиОтбораДереваЗаказов = Неопределено;
	КонецЕсли;
	
	ИспользуютсяНесуществующиеПоля = Ложь;
	Если НЕ (НастройкиПорядкаДереваЗаказов = Неопределено 
			ИЛИ НЕ ТипЗнч(НастройкиПорядкаДереваЗаказов) = Тип("ХранилищеЗначения") 
			ИЛИ НастройкиПорядкаДереваЗаказов.Получить() = Неопределено) Тогда 
			Для Каждого ТекПорядок Из НастройкиПорядкаДереваЗаказов.Получить().Элементы Цикл 
				ДоступнаяНастройка = ЗаказыСписок.Порядок.ДоступныеПоляПорядка.НайтиПоле(ТекПорядок.Поле);
					
				НовыйПорядок = ЗаказыСписок.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйПорядок, ТекПорядок);
				Если ДоступнаяНастройка = Неопределено Тогда
					НовыйПорядок.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
	КонецЕсли;
	
	Если НЕ (НастройкиОтбораДереваЗаказов = Неопределено 
		ИЛИ НЕ ТипЗнч(НастройкиОтбораДереваЗаказов) = Тип("ХранилищеЗначения") 
		ИЛИ НастройкиОтбораДереваЗаказов.Получить() = Неопределено) Тогда
		Для Каждого ТекОтбор Из НастройкиОтбораДереваЗаказов.Получить().Элементы Цикл
		
			Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				Если ТекОтбор.РежимОтображения 
					= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный 
					И ТекОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйОтбор = ЗаказыСписок.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекОтбор);
				СоздатьОтборыСервер(НовыйОтбор, ТекОтбор.Элементы);
			Иначе
				ДоступнаяНастройка = ЗаказыСписок.Отбор.ДоступныеПоляОтбора.НайтиПоле(ТекОтбор.ЛевоеЗначение);

				Если ТекОтбор.РежимОтображения 
					= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный 
					И НЕ ДоступнаяНастройка = Неопределено
					И ДоступнаяНастройка.Заголовок = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
			
				НовыйОтбор = ЗаказыСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекОтбор);
				Если ДоступнаяНастройка = Неопределено Тогда
					НовыйОтбор.Использование = Ложь;
					
					ИспользуютсяНесуществующиеПоля = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользуютсяНесуществующиеПоля Тогда
		ТекстНСТР = НСтр("ru = 'В настройках отбора списка заказов используются несуществующие поля.
		|Рекомендуется удалить несуществующие поля из настроек или заменить их на существующие. 
		|Для этого нажмите кнопку ""Отбор"" на основной панели АРМ.'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	УстановитьВидимостьПанелейРежимаОтображенияМЛ();
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма",
		"уатАРМЛогиста_ВариантНастройки", 
		ВариантНастройки
	);
	
	СтруктураНастроекАРМ = Новый Структура();
	
	СтруктураНастроекАРМ.Вставить("НастройкаАдресВыезда",                                                НастройкаАдресВыезда);
	СтруктураНастроекАРМ.Вставить("НастройкаКластеризации",                                              НастройкаКластеризации);
	СтруктураНастроекАРМ.Вставить("НастройкаКонтрольВременныхОконЗаказов",                               НастройкаКонтрольВременныхОконЗаказов);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяМеждуПунктамиПоУмолчанию",                              НастройкаВремяМеждуПунктамиПоУмолчанию);
	СтруктураНастроекАРМ.Вставить("НастройкаКопийПечатныхФормМЛ",                                        НастройкаКопийПечатныхФормМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов",                НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов);
	СтруктураНастроекАРМ.Вставить("НастройкаАвтоматическийПересчетВремениИРасстояния",                   НастройкаАвтоматическийПересчетВремениИРасстояния);
	СтруктураНастроекАРМ.Вставить("НастройкаОрганизацияМЛ",                                              НастройкаОрганизацияМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаОрганизацияМЛИсточник",                                      НастройкаОрганизацияМЛИсточник);
	СтруктураНастроекАРМ.Вставить("НастройкаОткрыватьФормыДокументов",                                   НастройкаОткрыватьФормыДокументов);
	СтруктураНастроекАРМ.Вставить("НастройкаПечататьМаршрутныеЛисты",                                    НастройкаПечататьМаршрутныеЛисты);
	СтруктураНастроекАРМ.Вставить("НастройкаПечататьСразуНаПринтер",                                     НастройкаПечататьСразуНаПринтер);
	СтруктураНастроекАРМ.Вставить("НастройкаПечатнаяФормаМЛ",                                            НастройкаПечатнаяФормаМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаПриОткрытииЗаполнятьСпискомТС",                              НастройкаПриОткрытииЗаполнятьСпискомТС);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимОптимизации",                                           НастройкаРежимОптимизации);
	СтруктураНастроекАРМ.Вставить("НастройкаСжиматьЗаказы",                                              НастройкаСжиматьЗаказы);
	СтруктураНастроекАРМ.Вставить("НастройкаИндивидуальныйГаражТС",                                      НастройкаИндивидуальныйГаражТС);
	СтруктураНастроекАРМ.Вставить("УчитыватьОграниченияПоЗагрузкеТС",                                    УчитыватьОграниченияПоЗагрузкеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаМаршрутизацияВФоновомРежиме",                                НастройкаМаршрутизацияВФоновомРежиме);
	СтруктураНастроекАРМ.Вставить("УчитыватьETA",                                                        УчитыватьETA);
	СтруктураНастроекАРМ.Вставить("УчитыватьДоступностьТСпоРадиусу",                                     УчитыватьДоступностьТСпоРадиусу);
	СтруктураНастроекАРМ.Вставить("РадиусДоступностиТС",                                                 РадиусДоступностиТС);
	СтруктураНастроекАРМ.Вставить("УчитыватьДоступностьТСпоСостоянию",                                   УчитыватьДоступностьТСпоСостоянию);
	СтруктураНастроекАРМ.Вставить("УчитыватьМодельИТипТС",                                               УчитыватьМодельИТипТС);
	СтруктураНастроекАРМ.Вставить("УчитыватьПросроченныеДокументы",                                      УчитыватьПросроченныеДокументы);
	СтруктураНастроекАРМ.Вставить("ПроверкаПунктаОтправленияВЗоне",                                      ПроверкаПунктаОтправленияВЗоне);
	СтруктураНастроекАРМ.Вставить("ПроверкаПунктаНазначенияВЗоне",                                       ПроверкаПунктаНазначенияВЗоне);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимИзмененияДокументовИзПланировщика",                     НастройкаРежимИзмененияДокументовИзПланировщика);
	СтруктураНастроекАРМ.Вставить("НастройкаВыделятьТекущийЗаказНаПланировщике",                         НастройкаВыделятьТекущийЗаказНаПланировщике);
	СтруктураНастроекАРМ.Вставить("НастройкаАлгоритмМаршрутизации",                                      НастройкаАлгоритмМаршрутизации);
	СтруктураНастроекАРМ.Вставить("НастройкаАлгоритмМаршрутизацииСтрока",                                НастройкаАлгоритмМаршрутизацииСтрока);
	СтруктураНастроекАРМ.Вставить("Детализация",                                                         ДетализацияВЧасах);
	СтруктураНастроекАРМ.Вставить("ПериодАвтообновления",                                                ПериодАвтообновления);
	СтруктураНастроекАРМ.Вставить("ОтображатьЭлектронныеКартыПриОткрытии",                               ОтображатьЭлектронныеКартыПриОткрытии);
	СтруктураНастроекАРМ.Вставить("НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС",     НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяАктуальностиКоординат",                                 НастройкаВремяАктуальностиКоординат);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимДобавленияЗаказовВМаршруты",                            НастройкаРежимДобавленияЗаказовВМаршруты);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальнаяПродолжительностьМаршрута",                      НастройкаМаксимальнаяПродолжительностьМаршрута);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальныйПробегЗаСмену",                                  НастройкаМаксимальныйПробегЗаСмену);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальнаяПродолжительностьСмены",                         НастройкаМаксимальнаяПродолжительностьСмены);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальноеРасстояниеМаршрута",                             НастройкаМаксимальноеРасстояниеМаршрута);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальноеЧислоЗаказовМаршрута",                           НастройкаМаксимальноеЧислоЗаказовМаршрута);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальноеЧислоПунктовМаршрута",                           НастройкаМаксимальноеЧислоПунктовМаршрута);
	СтруктураНастроекАРМ.Вставить("НастройкаМинимальноеКоличествоОстановок",                             НастройкаМинимальноеКоличествоОстановок);
	СтруктураНастроекАРМ.Вставить("НастройкаМаксимальноеКоличествоОстановок",                            НастройкаМаксимальноеКоличествоОстановок);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяВыездаТранспортныхСредств",                             НастройкаВремяВыездаТранспортныхСредств);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяВозвратаТранспортныхСредств",                           НастройкаВремяВозвратаТранспортныхСредств);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяНачалаПланирования",                                    НастройкаВремяНачалаПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяОкончанияПланирования",                                 НастройкаВремяОкончанияПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации",                     НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации);
	СтруктураНастроекАРМ.Вставить("НастройкаСжатияМаксВес",                                              НастройкаСжатияМаксВес);
	СтруктураНастроекАРМ.Вставить("НастройкаСжатияМаксВремя",                                            НастройкаСжатияМаксВремя);
	СтруктураНастроекАРМ.Вставить("НастройкаСжатияМаксОбъем",                                            НастройкаСжатияМаксОбъем);
	СтруктураНастроекАРМ.Вставить("НастройкаСжатияМаксРасстояние",                                       НастройкаСжатияМаксРасстояние);
	СтруктураНастроекАРМ.Вставить("НастройкаСжатияМаксУпак",                                             НастройкаСжатияМаксУпак);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьРазрешенныеТипыТС",                                 НастройкаУчитыватьРазрешенныеТипыТС);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьОкноПогрузкиТерминалов",                            НастройкаУчитыватьОкноПогрузкиТерминалов);
	СтруктураНастроекАРМ.Вставить("НастройкаИспользоватьВПриоритетеСобственныйТранспорт",                НастройкаИспользоватьВПриоритетеСобственныйТранспорт);
	СтруктураНастроекАРМ.Вставить("НастройкаКларкРайтРежимДоставки",                                     НастройкаКларкРайтРежимДоставки);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяВыездаИзГаража",                                        НастройкаВремяВыездаИзГаража);
	СтруктураНастроекАРМ.Вставить("НастройкаПараметрРазмераЗаказа",                                      НастройкаПараметрРазмераЗаказа);
	СтруктураНастроекАРМ.Вставить("НастройкаПриоритетМаршрутизации",                                     НастройкаПриоритетМаршрутизации);
	СтруктураНастроекАРМ.Вставить("НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему",                НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему);
	СтруктураНастроекАРМ.Вставить("НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу",                  НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьГруппировкуВМаршрутномЛисте",                       НастройкаУчитыватьГруппировкуВМаршрутномЛисте);
	СтруктураНастроекАРМ.Вставить("НастройкаВесОтдельнойГруппировки",                                    НастройкаВесОтдельнойГруппировки);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьУпаковкуВПаллетыВМЛ",                               НастройкаУчитыватьУпаковкуВПаллетыВМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему",               НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему);
	СтруктураНастроекАРМ.Вставить("РаспределениеПоМаршрутамУчитыватьКоличество",                         РаспределениеПоМаршрутамУчитыватьКоличество);
	СтруктураНастроекАРМ.Вставить("РаспределениеПоМаршрутамУчитыватьОбъем",                              РаспределениеПоМаршрутамУчитыватьОбъем);
	СтруктураНастроекАРМ.Вставить("РаспределениеПоМаршрутамУчитыватьГрузоподьемность",                   РаспределениеПоМаршрутамУчитыватьГрузоподьемность);
	СтруктураНастроекАРМ.Вставить("РаспределениеПоМаршрутамПонижающийКоэффициентЗагрузкиКузоваПоОбъему", НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему);
	СтруктураНастроекАРМ.Вставить("РаспределениеПоМаршрутамПонижающийКоэффициентЗагрузкиКузоваПоВесу",   НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу);
	СтруктураНастроекАРМ.Вставить("НастройкаКоличествоДнейДоДатыПланирования",                           НастройкаКоличествоДнейДоДатыПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьНаправленияПеревозки",                              НастройкаУчитыватьНаправленияПеревозки);
	СтруктураНастроекАРМ.Вставить("НастройкаИспользоватьРасчетТары",                                     НастройкаИспользоватьРасчетТары);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьСекцииТранспортныхСредств",                         НастройкаУчитыватьСекцииТранспортныхСредств);
	СтруктураНастроекАРМ.Вставить("НастройкаСмешиватьГрузыВСекциях",                                     НастройкаСмешиватьГрузыВСекциях);
	СтруктураНастроекАРМ.Вставить("НастройкаИспользоватьМногорейсовыеМаршруты",                          НастройкаИспользоватьМногорейсовыеМаршруты);
	СтруктураНастроекАРМ.Вставить("НастройкаИспользоватьХарактеристикиЗаказовНаТС",                      НастройкаИспользоватьХарактеристикиЗаказовНаТС);
	СтруктураНастроекАРМ.Вставить("НастройкиВнешнийМаршрутизатор",                                       НастройкиВнешнийМаршрутизатор);
	СтруктураНастроекАРМ.Вставить("НастройкаЧасовойПояс",                                                НастройкаЧасовойПояс);
	СтруктураНастроекАРМ.Вставить("НастройкаКоличествоДнейПланирования",                                 НастройкаКоличествоДнейПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаВременноеОкноДействуетЕжедневно",                            НастройкаВременноеОкноДействуетЕжедневно);
	СтруктураНастроекАРМ.Вставить("НастройкаЗаездНаСкладСобственныеТС",                                  НастройкаЗаездНаСкладСобственныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаЗаездНаСкладПривлеченныеТС",                                 НастройкаЗаездНаСкладПривлеченныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаЗаездНаСкладВиртуальныеТС",                                  НастройкаЗаездНаСкладВиртуальныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВыездСоСкладаСобственныеТС",                                 НастройкаВыездСоСкладаСобственныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВыездСоСкладаПривлеченныеТС",                                НастройкаВыездСоСкладаПривлеченныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВыездСоСкладаВиртуальныеТС",                                 НастройкаВыездСоСкладаВиртуальныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВыездИзГаражаСобственныеТС",                                 НастройкаВыездИзГаражаСобственныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВыездИзГаражаПривлеченныеТС",                                НастройкаВыездИзГаражаПривлеченныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВыездИзГаражаВиртуальныеТС",                                 НастройкаВыездИзГаражаВиртуальныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВозвратВГаражСобственныеТС",                                 НастройкаВозвратВГаражСобственныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВозвратВГаражПривлеченныеТС",                                НастройкаВозвратВГаражПривлеченныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВозвратВГаражВиртуальныеТС",                                 НастройкаВозвратВГаражВиртуальныеТС);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьГруппыСовместимости",                               НастройкаУчитыватьГруппыСовместимости);
	СтруктураНастроекАРМ.Вставить("НастройкаГруппироватьПунктыВОднуМашину",                              НастройкаГруппироватьПунктыВОднуМашину);
	СтруктураНастроекАРМ.Вставить("НастройкаСохранятьЭтапыМаршрутизации",                                НастройкаСохранятьЭтапыМаршрутизации);
	СтруктураНастроекАРМ.Вставить("НастройкаУказыватьНаименованиеЭтапаВручную",                          НастройкаУказыватьНаименованиеЭтапаВручную);
	СтруктураНастроекАРМ.Вставить("НастройкаУстанавливатьФлагСозданАвтоматическиМЛ",                     НастройкаУстанавливатьФлагСозданАвтоматическиМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаДействиеСПросроченнымиЗаказами",                             НастройкаДействиеСПросроченнымиЗаказами);
	СтруктураНастроекАРМ.Вставить("НастройкаУчетЖесткихГабаритовГруза",                                  НастройкаУчетЖесткихГабаритовГруза);
	СтруктураНастроекАРМ.Вставить("НастройкаУчетЖесткихГабаритовГрузаНастройка",                         НастройкаУчетЖесткихГабаритовГрузаНастройка);
	СтруктураНастроекАРМ.Вставить("ПланировщикГруппировка",                                              ПланировщикГруппировка);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизацииНастройка",            НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизацииНастройка);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPFirstSolutionStrategy",                              НастройкаRarusVRPFirstSolutionStrategy);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPРежимЗапуска",                                       НастройкаRarusVRPРежимЗапуска);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPПередаватьРасстояния",                               НастройкаRarusVRPПередаватьРасстояния);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPЛимитВремени",                                       НастройкаRarusVRPЛимитВремени);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPLocalSearchMetaheuristic",                           НастройкаRarusVRPLocalSearchMetaheuristic);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPСредняяСкорость",                                    НастройкаRarusVRPСредняяСкорость);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPТипПунктовГеозон",                                   НастройкаRarusVRPТипПунктовГеозон);
	СтруктураНастроекАРМ.Вставить("НастройкаRarusVRPУчитыватьПропускнуюСпособностьСклада",               НастройкаRarusVRPУчитыватьПропускнуюСпособностьСклада);
	СтруктураНастроекАРМ.Вставить("НастройкаНеРассчитыватьВыработку",                                    НастройкаНеРассчитыватьВыработку);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимДопланирования",                                        НастройкаРежимДопланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаНесколькоМаршрутныхЛистовНаТС",                              НастройкаНесколькоМаршрутныхЛистовНаТС);
	СтруктураНастроекАРМ.Вставить("НастройкаПредставлениеЗаказаНаТС",                                    НастройкаПредставлениеЗаказаНаТС);
	СтруктураНастроекАРМ.Вставить("НастрокаРежимОтображенияМЛ",                                          НастройкаРежимОтображенияМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаЗаполненияСпискаЗаказов",                                    НастройкаЗаполненияСпискаЗаказов);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимОткрытияКарты",                                         НастройкаРежимОткрытияКарты);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимОткрытияПланировщика",                                  НастройкаРежимОткрытияПланировщика);
	СтруктураНастроекАРМ.Вставить("НастройкаИспользоватьЗакреплениеТСЗаказовНаТСзаГеозонами",            НастройкаИспользоватьЗакреплениеТСЗаказовНаТСзаГеозонами);
	СтруктураНастроекАРМ.Вставить("НастройкаПривязкаКГеозоне",                                           НастройкаПривязкаКГеозоне);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьМаксимальноеКоличествоГрузов",                      НастройкаУчитыватьМаксимальноеКоличествоГрузов);
	СтруктураНастроекАРМ.Вставить("НастройкаУчитыватьМаксимальноеКоличествоУпаковок",                    НастройкаУчитыватьМаксимальноеКоличествоУпаковок);
	СтруктураНастроекАРМ.Вставить("НастройкаУчетГеозон",                                                 НастройкаУчетГеозон);
	
	СтруктураНастроекАРМ.Вставить("ОтборПоЗонамХранилище", Новый ХранилищеЗначения(РеквизитФормыВЗначение("ОтборЗоны")));
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма", 
		"уатАРМЛогиста_Настройки", 
		СтруктураНастроекАРМ
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМЛогистаНовый_уэ.Форма.ОсновнаяФорма",
		"уатАРМЛогиста_НастройкиКомпоновщика_Отбор",
		Новый ХранилищеЗначения(ЗаказыСписок.Отбор)
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМЛогистаНовый_уэ.Форма.ОсновнаяФорма",
		"уатАРМЛогиста_НастройкиКомпоновщика_Порядок",
		Новый ХранилищеЗначения(ЗаказыСписок.Порядок)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаказов(ОбновлениеИтогов = Истина)
	
	ИтогоЗаказов = 0;
	ИтогоВес     = 0;
	ИтогоОбъем   = 0;
	ИтогоКолМест = 0;

	СоответсвиеЗаказов = Новый Соответствие();
	мОтмеченныеЗаказы  = Новый Массив();
	
	МассивЗаказовСОтборомПоДопХарактеристикам = Новый Массив();
	МассивГрузовСОтборомПоДопХарактеристикам  = Новый Массив();
	
	ФлагЕстьИзменения = Истина;
	
	Если НЕ СнятьОтметкиСоВсехЗаказов Тогда
		
		ФлагЕстьИзменения = Ложь;
		
		Если ОбновлениеИтогов Тогда
			ИтогоЗаказовВсего      = 0;
			ИтогоЗаказовСтрокВсего = 0;
			ИтогоВесВсего          = 0;
			ИтогоОбъемВсего        = 0;
			ИтогоКолМестВсего      = 0;
		КонецЕсли;
	
		Если УстановитьОтборГрМестаЗаказыПоДопХарактеристикам Тогда
			КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов,
			МассивРаспределенныхЗаказов,
			МассивЗаказовСОтборомПоДопХарактеристикам, МассивГрузовСОтборомПоДопХарактеристикам, ОтборПоСвойствамЗаказа,
			ОтборПоСвойствамГруза);
		Иначе
			Если ОбновлениеИтогов Тогда
				КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов,
					МассивРаспределенныхЗаказов);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлениеИтогов Тогда
			Для Каждого ТекСтрока Из КомпоновщикСпискаЗаказов Цикл 
				
				СоответсвиеЗаказов.Вставить(ТекСтрока.Ссылка);
				
				ИтогоВесВсего     = ИтогоВесВсего     + ТекСтрока.ВесБрутто;
				ИтогоОбъемВсего   = ИтогоОбъемВсего   + ТекСтрока.Объем;
				ИтогоКолМестВсего = ИтогоКолМестВсего + ТекСтрока.КоличествоМест;
				ИтогоЗаказовСтрокВсего = ИтогоЗаказовСтрокВсего + 1;
				
				КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
				ТекСтрока.Ссылка, ТекСтрока.ИдентификаторСтроки);
				Если ОтметитьВсеЗаказы Тогда
					ФлагЕстьИзменения = Истина;
					ОтметитьЗаказ(ТекСтрока, КлючСтроки);
				Иначе
					мОтмеченныеЗаказы.Добавить(КлючСтроки);
				КонецЕсли;
				
				Если ОтмеченныеЗаказы.Найти(КлючСтроки) <> Неопределено Тогда
					ИтогоВес     = ИтогоВес     + ТекСтрока.ВесБрутто;
					ИтогоОбъем   = ИтогоОбъем   + ТекСтрока.Объем;
					ИтогоКолМест = ИтогоКолМест + ТекСтрока.КоличествоМест;
					
					ИтогоЗаказов = ИтогоЗаказов + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОтметитьВсеЗаказы Тогда
				МассивДляУдаления = Новый Массив();
				Для Каждого ТекСтрока Из ОтмеченныеЗаказы Цикл
					Если мОтмеченныеЗаказы.Найти(ТекСтрока) = Неопределено Тогда
						МассивДляУдаления.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТекСтрока Из МассивДляУдаления Цикл
					СнятьОтметкуСЗаказа(,ТекСтрока);
					ФлагЕстьИзменения = Истина;
				КонецЦикла;
			КонецЕсли;
			
			ИтогоЗаказовВсего = СоответсвиеЗаказов.Количество();
		КонецЕсли;
	
		Если УстановитьОтборГрМестаЗаказыПоДопХарактеристикам Тогда
			УстановитьОтборГрМестаЗаказыПоДопХарактеристикам(МассивЗаказовСОтборомПоДопХарактеристикам, МассивГрузовСОтборомПоДопХарактеристикам);
		КонецЕсли;
	КонецЕсли;

	Если ФлагЕстьИзменения Тогда
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
	КонецЕсли;
	Элементы.ЗаказыСписок.Обновить();

	СводнаяИнформацияКоличествоЗаказов = "";
	СводнаяИнформацияВесЗаказов        = "";
	СводнаяИнформацияОбъемЗаказов      = "";
	СводнаяИнформацияКоличествоМест    = "";

	Если ИтогоЗаказовСтрокВсего = 0 Тогда
		Возврат;
	КонецЕсли;

	СводнаяИнформацияКоличествоЗаказов = ?(ИтогоЗаказовСтрокВсего <> ИтогоЗаказовВсего, 
	СтрШаблон(Нстр("ru = 'Выделено: %1 / %2; Заказов: %3'"),
	ИтогоЗаказов, ИтогоЗаказовСтрокВсего, ИтогоЗаказовВсего),
	СтрШаблон(Нстр("ru = 'Выделено: %1 / %2'"),
	ИтогоЗаказов, ИтогоЗаказовСтрокВсего));
	СводнаяИнформацияВесЗаказов        = Строка(ИтогоВес) + " / " + ИтогоВесВсего;
	СводнаяИнформацияОбъемЗаказов      = Строка(ИтогоОбъем) + " / " + ИтогоОбъемВсего;
	СводнаяИнформацияКоличествоМест    = Строка(ИтогоКолМест) + " / " + ИтогоКолМестВсего;

	ОтметитьВсеЗаказы                                = Ложь;
	СнятьОтметкиСоВсехЗаказов                        = Ложь;
	УстановитьОтборГрМестаЗаказыПоДопХарактеристикам = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИтоговыеДанныеПоЗаказамКлиент(ТекСтрокаЗаказ, ОтметитьСтрокуЗаказа = Истина)
	
	Если ОтметитьСтрокуЗаказа Тогда
		ИтогоВес     = ИтогоВес     + Окр(ТекСтрокаЗаказ.ВесБрутто, 3);
		ИтогоОбъем   = ИтогоОбъем   + Окр(ТекСтрокаЗаказ.Объем, 3);
		ИтогоКолМест = ИтогоКолМест + Окр(ТекСтрокаЗаказ.КоличествоМест, 3);
		
		ИтогоЗаказов = ИтогоЗаказов + 1;
	Иначе
		ИтогоВес     = ИтогоВес     - Окр(ТекСтрокаЗаказ.ВесБрутто, 3);
		ИтогоОбъем   = ИтогоОбъем   - Окр(ТекСтрокаЗаказ.Объем, 3);
		ИтогоКолМест = ИтогоКолМест - Окр(ТекСтрокаЗаказ.КоличествоМест, 3);
		
		ИтогоЗаказов = ИтогоЗаказов - 1;
		
	КонецЕсли;
	
	СводнаяИнформацияКоличествоЗаказов = ?(ИтогоЗаказовСтрокВсего <> ИтогоЗаказовВсего, 
	СтрШаблон(Нстр("ru = 'Выделено: %1 / %2; Заказов: %3'"),
			ИтогоЗаказов, ИтогоЗаказовСтрокВсего, ИтогоЗаказовВсего),
		СтрШаблон(Нстр("ru = 'Выделено: %1 / %2'"),
			ИтогоЗаказов, ИтогоЗаказовСтрокВсего));
	СводнаяИнформацияВесЗаказов        = Строка(ИтогоВес) + " / " + ИтогоВесВсего;
	СводнаяИнформацияОбъемЗаказов      = Строка(ИтогоОбъем) + " / " + ИтогоОбъемВсего;
	СводнаяИнформацияКоличествоМест    = Строка(ИтогоКолМест) + " / " + ИтогоКолМестВсего;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборГрМестаЗаказыПоДопХарактеристикам(МассивЗаказовСОтборомПоДопХарактеристикам,
	МассивГрузовСОтборомПоДопХарактеристикам)
	
	ОтборСписка = ЗаказыСписок.Отбор.Элементы;

	флЕстьИзменения = Ложь;
	Если ОтборПоСвойствамЗаказа.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = МассивЗаказовСОтборомПоДопХарактеристикам;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		флЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ОтборПоСвойствамГруза.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
		
		ГруппаЭлементовОтбора = ОтборСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ОтборСписка = ГруппаЭлементовОтбора.Элементы;

		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("ДетализацияЗакрытия");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение     =
			ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам");
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("Груз");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = МассивГрузовСОтборомПоДопХарактеристикам;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		флЕстьИзменения = Истина;
	КонецЕсли;
	
	Если флЕстьИзменения Тогда
		ОбновитьАдресНастройкиКомпоновкиДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИтоговыеДанныеПоМаршрутам()
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОтобразитьИтоговыеДанныеПоМаршрутамДерево();
	Иначе
		ОтобразитьИтоговыеДанныеПоМаршрутамСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИтоговыеДанныеПоМаршрутамСписок()
	
	ИтогоМаршрутыЗадействованоТС = 0;
	ИтогоМаршрутыВсегоТС         = 0;
	ИтогоМаршрутыМЛ              = 0;
	ИтогоМаршрутыРасстояние      = 0;
	ИтогоМаршрутыВремяВПути      = 0;
	ИтогоМаршрутыВремяСтоянок    = 0;
	ИтогоМаршрутыВремяВсего      = 0;
	ИтогоМаршрутыЗаказов         = 0;
	
	ИтогоМаршрутыВес             = 0;
	ИтогоМаршрутыВесВсего        = 0;
	ИтогоМаршрутыОбъем           = 0;
	ИтогоМаршрутыОбъемВсего      = 0;
	ИтогоМаршрутыКолМест         = 0;
	ИтогоМаршрутыВремяОжидания   = 0;
	ИтогоПунктовПогрузки         = 0;
	ИтогоПунктовРазгрузки        = 0;
	ИтогоМаршрутыКолМестВсего    = 0;
	
	СводнаяИнформацияЗаказы           = "";
	СводнаяИнформацияВесМЛ            = "";
	СводнаяИнформацияОбьемМЛ          = "";
	СводнаяИнформацияКоличествоМестМЛ = "";
	СводнаяИнформацияКоличествоМЛ     = "";
	СводнаяИнформацияРасстояние       = "";
	СводнаяИнформацияКоличествоТС     = "";
	СводнаяИнформацияВремяВПути       = "";
	СводнаяИнформацияПункты           = "";
	
	Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
		ИтогоМаршрутыВсегоТС      = ИтогоМаршрутыВсегоТС + 1;
		ИтогоМаршрутыВесВсего     = ИтогоМаршрутыВесВсего     + ТекСтрокаТС.Грузоподъемность;
		ИтогоМаршрутыОбъемВсего   = ИтогоМаршрутыОбъемВсего   + ТекСтрокаТС.ОбъемКузова;
		ИтогоМаршрутыКолМестВсего = ИтогоМаршрутыКолМестВсего + ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
		
		Если ЗначениеЗаполнено(ТекСтрокаТС.МЛ)
			ИЛИ ТекСтрокаТС.НовыйМЛ Тогда
			ИтогоМаршрутыМЛ              = ИтогоМаршрутыМЛ + 1;
			ИтогоМаршрутыЗадействованоТС = ИтогоМаршрутыЗадействованоТС + 1;
			
			ИтогоМаршрутыЗаказов       = ИтогоМаршрутыЗаказов + ТекСтрокаТС.КоличествоЗаказов;
		
			ИтогоМаршрутыВремяВПути    = СложитьВремя(ИтогоМаршрутыВремяВПути, ТекСтрокаТС.ВремяВПути);
			ИтогоМаршрутыРасстояние    = ИтогоМаршрутыРасстояние + ТекСтрокаТС.Расстояние;

			ИтогоМаршрутыВес           = ИтогоМаршрутыВес     + ТекСтрокаТС.ВесБрутто;
			ИтогоМаршрутыОбъем         = ИтогоМаршрутыОбъем   + ТекСтрокаТС.Объем;
			ИтогоМаршрутыКолМест       = ИтогоМаршрутыКолМест + ТекСтрокаТС.КолМест;
		КонецЕсли;
	КонецЦикла;
	
	Если МаршрутыСписок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СводнаяИнформацияЗаказы           = Строка(ИтогоМаршрутыЗаказов);
	СводнаяИнформацияВесМЛ            = Строка(ИтогоМаршрутыВес) + " / " + ИтогоМаршрутыВесВсего;
	СводнаяИнформацияОбьемМЛ          = Строка(ИтогоМаршрутыОбъем) + " / " + ИтогоМаршрутыОбъемВсего;
	СводнаяИнформацияКоличествоМестМЛ = Строка(ИтогоМаршрутыКолМест) + " / " + ИтогоМаршрутыКолМестВсего;
	СводнаяИнформацияКоличествоМЛ     = Строка(ИтогоМаршрутыМЛ);
	СводнаяИнформацияРасстояние       = Строка(ИтогоМаршрутыРасстояние);
	СводнаяИнформацияКоличествоТС     = СтрШаблон(НСтр("ru = 'Задействовано ТС: %1 / %2'"),
	ИтогоМаршрутыЗадействованоТС, ИтогоМаршрутыВсегоТС);
	СводнаяИнформацияВремяВПути       = Формат(ИтогоМаршрутыВремяВПути, "ЧДЦ=2; ЧРД=:");
	СводнаяИнформацияПункты           = Строка(ИтогоПунктовПогрузки) + " / " + ИтогоПунктовРазгрузки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесоОбъемныеХарактеристикиМаршрута(ВеткаТС = Неопределено)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьВесоОбъемныеХарактеристикиМаршрутаДерево(ВеткаТС);
	Иначе
		ОбновитьВесоОбъемныеХарактеристикиМаршрутаСписок(ВеткаТС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесоОбъемныеХарактеристикиМаршрутаСписок(ВеткаТС = Неопределено)
	
	Если ВеткаТС = Неопределено Тогда
		Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
			ОбновитьВесоОбъемныеХарактеристикиМаршрутаСписок(ТекСтрокаТС);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	мВесПоТС        = 0;
	мОбъемПоТС      = 0;
	мМестПоТС       = 0;
	мКолЗаказовПоТС = 0;
	
	ПунктовПогрузкиПоТС  = 0;
	ПунктовРазгрузкиПоТС = 0;
		
	НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ		 = НастройкаМаксимальноеЧислоЗаказовМаршрута;
	НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ = НастройкаМаксимальнаяПродолжительностьМаршрута;
	НастройкаМаксимальноеРасстояниеМаршрутаМЛ		 = НастройкаМаксимальноеРасстояниеМаршрута;
	
	мВесПоМЛ             = 0;
	мОбъемПоМЛ           = 0;
	мМестПоМЛ            = 0;
	мКолЗаказовПоМЛ      = 0;
	ПунктовПогрузкиПоМЛ  = 0;
	ПунктовРазгрузкиПоМЛ = 0;
	
	мВесПоПункту        = 0;
	мОбъемПоПункту      = 0;
	мМестПоПункту       = 0;
	мКолЗаказовПоПункту = 0;

	кэшЗаказов.Очистить();
	
	ЭлементыВеткаМЛ    = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ВеткаТС.GUID));
	МассивСтрокПунктов = Новый Массив();
	МассивСтрокЗаказов = Новый Массив();
	Для Каждого ТекСтрокаЗаказа Из ЭлементыВеткаМЛ Цикл
		Если ТекСтрокаЗаказа.УровеньДерева = "Пункт" Тогда
			МассивСтрокПунктов.Добавить(ТекСтрокаЗаказа);
		КонецЕсли;
		Если ТекСтрокаЗаказа.УровеньДерева = "Заказ" Тогда
			МассивСтрокЗаказов.Добавить(ТекСтрокаЗаказа);
		Иначе
			НоваяСтрокаЗаказа = кэшЗаказов.Добавить();
			НоваяСтрокаЗаказа.GUIDТС        = ТекСтрокаЗаказа.GUIDТС;
			НоваяСтрокаЗаказа.GUIDПункта    = ТекСтрокаЗаказа.GUIDПункта;
			НоваяСтрокаЗаказа.GUIDЗаказа    = ТекСтрокаЗаказа.GUIDЗаказа;
			НоваяСтрокаЗаказа.УровеньДерева = ТекСтрокаЗаказа.УровеньДерева;
			НоваяСтрокаЗаказа.ВесБрутто     = ТекСтрокаЗаказа.ВесБрутто;
			НоваяСтрокаЗаказа.Объем         = ТекСтрокаЗаказа.Объем;
			НоваяСтрокаЗаказа.КолМест       = ТекСтрокаЗаказа.КолМест;
			НоваяСтрокаЗаказа.Этап          = ТекСтрокаЗаказа.Этап;
			НоваяСтрокаЗаказа.Расстояние    = ТекСтрокаЗаказа.Расстояние;
			НоваяСтрокаЗаказа.ВремяВПути    = ТекСтрокаЗаказа.ВремяВПути;
			НоваяСтрокаЗаказа.Операция      = ТекСтрокаЗаказа.Операция;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекСтрокаПункт Из МассивСтрокПунктов Цикл
		
		флПогрузки  = Ложь;
		флРазгрузки = Ложь;
		
		Для Каждого ТекСтрокаЗаказ Из МассивСтрокЗаказов Цикл
			Если ТекСтрокаЗаказ.GUIDПункта <> ТекСтрокаПункт.GUIDПункта Тогда
				Продолжить;
			КонецЕсли;
			мВесПоЗаказу   = 0;
			мОбъемПоЗаказу = 0;
			мМестПоЗаказу  = 0;
						
			ЭлементыВеткаНоменклатура = кэшЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта,
				|GUIDЗаказа, УровеньДерева",
				ВеткаТС.GUID, ТекСтрокаПункт.GUIDПункта, ТекСтрокаЗаказ.GUIDЗаказа, "Номенклатура"));
			Если ЭлементыВеткаНоменклатура.Количество() <> 0 Тогда
				Для Каждого ТекСтрокаГруз Из ЭлементыВеткаНоменклатура Цикл 
					мВесПоЗаказу   = мВесПоЗаказу + ТекСтрокаГруз.ВесБрутто;
					мОбъемПоЗаказу = мОбъемПоЗаказу + ТекСтрокаГруз.Объем;
					мМестПоЗаказу  = мМестПоЗаказу + ТекСтрокаГруз.КолМест;
				КонецЦикла;
			Иначе
				мВесПоЗаказу   = ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоЗаказу = ТекСтрокаЗаказ.Объем;
				мМестПоЗаказу  = ТекСтрокаЗаказ.КолМест;
			КонецЕсли;
			
			Если Не мВесПоЗаказу = 0 Тогда 
				ТекСтрокаЗаказ.ВесБрутто = мВесПоЗаказу;
			КонецЕсли;
			Если Не мОбъемПоЗаказу = 0 Тогда 
				ТекСтрокаЗаказ.Объем = мОбъемПоЗаказу;
			КонецЕсли;
			Если Не мМестПоЗаказу = 0 Тогда 
				ТекСтрокаЗаказ.КолМест = мМестПоЗаказу;
			КонецЕсли;

			Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
				мВесПоПункту        = мВесПоПункту + ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоПункту      = мОбъемПоПункту + ТекСтрокаЗаказ.Объем;
				мМестПоПункту       = мМестПоПункту + ТекСтрокаЗаказ.КолМест;
				мКолЗаказовПоПункту = мКолЗаказовПоПункту + 1;
				
				мВесПоМЛ        = мВесПоМЛ + ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоМЛ      = мОбъемПоМЛ + ТекСтрокаЗаказ.Объем;
				мМестПоМЛ       = мМестПоМЛ + ТекСтрокаЗаказ.КолМест;
				мКолЗаказовПоМЛ = мКолЗаказовПоМЛ + 1;
				
				флПогрузки      = Истина;
			ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
				мВесПоПункту        = мВесПоПункту - ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоПункту      = мОбъемПоПункту - ТекСтрокаЗаказ.Объем;
				мМестПоПункту       = мМестПоПункту - ТекСтрокаЗаказ.КолМест;
				мКолЗаказовПоПункту = мКолЗаказовПоПункту - 1;
				
				флРазгрузки         = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если флПогрузки Тогда
			ТекСтрокаПункт.Погрузка = 1;
			ПунктовПогрузкиПоМЛ     = ПунктовПогрузкиПоМЛ + 1;
		КонецЕсли;
		
		Если флРазгрузки Тогда
			ТекСтрокаПункт.Разгрузка = 1;
			ПунктовРазгрузкиПоМЛ     = ПунктовРазгрузкиПоМЛ + 1;
		КонецЕсли;
		
		ТекСтрокаПункт.ВесБрутто         = мВесПоПункту;
		ТекСтрокаПункт.Объем             = мОбъемПоПункту;
		ТекСтрокаПункт.КоличествоЗаказов = мКолЗаказовПоПункту;
		ТекСтрокаПункт.КолМест           = мМестПоПункту;
		
		ТекСтрокаПункт.ПогрузкаРазгрузкаПредставление = Строка(ТекСтрокаПункт.Погрузка) + " / " + Строка(ТекСтрокаПункт.Разгрузка);
		
		ТекСтрокаПункт.ПроцентЗагрузкиВес     = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ТекСтрокаПункт.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентЗагрузкиОбъем   = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ТекСтрокаПункт.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентКоличЗаказов    = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентПротяженность   = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентВремяВРаботе    = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ТекСтрокаПункт.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
	КонецЦикла;
	
	ВеткаТС.ВесБрутто         = мВесПоМЛ;
	ВеткаТС.Объем             = мОбъемПоМЛ;
	ВеткаТС.КоличествоЗаказов = мКолЗаказовПоМЛ;
	ВеткаТС.КолМест           = мМестПоМЛ;
	
	ВеткаТС.Погрузка          = ПунктовПогрузкиПоМЛ;
	ВеткаТС.Разгрузка         = ПунктовРазгрузкиПоМЛ;
	
	мВесПоТС        = мВесПоТС + ВеткаТС.ВесБрутто;
	мОбъемПоТС      = мОбъемПоТС + ВеткаТС.Объем;
	мМестПоТС       = мМестПоТС + ВеткаТС.КолМест;
	мКолЗаказовПоТС = мКолЗаказовПоТС + ВеткаТС.КоличествоЗаказов;
	ПунктовПогрузкиПоТС  = ПунктовПогрузкиПоТС + ВеткаТС.Погрузка;
	ПунктовРазгрузкиПоТС = ПунктовРазгрузкиПоТС + ВеткаТС.Разгрузка;

	
	ВеткаТС.ВесБрутто         = мВесПоТС;
	ВеткаТС.Объем             = мОбъемПоТС;
	ВеткаТС.КолМест           = мМестПоТС;
	ВеткаТС.КоличествоЗаказов = мКолЗаказовПоТС;
	
	ВеткаТС.Погрузка          = ПунктовПогрузкиПоТС;
	ВеткаТС.Разгрузка         = ПунктовРазгрузкиПоТС;
	
	ВеткаТС.ПроцентЗагрузкиВес     = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ВеткаТС.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентЗагрузкиОбъем   = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ВеткаТС.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентКоличЗаказов    = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ВеткаТС.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентПротяженность   = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ВеткаТС.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентВремяВРаботе    = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ВеткаТС.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ВеткаТС.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
	
	ВеткаТС.ВесПредставление   = Строка(ВеткаТС.ВесБрутто) + " / " + Строка(ВеткаТС.Грузоподъемность);
	ВеткаТС.ОбъемПредставление = Строка(ВеткаТС.Объем) + " / " + Строка(ВеткаТС.ОбъемКузова);
	
	ВеткаТС.ПогрузкаРазгрузкаПредставление = Строка(ВеткаТС.Погрузка) + " / " + Строка(ВеткаТС.Разгрузка);
	
	ВеткаТС.КоличЗаказовПредставление = Строка(ВеткаТС.КоличествоЗаказов) + " / " + Строка(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ);
	
	ВеткаТС.КоличествоУпаковокПредставление = Строка(ВеткаТС.КолМест) + " / " + Строка(ВеткаТС.МаксимальноеКоличествоУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесоОбъемныеХарактеристикиМаршрутаДерево(ВеткаТС = Неопределено)
	
	Если ВеткаТС = Неопределено Тогда
		Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			ОбновитьВесоОбъемныеХарактеристикиМаршрутаДерево(ТекСтрокаТС);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	мВесПоТС        = 0;
	мОбъемПоТС      = 0;
	мМестПоТС       = 0;
	мКолЗаказовПоТС = 0;
	
	ПунктовПогрузкиПоТС  = 0;
	ПунктовРазгрузкиПоТС = 0;
	
	Если ТипЗнч(ВеткаТС) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыВеткаТС = ВеткаТС.ПолучитьЭлементы();
	КолвоМЛ = ЭлементыВеткаТС.Количество();
	КолвоМЛ = ?(КолвоМЛ = 0, 1, КолвоМЛ);
	
	Если КолвоМЛ > 1 Тогда
		СтруктураХарактеристик = ПолучитьСуммарныеХарактеристикиСцепки(ВеткаТС.ТС, ВеткаТС.Прицеп1, ВеткаТС.Прицеп2,
			НастройкаАлгоритмМаршрутизации, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
		ВеткаТС.Грузоподъемность						 = СтруктураХарактеристик.Грузоподъемность * КолвоМЛ;
		ВеткаТС.ОбъемКузова								 = СтруктураХарактеристик.ОбъемКузова * КолвоМЛ;
		ВеткаТС.МаксимальноеКоличествоУпаковок			 = СтруктураХарактеристик.МаксимальноеКоличествоУпаковок * КолвоМЛ;
	Иначе
		ВеткаТС.Грузоподъемность						 = ВеткаТС.Грузоподъемность * КолвоМЛ;
		ВеткаТС.ОбъемКузова								 = ВеткаТС.ОбъемКузова * КолвоМЛ;
		ВеткаТС.МаксимальноеКоличествоУпаковок			 = ВеткаТС.МаксимальноеКоличествоУпаковок * КолвоМЛ;
	КонецЕсли;
	
	НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ		 = НастройкаМаксимальноеЧислоЗаказовМаршрута * КолвоМЛ;
	НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ = НастройкаМаксимальнаяПродолжительностьМаршрута * КолвоМЛ;
	НастройкаМаксимальноеРасстояниеМаршрутаМЛ		 = НастройкаМаксимальноеРасстояниеМаршрута * КолвоМЛ;
	
	Для Каждого ТекСтрокаМЛ Из ЭлементыВеткаТС Цикл
		мВесПоМЛ             = 0;
		мОбъемПоМЛ           = 0;
		мМестПоМЛ            = 0;
		мКолЗаказовПоМЛ      = 0;
		ПунктовПогрузкиПоМЛ  = 0;
		ПунктовРазгрузкиПоМЛ = 0;
		
		мВесПоПункту        = 0;
		мОбъемПоПункту      = 0;
		мМестПоПункту       = 0;
		мКолЗаказовПоПункту = 0;
		Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.ПолучитьЭлементы() Цикл 
			
			флПогрузки  = Ложь;
			флРазгрузки = Ложь;
			
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл 
				мВесПоЗаказу   = 0;
				мОбъемПоЗаказу = 0;
				мМестПоЗаказу  = 0;

				Для Каждого ТекСтрокаГруз Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл 
					мВесПоЗаказу   = мВесПоЗаказу + ТекСтрокаГруз.ВесБрутто;
					мОбъемПоЗаказу = мОбъемПоЗаказу + ТекСтрокаГруз.Объем;
					мМестПоЗаказу  = мМестПоЗаказу + ТекСтрокаГруз.КолМест;
				КонецЦикла;
				Если Не мВесПоЗаказу = 0 Тогда 
					ТекСтрокаЗаказ.ВесБрутто = мВесПоЗаказу;
				КонецЕсли;
				Если Не мОбъемПоЗаказу = 0 Тогда 
					ТекСтрокаЗаказ.Объем = мОбъемПоЗаказу;
				КонецЕсли;
				Если Не мМестПоЗаказу = 0 Тогда 
					ТекСтрокаЗаказ.КолМест = мМестПоЗаказу;
				КонецЕсли;
				
				Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
					мВесПоПункту        = мВесПоПункту + ТекСтрокаЗаказ.ВесБрутто;
					мОбъемПоПункту      = мОбъемПоПункту + ТекСтрокаЗаказ.Объем;
					мМестПоПункту       = мМестПоПункту + ТекСтрокаЗаказ.КолМест;
					мКолЗаказовПоПункту = мКолЗаказовПоПункту + 1;
					
					мВесПоМЛ        = мВесПоМЛ + ТекСтрокаЗаказ.ВесБрутто;
					мОбъемПоМЛ      = мОбъемПоМЛ + ТекСтрокаЗаказ.Объем;
					мМестПоМЛ       = мМестПоМЛ + ТекСтрокаЗаказ.КолМест;
					мКолЗаказовПоМЛ = мКолЗаказовПоМЛ + 1;
					
					флПогрузки      = Истина;
				ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
					мВесПоПункту        = мВесПоПункту - ТекСтрокаЗаказ.ВесБрутто;
					мОбъемПоПункту      = мОбъемПоПункту - ТекСтрокаЗаказ.Объем;
					мМестПоПункту       = мМестПоПункту - ТекСтрокаЗаказ.КолМест;
					мКолЗаказовПоПункту = мКолЗаказовПоПункту - 1;
					
					флРазгрузки         = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если флПогрузки Тогда
				ТекСтрокаПункт.Погрузка = 1;
				ПунктовПогрузкиПоМЛ     = ПунктовПогрузкиПоМЛ + 1;
			КонецЕсли;
			
			Если флРазгрузки Тогда
				ТекСтрокаПункт.Разгрузка = 1;
				ПунктовРазгрузкиПоМЛ     = ПунктовРазгрузкиПоМЛ + 1;
			КонецЕсли;
							
			ТекСтрокаПункт.ВесБрутто         = мВесПоПункту;
			ТекСтрокаПункт.Объем             = мОбъемПоПункту;
			ТекСтрокаПункт.КоличествоЗаказов = мКолЗаказовПоПункту;
			ТекСтрокаПункт.КолМест           = мМестПоПункту;
			
			ТекСтрокаПункт.ПогрузкаРазгрузкаПредставление = Строка(ТекСтрокаПункт.Погрузка) + " / " + Строка(ТекСтрокаПункт.Разгрузка);
			
			ТекСтрокаПункт.ПроцентЗагрузкиВес     = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ТекСтрокаПункт.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
			ТекСтрокаПункт.ПроцентЗагрузкиОбъем   = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ТекСтрокаПункт.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
			ТекСтрокаПункт.ПроцентКоличЗаказов    = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
			ТекСтрокаПункт.ПроцентПротяженность   = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
			ТекСтрокаПункт.ПроцентВремяВРаботе    = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
			ТекСтрокаПункт.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ТекСтрокаПункт.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
		КонецЦикла;
		
		ТекСтрокаМЛ.ВесБрутто         = мВесПоМЛ;
		ТекСтрокаМЛ.Объем             = мОбъемПоМЛ;
		ТекСтрокаМЛ.КоличествоЗаказов = мКолЗаказовПоМЛ;
		ТекСтрокаМЛ.КолМест           = мМестПоМЛ;
		
		ТекСтрокаМЛ.Погрузка          = ПунктовПогрузкиПоМЛ;
		ТекСтрокаМЛ.Разгрузка         = ПунктовРазгрузкиПоМЛ;
		
		ТекСтрокаМЛ.ПроцентЗагрузкиВес   = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ТекСтрокаМЛ.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаМЛ.ПроцентЗагрузкиОбъем = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ТекСтрокаМЛ.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаМЛ.ПроцентПротяженность = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ТекСтрокаМЛ.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаМЛ.ПроцентВремяВРаботе  = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ТекСтрокаМЛ.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		
		ТекСтрокаМЛ.ПогрузкаРазгрузкаПредставление = Строка(ТекСтрокаМЛ.Погрузка) + " / " + Строка(ТекСтрокаМЛ.Разгрузка);

		ТекСтрокаМЛ.ПроцентКоличЗаказов  = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ТекСтрокаМЛ.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		
		ТекСтрокаМЛ.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ТекСтрокаМЛ.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
		
		мВесПоТС        = мВесПоТС + ТекСтрокаМЛ.ВесБрутто;
		мОбъемПоТС      = мОбъемПоТС + ТекСтрокаМЛ.Объем;
		мМестПоТС       = мМестПоТС + ТекСтрокаМЛ.КолМест;
		мКолЗаказовПоТС = мКолЗаказовПоТС + ТекСтрокаМЛ.КоличествоЗаказов;
		ПунктовПогрузкиПоТС  = ПунктовПогрузкиПоТС + ТекСтрокаМЛ.Погрузка;
		ПунктовРазгрузкиПоТС = ПунктовРазгрузкиПоТС + ТекСтрокаМЛ.Разгрузка;
	КонецЦикла;
	
	ВеткаТС.ВесБрутто         = мВесПоТС;
	ВеткаТС.Объем             = мОбъемПоТС;
	ВеткаТС.КолМест           = мМестПоТС;
	ВеткаТС.КоличествоЗаказов = мКолЗаказовПоТС;
	
	ВеткаТС.Погрузка          = ПунктовПогрузкиПоТС;
	ВеткаТС.Разгрузка         = ПунктовРазгрузкиПоТС;
	
	ВеткаТС.ПроцентЗагрузкиВес     = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ВеткаТС.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентЗагрузкиОбъем   = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ВеткаТС.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентКоличЗаказов    = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ВеткаТС.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентПротяженность   = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ВеткаТС.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентВремяВРаботе    = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ВеткаТС.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ВеткаТС.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
	
	ВеткаТС.ВесПредставление = Строка(ВеткаТС.ВесБрутто) + " / " + Строка(ВеткаТС.Грузоподъемность) + ?(КолвоМЛ > 1, "*", "");;
	ВеткаТС.ОбъемПредставление = Строка(ВеткаТС.Объем) + " / " + Строка(ВеткаТС.ОбъемКузова) + ?(КолвоМЛ > 1, "*", "");;
	
	ВеткаТС.ПогрузкаРазгрузкаПредставление = Строка(ВеткаТС.Погрузка) + " / " + Строка(ВеткаТС.Разгрузка);
	
	ВеткаТС.КоличЗаказовПредставление = Строка(ВеткаТС.КоличествоЗаказов) + " / " + Строка(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ) + ?(КолвоМЛ > 1, "*", "");
	
	ВеткаТС.КоличествоУпаковокПредставление = Строка(ВеткаТС.КолМест) + " / " + Строка(ВеткаТС.МаксимальноеКоличествоУпаковок) + ?(КолвоМЛ > 1, "*", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИтоговыеДанныеТекущегоМаршрута(ВеткаТС)
	
	Список_ИтогоМаршрутыЗадействованоТС = 0;
	Список_ИтогоМаршрутыВсегоТС         = 0;
	Список_ИтогоМаршрутыМЛ              = 0;
	Список_ИтогоМаршрутыРасстояние      = 0;
	Список_ИтогоМаршрутыВремяВПути      = 0;
	Список_ИтогоМаршрутыВремяСтоянок    = 0;
	Список_ИтогоМаршрутыВремяВсего      = 0;
	Список_ИтогоМаршрутыЗаказов         = 0;
	Список_ИтогоМаршрутыВес             = 0;
	Список_ИтогоМаршрутыВесВсего        = 0;
	Список_ИтогоМаршрутыОбъем           = 0;
	Список_ИтогоМаршрутыОбъемВсего      = 0;
	Список_ИтогоМаршрутыКолМест         = 0;
	Список_ИтогоМаршрутыВремяОжидания   = 0;
	Список_ИтогоПунктовПогрузки         = 0;
	Список_ИтогоПунктовРазгрузки        = 0;
	Список_ИтогоМаршрутыКолМестВсего    = 0;
	Список_ИтогоКоличествоПунктов       = 0;
	
	Список_СводнаяИнформацияЗаказы           = "";
	Список_СводнаяИнформацияВесМЛ            = "";
	Список_СводнаяИнформацияОбьемМЛ          = "";
	Список_СводнаяИнформацияКоличествоМестМЛ = "";
	Список_СводнаяИнформацияКоличествоМЛ     = "";
	Список_СводнаяИнформацияРасстояние       = "";
	Список_СводнаяИнформацияКоличествоТС     = "";
	Список_СводнаяИнформацияВремяВПути       = "";
	Список_СводнаяИнформацияПункты           = "";
	Список_СводнаяИнформацияВремяСтоянок     = "";
	Список_СводнаяИнформацияВремяОжидания    = "";
	
	флПогрузки  = Ложь;
	флРазгрузки = Ложь;

	Список_ИтогоМаршрутыВсегоТС      = Список_ИтогоМаршрутыВсегоТС + 1;
	Список_ИтогоМаршрутыВесВсего     = Список_ИтогоМаршрутыВесВсего + ВеткаТС.Грузоподъемность;
	Список_ИтогоМаршрутыОбъемВсего   = Список_ИтогоМаршрутыОбъемВсего + ВеткаТС.ОбъемКузова;
	Список_ИтогоМаршрутыКолМестВсего = Список_ИтогоМаршрутыКолМестВсего + ВеткаТС.МаксимальноеКоличествоУпаковок;
	
	СоответсвиеЗаказов = Новый Соответствие();
	Если ЗначениеЗаполнено(ВеткаТС.МЛ)
		ИЛИ ВеткаТС.НовыйМЛ Тогда
		Список_ИтогоМаршрутыЗадействованоТС = Список_ИтогоМаршрутыЗадействованоТС + 1;
		
		ЭлементыВеткаПункты = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы();
		Если ЭлементыВеткаПункты.Количество() > 0 Тогда
			Список_ИтогоМаршрутыМЛ = Список_ИтогоМаршрутыМЛ + 1;
			Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
				Список_ИтогоКоличествоПунктов = Список_ИтогоКоличествоПунктов + 1;
				мВремяСтоянки  = 0;
				мВремяОжидания = 0;
				
				флПогрузки  = Ложь;
				флРазгрузки = Ложь;
				
				ЭлементыВеткаЗаказ = ТекСтрокаПункт.ПолучитьЭлементы();
				Для Каждого ТекСтрокаЗаказ Из ЭлементыВеткаЗаказ Цикл
					мВремяСтоянки  = СложитьВремя(мВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
					Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
						Если СоответсвиеЗаказов.Получить(ТекСтрокаЗаказ.Этап) = Неопределено Тогда
							СоответсвиеЗаказов.Вставить(ТекСтрокаЗаказ.Этап, ТекСтрокаЗаказ.Этап);
							Список_ИтогоМаршрутыЗаказов = Список_ИтогоМаршрутыЗаказов + 1;
						КонецЕсли;
						Список_ИтогоМаршрутыВес     = Список_ИтогоМаршрутыВес + ТекСтрокаЗаказ.ВесБрутто;
						Список_ИтогоМаршрутыОбъем   = Список_ИтогоМаршрутыОбъем + ТекСтрокаЗаказ.Объем;
						Список_ИтогоМаршрутыКолМест = Список_ИтогоМаршрутыКолМест + ТекСтрокаЗаказ.КолМест;
						
						флПогрузки  = Истина;
					ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
						флРазгрузки = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если флПогрузки Тогда
					Список_ИтогоПунктовПогрузки = Список_ИтогоПунктовПогрузки + 1;
				КонецЕсли;
				
				Если флРазгрузки Тогда
					Список_ИтогоПунктовРазгрузки = Список_ИтогоПунктовРазгрузки + 1;
				КонецЕсли;
				
				мВремяСтоянки  = СложитьВремя(мВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
				
				Список_ИтогоМаршрутыВремяОжидания	 = СложитьВремя(Список_ИтогоМаршрутыВремяОжидания, ТекСтрокаПункт.Ожидание);
				Список_ИтогоМаршрутыВремяВПути		 = СложитьВремя(Список_ИтогоМаршрутыВремяВПути, ТекСтрокаПункт.ВремяВПути);
				Список_ИтогоМаршрутыВремяСтоянок	 = СложитьВремя(Список_ИтогоМаршрутыВремяСтоянок, мВремяСтоянки);
				
				Список_ИтогоМаршрутыВремяВсего = СложитьВремя(Список_ИтогоМаршрутыВремяВсего, ТекСтрокаПункт.ВремяВПути);
				Список_ИтогоМаршрутыВремяВсего = СложитьВремя(Список_ИтогоМаршрутыВремяВсего, ТекСтрокаПункт.Ожидание);
				Список_ИтогоМаршрутыВремяВсего = СложитьВремя(Список_ИтогоМаршрутыВремяВсего, мВремяСтоянки);
				
				Список_ИтогоМаршрутыРасстояние = Список_ИтогоМаршрутыРасстояние + ТекСтрокаПункт.Расстояние;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭлементыВеткаПункты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Список_СводнаяИнформацияЗаказы           = СтрШаблон(НСтр("ru = 'Пунктов: %1; Заказов: %2'"),
	Строка(Список_ИтогоКоличествоПунктов), Строка(Список_ИтогоМаршрутыЗаказов));
	Список_СводнаяИнформацияВесМЛ            = Строка(Список_ИтогоМаршрутыВес) + " / " + Список_ИтогоМаршрутыВесВсего;
	Список_СводнаяИнформацияОбьемМЛ          = Строка(Список_ИтогоМаршрутыОбъем) + " / " + Список_ИтогоМаршрутыОбъемВсего;
	Список_СводнаяИнформацияКоличествоМестМЛ = Строка(Список_ИтогоМаршрутыКолМест) + " / " + Список_ИтогоМаршрутыКолМестВсего;
	Список_СводнаяИнформацияКоличествоМЛ     = Строка(Список_ИтогоМаршрутыМЛ);
	Список_СводнаяИнформацияРасстояние       = Строка(Список_ИтогоМаршрутыРасстояние);
	Список_СводнаяИнформацияКоличествоТС     = СтрШаблон(НСтр("ru = 'Задействовано ТС: %1 / %2'"),
	Список_ИтогоМаршрутыЗадействованоТС, Список_ИтогоМаршрутыВсегоТС);
	Список_СводнаяИнформацияВремяВПути       = Формат(Список_ИтогоМаршрутыВремяВПути, "ЧДЦ=2; ЧРД=:");
	Список_СводнаяИнформацияВремяСтоянок     = Формат(Список_ИтогоМаршрутыВремяСтоянок, "ЧДЦ=2; ЧРД=:");
	Список_СводнаяИнформацияВремяОжидания    = Формат(Список_ИтогоМаршрутыВремяОжидания, "ЧДЦ=2; ЧРД=:");
	Список_СводнаяИнформацияПункты           = Строка(Список_ИтогоПунктовПогрузки) + " / " + Список_ИтогоПунктовРазгрузки;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИтоговыеДанныеПоМаршрутамДерево()
	
	ИтогоМаршрутыЗадействованоТС = 0;
	ИтогоМаршрутыВсегоТС         = 0;
	ИтогоМаршрутыМЛ              = 0;
	ИтогоМаршрутыРасстояние      = 0;
	ИтогоМаршрутыВремяВПути      = 0;
	ИтогоМаршрутыВремяСтоянок    = 0;
	ИтогоМаршрутыВремяВсего      = 0;
	ИтогоМаршрутыЗаказов         = 0;
	ИтогоМаршрутыВес             = 0;
	ИтогоМаршрутыВесВсего        = 0;
	ИтогоМаршрутыОбъем           = 0;
	ИтогоМаршрутыОбъемВсего      = 0;
	ИтогоМаршрутыКолМест         = 0;
	ИтогоМаршрутыВремяОжидания   = 0;
	ИтогоПунктовПогрузки         = 0;
	ИтогоПунктовРазгрузки        = 0;
	ИтогоМаршрутыКолМестВсего    = 0;

	СводнаяИнформацияЗаказы           = "";
	СводнаяИнформацияВесМЛ            = "";
	СводнаяИнформацияОбьемМЛ          = "";
	СводнаяИнформацияКоличествоМестМЛ = "";
	СводнаяИнформацияКоличествоМЛ     = "";
	СводнаяИнформацияРасстояние       = "";
	СводнаяИнформацияКоличествоТС     = "";
	СводнаяИнформацияВремяВПути       = "";
	СводнаяИнформацияПункты           = "";
	
	флПогрузки  = Ложь;
	флРазгрузки = Ложь;
	
	СоответсвиеЗаказов = Новый Соответствие();
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
		Если ТекСтрокаТС.СобственноеТС = 6 И ТекСтрокаТС.КоличествоВиртуальныхТС > 0 Тогда 
			ИтогоМаршрутыВсегоТС = ИтогоМаршрутыВсегоТС + ТекСтрокаТС.КоличествоВиртуальныхТС;
			ИтогоМаршрутыВесВсего = ИтогоМаршрутыВесВсего + (ТекСтрокаТС.Грузоподъемность * ТекСтрокаТС.КоличествоВиртуальныхТС);
			ИтогоМаршрутыОбъемВсего = ИтогоМаршрутыОбъемВсего + (ТекСтрокаТС.ОбъемКузова * ТекСтрокаТС.КоличествоВиртуальныхТС);
			ИтогоМаршрутыКолМестВсего = ИтогоМаршрутыКолМестВсего + (ТекСтрокаТС.МаксимальноеКоличествоУпаковок * ТекСтрокаТС.КоличествоВиртуальныхТС);
		Иначе 
			ИтогоМаршрутыВсегоТС = ИтогоМаршрутыВсегоТС + 1;
			ИтогоМаршрутыВесВсего = ИтогоМаршрутыВесВсего + ТекСтрокаТС.Грузоподъемность;
			ИтогоМаршрутыОбъемВсего = ИтогоМаршрутыОбъемВсего + ТекСтрокаТС.ОбъемКузова;
			ИтогоМаршрутыКолМестВсего = ИтогоМаршрутыКолМестВсего + ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
		КонецЕсли;
		
		Если ТекСтрокаТС.ПолучитьЭлементы().Количество() > 0 Тогда
			ИтогоМаршрутыЗадействованоТС = ИтогоМаршрутыЗадействованоТС + 1;
			Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл
				Если ТекСтрокаМЛ.ПолучитьЭлементы().Количество() > 0 Тогда
					ИтогоМаршрутыМЛ = ИтогоМаршрутыМЛ + 1;
					Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.ПолучитьЭлементы() Цикл
						мВремяСтоянки  = 0;
						мВремяОжидания = 0;
						
						флПогрузки  = Ложь;
						флРазгрузки = Ложь;
						Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
							мВремяСтоянки  = СложитьВремя(мВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
							Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
								Если СоответсвиеЗаказов.Получить(ТекСтрокаЗаказ.Этап) = Неопределено Тогда
									СоответсвиеЗаказов.Вставить(ТекСтрокаЗаказ.Этап, ТекСтрокаЗаказ.Этап);
									ИтогоМаршрутыЗаказов = ИтогоМаршрутыЗаказов + 1;
								КонецЕсли;

								ИтогоМаршрутыВес     = ИтогоМаршрутыВес + ТекСтрокаЗаказ.ВесБрутто;
								ИтогоМаршрутыОбъем   = ИтогоМаршрутыОбъем + ТекСтрокаЗаказ.Объем;
								ИтогоМаршрутыКолМест = ИтогоМаршрутыКолМест + ТекСтрокаЗаказ.КолМест;
								
								флПогрузки  = Истина;
							ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
								флРазгрузки = Истина;
							КонецЕсли;
						КонецЦикла;
						
						Если флПогрузки Тогда
							ИтогоПунктовПогрузки = ИтогоПунктовПогрузки + 1;
						КонецЕсли;
						
						Если флРазгрузки Тогда
							ИтогоПунктовРазгрузки = ИтогоПунктовРазгрузки + 1;
						КонецЕсли;
						
						мВремяСтоянки  = СложитьВремя(мВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
						
						ИтогоМаршрутыВремяОжидания	 = СложитьВремя(ИтогоМаршрутыВремяОжидания, ТекСтрокаПункт.Ожидание);
						ИтогоМаршрутыВремяВПути		 = СложитьВремя(ИтогоМаршрутыВремяВПути, ТекСтрокаПункт.ВремяВПути);
						ИтогоМаршрутыВремяСтоянок	 = СложитьВремя(ИтогоМаршрутыВремяСтоянок, мВремяСтоянки);
						
						ИтогоМаршрутыВремяВсего = СложитьВремя(ИтогоМаршрутыВремяВсего, ТекСтрокаПункт.ВремяВПути);
						ИтогоМаршрутыВремяВсего = СложитьВремя(ИтогоМаршрутыВремяВсего, ТекСтрокаПункт.Ожидание);
						ИтогоМаршрутыВремяВсего = СложитьВремя(ИтогоМаршрутыВремяВсего, мВремяСтоянки);
						
						ИтогоМаршрутыРасстояние = ИтогоМаршрутыРасстояние + ТекСтрокаПункт.Расстояние;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НаправлениеПеревозкиТС = Неопределено;
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл 
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.НаправлениеПеревозки) Тогда 
				НаправлениеПеревозкиТС = ТекСтрокаМЛ.НаправлениеПеревозки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекСтрокаТС.НаправлениеПеревозки = НаправлениеПеревозкиТС;
	КонецЦикла;
	ОбновитьУровеньДереваВМаршрутах();
	
	Если МаршрутыДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СводнаяИнформацияЗаказы           = Строка(ИтогоМаршрутыЗаказов);
	СводнаяИнформацияВесМЛ            = Строка(ИтогоМаршрутыВес) + " / " + ИтогоМаршрутыВесВсего;
	СводнаяИнформацияОбьемМЛ          = Строка(ИтогоМаршрутыОбъем) + " / " + ИтогоМаршрутыОбъемВсего;
	СводнаяИнформацияКоличествоМестМЛ = Строка(ИтогоМаршрутыКолМест) + " / " + ИтогоМаршрутыКолМестВсего;
	СводнаяИнформацияКоличествоМЛ     = Строка(ИтогоМаршрутыМЛ);
	СводнаяИнформацияРасстояние       = Строка(ИтогоМаршрутыРасстояние);
	СводнаяИнформацияКоличествоТС     = СтрШаблон(НСтр("ru = 'Задействовано ТС: %1 / %2; МЛ: %3'"),
	ИтогоМаршрутыЗадействованоТС, ИтогоМаршрутыВсегоТС, ИтогоМаршрутыМЛ);
	СводнаяИнформацияВремяВПути       = Формат(ИтогоМаршрутыВремяВПути, "ЧДЦ=2; ЧРД=:");
	СводнаяИнформацияПункты           = Строка(ИтогоПунктовПогрузки) + " / " + ИтогоПунктовРазгрузки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗон()
	ЗоныДерево = РеквизитФормыВЗначение("ОтборЗоны");
	КопияЗонДерево = ЗоныДерево.Скопировать();
	
	ЗоныДерево.Строки.Очистить();
	
	Выборка1 = Справочники.уатГеозоны_уэ.Выбрать(Справочники.уатГеозоны_уэ.ПустаяСсылка());
	
	ПравоОграничениеЗонПоСотруднику = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьВыборТолькоЗакрепленныхЗон);
	
	Пока Выборка1.Следующий() Цикл
		Если НЕ Выборка1.ЭтоГруппа И ПравоОграничениеЗонПоСотруднику Тогда
			тблСотрудникиЗоны = Выборка1.Сотрудники;
			Если тблСотрудникиЗоны.Количество() > 0
				И тблСотрудникиЗоны.НайтиСтроки(Новый Структура("Сотрудник", ТекПользователь)).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрока1 = ЗоныДерево.Строки.Добавить();
		НовСтрока1.Зона = Выборка1.Ссылка;
		НовСтрока1.ЭтоГруппа = Выборка1.ЭтоГруппа;
		НайдСтрока = КопияЗонДерево.Строки.Найти(Выборка1.Ссылка, "Зона", Истина);
		Если НайдСтрока <> Неопределено И (НЕ НайдСтрока.Зона.ЭтоГруппа) И НайдСтрока.Использование тогда
			НовСтрока1.Использование = 1;
		КонецЕсли;
		
		Если Выборка1.Ссылка.ЭтоГруппа Тогда
			Выборка2 = Справочники.уатГеозоны_уэ.ВыбратьИерархически(Выборка1.Ссылка);
			КолИспользуемыхНиже = 0;
			Пока Выборка2.Следующий() Цикл
				НовСтрока2 = НовСтрока1.Строки.Добавить();
				НовСтрока2.Зона = Выборка2.Ссылка;
				НовСтрока2.ЭтоГруппа = НовСтрока2.ЭтоГруппа;
				НайдСтрока = КопияЗонДерево.Строки.Найти(Выборка2.Ссылка,"Зона",Истина);
				Если НайдСтрока <> Неопределено И НЕ НайдСтрока.Зона.ЭтоГруппа И НайдСтрока.Использование Тогда
					НовСтрока2.Использование = 1;
					КолИспользуемыхНиже = КолИспользуемыхНиже + 1;
				КонецЕсли;
				НовСтрока2.Картинка = ?(Выборка2.ЭтоГруппа, 0, 1);
			КонецЦикла;
			Если НовСтрока1.Строки.Количество() = КолИспользуемыхНиже И КолИспользуемыхНиже <> 0 Тогда
				НовСтрока1.Использование = 1;
			ИначеЕсли КолИспользуемыхНиже > 0 Тогда
				НовСтрока1.Использование = 2;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрока1.Картинка = ?(Выборка1.ЭтоГруппа, 0, 1);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ЗоныДерево, "ОтборЗоны");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита)
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, СписокРеквизитов)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СписокРеквизитов);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СложитьВремя(Время1,Время2)
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") тогда
		час1 = Цел(Время1);
		час2 = Цел(время2);
		мЧас = Час1 + Час2;
		мин = ((Время1 - час1) + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - ДопЧас*60) / 100;
		Возврат мЧас + Мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2); 	
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = дата('00010101010101');
		МВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (мВремя2 - Цел(мВремя2)) * 100 * 60;
		Если ТипЗнч(мВремя1) = Тип("Число") тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;	
		Иначе
			Возврат мВремя;	
		КОнецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ЗаказыСписок

&НаКлиенте
Процедура ОтметитьЗаказ(ТекущиеДанные, КлючСтроки = Неопределено)
	Если КлючСтроки = Неопределено Тогда
		КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
		ТекущиеДанные.Ссылка, ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;
	ОтмеченныеЗаказы.Добавить(КлючСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСЗаказа(ТекущиеДанные, КлючСтроки = Неопределено)
	
	Если КлючСтроки = Неопределено Тогда
		КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
		ТекущиеДанные.Ссылка, ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;
	
	ТекущийИдентификатор = ОтмеченныеЗаказы.Найти(КлючСтроки);
	Если ТекущийИдентификатор <> Неопределено Тогда
		ОтмеченныеЗаказы.Удалить(ТекущийИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МодифицироватьОтметкуЗаказа(ТекущиеДанные, ОтметитьСтрокуЗаказа = Истина, КлючСтроки = Неопределено)
	Если ТекущиеДанные.FTL 
		И ТекущиеДанные.ДетализацияЗакрытия
		<> ДетализацияЗакрытияПоЗаказам Тогда
		
		МассивГрузов = ПолучитьВсеИдентификаторыГрузовЗаказа(ТекущиеДанные.Ссылка,
			ТекущиеДанные.ДетализацияЗакрытия, ТекущиеДанные.Груз);
		
		Для Каждого ТекСтрока Из МассивГрузов Цикл
			Если ОтметитьСтрокуЗаказа Тогда
				ОтметитьЗаказ(ТекСтрока);
			Иначе
				СнятьОтметкуСЗаказа(ТекСтрока);
			КонецЕсли;
			ОтобразитьИтоговыеДанныеПоЗаказамКлиент(ТекСтрока, ОтметитьСтрокуЗаказа);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтметитьСтрокуЗаказа Тогда
		ОтметитьЗаказ(ТекущиеДанные, КлючСтроки);
	Иначе
		СнятьОтметкуСЗаказа(ТекущиеДанные, КлючСтроки);
	КонецЕсли;
	ОтобразитьИтоговыеДанныеПоЗаказамКлиент(ТекущиеДанные, ОтметитьСтрокуЗаказа);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВсеИдентификаторыГрузовЗаказа(ЗаказСсылка, ДетализацияЗакрытия, Груз)
	
	МассивГрузов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ДетализацияЗакрытия", ДетализацияЗакрытия);
	Запрос.УстановитьПараметр("Груз", Груз);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Груз,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура.Код
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто.Код
	               |				ИНАЧЕ """"
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ИдентификаторСтроки,
	               |	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	уатГрузыКПеревозке_уэОстатки.КоличествоОстаток КАК Количество,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.ВесБрутто, 0)
	               |		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто, 0)
	               |	КОНЕЦ КАК ВесБрутто,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Объем, 0)
	               |		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.Объем, 0)
	               |	КОНЕЦ КАК Объем,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ВЫБОР
	               |					КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	               |						ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.КоличествоМест, 0) * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителяТовары.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	               |					ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяТовары.КоличествоМест, 0) * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителяТовары.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	               |					ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент = 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0) / уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент
	               |					КОНЕЦ
	               |			КОНЕЦ * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0)
	               |	КОНЕЦ КАК КоличествоМест
	               |ИЗ
	               |	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	               |			,
	               |			ЗаказГрузоотправителя = &Ссылка
	               |				И Номенклатура <> &Груз
	               |				И ГрузовоеМесто <> &Груз) КАК уатГрузыКПеревозке_уэОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК ГрузовоеМесто,
	               |			СУММА(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто) КАК ВесБрутто,
	               |			СУММА(уатЗаказГрузоотправителяГрузовойСостав.Объем) КАК Объем,
	               |			СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест) КАК КоличествоМест,
	               |			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ВидУпаковки,
	               |			уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК Ссылка,
	               |			МИНИМУМ(уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки) КАК НомерСтроки
	               |		ИЗ
	               |			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	               |			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки,
	               |			уатЗаказГрузоотправителяГрузовойСостав.Ссылка) КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	               |			И уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	               |			И (уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто <> ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			уатЗаказГрузоотправителяТовары.Ссылка КАК Ссылка,
	               |			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	               |			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |			СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	               |			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	               |			МИНИМУМ(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	               |			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест,
	               |			СУММА(уатЗаказГрузоотправителяТовары.НомерСтроки) КАК НомерСтроки
	               |		ИЗ
	               |			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			уатЗаказГрузоотправителяТовары.Ссылка,
	               |			уатЗаказГрузоотправителяТовары.Номенклатура,
	               |			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения) КАК уатЗаказГрузоотправителяТовары
	               |		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяТовары.Ссылка
	               |			И уатГрузыКПеревозке_уэОстатки.Номенклатура = уатЗаказГрузоотправителяТовары.Номенклатура
	               |ГДЕ
	               |	уатГрузыКПеревозке_уэОстатки.КоличествоОстаток > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура("ВесБрутто, КоличествоМест, Объем, Количество,
		|ЕдиницаИзмерения, Груз, Ссылка, ИдентификаторСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		МассивГрузов.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивГрузов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВсеГрузыЗаказа(ЗаказСсылка, ДетализацияЗакрытия)
	
	МассивГрузов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ДетализацияЗакрытия", ДетализацияЗакрытия);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатГрузыКПеревозке_уэ.Номенклатура
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатГрузыКПеревозке_уэ.ГрузовоеМесто
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Груз,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатГрузыКПеревозке_уэ.Номенклатура.Код
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатГрузыКПеревозке_уэ.ГрузовоеМесто.Код
	               |				ИНАЧЕ """"
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ИдентификаторСтроки,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.ВесБрутто, 0)
	               |		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто, 0)
	               |	КОНЕЦ КАК ВесБрутто,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Объем, 0)
	               |		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.Объем, 0)
	               |	КОНЕЦ КАК Объем,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ВЫБОР
	               |					КОГДА уатГрузыКПеревозке_уэ.ЕдиницаИзмерения.Коэффициент = 0
	               |						ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.КоличествоМест, 0) * ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Количество, 0) / уатЗаказГрузоотправителяТовары.Количество * уатГрузыКПеревозке_уэ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	               |					ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяТовары.КоличествоМест, 0) * ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Количество, 0) / уатЗаказГрузоотправителяТовары.Количество / уатГрузыКПеревозке_уэ.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	               |					ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент = 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0) / уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент
	               |					КОНЕЦ
	               |			КОНЕЦ * уатГрузыКПеревозке_уэ.Количество / ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0)
	               |	КОНЕЦ КАК КоличествоМест,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Количество, 0)
	               |		ИНАЧЕ уатГрузыКПеревозке_уэ.Количество
	               |	КОНЕЦ КАК Количество,
	               |	уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатГрузыКПеревозке_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВЫБОР
	               |		КОГДА &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяТовары.НомерСтроки, уатГрузыКПеревозке_уэ.НомерСтроки)
	               |		ИНАЧЕ уатГрузыКПеревозке_уэ.НомерСтроки
	               |	КОНЕЦ КАК НомерСтроки,
	               |	уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя КАК Ссылка
	               |ИЗ
	               |	РегистрНакопления.уатГрузыКПеревозке_уэ КАК уатГрузыКПеревозке_уэ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК ГрузовоеМесто,
	               |			СУММА(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто) КАК ВесБрутто,
	               |			СУММА(уатЗаказГрузоотправителяГрузовойСостав.Объем) КАК Объем,
	               |			СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест) КАК КоличествоМест,
	               |			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ВидУпаковки,
	               |			уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК Ссылка,
	               |			уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки КАК НомерСтроки
	               |		ИЗ
	               |			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ГДЕ
	               |			уатЗаказГрузоотправителяГрузовойСостав.Ссылка = &Ссылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	               |			уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки,
	               |			уатЗаказГрузоотправителяГрузовойСостав.Ссылка,
	               |			уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки) КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ПО уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	               |			И уатГрузыКПеревозке_уэ.НомерСтроки = уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки
	               |			И уатГрузыКПеревозке_уэ.ГрузовоеМесто = уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	               |			И (уатГрузыКПеревозке_уэ.ГрузовоеМесто <> ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			уатЗаказГрузоотправителяТовары.Ссылка КАК Ссылка,
	               |			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	               |			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |			СУММА(ВЫБОР
	               |					КОГДА уатЗаказГрузоотправителяТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0
	               |						ТОГДА 0
	               |					ИНАЧЕ уатЗаказГрузоотправителяТовары.Количество * ЕСТЬNULL(уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения.Коэффициент, 0) / уатЗаказГрузоотправителяТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	               |				КОНЕЦ) КАК Количество,
	               |			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	               |			МИНИМУМ(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	               |			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест,
	               |			уатЗаказГрузоотправителяТовары.НомерСтроки КАК НомерСтроки
	               |		ИЗ
	               |			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	               |		ГДЕ
	               |			уатЗаказГрузоотправителяТовары.Ссылка = &Ссылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			уатЗаказГрузоотправителяТовары.Ссылка,
	               |			уатЗаказГрузоотправителяТовары.Номенклатура,
	               |			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	               |			уатЗаказГрузоотправителяТовары.НомерСтроки) КАК уатЗаказГрузоотправителяТовары
	               |		ПО уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = уатЗаказГрузоотправителяТовары.Ссылка
	               |			И уатГрузыКПеревозке_уэ.Номенклатура = уатЗаказГрузоотправителяТовары.Номенклатура
	               |ГДЕ
	               |	уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = &Ссылка
	               |	И уатГрузыКПеревозке_уэ.ВидДвижения = &ВидДвижения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура("ВесБрутто, КоличествоМест, Объем, Количество,
		|ЕдиницаИзмерения, Груз, Ссылка, ИдентификаторСтроки, НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		МассивГрузов.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивГрузов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаказыСписокОтбор = ЗаказыСписок.Отбор.Элементы;
		ЗаказыСписокОтбор.Очистить();
		
		Для Каждого ТекЭлемент Из Результат.КомпоновщикДанныхЗаказов Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ТекНастройка = ЗаказыСписокОтбор.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
				СоздатьОтборы(ТекНастройка, ТекЭлемент.Элементы);
			Иначе
				Если НЕ ЗначениеЗаполнено(ТекЭлемент.ЛевоеЗначение) Тогда
					Продолжить;
				КонецЕсли;
				ТекНастройка = ЗаказыСписокОтбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		АдресВрХранилища = Результат.АдресВрХранилища;
		
		ЗаполнитьТаблицыОтборов();
		Если ПроверкаПунктаОтправленияВЗоне
			ИЛИ ПроверкаПунктаНазначенияВЗоне Тогда
			ПолучитьПунктыВЗонахОтбораКлиент();
		Иначе
			ОбновитьАдресНастройкиКомпоновкиДанных();
		КонецЕсли;
		
		УстановитьОтборГрМестаЗаказыПоДопХарактеристикам = Истина;
		
		ОбновитьСписокЗаказов();
		УстановитьИконкиОтбораИСортировки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтборы(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов)
	
	уатАРМКлиент.СоздатьОтборы(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборыСервер(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов)
	
	Для Каждого ТекЭлемент Из КомпоновщикДанныхЗаказов Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекНастройка = ЗаказыСписокОтбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
			СоздатьОтборыСервер(ТекНастройка, ТекЭлемент.Элементы);
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ЛевоеЗначение) Тогда
				Продолжить;
			КонецЕсли;
			ТекНастройка = ЗаказыСписокОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСортировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда
		ЗаказыСписокОбновитьПорядок();
		ОбновитьСписокЗаказов();
		УстановитьИконкиОтбораИСортировки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокОбновитьПорядок() 
	
	уатАРМКлиент.ЗаказыСписокОбновитьПорядок(ЗаказыСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПунктыВЗонахОтбораКлиент()
		
	// Получение параметров отбора по зонам
	ПолучитьПунктыВЗонахОтбораСервер(МассивРаспределенныхЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПунктыВЗонахОтбораСервер(МассивРаспределенныхЗаказов)
	
	// получение параметров отбора по зонам
	СписокАдресовВЗонах = Новый Массив;
	ФлагИспользования   = Ложь;
	
	ОтборЗоныЭлементы = ОтборЗоны.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из ОтборЗоныЭлементы Цикл
		Если ТекСтрока.Использование <> 0 Тогда 
			ОбновитьАдресНастройкиКомпоновкиДанных();
			СписокАдресовВЗонах = ПолучитьПунктыВЗонахОтбора(ОтборЗоны, АдресСхемыКомпоновкиДанных,
				АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов);
			ФлагИспользования = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОтборСписка = ЗаказыСписок.Отбор.Элементы;
	
	Если ПроверкаПунктаОтправленияВЗоне
		И ПроверкаПунктаНазначенияВЗоне 
		И ФлагИспользования Тогда
		ГруппаЭлементовОтбора = ОтборСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ОтборСписка = ГруппаЭлементовОтбора.Элементы;
	КонецЕсли;
		
	Если ПроверкаПунктаОтправленияВЗоне 
		И ФлагИспользования Тогда
		
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("АдресОтправления");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = СписокАдресовВЗонах;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	Если ПроверкаПунктаНазначенияВЗоне 
		И ФлагИспользования Тогда
		
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("АдресНазначения");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = СписокАдресовВЗонах;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	КонецЕсли;
	
	НастройкиКомпоновкиДанных      = Элементы.ЗаказыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);

КонецПроцедуры

// Процедура получает выборку пунктов назначения, входящих в указанные зоны
// 
// Параметры:
//  ТаблицаЗонДляОтбора - таблица зон для отбора
//
&НаСервереБезКонтекста
Функция ПолучитьПунктыВЗонахОтбора(ОтборЗоны, АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных,  АдресМассиваЗаказов, МассивРаспределенныхЗаказов)
	
	мсвЗонДляОтбора = Новый Массив();
	
	Для Каждого ТекСтрока1 Из ОтборЗоны.ПолучитьЭлементы() Цикл
		Если Не ТекСтрока1.ЭтоГруппа И ТекСтрока1.Использование Тогда
			мсвЗонДляОтбора.Добавить(ТекСтрока1.Зона);
		КонецЕсли;
		Для Каждого ТекСтрока2 Из ТекСтрока1.ПолучитьЭлементы() Цикл
			Если Не ТекСтрока2.ЭтоГруппа И ТекСтрока2.Использование Тогда
				мсвЗонДляОтбора.Добавить(ТекСтрока2.Зона);
			КонецЕсли;
			Для Каждого ТекСтрока3 Из ТекСтрока2.ПолучитьЭлементы() Цикл
				Если Не ТекСтрока3.ЭтоГруппа И ТекСтрока3.Использование Тогда
					мсвЗонДляОтбора.Добавить(ТекСтрока3.Зона);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	мсвТочекПринадлежащихЗонамОтбора = Новый Массив();
	
	Если мсвЗонДляОтбора.Количество() > 0 Тогда
		
		ПроцессорВывода = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных,
		АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов);
		
		мсвЗаказов = Новый Массив();
		Для Каждого ТекСтрока Из ПроцессорВывода  Цикл
			мсвЗаказов.Добавить(ТекСтрока.Ссылка);
		КонецЦИкла;
		
		мсвПунктов                       = ПолучитьКоординатыАдресовПоЗаказамГрузоотправителей(мсвЗаказов);
		мсвТочекПринадлежащихЗонамОтбора = уатОбщегоНазначения_уэ.ПолучитьПунктыВЗонахОтбора(мсвЗонДляОтбора, мсвПунктов);
		Если мсвПунктов.Количество() <> 0 Тогда
			Лат = 0; Лон = 0;
			
			Для Каждого ТекЗона Из мсвЗонДляОтбора Цикл
				мМассивХ = Новый Массив();
				мМассивУ = Новый Массив();
				
				СтруктураРеквизитовЗоны = СтруктураРеквизитовЗоны(ТекЗона);
				
				Для Каждого ТекКоордината Из СтруктураРеквизитовЗоны.Координаты Цикл
					мМассивХ.Добавить(ТекКоордината.Лат);
					мМассивУ.Добавить(ТекКоордината.Лон);
				КонецЦикла;
				
				Для Каждого ТекСтрока Из мсвПунктов Цикл
					ТекстСообщения = "";
					Лат = 0;
					Лон = 0;
					Если Не ТекСтрока.Лат = 0 И Не ТекСтрока.Лон = 0 Тогда
						Лат = ТекСтрока.Лат;
						Лон = ТекСтрока.Лон;
					КонецЕсли;
					Если Не Лат = 0 И Не Лон = 0 Тогда
						Если уатЗащищенныеФункцииСервер_уэ.уэТочкаВПолигоне(мМассивХ, мМассивУ, Лат, Лон) Тогда
							мсвТочекПринадлежащихЗонамОтбора.Добавить(ТекСтрока.Адрес);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат мсвТочекПринадлежащихЗонамОтбора;

	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураРеквизитовЗоны(Зона)
	
	Рез = Новый Структура("Координаты, Цвет, УникальныйИдентификатор, ЭтоГруппа");
	
	Если Зона.ЭтоГруппа Тогда 
		Рез.ЭтоГруппа = Истина;
		Возврат Рез;
	Иначе 
		Рез.ЭтоГруппа = Ложь;
	КонецЕсли;
	
	мсвКоординаты = Новый Массив;
	Для Каждого ТекКоорд Из Зона.Координаты Цикл
		мсвКоординаты.Добавить(Новый Структура("Лат, Лон", ТекКоорд.Лат, ТекКоорд.Лон));
	КонецЦикла;
	Рез.Координаты = мсвКоординаты;
	Рез.Цвет = уатЗащищенныеФункцииСервер_уэ.ПолучитьЦветЗоны(Зона);
	Рез.УникальныйИдентификатор = Зона.УникальныйИдентификатор();
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоординатыАдресовПоЗаказамГрузоотправителей(МассивЗаказов = Неопределено)
	
	ЗапросТочек = Новый Запрос();
	Если МассивЗаказов <> Неопределено Тогда
		ЗапросТочек.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	
	ЗапросТочек.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗаказов.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресОтправления.Лат, 0) КАК ЛатОтпр,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресОтправления.Лон, 0) КАК ЛонОтпр,
	|	ТабЗаказов.ЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресНазначения.Лат, 0) КАК ЛатНазн,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресНазначения.Лон, 0) КАК ЛонНазн,
	|	ТабЗаказов.ЗаказГрузоотправителя.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	|	ТабЗаказов.ЗаказГрузоотправителя.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения,
	|	ТабЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|ПОМЕСТИТЬ ТаблицаАдресовСКоординатами
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки" + ?(МассивЗаказов = Неопределено, "", "(, ЗаказГрузоотправителя В(&МассивЗаказов))") + " КАК ТабЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Адрес КАК Адрес,
	|	ВложенныйЗапрос.Лат КАК Лат,
	|	ВложенныйЗапрос.Лон КАК Лон,
	|	ВложенныйЗапрос.Стоянка КАК Стоянка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаАдресовСКоординатами.АдресОтправления КАК Адрес,
	|		ТаблицаАдресовСКоординатами.ЛатОтпр КАК Лат,
	|		ТаблицаАдресовСКоординатами.ЛонОтпр КАК Лон,
	|		ТаблицаАдресовСКоординатами.СтоянкаПунктОтправления КАК Стоянка,
	|		ТаблицаАдресовСКоординатами.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|	ИЗ
	|		ТаблицаАдресовСКоординатами КАК ТаблицаАдресовСКоординатами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаАдресовСКоординатами.АдресНазначения,
	|		ТаблицаАдресовСКоординатами.ЛатНазн,
	|		ТаблицаАдресовСКоординатами.ЛонНазн,
	|		ТаблицаАдресовСКоординатами.СтоянкаПунктНазначения,
	|		ТаблицаАдресовСКоординатами.ЗаказГрузоотправителя
	|	ИЗ
	|		ТаблицаАдресовСКоординатами КАК ТаблицаАдресовСКоординатами) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.Адрес ЕСТЬ NULL";
	
	Выборка = ЗапросТочек.Выполнить().Выбрать();
	
	мсвРезультат = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		мсвРезультат.Добавить(Выборка.Адрес);
	КонецЦикла;
	
	Возврат мсвРезультат;
	
КонецФункции // ПолучитьПунктыВЗонахОтбора()

&НаСервереБезКонтекста
Процедура ПолучитьСтоянкиПоЗаказамГрузоотправителей(СоответствиеСтоянок, СоответствиеСтоянокВПункте, МассивЗаказов)
	
	ЗапросТочек = Новый Запрос();
	ЗапросТочек.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	ЗапросТочек.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	уатЗаказГрузоотправителя.Ссылка КАК ЗаказГрузоотправителя,
	                    |	уатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	                    |	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	                    |	уатЗаказГрузоотправителя.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	                    |	уатЗаказГрузоотправителя.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения
	                    |ИЗ
	                    |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	                    |ГДЕ
	                    |	уатЗаказГрузоотправителя.Ссылка В(&МассивЗаказов)";
	
	Выборка = ЗапросТочек.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтоянкаВПункте = 0;
		Если СоответствиеСтоянокВПункте.Получить(Выборка.АдресНазначения) = Неопределено Тогда
			СтоянкаВПункте = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.АдресНазначения, Новый Массив());
			СоответствиеСтоянокВПункте.Вставить(Выборка.АдресНазначения, СтоянкаВПункте);
		КонецЕсли;
		
		Если СоответствиеСтоянокВПункте.Получить(Выборка.АдресОтправления) = Неопределено Тогда
			СтоянкаВПунктеОтправления = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.АдресОтправления, Новый Массив());
			СоответствиеСтоянокВПункте.Вставить(Выборка.АдресОтправления, СтоянкаВПунктеОтправления);
		КонецЕсли;

		СтруктураСтоянок = СоответствиеСтоянок.Получить(Выборка.ЗаказГрузоотправителя);
		Если СтруктураСтоянок = Неопределено Тогда			
			СтруктураСтоянок = Новый Структура("Адрес1, Стоянка1, Адрес2, Стоянка2",
				Выборка.АдресОтправления, Выборка.СтоянкаПунктОтправления,
				Выборка.АдресНазначения, Выборка.СтоянкаПунктНазначения);
			
			СоответствиеСтоянок.Вставить(Выборка.ЗаказГрузоотправителя, СтруктураСтоянок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗаполнитьСписокЗаказов(АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, ДатаПланирования, НастройкаКоличествоДнейДоДатыПланирования, НастройкаЗаполненияСпискаЗаказов = 0)

	ОтправлениеС = КонецДня(ДатаПланирования) - (НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1;
	
	Если НастройкаЗаполненияСпискаЗаказов = 0 Тогда
		// Временное окно отправления
		ЛеваяГраницаОкна  = "ОтправлениеС";
		ПраваяГраницаОкна = "ОтправлениеПо"
	ИначеЕсли НастройкаЗаполненияСпискаЗаказов = 1 Тогда
		// Временное окно прибытия
		ЛеваяГраницаОкна  = "ДоставкаС";
		ПраваяГраницаОкна = "ДоставкаПо"
	ИначеЕсли НастройкаЗаполненияСпискаЗаказов = 2 Тогда
		// Отправление с
		ЛеваяГраницаОкна  = "ОтправлениеС";
		ПраваяГраницаОкна = "ОтправлениеС"
	ИначеЕсли НастройкаЗаполненияСпискаЗаказов = 3 Тогда
		// Отправление по
		ЛеваяГраницаОкна  = "ОтправлениеПо";
		ПраваяГраницаОкна = "ОтправлениеПо"
	ИначеЕсли НастройкаЗаполненияСпискаЗаказов = 4 Тогда
		// Прибытие с
		ЛеваяГраницаОкна  = "ДоставкаС";
		ПраваяГраницаОкна = "ДоставкаС"
	ИначеЕсли НастройкаЗаполненияСпискаЗаказов = 5 Тогда
		// Прибытие по
		ЛеваяГраницаОкна  = "ДоставкаПо";
		ПраваяГраницаОкна = "ДоставкаПо"
	Иначе
		// Некорректная настройка, используем по умолчанию вариант "Временное окно отправления"
		ЛеваяГраницаОкна  = "ОтправлениеС";
		ПраваяГраницаОкна = "ОтправлениеПо"
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОтправлениеС", ОтправлениеС);
	Запрос.УстановитьПараметр("ОтправлениеПо", КонецДня(ДатаПланирования));
	Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	               |ИЗ
	               |	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	               |			,
	               |			ЗаказГрузоотправителя.%1 >= &ОтправлениеС
	               |				И ЗаказГрузоотправителя.%2 <= &ОтправлениеПо
	               |				И (НЕ ЗаказГрузоотправителя.Мультимодальный
	               |					ИЛИ ЗаказГрузоотправителя.Мультимодальный
	               |						И ЗаказГрузоотправителя.ЭтоЭтап)
	               |				И ВЫБОР
	               |					КОГДА ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |						ТОГДА Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |								ТОГДА ГрузовоеМесто <> ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ) КАК уатГрузыКПеревозке_уэОстатки
	               |ГДЕ
	               |	уатГрузыКПеревозке_уэОстатки.КоличествоОстаток > 0", ЛеваяГраницаОкна, ПраваяГраницаОкна);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЗаказов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивЗаказов.Добавить(Выборка.ЗаказГрузоотправителя);
	КонецЦикла;
	
	АдресМассиваЗаказов = ПоместитьВоВременноеХранилище(МассивЗаказов, Новый УникальныйИдентификатор);
	
	Возврат МассивЗаказов;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
	МассивЗаказовСОтборомПоДопХарактеристикам = Неопределено,
	МассивГрузовСОтборомПоДопХарактеристикам = Неопределено,
	Знач ОтборПоСвойствамЗаказа = Неопределено,
	Знач ОтборПоСвойствамГруза = Неопределено,
	МассивЗаказов = Неопределено)

	Возврат уатАРМ.ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
	МассивЗаказовСОтборомПоДопХарактеристикам,
	МассивГрузовСОтборомПоДопХарактеристикам,
	ОтборПоСвойствамЗаказа,
	ОтборПоСвойствамГруза,
	МассивЗаказов);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов,
	МассивРаспределенныхЗаказов,
	МассивЗаказов = Неопределено, ПредставлениеЗаказаДляКартыOSM = Ложь)

	Возврат уатАРМ.ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов,
		МассивРаспределенныхЗаказов,
		МассивЗаказов, ПредставлениеЗаказаДляКартыOSM);
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьДанныеСтрокиЗаказа(ВыбраннаяСтрока)
	
	ДанныеСтроки = Элементы.ЗаказыСписок.ДанныеСтроки(ВыбраннаяСтрока);
		
	ПараметрыСтрокиЗаказов = "Использование, Ссылка, ИдентификаторСтроки, ЦветДокумента,
		|Номер, Дата, НомерПоУчетуЗаказчика, Контрагент,
		|АдресНазначения, Груз, Количество, ЕдиницаИзмерения,
		|ВесБрутто, Объем, КоличествоМест, Статус,
		|АдресОтправления, Маршрут, НаправлениеПеревозки,
		|Грузоотправитель, Грузополучатель, ОтправлениеС,
		|ОтправлениеПо, ДоставкаС, ДоставкаПо,
		|FTL, АдресОтправленияПредставление,
		|АдресНазначенияПредставление, ЛатНазначения, ЛонНазначения, ЛатОтправления, ЛонОтправления,
		|АдресОтправленияУказанНаКарте, АдресНазначенияУказанНаКарте, ДетализацияЗакрытия, НомерСтроки,
		|ВидПеревозки, ОбъектСтроительства, ЭтоЭтап";
	ДанныеСтрокиСтруктура = Новый Структура(ПараметрыСтрокиЗаказов);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат ДанныеСтрокиСтруктура;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиСтруктура, ДанныеСтроки);
	
	Возврат ДанныеСтрокиСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьГруппировкуСпискуЗаказов(ПолеГруппировка = "")
	
	уатАРМКлиент.ДобавитьГруппировкуСпискуЗаказов(ЗаказыСписок, ПолеГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуКнопкиГруппировки(Знач НомерКнопки)
	
	уатАРМКлиент.УстановитьПометкуКнопкиГруппировки(Элементы, НомерКнопки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровОтборовАдрес()
	
	врОтборПоСвойствамГруза  = РеквизитФормыВЗначение("ОтборПоСвойствамГруза");
	врОтборПоСвойствамЗаказа = РеквизитФормыВЗначение("ОтборПоСвойствамЗаказа");
	врОтборЗоны = РеквизитФормыВЗначение("ОтборЗоны");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("врПроверкаПунктаОтправленияВЗоне", ПроверкаПунктаОтправленияВЗоне);
	СтруктураПараметров.Вставить("врПроверкаПунктаНазначенияВЗоне",	 ПроверкаПунктаНазначенияВЗоне);
	СтруктураПараметров.Вставить("врОтборПоСвойствамГруза",			 врОтборПоСвойствамГруза);
	СтруктураПараметров.Вставить("врОтборПоСвойствамЗаказа",		 врОтборПоСвойствамЗаказа);
	СтруктураПараметров.Вставить("врОтборЗоны",						 врОтборЗоны);
	
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицыОтборов()
	
	СтруктураПараметров            = ПолучитьИзВременногоХранилища(АдресВрХранилища);
	ПроверкаПунктаОтправленияВЗоне = СтруктураПараметров.врПроверкаПунктаОтправленияВЗоне;
	ПроверкаПунктаНазначенияВЗоне  = СтруктураПараметров.врПроверкаПунктаНазначенияВЗоне;
	
	врОтборПоСвойствамГруза  = РеквизитФормыВЗначение("ОтборПоСвойствамГруза");
	врОтборПоСвойствамЗаказа = РеквизитФормыВЗначение("ОтборПоСвойствамЗаказа");
	врОтборЗоны = РеквизитФормыВЗначение("ОтборЗоны");
	
	врОтборПоСвойствамГруза  = СтруктураПараметров.врОтборПоСвойствамГруза;
	врОтборПоСвойствамЗаказа = СтруктураПараметров.врОтборПоСвойствамЗаказа;
	врОтборЗоны = СтруктураПараметров.врОтборЗоны;
	
	ЗначениеВРеквизитФормы(врОтборПоСвойствамГруза,"ОтборПоСвойствамГруза");
	ЗначениеВРеквизитФормы(врОтборПоСвойствамЗаказа,"ОтборПоСвойствамЗаказа");
	ЗначениеВРеквизитФормы(врОтборЗоны,"ОтборЗоны");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоТекущегоМаршрута(GUIDСтроки)

	НомерПункта = 1;
	ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", GUIDСтроки, "Пункт"));
	Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
		НовСтрокаПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаПункт, ТекСтрокаПункт);
		НовСтрокаПункт.НомерПункта = НомерПункта;
		
		ЭлементыВеткаЗаказы = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
			GUIDСтроки, ТекСтрокаПункт.GUIDПункта, "Заказ"));
		Для Каждого ТекСтрокаЗаказ Из ЭлементыВеткаЗаказы Цикл
			НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрокаЗаказ);
			НовСтрокаЗаказ.Расстояние = 0;
			НовСтрокаЗаказ.ВремяВПути = 0;

			НовСтрокаЗаказ.ГруппировкаПредставление = ТекСтрокаЗаказ.Группировка + " " +
			?(НастройкаПредставлениеЗаказаНаТС = "номер контрагент", ТекСтрокаЗаказ.Контрагент,
			?(НастройкаПредставлениеЗаказаНаТС = "номер грузоотправитель", ТекСтрокаЗаказ.Грузоотправитель, ТекСтрокаЗаказ.Грузополучатель));
			ЭлементыВеткаНоменклатура = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта,
				|GUIDЗаказа, УровеньДерева",
				GUIDСтроки, ТекСтрокаПункт.GUIDПункта, ТекСтрокаЗаказ.GUIDЗаказа, "Номенклатура"));
			Для Каждого ТекСтрокаНоменклатура Из ЭлементыВеткаНоменклатура Цикл
				НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, ТекСтрокаНоменклатура);
				НовСтрокаЗаказ.Расстояние = 0;
				НовСтрокаЗаказ.ВремяВПути = 0;
			
			КонецЦикла;
		КонецЦикла;
		
		НомерПункта = НомерПункта + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыЗначенийСтрокДереваЗаказов(Узел = Неопределено)
	// Типы значений строки:
	// 1 - СправочникСсылка.уатПунктыНазначения 
	// 2 - ДокументСсылка.уатЗаказГрузоотправителя
	// 3 - Строка
	// 4 - СправочникСсылка.Номенклатура
	// 5 - СправочникСсылка.уатГрузовыеМеста_уэ
	
	ОчиститьНедоступныеДанные = Ложь;
	
	Если Узел = Неопределено Тогда 
		Узел = МаршрутыСписокЗаказовДерево;
		ОчиститьНедоступныеДанные = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Узел.ПолучитьЭлементы() Цикл 
		ОбновитьТипыЗначенийСтрокДереваЗаказов(ТекСтрока);
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 1;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 2;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 3;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 4;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 5;
		КонецЕсли;
		
		Если ОчиститьНедоступныеДанные
				И МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Получить(МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество()-1) = ТекСтрока Тогда 
			ТекСтрока.ВремяВПути = Неопределено;
			ТекСтрока.Расстояние = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Маршруты

&НаСервере
Процедура ЗаполнитьСписокТСПриСозданииНаСервере()
	Если НЕ НастройкаПриОткрытииЗаполнятьСпискомТС Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);
	ПараметрыЗапросаТС.ЗаполнениеТСПриОткрытии     = Истина;
	
	СоответсвиеМаршрутов = Новый Соответствие;
	мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, СоответсвиеМаршрутов);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыЗаполнитьСписокТСЗавершениеСервер_Дерево(мсвТС, СоответсвиеМаршрутов, Истина);
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Дерево(мсвТС);
		ОбновитьДанныеПоСтоянкамСервер();
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;

	Иначе
		МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, СоответсвиеМаршрутов, Истина);
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Список(мсвТС);
	КонецЕсли;

	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутыСписок

#КонецОбласти

#Область МаршрутыСписокДерево

&НаКлиенте
Процедура СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказы(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ТекЭлемМассива = ПараметрыПеретаскивания.Значение[0];
	Иначе
		ТекЭлемМассива = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	
	Если ТипЗнч(ТекЭлемМассива) <> Тип("ДанныеФормыСтруктура") Тогда
		ТекЭлемМассива = ЗаполнитьДанныеСтрокиЗаказа(ТекЭлемМассива);
	КонецЕсли;
	
	Если ТекЭлемМассива.Количество > 0 Тогда 
		НовСтрокаЗаказ = ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекЭлемМассива);
		НовСтрокаЗаказ.КолМест = ТекЭлемМассива.КоличествоМест;
		НовСтрокаЗаказ.Номенклатура = ТекЭлемМассива.Груз;
		НовСтрокаЗаказ.ЛатНазн  = ТекЭлемМассива.ЛатНазначения;
		НовСтрокаЗаказ.ЛонНазн  = ТекЭлемМассива.ЛонНазначения;
		НовСтрокаЗаказ.ЛатОтпр  = ТекЭлемМассива.ЛатОтправления;
		НовСтрокаЗаказ.ЛонОтпр  = ТекЭлемМассива.ЛонОтправления;
		
		Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.АдресОтправленияПредставление) Тогда
			НовСтрокаЗаказ.АдресОтправленияПредставление = ТекЭлемМассива.АдресОтправления;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.АдресНазначенияПредставление) Тогда
			НовСтрокаЗаказ.АдресНазначенияПредставление = ТекЭлемМассива.АдресНазначения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекЭлемМассива.Груз) Тогда
			НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекЭлемМассива);
			НовСтрокаНом.ЦветДокумента   = 0;
			НовСтрокаНом.Номенклатура    = ТекЭлемМассива.Груз;
			НовСтрокаНом.Код             = ТекЭлемМассива.ИдентификаторСтроки;
			НовСтрокаЗаказ.КолМест       = ТекЭлемМассива.КоличествоМест;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказыГруппой(ПараметрыПеретаскивания, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов)
	
	ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы().Очистить();
	
	СоответсвиеЗаказов = Новый Соответствие();
	НовСтрокаЗаказ = Неопределено;
	
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрокаЗаказа Из ПараметрыПеретаскивания Цикл
		МассивЗаказов.Добавить(ТекСтрокаЗаказа.Ссылка);
	КонецЦИкла;
	
	ТаблицаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
		МассивЗаказов);
	
	Для Каждого ТекЭлемМассива Из ТаблицаЗаказов Цикл
		
		КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
		ТекЭлемМассива.Ссылка, ТекЭлемМассива.ИдентификаторСтроки);
		
		Если ПараметрыПеретаскивания.Найти(КлючСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекНовСтрокаЗаказ = СоответсвиеЗаказов.Получить(ТекЭлемМассива.Ссылка);
		Если ТекНовСтрокаЗаказ <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекЭлемМассива.Груз) 
				И НовСтрокаЗаказ <> Неопределено
				И НЕ НовСтрокаЗаказ.FTL Тогда
				НовСтрокаНом = ТекНовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекЭлемМассива);
				НовСтрокаНом.Номенклатура  = ТекЭлемМассива.Груз;
				НовСтрокаНом.КолМест       = ТекЭлемМассива.КоличествоМест;
				НовСтрокаНом.ЛатНазн       = ТекЭлемМассива.ЛатНазначения;
				НовСтрокаНом.ЛонНазн       = ТекЭлемМассива.ЛонНазначения;
				НовСтрокаНом.ЛатОтпр       = ТекЭлемМассива.ЛатОтправления;
				НовСтрокаНом.ЛонОтпр       = ТекЭлемМассива.ЛонОтправления;
				НовСтрокаНом.ЦветДокумента = 0;
				НовСтрокаНом.Код           = ТекЭлемМассива.ИдентификаторСтроки;
			КонецЕсли;
		Иначе
			Если СоответсвиеЗаказов.Количество() <> 0 
				И НовСтрокаЗаказ <> Неопределено
				И НовСтрокаЗаказ.FTL Тогда
				МассивГрузов = ПолучитьВсеГрузыЗаказа(НовСтрокаЗаказ.Ссылка, НовСтрокаЗаказ.ДетализацияЗакрытия);
				СоответствиеFTLКоличестваГрузов.Вставить(НовСтрокаЗаказ.Ссылка, МассивГрузов.Количество());
				Для Каждого ТекЭлемГруза Из МассивГрузов Цикл
					Если ЗначениеЗаполнено(ТекЭлемГруза.Груз) Тогда
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекЭлемГруза);
						НовСтрокаНом.Номенклатура  = ТекЭлемГруза.Груз;
						НовСтрокаНом.КолМест       = ТекЭлемГруза.КоличествоМест;
						НовСтрокаНом.ЦветДокумента = 0;
						НовСтрокаНом.Код            = ТекЭлемГруза.ИдентификаторСтроки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НовСтрокаЗаказ = ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекЭлемМассива);
			НовСтрокаЗаказ.КолМест = ТекЭлемМассива.КоличествоМест;
			НовСтрокаЗаказ.Номенклатура = ТекЭлемМассива.Груз;
			НовСтрокаЗаказ.ЛатНазн  = ТекЭлемМассива.ЛатНазначения;
			НовСтрокаЗаказ.ЛонНазн  = ТекЭлемМассива.ЛонНазначения;
			НовСтрокаЗаказ.ЛатОтпр  = ТекЭлемМассива.ЛатОтправления;
			НовСтрокаЗаказ.ЛонОтпр  = ТекЭлемМассива.ЛонОтправления;
			
			Если НовСтрокаЗаказ.FTL Тогда
				мсвFTLЗаказов.Добавить(НовСтрокаЗаказ.Ссылка);
				СоответствиеFTLКоличестваГрузов.Вставить(НовСтрокаЗаказ.Ссылка, 0);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.АдресОтправленияПредставление) тогда
				НовСтрокаЗаказ.АдресОтправленияПредставление = ТекЭлемМассива.АдресОтправления;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.АдресНазначенияПредставление) тогда
				НовСтрокаЗаказ.АдресНазначенияПредставление = ТекЭлемМассива.АдресНазначения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекЭлемМассива.Груз) 
				И Не НовСтрокаЗаказ.FTL Тогда
				НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекЭлемМассива);
				НовСтрокаНом.Номенклатура  = ТекЭлемМассива.Груз;
				НовСтрокаНом.КолМест       = ТекЭлемМассива.КоличествоМест;
				НовСтрокаНом.ЛатНазн       = ТекЭлемМассива.ЛатНазначения;
				НовСтрокаНом.ЛонНазн       = ТекЭлемМассива.ЛонНазначения;
				НовСтрокаНом.ЛатОтпр       = ТекЭлемМассива.ЛатОтправления;
				НовСтрокаНом.ЛонОтпр       = ТекЭлемМассива.ЛонОтправления;
				НовСтрокаНом.ЦветДокумента = 0;
				НовСтрокаНом.Код            = ТекЭлемМассива.ИдентификаторСтроки;
			КонецЕсли;
			
			СоответсвиеЗаказов.Вставить(ТекЭлемМассива.Ссылка, НовСтрокаЗаказ);
		КонецЕсли;
	
		ДанныеИдентификатора = ТекЭлемМассива.Номер + ?(ТекЭлемМассива.ИдентификаторСтроки = "", "",
			"_" + ТекЭлемМассива.ИдентификаторСтроки);
		МассивРаспределенныхЗаказов.Добавить(ДанныеИдентификатора);

	КонецЦикла;
	
	Если СоответсвиеЗаказов.Количество() <> 0 
		И НовСтрокаЗаказ <> Неопределено
		И НовСтрокаЗаказ.FTL Тогда
		МассивГрузов = ПолучитьВсеГрузыЗаказа(НовСтрокаЗаказ.Ссылка, НовСтрокаЗаказ.ДетализацияЗакрытия);
		СоответствиеFTLКоличестваГрузов.Вставить(НовСтрокаЗаказ.Ссылка, МассивГрузов.Количество());
		Для Каждого ТекЭлемМассива Из МассивГрузов Цикл
			Если ЗначениеЗаполнено(ТекЭлемМассива.Груз) Тогда
				НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекЭлемМассива);
				НовСтрокаНом.FTL           = Истина;
				НовСтрокаНом.Номенклатура  = ТекЭлемМассива.Груз;
				НовСтрокаНом.КолМест       = ТекЭлемМассива.КоличествоМест;
				НовСтрокаНом.ЦветДокумента = 0;
				НовСтрокаНом.Код            = ТекЭлемМассива.ИдентификаторСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСпособПересчетаПлановогоВремени()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
		"ПересчетВремени", 
		СпособПересчетаПлановогоВремениПоУмолчанию
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРежимПересчетаВремени()
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		УстановитьПометкуРежимПересчетаВремениДерево();
	Иначе
		УстановитьПометкуРежимПересчетаВремениСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРежимПересчетаВремениДерево()
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
		Если Элементы.АвтоматическийПересчетВремени.Пометка Тогда 
			Элементы.АвтоматическийПересчетВремени.Пометка = Ложь;
		КонецЕсли;
		
		Если Элементы.РучнойПересчетВремени.Пометка Тогда 
			Элементы.РучнойПересчетВремени.Пометка = Ложь;
		КонецЕсли;
		
	Иначе 
		ТекМЛ = ТекущиеДанные;
		Пока Не ТекМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл 
			ТекМЛ = ТекМЛ.ПолучитьРодителя();
		КонецЦикла;
		
		Если ТекМЛ.ПересчетВремени = 1 Тогда 
			Если Элементы.АвтоматическийПересчетВремени.Пометка Тогда 
				Элементы.АвтоматическийПересчетВремени.Пометка = Ложь;
			КонецЕсли;
			
			Если Не Элементы.РучнойПересчетВремени.Пометка Тогда 
				Элементы.РучнойПересчетВремени.Пометка = Истина;
			КонецЕсли;
		Иначе 
			Если Не Элементы.АвтоматическийПересчетВремени.Пометка Тогда 
				Элементы.АвтоматическийПересчетВремени.Пометка = Истина;
			КонецЕсли;
			
			Если Элементы.РучнойПересчетВремени.Пометка Тогда 
				Элементы.РучнойПересчетВремени.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРежимПересчетаВремениСписок()
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.МЛ) 
		ИЛИ ТекущиеДанные.НовыйМЛ Тогда 
		
		Если ТекущиеДанные.ПересчетВремени = 1 Тогда 
			Если Элементы.АвтоматическийПересчетВремени.Пометка Тогда 
				Элементы.АвтоматическийПересчетВремени.Пометка = Ложь;
			КонецЕсли;
			
			Если Не Элементы.РучнойПересчетВремени.Пометка Тогда 
				Элементы.РучнойПересчетВремени.Пометка = Истина;
			КонецЕсли;
		Иначе 
			Если Не Элементы.АвтоматическийПересчетВремени.Пометка Тогда 
				Элементы.АвтоматическийПересчетВремени.Пометка = Истина;
			КонецЕсли;
			
			Если Элементы.РучнойПересчетВремени.Пометка Тогда 
				Элементы.РучнойПересчетВремени.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСписокТС(ВидОперации = "МаршрутыЗаполнитьВсемиТС")
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыСтроки = МаршрутыДерево.ПолучитьЭлементы();
	Иначе
		МаршрутыСтроки = МаршрутыСписок;
	КонецЕсли;
	
	Если МаршрутыСтроки.Количество() Тогда 
		
		ТекстВопроса = НСтр("en='All generated routes will be cleared. Continue?';
		|ru='Все не сохраненные изменения в Маршрутных листах будут потеряны. Продолжить?'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("МаршрутыЗаполнитьСписокТСОчистка", ЭтотОбъект, ВидОперации),
			ТекстВопроса,
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		МаршрутыЗаполнитьСписокТСЗавершение(ВидОперации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСписокТСОчистка(РезультатВопроса, ВидОперации) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			МаршрутыДерево.ПолучитьЭлементы().Очистить();
		Иначе
			МаршрутыСписок.Очистить();
			МаршрутыСписокЗаказов.Очистить();
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		
		МаршрутыЗаполнитьСписокТСЗавершение(ВидОперации, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСписокТСЗавершение(ВидОперации, ПолноеОбновлениеСписка = Ложь)
	
	Если МассивРаспределенныхЗаказов.Количество() <> 0 Тогда
		МассивРаспределенныхЗаказов = Новый Массив();
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
		ОбновитьСписокЗаказов();
	КонецЕсли;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);
	
	ВызовСторФормы = Ложь;
	Если ВидОперации = "МаршрутыЗаполнитьВсемиТС" Тогда
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьСобственнымиТС" Тогда
		ПараметрыЗапросаТС.ПривлеченныеТС        = Ложь;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьСобственнымиТССЭкипажем" Тогда
		ПараметрыЗапросаТС.ПривлеченныеТС        = Ложь;
		ПараметрыЗапросаТС.ТСсЭкипажем           = Истина;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьПривлеченнымиТС" Тогда
		ПараметрыЗапросаТС.СобственныеТС         = Ложь;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьВиртуальнымиТС" Тогда
		МаршрутыЗаполнитьВиртуальнымиТСЗавершение();
		ВызовСторФормы = Истина;
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьВсеТСсМаршрутами" Тогда
		ПараметрыЗапросаТС.ТСсМЛ                 = Истина;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьТСпоЗонамОтбора" Тогда
		ПараметрыЗапросаТС.ТСЗакрепленыеЗаЗонами = Истина;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьПоМаршрутам" Тогда
		МаршрутыЗаполнитьПоМаршрутамФормаВыбора();
		ВызовСторФормы = Истина;
	КонецЕсли;
	
	Если НЕ ВызовСторФормы Тогда
		ОбновитьПланировщик();
		ОтобразитьДанныеНаКарте_МЛисты(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланировщик()
	
	Если ФормаПланировщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаПланировщика.ПланировщикОткрыт Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда 
			Оповестить("ОбновитьДанныеПланировщика", МаршрутыДерево, ЭтотОбъект);
		Иначе
			СтруктураПолей = "УровеньДерева, Группировка, МЛ, ПринадлежностьТС,
				|ВесБрутто,Объем,Этап,ВремяПрибытияВПункт,УбытиеПлан,
				|GUID,СобственноеТС,КоличествоВиртуальныхТС,ТС,Прицеп1,Прицеп2,
				|Модифицированность,ЭтапМаршрутизации,ВремяПрибытияВПункт,МассивМЛ";
			МассивТС = Новый Массив();
			ПредТС   = Неопределено;
			Для Каждого ТекСтрока Из МаршрутыСписок Цикл
				СтруктураТС = Новый Структура(СтруктураПолей);
				ЗаполнитьЗначенияСвойств(СтруктураТС, ТекСтрока);
				СтруктураТС.УровеньДерева = "ТС";
				СтруктураТС.Группировка   = ТекСтрока.ТС;
				СтруктураТС.МассивМЛ      = Новый Массив();
				
				Если ЗначениеЗаполнено(ТекСтрока.МЛ)
					ИЛИ ТекСтрока.НовыйМЛ Тогда
					СтруктураТС.МЛ = ТекСтрока.МЛ;
					
					МассивПунктов = Новый Массив();
					
					СтруктураМЛ   = Новый Структура(СтруктураПолей);
					ЗаполнитьЗначенияСвойств(СтруктураМЛ, СтруктураТС);
					
					СтруктураМЛ.ВремяПрибытияВПункт  = ТекСтрока.ДатаНачала;
					СтруктураМЛ.Группировка          = ТекСтрока.АдресОтправления;
					МассивПунктов.Добавить(СтруктураМЛ);
					
					СтруктураМЛ   = Новый Структура(СтруктураПолей);
					ЗаполнитьЗначенияСвойств(СтруктураМЛ, СтруктураТС);
					
					СтруктураМЛ.УбытиеПлан           = ТекСтрока.ДатаОкончания;
					СтруктураМЛ.Группировка          = ТекСтрока.АдресНазначения;
					МассивПунктов.Добавить(СтруктураМЛ);

					МассивПунктов.Добавить(СтруктураМЛ);
					СтруктураТС.МассивМЛ = МассивПунктов;
				КонецЕсли;
				МассивТС.Добавить(СтруктураТС);
			КонецЦикла;
			
			Оповестить("ОбновитьДанныеПланировщика", МассивТС, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТСНаПланировщике(Знач ТекТС)
	
	Если ФормаПланировщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекТС) = Тип("Строка") Тогда
		Если ФормаПланировщика.ПланировщикОткрыт Тогда
			ФормаПланировщика.ТекТС = ТекТС;
			Оповестить("ВыделитьТСНаПланировщике", ТекТС, ЭтотОбъект);
		КонецЕсли;
		Возврат;
	ИначеЕсли НастройкаРежимОтображенияМЛ = 0 Тогда
		Пока Не ТекТС.ПолучитьРодителя() = Неопределено Цикл 
			ТекТС = ТекТС.ПолучитьРодителя();
		КонецЦикла;
		
		ТекТС = ТекТС.GUID;
	КонецЕсли;
	
	Если ФормаПланировщика.ПланировщикОткрыт Тогда
		ФормаПланировщика.ТекТС = ТекТС;
		Оповестить("ВыделитьТСНаПланировщике", ТекТС, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПланирования()
	
	Если ФормаПланировщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаПланировщика.ПланировщикОткрыт Тогда
		Оповестить("ОбновитьДатуПланирования", ДатаПланирования, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция мсвДоступныхЗон(ТекПользователь)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатГеозоны_уэ.Ссылка
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	НЕ уатГеозоны_уэ.ПометкаУдаления
	|	И НЕ уатГеозоны_уэ.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	уатГеозоны_уэ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатГеозоны_уэ.Сотрудники.Сотрудник) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатГеозоны_уэ.Ссылка
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	НЕ уатГеозоны_уэ.ПометкаУдаления
	|	И НЕ уатГеозоны_уэ.ЭтоГруппа
	|	И уатГеозоны_уэ.Сотрудники.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", ТекПользователь);
	мсвРез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мсвРез;
КонецФункции

&НаКлиенте
Процедура МаршрутыЗаполнитьВиртуальнымиТСЗавершение()
	
	МассивРаспределенныхЗаказов = Новый Массив();
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	Элементы.ЗаказыСписок.Обновить();

	Оповещение = Новый ОписаниеОповещения("МаршрутыЗаполнитьВиртуальнымиТСПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатАРМЛогиста_уэ.Форма.ФормаВыбораВиртуальныхТС",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСпоЗонеОтбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("en='All generated routes will be cleared. Continue?';
	|ru='Все не сохраненные изменения в Маршрутных листах будут потеряны. Продолжить?'");
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыСтроки = МаршрутыДерево.ПолучитьЭлементы();
	Иначе
		МаршрутыСтроки = МаршрутыСписок;
	КонецЕсли;
	
	Если МаршрутыСтроки.Количество() Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ТСпоЗонеОтбораОчистка", ЭтотОбъект, Результат),
			ТекстВопроса,
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ТСпоЗонеОтбораЗаполнение(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСпоЗонеОтбораОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			МаршрутыДерево.ПолучитьЭлементы().Очистить();
		Иначе
			МаршрутыСписок.Очистить();
			МаршрутыСписокЗаказов.Очистить();
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();

		КонецЕсли;
		ТСпоЗонеОтбораЗаполнение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСпоЗонеОтбораЗаполнение(Результат)
	
	Если МассивРаспределенныхЗаказов.Количество() <> 0 Тогда
		МассивРаспределенныхЗаказов = Новый Массив();
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
		Элементы.ЗаказыСписок.Обновить();
	КонецЕсли;	

	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТСпоЗонеОтбораЗаполнениеДерево(Результат);
	Иначе
		ТСпоЗонеОтбораЗаполнениеСписок(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСпоЗонеОтбораЗаполнениеДерево(Результат)
	
	// Сохраним состояние флажков "СоздатьМаршрутныйЛист" до обновления дерева маршрутов.
	соотПризнакиПоТС = Новый Соответствие();
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		соотПризнакиПоМЛ = Новый Соответствие();
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл 
			соотПризнакиПоМЛ.Вставить(ТекСтрокаМЛ.Группировка, ТекСтрокаМЛ.СоздатьМаршрутныйЛист);
		КонецЦикла;
		соотПризнакиПоТС.Вставить(ТекСтрокаТС.ТС, соотПризнакиПоМЛ);
	КонецЦикла;
	
	ТСпоЗонеОтбораЗаполнениеСервер(Результат);
	ОбновитьДанныеПоСтоянкамСервер();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
	ОбновитьВесоОбъемныеХарактеристикиМаршрута();
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	// Восстановим состояние флажков "СоздатьМаршрутныйЛист" до обновления дерева маршрутов.
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		УзелТС = соотПризнакиПоТС.Получить(ТекСтрокаТС.ТС);
		Если УзелТС = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл 
			ЗначФлага = УзелТС.Получить(ТекСтрокаМЛ.Группировка);
			Если ЗначФлага = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекСтрокаМЛ.СоздатьМаршрутныйЛист = ЗначФлага;
		КонецЦикла;
	КонецЦикла;
	
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСпоЗонеОтбораЗаполнениеСписок(Результат)
	
	ТСпоЗонеОтбораЗаполнениеСервер(Результат);
	ОбновитьВесоОбъемныеХарактеристикиМаршрута();
	ОтобразитьИтоговыеДанныеПоМаршрутам();
		
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	ОбновитьПланировщик();
КонецПроцедуры

&НаСервере
Процедура ТСпоЗонеОтбораЗаполнениеСервер(Результат)
	
	списЗоны = Новый СписокЗначений();
	списЗоны.Добавить(Результат);
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);
	
	Если НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС Тогда
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(списЗоны, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат);
	Иначе
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(списЗоны, ДатаПланирования, ПараметрыЗапросаТС);
	КонецЕсли;
	
	ПредТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	ТабМаршрутов = ПривязанныеМаршрутыТС(мсвТС);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекТС Из мсвТС Цикл
			Если ТСЕстьВМаршрутахСервер(ТекТС.ТС) И Не ТекТС.ТС = ПредТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекТС.ТС = ПредТС Тогда
				НовСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС, ТекТС.Прицеп1, ТекТС.Прицеп2, ТабМаршрутов);
			КонецЕсли;
			ПредТС = ТекТС.ТС;
		КонецЦикла;
	Иначе
		Для Каждого ТекТС Из мсвТС Цикл
			НовСтрока = МаршрутыСписок.Добавить();
			ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС, ТекТС.Прицеп1, ТекТС.Прицеп2, ТабМаршрутов);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	
	Если НастройкаИспользоватьРасчетТары Тогда 
		ОбновитьРеквизитыТарыИРазмещения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьВиртуальнымиТСПослеВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МаршрутыЗаполнитьВиртуальнымиТСПослеВыбораСервер(РезультатЗакрытия);
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьДанныеПоСтоянкамСервер();
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;	
	КонецЕсли;
	
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ОбновитьПланировщик();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МаршрутыЗаполнитьВиртуальнымиТСПослеВыбораСервер(РезультатЗакрытия)
	
	СоответствиеМаршрутов = уатАРМ.ПривязанныеМаршрутыТС(РезультатЗакрытия);
	Для Каждого ТекСтрока Из РезультатЗакрытия Цикл 
		СтрокаГруппыТС = Неопределено;
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Для Каждого ТекСтрокаДерева Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаДерева.ТС = ТекСтрока.ТС Тогда 
					СтрокаГруппыТС = ТекСтрокаДерева;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаГруппыТС = Неопределено Тогда 
				НовСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекСтрока,,, СоответствиеМаршрутов);
				НовСтрока.ПредставлениеВиртТС = ТекСтрока.ПредставлениеВиртТС;
				НовСтрока.ТСПредставление     = ТекСтрока.ПредставлениеТС;
			Иначе 
				СтрокаГруппыТС.КоличествоВиртуальныхТС = СтрокаГруппыТС.КоличествоВиртуальныхТС + ТекСтрока.КоличествоВиртуальныхТС;
			КонецЕсли;
		Иначе
			Для Счетчик = 1 По ТекСтрока.КоличествоВиртуальныхТС Цикл 
				НовСтрока = МаршрутыСписок.Добавить();
				ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекСтрока,,, СоответствиеМаршрутов);
				НовСтрока.ТСПредставление     = ТекСтрока.ПредставлениеТС;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрокаТС, СтрокаТабТС, Прицеп1 = Неопределено, Прицеп2 = Неопределено,
	СоответсвиеМаршрутов = Неопределено, ЗаполнитьПрицепы = Ложь)
	
	ЗаполнитьСтрокуТСВМаршрутахСервер(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрокаТС, СтрокаТабТС,
		Прицеп1, Прицеп2, ЗаполнитьПрицепы);
	ОбновитьВесоОбъемныеХарактеристикиМаршрутаСписок(НовСтрокаТС);
	
	Если СоответсвиеМаршрутов <> Неопределено Тогда
		Маршруты = СоответсвиеМаршрутов.Получить(СтрокаТабТС.ТС);
		Если Маршруты <> Неопределено Тогда
			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				ПривязаныеМаршруты = "";
				Для Каждого Маршрут Из Маршруты Цикл
					НовСтрокаТС.МаршрутыСписок.Добавить(Маршрут.Ссылка);
					Если Не ПустаяСтрока(ПривязаныеМаршруты) Тогда
						ПривязаныеМаршруты = ПривязаныеМаршруты + "; " + Маршрут.Наименование;
					Иначе 
						ПривязаныеМаршруты = Маршрут.Наименование;
					КонецЕсли;
				КонецЦикла;
				НовСтрокаТС.Маршрут = ПривязаныеМаршруты;

			Иначе
				Если НастройкаАлгоритмМаршрутизации = 5 Тогда
					ПерваяСтрока = Истина;
					Для Каждого Маршрут Из Маршруты Цикл
						Если ПерваяСтрока Тогда
							НовСтрокаТС.МаршрутыСписок.Добавить(Маршрут.Ссылка);
							НовСтрокаТС.Маршрут = Маршрут.Ссылка;
							
							ПерваяСтрока = Ложь;
						Иначе
							НовСтрокаТСМаршрут = МаршрутыСписок.Добавить();
							ЗаполнитьСтрокуТСВМаршрутахСервер(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрокаТСМаршрут, СтрокаТабТС,
							Прицеп1, Прицеп2, ЗаполнитьПрицепы);
							НовСтрокаТСМаршрут.МаршрутыСписок.Добавить(Маршрут.Ссылка);
							НовСтрокаТСМаршрут.Маршрут = Маршрут.Ссылка;
							ОбновитьВесоОбъемныеХарактеристикиМаршрутаСписок(НовСтрокаТСМаршрут);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуТСВМаршрутахСервер(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрокаТС, СтрокаТабТС,
	Прицеп1 = Неопределено, Прицеп2 = Неопределено, ЗаполнитьПрицепы = Ложь)
	
	НовСтрокаТС.ТС                             = СтрокаТабТС.ТС;
	НовСтрокаТС.МодельТС                       = СтрокаТабТС.МодельТС;
	НовСтрокаТС.ГаражТС                        = СтрокаТабТС.ГаражТС;
	НовСтрокаТС.ГаражТСЛат                     = СтрокаТабТС.ГаражТСЛат;
	НовСтрокаТС.ГаражТСЛон                     = СтрокаТабТС.ГаражТСЛон;
	НовСтрокаТС.Грузоподъемность               = СтрокаТабТС.Грузоподъемность;
	НовСтрокаТС.ОбъемКузова                    = СтрокаТабТС.ОбъемКузова;
	НовСтрокаТС.МаксимальноеКоличествоУпаковок = СтрокаТабТС.МаксимальноеКоличествоУпаковок;
	НовСтрокаТС.СобственныйВесТС               = СтрокаТабТС.СобственныйВес;
	НовСтрокаТС.МинимальноеКоличествоУпаковок  = СтрокаТабТС.МинимальноеКоличествоУпаковок;
	НовСтрокаТС.МинимальныйВесГруза            = СтрокаТабТС.МинимальныйВесГруза;
	НовСтрокаТС.МинимальныйОбъемГруза          = СтрокаТабТС.МинимальныйОбъемГруза;
	НовСтрокаТС.ТСПредставление                = СтрокаТабТС.ПредставлениеТС;
	НовСтрокаТС.ПредставлениеМЛ                = СтрокаТабТС.ПредставлениеМЛ;
	НовСтрокаТС.ПринадлежностьТС               = СтрокаТабТС.ПринадлежностьТС;
	
	Для Каждого ТекСтрока ИЗ СтрокаТабТС.ХарактеристикиТС Цикл
		НовСтрокаТС.ХарактеристикиТС.Добавить(ТекСтрока.ТСХарактеристика);
	КонецЦикла;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		НовСтрокаТС.Группировка                    = СтрокаТабТС.ТС;
		НовСтрокаТС.УровеньДерева                  = "ТС";
		НовСтрокаТС.АдресГруппировкаУказанНаКарте  = СтрокаТабТС.ИндексКартинки;
		НовСтрокаТС.СобственноеТС                  = СтрокаТабТС.ИндексКартинки;
		НовСтрокаТС.КоличествоВиртуальныхТС        = СтрокаТабТС.КоличествоВиртуальныхТС;
	Иначе
		НовСтрокаТС.КартинкаПринадлежность  = СтрокаТабТС.ИндексКартинки;
	КонецЕсли;
	НовСтрокаТС.GUID = Строка(Новый УникальныйИдентификатор);
	
	Если Прицеп1 <> Неопределено
		И Прицеп2 <> Неопределено 
		И НастройкаАлгоритмМаршрутизации <> 5 Тогда
		НовСтрокаТС.Прицеп1 = Прицеп1;
		НовСтрокаТС.Прицеп2 = Прицеп2;
		НовСтрокаТС.Прицеп1Грузоподъемность               = СтрокаТабТС.Прицеп1Грузоподъемность;
		НовСтрокаТС.Прицеп1ОбъемКузова                    = СтрокаТабТС.Прицеп1ОбъемКузова;
		НовСтрокаТС.Прицеп1МаксимальноеКоличествоУпаковок = СтрокаТабТС.Прицеп1МаксимальноеКоличествоУпаковок;
		НовСтрокаТС.Прицеп2Грузоподъемность               = СтрокаТабТС.Прицеп2Грузоподъемность;
		НовСтрокаТС.Прицеп2ОбъемКузова                    = СтрокаТабТС.Прицеп2ОбъемКузова;
		НовСтрокаТС.Прицеп2МаксимальноеКоличествоУпаковок = СтрокаТабТС.Прицеп2МаксимальноеКоличествоУпаковок;
		
		НовСтрокаТС.Грузоподъемность = НовСтрокаТС.Грузоподъемность + НовСтрокаТС.Прицеп1Грузоподъемность + НовСтрокаТС.Прицеп2Грузоподъемность;
		НовСтрокаТС.ОбъемКузова      = НовСтрокаТС.ОбъемКузова + НовСтрокаТС.Прицеп1ОбъемКузова + НовСтрокаТС.Прицеп2ОбъемКузова;
		НовСтрокаТС.МаксимальноеКоличествоУпаковок = НовСтрокаТС.МаксимальноеКоличествоУпаковок
			+ НовСтрокаТС.Прицеп1МаксимальноеКоличествоУпаковок + НовСтрокаТС.Прицеп2МаксимальноеКоличествоУпаковок;
	КонецЕсли;
	
	Если ЗаполнитьПрицепы 
		И НастройкаАлгоритмМаршрутизации <> 5 Тогда
		СтруктураПрицепов = ЗаполнитьПрицепы(СтрокаТабТС.ТС);
		ЗаполнитьЗначенияСвойств(НовСтрокаТС, СтруктураПрицепов);
		
		НовСтрокаТС.Грузоподъемность = НовСтрокаТС.Грузоподъемность + НовСтрокаТС.Прицеп1Грузоподъемность + НовСтрокаТС.Прицеп2Грузоподъемность;
		НовСтрокаТС.ОбъемКузова      = НовСтрокаТС.ОбъемКузова + НовСтрокаТС.Прицеп1ОбъемКузова + НовСтрокаТС.Прицеп2ОбъемКузова;
		НовСтрокаТС.МаксимальноеКоличествоУпаковок = НовСтрокаТС.МаксимальноеКоличествоУпаковок
		+ НовСтрокаТС.Прицеп1МаксимальноеКоличествоУпаковок + НовСтрокаТС.Прицеп2МаксимальноеКоличествоУпаковок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПрицепы(ВСоставе)
	
	Возврат уатАРМ.ЗаполнитьПрицепы(ВСоставе);
	
КонецФункции

&НаСервере
Процедура ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер(МассивТС = Неопределено)
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);
	ПараметрыЗапросаТС.ТСсМЛ = Истина;
	мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования,,МассивТС);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Дерево(мсвТС);
	Иначе
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Список(мсвТС,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Список(мсвТС, УдалятьМЛ = Истина, ОбновлениеМодификаций = Истина)
	
 	ТаблицаМаршрутов = РеквизитФормыВЗначение("МаршрутыСписок");
	ТаблицаМаршрутов.Индексы.Добавить("ТС");
	
	мсвУдаляемыеТС = Новый Массив();
	Для Каждого СтрокаТСОбход Из ТаблицаМаршрутов Цикл
		Если ЗначениеЗаполнено(СтрокаТСОбход.МЛ) 
			И НЕ СтрокаТСОбход.Модифицированность Тогда
			мсвУдаляемыеТС.Добавить(СтрокаТСОбход);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекУдалить Из мсвУдаляемыеТС Цикл		
		СтруктураПоиска = Новый Структура("ТС, МаршрутныйЛист", ТекУдалить.ТС, ТекУдалить.МЛ);
		СтрокиТС        = мсвТС.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТС.Количество() = 0 Тогда
			ТекУдалить.СоздатьМаршрутныйЛист = Ложь;
			ТекУдалить.МЛ                    = Неопределено;
			ТекУдалить.НовыйМЛ               = Ложь;
			ТекУдалить.ЦветДокумента         = 0;
			ТекУдалить.ВидПеревозки          = Неопределено;
			ТекУдалить.ОбъектСтроительства   = Неопределено;
			ТекУдалить.НаправлениеПеревозки  = Неопределено;
			ТекУдалить.АдресВременногоХранилища = "";
			ТекУдалить.ВремяВПути               = 0;
			ТекУдалить.Расстояние               = 0;
			Если НЕ НастройкаАлгоритмМаршрутизации = 5 Тогда 
				ТекУдалить.Маршрут	= Неопределено;
			КонецЕсли;
			ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ТекУдалить.GUID));
			Для Каждого ТекСтрока Из  ЭлементыВетка Цикл
				МаршрутыСписокЗаказов.Удалить(ТекСтрока);
			КонецЦИкла;
			
			ОбновитьВесоОбъемныеХарактеристикиМаршрута(ТекУдалить);
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение маршрутных листов.
	Для Каждого текДанныеПоТС Из мсвТС Цикл 
		
		Если НЕ ЗначениеЗаполнено(текДанныеПоТС.МаршрутныйЛист) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("МЛ", текДанныеПоТС.МаршрутныйЛист);
		СтрокиМЛ        = ТаблицаМаршрутов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиМЛ.Количество() <> 0 
			И СтрокиМЛ[0].Модифицированность Тогда
			МЛРазмещен = Истина;
		Иначе
			СтруктураПоиска = Новый Структура("ТС", текДанныеПоТС.ТС);
			СтрокиТС        = ТаблицаМаршрутов.НайтиСтроки(СтруктураПоиска);	
			
			Если СтрокиТС.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МЛРазмещен = Ложь;
			МЛЗаполнен = Ложь;
			СтрокаТС   = Неопределено;
			
			ТекСтрокаТС = Неопределено;
			Для Каждого СтрокаТСОбход Из СтрокиТС Цикл 
				Если СтрокаТСОбход.МЛ = текДанныеПоТС.МаршрутныйЛист Тогда
					МЛЗаполнен = Истина;
					Если СтрокаТСОбход.Модифицированность Тогда 
						МЛРазмещен = Истина;
					КонецЕсли;
					СтрокаТС = СтрокаТСОбход;
					Прервать;
				КонецЕсли;
				Если СтрокаТСОбход.Маршрут = Неопределено Тогда
					СтрокаТСОбход.Маршрут = ПредопределенноеЗначение("Справочник.уатМаршруты.ПустаяСсылка");
				КонецЕсли;
				
				Если ((НастройкаАлгоритмМаршрутизации = 5 
					И СтрокаТСОбход.Маршрут = текДанныеПоТС.МаршрутныйЛистМаршрут) 
					ИЛИ НЕ НастройкаАлгоритмМаршрутизации = 5)
					И НЕ СтрокаТСОбход.Модифицированность 
					И НЕ ЗначениеЗаполнено(СтрокаТСОбход.МЛ) Тогда
					СтрокаТС = СтрокаТСОбход;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаТС = Неопределено Тогда
				КолВоСтрок = СтрокиТС.Количество() - 1;
				СтрокаТС   = ТаблицаМаршрутов.Вставить(ТаблицаМаршрутов.Индекс(СтрокиТС[КолВоСтрок]) + 1);
				// Добавление колонок в таблицы ЗатратыНаПеревозку и Секции, 
				// т.к. автоматически они добавляются в таблицу формы МаршрутыСписок, но не в таблицу значений ТаблицаМаршрутов
				Для Каждого ТекКолонка Из СтрокиТС[0].Секции.Колонки Цикл
					СтрокаТС.Секции.Колонки.Добавить(ТекКолонка.Имя, ТекКолонка.ТипЗначения);
				КонецЦикла;
				Для Каждого ТекКолонка Из СтрокиТС[0].ЗатратыНаПеревозку.Колонки Цикл
					СтрокаТС.ЗатратыНаПеревозку.Колонки.Добавить(ТекКолонка.Имя, ТекКолонка.ТипЗначения);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(СтрокаТС, СтрокиТС[0],, "ЗатратыНаПеревозку, Секции");
			КонецЕсли;
		КонецЕсли;
		Если НЕ МЛРазмещен Тогда 
			Если МЛЗаполнен Тогда
				ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", СтрокаТС.GUID));
				Для Каждого ТекСтрока Из ЭлементыВетка Цикл
					МаршрутыСписокЗаказов.Удалить(ТекСтрока);
				КонецЦикла;
			КонецЕсли;
			ЗаполнитьВложенныеМаршрутныеЛисты_Список(СтрокаТС, текДанныеПоТС, текДанныеПоТС.Заказы, текДанныеПоТС.Секции);
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаМаршрутов, "МаршрутыСписок");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Дерево(мсвТС)
	
	// Очистка данных по МЛ.
	мсвУдаляемыеТС = Новый Массив();
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		мсвУдалитьСтроки = Новый Массив();
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
			Если ТекМЛ.Группировка = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка") 
					Или ТекМЛ.Модифицированность Тогда 
				Продолжить;
			КонецЕсли;
			мсвУдалитьСтроки.Добавить(ТекМЛ);
		КонецЦикла;
		Для Каждого ТекУдалить Из мсвУдалитьСтроки Цикл 
			ТекТС.ПолучитьЭлементы().Удалить(ТекУдалить);
		КонецЦикла;
		Если ТекТС.ПолучитьЭлементы().Количество() = 0 И ТекТС.СобственноеТС = 6 И ТекТС.КоличествоВиртуальныхТС = 0 Тогда 
			мсвУдаляемыеТС.Добавить(ТекТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из мсвУдаляемыеТС Цикл 
		МаршрутыДерево.ПолучитьЭлементы().Удалить(СтрокаУдалить);
	КонецЦикла;
	
	// Заполнение маршрутных листов.
	Для Каждого текДанныеПоТС Из мсвТС Цикл
		Если НЕ ЗначениеЗаполнено(текДанныеПоТС.МаршрутныйЛист) Тогда
			Продолжить;
		КонецЕсли;
		
		строкаТС = Неопределено;
		строкаТСГруппаВирт = Неопределено;
		
		Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если Не строкаТС = Неопределено И Не строкаТСГруппаВирт = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			Если ТекТС.ТС = текДанныеПоТС.ТС Тогда 
				Если ТекТС.СобственноеТС = 6 И строкаТСГруппаВирт = Неопределено Тогда 
					строкаТСГруппаВирт = ТекТС;
				ИначеЕсли строкаТС = Неопределено Тогда  
					строкаТС = ТекТС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если строкаТС = Неопределено И строкаТСГруппаВирт = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТСЕстьВМаршрутахСервер(текДанныеПоТС.ТС) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеРеквизитаОбъекта(текДанныеПоТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда 
			строкаТС = МаршрутыДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(строкаТС, строкаТСГруппаВирт,, "ЗатратыНаПеревозку,GUID,Секции");
			строкаТС.КоличествоВиртуальныхТС = 0;
			строкаТС.ПредставлениеВиртТС = "";
			строкаТС.GUID = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		МЛРазмещен = Ложь;
		Для Каждого СтрокаТСОбход Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Для Каждого ВложСтрока Из СтрокаТСОбход.ПолучитьЭлементы() Цикл 
				Если ВложСтрока.Группировка = текДанныеПоТС.МаршрутныйЛист И ВложСтрока.Модифицированность Тогда 
					МЛРазмещен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НЕ МЛРазмещен Тогда 
			ЗаполнитьВложенныеМаршрутныеЛисты(строкаТС.ПолучитьИдентификатор(), текДанныеПоТС, текДанныеПоТС.Заказы,
				текДанныеПоТС.Секции, текДанныеПоТС.ПредставлениеМЛдляOSM, текДанныеПоТС.ПредставлениеМЛ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеТС(ДанныеПоТС, НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации) 
	
	Результат = Новый Соответствие();
	
	ТабДляЗапроса = Новый ТаблицаЗначений();
	ТабДляЗапроса.Колонки.Добавить("ТС",         Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ТабДляЗапроса.Колонки.Добавить("ID",         Новый ОписаниеТипов("Число"));
	ТабДляЗапроса.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабДляЗапроса.Колонки.Добавить("Прицеп1",    Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ТабДляЗапроса.Колонки.Добавить("Прицеп2",    Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	
	Для Каждого ТекСтрока Из ДанныеПоТС Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТабДляЗапроса.Добавить();
		НовСтрока.ТС = ТекСтрока.ТС;
		
		Если ТекСтрока.Свойство("ID") Тогда 
			НовСтрока.ID = ТекСтрока.ID;
		Иначе 
			НовСтрока.ID = -1;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Количество") Тогда 
			НовСтрока.Количество = ТекСтрока.Количество;
		Иначе 
			НовСтрока.Количество = 1;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Прицеп1") Тогда 
			НовСтрока.Прицеп1 = ТекСтрока.Прицеп1;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Прицеп2") И Не (ТекСтрока.Свойство("Прицеп1") И ТекСтрока.Прицеп1 = ТекСтрока.Прицеп2) Тогда
			НовСтрока.Прицеп2 = ТекСтрока.Прицеп2;
		КонецЕсли;
	КонецЦикла;
	
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	КоэффициентОбъемаКузова     = ВесоОбъемныеХарактеристики.КоэффициентОбъемаКузова;
	КоэффициентГрузоподъемности = ВесоОбъемныеХарактеристики.КоэффициентГрузоподъемности;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабДляЗапроса", ТабДляЗапроса);
	Запрос.УстановитьПараметр("КоэфГП",        КоэффициентГрузоподъемности);
	Запрос.УстановитьПараметр("КоэфОбъем",     КоэффициентОбъемаКузова);
	Запрос.УстановитьПараметр("ЯндексМаршрутизация",  НастройкаАлгоритмМаршрутизации = 3);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДляЗапроса.ТС КАК ТС,
	|	ТабДляЗапроса.ID КАК ID,
	|	ТабДляЗапроса.Количество КАК Количество,
	|	ТабДляЗапроса.Прицеп1 КАК Прицеп1,
	|	ТабДляЗапроса.Прицеп2 КАК Прицеп2
	|ПОМЕСТИТЬ ВТ_ТС
	|ИЗ
	|	&ТабДляЗапроса КАК ТабДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабТС.ТС КАК ТС,
	|	ТабТС.ID КАК ID,
	|	ТабТС.Количество КАК Количество,
	|	уатТС.Наименование КАК НаименованиеТС,
	|	уатТС.Организация КАК Организация,
	|	ЕСТЬNULL(уатТС.Модель, ЗНАЧЕНИЕ(Справочник.уатМоделиТС.ПустаяСсылка)) КАК Модель,
	|	ЕСТЬNULL(уатТС.Модель.Наименование, """") КАК НаименованиеМодели,
	|	ВЫБОР
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.АвиационныйТранспорт)
	|			ТОГДА 5
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.МорскойТранспорт)
	|			ТОГДА 9
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.ЖДТранспорт)
	|			ТОГДА 8
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|					ТОГДА 4
	|				КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	|					ТОГДА 6
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА уатТС.Грузоподъемность <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(уатТС.Грузоподъемность, 0) * &КоэфГП
	|		ИНАЧЕ ЕСТЬNULL(уатМоделиТС.Грузоподъемность, 0) * &КоэфГП
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникПрицеп1.Грузоподъемность <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(СправочникПрицеп1.Грузоподъемность, 0) * &КоэфГП
	|		ИНАЧЕ ЕСТЬNULL(МоделиПрицеп1.Грузоподъемность, 0) * &КоэфГП
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникПрицеп2.Грузоподъемность <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(СправочникПрицеп2.Грузоподъемность, 0) * &КоэфГП
	|		ИНАЧЕ ЕСТЬNULL(МоделиПрицеп2.Грузоподъемность, 0) * &КоэфГП
	|	КОНЕЦ КАК Грузоподъемность,
	|	ВЫБОР
	|		КОГДА уатТС.ОбъемКузова <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(ОбъемСекцииТС.Объем, ЕСТЬNULL(уатТС.ОбъемКузова, 0)) * &КоэфОбъем
	|		ИНАЧЕ ЕСТЬNULL(ОбъемСекцииТС.Объем, ЕСТЬNULL(уатМоделиТС.ОбъемКузова, 0)) * &КоэфОбъем
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникПрицеп1.ОбъемКузова <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(ОбъемСекцииПрицеп1.Объем, ЕСТЬNULL(СправочникПрицеп1.ОбъемКузова, 0)) * &КоэфОбъем
	|		ИНАЧЕ ЕСТЬNULL(ОбъемСекцииПрицеп1.Объем, ЕСТЬNULL(МоделиПрицеп1.ОбъемКузова, 0)) * &КоэфОбъем
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникПрицеп2.ОбъемКузова <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(ОбъемСекцииПрицеп2.Объем, ЕСТЬNULL(СправочникПрицеп2.ОбъемКузова, 0)) * &КоэфОбъем
	|		ИНАЧЕ ЕСТЬNULL(ОбъемСекцииПрицеп2.Объем, ЕСТЬNULL(МоделиПрицеп2.ОбъемКузова, 0)) * &КоэфОбъем
	|	КОНЕЦ КАК ОбъемКузова,
	|	ВЫБОР
	|		КОГДА уатТС.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(уатТС.МаксимальноеКоличествоУпаковок, 0)
	|		ИНАЧЕ ЕСТЬNULL(уатМоделиТС.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникПрицеп1.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(СправочникПрицеп1.МаксимальноеКоличествоУпаковок, 0)
	|		ИНАЧЕ ЕСТЬNULL(МоделиПрицеп1.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникПрицеп2.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(СправочникПрицеп2.МаксимальноеКоличествоУпаковок, 0)
	|		ИНАЧЕ ЕСТЬNULL(МоделиПрицеп2.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	ВТ_ТС КАК ТабТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|			ПО уатТС.Модель = уатМоделиТС.Ссылка
	|		ПО ТабТС.ТС = уатТС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК СправочникПрицеп1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК МоделиПрицеп1
	|			ПО СправочникПрицеп1.Модель = МоделиПрицеп1.Ссылка
	|		ПО ТабТС.Прицеп1 = СправочникПрицеп1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК СправочникПрицеп2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК МоделиПрицеп2
	|			ПО СправочникПрицеп2.Модель = МоделиПрицеп2.Ссылка
	|		ПО ТабТС.Прицеп2 = СправочникПрицеп2.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСекцииТС.Владелец КАК Владелец,
	|			СУММА(уатСекцииТС.Объем) КАК Объем
	|		ИЗ
	|			Справочник.уатСекцииТС КАК уатСекцииТС
	|		ГДЕ
	|			НЕ уатСекцииТС.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатСекцииТС.Владелец) КАК ОбъемСекцииТС
	|		ПО ТабТС.ТС = ОбъемСекцииТС.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСекцииТС.Владелец КАК Владелец,
	|			СУММА(уатСекцииТС.Объем) КАК Объем
	|		ИЗ
	|			Справочник.уатСекцииТС КАК уатСекцииТС
	|		ГДЕ
	|			НЕ уатСекцииТС.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатСекцииТС.Владелец) КАК ОбъемСекцииПрицеп1
	|		ПО ТабТС.Прицеп1 = ОбъемСекцииПрицеп1.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСекцииТС.Владелец КАК Владелец,
	|			СУММА(уатСекцииТС.Объем) КАК Объем
	|		ИЗ
	|			Справочник.уатСекцииТС КАК уатСекцииТС
	|		ГДЕ
	|			НЕ уатСекцииТС.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатСекцииТС.Владелец) КАК ОбъемСекцииПрицеп2
	|		ПО ТабТС.Прицеп2 = ОбъемСекцииПрицеп2.Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураТС = Новый Структура();
		СтруктураТС.Вставить("ИндексКартинки",                 Выборка.ИндексКартинки);
		СтруктураТС.Вставить("Грузоподъемность",               Выборка.Грузоподъемность);
		СтруктураТС.Вставить("ОбъемКузова",                    Выборка.ОбъемКузова);
		СтруктураТС.Вставить("МаксимальноеКоличествоУпаковок", Выборка.МаксимальноеКоличествоУпаковок);
		СтруктураТС.Вставить("Организация",                    Выборка.Организация);
		СтруктураТС.Вставить("Модель",                         Выборка.Модель);
		Если НастройкаРежимОтображенияМЛ = 1 Тогда
			СтруктураТС.Вставить("ТСПредставление",            Выборка.НаименованиеТС);
		Иначе
			Если Выборка.ИндексКартинки = 6
				И НЕ Выборка.Количество = 0 Тогда 
				СтруктураТС.Вставить("ТСПредставление", "(" + Строка(Выборка.Количество) + ") " + Выборка.НаименованиеТС);
			Иначе 
				СтруктураТС.Вставить("ТСПредставление", Выборка.НаименованиеТС);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить(?(Выборка.ID = -1, Выборка.ТС, Выборка.ID), СтруктураТС);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВложенныеМаршрутныеЛисты(НовСтрокаИД, ТекДанныеПоТС, мсвЗаказы, мсвСекции, ПредставлениеМЛДляКартыOSM="", ПредставлениеМЛ = "")
	
	НовСтрока = МаршрутыДерево.НайтиПоИдентификатору(НовСтрокаИД);
	
	НовМЛ = НовСтрока.ПолучитьЭлементы().Добавить();
	НовМЛ.Группировка   = ТекДанныеПоТС.МаршрутныйЛист;
	НовМЛ.УровеньДерева = "МЛ";
	
	НовМЛ.Прицеп1 = ТекДанныеПоТС.МаршрутныйЛистПрицеп1;
	НовМЛ.Прицеп2 = ТекДанныеПоТС.МаршрутныйЛистПрицеп2;
	НовМЛ.ОбъектСтроительства = ТекДанныеПоТС.МаршрутныйЛистОбъектСтроительства;
	НовМЛ.Маршрут = ТекДанныеПоТС.МаршрутныйЛистМаршрут;
	НовМЛ.ВидПеревозки            = ТекДанныеПоТС.МаршрутныйЛистВидПеревозки;
	НовМЛ.НаправлениеПеревозки    = ТекДанныеПоТС.МаршрутныйЛистНаправлениеПеревозки;
	НовМЛ.МаршрутныйЛистОтправлен = ТекДанныеПоТС.МаршрутныйЛистДатаИВремяОтправления <> '00010101';
	НовМЛ.ПредставлениеМЛ                 = ПредставлениеМЛ;
	НовМЛ.ПредставлениеОбъектаДляКартыOSM = ПредставлениеМЛДляКартыOSM;
	
	НовМЛ.ПересчетВремени = ТекДанныеПоТС.МаршрутныйЛистПересчетВремени;

	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Неопределено;
	ПредЗаказ     = Неопределено;
	флЦветУстановлен = Ложь;
	
	мсвЗаказы.Сортировать("НомерСтроки");
	Для Каждого ТекСтрока Из мсвЗаказы Цикл
		// Пункт.
		ТекПункт = ТекСтрока.Пункт;
		
		Если НЕ (ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) И ЗначениеЗаполнено(ТекСтрока.ТипТочкиМаршрута)) Тогда
			НовСтрокаПункт = НовМЛ.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.Адрес       = ТекПункт;
			НовСтрокаПункт.Группировка = ТекПункт;
			НовСтрокаПункт.Лат         = ТекСтрока.ПунктЛат;
			НовСтрокаПункт.Лон         = ТекСтрока.ПунктЛон;
			НовСтрокаПункт.УровеньДерева       = "Пункт";
			НовМЛ.МаршрутныйЛистЗаписан        = Истина;
			НовСтрокаПункт.Расстояние          = ТекСтрока.Расстояние;
			НовСтрокаПункт.ВремяВПути          = ТекСтрока.Время;
			НовСтрокаПункт.ВремяПрибытияВПункт = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.GUID                = ТекСтрока.GUIDСтроки;
			НовСтрокаПункт.Ожидание            = ТекСтрока.Ожидание;
			НовМЛ.Расстояние                   = НовМЛ.Расстояние + ТекСтрока.Расстояние;
			НовМЛ.ВремяВПути                   = уатЗащищенныеФункцииСервер.СложитьВремя(НовМЛ.ВремяВПути, ТекСтрока.Время);
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = НовМЛ.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.Адрес       = ТекПункт;
			НовСтрокаПункт.Группировка = ТекПункт;
			НовСтрокаПункт.Лат         = ТекСтрока.ПунктЛат;
			НовСтрокаПункт.Лон         = ТекСтрока.ПунктЛон;
			НовСтрокаПункт.УровеньДерева         = "Пункт";
			НовСтрокаПункт.МаршрутныйЛистЗаписан = Истина;
			НовСтрокаПункт.Расстояние            = ТекСтрока.Расстояние;
			НовСтрокаПункт.ВремяВПути            = ТекСтрока.Время;
			НовСтрокаПункт.ВремяПрибытияВПункт   = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.Ожидание              = ТекСтрока.Ожидание;
			НовСтрокаПункт.СтоянкаИзПункта       = ТекСтрока.СтоянкаИзПункта;
			НовМЛ.Расстояние                     = НовМЛ.Расстояние + ТекСтрока.Расстояние;
			НовМЛ.ВремяВПути                     = уатЗащищенныеФункцииСервер.СложитьВремя(НовМЛ.ВремяВПути, ТекСтрока.Время);
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
		КонецЕсли;
		
		// Заказ.
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
				Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
				Или СменилсяПункт Тогда
			НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
			НовСтрокаЗаказ.Группировка           = ТекСтрока.ЗаказГрузоотправителяНомер;
			НовСтрокаЗаказ.Этап                  = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.Операция              = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаЗаказ.Стоянка               = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта       = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.Расстояние            = ТекСтрока.Расстояние;
			НовСтрокаЗаказ.УровеньДерева         = "Заказ";
			НовСтрокаЗаказ.МаршрутныйЛистЗаписан = Истина;
			НовСтрокаЗаказ.Терминал              = ТекСтрока.Терминал;
			НовСтрокаЗаказ.ДетализацияЗакрытия   = ТекСтрока.ЗаказДетализацияЗакрытия;
			НовСтрокаЗаказ.ЦветДокумента         = ТекСтрока.ЗаказГрузоотправителяЦветДокумента;
			НовСтрокаЗаказ.Номер                 = ТекСтрока.ЗаказГрузоотправителяНомер;
			НовСтрокаЗаказ.FTL                 = ТекСтрока.ЗаказГрузоотправителяFTL;


			Если НЕ флЦветУстановлен Тогда
				НовМЛ.ЦветДокумента              = НовСтрокаЗаказ.ЦветДокумента;
				флЦветУстановлен                 = Истина;
			КонецЕсли;
			
			Если ТекСтрока.ТипТочкиМаршрута = ТипыТочекМаршрута_Погрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказОтправлениеС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказОтправлениеПо;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = ТипыТочекМаршрута_Разгрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказДоставкаС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказДоставкаПо;
			КонецЕсли;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказДетализацияЗакрытия = ДетализацияЗакрытияПоЗаказам Тогда 
			НовСтрокаЗаказ.Количество = ТекСтрока.Количество;
			НовСтрокаЗаказ.ВесБрутто  = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем      = ТекСтрока.Объем;
			НовСтрокаЗаказ.КолМест    = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.Этап       = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.GUID       = ТекСтрока.GUIDСтроки;
			НовСтрокаЗаказ.ВесТары    = ТекСтрока.ВесТары;
			НовСтрокаЗаказ.Группа     = ТекСтрока.Группа;
			НовСтрокаЗаказ.Паллета    = ТекСтрока.Паллета;
			НовСтрокаЗаказ.Размещение = ТекСтрока.Размещение;
			
		Иначе 
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// Номенклатура.
			НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			НовСтрокаНоменклатура.Группировка           = ТекСтрока.Номенклатура;
			НовСтрокаНоменклатура.Количество            = ТекСтрока.Количество;
			НовСтрокаНоменклатура.ВесБрутто             = ТекСтрока.ВесБрутто;
			НовСтрокаНоменклатура.Объем                 = ТекСтрока.Объем;
			НовСтрокаНоменклатура.КолМест               = ТекСтрока.КоличествоМест;
			НовСтрокаНоменклатура.ЕдиницаИзмерения      = ТекСтрока.ЕдиницаИзмерения;
			НовСтрокаНоменклатура.Этап                  = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаНоменклатура.УровеньДерева         = "Номенклатура";
			НовСтрокаНоменклатура.МаршрутныйЛистЗаписан = Истина;
			НовСтрокаНоменклатура.GUID                  = ТекСтрока.GUIDСтроки;
			НовСтрокаЗаказ.ВесБрутто                    = НовСтрокаЗаказ.ВесБрутто + ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем                        = НовСтрокаЗаказ.Объем + ТекСтрока.Объем;
			НовСтрокаНоменклатура.ВесТары               = ТекСтрока.ВесТары;
			НовСтрокаНоменклатура.Группа                = ТекСтрока.Группа;
			НовСтрокаНоменклатура.Паллета               = ТекСтрока.Паллета;
			НовСтрокаНоменклатура.Размещение            = ТекСтрока.Размещение;
			НовСтрокаНоменклатура.Код                   = ТекСтрока.НоменклатураКод;
		КонецЕсли;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	НовМЛ.Секции.Очистить();
	Для Каждого ТекСтрока Из мсвСекции Цикл
		НовСтрокаСекции = НовМЛ.Секции.Добавить();
		НовСтрокаСекции.GUIDСтроки = ТекСтрока.GUIDСтроки;
		НовСтрокаСекции.Секция     = ТекСтрока.Секция;
		НовСтрокаСекции.Объем      = ТекСтрока.Объем;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенныеМаршрутныеЛисты_Список(НовМЛ, ТекДанныеПоТС, мсвЗаказы, мсвСекции, ПредставлениеМЛДляКартыOSM="", ПредставлениеМЛ = "")
	
	НовМЛ.GUID                            = Строка(Новый УникальныйИдентификатор);
	НовМЛ.МЛ                              = ТекДанныеПоТС.МаршрутныйЛист;
	НовМЛ.Прицеп1                         = ТекДанныеПоТС.МаршрутныйЛистПрицеп1;
	НовМЛ.Прицеп2                         = ТекДанныеПоТС.МаршрутныйЛистПрицеп2;
	НовМЛ.ОбъектСтроительства             = ТекДанныеПоТС.МаршрутныйЛистОбъектСтроительства;
	НовМЛ.Маршрут                         = ТекДанныеПоТС.МаршрутныйЛистМаршрут;
	НовМЛ.ВидПеревозки                    = ТекДанныеПоТС.МаршрутныйЛистВидПеревозки;
	НовМЛ.НаправлениеПеревозки            = ТекДанныеПоТС.МаршрутныйЛистНаправлениеПеревозки;
	НовМЛ.МаршрутныйЛистОтправлен         = ТекДанныеПоТС.МаршрутныйЛистДатаИВремяОтправления <> '00010101';
	НовМЛ.ПредставлениеМЛ                 = ТекДанныеПоТС.ПредставлениеМЛ;
	НовМЛ.ПредставлениеОбъектаДляКартыOSM = ТекДанныеПоТС.ПредставлениеМЛдляOSM;
	НовМЛ.ПересчетВремени                 = ТекДанныеПоТС.МаршрутныйЛистПересчетВремени;

	СменилсяПункт    = Ложь;
	ПредСтрока       = Неопределено;
	ПредПункт        = Неопределено;
	ПредЗаказ        = Неопределено;
	НовМЛ.Расстояние = 0;
	НовМЛ.ВремяВПути = 0;
	
	СоответствиеКоличестваЗаказов = Новый Соответствие();
	
	флЦветУстановлен = Ложь;
	мсвЗаказы.Сортировать("НомерСтроки");
	Для Каждого ТекСтрока Из мсвЗаказы Цикл
		// Пункт.
		ТекПункт = ТекСтрока.Пункт;
		
		Если НЕ (ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя)
			И ЗначениеЗаполнено(ТекСтрока.ТипТочкиМаршрута)) Тогда
		
			НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
			НовСтрокаПункт.ЗаказЗаписан = Истина;
			НовСтрокаПункт.GUIDТС      = НовМЛ.GUID;
			НовСтрокаПункт.Адрес       = ТекПункт;
			НовСтрокаПункт.Группировка = ТекПункт;
			НовСтрокаПункт.Лат         = ТекСтрока.ПунктЛат;
			НовСтрокаПункт.Лон         = ТекСтрока.ПунктЛон;
			НовСтрокаПункт.УровеньДерева       = "Пункт";
			НовМЛ.МаршрутныйЛистЗаписан        = Истина;
			НовСтрокаПункт.Расстояние          = ТекСтрока.Расстояние;
			НовСтрокаПункт.ВремяВПути          = ТекСтрока.Время;
			НовСтрокаПункт.ВремяПрибытияВПункт = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.GUID                = ТекСтрока.GUIDСтроки;
			НовСтрокаПункт.Ожидание            = ТекСтрока.Ожидание;
			НовСтрокаПункт.GUIDПункта          = Строка(Новый УникальныйИдентификатор);

			НовМЛ.Расстояние                   = НовМЛ.Расстояние + ТекСтрока.Расстояние;
			НовМЛ.ВремяВПути                   = СложитьВремя(НовМЛ.ВремяВПути, ТекСтрока.Время);
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
			НовСтрокаПункт.ЗаказЗаписан = Истина;
			НовСтрокаПункт.GUIDТС      = НовМЛ.GUID;
			НовСтрокаПункт.Адрес       = ТекПункт;
			НовСтрокаПункт.Группировка = ТекПункт;
			НовСтрокаПункт.Лат         = ТекСтрока.ПунктЛат;
			НовСтрокаПункт.Лон         = ТекСтрока.ПунктЛон;
			НовСтрокаПункт.УровеньДерева         = "Пункт";
			НовСтрокаПункт.МаршрутныйЛистЗаписан = Истина;
			НовСтрокаПункт.Расстояние            = ТекСтрока.Расстояние;
			НовСтрокаПункт.ВремяВПути            = ТекСтрока.Время;
			НовСтрокаПункт.ВремяПрибытияВПункт   = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.Ожидание              = ТекСтрока.Ожидание;
			НовСтрокаПункт.СтоянкаИзПункта       = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаПункт.GUIDПункта            = Строка(Новый УникальныйИдентификатор);

			НовМЛ.Расстояние                     = НовМЛ.Расстояние + ТекСтрока.Расстояние;
			НовМЛ.ВремяВПути                     = СложитьВремя(НовМЛ.ВремяВПути, ТекСтрока.Время);
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
		КонецЕсли;
		
		// Заказ.
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
				Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
				Или СменилсяПункт Тогда
			СоответствиеКоличестваЗаказов.Вставить(ТекСтрока.ЗаказГрузоотправителя, 1);

			НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
			НовСтрокаЗаказ.ЗаказЗаписан          = Истина;
			НовСтрокаЗаказ.МЛДляЗаписи           = ТекДанныеПоТС.МаршрутныйЛист;
			НовСтрокаЗаказ.GUIDТС                = НовМЛ.GUID;
			НовСтрокаЗаказ.GUIDПункта            = НовСтрокаПункт.GUIDПункта;
			НовСтрокаЗаказ.GUIDЗаказа            = Строка(Новый УникальныйИдентификатор);
			НовСтрокаЗаказ.Группировка           = ТекСтрока.ЗаказГрузоотправителяНомер;
			НовСтрокаЗаказ.Этап                  = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.Операция              = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаЗаказ.Стоянка               = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта       = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.Расстояние            = ТекСтрока.Расстояние;
			НовСтрокаЗаказ.УровеньДерева         = "Заказ";
			НовСтрокаЗаказ.Контрагент            = ТекСтрока.ЗаказГрузоотправителяКонтрагент;
			НовСтрокаЗаказ.Грузоотправитель      = ТекСтрока.ЗаказГрузоотправителяГрузоотправитель;
			НовСтрокаЗаказ.Грузополучатель       = ТекСтрока.ЗаказГрузоотправителяГрузополучатель;
			НовСтрокаЗаказ.МаршрутныйЛистЗаписан = Истина;
			НовСтрокаЗаказ.Терминал              = ТекСтрока.Терминал;
			НовСтрокаЗаказ.ДетализацияЗакрытия   = ТекСтрока.ЗаказДетализацияЗакрытия;
			НовСтрокаЗаказ.ЦветДокумента         = ТекСтрока.ЗаказГрузоотправителяЦветДокумента;
			НовСтрокаЗаказ.Номер                 = ТекСтрока.ЗаказГрузоотправителяНомер;
			НовСтрокаЗаказ.FTL                   = ТекСтрока.ЗаказГрузоотправителяFTL;

			Если НЕ флЦветУстановлен Тогда
				НовМЛ.ЦветДокумента              = НовСтрокаЗаказ.ЦветДокумента;
				флЦветУстановлен                 = Истина;
			КонецЕсли;

			Если ТекСтрока.ТипТочкиМаршрута = ТипыТочекМаршрута_Погрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказОтправлениеС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказОтправлениеПо;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = ТипыТочекМаршрута_Разгрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказДоставкаС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказДоставкаПо;
			КонецЕсли;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказДетализацияЗакрытия = ДетализацияЗакрытияПоЗаказам Тогда 
			НовСтрокаЗаказ.Количество = ТекСтрока.Количество;
			НовСтрокаЗаказ.ВесБрутто  = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем      = ТекСтрока.Объем;
			НовСтрокаЗаказ.КолМест    = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.Этап       = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.GUID       = ТекСтрока.GUIDСтроки;
			НовСтрокаЗаказ.ВесТары    = ТекСтрока.ВесТары;
			НовСтрокаЗаказ.Группа     = ТекСтрока.Группа;
			НовСтрокаЗаказ.Паллета    = ТекСтрока.Паллета;
			НовСтрокаЗаказ.Размещение = ТекСтрока.Размещение;
			
		Иначе 
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// Номенклатура.
			НовСтрокаНоменклатура = МаршрутыСписокЗаказов.Добавить();
			НовСтрокаНоменклатура.GUIDТС                = НовМЛ.GUID;
			НовСтрокаНоменклатура.ЗаказЗаписан          = Истина;
			НовСтрокаНоменклатура.GUIDПункта            = НовСтрокаПункт.GUIDПункта;
			НовСтрокаНоменклатура.GUIDЗаказа            = НовСтрокаЗаказ.GUIDЗаказа;
			НовСтрокаНоменклатура.Группировка           = ТекСтрока.Номенклатура;
			НовСтрокаНоменклатура.НомерСтроки           = ТекСтрока.НомерСтроки;
			НовСтрокаНоменклатура.Количество            = ТекСтрока.Количество;
			НовСтрокаНоменклатура.ВесБрутто             = ТекСтрока.ВесБрутто;
			НовСтрокаНоменклатура.Объем                 = ТекСтрока.Объем;
			НовСтрокаНоменклатура.КолМест               = ТекСтрока.КоличествоМест;
			НовСтрокаНоменклатура.ЕдиницаИзмерения      = ТекСтрока.ЕдиницаИзмерения;
			НовСтрокаНоменклатура.Этап                  = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаНоменклатура.УровеньДерева         = "Номенклатура";
			НовСтрокаНоменклатура.МаршрутныйЛистЗаписан = Истина;
			НовСтрокаНоменклатура.GUID                  = ТекСтрока.GUIDСтроки;
			НовСтрокаЗаказ.ВесБрутто                    = НовСтрокаЗаказ.ВесБрутто + ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем                        = НовСтрокаЗаказ.Объем + ТекСтрока.Объем;
			НовСтрокаНоменклатура.ВесТары               = ТекСтрока.ВесТары;
			НовСтрокаНоменклатура.Группа                = ТекСтрока.Группа;
			НовСтрокаНоменклатура.Паллета               = ТекСтрока.Паллета;
			НовСтрокаНоменклатура.Размещение            = ТекСтрока.Размещение;
			НовСтрокаНоменклатура.Код                   = ТекСтрока.НоменклатураКод;
		КонецЕсли;
		
		ПредСтрока = ТекСтрока;
		
	КонецЦикла;
	
	ОбновитьМаршрутныеПараметрыДереваМаршрутовСписок(Ложь, НовМЛ);
	
	ЭлементыПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("УровеньДерева", "Пункт"));
	КолвоПунктов   = ЭлементыПункты.Количество();
	Если КолвоПунктов <> 0 Тогда
		НовМЛ.ДатаНачала       = ЭлементыПункты[0].ВремяПрибытияВПункт;
		НовМЛ.АдресОтправления = ЭлементыПункты[0].Группировка;
		НовМЛ.ДатаОкончания    = ЭлементыПункты[КолвоПунктов - 1].УбытиеПлан;
		НовМЛ.АдресНазначения  = ЭлементыПункты[КолвоПунктов - 1].Группировка;
	КонецЕсли;
	НовМЛ.КоличествоЗаказов   = СоответствиеЗаказов.Количество();
	
	ОбновитьВесоОбъемныеХарактеристикиМаршрутаСписок(НовМЛ);
	Если НастройкаИспользоватьРасчетТары Тогда
		ОбновитьРеквизитыТарыИРазмещенияСписок(НовМЛ);
	КонецЕсли;
	
	НовМЛ.Секции.Очистить();
	Для Каждого ТекСтрока Из мсвСекции Цикл
		НовСтрокаСекции = НовМЛ.Секции.Добавить();
		НовСтрокаСекции.GUIDСтроки = ТекСтрока.GUIDСтроки;
		НовСтрокаСекции.Секция     = ТекСтрока.Секция;
		НовСтрокаСекции.Объем      = ТекСтрока.Объем;
	КонецЦикла;
	
	НовМЛ.АдресВременногоХранилища = ПолучитьАдресВременногоХранилищаДляМЛ();
	
КонецПроцедуры

&НаСервере
Функция ТСЕстьВМаршрутахСервер(ТС)
	флНайденоТС = Ложь;
	
	Для Каждого ТекСтрокаМаршруты Из МаршрутыДерево.ПолучитьЭлементы() Цикл
		Если ТекСтрокаМаршруты.Группировка = ТС Тогда
			флНайденоТС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флНайденоТС;
КонецФункции

&НаКлиенте
Процедура ОбновитьХарактеристикиТС(ВеткаТС = Неопределено, СтруктураТС = Неопределено)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьХарактеристикиТСДерево(ВеткаТС, СтруктураТС);
	Иначе
		ОбновитьХарактеристикиТССписок(ВеткаТС, СтруктураТС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьХарактеристикиТССписок(ВеткаТС = Неопределено, СтруктураТС = Неопределено)
	
	Если ВеткаТС = Неопределено Тогда
		мсвЗапрос = Новый Массив();
		Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
			стрДанныеЗапрос = Новый Структура();
			стрДанныеЗапрос.Вставить("ТС",         ТекСтрокаТС.ТС);
			стрДанныеЗапрос.Вставить("ID",         ТекСтрокаТС.ПолучитьИдентификатор());
			стрДанныеЗапрос.Вставить("Количество", 1);
			стрДанныеЗапрос.Вставить("Прицеп1",    ТекСтрокаТС.Прицеп1);
			стрДанныеЗапрос.Вставить("Прицеп2",    ТекСтрокаТС.Прицеп2);
			мсвЗапрос.Добавить(стрДанныеЗапрос);
		КонецЦикла;
		СтруктурыВсехТС = ПредставлениеТС(мсвЗапрос, НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации);
		Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
			ОбновитьХарактеристикиТССписок(ТекСтрокаТС, СтруктурыВсехТС.Получить(ТекСтрокаТС.ПолучитьИдентификатор()));
		КонецЦикла;
		Возврат;
	ИначеЕсли СтруктураТС = Неопределено Тогда 
		стрДанныеЗапрос = Новый Структура();
		стрДанныеЗапрос.Вставить("ТС",         ВеткаТС.ТС);
		стрДанныеЗапрос.Вставить("ID",         ВеткаТС.ПолучитьИдентификатор());
		стрДанныеЗапрос.Вставить("Количество", 1);
		стрДанныеЗапрос.Вставить("Прицеп1",    ВеткаТС.Прицеп1);
		стрДанныеЗапрос.Вставить("Прицеп2",    ВеткаТС.Прицеп2);
		мсвЗапрос = Новый Массив();
		мсвЗапрос.Добавить(стрДанныеЗапрос);
		соотПредставлений = ПредставлениеТС(мсвЗапрос, НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации);
		СтруктураТС = соотПредставлений.Получить(ВеткаТС.ПолучитьИдентификатор());
	КонецЕсли;
	
	ВеткаТС.ТСПредставление							 = СтруктураТС.ТСПредставление;
	ВеткаТС.Грузоподъемность						 = СтруктураТС.Грузоподъемность;
	ВеткаТС.ОбъемКузова								 = СтруктураТС.ОбъемКузова;
	ВеткаТС.МаксимальноеКоличествоУпаковок			 = СтруктураТС.МаксимальноеКоличествоУпаковок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьХарактеристикиТСДерево(ВеткаТС = Неопределено, СтруктураТС=Неопределено)
	Если ВеткаТС = Неопределено Тогда
		мсвЗапрос = Новый Массив();
		Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			стрДанныеЗапрос = Новый Структура();
			стрДанныеЗапрос.Вставить("ТС",         ТекСтрокаТС.ТС);
			стрДанныеЗапрос.Вставить("ID",         ТекСтрокаТС.ПолучитьИдентификатор());
			стрДанныеЗапрос.Вставить("Количество", ТекСтрокаТС.КоличествоВиртуальныхТС);
			стрДанныеЗапрос.Вставить("Прицеп1",    ТекСтрокаТС.Прицеп1);
			стрДанныеЗапрос.Вставить("Прицеп2",    ТекСтрокаТС.Прицеп2);
			мсвЗапрос.Добавить(стрДанныеЗапрос);
		КонецЦикла;
		СтруктурыВсехТС = ПредставлениеТС(мсвЗапрос, НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации);
		Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			ОбновитьХарактеристикиТСДерево(ТекСтрокаТС, СтруктурыВсехТС.Получить(ТекСтрокаТС.ПолучитьИдентификатор()));
		КонецЦикла;
		Возврат;
	ИначеЕсли СтруктураТС = Неопределено Тогда 
		стрДанныеЗапрос = Новый Структура();
		стрДанныеЗапрос.Вставить("ТС",         ВеткаТС.ТС);
		стрДанныеЗапрос.Вставить("ID",         ВеткаТС.ПолучитьИдентификатор());
		стрДанныеЗапрос.Вставить("Количество", ВеткаТС.КоличествоВиртуальныхТС);
		стрДанныеЗапрос.Вставить("Прицеп1",    ВеткаТС.Прицеп1);
		стрДанныеЗапрос.Вставить("Прицеп2",    ВеткаТС.Прицеп2);
		мсвЗапрос = Новый Массив();
		мсвЗапрос.Добавить(стрДанныеЗапрос);
		соотПредставлений = ПредставлениеТС(мсвЗапрос, НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации);
		СтруктураТС = соотПредставлений.Получить(ВеткаТС.ПолучитьИдентификатор());
	КонецЕсли;

	ЭлементыВеткаТС = ВеткаТС.ПолучитьЭлементы();
	КолвоМЛ = ЭлементыВеткаТС.Количество();
	КолвоМЛ = ?(КолвоМЛ = 0, 1, КолвоМЛ);
	
	ВеткаТС.ТСПредставление							 = СтруктураТС.ТСПредставление;
	ВеткаТС.ПредставлениеВиртТС						 = СтруктураТС.ТСПредставление;
	ВеткаТС.Грузоподъемность						 = СтруктураТС.Грузоподъемность * КолвоМЛ;
	ВеткаТС.ОбъемКузова								 = СтруктураТС.ОбъемКузова * КолвоМЛ;
	ВеткаТС.МаксимальноеКоличествоУпаковок			 = СтруктураТС.МаксимальноеКоличествоУпаковок * КолвоМЛ;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСтоянкамСервер(ВеткаТС = Неопределено)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьДанныеПоСтоянкамСерверДерево();
	Иначе
		ОбновитьДанныеПоСтоянкамСерверСписок(ВеткаТС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСтоянкамСерверДерево()
	
	УчетСтоянокПоТипамТС = Ложь;
	
	СоответствиеСтоянок        = Новый Соответствие;
	СоответствиеСтоянокВПункте = Новый Соответствие;
	
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрокаМЛ Из МаршрутыДерево.ПолучитьЭлементы() Цикл
		Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
				 МассивЗаказов.Добавить(ТекСтрокаЗаказ.Этап);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПолучитьСтоянкиПоЗаказамГрузоотправителей(СоответствиеСтоянок, СоответствиеСтоянокВПункте, МассивЗаказов);
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		ТекТС.Стоянка = 0;
		
		Если УчетСтоянокПоТипамТС Тогда
			ТСТипТС = ЗначениеРеквизитаОбъекта(ТекТС.ТС, "ТипТС");
		Иначе
			ТСТипТС = Новый Массив();
		КонецЕсли;
	
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
			ТекМЛ.Стоянка = 0;
			
			ФлагВнешняяМаршрутизация = Ложь;
			Если (ЗначениеЗаполнено(ТекМЛ.ЭтапМаршрутизации) И ТекМЛ.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
				ФлагВнешняяМаршрутизация = Истина;
			КонецЕсли;

			Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл
				ПунктБезЗаказов = ТекПункт.ПолучитьЭлементы().Количество() = 0;
				
				Если ФлагВнешняяМаршрутизация Тогда
					ТипТС = Новый Массив;
				Иначе
					ТипТС = ТСТипТС;
				КонецЕсли;
				
				Если ТекПункт.СтоянкиНеИспользуются Тогда
					ТекПункт.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
				ИначеЕсли ПунктБезЗаказов Тогда
					СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
					Если СтоянкаВПункте <> Неопределено Тогда
						ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
					Иначе
						СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
						СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
						ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
					КонецЕсли;
				ИначеЕсли НЕ ПунктБезЗаказов Тогда
					СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
					Если СтоянкаВПункте <> Неопределено Тогда
						ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
					Иначе
						СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
						СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
						ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
					КонецЕсли;
				Иначе
					ТекПункт.СтоянкаИзПункта = 0;
				КонецЕсли;
				
				мСуммаСтоянок = 0;
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
					Если ТекЗаказ.Стоянка = 0 Тогда 
						Если ТекПункт.СтоянкиНеИспользуются Тогда
							ТекЗаказ.Стоянка = 0;
						ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
							СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
							Если СтоянкаЭтап <> Неопределено Тогда
								Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
									СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка1;
								Иначе
									СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка2;
								КонецЕсли;
							Иначе
								СтоянкаПунктОтправления = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
								"СтоянкаПунктОтправления");
							КонецЕсли;
							ТекЗаказ.Стоянка = СтоянкаПунктОтправления;
							
						ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
							СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
							Если СтоянкаЭтап <> Неопределено Тогда
								Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
									СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка1;
								Иначе
									СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка2;
								КонецЕсли;
							Иначе
								СтоянкаПунктНазначения = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
								"СтоянкаПунктНазначения");
							КонецЕсли;
							ТекЗаказ.Стоянка = СтоянкаПунктНазначения;
							
						КонецЕсли;
					КонецЕсли;
					
					ТекЗаказ.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
					мСуммаСтоянок = СложитьВремя(мСуммаСтоянок, ?(ТекПункт.СтоянкиНеИспользуются, 0 ,ТекЗаказ.Стоянка));
				КонецЦикла;
				
				ТекПункт.Стоянка = СложитьВремя(мСуммаСтоянок, ТекПункт.СтоянкаИзПункта);
				
				ТекМЛ.Стоянка = СложитьВремя(ТекМЛ.Стоянка, ТекПункт.Стоянка);
			КонецЦикла;
			
			ТекТС.Стоянка = СложитьВремя(ТекТС.Стоянка, ТекМЛ.Стоянка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьДанныеПоСтоянкамСерверСписок(ВеткаТС = Неопределено)
		
	УчетСтоянокПоТипамТС = Ложь;
	
	МассивЗаказов = Новый Массив();
	
	Если ВеткаТС = Неопределено Тогда
		ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("УровеньДерева", "Заказ"));
		Для Каждого ТекСтрока Из ЭлементыВеткаЗаказ Цикл
			Если ТипЗнч(ТекСтрока.Этап) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
				МассивЗаказов.Добавить(ТекСтрока.Этап);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева",
				ВеткаТС.GUID, "Заказ"));
		Для Каждого ТекСтрока Из ЭлементыВеткаЗаказ Цикл
			МассивЗаказов.Добавить(ТекСтрока.Этап);
		КонецЦикла;
	КонецЕсли;
	
	СоответствиеСтоянок        = Новый Соответствие;
	СоответствиеСтоянокВПункте = Новый Соответствие;
	ПолучитьСтоянкиПоЗаказамГрузоотправителей(СоответствиеСтоянок, СоответствиеСтоянокВПункте, МассивЗаказов);
	
	Если ВеткаТС = Неопределено Тогда
		Для Каждого ТекТС Из МаршрутыСписок Цикл 
			ТекТС.Стоянка = 0;
			
			Если УчетСтоянокПоТипамТС Тогда
				ТСТипТС = ЗначениеРеквизитаОбъекта(ТекТС.ТС, "ТипТС");
			Иначе
				ТСТипТС = Новый Массив();
			КонецЕсли;
			
			ФлагВнешняяМаршрутизация = Ложь;
			Если (ЗначениеЗаполнено(ТекТС.ЭтапМаршрутизации) И ТекТС.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
				ФлагВнешняяМаршрутизация = Истина;
			КонецЕсли;
			
			ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
			
			Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл
				ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
				ТекТС.GUID, ТекПункт.GUIDПункта, "Заказ"));
				
				ПунктБезЗаказов = ЭлементыВеткаЗаказ.Количество() = 0;
				
				Если ФлагВнешняяМаршрутизация Тогда
					ТипТС = Новый Массив;
				Иначе
					ТипТС = ТСТипТС;
				КонецЕсли;
				
				Если ТекПункт.СтоянкиНеИспользуются Тогда
					ТекПункт.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
				ИначеЕсли ПунктБезЗаказов Тогда
					СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
					Если СтоянкаВПункте <> Неопределено Тогда
						ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
					Иначе
						СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
						СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
						ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
					КонецЕсли;
				ИначеЕсли НЕ ПунктБезЗаказов Тогда
					СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
					Если СтоянкаВПункте <> Неопределено Тогда
						ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
					Иначе
						СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
						СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
						ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
					КонецЕсли;
				Иначе
					ТекПункт.СтоянкаИзПункта = 0;
				КонецЕсли;
				
				мСуммаСтоянок = 0;
				Для Каждого ТекЗаказ Из ЭлементыВеткаЗаказ Цикл 
					Если ТекЗаказ.Стоянка = 0 Тогда 
						Если ТекПункт.СтоянкиНеИспользуются Тогда
							ТекЗаказ.Стоянка = 0;
						ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
							СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
							Если СтоянкаЭтап <> Неопределено Тогда
								Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
									СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка1;
								Иначе
									СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка2;
								КонецЕсли;
							Иначе
								СтоянкаПунктОтправления = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
								"СтоянкаПунктОтправления");
							КонецЕсли;
							ТекЗаказ.Стоянка = СтоянкаПунктОтправления;
	
						ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
							СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
							Если СтоянкаЭтап <> Неопределено Тогда
								Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
									СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка1;
								Иначе
									СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка2;
								КонецЕсли;
							Иначе
								СтоянкаПунктНазначения = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
								"СтоянкаПунктНазначения");
							КонецЕсли;
							ТекЗаказ.Стоянка = СтоянкаПунктНазначения;
							
						КонецЕсли;
					КонецЕсли;
					
					ТекЗаказ.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
					мСуммаСтоянок = СложитьВремя(мСуммаСтоянок, ?(ТекПункт.СтоянкиНеИспользуются, 0 ,ТекЗаказ.Стоянка));
				КонецЦикла;
				
				ТекПункт.Стоянка = СложитьВремя(мСуммаСтоянок, ТекПункт.СтоянкаИзПункта);
				
				ТекТС.Стоянка = СложитьВремя(ТекТС.Стоянка, ТекПункт.Стоянка);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ТекТС = ВеткаТС;
		
		ТекТС.Стоянка = 0;
		
		Если УчетСтоянокПоТипамТС Тогда
			ТСТипТС = ЗначениеРеквизитаОбъекта(ТекТС.ТС, "ТипТС");
		Иначе
			ТСТипТС = Новый Массив();
		КонецЕсли;
		
		ФлагВнешняяМаршрутизация = Ложь;
		Если (ЗначениеЗаполнено(ТекТС.ЭтапМаршрутизации) И ТекТС.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
			ФлагВнешняяМаршрутизация = Истина;
		КонецЕсли;
		
		ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
		Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл
			ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
			ТекТС.GUID, ТекПункт.GUIDПункта, "Заказ"));
			
			ПунктБезЗаказов = ЭлементыВеткаЗаказ.Количество() = 0;
			
			Если ФлагВнешняяМаршрутизация Тогда
				ТипТС = Новый Массив;
			Иначе
				ТипТС = ТСТипТС;
			КонецЕсли;
			
			Если ТекПункт.СтоянкиНеИспользуются Тогда
				ТекПункт.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
			ИначеЕсли ПунктБезЗаказов Тогда
				СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
				Если СтоянкаВПункте <> Неопределено Тогда
					ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
				Иначе
					СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
					СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
					ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
				КонецЕсли;
			ИначеЕсли НЕ ПунктБезЗаказов Тогда
				СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
				Если СтоянкаВПункте <> Неопределено Тогда
					ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
				Иначе
					СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
					СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
					ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
				КонецЕсли;
			Иначе
				ТекПункт.СтоянкаИзПункта = 0;
			КонецЕсли;
			
			мСуммаСтоянок = 0;
			Для Каждого ТекЗаказ Из ЭлементыВеткаЗаказ Цикл 
				Если ТекЗаказ.Стоянка = 0 Тогда 
					Если ТекПункт.СтоянкиНеИспользуются Тогда
						ТекЗаказ.Стоянка = 0;
					ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
						СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
						Если СтоянкаЭтап <> Неопределено Тогда
							Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
								СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка1;
							Иначе
								СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка2;
							КонецЕсли;
						Иначе
							СтоянкаПунктОтправления = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
							"СтоянкаПунктОтправления");
						КонецЕсли;
						ТекЗаказ.Стоянка = СтоянкаПунктОтправления;
						
					ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
						СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
						Если СтоянкаЭтап <> Неопределено Тогда
							Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
								СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка1;
							Иначе
								СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка2;
							КонецЕсли;
						Иначе
							СтоянкаПунктНазначения = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
							"СтоянкаПунктНазначения");
						КонецЕсли;
						ТекЗаказ.Стоянка = СтоянкаПунктНазначения;
					КонецЕсли;
				КонецЕсли;
				
				ТекЗаказ.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
				мСуммаСтоянок = СложитьВремя(мСуммаСтоянок, ?(ТекПункт.СтоянкиНеИспользуются, 0 ,ТекЗаказ.Стоянка));
			КонецЦикла;
			
			ТекПункт.Стоянка = СложитьВремя(мСуммаСтоянок, ТекПункт.СтоянкаИзПункта);
			
			ТекТС.Стоянка = СложитьВремя(ТекТС.Стоянка, ТекПункт.Стоянка);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеПараметрыДереваМаршрутов(НеПересчитыватьПлановыеДаты, ОбновитьТекущуюСтроку = Ложь, ИндексСтроки = 0)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьМаршрутныеПараметрыДереваМаршрутовДерево(НеПересчитыватьПлановыеДаты);
	Иначе
		Если ОбновитьТекущуюСтроку Тогда
			ВеткаТС = МаршрутыСписок.НайтиПоИдентификатору(ИндексСтроки);
		Иначе
			ВеткаТС = Неопределено;
		КонецЕсли;
	
		ОбновитьМаршрутныеПараметрыДереваМаршрутовСписок(НеПересчитыватьПлановыеДаты, ВеткаТС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеПараметрыДереваМаршрутовДерево(НеПересчитыватьПлановыеДаты)

	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл
			ПредВремяОтпр = 0;
			ПредПунктСтрока = Неопределено;
			
			флЦветУстановлен = Ложь;
			
			Для Каждого ТекСтрокаПункт Из ТекМЛ.ПолучитьЭлементы() Цикл
				
				Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
					Если НЕ флЦветУстановлен Тогда 
						Если ЗначениеЗаполнено(ТекСтрокаЗаказ.Этап) Тогда 
							ТекМЛ.ЦветДокумента = ТекСтрокаЗаказ.ЦветДокумента;
							флЦветУстановлен    = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				мВремяСтоянки = ТекСтрокаПункт.Стоянка;
				
				Если ТекСтрокаПункт = ТекМЛ.ПолучитьЭлементы()[0] Тогда
					ПредВремяОтпр   = СложитьВремя(ТекСтрокаПункт.ВремяПрибытияВПункт, мВремяСтоянки);
					ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
					
				Иначе 
					ТекПрибытиеПлан = СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.ВремяВПути);
					
					Если НеПересчитыватьПлановыеДаты И ТекМЛ.ПересчетВремени = 1 Тогда 
						РазницаВремени = ТекСтрокаПункт.ВремяПрибытияВПункт - ТекПрибытиеПлан;
						РазницаЧас = Цел(РазницаВремени/3600);
						РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
						РазницаВремени = РазницаЧас + РазницаМин/100;
						
						ТекСтрокаПункт.Ожидание = РазницаВремени;
					КонецЕсли;
					
					ТекПрибытиеПлан = СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
					ПредВремяОтпр   = СложитьВремя(ТекПрибытиеПлан, мВремяСтоянки);
					
					ТекСтрокаПункт.ВремяПрибытияВПункт = ТекПрибытиеПлан;
					ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
				КонецЕсли;
				
				ПредПунктСтрока = ТекСтрокаПункт;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеПараметрыДереваМаршрутовСписок(НеПересчитыватьПлановыеДаты, ВеткаТС = Неопределено)

	Если ВеткаТС = Неопределено Тогда
		Для Каждого ТекТС Из МаршрутыСписок Цикл
			ПредВремяОтпр = 0;
			ПредПунктСтрока = Неопределено;
			
			флЦветУстановлен = Ложь;
			ТекТС.ЦветДокумента = 0;
			
			ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ТекТС.GUID));
			
			Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
				
				Если НЕ флЦветУстановлен Тогда 
					Если ТекСтрокаПункт.GUIDПункта = ТекСтрокаПункт.GUIDПункта
						И ТекСтрокаПункт.УровеньДерева = "Заказ"
						И ЗначениеЗаполнено(ТекСтрокаПункт.Этап) Тогда 
						ТекТС.ЦветДокумента = ТекСтрокаПункт.ЦветДокумента;
						флЦветУстановлен    = Истина;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекСтрокаПункт.УровеньДерева <> "Пункт" Тогда
					Продолжить;
				КонецЕсли;
				
				мВремяСтоянки = ТекСтрокаПункт.Стоянка;
				
				Если ТекСтрокаПункт = ЭлементыВеткаПункты[0] Тогда
					ПредВремяОтпр   = СложитьВремя(ТекСтрокаПункт.ВремяПрибытияВПункт, мВремяСтоянки);
					ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
					
				Иначе 
					ТекПрибытиеПлан = СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.ВремяВПути);
					
					Если НеПересчитыватьПлановыеДаты И ТекТС.ПересчетВремени = 1 Тогда 
						РазницаВремени = ТекСтрокаПункт.ВремяПрибытияВПункт - ТекПрибытиеПлан;
						РазницаЧас = Цел(РазницаВремени/3600);
						РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
						РазницаВремени = РазницаЧас + РазницаМин/100;
						
						ТекСтрокаПункт.Ожидание = РазницаВремени;
					КонецЕсли;
					
					ТекПрибытиеПлан = СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
					ПредВремяОтпр   = СложитьВремя(ТекПрибытиеПлан, мВремяСтоянки);
					
					ТекСтрокаПункт.ВремяПрибытияВПункт = ТекПрибытиеПлан;
					ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
				КонецЕсли;
				
				ПредПунктСтрока = ТекСтрокаПункт;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ТекТС = ВеткаТС;
		ПредВремяОтпр = 0;
		ПредПунктСтрока = Неопределено;
		
		флЦветУстановлен = Ложь;
		ТекТС.ЦветДокумента = 0;
		
		ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ТекТС.GUID));
		
		Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
			
			Если НЕ флЦветУстановлен Тогда 
				Если ТекСтрокаПункт.GUIDПункта = ТекСтрокаПункт.GUIDПункта
					И ТекСтрокаПункт.УровеньДерева = "Заказ"
					И ЗначениеЗаполнено(ТекСтрокаПункт.Этап) Тогда 
					ТекТС.ЦветДокумента = ТекСтрокаПункт.ЦветДокумента;
					флЦветУстановлен    = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтрокаПункт.УровеньДерева <> "Пункт" Тогда
				Продолжить;
			КонецЕсли;
			
			мВремяСтоянки = ТекСтрокаПункт.Стоянка;
			
			Если ТекСтрокаПункт = ЭлементыВеткаПункты[0] Тогда
				ПредВремяОтпр   = СложитьВремя(ТекСтрокаПункт.ВремяПрибытияВПункт, мВремяСтоянки);
				ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
				
			Иначе 
				ТекПрибытиеПлан = СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.ВремяВПути);
				
				Если НеПересчитыватьПлановыеДаты И ТекТС.ПересчетВремени = 1 Тогда 
					РазницаВремени = ТекСтрокаПункт.ВремяПрибытияВПункт - ТекПрибытиеПлан;
					РазницаЧас = Цел(РазницаВремени/3600);
					РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
					РазницаВремени = РазницаЧас + РазницаМин/100;
					
					ТекСтрокаПункт.Ожидание = РазницаВремени;
				КонецЕсли;
				
				ТекПрибытиеПлан = СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
				ПредВремяОтпр   = СложитьВремя(ТекПрибытиеПлан, мВремяСтоянки);
				
				ТекСтрокаПункт.ВремяПрибытияВПункт = ТекПрибытиеПлан;
				ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
			КонецЕсли;
			
			ПредПунктСтрока = ТекСтрокаПункт;
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМассивРаспределенныхЗаказов()
	
	МассивРаспределенныхЗаказов = Новый Массив();
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	Элементы.ЗаказыСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыТарыИРазмещения()
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьРеквизитыТарыИРазмещенияДерево();
	Иначе
		ОбновитьРеквизитыТарыИРазмещенияСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыТарыИРазмещенияДерево()
	
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
			Если Не ТекМЛ.Группировка = Документы.уатМаршрутныйЛист.ПустаяСсылка() Тогда 
				Продолжить;
			КонецЕсли;
			
			мсвЗаказыКРазмещению = Новый Массив();
			
			Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл 
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
					Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТекЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда 
						ДанныеСтроки = Новый Структура();
						ДанныеСтроки.Вставить("Заказ",      ТекЗаказ.Этап);
						ДанныеСтроки.Вставить("Груз",       Неопределено);
						ДанныеСтроки.Вставить("Количество", 1);
						мсвЗаказыКРазмещению.Добавить(ДанныеСтроки);
					Иначе 
						Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
							ДанныеСтроки = Новый Структура();
							ДанныеСтроки.Вставить("Заказ",      ТекЗаказ.Этап);
							ДанныеСтроки.Вставить("Груз",       ТекГруз.Группировка);
							ДанныеСтроки.Вставить("Количество", ТекГруз.Количество);
							мсвЗаказыКРазмещению.Добавить(ДанныеСтроки);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если Константы.уатИспользоватьГруппировкуГрузов_уэ.Получить() И НастройкаАлгоритмМаршрутизации = 1
					И НастройкаКларкРайтРежимДоставки = 0 И НастройкаУчитыватьГруппировкуВМаршрутномЛисте Тогда 
				УчитыватьГруппировкуВМаршрутномЛисте = Истина;
			Иначе 
				УчитыватьГруппировкуВМаршрутномЛисте = Ложь;
			КонецЕсли;
			
			Если Константы.уатИспользоватьРазмещениеНаПаллетах_уэ.Получить() И НастройкаАлгоритмМаршрутизации = 1
					И НастройкаКларкРайтРежимДоставки = 0 И НастройкаУчитыватьУпаковкуВПаллетыВМЛ Тогда 
				УчитыватьУпаковкуВПаллетыВМЛ = Истина;
			Иначе 
				УчитыватьУпаковкуВПаллетыВМЛ = Ложь;
			КонецЕсли;
			
			РазмещениеЗаказовМаршрутногоЛиста = уатОбщегоНазначения_уэ.РасчитатьРазмещениеЗаказовМаршрутногоЛиста(
				мсвЗаказыКРазмещению,
				УчитыватьГруппировкуВМаршрутномЛисте,
				НастройкаВесОтдельнойГруппировки,
				УчитыватьУпаковкуВПаллетыВМЛ,
				НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему
			);
			
			Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл 
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
					Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТекЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда 
						ОтборРазмещения = Новый Структура();
						ОтборРазмещения.Вставить("Заказ", ТекЗаказ.Этап);
						ОтборРазмещения.Вставить("Груз",  Неопределено);
						НайдСтроки = РазмещениеЗаказовМаршрутногоЛиста.НайтиСтроки(ОтборРазмещения);
						Если НайдСтроки.Количество() Тогда 
							ТекЗаказ.ВесТары    = НайдСтроки[0].ВесТары;
							ТекЗаказ.Группа     = НайдСтроки[0].Группа;
							ТекЗаказ.Паллета    = НайдСтроки[0].Паллета;
							ТекЗаказ.Размещение = НайдСтроки[0].Размещение;
						КонецЕсли;
					Иначе 
						Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
							ОтборРазмещения = Новый Структура();
							ОтборРазмещения.Вставить("Заказ", ТекЗаказ.Этап);
							ОтборРазмещения.Вставить("Груз",  ТекГруз.Группировка);
							НайдСтроки = РазмещениеЗаказовМаршрутногоЛиста.НайтиСтроки(ОтборРазмещения);
							Если НайдСтроки.Количество() Тогда 
								ТекГруз.ВесТары    = НайдСтроки[0].ВесТары;
								ТекГруз.Группа     = НайдСтроки[0].Группа;
								ТекГруз.Паллета    = НайдСтроки[0].Паллета;
								ТекГруз.Размещение = НайдСтроки[0].Размещение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыТарыИРазмещенияСписок(ТекТС = Неопределено)
	
	Если ТекТС = Неопределено Тогда
		Для Каждого ТекТС Из МаршрутыСписок Цикл
			ОбновитьРеквизитыТарыИРазмещенияСписок(ТекТС);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекТС.МЛ = Документы.уатМаршрутныйЛист.ПустаяСсылка() Тогда 
		Возврат;
	КонецЕсли;
	
	мсвЗаказыКРазмещению = Новый Массив();
	
	ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
	Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл
		ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
		ТекТС.GUID, ТекПункт.GUIDПункта, "Заказ"));
		Для Каждого ТекЗаказ Из ЭлементыВеткаЗаказ Цикл 
			Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
				Продолжить;
			КонецЕсли;
			
			ЭлементыВеткаНоменклатура = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта,
			|GUIDЗаказа, УровеньДерева",
			ТекТС.GUID, ТекПункт.GUIDПункта, ТекЗаказ.GUIDЗаказа, "Номенклатура"));
			Если ЭлементыВеткаНоменклатура.Количество() = 0 Тогда 
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить("Заказ",      ТекЗаказ.Этап);
				ДанныеСтроки.Вставить("Груз",       Неопределено);
				ДанныеСтроки.Вставить("Количество", 1);
				мсвЗаказыКРазмещению.Добавить(ДанныеСтроки);
			Иначе 
				Для Каждого ТекГруз Из ЭлементыВеткаНоменклатура Цикл 
					ДанныеСтроки = Новый Структура();
					ДанныеСтроки.Вставить("Заказ",      ТекЗаказ.Этап);
					ДанныеСтроки.Вставить("Груз",       ТекГруз.Группировка);
					ДанныеСтроки.Вставить("Количество", ТекГруз.Количество);
					мсвЗаказыКРазмещению.Добавить(ДанныеСтроки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Константы.уатИспользоватьГруппировкуГрузов_уэ.Получить() И НастройкаАлгоритмМаршрутизации = 1
		И НастройкаКларкРайтРежимДоставки = 0 И НастройкаУчитыватьГруппировкуВМаршрутномЛисте Тогда 
		УчитыватьГруппировкуВМаршрутномЛисте = Истина;
	Иначе 
		УчитыватьГруппировкуВМаршрутномЛисте = Ложь;
	КонецЕсли;
	
	Если Константы.уатИспользоватьРазмещениеНаПаллетах_уэ.Получить() И НастройкаАлгоритмМаршрутизации = 1
		И НастройкаКларкРайтРежимДоставки = 0 И НастройкаУчитыватьУпаковкуВПаллетыВМЛ Тогда 
		УчитыватьУпаковкуВПаллетыВМЛ = Истина;
	Иначе 
		УчитыватьУпаковкуВПаллетыВМЛ = Ложь;
	КонецЕсли;
	
	РазмещениеЗаказовМаршрутногоЛиста = уатОбщегоНазначения_уэ.РасчитатьРазмещениеЗаказовМаршрутногоЛиста(
	мсвЗаказыКРазмещению,
	УчитыватьГруппировкуВМаршрутномЛисте,
	НастройкаВесОтдельнойГруппировки,
	УчитыватьУпаковкуВПаллетыВМЛ,
	НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему
	);
	
	Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл 
		ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
		ТекТС.GUID, ТекПункт.GUIDПункта, "Заказ"));
		Для Каждого ТекЗаказ Из ЭлементыВеткаЗаказ Цикл 
			Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
				Продолжить;
			КонецЕсли;
			
			ЭлементыВеткаНоменклатура = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта,
			|GUIDЗаказа, УровеньДерева",
			ТекТС.GUID, ТекПункт.GUIDПункта, ТекЗаказ.GUIDЗаказа, "Номенклатура"));
			Если ЭлементыВеткаНоменклатура.Количество() = 0 Тогда 
				ОтборРазмещения = Новый Структура();
				ОтборРазмещения.Вставить("Заказ", ТекЗаказ.Этап);
				ОтборРазмещения.Вставить("Груз",  Неопределено);
				НайдСтроки = РазмещениеЗаказовМаршрутногоЛиста.НайтиСтроки(ОтборРазмещения);
				Если НайдСтроки.Количество() Тогда 
					ТекЗаказ.ВесТары    = НайдСтроки[0].ВесТары;
					ТекЗаказ.Группа     = НайдСтроки[0].Группа;
					ТекЗаказ.Паллета    = НайдСтроки[0].Паллета;
					ТекЗаказ.Размещение = НайдСтроки[0].Размещение;
				КонецЕсли;
			Иначе 
				Для Каждого ТекГруз Из ЭлементыВеткаНоменклатура Цикл 
					ОтборРазмещения = Новый Структура();
					ОтборРазмещения.Вставить("Заказ", ТекЗаказ.Этап);
					ОтборРазмещения.Вставить("Груз",  ТекГруз.Группировка);
					НайдСтроки = РазмещениеЗаказовМаршрутногоЛиста.НайтиСтроки(ОтборРазмещения);
					Если НайдСтроки.Количество() Тогда 
						ТекГруз.ВесТары    = НайдСтроки[0].ВесТары;
						ТекГруз.Группа     = НайдСтроки[0].Группа;
						ТекГруз.Паллета    = НайдСтроки[0].Паллета;
						ТекГруз.Размещение = НайдСтроки[0].Размещение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает шаблон структуры параметров для получения таблицы ТС в тч "МаршрутыДерево".
//
// Возвращаемое значение:
//  Структура - Структура - Коллекция параметров.
//       
//       * СобственныеТС           - Булево - Признак выборки собственных ТС
//       * ПривлеченныеТС          - Булево - Признак выборки привлеченных ТС
//       * ТСсМЛ                   - Булево - Признак выборки ТС с маршрутами
//       * ТСсЭкипажем             - Булево - Признак выборки ТС с экипажем
//       * ЗаполнениеТСПриОткрытии - Булево - Признак выборки ТС при открытии формы.
//                                            Возврат пустого массива при наличии более 300 единиц ТС.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СобственныеТС",               Истина);
	СтруктураПараметров.Вставить("ПривлеченныеТС",              Истина);
	СтруктураПараметров.Вставить("ТСсМЛ",                       Ложь);
	СтруктураПараметров.Вставить("ТСсЭкипажем",                 Ложь);
	СтруктураПараметров.Вставить("ЗаполнениеТСПриОткрытии",     Ложь);
	СтруктураПараметров.Вставить("ТСЗакрепленыеЗаЗонами",       Ложь);
	СтруктураПараметров.Вставить("КоэффициентГрузоподъемности", КоэффициентГрузоподъемности);
	СтруктураПараметров.Вставить("КоэффициентОбъемаКузова",     КоэффициентОбъемаКузова);
	СтруктураПараметров.Вставить("НастройкаАлгоритмМаршрутизации", НастройкаАлгоритмМаршрутизации);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// функция возвращает таблицу ТС с заданнами отборами
// 
// Параметры:
//   Параметры - Структура - См. СтруктураПараметровДляПолученияТаблицыТС
//
// Возвращаемое значение:
//  Таблица ТС с их характеристиками
//
&НаСервереБезКонтекста
Функция ПолучитьТаблицуТС(Параметры, ДатаПланирования, СоответсвиеМаршрутов = Неопределено, МассивТС = Неопределено, МассивМаршруты = Неопределено)
	
	Возврат уатАРМ.ПолучитьТаблицуТС(Параметры, ДатаПланирования, СоответсвиеМаршрутов, МассивТС);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеДокументаДляКартыМаршруты(ПредставлениеОбъекта, УникальныйИдентификатор, НомерДокумента, ДатаДокумента)
	
	Возврат уатАРМ.СформироватьПредставлениеДокументаДляКартыМаршруты(ПредставлениеОбъекта, УникальныйИдентификатор, НомерДокумента, ДатаДокумента);
	
КонецФункции

&НаСервере
Процедура МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, ПолноеОбновлениеСписка = Ложь, МассивТС = Неопределено, МассивМаршруты = Неопределено)
	
	СоответсвиеМаршрутов = Новый Соответствие;
	Если НЕ ПараметрыЗапросаТС.ТСЗакрепленыеЗаЗонами Тогда
		мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, СоответсвиеМаршрутов, МассивТС, МассивМаршруты);
	ИначеЕсли НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС Тогда
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(ПолучитьСписокЗонОтбора(), ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат, СоответсвиеМаршрутов);
	Иначе
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(ПолучитьСписокЗонОтбора(), ДатаПланирования, ПараметрыЗапросаТС,,СоответсвиеМаршрутов);
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыЗаполнитьСписокТСЗавершениеСервер_Дерево(мсвТС, СоответсвиеМаршрутов, ПолноеОбновлениеСписка);
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Дерево(мсвТС);
		ОбновитьДанныеПоСтоянкамСервер();
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;

	Иначе
		МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, СоответсвиеМаршрутов, ПолноеОбновлениеСписка);
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер_Список(мсвТС);
	КонецЕсли;

	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
КонецПроцедуры

&НаСервере
Функция МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, СоответсвиеМаршрутов, ПолноеОбновлениеСписка = Ложь, ЧислоТС = 1)
	
	МассивТС = Новый Массив();
	
	Для Каждого ТекТС Из мсвТС Цикл
		Если МассивТС.Найти(ТекТС.ТС) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Счетчик = 1 По ЧислоТС Цикл
			НовСтрока = МаршрутыСписок.Добавить();
			ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС, ТекТС.Прицеп1, ТекТС.Прицеп2, СоответсвиеМаршрутов);
		КонецЦикла;
		
		МассивТС.Добавить(ТекТС.ТС);
	КонецЦикла;
	
	Возврат МассивТС;
	
КонецФункции

&НаСервере
Функция МаршрутыЗаполнитьСписокТСЗавершениеСервер_Дерево(мсвТС, ТабМаршрутов, ПолноеОбновлениеСписка = Ложь)
	
	ПредТС   = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	
	МассивТС = Новый Массив();
	Для Каждого ТекТС Из мсвТС Цикл
		
		Если НЕ ПолноеОбновлениеСписка
			И ТСЕстьВМаршрутахСервер(ТекТС.ТС)
			И НЕ ТекТС.ТС = ПредТС Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекТС.ТС = ПредТС Тогда
			НовСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьСтрокуТСВМаршрутах(НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации, НовСтрока, ТекТС, ТекТС.Прицеп1, ТекТС.Прицеп2, ТабМаршрутов);
			МассивТС.Добавить(ТекТС.ТС);
		КонецЕсли;
		ПредТС = ТекТС.ТС;
		
	КонецЦикла;
	
	Возврат МассивТС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуТСЗакрепленыхЗаЗонами(СписокЗон, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат = 0, СоответсвиеМаршрутов = Неопределено) 
	
	Возврат уатАРМ.ПолучитьТаблицуТСЗакрепленыхЗаЗонами(СписокЗон, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат, СоответсвиеМаршрутов);
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗонОтбора()
	
	Возврат уатАРМ.ПолучитьСписокЗонОтбора(ОтборЗоны);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПривязанныеМаршрутыТС(МассивТС, МассивМаршруты = Неопределено)
	
	Возврат уатАРМ.ПривязанныеМаршрутыТС(МассивТС, МассивМаршруты);
	
КонецФункции

&НаКлиенте
Процедура МаршрутыЗаполнитьПоМаршрутамФормаВыбора()
	
	Оповещение = Новый ОписаниеОповещения("МаршрутыВыборТС", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатАРМЛогиста_уэ.Форма.ФормаВыбораТСПоМаршруту", , ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыВыборТС(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено
		Или Не РезультатЗакрытия.Свойство("ТС")
		Или Не РезультатЗакрытия.Свойство("Маршруты")Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова, НастройкаАлгоритмМаршрутизации);
	МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, Истина, РезультатЗакрытия.ТС, РезультатЗакрытия.Маршруты);

	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	ОбновитьПланировщик();

КонецПроцедуры

&НаСервере
Процедура ОбновитьУровеньДереваВМаршрутах()
	
	Если НастройкаРежимОтображенияМЛ <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		Если НЕ ЗначениеЗаполнено(ТекТС.УровеньДерева) Тогда
			ТекТС.УровеньДерева = "ТС";
			ТекТС.АдресГруппировкаУказанНаКарте = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекТС.GUID) Тогда
			ТекТС.GUID = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ТекТС.GUIDТС = ТекТС.GUID;
		
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
			ТекМЛ.УровеньДерева = "МЛ";
			Если НЕ ЗначениеЗаполнено(ТекМЛ.GUID) Тогда
				ТекМЛ.GUID = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			ТекМЛ.GUIDТС     = ТекТС.GUID;
			ТекМЛ.GUIDМЛ     = ТекМЛ.GUID;
			Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл 
				Если Не ЗначениеЗаполнено(ТекПункт.УровеньДерева) Тогда
					ТекПункт.УровеньДерева = "Пункт";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекПункт.GUID) Тогда
					ТекПункт.GUID = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				ТекПункт.GUIDТС     = ТекТС.GUID;
				ТекПункт.GUIDМЛ     = ТекМЛ.GUID;
				ТекПункт.GUIDПункта = ТекПункт.GUID;
				
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
					Если Не ЗначениеЗаполнено(ТекЗаказ.УровеньДерева) Тогда
						ТекЗаказ.УровеньДерева = "Заказ";
						ТекЗаказ.АдресГруппировкаУказанНаКарте = 0;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ТекЗаказ.GUID) Тогда
						ТекЗаказ.GUID = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
					ТекЗаказ.GUIDТС     = ТекТС.GUID;
					ТекЗаказ.GUIDМЛ     = ТекМЛ.GUID;
					ТекЗаказ.GUIDПункта = ТекПункт.GUID;
					ТекЗаказ.GUIDЗаказа = ТекЗаказ.GUID;

					Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
						Если Не ЗначениеЗаполнено(ТекГруз.УровеньДерева) Тогда 
							ТекГруз.УровеньДерева = "Номенклатура";
							ТекГруз.АдресГруппировкаУказанНаКарте = 0;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ТекГруз.GUID) Тогда
							ТекГруз.GUID = Строка(Новый УникальныйИдентификатор);
						КонецЕсли;
						
						ТекГруз.GUIDТС     = ТекТС.GUID;
						ТекГруз.GUIDМЛ     = ТекМЛ.GUID;
						ТекГруз.GUIDПункта = ТекПункт.GUID;
						ТекГруз.GUIDЗаказа = ТекЗаказ.GUID;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияВДеревеМаршрутовСписок(СтрокаНоменклатуры, СтрокаПриемник, СтрокаПунктИсточник = Неопределено, СтрокаПунктПриемник = Неопределено)
	
	Если СтрокаПунктИсточник = Неопределено Тогда
		СтрокаПунктИсточник = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя();
	КонецЕсли;
	Если СтрокаПунктПриемник = Неопределено Тогда
		СтрокаПунктПриемник = СтрокаПриемник;
		Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Группировка",      СтрокаНоменклатуры.Группировка);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаНоменклатуры.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("Количество",       СтрокаНоменклатуры.Количество);
	
	НайденныеСтроки = НайтиСтрокиВПроизвольномДереве(МаршрутыСписокЗаказовДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Для Каждого текНайдСтрока Из НайденныеСтроки Цикл
		Если текНайдСтрока.УровеньДерева = "Заказ" 
			И СтрокаНоменклатуры.УровеньДерева = "Заказ" Тогда
			Если текНайдСтрока.Этап = СтрокаНоменклатуры.Этап
				И Не ТекНайдСтрока = СтрокаНоменклатуры
				И Не ТекНайдСтрока.Операция = СтрокаНоменклатуры.Операция Тогда
				СмежнаяСтрокаНоменклатуры = ТекНайдСтрока;
			КонецЕсли;
		Иначе
			Если текНайдСтрока.ПолучитьРодителя().Этап = СтрокаНоменклатуры.ПолучитьРодителя().Этап
				И Не ТекНайдСтрока = СтрокаНоменклатуры
				И Не ТекНайдСтрока.ПолучитьРодителя().Операция = СтрокаНоменклатуры.ПолучитьРодителя().Операция Тогда
				СмежнаяСтрокаНоменклатуры = ТекНайдСтрока;
			КонецЕсли;
		КонецЕсли;
	Конеццикла;
	
	Если Не СмежнаяСтрокаНоменклатуры = Неопределено Тогда
		
		СтрокаПунктСмежный = СмежнаяСтрокаНоменклатуры;
		Пока Не СтрокаПунктСмежный.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
		КонецЦикла;
	Иначе
		СтрокаПунктСмежный = СтрокаНоменклатуры;
	КонецЕсли;
	
	ИндексИсточник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаНоменклатуры.ПолучитьРодителя().Операция = ТипыТочекМаршрута_Погрузка Тогда
		//       перетягиваем вниз                погрузка не окажется ниже разгрузки
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		//      перетягиваем вверх                   разгрузка не окажется выше погрузки
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
	
КонецФункции 

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияВДеревеМаршрутов(СтрокаНоменклатуры, СтрокаПриемник, СтрокаПунктИсточник = Неопределено, СтрокаПунктПриемник=Неопределено)
	
	Если СтрокаПунктИсточник = Неопределено Тогда
		СтрокаПунктИсточник = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя();
	КонецЕсли;
	Если СтрокаПунктПриемник = Неопределено Тогда
		СтрокаПунктПриемник = СтрокаПриемник;
		Пока Не СтрокаПунктПриемник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Группировка",      СтрокаНоменклатуры.Группировка);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаНоменклатуры.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("Количество",       СтрокаНоменклатуры.Количество);
	
	НайденныеСтроки = НайтиСтрокиВПроизвольномДереве(СтрокаПунктИсточник.ПолучитьРодителя().ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Для Каждого текНайдСтрока Из НайденныеСтроки Цикл
		Если текНайдСтрока.ПолучитьРодителя().Этап = СтрокаНоменклатуры.ПолучитьРодителя().Этап
				И Не ТекНайдСтрока = СтрокаНоменклатуры
				И Не ТекНайдСтрока.ПолучитьРодителя().Операция = СтрокаНоменклатуры.ПолучитьРодителя().Операция Тогда
			СмежнаяСтрокаНоменклатуры = ТекНайдСтрока;
		КонецЕсли;
	Конеццикла;
	
	Если Не СмежнаяСтрокаНоменклатуры = Неопределено Тогда
		СтрокаПунктСмежный = СмежнаяСтрокаНоменклатуры;
		Пока Не СтрокаПунктСмежный.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
		КонецЦикла;
	Иначе
		СтрокаПунктСмежный = СтрокаНоменклатуры;
	КонецЕсли;
	
	СтрокаМЛ = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
	
	ИндексИсточник = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаНоменклатуры.ПолучитьРодителя().Операция = ТипыТочекМаршрута_Погрузка Тогда
		//       перетягиваем вниз                погрузка не окажется ниже разгрузки
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		//      перетягиваем вверх                   разгрузка не окажется выше погрузки
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
	
КонецФункции // ПроверитьВозможностьПеретаскиванияВДеревеЗаказов()

&НаКлиенте
Функция НайтиСтрокиВПроизвольномДереве(КоллекцияУзлов, СтруктураОтбора, ИскатьВПодчиненных=Ложь)
	
	Результат = Новый Массив();
	Для Каждого ТекЭлемент Из КоллекцияУзлов Цикл 
		флЭлементСоответствуетОтбору = Истина;
		Для Каждого ТекУсловие Из СтруктураОтбора Цикл 
			Если Не ТекЭлемент[ТекУсловие.Ключ] = ТекУсловие.Значение Тогда 
				флЭлементСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флЭлементСоответствуетОтбору Тогда 
			Результат.Добавить(ТекЭлемент);
		КонецЕсли;
		Если ИскатьВПодчиненных Тогда 
			мсвПодчиненных = НайтиСтрокиВПроизвольномДереве(ТекЭлемент.ПолучитьЭлементы(), СтруктураОтбора, ИскатьВПодчиненных);
			Для Каждого ТекПодчиненный Из мсвПодчиненных Цикл 
				Результат.Добавить(ТекПодчиненный);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПредварительныеДатыЭтапа(Заказ, ДатаОтправления, ДатаПрибытия)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Этап", Заказ);
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап = &Этап";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаОтправленияПлан) И ЗначениеЗаполнено(Выборка.ДатаПрибытияПлан) Тогда 
		ДатаОтправления = Выборка.ДатаОтправленияПлан;
		ДатаПрибытия    = Выборка.ДатаПрибытияПлан;
		
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПеретаскиваниеНаМаршрутыСписокЗаказовДерево(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, 
		ДатаИВремяНачала, ПоУказанномуЗаказу = Ложь, ПеретаскиваниеИзМЛ=Ложь, мОтмеченныеЗаказы = Неопределено)
	
	Если НЕ ПеретаскиваниеИзМЛ Тогда 
		СтрокаИсточник = ПараметрыПеретаскивания.Значение;
		Если ТипЗнч(СтрокаИсточник) = Тип("Массив") Тогда 
			СтрокаИсточник = СтрокаИсточник[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Строка = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("КлючСтрокиДинамическогоСписка") Тогда
		СтрокаИсточник = ЗаполнитьДанныеСтрокиЗаказа(СтрокаИсточник);
	КонецЕсли;
	
	мсвFTLЗаказов = Новый Массив();
	СоответствиеFTLКоличестваГрузов = Новый Соответствие();

	Если НЕ ПеретаскиваниеИзМЛ Тогда 
		Если ПоУказанномуЗаказу Тогда
			Если мОтмеченныеЗаказы <> Неопределено Тогда
				СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказыГруппой(мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
			Иначе
				СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказы(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
			КонецЕсли;
		Иначе
			СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказыГруппой(ОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
		КонецЕсли;
	КонецЕсли;
	
	СтрокиДереваПеретаскиваемыхЗаказов = ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы();
	Если СтрокиДереваПеретаскиваемыхЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеНаМаршрутыСписок(ТекТС, СтрокиДереваПеретаскиваемыхЗаказов, ДатаИВремяНачала,
			ПоУказанномуЗаказу, ПеретаскиваниеИзМЛ, мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеНаМаршруты(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, 
		ДатаИВремяНачала, ПоУказанномуЗаказу = Ложь, ПеретаскиваниеИзМЛ = Ложь, мОтмеченныеЗаказы = Неопределено)
	
	Если НЕ ПеретаскиваниеИзМЛ Тогда 
		СтрокаИсточник = ПараметрыПеретаскивания.Значение;
		Если ТипЗнч(СтрокаИсточник) = Тип("Массив") Тогда 
			СтрокаИсточник = СтрокаИсточник[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Строка = МаршрутыДерево.НайтиПоИдентификатору(Строка);
		Иначе
			Строка = МаршрутыСписок.НайтиПоИдентификатору(Строка);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("КлючСтрокиДинамическогоСписка") Тогда
		СтрокаИсточник = ЗаполнитьДанныеСтрокиЗаказа(СтрокаИсточник);
	КонецЕсли;
	
	мсвFTLЗаказов = Новый Массив();
	СоответствиеFTLКоличестваГрузов = Новый Соответствие();
	Если НЕ ПеретаскиваниеИзМЛ Тогда 
		Если ПоУказанномуЗаказу Тогда
			Если мОтмеченныеЗаказы <> Неопределено Тогда
				СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказыГруппой(мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
			Иначе
				СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказы(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
			КонецЕсли;
		Иначе
			СформироватьДеревоПеретаскиваемыхЗаказовСТЧЗаказыГруппой(ОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
		КонецЕсли;
	Иначе	
		ЗаполнитьДеревоПеретаскиваемыхЗаказовПоМаршруту(мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов); 
	КонецЕсли;
	
	СтрокиДереваПеретаскиваемыхЗаказов = ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы();
	Если СтрокиДереваПеретаскиваемыхЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовку данных закончили.
	
	// Отправление.
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ПеретаскиваниеНаМаршрутыДерево(Строка, СтрокиДереваПеретаскиваемыхЗаказов, ДатаИВремяНачала,
			ПоУказанномуЗаказу, ПеретаскиваниеИзМЛ, мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
	Иначе
		ПеретаскиваниеНаМаршрутыСписок(Строка, СтрокиДереваПеретаскиваемыхЗаказов, ДатаИВремяНачала,
			ПоУказанномуЗаказу, ПеретаскиваниеИзМЛ, мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеНаМаршрутыДерево(Строка, СтрокиДереваПеретаскиваемыхЗаказов, ДатаИВремяНачала, 
	ПоУказанномуЗаказу, ПеретаскиваниеИзМЛ, мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов)
	
	// Отправление.
	НовСтрокаПункт = Неопределено;
	Если Строка.ПолучитьРодителя() = Неопределено Тогда // ТС.
		// Если уже есть новые маршрутные листы то будем писать в него.
		мсвНайдСтроки = НайтиСтрокиВДереве(Строка, Новый Структура("Группировка", ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка")), Ложь);    
		Если мсвНайдСтроки.Количество() Тогда
			Строка = мсвНайдСтроки[0];
			Если ТипЗнч(Строка) = Тип("Число") Тогда
				Строка = МаршрутыДерево.НайтиПоИдентификатору(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеОтрезкиПути          = Новый Соответствие();
	СоответствиеПромежуточныхПунктов = Новый Соответствие();
	Если мсвFTLЗаказов.Количество() <> 0 Тогда
		СоответствиеПромежуточныхПунктов = ПолучитьПромежуточныеПунктыFTLЗаказов(мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов, СоответствиеОтрезкиПути);
	КонецЕсли;

	Если Строка.ПолучитьРодителя() = Неопределено Тогда // ТС.
		// Добавляем новый пустой маршрут и пишем в него.
		
		Если Строка.СобственноеТС = 6 И Строка.КоличествоВиртуальныхТС > 0 Тогда 
			НовСтрокаТС = МаршрутыДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТС, Строка,, "ЗатратыНаПеревозку,GUID,Секции");
			Строка.КоличествоВиртуальныхТС = Строка.КоличествоВиртуальныхТС - 1;
			НовСтрокаТС.КоличествоВиртуальныхТС = 0;
			ОбновитьХарактеристикиТСДерево(НовСтрокаТС);
			
			Если Строка.КоличествоВиртуальныхТС < 1 Тогда 
				МаршрутыДерево.ПолучитьЭлементы().Удалить(Строка);
			КонецЕсли;
			
			Строка = НовСтрокаТС;
		КонецЕсли;
		
		НовСтрокаМЛ = Строка.ПолучитьЭлементы().Добавить();
		НовСтрокаМЛ.Группировка           = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
		НовСтрокаМЛ.УровеньДерева         = "МЛ";
		НовСтрокаМЛ.СоздатьМаршрутныйЛист = Истина;
		НовСтрокаМЛ.Прицеп1               = Строка.Прицеп1;
		НовСтрокаМЛ.Прицеп2               = Строка.Прицеп2;
		НовСтрокаМЛ.Модифицированность    = Истина;
		НовСтрокаМЛ.ПересчетВремени       = СпособПересчетаПлановогоВремениПоУмолчанию;
		
		Для Каждого ТекСтрокаЗаказ Из СтрокиДереваПеретаскиваемыхЗаказов Цикл
			Если ТекСтрокаЗаказ.FTL Тогда 
				пПогрузка     = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка  = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				пРазгрузка    = ТипыТочекМаршрута_Разгрузка;
				пДопРазгрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка");

				мсвОтрезкиПути    = Новый Массив();
				КоличествоГрузов  = ТекСтрокаЗаказ.ПолучитьЭлементы().Количество();

				мсвПромежуточныхПунктов = СоответствиеПромежуточныхПунктов.Получить(ТекСтрокаЗаказ.Ссылка);
				Если мсвПромежуточныхПунктов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				мсвОтрезкиПути          = СоответствиеОтрезкиПути.Получить(ТекСтрокаЗаказ.Ссылка);
				КоличествоПунктов = мсвПромежуточныхПунктов.Количество();

				Для Сч = 0 По КоличествоПунктов - 1 Цикл 
					
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
						
					Иначе
						НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
						
						НовСтрокаПункт.Группировка                   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес                         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат                           = СтрокаПромежуточногоПункта.Лат;
						НовСтрокаПункт.Лон                           = СтрокаПромежуточногоПункта.Лон;
						НовСтрокаПункт.УровеньДерева                 = "Пункт";
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат = 0 И НовСтрокаПункт.Лон = 0, 1, 0);
						НовСтрокаПункт.ВремяПрибытияВПункт           = СтрокаПромежуточногоПункта.ПрибытиеПлан;
					КонецЕсли;
					
					Если СтрокаПромежуточногоПункта.Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = СтрокаПромежуточногоПункта.Ожидание;
					КонецЕсли;
					
					НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута,
						ТекСтрокаЗаказ, СтрокаПромежуточногоПункта);
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
							
						флагПогрузка  = Ложь;
						флагРазгрузка = Ложь;
						
						Если СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пПогрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопПогрузка Тогда 
							флагПогрузка = Истина;
							
						ИначеЕсли СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пРазгрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопРазгрузка Тогда 
							флагРазгрузка = Истина;
						Иначе 
							Продолжить;
						КонецЕсли;
					
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							
							НомерСтрокиГруза = ТекСтрокаНом.НомерСтроки;
							флагГрузАктивен  = Ложь;
							Если НомерСтрокиГруза > 0 Тогда
								флагГрузАктивен = Истина;
								ТекОтрезокПути  = мсвОтрезкиПути[НомерСтрокиГруза - 1];
								Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
									// Груз, которому не назначен отрезок пути
									флагГрузАктивен = Ложь;
								КонецЕсли;
								
								Если НЕ ((флагПогрузка И ТекОтрезокПути.От = Сч + 1)
									ИЛИ (флагРазгрузка И ТекОтрезокПути.До = Сч + 1)) Тогда
									флагГрузАктивен = Ложь;
								КонецЕсли; 
							КонецЕсли;
							
							Если НЕ флагГрузАктивен Тогда 
								Продолжить;
							КонецЕсли;
					
							НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				СтрокаПунктаПогрузки  = Неопределено;
				СтрокаПунктаРазгрузки = Неопределено;
				
				Если НастройкаРежимДобавленияЗаказовВМаршруты = 0 Тогда // Режим группировки заказов по пунктам.
					СтруктураПоиска = Новый Структура("Группировка", ТекСтрокаЗаказ.АдресОтправленияПредставление);
					НайдСтроки = НайтиСтрокиВПроизвольномДереве(НовСтрокаМЛ.ПолучитьЭлементы(), СтруктураПоиска);
					Если НайдСтроки.Количество() Тогда 
						СтрокаПунктаПогрузки = НайдСтроки[0];
					КонецЕсли;
					
					Если СтрокаПунктаПогрузки = Неопределено Тогда 
						флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
					Иначе 
						флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
					КонецЕсли;
					
					Для Каждого ТекСтрокаПункта Из НовСтрокаМЛ.ПолучитьЭлементы() Цикл 
						Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктаПогрузки Тогда 
							флПунктПогрузкиПройден = Истина;
						КонецЕсли;
						
						Если флПунктПогрузкиПройден И ТекСтрокаПункта.Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда 
							СтрокаПунктаРазгрузки = ТекСтрокаПункта;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаПунктаРазгрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() 
							И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество()-1].Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда
						СтрокаПунктаРазгрузки = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество()-1];
					Иначе
						СтрокаПунктаРазгрузки = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
						СтрокаПунктаРазгрузки.Группировка                   = ТекСтрокаЗаказ.АдресНазначенияПредставление;
						СтрокаПунктаРазгрузки.Адрес                         = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Лат                           = ТекСтрокаЗаказ.ЛатНазн;
						СтрокаПунктаРазгрузки.Лон                           = ТекСтрокаЗаказ.ЛонНазн;
						СтрокаПунктаРазгрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаРазгрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте;
						СтрокаПунктаРазгрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ДоставкаС;
						СтрокаПунктаРазгрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ДоставкаПо;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаПунктаПогрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() 
							И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество()-1].Группировка = ТекСтрокаЗаказ.АдресОтправленияПредставление Тогда
						СтрокаПунктаПогрузки = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество()-1];
					Иначе
						СтрокаПунктаПогрузки = НовСтрокаМЛ.ПолучитьЭлементы().Вставить(НовСтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктаРазгрузки));
						
						СтрокаПунктаПогрузки.Группировка                   = ТекСтрокаЗаказ.АдресОтправленияПредставление;
						СтрокаПунктаПогрузки.Адрес                         = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Лат                           = ТекСтрокаЗаказ.ЛатОтпр;
						СтрокаПунктаПогрузки.Лон                           = ТекСтрокаЗаказ.ЛонОтпр;
						СтрокаПунктаПогрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаПогрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте;
						СтрокаПунктаПогрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ОтправлениеС;
						СтрокаПунктаПогрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ОтправлениеПо;
						
						// Установка рабочей даты в качестве времени прибытия в первый пункт.
						Если СтрокаПунктаПогрузки = НовСтрокаМЛ.ПолучитьЭлементы()[0] Тогда
							СтрокаПунктаПогрузки.ВремяПрибытияВПункт = ДатаИВремяНачала;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовСтрокаЗаказ = СтрокаПунктаПогрузки.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Погрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
				
				НовСтрокаЗаказ = СтрокаПунктаРазгрузки.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Разгрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.Маршрут) Тогда
				НовСтрокаМЛ.Маршрут = ТекСтрокаЗаказ.Маршрут;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.ОбъектСтроительства) Тогда
				НовСтрокаМЛ.ОбъектСтроительства = ТекСтрокаЗаказ.ОбъектСтроительства;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.ВидПеревозки) Тогда
				НовСтрокаМЛ.ВидПеревозки = ТекСтрокаЗаказ.ВидПеревозки;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.НаправлениеПеревозки) Тогда
				НовСтрокаМЛ.НаправлениеПеревозки = ТекСтрокаЗаказ.НаправлениеПеревозки;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Строка.ПолучитьРодителя() <> Неопределено
		И Строка.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // МЛ.
		Строка.СоздатьМаршрутныйЛист = Истина;
		Строка.Модифицированность    = Истина;
		
		Для Каждого ТекСтрокаЗаказ Из СтрокиДереваПеретаскиваемыхЗаказов Цикл
			Если ТекСтрокаЗаказ.FTL Тогда
				пПогрузка     = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка  = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				пРазгрузка    = ТипыТочекМаршрута_Разгрузка;
				пДопРазгрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка");

				мсвПромежуточныхПунктов = СоответствиеПромежуточныхПунктов.Получить(ТекСтрокаЗаказ.Ссылка);
				Если мсвПромежуточныхПунктов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				мсвОтрезкиПути = СоответствиеОтрезкиПути.Получить(ТекСтрокаЗаказ.Ссылка);

				Для Сч = 0 По мсвПромежуточныхПунктов.Количество()-1 Цикл 
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					Если Строка.ПолучитьЭлементы().Количество() И Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество() - 1];
					Иначе
						НовСтрокаПункт = Строка.ПолучитьЭлементы().Добавить();
						НовСтрокаПункт.Группировка   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат           = СтрокаПромежуточногоПункта.Лат;
						НовСтрокаПункт.Лон           = СтрокаПромежуточногоПункта.Лон;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат = 0 И НовСтрокаПункт.Лон=0, 1, 0);
						
					КонецЕсли;
					
					Если СтрокаПромежуточногоПункта.Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = СтрокаПромежуточногоПункта.Ожидание;
					КонецЕсли;
					
					НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
					
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута, ТекСтрокаЗаказ, СтрокаПромежуточногоПункта);
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
						
						флагПогрузка  = Ложь;
						флагРазгрузка = Ложь;
						
						Если СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пПогрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопПогрузка Тогда 
							флагПогрузка = Истина;
							
						ИначеЕсли СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пРазгрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопРазгрузка Тогда 
							флагРазгрузка = Истина;
						Иначе 
							Продолжить;
						КонецЕсли;
						
						Для каждого ТекСтрокаНом ИЗ ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							
							НомерСтрокиГруза = ТекСтрокаНом.НомерСтроки;
							флагГрузАктивен  = Ложь;
							Если НомерСтрокиГруза > 0 Тогда
								флагГрузАктивен = Истина;
								ТекОтрезокПути  = мсвОтрезкиПути[НомерСтрокиГруза - 1];
								Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
									// Груз, которому не назначен отрезок пути
									флагГрузАктивен = Ложь;
								КонецЕсли;
								
								Если НЕ ((флагПогрузка И ТекОтрезокПути.От = Сч + 1)
									ИЛИ (флагРазгрузка И ТекОтрезокПути.До = Сч + 1)) Тогда
									флагГрузАктивен = Ложь;
								КонецЕсли; 
							КонецЕсли;
							
							Если НЕ флагГрузАктивен Тогда 
								Продолжить;
							КонецЕсли;
					
							НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦИкла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				СтрокаПунктаПогрузки  = Неопределено;
				СтрокаПунктаРазгрузки = Неопределено;
				
				Если НастройкаРежимДобавленияЗаказовВМаршруты = 0 Тогда // Режим группировки заказов по пунктам.
					СтруктураПоиска = Новый Структура("Группировка", ТекСтрокаЗаказ.АдресОтправленияПредставление);
					НайдСтроки = НайтиСтрокиВПроизвольномДереве(Строка.ПолучитьЭлементы(), СтруктураПоиска);
					Если НайдСтроки.Количество() Тогда 
						СтрокаПунктаПогрузки = НайдСтроки[0];
					КонецЕсли;
					
					Если СтрокаПунктаПогрузки = Неопределено Тогда 
						флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
					Иначе 
						флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
					КонецЕсли;
					
					Для Каждого ТекСтрокаПункта Из Строка.ПолучитьЭлементы() Цикл 
						Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктаПогрузки Тогда 
							флПунктПогрузкиПройден = Истина;
						КонецЕсли;
						
						Если флПунктПогрузкиПройден И ТекСтрокаПункта.Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда 
							СтрокаПунктаРазгрузки = ТекСтрокаПункта;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаПунктаРазгрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если Строка.ПолучитьЭлементы().Количество() 
							И Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1].Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда
						СтрокаПунктаРазгрузки = Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1];
					Иначе
						СтрокаПунктаРазгрузки = Строка.ПолучитьЭлементы().Добавить();
						СтрокаПунктаРазгрузки.Группировка                   = ТекСтрокаЗаказ.АдресНазначенияПредставление;
						СтрокаПунктаРазгрузки.Адрес                         = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Лат                           = ТекСтрокаЗаказ.ЛатНазн;
						СтрокаПунктаРазгрузки.Лон                           = ТекСтрокаЗаказ.ЛонНазн;
						СтрокаПунктаРазгрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаРазгрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте;
						СтрокаПунктаРазгрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ДоставкаС;
						СтрокаПунктаРазгрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ДоставкаПо;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаПунктаПогрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если Строка.ПолучитьЭлементы().Количество() 
							И Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1].Группировка = ТекСтрокаЗаказ.АдресОтправленияПредставление Тогда
						СтрокаПунктаПогрузки = Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1];
					Иначе
						СтрокаПунктаПогрузки = Строка.ПолучитьЭлементы().Вставить(Строка.ПолучитьЭлементы().Индекс(СтрокаПунктаРазгрузки));
						
						// Установка рабочей даты в качестве времени прибытия в первый пункт.
						Если СтрокаПунктаПогрузки = Строка.ПолучитьЭлементы()[0] Тогда
							СтрокаПунктаПогрузки.ВремяПрибытияВПункт = ДатаИВремяНачала;
						КонецЕсли;
						
						СтрокаПунктаПогрузки.Группировка                   = ТекСтрокаЗаказ.АдресОтправленияПредставление;
						СтрокаПунктаПогрузки.Адрес                         = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Лат                           = ТекСтрокаЗаказ.ЛатОтпр;
						СтрокаПунктаПогрузки.Лон                           = ТекСтрокаЗаказ.ЛонОтпр;
						СтрокаПунктаПогрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаПогрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте;
						СтрокаПунктаПогрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ОтправлениеС;
						СтрокаПунктаПогрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ОтправлениеПо;
					КонецЕсли;
				КонецЕсли;
				
				НовСтрокаЗаказ = СтрокаПунктаПогрузки.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Погрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
				
				НовСтрокаЗаказ = СтрокаПунктаРазгрузки.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Разгрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // Тянем на пункт или заказ или номенклатуру.
		СтрокаПунктПриемник = Строка;
		Пока СтрокаПунктПриемник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
			СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
		КонецЦикла;
		
		Строка = СтрокаПунктПриемник.ПолучитьРодителя();
		
		Строка.СоздатьМаршрутныйЛист = Истина;
		Строка.Модифицированность    = Истина;
		
		Для Каждого ТекСтрокаЗаказ Из СтрокиДереваПеретаскиваемыхЗаказов Цикл
			Если ТекСтрокаЗаказ.FTL Тогда
				пПогрузка     = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка  = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				пРазгрузка    = ТипыТочекМаршрута_Разгрузка;
				пДопРазгрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка");

				мсвПромежуточныхПунктов = СоответствиеПромежуточныхПунктов.Получить(ТекСтрокаЗаказ.Ссылка);
				Если мсвПромежуточныхПунктов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				мсвОтрезкиПути = СоответствиеОтрезкиПути.Получить(ТекСтрокаЗаказ.Ссылка);

				КоличествоПунктов       = мсвПромежуточныхПунктов.Количество(); 
				Для Сч = 0 По КоличествоПунктов - 1 Цикл 
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					Если Строка.ПолучитьЭлементы().Количество() И Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество() - 1];
						
					Иначе
						НовСтрокаПункт = Строка.ПолучитьЭлементы().Добавить();
						НовСтрокаПункт.Группировка   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат           = СтрокаПромежуточногоПункта.Лат;
						НовСтрокаПункт.Лон           = СтрокаПромежуточногоПункта.Лон;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат=0 И НовСтрокаПункт.Лон=0, 1, 0);
					КонецЕсли;
					
					Если СтрокаПромежуточногоПункта.Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = СтрокаПромежуточногоПункта.Ожидание;
					КонецЕсли;
					
					НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
					
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута, ТекСтрокаЗаказ, СтрокаПромежуточногоПункта);
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() тогда
						
						флагПогрузка  = Ложь;
						флагРазгрузка = Ложь;
						
						Если СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пПогрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопПогрузка Тогда 
							флагПогрузка = Истина;
							
						ИначеЕсли СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пРазгрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопРазгрузка Тогда 
							флагРазгрузка = Истина;
						Иначе 
							Продолжить;
						КонецЕсли;
						
						Для каждого ТекСтрокаНом ИЗ ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							
							НомерСтрокиГруза = ТекСтрокаНом.НомерСтроки;
							флагГрузАктивен  = Ложь;
							Если НомерСтрокиГруза > 0 Тогда
								флагГрузАктивен = Истина;
								ТекОтрезокПути  = мсвОтрезкиПути[НомерСтрокиГруза - 1];
								Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
									// Груз, которому не назначен отрезок пути
									флагГрузАктивен = Ложь;
								КонецЕсли;
								
								Если НЕ ((флагПогрузка И ТекОтрезокПути.От = Сч + 1)
									ИЛИ (флагРазгрузка И ТекОтрезокПути.До = Сч + 1)) Тогда
									флагГрузАктивен = Ложь;
								КонецЕсли; 
							КонецЕсли;
							
							Если НЕ флагГрузАктивен Тогда 
								Продолжить;
							КонецЕсли;
							
							НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦИкла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				СтрокаПунктаПогрузки  = Неопределено;
				СтрокаПунктаРазгрузки = Неопределено;
				
				Если СтрокаПунктПриемник.Группировка = ТекСтрокаЗаказ.АдресОтправленияПредставление Тогда 
					СтрокаПунктаПогрузки = СтрокаПунктПриемник;
					
					флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
					Для Каждого ТекСтрокаПункта Из Строка.ПолучитьЭлементы() Цикл 
						Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктаПогрузки Тогда 
							флПунктПогрузкиПройден = Истина;
						КонецЕсли;
						
						Если флПунктПогрузкиПройден И ТекСтрокаПункта.Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда 
							СтрокаПунктаРазгрузки = ТекСтрокаПункта;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаПунктПриемник.Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда 
					СтрокаПунктаРазгрузки = СтрокаПунктПриемник;
					
					// Перебираем пункты до разгрузки.
					Для Каждого ТекСтрокаПункта Из Строка.ПолучитьЭлементы() Цикл 
						Если ТекСтрокаПункта.Группировка = ТекСтрокаЗаказ.АдресОтправленияПредставление Тогда 
							СтрокаПунктаПогрузки = ТекСтрокаПункта;
						КонецЕсли;
						
						Если ТекСтрокаПункта = СтрокаПунктаРазгрузки Тогда 
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаПунктаРазгрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если Строка.ПолучитьЭлементы().Количество() 
							И Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1].Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда
						СтрокаПунктаРазгрузки = Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1];
					Иначе
						СтрокаПунктаРазгрузки = Строка.ПолучитьЭлементы().Добавить();
						СтрокаПунктаРазгрузки.Группировка                   = ТекСтрокаЗаказ.АдресНазначенияПредставление;
						СтрокаПунктаРазгрузки.Адрес                         = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Лат                           = ТекСтрокаЗаказ.ЛатНазн;
						СтрокаПунктаРазгрузки.Лон                           = ТекСтрокаЗаказ.ЛонНазн;
						СтрокаПунктаРазгрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаРазгрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте;
						СтрокаПунктаРазгрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ДоставкаС;
						СтрокаПунктаРазгрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ДоставкаПо;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаПунктаПогрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если Строка.ПолучитьЭлементы().Количество() 
							И Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1].Группировка = ТекСтрокаЗаказ.АдресОтправленияПредставление Тогда
						СтрокаПунктаПогрузки = Строка.ПолучитьЭлементы()[Строка.ПолучитьЭлементы().Количество()-1];
					Иначе
						СтрокаПунктаПогрузки = Строка.ПолучитьЭлементы().Вставить(Строка.ПолучитьЭлементы().Индекс(СтрокаПунктаРазгрузки));
						
						СтрокаПунктаПогрузки.Группировка                   = ТекСтрокаЗаказ.АдресОтправленияПредставление;
						СтрокаПунктаПогрузки.Адрес                         = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Лат                           = ТекСтрокаЗаказ.ЛатОтпр;
						СтрокаПунктаПогрузки.Лон                           = ТекСтрокаЗаказ.ЛонОтпр;
						СтрокаПунктаПогрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаПогрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте;
						СтрокаПунктаПогрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ОтправлениеС;
						СтрокаПунктаПогрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ОтправлениеПо;
						
						// Установка рабочей даты в качестве времени прибытия в первый пункт.
						Если СтрокаПунктаПогрузки = Строка.ПолучитьЭлементы()[0] Тогда
							СтрокаПунктаПогрузки.ВремяПрибытияВПункт = ДатаИВремяНачала;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовСтрокаЗаказ = СтрокаПунктаПогрузки.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Погрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
				
				НовСтрокаЗаказ = СтрокаПунктаРазгрузки.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Разгрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.МаршрутыДерево.Развернуть(Строка.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеНаМаршрутыСписок(Строка, СтрокиДереваПеретаскиваемыхЗаказов, ДатаИВремяНачала,
	ПоУказанномуЗаказу, ПеретаскиваниеИзМЛ, мОтмеченныеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов)
	
	// Отправление.
	НовСтрокаПункт = Неопределено;
	
	СоответствиеОтрезкиПути          = Новый Соответствие();
	СоответствиеПромежуточныхПунктов = Новый Соответствие();
	Если мсвFTLЗаказов.Количество() <> 0 Тогда
		СоответствиеПромежуточныхПунктов = ПолучитьПромежуточныеПунктыFTLЗаказов(мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов, СоответствиеОтрезкиПути);
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Строка.МЛ) 
		ИЛИ Строка.НовыйМЛ) Тогда // ТС.
		// Добавляем новый пустой маршрут и пишем в него.
		
		Если (МаршрутыСписокЗаказов.Количество() = 0
			И (ЗначениеЗаполнено(Строка.МЛ) ИЛИ Строка.НовыйМЛ))
			ИЛИ (МаршрутыСписокЗаказов.Количество() <> 0
			И МаршрутыСписокЗаказов[0].GUIDТС <> Строка.GUID) Тогда
			ПолучитьИзВременногоХранилищаТаблицуМаршрутов();
		КонецЕсли;
		
		НовСтрокаМЛ                       = Строка;
		НовСтрокаМЛ.НовыйМЛ               = Истина;
		НовСтрокаМЛ.СоздатьМаршрутныйЛист = Истина;
		НовСтрокаМЛ.Прицеп1               = Строка.Прицеп1;
		НовСтрокаМЛ.Прицеп2               = Строка.Прицеп2;
		НовСтрокаМЛ.Модифицированность    = Истина;
		НовСтрокаМЛ.ПересчетВремени       = СпособПересчетаПлановогоВремениПоУмолчанию;
		НовСтрокаМЛ.АдресВременногоХранилища = "";

		Для Каждого ТекСтрокаЗаказ Из СтрокиДереваПеретаскиваемыхЗаказов Цикл
			Если ТекСтрокаЗаказ.FTL Тогда 
				пПогрузка     = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка  = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				пРазгрузка    = ТипыТочекМаршрута_Разгрузка;
				пДопРазгрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка");

				мсвПромежуточныхПунктов = СоответствиеПромежуточныхПунктов.Получить(ТекСтрокаЗаказ.Ссылка);
				Если мсвПромежуточныхПунктов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				мсвОтрезкиПути = СоответствиеОтрезкиПути.Получить(ТекСтрокаЗаказ.Ссылка);
				КоличествоПунктов = мсвПромежуточныхПунктов.Количество();

				Для Сч = 0 По КоличествоПунктов - 1 Цикл 
					
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
					Если ЭлементыВеткаПункты.Количество()
						И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
						
					Иначе
						НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаПункт.GUIDТС                        = НовСтрокаМЛ.GUID;
						НовСтрокаПункт.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						НовСтрокаПункт.Группировка                   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес                         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат                           = СтрокаПромежуточногоПункта.Лат;
						НовСтрокаПункт.Лон                           = СтрокаПромежуточногоПункта.Лон;
						НовСтрокаПункт.УровеньДерева                 = "Пункт";
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат = 0 И НовСтрокаПункт.Лон = 0, 1, 0);
						НовСтрокаПункт.ВремяПрибытияВПункт           = СтрокаПромежуточногоПункта.ПрибытиеПлан;
					КонецЕсли;
					
					Если СтрокаПромежуточногоПункта.Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = СтрокаПромежуточногоПункта.Ожидание;
					КонецЕсли;
					
					НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
					НовСтрокаЗаказ.GUIDТС      = НовСтрокаМЛ.GUID;
					НовСтрокаЗаказ.GUIDПункта  = НовСтрокаПункт.GUIDПункта;
					НовСтрокаЗаказ.GUIDЗаказа  = Строка(Новый УникальныйИдентификатор);
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута,
						ТекСтрокаЗаказ, СтрокаПромежуточногоПункта);
						
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
							
						флагПогрузка  = Ложь;
						флагРазгрузка = Ложь;
						
						Если СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пПогрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопПогрузка Тогда 
							флагПогрузка = Истина;
							
						ИначеЕсли СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пРазгрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопРазгрузка Тогда 
							флагРазгрузка = Истина;
						Иначе 
							Продолжить;
						КонецЕсли;
					
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							
							НомерСтрокиГруза = ТекСтрокаНом.НомерСтроки;
							флагГрузАктивен  = Ложь;
							Если НомерСтрокиГруза > 0 Тогда
								флагГрузАктивен = Истина;
								ТекОтрезокПути  = мсвОтрезкиПути[НомерСтрокиГруза - 1];
								Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
									// Груз, которому не назначен отрезок пути
									флагГрузАктивен = Ложь;
								КонецЕсли;
								
								Если НЕ ((флагПогрузка И ТекОтрезокПути.От = Сч + 1)
									ИЛИ (флагРазгрузка И ТекОтрезокПути.До = Сч + 1)) Тогда
									флагГрузАктивен = Ложь;
								КонецЕсли; 
							КонецЕсли;
							
							Если НЕ флагГрузАктивен Тогда 
								Продолжить;
							КонецЕсли;
					
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаНом.GUIDТС      = НовСтрокаМЛ.GUID;
							НовСтрокаНом.GUIDПункта  = НовСтрокаПункт.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа  = НовСтрокаЗаказ.GUIDЗаказа;
							НовСтрокаНом.Этап        = НовСтрокаЗаказ.Этап;
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				СтрокаПунктаПогрузки  = Неопределено;
				СтрокаПунктаРазгрузки = Неопределено;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
				
				Если НастройкаРежимДобавленияЗаказовВМаршруты = 0 Тогда // Режим группировки заказов по пунктам.
					СтруктураПоиска = Новый Структура("Группировка", ТекСтрокаЗаказ.АдресОтправления);
					НайдСтроки = НайтиСтрокиВПроизвольномДереве(ЭлементыВеткаПункты, СтруктураПоиска);
					Если НайдСтроки.Количество() Тогда 
						СтрокаПунктаПогрузки = НайдСтроки[0];
					КонецЕсли;
					
					Если СтрокаПунктаПогрузки = Неопределено Тогда 
						флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
					Иначе 
						флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
					КонецЕсли;
					
					Для Каждого ТекСтрокаПункта Из ЭлементыВеткаПункты Цикл 
						Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктаПогрузки Тогда 
							флПунктПогрузкиПройден = Истина;
						КонецЕсли;
						
						Если флПунктПогрузкиПройден И ТекСтрокаПункта.Группировка = ТекСтрокаЗаказ.АдресНазначения Тогда 
							СтрокаПунктаРазгрузки = ТекСтрокаПункта;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаПунктаРазгрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если ЭлементыВеткаПункты.Количество() 
							И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1].Группировка = ТекСтрокаЗаказ.АдресНазначения Тогда
						СтрокаПунктаРазгрузки = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1];
					Иначе
						СтрокаПунктаРазгрузки = МаршрутыСписокЗаказов.Добавить();
						СтрокаПунктаРазгрузки.GUIDТС                        = НовСтрокаМЛ.GUID;
						СтрокаПунктаРазгрузки.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						СтрокаПунктаРазгрузки.Группировка                   = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Адрес                         = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Лат                           = ТекСтрокаЗаказ.ЛатНазн;
						СтрокаПунктаРазгрузки.Лон                           = ТекСтрокаЗаказ.ЛонНазн;
						СтрокаПунктаРазгрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаРазгрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте;
						СтрокаПунктаРазгрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ДоставкаС;
						СтрокаПунктаРазгрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ДоставкаПо;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
				
				Если СтрокаПунктаПогрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если ЭлементыВеткаПункты.Количество() 
							И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = ТекСтрокаЗаказ.АдресОтправления Тогда
						СтрокаПунктаПогрузки = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1];
					Иначе
						СтрокаПунктаПогрузки = МаршрутыСписокЗаказов.Вставить(МаршрутыСписокЗаказов.Индекс(СтрокаПунктаРазгрузки));
						СтрокаПунктаПогрузки.GUIDТС                        = НовСтрокаМЛ.GUID;
						СтрокаПунктаПогрузки.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						СтрокаПунктаПогрузки.Группировка                   = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Адрес                         = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Лат                           = ТекСтрокаЗаказ.ЛатОтпр;
						СтрокаПунктаПогрузки.Лон                           = ТекСтрокаЗаказ.ЛонОтпр;
						СтрокаПунктаПогрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаПогрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте;
						СтрокаПунктаПогрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ОтправлениеС;
						СтрокаПунктаПогрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ОтправлениеПо;
						
						// Установка рабочей даты в качестве времени прибытия в первый пункт.
						ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
						Если СтрокаПунктаПогрузки = ЭлементыВеткаПункты[0] Тогда
							СтрокаПунктаПогрузки.ВремяПрибытияВПункт = ДатаИВремяНачала;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
				НовСтрокаЗаказ.GUIDТС      = НовСтрокаМЛ.GUID;
				НовСтрокаЗаказ.GUIDПункта  = СтрокаПунктаПогрузки.GUIDПункта;
				НовСтрокаЗаказ.GUIDЗаказа  = Строка(Новый УникальныйИдентификатор);
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Погрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаНом.GUIDТС      = НовСтрокаМЛ.GUID;
						НовСтрокаНом.GUIDПункта  = СтрокаПунктаПогрузки.GUIDПункта;
						НовСтрокаНом.GUIDЗаказа  = НовСтрокаЗаказ.GUIDЗаказа;
						НовСтрокаНом.Этап        = НовСтрокаЗаказ.Этап;
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
				
				НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
				НовСтрокаЗаказ.GUIDТС      = НовСтрокаМЛ.GUID;
				НовСтрокаЗаказ.GUIDПункта  = СтрокаПунктаРазгрузки.GUIDПункта;
				НовСтрокаЗаказ.GUIDЗаказа  = Строка(Новый УникальныйИдентификатор);
				ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Разгрузка, ТекСтрокаЗаказ);
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
						НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаНом.GUIDТС      = НовСтрокаМЛ.GUID;
						НовСтрокаНом.GUIDПункта  = СтрокаПунктаРазгрузки.GUIDПункта;
						НовСтрокаНом.GUIDЗаказа  = НовСтрокаЗаказ.GUIDЗаказа;
						НовСтрокаНом.Этап        = НовСтрокаЗаказ.Этап;
						ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.Маршрут) Тогда
				НовСтрокаМЛ.Маршрут = ТекСтрокаЗаказ.Маршрут;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.ОбъектСтроительства) Тогда
				НовСтрокаМЛ.ОбъектСтроительства = ТекСтрокаЗаказ.ОбъектСтроительства;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.ВидПеревозки) Тогда
				НовСтрокаМЛ.ВидПеревозки = ТекСтрокаЗаказ.ВидПеревозки;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовСтрокаМЛ.НаправлениеПеревозки) Тогда
				НовСтрокаМЛ.НаправлениеПеревозки = ТекСтрокаЗаказ.НаправлениеПеревозки;
			КонецЕсли;
		КонецЦикла;
		СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	Иначе // МЛ.
		
		Если (МаршрутыСписокЗаказов.Количество() = 0
			И (ЗначениеЗаполнено(Строка.МЛ) ИЛИ Строка.НовыйМЛ))
			ИЛИ (МаршрутыСписокЗаказов.Количество() <> 0
			И МаршрутыСписокЗаказов[0].GUIDТС <> Строка.GUID) Тогда
			ПолучитьИзВременногоХранилищаТаблицуМаршрутов(Строка.АдресВременногоХранилища, Строка.GUID);
		КонецЕсли;

		Строка.СоздатьМаршрутныйЛист = Истина;
		Строка.Модифицированность    = Истина;
		
		Для Каждого ТекСтрокаЗаказ Из СтрокиДереваПеретаскиваемыхЗаказов Цикл
			Если ТекСтрокаЗаказ.FTL Тогда
				пПогрузка     = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка  = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				пРазгрузка    = ТипыТочекМаршрута_Разгрузка;
				пДопРазгрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка");

				мсвПромежуточныхПунктов = СоответствиеПромежуточныхПунктов.Получить(ТекСтрокаЗаказ.Ссылка);
				Если мсвПромежуточныхПунктов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				мсвОтрезкиПути = СоответствиеОтрезкиПути.Получить(ТекСтрокаЗаказ.Ссылка);
				КоличествоПунктов = мсвПромежуточныхПунктов.Количество();
				
				Для Сч = 0 По КоличествоПунктов - 1 Цикл 
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", Строка.GUID, "Пункт"));
					
					Если ЭлементыВеткаПункты.Количество() И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
					Иначе
						НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаПункт.GUIDТС        = Строка.GUID;
						НовСтрокаПункт.GUIDПункта    = Строка(Новый УникальныйИдентификатор);
						НовСтрокаПункт.Группировка   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат           = СтрокаПромежуточногоПункта.Лат;
						НовСтрокаПункт.Лон           = СтрокаПромежуточногоПункта.Лон;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат = 0 И НовСтрокаПункт.Лон=0, 1, 0);
						
					КонецЕсли;
					
					Если СтрокаПромежуточногоПункта.Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = СтрокаПромежуточногоПункта.Ожидание;
					КонецЕсли;
					
					НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
					НовСтрокаЗаказ.GUIDТС                        = Строка.GUID;
					НовСтрокаЗаказ.GUIDПункта                    = НовСтрокаПункт.GUIDПункта;
					НовСтрокаЗаказ.GUIDЗаказа                    = Строка(Новый УникальныйИдентификатор);
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута, ТекСтрокаЗаказ, СтрокаПромежуточногоПункта);
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
						
						флагПогрузка  = Ложь;
						флагРазгрузка = Ложь;
						
						Если СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пПогрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопПогрузка Тогда 
							флагПогрузка = Истина;
							
						ИначеЕсли СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пРазгрузка
							ИЛИ СтрокаПромежуточногоПункта.ТипТочкиМаршрута = пДопРазгрузка Тогда 
							флагРазгрузка = Истина;
						Иначе 
							Продолжить;
						КонецЕсли;
						
						Для каждого ТекСтрокаНом ИЗ ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							
							НомерСтрокиГруза = ТекСтрокаНом.НомерСтроки;
							флагГрузАктивен  = Ложь;
							Если НомерСтрокиГруза > 0 Тогда
								флагГрузАктивен = Истина;
								ТекОтрезокПути  = мсвОтрезкиПути[НомерСтрокиГруза - 1];
								Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
									// Груз, которому не назначен отрезок пути
									флагГрузАктивен = Ложь;
								КонецЕсли;
								
								Если НЕ ((флагПогрузка И ТекОтрезокПути.От = Сч + 1)
									ИЛИ (флагРазгрузка И ТекОтрезокПути.До = Сч + 1)) Тогда
									флагГрузАктивен = Ложь;
								КонецЕсли; 
							КонецЕсли;
							
							Если НЕ флагГрузАктивен Тогда 
								Продолжить;
							КонецЕсли;
							
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаНом.GUIDТС                        = Строка.GUID;
							НовСтрокаНом.GUIDПункта                    = НовСтрокаПункт.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа                    = НовСтрокаЗаказ.GUIDПункта;
							НовСтрокаНом.Этап                          = НовСтрокаЗаказ.Этап;
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦИкла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				СтрокаПунктаПогрузки  = Неопределено;
				СтрокаПунктаРазгрузки = Неопределено;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", Строка.GUID, "Пункт"));
				Если НастройкаРежимДобавленияЗаказовВМаршруты = 0 Тогда // Режим группировки заказов по пунктам.
					СтруктураПоиска = Новый Структура("Группировка", ТекСтрокаЗаказ.АдресОтправления);
					
					НайдСтроки = НайтиСтрокиВПроизвольномДереве(ЭлементыВеткаПункты, СтруктураПоиска);
					Если НайдСтроки.Количество() Тогда 
						СтрокаПунктаПогрузки = НайдСтроки[0];
					КонецЕсли;
					
					Если СтрокаПунктаПогрузки = Неопределено Тогда 
						флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
					Иначе 
						флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
					КонецЕсли;
					
					Для Каждого ТекСтрокаПункта Из ЭлементыВеткаПункты Цикл 
						Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктаПогрузки Тогда 
							флПунктПогрузкиПройден = Истина;
						КонецЕсли;
						
						Если флПунктПогрузкиПройден И ТекСтрокаПункта.Группировка = ТекСтрокаЗаказ.АдресНазначения Тогда 
							СтрокаПунктаРазгрузки = ТекСтрокаПункта;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаПунктаРазгрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если ЭлементыВеткаПункты.Количество() 
							И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1].Группировка = ТекСтрокаЗаказ.АдресНазначенияПредставление Тогда
						СтрокаПунктаРазгрузки = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1];
					Иначе
						СтрокаПунктаРазгрузки = МаршрутыСписокЗаказов.Добавить();
						СтрокаПунктаРазгрузки.GUIDТС                        = Строка.GUID;
						СтрокаПунктаРазгрузки.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						СтрокаПунктаРазгрузки.Группировка                   = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Адрес                         = ТекСтрокаЗаказ.АдресНазначения;
						СтрокаПунктаРазгрузки.Лат                           = ТекСтрокаЗаказ.ЛатНазн;
						СтрокаПунктаРазгрузки.Лон                           = ТекСтрокаЗаказ.ЛонНазн;
						СтрокаПунктаРазгрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаРазгрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте;
						СтрокаПунктаРазгрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ДоставкаС;
						СтрокаПунктаРазгрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ДоставкаПо;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", Строка.GUID, "Пункт"));
				
				Если СтрокаПунктаПогрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
					Если ЭлементыВеткаПункты.Количество() 
							И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1].Группировка = ТекСтрокаЗаказ.АдресОтправления Тогда
						СтрокаПунктаПогрузки = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество()-1];
					Иначе
						СтрокаПунктаПогрузки = МаршрутыСписокЗаказов.Вставить(МаршрутыСписокЗаказов.Индекс(СтрокаПунктаРазгрузки));
						СтрокаПунктаПогрузки.GUIDТС                        = Строка.GUID;
						СтрокаПунктаПогрузки.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						// Установка рабочей даты в качестве времени прибытия в первый пункт.
						
						ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", Строка.GUID, "Пункт"));
						Если СтрокаПунктаПогрузки = ЭлементыВеткаПункты[0] Тогда
							СтрокаПунктаПогрузки.ВремяПрибытияВПункт = ДатаИВремяНачала;
						КонецЕсли;
						
						СтрокаПунктаПогрузки.Группировка                   = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Адрес                         = ТекСтрокаЗаказ.АдресОтправления;
						СтрокаПунктаПогрузки.Лат                           = ТекСтрокаЗаказ.ЛатОтпр;
						СтрокаПунктаПогрузки.Лон                           = ТекСтрокаЗаказ.ЛонОтпр;
						СтрокаПунктаПогрузки.УровеньДерева                 = "Пункт";
						СтрокаПунктаПогрузки.АдресГруппировкаУказанНаКарте = ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте;
						СтрокаПунктаПогрузки.ВремяПрибытияВПункт           = ТекСтрокаЗаказ.ОтправлениеС;
						СтрокаПунктаПогрузки.УбытиеПлан                    = ТекСтрокаЗаказ.ОтправлениеПо;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС,GUIDПункта,Этап,УровеньДерева",
				Строка.GUID, СтрокаПунктаПогрузки.GUIDПункта, ТекСтрокаЗаказ.Ссылка, "Заказ"));
				Если ЭлементыВеткаЗаказ.Количество() Тогда
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаНом.GUIDТС                        = Строка.GUID;
							НовСтрокаНом.GUIDПункта                    = СтрокаПунктаПогрузки.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа                    = ЭлементыВеткаЗаказ[0].GUIDЗаказа;
							НовСтрокаНом.Этап                          = ТекСтрокаЗаказ.Ссылка;
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦикла;
					КонецЕсли;
				Иначе
					НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
					НовСтрокаЗаказ.GUIDТС                        = Строка.GUID;
					НовСтрокаЗаказ.GUIDПункта                    = СтрокаПунктаПогрузки.GUIDПункта;
					НовСтрокаЗаказ.GUIDЗаказа                    = Строка(Новый УникальныйИдентификатор);
					
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Погрузка, ТекСтрокаЗаказ);
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаНом.GUIDТС                        = Строка.GUID;
							НовСтрокаНом.GUIDПункта                    = СтрокаПунктаПогрузки.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа                    = НовСтрокаЗаказ.GUIDЗаказа;
							НовСтрокаНом.Этап                          = НовСтрокаЗаказ.Этап;
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС,GUIDПункта,Этап,УровеньДерева",
				Строка.GUID, СтрокаПунктаРазгрузки.GUIDПункта, ТекСтрокаЗаказ.Ссылка, "Заказ"));
				Если ЭлементыВеткаЗаказ.Количество() Тогда
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаНом.GUIDТС                        = Строка.GUID;
							НовСтрокаНом.GUIDПункта                    = СтрокаПунктаРазгрузки.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа                    = ЭлементыВеткаЗаказ[0].GUIDЗаказа;
							НовСтрокаНом.Этап                          = ТекСтрокаЗаказ.Ссылка;
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦикла;
					КонецЕсли;
				Иначе
					НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
					НовСтрокаЗаказ.GUIDТС                        = Строка.GUID;
					НовСтрокаЗаказ.GUIDПункта                    = СтрокаПунктаРазгрузки.GUIDПункта;
					НовСтрокаЗаказ.GUIDЗаказа                    = Строка(Новый УникальныйИдентификатор);
					
					ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, ТекСтрокаЗаказ.Ссылка, ТипыТочекМаршрута_Разгрузка, ТекСтрокаЗаказ);
					Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
						Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаНом.GUIDТС                        = Строка.GUID;
							НовСтрокаНом.GUIDПункта                    = СтрокаПунктаРазгрузки.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа                    = НовСтрокаЗаказ.GUIDЗаказа;
							НовСтрокаНом.Этап                          = НовСтрокаЗаказ.Этап;
							ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуНоменклатурыВМаршрутахИзЗаказов(НовСтрокаНом, ТекСтрокаНом)
	ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
	Если ТекСтрокаНом.Свойство("Номенклатура") Тогда 
		НовСтрокаНом.Группировка = ТекСтрокаНом.Номенклатура;
	КонецЕсли;
	НовСтрокаНом.УровеньДерева = "Номенклатура";
	НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВременныеХарактеристикиМашрута(СтрокаДляОбновления=Неопределено, ПроверкаНастройки = Истина)
	
	Если НЕ НастройкаАвтоматическийПересчетВремениИРасстояния 
		И ПроверкаНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьВременныеХарактеристикиМашрутаДерево(СтрокаДляОбновления);
	Иначе
		ОбновитьВременныеХарактеристикиМашрутаСписок(СтрокаДляОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВременныеХарактеристикиМашрутаДерево(СтрокаДляОбновления = Неопределено)
	
	МассивПунктов = Новый Массив();
	Если СтрокаДляОбновления = Неопределено Тогда 
		Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Если Не ТекСтрокаТС.ПолучитьЭлементы().Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл
				КоличествоПунктов = ТекСтрокаМЛ.ПолучитьЭлементы().Количество();
				Если КоличествоПунктов < 2 Тогда
					Продолжить;
				КонецЕсли;
				
				Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
					Пункт1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта];
					ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
					Пункт1 = Пункт1.Адрес;
					Лат1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].Лат;
					Лон1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].Лон;
					Пункт2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Адрес;
					Лат2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Лат;
					Лон2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Лон;
					
					Если ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы().Количество()
							И ЗначениеРеквизитаОбъекта(ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы()[0].Этап, "FTL") Тогда 
						мЗаказ = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы()[0].Этап;
					Иначе 
						мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
					КонецЕсли;
					
					МассивПунктов.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Заказ, ", 
						Пункт1, Лат1, Лон1, 
						Пункт2, Лат2, Лон2,
						ИдентификаторСтрокиПункта,
						'00010101' + (ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ВремяПрибытияВПункт - НачалоДня(ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ВремяПрибытияВПункт)),
						мЗаказ));
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли СтрокаДляОбновления.УровеньДерева = "ТС" Тогда 
		Для Каждого ТекСтрокаМЛ Из СтрокаДляОбновления.ПолучитьЭлементы() Цикл
			КоличествоПунктов = ТекСтрокаМЛ.ПолучитьЭлементы().Количество();
			Если КоличествоПунктов < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
				Пункт1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта];
				ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
				Пункт1 = Пункт1.Адрес;
				Лат1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].Лат;
				Лон1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].Лон;
				Пункт2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Адрес;
				Лат2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Лат;
				Лон2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Лон;
				
				ТекСтрокаЗаказа = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы();
				
				Если ТекСтрокаЗаказа.Количество()
						И ТекСтрокаЗаказа[0].FTL Тогда 
					мЗаказ = ТекСтрокаЗаказа[0].Этап;
				Иначе 
					мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
				КонецЕсли;
				
				МассивПунктов.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Заказ", 
					Пункт1, Лат1, Лон1, 
					Пункт2, Лат2, Лон2,
					ИдентификаторСтрокиПункта,
					'00010101' + (ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ВремяПрибытияВПункт - НачалоДня(ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ВремяПрибытияВПункт)),
					мЗаказ));
			КонецЦикла;
		КонецЦикла;
		
	Иначе 
		ТекСтрокаМЛ = СтрокаДляОбновления;
		Если Не ТекСтрокаМЛ.ПолучитьРодителя() = Неопределено Тогда 
			Пока ТекСтрокаМЛ.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				ТекСтрокаМЛ = ТекСтрокаМЛ.ПолучитьРодителя();
			КонецЦикла;
			
			КоличествоПунктов = ТекСтрокаМЛ.ПолучитьЭлементы().Количество();
			Если КоличествоПунктов > 1 Тогда
				Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
					Пункт1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта];
					ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
					Пункт1 = Пункт1.Адрес;
					Лат1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].Лат;
					Лон1 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].Лон;
					Пункт2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Адрес;
					Лат2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Лат;
					Лон2 = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта+1].Лон;
					
					Если ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы().Количество()
							И ЗначениеРеквизитаОбъекта(ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы()[0].Этап, "FTL") Тогда 
						мЗаказ = ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ПолучитьЭлементы()[0].Этап;
					Иначе 
						мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
					КонецЕсли;
					
					МассивПунктов.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Заказ", 
						Пункт1, Лат1, Лон1, 
						Пункт2, Лат2, Лон2,
						ИдентификаторСтрокиПункта,
						'00010101' + (ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ВремяПрибытияВПункт - НачалоДня(ТекСтрокаМЛ.ПолучитьЭлементы()[ИндексПункта].ВремяПрибытияВПункт)),
						мЗаказ));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивПунктов.Количество() Тогда
		мсвПунктыДляЗапроса = Новый Массив();
		мсвПунктыПоКэшу     = Новый Массив();
		
		ТекстНСТР = НСтр("en='Receiving of destinations by routing lists';ru='Получение пунктов назначения по маршрутным листам'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		Для Каждого ТекПараПунктов Из МассивПунктов Цикл 
			НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2,ТекПараПунктов.Заказ));
			Если НайдСтроки.Количество() Тогда 
				стрДанныеПункта = Новый Структура();
				стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
				стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
				стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
				стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
				стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
				мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
			Иначе 
				НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1,ТекПараПунктов.Заказ));
				Если НайдСтроки.Количество() Тогда 
					стрДанныеПункта = Новый Структура();
					стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
					стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
					стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
					стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
					стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
					мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
				Иначе 
					НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2));
					Если НайдСтроки.Количество() Тогда 
						стрДанныеПункта = Новый Структура();
						стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
						стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
						стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
						стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
						стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
						мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
					Иначе 
						НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1));
						Если НайдСтроки.Количество() Тогда 
							стрДанныеПункта = Новый Структура();
							стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
							стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
							стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
							стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
							стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
							мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
						Иначе 
							мсвПунктыДляЗапроса.Добавить(ТекПараПунктов);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекстНСТР = НСтр("en='Receiving time and distance between points in routing lists';ru='Получение времени и расстояния между пунктами в маршрутных листах'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		Если мсвПунктыДляЗапроса.Количество() Тогда 
			ПолучитьТаблицуРасстоянийМеждуПунктами(мсвПунктыДляЗапроса, МаршрутыДерево);
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='Filling of time and distance between points in routing lists';ru='Заполнение времени и расстояния между пунктами в маршрутных листах'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыПоКэшу Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыДерево.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			Если ТекИндекс.РучнойВвод Тогда 
				ВыбраннаяСтрока.ВремяВПути = ТекИндекс.Время;
			Иначе 
				ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
					ТекИндекс.Расстояние, 
					ТекИндекс.Время, 
					ВыбраннаяСтрока.ВремяПрибытияВПункт,
					кэшСредняяСкоростьДвижения
				);
			КонецЕсли;
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
		КонецЦикла;
		
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыДляЗапроса Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыДерево.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
				ТекИндекс.Расстояние, 
				ТекИндекс.Время, 
				ВыбраннаяСтрока.ВремяПрибытияВПункт,
				кэшСредняяСкоростьДвижения
			);
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
			
			НовСтрЗаписиВКэш = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрЗаписиВКэш.Пункт1     = ТекИндекс.Пункт1;
			НовСтрЗаписиВКэш.Пункт2     = ТекИндекс.Пункт2;
			НовСтрЗаписиВКэш.Время      = ТекИндекс.Время;
			НовСтрЗаписиВКэш.Расстояние = ТекИндекс.Расстояние;
			НовСтрЗаписиВКэш.Заказ      = ТекИндекс.Заказ;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		ВсегоВремяТС = 0;
		ВсегоРасстТС = 0;
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
			ВсегоВремяМЛ = 0;
			ВсегоРасстМЛ = 0;
			Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл 
				ВсегоВремяМЛ = СложитьВремя(ВсегоВремяМЛ, ТекПункт.ВремяВПути);
				ВсегоРасстМЛ = ВсегоРасстМЛ + ТекПункт.Расстояние;
			КонецЦикла;
			ТекМЛ.ВремяВПути = ВсегоВремяМЛ;
			ТекМЛ.Расстояние = ВсегоРасстМЛ;
			ВсегоВремяТС = СложитьВремя(ВсегоВремяТС, ВсегоВремяМЛ);
			ВсегоРасстТС = ВсегоРасстТС + ВсегоРасстМЛ;
		КонецЦикла;
		ТекТС.ВремяВПути = ВсегоВремяТС;
		ТекТС.Расстояние = ВсегоРасстТС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВременныеХарактеристикиМашрутаСписок(СтрокаДляОбновления = Неопределено)
	
	МассивПунктов = Новый Массив();
	Если СтрокаДляОбновления = Неопределено Тогда 
		Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
			Если ЗначениеЗаполнено(ТекСтрокаТС.МЛ)
				ИЛИ ТекСтрокаТС.НовыйМЛ Тогда
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекСтрокаТС.GUID, "Пункт"));
				КоличествоПунктов   = ЭлементыВеткаПункты.Количество();
				Если КоличествоПунктов < 2 Тогда
					Продолжить;
				КонецЕсли;
				
				Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
					Пункт1 = ЭлементыВеткаПункты[ИндексПункта];
					ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
					Пункт1 = Пункт1.Адрес;
					Лат1 = ЭлементыВеткаПункты[ИндексПункта].Лат;
					Лон1 = ЭлементыВеткаПункты[ИндексПункта].Лон;
					Пункт2 = ЭлементыВеткаПункты[ИндексПункта+1].Адрес;
					Лат2 = ЭлементыВеткаПункты[ИндексПункта+1].Лат;
					Лон2 = ЭлементыВеткаПункты[ИндексПункта+1].Лон;
					
					ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
						ТекСтрокаТС.GUID, ЭлементыВеткаПункты[ИндексПункта].GUIDПункта, "Заказ"));
					Если ЭлементыВеткаЗаказ.Количество()
							И ЭлементыВеткаЗаказ[0].FTL Тогда 
						мЗаказ = ЭлементыВеткаЗаказ[0].Этап;
					Иначе 
						мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
					КонецЕсли;
					
					МассивПунктов.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Заказ, ", 
						Пункт1, Лат1, Лон1, 
						Пункт2, Лат2, Лон2,
						ИдентификаторСтрокиПункта,
						'00010101' + (ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт - НачалоДня(ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт)),
						мЗаказ));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		ТекСтрокаМЛ = СтрокаДляОбновления;
		ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекСтрокаМЛ.GUID, "Пункт"));
		
		КоличествоПунктов = ЭлементыВеткаПункты.Количество();
		Если КоличествоПунктов > 1 Тогда
			Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
				Пункт1 = ЭлементыВеткаПункты[ИндексПункта];
				ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
				Пункт1 = Пункт1.Адрес;
				Лат1 = ЭлементыВеткаПункты[ИндексПункта].Лат;
				Лон1 = ЭлементыВеткаПункты[ИндексПункта].Лон;
				Пункт2 = ЭлементыВеткаПункты[ИндексПункта+1].Адрес;
				Лат2 = ЭлементыВеткаПункты[ИндексПункта+1].Лат;
				Лон2 = ЭлементыВеткаПункты[ИндексПункта+1].Лон;
				
				ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
					ТекСтрокаМЛ.GUID, ЭлементыВеткаПункты[ИндексПункта].GUIDПункта, "Заказ"));
				Если ЭлементыВеткаЗаказ.Количество()
					И ЭлементыВеткаЗаказ[0].FTL Тогда 
					мЗаказ = ЭлементыВеткаЗаказ[0].Этап;
				Иначе 
					мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
				КонецЕсли;
				
				МассивПунктов.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Заказ", 
				Пункт1, Лат1, Лон1, 
				Пункт2, Лат2, Лон2,
				ИдентификаторСтрокиПункта,
				'00010101' + (ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт - НачалоДня(ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт)),
				мЗаказ));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивПунктов.Количество() Тогда
		мсвПунктыДляЗапроса = Новый Массив();
		мсвПунктыПоКэшу     = Новый Массив();
		
		ТекстНСТР = НСтр("en='Receiving of destinations by routing lists';ru='Получение пунктов назначения по маршрутным листам'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		Для Каждого ТекПараПунктов Из МассивПунктов Цикл 
			НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2,ТекПараПунктов.Заказ));
			Если НайдСтроки.Количество() Тогда 
				стрДанныеПункта = Новый Структура();
				стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
				стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
				стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
				стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
				стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
				мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
			Иначе 
				НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1,ТекПараПунктов.Заказ));
				Если НайдСтроки.Количество() Тогда 
					стрДанныеПункта = Новый Структура();
					стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
					стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
					стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
					стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
					стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
					мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
				Иначе 
					НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2));
					Если НайдСтроки.Количество() Тогда 
						стрДанныеПункта = Новый Структура();
						стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
						стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
						стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
						стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
						стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
						мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
					Иначе 
						НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1));
						Если НайдСтроки.Количество() Тогда 
							стрДанныеПункта = Новый Структура();
							стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
							стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
							стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
							стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
							стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
							мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
						Иначе 
							мсвПунктыДляЗапроса.Добавить(ТекПараПунктов);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекстНСТР = НСтр("en='Receiving time and distance between points in routing lists';ru='Получение времени и расстояния между пунктами в маршрутных листах'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		Если мсвПунктыДляЗапроса.Количество() Тогда 
			ПолучитьТаблицуРасстоянийМеждуПунктамиСписок(мсвПунктыДляЗапроса, МаршрутыСписокЗаказов);
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='Filling of time and distance between points in routing lists';ru='Заполнение времени и расстояния между пунктами в маршрутных листах'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыПоКэшу Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыСписокЗаказов.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			Если ТекИндекс.РучнойВвод Тогда 
				ВыбраннаяСтрока.ВремяВПути = ТекИндекс.Время;
			Иначе 
				ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
					ТекИндекс.Расстояние, 
					ТекИндекс.Время, 
					ВыбраннаяСтрока.ВремяПрибытияВПункт,
					кэшСредняяСкоростьДвижения
				);
			КонецЕсли;
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
		КонецЦикла;
		
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыДляЗапроса Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыСписокЗаказов.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
				ТекИндекс.Расстояние, 
				ТекИндекс.Время, 
				ВыбраннаяСтрока.ВремяПрибытияВПункт,
				кэшСредняяСкоростьДвижения
			);
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
			
			НовСтрЗаписиВКэш = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрЗаписиВКэш.Пункт1     = ТекИндекс.Пункт1;
			НовСтрЗаписиВКэш.Пункт2     = ТекИндекс.Пункт2;
			НовСтрЗаписиВКэш.Время      = ТекИндекс.Время;
			НовСтрЗаписиВКэш.Расстояние = ТекИндекс.Расстояние;
			НовСтрЗаписиВКэш.Заказ      = ТекИндекс.Заказ;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаДляОбновления = Неопределено Тогда
		Для Каждого ТекТС Из МаршрутыСписок Цикл 
			ВсегоВремяТС = 0;
			ВсегоРасстТС = 0;
			Если ЗначениеЗаполнено(ТекТС.МЛ)
				ИЛИ ТекТС.НовыйМЛ Тогда
				ВсегоВремяМЛ = 0;
				ВсегоРасстМЛ = 0;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
				Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл 
					ВсегоВремяМЛ = СложитьВремя(ВсегоВремяМЛ, ТекПункт.ВремяВПути);
					ВсегоРасстМЛ = ВсегоРасстМЛ + ТекПункт.Расстояние;
				КонецЦикла;
				ТекТС.ВремяВПути = ВсегоВремяМЛ;
				ТекТС.Расстояние = ВсегоРасстМЛ;
				ВсегоВремяТС = СложитьВремя(ВсегоВремяТС, ВсегоВремяМЛ);
				ВсегоРасстТС = ВсегоРасстТС + ВсегоРасстМЛ;
			КонецЕсли;
			ТекТС.ВремяВПути = ВсегоВремяТС;
			ТекТС.Расстояние = ВсегоРасстТС;
		КонецЦикла;
	Иначе
		ЭлементыВеткаТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТекСтрокаМЛ.GUID));
		Для Каждого ТекТС Из ЭлементыВеткаТС Цикл 
			ВсегоВремяТС = 0;
			ВсегоРасстТС = 0;
			Если ЗначениеЗаполнено(ТекТС.МЛ)
				ИЛИ ТекТС.НовыйМЛ Тогда
				ВсегоВремяМЛ = 0;
				ВсегоРасстМЛ = 0;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
				Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл 
					ВсегоВремяМЛ = СложитьВремя(ВсегоВремяМЛ, ТекПункт.ВремяВПути);
					ВсегоРасстМЛ = ВсегоРасстМЛ + ТекПункт.Расстояние;
				КонецЦикла;
				ТекТС.ВремяВПути = ВсегоВремяМЛ;
				ТекТС.Расстояние = ВсегоРасстМЛ;
				ВсегоВремяТС = СложитьВремя(ВсегоВремяТС, ВсегоВремяМЛ);
				ВсегоРасстТС = ВсегоРасстТС + ВсегоРасстМЛ;
			КонецЕсли;
			ТекТС.ВремяВПути = ВсегоВремяТС;
			ТекТС.Расстояние = ВсегоРасстТС;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВременныеХарактеристикиМашрутаСписокСервер(СтрокаДляОбновления = Неопределено, ПроверкаНастройки = Истина)
	
	Если НЕ НастройкаАвтоматическийПересчетВремениИРасстояния
		И ПроверкаНастройки Тогда
		Возврат;
	КонецЕсли;
	
	МассивПунктов = Новый Массив();
	ТекСтрокаМЛ = СтрокаДляОбновления;
	ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекСтрокаМЛ.GUID, "Пункт"));
	
	ВремяПрибытияВПервыйПункт = '00010101';
	
	КоличествоПунктов = ЭлементыВеткаПункты.Количество();
	Если КоличествоПунктов > 1 Тогда
		Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
			Пункт1 = ЭлементыВеткаПункты[ИндексПункта];
			ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
			Пункт1 = Пункт1.Адрес;
			Лат1 = ЭлементыВеткаПункты[ИндексПункта].Лат;
			Лон1 = ЭлементыВеткаПункты[ИндексПункта].Лон;
			Пункт2 = ЭлементыВеткаПункты[ИндексПункта+1].Адрес;
			Лат2 = ЭлементыВеткаПункты[ИндексПункта+1].Лат;
			Лон2 = ЭлементыВеткаПункты[ИндексПункта+1].Лон;
			
			ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
			ТекСтрокаМЛ.GUID, ЭлементыВеткаПункты[ИндексПункта].GUIDПункта, "Заказ"));
			Если ЭлементыВеткаЗаказ.Количество()
				И ЭлементыВеткаЗаказ[0].FTL Тогда 
				мЗаказ = ЭлементыВеткаЗаказ[0].Этап;
			Иначе 
				мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВремяПрибытияВПервыйПункт) Тогда
				ВремяПрибытияВПервыйПункт = '00010101' + (ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт
					- НачалоДня(ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт));
			КонецЕсли;
			
			// Время прибытия в пункт используется для определения средней скорости.
			// Считается, что для всего Маршрутного листа средняя скорость одинаковая.
			// Поэтому точное время прибытия в пункт неважно, но оно должно быть заполнено.
			Если ЗначениеЗаполнено(ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт) Тогда
				ВремяПрибытияВПункт = '00010101' + (ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт
					- НачалоДня(ЭлементыВеткаПункты[ИндексПункта].ВремяПрибытияВПункт));
			Иначе
				ВремяПрибытияВПункт = ВремяПрибытияВПервыйПункт;
			КонецЕсли;
			
			МассивПунктов.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Заказ", 
				Пункт1, Лат1, Лон1,
				Пункт2, Лат2, Лон2,
				ИдентификаторСтрокиПункта,
				ВремяПрибытияВПункт,
				мЗаказ));
		КонецЦикла;
	КонецЕсли;
	
	Если МассивПунктов.Количество() Тогда
		мсвПунктыДляЗапроса = Новый Массив();
		мсвПунктыПоКэшу     = Новый Массив();
		
		Для Каждого ТекПараПунктов Из МассивПунктов Цикл 
			НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2,ТекПараПунктов.Заказ));
			Если НайдСтроки.Количество() Тогда 
				стрДанныеПункта = Новый Структура();
				стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
				стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
				стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
				стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
				стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
				мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
			Иначе 
				НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1,ТекПараПунктов.Заказ));
				Если НайдСтроки.Количество() Тогда 
					стрДанныеПункта = Новый Структура();
					стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
					стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
					стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
					стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
					стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
					мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
				Иначе 
					НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2));
					Если НайдСтроки.Количество() Тогда 
						стрДанныеПункта = Новый Структура();
						стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
						стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
						стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
						стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
						стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
						мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
					Иначе 
						НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1));
						Если НайдСтроки.Количество() Тогда 
							стрДанныеПункта = Новый Структура();
							стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
							стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
							стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
							стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
							стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
							мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
						Иначе 
							мсвПунктыДляЗапроса.Добавить(ТекПараПунктов);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если мсвПунктыДляЗапроса.Количество() Тогда 
			ПолучитьТаблицуРасстоянийМеждуПунктамиСписок(мсвПунктыДляЗапроса, МаршрутыСписокЗаказов);
		КонецЕсли;
		
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыПоКэшу Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыСписокЗаказов.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			Если ТекИндекс.РучнойВвод Тогда 
				ВыбраннаяСтрока.ВремяВПути = ТекИндекс.Время;
			Иначе
				// Время прибытия в пункт используется для определения средней скорости.
				// Считается, что для всего Маршрутного листа средняя скорость одинаковая.
				// Поэтому точное время прибытия в пункт неважно, но оно должно быть заполнено.
				Если ЗначениеЗаполнено(ВыбраннаяСтрока.ВремяПрибытияВПункт) Тогда
					ВремяПрибытияВПункт = ВыбраннаяСтрока.ВремяПрибытияВПункт;
				Иначе
					ВремяПрибытияВПункт = МассивПунктов[0].ВремяВыезда;
				КонецЕсли;
				ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
					ТекИндекс.Расстояние,
					ТекИндекс.Время,
					ВремяПрибытияВПункт,
					кэшСредняяСкоростьДвижения
				);
			КонецЕсли;
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
		КонецЦикла;
		
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыДляЗапроса Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыСписокЗаказов.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			// Время прибытия в пункт используется для определения средней скорости.
			// Считается, что для всего Маршрутного листа средняя скорость одинаковая.
			// Поэтому точное время прибытия в пункт неважно, но оно должно быть заполнено.
			Если ЗначениеЗаполнено(ВыбраннаяСтрока.ВремяПрибытияВПункт) Тогда
				ВремяПрибытияВПункт = ВыбраннаяСтрока.ВремяПрибытияВПункт;
			Иначе
				ВремяПрибытияВПункт = МассивПунктов[0].ВремяВыезда;
			КонецЕсли;
			ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
				ТекИндекс.Расстояние,
				ТекИндекс.Время,
				ВремяПрибытияВПункт,
				кэшСредняяСкоростьДвижения
			);
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
			
			НовСтрЗаписиВКэш = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрЗаписиВКэш.Пункт1     = ТекИндекс.Пункт1;
			НовСтрЗаписиВКэш.Пункт2     = ТекИндекс.Пункт2;
			НовСтрЗаписиВКэш.Время      = ТекИндекс.Время;
			НовСтрЗаписиВКэш.Расстояние = ТекИндекс.Расстояние;
			НовСтрЗаписиВКэш.Заказ      = ТекИндекс.Заказ;
		КонецЦикла;
	КонецЕсли;

	ЭлементыВеткаТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТекСтрокаМЛ.GUID));
	Для Каждого ТекТС Из ЭлементыВеткаТС Цикл 
		ВсегоВремяТС = 0;
		ВсегоРасстТС = 0;
		Если ЗначениеЗаполнено(ТекТС.МЛ)
			ИЛИ ТекТС.НовыйМЛ Тогда
			ВсегоВремяМЛ = 0;
			ВсегоРасстМЛ = 0;
			
			ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
			Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл 
				ВсегоВремяМЛ = СложитьВремя(ВсегоВремяМЛ, ТекПункт.ВремяВПути);
				ВсегоРасстМЛ = ВсегоРасстМЛ + ТекПункт.Расстояние;
			КонецЦикла;
			ТекТС.ВремяВПути = ВсегоВремяМЛ;
			ТекТС.Расстояние = ВсегоРасстМЛ;
			ВсегоВремяТС = СложитьВремя(ВсегоВремяТС, ВсегоВремяМЛ);
			ВсегоРасстТС = ВсегоРасстТС + ВсегоРасстМЛ;
		КонецЕсли;
		ТекТС.ВремяВПути = ВсегоВремяТС;
		ТекТС.Расстояние = ВсегоРасстТС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПеретаскиваниеВнутриМаршрута(мЗначение, СтрокаПриемникВДереве)
	
	СтрокаПунктПриемник = СтрокаПриемникВДереве;
	Пока Не СтрокаПунктПриемник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
	КонецЦикла;
	СтрокаПунктИсточник = мЗначение;
	Пока Не СтрокаПунктИсточник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
	КонецЦикла;
	
	СтрокаМЛ = СтрокаПунктИсточник.ПолучитьРодителя();
	
	ИндексСтрокаПунктИсточник = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник); 
	ИндексСтрокаПунктПриемник = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	
	Если мЗначение.УровеньДерева = "Пункт"
			Или (мЗначение.УровеньДерева = "Заказ"
			И мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1)
			Или (мЗначение.УровеньДерева = "Номенклатура"
			И мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1
			И мЗначение.ПолучитьРодителя().ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1) Тогда 
		Если мЗначение.УровеньДерева = "Заказ"
				И СтрокаПриемникВДереве.УровеньДерева = "Заказ" Тогда
			СтрокаПриемникВДереве = СтрокаПриемникВДереве.ПолучитьРодителя();
		КонецЕсли;
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеМаршрутов(СтрокаПунктИсточник, СтрокаПунктПриемник);
		
		Если мСтр = Неопределено Или СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0 Тогда
			Если мЗначение.УровеньДерева = "Заказ" Тогда
				сдвигСтрока = мЗначение.ПолучитьРодителя();
				
			ИначеЕсли мЗначение.УровеньДерева = "Номенклатура" Тогда
				сдвигСтрока = мЗначение.ПолучитьРодителя().ПолучитьРодителя();
				
			Иначе
				сдвигСтрока = мЗначение;
			КонецЕсли;
			
			Смещение = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник) - СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
			СтрокаМЛ.ПолучитьЭлементы().Сдвинуть(СтрокаМЛ.ПолучитьЭлементы().Индекс(сдвигСтрока), Смещение);
			
		Иначе
			Для Каждого ТекЗаказ Из СтрокаПунктИсточник.ПолучитьЭлементы() Цикл
				СтруктураПоиска = Новый Структура("Этап, Операция");
				СтруктураПоиска.Этап     = ТекЗаказ.Этап;
				СтруктураПоиска.Операция = ТекЗаказ.Операция;
				
				НайдСтроки = НайтиСтрокиВПроизвольномДереве(мСтр.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
				
				Если НайдСтроки.Количество() Тогда
					НовСтрокаЗаказ = НайдСтроки[0];
					
				Иначе
					НовСтрокаЗаказ = мСтр.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекЗаказ,, "ЗатратыНаПеревозку,Секции");
				КонецЕсли;
				
				Для Каждого ТекСтрокаНоменклатура Из ТекЗаказ.ПолучитьЭлементы() Цикл
					НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, ТекСтрокаНоменклатура,, "ЗатратыНаПеревозку,Секции");
				КонецЦикла;
			КонецЦикла;
			
			СтрокаМЛ.ПолучитьЭлементы().Удалить(СтрокаПунктИсточник);
		КонецЕсли;
		
	ИначеЕсли мЗначение.УровеньДерева = "Заказ" Тогда
		
		Если мЗначение.УровеньДерева = "Заказ"
				И СтрокаПриемникВДереве.УровеньДерева = "Заказ" Тогда
			СтрокаПриемникВДереве = СтрокаПриемникВДереве.ПолучитьРодителя();
		КонецЕсли;

		НовСтрокаПункт = Неопределено;
		НовСтрокаЗаказ = Неопределено;
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеМаршрутов(СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			НовСтрокаПункт = СтрокаМЛ.ПолучитьЭлементы().Вставить(СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник));
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, мЗначение.ПолучитьРодителя(),, "ЗатратыНаПеревозку,Секции");
			
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если СтрокаПриемникВДереве.УровеньДерева = "Пункт" Тогда
			Если НовСтрокаПункт.ПолучитьЭлементы().Количество() 
					И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].Этап = мЗначение.Этап 
					И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].Операция = мЗначение.Операция Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1];
				
			Иначе
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, мЗначение,, "ЗатратыНаПеревозку,Секции");
			КонецЕсли;
			
		ИначеЕсли СтрокаПриемникВДереве.УровеньДерева = "Заказ" Или СтрокаПриемникВДереве.УровеньДерева = "Номенклатура" Тогда 
			мСтрЗаказ = ?(СтрокаПриемникВДереве.УровеньДерева = "Заказ", СтрокаПриемникВДереве, СтрокаПриемникВДереве.ПолучитьРодителя());
			
			Если мСтрЗаказ.Этап = мЗначение.Этап И мСтрЗаказ.Операция = мЗначение.Операция Тогда 
				НовСтрокаЗаказ = СтрокаПриемникВДереве;
				
			ИначеЕсли (Не мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ) = 0)
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].Этап = мЗначение.Эатп
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].Операция = мЗначение.Операция Тогда 
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1];
				
			Иначе
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Вставить(мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ));
				НовСтрокаЗаказ.Этап = мЗначение.Этап;
				НовСтрокаЗаказ.Операция = мЗначение.Операция;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого мТекСтрока Из мЗначение.ПолучитьЭлементы() Цикл
			НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, мТекСтрока,, "ЗатратыНаПеревозку,Секции");
		КонецЦикла;
		
		мРод = мЗначение.ПолучитьРодителя();
		мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Удалить(мЗначение);
		Если мРод.ПолучитьЭлементы().Количество() = 0 Тогда
			СтрокаМЛ.ПолучитьЭлементы().Удалить(мРод);
		КонецЕсли;
		
	ИначеЕсли мЗначение.УровеньДерева = "Номенклатура" Тогда
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеМаршрутов(СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			ИндексДляВставки = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
			
			Если СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник) > СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник) Тогда
				ИндексДляВставки = ИндексДляВставки + 1;
			КонецЕсли;
			
			НовСтрокаПункт = СтрокаМЛ.ПолучитьЭлементы().Вставить(ИндексДляВставки);
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, мЗначение.ПолучитьРодителя().ПолучитьРодителя(),, "ЗатратыНаПеревозку,Секции");
			
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если СтрокаПриемникВДереве.УровеньДерева = "Пункт" Тогда
			Если НовСтрокаПункт.ПолучитьЭлементы().Количество()
					И НовСтрокаПункт.ПолучитьЭлементы()[мСтр.ПолучитьЭлементы().Количество() - 1].Этап = мЗначение.Этап 
					И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].Операция = мЗначение.Операция Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1];
				
			Иначе
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, мЗначение.ПолучитьРодителя(),, "ЗатратыНаПеревозку,Секции");
			КонецЕсли;
			
		ИначеЕсли СтрокаПриемникВДереве.УровеньДерева = "Заказ" Или СтрокаПриемникВДереве.УровеньДерева = "Номенклатура" Тогда 
			мСтрЗаказ = ?(СтрокаПриемникВДереве.УровеньДерева = "Заказ",СтрокаПриемникВДереве,СтрокаПриемникВДереве.ПолучитьРодителя());
			
			Если мСтрЗаказ.Этап = мЗначение.Этап И мСтрЗаказ.Операция = мЗначение.Операция Тогда 
				НовСтрокаЗаказ = СтрокаПриемникВДереве;
				
			ИначеЕсли (Не мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ) = 0)
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].Этап = мЗначение.Этап 
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].Операция = мЗначение.Операция тогда 
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1];
				
			Иначе
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Вставить(мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ));
				НовСтрокаЗаказ.Этап = мЗначение.Этап;
				НовСтрокаЗаказ.Операция = мЗначение.Операция;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, мЗначение,, "ЗатратыНаПеревозку,Секции");
		
		мРодЗаказ = мЗначение.ПолучитьРодителя();
		мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Удалить(мЗначение);
		Если мРодЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда
			мРодПункт = мРодЗаказ.ПолучитьРодителя();
			мРодПункт.ПолучитьЭлементы().Удалить(мРодЗаказ);
			
			Если мРодПункт.ПолучитьЭлементы().Количество() = 0 Тогда
				СтрокаМЛ.ПолучитьЭлементы().Удалить(мРодПункт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаМЛ.ПолучитьЭлементы() Цикл
		СтрокаДерева.ВремяВПути = 0;
		СтрокаДерева.Расстояние = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПеретаскиваниеМеждуТС(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыПеретаскиваниеМеждуТСДерево(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
	Иначе
		МаршрутыПеретаскиваниеМеждуТССписок(ПараметрыПеретаскивания, Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПеретаскиваниеМеждуТСДерево(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Массив") Тогда
		СтрокаИсточник = МаршрутыДерево.НайтиПоИдентификатору(СтрокаИсточник[0]);
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		СтрокаИсточник = МаршрутыДерево.НайтиПоИдентификатору(СтрокаИсточник);
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Строка = МаршрутыДерево.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	СтрокаПриемник = Строка;
	
	// Перетаскивание МЛ.
	Если СтрокаИсточник.ПолучитьРодителя() <> Неопределено И СтрокаИсточник.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда
		// Независимо от уровня - перетаскивается на ТС.
		СтрокаТСПриемник = СтрокаПриемник;
		Пока Не СтрокаТСПриемник.ПолучитьРодителя() = Неопределено Цикл 
			СтрокаТСПриемник = СтрокаТСПриемник.ПолучитьРодителя();
		КонецЦикла;
		
		СтрокаМЛ = СтрокаТСПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМЛ, СтрокаИсточник,, "ЗатратыНаПеревозку,Секции");
		
		Для Каждого СтрокаПункта Из СтрокаИсточник.ПолучитьЭлементы() Цикл 
			НовСтрокаПункта = СтрокаМЛ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПункта, СтрокаПункта,, "ЗатратыНаПеревозку,Секции");
			
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				НовСтрокаЗаказа = НовСтрокаПункта.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказа, СтрокаЗаказа,, "ЗатратыНаПеревозку,Секции");
				
				Для Каждого СтрокаГруза Из СтрокаЗаказа.ПолучитьЭлементы() Цикл 
					НовСтрокаГруза = НовСтрокаЗаказа.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаГруза, СтрокаГруза,, "ЗатратыНаПеревозку,Секции");
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		УстановитьПризнакМодифицированности(СтрокаМЛ);
		УдалитьПозициюИзМаршрута(СтрокаИсточник, Истина);
		
		УзелТС = СтрокаИсточник.ПолучитьРодителя();
		Если Не УзелТС = Неопределено Тогда 
			УзелТС.ПолучитьЭлементы().Удалить(СтрокаИсточник);
		КонецЕсли;
		
	Иначе // Перетаскивание пункта, заказа или груза.
		
		Если СтрокаИсточник.ПолучитьРодителя() = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПеретаскиваемыеЗаказы = Новый Массив();
		
		Если СтрокаИсточник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Пункт.
			Для Каждого ТекСтрока Из СтрокаИсточник.ПолучитьЭлементы() Цикл
				УзелМЛ   = СтрокаИсточник.ПолучитьРодителя();
				Если ТекСтрока.FTL Тогда
					мсвГрузы = Новый Массив();
					
					пПогрузка    = ТипыТочекМаршрута_Погрузка;
					пДопПогрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
					
					СоответсвиеГрузов = Новый Соответствие();
					ТекЭтап  = ТекСтрока.Этап;
					Для Каждого ТекПункт Из УзелМЛ.ПолучитьЭлементы() Цикл
						Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
							Если ТекЗаказ.Этап <> ТекЭтап Тогда
								Продолжить;
							КонецЕсли;
							Если ТекЗаказ.Операция = пПогрузка
								ИЛИ ТекЗаказ.Операция = пДопПогрузка Тогда
								
								Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
									Если СоответсвиеГрузов.Получить(ТекГруз.Код) = Неопределено Тогда
										ДанныеГруза = Новый Структура();
										ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
										ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
										ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
										ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
										ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
										ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
										ДанныеГруза.Вставить("Код",              ТекГруз.Код);
										ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
										мсвГрузы.Добавить(ДанныеГруза);
										СоответсвиеГрузов.Вставить(ТекГруз.Код, ТекГруз.Группировка);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				Иначе
					мсвГрузы = Новый Массив();
					Для Каждого ТекГруз Из ТекСтрока.ПолучитьЭлементы() Цикл 
						ДанныеГруза = Новый Структура();
						ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
						ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
						ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
						ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
						ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
						ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
						ДанныеГруза.Вставить("Код",              ТекГруз.Код);
						ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
						мсвГрузы.Добавить(ДанныеГруза);
					КонецЦикла;
				КонецЕсли;
				
				ДанныеЗаказа = Новый Структура();
				ДанныеЗаказа.Вставить("Заказ", ТекСтрока.Этап);
				ДанныеЗаказа.Вставить("МЛДляЗаписи", ТекСтрока.МЛДляЗаписи);
				ДанныеЗаказа.Вставить("Грузы", ?(мсвГрузы.Количество(), мсвГрузы, Неопределено));
				ПеретаскиваемыеЗаказы.Добавить(ДанныеЗаказа);
			КонецЦикла;
			
			Если СтрокаИсточник.ПолучитьЭлементы().Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли СтрокаИсточник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Заказ.
			УзелМЛ = СтрокаИсточник.ПолучитьРодителя().ПолучитьРодителя();
			
			Если СтрокаИсточник.FTL Тогда
				мсвГрузы = Новый Массив();
				
				пПогрузка    = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				
				СоответсвиеГрузов = Новый Соответствие();
				ТекЭтап  = СтрокаИсточник.Этап;
				Для Каждого ТекПункт Из УзелМЛ.ПолучитьЭлементы() Цикл
					Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
						Если ТекЗаказ.Этап <> ТекЭтап Тогда
							Продолжить;
						КонецЕсли;
						Если ТекЗаказ.Операция = пПогрузка
							ИЛИ ТекЗаказ.Операция = пДопПогрузка Тогда
							
							Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
								Если СоответсвиеГрузов.Получить(ТекГруз.Код) = Неопределено Тогда
									ДанныеГруза = Новый Структура();
									ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
									ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
									ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
									ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
									ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
									ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
									ДанныеГруза.Вставить("Код",              ТекГруз.Код);
									ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
									мсвГрузы.Добавить(ДанныеГруза);
									СоответсвиеГрузов.Вставить(ТекГруз.Код, ТекГруз.Группировка);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				мсвГрузы = Новый Массив();
				Для Каждого ТекГруз Из СтрокаИсточник.ПолучитьЭлементы() Цикл 
					ДанныеГруза = Новый Структура();
					ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
					ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
					ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
					ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
					ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
					ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
					ДанныеГруза.Вставить("Код",              ТекГруз.Код);
					ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
					мсвГрузы.Добавить(ДанныеГруза);
				КонецЦикла;
			КонецЕсли;
			ДанныеЗаказа = Новый Структура();
			ДанныеЗаказа.Вставить("Заказ",         СтрокаИсточник.Этап);
			ДанныеЗаказа.Вставить("МЛДляЗаписи",   СтрокаИсточник.МЛДляЗаписи);
			ДанныеЗаказа.Вставить("Грузы", ?(мсвГрузы.Количество(), мсвГрузы, Неопределено));
			ПеретаскиваемыеЗаказы.Добавить(ДанныеЗаказа);
			
		Иначе // Груз.
			УзелМЛ    = СтрокаИсточник.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
			УзелЗаказ = СтрокаИсточник.ПолучитьРодителя();
			Если УзелЗаказ.FTL Тогда
				мсвГрузы = Новый Массив();
				
				пПогрузка    = ТипыТочекМаршрута_Погрузка;
				пДопПогрузка = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка");
				
				СоответсвиеГрузов = Новый Соответствие();
				ТекЭтап  = УзелЗаказ.Этап;
				Для Каждого ТекПункт Из УзелМЛ.ПолучитьЭлементы() Цикл
					Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
						Если ТекЗаказ.Этап <> ТекЭтап Тогда
							Продолжить;
						КонецЕсли;
						Если ТекЗаказ.Операция = пПогрузка
							ИЛИ ТекЗаказ.Операция = пДопПогрузка Тогда
							
							Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
								Если СоответсвиеГрузов.Получить(ТекГруз.Код) = Неопределено Тогда
									ДанныеГруза = Новый Структура();
									ДанныеГруза.Вставить("Груз",             ТекГруз.Группировка);
									ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекГруз.ЕдиницаИзмерения);
									ДанныеГруза.Вставить("Количество",       ТекГруз.Количество);
									ДанныеГруза.Вставить("ВесБрутто",        ТекГруз.ВесБрутто);
									ДанныеГруза.Вставить("Объем",            ТекГруз.Объем);
									ДанныеГруза.Вставить("КолМест",          ТекГруз.КолМест);
									ДанныеГруза.Вставить("Код",              ТекГруз.Код);
									ДанныеГруза.Вставить("НомерСтроки",      ТекГруз.НомерСтроки);
									мсвГрузы.Добавить(ДанныеГруза);
									СоответсвиеГрузов.Вставить(ТекГруз.Код, ТекГруз.Группировка);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				
				мсвГрузы = Новый Массив();
				ДанныеГруза = Новый Структура();
				ДанныеГруза.Вставить("Груз",             СтрокаИсточник.Группировка);
				ДанныеГруза.Вставить("ЕдиницаИзмерения", СтрокаИсточник.ЕдиницаИзмерения);
				ДанныеГруза.Вставить("Количество",       СтрокаИсточник.Количество);
				ДанныеГруза.Вставить("ВесБрутто",        СтрокаИсточник.ВесБрутто);
				ДанныеГруза.Вставить("Объем",            СтрокаИсточник.Объем);
				ДанныеГруза.Вставить("КолМест",          СтрокаИсточник.КолМест);
				ДанныеГруза.Вставить("Код",              СтрокаИсточник.Код);
				ДанныеГруза.Вставить("НомерСтроки",      СтрокаИсточник.НомерСтроки);
				мсвГрузы.Добавить(ДанныеГруза);
			КонецЕСли;
			ДанныеЗаказа = Новый Структура();
			ДанныеЗаказа.Вставить("Заказ", УзелЗаказ.Этап);
			ДанныеЗаказа.Вставить("МЛДляЗаписи", УзелЗаказ.МЛДляЗаписи);
			ДанныеЗаказа.Вставить("Грузы", мсвГрузы);
			ПеретаскиваемыеЗаказы.Добавить(ДанныеЗаказа);
		КонецЕсли;
		
		ЗаполнитьРеквизитыШапкиЗаказов(ПеретаскиваемыеЗаказы);
		ЗаполнитьСтрокиПогрузкиРазгрузки(УзелМЛ, ПеретаскиваемыеЗаказы);
		
		Если НастройкаВремяВыездаИзГаража = 1 Тогда 
			мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
		Иначе
			ОтправлениеС = ПолучитьДатуОтправления(СтрокаИсточник.Этап);
			ВремяОтправления = ОтправлениеС - НачалоДня(ОтправлениеС);
			мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
		КонецЕсли;

		ПеретаскиваниеНаМаршруты(
			Неопределено, 
			Неопределено,
			Неопределено,
			СтрокаПриемник,
			Неопределено,
			мДатаИВремяНачала,
			Ложь,
			Истина,
			ПеретаскиваемыеЗаказы
		);
		
		УдалитьПозициюИзМаршрута(СтрокаИсточник, Истина);
		
		Если ЗначениеЗаполнено(УзелМЛ.Группировка) И УзелМЛ.ПолучитьЭлементы().Количество() = 0 Тогда 
			ПометитьНаУдалениеМЛПриУдаленииИзДерева(УзелМЛ.Группировка);
		Иначе 
			УстановитьПризнакМодифицированности(УзелМЛ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПеретаскиваниеМеждуТССписок(ПараметрыПеретаскивания, Строка)
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Массив") Тогда
		Попытка
			СтрокаИсточник = МаршрутыСписок.НайтиПоИдентификатору(СтрокаИсточник[0]);
		Исключение
			СтрокаИсточник = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", СтрокаИсточник[0].GUIDТС))[0];
			
		КонецПопытки;
	КонецЕсли;
	Если ТипЗнч(СтрокаИсточник) = Тип("Число") Тогда
		СтрокаИсточник = МаршрутыСписок.НайтиПоИдентификатору(СтрокаИсточник);
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Строка = МаршрутыСписок.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	СтрокаПриемник = Строка;
	
	// Перетаскивание МЛ.
	СтрокаТСПриемник         = СтрокаПриемник;	
	СтрокаМЛ                 = СтрокаТСПриемник;
	GUIDПриемник             = Строка(СтрокаМЛ.GUID);
	МЛ                       = СтрокаМЛ.МЛ;
	ПредставлениеМЛ          = СтрокаМЛ.ПредставлениеМЛ;
	НовыйМЛ                  = СтрокаМЛ.НовыйМЛ;
	АдресВременногоХранилища = СтрокаМЛ.АдресВременногоХранилища;
	Маршрут                  = СтрокаМЛ.Маршрут;
	
	СоздатьМаршрутныйЛист          = СтрокаМЛ.СоздатьМаршрутныйЛист;

	СтрокаМЛ.GUID    = СтрокаИсточник.GUID;
	СтрокаМЛ.НовыйМЛ = Истина;
	СтрокаМЛ.СоздатьМаршрутныйЛист = Истина;
	СтрокаМЛ.МЛ              = СтрокаИсточник.МЛ;
	СтрокаМЛ.ПредставлениеМЛ = СтрокаИсточник.ПредставлениеМЛ;
	СтрокаМЛ.АдресВременногоХранилища = СтрокаИсточник.АдресВременногоХранилища;
	Если НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
		СтрокаМЛ.Маршрут         = СтрокаИсточник.Маршрут;
	КонецЕсли;

	СтрокаИсточник.GUID                     = GUIDПриемник;
	СтрокаИсточник.МЛ                       = МЛ;
	СтрокаИсточник.ПредставлениеМЛ          = ПредставлениеМЛ;
	СтрокаИсточник.НовыйМЛ                  = НовыйМЛ;
	СтрокаИсточник.АдресВременногоХранилища = АдресВременногоХранилища;
	СтрокаИсточник.СоздатьМаршрутныйЛист    = СоздатьМаршрутныйЛист;
	
	Если НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда 
		СтрокаИсточник.Маршрут	= Маршрут;
	КонецЕсли;
			
	УстановитьПризнакМодифицированности(СтрокаМЛ);
	УстановитьПризнакМодифицированности(СтрокаТСПриемник);

	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПеретаскиваниеЗавершение(ДопПараметры)
	
	ИмяИсточникаПеретаскиванияВМаршруты = "";
	ТекСтрокаТС = ДопПараметры.СтрокаТСПриемник;
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Истина, Истина, ТекСтрокаТС.ПолучитьИдентификатор());
	
	Если НастройкаИспользоватьРасчетТары Тогда 
		ОбновитьРеквизитыТарыИРазмещения();
	КонецЕсли;
	
	ОбновитьУровеньДереваВМаршрутах();
	
	МассивОшибок = Новый Массив();
	Если НастройкаКонтрольВременныхОконЗаказов Тогда 
		ПроверитьСостоянияВхожденияВОкна(ТекСтрокаТС, МассивОшибок);
	КонецЕсли;
	Если МассивОшибок.Количество() Тогда 
		СтрокаОшибки = "";
		Для Каждого ТекОшибка Из МассивОшибок Цикл 
			СтрокаОшибки = СтрокаОшибки + ?(СтрокаОшибки="","",Символы.ПС) + ТекОшибка;
		КонецЦикла;
		ТекстНСТР = НСтр("en='Check of entry in windows';ru='Проверка вхождения в окна'");
		ПоказатьОповещениеПользователя(ТекстНСТР,, СтрокаОшибки, БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокиВДереве(ТекСтрокаДерева, СтруктураПоиска, флВПодчиненных, Знач Уровень = 0)
	Рез = Новый Массив;
	
	Если Уровень > 0 Тогда
		флСтрокаНайдена = Истина;
		Для Каждого ТекПолеПоиска Из СтруктураПоиска Цикл
			Если ТекСтрокаДерева[ТекПолеПоиска.Ключ] <> ТекПолеПоиска.Значение Тогда
				флСтрокаНайдена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флСтрокаНайдена Тогда
			Рез.Добавить(ТекСтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если Уровень = 0 ИЛИ флВПодчиненных И Уровень > 0 Тогда
		Для Каждого ТекПодчСтрока Из ТекСтрокаДерева.ПолучитьЭлементы() Цикл
			РезПодч = НайтиСтрокиВДереве(ТекПодчСтрока, СтруктураПоиска, флВПодчиненных, Уровень + 1);
			Для Каждого ТекПодч Из РезПодч Цикл
				Рез.Добавить(ТекПодч);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция НайтиСтрокиВДеревеСервер(ТекСтрокаДерева, СтруктураПоиска, флВПодчиненных, Знач Уровень = 0)
	Рез = Новый Массив;
	
	Если Уровень > 0 Тогда
		флСтрокаНайдена = Истина;
		Для Каждого ТекПолеПоиска Из СтруктураПоиска Цикл
			Если ТекСтрокаДерева[ТекПолеПоиска.Ключ] <> ТекПолеПоиска.Значение Тогда
				флСтрокаНайдена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флСтрокаНайдена Тогда
			Рез.Добавить(ТекСтрокаДерева);
		КонецЕсли;
	КонецЕсли;
	
	Если Уровень = 0 ИЛИ флВПодчиненных И Уровень > 0 Тогда
		Для Каждого ТекПодчСтрока Из ТекСтрокаДерева.Строки Цикл
			РезПодч = НайтиСтрокиВДеревеСервер(ТекПодчСтрока, СтруктураПоиска, флВПодчиненных, Уровень + 1);
			Для Каждого ТекПодч Из РезПодч Цикл
				Рез.Добавить(ТекПодч);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПромежуточныеПунктыFTLЗаказа(ЗаказСсылка)
	
	мсвПромежуточныеПункты = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Пункт КАК Пункт,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ОтправительПолучатель КАК ОтправительПолучатель,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.КонтактноеЛицо КАК КонтактноеЛицо,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ожидание КАК Ожидание,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.УбытиеПлан КАК УбытиеПлан,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Стоянка КАК Стоянка,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Расстояние КАК Расстояние,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Время КАК Время,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Длительность КАК Длительность
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|ГДЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка = &Ссылка
	|	И уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.FTL
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл 
		ДанныеСтроки = Новый Структура("Пункт, ТипТочкиМаршрута, ОтправительПолучатель, КонтактноеЛицо,
			|Ожидание, ПрибытиеПлан, УбытиеПлан, Стоянка, Расстояние, Время, Длительность");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		мсвПромежуточныеПункты.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат мсвПромежуточныеПункты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПромежуточныеПунктыFTLЗаказов(МассивЗаказов, СоответствиеFTLКоличестваГрузов, СоответсвиеОтрезкиПути)
	
	СоответствиеПромежуточныеПункты = Новый Соответствие();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Пункт КАК Пункт,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ОтправительПолучатель КАК ОтправительПолучатель,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.КонтактноеЛицо КАК КонтактноеЛицо,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ожидание КАК Ожидание,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.УбытиеПлан КАК УбытиеПлан,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Стоянка КАК Стоянка,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Расстояние КАК Расстояние,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Время КАК Время,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Длительность КАК Длительность,
	|	уатПунктыНазначения.Лат КАК Лат,
	|	уатПунктыНазначения.Лон КАК Лон,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ПО уатЗаказГрузоотправителяПромежуточныеПункты.Пункт = уатПунктыНазначения.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка В(&МассивЗаказов)
	|	И уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.FTL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатЗаказГрузоотправителяОтрезкиПути.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителяОтрезкиПути.НомерСтроки КАК НомерСтроки,
	|	уатЗаказГрузоотправителяОтрезкиПути.id КАК id,
	|	уатЗаказГрузоотправителяОтрезкиПути.ПунктОтправления КАК ПунктОтправления,
	|	уатЗаказГрузоотправителяОтрезкиПути.ПунктНазначения КАК ПунктНазначения,
	|	уатЗаказГрузоотправителяОтрезкиПути.Груз КАК Груз
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ОтрезкиПути КАК уатЗаказГрузоотправителяОтрезкиПути
	|ГДЕ
	|	уатЗаказГрузоотправителяОтрезкиПути.Ссылка В(&МассивЗаказов)
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПромежуточныеПунктыЗаказ = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОтрезкиПути              = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПромежуточныеПунктыЗаказ.Следующий() Цикл
		мсвПромежуточныеПункты = Новый Массив();
		
		ВыборкаПромежуточныеПункты = ВыборкаПромежуточныеПунктыЗаказ.Выбрать();
		Пока ВыборкаПромежуточныеПункты.Следующий() Цикл
			ДанныеСтроки = Новый Структура("Пункт, ТипТочкиМаршрута, ОтправительПолучатель, КонтактноеЛицо,
			|Ожидание, ПрибытиеПлан, УбытиеПлан, Стоянка, Расстояние, Время, Длительность, Лат, Лон");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаПромежуточныеПункты);
			мсвПромежуточныеПункты.Добавить(ДанныеСтроки);
		КонецЦикла;
		СоответствиеПромежуточныеПункты.Вставить(ВыборкаПромежуточныеПунктыЗаказ.Ссылка, мсвПромежуточныеПункты);
		
	КонецЦикла;
	
	ТекОтрезкиПути = Новый Соответствие();
	Пока ВыборкаОтрезкиПути.Следующий() Цикл
		мсвОтрезкиПути = Новый Массив();
		
		ДетВыборкаОтрезкиПути = ВыборкаОтрезкиПути.Выбрать();
		Пока ДетВыборкаОтрезкиПути.Следующий() Цикл
			ДанныеСтроки = Новый Структура("НомерСтроки, id, ПунктОтправления, ПунктНазначения,
			|Груз");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДетВыборкаОтрезкиПути);
			мсвОтрезкиПути.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТекОтрезкиПути.Вставить(ВыборкаОтрезкиПути.Ссылка, мсвОтрезкиПути);	
	КонецЦикла;
	
	СоответсвиеОтрезкиПути = Новый Соответствие();
	Для Каждого ТекСтрока Из СоответствиеПромежуточныеПункты Цикл
		КоличествоПунктов = ТекСтрока.Значение.Количество();
		ОтрезкиПути       = ТекОтрезкиПути.Получить(ТекСтрока.Ключ);
		Если ОтрезкиПути = Неопределено Тогда
			ОтрезкиПути = Новый Массив();
		КонецЕсли;
		
		КоличествоГрузов  = СоответствиеFTLКоличестваГрузов.Получить(ТекСтрока.Ключ);
		мсвОтрезкиПути    = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
		СоответсвиеОтрезкиПути.Вставить(ТекСтрока.Ключ, мсвОтрезкиПути);
	КонецЦикла;

	Возврат СоответствиеПромежуточныеПункты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, Этап, Операция, СтрокаИсточник, СтрокаПромежуточногоПункта=Неопределено)
	
	Если СтрокаИсточник.ДетализацияЗакрытия
		= ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, СтрокаИсточник);
	КонецЕсли;

	НовСтрокаЗаказ.Операция      = Операция;
	НовСтрокаЗаказ.Этап          = Этап;
	НовСтрокаЗаказ.УровеньДерева = "Заказ";
	НовСтрокаЗаказ.Группировка   = СокрЛП(СтрокаИсточник.Номер);
	
	Если Не СтрокаПромежуточногоПункта = Неопределено Тогда 
		Если ТипЗнч(СтрокаПромежуточногоПункта.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			НовСтрокаЗаказ.ОкноС  = СтрокаПромежуточногоПункта.ПрибытиеПлан;
			НовСтрокаЗаказ.ОкноПо = СтрокаПромежуточногоПункта.УбытиеПлан;
		Иначе 
			НовСтрокаЗаказ.ОкноС  = 0;
			НовСтрокаЗаказ.ОкноПо = 0;
		КонецЕсли;
		
		НовСтрокаЗаказ.Стоянка = СтрокаПромежуточногоПункта.Стоянка;
	КонецЕсли;
	
	НовСтрокаЗаказ.Номер               = СтрокаИсточник.Номер;
	НовСтрокаЗаказ.ЦветДокумента       = СтрокаИсточник.ЦветДокумента;
	НовСтрокаЗаказ.FTL                 = СтрокаИсточник.FTL;
	НовСтрокаЗаказ.Контрагент          = СтрокаИсточник.Контрагент;
	НовСтрокаЗаказ.Грузоотправитель    = СтрокаИсточник.Грузоотправитель;
	НовСтрокаЗаказ.Грузополучатель     = СтрокаИсточник.Грузополучатель;
	НовСтрокаЗаказ.ДетализацияЗакрытия = СтрокаИсточник.ДетализацияЗакрытия;
	
	Попытка
		НовСтрокаЗаказ.МЛДляЗаписи         = СтрокаИсточник.МЛДляЗаписи;
	Исключение
	КонецПопытки;
		
	Если СтрокаПромежуточногоПункта = Неопределено
		И Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
		НовСтрокаЗаказ.ОкноС          = СтрокаИсточник.ОтправлениеС;
		НовСтрокаЗаказ.ОкноПо         = СтрокаИсточник.ОтправлениеПо;
	ИначеЕсли СтрокаПромежуточногоПункта = Неопределено
		И Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
		НовСтрокаЗаказ.ОкноС          = СтрокаИсточник.ДоставкаС;
		НовСтрокаЗаказ.ОкноПо         = СтрокаИсточник.ДоставкаПо;
	КонецЕсли;
	
	Если НовСтрокаЗаказ.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт") Тогда
		НовСтрокаЗаказ.ВесБрутто = 0;
		НовСтрокаЗаказ.Объем     = 0;
		НовСтрокаЗаказ.КолМест   = 0;
		НовСтрокаЗаказ.НазваниеГруза = ""; 
	Иначе
		НовСтрокаЗаказ.ВесБрутто          = СтрокаИсточник.ВесБрутто;
		НовСтрокаЗаказ.Объем              = СтрокаИсточник.Объем;
		
		Если ТипЗнч(СтрокаИсточник) = Тип("ДанныеФормыЭлементДерева") Тогда
			НовСтрокаЗаказ.КолМест            = СтрокаИсточник.КолМест;
			НовСтрокаЗаказ.НазваниеГруза      = СтрокаИсточник.Номенклатура;
		Иначе
			НовСтрокаЗаказ.КолМест            = СтрокаИсточник.КоличествоМест;
			НовСтрокаЗаказ.НазваниеГруза      = СтрокаИсточник.Груз;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьТаблицуРасстоянийМеждуПунктами(МассивПунктов, Знач Маршруты = Неопределено)
	
	ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПостроениеМаршрутов");
	
	Если ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	ИначеЕсли Маршруты = Неопределено Тогда
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	Иначе
		Если МассивПунктов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТипИспользуемыхЭлектронныхКарт = Неопределено;
		Если МассивПунктов[0].Свойство("ИдентификаторСтрокиПункта") Тогда
			МЛ = Маршруты.НайтиПоИдентификатору(МассивПунктов[0].ИдентификаторСтрокиПункта);
			Если (ЗначениеЗаполнено(МЛ.ЭтапМаршрутизации)
				И МЛ.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3)
				ИЛИ (ЗначениеЗаполнено(МЛ.Группировка) И ТипЗнч(МЛ.Группировка) = Тип("ДокументСсылка.уатМаршрутныйЛист")
				И МЛ.Группировка.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
				ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
			КонецЕсли;
		КонецЕсли;
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьТаблицуРасстоянийМеждуПунктамиСписок(МассивПунктов, Знач Маршруты = Неопределено)
	
	ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПостроениеМаршрутов");
	
	Если ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	ИначеЕсли Маршруты = Неопределено Тогда
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	Иначе
		Если МассивПунктов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
				
		ТипИспользуемыхЭлектронныхКарт = Неопределено;
		Если МассивПунктов[0].Свойство("ИдентификаторСтрокиПункта") Тогда
			ТекМЛ = Маршруты.НайтиПоИдентификатору(МассивПунктов[0].ИдентификаторСтрокиПункта);
			Если ТекМЛ <> Неопределено
				И ((ЗначениеЗаполнено(ТекМЛ.ЭтапМаршрутизации)
				И ТекМЛ.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3)
				ИЛИ (ЗначениеЗаполнено(ТекМЛ.МЛ) И ТипЗнч(ТекМЛ.МЛ) = Тип("ДокументСсылка.уатМаршрутныйЛист")
				И ТекМЛ.МЛ.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3)) Тогда
				ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
			КонецЕсли;
		КонецЕсли;
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВремяВПутиСУчетомСреднейСкорости(Расстояние, ВремяВПути, ВремяВыезда, ТабСкоростей)
	
	ТекВремяВыезда = '00010101000000' + (ВремяВыезда - НачалоДня(ВремяВыезда));
	
	СредняяСкорость = 0;
	Для Каждого ТекСтрока Из ТабСкоростей Цикл 
		Если (ТекСтрока.НачалоПериода > ТекСтрока.КонецПериода
					И (ТекВремяВыезда >= ТекСтрока.НачалоПериода
					Или ТекВремяВыезда <= ТекСтрока.КонецПериода))
				Или (ТекВремяВыезда >= ТекСтрока.НачалоПериода И ТекВремяВыезда <= ТекСтрока.КонецПериода) Тогда 
			СредняяСкорость = ТекСтрока.Скорость;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СредняяСкорость = 0 Тогда 
		Возврат ВремяВПути;
	КонецЕсли;
	
	мВремяСек = (Расстояние / СредняяСкорость) * 3600;
	мВремяЧЧ  = Цел(мВремяСек / 3600);
	мВремяММ  = Цел((мВремяСек - (мВремяЧЧ * 3600)) / 60);
	
	Возврат мВремяЧЧ + (мВремяММ / 100);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуПунктПриПеретаскиванииВДеревеМаршрутов(СтрокаПунктИсточник, СтрокаПунктПриемник) 
	
	СтрокаМЛ = СтрокаПунктИсточник.ПолучитьРодителя();
	
	ИндексИсточник = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = СтрокаМЛ.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	
	Если (СтрокаПунктИсточник.ПолучитьЭлементы().Количество()
			И СтрокаПунктПриемник.ПолучитьЭлементы().Количество()) 
			Или (СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0
			И СтрокаПунктПриемник.ПолучитьЭлементы().Количество() = 0 ) Тогда
		Если СтрокаПунктИсточник.Адрес = СтрокаПунктПриемник.Адрес Тогда
			Возврат СтрокаПунктПриемник;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник < ИндексПриемник Тогда
		ИндексСлед = ИндексПриемник + 1;
		
		Если ИндексСлед > СтрокаМЛ.ПолучитьЭлементы().Количество() - 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если (СтрокаМЛ.ПолучитьЭлементы()[ИндексСлед].ПолучитьЭлементы().Количество()
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество()) 
				Или (СтрокаМЛ.ПолучитьЭлементы()[ИндексСлед].ПолучитьЭлементы().Количество() = 0
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0) Тогда
			Если СтрокаМЛ.ПолучитьЭлементы()[ИндексСлед].Адрес = СтрокаПунктИсточник.Адрес Тогда
				Возврат СтрокаМЛ.ПолучитьЭлементы()[ИндексСлед];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник > ИндексПриемник Тогда
		ИндексПред = ИндексПриемник -1;
		
		Если ИндексПред < 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если (СтрокаМЛ.ПолучитьЭлементы()[ИндексПред].ПолучитьЭлементы().Количество()
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество()) 
				Или (СтрокаМЛ.ПолучитьЭлементы()[ИндексПред].ПолучитьЭлементы().Количество() = 0
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0) Тогда
			Если СтрокаМЛ.ПолучитьЭлементы()[ИндексПред].Адрес = СтрокаПунктИсточник.Адрес Тогда
				Возврат СтрокаМЛ.ПолучитьЭлементы()[ИндексПред];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуПунктПриПеретаскиванииВДеревеТекущегоМаршрута(СтрокаПунктИсточник, СтрокаПунктПриемник) 
	
	ИндексИсточник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	
	Если (СтрокаПунктИсточник.ПолучитьЭлементы().Количество()
			И СтрокаПунктПриемник.ПолучитьЭлементы().Количество()) 
			Или (СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0
			И СтрокаПунктПриемник.ПолучитьЭлементы().Количество() = 0 ) Тогда
		Если СтрокаПунктИсточник.Адрес = СтрокаПунктПриемник.Адрес Тогда
			Возврат СтрокаПунктПриемник;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник < ИндексПриемник Тогда
		ИндексСлед = ИндексПриемник + 1;
		
		Если ИндексСлед > МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если (МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексСлед].ПолучитьЭлементы().Количество()
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество()) 
				Или (МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексСлед].ПолучитьЭлементы().Количество() = 0
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0) Тогда
			Если МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексСлед].Адрес = СтрокаПунктИсточник.Адрес Тогда
				Возврат МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексСлед];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник > ИндексПриемник Тогда
		ИндексПред = ИндексПриемник -1;
		
		Если ИндексПред < 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если (МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПред].ПолучитьЭлементы().Количество()
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество()) 
				Или (МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПред].ПолучитьЭлементы().Количество() = 0
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0) Тогда
			Если МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПред].Адрес = СтрокаПунктИсточник.Адрес Тогда
				Возврат МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПред];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПризнакМодифицированности(Знач ТекущиеДанные=Неопределено)
	
	флПодтвердитьПерераспределение = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Если ТекущиеДанные = Неопределено Тогда 
			ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаМЛ = ТекущиеДанные;
		Пока Не СтрокаМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл 
			СтрокаМЛ = СтрокаМЛ.ПолучитьРодителя();
		КонецЦикла;
		
		Если Не СтрокаМЛ.Модифицированность Тогда 
			СтрокаМЛ.Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементДерева") Тогда 
			ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(ТекущиеДанные.МЛ)
			ИЛИ ТекущиеДанные.НовыйМЛ) Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаМЛ = ТекущиеДанные;
		
		Если Не СтрокаМЛ.Модифицированность Тогда 
			СтрокаМЛ.Модифицированность = Истина;
		КонецЕсли;

		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПозициюИзМаршрута(ТекДанные = Неопределено, Перемещение = Ложь, ТекДанныеМЛ = Неопределено, СписокМаршрутов = Ложь, УдалятьРаспределенные = Истина)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		УдалитьПозициюИзМаршрутаДерево(ТекДанные, Перемещение);
	Иначе
		УдалитьПозициюИзМаршрутаСписок(ТекДанные, Перемещение, ТекДанныеМЛ, СписокМаршрутов, УдалятьРаспределенные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПозициюИзМаршрутаДерево(ТекДанные = Неопределено, Перемещение = Ложь)
		
	Если ТекДанные.ПолучитьРодителя() = Неопределено Тогда // ТС.
		Для Каждого ТекСтрокаМЛ Из ТекДанные.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.ПолучитьЭлементы() Цикл
				Если (ТекСтрокаПункт.ПолучитьЭлементы().Количество() = 0) Тогда
					Прервать;
				Иначе
					СчИ = ТекСтрокаПункт.ПолучитьЭлементы().Количество() - 1;
					Пока ТекСтрокаПункт <> Неопределено И ТекСтрокаПункт.ПолучитьРодителя() <> Неопределено
							И ТекСтрокаПункт.ПолучитьЭлементы().Количество() И СчИ >= 0 Цикл
						УдалитьЗаказИзМаршрута(ТекСтрокаПункт.ПолучитьЭлементы()[СчИ], Перемещение);
						СчИ = ТекСтрокаПункт.ПолучитьЭлементы().Количество() - 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		МаршрутыДерево.ПолучитьЭлементы().Удалить(ТекДанные);
		
	ИначеЕсли ТекДанные.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Маршрутный лист.
		СтрокаТС = ТекДанные.ПолучитьРодителя();
		
		УдалитьМаршрутныйЛист(ТекДанные, Перемещение);
		
		Если Не ТекДанные.ПолучитьРодителя() = Неопределено 
			И СтрокаТС.ПолучитьЭлементы().Количество() <> 0 Тогда 
			СтрокаТС.ПолучитьЭлементы().Удалить(ТекДанные);
		КонецЕсли;
		
		Если СтрокаТС.СобственноеТС = 6 И СтрокаТС.ПолучитьЭлементы().Количество() = 0
				И СтрокаТС.КоличествоВиртуальныхТС = 0 Тогда 
			СтрокаГруппыВиртуальныхТС = Неопределено;
			Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаТС.ТС = СтрокаТС.ТС И Не ТекСтрокаТС = СтрокаТС И ТекСтрокаТС.КоличествоВиртуальныхТС > 0 Тогда 
					СтрокаГруппыВиртуальныхТС = ТекСтрокаТС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаГруппыВиртуальныхТС = Неопределено Тогда 
				СтрокаТС.КоличествоВиртуальныхТС = 1;
			Иначе
				СтрокаГруппыВиртуальныхТС.КоличествоВиртуальныхТС = СтрокаГруппыВиртуальныхТС.КоличествоВиртуальныхТС + 1;
				МаршрутыДерево.ПолучитьЭлементы().Удалить(СтрокаТС);
			КонецЕсли;
			
			// Обновление количества виртуальных ТС и представления виртуальных ТС с учетом этого количества
			ОбновитьХарактеристикиТСДерево(СтрокаГруппыВиртуальныхТС);
		КонецЕсли;
		
	ИначеЕсли ТекДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Пункт.
		Если (ТекДанные.ПолучитьЭлементы().Количество() = 0) Тогда
			ТекДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекДанные);
		Иначе
			СчИ = ТекДанные.ПолучитьЭлементы().Количество() - 1;
			Пока ТекДанные <> Неопределено И ТекДанные.ПолучитьРодителя() <> Неопределено 
					И ТекДанные.ПолучитьЭлементы().Количество() И СчИ >= 0 Цикл
				УдалитьЗаказИзМаршрута(ТекДанные.ПолучитьЭлементы()[СчИ], Перемещение);
				СчИ = ТекДанные.ПолучитьЭлементы().Количество() - 1;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТекДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Заказ.
		Если ТекДанные.FTL Тогда
			УзелМЛ = ТекДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
			Для Каждого ТекСтрока Из УзелМЛ.ПолучитьЭлементы() Цикл
				Для Каждого ТекСтрокаПункт Из ТекСтрока.ПолучитьЭлементы() Цикл
					Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
						Если ТекДанные.Этап <> ТекСтрокаЗаказ.Этап Тогда
							Продолжить;
						КонецЕсли;
						УдалитьЗаказИзМаршрута(ТекСтрокаЗаказ, Перемещение);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		Иначе
			УдалитьЗаказИзМаршрута(ТекДанные, Перемещение);
		КонецЕсли;
	Иначе // Номенклатура.
		УзелЗаказ = ТекДанные.ПолучитьРодителя();
		Если УзелЗаказ.FTL Тогда
			УзелМЛ = УзелЗаказ.ПолучитьРодителя().ПолучитьРодителя();
			Для Каждого ТекСтрокаПункт Из УзелМЛ.ПолучитьЭлементы() Цикл
				Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
					Если УзелЗаказ.Этап <> ТекСтрокаЗаказ.Этап Тогда
						Продолжить;
					КонецЕсли;
					УдалитьЗаказИзМаршрута(ТекСтрокаЗаказ, Перемещение);
				КонецЦикла;
			КонецЦикла;
		Иначе
			УдалитьНоменклатуруИзЗаказа(ТекДанные, Перемещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПозициюИзМаршрутаСписок(ТекДанные = Неопределено, Перемещение = Ложь, ТекДанныеМЛ = Неопределено, СписокМаршрутов = Ложь, УдалятьРаспределенные = Истина)
	
	Если СписокМаршрутов И НЕ (ЗначениеЗаполнено(ТекДанные.МЛ)
		ИЛИ ТекДанные.НовыйМЛ) Тогда // ТС.
		
		МаршрутыСписок.Удалить(ТекДанные);
		
	ИначеЕсли СписокМаршрутов Тогда
		
		СчИ = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 1;

		Если СчИ < 0 Тогда
			Если ТекДанныеМЛ = Неопределено Тогда
				Возврат;
			КонецЕсли;
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ТекДанныеМЛ);
		Иначе
			Пока МаршрутыСписокЗаказовДерево <> Неопределено 
				И МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() И СчИ >= 0 Цикл
				УдалитьПозициюИзМаршрутаСписок(ТекДанные, Перемещение, МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[СчИ], Ложь, Истина);
				СчИ = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 1;
			КонецЦикла;
		КонецЕсли;
		МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		
	ИначеЕсли ТекДанныеМЛ.ПолучитьРодителя() = Неопределено Тогда // Пункт.
		СчИ = ТекДанныеМЛ.ПолучитьЭлементы().Количество() - 1;
		Попытка
			Если СчИ < 0 Тогда
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ТекДанныеМЛ);
			Иначе
				Пока ТекДанныеМЛ <> Неопределено 
					И ТекДанныеМЛ.ПолучитьЭлементы().Количество() И СчИ >= 0 Цикл
					УдалитьЗаказИзМаршрутаСписок(ТекДанныеМЛ.ПолучитьЭлементы()[СчИ], Перемещение, УдалятьРаспределенные);
					СчИ = ТекДанныеМЛ.ПолучитьЭлементы().Количество() - 1;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТекДанныеМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда // Заказ.
		Если ТекДанныеМЛ.FTL Тогда
			Для Каждого ТекСтрокаПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
					Если ТекДанныеМЛ.Этап <> ТекСтрокаЗаказ.Этап Тогда
						Продолжить;
					КонецЕсли;
					УдалитьЗаказИзМаршрутаСписок(ТекСтрокаЗаказ, Перемещение, УдалятьРаспределенные);
				КонецЦикла;
			КонецЦикла;
		Иначе
			УдалитьЗаказИзМаршрутаСписок(ТекДанныеМЛ, Перемещение, УдалятьРаспределенные);
		КонецЕсли;
	Иначе // Номенклатура.
		УзелЗаказ = ТекДанныеМЛ.ПолучитьРодителя();
		Если УзелЗаказ.FTL Тогда
			Для Каждого ТекСтрокаПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
					Если УзелЗаказ.Этап <> ТекСтрокаЗаказ.Этап Тогда
						Продолжить;
					КонецЕсли;
					УдалитьЗаказИзМаршрутаСписок(ТекСтрокаЗаказ, Перемещение, УдалятьРаспределенные);
				КонецЦикла;
			КонецЦикла;
		Иначе
			УдалитьНоменклатуруИзЗаказаСписок(ТекДанныеМЛ, Перемещение, УдалятьРаспределенные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказИзМаршрута(СтрокаЗаказа, Перемещение = Ложь)
	
	УстановитьПризнакМодифицированности(СтрокаЗаказа);
	
	ТекРодительТС    = СтрокаЗаказа.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
	ТекРодительМЛ    = СтрокаЗаказа.ПолучитьРодителя().ПолучитьРодителя();
	ТекРодительПункт = СтрокаЗаказа.ПолучитьРодителя();
	
	ИскомыйЭтап  = СтрокаЗаказа.Этап;
	
	флагИзменениеОтмеченныхЗаказов = Ложь;
	// Проставляем флаг "Включен в маршрут"
	Если НЕ Перемещение Тогда
		НомерЗаказа   = СтрокаЗаказа.Номер;
		СсылкаНаЗаказ = СтрокаЗаказа.Этап;

		Для Каждого СтрокаГруз Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
			КодГруза = СтрокаГруз.Код;
			ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "",
			"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
			
			ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
			Если ИндексМассива <> Неопределено Тогда
				МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
				ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
			КонецЕсли;
			
			КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
			СсылкаНаЗаказ, КодГруза);
			Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
				ОтмеченныеЗаказы.Добавить(КлючСтроки);
				флагИзменениеОтмеченныхЗаказов = Истина;
			КонецЕсли;

		КонецЦикла;
		
		Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда
			ДанныеИдентификатора = НомерЗаказа;
			ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
			Если ИндексМассива <> Неопределено Тогда

				КолВоЭлементов = МассивРаспределенныхЗаказов.Количество();
				МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
				ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
			КонецЕсли;
			
			КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
			СсылкаНаЗаказ, "");
			Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
				ОтмеченныеЗаказы.Добавить(КлючСтроки);
				флагИзменениеОтмеченныхЗаказов = Истина;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	// удаляем строку заказа
	ТекРодительПункт.ПолучитьЭлементы().Удалить(СтрокаЗаказа);
	
	Если ТекРодительПункт.ПолучитьЭлементы().Количество() = 0 И ТекРодительМЛ <> Неопределено Тогда
		ТекРодительМЛ.ПолучитьЭлементы().Удалить(ТекРодительПункт);
		Если ТекРодительМЛ.ПолучитьЭлементы().Количество() = 0 И ТекРодительТС <> Неопределено Тогда
			ТекРодительТС.ПолучитьЭлементы().Удалить(ТекРодительМЛ);
		КонецЕсли;
	КонецЕсли;
	
	Пока Истина Цикл
		мсвНайдСтроки = НайтиСтрокиВДереве(ТекРодительТС, Новый Структура("Этап", ИскомыйЭтап), Истина, 1);
		Если мсвНайдСтроки.Количество() = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		ТекСтрокаЗаказов = МаршрутыДерево.НайтиПоИдентификатору(мсвНайдСтроки[0]);
		ТекРодительПункт = ТекСтрокаЗаказов.ПолучитьРодителя();
		Если ТекРодительПункт = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ТекРодительМЛ = ТекСтрокаЗаказов.ПолучитьРодителя().ПолучитьРодителя();
		Если ТекРодительПункт <> Неопределено Тогда
			НомерЗаказа   = ТекСтрокаЗаказов.Номер;
			СсылкаНаЗаказ = ТекСтрокаЗаказов.Этап;
			
			Для Каждого СтрокаГруз Из ТекСтрокаЗаказов.ПолучитьЭлементы() Цикл
				КодГруза = СтрокаГруз.Код;
				ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "",
				"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
				
				ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
				Если ИндексМассива <> Неопределено 
					И НЕ Перемещение Тогда
					МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
					ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
				КонецЕсли;
				
				КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
				СсылкаНаЗаказ, "");
				Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
					ОтмеченныеЗаказы.Добавить(КлючСтроки);
					флагИзменениеОтмеченныхЗаказов = Истина;
				КонецЕсли;

			КонецЦикла;
		
			ТекРодительПункт.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказов);
			Если ТекРодительПункт.ПолучитьЭлементы().Количество() = 0 И ТекРодительПункт.ПолучитьРодителя() <> Неопределено Тогда
				ТекРодительПункт.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекРодительПункт);
				Если ТекРодительМЛ.ПолучитьЭлементы().Количество() = 0 И ТекРодительМЛ.ПолучитьРодителя() <> Неопределено Тогда
					ТекРодительМЛ.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекРодительМЛ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если флагИзменениеОтмеченныхЗаказов Тогда
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
		Элементы.ЗаказыСписок.Обновить();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказИзМаршрутаСписок(СтрокаЗаказа, Перемещение = Ложь, УдалятьРаспределенные = Истина)
	
	УстановитьПризнакМодифицированности(СтрокаЗаказа);
	
	ТекРодительПункт = СтрокаЗаказа.ПолучитьРодителя();
	
	ИскомыйЭтап  = СтрокаЗаказа.Этап;
	
	флагИзменениеОтмеченныхЗаказов = Ложь;
	// Проставляем флаг "Включен в маршрут"
	Если НЕ Перемещение Тогда
		НомерЗаказа   = СтрокаЗаказа.Номер;
		СсылкаНаЗаказ = СтрокаЗаказа.Этап;
		Для Каждого СтрокаГруз Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
			КодГруза = СтрокаГруз.Код;
			ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "",
			"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
			
			ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
			Если ИндексМассива <> Неопределено 
				И УдалятьРаспределенные Тогда
				МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
				ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
				
			КонецЕсли;
			
			КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
			СсылкаНаЗаказ, КодГруза);
			Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
				ОтмеченныеЗаказы.Добавить(КлючСтроки);
				флагИзменениеОтмеченныхЗаказов = Истина;
			КонецЕсли;

		КонецЦикла;
		
		Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда
			ДанныеИдентификатора = НомерЗаказа;
			ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
			Если ИндексМассива <> Неопределено 
				И УдалятьРаспределенные Тогда

				КолВоЭлементов = МассивРаспределенныхЗаказов.Количество();
				МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
				ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);

			КонецЕсли;
			
			КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
			СсылкаНаЗаказ, "");
			Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
				ОтмеченныеЗаказы.Добавить(КлючСтроки);
				флагИзменениеОтмеченныхЗаказов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// удаляем строку заказа
	ТекРодительПункт.ПолучитьЭлементы().Удалить(СтрокаЗаказа);
	
	Если ТекРодительПункт.ПолучитьЭлементы().Количество() = 0 Тогда
		МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ТекРодительПункт);
	КонецЕсли;
	
	Пока Истина Цикл
		
		мсвНайдСтроки = НайтиСтрокиВДереве(МаршрутыСписокЗаказовДерево, Новый Структура("Этап", ИскомыйЭтап), Истина);
		Если мсвНайдСтроки.Количество() = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		ТекСтрокаЗаказов = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(мсвНайдСтроки[0]);
		ТекРодительПункт = ТекСтрокаЗаказов.ПолучитьРодителя();
		Если ТекРодительПункт = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ТекРодительПункт <> Неопределено Тогда
			НомерЗаказа   = ТекСтрокаЗаказов.Номер;
			СсылкаНаЗаказ = ТекСтрокаЗаказов.Этап;
			Для Каждого СтрокаГруз Из ТекСтрокаЗаказов.ПолучитьЭлементы() Цикл
				КодГруза = СтрокаГруз.Код;
				ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "",
				"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
				
				ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
				Если ИндексМассива <> Неопределено 
					И УдалятьРаспределенные Тогда
					МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
					ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
				
				КонецЕсли;
				
				КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
				СсылкаНаЗаказ, "");
				Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
					ОтмеченныеЗаказы.Добавить(КлючСтроки);
					флагИзменениеОтмеченныхЗаказов = Истина;
				КонецЕсли;

			КонецЦикла;
		
			ТекРодительПункт.ПолучитьЭлементы().Удалить(ТекСтрокаЗаказов);
			Если ТекРодительПункт.ПолучитьЭлементы().Количество() = 0 Тогда
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ТекРодительПункт);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Если флагИзменениеОтмеченныхЗаказов Тогда
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
		Элементы.ЗаказыСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМаршрутныйЛист(ТекДанные, Перемещение)
	Для Каждого ТекСтрокаПункт Из ТекДанные.ПолучитьЭлементы() Цикл
		Если (ТекСтрокаПункт.ПолучитьЭлементы().Количество() = 0) Тогда
			Продолжить;
		Иначе
			СчИ = ТекСтрокаПункт.ПолучитьЭлементы().Количество() - 1;
			Пока ТекСтрокаПункт <> Неопределено И ТекСтрокаПункт.ПолучитьРодителя() <> Неопределено
				И ТекСтрокаПункт.ПолучитьЭлементы().Количество() И СчИ >= 0 Цикл
				УдалитьЗаказИзМаршрута(ТекСтрокаПункт.ПолучитьЭлементы()[СчИ], Перемещение);
				СчИ = ТекСтрокаПункт.ПолучитьЭлементы().Количество() - 1;
			КонецЦикла;
			УдалитьМаршрутныйЛист(ТекДанные, Перемещение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаКлиенте
Процедура УдалитьНоменклатуруИзЗаказа(СтрокаНоменклатуры, Перемещение = Ложь)
	
	ТекРодительМЛ    = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
	ТекРодительПункт = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя();
	ТекРодительЗаказ = СтрокаНоменклатуры.ПолучитьРодителя();
	
	ИскомаяНоменклатура = СтрокаНоменклатуры.Группировка;
	ИскомыйЭтап  = ТекРодительЗаказ.Этап;
	Если ТекРодительЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
		ПаралельнаяОперация = ТипыТочекМаршрута_Разгрузка;
	Иначе
		ПаралельнаяОперация = ТипыТочекМаршрута_Погрузка;
	КонецЕсли;
	
	// проставляем флаг "Включен в маршрут"
	Если НЕ Перемещение Тогда
		КодГруза   = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаНоменклатуры.Группировка, "Код");
		НомерЗаказ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекРодительЗаказ.Этап, "Номер");
		ДанныеИдентификатора = НомерЗаказ + ?(КодГруза = "", "",
		"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
		
		ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
		Если ИндексМассива <> Неопределено Тогда
			МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
			ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
			ОбновитьСписокЗаказов();
		КонецЕсли;
	КонецЕсли;
	
	ТекРодительЗаказ.ПолучитьЭлементы().Удалить(СтрокаНоменклатуры);
	
	Если ТекРодительЗаказ.ПолучитьЭлементы().Количество() = 0 тогда
		УдалитьЗаказИзМаршрута(ТекРодительЗаказ, Ложь);
		Возврат;
	КонецЕсли;
	
	мсвНайдСтроки = НайтиСтрокиВДереве(ТекРодительМЛ, Новый Структура("Этап, Операция", ИскомыйЭтап, ПаралельнаяОперация), Истина, 1);
	Если мсвНайдСтроки.Количество() > 0 Тогда
		ТекСтрокаЗаказов = МаршрутыДерево.НайтиПоИдентификатору(мсвНайдСтроки[0]);
		
		мсвНайдНоменклатура = НайтиСтрокиВДереве(ТекСтрокаЗаказов, Новый Структура("Группировка", ИскомаяНоменклатура), Истина);
		Если мсвНайдНоменклатура.Количество() > 0 Тогда
			ТекСтрокаНоменклатура = МаршрутыДерево.НайтиПоИдентификатору(мсвНайдНоменклатура[0]);
			ТекРодительЗаказ = ТекСтрокаНоменклатура.ПолучитьРодителя();
			ТекРодительПункт = ТекСтрокаНоменклатура.ПолучитьРодителя().ПолучитьРодителя();
			ТекРодительМЛ    = ТекСтрокаНоменклатура.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
			
			Если ТекРодительЗаказ <> Неопределено Тогда
				ТекРодительЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаНоменклатура);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНоменклатуруИзЗаказаСписок(СтрокаНоменклатуры, Перемещение = Ложь, УдалятьРаспределенные = Истина)
	
	ТекРодительПункт = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя();
	ТекРодительЗаказ = СтрокаНоменклатуры.ПолучитьРодителя();
	
	ИскомаяНоменклатура = СтрокаНоменклатуры.Группировка;
	ИскомыйЭтап  = ТекРодительЗаказ.Этап;
	Если ТекРодительЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
		ПаралельнаяОперация = ТипыТочекМаршрута_Разгрузка;
	Иначе
		ПаралельнаяОперация = ТипыТочекМаршрута_Погрузка;
	КонецЕсли;
	
	// проставляем флаг "Включен в маршрут"
	Если НЕ Перемещение Тогда
		КодГруза   = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаНоменклатуры.Группировка, "Код");
		НомерЗаказ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекРодительЗаказ.Этап, "Номер");
		ДанныеИдентификатора = НомерЗаказ + ?(КодГруза = "", "",
		"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
		
		ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
		Если ИндексМассива <> Неопределено 
			И УдалятьРаспределенные Тогда
			МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
			ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
			
			КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
			ТекРодительЗаказ.Этап, КодГруза);
			Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
				ОтмеченныеЗаказы.Добавить(КлючСтроки);
				
				НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
				ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
				ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
			КонецЕсли;
			ОбновитьСписокЗаказов();
		КонецЕсли;
	КонецЕсли;
	
	ТекРодительЗаказ.ПолучитьЭлементы().Удалить(СтрокаНоменклатуры);
	
	Если ТекРодительЗаказ.ПолучитьЭлементы().Количество() = 0 тогда
		УдалитьЗаказИзМаршрутаСписок(ТекРодительЗаказ, Ложь);
		Возврат;
	КонецЕсли;
	
	мсвНайдСтроки = НайтиСтрокиВДереве(МаршрутыСписокЗаказовДерево, Новый Структура("Этап, Операция", ИскомыйЭтап, ПаралельнаяОперация), Истина);
	Если мсвНайдСтроки.Количество() > 0 Тогда
		ТекСтрокаЗаказов = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(мсвНайдСтроки[0]);
		
		мсвНайдНоменклатура = НайтиСтрокиВДереве(ТекСтрокаЗаказов, Новый Структура("Группировка", ИскомаяНоменклатура), Истина);
		Если мсвНайдНоменклатура.Количество() > 0 Тогда
			ТекСтрокаНоменклатура = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(мсвНайдНоменклатура[0]);
			ТекРодительЗаказ = ТекСтрокаНоменклатура.ПолучитьРодителя();
			ТекРодительПункт = ТекСтрокаНоменклатура.ПолучитьРодителя().ПолучитьРодителя();
				
			Если ТекРодительЗаказ <> Неопределено Тогда
				ТекРодительЗаказ.ПолучитьЭлементы().Удалить(ТекСтрокаНоменклатура);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыШапкиЗаказов(ПеретаскиваемыеЗаказы)
	
	мсвЗаказыДляЗапроса = Новый Массив();
	Для Каждого ТекЗаказ Из ПеретаскиваемыеЗаказы Цикл 
		мсвЗаказыДляЗапроса.Добавить(ТекЗаказ.Заказ);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвЗаказов", мсвЗаказыДляЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	уатЗаказГрузоотправителя.FTL КАК FTL,
	|	уатЗаказГрузоотправителя.Комментарий КАК Комментарий,
	|	уатЗаказГрузоотправителя.ЦветДокумента КАК ЦветДокумента,
	|	уатЗаказГрузоотправителя.Номер КАК Номер,
	|	уатЗаказГрузоотправителя.Маршрут КАК Маршрут
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказов)";
	
	ТабДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекЗаказ Из ПеретаскиваемыеЗаказы Цикл 
		СтрокаДанных = ТабДанных.Найти(ТекЗаказ.Заказ, "Ссылка");
		
		ТекЗаказ.Вставить("Контрагент",          СтрокаДанных.Контрагент);
		ТекЗаказ.Вставить("ДоговорКонтрагента",  СтрокаДанных.ДоговорКонтрагента);
		ТекЗаказ.Вставить("Грузоотправитель",    СтрокаДанных.Грузоотправитель);
		ТекЗаказ.Вставить("Грузополучатель",     СтрокаДанных.Грузополучатель);
		ТекЗаказ.Вставить("ДетализацияЗакрытия", СтрокаДанных.ДетализацияЗакрытия);
		ТекЗаказ.Вставить("FTL",                 СтрокаДанных.FTL);
		ТекЗаказ.Вставить("Комментарий",         СтрокаДанных.Комментарий);
		ТекЗаказ.Вставить("ЦветДокумента",       СтрокаДанных.ЦветДокумента);
		ТекЗаказ.Вставить("Номер",               СтрокаДанных.Номер);
		ТекЗаказ.Вставить("Маршрут",             СтрокаДанных.Маршрут);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокиПогрузкиРазгрузки(УзелМЛ, ПеретаскиваемыеЗаказы)
	
	КоллекцияОбхода = УзелМЛ.ПолучитьЭлементы();
	
	Для Каждого ТекЗаказ Из ПеретаскиваемыеЗаказы Цикл 
		// 1. Поиск строки погрузки.
		флНайден = Ложь;
		Для Каждого СтрокаПункта Из КоллекцияОбхода Цикл 
			Если флНайден Тогда 
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				Если СтрокаЗаказа.Этап = ТекЗаказ.Заказ 
						И (СтрокаЗаказа.Операция = ТипыТочекМаршрута_Погрузка 
						ИЛИ СтрокаЗаказа.Операция = ТипыТочекМаршрута_ДопПогрузка) Тогда 
					ТекЗаказ.Вставить("СтрокаПогрузки", СтрокаЗаказа);
					флНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// 2. Поиск строки разгрузки.
		флНайден = Ложь;
		
		СчПоискПункта = КоллекцияОбхода.Количество()-1;
		Пока Не флНайден И СчПоискПункта >= 0 Цикл 
			СтрокаПункта = КоллекцияОбхода[СчПоискПункта];
			
			СчПоискЗаказа = СтрокаПункта.ПолучитьЭлементы().Количество()-1;
			Пока Не флНайден И СчПоискЗаказа >= 0 Цикл 
				СтрокаЗаказа = СтрокаПункта.ПолучитьЭлементы()[СчПоискЗаказа];
				
				Если СтрокаЗаказа.Этап = ТекЗаказ.Заказ 
						И СтрокаЗаказа.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
					ТекЗаказ.Вставить("СтрокаРазгрузки", СтрокаЗаказа);
					флНайден = Истина;
					Прервать;
				КонецЕсли;
				
				СчПоискЗаказа = СчПоискЗаказа - 1;
			КонецЦикла;
			
			СчПоискПункта = СчПоискПункта - 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоПеретаскиваемыхЗаказовПоМаршруту(ПеретаскиваемыеЗаказы, мсвFTLЗаказов, СоответствиеFTLКоличестваГрузов)
	
	ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы().Очистить();
	СоответсвиеЗаказов = Новый Соответствие();
	
	Для Каждого ТекЗаказ Из ПеретаскиваемыеЗаказы Цикл
		
		Если ТекЗаказ.FTL 
			И СоответствиеFTLКоличестваГрузов.Получить(ТекЗаказ.Заказ) = Неопределено Тогда
			мсвFTLЗаказов.Добавить(ТекЗаказ.Заказ);
			СоответствиеFTLКоличестваГрузов.Вставить(ТекЗаказ.Заказ, 0);
		КонецЕсли;
			
		СтрокаНовЗаказа = ДеревоПеретаскиваемыхЗаказов.ПолучитьЭлементы().Добавить();
		
		СтрокаНовЗаказа.Группировка         = ТекЗаказ.Заказ;
		СтрокаНовЗаказа.Ссылка              = ТекЗаказ.Заказ;
		СтрокаНовЗаказа.Контрагент          = ТекЗаказ.Контрагент;
		СтрокаНовЗаказа.ДоговорКонтрагента  = ТекЗаказ.ДоговорКонтрагента;
		СтрокаНовЗаказа.Грузоотправитель    = ТекЗаказ.Грузоотправитель;
		СтрокаНовЗаказа.Грузополучатель     = ТекЗаказ.Грузополучатель;
		СтрокаНовЗаказа.ДетализацияЗакрытия = ТекЗаказ.ДетализацияЗакрытия;
		СтрокаНовЗаказа.FTL                 = ТекЗаказ.FTL;
		СтрокаНовЗаказа.Комментарий         = ТекЗаказ.Комментарий;
		СтрокаНовЗаказа.Использование       = 1;
		СтрокаНовЗаказа.ОтправлениеС        = ТекЗаказ.СтрокаПогрузки.ОкноС;
		СтрокаНовЗаказа.ОтправлениеПо       = ТекЗаказ.СтрокаПогрузки.ОкноПо;
		СтрокаНовЗаказа.ДоставкаС           = ТекЗаказ.СтрокаРазгрузки.ОкноС;
		СтрокаНовЗаказа.ДоставкаПо          = ТекЗаказ.СтрокаРазгрузки.ОкноПо;
		СтрокаНовЗаказа.ЦветДокумента       = ТекЗаказ.ЦветДокумента;
		СтрокаНовЗаказа.Номер               = ТекЗаказ.Номер;
		СтрокаНовЗаказа.МЛДляЗаписи         = ТекЗаказ.МЛДляЗаписи;
		Если НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
			СтрокаНовЗаказа.Маршрут             = ТекЗаказ.Маршрут;
		КонецЕсли;
	
		СтрокаПунктаПогрузки = ТекЗаказ.СтрокаПогрузки.ПолучитьРодителя();
		СтрокаНовЗаказа.АдресОтправления              = СтрокаПунктаПогрузки.Адрес;
		СтрокаНовЗаказа.АдресОтправленияПредставление = СтрокаПунктаПогрузки.Группировка;
		СтрокаНовЗаказа.ЛатОтпр                       = СтрокаПунктаПогрузки.Лат;
		СтрокаНовЗаказа.ЛонОтпр                       = СтрокаПунктаПогрузки.Лон;
		СтрокаНовЗаказа.АдресОтправленияУказанНаКарте = СтрокаПунктаПогрузки.АдресГруппировкаУказанНаКарте;
		
		СтрокаПунктаРазгрузки = ТекЗаказ.СтрокаРазгрузки.ПолучитьРодителя();
		СтрокаНовЗаказа.АдресНазначения              = СтрокаПунктаРазгрузки.Адрес;
		СтрокаНовЗаказа.АдресНазначенияПредставление = СтрокаПунктаРазгрузки.Группировка;
		СтрокаНовЗаказа.ЛатНазн                      = СтрокаПунктаРазгрузки.Лат;
		СтрокаНовЗаказа.ЛонНазн                      = СтрокаПунктаРазгрузки.Лон;
		СтрокаНовЗаказа.АдресНазначенияУказанНаКарте = СтрокаПунктаРазгрузки.АдресГруппировкаУказанНаКарте;
		
		ТекНовСтрокаЗаказ = СоответсвиеЗаказов.Получить(СтрокаНовЗаказа.Ссылка);
		Если ТекНовСтрокаЗаказ = Неопределено Тогда
			МассивГрузов = ПолучитьВсеГрузыЗаказа(СтрокаНовЗаказа.Ссылка, СтрокаНовЗаказа.ДетализацияЗакрытия);
			СоответствиеFTLКоличестваГрузов.Вставить(СтрокаНовЗаказа.Ссылка, МассивГрузов.Количество());
		КонецЕсли;
		СоответсвиеЗаказов.Вставить(СтрокаНовЗаказа.Ссылка, СтрокаНовЗаказа.Ссылка);
		
		Если ТекЗаказ.Грузы = Неопределено Тогда 
			СтрокаНовЗаказа.Количество = 1;
			СтрокаНовЗаказа.ВесБрутто  = ТекЗаказ.СтрокаПогрузки.ВесБрутто;
			СтрокаНовЗаказа.Объем      = ТекЗаказ.СтрокаПогрузки.Объем;
			СтрокаНовЗаказа.КолМест    = ТекЗаказ.СтрокаПогрузки.КолМест;
			
		Иначе 
			Для Каждого ТекГруз Из ТекЗаказ.Грузы Цикл 
				СтрокаНовГруза = СтрокаНовЗаказа.ПолучитьЭлементы().Добавить();
				СтрокаНовГруза.Группировка      = ТекГруз.Груз;
				СтрокаНовГруза.Номенклатура     = ТекГруз.Груз;
				СтрокаНовГруза.ЕдиницаИзмерения = ТекГруз.ЕдиницаИзмерения;
				СтрокаНовГруза.Количество       = ТекГруз.Количество;
				СтрокаНовГруза.Использование    = 1;
				СтрокаНовГруза.ВесБрутто        = ТекГруз.ВесБрутто;
				СтрокаНовГруза.Объем            = ТекГруз.Объем;
				СтрокаНовГруза.КолМест          = ТекГруз.КолМест;
				СтрокаНовГруза.Код              = ТекГруз.Код;
				СтрокаНовГруза.НомерСтроки      = ТекГруз.НомерСтроки;

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуОтправления(Заказ)
	Возврат Заказ.ОтправлениеС;
КонецФункции

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеМЛПриУдаленииИзДерева(ДокументСсылка)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ДокОб = ДокументСсылка.ПолучитьОбъект();
	ДокОб.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостоянияВхожденияВОкна(СтрокаТСПриемник = Неопределено, МассивОшибок)
	
	Если СтрокаТСПриемник = Неопределено Тогда
		Для Каждого ТекСтрокаТС ИЗ МаршрутыДерево.ПолучитьЭлементы() Цикл
			ПроверитьСостоянияВхожденияВОкна(ТекСтрокаТС, МассивОшибок);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрокаМЛ ИЗ СтрокаТСПриемник.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрокаМЛ.ПолучитьЭлементы().Количество() тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТекСтрокаПункт ИЗ ТекСтрокаМЛ.ПолучитьЭлементы() Цикл
			Если НЕ ТекСтрокаПункт.ПолучитьЭлементы().Количество() тогда
				Продолжить;
			КонецЕсли;
			
			врПрибытие = ТекСтрокаПункт.ВремяПрибытияВПункт;
			врУбытие = ТекСтрокаПункт.УбытиеПлан;
			
			Для Каждого ТекСтрокаЗаказ ИЗ ТекСтрокаПункт.ПолучитьЭлементы() Цикл
				
				ОкноС = ТекСтрокаЗаказ.ОкноС;
				ОкноПо = ТекСтрокаЗаказ.ОкноПо;
				
				Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
					ПроверяемоеВремя = врУбытие;
					СтрокаПункт = НСтр("en='Departure time from point:';ru='Время отправления из пункта:'") + " " + ТекСтрокаПункт.Группировка + " (" + Формат(ПроверяемоеВремя, "ДФ='дд.ММ.гг ЧЧ:мм'") + "), ";
				ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
					ПроверяемоеВремя = врПрибытие;
					СтрокаПункт = НСтр("en='Arrival time at point:';ru='Время прибытия в пункт:'") + " " + ТекСтрокаПункт.Группировка + " (" + Формат(ПроверяемоеВремя, "ДФ='дд.ММ.гг ЧЧ:мм'") + "), ";
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОкноС) И ЗначениеЗаполнено(ОкноПо) Тогда
					Если ПроверяемоеВремя < ОкноС ИЛИ ПроверяемоеВремя > ОкноПо Тогда
						// Проверяемое время не входит в нужный интервал
						СтрокаЗаказ = НСтр("en='not included to order interval';ru='не входит в интервал заказа'") + " " + ПолучитьСтруктуруРеквизитовЗаказа(ТекСтрокаЗаказ.Этап).Номер + ": " + НСтр("en='from';ru='с'") + " " + Формат(ОкноС, "ДФ='дд.ММ.гг ЧЧ:мм'") 
						+ " " + НСтр("en='till';ru='по'") + " " + Формат(ОкноПо, "ДФ='дд.ММ.гг ЧЧ:мм'"); 
						
						МассивОшибок.Добавить("" + СтрокаПункт + СтрокаЗаказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостоянияВхожденияВОкнаСписок(МассивОшибок)
	
	Для Каждого ТекСтрокаПункт ИЗ МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрокаПункт.ПолучитьЭлементы().Количество() тогда
			Продолжить;
		КонецЕсли;
		
		врПрибытие = ТекСтрокаПункт.ВремяПрибытияВПункт;
		врУбытие = ТекСтрокаПункт.УбытиеПлан;
		
		Для Каждого ТекСтрокаЗаказ ИЗ ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			
			ОкноС = ТекСтрокаЗаказ.ОкноС;
			ОкноПо = ТекСтрокаЗаказ.ОкноПо;
			
			Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
				ПроверяемоеВремя = врУбытие;
				СтрокаПункт = НСтр("en='Departure time from point:';ru='Время отправления из пункта:'") + " " + ТекСтрокаПункт.Группировка + " (" + Формат(ПроверяемоеВремя, "ДФ='дд.ММ.гг ЧЧ:мм'") + "), ";
			ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
				ПроверяемоеВремя = врПрибытие;
				СтрокаПункт = НСтр("en='Arrival time at point:';ru='Время прибытия в пункт:'") + " " + ТекСтрокаПункт.Группировка + " (" + Формат(ПроверяемоеВремя, "ДФ='дд.ММ.гг ЧЧ:мм'") + "), ";
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОкноС) И ЗначениеЗаполнено(ОкноПо) Тогда
				Если ПроверяемоеВремя < ОкноС ИЛИ ПроверяемоеВремя > ОкноПо Тогда
					// Проверяемое время не входит в нужный интервал
					СтрокаЗаказ = НСтр("en='not included to order interval';ru='не входит в интервал заказа'") + " " + ПолучитьСтруктуруРеквизитовЗаказа(ТекСтрокаЗаказ.Этап).Номер + ": " + НСтр("en='from';ru='с'") + " " + Формат(ОкноС, "ДФ='дд.ММ.гг ЧЧ:мм'") 
					+ " " + НСтр("en='till';ru='по'") + " " + Формат(ОкноПо, "ДФ='дд.ММ.гг ЧЧ:мм'"); 
					
					МассивОшибок.Добавить("" + СтрокаПункт + СтрокаЗаказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРеквизитовЗаказа(ЗаказСсылка)
	СтруктураРез = Новый Структура;
	СтруктураРез.Вставить("Контрагент", ЗаказСсылка.Контрагент);
	СтруктураРез.Вставить("АдресОтправления", ЗаказСсылка.АдресОтправления);
	СтруктураРез.Вставить("АдресНазначения", ЗаказСсылка.АдресНазначения);
	СтруктураРез.Вставить("ДатаОтправления", ЗаказСсылка.ОтправлениеС);
	СтруктураРез.Вставить("ДатаВыполнения", ЗаказСсылка.ДоставкаС);
	СтруктураРез.Вставить("ЗаказыВесБрутто", ЗаказСсылка.Товары.Итог("ВесБрутто"));
	СтруктураРез.Вставить("ЗаказыОбъем", ЗаказСсылка.Товары.Итог("Объем"));
	СтруктураРез.Вставить("ЗаказыКоличествоМест", ЗаказСсылка.Товары.Итог("КоличествоМест"));
	СтруктураРез.Вставить("Номер", ЗаказСсылка.Номер);
	
	Возврат СтруктураРез;
КонецФункции

#КонецОбласти

#Область Картография

&НаКлиенте
Процедура ИнициализацияКарты()
	
	ПараметрыФормы = Новый Структура("РежимОткрытия", "РежимКарты_АРМЛогиста");
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 

		Если ФормаКарты <> Неопределено Тогда 
			ФормаКарты.Активизировать();
		Иначе 
			Если НастройкаРежимОткрытияКарты = 0 Тогда
				ФормаКарты = ОткрытьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаКарты", ПараметрыФормы, ЭтотОбъект,,  ВариантОткрытияОкна.ОтдельноеОкно);
				Оповестить("СкрытьРазвернутьПанельПодбора",, ЭтотОбъект);
			Иначе
				ТекстПредупреждения = НСтр("ru='Открытие карты...'");
				ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 1);
				ФормаКарты = ОткрытьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаКарты", ПараметрыФормы, ЭтотОбъект,,  ВариантОткрытияОкна.ОтдельноеОкно);
				Оповестить("СкрытьРазвернутьПанельПодбора",, ЭтотОбъект);
			КонецЕсли;
			Оповестить("УстановитьРежимРаботы", ПараметрыФормы, ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		уатЭлектронныеКартыКлиент.ПроверитьКартыOSMВПодчиненнойФорме(ФормаКарты, ТекстОшибки);
		Если Не ТекстОшибки = "" Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		Оповестить("УстановитьРежимРаботы", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ТекстОшибки = Нстр("ru = 'Для использования электронных карт необходимо включить сервис ""Картография""
		|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеНаКарте()
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
		ОтобразитьДанныеНаКартеOSM();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеНаКарте_МЛ()
	
	ОтобразитьДанныеНаКарте_МЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте_МЛ(GUIDМЛ = Неопределено)
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
			
		ОтобразитьДанныеНаКартеOSM(, ?(GUIDМЛ = Неопределено, GUIDМЛПодбора, GUIDМЛ), Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте_МЛисты(ОбновлятьТС = Ложь)
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
			
		ОтобразитьДанныеНаКартеOSM(,, Ложь,,ОбновлятьТС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте_МЛ_Удалить()
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
			
		Оповестить("АРМЛогиста_ОтобразитьДанныеНаКарте_МЛ_Удалить", GUIDМЛПодбора, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеНаКарте_Заказ()
	
	ОтобразитьДанныеНаКарте_Заказ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте_Заказ(ТекущиеДанные = Неопределено)
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
			
		Если ТипЗнч(ТекущиеДанные) = Тип("Массив") Тогда
			ОтобразитьДанныеНаКартеOSM(,ТекущиеДанные,, Ложь);
		Иначе
			ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ОтобразитьДанныеНаКартеOSM(,ТекущиеДанные.Ссылка,, Ложь); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеНаКарте_Заказы()
	
	ОтобразитьДанныеНаКарте_Заказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте_Заказы()
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
		ОтобразитьДанныеНаКартеOSM(,,, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеНаКарте_Заказ_Удалить()
	 ОтобразитьДанныеНаКарте_Заказ_Удалить();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте_Заказ_Удалить(ТекущиеДанные = Неопределено)
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
			
		Если ТипЗнч(ТекущиеДанные) = Тип("Массив") Тогда
			Оповестить("Подключаемый_ОтобразитьДанныеНаКарте_Заказ_Удалить", ТекущиеДанные, ЭтотОбъект);	
		Иначе
			Если ТекущиеДанные  = Неопределено Тогда
				ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
				Если ТекущиеДанные = Неопределено Тогда
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
			
			МассивДляУдаления = Новый Массив();
			Для Каждого ТекСтрока Из ОтмеченныеЗаказы Цикл
				Если ТекСтрока.Ссылка = ТекущиеДанные.Ссылка Тогда
					МассивДляУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			ФлагЕстьИзменения = Ложь;
			Для Каждого ТекСтрока Из МассивДляУдаления Цикл
				СнятьОтметкуСЗаказа(,ТекСтрока);
				ФлагЕстьИзменения = Истина;
			КонецЦикла;   
			Если ФлагЕстьИзменения Тогда
				НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
				ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
				ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
			КонецЕсли;
			Элементы.ЗаказыСписок.Обновить();
			
			Оповестить("Подключаемый_ОтобразитьДанныеНаКарте_Заказ_Удалить", ТекущиеДанные.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКартеOSM(СтрокаДляФокусировки = Неопределено, ОбъектДляотображения = Неопределено,
	ОбновлятьЗаказы = Истина, ОбновлятьМЛ = Истина, ОбновитьТС = Ложь)

	Если ФормаКарты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	уатЭлектронныеКартыКлиент.ПроверитьКартыOSMВПодчиненнойФорме(ФормаКарты, ТекстОшибки);
	Если НЕ ТекстОшибки = "" Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ФормаКарты.РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		ПараметрыФормы = Новый Структура("РежимОткрытия", "РежимКарты_АРМЛогиста");
		Оповестить("УстановитьРежимРаботы", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	СтруктураПараметров = СформироватьДанныеДляОтображенияНаКарте(ОбъектДляотображения, ОбновлятьЗаказы, ОбновлятьМЛ);
	СтруктураПараметров.Вставить("ОбновитьТС",      ОбновитьТС); 
	СтруктураПараметров.Вставить("ОбновлятьМЛ",     ОбновлятьМЛ);
	СтруктураПараметров.Вставить("ОбновлятьЗаказы", ОбновлятьЗаказы);
	
	Если ОбъектДляотображения <> Неопределено
		И ОбновлятьЗаказы И НЕ ОбновлятьМЛ Тогда
		Оповестить("АРМЛогиста_ОтобразитьДанныеНаКарте_Заказ", СтруктураПараметров, ЭтотОбъект);
	ИначеЕсли ОбъектДляотображения <> Неопределено
		И ОбновлятьМЛ И НЕ ОбновлятьЗаказы  Тогда
		Оповестить("АРМЛогиста_ОтобразитьДанныеНаКарте_МЛ", СтруктураПараметров, ЭтотОбъект);	
	Иначе
		Оповестить("АРМЛогиста_ОтобразитьДанныеНаКарте", СтруктураПараметров, ЭтотОбъект);
	КонецЕсли;
		
	ИсточникВыделенияНаКарте = 0;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляОтображенияНаКарте(ОбъектДляотображения = Неопределено, ОбновлятьЗаказы = Истина, ОбновлятьМЛ = Истина);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СтрокаДляФокусировкиМЛ = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если СтрокаДляФокусировкиМЛ <> Неопределено Тогда 
			Если СтрокаДляФокусировкиМЛ.ПолучитьРодителя() = Неопределено
				И СтрокаДляФокусировкиМЛ.ПолучитьЭлементы().Количество() Тогда 
				Если ИсточникВыделенияНаКарте = 2 Тогда
					СтрокаДляФокусировкиМЛ.ПолучитьЭлементы()[0].СоздатьМаршрутныйЛист = Истина;
				КонецЕсли;
				СтрокаДляФокусировкиМЛ = СтрокаДляФокусировкиМЛ.ПолучитьЭлементы()[0].GUID;
			Иначе
				Если ИсточникВыделенияНаКарте = 2 Тогда
					СтрокаДляФокусировкиМЛ.СоздатьМаршрутныйЛист = Истина;
				КонецЕсли;
				СтрокаДляФокусировкиМЛ = СтрокаДляФокусировкиМЛ.GUID;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаДляФокусировкиМЛ = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если СтрокаДляФокусировкиМЛ <> Неопределено Тогда
			Если ИсточникВыделенияНаКарте = 2 Тогда
				СтрокаДляФокусировкиМЛ.СоздатьМаршрутныйЛист = Истина;
			КонецЕсли;
			СтрокаДляФокусировкиМЛ = СтрокаДляФокусировкиМЛ.GUID;
		КонецЕсли;
	КонецЕсли;
	СтрокаДляФокусировкиЗаказ  = Элементы.ЗаказыСписок.ТекущиеДанные;

	Если ИсточникВыделенияНаКарте = 2 Тогда
		СтрокаДляФокусировкиЗаказ  = Неопределено;
	ИначеЕсли ИсточникВыделенияНаКарте = 1 Тогда
		СтрокаДляФокусировкиМЛ     = Неопределено;
	КонецЕсли;
	
	Если ОбновлятьМЛ Тогда
		мсвМаршрутов = ЗаполнитьТаблицуМаршрутовДляКарты(СтрокаДляФокусировкиМЛ, ОбъектДляотображения); 
	Иначе
		мсвМаршрутов = Новый Массив();
	КонецЕсли;
	Если ОбновлятьЗаказы Тогда
		мсвАдресов = ЗаполнитьМассивЗаказовДляКарты(СтрокаДляФокусировкиЗаказ, ОбъектДляотображения);
	Иначе
		мсвАдресов = Новый Массив();
	КонецЕсли;
		
	ГруппаКомандОтображения = ФормаКарты.Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы;
	
	ТекТаблицаМаршрутов     = ?(ГруппаКомандОтображения.ОтображатьМЛ.Пометка,
		мсвМаршрутов, 
		Новый Массив());
	ТекМсвАдреса          = ?(ГруппаКомандОтображения.ОтображатьПунктыПогрузкиЗаказов.Пометка 
			ИЛИ ГруппаКомандОтображения.ОтображатьПунктыРазгрузкиЗаказов.Пометка 
			ИЛИ ГруппаКомандОтображения.ОтображатьНаправленияЗаказов.Пометка, 
		мсвАдресов, 
		Новый Массив());

	АвтоМаштабировать   = ИсточникВыделенияНаКарте <> 0;
	
	СтруктураПараметров = Новый Структура("ТаблицаМаршрутов, мсвАдреса, АвтоМаштабировать",
	ТекТаблицаМаршрутов, ТекМсвАдреса, АвтоМаштабировать);

	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьМассивЗаказовДляКарты(СтрокаДляФокусировкиЗаказ, ОбъектДляотображения = Неопределено)
	
	мсвАдресов = Новый Массив();
	
	СоответсвиеЗаказов = Новый Соответствие();
	МассивЗаказов      = Новый Массив();
	
	Если ОбъектДляотображения <> Неопределено
		И ТипЗнч(ОбъектДляотображения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		МассивЗаказов.Добавить(ОбъектДляотображения); 
	ИначеЕсли ОбъектДляотображения <> Неопределено
		И ТипЗнч(ОбъектДляотображения) = Тип("Массив") Тогда
		Для Каждого ТекСтрокаЗаказа Из ОбъектДляотображения Цикл
			МассивЗаказов.Добавить(ТекСтрокаЗаказа);
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрокаЗаказа Из ОтмеченныеЗаказы Цикл
			МассивЗаказов.Добавить(ТекСтрокаЗаказа.Ссылка);
		КонецЦикла;
	КонецЕсли;

	КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
	МассивЗаказов, Истина);
	
	ИндексАдреса           = 0;
	флагМодификацииЗаказов = Ложь;
	Для Каждого ТекСтрЗаказ Из КомпоновщикСпискаЗаказов Цикл 
		
		КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
		ТекСтрЗаказ.Ссылка, ТекСтрЗаказ.ИдентификаторСтроки);
		
		Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
			ОтмеченныеЗаказы.Добавить(КлючСтроки);
			МодифицироватьОтметкуЗаказа(ТекСтрЗаказ, Истина, КлючСтроки);
			
			флагМодификацииЗаказов = Истина;
		КонецЕсли;
		
		ТекущаяСтрокаЗаказа = СоответсвиеЗаказов.Получить(ТекСтрЗаказ.Ссылка);
		Если ТекущаяСтрокаЗаказа <> Неопределено Тогда
			ИндексАдреса = ТекущаяСтрокаЗаказа;
			ТекущаяСтрокаЗаказа = мсвАдресов[ИндексАдреса];
			ДанныеЗаказа = ТекущаяСтрокаЗаказа.ДанныеЗаказа;
			ДанныеЗаказа.ВесБрутто = ДанныеЗаказа.ВесБрутто + ТекСтрЗаказ.ВесБрутто;
			ДанныеЗаказа.Объем     = ДанныеЗаказа.Объем + ТекСтрЗаказ.Объем;
			ДанныеЗаказа.КолМест   = ДанныеЗаказа.КолМест + ТекСтрЗаказ.КоличествоМест;
			Продолжить;
		КонецЕсли;
		
		ПредставлениеЗаказаДляКартыOSM              = ТекСтрЗаказ.ПредставлениеЗаказаДляКартыOSM;
		ПредставлениеГиперссылкиРучнойМаршрутизации = ТекСтрЗаказ.ПредставлениеГиперссылкиРучнойМаршрутизации;
		
		АдресОтправленияНадпись = уатЭлектронныеКартыКлиент.СформироватьПредставлениеЗаказаДляКарты(ПредставлениеЗаказаДляКартыOSM[0], ПредставлениеГиперссылкиРучнойМаршрутизации);
		АдресОтправления = Новый Структура("Лат, Лон, Представление",
		ТекСтрЗаказ.ЛатОтправления,
		ТекСтрЗаказ.ЛонОтправления,
		АдресОтправленияНадпись);
		
		АдресНазначенияНадпись = уатЭлектронныеКартыКлиент.СформироватьПредставлениеЗаказаДляКарты(ПредставлениеЗаказаДляКартыOSM[1], ПредставлениеГиперссылкиРучнойМаршрутизации);
		АдресНазначения = Новый Структура("Лат, Лон, Представление",
		ТекСтрЗаказ.ЛатНазначения,
		ТекСтрЗаказ.ЛонНазначения,
		АдресНазначенияНадпись);
		
		ЗаказНаТСПредставление = "Заказ на ТС" + " " + ТекСтрЗаказ.Номер + " от " + ТекСтрЗаказ.Дата;
		
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Ссылка",        ТекСтрЗаказ.Ссылка);
		ДанныеЗаказа.Вставить("Представление", ЗаказНаТСПредставление);
		ДанныеЗаказа.Вставить("ВесБрутто",     ТекСтрЗаказ.ВесБрутто);
		ДанныеЗаказа.Вставить("Объем",         ТекСтрЗаказ.Объем);
		ДанныеЗаказа.Вставить("КолМест",       ТекСтрЗаказ.КоличествоМест);
		
		Фокус = ?(СтрокаДляФокусировкиЗаказ <> Неопределено
		И ТипЗнч(СтрокаДляФокусировкиЗаказ) = Тип("ДанныеФормыСтруктура"), ТекСтрЗаказ.Ссылка = СтрокаДляФокусировкиЗаказ.Ссылка, Ложь);
		
		мсвАдресов.Добавить(Новый Структура("АдресОтправления, АдресНазначения, ЦветЛинии,
		|Фокус, ДанныеЗаказа",
		АдресОтправления,
		АдресНазначения,
		уатЭлектронныеКартыКлиент.ПолучитьЦветДокументаПоКоллекции(ТекСтрЗаказ.ЦветДокумента),
		Фокус,
		ДанныеЗаказа));
		
		СоответсвиеЗаказов.Вставить(ТекСтрЗаказ.Ссылка, ИндексАдреса);
		ИндексАдреса = ИндексАдреса + 1;
	КонецЦикла;
	
	Если флагМодификацииЗаказов Тогда
		НастройкиКомпоновщикаЗаказов       = ЗаказыСписок.КомпоновщикНастроек.Настройки;
		ДополнительныеСвойстваКомпоновщика = НастройкиКомпоновщикаЗаказов.ДополнительныеСвойства;
		ДополнительныеСвойстваКомпоновщика.Вставить("ОтмеченныеЗаказы", ОтмеченныеЗаказы);
		Элементы.ЗаказыСписок.Обновить();
	КонецЕсли;
	
	Возврат мсвАдресов;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуМаршрутовДляКарты(СтрокаДляФокусировки, ОбъектДляотображения = Неопределено)
	
	мсвМаршрутов = Новый Массив();
	
	Если ТипЗнч(ОбъектДляотображения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Возврат мсвМаршрутов;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Для Каждого ТекСтрГруппировка Из ТекСтрТС.ПолучитьЭлементы() Цикл 
				Если ТекСтрГруппировка.СоздатьМаршрутныйЛист 
					ИЛИ (ЗначениеЗаполнено(GUIDМЛПодбора)
					И ТекСтрГруппировка.GUID = GUIDМЛПодбора)
					И (ОбъектДляотображения = Неопределено
					ИЛИ ТекСтрГруппировка.GUID = ОбъектДляотображения) Тогда 
					стрМаршрут = Новый Структура("Координаты, Цвет, Фокус, GUIDТС, GUIDМЛ");
					стрМаршрут.GUIDТС     = ТекСтрТС.GUID;
					стрМаршрут.GUIDМЛ     = ТекСтрГруппировка.GUID;
					стрМаршрут.Цвет       = ПолучитьЦветДокументаПоКоллекции(ТекСтрГруппировка.ЦветДокумента);
					стрМаршрут.Координаты = Новый Массив();
					Для Каждого ТекПункт Из ТекСтрГруппировка.ПолучитьЭлементы() Цикл 
						стрКоординаты = Новый Структура("lat, lon, Представление, НомерИконки");
						стрКоординаты.lat         = ТекПункт.Лат;
						стрКоординаты.lon         = ТекПункт.Лон;
						стрКоординаты.НомерИконки = 9;
						
						СтруктураНастроек = Новый Структура();
						СтруктураНастроек.Вставить("ТипДокумента",  "МаршрутныйЛист");
						СтруктураНастроек.Вставить("ТС",              ТекСтрТС.ТС);
						СтруктураНастроек.Вставить("МЛ",              ТекСтрГруппировка.Группировка);
						СтруктураНастроек.Вставить("ПредставлениеМЛ", ТекСтрГруппировка.ПредставлениеОбъектаДляКартыOSM);
						СтруктураНастроек.Вставить("Пункт",         ?(ТипЗнч(ТекПункт.Адрес) = Тип("СправочникСсылка.уатПунктыНазначения"),
						ТекПункт.Адрес, Справочники.уатПунктыНазначения.ПустаяСсылка()));
						СтруктураНастроек.Вставить("АдресПункта",   ТекПункт.Адрес);
						СтруктураНастроек.Вставить("ПрибытиеПлан",  ТекПункт.ВремяПрибытияВПункт);
						СтруктураНастроек.Вставить("УбытиеПлан",    ТекПункт.УбытиеПлан);
						СтруктураНастроек.Вставить("МассивЗаказов", ТекПункт.ПолучитьЭлементы());
						СтруктураНастроек.Вставить("АРМЛогиста",    Истина);
						
						Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда
							СтруктураНастроек.Вставить("Яндекс", Истина);
						КонецЕсли;
						
						стрКоординаты.Представление = уатЭлектронныеКартыСервер.СформироватьПредставлениеОбъектаДляКарты(СтруктураНастроек);
						стрМаршрут.Координаты.Добавить(стрКоординаты);
					КонецЦикла;
					
					Если ТекСтрГруппировка.GUID = СтрокаДляФокусировки Тогда 
						стрМаршрут.Фокус = Истина;
					Иначе 
						стрМаршрут.Фокус = Ложь;
					КонецЕсли;
					
					мсвМаршрутов.Добавить(стрМаршрут);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрТС Из МаршрутыСписок Цикл 
			Если НЕ ЗначениеЗаполнено(ТекСтрТС.МЛ)
				И НЕ ТекСтрТС.НовыйМЛ Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭтоАдресВременногоХранилища(ТекСтрТС.АдресВременногоХранилища) Тогда
				Продолжить;
			КонецЕсли;
			
			ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекСтрТС.АдресВременногоХранилища, ТекСтрТС.GUID);
			
			Если ТекСтрТС.СоздатьМаршрутныйЛист
				ИЛИ (ЗначениеЗаполнено(GUIDМЛПодбора)
					И ТекСтрТС.GUID = GUIDМЛПодбора) 
					И (ОбъектДляотображения = Неопределено
					ИЛИ ТекСтрТС.GUID = ОбъектДляотображения) Тогда  
					
				стрМаршрут = Новый Структура("Координаты, Цвет, Фокус, GUIDТС, GUIDМЛ");
				стрМаршрут.GUIDТС     = ТекСтрТС.GUID;
				стрМаршрут.GUIDМЛ     = ТекСтрТС.GUID;
				стрМаршрут.Цвет       = ПолучитьЦветДокументаПоКоллекции(ТекСтрТС.ЦветДокумента);
				стрМаршрут.Координаты = Новый Массив();
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекСтрТС.GUID, "Пункт"));
				Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл 
					стрКоординаты = Новый Структура("lat, lon, Представление, НомерИконки");
					стрКоординаты.lat         = ТекПункт.Лат;
					стрКоординаты.lon         = ТекПункт.Лон;
					стрКоординаты.НомерИконки = 9;
					
					ГруппаОпераций = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
						ТекСтрТС.GUID, ТекПункт.GUIDПункта, "Заказ"));
						
						
					ПредставлениеМЛ = ?(ЗначениеЗаполнено(ТекСтрТС.МЛ), 
						ТекСтрТС.ПредставлениеМЛ, 
						НСтр("en='New routing list';ru='Новый маршрутный лист'"));

					ДополнительныеПараметрыНадписи = Новый Структура("АРМЛогиста,ПредставлениеМЛ,ТС,Пункт,ПрибытиеПлан,УбытиеПлан",
						Истина,ПредставлениеМЛ,ТекСтрТС.ТС,ТекПункт.Адрес, ТекПункт.ВремяПрибытияВПункт,
						ТекПункт.УбытиеПлан);
					
					ТекстНадписи = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ТекСтрТС.МЛ, ДополнительныеПараметрыНадписи); 
					
					ДополнительныеПараметрыНадписи.Вставить("МассивЗаказов", ГруппаОпераций);
					ДополнительныеПараметрыНадписи.Вставить("МЛ",            ТекСтрТС.МЛ);
					ТекстНадписи = уатЭлектронныеКартыСервер.СформироватьПредставлениеМЛДляКарты(ТекстНадписи, ДополнительныеПараметрыНадписи); 
					
					стрКоординаты.Представление = ТекстНадписи;
						
					стрМаршрут.Координаты.Добавить(стрКоординаты);
				КонецЦикла;
				
				Если ТекСтрТС.GUID = СтрокаДляФокусировки Тогда 
					стрМаршрут.Фокус = Истина;
				Иначе 
					стрМаршрут.Фокус = Ложь;
				КонецЕсли;
				
				мсвМаршрутов.Добавить(стрМаршрут);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат мсвМаршрутов;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветДокументаПоКоллекции(Знач ИндексЦвета)
	
	Возврат уатАРМ.ПолучитьЦветДокументаПоКоллекции(ИндексЦвета);
	
КонецФункции // ПолучитьЦветДокументаПоКоллекции()

#КонецОбласти

&НаКлиенте
Процедура СоздатьМаршрутныеЛисты(Команда)
	
	ФлагОбновлениеСпискаЗаказов = Истина;
	флЕстьМЛДляСоздания         = Ложь;
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Для Каждого ТекМЛ Из ТекСтрока.ПолучитьЭлементы() Цикл
				Если ТекМЛ.СоздатьМаршрутныйЛист Тогда
					флЕстьМЛДляСоздания = Истина;
					Прервать;
				КонецЕсли;
			КонеЦЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписок Цикл
			Если ТекСтрока.СоздатьМаршрутныйЛист Тогда
				флЕстьМЛДляСоздания = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не флЕстьМЛДляСоздания Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАвтоматическогоРазмещения = Новый Структура("АвтоРазмещениеВключено, ОбъемВсего, Распределено", Ложь, 0, 0);
	Если ИспользоватьРазмещениеВСекциях 
		И НастройкаУчитыватьСекцииТранспортныхСредств Тогда 
		ПараметрыАвтоматическогоРазмещения = ПолучитьПараметрыАвтоматическогоРазмещенияВСекциях();
	КонецЕсли;
	
	Если ПараметрыАвтоматическогоРазмещения.АвтоРазмещениеВключено Тогда
		Если ПараметрыАвтоматическогоРазмещения.Распределено = 0 Тогда
			// Распределение по секциям не выполнялось раньше, выполняем его сейчас, не задавая вопросов.
			АвтоматическоеРаспределениеСервер();
		ИначеЕсли ПараметрыАвтоматическогоРазмещения.ОбъемВсего > ПараметрыАвтоматическогоРазмещения.Распределено Тогда
			// Распределение по секциям выполнено не полностью, выполняем его.
			АвтоматическоеРаспределениеСервер();
		//Иначе
			// Не выполняем перераспределение, чтобы сохранить установленное пользователем распределение по секциям
			//АвтоматическоеРаспределениеСервер();
		КонецЕсли;
	КонецЕсли;
	СоздатьМаршрутныеЛистыЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыОткрытьОбъект(Команда)
	
	Если Элементы.МаршрутыДерево.ТекущийЭлемент <> Элементы.МаршрутыГруппировка И 
		Элементы.МаршрутыДерево.ТекущийЭлемент <> Элементы.МаршрутыДеревоМаршрутРаспредление Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.УровеньДерева <> "Пункт" И Элементы.МаршрутыДерево.ТекущийЭлемент = Элементы.МаршрутыДеревоМаршрутРаспредление Тогда
		Маршрут = ПолучениеМаршрутаЗакрепленногоТС(ТекСтрока.Маршрут);
		Попытка
			ПоказатьЗначение(, Маршрут);
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если Элементы.МаршрутыДерево.ТекущийЭлемент <> Элементы.МаршрутыГруппировка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.УровеньДерева = "Пункт" Тогда
		Попытка
			ПоказатьЗначение(, ТекСтрока.Адрес);
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.УровеньДерева = "Заказ" Тогда
		Попытка
			ПоказатьЗначение(, ТекСтрока.Этап);
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.УровеньДерева = "МЛ" И ТипЗнч(ТекСтрока.Группировка) = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка") Тогда
		ТекстНСТР = НСтр("en='Routing list is not recorded!';ru='Маршрутный лист не записан!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Попытка
		ПоказатьЗначение(, ТекСтрока.Группировка);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучениеМаршрутаЗакрепленногоТС(Маршрут)
	
	Если ТипЗнч(Маршрут) <> Тип("Строка") Тогда
		Возврат Маршрут;
	КонецЕсли;
	
	Возврат Справочники.уатМаршруты.НайтиПоНаименованию(СтрРазделить(Маршрут, ";")[0]);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммарныеХарактеристикиСцепки(ТС, Прицеп1, Прицеп2,
	НастройкаАлгоритмМаршрутизации, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова)
	
	ХарактеристикиСцепки = Новый Структура("Грузоподъемность, ОбъемКузова, МаксимальноеКоличествоУпаковок, ТипТС", 0, 0, 0, Неопределено);
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(ТС);
	мсвТС.Добавить(Прицеп1);
	мсвТС.Добавить(Прицеп2);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	Запрос.УстановитьПараметр("КоэфГрузоподъемности", КоэффициентГрузоподъемности);
	Запрос.УстановитьПараметр("КоэфОбъемаКузова",     КоэффициентОбъемаКузова);
	Запрос.УстановитьПараметр("ЯндексМаршрутизация",  НастройкаАлгоритмМаршрутизации = 3);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатТС.Грузоподъемность <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатТС.Грузоподъемность * &КоэфГрузоподъемности
	|		ИНАЧЕ уатТС.Модель.Грузоподъемность * &КоэфГрузоподъемности
	|	КОНЕЦ КАК Грузоподъемность,
	|	ВЫБОР
	|		КОГДА уатТС.ОбъемКузова <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатТС.ОбъемКузова * &КоэфОбъемаКузова
	|		ИНАЧЕ уатТС.Модель.ОбъемКузова * &КоэфОбъемаКузова
	|	КОНЕЦ КАК ОбъемКузова,
	|	ВЫБОР
	|		КОГДА уатТС.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатТС.МаксимальноеКоличествоУпаковок
	|		ИНАЧЕ уатТС.Модель.МаксимальноеКоличествоУпаковок
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.Ссылка В(&мсвТС)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ХарактеристикиСцепки.Грузоподъемность               = Выборка.Грузоподъемность;
		ХарактеристикиСцепки.ОбъемКузова                    = Выборка.ОбъемКузова;
		ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок = Выборка.МаксимальноеКоличествоУпаковок;
	КонецЦикла;
		
	ХарактеристикиСцепки.ТипТС = ТС.ТипТС;
	Если Не ЗначениеЗаполнено(ХарактеристикиСцепки.ТипТС) Тогда 
		ХарактеристикиСцепки.ТипТС = ТС.Модель.ТипТС;
	КонецЕсли;
	
	Возврат ХарактеристикиСцепки;
	
КонецФункции // ПолучитьСуммарныеХарактеристикиСцепки()

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказов(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
			ПоказатьПредупреждение(, НСтр("en='For rebuild orders, it is neccesary to salect routing list.';ru='Для перестроения заказов необходимо выбрать маршрутный лист.'"));
			Возврат;
		КонецЕсли;
		
		ТекМЛ = ТекущиеДанные;
		ТекМЛ.Модифицированность = Истина;
		Пока Не ТекМЛ.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Цикл 
			ТекМЛ = ТекМЛ.ПолучитьРодителя();
			ТекМЛ.Модифицированность = Истина;
		КонецЦикла;
		
		ТекТС = ТекМЛ.ПолучитьРодителя();
		
		Если ТекМЛ.ПолучитьЭлементы().Количество() = 0 Тогда 
			ПоказатьПредупреждение(, НСтр("en='In the routing list there is no order.';ru='В маршрутном листе нет ни одного заказа.'"));
			Возврат;
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(ТекущиеДанные.МЛ)
				ИЛИ ТекущиеДанные.НовыйМЛ) Тогда 
			ПоказатьПредупреждение(, НСтр("en='For rebuild orders, it is neccesary to salect routing list.';ru='Для перестроения заказов необходимо выбрать маршрутный лист.'"));
			Возврат;
		КонецЕсли;
		
		ТекМЛ = МаршрутыСписокЗаказовДерево;
		
		ТекТС = ТекущиеДанные;
		
		Если ТекМЛ.ПолучитьЭлементы().Количество() = 0 Тогда 
			ПоказатьПредупреждение(, НСтр("en='In the routing list there is no order.';ru='В маршрутном листе нет ни одного заказа.'"));
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ХарактеристикиСцепки = ПолучитьСуммарныеХарактеристикиСцепки(ТекТС.ТС, ТекТС.Прицеп1, ТекТС.Прицеп2,
		НастройкаАлгоритмМаршрутизации, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	ХарактеристикиСцепки.Вставить("ТС", ТекТС.ТС);
	ДанныеПоЗаказам = ПолучитьДанныеПоЗаказам(ТекМЛ);
	
	мсвОшибки = Новый Массив();
	мсвДопАдреса = Новый Массив();
	мсвПунктов   = Новый Массив();
	Если НастройкаАлгоритмОптимизации = "RarusVRP" Тогда
		Если ДанныеПоЗаказам.Гараж = Неопределено Тогда 
			ТекстОшибки = НСтр("ru='Первый пункт маршрута должен быть гаражом'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаЗаказа Из ДанныеПоЗаказам.Заказы Цикл 
			Если Не СтрокаЗаказа.ПунктПогрузки = ДанныеПоЗаказам.Гараж Тогда 
				ТекстОшибки = НСтр("ru='Все заказы маршрута должны быть из одного пункта.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		Если НЕ ДанныеПоЗаказам.Гараж = Неопределено Тогда 
			мсвДопАдреса.Добавить(ДанныеПоЗаказам.Гараж);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекЗаказ Из ДанныеПоЗаказам.Заказы Цикл 
		Если НЕ НастройкаАлгоритмОптимизации = "Яндекс"
			И Не НастройкаАлгоритмОптимизации = "RarusVRP" Тогда 
			мсвДопАдреса.Добавить(ТекЗаказ.ПунктПогрузки);
			мсвДопАдреса.Добавить(ТекЗаказ.ПунктРазгрузки);
		КонецЕсли;
		
		Если (ТекЗаказ.ВесБрутто > ХарактеристикиСцепки.Грузоподъемность)
				Или (ТекЗаказ.Объем > ХарактеристикиСцепки.ОбъемКузова)
				Или (НЕ НастройкаАлгоритмОптимизации = "Яндекс"
				И Не НастройкаАлгоритмОптимизации = "RarusVRP"
				И Не ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок = 0
				И ТекЗаказ.КоличествоУпаковок > ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок) Тогда 
			Если мсвОшибки.Найти(ТекЗаказ.Заказ) = Неопределено Тогда 
				мсвОшибки.Добавить(ТекЗаказ.Заказ);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Если мсвПунктов.Найти(ТекЗаказ.ПунктПогрузки) = Неопределено Тогда
				мсвПунктов.Добавить(ТекЗаказ.ПунктПогрузки);
			КонецЕсли;
			Если мсвПунктов.Найти(ТекЗаказ.ПунктРазгрузки) = Неопределено Тогда
				мсвПунктов.Добавить(ТекЗаказ.ПунктРазгрузки);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого ТекОшибка Из мсвОшибки Цикл 
		ТекстОшибки = НСтр("en='Weght-volume characteristics on order';ru='Весообъемные характеристики по заказу'") 
			+ " """ + ТекОшибка + """ "
			+ НСтр("en='exceed characteristics of coupling. Rebuild orders is not possible.';ru='превышают характеристики сцепки. Перестроение заказов невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	Если мсвОшибки.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКлючевойОперации = "уатОперации.ОптимизацияМаршрута.АРМЛогиста";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, мсвПунктов.Количество());

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ХарактеристикиСцепки", ХарактеристикиСцепки);
	ДополнительныеПараметры.Вставить("ДанныеПоЗаказам",      ДанныеПоЗаказам);
	ДополнительныеПараметры.Вставить("мсвДопАдреса",         мсвДопАдреса);
	ДополнительныеПараметры.Вставить("ТекМЛ",                ТекМЛ);
	ДополнительныеПараметры.Вставить("ТекТС",                ТекТС);
	ДополнительныеПараметры.Вставить("АлгоритмОптимальногоПерестроения", НастройкаАлгоритмОптимизации);
	
	Отказ = Ложь;
	ЗаданВопрос = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов", ЭтотОбъект, ДополнительныеПараметры);
	уатОбщегоНазначенияКлиент_уэ.ПредупредитьОБольшомЧислеЗаказов(ДополнительныеПараметры, Оповещение, Отказ, ЗаданВопрос);
	
	Если Не Отказ И Не ЗаданВопрос Тогда
		ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеПоЗаказам(ТекМЛ)
	
	ДанныеПоЗаказам = Новый Структура(
		"Заказы, МассивПромежуточныхТочек, СтрокиЗаказаВДокументе, Гараж, УчитыватьГаражВозвращения, ГаражВозвращения, ДатаВыезда, КоличествоЗаказов",
		Новый Массив(),
		Новый Массив(),
		Новый Соответствие(),
		Неопределено,
		Ложь,
		Неопределено,
		НачалоДня(ТекущаяДата()) + 86400,
		0
	);
	
	МассивПромежуточныхТочек = Новый Массив();
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Если ТекМЛ.ПолучитьЭлементы().Количество() Тогда 
			ПервыйПункт = ТекМЛ.ПолучитьЭлементы()[0].Адрес;
			Если ТипЗнч(ПервыйПункт) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ЗначениеЗаполнено(ПервыйПункт) 
				И (НастройкаАлгоритмОптимизации = "Яндекс" 
				ИЛИ ЗначениеРеквизитаОбъекта(ПервыйПункт, "Гараж")) Тогда 
				ДанныеПоЗаказам.Гараж = ПервыйПункт;
			КонецЕсли;
			
			ПоследнийПункт = ТекМЛ.ПолучитьЭлементы()[ТекМЛ.ПолучитьЭлементы().Количество()-1];
			Если ТипЗнч(ПоследнийПункт.Адрес) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ЗначениеЗаполнено(ПоследнийПункт.Адрес)
				И ПоследнийПункт.ПолучитьЭлементы().Количество() = 0 
				И (НастройкаАлгоритмОптимизации = "Яндекс" 
				ИЛИ ЗначениеРеквизитаОбъекта(ПоследнийПункт.Адрес, "Гараж")) Тогда 
				ДанныеПоЗаказам.УчитыватьГаражВозвращения = Истина;
				ДанныеПоЗаказам.ГаражВозвращения          = ПоследнийПункт.Адрес;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт) Тогда 
				ДанныеПоЗаказам.ДатаВыезда = ТекМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт;
			КонецЕсли;
		КонецЕсли;
		Индекс = 0;
		Для Каждого СтрокаПункта Из ТекМЛ.ПолучитьЭлементы() Цикл 
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				Если ПустаяСтрока(СтрокаЗаказа.GUID) Тогда 
					СтрокаЗаказа.GUID = Новый УникальныйИдентификатор();
				КонецЕсли;
				
				Если СтрокаЗаказа.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
					Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда 
						СсылкаПакета = Новый УникальныйИдентификатор();
						
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("Ссылка",                     СсылкаПакета);
						ДанныеЗаказа.Вставить("ВесБрутто",                  СтрокаЗаказа.ВесБрутто);
						ДанныеЗаказа.Вставить("Объем",                      СтрокаЗаказа.Объем);
						ДанныеЗаказа.Вставить("КоличествоУпаковок",         СтрокаЗаказа.КолМест);
						ДанныеЗаказа.Вставить("ПунктПогрузки",              СтрокаПункта.Адрес);
						ДанныеЗаказа.Вставить("СтоянкаПунктОтправления",    СтрокаЗаказа.Стоянка);
						ДанныеЗаказа.Вставить("ДопСтоянкаПунктОтправления", СтрокаПункта.СтоянкаИзПункта);
						ДанныеЗаказа.Вставить("ОтправлениеС",               '00010101' + (СтрокаЗаказа.ОкноС - НачалоДня(СтрокаЗаказа.ОкноС)));
						ДанныеЗаказа.Вставить("ОтправлениеПо",              '00010101' + (СтрокаЗаказа.ОкноПо - НачалоДня(СтрокаЗаказа.ОкноПо)));
						ДанныеЗаказа.Вставить("Приоритет",                  0);
						ДанныеЗаказа.Вставить("FTL",                        Ложь);
						ДанныеЗаказа.Вставить("Заказ",                      СтрокаЗаказа.Этап);
						
						флРазмещено = Ложь;
						Для Каждого СтрокаПунктаРазгрузки Из ТекМЛ.ПолучитьЭлементы() Цикл 
							Если флРазмещено Тогда 
								Прервать;
							КонецЕсли;
							
							Для Каждого СтрокаЗаказаРазгрузки Из СтрокаПунктаРазгрузки.ПолучитьЭлементы() Цикл 
								Если ПустаяСтрока(СтрокаЗаказаРазгрузки.GUID) Тогда 
									СтрокаЗаказаРазгрузки.GUID = Новый УникальныйИдентификатор();
								КонецЕсли;
								
								Если флРазмещено Тогда 
									Прервать;
								КонецЕсли;
								
								Если СтрокаЗаказаРазгрузки.Этап = СтрокаЗаказа.Этап
									И СтрокаЗаказаРазгрузки.Количество = СтрокаЗаказа.Количество
									И СтрокаЗаказаРазгрузки.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда 
									ДанныеЗаказа.Вставить("ПунктРазгрузки",            СтрокаПунктаРазгрузки.Адрес);
									ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",         СтрокаПунктаРазгрузки.Лат);
									ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",         СтрокаПунктаРазгрузки.Лон);
									ДанныеЗаказа.Вставить("СтоянкаПунктНазначения",    СтрокаЗаказаРазгрузки.Стоянка);
									ДанныеЗаказа.Вставить("ДопСтоянкаПунктНазначения", СтрокаПунктаРазгрузки.СтоянкаИзПункта);
									ДанныеЗаказа.Вставить("ДоставкаС",                 '00010101' + (СтрокаЗаказаРазгрузки.ОкноС - НачалоДня(СтрокаЗаказаРазгрузки.ОкноС)));
									ДанныеЗаказа.Вставить("ДоставкаПо",                '00010101' + (СтрокаЗаказаРазгрузки.ОкноПо - НачалоДня(СтрокаЗаказаРазгрузки.ОкноПо)));
									ДанныеЗаказа.Вставить("Груз",                      Неопределено);
									ДанныеЗаказа.Вставить("НомерСтроки",               0);   
									ДанныеЗаказа.Вставить("Количество",                СтрокаЗаказаРазгрузки.Количество);
									ДанныеЗаказа.Вставить("GUID",                      СсылкаПакета);
									ДанныеПоЗаказам.Заказы.Добавить(ДанныеЗаказа);
									
									СоотСтрокиДокумента = Новый Соответствие();
									СоотСтрокиДокумента.Вставить("Погрузка",  Новый Структура("Пункт, Заказ, Груз", СтрокаПункта, СтрокаЗаказа, Неопределено));
									СоотСтрокиДокумента.Вставить("Разгрузка", Новый Структура("Пункт, Заказ, Груз", СтрокаПунктаРазгрузки, СтрокаЗаказаРазгрузки, Неопределено));
									
									ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
									
									флРазмещено = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
					Иначе 
						Для Каждого СтрокаГруза Из СтрокаЗаказа.ПолучитьЭлементы() Цикл 
							Если ПустаяСтрока(СтрокаГруза.GUID) Тогда 
								СтрокаГруза.GUID = Новый УникальныйИдентификатор();
							КонецЕсли;
							
							СсылкаПакета = Новый УникальныйИдентификатор();
							
							ДанныеЗаказа = Новый Структура();
							ДанныеЗаказа.Вставить("Ссылка",                     СсылкаПакета);
							ДанныеЗаказа.Вставить("ВесБрутто",                  СтрокаГруза.ВесБрутто);
							ДанныеЗаказа.Вставить("Объем",                      СтрокаГруза.Объем);
							ДанныеЗаказа.Вставить("КоличествоУпаковок",         СтрокаГруза.КолМест);
							ДанныеЗаказа.Вставить("ПунктПогрузки",              СтрокаПункта.Адрес);
							ДанныеЗаказа.Вставить("СтоянкаПунктОтправления",    СтрокаЗаказа.Стоянка);
							ДанныеЗаказа.Вставить("ДопСтоянкаПунктОтправления", СтрокаПункта.СтоянкаИзПункта);
							ДанныеЗаказа.Вставить("ОтправлениеС",               '00010101' + (СтрокаЗаказа.ОкноС - НачалоДня(СтрокаЗаказа.ОкноС)));
							ДанныеЗаказа.Вставить("ОтправлениеПо",              '00010101' + (СтрокаЗаказа.ОкноПо - НачалоДня(СтрокаЗаказа.ОкноПо)));
							ДанныеЗаказа.Вставить("Приоритет",                  0);
							ДанныеЗаказа.Вставить("FTL",                        Ложь);
							ДанныеЗаказа.Вставить("Заказ",                      СтрокаЗаказа.Этап);
							
							флРазмещено = Ложь;
							Для Каждого СтрокаПунктаРазгрузки Из ТекМЛ.ПолучитьЭлементы() Цикл 
								Если флРазмещено Тогда 
									Прервать;
								КонецЕсли;
								
								Для Каждого СтрокаЗаказаРазгрузки Из СтрокаПунктаРазгрузки.ПолучитьЭлементы() Цикл 
									Если ПустаяСтрока(СтрокаЗаказаРазгрузки.GUID) Тогда 
										СтрокаЗаказаРазгрузки.GUID = Новый УникальныйИдентификатор();
									КонецЕсли;
									
									Если флРазмещено Тогда 
										Прервать;
									КонецЕсли;
									
									Если СтрокаЗаказаРазгрузки.Этап = СтрокаЗаказа.Этап
										И СтрокаЗаказаРазгрузки.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда 
										Для Каждого СтрокаГрузаРазгрузки Из СтрокаЗаказаРазгрузки.ПолучитьЭлементы() Цикл
											Если ПустаяСтрока(СтрокаГрузаРазгрузки.GUID) Тогда 
												СтрокаГрузаРазгрузки.GUID = Новый УникальныйИдентификатор();
											КонецЕсли;
											
											Если флРазмещено Тогда 
												Прервать;
											КонецЕсли;
											
											Если СтрокаГрузаРазгрузки.Группировка = СтрокаГруза.Группировка
												И СтрокаГрузаРазгрузки.ЕдиницаИзмерения = СтрокаГруза.ЕдиницаИзмерения
												И СтрокаГрузаРазгрузки.Количество = СтрокаГруза.Количество Тогда 
												ДанныеЗаказа.Вставить("ПунктРазгрузки",            СтрокаПунктаРазгрузки.Адрес);
												ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",         СтрокаПунктаРазгрузки.Лат);
												ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",         СтрокаПунктаРазгрузки.Лон);
												ДанныеЗаказа.Вставить("СтоянкаПунктНазначения",    СтрокаЗаказаРазгрузки.Стоянка);
												ДанныеЗаказа.Вставить("ДопСтоянкаПунктНазначения", СтрокаПунктаРазгрузки.СтоянкаИзПункта);
												ДанныеЗаказа.Вставить("ДоставкаС",                 '00010101' + (СтрокаЗаказаРазгрузки.ОкноС - НачалоДня(СтрокаЗаказаРазгрузки.ОкноС)));
												ДанныеЗаказа.Вставить("ДоставкаПо",                '00010101' + (СтрокаЗаказаРазгрузки.ОкноПо - НачалоДня(СтрокаЗаказаРазгрузки.ОкноПо)));
												НомерСтроки = ПолучитьНомерСтрокиГруза(СтрокаГруза.Группировка, СтрокаГруза.Этап);
												ДанныеЗаказа.Вставить("НомерСтроки", НомерСтроки);
												ДанныеЗаказа.Вставить("Количество",  СтрокаГруза.Количество);
												ДанныеЗаказа.Вставить("Груз",        СтрокаГруза.Группировка);
												ДанныеЗаказа.Вставить("GUID",        СсылкаПакета);
												ДанныеПоЗаказам.Заказы.Добавить(ДанныеЗаказа);
												
												СоотСтрокиДокумента = Новый Соответствие();
												СоотСтрокиДокумента.Вставить("Погрузка",  Новый Структура("Пункт, Заказ, Груз", СтрокаПункта, СтрокаЗаказа, СтрокаГруза));
												СоотСтрокиДокумента.Вставить("Разгрузка", Новый Структура("Пункт, Заказ, Груз", СтрокаПунктаРазгрузки, СтрокаЗаказаРазгрузки, СтрокаГрузаРазгрузки));
												
												ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
												
												флРазмещено = Истина;
												Прервать;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаПункта.ПолучитьЭлементы().Количество() = 0
				И Индекс <> ТекМЛ.ПолучитьЭлементы().Количество() - 1
				И Индекс <> 0 Тогда
				СсылкаПакета = Новый УникальныйИдентификатор();
				МассивПромежуточныхТочек.Добавить(Новый Структура("Ссылка, GUID", СтрокаПункта.Группировка, СсылкаПакета)); 
					
				СоотСтрокиДокумента = Новый Соответствие();
				СоотСтрокиДокумента.Вставить("Погрузка",  Новый Структура("Пункт, Заказ, Груз", Неопределено, Неопределено, Неопределено));
				СоотСтрокиДокумента.Вставить("Разгрузка", Новый Структура("Пункт, Заказ, Груз", СтрокаПункта, Неопределено, Неопределено));
				
				ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
			КонецЕсли; 
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		Если МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() Тогда 
			ПервыйПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];
			Если ТипЗнч(ПервыйПункт.Адрес) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ЗначениеЗаполнено(ПервыйПункт.Адрес)
				И (НастройкаАлгоритмОптимизации = "Яндекс" 
				ИЛИ ЗначениеРеквизитаОбъекта(ПервыйПункт.Адрес, "Гараж")) Тогда
				ДанныеПоЗаказам.Гараж = ПервыйПункт.Адрес;
			КонецЕсли;
			
			ПоследнийПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество()-1]; 
			Если ТипЗнч(ПоследнийПункт.Адрес) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ЗначениеЗаполнено(ПоследнийПункт.Адрес)
				И ПоследнийПункт.ПолучитьЭлементы().Количество() = 0 
				И (НастройкаАлгоритмОптимизации = "Яндекс" 
				ИЛИ ЗначениеРеквизитаОбъекта(ПоследнийПункт.Адрес, "Гараж")) Тогда 
				ДанныеПоЗаказам.УчитыватьГаражВозвращения = Истина;
				ДанныеПоЗаказам.ГаражВозвращения          = ПоследнийПункт.Адрес;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].ВремяПрибытияВПункт) Тогда 
				ДанныеПоЗаказам.ДатаВыезда = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].ВремяПрибытияВПункт;
			КонецЕсли;
		КонецЕсли; 
		
		Индекс = 0;
		МассивПромежуточныхТочек = Новый Массив();
		Для Каждого СтрокаПункта Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				Если ПустаяСтрока(СтрокаЗаказа.GUID) Тогда 
					СтрокаЗаказа.GUID = Новый УникальныйИдентификатор();
				КонецЕсли;
				
				Если СтрокаЗаказа.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
					Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда 
						СсылкаПакета = Новый УникальныйИдентификатор();
						
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("Ссылка",                     СсылкаПакета);
						ДанныеЗаказа.Вставить("ВесБрутто",                  СтрокаЗаказа.ВесБрутто);
						ДанныеЗаказа.Вставить("Объем",                      СтрокаЗаказа.Объем);
						ДанныеЗаказа.Вставить("КоличествоУпаковок",         СтрокаЗаказа.КолМест);
						ДанныеЗаказа.Вставить("ПунктПогрузки",              СтрокаПункта.Адрес);
						ДанныеЗаказа.Вставить("СтоянкаПунктОтправления",    СтрокаЗаказа.Стоянка);
						ДанныеЗаказа.Вставить("ДопСтоянкаПунктОтправления", СтрокаПункта.СтоянкаИзПункта);
						ДанныеЗаказа.Вставить("ОтправлениеС",               '00010101' + (СтрокаЗаказа.ОкноС - НачалоДня(СтрокаЗаказа.ОкноС)));
						ДанныеЗаказа.Вставить("ОтправлениеПо",              '00010101' + (СтрокаЗаказа.ОкноПо - НачалоДня(СтрокаЗаказа.ОкноПо)));
						ДанныеЗаказа.Вставить("Приоритет",                  0);
						ДанныеЗаказа.Вставить("FTL",                        Ложь);
						ДанныеЗаказа.Вставить("Заказ",                      СтрокаЗаказа.Этап); 
						флРазмещено = Ложь;
						Для Каждого СтрокаПунктаРазгрузки Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
							Если флРазмещено Тогда 
								Прервать;
							КонецЕсли;
							
							Для Каждого СтрокаЗаказаРазгрузки Из СтрокаПунктаРазгрузки.ПолучитьЭлементы() Цикл 
								Если ПустаяСтрока(СтрокаЗаказаРазгрузки.GUID) Тогда 
									СтрокаЗаказаРазгрузки.GUID = Новый УникальныйИдентификатор();
								КонецЕсли;
								
								Если флРазмещено Тогда 
									Прервать;
								КонецЕсли;
								
								Если СтрокаЗаказаРазгрузки.Этап = СтрокаЗаказа.Этап
									И СтрокаЗаказаРазгрузки.Количество = СтрокаЗаказа.Количество
									И СтрокаЗаказаРазгрузки.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда 
									ДанныеЗаказа.Вставить("ПунктРазгрузки",            СтрокаПунктаРазгрузки.Адрес);
									ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",         СтрокаПунктаРазгрузки.Лат);
									ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",         СтрокаПунктаРазгрузки.Лон);
									ДанныеЗаказа.Вставить("СтоянкаПунктНазначения",    СтрокаЗаказаРазгрузки.Стоянка);
									ДанныеЗаказа.Вставить("ДопСтоянкаПунктНазначения", СтрокаПунктаРазгрузки.СтоянкаИзПункта);
									ДанныеЗаказа.Вставить("ДоставкаС",                 '00010101' + (СтрокаЗаказаРазгрузки.ОкноС - НачалоДня(СтрокаЗаказаРазгрузки.ОкноС)));
									ДанныеЗаказа.Вставить("ДоставкаПо",                '00010101' + (СтрокаЗаказаРазгрузки.ОкноПо - НачалоДня(СтрокаЗаказаРазгрузки.ОкноПо)));
									ДанныеЗаказа.Вставить("НомерСтроки",               0);
									ДанныеЗаказа.Вставить("Груз",                      Неопределено);
									ДанныеЗаказа.Вставить("Количество",               СтрокаЗаказаРазгрузки.Количество);
									ДанныеЗаказа.Вставить("GUID",                     СсылкаПакета);
									
									ДанныеПоЗаказам.Заказы.Добавить(ДанныеЗаказа);
									
									СоотСтрокиДокумента = Новый Соответствие();
									СоотСтрокиДокумента.Вставить("Погрузка",  Новый Структура("Пункт, Заказ, Груз", СтрокаПункта, СтрокаЗаказа, Неопределено));
									СоотСтрокиДокумента.Вставить("Разгрузка", Новый Структура("Пункт, Заказ, Груз", СтрокаПунктаРазгрузки, СтрокаЗаказаРазгрузки, Неопределено));
									
									ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
									
									флРазмещено = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
					Иначе
						Для Каждого СтрокаГруза Из СтрокаЗаказа.ПолучитьЭлементы() Цикл 
							Если ПустаяСтрока(СтрокаГруза.GUID) Тогда 
								СтрокаГруза.GUID = Новый УникальныйИдентификатор();
							КонецЕсли;
							
							СсылкаПакета = Новый УникальныйИдентификатор();
							
							ДанныеЗаказа = Новый Структура();
							ДанныеЗаказа.Вставить("Ссылка",                     СсылкаПакета);
							ДанныеЗаказа.Вставить("ВесБрутто",                  СтрокаГруза.ВесБрутто);
							ДанныеЗаказа.Вставить("Объем",                      СтрокаГруза.Объем);
							ДанныеЗаказа.Вставить("КоличествоУпаковок",         СтрокаГруза.КолМест);
							ДанныеЗаказа.Вставить("ПунктПогрузки",              СтрокаПункта.Адрес);
							ДанныеЗаказа.Вставить("СтоянкаПунктОтправления",    СтрокаЗаказа.Стоянка);
							ДанныеЗаказа.Вставить("ДопСтоянкаПунктОтправления", СтрокаПункта.СтоянкаИзПункта);
							ДанныеЗаказа.Вставить("ОтправлениеС",               '00010101' + (СтрокаЗаказа.ОкноС - НачалоДня(СтрокаЗаказа.ОкноС)));
							ДанныеЗаказа.Вставить("ОтправлениеПо",              '00010101' + (СтрокаЗаказа.ОкноПо - НачалоДня(СтрокаЗаказа.ОкноПо)));
							ДанныеЗаказа.Вставить("Приоритет",                  0);
							ДанныеЗаказа.Вставить("FTL",                        Ложь);
							ДанныеЗаказа.Вставить("Заказ",                      СтрокаЗаказа.Этап);
									
							флРазмещено = Ложь;
							Для Каждого СтрокаПунктаРазгрузки Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
								Если флРазмещено Тогда 
									Прервать;
								КонецЕсли;
								
								Для Каждого СтрокаЗаказаРазгрузки Из СтрокаПунктаРазгрузки.ПолучитьЭлементы() Цикл 
									Если ПустаяСтрока(СтрокаЗаказаРазгрузки.GUID) Тогда 
										СтрокаЗаказаРазгрузки.GUID = Новый УникальныйИдентификатор();
									КонецЕсли;
									
									Если флРазмещено Тогда 
										Прервать;
									КонецЕсли;
									
									Если СтрокаЗаказаРазгрузки.Этап = СтрокаЗаказа.Этап
										И СтрокаЗаказаРазгрузки.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда 
										Для Каждого СтрокаГрузаРазгрузки Из СтрокаЗаказаРазгрузки.ПолучитьЭлементы() Цикл
											Если ПустаяСтрока(СтрокаГрузаРазгрузки.GUID) Тогда 
												СтрокаГрузаРазгрузки.GUID = Новый УникальныйИдентификатор();
											КонецЕсли;
											
											Если флРазмещено Тогда 
												Прервать;
											КонецЕсли;
											
											Если СтрокаГрузаРазгрузки.Группировка = СтрокаГруза.Группировка
												И СтрокаГрузаРазгрузки.ЕдиницаИзмерения = СтрокаГруза.ЕдиницаИзмерения
												И СтрокаГрузаРазгрузки.Количество = СтрокаГруза.Количество Тогда 
												ДанныеЗаказа.Вставить("ПунктРазгрузки",            СтрокаПунктаРазгрузки.Адрес);
												ДанныеЗаказа.Вставить("ПунктРазгрузкиЛат",         СтрокаПунктаРазгрузки.Лат);
												ДанныеЗаказа.Вставить("ПунктРазгрузкиЛон",         СтрокаПунктаРазгрузки.Лон);
												ДанныеЗаказа.Вставить("СтоянкаПунктНазначения",    СтрокаЗаказаРазгрузки.Стоянка);
												ДанныеЗаказа.Вставить("ДопСтоянкаПунктНазначения", СтрокаПунктаРазгрузки.СтоянкаИзПункта);
												ДанныеЗаказа.Вставить("ДоставкаС",                 '00010101' + (СтрокаЗаказаРазгрузки.ОкноС - НачалоДня(СтрокаЗаказаРазгрузки.ОкноС)));
												ДанныеЗаказа.Вставить("ДоставкаПо",                '00010101' + (СтрокаЗаказаРазгрузки.ОкноПо - НачалоДня(СтрокаЗаказаРазгрузки.ОкноПо)));
												ДанныеЗаказа.Вставить("Груз",                       СтрокаГруза.Группировка);
												ДанныеЗаказа.Вставить("Количество",                 СтрокаГруза.Количество);
												ДанныеЗаказа.Вставить("GUID",                       СсылкаПакета); 
												НомерСтроки = ПолучитьНомерСтрокиГруза(СтрокаГруза.Группировка, СтрокаГруза.Этап);
												ДанныеЗаказа.Вставить("НомерСтроки", НомерСтроки); 
												ДанныеПоЗаказам.Заказы.Добавить(ДанныеЗаказа);
												
												СоотСтрокиДокумента = Новый Соответствие();
												СоотСтрокиДокумента.Вставить("Погрузка",  Новый Структура("Пункт, Заказ, Груз", СтрокаПункта, СтрокаЗаказа, СтрокаГруза));
												СоотСтрокиДокумента.Вставить("Разгрузка", Новый Структура("Пункт, Заказ, Груз", СтрокаПунктаРазгрузки, СтрокаЗаказаРазгрузки, СтрокаГрузаРазгрузки));
												
												ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
												
												флРазмещено = Истина;
												Прервать;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаПункта.ПолучитьЭлементы().Количество() = 0
				И Индекс <> МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 1
				И Индекс <> 0 Тогда
				СсылкаПакета = Новый УникальныйИдентификатор();
				МассивПромежуточныхТочек.Добавить(Новый Структура("Ссылка, GUID", СтрокаПункта.Группировка, СсылкаПакета)); 
					
				СоотСтрокиДокумента = Новый Соответствие();
				СоотСтрокиДокумента.Вставить("Погрузка",  Новый Структура("Пункт, Заказ, Груз", Неопределено, Неопределено, Неопределено));
				СоотСтрокиДокумента.Вставить("Разгрузка", Новый Структура("Пункт, Заказ, Груз", СтрокаПункта, Неопределено, Неопределено));
				
				ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Вставить(СсылкаПакета, СоотСтрокиДокумента);
			КонецЕсли; 
			Индекс = Индекс + 1;
		КонецЦикла;
	    ДанныеПоЗаказам.МассивПромежуточныхТочек = МассивПромежуточныхТочек;
	КонецЕсли;
	
	мсвОбработанныеЗаказы = Новый Массив;
	Для Каждого ДанныеЗаказа Из ДанныеПоЗаказам.Заказы Цикл
		Если мсвОбработанныеЗаказы.Найти(ДанныеЗаказа.Заказ) = Неопределено Тогда 
			мсвОбработанныеЗаказы.Добавить(ДанныеЗаказа.Заказ);
		КонецЕсли;
	КонецЦикла;
	ДанныеПоЗаказам.КоличествоЗаказов = мсвОбработанныеЗаказы.Количество();
	
	Возврат ДанныеПоЗаказам;
	
КонецФункции // ПолучитьДанныеПоЗаказам()

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НастройкаАлгоритмОптимизации = "Яндекс"
		И Не НастройкаАлгоритмОптимизации = "RarusVRP"
		И Не уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(ДополнительныеПараметры.мсвДопАдреса) Тогда 
		
		ТекстВопроса = Новый ФорматированнаяСтрока(
			НСтр("en='To continue routing it is necessary to update the distances between the points.';ru='Для продолжения маршрутизации необходимо выполнить обновление расстояний между пунктами.'") + Символы.ПС
			+ НСтр("en='For update it is necessary to have access to the server';ru='Для обновления необходимо наличие доступа к серверу'") + " "
			+ НСтр("en='via the Internet. Operation can take a long time.';ru='через интернет. Операция может занять длительное время.'") + Символы.ПС
			+ НСтр("en='Duration depends on the number of destinations in orders.';ru='Продолжительность зависит от количества пунктов назначения в заказах.'") + Символы.ПС
			+ НСтр("en='Maximum number of requests to online service is limited.';ru='Максимальное количество запросов к онлайну сервису ограничено.'")
		);
		
		Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовОбновитьПункты", ЭтотОбъект, ДополнительныеПараметры);
		
		СписокОтветов = Новый СписокЗначений();
		СписокОтветов.Добавить("ОбновитьПункты",          НСтр("en='Update distances';ru='Обновить расстояния'"));
		СписокОтветов.Добавить("ПродолжитьБезОбновления", НСтр("en='Continue without updating';ru='Продолжить без обновления'"));
		СписокОтветов.Добавить("Отменить",                НСтр("en='Cancel routing';ru='Отменить маршрутизацию'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокОтветов);
		
	Иначе 
		ОптимальноеПерестроениеЗаказовПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовОбновитьПункты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ОбновитьПункты" Тогда 
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			ПараметрыВыполненияФЗ = Новый Массив();
			ПараметрыВыполненияФЗ.Добавить(ДополнительныеПараметры.мсвДопАдреса);
			
			ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами";
			
			ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеОбновленияКластеров", ЭтотОбъект, ДополнительныеПараметры);
			
			ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
			Если ЗаданиеВыполнено Тогда
				ОптимальноеПерестроениеЗаказовПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
			ПараметрыОбработчикаОжидания = Новый Структура(
				"МинимальныйИнтервал,
				|МаксимальныйИнтервал,
				|ТекущийИнтервал,
				|КоэффициентУвеличенияИнтервала", 
				1, 15, 1, 1.4);
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			
			ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
		Иначе 
			уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ДополнительныеПараметры.мсвДопАдреса);
			ОптимальноеПерестроениеЗаказовПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = "ПродолжитьБезОбновления" Тогда 
		ОптимальноеПерестроениеЗаказовПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеОбновленияКластеров(Результат, ДопПараметры) Экспорт
	
	Если НастройкаАлгоритмОптимизации = "Яндекс" Или НастройкаАлгоритмОптимизации = "RarusVRP" Тогда
		ТекстОшибки = "";
		
		ДанныеПоЗаказам = Новый Структура("Гараж,ГаражВозвращения,УчитыватьГаражВозвращения,ДатаВыезда,Заказы,КоличествоЗаказов,МассивПромежуточныхТочек");
		ДанныеПоЗаказам.Гараж = ДопПараметры.ДанныеПоЗаказам.Гараж; 
		ДанныеПоЗаказам.ГаражВозвращения = ДопПараметры.ДанныеПоЗаказам.ГаражВозвращения;
		ДанныеПоЗаказам.УчитыватьГаражВозвращения = ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения;
		ДанныеПоЗаказам.ДатаВыезда                = ДопПараметры.ДанныеПоЗаказам.ДатаВыезда;
		ДанныеПоЗаказам.Заказы                    = ДопПараметры.ДанныеПоЗаказам.Заказы;
		ДанныеПоЗаказам.КоличествоЗаказов         = ДопПараметры.ДанныеПоЗаказам.КоличествоЗаказов;
		ДанныеПоЗаказам.МассивПромежуточныхТочек  = ДопПараметры.ДанныеПоЗаказам.МассивПромежуточныхТочек;
		
		СтруктураНастроекАРМ = Новый Структура(уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
		ЗаполнитьЗначенияСвойств(СтруктураНастроекАРМ, ЭтотОбъект);
		IDзадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(
			ДопПараметры.ДанныеПоЗаказам.ДатаВыезда,  
			ДопПараметры.ХарактеристикиСцепки,
			ДанныеПоЗаказам,
			СтруктураНастроекАРМ,
			ТекстОшибки
		);
		
		Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		
		флRarusVRP = НастройкаАлгоритмОптимизации = "RarusVRP";
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
		Если ЗаданиеВыполнено Тогда
			Если ТекстОшибки = "" Тогда 
				ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизатор = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму(
			"ОбщаяФорма.уатДлительнаяОперация",
			,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект, ДопПараметры)
		);
		
	ИначеЕсли Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда 
		ПараметрыВыполненияФЗ = Новый Массив();
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.Грузоподъемность);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.ОбъемКузова);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.ТипТС);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.Заказы);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.мсвДопАдреса);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.Гараж);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.ДатаВыезда);
		ПараметрыВыполненияФЗ.Добавить(Оптимизация_НастройкаРежимОптимизации);
		ПараметрыВыполненияФЗ.Добавить(Оптимизация_НастройкаУчитыватьОкнаПоЗаказам);
		
		ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.РаспределитьЗаказыВМаршрутномЛисте";
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
		Если ЗаданиеВыполнено Тогда
			ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Возврат;
		КонецЕсли;
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
		
	Иначе 
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		уатЗащищенныеФункцииСервер_уэ.РаспределитьЗаказыВМаршрутномЛисте(
			АдресХранилищаДО,
			ДопПараметры.ХарактеристикиСцепки.Грузоподъемность,
			ДопПараметры.ХарактеристикиСцепки.ОбъемКузова,
			ДопПараметры.ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок,
			ДопПараметры.ХарактеристикиСцепки.ТипТС,
			ДопПараметры.ДанныеПоЗаказам.Заказы,
			ДопПараметры.мсвДопАдреса,
			ДопПараметры.ДанныеПоЗаказам.Гараж,
			ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения,
			ДопПараметры.ДанныеПоЗаказам.ДатаВыезда,
			НастройкаРежимОптимизации,
			НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации
		);
		ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРаспределениеЗаказовСервер()
	
	Возврат ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	
КонецФункции

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	
	РаспредЗаказов = ПолучитьРаспределениеЗаказовСервер();
	
	Если РаспредЗаказов = Неопределено
		ИЛИ НЕ ТипЗнч(РаспредЗаказов) = Тип("Структура") ИЛИ НЕ РаспредЗаказов.Свойство("пул") Тогда 
		Возврат;
	КонецЕсли;
	
	флВнешняяМаршрутизация = РаспредЗаказов.Свойство("ВнешняяМаршрутизация");
	
	Если флВнешняяМаршрутизация Тогда
		
		ТипыТочекМаршрута_Разгрузка   = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
		ТипыТочекМаршрута_Погрузка    = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
		МассивЗаказовДляПерезаписи    = Новый Массив();
		
		СтрокаСвойствТочки = "Адрес, Заказ, Груз, Количество, Операция, Ожидание, Стоянка, Время, Расстояние, СтоянкиНеИспользуются, GUID";
		
		НовМаршрут = Новый Массив();
		
		МассивИдентификоторовСтрокЗаказа = Новый Соответствие();
		СтруктураТочкиПогрузки  = Новый Структура(СтрокаСвойствТочки);
		ТочкаПогрузкиОпределена = Ложь;
		ТочкаПогрузкиИндекс     = 0;
		Счетчик                 = 0;
		
		ТекПул = РаспредЗаказов.пул;
		
		Для Каждого ТекЭлемент Из ТекПул.маршрут Цикл 
			
			Если ТекЭлемент.Тип = "drop_off" Тогда
				ТочкаПогрузкиОпределена = Истина;
				Операция                = ТипыТочекМаршрута_Разгрузка;
				Для Каждого ТекСтрока Из МассивИдентификоторовСтрокЗаказа Цикл
					
					ТекСтрокаЗначение = ТекСтрока.Значение;
					
					СтруктураТочки = Новый Структура(
					СтрокаСвойствТочки,
					ТекЭлемент.Адрес, 
					ТекСтрокаЗначение.Заказ,
					ТекСтрокаЗначение.Груз,
					ТекСтрокаЗначение.Количество,
					ТипыТочекМаршрута_Разгрузка,
					ТекЭлемент.Ожидание,
					ТекЭлемент.Стоянка,
					ТекЭлемент.ВремяВПути,
					ТекЭлемент.Расстояние,
					Истина,
					ТекСтрокаЗначение.GUID);
					
					НовМаршрут.Добавить(СтруктураТочки);
					МассивЗаказовДляПерезаписи.Добавить(Новый Структура("Заказ, АдресНазначения", ТекСтрокаЗначение.Заказ, ТекЭлемент.Адрес));
				КонецЦикла;
			Иначе
				СтруктураТочки = Новый Структура(
				СтрокаСвойствТочки,
				ТекЭлемент.Адрес, 
				ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"),
				ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
				0,
				ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПустаяСсылка"),
				ТекЭлемент.Ожидание,
				ТекЭлемент.Стоянка,
				ТекЭлемент.ВремяВПути,
				ТекЭлемент.Расстояние,
				?(ТекЭлемент.Тип = "garage", Истина, Ложь),
				ТекЭлемент.Заказ);
				Для Каждого ИсходСтрока Из ДопПараметры.ДанныеПоЗаказам.Заказы Цикл 
					Если Строка(ИсходСтрока.GUID) = ТекЭлемент.Заказ Тогда
						СтруктураТочки.Заказ      = ИсходСтрока.Заказ;
						СтруктураТочки.Груз       = ИсходСтрока.Груз;
						СтруктураТочки.Количество = ИсходСтрока.Количество;
						СтруктураТочки.GUID       = ИсходСтрока.GUID;
						
						Если ТекЭлемент.Тип = "delivery" Тогда
							Операция = ТипыТочекМаршрута_Разгрузка;
							Если МассивИдентификоторовСтрокЗаказа.Получить(ИсходСтрока.GUID) = Неопределено Тогда
								
								ТекСтруктураТочкиПогрузки = Новый Структура(СтрокаСвойствТочки);
								ЗаполнитьЗначенияСвойств(ТекСтруктураТочкиПогрузки, СтруктураТочкиПогрузки);
								ТекСтруктураТочкиПогрузки.Заказ      = ИсходСтрока.Заказ;
								ТекСтруктураТочкиПогрузки.Операция   = ТипыТочекМаршрута_Погрузка;
								ТекСтруктураТочкиПогрузки.Груз       = ИсходСтрока.Груз;
								ТекСтруктураТочкиПогрузки.Количество = ИсходСтрока.Количество;
								ТекСтруктураТочкиПогрузки.GUID       = ИсходСтрока.GUID;
								
								Если НЕ ТочкаПогрузкиОпределена Тогда
									ТекСтруктураТочкиПогрузки.Адрес = ИсходСтрока.ПунктПогрузки;
									Если РаспредЗаказов.пул.Свойство("ВремяВПутиОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Время = РаспредЗаказов.пул.ВремяВПутиОтГаража;
									КонецЕсли;
									Если РаспредЗаказов.пул.Свойство("РасстояниеОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Расстояние = РаспредЗаказов.пул.РасстояниеОтГаража;
									КонецЕсли;
									Если РаспредЗаказов.пул.Свойство("ОжиданиеОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Ожидание = РаспредЗаказов.пул.ОжиданиеОтГаража;
									КонецЕсли;
									Если РаспредЗаказов.пул.Свойство("СтоянкаОтГаража") Тогда 
										ТекСтруктураТочкиПогрузки.Стоянка = РаспредЗаказов.пул.СтоянкаОтГаража;
									КонецЕсли;
									НовМаршрут.Вставить(0, ТекСтруктураТочкиПогрузки);
									ТочкаПогрузкиИндекс = 0;
								Иначе
									НовМаршрут.Вставить(ТочкаПогрузкиИндекс + 1, ТекСтруктураТочкиПогрузки);
									ТочкаПогрузкиИндекс = ТочкаПогрузкиИндекс + 1;
								КонецЕсли;
								ТочкаПогрузкиОпределена = Истина;
							КонецЕсли;
						Иначе
							Операция = ТипыТочекМаршрута_Погрузка;
							МассивИдентификоторовСтрокЗаказа.Вставить(ИсходСтрока.GUID, СтруктураТочки);
						КонецЕсли;
						СтруктураТочки.Операция   = Операция;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ИсходСтрока Из ДопПараметры.ДанныеПоЗаказам.МассивПромежуточныхТочек Цикл
					Если Строка(ИсходСтрока.GUID) = ТекЭлемент.Заказ Тогда
						СтруктураТочки.GUID  = ИсходСтрока.GUID;
						СтруктураТочки.Адрес = ИсходСтрока.Ссылка;
						
						Если ТекЭлемент.Тип = "delivery" Тогда
							Операция = ТипыТочекМаршрута_Разгрузка;
						Иначе
							Операция = ТипыТочекМаршрута_Погрузка;
							МассивИдентификоторовСтрокЗаказа.Вставить(ИсходСтрока.GUID, СтруктураТочки);
						КонецЕсли;
						СтруктураТочки.Операция   = Операция;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				НовМаршрут.Добавить(СтруктураТочки);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтруктураТочки.Операция)
				И НЕ ТочкаПогрузкиОпределена Тогда
				ЗаполнитьЗначенияСвойств(СтруктураТочкиПогрузки, СтруктураТочки);
				ТочкаПогрузкиИндекс = Счетчик;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ТекПул.маршрут.Очистить();
		
		СоответвиеРазгрузок = Новый Соответствие();
		Для Каждого ТекСтрока Из НовМаршрут Цикл
			
			Количество = 0;
			Если ТекСтрока.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				ТекКоличество = СоответвиеРазгрузок.Получить(ТекСтрока.GUID);
				Если ТекКоличество = Неопределено Тогда
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекСтрока.Количество);
					Количество = ТекСтрока.Количество;
				Иначе
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекКоличество + ТекСтрока.Количество);
					Количество = ТекКоличество + ТекСтрока.Количество;
				КонецЕсли;
			ИначеЕсли ТекСтрока.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
				ТекКоличество = СоответвиеРазгрузок.Получить(ТекСтрока.GUID);
				Если ТекКоличество = Неопределено Тогда
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, - ТекСтрока.Количество);
					Количество = ТекСтрока.Количество;
				Иначе
					СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекКоличество - ТекСтрока.Количество);
					Количество = ТекКоличество - ТекСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Если Количество = Неопределено
				ИЛИ Количество >= 0 Тогда
				ТекПул.маршрут.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекПул.Свойство("ВремяНачалаМаршрута") Тогда 
			ТекПул.Вставить("ВремяВыездаНаМаршрут", НачалоДня(ДопПараметры.ДанныеПоЗаказам.ДатаВыезда) + ТекПул.ВремяНачалаМаршрута);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопПараметры.ТекМЛ.ПолучитьЭлементы().Очистить();
	
	НераспределенныеЗаказы = Новый Массив();
	Для Каждого ИсходныйЗаказ Из ДопПараметры.ДанныеПоЗаказам.Заказы Цикл 
		флПерераспределен = Ложь;
		Для Каждого СтрокаРезультат Из РаспредЗаказов.пул.маршрут Цикл 
			GUIDЗаказа  = ?(СтрокаРезультат.Свойство("GUID"), СтрокаРезультат.GUID, СтрокаРезультат.заказ.Ссылка);
			Если ИсходныйЗаказ.Ссылка = GUIDЗаказа Тогда 
				флПерераспределен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не флПерераспределен Тогда 
			НераспределенныеЗаказы.Добавить(ИсходныйЗаказ.Заказ);
			
			РаспредЗаказов.пул.маршрут.Добавить(
				Новый Структура("заказ,пункт,Операция,Ожидание,GUIDПункта",
					ИсходныйЗаказ, ИсходныйЗаказ.ПунктПогрузки, ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"), 0, Строка(Новый УникальныйИдентификатор))
			);
			РаспредЗаказов.пул.маршрут.Добавить(
				Новый Структура("заказ,пункт,Операция,Ожидание,GUIDПункта",
					ИсходныйЗаказ, ИсходныйЗаказ.ПунктРазгрузки, ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"), 0, Строка(Новый УникальныйИдентификатор))
			);
		КонецЕсли;
	КонецЦикла;
	
	ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	
	Если ТекСтрокаТС <> Неопределено Тогда
		GUIDТС = ТекСтрокаТС.GUID;
	Иначе 
		GUIDТС = "";
	КонецЕсли; 
	
	Если Не ДопПараметры.ДанныеПоЗаказам.Гараж = Неопределено Тогда 
		НовСтрокаГараж = ДопПараметры.ТекМЛ.ПолучитьЭлементы().Добавить();
		НовСтрокаГараж.Группировка   = ДопПараметры.ДанныеПоЗаказам.Гараж;
		НовСтрокаГараж.Адрес         = ДопПараметры.ДанныеПоЗаказам.Гараж;
		НовСтрокаГараж.УровеньДерева = "Пункт";
		НовСтрокаГараж.GUIDТС        = GUIDТС;

		СтруктураДанныхГаража = ПредставлениеПункт(ДопПараметры.ДанныеПоЗаказам.Гараж);
		НовСтрокаГараж.Лат = СтруктураДанныхГаража.Лат;
		НовСтрокаГараж.Лон = СтруктураДанныхГаража.Лон;
		
		НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
		
		Если РаспредЗаказов.пул.Свойство("ВремяВПутиОтГаража") Тогда 
			НовСтрокаГараж.ВремяВПути = РаспредЗаказов.пул.ВремяВПутиОтГаража;
		КонецЕсли;
		Если РаспредЗаказов.пул.Свойство("РасстояниеОтГаража") Тогда 
			НовСтрокаГараж.Расстояние = РаспредЗаказов.пул.РасстояниеОтГаража;
		КонецЕсли;
		Если РаспредЗаказов.пул.Свойство("ОжиданиеОтГаража") Тогда 
			НовСтрокаГараж.Ожидание = РаспредЗаказов.пул.ОжиданиеОтГаража;
		КонецЕсли;
		Если РаспредЗаказов.пул.Свойство("СтоянкаОтГаража") Тогда 
			НовСтрокаГараж.СтоянкаИзПункта = РаспредЗаказов.пул.СтоянкаОтГаража;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрокаРезультат Из РаспредЗаказов.пул.маршрут Цикл 
		GUIDЗаказа  = ?(ТекСтрокаРезультат.Свойство("GUID"), ТекСтрокаРезультат.GUID, ТекСтрокаРезультат.заказ.Ссылка);
		ДанныеСтрок = ДопПараметры.ДанныеПоЗаказам.СтрокиЗаказаВДокументе.Получить(GUIDЗаказа);
		Если ДанныеСтрок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаРезультат.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
			РазмещаемыеСтроки = ДанныеСтрок.Получить("Погрузка");
		Иначе 
			РазмещаемыеСтроки = ДанныеСтрок.Получить("Разгрузка");
		КонецЕсли;
		
		СтрокаПункта = Неопределено;
		Если ДопПараметры.ТекМЛ.ПолучитьЭлементы().Количество() Тогда 
			СтрокаПункта = ДопПараметры.ТекМЛ.ПолучитьЭлементы()[ДопПараметры.ТекМЛ.ПолучитьЭлементы().Количество()-1];
			Если НЕ СтрокаПункта.Адрес = РазмещаемыеСтроки.Пункт.Адрес Тогда 
				СтрокаПункта = Неопределено;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаПункта, РазмещаемыеСтроки.Пункт,, 
				?(НастройкаРежимОтображенияМЛ = 0, "ЗатратыНаПеревозку,СоздаватьЗаказПеревозчику,Секции", ""));
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПункта = Неопределено Тогда 
			СтрокаПункта = ДопПараметры.ТекМЛ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПункта, РазмещаемыеСтроки.Пункт,, 
			?(НастройкаРежимОтображенияМЛ = 0, "ЗатратыНаПеревозку,СоздаватьЗаказПеревозчику,Секции", ""));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПункта.GUIDПункта) Тогда
			 СтрокаПункта.GUIDПункта  = РазмещаемыеСтроки.Пункт.GUIDПункта;
		КонецЕсли;
		 
		Если ТекСтрокаРезультат.Свойство("GUIDПункта") Тогда
			СтрокаПункта.GUIDПункта = ТекСтрокаРезультат.GUIDПункта;
		ИначеЕсли ТекСтрокаРезультат.Свойство("Ожидание") Тогда 
			СтрокаПункта.Ожидание = ТекСтрокаРезультат.Ожидание;
		КонецЕсли;
		
		Если ТекСтрокаРезультат.Свойство("Время") Тогда 
			СтрокаПункта.ВремяВПути = ТекСтрокаРезультат.Время;
		КонецЕсли;
		
		Если ТекСтрокаРезультат.Свойство("Расстояние") Тогда 
			СтрокаПункта.Расстояние = ТекСтрокаРезультат.Расстояние;
		КонецЕсли;
		
		СтрокаЗаказа = Неопределено;
		Если СтрокаПункта.ПолучитьЭлементы().Количество() Тогда 
			СтрокаЗаказа = СтрокаПункта.ПолучитьЭлементы()[СтрокаПункта.ПолучитьЭлементы().Количество()-1];
			Если Не СтрокаЗаказа.Этап = РазмещаемыеСтроки.Заказ.Этап Тогда 
				СтрокаЗаказа = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЗаказа = Неопределено Тогда 
			Если НЕ РазмещаемыеСтроки.Заказ = Неопределено Тогда
				СтрокаЗаказа = СтрокаПункта.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказа, РазмещаемыеСтроки.Заказ,,
				?(НастройкаРежимОтображенияМЛ = 0, "ЗатратыНаПеревозку,СоздаватьЗаказПеревозчику,Секции", ""));
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрокаРезультат.Свойство("GUIDПункта") Тогда
			СтрокаЗаказа.GUIDПункта = ТекСтрокаРезультат.GUIDПункта;
		КонецЕсли;
		
		Если Не РазмещаемыеСтроки.Груз = Неопределено Тогда 
			СтрокаГруза = Неопределено;
			Если СтрокаЗаказа.ПолучитьЭлементы().Количество() Тогда 
				СтрокаГруза = СтрокаЗаказа.ПолучитьЭлементы()[СтрокаЗаказа.ПолучитьЭлементы().Количество()-1];
				Если Не СтрокаГруза.Группировка = РазмещаемыеСтроки.Груз.Группировка Тогда 
					СтрокаГруза = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаГруза = Неопределено Тогда 
				СтрокаГруза = СтрокаЗаказа.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГруза, РазмещаемыеСтроки.Груз,,
				?(НастройкаРежимОтображенияМЛ = 0, "ЗатратыНаПеревозку,СоздаватьЗаказПеревозчику,Секции", ""));
			КонецЕсли; 
			
			Если ТекСтрокаРезультат.Свойство("GUIDПункта") Тогда
				СтрокаГруза.GUIDПункта = ТекСтрокаРезультат.GUIDПункта;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения
		И НЕ ДопПараметры.ДанныеПоЗаказам.ГаражВозвращения = Неопределено Тогда 
		НовСтрокаГараж = ДопПараметры.ТекМЛ.ПолучитьЭлементы().Добавить();
		НовСтрокаГараж.Группировка   = ДопПараметры.ДанныеПоЗаказам.ГаражВозвращения;
		НовСтрокаГараж.Адрес         = ДопПараметры.ДанныеПоЗаказам.ГаражВозвращения;
		НовСтрокаГараж.УровеньДерева = "Пункт";
		НовСтрокаГараж.GUIDТС        = GUIDТС;
		
		СтруктураДанныхГаража = ПредставлениеПункт(ДопПараметры.ДанныеПоЗаказам.ГаражВозвращения);
		НовСтрокаГараж.Лат = СтруктураДанныхГаража.Лат;
		НовСтрокаГараж.Лон = СтруктураДанныхГаража.Лон;
		
		НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
	КонецЕсли;
	
	Если ДопПараметры.ТекМЛ.ПолучитьЭлементы().Количество() Тогда 
		Если РаспредЗаказов.пул.Свойство("ВремяВыездаНаМаршрут") Тогда 
			ДопПараметры.ТекМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = РаспредЗаказов.пул.ВремяВыездаНаМаршрут;
		Иначе 
			ДопПараметры.ТекМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = ДопПараметры.ДанныеПоЗаказам.ДатаВыезда;
		КонецЕсли;
	КонецЕсли;
	
	Если  НастройкаРежимОтображенияМЛ = 0 Тогда
		Если Не флВнешняяМаршрутизация Тогда 
			ОбновитьВременныеХарактеристикиМашрута(ДопПараметры.ТекМЛ);
		КонецЕсли;
		
		ОбновитьДеревоМаршрутовНаКлиенте();
	КонецЕсли;
	флRarusVRP = НастройкаАлгоритмОптимизации = "RarusVRP";
	Если НераспределенныеЗаказы.Количество() Тогда 
		ТекстПредупреждения = НСтр("en='Allocation of orders is completed.';ru='Распределение заказов завершено.'");
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("en='Failed to allocate the following orders:';ru='Не удалось распределить следующе заказы:'");
		
		Для Каждого ТекЗаказ Из НераспределенныеЗаказы Цикл 
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Строка(ТекЗаказ);
		КонецЦикла;
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("en='These orders added to the end of routing list.';ru='Указанные заказы добавлены в конец маршрутного листа.'");
			
		ТекстСообщения = ТекстПредупреждения 
		+ Символы.ПС + НСтр("en='Task ID: ';ru='ID задачи: '") + IDзадачиВнешнийМаршрутизатор;
		
		ЗаписатьВЖурналРегистрации("Внешняя маршрутизация", ТекстСообщения);
		
		ТекстПредупреждения = Новый ФорматированнаяСтрока(ТекстПредупреждения 
			+ Символы.ПС,
			?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор),НСтр("ru = 'ID задачи: '; en = 'Task ID: '") + IDзадачиВнешнийМаршрутизатор, ""),
			Символы.ПС,
			?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) И НЕ флRarusVRP,
			Новый ФорматированнаяСтрока(НСтр("ru='Открыть в браузере'"),,,, "https://courier.yandex.ru/mvrp-map#" + IDзадачиВнешнийМаршрутизатор), ""));

	Иначе 
		ТекстПредупреждения = НСтр("en='Redistribution of orders completed successfully.';ru='Перераспределение заказов выполнено успешно.'");
		
		ТекстСообщения = НСтр("en='Redistribution of orders completed successfully.';ru='Перераспределение заказов выполнено успешно.'") 
		+ Символы.ПС + НСтр("en='Task ID: ';ru='ID задачи: '") + IDзадачиВнешнийМаршрутизатор;
		
		ЗаписатьВЖурналРегистрации("Внешняя маршрутизация", ТекстСообщения);
		
		ТекстПредупреждения = Новый ФорматированнаяСтрока(ТекстПредупреждения 
			+ Символы.ПС,
			?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор),НСтр("ru = 'ID задачи: '; en = 'Task ID: '") + IDзадачиВнешнийМаршрутизатор, ""),
			Символы.ПС,
			?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) И НЕ флRarusVRP,
			Новый ФорматированнаяСтрока(НСтр("ru='Открыть в браузере'"),,,, "https://courier.yandex.ru/mvrp-map#" + IDзадачиВнешнийМаршрутизатор), ""));
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	Если НастройкаРежимОтображенияМЛ = 1 Тогда
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ДопПараметры.ТекТС);
		ОбновитьВременныеХарактеристикиТекущегоМаршрута(ДопПараметры.ТекТС);
		ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ДопПараметры.ТекТС);
		ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ДопПараметры.ТекТС);
		ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ДопПараметры.ТекТС);
		ОтобразитьИтоговыеДанныеТекущегоМаршрута(ДопПараметры.ТекТС);
		ОбновитьДанныеТекущегоМаршрута(ДопПараметры.ТекТС);
		ПересчитатьНомераПунктовТекущегоМаршрута();
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ДопПараметры.ТекТС, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ДатаВыезда, ХарактеристикиСцепки, ДанныеПоЗаказам, НастройкиМаршрутизации, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуSVRP(
		ДатаВыезда,
		ХарактеристикиСцепки,
		ДанныеПоЗаказам,
		НастройкиМаршрутизации,
		ТекстОшибки
	);
	
КонецФункции // ВнешняяМаршрутизация_ДобавитьЗадачуSVRP()

&НаКлиенте
Процедура ВыделитьМаршрутНаКарте(Команда)
	
	ИсточникВыделенияНаКарте = 2;
	
	Если ФормаКарты = Неопределено Тогда
		ИнициализацияКарты();
	КонецЕсли;
	
	ОтобразитьДанныеНаКартеOSM(,,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовВАРМИзКарты(ДанныеПодбора) 
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СтрокаТС = Неопределено;
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если ТекСтрока.ТС = ДанныеПодбора.ТС Тогда 
				СтрокаТС = ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТС = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаМЛ = Неопределено;
		Для Каждого ТекСтрокаМЛ Из СтрокаТС.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаМЛ.GUID = ДанныеПодбора.GUID Тогда 
				СтрокаМЛ = ТекСтрокаМЛ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТС.ПолучитьЭлементы().Количество() = 0 Тогда 
			СтрокаМЛ = СтрокаТС;
		КонецЕсли;
		СтрокаТС = СтрокаМЛ;
		Если СтрокаТС = Неопределено Тогда 
			Возврат;
		КонецЕсли;

		СтрокаЗаказа      = Неопределено;
		мОтмеченныеЗаказы = Новый Массив();
		Для Каждого ТекЗаказ Из ДанныеПодбора.Заказы Цикл 
			СтрокаЗаказа = Неопределено;
			
			Для Каждого ТекСтрока Из ОтмеченныеЗаказы Цикл
				Если ТекСтрока.Ссылка = ТекЗаказ Тогда
					СтрокаЗаказа = ТекСтрока.Ссылка;
					мОтмеченныеЗаказы.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаЗаказа = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыПеретаскивания = Новый Структура("Действие,ДопустимыеДействия,Значение",
			ДействиеПеретаскивания.Копирование,
			ДопустимыеДействияПеретаскивания.Копирование,
			СтрокаЗаказа);
			
			Если НастройкаВремяВыездаИзГаража = 1 Тогда 
				мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
			Иначе
				ОтправлениеС = ПолучитьДатуОтправления(СтрокаЗаказа);
				ВремяОтправления = ОтправлениеС-НачалоДня(ОтправлениеС);
				мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаТС = Неопределено;
		Для Каждого ТекСтрока Из МаршрутыСписок Цикл 
			Если ТекСтрока.ТС = ДанныеПодбора.ТС
				И ТекСтрока.GUID = ДанныеПодбора.GUID Тогда 
				СтрокаТС = ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТС = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаЗаказа      = Неопределено;
		СтрокаТекЗаказа   = Неопределено;
		мОтмеченныеЗаказы = Новый Массив();
		Для Каждого ТекЗаказ Из ДанныеПодбора.Заказы Цикл 
			СтрокаЗаказа = Неопределено;
			
			Для Каждого ТекСтрока Из ОтмеченныеЗаказы Цикл
				Если ТекСтрока.Ссылка = ТекЗаказ Тогда
					СтрокаЗаказа = ТекСтрока.Ссылка;
					мОтмеченныеЗаказы.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаЗаказа = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыПеретаскивания = Новый Структура("Действие,ДопустимыеДействия,Значение",
			ДействиеПеретаскивания.Копирование,
			ДопустимыеДействияПеретаскивания.Копирование,
			СтрокаЗаказа);
			
			СтрокаТекЗаказа = СтрокаЗаказа;
			
		КонецЦикла;
		
		Если НастройкаВремяВыездаИзГаража = 1 Тогда 
			мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
		Иначе
			
			Если СтрокаТекЗаказа <> Неопределено Тогда 
				ОтправлениеС      = ПолучитьДатуОтправления(СтрокаЗаказа);
				ВремяОтправления  = ОтправлениеС - НачалоДня(ОтправлениеС);
				мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаЗаказа = Неопределено Тогда
		Возврат;
	Конецесли;
	
	ПеретаскиваниеНаМаршруты(Элементы.МаршрутыДерево, ПараметрыПеретаскивания, Ложь, СтрокаТС, Неопределено, мДатаИВремяНачала, Истина,,мОтмеченныеЗаказы);
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьВременныеХарактеристикиМашрута();
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Истина);
		ОтобразитьИтоговыеДанныеПоМаршрутам();
		
		Если НастройкаИспользоватьРасчетТары Тогда 
			ОбновитьРеквизитыТарыИРазмещения();
		КонецЕсли;

		Если СтрокаТС.УровеньДерева = "ТС" 
			И СтрокаТС.ПолучитьЭлементы().Количество() <> 0 Тогда
			ДанныеПодбора.GUID = СтрокаТС.ПолучитьЭлементы()[0].GUID;
			Элементы.МаршрутыДерево.ТекущаяСтрока = СтрокаТС.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			МаршрутыДеревоПриАктивизацииСтроки(Неопределено);

		КонецЕсли;
	Иначе
		Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТС.ПолучитьИдентификатор();
		МаршрутыСписокПриАктивизацииСтрокиКлиент();
	КонецЕсли;
	
	ОтобразитьДанныеНаКарте_МЛ();
	ОтобразитьДанныеНаКарте_Заказ_Удалить(ДанныеПодбора.Заказы);
	
	ОбновитьПланировщик();
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыАвтоматическогоРазмещенияВСекциях()
	
	Результат = Новый Структура("АвтоРазмещениеВключено, ОбъемВсего, Распределено", Ложь, 0, 0);
	
	флЕстьСекцииПоТС = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		// Дерево
		Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если флЕстьСекцииПоТС Тогда 
				Прервать;
			КонецЕсли;
			
			Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
				Если флЕстьСекцииПоТС Тогда 
					Прервать;
				КонецЕсли;
				
				Если Не ТекМЛ.СоздатьМаршрутныйЛист Тогда
					Продолжить;
				КонецЕсли;
				
				мсвТС = Новый Массив();
				мсвТС.Добавить(ТекТС.ТС);
				мсвТС.Добавить(ТекТС.Прицеп1);
				мсвТС.Добавить(ТекТС.Прицеп2);
				
				ЗапросСекции = Новый Запрос();
				ЗапросСекции.УстановитьПараметр("мсвТС", мсвТС);
				
				ЗапросСекции.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатСекцииТС.Наименование КАК Наименование
				|ИЗ
				|	Справочник.уатСекцииТС КАК уатСекцииТС
				|ГДЕ
				|	уатСекцииТС.Владелец В(&мсвТС)
				|	И НЕ уатСекцииТС.ПометкаУдаления";
				
				Если Не ЗапросСекции.Выполнить().Пустой() Тогда 
					флЕстьСекцииПоТС = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Список
		Для Каждого ТекМЛ Из МаршрутыСписок Цикл
			Если флЕстьСекцииПоТС Тогда 
				Прервать;
			КонецЕсли;
			
			Если Не ТекМЛ.СоздатьМаршрутныйЛист Тогда
				Продолжить;
			КонецЕсли;
			
			мсвТС = Новый Массив();
			мсвТС.Добавить(ТекМЛ.ТС);
			мсвТС.Добавить(ТекМЛ.Прицеп1);
			мсвТС.Добавить(ТекМЛ.Прицеп2);
			
			ЗапросСекции = Новый Запрос();
			ЗапросСекции.УстановитьПараметр("мсвТС", мсвТС);
			
			ЗапросСекции.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатСекцииТС.Наименование КАК Наименование
			|ИЗ
			|	Справочник.уатСекцииТС КАК уатСекцииТС
			|ГДЕ
			|	уатСекцииТС.Владелец В(&мсвТС)
			|	И НЕ уатСекцииТС.ПометкаУдаления";
			
			Если Не ЗапросСекции.Выполнить().Пустой() Тогда 
				флЕстьСекцииПоТС = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не флЕстьСекцииПоТС Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.АвтоРазмещениеВключено = Истина;
	ТребуетсяПерераспределение = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		// Дерево
		Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если ТребуетсяПерераспределение Тогда 
				Прервать;
			КонецЕсли;
			
			Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
				Если ТребуетсяПерераспределение Тогда 
					Прервать;
				КонецЕсли;
				
				Если Не ТекМЛ.СоздатьМаршрутныйЛист Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл 
					Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
						Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
							Продолжить;
						КонецЕсли;
						
						Если ТекЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда 
							Если Не ЗначениеЗаполнено(ТекЗаказ.GUID) Или ТекЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								ТекЗаказ.GUID = Строка(Новый УникальныйИдентификатор());
							КонецЕсли;
							
							Результат.ОбъемВсего = Результат.ОбъемВсего + ТекЗаказ.Объем;
							
							НайдСтроки = ТекМЛ.Секции.НайтиСтроки(Новый Структура("GUIDСтроки", Новый УникальныйИдентификатор(ТекЗаказ.GUID)));
							Для Каждого НайдСтрока Из НайдСтроки Цикл 
								Результат.Распределено = Результат.Распределено + НайдСтрока.Объем;
							КонецЦикла;
							
						Иначе 
							Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
								Если Не ЗначениеЗаполнено(ТекГруз.GUID) Или ТекГруз.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									ТекГруз.GUID = Строка(Новый УникальныйИдентификатор());
								КонецЕсли;
								
								Результат.ОбъемВсего = Результат.ОбъемВсего + ТекГруз.Объем;
								
								НайдСтроки = ТекМЛ.Секции.НайтиСтроки(Новый Структура("GUIDСтроки", Новый УникальныйИдентификатор(ТекГруз.GUID)));
								Для Каждого НайдСтрока Из НайдСтроки Цикл 
									Результат.Распределено = Результат.Распределено + НайдСтрока.Объем;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Не Результат.Распределено = 0 И (Результат.ОбъемВсего > Результат.Распределено) Тогда 
					ТребуетсяПерераспределение = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Список
		Для Каждого ТекМЛ Из МаршрутыСписок Цикл 
			Если ТребуетсяПерераспределение Тогда 
				Прервать;
			КонецЕсли;
			
			Если Не ТекМЛ.СоздатьМаршрутныйЛист Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
					Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТекЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда 
						Если Не ЗначениеЗаполнено(ТекЗаказ.GUID) Или ТекЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							ТекЗаказ.GUID = Строка(Новый УникальныйИдентификатор());
						КонецЕсли;
						
						Результат.ОбъемВсего = Результат.ОбъемВсего + ТекЗаказ.Объем;
						
						НайдСтроки = ТекМЛ.Секции.НайтиСтроки(Новый Структура("GUIDСтроки", Новый УникальныйИдентификатор(ТекЗаказ.GUID)));
						Для Каждого НайдСтрока Из НайдСтроки Цикл 
							Результат.Распределено = Результат.Распределено + НайдСтрока.Объем;
						КонецЦикла;
						
					Иначе 
						Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
							Если Не ЗначениеЗаполнено(ТекГруз.GUID) Или ТекГруз.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								ТекГруз.GUID = Строка(Новый УникальныйИдентификатор());
							КонецЕсли;
							
							Результат.ОбъемВсего = Результат.ОбъемВсего + ТекГруз.Объем;
							
							НайдСтроки = ТекМЛ.Секции.НайтиСтроки(Новый Структура("GUIDСтроки", Новый УникальныйИдентификатор(ТекГруз.GUID)));
							Для Каждого НайдСтрока Из НайдСтроки Цикл 
								Результат.Распределено = Результат.Распределено + НайдСтрока.Объем;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если Не Результат.Распределено = 0 И (Результат.ОбъемВсего > Результат.Распределено) Тогда 
				ТребуетсяПерераспределение = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьМаршрутныеЛистыЗавершение()
	
	флПодтвердитьПерераспределение = Ложь;
	
	мсвМаршрутныеЛисты = Неопределено;
	МассивОшибокСозданияМЛ = Новый Массив();
	СоздатьМЛСервер(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ);
	ОбновитьЗаказы(Неопределено);
	
	Если МассивОшибокСозданияМЛ.Количество() Тогда 
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибокСозданияМЛ);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='Errors occured while creating of routing lists:';ru='При создании маршрутных листов возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Ошибка");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	
	мсвДокументыДляПечати = Новый Массив;
	Для Каждого ТекМЛ Из мсвМаршрутныеЛисты Цикл
		Если НастройкаОткрыватьФормыДокументов Тогда
			ПоказатьЗначение(, ТекМЛ);
		КонецЕсли;
		
		Для Сч = 1 По НастройкаКопийПечатныхФормМЛ Цикл
			мсвДокументыДляПечати.Добавить(ТекМЛ)
		КонецЦикла;
	КонецЦикла;
	ПерезаписатьПунктыНазначения(МассивЗаказовДляПерезаписи, мсвМаршрутныеЛисты);
	
	Если НастройкаПечататьМаршрутныеЛисты И НастройкаКопийПечатныхФормМЛ > 0 И ЗначениеЗаполнено(НастройкаПечатнаяФормаМЛ) Тогда
		Если НастройкаПечатнаяФормаМЛ = "Маршрутный лист" Тогда
			ИмяПечФормы = "МаршрутныйЛист";
		Иначе
			ИмяПечФормы = "МаршрутныйЛистСЗаказами";
		КонецЕсли;
		Если НастройкаПечататьСразуНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.уатМаршрутныйЛист", ИмяПечФормы, мсвДокументыДляПечати, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатМаршрутныйЛист", ИмяПечФормы, мсвДокументыДляПечати, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	МаршрутыСписокПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьМЛсервер(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ)
	
	// Заказы, которые частично записаны в Маршрутные листы, должны отображаться в списке заказов
	ИдентификаторыУдаляемыхЗаказов = Новый Массив;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		СоздатьМЛсерверДерево(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ, ИдентификаторыУдаляемыхЗаказов);
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
	Иначе
		СоздатьМЛсерверСписок(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ, ИдентификаторыУдаляемыхЗаказов);
	КонецЕсли;
	
	флагОбновитьСписокЗаказов = Ложь;
	Для Каждого ДанныеИдентификатора Из ИдентификаторыУдаляемыхЗаказов Цикл
		ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
		Если ИндексМассива <> Неопределено Тогда
			МассивРаспределенныхЗаказов.Удалить(ИндексМассива);
			флагОбновитьСписокЗаказов = Истина;
		КонецЕсли;
	КонецЦикла;
	Если флагОбновитьСписокЗаказов Тогда
		ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьМЛсерверДерево(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ, ИдентификаторыУдаляемыхЗаказов)
	
	мсвМаршрутныеЛисты = Новый Массив();
	
	ДеревоМаршрутовСервер = РеквизитФормыВЗначение("МаршрутыДерево");
	
	Для Каждого ТекСтрокаТС Из ДеревоМаршрутовСервер.Строки Цикл
		Если ТекСтрокаТС.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.Строки Цикл
			Если Не ТекСтрокаМЛ.СоздатьМаршрутныйЛист Или ТекСтрокаМЛ.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.Группировка) И ТипЗнч(ТекСтрокаМЛ.Группировка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
				НовДок = ТекСтрокаМЛ.Группировка.ПолучитьОбъект();
				НовДок.Заказы.Очистить();
				
			Иначе
				НовДок = Документы.уатМаршрутныйЛист.СоздатьДокумент();
				Если НачалоДня(ДатаПланирования) < НачалоДня(ТекущаяДата()) Тогда 
					НовДок.Дата = КонецДня(ДатаПланирования);
				ИначеЕсли НачалоДня(ДатаПланирования) > НачалоДня(ТекущаяДата()) Тогда
					НовДок.Дата = НачалоДня(ДатаПланирования);
				Иначе 
					НовДок.Дата = ТекущаяДата();
				КонецЕсли;
				
				НовДок.ВидОперации  = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
				НовДок.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
				
				уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Ложь, Истина, НовДок);
				НовДок.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
				
				Если НастройкаОрганизацияМЛИсточник = 0 Тогда
					НовДок.Организация = НовДок.Организация;
				ИначеЕсли НастройкаОрганизацияМЛИсточник = 1 Тогда
					НовДок.Организация = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НовДок.Дата, Ложь).Организация;
				ИначеЕсли НастройкаОрганизацияМЛИсточник = 2 Тогда
					НовДок.Организация = НастройкаОрганизацияМЛ;
				КонецЕсли;
			КонецЕсли;
			
			НовДок.ПринадлежностьПеревозки = ТекСтрокаТС.Группировка.ПринадлежностьТС;
			Если НастройкаУстанавливатьФлагСозданАвтоматическиМЛ Тогда
				НовДок.СозданАвтоматически = ТекСтрокаМЛ.СозданАвтоматически;
			КонецЕсли;
			
			Если НастройкаСохранятьЭтапыМаршрутизации Тогда
				НовДок.ЭтапМаршрутизации = ТекСтрокаМЛ.ЭтапМаршрутизации;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.ОбъектСтроительства) Тогда
				НовДок.ОбъектСтроительства = ТекСтрокаМЛ.ОбъектСтроительства;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.Маршрут) Тогда
				НовДок.Маршрут = ТекСтрокаМЛ.Маршрут;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.ВидПеревозки) Тогда
				НовДок.ВидПеревозки = ТекСтрокаМЛ.ВидПеревозки;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.НаправлениеПеревозки) Тогда
				НовДок.НаправлениеПеревозки = ТекСтрокаМЛ.НаправлениеПеревозки;
			КонецЕсли;
			
			Если Не НовДок.ТС = ТекСтрокаТС.Группировка Тогда 
				НовДок.ТС = ТекСтрокаТС.Группировка;
				
				Если ЗначениеЗаполнено(ТекСтрокаТС.Группировка) Тогда 
					Если ТекСтрокаТС.Группировка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
						ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.Группировка, НовДок.Дата, Ложь).Организация;
						Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
							ВладелецТС = ТекСтрокаТС.Группировка.Организация;
						КонецЕсли;
						
					ИначеЕсли ТекСтрокаТС.Группировка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
						ВладелецТС = ТекСтрокаТС.Группировка.ВладелецТС;
						СписокДоговоров = Новый СписокЗначений;
						СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
						СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
						Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовДок.Организация, ВладелецТС, СтрПараметров);
						НовДок.Водитель1 = ТекСтрокаТС.Группировка.Водитель;
					Иначе
						ВладелецТС       = Неопределено;
						Договор          = Неопределено;
						НовДок.Водитель1 = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекСтрокаТС.Группировка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
					НовДок.Контрагент         = Справочники.Организации.ПустаяСсылка();
					НовДок.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Иначе 
					НовДок.Контрагент         = ВладелецТС;
					НовДок.ДоговорКонтрагента = Договор;
				КонецЕсли;
				
				Если ТекСтрокаТС.Группировка <> Неопределено И ТекСтрокаТС.Группировка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
					СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрокаТС.Группировка, НовДок.Дата, НовДок.Организация);
					НовДок.Водитель1 = СтруктураЭкипаж.Водитель;
					Если ЗначениеЗаполнено(НовДок.Водитель1) Тогда
						НовДок.Водитель2  = СтруктураЭкипаж.Водитель2;
					Иначе
						НовДок.Водитель1  = СтруктураЭкипаж.Водитель2;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НовДок.Прицеп1 = ТекСтрокаМЛ.Прицеп1;
			НовДок.Прицеп2 = ТекСтрокаМЛ.Прицеп2;
			
			НовДок.Маршрут = ТекСтрокаМЛ.Маршрут;
			
			НовДок.ПересчетВремени = ТекСтрокаМЛ.ПересчетВремени;
			
			КолСтрокПогрузки    = 1;
			СуммарноеРасстояние = 0;
			ПредПунктСтрока     = Неопределено;
			ПредВремяОтпр       = 0;
			
			флСоздаватьЗаказПеревозчику = Ложь;
			мсвЗатратыПеревозчика = Новый Массив();
			
			НовДок.ДатаИВремяОтправленияПлан = ТекСтрокаМЛ.Строки[0].УбытиеПлан;
			
			МассивСтрокДляУстановкиФлагаЗаписи = Новый Массив;
			Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.Строки Цикл
				МассивСтрокДляУстановкиФлагаЗаписи.Добавить(ТекСтрокаПункт);
				
				ПредПунктСтрока = ТекСтрокаПункт;
				
				Если ТекСтрокаПункт.Строки.Количество() Тогда
					Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл
						Если ТекСтрокаЗаказ.СоздаватьЗаказПеревозчику Тогда 
							флСоздаватьЗаказПеревозчику = Истина;
						КонецЕсли;
						
						Для Каждого ТекЗатрата Из ТекСтрокаЗаказ.ЗатратыНаПеревозку Цикл 
							стрЗатрата = Новый Структура("Груз,Количество,Номенклатура,СтавкаНДС,СтатьяРасходов,Сумма,СуммаНДС,Тариф,Цена",
							ТекСтрокаЗаказ.Этап,
							ТекЗатрата.Количество,
							ТекЗатрата.Номенклатура,
							ТекЗатрата.СтавкаНДС,
							ТекЗатрата.Статья,
							ТекЗатрата.Сумма,
							ТекЗатрата.СуммаНДС,
							ТекЗатрата.Тариф,
							ТекЗатрата.Цена);
							мсвЗатратыПеревозчика.Добавить(стрЗатрата);
						КонецЦикла;
						
						МассивСтрокДляУстановкиФлагаЗаписи.Добавить(ТекСтрокаЗаказ);
						Если ТекСтрокаЗаказ.Строки.Количество() Тогда
							Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.Строки Цикл
								МассивСтрокДляУстановкиФлагаЗаписи.Добавить(ТекСтрокаНом);
								
								Если Не ЗначениеЗаполнено(ТекСтрокаНом.GUID) Или ТекСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									ТекСтрокаНом.GUID = Строка(Новый УникальныйИдентификатор());
								КонецЕсли;
								
								НовСтрокаТЧЗаказы = НовДок.Заказы.Добавить();
								НовСтрокаТЧЗаказы.GUIDСтроки               = Новый УникальныйИдентификатор(ТекСтрокаНом.GUID);
								НовСтрокаТЧЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.Операция;
								НовСтрокаТЧЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.Этап;
								НовСтрокаТЧЗаказы.Номенклатура             = ТекСтрокаНом.Группировка; 
								НовСтрокаТЧЗаказы.ВесБрутто                = ТекСтрокаНом.ВесБрутто;
								НовСтрокаТЧЗаказы.Объем                    = ТекСтрокаНом.Объем;
								НовСтрокаТЧЗаказы.ЕдиницаИзмерения         = ТекСтрокаНом.ЕдиницаИзмерения;  
								НовСтрокаТЧЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрокаНом.ЕдиницаИзмерения; 
								НовСтрокаТЧЗаказы.Количество               = ТекСтрокаНом.Количество;
								НовСтрокаТЧЗаказы.КоличествоМест           = ТекСтрокаНом.КолМест;
								НовСтрокаТЧЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
								НовСтрокаТЧЗаказы.СтоянкаИзПункта          = ТекСтрокаПункт.СтоянкаИзПункта;
								НовСтрокаТЧЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
								НовСтрокаТЧЗаказы.Время                    = ТекСтрокаПункт.ВремяВПути;
								НовСтрокаТЧЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ВремяПрибытияВПункт;
								НовСтрокаТЧЗаказы.УбытиеПлан               = ТекСтрокаПункт.УбытиеПлан;
								НовСтрокаТЧЗаказы.Пункт                    = ТекСтрокаПункт.Адрес;
								НовСтрокаТЧЗаказы.Ожидание                 = ТекСтрокаПункт.Ожидание;
								НовСтрокаТЧЗаказы.Терминал                 = ТекСтрокаЗаказ.Терминал;
								НовСтрокаТЧЗаказы.ВесТары                  = ТекСтрокаНом.ВесТары;
								НовСтрокаТЧЗаказы.Группа                   = ТекСтрокаНом.Группа;
								НовСтрокаТЧЗаказы.Паллета                  = ТекСтрокаНом.Паллета;
								НовСтрокаТЧЗаказы.Размещение               = ТекСтрокаНом.Размещение;
								
								Если НовСтрокаТЧЗаказы.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
									НомерЗаказа = ТекСтрокаЗаказ.Номер;
									КодГруза    = ТекСтрокаНом.Код;
									ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "", "_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
									ИдентификаторыУдаляемыхЗаказов.Добавить(ДанныеИдентификатора);
								КонецЕсли;
								
							КонецЦикла;
							
						Иначе
							ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
							
							Если Не ЗначениеЗаполнено(ТекСтрокаЗаказ.GUID) Или ТекСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								ТекСтрокаЗаказ.GUID = Строка(Новый УникальныйИдентификатор());
							КонецЕсли;
							
							НовСтрокаТЧЗаказы = НовДок.Заказы.Добавить();
							НовСтрокаТЧЗаказы.GUIDСтроки               = Новый УникальныйИдентификатор(ТекСтрокаЗаказ.GUID);
							НовСтрокаТЧЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.Операция;
							НовСтрокаТЧЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.Этап;
							НовСтрокаТЧЗаказы.ВесБрутто                = ТекСтрокаЗаказ.ВесБрутто;
							НовСтрокаТЧЗаказы.Объем                    = ТекСтрокаЗаказ.Объем;
							НовСтрокаТЧЗаказы.ЕдиницаИзмерения         = ПустаяЕИ;  
							НовСтрокаТЧЗаказы.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
							НовСтрокаТЧЗаказы.Количество               = ТекСтрокаЗаказ.Количество;
							НовСтрокаТЧЗаказы.КоличествоМест           = ТекСтрокаЗаказ.КолМест;
							НовСтрокаТЧЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
							НовСтрокаТЧЗаказы.СтоянкаИзПункта          = ТекСтрокаПункт.СтоянкаИзПункта;
							НовСтрокаТЧЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
							НовСтрокаТЧЗаказы.Время                    = ТекСтрокаПункт.ВремяВПути;
							НовСтрокаТЧЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ВремяПрибытияВПункт;
							НовСтрокаТЧЗаказы.УбытиеПлан               = ТекСтрокаПункт.УбытиеПлан;
							НовСтрокаТЧЗаказы.Пункт                    = ТекСтрокаПункт.Адрес;
							НовСтрокаТЧЗаказы.Ожидание                 = ТекСтрокаПункт.Ожидание;
							НовСтрокаТЧЗаказы.Терминал                 = ТекСтрокаЗаказ.Терминал;
							НовСтрокаТЧЗаказы.ВесТары                  = ТекСтрокаЗаказ.ВесТары;
							НовСтрокаТЧЗаказы.Группа                   = ТекСтрокаЗаказ.Группа;
							НовСтрокаТЧЗаказы.Паллета                  = ТекСтрокаЗаказ.Паллета;
							НовСтрокаТЧЗаказы.Размещение               = ТекСтрокаЗаказ.Размещение;
						КонецЕсли;
					КонецЦикла; 
					
				Иначе
					Если Не ЗначениеЗаполнено(ТекСтрокаПункт.GUID) Или ТекСтрокаПункт.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
						ТекСтрокаПункт.GUID = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;
					
					НовСтрокаТЧЗаказы = НовДок.Заказы.Добавить();
					НовСтрокаТЧЗаказы.GUIDСтроки       = Новый УникальныйИдентификатор(ТекСтрокаПункт.GUID);
					НовСтрокаТЧЗаказы.Пункт            = ТекСтрокаПункт.Адрес;
					НовСтрокаТЧЗаказы.Ожидание         = ТекСтрокаПункт.Ожидание;
					НовСтрокаТЧЗаказы.Стоянка          = ТекСтрокаПункт.Стоянка;
					НовСтрокаТЧЗаказы.СтоянкаИзПункта  = ТекСтрокаПункт.СтоянкаИзПункта;
					НовСтрокаТЧЗаказы.Расстояние       = ТекСтрокаПункт.Расстояние;
					НовСтрокаТЧЗаказы.Время            = ТекСтрокаПункт.ВремяВПути;
					НовСтрокаТЧЗаказы.ПрибытиеПлан     = ТекСтрокаПункт.ВремяПрибытияВПункт;
					НовСтрокаТЧЗаказы.УбытиеПлан       = ТекСтрокаПункт.УбытиеПлан;

					НовСтрокаТЧЗаказы.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
				КонецЕсли;
			КонецЦикла;    
			
			НовДок.Секции.Очистить();
			Для Каждого СтрокаСекции Из ТекСтрокаМЛ.Секции Цикл 
				НовСтрокаСекции = НовДок.Секции.Добавить();
				НовСтрокаСекции.GUIDСтроки = СтрокаСекции.GUIDСтроки;
				НовСтрокаСекции.Секция     = СтрокаСекции.Секция;
				НовСтрокаСекции.Объем      = СтрокаСекции.Объем;
			КонецЦикла;
			
			ТекстОшибкиЗаполнения = "";
			
			Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(НовДок);
			Документы.уатМаршрутныйЛист.УстановитьФлагРазрешенаВыгрузкаВWMS(НовДок);
			НовДок.ОбновитьВремяРасстояниеМеждуПунктами();
			НовДок.РассчитатьИтоговыеПоказатели();
			НовДок.АвтоматическийРасчетИтогов();
			
			ЕстьОшибкиЗаполнения = Не НовДок.ПроверитьЗаполнение();
			
			Если ЕстьОшибкиЗаполнения Тогда 
				МассивОшибок = ПолучитьСообщенияПользователю(Истина);
				Для Каждого ТекОшибка Из МассивОшибок Цикл 
					ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьОшибкиЗаполнения Тогда 
				РежимЗаписиМЛ = РежимЗаписиДокумента.Запись;
			Иначе 
				РежимЗаписиМЛ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			ТекстОшибкиЗаписи = "";  
			
			НовДок.ШаблонНастроек = ВариантНастройки;
			Попытка 
				НовДок.ДополнительныеСвойства.Вставить("НастройкаНеРассчитыватьВыработку", НастройкаНеРассчитыватьВыработку);
				НовДок.Записать(РежимЗаписиМЛ);
			Исключение
				ТекстОшибкиЗаписи = ОписаниеОшибки();
				НовДок.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ТекСтрокаМЛ.ЭтапМаршрутизации) Тогда
				ЭтапМаршрутизации = ТекСтрокаМЛ.ЭтапМаршрутизации.ПолучитьОбъект();
				
				Для Каждого ТекМетрика Из ЭтапМаршрутизации.Метрики Цикл
					Если ТекМетрика.GUIDТС = ТекСтрокаТС.GUID Тогда
						ТекМетрика.МаршрутныйЛист = НовДок.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				Попытка
					ЭтапМаршрутизации.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если Не ТекстОшибкиЗаполнения = "" Или Не ТекстОшибкиЗаписи = "" Тогда 
				РезТекстОшибки = НСтр("en='While creating routing list';ru='При создании маршрутного листа'") + " " 
					+ НСтр("en='errors occured:';ru='возникли ошибки:'") + " "
					+ ТекстОшибкиЗаполнения + ?(Не ТекстОшибкиЗаполнения = "" И Не ТекстОшибкиЗаписи = "","; ","")
					+ ТекстОшибкиЗаписи + Символы.ПС 
					+ НСтр("en='Document recorded without posting.';ru='Документ записан без проведения.'");
				ПараметрыТекстОшибки = Новый Массив();
				ПараметрыТекстОшибки.Добавить(РезТекстОшибки);
				МассивОшибокСозданияМЛ.Добавить(
					Новый Структура(
						"Группа, Критичность, КодОшибки, Объект, Параметры",
						"Маршрутные листы",
						?(ТекстОшибкиЗаписи = "", "Предупреждение", "Ошибка"),
						"Ошибка_32",
						НовДок.Ссылка, ПараметрыТекстОшибки)
				);
			КонецЕсли;
			
			Если НовДок.ТС.ПринадлежностьТС <> Перечисления.уатПринадлежностьТС.Собственное И флСоздаватьЗаказПеревозчику Тогда 
				ДокЗаказПеревозчику = Документы.уатЗаказПеревозчику_уэ.СоздатьДокумент();
				ДокЗаказПеревозчику.Заполнить(НовДок.Ссылка);
				
				Если НачалоДня(ДатаПланирования) < НачалоДня(ТекущаяДата()) Тогда 
					ДокЗаказПеревозчику.Дата = КонецДня(ДатаПланирования);
				ИначеЕсли НачалоДня(ДатаПланирования) > НачалоДня(ТекущаяДата()) Тогда
					ДокЗаказПеревозчику.Дата = НачалоДня(ДатаПланирования);
				Иначе 
					ДокЗаказПеревозчику.Дата = ТекущаяДата();
				КонецЕсли;
				
				Для Каждого ТекЗатрата Из мсвЗатратыПеревозчика Цикл 
					НовСтрЗатрат = ДокЗаказПеревозчику.Расходы.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрЗатрат, ТекЗатрата);
				КонецЦикла;
				
				ДокЗаказПеревозчику.РассчитатьИтоговыеПоказатели();
				ДокЗаказПеревозчику.АвтоматическийПересчетРасходов();
				
				Попытка
					ДокЗаказПеревозчику.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					ДокЗаказПеревозчику.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			КонецЕсли;
			
			Для Каждого ТекСтрокаФлагаЗаписи Из МассивСтрокДляУстановкиФлагаЗаписи Цикл
				ТекСтрокаФлагаЗаписи.МаршрутныйЛистЗаписан = Истина;
			КонецЦикла;
			
			ТекСтрокаМЛ.Группировка     = НовДок.Ссылка;
			ТекСтрокаМЛ.ПредставлениеМЛ = СтрШаблон(Нстр("ru = '%1 от %2'; en = '%1 from %2'"), НовДок.Номер,
			НовДок.Дата);

			Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
					ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
				ТекСтрокаМЛ.ПредставлениеОбъектаДляКартыOSM = СформироватьПредставлениеДокументаДляКартыМаршруты(
					"уатМаршрутныйЛист",
					Строка(НовДок.Ссылка.УникальныйИдентификатор()),
					НовДок.Номер,
					НовДок.Дата
				);
			КонецЕсли;
			мсвМаршрутныеЛисты.Добавить(НовДок.Ссылка);
			
			ТекСтрокаМЛ.Модифицированность = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоМаршрутовСервер, "МаршрутыДерево");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьМЛсерверСписок(мсвМаршрутныеЛисты, МассивОшибокСозданияМЛ, ИдентификаторыУдаляемыхЗаказов)
	
	мсвМаршрутныеЛисты = Новый Массив();
	МассивМЛДляЗаписи  = Новый Соответствие();
	
	СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	
	
	Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
		Если НЕ ТекСтрокаТС.СоздатьМаршрутныйЛист Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекСтрокаТС.АдресВременногоХранилища, ТекСтрокаТС.GUID);
		
		Если ЗначениеЗаполнено(ТекСтрокаТС.МЛ) Тогда
			НовДок = ТекСтрокаТС.МЛ.ПолучитьОбъект();
			НовДок.Заказы.Очистить();
			
		Иначе
			НовДок = Документы.уатМаршрутныйЛист.СоздатьДокумент();
			Если НачалоДня(ДатаПланирования) < НачалоДня(ТекущаяДата()) Тогда 
				НовДок.Дата = КонецДня(ДатаПланирования);
			ИначеЕсли НачалоДня(ДатаПланирования) > НачалоДня(ТекущаяДата()) Тогда
				НовДок.Дата = НачалоДня(ДатаПланирования);
			Иначе 
				НовДок.Дата = ТекущаяДата();
			КонецЕсли;
			
			НовДок.ВидОперации  = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
			НовДок.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
			
			уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Ложь, Истина, НовДок);
			НовДок.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
			
			Если НастройкаОрганизацияМЛИсточник = 0 Тогда
				НовДок.Организация = НовДок.Организация;
			ИначеЕсли НастройкаОрганизацияМЛИсточник = 1 Тогда
				НовДок.Организация = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НовДок.Дата, Ложь).Организация;
			ИначеЕсли НастройкаОрганизацияМЛИсточник = 2 Тогда
				НовДок.Организация = НастройкаОрганизацияМЛ;
			КонецЕсли;
		КонецЕсли;
		
		НовДок.ПринадлежностьПеревозки = ТекСтрокаТС.ПринадлежностьТС;
		Если НастройкаУстанавливатьФлагСозданАвтоматическиМЛ Тогда
			НовДок.СозданАвтоматически = ТекСтрокаТС.СозданАвтоматически;
		КонецЕсли;
		
		Если НастройкаСохранятьЭтапыМаршрутизации Тогда
			НовДок.ЭтапМаршрутизации = ТекСтрокаТС.ЭтапМаршрутизации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрокаТС.ОбъектСтроительства) Тогда
			НовДок.ОбъектСтроительства = ТекСтрокаТС.ОбъектСтроительства;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаТС.Маршрут) Тогда
			НовДок.Маршрут = ТекСтрокаТС.Маршрут;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаТС.ВидПеревозки) Тогда
			НовДок.ВидПеревозки = ТекСтрокаТС.ВидПеревозки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаТС.НаправлениеПеревозки) Тогда
			НовДок.НаправлениеПеревозки = ТекСтрокаТС.НаправлениеПеревозки;
		КонецЕсли;
		
		Если Не НовДок.ТС = ТекСтрокаТС.ТС Тогда 
			НовДок.ТС = ТекСтрокаТС.ТС;
			
			Если ЗначениеЗаполнено(ТекСтрокаТС.ТС) Тогда 
				Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
					ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НовДок.Дата, Ложь).Организация;
					Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
						ВладелецТС = ТекСтрокаТС.ТС.Организация;
					КонецЕсли;
					
				ИначеЕсли ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
					ВладелецТС = ТекСтрокаТС.ТС.ВладелецТС;
					СписокДоговоров = Новый СписокЗначений;
					СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
					СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
					Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовДок.Организация, ВладелецТС, СтрПараметров);
					НовДок.Водитель1 = ТекСтрокаТС.ТС.Водитель;
				Иначе
					ВладелецТС       = Неопределено;
					Договор          = Неопределено;
					НовДок.Водитель1 = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
				НовДок.Контрагент         = Справочники.Организации.ПустаяСсылка();
				НовДок.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе 
				НовДок.Контрагент         = ВладелецТС;
				НовДок.ДоговорКонтрагента = Договор;
			КонецЕсли;
			
			Если ТекСтрокаТС.ТС <> Неопределено И ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
				СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрокаТС.ТС, НовДок.Дата, НовДок.Организация);
				НовДок.Водитель1 = СтруктураЭкипаж.Водитель;
				Если ЗначениеЗаполнено(НовДок.Водитель1) Тогда
					НовДок.Водитель2  = СтруктураЭкипаж.Водитель2;
				Иначе
					НовДок.Водитель1  = СтруктураЭкипаж.Водитель2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НовДок.Прицеп1 = ТекСтрокаТС.Прицеп1;
		НовДок.Прицеп2 = ТекСтрокаТС.Прицеп2;
		
		НовДок.Маршрут = ТекСтрокаТС.Маршрут;
		
		НовДок.ПересчетВремени = ТекСтрокаТС.ПересчетВремени;
		
		КолСтрокПогрузки    = 1;
		СуммарноеРасстояние = 0;
		ПредПунктСтрока     = Неопределено;
		ПредВремяОтпр       = 0;
		
		флСоздаватьЗаказПеревозчику = Ложь;
		мсвЗатратыПеревозчика = Новый Массив();
		
		МассивСтрокДляУстановкиФлагаЗаписи = Новый Массив;
		
		ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекСтрокаТС.GUID, "Пункт"));
		НовДок.ДатаИВремяОтправленияПлан = ЭлементыВеткаПункты[0].УбытиеПлан;

		Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
			ТекСтрокаПункт.ЗаказЗаписан = Истина;
			МассивСтрокДляУстановкиФлагаЗаписи.Добавить(ТекСтрокаПункт);
			
			ПредПунктСтрока = ТекСтрокаПункт;
			
			ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
				ТекСтрокаТС.GUID, ТекСтрокаПункт.GUIDПункта, "Заказ"));
			Если ЭлементыВеткаЗаказ.Количество() Тогда
				Для Каждого ТекСтрокаЗаказ Из ЭлементыВеткаЗаказ Цикл
					Если ЗначениеЗаполнено(ТекСтрокаЗаказ.МЛДляЗаписи)
						И ТекСтрокаЗаказ.МЛДляЗаписи <> ТекСтрокаТС.МЛ Тогда
						МассивМЛДляЗаписи.Вставить(ТекСтрокаТС.МЛ,
							Новый Структура("МЛ, СтрокаТС", ТекСтрокаТС.МЛ, ТекСтрокаТС));
						МассивМЛДляЗаписи.Вставить(ТекСтрокаЗаказ.МЛДляЗаписи,
							Новый Структура("МЛ, СтрокаТС", ТекСтрокаЗаказ.МЛДляЗаписи, ТекСтрокаЗаказ.МЛДляЗаписи));
					КонецЕсли;
					
					ТекСтрокаЗаказ.ЗаказЗаписан = Истина;
					Если ТекСтрокаЗаказ.СоздаватьЗаказПеревозчику Тогда 
						флСоздаватьЗаказПеревозчику = Истина;
					КонецЕсли;
					
					Для Каждого ТекЗатрата Из ТекСтрокаЗаказ.ЗатратыНаПеревозку Цикл 
						стрЗатрата = Новый Структура("Груз,Количество,Номенклатура,СтавкаНДС,СтатьяРасходов,Сумма,СуммаНДС,Тариф,Цена",
						ТекСтрокаЗаказ.Этап,
						ТекЗатрата.Количество,
						ТекЗатрата.Номенклатура,
						ТекЗатрата.СтавкаНДС,
						ТекЗатрата.Статья,
						ТекЗатрата.Сумма,
						ТекЗатрата.СуммаНДС,
						ТекЗатрата.Тариф,
						ТекЗатрата.Цена);
						мсвЗатратыПеревозчика.Добавить(стрЗатрата);
					КонецЦикла;
					
					МассивСтрокДляУстановкиФлагаЗаписи.Добавить(ТекСтрокаЗаказ);
					
					ЭлементыВеткаНоменклатура = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта,
					|GUIDЗаказа, УровеньДерева",
					ТекСтрокаТС.GUID, ТекСтрокаПункт.GUIDПункта, ТекСтрокаЗаказ.GUIDЗаказа, "Номенклатура"));

					Если ЭлементыВеткаНоменклатура.Количество() Тогда
						Для Каждого ТекСтрокаНом Из ЭлементыВеткаНоменклатура Цикл
							ТекСтрокаНом.ЗаказЗаписан = Истина;
							МассивСтрокДляУстановкиФлагаЗаписи.Добавить(ТекСтрокаНом);
							
							Если Не ЗначениеЗаполнено(ТекСтрокаНом.GUID) Или ТекСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								ТекСтрокаНом.GUID = Строка(Новый УникальныйИдентификатор());
							КонецЕсли;
							
							НовСтрокаТЧЗаказы = НовДок.Заказы.Добавить();
							НовСтрокаТЧЗаказы.GUIDСтроки               = Новый УникальныйИдентификатор(ТекСтрокаНом.GUID);
							НовСтрокаТЧЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.Операция;
							НовСтрокаТЧЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.Этап;
							НовСтрокаТЧЗаказы.Номенклатура             = ТекСтрокаНом.Группировка; 
							НовСтрокаТЧЗаказы.ВесБрутто                = ТекСтрокаНом.ВесБрутто;
							НовСтрокаТЧЗаказы.Объем                    = ТекСтрокаНом.Объем;
							НовСтрокаТЧЗаказы.ЕдиницаИзмерения         = ТекСтрокаНом.ЕдиницаИзмерения;  
							НовСтрокаТЧЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрокаНом.ЕдиницаИзмерения; 
							НовСтрокаТЧЗаказы.Количество               = ТекСтрокаНом.Количество;
							НовСтрокаТЧЗаказы.КоличествоМест           = ТекСтрокаНом.КолМест;
							НовСтрокаТЧЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
							НовСтрокаТЧЗаказы.СтоянкаИзПункта          = ТекСтрокаПункт.СтоянкаИзПункта;
							НовСтрокаТЧЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
							НовСтрокаТЧЗаказы.Время                    = ТекСтрокаПункт.ВремяВПути;
							НовСтрокаТЧЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ВремяПрибытияВПункт;
							НовСтрокаТЧЗаказы.УбытиеПлан               = ТекСтрокаПункт.УбытиеПлан;
							НовСтрокаТЧЗаказы.Пункт                    = ТекСтрокаПункт.Адрес;
							НовСтрокаТЧЗаказы.Ожидание                 = ТекСтрокаПункт.Ожидание;
							НовСтрокаТЧЗаказы.Терминал                 = ТекСтрокаЗаказ.Терминал;
							НовСтрокаТЧЗаказы.ВесТары                  = ТекСтрокаНом.ВесТары;
							НовСтрокаТЧЗаказы.Группа                   = ТекСтрокаНом.Группа;
							НовСтрокаТЧЗаказы.Паллета                  = ТекСтрокаНом.Паллета;
							НовСтрокаТЧЗаказы.Размещение               = ТекСтрокаНом.Размещение;
							
							Если НовСтрокаТЧЗаказы.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
								НомерЗаказа = ТекСтрокаЗаказ.Номер;
								КодГруза    = ТекСтрокаНом.Код;
								ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "", "_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
								ИдентификаторыУдаляемыхЗаказов.Добавить(ДанныеИдентификатора);
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
						
						Если Не ЗначениеЗаполнено(ТекСтрокаЗаказ.GUID) Или ТекСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							ТекСтрокаЗаказ.GUID = Строка(Новый УникальныйИдентификатор());
						КонецЕсли;
						
						НовСтрокаТЧЗаказы = НовДок.Заказы.Добавить();
						НовСтрокаТЧЗаказы.GUIDСтроки               = Новый УникальныйИдентификатор(ТекСтрокаЗаказ.GUID);
						НовСтрокаТЧЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.Операция;
						НовСтрокаТЧЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.Этап;
						НовСтрокаТЧЗаказы.ВесБрутто                = ТекСтрокаЗаказ.ВесБрутто;
						НовСтрокаТЧЗаказы.Объем                    = ТекСтрокаЗаказ.Объем;
						НовСтрокаТЧЗаказы.ЕдиницаИзмерения         = ПустаяЕИ;  
						НовСтрокаТЧЗаказы.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
						НовСтрокаТЧЗаказы.Количество               = ТекСтрокаЗаказ.Количество;
						НовСтрокаТЧЗаказы.КоличествоМест           = ТекСтрокаЗаказ.КолМест;
						НовСтрокаТЧЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
						НовСтрокаТЧЗаказы.СтоянкаИзПункта          = ТекСтрокаПункт.СтоянкаИзПункта;
						НовСтрокаТЧЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
						НовСтрокаТЧЗаказы.Время                    = ТекСтрокаПункт.ВремяВПути;
						НовСтрокаТЧЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ВремяПрибытияВПункт;
						НовСтрокаТЧЗаказы.УбытиеПлан               = ТекСтрокаПункт.УбытиеПлан;
						НовСтрокаТЧЗаказы.Пункт                    = ТекСтрокаПункт.Адрес;
						НовСтрокаТЧЗаказы.Ожидание                 = ТекСтрокаПункт.Ожидание;
						НовСтрокаТЧЗаказы.Терминал                 = ТекСтрокаЗаказ.Терминал;
						НовСтрокаТЧЗаказы.ВесТары                  = ТекСтрокаЗаказ.ВесТары;
						НовСтрокаТЧЗаказы.Группа                   = ТекСтрокаЗаказ.Группа;
						НовСтрокаТЧЗаказы.Паллета                  = ТекСтрокаЗаказ.Паллета;
						НовСтрокаТЧЗаказы.Размещение               = ТекСтрокаЗаказ.Размещение;
					КонецЕсли;
				КонецЦикла; 
				
			Иначе
				Если Не ЗначениеЗаполнено(ТекСтрокаПункт.GUID) Или ТекСтрокаПункт.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
					ТекСтрокаПункт.GUID = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				
				НовСтрокаТЧЗаказы = НовДок.Заказы.Добавить();
				НовСтрокаТЧЗаказы.GUIDСтроки       = Новый УникальныйИдентификатор(ТекСтрокаПункт.GUID);
				НовСтрокаТЧЗаказы.Пункт            = ТекСтрокаПункт.Адрес;
				НовСтрокаТЧЗаказы.Ожидание         = ТекСтрокаПункт.Ожидание;
				НовСтрокаТЧЗаказы.Стоянка          = ТекСтрокаПункт.Стоянка;
				НовСтрокаТЧЗаказы.СтоянкаИзПункта  = ТекСтрокаПункт.СтоянкаИзПункта;
				НовСтрокаТЧЗаказы.Расстояние       = ТекСтрокаПункт.Расстояние;
				НовСтрокаТЧЗаказы.Время            = ТекСтрокаПункт.ВремяВПути;
				НовСтрокаТЧЗаказы.ПрибытиеПлан     = ТекСтрокаПункт.ВремяПрибытияВПункт;
				НовСтрокаТЧЗаказы.УбытиеПлан       = ТекСтрокаПункт.УбытиеПлан;
				НовСтрокаТЧЗаказы.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
			КонецЕсли;
		КонецЦикла;    
		
		НовДок.Секции.Очистить();
		Для Каждого СтрокаСекции Из ТекСтрокаТС.Секции Цикл 
			НовСтрокаСекции = НовДок.Секции.Добавить();
			НовСтрокаСекции.GUIDСтроки = СтрокаСекции.GUIDСтроки;
			НовСтрокаСекции.Секция     = СтрокаСекции.Секция;
			НовСтрокаСекции.Объем      = СтрокаСекции.Объем;
		КонецЦикла;
		
		ТекстОшибкиЗаполнения = "";
		
		МЛСсылкаДляЗаписи = МассивМЛДляЗаписи.Получить(НовДок.Ссылка);
		МЛДляЗаписи = МЛСсылкаДляЗаписи <> Неопределено;
		
		НовДок.ШаблонНастроек = ВариантНастройки;
		
		Если МЛДляЗаписи Тогда
			ТекстОшибкиЗаписи = "";
			РежимЗаписиМЛ     = РежимЗаписиДокумента.ОтменаПроведения;
			Попытка
				НовДок.Записать(РежимЗаписиМЛ);
			Исключение
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(МЛСсылкаДляЗаписи.МЛ) Тогда
				МассивМЛДляЗаписи.Вставить(МЛСсылкаДляЗаписи.МЛ,  Новый Структура("МЛ, СтрокаТС", НовДок, ТекСтрокаТС));
			КонецЕсли;
		Иначе
			Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(НовДок);
			Документы.уатМаршрутныйЛист.УстановитьФлагРазрешенаВыгрузкаВWMS(НовДок);
			НовДок.ОбновитьВремяРасстояниеМеждуПунктами();
			НовДок.РассчитатьИтоговыеПоказатели();
			НовДок.АвтоматическийРасчетИтогов();
			
			ЕстьОшибкиЗаполнения = Не НовДок.ПроверитьЗаполнение();
			
			Если ЕстьОшибкиЗаполнения Тогда 
				МассивОшибок = ПолучитьСообщенияПользователю(Истина);
				Для Каждого ТекОшибка Из МассивОшибок Цикл 
					ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьОшибкиЗаполнения Тогда 
				РежимЗаписиМЛ = РежимЗаписиДокумента.Запись;
			Иначе 
				РежимЗаписиМЛ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			ТекстОшибкиЗаписи = "";
			
			Попытка 
				НовДок.ДополнительныеСвойства.Вставить("НастройкаНеРассчитыватьВыработку", НастройкаНеРассчитыватьВыработку);
				НовДок.Записать(РежимЗаписиМЛ);
			Исключение
				ТекстОшибкиЗаписи = ОписаниеОшибки();
				НовДок.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ТекСтрокаТС.ЭтапМаршрутизации) Тогда
			ЭтапМаршрутизации = ТекСтрокаТС.ЭтапМаршрутизации.ПолучитьОбъект();
			
			Для Каждого ТекМетрика Из ЭтапМаршрутизации.Метрики Цикл
				Если ТекМетрика.GUIDТС = ТекСтрокаТС.GUID Тогда
					ТекМетрика.МаршрутныйЛист = НовДок.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				ЭтапМаршрутизации.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Не ТекстОшибкиЗаполнения = "" Или Не ТекстОшибкиЗаписи = "" Тогда 
			РезТекстОшибки = НСтр("en='While creating routing list';ru='При создании маршрутного листа'") + " " 
			+ НСтр("en='errors occured:';ru='возникли ошибки:'") + " "
			+ ТекстОшибкиЗаполнения + ?(Не ТекстОшибкиЗаполнения = "" И Не ТекстОшибкиЗаписи = "","; ","")
			+ ТекстОшибкиЗаписи + Символы.ПС 
			+ НСтр("en='Document recorded without posting.';ru='Документ записан без проведения.'");
			ПараметрыТекстОшибки = Новый Массив();
			ПараметрыТекстОшибки.Добавить(РезТекстОшибки);
			МассивОшибокСозданияМЛ.Добавить(
			Новый Структура(
			"Группа, Критичность, КодОшибки, Объект, Параметры",
			"Маршрутные листы",
			?(ТекстОшибкиЗаписи = "", "Предупреждение", "Ошибка"),
			"Ошибка_32",
			НовДок.Ссылка, ПараметрыТекстОшибки)
			);
		КонецЕсли;
		
		Если ТекСтрокаТС.ПринадлежностьТС <> Перечисления.уатПринадлежностьТС.Собственное
			И флСоздаватьЗаказПеревозчику Тогда 
			
			ДокЗаказПеревозчику = Документы.уатЗаказПеревозчику_уэ.СоздатьДокумент();
			ДокЗаказПеревозчику.Заполнить(НовДок.Ссылка);
			
			Если НачалоДня(ДатаПланирования) < НачалоДня(ТекущаяДата()) Тогда 
				ДокЗаказПеревозчику.Дата = КонецДня(ДатаПланирования);
			ИначеЕсли НачалоДня(ДатаПланирования) > НачалоДня(ТекущаяДата()) Тогда
				ДокЗаказПеревозчику.Дата = НачалоДня(ДатаПланирования);
			Иначе 
				ДокЗаказПеревозчику.Дата = ТекущаяДата();
			КонецЕсли;
			
			Для Каждого ТекЗатрата Из мсвЗатратыПеревозчика Цикл 
				НовСтрЗатрат = ДокЗаказПеревозчику.Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрЗатрат, ТекЗатрата);
			КонецЦикла;
			
			ДокЗаказПеревозчику.РассчитатьИтоговыеПоказатели();
			ДокЗаказПеревозчику.АвтоматическийПересчетРасходов();
			
			Попытка
				ДокЗаказПеревозчику.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ДокЗаказПеревозчику.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЕсли;
		
		Для Каждого ТекСтрокаФлагаЗаписи Из МассивСтрокДляУстановкиФлагаЗаписи Цикл
			ТекСтрокаФлагаЗаписи.МаршрутныйЛистЗаписан = Истина;
		КонецЦикла;
		
		ТекСтрокаТС.МЛ = НовДок.Ссылка;
		ТекСтрокаТС.ПредставлениеМЛ = СтрШаблон(Нстр("ru = '%1 от %2'; en = '%1 from %2'"), НовДок.Номер,
				НовДок.Дата);
		Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
			ТекСтрокаТС.ПредставлениеОбъектаДляКартыOSM = СформироватьПредставлениеДокументаДляКартыМаршруты(
			"уатМаршрутныйЛист",
			Строка(НовДок.Ссылка.УникальныйИдентификатор()),
			НовДок.Номер,
			НовДок.Дата
			);
		КонецЕсли;
		мсвМаршрутныеЛисты.Добавить(НовДок.Ссылка);
		
		ТекСтрокаТС.Модифицированность = Ложь;
	КонецЦикла;
	
	Для Каждого ТекМЛ Из МассивМЛДляЗаписи Цикл
		СтрокаТС = Неопределено;
		Если ТипЗнч(ТекМЛ.Значение.МЛ) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
			НовДок = ТекМЛ.Значение.МЛ;
			
			СтрокаТС = ТекМЛ.Значение.СтрокаТС; 

		Иначе
			НовДок = ТекМЛ.Значение.МЛ.ПолучитьОбъект();
		КонецЕсли;

		Если НовДок.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(НовДок);
		Документы.уатМаршрутныйЛист.УстановитьФлагРазрешенаВыгрузкаВWMS(НовДок);
		НовДок.ОбновитьВремяРасстояниеМеждуПунктами();
		НовДок.РассчитатьИтоговыеПоказатели();
		НовДок.АвтоматическийРасчетИтогов();
		
		ТекстОшибкиЗаполнения = "";
		ЕстьОшибкиЗаполнения  = Не НовДок.ПроверитьЗаполнение();
		
		Если ЕстьОшибкиЗаполнения Тогда 
			МассивОшибок = ПолучитьСообщенияПользователю(Истина);
			Для Каждого ТекОшибка Из МассивОшибок Цикл 
				ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьОшибкиЗаполнения Тогда 
			РежимЗаписиМЛ = РежимЗаписиДокумента.Запись;
		Иначе 
			РежимЗаписиМЛ = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		ТекстОшибкиЗаписи = ""; 
		
		НовДок.ШаблонНастроек = ВариантНастройки;
		Попытка 
			НовДок.ДополнительныеСвойства.Вставить("НастройкаНеРассчитыватьВыработку", НастройкаНеРассчитыватьВыработку);
			НовДок.Записать(РежимЗаписиМЛ);
		Исключение
			ТекстОшибкиЗаписи = ОписаниеОшибки();
			НовДок.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Если СтрокаТС <> Неопределено Тогда
			СтрокаТС.МЛ              = НовДок.Ссылка;
			СтрокаТС.ПредставлениеМЛ = СтрШаблон(Нстр("ru = '%1 от %2'; en = '%1 from %2'"), НовДок.Номер,
			НовДок.Дата);
			Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
				ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
				СтрокаТС.ПредставлениеОбъектаДляКартыOSM = СформироватьПредставлениеДокументаДляКартыМаршруты(
				"уатМаршрутныйЛист",
				Строка(НовДок.Ссылка.УникальныйИдентификатор()),
				НовДок.Номер,
				НовДок.Дата
				);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекстОшибкиЗаполнения = ""
			ИЛИ НЕ ТекстОшибкиЗаписи = "" Тогда 
			РезТекстОшибки = НСтр("en='While creating routing list';ru='При создании маршрутного листа'") + " " 
			+ НСтр("en='errors occured:';ru='возникли ошибки:'") + " "
			+ ТекстОшибкиЗаполнения + ?(Не ТекстОшибкиЗаполнения = "" И Не ТекстОшибкиЗаписи = "","; ","")
			+ ТекстОшибкиЗаписи + Символы.ПС 
			+ НСтр("en='Document recorded without posting.';ru='Документ записан без проведения.'");
			ПараметрыТекстОшибки = Новый Массив();
			ПараметрыТекстОшибки.Добавить(РезТекстОшибки);
			МассивОшибокСозданияМЛ.Добавить(
			Новый Структура(
			"Группа, Критичность, КодОшибки, Объект, Параметры",
			"Маршрутные листы",
			?(ТекстОшибкиЗаписи = "", "Предупреждение", "Ошибка"),
			"Ошибка_32",
			НовДок.Ссылка, ПараметрыТекстОшибки)
			);
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	
КонецПроцедуры

&НаСервере
Процедура АвтоматическоеРаспределениеСервер()
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		АвтоматическоеРаспределениеСерверДерево();
	Иначе
		АвтоматическоеРаспределениеСерверСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоматическоеРаспределениеСерверДерево()
	
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
			Если Не ТекМЛ.СоздатьМаршрутныйЛист Тогда
				Продолжить;
			КонецЕсли;
			
			ТекМЛ.Секции.Очистить();
			
			ЗаказыКРазмещению = Новый Массив();
			
			Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл 
				Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
					Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТекЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда 
						Если Не ЗначениеЗаполнено(ТекЗаказ.GUID) Или ТекЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							ТекЗаказ.GUID = Строка(Новый УникальныйИдентификатор());
						КонецЕсли;
						
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("Заказ", Новый УникальныйИдентификатор(ТекЗаказ.GUID));
						ДанныеЗаказа.Вставить("Груз",  Неопределено);
						ДанныеЗаказа.Вставить("Объем", ТекЗаказ.Объем);
						ЗаказыКРазмещению.Добавить(ДанныеЗаказа);
						
					Иначе 
						Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
							Если Не ЗначениеЗаполнено(ТекГруз.GUID) Или ТекГруз.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								ТекГруз.GUID = Строка(Новый УникальныйИдентификатор());
							КонецЕсли;
							
							ДанныеЗаказа = Новый Структура();
							ДанныеЗаказа.Вставить("Заказ", Новый УникальныйИдентификатор(ТекГруз.GUID));
							ДанныеЗаказа.Вставить("Груз",  ТекГруз.Группировка);
							ДанныеЗаказа.Вставить("Объем", ТекГруз.Объем);
							ЗаказыКРазмещению.Добавить(ДанныеЗаказа);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			мсвТС = Новый Массив();
			мсвТС.Добавить(ТекТС.ТС);
			мсвТС.Добавить(ТекТС.Прицеп1);
			мсвТС.Добавить(ТекТС.Прицеп2);
			
			ЗапросСекции = Новый Запрос();
			ЗапросСекции.УстановитьПараметр("мсвТС", мсвТС);
			
			Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
				ЗапросСекции.УстановитьПараметр("КоэфОбъемаКузова", 1000);
			Иначе 
				ЗапросСекции.УстановитьПараметр("КоэфОбъемаКузова", 1);
			КонецЕсли;
			
			ЗапросСекции.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатСекцииТС.Владелец КАК ТС,
			|	уатСекцииТС.Ссылка КАК Секция,
			|	уатСекцииТС.Объем * &КоэфОбъемаКузова КАК ОбъемСекции
			|ИЗ
			|	Справочник.уатСекцииТС КАК уатСекцииТС
			|ГДЕ
			|	уатСекцииТС.Владелец В(&мсвТС)
			|	И НЕ уатСекцииТС.ПометкаУдаления";
			
			ТекущиеСекции = ЗапросСекции.Выполнить().Выгрузить();
			
			РезультатРаспределения = Обработки.уатАРМЛогиста_уэ.ПолучитьДанныеРазмещенияЗаказовПоСекциям(
				ЗаказыКРазмещению,
				Новый ДеревоЗначений(),
				НастройкаСмешиватьГрузыВСекциях,
				ТекущиеСекции
			);
			
			Если РезультатРаспределения.Размещено Тогда 
				Для Каждого ТекСтрока Из РезультатРаспределения.ТаблицаРазмещения Цикл 
					Для Каждого ТекЗаказ Из ТекСтрока.Заказы Цикл 
						НовСтрока = ТекМЛ.Секции.Добавить();
						НовСтрока.GUIDСтроки = ТекЗаказ.Заказ;
						НовСтрока.Секция     = ТекСтрока.Секция;
						НовСтрока.Объем      = ТекЗаказ.Объем;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АвтоматическоеРаспределениеСерверСписок()
	
	Для Каждого ТекТС Из МаршрутыСписок Цикл  
		Если Не ТекТС.СоздатьМаршрутныйЛист Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекТС.АдресВременногоХранилища, ТекТС.GUID);
		
		ТекТС.Секции.Очистить();
		
		ЗаказыКРазмещению = Новый Массив();
		
		ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
		Для Каждого ТекПункт Из ЭлементыВеткаПункты Цикл
			ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
				ТекТС.GUID, ТекПункт.GUIDПункта, "Заказ"));
			Для Каждого ТекЗаказ Из ЭлементыВеткаЗаказ Цикл 
				Если Не ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
					Продолжить;
				КонецЕсли;
				
				ЭлементыВеткаНоменклатура = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта,
				|GUIDЗаказа, УровеньДерева",
				ТекТС.GUID, ТекПункт.GUIDПункта, ТекЗаказ.GUIDЗаказа, "Номенклатура"));
				Если ЭлементыВеткаНоменклатура.Количество() = 0 Тогда 
					Если Не ЗначениеЗаполнено(ТекЗаказ.GUID) Или ТекЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
						ТекЗаказ.GUID = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;
					
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("Заказ", Новый УникальныйИдентификатор(ТекЗаказ.GUID));
					ДанныеЗаказа.Вставить("Груз",  Неопределено);
					ДанныеЗаказа.Вставить("Объем", ТекЗаказ.Объем);
					ЗаказыКРазмещению.Добавить(ДанныеЗаказа);
					
				Иначе 
					Для Каждого ТекГруз Из ЭлементыВеткаНоменклатура Цикл 
						Если Не ЗначениеЗаполнено(ТекГруз.GUID) Или ТекГруз.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							ТекГруз.GUID = Строка(Новый УникальныйИдентификатор());
						КонецЕсли;
						
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("Заказ", Новый УникальныйИдентификатор(ТекГруз.GUID));
						ДанныеЗаказа.Вставить("Груз",  ТекГруз.Группировка);
						ДанныеЗаказа.Вставить("Объем", ТекГруз.Объем);
						ЗаказыКРазмещению.Добавить(ДанныеЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		мсвТС = Новый Массив();
		мсвТС.Добавить(ТекТС.ТС);
		мсвТС.Добавить(ТекТС.Прицеп1);
		мсвТС.Добавить(ТекТС.Прицеп2);
		
		ЗапросСекции = Новый Запрос();
		ЗапросСекции.УстановитьПараметр("мсвТС", мсвТС);
		
		Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
			ЗапросСекции.УстановитьПараметр("КоэфОбъемаКузова", 1000);
		Иначе 
			ЗапросСекции.УстановитьПараметр("КоэфОбъемаКузова", 1);
		КонецЕсли;
		
		ЗапросСекции.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСекцииТС.Владелец КАК ТС,
		|	уатСекцииТС.Ссылка КАК Секция,
		|	уатСекцииТС.Объем * &КоэфОбъемаКузова КАК ОбъемСекции
		|ИЗ
		|	Справочник.уатСекцииТС КАК уатСекцииТС
		|ГДЕ
		|	уатСекцииТС.Владелец В(&мсвТС)
		|	И НЕ уатСекцииТС.ПометкаУдаления";
		
		ТекущиеСекции = ЗапросСекции.Выполнить().Выгрузить();
		
		РезультатРаспределения = Обработки.уатАРМЛогиста_уэ.ПолучитьДанныеРазмещенияЗаказовПоСекциям(
		ЗаказыКРазмещению,
		Новый ДеревоЗначений(),
		НастройкаСмешиватьГрузыВСекциях,
		ТекущиеСекции
		);
		
		Если РезультатРаспределения.Размещено Тогда 
			Для Каждого ТекСтрока Из РезультатРаспределения.ТаблицаРазмещения Цикл 
				Для Каждого ТекЗаказ Из ТекСтрока.Заказы Цикл 
					НовСтрока = ТекТС.Секции.Добавить();
					НовСтрока.GUIDСтроки = ТекЗаказ.Заказ;
					НовСтрока.Секция     = ТекСтрока.Секция;
					НовСтрока.Объем      = ТекЗаказ.Объем;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьПунктыНазначения(МассивЗаказовДляПерезаписи, мсвМаршрутныеЛисты)
	
	Если ТипЗнч(МассивЗаказовДляПерезаписи) <> Тип("Массив")
		ИЛИ МассивЗаказовДляПерезаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвМаршрутныеЛисты", мсвМаршрутныеЛисты);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	               |ГДЕ
	               |	уатМаршрутныйЛистЗаказы.Ссылка В (&мсвМаршрутныеЛисты)";
	МассивЗаказовДляЗаписи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказГрузоотправителя");
	
	Для Каждого ТекСтрока Из МассивЗаказовДляПерезаписи Цикл
		Если МассивЗаказовДляЗаписи.Найти(ТекСтрока.Заказ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ЗаказОбъект = ТекСтрока.Заказ.ПолучитьОбъект();
			ЗаказОбъект.АдресИзмененВХодеМаршрутизации = Истина;
			ЗаказОбъект.АдресНазначения = ТекСтрока.АдресНазначения;
			
			ЗаказОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПередУдалениемПометкаДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеМЛПриУдаленииИзДерева(ДополнительныеПараметры);
	МаршрутыДеревоПередУдалениемЗавершение(Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЗаказы", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПередУдалениемПометкаДокументаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ТекМЛ = ДополнительныеПараметры.ТекМЛ;
	Если ТекМЛ.ПолучитьРодителя() <> Неопределено Тогда
		ТекМЛ.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекМЛ.ПолучитьРодителя().ПолучитьЭлементы()[0]); 
	КонецЕсли;
	
	ПометитьНаУдалениеМЛПриУдаленииИзДерева(ДополнительныеПараметры.МЛ); 
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЗаказы", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПередУдалениемЗавершение(СписокМаршрутов = Ложь)
	
	СтрокаДляОбновленияХарактеристик = Неопределено;
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МЛ    = Неопределено;
		ТекМЛ = Неопределено;
		Если ТекДанные.УровеньДерева = "Пункт" 
			И ТекДанные.ПолучитьРодителя() <> Неопределено Тогда
			ТекМЛ = ТекДанные.ПолучитьРодителя();
			МЛ    = ТекМЛ.Группировка;
		ИначеЕсли ТекДанные.УровеньДерева = "Заказ"
			И ТекДанные.ПолучитьРодителя() <> Неопределено
			И ТекДанные.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
			ТекМЛ = ТекДанные.ПолучитьРодителя().ПолучитьРодителя();
			МЛ    = ТекМЛ.Группировка;
	    ИначеЕсли ТекДанные.УровеньДерева = "Номенклатура"
			И ТекДанные.ПолучитьРодителя() <> Неопределено
			И ТекДанные.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено
			И ТекДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
			ТекМЛ = ТекДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
			МЛ    = ТекМЛ.Группировка;
		КонецЕсли;

		ТекДанные.Модифицированность    = Истина;
		ТекДанные.СоздатьМаршрутныйЛист = Истина;

		Если ТекДанные.ПолучитьРодителя() <> Неопределено
			И ТекДанные.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда 
			СтрокаДляОбновленияХарактеристик = ТекДанные;
			Пока СтрокаДляОбновленияХарактеристик.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Цикл
				СтрокаДляОбновленияХарактеристик = СтрокаДляОбновленияХарактеристик.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
		УдалитьПозициюИзМаршрута(ТекДанные);
	Иначе
		ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекДанные.Модифицированность    = Истина;
		ТекДанные.СоздатьМаршрутныйЛист = Истина;

		ТекДанныеМЛ = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
		
		СтрокаДляОбновленияХарактеристик = ТекДанные;
		
		УдалитьПозициюИзМаршрута(ТекДанные,,ТекДанныеМЛ, СписокМаршрутов);
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 1 Тогда
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные);
		ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекДанные);
		ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекДанные);
		ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекДанные);
		ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекДанные);
		ОбновитьДанныеТекущегоМаршрута(ТекДанные);
		ПересчитатьНомераПунктовТекущегоМаршрута();
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные, Ложь);
	Иначе
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		Если НЕ СтрокаДляОбновленияХарактеристик = Неопределено Тогда 
			ОбновитьВременныеХарактеристикиМашрута(СтрокаДляОбновленияХарактеристик);
		КонецЕсли;
		МаршрутыДеревоПередУдалениемЗавершениеСервер(ТекДанные.ПолучитьИдентификатор());
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 
		И ЗначениеЗаполнено(МЛ)
		И ТекМЛ.ПолучитьЭлементы().Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("МаршрутыДеревоПередУдалениемПометкаДокументаПродолжение", ЭтотОбъект,
		 Новый Структура("МЛ, ТекМЛ", МЛ, ТекМЛ));
		ТекстВопроса = НСтр("en='Mark document for deletion?';ru='Пометить на удаление документ?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекТС, Обнуление = Истина)
	
	Если Обнуление Тогда
		ЗнакОперации = -1;
	Иначе
		ЗнакОперации = 1;
	КонецЕсли;
	
	ЕстьМЛ = ЗначениеЗаполнено(ТекТС.МЛ) ИЛИ ТекТС.НовыйМЛ;
	
	ИтогоМаршрутыЗаказов    = ИтогоМаршрутыЗаказов + (ЗнакОперации * ТекТС.КоличествоЗаказов);

	ИтогоМаршрутыВес        = ИтогоМаршрутыВес     + (ЗнакОперации * ТекТС.ВесБрутто);
	ИтогоМаршрутыОбъем      = ИтогоМаршрутыОбъем   + (ЗнакОперации * ТекТС.Объем);
	ИтогоМаршрутыКолМест    = ИтогоМаршрутыКолМест + (ЗнакОперации * ТекТС.КолМест);
	ИтогоМаршрутыРасстояние = ИтогоМаршрутыРасстояние + (ЗнакОперации * ТекТС.Расстояние);
	ИтогоМаршрутыВремяВПути = ИтогоМаршрутыВремяВПути + (ЗнакОперации * ТекТС.ВремяВПути);
	
	ИтогоМаршрутыМЛ         = ИтогоМаршрутыМЛ + ?(ЕстьМЛ, (ЗнакОперации * 1), 0);
	
	СводнаяИнформацияЗаказы           = Строка(ИтогоМаршрутыЗаказов);
	СводнаяИнформацияВесМЛ            = Строка(ИтогоМаршрутыВес) + " / " + ИтогоМаршрутыВесВсего;
	СводнаяИнформацияОбьемМЛ          = Строка(ИтогоМаршрутыОбъем) + " / " + ИтогоМаршрутыОбъемВсего;
	СводнаяИнформацияКоличествоМестМЛ = Строка(ИтогоМаршрутыКолМест) + " / " + ИтогоМаршрутыКолМестВсего;
	
	СводнаяИнформацияКоличествоМЛ     = Строка(ИтогоМаршрутыМЛ);
	СводнаяИнформацияРасстояние       = Строка(ИтогоМаршрутыРасстояние);
	СводнаяИнформацияКоличествоТС     = СтрШаблон(НСтр("ru = 'Задействовано ТС: %1 / %2'"),
	ИтогоМаршрутыМЛ, ИтогоМаршрутыВсегоТС);
	СводнаяИнформацияВремяВПути       = Формат(ИтогоМаршрутыВремяВПути, "ЧДЦ=2; ЧРД=:");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТекущегоМаршрута(ТекТС)
	
	ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС", ТекТС.GUID));
	Для Каждого ТекСтрока Из ЭлементыВетка Цикл
		МаршрутыСписокЗаказов.Удалить(ТекСтрока);
	КонецЦИкла;
	
	флЦветУстановлен  = Ложь;
	ФлагНетЗаказов    = Истина;
	ИндексСтроки      = 1;
	МассивДляУдаления = Новый Массив();
	
	СтрокиПунктов       = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы();
	КоличествоПунктов   = СтрокиПунктов.Количество();
	
	ТекТС.ЦветДокумента = 0;
	Для Каждого ТекСтрокаПункт Из СтрокиПунктов Цикл
		МассивДляУдаления.Добавить(ТекСтрокаПункт);
		НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаПункт, ТекСтрокаПункт);
		
		Если ИндексСтроки = 1 Тогда
			ТекТС.ДатаНачала       = ТекСтрокаПункт.ВремяПрибытияВПункт;
			ТекТС.АдресОтправления = ТекСтрокаПункт.Группировка;
		КонецЕсли;
		Если ИндексСтроки = КоличествоПунктов Тогда
			ТекТС.ДатаОкончания   = ТекСтрокаПункт.УбытиеПлан;
			ТекТС.АдресНазначения = ТекСтрокаПункт.Группировка;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
			
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			
			Если НЕ флЦветУстановлен Тогда 
				ТекТС.ЦветДокумента = ТекСтрокаЗаказ.ЦветДокумента;
				флЦветУстановлен    = Истина;
			КонецЕсли;
				
			ФлагНетЗаказов = Ложь;
			
			НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрокаЗаказ);
			Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаНом, ТекСтрокаНом);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
	Если ФлагНетЗаказов Тогда
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Удалить(ТекСтрока);
			ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDПункта", ТекСтрока.GUIDПункта));
			Для Каждого ТекСтрока Из ЭлементыВетка Цикл
				МаршрутыСписокЗаказов.Удалить(ТекСтрока);
			КонецЦИкла;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекТС.МЛ) Тогда
			ПометитьНаУдалениеМЛПриУдаленииИзДерева(ТекТС.МЛ);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЗаказы", 0.5, Истина);
		КонецЕсли;
		
		ТекТС.СоздатьМаршрутныйЛист    = Ложь;
		ТекТС.МЛ                       = Неопределено;
		ТекТС.НовыйМЛ                  = Ложь;
		ТекТС.ЦветДокумента            = 0;
		ТекТС.ВидПеревозки             = Неопределено;
		ТекТС.ОбъектСтроительства      = Неопределено;
		ТекТС.НаправлениеПеревозки     = Неопределено;
		ТекТС.АдресВременногоХранилища = "";
		Если НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда 
			ТекТС.Маршрут	= Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	Оповестить("ОстановитьПроигрываниеТрека",, ЭтотОбъект);
	Если ТекТС.СоздатьМаршрутныйЛист
		ИЛИ (ЗначениеЗаполнено(GUIDМЛПодбора)
			И ТекТС.GUID = GUIDМЛПодбора) Тогда 
		Если ФлагНетЗаказов Тогда 
			ОтобразитьДанныеНаКарте_МЛ_Удалить();
		Иначе
			ОтобразитьДанныеНаКарте_МЛ();
		КонецЕсли;
	КонецЕсли;

	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекТС)
	
	УчетСтоянокПоТипамТС = Ложь;
	
	СоответствиеСтоянок        = Новый Соответствие;
	СоответствиеСтоянокВПункте = Новый Соответствие;
	
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрокаПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
			МассивЗаказов.Добавить(ТекСтрокаЗаказ.Этап);
		КонецЦикла;
	КонецЦикла;
	
	ПолучитьСтоянкиПоЗаказамГрузоотправителей(СоответствиеСтоянок, СоответствиеСтоянокВПункте, МассивЗаказов);

	ТекТС.Стоянка = 0;
	
	Если УчетСтоянокПоТипамТС Тогда
		ТСТипТС = ЗначениеРеквизитаОбъекта(ТекТС.ТС, "ТипТС");
	Иначе
		ТСТипТС = Новый Массив();
	КонецЕсли;
		
	ФлагВнешняяМаршрутизация = Ложь;
	Если (ЗначениеЗаполнено(ТекТС.ЭтапМаршрутизации) И НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс") Тогда
		ФлагВнешняяМаршрутизация = Истина;
	КонецЕсли;
	
	Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		ПунктБезЗаказов = ТекПункт.ПолучитьЭлементы().Количество() = 0;
		
		Если ФлагВнешняяМаршрутизация Тогда
			ТипТС = Новый Массив;
		Иначе
			ТипТС = ТСТипТС;
		КонецЕсли;
		
		Если ТекПункт.СтоянкиНеИспользуются Тогда
			ТекПункт.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
		ИначеЕсли ПунктБезЗаказов Тогда
			СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
			Если СтоянкаВПункте <> Неопределено Тогда
				ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
			Иначе
				СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
				СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
				ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
			КонецЕсли;
		ИначеЕсли НЕ ПунктБезЗаказов Тогда
			СтоянкаВПункте = СоответствиеСтоянокВПункте.Получить(ТекПункт.Адрес);
			Если СтоянкаВПункте <> Неопределено Тогда
				ТекПункт.СтоянкаИзПункта = СтоянкаВПункте;
			Иначе
				СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекПункт.Адрес, ТипТС);
				СоответствиеСтоянокВПункте.Вставить(ТекПункт.Адрес, СтоянкаИзПункта);
				ТекПункт.СтоянкаИзПункта = СтоянкаИзПункта;
			КонецЕсли;
		Иначе
			ТекПункт.СтоянкаИзПункта = 0;
		КонецЕсли;
		
		мСуммаСтоянок = 0;
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
			Если ТекЗаказ.Стоянка = 0 Тогда 
				Если ТекПункт.СтоянкиНеИспользуются Тогда
					ТекЗаказ.Стоянка = 0;
				ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда 
					СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
					Если СтоянкаЭтап <> Неопределено Тогда
						Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
							СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка1;
						Иначе
							СтоянкаПунктОтправления = СтоянкаЭтап.Стоянка2;
						КонецЕсли;
					Иначе
						СтоянкаПунктОтправления = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
						"СтоянкаПунктОтправления");
					КонецЕсли;
					ТекЗаказ.Стоянка = СтоянкаПунктОтправления;
					
				ИначеЕсли ТекЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
					СтоянкаЭтап = СоответствиеСтоянок.Получить(ТекЗаказ.Этап);
					Если СтоянкаЭтап <> Неопределено Тогда
						Если СтоянкаЭтап.Адрес1 = ТекПункт.Адрес Тогда
							СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка1;
						Иначе
							СтоянкаПунктНазначения = СтоянкаЭтап.Стоянка2;
						КонецЕсли;
					Иначе
						СтоянкаПунктНазначения = ЗначениеРеквизитаОбъекта(ТекЗаказ.Этап,
						"СтоянкаПунктНазначения");
					КонецЕсли;
					ТекЗаказ.Стоянка = СтоянкаПунктНазначения;
					
				КонецЕсли;
			КонецЕсли;
			
			ТекЗаказ.СтоянкаИзПункта = ТекПункт.СтоянкаИзПункта;
			мСуммаСтоянок = СложитьВремя(мСуммаСтоянок, ?(ТекПункт.СтоянкиНеИспользуются, 0 ,ТекЗаказ.Стоянка));
		КонецЦикла;
		
		ТекПункт.Стоянка = СложитьВремя(мСуммаСтоянок, ТекПункт.СтоянкаИзПункта);
		
		ТекТС.Стоянка = СложитьВремя(ТекТС.Стоянка, ТекПункт.Стоянка);
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекТС, ПроверкаНастройки = Истина, БезОбновления = Ложь)
	
	Если БезОбновления
		ИЛИ (НЕ НастройкаАвтоматическийПересчетВремениИРасстояния 
		И ПроверкаНастройки) Тогда
		
		ВсегоВремяМЛ = 0;
		ВсегоРасстМЛ = 0;
		Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
			ВсегоВремяМЛ = СложитьВремя(ВсегоВремяМЛ, ТекПункт.ВремяВПути);
			ВсегоРасстМЛ = ВсегоРасстМЛ + ТекПункт.Расстояние;
		КонецЦикла;
		ТекТС.ВремяВПути = ВсегоВремяМЛ;
		ТекТС.Расстояние = ВсегоРасстМЛ;
		
		Возврат;
	КонецЕсли;

	МассивПунктов = Новый Массив();
	
	СтрокиПунктов = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы();
	
	КоличествоПунктов = СтрокиПунктов.Количество();
	Если КоличествоПунктов >= 2 Тогда
		Для ИндексПункта = 0 По КоличествоПунктов - 2 Цикл
			Пункт1 = СтрокиПунктов[ИндексПункта];
			ИдентификаторСтрокиПункта = Пункт1.ПолучитьИдентификатор();
			Пункт1 = Пункт1.Адрес;
			Лат1   = СтрокиПунктов[ИндексПункта].Лат;
			Лон1   = СтрокиПунктов[ИндексПункта].Лон;
			Пункт2 = СтрокиПунктов[ИндексПункта + 1].Адрес;
			Лат2   = СтрокиПунктов[ИндексПункта + 1].Лат;
			Лон2   = СтрокиПунктов[ИндексПункта + 1].Лон;
			
			Если СтрокиПунктов[ИндексПункта].ПолучитьЭлементы().Количество()
				И ЗначениеРеквизитаОбъекта(СтрокиПунктов[ИндексПункта].ПолучитьЭлементы()[0].Этап, "FTL") Тогда 
				мЗаказ = СтрокиПунктов[ИндексПункта].ПолучитьЭлементы()[0].Этап;
			Иначе 
				мЗаказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
			КонецЕсли;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Пункт1", Пункт1);
			СтруктураДанных.Вставить("Пункт2", Пункт2);
			СтруктураДанных.Вставить("Лат1", Лат1);
			СтруктураДанных.Вставить("Лон1", Лон1);
			СтруктураДанных.Вставить("Лат2", Лат2);
			СтруктураДанных.Вставить("Лон2", Лон2);
			СтруктураДанных.Вставить("ИдентификаторСтрокиПункта", ИдентификаторСтрокиПункта);
			СтруктураДанных.Вставить("ВремяВыезда", '00010101' + (СтрокиПунктов[ИндексПункта].ВремяПрибытияВПункт - НачалоДня(СтрокиПунктов[ИндексПункта].ВремяПрибытияВПункт)));
			СтруктураДанных.Вставить("Заказ", мЗаказ);
			
			МассивПунктов.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивПунктов.Количество() Тогда
		мсвПунктыДляЗапроса = Новый Массив();
		мсвПунктыПоКэшу     = Новый Массив();
		
		ТекстНСТР = НСтр("en='Receiving of destinations by routing lists';ru='Получение пунктов назначения по маршрутным листам'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		Для Каждого ТекПараПунктов Из МассивПунктов Цикл 
			НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2,ТекПараПунктов.Заказ));
			Если НайдСтроки.Количество() Тогда 
				стрДанныеПункта = Новый Структура();
				стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
				стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
				стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
				стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
				стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
				мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
			Иначе 
				НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2,Заказ",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1,ТекПараПунктов.Заказ));
				Если НайдСтроки.Количество() Тогда 
					стрДанныеПункта = Новый Структура();
					стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
					стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
					стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
					стрДанныеПункта.Вставить("Заказ",                     НайдСтроки[0].Заказ);
					стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
					мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
				Иначе 
					НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт1,ТекПараПунктов.Пункт2));
					Если НайдСтроки.Количество() Тогда 
						стрДанныеПункта = Новый Структура();
						стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
						стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
						стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
						стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
						стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
						мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
					Иначе 
						НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2",ТекПараПунктов.Пункт2,ТекПараПунктов.Пункт1));
						Если НайдСтроки.Количество() Тогда 
							стрДанныеПункта = Новый Структура();
							стрДанныеПункта.Вставить("ИдентификаторСтрокиПункта", ТекПараПунктов.ИдентификаторСтрокиПункта);
							стрДанныеПункта.Вставить("Время",                     НайдСтроки[0].Время);
							стрДанныеПункта.Вставить("Расстояние",                НайдСтроки[0].Расстояние);
							стрДанныеПункта.Вставить("Заказ",                     ТекПараПунктов.Заказ);
							стрДанныеПункта.Вставить("РучнойВвод",                НайдСтроки[0].РучнойВвод);
							мсвПунктыПоКэшу.Добавить(стрДанныеПункта);
						Иначе 
							мсвПунктыДляЗапроса.Добавить(ТекПараПунктов);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекстНСТР = НСтр("en='Receiving time and distance between points in routing lists';ru='Получение времени и расстояния между пунктами в маршрутных листах'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		Если мсвПунктыДляЗапроса.Количество() Тогда 
			ПолучитьТаблицуРасстоянийМеждуПунктамиСписок(мсвПунктыДляЗапроса, МаршрутыСписокЗаказов);
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='Filling of time and distance between points in routing lists';ru='Заполнение времени и расстояния между пунктами в маршрутных листах'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыПоКэшу Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			Если ТекИндекс.РучнойВвод Тогда 
				ВыбраннаяСтрока.ВремяВПути = ТекИндекс.Время;
			Иначе 
				ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
					ТекИндекс.Расстояние, 
					ТекИндекс.Время, 
					ВыбраннаяСтрока.ВремяПрибытияВПункт,
					кэшСредняяСкоростьДвижения
				);
			КонецЕсли;
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
		КонецЦикла;
		
		ПредИндекс = Неопределено;
		Для Каждого ТекИндекс Из мсвПунктыДляЗапроса Цикл
			Если ТекИндекс.ИдентификаторСтрокиПункта = ПредИндекс Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяСтрока = МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(ТекИндекс.ИдентификаторСтрокиПункта);
			ВыбраннаяСтрока.Расстояние = ТекИндекс.Расстояние;
			
			ВыбраннаяСтрока.ВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
				ТекИндекс.Расстояние, 
				ТекИндекс.Время, 
				ВыбраннаяСтрока.ВремяПрибытияВПункт,
				кэшСредняяСкоростьДвижения
			);
			
			ПредИндекс = ТекИндекс.ИдентификаторСтрокиПункта;
			
			НовСтрЗаписиВКэш = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрЗаписиВКэш.Пункт1     = ТекИндекс.Пункт1;
			НовСтрЗаписиВКэш.Пункт2     = ТекИндекс.Пункт2;
			НовСтрЗаписиВКэш.Время      = ТекИндекс.Время;
			НовСтрЗаписиВКэш.Расстояние = ТекИндекс.Расстояние;
			НовСтрЗаписиВКэш.Заказ      = ТекИндекс.Заказ;
		КонецЦикла;
	КонецЕсли;
	
	ВсегоВремяМЛ = 0;
	ВсегоРасстМЛ = 0;
	Для Каждого ТекПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
		ВсегоВремяМЛ = СложитьВремя(ВсегоВремяМЛ, ТекПункт.ВремяВПути);
		ВсегоРасстМЛ = ВсегоРасстМЛ + ТекПункт.Расстояние;
	КонецЦикла;
	ТекТС.ВремяВПути = ВсегоВремяМЛ;
	ТекТС.Расстояние = ВсегоРасстМЛ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ВеткаТС)
	
	НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ		 = НастройкаМаксимальноеЧислоЗаказовМаршрута;
	НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ = НастройкаМаксимальнаяПродолжительностьМаршрута;
	НастройкаМаксимальноеРасстояниеМаршрутаМЛ		 = НастройкаМаксимальноеРасстояниеМаршрута;
	
	// Итоги по ТС
	мВесПоТС        = 0;
	мОбъемПоТС      = 0;
	мМестПоТС       = 0;
	мКолЗаказовПоТС = 0;
	
	ПунктовПогрузкиПоТС  = 0;
	ПунктовРазгрузкиПоТС = 0;
		
	мВесПоМЛ             = 0;
	мОбъемПоМЛ           = 0;
	мМестПоМЛ            = 0;
	мКолЗаказовПоМЛ      = 0;
	ПунктовПогрузкиПоМЛ  = 0;
	ПунктовРазгрузкиПоМЛ = 0;
	
	мВесПоПункту        = 0;
	мОбъемПоПункту      = 0;
	мМестПоПункту       = 0;
	мКолЗаказовПоПункту = 0;
	Для Каждого ТекСтрокаПункт Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
		
		флПогрузки  = Ложь;
		флРазгрузки = Ложь;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл 
			мВесПоЗаказу   = 0;
			мОбъемПоЗаказу = 0;
			мМестПоЗаказу  = 0;
			
			Для Каждого ТекСтрокаГруз Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл 
				мВесПоЗаказу   = мВесПоЗаказу + ТекСтрокаГруз.ВесБрутто;
				мОбъемПоЗаказу = мОбъемПоЗаказу + ТекСтрокаГруз.Объем;
				мМестПоЗаказу  = мМестПоЗаказу + ТекСтрокаГруз.КолМест;
			КонецЦикла;
			Если Не мВесПоЗаказу = 0 Тогда 
				ТекСтрокаЗаказ.ВесБрутто = мВесПоЗаказу;
			КонецЕсли;
			Если Не мОбъемПоЗаказу = 0 Тогда 
				ТекСтрокаЗаказ.Объем = мОбъемПоЗаказу;
			КонецЕсли;
			Если Не мМестПоЗаказу = 0 Тогда 
				ТекСтрокаЗаказ.КолМест = мМестПоЗаказу;
			КонецЕсли;
			
			Если ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
				мВесПоПункту        = мВесПоПункту + ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоПункту      = мОбъемПоПункту + ТекСтрокаЗаказ.Объем;
				мМестПоПункту       = мМестПоПункту + ТекСтрокаЗаказ.КолМест;
				мКолЗаказовПоПункту = мКолЗаказовПоПункту + 1;
				
				мВесПоМЛ        = мВесПоМЛ + ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоМЛ      = мОбъемПоМЛ + ТекСтрокаЗаказ.Объем;
				мМестПоМЛ       = мМестПоМЛ + ТекСтрокаЗаказ.КолМест;
				мКолЗаказовПоМЛ = мКолЗаказовПоМЛ + 1;
				
				флПогрузки      = Истина;
			ИначеЕсли ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
				мВесПоПункту        = мВесПоПункту - ТекСтрокаЗаказ.ВесБрутто;
				мОбъемПоПункту      = мОбъемПоПункту - ТекСтрокаЗаказ.Объем;
				мМестПоПункту       = мМестПоПункту - ТекСтрокаЗаказ.КолМест;
				мКолЗаказовПоПункту = мКолЗаказовПоПункту - 1;
				
				флРазгрузки         = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если флПогрузки Тогда
			ТекСтрокаПункт.Погрузка = 1;
			ПунктовПогрузкиПоМЛ     = ПунктовПогрузкиПоМЛ + 1;
		КонецЕсли;
		
		Если флРазгрузки Тогда
			ТекСтрокаПункт.Разгрузка = 1;
			ПунктовРазгрузкиПоМЛ     = ПунктовРазгрузкиПоМЛ + 1;
		КонецЕсли;
		
		ТекСтрокаПункт.ВесБрутто         = мВесПоПункту;
		ТекСтрокаПункт.Объем             = мОбъемПоПункту;
		ТекСтрокаПункт.КоличествоЗаказов = мКолЗаказовПоПункту;
		ТекСтрокаПункт.КолМест           = мМестПоПункту;
		
		ТекСтрокаПункт.ПогрузкаРазгрузкаПредставление = Строка(ТекСтрокаПункт.Погрузка) + " / " + Строка(ТекСтрокаПункт.Разгрузка);
		
		ТекСтрокаПункт.ПроцентЗагрузкиВес     = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ТекСтрокаПункт.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентЗагрузкиОбъем   = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ТекСтрокаПункт.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентКоличЗаказов    = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентПротяженность   = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентВремяВРаботе    = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ТекСтрокаПункт.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
		ТекСтрокаПункт.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ТекСтрокаПункт.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
	КонецЦикла;
	
	ВеткаТС.ВесБрутто         = мВесПоМЛ;
	ВеткаТС.Объем             = мОбъемПоМЛ;
	ВеткаТС.КоличествоЗаказов = мКолЗаказовПоМЛ;
	ВеткаТС.КолМест           = мМестПоМЛ;
	
	ВеткаТС.Погрузка          = ПунктовПогрузкиПоМЛ;
	ВеткаТС.Разгрузка         = ПунктовРазгрузкиПоМЛ;
	
	ВеткаТС.ПроцентЗагрузкиВес   = ?(ВеткаТС.Грузоподъемность=0, 0, Окр((ВеткаТС.ВесБрутто/ВеткаТС.Грузоподъемность)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентЗагрузкиОбъем = ?(ВеткаТС.ОбъемКузова=0, 0, Окр((ВеткаТС.Объем/ВеткаТС.ОбъемКузова)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентПротяженность = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ=0, 0, Окр((ВеткаТС.Расстояние/НастройкаМаксимальноеРасстояниеМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ПроцентВремяВРаботе  = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ=0, 0, Окр((ВеткаТС.ВремяВПути/НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	
	ВеткаТС.ПроцентКоличЗаказов  = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ=0, 0, Окр((ВеткаТС.КоличествоЗаказов/НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ)*100, 0, РежимОкругления.Окр15как20));
	
	ВеткаТС.ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок=0, 0, Окр((ВеткаТС.КолМест/ВеткаТС.МаксимальноеКоличествоУпаковок)*100, 0, РежимОкругления.Окр15как20));
	ВеткаТС.ВесПредставление       = Строка(ВеткаТС.ВесБрутто) + " / " + Строка(ВеткаТС.Грузоподъемность);
	ВеткаТС.ОбъемПредставление     = Строка(ВеткаТС.Объем) + " / " + Строка(ВеткаТС.ОбъемКузова);
	ВеткаТС.ПогрузкаРазгрузкаПредставление  = Строка(ВеткаТС.Погрузка) + " / " + Строка(ВеткаТС.Разгрузка);
	ВеткаТС.КоличЗаказовПредставление       = Строка(ВеткаТС.КоличествоЗаказов) + " / " + Строка(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ);
	ВеткаТС.КоличествоУпаковокПредставление = Строка(ВеткаТС.КолМест) + " / " + Строка(ВеткаТС.МаксимальноеКоличествоУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаршрутныеПараметрыТекущегоМаршрута(НеПересчитыватьПлановыеДаты, ВеткаТС)

	ПредВремяОтпр = 0;
	ПредПунктСтрока = Неопределено;
	
	флЦветУстановлен = Ложь;
	
	СписокПунктов = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы();
	
	Для Каждого ТекСтрокаПункт Из СписокПунктов Цикл
		
		мВремяСтоянки = ТекСтрокаПункт.Стоянка;
		
		Если ТекСтрокаПункт = МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] Тогда
			ПредВремяОтпр   = СложитьВремя(ТекСтрокаПункт.ВремяПрибытияВПункт, мВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
			
		Иначе 
			ТекПрибытиеПлан = СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.ВремяВПути);
			
			Если НеПересчитыватьПлановыеДаты И ВеткаТС.ПересчетВремени = 1 Тогда 
				РазницаВремени = ТекСтрокаПункт.ВремяПрибытияВПункт - ТекПрибытиеПлан;
				РазницаЧас = Цел(РазницаВремени/3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин/100;
				
				ТекСтрокаПункт.Ожидание = РазницаВремени;
			КонецЕсли;
			
			ТекПрибытиеПлан = СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
			ПредВремяОтпр   = СложитьВремя(ТекПрибытиеПлан, мВремяСтоянки);
			
			ТекСтрокаПункт.ВремяПрибытияВПункт = ТекПрибытиеПлан;
			ТекСтрокаПункт.УбытиеПлан = ПредВремяОтпр;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МаршрутыДеревоПередУдалениемЗавершениеСервер(ИдентификаторСтроки)
	
	ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута(Истина, ИдентификаторСтроки);
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Истина, Истина, ИдентификаторСтроки);
	ОтобразитьИтоговыеДанныеПоМаршрутам();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекВремяСтроки = Неопределено;
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда //ТС
		Если Не НоваяСтрока Тогда
			ТекВремяСтроки = Новый Структура;
			ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекСтрока.ВремяПрибытияВПункт);
			ТекВремяСтроки.Вставить("УбытиеПлан",   ТекСтрока.УбытиеПлан);
			ТекВремяСтроки.Вставить("ВремяВПути",   ТекСтрока.ВремяВПути);
			ТекВремяСтроки.Вставить("Ожидание",     ТекСтрока.Ожидание);
		КонецЕсли;
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //заказ
		Если Не НоваяСтрока Тогда
			ТекВремяСтроки = Новый Структура;
			ТекВремяСтроки.Вставить("Стоянка", ТекСтрока.Стоянка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты       = "МаршрутыСписокЗаказовДерево";
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписок";
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Число") Тогда
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
			И ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
			Возврат;
		КонецЕсли;

		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Маршрутизация()
	
	ЕстьКритическиеОшибки = Ложь;
	ЕстьПредупреждения    = Ложь;
	МассивОшибок          = Новый Массив();
	
	Если Не НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
		И Не НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" Тогда
		OSM_НастройкаМаршрутизации  = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПостроениеМаршрутов_Сервер");

		Если OSM_НастройкаМаршрутизации = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.ПустаяСсылка") Тогда 
			ТекстСообщения = НСтр("en='Mapping is disabled. Routing impossible.';ru='Использование картографии отключено. Маршрутизация невозможна.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	тблТСДляМаршрутизации = ПодготовитьТаблицуТСДляМаршрутизации(ЗаказыДляМаршрутизации);
	ВыполнитьПроверкуПриНачалеМаршрутизации(ЕстьКритическиеОшибки, ЕстьПредупреждения, МассивОшибок, тблТСДляМаршрутизации);
	
	Если ЕстьКритическиеОшибки Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибок);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='While routing errors occur:';ru='При маршрутизации возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Ошибка");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект);
		Возврат;
		
	ИначеЕсли ЕстьПредупреждения Тогда
		ОписаниеОпопвещенияПодолжитьМаршрутизацию = Новый ОписаниеОповещения("Подключаемый_МаршрутизацияПослеПодтверждения", ЭтотОбъект, тблТСДляМаршрутизации);
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибок);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='In preparation for routing errors occured:';ru='При подготовке к маршрутизации возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Предупреждение");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОпопвещенияПодолжитьМаршрутизацию);
		
	Иначе 
		Подключаемый_МаршрутизацияПослеПодтверждения("Продолжить", тблТСДляМаршрутизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МаршрутизацияПослеПодтверждения(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = "Продолжить" Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаСохранятьЭтапыМаршрутизации Тогда
		// Очищаем список МЛ полученных в результате предыдущей маршрутизации
		СписокМЛТекущийЭтапМаршрутизации.Очистить();
		
		СтруктураПолейЭтапаМаршрутизации = Новый Структура("Ссылка,НаименованиеЭтапа, ДатаМаршрутизацииЭтапа, РодительЭтапа, ПодобраноТС,
		|КоличествоЗаказовВыделено, КоличествоЗаказовВсего, ВесЗаказовВыделено, ВесЗаказовВсего, ОбъемЗаказовВыделено, ОбъемЗаказовВсего,
		|КоличествоМестЗаказовВыделено,ЗадействованоТСВыделено,ЗадействованоТСВсего,МаршрутныхЛистовВыделено,ЗаказовВыделено,ВесВыделено,
		|ВесВсего,ОбъемВыделено,КоличествоМестВыделено,ВремяВПути,ВремяСтоянок,ВремяВсего,РасстояниеВсего, КоличествоПунктовПогрузки,
		|КоличествоПунктовРазгрузки, ВремяОжидания, IDзадачиВнешнийМаршрутизатор, СтрокаРезультат");
		СтруктураПолейЭтапаМаршрутизации.ДатаМаршрутизацииЭтапа	 = ТекущаяДата();
		СтруктураПолейЭтапаМаршрутизации.НаименованиеЭтапа		 = ТекущаяДата();
		СтруктураПолейЭтапаМаршрутизации.РодительЭтапа			 = ПредопределенноеЗначение("Справочник.уатЭтапыМаршрутизации.ПустаяСсылка");
		
		Если НастройкаУказыватьНаименованиеЭтапаВручную Тогда
			ПараметрыОткрытияФормы = Новый Структура();
			ПараметрыОткрытияФормы.Вставить("Маршрутизация", Истина);
			Оповещение = Новый ОписаниеОповещения("МаршрутизацияСохранятьЭтап", ЭтотОбъект, ДопПараметры);
		
			ОткрытьФорму("Справочник.уатЭтапыМаршрутизации.Форма.ФормаЭлемента",ПараметрыОткрытияФормы, ЭтотОбъект,,,,Оповещение);
		Иначе
			МаршрутизацияСохранятьЭтап(,ДопПараметры);
		КонецЕсли;
	Иначе
		МаршрутизацияПродолжение(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияПродолжение(ДополнительныеПараметры)
	
	// Регистрации статистики
	ИмяКлючевойОперации = "уатОперации.Маршрутизация." + НаименованиеАлгоритма();
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	МассивОшибок          = Новый Массив();
	ОшибкаМаршрутизации   = Ложь;
	тблТСДляМаршрутизации = ДополнительныеПараметры;
	
	Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" Тогда
		
		ВнешняяМаршрутизация(тблТСДляМаршрутизации);
		
	ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
		МаршрутизацияПоФиксированнымМаршрутам(тблТСДляМаршрутизации);
	Иначе
		МаршрутизацияКомпонентаРарус(МассивОшибок, ОшибкаМаршрутизации, тблТСДляМаршрутизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормированиеТаблицыПодходящихЗаказов()
	
	ЗаказыДляМаршрутизации = Новый Массив;
	
	мсвВыбранныеЗаказы = Новый Массив();
	Для Каждого ТекСтрокаЗаказ Из кэшСписокОтмеченныхЗаказов Цикл
		мсвВыбранныеЗаказы.Добавить(ТекСтрокаЗаказ.Ссылка);
	КонецЦикла;
	
	ДанныеПоМаршрутам = Обработки.уатАРМЛогиста_уэ.ПолучитьМаршрутыПоЗаказам(мсвВыбранныеЗаказы);
	ТаблМаршрутов = ДанныеПоМаршрутам.МаршрутыПоЗаказам;
	
	Для Каждого ТекСтрокаЗаказ Из кэшСписокОтмеченныхЗаказов Цикл
		
		Если ТаблМаршрутов.Найти(ТекСтрокаЗаказ.Ссылка, "Заказ") = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаЗаказ.Груз) Тогда 
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("Заказ",      ТекСтрокаЗаказ.Ссылка);
			ДанныеГруза.Вставить("Груз",       Неопределено);
			ДанныеГруза.Вставить("Количество", ТекСтрокаЗаказ.Количество);
			ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
			
		Иначе 
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("Заказ",      ТекСтрокаЗаказ.Ссылка);
			ДанныеГруза.Вставить("Груз",       ТекСтрокаЗаказ.Груз);
			ДанныеГруза.Вставить("Количество", ТекСтрокаЗаказ.Количество);
			ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление грузов из уже существующих заказов при использовании допланирования
	// {pugili 05.11.2020}
	Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
		И (НастройкаРежимДопланирования
		Или НастройкаНесколькоМаршрутныхЛистовНаТС) Тогда
		// {/pugili 05.11.2020}
		
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл
					// Допланирование с помощью алгоритма распределения по фиксированным маршрутам возможно
					// только для Маршрутных листов с заполненными маршрутами, для которых установлен флаг 
					// "Использовать для планирования в АРМ Логиста".
					Если Не ЗначениеЗаполнено(ТекМЛ.Маршрут) Тогда
						Продолжить;
					Иначе
						РеквизитыМаршрута = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекМЛ.Маршрут,
							"ИспользоватьДляПланированияВАРМЛогиста, ПометкаУдаления, Статус");
						Если Не РеквизитыМаршрута.ИспользоватьДляПланированияВАРМЛогиста
							Или РеквизитыМаршрута.ПометкаУдаления
							Или РеквизитыМаршрута.Статус <> Перечисления.уатСтатусыДействия.Действует Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					// {pugili 05.11.2020}
					Если ТекМЛ.МаршрутныйЛистОтправлен И Не НастройкаНесколькоМаршрутныхЛистовНаТС Тогда
						// {/pugili 05.11.2020}
						Продолжить;
					КонецЕсли;
					
					// {pugili 17.11.2020}
					// Запрещено модифицировать Маршрутные листы, у которых день отправления меньше рабочей даты,
					// для того, чтобы многодневные Маршрутные листы, отправляемые вчера, не получали новые заказы при допланировании.
					Если ТекМЛ.Маршрут.Этапы.Количество() > 0 Тогда
						ПунктПогрузки = ТекМЛ.Маршрут.Этапы[0].ПунктОтправления;
						ПогрузкаСегодня = Ложь;
						Для Каждого ТекСтрокаМЛ Из ТекМЛ.ПолучитьЭлементы() Цикл
							Если ТекСтрокаМЛ.Группировка = ПунктПогрузки Тогда
								СекундВДне = 86400;
								ПогрузкаСегодня = (Не ТекМЛ.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) = ДатаПланирования)
									Или (ТекМЛ.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) + СекундВДне = ДатаПланирования);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ПогрузкаСегодня Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					// {/pugili 17.11.2020}
					
					Если Не ЗначениеЗаполнено(ТекМЛ.GUID) Тогда
						ТекМЛ.GUID = Новый УникальныйИдентификатор;
					КонецЕсли;
					
					Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл
						Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
							Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
								ДанныеГруза = Новый Структура();
								ДанныеГруза.Вставить("Заказ",      ТекЗаказ.Этап);
								ДанныеГруза.Вставить("Груз",       Неопределено);
								ДанныеГруза.Вставить("Количество", 1);
								ДанныеГруза.Вставить("МаршрутныйЛистСоздан", Истина);
								ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекМЛ.GUID);
								ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
							Иначе
								Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл
									ДанныеГруза = Новый Структура();
									ДанныеГруза.Вставить("Заказ",      ТекЗаказ.Этап);
									ДанныеГруза.Вставить("Груз",       ТекГруз.Группировка);
									ДанныеГруза.Вставить("Количество", ТекГруз.Количество);
									ДанныеГруза.Вставить("МаршрутныйЛистСоздан", Истина);
									ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекМЛ.GUID);
									ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
	Иначе
		Для Каждого ТекМЛ Из МаршрутыСписок Цикл
			Если ЗначениеЗаполнено(ТекМЛ.МЛ)
				ИЛИ ТекМЛ.НовыйМЛ Тогда
				// Допланирование с помощью алгоритма распределения по фиксированным маршрутам возможно
				// только для Маршрутных листов с заполненными маршрутами, для которых установлен флаг 
				// "Использовать для планирования в АРМ Логиста".
				Если Не ЗначениеЗаполнено(ТекМЛ.Маршрут) Тогда
					Продолжить;
				Иначе
					РеквизитыМаршрута = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекМЛ.Маршрут,
					"ИспользоватьДляПланированияВАРМЛогиста, ПометкаУдаления, Статус");
					Если Не РеквизитыМаршрута.ИспользоватьДляПланированияВАРМЛогиста
						Или РеквизитыМаршрута.ПометкаУдаления
						Или РеквизитыМаршрута.Статус <> Перечисления.уатСтатусыДействия.Действует Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// {pugili 05.11.2020}
				Если ТекМЛ.МаршрутныйЛистОтправлен И Не НастройкаНесколькоМаршрутныхЛистовНаТС Тогда
					// {/pugili 05.11.2020}
					Продолжить;
				КонецЕсли;
				
				// {pugili 17.11.2020}
				// Запрещено модифицировать Маршрутные листы, у которых день отправления меньше рабочей даты,
				// для того, чтобы многодневные Маршрутные листы, отправляемые вчера, не получали новые заказы при допланировании.
				ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекМЛ.АдресВременногоХранилища, ТекМЛ.GUID);
				
				ЭлементыВеткаПункт = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекМЛ.GUID, "Пункт"));
				Если ТекМЛ.Маршрут.Этапы.Количество() > 0 Тогда
					ПунктПогрузки = ТекМЛ.Маршрут.Этапы[0].ПунктОтправления;
					ПогрузкаСегодня = Ложь;
					Для Каждого ТекСтрокаМЛ Из ЭлементыВеткаПункт Цикл
						Если ТекСтрокаМЛ.Группировка = ПунктПогрузки Тогда
							СекундВДне = 86400;
							ПогрузкаСегодня = (Не ТекМЛ.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) = ДатаПланирования)
								Или (ТекМЛ.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) + СекундВДне = ДатаПланирования);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ПогрузкаСегодня Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				// {/pugili 17.11.2020}
				
				Если Не ЗначениеЗаполнено(ТекМЛ.GUID) Тогда
					ТекМЛ.GUID = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				Для Каждого ТекПункт Из ЭлементыВеткаПункт Цикл
					ЭлементыВеткаПункт = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева", ТекМЛ.GUID, ТекПункт.GUIDПункта, "Заказ"));
					Для Каждого ТекЗаказ Из ЭлементыВеткаПункт Цикл
						Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
							ДанныеГруза = Новый Структура();
							ДанныеГруза.Вставить("Заказ",      ТекЗаказ.Этап);
							ДанныеГруза.Вставить("Груз",       Неопределено);
							ДанныеГруза.Вставить("Количество", 1);
							ДанныеГруза.Вставить("МаршрутныйЛистСоздан", Истина);
							ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекМЛ.GUID);
							ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
						Иначе
							ЭлементыВеткаНом = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, GUIDЗаказа, УровеньДерева",
								ТекМЛ.GUID, ТекПункт.GUIDПункта, ТекЗаказ.GUIDЗаказа, "Номенклатура"));
							Для Каждого ТекГруз Из ЭлементыВеткаНом Цикл
								ДанныеГруза = Новый Структура();
								ДанныеГруза.Вставить("Заказ",      ТекЗаказ.Этап);
								ДанныеГруза.Вставить("Груз",       ТекГруз.Группировка);
								ДанныеГруза.Вставить("Количество", ТекГруз.Количество);
								ДанныеГруза.Вставить("МаршрутныйЛистСоздан", Истина);
								ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекМЛ.GUID);
								ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаказыДляМаршрутизации;
	
КонецФункции 

&НаКлиенте
Процедура МаршрутизацияПоФиксированнымМаршрутам(ТСДляМаршрутизации)
	
	ЗаказыДляМаршрутизации   = ФормированиеТаблицыПодходящихЗаказов();
	ВремяНачалаМаршрутизации = ТекущаяДата();
	
	Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
		ПараметрыВыполненияФЗ = Новый Массив();
		ПараметрыВыполненияФЗ.Добавить(ЗаказыДляМаршрутизации);
		ПараметрыВыполненияФЗ.Добавить(ТСДляМаршрутизации);
		ПараметрыВыполненияФЗ.Добавить(РаспределениеПоМаршрутамУчитыватьКоличество);
		ПараметрыВыполненияФЗ.Добавить(РаспределениеПоМаршрутамУчитыватьОбъем);
		ПараметрыВыполненияФЗ.Добавить(РаспределениеПоМаршрутамУчитыватьГрузоподьемность);
		ПараметрыВыполненияФЗ.Добавить(НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему);
		ПараметрыВыполненияФЗ.Добавить(НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу);
		ПараметрыВыполненияФЗ.Добавить(НастройкаНесколькоМаршрутныхЛистовНаТС);
		
		ИмяМетодаФЗ = "уатОбщегоНазначения_уэ.ВыполнитьРаспределениеЗаказовПоМаршрутам";
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения(
			"Подключаемый_РаспределениеЗаказовПоМаршрутам_ПослеРаспределения", 
			ЭтотОбъект
		);
		
		ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
		Если ЗаданиеВыполнено Тогда
			Подключаемый_РаспределениеЗаказовПоМаршрутам_ПослеРаспределения(Неопределено, Неопределено);
			Возврат;
		КонецЕсли;
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация",
			Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
	Иначе 
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		уатОбщегоНазначения_уэ.ВыполнитьРаспределениеЗаказовПоМаршрутам(АдресХранилищаДО,
			ЗаказыДляМаршрутизации, ТСДляМаршрутизации,
			РаспределениеПоМаршрутамУчитыватьКоличество, 
			РаспределениеПоМаршрутамУчитыватьОбъем,
			РаспределениеПоМаршрутамУчитыватьГрузоподьемность,
			НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему, 
			НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу,
			НастройкаНесколькоМаршрутныхЛистовНаТС
		);
		Подключаемый_РаспределениеЗаказовПоМаршрутам_ПослеРаспределения(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РаспределениеЗаказовПоМаршрутам_ПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	МассивОшибок = Новый Массив();
	
	РаспредЗаказов = ПолучитьРаспределениеЗаказовРарусИзВременногоХранилища(МассивОшибок);
	
	КоличествоМодифицированныхМаршрутныхЛистов = РаспредЗаказов.Количество();
	Для Каждого СтрокаРаспределения Из РаспредЗаказов Цикл
		Если СтрокаРаспределения.Свойство("Модифицированность") И Не СтрокаРаспределения.Модифицированность Тогда 
			// Маршрутный лист, который не был изменен в ходе допланирования.
			КоличествоМодифицированныхМаршрутныхЛистов = КоличествоМодифицированныхМаршрутныхЛистов-1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоМодифицированныхМаршрутныхЛистов = 0 Тогда 
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"",
				"Ошибка",
				"Ошибка_31_НиОдинЗаказНеБылРаспределен",
				Неопределено
			)
		);
		
	Иначе 
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			Форма = ПолучитьФорму("ОбщаяФорма.уатДлительнаяОперация",, ЭтотОбъект);
			Форма.ТекстСтатуса = НСтр("en='Create of routing lists on results of allocation';ru='Создание маршрутных листов по результатам распределения'");
			Форма.Открыть();
		КонецЕсли;
		
		ВыполнитьРаспределениеСервер(РаспредЗаказов, Ложь);
		
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
		Форма = ПолучитьФорму("ОбщаяФорма.уатДлительнаяОперация",, ЭтотОбъект);
		Форма.ТекстСтатуса = НСтр("en='Update the time and distance in the routing lists';ru='Обновление времени и расстояния в маршрутных листах'");
		Форма.Открыть();
	КонецЕсли;
	
	ОбновитьУровеньДереваВМаршрутах();
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ОбновитьВременныеХарактеристикиМашрута();
	КонецЕсли;
	ОбновитьДеревоМаршрутовНаКлиенте();
	
	Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
		Форма.Закрыть();
	КонецЕсли;
	
	Если МассивОшибок.Количество() Тогда 
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибок);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='While orders allocation errors occured:';ru='При распределении заказов возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Ошибка");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект);
		
	Иначе
		ТекстСообщения = НСтр("en='Allocation of orders successfully completed.';ru='Распределение заказов успешно завершено.'") + Символы.ПС + НСтр("en='Execute time:';ru='Время выполнения:'") + " " 
			+ Формат('00010101'+(ТекущаяДата()-ВремяНачалаМаршрутизации), "ДФ=HH:mm:ss; ДП=00:00:00");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаименованиеАлгоритма()
	
	Если НастройкаАлгоритмМаршрутизации = 0 Тогда
		Возврат "Очередей";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 1 Тогда
		Возврат "КларкаРайта";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 3 Тогда
		Возврат "Яндекс";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 4 Тогда
		Возврат "RarusVRP";
	ИначеЕсли НастройкаАлгоритмМаршрутизации = 5 Тогда
		Возврат "ФиксМаршруты";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВнешняяМаршрутизация(тблТСдляМаршрутизации)
	
	ВремяНачалаМаршрутизации = ТекущаяДата();
	флRarusVRP = НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP";
	
	мсвЗаказов = Новый Массив();
	
	СтрокиДляПодбора = Новый Массив();
		
	Для Каждого ТекСтрокаЗаказ Из кэшСписокОтмеченныхЗаказов Цикл
		
		ДанныеГруза = Новый Структура();
		ДанныеГруза.Вставить("GUID",       ТекСтрокаЗаказ.Номер + "_" + ТекСтрокаЗаказ.ИдентификаторСтроки);
		ДанныеГруза.Вставить("Заказ",      ТекСтрокаЗаказ.Ссылка);
		ДанныеГруза.Вставить("Груз",       ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.Груз), ТекСтрокаЗаказ.Груз, Неопределено));
		ДанныеГруза.Вставить("Количество", ТекСтрокаЗаказ.Количество);
		ДанныеГруза.Вставить("НомерСтроки",ТекСтрокаЗаказ.НомерСтроки);

		мсвЗаказов.Добавить(ДанныеГруза);
	КонецЦикла;
	
	Если НастройкаРежимДопланирования
		И НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Тогда
		Для Каждого ТекСтрока Из тблТСдляМаршрутизации Цикл
			Если НЕ ТекСтрока.Свойство("ЗаказыДляДопланирования") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ЗаказыДляДопланирования Цикл
				ДанныеГруза = Новый Структура();
				ДанныеГруза.Вставить("GUID",       ТекСтрокаЗаказ.Номер + "_" + ТекСтрокаЗаказ.ИдентификаторСтроки);
				ДанныеГруза.Вставить("Заказ",      ТекСтрокаЗаказ.Заказ);
				ДанныеГруза.Вставить("Груз",       ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.Груз), ТекСтрокаЗаказ.Груз, Неопределено));
				ДанныеГруза.Вставить("Количество", ТекСтрокаЗаказ.Количество);
				ДанныеГруза.Вставить("НомерСтроки",ТекСтрокаЗаказ.НомерСтроки);
				ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекСтрокаЗаказ.IDМаршрутногоЛиста);
				мсвЗаказов.Добавить(ДанныеГруза);
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
	ТекстОшибки = "";
	СтруктураНастроекАРМ = Новый Структура(уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
	ЗаполнитьЗначенияСвойств(СтруктураНастроекАРМ, ЭтотОбъект);
	РабочаяДатаПланирования = ДатаПланирования;
	
	Если НЕ флRarusVRP Или
		флRarusVRP И НастройкаRarusVRPРежимЗапуска = 0 Тогда
		// Запуск фонового задания - основной вариант внешней маршрутизации
	
		IDзадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуMVRP(
			ДатаПланирования,
			тблТСдляМаршрутизации,
			мсвЗаказов,
			СтруктураНастроекАРМ,
			ТекстОшибки);
			
		Если НастройкаСохранятьЭтапыМаршрутизации Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПолейЭтапаМаршрутизации, ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(Ложь, Истина));
			СтруктураПолейЭтапаМаршрутизации.IDзадачиВнешнийМаршрутизатор = IDзадачиВнешнийМаршрутизатор;
			ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("МассивОшибок",        Новый Массив());
		ДопПараметры.Вставить("ОшибкаМаршрутизации", Ложь);
		ДопПараметры.Вставить("мсвЗаказов",          мсвЗаказов);
		
		СтрокаРезультат  = "";
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP, СтрокаРезультат);
		Если ЗаданиеВыполнено Тогда
			Если НастройкаСохранятьЭтапыМаршрутизации Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПолейЭтапаМаршрутизации, ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(Ложь, Истина));
				СтруктураПолейЭтапаМаршрутизации.IDзадачиВнешнийМаршрутизатор = IDзадачиВнешнийМаршрутизатор;
				СтруктураПолейЭтапаМаршрутизации.СтрокаРезультат              = СтрокаРезультат;
				ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
			КонецЕсли;

			Если ТекстОшибки = "" Тогда 
				МаршрутизацияКомпонентаРарусПослеМаршрутизации(Неопределено, ДопПараметры);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизатор = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("МаршрутизацияКомпонентаРарусПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму(
			"ОбщаяФорма.уатДлительнаяОперация",
			,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект, ДопПараметры)
		);
	Иначе
		// Локальный запуск маршрутизации Rarus VRP в отладочных целях
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		СтруктураJSON = уатВнешнийМаршрутизаторСервер_уэ.Маршрутизация_ПолучитьСтруктуруЗапросаMVRP(ДатаПланирования,
			тблТСдляМаршрутизации,
			мсвЗаказов,
			СтруктураНастроекАРМ,
			ТекстОшибки);
		МодульВнешнийМаршрутизаторКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("уатВнешнийМаршрутизаторКлиент_уэ");
		КаталогОтладки = ПолучитьКаталогОтладки();
		МодульВнешнийМаршрутизаторКлиент.ВыгрузитьДанные(СтруктураJSON, КаталогОтладки, ТекстОшибки);
		Если Не ТекстОшибки = "" Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		МодульВнешнийМаршрутизаторКлиент.ЗапуститьМаршрутизацию(АдресХранилищаДО, КаталогОтладки, ТекстОшибки);
		Если Не ТекстОшибки = "" Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("МассивОшибок",        Новый Массив());
		ДопПараметры.Вставить("ОшибкаМаршрутизации", Ложь);
		ДопПараметры.Вставить("мсвЗаказов",          мсвЗаказов);
		МаршрутизацияКомпонентаРарусПослеМаршрутизации(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыДлительнойОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ОтменитьВыполнение")
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
			Или НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP") Тогда 
		Попытка
			ОтключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания");
		Исключение
		КонецПопытки;
		
		ОповещениеПослеДлительнойОперации = Неопределено;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатSVRP(
		АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания()
	
	ТекстОшибки = "";
	
	флRarusVRP = НастройкаАлгоритмОптимизации = "RarusVRP";
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		
		Если ТекстОшибки = "" Тогда  
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогОтладки()
	Возврат Константы.уатКаталогОтладкиRarusVRP.Получить();
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP()
	
	ТекстОшибки = "";
	
	СтрокаРезультат  = "";
	флRarusVRP       = НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP";
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP, СтрокаРезультат);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		Если НастройкаСохранятьЭтапыМаршрутизации Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПолейЭтапаМаршрутизации, ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(Ложь, Истина));
			СтруктураПолейЭтапаМаршрутизации.IDзадачиВнешнийМаршрутизатор = IDзадачиВнешнийМаршрутизатор;
			СтруктураПолейЭтапаМаршрутизации.СтрокаРезультат              = СтрокаРезультат;
			ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
		КонецЕсли;

		Если ТекстОшибки = "" Тогда 
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуMVRP(ДатаПланирования, тблТСдляМаршрутизации, мсвЗаказов, СтруктураНастроекАРМ, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуMVRP(
		ДатаПланирования,
		тблТСдляМаршрутизации,
		мсвЗаказов,
		СтруктураНастроекАРМ,
		ТекстОшибки
	);
	
КонецФункции // ВнешняяМаршрутизация_ДобавитьЗадачуMVRP()

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP, СтрокаРезультат = "")
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатMVRP(
		АдресВрХранилища,
		IDзадачи,
		ТекстОшибки,
		флRarusVRP,
		СтрокаРезультат
	);
	
КонецФункции

&НаКлиенте
Процедура МаршрутизацияКомпонентаРарус(МассивОшибок, ОшибкаМаршрутизации, тблТСДляМаршрутизации)
	
	флИспользованиеКластеризации = ИспользованиеКластеризации;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("флИспользованиеКластеризации", флИспользованиеКластеризации);
	ДопПараметры.Вставить("МассивОшибок",                 МассивОшибок);
	ДопПараметры.Вставить("ОшибкаМаршрутизации",          ОшибкаМаршрутизации);
	ДопПараметры.Вставить("тблТСДляМаршрутизации",        тблТСДляМаршрутизации);
	
	мсвДопАдреса = Новый Массив();
	
	СтрокиДляПодбора = Новый Массив();
		
	Для Каждого ТекСтрокаЗаказ Из кэшСписокОтмеченныхЗаказов Цикл
		
		мсвДопАдреса.Добавить(ТекСтрокаЗаказ.АдресОтправления);
		мсвДопАдреса.Добавить(ТекСтрокаЗаказ.АдресНазначения);
		
	КонецЦикла;
	
	Если НастройкаИндивидуальныйГаражТС Тогда 
		ЗаполнитьМассивДопАдресовГаражамиТССервер(мсвДопАдреса);
		
	Иначе 
		мсвДопАдреса.Добавить(НастройкаАдресВыезда);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДопПараметры", ДопПараметры);
	ДополнительныеПараметры.Вставить("мсвДопАдреса", мсвДопАдреса);
	
	Если флИспользованиеКластеризации
		И НЕ уатЗащищенныеФункцииСервер_уэ.СписокКластеровАктуален(НастройкаКластеризации, мсвДопАдреса) Тогда 
		
		ТекстВопроса = НСтр("en = 'To continue routing it is necessary to update clusters.'; ru = 'Для продолжения маршрутизации необходимо выполнить обновление кластеров.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("en = 'For update, it is necessary to have access to the server'; ru = 'Для обновления необходимо наличие доступа к серверу'");
		ТекстВопроса = ТекстВопроса + " ";
		ТекстВопроса = ТекстВопроса + НСтр("en = 'through the Internet. The operation can take a long time.'; ru = 'через интернет. Операция может занять длительное время.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("en = 'The duration depends on the number of destinations in the orders.'; ru = 'Продолжительность зависит от количества пунктов назначения в заказах.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("en = 'The maximum number of requests to the online service is limited.'; ru = 'Максимальное количество запросов к онлайну сервису ограничено.'");
		
		Оповещение = Новый ОписаниеОповещения("МаршрутизацияРарусОбновитьКластеры", ЭтотОбъект, ДополнительныеПараметры);
		
		СписокОтветов = Новый СписокЗначений();
		СписокОтветов.Добавить("ОбновитьКластеры",        НСтр("ru='Обновить кластеры';en='Update clusters'"));
		СписокОтветов.Добавить("ПродолжитьБезОбновления", НСтр("en='Continue without updating';ru='Продолжить без обновления'"));
		СписокОтветов.Добавить("Отменить",                НСтр("en='Cancel routing';ru='Отменить маршрутизацию'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокОтветов);
		
	ИначеЕсли НЕ флИспользованиеКластеризации
		И НЕ уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(мсвДопАдреса) Тогда 
		
		ТекстВопроса = НСтр("en = 'To continue routing it is necessary to update the distances between the points.'; ru = 'Для продолжения маршрутизации необходимо выполнить обновление расстояний между пунктами.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("en = 'For update, it is necessary to have access to the server'; ru = 'Для обновления необходимо наличие доступа к серверу'");
		ТекстВопроса = ТекстВопроса + " ";
		ТекстВопроса = ТекстВопроса + НСтр("en = 'through the Internet. The operation can take a long time.'; ru = 'через интернет. Операция может занять длительное время.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("en = 'The duration depends on the number of destinations in the orders.'; ru = 'Продолжительность зависит от количества пунктов назначения в заказах.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("en = 'The maximum number of requests to the online service is limited.'; ru = 'Максимальное количество запросов к онлайну сервису ограничено.'");
		
		Оповещение = Новый ОписаниеОповещения("МаршрутизацияРарусОбновитьПункты", ЭтотОбъект, ДополнительныеПараметры);
		
		СписокОтветов = Новый СписокЗначений();
		СписокОтветов.Добавить("ОбновитьПункты",          НСтр("en='Update distances';ru='Обновить расстояния'"));
		СписокОтветов.Добавить("ПродолжитьБезОбновления", НСтр("en='Continue without updating';ru='Продолжить без обновления'"));
		СписокОтветов.Добавить("Отменить",                НСтр("en='Cancel routing';ru='Отменить маршрутизацию'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокОтветов);
		
	Иначе 
		МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗаданиеПоИдентификатору()
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаСервере
Функция ЗаданиеВыполнено()
	
	Задание = НайтиЗаданиеПоИдентификатору();
	
	Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='The background job (id=%1) is not found';ru='Фоновое задание (id=%1) не найдено'"), ИдентификаторЗадания);
		ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстКомментария);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОшибкаЗадания = Задание.ИнформацияОбОшибке;
		Если ОшибкаЗадания <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ОшибкаЗадания));
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("en='Task ended with an unknown error.';ru='Задание завершилось с неизвестной ошибкой.'"));
		КонецЕсли;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("en='Background job cancelled by administrator';ru='Фоновое задание отменено администратором'"));
		Возврат Истина;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ВызватьИсключение(НСтр("en='Could not perform this operation. For details, see. in the register.';ru='Не удалось выполнить данную операцию. Подробности см. в Журнале регистрации.'"));
	
КонецФункции

&НаСервере
Функция СтартФоновогоЗаданияНаСервере(ДопПараметрыВыполнения, ИмяМетода)
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ЗаданиеВыполнено = Ложь; 
	
	НаименованиеЗадания = НСтр("en='Orders routing';ru='Маршрутизация заказов'");
	
	ПараметрыВыполнения = Новый Массив();
	ПараметрыВыполнения.Добавить(АдресХранилищаДО);
	
	Для Каждого ТекДопПараметр Из ДопПараметрыВыполнения Цикл 
		ПараметрыВыполнения.Добавить(ТекДопПараметр);
	КонецЦикла;
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыВыполнения,, НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение  
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено() Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли; 
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеВыполнения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			ЗакрытьФормуДлительнойОперации();
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				// ОповещениеПослеДлительнойОперации стирается в первую очередь,
				// чтобы не потерять изменения этой переменной, которые могут быть возникнуть при обработке оповещения
				ОповещениеПослеДлительнойОперацииКопия = ОповещениеПослеДлительнойОперации;
				ОповещениеПослеДлительнойОперации = Неопределено;
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперацииКопия);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьСостояниеВыполнения();
	
	Если Не РезультатВыполнения = Неопределено Тогда 
		Если РезультатВыполнения.Свойство("СообщениеПользователю") И Не РезультатВыполнения.СообщениеПользователю = Неопределено Тогда 
			ФормаДлительнойОперации.ТекстСтатуса = РезультатВыполнения.СообщениеПользователю;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("Прогресс") И Не РезультатВыполнения.Прогресс = Неопределено Тогда
			Оповестить("ПоказатьПрогрессДлительнойОперации");
			ФормаДлительнойОперации.Прогресс = РезультатВыполнения.Прогресс;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьЗаказы()
	
	УстановитьЗначениеДатаПланированияСпискаЗаказов();
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияРарусОбновитьПункты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ОбновитьПункты" Тогда 
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			ПараметрыВыполненияФЗ = Новый Массив();
			ПараметрыВыполненияФЗ.Добавить(ДополнительныеПараметры.мсвДопАдреса);
			
			ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами";
			
			ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
			Если ЗаданиеВыполнено Тогда
				МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры.ДопПараметры);
				Возврат;
			КонецЕсли;
			
			ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("МаршрутизацияКомпонентаРарусПослеОбновленияКластеров", ЭтотОбъект, ДополнительныеПараметры.ДопПараметры);
			
			// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
			ПараметрыОбработчикаОжидания = Новый Структура(
				"МинимальныйИнтервал,
				|МаксимальныйИнтервал,
				|ТекущийИнтервал,
				|КоэффициентУвеличенияИнтервала", 
				1, 15, 1, 1.4);
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			
			ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
		Иначе 
			уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ДополнительныеПараметры.мсвДопАдреса);
			МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры.ДопПараметры);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = "ПродолжитьБезОбновления" Тогда 
		МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры.ДопПараметры);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Результат, ДопПараметры) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "АРМ_Логиста.МаршрутизацияЗаказов");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ВремяНачалаМаршрутизации = ТекущаяДата();
	
	МассивОшибок        = ДопПараметры.МассивОшибок;
	ОшибкаМаршрутизации = ДопПараметры.ОшибкаМаршрутизации;
	тблТСДляМаршрутизации = ДопПараметры.тблТСДляМаршрутизации;
	
	флИспользованиеКластеризации = ДопПараметры.флИспользованиеКластеризации;
	
	мсвЗаказыПоКоординатам = Новый Массив();
	мсвЗаказов = Новый Массив();
	
	флЕстьОбъемПоЗаказу = Ложь;
	флЕстьВесПоЗаказу   = Ложь;
	флЕстьМестаПоЗаказу = Ложь;
	
	СтрокиДляПодбора = Новый Массив();
	
	Для Каждого ТекСтрокаЗаказ Из кэшСписокОтмеченныхЗаказов Цикл
		
		Если ТекСтрокаЗаказ.Объем > 0 Тогда 
			флЕстьОбъемПоЗаказу = Истина;
		КонецЕсли;
		Если ТекСтрокаЗаказ.ВесБрутто > 0 Тогда 
			флЕстьВесПоЗаказу = Истина;
		КонецЕсли;
		Если ТекСтрокаЗаказ.КоличествоМест > 0 Тогда 
			флЕстьМестаПоЗаказу = Истина;
		КонецЕсли;
		
		Если флИспользованиеКластеризации Тогда 
			Если ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте = 0 И ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте = 0 Тогда 
				ДанныеГруза = Новый Структура();
				ДанныеГруза.Вставить("Заказ",      ТекСтрокаЗаказ.Ссылка);
				ДанныеГруза.Вставить("Груз",       ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.Груз), ТекСтрокаЗаказ.Груз, Неопределено));
				ДанныеГруза.Вставить("Количество", ТекСтрокаЗаказ.Количество);
				ДанныеГруза.Вставить("GUID",       "");
				ДанныеГруза.Вставить("НомерСтроки",ТекСтрокаЗаказ.НомерСтроки);
				мсвЗаказов.Добавить(ДанныеГруза);
				
			ИначеЕсли ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте = 1 Или ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте = 1 Тогда 
				Продолжить;
				
			Иначе 
				ДанныеГруза = Новый Структура();
				ДанныеГруза.Вставить("Заказ",                  ТекСтрокаЗаказ.Ссылка);
				ДанныеГруза.Вставить("АдресОтправления",       ТекСтрокаЗаказ.АдресОтправления);
				ДанныеГруза.Вставить("АдресНазначения",        ТекСтрокаЗаказ.АдресНазначения);
				ДанныеГруза.Вставить("ЛатОтпр",                ТекСтрокаЗаказ.ЛатОтправления);
				ДанныеГруза.Вставить("ЛонОтпр",                ТекСтрокаЗаказ.ЛонОтправления);
				ДанныеГруза.Вставить("ЛатНазн",                ТекСтрокаЗаказ.ЛатНазначения);
				ДанныеГруза.Вставить("ЛонНазн",                ТекСтрокаЗаказ.ЛонНазначения);
				ДанныеГруза.Вставить("ПриоритетМаршрутизации", ТекСтрокаЗаказ.ПриоритетМаршрутизации);
				ДанныеГруза.Вставить("ОтправлениеС",           ТекСтрокаЗаказ.ОтправлениеС);
				ДанныеГруза.Вставить("ОтправлениеПо",          ТекСтрокаЗаказ.ОтправлениеПо);
				ДанныеГруза.Вставить("ДоставкаС",              ТекСтрокаЗаказ.ДоставкаС);
				ДанныеГруза.Вставить("ДоставкаПо",             ТекСтрокаЗаказ.ДоставкаПо);
				ДанныеГруза.Вставить("Груз",                   ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.Груз), ТекСтрокаЗаказ.Груз, Неопределено));
				ДанныеГруза.Вставить("Количество",             ТекСтрокаЗаказ.Количество);
				ДанныеГруза.Вставить("НомерСтроки",            ТекСтрокаЗаказ.НомерСтроки);
				ДанныеГруза.Вставить("GUID",                   ТекСтрокаЗаказ.ИдентификаторСтроки);
				мсвЗаказыПоКоординатам.Добавить(ДанныеГруза);
			КонецЕсли;
			
		Иначе 
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("Заказ",       ТекСтрокаЗаказ.Ссылка);
			ДанныеГруза.Вставить("Груз",        ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.Груз), ТекСтрокаЗаказ.Груз, Неопределено));
			ДанныеГруза.Вставить("Количество",  ТекСтрокаЗаказ.Количество);
			ДанныеГруза.Вставить("НомерСтроки", ТекСтрокаЗаказ.НомерСтроки);
			ДанныеГруза.Вставить("GUID",        ТекСтрокаЗаказ.ИдентификаторСтроки);
			мсвЗаказов.Добавить(ДанныеГруза);
			
		КонецЕсли;
	КонецЦикла;
	
	мсвТС     = Новый Массив();
	мсвВиртТС = Новый Массив();
	соотвВиртТС = Новый Соответствие;
	
	// Заполним таблицу пустыми узлами ТС.
	Для Каждого ТекТС Из тблТСДляМаршрутизации Цикл 
		Прицеп1 = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Прицеп2 = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		
		Для Сч = 1 По ТекТС.Прицепы.Количество() Цикл 
			ТекПрицеп = ТекТС.Прицепы[Сч-1];
			
			Если (флЕстьОбъемПоЗаказу И ТекПрицеп.ОбъемКузова = 0)
					Или (флЕстьВесПоЗаказу И ТекПрицеп.Грузоподъемность = 0)
					Или (флЕстьМестаПоЗаказу И ТекПрицеп.МаксимальноеКоличествоУпаковок = 0) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Сч = 1 Тогда 
				Прицеп1 = ТекПрицеп.Прицеп;
			Иначе 
				Прицеп2 = ТекПрицеп.Прицеп;
			КонецЕсли;
		КонецЦикла;
		
		Если (флЕстьОбъемПоЗаказу И ТекТС.ОбъемКузова = 0)
				Или (флЕстьВесПоЗаказу И ТекТС.Грузоподъемность = 0)
				Или (флЕстьМестаПоЗаказу И ТекТС.МаксимальноеКоличествоУпаковок = 0) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекТС.ЭтоВиртуальноеТС Тогда
			мсвВиртТС.Добавить(Новый Структура("ТС,Прицеп1,Прицеп2,ДатаВыездаТС,КоличествоВиртуальныхТС", ТекТС.ТС, Прицеп1, Прицеп2, ТекТС.ДатаВыездаТС, ТекТС.КоличествоВиртуальныхТС));
		ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
			И ТекТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
			ПараметрыТС = СоотвВиртТС[ТекТС.ТС];
			Если ПараметрыТС = Неопределено Тогда
				ПараметрыТС = Новый Структура("Прицеп1,Прицеп2,ДатаВыездаТС,КоличествоВиртуальныхТС", Прицеп1, Прицеп2, ТекТС.ДатаВыездаТС, ТекТС.КоличествоВиртуальныхТС);
			Иначе
				ПараметрыТС.КоличествоВиртуальныхТС = ПараметрыТС.КоличествоВиртуальныхТС + ТекТС.КоличествоВиртуальныхТС;
			КонецЕсли;
			СоотвВиртТС[ТекТС.ТС] = ПараметрыТС;
		Иначе 
			мсвТС.Добавить(Новый Структура("ТС,Прицеп1,Прицеп2,ДатаВыездаТС", ТекТС.ТС, Прицеп1, Прицеп2, ТекТС.ДатаВыездаТС));
		КонецЕсли;
	КонецЦикла; 
	
	Если НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Тогда
		Для Каждого КлючИЗначение Из соотвВиртТС Цикл
			мсвВиртТС.Добавить(Новый Структура("ТС,Прицеп1,Прицеп2,ДатаВыездаТС,КоличествоВиртуальныхТС",
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение.Прицеп1,
				КлючИЗначение.Значение.Прицеп2,
				КлючИЗначение.Значение.ДатаВыездаТС,
				КлючИЗначение.Значение.КоличествоВиртуальныхТС
			));
		КонецЦикла;
	КонецЕсли;
	
	Если мсвТС.Количество() = 0 И мсвВиртТС.Количество() = 0 Тогда
		МассивОшибок.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект",
		"",
		"Ошибка",
		"Ошибка_31_НиОдинЗаказНеБылРаспределен",
		Неопределено
		)
		);
		// ТС для маршрутизации нет.
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("Подключаемый_МаршрутизацияЗавершение", ЭтотОбъект, Новый Структура("МассивОшибок,ОшибкаМаршрутизации", МассивОшибок, ОшибкаМаршрутизации));
		ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
		ОповещениеПослеДлительнойОперации = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если флИспользованиеКластеризации Тогда 
		Если Не мсвЗаказыПоКоординатам.Количество() = 0 Тогда 
			уатЗащищенныеФункцииСервер_уэ.ЗаполнитьКластераВЗаказах(мсвЗаказыПоКоординатам, НастройкаКластеризации);
		КонецЕсли;
	КонецЕсли;
	
	Если мсвЗаказов.Количество() = 0 И мсвЗаказыПоКоординатам.Количество() = 0 Тогда
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"",
				"Ошибка",
				"Ошибка_31_НиОдинЗаказНеБылРаспределен",
				Неопределено
			)
		);
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("Подключаемый_МаршрутизацияЗавершение", ЭтотОбъект, Новый Структура("МассивОшибок,ОшибкаМаршрутизации", МассивОшибок, ОшибкаМаршрутизации));
		ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
		ОповещениеПослеДлительнойОперации = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДопПараметрыОбработкаФЗ = Новый Структура("МассивОшибок,ОшибкаМаршрутизации", МассивОшибок, ОшибкаМаршрутизации);
	
	ПараметрыСжатия = Новый Структура();
	ПараметрыСжатия.Вставить("МаксВес",        НастройкаСжатияМаксВес);
	ПараметрыСжатия.Вставить("МаксВремя",      НастройкаСжатияМаксВремя);
	ПараметрыСжатия.Вставить("МаксОбъем",      НастройкаСжатияМаксОбъем);
	ПараметрыСжатия.Вставить("МаксРасстояние", НастройкаСжатияМаксРасстояние);
	ПараметрыСжатия.Вставить("МаксУпак",       НастройкаСжатияМаксУпак);
	
	ДатаВыездаИзГаража = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	
	Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
		ПараметрыВыполненияФЗ = Новый Массив();
		ПараметрыВыполненияФЗ.Добавить(мсвЗаказов);
		ПараметрыВыполненияФЗ.Добавить(мсвЗаказыПоКоординатам);
		ПараметрыВыполненияФЗ.Добавить(мсвТС);
		ПараметрыВыполненияФЗ.Добавить(мсвВиртТС);
		ПараметрыВыполненияФЗ.Добавить(НастройкаАдресВыезда);
		ПараметрыВыполненияФЗ.Добавить(НастройкаКластеризации);
		ПараметрыВыполненияФЗ.Добавить(НастройкаРежимОптимизации);
		ПараметрыВыполненияФЗ.Добавить(НастройкаМаксимальнаяПродолжительностьМаршрута);
		ПараметрыВыполненияФЗ.Добавить(НастройкаМаксимальноеРасстояниеМаршрута);
		ПараметрыВыполненияФЗ.Добавить(НастройкаМаксимальноеЧислоЗаказовМаршрута);
		ПараметрыВыполненияФЗ.Добавить(НастройкаМаксимальноеЧислоПунктовМаршрута);
		ПараметрыВыполненияФЗ.Добавить(ДатаВыездаИзГаража);
		ПараметрыВыполненияФЗ.Добавить(НастройкаСжиматьЗаказы);
		ПараметрыВыполненияФЗ.Добавить(НастройкаАлгоритмМаршрутизации);
		ПараметрыВыполненияФЗ.Добавить(НастройкаИндивидуальныйГаражТС=1);
		ПараметрыВыполненияФЗ.Добавить(НастройкаЗаездНаСкладСобственныеТС);
		ПараметрыВыполненияФЗ.Добавить(НастройкаЗаездНаСкладПривлеченныеТС);
		ПараметрыВыполненияФЗ.Добавить(НастройкаЗаездНаСкладВиртуальныеТС);
		ПараметрыВыполненияФЗ.Добавить(УчитыватьОграниченияПоЗагрузкеТС);
		ПараметрыВыполненияФЗ.Добавить(НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации);
		ПараметрыВыполненияФЗ.Добавить(ПараметрыСжатия);
		ПараметрыВыполненияФЗ.Добавить(НастройкаУчитыватьРазрешенныеТипыТС);
		ПараметрыВыполненияФЗ.Добавить(НастройкаВремяВыездаИзГаража);
		ПараметрыВыполненияФЗ.Добавить(НастройкаПараметрРазмераЗаказа);
		ПараметрыВыполненияФЗ.Добавить(НастройкаПриоритетМаршрутизации);
		ПараметрыВыполненияФЗ.Добавить(НастройкаУчитыватьОкноПогрузкиТерминалов);
		ПараметрыВыполненияФЗ.Добавить(НастройкаИспользоватьВПриоритетеСобственныйТранспорт);
		ПараметрыВыполненияФЗ.Добавить(НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему);
		ПараметрыВыполненияФЗ.Добавить(НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу);
		ПараметрыВыполненияФЗ.Добавить(НастройкаКларкРайтРежимДоставки);
		ПараметрыВыполненияФЗ.Добавить(НастройкаУчитыватьНаправленияПеревозки);
		ПараметрыВыполненияФЗ.Добавить(НастройкаУчитыватьСекцииТранспортныхСредств);
		ПараметрыВыполненияФЗ.Добавить(НастройкаСмешиватьГрузыВСекциях);
		ПараметрыВыполненияФЗ.Добавить(НастройкаИспользоватьХарактеристикиЗаказовНаТС);
		//ПараметрыВыполненияФЗ.Добавить(НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизацииНастройка);
		
		ИмяМетодаФЗ = "уатОбщегоНазначения_уэ.ВыполнитьМаршрутизациюРарус";
		
		ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
		Если ЗаданиеВыполнено Тогда
			МаршрутизацияКомпонентаРарусПослеМаршрутизации(Неопределено, ДопПараметрыОбработкаФЗ);
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("МаршрутизацияКомпонентаРарусПослеМаршрутизации", ЭтотОбъект, ДопПараметрыОбработкаФЗ);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
	Иначе 
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		уатОбщегоНазначения_уэ.ВыполнитьМаршрутизациюРарус(АдресХранилищаДО, мсвЗаказов, мсвЗаказыПоКоординатам, мсвТС, 
			мсвВиртТС, НастройкаАдресВыезда, НастройкаКластеризации, НастройкаРежимОптимизации, 
			НастройкаМаксимальнаяПродолжительностьМаршрута, НастройкаМаксимальноеРасстояниеМаршрута, 
			НастройкаМаксимальноеЧислоЗаказовМаршрута, НастройкаМаксимальноеЧислоПунктовМаршрута, ДатаВыездаИзГаража, 
			НастройкаСжиматьЗаказы, НастройкаАлгоритмМаршрутизации, НастройкаИндивидуальныйГаражТС=1, 
			НастройкаЗаездНаСкладСобственныеТС, НастройкаЗаездНаСкладПривлеченныеТС, НастройкаЗаездНаСкладВиртуальныеТС,
			УчитыватьОграниченияПоЗагрузкеТС, НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации, ПараметрыСжатия,
			НастройкаУчитыватьРазрешенныеТипыТС, НастройкаВремяВыездаИзГаража, НастройкаПараметрРазмераЗаказа,
			НастройкаПриоритетМаршрутизации, НастройкаУчитыватьОкноПогрузкиТерминалов,
			НастройкаИспользоватьВПриоритетеСобственныйТранспорт, НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
			НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу, НастройкаКларкРайтРежимДоставки,
			НастройкаУчитыватьНаправленияПеревозки, НастройкаУчитыватьСекцииТранспортныхСредств,
			НастройкаСмешиватьГрузыВСекциях, НастройкаИспользоватьХарактеристикиЗаказовНаТС);
		МаршрутизацияКомпонентаРарусПослеМаршрутизации(Неопределено, ДопПараметрыОбработкаФЗ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизации()
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРаспределениеЗаказовРарусИзВременногоХранилища(МассивОшибок, флВнешняяМаршрутизация=Ложь)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Если Результат.Свойство("ВнешняяМаршрутизация") Тогда 
		флВнешняяМаршрутизация = Истина;
	КонецЕсли;
	
	Если Результат.Свойство("ТекстОшибки") Тогда 
		ПараметрыТекстОшибки = Новый Массив();
		ПараметрыТекстОшибки.Добавить(Результат.ТекстОшибки);
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект, Параметры",
				"",
				"Ошибка",
				"Ошибка_32",
				Неопределено, 
				ПараметрыТекстОшибки
			)
		);
	КонецЕсли;
	
	Если Результат.Свойство("Метрики") Тогда
		Если ТипЗнч(Результат.Метрики) = Тип("Массив") Тогда
			МетрикиВнешнейМаршрутизации.ЗагрузитьЗначения(Результат.Метрики);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("пулы") И Не Результат.пулы = Неопределено Тогда 
		Возврат Результат.пулы;
	Иначе 
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции // ПолучитьРаспределениеЗаказовРарусИзВременногоХранилища()

&НаКлиенте
Процедура МаршрутизацияКомпонентаРарусПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	
	МассивЗаказовДляПерезаписи = Новый Массив();
	
	МассивОшибок = ДопПараметры.МассивОшибок;
	ОшибкаМаршрутизации = ДопПараметры.ОшибкаМаршрутизации;
	флВнешняяМаршрутизация = Ложь;
	
	РаспредЗаказов = ПолучитьРаспределениеЗаказовРарусИзВременногоХранилища(МассивОшибок, флВнешняяМаршрутизация);
	
	Если РаспредЗаказов.Количество() = 0 Тогда 
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"",
				"Ошибка",
				"Ошибка_31_НиОдинЗаказНеБылРаспределен",
				Неопределено
			)
		);
		
	Иначе 
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			Форма = ПолучитьФорму("ОбщаяФорма.уатДлительнаяОперация",, ЭтотОбъект);
			Форма.ТекстСтатуса = НСтр("en='Create routing lists on routing results';ru='Создание маршрутных листов по результатам маршрутизации'");
			Форма.Открыть();
		КонецЕсли;
		
		Если флВнешняяМаршрутизация
			И ДопПараметры.Свойство("мсвЗаказов") Тогда 
			
			СтрокаСвойствТочки = "Адрес, Заказ, Груз, Количество, Операция, Ожидание, Стоянка, Время, Расстояние, СтоянкиНеИспользуются, GUID";
			Для Каждого ТекПул Из РаспредЗаказов Цикл 
				НовМаршрут = Новый Массив();
				
				МассивИдентификоторовСтрокЗаказа = Новый Соответствие();
				СтруктураТочкиПогрузки  = Новый Структура(СтрокаСвойствТочки);
				ТочкаПогрузкиОпределена = Ложь;
				ТочкаПогрузкиИндекс     = 0;
				Счетчик                 = 0;
			
				Для Каждого ТекЭлемент Из ТекПул.маршрут Цикл 
					
					Если ТекЭлемент.Тип = "drop_off" Тогда
						ТочкаПогрузкиОпределена = Истина;
						Операция                = ТипыТочекМаршрута_Разгрузка;
						Для Каждого ТекСтрока Из МассивИдентификоторовСтрокЗаказа Цикл
							
							ТекСтрокаЗначение = ТекСтрока.Значение;
							
							СтруктураТочки = Новый Структура(
							СтрокаСвойствТочки,
							ТекЭлемент.Адрес, 
							ТекСтрокаЗначение.Заказ,
							ТекСтрокаЗначение.Груз,
							ТекСтрокаЗначение.Количество,
							ТипыТочекМаршрута_Разгрузка,
							ТекЭлемент.Ожидание,
							ТекЭлемент.Стоянка,
							ТекЭлемент.ВремяВПути,
							ТекЭлемент.Расстояние,
							Истина,
							ТекСтрокаЗначение.GUID);
							
							НовМаршрут.Добавить(СтруктураТочки);
							МассивЗаказовДляПерезаписи.Добавить(Новый Структура("Заказ, АдресНазначения", ТекСтрокаЗначение.Заказ, ТекЭлемент.Адрес));
						КонецЦикла;
					Иначе
						СтруктураТочки = Новый Структура(
						СтрокаСвойствТочки,
						ТекЭлемент.Адрес, 
						ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"),
						ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
						0,
						ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПустаяСсылка"),
						ТекЭлемент.Ожидание,
						ТекЭлемент.Стоянка,
						ТекЭлемент.ВремяВПути,
						ТекЭлемент.Расстояние,
						?(ТекЭлемент.Тип = "garage", Истина, Ложь),
						ТекЭлемент.Заказ);
						Для Каждого ИсходСтрока Из ДопПараметры.мсвЗаказов Цикл 
							Если Строка(ИсходСтрока.GUID) = ТекЭлемент.Заказ Тогда
								СтруктураТочки.Заказ      = ИсходСтрока.Заказ;
								СтруктураТочки.Груз       = ИсходСтрока.Груз;
								СтруктураТочки.Количество = ИсходСтрока.Количество;
								СтруктураТочки.GUID       = ИсходСтрока.GUID;

								Если ТекЭлемент.Тип = "delivery" Тогда
									Операция = ТипыТочекМаршрута_Разгрузка;
									Если МассивИдентификоторовСтрокЗаказа.Получить(ИсходСтрока.GUID) = Неопределено Тогда
										
										ТекСтруктураТочкиПогрузки = Новый Структура(СтрокаСвойствТочки);
										ЗаполнитьЗначенияСвойств(ТекСтруктураТочкиПогрузки, СтруктураТочкиПогрузки);
										
										ТекСтруктураТочкиПогрузки.Заказ      = ИсходСтрока.Заказ;
										ТекСтруктураТочкиПогрузки.Операция   = ТипыТочекМаршрута_Погрузка;
										ТекСтруктураТочкиПогрузки.Груз       = ИсходСтрока.Груз;
										ТекСтруктураТочкиПогрузки.Количество = ИсходСтрока.Количество;
										ТекСтруктураТочкиПогрузки.GUID       = ИсходСтрока.GUID;
										
										НовМаршрут.Вставить(ТочкаПогрузкиИндекс + 1, ТекСтруктураТочкиПогрузки);
										
										ТочкаПогрузкиОпределена              = Истина;
										ТочкаПогрузкиИндекс                  = ТочкаПогрузкиИндекс + 1;
									КонецЕсли;
								Иначе
									Операция = ТипыТочекМаршрута_Погрузка;
									МассивИдентификоторовСтрокЗаказа.Вставить(ИсходСтрока.GUID, СтруктураТочки);
								КонецЕсли;
								СтруктураТочки.Операция   = Операция;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						НовМаршрут.Добавить(СтруктураТочки);
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(СтруктураТочки.Операция)
						И НЕ ТочкаПогрузкиОпределена Тогда
						ЗаполнитьЗначенияСвойств(СтруктураТочкиПогрузки, СтруктураТочки);
						ТочкаПогрузкиИндекс = Счетчик;
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				ТекПул.маршрут.Очистить();
				
				СоответвиеРазгрузок = Новый Соответствие();
				Для Каждого ТекСтрока Из НовМаршрут Цикл
					
					Количество = 0;
					Если ТекСтрока.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
						ТекКоличество = СоответвиеРазгрузок.Получить(ТекСтрока.GUID);
						Если ТекКоличество = Неопределено Тогда
							СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекСтрока.Количество);
							Количество = ТекСтрока.Количество;
						Иначе
							СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекКоличество + ТекСтрока.Количество);
							Количество = ТекКоличество + ТекСтрока.Количество;
						КонецЕсли;
					ИначеЕсли ТекСтрока.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
						ТекКоличество = СоответвиеРазгрузок.Получить(ТекСтрока.GUID);
						Если ТекКоличество = Неопределено Тогда
							СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, - ТекСтрока.Количество);
							Количество = ТекСтрока.Количество;
						Иначе
							СоответвиеРазгрузок.Вставить(ТекСтрока.GUID, ТекКоличество - ТекСтрока.Количество);
							Количество = ТекКоличество - ТекСтрока.Количество;
						КонецЕсли;
					КонецЕсли;
					
					Если Количество >= 0 Тогда
						ТекПул.маршрут.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
				
				Если ТекПул.Свойство("ВремяНачалаМаршрута") Тогда 
					ТекПул.Вставить("ВремяВыездаНаМаршрут", ДатаПланирования + ТекПул.ВремяНачалаМаршрута);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ВыполнитьРаспределениеСервер(РаспредЗаказов, Истина, флВнешняяМаршрутизация);
		
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения(
		"Подключаемый_МаршрутизацияЗавершение",
		ЭтотОбъект,
		Новый Структура("МассивОшибок, ОшибкаМаршрутизации, ВремяРасстояниеУказано, ФлагСерверныеПроцедурыДеревоМаршрутов",
			МассивОшибок, ОшибкаМаршрутизации, флВнешняяМаршрутизация, Ложь)
	);
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
	ОповещениеПослеДлительнойОперации = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределениеСервер(РаспределенныеЗаказы, РежимМаршрутизации=Истина, ВнешняяМаршрутизация=Ложь)
	
	НеПересчитыватьПлановыеДаты = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ВыполнитьРаспределениеСерверДерево(РаспределенныеЗаказы, РежимМаршрутизации, ВнешняяМаршрутизация);
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(НеПересчитыватьПлановыеДаты);
		ОбновитьДеревоМаршрутовНаКлиентеСерверныеПроцедуры(Ложь);
		ОбновитьХарактеристикиТСДерево(); // Для обновления представлений виртуальных ТС с учетом количетва
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
	Иначе
		ВыполнитьРаспределениеСерверСписок(РаспределенныеЗаказы, РежимМаршрутизации, ВнешняяМаршрутизация,
			МассивРаспределенныхЗаказов, ОтмеченныеЗаказы, НеПересчитыватьПлановыеДаты);
	КонецЕсли;

	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	ОбновитьСписокЗаказов();
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределениеСерверДерево(РаспределенныеЗаказы, РежимМаршрутизации=Истина, ВнешняяМаршрутизация=Ложь)
	
	мВремяПрибытияВПункт = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	ИспользуемыеЗаказы   = Новый Соответствие(); // Для подсчета количества распределенных заказов (НастройкаСохранятьЭтапыМыршрутизации).
	
	Для Каждого СтрокаРаспределения Из РаспределенныеЗаказы Цикл 
		
		Если СтрокаРаспределения.Свойство("Модифицированность") И Не СтрокаРаспределения.Модифицированность Тогда 
			// Маршрутный лист, который не был изменен в ходе допланирования. Никакие действия не требуются.
			Продолжить;
		КонецЕсли;
		
		СтрокаТС = Неопределено;
		
		GUIDТС = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРаспределения.ТС, "#");
		Для Каждого СтрокаДерева Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если (Не ВнешняяМаршрутизация И СтрокаДерева.ТС = СтрокаРаспределения.ТС)
				Или (ВнешняяМаршрутизация И СтрокаДерева.GUID = GUIDТС[0])
				Или (ВнешняяМаршрутизация И СтрокаДерева.GUID = СтрокаРаспределения.ТС И НастройкаРежимДопланирования) Тогда
				ЭтоВиртТС = ЗначениеРеквизитаОбъекта(СтрокаДерева.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");

				Если (Не ЭтоВиртТС)
					Или (ЭтоВиртТС И СтрокаДерева.КоличествоВиртуальныхТС = 0 И НастройкаРежимДопланирования
					И (НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Или НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс")) Тогда
					
					СтрокаТС = СтрокаДерева;
					Прервать;
				ИначеЕсли ЭтоВиртТС И СтрокаДерева.КоличествоВиртуальныхТС > 0 Тогда
					ИндексСтрокиДерева = МаршрутыДерево.ПолучитьЭлементы().Индекс(СтрокаДерева);
					НовСтрокаТС = МаршрутыДерево.ПолучитьЭлементы().Вставить(ИндексСтрокиДерева);
					ЗаполнитьЗначенияСвойств(НовСтрокаТС, СтрокаДерева,, "ЗатратыНаПеревозку,GUID,Секции");
					НовСтрокаТС.GUID = СтрокаРаспределения.ТС;
					
					СтрокаДерева.КоличествоВиртуальныхТС = СтрокаДерева.КоличествоВиртуальныхТС - 1;
					НовСтрокаТС.КоличествоВиртуальныхТС  = 0;
					
					Если СтрокаДерева.КоличествоВиртуальныхТС < 1 Тогда 
						МаршрутыДерево.ПолучитьЭлементы().Удалить(СтрокаДерева);
					КонецЕсли;
					
					СтрокаТС = НовСтрокаТС;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТС = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРаспределения.маршрут.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтрокаМЛ = Неопределено;
		ТекущаяСтрокаПункта = Неопределено;
		Если СтрокаРаспределения.Свойство("IDМаршрутногоЛиста") 
			И ЗначениеЗаполнено(СтрокаРаспределения.IDМаршрутногоЛиста) Тогда
			СтрокиМЛ = СтрокаТС.ПолучитьЭлементы();
			Для Каждого ТекСтрокаМЛ Из СтрокиМЛ Цикл
				Если ТекСтрокаМЛ.GUID = СтрокаРаспределения.IDМаршрутногоЛиста Тогда
					НовСтрокаМЛ = ТекСтрокаМЛ;
					Если СтрокаРаспределения.маршрут.Количество() > 0 Тогда
						ПунктОтправленияМаршрута = ПолучитьАдресОтправленияЗаказ(СтрокаРаспределения.маршрут[0]);
						Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.ПолучитьЭлементы() Цикл
							Если ТекСтрокаПункт.Группировка = ПунктОтправленияМаршрута Тогда 
								ТекущаяСтрокаПункта = ТекСтрокаПункт;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НовСтрокаМЛ = Неопределено Тогда
			// Нет Маршрутного листа, в который добавлены новые заказы при домаршрутизации. Создается новый.
			НовСтрокаМЛ = СтрокаТС.ПолучитьЭлементы().Добавить();
			НовСтрокаМЛ.Группировка = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
		КонецЕсли;
		НовСтрокаМЛ.УровеньДерева         = "МЛ";
		НовСтрокаМЛ.СоздатьМаршрутныйЛист = Истина;
		НовСтрокаМЛ.Прицеп1               = СтрокаТС.Прицеп1;
		НовСтрокаМЛ.Прицеп2               = СтрокаТС.Прицеп2;
		НовСтрокаМЛ.Модифицированность    = Истина;
		НовСтрокаМЛ.ПересчетВремени       = СпособПересчетаПлановогоВремениПоУмолчанию;
		
		// Служебный. Признак МЛ созданного в рамках текущего этапа маршрутизации
		Если ФлагМаршрутизация И НастройкаСохранятьЭтапыМаршрутизации Тогда
			СписокМЛТекущийЭтапМаршрутизации.Добавить(НовСтрокаМЛ.ПолучитьИдентификатор());
			НовСтрокаМЛ.ФлагТекущаяМаршрутизация = Истина;
		КонецЕсли;
		
		Если ФлагМаршрутизация И НастройкаУстанавливатьФлагСозданАвтоматическиМЛ Тогда
			НовСтрокаМЛ.СозданАвтоматически = Истина;
		КонецЕсли;
		
		Если СтрокаРаспределения.Свойство("НаправлениеПеревозки") Тогда 
			НовСтрокаМЛ.НаправлениеПеревозки = СтрокаРаспределения.НаправлениеПеревозки;
		КонецЕсли;
		
		Если СтрокаРаспределения.Свойство("ПодобранныйМаршрут") Тогда 
			НовСтрокаМЛ.Маршрут = СтрокаРаспределения.ПодобранныйМаршрут;
		КонецЕсли;
		
		Если РежимМаршрутизации Тогда 
			Если НастройкаИндивидуальныйГаражТС Тогда 
				АдресГаража = ЗначениеРеквизитаОбъекта(СтрокаРаспределения.ТС, "Гараж");
			Иначе
				АдресГаража = НастройкаАдресВыезда;
			КонецЕсли;
			
			Если НастройкаАлгоритмМаршрутизацииСтрока <> "Яндекс" И НастройкаАлгоритмМаршрутизацииСтрока <> "RarusVRP" Тогда
				НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
				НовСтрокаГараж.Группировка                   = АдресГаража;
				НовСтрокаГараж.Адрес                         = АдресГаража;
				НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
				НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
				НовСтрокаГараж.УровеньДерева                 = "Пункт";
				Если (НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс")
					И СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
					НовСтрокаГараж.ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
					
				ИначеЕсли НастройкаВремяВыездаИзГаража = 0 И СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
					НовСтрокаГараж.ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
				ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
					И СтрокаРаспределения.маршрут[0].Свойство("Ожидание") Тогда
					НовСтрокаГараж.ВремяПрибытияВПункт = СложитьВремя(мВремяПрибытияВПункт, СтрокаРаспределения.маршрут[0].Ожидание);
					СтрокаРаспределения.маршрут[0].Ожидание = 0;
				Иначе
					Если СтрокаРаспределения.маршрут[0].Свойство("Ожидание") Тогда
						НовСтрокаГараж.ВремяПрибытияВПункт = СложитьВремя(мВремяПрибытияВПункт, СтрокаРаспределения.маршрут[0].Ожидание);
					Иначе
						НовСтрокаГараж.ВремяПрибытияВПункт = мВремяПрибытияВПункт;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ДобавляемыйПункт Из СтрокаРаспределения.маршрут Цикл 
			Если ДобавляемыйПункт.Свойство("Ожидание") Тогда 
				ОжиданиеПрибытия = ДобавляемыйПункт.Ожидание;
				
			Иначе 
				ОжиданиеПрибытия = 0;
			КонецЕсли;
			
			// {pugili 03.11.2020}
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
				И НастройкаРежимДопланирования 
				И ДобавляемыйПункт.Свойство("МаршрутныйЛистСоздан") И ДобавляемыйПункт.МаршрутныйЛистСоздан Тогда
				// Строка, связанная с заказом, который уже включен в Маршрутный лист
				Если ТекущаяСтрокаПункта <> Неопределено И ТекущаяСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
					Продолжить;
				ИначеЕсли ТекущаяСтрокаПункта <> Неопределено И ТекущаяСтрокаПункта.Группировка <> ДобавляемыйПункт.Адрес Тогда
					// Находим пункт и позиционируемся на нем
					СтрокиПунктов = ТекСтрокаМЛ.ПолучитьЭлементы();
					ИндексПункта = СтрокиПунктов.Индекс(ТекущаяСтрокаПункта);
					Для ТекИндекс = ИндексПункта+1 По СтрокиПунктов.Количество()-1 Цикл
						Если СтрокиПунктов[ТекИндекс].Группировка = ДобавляемыйПункт.Адрес Тогда
							ТекущаяСтрокаПункта = СтрокиПунктов[ТекИндекс];
							Прервать;
						КонецЕсли;               
					КонецЦикла;
					Продолжить;
				Иначе
					// Ошибочная ситуация. В МЛ перед доплнированием был включен заказ, но не был найден его пункт погрузки.
					// Отказываемся от допланирования для этого МЛ.
					Прервать;
				КонецЕсли;
			КонецЕсли;
			// {/pugili 03.11.2020}
			
			СтрокаЗаказа  = Неопределено;
			СтрокиЗаказов = СоответствиеЗаказов.НайтиСтроки(Новый Структура("Заказ", ДобавляемыйПункт.Заказ));
			Если СтрокиЗаказов.Количество() <> 0 Тогда
				Для Каждого ТекСтрока Из СтрокиЗаказов Цикл
					СтрокаЗаказа = ТекСтрока;
					КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
					ДобавляемыйПункт.Заказ, ТекСтрока.Строка);
					
					СтрокаЗаказа = Элементы.ЗаказыСписок.ДанныеСтроки(КлючСтроки);
					
					Если СтрокаЗаказа <> Неопределено Тогда
						Если ЗначениеЗаполнено(ДобавляемыйПункт.Груз)
							И СтрокаЗаказа.Груз <> ДобавляемыйПункт.Груз Тогда
							СтрокаЗаказа = Неопределено;
							Продолжить;
						КонецЕсли;
					
						НомерЗаказа = СтрокаЗаказа.Номер;
						КодГруза    = СтрокаЗаказа.ИдентификаторСтроки;
						ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "",
						"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
						
						ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
						Если ИндексМассива = Неопределено Тогда
							МассивРаспределенныхЗаказов.Добавить(ДанныеИдентификатора);
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦИкла;
			КонецЕсли;
			
			Если СтрокаЗаказа = Неопределено Тогда 
				Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" Тогда
					НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
					НовСтрокаГараж.Группировка                   = ДобавляемыйПункт.Адрес;
					НовСтрокаГараж.Адрес                         = ДобавляемыйПункт.Адрес;
					НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(ДобавляемыйПункт.Адрес, "Лат");
					НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(ДобавляемыйПункт.Адрес, "Лон");
					НовСтрокаГараж.УровеньДерева                 = "Пункт";
					НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
					НовСтрокаГараж.СтоянкаИзПункта               = ДобавляемыйПункт.Стоянка;
					НовСтрокаГараж.Ожидание                      = ОжиданиеПрибытия;
					Если СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
						НовСтрокаГараж.ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
						
					Иначе
						Если СтрокаРаспределения.маршрут[0].Свойство("Ожидание") Тогда 
							НовСтрокаГараж.ВремяПрибытияВПункт = СложитьВремя(мВремяПрибытияВПункт, СтрокаРаспределения.маршрут[0].Ожидание);
							
						Иначе 
							НовСтрокаГараж.ВремяПрибытияВПункт = мВремяПрибытияВПункт;
						КонецЕсли;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Время") Тогда 
						НовСтрокаГараж.ВремяВПути = ДобавляемыйПункт.Время;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Расстояние") Тогда 
						НовСтрокаГараж.Расстояние = ДобавляемыйПункт.Расстояние;
					КонецЕсли;
					НовСтрокаГараж.СтоянкиНеИспользуются = ДобавляемыйПункт.СтоянкиНеИспользуются;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			// Подсчет количества распределенных заказов
			Если ФлагМаршрутизация И НастройкаСохранятьЭтапыМаршрутизации Тогда
				ИспользуемыеЗаказы.Вставить(СтрокаЗаказа.Ссылка, СтрокаЗаказа.Ссылка);
			КонецЕсли;
			
			Если СтрокаЗаказа.FTL Тогда 
				Если ДобавляемыйПункт.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
					// Все пункты по FTL заказу добавляются в точке погрузки.
					Продолжить;
				КонецЕсли;
				
				мсвПромежуточныхПунктов = ПолучитьПромежуточныеПунктыFTLЗаказа(СтрокаЗаказа.Ссылка);
				
				Для Сч = 0 По мсвПромежуточныхПунктов.Количество()-1 Цикл 
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					Если НовСтрокаМЛ.ПолучитьЭлементы().Количество()
						И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						
					Иначе
						НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
						НовСтрокаПункт.Группировка                   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес                         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат                           = ЗначениеРеквизитаОбъекта(СтрокаПромежуточногоПункта.Пункт, "Лат");
						НовСтрокаПункт.Лон                           = ЗначениеРеквизитаОбъекта(СтрокаПромежуточногоПункта.Пункт, "Лон");
						НовСтрокаПункт.УровеньДерева                 = "Пункт";
						НовСтрокаПункт.Ожидание                      = ОжиданиеПрибытия;
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат=0 И НовСтрокаПункт.Лон=0, 1, 0);
					КонецЕсли;
					
					Если НовСтрокаПункт.ПолучитьЭлементы().Количество() 
							И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество()-1].Этап = СтрокаЗаказа.Ссылка
							И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество()-1].Операция = СтрокаПромежуточногоПункта.ТипТочкиМаршрута Тогда 
						НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество()-1];
						
					Иначе 
						НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, СтрокаЗаказа.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута, СтрокаЗаказа, СтрокаПромежуточногоПункта);
						
						Если ДобавляемыйПункт.Свойство("Терминал") Тогда
							НовСтрокаЗаказ.Терминал = ДобавляемыйПункт.Терминал;
							
						ИначеЕсли СтрокаРаспределения.Свойство("Терминал") Тогда 
							НовСтрокаЗаказ.Терминал = СтрокаРаспределения.Терминал;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаЗаказа.Груз) Тогда
						Если ДобавляемыйПункт.Свойство("Груз") Тогда 
							СтрокаГруза = Неопределено;
							Если СтрокаЗаказа.Груз = ДобавляемыйПункт.Груз 
								И (НЕ ДобавляемыйПункт.Свойство("НомерСтроки")
								ИЛИ ДобавляемыйПункт.НомерСтроки = СтрокаЗаказа.НомерСтроки) Тогда
								СтрокаGUID  = "";
								СтрокаГруза = СтрокаЗаказа;
							КонецЕсли;
								
							Если Не СтрокаГруза = Неопределено Тогда 
								НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
								ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "ЦветДокумента");
								
								НовСтрокаНом.Код         = СтрокаГруза.ИдентификаторСтроки;
								НовСтрокаНом.Группировка = СтрокаГруза.Груз;
								НовСтрокаНом.ВесБрутто  = СтрокаГруза.ВесБрутто * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Объем      = СтрокаГруза.Объем * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.КолМест    = СтрокаГруза.КоличествоМест * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Количество = ДобавляемыйПункт.Количество;
								НовСтрокаНом.УровеньДерева = "Номенклатура";
								НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
								НовСтрокаНом.СтрокиЗаказа = СтрокаGUID;

								Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									НовыйGUID = Новый УникальныйИдентификатор();
									НовСтрокаНом.GUID = Строка(НовыйGUID);
								Иначе 
									НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
								КонецЕсли;
								
								Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") И Сч = 0 Тогда 
									Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
										НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
										НовСтрокаСекции.GUIDСтроки = НовыйGUID;
										НовСтрокаСекции.Секция     = ТекСекция.Секция;
										НовСтрокаСекции.Объем      = ТекСекция.Объем;
									КонецЦикла;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "GUID");
							
							НовСтрокаНом.ВесБрутто                     = СтрокаЗаказа.ВесБрутто;
							НовСтрокаНом.Объем                         = СтрокаЗаказа.Объем;
							НовСтрокаНом.КолМест                       = СтрокаЗаказа.КоличествоМест;
							НовСтрокаНом.Количество                    = СтрокаГруза.Количество;
							НовСтрокаНом.УровеньДерева                 = "Номенклатура";
							НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаНом.СтрокиЗаказа = СтрокаGUID;
							
							Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								НовыйGUID = Новый УникальныйИдентификатор();
								НовСтрокаНом.GUID = Строка(НовыйGUID);
							Иначе 
								НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
							КонецЕсли;
							
							Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") И Сч = 0 Тогда 
								Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
									НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
									НовСтрокаСекции.GUIDСтроки = НовыйGUID;
									НовСтрокаСекции.Секция     = ТекСекция.Секция;
									НовСтрокаСекции.Объем      = ТекСекция.Объем;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.GUID) Или НовСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							НовыйGUID = Новый УникальныйИдентификатор();
							НовСтрокаЗаказ.GUID = Строка(НовыйGUID);
						Иначе 
							НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаЗаказ.GUID);
						КонецЕсли;
						
						Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") И Сч = 0 Тогда 
							Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
								НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
								НовСтрокаСекции.GUIDСтроки = НовыйGUID;
								НовСтрокаСекции.Секция     = ТекСекция.Секция;
								НовСтрокаСекции.Объем      = ТекСекция.Объем;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				Если ДобавляемыйПункт.Операция = ТипыТочекМаршрута_Погрузка Тогда 
					Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Или НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
						И РежимМаршрутизации
						И НовСтрокаМЛ.ПолучитьЭлементы().Количество()
						И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = ДобавляемыйПункт.Адрес Тогда
						НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
						Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
							НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
						КонецЕсли;
					ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
						И НастройкаРежимДопланирования 
						И ТекущаяСтрокаПункта <> Неопределено
						И ТекущаяСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
						// Пункт уже есть в маршрутном листе, надо его использовать
						НовСтрокаПункт = ТекущаяСтрокаПункта;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
					ИначеЕсли НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Адрес = СтрокаЗаказа.АдресОтправления Тогда
						НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						
					Иначе
						Если ТекущаяСтрокаПункта <> Неопределено Тогда
							// Проверяем, что следующий пункт - не тот, который нужен для заказа
							СтрокиПунктов = ТекСтрокаМЛ.ПолучитьЭлементы();
							// {pugili 03.11.2020}
							ИндексПункта = СтрокиПунктов.Индекс(ТекущаяСтрокаПункта);
							// {/pugili 03.11.2020}
							Если ИндексПункта+1 < СтрокиПунктов.Количество() 
								И СтрокиПунктов[ИндексПункта+1].Группировка = ДобавляемыйПункт.Адрес Тогда
								НовСтрокаПункт = СтрокиПунктов[ИндексПункта+1];
								НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
							Иначе
								НовСтрокаПункт = СтрокиПунктов.Вставить(ИндексПункта+1);
								НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
							КонецЕсли;               
						Иначе
							НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
							НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
						КонецЕсли;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
							ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP") 
							И РежимМаршрутизации Тогда
							СтруктураАдрес = ЗначенияРеквизитовОбъекта(ДобавляемыйПункт.Адрес, "Наименование, Лат, Лон");
							НовСтрокаПункт.Группировка                   = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Адрес                         = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Лат                           = СтруктураАдрес.Лат;
							НовСтрокаПункт.Лон                           = СтруктураАдрес.Лон;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
							Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
								НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
							КонецЕсли;

						Иначе
							НовСтрокаПункт.Группировка                   = СтрокаЗаказа.АдресОтправления;
							НовСтрокаПункт.Адрес                         = СтрокаЗаказа.АдресОтправления;
							НовСтрокаПункт.Лат                           = СтрокаЗаказа.ЛатОтправления;
							НовСтрокаПункт.Лон                           = СтрокаЗаказа.ЛонОтправления;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = СтрокаЗаказа.АдресОтправленияУказанНаКарте;
						КонецЕсли;
					КонецЕсли;
				
					Если ДобавляемыйПункт.Свойство("Время") Тогда 
						НовСтрокаПункт.ВремяВПути = ДобавляемыйПункт.Время;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Расстояние") Тогда 
						НовСтрокаПункт.Расстояние = ДобавляемыйПункт.Расстояние;
					КонецЕсли;
					
					НовСтрокаЗаказ = Неопределено;
					Для Каждого ТекСтрокаЗаказ Из НовСтрокаПункт.ПолучитьЭлементы() Цикл
						Если ТекСтрокаЗаказ.Этап =  СтрокаЗаказа.Ссылка
							И ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
							НовСтрокаЗаказ = ТекСтрокаЗаказ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НовСтрокаЗаказ = Неопределено Тогда
						НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, СтрокаЗаказа.Ссылка, ТипыТочекМаршрута_Погрузка, СтрокаЗаказа);
						
						Если ДобавляемыйПункт.Свойство("Терминал") Тогда
							НовСтрокаЗаказ.Терминал = ДобавляемыйПункт.Терминал;
							
						ИначеЕсли СтрокаРаспределения.Свойство("Терминал") Тогда 
							НовСтрокаЗаказ.Терминал = СтрокаРаспределения.Терминал;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаЗаказа.Груз) Тогда
						Если ДобавляемыйПункт.Свойство("Груз") Тогда 
							СтрокаГруза = СтрокаЗаказа;
							
							Если Не СтрокаГруза = Неопределено Тогда 
								НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
								ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "ЦветДокумента");
								
								НовСтрокаНом.Код         = СтрокаГруза.ИдентификаторСтроки;
								НовСтрокаНом.Группировка = СтрокаГруза.Груз;
								НовСтрокаНом.ВесБрутто  = СтрокаГруза.ВесБрутто * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Объем      = СтрокаГруза.Объем * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.КолМест    = СтрокаГруза.КоличествоМест * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Количество = ДобавляемыйПункт.Количество;
								НовСтрокаНом.УровеньДерева = "Номенклатура";
								НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
								НовСтрокаНом.СтрокиЗаказа = "";

								Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									НовыйGUID = Новый УникальныйИдентификатор();
									НовСтрокаНом.GUID = Строка(НовыйGUID);
								Иначе 
									НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
								КонецЕсли;
								
								Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") Тогда 
									Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
										НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
										НовСтрокаСекции.GUIDСтроки = НовыйGUID;
										НовСтрокаСекции.Секция     = ТекСекция.Секция;
										НовСтрокаСекции.Объем      = ТекСекция.Объем;
									КонецЦикла;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							НовСтрокаНом = НовСтрокаЗаказ;
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "GUID");
							
							НовСтрокаНом.ВесБрутто                     = СтрокаГруза.ВесБрутто;
							НовСтрокаНом.Объем                         = СтрокаГруза.Объем;
							НовСтрокаНом.КолМест                       = СтрокаГруза.КоличествоМест;
							НовСтрокаНом.Количество                    = СтрокаГруза.Количество;
							НовСтрокаНом.УровеньДерева                 = "Номенклатура";
							НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаНом.СтрокиЗаказа = "";
							
							Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								НовыйGUID = Новый УникальныйИдентификатор();
								НовСтрокаНом.GUID = Строка(НовыйGUID);
							Иначе 
								НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
							КонецЕсли;
							
							Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") Тогда 
								Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
									НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
									НовСтрокаСекции.GUIDСтроки = НовыйGUID;
									НовСтрокаСекции.Секция     = ТекСекция.Секция;
									НовСтрокаСекции.Объем      = ТекСекция.Объем;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.GUID) Или НовСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							НовыйGUID = Новый УникальныйИдентификатор();
							НовСтрокаЗаказ.GUID = Строка(НовыйGUID);
						Иначе 
							НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаЗаказ.GUID);
						КонецЕсли;
						
						Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") Тогда 
							Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
								НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
								НовСтрокаСекции.GUIDСтроки = НовыйGUID;
								НовСтрокаСекции.Секция     = ТекСекция.Секция;
								НовСтрокаСекции.Объем      = ТекСекция.Объем;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ДобавляемыйПункт.Операция = ТипыТочекМаршрута_Разгрузка Тогда
					НовСтрокаМЛЭлементы            = НовСтрокаМЛ.ПолучитьЭлементы();
					НовСтрокаМЛЭлементыКоличество  = НовСтрокаМЛЭлементы.Количество();
					НовСтрокаМЛЭлемент             = НовСтрокаМЛЭлементы[НовСтрокаМЛЭлементыКоличество - 1];
					НовСтрокаМЛЭлементыГруппировка = НовСтрокаМЛЭлемент.Группировка;
					
					АдресНаименование = "";
					Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
						ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
						И НовСтрокаМЛЭлементыКоличество Тогда
						АдресНаименование = ДобавляемыйПункт.Адрес;
					КонецЕсли;
					
					Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
						ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
						И НовСтрокаМЛЭлементыКоличество
						И НовСтрокаМЛЭлементыГруппировка = АдресНаименование Тогда
						НовСтрокаПункт = НовСтрокаМЛЭлемент;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
						Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
							НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
						КонецЕсли;
					ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
						И НастройкаРежимДопланирования
						И ТекущаяСтрокаПункта <> Неопределено
						И ТекущаяСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
						// Пункт уже есть в маршрутном листе, надо его использовать
						НовСтрокаПункт = ТекущаяСтрокаПункта;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
					ИначеЕсли НовСтрокаМЛЭлементыКоличество
						И НовСтрокаМЛЭлементыГруппировка = СтрокаЗаказа.АдресНазначения тогда
						НовСтрокаПункт = НовСтрокаМЛЭлемент;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);

					Иначе
						Если ТекущаяСтрокаПункта <> Неопределено Тогда
							// Проверяем, что следующий пункт - не тот, который нужен для заказа
							СтрокиПунктов = ТекСтрокаМЛ.ПолучитьЭлементы();
							// {pugili 03.11.2020}
							ИндексПункта = СтрокиПунктов.Индекс(ТекущаяСтрокаПункта);
							// {/pugili 03.11.2020}
							Если ИндексПункта+1 < СтрокиПунктов.Количество() 
								И СтрокиПунктов[ИндексПункта+1].Группировка = ДобавляемыйПункт.Адрес Тогда
								НовСтрокаПункт = СтрокиПунктов[ИндексПункта+1];
								НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
							Иначе
								НовСтрокаПункт = СтрокиПунктов.Вставить(ИндексПункта+1);
								НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
							КонецЕсли;               
						Иначе
							НовСтрокаПункт = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
							НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
						КонецЕсли;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
							ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP") 
							И РежимМаршрутизации Тогда
							СтруктураАдрес = ЗначенияРеквизитовОбъекта(ДобавляемыйПункт.Адрес, "Наименование, Лат, Лон");
							НовСтрокаПункт.Группировка                   = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Адрес                         = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Лат                           = СтруктураАдрес.Лат;
							НовСтрокаПункт.Лон                           = СтруктураАдрес.Лон;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
							Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
								НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
							КонецЕсли;

						Иначе
							НовСтрокаПункт.Группировка                   = СтрокаЗаказа.АдресНазначения;
							НовСтрокаПункт.Адрес                         = СтрокаЗаказа.АдресНазначения;
							НовСтрокаПункт.Лат                           = СтрокаЗаказа.ЛатНазначения;
							НовСтрокаПункт.Лон                           = СтрокаЗаказа.ЛонНазначения;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = СтрокаЗаказа.АдресНазначенияУказанНаКарте;
						КонецЕсли;
							
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Время") Тогда 
						НовСтрокаПункт.ВремяВПути = ДобавляемыйПункт.Время;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Расстояние") Тогда 
						НовСтрокаПункт.Расстояние = ДобавляемыйПункт.Расстояние;
					КонецЕсли;
					
					НовСтрокаЗаказ = Неопределено;
					Для Каждого ТекСтрокаЗаказ Из НовСтрокаПункт.ПолучитьЭлементы() Цикл
						Если ТекСтрокаЗаказ.Этап =  СтрокаЗаказа.Ссылка
							И ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
							НовСтрокаЗаказ = ТекСтрокаЗаказ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НовСтрокаЗаказ = Неопределено Тогда
						НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
						ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, СтрокаЗаказа.Ссылка, ТипыТочекМаршрута_Разгрузка, СтрокаЗаказа);
						
						Если ДобавляемыйПункт.Свойство("Терминал") Тогда
							НовСтрокаЗаказ.Терминал = ДобавляемыйПункт.Терминал;
							
						ИначеЕсли СтрокаРаспределения.Свойство("Терминал") Тогда 
							НовСтрокаЗаказ.Терминал = СтрокаРаспределения.Терминал;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаЗаказа.Груз) Тогда
						Если ДобавляемыйПункт.Свойство("Груз") Тогда 
							СтрокаГруза = СтрокаЗаказа;
							
							Если Не СтрокаГруза = Неопределено Тогда 
								НовСтрокаНом = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
								ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "ЦветДокумента");
								
								НовСтрокаНом.Код         = СтрокаГруза.ИдентификаторСтроки;
								НовСтрокаНом.Группировка = СтрокаГруза.Груз;
								НовСтрокаНом.ВесБрутто  = СтрокаГруза.ВесБрутто * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Объем      = СтрокаГруза.Объем * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.КолМест    = СтрокаГруза.КоличествоМест * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Количество = ДобавляемыйПункт.Количество;
								НовСтрокаНом.УровеньДерева = "Номенклатура";
								НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
								НовСтрокаНом.СтрокиЗаказа = "";
								
								Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									НовыйGUID = Новый УникальныйИдентификатор();
									НовСтрокаНом.GUID = Строка(НовыйGUID);
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							НовСтрокаНом = НовСтрокаЗаказ;
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "GUID");
							
							НовСтрокаНом.ВесБрутто                     = СтрокаГруза.ВесБрутто;
							НовСтрокаНом.Объем                         = СтрокаГруза.Объем;
							НовСтрокаНом.КолМест                       = СтрокаГруза.КоличествоМест;
							НовСтрокаНом.Количество                    = СтрокаГруза.Количество;
							НовСтрокаНом.УровеньДерева                 = "Номенклатура";
							НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаНом.СтрокиЗаказа = "";
							Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								НовыйGUID = Новый УникальныйИдентификатор();
								НовСтрокаНом.GUID = Строка(НовыйGUID);
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.GUID) Или НовСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							НовыйGUID = Новый УникальныйИдентификатор();
							НовСтрокаЗаказ.GUID = Строка(НовыйGUID);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
					И НастройкаРежимДопланирования
					И ТекущаяСтрокаПункта <> Неопределено Тогда
					ТекущаяСтрокаПункта = НовСтрокаПункт;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление гаража и склада при распределении по фикс маршрутам
		// {pugili 03.11.2020}
		Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
			АдресСклада = ПолучитьАдрес(СтрокаРаспределения.ПодобранныйМаршрут);
			АдресГаража = ЗначениеРеквизитаОбъекта(СтрокаРаспределения.ТС, "Гараж");
			
			ПринадлежностьТС = ЗначениеРеквизитаОбъекта(СтрокаРаспределения.ТС, "ПринадлежностьТС");
			ВыездИзГаража = ЗначениеЗаполнено(АдресГаража) И (ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") И НастройкаВыездИзГаражаСобственныеТС) Или
				(ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") И НастройкаВыездИзГаражаПривлеченныеТС) Или
				(ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") И НастройкаВыездИзГаражаВиртуальныеТС);
			ВозвратВГараж = ЗначениеЗаполнено(АдресГаража) И (НастройкаВозвратВГаражСобственныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")) Или 
				(НастройкаВозвратВГаражПривлеченныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")) Или 
				(НастройкаВозвратВГаражВиртуальныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
			ВозвратНаСклад = (НастройкаЗаездНаСкладСобственныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")) Или 
				(НастройкаЗаездНаСкладПривлеченныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")) Или 
				(НастройкаЗаездНаСкладВиртуальныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
			
			Если ВыездИзГаража Тогда
				// {pugili 12.11.2020}
				Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[0].Группировка = АдресГаража Тогда
					НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы()[0];
				Иначе
					НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы().Вставить(0);
					НовСтрокаГараж.Группировка                   = АдресГаража;
					НовСтрокаГараж.Адрес                         = АдресГаража;
					НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
					НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
					НовСтрокаГараж.УровеньДерева                 = "Пункт";
					НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
				КонецЕсли;
				НовСтрокаГараж.УбытиеПлан = ВремяВыездаИзГаражаДляРаспределения(АдресГаража, 
					ПолучитьАдрес(СтрокаРаспределения.ПодобранныйМаршрут), СтрокаРаспределения.ВремяВыездаНаМаршрут);
				НовСтрокаГараж.ВремяПрибытияВПункт = НовСтрокаГараж.УбытиеПлан;
				// {/pugili 12.11.2020}
			Иначе
				Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[0].Группировка = АдресСклада Тогда
					НовСтрокаМЛ.ПолучитьЭлементы()[0].УбытиеПлан = СтрокаРаспределения.ВремяВыездаНаМаршрут;
					НовСтрокаМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
				КонецЕсли;
			КонецЕсли;
			
			Если ВозвратНаСклад И ВозвратВГараж И НовСтрокаМЛ.ПолучитьЭлементы().Количество() >= 2 
				И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 2].Группировка = АдресСклада
				И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = АдресГаража Тогда
				НовСтрокаСклада = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 2];
				НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
			Иначе
				Если ВозвратНаСклад Тогда 
					Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = АдресСклада Тогда
						НовСтрокаСклада = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
						
					Иначе
						НовСтрокаСклада = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
						НовСтрокаСклада.Группировка                   = АдресСклада;
						НовСтрокаСклада.Адрес                         = АдресСклада;
						НовСтрокаСклада.Лат                           = ЗначениеРеквизитаОбъекта(АдресСклада, "Лат");
						НовСтрокаСклада.Лон                           = ЗначениеРеквизитаОбъекта(АдресСклада, "Лон");
						НовСтрокаСклада.УровеньДерева                 = "Пункт";
						НовСтрокаСклада.АдресГруппировкаУказанНаКарте = ?(НовСтрокаСклада.Лат=0 И НовСтрокаСклада.Лон=0, 1, 0);
					КонецЕсли;
				КонецЕсли;
				
				Если ВозвратВГараж Тогда 
					Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = АдресГаража Тогда
						НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
						
					Иначе
						НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
						НовСтрокаГараж.Группировка                   = АдресГаража;
						НовСтрокаГараж.Адрес                         = АдресГаража;
						НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
						НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
						НовСтрокаГараж.УровеньДерева                 = "Пункт";
						НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		// {/pugili 03.11.2020}
		
		Если РежимМаршрутизации Тогда 
			Если ((НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Очередей")
					И ((НастройкаЗаездНаСкладСобственныеТС И ЗначениеРеквизитаОбъекта(СтрокаТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"))
					ИЛИ (НастройкаЗаездНаСкладПривлеченныеТС И ЗначениеРеквизитаОбъекта(СтрокаТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"))
					ИЛИ (НастройкаЗаездНаСкладВиртуальныеТС И ЗначениеРеквизитаОбъекта(СтрокаТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное")))) Тогда 
				Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() И НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1].Группировка = АдресГаража Тогда
					НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы()[НовСтрокаМЛ.ПолучитьЭлементы().Количество() - 1];
					
				Иначе
					НовСтрокаГараж = НовСтрокаМЛ.ПолучитьЭлементы().Добавить();
					НовСтрокаГараж.Группировка                   = АдресГаража;
					НовСтрокаГараж.Адрес                         = АдресГаража;
					НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
					НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
					НовСтрокаГараж.УровеньДерева                 = "Пункт";
					НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не РежимМаршрутизации Тогда 
			Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() Тогда 
				СтрокаВыезда = НовСтрокаМЛ.ПолучитьЭлементы()[0];
				
				// {pugili 09.11.2020}
				Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
					СтрокаВыезда.ВремяПрибытияВПункт = ДатаПланирования 
						+ (СтрокаВыезда.ВремяПрибытияВПункт - НачалоДня(СтрокаВыезда.ВремяПрибытияВПункт));
					Если СтрокаРаспределения.Свойство("НочнойМаршрут") И СтрокаРаспределения.НочнойМаршрут Тогда
						СекундВДне = 86400;
						СтрокаВыезда.ВремяПрибытияВПункт = СтрокаВыезда.ВремяПрибытияВПункт - СекундВДне;
					КонецЕсли;
				ИначеЕсли СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
					СтрокаВыезда.ВремяПрибытияВПункт = ДатаПланирования 
						+ (СтрокаРаспределения.ВремяВыездаНаМаршрут - НачалоДня(СтрокаВыезда.ВремяВыездаНаМаршрут));
				Иначе 
					СтрокаВыезда.ВремяПрибытияВПункт = мВремяПрибытияВПункт;
				КонецЕсли;
				// {/pugili 09.11.2020}
			КонецЕсли;
		КонецЕсли;
		
		// {pugili 11.11.2020}
		// Для алгоритма Рарус VRP в режиме работы "Склад-Клиенты" 
		// не учитываются индивидуальные стоянки при погрузке из заказов, только общая стоянка из пункта склада.
		// Поэтому сейчас время старта маршрута уменьшается на эти стоянки, чтобы не было непопаданий во временные окна.
		Если НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" И НастройкаКларкРайтРежимДоставки = 0 Тогда
			Если НовСтрокаМЛ.ПолучитьЭлементы().Количество() Тогда 
				СтоянкаПоЗаказам = 0;
				СтрокаВыезда = НовСтрокаМЛ.ПолучитьЭлементы()[0];
				МассивЗаказов = Новый Массив;
				Для Каждого СтрокаЗаказа Из СтрокаВыезда.ПолучитьЭлементы() Цикл
					МассивЗаказов.Добавить(СтрокаЗаказа.Этап);
				КонецЦикла;
				СоответствиеСтоянок = Новый Соответствие;
				СоответствиеСтоянокВПункте = Новый Соответствие;
				ПолучитьСтоянкиПоЗаказамГрузоотправителей(СоответствиеСтоянок, СоответствиеСтоянокВПункте, МассивЗаказов);
				Для Каждого КлючИЗначение Из СоответствиеСтоянок Цикл
					СтоянкаПоЗаказам = СтоянкаПоЗаказам + уатОбщегоНазначения.уатВремяВСекунды(КлючИЗначение.Значение.Стоянка1);
				КонецЦикла;
				СтрокаВыезда.ВремяПрибытияВПункт = СтрокаВыезда.ВремяПрибытияВПункт - СтоянкаПоЗаказам;
			КонецЕсли;
		КонецЕсли;
		// {/pugili 11.11.2020}
	КонецЦикла;
	
	// Актуализация состояния флага отмеченных.
	//ОбновитьПризнакИспользованиеВДеревеЗаказов(ЗаказыДерево);
	// Подсчет количества распределенных заказов
	Если НастройкаСохранятьЭтапыМаршрутизации И ФлагМаршрутизация Тогда
		КоличествоРаспределенныхЗаказовЭтапМаршрутизации = ИспользуемыеЗаказы.Количество();
	КонецЕсли;

	ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
	
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСерверСписок(РаспределенныеЗаказы, РежимМаршрутизации=Истина,
		ВнешняяМаршрутизация=Ложь, МассивРаспределенныхЗаказов, ОтмеченныеЗаказы, НеПересчитыватьПлановыеДаты = Истина)
	
	мВремяПрибытияВПункт = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	ИспользуемыеЗаказы   = Новый Соответствие(); // Для подсчета количества распределенных заказов (НастройкаСохранятьЭтапыМыршрутизации).
	
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрокаЗаказа Из ОтмеченныеЗаказы Цикл
		МассивЗаказов.Добавить(ТекСтрокаЗаказа.Ссылка);
	КонецЦИкла;
	
	Если НЕ (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
		И НастройкаРежимДопланирования) Тогда
		кэшСписокОтмеченныхЗаказов.Очистить();
	КонецЕсли;
	
	мсвЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
		МассивЗаказов);
	Для Каждого ТекСтрока Из мсвЗаказов Цикл
		НоваяСтрока = кэшСписокОтмеченныхЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	МассивМногорейсовыхТС = Новый Массив();
	Для Каждого СтрокаРаспределения Из РаспределенныеЗаказы Цикл 
		
		Если СтрокаРаспределения.Свойство("Модифицированность") И Не СтрокаРаспределения.Модифицированность Тогда 
			// Маршрутный лист, который не был изменен в ходе допланирования. Никакие действия не требуются.
			Продолжить;
		КонецЕсли;
		
		СтрокаТС = Неопределено;
		ПриоритетСтрокиТС = 5;
		
		GUIDТС = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРаспределения.ТС, "#");
		Для Каждого СтрокаДерева Из МаршрутыСписок Цикл 
			Если (Не ВнешняяМаршрутизация И СтрокаДерева.ТС = СтрокаРаспределения.ТС)
				Или (ВнешняяМаршрутизация И СтрокаДерева.GUID = СтрокаРаспределения.ТСid) Тогда 
				Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
					// Приоритеты поиска среди строк с совпадающим ТС:
					// 1. Строка с заданным ID Маршрутного Листа (допланирование, МЛ в ней будет изменен)
					// 2. Строка без Маршрутного листа с совпадающим маршрутом (новый МЛ будем добавлен в нее)
					// 3. Строка без Маршрутного листа с пустым маршрутом (универсальное ТС; новый МЛ будем добавлен в нее)
					// 4. Строка с Маршрутным листом с совпадающим или пустым маршрутом (строка будет скопирована)
					Если СтрокаРаспределения.Свойство("IDМаршрутногоЛиста") 
						И ЗначениеЗаполнено(СтрокаРаспределения.IDМаршрутногоЛиста) Тогда
						Если СтрокаДерева.GUID = СтрокаРаспределения.IDМаршрутногоЛиста Тогда
							СтрокаТС = СтрокаДерева;
							ПриоритетСтрокиТС = 1;
							Прервать;
						КонецЕсли;
					ИначеЕсли СтрокаДерева.Маршрут = СтрокаРаспределения.ПодобранныйМаршрут
						И Не (ЗначениеЗаполнено(СтрокаДерева.МЛ) ИЛИ СтрокаДерева.НовыйМЛ)
						И ПриоритетСтрокиТС > 2 Тогда
						СтрокаТС = СтрокаДерева;
						ПриоритетСтрокиТС = 2;
					ИначеЕсли Не (ЗначениеЗаполнено(СтрокаДерева.МЛ) ИЛИ СтрокаДерева.НовыйМЛ)
						И ПриоритетСтрокиТС > 3 Тогда
						СтрокаТС = СтрокаДерева;
						ПриоритетСтрокиТС = 3;
					ИначеЕсли ПриоритетСтрокиТС > 4 Тогда
						СтрокаТС = СтрокаДерева;
						ПриоритетСтрокиТС = 4;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "Очередей" Тогда
					// Для алгоритма Очередей всегда создаются Маршрутные листы на пустое ТС.
					// Поэтому выбираться может только строка ТС, для которой нет Маршрутного листа.
					// Это актуально для выбора одного из нескольких виртуальных ТС.
					Если Не (ЗначениеЗаполнено(СтрокаДерева.МЛ) ИЛИ СтрокаДерева.НовыйМЛ) Тогда
						СтрокаТС = СтрокаДерева;
						Прервать;
					КонецЕсли;
				ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Тогда
					// В первую очередь выбираются строки без Маршрутного листа,
					// чтобы не создавались несколько МЛ для одного виртуального ТС.
					Если Не (ЗначениеЗаполнено(СтрокаДерева.МЛ) ИЛИ СтрокаДерева.НовыйМЛ) Тогда
						СтрокаТС = СтрокаДерева;
						Прервать;
					ИначеЕсли СтрокаТС = Неопределено Тогда
						СтрокаТС = СтрокаДерева;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					СтрокаТС = СтрокаДерева;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТС = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРаспределения.маршрут.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтрокаМЛ        = Неопределено;
		ТекущаяСтрокаПункта = Неопределено;
		
		ПолучитьИзВременногоХранилищаТаблицуМаршрутов(СтрокаТС.АдресВременногоХранилища, СтрокаТС.GUID);
		
		Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
			И НастройкаРежимДопланирования Тогда
			МаршрутыСписокЗаказов.Очистить();
		КонецЕсли;
	
		Если СтрокаРаспределения.Свойство("IDМаршрутногоЛиста") 
			И ЗначениеЗаполнено(СтрокаРаспределения.IDМаршрутногоЛиста) Тогда
			Если СтрокаТС.GUID = СтрокаРаспределения.IDМаршрутногоЛиста Тогда
				НовСтрокаМЛ = СтрокаТС;
				Если СтрокаРаспределения.маршрут.Количество() > 0 Тогда
					ПунктОтправленияМаршрута = ПолучитьАдресОтправленияЗаказ(СтрокаРаспределения.маршрут[0]);
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаТС.GUID, "Пункт"));
					Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
						Если ТекСтрокаПункт.Группировка = ПунктОтправленияМаршрута Тогда 
							ТекущаяСтрокаПункта = ТекСтрокаПункт;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
			И НастройкаРежимДопланирования
			И НовСтрокаМЛ = Неопределено 
			И (ЗначениеЗаполнено(СтрокаТС.МЛ) ИЛИ СтрокаТС.НовыйМЛ) Тогда
			
			СтрокаТС.Модифицированность = Истина;
			
			// Нет Маршрутного листа, в который добавлены новые заказы при домаршрутизации. Создается новый.
			НовСтрокаМЛ         = МаршрутыСписок.Вставить(МаршрутыСписок.Индекс(СтрокаТС));
			ЗаполнитьЗначенияСвойств(НовСтрокаМЛ, СтрокаТС,, "ЗатратыНаПеревозку, Секции"); 
			НовСтрокаМЛ.GUID    = Строка(Новый УникальныйИдентификатор);
			НовСтрокаМЛ.МЛ      = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
			НовСтрокаМЛ.НовыйМЛ = Истина;
			НовСтрокаМЛ.ЦветДокумента = 0;
			НовСтрокаМЛ.АдресВременногоХранилища = "";
			
			СтрокаТС = НовСтрокаМЛ;
			
			ПолучитьИзВременногоХранилищаТаблицуМаршрутов(НовСтрокаМЛ.АдресВременногоХранилища, НовСтрокаМЛ.GUID);
		ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
			И НастройкаИспользоватьМногорейсовыеМаршруты
			И (ЗначениеЗаполнено(СтрокаТС.МЛ) ИЛИ СтрокаТС.НовыйМЛ) Тогда
			// Для данного ТС уже есть Маршрутный лист. Создаем новую строку для этого ТС и нового Маршрутного листа.
			// Нет Маршрутного листа, в который добавлены новые заказы при домаршрутизации. Создается новый.
			НовСтрокаМЛ         = МаршрутыСписок.Вставить(МаршрутыСписок.Индекс(СтрокаТС));
			ЗаполнитьЗначенияСвойств(НовСтрокаМЛ, СтрокаТС,, "ЗатратыНаПеревозку, Секции"); 
			НовСтрокаМЛ.GUID    = Строка(Новый УникальныйИдентификатор);
			НовСтрокаМЛ.МЛ      = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
			НовСтрокаМЛ.НовыйМЛ = Истина;
			НовСтрокаМЛ.ЦветДокумента = 0;
			НовСтрокаМЛ.АдресВременногоХранилища = "";
			
			СтрокаТС = НовСтрокаМЛ;
		Иначе
			// Многорейсовый маршрут
			Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
				И (ЗначениеЗаполнено(СтрокаТС.МЛ) ИЛИ СтрокаТС.НовыйМЛ)
				И МассивМногорейсовыхТС.Найти(СтрокаТС.GUID) <> Неопределено Тогда
				НовСтрокаМЛ         = МаршрутыСписок.Вставить(МаршрутыСписок.Индекс(СтрокаТС));
				ЗаполнитьЗначенияСвойств(НовСтрокаМЛ, СтрокаТС,, "ЗатратыНаПеревозку, Секции"); 
				НовСтрокаМЛ.GUID    = Строка(Новый УникальныйИдентификатор);
				НовСтрокаМЛ.МЛ      = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
				НовСтрокаМЛ.НовыйМЛ = Истина;
				НовСтрокаМЛ.ЦветДокумента = 0;
				НовСтрокаМЛ.АдресВременногоХранилища = "";
				
				СтрокаТС = НовСтрокаМЛ;
			КонецЕсли;
			
			Если НЕ (НастройкаРежимДопланирования И НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты")
				И НЕ (НастройкаРежимДопланирования И НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс") Тогда
				СтрокаТС.МЛ  = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
			КонецЕсли;
			СтрокаТС.НовыйМЛ = Истина;
			НовСтрокаМЛ      = СтрокаТС; 
			
			МассивМногорейсовыхТС.Добавить(СтрокаТС.GUID);
			
		КонецЕсли;
		
		НовСтрокаМЛ.СоздатьМаршрутныйЛист = Истина;
		НовСтрокаМЛ.Прицеп1               = СтрокаТС.Прицеп1;
		НовСтрокаМЛ.Прицеп2               = СтрокаТС.Прицеп2;
		НовСтрокаМЛ.Модифицированность    = Истина;
		НовСтрокаМЛ.ПересчетВремени       = СпособПересчетаПлановогоВремениПоУмолчанию;
		
		// Служебный. Признак МЛ созданного в рамках текущего этапа маршрутизации
		Если ФлагМаршрутизация И НастройкаСохранятьЭтапыМаршрутизации Тогда
			СписокМЛТекущийЭтапМаршрутизации.Добавить(НовСтрокаМЛ.GUID);
			НовСтрокаМЛ.ФлагТекущаяМаршрутизация = Истина;
		КонецЕсли;
		
		Если ФлагМаршрутизация И НастройкаУстанавливатьФлагСозданАвтоматическиМЛ Тогда
			НовСтрокаМЛ.СозданАвтоматически = Истина;
		КонецЕсли;
		
		Если СтрокаРаспределения.Свойство("НаправлениеПеревозки") Тогда 
			НовСтрокаМЛ.НаправлениеПеревозки = СтрокаРаспределения.НаправлениеПеревозки;
		КонецЕсли;
		
		Если СтрокаРаспределения.Свойство("ПодобранныйМаршрут") Тогда 
			НовСтрокаМЛ.Маршрут = СтрокаРаспределения.ПодобранныйМаршрут;
		КонецЕсли;
		
		Если РежимМаршрутизации Тогда 
			Если НастройкаИндивидуальныйГаражТС Тогда 
				АдресГаража = ЗначениеРеквизитаОбъекта(СтрокаРаспределения.ТС, "Гараж");
			Иначе
				АдресГаража = НастройкаАдресВыезда;
			КонецЕсли;
			
			Если НастройкаАлгоритмМаршрутизацииСтрока <> "Яндекс"
				И НастройкаАлгоритмМаршрутизацииСтрока <> "RarusVRP" Тогда
				НовСтрокаГараж = МаршрутыСписокЗаказов.Добавить();
				НовСтрокаГараж.GUIDТС                        = СтрокаТС.GUID;
				НовСтрокаГараж.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
				НовСтрокаГараж.Группировка                   = АдресГаража;
				НовСтрокаГараж.Адрес                         = АдресГаража;
				НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
				НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
				НовСтрокаГараж.УровеньДерева                 = "Пункт";
				Если (НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс")
					И СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
					НовСтрокаГараж.ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
					
				ИначеЕсли НастройкаВремяВыездаИзГаража = 0 И СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
					НовСтрокаГараж.ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
					
				ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
					И СтрокаРаспределения.маршрут[0].Свойство("Ожидание") Тогда
					НовСтрокаГараж.ВремяПрибытияВПункт = СложитьВремя(мВремяПрибытияВПункт, СтрокаРаспределения.маршрут[0].Ожидание);
					СтрокаРаспределения.маршрут[0].Ожидание = 0;
				Иначе
					Если СтрокаРаспределения.маршрут[0].Свойство("Ожидание") Тогда
						НовСтрокаГараж.ВремяПрибытияВПункт = СложитьВремя(мВремяПрибытияВПункт, СтрокаРаспределения.маршрут[0].Ожидание);
					Иначе
						НовСтрокаГараж.ВремяПрибытияВПункт = мВремяПрибытияВПункт;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ДобавляемыйПункт Из СтрокаРаспределения.маршрут Цикл 			
			Если ДобавляемыйПункт.Свойство("Ожидание") Тогда 
				ОжиданиеПрибытия = ДобавляемыйПункт.Ожидание;
				
			Иначе 
				ОжиданиеПрибытия = 0;
			КонецЕсли;
			
			// {pugili 03.11.2020}
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
				И НастройкаРежимДопланирования 
				И ДобавляемыйПункт.Свойство("МаршрутныйЛистСоздан") И ДобавляемыйПункт.МаршрутныйЛистСоздан Тогда
				// Строка, связанная с заказом, который уже включен в Маршрутный лист
				Если ТекущаяСтрокаПункта <> Неопределено И ТекущаяСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
					Продолжить;
				ИначеЕсли ТекущаяСтрокаПункта <> Неопределено И ТекущаяСтрокаПункта.Группировка <> ДобавляемыйПункт.Адрес Тогда
					// Находим пункт и позиционируемся на нем
					СтрокиПунктов = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаТС.GUID, "Пункт"));
					ПунктНайден   = Ложь;
					Для Каждого ТекСтрокаПункта Из СтрокиПунктов Цикл
						Если ТекущаяСтрокаПункта.GUIDПункта = ТекСтрокаПункта.GUIDПункта Тогда
							ПунктНайден = Истина;
							Продолжить;
						КонецЕсли;
						Если ПунктНайден И ТекСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
							ТекущаяСтрокаПункта =ТекСтрокаПункта;
							Прервать;
						КонецЕсли;               
					КонецЦикла;
					Продолжить;
				Иначе
					// Ошибочная ситуация. В МЛ перед доплнированием был включен заказ, но не был найден его пункт погрузки.
					// Отказываемся от допланирования для этого МЛ.
					Прервать;
				КонецЕсли;
			КонецЕсли;
			// {/pugili 03.11.2020}
			
			СтрокаЗаказа  = Неопределено;
			СтрокиЗаказов = СоответствиеЗаказов.НайтиСтроки(Новый Структура("Заказ", ДобавляемыйПункт.Заказ));
			Если СтрокиЗаказов.Количество() <> 0 Тогда
				Для Каждого ТекСтрока Из СтрокиЗаказов Цикл
					СтрокаЗаказа = ТекСтрока;
					КлючСтроки = Новый Структура("Ссылка, ИдентификаторСтроки",
					ДобавляемыйПункт.Заказ, ТекСтрока.Строка);
					
					СтрокаЗаказа = кэшСписокОтмеченныхЗаказов.НайтиСтроки(КлючСтроки);
					
					Если СтрокаЗаказа.Количество() <> 0 Тогда
						СтрокаЗаказа = СтрокаЗаказа[0];
						Если ЗначениеЗаполнено(ДобавляемыйПункт.Груз)
							И СтрокаЗаказа.Груз <> ДобавляемыйПункт.Груз Тогда
							СтрокаЗаказа = Неопределено;
							Продолжить;
						КонецЕсли;
					
						НомерЗаказа = СтрокаЗаказа.Номер;
						КодГруза    = СтрокаЗаказа.ИдентификаторСтроки;
						ДанныеИдентификатора = НомерЗаказа + ?(КодГруза = "", "",
						"_" + Формат(КодГруза, "ЧЦ=3; ЧДЦ=0; ЧВН="));
						
						ИндексМассива = МассивРаспределенныхЗаказов.Найти(ДанныеИдентификатора);
						Если ИндексМассива = Неопределено Тогда
							МассивРаспределенныхЗаказов.Добавить(ДанныеИдентификатора);
						КонецЕсли;
						Прервать;
					Иначе
						СтрокаЗаказа = Неопределено;
						Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
							И НастройкаРежимДопланирования  Тогда
							
						КонецЕсли;
					КонецЕсли;
				КонецЦИкла;
			КонецЕсли;
			
			Если СтрокаЗаказа = Неопределено Тогда 
				Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" Тогда
					НовСтрокаГараж = МаршрутыСписокЗаказов.Добавить();
					НовСтрокаГараж.GUIDТС                        = СтрокаТС.GUID;
					НовСтрокаГараж.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
					НовСтрокаГараж.Группировка                   = ДобавляемыйПункт.Адрес;
					НовСтрокаГараж.Адрес                         = ДобавляемыйПункт.Адрес;
					НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(ДобавляемыйПункт.Адрес, "Лат");
					НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(ДобавляемыйПункт.Адрес, "Лон");
					НовСтрокаГараж.УровеньДерева                 = "Пункт";
					НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
					НовСтрокаГараж.СтоянкаИзПункта               = ДобавляемыйПункт.Стоянка;
					НовСтрокаГараж.Ожидание                      = ОжиданиеПрибытия;
					Если СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
						НовСтрокаГараж.ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
						
					Иначе
						Если СтрокаРаспределения.маршрут[0].Свойство("Ожидание") Тогда 
							НовСтрокаГараж.ВремяПрибытияВПункт = СложитьВремя(мВремяПрибытияВПункт, СтрокаРаспределения.маршрут[0].Ожидание);
							
						Иначе 
							НовСтрокаГараж.ВремяПрибытияВПункт = мВремяПрибытияВПункт;
						КонецЕсли;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Время") Тогда 
						НовСтрокаГараж.ВремяВПути = ДобавляемыйПункт.Время;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Расстояние") Тогда 
						НовСтрокаГараж.Расстояние = ДобавляемыйПункт.Расстояние;
					КонецЕсли;
					НовСтрокаГараж.СтоянкиНеИспользуются = ДобавляемыйПункт.СтоянкиНеИспользуются;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			// Подсчет количества распределенных заказов
			Если ФлагМаршрутизация И НастройкаСохранятьЭтапыМаршрутизации Тогда
				ИспользуемыеЗаказы.Вставить(СтрокаЗаказа.Ссылка, СтрокаЗаказа.Ссылка);
			КонецЕсли;
			
			Если СтрокаЗаказа.FTL Тогда 
				Если ДобавляемыйПункт.Операция = ТипыТочекМаршрута_Разгрузка Тогда 
					// Все пункты по FTL заказу добавляются в точке погрузки.
					Продолжить;
				КонецЕсли;
				
				мсвПромежуточныхПунктов = ПолучитьПромежуточныеПунктыFTLЗаказа(СтрокаЗаказа.Ссылка);
				
				Для Сч = 0 По мсвПромежуточныхПунктов.Количество()-1 Цикл 
					СтрокаПромежуточногоПункта = мсвПромежуточныхПунктов[Сч];
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаТС.GUID, "Пункт"));
					Если ЭлементыВеткаПункты.Количество()
						И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = СтрокаПромежуточногоПункта.Пункт Тогда
						НовСтрокаПункт = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						
					Иначе
						НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаПункт.GUIDТС                        = СтрокаТС.GUID;
						НовСтрокаПункт.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						НовСтрокаПункт.Группировка                   = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Адрес                         = СтрокаПромежуточногоПункта.Пункт;
						НовСтрокаПункт.Лат                           = ЗначениеРеквизитаОбъекта(СтрокаПромежуточногоПункта.Пункт, "Лат");
						НовСтрокаПункт.Лон                           = ЗначениеРеквизитаОбъекта(СтрокаПромежуточногоПункта.Пункт, "Лон");
						НовСтрокаПункт.УровеньДерева                 = "Пункт";
						НовСтрокаПункт.Ожидание                      = ОжиданиеПрибытия;
						НовСтрокаПункт.АдресГруппировкаУказанНаКарте = ?(НовСтрокаПункт.Лат=0 И НовСтрокаПункт.Лон=0, 1, 0);
					КонецЕсли;
					
					ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
					СтрокаТС.GUID, НовСтрокаПункт.GUIDПункта, "Заказ"));
					Если ЭлементыВеткаЗаказ.Количество() 
							И ЭлементыВеткаЗаказ[ЭлементыВеткаЗаказ.Количество()-1].Этап = СтрокаЗаказа.Ссылка
							И ЭлементыВеткаЗаказ[ЭлементыВеткаЗаказ.Количество()-1].Операция = СтрокаПромежуточногоПункта.ТипТочкиМаршрута Тогда 
						НовСтрокаЗаказ = ЭлементыВеткаЗаказ[ЭлементыВеткаЗаказ.Количество()-1];
						
					Иначе 
						НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
						ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, СтрокаЗаказа.Ссылка, СтрокаПромежуточногоПункта.ТипТочкиМаршрута, СтрокаЗаказа, СтрокаПромежуточногоПункта);
						НовСтрокаЗаказ.GUIDТС     = СтрокаТС.GUID;
						НовСтрокаЗаказ.GUIDПункта = НовСтрокаПункт.GUIDПункта;
						НовСтрокаЗаказ.GUIDЗаказа = Строка(Новый УникальныйИдентификатор);

						Если ДобавляемыйПункт.Свойство("Терминал") Тогда
							НовСтрокаЗаказ.Терминал = ДобавляемыйПункт.Терминал;
							
						ИначеЕсли СтрокаРаспределения.Свойство("Терминал") Тогда 
							НовСтрокаЗаказ.Терминал = СтрокаРаспределения.Терминал;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаЗаказа.Груз) Тогда
						Если ДобавляемыйПункт.Свойство("Груз") Тогда 
							СтрокаГруза = Неопределено;
							Если СтрокаЗаказа.Груз = ДобавляемыйПункт.Груз 
								И (НЕ ДобавляемыйПункт.Свойство("НомерСтроки")
								ИЛИ ДобавляемыйПункт.НомерСтроки = СтрокаЗаказа.НомерСтроки) Тогда
								СтрокаGUID  = "";
								СтрокаГруза = СтрокаЗаказа;
							КонецЕсли;
								
							Если Не СтрокаГруза = Неопределено Тогда 
								НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
								ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "ЦветДокумента");
								НовСтрокаНом.GUIDТС     = СтрокаТС.GUID;
								НовСтрокаНом.GUIDПункта = НовСтрокаПункт.GUIDПункта;
								НовСтрокаНом.GUIDЗаказа = НовСтрокаЗаказ.GUIDЗаказа;
								
								НовСтрокаНом.Этап        = НовСтрокаЗаказ.Этап;
								НовСтрокаНом.Код         = СтрокаГруза.ИдентификаторСтроки;
								НовСтрокаНом.Группировка = СтрокаГруза.Груз;
								НовСтрокаНом.ВесБрутто  = СтрокаГруза.ВесБрутто * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Объем      = СтрокаГруза.Объем * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.КолМест    = СтрокаГруза.КоличествоМест * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Количество = ДобавляемыйПункт.Количество;
								НовСтрокаНом.УровеньДерева = "Номенклатура";
								НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
								НовСтрокаНом.СтрокиЗаказа = СтрокаGUID;

								Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									НовыйGUID = Новый УникальныйИдентификатор();
									НовСтрокаНом.GUID = Строка(НовыйGUID);
								Иначе 
									НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
								КонецЕсли;
								
								Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") И Сч = 0 Тогда 
									Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
										НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
										НовСтрокаСекции.GUIDСтроки = НовыйGUID;
										НовСтрокаСекции.Секция     = ТекСекция.Секция;
										НовСтрокаСекции.Объем      = ТекСекция.Объем;
									КонецЦикла;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "GUID");
							НовСтрокаНом.GUIDТС     = СтрокаТС.GUID;
							НовСтрокаНом.GUIDПункта = НовСтрокаПункт.GUIDПункта;
							НовСтрокаНом.GUIDЗаказа = НовСтрокаЗаказ.GUIDЗаказа;
							
							НовСтрокаНом.ВесБрутто                     = СтрокаЗаказа.ВесБрутто;
							НовСтрокаНом.Объем                         = СтрокаЗаказа.Объем;
							НовСтрокаНом.КолМест                       = СтрокаЗаказа.КоличествоМест;
							НовСтрокаНом.Количество                    = СтрокаГруза.Количество;
							НовСтрокаНом.УровеньДерева                 = "Номенклатура";
							НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаНом.СтрокиЗаказа = СтрокаGUID;
							
							Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								НовыйGUID = Новый УникальныйИдентификатор();
								НовСтрокаНом.GUID = Строка(НовыйGUID);
							Иначе 
								НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
							КонецЕсли;
							
							Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") И Сч = 0 Тогда 
								Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
									НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
									НовСтрокаСекции.GUIDСтроки = НовыйGUID;
									НовСтрокаСекции.Секция     = ТекСекция.Секция;
									НовСтрокаСекции.Объем      = ТекСекция.Объем;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.GUID) Или НовСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							НовыйGUID = Новый УникальныйИдентификатор();
							НовСтрокаЗаказ.GUID = Строка(НовыйGUID);
						Иначе 
							НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаЗаказ.GUID);
						КонецЕсли;
						
						Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") И Сч = 0 Тогда 
							Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
								НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
								НовСтрокаСекции.GUIDСтроки = НовыйGUID;
								НовСтрокаСекции.Секция     = ТекСекция.Секция;
								НовСтрокаСекции.Объем      = ТекСекция.Объем;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаТС.GUID, "Пункт"));
				Если ДобавляемыйПункт.Операция = ТипыТочекМаршрута_Погрузка Тогда 
					Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
						ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
						И РежимМаршрутизации
						И ЭлементыВеткаПункты.Количество()
						И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = ДобавляемыйПункт.Адрес Тогда
						НовСтрокаПункт = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
						Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
							НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
						КонецЕсли;
					ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
						И НастройкаРежимДопланирования 
						И ТекущаяСтрокаПункта <> Неопределено
						И ТекущаяСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
						// Пункт уже есть в маршрутном листе, надо его использовать
						НовСтрокаПункт = ТекущаяСтрокаПункта;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
					ИначеЕсли ЭлементыВеткаПункты.Количество() И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Адрес = СтрокаЗаказа.АдресОтправления Тогда
						НовСтрокаПункт = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						
					Иначе
						Если ТекущаяСтрокаПункта <> Неопределено Тогда
							// Проверяем, что следующий пункт - не тот, который нужен для заказа
							СтрокиПунктов = ЭлементыВеткаПункты;
							// {pugili 03.11.2020}
							ИндексПункта  = 0;
							Для Каждого ТекСтрока Из СтрокиПунктов Цикл
								Если ТекСтрока = ТекущаяСтрокаПункта Тогда
									Прервать;
								КонецЕсли;
								ИндексПункта = ИндексПункта + 1;
							КонецЦИкла;

							Если ИндексПункта+1 < СтрокиПунктов.Количество() 
								И СтрокиПунктов[ИндексПункта+1].Группировка = ДобавляемыйПункт.Адрес Тогда
								НовСтрокаПункт = СтрокиПунктов[ИндексПункта+1];
								НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
							Иначе
								НовСтрокаПункт = МаршрутыСписокЗаказов.Вставить(ИндексПункта + 1);
								НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
							КонецЕсли;               
						Иначе
							НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаПункт.GUIDТС     = СтрокаТС.GUID;
							НовСтрокаПункт.GUIDПункта = Строка(Новый УникальныйИдентификатор);
							НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
						КонецЕсли;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
							ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP") 
							И РежимМаршрутизации Тогда
							СтруктураАдрес = ЗначенияРеквизитовОбъекта(ДобавляемыйПункт.Адрес, "Наименование, Лат, Лон");
							НовСтрокаПункт.Группировка                   = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Адрес                         = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Лат                           = СтруктураАдрес.Лат;
							НовСтрокаПункт.Лон                           = СтруктураАдрес.Лон;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
							Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
								НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
							КонецЕсли;

						Иначе
							НовСтрокаПункт.Группировка                   = СтрокаЗаказа.АдресОтправления;
							НовСтрокаПункт.Адрес                         = СтрокаЗаказа.АдресОтправления;
							НовСтрокаПункт.Лат                           = СтрокаЗаказа.ЛатОтправления;
							НовСтрокаПункт.Лон                           = СтрокаЗаказа.ЛонОтправления;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = СтрокаЗаказа.АдресОтправленияУказанНаКарте;
						КонецЕсли;
					КонецЕсли;
				
					Если ДобавляемыйПункт.Свойство("Время") Тогда 
						НовСтрокаПункт.ВремяВПути = ДобавляемыйПункт.Время;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Расстояние") Тогда 
						НовСтрокаПункт.Расстояние = ДобавляемыйПункт.Расстояние;
					КонецЕсли;
					
					ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
					СтрокаТС.GUID, НовСтрокаПункт.GUIDПункта, "Заказ"));
					
					НовСтрокаЗаказ = Неопределено;
					Для Каждого ТекСтрокаЗаказ Из ЭлементыВеткаЗаказ Цикл
						Если ТекСтрокаЗаказ.Этап = СтрокаЗаказа.Ссылка
							И ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Погрузка Тогда
							НовСтрокаЗаказ = ТекСтрокаЗаказ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НовСтрокаЗаказ = Неопределено Тогда
						НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
						ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, СтрокаЗаказа.Ссылка, ТипыТочекМаршрута_Погрузка, СтрокаЗаказа);
						НовСтрокаЗаказ.GUIDТС                = СтрокаТС.GUID;
						НовСтрокаЗаказ.GUIDПункта            = НовСтрокаПункт.GUIDПункта;
						НовСтрокаЗаказ.GUIDЗаказа            = Строка(Новый УникальныйИдентификатор);
						Если ДобавляемыйПункт.Свойство("Терминал") Тогда
							НовСтрокаЗаказ.Терминал = ДобавляемыйПункт.Терминал;
							
						ИначеЕсли СтрокаРаспределения.Свойство("Терминал") Тогда 
							НовСтрокаЗаказ.Терминал = СтрокаРаспределения.Терминал;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаЗаказа.Груз) Тогда
						Если ДобавляемыйПункт.Свойство("Груз") Тогда 
							СтрокаГруза = СтрокаЗаказа;
							
							Если Не СтрокаГруза = Неопределено Тогда 
								НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
								ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "ЦветДокумента");
								НовСтрокаНом.GUIDТС                = СтрокаТС.GUID;
								НовСтрокаНом.GUIDПункта            = НовСтрокаПункт.GUIDПункта;
								НовСтрокаНом.GUIDЗаказа            = НовСтрокаЗаказ.GUIDЗаказа;

								НовСтрокаНом.ЕдиницаИзмерения = СтрокаГруза.ЕдиницаИзмерения;
								НовСтрокаНом.Этап        = НовСтрокаЗаказ.Этап;
								НовСтрокаНом.Код         = СтрокаГруза.ИдентификаторСтроки;
								НовСтрокаНом.Группировка = СтрокаГруза.Груз;
								НовСтрокаНом.ВесБрутто  = СтрокаГруза.ВесБрутто * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Объем      = СтрокаГруза.Объем * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.КолМест    = СтрокаГруза.КоличествоМест * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Количество = ДобавляемыйПункт.Количество;
								НовСтрокаНом.УровеньДерева = "Номенклатура";
								НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
								НовСтрокаНом.СтрокиЗаказа = "";

								Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									НовыйGUID = Новый УникальныйИдентификатор();
									НовСтрокаНом.GUID = Строка(НовыйGUID);
								Иначе 
									НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
								КонецЕсли;
								
								Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") Тогда 
									Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
										НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
										НовСтрокаСекции.GUIDСтроки = НовыйGUID;
										НовСтрокаСекции.Секция     = ТекСекция.Секция;
										НовСтрокаСекции.Объем      = ТекСекция.Объем;
									КонецЦикла;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							НовСтрокаНом = НовСтрокаЗаказ;
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "GUID");
							
							НовСтрокаНом.ЕдиницаИзмерения              = СтрокаГруза.ЕдиницаИзмерения;
							НовСтрокаНом.ВесБрутто                     = СтрокаГруза.ВесБрутто;
							НовСтрокаНом.Объем                         = СтрокаГруза.Объем;
							НовСтрокаНом.КолМест                       = СтрокаГруза.КоличествоМест;
							НовСтрокаНом.Количество                    = СтрокаГруза.Количество;
							НовСтрокаНом.УровеньДерева                 = "Номенклатура";
							НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаНом.СтрокиЗаказа = "";
							
							Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								НовыйGUID = Новый УникальныйИдентификатор();
								НовСтрокаНом.GUID = Строка(НовыйGUID);
							Иначе 
								НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаНом.GUID);
							КонецЕсли;
							
							Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") Тогда 
								Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
									НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
									НовСтрокаСекции.GUIDСтроки = НовыйGUID;
									НовСтрокаСекции.Секция     = ТекСекция.Секция;
									НовСтрокаСекции.Объем      = ТекСекция.Объем;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.GUID) Или НовСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							НовыйGUID = Новый УникальныйИдентификатор();
							НовСтрокаЗаказ.GUID = Строка(НовыйGUID);
						Иначе 
							НовыйGUID = Новый УникальныйИдентификатор(НовСтрокаЗаказ.GUID);
						КонецЕсли;
						
						Если ДобавляемыйПункт.Свойство("СекцииПоЗаказу") Тогда 
							Для Каждого ТекСекция Из ДобавляемыйПункт.СекцииПоЗаказу Цикл 
								НовСтрокаСекции = НовСтрокаМЛ.Секции.Добавить();
								НовСтрокаСекции.GUIDСтроки = НовыйGUID;
								НовСтрокаСекции.Секция     = ТекСекция.Секция;
								НовСтрокаСекции.Объем      = ТекСекция.Объем;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ДобавляемыйПункт.Операция = ТипыТочекМаршрута_Разгрузка Тогда
					НовСтрокаМЛЭлементы            = ЭлементыВеткаПункты;
					НовСтрокаМЛЭлементыКоличество  = НовСтрокаМЛЭлементы.Количество();
					НовСтрокаМЛЭлемент             = НовСтрокаМЛЭлементы[НовСтрокаМЛЭлементыКоличество - 1];
					НовСтрокаМЛЭлементыГруппировка = НовСтрокаМЛЭлемент.Группировка;
					
					АдресНаименование = "";
					Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
						И НовСтрокаМЛЭлементыКоличество Тогда
						АдресНаименование = ЗначениеРеквизитаОбъекта(ДобавляемыйПункт.Адрес, "Наименование");
					КонецЕсли;
					
					Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
						И НовСтрокаМЛЭлементыКоличество
						И НовСтрокаМЛЭлементыГруппировка = ДобавляемыйПункт.Адрес Тогда
						НовСтрокаПункт = НовСтрокаМЛЭлемент;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
						НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
						Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
							НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
						КонецЕсли;
					ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
						И НастройкаРежимДопланирования
						И ТекущаяСтрокаПункта <> Неопределено
						И ТекущаяСтрокаПункта.Группировка = ДобавляемыйПункт.Адрес Тогда
						// Пункт уже есть в маршрутном листе, надо его использовать
						НовСтрокаПункт = ТекущаяСтрокаПункта;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
					ИначеЕсли НовСтрокаМЛЭлементыКоличество
						И НовСтрокаМЛЭлементыГруппировка = СтрокаЗаказа.АдресНазначения тогда
						НовСтрокаПункт = НовСтрокаМЛЭлемент;
						НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);

					Иначе
						Если ТекущаяСтрокаПункта <> Неопределено Тогда
							// Проверяем, что следующий пункт - не тот, который нужен для заказа
							СтрокиПунктов = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаТС.GUID, "Пункт"));
							ИндексПункта  = 0;
							ТекИндексПункта = МаршрутыСписокЗаказов.Индекс(ТекущаяСтрокаПункта);
							Для Каждого ТекСтрока Из СтрокиПунктов Цикл
								Если ТекСтрока = ТекущаяСтрокаПункта Тогда
									Прервать;
								КонецЕсли;
								ИндексПункта = ИндексПункта + 1;
							КонецЦИкла;
							// {pugili 03.11.2020}
									// {/pugili 03.11.2020}
							Если ИндексПункта+1 < СтрокиПунктов.Количество() 
								И СтрокиПунктов[ИндексПункта+1].Группировка = ДобавляемыйПункт.Адрес Тогда
								НовСтрокаПункт = СтрокиПунктов[ИндексПункта+1];
								НовСтрокаПункт.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(НовСтрокаПункт.Ожидание, ОжиданиеПрибытия);
							Иначе
								НовСтрокаПункт = МаршрутыСписокЗаказов.Вставить(ТекИндексПункта + 1);
								НовСтрокаПункт.GUIDТС        = СтрокаТС.GUID;
								НовСтрокаПункт.GUIDПункта    = Строка(Новый УникальныйИдентификатор);
								НовСтрокаПункт.Ожидание = ОжиданиеПрибытия;
							КонецЕсли;               
						Иначе
							НовСтрокаПункт = МаршрутыСписокЗаказов.Добавить();
							НовСтрокаПункт.GUIDТС        = СтрокаТС.GUID;
							НовСтрокаПункт.GUIDПункта    = Строка(Новый УникальныйИдентификатор);
							НовСтрокаПункт.Ожидание      = ОжиданиеПрибытия;
						КонецЕсли;
						НовСтрокаПункт.УровеньДерева = "Пункт";
						Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Или НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP") 
							И РежимМаршрутизации Тогда
							СтруктураАдрес = ЗначенияРеквизитовОбъекта(ДобавляемыйПункт.Адрес, "Наименование, Лат, Лон");
							НовСтрокаПункт.Группировка                   = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Адрес                         = ДобавляемыйПункт.Адрес;
							НовСтрокаПункт.Лат                           = СтруктураАдрес.Лат;
							НовСтрокаПункт.Лон                           = СтруктураАдрес.Лон;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаПункт.СтоянкиНеИспользуются         = ДобавляемыйПункт.СтоянкиНеИспользуются;
							Если НовСтрокаПункт.СтоянкиНеИспользуются Тогда
								НовСтрокаПункт.СтоянкаИзПункта = ДобавляемыйПункт.Стоянка;
							КонецЕсли;

						Иначе
							НовСтрокаПункт.Группировка                   = СтрокаЗаказа.АдресНазначения;
							НовСтрокаПункт.Адрес                         = СтрокаЗаказа.АдресНазначения;
							НовСтрокаПункт.Лат                           = СтрокаЗаказа.ЛатНазначения;
							НовСтрокаПункт.Лон                           = СтрокаЗаказа.ЛонНазначения;
							НовСтрокаПункт.АдресГруппировкаУказанНаКарте = СтрокаЗаказа.АдресНазначенияУказанНаКарте;
						КонецЕсли;
							
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Время") Тогда 
						НовСтрокаПункт.ВремяВПути = ДобавляемыйПункт.Время;
					КонецЕсли;
					
					Если ДобавляемыйПункт.Свойство("Расстояние") Тогда 
						НовСтрокаПункт.Расстояние = ДобавляемыйПункт.Расстояние;
					КонецЕсли;
					ПредGUIDПункта = НовСтрокаПункт.GUIDПункта;
					
					ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
					СтрокаТС.GUID, НовСтрокаПункт.GUIDПункта, "Заказ"));
					
					НовСтрокаЗаказ = Неопределено;
					Для Каждого ТекСтрокаЗаказ Из ЭлементыВеткаЗаказ Цикл
						Если ТекСтрокаЗаказ.Этап = СтрокаЗаказа.Ссылка
							И ТекСтрокаЗаказ.Операция = ТипыТочекМаршрута_Разгрузка Тогда
							НовСтрокаЗаказ = ТекСтрокаЗаказ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НовСтрокаЗаказ = Неопределено Тогда
						НовСтрокаЗаказ = МаршрутыСписокЗаказов.Добавить();
						ЗаполнитьСтрокуЗаказВМаршрутах(НовСтрокаЗаказ, СтрокаЗаказа.Ссылка, ТипыТочекМаршрута_Разгрузка, СтрокаЗаказа);
						НовСтрокаЗаказ.GUIDТС                = СтрокаТС.GUID;
						НовСтрокаЗаказ.GUIDПункта            = НовСтрокаПункт.GUIDПункта;
						НовСтрокаЗаказ.GUIDЗаказа            = Строка(Новый УникальныйИдентификатор);
						
						Если ДобавляемыйПункт.Свойство("Терминал") Тогда
							НовСтрокаЗаказ.Терминал = ДобавляемыйПункт.Терминал;
							
						ИначеЕсли СтрокаРаспределения.Свойство("Терминал") Тогда 
							НовСтрокаЗаказ.Терминал = СтрокаРаспределения.Терминал;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаЗаказа.Груз) Тогда
						Если ДобавляемыйПункт.Свойство("Груз") Тогда 
							СтрокаГруза = СтрокаЗаказа;
							
							Если Не СтрокаГруза = Неопределено Тогда 
								НовСтрокаНом = МаршрутыСписокЗаказов.Добавить();
								ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "ЦветДокумента");
								НовСтрокаНом.GUIDТС                = СтрокаТС.GUID;
								НовСтрокаНом.GUIDПункта            = НовСтрокаПункт.GUIDПункта;
								НовСтрокаНом.GUIDЗаказа            = НовСтрокаЗаказ.GUIDЗаказа;

								НовСтрокаНом.ЕдиницаИзмерения = СтрокаГруза.ЕдиницаИзмерения;
								НовСтрокаНом.Этап        = НовСтрокаЗаказ.Этап;
								НовСтрокаНом.Код         = СтрокаГруза.ИдентификаторСтроки;
								НовСтрокаНом.Группировка = СтрокаГруза.Груз;
								НовСтрокаНом.ВесБрутто  = СтрокаГруза.ВесБрутто * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Объем      = СтрокаГруза.Объем * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.КолМест    = СтрокаГруза.КоличествоМест * ДобавляемыйПункт.Количество / СтрокаГруза.Количество;
								НовСтрокаНом.Количество = ДобавляемыйПункт.Количество;
								НовСтрокаНом.УровеньДерева = "Номенклатура";
								НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
								НовСтрокаНом.СтрокиЗаказа = "";
								
								Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
									НовыйGUID = Новый УникальныйИдентификатор();
									НовСтрокаНом.GUID = Строка(НовыйGUID);
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							НовСтрокаНом = НовСтрокаЗаказ;
							ЗаполнитьЗначенияСвойств(НовСтрокаНом, СтрокаГруза,, "GUID");
							
							НовСтрокаНом.ЕдиницаИзмерения              = СтрокаГруза.ЕдиницаИзмерения;
							НовСтрокаНом.ВесБрутто                     = СтрокаГруза.ВесБрутто;
							НовСтрокаНом.Объем                         = СтрокаГруза.Объем;
							НовСтрокаНом.КолМест                       = СтрокаГруза.КоличествоМест;
							НовСтрокаНом.Количество                    = СтрокаГруза.Количество;
							НовСтрокаНом.УровеньДерева                 = "Номенклатура";
							НовСтрокаНом.АдресГруппировкаУказанНаКарте = 0;
							НовСтрокаНом.СтрокиЗаказа = "";
							Если Не ЗначениеЗаполнено(НовСтрокаНом.GUID) Или НовСтрокаНом.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
								НовыйGUID = Новый УникальныйИдентификатор();
								НовСтрокаНом.GUID = Строка(НовыйGUID);
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						Если Не ЗначениеЗаполнено(НовСтрокаЗаказ.GUID) Или НовСтрокаЗаказ.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							НовыйGUID = Новый УникальныйИдентификатор();
							НовСтрокаЗаказ.GUID = Строка(НовыйGUID);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
					И НастройкаРежимДопланирования
					И ТекущаяСтрокаПункта <> Неопределено Тогда
					ТекущаяСтрокаПункта = НовСтрокаПункт;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление гаража и склада при распределении по фикс маршрутам
		// {pugili 03.11.2020}
		ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
		Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
			АдресСклада = ПолучитьАдрес(СтрокаРаспределения.ПодобранныйМаршрут);
			АдресГаража = ЗначениеРеквизитаОбъекта(СтрокаРаспределения.ТС, "Гараж");
			
			ПринадлежностьТС = ЗначениеРеквизитаОбъекта(СтрокаРаспределения.ТС, "ПринадлежностьТС");
			ВыездИзГаража = ЗначениеЗаполнено(АдресГаража) И (ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") И НастройкаВыездИзГаражаСобственныеТС) Или
				(ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") И НастройкаВыездИзГаражаПривлеченныеТС) Или
				(ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") И НастройкаВыездИзГаражаВиртуальныеТС);
			ВозвратВГараж = ЗначениеЗаполнено(АдресГаража) И (НастройкаВозвратВГаражСобственныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")) Или 
				(НастройкаВозвратВГаражПривлеченныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")) Или 
				(НастройкаВозвратВГаражВиртуальныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
			ВозвратНаСклад = (НастройкаЗаездНаСкладСобственныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")) Или 
				(НастройкаЗаездНаСкладПривлеченныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")) Или 
				(НастройкаЗаездНаСкладВиртуальныеТС И ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
				
			Если ВыездИзГаража Тогда
				// {pugili 12.11.2020}
				Если ЭлементыВеткаПункты.Количество()
					И ЭлементыВеткаПункты[0].Группировка = АдресГаража Тогда
					НовСтрокаГараж = МаршрутыСписокЗаказов[0];
				Иначе
					НовСтрокаГараж = МаршрутыСписокЗаказов.Вставить(0);
					НовСтрокаГараж.GUIDТС                        = НовСтрокаМЛ.GUID;
					НовСтрокаГараж.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
					НовСтрокаГараж.Группировка                   = АдресГаража;
					НовСтрокаГараж.Адрес                         = АдресГаража;
					НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
					НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
					НовСтрокаГараж.УровеньДерева                 = "Пункт";
					НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
				КонецЕсли;
				НовСтрокаГараж.УбытиеПлан = ВремяВыездаИзГаражаДляРаспределения(АдресГаража, 
					ПолучитьАдрес(СтрокаРаспределения.ПодобранныйМаршрут), СтрокаРаспределения.ВремяВыездаНаМаршрут);
				НовСтрокаГараж.ВремяПрибытияВПункт = НовСтрокаГараж.УбытиеПлан;
				// {/pugili 12.11.2020}
			Иначе
				Если ЭлементыВеткаПункты.Количество()
					И ЭлементыВеткаПункты[0].Группировка = АдресСклада Тогда
					ЭлементыВеткаПункты[0].УбытиеПлан = СтрокаРаспределения.ВремяВыездаНаМаршрут;
					ЭлементыВеткаПункты[0].ВремяПрибытияВПункт = СтрокаРаспределения.ВремяВыездаНаМаршрут;
				КонецЕсли;
			КонецЕсли;
			
			Если ВозвратНаСклад И ВозвратВГараж И ЭлементыВеткаПункты.Количество() >= 2 
				И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 2].Группировка = АдресСклада
				И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = АдресГаража Тогда
				НовСтрокаСклада = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 2];
				НовСтрокаГараж  = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
			Иначе
				Если ВозвратНаСклад Тогда 
					Если ЭлементыВеткаПункты.Количество() И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = АдресСклада Тогда
						НовСтрокаСклада = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
						
					Иначе
						НовСтрокаСклада = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаСклада.GUIDТС                        = НовСтрокаМЛ.GUID;
						НовСтрокаСклада.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						НовСтрокаСклада.Группировка                   = АдресСклада;
						НовСтрокаСклада.Адрес                         = АдресСклада;
						НовСтрокаСклада.Лат                           = ЗначениеРеквизитаОбъекта(АдресСклада, "Лат");
						НовСтрокаСклада.Лон                           = ЗначениеРеквизитаОбъекта(АдресСклада, "Лон");
						НовСтрокаСклада.УровеньДерева                 = "Пункт";
						НовСтрокаСклада.АдресГруппировкаУказанНаКарте = ?(НовСтрокаСклада.Лат=0 И НовСтрокаСклада.Лон=0, 1, 0);
						
						ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
					КонецЕсли;
				КонецЕсли;
				
				Если ВозвратВГараж Тогда 
					Если ЭлементыВеткаПункты.Количество() И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = АдресГаража Тогда
						НовСтрокаГараж = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
						
					Иначе
						НовСтрокаГараж = МаршрутыСписокЗаказов.Добавить();
						НовСтрокаГараж.GUIDТС                        = НовСтрокаМЛ.GUID;
						НовСтрокаГараж.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
						НовСтрокаГараж.Группировка                   = АдресГаража;
						НовСтрокаГараж.Адрес                         = АдресГаража;
						НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
						НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
						НовСтрокаГараж.УровеньДерева                 = "Пункт";
						НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
						
						ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		// {/pugili 03.11.2020}
		
		Если РежимМаршрутизации Тогда 
			Если ((НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Очередей")
					И ((НастройкаЗаездНаСкладСобственныеТС И ЗначениеРеквизитаОбъекта(СтрокаТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"))
					Или (НастройкаЗаездНаСкладПривлеченныеТС И ЗначениеРеквизитаОбъекта(СтрокаТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"))
					Или (НастройкаЗаездНаСкладВиртуальныеТС И ЗначениеРеквизитаОбъекта(СтрокаТС.ТС, "ПринадлежностьТС") = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное")))) Тогда 
				Если ЭлементыВеткаПункты.Количество() И ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1].Группировка = АдресГаража Тогда
					НовСтрокаГараж = ЭлементыВеткаПункты[ЭлементыВеткаПункты.Количество() - 1];
					
				Иначе
					НовСтрокаГараж = МаршрутыСписокЗаказов.Добавить();
					НовСтрокаГараж.GUIDТС                        = СтрокаТС.GUID;
					НовСтрокаГараж.GUIDПункта                    = Строка(Новый УникальныйИдентификатор);
					НовСтрокаГараж.Группировка                   = АдресГаража;
					НовСтрокаГараж.Адрес                         = АдресГаража;
					НовСтрокаГараж.Лат                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лат");
					НовСтрокаГараж.Лон                           = ЗначениеРеквизитаОбъекта(АдресГаража, "Лон");
					НовСтрокаГараж.УровеньДерева                 = "Пункт";
					НовСтрокаГараж.АдресГруппировкаУказанНаКарте = ?(НовСтрокаГараж.Лат=0 И НовСтрокаГараж.Лон=0, 1, 0);
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаТС.GUID, "Пункт"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не РежимМаршрутизации Тогда 
			Если ЭлементыВеткаПункты.Количество() Тогда 
				СтрокаВыезда = ЭлементыВеткаПункты[0];
				
				// {pugili 09.11.2020}
				Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
					СтрокаВыезда.ВремяПрибытияВПункт = ДатаПланирования 
						+ (СтрокаВыезда.ВремяПрибытияВПункт - НачалоДня(СтрокаВыезда.ВремяПрибытияВПункт));
					Если СтрокаРаспределения.Свойство("НочнойМаршрут") И СтрокаРаспределения.НочнойМаршрут Тогда
						СекундВДне = 86400;
						СтрокаВыезда.ВремяПрибытияВПункт = СтрокаВыезда.ВремяПрибытияВПункт - СекундВДне;
					КонецЕсли;
				ИначеЕсли СтрокаРаспределения.Свойство("ВремяВыездаНаМаршрут") Тогда 
					СтрокаВыезда.ВремяПрибытияВПункт = ДатаПланирования 
						+ (СтрокаРаспределения.ВремяВыездаНаМаршрут - НачалоДня(СтрокаВыезда.ВремяВыездаНаМаршрут));
				Иначе 
					СтрокаВыезда.ВремяПрибытияВПункт = мВремяПрибытияВПункт;
				КонецЕсли;
				// {/pugili 09.11.2020}
			КонецЕсли;
		КонецЕсли;
		
		// {pugili 11.11.2020}
		// Для алгоритма Рарус VRP в режиме работы "Склад-Клиенты" 
		// не учитываются индивидуальные стоянки при погрузке из заказов, только общая стоянка из пункта склада.
		// Поэтому сейчас время старта маршрута уменьшается на эти стоянки, чтобы не было непопаданий во временные окна.
		Если НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" И НастройкаКларкРайтРежимДоставки = 0 Тогда
			ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", НовСтрокаМЛ.GUID, "Пункт"));
			Если ЭлементыВеткаПункты.Количество() Тогда 
				СтоянкаПоЗаказам = 0;
				СтрокаВыезда = ЭлементыВеткаПункты[0];
				МассивЗаказов = Новый Массив;
				ЭлементыВеткаЗаказ = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDПункта, УровеньДерева",
					НовСтрокаМЛ.GUID, СтрокаВыезда.GUIDПункта, "Заказ"));
				Для Каждого СтрокаЗаказа Из ЭлементыВеткаЗаказ Цикл
					МассивЗаказов.Добавить(СтрокаЗаказа.Этап);
				КонецЦикла;
				СоответствиеСтоянок = Новый Соответствие;
				СоответствиеСтоянокВПункте = Новый Соответствие;
				ПолучитьСтоянкиПоЗаказамГрузоотправителей(СоответствиеСтоянок, СоответствиеСтоянокВПункте, МассивЗаказов);
				Для Каждого КлючИЗначение Из СоответствиеСтоянок Цикл
					СтоянкаПоЗаказам = СтоянкаПоЗаказам + уатОбщегоНазначения.уатВремяВСекунды(КлючИЗначение.Значение.Стоянка1);
				КонецЦикла;
				СтрокаВыезда.ВремяПрибытияВПункт = СтрокаВыезда.ВремяПрибытияВПункт - СтоянкаПоЗаказам;
			КонецЕсли;
		КонецЕсли;
		// {/pugili 11.11.2020}
		
		ИндексТекСтроки = СтрокаТС.ПолучитьИдентификатор();
		ЭлементыПункты  = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("УровеньДерева", "Пункт"));
		КолвоПунктов    = ЭлементыПункты.Количество();
		Если КолвоПунктов <> 0 Тогда
			СтрокаТС.ДатаНачала       = ЭлементыПункты[0].ВремяПрибытияВПункт;
			СтрокаТС.АдресОтправления = ЭлементыПункты[0].Группировка;
			СтрокаТС.ДатаОкончания    = ЭлементыПункты[КолвоПунктов - 1].УбытиеПлан;
			СтрокаТС.АдресНазначения  = ЭлементыПункты[КолвоПунктов - 1].Группировка;
		КонецЕсли;
		СтрокаТС.ВремяВПути = 0;
		СтрокаТС.Расстояние = 0;
		Для Каждого ТекСтрокаПункт Из ЭлементыПункты Цикл
			СтрокаТС.ВремяВПути = СложитьВремя(СтрокаТС.ВремяВПути, ТекСтрокаПункт.ВремяВПути);
			СтрокаТС.Расстояние = СтрокаТС.Расстояние + ТекСтрокаПункт.Расстояние;
		КонецЦикла;
		
		ПроверкаНастройки = НЕ(СтрокаТС.ВремяВПути = 0 И СтрокаТС.Расстояние = 0);
		ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута(Истина, ИндексТекСтроки);
		ОбновитьВременныеХарактеристикиМашрутаСписокСервер(СтрокаТС, ПроверкаНастройки);
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(НеПересчитыватьПлановыеДаты, Истина, ИндексТекСтроки);
		
		Если КолвоПунктов <> 0 Тогда
			СтрокаТС.ДатаНачала       = ЭлементыПункты[0].ВремяПрибытияВПункт;
			СтрокаТС.ДатаОкончания    = ЭлементыПункты[КолвоПунктов - 1].УбытиеПлан;
		КонецЕсли;
		
		Если НастройкаИспользоватьРасчетТары Тогда
			ОбновитьРеквизитыТарыИРазмещенияСписок(СтрокаТС);
		КонецЕсли;
	КонецЦикла;
	
	// Актуализация состояния флага отмеченных.
	//ОбновитьПризнакИспользованиеВДеревеЗаказов(ЗаказыДерево);
	// Подсчет количества распределенных заказов
	Если НастройкаСохранятьЭтапыМаршрутизации И ФлагМаршрутизация Тогда
		КоличествоРаспределенныхЗаказовЭтапМаршрутизации = ИспользуемыеЗаказы.Количество();
	КонецЕсли;
	
	СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдрес(Маршрут) 
	Возврат Маршрут.Этапы[0].ПунктОтправления;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресОтправленияЗаказ(Маршрут) 
	Возврат Маршрут.Заказ.АдресОтправления;;
КонецФункции

&НаСервереБезКонтекста
Функция ВремяВыездаИзГаражаДляРаспределения(Гараж, Склад, ВремяВыездаНаМаршрут) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатРасстоянияМеждуПунктами.Время КАК Время
	|ИЗ
	|	РегистрСведений.уатРасстоянияМеждуПунктами КАК уатРасстоянияМеждуПунктами
	|ГДЕ
	|	уатРасстоянияМеждуПунктами.Пункт1 = &Пункт1
	|	И уатРасстоянияМеждуПунктами.Пункт2 = &Пункт2";
	
	Запрос.УстановитьПараметр("Пункт1", Гараж);
	Запрос.УстановитьПараметр("Пункт2", Склад);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		ВремяВыездаСоСклада = ВремяВыездаНаМаршрут - Цел(РезультатЗапроса.Время) * 60 * 60 - (РезультатЗапроса.Время - Цел(РезультатЗапроса.Время)) * 100 * 60;
	Иначе
		ВремяВыездаСоСклада = ВремяВыездаНаМаршрут;
	КонецЕсли;
	
	Возврат ВремяВыездаСоСклада;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьВЖурналРегистрации(ИмяСобытия, ТекстСообщения)
	ЗаписьЖурналаРегистрации(
	ИмяСобытия,
	УровеньЖурналаРегистрации.Информация,
	,
	,
	ТекстСообщения
	);
Конецпроцедуры


&НаКлиенте
Процедура Подключаемый_МаршрутизацияЗавершение(Результат, ДопПараметры) Экспорт
	
	МассивОшибок = ДопПараметры.МассивОшибок;
	ОшибкаМаршрутизации = ДопПараметры.ОшибкаМаршрутизации;
	
	Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
		Форма = ПолучитьФорму("ОбщаяФорма.уатДлительнаяОперация",, ЭтотОбъект);
		Форма.ТекстСтатуса = НСтр("en='Update the time and distance in the routing lists';ru='Обновление времени и расстояния в маршрутных листах'");
		Форма.Открыть();
	КонецЕсли;
	
	ОбновитьУровеньДереваВМаршрутах();
	
	Если Не (ДопПараметры.Свойство("ВремяРасстояниеУказано") И ДопПараметры.ВремяРасстояниеУказано = Истина) 
		И НастройкаРежимОтображенияМЛ = 0 Тогда 
		ОбновитьВременныеХарактеристикиМашрута();
		
		НеПересчитыватьПлановыеДаты = Ложь;
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(НеПересчитыватьПлановыеДаты);
	КонецЕсли;
	
	ФлагСерверныеПроцедурыДеревоМаршрутов = Истина;
	Если ДопПараметры.Свойство("ФлагСерверныеПроцедурыДеревоМаршрутов") Тогда
		ФлагСерверныеПроцедурыДеревоМаршрутов = Ложь;
	КонецЕсли;
	ДатаПланирования = РабочаяДатаПланирования;
	ОбновитьДеревоМаршрутовНаКлиенте(,ФлагСерверныеПроцедурыДеревоМаршрутов);
	
	Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
		Форма.Закрыть();
	КонецЕсли;
	
	Если МассивОшибок.Количество() Тогда 
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибок);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='While routing errors occur:';ru='При маршрутизации возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Ошибка");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект);
		
		ТекстСообщения = НСтр("en='While routing errors occur:';ru='При маршрутизации возникли ошибки.'") 
		+ Символы.ПС + НСтр("en='Task ID: ';ru='ID задачи: '") + IDзадачиВнешнийМаршрутизатор;
		
		ЗаписатьВЖурналРегистрации("Внешняя маршрутизация", ТекстСообщения);
		
	ИначеЕсли Не ОшибкаМаршрутизации Тогда 

		ТекстСообщения = Новый ФорматированнаяСтрока(НСтр("en='Orders routing successfully completed.';ru='Маршрутизация заказов успешно завершена.'") 
			+ Символы.ПС + НСтр("en='Run-time of routing:';ru='Время выполнения маршрутизации:'") + " " 
			+ Формат('00010101'+(ТекущаяДата()-ВремяНачалаМаршрутизации), "ДФ=HH:mm:ss; ДП=00:00:00"),
			Символы.ПС,
			?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор),НСтр("ru = 'ID задачи: '; en = 'Task ID: '") + IDзадачиВнешнийМаршрутизатор, ""),
			Символы.ПС,
			?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) И НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс",
			Новый ФорматированнаяСтрока(НСтр("ru='Открыть в браузере'"),,,, "https://courier.yandex.ru/mvrp-map#" + IDзадачиВнешнийМаршрутизатор), ""));
		ПоказатьПредупреждение(Новый ОписаниеОповещения("Подключаемый_МаршрутизацияЗавершение_ОбновитьКарту", ЭтотОбъект), ТекстСообщения);
		
		ТекстСообщения = НСтр("en='Orders routing successfully completed.';ru='Маршрутизация заказов успешно завершена.'") 
		+ Символы.ПС + НСтр("en='Task ID: ';ru='ID задачи: '") + IDзадачиВнешнийМаршрутизатор;
		
		ЗаписатьВЖурналРегистрации("Внешняя маршрутизация", ТекстСообщения);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если НастройкаСохранятьЭтапыМаршрутизации И СписокМЛТекущийЭтапМаршрутизации.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолейЭтапаМаршрутизации, ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(Ложь, Истина));
		СтруктураПолейЭтапаМаршрутизации.Вставить("IDзадачиВнешнийМаршрутизатор", IDзадачиВнешнийМаршрутизатор);
		ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
		ФлагМаршрутизация = Ложь;
		СписокМЛТекущийЭтапМаршрутизации.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МаршрутизацияЗавершение_ОбновитьКарту(ДополнительныеПараметры) Экспорт

	ОтобразитьДанныеНаКарте_МЛисты();
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации)
	
	Если ЗначениеЗаполнено(СтруктураПолейЭтапаМаршрутизации.Ссылка) Тогда
		ЭтапМаршрутизации = СтруктураПолейЭтапаМаршрутизации.Ссылка.ПолучитьОбъект();
	Иначе
		ЭтапМаршрутизации = Справочники.уатЭтапыМаршрутизации.СоздатьЭлемент();
	КонецЕсли;

	ЭтапМаршрутизации.Наименование                  = СтруктураПолейЭтапаМаршрутизации.НаименованиеЭтапа;
	ЭтапМаршрутизации.Родитель                      = СтруктураПолейЭтапаМаршрутизации.РодительЭтапа;
	ЭтапМаршрутизации.ДатаМаршрутизации             = СтруктураПолейЭтапаМаршрутизации.ДатаМаршрутизацииЭтапа;
	ЭтапМаршрутизации.ВариантНастроек               = ВариантНастройки;
	
	Если ЗначениеЗаполнено(СтруктураПолейЭтапаМаршрутизации.СтрокаРезультат) Тогда
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(СтруктураПолейЭтапаМаршрутизации.СтрокаРезультат);
			СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ПарметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
			ЗаписьJSON.УстановитьСтроку(ПарметрыЗаписиJSON);
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			
			ЭтапМаршрутизации.HTTPОтвет  = СтрокаJSON;
		Исключение
			ЭтапМаршрутизации.HTTPОтвет  = СтруктураПолейЭтапаМаршрутизации.СтрокаРезультат;
		КонецПопытки;
	КонецЕсли;

	ЭтапМаршрутизации.ВремяВыполненияМаршрутизации  = ТекущаяДата()- ВремяНачалаМаршрутизации;
	ЭтапМаршрутизации.АлгоритмМаршрутизации         = НастройкаАлгоритмМаршрутизации;
	ЭтапМаршрутизации.АдресВыезда                   = НастройкаАдресВыезда;
	Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" Тогда
		ЭтапМаршрутизации.ИдентификаторЗадачи         = СтруктураПолейЭтапаМаршрутизации.IDзадачиВнешнийМаршрутизатор;
	Конецесли;
	ЕстьМетрики = МетрикиВнешнейМаршрутизации.Количество() > 0;
	
	Если ЕстьМетрики Тогда
		Метрики = МетрикиВнешнейМаршрутизации[0];
		Если Метрики.Значение.Свойство("ОбщиеМетрики") Тогда
			Для Каждого ТекСтрока Из Метрики.Значение.ОбщиеМетрики Цикл
				НоваяСтрока = ЭтапМаршрутизации.Метрики.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ЗначениеТекущее = НоваяСтрока.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтапМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
	
	СтруктураНастроек = Новый Структура(
	уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	СтруктураНастроекJSON = СтруктураНастроек;
	ЗаписьJSON = Новый ЗаписьJSON;
	ПарметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПарметрыЗаписиJSON);
	
	стНастройкиВнешнийМаршрутизатор = уатЗащищенныеФункцииСервер_уэ.ПрочитатьНастройкиВнешнийМаршрутизатор(СтруктураНастроек.НастройкиВнешнийМаршрутизатор);
	Если стНастройкиВнешнийМаршрутизатор = Неопределено Тогда
		стНастройкиВнешнийМаршрутизатор = "";
	КонецЕсли;
	
	Для Каждого Элемент из СтруктураНастроек Цикл
		Если Элемент.Ключ = "НастройкиВнешнийМаршрутизатор" Тогда
			СтруктураНастроекJSON[Элемент.Ключ] = уатОбщегоНазначения.АдаптацияПолейДляJSON(стНастройкиВнешнийМаршрутизатор);
		Иначе 
			СтруктураНастроекJSON[Элемент.Ключ] = уатОбщегоНазначения.АдаптацияПолейДляJSON(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;

	ЗаписатьJSON(ЗаписьJSON, СтруктураНастроекJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ЭтапМаршрутизации.НастройкиМаршрутизации  = СтрокаJSON;

	Для Каждого ТекСтрокаЭтапа Из СписокМЛТекущийЭтапМаршрутизации Цикл
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			СтрокаДерева = МаршрутыДерево.НайтиПоИдентификатору(ТекСтрокаЭтапа.Значение);
			
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТС = СтрокаДерева.ПолучитьРодителя();
			
		Иначе
			СтрокаТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТекСтрокаЭтапа.Значение));
			Если СтрокаТС.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
				
			СтрокаТС = СтрокаТС[0];
			
		КонецЕсли;
		
		Если СтрокаТС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьМетрики Тогда
			Счетчик = 0;
			Для Каждого ТекСтрока Из МетрикиВнешнейМаршрутизации Цикл
				Если ТекСтрока.Значение.Свойство("ТС") Тогда
					Если ТекСтрока.Значение.ТС = СтрокаТС.GUID 
						ИЛИ ТекСтрока.Значение.ТСid = СтрокаТС.GUID Тогда
						ТекСтрока.Значение.ТС = Новый Структура("GUID, ТС", СтрокаТС.GUID, СтрокаТС.ТС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьМетрики Тогда
		Для Каждого ТекСтрока Из МетрикиВнешнейМаршрутизации Цикл
			Если ТекСтрока.Значение.Свойство("ТС") Тогда
				Попытка
					стТС = ТекСтрока.Значение.ТС;
					Для Каждого ТекМетрика Из ТекСтрока.Значение.Метрики Цикл
						НоваяСтрока = ЭтапМаршрутизации.Метрики.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекМетрика);
						НоваяСтрока.ЗначениеТекущее = НоваяСтрока.Значение;
						НоваяСтрока.ТС     = стТС.ТС;
						НоваяСтрока.GUIDТС = стТС.GUID;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЭтапМаршрутизации.Метрики.Сортировать("ТС, Свойство");
	
	Попытка
		ЭтапМаршрутизации.Записать();
		СтруктураПолейЭтапаМаршрутизации.Ссылка = ЭтапМаршрутизации.Ссылка;
	Исключение
	КонецПопытки;
	
	Для Каждого ТекСтрокаЭтап Из СписокМЛТекущийЭтапМаршрутизации Цикл
		Если НастройкаРежимОтображенияМЛ = 0 Тогда
			СтрокаДерева = МаршрутыДерево.НайтиПоИдентификатору(ТекСтрокаЭтап.Значение);
		Иначе
			СтрокаТС = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТекСтрокаЭтап.Значение));
			Если СтрокаТС.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
				
			СтрокаДерева = СтрокаТС[0];
		КонецЕсли;
		
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДерева.ЭтапМаршрутизации			 = ЭтапМаршрутизации.Ссылка;
		СтрокаДерева.ФлагТекущаяМаршрутизация	 = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивДопАдресовГаражамиТССервер(мсвДопАдреса)
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если ТекТС.ПолучитьЭлементы().Количество() = 0 Тогда
				Гараж = ТекТС.ТС.Гараж;
				Если ЗначениеЗаполнено(Гараж) Тогда 
					мсвДопАдреса.Добавить(Гараж);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ТекТС Из МаршрутыСписок Цикл 
			Если НЕ ТекТС.НовыйМЛ 
				И НЕ ЗначениеЗаполнено(ТекТС.МЛ) Тогда
				Гараж = ТекТС.ТС.Гараж;
				Если ЗначениеЗаполнено(Гараж) Тогда 
					мсвДопАдреса.Добавить(Гараж);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияСохранятьЭтап(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		СтруктураПолейЭтапаМаршрутизации.НаименованиеЭтапа                          = РезультатЗакрытия.Наименование;
		СтруктураПолейЭтапаМаршрутизации.РодительЭтапа                              = РезультатЗакрытия.Родитель;
		СтруктураПолейЭтапаМаршрутизации.ДатаМаршрутизацииЭтапа                     = РезультатЗакрытия.ДатаМаршрутизации;
		
		НастройкаУказыватьНаименованиеЭтапаВручную = РезультатЗакрытия.НастройкаУказыватьНаименованиеЭтапаВручную;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураПолейЭтапаМаршрутизации, ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(Истина, Ложь));
	
	МаршрутизацияПродолжение(ДополнительныеПараметры);
	
	Если СписокМЛТекущийЭтапМаршрутизации.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолейЭтапаМаршрутизации, ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(Ложь, Истина));
		СтруктураПолейЭтапаМаршрутизации.IDзадачиВнешнийМаршрутизатор = IDзадачиВнешнийМаршрутизатор;
		ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
		СписокМЛТекущийЭтапМаршрутизации.Очистить();
		ФлагМаршрутизация = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИтоговыеДанныеПоЗаказамИМаршрутам(ОбновлятьЗаказы = Истина, ОбновлятьМаршруты = Истина)
	
	// Отображение итоговые данные.
	СводнаяИнформация = Новый Структура();
	Если ОбновлятьЗаказы Тогда
		СводнаяИнформация.Вставить("КоличествоЗаказовВыделено", ИтогоЗаказов);
		СводнаяИнформация.Вставить("ВесЗаказовВыделено", ИтогоВес);
		СводнаяИнформация.Вставить("ОбъемЗаказовВыделено", ИтогоОбъем);
		СводнаяИнформация.Вставить("КоличествоМестЗаказовВыделено", ИтогоКолМест);
	КонецЕсли;
	Если ОбновлятьМаршруты Тогда
		СводнаяИнформация.Вставить("ЗадействованоТСВыделено", ИтогоМаршрутыЗадействованоТС);
		СводнаяИнформация.Вставить("ЗадействованоТСВсего", ИтогоМаршрутыВсегоТС);
		СводнаяИнформация.Вставить("МаршрутныхЛистовВыделено", ИтогоМаршрутыМЛ);
		СводнаяИнформация.Вставить("ЗаказовВыделено", ИтогоМаршрутыЗаказов);
		СводнаяИнформация.Вставить("ВесВыделено", ИтогоМаршрутыВес);
		СводнаяИнформация.Вставить("ВесВсего", ИтогоМаршрутыВесВсего);
		СводнаяИнформация.Вставить("ОбъемВыделено", ИтогоМаршрутыОбъем);
		СводнаяИнформация.Вставить("ОбъемВсего", ИтогоМаршрутыОбъемВсего);
		СводнаяИнформация.Вставить("КоличествоМестВыделено", ИтогоМаршрутыКолМест);
		СводнаяИнформация.Вставить("ВремяВПути", ИтогоМаршрутыВремяВПути);
		СводнаяИнформация.Вставить("ВремяСтоянок", ИтогоМаршрутыВремяСтоянок);
		СводнаяИнформация.Вставить("ВремяОжидания", 0);
		СводнаяИнформация.Вставить("ВремяВсего", ИтогоМаршрутыВремяВсего);
		СводнаяИнформация.Вставить("РасстояниеВсего", ИтогоМаршрутыРасстояние);
		СводнаяИнформация.Вставить("КоличествоПунктовПогрузки", 0);
		СводнаяИнформация.Вставить("КоличествоПунктовРазгрузки", 0);
	КонецЕсли;
	Возврат СводнаяИнформация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПриНачалеМаршрутизации(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации)
	
	мсвЗаказыДляПроверки = Новый Массив();
	
	ВыполнитьПроверкуПриНачалеМаршрутизации_ОбщиеПроверки(мОшибки, мПредупреждения,
		МассивОшибок, тблТСДляМаршрутизации);
		
	флЕстьМинимальныйВесГруза           = Ложь;
	флЕстьМинимальныйОбъемГруза         = Ложь;
	флЕстьМинимальноеКоличествоУпаковок = Ложь;
	
	ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС(мОшибки, мПредупреждения,
		МассивОшибок, тблТСДляМаршрутизации,
		флЕстьМинимальныйВесГруза, флЕстьМинимальныйОбъемГруза, флЕстьМинимальноеКоличествоУпаковок);
		
	МаксГрузоподъемность = 0;
	МаксОбъемКузова      = 0;
	МаксУпаковокТС       = 0;
	
	Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл   
		ТекГрузоподъемность = ТекСтрокаТС.Грузоподъемность;
		ТекОбъемКузова      = ТекСтрокаТС.ОбъемКузова;
		ТекУпаковокТС       = ТекСтрокаТС.МаксимальноеКоличествоУпаковок;
		
		ТекГрузоподъемность = ТекГрузоподъемность * (НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу / 100);
		ТекОбъемКузова      = ТекОбъемКузова * (НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему / 100);
		
		МаксГрузоподъемность = Макс(МаксГрузоподъемность, ТекГрузоподъемность);
		МаксОбъемКузова      = Макс(МаксОбъемКузова, ТекОбъемКузова);
		МаксУпаковокТС       = Макс(МаксУпаковокТС, ТекУпаковокТС);
	КонецЦикла;

	флагОкноЗаказаПредупреждение = Ложь;
	флагПросроченныеЗаказы       = Ложь;
	МассивПросроченныеЗаказы     = Новый Массив();
	
	Если НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP" 
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда 
		
		флЕстьОбъемПоЗаказу = Ложь;
		флЕстьВесПоЗаказу   = Ложь;
		флЕстьМестаПоЗаказу = Ложь;
		
		СтрокиДляПодбора = Новый Массив();
		
		МассивЗаказов = Новый Массив();
		Для Каждого ТекСтрокаЗаказа Из ОтмеченныеЗаказы Цикл
			МассивЗаказов.Добавить(ТекСтрокаЗаказа.Ссылка);
		КонецЦИкла;
		
		КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
			МассивЗаказов);
		
		Для Каждого ТекСтрокаЗаказ Из КомпоновщикСпискаЗаказов Цикл
				
			Если ТекСтрокаЗаказ.Количество = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			КлючСтроки = Новый КлючСтрокиДинамическогоСписка("Ссылка, ИдентификаторСтроки",
				ТекСтрокаЗаказ.Ссылка, ТекСтрокаЗаказ.ИдентификаторСтроки);
			
			Если ОтмеченныеЗаказы.Найти(КлючСтроки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = СоответствиеЗаказов.Добавить();
			НоваяСтрока.Заказ  = ТекСтрокаЗаказ.Ссылка;
			НоваяСтрока.Строка = ТекСтрокаЗаказ.ИдентификаторСтроки;
			
			флЗаказБезОшибок = Истина;
			
			Если НастройкаУчитыватьСекцииТранспортныхСредств
				И ТекСтрокаЗаказ.ДетализацияЗакрытия = ДетализацияЗакрытияПоЗаказам Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_4_ЗаказНеМожетБытьРаспределенПоСекциям",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрокаЗаказ.АдресОтправленияУказанНаКарте = 1 Тогда 
				ТекстОшибкиOSM = "";
				мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(ТекСтрокаЗаказ.АдресОтправленияПредставление,, ТекстОшибкиOSM);
				Если ТекстОшибкиOSM = "" Тогда 
					
					СтрокаТабАдресов = ТаблицаУказанныхАдресовНаКарте.Добавить();
					СтрокаТабАдресов.Адрес = ТекСтрокаЗаказ.АдресОтправления;
					СтрокаТабАдресов.Лат   = мсвКоординат.Лат;
					СтрокаТабАдресов.Лон   = мсвКоординат.Лон;
				Иначе 
					МассивОшибок.Добавить(
					Новый Структура(
					"Группа, Критичность, КодОшибки, Объект",
					"Заказы",
					"Предупреждение",
					"Ошибка_5_НеУдалосьПолучитьКоордАдресаОтправления",
					ТекСтрокаЗаказ.Ссылка
					)
					);
					мПредупреждения = Истина;
					флЗаказБезОшибок = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтрокаЗаказ.АдресНазначенияУказанНаКарте = 1 Тогда 
				ТекстОшибкиOSM = "";
				мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(ТекСтрокаЗаказ.АдресНазначенияПредставление,, ТекстОшибкиOSM);
				Если ТекстОшибкиOSM = "" Тогда
					
					СтрокаТабАдресов = ТаблицаУказанныхАдресовНаКарте.Добавить();
					СтрокаТабАдресов.Адрес = ТекСтрокаЗаказ.АдресНазначения;
					СтрокаТабАдресов.Лат   = мсвКоординат.Лат;
					СтрокаТабАдресов.Лон   = мсвКоординат.Лон;
				Иначе 
					МассивОшибок.Добавить(
					Новый Структура(
					"Группа, Критичность, КодОшибки, Объект",
					"Заказы",
					"Предупреждение",
					"Ошибка_6_НеУдалосьПолучитьКоордАдресаНазначения",
					ТекСтрокаЗаказ.Ссылка
					)
					);
					мПредупреждения = Истина;
					флЗаказБезОшибок = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если флЕстьМинимальныйВесГруза И ТекСтрокаЗаказ.ВесБрутто = 0 Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_7_ВЗаказеНеУказанВесГруза",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если флЕстьМинимальныйОбъемГруза И ТекСтрокаЗаказ.Объем = 0 Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_8_ВЗаказеНеУказанОбъемГруза",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если Не НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
				И флЕстьМинимальноеКоличествоУпаковок И ТекСтрокаЗаказ.КоличествоМест = 0 Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_9_ВЗаказеНеУказаноКолВоУпаковок",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если (НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
				ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И РаспределениеПоМаршрутамУчитыватьГрузоподьемность))
				И ТекСтрокаЗаказ.ВесБрутто > МаксГрузоподъемность Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_10_ВесЗаказаПревышаетМаксГрузоподъемностьТС",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если ТекСтрокаЗаказ.FTL Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_33_ОбнаруженFTLЗаказ",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если ((НастройкаАлгоритмМаршрутизацииСтрока <> "КларкРайт"
					ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" 
					И НЕ НастройкаУчитыватьСекцииТранспортныхСредств)))
					И ТекСтрокаЗаказ.Объем > МаксОбъемКузова Тогда 
				Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
					ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И РаспределениеПоМаршрутамУчитыватьОбъем) Тогда
					МассивОшибок.Добавить(
					Новый Структура(
					"Группа, Критичность, КодОшибки, Объект",
					"Заказы",
					"Предупреждение",
					"Ошибка_11_ОбъемЗаказаПревышаетМаксОбъемКузоваТС",
					ТекСтрокаЗаказ.Ссылка
					)
					);
					мПредупреждения = Истина;
					флЗаказБезОшибок = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если (НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
				ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
				ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" И НастройкаУчитыватьМаксимальноеКоличествоУпаковок)
				ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP"
				ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И РаспределениеПоМаршрутамУчитыватьКоличество))
				И ТекСтрокаЗаказ.КоличествоМест > МаксУпаковокТС  Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_12_КолвоМестПоЗаказуПревышаетМаксЗагрузкуТС",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мПредупреждения = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если ТекСтрокаЗаказ.Объем > 0 Тогда 
				флЕстьОбъемПоЗаказу = Истина;
			КонецЕсли;
			Если ТекСтрокаЗаказ.ВесБрутто > 0 Тогда 
				флЕстьВесПоЗаказу = Истина;
			КонецЕсли;
			Если ТекСтрокаЗаказ.КоличествоМест > 0 Тогда 
				флЕстьМестаПоЗаказу = Истина;
			КонецЕсли;
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" 
				И НастройкаКларкРайтРежимДоставки = 1 
				И ТекСтрокаЗаказ.АдресНазначения <> НастройкаАдресВыезда Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Ошибка",
				"Ошибка_14_ЗаказыСРазличнымиПунктамиПрибытия",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мОшибки = Истина;
				флЗаказБезОшибок = Ложь;
			ИначеЕсли (НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Или НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
				И НастройкаКларкРайтРежимДоставки = 0
				И ТекСтрокаЗаказ.АдресОтправления <> НастройкаАдресВыезда Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Ошибка",
				"Ошибка_15_ЗаказыСРазличнымиПунктамиОтправления",
				ТекСтрокаЗаказ.Ссылка
				)
				);
				мОшибки = Истина;
				флЗаказБезОшибок = Ложь;
			КонецЕсли;
			
			Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Или НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP")
				И НастройкаКларкРайтРежимДоставки = 0 Тогда
				ОтправлениеС  = Дата('00010101') + (ТекСтрокаЗаказ.ОтправлениеС - НачалоДня(ТекСтрокаЗаказ.ОтправлениеС));
				ОтправлениеПо = Дата('00010101') + (ТекСтрокаЗаказ.ОтправлениеПо - НачалоДня(ТекСтрокаЗаказ.ОтправлениеПо));
				
				Если ОтправлениеС <> НастройкаВремяВыездаТранспортныхСредств 
					ИЛИ ОтправлениеПо <> НастройкаВремяВозвратаТранспортныхСредств - Секунда(НастройкаВремяВозвратаТранспортныхСредств) Тогда
					
					флагОкноЗаказаПредупреждение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации
				И (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
				Или НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP"
				Или НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
				Или НастройкаАлгоритмМаршрутизацииСтрока = "Очередей") Тогда
				
				Если ТекСтрокаЗаказ.ОтправлениеС    > ТекСтрокаЗаказ.ОтправлениеПо
					Или ТекСтрокаЗаказ.ОтправлениеС > ТекСтрокаЗаказ.ДоставкаПо
					Или ТекСтрокаЗаказ.ДоставкаС    > ТекСтрокаЗаказ.ДоставкаПо Тогда
					
					МассивОшибок.Добавить(
					Новый Структура(
						"Группа, Критичность, КодОшибки, Объект",
						"Заказы",
						"Предупреждение",
						"Ошибка_39_НекорректноеВременноеОкноПоЗаказу",
						ТекСтрокаЗаказ.Ссылка
						)
					);
					мПредупреждения = Истина;
					флЗаказБезОшибок = Ложь;
						
				КонецЕсли;
				
			КонецЕсли;
			
			Если НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации
				И (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
				ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP") 
				И (НастройкаВремяВозвратаТранспортныхСредств
					< НастройкаВремяВыездаТранспортныхСредств)
				И НастройкаКоличествоДнейПланирования < 2 Тогда
				
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Ошибка",
				"Ошибка_40_НекорректноеКоличествоДнейПланирования",
				Неопределено
				)
				);
				мОшибки = Истина;
			КонецЕсли;
			
			Если (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
				ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP"
				ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты")
				И НастройкаДействиеСПросроченнымиЗаказами = 0 Тогда
				
				ОтправлениеС  = НачалоДня(ТекСтрокаЗаказ.ОтправлениеС);
				ОтправлениеПо = НачалоДня(ТекСтрокаЗаказ.ОтправлениеПо);

				СдвигДаты = 0;
				Если НастройкаВремяВозвратаТранспортныхСредств
					< НастройкаВремяВыездаТранспортныхСредств Тогда
					СдвигДаты = 86400;
				КонецЕсли;
				
				Если (ОтправлениеС < ДатаПланирования - СдвигДаты)
					И (ОтправлениеПо < ДатаПланирования) Тогда
					флагПросроченныеЗаказы = Истина;
					флЗаказБезОшибок       = Ложь;
					МассивПросроченныеЗаказы.Добавить(ТекСтрокаЗаказ.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			Если флЗаказБезОшибок Тогда 
				НоваяСтрокаОтмеченныхЗаказов = кэшСписокОтмеченныхЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтмеченныхЗаказов, ТекСтрокаЗаказ);
				мсвЗаказыДляПроверки.Добавить(ТекСтрокаЗаказ.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		МассивУдаляемых = Новый Массив();
		Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл   
			Если флЕстьОбъемПоЗаказу Тогда 
				Для Каждого ТекПрицеп Из ТекСтрокаТС.Прицепы Цикл 
					Если ТекПрицеп.ОбъемКузова = 0 Тогда 
						ПараметрыТекстОшибки = Новый Массив();
						ПараметрыТекстОшибки.Добавить(ТекСтрокаТС.ТСПредставление);
						ПараметрыТекстОшибки.Добавить(ТекПрицеп.Прицеп);
						МассивОшибок.Добавить(
							Новый Структура(
								"Группа, Критичность, КодОшибки, Объект, Параметры",
								"ТС",
								"Предупреждение",
								"Ошибка_26_ДляСцепкиНеУказанОбъем",
								ТекСтрокаТС.ТС,
								ПараметрыТекстОшибки
							)
						);
						мПредупреждения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ТекСтрокаТС.ОбъемКузова = 0 И 
					((НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И РаспределениеПоМаршрутамУчитыватьОбъем)
					ИЛИ НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты") Тогда
					МассивОшибок.Добавить(
						Новый Структура(
							"Группа, Критичность, КодОшибки, Объект",
							"ТС",
							"Предупреждение",
							"Ошибка_17_НеУказанОбъемТС",
							ТекСтрокаТС.ТС
						)
					);
					мПредупреждения = Истина;
					МассивУдаляемых.Добавить(ТекСтрокаТС);
				КонецЕсли;
			КонецЕсли;
			
			Если флЕстьВесПоЗаказу Тогда 
				Для Каждого ТекПрицеп Из ТекСтрокаТС.Прицепы Цикл 
					Если ТекПрицеп.Грузоподъемность = 0 Тогда
						ПараметрыТекстОшибки = Новый Массив();
						ПараметрыТекстОшибки.Добавить(ТекСтрокаТС.ТСПредставление);
						ПараметрыТекстОшибки.Добавить(ТекПрицеп.Прицеп);
						МассивОшибок.Добавить(
							Новый Структура(
								"Группа, Критичность, КодОшибки, Объект, Параметры",
								"ТС",
								"Предупреждение",
								"Ошибка_27_ДляСцепкиНеУказанаГрузоподъемность",
								ТекСтрокаТС.ТС,
								ПараметрыТекстОшибки
							)
						);
						мПредупреждения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ТекСтрокаТС.Грузоподъемность = 0 И
					((НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И РаспределениеПоМаршрутамУчитыватьГрузоподьемность) 
					ИЛИ НЕ НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты") Тогда
					МассивОшибок.Добавить(
						Новый Структура(
							"Группа, Критичность, КодОшибки, Объект",
							"ТС",
							"Предупреждение",
							"Ошибка_18_НеУказанаГрузоподъемностьТС",
							ТекСтрокаТС.ТС
						)
					);
					мПредупреждения = Истина;
					МассивУдаляемых.Добавить(ТекСтрокаТС);
				КонецЕсли;
			КонецЕсли;
			
			Если флЕстьМестаПоЗаказу Тогда 
				Для Каждого ТекПрицеп Из ТекСтрокаТС.Прицепы Цикл 
					Если ТекПрицеп.МаксимальноеКоличествоУпаковок = 0 
						И (НЕ НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
						ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" И НастройкаУчитыватьМаксимальноеКоличествоУпаковок) Тогда 
						ПараметрыТекстОшибки = Новый Массив();
						ПараметрыТекстОшибки.Добавить(ТекСтрокаТС.ТСПредставление);
						ПараметрыТекстОшибки.Добавить(ТекПрицеп.Прицеп);

						МассивОшибок.Добавить(
							Новый Структура(
								"Группа, Критичность, КодОшибки, Объект, Параметры",
								"ТС",
								"Предупреждение",
								"Ошибка_28_ДляСцепкиНеУказаноМаксКолвоУпаковок",
								ТекСтрокаТС.ТС,
								ПараметрыТекстОшибки
							)
						);
						мПредупреждения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ТекСтрокаТС.МаксимальноеКоличествоУпаковок = 0 И 
					((НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И РаспределениеПоМаршрутамУчитыватьКоличество) 
					ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" И НастройкаУчитыватьМаксимальноеКоличествоУпаковок)
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP"
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
					ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт") Тогда 
					МассивОшибок.Добавить(
						Новый Структура(
							"Группа, Критичность, КодОшибки, Объект",
							"ТС",
							"Предупреждение",
							"Ошибка_19_НеУказаноМаксКолвоУпаковокТС",
							ТекСтрокаТС.ТС
						)
					);
					мПредупреждения = Истина;
					МассивУдаляемых.Добавить(ТекСтрокаТС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекУдТС Из МассивУдаляемых Цикл
			удИндекс = тблТСДляМаршрутизации.Найти(ТекУдТС);
			Если удИндекс <> Неопределено Тогда
				тблТСДляМаршрутизации.Удалить(удИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользованиеКластеризации 
		И Не ЗначениеЗаполнено(НастройкаКластеризации) 
		И Не НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
		И Не НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP"
		И Не НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
		
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"",
				"Ошибка",
				"Ошибка_21_НеУказанаНастройкаКластеризации",
				Неопределено
			)
		);
		мОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Если флагОкноЗаказаПредупреждение Тогда 

		ПараметрыТекстОшибки = Новый Массив();
		ПараметрыТекстОшибки.Добавить(Формат(НастройкаВремяВыездаТранспортныхСредств, "ДФ=ЧЧ:мм; ДП=00:00")
			+ " - " + Формат(НастройкаВремяВозвратаТранспортныхСредств, "ДФ=ЧЧ:мм"));

		МассивОшибок.Добавить(
							Новый Структура(
							"Группа, Критичность, КодОшибки, Объект, Параметры, ПараметрыПояснения",
							"Заказы",
							"Предупреждение",
							"Ошибка_16_ОкнаОтправленияНеСовпадают",
							Неопределено,
							ПараметрыТекстОшибки,
							ПараметрыТекстОшибки
							)
							);
		мПредупреждения = Истина;
	КонецЕсли;
	
	Если флагПросроченныеЗаказы Тогда 
		Для Каждого ТекЗаказ Из МассивПросроченныеЗаказы Цикл
			МассивОшибок.Добавить(
			Новый Структура(
			"Группа, Критичность, КодОшибки, Объект",
			"Заказы",
			"Предупреждение",
			"Ошибка_34_ОбнаруженыПросроченныеЗаказы",
			ТекЗаказ
			)
			);
			мПредупреждения = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка наличия подходящих по характеристикам (и для Рарус VRP, по геозонам) ТС.
	// Выполняется в конце, так как на этом этапе уже отброшена часть заказов и проверка будет выполняться быстрее.
	Если (НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
		Или НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
		Или НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс")
		И НастройкаИспользоватьХарактеристикиЗаказовНаТС Тогда
		НеподходящиеПоХарактеристикамЗаказы = ПолучитьНеподходящиеПоХарактеристикамЗаказы(тблТСДляМаршрутизации, мсвЗаказыДляПроверки, ИспользоватьХарактеристикиЗаказовНаТС);
		
		Для Каждого ТекЗаказ Из НеподходящиеПоХарактеристикамЗаказы Цикл 
			МассивОшибок.Добавить(
				Новый Структура(
					"Группа, Критичность, КодОшибки, Объект",
					"Заказы",
					"Предупреждение",
					"Ошибка_22_НетТССПодходящимиХаркамиПоЗаказу",
					ТекЗаказ
				)
			);
			мПредупреждения = Истина;
			
			НайденноеЗначение = мсвЗаказыДляПроверки.Найти(ТекЗаказ);
			Пока НайденноеЗначение <> Неопределено Цикл
				мсвЗаказыДляПроверки.Удалить(НайденноеЗначение);
				НайденноеЗначение = мсвЗаказыДляПроверки.Найти(ТекЗаказ);
			КонецЦикла;
			НайденныеСтроки = кэшСписокОтмеченныхЗаказов.НайтиСтроки(Новый Структура("Ссылка", ТекЗаказ));
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				кэшСписокОтмеченныхЗаказов.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЦикла;
	ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "RarusVRP"
		И (НастройкаИспользоватьХарактеристикиЗаказовНаТС Или НастройкаИспользоватьЗакреплениеТСЗаказовНаТСзаГеозонами) Тогда
		
		СтруктураНастроекАРМ = Новый Структура(уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
		ЗаполнитьЗначенияСвойств(СтруктураНастроекАРМ, ЭтотОбъект);
		мсвЗаказыБезРазрешенныхТС = ПолучитьЗаказыБезРазрешенныхТС(мсвЗаказыДляПроверки, тблТСДляМаршрутизации, СтруктураНастроекАРМ);
		
		ПараметрыПоясненияОшибки = Новый Массив();
		Если НастройкаИспользоватьХарактеристикиЗаказовНаТС И НастройкаИспользоватьЗакреплениеТСЗаказовНаТСзаГеозонами Тогда
			ПараметрОшибки = НСтр("ru = 'характеристикам и геозонам'; en = 'characteristics and geozones'");
		ИначеЕсли НастройкаИспользоватьХарактеристикиЗаказовНаТС Тогда
			ПараметрОшибки = НСтр("ru = 'характеристикам'; en = 'characteristics'");
		Иначе
			ПараметрОшибки = НСтр("ru = 'геозонам'; en = 'geozones'");
		КонецЕсли;
		ПараметрыПоясненияОшибки.Добавить(ПараметрОшибки);
		
		Для Каждого ТекЗаказ Из мсвЗаказыБезРазрешенныхТС Цикл 
			МассивОшибок.Добавить(
				Новый Структура(
					"Группа, Критичность, КодОшибки, Объект, Параметры, ПараметрыПояснения",
					"Заказы",
					"Предупреждение",
					"Ошибка_38_НетРазрешенныхТСПоЗаказу",
					ТекЗаказ,
					ПараметрыПоясненияОшибки,
					ПараметрыПоясненияОшибки
				)
			);
			мПредупреждения = Истина;
			
			НайденноеЗначение = мсвЗаказыДляПроверки.Найти(ТекЗаказ);
			Пока НайденноеЗначение <> Неопределено Цикл
				мсвЗаказыДляПроверки.Удалить(НайденноеЗначение);
				НайденноеЗначение = мсвЗаказыДляПроверки.Найти(ТекЗаказ);
			КонецЦикла;
			НайденныеСтроки = кэшСписокОтмеченныхЗаказов.НайтиСтроки(Новый Структура("Ссылка", ТекЗаказ));
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				кэшСписокОтмеченныхЗаказов.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если мсвЗаказыДляПроверки.Количество() = 0 Тогда
		МассивОшибок.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект",
		"",
		"Ошибка",
		"Ошибка_1_НеВыбраныЗаказы",
		Неопределено
		)
		);
		мОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	мОшибки = мОшибки Или Не тблТСДляМаршрутизации.Количество();
	
	Если Не мОшибки И (НастройкаАлгоритмМаршрутизацииСтрока = "Очередей" 
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт") Тогда 
		Для Каждого ТекЗаказ Из уатЗащищенныеФункцииСервер_уэ.ПолучитьОшибкиЗаполненияВремениРасстояния(мсвЗаказыДляПроверки, НастройкаКластеризации) Цикл 
			МассивОшибок.Добавить(
				Новый Структура(
					"Группа, Критичность, КодОшибки, Объект",
					"Заказы",
					"Предупреждение",
					?(ИспользованиеКластеризации, "Ошибка_23_НеЗаполненоВремяИРасстояниеМеждуКластерамиЗаказа",
						"Ошибка_24_НеЗаполненоВремяИРасстояниеМеждуПунктамиЗаказа"),
					ТекЗаказ
				)
			);
			мПредупреждения = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
		
		мсвВыбранныеЗаказы = Новый Массив();
		Для Каждого ТекСтрокаЗаказ Из кэшСписокОтмеченныхЗаказов Цикл
			мсвВыбранныеЗаказы.Добавить(ТекСтрокаЗаказ.Ссылка);
		КонецЦикла;

		МассивЗаказов = ПолучитьМаршрутыПоЗаказам(мсвВыбранныеЗаказы);
		
		Для Каждого ТекСтрокаЗаказ Из мсвВыбранныеЗаказы Цикл
			Если МассивЗаказов.Найти(ТекСтрокаЗаказ) = Неопределено Тогда 
				МассивОшибок.Добавить(
				Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Предупреждение",
				"Ошибка_35_ЗаказНеВключенВМаршруты",
				ТекСтрокаЗаказ
				)
				);
				мПредупреждения = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказыБезРазрешенныхТС(мсвЗаказы, мсвТС, СтруктураНастроекАРМ)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В (&Заказы)");
	Запрос.УстановитьПараметр("Заказы", мсвЗаказы);
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТС = Новый ТаблицаЗначений;
	ТаблицаТС.Колонки.Добавить("ТС", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	Для Каждого ТекТС Из мсвТС Цикл
		НоваяСтрока = ТаблицаТС.Добавить();
		НоваяСтрока.ТС = ТекТС.ТС;
	КонецЦикла;
	
	ПроверятьТолькоНаличиеТС = Истина;
	НаличиеРазрешенныхТС = МодульВнешнейМаршрутизации.ПолучитьРазрешенныеТСПоЗаказам(
		ТаблицаЗаказов, ТаблицаТС, СтруктураНастроекАРМ, ПроверятьТолькоНаличиеТС);
	ЗаказыБезРазрешенныхТС = Новый Массив;
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		Если НаличиеРазрешенныхТС.Получить(ТекЗаказ) <> Истина Тогда
			ЗаказыБезРазрешенныхТС.Добавить(ТекЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказыБезРазрешенныхТС;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПриНачалеМаршрутизации_ОбщиеПроверки(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации)
	
	// Общие проверки.
	Если тблТСДляМаршрутизации.Количество() = 0 Тогда
		Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
			И Не НастройкаРежимДопланирования Тогда
			КодОшибки = "Ошибка_36_НеВыбраныТС";
		ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
			И НастройкаРежимДопланирования Тогда
			КодОшибки = "Ошибка_37_НеВыбраныТС";
		Иначе
			КодОшибки = "Ошибка_0_НеВыбраныТС";
		КонецЕсли;
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"ТС",
				"Ошибка",
				КодОшибки,
				Неопределено
			)
		);
		мОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	ЕстьОтмеченныеЗаказыДляМаршрутизации = Ложь;
	Для Каждого ТекСтрока Из ОтмеченныеЗаказы Цикл
		ЕстьОтмеченныеЗаказыДляМаршрутизации = Истина;
		Прервать;
	КонецЦикла;
	
	Если НЕ ЕстьОтмеченныеЗаказыДляМаршрутизации тогда
		МассивОшибок.Добавить(
			Новый Структура(
				"Группа, Критичность, КодОшибки, Объект",
				"Заказы",
				"Ошибка",
				"Ошибка_1_НеВыбраныЗаказы",
				Неопределено
			)
		);
		мОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения склада.
	Если (НастройкаАлгоритмМаршрутизацииСтрока = "Очередей"
		ИЛИ НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт")
		И НЕ НастройкаИндивидуальныйГаражТС И НЕ ЗначениеЗаполнено(НастройкаАдресВыезда) Тогда 
		МассивОшибок.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект",
		"",
		"Ошибка",
		"Ошибка_20_НеЗаполненСклад",
		Неопределено
		)
		);
		мОшибки = Истина;
		Возврат;
	ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
		И (НастройкаВыездСоСкладаСобственныеТС ИЛИ НастройкаВыездСоСкладаПривлеченныеТС ИЛИ НастройкаВыездСоСкладаВиртуальныеТС
		ИЛИ НастройкаЗаездНаСкладСобственныеТС ИЛИ НастройкаЗаездНаСкладПривлеченныеТС ИЛИ НастройкаЗаездНаСкладВиртуальныеТС) 
		И Не ЗначениеЗаполнено(НастройкаАдресВыезда) Тогда
		
		МассивОшибок.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект",
		"",
		"Ошибка",
		"Ошибка_20_НеЗаполненСклад",
		Неопределено
		)
		);
		мОшибки = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации,
	флЕстьМинимальныйВесГруза, флЕстьМинимальныйОбъемГруза, флЕстьМинимальноеКоличествоУпаковок)
	
	МассивУдТС = Новый Массив();
	Если НастройкаАлгоритмМаршрутизацииСтрока = "Очередей" Тогда
		МассивУдТС = ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_Очередей(мОшибки, мПредупреждения,
			МассивОшибок, тблТСДляМаршрутизации);
	ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Тогда
		МассивУдТС = ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_КларкРайт(мОшибки, мПредупреждения,
			МассивОшибок, тблТСДляМаршрутизации,
			флЕстьМинимальныйВесГруза, флЕстьМинимальныйОбъемГруза, флЕстьМинимальноеКоличествоУпаковок);
	ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Тогда
		МассивУдТС = ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_Яндекс(мОшибки, мПредупреждения,
			МассивОшибок, тблТСДляМаршрутизации);
	ИначеЕсли НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
		МассивУдТС = ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_ФиксМаршруты(мОшибки, мПредупреждения,
			МассивОшибок, тблТСДляМаршрутизации);
	КонецЕсли;

	Для Каждого ТекУдТС Из МассивУдТС Цикл
		удИндекс = тблТСДляМаршрутизации.Найти(ТекУдТС);
		Если удИндекс <> Неопределено Тогда
			тблТСДляМаршрутизации.Удалить(удИндекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_Очередей(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации)
	
	// Проверяем ТС.
	МассивУдТС = Новый Массив();
	Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл   
		
		Если НастройкаИндивидуальныйГаражТС = 1
			И НЕ ЗначениеЗаполнено(ТекСтрокаТС.Гараж) Тогда 
			МассивОшибок.Добавить(
			Новый Структура(
			"Группа, Критичность, КодОшибки, Объект",
			"ТС",
			"Предупреждение",
			"Ошибка_3_ДляТСНеУказанГараж",
			ТекСтрокаТС.ТС
			)
			);
			мПредупреждения = Истина;
			МассивУдТС.Добавить(ТекСтрокаТС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивУдТС;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_Яндекс(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации)
	
	// Проверяем ТС.
	МассивУдТС = Новый Массив();
	Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл   
		
		Если ((ТекСтрокаТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")
			И (НастройкаВыездИзГаражаСобственныеТС ИЛИ НастройкаВозвратВГаражСобственныеТС)) 
			ИЛИ (ТекСтрокаТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")
			И (НастройкаВыездИзГаражаПривлеченныеТС ИЛИ НастройкаВозвратВГаражПривлеченныеТС))
			ИЛИ (ТекСтрокаТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное")
			И (НастройкаВыездИзГаражаВиртуальныеТС ИЛИ НастройкаВозвратВГаражВиртуальныеТС)))
			И Не ЗначениеЗаполнено(ТекСтрокаТС.Гараж) Тогда
			МассивОшибок.Добавить(
			Новый Структура(
			"Группа, Критичность, КодОшибки, Объект",
			"ТС",
			"Предупреждение",
			"Ошибка_3_ДляТСНеУказанГараж",
			ТекСтрокаТС.ТС
			)
			);
			мПредупреждения = Истина;
			МассивУдТС.Добавить(ТекСтрокаТС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивУдТС;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_ФиксМаршруты(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации)
	
	// Проверяем ТС.
	МассивУдТС = Новый Массив();
	Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл   
		
		Если ((ТекСтрокаТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")
			И (НастройкаВыездИзГаражаСобственныеТС ИЛИ НастройкаВозвратВГаражСобственныеТС)) 
			ИЛИ (ТекСтрокаТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")
			И (НастройкаВыездИзГаражаПривлеченныеТС ИЛИ НастройкаВозвратВГаражПривлеченныеТС))
			ИЛИ (ТекСтрокаТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное")
			И (НастройкаВыездИзГаражаВиртуальныеТС ИЛИ НастройкаВозвратВГаражВиртуальныеТС)))
			И Не ЗначениеЗаполнено(ТекСтрокаТС.Гараж) Тогда
			МассивОшибок.Добавить(
			Новый Структура(
			"Группа, Критичность, КодОшибки, Объект",
			"ТС",
			"Предупреждение",
			"Ошибка_3_ДляТСНеУказанГараж",
			ТекСтрокаТС.ТС
			)
			);
			мПредупреждения = Истина;
			МассивУдТС.Добавить(ТекСтрокаТС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивУдТС;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуПриНачалеМаршрутизации_ПроверкаТС_КларкРайт(мОшибки, мПредупреждения, МассивОшибок, тблТСДляМаршрутизации,
	флЕстьМинимальныйВесГруза, флЕстьМинимальныйОбъемГруза, флЕстьМинимальноеКоличествоУпаковок)
	
	// Проверяем ТС.
	МассивУдТС = Новый Массив();
	
	Если НЕ УчитыватьОграниченияПоЗагрузкеТС Тогда
		Возврат МассивУдТС;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл   
		Если ТекСтрокаТС.МинимальныйВесГруза > 0 Тогда 
			флЕстьМинимальныйВесГруза   = Истина;
		КонецЕсли;
		Если ТекСтрокаТС.МинимальныйОбъемГруза > 0 Тогда 
			флЕстьМинимальныйОбъемГруза = Истина;
		КонецЕсли;
		Если ТекСтрокаТС.МинимальноеКоличествоУпаковок > 0 Тогда 
			флЕстьМинимальноеКоличествоУпаковок = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивУдТС;
	
КонецФункции

&НаКлиенте
Процедура МаршрутизацияРарусОбновитьКластеры(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ОбновитьКластеры" Тогда 
		Если НастройкаМаршрутизацияВФоновомРежиме Тогда 
			ПараметрыВыполненияФЗ = Новый Массив();
			ПараметрыВыполненияФЗ.Добавить(НастройкаКластеризации);
			ПараметрыВыполненияФЗ.Добавить(ДополнительныеПараметры.мсвДопАдреса);
			
			ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.ОбновитьДанныеКластеров";
			
			ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("МаршрутизацияКомпонентаРарусПослеОбновленияКластеров", ЭтотОбъект, ДополнительныеПараметры.ДопПараметры);
			
			ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
			Если ЗаданиеВыполнено Тогда
				МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры.ДопПараметры);
				Возврат;
			КонецЕсли;
			
			// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
			ПараметрыОбработчикаОжидания = Новый Структура(
				"МинимальныйИнтервал,
				|МаксимальныйИнтервал,
				|ТекущийИнтервал,
				|КоэффициентУвеличенияИнтервала", 
				1, 15, 1, 1.4);
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			
			ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
		Иначе 
			уатЗащищенныеФункцииСервер_уэ.ОбновитьДанныеКластеров(, НастройкаКластеризации, ДополнительныеПараметры.мсвДопАдреса);
			МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры.ДопПараметры);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = "ПродолжитьБезОбновления" Тогда 
		МаршрутизацияКомпонентаРарусПослеОбновленияКластеров(Неопределено, ДополнительныеПараметры.ДопПараметры);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаршрутыПоЗаказам(мсвВыбранныеЗаказы)
		
	ДанныеПоМаршрутам = Обработки.уатАРМЛогиста_уэ.ПолучитьМаршрутыПоЗаказам(мсвВыбранныеЗаказы);
	ТаблМаршрутов = ДанныеПоМаршрутам.МаршрутыПоЗаказам;
	
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрока Из ТаблМаршрутов Цикл
		МассивЗаказов.Добавить(ТекСтрока.Заказ);
	КонецЦикла;
	
	Возврат МассивЗаказов;
	
КонецФункции

&НаКлиенте
Процедура МаршрутыОчиститьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыДерево.ПолучитьЭлементы().Очистить();
	Иначе
		МаршрутыСписок.Очистить();
		МаршрутыСписокЗаказов.Очистить();
		МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	ОчиститьМассивРаспределенныхЗаказов();
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	Оповестить("АРМЛогиста_АктивизацияСтрокиТС", Новый Структура("Очистить", Истина), ЭтотОбъект);
	
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНеподходящиеПоХарактеристикамЗаказы(тблТСДляМаршрутизации, мсвЗаказыДляПроверки, ИспользоватьХарактеристикиЗаказовНаТС)
	
	Результат = Новый Массив();
	
	Если НЕ ИспользоватьХарактеристикиЗаказовНаТС Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвЗаказыДляПроверки", мсвЗаказыДляПроверки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатЗаказГрузоотправителяХарактеристики.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителяХарактеристики.Характеристика КАК Характеристика
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя.Характеристики КАК уатЗаказГрузоотправителяХарактеристики
	               |ГДЕ
	               |	уатЗаказГрузоотправителяХарактеристики.Ссылка В(&мсвЗаказыДляПроверки)
	               |ИТОГИ ПО
	               |	Ссылка";
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеЗаказов = Новый Соответствие();
	Пока ВыборкаЗаказ.Следующий() Цикл
		Выборка = ВыборкаЗаказ.Выбрать();
		
		МассивХарактеристик = Новый Массив();
		Пока Выборка.Следующий() Цикл
			МассивХарактеристик.Добавить(Выборка.Характеристика);
		КонецЦикла;
		СоответствиеЗаказов.Вставить(ВыборкаЗаказ.Ссылка, МассивХарактеристик);
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказыДляПроверки Цикл 
		
		ТребуемыеХарактеристики = СоответствиеЗаказов.Получить(ТекЗаказ);
		ЕстьПодходящееТС = Ложь;
		
		Если ТребуемыеХарактеристики = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого ТекСтрокаТС Из тблТСДляМаршрутизации Цикл 
			флПодходит = Истина;
			
			Для Каждого ТекХарактеристика Из ТребуемыеХарактеристики Цикл 
				Если ТекСтрокаТС.Характеристики.Найти(ТекХарактеристика) = Неопределено Тогда 
					флПодходит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флПодходит Тогда 
				ЕстьПодходящееТС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПодходящееТС Тогда 
			Результат.Добавить(ТекЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНеподходящиеПоХарактеристикамЗаказы()

&НаСервере
Функция ПодготовитьТаблицуТСДляМаршрутизации(ЗаказыДляМаршрутизации)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Возврат ПодготовитьТаблицуТСДляМаршрутизацииДерево();
	Иначе
		Возврат ПодготовитьТаблицуТСДляМаршрутизацииСписок(ЗаказыДляМаршрутизации);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуТСДляМаршрутизацииДерево()
	
	тблТСДляМаршрутизации = Новый Массив();
	кэшСписокОтмеченныхЗаказов.Очистить();
	СоответствиеЗаказов.Очистить();

	// Заполним таблицу пустыми узлами ТС.
	// ТС, для которых уже сформированы маршруты, также могут попадать в таблицу, если настройки это позволяют
	Для Каждого ТекТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		Если ТекТС.ПолучитьЭлементы().Количество() = 0
			ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" И НастройкаИспользоватьМногорейсовыеМаршруты
				И Не ТекТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное)
			ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
				И (НастройкаРежимДопланирования ИЛИ НастройкаНесколькоМаршрутныхЛистовНаТС))
			ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс"
				И НастройкаРежимДопланирования) Тогда
			
			Модель      = ТекТС.МодельТС;
			
			СтруктураСтрокиТС = Новый Структура(
				"ТСПредставление,ТС,ИндексСтрокиТС,Гараж,ГаражЛат,ГаражЛон,СобственныйВес,ЭтоВиртуальноеТС,
				|КоличествоВиртуальныхТС,МаксимальноеКоличествоУпаковок,МинимальныйВесГруза,
				|МинимальныйОбъемГруза,МинимальноеКоличествоУпаковок,ДатаВыездаТС,GUID, ПринадлежностьТС,
				|МаршрутыСписок"
			);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиТС, ТекТС,, "ТС");
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
				И НастройкаРежимДопланирования
				И ТекТС.ПолучитьЭлементы().Количество() > 0 Тогда
				СуществующиеМаршрутныеЛисты = Новый Массив;
				ИспользованиеТСРазрешено = Ложь;
				Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл
					Если ТекМЛ.МаршрутныйЛистОтправлен Тогда
						Продолжить;
					КонецЕсли;
					
					ПогрузкаСегодня = Ложь;
					Для Каждого ТекСтрокаМЛ Из ТекМЛ.ПолучитьЭлементы() Цикл
						ПогрузкаСегодня = НачалоДня(ТекСтрокаМЛ.УбытиеПлан) = ДатаПланирования;
						Прервать;
					КонецЦикла;
					Если НЕ ПогрузкаСегодня Тогда
						ИспользованиеТСРазрешено = Истина;
						Продолжить;
					КонецЕсли;

					// Записываем данные о Маршрутном листе
					ДанныеМаршрутногоЛиста = Новый Структура;
					Если Не ЗначениеЗаполнено(ТекМЛ.GUID) Тогда
						ТекМЛ.GUID = Новый УникальныйИдентификатор;
					КонецЕсли;
					ДанныеМаршрутногоЛиста.Вставить("IDМаршрутногоЛиста", ТекМЛ.GUID);
					СуществующиеМаршрутныеЛисты.Добавить(ДанныеМаршрутногоЛиста);
					ИспользованиеТСРазрешено = Истина;

				КонецЦикла;
				Если ИспользованиеТСРазрешено Тогда
					ЗаказыДляМаршрутизации = Новый Массив();
					СтруктураСтрокиТС.Вставить("МаршрутныеЛистыДляДопланирования", СуществующиеМаршрутныеЛисты);
					ЭлементыВеткаЗаказы = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Заказ"));
					Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл
						Для Каждого ТекПункт Из ТекМЛ.ПолучитьЭлементы() Цикл
							Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
								Если ТекЗаказ.Операция <> Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
									Продолжить;
								КонецЕсли;
								
								Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
									ДанныеГруза = Новый Структура();
									ДанныеГруза.Вставить("Заказ",       ТекЗаказ.Этап);
									ДанныеГруза.Вставить("НомерСтроки", 0);
									ДанныеГруза.Вставить("Груз",        Неопределено);
									ДанныеГруза.Вставить("Количество",  1);
									ДанныеГруза.Вставить("Номер",       ТекЗаказ.Номер);
									ДанныеГруза.Вставить("ИдентификаторСтроки", "");
									ДанныеГруза.Вставить("Количество",  1);
									ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекТС.GUID);
									ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
									
									НоваяСтрокаЗаказа = кэшСписокОтмеченныхЗаказов.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, ТекЗаказ);
									НоваяСтрокаЗаказа.ЦветДокумента  = ТекЗаказ.ЦветДокумента;
									НоваяСтрокаЗаказа.Груз           = Неопределено;
									НоваяСтрокаЗаказа.КоличествоМест = ТекЗаказ.КолМест;
									НоваяСтрокаЗаказа.Ссылка         = ТекЗаказ.Этап;
									НоваяСтрокаЗаказа.ИдентификаторСтроки  = "";
									НоваяСтрокаЗаказа.АдресНазначения   = ТекЗаказ.Этап.АдресНазначения;
									НоваяСтрокаЗаказа.АдресОтправленияПредставление  = ТекЗаказ.Этап.АдресНазначения;
									НоваяСтрокаЗаказа.АдресОтправления  = ТекЗаказ.Этап.АдресОтправления;
									НоваяСтрокаЗаказа.АдресНазначенияПредставление  = ТекЗаказ.Этап.АдресОтправления;
									НоваяСтрокаЗаказа.Номер                         = ТекЗаказ.Этап.Номер;
									
									НоваяСтрока = СоответствиеЗаказов.Добавить();
									НоваяСтрока.Заказ  = ТекЗаказ.Этап;
									НоваяСтрока.Строка = "";
								Иначе
									Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл
										ДанныеГруза = Новый Структура();
										ДанныеГруза.Вставить("Заказ",               ТекЗаказ.Этап);
										ДанныеГруза.Вставить("НомерСтроки",         ТекГруз.НомерСтроки);
										ДанныеГруза.Вставить("Груз",                ТекГруз.Группировка);
										ДанныеГруза.Вставить("Количество",          ТекГруз.Количество);
										ДанныеГруза.Вставить("Номер",               ТекЗаказ.Номер);
										ДанныеГруза.Вставить("ИдентификаторСтроки", ТекГруз.Код);
										ДанныеГруза.Вставить("IDМаршрутногоЛиста",  ТекТС.GUID);
										ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
										
										НоваяСтрокаЗаказа = кэшСписокОтмеченныхЗаказов.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, ТекГруз);
										НоваяСтрокаЗаказа.ЦветДокумента  = ТекЗаказ.ЦветДокумента;
										НоваяСтрокаЗаказа.Груз           = ТекГруз.Группировка;
										НоваяСтрокаЗаказа.КоличествоМест = ТекГруз.КолМест;
										НоваяСтрокаЗаказа.Ссылка         = ТекЗаказ.Этап;
										НоваяСтрокаЗаказа.ИдентификаторСтроки  = ТекГруз.Код;
										НоваяСтрокаЗаказа.АдресНазначения   = ТекЗаказ.Этап.АдресНазначения;
										НоваяСтрокаЗаказа.АдресОтправленияПредставление  = ТекЗаказ.Этап.АдресНазначения;
										НоваяСтрокаЗаказа.АдресОтправления  = ТекЗаказ.Этап.АдресОтправления;
										НоваяСтрокаЗаказа.АдресНазначенияПредставление  = ТекЗаказ.Этап.АдресОтправления;
										НоваяСтрокаЗаказа.Номер                         = ТекЗаказ.Этап.Номер;
										
										НоваяСтрока = СоответствиеЗаказов.Добавить();
										НоваяСтрока.Заказ  = ТекЗаказ.Этап;
										НоваяСтрока.Строка = ТекГруз.Код;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					
					СтруктураСтрокиТС.Вставить("ЗаказыДляДопланирования", ЗаказыДляМаршрутизации);

					
				Иначе
					// ТС не подходит для допланирования, т.к. нет подходящих маршрутных листов.
					// Поэтому ТС не используется для маршрутизации
					Продолжить;
				КонецЕсли;
			КонецЕсли;
				
			// {pugili 05.11.2020}
			// Проверка того, что созданные для ТС маршрутные листы подходят для допланирования
			// или для создания дополнительных Маршрутных листов
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
				И (НастройкаРежимДопланирования ИЛИ НастройкаНесколькоМаршрутныхЛистовНаТС)
				И ТекТС.ПолучитьЭлементы().Количество() > 0 Тогда
				СуществующиеМаршрутныеЛисты = Новый Массив;
				ИспользованиеТСРазрешено = Ложь;
				Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл
					// Допланирование с помощью алгоритма распределения по фиксированным маршрутам возможно
					// только для Маршрутных листов с заполненными маршрутами, для которых установлен флаг 
					// "Использовать для планирования в АРМ Логиста".
					// {pugili 24.12.2020}
					Если Не ЗначениеЗаполнено(ТекМЛ.Маршрут) Тогда
						Продолжить;
					Иначе
						РеквизитыМаршрута = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекМЛ.Маршрут,
							"ИспользоватьДляПланированияВАРМЛогиста, ПометкаУдаления, Статус");
						Если Не РеквизитыМаршрута.ИспользоватьДляПланированияВАРМЛогиста
							Или РеквизитыМаршрута.ПометкаУдаления
							Или РеквизитыМаршрута.Статус <> Перечисления.уатСтатусыДействия.Действует Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					// {/pugili 24.12.2020}
					
					Если ТекМЛ.МаршрутныйЛистОтправлен И Не НастройкаНесколькоМаршрутныхЛистовНаТС Тогда
						Продолжить;
					КонецЕсли;
					
					// {pugili 17.11.2020}
					// Запрещено модифицировать Маршрутные листы, у которых день отправления меньше рабочей даты,
					// для того, чтобы многодневные Маршрутные листы, отправляемые вчера, не получали новые заказы при допланировании.
					Если ТекМЛ.Маршрут.Этапы.Количество() > 0 Тогда
						ПунктПогрузки = ТекМЛ.Маршрут.Этапы[0].ПунктОтправления;
						ПогрузкаСегодня = Ложь;
						Для Каждого ТекСтрокаМЛ Из ТекМЛ.ПолучитьЭлементы() Цикл
							Если ТекСтрокаМЛ.Группировка = ПунктПогрузки Тогда
								СекундВДне = 86400;
								ПогрузкаСегодня = (Не ТекМЛ.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) = ДатаПланирования)
									Или (ТекМЛ.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) + СекундВДне = ДатаПланирования);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ПогрузкаСегодня Тогда
							ИспользованиеТСРазрешено = Истина;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					// {/pugili 17.11.2020}
					
					// Записываем данные о Маршрутном листе
					ДанныеМаршрутногоЛиста = Новый Структура;
					ДанныеМаршрутногоЛиста.Вставить("Маршрут", ТекМЛ.Маршрут);
					ДанныеМаршрутногоЛиста.Вставить("ЗапрещеноИзменениеМаршрутногоЛиста", 
						ТекМЛ.МаршрутныйЛистОтправлен ИЛИ Не НастройкаРежимДопланирования);
					Если Не ЗначениеЗаполнено(ТекМЛ.GUID) Тогда
						ТекМЛ.GUID = Новый УникальныйИдентификатор;
					КонецЕсли;
					ДанныеМаршрутногоЛиста.Вставить("IDМаршрутногоЛиста", ТекМЛ.GUID);
					СуществующиеМаршрутныеЛисты.Добавить(ДанныеМаршрутногоЛиста);
					ИспользованиеТСРазрешено = Истина;
				КонецЦикла;
				
				Если ИспользованиеТСРазрешено Тогда
					СтруктураСтрокиТС.Вставить("СуществующиеМаршрутныеЛисты", СуществующиеМаршрутныеЛисты);
					СтруктураСтрокиТС.Вставить("МаршрутныеЛистыДляДопланирования", СуществующиеМаршрутныеЛисты);
				Иначе
					// ТС не подходит для допланирования, т.к. нет подходящих маршрутных листов.
					// Поэтому ТС не используется для маршрутизации
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// {/pugili 05.11.2020}
			
			// {pugili 18.11.2020}
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
				Маршруты = Новый Массив;
				Для Каждого ТекМаршрут Из ТекТС.МаршрутыСписок Цикл
					Маршруты.Добавить(ТекМаршрут.Значение);
				КонецЦикла;
				СтруктураСтрокиТС.Вставить("Маршруты", Маршруты);
			КонецЕсли;
			// {/pugili 18.11.2020}
			
			СтруктураСтрокиТС.ТС               = ТекТС.ТС;
			СтруктураСтрокиТС.ПринадлежностьТС = ТекТС.ПринадлежностьТС;
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" Тогда 
				Если НастройкаИндивидуальныйГаражТС = 1 Тогда 
					СтруктураСтрокиТС.Гараж = ТекТС.ГаражТС;
				Иначе 
					СтруктураСтрокиТС.Гараж = НастройкаАдресВыезда;
				КонецЕсли;
				
				СтруктураСтрокиТС.ГаражЛат = ТекТС.ГаражТСЛат;
				СтруктураСтрокиТС.ГаражЛон = ТекТС.ГаражТСЛон;
				
				Если СтруктураСтрокиТС.ГаражЛат = 0 И СтруктураСтрокиТС.ГаражЛон = 0 Тогда 
					СтруктураСтрокиТС.Гараж = Неопределено;
				КонецЕсли;
				
			Иначе 
				СтруктураСтрокиТС.Гараж = ТекТС.ГаражТС;
			КонецЕсли;
			
			СтруктураСтрокиТС.Вставить("Грузоподъемность", ТекТС.Грузоподъемность);
			СтруктураСтрокиТС.Вставить("ОбъемКузова",      0);
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" И НастройкаУчитыватьСекцииТранспортныхСредств Тогда 
				ЗапросСекции = Новый Запрос();
				ЗапросСекции.УстановитьПараметр("Владелец", ТекТС.ТС);
				ЗапросСекции.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатСекцииТС.Объем КАК Объем
				|ИЗ
				|	Справочник.уатСекцииТС КАК уатСекцииТС
				|ГДЕ
				|	уатСекцииТС.Владелец = &Владелец
				|	И НЕ уатСекцииТС.ПометкаУдаления";
				
				РезультатСекции = ЗапросСекции.Выполнить();
				
				Если РезультатСекции.Пустой() Тогда 
					СтруктураСтрокиТС.ОбъемКузова = ТекТС.ОбъемКузова;
					
				Иначе 
					ВыборкаСекции = РезультатСекции.Выбрать();
					Пока ВыборкаСекции.Следующий() Цикл 
						ОбъемКузова = ВыборкаСекции.Объем;
					КонецЦикла;
					СтруктураСтрокиТС.ОбъемКузова = ОбъемКузова * КоэффициентОбъемаКузова;
				КонецЕсли;
				
			Иначе 
				СтруктураСтрокиТС.Вставить("ОбъемКузова", ТекТС.ОбъемКузова);
			КонецЕсли;
			
			СтруктураСтрокиТС.СобственныйВес   = ТекТС.СобственныйВесТС * КоэффициентГрузоподъемности;
			СтруктураСтрокиТС.ИндексСтрокиТС   = МаршрутыДерево.ПолучитьЭлементы().Индекс(ТекТС);
			СтруктураСтрокиТС.ЭтоВиртуальноеТС = (ТекТС.ПринадлежностьТС
				= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") И ТекТС.КоличествоВиртуальныхТС > 0);
			
			СтруктураСтрокиТС.МинимальныйВесГруза           = ТекТС.МинимальныйВесГруза;
			СтруктураСтрокиТС.МинимальныйОбъемГруза         = ТекТС.МинимальныйОбъемГруза;
			СтруктураСтрокиТС.МинимальноеКоличествоУпаковок = ТекТС.МинимальноеКоличествоУпаковок;
			
			СтруктураСтрокиТС.Вставить("Прицепы", Новый Массив());
			
			Если ЗначениеЗаполнено(ТекТС.Прицеп1) Тогда 
				ДанныеПрицепа = Новый Структура();
				ДанныеПрицепа.Вставить("Прицеп",                         ТекТС.Прицеп1);
				ДанныеПрицепа.Вставить("Грузоподъемность",               ТекТС.Прицеп1Грузоподъемность);
				ДанныеПрицепа.Вставить("ОбъемКузова",                    ТекТС.Прицеп1ОбъемКузова);
				ДанныеПрицепа.Вставить("МаксимальноеКоличествоУпаковок", ТекТС.Прицеп1МаксимальноеКоличествоУпаковок);
				СтруктураСтрокиТС.Прицепы.Добавить(ДанныеПрицепа);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекТС.Прицеп2) Тогда 
				ДанныеПрицепа = Новый Структура();
				ДанныеПрицепа.Вставить("Прицеп",                         ТекТС.Прицеп2);
				ДанныеПрицепа.Вставить("Грузоподъемность",               ТекТС.Прицеп2Грузоподъемность);
				ДанныеПрицепа.Вставить("ОбъемКузова",                    ТекТС.Прицеп2ОбъемКузова);
				ДанныеПрицепа.Вставить("МаксимальноеКоличествоУпаковок", ТекТС.Прицеп2МаксимальноеКоличествоУпаковок);
				СтруктураСтрокиТС.Прицепы.Добавить(ДанныеПрицепа);
			КонецЕсли;
			
			Если ТекТС.ПолучитьЭлементы().Количество()
				И НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
				И НастройкаИспользоватьМногорейсовыеМаршруты Тогда 
				// Получение доступного времени выезда для многорейсового маршрута.
				ПоследнийПунктМаршрута = Неопределено;
				ДатаВыездаТС           = Неопределено;
				
				Для Каждого ТекМЛ Из ТекТС.ПолучитьЭлементы() Цикл 
					ИндексПунктаГаража = ТекМЛ.ПолучитьЭлементы().Количество() - 1;
					Если ИндексПунктаГаража < 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					СтрокаПунктаГаража = ТекМЛ.ПолучитьЭлементы()[ИндексПунктаГаража];
					
					Если ДатаВыездаТС = Неопределено Или СтрокаПунктаГаража.УбытиеПлан >= ДатаВыездаТС Тогда 
						ПоследнийПунктМаршрута = СтрокаПунктаГаража.Адрес;
						ДатаВыездаТС           = СтрокаПунктаГаража.УбытиеПлан;
					КонецЕсли;
				КонецЦикла;
				
				Если ДатаВыездаТС = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ПоследнийПунктМаршрута = НастройкаАдресВыезда Тогда 
					мсвПунктыЗапрос = Новый Массив();
					мсвПунктыЗапрос.Добавить(Новый Структура("Пункт1, Пункт2", ПоследнийПунктМаршрута, НастройкаАдресВыезда));
					
					Если НастройкаРежимОтображенияМЛ = 0 Тогда
						ПолучитьТаблицуРасстоянийМеждуПунктами(мсвПунктыЗапрос, МаршрутыДерево);
					Иначе
						ПолучитьТаблицуРасстоянийМеждуПунктамиСписок(мсвПунктыЗапрос, МаршрутыСписокЗаказов);
					КонецЕсли;
					
					Если НЕ мсвПунктыЗапрос.Количество() = 0 Тогда 
						ВремяВозврата = ПолучитьВремяВПутиСУчетомСреднейСкорости(
							мсвПунктыЗапрос[0].Расстояние, 
							мсвПунктыЗапрос[0].Время, 
							ДатаВыездаТС,
							кэшСредняяСкоростьДвижения
						);
						
						ДатаВыездаТС = СложитьВремя(ДатаВыездаТС, ВремяВозврата);
					КонецЕсли;
				КонецЕсли;
				
				СтруктураСтрокиТС.ДатаВыездаТС = ДатаВыездаТС;
			КонецЕсли;
			
			// Алгоритм Кларка-Райта может создавать только один дополнительный маршрутный лист на одно ТС
			Если НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Тогда
				НайденоТС = Ложь;
				Для Каждого ТекСтруктураТС Из тблТСДляМаршрутизации Цикл
					Если ТекСтруктураТС.ТС = СтруктураСтрокиТС.ТС Тогда
						НайденоТС = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденоТС Тогда
					// Модифицируем дату выезда, если это требуется, и пропускаем ТС, так как это ТС уже обработано
					Если ЗначениеЗаполнено(ТекСтруктураТС.ДатаВыездаТС) И ЗначениеЗаполнено(СтруктураСтрокиТС.ДатаВыездаТС) Тогда
						ТекСтруктураТС.ДатаВыездаТС = Макс(ТекСтруктураТС.ДатаВыездаТС, СтруктураСтрокиТС.ДатаВыездаТС);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСтрокиТС.Вставить("Характеристики", Новый Массив());
			
			Если ИспользоватьХарактеристикиЗаказовНаТС
					И НастройкаИспользоватьХарактеристикиЗаказовНаТС Тогда 
				Для Каждого СтрокаХарактеристики Из ТекТС.ХарактеристикиТС Цикл 
					СтруктураСтрокиТС.Характеристики.Добавить(СтрокаХарактеристики.Значение);
				КонецЦикла;
			КонецЕсли;
			
			тблТСДляМаршрутизации.Добавить(СтруктураСтрокиТС);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат тблТСДляМаршрутизации;
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуТСДляМаршрутизацииСписок(ЗаказыДляМаршрутизации)
	
	тблТСДляМаршрутизации = Новый Массив();
	кэшСписокОтмеченныхЗаказов.Очистить();
	СоответствиеЗаказов.Очистить();
	
	// Заполним таблицу пустыми узлами ТС.
	// ТС, для которых уже сформированы маршруты, также могут попадать в таблицу, если настройки это позволяют
	Для Каждого ТекТС Из МаршрутыСписок Цикл 
		флТаблицаМаршрутовЗаполнена = Ложь;
		Если (НЕ ЗначениеЗаполнено(ТекТС.МЛ)
			И НЕ ТекТС.НовыйМЛ)
			ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" И НастройкаИспользоватьМногорейсовыеМаршруты
				И Не ТекТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное)
			ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" И (НастройкаРежимДопланирования ИЛИ НастройкаНесколькоМаршрутныхЛистовНаТС)) 
			ИЛИ (НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" И НастройкаРежимДопланирования) Тогда
			
			Модель      = ТекТС.МодельТС;
			
			СтруктураСтрокиТС = Новый Структура(
				"ТСПредставление,ТС,ИндексСтрокиТС,Гараж,ГаражЛат,ГаражЛон,СобственныйВес,ЭтоВиртуальноеТС,
				|КоличествоВиртуальныхТС,МаксимальноеКоличествоУпаковок,МинимальныйВесГруза,
				|МинимальныйОбъемГруза,МинимальноеКоличествоУпаковок,ДатаВыездаТС,GUID, ПринадлежностьТС,
				|МаршрутыСписок, ref"
			);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиТС, ТекТС,, "ТС");
			СтруктураСтрокиТС.КоличествоВиртуальныхТС = 1;
			СтруктураСтрокиТС.ref                     = ТекТС.ТСПредставление;
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "Яндекс" 
				И НастройкаРежимДопланирования
				И (ЗначениеЗаполнено(ТекТС.МЛ) ИЛИ ТекТС.НовыйМЛ) Тогда
				СуществующиеМаршрутныеЛисты = Новый Массив;
				ИспользованиеТСРазрешено = Ложь;
				
				Если ТекТС.МаршрутныйЛистОтправлен Тогда
					Продолжить;
				КонецЕсли;
				
				ПогрузкаСегодня = Ложь;
				ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекТС.АдресВременногоХранилища, ТекТС.GUID);
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
				Для Каждого ТекСтрокаМЛ Из ЭлементыВеткаПункты Цикл
					ПогрузкаСегодня = НачалоДня(ТекСтрокаМЛ.УбытиеПлан) >= ДатаПланирования;
					Прервать;
				КонецЦикла;
				
				Если ПогрузкаСегодня Тогда
					ИспользованиеТСРазрешено = Истина;
				КонецЕсли;
				
				// Записываем данные о Маршрутном листе
				ДанныеМаршрутногоЛиста = Новый Структура;
				Если Не ЗначениеЗаполнено(ТекТС.GUID) Тогда
					ТекТС.GUID = Новый УникальныйИдентификатор;
				КонецЕсли;
				ДанныеМаршрутногоЛиста.Вставить("IDМаршрутногоЛиста", ТекТС.GUID);
				СуществующиеМаршрутныеЛисты.Добавить(ДанныеМаршрутногоЛиста);

				Если ИспользованиеТСРазрешено Тогда
					ЗаказыДляМаршрутизации = Новый Массив();
					СтруктураСтрокиТС.Вставить("МаршрутныеЛистыДляДопланирования", СуществующиеМаршрутныеЛисты);
					ЭлементыВеткаЗаказы = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Заказ"));
					Для Каждого ТекЗаказ Из ЭлементыВеткаЗаказы Цикл
						Если ТекЗаказ.Операция <> Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
							ДанныеГруза = Новый Структура();
							ДанныеГруза.Вставить("Заказ",       ТекЗаказ.Этап);
							ДанныеГруза.Вставить("НомерСтроки", 0);
							ДанныеГруза.Вставить("Груз",        Неопределено);
							ДанныеГруза.Вставить("Количество",  1);
							ДанныеГруза.Вставить("Номер",       ТекЗаказ.Номер);
							ДанныеГруза.Вставить("ИдентификаторСтроки", "");
							ДанныеГруза.Вставить("Количество",  1);
							ДанныеГруза.Вставить("IDМаршрутногоЛиста", ТекТС.GUID);
							ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
							
							НоваяСтрокаЗаказа = кэшСписокОтмеченныхЗаказов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, ТекЗаказ);
							НоваяСтрокаЗаказа.ЦветДокумента  = ТекЗаказ.ЦветДокумента;
							НоваяСтрокаЗаказа.Груз           = Неопределено;
							НоваяСтрокаЗаказа.КоличествоМест = ТекЗаказ.КолМест;
							НоваяСтрокаЗаказа.Ссылка         = ТекЗаказ.Этап;
						    НоваяСтрокаЗаказа.ИдентификаторСтроки  = "";
							НоваяСтрокаЗаказа.АдресНазначения   = ТекЗаказ.Этап.АдресНазначения;
							НоваяСтрокаЗаказа.АдресОтправленияПредставление  = ТекЗаказ.Этап.АдресНазначения;
							НоваяСтрокаЗаказа.АдресОтправления  = ТекЗаказ.Этап.АдресОтправления;
							НоваяСтрокаЗаказа.АдресНазначенияПредставление  = ТекЗаказ.Этап.АдресОтправления;
							НоваяСтрокаЗаказа.Номер                         = ТекЗаказ.Этап.Номер;
							
							НоваяСтрока = СоответствиеЗаказов.Добавить();
							НоваяСтрока.Заказ  = ТекЗаказ.Этап;
							НоваяСтрока.Строка = "";
						Иначе
							ЭлементыВеткаНом = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, GUIDЗаказа, УровеньДерева",
								ТекТС.GUID, ТекЗаказ.GUIDЗаказа, "Номенклатура"));
							Для Каждого ТекГруз Из ЭлементыВеткаНом Цикл
								ДанныеГруза = Новый Структура();
								ДанныеГруза.Вставить("Заказ",               ТекЗаказ.Этап);
								ДанныеГруза.Вставить("НомерСтроки",         ТекГруз.НомерСтроки);
								ДанныеГруза.Вставить("Груз",                ТекГруз.Группировка);
								ДанныеГруза.Вставить("Количество",          ТекГруз.Количество);
								ДанныеГруза.Вставить("Номер",               ТекЗаказ.Номер);
								ДанныеГруза.Вставить("ИдентификаторСтроки", ТекГруз.Код);
								ДанныеГруза.Вставить("IDМаршрутногоЛиста",  ТекТС.GUID);
								ЗаказыДляМаршрутизации.Добавить(ДанныеГруза);
								
								НоваяСтрокаЗаказа = кэшСписокОтмеченныхЗаказов.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, ТекГруз);
								НоваяСтрокаЗаказа.ЦветДокумента  = ТекЗаказ.ЦветДокумента;
								НоваяСтрокаЗаказа.Груз           = ТекГруз.Группировка;
								НоваяСтрокаЗаказа.КоличествоМест = ТекГруз.КолМест;
								НоваяСтрокаЗаказа.Ссылка         = ТекЗаказ.Этап;
								НоваяСтрокаЗаказа.ИдентификаторСтроки  = ТекГруз.Код;
								НоваяСтрокаЗаказа.АдресНазначения   = ТекЗаказ.Этап.АдресНазначения;
								НоваяСтрокаЗаказа.АдресОтправленияПредставление  = ТекЗаказ.Этап.АдресНазначения;
								НоваяСтрокаЗаказа.АдресОтправления  = ТекЗаказ.Этап.АдресОтправления;
								НоваяСтрокаЗаказа.АдресНазначенияПредставление  = ТекЗаказ.Этап.АдресОтправления;
								НоваяСтрокаЗаказа.Номер                         = ТекЗаказ.Этап.Номер;

								НоваяСтрока = СоответствиеЗаказов.Добавить();
								НоваяСтрока.Заказ  = ТекЗаказ.Этап;
								НоваяСтрока.Строка = ТекГруз.Код;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					СтруктураСтрокиТС.Вставить("ЗаказыДляДопланирования", ЗаказыДляМаршрутизации);

				Иначе
					// ТС не подходит для допланирования, т.к. нет подходящих маршрутных листов.
					// Поэтому ТС не используется для маршрутизации
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			// {pugili 05.11.2020}
			// Проверка того, что созданные для ТС маршрутные листы подходят для допланирования
			// или для создания дополнительных Маршрутных листов
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" 
				И (НастройкаРежимДопланирования ИЛИ НастройкаНесколькоМаршрутныхЛистовНаТС)
				И (ЗначениеЗаполнено(ТекТС.МЛ) ИЛИ ТекТС.НовыйМЛ) Тогда
				СуществующиеМаршрутныеЛисты = Новый Массив;
				ИспользованиеТСРазрешено = Ложь;
				
				// Допланирование с помощью алгоритма распределения по фиксированным маршрутам возможно
				// только для Маршрутных листов с заполненными маршрутами, для которых установлен флаг 
				// "Использовать для планирования в АРМ Логиста".
				// {pugili 24.12.2020}
				Если Не ЗначениеЗаполнено(ТекТС.Маршрут) Тогда
					Продолжить;
				Иначе
					РеквизитыМаршрута = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекТС.Маршрут,
					"ИспользоватьДляПланированияВАРМЛогиста, ПометкаУдаления, Статус");
					Если Не РеквизитыМаршрута.ИспользоватьДляПланированияВАРМЛогиста
						Или РеквизитыМаршрута.ПометкаУдаления
						Или РеквизитыМаршрута.Статус <> Перечисления.уатСтатусыДействия.Действует Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				// {/pugili 24.12.2020}
					
				Если ТекТС.МаршрутныйЛистОтправлен И Не НастройкаНесколькоМаршрутныхЛистовНаТС Тогда
					Продолжить;
				КонецЕсли;
				
				// {pugili 17.11.2020}
				// Запрещено модифицировать Маршрутные листы, у которых день отправления меньше рабочей даты,
				// для того, чтобы многодневные Маршрутные листы, отправляемые вчера, не получали новые заказы при допланировании.
				Если ТекТС.Маршрут.Этапы.Количество() > 0 Тогда
					ПунктПогрузки = ТекТС.Маршрут.Этапы[0].ПунктОтправления;
					ПогрузкаСегодня = Ложь;
					
					флТаблицаМаршрутовЗаполнена = Истина;
					ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекТС.АдресВременногоХранилища, ТекТС.GUID);
					
					ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
					Для Каждого ТекСтрокаМЛ Из ЭлементыВеткаПункты Цикл
						Если ТекСтрокаМЛ.Группировка = ПунктПогрузки Тогда
							СекундВДне = 86400;
							ПогрузкаСегодня = (Не ТекТС.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) = ДатаПланирования)
								Или (ТекТС.Маршрут.НочнойМаршрут И НачалоДня(ТекСтрокаМЛ.УбытиеПлан) + СекундВДне = ДатаПланирования);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ПогрузкаСегодня Тогда
						ИспользованиеТСРазрешено = Истина;
					КонецЕсли;
				КонецЕсли;
				// {/pugili 17.11.2020}
				
				// Записываем данные о Маршрутном листе
				ДанныеМаршрутногоЛиста = Новый Структура;
				ДанныеМаршрутногоЛиста.Вставить("Маршрут", ТекТС.Маршрут);
				ДанныеМаршрутногоЛиста.Вставить("ЗапрещеноИзменениеМаршрутногоЛиста", 
				ТекТС.МаршрутныйЛистОтправлен ИЛИ Не НастройкаРежимДопланирования);
				Если Не ЗначениеЗаполнено(ТекТС.GUID) Тогда
					ТекТС.GUID = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				ДанныеМаршрутногоЛиста.Вставить("IDМаршрутногоЛиста", ТекТС.GUID);
				СуществующиеМаршрутныеЛисты.Добавить(ДанныеМаршрутногоЛиста);
				ИспользованиеТСРазрешено = Истина;
				
				Если ИспользованиеТСРазрешено Тогда
					СтруктураСтрокиТС.Вставить("СуществующиеМаршрутныеЛисты", СуществующиеМаршрутныеЛисты);
					СтруктураСтрокиТС.Вставить("МаршрутныеЛистыДляДопланирования", СуществующиеМаршрутныеЛисты);
				Иначе
					// ТС не подходит для допланирования, т.к. нет подходящих маршрутных листов.
					// Поэтому ТС не используется для маршрутизации
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// {/pugili 05.11.2020}
			
			// {pugili 18.11.2020}
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты" Тогда
				Маршруты = Новый Массив;
				Для Каждого ТекМаршрут Из ТекТС.МаршрутыСписок Цикл
					Маршруты.Добавить(ТекМаршрут.Значение);
				КонецЦикла;
				СтруктураСтрокиТС.Вставить("Маршруты", Маршруты);
			КонецЕсли;
			// {/pugili 18.11.2020}
			
			// Для алгоритма "Фиксированные маршруты" строки с одинаковыми ТС необходимо объединить, 
			// чтобы ТС корректно связывались с назначенными для них маршрутами.
			// Для виртуальных ТС это не требуется, так как существование одинаковых виртуальных ТС корректно.
			Если НастройкаАлгоритмМаршрутизацииСтрока = "ФиксМаршруты"
				И Не ТекТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
				ТСОбъединено = Ложь;
				Для Каждого ТекСтрокаТСДляМаршрутизации Из тблТСДляМаршрутизации Цикл
					Если ТекСтрокаТСДляМаршрутизации.ТС = ТекТС.ТС Тогда
						Для Каждого ТекМаршрут Из СтруктураСтрокиТС.Маршруты Цикл
							ТекСтрокаТСДляМаршрутизации.Маршруты.Добавить(ТекМаршрут);
						КонецЦикла;
						
						Если ТекСтрокаТСДляМаршрутизации.ТС = ТекТС.ТС 
							И СтруктураСтрокиТС.Свойство("СуществующиеМаршрутныеЛисты") Тогда
							Если Не ТекСтрокаТСДляМаршрутизации.Свойство("СуществующиеМаршрутныеЛисты") Тогда
								ТекСтрокаТСДляМаршрутизации.Вставить("СуществующиеМаршрутныеЛисты", Новый Массив);
							КонецЕсли;
							Для Каждого ТекДанныеМаршрутногоЛиста Из СтруктураСтрокиТС.СуществующиеМаршрутныеЛисты Цикл
								ТекСтрокаТСДляМаршрутизации.СуществующиеМаршрутныеЛисты.Добавить(ТекДанныеМаршрутногоЛиста);
							КонецЦикла;
						КонецЕсли;
						
						ТСОбъединено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ТСОбъединено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСтрокиТС.ТС               = ТекТС.ТС;
			СтруктураСтрокиТС.ПринадлежностьТС = ТекТС.ПринадлежностьТС;
			
			Если НастройкаАлгоритмМаршрутизации = "Яндекс" Тогда 
				Если НастройкаИндивидуальныйГаражТС = 1 Тогда 
					СтруктураСтрокиТС.Гараж = ТекТС.ГаражТС;
				Иначе 
					СтруктураСтрокиТС.Гараж = НастройкаАдресВыезда;
				КонецЕсли;
				
				СтруктураСтрокиТС.ГаражЛат = ТекТС.ГаражТСЛат;
				СтруктураСтрокиТС.ГаражЛон = ТекТС.ГаражТСЛон;
				
				Если СтруктураСтрокиТС.ГаражЛат = 0 И СтруктураСтрокиТС.ГаражЛон = 0 Тогда 
					СтруктураСтрокиТС.Гараж = Неопределено;
				КонецЕсли;
				
			Иначе 
				СтруктураСтрокиТС.Гараж = ТекТС.ГаражТС;
			КонецЕсли;
			
			СтруктураСтрокиТС.Вставить("Грузоподъемность", ТекТС.Грузоподъемность);
			СтруктураСтрокиТС.Вставить("ОбъемКузова",      0);
			
			Если НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
				И НастройкаУчитыватьСекцииТранспортныхСредств Тогда 
				ЗапросСекции = Новый Запрос();
				ЗапросСекции.УстановитьПараметр("Владелец", ТекТС.ТС);
				ЗапросСекции.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатСекцииТС.Объем КАК Объем
				|ИЗ
				|	Справочник.уатСекцииТС КАК уатСекцииТС
				|ГДЕ
				|	уатСекцииТС.Владелец = &Владелец
				|	И НЕ уатСекцииТС.ПометкаУдаления";
				
				РезультатСекции = ЗапросСекции.Выполнить();
				
				Если РезультатСекции.Пустой() Тогда 
					СтруктураСтрокиТС.ОбъемКузова = ТекТС.ОбъемКузова;
					
				Иначе 
					ВыборкаСекции = РезультатСекции.Выбрать();
					Пока ВыборкаСекции.Следующий() Цикл 
						ОбъемКузова = ВыборкаСекции.Объем;
					КонецЦикла;
					СтруктураСтрокиТС.ОбъемКузова = ОбъемКузова * КоэффициентОбъемаКузова;
				КонецЕсли;
				
			Иначе 
				СтруктураСтрокиТС.Вставить("ОбъемКузова", ТекТС.ОбъемКузова);
			КонецЕсли;
			
			СтруктураСтрокиТС.СобственныйВес   = ТекТС.СобственныйВесТС * КоэффициентГрузоподъемности;
			СтруктураСтрокиТС.ИндексСтрокиТС   = МаршрутыСписок.Индекс(ТекТС);
			СтруктураСтрокиТС.ЭтоВиртуальноеТС = (ТекТС.ПринадлежностьТС
				= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное")
				И ?(НастройкаРежимОтображенияМЛ = 0, ТекТС.КоличествоВиртуальныхТС > 0, Ложь));
			
			СтруктураСтрокиТС.МинимальныйВесГруза           = ТекТС.МинимальныйВесГруза;
			СтруктураСтрокиТС.МинимальныйОбъемГруза         = ТекТС.МинимальныйОбъемГруза;
			СтруктураСтрокиТС.МинимальноеКоличествоУпаковок = ТекТС.МинимальноеКоличествоУпаковок;
			
			СтруктураСтрокиТС.Вставить("Прицепы", Новый Массив());
			
			Если ЗначениеЗаполнено(ТекТС.Прицеп1) Тогда 
				ДанныеПрицепа = Новый Структура();
				ДанныеПрицепа.Вставить("Прицеп",                         ТекТС.Прицеп1);
				ДанныеПрицепа.Вставить("Грузоподъемность",               ТекТС.Прицеп1Грузоподъемность);
				ДанныеПрицепа.Вставить("ОбъемКузова",                    ТекТС.Прицеп1ОбъемКузова);
				ДанныеПрицепа.Вставить("МаксимальноеКоличествоУпаковок", ТекТС.Прицеп1МаксимальноеКоличествоУпаковок);
				СтруктураСтрокиТС.Прицепы.Добавить(ДанныеПрицепа);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекТС.Прицеп2) Тогда 
				ДанныеПрицепа = Новый Структура();
				ДанныеПрицепа.Вставить("Прицеп",                         ТекТС.Прицеп2);
				ДанныеПрицепа.Вставить("Грузоподъемность",               ТекТС.Прицеп2Грузоподъемность);
				ДанныеПрицепа.Вставить("ОбъемКузова",                    ТекТС.Прицеп2ОбъемКузова);
				ДанныеПрицепа.Вставить("МаксимальноеКоличествоУпаковок", ТекТС.Прицеп2МаксимальноеКоличествоУпаковок);
				СтруктураСтрокиТС.Прицепы.Добавить(ДанныеПрицепа);
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ТекТС.МЛ) ИЛИ ТекТС.НовыйМЛ)
				И НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт"
				И НастройкаИспользоватьМногорейсовыеМаршруты Тогда 
				// Получение доступного времени выезда для многорейсового маршрута.
				ПоследнийПунктМаршрута = Неопределено;
				ДатаВыездаТС           = Неопределено;
				
				Если НЕ флТаблицаМаршрутовЗаполнена Тогда
					ПолучитьИзВременногоХранилищаТаблицуМаршрутов(ТекТС.АдресВременногоХранилища, ТекТС.GUID);
				КонецЕсли;
				
				ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекТС.GUID, "Пункт"));
				ИндексПунктаГаража  = ЭлементыВеткаПункты.Количество() - 1;
				Если ИндексПунктаГаража < 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаПунктаГаража = ЭлементыВеткаПункты[ИндексПунктаГаража];
				
				Если ДатаВыездаТС = Неопределено
					Или СтрокаПунктаГаража.УбытиеПлан >= ДатаВыездаТС Тогда 
					ПоследнийПунктМаршрута = СтрокаПунктаГаража.Адрес;
					ДатаВыездаТС           = СтрокаПунктаГаража.УбытиеПлан;
				КонецЕсли;
				
				Если ДатаВыездаТС = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ПоследнийПунктМаршрута = НастройкаАдресВыезда Тогда 
					мсвПунктыЗапрос = Новый Массив();
					мсвПунктыЗапрос.Добавить(Новый Структура("Пункт1, Пункт2", ПоследнийПунктМаршрута, НастройкаАдресВыезда));
					
					Если НастройкаРежимОтображенияМЛ = 0 Тогда
						ПолучитьТаблицуРасстоянийМеждуПунктами(мсвПунктыЗапрос, МаршрутыДерево);
					Иначе
						ПолучитьТаблицуРасстоянийМеждуПунктамиСписок(мсвПунктыЗапрос, МаршрутыСписокЗаказов);
					КонецЕсли;
					
					Если НЕ мсвПунктыЗапрос.Количество() = 0 Тогда 
						ВремяВозврата = ПолучитьВремяВПутиСУчетомСреднейСкорости(
							мсвПунктыЗапрос[0].Расстояние, 
							мсвПунктыЗапрос[0].Время, 
							ДатаВыездаТС,
							кэшСредняяСкоростьДвижения
						);
						
						ДатаВыездаТС = СложитьВремя(ДатаВыездаТС, ВремяВозврата);
					КонецЕсли;
				КонецЕсли;
				
				СтруктураСтрокиТС.ДатаВыездаТС = ДатаВыездаТС;
			КонецЕсли;
			
			// Алгоритм Кларка-Райта может создавать только один дополнительный маршрутный лист на одно ТС
			Если НастройкаАлгоритмМаршрутизацииСтрока = "КларкРайт" Тогда
				НайденоТС = Ложь;
				Для Каждого ТекСтруктураТС Из тблТСДляМаршрутизации Цикл
					Если ТекСтруктураТС.ТС = СтруктураСтрокиТС.ТС Тогда
						НайденоТС = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденоТС Тогда
					// Модифицируем дату выезда, если это требуется, и пропускаем ТС, так как это ТС уже обработано
					Если ЗначениеЗаполнено(ТекСтруктураТС.ДатаВыездаТС) И ЗначениеЗаполнено(СтруктураСтрокиТС.ДатаВыездаТС) Тогда
						ТекСтруктураТС.ДатаВыездаТС = Макс(ТекСтруктураТС.ДатаВыездаТС, СтруктураСтрокиТС.ДатаВыездаТС);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСтрокиТС.Вставить("Характеристики", Новый Массив());
			
			Если ИспользоватьХарактеристикиЗаказовНаТС
					И НастройкаИспользоватьХарактеристикиЗаказовНаТС Тогда 
				Для Каждого СтрокаХарактеристики Из ТекТС.ХарактеристикиТС Цикл 
					СтруктураСтрокиТС.Характеристики.Добавить(СтрокаХарактеристики.Значение);
				КонецЦикла;
			КонецЕсли;
			
			тблТСДляМаршрутизации.Добавить(СтруктураСтрокиТС);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат тблТСДляМаршрутизации;
	
КонецФункции

&НаКлиенте
Процедура МаршрутыДеревоПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.МаршрутыГруппировка Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПризнакМодифицированности();
	
	ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекДанные = Неопределено 
		ИЛИ (НЕ ЗначениеЗаполнено(ТекДанные.Группировка)
		И ТекДанные.УровеньДерева = "ТС")Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.УровеньДерева = "ТС" 
		И ЗначениеЗаполнено(ТекДанные.Группировка) Тогда
		стрДанныеЗапрос = Новый Структура();
		стрДанныеЗапрос.Вставить("ТС",         ТекДанные.Группировка);
		стрДанныеЗапрос.Вставить("ID",         ТекДанные.ПолучитьИдентификатор());
		стрДанныеЗапрос.Вставить("Количество", ТекДанные.КоличествоВиртуальныхТС);
		стрДанныеЗапрос.Вставить("Прицеп1",    ТекДанные.Прицеп1);
		стрДанныеЗапрос.Вставить("Прицеп2",    ТекДанные.Прицеп2);
		мсвЗапрос = Новый Массив();
		мсвЗапрос.Добавить(стрДанныеЗапрос);
		соотПредставлений = ПредставлениеТС(мсвЗапрос, НастройкаРежимОтображенияМЛ, НастройкаАлгоритмМаршрутизации);
		СтруктураТС = соотПредставлений.Получить(ТекДанные.ПолучитьИдентификатор());
		
		ТекДанные.ТСПредставление = СтруктураТС.ТСПредставление;
		ТекДанные.АдресГруппировкаУказанНаКарте = СтруктураТС.ИндексКартинки;
		ТекДанные.ТС = ТекДанные.Группировка;
		ТекДанные.Грузоподъемность = СтруктураТС.Грузоподъемность;
		ТекДанные.ОбъемКузова      = СтруктураТС.ОбъемКузова;
		ТекДанные.МаксимальноеКоличествоУпаковок = СтруктураТС.МаксимальноеКоличествоУпаковок;
		
		Если ПустаяСтрока(ТекДанные.GUID) Тогда
			ТекДанные.GUID = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВременныеХарактеристикиМашрута(ТекДанные);
	ОбновитьДеревоМаршрутовНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда //ТС
		ТекТСПланировщик = ТекСтрока.Группировка;
		Элементы.МаршрутыГруппировка.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
		Если НЕ ЗначениеЗаполнено(ТекСтрока.УровеньДерева) Тогда
			ТекСтрока.УровеньДерева = "ТС";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Группировка) Тогда
			ТекСтрока.Группировка = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		КонецЕсли;
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //маршрутный
		Элементы.МаршрутыГруппировка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист");
		Если НЕ ЗначениеЗаполнено(ТекСтрока.УровеньДерева) Тогда
			ТекСтрока.УровеньДерева = "МЛ";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Группировка) Тогда
			ТекСтрока.Группировка = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
		КонецЕсли;	
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //пункты назначения
		Элементы.МаршрутыГруппировка.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
		Если НЕ ЗначениеЗаполнено(ТекСтрока.УровеньДерева) Тогда
			ТекСтрока.УровеньДерева = "Пункт";
		КонецЕсли;
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //заказ
		Элементы.МаршрутыГруппировка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
		Если НЕ ЗначениеЗаполнено(ТекСтрока.УровеньДерева) Тогда
			ТекСтрока.УровеньДерева = "Заказ";
		КонецЕсли;
	Иначе //номенклатура
		Элементы.МаршрутыГруппировка.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		Если НЕ ЗначениеЗаполнено(ТекСтрока.УровеньДерева) Тогда
			ТекСтрока.УровеньДерева = "Номенклатура";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекСтрока.GUID) Тогда
		ТекСтрока.GUID = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	УстановитьПометкуРежимПересчетаВремени();
	ВыделитьТСНаПланировщике(ТекСтрока);
	Оповестить("ОстановитьПроигрываниеТрека",, ЭтотОбъект);
	Если ТекСтрока.СоздатьМаршрутныйЛист 
		ИЛИ (ЗначениеЗаполнено(GUIDМЛПодбора)
			И ТекСтрока.GUIDМЛ = GUIDМЛПодбора) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоМаршрутовНаКлиенте(БезОбновленияМЛ = Ложь, ФлагСерверныеПроцедурыДеревоМаршрутов = Истина)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "АРМ_Логиста.ОбновлениеСпискаТС");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ТребуетсяОбновление = ?(НастройкаРежимОтображенияМЛ = 0, МаршрутыДерево.ПолучитьЭлементы().Количество() <> 0,
		МаршрутыСписок.Количество() <> 0);
	Если НЕ ТребуетсяОбновление Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		
		Если ФлагСерверныеПроцедурыДеревоМаршрутов Тогда
			ОбновитьДеревоМаршрутовНаКлиентеСерверныеПроцедуры(БезОбновленияМЛ);
			Если НастройкаРежимОтображенияМЛ = 0 Тогда
				ОбновитьДанныеПоСтоянкамСервер();
			КонецЕсли;
			ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
		КонецЕсли;
		
		ОбновитьВесоОбъемныеХарактеристикиМаршрута();
		
	Иначе
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	КОнецЕсли;
	
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекКолонка = Элементы.МаршрутыДерево.ТекущийЭлемент;
	
	Если ТекКолонка.Имя = "МаршрутыВремяВПути" Или ТекКолонка.Имя = "МаршрутыРасстояние" Тогда
		Если ТекДанные.ПолучитьРодителя() = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РодКоллекция = ТекДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		Если (РодКоллекция.Индекс(ТекДанные) + 1) = РодКоллекция.Количество() Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// В случае удаления записанного МЛ - необходимо его пометить на удаление.
		Если ТекДанные.ПолучитьРодителя() <> Неопределено
			И ТекДанные.ПолучитьРодителя().ПолучитьРодителя() = Неопределено
			И ЗначениеЗаполнено(ТекДанные.Группировка) Тогда 
			Оповещение = Новый ОписаниеОповещения("МаршрутыДеревоПередУдалениемПометкаДокумента", ЭтотОбъект, ТекДанные.Группировка);
			ТекстВопроса = НСтр("en='Mark document for deletion?';ru='Пометить на удаление документ?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе 
			МаршрутыДеревоПередУдалениемЗавершение();
		КонецЕсли;
	Иначе
		ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ПометкаНаУдаление 
			ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.МЛ) Тогда
			// В случае удаления записанного МЛ - необходимо его пометить на удаление.
			Если ЗначениеЗаполнено(ТекДанные.МЛ) Тогда 
				Оповещение = Новый ОписаниеОповещения("МаршрутыДеревоПередУдалениемПометкаДокумента", ЭтотОбъект, ТекДанные.МЛ);
				ТекстВопроса = НСтр("en='Mark document for deletion?';ru='Пометить на удаление документ?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе 
				МаршрутыДеревоПередУдалениемЗавершение(Истина);
			КонецЕсли;
		Иначе
			МаршрутыСписок.Удалить(ТекДанные);
		КонецЕсли;
	КонецЕсли; 
	
	ОтобразитьДанныеНаКарте_МЛисты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекВремяСтроки = Неопределено;
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда //ТС
		
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //МЛ
		
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //пункты назначения
		Если Не НоваяСтрока Тогда
			ТекВремяСтроки = Новый Структура;
			ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекСтрока.ВремяПрибытияВПункт);
			ТекВремяСтроки.Вставить("УбытиеПлан",   ТекСтрока.УбытиеПлан);
			ТекВремяСтроки.Вставить("ВремяВПути",   ТекСтрока.ВремяВПути);
			ТекВремяСтроки.Вставить("Ожидание",     ТекСтрока.Ожидание);
		КонецЕсли;
	ИначеЕсли ТекСтрока.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя() = Неопределено Тогда //заказ
		Если Не НоваяСтрока Тогда
			ТекВремяСтроки = Новый Структура;
			ТекВремяСтроки.Вставить("Стоянка", ТекСтрока.Стоянка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикиГруза(Заказ, Груз, ЕдиницаИзмерения)
	
	Результат = Новый Структура("Количество, ВесБрутто, Объем, КоличествоМест", 0, 0, 0, 0);
	
	Если Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
		СтрокаГруза = Заказ.ГрузовойСостав.Найти(Груз, "ГрузовоеМесто");
		Если Не СтрокаГруза = Неопределено Тогда 
			Результат.Количество     = СтрокаГруза.КоличествоМест;
			Результат.ВесБрутто      = СтрокаГруза.ВесБрутто;
			Результат.Объем          = СтрокаГруза.Объем;
			Результат.КоличествоМест = СтрокаГруза.КоличествоМест;
		КонецЕсли;
		
	ИначеЕсли Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
		СтрокиТовара = Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Груз, ЕдиницаИзмерения));
		Если СтрокиТовара.Количество() Тогда 
			Результат.Количество     = СтрокиТовара[0].Количество;
			Результат.ВесБрутто      = СтрокиТовара[0].ВесБрутто;
			Результат.Объем          = СтрокиТовара[0].Объем;
			Результат.КоличествоМест = СтрокиТовара[0].КоличествоМест;
		КонецЕсли;
		
	Иначе
		Результат.Количество     = 1;
		Результат.ВесБрутто      = Заказ.ВесБрутто;
		Результат.Объем          = Заказ.Объем;
		Результат.КоличествоМест = Заказ.КоличествоМест;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьХарактеристикиГруза()

&НаКлиенте
Процедура МаршрутыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.УровеньДерева = "Номенклатура" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекЗаказ = ТекущиеДанные.ПолучитьРодителя().Этап;
	ТекГруз  = ТекущиеДанные.Группировка;
	ТекЕдИзм = ТекущиеДанные.ЕдиницаИзмерения;
	
	ХарактеристикиГруза = ПолучитьХарактеристикиГруза(ТекЗаказ, ТекГруз, ТекЕдИзм);
	
	КоэфПересчета = ?(ХарактеристикиГруза.Количество = 0, 0, ТекущиеДанные.Количество / ХарактеристикиГруза.Количество);
	
	ТекКоличество = ТекущиеДанные.Количество;
	ТекВесБрутто  = ХарактеристикиГруза.ВесБрутто * КоэфПересчета;
	ТекОбъем      = ХарактеристикиГруза.Объем * КоэфПересчета;
	ТекКолМест    = ХарактеристикиГруза.КоличествоМест * КоэфПересчета;
	
	НайдСтроки = Новый Массив();
	ТекМЛ = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
	Для Каждого УровеньПункта Из ТекМЛ.ПолучитьЭлементы() Цикл 
		Для Каждого УровеньЗаказа Из УровеньПункта.ПолучитьЭлементы() Цикл 
			Для Каждого УровеньГруза Из УровеньЗаказа.ПолучитьЭлементы() Цикл 
				Если УровеньЗаказа.Этап = ТекЗаказ И УровеньГруза.Группировка = ТекГруз И УровеньГруза.ЕдиницаИзмерения = ТекЕдИзм Тогда 
					НайдСтроки.Добавить(УровеньГруза);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаГруза Из НайдСтроки Цикл 
		СтрокаГруза.Количество = ТекКоличество;
		СтрокаГруза.ВесБрутто  = ТекВесБрутто;
		СтрокаГруза.Объем      = ТекОбъем;
		СтрокаГруза.КолМест    = ТекКолМест;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыВремяВПутиПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекМаршрутныйЛист = ТекСтрока.ПолучитьРодителя();
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяВПути);
	
	// Обновление данных в кэше
	текПункт1 = ТекСтрока.Адрес;
	ТекКоллекция = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	текПункт2 = ТекКоллекция[ТекКоллекция.Индекс(ТекСтрока)+1].Адрес;
	НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт1, текПункт2));
	Если НайдСтроки.Количество() Тогда 
		НайдСтроки[0].Время      = ТекСтрока.ВремяВПути;
		НайдСтроки[0].РучнойВвод = Истина;
		
	Иначе 
		НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт2, текПункт1));
		Если НайдСтроки.Количество() Тогда 
			НайдСтроки[0].Время      = ТекСтрока.ВремяВПути;
			НайдСтроки[0].РучнойВвод = Истина;
			
		Иначе 
			НовСтрока = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрока.Пункт1     = текПункт1;
			НовСтрока.Пункт2     = текПункт2;
			НовСтрока.Время      = ТекСтрока.ВремяВПути;
			НовСтрока.Расстояние = ТекСтрока.Расстояние;
			НовСтрока.РучнойВвод = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекМаршрутныйЛист.ПересчетВремени = 1 Тогда 
		флТекДанныеПройдены = Ложь;
		Для Каждого СтрокаПункта Из ТекМаршрутныйЛист.ПолучитьЭлементы() Цикл 
			Если СтрокаПункта = ТекСтрока Тогда 
				флТекДанныеПройдены = Истина;
				Продолжить;
			КонецЕсли;
			
			Если флТекДанныеПройдены Тогда 
				Если Не ТекВремяСтроки = Неопределено Тогда
					ПредВремяВПути = 0;
					
					ТекВремяСтроки.Свойство("ВремяВПути", ПредВремяВПути);
					ТекВремяСтроки = Неопределено;
					
					РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ВремяВПути, -ПредВремяВПути);
					
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДанныеПоСтоянкамСервер();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыРасстояниеПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Обновление данных в кэше
	текПункт1 = ТекСтрока.Адрес;
	ТекКоллекция = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	текПункт2 = ТекКоллекция[ТекКоллекция.Индекс(ТекСтрока)+1].Адрес;
	НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт1, текПункт2));
	Если НайдСтроки.Количество() Тогда 
		НайдСтроки[0].Расстояние = ТекСтрока.Расстояние;
		НайдСтроки[0].РучнойВвод = Истина;
		
	Иначе 
		НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт2, текПункт1));
		Если НайдСтроки.Количество() Тогда 
			НайдСтроки[0].Расстояние = ТекСтрока.Расстояние;
			НайдСтроки[0].РучнойВвод = Истина;
			
		Иначе 
			НовСтрока = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрока.Пункт1     = текПункт1;
			НовСтрока.Пункт2     = текПункт2;
			НовСтрока.Время      = ТекСтрока.ВремяВПути;
			НовСтрока.Расстояние = ТекСтрока.Расстояние;
			НовСтрока.РучнойВвод = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПрибытиеПланПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекМаршрутныйЛист = ТекСтрока.ПолучитьРодителя();
	
	Если Не ТекВремяСтроки = Неопределено Тогда
		ПрибытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = ТекСтрока.ВремяПрибытияВПункт - ПрибытиеПлан;
		
		Если ТекМаршрутныйЛист.ПересчетВремени = 1 Тогда 
			РазницаЧас = Цел(РазницаВремени/3600);
			РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из ТекМаршрутныйЛист.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекСтрока Тогда 
					Если Не ТекМаршрутныйЛист.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
					КонецЕсли;
					
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			Если Не ТекМаршрутныйЛист.ПолучитьЭлементы()[0] = ТекСтрока Тогда
				ТекМаршрутныйЛист.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = 
					ТекМаршрутныйЛист.ПолучитьЭлементы()[0].ВремяПрибытияВПункт + РазницаВремени;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеПоСтоянкамСервер();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыУбытиеПланПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекМаршрутныйЛист = ТекСтрока.ПолучитьРодителя();
	
	Если Не ТекВремяСтроки = Неопределено Тогда
		УбытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = ТекСтрока.УбытиеПлан - УбытиеПлан;
		
		Если ТекМаршрутныйЛист.ПолучитьЭлементы()[0] = ТекСтрока Или ТекМаршрутныйЛист.ПересчетВремени = 0 Тогда 
			ТекМаршрутныйЛист.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = 
				ТекМаршрутныйЛист.ПолучитьЭлементы()[0].ВремяПрибытияВПункт + РазницаВремени;
		КонецЕсли;
		
		Если ТекМаршрутныйЛист.ПересчетВремени = 1 Тогда 
			РазницаЧас = Цел(РазницаВремени/3600);
			РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из ТекМаршрутныйЛист.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекСтрока Тогда 
					Если Не ТекМаршрутныйЛист.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
					КонецЕсли;
					
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеПоСтоянкамСервер();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСтоянкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Стоянка);
	
	ТекМЛ = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
	
	Если ТекМЛ.ПересчетВремени = 1 Тогда 
		ТекПункт = ТекущиеДанные.ПолучитьРодителя();
		
		флТекДанныеПройдены = Ложь;
		Для Каждого СтрокаПункта Из ТекМЛ.ПолучитьЭлементы() Цикл 
			Если СтрокаПункта = ТекПункт Тогда 
				флТекДанныеПройдены = Истина;
				Продолжить;
			КонецЕсли;
			
			Если флТекДанныеПройдены Тогда 
				Если Не ТекВремяСтроки = Неопределено Тогда
					ПредСтоянка = 0;
					
					ТекВремяСтроки.Свойство("Стоянка", ПредСтоянка);
					ТекВремяСтроки = Неопределено;
					
					РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущиеДанные.Стоянка, -ПредСтоянка);
					
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДанныеПоСтоянкамСервер();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);      
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
	ТекМЛ = ТекущиеДанные.ПолучитьРодителя();
	Если ТекМЛ.ПересчетВремени = 1 Тогда 
		Если Не ТекМЛ.ПолучитьЭлементы()[0] = ТекущиеДанные Тогда 
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из ТекМЛ.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекущиеДанные Тогда 
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					Если Не ТекВремяСтроки = Неопределено Тогда
						ПредОжидание = 0;
						
						ТекВремяСтроки.Свойство("Ожидание", ПредОжидание);
						ТекВремяСтроки = Неопределено;
						
						РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущиеДанные.Ожидание, -ПредОжидание);
						
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеПоСтоянкамСервер();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Ложь);      
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаПункта = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаПункта = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", СтрокаПункта.Адрес));
	
	ОткрытьФорму("Справочник.уатТерминалы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоТерминалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаПункта = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаПункта = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПолученияДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", СтрокаПункта.Адрес);
	
	ДанныеВыбора = ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных)
	
	Возврат Справочники.уатТерминалы.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
КонецФункции

&НаКлиенте
Процедура МаршрутыДеревоТерминалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаПункта = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаПункта = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПолученияДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", СтрокаПункта.Адрес);
	
	ДанныеВыбора = ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеМаршруты(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрока2 Из ТекСтрока.ПолучитьЭлементы() Цикл
				ТекСтрока2.СоздатьМаршрутныйЛист = Истина;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписок Цикл
			Если ЗначениеЗаполнено(ТекСтрока.МЛ)
				ИЛИ ТекСтрока.НовыйМЛ Тогда
				ТекСтрока.СоздатьМаршрутныйЛист = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтобразитьДанныеНаКарте_МЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекции(Команда)
	
	ТС = Неопределено;
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		// Дерево
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.УровеньДерева = "ТС" Тогда
			ТекстНСТР = НСтр("en='It is nessecary to select routing list';ru='Необходимо выбрать маршрутный лист'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		Пока ТекущиеДанные.УровеньДерева <> "МЛ" Цикл
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
		КонецЦикла;
		
		ТС = ТекущиеДанные.ПолучитьРодителя().ТС;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СмешиватьГрузыВСекциях", НастройкаСмешиватьГрузыВСекциях);
		ПараметрыФормы.Вставить("ТС",                     ТС);
		ПараметрыФормы.Вставить("Прицеп1",                ТекущиеДанные.ПолучитьРодителя().Прицеп1);
		ПараметрыФормы.Вставить("Прицеп2",                ТекущиеДанные.ПолучитьРодителя().Прицеп2);
		
		ПараметрыФормы.Вставить("Заказы", Новый Массив());
		Для Каждого СтрокаПункта Из ТекущиеДанные.ПолучитьЭлементы() Цикл 
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				Если Не СтрокаЗаказа.Операция = ТипыТочекМаршрута_Погрузка Тогда 
					Продолжить;
				КонецЕсли;
				
				Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда 
					Если Не ЗначениеЗаполнено(СтрокаЗаказа.GUID) Или СтрокаЗаказа.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
						СтрокаЗаказа.GUID = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;
					
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("GUIDСтроки", Новый УникальныйИдентификатор(СтрокаЗаказа.GUID));
					ДанныеЗаказа.Вставить("Заказ",      СтрокаЗаказа.Этап);
					ДанныеЗаказа.Вставить("Груз",       Неопределено);
					ДанныеЗаказа.Вставить("Объем",      СтрокаЗаказа.Объем);
					ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
				Иначе 
					Для Каждого СтрокаГруза Из СтрокаЗаказа.ПолучитьЭлементы() Цикл 
						Если Не ЗначениеЗаполнено(СтрокаГруза.GUID) Или СтрокаГруза.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							СтрокаГруза.GUID = Строка(Новый УникальныйИдентификатор());
						КонецЕсли;
						
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("GUIDСтроки", Новый УникальныйИдентификатор(СтрокаГруза.GUID));
						ДанныеЗаказа.Вставить("Заказ",      СтрокаЗаказа.Этап);
						ДанныеЗаказа.Вставить("Груз",       СтрокаГруза.Группировка);
						ДанныеЗаказа.Вставить("Объем",      СтрокаГруза.Объем);
						ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Список
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.МЛ) И Не ТекущиеДанные.НовыйМЛ Тогда
			ТекстНСТР = НСтр("en='It is nessecary to select routing list';ru='Необходимо выбрать маршрутный лист'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		ТС = ТекущиеДанные.ТС;

		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СмешиватьГрузыВСекциях", НастройкаСмешиватьГрузыВСекциях);
		ПараметрыФормы.Вставить("ТС",                     ТС);
		ПараметрыФормы.Вставить("Прицеп1",                ТекущиеДанные.Прицеп1);
		ПараметрыФормы.Вставить("Прицеп2",                ТекущиеДанные.Прицеп2);
		
		ПараметрыФормы.Вставить("Заказы", Новый Массив());
		Для Каждого СтрокаПункта Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				Если Не СтрокаЗаказа.Операция = ТипыТочекМаршрута_Погрузка Тогда 
					Продолжить;
				КонецЕсли;
				
				Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда 
					Если Не ЗначениеЗаполнено(СтрокаЗаказа.GUID) Или СтрокаЗаказа.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
						СтрокаЗаказа.GUID = Строка(Новый УникальныйИдентификатор());
					КонецЕсли;
					
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("GUIDСтроки", Новый УникальныйИдентификатор(СтрокаЗаказа.GUID));
					ДанныеЗаказа.Вставить("Заказ",      СтрокаЗаказа.Этап);
					ДанныеЗаказа.Вставить("Груз",       Неопределено);
					ДанныеЗаказа.Вставить("Объем",      СтрокаЗаказа.Объем);
					ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
				Иначе 
					Для Каждого СтрокаГруза Из СтрокаЗаказа.ПолучитьЭлементы() Цикл 
						Если Не ЗначениеЗаполнено(СтрокаГруза.GUID) Или СтрокаГруза.GUID = "00000000-0000-0000-0000-000000000000" Тогда 
							СтрокаГруза.GUID = Строка(Новый УникальныйИдентификатор());
						КонецЕсли;
						
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("GUIDСтроки", Новый УникальныйИдентификатор(СтрокаГруза.GUID));
						ДанныеЗаказа.Вставить("Заказ",      СтрокаЗаказа.Этап);
						ДанныеЗаказа.Вставить("Груз",       СтрокаГруза.Группировка);
						ДанныеЗаказа.Вставить("Объем",      СтрокаГруза.Объем);
						ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Секции", Новый Массив());
	Для Каждого ТекСтрока Из ТекущиеДанные.Секции Цикл 
		ДанныеСекции = Новый Структура();
		ДанныеСекции.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
		ДанныеСекции.Вставить("Секция",     ТекСтрока.Секция);
		ДанныеСекции.Вставить("Объем",      ТекСтрока.Объем);
		ПараметрыФормы.Секции.Добавить(ДанныеСекции);
	КонецЦикла;
		
	ОткрытьФорму(
		"Обработка.уатМастерРаспределенияГрузовПоСекциям.Форма", 
		ПараметрыФормы, 
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПослеРаспределенияЗаказовПоСекциям", ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор()),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРаспределенияЗаказовПоСекциям(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		// Дерево
		СтрокаМЛ = МаршрутыДерево.НайтиПоИдентификатору(ДополнительныеПараметры);
	Иначе
		// Список
		СтрокаМЛ = МаршрутыСписок.НайтиПоИдентификатору(ДополнительныеПараметры);
	КонецЕсли;
	Если СтрокаМЛ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ.Секции.Очистить();
	Для Каждого ТекСтрока Из РезультатЗакрытия Цикл 
		НовСтрока = СтрокаМЛ.Секции.Добавить();
		НовСтрока.GUIDСтроки = ТекСтрока.GUIDСтроки;
		НовСтрока.Секция     = ТекСтрока.Секция;
		НовСтрока.Объем      = ТекСтрока.Объем;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры
&НаКлиенте
Процедура СнятьОтметкиВсехМаршруты(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрока2 Из ТекСтрока.ПолучитьЭлементы() Цикл
				ТекСтрока2.СоздатьМаршрутныйЛист = Ложь;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписок Цикл
			ТекСтрока.СоздатьМаршрутныйЛист = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОтобразитьДанныеНаКарте_МЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеМаршруты(Команда)
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыДерево.Свернуть(ТекСтрока.ПолучитьИдентификатор());
		КонецЦикла;

	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыСписокЗаказовДерево.Свернуть(ТекСтрока.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеМаршрутыПоМаршрутнымЛистам(Команда)
	Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
		Элементы.МаршрутыДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор());
		Для Каждого ТекПодчСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыДерево.Свернуть(ТекПодчСтрока.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеМаршрутыПоПунктам(Команда)
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор());
			Для Каждого ТекПодчСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
				Элементы.МаршрутыДерево.Развернуть(ТекПодчСтрока.ПолучитьИдентификатор());
				Для Каждого ТекПодчПодчСтрока Из ТекПодчСтрока.ПолучитьЭлементы() Цикл
					Элементы.МаршрутыДерево.Свернуть(ТекПодчПодчСтрока.ПолучитьИдентификатор());
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыСписокЗаказовДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор());
			Для Каждого ТекПодчСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
				Элементы.МаршрутыСписокЗаказовДерево.Свернуть(ТекПодчСтрока.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеМаршрутыПоЗаказам(Команда)
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор());
			Для Каждого ТекПодчСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
				Элементы.МаршрутыДерево.Развернуть(ТекПодчСтрока.ПолучитьИдентификатор());
				Для Каждого ТекПодчПодчСтрока Из ТекПодчСтрока.ПолучитьЭлементы() Цикл
					Элементы.МаршрутыДерево.Развернуть(ТекПодчПодчСтрока.ПолучитьИдентификатор());
					Для Каждого ТекПодчПодчПодчСтрока Из ТекПодчПодчСтрока.ПолучитьЭлементы() Цикл
						Элементы.МаршрутыДерево.Свернуть(ТекПодчПодчПодчСтрока.ПолучитьИдентификатор());
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыСписокЗаказовДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор());
			Для Каждого ТекПодчСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
				Элементы.МаршрутыСписокЗаказовДерево.Развернуть(ТекПодчСтрока.ПолучитьИдентификатор());
				Для Каждого ТекПодчПодчСтрока Из ТекПодчСтрока.ПолучитьЭлементы() Цикл
					Элементы.МаршрутыСписокЗаказовДерево.Свернуть(ТекПодчПодчСтрока.ПолучитьИдентификатор());
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеМаршруты(Команда)
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		Для Каждого ТекСтрока Из МаршрутыДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
			Элементы.МаршрутыСписокЗаказовДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоМаршрутовНаКлиентеСерверныеПроцедуры(БезОбновленияМЛ = Ложь)
	
	Если Не БезОбновленияМЛ Тогда 
		ОбновитьМаршрутныеЛистыВДеревеМаршрутовСервер();
	КонецЕсли;
	
	Если НастройкаИспользоватьРасчетТары Тогда 
		ОбновитьРеквизитыТарыИРазмещения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп1ПриИзменении(Элемент)
	
	ВеткаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ВеткаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьХарактеристикиТССписок(ВеткаТС);
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.УровеньДерева = "ТС" Или ТекущиеДанные.УровеньДерева = "МЛ") Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Прицеп1);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = ТекущиеДанные.Прицеп2;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.УровеньДерева = "ТС" Или ТекущиеДанные.УровеньДерева = "МЛ") Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	УстановитьСписокПрицеповДляПодбора(
		?(Ожидание = 0, "", Текст),
		ТекущиеДанные.Прицеп2,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСписокПрицеповДляПодбора(ТекстПодбора, ИсключитьТС, ДанныеВыбора)
	
	Если ДанныеВыбора = Неопределено Тогда 
		ДанныеВыбора = Новый СписокЗначений();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсключитьТС",   ИсключитьТС);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + ТекстПодбора + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.Наименование КАК Наименование
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ЭтоГруппа
	|	И НЕ уатТС.ПометкаУдаления
	|	И НЕ уатТС.Ссылка = &ИсключитьТС
	|	И (уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|	И уатТС.Наименование ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(ТекстПодбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.УровеньДерева = "ТС" Или ТекущиеДанные.УровеньДерева = "МЛ") Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
	УстановитьСписокПрицеповДляПодбора(
		Текст,
		ТекущиеДанные.Прицеп2,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп2ПриИзменении(Элемент)
	
	ВеткаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ВеткаТС = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьХарактеристикиТССписок(ВеткаТС);
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.УровеньДерева = "ТС" Или ТекущиеДанные.УровеньДерева = "МЛ") Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Прицеп2);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = ТекущиеДанные.Прицеп1;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.УровеньДерева = "ТС" Или ТекущиеДанные.УровеньДерева = "МЛ") Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСписокПрицеповДляПодбора(
		?(Ожидание=0, "", Текст),
		ТекущиеДанные.Прицеп1,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыДеревоПрицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекущиеДанные = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (ТекущиеДанные.УровеньДерева = "ТС" Или ТекущиеДанные.УровеньДерева = "МЛ") Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСписокПрицеповДляПодбора(
		Текст,
		ТекущиеДанные.Прицеп1,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоЗаказу()
	
	СтрокиДляПодбора = Новый Массив();
	
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрокаЗаказа Из ОтмеченныеЗаказы Цикл
		МассивЗаказов.Добавить(ТекСтрокаЗаказа.Ссылка);
	КонецЦИкла;
	
	КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
		МассивЗаказов);
		
	СоответсвиеЗаказов = Новый Соответствие();
	
	Для Каждого ТекСтрокаЗаказа Из КомпоновщикСпискаЗаказов Цикл
		
		Если СоответсвиеЗаказов.Получить(ТекСтрокаЗаказа.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДляПодбора.Добавить(ТекСтрокаЗаказа);
		
		СоответсвиеЗаказов.Вставить(ТекСтрокаЗаказа.Ссылка, ТекСтрокаЗаказа.ИдентификаторСтроки);
	КонецЦикла;
	
	Если СтрокиДляПодбора.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	мсвТСДляПодбора = Новый Массив();
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		МаршрутыТаблица = МаршрутыДерево.ПолучитьЭлементы();
	Иначе
		МаршрутыТаблица = МаршрутыСписок;
	КонецЕсли;
	
	Для Каждого ТекСтрокаТС Из МаршрутыТаблица Цикл 
		Если ТекСтрокаТС.СобственноеТС = 6 Тогда
			Продолжить;
		КонецЕсли;
		мсвТСДляПодбора.Добавить(
			Новый Структура(
				"ТС, Прицеп1, Прицеп2",
				ТекСтрокаТС.ТС,
				ТекСтрокаТС.Прицеп1,
				ТекСтрокаТС.Прицеп2
			)
		);
	КонецЦикла;
	
	флМножественныйПодбор = СтрокиДляПодбора.Количество() > 1;
	ЗаказыСписокСтрокаДляПодбора = СтрокиДляПодбора[0];
	
	мсвТС = Новый Массив(); 
	Для Каждого ТекТС Из мсвТСДляПодбора Цикл 
		мсвТС.Добавить(ТекТС.ТС);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заказ", ЗаказыСписокСтрокаДляПодбора.Ссылка);
	Если флМножественныйПодбор Тогда
		мЗаказы = Новый Массив();
		Для Каждого ТекСтрока Из СтрокиДляПодбора Цикл
			мЗаказы.Добавить(ТекСтрока.Ссылка);
		КонецЦикла;
		ПараметрыФормы.Вставить("Заказы",              мЗаказы);
	КонецЕсли;
	ПараметрыФормы.Вставить("КоличествоЗаказов",   СтрокиДляПодбора.Количество());
	ПараметрыФормы.Вставить("МножественныйПодбор", флМножественныйПодбор);
	ПараметрыФормы.Вставить("ТС",                  Новый Массив());
	ПараметрыФормы.Вставить("ТекущееТС",           Неопределено);
	ПараметрыФормы.Вставить("ЛатОтправления",      ЗаказыСписокСтрокаДляПодбора.ЛатОтправления);
	ПараметрыФормы.Вставить("ЛонОтправления",      ЗаказыСписокСтрокаДляПодбора.ЛонОтправления);
	ПараметрыФормы.Вставить("ОтправлениеПо",       ЗаказыСписокСтрокаДляПодбора.ОтправлениеПо);
	ПараметрыФормы.Вставить("ТипКартографии",      ТипКартографии);
	ПараметрыФормы.Вставить("ТекОрганизация",      ТекОрганизация);
	ПараметрыФормы.Вставить("НастройкаВремяАктуальностиКоординат", НастройкаВремяАктуальностиКоординат);
	ПараметрыФормы.Вставить("ЭтоЯндекс",           НастройкаАлгоритмМаршрутизации = 3);
	
	Для Каждого ТекСтрокаТС Из МаршрутыТаблица Цикл 
		Если мсвТС.Найти(ТекСтрокаТС.ТС) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		стрУзелТС = Новый Структура();
		стрУзелТС.Вставить("Ссылка",                          ТекСтрокаТС.ТС);
		стрУзелТС.Вставить("Представление",                   ТекСтрокаТС.ТСПредставление);
		стрУзелТС.Вставить("Прицеп1",                         ТекСтрокаТС.Прицеп1);
		стрУзелТС.Вставить("Прицеп2",                         ТекСтрокаТС.Прицеп2);
		стрУзелТС.Вставить("ВесПредставление",                ТекСтрокаТС.ВесПредставление);
		стрУзелТС.Вставить("ОбъемПредставление",              ТекСтрокаТС.ОбъемПредставление);
		стрУзелТС.Вставить("КоличествоУпаковокПредставление", ТекСтрокаТС.КоличествоУпаковокПредставление);
		стрУзелТС.Вставить("НаправлениеПеревозки",            ТекСтрокаТС.НаправлениеПеревозки);
		стрУзелТС.Вставить("ГрузоподъемностьСцепки",          0);
		стрУзелТС.Вставить("Вес",                             ТекСтрокаТС.ВесБрутто);
		стрУзелТС.Вставить("ОбъемСцепки",                     0);
		стрУзелТС.Вставить("Объем",                           ТекСтрокаТС.Объем);
		стрУзелТС.Вставить("МаксимальноеКоличествоУпаковок",  0);
		стрУзелТС.Вставить("КоличествоУпаковок",              ТекСтрокаТС.КолМест);
		
		ДанныеМЛ = Новый Структура();
		ДанныеМЛ.Вставить("Группировка",                    Неопределено);
		ДанныеМЛ.Вставить("Прицеп1",                        Неопределено);
		ДанныеМЛ.Вставить("Прицеп2",                        Неопределено);
		ДанныеМЛ.Вставить("ДатаПланирования",               ДатаПланирования);
		ДанныеМЛ.Вставить("НастройкаОрганизацияМЛИсточник", НастройкаОрганизацияМЛИсточник);
		ДанныеМЛ.Вставить("НастройкаОрганизацияМЛ",         НастройкаОрганизацияМЛ);
		ДанныеМЛ.Вставить("ДатаИВремяПрибытияВПункт",       '00010101');
		ДанныеМЛ.Вставить("Строки",                         Новый Массив());
		ДанныеМЛ.Вставить("ЕстьМаршрутныйЛист",             Ложь);
		
		стрУзелТС.Вставить("ДанныеМЛ", ДанныеМЛ);
		
		Если (НастройкаРежимОтображенияМЛ = 0 И ТекСтрокаТС.ПолучитьЭлементы().Количество()) Тогда 
			СтрокаМЛ = ТекСтрокаТС.ПолучитьЭлементы()[ТекСтрокаТС.ПолучитьЭлементы().Количество()-1];
			Если СтрокаМЛ.ПолучитьЭлементы().Количество() Тогда 
				стрУзелТС.ДанныеМЛ.Группировка              = СтрокаМЛ.Группировка;
				стрУзелТС.ДанныеМЛ.Прицеп1                  = СтрокаМЛ.Прицеп1;
				стрУзелТС.ДанныеМЛ.Прицеп2                  = СтрокаМЛ.Прицеп2;
				стрУзелТС.ДанныеМЛ.ДатаИВремяПрибытияВПункт = СтрокаМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт;
				стрУзелТС.ДанныеМЛ.ЕстьМаршрутныйЛист       = Истина;
				
				Для Каждого СтрокаПункт Из СтрокаМЛ.ПолучитьЭлементы() Цикл 
					стрСтрокаПункта = Новый Структура("СтоянкаИзПункта,Стоянка,Адрес,Расстояние,ВремяВПути,Строки",
						СтрокаПункт.СтоянкаИзПункта,
						СтрокаПункт.Стоянка,
						СтрокаПункт.Адрес,
						СтрокаПункт.Расстояние,
						СтрокаПункт.ВремяВПути,
						Новый Массив());
					
					Для Каждого СтрокаЗаказ Из СтрокаПункт.ПолучитьЭлементы() Цикл 
						стрСтрокаЗаказа = Новый Структура("Операция,Этап,Стоянка,ДетализацияЗакрытия,ВесБрутто,Объем,Количество,КолМест,Строки",
							СтрокаЗаказ.Операция,
							СтрокаЗаказ.Этап,
							СтрокаЗаказ.Стоянка,
							СтрокаЗаказ.ДетализацияЗакрытия,
							СтрокаЗаказ.ВесБрутто,
							СтрокаЗаказ.Объем,
							СтрокаЗаказ.Количество,
							СтрокаЗаказ.КолМест,
							Новый Массив());
						
						Для Каждого СтрокаГруз Из СтрокаЗаказ.ПолучитьЭлементы() Цикл 
							стрСтрокаГруза = Новый Структура("Группировка,ВесБрутто,Объем,ЕдиницаИзмерения,Количество,КолМест",
								СтрокаГруз.Группировка,
								СтрокаГруз.ВесБрутто,
								СтрокаГруз.Объем,
								СтрокаГруз.ЕдиницаИзмерения,
								СтрокаГруз.Количество,
								СтрокаГруз.КолМест);
							
							стрСтрокаЗаказа.Строки.Добавить(стрСтрокаГруза);
						КонецЦикла;
						
						стрСтрокаПункта.Строки.Добавить(стрСтрокаЗаказа);
					КонецЦикла;
					
					стрУзелТС.ДанныеМЛ.Строки.Добавить(стрСтрокаПункта);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли НастройкаРежимОтображенияМЛ = 1 Тогда
			СтрокаМЛ = ТекСтрокаТС;
			Если СтрокаМЛ.НовыйМЛ
				ИЛИ ЗначениеЗаполнено(СтрокаМЛ.МЛ) Тогда 
				стрУзелТС.ДанныеМЛ.Группировка              = СтрокаМЛ.МЛ;
				стрУзелТС.ДанныеМЛ.Прицеп1                  = СтрокаМЛ.Прицеп1;
				стрУзелТС.ДанныеМЛ.Прицеп2                  = СтрокаМЛ.Прицеп2;
				стрУзелТС.ДанныеМЛ.ЕстьМаршрутныйЛист       = Истина;
			КонецЕсли;

		КонецЕсли;
		
		ПараметрыФормы.ТС.Добавить(стрУзелТС);
	КонецЦикла;
	
	ДопПараметры = Новый Структура("СтрокаЗаказа", ЗаказыСписокСтрокаДляПодбора);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначения", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначенияДерево(РезультатЗакрытия, ДополнительныеПараметры);
	Иначе
		ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначенияСписок(РезультатЗакрытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначенияДерево(РезультатЗакрытия, ДополнительныеПараметры)
	
	
	СтрокаТС = Неопределено;
	
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
		Если ТекСтрокаТС.ТС = РезультатЗакрытия.ТС Тогда 
			СтрокаТС = ТекСтрокаТС;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаМЛ = Неопределено;
	Если СтрокаТС.ПолучитьЭлементы().Количество() = 0 Или Не ЗначениеЗаполнено(РезультатЗакрытия.МЛ) Тогда 
		СтрокаВставки = СтрокаТС;
	Иначе 
		// Сначала попробуем найти нужный МЛ
		СтрокаВставки = Неопределено;
		Для Каждого ТекСтрокаМЛ Из СтрокаТС.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаМЛ.Группировка = РезультатЗакрытия.МЛ Тогда 
				СтрокаВставки = ТекСтрокаМЛ;
				СтрокаМЛ = ТекСтрокаМЛ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Если не нашли МЛ - берем последний
		Если СтрокаВставки = Неопределено Тогда 
			СтрокаВставки = СтрокаТС.ПолучитьЭлементы()[СтрокаТС.ПолучитьЭлементы().Количество()-1];
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗаказа = ДополнительныеПараметры.СтрокаЗаказа;
	
	ПараметрыПеретаскивания = Новый Структура("Действие,ДопустимыеДействия,Значение",
		ДействиеПеретаскивания.Копирование,
		ДопустимыеДействияПеретаскивания.Копирование,
		СтрокаЗаказа);
		
	Если НастройкаВремяВыездаИзГаража = 1 Тогда 
		мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	Иначе
		ВремяОтправления = СтрокаЗаказа.ОтправлениеС-НачалоДня(СтрокаЗаказа.ОтправлениеС);
		мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
	КонецЕсли;
	
	ПеретаскиваниеНаМаршруты(Элементы.МаршрутыДерево, ПараметрыПеретаскивания, Ложь, СтрокаВставки, Неопределено, мДатаИВремяНачала);
	
	Если СтрокаТС.ПолучитьЭлементы().Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаМЛ = Неопределено Тогда 
		СтрокаМЛ = СтрокаТС.ПолучитьЭлементы()[СтрокаТС.ПолучитьЭлементы().Количество()-1];
	КонецЕсли;
	
	Для Каждого ТекПункт Из СтрокаМЛ.ПолучитьЭлементы() Цикл 
		флНайден = Ложь;
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
			Если ТекЗаказ.Этап = СтрокаЗаказа.Ссылка Тогда 
				ТекЗаказ.СоздаватьЗаказПеревозчику = РезультатЗакрытия.СоздаватьЗаказПеревозчику;
				Для Каждого ТекЗатрата Из РезультатЗакрытия.ЗатратыНаПеревозку Цикл 
					НовСтрока = ТекЗаказ.ЗатратыНаПеревозку.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекЗатрата);
				КонецЦикла;
				флНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флНайден Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьВременныеХарактеристикиМашрута(СтрокаМЛ);
	ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута();
	ОбновитьМаршрутныеПараметрыДереваМаршрутов(Истина); 
	ОтобразитьИтоговыеДанныеПоМаршрутам();
	
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	ОбновитьСписокЗаказов();
		
	Если НастройкаИспользоватьРасчетТары Тогда 
		ОбновитьРеквизитыТарыИРазмещения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначенияСписок(РезультатЗакрытия, ДополнительныеПараметры)
		
	СтрокаТС = Неопределено;
	
	Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл 
		Если ТекСтрокаТС.ТС = РезультатЗакрытия.ТС Тогда 
			СтрокаТС = ТекСтрокаТС;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(СтрокаТС);

	СтрокаМЛ = Неопределено;
	Если (НЕ СтрокаТС.НовыйМЛ И НЕ ЗначениеЗаполнено(СтрокаТС.МЛ))
		ИЛИ (НЕ ЗначениеЗаполнено(РезультатЗакрытия.МЛ)) Тогда 
		СтрокаВставки = СтрокаТС;
	Иначе 
		// Сначала попробуем найти нужный МЛ
		СтрокаВставки = Неопределено;
		Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл
			Если ТекСтрокаТС.ТС = РезультатЗакрытия.ТС
				И ТекСтрокаТС.МЛ = РезультатЗакрытия.МЛ Тогда 
				СтрокаВставки = ТекСтрокаТС;
				СтрокаМЛ = ТекСтрокаТС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Если не нашли МЛ - берем последний
		Если СтрокаВставки = Неопределено Тогда 
			СтрокаВставки = СтрокаТС;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗаказа = ДополнительныеПараметры.СтрокаЗаказа;
	
	ПараметрыПеретаскивания = Новый Структура("Действие,ДопустимыеДействия,Значение",
		ДействиеПеретаскивания.Копирование,
		ДопустимыеДействияПеретаскивания.Копирование,
		СтрокаЗаказа);
		
	Если НастройкаВремяВыездаИзГаража = 1 Тогда 
		мДатаИВремяНачала = ДатаПланирования + (НастройкаВремяВыездаТранспортныхСредств - '00010101');
	Иначе
		ВремяОтправления = СтрокаЗаказа.ОтправлениеС-НачалоДня(СтрокаЗаказа.ОтправлениеС);
		мДатаИВремяНачала = ДатаПланирования + ВремяОтправления;
	КонецЕсли;
	
	ПеретаскиваниеНаМаршруты(Элементы.МаршрутыСписок, ПараметрыПеретаскивания, Ложь, СтрокаВставки, Неопределено, мДатаИВремяНачала);
	
	Если (НЕ СтрокаТС.НовыйМЛ И НЕ ЗначениеЗаполнено(СтрокаТС.МЛ)) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаМЛ = Неопределено Тогда 
		СтрокаМЛ = СтрокаТС;
	КонецЕсли;
	
	флНайден = Ложь;
	ПолучитьИзВременногоХранилищаТаблицуМаршрутов(СтрокаМЛ.АдресВременногоХранилища, СтрокаМЛ.GUID);
	
	ЭлементыВеткаПункты = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", СтрокаМЛ.GUID, "Пункт"));
	Для Каждого ТекЗаказ Из ЭлементыВеткаПункты Цикл 
		Если ТекЗаказ.Этап = СтрокаЗаказа.Ссылка Тогда 
			ТекЗаказ.СоздаватьЗаказПеревозчику = РезультатЗакрытия.СоздаватьЗаказПеревозчику;
			Для Каждого ТекЗатрата Из РезультатЗакрытия.ЗатратыНаПеревозку Цикл 
				НовСтрока = ТекЗаказ.ЗатратыНаПеревозку.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекЗатрата);
			КонецЦикла;
			флНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкаИспользоватьРасчетТары Тогда 
		ОбновитьРеквизитыТарыИРазмещенияСписок(СтрокаМЛ);
	КонецЕсли;
	СохранитьВоВременноеХранилищеТаблицуМаршрутов();
	
	МаршрутыСписокПриАктивизацииСтрокиКлиент(СтрокаМЛ, Истина, Ложь);
	Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаМЛ.ПолучитьИдентификатор();
	
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", МассивРаспределенныхЗаказов);
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресНастройкиКомпоновкиДанных() 
	
	НастройкиКомпоновкиДанных      = Элементы.ЗаказыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесоОбъемныеХарактеристикиИСтоянкиМаршрута(ОбновитьТекущуюСтроку = Ложь, ИндексСтроки = 0)

	Если ОбновитьТекущуюСтроку Тогда
		ВеткаТС = МаршрутыСписок.НайтиПоИдентификатору(ИндексСтроки);
	Иначе
		ВеткаТС = Неопределено;
	КонецЕсли;

	ОбновитьВесоОбъемныеХарактеристикиМаршрута(ВеткаТС);
	ОбновитьДанныеПоСтоянкамСервер(ВеткаТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ЗаказыСписок.ТекущиеДанные;
	Если ТекСтрока = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;

	Если ФормаКарты <> Неопределено
		И ТекСтрока.Использование Тогда
		МассивЗаказов = Новый Массив();
		
		Если ЗаказДляФокусировки <> Неопределено
				И ОтмеченныеЗаказы.Найти(ЗаказДляФокусировки) <> Неопределено Тогда
			МассивЗаказов.Добавить(ЗаказДляФокусировки.Ссылка); 
		КонецЕсли; 
		МассивЗаказов.Добавить(ТекСтрока.Ссылка);
		
		ОтобразитьДанныеНаКарте_Заказ(МассивЗаказов);
		ЗаказДляФокусировки = Элемент.ТекущаяСтрока; 
	КонецЕсли;
	
	Если ФормаПланировщика = Неопределено 
		ИЛИ НЕ ФормаПланировщика.ПланировщикОткрыт Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ФормаПланировщика.НастройкаВыделятьТекущийЗаказНаПланировщике Тогда
		ФормаПланировщика.ЗаказДляПланирования  = Неопределено;
	Иначе
		ФормаПланировщика.ЗаказДляПланирования  = ТекСтрока.Ссылка;
	КонецЕсли;
	
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	ТекДанные.Модифицированность    = Истина;
	ТекДанные.СоздатьМаршрутныйЛист = Истина;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремяИРасстояние(Команда)
	
	Если НастройкаРежимОтображенияМЛ = 0 Тогда
		ТекТС = Элементы.МаршрутыДерево.ТекущиеДанные;
		Если ТекТС = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ОбновитьВременныеХарактеристикиМашрута(ТекТС, Ложь);
		ОбновитьМаршрутныеПараметрыДереваМаршрутов(Истина, Истина, ТекТС.ПолучитьИдентификатор());
		МаршрутыСписокПриАктивизацииСтроки(Неопределено);
	
	Иначе
		ТекТС = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекТС = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекТС);
		ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекТС, Ложь);
		ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекТС);
		ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекТС);
		ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекТС);
		ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекТС);
		ОбновитьДанныеТекущегоМаршрута(ТекТС);
		ПересчитатьНомераПунктовТекущегоМаршрута();
		ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекТС, Ложь);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПередУдалением(Элемент, Отказ)
	
	Отказ  = Истина;
	МаршрутыДеревоПередУдалениемЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.УровеньДерева = "Номенклатура" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекЗаказ = ТекущиеДанные.ПолучитьРодителя().Этап;
	ТекГруз  = ТекущиеДанные.Группировка;
	ТекЕдИзм = ТекущиеДанные.ЕдиницаИзмерения;
	
	ХарактеристикиГруза = ПолучитьХарактеристикиГруза(ТекЗаказ, ТекГруз, ТекЕдИзм);
	
	КоэфПересчета = ?(ХарактеристикиГруза.Количество = 0, 0, ТекущиеДанные.Количество / ХарактеристикиГруза.Количество);
	
	ТекКоличество = ТекущиеДанные.Количество;
	ТекВесБрутто  = ХарактеристикиГруза.ВесБрутто * КоэфПересчета;
	ТекОбъем      = ХарактеристикиГруза.Объем * КоэфПересчета;
	ТекКолМест    = ХарактеристикиГруза.КоличествоМест * КоэфПересчета;
	
	НайдСтроки = Новый Массив();
	УровеньПункта = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
	Для Каждого УровеньЗаказа Из УровеньПункта.ПолучитьЭлементы() Цикл 
		Для Каждого УровеньГруза Из УровеньЗаказа.ПолучитьЭлементы() Цикл 
			Если УровеньЗаказа.Этап = ТекЗаказ И УровеньГруза.Группировка = ТекГруз И УровеньГруза.ЕдиницаИзмерения = ТекЕдИзм Тогда 
				НайдСтроки.Добавить(УровеньГруза);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаГруза Из НайдСтроки Цикл 
		СтрокаГруза.Количество = ТекКоличество;
		СтрокаГруза.ВесБрутто  = ТекВесБрутто;
		СтрокаГруза.Объем      = ТекОбъем;
		СтрокаГруза.КолМест    = ТекКолМест;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоВремяВПутиПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекМаршрутныйЛист = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекМаршрутныйЛист = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяВПути);
	
	// Обновление данных в кэше
	текПункт1 = ТекСтрока.Адрес;
	ТекКоллекция = ТекСтрока.ПолучитьЭлементы();
	текПункт2 = ТекКоллекция[ТекКоллекция.Индекс(ТекСтрока)+1].Адрес;
	НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт1, текПункт2));
	Если НайдСтроки.Количество() Тогда 
		НайдСтроки[0].Время      = ТекСтрока.ВремяВПути;
		НайдСтроки[0].РучнойВвод = Истина;
		
	Иначе 
		НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт2, текПункт1));
		Если НайдСтроки.Количество() Тогда 
			НайдСтроки[0].Время      = ТекСтрока.ВремяВПути;
			НайдСтроки[0].РучнойВвод = Истина;
			
		Иначе 
			НовСтрока = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрока.Пункт1     = текПункт1;
			НовСтрока.Пункт2     = текПункт2;
			НовСтрока.Время      = ТекСтрока.ВремяВПути;
			НовСтрока.Расстояние = ТекСтрока.Расстояние;
			НовСтрока.РучнойВвод = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекМаршрутныйЛист.ПересчетВремени = 1 Тогда 
		флТекДанныеПройдены = Ложь;
		ЭлементыВетка = МаршрутыСписокЗаказов.НайтиСтроки(Новый Структура("GUIDТС, УровеньДерева", ТекМаршрутныйЛист.GUID, "Пункт"));
		Для Каждого СтрокаПункта Из ЭлементыВетка Цикл 
			Если СтрокаПункта.GUIDПункта = ТекСтрока.GUIDПункта Тогда 
				флТекДанныеПройдены = Истина;
				Продолжить;
			КонецЕсли;
			
			Если флТекДанныеПройдены Тогда 
				Если Не ТекВремяСтроки = Неопределено Тогда
					ПредВремяВПути = 0;
					
					ТекВремяСтроки.Свойство("ВремяВПути", ПредВремяВПути);
					ТекВремяСтроки = Неопределено;
					
					РазницаВремени = СложитьВремя(ТекСтрока.ВремяВПути, -ПредВремяВПути);
					
					СтрокаПункта.Ожидание = СложитьВремя(СтрокаПункта.Ожидание, - РазницаВремени);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекМаршрутныйЛист);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист, Ложь);
	ОбновитьПланировщик();


КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоРасстояниеПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Обновление данных в кэше
	текПункт1 = ТекСтрока.Адрес;
	ТекКоллекция = ТекСтрока.ПолучитьЭлементы();
	текПункт2 = ТекКоллекция[ТекКоллекция.Индекс(ТекСтрока)+1].Адрес;
	НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт1, текПункт2));
	Если НайдСтроки.Количество() Тогда 
		НайдСтроки[0].Расстояние = ТекСтрока.Расстояние;
		НайдСтроки[0].РучнойВвод = Истина;
		
	Иначе 
		НайдСтроки = кэшВремяРасстояниеМеждуПунктами.НайтиСтроки(Новый Структура("Пункт1,Пункт2", текПункт2, текПункт1));
		Если НайдСтроки.Количество() Тогда 
			НайдСтроки[0].Расстояние = ТекСтрока.Расстояние;
			НайдСтроки[0].РучнойВвод = Истина;
			
		Иначе 
			НовСтрока = кэшВремяРасстояниеМеждуПунктами.Добавить();
			НовСтрока.Пункт1     = текПункт1;
			НовСтрока.Пункт2     = текПункт2;
			НовСтрока.Время      = ТекСтрока.ВремяВПути;
			НовСтрока.Расстояние = ТекСтрока.Расстояние;
			НовСтрока.РучнойВвод = Истина;
		КонецЕсли;
	КонецЕсли;

	ТекМаршрутныйЛист = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекМаршрутныйЛист = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекМаршрутныйЛист);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Стоянка);
	
	ТекМЛ = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекМЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекМЛ.ПересчетВремени = 1 Тогда 
		Если Не МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] = ТекущиеДанные Тогда 
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекущиеДанные Тогда 
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					Если Не ТекВремяСтроки = Неопределено Тогда
						ПредОжидание = 0;
						
						ТекВремяСтроки.Свойство("Ожидание", ПредОжидание);
						ТекВремяСтроки = Неопределено;
						
						РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущиеДанные.Ожидание, -ПредОжидание);
						
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМЛ);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекМЛ);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекМЛ);
	ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекМЛ);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Ложь, ТекМЛ);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекМЛ);
	ОбновитьДанныеТекущегоМаршрута(ТекМЛ);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМЛ, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоСтоянкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Стоянка);
	
	ТекДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ПересчетВремени = 1 Тогда 
		ТекПункт = ТекущиеДанные.ПолучитьРодителя();
		
		флТекДанныеПройдены = Ложь;
		Для Каждого СтрокаПункта Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
			Если СтрокаПункта = ТекПункт Тогда 
				флТекДанныеПройдены = Истина;
				Продолжить;
			КонецЕсли;
			
			Если флТекДанныеПройдены Тогда 
				Если Не ТекВремяСтроки = Неопределено Тогда
					ПредСтоянка = 0;
					
					ТекВремяСтроки.Свойство("Стоянка", ПредСтоянка);
					ТекВремяСтроки = Неопределено;
					
					РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущиеДанные.Стоянка, -ПредСтоянка);
					
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекДанные);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекДанные);
	ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекДанные);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Ложь, ТекДанные);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекДанные);
	ОбновитьДанныеТекущегоМаршрута(ТекДанные);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекДанные, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПрибытиеПланПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекМаршрутныйЛист = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекМаршрутныйЛист = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТекВремяСтроки = Неопределено Тогда
		ПрибытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = ТекСтрока.ВремяПрибытияВПункт - ПрибытиеПлан;
		
		Если ТекМаршрутныйЛист.ПересчетВремени = 1 Тогда 
			РазницаЧас = Цел(РазницаВремени/3600);
			РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекСтрока Тогда 
					Если Не МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
					КонецЕсли;
					
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			Если Не МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] = ТекСтрока Тогда
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = 
					МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].ВремяПрибытияВПункт + РазницаВремени;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекМаршрутныйЛист);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоУбытиеПланПриИзменении(Элемент)
	
	ТекСтрока = Элементы.МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекМаршрутныйЛист = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекМаршрутныйЛист = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекВремяСтроки = Неопределено Тогда
		УбытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = ТекСтрока.УбытиеПлан - УбытиеПлан;
		
		Если МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] = ТекСтрока Или ТекМаршрутныйЛист.ПересчетВремени = 0 Тогда 
			МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].ВремяПрибытияВПункт = 
				МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0].ВремяПрибытияВПункт + РазницаВремени;
		КонецЕсли;
		
		Если ТекМаршрутныйЛист.ПересчетВремени = 1 Тогда 
			РазницаЧас = Цел(РазницаВремени/3600);
			РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекСтрока Тогда 
					Если Не МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
						СтрокаПункта.Ожидание = СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
					КонецЕсли;
					
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					СтрокаПункта.Ожидание = СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист);
	ОбновитьВременныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьВесоОбъемныеХарактеристикиТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеПоСтоянкамТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьМаршрутныеПараметрыТекущегоМаршрута(Истина, ТекМаршрутныйЛист);
	ОтобразитьИтоговыеДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьДанныеТекущегоМаршрута(ТекМаршрутныйЛист);
	ОбновитьОбщиеИтогиПоТекущемуМаршруту(ТекМаршрутныйЛист, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокЗаказовДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, Значение)
	// Фиксация операции для статистики
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерСтрокиГруза(Группировка, Этап)
	НомерСтроки = 0;
	Если ЗначениеЗаполнено(Группировка) Тогда 
		Если ТипЗнч(Группировка) = Тип("СправочникСсылка.Номенклатура") Тогда 
			НомерСтроки = 0;
			Для Каждого ТекСтрокаГруза Из Этап.Товары Цикл 
				НомерСтроки = НомерСтроки + 1;
				Если ТекСтрокаГруза.Номенклатура = Группировка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НомерСтроки = 0;
			Для Каждого ТекСтрокаГруза Из Этап.ГрузовойСостав Цикл 
				НомерСтроки = НомерСтроки + 1;
				Если ТекСтрокаГруза.ГрузовоеМесто = Группировка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;  
	Возврат НомерСтроки;
КонецФункции
	
#КонецОбласти
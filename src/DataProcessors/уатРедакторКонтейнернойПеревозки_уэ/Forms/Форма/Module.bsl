
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ДатаНачалаПеревозки = НачалоДня(ТекущаяДатаСеанса());
	
	Если Параметры.Свойство("ШаблонПеревозки")
		И ТипЗнч(Параметры.ШаблонПеревозки) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		И Параметры.ШаблонПеревозки.ЭтоШаблонПеревозки
		И Параметры.ШаблонПеревозки.Мультимодальный Тогда
		
		Если Параметры.ШаблонПеревозки.ЭтоШаблонПеревозки
			И Параметры.ШаблонПеревозки.ЭтоЭтап Тогда
			Объект.ШаблонПеревозки = Параметры.ШаблонПеревозки.РодительскийЗаказ;
		Иначе
			Объект.ШаблонПеревозки = Параметры.ШаблонПеревозки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СоздатьКонтейнернуюПеревозку") И Параметры.СоздатьКонтейнернуюПеревозку Тогда
		Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаФормированиеДокументов;
		Объект.ЭтоКонтейнернаяПеревозка = Истина;
	ИначеЕсли Параметры.Свойство("СоздатьПеревозку") И Параметры.СоздатьПеревозку Тогда
		Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаФормированиеДокументов;
		Объект.ЭтоКонтейнернаяПеревозка = Ложь;
	Иначе
		Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаПросмотрСуществующихДокументов;
		Объект.ЭтоКонтейнернаяПеревозка = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Заказчик) тогда
		флЗаказОтКонтрагента = 1;
		Объект.Заказчик = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ШаблонПеревозки) Тогда
		ПрочитатьРеквизитыШаблонаПеревозки();
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ТаблицаЗаказыВесБрутто.Заголовок = НСтр("en='Weight, ';ru='Вес, '") + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ТаблицаСоставКонтейнераВесГруза.Заголовок = НСтр("en='Cargo weight, ';ru='Вес груза, '") + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ТаблицаЗаказыОбъем.Заголовок = НСтр("en='Volume, ';ru='Объем, '") + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ТаблицаСоставКонтейнераОбъемГруза.Заголовок = НСтр("en='Cargo volume, ';ru='Объем груза, '") + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияКоличестваМест = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияКоличестваМест) Тогда
		Элементы.ТаблицаЗаказыКоличествоМест.Заголовок = ПредставлениеЕдиницыИзмеренияКоличестваМест;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.Договор, "Объект.Организация", "Объект.Заказчик", "СПокупателем");
	
	ИспользоватьПланФактВМаршрутныхЛистах = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "флПланФакт", ИспользоватьПланФактВМаршрутныхЛистах);
	
	ИспользоватьСкладскиеАкты = ПолучитьФункциональнуюОпцию("уатИспользоватьСкладскиеАкты_уэ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ОтображатьСобытия = Истина;
	
	// Страница "История контейнерной перевозки"
	Элементы.ПоказыватьСобытия.Пометка = ОтображатьСобытия;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "ПоказыватьСобытия", ОтображатьСобытия);
	Если ЗначениеЗаполнено(Объект.Контейнер) Тогда
		Контейнер = Объект.Контейнер;
	Иначе
		Контейнер = 0;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "Контейнер", Контейнер);
	УстановитьОтборПоПериоду();
	
	// Страница "Создание (контейнерной) перевозки"
	ОчищатьКонтрагента = Не ЗначениеЗаполнено(Объект.Заказчик);
	УстановитьОграничениеТипаКонтрагент(ОчищатьКонтрагента);
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПеревозкиПриИзменении(Элемент)
	
	СекундВДне = 24 * 60 * 60;
	
	Для Каждого ТекСтрока Из Объект.ЭтапыПеревозки Цикл
		ТекСтрока.ДатаОтправления = ДатаНачалаПеревозки
			+ ТекСтрока.ДнейОтНачалаОтправление * СекундВДне
			+ (ТекСтрока.ДатаОтправления - НачалоДня(ТекСтрока.ДатаОтправления));
		
		ТекСтрока.ДатаПрибытия = ДатаНачалаПеревозки
			+ ТекСтрока.ДнейОтНачалаНазначение * СекундВДне
			+ (ТекСтрока.ДатаПрибытия - НачалоДня(ТекСтрока.ДатаПрибытия));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПеревозкиПриИзменении(Элемент)
	
	ПрочитатьРеквизитыШаблонаПеревозки();
	
	ОчищатьКонтрагента = Ложь;
	УстановитьОграничениеТипаКонтрагент(ОчищатьКонтрагента);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура флЗаказОтКонтрагентаПриИзменении(Элемент)
	УстановитьОграничениеТипаКонтрагент();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура Контейнер1ПриИзменении(Элемент)
	ПрочитатьПараметрыКонтейнера();
	СформироватьПодвалГрузовВКонтейнере();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура Контейнер1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Контейнер", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УникальноеГрузовоеМесто", Истина));
	ОткрытьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора", ПараметрыФормы, Элементы.Контейнер1);
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерПриИзменении(Элемент)
	КонтейнерПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Контейнер", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УникальноеГрузовоеМесто", Истина));
	ОткрытьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора", ПараметрыФормы, Элементы.Контейнер);
КонецПроцедуры

&НаКлиенте
Процедура ПериодСПриИзменении(Элемент)
	
	ПериодСИзменен = Истина;
	ПериодПоИзменен = Ложь;
	УстановитьОтборПоПериоду(ПериодСИзменен, ПериодПоИзменен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоПриИзменении(Элемент)
	
	ПериодСИзменен = Ложь;
	ПериодПоИзменен = Истина;
	УстановитьОтборПоПериоду(ПериодСИзменен, ПериодПоИзменен);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ТаблицаЗаказы

&НаКлиенте
Процедура ТаблицаЗаказыПриИзменении(Элемент)
	СформироватьПодвалГрузовВКонтейнере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ТаблицаОпераций

&НаКлиенте
Процедура ТаблицаОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ТаблицаОпераций.ДанныеСтроки(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ТаблицаОперацийСклад Тогда
		ЗначениеПоля = ДанныеСтроки.СкладПункт;
	ИначеЕсли Поле = Элементы.ТаблицаОперацийСобытие Тогда
		ЗначениеПоля = ДанныеСтроки.Событие;
	ИначеЕсли Поле = Элементы.ТаблицаОперацийЗаказВнутренний Тогда
		ЗначениеПоля = ДанныеСтроки.ЗаказВнутренний;
	ИначеЕсли Поле = Элементы.ТаблицаОперацийПеревозчик Тогда
		ЗначениеПоля = ДанныеСтроки.Перевозчик;
	ИначеЕсли Поле = Элементы.ТаблицаОперацийТС Тогда
		ЗначениеПоля = ДанныеСтроки.ТС;
	Иначе
		ЗначениеПоля = ДанныеСтроки.Документ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
		ЗначениеПоля = ДанныеСтроки.Документ;
	КонецЕсли;
	
	ПоказатьЗначение(, ЗначениеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСоставКонтейнераПоТекущейСтроке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ЭтапыШаблонаПеревозки

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиДатаОтправленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СекундВДне = 24 * 60 * 60 ;
	ТекущиеДанные.ДнейОтНачалаОтправление = (ТекущиеДанные.ДатаОтправления - ДатаНачалаПеревозки) / СекундВДне;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиДнейОтНачалаОтправлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СекундВДне = 24 * 60 * 60 ;
	ТекущиеДанные.ДатаОтправления = ДатаНачалаПеревозки
		+ ТекущиеДанные.ДнейОтНачалаОтправление * СекундВДне
		+ (ТекущиеДанные.ДатаОтправления - НачалоДня(ТекущиеДанные.ДатаОтправления));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиДатаПрибытияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СекундВДне = 24 * 60 * 60 ;
	ТекущиеДанные.ДнейОтНачалаНазначение = (ТекущиеДанные.ДатаПрибытия - ДатаНачалаПеревозки) / СекундВДне;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиДнейОтНачалаНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СекундВДне = 24 * 60 * 60 ;
	ТекущиеДанные.ДатаПрибытия = ДатаНачалаПеревозки
		+ ТекущиеДанные.ДнейОтНачалаНазначение * СекундВДне
		+ (ТекущиеДанные.ДатаПрибытия - НачалоДня(ТекущиеДанные.ДатаПрибытия));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = СтруктураОтбораТС(ТекущиеДанные);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = СтруктураОтбораТС(ТекущиеДанные);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = СтруктураОтбораТС(ТекущиеДанные);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыШаблонаПеревозкиПеревозчикПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыШаблонаПеревозки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Перевозчик) И ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		СписокДоговоров = Новый СписокЗначений();
		СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
		ТекущиеДанные.ДоговорСПеревозчиком = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
			Объект.Организация, ТекущиеДанные.Перевозчик, СтрПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ТаблицаСозданныеДокументы

&НаКлиенте
Процедура ТаблицаСозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ТаблицаСозданныеДокументы.ДанныеСтроки(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПоля = ДанныеСтроки.Документ;
	ПоказатьЗначение(, ЗначениеПоля);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = Объект.ПериодС;
	ДиалогПериода.Период.ДатаОкончания = Объект.ПериодПо;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	Если ТаблицаЗаказы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list of orders before the selection?';ru='Очистить список заказов перед подбором?'");
		Оповещение = Новый ОписаниеОповещения("ПодборЗаказовОчисткаТЧ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыСервер();
	УстановитьВидимость();
	
	// Показываем историю с даты начала перевозки
	Если Объект.ЭтоКонтейнернаяПеревозка Тогда
		ПустаяДата = '00010101';
		Объект.ПериодС = НачалоДня(ДатаНачалаПеревозки);
		Объект.ПериодПо = ПустаяДата;
		УстановитьОтборПоПериоду();
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "Контейнер", Объект.Контейнер);
		Элементы.ТаблицаОпераций.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыСервер()
	
	ПараметрыПеревозки = Новый Структура;
	Если Объект.ЭтоКонтейнернаяПеревозка Тогда
		ПараметрыПеревозки.Вставить("Контейнер",             Объект.Контейнер);
	КонецЕсли;
	ПараметрыПеревозки.Вставить("ДатаНачалаПеревозки",       ДатаНачалаПеревозки);
	ПараметрыПеревозки.Вставить("Организация",               Объект.Организация);
	ПараметрыПеревозки.Вставить("Заказчик",                  Объект.Заказчик);
	ПараметрыПеревозки.Вставить("ДоговорКонтрагента",        Объект.Договор);
	ПараметрыПеревозки.Вставить("Подразделение",             Объект.Подразделение);
	ПараметрыПеревозки.Вставить("ТаблицаГрузов",             ТаблицаЗаказы);
	ПараметрыПеревозки.Вставить("ИспользоватьСкладскиеАкты", ИспользоватьСкладскиеАкты);
	
	СозданныеДокументы = Обработки.уатРедакторКонтейнернойПеревозки_уэ.СоздатьПеревозкуПоШаблону(
		Объект.ЭтапыПеревозки,
		Объект.ШаблонПеревозки,
		ПараметрыПеревозки);
	
	Если Объект.ЭтоКонтейнернаяПеревозка Тогда
		Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаПросмотрСуществующихДокументов;
	Иначе
		Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаПросмотрСозданныхДокументов;
		Для Каждого ТекДокумент ИЗ СозданныеДокументы Цикл
			НоваяСтрока = ТаблицаСозданныеДокументы.Добавить();
			НоваяСтрока.Документ = ТекДокумент;
			Если ТекДокумент.Проведен Тогда
				НоваяСтрока.СтатусПроведенияДокумента = 1;
			Иначе
				НоваяСтрока.СтатусПроведенияДокумента = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстНСтр = СтрШаблон(НСтр("ru = 'Документов перевозки создано: %1'"), СозданныеДокументы.Количество());
	ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
	//Элементы.ТаблицаОпераций.Обновить();
	
	ИмяКлючевойОперации = "уатОперации.Обработка.уатРедакторКонтейнернойПеревозки_уэ.СоздатьПеревозкуПоШаблону";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСоставКонтейнера(Команда)
	
	ОтображатьСоставКонтейнера = Не ОтображатьСоставКонтейнера;
	Элементы.ТаблицаОперацийОтобразитьСоставКонтейнера.Пометка = ОтображатьСоставКонтейнера;
	УстановитьВидимость();
	
	Если ОтображатьСоставКонтейнера Тогда
		ЗаполнитьСоставКонтейнераПоТекущейСтроке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСобытия(Команда)
	
	ОтображатьСобытия = Не ОтображатьСобытия;
	
	Элементы.ПоказыватьСобытия.Пометка = ОтображатьСобытия;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "ПоказыватьСобытия", ОтображатьСобытия);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюПеревозку(Команда)
	Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаФормированиеДокументов;
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	Если Период <> Неопределено Тогда
		Объект.ПериодС = Период.ДатаНачала;
		Объект.ПериодПо = Период.ДатаОкончания;
		УстановитьОтборПоПериоду();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ТаблицаЗаказы.Очистить();
		
		ПодборЗаказовОткрытьФормуПодбора();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОткрытьФормуПодбора()
	
	ПеренесенныеЗаказы = Новый Массив();
	Для Каждого ТекСтрока Из ТаблицаЗаказы Цикл 
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Заказ",            ТекСтрока.Заказ);
		ДанныеЗаказа.Вставить("Груз",             ТекСтрока.ГрузовоеМесто);
		ДанныеЗаказа.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		ДанныеЗаказа.Вставить("Количество",       ТекСтрока.Количество);
		
		ПеренесенныеЗаказы.Добавить(ДанныеЗаказа);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПеренесенныеЗаказы", ПеренесенныеЗаказы);
	ПараметрыФормы.Вставить("ДатаВыезда", ДатаНачалаПеревозки);
	Оповещение = Новый ОписаниеОповещения("ПодборЗаказовПослеПодбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовПослеПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РезультатЗакрытия.ПодобранныеЗаказы Цикл 
		НоваяСтрока = ТаблицаЗаказы.Добавить();
		НоваяСтрока.Заказ            = ТекСтрока.Заказ;
		НоваяСтрока.ГрузовоеМесто    = ТекСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НоваяСтрока.Количество       = ТекСтрока.Количество;
		НоваяСтрока.ВесБрутто        = ТекСтрока.Вес;
		НоваяСтрока.Объем            = ТекСтрока.Объем;
		НоваяСтрока.КоличествоМест   = ТекСтрока.КоличествоМест;
		//НоваяСтрока.ДатаОтправленияПлан = ;
		//НоваяСтрока.ДатаПрибытияПлан = ;
	КонецЦикла;
	
	СформироватьПодвалГрузовВКонтейнере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ТаблицаОперацийСобытие.Видимость = ОтображатьСобытия;
	Элементы.ТаблицаСоставКонтейнера.Видимость = ОтображатьСоставКонтейнера;
	Если Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаФормированиеДокументов Тогда
		Элементы.ФормаСоздатьДокументы.Видимость = Истина;
		Если Объект.ЭтоКонтейнернаяПеревозка Тогда
			Заголовок = НСтр("ru = 'Создание контейнерной перевозки'");
		Иначе
			Заголовок = НСтр("ru = 'Создание перевозки'");
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыСозданияЭтапов.ТекущаяСтраница = Элементы.СтраницаПросмотрСуществующихДокументов Тогда
		Элементы.ФормаСоздатьДокументы.Видимость = Ложь;
		Заголовок = НСтр("ru = 'История контейнерной перевозки'");
	Иначе
		Элементы.ФормаСоздатьДокументы.Видимость = Ложь;
		Заголовок = НСтр("ru = 'Созданные документы'");
	КонецЕсли;
	
	Элементы.Контейнер1.Видимость = Объект.ЭтоКонтейнернаяПеревозка;
	Элементы.ЭтапыШаблонаПеревозкиГруппаОперацииСГрузом.Видимость = ИспользоватьСкладскиеАкты И Объект.ЭтоКонтейнернаяПеревозка;
	Элементы.ЭтапыШаблонаПеревозкиГруппаСкладскиеАкты.Видимость = ИспользоватьСкладскиеАкты;
	Если Объект.ЭтоКонтейнернаяПеревозка Тогда
		Элементы.СтраницаСоставКонтейнера.Видимость = Истина;
		Элементы.ГруппаСтраницыФормированияДокументов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.СтраницаСоставКонтейнера.Видимость = Ложь;
		Элементы.ГруппаСтраницыФормированияДокументов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаСтраницыФормированияДокументов.ТекущаяСтраница = Элементы.СтраницаЭтапыПеревозки;
	КонецЕсли;
	
	Элементы.Договор.Видимость = флЗаказОтКонтрагента;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаКонтрагент(Очищать=Истина)
	Если флЗаказОтКонтрагента Тогда
		Элементы.Заказчик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Если Очищать Тогда
			Объект.Заказчик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			Элементы.Заказчик.ПодсказкаВвода = НСтр("'Введите ИНН или наименование'; en = 'Enter TIN or name'");
		КонецЕсли;
	Иначе
		Элементы.Заказчик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Если Очищать Тогда
			Объект.Заказчик = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
			Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			Элементы.Заказчик.ПодсказкаВвода = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизитыШаблонаПеревозки()
	РеквизитыШаблона = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект.ШаблонПеревозки,
		"Организация, Подразделение, Контрагент, ДоговорКонтрагента");
	Объект.Организация = РеквизитыШаблона.Организация;
	Объект.Подразделение = РеквизитыШаблона.Подразделение;
	Объект.Заказчик = РеквизитыШаблона.Контрагент;
	Объект.Договор = РеквизитыШаблона.ДоговорКонтрагента;
	
	Если ТипЗнч(Объект.Заказчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		флЗаказОтКонтрагента = 1;
	Иначе
		флЗаказОтКонтрагента = 0;
	КонецЕсли;
	
	ПрочитатьТаблицуЭтаповШаблона();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТаблицуЭтаповШаблона()
	
	Если Не Объект.ШаблонПеревозки.Мультимодальный Или Объект.ШаблонПеревозки.ЭтоЭтап Тогда 
		Возврат;
	КонецЕсли;
	
	СекундВДне = 24 * 60 * 60;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Объект.ШаблонПеревозки);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресПрибытия,
	|	уатЗаказГрузоотправителя.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителя.Расстояние КАК Расстояние,
	|	уатЗаказГрузоотправителя.Время КАК Время,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьАктОтгрузки КАК СоздаватьАктОтгрузки,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьАктПриемки КАК СоздаватьАктПриемки,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьИзвлечениеГрузовИзКонтейнера КАК СоздаватьИзвлечениеГрузовИзКонтейнера,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьМаршрутныйЛист КАК СоздаватьМаршрутныйЛист,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьРазмещениеГрузовВКонтейнере КАК СоздаватьРазмещениеГрузовВКонтейнере,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Перевозчик КАК Перевозчик,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ТС КАК ТС,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДоговорСПеревозчиком КАК ДоговорСПеревозчиком,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НастройкаФормированияКомплектовДокументов КАК НастройкаФормированияКомплектовДокументов,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДнейОтНачалаОтправление КАК ДнейОтНачалаОтправление,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДнейОтНачалаНазначение КАК ДнейОтНачалаНазначение
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа";
	
	Объект.ЭтапыПеревозки.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НовСтрока = Объект.ЭтапыПеревозки.Добавить();
		НовСтрока.Этап                = Выборка.Этап;
		НовСтрока.АдресОтправления    = Выборка.АдресОтправления;
		НовСтрока.АдресНазначения     = Выборка.АдресПрибытия;
		НовСтрока.ВидПеревозки        = Выборка.ВидПеревозки;
		НовСтрока.Расстояние          = Выборка.Расстояние;
		НовСтрока.Время               = Выборка.Время;
		НовСтрока.ДатаОтправления     = ДатаНачалаПеревозки
			+ Выборка.ДнейОтНачалаОтправление * СекундВДне
			+ (Выборка.ДатаОтправленияПлан - НачалоДня(Выборка.ДатаОтправленияПлан));
		НовСтрока.ДатаПрибытия        = ДатаНачалаПеревозки
			+ Выборка.ДнейОтНачалаНазначение * СекундВДне
			+ (Выборка.ДатаПрибытияПлан - НачалоДня(Выборка.ДатаПрибытияПлан));
		
		НовСтрока.СоздаватьАктОтгрузки                      = Выборка.СоздаватьАктОтгрузки;
		НовСтрока.СоздаватьАктПриемки                       = Выборка.СоздаватьАктПриемки;
		НовСтрока.СоздаватьИзвлечениеГрузовИзКонтейнера     = Выборка.СоздаватьИзвлечениеГрузовИзКонтейнера;
		НовСтрока.СоздаватьМаршрутныйЛист                   = Выборка.СоздаватьМаршрутныйЛист;
		НовСтрока.СоздаватьРазмещениеГрузовВКонтейнере      = Выборка.СоздаватьРазмещениеГрузовВКонтейнере;
		НовСтрока.Перевозчик                                = Выборка.Перевозчик;
		НовСтрока.ТС                                        = Выборка.ТС;
		НовСтрока.ДоговорСПеревозчиком                      = Выборка.ДоговорСПеревозчиком;
		НовСтрока.НастройкаФормированияКомплектовДокументов = Выборка.НастройкаФормированияКомплектовДокументов;
		НовСтрока.ДнейОтНачалаОтправление                   = Выборка.ДнейОтНачалаОтправление;
		НовСтрока.ДнейОтНачалаНазначение                    = Выборка.ДнейОтНачалаНазначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставКонтейнераПоТекущейСтроке();
	
	ТекущиеДанные = Элементы.ТаблицаОпераций.ТекущиеДанные;
	
	Если ОтображатьСоставКонтейнера И ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьСоставКонтейнера(ТекущиеДанные.Дата, ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставКонтейнера(Период, Документ)
	
	ТаблицаСоставКонтейнера.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЗаказГрузоотправителя КАК Заказ
	|ПОМЕСТИТЬ втОстаткиГрузовВКонтейнерах
	|ИЗ
	|	РегистрНакопления.уатОстаткиГрузовВКонтейнерах_уэ.Остатки(
	|			&Период,
	|			Контейнер = &Контейнер) КАК уатОстаткиГрузовВКонтейнерах_уэОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаткиГрузовВКонтейнерах.Заказ КАК Заказ,
	|	1 КАК Количество,
	|	уатЗаказГрузоотправителя.ВесБрутто КАК ВесГруза,
	|	уатЗаказГрузоотправителя.Объем КАК ОбъемГруза,
	|	НЕОПРЕДЕЛЕНО КАК Груз
	|ИЗ
	|	втОстаткиГрузовВКонтейнерах КАК втОстаткиГрузовВКонтейнерах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО втОстаткиГрузовВКонтейнерах.Заказ = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиГрузовВКонтейнерах.Заказ,
	|	втОстаткиГрузовВКонтейнерах.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест = 0
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто / уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест * втОстаткиГрузовВКонтейнерах.КоличествоОстаток
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест = 0
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.Объем / уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест * втОстаткиГрузовВКонтейнерах.КоличествоОстаток
	|	КОНЕЦ,
	|	втОстаткиГрузовВКонтейнерах.ГрузовоеМесто
	|ИЗ
	|	втОстаткиГрузовВКонтейнерах КАК втОстаткиГрузовВКонтейнерах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО втОстаткиГрузовВКонтейнерах.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|			И втОстаткиГрузовВКонтейнерах.ГрузовоеМесто = уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	|			И втОстаткиГрузовВКонтейнерах.ЕдиницаИзмерения = уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки
	|ГДЕ
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОстаткиГрузовВКонтейнерах.Заказ,
	|	втОстаткиГрузовВКонтейнерах.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяТовары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяТовары.ВесБрутто / уатЗаказГрузоотправителяТовары.Количество * втОстаткиГрузовВКонтейнерах.КоличествоОстаток
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяТовары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяТовары.Объем / уатЗаказГрузоотправителяТовары.Количество * втОстаткиГрузовВКонтейнерах.КоличествоОстаток
	|	КОНЕЦ,
	|	втОстаткиГрузовВКонтейнерах.ГрузовоеМесто
	|ИЗ
	|	втОстаткиГрузовВКонтейнерах КАК втОстаткиГрузовВКонтейнерах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО втОстаткиГрузовВКонтейнерах.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
	|			И втОстаткиГрузовВКонтейнерах.ГрузовоеМесто = уатЗаказГрузоотправителяТовары.Номенклатура
	|			И втОстаткиГрузовВКонтейнерах.ЕдиницаИзмерения = уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)");
	// Отображаются остатки грузов в контейнере после выполнения операции
	ГраницаКонтроля = Новый Граница(Новый МоментВремени(Период, Документ), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Период", ГраницаКонтроля);
	Запрос.УстановитьПараметр("Контейнер", Объект.Контейнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСоставКонтейнера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодвалГрузовВКонтейнере()
	
	ВесГрузовКонтейнера = ТаблицаЗаказы.Итог("ВесБрутто");
	ОбъемГрузовКонтейнера = ТаблицаЗаказы.Итог("Объем");
	КоличествоМестГрузовКонтейнера = ТаблицаЗаказы.Итог("КоличествоМест");
	
	ШаблонТекста = НСтр("ru = '%1 / %2 %3'; en = '%1 / %2 %3'");
	Элементы.ДекорацияВесКонтейнера.Заголовок = СтрШаблон(ШаблонТекста, Формат(ВесГрузовКонтейнера, "ЧН="),
		Формат(МаксимальныйВесГрузовКонтейнера, "ЧН="), ПредставлениеЕдиницыИзмеренияВеса);
	Элементы.ДекорацияВесКонтейнера.ЦветТекста = ПолучитьЦветЗаполнения(ВесГрузовКонтейнера, МаксимальныйВесГрузовКонтейнера);
	
	Элементы.ДекорацияОбъемКонтейнера.Заголовок = СтрШаблон(ШаблонТекста, Формат(ОбъемГрузовКонтейнера, "ЧН="),
		Формат(МаксимальныйОбъемГрузовКонтейнера, "ЧН="), ПредставлениеЕдиницыИзмеренияОбъема);
	Элементы.ДекорацияОбъемКонтейнера.ЦветТекста = ПолучитьЦветЗаполнения(ОбъемГрузовКонтейнера, МаксимальныйОбъемГрузовКонтейнера);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыКонтейнера()
	
	РеквизитыКонтейнера = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект.Контейнер, "Грузоподъемность, Вместимость");
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	МаксимальныйВесГрузовКонтейнера = РеквизитыКонтейнера.Грузоподъемность * КоэфВеса;
	МаксимальныйОбъемГрузовКонтейнера = РеквизитыКонтейнера.Вместимость * КоэфОбъема;
	МаксимальноеКоличествоМестГрузовКонтейнера = 0;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЦветЗаполнения(ТекущееЗначение, МаксимальноеЗначение)
	
	Возврат уатОбщегоНазначенияКлиент.ПолучитьЦветЗаполнения(ТекущееЗначение, МаксимальноеЗначение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидМоделиТСПоВидуПеревозки(ВидПеревозки)
	
	Возврат ВидПеревозки.ВидМоделиТС;
	
КонецФункции

&НаКлиенте
Функция СтруктураОтбораТС(ТекущиеДанные)
	
	СтруктураОтбора = Новый Структура();
	
	Если ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("СправочникСсылка.Организации") Тогда
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(ТекущиеДанные.Перевозчик) Тогда
			СтруктураОтбора.Вставить("Организация", ТекущиеДанные.Перевозчик);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(ТекущиеДанные.Перевозчик) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", ТекущиеДанные.Перевозчик);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидПеревозки) Тогда
		РазрешенныеВидыТС = Новый Массив();
		РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(ТекущиеДанные.ВидПеревозки));
		СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура ШаблонПеревозкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ЭтоШаблонПеревозки, ЭтоЭтап", Истина, Ложь));
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервере
Процедура КонтейнерПриИзмененииСервер()
	ПрочитатьПараметрыКонтейнера();
	Если ЗначениеЗаполнено(Объект.Контейнер) Тогда
		Контейнер = Объект.Контейнер;
	Иначе
		Контейнер = 0;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "Контейнер", Контейнер);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПериоду(ПериодСИзменен = Истина, ПериодПоИзменен = Истина);
	
	Если ПериодСИзменен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "НачалоПериода", НачалоДня(Объект.ПериодС));
	КонецЕсли;
	
	Если ПериодПоИзменен И ЗначениеЗаполнено(Объект.ПериодПо) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "КонецПериода", КонецДня(Объект.ПериодПо));
	ИначеЕсли ПериодПоИзменен И Не ЗначениеЗаполнено(Объект.ПериодПо) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОпераций, "КонецПериода", КонецДня('39991231'));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

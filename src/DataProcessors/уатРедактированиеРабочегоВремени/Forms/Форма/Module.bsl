
#Область ОписаниеПеременных

&НаКлиенте
Перем мОтмеченныеГрафикиРаботы;
&НаКлиенте
Перем мОтмеченныеСотрудники;
&НаКлиенте
Перем мОтмеченныеТС;
&НаКлиенте
Перем ИмяТекСписка;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ВосстановитьНастройкиФормы();
	ДатаГрафика       = ТекущаяДата();
	ДатаНачалоПериода = НачалоГода(ДатаГрафика);
	ДатаКонецПериода  = НачалоДня(КонецГода(ДатаГрафика));
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.уатКорректировкаИспользованияРаботникамиРабочегоВремени) Тогда
		Элементы.ВвестиДокументКорректировкаРабочегоВремени.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	мОтмеченныеГрафикиРаботы = Новый Массив();
	мОтмеченныеСотрудники    = Новый Массив();
	мОтмеченныеТС            = Новый Массив();
	флагОдинОбъект           = Истина;
	
	Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
		ТекСтрока = ПолучитьГрафикРаботы();
		Если ТекСтрока <> Неопределено Тогда
			мОтмеченныеГрафикиРаботы.Добавить(ТекСтрока);
			ДанныеГрафикиРабот.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеГрафикиРаботы);
			Элементы.ДанныеГрафикиРабот.Обновить();
		КонецЕсли;
	КонецЕсли;

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДанныеСотрудники, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДанныеТС,         "Организация", ОтборОрганизацияТС, ЗначениеЗаполнено(ОтборОрганизацияТС));
	
	ЗаполнитьПредставлениеПериода();
	УстановитьВидимостьДоступность();
	УстановитьОтборУволенных(НЕ Элементы.СотрудникиОтображатьУволенных.Пометка);
	УстановитьОтборВыбывшие(НЕ Элементы.ФормаОтобразитьВыбывшие.Пометка);
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекФормы = Новый Структура;
	СтруктураНастроекФормы.Вставить("ПереключательРежимаОтображенияРасписания", ПереключательРежимаОтображенияРасписания);
	СтруктураНастроекФормы.Вставить("ПереключательРежимаОтображенияЯчейки",     ПереключательРежимаОтображенияЯчейки);
	СтруктураНастроекФормы.Вставить("ПоказыватьОтклоненияИФактическиеДанные",   ПоказыватьОтклоненияИФактическиеДанные);
	СтруктураНастроекФормы.Вставить("ПоказыватьТабельныйНомер",                 ПоказыватьТабельныйНомер);
	СтруктураНастроекФормы.Вставить("ПоказыватьБуквенныйКод",                   ПоказыватьБуквенныйКод);
	СтруктураНастроекФормы.Вставить("ОтображатьВыбывшие",                       Элементы.ФормаОтобразитьВыбывшие.Пометка);
	СтруктураНастроекФормы.Вставить("ОтображатьУволенных",                      Элементы.СотрудникиОтображатьУволенных.Пометка);
	СтруктураНастроекФормы.Вставить("ПереключательРежимаОтображенияГрафиковТС", ПереключательРежимаОтображенияГрафиковТС);
	
	СохранитьНастройкиФормы(СтруктураНастроекФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КорректировкаРабочегоВремени" Тогда 
		ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательРежимаОтображенияРасписанияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтклоненияИФактическиеДанныеПриИзменении(Элемент)
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТабельныйНомерПриИзменении(Элемент)
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьБуквенныйКодПриИзменении(Элемент)
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимаОтображенияЯчейкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимаОтображенияГрафиковТСПриИзменении(Элемент)
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДанныеСотрудники, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияТСПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДанныеТС, "Организация", ОтборОрганизацияТС, ЗначениеЗаполнено(ОтборОрганизацияТС));
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ДатаГрафика);
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение",ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРедактированиеРабочегоВремени.Форма.ФормаКалендаря", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат,Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДатаГрафика = Результат;
		ЗаполнитьПредставлениеПериода();
		ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура РасписаниеПоГрафикуВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ТекущаяОбласть = РасписаниеПоГрафику.ТекущаяОбласть;
	Если ТекущаяОбласть.Расшифровка <> Неопределено 
		И ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Строка") 
		И ТекущаяОбласть.Низ = ТекущаяОбласть.Верх
		И ТекущаяОбласть.Лево = ТекущаяОбласть.Право Тогда
		СтандартнаяОбработка = Ложь;
		СписокМеню = Новый СписокЗначений();
		мСтрок = СтрРазделить(ТекущаяОбласть.Расшифровка, Символы.ПС);
		Для Каждого ТекСтрока Из мСтрок Цикл
			СписокМеню.Добавить(
				РегистраторДляРасшифровкиТекущейОбласти(ТекущаяОбласть.Верх, ТекущаяОбласть.Лево, ТекСтрока),
				ТекСтрока);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
		
	ИначеЕсли НЕ (ТекущаяОбласть.Верх = 1 И ТекущаяОбласть.Низ = 1) И
		НЕ (ТекущаяОбласть.Право = 1 И ТекущаяОбласть.Лево = 1) 
		И НЕ (ТекущаяОбласть.Право = КолвоДнейГрафик + 2 И ТекущаяОбласть.Лево = КолвоДнейГрафик + 2)
		И ТекущаяОбласть.Право < КолвоДнейГрафик + 2 
		И ТекущаяОбласть.Верх <= КолвоСтрокГрафика + 1 
		И ПолучитьМассивСОтмеченнымиДанными().Количество() <> 0 Тогда
		ИтогоГрафик = 0;
		ВидВремениРабочее   = Новый Соответствие();
		ВидВремениНеРабочее = Новый Соответствие();
		СписокМеню = Новый СписокЗначений();
		Для НомерКолонки = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			ИтогоГрафик = ИтогоГрафик + ПросуммироватьСтроки(ТекущаяОбласть.Лево - 1, ТекущаяОбласть.Право -1, НомерКолонки, "ПоГрафику");
			ИтогоРабочее = ПросуммироватьСтроки(ТекущаяОбласть.Лево - 1, ТекущаяОбласть.Право -1, НомерКолонки, "Рабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоРабочее Цикл
				текСоответсвие = ВидВремениРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
			ИтогоНеРабочее = ПросуммироватьСтроки(ТекущаяОбласть.Лево -1 , ТекущаяОбласть.Право -1 , НомерКолонки, "НеРабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоНеРабочее Цикл
				текСоответсвие = ВидВремениНеРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениНеРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
		КонецЦикла;
		
		СписокМеню.Добавить(Нстр("ru = 'По графику'") + ": " + Окр(ИтогоГрафик, 2) + Нстр("en='h';ru='ч.'"));
		Для Каждого ТекЭлемент Из ВидВремениРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		Для Каждого ТекЭлемент Из ВидВремениНеРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
		
	ИначеЕсли ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ИтогоГрафик = 0;
		ВидВремениРабочее   = Новый Соответствие();
		ВидВремениНеРабочее = Новый Соответствие();
		СписокМеню = Новый СписокЗначений();
		Для НомерКолонки = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			ИтогоГрафик = ИтогоГрафик + ПросуммироватьСтроки(1, 31, НомерКолонки, "ПоГрафику");
			ИтогоРабочее = ПросуммироватьСтроки(1, 31, НомерКолонки, "Рабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоРабочее Цикл
				текСоответсвие = ВидВремениРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
			ИтогоНеРабочее = ПросуммироватьСтроки(1 , 31 , НомерКолонки, "НеРабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоНеРабочее Цикл
				текСоответсвие = ВидВремениНеРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениНеРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
		КонецЦикла;
		
		СписокМеню.Добавить(Нстр("ru = 'По графику'") + ": " + Окр(ИтогоГрафик, 2) + Нстр("en='h';ru='ч.'"));
		Для Каждого ТекЭлемент Из ВидВремениРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		Для Каждого ТекЭлемент Из ВидВремениНеРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	ТекущаяОбласть = РасписаниеПоГрафику.ТекущаяОбласть;
	
	Если ТекущаяОбласть.Расшифровка <> Неопределено 
		И ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Строка") 
		И ТекущаяОбласть.Низ = ТекущаяОбласть.Верх
		И ТекущаяОбласть.Лево = ТекущаяОбласть.Право Тогда
		
		СписокМеню = Новый СписокЗначений();
		мСтрок = СтрРазделить(ТекущаяОбласть.Расшифровка, Символы.ПС);
		Для Каждого ТекСтрока Из мСтрок Цикл
			СписокМеню.Добавить(ТекСтрока);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
		
	ИначеЕсли НЕ (ТекущаяОбласть.Верх = 1 И ТекущаяОбласть.Низ = 1) И
		НЕ (ТекущаяОбласть.Право = 1 И ТекущаяОбласть.Лево = 1) 
		И НЕ (ТекущаяОбласть.Право = КолвоДнейГрафик + 2 И ТекущаяОбласть.Лево = КолвоДнейГрафик + 2)
		И ТекущаяОбласть.Право < КолвоДнейГрафик + 2 
		И ТекущаяОбласть.Верх <= КолвоСтрокГрафика + 1 
		И ПолучитьМассивСОтмеченнымиДанными().Количество() <> 0 Тогда
		ИтогоГрафик = 0;
		ВидВремениРабочее   = Новый Соответствие();
		ВидВремениНеРабочее = Новый Соответствие();
		СписокМеню = Новый СписокЗначений();
		Для НомерКолонки = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			ИтогоГрафик = ИтогоГрафик + ПросуммироватьСтроки(ТекущаяОбласть.Лево - 1, ТекущаяОбласть.Право -1, НомерКолонки, "ПоГрафику");
			ИтогоРабочее = ПросуммироватьСтроки(ТекущаяОбласть.Лево - 1, ТекущаяОбласть.Право -1, НомерКолонки, "Рабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоРабочее Цикл
				текСоответсвие = ВидВремениРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
			ИтогоНеРабочее = ПросуммироватьСтроки(ТекущаяОбласть.Лево -1 , ТекущаяОбласть.Право -1 , НомерКолонки, "НеРабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоНеРабочее Цикл
				текСоответсвие = ВидВремениНеРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениНеРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
		КонецЦикла;
		
		СписокМеню.Добавить(Нстр("ru = 'По графику'") + ": " + Окр(ИтогоГрафик, 2) + Нстр("en='h';ru='ч.'"));
		Для Каждого ТекЭлемент Из ВидВремениРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		Для Каждого ТекЭлемент Из ВидВремениНеРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
		
	ИначеЕсли ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ИтогоГрафик = 0;
		ВидВремениРабочее   = Новый Соответствие();
		ВидВремениНеРабочее = Новый Соответствие();
		СписокМеню = Новый СписокЗначений();
		Для НомерКолонки = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			ИтогоГрафик = ИтогоГрафик + ПросуммироватьСтроки(1, 31, НомерКолонки, "ПоГрафику");
			ИтогоРабочее = ПросуммироватьСтроки(1, 31, НомерКолонки, "Рабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоРабочее Цикл
				текСоответсвие = ВидВремениРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
			ИтогоНеРабочее = ПросуммироватьСтроки(1 , 31 , НомерКолонки, "НеРабочее", Истина);
			Для Каждого ТекЭлемент Из ИтогоНеРабочее Цикл
				текСоответсвие = ВидВремениНеРабочее.Получить(ТекЭлемент.Ключ);
				текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
				ВидВремениНеРабочее.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение + текСоответсвие);
			КонецЦикла;
		КонецЦикла;
		
		СписокМеню.Добавить(Нстр("ru = 'По графику'") + ": " + Окр(ИтогоГрафик, 2) + Нстр("en='h';ru='ч.'"));
		Для Каждого ТекЭлемент Из ВидВремениРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		Для Каждого ТекЭлемент Из ВидВремениНеРабочее Цикл
			СписокМеню.Добавить(ТекЭлемент.Ключ + ": " + Окр(ТекЭлемент.Значение, 2) + Нстр("en='h';ru='ч.'"));
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Сотрудники") Тогда
		Если НЕ ЗначениеЗаполнено(Расшифровка) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ", Расшифровка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОткрытияФормыСотрудника", ЭтотОбъект);
		ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", ПараметрыФормы,,,,,ОписаниеОповещения);
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Расшифровка, СтандартнаяОбработка);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеГрафикиРабот

&НаКлиенте
Процедура ДанныеГрафикиРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, мОтмеченныеГрафикиРаботы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеГрафикиРаботПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеСотрудники

&НаКлиенте
Процедура ДанныеСотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, мОтмеченныеСотрудники);
	
	Если СтандартнаяОбработка Тогда
		Сотрудник = Элементы[ИмяТекСписка].ДанныеСтроки(ВыбраннаяСтрока).Ссылка;
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ", Сотрудник);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОткрытияФормыСотрудника", ЭтотОбъект);
		ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", ПараметрыФормы,,,,,ОписаниеОповещения);
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Сотрудник, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеСотрудникиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеТС

&НаКлиенте
Процедура ДанныеТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, мОтмеченныеТС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеТСПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтобразитьВсеСтроки(Команда)
	
	мОтмеченныеСтроки = ПолучитьМассивСОтмеченнымиДанными();
	ОтобразитьВсеСтрокиЗавершение(ИмяТекСписка, мОтмеченныеСтроки);
	ВывестиРасписаниеПоГрафику(мОтмеченныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтроках(Команда)
	
	мОтмеченныеСтроки = ПолучитьМассивСОтмеченнымиДанными();
	СнятьОтметкиВоВсехСтрокахЗавершение(ИмяТекСписка, мОтмеченныеСтроки);
	ВывестиРасписаниеПоГрафику(мОтмеченныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуУвеличитьПериод(Команда)
	
	ДатаГрафика = ?(флагОдинОбъект, ДобавитьМесяц(ДатаГрафика, 12), ДобавитьМесяц(ДатаГрафика, 1));
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуУменьшитьПериод(Команда)
	
	ДатаГрафика = ?(флагОдинОбъект, ДобавитьМесяц(ДатаГрафика, -12), ДобавитьМесяц(ДатаГрафика, -1));
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументКорректировкаРабочегоВремени(Команда)
	
	Если КолвоСтрокГрафика = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеОбластиГрафика = РасписаниеПоГрафику.ВыделенныеОбласти;
	мОтмеченныеСтроки = ПолучитьМассивСОтмеченнымиДанными();
	Год   = Год(ДатаГрафика);
	Месяц = Месяц(ДатаГрафика);
	Для Каждого ТекОбласть Из ВыделенныеОбластиГрафика Цикл
		
		Если НЕ (НЕ (ТекОбласть.Верх = 1 И ТекОбласть.Низ = 1) И
			НЕ (ТекОбласть.Право = 1 И ТекОбласть.Лево = 1) 
			И НЕ (ТекОбласть.Право = КолвоДнейГрафик + 2 И ТекОбласть.Лево = КолвоДнейГрафик + 2)
			И ТекОбласть.Право < КолвоДнейГрафик + 2 
			И ТекОбласть.Верх <= КолвоСтрокГрафика + 1) Тогда
			ТекстНСТР = НСтр("ru='Выделите область расписания!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		ИмяЯчейки = ТекОбласть.Имя;
		СтрокаНачало = ТекОбласть.Верх;
		СтрокаНачало = ?(СтрокаНачало > 1, СтрокаНачало, 2);
		СтрокаКонец  = ТекОбласть.Низ;
		
		ДеньНачало   = ТекОбласть.Лево - 1;
		ДеньКонец    = ТекОбласть.Право - 1;
		
		мСотрудники  = Новый Массив();
		мДатаГрафика = Новый Массив();
		Для НомерСтроки = СтрокаНачало По СтрокаКонец Цикл
			ОбластьСотрудник = РасписаниеПоГрафику.Область("R" + Строка(НомерСтроки) + "C1");
			Если ТипЗнч(ОбластьСотрудник.Расшифровка) = Тип("СправочникСсылка.Сотрудники") Тогда
				мСотрудники.Добавить(ОбластьСотрудник.Расшифровка);
				Если флагОдинОбъект И КолвоСтрокГрафика <> 0 Тогда
					Прервать;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбластьСотрудник.Расшифровка) = Тип("СправочникСсылка.уатТС") Тогда
				ТекстНСТР = НСтр("ru='Для создания корректировки рабочего времени, выделите область расписания водителя!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Если ДеньНачало = 0 И ДеньКонец = 0 Тогда
			Продолжить;
		Иначе
			ДеньНачало = ?(ДеньНачало = 0, 1, ДеньНачало);
		КонецЕсли;
		Если флагОдинОбъект И КолвоСтрокГрафика <> 0 Тогда
			//СтрокаКонец = ?(СтрокаКонец >12, 12, СтрокаКонец);
			Для НомерСтроки = СтрокаНачало По СтрокаКонец Цикл
				ДатаМесяца  = Дата(Год, НомерСтроки -1, 1);
				ДнейВМесяце = День(КонецМесяца(ДатаМесяца));
				ДеньКонец = ?(ДеньКонец > ДнейВМесяце, ДнейВМесяце, ДеньКонец);
				Для НомерСтолбца = ДеньНачало По ДеньКонец Цикл
					ОбластьДень = РасписаниеПоГрафику.Область("R" + Строка(НомерСтроки) + "C" + Строка(НомерСтолбца + 1));
					Если ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
						Время = 0;
					Иначе
						Время = Дата(1,1,1);
						Если ЗначениеЗаполнено(ОбластьДень.Текст) Тогда
							мсвПоискРасшифровки = тчРасшифровкаГрафика.НайтиСтроки(Новый Структура("СтрокаТаблицы, КолонкаТаблицы", НомерСтроки, НомерСтолбца+1));
							Если мсвПоискРасшифровки.Количество() > 0 Тогда
								Время = Время + мсвПоискРасшифровки[0].Время*3600;
							КонецЕсли;
						Иначе
							Время = Время + 8*3600;
						КонецЕсли;
					КонецЕсли;
					сДатаГрафика = Новый Структура("ДатаГрафика, Время", Дата(Год, НомерСтроки - 1, НомерСтолбца), Время);
					мДатаГрафика.Добавить(сДатаГрафика);
				КонецЦикла;
			КонецЦикла;
		Иначе
			ДатаМесяца  = Дата(Год, Месяц, 1);
			ДнейВМесяце = День(КонецМесяца(ДатаМесяца));
			ДеньКонец = ?(ДеньКонец > ДнейВМесяце, ДнейВМесяце, ДеньКонец);
			Для НомерСтолбца = ДеньНачало По ДеньКонец Цикл
				ОбластьДень = РасписаниеПоГрафику.Область("R" + Месяц + 1 + "C" + Строка(НомерСтолбца + 1));
				Если ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
					Время = 0;
				Иначе
					Время = Дата(1,1,1);
					Если ЗначениеЗаполнено(ОбластьДень.Текст) Тогда
						мсвПоискРасшифровки = тчРасшифровкаГрафика.НайтиСтроки(Новый Структура("СтрокаТаблицы, КолонкаТаблицы", Месяц + 1, НомерСтолбца+1));
						Если мсвПоискРасшифровки.Количество() > 0 Тогда
							Время = Время + мсвПоискРасшифровки[0].Время*3600;
						КонецЕсли;
					Иначе
						Время = Время + 8*3600;
					КонецЕсли;
				КонецЕсли;
				сДатаГрафика = Новый Структура("ДатаГрафика, Время", Дата(Год, Месяц, НомерСтолбца), Время);
				мДатаГрафика.Добавить(сДатаГрафика);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КорректировкаИзРедактированиеРабочегоВремени", Истина);
	ПараметрыОткрытия.Вставить("Сотрудники", мСотрудники);
	ПараметрыОткрытия.Вставить("мДатаГрафика", мДатаГрафика);
	ОповещениеВыбор = Новый ОписаниеОповещения("ЗавершитьВыборВидаИспользованияРабочегоВремени", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Справочник.уатВидыИспользованияРабочегоВремени.ФормаВыбора",, ЭтотОбъект,,,,
		ОповещениеВыбор, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытияФормыСотрудника(РезультатВыбора, Параметры) Экспорт
	Элементы.ДанныеСотрудники.Обновить();
	Элементы.ДанныеТС.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборВидаИспользованияРабочегоВремени(РезультатВыбора, Параметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПервоеОкно = Истина;
	Для Каждого ТекСотрудник Из Параметры.Сотрудники Цикл
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("КорректировкаИзРедактированиеРабочегоВремени", Истина);
		ПараметрыОткрытия.Вставить("Сотрудник",   ТекСотрудник);
		ПараметрыОткрытия.Вставить("ВидИспользованияРабочегоВремени", РезультатВыбора);
		ПараметрыОткрытия.Вставить("мДатаГрафика", Параметры.мДатаГрафика);
		Если ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
			ПараметрыОткрытия.Вставить("План", Истина);
		КонецЕсли;
				ОткрытьФорму("Документ.уатКорректировкаИспользованияРаботникамиРабочегоВремени.Форма.ФормаДокумента",ПараметрыОткрытия,ЭтотОбъект,
			Новый УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасписаниеПоГрафику(Команда)
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУволенных(Команда)
	Элементы.СотрудникиОтображатьУволенных.Пометка = НЕ Элементы.СотрудникиОтображатьУволенных.Пометка;
	УстановитьОтборУволенных(НЕ Элементы.СотрудникиОтображатьУволенных.Пометка);
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыбывшие(Команда)
	Элементы.ФормаОтобразитьВыбывшие.Пометка = НЕ Элементы.ФормаОтобразитьВыбывшие.Пометка;
	УстановитьОтборВыбывшие(НЕ Элементы.ФормаОтобразитьВыбывшие.Пометка);
	ВывестиРасписаниеПоГрафику(ПолучитьМассивСОтмеченнымиДанными());
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГрафика(Команда)
	Для Каждого ТекСотрудник Из мОтмеченныеСотрудники Цикл
		ПараметрыФормы = Новый Структура("Сотрудник, Год", ТекСотрудник, Год(ДатаГрафика));
		ОткрытьФорму("ОбщаяФорма.уатФормаГрафикРаботы", ПараметрыФормы, , ТекСотрудник);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВосстановитьНастройкиФормы()
	
	СтруктураНастроекФормы = Новый Структура();
	СтруктураНастроекФормы.Вставить("ПереключательРежимаОтображенияРасписания", "ГрафикиРабот");
	СтруктураНастроекФормы.Вставить("ПереключательРежимаОтображенияЯчейки",     "Дни");
	СтруктураНастроекФормы.Вставить("ПоказыватьОтклоненияИФактическиеДанные",    Ложь);
	СтруктураНастроекФормы.Вставить("ПоказыватьТабельныйНомер",                  Ложь);
	СтруктураНастроекФормы.Вставить("ПоказыватьБуквенныйКод",                    Ложь);
	СтруктураНастроекФормы.Вставить("ОтображатьВыбывшие",                        Ложь);
	СтруктураНастроекФормы.Вставить("ОтображатьУволенных",                       Ложь);
	СтруктураНастроекФормы.Вставить("ПереключательРежимаОтображенияГрафиковТС",  Ложь);
		
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		ЗагруженнаяСтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатРедактированиеРабочегоВремени.Форма", "уатРедактированиеРабочегоВремени_Настройки");
	Иначе
		ЗагруженнаяСтруктураНастроекФормы = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ЗагруженнаяСтруктураНастроекФормы) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураНастроекФормы, ЗагруженнаяСтруктураНастроекФормы);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекФормы);
	
	Пользователь       = ПользователиКлиентСервер.АвторизованныйПользователь();
	ОтборОрганизация   = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
					"ОсновнаяОрганизация");
	ОтборОрганизацияТС = ОтборОрганизация;
	Элементы.ФормаОтобразитьВыбывшие.Пометка       = СтруктураНастроекФормы.ОтображатьВыбывшие;
	Элементы.СотрудникиОтображатьУволенных.Пометка = СтруктураНастроекФормы.ОтображатьУволенных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СтруктураНастроекФормы)
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатРедактированиеРабочегоВремени.Форма", "уатРедактированиеРабочегоВремени_Настройки", СтруктураНастроекФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	УстановитьВидимостьПанелиВыбораОбъектов(ПереключательРежимаОтображенияРасписания);
	
	Элементы.ПечатьГрафика.Видимость = ПереключательРежимаОтображенияРасписания = "Сотрудники";
	Элементы.РасписаниеПоГрафику.ТолькоПросмотр                   = (ПереключательРежимаОтображенияРасписания = "ГрафикиРабот");
	Элементы.ВвестиДокументКорректировкаРабочегоВремени.Видимость = (ПереключательРежимаОтображенияРасписания <> "ГрафикиРабот");
	
	Элементы.ПоказыватьОтклоненияИФактическиеДанные.Видимость     = НЕ (ПереключательРежимаОтображенияРасписания = "ГрафикиРабот") И (ПереключательРежимаОтображенияЯчейки <> "Интервалы");
	Элементы.ПереключательРежимаОтображенияГрафиковТС.Видимость   = (ПереключательРежимаОтображенияРасписания = "ТС");
	Элементы.ПоказыватьТабельныйНомер.Видимость = НЕ флагОдинОбъект И ПереключательРежимаОтображенияРасписания <> "ГрафикиРабот";
	Элементы.ПоказыватьБуквенныйКод.Видимость     = НЕ (ПереключательРежимаОтображенияРасписания = "ГрафикиРабот") И (ПереключательРежимаОтображенияЯчейки <> "Интервалы");

	Элементы.ДекорацияОтображать.Видимость = Элементы.ПоказыватьОтклоненияИФактическиеДанные.Видимость
		ИЛИ Элементы.ПереключательРежимаОтображенияГрафиковТС.Видимость
		ИЛИ Элементы.ПоказыватьТабельныйНомер.Видимость
		ИЛИ Элементы.ПоказыватьБуквенныйКод.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПанелиВыбораОбъектов(РежимаОтображенияРасписания)
	
	СписокСтраниц = Новый СписокЗначений();
	СписокСтраниц.Добавить("ГрафикиРабот");
	СписокСтраниц.Добавить("Сотрудники");
	СписокСтраниц.Добавить("ТС");
	
	Для Каждого ТекСтраница Из СписокСтраниц Цикл
		Значение        = ТекСтраница.Значение;
		Страница        = Элементы.Найти("Страница" + Значение);
		Если Страница <> Неопределено Тогда
			Страница.Видимость        = (Значение = РежимаОтображенияРасписания);
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекСписка      = "Данные" + ПереключательРежимаОтображенияРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВыбывшие(Установить)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДанныеТС.Отбор, "ДатаВыбытия", '00010101',,, Установить);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборУволенных(Установить)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДанныеСотрудники.Отбор, "ДатаУвольнения", '00010101',,, Установить);
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийКомпоновщик(ИмяСписка)
	
	мЭлементы = Новый Массив();
	
	Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если Настройки.Структура.Количество() = 0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Родитель = "";
	тПроцессорВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Если Элементы[ИмяСписка].ТекущийРодитель <> Неопределено Тогда
		Родитель = Элементы[ИмяСписка].ТекущийРодитель;
		тПроцессорВывода = тПроцессорВывода.НайтиСтроки(Новый Структура("Родитель", Родитель));
	КОнецЕсли;
	
	Для Каждого ТекЭлемент Из тПроцессорВывода Цикл
		
		Если ТекЭлемент.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;

		мТекЭлемент = ТекЭлемент.Ссылка;
		
		ДанныеЭлемент = Новый Структура();
		ДанныеЭлемент.Вставить("Ссылка", мТекЭлемент);
		мЭлементы.Добавить(ДанныеЭлемент);
	КонецЦикла;
	
	
	Возврат мЭлементы;
	
КонецФункции

&НаКлиенте
Процедура СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, мОтмеченныеСтроки)
	
	ТекЭлементДанныеПоГрафикамРаботы = Элементы[ИмяТекСписка + "ФлагВыбора"];
	
	Если Элемент.ТекущийЭлемент = ТекЭлементДанныеПоГрафикамРаботы Тогда
		СтандартнаяОбработка = Ложь;
		Если Не Элемент.ТекущиеДанные = Неопределено И Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		Если мОтмеченныеСтроки.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			мОтмеченныеСтроки.Добавить(Элемент.ТекущаяСтрока);
		ИначеЕсли Элемент.ТекущийЭлемент = ТекЭлементДанныеПоГрафикамРаботы Тогда 
			мОтмеченныеСтроки.Удалить(мОтмеченныеСтроки.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		ЭтотОбъект[ИмяТекСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеСтроки);
		Элементы[ИмяТекСписка].Обновить();
		ВывестиРасписаниеПоГрафику(мОтмеченныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("мОтмеченныеСтроки") Тогда
		мОтмеченныеСтроки = Настройки.ДополнительныеСвойства.мОтмеченныеСтроки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(мОтмеченныеСтроки) Тогда
		мОтмеченныеСтроки = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл 
		Если мОтмеченныеСтроки.Найти(ТекСтрока.Ключ) <> Неопределено Тогда 
			ТекСтрока.Значение.Данные.ФлагВыбора = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеСтрокиЗавершение(ИмяСписка, мОтмеченныеСтроки)
	
	мОтмеченныеСтроки.Очистить();
	
	Для Каждого ТекСтрока Из ПолучитьТекущийКомпоновщик(ИмяСписка) Цикл 
		мОтмеченныеСтроки.Добавить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеСтроки);
	Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтрокахЗавершение(ИмяСписка, мОтмеченныеСтроки)
	
	Если мОтмеченныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ПолучитьТекущийКомпоновщик(ИмяСписка) Цикл 
		ИндексЭлемента = мОтмеченныеСтроки.Найти(ТекСтрока.Ссылка);
		Если ИндексЭлемента <> Неопределено Тогда
			мОтмеченныеСтроки.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеСтроки);
	Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасписаниеПоГрафику(мОтмеченныеСтроки)
	
	Если мОтмеченныеСтроки.Количество() = 0 Тогда
		КолвоСтрокГрафика = 0;
		флагОдинОбъект    = Истина;
		ДатаНачалоПериода = НачалоГода(ДатаГрафика);
		ДатаКонецПериода  = НачалоДня(КонецГода(ДатаГрафика));
		ОчиститьРасписаниеПоГрафику();
	Иначе
		ВывестиРасписаниеПоГрафикуСервер(ИмяТекСписка, мОтмеченныеСтроки);
		ПросуммироватьСтрокиГрафик();
		
		ЗаполнитьПредставлениеПериода();
	КонецЕсли;
	
	ЭтотОбъект[ИмяТекСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ДатаСреза", ДатаНачалоПериода);
	ЭтотОбъект[ИмяТекСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьВыбывших", Элементы.СотрудникиОтображатьУволенных.Пометка);
	Элементы[ИмяТекСписка].Обновить();
		
	УстановитьВидимостьДоступность();
		
КонецПроцедуры

&НаСервере
Процедура ВывестиПустойМакетГрафика(тзРесурсы)
	
	РасписаниеПоГрафику.Очистить();
	тчРасшифровкаГрафика.Очистить();
	
	МакетРасписаниеПоГрафику  = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РасписаниеПоГрафику");
	ОбластьШапка              = МакетРасписаниеПоГрафику.ПолучитьОбласть("Шапка|НаименованиеКолонок");
	НаименованиеКолонок = ?(флагОдинОбъект, НСтр("ru = 'Месяц / День'"), НСтр("ru = 'Объект / День'"));
	ОбластьШапка.Параметры.НаименованиеКолонок = НаименованиеКолонок;
	РасписаниеПоГрафику.Вывести(ОбластьШапка);
	КолвоДнейГрафик = ?(флагОдинОбъект, 31, КоличествоДнейВМесяцеНаСервере(Месяц(ДатаГрафика), Год(ДатаГрафика)));
	ОбластьДень = МакетРасписаниеПоГрафику.ПолучитьОбласть("Шапка|Дни");
	Для НомерДня = 1 По КолвоДнейГрафик Цикл
		ОбластьДень.Параметры.День = НомерДня;
		РасписаниеПоГрафику.Присоединить(ОбластьДень);
	КонецЦикла;

	Если КолвоСтрокГрафика <> 0 И (ПереключательРежимаОтображенияЯчейки = "Часы"
		ИЛИ ПереключательРежимаОтображенияЯчейки = "Интервалы") Тогда
		
		ОбластьИтоги = МакетРасписаниеПоГрафику.ПолучитьОбласть("Шапка|Итоги");
		ОбластьИтоги.Параметры.НаименованиеИтоги = ?(ПоказыватьОтклоненияИФактическиеДанные 
												И ПереключательРежимаОтображенияРасписания <> "ГрафикиРабот"
												И ПереключательРежимаОтображенияЯчейки <> "Интервалы", Нстр("ru = 'Факт/По графику'"), "");
		РасписаниеПоГрафику.Присоединить(ОбластьИтоги);
	КонецЕсли;
	
	ОбластьОбъекты   = МакетРасписаниеПоГрафику.ПолучитьОбласть("Объекты|НаименованиеКолонок");
	тзРесурсыСвертка = тзРесурсы.Скопировать();
	Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
		тзРесурсыСвертка.Свернуть("НомерСтроки, ГрафикРаботы, ГрафикРаботыНаименование");
	Иначе
		тзРесурсыСвертка.Свернуть("НомерСтроки, Сотрудник, СотрудникНаименование");
	КонецЕсли;
	
	Для НомерСтроки = 1 По КолвоСтрокГрафика Цикл
		
		Если флагОдинОбъект Тогда
			ОбластьОбъекты.Параметры.НаименованиеОбъекта = Формат(Дата(Год(ДатаГрафика),НомерСтроки,1), "ДФ=ММММ");
			РасшРесурсаГрафика = ?(ПереключательРежимаОтображенияРасписания = "ГрафикиРабот", Неопределено, тзРесурсыСвертка[0].Сотрудник);
			ОбластьОбъекты.Параметры.НаименованиеОбъектаРасш = РасшРесурсаГрафика;
		Иначе
			РесурсГрафика      = ?(ПереключательРежимаОтображенияРасписания = "ГрафикиРабот", тзРесурсыСвертка[НомерСтроки - 1].ГрафикРаботыНаименование, тзРесурсыСвертка[НомерСтроки - 1].СотрудникНаименование);
			РасшРесурсаГрафика = ?(ПереключательРежимаОтображенияРасписания = "ГрафикиРабот", тзРесурсыСвертка[НомерСтроки - 1].ГрафикРаботы, тзРесурсыСвертка[НомерСтроки - 1].Сотрудник);
			ОбластьОбъекты.Параметры.НаименованиеОбъекта     = РесурсГрафика;
			ОбластьОбъекты.Параметры.НаименованиеОбъектаРасш = РасшРесурсаГрафика;
		КонецЕсли;
	
		РасписаниеПоГрафику.Вывести(ОбластьОбъекты);
		
		Для НомерДня = 1 По КолвоДнейГрафик Цикл
			Если ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
				ОбластьДень = МакетРасписаниеПоГрафику.ПолучитьОбласть("Объекты|Интервалы");
			Иначе
				ОбластьДень = МакетРасписаниеПоГрафику.ПолучитьОбласть("Объекты|Дни");
			КонецЕсли;
			РасписаниеПоГрафику.Присоединить(ОбластьДень);
			ОбластьРасписание = РасписаниеПоГрафику.Область("R" + Строка(НомерСтроки + 1) + "C" + Строка(НомерДня + 1));
			ОбластьРасписание.Текст = "";
			ОбластьРасписание.ЦветФона = ЦветаСтиля.ДатаГрафикаИзмененнаяФон;
		КонецЦикла;
		
		Если ПереключательРежимаОтображенияЯчейки = "Часы"
			ИЛИ ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
			ОбластьИтоги = МакетРасписаниеПоГрафику.ПолучитьОбласть("Объекты|Итоги");
			РасписаниеПоГрафику.Присоединить(ОбластьИтоги);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРасписаниеПоГрафику()
	РасписаниеПоГрафику.Очистить();
	тчРасшифровкаГрафика.Очистить();
КонецПроцедуры

&НаСервере
Процедура ВывестиРасписаниеПоГрафикуСервер(ИмяСписка, мОтмеченныеСтроки)
	
	// Получаем таблицу данных из динамического списка, для этого нужно ещё раз выполнить компоновку
	// с текущими настройками компоновшика динамического списка
	СхемаКомпоновкиДанных = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	ТекНастройкиКомпоновщика = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ТекНастройкиКомпоновщика,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	тблДанныеДинамическогоСписка = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
	Ресурсы = Новый Массив;
	Для Каждого ТекСтрока Из тблДанныеДинамическогоСписка Цикл
		Данные = мОтмеченныеСтроки.Найти(ТекСтрока.Ссылка);
		Если Данные <> Неопределено Тогда
			Ресурсы.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
		
	тзРесурсы = ПолучитьДанныеДляЗаполненияГрафика(Ресурсы, мОтмеченныеСтроки);
	
	Если КолвоСтрокГрафика = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиПустойМакетГрафика(тзРесурсы);
	
	Год = Год(ДатаГрафика);
	// Выводим график работы
	Для НомерСтроки = 1 По КолвоСтрокГрафика Цикл
		
		Месяц = ?(флагОдинОбъект, НомерСтроки, Месяц(ДатаГрафика));
		КоличествоДнейМесяц = КоличествоДнейВМесяцеНаСервере(Месяц, Год);
		
		КокрГрафик = Новый Структура();
		КокрГрафик.Вставить("НомерСтроки", ?(флагОдинОбъект, 1, НомерСтроки));
		Для НомерДня = 1 По КолвоДнейГрафик Цикл
			ОбластьРасписание = РасписаниеПоГрафику.Область("R" + Строка(НомерСтроки + 1) + "C" + Строка(НомерДня + 1));
			Если НомерДня > КоличествоДнейМесяц Тогда
				ОбластьРасписание.ЦветФона = ЦветаСтиля.ДатаГрафикаИзмененнаяФон;
				ОбластьРасписание.Текст    = "X";
			Иначе
				КокрГрафик.Вставить("Период", Дата(Год, Месяц, НомерДня, 0, 0, 0));
				ДанныеКонкрКалендарьДень = тзРесурсы.НайтиСтроки(КокрГрафик);
				Если ДанныеКонкрКалендарьДень.Количество() = 0 Тогда
					ОбластьРасписание.ЦветФона = ЦветаСтиля.ДатаГрафикаИзмененнаяФон;
				ИначеЕсли ДанныеКонкрКалендарьДень[0].ДеньВключенВГрафик Тогда
					Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
						ОбластьРасписание.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
					Иначе
						Если ДанныеКонкрКалендарьДень[0].ДатаПриема <= Дата(Год, Месяц, НомерДня, 0, 0, 0) 
							И (ДанныеКонкрКалендарьДень[0].ДатаУвольнения = Дата(1,1,1)
							ИЛИ ДанныеКонкрКалендарьДень[0].ДатаУвольнения >= Дата(Год, Месяц, НомерДня, 0, 0, 0)) Тогда
							ОбластьРасписание.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
						Иначе
							ОбластьРасписание.ЦветФона = ЦветаСтиля.ДатаГрафикаИзмененнаяФон;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбластьРасписание.ЦветФона = ЦветаСтиля.ДатаГрафикаИзмененнаяФон;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполняем расписание работы в графике
	ЗаполнитьРасписанияРаботыНаПериод(тзРесурсы, ДатаНачалоПериода, ДатаКонецПериода);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписанияРаботыНаПериод(Ресурсы, ДатаНачала, ДатаОкончания)
	
	ДанныеГрафика = Обработки.уатРедактированиеРабочегоВремени.РасписанияРаботыНаПериод(Ресурсы, ДатаНачала, ДатаОкончания,
		ПереключательРежимаОтображенияРасписания = "ГрафикиРабот");
	
	тзРесурсыСвертка = Ресурсы.Скопировать();
	Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
		тзРесурсыСвертка.Свернуть("НомерСтроки, ГрафикРаботы, ГрафикРаботыНаименование");
	Иначе
		тзРесурсыСвертка.Свернуть("НомерСтроки, Сотрудник, Организация, СотрудникНаименование");
	КонецЕсли;
	
	Для Каждого ТекОбъект Из тзРесурсыСвертка Цикл
		Для Каждого ТекСтрока Из ДанныеГрафика Цикл
			Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
				Если ТекСтрока.ГрафикРаботы <> ТекОбъект.ГрафикРаботы Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ТекСтрока.Сотрудник <> ТекОбъект.Сотрудник
					ИЛИ ТекСтрока.Организация <> ТекОбъект.Организация Тогда
					Продолжить;
				КонецЕсли;
				Если ТекСтрока.РабочееВремя <> "Рабочее"
					И ТекСтрока.РабочееВремя <> "НеРабочее"
					И ТекСтрока.РабочееВремя <> "ПоГрафику" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицы  = ?(флагОдинОбъект, Месяц(ТекСтрока.ДатаГрафика) + 1, тзРесурсыСвертка.Индекс(ТекОбъект) + 2);
			КолонкаТаблицы = День(ТекСтрока.ДатаГрафика) + 1;
			Область_Текст = "";
			Область_Расшифровка = "";
			
			// Заполняем время по графику
			Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" ИЛИ ТекСтрока.РабочееВремя = "ПоГрафику" Тогда
				Если ПереключательРежимаОтображенияРасписания <> "ГрафикиРабот" Тогда
					Если ТекСтрока.ДатаПриема > ТекСтрока.ДатаГрафика 
						ИЛИ (ТекСтрока.ДатаУвольнения <> Дата(1,1,1) И ТекСтрока.ДатаУвольнения < ТекСтрока.ДатаГрафика) Тогда
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ВидВремени = "По графику";
				
				Если ЗначениеЗаполнено(ТекСтрока.Время) Тогда
					Если ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
						Если ТипЗнч(ТекСтрока.ВремяНачала) = Тип("Дата") Тогда
							ТекстИнтервал = СтрШаблон("%1-%2",
								?(Минута(ТекСтрока.ВремяНачала) < 30, Час(ТекСтрока.ВремяНачала), Час(ТекСтрока.ВремяНачала + 3600)),
								?(Минута(ТекСтрока.ВремяОкончания) < 30, Час(ТекСтрока.ВремяОкончания), Час(ТекСтрока.ВремяОкончания + 3600)));
						Иначе
							ТекстИнтервал = "";
							Сч = 1;
							Для Каждого ТекИнтервал Из ТекСтрока.Интервалы Цикл
								Если Сч = 3 Тогда
									Прервать;
								КонецЕсли;
								
								ТекстИнтервал = ТекстИнтервал + Символы.ПС + СтрШаблон("%1-%2",
									?(Минута(ТекИнтервал.ВремяНачала) < 30, Час(ТекИнтервал.ВремяНачала), Час(ТекИнтервал.ВремяНачала + 3600)),
									?(Минута(ТекИнтервал.ВремяОкончания) < 30, Час(ТекИнтервал.ВремяОкончания), Час(ТекИнтервал.ВремяОкончания + 3600)));
									
								Сч = Сч + 1;
							КонецЦикла;
							ТекстИнтервал = Сред(ТекстИнтервал, 2);
						КонецЕсли;
						
						Область_Текст = ТекстИнтервал;
					Иначе
						Если ПереключательРежимаОтображенияРасписания <> "ГрафикиРабот"
							И ПоказыватьБуквенныйКод И ЗначениеЗаполнено(ТекСтрока.ВидВремени) Тогда
							Область_Текст = СокрЛП(ТекСтрока.ВидВремени.БуквенныйКод);
						КонецЕсли;
						Если ПереключательРежимаОтображенияЯчейки = "Часы" И (ПереключательРежимаОтображенияРасписания = "ГрафикиРабот"
							ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ВидВремени)
							ИЛИ НЕ ТекСтрока.ВидВремени.ИспользоватьКакЦелодневныйПростой) Тогда
							Область_Текст = Область_Текст + Строка(Окр(ТекСтрока.Время, 1));
						КонецЕсли;
					КонецЕсли;
					
					Область_Расшифровка = Нстр("ru = 'По графику'") + ": " + Окр(ТекСтрока.Время, 1) + Нстр("en='h';ru='ч.'");
					
				ИначеЕсли ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
					Область_Текст = "";
					
				Иначе
					Область_Текст = "0";
					Область_Расшифровка = Нстр("ru = 'По графику'") + ": " + Окр(ТекСтрока.Время, 1) + Нстр("en='h';ru='ч.'");
					
				КонецЕсли;
				
			КонецЕсли;
			
			стРасшифровкаГрафика = тчРасшифровкаГрафика.Добавить();
			стРасшифровкаГрафика.КолонкаТаблицы = КолонкаТаблицы;
			стРасшифровкаГрафика.СтрокаТаблицы  = СтрокаТаблицы;
			стРасшифровкаГрафика.Время          = ТекСтрока.Время;
			стРасшифровкаГрафика.Текст          = Область_Текст;
			стРасшифровкаГрафика.Представление  = Область_Расшифровка;
			стРасшифровкаГрафика.Приоритет      = 0;
			
			Если ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
				стРасшифровкаГрафика.РабочееВремя   = "ПоГрафику";
				стРасшифровкаГрафика.ВидВремени     = "По графику";
			Иначе
				стРасшифровкаГрафика.РабочееВремя   = ТекСтрока.РабочееВремя;
				стРасшифровкаГрафика.ВидВремени     = ТекСтрока.ВидВремени;
				стРасшифровкаГрафика.Регистратор    = ТекСтрока.Регистратор;
				 
				// Приоритет влияет на сортировку вывода по двум первым видам времени в расписании,
				// чем выше приоритет, тем первее он будет выводится. Приоритет = 0 для времени по графику.
				Если ЗначениеЗаполнено(ТекСтрока.Регистратор) Тогда
					Если ТекСтрока.РабочееВремя = "ПоГрафику" Тогда
						стРасшифровкаГрафика.Приоритет = 1;
					ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
						стРасшифровкаГрафика.Приоритет = ?(ТекСтрока.РабочееВремя = "Рабочее", 12, 22);
					ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
						стРасшифровкаГрафика.Приоритет = ?(ТекСтрока.РабочееВремя = "Рабочее", 13, 23);
					ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда
						стРасшифровкаГрафика.Приоритет = ?(ТекСтрока.РабочееВремя = "Рабочее", 14, 24);
					ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатКорректировкаИспользованияРаботникамиРабочегоВремени") Тогда
						стРасшифровкаГрафика.Приоритет = ?(ТекСтрока.РабочееВремя = "Рабочее", 15, 25);;
					КонецЕсли;
				Иначе
					Если ТекСтрока.РабочееВремя = "ПоГрафику" Тогда
						стРасшифровкаГрафика.Приоритет = 0;
					ИначеЕсли ТекСтрока.РабочееВремя = "Рабочее" Тогда
						стРасшифровкаГрафика.Приоритет = 10;
					Иначе
						стРасшифровкаГрафика.Приоритет = 20;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	тчРасшифровкаГрафика.Сортировать("СтрокаТаблицы, КолонкаТаблицы, Приоритет УБЫВ");
	
	тчРасшифровкаГрафикаСвернутая = тчРасшифровкаГрафика.Выгрузить().Скопировать();
	тчРасшифровкаГрафикаСвернутая.Свернуть("СтрокаТаблицы, КолонкаТаблицы, ВидВремени", "Время");
	
	ТекстЯчейки = "";
	ПредставлениеРасшифровки = "";
	ВремяПоГрафикуЯчейки = 0;
	РабочееВремяЯчейки = 0;
	НеРабочееВремяЯчейки = 0;
	Для Каждого ТекСтрока Из тчРасшифровкаГрафика Цикл
		Если ПереключательРежимаОтображенияЯчейки = "Интервалы" Тогда
			Область = РасписаниеПоГрафику.Область("R" + ТекСтрока.СтрокаТаблицы + "C" + ТекСтрока.КолонкаТаблицы);
			Область.Текст = ТекСтрока.Текст;
			Область.Расшифровка = ТекСтрока.Представление;	
			Продолжить;
		КонецЕсли;
			
		Если ТекСтрока.РабочееВремя = "ПоГрафику" Тогда
			Если ТекстЯчейки = "" Тогда
				ТекстЯчейки = ТекСтрока.Текст;
			// По символу ПС определяем сколько строк в выводимом тексте, ограничение - 2 строки	
			ИначеЕсли СтрЧислоВхождений(ТекстЯчейки, Символы.ПС) = 0 И ПоказыватьБуквенныйКод Тогда
				ТекстЯчейки = ТекстЯчейки + Символы.ПС + ТекСтрока.Текст;
			КонецЕсли;
			Если ПредставлениеРасшифровки = "" Тогда
				ПредставлениеРасшифровки = ТекСтрока.Представление;
			Иначе
				ПредставлениеРасшифровки = ПредставлениеРасшифровки + Символы.ПС + ТекСтрока.Представление;
			КонецЕсли;
		Иначе
			Если ПоказыватьБуквенныйКод Тогда
				Если ПереключательРежимаОтображенияЯчейки = "Дни" Тогда
					ТекТекстЯчейки = ТекСтрока.ВидВремени.БуквенныйКод;
				Иначе
					СтруктураПоиск = Новый Структура("СтрокаТаблицы, КолонкаТаблицы, ВидВремени");
					ЗаполнитьЗначенияСвойств(СтруктураПоиск, ТекСтрока);
					мсвСтрокиПоиск = тчРасшифровкаГрафикаСвернутая.НайтиСтроки(СтруктураПоиск);
					ТекВремя = 0;
					Для Каждого ТекСтрокаПоиск Из мсвСтрокиПоиск Цикл
						ТекВремя = ТекВремя + ТекСтрокаПоиск.Время;
					КонецЦикла;
					ТекТекстЯчейки = ТекСтрока.ВидВремени.БуквенныйКод + ?(ТекВремя = 0, "", Окр(ТекВремя, 1));
				КонецЕсли;
				Если ТекстЯчейки = "" Тогда
					ТекстЯчейки = ТекТекстЯчейки;
				Иначе
					// По символу ПС определяем сколько строк в выводимом тексте, ограничение - 2 строки
					Если СтрЧислоВхождений(ТекстЯчейки, Символы.ПС) = 0 Тогда
						ТекстЯчейки = ТекстЯчейки + Символы.ПС + ТекТекстЯчейки;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПереключательРежимаОтображенияЯчейки = "Часы" И ТекстЯчейки = "" Тогда
				ТекстЯчейки = "" + Окр(ТекСтрока.Время, 1);
			КонецЕсли;
			Если ПредставлениеРасшифровки <> "" Тогда
				ПредставлениеРасшифровки = ПредставлениеРасшифровки + Символы.ПС;
			КонецЕсли;
			ТекПредставлениеРасшифровки = Строка(ТекСтрока.ВидВремени) + ": " + Окр(ТекСтрока.Время, 1) + Нстр("en='h';ru='ч.'");
			ПредставлениеРасшифровки = ПредставлениеРасшифровки + ТекПредставлениеРасшифровки;
			ТекСтрока.Представление = ТекПредставлениеРасшифровки;
		КонецЕсли;
				
		Если ТекСтрока.РабочееВремя = "ПоГрафику" Тогда
			ВремяПоГрафикуЯчейки = ВремяПоГрафикуЯчейки + ТекСтрока.Время;
		ИначеЕсли ТекСтрока.РабочееВремя = "Рабочее" Тогда
			РабочееВремяЯчейки = РабочееВремяЯчейки + ТекСтрока.Время;
		ИначеЕсли ТекСтрока.РабочееВремя = "НеРабочее" Тогда
			НеРабочееВремяЯчейки = НеРабочееВремяЯчейки + ТекСтрока.Время;
		КонецЕсли;
			
		// переход на другую ячейку или это последняя ячейка
		ИндексТекСтроки = тчРасшифровкаГрафика.Индекс(ТекСтрока);
		Если (ИндексТекСтроки+1 = тчРасшифровкаГрафика.Количество()
			ИЛИ тчРасшифровкаГрафика[ИндексТекСтроки+1].СтрокаТаблицы <> ТекСтрока.СтрокаТаблицы
			ИЛИ тчРасшифровкаГрафика[ИндексТекСтроки+1].КолонкаТаблицы <> ТекСтрока.КолонкаТаблицы) Тогда
		
			Область = РасписаниеПоГрафику.Область("R" + ТекСтрока.СтрокаТаблицы + "C" + ТекСтрока.КолонкаТаблицы);
			
		    Область.Текст = ТекстЯчейки;
			Область.Расшифровка = ПредставлениеРасшифровки;
			
			Если ЗначениеЗаполнено(РабочееВремяЯчейки) Тогда
				Если ЗначениеЗаполнено(ВремяПоГрафикуЯчейки) Тогда
					Если РабочееВремяЯчейки < ВремяПоГрафикуЯчейки Тогда
						Область.ЦветТекста = WebЦвета.Красный;
					ИначеЕсли ВремяПоГрафикуЯчейки = РабочееВремяЯчейки Тогда
						Область.ЦветТекста = WebЦвета.Черный;
					Иначе
						Область.ЦветТекста = WebЦвета.Зеленый;
					КонецЕсли;
				Иначе
					Область.ЦветТекста = WebЦвета.Зеленый;
				КонецЕсли;
			КонецЕсли;
	
			Если ТекСтрока.ВидВремени.ИспользоватьКакЦелодневныйПростой Тогда
				Область.ЦветФона = ЦветаСтиля.ДатаГрафикаИзмененнаяФон;
			КонецЕсли;
			
			ТекстЯчейки = "";
			ПредставлениеРасшифровки = "";
			ВремяПоГрафикуЯчейки = 0;
			НеРабочееВремяЯчейки = 0;
			РабочееВремяЯчейки = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляЗаполненияГрафика(Ресурсы, мОтмеченныеСтроки = Неопределено)
	
	тзРесурсы = Новый ТаблицаЗначений();
	тзРесурсы.Колонки.Добавить("НомерСтроки",              Новый ОписаниеТипов("Число"));
	тзРесурсы.Колонки.Добавить("ТС",                       Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	тзРесурсы.Колонки.Добавить("ТСНаименование",           Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	тзРесурсы.Колонки.Добавить("Сотрудник",                Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	тзРесурсы.Колонки.Добавить("СотрудникНаименование",    Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	тзРесурсы.Колонки.Добавить("Организация",              Новый ОписаниеТипов("СправочникСсылка.Организации"));
	тзРесурсы.Колонки.Добавить("Период",                   Новый ОписаниеТипов("Дата"));
	тзРесурсы.Колонки.Добавить("ГрафикРаботы",             Новый ОписаниеТипов("СправочникСсылка.Календари"));
	тзРесурсы.Колонки.Добавить("ГрафикРаботыНаименование", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	тзРесурсы.Колонки.Добавить("ДатаУвольнения",           Новый ОписаниеТипов("Дата"));
	тзРесурсы.Колонки.Добавить("ДатаПриема",               Новый ОписаниеТипов("Дата"));
	тзРесурсы.Колонки.Добавить("ЭтоТС",                    Новый ОписаниеТипов("Булево"));
	
	НомерСтроки = 1;
	Если ПереключательРежимаОтображенияРасписания = "ТС" Тогда
		Если ПереключательРежимаОтображенияГрафиковТС Тогда
			СтруктураЭкипаж = ЭкипажТС(мОтмеченныеСтроки, НачалоМесяца(ДатаГрафика));
			ТС = Неопределено;
			Для Каждого ТекущийЧленЭкипажа Из СтруктураЭкипаж Цикл
				Если ТС <> ТекущийЧленЭкипажа.ТС Тогда
					ТС = ТекущийЧленЭкипажа.ТС;
					НоваяСтрока                       = тзРесурсы.Добавить();
					НоваяСтрока.НомерСтроки           = НомерСтроки;
					НоваяСтрока.ТС                    = ТекущийЧленЭкипажа.ТС;
					НоваяСтрока.ТСНаименование        = ТекущийЧленЭкипажа.ТСНаименование;
					НоваяСтрока.ЭтоТС                 = Истина;
					НомерСтроки = НомерСтроки + 1;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущийЧленЭкипажа.Сотрудник) Тогда
					НоваяСтрока                       = тзРесурсы.Добавить();
					НоваяСтрока.НомерСтроки           = НомерСтроки;
					НоваяСтрока.ТС                    = ТекущийЧленЭкипажа.ТС;
					НоваяСтрока.Сотрудник             = ТекущийЧленЭкипажа.Сотрудник;
					НоваяСтрока.СотрудникНаименование = ТекущийЧленЭкипажа.Представление + ?(ПоказыватьТабельныйНомер, " (" + ТекущийЧленЭкипажа.Код + ")", "");
					НоваяСтрока.Организация           = ТекущийЧленЭкипажа.Организация;
					НоваяСтрока.ДатаУвольнения        = ТекущийЧленЭкипажа.ДатаУвольнения;
					НоваяСтрока.ДатаПриема            = ТекущийЧленЭкипажа.ДатаПриема;
					НомерСтроки = НомерСтроки + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокЗначений = Новый СписокЗначений();
			СписокЗначений.ЗагрузитьЗначения(мОтмеченныеСтроки);
			СписокЗначений.СортироватьПоЗначению();
			Для Каждого ТекСтрока Из СписокЗначений Цикл
				НоваяСтрока                       = тзРесурсы.Добавить();
				НоваяСтрока.НомерСтроки           = НомерСтроки;
				НоваяСтрока.ТС                    = ТекСтрока.Значение;
				НоваяСтрока.ТСНаименование        = ТекСтрока.Значение.Наименование;
				НоваяСтрока.ЭтоТС                 = Истина;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для Каждого ТекСтрока Из Ресурсы Цикл
			Если ПереключательРежимаОтображенияРасписания = "Сотрудники" Тогда
				НоваяСтрока = тзРесурсы.Добавить();
				НоваяСтрока.НомерСтроки             = НомерСтроки;
				НоваяСтрока.Сотрудник               = ТекСтрока.Ссылка;
				НоваяСтрока.СотрудникНаименование   = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекСтрока.Ссылка) + ?(ПоказыватьТабельныйНомер, " (" + ТекСтрока.Ссылка.Код + ")", "");
				НоваяСтрока.Организация             = ТекСтрока.Организация;
				НоваяСтрока.ДатаУвольнения          = ТекСтрока.ДатаУвольнения;
				НоваяСтрока.ДатаПриема              = ТекСтрока.ДатаПриема;
				НомерСтроки = НомерСтроки + 1;
			ИначеЕсли ПереключательРежимаОтображенияРасписания = "ГрафикиРабот" Тогда
				НоваяСтрока = тзРесурсы.Добавить();
				НоваяСтрока.НомерСтроки              = НомерСтроки;
				НоваяСтрока.ГрафикРаботы             = ТекСтрока.Ссылка;
				НоваяСтрока.ГрафикРаботыНаименование = ТекСтрока.Ссылка.Наименование;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоРесурсовГрафика = тзРесурсы.Количество();
	флагОдинОбъект            = (КоличествоРесурсовГрафика < 2 И НЕ ПереключательРежимаОтображенияРасписания = "ТС");
	КолвоСтрокГрафика         = ?((флагОдинОбъект И НЕ КоличествоРесурсовГрафика = 0), 12, КоличествоРесурсовГрафика);

	Если флагОдинОбъект Тогда
		ДатаНачалоПериода = НачалоГода(ДатаГрафика);
		ДатаКонецПериода  = НачалоДня(КонецГода(ДатаГрафика));
	Иначе
		ДатаНачалоПериода  = НачалоМесяца(ДатаГрафика);
		ДатаКонецПериода   = НачалоДня(КонецМесяца(ДатаГрафика));
	КонецЕсли;
	
	Если ПереключательРежимаОтображенияРасписания <> "ГрафикиРабот" Тогда
		тзРесурсы = ПолучитьГрафикиРаботыСотрудников(тзРесурсы, ДатаНачалоПериода, ДатаКонецПериода);
	Иначе
		тзРесурсы = ПолучитьГрафикиРаботыПериод(тзРесурсы, ДатаНачалоПериода, ДатаКонецПериода);
	КонецЕсли;
	
	Возврат тзРесурсы;
	
КонецФункции

&НаСервере
Функция ПолучитьГрафикиРаботыСотрудников(Сотрудники, НачалоИнтервала, ОкончаниеИнтервала)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	уатОбщегоНазначения.СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, "День");
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", ОкончаниеИнтервала);
	Запрос.УстановитьПараметр("тчСотрудники", Сотрудники);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тчСотрудники.НомерСтроки КАК НомерСтроки,
	|	тчСотрудники.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА тчСотрудники.ЭтоТС
	|			ТОГДА тчСотрудники.ТС
	|		ИНАЧЕ тчСотрудники.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	тчСотрудники.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА тчСотрудники.ЭтоТС
	|			ТОГДА тчСотрудники.ТСНаименование
	|		ИНАЧЕ тчСотрудники.СотрудникНаименование
	|	КОНЕЦ КАК СотрудникНаименование,
	|	тчСотрудники.ДатаПриема КАК ДатаПриема,
	|	тчСотрудники.ДатаУвольнения КАК ДатаУвольнения,
	|	тчСотрудники.ЭтоТС КАК ЭтоТС
	|ПОМЕСТИТЬ втСотрудники
	|ИЗ
	|	&тчСотрудники КАК тчСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втСотрудники.ТС КАК ТС,
	|	втСотрудники.Сотрудник КАК Сотрудник,
	|	втСотрудники.Организация КАК Организация,
	|	ВТПериоды.Период КАК Период,
	|	втСотрудники.СотрудникНаименование КАК СотрудникНаименование,
	|	втСотрудники.НомерСтроки КАК НомерСтроки,
	|	втСотрудники.ДатаПриема КАК ДатаПриема,
	|	втСотрудники.ДатаУвольнения КАК ДатаУвольнения,
	|	втСотрудники.ЭтоТС КАК ЭтоТС
	|ПОМЕСТИТЬ втПериод
	|ИЗ
	|	втСотрудники КАК втСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ВТПериоды
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСотрудники.Сотрудник КАК Сотрудник,
	|	втСотрудники.Организация КАК Организация,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период,
	|	уатТС.ГрафикРаботы КАК ГрафикРаботы,
	|	уатТС.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	уатТС.Наименование КАК СотрудникНаименование,
	|	втСотрудники.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втГрафики
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСотрудники КАК втСотрудники
	|		ПО уатТС.Ссылка = втСотрудники.Сотрудник
	|			И (втСотрудники.ЭтоТС = ИСТИНА)
	|ГДЕ
	|	втСотрудники.ЭтоТС = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатКадроваяИсторияСотрудников.Сотрудник,
	|	втСотрудники.Организация,
	|	уатКадроваяИсторияСотрудников.Период,
	|	уатКадроваяИсторияСотрудников.ГрафикРаботы,
	|	уатКадроваяИсторияСотрудников.ГрафикРаботы.ПроизводственныйКалендарь,
	|	втСотрудники.СотрудникНаименование,
	|	втСотрудники.НомерСтроки
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников КАК уатКадроваяИсторияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСотрудники КАК втСотрудники
	|		ПО уатКадроваяИсторияСотрудников.Сотрудник = втСотрудники.Сотрудник
	|			И уатКадроваяИсторияСотрудников.Организация = втСотрудники.Организация
	|			И (уатКадроваяИсторияСотрудников.Период <= &ОкончаниеИнтервала)
	|			И (втСотрудники.ЭтоТС = ЛОЖЬ)
	|ГДЕ
	|	втСотрудники.ЭтоТС = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПериод.Сотрудник КАК Сотрудник,
	|	втПериод.Организация КАК Организация,
	|	втПериод.Период КАК Период,
	|	МАКСИМУМ(ЕСТЬNULL(втГрафики.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ПериодГрафика
	|ПОМЕСТИТЬ втГрафикиСрезПоследних
	|ИЗ
	|	втПериод КАК втПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафики КАК втГрафики
	|		ПО втПериод.Период >= втГрафики.Период
	|			И втПериод.Сотрудник = втГрафики.Сотрудник
	|			И втПериод.Организация = втГрафики.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	втПериод.Период,
	|	втПериод.Организация,
	|	втПериод.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втГрафики.НомерСтроки КАК НомерСтроки,
	|	втГрафикиСрезПоследних.Сотрудник КАК Сотрудник,
	|	втГрафики.СотрудникНаименование КАК СотрудникНаименование,
	|	втГрафикиСрезПоследних.Организация КАК Организация,
	|	втГрафикиСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(втГрафики.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)) КАК ГрафикРаботы,
	|	втГрафики.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование
	|ПОМЕСТИТЬ втСоответствие
	|ИЗ
	|	втГрафикиСрезПоследних КАК втГрафикиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафики КАК втГрафики
	|		ПО втГрафикиСрезПоследних.ПериодГрафика = втГрафики.Период
	|			И втГрафикиСрезПоследних.Сотрудник = втГрафики.Сотрудник
	|			И втГрафикиСрезПоследних.Организация = втГрафики.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПериод.Сотрудник КАК Сотрудник,
	|	втПериод.СотрудникНаименование КАК СотрудникНаименование,
	|	втПериод.НомерСтроки КАК НомерСтроки,
	|	втПериод.Организация КАК Организация,
	|	втПериод.Период КАК Период,
	|	ЕСТЬNULL(втСоответствие.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)) КАК ГрафикРаботы,
	|	ЕСТЬNULL(втСоответствие.ГрафикРаботыНаименование, """") КАК ГрафикРаботыНаименование,
	|	втПериод.ДатаПриема КАК ДатаПриема,
	|	втПериод.ДатаУвольнения КАК ДатаУвольнения,
	|	втПериод.ЭтоТС КАК ЭтоТС,
	|	втПериод.ТС КАК ТС
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	втПериод КАК втПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоответствие КАК втСоответствие
	|		ПО втПериод.Сотрудник = втСоответствие.Сотрудник
	|			И втПериод.Организация = втСоответствие.Организация
	|			И втПериод.Период = втСоответствие.Период
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы КАК ДатаРаботы,
	|	МАКСИМУМ(уатКорректировкаПланаРабочегоВремениСотрудников.ДокументКорректировки) КАК ДокументКорректировки
	|ПОМЕСТИТЬ КорректировкаПланаСвернутая
	|ИЗ
	|	РегистрСведений.уатКорректировкаПланаРабочегоВремениСотрудников КАК уатКорректировкаПланаРабочегоВремениСотрудников
	|ГДЕ
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник В(ВЫБРАТЬ Сотрудник ИЗ втСотрудники)
	|	И уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	|
	|СГРУППИРОВАТЬ ПО
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы КАК ДатаРаботы,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени
	|ПОМЕСТИТЬ уатКорректировкаПланаРабочегоВремениСотрудников
	|ИЗ
	|	КорректировкаПланаСвернутая КАК КорректировкаПланаСвернутая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатКорректировкаПланаРабочегоВремениСотрудников КАК уатКорректировкаПланаРабочегоВремениСотрудников
	|		ПО КорректировкаПланаСвернутая.Сотрудник = уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник
	|			И КорректировкаПланаСвернутая.ДатаРаботы = уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы
	|			И КорректировкаПланаСвернутая.ДокументКорректировки = уатКорректировкаПланаРабочегоВремениСотрудников.ДокументКорректировки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРезультат.Сотрудник КАК Сотрудник,
	|	втРезультат.СотрудникНаименование КАК СотрудникНаименование,
	|	втРезультат.НомерСтроки КАК НомерСтроки,
	|	втРезультат.Организация КАК Организация,
	|	втРезультат.Период КАК Период,
	|	втРезультат.ГрафикРаботы КАК ГрафикРаботы,
	|	втРезультат.ГрафикРаботыНаименование КАК ГрафикРаботыНаименование,
	|	ВЫБОР КОГДА уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|		ИНАЧЕ ЕСТЬNULL(уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени.ИспользоватьКакРабочееВремя, ЛОЖЬ) КОНЕЦ КАК ДеньВключенВГрафик,
	|	втРезультат.ДатаПриема КАК ДатаПриема,
	|	втРезультат.ДатаУвольнения КАК ДатаУвольнения,
	|	втРезультат.ЭтоТС КАК ЭтоТС,
	|	втРезультат.ТС КАК ТС
	|ИЗ
	|	втРезультат КАК втРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО втРезультат.ГрафикРаботы = КалендарныеГрафики.Календарь
	|			И втРезультат.Период = КалендарныеГрафики.ДатаГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ уатКорректировкаПланаРабочегоВремениСотрудников КАК уатКорректировкаПланаРабочегоВремениСотрудников
	|		ПО втРезультат.Сотрудник = уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник
	|			И втРезультат.Период = уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	тзВыборка  = РезультатЗапроса.Выгрузить();
	РезВыборка = тзВыборка.Скопировать();
	Выборка   = РезультатЗапроса.Выбрать();
	НомерСтроки = 1;
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		мВыборка  = тзВыборка.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
		Если мВыборка.Количество() > 0 Тогда
			мРезВыборка = РезВыборка.НайтиСтроки(Новый Структура("Сотрудник, ТС", мВыборка[0].Сотрудник, мВыборка[0].ТС));
			Для Каждого ТекСотрудник Из мРезВыборка Цикл
				ТекСотрудник.НомерСтроки = НомерСтроки;
			КонецЦикла;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат РезВыборка;
	
КонецФункции

&НаСервере
Функция ПолучитьГрафикиРаботыПериод(Графики, НачалоИнтервала, ОкончаниеИнтервала)
	
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		уатОбщегоНазначения.СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, "День");
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ОкончаниеИнтервала", ОкончаниеИнтервала);
		Запрос.УстановитьПараметр("тчГрафики", Графики);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тчГрафики.НомерСтроки КАК НомерСтроки,
		|	тчГрафики.ГрафикРаботы КАК ГрафикРаботы,
		|	тчГрафики.ГрафикРаботыНаименование КАК ГрафикРаботыНаименование
		|ПОМЕСТИТЬ втГрафики
		|ИЗ
		|	&тчГрафики КАК тчГрафики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	втГрафики.НомерСтроки КАК НомерСтроки,
		|	втГрафики.ГрафикРаботы КАК ГрафикРаботы,
		|	втГрафики.ГрафикРаботыНаименование КАК ГрафикРаботыНаименование,
		|	ВТПериоды.Период КАК Период
		|ПОМЕСТИТЬ втРезультат
		|ИЗ
		|	втГрафики КАК втГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ВТПериоды
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втРезультат.НомерСтроки КАК НомерСтроки,
		|	втРезультат.ГрафикРаботы КАК ГрафикРаботы,
		|	втРезультат.ГрафикРаботыНаименование КАК ГрафикРаботыНаименование,
		|	втРезультат.Период КАК Период,
		|	ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ) КАК ДеньВключенВГрафик
		|ИЗ
		|	втРезультат КАК втРезультат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ПО втРезультат.ГрафикРаботы = КалендарныеГрафики.Календарь
		|			И втРезультат.Период = КалендарныеГрафики.ДатаГрафика
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикРаботыНаименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	тзВыборка  = РезультатЗапроса.Выгрузить();
	РезВыборка = тзВыборка.Скопировать();
	Выборка   = РезультатЗапроса.Выбрать();
	НомерСтроки = 1;
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		мВыборка  = тзВыборка.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
		Если мВыборка.Количество() > 0 Тогда
			мРезВыборка = РезВыборка.НайтиСтроки(Новый Структура("ГрафикРаботы", мВыборка[0].ГрафикРаботы));
			Для Каждого ТекСотрудник Из мРезВыборка Цикл
				ТекСотрудник.НомерСтроки = НомерСтроки;
			КонецЦикла;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат РезВыборка;
	
КонецФункции

&НаСервере
Функция КоличествоДнейВМесяцеНаСервере(Месяц, Год)
	
	ДатаМесяца = Дата(Год, Месяц, 1);
	ДнейВМесяце = День(КонецМесяца(ДатаМесяца));
	Возврат ДнейВМесяце;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьПредставлениеПериода()
	
	Если флагОдинОбъект Тогда
		РасписаниеПоГрафикуПредставлениеПериода = "" + Формат(Год(ДатаГрафика),"ЧГ=") + " " + НСтр("en='year';ru='год'");
	Иначе
		МесяцРасписания = Формат(ДатаГрафика, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаГрафика), "ЧГ=0");
		РасписаниеПоГрафикуПредставлениеПериода = МесяцРасписания + " " + ГодРасписания;
	КонецЕсли;
	РесурсыРаботающиеПоГрафикуПредставлениеПериода = РасписаниеПоГрафикуПредставлениеПериода;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСОтмеченнымиДанными()
	
	ИмяСписка = ПереключательРежимаОтображенияРасписания;
	Если ИмяСписка = "ГрафикиРабот" Тогда
		Возврат мОтмеченныеГрафикиРаботы;
	ИначеЕсли ИмяСписка = "Сотрудники" Тогда
		Возврат мОтмеченныеСотрудники;
	ИначеЕсли ИмяСписка = "ТС" Тогда
		Возврат мОтмеченныеТС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПросуммироватьСтрокиГрафик()
	СтолбецИтого = ?(флагОдинОбъект, 33, КоличествоДнейВМесяцеНаСервере(Месяц(ДатаГрафика), Год(ДатаГрафика)) + 2);
	Если (ПереключательРежимаОтображенияЯчейки = "Часы"
		ИЛИ ПереключательРежимаОтображенияЯчейки = "Интервалы")
		И КолвоСтрокГрафика <> 0 Тогда
		
		Для НомерСтроки = 2 По КолвоСтрокГрафика +1 Цикл
			Итого = ПросуммироватьСтроки(1, 31, НомерСтроки, "ПоГрафику");
			Область = РасписаниеПоГрафику.Область("R" + НомерСтроки + "C" + СтолбецИтого);
			Область.Текст = Строка(Окр(Итого, 1));
		КонецЦикла;
		
		Если ПоказыватьОтклоненияИФактическиеДанные И ПереключательРежимаОтображенияЯчейки <> "Интервалы" Тогда
			Для НомерСтроки = 2 По КолвоСтрокГрафика +1 Цикл
				Итого = ПросуммироватьСтроки(1, 31, НомерСтроки, "Рабочее");
				Область = РасписаниеПоГрафику.Область("R" + НомерСтроки + "C" + СтолбецИтого);
				Область.Текст = Строка(Окр(Итого, 1)) + "/" + Область.Текст;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПросуммироватьСтроки(ДеньНачало, ДеньКонец, НомерСтроки, ВидРабочегоВремени, НуженВидВремени = Ложь)
	
	Итого = 0;
	ВидВремени = Новый Соответствие();
	Для НомерКолонки = ДеньНачало + 1 По ДеньКонец + 1 Цикл
		тчПоГрафику = тчРасшифровкаГрафика.НайтиСтроки(Новый Структура("КолонкаТаблицы, СтрокаТаблицы, РабочееВремя",
			НомерКолонки, НомерСтроки, ВидРабочегоВремени));
		Для Каждого ТекСтрока Из тчПоГрафику Цикл
			Итого = Итого + ТекСтрока.Время;
			текСоответсвие = ВидВремени.Получить(ТекСтрока.ВидВремени);
			текСоответсвие = ?(текСоответсвие = Неопределено, 0, текСоответсвие);
			ВидВремени.Вставить(ТекСтрока.ВидВремени, ТекСтрока.Время + текСоответсвие);
		КонецЦикла;
	КонецЦикла;
	
	Если НуженВидВремени Тогда
		Возврат ВидВремени;
	Иначе
		Возврат Итого;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьГрафикРаботы()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникГрафикиРаботы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Календари КАК СправочникГрафикиРаботы
	               |ГДЕ
	               |	СправочникГрафикиРаботы.ПометкаУдаления = ЛОЖЬ
	               |	И СправочникГрафикиРаботы.ЭтоГруппа = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СправочникГрафикиРаботы.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйЭлемент.Значение) И ЭтоДокументСсылка(ВыбранныйЭлемент.Значение) Тогда
		ПоказатьЗначение(Неопределено, ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДокументСсылка(ВыбранноеЗначение)
	Возврат Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбранноеЗначение));
КонецФункции

&НаКлиенте
Функция РегистраторДляРасшифровкиТекущейОбласти(СтрокаТаблицы, КолонкаТаблицы, Представление)
	мсвСтрокиПоиск = тчРасшифровкаГрафика.НайтиСтроки(Новый Структура("СтрокаТаблицы, КолонкаТаблицы, Представление",
		СтрокаТаблицы, КолонкаТаблицы, Представление));

	Если мсвСтрокиПоиск.Количество() > 0 Тогда
		Возврат мсвСтрокиПоиск[0].Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЭкипажТС(ТС, Знач ДатаСреза = Неопределено)
	
	ПоказыватьВыбывших = Элементы.СотрудникиОтображатьУволенных.Пометка;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатТС.Ссылка КАК ТС,
	|	уатТС.Ссылка.Наименование КАК ТСНаименование,
	|	ЕСТЬNULL(уатЭкипажТС.Сотрудник, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА уатЭкипажТС.Сотрудник ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ уатЭкипажТС.Сотрудник.Наименование
	|	КОНЕЦ КАК СотрудникНаименование,
	|	ВЫБОР
	|		КОГДА уатЭкипажТС.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ уатЭкипажТС.Сотрудник.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА уатЭкипажТС.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|		ИНАЧЕ уатЭкипажТС.Сотрудник.ФизическоеЛицо
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА уатЭкипажТС.Сотрудник ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ уатЭкипажТС.Сотрудник.Код
	|	КОНЕЦ КАК Код,
	|	уатЭкипажТС.Сотрудник.ДатаПриема КАК ДатаПриема,
	|	уатЭкипажТС.Сотрудник.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатЭкипажТС КАК уатЭкипажТС
	|		ПО уатТС.Ссылка = уатЭкипажТС.ТС
	|			И (уатТС.Ссылка В (&ТС))
	|ГДЕ
	|	уатТС.Ссылка В(&ТС)
	|	И (&ПоказыватьВыбывших
	|			ИЛИ уатЭкипажТС.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатЭкипажТС.Сотрудник.ДатаУвольнения > &ДатаСреза)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТСНаименование,
	|	СотрудникНаименование";
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПоказыватьВыбывших", ПоказыватьВыбывших);
	Если ДатаСреза = Неопределено ИЛИ ДатаСреза = '00010101' Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	тблЭкипаж = Новый ТаблицаЗначений;
	тблЭкипаж.Колонки.Добавить("ТС",             Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	тблЭкипаж.Колонки.Добавить("ТСНаименование", Новый ОписаниеТипов("Строка"));
	тблЭкипаж.Колонки.Добавить("Сотрудник",      Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	тблЭкипаж.Колонки.Добавить("Организация",    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	тблЭкипаж.Колонки.Добавить("Представление");
	тблЭкипаж.Колонки.Добавить("ДатаПриема");
	тблЭкипаж.Колонки.Добавить("ДатаУвольнения");
	тблЭкипаж.Колонки.Добавить("Код");
	
	ВыборкаЭкипаж = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭкипаж.Следующий() Цикл
		НоваяСтрока = тблЭкипаж.Добавить();
		НоваяСтрока.ТС             = ВыборкаЭкипаж.ТС;
		НоваяСтрока.ТСНаименование = ВыборкаЭкипаж.ТСНаименование;
		НоваяСтрока.Сотрудник      = ВыборкаЭкипаж.Сотрудник;
		НоваяСтрока.Организация    = ВыборкаЭкипаж.Организация;
		НоваяСтрока.Представление  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаЭкипаж.ФизическоеЛицо);
		НоваяСтрока.Код            = ВыборкаЭкипаж.Код;
		НоваяСтрока.ДатаУвольнения = ВыборкаЭкипаж.ДатаУвольнения;
		НоваяСтрока.ДатаПриема     = ВыборкаЭкипаж.ДатаПриема;
	КонецЦикла;
	
	Возврат тблЭкипаж;
КонецФункции 

#КонецОбласти

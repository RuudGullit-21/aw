
#Область ПеременныеМодуля

&НаКлиенте
Перем мСчетчикДокументСформирован; 			// Счетчик срабатывания процедуры "ПолеHTMLДокументСформирован"

&НаКлиенте
Перем мТекстОтложеннойКоманды;     			// Текст кода, который выполняется

&НаКлиенте
Перем мПредыдущийРежим;            			// Режим работы диалога, сохранение промежуточных значений

&НаКлиенте
Перем мСтруктураПоискаОбъектовМониторинга;  // Структура по умолчанию для поиска в ДеревоОбъектовМониторинга

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
					
	КартаДоступна = Ложь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	               |	ItobМестоположенияПоУмолчанию.Ссылка КАК Ссылка,
	               |	ItobМестоположенияПоУмолчанию.Код,
	               |	ItobМестоположенияПоУмолчанию.Представление КАК Представление,
	               |	ItobМестоположенияПоУмолчанию.Наименование КАК Наименование,
	               |	ItobМестоположенияПоУмолчанию.Масштаб,
	               |	ItobМестоположенияПоУмолчанию.Широта,
	               |	ItobМестоположенияПоУмолчанию.Долгота
	               |ИЗ
	               |	Справочник.ItobМестоположенияПоУмолчанию КАК ItobМестоположенияПоУмолчанию
	               |ГДЕ
	               |	ItobМестоположенияПоУмолчанию.Широта <> 0
	               |	И ItobМестоположенияПоУмолчанию.Долгота <> 0
	               |	И ItobМестоположенияПоУмолчанию.Масштаб <> 0
	               |	И (НЕ ItobМестоположенияПоУмолчанию.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
				   
	Счетчик = 1;
	
	СохраненноеМестоположение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКарты", "МестоположениеПоУмолчанию");
	ТекущееМестоположение = Неопределено;
	Если ЗначениеЗаполнено(СохраненноеМестоположение) Тогда
		ТекущееМестоположение = СохраненноеМестоположение;
				
	КонецЕсли;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовКоманда = ЭтаФорма.Команды.Добавить("НажатиеНаКнопку"+Счетчик+"ВыбораКарты");
		НовКоманда.Действие = "Подключаемый_НажатиеНаКнопкуВыбораКарты";
		НовКоманда.Заголовок = Выборка.Представление;
		НовКоманда.Подсказка = НСтр("ru = 'Выбрать местоположение'")+" "+""+Выборка.Представление+"""";
		
		НовКнопка = ЭтаФорма.Элементы.Добавить(
			"к_"+Выборка.Код, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВыборКарты);
		НовКнопка.ИмяКоманды = НовКоманда.Имя;
		НовКнопка.Заголовок = Выборка.Представление;
		
		Счетчик = Счетчик + 1;
		
		Если НЕ ЗначениеЗаполнено(ТекущееМестоположение) Тогда
			ТекущееМестоположение = Выборка.Ссылка;
		
		КонецЕсли;
		
		Если ТекущееМестоположение = Выборка.Ссылка Тогда
			НовКнопка.Пометка = Истина;
			
			ТекущийМасштаб = Выборка.Масштаб;
			ТекущаяШирота = Выборка.Широта;
			ТекущаяДолгота = Выборка.Долгота;			
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекущегоРежима = "OnLineСлежение";
	
	РежимОткрытия = Неопределено;
	Если Параметры.Свойство("РежимОткрытия", РежимОткрытия) Тогда
		Если РежимОткрытия = "ПостроениеМаршрутов" Тогда
			ИмяТекущегоРежима = "ПостроениеМаршрутов";					
		ИначеЕсли РежимОткрытия = "ПутевыеЛисты" Тогда
			ИмяТекущегоРежима = "ПутевыеЛисты";			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПоказыватьПлановыйМаршрут.Видимость = ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт");
	Элементы.ПоказыватьНарушенияВождения.Видимость = ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.БезопасностьВождения");
	Элементы.РазвернутьПанельЗакладок.Видимость = Ложь;	
	Элементы.УстановитьПредставлениеТС.Видимость = (ИмяТекущегоРежима = "OnLineСлежение");	
	Элементы.ЛегендаМаршрутыНаКарте.Видимость = (ИмяТекущегоРежима = "ПутевыеЛисты");
	Элементы.ГрупповаяНастройкаОтображенияТрека.Видимость = (ИмяТекущегоРежима = "ПостроениеМаршрутов"
															 ИЛИ ИмяТекущегоРежима = "ПутевыеЛисты");
	
	КоэффициентУскоренияПроигрываниеМаршрута = 1000;
	
	ПредставлениеТСНаКарте = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКарты", "ПредставлениеТСНаКарте");
	Если НЕ ЗначениеЗаполнено(ПредставлениеТСНаКарте) Тогда
		ПредставлениеТСНаКарте = Константы.ItobОсновноеПредставлениеОбъектов.Получить();
	КонецЕсли;
	
	// Выставления времени согласно персональных настроек пользователя
	ВыставитьВремяСогласноПерсональнымНастройкам();
	
	ТекстИПараметрыЗапросаУсловия = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ФильтрыНаКартах") Тогда
		ЗаполнитьФильтрыПунктовНазначения();
		
		// Устанавливает картинку по умолчанию на пункт фильтров "Скрыть все"
		ItobОбщегоНазначенияКлиентСервер.УстановитьЗеленуюГалочкуНаЭлементФормы(Элементы.ПунктыНазначения_СкрытьВсе);
		
		// Обновляет отображение карты
		ПунктыНазначенияПользовательскийФильтр = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ItobРабочееМестоДиспетчера", "ПунктыНазначенияФильтры");
		МодульФильтрыНаКартах = ОбщегоНазначения.ОбщийМодуль("ItobФильтрыНаКартах");
		Если ЗначениеЗаполнено(ПунктыНазначенияПользовательскийФильтр) Тогда
			ТекстИПараметрыЗапросаУсловия = МодульФильтрыНаКартах.ОбработатьКоманду(ЭтаФорма,
																					ПунктыНазначенияПользовательскийФильтр,
																					ПунктыНазначенияФильтры,
																					"ПодменюФильтрыОсновные",
																					"ПодменюФильтрыДополнительные");
		Иначе
			ТекстИПараметрыЗапросаУсловия = МодульФильтрыНаКартах.ПолучитьТекстИПараметрыЗапросаУсловия();
			ТекстИПараметрыЗапросаУсловия.Текст = "Истина=Ложь";
		КонецЕсли;
	КонецЕсли;
	ОбновитьОтображениеКарты(ТекстИПараметрыЗапросаУсловия);
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров
	КомандыДляТрекеровПриСозданииНаСервере();	
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны
	ГеографическиеЗоныПриСозданииНаСервере();	
	
	ЗаполнитьСписокВыбораГруппировок();	
	ЭтаФорма.ВидГруппировки = 10;
		
	УстановитьВидимостьРежимаПланФакт();
	
	// ItobЦентрСпутниковогоМониторинга.ПланФакт.
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		СписокМаршрутов.ТекстЗапроса = ТекстЗапросаДинамическогоСпискаМаршрутныхЗаданий();
		СписокМаршрутов.ОсновнаяТаблица = "Документ." + ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПутевойЛист");
		СписокМаршрутов.ДинамическоеСчитываниеДанных = Истина;
		СписокМаршрутов.АвтоЗаполнениеДоступныхПолей = Истина;
		
		ИнициализироватьПараметрыСпискаПланФакта();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТочекМаршрута, 
																				"МаршрутноеЗадание", 
																				ItobВызовСервераПовтИсп.ПустаяСсылкаПоИмени("ПутевойЛист"), 
																				ВидСравненияКомпоновкиДанных.Равно);
																				
																				
		СписокТочекМаршрута.ТекстЗапроса = ТекстЗапросаДинамическогоСпискаТочекМаршрута();
		СписокТочекМаршрута.ОсновнаяТаблица = "";
		СписокТочекМаршрута.ДинамическоеСчитываниеДанных = Ложь;
		СписокТочекМаршрута.АвтоЗаполнениеДоступныхПолей = Истина;
	КонецЕсли;           	
	// Конец ItobЦентрСпутниковогоМониторинга.ПланФакт. 
	
КонецПроцедуры

// Обновляет отображение карты (на сервере)
//
&НаСервере
Процедура ОбновитьОтображениеКарты(ТекстИПараметрыЗапросаУсловия = Неопределено)
	
	ИконкиПунктов.Очистить();
	ТаблицаИзображений = ПолучитьИзображения(ТекстИПараметрыЗапросаУсловия);
	Если ЗакешироватьИконкиПунктовНазначения(ТаблицаИзображений) Тогда
		ОбновитьИконкиНаСервере(Ложь);
	КонецЕсли;
	ТекстДопСкрипта = ПолучитьТекстСкриптаСлойПунктов(ТаблицаИзображений);
	ItobОбщегоНазначения.ПоказатьГеографическуюКарту(ЭтаФорма, ТекстДопСкрипта);
	
КонецПроцедуры

// Выставления времени согласно персональных настроек пользователя
//
&НаСервере
Процедура ВыставитьВремяСогласноПерсональнымНастройкам()
	
	ПолучитьИнтервалСогласноПерсональнымНастройкам(Объект.ДатаНачала, Объект.ДатаОкончания);
	ПриИзмененииПериодаСписокМаршрутов();
	
КонецПроцедуры

// Получение интервала времени согласно персональных настроек пользователя
//
&НаСервере
Процедура ПолучитьИнтервалСогласноПерсональнымНастройкам(НачалоПериода, КонецПериода)
	
	ItobОбщегоНазначенияВызовСервера.ПолучитьИнтервалСогласноПерсональнымНастройкам(Объект.ДатаНачала, НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии".
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИмяТекущегоРежима = "OnLineСлежение" Тогда
		ВключитьОбновлениеДанныхОбъектовРежимСлежения();
	ИначеЕсли ИмяТекущегоРежима = "ПостроениеМаршрутов" Тогда
		ВключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	КонецЕсли;
	
	мСчетчикДокументСформирован = 0;
	мПредыдущийРежим = ИмяТекущегоРежима;
	
	ТекущийПериодИстории = 1;
	ИсторияОбъектаВыборПериода(ЭтаФорма.Команды.Найти("ИсторияОбъектаВыборПериода1"));
	                                           
	ГеографическиеЗоныПользовательскийФильтр = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ItobРабочееМестоДиспетчера", 
																											"ГеографическиеЗоныФильтры");
	Если ЗначениеЗаполнено(ГеографическиеЗоныПользовательскийФильтр) Тогда
		ПрименитьФильтрГеографическихЗонОжидание();
	КонецЕсли;
	
	ОчиститьПанельИстории();
	
КонецПроцедуры

// Процедура - обработчик оповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РежимМаршрута" Тогда
		ПоказатьМаршрутПоСтруктуреДанных(Параметр);
		
	ИначеЕсли ИмяСобытия = "РежимЗаправокСливов" Тогда
		ПоказатьЗаправкиСливыПоСтруктуреДанных(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьНастройкиФильтровПунктовНазначения" Тогда
		ПодключитьОбработчикОжидания("ОбновитьНастройкиФильтровПунктовНазначения", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ОбновитьНастройкиФильтровГеографическихЗон" Тогда
		ПодключитьОбработчикОжидания("ОбновитьНастройкиФильтровГеографическихЗон", 0.1, Истина);
			
	ИначеЕсли ИмяСобытия = "РабочееМестоДиспетчераПоказатьНарушенияВождения" Тогда
		ПоказыватьНарушенияВождения = Истина;
		СтруктураДанных = Новый Структура(Параметр);
		СтруктураДанных.Вставить("Объект", Параметр.Объект);
		СтруктураДанных.Вставить("НачПериода", Параметр.НачалоПериода);
		СтруктураДанных.Вставить("КонПериода", Параметр.КонецПериода);
		ПоказатьМаршрутПоСтруктуреДанных(СтруктураДанных);
		
	ИначеЕсли ИмяСобытия = "ИзмененСтатусПланФакта" Тогда 	
		ОбновитьСпискиПланФакта();
		
	ИначеЕсли ИмяСобытия = "СфокусироватьсяНаВыбранномОбъекте" Тогда
		Если УстановленаТекущаяСтрокаПоОбъектуСлежения(Параметр) Тогда
			ОбновитьЦентрКартыРежимСлеженияПоказатьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидГруппировкиПриИзменении(Элемент)
	
	ЗаполнитьДеревоОбъектовМониторинга();
	РазвернутьДеревоОбъектовМониторинга();

КонецПроцедуры

// Процедура - обработчик события "ДокументСформирован" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	
	Если Элементы.ПолеHTML.Документ.readyState = "complete" Тогда
		мСчетчикДокументСформирован = мСчетчикДокументСформирован + 1;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ItobОперативныйМониторингКлиент.ПроверитьПолеHTML(Элементы.ПолеHTML) Тогда
		Возврат;	
	КонецЕсли; 
	
	ItobОперативныйМониторингКлиент.ОбработатьНажатиеНаПолеКарты(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;	
	КонецЕсли;
	
	СтрокаСобытия = Элементы.ПолеHTML.Документ.form.event_to_1c.value;
		
	Если ДанныеСобытия.Element.id = "event_to_1c" 
		И ЗначениеЗаполнено(ДанныеСобытия.Element.value) 
		И Лев(ДанныеСобытия.Element.value, 16) = "BaseLayerChanged" Тогда
		
		ИмяСлоя = Сред(ДанныеСобытия.Element.value,18);
		Если Не ПустаяСтрока(ИмяСлоя) Тогда
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиКарты", "КартаПоУмолчанию", ИмяСлоя);					
		КонецЕсли;
	
	ИначеЕсли ИмяТекущегоРежима = "OnLineСлежение" Тогда
		Если Лев(СтрокаСобытия,14) = "GetTooltipText" Тогда
			ИдентификаторСтроки = Число(Сред(СтрокаСобытия,16));
			СтрокаДерева = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Число(ИдентификаторСтроки));
			
			СтруктураДанных = Новый Структура("Объект,ОбъектПредставление,АктуальностьДанных,Скорость,Направление,Терминал,ПериодUTC0,ДанныеДатчиков,Широта,Долгота");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДерева);
			
			Элементы.ПолеHTML.Документ.form.result.value = ПолучитьТекстВсплывающейПодсказки(СтруктураДанных);		
		ИначеЕсли Лев(СтрокаСобытия,15) = "SelectBoxResult" Тогда
			// Получение объектов мониторинга в выделенной области
			Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка = Ложь;
			ИдентификаторыТерминалов = Сред(СтрокаСобытия, 17);
			Если ЗначениеЗаполнено(ИдентификаторыТерминалов) Тогда
				ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма.ВыбранныеОбъектыНаКарте",
							 Новый Структура("ИдентификаторыТерминалов, ПредставлениеТСНаКарте", ИдентификаторыТерминалов, ПредставлениеТСНаКарте),,,,,,
							 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРежима = "ПостроениеМаршрутов" Тогда
		Если Лев(СтрокаСобытия,17) = "PlayRouteProgress" Тогда
			ПрогрессПроигрывания = Число(Сред(СтрокаСобытия,19));

		ИначеЕсли  Лев(СтрокаСобытия,16) = "SelectedWaypoint" Тогда
			ИдентификаторТочки = Сред(СтрокаСобытия, 18);
			ПередатьДанныеПоТочкеНаКарту(ИдентификаторТочки);
		КонецЕсли;
	КонецЕсли;	
	
	Если Лев(СтрокаСобытия,8) = "DrawPath" Тогда
		ПостроитьМаршрутПоПереданнымТочкам(Сред(СтрокаСобытия,10));

	КонецЕсли;
		
КонецПроцедуры
 
// Процедура отчищает обе таблицы в панели истории.
//
// Параметры:
//  Непосредственно - Булево - Если истина, то очищает обе таблицы во что бы то не стало.
//
&НаКлиенте
Процедура ОчиститьПанельИстории(Непосредственно = Ложь)
	Если Не ПереключенРежимРаботы Или Непосредственно Тогда
		ИсторияОбъекта.Очистить();
		ИнтервалыДвижения.Очистить();
	КонецЕсли;
КонецПроцедуры
	
// Процедура - обработчик события "ПриАктивизацииСтроки" дерева значений "ДеревоОбъектов".
//
&НаКлиенте
Процедура ДеревоОбъектовМониторингаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОчиститьПанельИсторииОжидание", 0.01, Истина);
	ДанныеСтроки = Неопределено;
	Если Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.ЭтоГруппа Тогда
			ЭлементыДерева = ДеревоДатчиков.ПолучитьЭлементы();
			ЭлементыДерева.Очистить();
		Иначе
			ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
			ПодключитьОбработчикОжидания("ОпределитьИЗаполнитьМестоположение", 0.1, Истина);
			
			Если ДанныеСтроки.Пометка = 1 Тогда
				ПодключитьОбработчикОжидания("ОбновитьЦентрКартыРежимСлежения", 0.1, Истина);
			КонецЕсли;
			
			Если ПанельИсторииРазвернута И ИспользоватьАвтообновлениеТаблицыИстории Тогда
				ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута", 0.1, Истина);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьСкрипт("historyLayer.removeAllFeatures();");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦентрКартыРежимСлежения()
	ОбновитьЦентрКартыРежимСлеженияОбщая();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦентрКартыРежимСлеженияПоказатьОбъект()
	ОбновитьЦентрКартыРежимСлеженияОбщая(16);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦентрКартыРежимСлеженияОбщая(Масштаб = "m_map.getZoom()")

	ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Если ДанныеСтроки.Пометка = 1 
		 И НЕ (ДанныеСтроки.Широта = 0 И ДанныеСтроки.Долгота = 0) Тогда
				
		ТекстСкрипта = 
			"var apt = new OpenLayers.LonLat(" + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ДанныеСтроки.Долгота) +
			", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ДанныеСтроки.Широта) + ");
			|apt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(apt, " + Масштаб + ");";
			
		ВыполнитьСкрипт(ТекстСкрипта);	
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении".
//
&НаКлиенте
Процедура ДеревоОбъектовМониторингаПометкаПриИзменении(Элемент)
				
	ПодключитьОбработчикОжидания("ПриИзмененииФлажкаДеревоОбъектовМониторинга", 0.1, Истина);
		
КонецПроцедуры // ДеревоОбъектовМониторингаПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении".
//
&НаКлиенте
Процедура ДеревоОбъектовМаршрутыПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФлажкаДереваОбъектов(ТекущаяСтрока);	
	
КонецПроцедуры // ДеревоОбъектовМаршрутыПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" панели закладок "ПанельЗакладок".
//
&НаКлиенте
Процедура ПанельЗакладокПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ИмяТекущегоРежима = ТекущаяСтраница.Имя;

	ТекущийРежимПриИзменении();

КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля "ДатаНачала".
//
&НаКлиенте
Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Объект.ДатаНачала + Направление*24*3600;
	
	НачалоПериодаИзменено = Истина;	
	
	ПриИзмененииПериодаСписокМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	НачалоПериодаИзменено = Истина;
	ПриИзмененииПериодаСписокМаршрутов();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля "ДатаОкончания".
//
&НаКлиенте
Процедура ДатаОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаОкончания = Объект.ДатаОкончания + Направление*24*3600;
	
	ПриИзмененииПериодаСписокМаршрутов();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля "ДатаОкончания".
//
&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НачалоДня(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
		Объект.ДатаОкончания = ВыбранноеЗначение;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПереключенРежимРаботы()
	ПереключенРежимРаботы = Ложь;
КонецПроцедуры
 
// Процедура - обработчик события "ПриИзмененииПометки" элемента формы "ДеревоОбъектовТопливо".
//
&НаКлиенте
Процедура ДеревоОбъектовТопливоПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектовТопливо.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИд = ТекущиеДанные.ПолучитьИдентификатор();
	ТекущееЗначениеПометки = ТекущиеДанные.Пометка;
	
	// Снимем все пометки дерева
	Для каждого ЭлементДерева Из ДеревоОбъектовМониторинга.ПолучитьЭлементы() Цикл
		ЭлементДерева.Пометка = 0;
		УстановитьПометкиПодчиненных(ЭлементДерева, "Отказ = Ложь;", Неопределено);		
	КонецЦикла;	
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество()=0
		И ТекущееЗначениеПометки > 0 Тогда
		
		ТекущиеДанные.Пометка = 1;
	
	КонецЕсли;	
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоОбъектовМаршрутыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОчиститьПанельИсторииОжидание", 0.01, Истина);
	Если НЕ Элемент.ТекущиеДанные = Неопределено 
		 И НЕ Элемент.ТекущиеДанные.ЭтоГруппа 
		 И ПанельИсторииРазвернута 
		 И ИспользоватьАвтообновлениеТаблицыИстории Тогда
		ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута", 0.1, Истина);
	КонецЕсли;
	
	ВыполнитьСкрипт("historyLayer.removeAllFeatures();");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессПроигрыванияПриИзменении(Элемент)
	
	ТекстСкрипта = 
		"if (play_route_intervalid != null) {
		|	document.form.result.value = 'true';
		|} else {
		|	document.form.result.value = 'false';
		|}";	
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Элементы.ПолеHTML.Документ.form.result.value = "true" Тогда
		// Идет проигрывание маршрута
				
		ТекстСкрипта = 
			"play_route_sec = play_route_max*"+Формат(ПрогрессПроигрывания,"ЧН=0; ЧГ=0")+"/100-play_route_k/10;
			|play_route_progress = Math.round(play_route_sec/play_route_max*100);
			|for (var i = 0, len = routes_list.length; i < len; i++) {
			|	CurPos = 0;
			|	while(CurPos < routes_list[i].length && routes_list[i][CurPos][1] < play_route_sec) {
			|		CurPos = CurPos+1;
			|	}
			|	routes_list_pos[i][0] = CurPos;
			|}";
			
		Если ФлагПаузаПроигрыванияМаршрута Тогда
			ТекстСкрипта = ТекстСкрипта+"
				|play_route_pause = false;
				|PlayRouteHandlier();
				|play_route_pause = true;";				
		
		КонецЕсли;	
		 
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбъектаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПоказатьТочкуИсторииНаКарте",0.01 ,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыДвиженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Получаем данные строки
	ДанныеСтроки = ПолучитьТекущиеДанныеСтроки();
	Если ДанныеСтроки = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
	
	// Обновить пометку в строке
	УстановитьПометкуВСтрокеИнтерваловДвижения(ВыбраннаяСтрока);
	
	ТекстСкрипта = ПолучитьСкриптМаршрутыИнтервалаОбъекта(Элементы.ИнтервалыДвижения.ТекущиеДанные);
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	// Автомасштаб
	Если НЕ ФиксироватьКарту Тогда
		Если Элементы.ИнтервалыДвижения.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Стоянка") Тогда
			ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Элементы.ИнтервалыДвижения.ТекущиеДанные.ДанныеТерминала[0].Долгота)+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Элементы.ИнтервалыДвижения.ТекущиеДанные.ДанныеТерминала[0].Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, m_map.getZoom());
			|pt = null;";
		ИначеЕсли Элементы.ИнтервалыДвижения.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Движение") Тогда
			ТекстСкрипта = 
				"var Features = historyLayer.features;
				|var CurArBounds = null;
				|if (Features.length > 0){
				|	var ArBounds = Features[0].geometry.getBounds().toArray();
				|	for (var i = 1; i < Features.length-1; i++) {
				|		CurArBounds = Features[i].geometry.getBounds().toArray();
				|		ArBounds[0] = Math.min(ArBounds[0],CurArBounds[0]);
				|		ArBounds[1] = Math.min(ArBounds[1],CurArBounds[1]);
				|		ArBounds[2] = Math.max(ArBounds[2],CurArBounds[2]);
				|		ArBounds[3] = Math.max(ArBounds[3],CurArBounds[3]);
				|	}
				|	var NewBounds = new OpenLayers.Bounds(ArBounds[0],ArBounds[1],ArBounds[2],ArBounds[3]);
				|	m_map.zoomToExtent(NewBounds);
				|	if (m_map.getZoom() > 15) { m_map.zoomTo(15); }
				|}
			    |";
		КонецЕсли; 
		ВыполнитьСкрипт(ТекстСкрипта);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМониторингаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, Поле.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМаршрутыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, Поле.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовТопливоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, Поле.Имя);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПересчетПланФакта(Команда)
	
	ВыделенныеСтроки = Элементы.СписокМаршрутов.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Маршруты = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ЗначениеЗаполнено(ВыделеннаяСтрока) Тогда
			Маршруты.Добавить(ВыделеннаяСтрока);			
		КонецЕсли;	
	КонецЦикла;		
		
	Если Маршруты.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;	
	
	МодульПланФактКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobПланФактКлиент");
	ОбработаноМаршрутов = МодульПланФактКлиент.ПересчитатьПланФакт(Маршруты);
	Если ОбработаноМаршрутов > 0 Тогда 
		ОбновитьПланФактПоМаршруту();
		ПоказатьОповещениеПользователя(НСтр("ru = 'План-факт пересчитан'"),, НСтр("ru = 'План-факт успешно пересчитан, количество маршрутов: '")+Строка(ОбработаноМаршрутов), БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'План-факт не пересчитан'"),, НСтр("ru = 'Не удалось пересчитать план-факт'"), БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоДеревуТопливо(Команда)
	ПоискПоДеревуОбъектов("ДеревоОбъектовТопливо");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТест(Команда)
	
	ОбновитьДанныеДереваОбъектовМониторинга(Истина);

КонецПроцедуры

// Процедура - обработчик команды "ПунктыНазначения_Установить".
//
&НаКлиенте
Процедура ПунктыНазначения_Установить(Команда) 
	
	Если Команда.Имя = "ПунктыНазначения_Настройки" Тогда
		МодульФильтрыНаКартахКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobФильтрыНаКартахКлиент");
		МодульФильтрыНаКартахКлиент.ОбработатьКомандуНастройки(ПредопределенноеЗначение("Перечисление.ItobВидыФильтровНаКартах.ПунктыНазначения"));
		
		Возврат;
	КонецЕсли; 
	
	ОбработатьКомандуПунктыНазначения(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьКомандуПунктыНазначения(ИмяКоманды)
	
	МодульФильтрыНаКартах = ОбщегоНазначения.ОбщийМодуль("ItobФильтрыНаКартах");
	ТекстИПараметрыЗапросаУсловия = МодульФильтрыНаКартах.ОбработатьКоманду(ЭтаФорма, 
																			ИмяКоманды, 
																			ПунктыНазначенияФильтры, 
																			"ПодменюФильтрыОсновные", 
																			"ПодменюФильтрыДополнительные");
	ОбновитьОтображениеКарты(ТекстИПараметрыЗапросаУсловия);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ItobРабочееМестоДиспетчера", "ПунктыНазначенияФильтры", ИмяКоманды);

КонецПроцедуры

// Процедура - обработчик команды "АвтомасштабКарты".
//
&НаКлиенте
Процедура АвтомасштабКарты(Команда)
	
	АвтоматическиМасштабироватьКарту();	
	
КонецПроцедуры // АвтомасштабКарты()

// Процедура - обработчик команды "УвеличитьКарту".
//
&НаКлиенте
Процедура УвеличитьКарту(Команда)
			
	ВыполнитьСкрипт("m_map.zoomIn();");	
	
КонецПроцедуры // УвеличитьКарту()

// Процедура - обработчик команды "УменьшитьКарту".
//
&НаКлиенте
Процедура УменьшитьКарту(Команда)
	
	ВыполнитьСкрипт("m_map.zoomOut();");
	
КонецПроцедуры // УменьшитьКарту()

// Процедура - обработчик команды "УстановитьИнтервал".
//
&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗавершениеРедактированияСтандартногоПериодаРежимПланФакт", 
								  						   ЭтотОбъект, 
								  						   Новый Структура("Объект, ДатаНачала, ДатаОкончания", 
														   				   Объект, Объект.ДатаНачала, Объект.ДатаОкончания));
								  
	ItobОбщегоНазначенияКлиент.УстановитьИнтервалДляОписанияОповещения(ОписаниеОповещенияОЗакрытии);
		
КонецПроцедуры
 
// Процедура - обработчик команды "ПоказатьМаршрутыНаКарте".
//
&НаКлиенте
Процедура ПоказатьМаршрутыНаКарте(Команда)
			
	ТекстСкрипта = "playRouteLayer.removeAllFeatures();
				   |
				   |if (play_route_intervalid != null) {
				   |	clearInterval(play_route_intervalid);
				   |}
				   |";
	
	ТекстСкрипта = ТекстСкрипта + СкриптУдаленияСлояФакта();
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не задан период!'"));
		Возврат;
		
	ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Некорректный период!'"));
		Возврат;
		
	КонецЕсли;
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

	МассивОбъектов = Новый Массив;
	МассивПробегов = Новый Массив;
	Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("Объект", СтрокаДерева.Объект); 
		ДанныеОбъекта.Вставить("Терминал", СтрокаДерева.Терминал); 
		ДанныеОбъекта.Вставить("ОбъектПредставление", СтрокаДерева.ОбъектПредставление);
		
		МассивОбъектов.Добавить(ДанныеОбъекта);
	    МассивПробегов.Добавить(0);
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		сткПараметры = Новый Структура;
		сткПараметры.Вставить("МассивОбъектов", МассивОбъектов);
		сткПараметры.Вставить("НачДата", Объект.ДатаНачала);
		сткПараметры.Вставить("КонДата", Объект.ДатаОкончания);
		сткПараметры.Вставить("ПоказыватьНарушенияВождения", ПоказыватьНарушенияВождения);
		сткПараметры.Вставить("ПоказыватьПлановыйМаршрут", ПоказыватьПлановыйМаршрут);
		сткПараметры.Вставить("ФиксироватьКарту", ФиксироватьКарту);
		сткПараметры.Вставить("ВебСсылкаСервер", ВебСсылкаСервер);
		сткПараметры.Вставить("ОтображатьДанныеТерминалаВТреке", Истина);
		сткПараметры.Вставить("РазрешитьДинамическоеОтображениеТрека", Истина);
		
		ДанныеПоТочкамМаршрута.Очистить();
		сткРезультат = ПолучитьСкриптМаршрутыОбъектов(сткПараметры, МассивПробегов);
		ВыполнитьСкрипт(сткРезультат.ТекстСкрипта);
	КонецЕсли;
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
КонецПроцедуры // ПоказатьМаршрутыНаКарте()

// Процедура - обработчик команды "УстановитьФлажкиДереваОбъектовМониторинга".
//
&НаКлиенте
Процедура УстановитьФлажкиДереваОбъектовМониторинга(Команда)
	
	ИзменитьПометкиДереваОбъектов(ДеревоОбъектовМониторинга, 1);
	
	ПоказатьНаКартеТекущиеОбъекты();
	
КонецПроцедуры // УстановитьФлажкиДереваОбъектовМониторинга()

// Процедура - обработчик команды "СнятьФлажкиДереваОбъектовМониторинга".
//
&НаКлиенте
Процедура СнятьФлажкиДереваОбъектовМониторинга(Команда)
	
	ИзменитьПометкиДереваОбъектов(ДеревоОбъектовМониторинга, 0);
	
	ПоказатьНаКартеТекущиеОбъекты();	
	
КонецПроцедуры // СнятьФлажкиДереваОбъектовМониторинга()

// Процедура - обработчик команды "ОбновитьДеревоОбъектовМониторинга".
//
&НаКлиенте
Процедура ОбновитьДеревоОбъектовМониторинга(Команда)
	
	ОбновлениеДанныхОбъектовРежимСлежения();
	
КонецПроцедуры

// Процедура - обработчик команды "ОбновитьДеревоОбъектовМаршруты".
//
&НаКлиенте
Процедура ОбновитьДеревоОбъектовМаршруты(Команда)

	ОбновлениеДанныхОбъектовРежимМаршрутов();
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьКарточкуОбъекта".
//
&НаКлиенте
Процедура ОткрытьКарточкуОбъекта(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		ПоказатьЗначение(,ПараметрыОтчета.Объект);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетПоДвижениюИСтоянкам".
//
&НаКлиенте
Процедура ОткрытьОтчетПоДвижениюИСтоянкам(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФормуОтчета("Отчет.ItobДвиженияИСтоянки.Форма", ПараметрыОтчета);
КонецПроцедуры // ОткрытьОтчетПоДвижениюИСтоянкам()

// Процедура - обработчик команды "ОткрытьОтчетПоПростоям".
//
&НаКлиенте
Процедура ОткрытьОтчетПоПростоям(Команда)
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоПростоямПриЗаведенномДвигателе.Форма", ПараметрыОтчета)
КонецПроцедуры // ОткрытьОтчетПоПростоям()

&НаКлиенте
Процедура ОткрытьОтчетПоТопливу(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоТопливу.Форма", 
					   ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоТопливуИнтерактивныйВыборИнтервала(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоТопливуИнтерактивныйВыборИнтервала.Форма", 
					   ПараметрыОтчета);
					   
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетПоИмпульснымДатчикам".
//
&НаКлиенте
Процедура ОткрытьОтчетПоИмпульснымДатчикам(Команда)
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоИмпульснымДатчикам.Форма")
КонецПроцедуры // ОткрытьОтчетПоИмпульснымДатчикам()

&НаКлиенте
Процедура ОткрытьОтчетПоПараметрамВыработки(Команда)
	ОткрытьФормуОтчета("Отчет.ItobОтчетПоПараметрамВыработки.Форма")
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетПоДатчику".
//
&НаКлиенте
Процедура ОткрытьОтчетПоДатчику(Команда)
	
	// *FIXIT* Объединить с функционалом "Открыть форму отчета".
	//	При создании на сервере формы отчета (обработчик МО отчета) считывать все полученные параметры, без странного прокидывания (пример - отчет по топливу).
	
	Если Элементы.ДеревоДатчиков.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для просмотра отчета выберите в списке только один датчик.'"));
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы.ДеревоДатчиков.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно открыть отчет для выбранного датчика.'"));
		Возврат;
	КонецЕсли;
	
	лТекущаяДата = ItobОбщегоНазначенияВызовСервера.ПолучитьТекущуюДату();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект)
		И ЗначениеЗаполнено(ТекущиеДанные.Датчик) Тогда
		
		Если Строка(ТекущиеДанные.ТипДатчика) = "Дискретный" Тогда
			ИмяОтчета = "ItobОтчетПоДискретнымДатчикам";
			
		Иначе
			ИмяОтчета = "ItobОтчетПоАналоговымДатчикам";
		
		КонецЕсли;
		
		СписокПараметров = Новый СписокЗначений;
		СписокПараметров.Добавить(НачалоДня(лТекущаяДата),"НачПериода");
		СписокПараметров.Добавить(КонецДня(лТекущаяДата),"КонПериода");
		СписокПараметров.Добавить(Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.Объект,"Объект");
		СписокПараметров.Добавить(ТекущиеДанные.Датчик,"Датчик");
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		ПараметрыОтчета.Вставить("Объект", Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.Объект);
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет."+ИмяОтчета+".Форма", ПараметрыОтчета);
		
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя() = Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Терминал) Тогда
		// Показываем отчет "Сообщения терминала"
		
		СписокПараметров = Новый СписокЗначений;
		СписокПараметров.Добавить(НачалоДня(лТекущаяДата),"НачПериода");
		СписокПараметров.Добавить(КонецДня(лТекущаяДата),"КонПериода");
		СписокПараметров.Добавить(ТекущиеДанные.Терминал,"Терминал");
				
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ОткрытьФорму("Отчет.ItobСообщенияТерминала.Форма", ПараметрыОтчета);
		
		
	КонецЕсли;		
	
КонецПроцедуры // ОткрытьОтчетПоДатчику()

// Процедура - обработчик команды "ПоказатьЗаправкиИСливы".
//
&НаКлиенте
Процедура ПоказатьЗаправкиИСливы(Команда)
	
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|playRouteLayer.removeAllFeatures();
		|markersLayer.clearMarkers();
		|";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не задан период!'"));
		Возврат;
		
	ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Некорректный период!'"));
		Возврат;
		
	КонецЕсли;	
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

	МассивОбъектов = Новый Массив;
	Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
		МассивОбъектов.Добавить(СтрокаДерева.Объект);
		Прервать;
	
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		ТекстОшибки = "";
		ТекстСкрипта = ПолучитьСкриптЗаправкиИСливы(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания, ТекстОшибки);
		ВыполнитьСкрипт(ТекстСкрипта);
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Формирование заправок и сливов на карте завершено'"));
		Иначе
			//ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПроигратьМаршрут".
//
&НаКлиенте
Процедура ПроигратьМаршрут(Команда)
	
	Если ФлагПаузаПроигрыванияМаршрута Тогда
		ВыполнитьСкрипт("play_route_pause = false;");
		ФлагПаузаПроигрыванияМаршрута = Ложь;
		
	Иначе
		
		Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не задан период!'"));
			Возврат;
			
		ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Некорректный период!'"));
			Возврат;
			
		КонецЕсли;	
		
		МассивОтмеченныхСтрок = Новый Массив;
		СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

		МассивОбъектов = Новый Массив;
		Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
			МассивОбъектов.Добавить(СтрокаДерева.Объект);
		
		КонецЦикла;
		
		ПрогрессПроигрывания = 0;
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ТекстСкрипта = ПолучитьСкриптПроигратьМаршруты(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания);
			
			ВыполнитьСкрипт(ТекстСкрипта);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПаузаПроигрыванияМаршрута".
//
&НаКлиенте
Процедура ПаузаПроигрыванияМаршрута(Команда)
	
	ФлагПаузаПроигрыванияМаршрута = Истина;
	ВыполнитьСкрипт("play_route_pause = true;");
	
КонецПроцедуры

// Процедура - обработчик команды "ЗакончитьПроигрываниеМаршрута".
//
&НаКлиенте
Процедура ЗакончитьПроигрываниеМаршрута(Команда)
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
	ТекстСкрипта = 
		"if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|	play_route_intervalid = null;
		|}
		|
		|playRouteLayer.removeAllFeatures();
		|";
	ВыполнитьСкрипт(ТекстСкрипта);
	
	ПрогрессПроигрывания = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУскорениеПроигрыванияМаршрута(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ускорение", 
							   ?(КоэффициентУскоренияПроигрываниеМаршрута = 0, 1000, КоэффициентУскоренияПроигрываниеМаршрута));
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("НастроитьУскорениеПроигрыванияМаршрутаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма.НастройкаУскоренияВоспроизведенияМаршрута", 
				 ПараметрыОткрытия, 
				 ЭтотОбъект, 
				 УникальныйИдентификатор, 
				 Окно, 
				 НавигационнаяСсылка, 
				 ОповещениеПриЗакрытии, 
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
			 
&НаКлиенте
Процедура ГрупповаяНастройкаОтображенияТрека(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	ТекущийРежимГрупповогоОтображения = ТекущийРежимГрупповогоОтображения();
	Если НЕ ТекущийРежимГрупповогоОтображения = Неопределено Тогда
		Если ТипЗнч(ТекущийРежимГрупповогоОтображения) = Тип("СправочникСсылка.ItobВариантыОтображенияТрека") Тогда
			ПараметрыОткрытия.Вставить("РежимГрупповогоОтображения", "ИспользоватьВыбранныйВариантОтображенияТрекаУВсех");
			ПараметрыОткрытия.Вставить("КонкретныйВариантОтображения", ТекущийРежимГрупповогоОтображения);
		Иначе
			ПараметрыОткрытия.Вставить("РежимГрупповогоОтображения", ТекущийРежимГрупповогоОтображения);
		КонецЕсли; 			
	КонецЕсли;
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ГрупповаяНастройкаОтображенияТрекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма.ГрупповаяНастройкаОтображенияТрека", 
				 ПараметрыОткрытия, 
				 ЭтотОбъект, 
				 УникальныйИдентификатор, 
				 Окно, 
				 НавигационнаяСсылка, 
				 ОповещениеПриЗакрытии, 
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры
			 
#Область ПодсистемаItobЦентрСпутниковогоМониторингаКомандыДляТрекеров 
	
&НаСервере 
Процедура КомандыДляТрекеровПриСозданииНаСервере()
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров") Тогда
		МодульКомандыДляТрекеровСервер = ОбщегоНазначения.ОбщийМодуль("ItobКомандыДляТрекеров");
		МодульКомандыДляТрекеровСервер.РабочееМестоДиспетчераПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры
 
// Процедура - обработчик команды "ОтправитьКомандуНаТрекер".
//
&НаКлиенте
Процедура Подключаемый_ОтправитьКомандуНаТрекер(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров") Тогда
		МодульКомандыДляТрекеровКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobКомандыДляТрекеровКлиент");
		МодульКомандыДляТрекеровКлиент.ОтправитьКомандуНаТрекер(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура ПоискПоДеревуМониторинга(Команда)
	ПоискПоДеревуОбъектов("ДеревоОбъектовМониторинга");
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоДеревуМаршрутов(Команда)
	ПоискПоДеревуОбъектов("ДеревоОбъектовМаршруты");
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоДеревуОбъектов(ОбъектПоиска)
	
	Если мСтруктураПоискаОбъектовМониторинга = Неопределено Тогда
		мСтруктураПоискаОбъектовМониторинга = Новый Структура();
		мСтруктураПоискаОбъектовМониторинга.Вставить("ПолеПоиска","");
		мСтруктураПоискаОбъектовМониторинга.Вставить("Направление",1);
		мСтруктураПоискаОбъектовМониторинга.Вставить("УчитыватьРегистр",Ложь);
	КонецЕсли;
	мСтруктураПоискаОбъектовМониторинга.Вставить("ОбъектПоиска",ОбъектПоиска);
	
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма.Поиск", 
				 мСтруктураПоискаОбъектовМониторинга, 
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработкаЗакрытияПоискПоОбъектПредставление", ЭтотОбъект),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияПоискПоОбъектПредставление(Результат, Параметры)   Экспорт
	
	Если Результат <> Неопределено Тогда 
		
		ОбъектПоиска = Элементы[Результат.ОбъектПоиска];
		Если  Результат.Направление = 1 Тогда
			Счетчик = ОбъектПоиска.ТекущаяСтрока+1;
			Направление = 1;
		ИначеЕсли   Результат.Направление = 2 И ОбъектПоиска.ТекущаяСтрока > 0 Тогда
			Счетчик = ОбъектПоиска.ТекущаяСтрока-1;
			Направление = -1;
		Иначе
			Счетчик = 0;
			Направление = 1;
		КонецЕсли;
		
		Если Не Результат.УчитыватьРегистр Тогда
			СтрокаПоиска = НРег(Результат.ПолеПоиска);
		Иначе
			СтрокаПоиска = Результат.ПолеПоиска;
		КонецЕсли;
		
		Пока Истина Цикл
			Данные = ОбъектПоиска.ДанныеСтроки(Счетчик);
			
			Если Данные = Неопределено Тогда
				ПоказатьПредупреждение(, "По запросу: '"+Результат.ПолеПоиска+"' ничего не найдено");
				Прервать;
			КонецЕсли;
			
			Если Не Результат.УчитыватьРегистр Тогда
				ДаннаяСтрока = НРег(Данные.ОбъектПредставление);
			Иначе
				ДаннаяСтрока = Данные.ОбъектПредставление;
			КонецЕсли;
			
			Если СтрНайти(ДаннаяСтрока,СтрокаПоиска) <> 0 Тогда
				ОбъектПоиска.ТекущаяСтрока = Счетчик;
				Прервать;
			КонецЕсли;
			Счетчик = Счетчик + Направление;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		мСтруктураПоискаОбъектовМониторинга = Результат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НайтиАдрес(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элементы", Элементы);
	ДопПараметры.Вставить("ВебСсылкаСервер", ВебСсылкаСервер);
	
	ОткрытьФорму("ОбщаяФорма.ItobПоискАдреса",,ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияНайтиАдрес",ItobОбщегоНазначенияКлиент,ДопПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФиксироватьКарту(Команда)
	
	ФиксироватьКарту = НЕ ФиксироватьКарту;
	Элементы.КнопкаФиксироватьКарту.Пометка = ФиксироватьКарту;
	
КонецПроцедуры

// Процедура - обработчик команды "НажатиеНаКнопкуВыбораКарты".
//
&НаКлиенте
Процедура Подключаемый_НажатиеНаКнопкуВыбораКарты(Команда)	
	
	ИмяКоманды = СтрЗаменить(Команда.Имя,"НажатиеНаКнопку","");
	ИмяКоманды = СтрЗаменить(ИмяКоманды,"ВыбораКарты","");	
	ОбработатьВыборКарты(Число(ИмяКоманды));
	
КонецПроцедуры // НажатиеНаКнопку1ВыбораКарты()

&НаКлиенте
Процедура ПроложитьМаршрут(Команда)
	
	Элементы.ФормаПроложитьМаршрут.Пометка = НЕ Элементы.ФормаПроложитьМаршрут.Пометка;
	
	Если Элементы.ФормаПроложитьМаршрут.Пометка И Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		Элементы.РассчитатьПлощадьПолигона.Пометка = Ложь;
		ВыполнитьСкрипт("StopMeasuringArea();");	
	КонецЕсли;
	
	Если Элементы.ФормаПроложитьМаршрут.Пометка И Элементы.РассчитатьДлинуРасстояния.Пометка Тогда
		Элементы.РассчитатьДлинуРасстояния.Пометка = Ложь;
		ВыполнитьСкрипт("StopMeasuring();");
	КонецЕсли;
	
	Если Элементы.ФормаПроложитьМаршрут.Пометка И Элементы.ГеографическиеЗоныСоздать.Пометка Тогда
		Элементы.ГеографическиеЗоныСоздать.Пометка = Ложь;
		ТекстСкрипта = "destroy_geozones_control();
		|var AllGeozonLayer = m_map.getLayersByName(""AllGeozonLayer"");
		|if (AllGeozonLayer.length > 0)
		|{ m_map.removeLayer(AllGeozonLayer[0]); }";
		
		ВыполнитьСкрипт(ТекстСкрипта);
		
		Элементы.ГеографическиеЗоныСохранить.Доступность = Ложь;
	КонецЕсли;
		
	Если Элементы.ФормаПроложитьМаршрут.Пометка Тогда
		ВыполнитьСкрипт("startDrawpointsforPath();");
		
	Иначе
		ВыполнитьСкрипт("stopDrawpointsforPath();");
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПлощадьПолигона(Команда)
	
	Элементы.РассчитатьПлощадьПолигона.Пометка = НЕ Элементы.РассчитатьПлощадьПолигона.Пометка;
	
	Если Элементы.РассчитатьПлощадьПолигона.Пометка И Элементы.РассчитатьДлинуРасстояния.Пометка Тогда
		Элементы.РассчитатьДлинуРасстояния.Пометка = Ложь;
		ВыполнитьСкрипт("StopMeasuring();");
	КонецЕсли;
	Если Элементы.ФормаПроложитьМаршрут.Пометка И Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		Элементы.ФормаПроложитьМаршрут.Пометка = Ложь;
		ВыполнитьСкрипт("stopDrawpointsforPath();");
	КонецЕсли;
	
	Если Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		ВыполнитьСкрипт("StartMeasuringArea();");
		
	Иначе
		ВыполнитьСкрипт("StopMeasuringArea();");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуИстории(Команда)
	
	// Получаем данные строки
	ДанныеСтроки = ПолучитьТекущиеДанныеСтроки();
	
	Если НЕ ДанныеСтроки = Неопределено Тогда
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Возврат;	
		КонецЕсли;	
		
		СтруктураДанных = Новый Структура("Объект,Терминал,АктуальностьДанных");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
		СтруктураДанных.Вставить("ГруппироватьСтоянки", Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка);
		
		// Обновляем таблицу
		ОбновитьТаблицуИсторииИнтерваловСервер(СтруктураДанных);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьСтоянкиИсторииОбъектов(Команда)
	
	Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка = 
		НЕ Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка;
		
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ГруппироватьСтоянки", Элементы.ИсторияОбъектаГруппироватьСтоянкиИсторииОбъектов.Пометка);
			
	ОбновитьТаблицуИсторииСервер(СтруктураДанных, ПолучитьСостоянияТерминалов());	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбъектаВыборПериода(Команда)
	
	ПрошлыйПериодИстории = ТекущийПериодИстории;
	
	ИндексПериодаСтрока = Прав(Команда.Имя,1);
	ТекущийПериодИстории = Число(ИндексПериодаСтрока);
	ТекущееПредставлениеПериода = "";
	
	Для каждого ТекКнопка Из Элементы.ИсторияОбъектаПодменюВыборПериода.ПодчиненныеЭлементы Цикл
		ВыбранаТекущаяКнопка = Прав(ТекКнопка.Имя,1) = ИндексПериодаСтрока;
		ТекКнопка.Пометка = ВыбранаТекущаяКнопка;
		Если ВыбранаТекущаяКнопка Тогда
			ТекущееПредставлениеПериода = ТекКнопка.Заголовок;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПрошлыйПериодИстории = ТекущийПериодИстории Тогда
		// Ничего не поменялось
	 	Возврат;
	
	КонецЕсли;
	
	ТекущийТерминалИстории = Неопределено;
	
	// Сообщаем о том, что дата начала изменена, что бы не выполнялась дозапись
	НачалоПериодаИзменено = Истина;
	
	// Обновляем таблицу
	Если ИспользоватьАвтообновлениеТаблицыИстории Тогда
		ОчиститьПанельИстории(Истина);
		ОбновитьТаблицуИстории(Неопределено);
	КонецЕсли; 
				
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеИстории(Команда)
	
	ИспользоватьАвтообновлениеТаблицыИстории = НЕ ИспользоватьАвтообновлениеТаблицыИстории;
	Элементы.ИсторияОбъектаАвтообновлениеИстории.Пометка = ИспользоватьАвтообновлениеТаблицыИстории;
	
	// Включить/отключить автообновление
	Если ИспользоватьАвтообновлениеТаблицыИстории Тогда
	    ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута",60,Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьТрекМаршрута");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлинуРасстояния(Команда)
	
	Элементы.РассчитатьДлинуРасстояния.Пометка = НЕ Элементы.РассчитатьДлинуРасстояния.Пометка;
	
	Если Элементы.РассчитатьДлинуРасстояния.Пометка И Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		Элементы.РассчитатьПлощадьПолигона.Пометка = Ложь;
		ВыполнитьСкрипт("StopMeasuringArea();");	
	КонецЕсли;
	
	Если Элементы.ФормаПроложитьМаршрут.Пометка И Элементы.РассчитатьДлинуРасстояния.Пометка Тогда
		Элементы.ФормаПроложитьМаршрут.Пометка = Ложь;
		ВыполнитьСкрипт("stopDrawpointsforPath();");
	КонецЕсли;
	
	Если Элементы.РассчитатьДлинуРасстояния.Пометка Тогда
		ВыполнитьСкрипт("StartMeasuring();");
		
	Иначе
		ВыполнитьСкрипт("StopMeasuring();");
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельИсторииРазвернуть(Команда)
	Элементы.ГруппаПанельРазвернутьПанельИстории.Видимость = Ложь;
	Элементы.ГруппаПанельИсторииОбщая.Видимость = Истина;
	ПанельИсторииРазвернута = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПанельИсторииСвернуть(Команда)
	Элементы.ГруппаПанельРазвернутьПанельИстории.Видимость = Истина;
	Элементы.ГруппаПанельИсторииОбщая.Видимость = Ложь;
	ПанельИсторииРазвернута = Ложь;
	ОчиститьКартуОтИстории();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыделенныеНаКартеОбъекты(Команда)
	Если Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка Тогда
		ТекстСкрипта = "selectbox_monitoring.deactivate();";
		ВыполнитьСкрипт(ТекстСкрипта);
		Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка = Ложь;
	Иначе
		ТекстСкрипта = "selectbox_monitoring.activate();";
		ВыполнитьСкрипт(ТекстСкрипта);
		Элементы.ДеревоОбъектовМониторингаПоказатьВыделенныеНаКартеОбъекты.Пометка = Истина;
	КонецЕсли; 
КонецПроцедуры

#Область ПодсистемаItobЦентрСпутниковогоМониторингаГеографическиеЗоны 
	
&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныСоздать(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.СоздатьГеографическуюЗону(ЭтотОбъект);
		Если Элементы.ФормаПроложитьМаршрут.Пометка Тогда
			Элементы.ФормаПроложитьМаршрут.Пометка = Ложь;
			ВыполнитьСкрипт("stopDrawpointsforPath();");
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныРедактировать(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.РедактироватьГеографическуюЗону(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныПросмотреть(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.ПросмотретьГеографическуюЗону(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныСохранить(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.СохранитьГеографическуюЗону(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныВсе(Команда)
	ОбработатьКомандуПоказатьВсеГеографическиеЗоныНаКарте();		
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ItobРабочееМестоДиспетчера", "ГеографическиеЗоныФильтры", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоныСнятьВсе(Команда)
	ОбработатьКомандуСкрытьВсеГеографическиеЗоныНаКарте();
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ItobРабочееМестоДиспетчера", "ГеографическиеЗоныФильтры", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГеографическиеЗоны_Установить(Команда)
	ОбработатьКомандуГеографическиеЗоныПользовательская(Команда.Имя);
	Если НЕ Команда.Имя = "ГеогафическиеЗоны_Настройки" Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ItobРабочееМестоДиспетчера", "ГеографическиеЗоныФильтры", Команда.Имя);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ОбработатьКомандуГеографическиеЗоны(ИмяКоманды)
	
	МодульГеографическиеЗоныВызовСервера = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоныВызовСервера");
	Возврат МодульГеографическиеЗоныВызовСервера.ОбработатьКомандуГеографическиеЗоны(ЭтаФорма, ИмяКоманды);
	
КонецФункции

// Процедура - обработчик команды "ОткрытьОтчетПосещениеГеографическихЗон".
//
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПосещениеГеографическихЗон(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФормуОтчета("Отчет.ItobПосещениеГеографическихЗон.Форма", ПараметрыОтчета);
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетМаршрутПоГеографическимЗонам".
//
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетМаршрутПоГеографическимЗонам(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		ОткрытьФормуОтчета("Отчет.ItobМаршрутПоГеозонамДиаграммаГанта.Форма");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьОтчетАнализПосещенияГеографическихЗон".
//
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетАнализПосещенияГеографическихЗон(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФормуОтчета("Отчет.ItobАнализПосещенияГеографическихЗон.Форма", ПараметрыОтчета);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьСпособОтображенияПредставленияТС(Команда)
	
	СпособыПредставленияТС = СписокСпособовПредставленияТСНаКарте();
	
	Для каждого СпособПредставления Из СпособыПредставленияТС Цикл
		Если СпособПредставления.Значение = ПредставлениеТСНаКарте Тогда
			ДействующийСпособПредставленияТС = СпособПредставления;
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПослеВыбораСпособаОтображенияПредставленияТС", ЭтотОбъект),
						  СпособыПредставленияТС,
						  Элементы.УстановитьПредставлениеТС,
						  ДействующийСпособПредставленияТС);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьПанельЗакладок(Команда)
	Элементы.ГруппаЛеваяПанель.Видимость = Ложь;
	Элементы.РазвернутьПанельЗакладок.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПанельЗакладок(Команда)
	Элементы.ГруппаЛеваяПанель.Видимость = Истина;
	Элементы.РазвернутьПанельЗакладок.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ГруппировкаТС

&НаСервере 
Функция ЗаполнитьСписокВыбораГруппировок() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьДинамическиеГруппировки", Константы.ItobИспользоватьДинамическиеГруппировки.Получить() = Истина);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobВидыГруппировок.Ссылка,
	|	ItobВидыГруппировок.Ссылка.Наименование КАК Наименование,
	|	ItobВидыГруппировок.Индекс
	|ИЗ
	|	Справочник.ItobВидыГруппировок КАК ItobВидыГруппировок
	|ГДЕ
	|	ItobВидыГруппировок.ЭтоГруппа = ИСТИНА
	|	И &ИспользоватьДинамическиеГруппировки";	
	
	ТекСписок = Элементы.ВидГруппировки.СписокВыбора;
	ТекСписок.Добавить(10,"По умолчанию");
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Для каждого ТекСтрока Из ТабРезультат Цикл
		ТекСписок.Добавить(ТекСтрока.Индекс,ТекСтрока.Наименование);
	КонецЦикла;

	ТекСписок.Добавить(11,"Организация");
	ТекСписок.Добавить(12,"Марка");
	ТекСписок.Добавить(13,"Вид транспорта");
	
	ТекущаяВерсия = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ВерсияВведенияНовыхСвойств = "3.0.2.0";	
	ЭтоНоваяВерсияПодсистемыСвойств = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсия, ВерсияВведенияНовыхСвойств) >= 0);
	РезультатЗапроса = РезультатЗапросаДополнительныхРеквизитовИСведенийОбъектовМониторинга(ЭтоНоваяВерсияПодсистемыСвойств);	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСписок.Добавить(Выборка.Ссылка, Выборка.Заголовок);		
	КонецЦикла; 
	
КонецФункции

&НаСервере 
Функция ПолучитьЭлементыГруппировки(ТекИндекс) 
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ItobВидыГруппировок.Ссылка,
	             	  |	ItobВидыГруппировок.Ссылка.Наименование КАК Наименование,
	             	  |	ItobВидыГруппировок.Индекс
	             	  |ИЗ
	             	  |	Справочник.ItobВидыГруппировок КАК ItobВидыГруппировок
	             	  |ГДЕ
	             	  |	ItobВидыГруппировок.ЭтоГруппа = ЛОЖЬ
	             	  |	И ItobВидыГруппировок.Родитель.Индекс = &ТекИндекс";	
	
	Запрос.УстановитьПараметр("ТекИндекс",ТекИндекс);
	ТабРезультат 		= Запрос.Выполнить().Выгрузить();
	МассивГруппировок 	= ТабРезультат.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивГруппировок;
	
КонецФункции

// Установка пометки родителей дерева.
//
&НаСервере 
Процедура УстановитьПометкиСервер(Родитель)

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	ВложенныеЭлементыСтроки = Родитель.ПолучитьЭлементы();
	Если ВложенныеЭлементыСтроки.Количество() > 0 Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для Каждого Строка Из ВложенныеЭлементыСтроки Цикл
		    Если Строка.Пометка = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Пометка = 1 ИЛИ Строка.Пометка = 2 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Пометка = 2;
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			Пометка = 1;
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			Пометка = 0;
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			Пометка = 2;
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиСервер(Родитель.ПолучитьРодителя());
	
КонецПроцедуры

&НаСервере
Функция РезультатЗапросаДополнительныхРеквизитовИСведенийОбъектовМониторинга(ЭтоНоваяВерсияПодсистемыСвойств)
	
	ДанныеДляПолученияНаборов = ДанныеДляПолученияНаборовПоВерсииПодсистемыСвойств(ЭтоНоваяВерсияПодсистемыСвойств);
		
	Запрос = Новый Запрос;
	Если ЭтоНоваяВерсияПодсистемыСвойств Тогда
		Запрос.УстановитьПараметр("ИсточникНаборовТаблица", ДанныеДляПолученияНаборов);
		ТекстЗапросаНачало = 
		"ВЫБРАТЬ
		|	ИсточникНаборовТаблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втСсылкиНаНаборы
		|ИЗ
		|	&ИсточникНаборовТаблица КАК ИсточникНаборовТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	Иначе
		Запрос.УстановитьПараметр("ИменаНаборов", ДанныеДляПолученияНаборов);
		ТекстЗапросаНачало = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втСсылкиНаНаборы
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных В(&ИменаНаборов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";		
	КонецЕсли; 
	
	ТекстЗапросаНачало = ТекстЗапросаНачало +
							 "
							 |;
							 |/////////////////////////////////////////
							 |";
	
	ТекстЗапросаСередина =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизиты.Свойство.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСсылкиНаНаборы КАК втСсылкиНаНаборы
	|		ПО ДополнительныеРеквизиты.Ссылка = втСсылкиНаНаборы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство.ТипЗначения,
	|	ДополнительныеСведения.Свойство.Ссылка,
	|	ДополнительныеСведения.Свойство.ЭтоДополнительноеСведение,
	|	ДополнительныеСведения.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСсылкиНаНаборы КАК втСсылкиНаНаборы
	|		ПО ДополнительныеСведения.Ссылка = втСсылкиНаНаборы.Ссылка";
	
	Запрос.Текст = ТекстЗапросаНачало + ТекстЗапросаСередина;
	
		
	Возврат Запрос.Выполнить();

КонецФункции

&НаСервере
Функция ДанныеДляПолученияНаборовПоВерсииПодсистемыСвойств(ЭтоНоваяВерсияПодсистемыСвойств)
	
	ДанныеДляПолученияНаборов = Неопределено;
	МодульУправлениеСвойствами = Неопределено;
	Если ЭтоНоваяВерсияПодсистемыСвойств Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		
		ДанныеДляПолученияНаборов = Новый ТаблицаЗначений;
		ДанныеДляПолученияНаборов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));	
	Иначе
		ДанныеДляПолученияНаборов = Новый Массив;	
	КонецЕсли; 
	
	мсвТипыОбъектов = Метаданные.ОпределяемыеТипы.ItobОбъектМониторинга.Тип.Типы();
	Для каждого Тип Из мсвТипыОбъектов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекущееПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Если НЕ Нрег(Лев(ТекущееПолноеИмя,10)) = "справочник" Тогда
			// Поддерживаются только справочники.
			Продолжить;		
		КонецЕсли;
				
		ИмяПредопределенногоНабора = "Справочник_" + ОбъектМетаданных.Имя;
		Если ЭтоНоваяВерсияПодсистемыСвойств Тогда
			НоваяСтрока = ДанныеДляПолученияНаборов.Добавить();
			НоваяСтрока.Ссылка = МодульУправлениеСвойствами.НаборСвойствПоИмени(ИмяПредопределенногоНабора);
		Иначе
			ДанныеДляПолученияНаборов.Добавить(ИмяПредопределенногоНабора);	
		КонецЕсли; 			
	КонецЦикла;
	
	
	Возврат ДанныеДляПолученияНаборов;
	
КонецФункции

#КонецОбласти

#Область ПланФакт

#Область ИзоляцияПодсистемы

&НаСервере
Функция ТекстЗапросаДинамическогоСпискаМаршрутныхЗаданий()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ItobСвойстваМаршрутныхЗаданий.МаршрутноеЗадание КАК МаршрутноеЗадание,
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВыезда КАК ДатаВыезда,
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВозвращения КАК ДатаВозвращения,
	|	ItobСвойстваМаршрутныхЗаданий.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ItobСвойстваМаршрутныхЗаданий.Водитель КАК Водитель,
	|	ItobСвойстваМаршрутныхЗаданий.Организация КАК Организация,
	|	ItobСвойстваМаршрутныхЗаданий.Терминал КАК Терминал,
	|	ItobСвойстваМаршрутныхЗаданий.ТочекПлан КАК ТочекПлан,
	|	ItobСвойстваМаршрутныхЗаданий.ТочекФакт КАК ТочекФакт,
	|	ItobСвойстваМаршрутныхЗаданий.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВыездаФактРасчетная КАК ДатаВыездаФактРасчетная,
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВозвращенияФактРасчетная КАК ДатаВозвращенияФактРасчетная,
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВыездаФактРучнойВвод КАК ДатаВыездаФактРучнойВвод,
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВозвращенияФактРучнойВвод КАК ДатаВозвращенияФактРучнойВвод
	|ПОМЕСТИТЬ ВТМаршрутныеЗадания
	|ИЗ
	|	РегистрСведений.ItobСвойстваМаршрутныхЗаданий КАК ItobСвойстваМаршрутныхЗаданий
	|ГДЕ
	|	ItobСвойстваМаршрутныхЗаданий.ДатаВыезда МЕЖДУ &ДатаВыездаНачало И &ДатаВыездаОкончание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутноеЗадание,
	|	Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ItobПутевыеЛистыКонтрольПланаСрезПоследних.ПутевойЛист КАК ПутевойЛист,
	|	ItobПутевыеЛистыКонтрольПланаСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ ВТСтатусыМаршрутныхЗаданий
	|ИЗ
	|	РегистрСведений.ItobПутевыеЛистыКонтрольПлана.СрезПоследних(
	|			,
	|			ПутевойЛист В
	|				(ВЫБРАТЬ
	|					ВТМаршрутныеЗадания.МаршрутноеЗадание
	|				ИЗ
	|					ВТМаршрутныеЗадания КАК ВТМаршрутныеЗадания)) КАК ItobПутевыеЛистыКонтрольПланаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПутевойЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМаршрутныеЗадания.МаршрутноеЗадание КАК МаршрутноеЗадание,
	|	ВТМаршрутныеЗадания.ДатаВыезда КАК ДатаВыезда,
	|	ВТМаршрутныеЗадания.ДатаВозвращения КАК ДатаВозвращения,
	|	ВТМаршрутныеЗадания.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ВТМаршрутныеЗадания.Водитель КАК Водитель,
	|	ВТМаршрутныеЗадания.Организация КАК Организация,
	|	ВТМаршрутныеЗадания.Терминал КАК Терминал,
	|	ВТМаршрутныеЗадания.ТочекПлан КАК ТочекПлан,
	|	ВТМаршрутныеЗадания.ТочекФакт КАК ТочекФакт,
	|	ВТМаршрутныеЗадания.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ВТМаршрутныеЗадания.ДатаВыездаФактРасчетная КАК ДатаВыездаФактРасчетная,
	|	ВТМаршрутныеЗадания.ДатаВозвращенияФактРасчетная КАК ДатаВозвращенияФактРасчетная,
	|	ЕСТЬNULL(АктуальностьДанныхТерминалов.ДатаВремя, ДАТАВРЕМЯ(1, 1, 1)) КАК АктуальностьТрекера,
	|	ЕСТЬNULL(ВТСтатусыМаршрутныхЗаданий.Статус, ЗНАЧЕНИЕ(Перечисление.ItobСтатусыВыполненияПутевыхЛистов.Открыт)) КАК СтатусВыполнения,
	|	ВЫБОР
	|		КОГДА ВТМаршрутныеЗадания.ДатаВыезда = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(АктуальностьДанныхТерминалов.ДатаВремя, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ВТМаршрутныеЗадания.ДатаВозвращенияФактРасчетная = ДАТАВРЕМЯ(1, 1, 1)
	|				И РАЗНОСТЬДАТ(ВТМаршрутныеЗадания.ДатаВозвращенияФактРасчетная, АктуальностьДанныхТерминалов.ДатаВремя, СЕКУНДА) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ ВТМаршрутныеЗадания.ДатаВыезда = ДАТАВРЕМЯ(1, 1, 1)
	|				И РАЗНОСТЬДАТ(ВТМаршрутныеЗадания.ДатаВыезда, АктуальностьДанныхТерминалов.ДатаВремя, СЕКУНДА) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТрекерАктуален,
	|	ЕСТЬNULL(СчетчикиМаршрутов.ОбработаноТочекТерминала, 0) КАК ОбработаноТочекТерминала,
	|	ЕСТЬNULL(СчетчикиМаршрутов.ЕстьРазрывыДанных, ИСТИНА) КАК ЕстьРазрывыДанных,
	|	ВТМаршрутныеЗадания.ДатаВыездаФактРучнойВвод КАК ДатаВыездаФактРучнойВвод,
	|	ВТМаршрутныеЗадания.ДатаВозвращенияФактРучнойВвод КАК ДатаВозвращенияФактРучнойВвод
	|ИЗ
	|	ВТМаршрутныеЗадания КАК ВТМаршрутныеЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК АктуальностьДанныхТерминалов
	|		ПО ВТМаршрутныеЗадания.Терминал = АктуальностьДанныхТерминалов.Терминал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobСчетчикиМаршрутов КАК СчетчикиМаршрутов
	|		ПО ВТМаршрутныеЗадания.МаршрутноеЗадание = СчетчикиМаршрутов.МаршрутноеЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыМаршрутныхЗаданий КАК ВТСтатусыМаршрутныхЗаданий
	|		ПО ВТМаршрутныеЗадания.МаршрутноеЗадание = ВТСтатусыМаршрутныхЗаданий.ПутевойЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ItobПутевойЛист КАК ItobПутевойЛист
	|		ПО ВТМаршрутныеЗадания.МаршрутноеЗадание = ItobПутевойЛист.Ссылка";
	
	ItobПутевыеЛисты.УстановитьАктуальноеИмяПутевогоЛистаВТекстеЗапроса(ТекстЗапроса);
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДинамическогоСпискаТочекМаршрута()
	
	МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	
	ПараметрыАналитикиТочекМаршрута = МодульПланФакт.ПараметрыАналитикиТочекМаршрута();
	
	
	Возврат МодульПланФакт.СобратьТекстЗапросаДляАнализаПосещенийТочекМаршрута(ПараметрыАналитикиТочекМаршрута);
	
КонецФункции


&НаСервереБезКонтекста
Функция ДанныеЗапросаЗаданийВодителю()
	
	ТекстЗапросаНачало =
	"ВЫБРАТЬ
	|	СвойстваМаршрутныхЗаданий.МаршрутноеЗадание КАК МаршрутноеЗадание,
	|	СвойстваМаршрутныхЗаданий.ТранспортноеСредство КАК ТранспортноеСредство,
	|	СвойстваМаршрутныхЗаданий.Водитель КАК Водитель,
	|	СвойстваМаршрутныхЗаданий.Терминал КАК Терминал,
	|	СвойстваМаршрутныхЗаданий.ЗаданПунктВыезда КАК ЗаданПунктВыезда
	|ПОМЕСТИТЬ втСписокЗаданий
	|ИЗ
	|	РегистрСведений.ItobСвойстваМаршрутныхЗаданий КАК СвойстваМаршрутныхЗаданий
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &МаршрутноеЗадание = НЕОПРЕДЕЛЕНО
	|				ТОГДА &Объект В (СвойстваМаршрутныхЗаданий.ТранспортноеСредство, СвойстваМаршрутныхЗаданий.Водитель)
	|						И (СвойстваМаршрутныхЗаданий.ДатаВыезда МЕЖДУ &НачДата И &КонДата)
	|						И СвойстваМаршрутныхЗаданий.МаршрутноеЗадание.Проведен
	|			ИНАЧЕ СвойстваМаршрутныхЗаданий.МаршрутноеЗадание = &МаршрутноеЗадание
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрекМаршрута.Порядок КАК НомерСтроки,
	|	ТрекМаршрута.Широта КАК Широта,
	|	ТрекМаршрута.Долгота КАК Долгота,
	|	ТрекМаршрута.МаршрутноеЗадание КАК МаршрутноеЗадание
	|ИЗ
	|	РегистрСведений.ItobТрекМаршрута КАК ТрекМаршрута
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокЗаданий КАК втСписокЗаданий
	|		ПО ТрекМаршрута.МаршрутноеЗадание = втСписокЗаданий.МаршрутноеЗадание
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутноеЗадание,
	|	НомерСтроки
	|ИТОГИ ПО
	|	МаршрутноеЗадание";
	
	ИндексЗамыкающегоПакетаВНачальномЗапросе = 1;
	
	ТекстЗапросаСередина = 
	"
	|;
	|//////////////////
	|";	
		
	ДанныеЗапросаПоТочкам = ?(ПланФактВнедренИВключен(), 
						  	  ДанныеЗапросаСоставаЗаданияВодителюПланФакт(),
						  	  ДанныеЗапросаСоставаЗаданияВодителюПлан());
	
	
	ТекстЗапросаПолный = ТекстЗапросаНачало + ТекстЗапросаСередина + ДанныеЗапросаПоТочкам.ТекстЗапроса;
	
	ИндексПакетаРезультатаПоМаршрутномуЗаданию = 1;
	ИндексПакетаРезультатаПоТочкам = 1 + ИндексЗамыкающегоПакетаВНачальномЗапросе + ДанныеЗапросаПоТочкам.ИндексРезультирующегоПакета;
	
	
	Возврат Новый Структура("ИндексПакетаРезультатаПоМаршрутномуЗаданию, ИндексПакетаРезультатаПоТочкам, ТекстЗапроса",
	                        ИндексПакетаРезультатаПоМаршрутномуЗаданию,
							ИндексПакетаРезультатаПоТочкам,
							ТекстЗапросаПолный);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеЗапросаСоставаЗаданияВодителюПлан()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МаршрутыТочки.МаршрутноеЗадание КАК МаршрутноеЗадание,
	|	МаршрутыТочки.Порядок КАК Порядок,
	|	МаршрутыТочки.Адрес КАК Адрес,
	|	МаршрутыТочки.Адрес.Представление КАК АдресПредставление,
	|	МаршрутыТочки.ПрибытиеПлан КАК ПрибытиеПлан,
	|	МаршрутыТочки.УбытиеПлан КАК УбытиеПлан,
	|	МаршрутыТочки.Широта КАК Широта,
	|	МаршрутыТочки.Долгота КАК Долгота,
	|	0 КАК ИндексСостоянияПосещения
	|ИЗ
	|	РегистрСведений.ItobМаршрутыТочки КАК МаршрутыТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокЗаданий КАК втСписокЗаданий
	|		ПО МаршрутыТочки.МаршрутноеЗадание = втСписокЗаданий.МаршрутноеЗадание
	|ГДЕ
	|	НЕ МаршрутыТочки.Широта = 0
	|	И НЕ МаршрутыТочки.Долгота = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутноеЗадание,
	|	Порядок";
	
	ИндексРезультирующегоПакета = 0;
	
	Возврат Новый Структура("ИндексРезультирующегоПакета, ТекстЗапроса",
							ИндексРезультирующегоПакета,
							ТекстЗапроса);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеЗапросаСоставаЗаданияВодителюПланФакт()
	
	МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	
	ПараметрыАналитикиТочекМаршрута = МодульПланФакт.ПараметрыАналитикиТочекМаршрута();
	ПараметрыАналитикиТочекМаршрута.ПолноеИмяИсточникаМаршрутныхЗаданий = "втСписокЗаданий";
	ПараметрыАналитикиТочекМаршрута.ТолькоПоГеокодированнымТочкам = Истина;
	ПараметрыАналитикиТочекМаршрута.ПоляУпорядочивания = "МаршрутноеЗадание, Порядок";
		
	ДанныеЗапросаПоТочкам =  МодульПланФакт.СобратьДанныеЗапросаДляАнализаПосещенийТочекМаршрута(ПараметрыАналитикиТочекМаршрута);
	
	
	Возврат Новый Структура("ИндексРезультирующегоПакета, ТекстЗапроса",
							ДанныеЗапросаПоТочкам.ИндексРезультирующегоПакета,
							ДанныеЗапросаПоТочкам.ТекстЗапроса);
КонецФункции

#КонецОбласти 

&НаСервере
Функция СкриптПланФакта(ДанныеМаршрута)
	
	ИсточникПериодаДляРасчетаФактПробега = Перечисления.ItobВидыПериодовПланФакта.ВзятьИзНастройкиВизуализацииФактМаршрута;
	
	ДанныеПодбораПериода = Перечисления.ItobВидыПериодовПланФакта.ДанныеПодбораПериода();
	ЗаполнитьЗначенияСвойств(ДанныеПодбораПериода, ДанныеМаршрута);
	ДанныеПодбораПериода.ВидИсточникаПериода = ИсточникПериодаДляРасчетаФактПробега;
	
	ПериодыРасчетаФакта = Перечисления.ItobВидыПериодовПланФакта.
			ВыбратьКорректныеГраницыПериодаДляРасчетаФактическогоМаршрута(ДанныеПодбораПериода);
			
	Если НЕ ЗначениеЗаполнено(ПериодыРасчетаФакта)
		 ИЛИ НЕ ЗначениеЗаполнено(ПериодыРасчетаФакта.НачалоПериода)
		 ИЛИ НЕ ЗначениеЗаполнено(ПериодыРасчетаФакта.КонецПериода) Тогда
		 
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстСкрипта = "playRouteLayer.removeAllFeatures();
				   |var Features = [];
				   |";
	
	ТекстСкрипта = ТекстСкрипта + СкриптУдаленияСлояПланФакта();
				   
	// Определить объект по терминалу
	ОбъектПоТерминалу = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", ДанныеМаршрута.Терминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПривязкиТрекеровСрезПоследних.Объект КАК Объект,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ItobПривязкиТрекеровСрезПоследних.Объект) КАК ОбъектПредставление
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних КАК ItobПривязкиТрекеровСрезПоследних
	               |ГДЕ
	               |	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен
	               |	И ItobПривязкиТрекеровСрезПоследних.Терминал = &Терминал";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат ТекстСкрипта;
	КонецЕсли;
	
	ОбъектПоТерминалу = Выборка.Объект;
	ОбъектПредставление = Выборка.ОбъектПредставление;
	
	МассивОбъектов = Новый Массив;
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Объект", ОбъектПоТерминалу);
	ДанныеОбъекта.Вставить("Терминал", ДанныеМаршрута.Терминал);
	ДанныеОбъекта.Вставить("ОбъектПредставление", ОбъектПредставление);
	МассивОбъектов.Добавить(ДанныеОбъекта);
	
	ПараметрыРендеринга = Новый Структура;
	ПараметрыРендеринга.Вставить("МассивОбъектов", МассивОбъектов);
	ПараметрыРендеринга.Вставить("НачДата", ПериодыРасчетаФакта.НачалоПериода);
	ПараметрыРендеринга.Вставить("КонДата", ПериодыРасчетаФакта.КонецПериода);
	ПараметрыРендеринга.Вставить("ПоказыватьНарушенияВождения", Ложь);
	ПараметрыРендеринга.Вставить("ПоказыватьПлановыйМаршрут", Истина);
	ПараметрыРендеринга.Вставить("ГеокодироватьАдреса", Ложь);	
	ПараметрыРендеринга.Вставить("МаршрутноеЗадание", ДанныеМаршрута.МаршрутноеЗаданиеСсылка);
	ПараметрыРендеринга.Вставить("ИмяСлояРендеринга", "PlanFactRoutesLayer");
	ПараметрыРендеринга.Вставить("ФиксироватьКарту", ФиксироватьКарту);
	ПараметрыРендеринга.Вставить("ВебСсылкаСервер", ВебСсылкаСервер);
	ПараметрыРендеринга.Вставить("ОтображатьДанныеТерминалаВТреке", Ложь);
	ПараметрыРендеринга.Вставить("РазрешитьДинамическоеОтображениеТрека", Истина);
		
	сткРезультат = ПолучитьСкриптМаршрутыОбъектов(ПараметрыРендеринга, Неопределено);
	
	ЦветМаршрутаФакт = сткРезультат.ЦветФактическогоМаршрутаДесятичный;
	ЦветМаршрутаПлан = сткРезультат.ЦветПлановогоМаршрутаДесятичный;

	
	Возврат сткРезультат.ТекстСкрипта;	

КонецФункции

&НаКлиенте
Функция ИнициализироватьДанныеМаршрута()
	
	ДанныеМаршрута = Новый Структура;
	ДанныеМаршрута.Вставить("Терминал");
	ДанныеМаршрута.Вставить("МаршрутноеЗаданиеСсылка");
	ДанныеМаршрута.Вставить("ДатаВыезда");
	ДанныеМаршрута.Вставить("ДатаВозвращения");
	ДанныеМаршрута.Вставить("ДатаВыездаФактРасчетная");
	ДанныеМаршрута.Вставить("ДатаВозвращенияФактРасчетная");
	ДанныеМаршрута.Вставить("ДатаВыездаФактРучнойВвод");
	ДанныеМаршрута.Вставить("ДатаВозвращенияФактРучнойВвод");
	
	
	Возврат ДанныеМаршрута;
	
КонецФункции
 
&НаКлиенте
Процедура ОбновитьПланФактПоМаршруту()
		
	ТекущиеДанные = Элементы.СписокМаршрутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеМаршрута = ИнициализироватьДанныеМаршрута();
	ЗаполнитьЗначенияСвойств(ДанныеМаршрута, ТекущиеДанные);
	ДанныеМаршрута.МаршрутноеЗаданиеСсылка = ТекущиеДанные.МаршрутноеЗадание;
	
	ТекстСкрипта = СкриптПланФакта(ДанныеМаршрута);
	Если НЕ ТекстСкрипта = Неопределено Тогда
		ВыполнитьСкрипт(ТекстСкрипта);	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиПланФакта()
	
	Элементы.СписокМаршрутов.Обновить();
	Элементы.СписокТочекМаршрута.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаданияВодителю(Знач ТекущийОбъект, Знач НачДата, Знач КонДата, Знач МаршрутноеЗаданиеСсылка)

	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("ЗаданиеВодителю");
	ТЗРезультат.Колонки.Добавить("Маршрут");
	ТЗРезультат.Колонки.Добавить("Состав");
	
	ШаблонТаблицыМаршрута = Новый ТаблицаЗначений;
	ШаблонТаблицыМаршрута.Колонки.Добавить("НомерСтроки");
	ШаблонТаблицыМаршрута.Колонки.Добавить("Широта");
	ШаблонТаблицыМаршрута.Колонки.Добавить("Долгота");
	
	ШаблонТаблицыСоставаМаршрутногоЗадания = Новый ТаблицаЗначений;
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("ЗаданиеВодителю");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("НомерСтроки");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("АдресДоставки");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("АдресДоставкиПредставление");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("ПрибытиеПлан");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("УбытиеПлан");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("Широта");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("Долгота");
	ШаблонТаблицыСоставаМаршрутногоЗадания.Колонки.Добавить("ИндексСостоянияПосещения");
	
	ДанныеЗапросаЗаданийВодителю = ДанныеЗапросаЗаданийВодителю();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата",КонДата);
	Запрос.УстановитьПараметр("Объект", ТекущийОбъект);
	Запрос.УстановитьПараметр("МаршрутноеЗадание", МаршрутноеЗаданиеСсылка);
	Запрос.Текст = ДанныеЗапросаЗаданийВодителю.ТекстЗапроса;
	
	ИндексРезультата_ДанныеМаршрутныхЗаданий = ДанныеЗапросаЗаданийВодителю.ИндексПакетаРезультатаПоМаршрутномуЗаданию;
	ИндексРезультата_ДанныеТочекМаршрута = ДанныеЗапросаЗаданийВодителю.ИндексПакетаРезультатаПоТочкам;
	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	Если НаборРезультатов[ИндексРезультата_ДанныеМаршрутныхЗаданий].Пустой() Тогда
		Возврат ТЗРезультат;	
	КонецЕсли; 
	
	ТаблицаТочекМаршрута = НаборРезультатов[ИндексРезультата_ДанныеТочекМаршрута].Выгрузить(); 
	
	ВыборкаПоМаршрутнымЗаданиям = НаборРезультатов[ИндексРезультата_ДанныеМаршрутныхЗаданий].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоМаршрутнымЗаданиям.Следующий() Цикл
		НоваяСтрокаРезультата = ТЗРезультат.Добавить();
		НоваяСтрокаРезультата.ЗаданиеВодителю = ВыборкаПоМаршрутнымЗаданиям.МаршрутноеЗадание;
		
		НоваяСтрокаРезультата.Маршрут = ШаблонТаблицыМаршрута.СкопироватьКолонки();	
		ВыборкаПоТрекуМаршрутногоЗадания = ВыборкаПоМаршрутнымЗаданиям.Выбрать();
		Пока ВыборкаПоТрекуМаршрутногоЗадания.Следующий() Цикл
			НоваяСтрокаМаршрута = НоваяСтрокаРезультата.Маршрут.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаМаршрута, ВыборкаПоТрекуМаршрутногоЗадания);
		КонецЦикла; 
		
		НоваяСтрокаРезультата.Состав = ШаблонТаблицыСоставаМаршрутногоЗадания.СкопироватьКолонки();	
		НаборТочекМаршрута = ТаблицаТочекМаршрута.НайтиСтроки(Новый Структура("МаршрутноеЗадание", ВыборкаПоМаршрутнымЗаданиям.МаршрутноеЗадание));
		Для каждого ДанныеТочкиМаршрута Из НаборТочекМаршрута Цикл
			НоваяСтрокаСостава = НоваяСтрокаРезультата.Состав.Добавить();
			НоваяСтрокаСостава.ЗаданиеВодителю = ДанныеТочкиМаршрута.МаршрутноеЗадание;
			НоваяСтрокаСостава.НомерСтроки = ДанныеТочкиМаршрута.Порядок;
			НоваяСтрокаСостава.АдресДоставки = ДанныеТочкиМаршрута.Адрес;
			НоваяСтрокаСостава.АдресДоставкиПредставление = ДанныеТочкиМаршрута.АдресПредставление;
			НоваяСтрокаСостава.ПрибытиеПлан = ДанныеТочкиМаршрута.ПрибытиеПлан;
			НоваяСтрокаСостава.УбытиеПлан = ДанныеТочкиМаршрута.УбытиеПлан;
			НоваяСтрокаСостава.Широта = ДанныеТочкиМаршрута.Широта;
			НоваяСтрокаСостава.Долгота = ДанныеТочкиМаршрута.Долгота;
			НоваяСтрокаСостава.ИндексСостоянияПосещения = ДанныеТочкиМаршрута.ИндексСостоянияПосещения;		
		КонецЦикла;	
	КонецЦикла; 
	
	
	Возврат ТЗРезультат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкриптУдаленияСлояФакта()
	
	Возврат СкриптУдалениеВспомогательныхСлоевИВыбранногоСлоя("FactRoutesLayer");		

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкриптУдаленияСлояПланФакта()
	
	Возврат СкриптУдалениеВспомогательныхСлоевИВыбранногоСлоя("PlanFactRoutesLayer");		

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкриптУдалениеВспомогательныхСлоевИВыбранногоСлоя(ИмяСлояРендеринга)
	
	ТекстСкрипта = "geometryLayer.removeAllFeatures();
				   |markersLayer.markers.forEach(function (marker) {
				   |	if(marker.popup){
				   |		m_map.removePopup(marker.popup);
				   |		marker.popup.destroy();
				   |	}
				   |});
				   |markersLayer.clearMarkers();
				   |var find_lays3 = m_map.getLayersByName(""" + ИмяСлояРендеринга + """);
				   |if (find_lays3.length > 0) {
				   |	m_map.removeLayer(find_lays3[0]);
				   |};";
	
	
	Возврат ТекстСкрипта;		

КонецФункции

&НаСервереБезКонтекста
Функция ПланФактВнедренИВключен()
	
	ПФВнедренИВключен = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
		ПФВнедренИВключен = МодульПланФакт.ПланФактИспользуется();
	КонецЕсли;
	
	
	Возврат ПФВнедренИВключен;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРежимаПланФакт()
	
	Элементы.ПутевыеЛисты.Видимость = ПланФактВнедренИВключен();
	
КонецПроцедуры

&НаСервере
Функция ВыбратьДанныеОформленияМаршрута(ОбъектыСлежения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектыМониторинга", ОбъектыСлежения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobНастройкиОтображенияОбъектов.Объект КАК Объект,
	|	ItobНастройкиОтображенияОбъектов.ЦветМаршрутаНаКарте КАК ЦветМаршрутаНаКарте,
	|	ItobНастройкиОтображенияОбъектов.ВариантОтображенияТрека КАК ВариантОтображенияТрека,
	|	ЕСТЬNULL(ItobВариантыОтображенияТрека.СкрыватьПодписиСкорости, ЛОЖЬ) КАК СкрыватьПодписиСкорости,
	|	ЕСТЬNULL(ItobВариантыОтображенияТрека.СкрыватьСтоянки, ЛОЖЬ) КАК СкрыватьСтоянки,
	|	ЕСТЬNULL(ItobВариантыОтображенияТрека.ИспользоватьДинамическоеОтображениеТрека, ЛОЖЬ) КАК ИспользоватьДинамическоеОтображениеТрека
	|ПОМЕСТИТЬ втНастройкиОтображенияОбъектов
	|ИЗ
	|	РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobВариантыОтображенияТрека КАК ItobВариантыОтображенияТрека
	|		ПО ItobНастройкиОтображенияОбъектов.ВариантОтображенияТрека = ItobВариантыОтображенияТрека.Ссылка
	|ГДЕ
	|	ItobНастройкиОтображенияОбъектов.Объект В(&ОбъектыМониторинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНастройкиОтображенияОбъектов.ВариантОтображенияТрека КАК ВариантОтображенияТрека
	|ПОМЕСТИТЬ втВариантыОтображенияДинамическогоТрека
	|ИЗ
	|	втНастройкиОтображенияОбъектов КАК втНастройкиОтображенияОбъектов
	|ГДЕ
	|	втНастройкиОтображенияОбъектов.ИспользоватьДинамическоеОтображениеТрека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ItobШкалаДинамическогоТрека.СкоростьВерхняяГраница КАК СкоростьГраница,
	|	ItobШкалаДинамическогоТрека.ВыбранныйЦвет КАК ВыбранныйЦвет,
	|	ItobШкалаДинамическогоТрека.ВариантОтображенияТрека КАК ВариантОтображенияТрека
	|ПОМЕСТИТЬ втСокращеннаяШкала
	|ИЗ
	|	РегистрСведений.ItobШкалаДинамическогоТрека КАК ItobШкалаДинамическогоТрека
	|ГДЕ
	|	ItobШкалаДинамическогоТрека.ВариантОтображенияТрека В
	|			(ВЫБРАТЬ
	|				втВариантыОтображенияДинамическогоТрека.ВариантОтображенияТрека
	|			ИЗ
	|				втВариантыОтображенияДинамическогоТрека КАК втВариантыОтображенияДинамическогоТрека)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСокращеннаяШкала_ВерхняяГраница.СкоростьГраница КАК СкоростьВерхняяГраница,
	|	втСокращеннаяШкала_ВерхняяГраница.ВыбранныйЦвет КАК ВыбранныйЦвет,
	|	ЕСТЬNULL(МАКСИМУМ(втСокращеннаяШкала_НижняяГраница.СкоростьГраница), 0) КАК СкоростьНижняяГраница,
	|	втСокращеннаяШкала_ВерхняяГраница.ВариантОтображенияТрека КАК ВариантОтображенияТрека
	|ИЗ
	|	втСокращеннаяШкала КАК втСокращеннаяШкала_ВерхняяГраница
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСокращеннаяШкала КАК втСокращеннаяШкала_НижняяГраница
	|		ПО втСокращеннаяШкала_ВерхняяГраница.СкоростьГраница > втСокращеннаяШкала_НижняяГраница.СкоростьГраница
	|
	|СГРУППИРОВАТЬ ПО
	|	втСокращеннаяШкала_ВерхняяГраница.ВыбранныйЦвет,
	|	втСокращеннаяШкала_ВерхняяГраница.ВариантОтображенияТрека,
	|	втСокращеннаяШкала_ВерхняяГраница.СкоростьГраница
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантОтображенияТрека,
	|	СкоростьВерхняяГраница
	|ИТОГИ ПО
	|	ВариантОтображенияТрека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНастройкиОтображенияОбъектов.Объект КАК Объект,
	|	втНастройкиОтображенияОбъектов.ЦветМаршрутаНаКарте КАК ЦветМаршрутаНаКарте,
	|	втНастройкиОтображенияОбъектов.ВариантОтображенияТрека КАК ВариантОтображенияТрека,
	|	втНастройкиОтображенияОбъектов.СкрыватьПодписиСкорости КАК СкрыватьПодписиСкорости,
	|	втНастройкиОтображенияОбъектов.СкрыватьСтоянки КАК СкрыватьСтоянки,
	|	втНастройкиОтображенияОбъектов.ИспользоватьДинамическоеОтображениеТрека КАК ИспользоватьДинамическоеОтображениеТрека
	|ИЗ
	|	втНастройкиОтображенияОбъектов КАК втНастройкиОтображенияОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект";
	
	ИндексРезультата_ПолнаяШкала = 3;
	ИндексРезультата_НастройкиОтображения = 4;
	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШкалыВариантовОтображенияТрека = НаборРезультатов[ИндексРезультата_ПолнаяШкала].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаНастроекОтображения = НаборРезультатов[ИндексРезультата_НастройкиОтображения].Выбрать();
	
	
	Возврат Новый Структура("ВыборкаШкалыВариантовОтображенияТрека, ВыборкаНастроекОтображения",
							ВыборкаШкалыВариантовОтображенияТрека,
							ВыборкаНастроекОтображения);
	
КонецФункции
 
// Функция возвращает текст скрипта отображения маршрута объектов.
//
&НаСервере
Функция ПолучитьСкриптМаршрутыОбъектов(Знач сткПараметры, МассивПробегов = Неопределено)
	
	МассивОбъектов           = сткПараметры.МассивОбъектов;
	НачДата                  = сткПараметры.НачДата;
	КонДата                  = сткПараметры.КонДата;
	ВывестиНарушенияВождения = сткПараметры.ПоказыватьНарушенияВождения;
	ВывестиПлановыйМаршрут   = сткПараметры.ПоказыватьПлановыйМаршрут;
	ГеокодироватьАдреса = Истина;
	Если сткПараметры.Свойство("ГеокодироватьАдреса") Тогда
		ГеокодироватьАдреса = сткПараметры.ГеокодироватьАдреса;	
	КонецЕсли;
	МаршрутноеЗадание       = Неопределено;
	Если сткПараметры.Свойство("МаршрутноеЗадание") Тогда
		МаршрутноеЗадание = сткПараметры.МаршрутноеЗадание;	
	КонецЕсли;
	ИмяСлояРендеринга = "FactRoutesLayer";
	Если сткПараметры.Свойство("ИмяСлояРендеринга") Тогда
		ИмяСлояРендеринга = сткПараметры.ИмяСлояРендеринга;
	КонецЕсли;
	
	ОтображатьДанныеТерминалаВТреке = Ложь;
	Если сткПараметры.Свойство("ОтображатьДанныеТерминалаВТреке") Тогда
		ОтображатьДанныеТерминалаВТреке =  сткПараметры.ОтображатьДанныеТерминалаВТреке;
	КонецЕсли;

	ФлагФиксироватьКарту  = сткПараметры.ФиксироватьКарту;
	СсылкаНаВебСервер     = сткПараметры.ВебСсылкаСервер;
	
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
	СостояниеСтоянка  = Перечисления.ItobСостоянияТерминалов.Стоянка;
	СостояниеДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	
	МасштабыОбъектовНаКарте = ItobОбщегоНазначения.МасштабыОбъектовНаКарте();
	МасштабСлужебныхОбъектов = МасштабыОбъектовНаКарте["МасштабСлужебныхОбъектов"];
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("playRouteLayer.removeAllFeatures();
						 |var Features = [];
						 |var ParkingLabels = [];
						 |");
	
	Если ВывестиНарушенияВождения Тогда
		МассивСтрок.Добавить("registration_of_driving_violations();
							 |");
	Иначе 
		МассивСтрок.Добавить("off_registration_of_driving_violations();
							 |");
	КонецЕсли; 
	
	МассивСтрок.Добавить(СкриптУдалениеВспомогательныхСлоевИВыбранногоСлоя(ИмяСлояРендеринга));
		
	ТабМаршрутовДляРендера = ItobРаботаСРендеромCSM.ПолучитьШаблонТаблицыМаршрутов();	
	
	ГеоРамка = Новый Структура("Широта0,Широта1,Долгота0,Долгота1", 1000, -1000, 1000, -1000);
	
	УникальныеТочки = Новый Массив;
	
	ОбъектыСлежения = Новый Массив;
	Терминалы = Новый Массив;
	
	Для каждого ВыбранныйОбъектСлежения Из МассивОбъектов Цикл
		ОбъектыСлежения.Добавить(ВыбранныйОбъектСлежения.Объект);
		Терминалы.Добавить(ВыбранныйОбъектСлежения.Терминал);
	КонецЦикла;
	
	ЦветФактМаршрутаДесятичныйИзНастроекОтображения = Неопределено;
	ЦветПлановогоМаршрутаДесятичный = Неопределено;
	
	
	ОбщаяГрадуированнаяШкалаДинамическогоТрека = Неопределено;
	ДанныеОбщегоВариантаОтображенияТрека = Неопределено;
	ТекущийРежимГрупповогоОтображения = ТекущийРежимГрупповогоОтображения();
	Если ТекущийРежимГрупповогоОтображения = "ИгнорироватьВариантыОтображенияТрека" Тогда
		СвояНастройкаОтображенияТрекаУКаждогоОбъекта = Ложь;
	ИначеЕсли ТипЗнч(ТекущийРежимГрупповогоОтображения) = Тип("СправочникСсылка.ItobВариантыОтображенияТрека")
			  И ЗначениеЗаполнено(ТекущийРежимГрупповогоОтображения) Тогда
			  
		СвояНастройкаОтображенияТрекаУКаждогоОбъекта = Ложь;
		
		ОбщаяШкалаДинамическогоТрека = РегистрыСведений.ItobШкалаДинамическогоТрека.ПолнаяШкалаВариантовОтображенияТрека(
											ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийРежимГрупповогоОтображения));
		ОбщаяГрадуированнаяШкалаДинамическогоТрека = РегистрыСведений.ItobШкалаДинамическогоТрека.ГрадуироватьШкалуПоСкорости(ОбщаяШкалаДинамическогоТрека);
		
		ДанныеОбщегоВариантаОтображенияТрека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийРежимГрупповогоОтображения, 
																						  "СкрыватьПодписиСкорости, СкрыватьСтоянки, ИспользоватьДинамическоеОтображениеТрека");	
	Иначе
		// Незаполненное значение также считаем значением "ПоУмолчанию".
		СвояНастройкаОтображенияТрекаУКаждогоОбъекта = Истина;
	КонецЕсли; 
		
	ВыборкиОформления = ВыбратьДанныеОформленияМаршрута(ОбъектыСлежения);
	ВыборкаШкалыВариантовОтображенияТрека = ВыборкиОформления.ВыборкаШкалыВариантовОтображенияТрека;
	ВыборкаНастроекОтображения = ВыборкиОформления.ВыборкаНастроекОтображения;
	
	ТаблицаШкалыОтображенияТрекаШаблон = РегистрыСведений.ItobШкалаДинамическогоТрека.ШаблонШкалы();
	
	ПакетДанныхДатчиковПоТерминалам = ПакетЗапросовДатчикиТерминаловИПоказателиКалибровочныхГрафиков(Терминалы);
	ИндексВыборкиПоДатчикам = 0;
	ИндексВыборкиПоКалибровочнымГрафикам = 1;
	
	ВыборкаДатчикиТерминалов = ПакетДанныхДатчиковПоТерминалам[ИндексВыборкиПоДатчикам].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКалибровочныеГрафики = ПакетДанныхДатчиковПоТерминалам[ИндексВыборкиПоКалибровочнымГрафикам].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТипДатчикаДискретный = Перечисления.ItobТипыДатчиков.Дискретный;
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива].Объект;
		ТекущийТерминал = МассивОбъектов[ИндексМассива].Терминал;
		ТекущийОбъектПредставление = МассивОбъектов[ИндексМассива].ОбъектПредставление;
		
		Если ОтображатьДанныеТерминалаВТреке Тогда
			ДатчикиТерминала = ДатчикиТерминала(ВыборкаДатчикиТерминалов, ТекущийТерминал, ТипДатчикаДискретный);
			Датчики = Новый Массив;
			Для каждого ДанныеДатчика Из ДатчикиТерминала Цикл
				Датчики.Добавить(ДанныеДатчика.Датчик);	
			КонецЦикла;
			ИнтервалыДвиженияФактическогоМаршрута = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(ТекущийОбъект, НачДата, КонДата, ГеокодироватьАдреса, Датчики);
			
		Иначе
			ИнтервалыДвиженияФактическогоМаршрута = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(ТекущийОбъект, НачДата, КонДата, ГеокодироватьАдреса);		
		КонецЕсли;
		
		Если ИнтервалыДвиженияФактическогоМаршрута.Количество() = 0 Тогда		
			Продолжить;
		КонецЕсли;
			
		ЦветФактМаршрутаДесятичныйИзНастроекОтображения = 0;
		СкрыватьПодписиСкорости = Ложь;
		СкрыватьСтоянки = Ложь;
		ВНастройкахВариантаВключеноДинамическоеОтображениеТрека = Ложь;
		ТекущийВариантОтображенияТрека = Неопределено;
		ВыборкаНастроекОтображения.Сбросить();
		Если ВыборкаНастроекОтображения.НайтиСледующий(ТекущийОбъект, "Объект") Тогда
			ЦветФактМаршрутаДесятичныйИзНастроекОтображения = ВыборкаНастроекОтображения.ЦветМаршрутаНаКарте;
			
			Если СвояНастройкаОтображенияТрекаУКаждогоОбъекта Тогда
				ТекущийВариантОтображенияТрека = ВыборкаНастроекОтображения.ВариантОтображенияТрека;
				ВНастройкахВариантаВключеноДинамическоеОтображениеТрека = ВыборкаНастроекОтображения.ИспользоватьДинамическоеОтображениеТрека;
				СкрыватьПодписиСкорости = ВыборкаНастроекОтображения.СкрыватьПодписиСкорости;
				СкрыватьСтоянки = ВыборкаНастроекОтображения.СкрыватьСтоянки;	
			КонецЕсли; 			
		КонецЕсли; 
				
		Если НЕ ДанныеОбщегоВариантаОтображенияТрека = Неопределено Тогда
			ТекущийВариантОтображенияТрека = ТекущийРежимГрупповогоОтображения;
			ВНастройкахВариантаВключеноДинамическоеОтображениеТрека = ДанныеОбщегоВариантаОтображенияТрека.ИспользоватьДинамическоеОтображениеТрека;
			СкрыватьПодписиСкорости = ДанныеОбщегоВариантаОтображенияТрека.СкрыватьПодписиСкорости;
			СкрыватьСтоянки = ДанныеОбщегоВариантаОтображенияТрека.СкрыватьСтоянки;
		КонецЕсли; 
		
		ГрадуированнаяШкалаДинамическогоТрека = Неопределено;
		
		Если НЕ ОбщаяГрадуированнаяШкалаДинамическогоТрека = Неопределено
			 И ВНастройкахВариантаВключеноДинамическоеОтображениеТрека Тогда			 
			 
			ГрадуированнаяШкалаДинамическогоТрека = ОбщаяГрадуированнаяШкалаДинамическогоТрека;	
		КонецЕсли;
		
		ВыборкаШкалыВариантовОтображенияТрека.Сбросить();
		Если СвояНастройкаОтображенияТрекаУКаждогоОбъекта
			 И ВНастройкахВариантаВключеноДинамическоеОтображениеТрека
			 И ЗначениеЗаполнено(ТекущийВариантОтображенияТрека)
			 И ВыборкаШкалыВариантовОтображенияТрека.НайтиСледующий(ТекущийВариантОтображенияТрека, "ВариантОтображенияТрека") Тогда
			 
			ТаблицаШкалыОтображенияТрека = ТаблицаШкалыОтображенияТрекаШаблон.СкопироватьКолонки(); 
			ВыборкаДеталиШкалы = ВыборкаШкалыВариантовОтображенияТрека.Выбрать();
			Пока ВыборкаДеталиШкалы.Следующий() Цикл
				НовСтрокаШкалы = ТаблицаШкалыОтображенияТрека.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаШкалы, ВыборкаДеталиШкалы);
			КонецЦикла;
			
			ГрадуированнаяШкалаДинамическогоТрека = РегистрыСведений.ItobШкалаДинамическогоТрека.ГрадуироватьШкалуПоСкорости(ТаблицаШкалыОтображенияТрека);
		КонецЕсли; 
		
		 
		ЗаменитьОбычноеОтображениеТрекаДинамическим = (НЕ ГрадуированнаяШкалаДинамическогоТрека = Неопределено);
				
		МассивСтрок.Добавить("var pointList = [];
							 |var pt = null;");
		
		
		СтрМаршрутаДляРендера = ТабМаршрутовДляРендера.Добавить();
		СтрМаршрутаДляРендера.НомерМаршрута = Формат(ТабМаршрутовДляРендера.Индекс(СтрМаршрутаДляРендера) + 1, "ЧГ=0");
		СтрМаршрутаДляРендера.ЦветМаршрута = Формат(ЦветФактМаршрутаДесятичныйИзНастроекОтображения, "ЧН=0; ЧГ=0");
		СтрМаршрутаДляРендера.РазмерУказателяНаправления = Цел(5 * МасштабыОбъектовНаКарте["МасштабУказателяНаправления"]);
		СтрМаршрутаДляРендера.СписокТочек = ItobРаботаСРендеромCSM.ПолучитьШаблонТаблицыТочек();	
		СтрМаршрутаДляРендера.СписокКартинок = Новый ТаблицаЗначений;
		
		НомерСтоянки = 1;
		ПредыдущаяТочка = Неопределено;
		ЦветМаршрутаПредыдущейТочкиДесятичный = Неопределено;
		ЦветМаршрутаТекущейТочкиДесятичный = Неопределено;
		ЦветМаршрутаТекущейТочкиХекс = Неопределено;
		Для каждого СтрокаФактическогоИнтервала Из ИнтервалыДвиженияФактическогоМаршрута Цикл			
			Для СчетчикК = 0 По СтрокаФактическогоИнтервала.ДанныеТерминала.Количество()-1 Цикл				
				ТекущаяШирота  = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Широта;
				ТекущаяДолгота = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Долгота;
				
				Если ТекущаяДолгота = Неопределено ИЛИ ТекущаяШирота = Неопределено Тогда					
					Продолжить;					
				КонецЕсли;				
				Если ТекущаяДолгота = 0	ИЛИ ТекущаяШирота = 0 Тогда					
					Продолжить;					
				КонецЕсли;
				
				Если НЕ ФлагФиксироватьКарту Тогда
					ГеоРамка.Широта0  = Мин(ГеоРамка.Широта0,ТекущаяШирота);
					ГеоРамка.Широта1  = Макс(ГеоРамка.Широта1,ТекущаяШирота);
					ГеоРамка.Долгота0 = Мин(ГеоРамка.Долгота0,ТекущаяДолгота);
					ГеоРамка.Долгота1 = Макс(ГеоРамка.Долгота1,ТекущаяДолгота);				
				КонецЕсли;				
				
				ДобавитьТочкуМаршрута = Истина;
				Если НЕ ПредыдущаяТочка = Неопределено 
					 И ПредыдущаяТочка.Широта = ТекущаяШирота
					 И ПредыдущаяТочка.Долгота = ТекущаяДолгота Тогда
					ДобавитьТочкуМаршрута = Ложь;				
				КонецЕсли;
				
				Если ДобавитьТочкуМаршрута Тогда
					ЦветМаршрутаТекущейТочкиДесятичный = ЦветФактМаршрутаДесятичныйИзНастроекОтображения;
					Если ЗаменитьОбычноеОтображениеТрекаДинамическим Тогда	
						ЦветМаршрутаТекущейТочкиДесятичный = 
								РегистрыСведений.ItobШкалаДинамическогоТрека.
									ЗначениеЦветаДляСкоростиПоГрадуированнойШкале(ГрадуированнаяШкалаДинамическогоТрека,
																				  Окр(СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Скорость, 0));
					КонецЕсли; 
					
					Если НЕ ЦветМаршрутаТекущейТочкиДесятичный = ЦветМаршрутаПредыдущейТочкиДесятичный
						 ИЛИ ЦветМаршрутаТекущейТочкиХекс = Неопределено Тогда
						 
						// Меняем основание числа только тогда, когда это требуется (чтобы не пересчитывать для каждой точки трека). 
						ЦветМаршрутаТекущейТочкиХекс = ItobОбщегоНазначенияКлиентСервер.ДесятичныйЦветВШестнадцатеричный(ЦветМаршрутаТекущейТочкиДесятичный);	
					КонецЕсли;
										
					СтрТочкаМаршрута = СтрМаршрутаДляРендера.СписокТочек.Добавить();
					СтрТочкаМаршрута.Широта = ТекущаяШирота;
					СтрТочкаМаршрута.Долгота = ТекущаяДолгота;
					Если СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Скорость > 0
						 И НЕ СкрыватьПодписиСкорости Тогда
						 
						СтрТочкаМаршрута.Название = Строка(СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Скорость) + " км/ч";
					КонецЕсли;					
					СтрТочкаМаршрута.Направление = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Направление;
					СтрТочкаМаршрута.ЦветУчастка = ?(ЗаменитьОбычноеОтображениеТрекаДинамическим, 
													 Формат(ЦветМаршрутаТекущейТочкиДесятичный, "ЧН=0; ЧГ=0"), 
													 Неопределено);
					
					ЦветМаршрутаПредыдущейТочкиДесятичный = ЦветМаршрутаТекущейТочкиДесятичный;
					ПредыдущаяТочка = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК];
						
					Если ОтображатьДанныеТерминалаВТреке Тогда		
						ДанныеДатчиковТерминала = Новый Структура;
						Для каждого Датчик Из ДатчикиТерминала Цикл
							КодДатчика = XMLСтрока(Датчик.Код);
							НаименованиеДатчика = Датчик.Назначение;
							ПредставлениеДатчикаВТаблице = СтрШаблон("ЗначениеДатчика%1", КодДатчика);
							ДанныеДатчика = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК][ПредставлениеДатчикаВТаблице];
							
							ПреобразованноеЗначениеДатчика = ПреобразованноеЗначениеДатчика(ДанныеДатчика,
																							Датчик,
																							ВыборкаКалибровочныеГрафики,
																							Датчик.ВыборкаРасшифровкиЗначенийДискретногоДатчика);
							
							ДанныеДатчиковТерминала.Вставить(ПредставлениеДатчикаВТаблице, СтрШаблон("%1: %2", НаименованиеДатчика, ПреобразованноеЗначениеДатчика));
						КонецЦикла;
						
						Если НЕ СтрокаФактическогоИнтервала.Состояние = СостояниеСтоянка
							 ИЛИ СкрыватьСтоянки Тогда		
							 
							// Для стоянок свое окно с информацией (другой стиль). Поэтому если отображается стоянка - не рисуем popup. 
							 
							// УникальныеТочки будут добавлены на слой waypoints_layer, для каждой будет выводится popup с данными
							ИдентификаторТочки = Новый УникальныйИдентификатор;
							ПараметрыУникальнойТочки = Новый Структура;
							ПараметрыУникальнойТочки.Вставить("Lon", ТекущаяДолгота);
							ПараметрыУникальнойТочки.Вставить("Lat", ТекущаяШирота);
							ПараметрыУникальнойТочки.Вставить("pointid", XMLСтрока(ИдентификаторТочки));
							ПараметрыУникальнойТочки.Вставить("color", СтрШаблон("#%1", ЦветМаршрутаТекущейТочкиХекс)); 
							УникальныеТочки.Добавить(ПараметрыУникальнойТочки);
							
							ДанныеПоТекущейТочкеМаршрута = ДанныеПоТочкамМаршрута.Добавить();
							ДанныеПоТекущейТочкеМаршрута.ЭтоСтоянка = Ложь;
							ДанныеПоТекущейТочкеМаршрута.Широта = ТекущаяШирота;
							ДанныеПоТекущейТочкеМаршрута.Долгота = ТекущаяДолгота;
							ДанныеПоТекущейТочкеМаршрута.Скорость = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Скорость;
							ДанныеПоТекущейТочкеМаршрута.Пробег = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Пробег;
							ДанныеПоТекущейТочкеМаршрута.Направление = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Направление;
							ДанныеПоТекущейТочкеМаршрута.ИдентификаторТочки = XMLСтрока(ИдентификаторТочки);
							ДанныеПоТекущейТочкеМаршрута.ДанныеДатчиковВТочке = ДанныеДатчиковТерминала;
							ДанныеПоТекущейТочкеМаршрута.Дата = СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Период;
							ДанныеПоТекущейТочкеМаршрута.ОбъектСлежения = ТекущийОбъектПредставление;
							
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
				
				Если НЕ СкрыватьСтоянки
					 И СтрокаФактическогоИнтервала.Состояние = СостояниеСтоянка Тогда
					 
					ТекущееМестоСтоянки = ЭкранироватьКавычкиДляHTML(СтрокаФактическогоИнтервала.МестоСтоянки);
					
					ПолныеДаты = НачалоДня(НачДата) <> НачалоДня(КонДата);
					НомерСтоянкиЗаголовок = НСтр("ru = 'Стоянка №'") + " " + НомерСтоянки + " (" + ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(СтрокаФактическогоИнтервала.Длительность) + ")";
					АдресСтоянки = "Адрес: " + ТекущееМестоСтоянки;
					ПериодСтоянки = "С " + Формат(СтрокаФактическогоИнтервала.ВремяНач, ?(ПолныеДаты, "ДФ='dd.MM.yy HH:mm'", "ДФ=HH:mm")) +
									" по " + Формат(СтрокаФактическогоИнтервала.ВремяКон, ?(ПолныеДаты, "ДФ='dd.MM.yy HH:mm'", "ДФ=HH:mm"));
					ДанныеПодписиСтоянки = ДанныеПодписиСтоянки(СтрокаФактическогоИнтервала.Длительность);
					
					ИнформацияОСтоянкеJSON = Новый Структура;
					ИнформацияОСтоянкеJSON.Вставить("Parkingnumber", НомерСтоянкиЗаголовок);
					ИнформацияОСтоянкеJSON.Вставить("Parking", Истина);
					ИнформацияОСтоянкеJSON.Вставить("Geocoded", ГеокодироватьАдреса);
					ИнформацияОСтоянкеJSON.Вставить("Address", АдресСтоянки);
					ИнформацияОСтоянкеJSON.Вставить("Period", ПериодСтоянки);
					ИнформацияОСтоянкеJSON.Вставить("TrackingObject", ТекущийОбъектПредставление);
					
					ДанныеДатчиковДляОтправки = Новый Массив;
					
					Если ОтображатьДанныеТерминалаВТреке Тогда
						Для каждого ДанныеДатчика Из ДанныеДатчиковТерминала Цикл
							ДанныеДатчиковДляОтправки.Добавить(ДанныеДатчика.Значение); 
						КонецЦикла; 						
					КонецЕсли;
					
					ИнформацияОСтоянкеJSON.Вставить("Sensors", ДанныеДатчиковДляОтправки);
					
					ЗаписьJSON = Новый ЗаписьJSON;
					ЗаписьJSON.УстановитьСтроку();
					ЗаписатьJSON(ЗаписьJSON, ИнформацияОСтоянкеJSON);
					ИнформацияОСтоянкеJSON = ЗаписьJSON.Закрыть();
					
					ВысотаОкнаДеталей = 100 + Макс(0,Окр((СтрДлина(ТекущееМестоСтоянки)-15)/25+0.499,0))*20;
					ВысотаОкнаДеталей = Формат(ВысотаОкнаДеталей,"ЧГ=0");
					
					ШиротаСтоянкиСтр = ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота);
					ДолготаСтоянкиСтр = ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота);
					РазмерИконкиСтоянка = РазмерИконкиНаКарте(23, 23, МасштабСлужебныхОбъектов); 	

					МассивСтрок.Добавить(
						"pt = new OpenLayers.LonLat(" + ДолготаСтоянкиСтр + ", " + ШиротаСтоянкиСтр + ");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|var size = new OpenLayers.Size(" + РазмерИконкиСтоянка + ");
						|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
						|var icon = new OpenLayers.Icon('" + СсылкаНаВебСервер + "images/parking.svg',size,offset);
						|
						|marker = new OpenLayers.Marker(pt,icon);
						|
						|marker.events.on({
						|	""mousedown"": function(event) {
						|		if (this.popup == null) {
						|			var pt = new OpenLayers.LonLat("+ДолготаСтоянкиСтр+", "+ ШиротаСтоянкиСтр+");
						|			pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|			this.popup = new OpenLayers.Popup(""chicken"",
						|			pt,
						|			new OpenLayers.Size(250," + ВысотаОкнаДеталей + "),
						|			SetHTMLContenForWaypointPopup(" + ИнформацияОСтоянкеJSON + "),
						|			true);
						|			m_map.addPopup(this.popup);
						|			this.popup.updateSize();
						|			this.popup.show();
						|		} else {
						|			this.popup.toggle();
						|		}
						|		currentPopup = this.popup;
						|		currentPopup.autoSize = true;
						|		OpenLayers.Event.stop(event);
						|	}
						|});
						|markersLayer.addMarker(marker);
						|");
					
					Если СтрокаФактическогоИнтервала.Длительность > 59 Тогда
						МассивСтрок.Добавить(
							"ParkingLabels.push(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),
							|	{},{
							|		fontSize: ""9px"",
							|		fontWeight: ""bolder"",
							|		fontColor: ""#121010"",
							|		labelXOffset: (size.w/2 + 5),
							|		labelAlign: ""lm"",
							|		labelYOffset: 12,
							|		labelOutlineColor: ""white"",
							|		labelOutlineWidth: 4,
							|		graphicXOffset: (size.w/2 + 1),
							|		graphicYOffset: -23,
							|		graphicHeight: 23,
							|		graphicWidth: " + ДанныеПодписиСтоянки.ШиринаПодписи + ",
							|		externalGraphic: """ + СсылкаНаВебСервер + "images/parkinglabel.png"", 
							|		label : """ + ДанныеПодписиСтоянки.ДлительностьСтоянкиПредставление + """
							|}));
							|");
					КонецЕсли;
					
					НомерСтоянки = НомерСтоянки+1;
					Прервать;
					
				Иначе
					
					Если НЕ МассивПробегов=Неопределено Тогда
						МассивПробегов[ИндексМассива] = МассивПробегов[ИндексМассива]+СтрокаФактическогоИнтервала.ДанныеТерминала[СчетчикК].Пробег;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		МассивСтрок.Добавить("geometryLayer.addFeatures(ParkingLabels);
							 |");
		
		Если СтрМаршрутаДляРендера.СписокТочек.Количество()=0 Тогда
			ТабМаршрутовДляРендера.Удалить(СтрМаршрутаДляРендера);
		КонецЕсли;
		
		Если ВывестиНарушенияВождения Тогда
			ЗапросНарушения = Новый Запрос;
			ЗапросНарушения.УстановитьПараметр("Терминал", ТекущийТерминал);
			ЗапросНарушения.УстановитьПараметр("ПериодС", ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(НачДата));
			ЗапросНарушения.УстановитьПараметр("ПериодПо", ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(КонДата));
			ЗапросНарушения.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
			ЗапросНарушения.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
			ЗапросНарушения.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);
			ЗапросНарушения.Текст =
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НарушенияВождения.ПериодНачалаНарушения, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
			|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
			|				ТОГДА ВЫБОР
			|						КОГДА НарушенияВождения.ПериодНачалаНарушения МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НарушенияВождения.ПериодНачалаНарушения, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НарушенияВождения.ПериодНачалаНарушения, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
			|							ТОГДА &СдвигЛетнееВремя
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
			|				ТОГДА ВЫБОР
			|						КОГДА НарушенияВождения.ПериодНачалаНарушения МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НарушенияВождения.ПериодНачалаНарушения, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НарушенияВождения.ПериодНачалаНарушения, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
			|							ТОГДА &СдвигЛетнееВремя
			|						ИНАЧЕ 0
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДатаВремя,
			|	НарушенияВождения.ШиротаНачалаНарушения КАК Широта,
			|	НарушенияВождения.ДолготаНачалаНарушения КАК Долгота,
			|	НарушенияВождения.КритерийНарушения КАК КритерийНарушения,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НарушенияВождения.КритерийНарушения) КАК КритерийНарушенияПредставление,
			|	НарушенияВождения.УсловиеНарушения КАК УсловиеНарушения,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НарушенияВождения.УсловиеНарушения) КАК УсловиеНарушенияПредставление,
			|	НарушенияВождения.Штраф КАК Штраф,
			|	НарушенияВождения.КритерийНарушения.ИконкаНаКарте КАК ИконкаНаКарте,
			|	НарушенияВождения.ПериодНачалаНарушения КАК ПериодUTC0
			|ИЗ
			|	РегистрСведений.ItobЗафиксированныеИнтервалыНарушенийВождения КАК НарушенияВождения
			|ГДЕ
			|	НарушенияВождения.Терминал = &Терминал
			|	И НарушенияВождения.Активность
			|	И НарушенияВождения.ПериодНачалаНарушения МЕЖДУ &ПериодС И &ПериодПо";
				
			ВыборкаНарушения = ЗапросНарушения.Выполнить().Выбрать();
			
			Пока ВыборкаНарушения.Следующий() Цикл
				ВысотаОкнаДеталей = 100;
				НадписьHTML =
				"<font style=\""font-size:11px;font-family:Tahoma, Geneva, sans-serif\"">" +
				"<b>Период: " + Формат(ВыборкаНарушения.ДатаВремя, "ДФ='dd.MM.yyyy HH:mm:ss'") + "</b><br />" +
				"Критерий нарушения: " + ВыборкаНарушения.КритерийНарушенияПредставление + "<br />" +
				"Условие: " + ВыборкаНарушения.УсловиеНарушенияПредставление + "<br />" +
				"Штраф: " + ВыборкаНарушения.Штраф +
				"<br /></font>";
				
				РазмерИконкиНарушения = РазмерИконкиНаКарте(24, 24, МасштабСлужебныхОбъектов);
				МассивСтрок.Добавить(
					"pt = new OpenLayers.LonLat(" + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаНарушения.Долгота) +
					", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаНарушения.Широта) + ");
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|var clazz = """ + ВыборкаНарушения.КритерийНарушенияПредставление + """;
					|var pic = """ + СсылкаНаВебСервер + "images/" + ПолучитьИмяИконки(ВыборкаНарушения.ИконкаНаКарте) + """;
					|cluster_features.push(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat), 
					|	{clazz: clazz, pic: pic, content: """ + НадписьHTML +"""},{
					|	graphicWidth: 24,
					|	graphicHeight: 24,
					|	graphicXOffset: -12,
					|	graphicYOffset: -12,
					|	externalGraphic: """ + СсылкаНаВебСервер + "images/" + ПолучитьИмяИконки(ВыборкаНарушения.ИконкаНаКарте) + """}));
					|");			
			КонецЦикла;		
		КонецЕсли;
		
		Если ВывестиПлановыйМаршрут Тогда
			ТЗЗадания = НайтиЗаданияВодителю(ТекущийОбъект, НачДата, КонДата, МаршрутноеЗадание);
			Для каждого СтрокаЗаданиеВодителю Из ТЗЗадания Цикл
				МассивСтрок.Добавить(
					"
					|// PLAN ROUTES
					|var pointList2 = [];");
				
				Для каждого СтрМаршрут Из СтрокаЗаданиеВодителю.Маршрут Цикл
					МассивСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"					
						|pt = new OpenLayers.LonLat(%1,%2);
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|pointList2.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));",
						ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрМаршрут.Долгота),
						ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрМаршрут.Широта))
					);				
				КонецЦикла;
					
				НомерПункта = 1;					
				Для каждого СтрСостав Из СтрокаЗаданиеВодителю.Состав Цикл
					ТекущийАдресДоставкиПредставление = ЭкранироватьКавычкиДляHTML(СтрСостав.АдресДоставкиПредставление);
					
					НадписьHTML = "<div style=""font:Courier New; font-size:11px; width:190px; height:90px; text-align:left; word-wrap:break-word;"">"
								  + "<b>Пункт № "+НомерПункта+"</b><br>"
								  + "Адрес: " + ТекущийАдресДоставкиПредставление + "<br>"
								  + "Время с "+Формат(СтрСостав.ПрибытиеПлан,"ДФ=HH:mm")+" по "+Формат(СтрСостав.УбытиеПлан,"ДФ=HH:mm")+"</div>";
								  
					ИмяИконки = ИмяИконкиПунктаПоСтрокеСостава(СтрСостав);
					РазмерИконкиПунктаПоСтрокеСостава = РазмерИконкиНаКарте(21, 25, МасштабСлужебныхОбъектов);
					ВысотаОкнаДеталей = 100 + Макс(0,Окр((СтрДлина(ТекущийАдресДоставкиПредставление)-15)/25+0.499,0))*20;
					ВысотаОкнаДеталей = Формат(ВысотаОкнаДеталей,"ЧГ=0");
					
					МассивСтрок.Добавить(
						"pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Долгота)
							+ ", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Широта) + ");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|var size = new OpenLayers.Size(" + РазмерИконкиПунктаПоСтрокеСостава + ");
						|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
						|var icon = new OpenLayers.Icon('"+СсылкаНаВебСервер+"img/"+ ИмяИконки +"',size,offset);
						|
						|marker = new OpenLayers.Marker(pt,icon);
						|
						|marker.events.on({
						|	""mousedown"": function(event) {
						|if (this.popup == null) {
						|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Долгота)
							+ ", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСостав.Широта) + ");
						|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());			
						|	this.popup = new OpenLayers.Popup(""chicken"",
						|		pt,
						|		new OpenLayers.Size(200," + ВысотаОкнаДеталей + "),
						|		'"+НадписьHTML+"'"+",			             
						|		true);
						|	this.popup.autoSize = true;
						|	m_map.addPopup(this.popup);
						|	this.popup.updateSize();
						|	this.popup.show();
						|} else {
						|	this.popup.toggle();
						|}
						|	OpenLayers.Event.stop(event); 			
						|}			
						|});
						|	markersLayer.addMarker(marker);
						|");
						
					НомерПункта = НомерПункта+1;	
				КонецЦикла;				
				
				ЦветПлановогоМаршрутаДесятичный = 0;
				Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
					МодульItobПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
					ЦветПлановогоМаршрутаДесятичный = МодульItobПланФакт.ПодобратьЦветПлановогоМаршрута(МаршрутноеЗадание, 
																										ЦветФактМаршрутаДесятичныйИзНастроекОтображения); 
				КонецЕсли; 
				
				ЦветПлановогоМаршрута16 = ItobОбщегоНазначенияКлиентСервер.ДесятичныйЦветВШестнадцатеричный(ЦветПлановогоМаршрутаДесятичный);
				
				МассивСтрок.Добавить(
					"var LineString = new OpenLayers.Geometry.LineString(pointList2);
					|var lineFeature = new OpenLayers.Feature.Vector(
					|                LineString,null,{
					|                strokeColor: ""#" + ЦветПлановогоМаршрута16 + """,
					|                strokeWidth: 3,
					|				 strokeOpacity: 0.8,
					|                strokeDashstyle: ""solid"",
					|				 strokeLinecap: ""round"",
					|                pointRadius: 6,
					|                pointerEvents: ""visiblePainted""
					|});
					|var find_lays = m_map.getLayersByName(""Geometry"");
					|var vectorLayer = null;
					|if (find_lays.length == 0) {
					|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
					|	m_map.addLayer(vectorLayer);
					|}
					|else {vectorLayer = find_lays[0];}
					|Features.push(lineFeature);
					|geometryLayer.addFeatures(Features);
				    |");
			
			КонецЦикла;						
		
		КонецЕсли;					
	
	КонецЦикла;
	
	Если ТабМаршрутовДляРендера.Количество()>0 
		 И ТабМаршрутовДляРендера[0].СписокТочек.Количество() > 0 Тогда
		
		Если НЕ ПустаяСтрока(НомерПрофиляСлойМаршрутов) Тогда
			ItobРаботаСРендеромCSMВызовСервера.ОчиститьДанныеПрофиля(НомерПрофиляСлойМаршрутов);	
		КонецЕсли;
		
		ТекстДопСкрипта = "";
		НомерПрофиляСлойМаршрутов = "";
		РезультатРендерингаМаршрутов = ItobРаботаСРендеромCSM.ВыполнитьРендерингПоТаблицеМаршрутов(ТабМаршрутовДляРендера, ТекстДопСкрипта, ИмяСлояРендеринга, НомерПрофиляСлойМаршрутов);  
		Если НЕ РезультатРендерингаМаршрутов Тогда
			ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю("Ошибка рендеринга маршрута");
		Иначе
			МассивСтрок.Добавить(ТекстДопСкрипта);
		КонецЕсли;			
	
	КонецЕсли;	
	
	Если НЕ ГеоРамка.Широта0 = 1000
		И НЕ ГеоРамка.Широта1 = -1000
		И  НЕ ГеоРамка.Долгота0 = 1000
		И НЕ ГеоРамка.Долгота1 = -1000 Тогда
		
		// Автомасштаб карты
		
		МассивСтрок.Добавить( 
			"var newBounds = new OpenLayers.Bounds();
			|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ГеоРамка.Долгота0)
							+ ", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ГеоРамка.Широта0) + ");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|newBounds.extend(pt);
			|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ГеоРамка.Долгота1)
							+ ", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ГеоРамка.Широта1) + ");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|newBounds.extend(pt);
			|m_map.zoomToExtent(newBounds);
			|if (m_map.getZoom() > 15) { m_map.zoomTo(15); }			
		    |");
	
	КонецЕсли;
	
	Если УникальныеТочки.Количество() > 0 Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, УникальныеТочки);  
		ТочкиМаршрута = ЗаписьJSON.Закрыть();
		МассивСтрок.Добавить("var PointsFrom1c = " + ТочкиМаршрута + ";
							 |AddUniqueWaypoints(PointsFrom1c);
							 |if(cluster_layer){cluster_layer.addFeatures(cluster_features)};
							 |;");
	КонецЕсли; 
	
	// В план-факте ожидается работа только с одним марщрутом одновременно, поэтому возвращаем цвета для легенды
	//	 в виде структуры, а не коллекции.
	Результат = Новый Структура;
	Результат.Вставить("ТекстСкрипта", СтрСоединить(МассивСтрок, Символы.ПС));
	Результат.Вставить("ЦветФактическогоМаршрутаДесятичный", ЦветФактМаршрутаДесятичныйИзНастроекОтображения);	
	Если ВывестиПлановыйМаршрут Тогда
		Результат.Вставить("ЦветПлановогоМаршрутаДесятичный", ЦветПлановогоМаршрутаДесятичный);	
	КонецЕсли; 
	
	
	Возврат Результат;		

КонецФункции

&НаСервереБезКонтекста
Функция ИмяИконкиПунктаПоСтрокеСостава(СтрокаСостава)
	
	ИмяИконки = "marker.png";
	Если СтрокаСостава.ИндексСостоянияПосещения = 1 Тогда
		ИмяИконки = "marker-gold.png";
	ИначеЕсли СтрокаСостава.ИндексСостоянияПосещения = 2 Тогда 
		ИмяИконки = "marker-green.png";	
	КонецЕсли; 	 
	
	
	Возврат ИмяИконки;
	
КонецФункции
 
#КонецОбласти

&НаСервере 
Процедура ГеографическиеЗоныПриСозданииНаСервере()
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныСервер = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоны");
		МодульГеографическиеЗоныСервер.РабочееМестоДиспетчераПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры
 
// Заполнение дерева объектов
//
&НаСервере
Процедура ЗаполнитьДеревоОбъектовМониторинга()
	
	ДеревоОбъектов = РеквизитФормыВЗначение("ДеревоОбъектовМониторинга");
		
	КопияДерева = ДеревоОбъектов.Скопировать();	
	
	ИнициализироватьОбщееУсловноеОформление();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДопРеквизит",Неопределено);
	Запрос.УстановитьПараметр("ТекДопСведение",Неопределено);	
	
	СтрокаГруппировкиЗапроса = "";
	
	// Без группировки
	Если ЭтаФорма.ВидГруппировки = 10 Тогда
		СтрокаГруппировкиЗапроса = "	ВидОбъекта,
									|	Объект ТОЛЬКО ИЕРАРХИЯ";
									
	// Организация
	ИначеЕсли ЭтаФорма.ВидГруппировки = 11 Тогда
		СтрокаГруппировкиЗапроса = "	ВидОбъекта,
									|	Организация,
									|	Объект ТОЛЬКО ИЕРАРХИЯ";
									
	// Марка			
	ИначеЕсли ЭтаФорма.ВидГруппировки = 12 Тогда		
		СтрокаГруппировкиЗапроса = "	ВидОбъекта,
									|	Марка,
									|	Объект ТОЛЬКО ИЕРАРХИЯ";
		
	// Вид транспорта	
	ИначеЕсли ЭтаФорма.ВидГруппировки = 13 Тогда
		
		СтрокаГруппировкиЗапроса = "	ВидОбъекта,
									|	ВидТранспорта,
									|	Объект ТОЛЬКО ИЕРАРХИЯ";		
			
	// Группировка по дополнительным реквизитам и сведениям		
	ИначеЕсли ТипЗнч(ЭтаФорма.ВидГруппировки) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		
		// Группировка по дополнительным сведениям	
		Если ЭтаФорма.ВидГруппировки.ЭтоДополнительноеСведение Тогда			
			СтрокаГруппировкиЗапроса = "	ВидОбъекта,
										|	ДопСведение,
										|	Объект ТОЛЬКО ИЕРАРХИЯ";
			
			Запрос.УстановитьПараметр("ТекДопСведение",ЭтаФорма.ВидГруппировки.Ссылка);
			
		// Группировка по дополнительным реквизитам		
		Иначе	
			СтрокаГруппировкиЗапроса = "	ВидОбъекта,
										|	ДопРеквизит,
										|	Объект ТОЛЬКО ИЕРАРХИЯ";
			
			Запрос.УстановитьПараметр("ТекДопРеквизит",ЭтаФорма.ВидГруппировки.Ссылка);
			
		КонецЕсли;	
								
	Иначе
		СтрокаГруппировкиЗапроса = "	ВидОбъекта,
									|	ВидГруппировки"+ЭтаФорма.ВидГруппировки+",		
								    |	Объект ТОЛЬКО ИЕРАРХИЯ";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ПустойВидГруппировки", Справочники.ItobВидыГруппировок.ПустаяСсылка());
	
	ЗапросКТерминалам = Новый Запрос;
	ЗапросКТерминалам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ItobТерминалы.Ссылка КАК Терминал
		|ИЗ
		|	Справочник.ItobТерминалы КАК ItobТерминалы
		|ГДЕ
		|	НЕ ItobТерминалы.ПометкаУдаления";
	Терминалы = ЗапросКТерминалам.Выполнить().Выгрузить().ВыгрузитьКолонку("Терминал");
	
	Запрос.УстановитьПараметр("АктуальныеДанныеПоТерминалам", ItobОперативныйМониторинг.ДанныеАктуальностиИзИБ(Терминалы));	
	
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодUTC0", ТекущаяУниверсальнаяДата());	
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Справочник.ItobТранспортныеСредства.ПустаяСсылка) КАК Объект,
	|	"""" КАК ОбъектПредставление,
	|	""Транспортные средства"" КАК ВидОбъекта,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ИСТИНА КАК ЭтоТранспортноеСредство,
	|	"""" КАК ГосНомер,
	|	"""" КАК ГаражныйНомер,
	|	"""" КАК Организация,
	|	"""" КАК Марка,
	|	"""" КАК ВидТранспорта,
	|	"""" КАК ДопСведение,
	|	"""" КАК ДопРеквизит
	|ПОМЕСТИТЬ втРазрешенныеОбъектыМониторинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Терминалы.Ссылка КАК Терминал
	|ПОМЕСТИТЬ втРазрешенныеТерминалы
	|ИЗ
	|	Справочник.ItobТерминалы КАК Терминалы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеДанныеПоТерминалам.Терминал КАК Терминал,
	|	АктуальныеДанныеПоТерминалам.ПериодUTC0 КАК ПериодUTC0,
	|	АктуальныеДанныеПоТерминалам.Период КАК Период,
	|	АктуальныеДанныеПоТерминалам.Широта КАК Широта,
	|	АктуальныеДанныеПоТерминалам.Долгота КАК Долгота,
	|	АктуальныеДанныеПоТерминалам.Скорость КАК Скорость,
	|	АктуальныеДанныеПоТерминалам.Направление КАК Направление,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки0 КАК ВидГруппировки0,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки1 КАК ВидГруппировки1,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки2 КАК ВидГруппировки2,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки3 КАК ВидГруппировки3,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки4 КАК ВидГруппировки4,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки5 КАК ВидГруппировки5,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки6 КАК ВидГруппировки6,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки7 КАК ВидГруппировки7,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки8 КАК ВидГруппировки8,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки9 КАК ВидГруппировки9,
	|	АктуальныеДанныеПоТерминалам.ДанныеДатчиков КАК ДанныеДатчиков,
	|	АктуальныеДанныеПоТерминалам.КрайниеТочки КАК КрайниеТочки,
	|	ВЫБОР
	|		КОГДА АктуальныеДанныеПоТерминалам.ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных = ЗНАЧЕНИЕ(Справочник.ItobВариантыДинамическогоОформления.ПустаяССылка)
	|			ТОГДА АктуальныеДанныеПоТерминалам.ПодходящийВариантДинамическогоОформления
	|		ИНАЧЕ АктуальныеДанныеПоТерминалам.ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных
	|	КОНЕЦ КАК ПодходящийВариантДинамическогоОформления
	|ПОМЕСТИТЬ втАктуальныеДанные
	|ИЗ
	|	&АктуальныеДанныеПоТерминалам КАК АктуальныеДанныеПоТерминалам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРазрешенныеОбъектыМониторинга.ВидОбъекта КАК ВидОбъекта,
	|	втРазрешенныеОбъектыМониторинга.Объект КАК Объект,
	|	втРазрешенныеОбъектыМониторинга.ОбъектПредставление КАК ОбъектПредставление,
	|	втРазрешенныеОбъектыМониторинга.ЭтоГруппа КАК ЭтоГруппа,
	|	втРазрешенныеОбъектыМониторинга.ЭтоТранспортноеСредство КАК ЭтоТранспортноеСредство,
	|	втРазрешенныеОбъектыМониторинга.ГосНомер КАК ГосНомер,
	|	втРазрешенныеОбъектыМониторинга.Организация КАК Организация,
	|	втРазрешенныеОбъектыМониторинга.Марка КАК Марка,
	|	втРазрешенныеОбъектыМониторинга.ВидТранспорта КАК ВидТранспорта,
	|	втРазрешенныеОбъектыМониторинга.ДопСведение КАК ДопСведение,
	|	втРазрешенныеОбъектыМониторинга.ДопРеквизит КАК ДопРеквизит,
	|	втРазрешенныеОбъектыМониторинга.ГаражныйНомер КАК ГаражныйНомер,
	|	втРазрешенныеТерминалы.Терминал КАК Терминал
	|ПОМЕСТИТЬ втБазовыеДанные
	|ИЗ
	|	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(
	|			,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втРазрешенныеОбъектыМониторинга.Объект КАК Объект
	|				ИЗ
	|					втРазрешенныеОбъектыМониторинга КАК втРазрешенныеОбъектыМониторинга)) КАК ПривязкиТерминаловСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазрешенныеОбъектыМониторинга КАК втРазрешенныеОбъектыМониторинга
	|		ПО ПривязкиТерминаловСрезПоследних.Объект = втРазрешенныеОбъектыМониторинга.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазрешенныеТерминалы КАК втРазрешенныеТерминалы
	|		ПО ПривязкиТерминаловСрезПоследних.Терминал = втРазрешенныеТерминалы.Терминал
	|ГДЕ
	|	ПривязкиТерминаловСрезПоследних.ТерминалУстановлен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ItobВариантыДинамическогоОформления.Ссылка КАК ВариантСсылка,
	|	ItobВариантыДинамическогоОформления.ДляСписка КАК ДляСписка,
	|	ItobВариантыДинамическогоОформления.ДляКарты КАК ДляКарты,
	|	ItobВариантыДинамическогоОформления.Список_ЦветФона КАК Список_ЦветФона,
	|	ItobВариантыДинамическогоОформления.Список_ЦветНадписи КАК Список_ЦветНадписи,
	|	ItobВариантыДинамическогоОформления.Карта_ЦветНадписи КАК Карта_ЦветНадписи,
	|	ItobВариантыДинамическогоОформления.Карта_ДействиеСТекущейИконкой КАК Карта_ДействиеСТекущейИконкой,
	|	ItobВариантыДинамическогоОформления.ВыравниваниеДопИконки_ВариантОтносительногоПоложения КАК ВыравниваниеДопИконки_ВариантОтносительногоПоложения,
	|	ItobВариантыДинамическогоОформления.ВыравниваниеДопИконки_СдвигПоОсиАбсцисс КАК ВыравниваниеДопИконки_СдвигПоОсиАбсцисс,
	|	ItobВариантыДинамическогоОформления.ВыравниваниеДопИконки_СдвигПоОсиОрдинат КАК ВыравниваниеДопИконки_СдвигПоОсиОрдинат,
	|	ItobВариантыДинамическогоОформления.Карта_НоваяИконка КАК Карта_НоваяИконка
	|ИЗ
	|	Справочник.ItobВариантыДинамическогоОформления КАК ItobВариантыДинамическогоОформления
	|ГДЕ
	|	НЕ ItobВариантыДинамическогоОформления.ПометкаУдаления
	|	И (ItobВариантыДинамическогоОформления.ДляКарты
	|			ИЛИ ItobВариантыДинамическогоОформления.ДляСписка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втБазовыеДанные.ВидОбъекта КАК ВидОбъекта,
	|	втБазовыеДанные.Объект КАК Объект,
	|	втБазовыеДанные.ОбъектПредставление КАК ОбъектПредставление,
	|	ВЫБОР
	|		КОГДА втБазовыеДанные.ЭтоГруппа = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Картинка,
	|	втБазовыеДанные.ЭтоГруппа КАК ЭтоГруппа,
	|	втБазовыеДанные.ЭтоТранспортноеСредство КАК ЭтоТранспортноеСредство,
	|	втБазовыеДанные.ГосНомер КАК ГосНомер,
	|	втБазовыеДанные.Организация КАК Организация,
	|	втБазовыеДанные.Марка КАК Марка,
	|	втБазовыеДанные.ВидТранспорта КАК ВидТранспорта,
	|	втБазовыеДанные.ГаражныйНомер КАК ГаражныйНомер,
	|	0 КАК Пометка,
	|	ВЫБОР
	|		КОГДА втАктуальныеДанные.ПериодUTC0 ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(втАктуальныеДанные.ПериодUTC0, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	|					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	|						ТОГДА ВЫБОР
	|								КОГДА втАктуальныеДанные.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	|									ТОГДА &СдвигЛетнееВремя
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	|						ТОГДА ВЫБОР
	|								КОГДА втАктуальныеДанные.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	|									ТОГДА &СдвигЛетнееВремя
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|	КОНЕЦ КАК АктуальностьДанных,
	|	ЕСТЬNULL(втАктуальныеДанные.Широта, 0) КАК Широта,
	|	ЕСТЬNULL(втАктуальныеДанные.Долгота, 0) КАК Долгота,
	|	ЕСТЬNULL(втАктуальныеДанные.Скорость, 0) КАК Скорость,
	|	ЕСТЬNULL(втАктуальныеДанные.Направление, 0) КАК Направление,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втАктуальныеДанные.Скорость, 0) >= &МинимальнаяСкоростьДвижения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втАктуальныеДанные.Скорость, 0) >= &МинимальнаяСкоростьДвижения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбъектВДвижении,
	|	РАЗНОСТЬДАТ(втАктуальныеДанные.ПериодUTC0, &ПериодUTC0, МИНУТА) КАК ОтсутствуютДанныеМинуты,
	|	РАЗНОСТЬДАТ(втАктуальныеДанные.ПериодUTC0, &ПериодUTC0, ЧАС) КАК ОтсутствуютДанныеЧасы,
	|	втАктуальныеДанные.ПериодUTC0 КАК ПериодUTC0,
	|	ЕСТЬNULL(втАктуальныеДанные.ДанныеДатчиков, """""""") КАК ДанныеДатчиков,
	|	ЕСТЬNULL(втАктуальныеДанные.КрайниеТочки, """""""") КАК КрайниеТочки,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки0, &ПустойВидГруппировки) КАК ВидГруппировки0,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки1, &ПустойВидГруппировки) КАК ВидГруппировки1,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки2, &ПустойВидГруппировки) КАК ВидГруппировки2,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки3, &ПустойВидГруппировки) КАК ВидГруппировки3,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки4, &ПустойВидГруппировки) КАК ВидГруппировки4,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки5, &ПустойВидГруппировки) КАК ВидГруппировки5,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки6, &ПустойВидГруппировки) КАК ВидГруппировки6,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки7, &ПустойВидГруппировки) КАК ВидГруппировки7,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки8, &ПустойВидГруппировки) КАК ВидГруппировки8,
	|	ЕСТЬNULL(втАктуальныеДанные.ВидГруппировки9, &ПустойВидГруппировки) КАК ВидГруппировки9,
	|	ItobНастройкиОтображенияОбъектов.ИконкаНаКарте КАК ИконкаНаКарте,
	|	ItobНастройкиОтображенияОбъектов.ДополнительнаяИконкаНаКарте КАК ДополнительнаяИконкаНаКарте,
	|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.НеПоказыватьСтрелкуНаправленияДвижения, ЛОЖЬ) КАК НеПоказыватьСтрелкуНаправленияДвижения,
	|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ЦветМаршрутаНаКарте, 0) КАК ЦветМаршрутаНаКарте,
	|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ЦветНадписиНаКарте, 0) КАК ЦветНадписиНаКарте,
	|	НЕ втБазовыеДанные.ЭтоГруппа КАК ПоказатьОбъект,
	|	втБазовыеДанные.ДопРеквизит КАК ДопСведение,
	|	втБазовыеДанные.ДопРеквизит КАК ДопРеквизит,
	|	&СтрокаВыборкаРазрешенныеТерминалы КАК СтрокаВыборкаРазрешенныеТерминалы,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(втАктуальныеДанные.Терминал) КАК ТерминалПредставление,
	|	ЕСТЬNULL(втАктуальныеДанные.ПодходящийВариантДинамическогоОформления, ЗНАЧЕНИЕ(Справочник.ItobВариантыДинамическогоОформления.ПустаяСсылка)) КАК ВариантДинамическогоОформления
	|ИЗ
	|	втБазовыеДанные КАК втБазовыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазрешенныеТерминалы КАК втРазрешенныеТерминалы
	|		ПО втБазовыеДанные.Терминал = втРазрешенныеТерминалы.Терминал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	|		ПО втБазовыеДанные.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
	|		ПО втБазовыеДанные.Объект = ItobНастройкиОтображенияОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАктуальныеДанные КАК втАктуальныеДанные
	|		ПО втБазовыеДанные.Терминал = втАктуальныеДанные.Терминал";
	
	мсвПодзапросы = СтрРазделить(ТекстЗапроса, ";");
	
	// Подставляем первый запрос - выборка объектов
	мсвПодзапросы[0] = ItobВызовСервераПовтИсп.ПолучитьТекстЗапросаВыборкиОбъектов();
		
	// Выборка из таблицы втРазрешенныеТерминалы
	ТекстИтоговаяВыборка = мсвПодзапросы[мсвПодзапросы.Количество()-1];
	ТекстИтоговаяВыборка = СтрЗаменить(ТекстИтоговаяВыборка, "&СтрокаВыборкаРазрешенныеТерминалы КАК СтрокаВыборкаРазрешенныеТерминалы", "втРазрешенныеТерминалы.*");
	ТекстИтоговаяВыборка = ТекстИтоговаяВыборка + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОбъекта,
	|	Объект
	|ИТОГИ
	|	ИСТИНА КАК ЭтоГруппа
	|ПО " + СтрокаГруппировкиЗапроса + "
	|
	|АВТОУПОРЯДОЧИВАНИЕ";	
	мсвПодзапросы[мсвПодзапросы.Количество()-1] = ТекстИтоговаяВыборка;
	
	// Собираем запрос
	Запрос.Текст = СтрСоединить(мсвПодзапросы, ";");
		
	ДеревоОбъектов.Строки.Очистить();	
	ДеревоОбъектов.Колонки.Добавить("ПриоритетСортировки"); 

	ИндексРезультата_СвойстваВариантовДинамическогоОформления =  4;
	ИндексРезультата_ИтоговыеДанные = 5;
	
	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	ИконкиОбъектов.Очистить();
	
	КешДинамическогоУсловногоОформления.Очистить();
	
	
	// Кешируем все задействованные реквизиты всех различных вариантов динамического оформления в отдельной таблице.
	ПерезаполнитьДанныеВариантовДинамическогоОформления(НаборРезультатов[ИндексРезультата_СвойстваВариантовДинамическогоОформления].Выбрать());
	
	
	ТабРезультат = НаборРезультатов[ИндексРезультата_ИтоговыеДанные].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для каждого СтрокаРезультата Из ТабРезультат.Строки Цикл
		НовСтрокаДерева 			= ДеревоОбъектов.Строки.Добавить();
		НовСтрокаДерева.Объект 		= СтрокаРезультата.ВидОбъекта;
		НовСтрокаДерева.Картинка 	= 0;
		НовСтрокаДерева.ЭтоГруппа 	= Истина;
		
		// Группировка по умолчанию
		Если ЭтаФорма.ВидГруппировки = 10 Тогда
			ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, НовСтрокаДерева.Строки);
			
		// Группировка по статичным значениям	
		ИначеЕсли ЭтаФорма.ВидГруппировки = 11 ИЛИ ЭтаФорма.ВидГруппировки = 12 ИЛИ ЭтаФорма.ВидГруппировки = 13 Тогда
			// Группировка по организации
			Если ЭтаФорма.ВидГруппировки = 11 Тогда
				НазваниеГруппировки = "Организация";	
				
			// Группировка по марке ТС 	
			ИначеЕсли ЭтаФорма.ВидГруппировки = 12 Тогда 
				НазваниеГруппировки = "Марка";	
				
			// Группировка по виду транспорта 	
			ИначеЕсли ЭтаФорма.ВидГруппировки = 13 Тогда 
				НазваниеГруппировки = "ВидТранспорта";	
			КонецЕсли;
			
			Для Каждого ТекСтрокаГруппировка Из СтрокаРезультата.Строки Цикл
				НовСтрокаДерева1 = НовСтрокаДерева.Строки.Добавить();
				
				Если ЗначениеЗаполнено(ТекСтрокаГруппировка[НазваниеГруппировки]) Тогда
					НовСтрокаДерева1.Объект = ТекСтрокаГруппировка[НазваниеГруппировки];
					НовСтрокаДерева1.ПриоритетСортировки = 0;
					
				Иначе
					НовСтрокаДерева1.Объект = "Не заполнено";
					НовСтрокаДерева1.ПриоритетСортировки = 1;
				КонецЕсли;
				
				НовСтрокаДерева1.Картинка 	= 0;
				НовСтрокаДерева1.ЭтоГруппа 	= Истина;
				
				ЗаполнитьСтрокиДереваОбъектов(ТекСтрокаГруппировка.Строки, НовСтрокаДерева1.Строки);
			КонецЦикла;
			
			НовСтрокаДерева.Строки.Сортировать("ПриоритетСортировки, Объект", Ложь);  
			
		// Группировка по дополнительным реквизитам и сведениям
		ИначеЕсли ТипЗнч(ЭтаФорма.ВидГруппировки) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			
			Для Каждого ТекСтрокаГруппировка Из СтрокаРезультата.Строки Цикл
				// Группировка по дополнительному сведению
				Если ЭтаФорма.ВидГруппировки.ЭтоДополнительноеСведение Тогда
					НазваниеГруппировки = "ДопСведение";	
					
				// Группировка по дополнительному реквизиту
				Иначе
					НазваниеГруппировки = "ДопРеквизит";		
				КонецЕсли;	
					
				НовСтрокаДерева1 = НовСтрокаДерева.Строки.Добавить();
				
				Если ЗначениеЗаполнено(ТекСтрокаГруппировка[НазваниеГруппировки]) Тогда
					НовСтрокаДерева1.Объект = ТекСтрокаГруппировка[НазваниеГруппировки];
					НовСтрокаДерева1.ПриоритетСортировки = 0;

				Иначе
					НовСтрокаДерева1.Объект = "Не заполнено";
					НовСтрокаДерева1.ПриоритетСортировки = 1;
				КонецЕсли;
				
				НовСтрокаДерева1.Картинка 	= 0;
				НовСтрокаДерева1.ЭтоГруппа 	= Истина;
				ЗаполнитьСтрокиДереваОбъектов(ТекСтрокаГруппировка.Строки, НовСтрокаДерева1.Строки);
				
				НовСтрокаДерева.Строки.Сортировать("ПриоритетСортировки, Объект", Ложь); 
			КонецЦикла;
		
		Иначе
			МассивГруппировок = ПолучитьЭлементыГруппировки(ЭтаФорма.ВидГруппировки); 
			НазваниеГруппировки = "ВидГруппировки" + ЭтаФорма.ВидГруппировки;
			
			Для Каждого ТекСтрокаГруппировка Из СтрокаРезультата.Строки Цикл
				НовСтрокаДерева1 = НовСтрокаДерева.Строки.Добавить();
				
				Если ЗначениеЗаполнено(ТекСтрокаГруппировка[НазваниеГруппировки]) Тогда
					НовСтрокаДерева1.Объект = ТекСтрокаГруппировка[НазваниеГруппировки];
					НовСтрокаДерева1.ПриоритетСортировки = 0;

				Иначе
					НовСтрокаДерева1.Объект = "Не заполнено";
					НовСтрокаДерева1.ПриоритетСортировки = 1;
				КонецЕсли;
				
				НовСтрокаДерева1.Картинка 	= 0;
				НовСтрокаДерева1.ЭтоГруппа 	= Истина;
				ЗаполнитьСтрокиДереваОбъектов(ТекСтрокаГруппировка.Строки, НовСтрокаДерева1.Строки);
				
				ИндексМассива = МассивГруппировок.Найти(ТекСтрокаГруппировка[НазваниеГруппировки]);
				Если ИндексМассива <> Неопределено Тогда
					МассивГруппировок.Удалить(ИндексМассива);	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекЭлемент Из МассивГруппировок Цикл
				НовСтрокаДерева2 			= НовСтрокаДерева.Строки.Добавить();
				НовСтрокаДерева2.Объект 	= ТекЭлемент;
				НовСтрокаДерева2.Картинка 	= 0;
				НовСтрокаДерева2.ЭтоГруппа 	= Истина;
				НовСтрокаДерева2.ПриоритетСортировки = 0;
			КонецЦикла;                                 
							
			НовСтрокаДерева.Строки.Сортировать("ПриоритетСортировки, Объект", Ложь);

		КонецЕсли;
	КонецЦикла;
	
	// Загружаем иконки объектов на сервер CsmSvc.
	ОбновитьИконкиНаСервере();
	
	// Установим значения сохраненных пометок
	Если (ИмяТекущегоРежима = "ПутевыеЛисты" Или ИмяТекущегоРежима = "ПостроениеМаршрутов") 
		 И МассивОтмеченныхОбъектов <> Неопределено Тогда
		Для Каждого ТекОбъект Из МассивОтмеченныхОбъектов Цикл
			СтрокаПоиска = ДеревоОбъектов.Строки.Найти(ТекОбъект.Значение, "Объект", Истина);
			Если СтрокаПоиска <> Неопределено Тогда
				СтрокаПоиска.Пометка = 1;	
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если КопияДерева.Колонки.Количество() > 0 И КопияДерева.Строки.Количество() > 0 Тогда
			ТаблицаОбъектовСПометкой = Новый ТаблицаЗначений;
			ТаблицаОбъектовСПометкой.Колонки.Добавить("Объект");
			ТаблицаОбъектовСПометкой.Колонки.Добавить("Пометка");
			
			ЗаполнитьТаблицуОбъектовСПометкой(КопияДерева.Строки, ТаблицаОбъектовСПометкой);
			Для Каждого СтрокаОбъектов Из ТаблицаОбъектовСПометкой Цикл
				СтрокаПоиска = ДеревоОбъектов.Строки.Найти(СтрокаОбъектов.Объект, "Объект", Истина);
				Если СтрокаПоиска <> Неопределено Тогда
					СтрокаПоиска.Пометка = СтрокаОбъектов.Пометка;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	ЗначениеВРеквизитФормы(ДеревоОбъектов, "ДеревоОбъектовМониторинга");		
	ТабАктуальности.Очистить();
	ЗаполнитьТаблицуАктуальности(ДеревоОбъектовМониторинга);

	ОбновитьИндексыПостроенияДинамическихГруппировок();
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбщееУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	Если  ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		ДобавитьЭлементыУсловногоОформленияСписокМаршрутов();
		ДобавитьЭлементыУсловногоОформленияСписокТочекМаршрута();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуАктуальности(Родитель)
	
	Для Каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (НЕ СтрокаДерева.ЭтоГруппа) Тогда			
			НовСтрокаАктуальности = ТабАктуальности.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаАктуальности, СтрокаДерева);
			НовСтрокаАктуальности.ИдДереваОбъектов = СтрокаДерева.ПолучитьИдентификатор();
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьТаблицуАктуальности(СтрокаДерева);	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектыДерева(Родитель, ТабНовыхДанных, ЕстьИзменения)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (НЕ СтрокаДерева.ЭтоГруппа) Тогда
			НайденнаяСтрокаНовДанных = ТабНовыхДанных.Найти(СтрокаДерева.Объект, "Объект");
			Если НЕ НайденнаяСтрокаНовДанных = Неопределено Тогда
				Если НайденнаяСтрокаНовДанных.АктуальностьДанных <> СтрокаДерева.АктуальностьДанных Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДерева, НайденнаяСтрокаНовДанных);					
					ЕстьИзменения = Истина;
					
				КонецЕсли;				
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ОбновитьОбъектыДерева(СтрокаДерева, ТабНовыхДанных, ЕстьИзменения);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ОбновитьОбъектыДерева()

// Обновление данных дерева объектов
//
&НаСервере
Процедура ОбновитьДанныеДереваОбъектовМониторинга(ЕстьИзменения)
	
	ТабАктуальностиЗнач = РеквизитФормыВЗначение("ТабАктуальности");
	ИндексыПостроенияДинамическихГруппировок_ТЗ = РеквизитФормыВЗначение("ИндексыПостроенияДинамическихГруппировок");
	
	СвязьТиповОбъектовМониторингаИКорневыхГрупп = СвязьТиповОбъектовМониторингаИКорневыхГрупп();
		
	Запрос = Новый Запрос;
					
	Запрос.УстановитьПараметр("ДанныеАктуальности",ТабАктуальностиЗнач);
	Запрос.УстановитьПараметр("АктуальныеДанныеПоТерминалам", ItobОперативныйМониторинг.ДанныеАктуальностиИзИБ(ТабАктуальностиЗнач.ВыгрузитьКолонку("Терминал")));
	
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодUTC0", ТекущаяУниверсальнаяДата());	
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());	
	
	// Для совместимости с выборкой объектов
	Запрос.УстановитьПараметр("ТекДопРеквизит", Неопределено);
	Запрос.УстановитьПараметр("ТекДопСведение", Неопределено);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Справочник.ItobТранспортныеСредства.ПустаяСсылка) КАК Объект,
	|	"""" КАК ОбъектПредставление,
	|	""Транспортные средства"" КАК ВидОбъекта,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ИСТИНА КАК ЭтоТранспортноеСредство,
	|	"""" КАК ГосНомер,
	|	"""" КАК ГаражныйНомер
	|ПОМЕСТИТЬ втРазрешенныеОбъектыМониторинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Терминалы.Ссылка КАК Терминал
	|ПОМЕСТИТЬ втРазрешенныеТерминалы
	|ИЗ
	|	Справочник.ItobТерминалы КАК Терминалы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.Терминал КАК Терминал,
	|	Таб.ИдДереваОбъектов КАК ИдДереваОбъектов,
	|	Таб.ПериодUTC0 КАК ПериодUTC0,
	|	Таб.Объект КАК Объект,
	|	Таб.ВариантДинамическогоОформления КАК ВариантДинамическогоОформления
	|ПОМЕСТИТЬ втДанныеДереваМониторинга
	|ИЗ
	|	&ДанныеАктуальности КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеДанныеПоТерминалам.Терминал КАК Терминал,
	|	АктуальныеДанныеПоТерминалам.ПериодUTC0 КАК ПериодUTC0,
	|	АктуальныеДанныеПоТерминалам.Период КАК Период,
	|	АктуальныеДанныеПоТерминалам.Широта КАК Широта,
	|	АктуальныеДанныеПоТерминалам.Долгота КАК Долгота,
	|	АктуальныеДанныеПоТерминалам.Скорость КАК Скорость,
	|	АктуальныеДанныеПоТерминалам.Направление КАК Направление,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки0 КАК ВидГруппировки0,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки1 КАК ВидГруппировки1,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки2 КАК ВидГруппировки2,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки3 КАК ВидГруппировки3,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки4 КАК ВидГруппировки4,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки5 КАК ВидГруппировки5,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки6 КАК ВидГруппировки6,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки7 КАК ВидГруппировки7,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки8 КАК ВидГруппировки8,
	|	АктуальныеДанныеПоТерминалам.ВидГруппировки9 КАК ВидГруппировки9,
	|	АктуальныеДанныеПоТерминалам.ДанныеДатчиков КАК ДанныеДатчиков,
	|	АктуальныеДанныеПоТерминалам.КрайниеТочки КАК КрайниеТочки,
	|	ВЫБОР
	|		КОГДА АктуальныеДанныеПоТерминалам.ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных = ЗНАЧЕНИЕ(Справочник.ItobВариантыДинамическогоОформления.ПустаяССылка)
	|			ТОГДА АктуальныеДанныеПоТерминалам.ПодходящийВариантДинамическогоОформления
	|		ИНАЧЕ АктуальныеДанныеПоТерминалам.ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных
	|	КОНЕЦ КАК ВыбранныйВариантДинамическогоОформления
	|ПОМЕСТИТЬ втАктуальныеДанные_БезОтбора
	|ИЗ
	|	&АктуальныеДанныеПоТерминалам КАК АктуальныеДанныеПоТерминалам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАктуальныеДанные_БезОтбора.Терминал КАК Терминал,
	|	втАктуальныеДанные_БезОтбора.ПериодUTC0 КАК ПериодUTC0,
	|	втАктуальныеДанные_БезОтбора.Период КАК Период,
	|	втАктуальныеДанные_БезОтбора.Широта КАК Широта,
	|	втАктуальныеДанные_БезОтбора.Долгота КАК Долгота,
	|	втАктуальныеДанные_БезОтбора.Скорость КАК Скорость,
	|	втАктуальныеДанные_БезОтбора.Направление КАК Направление,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки0 КАК ВидГруппировки0,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки1 КАК ВидГруппировки1,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки2 КАК ВидГруппировки2,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки3 КАК ВидГруппировки3,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки4 КАК ВидГруппировки4,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки5 КАК ВидГруппировки5,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки6 КАК ВидГруппировки6,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки7 КАК ВидГруппировки7,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки8 КАК ВидГруппировки8,
	|	втАктуальныеДанные_БезОтбора.ВидГруппировки9 КАК ВидГруппировки9,
	|	втАктуальныеДанные_БезОтбора.ДанныеДатчиков КАК ДанныеДатчиков,
	|	втАктуальныеДанные_БезОтбора.КрайниеТочки КАК КрайниеТочки,
	|	втАктуальныеДанные_БезОтбора.ВыбранныйВариантДинамическогоОформления КАК ВыбранныйВариантДинамическогоОформления
	|ПОМЕСТИТЬ втАктуальныеДанные
	|ИЗ
	|	втДанныеДереваМониторинга КАК втДанныеДереваМониторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАктуальныеДанные_БезОтбора КАК втАктуальныеДанные_БезОтбора
	|		ПО втДанныеДереваМониторинга.Терминал = втАктуальныеДанные_БезОтбора.Терминал
	|ГДЕ
	|	(втАктуальныеДанные_БезОтбора.ВыбранныйВариантДинамическогоОформления <> втДанныеДереваМониторинга.ВариантДинамическогоОформления
	|			ИЛИ втАктуальныеДанные_БезОтбора.ПериодUTC0 > втДанныеДереваМониторинга.ПериодUTC0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРазрешенныеОбъектыМониторинга.ВидОбъекта КАК ВидОбъекта,
	|	втРазрешенныеОбъектыМониторинга.Объект КАК Объект,
	|	втРазрешенныеОбъектыМониторинга.ОбъектПредставление КАК ОбъектПредставление,
	|	втРазрешенныеОбъектыМониторинга.ЭтоГруппа КАК ЭтоГруппа,
	|	втРазрешенныеОбъектыМониторинга.ЭтоТранспортноеСредство КАК ЭтоТранспортноеСредство,
	|	втРазрешенныеОбъектыМониторинга.ГосНомер КАК ГосНомер,
	|	втРазрешенныеОбъектыМониторинга.ГаражныйНомер КАК ГаражныйНомер,
	|	втРазрешенныеТерминалы.Терминал КАК Терминал
	|ПОМЕСТИТЬ втБазовыеДанные
	|ИЗ
	|	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(
	|			,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втРазрешенныеОбъектыМониторинга.Объект КАК Объект
	|				ИЗ
	|					втРазрешенныеОбъектыМониторинга КАК втРазрешенныеОбъектыМониторинга)) КАК ПривязкиТерминаловСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазрешенныеОбъектыМониторинга КАК втРазрешенныеОбъектыМониторинга
	|		ПО ПривязкиТерминаловСрезПоследних.Объект = втРазрешенныеОбъектыМониторинга.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазрешенныеТерминалы КАК втРазрешенныеТерминалы
	|		ПО ПривязкиТерминаловСрезПоследних.Терминал = втРазрешенныеТерминалы.Терминал
	|ГДЕ
	|	ПривязкиТерминаловСрезПоследних.ТерминалУстановлен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втАктуальныеДанные.ВыбранныйВариантДинамическогоОформления КАК ВариантСсылка,
	|	ItobВариантыДинамическогоОформления.ДляСписка КАК ДляСписка,
	|	ItobВариантыДинамическогоОформления.ДляКарты КАК ДляКарты,
	|	ItobВариантыДинамическогоОформления.Список_ЦветФона КАК Список_ЦветФона,
	|	ItobВариантыДинамическогоОформления.Список_ЦветНадписи КАК Список_ЦветНадписи,
	|	ItobВариантыДинамическогоОформления.Карта_ЦветНадписи КАК Карта_ЦветНадписи,
	|	ItobВариантыДинамическогоОформления.Карта_ДействиеСТекущейИконкой КАК Карта_ДействиеСТекущейИконкой,
	|	ItobВариантыДинамическогоОформления.ВыравниваниеДопИконки_ВариантОтносительногоПоложения КАК ВыравниваниеДопИконки_ВариантОтносительногоПоложения,
	|	ItobВариантыДинамическогоОформления.ВыравниваниеДопИконки_СдвигПоОсиАбсцисс КАК ВыравниваниеДопИконки_СдвигПоОсиАбсцисс,
	|	ItobВариантыДинамическогоОформления.ВыравниваниеДопИконки_СдвигПоОсиОрдинат КАК ВыравниваниеДопИконки_СдвигПоОсиОрдинат,
	|	ItobВариантыДинамическогоОформления.Карта_НоваяИконка КАК Карта_НоваяИконка
	|ИЗ
	|	втАктуальныеДанные КАК втАктуальныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ItobВариантыДинамическогоОформления КАК ItobВариантыДинамическогоОформления
	|		ПО втАктуальныеДанные.ВыбранныйВариантДинамическогоОформления = ItobВариантыДинамическогоОформления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБазовыеДанные.ВидОбъекта КАК ВидОбъекта,
	|	втБазовыеДанные.Объект КАК Объект,
	|	втБазовыеДанные.ОбъектПредставление КАК ОбъектПредставление,
	|	ВЫБОР
	|		КОГДА втБазовыеДанные.ЭтоГруппа = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Картинка,
	|	втБазовыеДанные.ЭтоГруппа КАК ЭтоГруппа,
	|	втБазовыеДанные.ЭтоТранспортноеСредство КАК ЭтоТранспортноеСредство,
	|	втБазовыеДанные.ГосНомер КАК ГосНомер,
	|	втБазовыеДанные.ГаражныйНомер КАК ГаражныйНомер,
	|	0 КАК Пометка,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(втАктуальныеДанные.ПериодUTC0, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	|				ТОГДА ВЫБОР
	|						КОГДА втАктуальныеДанные.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	|				ТОГДА ВЫБОР
	|						КОГДА втАктуальныеДанные.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втАктуальныеДанные.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АктуальностьДанных,
	|	втАктуальныеДанные.Широта КАК Широта,
	|	втАктуальныеДанные.Долгота КАК Долгота,
	|	втАктуальныеДанные.Скорость КАК Скорость,
	|	втАктуальныеДанные.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА втАктуальныеДанные.Скорость >= &МинимальнаяСкоростьДвижения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА втАктуальныеДанные.Скорость >= &МинимальнаяСкоростьДвижения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбъектВДвижении,
	|	РАЗНОСТЬДАТ(втАктуальныеДанные.ПериодUTC0, &ПериодUTC0, МИНУТА) КАК ОтсутствуютДанныеМинуты,
	|	РАЗНОСТЬДАТ(втАктуальныеДанные.ПериодUTC0, &ПериодUTC0, ЧАС) КАК ОтсутствуютДанныеЧасы,
	|	втАктуальныеДанные.ПериодUTC0 КАК ПериодUTC0,
	|	втАктуальныеДанные.ДанныеДатчиков КАК ДанныеДатчиков,
	|	втАктуальныеДанные.КрайниеТочки КАК КрайниеТочки,
	|	втАктуальныеДанные.ВидГруппировки0 КАК ВидГруппировки0,
	|	втАктуальныеДанные.ВидГруппировки1 КАК ВидГруппировки1,
	|	втАктуальныеДанные.ВидГруппировки2 КАК ВидГруппировки2,
	|	втАктуальныеДанные.ВидГруппировки3 КАК ВидГруппировки3,
	|	втАктуальныеДанные.ВидГруппировки4 КАК ВидГруппировки4,
	|	втАктуальныеДанные.ВидГруппировки5 КАК ВидГруппировки5,
	|	втАктуальныеДанные.ВидГруппировки6 КАК ВидГруппировки6,
	|	втАктуальныеДанные.ВидГруппировки7 КАК ВидГруппировки7,
	|	втАктуальныеДанные.ВидГруппировки8 КАК ВидГруппировки8,
	|	втАктуальныеДанные.ВидГруппировки9 КАК ВидГруппировки9,
	|	ItobНастройкиОтображенияОбъектов.ИконкаНаКарте КАК ИконкаНаКарте,
	|	ItobНастройкиОтображенияОбъектов.ДополнительнаяИконкаНаКарте КАК ДополнительнаяИконкаНаКарте,
	|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ЦветМаршрутаНаКарте, 0) КАК ЦветМаршрутаНаКарте,
	|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ЦветНадписиНаКарте, 0) КАК ЦветНадписиНаКарте,
	|	втДанныеДереваМониторинга.ИдДереваОбъектов КАК ИдДереваОбъектов,
	|	&СтрокаВыборкаРазрешенныеТерминалы КАК СтрокаВыборкаРазрешенныеТерминалы,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(втАктуальныеДанные.Терминал) КАК ТерминалПредставление,
	|	втАктуальныеДанные.ВыбранныйВариантДинамическогоОформления КАК ВариантДинамическогоОформления
	|ИЗ
	|	втБазовыеДанные КАК втБазовыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДереваМониторинга КАК втДанныеДереваМониторинга
	|		ПО втБазовыеДанные.Терминал = втДанныеДереваМониторинга.Терминал
	|			И втБазовыеДанные.Объект = втДанныеДереваМониторинга.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазрешенныеТерминалы КАК втРазрешенныеТерминалы
	|		ПО втБазовыеДанные.Терминал = втРазрешенныеТерминалы.Терминал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	|		ПО втБазовыеДанные.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
	|		ПО втБазовыеДанные.Объект = ItobНастройкиОтображенияОбъектов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАктуальныеДанные КАК втАктуальныеДанные
	|		ПО втБазовыеДанные.Терминал = втАктуальныеДанные.Терминал";
	
	мсвПодзапросы = СтрРазделить(ТекстЗапроса, ";");
	
	// Подставляем первый запрос - выборка объектов
	мсвПодзапросы[0] = ItobВызовСервераПовтИсп.ПолучитьТекстЗапросаВыборкиОбъектов();
	
	// Выборка из таблицы втРазрешенныеТерминалы
	ТекстИтоговаяВыборка = мсвПодзапросы[мсвПодзапросы.Количество()-1];
	ТекстИтоговаяВыборка = СтрЗаменить(ТекстИтоговаяВыборка, "&СтрокаВыборкаРазрешенныеТерминалы КАК СтрокаВыборкаРазрешенныеТерминалы", "втРазрешенныеТерминалы.*");
	мсвПодзапросы[мсвПодзапросы.Количество()-1] = ТекстИтоговаяВыборка;
	
	Запрос.Текст = СтрСоединить(мсвПодзапросы, ";");	
	
	ИндексРезультата_СвойстваВариантовДинамическогоОформления = 6;
	ИндексРезультата_ИтоговыеДанные = 7;
	
	НаборРезультатов = Запрос.ВыполнитьПакет();

	// Если есть обновленная строка актуальности, то, возможно, к ней был подобран новый вариант дин. оформления.
	// Поэтому требуется актуализировать кеш вариантов дин.оформления.
	АктуализироватьДанныеВариантовДинамическогоОформления(НаборРезультатов[ИндексРезультата_СвойстваВариантовДинамическогоОформления].Выбрать());
	
	ТабРезультат = НаборРезультатов[ИндексРезультата_ИтоговыеДанные].Выгрузить();
	
	ЕстьИзменения = Ложь;	
	ИндексТекущейСтроки = 0;		
	Для каждого ДанныеОбновляемойСтроки Из ТабРезультат Цикл
		ЕстьИзменения = Истина;
		
		ОбновляемаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(ДанныеОбновляемойСтроки.ИдДереваОбъектов);
		ЗаполнитьЗначенияСвойств(ОбновляемаяСтрока, ДанныеОбновляемойСтроки,, "Пометка");
		
		СтрокаДляРасчета = ПереместитьСтрокуСогласноГруппировке(ДанныеОбновляемойСтроки, 
																ОбновляемаяСтрока, 
																ИндексыПостроенияДинамическихГруппировок_ТЗ, 
																СвязьТиповОбъектовМониторингаИКорневыхГрупп,
																ИндексТекущейСтроки);
						
		АктуализироватьДинамическоеУсловноеОформлениеОбъекта(СтрокаДляРасчета.Объект, СтрокаДляРасчета.ВариантДинамическогоОформления);
		
		Если НЕ СтрокаДляРасчета.ЭтоГруппа Тогда
			СтрокаДляРасчета.ТерминалУИД = Строка(СтрокаДляРасчета.Терминал.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;

	// Обновляем таблицу актуальности и таблицу индексов.
	Если ЕстьИзменения Тогда
		ТабАктуальности.Очистить();
		ЗаполнитьТаблицуАктуальности(ДеревоОбъектовМониторинга);
		
		ОбновитьИндексыПостроенияДинамическихГруппировок();
	КонецЕсли;
	
	// Устанавливаем фокус на строку дерева, если необходимо.
	Если ЗначениеЗаполнено(ИндексТекущейСтроки) Тогда
		Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = ИндексТекущейСтроки;	
	КонецЕсли;

КонецПроцедуры


#Область ЗаполнениеДинамическихГруппировок

&НаСервере
Функция ПереместитьСтрокуСогласноГруппировке(ДанныеОбновляемойСтроки, 
											 ОбновляемаяСтрока, 
											 ИндексыПостроенияДинамическихГруппировок_ТЗ, 
											 СвязьТиповОбъектовМониторингаИКорневыхГрупп, 
											 ИндексТекущейСтроки)
	
	СтрокаРезультатОбновления = ОбновляемаяСтрока;
	

	Если ТипЗнч(ВидГруппировки) = Тип("Число") 
		 И ВидГруппировки < 10 Тогда
		 
		 БлижайшийРодительСсылочногоТипа = Неопределено;
		 ТекущаяСтрокаРодитель = ОбновляемаяСтрока.ПолучитьРодителя();
		 Если НЕ СвязьТиповОбъектовМониторингаИКорневыхГрупп[ТипЗнч(ТекущаяСтрокаРодитель.Объект)] = Неопределено Тогда			 
			 БлижайшийРодительСсылочногоТипа = ТекущаяСтрокаРодитель.Объект;
			 ТекущаяДинамическаяГруппировка = НайтиДинамическуюГруппировкуРодителя(ТекущаяСтрокаРодитель);
		 ИначеЕсли ТипЗнч(ТекущаяСтрокаРодитель.Объект) = Тип("СправочникСсылка.ItobВидыГруппировок") Тогда
			 ТекущаяДинамическаяГруппировка = ТекущаяСтрокаРодитель.Объект;
		 ИначеЕсли ТипЗнч(ТекущаяСтрокаРодитель.Объект) = Тип("Строка") Тогда
			 ТекущаяДинамическаяГруппировка = "Не заполнено";		
		 КонецЕсли;
		 
		КорневаяГруппа = СвязьТиповОбъектовМониторингаИКорневыхГрупп[ТипЗнч(ДанныеОбновляемойСтроки.Объект)];
		                                                                                                                                                    
		НазваниеГруппировки = "ВидГруппировки" + ВидГруппировки;
		Если ЗначениеЗаполнено(ДанныеОбновляемойСтроки[НазваниеГруппировки]) Тогда
			НоваяДинамическаяГруппировка = ДанныеОбновляемойСтроки[НазваниеГруппировки];
		Иначе
			НоваяДинамическаяГруппировка = "Не заполнено";
		КонецЕсли;
					
		// Если старая и новая группировки отличаются, то нужно переносить строку в другую группировку.
		Если НЕ НоваяДинамическаяГруппировка = ТекущаяДинамическаяГруппировка Тогда
			СтрокаНовойДинамическойГруппировки = Неопределено;
			ОтборТаблицыИндексов = Новый Структура("Объект, КорневаяГруппа", НоваяДинамическаяГруппировка, КорневаяГруппа);
			НайденныеСтрокиИндексов = ИндексыПостроенияДинамическихГруппировок_ТЗ.НайтиСтроки(ОтборТаблицыИндексов);
			Если НайденныеСтрокиИндексов.Количество() > 0 Тогда
				ИндексНовойГруппировкиВДеревеОбъектов = НайденныеСтрокиИндексов[0].ИндексДерева;
				СтрокаНовойДинамическойГруппировки = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(ИндексНовойГруппировкиВДеревеОбъектов);
			ИначеЕсли НоваяДинамическаяГруппировка = "Не заполнено" Тогда
				СтрокаКорневойГруппыВТаблицеИндексов = ИндексыПостроенияДинамическихГруппировок_ТЗ.Найти(КорневаяГруппа, "Объект");
				Если НЕ СтрокаКорневойГруппыВТаблицеИндексов = Неопределено Тогда
					КорневаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(СтрокаКорневойГруппыВТаблицеИндексов.ИндексДерева);
					СтрокаНовойДинамическойГруппировки = КорневаяСтрока.ПолучитьЭлементы().Добавить();
					СтрокаНовойДинамическойГруппировки.Объект = "Не заполнено";
					СтрокаНовойДинамическойГруппировки.Картинка = 0;
					СтрокаНовойДинамическойГруппировки.ЭтоГруппа = Истина;
				КонецЕсли; 
			КонецЕсли;
			
			Если СтрокаНовойДинамическойГруппировки = Неопределено Тогда
				ВызватьИсключение "Таблица индексов не согласована с деревом объектов мониторинга. Требуется повторное открытие формы";
			КонецЕсли;

			// Проверка является ли переносимая строка текущей строкой.
			ПереноситьФокусСтроки = Ложь;
			Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = Неопределено Тогда
				ИдентификаторСтроки = ОбновляемаяСтрока.ПолучитьИдентификатор();
				ТекСтрокаФормы = Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока;
				Если ТекСтрокаФормы = ИдентификаторСтроки Тогда
					ПереноситьФокусСтроки = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ БлижайшийРодительСсылочногоТипа = Неопределено Тогда 
				// Если переносим из группы, которая является "ссылочной" и при этом такой группы не было создано ранее в новой динамической группировке,
				//	то создаем новую группу, аналогичную ссылочной (дубль).
				ПараметрыОтбораСуществующаяГруппаСсылочногоТипа = Новый Структура;
				ПараметрыОтбораСуществующаяГруппаСсылочногоТипа.Вставить("Объект", БлижайшийРодительСсылочногоТипа);
				ПараметрыОтбораСуществующаяГруппаСсылочногоТипа.Вставить("ДинамическаяГруппировкаРодитель", НоваяДинамическаяГруппировка);
				
				// "Дубль" ссылочной группы может быть уже создан внутри динамической группировки с корректной иерархией.
				ИдентификаторСуществующейГруппыСсылочногоТипа = Неопределено;
				НайденныеСтроки = ИндексыПостроенияДинамическихГруппировок_ТЗ.НайтиСтроки(ПараметрыОтбораСуществующаяГруппаСсылочногоТипа);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИдентификаторСуществующейГруппыСсылочногоТипа = НайденныеСтроки[0].ИндексДерева;
				КонецЕсли;
				
				Если ИдентификаторСуществующейГруппыСсылочногоТипа = Неопределено Тогда					
					ВсеРодителиСсылочногоТипаВОбратномПорядке = Новый Массив;
					ВсеРодителиСсылочногоТипаВОбратномПорядке.Добавить(БлижайшийРодительСсылочногоТипа);
					ЗаполнитьСтекИерархииСсылочногоТипа(ВсеРодителиСсылочногоТипаВОбратномПорядке, ТекущаяСтрокаРодитель);
				
					ВсеРодителиСсылочногоТипа = Новый Массив;
					Для Счетчик = -ВсеРодителиСсылочногоТипаВОбратномПорядке.ВГраница() По 0 Цикл
						ВсеРодителиСсылочногоТипа.Добавить(ВсеРодителиСсылочногоТипаВОбратномПорядке[-Счетчик]);		 
					КонецЦикла;
			 
					ВнешнийСчетчик = 0;
					НоваяСтрокаРодитель = ПостроитьИерархиюСсылочногоТипа(СтрокаНовойДинамическойГруппировки, 
																		  ВсеРодителиСсылочногоТипа, 
																		  ВнешнийСчетчик, 
																		  ИндексыПостроенияДинамическихГруппировок_ТЗ, 
																		  СтрокаНовойДинамическойГруппировки);
					
					Если НоваяСтрокаРодитель = Неопределено Тогда
						ВызватьИсключение "Ошибка при формировании динамических группировок. Требуется повторное открытие формы";
					КонецЕсли;
				Иначе	
					НоваяСтрокаРодитель = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(ИдентификаторСуществующейГруппыСсылочногоТипа);
				КонецЕсли;
			Иначе
				НоваяСтрокаРодитель = СтрокаНовойДинамическойГруппировки;
			КонецЕсли;
			
			// Переносим строку дерева в новую группировку/группу ТС.
			НоваяСтрокаДерева = НоваяСтрокаРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ОбновляемаяСтрока);
				
			ТекущаяСтрокаРодитель.ПолучитьЭлементы().Удалить(ОбновляемаяСтрока);
			
			// Если строк в старой "ссылочной" группировке не осталось, то удаляем такую группировку.
			Если ЗначениеЗаполнено(БлижайшийРодительСсылочногоТипа) Тогда
				ОбработатьОчисткуГруппРекурсивно(ТекущаяСтрокаРодитель);
			КонецЕсли;
			
			УстановитьПометкиСервер(НоваяСтрокаДерева.ПолучитьРодителя());
			
			Если ПереноситьФокусСтроки Тогда
				ИндексТекущейСтроки = НоваяСтрокаДерева.ПолучитьИдентификатор();	
			КонецЕсли;
			
			СтрокаРезультатОбновления = НоваяСтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат СтрокаРезультатОбновления;
	
КонецФункции

&НаСервере
Процедура ОбновитьИндексыПостроенияДинамическихГруппировок()
	
	Если ПолучитьФункциональнуюОпцию("ItobИспользоватьДинамическиеГруппировки") Тогда
		ИндексыПостроенияДинамическихГруппировок.Очистить();
		ЗаполнитьИндексыПостроенияДинамическихГруппировок(ДеревоОбъектовМониторинга);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИндексыПостроенияДинамическихГруппировок(Родитель)
	
	ТипыОбъектовМониторинга = ItobВызовСервераПовтИсп.ТипыВходящиеВОбъектМониторинга();
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		НовСтрока = ИндексыПостроенияДинамическихГруппировок.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаДерева);
		
		РодительСсылочногоТипа = Неопределено;
		ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		Если НЕ ТекущийРодитель = Неопределено
			 И НЕ ТипыОбъектовМониторинга.Найти(ТипЗнч(ТекущийРодитель.Объект)) = Неопределено Тогда
			 
			РодительСсылочногоТипа = ТекущийРодитель.Объект;
		КонецЕсли;
		НовСтрока.РодительСсылочногоТипа = РодительСсылочногоТипа;
		
		НовСтрока.ДинамическаяГруппировкаРодитель = НайтиДинамическуюГруппировкуРодителя(СтрокаДерева);
		
		КорневаяГруппа = РодительВерхнегоУровня(СтрокаДерева);
		НовСтрока.КорневаяГруппа = КорневаяГруппа;
		
		НовСтрока.ИндексДерева = СтрокаДерева.ПолучитьИдентификатор();
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьИндексыПостроенияДинамическихГруппировок(СтрокаДерева);	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РодительВерхнегоУровня(СтрокаДерева)
	
	ТекРодитель = СтрокаДерева.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		Возврат СтрокаДерева.Объект;
	Иначе
		Возврат РодительВерхнегоУровня(ТекРодитель);
	КонецЕсли; 	
		
КонецФункции

&НаСервере
Функция НайтиДинамическуюГруппировкуРодителя(СтрокаДерева)
	
	ТекРодитель = СтрокаДерева.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		Возврат "";		
	ИначеЕсли ТекРодитель.Объект = "Не заполнено" 
		 	  ИЛИ ТипЗнч(ТекРодитель.Объект) = Тип("СправочникСсылка.ItobВидыГруппировок") Тогда
		 
		Возврат ТекРодитель.Объект;
	Иначе
		Возврат НайтиДинамическуюГруппировкуРодителя(ТекРодитель);
	КонецЕсли; 	
		
КонецФункции

&НаСервере
Процедура ЗаполнитьСтекИерархииСсылочногоТипа(СтекИерархии, СтрокаДерева)
	
	ТекРодитель = СтрокаДерева.ПолучитьРодителя();
	Если ТипЗнч(ТекРодитель.Объект) = ТипЗнч(СтрокаДерева.Объект) Тогда
		СтекИерархии.Добавить(ТекРодитель.Объект);
		ЗаполнитьСтекИерархииСсылочногоТипа(СтекИерархии, ТекРодитель);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОчисткуГруппРекурсивно(СтрокаДерева)
	
	РодительУдаляемогоЭлемента = СтрокаДерева.ПолучитьРодителя();
	Если РодительУдаляемогоЭлемента = Неопределено Тогда
		Возврат;  // Элементы верхнего уровня не обрабатываются.
	КонецЕсли;

	// Могут удаляться пустые ветви динамической группировки "Не заполнено" и не корневые "ссылочные" группировки.
	РазрешеноУдалениеВетви = НЕ (ТипЗнч(СтрокаДерева.Объект) = Тип("СправочникСсылка.ItobВидыГруппировок"));		
	Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда	
		Если РазрешеноУдалениеВетви Тогда
			РодительУдаляемогоЭлемента.ПолучитьЭлементы().Удалить(СтрокаДерева);
		Иначе
			СтрокаДерева.Пометка = 0;
		КонецЕсли;
		
		ОбработатьОчисткуГруппРекурсивно(РодительУдаляемогоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПостроитьИерархиюСсылочногоТипа(ТекущаяСтрокаДерева, 
										ВсеРодители, 
										ВнешнийСчетчик, 
										ИндексыПостроенияДинамическихГруппировок_ТЗ, 
										ТекущаяДинамическаяГруппировка)
	
	Если ВнешнийСчетчик = ВсеРодители.Количество() Тогда
		Возврат ТекущаяСтрокаДерева;
	КонецЕсли;
	
	НоваяГруппировка = Неопределено;
	
	ОтборНоваяГруппировкаСуществует = Новый Структура;
	ОтборНоваяГруппировкаСуществует.Вставить("ДинамическаяГруппировкаРодитель", ТекущаяДинамическаяГруппировка.Объект);
	ОтборНоваяГруппировкаСуществует.Вставить("РодительСсылочногоТипа", ?(ВнешнийСчетчик = 0, Неопределено, ВсеРодители[ВнешнийСчетчик - 1]));
	ОтборНоваяГруппировкаСуществует.Вставить("Объект", ВсеРодители[ВнешнийСчетчик]);
	НайденныеСтроки = ИндексыПостроенияДинамическихГруппировок_ТЗ.НайтиСтроки(ОтборНоваяГруппировкаСуществует);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НоваяГруппировка = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(НайденныеСтроки[0].ИндексДерева);
	Иначе
		НоваяГруппировка = ТекущаяСтрокаДерева.ПолучитьЭлементы().Добавить();
		НоваяГруппировка.Объект = ВсеРодители[ВнешнийСчетчик];
		НоваяГруппировка.Картинка = 0;
		НоваяГруппировка.ЭтоГруппа = Истина;
	КонецЕсли;
			
	ВнешнийСчетчик = ВнешнийСчетчик + 1;
	Возврат ПостроитьИерархиюСсылочногоТипа(НоваяГруппировка, 
											ВсеРодители, 
											ВнешнийСчетчик, 
											ИндексыПостроенияДинамическихГруппировок_ТЗ, 
											ТекущаяДинамическаяГруппировка);
		
КонецФункции

&НаСервере
Функция СвязьТиповОбъектовМониторингаИКорневыхГрупп()

	СвязьРезультат = Новый Соответствие;
	
	СвязьТиповОбъектовМониторингаСоСвойствами = ItobВызовСервераПовтИсп.СвязьТиповОбъектовМониторингаСоСвойствами();
	Для каждого КлючИЗначение Из СвязьТиповОбъектовМониторингаСоСвойствами Цикл
		СвойстваОбъектаМониторинга = КлючИЗначение.Значение;
 		СвязьРезультат.Вставить(КлючИЗначение.Ключ, СвойстваОбъектаМониторинга.Синоним);
	КонецЦикла;
	
	
	Возврат СвязьРезультат;
							
КонецФункции

#КонецОбласти


#Область ДинамическоеОформление

&НаСервере
Процедура ПерезаполнитьДанныеВариантовДинамическогоОформления(ВыборкаПоВариантамОформления)
	
	КешСвойствВариантовДинамическогоОформления.Очистить();
	
	Пока ВыборкаПоВариантамОформления.Следующий() Цикл
		ДобавитьВариантДинамическогоОформленияВКеш(ВыборкаПоВариантамОформления);		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВариантДинамическогоОформленияВКеш(ВыборкаИсточник)
	
	РеквизитыВарианта = ИнициализироватьРеквизитыВариантаДинамическогоОформления();
	ЗаполнитьЗначенияСвойств(РеквизитыВарианта, ВыборкаИсточник);
	
	РеквизитыВарианта.ИдентификаторНовойИконки = ЗакешироватьИконкуНаФорме(РеквизитыВарианта.Карта_НоваяИконка).Идентификатор;
	
	НоваяСтрока = КешСвойствВариантовДинамическогоОформления.Добавить();
	НоваяСтрока.ВариантОформления = ВыборкаИсточник.ВариантСсылка;
	НоваяСтрока.РеквизитыВарианта = РеквизитыВарианта;
	
КонецПроцедуры
 
&НаСервере
Процедура АктуализироватьДанныеВариантовДинамическогоОформления(ВыборкаПоИзмененнымВариантамОформления)
	
	ТребуетсяОбновитьКаталогИконокНаCsmSvc = Ложь;
	
	Пока ВыборкаПоИзмененнымВариантамОформления.Следующий() Цикл
		РеквизитыВарианта = РеквизитыВариантаДинамическогоОформления(ВыборкаПоИзмененнымВариантамОформления.ВариантСсылка);	
		Если РеквизитыВарианта = Неопределено Тогда
			ДобавитьВариантДинамическогоОформленияВКеш(ВыборкаПоИзмененнымВариантамОформления);
			
			// Добавлен новый вариант дин. оформления - придется обновить все иконки.
			ТребуетсяОбновитьКаталогИконокНаCsmSvc = Истина;
		Иначе
			ЗаполнитьЗначенияСвойств(РеквизитыВарианта, ВыборкаПоИзмененнымВариантамОформления);
			
			ИдентификаторИконки = ЗакешироватьИконкуНаФорме(РеквизитыВарианта.Карта_НоваяИконка).Идентификатор;
			Если НЕ ИдентификаторИконки = РеквизитыВарианта.ИдентификаторНовойИконки Тогда      //Fixit
				РеквизитыВарианта.ИдентификаторНовойИконки = ИдентификаторИконки;
				
				// Вариант дин. оформления отредактировали (изменили иконку).
				//	Снова придется обновить все картинки.
				ТребуетсяОбновитьКаталогИконокНаCsmSvc = Истина;
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла; 
	
	Если ТребуетсяОбновитьКаталогИконокНаCsmSvc Тогда
		ОбновитьИконкиНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыВариантаДинамическогоОформления(ВариантДинамическогоОформления)
	
	Если НЕ ЗначениеЗаполнено(ВариантДинамическогоОформления) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	НайденныеСтроки = КешСвойствВариантовДинамическогоОформления.НайтиСтроки(Новый Структура("ВариантОформления", 
																							 ВариантДинамическогоОформления));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	
	Возврат НайденныеСтроки[0].РеквизитыВарианта;
	
КонецФункции
 
&НаСервере
Функция ИнициализироватьРеквизитыВариантаДинамическогоОформления()
	
	РеквизитыВарианта = Новый Структура;
	Для каждого Реквизит Из Метаданные.Справочники.ItobВариантыДинамическогоОформления.Реквизиты Цикл
		РеквизитыВарианта.Вставить(Реквизит.Имя);	
	КонецЦикла; 
	
	РеквизитыВарианта.Вставить("ИдентификаторНовойИконки");
	
	
	Возврат РеквизитыВарианта;
	
КонецФункции


#Область ДинамическоеОформление_Список

&НаСервере
Процедура ДобавитьДинамическоеУсловноеОформлениеОбъектаМониторинга(ОбъектМониторинга, ВариантДинамическогоОформления)
	
	РеквизитыВарианта = РеквизитыВариантаДинамическогоОформления(ВариантДинамическогоОформления);
	Если РеквизитыВарианта = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ РеквизитыВарианта.ДляСписка Тогда
		Возврат;	
	КонецЕсли;
	
	РедактируемыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЗаполнитьЭлементУсловногоОформленияПоДаннымВарианта(РедактируемыйЭлементУсловногоОформления, ОбъектМониторинга, РеквизитыВарианта);
	
	РедактируемаяСтрокаУО = КешДинамическогоУсловногоОформления.Добавить();
	РедактируемаяСтрокаУО.ОбъектМониторинга = ОбъектМониторинга;
	РедактируемаяСтрокаУО.ИдентификаторЭлементаУсловногоОформления = УсловноеОформление.ПолучитьИдентификаторПоОбъекту(РедактируемыйЭлементУсловногоОформления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементУсловногоОформленияПоДаннымВарианта(РедактируемыйЭлементУсловногоОформления, ОбъектМониторинга, РеквизитыВарианта)
	
	ОформляемоеПоле = РедактируемыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМониторинга");
	
	ЭлементОтбора = РедактируемыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМониторинга.Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОбъектМониторинга;
	
	Если РеквизитыВарианта.Список_ЦветФона >= 0 Тогда		
		ИспользуемыйЦветФона = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(РеквизитыВарианта.Список_ЦветФона);
		РедактируемыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ИспользуемыйЦветФона);
	КонецЕсли; 
	
	Если РеквизитыВарианта.Список_ЦветНадписи >= 0 Тогда		
		ИспользуемыйЦветНадписи = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(РеквизитыВарианта.Список_ЦветНадписи);
		РедактируемыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ИспользуемыйЦветНадписи);
	КонецЕсли; 																  
																	  
КонецПроцедуры

&НаСервере
Процедура АктуализироватьДинамическоеУсловноеОформлениеОбъекта(ОбъектМониторинга, ВариантДинамическогоОформления)
	
	РеквизитыВарианта = РеквизитыВариантаДинамическогоОформления(ВариантДинамическогоОформления);
	Если РеквизитыВарианта = Неопределено
		 ИЛИ НЕ РеквизитыВарианта.ДляСписка Тогда
		 
		ОчиститьУсловноеОформлениеОбъектаМониторинга(ОбъектМониторинга);
		
		Возврат;	
	КонецЕсли; 
	
	НайденныеСтроки = КешДинамическогоУсловногоОформления.НайтиСтроки(Новый Структура("ОбъектМониторинга", ОбъектМониторинга));
	Если НайденныеСтроки.Количество() = 0 Тогда	 
		РедактируемаяСтрокаКешаУО = КешДинамическогоУсловногоОформления.Добавить();
		РедактируемаяСтрокаКешаУО.ОбъектМониторинга = ОбъектМониторинга;	
	Иначе
		РедактируемаяСтрокаКешаУО = НайденныеСтроки[0];
		
		НайденныйЭлементУО = УсловноеОформление.ПолучитьОбъектПоИдентификатору(РедактируемаяСтрокаКешаУО.ИдентификаторЭлементаУсловногоОформления);
		Если НЕ НайденныйЭлементУО = Неопределено Тогда		 
			УсловноеОформление.Элементы.Удалить(НайденныйЭлементУО);
		КонецЕсли;	
	КонецЕсли; 
	
	РедактируемыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЗаполнитьЭлементУсловногоОформленияПоДаннымВарианта(РедактируемыйЭлементУсловногоОформления, 
														ОбъектМониторинга, 
														РеквизитыВарианта);
	
	РедактируемаяСтрокаКешаУО.ИдентификаторЭлементаУсловногоОформления = УсловноеОформление.ПолучитьИдентификаторПоОбъекту(РедактируемыйЭлементУсловногоОформления);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУсловноеОформлениеОбъектаМониторинга(ОбъектМониторинга)
	
	НайденныеСтроки = КешДинамическогоУсловногоОформления.НайтиСтроки(Новый Структура("ОбъектМониторинга", ОбъектМониторинга));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	РедактируемаяСтрокаКешаУО = НайденныеСтроки[0];
	
	НайденныйЭлементУО = УсловноеОформление.ПолучитьОбъектПоИдентификатору(РедактируемаяСтрокаКешаУО.ИдентификаторЭлементаУсловногоОформления);
	Если НЕ НайденныйЭлементУО = Неопределено Тогда
		УсловноеОформление.Элементы.Удалить(НайденныйЭлементУО);	
	КонецЕсли; 
	
	КешДинамическогоУсловногоОформления.Удалить(РедактируемаяСтрокаКешаУО);
	
КонецПроцедуры
 
#КонецОбласти 

#Область ДинамическоеОформление_Карта

&НаСервере
Функция ПараметрыДинамическогоОформленияНаКарте(ИдентификаторСтрокиДереваОбъектов)
	
	СтрокаДереваОбъектов = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(ИдентификаторСтрокиДереваОбъектов);
	Если СтрокаДереваОбъектов = Неопределено Тогда
		ВызватьИсключение "Параметры динамического оформления не могут быть применены: не найдена строка дерева объектов мониторинга";	
	КонецЕсли; 
	
	ПараметрыДинамическогоОформления = Новый Структура;
	ПараметрыДинамическогоОформления.Вставить("ИспользуемыйЦветНадписи", СтрокаДереваОбъектов.ЦветНадписиНаКарте);
	ПараметрыДинамическогоОформления.Вставить("СкрытьИконки", Ложь);
	ПараметрыДинамическогоОформления.Вставить("ПутьКОтображаемойИконкеНаВебСервереБезРасширения", СтрШаблон("%1../cache/%2/%3",
																								 			ВебСсылкаСервер,
																								 			НазваниеКаталогаСкриптов,
																								 			СтрокаДереваОбъектов.ИдентификаторИконки));
	ПараметрыДинамическогоОформления.Вставить("СкриптНоваяВспомогательнаяИконкаПоверхОбъекта", "");
	
	
	РеквизитыВарианта = РеквизитыВариантаДинамическогоОформления(СтрокаДереваОбъектов.ВариантДинамическогоОформления);
	Если РеквизитыВарианта = Неопределено Тогда
		Возврат ПараметрыДинамическогоОформления;	
	КонецЕсли; 
	
	Если НЕ РеквизитыВарианта.ДляКарты Тогда
		Возврат ПараметрыДинамическогоОформления;	
	КонецЕсли; 
	
	ДинамическоеОформление_УстановитьЦветНадписиНаКарте(РеквизитыВарианта, 
														ПараметрыДинамическогоОформления.ИспользуемыйЦветНадписи);
	
	ДинамическоеОформление_УстановитьПутьКОтображаемойИконке(РеквизитыВарианта, 
															 СтрокаДереваОбъектов, 
															 ПараметрыДинамическогоОформления.ПутьКОтображаемойИконкеНаВебСервереБезРасширения);
	
	ДинамическоеОформление_УстановитьСкриптНовойВспомогательнойИконки(РеквизитыВарианта, 
																	  ПараметрыДинамическогоОформления.СкриптНоваяВспомогательнаяИконкаПоверхОбъекта);
	
	
	ПараметрыДинамическогоОформления.СкрытьИконки = (ПараметрыДинамическогоОформления.ПутьКОтображаемойИконкеНаВебСервереБезРасширения = Неопределено);
	
	
	Возврат ПараметрыДинамическогоОформления;
	
КонецФункции
 
&НаСервере
Процедура ДинамическоеОформление_УстановитьЦветНадписиНаКарте(РеквизитыВарианта, ЦветНадписи)
	
	Если РеквизитыВарианта.Карта_ЦветНадписи < 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	ЦветНадписи = РеквизитыВарианта.Карта_ЦветНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ДинамическоеОформление_УстановитьПутьКОтображаемойИконке(РеквизитыВарианта, СтрокаОбъектов, ПутьКИконке)
	
	Если РеквизитыВарианта.Карта_ДействиеСТекущейИконкой = Перечисления.ItobДействияСИконкамиВДинамическомОформлении.НетДействия
		 ИЛИ РеквизитыВарианта.Карта_ДействиеСТекущейИконкой = Перечисления.ItobДействияСИконкамиВДинамическомОформлении.ВывестиРядомВыбраннуюИконку Тогда
		 
		Возврат;	
	КонецЕсли; 
	
	ИдентификаторПодобраннойИконки = Неопределено;	// При значении = Неопределено иконка будет скрыта (соответствует значению "Скрыть").
	Если РеквизитыВарианта.Карта_ДействиеСТекущейИконкой = Перечисления.ItobДействияСИконкамиВДинамическомОформлении.ЗаменитьДополнительнойИконкой Тогда
		ИдентификаторПодобраннойИконки = СтрокаОбъектов.ИдентификаторДополнительнойИконки;	
	ИначеЕсли РеквизитыВарианта.Карта_ДействиеСТекущейИконкой = Перечисления.ItobДействияСИконкамиВДинамическомОформлении.ЗаменитьВыбраннойИконкой Тогда 
		ИдентификаторПодобраннойИконки = РеквизитыВарианта.ИдентификаторНовойИконки;			
	КонецЕсли;
	
	Если ИдентификаторПодобраннойИконки = Неопределено Тогда
		ПутьКИконке = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПутьКИконке = СтрШаблон("%1../cache/%2/%3",
							ВебСсылкаСервер,
							НазваниеКаталогаСкриптов,
							ИдентификаторПодобраннойИконки);
КонецПроцедуры

&НаСервере
Процедура ДинамическоеОформление_УстановитьСкриптНовойВспомогательнойИконки(РеквизитыВарианта, СкриптНовойИконки)
	
	Если НЕ РеквизитыВарианта.Карта_ДействиеСТекущейИконкой = Перечисления.ItobДействияСИконкамиВДинамическомОформлении.ВывестиРядомВыбраннуюИконку
		 ИЛИ НЕ ЗначениеЗаполнено(РеквизитыВарианта.ВыравниваниеДопИконки_ВариантОтносительногоПоложения) Тогда 
		 
		Возврат;	
	КонецЕсли;	
	
	ПутьКВспомогательнойИконкеБезРасширения = СтрШаблон("%1../cache/%2/%3",
										  	 			ВебСсылкаСервер,
										   				НазваниеКаталогаСкриптов,
										   				РеквизитыВарианта.ИдентификаторНовойИконки);
	
	СкриптНовойИконки = 
	"var offsetStatus = new OpenLayers.Pixel($БазовыйСдвигПоОсиАбсцисс + $ДопСдвигПоОсиАбсцисс , $БазовыйСдвигПоОсиОрдинат + $ДопСдвигПоОсиОрдинат );
	|var marker = new OpenLayers.Marker(pt, new OpenLayers.Icon(""$ПутьКВспомогательнойИконкеБезРасширения.png"",size,offsetStatus));
	|markersLayer.addMarker(marker);
	|";
	
	// По умолчанию новая картинка размещается прямо над главной с учетом заданных пользователем сдвигов.
	БазовыйСдвигПоОсиАбсцисс = "-(size.w/2)";
	БазовыйСдвигПоОсиОрдинат = "-(size.h/2)";
	ДопСдвигПоОсиАбсцисс = XMLСтрока(РеквизитыВарианта.ВыравниваниеДопИконки_СдвигПоОсиАбсцисс);
	ДопСдвигПоОсиОрдинат = XMLСтрока(-РеквизитыВарианта.ВыравниваниеДопИконки_СдвигПоОсиОрдинат);
	
	Если РеквизитыВарианта.ВыравниваниеДопИконки_ВариантОтносительногоПоложения 
				= Перечисления.ItobВариантыОтносительногоПоложенияДополнительныхИконок.НадОсновнойИконкой Тогда
				
		БазовыйСдвигПоОсиАбсцисс = "-(size.w/2)";					
		БазовыйСдвигПоОсиОрдинат = "-3*(size.h/2)";
	ИначеЕсли РеквизитыВарианта.ВыравниваниеДопИконки_ВариантОтносительногоПоложения 
			  		= Перечисления.ItobВариантыОтносительногоПоложенияДополнительныхИконок.ПодОсновнойИконкой Тогда 	
							
		БазовыйСдвигПоОсиАбсцисс = "-(size.w/2)";					
	    БазовыйСдвигПоОсиОрдинат = "(size.h/2)";
	КонецЕсли; 
	
	СкриптНовойИконки = СтрЗаменить(СкриптНовойИконки, "$ПутьКВспомогательнойИконкеБезРасширения", ПутьКВспомогательнойИконкеБезРасширения);
	СкриптНовойИконки = СтрЗаменить(СкриптНовойИконки, "$БазовыйСдвигПоОсиАбсцисс", БазовыйСдвигПоОсиАбсцисс);
	СкриптНовойИконки = СтрЗаменить(СкриптНовойИконки, "$БазовыйСдвигПоОсиОрдинат", БазовыйСдвигПоОсиОрдинат);
	СкриптНовойИконки = СтрЗаменить(СкриптНовойИконки, "$ДопСдвигПоОсиАбсцисс", ДопСдвигПоОсиАбсцисс);
	СкриптНовойИконки = СтрЗаменить(СкриптНовойИконки, "$ДопСдвигПоОсиОрдинат", ДопСдвигПоОсиОрдинат);
	
КонецПроцедуры
 
#КонецОбласти 

#КонецОбласти 


// Заполнение строка дерева объектов
//
&НаСервере
Процедура ЗаполнитьСтрокиДереваОбъектов(Результат, Строки)
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Объект) Тогда
			// Элементы первого уровня.
			ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, Строки);
			
			Продолжить;
		КонецЕсли;
		
		НовСтрокаДерева = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаДерева, СтрокаРезультата);
		НовСтрокаДерева.ЭтоГруппа = СтрокаРезультата.ЭтоГруппа;
		
		Если НЕ НовСтрокаДерева.ЭтоГруппа Тогда
			НовСтрокаДерева.ТерминалУИД = Строка(НовСтрокаДерева.Терминал.УникальныйИдентификатор());
			
			ДобавитьДинамическоеУсловноеОформлениеОбъектаМониторинга(НовСтрокаДерева.Объект, НовСтрокаДерева.ВариантДинамическогоОформления);
		КонецЕсли;
				
		НовСтрокаДерева.ИдентификаторИконки = ЗакешироватьИконкуНаФорме(НовСтрокаДерева.ИконкаНаКарте).Идентификатор;
		НовСтрокаДерева.ИдентификаторДополнительнойИконки = ЗакешироватьИконкуНаФорме(НовСтрокаДерева.ДополнительнаяИконкаНаКарте).Идентификатор;
						
		Если СтрокаРезультата.ЭтоГруппа = Истина Тогда
			Если СтрокаРезультата.Родитель.Объект = СтрокаРезультата.Объект Тогда
				Строки.Удалить(НовСтрокаДерева);
				ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, Строки);		
		    Иначе
				ЗаполнитьСтрокиДереваОбъектов(СтрокаРезультата.Строки, НовСтрокаДерева.Строки);		
		    КонецЕсли; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполнение дерева объектов - объекты с пометкой 
//
&НаСервере
Процедура ЗаполнитьТаблицуОбъектовСПометкой(СтрокиДерева, ТаблицаОбъектовСПометкой)
	
	Для Каждого СтрокаКопииДерева Из СтрокиДерева Цикл
		
		Если СтрокаКопииДерева.Пометка > 0 Тогда
			НовСтрокаОбъектов = ТаблицаОбъектовСПометкой.Добавить();
			НовСтрокаОбъектов.Объект = СтрокаКопииДерева.Объект;
			НовСтрокаОбъектов.Пометка = СтрокаКопииДерева.Пометка;			
		
		КонецЕсли;		
		
		Если СтрокаКопииДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуОбъектовСПометкой(СтрокаКопииДерева.Строки, ТаблицаОбъектовСПометкой)	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОбъектовСПометкой()

// Обновление дерева деталей 
//
&НаСервере
Процедура ОбновитьДеревоДеталей(Данные)
	
	Дерево = РеквизитФормыВЗначение("ДеревоДатчиков");
	
	Дерево.Строки.Очистить();
	
	ТабДеталей = ПолучитьДеталиДатчика(Данные);
	Для каждого СтрТабДеталей Из ТабДеталей Цикл
		НовСтрокаДетали = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаДетали, СтрТабДеталей);		
		НовСтрокаДетали.Терминал = Данные.Терминал;	
		НовСтрокаДетали.Объект = Данные.Объект;	
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДатчиков");
		
КонецПроцедуры // ОбновитьДеревоДеталей()

// Процедура изменяет подменю местоположения.
//
&НаСервере
Процедура ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты)

	ВыбраннаяКнопка = Неопределено;
	Счетчик = 1;
	Для каждого ТекущаяКнопка Из Элементы.ПодменюВыборКарты.ПодчиненныеЭлементы Цикл
		
		Если Счетчик = НомерВыбраннойКарты Тогда
		
			ВыбраннаяКнопка = ТекущаяКнопка;
			ТекущаяКнопка.Пометка = Истина;
			
		Иначе
			ТекущаяКнопка.Пометка = Ложь;
		
		КонецЕсли;
				
		Счетчик = Счетчик+1;
	
	КонецЦикла;
		
	ТекущееМестоположение = Справочники.ItobМестоположенияПоУмолчанию.НайтиПоКоду(Сред(ВыбраннаяКнопка.Имя, 3));
	ТекущийМасштаб = ТекущееМестоположение.Масштаб;
	ТекущаяШирота = ТекущееМестоположение.Широта;
	ТекущаяДолгота = ТекущееМестоположение.Долгота;
	
	Если ЗначениеЗаполнено(ТекущееМестоположение) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКарты", "МестоположениеПоУмолчанию", ТекущееМестоположение);			
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПодменюВыбораМестоположенияНаСервере()

// По текущему объекту определяем местоположение
//
&НаКлиенте
Процедура ОпределитьИЗаполнитьМестоположение()
		
	Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные = Неопределено Тогда
		
		ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
		
		СтруктураДанных = Новый Структура("Объект,АктуальностьДанных,Скорость,Направление,Терминал,ПериодUTC0,ДанныеДатчиков,Широта,Долгота");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
		
		ОбновитьДеревоДеталей(СтруктураДанных);
				
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИЗаполнитьМестоположение()

&НаСервере
Функция ПолучитьСкриптЗаправкиИСливы(МассивОбъектов, НачДата, КонДата, ТекстОшибки)
    	
	ТекстОшибки = "";
	РадиусФиксацииПоУмолчанию = ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку(50);
	МассивСтрок = Новый Массив;
	МасштабСлужебныхОбъектов = ItobОбщегоНазначения.МасштабыОбъектовНаКарте()["МасштабСлужебныхОбъектов"];
	
	КрайниеЗначенияКоординат = Новый Структура("МинШирота,МаксШирота,МинДолгота,МаксДолгота");	
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива];						
		
		ТаблицаДанные = Неопределено;
		ТаблицаЗаправки = Неопределено;
	
		пПараметры = Новый Структура;
		пПараметры.Вставить("НачПериода", НачДата);
		пПараметры.Вставить("КонПериода", КонДата);
		пПараметры.Вставить("Объект", 	  ТекущийОбъект);
		пПараметры.Вставить("Метод", 	  "Пробег");
		Если НЕ ItobОбработкаДанныхТопливоВызовСервера.ПолучитьДанныеТопливо(пПараметры, ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки, "ПоВсем") Тогда
		 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объект "+СокрЛП(ТекущийОбъект)+": "+ТекстОшибки);
			Продолжить;		
		
		КонецЕсли;
				
		МассивСтрок.Добавить(
		    "
			|playRouteLayer.removeAllFeatures();
			|
			|var pointList = [];
			|var pt = null;
			|var Features = [];
			|markersLayer.clearMarkers();
			|var ParckFeatures = [];");
		
		ТекущийОбъектОтображение = ItobОбщегоНазначения.ПолучитьНастройкиОтображенияОбъектов(ТекущийОбъект);	
		ВебЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ДесятичныйЦветВШестнадцатеричный(ТекущийОбъектОтображение.ЦветМаршрутаНаКарте);;
		
		НомерСтоянки = 1;		
				
		НомерЗаправки = 1;
		НомерСлива = 1;
		
		Если ТаблицаЗаправки.Количество() = 0 Тогда
		 	ТекстОшибки = НСтр("ru = 'За выбранный период заправки и сливы не обнаружены'");
		КонецЕсли; 
		РазмерИконкиСливыЗаправки = РазмерИконкиНаКарте(24, 24, МасштабСлужебныхОбъектов);
		
		Для каждого СтрСливыЗаправки Из ТаблицаЗаправки Цикл
			
			Если КрайниеЗначенияКоординат.МинШирота=Неопределено Тогда
				КрайниеЗначенияКоординат.МинШирота   = СтрСливыЗаправки.Широта;
				КрайниеЗначенияКоординат.МаксШирота  = СтрСливыЗаправки.Широта;
				КрайниеЗначенияКоординат.МинДолгота  = СтрСливыЗаправки.Долгота;
				КрайниеЗначенияКоординат.МаксДолгота = СтрСливыЗаправки.Долгота;
				
			Иначе
				КрайниеЗначенияКоординат.МинШирота   = Мин(КрайниеЗначенияКоординат.МинШирота,СтрСливыЗаправки.Широта);
				КрайниеЗначенияКоординат.МаксШирота  = МАКС(КрайниеЗначенияКоординат.МаксШирота,СтрСливыЗаправки.Широта);
				КрайниеЗначенияКоординат.МинДолгота  = Мин(КрайниеЗначенияКоординат.МинДолгота,СтрСливыЗаправки.Долгота);
				КрайниеЗначенияКоординат.МаксДолгота = МАКС(КрайниеЗначенияКоординат.МаксДолгота,СтрСливыЗаправки.Долгота);
			
			КонецЕсли;
			
			Если СтрСливыЗаправки.ТопливоИзменение < 0 Тогда
				Строка1 = НСтр("ru = 'Слив №'")+" "+НомерСлива+ " ("+Формат(-СтрСливыЗаправки.ТопливоИзменение,"ЧЦ=15")+" л)";
				ИмяИконки = "fill-down.png";
				
				НомерСлива = НомерСлива + 1;
				
			Иначе
				
				Строка1 = НСтр("ru = 'Заправка №'")+" "+НомерЗаправки+ " ("+Формат(СтрСливыЗаправки.ТопливоИзменение,"ЧЦ=15")+" л)";
				ИмяИконки = "fill-up.png";
				
				НомерЗаправки = НомерЗаправки + 1;
				
			КонецЕсли;			
			
			Строка2 = "Адрес: "+ItobОперативныйМониторинг.НайтиБлижайшийАдрес(СтрСливыЗаправки.Широта, СтрСливыЗаправки.Долгота, РадиусФиксацииПоУмолчанию);
			Строка3 = "Период "+Формат(СтрСливыЗаправки.Период, "ДФ='dd.MM.yy HH:mm'");
			
			НадписьHTML = 
				"<div style=""font:Courier New; font-size:12px; width:190px; height:90px; text-align:left; word-wrap:break-word;""><b>"
					+Строка1+"</b><br />"
					+Строка2+"<br />"
					+Строка3+"</div>";			
			
			МассивСтрок.Добавить("
				|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Долгота)
					+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Широта)+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|var size = new OpenLayers.Size(" + РазмерИконкиСливыЗаправки + ");
				|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
				|var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/"+ИмяИконки+"',size,offset);
				|
				|marker = new OpenLayers.Marker(pt,icon);
				|
				|marker.events.on({
				|	""mousedown"": function(event) { 
				|					
				|if (this.popup == null) {
				
				|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Долгота)
					+", "+ ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрСливыЗаправки.Широта)+");
				|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|	
				|	this.popup = new OpenLayers.Popup(""chicken"",
				|		pt,
				|		new OpenLayers.Size(200,100),
				|		'"+НадписьHTML+"'"+",
				|		true);
				|	this.popup.autoSize = true;
				|	m_map.addPopup(this.popup);
				|	this.popup.show();
				| } else {
				|     this.popup.toggle();
				| }
				| currentPopup = this.popup;
				| OpenLayers.Event.stop(event);
				|	}
				|   
				|});
				|	markersLayer.addMarker(marker);
				|");
			
			НомерСтоянки = НомерСтоянки+1;		
		
		КонецЦикла;
		
		МассивСтрок.Добавить("
			|//m_map.zoomToExtent(LineString.getBounds());
			|//===================================================");			
	
	КонецЦикла;
		
	Если КрайниеЗначенияКоординат.МинШирота = Неопределено Тогда
		// Ничего не делаем
		
	ИначеЕсли КрайниеЗначенияКоординат.МинШирота=КрайниеЗначенияКоординат.МаксШирота
		ИЛИ КрайниеЗначенияКоординат.МинДолгота=КрайниеЗначенияКоординат.МаксДолгота Тогда
		
		// Установим только центр карты
		
		МассивСтрок.Добавить("
			|var apt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинШирота)+");
			|apt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(apt, m_map.getZoom());");
			
	Иначе
		
		    МассивСтрок.Добавить("
			|var apt1 = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МинШирота)+");
			|apt1.transform(m_map.displayProjection, m_map.getProjectionObject());
			|var apt2 = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МаксДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(КрайниеЗначенияКоординат.МаксШирота)+");
			|apt2.transform(m_map.displayProjection, m_map.getProjectionObject());
			|bounds = new OpenLayers.Bounds();
			|bounds.extend(apt1);
			|bounds.extend(apt2);
			|m_map.zoomToExtent(bounds);");		
	
	КонецЕсли;	
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

// Функция возвращает скрипт для проигрывания маршрута
//
&НаСервере
Функция ПолучитьСкриптПроигратьМаршруты(МассивОбъектов, НачДата, КонДата)
    	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(
		"routes_list = [];
		|var pt = null;");
		
	МаксЧислоСекунд = 0;	
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива];
						
		Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(ТекущийОбъект, НачДата, КонДата);
		Если Маршрут.Количество() = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		МассивСтрок.Добавить(
			"var CurrentRoute = [];");
		
		Для Счетчик = 0 По Маршрут.Количество()-1 Цикл
			
			Если Маршрут[Счетчик].Долгота = Неопределено
				ИЛИ Маршрут[Счетчик].Широта = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ЧислоСекундСНачалаМаршрута = МАКС(Маршрут[Счетчик].Период-НачДата,0);
			МаксЧислоСекунд = МАКС(МаксЧислоСекунд,ЧислоСекундСНачалаМаршрута);
			
			МассивСтрок.Добавить(
				"pt = new OpenLayers.LonLat("+Формат(Маршрут[Счетчик].Долгота,"ЧРД=.; ЧН=0")
					+", "+Формат(Маршрут[Счетчик].Широта,"ЧРД=.; ЧН=0")+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|CurrentRoute.push([pt, "+Формат(ЧислоСекундСНачалаМаршрута,"ЧН=0; ЧГ=0")+",'"+Формат(Маршрут[Счетчик].Период,"ДФ='dd.MM.yy HH:mm:ss'")+"']);"
			);
			
		КонецЦикла;
		
		МассивСтрок.Добавить(
			"routes_list.push(CurrentRoute);");					
	
	КонецЦикла;

	МасштабСлужебныхОбъектов = ItobОбщегоНазначения.МасштабыОбъектовНаКарте()["МасштабСлужебныхОбъектов"];

	ШиринаМаркера = Окр(21 * МасштабСлужебныхОбъектов);
	ВысотаМаркера = Окр(25 * МасштабСлужебныхОбъектов);
	МассивСтрок.Добавить(
		"playRouteLayer.removeAllFeatures();
		|											
		|if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|	play_route_intervalid = null;
		|}
		|				
		|
		|var LayerFeatures = [];
		|
		|routes_list_pos = [];
		|for (var i = 0, len = routes_list.length; i < len; i++) {
		|						
		|	pt = routes_list[i][0][0];					
		|	
		|	var pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
		|						graphicWidth: " + ШиринаМаркера + ",
		|	                    graphicHeight: " + ВысотаМаркера + ",
		|	                    graphicXOffset: -10,
		|	                    graphicYOffset: -25,
		|	                    externalGraphic: """ + ВебСсылкаСервер + "img/marker-gold.png"",
		|	                    graphicOpacity: 1,
		|	                    fontSize: ""11px"",
		|	                    fontWeight: ""normal"",
		|	                    fontColor: ""0000ff"",
		|	                    labelYOffset: 12,
		|	                    labelXOffset: 12,
		|						labelAlign: ""lm"",
		|						labelHTMLFormat: true,				
		|	                    label : """"
		|	});
		|	LayerFeatures.push(pointFeature);
		|	
		|	routes_list_pos.push([0, pointFeature]);
		|}
		|
		|playRouteLayer.addFeatures(LayerFeatures);
		|
		|play_route_sec = 0;
		|play_route_max = " + Формат(МаксЧислоСекунд, "ЧН=0; ЧГ=0") + ";
		|play_route_k = " + Формат(КоэффициентУскоренияПроигрываниеМаршрута, "ЧН=0; ЧГ=0") + ";
		|play_route_start_date = new Date(" + Формат(Год(НачДата), "ЧГ=0") + "," + Формат(Месяц(НачДата)-1,"ЧН=0; ЧГ=0") + "," + День(НачДата) + "," + Час(НачДата) + "," + Минута(НачДата) + "," + Секунда(НачДата) + ",0);
		|play_route_pause = false;
		|play_route_intervalid = setInterval(PlayRouteHandlier, 100);		
		|play_route_progress = 0;
		|");	
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);		

КонецФункции // ПолучитьСкриптПроигратьМаршруты

// Установка пометки подчиненных элементов дерева.
//
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(СтрокаРодитель, ТекстАлгоритма, Параметры)

	Пометка     = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из Подчиненные Цикл
			ТекСтрока.Пометка = Пометка;
			
			УстановитьПометкиПодчиненных(ТекСтрока, ТекстАлгоритма, Параметры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Установка пометки родителей дерева.
//
&НаКлиенте
Процедура УстановитьПометкиРодителей(Родитель)

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	ВложенныеЭлементыСтроки = Родитель.ПолучитьЭлементы();
	
	Если ВложенныеЭлементыСтроки.Количество() > 0 Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для Каждого Строка Из ВложенныеЭлементыСтроки Цикл
	        Если Строка.Пометка = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Пометка = 1 ИЛИ Строка.Пометка = 2 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Пометка = 2;
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			Пометка = 1;
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			Пометка = 0;
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			Пометка = 2;
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиРодителей(Родитель.ПолучитьРодителя());
	
КонецПроцедуры // УстановитьПометкиРодителей()

// Установка пометок.
//
&НаКлиенте
Процедура УстановитьПометки(ТекущиеДанные, ТекстАлгоритма = "", Параметры = Неопределено)

	УстановитьПометкиПодчиненных(ТекущиеДанные, ТекстАлгоритма, Параметры);
	УстановитьПометкиРодителей(ТекущиеДанные.ПолучитьРодителя());

КонецПроцедуры // УстановитьПометки()

// Процедура заполняет массив подчиненных строк дерева объектов.
//
&НаКлиенте
Процедура СобратьОтмеченныеОбъектыДерева(Родитель, МассивОбъектов)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (СтрокаДерева.Пометка = 1) И (НЕ СтрокаДерева.ЭтоГруппа) Тогда
			МассивОбъектов.Добавить(СтрокаДерева);	
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			СобратьОтмеченныеОбъектыДерева(СтрокаДерева, МассивОбъектов);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // СобратьОтмеченныеОбъектыДерева()

// Действия при изменении флажка дерева объектов.
//
&НаКлиенте
Процедура ПриИзмененииФлажкаДереваОбъектов(ТекущиеДанные)
		
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	ТекстАлгоритма = "Отказ = Ложь;";
	
	УстановитьПометки(ТекущиеДанные, ТекстАлгоритма, Истина);

КонецПроцедуры // ПриИзмененииФлажкаДереваОбъектов()

// Процедура изменяет пометки дерева объектов.
//
&НаКлиенте
Процедура ИзменитьПометкиДереваОбъектов(ЭлементДерево, НовЗначение)
	
	Для Каждого СтрокаДерева Из ЭлементДерево.ПолучитьЭлементы() Цикл
		СтрокаДерева.Пометка = НовЗначение;
		УстановитьПометки(СтрокаДерева, "", Истина);	
	КонецЦикла;

КонецПроцедуры // ИзменитьПометкиДереваОбъектов()

// Процедура разворачивает дерево объектов мониторинга.
//
&НаКлиенте
Процедура РазвернутьДеревоОбъектовМониторинга()
    	
	ЭлементыДерева = ДеревоОбъектовМониторинга.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элементы.ДеревоОбъектовМаршруты.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
		Элементы.ДеревоОбъектовМониторинга.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;

КонецПроцедуры // РазвернутьДеревоОбъектовМониторинга()

// Процедура выполняет скрипт на поле HTML, с учетом вида браузера.
//
&НаКлиенте
Процедура ВыполнитьСкрипт(ТекстСкрипта)
	
	Если мСчетчикДокументСформирован < 1
		 ИЛИ Элементы.ПолеHTML.Документ = Неопределено
		 ИЛИ НЕ Элементы.ПолеHTML.Документ.readyState = "complete" Тогда
		
		Возврат;	
	КонецЕсли;
	
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);

КонецПроцедуры

// Функция возвращает признак загрузки HTML документа.
//
&НаКлиенте
Функция КартаЗагружена()
	
	Возврат ItobОбщегоНазначенияКлиент.КартаЗагружена(Элементы.ПолеHTML);
	
КонецФункции // КартаЗагружена()

// Функция возвращает имя файла иконки для обозначения объекта
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяИконки(ЗначениеХранения)
	СоответствиеИмен = ItobВызовСервераПовтИсп.ПолучитьИменаИконок();
	Картинка = СоответствиеИмен.Получить(ЗначениеХранения);
	
	Если Картинка = Неопределено Тогда
		Картинка = "truck.png";	
	КонецЕсли;
	
	Возврат Картинка;
КонецФункции // ПолучитьИмяИконки()

// Отображает на карте текущие объекты мониторинга
//
&НаКлиенте
Процедура ПоказатьНаКартеТекущиеОбъекты(ОбновитьТолькоЦентрКарты = Ложь) 
	
	Если НЕ КартаЗагружена() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяТекущегоРежима <> "OnLineСлежение" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СпособыПредставленияТС = СпособыПредставленияТСНаКарте();
	
	МассивСтрок = Новый Массив;
	Если НЕ ОбновитьТолькоЦентрКарты Тогда
		МассивОтмеченныхСтрок = Новый Массив;
		СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);
		
		МассивСтрок.Добавить(
		"geometryLayer.removeAllFeatures();
		|monitoring_layer.removeAllFeatures();
		|if (markersLayer.markers != null) {
		|	while(markersLayer.markers.length > 0) {
		|   	var cur_marker = markersLayer.markers[0];			
		|   	OpenLayers.Util.removeItem(markersLayer.markers, cur_marker);
		|		cur_marker.destroy();
		|		cur_marker = null;			
		|	}
		|}
		|var Features = new Array;
		|var monitoring_objects = new Array;
		|selectclick_monitoring.activate(); 
		|");
		
		ИдентификаторыОтмеченныхСтрок = Новый Массив;
		Для каждого ОтмеченнаяСтрока Из МассивОтмеченныхСтрок Цикл
			ИдентификаторыОтмеченныхСтрок.Добавить(ОтмеченнаяСтрока.ПолучитьИдентификатор());			
		КонецЦикла; 
		ПараметрыОтображенияОбъектов = ПараметрыОтображенияОбъектовСервер(ИдентификаторыОтмеченныхСтрок);
		
		МасштабыОбъектовНаКарте = ПараметрыОтображенияОбъектов.МасштабыОбъектовНаКарте;
		МасштабОтслеживаемыхОбъектов = МасштабыОбъектовНаКарте["МасштабОтслеживаемыхОбъектов"];
		МасштабСлужебныхОбъектов = МасштабыОбъектовНаКарте["МасштабСлужебныхОбъектов"];
		МасштабТекстаПредставленияТС = МасштабыОбъектовНаКарте["МасштабТекстаПредставленияТС"];
		
		Если ПараметрыОтображенияОбъектов.КластеризоватьОбъектыСлежения Тогда
			МассивСтрок.Добавить(
			"if(!monitoring_layer.strategies[0].active){
			|	monitoring_layer.strategies[0].activate();
			|} 
			|");
		Иначе
			МассивСтрок.Добавить(
			"if(monitoring_layer.strategies[0].active){
			|	monitoring_layer.strategies[0].deactivate();
			|} 
			|");			
		КонецЕсли;
		
		Для каждого СтрокаОбъектов Из МассивОтмеченныхСтрок Цикл
			Если СтрокаОбъектов.Широта = 0
				 ИЛИ СтрокаОбъектов.Долгота = 0 Тогда
				
				Продолжить;	
			КонецЕсли;
			
			ИдентификаторТекущейСтроки = СтрокаОбъектов.ПолучитьИдентификатор();
			
			ПараметрыДинамическогоОформления = ПараметрыОтображенияОбъектов.
													ПараметрыДинамическогоОформленияСтрокОбъектов[ИдентификаторТекущейСтроки];
			Если ПараметрыДинамическогоОформления = Неопределено Тогда
				Продолжить;	
			КонецЕсли; 
					
			Если СтрокаОбъектов.ОбъектВДвижении Тогда					
				МассивСтрок.Добавить(
				"var pointList = [];
				|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Долгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Широта)+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));
				|					
				|");
								
				ДанныеКрайниеТочки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДанныеКрайниеТочки(СтрокаОбъектов.КрайниеТочки);
				
				Для каждого ТекДанные Из ДанныеКрайниеТочки Цикл
					Угол = 30 * Окр(ТекДанные.Направление / 30, 0);
					Угол = ?(Угол = 360, 0, Угол);
					ШиринаУгла = Окр(16 * МасштабСлужебныхОбъектов, 0);
					ВысотаУгла = Окр(16 * МасштабСлужебныхОбъектов, 0);
					
					МассивСтрок.Добавить(				
					"pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекДанные.Долгота)
					+ ", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекДанные.Широта) + ");
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
					|	graphicWidth: " + ШиринаУгла + ",
					|	graphicHeight: " + ВысотаУгла + ",
					|	graphicXOffset: -8,
					|	graphicYOffset: -8,
					|	externalGraphic: """ + ВебСсылкаСервер + "images/pt_" + Угол + ".gif"",
					|	graphicOpacity: 1		
					|});				
					|Features.push(pointFeature);
					|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));");	
				КонецЦикла;
					
				ВебЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ДесятичныйЦветВШестнадцатеричный(СтрокаОбъектов.ЦветМаршрутаНаКарте);
				
				МассивСтрок.Добавить(
				"var LineString = new OpenLayers.Geometry.LineString(pointList);
				|var lineFeature = new OpenLayers.Feature.Vector(
				|	LineString,null,{
				|	strokeColor: ""#" + ВебЦветМаршрута + """,
				|	strokeWidth: 4,
				|	strokeOpacity: 0.5,
				|	strokeDashstyle: ""solid"",
				|	strokeLinecap: ""round"",
				|	pointRadius: 6,
				|	pointerEvents: ""visiblePainted""
				|});
				|Features.push(lineFeature);");						
			КонецЕсли;
			
			ВебЦветНадписи = ItobОбщегоНазначенияКлиентСервер.ДесятичныйЦветВШестнадцатеричный(ПараметрыДинамическогоОформления.ИспользуемыйЦветНадписи);
			
			НадписьОбъекта = НадписьОбъектаПоСпособуПредставленияТС(СтрокаОбъектов, СпособыПредставленияТС);
			НадписьОбъекта = ЭкранироватьКавычкиДляJSON(НадписьОбъекта);
			
			РазмерШрифтаПредставленияОбъекта = Окр(13 * МасштабТекстаПредставленияТС, 0);

			Если НЕ ПараметрыДинамическогоОформления.СкрытьИконки Тогда
				РазмерИконкиОбъекта = Цел(24 * МасштабОтслеживаемыхОбъектов);
				СкриптИконкиОбъекта =
				"var pt = new OpenLayers.LonLat(" + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Долгота)
				+ ", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Широта) + ");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());				
				|monitoring_objects.push(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),
				|	{id: """ + СтрокаОбъектов.ТерминалУИД + """},{            
				|		fontSize: """ + РазмерШрифтаПредставленияОбъекта + "px"",
				|		fontWeight: ""bolder"",
				|		fontColor:  ""#" + ВебЦветНадписи + """,
				|		labelOutlineColor: ""white"",
				|		labelOutlineWidth: 2,
				|		labelYOffset: -" + Цел(РазмерИконкиОбъекта / 2 + 4) + ",
				|		label : """ + НадписьОбъекта + """,
				|		graphicHeight: " + РазмерИконкиОбъекта + ",
				|		graphicWidth: " + РазмерИконкиОбъекта + ",
				|		/*$НаправлениеДвижения*/
				|		externalGraphic: ""$ПутьКОтображаемойИконкеНаВебСервереБезРасширения.png"" 
				|}));
				|var size = new OpenLayers.Size(" + РазмерИконкиНаКарте(24, 24, МасштабОтслеживаемыхОбъектов) + "); 
				|$СкриптНоваяВспомогательнаяИконкаПоверхОбъекта
				|";			 
											
				СкриптИконкиОбъекта = СтрЗаменить(СкриптИконкиОбъекта,
												  "$ПутьКОтображаемойИконкеНаВебСервереБезРасширения",
												  ПараметрыДинамическогоОформления.ПутьКОтображаемойИконкеНаВебСервереБезРасширения);
				СкриптИконкиОбъекта = СтрЗаменить(СкриптИконкиОбъекта,
												  "$СкриптНоваяВспомогательнаяИконкаПоверхОбъекта",
												  ПараметрыДинамическогоОформления.СкриптНоваяВспомогательнаяИконкаПоверхОбъекта);
												  
				Если СтрокаОбъектов.ОбъектВДвижении И НЕ СтрокаОбъектов.НеПоказыватьСтрелкуНаправленияДвижения Тогда
					НаправлениеБольшойСтрелки = СтрокаОбъектов.Направление;
					ПлечоБольшойСтрелки = 19;
					НаправлениеБольшойСтрелкиРадианы = 3.1415926535897932 * НаправлениеБольшойСтрелки / 180;
					
					УголОкругленный = 30 * Окр(НаправлениеБольшойСтрелки / 30, 0);
					УголОкругленный = ?(УголОкругленный = 360, 0, УголОкругленный);
					ИмяКартинкиБольшойСтрелки = "arrow_" + УголОкругленный + ".png";
					ВысотаБольшойСтрелки = Окр(24 * МасштабСлужебныхОбъектов, 0);
					ШиринаБольшойСтрелки = Окр(24 * МасштабСлужебныхОбъектов, 0);
					
					СтрокаНаправлениеДвижения = 
					"		backgroundWidth: " + ШиринаБольшойСтрелки + ",
					|		backgroundHeight: " + ВысотаБольшойСтрелки + ",
					|		backgroundXOffset: " + Строка(Цел(- 12 + ПлечоБольшойСтрелки * Sin(НаправлениеБольшойСтрелкиРадианы))) + ",
					|		backgroundYOffset: " + Строка(Цел(- 12 + 2 - ПлечоБольшойСтрелки * Cos(НаправлениеБольшойСтрелкиРадианы))) + ",
					|		backgroundGraphic: """ + ВебСсылкаСервер + "images/" + ИмяКартинкиБольшойСтрелки + """,";
					СкриптИконкиОбъекта = СтрЗаменить(СкриптИконкиОбъекта,
													  "/*$НаправлениеДвижения*/",
													  СтрокаНаправлениеДвижения);
				КонецЕсли;
				
				МассивСтрок.Добавить(СкриптИконкиОбъекта);	
			КонецЕсли; 
		КонецЦикла;
		
		МассивСтрок.Добавить("monitoring_layer.addFeatures(monitoring_objects);
							 |geometryLayer.addFeatures(Features);
							 //|m_map.resetLayersZIndex();
							 | ");
	КонецЕсли;
	
	Если (НЕ ФиксироватьКарту) Тогда
		// Установка центра карты
		
		ТекущиеДанные = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если НЕ (ТекущиеДанные.ЭтоГруппа ИЛИ ТекущиеДанные.Пометка = 0
				 ИЛИ ТекущиеДанные.Широта = 0 ИЛИ ТекущиеДанные.Долгота = 0) Тогда
				
				МассивСтрок.Добавить(
				"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанные.Долгота) +
				", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанные.Широта) + ");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|m_map.setCenter(pt, m_map.getZoom());");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСкрипта = СтрСоединить(МассивСтрок, Символы.ПС);
	
	// Выполняем скрипт
	Если Не ПустаяСтрока(ТекстСкрипта) Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
		
	КонецЕсли;
	
КонецПроцедуры


// Функция возвращает список параметров отчета.
//
&НаКлиенте
Функция СобратьДанныеДляПостроенияОтчета(ПараметрыОтчета = Неопределено)
	
	Возврат ItobОбщегоНазначенияКлиент.СобратьДанныеДляПостроенияОтчета(ЭтотОбъект, ПараметрыОтчета);

КонецФункции // СобратьДанныеДляПостроенияОтчета()

// Процедура обрабатывает выбор карты и масштабирует по текущему масштабу.
//
&НаКлиенте
Процедура ОбработатьВыборКарты(НомерВыбраннойКарты)
	
	ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты);
		
	АвтоматическиМасштабироватьКарту();
	
КонецПроцедуры // ОбработатьВыборКарты()

// Показывает маршрут, обработчик расшифровки отчетов
//
&НаКлиенте
Процедура ПоказатьМаршрутПоСтруктуреДанных(СтруктураДанных)
	
	НачатьРежимОтображенияМаршрута();
	мПредыдущийРежим = ИмяТекущегоРежима;
	
	Объект.ДатаНачала    = СтруктураДанных.НачПериода;
	Объект.ДатаОкончания = СтруктураДанных.КонПериода;

	УстановитьПометкуДляОбъекта(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы()); 

	Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока = ПолучитьИдентификаторПоОбъекту(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(),0);
	
	ПоказатьМаршрутыНаКарте(Неопределено);
	
	Активизировать();
	
КонецПроцедуры

// Функция возвращает идентификатор текущего объекта в дереве объектов.
//
&НаКлиенте
Функция ПолучитьИдентификаторПоОбъекту(Объект, ЭлементыДерева, НайденныйИдентификатор)
		
	Рез = Ложь;

	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Если Элемент.Объект = Объект Тогда				
			Рез = Истина;
			НайденныйИдентификатор = Элемент.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда 
			
			Рез = ПолучитьИдентификаторПоОбъекту(Объект, Элемент.ПолучитьЭлементы(), НайденныйИдентификатор);				
			
			Если Рез Тогда
				Прервать;	
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЦикла;

	Возврат Рез;

КонецФункции // ПолучитьИдентификаторПоОбъекту()

// Процедура устанавливает пометку в дереве для текущего объекта.
//
&НаКлиенте
Процедура УстановитьПометкуДляОбъекта(Объект, ЭлементыДерева)
		
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоГруппа = Истина Тогда 
			УстановитьПометкуДляОбъекта(Объект, Элемент.ПолучитьЭлементы());
		Иначе
			Если Элемент.Объект = Объект Тогда
				Элемент.Пометка = Истина;
				УстановитьПометкиРодителей(Элемент);
			Иначе
				Элемент.Пометка = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометкуДляОбъекта()
 
// Процедура запускает обновление дерева объектов мониторинга с периодичностью.
//
&НаКлиенте
Процедура ВключитьОбновлениеДанныхОбъектовРежимСлежения()

	ОбновлениеДанныхОбъектовРежимСлежения();
	ПодключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимСлежения", 15, Ложь); 

КонецПроцедуры // ВключитьОбновлениеДанныхОбъектовРежимСлежения()

// Процедура отключает обновление данных объектов мониторинга.
//
&НаКлиенте
Процедура ОтключитьОбновлениеДанныхОбъектовРежимСлежения()
	
	ОтключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимСлежения");
	
КонецПроцедуры // ОтключитьОбновлениеДанныхОбъектовРежимСлежения()
 
// Процедура запускает обновление дерева объектов мониторинга с периодичностью.
//
&НаКлиенте
Процедура ВключитьОбновлениеДанныхОбъектовРежимМаршрутов()

	ОбновлениеДанныхОбъектовРежимМаршрутов();
	ПодключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимМаршрутов", 120, Ложь); 
	
КонецПроцедуры // ВключитьОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура отключает обновление данных объектов мониторинга.
//
&НаКлиенте
Процедура ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов()
	
	ОтключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимМаршрутов");
	
КонецПроцедуры // ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура заполняет заполняет и разворачивает дерево объектов мониторинга.
//
&НаКлиенте
Процедура ОбновлениеДанныхОбъектовРежимСлежения()

	Если ИмяТекущегоРежима <> "OnLineСлежение" Тогда
		
		Возврат;
	КонецЕсли;	
	
	Если ДеревоОбъектовМониторинга.ПолучитьЭлементы().Количество() > 0 Тогда
		// Уже заполнено, надо обновить данные
		ЕстьИзменения = Ложь;
		ОбновитьДанныеДереваОбъектовМониторинга(ЕстьИзменения);
		Если ЕстьИзменения Тогда
			ПоказатьНаКартеТекущиеОбъекты();
			ПодключитьОбработчикОжидания("ОпределитьИЗаполнитьМестоположение", 0.1, Истина);
		КонецЕсли;
		
	Иначе
		ЗаполнитьДеревоОбъектовМониторинга();
		РазвернутьДеревоОбъектовМониторинга();
		
		ПоказатьНаКартеТекущиеОбъекты();
	
	КонецЕсли;	
		
КонецПроцедуры

// Процедура заполняет заполняет и разворачивает дерево объектов мониторинга в режиме 
// построения маршрутов.
//
&НаКлиенте
Процедура ОбновлениеДанныхОбъектовРежимМаршрутов()
	
	Если ИмяТекущегоРежима <> "ПостроениеМаршрутов" Тогда
		
		Возврат;
	КонецЕсли;
			
	Если ДеревоОбъектовМониторинга.ПолучитьЭлементы().Количество() > 0 Тогда
		// Уже заполнено, надо обновить данные
		ЕстьИзменения = Ложь;
		ОбновитьДанныеДереваОбъектовМониторинга(ЕстьИзменения);
	Иначе
		ЗаполнитьДеревоОбъектовМониторинга();
		РазвернутьДеревоОбъектовМониторинга();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаправкиСливыПоСтруктуреДанных(СтруктураДанных)
	
	НачатьРежимЗаправкиИСливы();
	
	Объект.ДатаНачала    = СтруктураДанных.НачПериода;
	Объект.ДатаОкончания = СтруктураДанных.КонПериода;

	УстановитьПометкуДляОбъекта(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы());

	Элементы.ДеревоОбъектовТопливо.ТекущаяСтрока = ПолучитьИдентификаторПоОбъекту(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(),0);
	
	ПоказатьЗаправкиИСливы(Неопределено);
	
	Активизировать();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТрекМаршрута()
	ОбновитьТаблицуИстории(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПанельИсторииОжидание()
	ОчиститьПанельИстории(Истина);
КонецПроцедуры

// Общая процедура для открытия окна отчета
//
&НаКлиенте
Процедура ОткрытьФормуОтчета(ИмяФормыОтчета, ПараметрыОтчета = Неопределено, ДопПараметры = Неопределено, Уникальность = Истина)
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета(ПараметрыОтчета);
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;
	КонецЕсли;
	Если ТипЗнч(ДопПараметры) = Тип("СписокЗначений") Тогда
	    Для Каждого Параметр Из ДопПараметры Цикл
			ПараметрыОтчета.СписокПараметров.Добавить(Параметр.Значение, Параметр.Представление);			
		КонецЦикла; 
	КонецЕсли;
	Идентификатор = ?(Уникальность,Новый УникальныйИдентификатор(),Неопределено);
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыОтчета,,Идентификатор);
КонецПроцедуры // ОткрытьФормуОтчета()

#Область ИдентификаторыИконокОбъектов

&НаСервере
Функция ЗакешироватьИконкуНаФорме(ИконкаНаКарте, ЭтоИконкаОбъекта = Истина)
	
	НаборИконок = ?(ЭтоИконкаОбъекта, ИконкиОбъектов, ИконкиПунктов);
	
	Результат = Новый Структура("Идентификатор, КешОбновлен");
	НайденныеСтроки = НаборИконок.НайтиСтроки(Новый Структура("ИконкаНаКарте", ИконкаНаКарте));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Идентификатор = ИконкаНаКарте.УникальныйИдентификатор();
	
		Стр = НаборИконок.Добавить();
		Стр.Идентификатор = Идентификатор;
		Стр.ИконкаНаКарте = ИконкаНаКарте;
		Результат.Идентификатор = Идентификатор;
		Результат.КешОбновлен = Истина;
	Иначе
		Результат.Идентификатор = НайденныеСтроки[0].Идентификатор;
		Результат.КешОбновлен = Ложь;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьИконкиНаСервере(ЭтоИконкиОбъектов = Истина)
	
	// Удаляем иконки на сервере, для загрузки новых.
	УдалитьИконкиНаСервере(ЭтоИконкиОбъектов);
		
	// Формирование файла для web-сервера.
	ДвоичныеДанные = СформироватьИконкиДляОтправкиНаСервер(ЭтоИконкиОбъектов);
	
	// Размещение файлов на web-сервере.
	РезультатРазмещенияФайлов = ItobОперативныйМониторинг.РазместитьФайлыНаСервереCsmSvc(ДвоичныеДанные);
	Если РезультатРазмещенияФайлов.Результат Тогда
		Если ЭтоИконкиОбъектов Тогда
			НазваниеКаталогаСкриптов = РезультатРазмещенияФайлов.НазваниеКаталога;
		Иначе
			НазваниеКаталогаСкриптовПунктов = РезультатРазмещенияФайлов.НазваниеКаталога;
		КонецЕсли; 
	Иначе
		//ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(РезультатРазмещенияФайлов.ОписаниеОшибки);
		Отказ = Истина;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция СформироватьИконкиДляОтправкиНаСервер(ЭтоИконкиОбъектов)
	
	// Создаем поток ZIP-файла.
	ЗаписьФайла = Новый ЗаписьZipФайла();
	
	// Получаем каталог временных файлов.
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	// Создаем свой каталог временных файлов.
	Каталог = КаталогВременныхФайлов+Строка(Новый УникальныйИдентификатор())+"\";
	СоздатьКаталог(Каталог);
	
	// Заполняем архив файлами.
	ИконкаПоУмолчанию = Неопределено;
	ИконкаПоУмолчаниюХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ItobИконкиОбъектов.Грузовик, "Иконка");
	Если ЗначениеЗаполнено(ИконкаПоУмолчаниюХранилище) Тогда
		ИконкаПоУмолчанию = ИконкаПоУмолчаниюХранилище.Получить();	
	КонецЕсли;
	
	ЗагружаемыеИконки = ?(ЭтоИконкиОбъектов, ИконкиОбъектов, ИконкиПунктов); 
	
	Для каждого Стр Из ЗагружаемыеИконки Цикл
		АдресКартинки = Каталог + Стр.Идентификатор + ".png";
		
		Картинка = ИконкаПоУмолчанию;
		Если ЗначениеЗаполнено(Стр.ИконкаНаКарте) Тогда
			ПолученнаяКартинка = Стр.ИконкаНаКарте.Иконка.Получить();
			Если НЕ ПолученнаяКартинка = Неопределено Тогда
				Картинка = ПолученнаяКартинка;	
			КонецЕсли; 
		КонецЕсли; 
		
		Картинка.Записать(АдресКартинки);
		ЗаписьФайла.Добавить(АдресКартинки, РежимСохраненияПутейZIP.НеСохранятьПути);
	КонецЦикла;
	
	// Формируем двоичные данные архива.
	ДвоичныеДанные = ЗаписьФайла.ПолучитьДвоичныеДанные();
	
	// Удаляем каталог временных файлов.
	УдалитьФайлы(Каталог);
	
	// Возвращаем двоичные данные.
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаСервере
Процедура УдалитьИконкиНаСервере(ЭтоИконкиОбъектов = Истина)

	НазваниеКаталога = ?(ЭтоИконкиОбъектов, НазваниеКаталогаСкриптов, НазваниеКаталогаСкриптовПунктов);
	
	Если НЕ ПустаяСтрока(НазваниеКаталога) Тогда
		ItobОперативныйМониторинг.УдалитьКаталогНаСервереCsmSvc(НазваниеКаталога);
		Если ЭтоИконкиОбъектов Тогда
			НазваниеКаталогаСкриптов = "";
		Иначе
			НазваниеКаталогаСкриптовПунктов = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Функция - Размер иконки на карте
//
// Параметры:
//  Ширина	 - Число 
//  Высота	 - Число 
//  Масштаб	 - Число 
// 
// Возвращаемое значение:
//  Строка - Расчитанных в соответсвии с пользовательской настройкой масштаба значения шрины и высоты, указанные через запятую 
//
&НаКлиентеНаСервереБезКонтекста
Функция РазмерИконкиНаКарте(Ширина, Высота, Масштаб)
	
	ШиринаИконки = Окр(Ширина * Масштаб, 0);
	ВысотаИконки = Окр(Высота * Масштаб, 0);
	МассивРазмерИконки = Новый Массив;
	МассивРазмерИконки.Добавить(Строка(ШиринаИконки));    // *FIXIT* учесть числа, большие 1000 (будет падать).
	МассивРазмерИконки.Добавить(Строка(ВысотаИконки));
	
	
	Возврат СтрСоединить(МассивРазмерИконки, ",");
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиКомандВыбораМестоположения
// Используются динамически

&НаКлиенте
Процедура ПриИзмененииФлажкаДеревоОбъектовМониторинга()

	ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФлажкаДереваОбъектов(ТекущаяСтрока);
	
	ПоказатьНаКартеТекущиеОбъекты();

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыполненияОтложеннойКоманды()
 
	Если ПустаяСтрока(мТекстОтложеннойКоманды) Тогда		
		Возврат;
	
	КонецЕсли;
	
	Если КартаЗагружена() Тогда
		ВЫПОЛНИТЬ(мТекстОтложеннойКоманды);
		мТекстОтложеннойКоманды = "";
		
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",0.5,Истина);
	
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстВсплывающейПодсказки(Данные)	
	
	Рез = "<table width=""300"" border=""1"" cellspacing=""0"" cellpadding=""2"" bordercolor=""#B3AC86"" style=""border-width:1px;border-style:solid;"">
		  |<tr><td colspan=""2"" align=""center""><b>"+СокрЛП(Данные.ОбъектПредставление)+"</b></td></tr>";
	
	ТабДеталей = ПолучитьДеталиДатчика(Данные);
	Для каждого СтрТабДеталей Из ТабДеталей Цикл
		ТекНомерСтроки = ТабДеталей.Индекс(СтрТабДеталей)+1;
		ЧетнаяСтрока = ТекНомерСтроки/2 = Окр(ТекНомерСтроки/2,0);
		Стиль = ?(ЧетнаяСтрока, "", "style=""background-color:#EEE""");
		
		Рез = Рез + "
			|<tr "+Стиль+"><td width=""90"" align=""left"" valign=""top"">"+СтрТабДеталей.Показатель+"</td><td>"+Строка(СтрТабДеталей.Значение)+"</td></tr>";		
			
	КонецЦикла;
	
	Рез = Рез+"</table>";
		
	Возврат Рез;	

КонецФункции

&НаСервере
Процедура ОбновитьТаблицуИсторииИнтерваловСервер(СтруктураДанных)
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	СтруктураДанных.Вставить("РежимДозаполнения", (ИнтервалыДвижения.Количество() > 0 И НЕ НачалоПериодаИзменено));
	НачалоПериодаИзменено = Ложь;  
	
	СтруктураДанных.Вставить("НачалоПериода", ?(СтруктураДанных.РежимДозаполнения, 
												ИнтервалыДвижения[0].ВремяКон+1,
												?(ИмяТекущегоРежима = "ПостроениеМаршрутов", 
												  Объект.ДатаНачала, 
												  ТекущаяДатаСеанса - 24 * 3600 * ТекущийПериодИстории)));
	СтруктураДанных.Вставить("КонецПериода", ?(ИмяТекущегоРежима = "ПостроениеМаршрутов", Объект.ДатаОкончания, ТекущаяДатаСеанса));
		
	СостояниеТерминалов = ПолучитьСостоянияТерминалов();
		
	ТаблицаИнтервалы = ОбновитьТаблицуИнтерваловСервер(СтруктураДанных, СостояниеТерминалов);
	Если НЕ ТаблицаИнтервалы = Неопределено Тогда
		ОбновитьТаблицуИсторииСервер(СтруктураДанных, СостояниеТерминалов, ТаблицаИнтервалы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуИсторииСервер(СтруктураДанных, СостояниеТерминалов, Интервалы = Неопределено)
	
	РежимДозаполнения = (СтруктураДанных.Свойство("РежимДозаполнения") И СтруктураДанных.РежимДозаполнения);
	Если НЕ РежимДозаполнения Тогда
		ИсторияОбъекта.Очистить();	
	КонецЕсли; 
	
	Если Интервалы = Неопределено Тогда
		Интервалы = ИнтервалыДвижения;	
	КонецЕсли; 
	
	Маршрут = СформироватьМаршрутПоИнтерваламДвижения(Интервалы);		
	Маршрут.Сортировать("Период");
	
	ПредыдущееСостояние = Неопределено;
	Для каждого СтрокаМаршрута Из Маршрут Цикл
		Если СтрокаМаршрута.Состояние = ПредыдущееСостояние 
			 И СтрокаМаршрута.Состояние = СостояниеТерминалов.Стоянка 
			 И СтруктураДанных.ГруппироватьСтоянки Тогда
			 
			ИсторияОбъекта[0].Период = СтрокаМаршрута.Период;
		Иначе
			ЗаполнитьЗначенияСвойств(ИсторияОбъекта.Вставить(0), СтрокаМаршрута);
			Если НЕ ЗначениеЗаполнено(ИсторияОбъекта[0].Местоположение) Тогда
				ИсторияОбъекта[0].Местоположение = СтрШаблон("%1, %2", СтрокаМаршрута.Широта, СтрокаМаршрута.Долгота);		
			КонецЕсли;	
		КонецЕсли;
		
		ПредыдущееСостояние = СтрокаМаршрута.Состояние;
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
Функция СформироватьМаршрутПоИнтерваламДвижения(ТаблицаИнтервалы)
	
	Результат = ItobОперативныйМониторинг.СоздатьТаблицуЗначенийМаршрутОбъектаМониторинга(Истина);
	Для Каждого ИнтервалДвижения Из ТаблицаИнтервалы Цикл
		Для Каждого ДанныеТерминала Из ИнтервалДвижения.ДанныеТерминала Цикл
		    ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДанныеТерминала);
		КонецЦикла; 
	КонецЦикла;
	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбновитьТаблицуИнтерваловСервер(Данные, СостояниеТерминалов)
	
	СчетчикИнтерваловКонец = 0;
	
	ТаблицаИнтервалы = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Данные.Объект, Данные.НачалоПериода, Данные.КонецПериода, Истина,,, Истина);
	
	// Проверка, что бы не выводилась в таблицу "Интервалы движения" одна запись с состоянием "Нет данных".
	Если ТаблицаИнтервалы.Количество() = 1 И ТаблицаИнтервалы[0].Состояние = СостояниеТерминалов.НетДанных Тогда
		// Возвращаем Неопределено, что бы не обновлять таблицу истории
	    Возврат Неопределено;
	КонецЕсли;
	
	// Проверка, что бы не выводилась в таблицу "Интервалы движения" некорректная запись с состоянием "Движение".
	Если ТаблицаИнтервалы.Количество() = 1 
		 И ТаблицаИнтервалы[0].Состояние = СостояниеТерминалов.Движение 
		 И ТаблицаИнтервалы[0].ДанныеТерминала.Количество() = 2 
		 И ТаблицаИнтервалы[0].ДанныеТерминала[0].Скорость = 0 Тогда
		// Возвращаем Неопределено, что бы не обновлять таблицу истории
	    Возврат Неопределено;
	КонецЕсли;
	
	Если Данные.РежимДозаполнения Тогда
		Для Каждого ТаблицаИнтервалыСтрока Из ТаблицаИнтервалы Цикл
			Если ТаблицаИнтервалыСтрока.Состояние = ИнтервалыДвижения[0].Состояние Тогда
				Для Каждого ДанныеТерминалаСтрока Из ТаблицаИнтервалыСтрока.ДанныеТерминала Цикл
				    ЗаполнитьЗначенияСвойств(ИнтервалыДвижения[0].ДанныеТерминала.Вставить(0),ДанныеТерминалаСтрока);
				КонецЦикла;
				ИнтервалыДвижения[0].ВремяКон = ДанныеТерминалаСтрока.Период;
				ПреобразоватьСтрокуИнтерваловДвижение(ИнтервалыДвижения[0]);
			Иначе
				Интервал = ИнтервалыДвижения.Вставить(0);
				ЗаполнитьЗначенияСвойств(Интервал, ТаблицаИнтервалыСтрока,,"ДанныеТерминала");
				СчетчикИнтерваловКонец = СчетчикИнтерваловКонец+1;
			КонецЕсли;
		КонецЦикла; 
	Иначе
		ТаблицаИнтервалы.Сортировать("ВремяНач Убыв");
		ИнтервалыДвижения.Загрузить(ТаблицаИнтервалы);
		СчетчикИнтерваловКонец = ИнтервалыДвижения.Количество()-1;
	КонецЕсли;
	
	Если НЕ ТаблицаИнтервалы.Количество() = 0 Тогда
		Для СчетчикИнтервалов = 0 По СчетчикИнтерваловКонец Цикл
		    Интервал = ИнтервалыДвижения[СчетчикИнтервалов];
			ТаблицаИнтервалыСтрока = ТаблицаИнтервалы[СчетчикИнтервалов];
			Интервал.ДанныеТерминала.Загрузить(ТаблицаИнтервалыСтрока.ДанныеТерминала);
			ПреобразоватьСтрокуИнтерваловДвижение(Интервал);  
		КонецЦикла;
	КонецЕсли; 
	
	
	// Возвращаем ТаблицаИнтервалы, что бы обновить таблицу истории
	Возврат ТаблицаИнтервалы;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьСтрокуИнтерваловДвижение(Интервал)
	
	Длительность = Интервал.Длительность;
	Часов = Цел(Длительность/3600);
	Длительность = Длительность%3600;
	Минут = Цел(Длительность/60);
	Секунд = Цел(Длительность%60);
	Интервал.ДлительностьПредставление = 
		?(Часов = 0,"",Строка(Часов)+" час. ")
		+?(Минут = 0,"",Строка(Минут)+" мин. ")
		+?(Секунд = 0,"",Строка(Секунд)+" сек. ");
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТочкуИсторииНаКарте()

	ТекущиеДанныеИстории = Элементы.ИсторияОбъекта.ТекущиеДанные;	
	Если ТекущиеДанныеИстории = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	МасштабСлужебныхОбъектов = ItobОбщегоНазначенияВызовСервера.МасштабыОбъектовНаКарте()["МасштабСлужебныхОбъектов"];
	
	ТекстСкрипта =
		"historyLayer.removeAllFeatures();
		|var Features = new Array;
		|";
			
	Угол = 30 * Окр(ТекущиеДанныеИстории.Направление / 30, 0);
	Угол = ?(Угол = 360, 0, Угол);
	ШиринаУгла = Окр(16 * МасштабСлужебныхОбъектов, 0);
	ВысотаУгла = Окр(16 * МасштабСлужебныхОбъектов, 0);

	ТекстСкрипта = ТекстСкрипта+"				
		|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанныеИстории.Долгота)
			+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанныеИстории.Широта)+");
		|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
		|pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
		|					 graphicWidth: " + ШиринаУгла + ",
		|                    graphicHeight: " + ВысотаУгла + ",
		|                    graphicXOffset: -8,
		|                    graphicYOffset: -8,
		|                    externalGraphic: """+ВебСсылкаСервер+"images/pt_"+Угол+".gif"",
		|                    graphicOpacity: 1		
		|});				
		|Features.push(pointFeature);
		|historyLayer.addFeatures(Features);
		|m_map.setCenter(pt, m_map.getZoom());";
		
	ВыполнитьСкрипт(ТекстСкрипта);	

КонецПроцедуры
 
&НаКлиенте
Функция ПолучитьТекущееПоложениеКарты()
	
	Если НЕ КартаДоступна Тогда
		
		Возврат Неопределено;	
	КонецЕсли;

	Результат = Новый Структура("Масштаб,Широта,Долгота");
	
	ВыполнитьСкрипт("document.form.result.value = m_map.getZoom();");
	Результат.Масштаб = Элементы.ПолеHTML.Документ.form.result.value;
	
	ВыполнитьСкрипт(
		"var pt = m_map.getCenter();
		|pt.transform(m_map.getProjectionObject(), m_map.displayProjection);
		|document.form.result.value = pt.toShortString();");
	СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;
	СтрокаКоординат = СтрЗаменить(СтрокаКоординат,",",Символы.ПС);
	Результат.Долгота = СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,1));
	Результат.Широта = СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,2));	
		
	Возврат Результат;

КонецФункции // ПолучитьТекущееПоложениеКарты()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
			
	ЗакончитьПредыдущийРежим();
	
	// Удаление каталогов с иконками на сервере сервиса CsmSvc.
	УдалитьИконкиНаСервере(Ложь);
	УдалитьИконкиНаСервере();
	
	Если НЕ ПустаяСтрока(НомерПрофиляСлойПунктов) Тогда
		ItobРаботаСРендеромCSMВызовСервера.ОчиститьДанныеПрофиля(НомерПрофиляСлойПунктов);	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НомерПрофиляСлойМаршрутов) Тогда
		ItobРаботаСРендеромCSMВызовСервера.ОчиститьДанныеПрофиля(НомерПрофиляСлойМаршрутов);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстСкриптаСлойПунктов(ТабИзображений)
	
	Если ТабИзображений.Количество() = 0 Тогда
		Возврат "";		
	КонецЕсли;
	
	Для Каждого Изображение Из ТабИзображений Цикл
		
		ИконкаПункта = Изображение.ИконкаНаКарте;
		Если НЕ ЗначениеЗаполнено(ИконкаПункта) Тогда
			ИконкаПункта = Справочники.ItobИконкиОбъектов.ItobИконкаКругЗеленый;
		КонецЕсли;
		ИмяКартинки = ИконкаПункта.УникальныйИдентификатор();
		Изображение.ИмяКартинки = СтрШаблон("%1../../cache/%2/%3.png", "", НазваниеКаталогаСкриптовПунктов, ИмяКартинки); 
	КонецЦикла; 
	
	ТекстСкрипта = "";
	ТекущееИмяСлоя = "destination_points_layer";
	Если НЕ ПустаяСтрока(НомерПрофиляСлойПунктов) Тогда
		ItobРаботаСРендеромCSMВызовСервера.ОчиститьДанныеПрофиля(НомерПрофиляСлойПунктов);	
	КонецЕсли;
	НомерПрофиляСлойПунктов = "";
	Если НЕ ItobРаботаСРендеромCSM.ВыполнитьРендерингМаршрута(Неопределено, ТабИзображений, ТекстСкрипта, ТекущееИмяСлоя, НомерПрофиляСлойПунктов) Тогда
		Возврат "";
	КонецЕсли;
	
	
	Возврат ТекстСкрипта;	

КонецФункции

// Показать объект
&НаКлиенте
Процедура ПоказатьОбъектДереваОбъектов(ВыбраннаяСтрока, ПолеИмя)
	
	ТекущийОбъект = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущийОбъект.ПоказатьОбъект Тогда
		
		ТекущийОбъект.Пометка = 1;
		ПодключитьОбработчикОжидания("ПриИзмененииФлажкаДеревоОбъектовМониторинга", 0.1, Истина);
		
		Если Прав(ПолеИмя,14) = "ПоказатьОбъект" Тогда
			Если НЕ ИмяТекущегоРежима = "OnLineСлежение" Тогда
				ИмяТекущегоРежима = "OnLineСлежение";
				Если мПредыдущийРежим = "ПостроениеМаршрутов" Тогда
					ТекущаяСтрока = Неопределено;
					Если Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока <> Неопределено Тогда
						ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока);			
					КонецЕсли;
					НачатьРежимСлежения();
					Если ТекущаяСтрока <> Неопределено Тогда
						Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();					
					КонецЕсли;
				Иначе
					НачатьРежимСлежения();
				КонецЕсли;
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОбновитьЦентрКартыРежимСлеженияПоказатьОбъект", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получаем данные строки из дерева объектов мониторинга для панели истории.
//
&НаКлиенте
Функция ПолучитьТекущиеДанныеСтроки()
	// Создать переменную, для истории и заполнять ее при активации строки,
	// а здесь обращаться к ней.
	// Оптимизировать.
	
	Если ИмяТекущегоРежима = "OnLineСлежение" Тогда
	    Возврат Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
	ИначеЕсли ИмяТекущегоРежима = "ПостроениеМаршрутов" Тогда
	    Возврат Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
 
&НаКлиенте
Процедура УстановитьПометкуВСтрокеИнтерваловДвижения(ВыбраннаяСтрока)
	Для Каждого Интервал Из ИнтервалыДвижения Цикл
		Если Интервал.ПолучитьИдентификатор() = ВыбраннаяСтрока Тогда
			Интервал.Пометка = Истина;
		Иначе
			Интервал.Пометка = Ложь;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 
// Функция возвращает текст скрипта отображения маршрута интервала объектов.
//
&НаКлиенте
Функция ПолучитьСкриптМаршрутыИнтервалаОбъекта(ИнтервалДвижения)
    	
	ТекстСкрипта = 
		"historyLayer.removeAllFeatures();
		|var Features = [];
	    |if(historymarker){markersLayer.removeMarker(historymarker)};
		|var pointList = [];
		|var pt = null;";
	
	Если ИнтервалДвижения.Состояние = ПредопределенноеЗначение("Перечисление.ItobСостоянияТерминалов.Стоянка") Тогда
		АдресСтоянки = ЭкранироватьКавычкиДляHTML(ИнтервалДвижения.МестоСтоянки);
		
		ПолныеДаты = НачалоДня(ИнтервалДвижения.ВремяНач) <> НачалоДня(ИнтервалДвижения.ВремяКон);
		Строка1 = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИнтервалДвижения.Длительность);
    	Строка2 = "Адрес: " + АдресСтоянки;			
		Строка3 = "С " + Формат(ИнтервалДвижения.ВремяНач, ?(ПолныеДаты, "ДФ='dd.MM.yy HH:mm'", "ДФ=HH:mm")) + 
				  " по " + Формат(ИнтервалДвижения.ВремяКон, ?(ПолныеДаты, "ДФ='dd.MM.yy HH:mm'", "ДФ=HH:mm"));
        				
		НадписьHTML = "<div style=""font:Courier New; font-size:12px; width:190px; height:90px; text-align:left; word-wrap:break-word;""><b>" +
					  Строка1 + "</b><br />" +
					  Строка2 + "<br />" +
					  Строка3 + "</div>";
					  
		МасштабСлужебныхОбъектов = ItobОбщегоНазначенияВызовСервера.МасштабыОбъектовНаКарте()["МасштабСлужебныхОбъектов"];
		
		ВысотаОкнаДеталей = 100 + Макс(0,Окр((СтрДлина(АдресСтоянки) - 15) / 25 + 0.499, 0)) * 20;
		РазмерИконкиСтоянка = РазмерИконкиНаКарте(23, 23, МасштабСлужебныхОбъектов); 	
		
		ТекстСкрипта = ТекстСкрипта + "
			|pt = new OpenLayers.LonLat(" + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Долгота) +
			", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Широта) + ");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|var size = new OpenLayers.Size(" + РазмерИконкиСтоянка + ");
			|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
			|var icon = new OpenLayers.Icon('" + ВебСсылкаСервер + "images/parking.svg',size,offset);
			|
			|historymarker = new OpenLayers.Marker(pt,icon);
			|
			|historymarker.events.on({
			|	""mousedown"": function(event) { 
			|					
			|if (this.popup == null) {
			|	var pt = new OpenLayers.LonLat(" + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Долгота) +
			", " + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ИнтервалДвижения.ДанныеТерминала[0].Широта) + ");
			|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|	
			|     this.popup = new OpenLayers.Popup(""chicken"",
			|	   pt,
			|	   new OpenLayers.Size(200," + Формат(ВысотаОкнаДеталей, "ЧГ=0") + "),
			|	   '" + НадписьHTML + "'" + ",
			|	   true);
			|     this.popup.autoSize = true;
			|     m_map.addPopup(this.popup);
			|     this.popup.show();
			| } else {
			|     this.popup.toggle();
			| }
			| currentPopup = this.popup;
			| OpenLayers.Event.stop(event);
			|	}
			|   
			|});
			|markersLayer.addMarker(historymarker);
			|";
						
	Иначе
		Для СчетчикК = 0 По ИнтервалДвижения.ДанныеТерминала.Количество()-1 Цикл
			
			Если ИнтервалДвижения.ДанныеТерминала[СчетчикК].Долгота = Неопределено
				ИЛИ ИнтервалДвижения.ДанныеТерминала[СчетчикК].Широта = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ИнтервалДвижения.ДанныеТерминала[СчетчикК].Долгота = 0
				ИЛИ ИнтервалДвижения.ДанныеТерминала[СчетчикК].Широта = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстСкрипта = ТекстСкрипта+"
				|pt = new OpenLayers.LonLat("+Формат(ИнтервалДвижения.ДанныеТерминала[СчетчикК].Долгота,"ЧРД=.; ЧН=0")
					+", "+Формат(ИнтервалДвижения.ДанныеТерминала[СчетчикК].Широта,"ЧРД=.; ЧН=0")+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";		
		КонецЦикла;	
	КонецЕсли;
	
	ЦветМаршрута16 = "b000b0";
	ТекстСкрипта = ТекстСкрипта+"
		|var LineString = new OpenLayers.Geometry.LineString(pointList);
		|var lineFeature = new OpenLayers.Feature.Vector(
		|                LineString,null,{
		|                strokeColor: ""#" + ЦветМаршрута16 + """,
		|                strokeWidth: 5,
		|				 strokeOpacity: 0.8,
		|                strokeDashstyle: ""solid"",
		|				 strokeLinecap: ""round"",
		|                pointRadius: 6,
		|                pointerEvents: ""visiblePainted""
		|});
		|Features.push(lineFeature);
		|historyLayer.addFeatures(Features);
		|//m_map.zoomToExtent(LineString.getBounds());
		|//===================================================";			
		
	Возврат ТекстСкрипта;		

КонецФункции

&НаКлиенте
Процедура ОчиститьКартуОтИстории()
	ВыполнитьСкрипт("historyLayer.removeAllFeatures();");
КонецПроцедуры // ОчиститьКартуОтИстории()

&НаСервере
Процедура ДобавитьЭлементыУсловногоОформленияСписокМаршрутов()
	
	ДобавитьЭлементУсловногоОформленияСписокМаршрутов(Перечисления.ItobСтатусыВыполненияПутевыхЛистов.КВыполнению, ЦветСтатусаКвыполнению());
	ДобавитьЭлементУсловногоОформленияСписокМаршрутов(Перечисления.ItobСтатусыВыполненияПутевыхЛистов.Выполняется, ЦветСтатусаВыполняется());
	ДобавитьЭлементУсловногоОформленияСписокМаршрутов(Перечисления.ItobСтатусыВыполненияПутевыхЛистов.Выполнен, ЦветСтатусаВыполнен());
	ДобавитьЭлементУсловногоОформленияСписокМаршрутов(Перечисления.ItobСтатусыВыполненияПутевыхЛистов.ВыполненЧастично, ЦветСтатусаВыполненЧастично());
	ДобавитьЭлементУсловногоОформленияСписокМаршрутов(Перечисления.ItobСтатусыВыполненияПутевыхЛистов.ИстекСрокДействия, ЦветСтатусаИстекСрокДействия());
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияСписокМаршрутов(ТекущийСтатус, ТекущийЦвет)
	
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокМаршрутов");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаршрутов.СтатусВыполнения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекущийСтатус;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ТекущийЦвет);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыУсловногоОформленияСписокТочекМаршрута()
	
	// Посещенные.
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ИндексСостоянияПосещения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветСтатусаПосещенная());
	
	
	// Посещенные не вовремя.
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ИндексСостоянияПосещения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветСтатусаПосещеннаяНеВовремя());
	
	
	// Непосещенные.
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ИндексСостоянияПосещения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 0;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветСтатусаНепосещенная());
	
	
	// Точки начала и окончания выделяются жирным.
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ЭтоТочкаСостава");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,, Истина));
	
	
	// 99999 (порядок точки завершения) отображается как 0.
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрутаПорядокОтображаемый");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ЭтоТочкаКонца");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	
	// Представление состояния посещения "Посещено".
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрутаИндексСостоянияПосещения");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ИндексСостоянияПосещения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Посещено");
	
	
	// Представление состояния посещения "Посещено не вовремя".
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрутаИндексСостоянияПосещения");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ИндексСостоянияПосещения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Посещено не вовремя");
	
	
	// Представление состояния посещения "Не посещено".
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокТочекМаршрутаИндексСостоянияПосещения");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокТочекМаршрута.ИндексСостоянияПосещения");	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 0;	
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Не посещено");

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыУправленияРежимамиОтображения

#Область ОбщиеПроцедурыУправленияРежимами

&НаКлиенте
Процедура ТекущийРежимПриИзменении()
	
	// Переменная, отвечает за необходимость обновления отображения объектов на карте.
	ЗапускПоказатьОбъектыОнлайнСлежения = Ложь;
	
	Если ИмяТекущегоРежима = "OnLineСлежение" Тогда
		Если мПредыдущийРежим = "ПостроениеМаршрутов" Тогда

			ТекущаяСтрока = Неопределено;
			Если Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока);			
			КонецЕсли;
			
			НачатьРежимСлежения();
			
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();					
			КонецЕсли;			
			
		Иначе
			НачатьРежимСлежения();
			Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные = Неопределено И 
				 НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.ЭтоГруппа И 
				 ПанельИсторииРазвернута И 
				 ИспользоватьАвтообновлениеТаблицыИстории Тогда
				ПодключитьОбработчикОжидания("ОчиститьПанельИсторииОжидание", 0.01, Истина);
				ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута", 0.1, Истина);
			КонецЕсли; 
		КонецЕсли;
		
		ЗапускПоказатьОбъектыОнлайнСлежения = Истина;

	ИначеЕсли ИмяТекущегоРежима = "ПостроениеМаршрутов" Тогда
		Если мПредыдущийРежим = "OnLineСлежение" Тогда
			
			ТекущаяСтрока = Неопределено;
			Если Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока = ДеревоОбъектовМониторинга.НайтиПоИдентификатору(Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока);
			КонецЕсли;
			
			НачатьРежимОтображенияМаршрута();
			
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();					
			КонецЕсли;			
			
		Иначе
			НачатьРежимОтображенияМаршрута();			
			Если НЕ Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные = Неопределено
				 И НЕ Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные.ЭтоГруппа
				 И ПанельИсторииРазвернута
				 И ИспользоватьАвтообновлениеТаблицыИстории Тогда
				ПодключитьОбработчикОжидания("ОчиститьПанельИсторииОжидание", 0.01, Истина);
				ПодключитьОбработчикОжидания("ОбновитьТрекМаршрута", 0.1, Истина);
			КонецЕсли; 
		КонецЕсли;
		
	Иначе

		ОчиститьКартуОтИстории();
		
		Если ИмяТекущегоРежима = "ЗаправкиИСливы" Тогда
			НачатьРежимЗаправкиИСливы();
		
		ИначеЕсли ИмяТекущегоРежима = "ПутевыеЛисты" Тогда
			НачатьРежимПутевыеЛисты();
			
		КонецЕсли;
	КонецЕсли;
	
	ТекстСкрипта = "destroy_geozones_control();
				   |var AllGeozonLayer = m_map.getLayersByName(""AllGeozonLayer"");
				   |if (AllGeozonLayer.length > 0)
				   |{ m_map.removeLayer(AllGeozonLayer[0]); }";
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	мПредыдущийРежим = ИмяТекущегоРежима;
	
	Если НЕ Элементы.ГруппаПанельИстории.Видимость И ПоказыватьПанельИстории Тогда
		ТекущееПоложениеКарты = ПолучитьТекущееПоложениеКарты();		
		Элементы.ГруппаПанельИстории.Видимость = Истина;
		ЗапускПоказатьОбъектыОнлайнСлежения = Истина;
	КонецЕсли;
	
	// Если есть необходимость обновления объектов на карте. 
	Если ЗапускПоказатьОбъектыОнлайнСлежения Тогда
		ПодключитьОбработчикОжидания("ПоказатьОбъектыОнлайнСлежения", 0.5, Истина);
	КонецЕсли; 
	
	// Для того, что бы не отчищалась панель истории при переходе с одного режима в другой.
	ПереключенРежимРаботы = Истина;
	ПодключитьОбработчикОжидания("ОтключитьПереключенРежимРаботы", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтраницаПоТекущемуРежиму(ИмяТекущегоРежима)
	
	ТекущаяСтраницаГруппыПанельЗакладок = Элементы.ПанельЗакладок.ПодчиненныеЭлементы.Найти(ИмяТекущегоРежима);
	
	Если НЕ ТекущаяСтраницаГруппыПанельЗакладок = Неопределено Тогда 
		Если НЕ Элементы.ПанельЗакладок.ТекущаяСтраница = ТекущаяСтраницаГруппыПанельЗакладок Тогда
			Элементы.ПанельЗакладок.ТекущаяСтраница = ТекущаяСтраницаГруппыПанельЗакладок;
		КонецЕсли;
	Иначе
		ВызватьИсключение "Нет страницы соответсвующей устанавливаемому режиму";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПредыдущийРежим()
	
	ПоказыватьПанельИстории = Ложь;
	Элементы.ВидГруппировки.Видимость = Ложь;
	Элементы.УстановитьПредставлениеТС.Видимость = Ложь;
	Элементы.ГрупповаяНастройкаОтображенияТрека.Видимость = Ложь;
	Элементы.ЛегендаМаршрутыНаКарте.Видимость = Ложь;
	
	Если мПредыдущийРежим = "OnLineСлежение" Тогда
		ЗакончитьРежимСлежения();
		
	ИначеЕсли мПредыдущийРежим = "ПостроениеМаршрутов" Тогда
		ЗакончитьРежимОтображенияМаршрута();
		
	ИначеЕсли мПредыдущийРежим = "ЗаправкиИСливы" Тогда
		ЗакончитьРежимЗаправкиИСливы();
			
	ИначеЕсли мПредыдущийРежим = "ПутевыеЛисты" Тогда
		ЗакончитьРежимПутевыеЛисты();		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РежимСлежения

// Инициализация режима слежения
//
&НаКлиенте
Процедура НачатьРежимСлежения()

	ЗакончитьПредыдущийРежим();
	
	ИмяТекущегоРежима = "OnLineСлежение";
	ТекущаяСтраницаПоТекущемуРежиму(ИмяТекущегоРежима);	
	
	Элементы.ВидГруппировки.Видимость = Истина;
	Элементы.УстановитьПредставлениеТС.Видимость = Истина;
	
	ВключитьОбновлениеДанныхОбъектовРежимСлежения();
	ПоказыватьПанельИстории = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбъектыОнлайнСлежения()

	ПоказатьНаКартеТекущиеОбъекты();

КонецПроцедуры

// Конец режима слежения
//
&НаКлиенте
Процедура ЗакончитьРежимСлежения()
	
	ОтключитьОбновлениеДанныхОбъектовРежимСлежения();
	
	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|monitoring_layer.removeAllFeatures();
		|selectclick_monitoring.deactivate();
		|historyLayer.removeAllFeatures();
		|markersLayer.clearMarkers();";
	
	ВыполнитьСкрипт(ТекстСкрипта);	
	 
КонецПроцедуры
	
#КонецОбласти

#Область РежимМаршрута

// Инициализация режима отображения маршрута
//
&НаКлиенте
Процедура НачатьРежимОтображенияМаршрута()
	
	ЗакончитьПредыдущийРежим();

	ИмяТекущегоРежима = "ПостроениеМаршрутов";
	ТекущаяСтраницаПоТекущемуРежиму(ИмяТекущегоРежима);	
	
	Элементы.ВидГруппировки.Видимость = Истина;
	Элементы.ГрупповаяНастройкаОтображенияТрека.Видимость = Истина;
	
	ВключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	Элементы.ИсторияОбъектаПодменюВыборПериода.Видимость = Ложь;
	ПоказыватьПанельИстории = Истина;
	
КонецПроцедуры

// Конец режима отображения маршрута
//
&НаКлиенте
Процедура ЗакончитьРежимОтображенияМаршрута()
	
	ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	
	ТекстСкрипта = "playRouteLayer.removeAllFeatures();
				   |
				   |Stopwaypointstracking();
				   |off_registration_of_driving_violations();
				   |
				   |if (play_route_intervalid != null) {
				   |	StopPlayRoute();
				   |}
				   |" + СкриптУдаленияСлояФакта() + "
				   |m_map.resetLayersZIndex();";
			
	ВыполнитьСкрипт(ТекстСкрипта);
	
	ДанныеПоТочкамМаршрута.Очистить();
	Элементы.ИсторияОбъектаПодменюВыборПериода.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РежимЗаправкиИСливы

// Инициализация режима заправок и сливов
//
&НаКлиенте
Процедура НачатьРежимЗаправкиИСливы()
	
    ЗакончитьПредыдущийРежим();
		
	ИмяТекущегоРежима = "ЗаправкиИСливы";
	ТекущаяСтраницаПоТекущемуРежиму(ИмяТекущегоРежима);	
	
	Если Элементы.ГруппаПанельИстории.Видимость Тогда
		Элементы.ГруппаПанельИстории.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ВидГруппировки.Видимость = Истина;
	
	// Снимем все пометки дерева
	Для каждого ЭлементДерева Из ДеревоОбъектовМониторинга.ПолучитьЭлементы() Цикл
		ЭлементДерева.Пометка = 0;
		УстановитьПометкиПодчиненных(ЭлементДерева, "Отказ = Ложь;", Неопределено);		
	КонецЦикла;
		
КонецПроцедуры

// Конец режима заправок и сливов
//
&НаКлиенте
Процедура ЗакончитьРежимЗаправкиИСливы()

	ТекстСкрипта = 
		"geometryLayer.removeAllFeatures();
		|markersLayer.markers.forEach(function (marker) {
	    |	if(marker.popup){
	    |		m_map.removePopup(marker.popup);
	    |		marker.popup.destroy();	
	    |	}
	    |});
		|markersLayer.clearMarkers();
        |";
			
	ВыполнитьСкрипт(ТекстСкрипта);

КонецПроцедуры

#КонецОбласти 

#Область РежимПутевыеЛисты

// Инициализация режима путевых листов
//
&НаКлиенте
Процедура НачатьРежимПутевыеЛисты()
	
    ЗакончитьПредыдущийРежим();
	
	ИмяТекущегоРежима = "ПутевыеЛисты";
	ТекущаяСтраницаПоТекущемуРежиму(ИмяТекущегоРежима);	
	
	Элементы.ПодменюФильтры.Видимость = Ложь;
	Элементы.ГеографическиеЗоныПодменю.Видимость = Ложь;
	Элементы.ГрупповаяНастройкаОтображенияТрека.Видимость = Истина;
	
	Если Элементы.ГруппаПанельИстории.Видимость Тогда
		Элементы.ГруппаПанельИстории.Видимость = Ложь;
	КонецЕсли;
	
	ПриИзмененииПериодаСписокМаршрутов();
	
	ДействияПриАктивизацииСтрокиСпискаМаршрутов();	
		
КонецПроцедуры

// Конец режима путевых листов
//
&НаКлиенте
Процедура ЗакончитьРежимПутевыеЛисты()
	
	Элементы.ПодменюФильтры.Видимость = Истина;
	Элементы.ГеографическиеЗоныПодменю.Видимость = Истина;
	
	ТекстСкрипта = СкриптУдаленияСлояПланФакта();
					
	ВыполнитьСкрипт(ТекстСкрипта);
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьСостоянияТерминалов()
	СостояниеТерминалов = Новый Структура();
	СостояниеТерминалов.Вставить("Стоянка", Перечисления.ItobСостоянияТерминалов.Стоянка);
	СостояниеТерминалов.Вставить("Движение", Перечисления.ItobСостоянияТерминалов.Движение);
	СостояниеТерминалов.Вставить("НетДанных", Перечисления.ItobСостоянияТерминалов.НетДанных);
	Возврат СостояниеТерминалов;
КонецФункции // ПолучитьСостоянияТерминалов()

&НаСервере
Функция ПолучитьИзображения(ТекстИПараметрыЗапросаУсловия)
		
	Возврат ItobПунктыНазначения.ПолучитьИзображения(ТекстИПараметрыЗапросаУсловия);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеРедактированияСтандартногоПериодаРежимПланФакт(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ItobОбщегоНазначенияКлиент.УстановитьИнтервалДиалогПоказан(Результат, ДополнительныеПараметры);	// Обычная ЦСМная обработка.
	
		ПриИзмененииПериодаСписокМаршрутов();	// Дополнительно изменяем отбор в дин.списке ПФ маршрутов (для режима "План-факт").	
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаСписокМаршрутов()
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМаршрутов, "ДатаВыездаНачало", Объект.ДатаНачала);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМаршрутов, "ДатаВыездаОкончание", Объект.ДатаОкончания);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыСпискаПланФакта()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМаршрутов, "ДатаВыездаНачало", ТекущаяДатаСеанса());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМаршрутов, "ДатаВыездаОкончание", КонецДня(ТекущаяДатаСеанса()));
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДатаОкончанияПутевыеЛистыПриИзменении(Элемент)
	
	ПриИзмененииПериодаСписокМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутовПриАктивизацииСтроки(Элемент)
	
	ДействияПриАктивизацииСтрокиСпискаМаршрутов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТочекМаршрутаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТочкиМаршрута = Элементы.СписокТочекМаршрута.ТекущиеДанные;
	Если СтрокаТочкиМаршрута = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийАдрес = СтрокаТочкиМаршрута.Адрес;
	Если ЗначениеЗаполнено(ТекущийАдрес) Тогда
		ПоказатьЗначение(, ТекущийАдрес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ФильтрыПунктовНазначенияЗон

&НаКлиенте
Процедура ОбработатьКомандуПоказатьВсеГеографическиеЗоныНаКарте()
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.ВсеГеографическиеЗоны(ЭтотОбъект);		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуСкрытьВсеГеографическиеЗоныНаКарте()
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		МодульГеографическиеЗоныКлиент.СнятьВсеГеографическиеЗоны(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуГеографическиеЗоныПользовательская(ИмяКоманды)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		
		МодульГеографическиеЗоныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ItobГеографическиеЗоныКлиент");
		Установлено = МодульГеографическиеЗоныКлиент.Установить(ЭтаФорма, ИмяКоманды);
		
		Если Не Установлено Тогда 
			ТекстСкрипта = ОбработатьКомандуГеографическиеЗоны(ИмяКоманды);
			ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеФильтров

// Заполнение фильтров пунктов назначения
//
&НаСервере
Процедура ЗаполнитьФильтрыПунктовНазначения()
	
	ItobОбщегоНазначения.ДобавитьКнопкуНаФорму(ЭтаФорма,
											   "ПунктыНазначения_Все",
											   "ПунктыНазначения_Установить",
											   Элементы.ПодменюФильтрыОсновные, 
											   Новый Структура("Заголовок", НСтр("ru = 'Все'")));

	ItobОбщегоНазначения.ДобавитьКнопкуНаФорму(ЭтаФорма,
											   "ПунктыНазначения_СкрытьВсе",
											   "ПунктыНазначения_Установить", 
											   Элементы.ПодменюФильтрыОсновные, 
											   Новый Структура("Заголовок", НСтр("ru = 'Скрыть все'")));

	МодульФильтрыНаКартах = ОбщегоНазначения.ОбщийМодуль("ItobФильтрыНаКартах");
	МодульФильтрыНаКартах.ЗаполнитьФильтрыПользовательские(ЭтаФорма, Элементы.ПодменюФильтрыДополнительные, Перечисления.ItobВидыФильтровНаКартах.ПунктыНазначения);
	
	Кнопка = ItobОбщегоНазначения.ДобавитьКнопкуНаФорму(ЭтаФорма,"ПунктыНазначения_Настройки","ПунктыНазначения_Установить",Элементы.ПодменюФильтрыНастройки, Новый Структура("Заголовок", НСтр("ru = 'Настройки'")));

	Кнопка.Картинка = ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("ПрочиеПользовательскиеНастройки");
	
КонецПроцедуры

#КонецОбласти 

#Область Обновить
	
&НаКлиенте
Процедура ОбновитьНастройкиФильтровПунктовНазначения()
	ОбновитьНастройкиФильтровПунктовНазначенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФильтровПунктовНазначенияНаСервере()
	
	МодульФильтрыНаКартах = ОбщегоНазначения.ОбщийМодуль("ItobФильтрыНаКартах");
	МодульФильтрыНаКартах.ОбновитьНастройкиФильтров(ЭтаФорма, 
													"ПодменюФильтрыДополнительные", 
													Перечисления.ItobВидыФильтровНаКартах.ПунктыНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиФильтровГеографическихЗон()
	ОбновитьНастройкиФильтровГеографическихЗонНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФильтровГеографическихЗонНаСервере()
	
	МодульФильтрыНаКартах = ОбщегоНазначения.ОбщийМодуль("ItobФильтрыНаКартах");
	МодульФильтрыНаКартах.ОбновитьНастройкиФильтров(ЭтаФорма, 
													"ГеографическиеЗоныГруппаПользовательские", 
													Перечисления.ItobВидыФильтровНаКартах.ГеографическиеЗоны);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ПрименитьФильтрГеографическихЗонОжидание()
	
	Если мСчетчикДокументСформирован < 1 
		 ИЛИ Элементы.ПолеHTML.Документ = Неопределено
		 ИЛИ НЕ Элементы.ПолеHTML.Документ.readyState = "complete" Тогда
		ПодключитьОбработчикОжидания("ПрименитьФильтрГеографическихЗонОжидание", 0.5, Истина);
	
		Возврат;
	КонецЕсли;
	
	ПрименитьПользовательскийФильтрГеографическихЗон();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПрименитьПользовательскийФильтрГеографическихЗон()
		
	Если ГеографическиеЗоныПользовательскийФильтр = "ГеографическиеЗоныВсе" Тогда
		ОбработатьКомандуПоказатьВсеГеографическиеЗоныНаКарте();
	ИначеЕсли ГеографическиеЗоныПользовательскийФильтр = "ГеографическиеЗоныСнятьВсе" Тогда
		ОбработатьКомандуСкрытьВсеГеографическиеЗоныНаКарте();
	Иначе
		ОбработатьКомандуГеографическиеЗоныПользовательская(ГеографическиеЗоныПользовательскийФильтр);
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти

// Функция - Получить детали датчика
//
// Параметры:
//  Данные	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаСервере
Функция ПолучитьДеталиДатчика(Данные)
	
	ТабДеталей = Новый ТаблицаЗначений;
	ТабДеталей.Колонки.Добавить("Показатель");
	ТабДеталей.Колонки.Добавить("Значение");
	ТабДеталей.Колонки.Добавить("Датчик");
	ТабДеталей.Колонки.Добавить("ТипДатчика");
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Актуальность";
	НовСтрокаДетали.Значение = ?(НачалоДня(ТекущаяДатаСеанса())=НачалоДня(Данные.АктуальностьДанных),
		Формат(Данные.АктуальностьДанных,"ДФ=HH:mm:ss"),
		Формат(Данные.АктуальностьДанных,"ДФ='dd.MM.yyyy HH:mm:ss'")) ;
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Местоположение";
	Если НЕ (Данные.Широта=0 И Данные.Долгота=0) Тогда
		НовСтрокаДетали.Значение = ItobОперативныйМониторинг.НайтиБлижайшийАдрес(Данные.Широта, Данные.Долгота);	
	Иначе
		НовСтрокаДетали.Значение = "";
	КонецЕсли;
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Скорость";
	НовСтрокаДетали.Значение = ""+Данные.Скорость+" км/ч";
			
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Направление";
	НовСтрокаДетали.Значение = ""+Данные.Направление+"°";
	
	НовСтрокаДетали = ТабДеталей.Добавить();
	НовСтрокаДетали.Показатель = "Терминал";
	НовСтрокаДетали.Значение = Данные.Терминал;
	
	// Датчики
	ОбработанныеДанныеДатчиков = ItobОбщегоНазначения.ПреобразоватьСтрокуВДанныеДатчиков(Данные.ДанныеДатчиков);
	
	ДатчикОснПитание = Данные.Терминал.Модель.ОсновноеПитание;
	МинимальноеЗначениеОсновногоПитания = Данные.Терминал.Модель.МинимальноеЗначениеОсновногоПитания;
	
	Терминалы = Новый Массив();
	Терминалы.Добавить(Данные.Терминал);
	
	НаборРезультатов = ПакетЗапросовДатчикиТерминаловИПоказателиКалибровочныхГрафиков(Терминалы);

	ИндексВыборкиПоДатчикам = 0;
	ИндексВыборкиПоКалибровочнымГрафикам = 1;
	
	ВыборкаДатчики = НаборРезультатов[ИндексВыборкиПоДатчикам].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКалибровочныеГрафики = НаборРезультатов[ИндексВыборкиПоКалибровочнымГрафикам].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДатчики.Следующий() Цикл
		
		ЗначениеДатчика = ОбработанныеДанныеДатчиков[ВыборкаДатчики.Код];
		Если ЗначениеДатчика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДатчики = ТабДеталей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДатчики, ВыборкаДатчики);
		НоваяСтрокаДатчики.Показатель = ВыборкаДатчики.Назначение;
		
		НоваяСтрокаДатчики.Значение = ПреобразованноеЗначениеДатчика(ЗначениеДатчика,
																	 ВыборкаДатчики,
																	 ВыборкаКалибровочныеГрафики,
																	 ВыборкаДатчики.Выбрать());
	
		Если ВыборкаДатчики.Датчик = ДатчикОснПитание Тогда
			НовСтрокаДетали = ТабДеталей.Вставить(2);
			НовСтрокаДетали.Показатель = "Питание";
			НовСтрокаДетали.Значение = ?(ЗначениеДатчика<МинимальноеЗначениеОсновногоПитания, "Резервное", "Основное");
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ТабДеталей;

КонецФункции

Функция ПреобразованноеЗначениеДатчика(ЗначениеДатчика, ИнформацияПоДатчику, ВыборкаКалибровочныеГрафики, ВыборкаРасшифровкиЗначенийДискретногоДатчика)
	
	ЭтоДискретныйДатчик = ИнформацияПоДатчику.ТипДатчика = ПредопределенноеЗначение("Перечисление.ItobТипыДатчиков.Дискретный");
	ПрисутствуетКалибровочныйГрафик = ЗначениеЗаполнено(ИнформацияПоДатчику.КалибровочныйГрафик);
	
	ПреобразованноеЗначениеДатчика = Строка(Окр(ЗначениеДатчика, 1));
	
	Если ЭтоДискретныйДатчик Тогда
		Если ВыборкаРасшифровкиЗначенийДискретногоДатчика.НайтиСледующий(Новый Структура("Показание", ЗначениеДатчика)) Тогда
			ПреобразованноеЗначениеДатчика = ВыборкаРасшифровкиЗначенийДискретногоДатчика.Расшифровка;  
		КонецЕсли;
		ВыборкаРасшифровкиЗначенийДискретногоДатчика.Сбросить();
		
	ИначеЕсли ПрисутствуетКалибровочныйГрафик Тогда
		ПоказателиКалибровочногоГрафика = Неопределено;
		
		ВыборкаКалибровочныеГрафики.Сбросить();
		Если ВыборкаКалибровочныеГрафики.НайтиСледующий(Новый Структура("КалибровочныйГрафик", ИнформацияПоДатчику.КалибровочныйГрафик)) Тогда
			ПоказателиКалибровочногоГрафикаДатчика = ВыборкаКалибровочныеГрафики.Выбрать();
			ПреобразованноеЗначениеДатчика = ПреобразованноеЗначениеДатчикаПоКалибровочномуГрафику(ЗначениеДатчика, ПоказателиКалибровочногоГрафикаДатчика, ИнформацияПоДатчику);
		КонецЕсли;
	КонецЕсли;

	
	Возврат ПреобразованноеЗначениеДатчика;
	
КонецФункции

&НаСервере
Функция ПреобразованноеЗначениеДатчикаПоКалибровочномуГрафику(ЗначениеДатчика, ПоказателиКалибровочногоГрафика, ИнформацияПоДатчику)
	
	ПересчитанноеЗначение = "Неопределено";
	Если ПоказателиКалибровочногоГрафика = Неопределено ИЛИ ПоказателиКалибровочногоГрафика.Количество() < 2 Тогда
		
		Возврат ПересчитанноеЗначение;
	КонецЕсли;
	
	СтрКалибровки1 = Новый Структура ("Вход, Выход");
	ПерваяСтрока = Истина;
	Пока ПоказателиКалибровочногоГрафика.Следующий() Цикл
		
		Если ПерваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(СтрКалибровки1, ПоказателиКалибровочногоГрафика);
			ПерваяСтрока = Ложь;
			
			Продолжить;
		ИначеЕсли ЗначениеДатчика >= СтрКалибровки1.Вход
				  И ЗначениеДатчика <= ПоказателиКалибровочногоГрафика.Вход Тогда
			СтрКалибровки2 = ПоказателиКалибровочногоГрафика;
			ОтрезокЗначенийВход = СтрКалибровки1.Вход - СтрКалибровки2.Вход;
			
			Если ОтрезокЗначенийВход = 0 Тогда
				ТекстОшибки = СтрШаблон("Неверно задан калибровочный график ""%1"" для датчика ""%2"": в таблице преобразования введены неоднозначные данные",
										ИнформацияПоДатчику.КалибровочныйГрафик,
										ИнформацияПоДатчику.Назначение);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				
				Прервать;
			Иначе
				ПересчитанноеЗначение = (СтрКалибровки1.Выход-СтрКалибровки2.Выход)/(ОтрезокЗначенийВход)*ЗначениеДатчика
					+ (СтрКалибровки1.Вход*СтрКалибровки2.Выход-СтрКалибровки2.Вход*СтрКалибровки1.Выход)/(ОтрезокЗначенийВход);
			КонецЕсли;
			ПересчитанноеЗначение = Строка(Окр(ПересчитанноеЗначение, 1));	
			
			Прервать;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрКалибровки1, ПоказателиКалибровочногоГрафика);
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ПересчитанноеЗначение;
	
КонецФункции

// Процедура обрабатывает масштабирование карты.
//
&НаКлиенте
Процедура АвтоматическиМасштабироватьКарту()
    	
	ТекстСкрипта = "";
	Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
		ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, "+Формат(ТекущийМасштаб,"ЧГ=0")+");
			|pt = null;";
	
	КонецЕсли;	
	
	Если ТекстСкрипта <> "" Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;

КонецПроцедуры // АвтоматическиМасштабироватьКарту()

#Область Легенда

&НаКлиенте
Процедура ЛегендаМаршрутовНаКарте(Команда)
	
	ИдентификаторЛегенды = "ЛегендаМаршрутовНаКарте";
	ДобавляемыеДекорации = Новый Массив;
	Если НЕ Элементы.СписокМаршрутов.ТекущиеДанные = Неопределено Тогда
		ИнформацияОЦветеПлановогоМаршрута = ПараметрыДобавляемойДекорации();
		
		Если ЦветМаршрутаПлан = Неопределено Тогда
			ИнформацияОЦветеПлановогоМаршрута.Цвет = Новый Цвет;
		Иначе
			ИнформацияОЦветеПлановогоМаршрута.Цвет = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(ЦветМаршрутаПлан);
		КонецЕсли; 
		
		ИнформацияОЦветеПлановогоМаршрута.Заголовок = "План";
		ДобавляемыеДекорации.Добавить(ИнформацияОЦветеПлановогоМаршрута);
		
		ИнформацияОЦветеФактическогоМаршрута = ПараметрыДобавляемойДекорации();
		
		Если ЦветМаршрутаФакт = Неопределено Тогда
			ИнформацияОЦветеФактическогоМаршрута.Цвет = Новый Цвет;
		Иначе
			ИнформацияОЦветеФактическогоМаршрута.Цвет = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(ЦветМаршрутаФакт);
		КонецЕсли; 
		
		ИнформацияОЦветеФактическогоМаршрута.Заголовок = "Факт";
		ДобавляемыеДекорации.Добавить(ИнформацияОЦветеФактическогоМаршрута);	
	КонецЕсли;

	ОткрытьФормуЛегенды(ДобавляемыеДекорации, ИдентификаторЛегенды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛегендаСпискаМаршрутов(Команда)
	
	ИдентификаторЛегенды = "ЛегендаСпискаМаршрутов";
	ДобавляемыеДекорации = Новый Массив;
	
	ИнформацияОСтатусеКВыполнению = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеКВыполнению.Цвет = ЦветСтатусаКвыполнению();
	ИнформацияОСтатусеКВыполнению.Заголовок = "К выполнению";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеКВыполнению);
		
	ИнформацияОСтатусеВыполняется = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеВыполняется.Цвет = ЦветСтатусаВыполняется();
	ИнформацияОСтатусеВыполняется.Заголовок = "Выполняется";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеВыполняется);

	ИнформацияОСтатусеВыполнен = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеВыполнен.Цвет = ЦветСтатусаВыполнен();
	ИнформацияОСтатусеВыполнен.Заголовок = "Выполнен";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеВыполнен);

	ИнформацияОСтатусеВыполненЧастично = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеВыполненЧастично.Цвет = ЦветСтатусаВыполненЧастично();
	ИнформацияОСтатусеВыполненЧастично.Заголовок = "Выполнен частично";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеВыполненЧастично);
	
	ИнформацияОСтатусеИстекСрокДействия = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеИстекСрокДействия.Цвет = ЦветСтатусаИстекСрокДействия();
	ИнформацияОСтатусеИстекСрокДействия.Заголовок = "Истек срок действия";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеИстекСрокДействия);

	ОткрытьФормуЛегенды(ДобавляемыеДекорации, ИдентификаторЛегенды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛегендаСпискаТочекМаршрута(Команда)
	
	ИдентификаторЛегенды = "ЛегендаСпискаТочекМаршрута";
	ДобавляемыеДекорации = Новый Массив;
	
	ИнформацияОСтатусеПосещенная = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеПосещенная.Цвет = ЦветСтатусаПосещенная();
	ИнформацияОСтатусеПосещенная.Заголовок = "Посещенная";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеПосещенная);
	
	ИнформацияОСтатусеПосещеннаяНеВовремя = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеПосещеннаяНеВовремя.Цвет = ЦветСтатусаПосещеннаяНеВовремя();
	ИнформацияОСтатусеПосещеннаяНеВовремя.Заголовок = "Посещенная не вовремя";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеПосещеннаяНеВовремя);

	ИнформацияОСтатусеНепосещенная = ПараметрыДобавляемойДекорации();
	ИнформацияОСтатусеНепосещенная.Цвет = ЦветСтатусаНепосещенная();
	ИнформацияОСтатусеНепосещенная.Заголовок = "Непосещенная";
	ДобавляемыеДекорации.Добавить(ИнформацияОСтатусеНепосещенная);

	ОткрытьФормуЛегенды(ДобавляемыеДекорации, ИдентификаторЛегенды);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриАктивизацииСтрокиСпискаМаршрутов()
	
	Элементы.ЛегендаМаршрутыНаКарте.Видимость = Истина;																					
	Если Элементы.СписокМаршрутов.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТочекМаршрута, 
																				"МаршрутноеЗадание", 
																				ItobВызовСервераПовтИсп.ПустаяСсылкаПоИмени("ПутевойЛист"), 
																				ВидСравненияКомпоновкиДанных.Равно);
		Элементы.ЛегендаМаршрутыНаКарте.Видимость = Ложь;																				
																			
		Возврат;	
	КонецЕсли; 
	
	ПодключитьОбработчикОжидания("ОбновитьПланФактПоМаршруту",0.1 ,Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТочекМаршрута, 
																			"МаршрутноеЗадание", 
																			Элементы.СписокМаршрутов.ТекущиеДанные.МаршрутноеЗадание, 
																			ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДобавляемойДекорации()
	
	ПараметрыДекорации = Новый Структура;
	ПараметрыДекорации.Вставить("Цвет"); 
	ПараметрыДекорации.Вставить("Заголовок"); 
	
	
	Возврат ПараметрыДекорации;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЛегенды(ДобавляемыеДекорации, ИдентификаторЛегенды)
	
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма.Легенда", 
				 Новый Структура("ДобавляемыеДекорации, ИдентификаторЛегенды", ДобавляемыеДекорации, ИдентификаторЛегенды), 
				 ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ЦветаСтатусов

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаПосещенная()
	Возврат Новый Цвет(203, 253, 203);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаПосещеннаяНеВовремя()
	Возврат Новый Цвет(255, 236, 139);	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаНепосещенная()
	Возврат Новый Цвет(255, 225, 213);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаКвыполнению()
	Возврат Новый Цвет(175, 238, 238);	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаВыполняется()
	Возврат Новый Цвет(255, 250, 205);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаВыполнен()
	Возврат Новый Цвет(203, 253, 203);	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаВыполненЧастично()
	Возврат Новый Цвет(229, 211, 229);	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтатусаИстекСрокДействия()
	Возврат Новый Цвет(255, 225, 213);
КонецФункции 

#КонецОбласти

#Область РаботаСоСпособамиПредставленияТСНаКарте

&НаКлиенте
Процедура ПослеВыбораСпособаОтображенияПредставленияТС(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ПредставлениеТСНаКарте = ВыбранноеЗначение.Значение;
		ПоказатьНаКартеТекущиеОбъекты();
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиКарты",
																	 "ПредставлениеТСНаКарте",
																	 ПредставлениеТСНаКарте);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НадписьОбъектаПоСпособуПредставленияТС(СтрокаОбъектов, СпособыПредставленияТС)
	
	Если ПредставлениеТСНаКарте = СпособыПредставленияТС.ГаражныйНомер
		 И СтрокаОбъектов.ЭтоТранспортноеСредство Тогда
		НадписьОбъекта = СтрокаОбъектов.ГаражныйНомер;
	
	ИначеЕсли ПредставлениеТСНаКарте = СпособыПредставленияТС.ГосНомер
			  И СтрокаОбъектов.ЭтоТранспортноеСредство Тогда
		НадписьОбъекта = СтрокаОбъектов.ГосНомер;
	
	ИначеЕсли ПредставлениеТСНаКарте = СпособыПредставленияТС.НаименованиеТерминала
			  И СтрокаОбъектов.ЭтоТранспортноеСредство Тогда
		НадписьОбъекта =  СтрокаОбъектов.ТерминалПредставление;
		
	ИначеЕсли ПредставлениеТСНаКарте = СпособыПредставленияТС.СкрытьПредставление
			  И СтрокаОбъектов.ЭтоТранспортноеСредство Тогда
		НадписьОбъекта = "";

	Иначе
		НадписьОбъекта = СтрокаОбъектов.ОбъектПредставление;
	
	КонецЕсли;
	
	
	Возврат НадписьОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция СпособыПредставленияТСНаКарте()
	
	СпособыПредставленияТС = Новый Структура;
	СпособыПредставленияТС.Вставить("ГаражныйНомер", ПредопределенноеЗначение("Перечисление.ItobПредставлениеТС.ГаражныйНомер"));
	СпособыПредставленияТС.Вставить("ГосНомер", ПредопределенноеЗначение("Перечисление.ItobПредставлениеТС.ГосНомер"));
	СпособыПредставленияТС.Вставить("НаименованиеТерминала", ПредопределенноеЗначение("Перечисление.ItobПредставлениеТС.НаименованиеТерминала"));
	СпособыПредставленияТС.Вставить("СкрытьПредставление", ПредопределенноеЗначение("Перечисление.ItobПредставлениеТС.СкрытьПредставление"));
	
	
	Возврат СпособыПредставленияТС;
	
КонецФункции 

&НаСервереБезКонтекста
Функция СписокСпособовПредставленияТСНаКарте()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ItobПредставлениеТС.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ItobПредставлениеТС.Ссылка) КАК Представление
	|ИЗ
	|	Перечисление.ItobПредставлениеТС КАК ItobПредставлениеТС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СпособыПредставленияТС = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СпособыПредставленияТС.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	
	Возврат СпособыПредставленияТС;
	
КонецФункции

&НаСервере
Функция УстановленаТекущаяСтрокаПоОбъектуСлежения(ОбъектСлежения)
	
	Установлена = Ложь;
	СтрокиПоДанномуОбъекту = Табактуальности.НайтиСтроки(Новый Структура("Объект", ОбъектСлежения));
	Если СтрокиПоДанномуОбъекту.Количество() = 1 Тогда
		ИдентификаторСтроки = СтрокиПоДанномуОбъекту[0].ИдДереваОбъектов;
		Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = ИдентификаторСтроки;
		Установлена = Истина;
	КонецЕсли; 
	
	
	Возврат Установлена;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ЭкранироватьКавычкиДляJSON(Знач ИсходнаяСтрока)
	
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "'", "\'");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, """", "\"""); 
	
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭкранироватьКавычкиДляHTML(Знач ИсходнаяСтрока)
	
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "'", "&prime;");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, """", "&quot;");
	
	
	Возврат ИсходнаяСтрока;
	
КонецФункции
 
#Область ВыводДанныхПоТрекуМаршрута

&НаСервере
Функция ДатчикиТерминала(ВыборкаДатчикиТерминалов, Терминал, ТипДатчикаДискретный)
	
	ДатчикиТерминала = Новый Массив;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Терминал", Терминал);
	ВыборкаДатчикиТерминалов.Сбросить();
	
	Пока ВыборкаДатчикиТерминалов.НайтиСледующий(СтруктураПоиска) Цикл
		ДанныеДатчика = Новый Структура;
		ДанныеДатчика.Вставить("Датчик", ВыборкаДатчикиТерминалов.Датчик);
		ДанныеДатчика.Вставить("Код", ВыборкаДатчикиТерминалов.Код);
		ДанныеДатчика.Вставить("ТипДатчика", ВыборкаДатчикиТерминалов.ТипДатчика);
		ДанныеДатчика.Вставить("Назначение", ВыборкаДатчикиТерминалов.Назначение);
		ДанныеДатчика.Вставить("КалибровочныйГрафик", ВыборкаДатчикиТерминалов.КалибровочныйГрафик);
		ДанныеДатчика.Вставить("ВыборкаРасшифровкиЗначенийДискретногоДатчика", 
							   ?(ВыборкаДатчикиТерминалов.ТипДатчика = ТипДатчикаДискретный, ВыборкаДатчикиТерминалов.Выбрать(), Неопределено));
		
		ДатчикиТерминала.Добавить(ДанныеДатчика);
	КонецЦикла; 
	
	
	Возврат ДатчикиТерминала;
	
КонецФункции

&НаСервере
Функция ПакетЗапросовДатчикиТерминаловИПоказателиКалибровочныхГрафиков(Терминалы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминалы", Терминалы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobТерминалыДатчики.Датчик КАК Датчик,
	|	ItobДатчики.Код КАК Код,
	|	ItobТерминалыДатчики.Назначение КАК Назначение,
	|	ItobТерминалыДатчики.Ссылка КАК Терминал,
	|	ItobТерминалыДатчики.КалибровочныйГрафик КАК КалибровочныйГрафик,
	|	ItobДатчики.ТипДатчика КАК ТипДатчика,
	|	ItobНазначенияДатчиковРасшифровкаПоказаний.Показание КАК Показание,
	|	ItobНазначенияДатчиковРасшифровкаПоказаний.Расшифровка КАК Расшифровка
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobДатчики КАК ItobДатчики
	|		ПО ItobТерминалыДатчики.Датчик = ItobДатчики.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobНазначенияДатчиков.РасшифровкаПоказаний КАК ItobНазначенияДатчиковРасшифровкаПоказаний
	|		ПО ItobТерминалыДатчики.Назначение = ItobНазначенияДатчиковРасшифровкаПоказаний.Ссылка
	|ГДЕ
	|	ItobТерминалыДатчики.Ссылка В(&Терминалы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ItobТерминалыДатчики.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(Код),
	|	МИНИМУМ(Назначение),
	|	МИНИМУМ(Терминал),
	|	МИНИМУМ(КалибровочныйГрафик),
	|	МИНИМУМ(ТипДатчика)
	|ПО
	|	Датчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ItobКалибровочныеГрафикиПоказатели.НомерСтроки КАК НомерСтроки,
	|	ItobКалибровочныеГрафикиПоказатели.Вход КАК Вход,
	|	ItobКалибровочныеГрафикиПоказатели.Выход КАК Выход,
	|	ItobТерминалыДатчики.КалибровочныйГрафик КАК КалибровочныйГрафик
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobКалибровочныеГрафики.Показатели КАК ItobКалибровочныеГрафикиПоказатели
	|		ПО ItobТерминалыДатчики.КалибровочныйГрафик = ItobКалибровочныеГрафикиПоказатели.Ссылка
	|ГДЕ
	|	ItobТерминалыДатчики.Ссылка В(&Терминалы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	КалибровочныйГрафик";
	
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеПоТочкеНаКарту(ИдентификаторТочки)
	
	ДанныеТочкиМаршрута = ДанныеПоТочкеМаршрутаСервер(ИдентификаторТочки);
	Если ДанныеТочкиМаршрута.ДанныеНайдены Тогда
		ВывестиИнформациюПоТочкеНаКарту(ДанныеТочкиМаршрута.ДанныеДатчиковJSON);
		Если НЕ ДанныеТочкиМаршрута.АдресГеокодирован  Тогда
			ГеокодироватьИВывестиАдресТочкиНаКарту(ДанныеТочкиМаршрута);
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоТочкеМаршрутаСервер(ИдентификаторТочки)
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеНайдены", Ложь);
	Результат.Вставить("АдресГеокодирован", Ложь);
	
	НайденныеСтроки = ДанныеПоТочкамМаршрута.НайтиСтроки(Новый Структура("ИдентификаторТочки", ИдентификаторТочки));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеПоТочкеМаршрута = НайденныеСтроки[0];
		
		Результат.ДанныеНайдены = Истина;
		АдресГеокодирован = (НЕ ДанныеПоТочкеМаршрута.Адрес = "");
		Результат.АдресГеокодирован = АдресГеокодирован;
		Результат.Вставить("ИдентификаторТаблицыДанных", ДанныеПоТочкеМаршрута.ПолучитьИдентификатор());
		
		АдресТочки = ЭкранироватьКавычкиДляHTML(ДанныеПоТочкеМаршрута.Адрес);
		
		ДанныеТочки = Новый Структура;
		ДанныеТочки.Вставить("PointID", ИдентификаторТочки);
		ДанныеТочки.Вставить("TrackingObject", ДанныеПоТочкеМаршрута.ОбъектСлежения);
		ДанныеТочки.Вставить("Mileage", СтрШаблон("Пробег: %1 км",  XMLСтрока(ДанныеПоТочкеМаршрута.Пробег)));
		ДанныеТочки.Вставить("Date", ДанныеПоТочкеМаршрута.Дата);
		ДанныеТочки.Вставить("Speed", СтрШаблон("Скорость: %1 км/ч", XMLСтрока(ДанныеПоТочкеМаршрута.Скорость)));
		ДанныеТочки.Вставить("Lon", ДанныеПоТочкеМаршрута.Широта);
		ДанныеТочки.Вставить("Lat", ДанныеПоТочкеМаршрута.Долгота);
		ДанныеТочки.Вставить("Geocoded", АдресГеокодирован);
		ДанныеТочки.Вставить("Direction", СтрШаблон("Направление: %1 °",  XMLСтрока(ДанныеПоТочкеМаршрута.Направление)));
		ДанныеТочки.Вставить("Address", АдресТочки);
		ДанныеТочки.Вставить("Parking", ДанныеПоТочкеМаршрута.ЭтоСтоянка);
		ДанныеТочки.Вставить("updatepopup", Ложь);
		ДанныеТочки.Вставить("SensorsHead", "Данные датчиков");
		ДанныеТочки.Вставить("Coordinates", СтрШаблон("Координаты: ( %1; %2 )", ДанныеПоТочкеМаршрута.Долгота, ДанныеПоТочкеМаршрута.Широта));
		
		ДанныеДатчиковВТочке = Новый Массив;
		Для каждого ДанныеДатчикаВТочке Из  ДанныеПоТочкеМаршрута.ДанныеДатчиковВТочке Цикл
			ДанныеДатчиковВТочке.Добавить(ДанныеДатчикаВТочке.Значение);
		КонецЦикла;
		ДанныеТочки.Вставить("Sensors", ДанныеДатчиковВТочке);
		
		Результат.Вставить("ДанныеТочки", ДанныеТочки);
		Результат.Вставить("ДанныеДатчиковJSON", СериализоватьДанныеВJSON(ДанныеТочки));
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ГеокодироватьИВывестиАдресТочкиНаКарту(Параметры)
	
	РезультатОбратногоГеокодирования = ВыполнитьОбратноеГеокодированиеВФоне(Параметры.ДанныеТочки, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеТочки", Параметры.ДанныеТочки);
	ДополнительныеПараметры.Вставить("ИдентификаторТаблицыДанных", Параметры.ИдентификаторТаблицыДанных);
	
	Обработчик = Новый ОписаниеОповещения("ВывестиАдресТочкиНаКартуЗавершение", ЭтотОбъект, ДополнительныеПараметры);																	 
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОбратногоГеокодирования, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьОбратноеГеокодированиеВФоне(ДанныеТочки, УникальныйИдентификатор)

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Широта", ДанныеТочки.Lon);
	ПараметрыПроцедуры.Вставить("Долгота", ДанныеТочки.Lat);
	
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;	
	
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ItobРабочееМестоДиспетчера.ОбратноеГеокодированиеВФоне", 
											  ПараметрыПроцедуры, 
											  ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ВывестиАдресТочкиНаКартуЗавершение(Параметры, ДополнительныеПараметры) Экспорт
	
	ДанныеТочкиСАдресом = ДанныеТочкиСАдресомJSON(Параметры.АдресРезультата, ДополнительныеПараметры.ДанныеТочки);
	
	Если НЕ ДанныеТочкиСАдресом = Неопределено Тогда
		ВывестиИнформациюПоТочкеНаКарту(ДанныеТочкиСАдресом.ДанныеТочкиJSON);
		
		ДанныеПоТочкеМаршрута = ДанныеПоТочкамМаршрута.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТаблицыДанных);
		Если НЕ ДанныеПоТочкеМаршрута = Неопределено Тогда
			ДанныеПоТочкеМаршрута.Адрес = ДанныеТочкиСАдресом.Адрес;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеТочкиСАдресомJSON(АдресВоВременномХранилище, ДанныеТочки)
	
	Адрес = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Результат = Неопределено;
	
	Если НЕ Адрес = Неопределено Тогда
		Адрес = ЭкранироватьКавычкиДляHTML(Адрес);
		
		ДанныеТочки.Вставить("Address", Адрес);
		ДанныеТочки.Вставить("Geocoded", Истина);
		ДанныеТочки.Вставить("updatepopup", Истина);
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеТочкиJSON", СериализоватьДанныеВJSON(ДанныеТочки));
		Результат.Вставить("Адрес", Адрес);
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции
 
&НаКлиенте
Процедура ВывестиИнформациюПоТочкеНаКарту(ДанныеДатчиковJSON)
	
	ВыполнитьСкрипт("var JSONPointsFrom1c = " + ДанныеДатчиковJSON + ";
					|waypoints_control.handler.show_waypointspopup(JSONPointsFrom1c);");
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СериализоватьДанныеВJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаСервере
Функция ДанныеПодписиСтоянки(ДлительностьСтоянкиВСекундах)
	
	ДлительностьСтоянкиДата = '00010101';
	ДлительностьСтоянкиДата = ДлительностьСтоянкиДата + ДлительностьСтоянкиВСекундах;
	
	Если ДлительностьСтоянкиВСекундах < 86400 Тогда
		ДлительностьСтоянкиПредставление = Формат(ДлительностьСтоянкиДата, "ДФ=HH:mm");
		ШиринаПодписи = "36";
	ИначеЕсли ДлительностьСтоянкиВСекундах = 86400 Тогда 	
		ДлительностьСтоянкиПредставление = "1д0ч";
		ШиринаПодписи = "35";	
	ИначеЕсли ДлительностьСтоянкиВСекундах <= 20*86400 Тогда
		ДлительностьСтоянкиДата = ДлительностьСтоянкиДата - 86400; 
		ДлительностьСтоянкиПредставление = Формат(ДлительностьСтоянкиДата, "ДФ='d""д""H""ч""'");
		ДлинаСтроки = СтрДлина(ДлительностьСтоянкиПредставление);
		ШиринаПодписи = (ДлинаСтроки + 3) * 5; 
		ШиринаПодписи = XMLСтрока(ШиринаПодписи);	
	Иначе
		ДлительностьСтоянкиПредставление = ">20д";
		ШиринаПодписи = "35";
	КонецЕсли; 
	
	Результат = Новый Структура;
	Результат.Вставить("ДлительностьСтоянкиПредставление", ДлительностьСтоянкиПредставление);
	Результат.Вставить("ШиринаПодписи", ШиринаПодписи);
	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ГрупповаяНастройкаОтображенияТрекаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;	
	КонецЕсли; 	
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ItobРабочееМестоДиспетчера", 
																 "РежимГрупповогоОтображенияТрека", 
																 РезультатЗакрытия.РежимГрупповогоОтображения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущийРежимГрупповогоОтображения()
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ItobРабочееМестоДиспетчера", "РежимГрупповогоОтображенияТрека");
	
КонецФункции

&НаКлиенте
Процедура НастроитьУскорениеПроигрыванияМаршрутаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатЗакрытия) = Тип("Число") Тогда
		Возврат;	
	КонецЕсли; 
	
	КоэффициентУскоренияПроигрываниеМаршрута = ?(РезультатЗакрытия = 0, 1000, РезультатЗакрытия);
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Функция ПараметрыОтображенияОбъектовСервер(ИдентификаторыОтмеченныхСтрок)
	
	ПараметрыОтображенияОбъектов = Новый Структура;
	ПараметрыОтображенияОбъектов.Вставить("МасштабыОбъектовНаКарте", ItobОбщегоНазначения.МасштабыОбъектовНаКарте());
	
	ПараметрыДинамическогоОформленияСтрокОбъектов = Новый Соответствие;
	Для каждого Идентификатор Из ИдентификаторыОтмеченныхСтрок Цикл
		ПараметрыДинамическогоОформленияСтрокОбъектов.Вставить(Идентификатор, 
												  			   ПараметрыДинамическогоОформленияНаКарте(Идентификатор));
	КонецЦикла;
	
	ПараметрыОтображенияОбъектов.Вставить("ПараметрыДинамическогоОформленияСтрокОбъектов", ПараметрыДинамическогоОформленияСтрокОбъектов);
	 
	ПараметрыОтображенияОбъектов.Вставить("КластеризоватьОбъектыСлежения", 
										  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКарты", 
										  												   "КластеризоватьОбъектыСлежения", 
										  												   Ложь));
	
	
	Возврат ПараметрыОтображенияОбъектов;
	
КонецФункции

#Область ПостроениеТрекаМаршрутаПоНарисованнымНаКартеТочкам

&НаКлиенте
Процедура ПостроитьМаршрутПоПереданнымТочкам(КоординатыСтрокой)
	
	ОтменитьТекущийРасчетМаршрута(ИдентификаторЗаданияРасчетМаршрута);
	ПостроитьМаршрутПоПереданнымТочкамСОжиданием(КоординатыСтрокой);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьТекущийРасчетМаршрута(ИдентификаторФоновогоЗадания)
	
	Если НЕ ИдентификаторФоновогоЗадания = Неопределено Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
		Если НЕ Задание = Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Задание.Отменить();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПостроитьМаршрутПоПереданнымТочкамСОжиданием(КоординатыСтрокой)
	
	ТрекМаршрута = РасчитатьТрекМаршрутаВФоне(КоординатыСтрокой, УникальныйИдентификатор);
	СкриптТрекаМаршрута = ТрекМаршрута.ТекстСкрипта;
	ИдентификаторЗаданияРасчетМаршрута = ТрекМаршрута.ИдентификаторЗадания;	
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	
	Обработчик = Новый ОписаниеОповещения("ПостроитьМаршрутПоПереданнымТочкамСОжиданиемЗавершение", ЭтотОбъект);																	 
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СкриптТрекаМаршрута, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчитатьТрекМаршрутаВФоне(КоординатыСтрокой, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("КоординатыСтрокой", КоординатыСтрокой);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор);		
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Построение маршрута по указанным координатам";
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатВыполненияДлительнойОперации = ДлительныеОперации.ВыполнитьВФоне("Обработки.ItobРабочееМестоДиспетчера.РасчетМаршрутаПоСтрокеКоординатВФоне", 
																			  ПараметрыПроцедуры, 
																			  ПараметрыВыполнения);
	Результат = Новый Структура;
	Результат.Вставить("ТекстСкрипта", РезультатВыполненияДлительнойОперации); 
	Результат.Вставить("ИдентификаторЗадания", РезультатВыполненияДлительнойОперации.ИдентификаторЗадания); 
	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПостроитьМаршрутПоПереданнымТочкамСОжиданиемЗавершение(Параметры, ДополнительныеПараметры) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСкриптаМаршрутПоНарисованнымТочкам	= ПолучитьИзВременногоХранилища(Параметры.АдресРезультата);
	
	Если Лев(ТекстСкриптаМаршрутПоНарисованнымТочкам, 6) = "Ошибка" Тогда
		ВызватьИсключение ТекстСкриптаМаршрутПоНарисованнымТочкам;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСкриптаМаршрутПоНарисованнымТочкам) Тогда
		ОтобразитьПостроенныйПоКоординатамМаршрутОжидание();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПостроенныйПоКоординатамМаршрутОжидание()
	
	Если мСчетчикДокументСформирован < 1 
		 ИЛИ Элементы.ПолеHTML.Документ = Неопределено
		 ИЛИ НЕ Элементы.ПолеHTML.Документ.readyState = "complete" Тогда
		ПодключитьОбработчикОжидания("ОтобразитьПостроенныйПоКоординатамМаршрутОжидание", 0.5, Истина);
	
		Возврат;
	КонецЕсли;
	
	ВыполнитьСкрипт(ТекстСкриптаМаршрутПоНарисованнымТочкам);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЗакешироватьИконкиПунктовНазначения(ОтображаемыеПункты)
	
	КешОбновлен = Ложь;
	
	Если ОтображаемыеПункты.Количество() = 0  Тогда
		Возврат КешОбновлен;	
	КонецЕсли;
	ИконкиОтображаемыхПунктов = ОтображаемыеПункты.Скопировать(, "ИконкаНаКарте"); 
	ИконкиОтображаемыхПунктов.Свернуть("ИконкаНаКарте"); 

	Для каждого ПунктНазначения Из ИконкиОтображаемыхПунктов Цикл
		РезультатКеширования = ЗакешироватьИконкуНаФорме(ПунктНазначения.ИконкаНаКарте, Ложь);
		КешОбновлен = КешОбновлен ИЛИ РезультатКеширования.КешОбновлен;
	КонецЦикла;
	
	
	Возврат КешОбновлен;
	
КонецФункции

#КонецОбласти
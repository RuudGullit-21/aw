#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// Отправка обращений разрешена только для пользователей с полными правами
	ЕстьПравоНаОтправкуОбращений = Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь);
	
	НаименованиеКонфигурации = Метаданные.КраткаяИнформация;
	ТипСообщения             = Параметры.ТипСообщения;
	ТекущийШаг               = 1;
	ВсегоШагов               = КоличествоШаговПомощника();
	АдресХранилища           = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЕстьПравоНаОбновление    = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	Элементы.ЕстьПравоНаОбновление.Видимость = ЕстьПравоНаОбновление;
	Элементы.НетПравНаОбновление.Видимость   = НЕ ЕстьПравоНаОбновление;
	
	// Данные интернет поддержки
	УстановитьПривилегированныйРежим(Истина);
	ДанныеИнтернетПоддержки = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	ПодключенаИнтернетПоддержка = (ДанныеИнтернетПоддержки <> Неопределено);
	Элементы.ДекорацияПодключитьИнтернетПоддержку.Видимость = НЕ ПодключенаИнтернетПоддержка;
	Если ПодключенаИнтернетПоддержка Тогда
		ЛогинПользователя = ДанныеИнтернетПоддержки.Логин;
		РегистрационныйНомер = ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта();
	КонецЕсли;
	
	Если ЕстьПравоНаОтправкуОбращений Тогда
		ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
		ЦентрМониторингаРазрешитьОтправлятьДанные = ПолучитьПереключательОтправкиДанных(ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга, ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме);
		
		ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
		Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
			ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
			ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
			ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
		ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
			ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
			ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
			ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
		ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
			ПараметрыСервиса = Неопределено;
		КонецЕсли;
		
		Если ПараметрыСервиса <> Неопределено Тогда
			Если ПараметрыСервиса.Порт = 80 Тогда
				Схема = "http://";
				Порт = "";
			ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
				Схема = "https://";
				Порт = "";
			Иначе
				Схема = "http://";
				Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
			КонецЕсли;
			
			ЦентрМониторингаАдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
		Иначе
			ЦентрМониторингаАдресСервиса = "";
		КонецЕсли;
		
		Элементы.ЦентрМониторингаАдресСервиса.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные = 1);
		Элементы.ЦентрМониторингаНастройки.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные <> 2);
	КонецЕсли;
	
	
	// Подготовим помощник
	ПодготовитьСтруктуруПроверяемыхРеквизитов();
	ПодготовитьСписокСтраницПомощника();
	ПодготовитьТекстыПомощника();
	УстановитьУчетнуюЗапись();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если ЕстьПравоНаОбновление Тогда
		УстановитьИнформациюОНеобходимостиОбновления();
		
		// Если обновление не требуется, то исключим страницу с проверкой обновления
		// и уменьшим количество шагов.
		Если ОбновлениеНеТребуется
			И СписокСтраницПомошника[0].Значение = "СтраницаПроверкаВерсииКонфигурации" Тогда
			СписокСтраницПомошника.Удалить(0);
			ВсегоШагов = ВсегоШагов - 1;
		КонецЕсли;
		
		// Если регистрационные данные заполнены и разрешена отправка статистики, то исключим страницу
		// и уменьшим количество шагов.
		Если РегистрационныеДанныеЗаполнены() 
			И ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
			СтраницаРегистрационнаяИнформация = СписокСтраницПомошника.НайтиПоЗначению("СтраницаРегистрационнаяИнформация");
			СписокСтраницПомошника.Удалить(СтраницаРегистрационнаяИнформация);
			ВсегоШагов = ВсегоШагов - 1;
		Иначе
			Элементы.ИзменитьРегистрационныеДанные.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтветНеНайден.Видимость = Ложь;
		Элементы.ГруппаОтправкаОбращенийЗапрещена.Видимость = Истина;
		Элементы.ИзменитьРегистрационныеДанные.Видимость = Ложь;
	КонецЕсли;
	
	ПерваяСтраница = СписокСтраницПомошника[0].Значение;
	Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ПерваяСтраница];
	
	УстановитьКнопкиКоманднойПанели();
	УстановитьЗаголовокФормы();
	ВидПриложения = ВидПриложения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПроверяемыеРеквизиты);
	
	ИмяТекущейСтраницы = СписокСтраницПомошника.Получить(ТекущийШаг - 1).Значение;
	Если СтруктураПроверяемыхРеквизитов.Свойство(ИмяТекущейСтраницы) Тогда
		МассивПроверяемыхРеквизитовСтраницы = СтруктураПроверяемыхРеквизитов[ИмяТекущейСтраницы];
		НепроверяемыеРеквизиты = 
			ОбщегоНазначенияКлиентСервер.РазностьМассивов(НепроверяемыеРеквизиты, МассивПроверяемыхРеквизитовСтраницы);
	КонецЕсли;
	
	// Отдельные проверки
	Если ВРег(ИмяТекущейСтраницы) = ВРег("СтраницаОшибкаИнформация")
		И НЕ ЗначениеЗаполнено(МогуПредоставитьБазу) Тогда
		ТекстОшибки = НСтр("ru='Укажите, возможно ли предоставление базы, на которой воспроизводится ошибка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "МогуПредоставитьБазу", , Отказ);
	ИначеЕсли ВРег(ИмяТекущейСтраницы) = ВРег("СтраницаПолезныеСсылки") 
		И (НЕ ЗначениеЗаполнено(ОценкаИнформационныхРесурсов) 
		ИЛИ ОценкаИнформационныхРесурсов = "Другое" И НЕ ЗначениеЗаполнено(ПочемуИнформационныеРесурсыНеБылиПолезны)) Тогда 
		ТекстОшибки = НСтр("ru='Укажите, почему ссылки на приведенные ресурсы не были полезны'");
		Если НЕ ЗначениеЗаполнено(ОценкаИнформационныхРесурсов) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ОценкаИнформационныхРесурсов", , Отказ);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПочемуИнформационныеРесурсыНеБылиПолезны", , Отказ);
		КонецЕсли;
	ИначеЕсли ВРег(ИмяТекущейСтраницы) = ВРег("СтраницаРегистрационнаяИнформация") Тогда
		Если ЗначениеЗаполнено(АдресОтвета)
			И НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресОтвета) Тогда
			ТекстОшибки = НСтр("ru='Указан некорректный адрес электронной почты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "АдресОтвета", , Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(РегистрационныйНомер)
			И СтрДлина(РегистрационныйНомер) < 8 Тогда
			ТекстОшибки = НСтр("ru = 'Указан некорректный регистрационный номер.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "РегистрационныйНомер", , Отказ);
		КонецЕсли;
		Если ЦентрМониторингаРазрешитьОтправлятьДанные <> 0 Тогда
			ТекстОшибки = НСтр("ru='Необходимо разрешить отправку статистики.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ЦентрМониторингаРазрешитьОтправлятьДанные", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОценкаИнформационныхРесурсовДругоеПриИзменении(Элемент)
	
	Элементы.ПочемуИнформационныеРесурсыНеБылиПолезны.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаИнформационныхРесурсовОтветаНеНашлосьПриИзменении(Элемент)
	
	Элементы.ПочемуИнформационныеРесурсыНеБылиПолезны.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНаКоторуюПрограммаЗарегистрированаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПараметрыОрганизации = ПараметрыОрганизации(ВыбранноеЗначение);
		ОрганизацияНаКоторуюПрограммаЗарегистрирована = ПараметрыОрганизации.НаименованиеСокращенное;
		ИННОрганизации = ПараметрыОрганизации.ИНН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриложенныеФайлыКОшибкеНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьПриложенныеФайлы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриложенныеФайлыВопросНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьПриложенныеФайлы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриложенныеФайлыПожеланиеНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьПриложенныеФайлы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезОбновленияПриИзменении(Элемент)
	
	Если ПродолжитьБезОбновления Тогда
		ОбновитьКонфигурацию = "Позднее";
	Иначе
		ОбновитьКонфигурацию = "";
	КонецЕсли;
	
КонецПроцедуры

// Функция скопирована из Обработка.ПанельАдминистрированияБСП.ИнтернетПоддержкаИСервисы
&НаКлиенте
Процедура РазрешитьОтправлятьДанныеПриИзменении(Элемент)
	Перем РезультатЗапуска;
	Элементы.ЦентрМониторингаАдресСервиса.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные = 1);
	Элементы.ЦентрМониторингаНастройки.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные <> 2);
	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Ложь);
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Истина);
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Истина, Ложь);
	КонецЕсли;
	ЦентрМониторингаАдресСервиса = ПолучитьАдресСервиса();
	РазрешитьОтправлятьДанныеПриИзмененииНаСервере(ПараметрыЦентраМониторингаЗапись, РезультатЗапуска);
	Если РезультатЗапуска <> Неопределено Тогда
		ЦентрМониторингаИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
		ЦентрМониторингаАдресРезультатаЗадания = РезультатЗапуска.АдресРезультата;
		МодульЦентрМониторингаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЦентрМониторингаКлиент");
		Оповещение = Новый ОписаниеОповещения("ПослеОбновленияИдентификатора", МодульЦентрМониторингаКлиент);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, Оповещение, ПараметрыОжидания); 
	КонецЕсли;
КонецПроцедуры

// Функция скопирована из Обработка.ПанельАдминистрированияБСП.ИнтернетПоддержкаИСервисы
&НаКлиенте
Процедура ЦентрМониторингаАдресСервисаПриИзменении(Элемент)
	Попытка
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ЦентрМониторингаАдресСервиса);
		
		Если СтруктураАдреса.Схема = "http" Тогда
			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Ложь);
		ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Истина);
        Иначе
            СтруктураАдреса.Вставить("ЗащищенноеСоединение", Ложь);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Порт) Тогда
			Если СтруктураАдреса.Схема = "http" Тогда
				СтруктураАдреса.Порт = 80;
			ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
				СтруктураАдреса.Порт = 443;
            Иначе
                СтруктураАдреса.Порт = 80;
			КонецЕсли;
		КонецЕсли;
	Исключение
		// Внимание, формат адреса должен соответствовать RFC 3986 
		// см. описание функции ОбщегоНазначенияКлиентСервер.СтруктураURI.
		ОписаниеОшибки = НСтр("ru = 'Адрес сервиса'; en = 'Service address'") + " "
			+ ЦентрМониторингаАдресСервиса + " "
			+ НСтр("ru = 'не является допустимым адресом веб-сервиса для отправки отчетов об использовании программы.'; en = 'not allowable address of the web service for sending the application usage reports.'"); 
		ВызватьИсключение(ОписаниеОшибки);
	КонецПопытки;
	
	ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(СтруктураАдреса);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	// Удаляет вложение из списка, а так же вызывает функцию
	// обновления таблицы представления вложений.
	
	НаименованиеВложения = Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя];
	
	Для Каждого Вложение Из Объект.Вложения Цикл
		Если Вложение.Представление = НаименованиеВложения Тогда
			Объект.Вложения.Удалить(Вложение);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ДополнительныеПараметры = Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища));
	
	ДобавитьФайлыВСписок(Файлы);
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если ЭтоСтраницаОтправки() Тогда
		ОтправитьПочтовоеСообщение();
	Иначе
		ПерейтиКСледующейСтранице();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущийШаг                                           = ТекущийШаг - 1;
	ИмяПредыдущейСтраницы                                = СписокСтраницПомошника.Получить(ТекущийШаг - 1).Значение;
	Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ИмяПредыдущейСтраницы];
	
	УстановитьКнопкиКоманднойПанели();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОрганизацию(Команда)
	
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", , Элементы.ОрганизацияНаКоторуюПрограммаЗарегистрирована);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложитьФайлы(Команда)
	
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиНаИТС(Команда)
	
	ПоискОтветаНаВопрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегистрационныеДанные(Команда)
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("РегистрационныйНомер", РегистрационныйНомер);
	РегистрационныеДанные.Вставить("ИмяПользователя",      ИмяПользователя);
	РегистрационныеДанные.Вставить("Должность",            Должность);
	РегистрационныеДанные.Вставить("АдресОтвета",          АдресОтвета);
	РегистрационныеДанные.Вставить("ОрганизацияНаКоторуюПрограммаЗарегистрирована", 
		ОрганизацияНаКоторуюПрограммаЗарегистрирована);
	РегистрационныеДанные.Вставить("ИННОрганизации", ИННОрганизации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРегистрационныеДанныеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатОбращениеВТехническуюПоддержку.Форма.РегистрационныеДанные",
		РегистрационныеДанные, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ТипСообщения = Параметры.ТипСообщения;
	Если Не ЕстьПравоНаОтправкуОбращений Тогда
		Заголовок = НСтр("ru='Отправка обращений запрещена'");
	ИначеЕсли ЭтоОшибка(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Сообщить об ошибке: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Задать вопрос: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Написать пожелание: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	ИначеЕсли ЭтоЗаявкаНаПодключениеМаршрутизацииРарусVRP(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Отправить заявку на подключение маршрутизации Rarus VRP: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтруктуруПроверяемыхРеквизитов()

	// На каждой странице свой набор реквизитов, которые необходимо проверять.
	// Опишем страницы и реквизиты, которые следует проверить.
	// Страницы, на которых нет проверяемых реквизитов не указываем.
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	Если ЭтоОшибка(ТипСообщения) Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("СтраницаОшибкаИнформация", Новый Массив);
		СтруктураПроверяемыхРеквизитов.СтраницаОшибкаИнформация.Добавить("ПорядокВоспроизведения");
		СтруктураПроверяемыхРеквизитов.СтраницаОшибкаИнформация.Добавить("ОжидаемоеПоведение");
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("СтраницаВопросИнформация", Новый Массив);
		СтруктураПроверяемыхРеквизитов.СтраницаВопросИнформация.Добавить("РешаемаяЗадача");
		СтруктураПроверяемыхРеквизитов.СтраницаВопросИнформация.Добавить("ЧтоВызываетВопрос");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("СтраницаПожеланиеИнформация", Новый Массив);
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("РешаемаяЗадача");
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("ЧтоВызываетСложности");
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("ОжидаемоеПоведение");
	КонецЕсли;
	
	СтруктураПроверяемыхРеквизитов.Вставить("СтраницаРегистрационнаяИнформация", Новый Массив);
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("РегистрационныйНомер");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("ОрганизацияНаКоторуюПрограммаЗарегистрирована");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("ИННОрганизации");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("ИмяПользователя");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("Должность");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("АдресОтвета");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокСтраницПомощника()
	
	// В списке значений указываются страницы в порядке, в котором их следует показывать.
	// Навигацию по помощнику используется этот список значений.
	
	Если ЕстьПравоНаОтправкуОбращений Тогда
		Если ЭтоОшибка(ТипСообщения)
			Или ЭтоВопрос(ТипСообщения)
			Или ЭтоПожелание(ТипСообщения) Тогда
			СписокСтраницПомошника.Добавить("СтраницаПроверкаВерсииКонфигурации");
			СписокСтраницПомошника.Добавить("СтраницаПолезныеСсылки");
		КонецЕсли;
		Если ЭтоОшибка(ТипСообщения) Тогда
			СписокСтраницПомошника.Добавить("СтраницаОшибкаИнформация");
		ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
			СписокСтраницПомошника.Добавить("СтраницаВопросИнформация");
		ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
			СписокСтраницПомошника.Добавить("СтраницаПожеланиеИнформация");
		КонецЕсли;
		СписокСтраницПомошника.Добавить("СтраницаРегистрационнаяИнформация");
		СписокСтраницПомошника.Добавить("СтраницаОтправкаСообщения");
	Иначе
		СписокСтраницПомошника.Добавить("СтраницаПолезныеСсылки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РегистрационныеДанныеЗаполнены()
	
	РегистрационныеДанные = Новый Массив;
	РегистрационныеДанные.Добавить("РегистрационныйНомер");
	РегистрационныеДанные.Добавить("ОрганизацияНаКоторуюПрограммаЗарегистрирована");
	РегистрационныеДанные.Добавить("ИННОрганизации");
	РегистрационныеДанные.Добавить("ИмяПользователя");
	РегистрационныеДанные.Добавить("Должность");
	РегистрационныеДанные.Добавить("АдресОтвета");
	
	РегистрационныеДанныеЗаполнены = Истина;
	Для Каждого ПолеРегистрационныхДанных Из РегистрационныеДанные Цикл
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ПолеРегистрационныхДанных]) Тогда
			РегистрационныеДанныеЗаполнены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если РегистрационныеДанныеЗаполнены И СтрДлина(РегистрационныйНомер) < 8 Тогда
		РегистрационныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Возврат РегистрационныеДанныеЗаполнены;
	
КонецФункции

&НаКлиенте
Функция МожноПерейтиДалее()
	
	Результат = Истина;
	Если НЕ ПодключенаИнтернетПоддержка Тогда
		ТекстВопроса = НСтр("ru='Для отправки сообщений
			|необходимо подключиться к интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Результат = Ложь;
	ИначеЕсли НЕ ОбновлениеНеТребуется И НЕ ЕстьПравоНаОбновление И НЕ ПродолжитьБезОбновления Тогда
		ТекстПредупреждения = НСтр("ru='Для обновления конфигурации обратитесь к администратору'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Результат = Ложь;
	ИначеЕсли ОбновитьКонфигурацию = "Сейчас" Тогда
		ПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
		Результат = Ложь;
	ИначеЕсли НЕ ПроверитьЗаполнение() Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКСледующейСтранице()

	Если Не МожноПерейтиДалее() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийШаг           = ТекущийШаг + 1;
	ИмяСледующейСтраницы = СписокСтраницПомошника.Получить(ТекущийШаг - 1).Значение;
	Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ИмяСледующейСтраницы];
	
	УстановитьКнопкиКоманднойПанели();
	УстановитьЗаголовокФормы();
	
	Если ЭтоСтраницаОтправки() Тогда
		// Для страницы отправки сформируем текст сообщения
		// и подготовим автовложения.
		СформироватьТекстСообщения();
		ОбновитьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоСтраницаОтправки()

	Возврат (Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы.СтраницаОтправкаСообщения);

КонецФункции

&НаКлиенте
Процедура УстановитьКнопкиКоманднойПанели()
	
	ПерваяСтраница = СписокСтраницПомошника[0].Значение;
	Если Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ПерваяСтраница] Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'; en = 'Next >>'");
		Элементы.Назад.Доступность = Ложь; // На первой странице кнопка "Назад" не доступна
	ИначеЕсли ЭтоСтраницаОтправки() Тогда
		Элементы.Далее.Заголовок = НСтр("ru='Отправить сообщение'");
		Элементы.Назад.Доступность = Истина;
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'; en = 'Next >>'");
		Элементы.Назад.Доступность = Истина;
	КонецЕсли;
	
	Элементы.Далее.Доступность = ЕстьПравоНаОтправкуОбращений;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТекстыПомощника()
	
	Если ЭтоВопрос(ТипСообщения) Тогда
		РекомендацияКОбновлению = 
			НСтр("ru='Рекомендуем убедиться, что задаваемый вопрос не решен в актуальной версии конфигурации.'");
		Элементы.ОбновитьКонфигурациюСейчас.Подсказка = 
			НСтр("ru='В актуальной версии вопрос может быть уже решен.'");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		РекомендацияКОбновлению = 
			НСтр("ru='Рекомендуем убедиться, что пожелание востребовано на актуальной версии конфигурации.'");
		Элементы.ОбновитьКонфигурациюСейчас.Подсказка = 
			НСтр("ru='В актуальной версии пожелание может быть уже реализовано.'");
	ИначеЕсли ЭтоОшибка(ТипСообщения) Тогда
		РекомендацияКОбновлению = 
			НСтр("ru='Рекомендуем убедиться, что ошибка воспроизводится на актуальной версии конфигурации.'");
		Элементы.ОбновитьКонфигурациюСейчас.Подсказка = 
			НСтр("ru='В актуальной версии ошибка может быть уже исправлена.'");
	КонецЕсли;
	
	ТекстПоясненияИТС = НСтр("ru = ' - документация по программному продукту на портале 1С:ИТС.'");
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		СсылкаИТС = Новый ФорматированнаяСтрока("its.1c.ru",,,, "https://its.1c.ru/db/uatstd22");
	Иначе
		СсылкаИТС = Новый ФорматированнаяСтрока("its.1c.ru",,,, "https://its.1c.ru/db/uattle");
	КонецЕсли;
	Элементы.ДекорацияИТС.Заголовок = Новый ФорматированнаяСтрока(СсылкаИТС, ТекстПоясненияИТС);
	
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаСервере
Функция КоличествоШаговПомощника()
	
	// Количество шагов может быть уменьшено ПриОткрытии(),
	// если не требуется обновление конфигурации
	// и если заполнены регистрационные данные.
	Если ЭтоОшибка(ТипСообщения) Тогда
		ВсегоШагов = 5;
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		ВсегоШагов = 5;
	ИначеЕсли ЭтоЗаявкаНаПодключениеМаршрутизацииРарусVRP(ТипСообщения) Тогда
		ВсегоШагов = 2;
	Иначе
		ВсегоШагов = 5;
	КонецЕсли;
	
	Возврат ВсегоШагов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИнформациюОНеобходимостиОбновления()
	
	ТекущаяВерсияКонфигурации = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ВерсияКонфигурации;
	
	#Если ВебКлиент Тогда
	
	// В веб-клиенте нет возможности проверить наличие обновления
	ОбновлениеСейчас = Ложь;
	ОбновлениеНеТребуется = Истина;
	
	#Иначе
	
	ОбновлениеСейчас = Ложь;
	ОбновлениеНеТребуется = Ложь;
	
	ИнформацияОДоступномОбновлении = ПолучениеОбновленийПрограммыКлиент.ИнформацияОДоступномОбновлении();
	
	Если ИнформацияОДоступномОбновлении = Неопределено 
		ИЛИ ЗначениеЗаполнено(ИнформацияОДоступномОбновлении.ИнформацияОбОшибке) Тогда
		АктуальнаяВерсияКонфигурации = НСтр("ru = 'Нет данных'; en = 'No data'");
		ОбновлениеСейчас             = ЕстьПравоНаОбновление;
	ИначеЕсли ИнформацияОДоступномОбновлении.ДоступноОбновление 
		И ИнформацияОДоступномОбновлении.Конфигурация <> Неопределено Тогда
		АктуальнаяВерсияКонфигурации = ИнформацияОДоступномОбновлении.Конфигурация.Версия;
		Если Не ЗначениеЗаполнено(АктуальнаяВерсияКонфигурации)
			Или ТекущаяВерсияКонфигурации = АктуальнаяВерсияКонфигурации Тогда
			// Доступно только обновление платформы или установка патчей
			ОбновлениеНеТребуется    = Истина;
		Иначе
			ОбновлениеСейчас         = ЕстьПравоНаОбновление;
		КонецЕсли;
	Иначе
		ОбновлениеНеТребуется = Истина;
	КонецЕсли;
	
	#КонецЕсли
	
	Если ОбновлениеНеТребуется Тогда
		ОбновитьКонфигурацию = "НеТребуется";
	ИначеЕсли ОбновлениеСейчас Тогда
		ОбновитьКонфигурацию = "Сейчас";
	Иначе
		ОбновитьКонфигурацию = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ДобавитьФайлВоВложения()
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
		Вложение = Объект.Вложения.Добавить();
		Вложение.Представление             = СтруктураИмениФайла.Имя;
		Вложение.АдресВоВременномХранилище = ОписаниеФайла.Хранение;
	КонецЦикла;
	
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеВложений()
	
	ПредставлениеВложений.Очистить();
	
	Индекс = 0;
	
	Для Каждого Вложение Из Объект.Вложения Цикл
		Если Индекс = 0 Тогда
			СтрокаПредставления = ПредставлениеВложений.Добавить();
		КонецЕсли;
		
		СтрокаПредставления["Вложение" + Строка(Индекс + 1)] = Вложение.Представление;
		
		Индекс = Индекс + 1;
		Если Индекс = 2 Тогда 
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ВыбранноеВложение = ВыбранноеВложение();
	Если ВыбранноеВложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ДополнительныеПараметры = Новый Структура("ВыбранноеВложение", ВыбранноеВложение);
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ОткрытьВложениеСозданиеКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, ПолучитьИмяВременногоФайла());
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеСозданиеКаталогаЗавершение(ИмяВременнойПапки, ДополнительныеПараметры) Экспорт
	
	Если ИмяВременнойПапки = "" Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = ДополнительныеПараметры.ВыбранноеВложение;
	ИмяВременногоФайла = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ДополнительныеПараметры.Вставить("ИмяВременнойПапки", ИмяВременнойПапки);
	ДополнительныеПараметры.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ОткрытьВложениеУстановкаТолькоЧтениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Файл.НачатьУстановкуТолькоЧтения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеУстановкаТолькоЧтениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеЗапускПриложенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьЗапускПриложения(ОписаниеОповещения, ДополнительныеПараметры.ИмяВременногоФайла,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеЗапускПриложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Файл = Новый Файл(ДополнительныеПараметры.ИмяВременногоФайла);
	Файл.НачатьУстановкуТолькоЧтения(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранноеВложение()
	
	Результат = Неопределено;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НаименованиеВложения = ТекущиеДанные[Элементы.Вложения.ТекущийЭлемент.Имя];
		Для Каждого Вложение Из Объект.Вложения Цикл
			Если Вложение.Представление = НаименованиеВложения Тогда
				Результат = Вложение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресХранилищаВложений(Знач Вложения, АдресХранилища)

	Возврат ПоместитьВоВременноеХранилище(Вложения.Выгрузить(), АдресХранилища);

КонецФункции

&НаКлиенте
Процедура ОткрытьПриложенныеФайлы(СтандартнаяОбработка);

	СтандартнаяОбработка = Ложь;
	
	ПараметрыПриложенныхФайлов = Новый Структура;
	ПараметрыПриложенныхФайлов.Вставить("АдресХранилища", АдресХранилищаВложений(Объект.Вложения, АдресХранилища));
	ПараметрыПриложенныхФайлов.Вставить("УникальныйИдентификаторВладельца", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПриложенныеФайлыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатОбращениеВТехническуюПоддержку.Форма.ПриложенныеФайлы", 
		ПараметрыПриложенныхФайлов, ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложенныеФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		АдресХранилища = Результат.АдресХранилища;
		ЗагрузитьВложения();
		ОбновитьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВложения()
	
	ТаблицаВложений = ПолучитьИзВременногоХранилища(АдресХранилища);
	Объект.Вложения.Загрузить(ТаблицаВложений);
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПриложенныеФайлы()
	
	Если Объект.Вложения.Количество() > 0 Тогда
		ТекстПриложенныеФайлы = СтрШаблон("Приложенные файлы (%1)", Объект.Вложения.Количество());
		ЭтоГиперссылка        = Истина;
		ЦветТекста            = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		ТекстПриложенныеФайлы = НСтр("ru='Нет приложенных файлов'");
		ЭтоГиперссылка        = Ложь;
		ЦветТекста            = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли;
	
	Элементы.ТекстПриложенныеФайлыКОшибке.Гиперссылка   = ЭтоГиперссылка;
	Элементы.ТекстПриложенныеФайлыКОшибке.ЦветТекста    = ЦветТекста;
	Элементы.ТекстПриложенныеФайлыВопрос.Гиперссылка    = ЭтоГиперссылка;
	Элементы.ТекстПриложенныеФайлыВопрос.ЦветТекста     = ЦветТекста;
	Элементы.ТекстПриложенныеФайлыПожелание.Гиперссылка = ЭтоГиперссылка;
	Элементы.ТекстПриложенныеФайлыПожелание.ЦветТекста  = ЦветТекста;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПочтой

&НаКлиенте
Процедура СформироватьТекстСообщения()

	// Тема сообщения
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		СокращенноеНаименованиеКонфигурации = НСтр("ru = '1С:ТЛЭ КОРП'");
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		СокращенноеНаименованиеКонфигурации = НСтр("ru = '1С:УАТ ПРОФ'");
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		СокращенноеНаименованиеКонфигурации = НСтр("ru = '1С:УАТ Стандарт'");
	Иначе
		СокращенноеНаименованиеКонфигурации = НаименованиеКонфигурации;
	КонецЕсли;
	Если ЭтоОшибка(Параметры.ТипСообщения) Тогда
		ШаблонТемы = НСтр("ru='Ошибка %1 %2 от %3'");
	ИначеЕсли ЭтоВопрос(Параметры.ТипСообщения) Тогда
		ШаблонТемы = НСтр("ru='Вопрос по %1 %2 от %3'");
	ИначеЕсли ЭтоПожелание(Параметры.ТипСообщения) Тогда
		ШаблонТемы = НСтр("ru='Пожелание по %1 %2 от %3'");
	ИначеЕсли ЭтоЗаявкаНаПодключениеМаршрутизацииРарусVRP(Параметры.ТипСообщения) Тогда
		ШаблонТемы = НСтр("ru='Заявка на подключение маршрутизации Rarus VRP к %1 %2 от %3'");
	КонецЕсли;
	ДатаСообщения = Формат(НачалоДня(ТекущаяДата()), "ДФ=dd.MM.yy");
	ТемаСообщения = СтрШаблон(ШаблонТемы, СокращенноеНаименованиеКонфигурации, ТекущаяВерсияКонфигурации, ДатаСообщения);
	
	// Текст сообщения
	ТекстСообщения.Очистить();
	
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Конфигурация: %1, версия %2'"), 
		НаименованиеКонфигурации, ТекущаяВерсияКонфигурации));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Рег. номер: %1, программа зарегистрирована на %2'"), 
		РегистрационныйНомер, ОрганизацияНаКоторуюПрограммаЗарегистрирована));
	ТекстСообщения.ДобавитьСтроку("");
	
	Если ЭтоОшибка(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Порядок воспроизведения ошибки, описание неправильного поведения:'"));
		ТекстСообщения.ДобавитьСтроку(ПорядокВоспроизведения);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Ожидаемое (правильное) поведение программы:'"));
		ТекстСообщения.ДобавитьСтроку(ОжидаемоеПоведение);
		ТекстСообщения.ДобавитьСтроку("");
		Если МогуПредоставитьБазу Тогда
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='Могу предоставить базу, на которой воспроизводится ошибка.'"));
		Иначе
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='Базу для воспроизведения ошибки предоставить не могу.'"));
		КонецЕсли;
		ТекстСообщения.ДобавитьСтроку("");
		
	ИначеЕсли ЭтоВопрос(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Какая задача решается:'"));
		ТекстСообщения.ДобавитьСтроку(РешаемаяЗадача);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Что непонятно, вызывает вопрос:'"));
		ТекстСообщения.ДобавитьСтроку(ЧтоВызываетВопрос);
		ТекстСообщения.ДобавитьСтроку("");
		Если ОценкаИнформационныхРесурсов = "ОтветаНеНашлось" Тогда
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='По ссылкам на информационные ресурсы ответа на вопрос не нашлось.'"));
		Иначе
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='Ссылки на информационные ресурсы не были полезны:'"));
			ТекстСообщения.ДобавитьСтроку(ПочемуИнформационныеРесурсыНеБылиПолезны);
		КонецЕсли;
		ТекстСообщения.ДобавитьСтроку("");
		
	ИначеЕсли ЭтоПожелание(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Какая задача решается:'"));
		ТекстСообщения.ДобавитьСтроку(РешаемаяЗадача);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Что сейчас вызывает сложности, делается неудобно:'"));
		ТекстСообщения.ДобавитьСтроку(ЧтоВызываетСложности);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Какое поведение программы было бы удобным:'"));
		ТекстСообщения.ДобавитьСтроку(ОжидаемоеПоведение);
		ТекстСообщения.ДобавитьСтроку("");
		
	ИначеЕсли ЭтоЗаявкаНаПодключениеМаршрутизацииРарусVRP(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Прошу предоставить тестовый доступ к сервису маршрутизации ""Rarus VRP"" для ознакомления с возможностями алгоритма'"));
		ТекстСообщения.ДобавитьСтроку("")
		
	КонецЕсли;
	
	Если ЕстьПользовательскиеВложения() Тогда
		Если ЭтоОшибка(Параметры.ТипСообщения) Тогда
			ТекстВложения = НСтр("ru='Приложены файлы, которые могут помочь при расследования ошибки.'");
		ИначеЕсли ЭтоВопрос(Параметры.ТипСообщения) Тогда
			ТекстВложения = НСтр("ru='Приложены файлы, которые могут помочь лучше понять вопрос.'");
		ИначеЕсли ЭтоПожелание(Параметры.ТипСообщения) Тогда
			ТекстВложения = НСтр("ru='Приложены файлы, которые могут помочь лучше понять пожелание.'");
		Иначе
			ТекстВложения = НСтр("ru='Приложены файлы.'");
		КонецЕсли;
		ТекстСообщения.ДобавитьСтроку(ТекстВложения);
		ТекстСообщения.ДобавитьСтроку("");
	КонецЕсли;
	
	// Техническая информация
	ТехническаяИнформация = ПолучитьТехническуюИнформацию();
	ТекстСообщения.ДобавитьСтроку(НСтр("ru = 'Техническая информация о программе:'"));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru = 'Версия платформы: %1'"), ТехническаяИнформация.ВерсияПлатформы));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru = 'Вид приложения: %1'"), ВидПриложения));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru = 'Режим: %1'"), ТехническаяИнформация.Режим));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru = 'Количество пользователей: %1'"),
		ТехническаяИнформация.КоличествоПользователей));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru = 'Логин для подключения Интернет-поддержки: %1'"),
		ЛогинПользователя));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru = 'Идентификатор для обращения в службу технической поддержки: %1'"),
		ТехническаяИнформация.ИдентификаторИнформационнойБазы));
	ТекстСообщения.ДобавитьСтроку("");
	
	ТекстСообщения.ДобавитьСтроку(СтрШаблон("%1, %2", ИмяПользователя, Должность));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Ответ прошу прислать на адрес: %1'"), АдресОтвета));
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПользовательскиеВложения()
	
	ПользовательскиеВложения = Объект.Вложения.НайтиСтроки(Новый Структура("Идентификатор", ""));
	Возврат ПользовательскиеВложения.Количество() > 0;
	
КонецФункции

&НаСервере
Процедура ОтправитьПочтовоеСообщениеНаСервере()
	
	ПараметрыПисьма = СформироватьПараметрыПисьма();
	Если ПараметрыПисьма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
	РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПочтовоеСообщение()
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите учетную запись электронной почты.'"),,"УчетнаяЗапись");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТемаСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите тему сообщения.'"),,"ТемаСообщения");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТекстСообщения.ПолучитьТекст()) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите текст сообщения.'"),,"ТекстСообщения");
		Возврат;
	КонецЕсли;
	
	ОтправитьПочтовоеСообщениеНаСервере();
	
	ТекстПояснения = НСтр("ru='Обращение отправлено в техническую поддержку 1C.'");
	Если ЭтоВопрос(ТипСообщения) Тогда
		ТекстПояснения = НСтр("ru='Вопрос отправлен в техническую поддержку 1C.'");
	ИначеЕсли ЭтоОшибка(ТипСообщения) Тогда
		ТекстПояснения = НСтр("ru='Описание ошибки отправлено в техническую поддержку 1C.'");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		ТекстПояснения = НСтр("ru='Пожелание отправлено в техническую поддержку 1C.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение успешно отправлено'")
		,
		,
		СтрШаблон(НСтр("ru = 'Спасибо за обращение!
		|%1'"), ТекстПояснения)
		);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СкрытыеКопии()
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЭтоЗаявкаНаПодключениеМаршрутизацииРарусVRP(ТипСообщения) Тогда
		ПараметрыПисьма.Вставить("Кому",    Обработки.уатОбращениеВТехническуюПоддержку.АдресТехподдержкиМаршрутизацииRarusVRP());
	Иначе
		ПараметрыПисьма.Вставить("Кому",    Обработки.уатОбращениеВТехническуюПоддержку.АдресТехподдержки());
	КонецЕсли;
	ПараметрыПисьма.Вставить("СкрытыеКопии", СкрытыеКопии());
	ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	ПараметрыПисьма.Вставить("Тема",        ТемаСообщения);
	ПараметрыПисьма.Вставить("Тело",        ТекстСообщения.ПолучитьТекст());
	ПараметрыПисьма.Вставить("Вложения",    Вложения());
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция Вложения()
	
	Результат = Новый Массив;
	Для Каждого Вложение Из Объект.Вложения Цикл
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Представление",             Вложение.Представление);
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Вставить("Идентификатор",             Вложение.Идентификатор);
		Результат.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУчетнуюЗапись()
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
		Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
			УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Если НЕ ЗначениеЗаполнено(АдресОтвета) И УчетнаяЗапись.ИспользоватьДляПолучения Тогда
			АдресОтвета = УчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли;
		
		ИмяПользователя = УчетнаяЗапись.ИмяПользователя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрационныеДанные

&НаКлиенте
Процедура ИзменитьРегистрационныеДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		
		Если ЭтоСтраницаОтправки() Тогда
			СформироватьТекстСообщения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОрганизации(Организация)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "НаименованиеСокращенное, ИНН");
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

&НаКлиенте
Процедура ДекорацияПодключитьИнтернетПоддержкуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ПодключитьсяКИнтернетПоддержке") Тогда
		СтандартнаяОбработка = Ложь;
		ПодключитьИнтернетПоддержку(КодВозвратаДиалога.Да, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ПодключенаИнтернетПоддержка = Истина;
		ЛогинПользователя = Результат.Логин;
		Элементы.ДекорацияПодключитьИнтернетПоддержку.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВидПриложения()
	
	#Если ВебКлиент Тогда
	Возврат НСтр("ru = 'Веб-клиент'; en = 'Web client'");
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, обычное приложение'; en = 'Thick client, standard application'");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, управляемое приложение'; en = 'Thick client, managed application'");
	#ИначеЕсли ТонкийКлиент Тогда
	Возврат НСтр("ru = 'Тонкий клиент'; en = 'Thin client'");
	#Иначе
	Возврат "";
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ПоискОтветаНаВопрос()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияПоискаОтветаНаВопрос", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОжиданияПоискаОтветаНаВопрос()
	
	Если ПустаяСтрока(СтрокаПоискаНаИТС) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаПоискаИнформации = "http://its.1c.ru/db/alldb#search:";
	
	ПерейтиПоНавигационнойСсылке(СсылкаПоискаИнформации + СтрокаПоискаНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область Термины

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВопрос(ТипСообщения)

	Возврат ВРег(ТипСообщения) = ВРег("Вопрос");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПожелание(ТипСообщения)

	Возврат ВРег(ТипСообщения) = ВРег("Пожелание");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибка(ТипСообщения)

	Возврат ВРег(ТипСообщения) = ВРег("Ошибка");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЗаявкаНаПодключениеМаршрутизацииРарусVRP(ТипСообщения)
	Возврат ВРег(ТипСообщения) = ВРег("ЗаявкаНаПодключениеМаршрутизацииРарусVRP");
КонецФункции

#КонецОбласти

#Область ЦентрМониторинга
// Функции в этой области скопированы из Обработка.ПанельАдминистрированияБСП.ИнтернетПоддержкаИСервисы

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЦентраМониторинга()
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	ПараметрыЦентраМониторинга = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов();
	
	ПараметрыСервисаПоУмолчанию = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов();
	ПараметрыЦентраМониторинга.Вставить("СерверПоУмолчанию", ПараметрыСервисаПоУмолчанию.Сервер);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурсаПоУмолчанию", ПараметрыСервисаПоУмолчанию.АдресРесурса);
	ПараметрыЦентраМониторинга.Вставить("ПортПоУмолчанию", ПараметрыСервисаПоУмолчанию.Порт);
	
	Возврат ПараметрыЦентраМониторинга;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПереключательОтправкиДанных(ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме)
	Состояние = ?(ВключитьЦентрМониторинга, "1", "0") + ?(ЦентрОбработкиИнформацииОПрограмме, "1", "0");
	
	Если Состояние = "00" Тогда
		Результат = 2;
	ИначеЕсли Состояние = "01" Тогда
		Результат = 1;
	ИначеЕсли Состояние = "10" Тогда
		Результат = 0;
	ИначеЕсли Состояние = "11" Тогда
		// А такого быть не может...
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьАдресСервиса()
	
	ПараметрыЦентраМониторинга = ПолучитьПараметрыЦентраМониторинга();
			
	ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
	
	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
		ПараметрыСервиса = Неопределено;	
	КонецЕсли;
	
	Если ПараметрыСервиса <> Неопределено Тогда
		Если ПараметрыСервиса.Порт = 80 Тогда
			Схема = "http://";
			Порт = "";
		ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
			Схема = "https://";
			Порт = "";
		Иначе
			Схема = "http://";
			Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
		КонецЕсли;
		
		АдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
	Иначе
		АдресСервиса = "";
	КонецЕсли;
	
	Возврат АдресСервиса;
КонецФункции

&НаСервереБезКонтекста
Процедура РазрешитьОтправлятьДанныеПриИзмененииНаСервере(ПараметрыЦентраМониторинга, РезультатЗапуска)
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	ВключитьЦентрМониторинга = ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга;
	ЦентрОбработкиИнформацииОПрограмме = ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме;
	
	Результат = ПолучитьПереключательОтправкиДанных(ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме);
	
	Если Результат = 0 Или Результат = 1 Тогда
		// Отправка ознакомительного пакета.
		РезультатЗапуска = МодульЦентрМониторингаСлужебный.ЗапускОтправкиОзнакомительногоПакета();
	КонецЕсли;
	
	Если Результат = 0 Тогда
		// Включение задания сбора и отправки статистики.
		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	ИначеЕсли Результат = 1 Тогда
		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	ИначеЕсли Результат = 2 Тогда
		МодульЦентрМониторингаСлужебный.УдалитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(СтруктураАдреса)
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("Сервер", СтруктураАдреса.Хост);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурса", СтруктураАдреса.ПутьНаСервере);
	ПараметрыЦентраМониторинга.Вставить("Порт", СтруктураАдреса.Порт);
	ПараметрыЦентраМониторинга.Вставить("ЗащищенноеСоединение", СтруктураАдреса.ЗащищенноеСоединение);
	
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТехническуюИнформацию()
	
	ТехническаяИнформация = Новый Структура;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТехническаяИнформация.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ТехническаяИнформация.Вставить("Режим", ?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый'; en = 'File'"), НСтр("ru = 'Серверный'; en = 'Server'")));
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Пользователи.Ссылка) КАК КоличествоПользователей
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ПометкаУдаления = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПользователей = Выборка.КоличествоПользователей;
	Иначе
		КоличествоПользователей = 0;
	КонецЕсли;
	ТехническаяИнформация.Вставить("КоличествоПользователей", КоличествоПользователей);
	
	Попытка
		ИдентификаторИнформационнойБазы = ЦентрМониторинга.ИдентификаторИнформационнойБазы();
	Исключение
		ИдентификаторИнформационнойБазы = НСтр("ru = 'Ошибка при получении идентификатора'");
	КонецПопытки;
	ТехническаяИнформация.Вставить("ИдентификаторИнформационнойБазы", ИдентификаторИнформационнойБазы);
	
	Возврат ТехническаяИнформация;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОписаниеПеременных

&НаКлиенте
Перем мОтмеченныеМЛ;
&НаКлиенте
Перем мОтмеченныеЗаказы;
&НаКлиенте
Перем мОтмеченныеТС;
&НаКлиенте
Перем мОтмеченныеМоделиТС;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций

	ВариантПоставкиСТД		 = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	РежимРаботы				 = 1;

	ИнициализироватьСоответствиеЗаголовковФайлов();
	
	ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Организация   = ПолучитьОрганизациюПользователя(ТекущийПользователь);
	Ответственный = ПолучитьОтветственногоПользователя(ТекущийПользователь);
	
	СтруктураОбъектовНастроек = Новый Структура();
	СтруктураОбъектовНастроек.Вставить("Организация",   Организация);
	
	АдресОтправленияЗаказ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойПунктОтправления);
	ДатаЗаказа            = ТекущаяДата();
	ДатаЗаказаСтрока = Формат(ДатаЗаказа, "ДФ=dd.MM.yyyy");

	
	НомерПервойСтрокиДанныхКлиенты    = 2;
	НомерПервойСтрокиДанныхВодители   = 2;
	НомерПервойСтрокиДанныхМоделиТС   = 2;
	НомерПервойСтрокиДанныхТС         = 2;
	НомерПервойСтрокиДанныхЗаказыНаТС = 2;
	
	Если НЕ ВариантПоставкиСТД Тогда
		СпособВеденияВзаиморасчетовПоДоговору = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	КонецЕсли;
	ВалютаДоговора = Константы.ВалютаУправленческогоУчета.Получить();
	НаименованиеДоговора = НСтр("en='Main contract';ru='Основной договор'");
	
	ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное;
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	СтруктураОбъектовНастроек.Вставить("Пользователь", Пользователь);
	
	ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
	Если НЕ ЗначениеЗаполнено(ВидПеревозки) Тогда
		ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
	КонецЕсли;
	
	Если НЕ ВариантПоставкиСТД Тогда
		ВидДоставки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидДоставки);
		Если НЕ ЗначениеЗаполнено(ВидДоставки) Тогда
			ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь;
		КонецЕсли;
		
		
		ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
	КонецЕсли;
	
	ЕдиницаИзмеренияГрузов = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				"ОсновнаяЕдиницаПоКлассификатору");
	
	ДанныеТС.ТекстЗапроса = СтрЗаменить(ДанныеТС.ТекстЗапроса, "__СОСТОЯНИЕ_НЕДЕЙСТВУЕТ_", НСтр("ru='не действует'"));
	

	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мОтмеченныеМЛ        = Новый Массив();
	мОтмеченныеЗаказы    = Новый Массив();
	мОтмеченныеТС        = Новый Массив();
	мОтмеченныеМоделиТС  = Новый Массив();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоздаватьДоговорКонтрагентаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьПунктНазначенияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВодительскоеУдостоверениеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаказаПриИзменении(Элемент)
	ДатаЗаказаСтрока = Формат(ДатаЗаказа, "ДФ=dd.MM.yyyy");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьМедицинскуюСправкуПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуКлиентыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОткрытия = Новый Структура("ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога", "ПутьКФайлуКлиенты", НСтр("en='Select the file ""Clients""';ru='Выберите файл ""Клиенты""'"));
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуКлиентыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуКлиенты) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуКлиенты");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлуКлиенты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуВодителиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога", "ПутьКФайлуВодители", НСтр("en='Select the file ""Drivers""';ru='Выберите файл ""Водители""'"));
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуВодителиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуВодители) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуВодители");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлуВодители);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМоделиТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога", "ПутьКФайлуМоделиТС", НСтр("en='Select the file ""Vehicle models""';ru='Выберите файл ""Модели ТС""'"));
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМоделиТСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМоделиТС) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуМоделиТС");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлуМоделиТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  
	
	ПараметрыОткрытия = Новый Структура("ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога", "ПутьКФайлуТС", НСтр("en='Select the ""Vehicles"" file';ru='Выберите файл ""Транспортные средства""'"));
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуТСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуТС) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуТС");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлуТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗаказыНаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога", "ПутьКФайлуЗаказыНаТС", НСтр("en='Select the file ""Orders for the vehicle""';ru='Выберите файл ""Заказы на ТС""'"));
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗаказыНаТСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуЗаказыНаТС) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуЗаказыНаТС");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлуЗаказыНаТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога", "ПутьКФайлуМЛ", НСтр("en='Select the file ""Routing lists""';ru='Выберите файл ""Маршрутные листы""'"));
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМЛОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМЛ) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуМЛ");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлуМЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПогрузкиАдресПриИзменении(Элемент)
	ПунктПогрузкиАдресПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлениеСтоянкаПриИзменении(Элемент)
	ПунктПогрузкиАдресПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, "ДанныеТС", мОтмеченныеТС);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, "ДанныеЗаказы", мОтмеченныеЗаказы);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, "ДанныеМЛ", мОтмеченныеМЛ);
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыбывшиеПриИзменении(Элемент)
	УстановитьОтборВыбывшие();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеТСПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеЗаказыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеМЛПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтобразитьВсеСтроки(Команда)
	
	мОтмеченныеСтроки = ПолучитьМассивСОтмеченнымиДанными();
	Если Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаТСВыгрузка Тогда
		ИмяТекСписка = "ДанныеТС";
	ИначеЕсли Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаЗаказыВыгрузка Тогда
		ИмяТекСписка = "ДанныеЗаказы";
	ИначеЕсли Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаМЛВыгрузка Тогда
		ИмяТекСписка = "ДанныеМЛ";
	КонецЕсли;
	ОтобразитьВсеСтрокиЗавершение(ИмяТекСписка, мОтмеченныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтроках(Команда)
	
	мОтмеченныеСтроки = ПолучитьМассивСОтмеченнымиДанными();
	Если Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаТСВыгрузка Тогда
		ИмяТекСписка = "ДанныеТС";
	ИначеЕсли Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаЗаказыВыгрузка Тогда
		ИмяТекСписка = "ДанныеЗаказы";
	ИначеЕсли Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаМЛВыгрузка Тогда
		ИмяТекСписка = "ДанныеМЛ";
	КонецЕсли;
	СнятьОтметкиВоВсехСтрокахЗавершение(ИмяТекСписка, мОтмеченныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьКлиенты(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуКлиенты) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуКлиенты");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхКлиенты");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлуКлиенты);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанныхКлиенты);
	
	Если ТаблицаДанныхКлиенты.Количество() Тогда 
		ТекстВопроса = НСтр("en='The ""Clients"" table will be cleared. Continue?';ru='Таблица ""Клиенты"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьВодители(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуВодители) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуВодители");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхВодители");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлуВодители);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанныхВодители);
	
	Если ТаблицаДанныхВодители.Количество() Тогда 
		ТекстВопроса = НСтр("en='The table ""Drivers"" will be cleared. Continue?';ru='Таблица ""Водители"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьМоделиТС(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМоделиТС) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуМоделиТС");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхМоделиТС");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлуМоделиТС);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанныхМоделиТС);
	
	Если ТаблицаДанныхМоделиТС.Количество() Тогда 
		ТекстВопроса = НСтр("en='The table ""Models of vehicles"" will be cleared. Continue?';ru='Таблица ""Модели ТС"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьТС(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуТС) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуТС");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхТС");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлуТС);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанныхТС);
	
	Если ТаблицаДанныхТС.Количество() Тогда 
		ТекстВопроса = НСтр("en='The ""Vehicles"" table will be cleared. Continue?';ru='Таблица ""Транспортные средства"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗаказыНаТС(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуЗаказыНаТС) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуЗаказыНаТС");
		Возврат;
	КонецЕсли;
	
	ЕстьДата = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхЗаказыНаТС");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлуЗаказыНаТС);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанныхЗаказыНаТС);
	
	Если ТаблицаДанныхЗаказыНаТС.Количество() Тогда 
		ТекстВопроса = НСтр("en='The table ""Orders for the vehicle"" will be cleared. Continue?';ru='Таблица ""Заказы на ТС"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанныхЗаказы", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьМЛ(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуМЛ) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлуМЛ");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхМЛ");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлуМЛ);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанныхМЛ);
	
	Если ТаблицаДанныхМЛ.Количество() Тогда 
		ТекстВопроса = НСтр("en='The table ""Routing lists"" will be cleared. Continue?';ru='Таблица ""Маршрутные листы"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанныхМЛ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлиенты(Команда)
	
	Если Не ПроверитьЗаполнениеОбязательныхПолей("ТаблицаДанныхКлиенты") Тогда 
		Возврат;
	КонецЕсли;
	
	СчВсего   = 0;
	СчСоздано = 0;
	
	ТекстОшибки = "";
	Если СоздаватьПунктНазначения Тогда
		ГеокодироватьПунктыНазначения = ПроверитьВозможностьГеокодированияАдреса(ТекстОшибки);
	Иначе
		ГеокодироватьПунктыНазначения = Ложь;
	КонецЕсли;
	
	ОбработатьТаблицуДанныхКлиенты(СчВсего, СчСоздано, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		СообщениеПользователю(ТекстОшибки);
	КонецЕсли;
	
	ШаблонСообщения = НСтр(
		"en = 'Created customers: %1
         |Skipped rows: %2'; ru = 'Создано клиентов: %1
         |Пропущено строк: %2'"
	);
	
	ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, СчСоздано, (СчВсего - СчСоздано)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВодители(Команда)
	
	Если Не ПроверитьЗаполнениеОбязательныхПолей("ТаблицаДанныхВодители") Тогда 
		Возврат;
	КонецЕсли;
	
	СчВсего   = 0;
	СчСоздано = 0;
	
	ОбработатьТаблицуДанныхВодители(СчВсего, СчСоздано);
	
	ШаблонСообщения = НСтр(
		"en = 'Created drivers: %1
         |Skipped rows: %2'; ru = 'Создано водителей: %1
         |Пропущено строк: %2'"
	);
	
	ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, СчСоздано, (СчВсего - СчСоздано)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМоделиТС(Команда)
	
	Если Не ПроверитьЗаполнениеОбязательныхПолей("ТаблицаДанныхМоделиТС") Тогда 
		Возврат;
	КонецЕсли;
	
	СчВсего   = 0;
	СчСоздано = 0;
	
	ОбработатьТаблицуДанныхМоделиТС(СчВсего, СчСоздано);
	
	ШаблонСообщения = НСтр(
		"en = 'Created models of trucks: %1
         |Skipped rows: %2'; ru = 'Создано моделей ТС: %1
         |Пропущено строк: %2'"
	);
	
	ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, СчСоздано, (СчВсего - СчСоздано)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТС(Команда)
	
	Если Не ПроверитьЗаполнениеОбязательныхПолей("ТаблицаДанныхТС") Тогда 
		Возврат;
	КонецЕсли;
	
	СчВсего   = 0;
	СчСоздано = 0;
	
	ОбработатьТаблицуДанныхТС(СчВсего, СчСоздано);
	
	ШаблонСообщения = НСтр(
		"en = 'Created trucks: %1
         |Skipped rows: %2'; ru = 'Создано ТС: %1
         |Пропущено строк: %2'"
	);
	
	ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, СчСоздано, (СчВсего - СчСоздано)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМЛ(Команда)
	
	Если Не ПроверитьЗаполнениеОбязательныхПолей("ТаблицаДанныхМЛ") Тогда 
		Возврат;
	КонецЕсли;
	
	СчВсего   = 0;
	СчСоздано = 0;
	
	ТекстОшибки = "";
	ГеокодироватьПунктыНазначения = ПроверитьВозможностьГеокодированияАдреса(ТекстОшибки);
	
	ОбработатьТаблицуДанныхМЛ(СчВсего, СчСоздано, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		СообщениеПользователю(ТекстОшибки);
	КонецЕсли;
	
	ШаблонСообщения = НСтр(
		"en = 'Created orders: %1
         |Skipped rows: %2'; ru = 'Создано маршрутных листов: %1
         |Пропущено строк: %2'"
	);
	
	ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, СчСоздано, (СчВсего - СчСоздано)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗаказыНаТС(Команда)
	
	Если Не ПроверитьЗаполнениеОбязательныхПолей("ТаблицаДанныхЗаказыНаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	СчВсего   = 0;
	СчСоздано = 0;
	
	ТекстОшибки = "";
	ГеокодироватьПунктыНазначения = ПроверитьВозможностьГеокодированияАдреса(ТекстОшибки);
	
	ОбработатьТаблицуДанныхЗаказыНаТС(СчВсего, СчСоздано, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		СообщениеПользователю(ТекстОшибки);
	КонецЕсли;
	
	ШаблонСообщения = НСтр(
		"en = 'Created orders: %1
         |Skipped rows: %2'; ru = 'Создано заказов на ТС: %1
         |Пропущено строк: %2'"
	);
	
	ПоказатьПредупреждение(, СтрШаблон(ШаблонСообщения, СчСоздано, (СчВсего - СчСоздано)));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонКлиенты(Команда)
	
	СохранитьШаблонФайла("ШаблонТаблицыКлиенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонВодители(Команда)
	
	СохранитьШаблонФайла("ШаблонТаблицыВодители");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонМоделиТС(Команда)
	
	СохранитьШаблонФайла("ШаблонТаблицыМоделиТС");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонТС(Команда)
	
	СохранитьШаблонФайла("ШаблонТаблицыТС");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонЗаказыНаТС(Команда)
	
	СохранитьШаблонФайла("ШаблонТаблицыЗаказыНаТС");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонМЛ(Команда)
	
	СохранитьШаблонФайла("ШаблонТаблицыМЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМЛ(Команда)
	ТекДанные = Элементы.ТаблицаДанныхМЛ.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.МЛ) Тогда
		ПоказатьЗначение(Неопределено, ТекДанные.МЛ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаказ(Команда)
	ТекДанные = Элементы.ТаблицаДанныхМЛ.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		ПоказатьЗначение(Неопределено, ТекДанные.Заказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбъект(Команда)
	
	ТекЗакладка = Элементы.СтраницыЗагрузок.ТекущаяСтраница;
	
	Если ТекЗакладка = Элементы.СтраницаКлиенты Тогда
		ТекДанные = Элементы.ТаблицаДанныхКлиенты.ТекущиеДанные;
	ИначеЕсли ТекЗакладка = Элементы.СтраницаВодители Тогда
		ТекДанные = Элементы.ТаблицаДанныхВодители.ТекущиеДанные;
	ИначеЕсли ТекЗакладка = Элементы.СтраницаМоделиТС Тогда
		ТекДанные = Элементы.ТаблицаДанныхМоделиТС.ТекущиеДанные;
	ИначеЕсли ТекЗакладка = Элементы.СтраницаТС Тогда
		ТекДанные = Элементы.ТаблицаДанныхТС.ТекущиеДанные;
	ИначеЕсли ТекЗакладка = Элементы.СтраницаЗаказыНаТС Тогда
		ТекДанные = Элементы.ТаблицаДанныхЗаказыНаТС.ТекущиеДанные;
	ИначеЕсли ТекЗакладка = Элементы.СтраницаМЛ Тогда
		ПоказатьМЛ(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, ТекДанные.Ссылка);
	Иначе
		СообщениеПользователю(НСтр("ru='Элемент в текущей строке не записан!'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункции

&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения, Поле="", Отказ=Ложь)
	
	СообщениеПользователю = Новый СообщениеПользователю();
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Поле  = Поле;
	СообщениеПользователю.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СпособВеденияВзаиморасчетовПоДоговору.Видимость                       = НЕ ВариантПоставкиСТД; 
	Элементы.ГруппаНастройкиСозданияЭлементовСправочникаПунктыНазначения.Видимость = НЕ ВариантПоставкиСТД;
	Элементы.СоздаватьВводНачальныхПоказаний.Видимость = НЕ ВариантПоставкиСТД;
	Элементы.СоздаватьВводВЭксплуатациюТС.Видимость    = НЕ ВариантПоставкиСТД;  
	Элементы.ДетализацияЗаказа.Видимость    = НЕ ВариантПоставкиСТД;
	Элементы.ВидДоставки.Видимость          = НЕ ВариантПоставкиСТД;
	Элементы.ВидПеревозки.Видимость         = НЕ ВариантПоставкиСТД;
	Элементы.ДетализацияЗаказаМЛ.Видимость  = НЕ ВариантПоставкиСТД;
	Элементы.ВидДоставкиМЛ.Видимость        = НЕ ВариантПоставкиСТД;
	Элементы.ВидПеревозкиМЛ.Видимость       = НЕ ВариантПоставкиСТД;
	
	Элементы.СпособВеденияВзаиморасчетовПоДоговору.Доступность = СоздаватьДоговорКонтрагента;
	Элементы.ВалютаДоговора.Доступность                        = СоздаватьДоговорКонтрагента;
	Элементы.НаименованиеДоговора.Доступность                  = СоздаватьДоговорКонтрагента;
	
	Элементы.СтранаПунктаНазначения.Доступность        = СоздаватьПунктНазначения;
	
	Элементы.ВидДокументаВодительскоеУдостоверение.Доступность = ЗаполнятьВодительскоеУдостоверение;
	Элементы.ВидДокументаМедСправка.Доступность                = ЗаполнятьМедицинскуюСправку;
	
	Элементы.СтраницаКлиенты.Видимость			 = РежимРаботы = 1;
	Элементы.СтраницаВодители.Видимость			 = РежимРаботы = 1;
	Элементы.СтраницаМоделиТС.Видимость			 = РежимРаботы = 1;
	Элементы.СтраницаТС.Видимость				 = РежимРаботы = 1;
	Элементы.СтраницаЗаказыНаТС.Видимость		 = РежимРаботы = 1;
	Элементы.СтраницаМЛ.Видимость				 = РежимРаботы = 1;
	Элементы.СтраницаТСВыгрузка.Видимость		 = РежимРаботы = 0;
	Элементы.СтраницаЗаказыВыгрузка.Видимость	 = РежимРаботы = 0;
	Элементы.СтраницаМЛВыгрузка.Видимость		 = РежимРаботы = 0;
	Элементы.Организация.Видимость				 = РежимРаботы = 1;
	Элементы.Ответственный.Видимость			 = РежимРаботы = 1;

	Если РежимРаботы = 0 Тогда
		Элементы.СтраницыЗагрузок.ТекущаяСтраница = Элементы.СтраницаТСВыгрузка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПользователя(Знач ТекущийПользователь)
	
	ОрганизацияПоНастройке = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ТекущийПользователь, 
		"ОсновнаяОрганизация"
	);
	
	Если Не ЗначениеЗаполнено(ОрганизацияПоНастройке) Тогда 
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда 
			Выборка.Следующий();
			ОрганизацияПоНастройке = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОрганизацияПоНастройке;
	
КонецФункции // ПолучитьОрганизациюПользователя()

&НаСервере
Функция ПолучитьОтветственногоПользователя(Знач ТекущийПользователь)
	
	ОтветственныйПоНастройке = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ТекущийПользователь,
		"ОсновнойОтветственный"
	);
	
	Если Не ЗначениеЗаполнено(ОтветственныйПоНастройке) Тогда 
		ОтветственныйПоНастройке = ТекущийПользователь;
	КонецЕсли;
	
	Возврат ОтветственныйПоНастройке;
	
КонецФункции // ПолучитьОтветственногоПользователя()

&НаСервере
Процедура ИнициализироватьСоответствиеЗаголовковФайлов()
	
	Если Метаданные.Языки.Найти("Русский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Русский Тогда 
		СуффиксЛокализации = "C3";
	ИначеЕсли Метаданные.Языки.Найти("Английский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Английский Тогда 
		СуффиксЛокализации = "C4";
	Иначе 
		СуффиксЛокализации = "C3";
	КонецЕсли;
	
	МакетСоответствий = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СоответствиеЗаголовковФайлов");
	
	Для СчСтрок = 1 По МакетСоответствий.ВысотаТаблицы Цикл 
		СчСтрокой = Формат(СчСтрок, "ЧН=0; ЧГ=0");
		
		СтрокаСоответствия = СоответствиеЗаголовковФайлов.Добавить();
		СтрокаСоответствия.ИмяТаблицы          = МакетСоответствий.Область("R"+СчСтрокой+"C1").Текст;
		СтрокаСоответствия.ИмяКолонки          = МакетСоответствий.Область("R"+СчСтрокой+"C2").Текст;
		СтрокаСоответствия.ЗаголовокВФайле     = НРег(МакетСоответствий.Область("R"+СчСтрокой+СуффиксЛокализации).Текст);
		СтрокаСоответствия.ПроверкаЗаполнения  = НРег(МакетСоответствий.Область("R"+СчСтрокой+"C5").Текст) = "да";
		СтрокаСоответствия.ЗначениеПоУмолчанию = МакетСоответствий.Область("R"+СчСтрокой+"C6").Текст;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПутьКФайлуЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры.ИмяРеквизитаПутьКФайлу);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла     = ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаПутьКФайлу];
	ДиалогВыбораФайла.Фильтр             = НСтр("en='Excel file';ru='Файлы Excel'") + "(*.xls; *.xlsx)|*.xls;*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок          = ДополнительныеПараметры.ЗаголовокДиалога;
	
	ДиалогВыбораФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайлаШаблона(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	ДиалогВыбораФайла.Фильтр = НСтр("en = 'Excel book'; ru = 'Книга Excel'") + " (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("КлючШаблона", ДополнительныеПараметры.КлючШаблона);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьШаблонФайлаПослеВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайлаПослеПодключения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	#Если МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ПутьКФайлу); 
		ПрочитатьДанныеИзФайлаЗавершение(ДвоичныеДанные, ДополнительныеПараметры);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПрочитатьДанныеИзФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьСозданиеДвоичныхДанныхИзФайла(Оповещение, ДополнительныеПараметры.ПутьКФайлу);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры] = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПослеОткрытия(КодВозврата, ДополнительныеПараметры) Экспорт 
	
	ДополнительнаяОбработкаНеТребуется = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуДанных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы].Очистить();
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуДанныхЗаказы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы].Очистить();
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуДанныхМЛ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы].Очистить();
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьСтруктуруШапки(Знач ИмяТаблицы)
	
	СтруктураШапки = Новый Структура();
	
	Для Каждого ТекСтрока Из СоответствиеЗаголовковФайлов Цикл 
		Если ТекСтрока.ИмяТаблицы = ИмяТаблицы Тогда 
			ДанныеКлюча = Новый Структура();
			ДанныеКлюча.Вставить("НомерКолонки",        0);
			ДанныеКлюча.Вставить("ЗаголовокВФайле",     ТекСтрока.ЗаголовокВФайле);
			ДанныеКлюча.Вставить("ЗначениеПоУмолчанию", ТекСтрока.ЗначениеПоУмолчанию);
			
			Если СтруктураШапки.Свойство(ТекСтрока.ИмяКолонки) Тогда
				СтруктураШапки.Вставить(ТекСтрока.ИмяКолонки + "_1", ДанныеКлюча);
			Иначе
				СтруктураШапки.Вставить(ТекСтрока.ИмяКолонки, ДанныеКлюча);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураШапки;
	
КонецФункции // ПолучитьСтруктуруШапки()

&НаСервере
Функция ПолучитьТабличныйДокумент(Адрес, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(Адрес); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Попытка
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеИзФайла(ДополнительныеПараметры)

	Обработчик = Новый ОписаниеОповещения("ПрочитатьДанныеИзФайлаПослеПодключения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайлаЗавершение(ДвоичныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ДвоичныеДанные <> Неопределено Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДополнительныеПараметры.ПутьКФайлу));
		
		Состояние(НСтр("en='Opening a file';ru='Открытие файла'") + " ...");
		
		Попытка
			ДокументДанных = ПолучитьТабличныйДокумент(Адрес, РасширениеФайла);
		Исключение
			ДокументДанных = Неопределено;
			СообщениеПользователю(НСтр("en='An error occurred while reading the document.';ru='Ошибка при чтении табличного документа.'"));
			Возврат;
		КонецПопытки;
		
		Попытка
			
			ВсегоСтрок = ДокументДанных.ВысотаТаблицы;
			ВсегоКолонок = ДокументДанных.ШиринаТаблицы;
			
		Исключение
			ДокументДанных = Неопределено;
			СообщениеПользователю(НСтр("en='Error while working with the document.';ru='Ошибка при работе с табличным документом.'"));
			Возврат;
		КонецПопытки;
		
		СтруктураШапки = ПолучитьСтруктуруШапки(ДополнительныеПараметры.ИмяТаблицы);
		
		НомерСтрокиШапки = Неопределено;
		
		Для НомерСтроки = 1 По ВсегоСтрок Цикл 
			Если НомерСтрокиШапки <> Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			Для НомерКолонки = 1 По ВсегоКолонок Цикл 
				ТекущееЗначение = НРег(СокрЛП(ДокументДанных.Область("R" + НомерСтроки + "C" + НомерКолонки).Текст));
				
				НомерУстановлен = Ложь;
				Для Каждого ТекКлюч Из СтруктураШапки Цикл 
					Если ТекКлюч.Значение.НомерКолонки <> 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					Если ТекущееЗначение = ТекКлюч.Значение.ЗаголовокВФайле Тогда 
						ТекКлюч.Значение.НомерКолонки = НомерКолонки;
						НомерСтрокиШапки = НомерСтроки;
						НомерУстановлен = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если Не НомерУстановлен Тогда 
					Для Каждого ТекКлюч Из СтруктураШапки Цикл 
						Если ТекКлюч.Значение.НомерКолонки <> 0 Тогда 
							Продолжить;
						КонецЕсли;
						
						Если Лев(ТекущееЗначение, СтрДлина(ТекКлюч.Значение.ЗаголовокВФайле)) = ТекКлюч.Значение.ЗаголовокВФайле Тогда 
							ТекКлюч.Значение.НомерКолонки = НомерКолонки;
							НомерСтрокиШапки = НомерСтроки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НомерСтрокиШапки = Неопределено Тогда 
			ДокументДанных = Неопределено;
			СообщениеПользователю(НСтр("en='Invalid file format';ru='Неверный формат файла'"));
			Возврат;
		КонецЕсли;
		
		флНомераКолонокЗаполнены = Ложь;
		Для Каждого ТекКлюч Из СтруктураШапки Цикл 
			Если ЗначениеЗаполнено(ТекКлюч.Значение.НомерКолонки) Тогда 
				флНомераКолонокЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не флНомераКолонокЗаполнены Тогда 
			ДокументДанных = Неопределено;
			СообщениеПользователю(НСтр("en='Invalid file format';ru='Неверный формат файла'"));
			Возврат;
		КонецЕсли;
		
		ПерваяСтрокаДанных = ДополнительныеПараметры.НомерПервойСтрокиДанных;
		Если (НомерСтрокиШапки + 1) > ПерваяСтрокаДанных Тогда 
			ПерваяСтрокаДанных = НомерСтрокиШапки + 1;
		КонецЕсли;
		
		Для НомерСтроки = ПерваяСтрокаДанных По ВсегоСтрок Цикл 
			ОбработкаПрерыванияПользователя();
			ПрогрессЗагрузки = Окр((НомерСтроки / ВсегоСтрок) * 100, 0);
			Состояние(НСтр("en='Reading a file';ru='Чтение файла'") + " ...", ПрогрессЗагрузки);
			
			НоваяСтрока = ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы].Добавить();
			Для Каждого ТекКлюч Из СтруктураШапки Цикл 
				
				Если ТекКлюч.Ключ <> "ДатаПрибытия" Тогда
					Попытка
						НоваяСтрокаКлюч = ТекКлюч.Ключ;
						мНоваяСтрока    = НоваяСтрока[НоваяСтрокаКлюч];
					Исключение
						НоваяСтрокаКлюч = СтрЗаменить(ТекКлюч.Ключ, "_1", "");
						мНоваяСтрока    = НоваяСтрока[НоваяСтрокаКлюч];
					КонецПопытки;
				КонецЕсли;
				
				Если ТекКлюч.Ключ = "ВремяПогрузки" Или ТекКлюч.Ключ = "ВремяРазгрузки" Тогда 
					ТекТипЯчейки = Тип("Строка");
				Иначе 
					Если ТекКлюч.Ключ = "ДатаПрибытия" Тогда
						ТекТипЯчейки = Тип("Дата");
					Иначе
						ТекТипЯчейки = ТипЗнч(мНоваяСтрока);
					КонецЕсли;
				КонецЕсли;
				
				Если ТекКлюч.Значение.НомерКолонки = 0 Тогда 
					Если ЗначениеЗаполнено(ТекКлюч.Значение.ЗначениеПоУмолчанию) Тогда 
						ТекЗначение = ПолучитьЗначениеЯчейки(
						ТекКлюч.Значение.ЗначениеПоУмолчанию,
						ТекТипЯчейки
						);
					Иначе 
						Продолжить;
					КонецЕсли;
					
				Иначе 
					
					Если ТекКлюч.Ключ = "Дата" Тогда
						ЕстьДата = Истина;
					КонецЕсли;
					
					Если ТекКлюч.Ключ = "ДатаПрибытия" Тогда
						ТекОбласть = "R" + НомерСтроки + "C" + ТекКлюч.Значение.НомерКолонки;
						ТекОбласть = СтрЗаменить(ТекОбласть, Символы.НПП, "");
						ТекОбласть = СтрЗаменить(ТекОбласть, " ","");
						ТекЗначение = ПолучитьЗначениеЯчейки(
						ДокументДанных.Область(ТекОбласть),
						Тип("Строка")
						);
						ТекЗначениеМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекЗначение, "-");
						Если ТекЗначениеМассив.Количество() = 2 Тогда
							мТекЗначениеМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекЗначениеМассив[0], " ");
							Если мТекЗначениеМассив.Количество() = 2 Тогда
								ТекЗначение = ПолучитьЗначениеЯчейки(
								мТекЗначениеМассив[0],
								ТекТипЯчейки
								);
								НоваяСтрока["ДатаПрибытияС"]   = ТекЗначение;
								ТекЗначение = ПолучитьЗначениеЯчейки(
								мТекЗначениеМассив[1],
								ТекТипЯчейки
								);
								НоваяСтрока["ВремяПрибытияС"]  = ТекЗначение;
							КонецЕсли;
							
							мТекЗначениеМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекЗначениеМассив[1], " ");
							Если мТекЗначениеМассив.Количество() = 2 Тогда
								ТекЗначение = ПолучитьЗначениеЯчейки(
								мТекЗначениеМассив[0],
								ТекТипЯчейки
								);
								НоваяСтрока["ДатаПрибытияПо"]   = ТекЗначение;
								ТекЗначение = ПолучитьЗначениеЯчейки(
								мТекЗначениеМассив[1],
								ТекТипЯчейки
								);
								
								НоваяСтрока["ВремяПрибытияПо"]  = ТекЗначение;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ТекОбласть = "R" + НомерСтроки + "C" + ТекКлюч.Значение.НомерКолонки;
						ТекОбласть = СтрЗаменить(ТекОбласть,Символы.НПП,"");
						ТекОбласть = СтрЗаменить(ТекОбласть," ","");
						ТекЗначение = ПолучитьЗначениеЯчейки(
						ДокументДанных.Область(ТекОбласть),
						ТекТипЯчейки
						);
					КонецЕсли;
				КонецЕсли;
				
				Если ТекКлюч.Ключ = "ВремяПогрузки" Или ТекКлюч.Ключ = "ВремяРазгрузки" Тогда 
					Попытка
						ТекЗначение = Число(СтрЗаменить(ТекЗначение, ":", "."));
					Исключение
						ТекЗначение = 0;
					КонецПопытки;
				КонецЕсли;
				
				Если ТекКлюч.Ключ <> "ДатаПрибытия" Тогда
					НоваяСтрока[НоваяСтрокаКлюч] = ТекЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			флПустаяСтрока = Истина;
			Для Каждого ТекКлюч Из СтруктураШапки Цикл
				Попытка
					НоваяСтрокаКлюч = НоваяСтрока[ТекКлюч.Ключ];
				Исключение
					Попытка
						НоваяСтрокаКлюч = НоваяСтрока[СтрЗаменить(ТекКлюч.Ключ, "_1", "")];
					Исключение
					КонецПопытки;
				КонецПопытки;
				
				Если ЗначениеЗаполнено(НоваяСтрокаКлюч) Тогда 
					флПустаяСтрока = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флПустаяСтрока Тогда 
				ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы].Удалить(НоваяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		ДокументДанных = Неопределено;
		
		ТекущаяСтраница = Элементы.СтраницыЗагрузок.ТекущаяСтраница;
		Если ТекущаяСтраница = Элементы.СтраницаЗаказыНаТС Тогда
			МассивУдалСтрок = Новый Массив();
			Для Каждого ТекСтрока Из ТаблицаДанныхЗаказыНаТС Цикл 
				Если (СтрНайти(ТекСтрока.АдресОтправления, "Примечание: ") <> 0
					ИЛИ СтрНайти(ТекСтрока.АдресПрибытия, "Примечание: ") <> 0) ИЛИ (НЕ ЗначениеЗаполнено(ТекСтрока.Дата) 
					И (ЕстьДата ИЛИ НЕ ЗначениеЗаполнено(ДатаЗаказа))) Тогда
					МассивУдалСтрок.Добавить(ТекСтрока);
					Продолжить;
				КонецЕсли;
				ДесериализоватьКоординаты(ТекСтрока.КоординатыОтправленияСтрокой, ТекСтрока.ЛатОтправления, ТекСтрока.ЛонОтправления);
				ДесериализоватьКоординаты(ТекСтрока.КоординатыПрибытияСтрокой, ТекСтрока.ЛатПрибытия, ТекСтрока.ЛонПрибытия);
			КонецЦикла;
			
			Для Каждого ТекСтрока Из МассивУдалСтрок Цикл
				ТаблицаДанныхЗаказыНаТС.Удалить(ТекСтрока);
			КонецЦикла;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаМЛ Тогда
			ПредНомер = "";
			МассивУдалСтрок = Новый Массив();
			Для Каждого ТекСтрока Из ТаблицаДанныхМЛ Цикл
				Если СтрНайти(ТекСтрока.Адрес, "Примечание: ") <> Неопределено
					И НЕ ЗначениеЗаполнено(ТекСтрока.Номер) Тогда
					МассивУдалСтрок.Добавить(ТекСтрока);
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.Номер = "" Тогда
					ТекСтрока.Номер = ПредНомер;
				КонецЕсли;
				ДесериализоватьКоординаты(ТекСтрока.КоординатыАдресаСтрокой, ТекСтрока.Лат, ТекСтрока.Лон);
				
				Если ЗначениеЗаполнено(ТекСтрока.Номер) Тогда
					ПредНомер = ТекСтрока.Номер;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из МассивУдалСтрок Цикл
				ТаблицаДанныхМЛ.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		ПоказатьПредупреждение(, НСтр("en='Read file successfully completed';ru='Чтение файла завершено успешно'"));
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьСтрокуВДату(Знач ДатаСтрокой)
	
	РазделительДаты = ".";
	флЕстьДата = Не СтрНайти(ДатаСтрокой, РазделительДаты) = 0;
	
	Если Не флЕстьДата Тогда 
		РазделительДаты = "/";
		флЕстьДата = Не СтрНайти(ДатаСтрокой, РазделительДаты) = 0;
	КонецЕсли;
	
	флЕстьВремя   = Не СтрНайти(ДатаСтрокой, ":") = 0;
	флЕстьСекунды = СтрЧислоВхождений(ДатаСтрокой, ":") = 2;
	
	Если Не флЕстьДата И Не флЕстьВремя Тогда 
		Возврат '00010101';
	КонецЕсли;
	
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", Символы.ПС);
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "/", Символы.ПС);
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", Символы.ПС);
	Пока Найти(ДатаСтрокой, "  ") > 0 Цикл
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "  ", " ");
	конеццикла;
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", Символы.ПС);
	
	НомерГод = ?(флЕстьДата, ?(РазделительДаты = "/", 3, 3), 0);
	НомерМес = ?(флЕстьДата, ?(РазделительДаты = "/", 1, 2), 0);
	НомерДен = ?(флЕстьДата, ?(РазделительДаты = "/", 2, 1), 0);
	НомерЧас = ?(флЕстьВремя, ?(флЕстьДата, 4, 1), 0);
	НомерМин = ?(флЕстьВремя, ?(флЕстьДата, 5, 2), 0);
	НомерСек = ?(флЕстьВремя, ?(флЕстьДата, ?(флЕстьСекунды, 6, 0), ?(флЕстьСекунды, 3, 0)), 0);
	
	Попытка
		Дата1С = Дата(
			?(НомерГод = 0, 1, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерГод))),
			?(НомерМес = 0, 1, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерМес))), 
			?(НомерДен = 0, 1, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерДен))), 
			?(НомерЧас = 0, 0, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерЧас))), 
			?(НомерМин = 0, 0, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерМин))), 
			?(НомерСек = 0, 0, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерСек)))
		);
		
	Исключение
		Дата1С = '00010101';
	КонецПопытки;
	
	Возврат Дата1С;
	
КонецФункции // ПреобразоватьСтрокуВДату()

&НаКлиенте
Функция ПреобрабоватьЧислоВДату(Знач КоличествоДней)
	
	Попытка
		КоличествоЧасов = КоличествоДней * 24;
		
		Часов = Цел(КоличествоЧасов);
		Минут = Окр((КоличествоЧасов - Часов) * 60, 2);
		
		КоличествоСекунд = (Часов * 3600) + (Минут * 60);
		
		Дата1С = '00010101' + КоличествоСекунд;
		
	Исключение
		Дата1С = '00010101';
	КонецПопытки;
	
	Возврат Дата1С;
	
КонецФункции // ПреобрабоватьЧислоВДату()

&НаКлиенте
Функция ПолучитьЗначениеЯчейки(ЯчейкаФайла, ТипЗначения)
		
	Попытка
		Если ТипЗнч(ЯчейкаФайла) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
			ТекстЯчейки = ЯчейкаФайла.Текст;
		Иначе 
			ТекстЯчейки = ЯчейкаФайла;
		КонецЕсли;
		
	Исключение
		ТекстЯчейки = "";
	КонецПопытки;
	
	Попытка
		Если ТипЗнч(ЯчейкаФайла) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
			ЗначениеЯчейки = ЯчейкаФайла.Значение;
		Иначе 
			ЗначениеЯчейки = ЯчейкаФайла;
		КонецЕсли;
		
	Исключение
		ЗначениеЯчейки = Неопределено;
	КонецПопытки;
	
	Если ТипЗначения = Тип("Число") Тогда 
		Если ЗначениеЯчейки <> Неопределено Тогда
			Попытка
				Возврат ЗначениеЯчейки;
			Исключение
			КонецПопытки;
		КонецЕсли;
	
		Попытка
			Возврат Число(ТекстЯчейки);
		Исключение
			Возврат 0;
		КонецПопытки;
		
		ВызватьИсключение НСтр("en='Invalid cell value';ru='Некорректное значение в ячейке'");
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Попытка
			Если ЗначениеЯчейки = Неопределено
				И ТипЗнч(ТекстЯчейки) = Тип("Строка") Тогда
				Возврат ПреобразоватьСтрокуВДату(ТекстЯчейки);
			ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда 
				Возврат ПреобразоватьСтрокуВДату(ЗначениеЯчейки);
			ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда 
				Возврат ПреобрабоватьЧислоВДату(ЗначениеЯчейки);
			ИначеЕсли (ЗначениеЯчейки <> Неопределено) Тогда 
				Если ЗначениеЯчейки < Дата('20000101') Тогда
					ЗначениеЯчейки = Дата('00010101') + (ЗначениеЯчейки - НачалоДня(ЗначениеЯчейки));
					Возврат ЗначениеЯчейки;
				Иначе
					Возврат ЗначениеЯчейки;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Возврат Дата(ТекстЯчейки);
		Исключение
			Возврат ТекстЯчейки;
		КонецПопытки;
		
		ВызватьИсключение НСтр("en='Invalid cell value';ru='Некорректное значение в ячейке'");
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда 
		Возврат СокрЛП(ТекстЯчейки);
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда 
		Возврат ЗначениеЗаполнено(СокрЛП(ТекстЯчейки));
		
	Иначе 
		ВызватьИсключение НСтр("en='Unsupported data type specified';ru='Указан неподдерживаемый тип данных'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеЯчейки()

&НаСервере
Функция ПолучитьЛокализованныеЗаголовкиРеквизитов(Знач ИмяТаблицы)
	
	ЛокализованныеЗаголовки = Новый Структура();
	
	Для Каждого ТекРеквизит Из ПолучитьРеквизиты(ИмяТаблицы) Цикл 
		ЛокализованныеЗаголовки.Вставить(ТекРеквизит.Имя, ТекРеквизит.Заголовок);
	КонецЦикла;
	
	Возврат ЛокализованныеЗаголовки;
	
КонецФункции // ПолучитьЛокализованныеЗаголовкиРеквизитов()

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхПолей(Знач ИмяТаблицы)
	
	ЛокализованныеЗаголовки = ПолучитьЛокализованныеЗаголовкиРеквизитов(ИмяТаблицы);
	
	ЕстьОшибки = Ложь;
	
	Если ИмяТаблицы = "ТаблицаДанныхЗаказыНаТС" И Не ЗначениеЗаполнено(ЕдиницаИзмеренияГрузов) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена единица измерения.'; en = 'Unit of measure is not filled'");
		СообщениеПользователю(ТекстОшибки, "ЕдиницаИзмеренияГрузов", ЕстьОшибки);
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив();
	
	Для Каждого ТекСтрока Из СоответствиеЗаголовковФайлов Цикл 
		Если ТекСтрока.ИмяТаблицы = ИмяТаблицы И ТекСтрока.ПроверкаЗаполнения Тогда 
			ПроверяемыеРеквизиты.Добавить(ТекСтрока.ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Для СчСтрок = 0 По ЭтотОбъект[ИмяТаблицы].Количество() - 1 Цикл 
		ТекСтрока = ЭтотОбъект[ИмяТаблицы][СчСтрок];
		
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл 
			Если Не ЗначениеЗаполнено(ТекСтрока[ПроверяемыйРеквизит]) Тогда 
				ЗаголовокРеквизита = ЛокализованныеЗаголовки[ПроверяемыйРеквизит];
				ТекстОшибки = "ru = 'Не заполнено обязательное поле'; en = 'Required field is not filled'" + " """ + ЗаголовокРеквизита + """.";
				ПолеОшибки = ИмяТаблицы + "["+Формат(СчСтрок, "ЧН=0; ЧГ=0")+"]." + ПроверяемыйРеквизит;
				СообщениеПользователю(ТекстОшибки, ПолеОшибки, ЕстьОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции // ПроверитьЗаполнениеОбязательныхПолей()

&НаКлиенте
Процедура СохранитьШаблонФайла(Знач КлючШаблона)
	
	Если КлючШаблона = "ШаблонТаблицыКлиенты" Тогда 
		ПолноеИмяФайла = НСтр("en = 'Customers'; ru = 'Клиенты'") + ".xlsx";
		
	ИначеЕсли КлючШаблона = "ШаблонТаблицыВодители" ИЛИ КлючШаблона = "ДанныеВодители" Тогда 
		ПолноеИмяФайла = НСтр("en = 'Drivers'; ru = 'Водители'") + ".xlsx";
		
	ИначеЕсли КлючШаблона = "ШаблонТаблицыМоделиТС" ИЛИ КлючШаблона = "ДанныеМоделиТС" Тогда 
		ПолноеИмяФайла = НСтр("en = 'Models of trucks'; ru = 'Модели ТС'") + ".xlsx";
		
	ИначеЕсли КлючШаблона = "ШаблонТаблицыТС" ИЛИ КлючШаблона = "ДанныеТС" Тогда 
		ПолноеИмяФайла = НСтр("en = 'Trucks'; ru = 'Транспортные средства'") + ".xlsx";
		
	ИначеЕсли КлючШаблона = "ШаблонТаблицыЗаказыНаТС" ИЛИ КлючШаблона = "ДанныеЗаказы" Тогда 
		ПолноеИмяФайла = НСтр("en = 'Orders'; ru = 'Заказы на ТС'") + ".xlsx";
		
	ИначеЕсли КлючШаблона = "ШаблонТаблицыМЛ" ИЛИ КлючШаблона = "ДанныеМЛ" Тогда
		ПолноеИмяФайла = НСтр("en = 'Routing lists'; ru = 'Маршрутные листы'") + ".xlsx";
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ПолноеИмяФайла, КлючШаблона", ПолноеИмяФайла, КлючШаблона);
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайлаШаблона", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонФайлаПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТабДокШаблона = Новый ТабличныйДокумент;
	
	Если ДополнительныеПараметры.КлючШаблона = "ДанныеТС" Тогда
		ТабДокШаблона = ПолучитьТабДокДляСохранения("ШаблонТаблицыТС", мОтмеченныеТС, "Справочники", "уатТС", мОтмеченныеМоделиТС);
	ИначеЕсли ДополнительныеПараметры.КлючШаблона = "ДанныеЗаказы" Тогда
		ТабДокШаблона = ПолучитьТабДокДляСохранения("ШаблонТаблицыЗаказыНаТС", мОтмеченныеЗаказы, "Документы", "уатЗаказГрузоотправителя");
	ИначеЕсли ДополнительныеПараметры.КлючШаблона = "ДанныеМоделиТС" Тогда
		ТабДокШаблона = ПолучитьТабДокДляСохранения("ШаблонТаблицыМоделиТС", мОтмеченныеМоделиТС, "Справочники", "уатМоделиТС");
	ИначеЕсли ДополнительныеПараметры.КлючШаблона = "ДанныеВодители" Тогда
		ТабДокШаблона = ПолучитьТабДокДляСохранения("ШаблонТаблицыВодители", мОтмеченныеТС, "Справочники", "Сотрудники");
	ИначеЕсли ДополнительныеПараметры.КлючШаблона = "ДанныеМЛ" Тогда
		ТабДокШаблона = ПолучитьТабДокДляСохранения("ШаблонТаблицыМЛ", мОтмеченныеМЛ, "Документы", "уатМаршрутныйЛист", мОтмеченныеЗаказы);
	Иначе
		ТабДокШаблона = ПолучитьТабДокШаблонаДляСохранения(ДополнительныеПараметры.КлючШаблона);
	КонецЕсли;
	ТабДокШаблона.НачатьЗапись(, ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLSX);
	
	Если ДополнительныеПараметры.КлючШаблона = "ДанныеТС" Тогда 
		СохранитьШаблонФайла("ДанныеМоделиТС");
	КонецЕсли;
	
	Если ДополнительныеПараметры.КлючШаблона = "ДанныеМоделиТС" Тогда
		СохранитьШаблонФайла("ДанныеВодители");
	КонецЕсли;
	
	Если ДополнительныеПараметры.КлючШаблона = "ДанныеМЛ" Тогда 
		СохранитьШаблонФайла("ДанныеЗаказы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокШаблонаДляСохранения(Знач КлючШаблона)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(КлючШаблона);
	
КонецФункции // ПолучитьТабДокШаблонаДляСохранения()

&НаСервере
Функция ПолучитьТабДокДляСохранения(КлючМакета, мОтмеченныеСтроки, ТипМетаданных, ИмяМетаданных, мОтмеченныеСтрокиДоп = Неопределено)
	
	Макет = ПолучитьТабДокШаблонаДляСохранения(КлючМакета);
	
	ОбластьМакетаШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Если КлючМакета = "ШаблонТаблицыВодители" Тогда
		мОтмеченныеСтрокиРеквизиты = ПолучитьРеквизитыВодителей(мОтмеченныеСтроки);
	ИначеЕсли КлючМакета = "ШаблонТаблицыМЛ" Тогда
		мОтмеченныеСтрокиРеквизиты = ПолучитьРеквизитыМЛ(мОтмеченныеСтроки, мОтмеченныеСтрокиДоп);
	Иначе
		РеквизитыМетаданных = Метаданные[ТипМетаданных][ИмяМетаданных].Реквизиты;
		ОтмеченныеСтрокиРеквизитыСтрока = "";
		Для Каждого ТекСтрока Из РеквизитыМетаданных Цикл
			ОтмеченныеСтрокиРеквизитыСтрока = ?(ЗначениеЗаполнено(ОтмеченныеСтрокиРеквизитыСтрока), ОтмеченныеСтрокиРеквизитыСтрока + ", ", "") + ТекСтрока.Имя;
		КонецЦикла;
		
		Если ТипМетаданных = "Документы" Тогда
			ОтмеченныеСтрокиРеквизитыСтрока = ОтмеченныеСтрокиРеквизитыСтрока + ", Дата";
		КонецЕсли;
		
		Если ТипМетаданных = "Справочники" Тогда
			ОтмеченныеСтрокиРеквизитыСтрока = ОтмеченныеСтрокиРеквизитыСтрока + ", Наименование, Родитель";
		КонецЕсли;
		
		мОтмеченныеСтрокиРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(мОтмеченныеСтроки, ОтмеченныеСтрокиРеквизитыСтрока);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из мОтмеченныеСтроки Цикл
		РеквизитыОбъекта = мОтмеченныеСтрокиРеквизиты.Получить(ТекСтрока);
		Если ТипЗнч(РеквизитыОбъекта) = Тип("Массив") Тогда
			Для Каждого ТекСтрокаДетально Из РеквизитыОбъекта Цикл
				Для Каждого ТекОбласть Из ОбластьМакетаСтрока.Области Цикл
					Попытка
						ТекОбласть.Текст = "";
						Если ТекОбласть.Имя = "ПрибытиеПланВремя" Тогда
							ТекОбласть.Текст = Формат(ТекСтрокаДетально[СтрЗаменить(ТекОбласть.Имя, "Время", "")], "ДФ=ЧЧ:мм");
						ИначеЕсли ТекОбласть.Имя = "ПрибытиеПлан" Тогда
							ТекОбласть.Текст = Формат(ТекСтрокаДетально[ТекОбласть.Имя], "ДФ=dd.MM.yyyy");
						ИначеЕсли ТекОбласть.Имя = "Стоянка" Тогда
							ТекОбласть.Текст = Формат(ТекСтрокаДетально[ТекОбласть.Имя], "ЧДЦ=2; ЧРД=:; ЧН=; ЧГ=");
						ИначеЕсли ТекОбласть.Имя = "КоординатыОтправления" Тогда
							Если ТипЗнч(ТекСтрокаДетально["АдресОтправления"]) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
								ТекОбласть.Текст = СтрЗаменить(Строка(ТекСтрокаДетально["АдресОтправления"].Лат), ",", ".")
								+ ", " + СтрЗаменить(Строка(ТекСтрокаДетально["АдресОтправления"].Лон), ",", ".");
							КонецЕсли;
						ИначеЕсли ТекОбласть.Имя = "ОкноС" Тогда
							ЗаказНаТС = ТекСтрокаДетально["ЗаказГрузоотправителя"];
							Если ТекСтрокаДетально.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
								ОкноС = ЗаказНаТС.ОтправлениеС;
							Иначе
								ОкноС = ЗаказНаТС.ДоставкаС;
							КонецЕсли;
							ТекОбласть.Текст = Строка(ОкноС);
						ИначеЕсли ТекОбласть.Имя = "ОкноПо" Тогда
							ЗаказНаТС = ТекСтрокаДетально["ЗаказГрузоотправителя"];
							Если ТекСтрокаДетально.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
								ОкноПо = ЗаказНаТС.ОтправлениеПо;
							Иначе
								ОкноПо = ЗаказНаТС.ДоставкаПо;
							КонецЕсли;
							ТекОбласть.Текст = Строка(ОкноПо);
						Иначе
							ТекОбласть.Текст = ТекСтрокаДетально[ТекОбласть.Имя];
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			КонецЦикла;
		Иначе
			Если КлючМакета = "ШаблонТаблицыТС"
				И мОтмеченныеСтрокиДоп <> Неопределено 
				И мОтмеченныеСтрокиДоп.Найти(РеквизитыОбъекта.Модель) = Неопределено Тогда
				Если ЗначениеЗаполнено(РеквизитыОбъекта.Модель) Тогда
					мОтмеченныеСтрокиДоп.Добавить(РеквизитыОбъекта.Модель);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ТекОбласть Из ОбластьМакетаСтрока.Области Цикл
				Попытка
					ТекОбласть.Текст = "";
					Если ТекОбласть.Имя = "ОтправлениеСВремя"
						ИЛИ ТекОбласть.Имя = "ОтправлениеПоВремя"
						ИЛИ ТекОбласть.Имя = "ДоставкаСВремя"
						ИЛИ ТекОбласть.Имя = "ДоставкаПоВремя" Тогда
						ТекОбласть.Текст = Формат(РеквизитыОбъекта[СтрЗаменить(ТекОбласть.Имя, "Время", "")], "ДФ=ЧЧ:мм");
					ИначеЕсли ТекОбласть.Имя = "ОтправлениеС"
						ИЛИ ТекОбласть.Имя = "ОтправлениеПо"
						ИЛИ ТекОбласть.Имя = "ДоставкаС"
						ИЛИ ТекОбласть.Имя = "ДоставкаПо" Тогда
						ТекОбласть.Текст = Формат(РеквизитыОбъекта[ТекОбласть.Имя], "ДФ=dd.MM.yyyy");
					ИначеЕсли ТекОбласть.Имя = "СтоянкаПунктОтправления"
						ИЛИ ТекОбласть.Имя = "СтоянкаПунктНазначения" Тогда
						ТекОбласть.Текст = Формат(РеквизитыОбъекта[ТекОбласть.Имя], "ЧДЦ=2; ЧРД=:; ЧН=; ЧГ=");
					ИначеЕсли ТекОбласть.Имя = "КоординатыПрибытия" Тогда
						Если ТипЗнч(РеквизитыОбъекта["АдресНазначения"]) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
							ТекОбласть.Текст = СтрЗаменить(Строка(РеквизитыОбъекта["АдресНазначения"].Лат), ",", ".")
							+ ", " + СтрЗаменить(Строка(РеквизитыОбъекта["АдресНазначения"].Лон), ",", ".");
						КонецЕсли;
					ИначеЕсли ТекОбласть.Имя = "КоординатыОтправления" Тогда
						Если ТипЗнч(РеквизитыОбъекта["АдресОтправления"]) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
							ТекОбласть.Текст = СтрЗаменить(Строка(РеквизитыОбъекта["АдресОтправления"].Лат), ",", ".")
							+ ", " + СтрЗаменить(Строка(РеквизитыОбъекта["АдресОтправления"].Лон), ",", ".");
						КонецЕсли;
					Иначе
						ТекОбласть.Текст = РеквизитыОбъекта[ТекОбласть.Имя];
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыВодителей(мОтмеченныеСтроки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", мОтмеченныеСтроки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Код КАК Код,
	|	ЕСТЬNULL(Сотрудники.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема,
	|	ЕСТЬNULL(Сотрудники.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
	|	Сотрудники.Организация КАК ТекущаяОрганизация,
	|	Сотрудники.Подразделение КАК ТекущееПодразделение,
	|	Сотрудники.Должность КАК ТекущаяДолжность,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
	|	Сотрудники.ФизическоеЛицо.ДатаРождения КАК ДатаРождения,
	|	Сотрудники.Родитель КАК Родитель,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	уатЭкипажТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатЭкипажТС КАК уатЭкипажТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|			ПО Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|		ПО уатЭкипажТС.Сотрудник = Сотрудники.Ссылка
	|			И (уатЭкипажТС.ТС В (&ТС))
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|ИТОГИ ПО
	|	ТС";
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	мОтмеченныеСтрокиРеквизиты = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ВыборкаДетальная = Выборка.Выбрать();
		МассивВодителей  = Новый Массив();
		СтруктураПолей   = Новый Структура("Код, ДатаПриема, ДатаУвольнения, ТекущаяОрганизация,
		|ТекущееПодразделение, ТекущаяДолжность, Фамилия, Имя, Отчество, ДатаРождения, Родитель");
		Пока ВыборкаДетальная.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаДетальная);
			МассивВодителей.Добавить(СтруктураПолей);
		КонецЦикла;
		мОтмеченныеСтрокиРеквизиты.Вставить(Выборка.ТС, МассивВодителей);
	КонецЦикла;
	
	Возврат мОтмеченныеСтрокиРеквизиты;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыМЛ(мОтмеченныеСтроки, мОтмеченныеСтрокиЗаказы)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МЛ", мОтмеченныеСтроки);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
	               |	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	               |	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
	               |	уатМаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
	               |	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	               |	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	               |	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	               |	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	               |	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
	               |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.НомерПоУчетуЗаказчика КАК НомерПоУчетуЗаказчика,
	               |	уатМаршрутныйЛистЗаказы.Ссылка.Номер КАК Номер,
	               |	уатМаршрутныйЛистЗаказы.Пункт КАК АдресОтправления,
	               |	ВЫБОР
	               |		КОГДА уатМаршрутныйЛистЗаказы.Ссылка.ТС.ГаражныйНомер = """"
	               |			ТОГДА уатМаршрутныйЛистЗаказы.Ссылка.ТС.Наименование
	               |		ИНАЧЕ уатМаршрутныйЛистЗаказы.Ссылка.ТС.ГаражныйНомер
	               |	КОНЕЦ КАК ТС,
	               |	уатМаршрутныйЛистЗаказы.Ссылка.ТС.Модель КАК Модель,
	               |	уатМаршрутныйЛистЗаказы.Ссылка.ТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	               |	уатМаршрутныйЛистЗаказы.Ссылка.ТС.Модель.Грузоподъемность КАК Грузоподъемность,
	               |	уатМаршрутныйЛистЗаказы.Ссылка.ТС.Модель.ОбъемКузова КАК ОбъемКузова,
	               |	уатМаршрутныйЛистЗаказы.Ссылка.Водитель1 КАК Водитель1,
	               |	уатМаршрутныйЛистЗаказы.Номенклатура.Наименование КАК НазваниеГруза,
	               |	уатМаршрутныйЛистЗаказы.Объем КАК Объем,
	               |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Номер КАК ЗаказГрузоотправителяНомер
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	               |ГДЕ
	               |	уатМаршрутныйЛистЗаказы.Ссылка В(&МЛ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	уатМаршрутныйЛистЗаказы.НомерСтроки
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	мОтмеченныеСтрокиРеквизиты = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ВыборкаДетальная = Выборка.Выбрать();
		МассивЗаказов    = Новый Массив();
		
		Пока ВыборкаДетальная.Следующий() Цикл
			
			СтруктураПолей   = Новый Структура("Номер, НомерПоУчетуЗаказчика, АдресОтправления, ТипТочкиМаршрута,
			|ПрибытиеПлан, Стоянка, ТС, Модель, ДатаВводаВЭксплуатацию, Грузоподъемность, ОбъемКузова, Водитель1,
			|Перевозчик, НазваниеГруза, ВесБрутто, Объем, КоличествоМест,
			|ЗаказГрузоотправителяНомер, ЗаказГрузоотправителя");
			
			Если мОтмеченныеСтрокиЗаказы.Найти(ВыборкаДетальная.ЗаказГрузоотправителя) = Неопределено Тогда
				мОтмеченныеСтрокиЗаказы.Добавить(ВыборкаДетальная.ЗаказГрузоотправителя);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, ВыборкаДетальная);
			Если Не ЗначениеЗаполнено(СтруктураПолей.НомерПоУчетуЗаказчика) Тогда
				СтруктураПолей.НомерПоУчетуЗаказчика = СтруктураПолей.ЗаказГрузоотправителяНомер;
			КонецЕсли;
			
			МассивЗаказов.Добавить(СтруктураПолей);
		КонецЦикла;
		мОтмеченныеСтрокиРеквизиты.Вставить(Выборка.Ссылка, МассивЗаказов);
	КонецЦикла;
	
	Возврат мОтмеченныеСтрокиРеквизиты;
	
КонецФункции

&НаСервере
Функция ПолучитьXMLКонтактнойИнформации(Знач АдресСтрокой, Знач СтранаПункта)
	
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	
	КонтактнаяИнформацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	КонтактнаяИнформацияXDTO.Комментарий   = "";
	КонтактнаяИнформацияXDTO.Представление = АдресСтрокой;
	КонтактнаяИнформацияXDTO.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	АдресXDTO = КонтактнаяИнформацияXDTO.Состав;
	АдресXDTO.Страна = Строка(СтранаПункта);
	АдресXDTO.Состав = АдресСтрокой;
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
	
КонецФункции // ПолучитьXMLКонтактнойИнформации()

&НаСервере
Функция НайтиСоздатьПодразделениеОрганизации(Наименование, ОрганизацияВладелец)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Владелец",     ОрганизацияВладелец);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Владелец
	|	И ПодразделенияОрганизаций.Наименование = &Наименование
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
	ПодразделениеОбъект.Владелец     = ОрганизацияВладелец;
	ПодразделениеОбъект.Наименование = Наименование;
	ПодразделениеОбъект.Записать();
	
	Возврат ПодразделениеОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьПодразделениеОрганизации()

&НаСервере
Функция НайтиСоздатьТипТС(Знач Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Наименование = Нстр("ru='Грузовые фургоны';en='Грузовые фургоны'");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТипыТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТипыТС КАК уатТипыТС
	|ГДЕ
	|	уатТипыТС.Наименование = &Наименование
	|	И НЕ уатТипыТС.ЭтоГруппа
	|	И НЕ уатТипыТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ТипТСОбъект = Справочники.уатТипыТС.СоздатьЭлемент();
	ТипТСОбъект.Наименование = Наименование;
	ТипТСОбъект.Записать();
	
	Возврат ТипТСОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьТипТС()

&НаСервере
Функция НайтиСоздатьОрганизацию(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Организация;
	ИначеЕсли ТипЗнч(Наименование) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Наименование;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	ОрганизацияОбъект.Наименование              = Наименование;
	ОрганизацияОбъект.НаименованиеСокращенное   = Наименование;
	ОрганизацияОбъект.НаименованиеПолное        = Наименование;
	ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОрганизацияОбъект.Записать();
	
	Возврат ОрганизацияОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьОрганизацию()

&НаКлиенте
Функция ПроверитьВозможностьГеокодированияАдреса(ТекстОшибки = "")
	
	Попытка
		МодульЭлектронныеКартыСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("уатЭлектронныеКартыСервер");
		ГеокодироватьПунктыНазначения = МодульЭлектронныеКартыСервер.ПроверитьВозможностьГеокодированияАдресаOSM(ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = Нстр("ru = 'В процессе геокодирования возникли ошибки.'") + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	Исключение
		ГеокодироватьПунктыНазначения = Ложь;
	КонецПопытки;
	
	Возврат ГеокодироватьПунктыНазначения;
	
КонецФункции

#КонецОбласти

#Область ОбработкаТаблицы_Клиенты

&НаСервере
Процедура ОбработатьТаблицуДанныхКлиенты(СчВсего, СчСоздано, ТекстОшибки = "")
	
	Для Каждого ТекСтрока Из ТаблицаДанныхКлиенты Цикл 
		Если СоздаватьПунктНазначения Тогда 
			ПунктСсылка = НайтиСоздатьПунктНазначения(ТекСтрока.ПунктНазначения, ТекСтрока.Адрес,,,ТекстОшибки);
		Иначе 
			ПунктСсылка = Неопределено;
		КонецЕсли;
		
		КонтрагентСсылка = НайтиСоздатьКонтрагента(
			ТекСтрока.НаименованиеКлиента, 
			ТекСтрока.ЮридическоеЛицо,
			ТекСтрока.Группа,
			ТекСтрока.Адрес, 
			ПунктСсылка, 
			СчСоздано
			);
		
		Если СоздаватьДоговорКонтрагента Тогда 
			НайтиСоздатьДоговорКонтрагента(КонтрагентСсылка, ТекСтрока.Покупатель);
		КонецЕсли;
		ТекСтрока.Ссылка = КонтрагентСсылка;
		СчВсего = СчВсего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьПунктНазначения(Знач НаименованиеПункта, АдресПункта, ШиротаПункта=0, ДолготаПункта=0, ТекстОшибки = "", мАдресОтправления = "")
	
	Если ТипЗнч(АдресПункта) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Возврат АдресПункта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеПункта) Тогда 
		НаименованиеПункта = АдресПункта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеПункта) 
		И НЕ ЗначениеЗаполнено(мАдресОтправления) Тогда
		Возврат АдресПункта;
	КонецЕсли;
	
	НаименованиеПункта = СокрЛП(Лев(НаименованиеПункта, 150));
	
	ПунктСсылка = НайтиПунктНазначения(НаименованиеПункта, АдресПункта, ШиротаПункта, ДолготаПункта);
	Если ЗначениеЗаполнено(ПунктСсылка) Тогда
		Если НЕ ЗначениеЗаполнено(АдресПункта) Тогда
			АдресПункта = ПунктСсылка;
		КонецЕсли;
		
		Возврат ПунктСсылка;
	КонецЕсли;

	мЛат = 0;
	мЛон = 0;
	ЗначениеАдресаJSON = "";
	
	Если НЕ (ШиротаПункта = 0 И ДолготаПункта = 0) Тогда 
		мЛат = ШиротаПункта;
		мЛон = ДолготаПункта;
		Если НЕ ЗначениеЗаполнено(АдресПункта)
			И НЕ ВариантПоставкиСТД Тогда
			МодульЭлектронныеКартыСервер = ОбщегоНазначения.ОбщийМодуль("уатЭлектронныеКартыСервер");
			НаименованиеПункта = МодульЭлектронныеКартыСервер.ПолучитьАдресПоКоординатамOSM(мЛат, мЛон);
			Если НЕ ЗначениеЗаполнено(НаименованиеПункта) Тогда
				НаименованиеПункта = мАдресОтправления;
			КонецЕсли;
			
			АдресПункта = НаименованиеПункта;
		КонецЕсли;
		КонтактнаяИнформацияXML = ПолучитьXMLКонтактнойИнформации(АдресПункта, СтранаПунктаНазначения);
	ИначеЕсли ГеокодироватьПунктыНазначения Тогда
		
		ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
		КонтактнаяИнформацияXML = ПолучитьXMLКонтактнойИнформации(АдресПункта, СтранаПунктаНазначения);
		
		МодульЭлектронныеКартыСервер = ОбщегоНазначения.ОбщийМодуль("уатЭлектронныеКартыСервер");
		стрПредставлениеПункта = МодульЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформацияXML, Ложь,, ТипЭлектронныхКарт);
		ТекстОшибкиOSM = "";
		ДопПараметры = Новый Структура("ПолучатьЗначениеАдресаJSON", Истина);
		мсвКоординат = МодульЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
		Если ТекстОшибкиOSM = "" Тогда 
			мЛат = мсвКоординат.Лат;
			мЛон = мсвКоординат.Лон;
			мсвКоординат.Свойство("ЗначениеАдресаJSON", ЗначениеАдресаJSON);
			
		Иначе 
			стрПредставлениеПункта = МодульЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформацияXML, Истина,, ТипЭлектронныхКарт);
			ТекстОшибкиOSM = "";
			мсвКоординат = МодульЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
			Если ТекстОшибкиOSM = "" Тогда 
				мЛат = мсвКоординат.Лат;
				мЛон = мсвКоординат.Лон;
				мсвКоординат.Свойство("ЗначениеАдресаJSON", ЗначениеАдресаJSON);
			Иначе
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС, "") + Нстр("ru = 'Не удалось получить координаты по адресу '") + АдресПункта;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	ПунктСсылка = НайтиПунктНазначения(НаименованиеПункта, АдресПункта, мЛат, мЛон);

	Если НЕ ЗначениеЗаполнено(ПунктСсылка) Тогда
		Если НЕ ЗначениеЗаполнено(НаименованиеПункта) Тогда
			НаименованиеПункта = мАдресОтправления;
		КонецЕсли;
		
		ПунктОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
		ПунктОбъект.Наименование        = НаименованиеПункта;
		Если ЗначениеЗаполнено(СтранаПунктаНазначения) Тогда
			ПунктОбъект.Страна          = СтранаПунктаНазначения;
		Иначе
			ПунктОбъект.Страна          = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
		КонецЕсли;
		ПунктОбъект.ВремяДоступностиПо  = '00010101235900';
		ПунктОбъект.Адрес               = АдресПункта;
		Если ЗначениеЗаполнено(ЗначениеАдресаJSON) Тогда
			ПунктОбъект.ЗначениеАдреса = ЗначениеАдресаJSON;
		Иначе
			ПунктОбъект.ЗначенияПолейАдреса = Новый ХранилищеЗначения(КонтактнаяИнформацияXML, Новый СжатиеДанных(9));
		КонецЕсли;
		ПунктОбъект.Лат                 = мЛат;
		ПунктОбъект.Лон                 = мЛон;
		
		ПунктОбъект.УстановитьСлучайныйЦветПункта();
		ПунктОбъект.Записать();
		
		ПунктСсылка = ПунктОбъект.Ссылка;
	КонецЕсли;

	Возврат ПунктСсылка;
	
КонецФункции // СоздатьОбновитьПунктНазначения()

&НаСервере
Функция НайтиПунктНазначения(Знач НаименованиеПункта, АдресПункта, Лат, Лон)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеПункта);
	Запрос.УстановитьПараметр("АдресПункта",  СокрЛП(Лев(АдресПункта, 200)));
	Запрос.УстановитьПараметр("Лат", Лат);
	Запрос.УстановитьПараметр("Лон", Лон);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА уатПунктыНазначения.Адрес = &АдресПункта
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	(&Наименование <> """"
	|				И уатПунктыНазначения.Наименование = &Наименование
	|			ИЛИ &АдресПункта <> """"
	|				И уатПунктыНазначения.Адрес = &АдресПункта
	|			ИЛИ &Лат <> 0
	|				И &Лон <> 0
	|				И уатПунктыНазначения.Лат = &Лат
	|				И уатПунктыНазначения.Лон = &Лон)
	|	И НЕ уатПунктыНазначения.ПометкаУдаления
	|	И НЕ уатПунктыНазначения.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // СоздатьОбновитьПунктНазначения()

&НаСервере
Функция НайтиСоздатьГруппуКонтрагентов(Группа)
	
	Если Не ЗначениеЗаполнено(Группа) Тогда 
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Группа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = Справочники.Контрагенты.СоздатьГруппу();
	ГруппаОбъект.Наименование = Группа;
	ГруппаОбъект.Записать();
	
	Возврат ГруппаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьКонтрагента(НаименованиеКонтрагента, ЮридическоеЛицо=Истина, Группа="", АдресКонтрагента="", ОсновнойПункт=Неопределено, СчСоздано=0)
	
	Если Не ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеКонтрагента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентОбъект.Наименование       = НаименованиеКонтрагента;
	КонтрагентОбъект.Родитель           = НайтиСоздатьГруппуКонтрагентов(Группа);
	КонтрагентОбъект.НаименованиеПолное = НаименованиеКонтрагента;
	
	КонтрагентОбъект.ЮридическоеФизическоеЛицо = ?(
		ЮридическоеЛицо, 
		Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, 
		Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
	);
	
	Если ЗначениеЗаполнено(АдресКонтрагента) Тогда 
		НовСтрока = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		НовСтрока.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НовСтрока.Вид           = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НовСтрока.Представление = АдресКонтрагента;
		НовСтрока.ЗначенияПолей = ПолучитьXMLКонтактнойИнформации(АдресКонтрагента, СтранаПунктаНазначения);
		НовСтрока.Страна        = СтранаПунктаНазначения;
		НовСтрока.ВидДляСписка  = НовСтрока.Вид;
	КонецЕсли;
	
	Если Не ОсновнойПункт = Неопределено Тогда 
		НовСтрока = КонтрагентОбъект.ПунктыНазначения.Добавить();
		НовСтрока.Основной = Истина;
		НовСтрока.ПунктНазначения = ОсновнойПункт;
	КонецЕсли;
	
	КонтрагентОбъект.Записать();
	
	СчСоздано = СчСоздано + 1;
	
	Возврат КонтрагентОбъект.Ссылка;
	
КонецФункции // СоздатьОбновитьКонтрагента()

&НаСервере
Функция НайтиСоздатьДоговорКонтрагента(КонтрагентСсылка, ДоговорСПокупателем=Истина)
	
	ВидДоговора = ?(
		ДоговорСПокупателем, 
		Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
		Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Владелец",    КонтрагентСсылка);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ ДоговорыКонтрагентов.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорОбъект.Наименование          = НаименованиеДоговора;
	ДоговорОбъект.Владелец              = КонтрагентСсылка;
	ДоговорОбъект.ВалютаВзаиморасчетов  = ВалютаДоговора;
	ДоговорОбъект.ВидДоговора           = ВидДоговора;
	ДоговорОбъект.Организация           = Организация;
	ДоговорОбъект.Контрагент            = КонтрагентСсылка;
	
	Если НЕ ВариантПоставкиСТД Тогда
		ДоговорОбъект.ВедениеВзаиморасчетов = СпособВеденияВзаиморасчетовПоДоговору;
	КонецЕсли;
	
	ДоговорОбъект.Записать();
	
	НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Контрагент.Установить(КонтрагентСсылка);
	НаборЗаписей.Отбор.ВидДоговора.Установить(ВидДоговора);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда 
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Организация;
		Запись.Контрагент  = КонтрагентСсылка;
		Запись.ВидДоговора = ВидДоговора;
		Запись.Договор     = ДоговорОбъект.Ссылка;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецФункции // СоздатьОбновитьДоговорКонтрагента()

#КонецОбласти

#Область ОбработкаТаблицы_Водители

&НаСервере
Процедура ОбработатьТаблицуДанныхВодители(СчВсего, СчСоздано)
	
	Для Каждого ТекСтрока Из ТаблицаДанныхВодители Цикл 
		ВодительСсылка = НайтиСоздатьВодителя(
			ТекСтрока.Код, 
			ТекСтрока.Фамилия, 
			ТекСтрока.Имя, 
			ТекСтрока.Отчество, 
			ТекСтрока.ДатаРождения, 
			ТекСтрока.Подразделение, 
			ТекСтрока.Группа,
			СчСоздано
		);
		ТекСтрока.Ссылка = ВодительСсылка;
		
		Если ЗаполнятьВодительскоеУдостоверение
				И (ЗначениеЗаполнено(ТекСтрока.СерияВодУдостоверения) Или ЗначениеЗаполнено(ТекСтрока.НомерВодУдостоверения)) Тогда 
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("ВидДокумента",       ВидДокументаВодительскоеУдостоверение);
			ДанныеЗаполнения.Вставить("ВладелецДокументов", ВодительСсылка);
			ДанныеЗаполнения.Вставить("Серия",              ТекСтрока.СерияВодУдостоверения);
			ДанныеЗаполнения.Вставить("Номер",              ТекСтрока.НомерВодУдостоверения);
			ДанныеЗаполнения.Вставить("ДатаОкончания",      ТекСтрока.СрокОкончанияДействияВодУдостоверения);
			НайтиСоздатьДокументВодителя(ДанныеЗаполнения, ТекСтрока.Подразделение);
		КонецЕсли;
		
		Если ЗаполнятьМедицинскуюСправку
				И (ЗначениеЗаполнено(ТекСтрока.СерияМедСправки) Или ЗначениеЗаполнено(ТекСтрока.НомерМедСправки)) Тогда 
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("ВидДокумента",       ВидДокументаМедСправка);
			ДанныеЗаполнения.Вставить("ВладелецДокументов", ВодительСсылка);
			ДанныеЗаполнения.Вставить("Серия",              ТекСтрока.СерияМедСправки);
			ДанныеЗаполнения.Вставить("Номер",              ТекСтрока.НомерМедСправки);
			ДанныеЗаполнения.Вставить("ДатаОкончания",      ТекСтрока.СрокОкончанияДействияМедСправки);
			НайтиСоздатьДокументВодителя(ДанныеЗаполнения, ТекСтрока.Подразделение);
		КонецЕсли;
		
		СчВсего = СчВсего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьГруппуФизЛиц(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И ФизическиеЛица.ЭтоГруппа
	|	И НЕ ФизическиеЛица.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = Справочники.ФизическиеЛица.СоздатьГруппу();
	ГруппаОбъект.Наименование = Наименование;
	ГруппаОбъект.Записать();
	
	Возврат ГруппаОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьГруппуФизЛиц()

&НаСервере
Функция НайтиСоздатьФизЛицо(Наименование, Фамилия, Имя, Отчество, ДатаРождения, Группа)
	
	Если НЕ ЗначениеЗаполнено(Наименование)
		И НЕ ЗначениеЗаполнено(Фамилия)
		И НЕ ЗначениеЗаполнено(Имя) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;

	ФИОФизЛица = Фамилия + " " + Имя + " " + Отчество;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ФИО",          ФИОФизЛица);
	Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И ФизическиеЛица.ФИО = &ФИО
	|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|	И НЕ ФизическиеЛица.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФизЛицоОбъект.Наименование = Наименование;
	ФизЛицоОбъект.Родитель     = НайтиСоздатьГруппуФизЛиц(Группа);
	ФизЛицоОбъект.ДатаРождения = ДатаРождения;
	ФизЛицоОбъект.ФИО          = ФИОФизЛица;
	ФизЛицоОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период         = '19700101';
	МенеджерЗаписи.ФизическоеЛицо = ФизЛицоОбъект.Ссылка;
	МенеджерЗаписи.Фамилия        = Фамилия;
	МенеджерЗаписи.Имя            = Имя;
	МенеджерЗаписи.Отчество       = Отчество;
	МенеджерЗаписи.Записать(Истина);
	
	Возврат ФизЛицоОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьФизЛицо()

&НаСервере
Функция НайтиСоздатьГруппуВодителей(Группа)
	
	Если Не ЗначениеЗаполнено(Группа) Тогда 
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Группа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Наименование = &Наименование
	|	И Сотрудники.ЭтоГруппа
	|	И НЕ Сотрудники.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = Справочники.Сотрудники.СоздатьГруппу();
	ГруппаОбъект.Наименование = Группа;
	ГруппаОбъект.Записать();
	
	Возврат ГруппаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьВодителя(ТабельныйНомер, Фамилия, Имя, Отчество, ДатаРождения, Подразделение, Группа, СчСоздано, ВодительСсылка = Неопределено)
	
	НаименованиеВодителя = Фамилия + " " + Имя + ?(ЗначениеЗаполнено(Отчество), " ", "") + Отчество;
	
	Если НЕ ЗначениеЗаполнено(Фамилия) И ЗначениеЗаполнено(ВодительСсылка) Тогда
		Возврат ВодительСсылка;
	ИначеЕсли НЕ ЗначениеЗаполнено(Фамилия) Тогда
		НаименованиеВодителя = "Водитель";
	КонецЕсли;

	Запрос = Новый Запрос();
	
	Если ЗначениеЗаполнено(ТабельныйНомер) Тогда
		Запрос.УстановитьПараметр("Код",          ТабельныйНомер);
		Запрос.УстановитьПараметр("Наименование", НаименованиеВодителя);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Код = &Код
		|	И Сотрудники.Наименование = &Наименование
		|	И НЕ Сотрудники.ЭтоГруппа
		|	И НЕ Сотрудники.ПометкаУдаления";
	Иначе
		Запрос.УстановитьПараметр("Наименование", НаименованиеВодителя);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование = &Наименование
		|	И НЕ Сотрудники.ЭтоГруппа
		|	И НЕ Сотрудники.ПометкаУдаления";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	Если ЗначениеЗаполнено(ТабельныйНомер) Тогда
		СотрудникОбъект.Код             = ТабельныйНомер;
	КонецЕсли;
	СотрудникОбъект.Наименование        = НаименованиеВодителя;
	СотрудникОбъект.Родитель            = НайтиСоздатьГруппуВодителей(Группа);
	СотрудникОбъект.ФизическоеЛицо      = НайтиСоздатьФизЛицо(НаименованиеВодителя, Фамилия, Имя, Отчество, ДатаРождения, Группа);
	СотрудникОбъект.Записать();
	
	СчСоздано = СчСоздано + 1;
	
	ЗаписьКадроваяИстория = РегистрыСведений.уатКадроваяИсторияСотрудников.СоздатьМенеджерЗаписи();
	ЗаписьКадроваяИстория.Период = ТекущаяДата();
	ЗаписьКадроваяИстория.Сотрудник = СотрудникОбъект.Ссылка;
	ЗаписьКадроваяИстория.Организация = Организация;
	ЗаписьКадроваяИстория.Подразделение = НайтиСоздатьПодразделениеОрганизации(Подразделение, Организация);
	ЗаписьКадроваяИстория.Записать();
	
	уатОбщегоНазначенияСервер.ОбновитьТекущееМестоРаботыВСправочникеСотрудники(СотрудникОбъект.Ссылка);
	
	Возврат СотрудникОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьВодителя()

&НаСервере
Процедура НайтиСоздатьДокументВодителя(ДанныеЗаполнения, Подразделение)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидДокумента", ДанныеЗаполнения.ВидДокумента);
	Запрос.УстановитьПараметр("Номер", ДанныеЗаполнения.Номер);
	Запрос.УстановитьПараметр("Серия", ДанныеЗаполнения.Серия);
	Запрос.УстановитьПараметр("ВладелецДокументов", ДанныеЗаполнения.ВладелецДокументов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатРегистрационныеДокументы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = &ВидДокумента
	               |	И уатРегистрационныеДокументы.Номер = &Номер
	               |	И уатРегистрационныеДокументы.Серия = &Серия
	               |	И уатРегистрационныеДокументы.ВладелецДокументов = &ВладелецДокументов";
	Выборка = Запрос.Выполнить();
	Если Выборка.Пустой() Тогда 
		РегистрационныйДокумент = Справочники.уатРегистрационныеДокументы.СоздатьЭлемент();
		РегистрационныйДокумент.ПринадлежностьДокументов = Перечисления.уатПринадлежностьДокументов.ДокументыВодителя;
		РегистрационныйДокумент.Статус                   = Перечисления.уатСтатусыДействия.Действует;
		РегистрационныйДокумент.Организация              = Организация;
		РегистрационныйДокумент.Подразделение            = НайтиСоздатьПодразделениеОрганизации(Подразделение, Организация);
		ЗаполнитьЗначенияСвойств(РегистрационныйДокумент, ДанныеЗаполнения);
		РегистрационныйДокумент.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТаблицы_МоделиТС

&НаСервере
Процедура ОбработатьТаблицуДанныхМоделиТС(СчВсего, СчСоздано)
	
	Для Каждого ТекСтрока Из ТаблицаДанныхМоделиТС Цикл 
		ОбъектСсылка = НайтиСоздатьМодельТС(
			ТекСтрока.Наименование,
			ТекСтрока.Группа, 
			ТекСтрока.ВидМоделиТС,
			ТекСтрока.ТипТС,
			ТекСтрока.СобственныйВес, 
			ТекСтрока.Грузоподъемность,
			ТекСтрока.ОбъемКузова, 
			ТекСтрока.МаксимальнаяСкорость, 
			ТекСтрока.ТипДвигателя, 
			ТекСтрока.МощностьДвигателя, 
			ТекСтрока.РабочийОбъемДвигателя, 
			ТекСтрока.ОсновноеТопливо,
			ТекСтрока.ОбъемБака, 
			ТекСтрока.Комментарий,
			СчСоздано
		);
		ТекСтрока.Ссылка = ОбъектСсылка;
		СчВсего = СчВсего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьГруппуМоделейТС(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Справочники.уатМоделиТС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМоделиТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМоделиТС КАК уатМоделиТС
	|ГДЕ
	|	уатМоделиТС.Наименование = &Наименование
	|	И уатМоделиТС.ЭтоГруппа
	|	И НЕ уатМоделиТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = Справочники.уатМоделиТС.СоздатьГруппу();
	ГруппаОбъект.Наименование = Наименование;
	ГруппаОбъект.Записать();
	
	Возврат ГруппаОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьГруппуМоделейТС()

&НаСервере
Функция ПолучитьВидМоделиТС(Знач ЗагружаемыйВидМоделиТС)
	
	ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт;
	
	Если Не ЗначениеЗаполнено(ЗагружаемыйВидМоделиТС) Тогда 
		Возврат ВидМоделиТС;
	КонецЕсли;
	
	Если Метаданные.Языки.Найти("Английский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Английский Тогда 
		Если НРег(ЗагружаемыйВидМоделиТС) = "truck" Тогда 
			ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт;
		ИначеЕсли НРег(ЗагружаемыйВидМоделиТС) = "trailer" Тогда 
			ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп;
		КонецЕсли;
		
	Иначе
		Если НРег(ЗагружаемыйВидМоделиТС) = "автотранспорт" Тогда 
			ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт;
		ИначеЕсли НРег(ЗагружаемыйВидМоделиТС) = "прицеп" Тогда 
			ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидМоделиТС;
	
КонецФункции // ПолучитьВидМоделиТС()

&НаСервере
Функция ПолучитьТипДвигателя(Знач ЗагружаемыйТипДвигателя)
	
	ТипДвигателя = Перечисления.уатТипыДвигателей.Бензиновый;
	
	Если Не ЗначениеЗаполнено(ЗагружаемыйТипДвигателя) Тогда 
		Возврат ТипДвигателя;
	КонецЕсли;
	
	Если Метаданные.Языки.Найти("Английский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Английский Тогда 
		Если НРег(ЗагружаемыйТипДвигателя) = "petrol" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Бензиновый;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "diesel" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Дизельный;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "gas" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Газовый;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "gas-gasoline" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Газобензиновый;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "gas-diesel" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Газодизельный;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "electric" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Электрический;
		КонецЕсли;
		
	Иначе
		Если НРег(ЗагружаемыйТипДвигателя) = "бензиновый" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Бензиновый;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "дизельный" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Дизельный;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "газовый" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Газовый;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "газобензиновый" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Газобензиновый;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "газодизельный" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Газодизельный;
		ИначеЕсли НРег(ЗагружаемыйТипДвигателя) = "электрический" Тогда 
			ТипДвигателя = Перечисления.уатТипыДвигателей.Электрический;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипДвигателя;
	
КонецФункции // ПолучитьТипДвигателя()

&НаСервере
Функция ПолучитьЕдиницуИзмеренияЛитр()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Код", "112");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО ЕдиницыИзмерения.ЕдиницаПоКлассификатору = КлассификаторЕдиницИзмерения.Ссылка
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Код = &Код
	|	И НЕ КлассификаторЕдиницИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если Метаданные.Языки.Найти("Английский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Английский Тогда 
		Наименование       = "l";
		НаименованиеПолное = "Liter";
	Иначе 
		Наименование       = "л";
		НаименованиеПолное = "Литр";
	КонецЕсли;
	
	ЕдиницаОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	ЕдиницаОбъект.Код                = "112";
	ЕдиницаОбъект.Наименование       = Наименование;
	ЕдиницаОбъект.НаименованиеПолное = НаименованиеПолное;
	ЕдиницаОбъект.Записать();
	
	Возврат ЕдиницаОбъект.Ссылка;
	
КонецФункции // ПолучитьЕдиницуИзмеренияЛитр()

&НаСервере
Функция ПолучитьТопливо(Знач НаименованиеТоплива)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеТоплива);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатНоменклатураГСМ.Номенклатура КАК Топливо
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО уатНоменклатураГСМ.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Топливо))
	|			И (СправочникНоменклатура.Наименование = &Наименование)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Топливо;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.Услуга";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		НоменклатураТоплива = Выборка.Ссылка;
	Иначе 
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		НоменклатураОбъект.Наименование       = НаименованиеТоплива;
		НоменклатураОбъект.НаименованиеПолное = НаименованиеТоплива;
		НоменклатураОбъект.ЕдиницаИзмерения   = ПолучитьЕдиницуИзмеренияЛитр();
		НоменклатураОбъект.ВидНоменклатуры    = Справочники.ВидыНоменклатуры.Товар;
		НоменклатураОбъект.Записать();
		
		НоменклатураТоплива = НоменклатураОбъект.Ссылка;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатНоменклатураГСМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураТоплива);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда 
		Запись = НаборЗаписей.Добавить();
		Запись.Номенклатура = НоменклатураТоплива;
		Запись.ГруппаГСМ    = Перечисления.уатГруппыГСМ.Топливо;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Возврат НоменклатураТоплива;
	
КонецФункции // ПолучитьТопливо()

&НаСервере
Функция НайтиСоздатьМодельТС(Наименование, Группа="", ВидМоделиТС="", ТипТС="", СобственныйВес=0, Грузоподъемность=0,
		ОбъемКузова=0, МаксимальнаяСкорость=0, ТипДвигателя="", МощностьДвигателя=0, РабочийОбъемДвигателя=0,
		ОсновноеТопливо="", ОбъемБака=0, Комментарий="", СчСоздано=0)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМоделиТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМоделиТС КАК уатМоделиТС
	|ГДЕ
	|	уатМоделиТС.Наименование = &Наименование
	|	И НЕ уатМоделиТС.ЭтоГруппа
	|	И НЕ уатМоделиТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	МодельОбъект = Справочники.уатМоделиТС.СоздатьЭлемент();
	МодельОбъект.Наименование          = Наименование;
	МодельОбъект.Родитель              = НайтиСоздатьГруппуМоделейТС(Группа);
	МодельОбъект.ВидМоделиТС           = ПолучитьВидМоделиТС(ВидМоделиТС);
	МодельОбъект.ТипТС                 = НайтиСоздатьТипТС(ТипТС);
	МодельОбъект.НаличиеСпидометра     = Истина;
	МодельОбъект.СобственныйВес        = СобственныйВес;
	МодельОбъект.Грузоподъемность      = Грузоподъемность;
	МодельОбъект.ОбъемКузова           = ОбъемКузова;
	МодельОбъект.МаксимальнаяСкорость  = МаксимальнаяСкорость;
	МодельОбъект.НаличиеТопливногоБака = ОбъемБака > 0;
	МодельОбъект.ОбъемБака             = ОбъемБака;
	
	Если ЗначениеЗаполнено(ОсновноеТопливо) Тогда
		МодельОбъект.ТипДвигателя          = ПолучитьТипДвигателя(ТипДвигателя);
		МодельОбъект.ОсновноеТопливо       = ПолучитьТопливо(ОсновноеТопливо);
	КонецЕсли;

	МодельОбъект.МощностьДвигателяЛС   = МощностьДвигателя;
	МодельОбъект.РабочийОбъемДвигателя = РабочийОбъемДвигателя;
	МодельОбъект.Описание              = Комментарий;
	МодельОбъект.Записать();
	
	СчСоздано = СчСоздано + 1;
	
	Возврат МодельОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьМодельТС()

#КонецОбласти

#Область ОбработкаТаблицы_ТС

&НаСервере
Процедура ОбработатьТаблицуДанныхТС(СчВсего, СчСоздано)
	
	Для Каждого ТекСтрока Из ТаблицаДанныхТС Цикл 
		ТССсылка = НайтиСоздатьТС(
			ТекСтрока.ГосНомер,
			ТекСтрока.ГаражныйНомер,
			ТекСтрока.Группа,
			ТекСтрока.Модель,
			ТекСтрока.Организация,
			ТекСтрока.Подразделение,
			ТекСтрока.Колонна,
			ТекСтрока.VIN,
			ТекСтрока.Гараж,
			ТекСтрока.ДатаВвода,
			ТекСтрока.ДатаВыбытия,
			ТекСтрока.ТипТС,
			ТекСтрока.БалансоваяСтоимость,
			ТекСтрока.ГабаритыВысота,
			ТекСтрока.ГабаритыДлина,
			ТекСтрока.ГабаритыШирина,
			ТекСтрока.МодельДвигателя,
			ТекСтрока.МощностьДвигателяКВТ,
			ТекСтрока.МощностьДвигателяЛС,
			ТекСтрока.НачальныеПоказанияСпидометра,
			ТекСтрока.НачальныеПоказанияСчетчикаМЧ,
			ТекСтрока.НомерДвигателя,
			ТекСтрока.НомерКПП,
			ТекСтрока.НомерКузова,
			ТекСтрока.НомерШасси,
			ТекСтрока.ВидССМ,
			ТекСтрока.ССМ_ID,
			ТекСтрока.Грузоподъемность,
			ТекСтрока.ОбъемКузова,
			СчСоздано
		);
		ТекСтрока.Ссылка = ТССсылка;
		
		Если ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное
				И СоздаватьВводНачальныхПоказаний И (ЗначениеЗаполнено(ТекСтрока.НачальныеПоказанияСпидометра)
				Или ЗначениеЗаполнено(ТекСтрока.НачальныеПоказанияСчетчикаМЧ)) Тогда 
			НайтиСоздатьВводНачальныхПоказаний(
				ТССсылка, 
				ТекСтрока.НачальныеПоказанияСпидометра, 
				ТекСтрока.НачальныеПоказанияСчетчикаМЧ
			);
		КонецЕсли;
		
		Если ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное 
				И СоздаватьВводВЭксплуатациюТС И ЗначениеЗаполнено(ТекСтрока.ДатаВвода) Тогда 
			НайтиСоздатьВводВЭксплуатациюТС(ТССсылка, ТекСтрока.ДатаВвода);
		КонецЕсли;
		
		СчВсего = СчВсего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьГруппуТС(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Справочники.уатТС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.Наименование = &Наименование
	|	И уатТС.ЭтоГруппа
	|	И НЕ уатТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГруппаОбъект = Справочники.уатТС.СоздатьГруппу();
	ГруппаОбъект.Наименование = Наименование;
	ГруппаОбъект.Записать();
	
	Возврат ГруппаОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьГруппуТС()

&НаСервере
Функция НайтиСоздатьГараж(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Справочники.уатПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Наименование = &Наименование
	|	И уатПунктыНазначения.Гараж
	|	И НЕ уатПунктыНазначения.ЭтоГруппа
	|	И НЕ уатПунктыНазначения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГаражОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
	ГаражОбъект.Наименование = Наименование;
	ГаражОбъект.Страна       = СтранаПунктаНазначения;
	ГаражОбъект.Гараж        = Истина;
	ГаражОбъект.Записать();
	
	Возврат ГаражОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьГараж()

&НаСервере
Функция НайтиСоздатьКолонну(Наименование)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		Возврат Справочники.уатКолонны.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатКолонны.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатКолонны КАК уатКолонны
	|ГДЕ
	|	уатКолонны.Наименование = &Наименование
	|	И НЕ уатКолонны.ЭтоГруппа
	|	И НЕ уатКолонны.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	КолоннаОбъект = Справочники.уатКолонны.СоздатьЭлемент();
	КолоннаОбъект.Наименование = Наименование;
	КолоннаОбъект.Записать();
	
	Возврат КолоннаОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьКолонну()

&НаСервере
Функция НайтиСоздатьТС(ГосНомер, ГаражныйНомер, Группа, Модель, ОрганизацияТС, Подразделение, Колонна, VIN, Гараж, 
		ДатаВвода, ДатаВыбытия, ТипТС, БалансоваяСтоимость, ГабаритыВысота, ГабаритыДлина, ГабаритыШирина, МодельДвигателя,
		МощностьДвигателяКВТ, МощностьДвигателяЛС, НачальныеПоказанияСпидометра, НачальныеПоказанияСчетчикаМЧ,
		НомерДвигателя, НомерКПП, НомерКузова, НомерШасси, ВидССМ, ССМ_ID, Грузоподъемность, ОбъемКузова, СчСоздано, ТССсылка = Неопределено)
		
	Если НЕ ЗначениеЗаполнено(ГосНомер) И ЗначениеЗаполнено(ТССсылка) Тогда
		Возврат ТССсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ГосударственныйНомер", ГосНомер);
	Запрос.УстановитьПараметр("VIN",                  VIN);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.ГосударственныйНомер = &ГосударственныйНомер
	|	И уатТС.VIN = &VIN
	|	И НЕ уатТС.ЭтоГруппа
	|	И НЕ уатТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ТСОбъект = Справочники.уатТС.СоздатьЭлемент();
	ТСОбъект.Наименование           = ГосНомер;
	ТСОбъект.Родитель               = НайтиСоздатьГруппуТС(Группа);
	ТСОбъект.VIN                    = VIN;
	ТСОбъект.БалансоваяСтоимость    = БалансоваяСтоимость;
	ТСОбъект.ГабаритныйРазмерВысота = ГабаритыВысота;
	ТСОбъект.ГабаритныйРазмерДлина  = ГабаритыДлина;
	ТСОбъект.ГабаритныйРазмерШирина = ГабаритыШирина;
	ТСОбъект.Гараж                  = НайтиСоздатьГараж(Гараж);
	ТСОбъект.ГаражныйНомер          = ГаражныйНомер;
	ТСОбъект.ГосударственныйНомер   = ГосНомер;
	ТСОбъект.ДатаВводаВЭксплуатацию = ДатаВвода;
	ТСОбъект.ДатаВыбытия            = ДатаВыбытия;
	ТСОбъект.Колонна                = НайтиСоздатьКолонну(Колонна);
	ТСОбъект.Модель                 = НайтиСоздатьМодельТС(Модель,,,,,Грузоподъемность,ОбъемКузова);
	ТСОбъект.МодельДвигателя        = МодельДвигателя;
	ТСОбъект.МощностьДвигателяКВт   = МощностьДвигателяКВТ;
	ТСОбъект.МощностьДвигателяЛС    = МощностьДвигателяЛС;
	ТСОбъект.НачальнаяНаработка     = НачальныеПоказанияСчетчикаМЧ;
	ТСОбъект.НачальныйПробег        = ?(ТСОбъект.Модель.НаличиеСпидометра, НачальныеПоказанияСпидометра, НачальныеПоказанияСчетчикаМЧ);
	ТСОбъект.НомерДвигателя         = НомерДвигателя;
	ТСОбъект.НомерКПП               = НомерКПП;
	ТСОбъект.НомерКузова            = НомерКузова;
	ТСОбъект.НомерШасси             = НомерШасси;
	ТСОбъект.ПринадлежностьТС       = ПринадлежностьТС;
	ТСОбъект.СобственныйВес         = ТСОбъект.Модель.СобственныйВес;
	ТСОбъект.ТипТС                  = НайтиСоздатьТипТС(ТипТС);
	ТСОбъект.ВидМоделиТС            = ТСОбъект.Модель.ВидМоделиТС;
	
	Если ТСОбъект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда 
		ТСОбъект.ВладелецТС    = НайтиСоздатьОрганизацию(ОрганизацияТС);
		ТСОбъект.Организация   = НайтиСоздатьОрганизацию(ОрганизацияТС);
		ТСОбъект.Подразделение = НайтиСоздатьПодразделениеОрганизации(Подразделение, ТСОбъект.Организация);
	Иначе 
		ТСОбъект.ВладелецТС    = Неопределено;
		ТСОбъект.Организация   = Неопределено;
		ТСОбъект.Подразделение = Неопределено;
	КонецЕсли;
	
	Попытка
		ТСОбъект.ИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS[ВидССМ];
	Исключение
	КонецПопытки;
	
	Если НЕ ВариантПоставкиСТД И ЗначениеЗаполнено(ТСОбъект.ИспользуемаяСистемаGPS) Тогда 
		ТСОбъект.ИДвСистемеНавигации = ССМ_ID;
	КонецЕсли;
	
	ТСОбъект.Записать();
	
	СчСоздано = СчСоздано + 1;
	
	Возврат ТСОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьТС()

&НаСервере
Функция НайтиСоздатьВводНачальныхПоказаний(ТССсылка, НачальныеПоказанияСпидометра, НачальныеПоказанияСчетчикаМЧ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТССсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВводНачальныхПоказанийСпидометр.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатВводНачальныхПоказаний.Спидометр КАК уатВводНачальныхПоказанийСпидометр
	|ГДЕ
	|	уатВводНачальныхПоказанийСпидометр.ТС = &ТС
	|	И уатВводНачальныхПоказанийСпидометр.Ссылка.Проведен
	|	И НЕ уатВводНачальныхПоказанийСпидометр.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДокументОбъект = Документы.уатВводНачальныхПоказаний.СоздатьДокумент();
	ДокументОбъект.Дата          = ТекущаяДата();
	ДокументОбъект.Организация   = Организация;
	ДокументОбъект.Ответственный = Ответственный;
	
	НоваяСтрока = ДокументОбъект.Спидометр.Добавить();
	НоваяСтрока.ТС                  = ТССсылка;
	НоваяСтрока.ПоказанияСпидометра = ?(ТССсылка.Модель.НаличиеСпидометра, НачальныеПоказанияСпидометра, 0);
	НоваяСтрока.ПоказанияСчетчикаМЧ = ?(ТССсылка.Модель.НаличиеСпидометра, 0, НачальныеПоказанияСчетчикаМЧ);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьВводНачальныхПоказаний()

&НаСервере
Функция НайтиСоздатьВводВЭксплуатациюТС(ТССсылка, ДатаВвода)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТССсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВводВЭксплуатациюТСиОборудованияТС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатВводВЭксплуатациюТСиОборудования.ТС КАК уатВводВЭксплуатациюТСиОборудованияТС
	|ГДЕ
	|	уатВводВЭксплуатациюТСиОборудованияТС.ТС = &ТС
	|	И уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Проведен
	|	И НЕ уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДокументОбъект = Документы.уатВводВЭксплуатациюТСиОборудования.СоздатьДокумент();
	ДокументОбъект.Дата          = ТекущаяДата();
	ДокументОбъект.Колонна       = ТССсылка.Колонна;
	ДокументОбъект.Организация   = ТССсылка.Организация;
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Подразделение = ТССсылка.Подразделение;
	
	НоваяСтрока = ДокументОбъект.ТС.Добавить();
	НоваяСтрока.ТС        = ТССсылка;
	НоваяСтрока.ДатаВвода = ДатаВвода;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьВводВЭксплуатациюТС()

#КонецОбласти

#Область ОбработкаТаблицы_ЗаказыНаТС

&НаСервере
Процедура ОбработатьТаблицуДанныхЗаказыНаТС(СчВсего, СчСоздано, ТекстОшибки = "")
	
	Для Каждого ТекСтрока Из ТаблицаДанныхЗаказыНаТС Цикл 
		ОбъектСсылка = НайтиСоздатьЗаказНаТС(
			ТекСтрока.Дата,
			ТекСтрока.Контрагент,
			ТекСтрока.Подразделение,
			ТекСтрока.Грузоотправитель,
			ТекСтрока.Грузополучатель,
			ТекСтрока.Маршрут,
			ТекСтрока.АдресОтправления,
			ТекСтрока.ЛатОтправления,
			ТекСтрока.ЛонОтправления,
			ТекСтрока.ДатаОтправленияС,
			ТекСтрока.ВремяОтправленияС,
			ТекСтрока.ДатаОтправленияПо,
			ТекСтрока.ВремяОтправленияПо,
			ТекСтрока.ВремяПогрузки,
			ТекСтрока.АдресПрибытия,
			ТекСтрока.ЛатПрибытия,
			ТекСтрока.ЛонПрибытия,
			ТекСтрока.ДатаПрибытияС,
			ТекСтрока.ВремяПрибытияС,
			ТекСтрока.ДатаПрибытияПо,
			ТекСтрока.ВремяПрибытияПо,
			ТекСтрока.ВремяРазгрузки,
			?(ЗначениеЗаполнено(ТекСтрока.НаименованиеГруза),ТекСтрока.НаименованиеГруза, "Груз"),
			ТекСтрока.КоличествоГруза,
			ТекСтрока.ВесГруза, 
			ТекСтрока.ОбъемГруза, 
			ТекСтрока.ВходНомер, 
			ТекСтрока.ВходДата, 
			ТекСтрока.ОписаниеГруза, 
			ТекСтрока.Комментарий,
			ТекСтрока.ГабаритыШирина,
			ТекСтрока.ГабаритыВысота,
			ТекСтрока.ГабаритыДлина,
			СчСоздано,
			СчВсего,
			ТекСтрока.Номер,
			ТекстОшибки
		);
		ТекСтрока.Ссылка = ОбъектСсылка;
		СчВсего = СчВсего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуДанныхМЛ(СчВсего, СчСоздано, ТекстОшибки = "")
	
	тчТаблицаДанныхМЛ	 = ТаблицаДанныхМЛ.Выгрузить();
	
	Если НЕ ПоискСуществующихЗаказов Тогда
		
		флагОшибка = ПроверитьНаОдиночныеПункты(тчТаблицаДанныхМЛ);
		
		Если флагОшибка Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	тчТаблицаДанныхМЛ.Свернуть("Номер");
	МассивОбработанныхМЛ	 = Новый Массив();
	Для Каждого ТекСтрока Из тчТаблицаДанныхМЛ Цикл 
		
		Если МассивОбработанныхМЛ.Найти(ТекСтрока.Номер) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		мМЛ = ТаблицаДанныхМЛ.НайтиСтроки(Новый Структура("Номер", ТекСтрока.Номер));
		МассивОбработанныхЗаказов	 = Новый Массив();
		МассивЗаказов				 = Новый Массив();
			
		Для Каждого ТекСтрокаМЛ Из мМЛ Цикл
			
			Если МассивОбработанныхЗаказов.Найти(ТекСтрокаМЛ.НомерЗаказа) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СчВсегоЗаказов = 0;
			мМЛЗаказы = ТаблицаДанныхМЛ.НайтиСтроки(Новый Структура("Номер, НомерЗаказа", ТекСтрока.Номер, ТекСтрокаМЛ.НомерЗаказа));
			МассивОбработанныхЗаказов.Добавить(ТекСтрокаМЛ.НомерЗаказа);
			
			СоздатьЗаказыНаТСМЛ(МассивЗаказов, мМЛЗаказы, СчВсегоЗаказов, ТекстОшибки);
		КонецЦикла;
		
		Если МассивЗаказов.Количество() Тогда
			МЛ = НайтиСоздатьМЛ(
			мМЛ[0].Номер,
			мМЛ[0].НомерТС,
			мМЛ[0].Модель,
			мМЛ[0].ДатаВвода,
			мМЛ[0].Грузоподъемность,
			мМЛ[0].ОбъемКузова,
			МассивЗаказов,
			мМЛ[0].Водитель,
			Ответственный,
			мМЛ[0].Комментарий,
			СчСоздано
			);
			МассивОбработанныхМЛ.Добавить(ТекСтрока.Номер);
			
			Для Каждого ТекМЛ Из мМЛ Цикл
				ТекМЛ.МЛ = МЛ;
			КонецЦикла;
		КонецЕсли;
		
		СчВсего = СчВсего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаОдиночныеПункты(тчТаблицаДанныхМЛ)
	
	флагОшибка = Ложь;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("тчТаблицаДанныхМЛ", тчТаблицаДанныхМЛ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	тчТаблицаДанныхМЛ.Номер КАК Номер,
	               |	тчТаблицаДанныхМЛ.НомерЗаказа КАК НомерЗаказа
	               |ПОМЕСТИТЬ втТаблицаДанных
	               |ИЗ
	               |	&тчТаблицаДанныхМЛ КАК тчТаблицаДанныхМЛ
	               |ГДЕ
	               |	тчТаблицаДанныхМЛ.Номер <> ""
	               |							И тчТаблицаДанныхМЛ.НомерЗаказа <> ""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТаблицаДанных.Номер КАК Номер,
	               |	втТаблицаДанных.НомерЗаказа КАК НомерЗаказа,
	               |	СУММА(1) КАК Количество
	               |ПОМЕСТИТЬ втПарныеЗаказы
	               |ИЗ
	               |	втТаблицаДанных КАК втТаблицаДанных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втТаблицаДанных.Номер,
	               |	втТаблицаДанных.НомерЗаказа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втПарныеЗаказы.Номер КАК Номер,
	               |	втПарныеЗаказы.НомерЗаказа КАК НомерЗаказа
	               |ИЗ
	               |	втПарныеЗаказы КАК втПарныеЗаказы
	               |ГДЕ
	               |	втПарныеЗаказы.Количество = 1";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой()
		И НЕ ЗначениеЗаполнено(ПунктПогрузкиАдрес) Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстНстр = НСтр("ru='Невозможно создать заказ №'") + Выборка.НомерЗаказа + НСтр("ru=' для Маршрутного листа №'") + Выборка.Номер 
			+ НСтр("ru=' В заказе не указан адрес прибытия.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
		КонецЦикла;
		флагОшибка = Истина;
	Конецесли;
	
	Возврат флагОшибка;
	
КонецФункции

&НаСервере
Процедура СоздатьЗаказыНаТСМЛ(МассивЗаказов, мМЛЗаказы, СчВсего, ТекстОшибки)
	
	Если мМЛЗаказы.Количество() = 2 
		ИЛИ (мМЛЗаказы.Количество() = 1 И ЗначениеЗаполнено(ПунктПогрузкиАдрес))
		ИЛИ ПоискСуществующихЗаказов Тогда
		
		ПунктПогрузки  = Неопределено;
		ПунктРазгрузки = Неопределено;
		
		ТолькоРазгрузка = мМЛЗаказы.Количество() = 1;
		Если ТолькоРазгрузка Тогда
			ПунктРазгрузки = мМЛЗаказы[0];
			
			ОбщееВремяСтоянкиВПунктеВСек = ((ПунктПогрузкиВремяРазгрузки - Цел(ПунктПогрузкиВремяРазгрузки))*6000 + Цел(ПунктПогрузкиВремяРазгрузки)*3600);

			ПунктПогрузки = Новый Структура("ОкноЗаказаС, ОкноЗаказаПо, ДатаИВремяПрибытия, ДатаИВремяУбытия",
			ПунктПогрузкиДатаИВремяПрибытия, ПунктПогрузкиДатаИВремяУбытия,
			ПунктПогрузкиДатаПрибытияС, ПунктПогрузкиДатаПрибытияС + ОбщееВремяСтоянкиВПунктеВСек);
			
		Иначе
			Если СтрНайти(мМЛЗаказы[0].Операция, "погрузка") <> Неопределено Тогда
				ПунктПогрузки  = мМЛЗаказы[0];
				ПунктРазгрузки = мМЛЗаказы[1];
			ИначеЕсли СтрНайти(мМЛЗаказы[1].Операция, "погрузка") <> Неопределено Тогда
				ПунктПогрузки  = мМЛЗаказы[1];
				ПунктРазгрузки = мМЛЗаказы[0];
			Иначе
				ПунктПогрузки  = мМЛЗаказы[0];
				ПунктРазгрузки = мМЛЗаказы[1];
			КонецЕсли;
		КонецЕсли;
		
		// Отправление
		ДатаОтправленияС	 = ТекущаяДата();
		ДатаОтправленияПо	 = ТекущаяДата();
		ВремяОтправленияС	 = Дата(1,1,1,0,0,0);
		ВремяОтправленияПо	 = Дата(1,1,1,23,59,59);

		// Прибытие
		ДоставкаС			 = ТекущаяДата();
		ДоставкаПо			 = ТекущаяДата();
		ВремяДоставкиС		 = Дата(1,1,1,0,0,0);
		ВремяДоставкиПо		 = Дата(1,1,1,23,59,59);
		
		// Погрузка
		Если ЗначениеЗаполнено(ПунктПогрузки.ОкноЗаказаС) Тогда
			ДатаОтправленияС	 = ПунктПогрузки.ОкноЗаказаС;
		ИначеЕсли ЗначениеЗаполнено(ПунктПогрузки.ДатаИВремяПрибытия) Тогда
			ДатаОтправленияС	 = НачалоДня(ПунктПогрузки.ДатаИВремяПрибытия);
			ВремяОтправленияС	 = Дата(1,1,1) + (ПунктПогрузки.ДатаИВремяПрибытия - Началодня(ПунктПогрузки.ДатаИВремяПрибытия));
		ИначеЕсли ЗначениеЗаполнено(ПунктПогрузки.ДатаИВремяУбытия) Тогда
			ДатаОтправленияС	 = НачалоДня(ПунктПогрузки.ДатаИВремяУбытия);
		Конецесли;
		
		Если ЗначениеЗаполнено(ПунктПогрузки.ОкноЗаказаПо) Тогда
			ДатаОтправленияПо = ПунктПогрузки.ОкноЗаказаПо;
		ИначеЕсли ЗначениеЗаполнено(ПунктПогрузки.ДатаИВремяУбытия) Тогда
			ДатаОтправленияПо = НачалоДня(ПунктПогрузки.ДатаИВремяУбытия);
			ВремяОтправленияПо = Дата(1,1,1) + (ПунктПогрузки.ДатаИВремяУбытия - Началодня(ПунктПогрузки.ДатаИВремяУбытия));
		ИначеЕсли ЗначениеЗаполнено(ПунктПогрузки.ДатаИВремяПрибытия) Тогда
			ДатаОтправленияПо	 = НачалоДня(ПунктПогрузки.ДатаИВремяПрибытия);
		Конецесли;
		
		// Разгрузка
		Если ЗначениеЗаполнено(ПунктРазгрузки.ОкноЗаказаС) Тогда
			ДоставкаС			 = ПунктРазгрузки.ОкнЗаказаС;
		ИначеЕсли ЗначениеЗаполнено(ПунктРазгрузки.ДатаИВремяПрибытия) Тогда
			ДоставкаС			 = НачалоДня(ПунктРазгрузки.ДатаИВремяПрибытия);
			ВремяДоставкаС		 = Дата(1,1,1) + (ПунктРазгрузки.ДатаИВремяПрибытия - Началодня(ПунктРазгрузки.ДатаИВремяПрибытия));
		ИначеЕсли ЗначениеЗаполнено(ПунктРазгрузки.ДатаИВремяУбытия) Тогда
			ДоставкаС	 = НачалоДня(ПунктРазгрузки.ДатаИВремяУбытия);
		Конецесли;
		
		Если ЗначениеЗаполнено(ПунктРазгрузки.ОкноЗаказаПо) Тогда
			ДоставкаПо		 = ПунктРазгрузки.ОкноЗаказаПо;
		ИначеЕсли ЗначениеЗаполнено(ПунктРазгрузки.ДатаИВремяУбытия) Тогда
			ДоставкаПо		 = НачалоДня(ПунктРазгрузки.ДатаИВремяУбытия);
			ВремяДоставкиПо	 = Дата(1,1,1) + (ПунктРазгрузки.ДатаИВремяУбытия - Началодня(ПунктРазгрузки.ДатаИВремяУбытия));
		ИначеЕсли ЗначениеЗаполнено(ПунктРазгрузки.ДатаИВремяПрибытия) Тогда
			ДоставкаПо	 = НачалоДня(ПунктРазгрузки.ДатаИВремяПрибытия);
		Конецесли;
		
		// Стоянки
		РазницаВремениСек = ПунктПогрузки.ДатаИВремяУбытия - ПунктПогрузки.ДатаИВремяПрибытия;
		РазницаЧас = Цел(РазницаВремениСек / 3600);
		РазницаМин = Цел((РазницаВремениСек - РазницаЧас * 3600) / 60);
		СтоянкаПогрузка = РазницаЧас + РазницаМин / 100;

		РазницаВремениСек = ПунктРазгрузки.ДатаИВремяУбытия - ПунктРазгрузки.ДатаИВремяПрибытия;
		РазницаЧас = Цел(РазницаВремениСек / 3600);
		РазницаМин = Цел((РазницаВремениСек - РазницаЧас * 3600) / 60);
		СтоянкаРазгрузка = РазницаЧас + РазницаМин / 100;
		
		Если ТолькоРазгрузка Тогда
			ЗаказСсылка = НайтиСоздатьЗаказНаТС(
			ДатаОтправленияС,
			ПунктРазгрузки.Контрагент,
			"",
			Неопределено,
			Неопределено,
			ПунктРазгрузки.Маршрут,
			ПунктПогрузкиАдрес,
			ПунктПогрузкиАдрес.Лат,
			ПунктПогрузкиАдрес.Лон,
			ДатаОтправленияС,
			ВремяОтправленияС,
			ДатаОтправленияПо,
			ВремяОтправленияПо,
			СтоянкаПогрузка,
			ПунктРазгрузки.Адрес,
			ПунктРазгрузки.Лат,
			ПунктРазгрузки.Лон,
			ДоставкаС,
			ВремяДоставкаС,
			ДоставкаПо,
			ВремяДоставкиПо,
			СтоянкаРазгрузка,
			?(ЗначениеЗаполнено(ПунктРазгрузки.НаименованиеГруза),ПунктРазгрузки.НаименованиеГруза, "Груз"),
			ПунктРазгрузки.КоличествоУпаковокЗаказа,
			ПунктРазгрузки.ВесЗаказа, 
			ПунктРазгрузки.ОбъемЗаказа, 
			"", 
			"", 
			"", 
			"",
			0,
			0,
			0,
			0,
			СчВсего,
			ПунктРазгрузки.НомерЗаказа,
			ТекстОшибки
			);
		Иначе
			ЗаказСсылка = НайтиСоздатьЗаказНаТС(
			ДатаОтправленияС,
			ПунктПогрузки.Контрагент,
			"",
			Неопределено,
			Неопределено,
			ПунктПогрузки.Маршрут,
			ПунктПогрузки.Адрес,
			ПунктПогрузки.Лат,
			ПунктПогрузки.Лон,
			ДатаОтправленияС,
			ВремяОтправленияС,
			ДатаОтправленияПо,
			ВремяОтправленияПо,
			СтоянкаПогрузка,
			ПунктРазгрузки.Адрес,
			ПунктРазгрузки.Лат,
			ПунктРазгрузки.Лон,
			ДоставкаС,
			ВремяДоставкаС,
			ДоставкаПо,
			ВремяДоставкиПо,
			СтоянкаРазгрузка,
			?(ЗначениеЗаполнено(ПунктПогрузки.НаименованиеГруза),ПунктПогрузки.НаименованиеГруза, "Груз"),
			ПунктПогрузки.КоличествоУпаковокЗаказа,
			ПунктПогрузки.ВесЗаказа, 
			ПунктПогрузки.ОбъемЗаказа, 
			"", 
			"", 
			"", 
			"",
			0,
			0,
			0,
			0,
			СчВсего,
			ПунктПогрузки.НомерЗаказа,
			ТекстОшибки
			);
				
			ПунктПогрузки.Заказ  = ЗаказСсылка;
		КонецЕсли;
		
		МассивЗаказов.Добавить(Новый Структура("Заказ", ЗаказСсылка));
		ПунктРазгрузки.Заказ = ЗаказСсылка;
		
		СчВсего = СчВсего + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоговорКонтрагентаДляЗаказаНаТС(Знач КонтрагентСсылка)
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда 
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Владелец",             КонтрагентСсылка);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаДоговора);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК СправочникДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО СправочникДоговорыКонтрагентов.Организация = ОсновныеДоговорыКонтрагента.Организация
	|			И СправочникДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
	|			И СправочникДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
	|			И СправочникДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|ГДЕ
	|	СправочникДоговорыКонтрагентов.Организация = &Организация
	|	И СправочникДоговорыКонтрагентов.Владелец = &Владелец
	|	И НЕ СправочникДоговорыКонтрагентов.ЭтоГруппа
	|	И НЕ СправочникДоговорыКонтрагентов.ПометкаУдаления
	|	И СправочникДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",    КонтрагентСсылка);
	ПараметрыЗаполнения.Вставить("Контрагент",  КонтрагентСсылка);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Валюта",      ВалютаДоговора);
	ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "1", Истина);
	
	Возврат ДоговорКонтрагента;
	
КонецФункции // ПолучитьДоговорКонтрагентаДляЗаказаНаТС()

&НаСервере
Функция НайтиСоздатьМаршрут(Маршрут)
	
	Если Не ЗначениеЗаполнено(Маршрут) Тогда 
		Возврат Справочники.уатМаршруты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Маршрут);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМаршруты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМаршруты КАК уатМаршруты
	|ГДЕ
	|	уатМаршруты.Наименование = &Наименование
	|	И НЕ уатМаршруты.ЭтоГруппа
	|	И НЕ уатМаршруты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	МаршрутОбъект = Справочники.уатМаршруты.СоздатьЭлемент();
	МаршрутОбъект.Наименование = Маршрут;
	МаршрутОбъект.Записать();
	
	Возврат МаршрутОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьМаршрут()

&НаСервере
Функция НайтиСоздатьГрузовоеМесто(НаименованиеГруза, КоличествоГруза, ВесГруза, ОбъемГруза, ОписаниеГруза, Высота, Длина, Ширина, Комментарий)
	
	Если Не ЗначениеЗаполнено(НаименованиеГруза) Тогда 
		Возврат Справочники.уатГрузовыеМеста_уэ.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруза);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатГрузовыеМеста_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|ГДЕ
	|	уатГрузовыеМеста_уэ.Наименование = &Наименование
	|	И НЕ уатГрузовыеМеста_уэ.ЭтоГруппа
	|	И НЕ уатГрузовыеМеста_уэ.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГрузовоеМестоОбъект = Справочники.уатГрузовыеМеста_уэ.СоздатьЭлемент();
	ГрузовоеМестоОбъект.Наименование   = НаименованиеГруза;
	ГрузовоеМестоОбъект.ВидУпаковки    = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
	ГрузовоеМестоОбъект.ВесБрутто      = ВесГруза;
	ГрузовоеМестоОбъект.КоличествоМест = ?(КоличествоГруза=0, 1, КоличествоГруза);
	ГрузовоеМестоОбъект.Объем          = ОбъемГруза;
	ГрузовоеМестоОбъект.Валюта         = ВалютаДоговора;
	ГрузовоеМестоОбъект.Длина          = Длина;
	ГрузовоеМестоОбъект.Ширина         = Ширина;
	ГрузовоеМестоОбъект.Высота         = Высота;
	ГрузовоеМестоОбъект.ОписаниеГруза  = ОписаниеГруза;
	ГрузовоеМестоОбъект.Комментарий    = Комментарий;
	
	ГрузовоеМестоОбъект.Записать();
	
	Возврат ГрузовоеМестоОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьГрузовоеМесто()

&НаСервере
Функция НайтиСоздатьНоменклатуру(НаименованиеГруза, Комментарий)
	
	Если Не ЗначениеЗаполнено(НаименованиеГруза) Тогда 
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруза);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Наименование       = НаименованиеГруза;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеГруза;
	НоменклатураОбъект.ЕдиницаИзмерения   = ЕдиницаИзмеренияГрузов;
	НоменклатураОбъект.ВидНоменклатуры    = Справочники.ВидыНоменклатуры.Товар;
	НоменклатураОбъект.Комментарий        = Комментарий;
	
	НоменклатураОбъект.Записать();
	
	НоменклатураОбъект.ЕдиницаХраненияОстатков = НайтиСоздатьЕдиницуХраненияОстатков(НоменклатураОбъект.Ссылка);
	
	НоменклатураОбъект.Записать();
	
	Возврат НоменклатураОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьНоменклатуру()

&НаСервере
Функция НайтиСоздатьЕдиницуХраненияОстатков(НоменклатураСсылка)
	
	Если Не ЗначениеЗаполнено(НоменклатураСсылка) Тогда 
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",   ЕдиницаИзмеренияГрузов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &НоменклатураСсылка
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаИзмерения
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ЕдиницаХраненияОстатковОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаХраненияОстатковОбъект.Владелец                = НоменклатураСсылка;
	ЕдиницаХраненияОстатковОбъект.Наименование            = ЕдиницаИзмеренияГрузов.Наименование;
	ЕдиницаХраненияОстатковОбъект.ЕдиницаПоКлассификатору = ЕдиницаИзмеренияГрузов;
	ЕдиницаХраненияОстатковОбъект.Коэффициент             = 1;
	
	ЕдиницаХраненияОстатковОбъект.Записать();
	
	Возврат ЕдиницаХраненияОстатковОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьЕдиницуХраненияОстатков()

&НаСервере
Функция НайтиСоздатьЗаказНаТС(ДатаДокумента, Контрагент, Подразделение, Грузоотправитель = Неопределено, Грузополучатель = Неопределено, Маршрут = Неопределено,
		АдресОтправления, ЛатОтправления, ЛонОтправления, ДатаОтправленияС, ВремяОтправленияС, 
		ДатаОтправленияПо, ВремяОтправленияПо, ВремяПогрузки, АдресПрибытия, ЛатПрибытия, ЛонПрибытия,
		ДатаПрибытияС, ВремяПрибытияС, ДатаПрибытияПо, ВремяПрибытияПо, ВремяРазгрузки, НаименованиеГруза, 
		КоличествоГруза, ВесГруза, ОбъемГруза, ВходНомер, ВходДата, ОписаниеГруза, Комментарий, ГабаритыШирина, ГабаритыВысота, ГабаритыДлина,
		СчСоздано, СчВсего, Номер = Неопределено, ТекстОшибки = "")
		
	Если ЗначениеЗаполнено(Номер) И ПоискСуществующихЗаказов Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Номер", Номер);
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|ГДЕ
		|	НЕ уатЗаказГрузоотправителя.ПометкаУдаления
		|	И уатЗаказГрузоотправителя.Проведен
		|	И уатЗаказГрузоотправителя.НомерПоУчетуЗаказчика = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатЗаказГрузоотправителя.Дата УБЫВ";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СчСоздано = СчСоздано + 1;
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПодразделениеСсылка = НайтиСоздатьПодразделениеОрганизации(Подразделение, Организация);
	Если ЗначениеЗаполнено(ПодразделениеСсылка)
		И НЕ ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентСсылка = ПодразделениеСсылка;
	Иначе
		КонтрагентСсылка = НайтиСоздатьКонтрагента(Контрагент);
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			Если ЗначениеЗаполнено(КонтрагентЗаказ) Тогда
				КонтрагентСсылка = КонтрагентЗаказ;
				Контрагент       = КонтрагентЗаказ;
			Иначе
				НаименованиеНовогоКонтрагента = Нстр("ru = 'Контрагент'") + " " + (СчВсего + 1);
				КонтрагентСсылка = НайтиСоздатьКонтрагента(НаименованиеНовогоКонтрагента);
				Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
					
					КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
					КонтрагентОбъект.Наименование       = НаименованиеНовогоКонтрагента;
					КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;
					КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо; 
					КонтрагентОбъект.Записать();
					
					КонтрагентСсылка = КонтрагентОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = КонтрагентСсылка;
	КонецЕсли;
	
	ГрузоотправительСсылка = НайтиСоздатьКонтрагента(Грузоотправитель);
	ГрузополучательСсылка  = НайтиСоздатьКонтрагента(Грузополучатель);
	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОтправленияС) Тогда
		ДатаОтправленияС = НачалоДня(ДатаДокумента);
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ВремяОтправленияС) Тогда
		ВремяОтправленияС = Дата(1,1,1,0,0,0);
	Конецесли;

	ОтправлениеС           = ДатаОтправленияС + (ВремяОтправленияС - '00010101');
	
	Если НЕ ЗначениеЗаполнено(АдресОтправления) Тогда
		Если ЗначениеЗаполнено(АдресОтправленияЗаказ) Тогда
			АдресОтправления       = АдресОтправленияЗаказ;
			АдресОтправленияСсылка = АдресОтправленияЗаказ;
		Иначе
			мАдресОтправления       = Нстр("ru='Пункт отправления';en='Point of departure'") + " " + (СчВсего + 1);
			АдресОтправленияСсылка = НайтиСоздатьПунктНазначения(, АдресОтправления, ЛатОтправления, ЛонОтправления, ТекстОшибки, мАдресОтправления);
		КонецЕсли;
	Иначе
		АдресОтправленияСсылка = НайтиСоздатьПунктНазначения(, АдресОтправления, ЛатОтправления, ЛонОтправления, ТекстОшибки);
	КонецЕсли;
	
	мАдресПрибытия = "";
	Если НЕ ЗначениеЗаполнено(АдресПрибытия) Тогда
		мАдресПрибытия = Нстр("ru='Пункт прибытия';en='Point of arrival'") + " " + (СчВсего + 1);
	КонецЕсли;
	АдресНазначенияСсылка  = НайтиСоздатьПунктНазначения(, АдресПрибытия, ЛатПрибытия, ЛонПрибытия, ТекстОшибки, мАдресПрибытия);
	
	ДокументОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
	Если ЗначениеЗаполнено(Номер) Тогда
		ДокументОбъект.НомерПоУчетуЗаказчика = Номер;
	КонецЕсли;
	ДокументОбъект.Дата                    = ДатаДокумента;
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Значение поля ""Дата"" не может быть пустой датой'"));
		Возврат ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ДокументОбъект.Организация             = Организация;
	ДокументОбъект.Подразделение           = ПодразделениеСсылка;
	ДокументОбъект.Ответственный           = Ответственный;
	Если Не ВариантПоставкиСТД Тогда
		ДокументОбъект.ДетализацияЗакрытия = ДетализацияЗаказа;
		ДокументОбъект.ВидДоставки         = ВидДоставки;
		ДокументОбъект.ВидПеревозки        = ВидПеревозки; 
		ДокументОбъект.ВидОперации         = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
		ДокументОбъект.Маршрут             = НайтиСоздатьМаршрут(Маршрут);
	КонецЕсли;
	ДокументОбъект.ВалютаДокумента         = ВалютаДоговора;
	ДокументОбъект.ВалютаТоваров           = ВалютаДоговора;
	ДокументОбъект.ДатаКурса               = ДатаДокумента;
	СтруктураКурса                         = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДоговора, ДатаДокумента);
	ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурса.Курс;
	ДокументОбъект.Контрагент              = КонтрагентСсылка;
	Если ТипЗнч(КонтрагентСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДокументОбъект.ДоговорКонтрагента  = ПолучитьДоговорКонтрагентаДляЗаказаНаТС(КонтрагентСсылка);
	КонецЕсли;
	ДокументОбъект.Грузоотправитель        = ГрузоотправительСсылка;
	ДокументОбъект.Грузополучатель         = ГрузополучательСсылка;
	ДокументОбъект.АдресОтправления        = АдресОтправленияСсылка;
	ДокументОбъект.ОтправлениеС            = ОтправлениеС;
	
	Если НЕ ЗначениеЗаполнено(ДатаОтправленияПо) Тогда
		ДатаОтправленияПо = НачалоДня(ДатаДокумента);
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ВремяОтправленияПо) 
		И ДатаОтправленияПо = ДатаОтправленияС Тогда
		ВремяОтправленияПо = Дата(1,1,1,23,59,59);
	Конецесли;
	ДокументОбъект.ОтправлениеПо           = ?(ЗначениеЗаполнено(ДатаОтправленияПо), ДатаОтправленияПо, ДатаОтправленияС) + (ВремяОтправленияПо - '00010101');
	ДокументОбъект.СтоянкаПунктОтправления = ВремяПогрузки;
	ДокументОбъект.АдресНазначения         = АдресНазначенияСсылка;
	
	Если НЕ ЗначениеЗаполнено(ДатаПрибытияС) Тогда
		ДатаПрибытияС = НачалоДня(ДатаДокумента);
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ВремяПрибытияС) Тогда
		ВремяПрибытияС = Дата(1,1,1,0,0,0);
	Конецесли;
	ДокументОбъект.ДоставкаС               = ДатаПрибытияС + (ВремяПрибытияС - '00010101');
	
	Если НЕ ЗначениеЗаполнено(ДатаПрибытияПо) Тогда
		ДатаПрибытияПо = НачалоДня(ДатаДокумента);
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ВремяПрибытияПо) 
		И ДатаПрибытияС = ДатаПрибытияПо Тогда
		ВремяПрибытияПо = Дата(1,1,1,23,59,59);
	Конецесли;
	
	ДокументОбъект.ДоставкаПо              = ?(ЗначениеЗаполнено(ДатаПрибытияПо), ДатаПрибытияПо, ДатаПрибытияС) + (ВремяПрибытияПо - '00010101');
	ДокументОбъект.СтоянкаПунктНазначения  = ВремяРазгрузки;
	ДокументОбъект.ДатаВходящегоДокумента  = ВходДата;
	ДокументОбъект.НомерПоУчетуЗаказчика   = ВходНомер;
	ДокументОбъект.Комментарий             = Комментарий;
	
	Если НЕ ЗначениеЗаполнено(ОбъемГруза)Тогда
		ОбъемГруза = ГабаритыШирина * ГабаритыДлина * ГабаритыВысота;
	КонецЕсли;
	
	Если ВариантПоставкиСТД
		ИЛИ ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
		// новый товар
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		НоваяСтрока.Номенклатура     = НайтиСоздатьНоменклатуру(НаименованиеГруза, Комментарий);
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Количество       = КоличествоГруза;
		НоваяСтрока.Комментарий      = НоваяСтрока.Номенклатура.Комментарий;
		НоваяСтрока.ВесБрутто        = ВесГруза;
		НоваяСтрока.Объем            = ОбъемГруза;
		
		Если НЕ ВариантПоставкиСТД Тогда
			НоваяСтрока.СтавкаНДС        = НоваяСтрока.Номенклатура.СтавкаНДС;
		КонецЕсли;
	ИначеЕсли ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
		НоваяСтрока = ДокументОбъект.ГрузовойСостав.Добавить();
		НоваяСтрока.ВидУпаковки    = Справочники.уатВидыУпаковки_уэ.ОсновнойВидУпаковки;
		НоваяСтрока.ВесБрутто      = ВесГруза;
		НоваяСтрока.Объем          = ОбъемГруза;
		НоваяСтрока.КоличествоМест = КоличествоГруза;
		НоваяСтрока.ОписаниеГруза  = ОписаниеГруза;
		НоваяСтрока.Высота         = ГабаритыВысота;
		НоваяСтрока.Длина          = ГабаритыДлина;
		НоваяСтрока.Ширина         = ГабаритыШирина;
	Иначе 
		НоваяСтрока = ДокументОбъект.ГрузовойСостав.Добавить();
		НоваяСтрока.ГрузовоеМесто  = НайтиСоздатьГрузовоеМесто(НаименованиеГруза, КоличествоГруза, ВесГруза, ОбъемГруза, ОписаниеГруза, 
		ГабаритыВысота, ГабаритыДлина, ГабаритыШирина, Комментарий);
		
		СтруктураОтвета  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.ГрузовоеМесто,
			"ВидУпаковки, ВесБрутто, Объем, КоличествоМест, Высота, Длина, Ширина, Стоимость, ОписаниеГруза");

		НоваяСтрока.ВидУпаковки    = СтруктураОтвета.ВидУпаковки;
		НоваяСтрока.ВесБрутто      = ?(Не ЗначениеЗаполнено(ВесГруза), СтруктураОтвета.ВесБрутто, ВесГруза);
		НоваяСтрока.Объем          = ?(Не ЗначениеЗаполнено(ОбъемГруза), СтруктураОтвета.Объем, ОбъемГруза);
		НоваяСтрока.КоличествоМест = ?(Не ЗначениеЗаполнено(КоличествоГруза), СтруктураОтвета.КоличествоМест, КоличествоГруза);
		НоваяСтрока.Высота         = ?(Не ЗначениеЗаполнено(ГабаритыВысота), СтруктураОтвета.Высота, ГабаритыВысота);
		НоваяСтрока.Длина          = ?(Не ЗначениеЗаполнено(ГабаритыДлина), СтруктураОтвета.Длина, ГабаритыДлина);
		НоваяСтрока.Ширина         = ?(Не ЗначениеЗаполнено(ГабаритыШирина), СтруктураОтвета.Ширина, ГабаритыШирина);
		НоваяСтрока.Стоимость      = СтруктураОтвета.Стоимость;
		НоваяСтрока.ОписаниеГруза  = ?(Не ЗначениеЗаполнено(ОписаниеГруза), СтруктураОтвета.ОписаниеГруза, ОписаниеГруза);
	КонецЕсли;
	
	Если НЕ ВариантПоставкиСТД Тогда
		ДокументОбъект.РассчитатьИтоговыеПоказатели();
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СчСоздано = СчСоздано + 1;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьЗаказНаТС()

&НаСервере
Функция НайтиСоздатьМЛ(Номер, НомерТС, Модель, ДатаВвода, Грузоподъемность, ОбъемКузова, МассивЗаказов, Водитель,
		Ответственный, Комментарий, СчСоздано)
		
	КоличествоСтрок = МассивЗаказов.Количество();
	
	мГрузоподъемность = ?(ЗначениеЗаполнено(Грузоподъемность), Грузоподъемность, 0);
	Вместительность   = ?(ЗначениеЗаполнено(ОбъемКузова), ОбъемКузова, 0);;
	
	МодельТС  = ?(ЗначениеЗаполнено(Модель), Модель, "МодельТС");
	мДатаВвода = ?(ЗначениеЗаполнено(ДатаВвода), ДатаВвода, Дата("20180101000000")); 
	
	ТССсылка  = НайтиСоздатьТС(НомерТС, "", "", МодельТС, Организация,"", "", "","",
		мДатаВвода, "", Перечисления.уатВидыМоделейТС.Автотранспорт, "", "", "", "", "", "", "", "", "", "", "", "", "", "","", мГрузоподъемность, Вместительность, 0, ТСМЛ);
	
	Если НЕ ВариантПоставкиСТД
			И ТССсылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда 
		НайтиСоздатьВводВЭксплуатациюТС(ТССсылка, мДатаВвода);
	КонецЕсли;

	ВодительСсылка = НайтиСоздатьВодителя(
			"", 
			Водитель, 
			"", 
			"", 
			"", 
			"", 
			"",
			0,
			ВодительМЛ
		);
	
		
	ДокументОбъект = Документы.уатМаршрутныйЛист.СоздатьДокумент();
	Заказ          = МассивЗаказов[0].Заказ;
	ДокументОбъект.Дата                 = Заказ.Дата;
	ДокументОбъект.ВидОперации          = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
	ДокументОбъект.Организация          = Заказ.Организация;
	
	Если НЕ ВариантПоставкиСТД Тогда
		ДокументОбъект.ПересчетВремени      = 1;
		ДокументОбъект.ВидПеревозки              = Заказ.ВидПеревозки;
		ДокументОбъект.НаправлениеПеревозки      = Заказ.НаправлениеПеревозки;
		ДокументОбъект.Маршрут                   = Заказ.Маршрут;
		ДокументОбъект.ПринадлежностьПеревозки	 = ТССсылка.ПринадлежностьТС;
		ДокументОбъект.Рейс						 = Номер;
		Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(ДокументОбъект);
		Документы.уатМаршрутныйЛист.УстановитьФлагРазрешенаВыгрузкаВWMS(ДокументОбъект);
	КонецЕсли;
	ДокументОбъект.Подразделение        = Заказ.Подразделение;
	ДокументОбъект.ОбъектСтроительства  = Заказ.ОбъектСтроительства;
	ДокументОбъект.Ответственный		= Ответственный;
	ДокументОбъект.Комментарий			= Комментарий;
	ДокументОбъект.ТС					= ТССсылка;
	ДокументОбъект.Водитель1				 = ?(ТССсылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное, ВодительСсылка, НайтиСоздатьФизЛицо(Водитель, Водитель, "", "", "", ""));
	
	Для каждого ТекСтрока Из МассивЗаказов Цикл
		ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(ДокументОбъект, ТекСтрока.Заказ);
	КонецЦикла;

	ПересчитатьПлановоеВремя(ДокументОбъект, Номер);
		
	КолвоСтрок    = ДокументОбъект.Заказы.Количество();
	СчетчикСтрок  = 1;
	Для Счетчик = 1 По КолвоСтрок Цикл
		ТекСтрока = ДокументОбъект.Заказы[Счетчик-1];
		Ожидание  = 0;
		Если НЕ ВариантПоставкиСТД И ЗначениеЗаполнено(ТекСтрока.Ожидание) Тогда
			Ожидание = ТекСтрока.Ожидание;
			Для СчетчикВерхний = СчетчикСтрок По Счетчик Цикл
				ТекСтрокаВерхняя = ДокументОбъект.Заказы[СчетчикВерхний - 1];
				ТекСтрокаВерхняя.Время = Ожидание;
			КонецЦикла;
			СчетчикСтрок = Счетчик;
			ТекСтрока.Ожидание = 0;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьМаршрутныеПоказателиСервер(ДокументОбъект);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СчСоздано = СчСоздано + 1;
	ИСключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(МаршрутныйЛист, ЗаказНаТС)
	
	Если НЕ ВариантПоставкиСТД
		И (ЗначениеЗаполнено(МаршрутныйЛист.ЭтапМаршрутизации) И МаршрутныйЛист.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = МаршрутныйЛист.ТС.ТипТС;
	КонецЕсли;
	
	Если НЕ ВариантПоставкиСТД Тогда
		МодульЗащищенныеФункцииСервер_уэ   = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_уэ");
	КонецЕсли;
	
	Если ВариантПоставкиСТД
		ИЛИ ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из ЗаказНаТС.Товары Цикл
			НовСтрока = МаршрутныйЛист.Заказы.Добавить();
			НовСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
			НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
			НовСтрока.Пункт                    = ЗаказНаТС.АдресОтправления;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество               = ТекСтрока.Количество;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                    = ТекСтрока.Объем;
			НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ЗаказНаТС.Товары Цикл
			НовСтрока = МаршрутныйЛист.Заказы.Добавить();
			НовСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
			НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
			НовСтрока.Пункт                    = ЗаказНаТС.АдресНазначения;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество               = ТекСтрока.Количество;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                    = ТекСтрока.Объем;
			НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
		КонецЦикла;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		
		Для Каждого ТекСтрока Из ЗаказНаТС.ГрузовойСостав Цикл
			НовСтрока = МаршрутныйЛист.Заказы.Добавить();
			НовСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
			НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
			НовСтрока.Пункт                    = ЗаказНаТС.АдресОтправления;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтрока.Номенклатура             = ТекСтрока.ГрузовоеМесто;
			НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ВидУпаковки;
			НовСтрока.Количество               = ТекСтрока.КоличествоМест;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ВидУпаковки;
			НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                    = ТекСтрока.Объем;
			НовСтрока.КоличествоМест           = ?(ТекСтрока.ВидУпаковки.Коэффициент = 0, 0, ТекСтрока.КоличествоМест / ТекСтрока.ВидУпаковки.Коэффициент);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ЗаказНаТС.ГрузовойСостав Цикл
			НовСтрока = МаршрутныйЛист.Заказы.Добавить();
			НовСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
			НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
			НовСтрока.Пункт                    = ЗаказНаТС.АдресНазначения;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтрока.Номенклатура             = ТекСтрока.ГрузовоеМесто;
			НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ВидУпаковки;
			НовСтрока.Количество               = ТекСтрока.КоличествоМест;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ВидУпаковки;
			НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                    = ТекСтрока.Объем;
			НовСтрока.КоличествоМест           = ?(ТекСтрока.ВидУпаковки.Коэффициент = 0 , 0, ТекСтрока.КоличествоМест / ТекСтрока.ВидУпаковки.Коэффициент);
		КонецЦикла;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
		НовСтрока = МаршрутныйЛист.Заказы.Добавить();
		НовСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
		НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
		НовСтрока.Пункт                    = ЗаказНаТС.АдресОтправления;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСтрока.Количество               = 1;
		НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;  
		НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
		НовСтрока.ВесБрутто                = ЗаказНаТС.ВесБрутто;
		НовСтрока.Объем                    = ЗаказНаТС.Объем;
		НовСтрока.КоличествоМест           = ЗаказНаТС.КоличествоМест;
		
		НовСтрока = МаршрутныйЛист.Заказы.Добавить();
		НовСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
		НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
		НовСтрока.Пункт                    = ЗаказНаТС.АдресНазначения;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСтрока.Количество               = 1;
		НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;  
		НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
		НовСтрока.ВесБрутто                = ЗаказНаТС.ВесБрутто;
		НовСтрока.Объем                    = ЗаказНаТС.Объем;
		НовСтрока.КоличествоМест           = ЗаказНаТС.КоличествоМест;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьМаршрутныеПоказателиСервер(ДокументОбъект)
	
	ДокументОбъект.Расстояние = 0;
	ДокументОбъект.ПробегСГрузом = 0;
	ДокументОбъект.ПробегПорожний = 0;
	ДокументОбъект.ВремяВПути = 0;
	ОбщееВремяСтоянок = 0;
	
	// Таблица для определения порожнего пробега
	// считаем что машина идет порожняком, если таблица пуста
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
			ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		// обновляем таблицу грузов для расчета порожнего пробега
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка)
			И ТекСтрока.Количество > 0 Тогда
			
			// добавляем строку груза
			НоваяСтрока = тблГрузы.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Количество * ?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка, 1, -1);
			тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
			
			// теперь нужно удалить строки с количеством = 0
			мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
				тблГрузы.Удалить(ТекСтрокаГруз);
			КонецЦикла;
		КонецЕсли;
		
		// время стоянки, указываемое в заказах, прибавляется по каждому заказу
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.Стоянка);
		КонецЕсли;
		
		// время в пути, время стоянки
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			// время стоянки, указываемое в пунктах, прибавляется для каждого пункта
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.СтоянкаИзПункта);
			
			ДокументОбъект.ВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(ДокументОбъект.ВремяВПути, ТекСтрока.Время);
			
			ПредПункт  = ТекСтрока.Пункт;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом
		// расчет пункта в следующей строке
		СледПункт = ?(ТекСтрока.НомерСтроки < ДокументОбъект.Заказы.Количество(), ДокументОбъект.Заказы[ТекСтрока.НомерСтроки].Пункт, Неопределено);
		Если СледПункт <> ТекСтрока.Пункт Тогда
			Если тблГрузы.Количество() = 0 Тогда
				ДокументОбъект.ПробегПорожний = ДокументОбъект.ПробегПорожний + ТекСтрока.Расстояние;
			Иначе
				ДокументОбъект.ПробегСГрузом = ДокументОбъект.ПробегСГрузом + ТекСтрока.Расстояние;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// пробег общий
	ДокументОбъект.Расстояние = ДокументОбъект.ПробегПорожний + ДокументОбъект.ПробегСГрузом;
КонецПроцедуры

&НаКлиенте
Процедура ДесериализоватьКоординаты(Знач СтрокаКоординат, Широта, Долгота)
	
	Если Не ЗначениеЗаполнено(СтрокаКоординат) Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаКоординат = СтрЗаменить(СтрокаКоординат, " ", "");
	СтрокиКоординат = СтрЗаменить(СтрокаКоординат, ",", Символы.ПС);
	
	Если Не СтрЧислоСтрок(СтрокиКоординат) = 2 Тогда 
		Возврат;
	КонецЕсли;
	
	ТекЛат = 0;
	ТекЛон = 0;
	
	Попытка
		ТекЛат = Число(СтрПолучитьСтроку(СтрокиКоординат, 1));
		ТекЛон = Число(СтрПолучитьСтроку(СтрокиКоординат, 2));
	Исключение
		Возврат;
	КонецПопытки;
	
	Широта  = ТекЛат;
	Долгота = ТекЛон;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискСуществующихЗаказовПриИзменении(Элемент)
	Если ПоискСуществующихЗаказов Тогда
		Элементы.ТаблицаДанныхМЛАдрес.Заголовок				 = Нстр("ru='Адрес';en='Address'");
		Элементы.ТаблицаДанныхМЛОперация.Заголовок			 = Нстр("ru='Операция';en='Transaction'");
		Элементы.ТаблицаДанныхМЛДатаИВремяПрибытия.Заголовок = Нстр("ru = 'Дата и время прибытия'");
		Элементы.ТаблицаДанныхМЛДатаИВремяУбытия.Заголовок	 = Нстр("ru = 'Дата и время убытия'");
	Иначе
		Элементы.ТаблицаДанныхМЛАдрес.Заголовок				 = Нстр("ru='Адрес*';en='Departure city'");
		Элементы.ТаблицаДанныхМЛОперация.Заголовок			 = Нстр("ru='Операция*';en='Departure date from'");
		Элементы.ТаблицаДанныхМЛДатаИВремяПрибытия.Заголовок = Нстр("ru='Дата и время прибытия*';en='Loading time'");
		Элементы.ТаблицаДанныхМЛДатаИВремяУбытия.Заголовок	 = Нстр("ru='Дата и время убытия*';en='City of arrival'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПунктПогрузкиАдресПриИзмененииСервер()
	Если ТипЗнч(ПунктПогрузкиАдрес) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПунктПогрузкиОбщаяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПунктПогрузкиВремяРазгрузки, ПунктПогрузкиАдрес.ТипПункта.СтоянкаДоп);
	Иначе 
		ПунктПогрузкиОбщаяСтоянка = ПунктПогрузкиВремяРазгрузки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВыбывшие()
	Если ОтобразитьВыбывшие Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДанныеТС.Отбор, "ДатаВыбытия", '00010101',,, Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДанныеТС.Отбор, "ДатаВыбытия", '00010101',,, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСОтмеченнымиДанными()
	
	ТекущаяСтраница = Элементы.СтраницыЗагрузок.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаТСВыгрузка Тогда
		Возврат мОтмеченныеТС;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаказыВыгрузка Тогда
		Возврат мОтмеченныеЗаказы;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаМЛВыгрузка Тогда
		Возврат мОтмеченныеМЛ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СписокПанелиВыбораОбъектовВыбор(Элемент, СтандартнаяОбработка, ИмяТекСписка, мОтмеченныеСтроки)
	
	ТекЭлементДанные = Элементы[ИмяТекСписка + "ФлагВыбора"];
	
	Если Элемент.ТекущийЭлемент = ТекЭлементДанные Тогда
		СтандартнаяОбработка = Ложь;
		Если Не Элемент.ТекущиеДанные = Неопределено
			И ТипЗнч(Элемент.ТекущиеДанные) = Тип("СправочникСсылка.уатТС")
			И Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		Если мОтмеченныеСтроки.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			мОтмеченныеСтроки.Добавить(Элемент.ТекущаяСтрока);
		ИначеЕсли Элемент.ТекущийЭлемент = ТекЭлементДанные Тогда 
			мОтмеченныеСтроки.Удалить(мОтмеченныеСтроки.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		ЭтотОбъект[ИмяТекСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеСтроки);
		Элементы[ИмяТекСписка].Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриПолученииДанныхНаСервереСпискаПанелиВыбораОбъектов(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("мОтмеченныеСтроки") Тогда
		мОтмеченныеСтроки = Настройки.ДополнительныеСвойства.мОтмеченныеСтроки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(мОтмеченныеСтроки) Тогда
		мОтмеченныеСтроки = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл 
		Если мОтмеченныеСтроки.Найти(ТекСтрока.Ключ) <> Неопределено Тогда 
			ТекСтрока.Значение.Данные.ФлагВыбора = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеСтрокиЗавершение(ИмяСписка, мОтмеченныеСтроки)
	
	мОтмеченныеСтроки.Очистить();
	
	Для Каждого ТекСтрока Из ПолучитьТекущийКомпоновщик(ИмяСписка) Цикл 
		мОтмеченныеСтроки.Добавить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеСтроки);
	Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтрокахЗавершение(ИмяСписка, мОтмеченныеСтроки)
	
	Если мОтмеченныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ПолучитьТекущийКомпоновщик(ИмяСписка) Цикл 
		ИндексЭлемента = мОтмеченныеСтроки.Найти(ТекСтрока.Ссылка);
		Если ИндексЭлемента <> Неопределено Тогда
			мОтмеченныеСтроки.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мОтмеченныеСтроки", мОтмеченныеСтроки);
	Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийКомпоновщик(ИмяСписка)
	
	мЭлементы = Новый Массив();
	
	Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если Настройки.Структура.Количество() = 0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Родитель = "";
	тПроцессорВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Если Элементы[ИмяСписка].ТекущийРодитель <> Неопределено Тогда
		Родитель = Элементы[ИмяСписка].ТекущийРодитель;
		тПроцессорВывода = тПроцессорВывода.НайтиСтроки(Новый Структура("Родитель", Родитель));
	КОнецЕсли;
	
	Для Каждого ТекЭлемент Из тПроцессорВывода Цикл
		
		Если ТипЗнч(ТекЭлемент) = Тип("СправочникСсылка.уатТС") И ТекЭлемент.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;

		мТекЭлемент = ТекЭлемент.Ссылка;
		
		ДанныеЭлемент = Новый Структура();
		ДанныеЭлемент.Вставить("Ссылка", мТекЭлемент);
		мЭлементы.Добавить(ДанныеЭлемент);
	КонецЦикла;
	
	
	Возврат мЭлементы;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТС(Команда)
	мОтмеченныеМоделиТС = Новый Массив();
	СохранитьШаблонФайла("ДанныеТС");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаказы(Команда)
	СохранитьШаблонФайла("ДанныеЗаказы");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМЛ(Команда)
	СохранитьШаблонФайла("ДанныеМЛ");
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПлановоеВремя(Объект, НомерМЛ)
	
	ПредПункт = Неопределено;
	Итератор  = 0;
	СоответствиеПунктов = Новый Соответствие();
	ВремяПоЗаказам = ПолучитьВремяОтправленияДоставкиПоЗаказам(Объект, НомерМЛ);
	
	ТаблицаЗаказов = Объект.Заказы.Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		ТекВремяПоЗаказу = ВремяПоЗаказам.Получить(ТекСтрока.ЗаказГрузоотправителя);
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекСтрока.ПрибытиеПлан = ТекВремяПоЗаказу.ОтправлениеС;
			ТекСтрока.УбытиеПлан   = ТекВремяПоЗаказу.ОтправлениеПо;
		Иначе
			ТекСтрока.ПрибытиеПлан = ТекВремяПоЗаказу.ДоставкаС;
			ТекСтрока.УбытиеПлан   = ТекВремяПоЗаказу.ДоставкаПо;
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗаказов.Сортировать("ПрибытиеПлан, ТипТочкиМаршрута");

	ПредПункт			 = Неопределено;
	ПредПунктСтрока		 = Неопределено;
	ПерваяСтрокаПункта	 = Неопределено;
	ТекУбытиеПлан		 = Неопределено;
	ТекПрибытиеПлан 	 = Неопределено;
	ПредУбытиеПлан		 = Неопределено;
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если ПерваяСтрокаПункта <> Неопределено Тогда
			РазницаВремениСек = ТекУбытиеПлан - ТекПрибытиеПлан;
			РазницаЧас = Цел(РазницаВремениСек / 3600);
			РазницаМин = Цел((РазницаВремениСек - РазницаЧас * 3600) / 60);
			Стоянка = РазницаЧас + РазницаМин / 100;
			
			ПерваяСтрокаПункта.Стоянка	 = Стоянка;
			
			Если ПредПунктСтрока <> Неопределено Тогда
				РазницаВремени	 = ПерваяСтрокаПункта.ПрибытиеПлан - ПредУбытиеПлан;
				РазницаЧас = Цел(РазницаВремени / 3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас * 3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин / 100;
				
				ПредПунктСтрока.Время = РазницаВремени;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Пункт = ПредПункт Тогда
			ТекУбытиеПлан   = Макс(ТекУбытиеПлан, ТекСтрока.УбытиеПлан);
			ТекПрибытиеПлан = Мин(ТекПрибытиеПлан, ТекСтрока.ПрибытиеПлан);
		Иначе
			ПредУбытиеПлан		 = ТекУбытиеПлан;
			ТекУбытиеПлан		 = ТекСтрока.УбытиеПлан;
			ТекПрибытиеПлан		 = ТекСтрока.ПрибытиеПлан;
			ПредПунктСтрока		 = ПерваяСтрокаПункта;
			ПерваяСтрокаПункта	 = ТекСтрока;
			
			Если ПредПунктСтрока <> Неопределено 
				И НЕ ЗначениеЗаполнено(Объект.ДатаИВремяОтправленияПлан) Тогда
				Объект.ДатаИВремяОтправленияПлан = ПредУбытиеПлан;
			КонецЕсли;
		КонецЕсли;
		
		ПредПункт      = ТекСтрока.Пункт;
	КонецЦикла;
	
	Если ПерваяСтрокаПункта <> Неопределено Тогда
		РазницаВремениСек = ТекУбытиеПлан - ТекПрибытиеПлан;
		РазницаЧас = Цел(РазницаВремениСек / 3600);
		РазницаМин = Цел((РазницаВремениСек - РазницаЧас * 3600) / 60);
		Стоянка = РазницаЧас + РазницаМин / 100;
		
		ПерваяСтрокаПункта.Стоянка	 = Стоянка;
		
		Если ПредПунктСтрока <> Неопределено Тогда
			РазницаВремени	 = ПерваяСтрокаПункта.ПрибытиеПлан - ПредУбытиеПлан;
			РазницаЧас = Цел(РазницаВремени / 3600);
			РазницаМин = Цел((РазницаВремени - РазницаЧас * 3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин / 100;
			
			ПредПунктСтрока.Время = РазницаВремени;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Заказы.Очистить();
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		НоваяСтрока = Объект.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦИкла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВремяОтправленияДоставкиПоЗаказам(Объект, НомерМЛ)
	
	Результат   = Новый Соответствие;
	ТекДанныеМЛ = ТаблицаДанныхМЛ.НайтиСтроки(Новый Структура("Номер", НомерМЛ));
	Для Каждого ТекЗаказ Из ТекДанныеМЛ Цикл 
		
		ТипПунктаРазгрузка = СтрНайти(НРег(ТекЗаказ.Операция), "разгрузка") <> 0;
		
		ТекДанныеЗаказа = Результат.Получить(ТекЗаказ.Заказ);
		Если ТекДанныеЗаказа = Неопределено Тогда
			СтрокаРезультата = Новый Структура("ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо");
			Если ТипПунктаРазгрузка Тогда
				СтрокаРезультата.ДоставкаС     = ТекЗаказ.ДатаИВремяПрибытия;
				СтрокаРезультата.ДоставкаПо    = ТекЗаказ.ДатаИВремяУбытия;
				СтрокаРезультата.ОтправлениеС  = ПунктПогрузкиДатаПрибытияС;
				
				ОбщееВремяСтоянкиВПунктеВСек = ((ПунктПогрузкиВремяРазгрузки - Цел(ПунктПогрузкиВремяРазгрузки))*6000 + Цел(ПунктПогрузкиВремяРазгрузки)*3600);
				СтрокаРезультата.ОтправлениеПо = ПунктПогрузкиДатаПрибытияС + ОбщееВремяСтоянкиВПунктеВСек;
			Иначе
				СтрокаРезультата.ОтправлениеС  = ТекЗаказ.ДатаИВремяПрибытия;
				СтрокаРезультата.ОтправлениеПо = ТекЗаказ.ДатаИВремяУбытия;
			КонецЕсли;
		
			Результат.Вставить(ТекЗаказ.Заказ, СтрокаРезультата);
		Иначе
			Если ТипПунктаРазгрузка Тогда
				ТекДанныеЗаказа.ДоставкаС  = ТекЗаказ.ДатаИВремяПрибытия;
				ТекДанныеЗаказа.ДоставкаПо = ТекЗаказ.ДатаИВремяУбытия;
			Иначе
				ТекДанныеЗаказа.ОтправлениеС  = ТекЗаказ.ДатаИВремяПрибытия;
				ТекДанныеЗаказа.ОтправлениеПо = ТекЗаказ.ДатаИВремяУбытия;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

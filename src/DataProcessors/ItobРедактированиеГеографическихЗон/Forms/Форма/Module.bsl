
#Область ОписаниеПеременных

&НаКлиенте
Перем мСчетчикДокументСформирован; // Счетчик срабатывания процедуры "ПолеHTMLДокументСформирован"
&НаКлиенте
Перем мТекстОтложеннойКоманды;     // Текст кода, который выполняется
	
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОчиститьТочкиГеозоны(Команда)
	
	ТекстСкрипта = "destroy_geozones_control();";
	ВыполнитьСкрипт(ТекстСкрипта);
	
	СохранитьДанныеГеозоны();
	
КонецПроцедуры

// Процедура - обработчик события "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				
	КартаДоступна = Ложь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	ItobМестоположенияПоУмолчанию.Ссылка КАК Ссылка,
	|	ItobМестоположенияПоУмолчанию.Код,
	|	ItobМестоположенияПоУмолчанию.Представление КАК Представление,
	|	ItobМестоположенияПоУмолчанию.Наименование КАК Наименование,
	|	ItobМестоположенияПоУмолчанию.Масштаб,
	|	ItobМестоположенияПоУмолчанию.Широта,
	|	ItobМестоположенияПоУмолчанию.Долгота
	|ИЗ
	|	Справочник.ItobМестоположенияПоУмолчанию КАК ItobМестоположенияПоУмолчанию
	|ГДЕ
	|	ItobМестоположенияПоУмолчанию.Широта <> 0
	|	И ItobМестоположенияПоУмолчанию.Долгота <> 0
	|	И ItobМестоположенияПоУмолчанию.Масштаб <> 0
	|	И (НЕ ItobМестоположенияПоУмолчанию.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
				   
	Счетчик = 1;
	
	СохраненноеМестоположение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКарты", "МестоположениеПоУмолчанию");
	ТекущееМестоположение = Неопределено;
	Если ЗначениеЗаполнено(СохраненноеМестоположение) Тогда
		ТекущееМестоположение = СохраненноеМестоположение;
				
	КонецЕсли;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовКоманда = ЭтаФорма.Команды.Добавить("НажатиеНаКнопку"+Счетчик+"ВыбораКарты");
		НовКоманда.Действие = "Подключаемый_НажатиеНаКнопкуВыбораКарты";
		НовКоманда.Заголовок = Выборка.Представление;
		НовКоманда.Подсказка = НСтр("ru = 'Выбрать местоположение'")+" "+""+Выборка.Представление+"""";
		
		НовКнопка = ЭтаФорма.Элементы.Добавить("к_"+Выборка.Код, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВыборКарты);
		НовКнопка.ИмяКоманды = НовКоманда.Имя;
		НовКнопка.Заголовок = Выборка.Представление;
		
		Счетчик = Счетчик + 1;
		
		Если НЕ ЗначениеЗаполнено(ТекущееМестоположение) Тогда
			ТекущееМестоположение = Выборка.Ссылка;
		
		КонецЕсли;
		
		Если ТекущееМестоположение = Выборка.Ссылка Тогда
			НовКнопка.Пометка = Истина;
			
			ТекущийМасштаб = Выборка.Масштаб;
			ТекущаяШирота = Выборка.Широта;
			ТекущаяДолгота = Выборка.Долгота;					
		КонецЕсли;	
	КонецЦикла;			
	
	// Обновляет отображение карты
	ОбновитьОтображениеКарты();
	
	НастроитьСписокГеографическихЗон();
		
КонецПроцедуры

// Обновляет отображение карты (на сервере)
//
&НаСервере
Процедура ОбновитьОтображениеКарты(ТекстИПараметрыЗапросаУсловия = Неопределено, МассивПомеченныхПунктовНазначения = Неопределено)
	ItobОбщегоНазначения.ПоказатьГеографическуюКарту(ЭтаФорма, "");
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии".
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	мСчетчикДокументСформирован = 0;
		
	НачатьРежимРедактированияГеографическихЗон();
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПоказатьРеперыРедактируемойГеографическойЗоны", 0.5, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстСкрипта = "destroy_geozones_control();";
	ВыполнитьСкрипт(ТекстСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если НЕ ПустаяСтрока(НомерПрофиляСлойПунктов) Тогда
		ItobРаботаСРендеромCSMВызовСервера.ОчиститьДанныеПрофиля(НомерПрофиляСлойПунктов);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ДокументСформирован" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	
	Если Элементы.ПолеHTML.Документ.readyState = "complete" Тогда
		мСчетчикДокументСформирован = мСчетчикДокументСформирован + 1;
		Элементы.КнопкаПринятьИзменения.Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	ItobОперативныйМониторингКлиент.ОбработатьНажатиеНаПолеКарты(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДанныеСобытия.Element.id = "event_to_1c" 
		И ЗначениеЗаполнено(ДанныеСобытия.Element.value) 
		И Лев(ДанныеСобытия.Element.value, 16) = "BaseLayerChanged" Тогда
		
		ИмяСлоя = Сред(ДанныеСобытия.Element.value,18);
		Если НЕ ПустаяСтрока(ИмяСлоя) Тогда
			СохранитьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию", ИмяСлоя);					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" динамического списка "СписокГеографическихЗон".
//
&НаКлиенте
Процедура СписокГеографическихЗонПриАктивизацииСтроки(Элемент)
			
	Если НЕ КартаЗагружена() Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокГеографическихЗон.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСкрипта = "destroy_geozones_control();";
	ВыполнитьСкрипт(ТекстСкрипта);	
		
	ПоказатьРеперыРедактируемойГеографическойЗоны(НЕ ФиксироватьКарту);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "АвтомасштабКарты".
//
&НаКлиенте
Процедура АвтомасштабКарты(Команда)
	
	АвтоматическиМасштабироватьКарту();	
	
КонецПроцедуры // АвтомасштабКарты()

// Процедура - обработчик команды "УвеличитьКарту".
//
&НаКлиенте
Процедура УвеличитьКарту(Команда)
			
	ВыполнитьСкрипт("m_map.zoomIn();");	
	
КонецПроцедуры // УвеличитьКарту()

// Процедура - обработчик команды "УменьшитьКарту".
//
&НаКлиенте
Процедура УменьшитьКарту(Команда)
	
	ВыполнитьСкрипт("m_map.zoomOut();");
	
КонецПроцедуры // УменьшитьКарту()

// Процедура - обработчик команды "ОтменитьИзменения".
//
&НаКлиенте
Процедура ОтменитьИзменения(Команда)
					
	ПоказатьРеперыРедактируемойГеографическойЗоны(Ложь);
	
КонецПроцедуры // ОтменитьИзменения()

// Процедура - обработчик команды "ПринятьИзменения".
//
&НаКлиенте
Процедура ПринятьИзменения(Команда)
	
	 СохранитьДанныеГеозоны();
	
КонецПроцедуры

// Процедура - обработчик команды "НажатиеНаКнопкуВыбораКарты".
//
&НаКлиенте
Процедура Подключаемый_НажатиеНаКнопкуВыбораКарты(Команда)
	
	ИмяКоманды = СтрЗаменить(Команда.Имя,"НажатиеНаКнопку","");
	ИмяКоманды = СтрЗаменить(ИмяКоманды,"ВыбораКарты","");	
	ОбработатьВыборКарты(Число(ИмяКоманды));
	
КонецПроцедуры // НажатиеНаКнопку1ВыбораКарты()

&НаКлиенте
Процедура НайтиАдрес(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элементы", Элементы);
	ДопПараметры.Вставить("ВебСсылкаСервер", ВебСсылкаСервер);
	
	ОткрытьФорму("ОбщаяФорма.ItobПоискАдреса",,ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияНайтиАдрес",ItobОбщегоНазначенияКлиент,ДопПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФиксироватьКарту(Команда)
	
	ФиксироватьКарту = НЕ ФиксироватьКарту;
	Элементы.КнопкаФиксироватьКарту.Пометка = ФиксироватьКарту;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПлощадьПолигона(Команда)
	
	Элементы.РассчитатьПлощадьПолигона.Пометка = НЕ Элементы.РассчитатьПлощадьПолигона.Пометка;
	
	Если Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		ВыполнитьСкрипт("StopMeasuring();");
	КонецЕсли;
	
	Если Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		ВыполнитьСкрипт("StartMeasuringArea();");
		
	Иначе
		ВыполнитьСкрипт("StopMeasuringArea();");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеГеографическиеЗоны(Команда)
	
	Элементы.ВсеГеографическиеЗоны.Пометка = Не Элементы.ВсеГеографическиеЗоны.Пометка;
	
	Если Элементы.ВсеГеографическиеЗоны.Пометка Тогда
		ПоказатьВсеГеографическиеЗоны();
		
	Иначе
		ОтменитьПоказВсехГеографическихЗон();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьДанныеГеозоны()
	
	Геозона = ВыбраннаяГеографическаяЗона;	
	Если Не ЗначениеЗаполнено(Геозона) Тогда
		ТекущиеДанные = Элементы.СписокГеографическихЗон.ТекущиеДанные;		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Геозона = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ВыполнитьСкрипт("document.form.result.value = geozones_control.handler.getPoints().length;");
	
	КоличествоТочек = Элементы.ПолеHTML.Документ.form.result.value;
	Попытка
		КоличествоТочек = Число(КоличествоТочек);	
	Исключение
		КоличествоТочек = 0;
	КонецПопытки; 
	
	СтрНовыеКоординатыГеографическойЗоны = "";
	Для Счетчик = 0 По КоличествоТочек-1 Цикл
		ВыполнитьСкрипт(
			"var pt = geozones_control.handler.getPoints()["+Формат(Счетчик, "ЧН=0; ЧГ=0")+"];
			|pt.transform(m_map.getProjectionObject(), m_map.displayProjection);
			|document.form.result.value = pt.toShortString();");
		СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;
		СтрНовыеКоординатыГеографическойЗоны = ?(СтрНовыеКоординатыГеографическойЗоны = "", "", СтрНовыеКоординатыГеографическойЗоны+Символы.ПС) + СтрокаКоординат;			
	КонецЦикла;
		
	ГеографическаяЗонаСсылка = Геозона;
	ItobГеографическиеЗоныВызовСервера.ЗаполнитьТочкиГеографическойЗоны(ГеографическаяЗонаСсылка, СтрНовыеКоординатыГеографическойЗоны);
	Если Элементы.ВсеГеографическиеЗоны.Пометка Тогда
		ПоказатьВсеГеографическиеЗоны();
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура НастроитьСписокГеографическихЗон()
	
	ИмяСправочникаГеозоны = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны");
	СписокГеографическихЗон.ОсновнаяТаблица = "Справочник." + ИмяСправочникаГеозоны;
	
	Если Параметры.Свойство("РедактируемаяЗона", ВыбраннаяГеографическаяЗона) Тогда
		Элементы.СписокГеографическихЗон.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
 
// Сохранение настроек пользователя
//
&НаСервере
Процедура СохранитьНастройкуПользователя(Раздел, Настройка, ЗначениеНастройки)

	ХранилищеОбщихНастроек.Сохранить(Раздел, Настройка, ЗначениеНастройки);		

КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектыДерева(Родитель, ТабНовыхДанных, ЕстьИзменения)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (НЕ СтрокаДерева.ЭтоГруппа) Тогда
			НайденнаяСтрокаНовДанных = ТабНовыхДанных.Найти(СтрокаДерева.Объект, "Объект");
			Если НЕ НайденнаяСтрокаНовДанных = Неопределено Тогда
				Если НайденнаяСтрокаНовДанных.АктуальностьДанных <> СтрокаДерева.АктуальностьДанных Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДерева, НайденнаяСтрокаНовДанных);					
					ЕстьИзменения = Истина;
					
				КонецЕсли;				
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ОбновитьОбъектыДерева(СтрокаДерева, ТабНовыхДанных, ЕстьИзменения);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ОбновитьОбъектыДерева()

// Процедура изменяет подменю местоположения.
//
&НаСервере
Процедура ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты)

	ВыбраннаяКнопка = Неопределено;
	Счетчик = 1;
	Для каждого ТекущаяКнопка Из Элементы.ПодменюВыборКарты.ПодчиненныеЭлементы Цикл
		
		Если Счетчик = НомерВыбраннойКарты Тогда
		
			ВыбраннаяКнопка = ТекущаяКнопка;
			ТекущаяКнопка.Пометка = Истина;
			
		Иначе
			ТекущаяКнопка.Пометка = Ложь;
		
		КонецЕсли;
				
		Счетчик = Счетчик+1;
	
	КонецЦикла;
		
	ТекущееМестоположение = Справочники.ItobМестоположенияПоУмолчанию.НайтиПоКоду(Сред(ВыбраннаяКнопка.Имя, 3));
	ТекущийМасштаб = ТекущееМестоположение.Масштаб;
	ТекущаяШирота = ТекущееМестоположение.Широта;
	ТекущаяДолгота = ТекущееМестоположение.Долгота;
	
	Если ЗначениеЗаполнено(ТекущееМестоположение) Тогда
		СохранитьНастройкуПользователя("НастройкиКарты", "МестоположениеПоУмолчанию", ТекущееМестоположение);			
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет скрипт на поле HTML, с учетом вида браузера.
//
&НаКлиенте
Процедура ВыполнитьСкрипт(ТекстСкрипта)
	
	Если мСчетчикДокументСформирован < 1 
		 ИЛИ НЕ Элементы.ПолеHTML.Документ.readyState = "complete" Тогда
		 
		Возврат;	
	КонецЕсли;

	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);

КонецПроцедуры

// Функция возвращает признак загрузки HTML документа.
//
&НаКлиенте
Функция КартаЗагружена()
	Возврат ItobОбщегоНазначенияКлиент.КартаЗагружена(Элементы.ПолеHTML);
КонецФункции // КартаЗагружена()

// Процедура отображает точки географической зоны.
//
&НаКлиенте
Процедура ОбработчикОжиданияПоказатьРеперыРедактируемойГеографическойЗоны()
	
	ПоказатьРеперыРедактируемойГеографическойЗоны();
	
КонецПроцедуры // ПоказатьРеперыРедактируемойГеографическойЗоны

// Процедура отображает точки географической зоны.
//
&НаКлиенте
Процедура ПоказатьРеперыРедактируемойГеографическойЗоны(Автомасштаб=Истина)
		
	Если ЗначениеЗаполнено(ВыбраннаяГеографическаяЗона) Тогда	
		ГеографическаяЗонаСсылка = ВыбраннаяГеографическаяЗона;
	Иначе
		ТекущиеДанные = Элементы.СписокГеографическихЗон.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ГеографическаяЗонаСсылка = ТекущиеДанные.Ссылка;
	КонецЕсли;
	

	ТекстСкрипта = ItobГеографическиеЗоныВызовСервера.ПолучитьСкриптОтображенияГеографическойЗоныСервер(ГеографическаяЗонаСсылка, Автомасштаб);
	ВыполнитьСкрипт(ТекстСкрипта);
	
КонецПроцедуры

// Процедура обрабатывает масштабирование карты.
//
&НаКлиенте
Процедура АвтоматическиМасштабироватьКарту()
    	
	ТекстСкрипта = "";
	Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
		ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, "+Формат(ТекущийМасштаб,"ЧГ=0")+");
			|pt = null;";
	
	КонецЕсли;	
	
	Если ТекстСкрипта <> "" Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;

КонецПроцедуры // АвтоматическиМасштабироватьКарту()

// Процедура обрабатывает выбор карты и масштабирует по текущему масштабу.
//
&НаКлиенте
Процедура ОбработатьВыборКарты(НомерВыбраннойКарты)
	
	ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты);
		
	АвтоматическиМасштабироватьКарту();
	
КонецПроцедуры // ОбработатьВыборКарты()

#Область ПроцедурыУправленияРежимамиОтображения

#Область РежимРедактированияГеографическихЗон

// Инициализация режима редактирования географических зон
//
&НаКлиенте
Процедура НачатьРежимРедактированияГеографическихЗон()

	Если Элементы.РассчитатьПлощадьПолигона.Пометка Тогда
		// РассчитатьПлощадьПолигона - запрещаем в данном режиме
		ВыполнитьСкрипт("StopMeasuringArea();");
		Элементы.РассчитатьПлощадьПолигона.Пометка = Ложь;	
	КонецЕсли;
	
	Попытка	
		СписокГеографическихЗонПриАктивизацииСтроки(Неопределено);	
	Исключение
		ItobОбщегоНазначенияВызовСервера.ЗаписьЖурналаРегистрацииОшибка(НСтр("ru = 'Активация строки географической зоны'", "ru"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ОбработчикиКомандВыбораМестоположения

&НаКлиенте
Процедура ОбработчикВыполненияОтложеннойКоманды()
 
	Если ПустаяСтрока(мТекстОтложеннойКоманды) Тогда		
		Возврат;
	
	КонецЕсли;
	
	Если КартаЗагружена() Тогда
		ВЫПОЛНИТЬ(мТекстОтложеннойКоманды);
		мТекстОтложеннойКоманды = "";
		
	Иначе
		ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",0.5,Истина);
	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеГеографическиеЗоны()

	ТекстСкрипта = ItobГеографическиеЗоныВызовСервера.ПолучитьТекстСкриптаГеографическиеЗоны();		
    ВыполнитьСкрипт(ТекстСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоказВсехГеографическихЗон()

	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""AllGeozonLayer"");
		|if (find_lays.length > 0) {
		|	vectorLayer = find_lays[0];
		|	vectorLayer.destroyFeatures();
		|	m_map.removeLayer(vectorLayer);
		|}";
		
	ВыполнитьСкрипт(ТекстСкрипта);

КонецПроцедуры

#КонецОбласти

#КонецОбласти



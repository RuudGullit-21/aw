
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если ДатаНач = '00010101' Тогда
		ДатаНач = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ДатаКон = '00010101' Тогда
		ДатаКон = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
	
	НастроитьКомпоновщикОтбора();
	
	НовыйЭлементОтбора = ПостроительОтчета.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТранспортноеСредство");
	НовыйЭлементОтбора.Использование = Ложь;
	НовыйЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	
	ИспользованиеТПЛ = НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() И ПолучитьФункциональнуюОпцию("уатИспользоватьТехнологическиеПутевыеЛисты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	УстановитьВидимостьНастроек();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОбработкиПриИзменении(Элемент)
	УстановитьВидимостьНастроек();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаНажатиеЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПостроительОтчетаНастройкиОтборПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ОбработанныеДокументы.ТекущиеДанные;
	Если Поле.Имя = "ОбработанныеДокументыДокумент" Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Документ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ОчиститьСообщения();
	ВыполнитьОбработку(КонтрольЗаписьДокументов);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьОбработку(ВыполнятьЗапись)
	ОбработанныеДокументы.Очистить();
	КоличествоОбработанныхДокументов = 0;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	СКД = Обработки.уатВосстановлениеПоследовательностиПЛпоГСМиПоказаниямСпидометров.ПолучитьМакет("Отбор");
	
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач").Использование = Истина;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач").Значение = ДатаНач;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон").Использование = Истина;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон").Значение = ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон));
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Использование = Истина;
	ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение = Организация;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьПЛ").Использование = Истина;
		ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьПЛ").Значение = (ОбрабатываемыеДокументы = 0 ИЛИ ОбрабатываемыеДокументы = 2);
		ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьТПЛ").Использование = Истина;
		ПостроительОтчета.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьТПЛ").Значение = (ОбрабатываемыеДокументы = 1 ИЛИ ОбрабатываемыеДокументы = 2);
	КонецЕсли;
		
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, ПостроительОтчета.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Колич = ТаблицаРезультат.Количество();
	Сч = 0;
	Для Каждого Выборка из ТаблицаРезультат Цикл 
		//	
		Если Выборка.Документ.ДатаВыезда = Выборка.Документ.ДатаВозвращения Тогда
			ТекстНСТР = НСтр("en='Document <%1> has invalid data: departure date = the date the return!';ru='Документ <%1> имеет некорректные данные: дата выезда = дате возвращения!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Продолжить;
		КонецЕсли;
		//	
		ТекДок = Выборка.Документ.ПолучитьОбъект();
		
		ЭтоТПЛ = ИспользованиеТПЛ И (ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист"));
		ТекТС = ?(ЭтоТПЛ, ТекДок.ТС, ТекДок.ТранспортноеСредство);
		
		Если ВариантОбработки = 0 Тогда
			Отказ_ = Ложь;
			ТекДок.РасчетИтогов(Отказ_, Ложь);
			Если НЕ Отказ_ Тогда
				Попытка
					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					
					НовСтрока = ОбработанныеДокументы.Добавить();
					НовСтрока.Документ = ТекДок.Ссылка;
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			флГСМТС = Ложь;
			флГСМПрицепы = Ложь;
			флСпидометрТС = Ложь;
			флСчетчикиПрицепы = Ложь;
			
			// основное ТС: ГСМ основное топливо
			ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекДок.ДатаВыезда, ТекТС, ТекТС.Модель.ОсновноеТопливо, ТекДок.ссылка);
			Для Каждого ТекСтрокаРасходГСМ Из ТекДок.РасходГСМ Цикл
				Если ТекТС = ТекСтрокаРасходГСМ.ТС И ТекТС.Модель.ОсновноеТопливо = ТекСтрокаРасходГСМ.ГСМ Тогда
					Если ТекСтрокаРасходГСМ.ОстатокПриВыезде <> ОстатокТопливаВыезд Тогда
						ТекСтрокаРасходГСМ.ОстатокПриВыезде = ОстатокТопливаВыезд;
						ТекСтрокаРасходГСМ.ОстатокПриВозвращении = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.РасходПоФакту + ТекСтрокаРасходГСМ.Выдано;
						флГСМТС = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// основное ТС: ГСМ доп. топливо
			Если ЗначениеЗаполнено(ТекТС.Модель.ДополнительноеТопливо) Тогда
				Для Каждого ТекСтрокаРасходГСМ Из ТекДок.РасходГСМ Цикл
					Если ТекТС = ТекСтрокаРасходГСМ.ТС И ТекТС.Модель.ДополнительноеТопливо = ТекСтрокаРасходГСМ.ГСМ Тогда
						ТекОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекДок.ДатаВыезда, ТекТС, ТекСтрокаРасходГСМ.ГСМ, ТекДок.Ссылка);
						Если ТекСтрокаРасходГСМ.ОстатокПриВыезде <> ТекОстатокПриВыезде Тогда
							ТекСтрокаРасходГСМ.ОстатокПриВыезде = ТекОстатокПриВыезде;
							ТекСтрокаРасходГСМ.ОстатокПриВозвращении = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.РасходПоФакту + ТекСтрокаРасходГСМ.Выдано;
							флГСМТС = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			// основное ТС: показания спидометра
			Если ТекТС.Модель.НаличиеСпидометра Тогда
				ОдометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекТС, ТекДок.ДатаВыезда);
			Иначе
				ОдометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекТС, ТекДок.ДатаВыезда);
			КонецЕсли;
			ОдометрВыездаИмяРеквизита = ?(ЭтоТПЛ, "ОдометрВыезда", "СпидометрВыезда");
			ОдометрВозвращенияИмяРеквизита = ?(ЭтоТПЛ, "ОдометрВозвращения", "СпидометрВозвращения");
			Если ТекДок[ОдометрВыездаИмяРеквизита] <> ОдометрВыезда Тогда
				ТекДок[ОдометрВыездаИмяРеквизита] = ОдометрВыезда;
				РазницаСпидометров = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекДок[ОдометрВыездаИмяРеквизита], ТекДок[ОдометрВозвращенияИмяРеквизита]);
				ТекДок[ОдометрВозвращенияИмяРеквизита] = ТекДок[ОдометрВыездаИмяРеквизита] + РазницаСпидометров;
				флСпидометрТС = Истина;
			КонецЕсли;
			
			// прицепы и оборудование
			Если НЕ ЭтоТПЛ Тогда
				Для Каждого ТекСтрока Из ТекДок.Прицепы Цикл
					// показания счетчиков
					СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, ТекДок.ДатаВыезда);
					Если ТекСтрока.СчетчикМЧВыезда <> СчетчикМЧВыезда Тогда
						РазницаСпидометров = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрока.СчетчикМЧВыезда, ТекСтрока.СчетчикМЧВозвращения);
						ТекСтрока.СчетчикМЧВыезда = СчетчикМЧВыезда;
						ТекСтрока.СчетчикМЧВозвращения = ТекСтрока.СчетчикМЧВыезда + РазницаСпидометров;
						флСчетчикиПрицепы = Истина;
					КонецЕсли;
					
					// ГСМ
					мМодельПрицепа = ТекСтрока.ТС.Модель;
					Если ЗначениеЗаполнено(мМодельПрицепа.ОсновноеТопливо) и мМодельПрицепа.НаличиеТопливногоБака Тогда
						Для Каждого ТекСтрокаГСМ Из ТекДок.РасходГСМ Цикл
							Если ТекСтрока.ТС = ТекСтрокаГСМ.ТС И мМодельПрицепа.ОсновноеТопливо = ТекСтрокаГСМ.ГСМ Тогда
								ТекОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекДок.ДатаВыезда, ТекСтрокаГСМ.ТС, ТекСтрокаГСМ.ГСМ, ТекДок.Ссылка);
								
								Если ТекСтрокаГСМ.ОстатокПриВыезде <> ТекОстатокПриВыезде Тогда
									ТекСтрокаГСМ.ОстатокПриВыезде = ТекОстатокПриВыезде;
									ТекСтрокаГСМ.ОстатокПриВозвращении = ТекСтрокаГСМ.ОстатокПриВыезде - ТекСтрокаГСМ.РасходПоФакту + ТекСтрокаГСМ.Выдано;
									флГСМПрицепы = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			Если флГСМТС ИЛИ флГСМПрицепы ИЛИ флСпидометрТС ИЛИ флСчетчикиПрицепы Тогда
				Попытка
					Если ВыполнятьЗапись = 1 Тогда
						ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					НовСтрока = ОбработанныеДокументы.Добавить();
					НовСтрока.Документ = ТекДок.Ссылка;
					НовСтрока.ГСМТС = флГСМТС;
					НовСтрока.ГСМПрицепы = флГСМПрицепы;
					НовСтрока.СпидометрТС = флСпидометрТС;
					НовСтрока.СпидометрПрицепы = флСчетчикиПрицепы;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	КоличествоОбработанныхДокументов = ОбработанныеДокументы.Количество();
	Если КоличествоОбработанныхДокументов > 0  Тогда
		ТекстНСТР = НСтр("en='Processed documents:';ru='Обработано документов:'") + " " + КоличествоОбработанныхДокументов;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбработанныеДокументы;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь); 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастроек()
	Элементы.КонтрольЗаписьДокументов.Доступность = (ВариантОбработки = 1);
	Элементы.НадписьВнимание.Доступность = (ВариантОбработки = 1);
	Элементы.ГруппаДок.Видимость = ИспользованиеТПЛ;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаНажатиеЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
		ДатаНач = Период.ДатаНачала;
		ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьКомпоновщикОтбора()
	СКД = Обработки.уатВосстановлениеПоследовательностиПЛпоГСМиПоказаниямСпидометров.ПолучитьМакет("Отбор");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ПостроительОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Настройки = СКД.НастройкиПоУмолчанию;
	ПостроительОтчета.ЗагрузитьНастройки(Настройки);

КонецПроцедуры

#КонецОбласти

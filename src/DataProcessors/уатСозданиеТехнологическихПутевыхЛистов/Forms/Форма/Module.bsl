
#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если ДатаНач = '00010101' Тогда
		ДатаНач = ТекущаяДата() - 24*3600;
	КонецЕсли;
	Если ДатаКон = '00010101' Тогда
		ДатаКон = ДатаНач;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	
	НастроитьКомпоновщикОтбора();
	
	НовыйЭлементОтбора = ПостроительОтчета.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТС");
	НовыйЭлементОтбора.Использование = Ложь;
	НовыйЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора = ПостроительОтчета.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВладелецТС");
	НовыйЭлементОтбора.Использование = Ложь;
	НовыйЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ВосстановитьНастройки();
	
	Если РасчетФактРасходаГСМ.Пустая() Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			РасчетФактРасходаГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "РасчетФактРасходаГСМ");
		Иначе
			РасчетФактРасходаГСМ = ПредопределенноеЗначение("Перечисление.уатВидыРасчетаРасходаГСМ.НеРассчитывать");
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииСозданиеЗаправокГСМ();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ОчиститьСообщения();
	ИнициализацияФормыДлительнойОперации();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала    = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ДатаНач = Период.ДатаНачала;
		ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СозданиеЗаправокГСМПриИзменении(Элемент)
	ПриИзмененииСозданиеЗаправокГСМ();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСозданиеЗаправокГСМ()
	Если СозданиеЗаправокГСМ = 0 Тогда
		АЗСМониторинг = Неопределено;
		ВидЗаправкиМониторинг = Неопределено;
	Иначе
		Если НЕ ЗначениеЗаполнено(АЗСМониторинг) И ЗначениеЗаполнено(Организация) Тогда
			АЗСМониторинг = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнаяАЗС");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидЗаправкиМониторинг) И ЗначениеЗаполнено(Организация) Тогда
			ВидЗаправкиМониторинг = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнойВидЗаправки");
		КонецЕсли;
	КонецЕсли;
	Если СозданиеЗаправокГСМ = 3 Тогда
		Если МаксимальноеОтклонениеДанныхПЦиССМпоВремени = 0 Тогда
			МаксимальноеОтклонениеДанныхПЦиССМпоВремени = 10;
		КонецЕсли;
		Если МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству = 0 Тогда
			МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству = 1;
		КонецЕсли;
	Иначе
		МаксимальноеОтклонениеДанныхПЦиССМпоВремени = 0;
		МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ОбработанныеДокументы.ТекущиеДанные;
	Если Поле.Имя = "ОбработанныеДокументыДокумент" Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Документ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьКомпоновщикОтбора()
	СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ОтборТС");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ПостроительОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Настройки = СКД.НастройкиПоУмолчанию;
	ПостроительОтчета.ЗагрузитьНастройки(Настройки);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ГруппаЗначенияЗаполненияГСМ.Видимость = (СозданиеЗаправокГСМ <> 0);
	Элементы.ГруппаОтклонение.Доступность = (СозданиеЗаправокГСМ = 3);
	Элементы.ГруппаНастройкиДополнительно.Видимость = (СозданиеЗаправокГСМ <> 0);
	Элементы.ТолькоПроверенные.Доступность = (СозданиеЗаправокГСМ = 2 ИЛИ СозданиеЗаправокГСМ = 3);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("РасчетФактРасходаГСМ", РасчетФактРасходаГСМ);
	СтруктураНастроек.Вставить("СозданиеЗаправокГСМ", СозданиеЗаправокГСМ);
	СтруктураНастроек.Вставить("АЗСМониторинг", АЗСМониторинг);
	СтруктураНастроек.Вставить("ВидЗаправкиМониторинг", ВидЗаправкиМониторинг);
	СтруктураНастроек.Вставить("МаксимальноеОтклонениеДанныхПЦиССМпоВремени", МаксимальноеОтклонениеДанныхПЦиССМпоВремени);
	СтруктураНастроек.Вставить("МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству", МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству);
	СтруктураНастроек.Вставить("ГлубинаПоискаПЛДоВыезда",  ГлубинаПоискаПЛДоВыезда);
	СтруктураНастроек.Вставить("ГлубинаПоискаПЛПослеВозвращения",  ГлубинаПоискаПЛПослеВозвращения);
	СтруктураНастроек.Вставить("ТолькоПроверенные",  ТолькоПроверенные);
	СтруктураНастроек.Вставить("ПересчитатьПутевыеЛисты",  ПересчитатьПутевыеЛисты);
	СтруктураНастроек.Вставить("РасчетИтогов", РасчетИтогов);
	СтруктураНастроек.Вставить("ПроводитьСозданныеЗаправкиГСМ",  ПроводитьСозданныеЗаправкиГСМ);
	СтруктураНастроек.Вставить("ЗаменятьАналогНаОсновноеТопливо",  ЗаменятьАналогНаОсновноеТопливо);
	СтруктураНастроек.Вставить("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатСозданиеТехнологическихПутевыхЛистов.Форма", 
		"ОбщиеНастройки",
		СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.уатСозданиеТехнологическихПутевыхЛистов.Форма", 
		"ОбщиеНастройки");
		
	Если СтруктураНастроек <> Неопределено Тогда
		СтруктураНастроек.Свойство("РасчетФактРасходаГСМ", РасчетФактРасходаГСМ);
		СтруктураНастроек.Свойство("СозданиеЗаправокГСМ", СозданиеЗаправокГСМ);
		СтруктураНастроек.Свойство("АЗСМониторинг", АЗСМониторинг);
		СтруктураНастроек.Свойство("ВидЗаправкиМониторинг", ВидЗаправкиМониторинг);
		СтруктураНастроек.Свойство("МаксимальноеОтклонениеДанныхПЦиССМпоВремени", МаксимальноеОтклонениеДанныхПЦиССМпоВремени);
		СтруктураНастроек.Свойство("МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству", МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству);
		СтруктураНастроек.Свойство("ГлубинаПоискаПЛДоВыезда",  ГлубинаПоискаПЛДоВыезда);
		СтруктураНастроек.Свойство("ГлубинаПоискаПЛПослеВозвращения",  ГлубинаПоискаПЛПослеВозвращения);
		СтруктураНастроек.Свойство("ТолькоПроверенные",  ТолькоПроверенные);
		СтруктураНастроек.Свойство("ПересчитатьПутевыеЛисты",  ПересчитатьПутевыеЛисты);
		СтруктураНастроек.Свойство("РасчетИтогов",  РасчетИтогов);
		СтруктураНастроек.Свойство("ПроводитьСозданныеЗаправкиГСМ",  ПроводитьСозданныеЗаправкиГСМ);
		СтруктураНастроек.Свойство("ЗаменятьАналогНаОсновноеТопливо",  ЗаменятьАналогНаОсновноеТопливо);
		СтруктураНастроек.Свойство("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
	КонецЕсли;
КонецПроцедуры


#Область ПроцедурыВыводаФормыДлительнойОперацииПриПроведении

&НаКлиенте
Процедура ИнициализацияФормыДлительнойОперации()
	
	ДлительнаяОперация = ВыполнениеОбработкиНаСервере();
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;

	Обработчик = Новый ОписаниеОповещения("ПроверитьВыполнениеЗадания", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнениеОбработкиНаСервере()
	
	ОбработанныеДокументы.Очистить();
	КоличествоОбработанныхДокументов = 0;
	
	СтруктураПараметров = Новый Структура;
	флЕстьДопОтбор = Ложь;
	Для Каждого ТекОтбор Из ПостроительОтчета.Настройки.Отбор.Элементы Цикл
		Если ТекОтбор.Использование Тогда
			флЕстьДопОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если флЕстьДопОтбор Тогда
		СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ОтборТС");
		
		Настройки = ПостроительОтчета.ПолучитьНастройки();
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, ПостроительОтчета.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
		
		тблТС = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ПроцессорВывода.УстановитьОбъект(тблТС);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		мсвТС = тблТС.ВыгрузитьКолонку("Ссылка");
		СтруктураПараметров.Вставить("ТС", мсвТС);
	КонецЕсли;
	СтруктураПараметров.Вставить("Организация",           Организация);
	СтруктураПараметров.Вставить("ДатаНач",               ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон",               ДатаКон);
	СтруктураПараметров.Вставить("АЗСМониторинг",         АЗСМониторинг);
	СтруктураПараметров.Вставить("ВидЗаправкиМониторинг", ВидЗаправкиМониторинг);
	СтруктураПараметров.Вставить("РасчетФактРасходаГСМ",  РасчетФактРасходаГСМ);
	СтруктураПараметров.Вставить("СозданиеЗаправокГСМ",   СозданиеЗаправокГСМ);
	СтруктураПараметров.Вставить("Ответственный",         Пользователи.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("ВидПЛприПоискеПЛдляЗаправки",                      1); //учитывать только ТПЛ при создании заправок ГСМ
	СтруктураПараметров.Вставить("МаксимальноеОтклонениеДанныхПЦиССМпоВремени",      МаксимальноеОтклонениеДанныхПЦиССМпоВремени);
	СтруктураПараметров.Вставить("МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству",   МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству);
	СтруктураПараметров.Вставить("ГлубинаПоискаПЛДоВыезда",                          ГлубинаПоискаПЛДоВыезда);
	СтруктураПараметров.Вставить("ГлубинаПоискаПЛПослеВозвращения",                  ГлубинаПоискаПЛПослеВозвращения);
	СтруктураПараметров.Вставить("ТолькоПроверенные",                                ТолькоПроверенные);
	СтруктураПараметров.Вставить("ПересчитатьПутевыеЛисты",                          ПересчитатьПутевыеЛисты);
	СтруктураПараметров.Вставить("РасчетИтогов",                                     РасчетИтогов);
	СтруктураПараметров.Вставить("ПроводитьСозданныеЗаправкиГСМ",                    ПроводитьСозданныеЗаправкиГСМ);
	СтруктураПараметров.Вставить("ЗаменятьАналогНаОсновноеТопливо",                  ЗаменятьАналогНаОсновноеТопливо);
	СтруктураПараметров.Вставить("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание технологических путевых листов и заправок ГСМ'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("уатОбщегоНазначения_проф.СоздатьТехнологическиеПЛ",
		СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции
		
&НаКлиенте
Процедура ПроверитьВыполнениеЗадания(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Операция.Статус = "Выполнено" Тогда
		ВывестиСообщенияПослеВыполнения(Операция.АдресРезультата);
	Иначе
		ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Действия после выполнения фонового задания
//
&НаКлиенте
Процедура ВывестиСообщенияПослеВыполнения(АдресРезультата)
	ДанныеФоновогоЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(ДанныеФоновогоЗадания) = Тип("Структура") Тогда
		Если ДанныеФоновогоЗадания.Свойство("СообщенияОбОшибках") Тогда
			Для Каждого ТекСообщениеОшибка Из ДанныеФоновогоЗадания.СообщенияОбОшибках Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекСообщениеОшибка);
			КонецЦикла;
		КонецЕсли;
		Если ДанныеФоновогоЗадания.Свойство("ОбработанныеДокументы") Тогда
			мсвОбработанныеДокументы = ДанныеФоновогоЗадания.ОбработанныеДокументы;
			Если мсвОбработанныеДокументы.Количество() <> 0  Тогда
				Для Каждого ТекДокумент Из мсвОбработанныеДокументы Цикл
					НоваяСтрока = ОбработанныеДокументы.Добавить();
					НоваяСтрока.Документ = ТекДокумент;
				КонецЦикла;
				
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбработанныеДокументы;
				КоличествоОбработанныхДокументов = мсвОбработанныеДокументы.Количество();
				
				ТекстНСТР = НСтр("en='Created documents:';ru='Обработано документов:'")  + " " + КоличествоОбработанныхДокументов;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти


#КонецОбласти


#Область ОписаниеПеременных

&НаКлиенте	
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьСложнуюНастройкуАдресовCsmSvc = ИспользуетсяСложнаяНастройкаАдресовCsmSvc();
	
	УстановитьДоступность();
	
	ПоказатьТолькоНастройкиГеосервисов = Ложь;
	Если Параметры.Свойство("ПоказатьТолькоНастройкиГеосервисов") Тогда
		ПоказатьТолькоНастройкиГеосервисов = Параметры.ПоказатьТолькоНастройкиГеосервисов;	
	КонецЕсли;
	
	УстановитьВидимость(ПоказатьТолькоНастройкиГеосервисов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)	
	
	Если НЕ ЗавершениеРаботы Тогда
		#Если Не ВебКлиент Тогда
			ОбновитьИнтерфейсПрограммы();
		#КонецЕсли
		
		// Обновим адрес CsmService
		КлиентскаяСтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		ItobОперативныйМониторингКлиентСервер.ОпределитьАдресCsmSvc(КлиентскаяСтрокаСоединения);
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("ОбработчикПрямогоГеокодирования", НаборКонстант.ItobОбработчикПрямогоГеокодирования);
		СтруктураОповещения.Вставить("ОбработчикОбратногоГеокодирования", НаборКонстант.ItobОбработчикОбратногоГеокодирования);
		СтруктураОповещения.Вставить("ОбработчикРасчетаРасстояния", НаборКонстант.ItobОбработчикРасчетаРасстояния);
		СтруктураОповещения.Вставить("ОбработчикРасчетаМаршрута", НаборКонстант.ItobОбработчикРасчетаМаршрута);
		Оповестить("ВыполненаНастройкаКартИГеосервисов", СтруктураОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьСложнуюНастройкуАдресовCsmSvcПриИзменении(Элемент)
	УстановитьДоступность("ИспользоватьСложнуюНастройкуАдресовCsmSvc");		
КонецПроцедуры

&НаКлиенте
Процедура АдресCsmServiceПриИзменении(Элемент)
	ЗаписатьПростойАдресCsmService();	
КонецПроцедуры

&НаКлиенте
Процедура ПортCsmServiceПриИзменении(Элемент)
	ЗаписатьПростойАдресCsmService();
КонецПроцедуры

&НаКлиенте
Процедура ItobОбработчикПрямогоГеокодированияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ItobОбработчикОбратногоГеокодированияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ItobОбработчикРасчетаМаршрутаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ItobОбработчикРасчетаРасстоянияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОСервисеCsmSvc(Команда)
	
	ItobCsmSvcКлиент.ОткрытьОписание();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		#Если Не ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		#КонецЕсли
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ItobРаботаС_БСП_Клиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПростойАдресCsmService()

	Если НЕ ИспользоватьСложнуюНастройкуАдресовCsmSvc Тогда
		// Повторно заполним регистр ItobСервисыCsmSvc
		НаборЗаписей = РегистрыСведений.ItobСервисыCsmSvc.СоздатьНаборЗаписей();
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Сервер;
		НовЗапись.АдресCsmService = АдресCsmService;
		НовЗапись.ПортCsmService = ПортCsmService;
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Клиент;
		НовЗапись.АдресCsmService = АдресCsmService;
		НовЗапись.ПортCsmService = ПортCsmService;
		
		НаборЗаписей.Записать(Истина);	
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "ИспользоватьСложнуюНастройкуАдресовCsmSvc" ИЛИ РеквизитПутьКДанным = "" Тогда
		ItobРаботаС_БСП_КлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "АдресCsmService", "Видимость", НЕ ИспользоватьСложнуюНастройкуАдресовCsmSvc);
		ItobРаботаС_БСП_КлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПортCsmService", "Видимость", НЕ ИспользоватьСложнуюНастройкуАдресовCsmSvc);	
		ItobРаботаС_БСП_КлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СервисыCsmSvc", "Видимость", ИспользоватьСложнуюНастройкуАдресовCsmSvc);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ИспользуетсяСложнаяНастройкаАдресовCsmSvc()
 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobСервисыCsmSvc.ВидОбращения,
	               |	ItobСервисыCsmSvc.СерверОбращения,
	               |	ItobСервисыCsmSvc.АдресCsmService,
	               |	ItobСервисыCsmSvc.ПортCsmService
	               |ИЗ
	               |	РегистрСведений.ItobСервисыCsmSvc КАК ItobСервисыCsmSvc";
				   
	ТабЗаписей = Запрос.Выполнить().Выгрузить();
	
	Результат = Истина;
	Если ТабЗаписей.Количество()=0 Тогда
		Результат = Ложь;
		
	ИначеЕсли ТабЗаписей.Количество()=2 Тогда
		Если ТабЗаписей[0].СерверОбращения = ТабЗаписей[1].СерверОбращения
			И ПустаяСтрока(ТабЗаписей[0].СерверОбращения)
			И ТабЗаписей[0].АдресCsmService = ТабЗаписей[1].АдресCsmService
			И ТабЗаписей[0].ПортCsmService = ТабЗаписей[1].ПортCsmService Тогда
			
			АдресCsmService = ТабЗаписей[0].АдресCsmService;
			ПортCsmService  =  ТабЗаписей[0].ПортCsmService;
			
			Результат = Ложь;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции 

&НаСервере
Процедура УстановитьВидимость(ПоказатьТолькоНастройкиГеосервисов = Ложь)
	
	Элементы.ГруппаНастройкиCsmService.Видимость = НЕ ПоказатьТолькоНастройкиГеосервисов;
	Элементы.ГруппаКарты.Видимость = НЕ ПоказатьТолькоНастройкиГеосервисов;
	
КонецПроцедуры
 
#КонецОбласти
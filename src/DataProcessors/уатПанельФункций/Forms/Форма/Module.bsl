
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ВызватьИсключение НСтр("ru = 'Не поддерживается в мобильном клиенте.'")
	КонецЕсли;
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
		
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ЭтоСТД  = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	Элементы.ПереключательСхемы.СписокВыбора.Очистить();
	Если ЭтоКОРП Тогда
		ИндексПервойСтраницы = 0;
		Элементы.ПереключательСхемы.СписокВыбора.Добавить(0, НСтр("en = 'Logistics'; ru = 'Логистика'"));
		Элементы.ПереключательСхемы.СписокВыбора.Добавить(1, НСтр("en = 'Transport'; ru = 'Транспорт'"));
		Элементы.ПереключательСхемы.СписокВыбора.Добавить(2, НСтр("en = 'Finance'; ru = 'Финансы'"));
		
		Элементы.ГруппаПодсистемы.ТекущаяСтраница = Элементы.КОРПЛогистика;
	ИначеЕсли ЭтоСТД Тогда
		Элементы.ПереключательСхемы.Видимость = Ложь;
		Элементы.ГруппаПодсистемы.ТекущаяСтраница = Элементы.СТДТранспорт;
	Иначе
		ИндексПервойСтраницы = 1;
		Элементы.ПереключательСхемы.СписокВыбора.Добавить(1, НСтр("en = 'Transport'; ru = 'Транспорт'"));
		Элементы.ПереключательСхемы.СписокВыбора.Добавить(2, НСтр("en = 'Finance'; ru = 'Финансы'"));
		Элементы.ГруппаПодсистемы.ТекущаяСтраница = Элементы.ПРОФТранспорт;
	КонецЕсли;
	ПереключательСхемы = ИндексПервойСтраницы;
	
	#Если ВебКлиент Тогда
		Если ЭтоКОРП Тогда
			ЗаполнитьНаименованияГрафСхемыВебКлиент(КОРПЛогистикаСхема);
			ЗаполнитьНаименованияГрафСхемыВебКлиент(КОРПТранспортСхема);
			ЗаполнитьНаименованияГрафСхемыВебКлиент(КОРПФинансыСхема);
		ИначеЕсли ЭтоСТД Тогда
			ЗаполнитьНаименованияГрафСхемыВебКлиент(СТДТранспортСхема);
		Иначе
			ЗаполнитьНаименованияГрафСхемыВебКлиент(ПРОФТранспортСхема);
			ЗаполнитьНаименованияГрафСхемыВебКлиент(ПРОФФинансыСхема);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГрафическаяСхемаЛогистикаВыбор(Элемент)
	
	ТекЭлемент = Элемент.ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекЭлемента = УдалитьЦифруСправа(ТекЭлемент.Имя);
	
	ТекИмяФормы = ПроверитьСуществованиеЭлемента(ИмяТекЭлемента);
	Если ТипЗнч(ТекИмяФормы) = Тип("Строка") И СтрНайти(ТекИмяФормы, "Отчет.") = 1 Тогда
		ИмяОтчета = СтрЗаменить(ТекЭлемент.Имя, "Отчет_", "");
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		ОсновнаяОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
					"ОсновнаяОрганизация");
		Период               = Новый СтандартныйПериод();
		Период.ДатаНачала    = НачалоГода(ТекущаяДата());
		Период.ДатаОкончания = КонецГода(ТекущаяДата());
		ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчета(ИмяОтчета, "ОсновнаяСхемаКомпоновкиДанных", ОсновнаяОрганизация, Период);
		ОткрытьФорму(ТекИмяФормы,ПараметрыОткрытия, ЭтотОбъект);
	ИначеЕсли СтрНайти(ИмяТекЭлемента, "Ссылка") = 1 Тогда
		ОповещениеОЗапускеПриложения = Новый ОписаниеОповещения("НачатьЗапускПриложенияЗавершение", ЭтотОбъект);
		Если СтрНайти(ИмяТекЭлемента, "Мобильное") > 0 Тогда
			НачатьЗапускПриложения(ОповещениеОЗапускеПриложения, "https://rarus.ru/1c-transport/1c-rarus-mobilnoe-prilozhenie-voditel-uat/");
		ИначеЕсли СтрНайти(ИмяТекЭлемента, "Мониторинг") > 0 Тогда
			НачатьЗапускПриложения(ОповещениеОЗапускеПриложения, "https://rarus.ru/1c-transport/article-integration-external-services/#integration-monitoring");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекИмяФормы) = Тип("Строка") Тогда
		ОткрытьФорму(ТекИмяФормы,, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСхемыПриИзменении(Элемент)
	Если ПереключательСхемы = 0 Тогда
		Элементы.ГруппаПодсистемы.ТекущаяСтраница = Элементы.КОРПЛогистика;
	ИначеЕсли ПереключательСхемы = 1 Тогда
		Элементы.ГруппаПодсистемы.ТекущаяСтраница = ?(ЭтоКОРП, Элементы.КОРПТранспорт, Элементы.ПРОФТранспорт);
	Иначе
		Элементы.ГруппаПодсистемы.ТекущаяСтраница = ?(ЭтоКОРП, Элементы.КОРПФинансы, Элементы.ПРОФФинансы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции  

&НаКлиенте
Процедура НачатьЗапускПриложенияЗавершение(КодВозврата, ДопПараметры) Экспорт	
	ДопОбработкаНеТребуется = Истина;	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияОтчета(Отчет, Схема, Организация = Неопределено, Период = Неопределено)
	
	СхемаКомпоновкиДанных = Отчеты[Отчет].ПолучитьМакет(Схема);

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если ЗначениеЗаполнено(Организация) И Строка(ТекЭлем.ЛевоеЗначение) = "Организация" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Организация;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если ЗначениеЗаполнено(Период) И Строка(ТекЭлем.Параметр) = "ПериодОтчета" Тогда
			ТекЭлем.Значение      = Период;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);

	сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

&НаСервере
Функция ПроверитьСуществованиеЭлемента(ИмяЭлем)
	Если СтрНайти(ИмяЭлем, "Отчет_") <> 0 Тогда
		мИмяЭлем = СтрЗаменить(ИмяЭлем, "Отчет_", "");
		Если Метаданные.Отчеты.Найти(мИмяЭлем) <> Неопределено Тогда
			Возврат "Отчет." +мИмяЭлем + ".Форма";
		КонецЕсли;
	ИначеЕсли Метаданные.Документы.Найти(ИмяЭлем) <> Неопределено Тогда
		Возврат "Документ." + ИмяЭлем + ".ФормаСписка";
	ИначеЕсли Метаданные.Справочники.Найти(ИмяЭлем) <> Неопределено Тогда
		Возврат "Справочник." + ИмяЭлем + ".ФормаСписка";
	ИначеЕсли Метаданные.Обработки.Найти(ИмяЭлем) <> Неопределено Тогда
		Возврат "Обработка." + ИмяЭлем + ".Форма";
	Иначе
		Число = Прав(ИмяЭлем, 1);
		Если КодСимвола(Число) >= 48 И КодСимвола(Число) <= 57 Тогда 
			ТекИмяФормы = ПроверитьСуществованиеЭлемента(Сред(ИмяЭлем,0,СтрДлина(ИмяЭлем) - 1));
			Возврат ТекИмяФормы;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция УдалитьЦифруСправа(ИмяЭлем)
	Если Найти("0123456789",Прав(ИмяЭлем, 1))> 0 Тогда
		Возврат Лев(ИмяЭлем, СтрДлина(ИмяЭлем)-1);
	Иначе
		Возврат ИмяЭлем;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьНаименованияГрафСхемыВебКлиент(Граф)
	СписокXDTO = СериализаторXDTO.ЗаписатьXDTO(Граф).ПолучитьСписок("item");
	Для Каждого ТекЭлемент Из СписокXDTO Цикл
		мЭлемент = Граф.ЭлементыГрафическойСхемы.Найти(ТекЭлемент.itemCode);
		Если мЭлемент <> Неопределено Тогда
			мНаименование = ТекЭлемент.itemTitle.item;
			enНаименование = "";
			ruНаименование = "";
			Наименование   = "";
			флагЯзык       = Ложь;
			Для Каждого ТекНаименование Из мНаименование Цикл
				Если ТекНаименование.lang = "en" Тогда
					enНаименование = ТекНаименование.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекНаименование.lang = "ru" Тогда
					ruНаименование = ТекНаименование.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекНаименование.lang = "#" Тогда
					Наименование = ТекНаименование.content;
					флагЯзык     = Истина;
				КонецЕсли;
			КонецЦикла;
			Если lang = "en" И флагЯзык Тогда
				ruНаименование = Наименование;
			ИначеЕсли lang = "ru" И флагЯзык Тогда
				enНаименование = Наименование;
			КонецЕсли;
			
			Если СтрНайти(ruНаименование, "'") <> 0 Тогда
				ruНаименование = СтрЗаменить(ruНаименование, "'", "''");
			КонецЕсли;
			
			Если СтрНайти(enНаименование, "'") <> 0 Тогда
				enНаименование = СтрЗаменить(enНаименование, "'", "''");
			КонецЕсли;
				
			мЭлемент.Наименование = Нстр(СтрШаблон("en = '%1'; ru = '%2'", enНаименование, ruНаименование));
			enПодсказка = "";
			ruПодсказка = "";
			Подсказка   = "";
			флагЯзык    = Ложь;
			мПодсказка = ТекЭлемент.tipText.item;
			Для Каждого ТекПодсказка Из мПодсказка Цикл
				Если ТекПодсказка.lang = "en" Тогда
					enПодсказка = ТекПодсказка.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекПодсказка.lang = "ru" Тогда
					ruПодсказка = ТекПодсказка.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекПодсказка.lang = "#" Тогда
					Подсказка = ТекПодсказка.content;
					флагЯзык  = Истина;
				КонецЕсли;
			КонецЦикла;
			Если lang = "en" И флагЯзык Тогда
				ruПодсказка = Подсказка;
			ИначеЕсли lang = "ru" И флагЯзык Тогда
				enПодсказка = Подсказка;
			КонецЕсли;

			Если СтрНайти(ruПодсказка, "'") <> 0 Тогда
				ruПодсказка = СтрЗаменить(ruПодсказка, "'", "''");
			КонецЕсли;
			
			Если СтрНайти(enПодсказка, "'") <> 0 Тогда
				enПодсказка = СтрЗаменить(enПодсказка, "'", "''");
			КонецЕсли;
			
			мЭлемент.Подсказка = Нстр(СтрШаблон("en = '%1'; ru = '%2'", enПодсказка, ruПодсказка));
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

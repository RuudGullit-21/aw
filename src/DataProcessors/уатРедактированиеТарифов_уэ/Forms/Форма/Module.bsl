&НаКлиенте
Перем НужноЗакрытьФорму;
&НаКлиенте
Перем ПолучениеДанныхПослеОчистки;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ЗначенияЗаполнения = Новый Структура();
	Если Параметры.Свойство("Прейскурант") И ЗначениеЗаполнено(Параметры.Прейскурант) Тогда
		ЗначенияЗаполнения.Вставить("Прейскурант", Параметры.Прейскурант);
	КонецЕсли;
	Если Параметры.Свойство("Тариф") И ЗначениеЗаполнено(Параметры.Тариф) Тогда
		ЗначенияЗаполнения.Вставить("Прейскурант",       Параметры.Тариф.Владелец);
		ЗначенияЗаполнения.Вставить("ПараметрВыработки", Параметры.Тариф.ПараметрВыработки);
		Если Параметры.Тариф.СложныйТариф Тогда
			ЗначенияЗаполнения.Вставить("РежимРедактирования", 1);
		Иначе
			ЗначенияЗаполнения.Вставить("РежимРедактирования", 0);
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("ТарифнаяСетка", Параметры.Тариф.ТарифнаяСетка);
		ЗначенияЗаполнения.Вставить("МетодРасчета", Параметры.Тариф.МетодРасчета);
		ЗначенияЗаполнения.Вставить("ТипПункта", Параметры.Тариф.ТипПункта);
		ЗначенияЗаполнения.Вставить("ТипТочкиМаршрута", Параметры.Тариф.ТипТочкиМаршрута);
		ЗначенияЗаполнения.Вставить("ВидУпаковки", Параметры.Тариф.ВидУпаковки);
		ЗначенияЗаполнения.Вставить("ТипКонтейнера", Параметры.Тариф.ТипКонтейнера);
		ЗначенияЗаполнения.Вставить("ВидСкладскойОперации", Параметры.Тариф.ВидСкладскойОперации);
		ЗначенияЗаполнения.Вставить("БазаТарифа", Параметры.Тариф.БазаТарифа);
		ЗначенияЗаполнения.Вставить("КоличествоБесплатныхЕдиниц", Параметры.Тариф.КоличествоБесплатныхЕдиниц);
		ЗначенияЗаполнения.Вставить("УсловиеПримененияФиксТарифа", Параметры.Тариф.УсловиеПримененияФиксТарифа);
		Если Параметры.Тариф.ТарифнаяСетка Тогда
			ЗначенияЗаполнения.Вставить("Тариф", Параметры.Тариф);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если ЗначенияЗаполнения.Свойство("МетодРасчета") Тогда
		Объект.МетодРасчета = ЗначенияЗаполнения.МетодРасчета;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("РежимРедактирования") Тогда
		флСложныйТариф = ЗначенияЗаполнения.РежимРедактирования;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("ТарифнаяСетка") Тогда
		флТарифнаяСетка = ЗначенияЗаполнения.ТарифнаяСетка;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("ТипПункта") Тогда
		Объект.ТипПункта = ЗначенияЗаполнения.ТипПункта;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("ТипТочкиМаршрута") Тогда
		Объект.ТипТочкиМаршрута = ЗначенияЗаполнения.ТипТочкиМаршрута;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("ВидУпаковки") Тогда
		Объект.ВидУпаковки = ЗначенияЗаполнения.ВидУпаковки;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("ТипКонтейнера") Тогда
		Объект.ТипКонтейнера = ЗначенияЗаполнения.ТипКонтейнера;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("ВидСкладскойОперации") Тогда
		Объект.ВидСкладскойОперации = ЗначенияЗаполнения.ВидСкладскойОперации;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("БазаТарифа") Тогда
		Объект.БазаТарифа = ЗначенияЗаполнения.БазаТарифа;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("КоличествоБесплатныхЕдиниц") Тогда
		Объект.КоличествоБесплатныхЕдиниц = ЗначенияЗаполнения.КоличествоБесплатныхЕдиниц;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("УсловиеПримененияФиксТарифа") Тогда
		Объект.УсловиеПримененияФиксТарифа = ЗначенияЗаполнения.УсловиеПримененияФиксТарифа;
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("Тариф") Тогда
		ТарифСетка = ЗначенияЗаполнения.Тариф;
	КонецЕсли;
		
	Элементы.ФормаОтображатьТекущиеТарифы.Пометка = ОтображатьТекущиеТарифы;
	
	УстановитьКолонкиТарифаПоУмолчаниюСервер();
	
	Если ЗначенияЗаполнения.Свойство("Прейскурант") Тогда
		Объект.Прейскурант = ЗначенияЗаполнения.Прейскурант;
		
		Если ЗначенияЗаполнения.Свойство("ПараметрВыработки") Тогда 
			Объект.ПараметрВыработки = ЗначенияЗаполнения.ПараметрВыработки;
			
			ПолучениеДанныхПослеОчистки = Истина;
			ОчиститьТЧВопрос("", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДоступность();
	УстановитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ НЕ Модифицированность Тогда 
		НужноЗакрытьФорму = Истина;
		Возврат;
		
	ИначеЕсли НужноЗакрытьФорму <> Истина Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ТекстНСТР = НСтр("en='Data processor ""Edit of tariffs"" will be closed. Continue?';ru='Обработка ""Редактирование тарифов"" будет закрыта. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НужноЗакрытьФорму = Неопределено;
	Иначе
		НужноЗакрытьФорму = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатТарифыТС") Тогда
		ЗаполнитьОсновныеРеквизитыПоВыбранномуТарифу(ВыбранноеЗначение);
		ОчиститьТЧЗавершениеНаСервере(ПолучениеДанныхПослеОчистки);
		ОбновитьДоступность();
		УстановитьВидимость();
	КонецЕсли;
	 	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрейскурантПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Price list has changed, the tabular section will be cleared! Continue?';ru='Изменился прейскурант, табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Ложь;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
	
	Объект.ТипПункта = Неопределено;
	Объект.ТипТочкиМаршрута = Неопределено;
	Объект.ВидУпаковки = Неопределено;
	Объект.ВидСкладскойОперации = Неопределено;
	Объект.БазаТарифа = Неопределено;
	Объект.КоличествоБесплатныхЕдиниц = 0;
КонецПроцедуры

&НаКлиенте
Процедура ТипПунктаПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипТочкиМаршрутаПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидУпаковкиПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидСкладскойОперацииПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура БазаТарифаПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТарифСеткаПриИзменении(Элемент)
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияОтборПриИзменении(Элемент)
	
	Если Объект.ОбластьДействияОтбор <> Объект.предОбластьДействияОтбор Тогда
		
		Если ЗначениеЗаполнено(Объект.ОбластьДействияОтбор) Тогда
			ПолучитьУстановитьТип(Объект.ОбластьДействияОтбор);
			
			Элементы.ЗначениеОбласти.Доступность = Истина;
			Элементы.ЗначениеОбласти.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Объект.ЗначениеОбласти = Неопределено;
			Элементы.ЗначениеОбласти.Доступность = Ложь;
			Элементы.ЗначениеОбласти.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Объект.предОбластьДействияОтбор = Объект.ОбластьДействияОтбор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияОтборОчистка(Элемент, СтандартнаяОбработка)
	
	ВремСравнение = Объект.ОбластьДействияОтбор;
	Объект.ОбластьДействияОтбор = Неопределено;
	Если Объект.ОбластьДействияОтбор <> ВремСравнение Тогда
		
		Объект.ЗначениеОбласти = Неопределено;
		Элементы.ЗначениеОбласти.Доступность = Ложь;
		Элементы.ЗначениеОбласти.АвтоОтметкаНезаполненного = Ложь;
		ТекстНСТР = НСтр("en='Selection parameters have been changed. The data in the tabular section will be loaded again. Continue?';ru='Параметры отбора изменены. Данные табличной части будут загружены повторно. Продолжить?'");
		ПолучениеДанныхПослеОчистки = Истина;
		ОчиститьТЧВопрос(ТекстНСТР, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбластиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
		
		Если Объект.ЗначениеОбласти <> Объект.предЗначениеОбласти Тогда
			ТекстНСТР = НСтр("en='Selection parameters have been changed. The data in the tabular section will be loaded again. Continue?';ru='Параметры отбора изменены. Данные табличной части будут загружены повторно. Продолжить?'");
			ПолучениеДанныхПослеОчистки = Истина;
			ОчиститьТЧВопрос(ТекстНСТР, Истина);
		КонецЕсли;
		
	Иначе
		Объект.ЗначениеОбласти = Объект.предЗначениеОбласти;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураУслугиОтборПриИзменении(Элемент)
	Если Объект.НоменклатураУслугиОтбор <> Объект.предНоменклатураУслугиОтбор Тогда
		ТекстНСТР = НСтр("en='Selection parameters have been changed. The data in the tabular section will be loaded again. Continue?';ru='Параметры отбора изменены. Данные табличной части будут загружены повторно. Продолжить?'");
		ПолучениеДанныхПослеОчистки = Истина;
		ОчиститьТЧВопрос(ТекстНСТР, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифаОтборПриИзменении(Элемент)
	Если Объект.ГруппировкаТарифаОтбор <> Объект.предГруппировкаТарифаОтбор Тогда
		ТекстНСТР = НСтр("en='Selection parameters have been changed. The data in the tabular section will be loaded again. Continue?';ru='Параметры отбора изменены. Данные табличной части будут загружены повторно. Продолжить?'");
		ПолучениеДанныхПослеОчистки = Истина;
		ОчиститьТЧВопрос(ТекстНСТР, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифаОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборГруппировкиТарифаОткрытьФорму(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МетодРасчетаПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПримененияФиксТарифаПриИзменении(Элемент)
	Если Объект.УсловиеПримененияФиксТарифа = 1 Тогда
		//Объект.ПараметрВыработки = Неопределено;
		//ПараметрВыработкиПриИзменении(Неопределено);
		
		Для Каждого ТекСтрока Из ТарифнаяСетка Цикл
			ТекСтрока.МинимальноеКоличество = 0;
			ТекСтрока.МинимальнаяСтоимость = 0;
			ТекСтрока.СпособЗаполненияКоличества = "Фактическое";
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура флТарифнаяСеткаПриИзменении(Элемент)
	Если флТарифнаяСетка Тогда
		ТарифСетка = Неопределено;
	КонецЕсли;
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Ложь, Истина);
	
	//ЗагрузитьТарифыСервер();
	//УпорядочитьКолонки();
КонецПроцедуры
&НаКлиенте
Процедура МетодРасчетаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура флСложныйТарифНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура флТарифнаяСеткаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа1ПриИзменении(Элемент)
	Если ГруппировкаТарифа1 = предГруппировкаТарифа1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппировкаТарифа1) Тогда
		ГруппировкаТарифа1 = предГруппировкаТарифа1;
		ТекстНСТР = НСтр("en='For complex rate group 1 must be specified!';ru='Для сложного тарифа группировка 1 должна быть указана!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ГруппировкаТарифа1) И ЕстьОдинаковыеГруппировки() Тогда
		ТекстНСТР = НСтр("en='All groups must be different!';ru='Все группировки должны быть различными!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		ГруппировкаТарифа1 = предГруппировкаТарифа1;
		Возврат;
	КонецЕсли;
	
	предГруппировкаТарифа1 = ГруппировкаТарифа1;
	
	УпорядочитьКолонки();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборГруппировкиТарифаОткрытьФорму(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборГруппировкиТарифаОткрытьФорму(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа2ПриИзменении(Элемент)
	Если ГруппировкаТарифа2 = предГруппировкаТарифа2 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппировкаТарифа2)
		И (ЗначениеЗаполнено(ГруппировкаТарифа3) ИЛИ ЗначениеЗаполнено(ГруппировкаТарифа4)) Тогда
		
		ГруппировкаТарифа2 = предГруппировкаТарифа2;
		ТекстНСТР = НСтр("en='Cleanup of group 2 is prohibited if specified group 3 or 4!';ru='Очистка группировки 2 запрещена, если указана группировка 3 или 4!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппировкаТарифа2) И ЕстьОдинаковыеГруппировки() Тогда
		ТекстНСТР = НСтр("en='All groups must be different!';ru='Все группировки должны быть различными!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		ГруппировкаТарифа2 = предГруппировкаТарифа2;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппировкаТарифа2) Тогда
		ОповещениеВопросОчисткаГруппировки2 = Новый ОписаниеОповещения("ВопросОчисткаГруппировки2Завершение", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Part of data may be deleted! Continue?';ru='Часть данных возможно будет удалена! Продолжить?'");
		ПоказатьВопрос(ОповещениеВопросОчисткаГруппировки2, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(2);
	УпорядочитьКолонки();
	
	предГруппировкаТарифа2 = ГруппировкаТарифа2;
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчисткаГруппировки2Завершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(2);
		УпорядочитьКолонки();
		
		предГруппировкаТарифа2 = ГруппировкаТарифа2;
	Иначе
		ГруппировкаТарифа2 = предГруппировкаТарифа2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборГруппировкиТарифаОткрытьФорму(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа3ПриИзменении(Элемент)
	Если ГруппировкаТарифа3 = предГруппировкаТарифа3 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппировкаТарифа3) И ЗначениеЗаполнено(ГруппировкаТарифа4) Тогда
		ГруппировкаТарифа3 = предГруппировкаТарифа3;
		ТекстНСТР = НСтр("en='Cleanup of group 3 is prohibited if specified group 4!';ru='Очистка группировки 3 запрещена, если указана группировка 4!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппировкаТарифа3) И ЕстьОдинаковыеГруппировки() Тогда
		ТекстНСТР = НСтр("en='All groups must be different!';ru='Все группировки должны быть различными!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		ГруппировкаТарифа3 = предГруппировкаТарифа3;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппировкаТарифа3) Тогда
		ОповещениеВопросОчисткаГруппировки3 = Новый ОписаниеОповещения("ВопросОчисткаГруппировки3Завершение", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Part of data may be deleted! Continue?';ru='Часть данных возможно будет удалена! Продолжить?'");
		ПоказатьВопрос(ОповещениеВопросОчисткаГруппировки3, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
		
	СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(3);
	УпорядочитьКолонки();
	
	предГруппировкаТарифа3 = ГруппировкаТарифа3;
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчисткаГруппировки3Завершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(3);
		УпорядочитьКолонки();
		
		предГруппировкаТарифа3 = ГруппировкаТарифа3;
	Иначе
		ГруппировкаТарифа3 = предГруппировкаТарифа3;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборГруппировкиТарифаОткрытьФорму(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа4ПриИзменении(Элемент)
	Если ГруппировкаТарифа4 = предГруппировкаТарифа4 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппировкаТарифа4) И ЕстьОдинаковыеГруппировки() Тогда
		ТекстНСТР = НСтр("en='All groups must be different!';ru='Все группировки должны быть различными!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		ГруппировкаТарифа4 = предГруппировкаТарифа4;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппировкаТарифа4) Тогда
		ОповещениеВопросОчисткаГруппировки4 = Новый ОписаниеОповещения("ВопросОчисткаГруппировки4Завершение", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Part of data may be deleted! Continue?';ru='Часть данных возможно будет удалена! Продолжить?'");
		ПоказатьВопрос(ОповещениеВопросОчисткаГруппировки4, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
		
	СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(4);
	УпорядочитьКолонки();
	
	предГруппировкаТарифа4 = ГруппировкаТарифа4;
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчисткаГруппировки4Завершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(4);
		УпорядочитьКолонки();
		
		предГруппировкаТарифа4 = ГруппировкаТарифа4;
	Иначе
		ГруппировкаТарифа4 = предГруппировкаТарифа4;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЕстьОдинаковыеГруппировки()
	Возврат (ГруппировкаТарифа1 = ГруппировкаТарифа2 ИЛИ ГруппировкаТарифа1 = ГруппировкаТарифа3
		ИЛИ ГруппировкаТарифа1 = ГруппировкаТарифа4 ИЛИ ГруппировкаТарифа2 = ГруппировкаТарифа3
		ИЛИ ГруппировкаТарифа2 = ГруппировкаТарифа4 ИЛИ ГруппировкаТарифа3 = ГруппировкаТарифа4);
КонецФункции
	
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТарифнаяСетка

&НаКлиенте
Процедура ТарифнаяСеткаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ТарифнаяСетка.ТекущиеДанные.ID = Новый УникальныйИдентификатор;
		ТарифнаяСеткаПриНачалеРедактированияНаСервере(Элементы.ТарифнаяСетка.ТекущиеДанные.ID);
		Элементы.ТарифнаяСетка.ТекущиеДанные.ТарифСсылка = Неопределено;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаПриИзменении(Элемент)
	ОбновитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаТарифПриИзменении(Элемент)
	ТекСтрока = Элементы.ТарифнаяСетка.ТекущиеДанные;
	ТекСтрока.МинимальнаяСтоимость = ТекСтрока.МинимальноеКоличество * ТекСтрока.Тариф;
	
	Если ТекСтрока.ТекущийТариф = 0 Тогда
		ТекСтрока.ПроцентИзмененияТарифа = 0;
	Иначе
		ТекСтрока.ПроцентИзмененияТарифа = (ТекСтрока.Тариф / ТекСтрока.ТекущийТариф - 1)*100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаПроцентИзмененияТарифаПриИзменении(Элемент)
	ТекСтрока = Элементы.ТарифнаяСетка.ТекущиеДанные;
	ТекСтрока.Тариф = ТекСтрока.ТекущийТариф * (1 + ТекСтрока.ПроцентИзмененияТарифа/100);
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаМинимальноеКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ТарифнаяСетка.ТекущиеДанные;
	ТекСтрока.МинимальнаяСтоимость = ТекСтрока.МинимальноеКоличество * ТекСтрока.Тариф;
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаМинимальнаяСтоимостьПриИзменении(Элемент)
	ТекСтрока = Элементы.ТарифнаяСетка.ТекущиеДанные;
	Если ТекСтрока.Тариф = 0 Тогда
		ТекСтрока.МинимальноеКоличество = 0;
	Иначе
		ТекСтрока.МинимальноеКоличество = ТекСтрока.МинимальнаяСтоимость / ТекСтрока.Тариф;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаГруппировкаТарифПриИзменении(Элемент)
	ТекСтрока = Элементы.ТарифнаяСетка.ТекущиеДанные;
	Если ТекСтрока[Элемент.Имя + "ТекущийТариф"] = 0 Тогда
		ТекСтрока[Элемент.Имя + "ПроцентИзмененияТарифа"] = 0;
	Иначе
		ТекСтрока[Элемент.Имя + "ПроцентИзмененияТарифа"] = (ТекСтрока[Элемент.Имя] / ТекСтрока[Элемент.Имя + "ТекущийТариф"] - 1) * 100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаГруппировкаТарифаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборГруппировкиТарифаОткрытьФорму(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаГруппировкаПроцентИзмененияТарифаПриИзменении(Элемент)
	ТекСтрока = Элементы.ТарифнаяСетка.ТекущиеДанные;
	ИмяГруппировки = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("ПроцентИзмененияТарифа"));
	ТекСтрока[ИмяГруппировки] = ТекСтрока[ИмяГруппировки + "ТекущийТариф"] * (1 + ТекСтрока[Элемент.Имя]/100);
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаОбластьДействияСписокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ТипЗначений = СтруктураСоответствий.СоответствиеТипов[Лев(Элемент.Имя, СтрДлина(Элемент.Имя)-6)];
	СписЗначений = Элементы.ТарифнаяСетка.ТекущиеДанные[Элемент.Имя];
	СписЗначений.ТипЗначения = ТипЗначений;
	
	ПараметрыФормы = Новый Структура("Список, ТипЗначений, Заголовок", СписЗначений, ТипЗначений, СтруктураСоответствий.СоответствиеЗаголовка[Элемент.Имя]);
	ОповещЗакрытие = Новый ОписаниеОповещения("ТарифнаяСеткаОбластьДействияСписокВыбор", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРедактированиеТарифов_уэ.Форма.СписокЗначенийОбластиДействия", ПараметрыФормы, Элемент,,,, ОповещЗакрытие);
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаОбластьДействияСписокВыбор(ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТарифнаяСетка.ТекущиеДанные[Элементы.ТарифнаяСетка.ТекущийЭлемент.Имя] = ВыбранноеЗначение;
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	флОК = Ложь;
	
	ЗаписатьТарифыСервер(флОК);
	
	Если флОК Тогда
		ПолучениеДанныхПослеОчистки = Истина;
		ОчиститьТЧЗавершениеНаСервере(ПолучениеДанныхПослеОчистки);
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Ложь,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Ложь;
	ОчиститьТЧВопрос(ТекстНСТР, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧВопрос(ТекстВопроса, ВыборЗначений, ИзменениеРежима = Ложь, ИзменениеТарифСетка = Ложь, ЗагрузкаТарифа = Ложь)
	
	Если (НЕ ИзменениеРежима) И ПолучениеДанныхПослеОчистки
		И ЗначениеЗаполнено(Объект.ОбластьДействияОтбор) И НЕ ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
		
		ТекстНСТР = НСтр("en='Not specified action area value in selections!';ru='Не заполнено значение области действия в отборах!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Объект.предЗначениеОбласти = Объект.ЗначениеОбласти;
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыборЗначений", ВыборЗначений);	
	ДопПараметры.Вставить("ИзменениеРежима", ИзменениеРежима);
	ДопПараметры.Вставить("ИзменениеТарифСетка", ИзменениеТарифСетка);
	ДопПараметры.Вставить("ЗагрузкаТарифа", ЗагрузкаТарифа);
	
	Если ТарифнаяСетка.Количество() ИЛИ ТаблицаИнтервалов.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТЧЗавершение", ЭтотОбъект, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);	
	Иначе
		ОчиститьТЧЗавершение(КодВозвратаДиалога.Да, ДопПараметры);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Если флТарифнаяСетка ИЛИ ДополнительныеПараметры.ИзменениеТарифСетка Тогда
			ГруппировкаТарифа1 = Неопределено;
			ГруппировкаТарифа2 = Неопределено;
			ГруппировкаТарифа3 = Неопределено;
			ГруппировкаТарифа4 = Неопределено;
			Объект.ОбластьДействияОтбор = Неопределено;
			Объект.ЗначениеОбласти = Неопределено;
			Объект.ГруппировкаТарифаОтбор = Неопределено;
			Объект.НоменклатураУслугиОтбор = Неопределено;
		КонецЕсли;
		Если ДополнительныеПараметры.ЗагрузкаТарифа Тогда
			ОткрытьФорму("Справочник.уатТарифыТС.ФормаВыбора",, ЭтаФорма);
			Возврат;
		Иначе
			ОчиститьТЧЗавершениеНаСервере(ПолучениеДанныхПослеОчистки);
		КонецЕсли;
	Иначе
		Если ДополнительныеПараметры.ВыборЗначений Тогда	
			Объект.Прейскурант = Объект.предПрейскурант;
			Объект.ПараметрВыработки = Объект.предПараметрВыработки;
			Объект.ОбластьДействияОтбор = Объект.предОбластьДействияОтбор;
			Объект.ГруппировкаТарифаОтбор = Объект.предГруппировкаТарифаОтбор;
			Объект.НоменклатураУслугиОтбор = Объект.предНоменклатураУслугиОтбор;
			Объект.ЗначениеОбласти = Объект.предЗначениеОбласти;	
			Объект.МетодРасчета = Объект.предМетодРасчета;
			Объект.ТипПункта = Объект.предТипПункта;
			Объект.ТипТочкиМаршрута = Объект.предТипТочкиМаршрута;
			Объект.ВидУпаковки = Объект.предВидУпаковки;
			Объект.ВидСкладскойОперации = Объект.предВидСкладскойОперации;
			Объект.БазаТарифа = Объект.предБазаТарифа;
			Объект.УсловиеПримененияФиксТарифа = Объект.предУсловиеПримененияФиксТарифа;
		КонецЕсли;
		Если ДополнительныеПараметры.ИзменениеРежима Тогда
			флСложныйТариф = НЕ флСложныйТариф;
		КонецЕсли;
		Если ДополнительныеПараметры.ИзменениеТарифСетка Тогда
			флТарифнаяСетка = НЕ флТарифнаяСетка;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТЧЗавершениеНаСервере(мПолучениеДанныхПослеОчистки)
	
	ТарифнаяСетка.Очистить();
	
	// ОбновлениеРеквизитовОбластейДействия (Начало)
	
	// Если есть удалим все реквизиты и элементы областей действия
	Если ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
		СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		мсвУдаляемыеРеквизиты = Новый Массив;
		Для Каждого ТекОблДействия Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл
			мИмя = ТекОблДействия.Ключ;	
			мПуть = "ТарифнаяСетка." + мИмя;
			
			Если ТекОблДействия.Значение Тогда
				Элементы.Удалить(Элементы[мИмя]);
			КонецЕсли;
			
			мсвУдаляемыеРеквизиты.Добавить(мПуть);
		КонецЦикла;
		
		ИзменитьРеквизиты(, мсвУдаляемыеРеквизиты);
	КонецЕсли;
	
	СтруктураСоответствий = Новый Структура;
	СтруктураСоответствий.Вставить("СоответствиеКомпоновок", Новый Соответствие); // содержит структуру [IDстроки, КомпоновкаОбластиДействия]
	СтруктураСоответствий.Вставить("СоответствиеВидимостиПолейКомпоновки", Новый Структура); // видимость колонок области действия [ИмяОбластиДействия, ВидимостьКолонки]
	СтруктураСоответствий.Вставить("СоответствиеЛевогоЗначения", Новый Структура); // структура полей компоновки области действия [ИмяОбластиДействия, ПолеКомпоновки]
	СтруктураСоответствий.Вставить("СоответствиеЗаголовка", Новый Структура); // структура заголовков колонок области действия [ИмяОбластиДействия, ЗаголовокКолонки]
	СтруктураСоответствий.Вставить("СоответствиеТипов", Новый Структура); // структура типов значений области действия [ИмяОбластиДействия, ТипЗначения]
	СтруктураСоответствий.Вставить("МассивОбластейДействияСписокЗначений", Новый Массив); // массив имен области действия со значением типа список значений
	
	ЭтоПроф = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
		
	Если Объект.Прейскурант.ПрейскурантПоставщика Тогда
		Если ЭтоПроф Тогда
			СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты_проф");
		Иначе
			СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты");
		КонецЕсли;
	Иначе
		Если ЭтоПроф Тогда
			СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия_проф");
		Иначе //Логистика, Стандарт
			СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия");
		КонецЕсли;
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ТекКомпоновщикНастроекОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	ТекКомпоновщикНастроекОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	ДоступныеПоляОтбора = ТекКомпоновщикНастроекОтбора.Настройки.ДоступныеПоляОтбора.Элементы;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ТекПолеОтбора Из ДоступныеПоляОтбора Цикл
		мИмя = Строка(ТекПолеОтбора.Поле);
		
		Если мИмя = "Раздел" ИЛИ мИмя = "Ссылка" Тогда //служебные поля игнорируем
			Продолжить;
		КонецЕсли;
		
		мЗаголовок = ТекПолеОтбора.Заголовок;
		мТип = ТекПолеОтбора.Тип;
		мПуть = "ТарифнаяСетка"; 
		
		СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки.Вставить(мИмя, Ложь); 
		СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки.Вставить(мИмя + "Список", Ложь); 
		СтруктураСоответствий.СоответствиеЛевогоЗначения.Вставить(мИмя, ТекПолеОтбора.Поле);
		СтруктураСоответствий.СоответствиеЗаголовка.Вставить(мИмя, ТекПолеОтбора.Заголовок);
		СтруктураСоответствий.СоответствиеЗаголовка.Вставить(мИмя + "Список", ТекПолеОтбора.Заголовок + " (список)");
		СтруктураСоответствий.СоответствиеТипов.Вставить(мИмя, ТекПолеОтбора.Тип);
		
		Реквизит = Новый РеквизитФормы(мИмя, мТип, мПуть, мЗаголовок, Истина); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		// добавляем список значений
		Реквизит = Новый РеквизитФормы(мИмя + "Список", Новый ОписаниеТипов("СписокЗначений"), мПуть, мЗаголовок + " (список)", Истина); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЦикла;
	
	// добавляем грузоподъемность и объем кузова
	Если НЕ флТарифнаяСетка Тогда
		мТип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3));
		СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки.Вставить("Грузоподъемность", Ложь); 
		СтруктураСоответствий.СоответствиеЛевогоЗначения.Вставить("Грузоподъемность", Новый ПолеКомпоновкиДанных("МодельТягача.Грузоподъемность"));
		СтруктураСоответствий.СоответствиеЗаголовка.Вставить("Грузоподъемность", "Грузоподъемность");
		СтруктураСоответствий.СоответствиеТипов.Вставить("Грузоподъемность", мТип);
		Реквизит = Новый РеквизитФормы("Грузоподъемность", мТип, "ТарифнаяСетка", "Грузоподъемность", Истина); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		мТип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3));
		СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки.Вставить("ОбъемКузова", Ложь); 
		СтруктураСоответствий.СоответствиеЛевогоЗначения.Вставить("ОбъемКузова", Новый ПолеКомпоновкиДанных("МодельТягача.ОбъемКузова"));
		СтруктураСоответствий.СоответствиеЗаголовка.Вставить("ОбъемКузова", "Объем кузова");
		СтруктураСоответствий.СоответствиеТипов.Вставить("ОбъемКузова", мТип);
		Реквизит = Новый РеквизитФормы("ОбъемКузова", мТип, "ТарифнаяСетка", "Объем кузова", Истина); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураСоответствий, УникальныйИдентификатор);
	
	// ОбновлениеРеквизитовОбластейДействия (Конец)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	
	Элементы.ОбластьДействияОтбор.СписокВыбора.Очистить();
	ИндексМассива = -1;
	Для Каждого ТекИмя Из СтруктураПараметров.МассивИмен Цикл
		ИндексМассива = ИндексМассива + 1;
		
		Если НЕ флТарифнаяСетка И Прав(ТекИмя, 6) = "Список" Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ОбластьДействияОтбор.СписокВыбора.Добавить(ТекИмя, СтруктураПараметров.МассивЗаголовков[ИндексМассива]);
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	КолонкиТарифнойСетки = ТарифнаяСетка.Выгрузить().Колонки;
	Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл
		УдаляемыеЭлементы.Добавить(ТекИнтервал.Имя);
		УдаляемыеРеквизиты.Добавить(ТекИнтервал.Путь);
		Если КолонкиТарифнойСетки.Найти(ТекИнтервал.Имя + "ТекущийТариф") <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ТекИнтервал.Путь + "ТекущийТариф");
			Если Элементы.Найти(ТекИнтервал.Имя + "ТекущийТариф") <> Неопределено Тогда
				УдаляемыеЭлементы.Добавить(ТекИнтервал.Имя + "ТекущийТариф");
			КонецЕсли;
		КонецЕсли;
		Если КолонкиТарифнойСетки.Найти(ТекИнтервал.Имя + "ПроцентИзмененияТарифа") <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ТекИнтервал.Путь + "ПроцентИзмененияТарифа");
			Если Элементы.Найти(ТекИнтервал.Имя + "ПроцентИзмененияТарифа") <> Неопределено Тогда
				УдаляемыеЭлементы.Добавить(ТекИнтервал.Имя + "ПроцентИзмененияТарифа");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	УдалитьГруппуЭлементовРеквизитов(УдаляемыеЭлементы, УдаляемыеРеквизиты);
	
	ТаблицаИнтервалов.Очистить();
	
	Объект.предПрейскурант = Объект.Прейскурант;
	Объект.предПараметрВыработки = Объект.ПараметрВыработки;
	Объект.предОбластьДействияОтбор = Объект.ОбластьДействияОтбор;
	Объект.предГруппировкаТарифаОтбор = Объект.ГруппировкаТарифаОтбор;
	Объект.предНоменклатураУслугиОтбор = Объект.НоменклатураУслугиОтбор;
	Объект.предЗначениеОбласти = Объект.ЗначениеОбласти;
	Объект.предМетодРасчета = Объект.МетодРасчета;
	Объект.предТипПункта = Объект.ТипПункта;
	Объект.предТипТочкиМаршрута = Объект.ТипТочкиМаршрута;
	Объект.предВидУпаковки = Объект.ВидУпаковки;
	Объект.предВидСкладскойОперации = Объект.ВидСкладскойОперации;
	Объект.предБазаТарифа = Объект.БазаТарифа;
	Объект.предУсловиеПримененияФиксТарифа = Объект.УсловиеПримененияФиксТарифа;
	
	Если мПолучениеДанныхПослеОчистки = Истина Тогда
		Если флТарифнаяСетка И ТарифСетка.Пустая() Тогда
			НайтиТарифСеткой();
		КонецЕсли;
		ЗагрузитьТарифыСервер();
		УпорядочитьКолонки();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбласть(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	
	СписокВыбора = Новый СписокЗначений();
	
	ИндексМассива = 0;
	Для Каждого ТекИмя Из СтруктураПараметров.МассивИмен Цикл
		Если Прав(ТекИмя, 6) <> "Список" Тогда
			СписокВыбора.Добавить(ТекИмя, СтруктураПараметров.МассивЗаголовков[ИндексМассива]);
		КонецЕсли;
		ИндексМассива = ИндексМассива + 1;
	КонецЦикла;
	ИндексМассива = 0;
	Для Каждого ТекИмя Из СтруктураПараметров.МассивИмен Цикл
		Если Прав(ТекИмя, 6) = "Список" Тогда
			СписокВыбора.Добавить(ТекИмя, СтруктураПараметров.МассивЗаголовков[ИндексМассива]);
		КонецЕсли;
		ИндексМассива = ИндексМассива + 1;
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОбластьЗавершение", ЭтотОбъект);
	
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбластьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьОбластьНаСервере(Результат.Значение);
	УпорядочитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбласть(Команда)
	
	СписокВыбора = ПолучитьСписокДобавленныхОбластей();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьОбластьЗавершение", ЭтотОбъект);
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбластьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьОбластьНаСервере(Результат.Значение);
	УпорядочитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтервалКоманда(Команда)
	ДобавитьИнтервал();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтервал(ДополнительныеПараметры = Неопределено)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИнтервалЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если флТарифнаяСетка Тогда
		Если ЗначениеЗаполнено(ГруппировкаТарифа1) Тогда         
			ПараметрыФормы = Новый Структура("ГруппировкаТарифа1, ГруппировкаТарифа2, ГруппировкаТарифа3, ГруппировкаТарифа4",
				ГруппировкаТарифа1, ГруппировкаТарифа2, ГруппировкаТарифа3, ГруппировкаТарифа4);
			ОткрытьФорму("Обработка.уатРедактированиеТарифов_уэ.Форма.ДобавлениеИнтервала", ПараметрыФормы,,,,, ОписаниеОповещения);
		Иначе
			ТекстНСТР = НСтр("en='Prohibited adding interval without specifying at least one group';ru='Запрещено добавление интервала без указания хотя бы одной группировки'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
	Иначе
		ПоказатьВводЧисла(ОписаниеОповещения,,, 10, 3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтервалЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	ИмяНовойКолонки = "";
	
	Если Число = Неопределено Тогда 
		Возврат;
		
	ИначеЕсли ТипЗнч(Число) = Тип("Структура") Тогда
		ДобавитьИнтервалНаСервере(Число.ЗначениеГруппировки1, Число.ЗначениеГруппировки2,
			Число.ЗначениеГруппировки3, Число.ЗначениеГруппировки4, ИмяНовойКолонки);
		
	ИначеЕсли Число < 0 Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify positive interval value.';ru='Необходимо указать положительное значение интервала.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	Иначе
		ДобавитьИнтервалНаСервере(Число,,,, ИмяНовойКолонки);
		
	КонецЕсли;
	
	// Переносим значения в новую колонку и удаляем старую колонку, если выполняется изменение интервала
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.ИзменениеИнтервала Тогда
		Для Сч = 0 По ТарифнаяСетка.Количество()-1 Цикл
			ТарифнаяСетка[Сч][ИмяНовойКолонки] = ТарифнаяСетка[Сч][ДополнительныеПараметры.ИмяСтаройКолонки];
		КонецЦикла;
		УдалитьИнтервалНаСервере(ДополнительныеПараметры.ИмяСтаройКолонки);
	КонецЕсли;
		
	УпорядочитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИнтервалКоманда(Команда)
	УдалитьИнтервал(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтервалКоманда(Команда)
	УдалитьИнтервал();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтервал(флИзменениеИнтервала = Ложь)
	
	СписокВыбора = Новый СписокЗначений();
	Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл 
		ИнтервалПредставление = "<= " + ТекИнтервал.Интервал + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа1)
			+ ?(ЗначениеЗаполнено(ТекИнтервал.Интервал2), " / <= " + ТекИнтервал.Интервал2 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа2), "")
			+ ?(ЗначениеЗаполнено(ТекИнтервал.Интервал3), " / <= " + ТекИнтервал.Интервал3 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа3), "")
			+ ?(ЗначениеЗаполнено(ТекИнтервал.Интервал4), " / <= " + ТекИнтервал.Интервал4 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа4), "");
		
		СписокВыбора.Добавить(ТекИнтервал.Имя, ИнтервалПредставление);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИнтервалЗавершение", ЭтотОбъект,
		?(флИзменениеИнтервала, Новый Структура("ИзменениеИнтервала", Истина), Неопределено));
	
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтервалЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Если выполняется изменение интервала,
	// добавляем новый интервал, и только после добавления нового нужно удалить старый,
	// чтобы не было момента времени, когда интервал удален, но новый еще не добавлен.
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.ИзменениеИнтервала Тогда
		ДополнительныеПараметры.Вставить("ИмяСтаройКолонки", Результат.Значение);
		
		ДобавитьИнтервал(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	УдалитьИнтервалНаСервере(Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	#Если ВебКлиент Тогда
		ТекстНСТР = НСтр("en='Export to Excel is not available in the Web client.';ru='Выгрузка в Excel недоступна в Web-клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	#ИначеЕсли МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда 
		ТекстНСТР = НСтр("ru='Выгрузка в Excel недоступна в мобильном клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	#Иначе
		ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр                      = НСтр("en='Data file';ru='Файл данных'") + " (*.xls)|*.xls";
		ДиалогВыбораФайла.Заголовок                   = НСтр("en='Select file';ru='Выберите файл'");
		ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
		Если ЗначениеЗаполнено(Объект.Прейскурант) Тогда
			ДиалогВыбораФайла.ПолноеИмяФайла          = "" + Объект.Прейскурант + ".xls";
		Иначе
			ДиалогВыбораФайла.Расширение              = "xls";
		КонецЕсли;
		ДиалогВыбораФайла.ИндексФильтра               = 0;
		ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыполнитьВыгрузкуЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Если ВыбранныеФайлы = Неопределено Тогда 
        Возврат;
    КонецЕсли;
	
	ФайлВыгрузки = ВыбранныеФайлы[0];
    
	Если ПустаяСтрока(ФайлВыгрузки) Тогда
		ТекстОшибки = НСтр("en='It is necessary to specify the tariffs upload file.';ru='Необходимо указать файл выгрузки тарифов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВыполнитьВыгрузкуЗавершениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершениеФрагмент()
    
    Перем ДанныеХранилища;
	
	ВыполнитьВыгрузкуExcelНаСервере();
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилищаФайлВыгрузки);
		
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент И НЕ МобильноеПриложениеКлиент Тогда
		ДанныеХранилища.Записать(ФайлВыгрузки);
		НачатьЗапускПриложения(Новый ОписаниеОповещения("Подключаемый_ОписаниеОповещенияЗапускExcel", ЭтотОбъект), ФайлВыгрузки);
	#Иначе
		ТекстНСТР = НСтр("en='Tariffs FMS';ru='Тарифы УАТ'") + ".xls";
		ПолучитьФайл(АдресХранилищаФайлВыгрузки, ТекстНСТР);
		//ПолучитьФайл(АдресХранилищаФайлВыгрузки, ФайлВыгрузки);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияЗапускExcel(Рез, ДопПараметры) Экспорт
	ПочемуНекорректноеОписаниеМетодаНачатьЗапускПриложения = Истина;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВыгрузкуExcelНаСервере()
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	УникальныйИД                   = Новый УникальныйИдентификатор;
	ИмяВременногоФайлаОбмена       = КаталогВременныхФайлов() + УникальныйИД + "_UATtarifs.xls";
	
	//Если ПустаяСтрока(АдресХранилищаФайлВыгрузки) Тогда
	//	ИмяВременногоФайлаОбменаВеб = ПолучитьИмяВременногоФайла("xls");
	//	
	//	Попытка
	//		ФайлОбмена = Новый ТекстовыйДокумент;
	//		ФайлОбмена.Записать(ИмяВременногоФайлаОбменаВеб);
	//	Исключение
	//		Сообщить("Не удалось создать файл обмена в операционной системе");
	//		Возврат;
	//	КонецПопытки;
	//	
	//	АдресХранилищаФайлВыгрузки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаОбменаВеб), УникальныйИдентификатор);
	//КонецЕсли;
	
	//ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилищаФайлВыгрузки);
	//ДанныеХранилища.Записать(ИмяВременногоФайлаОбмена);
		
	// сформировать табл. документ
	ТабДок = Новый ТабличныйДокумент;
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ФайлВыгрузкиExcel");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка|ОснЧасть");
	ТабДок.Вывести(ОбластьШапка);
	Если флСложныйТариф Тогда
		Для Каждого ТекГруппировка Из ТаблицаИнтервалов Цикл
			ОбластьШапкаСложный = Макет.ПолучитьОбласть("Шапка|Сложный");
			ОбластьШапкаСложный.Параметры.Группировка = ТекГруппировка.Интервал;
			ТабДок.Присоединить(ОбластьШапкаСложный);
		КонецЦикла;
	Иначе
		ОбластьШапкаТариф = Макет.ПолучитьОбласть("Шапка|Тариф");
		ТабДок.Присоединить(ОбластьШапкаТариф);
	КонецЕсли;
	
	// шапка для областей действия
	Для Каждого ТекПоле Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл   
		Если ТекПоле.Значение Тогда
			Если СтрНайти(ТекПоле.Ключ, "Список") = 0 Тогда
				ИмяПеречисления = Строка(СтруктураСоответствий.СоответствиеЛевогоЗначения[ТекПоле.Ключ]);
			Иначе
				ИмяПеречисления = Строка(СтруктураСоответствий.СоответствиеЛевогоЗначения[Лев(ТекПоле.Ключ, СтрДлина(ТекПоле.Ключ) - 6)]);
			КонецЕсли;
			
			ОбластьШапкаОбластьДействия = Макет.ПолучитьОбласть("Шапка|ОбластьДействия");
			ОбластьШапкаОбластьДействия.Параметры.ОбластьДействия = ИмяПеречисления;
			ТабДок.Присоединить(ОбластьШапкаОбластьДействия);
		КонецЕсли;	
	КонецЦикла;
			
	Для Каждого ТекСтрока Из ТарифнаяСетка Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка|ОснЧасть");
		ОбластьСтрока.Параметры.Код = ТекСтрока.ID;
		Если флТарифнаяСетка Тогда
			ОбластьСтрока.Параметры.Наименование = ТекСтрока.ТарифСсылка.Наименование;
		Иначе
			ОбластьСтрока.Параметры.Наименование = ТекСтрока.НоменклатураУслуги;
		КонецЕсли;
		ТабДок.Вывести(ОбластьСтрока);
		
		Если флСложныйТариф Тогда
			Для Каждого ТекГруппировка Из ТаблицаИнтервалов Цикл
				ОбластьСтрокаСложный = Макет.ПолучитьОбласть("Строка|Сложный");
				ОбластьСтрокаСложный.Параметры.Тариф = ТекСтрока[ТекГруппировка.Имя];
				ТабДок.Присоединить(ОбластьСтрокаСложный);
			КонецЦикла;
		Иначе
			ОбластьСтрокаТариф = Макет.ПолучитьОбласть("Строка|Тариф");
			ОбластьСтрокаТариф.Параметры.Тариф = ТекСтрока.Тариф;
			ТабДок.Присоединить(ОбластьСтрокаТариф);
		КонецЕсли;
		
		// область действия
		Если флТарифнаяСетка Тогда
			Для Каждого ТекПоле Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл   
				Если ТекПоле.Значение Тогда
					Если ЗначениеЗаполнено(ТекСтрока[ТекПоле.Ключ]) Тогда
						Если ТипЗнч(ТекСтрока[ТекПоле.Ключ]) = Тип("СписокЗначений") Тогда
							//ИмяПеречисления = Строка(СтруктураСоответствий.СоответствиеЛевогоЗначения[Лев(ТекПоле.Ключ, СтрДлина(ТекПоле.Ключ) - 6)]);
							//
							ПредставлениеСписка = "";
							Для Каждого ТекЭл Из ТекСтрока[ТекПоле.Ключ] Цикл
								ПредставлениеСписка = ПредставлениеСписка + Символы.ПС + ТекЭл.Значение;
							КонецЦикла;
							Если НЕ ПустаяСтрока(ПредставлениеСписка) Тогда
								ПредставлениеСписка = Сред(ПредставлениеСписка, 2);
							КонецЕсли;
							
							ОбластьСтрокаОбластьДействия = Макет.ПолучитьОбласть("Строка|ОбластьДействия");
							ОбластьСтрокаОбластьДействия.Параметры.ОбластьДействия = ПредставлениеСписка;
							ТабДок.Присоединить(ОбластьСтрокаОбластьДействия);
						Иначе
							//ИмяПеречисления = Строка(СтруктураСоответствий.СоответствиеЛевогоЗначения[ТекПоле.Ключ]);
							
							ОбластьСтрокаОбластьДействия = Макет.ПолучитьОбласть("Строка|ОбластьДействия");
							ОбластьСтрокаОбластьДействия.Параметры.ОбластьДействия = ТекСтрока[ТекПоле.Ключ];
							ТабДок.Присоединить(ОбластьСтрокаОбластьДействия);
							
							//НоваяСтрокаОбласть = ТарифОбъект.ОбластиТарифнойСетки.Добавить();
							//НоваяСтрокаОбласть.ID = ТекСтрока.ID;
							//НоваяСтрокаОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС[ИмяПеречисления];
							//НоваяСтрокаОбласть.ЗначениеОбластиДействия = ТекСтрока[ТекПоле.Ключ];
						КонецЕсли;
					Иначе
						ОбластьСтрокаОбластьДействия = Макет.ПолучитьОбласть("Строка|ОбластьДействия");
						ТабДок.Присоединить(ОбластьСтрокаОбластьДействия);
					КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		Иначе
			ТекКомпоновка = СтруктураСоответствий.СоответствиеКомпоновок[ТекСтрока.ID];
			ЭлементыОтбора = ТекКомпоновка.Настройки.Отбор.Элементы;
			
			ОбластиСтрока = "";
			Для Каждого ТекПоле Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл   
				Если ТекПоле.Значение Тогда
					Если ЗначениеЗаполнено(ТекСтрока[ТекПоле.Ключ]) Тогда
						ОбластьСтрокаОбластьДействия = Макет.ПолучитьОбласть("Строка|ОбластьДействия");
						ОбластьСтрокаОбластьДействия.Параметры.ОбластьДействия = ТекСтрока[ТекПоле.Ключ];
						ТабДок.Присоединить(ОбластьСтрокаОбластьДействия);
							
						//НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						//НовыйЭлементОтбора.ЛевоеЗначение = СтруктураСоответствий.СоответствиеЛевогоЗначения[ТекПоле.Ключ];  
						//НовыйЭлементОтбора.Использование = Истина;
						//НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;                                       
						//НовыйЭлементОтбора.ПравоеЗначение = ТекСтрока[ТекПоле.Ключ];
					Иначе
						ОбластьСтрокаОбластьДействия = Макет.ПолучитьОбласть("Строка|ОбластьДействия");
						ТабДок.Присоединить(ОбластьСтрокаОбластьДействия);
					КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
			
			//Если ЗначениеЗаполнено(Объект.ОбластьДействияОтбор) И ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
			//	НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//	НовыйЭлементОтбора.ЛевоеЗначение = СтруктураСоответствий.СоответствиеЛевогоЗначения[Объект.ОбластьДействияОтбор];  
			//	НовыйЭлементОтбора.Использование = Истина;
			//	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;                                       
			//	НовыйЭлементОтбора.ПравоеЗначение = Объект.ЗначениеОбласти;
			//	ОбластиСтрока = ОбластиСтрока + ?(ОбластиСтрока="","","; ") + СтруктураСоответствий.СоответствиеЗаголовка[Объект.ОбластьДействияОтбор];
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДок.Записать(ИмяВременногоФайлаОбмена, ТипФайлаТабличногоДокумента.XLS);
	
	АдресХранилищаФайлВыгрузки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаОбмена), УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	Если Объект.Прейскурант.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Для загрузки данных из файла необходимо указать прейскурант");
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ТекстНСТР = НСтр("en='Import from Excel is not available in Web client.';ru='Загрузка из Excel недоступна в Web-клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	#ИначеЕсли МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда 
		ТекстНСТР = НСтр("ru='Загрузка из Excel недоступна в мобильном клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	#Иначе
		ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр                      = НСтр("en='Data file';ru='Файл данных'") + " (*.xls)|*.xls";
		ДиалогВыбораФайла.Заголовок                   = НСтр("en='Select file';ru='Выберите файл'");
		ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
		ДиалогВыбораФайла.Расширение                  = "xls";
		ДиалогВыбораФайла.ИндексФильтра               = 0;
		ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыполнитьЗагрузкуЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    Если ВыбранныеФайлы = Неопределено Тогда 
        Возврат;
    КонецЕсли;
	
	ФайлВыгрузки = ВыбранныеФайлы[0];
    
	Если ПустаяСтрока(ФайлВыгрузки) Тогда
		ТекстОшибки = НСтр("en='It is necessary to specify the download file of the tariffs.';ru='Необходимо указать файл загрузки тарифов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуExcelНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуExcelНаКлиенте()
	
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	//УникальныйИД = Новый УникальныйИдентификатор;
	//ФайлВыгрузки = Результат + УникальныйИД + "_UATtarifs.xls";
		
	Попытка
		НашФайл = ПолучитьCOMОбъект(ФайлВыгрузки);
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке().Описание + ?(ИнформацияОбОшибке().Причина = Неопределено, "", " " + НСтр("en='by reason:';ru='по причине:'") + " "
			+ ИнформацияОбОшибке().Причина.Описание + " (" + НСтр("en='perhaps MS Excel not installed!';ru='возможно, не установлен MS Excel!'") +")");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
		Возврат;
	КонецПопытки;
	
	НашЛист = НашФайл.WorkSheets.Item(1);
	ПослСтр = НашЛист.Cells(1,1).SpecialCells(11).Row;
	
	Для Сч = 2 По ПослСтр Цикл
		КодТарифа = НашЛист.Cells(Сч, 1).Value;
		Если НЕ ЗначениеЗаполнено(КодТарифа) Тогда
			КодТарифа = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		СтрокиПоискаТариф = ТарифнаяСетка.НайтиСтроки(Новый Структура("ID", КодТарифа));
		Если СтрокиПоискаТариф.Количество() = 0 Тогда
			НоваяСтрока = ТарифнаяСетка.Добавить();
			НоваяСтрока.ID = КодТарифа;
			ТарифнаяСеткаПриНачалеРедактированияНаСервере(НоваяСтрока.ID);
			Если НЕ флТарифнаяСетка Тогда
				НоваяСтрока.НоменклатураУслуги = НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, 2).Value, СтруктураСоответствий.СоответствиеТипов.Номенклатура.Типы()[0]);
			КонецЕсли;
			НоваяСтрока.СпособЗаполненияКоличества = "Фактическое";
			СтрокиПоискаТариф = ТарифнаяСетка.НайтиСтроки(Новый Структура("ID", КодТарифа));
			//Продолжить;
		КонецЕсли;
		
		НомКолонки = 3; //первая колонка со значениями тарифа
		Если флСложныйТариф Тогда
			Для Каждого ТекГруппировка Из ТаблицаИнтервалов Цикл
				ЗначениеЯчейкиФайла	= НашЛист.Cells(Сч, НомКолонки).Value;
				Попытка
					СтрокиПоискаТариф[0][ТекГруппировка.Имя] = Число(ЗначениеЯчейкиФайла);
				Исключение
					СтрокиПоискаТариф[0][ТекГруппировка.Имя] = 0;
				КонецПопытки;
				ЗначениеГруппировкиИБ = СтрокиПоискаТариф[0][ТекГруппировка.Имя + "ТекущийТариф"];
				ЗначениеГруппировкиНовое = СтрокиПоискаТариф[0][ТекГруппировка.Имя];
				Если ЗначениеГруппировкиИБ = 0 Тогда
					Если ЗначениеГруппировкиНовое = 0 Тогда
						СтрокиПоискаТариф[0][ТекГруппировка.Имя + "ПроцентИзмененияТарифа"] = 0;
					Иначе
						СтрокиПоискаТариф[0][ТекГруппировка.Имя + "ПроцентИзмененияТарифа"] = 100;
					КонецЕсли;
				Иначе
					СтрокиПоискаТариф[0][ТекГруппировка.Имя + "ПроцентИзмененияТарифа"] = (ЗначениеГруппировкиНовое / ЗначениеГруппировкиИБ - 1) * 100;
				КонецЕсли;
				
				НомКолонки = НомКолонки + 1;
			КонецЦикла;
		Иначе
			СтрокиПоискаТариф[0].Тариф = Число(НашЛист.Cells(Сч, 3).Value);
			Если СтрокиПоискаТариф[0].ТекущийТариф = 0 Тогда
				Если СтрокиПоискаТариф[0].Тариф = 0 Тогда
					СтрокиПоискаТариф[0].ПроцентИзмененияТарифа = 0;
				Иначе
					СтрокиПоискаТариф[0].ПроцентИзмененияТарифа = 100;
				КонецЕсли;
			Иначе
				СтрокиПоискаТариф[0].ПроцентИзмененияТарифа = (СтрокиПоискаТариф[0].Тариф / СтрокиПоискаТариф[0].ТекущийТариф - 1)*100;
			КонецЕсли;
			
			НомКолонки = НомКолонки + 1;
		КонецЕсли;
		
		// область действия
		Для Каждого ТекПоле Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл   
			Если НЕ ТекПоле.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			мсвТипыОбласти = СтруктураСоответствий.СоответствиеТипов[СтрЗаменить(ТекПоле.Ключ, "Список", "")].Типы();
			ПредставлениеОбласти = НашЛист.Cells(Сч, НомКолонки).Value;
			
			Если СтрНайти(ТекПоле.Ключ, "Список") = 0 Тогда //значение
				ЗначениеОбласти = НайтиСсылкуПоПредставлению(ПредставлениеОбласти, мсвТипыОбласти);
			Иначе //список значений
				ЗначениеОбласти = Новый СписокЗначений;
				Пока ЗначениеЗаполнено(ПредставлениеОбласти) Цикл
					ПозицРазделителя = СтрНайти(ПредставлениеОбласти, Символы.ПС);
					Если ПозицРазделителя = 0 Тогда
						ТекПредставлениеОбласти = СокрЛП(ПредставлениеОбласти);
						ПредставлениеОбласти = "";
					Иначе
						ТекПредставлениеОбласти = СокрЛП(Лев(ПредставлениеОбласти, ПозицРазделителя - 1));
						ПредставлениеОбласти = СокрЛП(Сред(ПредставлениеОбласти, ПозицРазделителя + 1));
					КонецЕсли;
					
					ТекОбласть = НайтиСсылкуПоПредставлению(ТекПредставлениеОбласти, мсвТипыОбласти);
					ЗначениеОбласти.Добавить(ТекОбласть);
				КонецЦикла;
			КонецЕсли;
			
			СтрокиПоискаТариф[0][ТекПоле.Ключ] = ЗначениеОбласти;
			
			НомКолонки = НомКолонки + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбновитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьЦены(Команда)
	ПараметрыОткрытия = Новый Структура("ТолькоОкругление, СтарыеЦены", Истина, ОтображатьТекущиеТарифы);
	
	ОткрытьФорму("Обработка.уатРедактированиеТарифов_уэ.Форма.ПараметрыОкругления", ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОкруглитьНаПроцентЗавершение", ЭтотОбъект, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОткрытьФорму("ВнешняяОбработка.уатРедактированиеТарифов_уэ.Форма.ПараметрыОкругления", ПараметрыОткрытия, ЭтотОбъект,,,,
	//	Новый ОписаниеОповещения("ИзменитьОкруглитьНаПроцентЗавершение", ЭтотОбъект, ПараметрыОткрытия),
	//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)
	ПараметрыОткрытия = Новый Структура("ТолькоОкругление, СтарыеЦены", Ложь, ОтображатьТекущиеТарифы);
	
	ОткрытьФорму("Обработка.уатРедактированиеТарифов_уэ.Форма.ПараметрыИзмененияОкругления", ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОкруглитьНаПроцентЗавершение", ЭтотОбъект, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОткрытьФорму("ВнешняяОбработка.уатРедактированиеТарифов_уэ.Форма.ПараметрыИзмененияОкругления", ПараметрыОткрытия, ЭтотОбъект,,,,
	//	Новый ОписаниеОповещения("ИзменитьОкруглитьНаПроцентЗавершение", ЭтотОбъект, ПараметрыОткрытия),
	//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОкруглитьНаПроцентЗавершение(ПараметрыРасчета, ДополнительныеПараметры) Экспорт
    
	//Если ПараметрыРасчета = Неопределено
	//	ИЛИ (НЕ ДополнительныеПараметры.ТолькоОкругление) И ПараметрыРасчета.ПроцентИзменения = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	Если ПараметрыРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	флИзменениеТарифа = (НЕ ДополнительныеПараметры.ТолькоОкругление И ПараметрыРасчета.ПроцентИзменения <> 0);
	флОкруглениеТарифа = (ДополнительныеПараметры.ТолькоОкругление ИЛИ ПараметрыРасчета.Округлять);
	
	Для Каждого ТекСтрока Из ТарифнаяСетка Цикл
		Если флСложныйТариф Тогда
			Для Каждого ТекГруппировка Из ТаблицаИнтервалов Цикл
				Если флИзменениеТарифа Тогда
					Если ПараметрыРасчета.ИзменятьПроцентПоОтношению = 0 Тогда
						ТекСтрока[ТекГруппировка.Имя] = ТекСтрока[ТекГруппировка.Имя] * (1 + ПараметрыРасчета.ПроцентИзменения/100);
					Иначе
						ТекСтрока[ТекГруппировка.Имя] = ТекСтрока[ТекГруппировка.Имя + "ТекущийТариф"] * (1 + ПараметрыРасчета.ПроцентИзменения/100);
					КонецЕсли;
				КонецЕсли;
				Если флОкруглениеТарифа Тогда
					ТекСтрока[ТекГруппировка.Имя] = ОкруглитьЦену(ТекСтрока[ТекГруппировка.Имя], ПараметрыРасчета.ТочностьОкругления, ПараметрыРасчета.РежимОкругления);
				КонецЕсли;
				Если ТекСтрока[ТекГруппировка.Имя + "ТекущийТариф"] = 0 Тогда
					Если ТекСтрока.Тариф = 0 Тогда
						ТекСтрока[ТекГруппировка.Имя + "ПроцентИзмененияТарифа"] = 0;
					Иначе
						ТекСтрока[ТекГруппировка.Имя + "ПроцентИзмененияТарифа"] = 100;
					КонецЕсли;
				Иначе
					ТекСтрока[ТекГруппировка.Имя + "ПроцентИзмененияТарифа"] = (ТекСтрока[ТекГруппировка.Имя]/ТекСтрока[ТекГруппировка.Имя + "ТекущийТариф"] - 1) * 100;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если флИзменениеТарифа Тогда
				Если ПараметрыРасчета.ИзменятьПроцентПоОтношению = 0 Тогда
					ТекСтрока.Тариф = ТекСтрока.Тариф * (1 + ПараметрыРасчета.ПроцентИзменения/100);
				Иначе
					ТекСтрока.Тариф = ТекСтрока.ТекущийТариф * (1 + ПараметрыРасчета.ПроцентИзменения/100);
				КонецЕсли;
			КонецЕсли;
			Если флОкруглениеТарифа Тогда
				ТекСтрока.Тариф = ОкруглитьЦену(ТекСтрока.Тариф, ПараметрыРасчета.ТочностьОкругления, ПараметрыРасчета.РежимОкругления);
			КонецЕсли;
			Если ТекСтрока.ТекущийТариф = 0 Тогда
				Если ТекСтрока.Тариф = 0 Тогда
					ТекСтрока.ПроцентИзмененияТарифа = 0;
				Иначе
					ТекСтрока.ПроцентИзмененияТарифа = 100;
				КонецЕсли;
			Иначе
				ТекСтрока.ПроцентИзмененияТарифа = (ТекСтрока.Тариф/ТекСтрока.ТекущийТариф - 1) * 100;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекущиеТарифы(Команда)
	ОтображатьТекущиеТарифы = НЕ ОтображатьТекущиеТарифы;
	Элементы.ФормаОтображатьТекущиеТарифы.Пометка = НЕ Элементы.ФормаОтображатьТекущиеТарифы.Пометка;
	
	//ЗагрузитьТарифыСервер();
	УпорядочитьКолонки();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСсылкуПоПредставлению(Представление, мсвТипыОбъекта)
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//ОбъектМет = Метаданные.НайтиПоТипу(ТипОбъекта);
	//Если Метаданные.Справочники.Найти(ОбъектМет.Имя) <> Неопределено Тогда //справочник
	//	ИскомаяСсылка = Справочники[ОбъектМет.Имя].НайтиПоНаименованию(Представление);
	//	Если НЕ ЗначениеЗаполнено(ИскомаяСсылка) Тогда
	//		ТекстСообщ = СтрШаблон("Не найден элемент ""%1"" справочника ""%2"". Следует создать элемент вручную и повторить загрузку.",
	//			Представление, ОбъектМет.Синоним);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщ);
	//	КонецЕсли;
	//	
	//	Возврат ИскомаяСсылка;
	// Иначе //перечисление
	//	Попытка
	//		Возврат Перечисления[ОбъектМет.Имя][Представление];
	//	Исключение
	//		ТекстСообщ = СтрШаблон("Не найдено значение ""%1"" перечисления ""%2"".",
	//			Представление, ОбъектМет.Синоним);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщ);
	//		Возврат Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	
	ИскомаяСсылка = Неопределено;
	СинонимыСправочников = "";
	
	Для Каждого ТипОбъекта Из мсвТипыОбъекта Цикл
		ОбъектМет = Метаданные.НайтиПоТипу(ТипОбъекта);
		СинонимыСправочников = СинонимыСправочников + ", """ + ОбъектМет.Синоним + """";
		
		Если Метаданные.Справочники.Найти(ОбъектМет.Имя) <> Неопределено Тогда //справочник
			ИскомаяСсылка = Справочники[ОбъектМет.Имя].НайтиПоНаименованию(Представление);
			Если ЗначениеЗаполнено(ИскомаяСсылка) Тогда
				Прервать;
			КонецЕсли;
		Иначе //перечисление
			Попытка
				Возврат Перечисления[ОбъектМет.Имя][Представление];
			Исключение
				ТекстСообщ = СтрШаблон("Не найдено значение ""%1"" перечисления ""%2"".",
					Представление, ОбъектМет.Синоним);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщ);
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИскомаяСсылка) Тогда
		Возврат ИскомаяСсылка;
	Иначе
		Если мсвТипыОбъекта.Количество() = 1 Тогда
			ТекстСправочник = "справочника";
		Иначе
			ТекстСправочник = "справочников";
		КонецЕсли;
		
		ТекстСообщ = СтрШаблон("Не найден элемент ""%1"" %2 %3. Следует создать элемент вручную и повторить загрузку.",
			Представление, ТекстСправочник, Сред(СинонимыСправочников, 3));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщ);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НастроитьНормуБесплатногоХранения(Команда)
	ОткрытьФорму("РегистрСведений.уатНормыБесплатногоХранения_уэ.ФормаСписка",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	ТекстНСТР = НСтр("en='Tabular section will be cleared! Continue?';ru='Табличная часть будет очищена! Продолжить?'");
	ПолучениеДанныхПослеОчистки = Истина;
	ОчиститьТЧВопрос(ТекстНСТР, Ложь);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьТарифыСервер()
	
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если флТарифнаяСетка Тогда
		ТарифСеткаНоменклатура = ТарифСетка.НоменклатураУслуги;
		Если флСложныйТариф Тогда
			ГруппировкаТарифа1 = ТарифСетка.ГруппировкаТарифа1;
			ГруппировкаТарифа2 = ТарифСетка.ГруппировкаТарифа2;
			ГруппировкаТарифа3 = ТарифСетка.ГруппировкаТарифа3;
			ГруппировкаТарифа4 = ТарифСетка.ГруппировкаТарифа4;
			предГруппировкаТарифа1 = ГруппировкаТарифа1;
			предГруппировкаТарифа2 = ГруппировкаТарифа2;
			предГруппировкаТарифа3 = ГруппировкаТарифа3;
			предГруппировкаТарифа4 = ГруппировкаТарифа4;
		КонецЕсли;
	КонецЕсли;
	
	Если флТарифнаяСетка И флСложныйТариф И НЕ ОтображатьТекущиеТарифы Тогда
		Если ЗначениеЗаполнено(ГруппировкаТарифа4) Тогда
			Элементы.ТарифнаяСетка.ВысотаШапки = 4;
		ИначеЕсли ЗначениеЗаполнено(ГруппировкаТарифа3) Тогда
			Элементы.ТарифнаяСетка.ВысотаШапки = 3;
		ИначеЕсли ЗначениеЗаполнено(ГруппировкаТарифа2) Тогда
			Элементы.ТарифнаяСетка.ВысотаШапки = 2;
		Иначе
			Элементы.ТарифнаяСетка.ВысотаШапки = 1;
		КонецЕсли;
	Иначе
		Элементы.ТарифнаяСетка.ВысотаШапки = 1;
	КонецЕсли;
	
	Если флТарифнаяСетка Тогда
		Если НЕ флСложныйТариф Тогда //простые тарифы сеткой
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатТарифыТСТарифы.ID КАК IDСтроки,
			|	уатТарифыТСТарифы.Тариф КАК Тариф,
			|	уатТарифыТСТарифы.Ссылка КАК Ссылка,
			|	уатТарифыТСТарифы.Тариф КАК ТарифШапки,
			|	уатТарифыТСТарифы.МинимальнаяВыработка КАК МинимальнаяВыработка,
			|	уатТарифыТСТарифы.МинимальнаяСтоимость КАК МинимальнаяСтоимость,
			|	уатТарифыТСТарифы.СпособЗаполненияКоличества КАК СпособЗаполненияКоличества
			|ИЗ
			|	Справочник.уатТарифыТС.СтрокиТарифнойСетки КАК уатТарифыТСТарифы
			|ГДЕ
			|	уатТарифыТСТарифы.Ссылка = &ТарифСетка";
			
		Иначе //сложные тарифы сеткой
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатТарифыТСТарифы.ID КАК IDСтроки,
			|	уатТарифыТСТарифы.ЗначениеГруппировки1 КАК ЗначениеГруппировки1,
			|	уатТарифыТСТарифы.ЗначениеГруппировки2 КАК ЗначениеГруппировки2,
			|	уатТарифыТСТарифы.ЗначениеГруппировки3 КАК ЗначениеГруппировки3,
			|	уатТарифыТСТарифы.ЗначениеГруппировки4 КАК ЗначениеГруппировки4,
			|	уатТарифыТСТарифы.Тариф КАК Тариф,
			|	уатТарифыТСТарифы.Ссылка КАК Ссылка,
			|	0 КАК ТарифШапки,
			|	уатТарифыТСТарифы.Ссылка.НоменклатураУслуги КАК НоменклатураУслуги
			|ИЗ
			|	Справочник.уатТарифыТС.ЗначенияТарифнойСетки КАК уатТарифыТСТарифы
			|ГДЕ
			|	уатТарифыТСТарифы.Ссылка = &ТарифСетка
			|	И (&ГруппировкаТарифа = НЕОПРЕДЕЛЕНО
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ГруппировкаТарифа1 = &ГруппировкаТарифа
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ГруппировкаТарифа2 = &ГруппировкаТарифа
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ГруппировкаТарифа3 = &ГруппировкаТарифа
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ГруппировкаТарифа4 = &ГруппировкаТарифа)
			|ИТОГИ ПО
			|	IDСтроки";
			
		КонецЕсли;
	Иначе
		Если НЕ флСложныйТариф Тогда //простые тарифы
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	0 КАК НомерСтроки,
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеГруппировки1,
			|	НЕОПРЕДЕЛЕНО КАК ЗнакГруппировки1,
			|	0 КАК Тариф,
			|	уатТарифыТС.Ссылка КАК Ссылка,
			|	уатТарифыТС.Тариф КАК ТарифШапки,
			|	уатТарифыТС.НоменклатураУслуги КАК НоменклатураУслуги,
			|	уатТарифыТС.ГруппировкаТарифа1 КАК ГруппировкаТарифа1
			|ИЗ
			|	Справочник.уатТарифыТС КАК уатТарифыТС
			|ГДЕ
			|	уатТарифыТС.Владелец = &Прейскурант
			|	И НЕ уатТарифыТС.ПометкаУдаления
			|	И НЕ уатТарифыТС.ТарифнаяСетка
			|	И НЕ уатТарифыТС.СложныйТариф
			|	И уатТарифыТС.ПараметрВыработки = &ПараметрВыработки
			|	И уатТарифыТС.УсловиеПримененияФиксТарифа = &УсловиеПримененияФиксТарифа
			|	И (уатТарифыТС.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта)
			|			ИЛИ уатТарифыТС.ТипПункта = &ТипПункта)
			|	И (уатТарифыТС.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации)
			|			ИЛИ уатТарифыТС.ТипТочкиМаршрута = &ТипТочкиМаршрута)
			|	И (уатТарифыТС.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоУпаковок)
			|			ИЛИ уатТарифыТС.ВидУпаковки = &ВидУпаковки)
			|	И (уатТарифыТС.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
			|			ИЛИ уатТарифыТС.ВидСкладскойОперации = &ВидСкладскойОперации)
			|	И (уатТарифыТС.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
			|			ИЛИ уатТарифыТС.МетодРасчета <> ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки)
			|			ИЛИ уатТарифыТС.БазаТарифа = &БазаТарифа)
			|	И (уатТарифыТС.БазаТарифа <> ЗНАЧЕНИЕ(Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоМест)
			|			ИЛИ уатТарифыТС.ВидУпаковки = &ВидУпаковки)
			|	И уатТарифыТС.МетодРасчета = &МетодРасчета
			|	И (&НоменклатураУслуги = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ИЛИ уатТарифыТС.НоменклатураУслуги = &НоменклатураУслуги)
			|ИТОГИ ПО
			|	Ссылка";
			
		Иначе //сложные тарифы
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатТарифыТСТарифы.НомерСтроки КАК НомерСтроки,
			|	уатТарифыТСТарифы.ЗначениеГруппировки1 КАК ЗначениеГруппировки1,
			|	уатТарифыТСТарифы.ЗнакГруппировки1 КАК ЗнакГруппировки1,
			|	уатТарифыТСТарифы.Тариф КАК Тариф,
			|	уатТарифыТСТарифы.Ссылка КАК Ссылка,
			|	0 КАК ТарифШапки,
			|	уатТарифыТСТарифы.Ссылка.НоменклатураУслуги КАК НоменклатураУслуги,
			|	уатТарифыТСТарифы.Ссылка.ГруппировкаТарифа1 КАК ГруппировкаТарифа1
			|ИЗ
			|	Справочник.уатТарифыТС.Тарифы КАК уатТарифыТСТарифы
			|ГДЕ
			|	уатТарифыТСТарифы.Ссылка.Владелец = &Прейскурант
			|	И НЕ уатТарифыТСТарифы.Ссылка.ПометкаУдаления
			|	И НЕ уатТарифыТСТарифы.Ссылка.ТарифнаяСетка
			|	И уатТарифыТСТарифы.Ссылка.СложныйТариф
			|	И уатТарифыТСТарифы.Ссылка.ПараметрВыработки = &ПараметрВыработки
			|	И уатТарифыТСТарифы.Ссылка.УсловиеПримененияФиксТарифа = &УсловиеПримененияФиксТарифа
			|	И (уатТарифыТСТарифы.Ссылка.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ТипПункта = &ТипПункта)
			|	И (уатТарифыТСТарифы.Ссылка.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ТипТочкиМаршрута = &ТипТочкиМаршрута)
			|	И (уатТарифыТСТарифы.Ссылка.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоУпаковок)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ВидУпаковки = &ВидУпаковки)
			|	И (уатТарифыТСТарифы.Ссылка.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ВидСкладскойОперации = &ВидСкладскойОперации)
			|	И (уатТарифыТСТарифы.Ссылка.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.МетодРасчета <> ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.БазаТарифа = &БазаТарифа)
			|	И (уатТарифыТСТарифы.Ссылка.БазаТарифа <> ЗНАЧЕНИЕ(Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоМест)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ВидУпаковки = &ВидУпаковки)
			|	И уатТарифыТСТарифы.Ссылка.МетодРасчета = &МетодРасчета
			|	И (&НоменклатураУслуги = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ИЛИ уатТарифыТСТарифы.Ссылка.НоменклатураУслуги = &НоменклатураУслуги)
			|	И (&ГруппировкаТарифа = НЕОПРЕДЕЛЕНО
			|			ИЛИ уатТарифыТСТарифы.Ссылка.ГруппировкаТарифа1 = &ГруппировкаТарифа)
			|	И уатТарифыТСТарифы.ЗнакГруппировки1 = ЗНАЧЕНИЕ(Перечисление.уатЗнакиСравнения.МеньшеИлиРавно)
			|ИТОГИ ПО
			|	Ссылка";
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("Прейскурант", Объект.Прейскурант);     
	Запрос.УстановитьПараметр("ПараметрВыработки", Объект.ПараметрВыработки);
	Запрос.УстановитьПараметр("НоменклатураУслуги", Объект.НоменклатураУслугиОтбор);
	Запрос.УстановитьПараметр("ГруппировкаТарифа", ?(ЗначениеЗаполнено(Объект.ГруппировкаТарифаОтбор), Объект.ГруппировкаТарифаОтбор, Неопределено));
	Запрос.УстановитьПараметр("ТарифСетка", ТарифСетка);
	Запрос.УстановитьПараметр("МетодРасчета", Объект.МетодРасчета);
	Запрос.УстановитьПараметр("ТипПункта", Объект.ТипПункта);
	Запрос.УстановитьПараметр("ТипТочкиМаршрута", Объект.ТипТочкиМаршрута);
	Запрос.УстановитьПараметр("ВидУпаковки", Объект.ВидУпаковки);
	Запрос.УстановитьПараметр("ВидСкладскойОперации", Объект.ВидСкладскойОперации);
	Запрос.УстановитьПараметр("БазаТарифа", Объект.БазаТарифа);
	Запрос.УстановитьПараметр("УсловиеПримененияФиксТарифа", Объект.УсловиеПримененияФиксТарифа);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если флТарифнаяСетка И флСложныйТариф Тогда
		списГруппировка1 = Новый СписокЗначений;
		списГруппировка2 = Новый СписокЗначений;
		списГруппировка3 = Новый СписокЗначений;
		списГруппировка4 = Новый СписокЗначений;
		Для Каждого ТекСтрока Из Выгрузка Цикл
			Если ТекСтрока.ЗначениеГруппировки1 = Null Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ГруппировкаТарифа1) И списГруппировка1.НайтиПоЗначению(ТекСтрока.ЗначениеГруппировки1) = Неопределено Тогда
				списГруппировка1.Добавить(ТекСтрока.ЗначениеГруппировки1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ГруппировкаТарифа2) И списГруппировка2.НайтиПоЗначению(ТекСтрока.ЗначениеГруппировки2) = Неопределено Тогда
				списГруппировка2.Добавить(ТекСтрока.ЗначениеГруппировки2);
			КонецЕсли;
			Если ЗначениеЗаполнено(ГруппировкаТарифа3) И списГруппировка3.НайтиПоЗначению(ТекСтрока.ЗначениеГруппировки3) = Неопределено Тогда
				списГруппировка3.Добавить(ТекСтрока.ЗначениеГруппировки3);
			КонецЕсли;
			Если ЗначениеЗаполнено(ГруппировкаТарифа4) И списГруппировка4.НайтиПоЗначению(ТекСтрока.ЗначениеГруппировки4) = Неопределено Тогда
				списГруппировка4.Добавить(ТекСтрока.ЗначениеГруппировки4);
			КонецЕсли;
		КонецЦикла;
		списГруппировка1.СортироватьПоЗначению();
		списГруппировка2.СортироватьПоЗначению();
		списГруппировка3.СортироватьПоЗначению();
		списГруппировка4.СортироватьПоЗначению();
			
		Для Каждого ТекГруппировка1 Из списГруппировка1 Цикл
			Если списГруппировка2.Количество() = 0 Тогда
				ДобавитьИнтервалНаСервере(ТекГруппировка1.Значение);
			Иначе
				Для Каждого ТекГруппировка2 Из списГруппировка2 Цикл
					Если списГруппировка3.Количество() = 0 Тогда
						мсвСтрокиПоиска = ТарифСетка.ЗначенияТарифнойСетки.НайтиСтроки(
							Новый Структура("ЗначениеГруппировки1, ЗначениеГруппировки2",
							ТекГруппировка1.Значение, ТекГруппировка2.Значение));
						Если мсвСтрокиПоиска.Количество() > 0 Тогда
							ДобавитьИнтервалНаСервере(ТекГруппировка1.Значение, ТекГруппировка2.Значение);
						КонецЕсли;
					Иначе
						Для Каждого ТекГруппировка3 Из списГруппировка3 Цикл
							Если списГруппировка4.Количество() = 0 Тогда
								мсвСтрокиПоиска = ТарифСетка.ЗначенияТарифнойСетки.НайтиСтроки(
									Новый Структура("ЗначениеГруппировки1, ЗначениеГруппировки2, ЗначениеГруппировки3",
									ТекГруппировка1.Значение, ТекГруппировка2.Значение, ТекГруппировка3.Значение));
								Если мсвСтрокиПоиска.Количество() > 0 Тогда
									ДобавитьИнтервалНаСервере(ТекГруппировка1.Значение, ТекГруппировка2.Значение, ТекГруппировка3.Значение);
								КонецЕсли;
							Иначе
								Для Каждого ТекГруппировка4 Из списГруппировка4 Цикл
									мсвСтрокиПоиска = ТарифСетка.ЗначенияТарифнойСетки.НайтиСтроки(
										Новый Структура("ЗначениеГруппировки1, ЗначениеГруппировки2, ЗначениеГруппировки3, ЗначениеГруппировки4",
										ТекГруппировка1.Значение, ТекГруппировка2.Значение, ТекГруппировка3.Значение, ТекГруппировка4.Значение));
									Если мсвСтрокиПоиска.Количество() > 0 Тогда
										ДобавитьИнтервалНаСервере(ТекГруппировка1.Значение, ТекГруппировка2.Значение,
											ТекГруппировка3.Значение, ТекГруппировка4.Значение);
									КонецЕсли;	
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли НЕ флТарифнаяСетка Тогда
		Выгрузка.Свернуть("ЗначениеГруппировки1");
		Выгрузка.Сортировать("ЗначениеГруппировки1");
		Для Каждого ТекИнтервал Из Выгрузка Цикл
			Если ТекИнтервал.ЗначениеГруппировки1 = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьИнтервалНаСервере(ТекИнтервал.ЗначениеГруппировки1);
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	мсвТарифовСБолееОднойГруппировкой = Новый Массив;
	мсвТарифовСОбластьюДействияНеРавно = Новый Массив;
	МассивНужныхИнтервалов = Новый Массив;
	
	Если НЕ флТарифнаяСетка Тогда
		ЭтоПроф = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
		
		Если Объект.Прейскурант.ПрейскурантПоставщика Тогда
			Если ЭтоПроф Тогда
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты_проф");
			Иначе
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты");
			КонецЕсли;
		Иначе
			Если ЭтоПроф Тогда
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия_проф");
			Иначе //Логистика, Стандарт
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия");
			КонецЕсли;
		КонецЕсли;
		
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		ТекКомпоновщикНастроекОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
		ТекКомпоновщикНастроекОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КонецЕсли;
	
	// Установка видимости колонок - областей действия
	// здесь же определяется, будет ли отображаться колонка типа "список" или стандартная (значение)
	СтруктураВидыОбластейДействия = Новый Структура; //счетчик количества значений по видам областей действия. Если счетчик > 1, тогда отображается колонка "список"
	Пока ВыборкаИтог.Следующий() Цикл
		Если флТарифнаяСетка Тогда
			СтруктураВидыОбластейДействияВлож = Новый Структура;
			Для Каждого ТекОбласть Из ТарифСетка.ОбластиТарифнойСетки Цикл
				Если ТекОбласть.ID <> ВыборкаИтог.IDСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяОбластиДействия = Метаданные.Перечисления.уатВидыОбластейДействияТарифовТС.ЗначенияПеречисления[Перечисления.уатВидыОбластейДействияТарифовТС.Индекс(ТекОбласть.ВидОбластиДействия)].Имя;
				
				Если НЕ СтруктураВидыОбластейДействияВлож.Свойство(ИмяОбластиДействия) Тогда
					СтруктураВидыОбластейДействияВлож.Вставить(ИмяОбластиДействия, 0);
				КонецЕсли;
				
				СтруктураВидыОбластейДействияВлож[ИмяОбластиДействия] = СтруктураВидыОбластейДействияВлож[ИмяОбластиДействия] + 1;
			КонецЦикла;
						
		Иначе
			ТекНастройки = ВыборкаИтог.Ссылка.ОбластьДействия.Получить();
			Если ТекНастройки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураВидыОбластейДействияВлож = Новый Структура;
			Для Каждого ТекЭлементОтбора Из ТекНастройки.Отбор.Элементы Цикл
				Если НЕ ТекЭлементОтбора.Использование
					ИЛИ ТекЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
					И ТекЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					ИмяОбластиДействия = Метаданные.Перечисления.уатВидыОбластейДействияТарифовТС.ЗначенияПеречисления[Строка(ТекЭлементОтбора.ЛевоеЗначение)].Имя;
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если НЕ СтруктураВидыОбластейДействияВлож.Свойство(ИмяОбластиДействия) Тогда
					СтруктураВидыОбластейДействияВлож.Вставить(ИмяОбластиДействия, 0);
				КонецЕсли;
				
				Если ТекЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					СтруктураВидыОбластейДействияВлож[ИмяОбластиДействия] = 1;
				Иначе
					СтруктураВидыОбластейДействияВлож[ИмяОбластиДействия] = ТекЭлементОтбора.ПравоеЗначение.Количество();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ТекЭлем Из СтруктураВидыОбластейДействияВлож Цикл
			Если НЕ СтруктураВидыОбластейДействия.Свойство(ТекЭлем.Ключ) Тогда
				СтруктураВидыОбластейДействия.Вставить(ТекЭлем.Ключ, ТекЭлем.Значение);
			ИначеЕсли СтруктураВидыОбластейДействия[ТекЭлем.Ключ] < ТекЭлем.Значение Тогда
				СтруктураВидыОбластейДействия[ТекЭлем.Ключ] = ТекЭлем.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого ТекВидОбластейДействия Из СтруктураВидыОбластейДействия Цикл
		Если СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[ТекВидОбластейДействия.Ключ]
			ИЛИ СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[ТекВидОбластейДействия.Ключ + "Список"] Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекВидОбластейДействия.Значение > 1 Тогда
			СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[ТекВидОбластейДействия.Ключ + "Список"] = Истина;
		Иначе
			СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[ТекВидОбластейДействия.Ключ] = Истина;
		КонецЕсли;
	КонецЦикла;
	ВыборкаИтог.Сбросить();
	
	Пока ВыборкаИтог.Следующий() Цикл
		// Проверка отбора областей действий
		Если НЕ флТарифнаяСетка Тогда
			ТекНастройки = ВыборкаИтог.Ссылка.ОбластьДействия.Получить();
			Если ТипЗнч(ТекНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
				ТекКомпоновщикНастроекОтбора.ЗагрузитьНастройки(ТекНастройки);
			КонецЕсли;
			
			ЭлементыОтбора = ТекКомпоновщикНастроекОтбора.Настройки.Отбор.Элементы;
			
			// Проверка на то, что в тарифе есть область действия с видом сравнения, отличным от "Равно" (грузятся только "Равно")
			флЕстьНеРавно = Ложь;
			Для Каждого ТекЭлементОтбора Из ЭлементыОтбора Цикл
				мИмя = Строка(ТекЭлементОтбора.ЛевоеЗначение);
				мИмя = СтрЗаменить(мИмя, ".", "");
				
				Если ТекЭлементОтбора.Использование
					И ТекЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
					И ТекЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке Тогда
					
					СтрокаСообщенияОбласть = "Тариф """ + ВыборкаИтог.Ссылка + """, область действия """ + мИмя + " " + ТекЭлементОтбора.ВидСравнения + " " + Строка(ТекЭлементОтбора.ПравоеЗначение) + """";
					Если мсвТарифовСОбластьюДействияНеРавно.Найти(СтрокаСообщенияОбласть) = Неопределено Тогда
						мсвТарифовСОбластьюДействияНеРавно.Добавить(СтрокаСообщенияОбласть);
						флЕстьНеРавно = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если флЕстьНеРавно Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ОбластьДействияОтбор) И ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
				НетНужныхСовпадений = Истина;
				Для Каждого ТекЭлементОтбора Из ЭлементыОтбора Цикл
					//мИмя = Строка(ТекЭлементОтбора.ЛевоеЗначение);
					//мИмя = СтрЗаменить(мИмя, ".", "");
					
					мПолеКомпоновкиОтбора = ТекЭлементОтбора.ЛевоеЗначение;
					
					Если СтруктураСоответствий.СоответствиеЛевогоЗначения[Объект.ОбластьДействияОтбор] = мПолеКомпоновкиОтбора
						И Объект.ЗначениеОбласти = ТекЭлементОтбора.ПравоеЗначение
						И ТекЭлементОтбора.Использование
						И ТекЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						НетНужныхСовпадений = Ложь;	
					КонецЕсли;
					
				КонецЦикла;	
				Если НетНужныхСовпадений Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТарифнаяСетка.Добавить();
		
		//НоваяСтрока.ID = Новый УникальныйИдентификатор;
		Если флТарифнаяСетка Тогда
			НоваяСтрока.ID = ВыборкаИтог.IDСтроки;
			НоваяСтрока.ТарифСсылка = ТарифСетка;
			НоваяСтрока.НоменклатураУслуги = ТарифСетка.НоменклатураУслуги;
			НоваяСтрока.ГруппировкаТарифа = ТарифСетка.ГруппировкаТарифа1;
			Если флСложныйТариф Тогда
				СтрокаПоиска = ТарифСетка.СтрокиТарифнойСетки.Найти(ВыборкаИтог.IDСтроки, "ID");
				Если СтрокаПоиска <> Неопределено Тогда
					НоваяСтрока.МинимальноеКоличество = СтрокаПоиска.МинимальнаяВыработка;
					НоваяСтрока.МинимальнаяСтоимость = СтрокаПоиска.МинимальнаяСтоимость;
					ТекСпособЗаполненияКоличества = СтрокаПоиска.СпособЗаполненияКоличества;
				Иначе
					ТекСпособЗаполненияКоличества = 0;
				КонецЕсли;
			Иначе
				НоваяСтрока.МинимальноеКоличество = ВыборкаИтог.МинимальнаяВыработка;
				НоваяСтрока.МинимальнаяСтоимость = ВыборкаИтог.МинимальнаяСтоимость;
				ТекСпособЗаполненияКоличества = ВыборкаИтог.СпособЗаполненияКоличества;
			КонецЕсли;
		Иначе
			НоваяСтрока.ID = ВыборкаИтог.Ссылка.УникальныйИдентификатор();
			НоваяСтрока.ТарифСсылка = ВыборкаИтог.Ссылка;
			НоваяСтрока.НоменклатураУслуги = ВыборкаИтог.Ссылка.НоменклатураУслуги;
			НоваяСтрока.ГруппировкаТарифа = ВыборкаИтог.Ссылка.ГруппировкаТарифа1;
			НоваяСтрока.МинимальноеКоличество = НоваяСтрока.ТарифСсылка.МинимальнаяВыработка;
			НоваяСтрока.МинимальнаяСтоимость = НоваяСтрока.ТарифСсылка.МинимальнаяСтоимость;
			ТекСпособЗаполненияКоличества = НоваяСтрока.ТарифСсылка.СпособЗаполненияКоличества;
		КонецЕсли;
		
		Если ТекСпособЗаполненияКоличества = 0 Тогда
			НоваяСтрока.СпособЗаполненияКоличества = "Фактическое";
		ИначеЕсли ТекСпособЗаполненияКоличества = 1 Тогда
			НоваяСтрока.СпособЗаполненияКоличества = "Минимальное";
		Иначе
			НоваяСтрока.СпособЗаполненияКоличества = "Равно 1";
		КонецЕсли;
		
		// Значение простого тарифа берем сразу из шапки (для тарифа-сетки из ТЧ "Строки тарифной сетки")
		Если НЕ флСложныйТариф Тогда
			НоваяСтрока.Тариф = ВыборкаИтог.ТарифШапки;
			//Если ОтображатьТекущиеТарифы Тогда
				НоваяСтрока.ТекущийТариф = ВыборкаИтог.ТарифШапки;
			//КонецЕсли;
		КонецЕсли;
		
		// Значение сложного тарифа берем из ТЧ "Группировки" (для тарифа-сетки из ТЧ "Значения тарифной сетки")
		Выборка = ВыборкаИтог.Выбрать();
		Пока Выборка.Следующий() Цикл
			//НоваяСтрока.НоменклатураУслуги = Выборка.НоменклатураУслуги;
			//НоваяСтрока.ГруппировкаТарифа = Выборка.ГруппировкаТарифа1;
			
			Если Выборка.ЗначениеГруппировки1 = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если флТарифнаяСетка
				И НЕ ЗначениеЗаполнено(ГруппировкаТарифа1) 
				И НЕ ЗначениеЗаполнено(ГруппировкаТарифа2)  
				И НЕ ЗначениеЗаполнено(ГруппировкаТарифа3)
				И НЕ ЗначениеЗаполнено(ГруппировкаТарифа4) Тогда
				Продолжить;
			КонецЕсли;
			
			мИмя = "КолонкаИнтервал" + Формат(Выборка.ЗначениеГруппировки1, "ЧН=0; ЧГ=");
			Если флТарифнаяСетка Тогда
				мИмя = мИмя
					+ ?(ЗначениеЗаполнено(ГруппировкаТарифа2), " / " + Формат(Выборка.ЗначениеГруппировки2, "ЧН=0; ЧГ="), "")
					+ ?(ЗначениеЗаполнено(ГруппировкаТарифа3), " / " + Формат(Выборка.ЗначениеГруппировки3, "ЧН=0; ЧГ="), "")
					+ ?(ЗначениеЗаполнено(ГруппировкаТарифа4), " / " + Формат(Выборка.ЗначениеГруппировки4, "ЧН=0; ЧГ="), "");
			КонецЕсли;
			
			мИмя = СтрЗаменить(мИмя, " ", "");
			мИмя = СтрЗаменить(мИмя, ",", "_");
			мИмя = СтрЗаменить(мИмя, "/", "__");
			
			НоваяСтрока[мИмя] = Выборка.Тариф;
			//Если ОтображатьТекущиеТарифы Тогда
				НоваяСтрока[мИмя + "ТекущийТариф"] = Выборка.Тариф;
			//КонецЕсли;
			
			//Если ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
				Если МассивНужныхИнтервалов.Найти(Выборка.ЗначениеГруппировки1) = Неопределено Тогда
					МассивНужныхИнтервалов.Добавить(Выборка.ЗначениеГруппировки1);
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
		// область действия
		Если НЕ флТарифнаяСетка Тогда
			СтруктураСоответствий.СоответствиеКомпоновок.Вставить(НоваяСтрока.ID, ТекКомпоновщикНастроекОтбора);
			
			Для Каждого ТекЭлементОтбора Из ЭлементыОтбора Цикл
				Если НЕ ТекЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				мИмя = Строка(ТекЭлементОтбора.ЛевоеЗначение);
				мИмя = СтрЗаменить(мИмя, ".", "");
				
				Если Метаданные.Перечисления.уатВидыОбластейДействияТарифовТС.ЗначенияПеречисления.Найти(мИмя) = Неопределено Тогда
					СтрокаОшибки = "При загрузке тарифа была пропущена область действия с полем """ + Строка(ТекЭлементОтбора.ЛевоеЗначение) + """";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
					Продолжить;
				КонецЕсли;
								
				Если СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[мИмя] Тогда
					НоваяСтрока[мИмя] = ТекЭлементОтбора.ПравоеЗначение;
				Иначе
					Если ТипЗнч(ТекЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
						НоваяСтрока[мИмя + "Список"] = ТекЭлементОтбора.ПравоеЗначение;
					Иначе
						НоваяСтрока[мИмя + "Список"].Добавить(ТекЭлементОтбора.ПравоеЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ТекОбласть Из ТарифСетка.ОбластиТарифнойСетки Цикл
				Если ТекОбласть.ID <> ВыборкаИтог.IDСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяОбластиДействия = Метаданные.Перечисления.уатВидыОбластейДействияТарифовТС.ЗначенияПеречисления[Перечисления.уатВидыОбластейДействияТарифовТС.Индекс(ТекОбласть.ВидОбластиДействия)].Имя;
				
				Если СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[ИмяОбластиДействия] Тогда
					НоваяСтрока[ИмяОбластиДействия] = ТекОбласть.ЗначениеОбластиДействия;
				Иначе
					НоваяСтрока[ИмяОбластиДействия + "Список"].Добавить(ТекОбласть.ЗначениеОбластиДействия);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Проверка на то, что в тарифе есть более одной группировки (грузится только первая)
		Если НЕ флТарифнаяСетка Тогда
			Если ЗначениеЗаполнено(ВыборкаИтог.Ссылка.ГруппировкаТарифа2)
				ИЛИ ЗначениеЗаполнено(ВыборкаИтог.Ссылка.ГруппировкаТарифа3)
				ИЛИ ЗначениеЗаполнено(ВыборкаИтог.Ссылка.ГруппировкаТарифа4)Тогда
				мсвТарифовСБолееОднойГруппировкой.Добавить(ВыборкаИтог.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
		// Поудаляем все не нужные интервалы
		ИндексСтроки = ТаблицаИнтервалов.Количество();
		Пока ИндексСтроки > 0 Цикл
			Если МассивНужныхИнтервалов.Найти(ТаблицаИнтервалов[ИндексСтроки-1].Интервал) = Неопределено Тогда
				мПуть = ТаблицаИнтервалов[ИндексСтроки-1].Путь;
				мИмя = ТаблицаИнтервалов[ИндексСтроки-1].Имя;	
				
				Элементы.Удалить(Элементы[мИмя]);
				
				УдаляемыеРеквизиты = Новый Массив;
				УдаляемыеРеквизиты.Добавить(мПуть);
				ИзменитьРеквизиты(, УдаляемыеРеквизиты);
				
				ТаблицаИнтервалов.Удалить(ИндексСтроки-1);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
	//КонецЕсли;
	
	// Проверка на существование сложных тарифов со знаком группировки, отличном от "<="
	Если НЕ флТарифнаяСетка И флСложныйТариф Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "уатТарифыТСТарифы.ЗнакГруппировки1 = ЗНАЧЕНИЕ(Перечисление.уатЗнакиСравнения.МеньшеИлиРавно)",
			"уатТарифыТСТарифы.ЗнакГруппировки1 <> ЗНАЧЕНИЕ(Перечисление.уатЗнакиСравнения.МеньшеИлиРавно)");
		тблДругиеВидыСравнения = Запрос.Выполнить().Выгрузить();
		тблДругиеВидыСравнения.Свернуть("Ссылка, ЗнакГруппировки1, ЗначениеГруппировки1");
		Если тблДругиеВидыСравнения.Количество() > 0 Тогда
			СтрокаОшибки = "";
			Для Каждого ТекТариф Из тблДругиеВидыСравнения Цикл
				Если ЗначениеЗаполнено(ТекТариф.ЗнакГруппировки1) Тогда
					СтрокаОшибки = СтрокаОшибки + Символы.ПС + 
					НСтр("en='tariff';ru='тариф'") + " """ + ТекТариф.Ссылка + """, " + НСтр("en='grouping';ru='группировка'") + " """ + ТекТариф.ЗнакГруппировки1 + " " + ТекТариф.ЗначениеГруппировки1 + """";
				КонецЕсли;
			КонецЦикла;
			Если СтрокаОшибки <> "" Тогда
				СтрокаОшибки = НСтр("en='When loading complex tariffs the groups with the kind of comparison that is different from ""<="" (less or equal) have been missed:';ru='При загрузке сложных тарифов были пропущены группировки с видом сравнения, отличающимся от ""<="" (меньше или равно):'") +
				                 " " + СтрокаОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если мсвТарифовСБолееОднойГруппировкой.Количество() > 0 Тогда
		СтрокаОшибки = НСтр("en='In following tariffs, more than one grouping is indicated, only first is loaded:';ru='В следующих тарифах указано более одной группировки, загружена только первая:'") + " ";
		Для Каждого ТекТариф Из мсвТарифовСБолееОднойГруппировкой Цикл
			СтрокаОшибки = СтрокаОшибки + "
			|	" + ТекТариф;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
	КонецЕсли;
	
	Если мсвТарифовСОбластьюДействияНеРавно.Количество() > 0 Тогда
		СтрокаОшибки =  НСтр("en='When loading rates were skipped scopes with the kind of comparison other than ""="" (equals):';ru='При загрузке тарифов были пропущены области действия с видом сравнения, отличающимся ""Равно"" и ""В списке""):'") + " ";
		Для Каждого ТекТариф Из мсвТарифовСОбластьюДействияНеРавно Цикл
			СтрокаОшибки = СтрокаОшибки + "
			|	" + ТекТариф;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураСоответствий, АдресВременногоХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТарифыСервер(ЗаписьУспешна)
	
	// Проверка заполненности
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Прейскурант) Тогда
		ТекстНСТР = НСтр("en='Not filled price list!';ru='Не заполнен прейскурант!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	КонецЕсли;
	Если Объект.УсловиеПримененияФиксТарифа = 0 И НЕ ЗначениеЗаполнено(Объект.ПараметрВыработки) Тогда
		ТекстНСТР = НСтр("en='Output parameter is not specified!';ru='Не заполнен параметр выработки!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	КонецЕсли;	
	
	НомерСтроки = 1;
	Для Каждого ТекСтрока Из ТарифнаяСетка Цикл
		Если флТарифнаяСетка И НЕ ЗначениеЗаполнено(ТарифСеткаНоменклатура) Тогда
			ТекстНСТР = НСтр("en='Products and services of service is not filled!';ru='Не заполнена номенклатура услуги!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		ИначеЕсли НЕ флТарифнаяСетка И НЕ ЗначениеЗаполнено(ТекСтрока.НоменклатураУслуги) Тогда
			ТекстНСТР = НСтр("en='At line № %1, not fill products and services of services!';ru='В строке № %1, не заполнена номенклатура услуги!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Строка(НомерСтроки));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
		
		Если флСложныйТариф Тогда
			Если флТарифнаяСетка И НЕ ЗначениеЗаполнено(ГруппировкаТарифа1) Тогда
				ТекстНСТР = НСтр("en='Not specifed any tariff group!';ru='Не указано ни одной группировки тарифа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Отказ = Истина;
			ИначеЕсли НЕ флТарифнаяСетка И НЕ ЗначениеЗаполнено(ТекСтрока.ГруппировкаТарифа) Тогда
				ТекстНСТР = НСтр("en='In line № %1, not fill tariff group!';ru='В строке № %1, не заполнена группировка тарифа!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Строка(НомерСтроки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;	
	КонецЦикла;
	Если Отказ Тогда 
		Возврат; 
	КонецЕсли;

	// Записываем тарифы
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если флТарифнаяСетка Тогда
		Если ЗначениеЗаполнено(ТарифСетка) Тогда
			ТарифОбъект = ТарифСетка.ПолучитьОбъект();
			ТарифОбъект.СтрокиТарифнойСетки.Очистить();
			ТарифОбъект.ЗначенияТарифнойСетки.Очистить();
			ТарифОбъект.ОбластиТарифнойСетки.Очистить();
		Иначе
			ТарифОбъект = Справочники.уатТарифыТС.СоздатьЭлемент();
			ТарифОбъект.Владелец = Объект.Прейскурант;
			ТарифОбъект.Наименование = "" + ТарифСеткаНоменклатура
				+ " (" + ?(ЗначениеЗаполнено(Объект.ПараметрВыработки), Объект.ПараметрВыработки, "Все параметры выработки") + ")";
		КонецЕсли;
		
		ТарифОбъект.ПараметрВыработки = Объект.ПараметрВыработки;
		ТарифОбъект.ТипПункта = Объект.ТипПункта;
		ТарифОбъект.ТипТочкиМаршрута = Объект.ТипТочкиМаршрута;
		ТарифОбъект.ВидУпаковки = Объект.ВидУпаковки;
		ТарифОбъект.ВидСкладскойОперации = Объект.ВидСкладскойОперации;
		ТарифОбъект.БазаТарифа = Объект.БазаТарифа;
		ТарифОбъект.СложныйТариф = флСложныйТариф;
		ТарифОбъект.МетодРасчета = Объект.МетодРасчета;
		ТарифОбъект.ТарифнаяСетка = Истина;
		ТарифОбъект.УсловиеПримененияФиксТарифа = Объект.УсловиеПримененияФиксТарифа;
		ТарифОбъект.НоменклатураУслуги = ТарифСеткаНоменклатура;
		ТарифОбъект.КоличествоБесплатныхЕдиниц = Объект.КоличествоБесплатныхЕдиниц;
		
		Если ТарифОбъект.СложныйТариф Тогда
			ТарифОбъект.ГруппировкаТарифа1 = ГруппировкаТарифа1;
			ТарифОбъект.ГруппировкаТарифа2 = ГруппировкаТарифа2;
			ТарифОбъект.ГруппировкаТарифа3 = ГруппировкаТарифа3;
			ТарифОбъект.ГруппировкаТарифа4 = ГруппировкаТарифа4;
		КонецЕсли;
	КонецЕсли;
					
	НомерСтроки = 1;
	МеньшеИлиРавно = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно;
	Для Каждого ТекСтрока Из ТарифнаяСетка Цикл
		ТекСсылка = ТекСтрока.ТарифСсылка;
		
		Если НЕ флТарифнаяСетка Тогда
			Если ЗначениеЗаполнено(ТекСсылка) Тогда
				// Удалим все интервалы с видом сравнения <=
				Если НЕ флТарифнаяСетка Тогда
					ТарифОбъект = ТекСсылка.ПолучитьОбъект();   
					НайдСтроки = ТарифОбъект.Тарифы.НайтиСтроки(Новый Структура("ЗнакГруппировки1", МеньшеИлиРавно));
					Для Каждого ТекСравнение Из НайдСтроки Цикл
						ТарифОбъект.Тарифы.Удалить(ТекСравнение);	
					КонецЦикла;
					НайдСтроки = ТарифОбъект.Тарифы.НайтиСтроки(Новый Структура("ЗнакГруппировки2", МеньшеИлиРавно));
					Для Каждого ТекСравнение Из НайдСтроки Цикл
						ТарифОбъект.Тарифы.Удалить(ТекСравнение);	
					КонецЦикла;
					НайдСтроки = ТарифОбъект.Тарифы.НайтиСтроки(Новый Структура("ЗнакГруппировки3", МеньшеИлиРавно));
					Для Каждого ТекСравнение Из НайдСтроки Цикл
						ТарифОбъект.Тарифы.Удалить(ТекСравнение);	
					КонецЦикла;
				КонецЕсли;
			Иначе 
				ТарифОбъект = Справочники.уатТарифыТС.СоздатьЭлемент();
				ТарифОбъект.Наименование = "" + ТекСтрока.НоменклатураУслуги + " (" + Объект.ПараметрВыработки + ")";
				ТарифОбъект.Владелец = Объект.Прейскурант;
				ТарифОбъект.ПараметрВыработки = Объект.ПараметрВыработки;
				ТарифОбъект.ТипПункта = Объект.ТипПункта;
				ТарифОбъект.ТипТочкиМаршрута = Объект.ТипТочкиМаршрута;
				ТарифОбъект.ВидУпаковки = Объект.ВидУпаковки;
				ТарифОбъект.ВидСкладскойОперации = Объект.ВидСкладскойОперации;
				ТарифОбъект.БазаТарифа = Объект.БазаТарифа;
				ТарифОбъект.СложныйТариф = флСложныйТариф;
				ТарифОбъект.МетодРасчета = Объект.МетодРасчета;
				ТарифОбъект.УсловиеПримененияФиксТарифа = Объект.УсловиеПримененияФиксТарифа;
			КонецЕсли;
			
			ТарифОбъект.КоличествоБесплатныхЕдиниц = Объект.КоличествоБесплатныхЕдиниц;
			ТарифОбъект.НоменклатураУслуги = ТекСтрока.НоменклатураУслуги;
		КонецЕсли;
		
		Если флТарифнаяСетка Тогда
			СтрокаТарифа = ТарифОбъект.СтрокиТарифнойСетки.Найти(ТекСтрока.ID, "ID");
			Если СтрокаТарифа = Неопределено Тогда
				СтрокаТарифа = ТарифОбъект.СтрокиТарифнойСетки.Добавить();
				СтрокаТарифа.ID = ТекСтрока.ID;
			КонецЕсли;
		КонецЕсли;
						
		// значения тарифа
		Если флСложныйТариф Тогда
			Если НЕ флТарифнаяСетка Тогда
				ТарифОбъект.ГруппировкаТарифа1 = ТекСтрока.ГруппировкаТарифа;
			КонецЕсли;
			
			ТаблицаИнтервалов.Сортировать("Интервал, Интервал2, Интервал3, Интервал4");
			
			Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл
				текЗначение = ТекСтрока[ТекИнтервал.Имя];
				Если текЗначение = 0 Тогда 
					Продолжить; 
				КонецЕсли;
				
				Если флТарифнаяСетка Тогда
					НовСтрока = ТарифОбъект.ЗначенияТарифнойСетки.Добавить();
					НовСтрока.ID = ТекСтрока.ID;
					НовСтрока.ЗначениеГруппировки1 = ТекИнтервал.Интервал;
					НовСтрока.ЗначениеГруппировки2 = ТекИнтервал.Интервал2;
					НовСтрока.ЗначениеГруппировки3 = ТекИнтервал.Интервал3;
					НовСтрока.ЗначениеГруппировки4 = ТекИнтервал.Интервал4;
					НовСтрока.Тариф = текЗначение;
				Иначе
					НовСтрока = ТарифОбъект.Тарифы.Добавить();
					НовСтрока.ЗнакГруппировки1 = МеньшеИлиРавно;
					НовСтрока.ЗначениеГруппировки1 = ТекИнтервал.Интервал;
					НовСтрока.Тариф = текЗначение;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если флТарифнаяСетка Тогда
				СтрокаТарифа.Тариф = ТекСтрока.Тариф;
			Иначе
				ТарифОбъект.Тариф = ТекСтрока.Тариф;
			КонецЕсли;
		КонецЕсли;
		
		// минимальная выработка
		Если флТарифнаяСетка Тогда
			СтрокаТарифа.МинимальнаяВыработка = ТекСтрока.МинимальноеКоличество;
			СтрокаТарифа.МинимальнаяСтоимость = ТекСтрока.МинимальнаяСтоимость;
			Если ТекСтрока.СпособЗаполненияКоличества = "Фактическое" Тогда
				СтрокаТарифа.СпособЗаполненияКоличества = 0;
			ИначеЕсли ТекСтрока.СпособЗаполненияКоличества = "Минимальное" Тогда
				СтрокаТарифа.СпособЗаполненияКоличества = 1;
			Иначе
				СтрокаТарифа.СпособЗаполненияКоличества = 2;
			КонецЕсли;
		Иначе
			ТарифОбъект.МинимальнаяВыработка = ТекСтрока.МинимальноеКоличество;
			ТарифОбъект.МинимальнаяСтоимость = ТекСтрока.МинимальнаяСтоимость;
			Если ТекСтрока.СпособЗаполненияКоличества = "Фактическое" Тогда
				ТарифОбъект.СпособЗаполненияКоличества = 0;
			ИначеЕсли ТекСтрока.СпособЗаполненияКоличества = "Минимальное" Тогда
				ТарифОбъект.СпособЗаполненияКоличества = 1;
			Иначе
				ТарифОбъект.СпособЗаполненияКоличества = 2;
			КонецЕсли;
		КонецЕсли;
		
		// область действия
		Если флТарифнаяСетка Тогда
			Для Каждого ТекПоле Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл   
				Если ТекПоле.Значение Тогда
					Если ЗначениеЗаполнено(ТекСтрока[ТекПоле.Ключ]) Тогда
						Если ТипЗнч(ТекСтрока[ТекПоле.Ключ]) = Тип("СписокЗначений") Тогда
							ИмяПеречисления = Строка(СтруктураСоответствий.СоответствиеЛевогоЗначения[Лев(ТекПоле.Ключ, СтрДлина(ТекПоле.Ключ) - 6)]);
							Для Каждого ТекЭл Из ТекСтрока[ТекПоле.Ключ] Цикл
								НоваяСтрокаОбласть = ТарифОбъект.ОбластиТарифнойСетки.Добавить();
								НоваяСтрокаОбласть.ID = ТекСтрока.ID;
								НоваяСтрокаОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС[ИмяПеречисления];
								НоваяСтрокаОбласть.ЗначениеОбластиДействия = ТекЭл.Значение;
							КонецЦикла;
						Иначе
							ИмяПеречисления = Строка(СтруктураСоответствий.СоответствиеЛевогоЗначения[ТекПоле.Ключ]);
							НоваяСтрокаОбласть = ТарифОбъект.ОбластиТарифнойСетки.Добавить();
							НоваяСтрокаОбласть.ID = ТекСтрока.ID;
							НоваяСтрокаОбласть.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС[ИмяПеречисления];
							НоваяСтрокаОбласть.ЗначениеОбластиДействия = ТекСтрока[ТекПоле.Ключ];
						КонецЕсли;
					КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		Иначе
			ТекКомпоновка = СтруктураСоответствий.СоответствиеКомпоновок[ТекСтрока.ID];
			ЭлементыОтбора = ТекКомпоновка.Настройки.Отбор.Элементы;
			
			Если ЗначениеЗаполнено(ТекСсылка) Тогда
				// Сотрем элементы с видом сравнения равно
				
				МассивЭлементовОтбора = Новый Массив;
				Для Каждого ТекЭлементОтбора Из ЭлементыОтбора Цикл
					мИмя = СтрЗаменить(Строка(ТекЭлементОтбора.ЛевоеЗначение), ".", "");
					
					Если ТекЭлементОтбора.Использование
						И (ТекЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
						ИЛИ ТекЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке)
						И СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки.Свойство(мИмя) Тогда   
						Продолжить;
					КонецЕсли;
					
					МассивЭлементовОтбора.Добавить(ТекЭлементОтбора);
					
				КонецЦикла;
				
				ТекКомпоновка.Настройки.Отбор.Элементы.Очистить();
				
				Для Каждого ТекЭлементОтбора Из МассивЭлементовОтбора Цикл
					
					НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение = ТекЭлементОтбора.ЛевоеЗначение;
					НовыйЭлементОтбора.Использование = ТекЭлементОтбора.Использование;
					НовыйЭлементОтбора.ВидСравнения = ТекЭлементОтбора.ВидСравнения;
					НовыйЭлементОтбора.ПравоеЗначение = ТекЭлементОтбора.ПравоеЗначение;
					
				КонецЦикла;
			КонецЕсли;	
			
			// Теперь заполним по новой
			//ОбластиСтрока = "";
			Для Каждого ТекПоле Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл   
				Если НЕ ТекПоле.Значение Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока[ТекПоле.Ключ]) Тогда
					Продолжить;
				КонецЕсли;
				
				флЭтоСписок = (СтрНайти(ТекПоле.Ключ, "Список") <> 0);
				ТекПоле_Ключ = СтрЗаменить(ТекПоле.Ключ, "Список", "");
				ЗначениеОтбора = ТекСтрока[ТекПоле.Ключ];
				
				Если флЭтоСписок Тогда
					Если ТекСтрока[ТекПоле.Ключ].Количество() = 0 Тогда
						флЭтоСписок = Ложь;
						ЗначениеОтбора = Неопределено;
					ИначеЕсли ТекСтрока[ТекПоле.Ключ].Количество() = 1 Тогда
						флЭтоСписок = Ложь;
						ЗначениеОтбора = ТекСтрока[ТекПоле.Ключ][0].Значение;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение  = СтруктураСоответствий.СоответствиеЛевогоЗначения[ТекПоле_Ключ];  
				НовыйЭлементОтбора.Использование  = Истина;
				НовыйЭлементОтбора.ВидСравнения   = ?(флЭтоСписок, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
				НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				
				//ОбластиСтрока = ОбластиСтрока + ?(ОбластиСтрока="","","; ") + СтруктураСоответствий.СоответствиеЗаголовка[ТекПоле.Ключ];
			КонецЦикла;
			
			//Если ЗначениеЗаполнено(Объект.ОбластьДействияОтбор) И ЗначениеЗаполнено(Объект.ЗначениеОбласти) Тогда
			//	НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//	НовыйЭлементОтбора.ЛевоеЗначение = СтруктураСоответствий.СоответствиеЛевогоЗначения[Объект.ОбластьДействияОтбор];  
			//	НовыйЭлементОтбора.Использование = Истина;
			//	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;                                       
			//	НовыйЭлементОтбора.ПравоеЗначение = Объект.ЗначениеОбласти;
			//	ОбластиСтрока = ОбластиСтрока + ?(ОбластиСтрока="","","; ") + СтруктураСоответствий.СоответствиеЗаголовка[Объект.ОбластьДействияОтбор];
			//КонецЕсли;
			
			ТарифОбъект.ОбластьДействия = Новый ХранилищеЗначения(ТекКомпоновка.Настройки);
			//ТарифОбъект.ОбластьДействияПредставление = ОбластиСтрока;
		КонецЕсли;
		
		Если НЕ флТарифнаяСетка Тогда
			Попытка
				ТарифОбъект.Записать();
				ТекСтрока.ТарифСсылка = ТарифОбъект.Ссылка;
				ЗаписьУспешна = Истина;
			Исключение
				ТекстНСТР = НСтр("en='At line № %1, Rate not recorded!';ru='В строке № %1, Тариф не записан!'") + Символы.ПС + 
							НСтр("en='Because:';ru='По причине:'") + " " + ОписаниеОшибки();
				ТекстНСТР = СтрШаблон(ТекстНСТР, Строка(НомерСтроки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				ЗаписьУспешна = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если флТарифнаяСетка Тогда
		Попытка
			ТарифОбъект.Записать();
			Для Каждого ТекСтрока Из ТарифнаяСетка Цикл
				ТекСтрока.ТарифСсылка = ТарифОбъект.Ссылка;
			КонецЦикла;
			ЗаписьУспешна = Истина;
		Исключение
			ТекстНСТР = НСтр("en='Tariff is not recorded!';ru='Тариф не записан!'") + Символы.ПС + 
			НСтр("en='Because:';ru='По причине:'") + " " + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			ЗаписьУспешна = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураСоответствий, АдресВременногоХранилища);   
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьКолонки()
	
	СтруктураСоответствий = Неопределено;
	Если НЕ ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	
	// 1) Удаление старых колонок
	
	// Общие колонки
	//Если Элементы.Найти("НоменклатураУслуги") <> Неопределено Тогда
	//	Элементы.Удалить(Элементы.НоменклатураУслуги);
	//КонецЕсли;
	Если Элементы.Найти("ГруппировкаТарифа") <> Неопределено Тогда
		Элементы.Удалить(Элементы.ГруппировкаТарифа);
	КонецЕсли;
	Если Элементы.Найти("Тариф") <> Неопределено Тогда
		Элементы.Удалить(Элементы.Тариф);
	КонецЕсли;
	Если Элементы.Найти("ТекущийТариф") <> Неопределено Тогда
		Элементы.Удалить(Элементы.ТекущийТариф);
	КонецЕсли;
	Если Элементы.Найти("ПроцентИзмененияТарифа") <> Неопределено Тогда
		Элементы.Удалить(Элементы.ПроцентИзмененияТарифа);
	КонецЕсли;
	Если Элементы.Найти("ГруппаТариф") <> Неопределено Тогда
		Элементы.Удалить(Элементы.ГруппаТариф);
	КонецЕсли;
	
	// Области действия
	Если СтруктураСоответствий <> Неопределено Тогда
		Для Каждого ТекКлюч Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл
			Если Элементы.Найти(ТекКлюч.Ключ) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Элементы.Удалить(Элементы[ТекКлюч.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	// Интервалы (группировки)
	Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл
		мИмя = ТекИнтервал.Имя;
		Элементы.Удалить(Элементы[мИмя]);
		
		Если Элементы.Найти(мИмя + "ТекущийТариф") <> Неопределено Тогда
			Элементы.Удалить(Элементы[мИмя + "ТекущийТариф"]);
		КонецЕсли;
		Если Элементы.Найти(мИмя + "ПроцентИзмененияТарифа") <> Неопределено Тогда
			Элементы.Удалить(Элементы[мИмя + "ПроцентИзмененияТарифа"]);
		КонецЕсли;
		Если Элементы.Найти(мИмя + "ГруппаТариф") <> Неопределено Тогда
			Элементы.Удалить(Элементы[мИмя + "ГруппаТариф"]);
		КонецЕсли;
	КонецЦикла;
	
	// 2) Создание новых колонок
	
	// Общие колонки
	СоздатьОбщиеКолонкиТарифнойСетки();
	
	Если СтруктураСоответствий <> Неопределено Тогда
		// Области действия
		Для Каждого ТекКлюч Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл
			Если НЕ ТекКлюч.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			мИмя = ТекКлюч.Ключ;
			мПуть = "ТарифнаяСетка." + мИмя;
			
			Если флСложныйТариф Тогда
				Если флТарифнаяСетка Тогда
					Элемент = Элементы.Добавить(мИмя, Тип("ПолеФормы"), Элементы.ТарифнаяСетка);
				Иначе
					Элемент = Элементы.Вставить(мИмя, Тип("ПолеФормы"), Элементы.ТарифнаяСетка, Элементы.ГруппировкаТарифа);
				КонецЕсли;
			Иначе
				Если ОтображатьТекущиеТарифы Тогда
					Элемент = Элементы.Вставить(мИмя, Тип("ПолеФормы"), Элементы.ТарифнаяСетка, Элементы["ГруппаТариф"]);
				Иначе
					Элемент = Элементы.Вставить(мИмя, Тип("ПолеФормы"), Элементы.ТарифнаяСетка, Элементы["Тариф"]);
				КонецЕсли;
			КонецЕсли;
			
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.КнопкаОчистки = Истина;	
			Элемент.ПутьКДанным = мПуть;
			Если мИмя <> "ПунктНазначения" И мИмя <> "ПунктОтправления" Тогда
				Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
			КонецЕсли;
			
			// для Области действия списком определяем обработчик начало выбора из списка
			ПозицияСписок = СтрНайти(мИмя, "Список");
			Если ПозицияСписок <> 0 Тогда
				Если СтруктураСоответствий.МассивОбластейДействияСписокЗначений.Найти(НРег(мИмя)) <> Неопределено Тогда
					Элемент.УстановитьДействие("НачалоВыбора", "ТарифнаяСеткаОбластьДействияСписокНачалоВыбора");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
				
		// Интервалы (группировки)
		ТаблицаИнтервалов.Сортировать("Интервал, Интервал2, Интервал3, Интервал4");
		Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл
			Если ОтображатьТекущиеТарифы Тогда 
				ГруппаИнтервал = Элементы.Добавить(ТекИнтервал.Имя + "ГруппаТариф", Тип("ГруппаФормы"), Элементы.ТарифнаяСетка);
				ГруппаИнтервал.Группировка = ГруппировкаКолонок.Горизонтальная;
				ГруппаИнтервал.ОтображатьВШапке = Истина;
				ГруппаИнтервал.Заголовок = "<= " + ТекИнтервал.Интервал + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа1)
					+ ?(ЗначениеЗаполнено(ГруппировкаТарифа2), " / <= " + ТекИнтервал.Интервал2 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа2), "")
					+ ?(ЗначениеЗаполнено(ГруппировкаТарифа3), " / <= " + ТекИнтервал.Интервал3 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа3), "")
					+ ?(ЗначениеЗаполнено(ГруппировкаТарифа4), " / <= " + ТекИнтервал.Интервал4 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа4), "");
					
				Элемент = Элементы.Добавить(ТекИнтервал.Имя + "ТекущийТариф", Тип("ПолеФормы"), ГруппаИнтервал);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = ТекИнтервал.Путь + "ТекущийТариф";
				Элемент.Заголовок = НСтр("en='Current';ru='Текущий'");
				Элемент.ТолькоПросмотр = Истина;
				Элемент.Ширина = 10;
				
				Элемент = Элементы.Добавить(ТекИнтервал.Имя + "ПроцентИзмененияТарифа", Тип("ПолеФормы"), ГруппаИнтервал);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = ТекИнтервал.Путь + "ПроцентИзмененияТарифа";
				Элемент.УстановитьДействие("ПриИзменении", "ТарифнаяСеткаГруппировкаПроцентИзмененияТарифаПриИзменении");
				Элемент.Заголовок = "%";
				Элемент.Ширина = 8;
				Элемент.КнопкаВыбора = Ложь;
				Элемент.ВыделятьОтрицательные = Истина;
				
				Элемент = Элементы.Добавить(ТекИнтервал.Имя, Тип("ПолеФормы"), ГруппаИнтервал);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = ТекИнтервал.Путь;
				Элемент.УстановитьДействие("ПриИзменении", "ТарифнаяСеткаГруппировкаТарифПриИзменении");
				Элемент.Заголовок = НСтр("en='New';ru='Новый'");
				Элемент.Ширина = 10;
				Элемент.КнопкаВыбора = Ложь;					
			Иначе
				Элемент = Элементы.Добавить(ТекИнтервал.Имя, Тип("ПолеФормы"), Элементы.ТарифнаяСетка);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = ТекИнтервал.Путь;
				Элемент.УстановитьДействие("ПриИзменении", "ТарифнаяСеткаГруппировкаТарифПриИзменении");
				Элемент.Ширина = 10;
				Элемент.КнопкаВыбора = Ложь;
				
				Если Элементы.ТарифнаяСетка.ВысотаШапки = 1 Тогда
					Элемент.Заголовок = "<= " + ТекИнтервал.Интервал + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа1)
						+ ?(ЗначениеЗаполнено(ГруппировкаТарифа2), " / <= " + ТекИнтервал.Интервал2 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа2), "")
						+ ?(ЗначениеЗаполнено(ГруппировкаТарифа3), " / <= " + ТекИнтервал.Интервал3 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа3), "")
						+ ?(ЗначениеЗаполнено(ГруппировкаТарифа4), " / <= " + ТекИнтервал.Интервал4 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа4), "");
				Иначе
					Элемент.Заголовок = "<= " + ТекИнтервал.Интервал + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа1)
						+ ?(ЗначениеЗаполнено(ГруппировкаТарифа2), Символы.ПС + "<= " + ТекИнтервал.Интервал2 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа2), "")
						+ ?(ЗначениеЗаполнено(ГруппировкаТарифа3), Символы.ПС + "<= " + ТекИнтервал.Интервал3 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа3), "")
						+ ?(ЗначениеЗаполнено(ГруппировкаТарифа4), Символы.ПС + "<= " + ТекИнтервал.Интервал4 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа4), "");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// пункт отправления должен быть левее пункта назначения
	ЭлемПунктОтправления = Элементы.Найти("ПунктОтправления");
	Если ЭлемПунктОтправления = Неопределено Тогда
		ЭлемПунктОтправления = Элементы.Найти("ПунктОтправленияСписок");
	КонецЕсли;
	ЭлемПунктНазначения = Элементы.Найти("ПунктНазначения");
	Если ЭлемПунктНазначения = Неопределено Тогда
		ЭлемПунктНазначения = Элементы.Найти("ПунктНазначенияСписок");
	КонецЕсли;
	Если ЭлемПунктОтправления <> Неопределено И ЭлемПунктНазначения <> Неопределено Тогда
		Элементы.Переместить(ЭлемПунктОтправления, Элементы.ТарифнаяСетка, ЭлемПунктНазначения);
	КонецЕсли;
	
	// геозона отправления должна быть левее геозоны назначения
	ЭлемГеозонаОтправления = Элементы.Найти("ГеозонаОтправления");
	Если ЭлемГеозонаОтправления = Неопределено Тогда
		ЭлемГеозонаОтправления = Элементы.Найти("ГеозонаОтправленияСписок");
	КонецЕсли;
	ЭлемГеозонаНазначения = Элементы.Найти("ГеозонаНазначения");
	Если ЭлемГеозонаНазначения = Неопределено Тогда
		ЭлемГеозонаНазначения = Элементы.Найти("ГеозонаНазначенияСписок");
	КонецЕсли;
	Если ЭлемГеозонаОтправления <> Неопределено И ЭлемГеозонаНазначения <> Неопределено Тогда
		Элементы.Переместить(ЭлемГеозонаОтправления, Элементы.ТарифнаяСетка, ЭлемГеозонаНазначения);
	КонецЕсли;
	
	// размещаем колонки минимальной выработки справа
	Элементы.Переместить(Элементы.ТарифнаяСеткаМинимальноеКоличество, Элементы.ТарифнаяСетка);
	Элементы.Переместить(Элементы.ТарифнаяСеткаМинимальнаяСтоимость, Элементы.ТарифнаяСетка);
	Элементы.Переместить(Элементы.ТарифнаяСеткаСпособЗаполненияКоличества, Элементы.ТарифнаяСетка);
	
	УстановитьУсловноеОформление();
КонецПроцедуры
																		 
&НаСервере
Процедура ДобавитьИнтервалНаСервере(Интервал, Интервал2 = Неопределено, Интервал3 = Неопределено, Интервал4 = Неопределено, мИмя = "")
	//Если Интервал = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если Элементы.ТарифнаяСетка.ВысотаШапки = 1 Тогда
		мЗаголовок = "<= " + Интервал + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа1)
			+ ?(ЗначениеЗаполнено(Интервал2), " / <= " + Интервал2 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа2), "")
			+ ?(ЗначениеЗаполнено(Интервал3), " / <= " + Интервал3 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа3), "")
			+ ?(ЗначениеЗаполнено(Интервал4), " / <= " + Интервал4 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа4), "");
	Иначе
		мЗаголовок = "" + Интервал + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа1)
			+ ?(ЗначениеЗаполнено(Интервал2), Символы.ПС + Интервал2 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа2), "")
			+ ?(ЗначениеЗаполнено(Интервал3), Символы.ПС + Интервал3 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа3), "")
			+ ?(ЗначениеЗаполнено(Интервал4), Символы.ПС + Интервал4 + " " + ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(ГруппировкаТарифа4), "");
	КонецЕсли;
		
	// Двойное подчеркивание в имени интервала означает разделитель между значениями разных группировок
	мИмя = "КолонкаИнтервал" + Формат(Интервал, "ЧН=0; ЧГ=")
		+ ?(Интервал2 = Неопределено, "", "__" + Формат(Интервал2, "ЧН=0; ЧГ="))
		+ ?(Интервал3 = Неопределено, "", "__" + Формат(Интервал3, "ЧН=0; ЧГ="))
		+ ?(Интервал4 = Неопределено, "", "__" + Формат(Интервал4, "ЧН=0; ЧГ="));
		
	мИмя = СтрЗаменить(мИмя, " ", "");
	мИмя = СтрЗаменить(мИмя, ",", "_"); //подчеркивание в имени интервала означает запятую в дробном числе
	
	мТип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	мПуть = "ТарифнаяСетка"; 
	
	мсвДобавляемыеРеквизиты = Новый Массив;
	
	// проверка на то, что реквизиты уже не добавлены ранее
	мсвРеквизитыПоиск = ПолучитьРеквизиты(мПуть);
	флЕстьРеквизитТариф = Ложь;
	флЕстьРеквизитТарифПроцент = Ложь;
	флЕстьРеквизитТарифТекущий = Ложь;
	Для Каждого ТекРеквизитПоиск Из мсвРеквизитыПоиск Цикл
		Если ТекРеквизитПоиск.Имя = мИмя Тогда
			флЕстьРеквизитТариф = Истина;
			Продолжить;
		ИначеЕсли ТекРеквизитПоиск.Имя = мИмя + "ПроцентИзмененияТарифа" Тогда
			флЕстьРеквизитТарифПроцент = Истина;
			Продолжить;
		ИначеЕсли ТекРеквизитПоиск.Имя = мИмя + "ТекущийТариф" Тогда
			флЕстьРеквизитТарифТекущий = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ флЕстьРеквизитТариф Тогда
		РеквизитТариф = Новый РеквизитФормы(мИмя, мТип, мПуть, мЗаголовок, Истина); 
	    мсвДобавляемыеРеквизиты.Добавить(РеквизитТариф);
	КонецЕсли;
	
	Если НЕ флЕстьРеквизитТарифПроцент Тогда
		мТипПроцент = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2));
		мсвДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(мИмя + "ПроцентИзмененияТарифа", мТипПроцент, мПуть,, Истина));
	КонецЕсли;
	
	Если НЕ флЕстьРеквизитТарифТекущий Тогда
		мсвДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(мИмя + "ТекущийТариф", мТип, мПуть));
	КонецЕсли;
			
	//Попытка
	
	Если мсвДобавляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(мсвДобавляемыеРеквизиты);
		мПуть = мПуть + "." + мИмя;
		
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.Интервал = Интервал;
		Если Интервал2 <> Неопределено Тогда
			НовыйИнтервал.Интервал2 = Интервал2;
		КонецЕсли;
		Если Интервал3 <> Неопределено Тогда
			НовыйИнтервал.Интервал3 = Интервал3;
		КонецЕсли;
		Если Интервал4 <> Неопределено Тогда
			НовыйИнтервал.Интервал4 = Интервал4;
		КонецЕсли;
		НовыйИнтервал.Путь = мПуть;
		НовыйИнтервал.Имя = мИмя;
		
		Элемент = Элементы.Добавить(мИмя, Тип("ПолеФормы"), ЭтотОбъект.Элементы.ТарифнаяСетка);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.КнопкаОчистки = Истина;	
		Элемент.ПутьКДанным = мПуть;
	КонецЕсли;
		
	//Исключение
	//	Сообщить("Интервал уже добавлен в таблицу.");
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИнтервалНаСервере(Интервал)
	
	//Найдем Интервал      
	НайдСтроки = ТаблицаИнтервалов.НайтиСтроки(Новый Структура("Имя", Интервал));
	Если НайдСтроки.Количество() Тогда
		
		ТекСтрока = НайдСтроки[0];
		мПуть = ТекСтрока.Путь;
		мИмя = ТекСтрока.Имя;
		
		ТаблицаИнтервалов.Удалить(ТекСтрока);
		
		Элементы.Удалить(Элементы[мИмя]);
		
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить(мПуть);
		
		Если Элементы.Найти(мИмя + "ПроцентИзмененияТарифа") <> Неопределено Тогда
			Элементы.Удалить(Элементы[мИмя + "ПроцентИзмененияТарифа"]);
			УдаляемыеРеквизиты.Добавить(мПуть + "ПроцентИзмененияТарифа");
		КонецЕсли;
		Если Элементы.Найти(мИмя + "ТекущийТариф") <> Неопределено Тогда
			Элементы.Удалить(Элементы[мИмя + "ТекущийТариф"]);
			УдаляемыеРеквизиты.Добавить(мПуть + "ТекущийТариф");
		КонецЕсли;
		
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
	Иначе
		ТекстНСТР = НСтр("en='Interval is not in the table.';ru='Интервал отсутствует в таблице.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьГруппуЭлементовРеквизитов(УдаляемыеЭлементы, УдаляемыеРеквизиты)
	
	Для Каждого ТекЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элементы[ТекЭлемент]);
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметров()
	
	СтруктураПараметров = Новый Структура();
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	МассивИмен = Новый Массив;
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ТекИмя Из СтруктураСоответствий.СоответствиеЗаголовка Цикл
		МассивИмен.Добавить(ТекИмя.Ключ);
		МассивЗаголовков.Добавить(ТекИмя.Значение);   
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивИмен", МассивИмен);
	СтруктураПараметров.Вставить("МассивЗаголовков", МассивЗаголовков);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокДобавленныхОбластей()
	
	ОтмеченныеОбласти = Новый СписокЗначений();
	
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Если СтруктураСоответствий = Неопределено Или Не ТипЗнч(СтруктураСоответствий) = Тип("Структура") Тогда 
		Возврат ОтмеченныеОбласти;
	КонецЕсли;
	
	Если СтруктураСоответствий.Свойство("СоответствиеВидимостиПолейКомпоновки") Тогда 
		Для Каждого ТекОбласть Из СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки Цикл 
			Если ТекОбласть.Значение = Истина Тогда 
				ОтмеченныеОбласти.Добавить(ТекОбласть.Ключ, СтруктураСоответствий.СоответствиеЗаголовка[ТекОбласть.Ключ]);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Возврат ОтмеченныеОбласти;
	КонецЕсли;
	
	Возврат ОтмеченныеОбласти;
	
КонецФункции // ПолучитьМассивДобавленныхОбластей()

&НаСервере
Процедура ПолучитьУстановитьТип(мИмя)
	
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ВыбираемыйТип = СтруктураСоответствий.СоответствиеТипов[мИмя];
		
	Элементы.ЗначениеОбласти.ОграничениеТипа = ВыбираемыйТип;
	Объект.ЗначениеОбласти = Элементы.ЗначениеОбласти.ОграничениеТипа.ПривестиЗначение(Неопределено);
	Элементы.ЗначениеОбласти.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступность()
	
	Элементы.СохранитьТарифнуюСетку.Доступность = ТарифнаяСетка.Количество();
	
	ДоступностьКнопок = ЗначениеЗаполнено(Объект.Прейскурант)
		И (ЗначениеЗаполнено(Объект.ПараметрВыработки) ИЛИ Объект.УсловиеПримененияФиксТарифа = 1);
	Элементы.ТарифнаяСетка.Доступность = ДоступностьКнопок;
	//Элементы.ЗагрузитьДанные.Доступность = ДоступностьКнопок;
	//Элементы.ГруппаОтборов.Доступность = ДоступностьКнопок;
	
	перДоступность = ЗначениеЗаполнено(Объект.ОбластьДействияОтбор);
	Элементы.ЗначениеОбласти.Доступность = перДоступность;
	Элементы.ЗначениеОбласти.АвтоОтметкаНезаполненного = перДоступность;
	
	флДоступностьТаблицы = ЗначениеЗаполнено(Объект.Прейскурант);
	Элементы.ГруппаДанные.Доступность       = флДоступностьТаблицы;
	Элементы.ГруппаИзменитьЦены.Доступность = флДоступностьТаблицы;
	Элементы.ExcelПросмотр.Доступность      = флДоступностьТаблицы;
	Элементы.ФормаГруппаВид.Доступность     = флДоступностьТаблицы;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбластьНаСервере(ИмяПоляОтбора)
	
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	мИмя = ИмяПоляОтбора;
	мИмяОриг = СтрЗаменить(мИмя, "Список", "");
	мПуть = "ТарифнаяСетка." + мИмя;
	
	Если Элементы.Найти(мИмяОриг) <> Неопределено
		ИЛИ Элементы.Найти(мИмяОриг + "Список") <> Неопределено Тогда //уже есть такая область
		Если флТарифнаяСетка Тогда
			ТекстНСТР = НСтр("en='Field <%1> or <%2> is already present in the table.';ru='Поле <%1> или <%2>, уже имеется в таблице.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, 
								СтруктураСоответствий.СоответствиеЗаголовка[мИмяОриг],
								СтруктураСоответствий.СоответствиеЗаголовка[мИмяОриг + "Список"]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Иначе
			ТекстНСТР = НСтр("en='Field <%1> is already present in table.';ru='Поле <%1>, уже имеется в таблице.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, СтруктураСоответствий.СоответствиеЗаголовка[мИмяОриг]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.Добавить(мИмя, Тип("ПолеФормы"), Элементы.ТарифнаяСетка);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.КнопкаОчистки = Истина;	
	Элемент.ПутьКДанным = мПуть;
	Элемент.УстановитьДействие("НачалоВыбора", "ТарифнаяСеткаОбластьДействияСписокНачалоВыбора");
	Если НРег(мИмяОриг) <> "пунктназначения" И НРег(мИмяОриг) <> "пунктотправления" Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
	//Если мИмя = "ПунктОтправления" ИЛИ мИмя = "ПунктОтправленияСписок" Тогда
	//	ЭлемПунктНазначения = Элементы.Найти("ПунктНазначения");
	//	Если ЭлемПунктНазначения <> Неопределено Тогда
	//		Элементы.Переместить(Элемент, Элементы.ТарифнаяСетка, ЭлемПунктНазначения);
	//	Иначе
	//		ЭлемПунктНазначения = Элементы.Найти("ПунктНазначенияСписок");
	//		Если ЭлемПунктНазначения <> Неопределено Тогда
	//			Элементы.Переместить(Элемент, Элементы.ТарифнаяСетка, ЭлемПунктНазначения);
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли мИмя = "ПунктНазначения" ИЛИ мИмя = "ПунктНазначенияСписок" Тогда
	//	ЭлемПунктОтправления = Элементы.Найти("ПунктОтправления");
	//	Если ЭлемПунктОтправления <> Неопределено Тогда
	//		Элементы.Переместить(ЭлемПунктОтправления, Элементы.ТарифнаяСетка, Элемент);
	//	Иначе
	//		ЭлемПунктОтправления = Элементы.Найти("ПунктОтправленияСписок");
	//		Если ЭлемПунктОтправления <> Неопределено Тогда
	//			Элементы.Переместить(ЭлемПунктОтправления, Элементы.ТарифнаяСетка, Элемент);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[мИмя] = Истина;
	
	Если мИмя <> мИмяОриг И СтруктураСоответствий.МассивОбластейДействияСписокЗначений.Найти(НРег(мИмя)) = Неопределено Тогда
		СтруктураСоответствий.МассивОбластейДействияСписокЗначений.Добавить(НРег(мИмя));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураСоответствий, АдресВременногоХранилища);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьОбластьНаСервере(ИмяПоляОтбора)
	СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	СтруктураСоответствий.СоответствиеВидимостиПолейКомпоновки[ИмяПоляОтбора] = Ложь;
	
	ПозицияРазделителя = СтрНайти(ИмяПоляОтбора, "_Список");
	Если ПозицияРазделителя <> 0 Тогда
		ИмяПоляОтбора = Лев(ИмяПоляОтбора, ПозицияРазделителя-1);
		Если СтруктураСоответствий.МассивОбластейДействияСписокЗначений.Найти(НРег(ИмяПоляОтбора)) <> Неопределено Тогда
			СтруктураСоответствий.МассивОбластейДействияСписокЗначений.Удалить(НРег(ИмяПоляОтбора));
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураСоответствий, АдресВременногоХранилища);
КонецПроцедуры

&НаСервере
Процедура ТарифнаяСеткаПриНачалеРедактированияНаСервере(ID)
	
	Если НЕ флТарифнаяСетка Тогда
		СтруктураСоответствий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);	
		
		ЭтоПроф = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
		
		Если Объект.Прейскурант.ПрейскурантПоставщика Тогда
			Если ЭтоПроф Тогда
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты_проф");
			Иначе
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты");
			КонецЕсли;
		Иначе
			Если ЭтоПроф Тогда
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия_проф");
			Иначе //Логистика, Стандарт
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия");
			КонецЕсли;
		КонецЕсли;
		
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		ТекКомпоновщикНастроекОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
		ТекКомпоновщикНастроекОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		
		СтруктураСоответствий.СоответствиеКомпоновок.Вставить(ID, ТекКомпоновщикНастроекОтбора);
		
		ПоместитьВоВременноеХранилище(СтруктураСоответствий, АдресВременногоХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОкруглитьЦену(Число, ТочностьОкругления, РежимОкругленияТарифа)

	Перем Результат;
		
	// вычислим количество интервалов, входящих в число
	Если ТочностьОкругления <> 0 Тогда
		КоличествоИнтервалов = Число / ТочностьОкругления;
	Иначе
		КоличествоИнтервалов = 0;
	КонецЕсли;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
		
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если РежимОкругленияТарифа = 0 Тогда
			// По арифметическим правилам
			// При точности округления "0.1" 0.35 должно округлится до 0.4,
			// а 0.34 до 0.3
			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
			
		ИначеЕсли РежимОкругленияТарифа = 1 Тогда
			// В большую сторону
			// При точности округления "0.1" 0.35 должно округлится до 0.4, а -0.35 до -0.3
			Если КоличествоЦелыхИнтервалов > 0 Тогда
				Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
			Иначе
				Результат = ТочностьОкругления * КоличествоЦелыхИнтервалов;
			КонецЕсли;
		Иначе
			// В меньшую сторону
			// При точности округления "0.1" 0.35 должно округлится до 0.3, а -0.35 до -0.4
			Если КоличествоЦелыхИнтервалов > 0 Тогда
				Результат = ТочностьОкругления * КоличествоЦелыхИнтервалов;
			Иначе
				Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

&НаСервере
Процедура УстановитьКолонкиТарифаПоУмолчаниюСервер()
	СоздатьОбщиеКолонкиТарифнойСетки();
	Элементы.Переместить(Элементы.ТарифнаяСеткаМинимальноеКоличество, Элементы.ТарифнаяСетка);
	Элементы.Переместить(Элементы.ТарифнаяСеткаМинимальнаяСтоимость, Элементы.ТарифнаяСетка);
	Элементы.Переместить(Элементы.ТарифнаяСеткаСпособЗаполненияКоличества, Элементы.ТарифнаяСетка);
КонецПроцедуры

&НаСервере
Процедура СоздатьОбщиеКолонкиТарифнойСетки()
	Если НЕ флСложныйТариф Тогда //простые тарифы
		Если ОтображатьТекущиеТарифы Тогда
			ГруппаТариф = Элементы.Добавить("ГруппаТариф", Тип("ГруппаФормы"), Элементы.ТарифнаяСетка);
			ГруппаТариф.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаТариф.ОтображатьВШапке = Истина;
			ГруппаТариф.Заголовок = НСтр("en='Tariff';ru='Тариф'");
			
			Элемент = Элементы.Добавить("ТекущийТариф", Тип("ПолеФормы"), ГруппаТариф);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТарифнаяСетка.ТекущийТариф";
			Элемент.Заголовок = НСтр("en='Current';ru='Текущий'");
			Элемент.ТолькоПросмотр = Истина;
			
			Элемент = Элементы.Добавить("ПроцентИзмененияТарифа", Тип("ПолеФормы"), ГруппаТариф);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТарифнаяСетка.ПроцентИзмененияТарифа";
			Элемент.УстановитьДействие("ПриИзменении", "ТарифнаяСеткаПроцентИзмененияТарифаПриИзменении");
			Элемент.Заголовок = "%";
			Элемент.Ширина = 8;
			Элемент.КнопкаВыбора = Ложь;
			Элемент.ВыделятьОтрицательные = Истина;
			
			Элемент = Элементы.Добавить("Тариф", Тип("ПолеФормы"), ГруппаТариф);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТарифнаяСетка.Тариф";
			Элемент.УстановитьДействие("ПриИзменении", "ТарифнаяСеткаТарифПриИзменении");
			Элемент.Заголовок = "Новый";
			Элемент.КнопкаВыбора = Ложь;
		Иначе
			Элемент = Элементы.Добавить("Тариф", Тип("ПолеФормы"), Элементы.ТарифнаяСетка);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТарифнаяСетка.Тариф";
			Элемент.УстановитьДействие("ПриИзменении", "ТарифнаяСеткаТарифПриИзменении");
			Элемент.КнопкаВыбора = Ложь;
		КонецЕсли;
	Иначе //сложные тарифы
		Если НЕ флТарифнаяСетка Тогда
			Элемент = Элементы.Добавить("ГруппировкаТарифа", Тип("ПолеФормы"), Элементы.ТарифнаяСетка);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.КнопкаВыбора = Истина;
			Элемент.КнопкаОчистки = Истина;
			Элемент.КнопкаСоздания = Ложь;
			Элемент.БыстрыйВыбор = Ложь;
			Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			Элемент.ПутьКДанным = "ТарифнаяСетка.ГруппировкаТарифа";
			Элемент.УстановитьДействие("НачалоВыбора", "ТарифнаяСеткаГруппировкаТарифаНачалоВыбора");
		КонецЕсли;
	КонецЕсли;
	
	Если флТарифнаяСетка И флСложныйТариф И НЕ ОтображатьТекущиеТарифы Тогда
		Если ЗначениеЗаполнено(ГруппировкаТарифа4) Тогда
			Элементы.ТарифнаяСетка.ВысотаШапки = 4;
		ИначеЕсли ЗначениеЗаполнено(ГруппировкаТарифа3) Тогда
			Элементы.ТарифнаяСетка.ВысотаШапки = 3;
		ИначеЕсли ЗначениеЗаполнено(ГруппировкаТарифа2) Тогда
			Элементы.ТарифнаяСетка.ВысотаШапки = 2;
		Иначе
			Элементы.ТарифнаяСетка.ВысотаШапки = 1;
		КонецЕсли;
	Иначе
		Элементы.ТарифнаяСетка.ВысотаШапки = 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// жирный шрифт для измененных тарифов
	Если НЕ флСложныйТариф Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Тариф");
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифнаяСетка.Тариф");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТарифнаяСетка.ТекущийТариф");
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Тариф.Шрифт,,, Истина));
	Иначе
		Для Каждого ТекСтрока Из ТаблицаИнтервалов Цикл
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекСтрока.Имя);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекСтрока.Путь);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ТекСтрока.Путь + "ТекущийТариф");
			Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы[ТекСтрока.Имя].Шрифт,,, Истина));
		КонецЦикла;
	КонецЕсли;
	
	// серый шрифт для текущих (нередактируемых) значений тарифов
	Если ОтображатьТекущиеТарифы Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифнаяСетка.Тариф");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТарифнаяСетка.Тариф");
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
		Если НЕ флСложныйТариф Тогда
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТекущийТариф");
		Иначе
			Для Каждого ТекСтрока Из ТаблицаИнтервалов Цикл
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекСтрока.Имя + "ТекущийТариф");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НайтиТарифСеткой()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатТарифыТС.Ссылка
	|ИЗ
	|	Справочник.уатТарифыТС КАК уатТарифыТС
	|ГДЕ
	|	уатТарифыТС.ТарифнаяСетка
	|	И уатТарифыТС.СложныйТариф = &СложныйТариф
	|	И уатТарифыТС.Владелец = &Прейскурант
	|	И уатТарифыТС.ПараметрВыработки = &ПараметрВыработки
	|	И НЕ уатТарифыТС.ПометкаУдаления
	|	И уатТарифыТС.МетодРасчета = &МетодРасчета
	|	И (&ГруппировкаТарифа1 = ЗНАЧЕНИЕ(Перечисление.уатГруппировкиТарифов.ПустаяСсылка) ИЛИ уатТарифыТС.ГруппировкаТарифа1 = &ГруппировкаТарифа1)
	|	И (&НоменклатураУслуги = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ИЛИ уатТарифыТС.НоменклатураУслуги = &НоменклатураУслуги)");
	Запрос.УстановитьПараметр("Прейскурант", Объект.Прейскурант);
	Запрос.УстановитьПараметр("ПараметрВыработки", Объект.ПараметрВыработки);
	Запрос.УстановитьПараметр("СложныйТариф", флСложныйТариф);
	Запрос.УстановитьПараметр("ГруппировкаТарифа1", Объект.ГруппировкаТарифаОтбор);
	Запрос.УстановитьПараметр("НоменклатураУслуги", Объект.НоменклатураУслугиОтбор);
	Запрос.УстановитьПараметр("МетодРасчета", Объект.МетодРасчета);
	
	Если Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И уатТарифыТС.ТипПункта = &ТипПункта";
		Запрос.УстановитьПараметр("ТипПункта", Объект.ТипПункта);
	КонецЕсли;
	Если Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И уатТарифыТС.ТипТочкиМаршрута = &ТипТочкиМаршрута";
		Запрос.УстановитьПараметр("ТипТочкиМаршрута", Объект.ТипТочкиМаршрута);
	КонецЕсли;
	Если Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И уатТарифыТС.ВидУпаковки = &ВидУпаковки";
		Запрос.УстановитьПараметр("ВидУпаковки", Объект.ВидУпаковки);
	КонецЕсли;
	Если Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И уатТарифыТС.ТипКонтейнера = &ТипКонтейнера";
		Запрос.УстановитьПараметр("ТипКонтейнера", Объект.ТипКонтейнера);
	КонецЕсли;
	Если Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И уатТарифыТС.ВидСкладскойОперации = &ВидСкладскойОперации";
		Запрос.УстановитьПараметр("ВидСкладскойОперации", Объект.ВидСкладскойОперации);
		Если Объект.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТарифыТС.БазаТарифа = &БазаТарифа";
			Запрос.УстановитьПараметр("БазаТарифа", Объект.БазаТарифа);
		КонецЕсли;
		Если Объект.БазаТарифа = Перечисления.уатБазыСкладскихТарифов_уэ.КоличествоМест Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И уатТарифыТС.ВидУпаковки = &ВидУпаковки";
			Запрос.УстановитьПараметр("ВидУпаковки", Объект.ВидУпаковки);
		ИначеЕсли Объект.БазаТарифа = Перечисления.уатБазыСкладскихТарифов_уэ.КоличествоКонтейнеров Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И уатТарифыТС.ТипКонтейнера = &ТипКонтейнера";
			Запрос.УстановитьПараметр("ТипКонтейнера", Объект.ТипКонтейнера);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТарифСетка = Выборка.Ссылка;
	Иначе
		ТарифСетка = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкорректироватьТаблицуИнтерваловПриИзмененииСоставаГруппировок(НомерГруппировки)
	Если НомерГруппировки = 3 И ЗначениеЗаполнено(предГруппировкаТарифа3) И (НЕ ЗначениеЗаполнено(ГруппировкаТарифа3)) Тогда //очистка группировки 3
		// выполняется свертка строк по сочетанию группировок:
		// 1 2 3      1 2
		// 1 2 6  ->  2 3
		// 2 3 5
		// 2 3 7
		мсвСтрокиУдаления = Новый Массив;
		Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл
			Если мсвСтрокиУдаления.Найти(ТекИнтервал) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСтрокиПоиск = ТаблицаИнтервалов.НайтиСтроки(Новый Структура("Интервал, Интервал2", ТекИнтервал.Интервал, ТекИнтервал.Интервал2));
			Если мсвСтрокиПоиск.Количество() > 1 Тогда
				Для Каждого ТекСтрокаПоиск Из мсвСтрокиПоиск Цикл
					Если ТекСтрокаПоиск = ТекИнтервал Тогда
						Продолжить;
					КонецЕсли;
					
					мсвСтрокиУдаления.Добавить(ТекСтрокаПоиск);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		мсвУдаляемыеРеквизиты = Новый Массив;
		Для Каждого ТекСтрокаУдаления Из мсвСтрокиУдаления Цикл
			мсвУдаляемыеРеквизиты.Добавить(ТекСтрокаУдаления.Путь);
			мсвУдаляемыеРеквизиты.Добавить(ТекСтрокаУдаления.Путь + "ТекущийТариф");
			мсвУдаляемыеРеквизиты.Добавить(ТекСтрокаУдаления.Путь + "ПроцентИзмененияТарифа");
			
			Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя]);
			Если Элементы.Найти(ТекСтрокаУдаления.Имя + "ТекущийТариф") <> Неопределено Тогда
				Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя + "ТекущийТариф"]);
			КонецЕсли;
			Если Элементы.Найти(ТекСтрокаУдаления.Имя + "ПроцентИзмененияТарифа") <> Неопределено Тогда
				Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя + "ПроцентИзмененияТарифа"]);
			КонецЕсли;
			Если Элементы.Найти(ТекСтрокаУдаления.Имя + "ГруппаТариф") <> Неопределено Тогда
				Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя + "ГруппаТариф"]);
			КонецЕсли;
		
			ТаблицаИнтервалов.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
		ИзменитьРеквизиты(, мсвУдаляемыеРеквизиты);
		
	ИначеЕсли НомерГруппировки = 2 И ЗначениеЗаполнено(предГруппировкаТарифа2) И НЕ ЗначениеЗаполнено(ГруппировкаТарифа2) Тогда //очистка группировки 2
		// выполняется свертка строк по сочетанию группировок:
		// 1 2      1
		// 1 3  ->  2
		// 2 3
		// 2 5
		мсвСтрокиУдаления = Новый Массив;
		Для Каждого ТекИнтервал Из ТаблицаИнтервалов Цикл
			Если мсвСтрокиУдаления.Найти(ТекИнтервал) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСтрокиПоиск = ТаблицаИнтервалов.НайтиСтроки(Новый Структура("Интервал", ТекИнтервал.Интервал));
			Если мсвСтрокиПоиск.Количество() > 1 Тогда
				Для Каждого ТекСтрокаПоиск Из мсвСтрокиПоиск Цикл
					Если ТекСтрокаПоиск = ТекИнтервал Тогда
						Продолжить;
					КонецЕсли;
					
					мсвСтрокиУдаления.Добавить(ТекСтрокаПоиск);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		мсвУдаляемыеРеквизиты = Новый Массив;
		Для Каждого ТекСтрокаУдаления Из мсвСтрокиУдаления Цикл
			мсвУдаляемыеРеквизиты.Добавить(ТекСтрокаУдаления.Путь);
			мсвУдаляемыеРеквизиты.Добавить(ТекСтрокаУдаления.Путь + "ТекущийТариф");
			мсвУдаляемыеРеквизиты.Добавить(ТекСтрокаУдаления.Путь + "ПроцентИзмененияТарифа");
			
			Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя]);
			Если Элементы.Найти(ТекСтрокаУдаления.Имя + "ТекущийТариф") <> Неопределено Тогда
				Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя + "ТекущийТариф"]);
			КонецЕсли;
			Если Элементы.Найти(ТекСтрокаУдаления.Имя + "ПроцентИзмененияТарифа") <> Неопределено Тогда
				Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя + "ПроцентИзмененияТарифа"]);
			КонецЕсли;
			Если Элементы.Найти(ТекСтрокаУдаления.Имя + "ГруппаТариф") <> Неопределено Тогда
				Элементы.Удалить(Элементы[ТекСтрокаУдаления.Имя + "ГруппаТариф"]);
			КонецЕсли;
			
			ТаблицаИнтервалов.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
		ИзменитьРеквизиты(, мсвУдаляемыеРеквизиты);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборГруппировкиТарифаОткрытьФорму(Элемент)
	
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборГруппировкиТарифаЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	списГруппировки = Новый СписокЗначений;
	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Грузоподъемность"));
	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.ОбъемКузова"));
	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза"));
	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.СтоимостьГруза"));

	ПараметрыФормы.Вставить("ДополнительныеГруппировки", списГруппировки);
	
	ОткрытьФорму("Справочник.уатТарифыТС.Форма.ФормаВыбораГруппировкиТарифа", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборГруппировкиТарифаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа1 Тогда
		ГруппировкаТарифа1 = Результат;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа2 Тогда
		ГруппировкаТарифа2 = Результат;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа3 Тогда
		ГруппировкаТарифа3 = Результат;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа4 Тогда
		ГруппировкаТарифа4 = Результат;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифаОтбор Тогда
		Объект.ГруппировкаТарифаОтбор = Результат;
	Иначе
		ЭлементГруппировкаТарифа = Элементы.Найти("ГруппировкаТарифа");
		Если ЭлементГруппировкаТарифа <> Неопределено 
			И ДополнительныеПараметры.Элемент = ЭлементГруппировкаТарифа Тогда
			ТекущиеДанные = Элементы.ТарифнаяСетка.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущиеДанные.ГруппировкаТарифа = Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеЕдиницыИзмеренияГруппировкиТарифа(Группировка)
	Результат = "";
	Если Группировка = Перечисления.уатГруппировкиТарифов.СтоимостьГруза Тогда
		Результат = "руб";
	ИначеЕсли Группировка = Перечисления.уатГруппировкиТарифов.Грузоподъемность Тогда
		Результат = "т";
	ИначеЕсли Группировка = Перечисления.уатГруппировкиТарифов.ОбъемКузова Тогда
		Результат = "м3";
	ИначеЕсли ТипЗнч(Группировка) = Тип("СправочникСсылка.уатПараметрыВыработки") Тогда
		Результат = НРег(Группировка.ЕдиницаИзмерения.Наименование)
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ТарифнаяСеткаКомандыИнтервал.Видимость = флСложныйТариф;
		
	Элементы.ТарифСетка.Видимость = флТарифнаяСетка;
	Элементы.ТарифСеткаНоменклатура.Видимость = флТарифнаяСетка;
	Элементы.ГруппаГруппировки.Видимость = флТарифнаяСетка И флСложныйТариф;
	Элементы.ТарифнаяСеткаНоменклатураУслуги.Видимость = НЕ флТарифнаяСетка;
	Элементы.ГруппировкаТарифаОтбор.Видимость = флСложныйТариф;
	//Элементы.ГруппаОтборов.Видимость = НЕ флТарифнаяСетка;
	
	Элементы.ТипПункта.Видимость            = (Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта"));
	Элементы.ТипТочкиМаршрута.Видимость     = (Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации"));
	Элементы.ВидУпаковкиКоличествоУпаковок.Видимость          = (Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоУпаковок"))
		ИЛИ (Объект.БазаТарифа = ПредопределенноеЗначение("Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоМест"));
	Элементы.ТипКонтейнераКоличествоКонтейнеров.Видимость          = (Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоУпаковок"))
		ИЛИ (Объект.БазаТарифа = ПредопределенноеЗначение("Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоМест"));
	Элементы.ВидСкладскойОперации.Видимость = (Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка"));
	Элементы.БазаТарифа.Видимость           = (Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка"))
		И (Объект.МетодРасчета = ПредопределенноеЗначение("Перечисление.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки"));
	Элементы.НастроитьНормуБесплатногоХранения.Видимость = (Объект.ВидСкладскойОперации = ПредопределенноеЗначение("Перечисление.уатВидыСкладскихОпераций_уэ.Хранение"));
	
	Элементы.КоличествоБесплатныхЕдиниц.Видимость = Объект.МетодРасчета = ПредопределенноеЗначение("Перечисление.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки")
		И Объект.ВидСкладскойОперации <> ПредопределенноеЗначение("Перечисление.уатВидыСкладскихОпераций_уэ.Хранение");
	
	ФиксТариф = (Объект.МетодРасчета = ПредопределенноеЗначение("Перечисление.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой"));
	Элементы.УсловиеПримененияФиксТарифа.Видимость = ФиксТариф;
	Если ФиксТариф Тогда
		ТекстНСТР = НСтр("en='The tariff will be used in calculating the cost of services if the amount of output in the document is not less than the specified value.';ru='Тариф будет использоваться при расчете стоимости услуг, если количество выработки в документе не меньше, чем указанное значение.'");
	Иначе
		ТекстНСТР = НСтр("en='The minimum amount of output for the specified output parameter, which is taken into account when calculating the cost of services at tariffs. If the amount of output is less than the minimum, the price of the service will be recalculated at the minimum cost according to the tariff.';ru='Минимальное количество выработки по указанному параметру выработки, которое учитывается при расчете стоимости услуг по тарифам. Если количество выработки меньше чем минимальное, то цена услуги будет пересчитана по минимальной стоимости по тарифу.'");
	КонецЕсли;
	Элементы.ТарифнаяСеткаМинимальноеКоличество.Подсказка = ТекстНСТР;
	
	//Элементы.ПараметрВыработки.Видимость = НЕ (ФиксТариф И Объект.УсловиеПримененияФиксТарифа = 1);
	Если ЗначениеЗаполнено(Объект.Прейскурант) Тогда
		Элементы.ГруппаНачалоРаботы.Видимость = Ложь;
		Элементы.ГруппаОсновныеРеквизиты1.Видимость = Истина;
		Элементы.ГруппаОсновныеРеквизиты2.Видимость = Истина;
		Элементы.ГруппаОсновныеРеквизиты3.Видимость = Истина;
	Иначе
		Элементы.ГруппаНачалоРаботы.Видимость = Истина;
		Элементы.ГруппаОсновныеРеквизиты1.Видимость = Ложь;
		Элементы.ГруппаОсновныеРеквизиты2.Видимость = Ложь;
		Элементы.ГруппаОсновныеРеквизиты3.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновныеРеквизитыПоВыбранномуТарифу(ВыбТариф)
	
	Объект.Прейскурант = ВыбТариф.Владелец;
	Объект.ПараметрВыработки = ВыбТариф.ПараметрВыработки;
	
	Объект.МетодРасчета = ВыбТариф.МетодРасчета;
	Объект.ТипПункта = ВыбТариф.ТипПункта;
	Объект.ТипТочкиМаршрута = ВыбТариф.ТипТочкиМаршрута;
	Объект.ВидУпаковки = ВыбТариф.ВидУпаковки;
	Объект.ТипКонтейнера = ВыбТариф.ТипКонтейнера;
	Объект.ВидСкладскойОперации = ВыбТариф.ВидСкладскойОперации;
	Объект.БазаТарифа = ВыбТариф.БазаТарифа;
	Объект.УсловиеПримененияФиксТарифа = ВыбТариф.УсловиеПримененияФиксТарифа;
	ТарифСетка = ВыбТариф.Ссылка;
	
	флТарифнаяСетка = ВыбТариф.ТарифнаяСетка;
	флСложныйТариф  = ВыбТариф.СложныйТариф;
	
КонецПроцедуры

#КонецОбласти

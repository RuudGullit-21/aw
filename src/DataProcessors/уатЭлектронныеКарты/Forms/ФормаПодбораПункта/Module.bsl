
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Лат                   = Параметры.Лат;
	Лон                   = Параметры.Лон;
	КаталогПунктовНаКарте = Параметры.КаталогПунктовНаКарте;
	РежимОткрытия         = Параметры.РежимОткрытия;
	МассивПунктов         = Параметры.МассивПунктов;
	Для Каждого ТекПункт Из МассивПунктов Цикл
		НоваяСтрока = ПунктыМаршрута.Добавить();
		НоваяСтрока.Пункт      = ТекПункт.Пункт;
		НоваяСтрока.Расстояние = ТекПункт.Расстояние;
		НоваяСтрока.Индекс     = ТекПункт.Индекс;
	КонецЦикла;
	
	РадиусПоиска  = 1000; 
	
	ТипПоставщика = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
	Если ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.DaData
		ИЛИ ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.Яндекс
		ИЛИ ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда
		
		Если ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда
			Элементы.НаименованиеПункта.КартинкаКнопкиВыбора = БиблиотекаКартинок.уатDaData;
		Иначе
			Элементы.НаименованиеПункта.КартинкаКнопкиВыбора = БиблиотекаКартинок.уатOSM;
		КонецЕсли;
		
		ИспользоватьПодсказкиАдресов            = Истина;
		СоздаватьПодобранныеПунктыАвтоматически = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПодсказкиАдресов_СоздаватьПунктыВЗаказеНаТС");
	Иначе
		Элементы.НаименованиеПункта.КартинкаКнопкиВыбора = Новый Картинка;
		Элементы.НаименованиеПункта.КнопкаВыбора         = Ложь;
	КонецЕсли;
	ВосстановитьНастройки();
	СформироватьТипыОтрезковПути(Лат, Лон);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НаименованиеПункта = уатЭлектронныеКартыКлиент.ПолучитьАдресПоКоординатамOSM(Лат, Лон);
	
	Если ИспользоватьПодсказкиАдресов Тогда
		ТекстОшибки  = "";
		ДанныеВыбора      = уатЭлектронныеКартыКлиент.ПолучитьПодсказкиПоАдресу(НаименованиеПункта, ТекстОшибки);
		Если ДанныеВыбора.Количество() <> 0 Тогда
			ВыбранноеЗначение = ДанныеВыбора[0].Значение;
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
				Попытка
					#Если ВебКлиент Тогда
						АдресСтруктура = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
					#Иначе
						ЧтениеJSON = Новый ЧтениеJSON;
						ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
						АдресСтруктура = ПрочитатьJSON(ЧтениеJSON);
						ЧтениеJSON.Закрыть();
					#КонецЕсли
					ПунктСтруктура    = АдресСтруктура;
					ВыбранноеЗначение = АдресСтруктура.ПредставлениеАдреса;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПолучитьСоседниеПункты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоседниеПунктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СоседниеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Новый Структура("НовыйАдресСсылка, ТипОтрезкаПути", ТекущиеДанные.Пункт, ТипОтрезкаПути));
КонецПроцедуры

&НаКлиенте
Процедура РадиусПоискаПриИзменении(Элемент)
	ПолучитьСоседниеПункты();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПунктаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ИспользоватьПодсказкиАдресов Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = "";
		ДанныеВыбора = уатЭлектронныеКартыКлиент.ПолучитьПодсказкиПоАдресу(НаименованиеПункта, ТекстОшибки);
		ДанныеВыбора.Добавить(НаименованиеПункта,,, БиблиотекаКартинок.УровеньДоступаРедактирование);
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПунктаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Попытка
			#Если ВебКлиент Тогда
				АдресСтруктура = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
			#Иначе
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
				АдресСтруктура = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
			#КонецЕсли
			АдресСтруктура.Вставить("АдресДляПоиска", Элемент.ТекстРедактирования);
			
			ПунктСтруктура    = АдресСтруктура;
			ВыбранноеЗначение = АдресСтруктура.ПредставлениеАдреса;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоседниеПунктыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СоседниеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") 
		ИЛИ ТипЗнч(ТекущийЭлемент) <> Тип("ДополнениеЭлементаФормы")Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("СоседниеПунктыПриАктивизацииСтрокиСервер", 0.5, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПункт(Команда)
	Если ПустаяСтрока(НаименованиеПункта) Тогда
		ТекстНСТР = НСтр("ru='Не заполнен адрес'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "НаименованиеПункта"); 
		Возврат;
	КонецЕсли;

	СоздатьПунктПоСтроке(НаименованиеПункта);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМаршрут(Команда)
	ТекущиеДанные = Элементы.СоседниеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Новый Структура("НовыйАдресСсылка, ТипОтрезкаПути", ТекущиеДанные.Пункт, ТипОтрезкаПути));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПунктов(Команда)
	ПолучитьСоседниеПункты();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблон(Команда)
	
	ПараметрыФормы = Новый Структура("ОбъектНастройки", "Справочник_уатПунктыНазначения");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СоседниеПунктыПриАктивизацииСтрокиСервер()
	
	ТекущиеДанные = Элементы.СоседниеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КоординатыНовойТочки = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекущиеДанные.Пункт, "Лат, Лон");
	Если ТипЗнч(КоординатыНовойТочки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТипыОтрезковПути(КоординатыНовойТочки.Лат, КоординатыНовойТочки.Лон);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПунктПоСтроке(АдресСтрока)
	
	Если ТипЗнч(ПунктСтруктура) = Тип("Структура")
		И ПунктСтруктура.Свойство("ПредставлениеАдреса")
		И ПунктСтруктура.Свойство("ЗначениеАдреса") Тогда
		// Данные о полях адреса получены из сервиса подсказок
		СоздатьАдресВводКИЗавершение(
		Новый Структура("Значение, Представление", ПунктСтруктура.ЗначениеАдреса, АдресСтрока), 
		Новый Структура("СтруктураДанныеАдреса",ПунктСтруктура));
	Иначе
		
		КоординатыАдреса = Новый Структура("Широта, Долгота", Лат, Лон);
		АдресДляПоиска   = ?(ТипЗнч(ПунктСтруктура) = Тип("Структура") И ПунктСтруктура.Свойство("АдресДляПоиска"),
		ПунктСтруктура.АдресДляПоиска, НаименованиеПункта);

		НовыйАдресСсылка = СоздатьАдресСервер(АдресСтрока, КоординатыАдреса,,АдресДляПоиска);
		Закрыть(Новый Структура("НовыйАдресСсылка, ТипОтрезкаПути", НовыйАдресСсылка, ТипОтрезкаПути));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтрезкаПутиПриИзменении(Элемент)
	ТипОтрезкаПути = 0;
	Для Каждого ТекСтрока Из Элементы.ТипОтрезкаПути.СписокВыбора Цикл
		Если ТекСтрока.Значение = ТипОтрезкаПутиСтрока Тогда
			Прервать;
		КонецЕсли;
		ТипОтрезкаПути = ТипОтрезкаПути + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СоздатьАдресСервер(АдресПредставление, КоординатыАдреса, ЗначениеАдреса = Неопределено, АдресДляПоиска = "")
	
	ТекстНСтр = "";
	
	// Поиск существующего в базе пункта
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	уатПунктыНазначения.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	                      |ГДЕ
	                      |	уатПунктыНазначения.ПометкаУдаления = ЛОЖЬ
	                      |	И уатПунктыНазначения.ЭтоГруппа = ЛОЖЬ
	                      |	И (уатПунктыНазначения.Наименование = &АдресПредставление
	                      |			ИЛИ уатПунктыНазначения.Адрес = &АдресПредставление
	                      |			ИЛИ уатПунктыНазначения.АдресДляПоиска = &АдресПредставление)
	                      |	И (уатПунктыНазначения.Лат = &Широта
	                      |			ИЛИ &Широта = 0)
	                      |	И (уатПунктыНазначения.Лон = &Долгота
	                      |			ИЛИ &Долгота = 0)");
	Запрос.УстановитьПараметр("АдресПредставление", АдресПредставление);
	Запрос.УстановитьПараметр("Широта",             КоординатыАдреса.Широта);
	Запрос.УстановитьПараметр("Долгота",            КоординатыАдреса.Долгота);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
		ТекстНСтр = НСтр("ru = 'Обнаружен существующий пункт назначения. Новый элемент не был создан.'");
	Иначе
		НовыйАдрес = Справочники.уатПунктыНазначения.СоздатьЭлемент();
		НовыйАдрес.Лат                 = КоординатыАдреса.Широта;
		НовыйАдрес.Лон                 = КоординатыАдреса.Долгота;
		НовыйАдрес.Родитель            = КаталогПунктовНаКарте;

		Наименование = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатПунктыНазначения", НовыйАдрес);
		
		НовыйАдрес.Наименование        = Наименование;
		НовыйАдрес.Адрес               = АдресПредставление;
		НовыйАдрес.АдресДляПоиска      = АдресДляПоиска;
		НовыйАдрес.ЗначениеАдреса      = ЗначениеАдреса;
		НовыйАдрес.ТипПункта           = Справочники.уатТипыПунктов.Адрес;
		НовыйАдрес.СтоянкаПР           = НовыйАдрес.ТипПункта.СтоянкаПР;
		НовыйАдрес.СтоянкаДоп          = НовыйАдрес.ТипПункта.СтоянкаДоп;

		НовыйАдрес.Страна              = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
		НовыйАдрес.УстановитьСлучайныйЦветПункта();
		НовыйАдрес.Записать();
		
		Результат = НовыйАдрес.Ссылка;
		ТекстНСтр = НСтр("ru = 'Новый пункт создан успешно.'");
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьСоседниеПункты()
	
	СоседниеПункты.Очистить();
	
	МетровВГрадусеШироты  = 111226.255;
	МетровВГрадусеДолготы = 10;
	КолвоМетров          = Окр(РадиусПоиска / МетровВГрадусеШироты, 3, РежимОкругления.Окр15как20);
	Если КолвоМетров = 0 Тогда
		КолвоМетров  = 0.001;
	КонецЕсли;
	МаксШирота  = Лат + КолвоМетров;
	МинШирота   = Лат - КолвоМетров;
	
	КолвоМетров          = Окр(РадиусПоиска / МетровВГрадусеДолготы, 3, РежимОкругления.Окр15как20);
	Если КолвоМетров = 0 Тогда
		КолвоМетров  = 0.001;
	КонецЕсли;
	МаксДолгота = Лон + КолвоМетров;
	МинДолгота  = Лон - КолвоМетров;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МаксШирота", МаксШирота);
	Запрос.УстановитьПараметр("МинШирота", МинШирота);
	Запрос.УстановитьПараметр("МаксДолгота", МаксДолгота);
	Запрос.УстановитьПараметр("МинДолгота", МинДолгота);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатПунктыНазначения.Ссылка КАК Ссылка,
	               |	уатПунктыНазначения.Лат КАК Лат,
	               |	уатПунктыНазначения.Лон КАК Лон,
	               |	уатПунктыНазначения.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	               |ГДЕ
	               |	уатПунктыНазначения.Лат <= &МаксШирота
	               |	И уатПунктыНазначения.Лат >= &МинШирота
	               |	И уатПунктыНазначения.Лон <= &МаксДолгота
	               |	И уатПунктыНазначения.Лон >= &МинДолгота";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РасстояниеМеждуТочками = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(Лат, Лон, Выборка.Лат, Выборка.Лон);
		Если РасстояниеМеждуТочками > РадиусПоиска Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СоседниеПункты.Добавить();
		НоваяСтрока.Пункт   = Выборка.Ссылка;
		НоваяСтрока.Широта  = Выборка.Лат;
		НоваяСтрока.Долгота = Выборка.Лон;
		НоваяСтрока.РасстояниеМеждуПунктами = РасстояниеМеждуТочками;
		
	КонецЦикла;
	СоседниеПункты.Сортировать("РасстояниеМеждуПунктами");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьJSONНаСервере(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураСхемы = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураСхемы;
КонецФункции

&НаКлиенте
Процедура СоздатьАдресВводКИЗавершение(РезультатЗакрытия, ДопПараметры)
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	Если ПустаяСтрока(ТекстПредставления) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеАдреса = РезультатЗакрытия.Значение;
	Если ДопПараметры.Свойство("СтруктураДанныеАдреса")
		И ДопПараметры.СтруктураДанныеАдреса.Свойство("Широта")
		И ДопПараметры.СтруктураДанныеАдреса.Свойство("Долгота") Тогда
		КоординатыАдреса = Новый Структура("Широта, Долгота", ДопПараметры.СтруктураДанныеАдреса.Широта, ДопПараметры.СтруктураДанныеАдреса.Долгота);
	Иначе
		КоординатыАдреса = ПолучитьКоординатыАдреса(ТекстПредставления, ЗначениеАдреса);
	КонецЕсли;
	
	АдресДляПоиска   = ?(ДопПараметры.СтруктураДанныеАдреса.Свойство("АдресДляПоиска"),
		ДопПараметры.СтруктураДанныеАдреса.АдресДляПоиска, НаименованиеПункта);
	НовыйАдресСсылка = СоздатьАдресСервер(ТекстПредставления, КоординатыАдреса, ЗначениеАдреса, АдресДляПоиска);
	Если ЗначениеЗаполнено(НовыйАдресСсылка) Тогда
		Закрыть(Новый Структура("НовыйАдресСсылка, ТипОтрезкаПути", НовыйАдресСсылка, ТипОтрезкаПути));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоординатыАдреса(АдресПредставление, ЗначениеАдресаJSON)
	СтруктураФорма  = Новый Структура;
	СтруктураОбъект = Новый Структура("Лат, Лон, Ссылка", 0, 0, ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка"));
	СтруктураОбъект.Вставить("ЗначениеАдреса", ЗначениеАдресаJSON);
	СтруктураФорма.Вставить("Объект", СтруктураОбъект);
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML.
	СтруктураФорма.Вставить("ЗначениеПолей", "");
	// {/Совместимость}
	СтруктураФорма.Вставить("Модифицированность", Ложь);
	
	уатЭлектронныеКартыКлиент.ГеокодироватьКоординатыВПунктеНазначения(СтруктураФорма, Ложь);
	
	Рез = Новый Структура("Широта, Долгота", СтруктураФорма.Объект.Лат, СтруктураФорма.Объект.Лон);
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекФормы = Новый Структура();
	СтруктураНастроекФормы.Вставить("ТипОтрезкаПути", ТипОтрезкаПути);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатЭлектронныеКарты.Форма.ФормаПодбораПункта", РежимОткрытия, СтруктураНастроекФормы);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатЭлектронныеКарты.Форма.ФормаПодбораПункта", РежимОткрытия);
	Иначе 
		СтруктураНастроекФормы = Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(СтруктураНастроекФормы) = Тип("Структура") Тогда 
		СтруктураНастроекФормы = Новый Структура();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекФормы);

КонецФункции

&НаСервере
Процедура СформироватьТипыОтрезковПути(Лат, Лон)
	
	Элементы.ТипОтрезкаПути.СписокВыбора.Очистить();
	
	МассивПунктов       = Новый Массив();
	МассивПунктовСсылок = Новый Массив();
	СоответвиеПунктов   = Новый Соответствие();
	
	Для Каждого ТекСтрока Из ПунктыМаршрута Цикл
		МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
		ТекСтрока.Пункт, ТекСтрока.Расстояние, ТекСтрока.Индекс));
		МассивПунктовСсылок.Добавить(ТекСтрока.Пункт);
		СоответвиеПунктов.Вставить(ТекСтрока.Индекс, ТекСтрока.Пункт);
	КонецЦикла;
		
	Если МассивПунктов.Количество() > 1 Тогда
		КоординатыНовойТочки = Новый Структура("Лат, Лон", Лат, Лон);
		ИндексНовогоПункта   = уатЭлектронныеКартыСервер.ПодборПунктаВМаршрут(КоординатыНовойТочки, МассивПунктов, МассивПунктовСсылок);
		
		ПунктСсылка = СоответвиеПунктов.Получить(ИндексНовогоПункта);
		Если ПунктСсылка <> Неопределено Тогда
			ПунктСсылкаПред = СоответвиеПунктов.Получить(ИндексНовогоПункта - 1);
			Если ПунктСсылкаПред = Неопределено Тогда
				НаименованиеПоследнегоПункта = ПунктСсылка.Наименование;
				НаименованиеПоследнегоПункта = Нстр("ru = 'После'") + " " + НаименованиеПоследнегоПункта;
			Иначе
				НаименованиеПоследнегоПункта = """" + ПунктСсылкаПред.Наименование + """"
					+ Символы.ПС + "и """ + ПунктСсылка.Наименование + """";
				НаименованиеПоследнегоПункта = Нстр("ru = 'Между'") + " " + НаименованиеПоследнегоПункта;
			КонецЕсли;
		
			Элементы.ТипОтрезкаПути.СписокВыбора.Добавить(НаименованиеПоследнегоПункта);
		КонецЕсли;
		
		Элементы.ГруппаРазмещениеВМаршруте.Видимость = Истина;
	Иначе
		Элементы.ГруппаРазмещениеВМаршруте.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТипОтрезкаПути.СписокВыбора.Добавить(Нстр("ru = 'В конец маршрута'"));

	Если ТипОтрезкаПути = 0 Тогда
		ТипОтрезкаПутиСтрока = Элементы.ТипОтрезкаПути.СписокВыбора[0];
	Иначе
		Если Элементы.ТипОтрезкаПути.СписокВыбора.Количество() = 1 Тогда
			ТипОтрезкаПутиСтрока = Элементы.ТипОтрезкаПути.СписокВыбора[0];
		Иначе
			ТипОтрезкаПутиСтрока = Элементы.ТипОтрезкаПути.СписокВыбора[1];
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

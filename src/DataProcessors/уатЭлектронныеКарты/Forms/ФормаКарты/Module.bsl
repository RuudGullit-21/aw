
#Область Переменные_формы  

&НаКлиенте
Перем HTMLobj Экспорт; // Объект HTML для картографии
&НаКлиенте
Перем ScriptVersion;
&НаКлиенте
Перем СчетчикДокументСформирован;
&НаКлиенте
Перем АвтоМасштабироватьПриОткрытии; // Автоматическое определение маштаба при открытии.
&НаКлиенте
Перем ФормаАРМ;
&НаКлиенте
Перем ЗакрытьФорму;
&НаКлиенте
Перем СтрокаИнициализации;
&НаКлиенте
Перем СоответсвиеКомандКарты; // Используется для поиска выведенный комманд
&НаКлиенте
Перем СоответсвиеКомандКарты_Отборы;
&НаКлиенте
Перем кэшОбъектыКарты; 
&НаКлиенте
Перем мсвОбъектыКарты;
&НаКлиенте
Перем кэшОбъектыКарты_Отборы;
&НаКлиенте
Перем мсвОтмеченныеКонтрагенты;
&НаКлиенте
Перем мсвОтмеченныеПункты;
&НаКлиенте
Перем мсвОтмеченныеМаршруты;
&НаКлиенте
Перем мсвОтмеченныеТС;
&НаКлиенте
Перем мсвОтмеченныеКонтрагенты_Отборы;
&НаКлиенте
Перем мсвОтмеченныеПункты_Отборы;
&НаКлиенте
Перем мсвОтмеченныеМаршруты_Отборы;
&НаКлиенте
Перем мсвОтмеченныеТС_Отборы;
&НаКлиенте
Перем мсвОтмеченныеГеозоны_Отборы;
&НаКлиенте
Перем СоответсвиеКартинок; 
&НаКлиенте
Перем СоответсвиеКартинокТиповПунктов;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперации;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизатор;
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;
&НаКлиенте
Перем СообщениеШтрафаВыведено;
&НаКлиенте
Перем ПроверятьОткрытиеФормы;
&НаКлиенте
Перем ИдентификаторМаршрутизацииПоАдресам;
&НаКлиенте
Перем СоответсвиеИдентификаторовМаршрута;
&НаКлиенте
Перем СоответсвиеИдентификаторовФактМаршрута;
&НаКлиенте
Перем КомандаДляВыполнения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПроверкаОткрытия") Тогда
		Возврат;
	Конецесли;
	Если НЕ Константы.уатИспользоватьЭлектронныеКарты.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПервоначальныеЗначенияПеременныхСервер(Параметры);
	УстановитьОграниченияИспользованияВОтбореСписок();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ТипЭлектронныхКарт) Тогда
		ТекстОшибки = Нстр("ru = 'Для использования электронных карт необходимо включить сервис ""Картография""
		|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
		ПоказатьПредупреждение(, ТекстОшибки);
		ЗакрытьФорму = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если НЕ уатЭлектронныеКартыКлиент.ИнтернетСоедниениеДоступно() Тогда 
		ТекстОшибки = НСтр("en='Internet connectivity is absent. Treatment work is impossible.';ru='Подключение к сети Internet отсутствует. Работа обработки невозможна.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		ЗакрытьФорму = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		Элементы.Поиск_ВставитьКоординатыИзБуфера.Видимость = Ложь;
	КонецЕсли; 
	
	УстановитьПервоначальныеЗначенияПеременныхКлиент();
		
	ВосстановитьНастройки(мсвОтмеченныеПункты_Отборы, мсвОтмеченныеКонтрагенты_Отборы,
		мсвОтмеченныеМаршруты_Отборы, мсвОтмеченныеТС_Отборы, мсвОтмеченныеГеозоны_Отборы);
	
	ПараметрыРаботы = Новый Структура("РежимОткрытия,ОбъектОснование,ПервоеОткрытие,РедактироватьМаршрут",
		РежимОткрытия, ОбъектОснование, Истина, РедактироватьМаршрутМЛ);
	УстановитьРежимРаботы(ПараметрыРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки(мсвОтмеченныеПункты_Отборы, мсвОтмеченныеКонтрагенты_Отборы,
		мсвОтмеченныеМаршруты_Отборы, мсвОтмеченныеТС_Отборы, мсвОтмеченныеГеозоны_Отборы,
		НастройкаКластеризацииДляОтображения);
	КонецЕсли;
	
	Если ЗавершениеРаботы
		ИЛИ НЕ Модифицированность Тогда 
		ЗакрытьФорму = Истина;
		Оповестить("ЭлектронныеКарты_Закрытие", РежимОткрытия, ЭтотОбъект);
		Возврат;
		
	ИначеЕсли ЗакрытьФорму = Неопределено Или ЗакрытьФорму = Ложь Тогда 
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ПередЗакрытиемПослеПодтверждения", ЭтотОбъект);
		ТекстВопроса = НСтр("en='Data processor ""Electronic maps"" will be closed. Working with the map in other forms would be impossible."
"Continue?';ru='Обработка ""Электронные карты"" будет закрыта. Работа с картой в других формах будет невозможна."
"Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПослеПодтверждения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Оповестить("ЭлектронныеКарты_Закрытие", РежимОткрытия, ЭтотОбъект);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник <> ВладелецФормы Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "АРМЛогиста_АктивизацияСтрокиТС" Тогда
		АктивизацияСтрокиТСАРМЛогиста(Параметр);
	ИначеЕсли ИмяСобытия = "ПоказатьОтборыНаКарте" Тогда
		//ПоказатьОтборыНаКарте();
	ИначеЕсли ИмяСобытия = "УстановитьРежимРаботы" Тогда
		УстановитьРежимРаботы(Параметр, Источник);
	ИначеЕсли ИмяСобытия = "АРМЛогиста_ОтобразитьДанныеНаКарте" Тогда
		
		Если Параметр.ОбновлятьЗаказы
			И НЕ Параметр.ОбновлятьМЛ Тогда
			Для Каждого ТекСтрока Из СоответсвиеИдентификаторовМаршрута Цикл
				МассивИдентификаторов = ТекСтрока.Значение;
				Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
					ТекКоманда = кэшОбъектыКарты.Получить(Строка(ТекУникальныйИдентификатор)); 
					Если ТекКоманда <> Неопределено Тогда
						СоответсвиеКомандКарты.Удалить(ТекКоманда.СтрокаКомандыБезИдентификатора);
						кэшОбъектыКарты.Удалить(Строка(ТекУникальныйИдентификатор));
						ТекИдентификатор = мсвОбъектыКарты.Найти(Строка(ТекУникальныйИдентификатор));
						Если ТекИдентификатор <> Неопределено Тогда;
							мсвОбъектыКарты.Удалить(ТекИдентификатор);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СоответсвиеИдентификаторовМаршрута = Новый Соответствие();
		ИначеЕсли Параметр.ОбновлятьМЛ
			И НЕ Параметр.ОбновлятьЗаказы Тогда
			Для Каждого ТекСтрока Из СоответсвиеИдентификаторовФактМаршрута Цикл
				МассивИдентификаторов = ТекСтрока.Значение;
				Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
					ТекКоманда = кэшОбъектыКарты.Получить(Строка(ТекУникальныйИдентификатор)); 
					Если ТекКоманда <> Неопределено Тогда
						СоответсвиеКомандКарты.Удалить(ТекКоманда.СтрокаКомандыБезИдентификатора);
						кэшОбъектыКарты.Удалить(Строка(ТекУникальныйИдентификатор));
						ТекИдентификатор = мсвОбъектыКарты.Найти(Строка(ТекУникальныйИдентификатор));
						Если ТекИдентификатор <> Неопределено Тогда;
							мсвОбъектыКарты.Удалить(ТекИдентификатор);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СоответсвиеИдентификаторовФактМаршрута = Новый Соответствие();
		Иначе 
			Попытка
				кэшОбъектыКарты.Очистить();
				СоответсвиеКомандКарты.Очистить();
				мсвОбъектыКарты.Очистить();
			Исключение
				УстановитьПервоначальныеЗначенияПеременныхКлиент();
			КонецПопытки;
		КонецЕсли;
		СтрокаФокуса = "";
		
		Если НЕ НеТребуетсяОбновлениеОтборов
			И Параметр.ОбновитьТС = Истина Тогда
			
			ЕстьИзмененияВОтборах = Истина;
			
			кэшОбъектыКарты_Отборы.Очистить();
			СоответсвиеКомандКарты_Отборы.Очистить();
			ПоказатьОтборыНаКарте(); 
		КонецЕсли;
		НеТребуетсяОбновлениеОтборов = Ложь;
		
		ПоказатьДанныеАРМНаКарте(Параметр.ТаблицаМаршрутов, Параметр.мсвАдреса, Ложь); 
		ЕстьИзмененияВДанныхКарты = Ложь;
		ВывестиСтекВызововКомандКарты();
		АктивизацияСтрокиТСАРМЛогиста();
	ИначеЕсли ИмяСобытия = "АРМЛогиста_ОтобразитьДанныеНаКарте_Заказ" Тогда  
		ПоказатьДанныеАРМНаКарте(Параметр.ТаблицаМаршрутов, Параметр.мсвАдреса, Истина); 
		АктивизацияСтрокиТСАРМЛогиста();
	ИначеЕсли ИмяСобытия = "Подключаемый_ОтобразитьДанныеНаКарте_Заказ_Удалить" Тогда 
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Для Каждого ТекЗаказ Из Параметр Цикл
				МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(ТекЗаказ);
				Если МассивИдентификаторов <> Неопределено Тогда
					Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
						ПараметрыКоманды = Новый Структура();
						ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
						ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);  
					КонецЦикла;
					МассивИдентификаторов = Новый Массив();
					СоответсвиеИдентификаторовМаршрута.Удалить(ТекЗаказ);
				КонецЕсли;
			КонецЦикла;

		Иначе
			МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(Параметр);
			Если МассивИдентификаторов <> Неопределено Тогда
				Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
					ПараметрыКоманды = Новый Структура();
					ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
					ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);  
				КонецЦикла;
				МассивИдентификаторов = Новый Массив();
				СоответсвиеИдентификаторовМаршрута.Удалить(Параметр);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "АРМЛогиста_ОтобразитьДанныеНаКарте_МЛ" Тогда  
		ПоказатьДанныеАРМНаКарте(Параметр.ТаблицаМаршрутов, Параметр.мсвАдреса, Истина, Истина);  
		АктивизацияСтрокиТСАРМЛогиста();
	ИначеЕсли ИмяСобытия = "АРМЛогиста_ОтобразитьДанныеНаКарте_МЛ_Удалить" Тогда 
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Для Каждого ТекМЛ Из Параметр Цикл
				МассивИдентификаторов = СоответсвиеИдентификаторовФактМаршрута.Получить(ТекМЛ);
				Если МассивИдентификаторов <> Неопределено Тогда
					Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
						ПараметрыКоманды = Новый Структура();
						ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
						ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);  
					КонецЦикла;
					МассивИдентификаторов = Новый Массив();
					СоответсвиеИдентификаторовФактМаршрута.Удалить(ТекМЛ);
				КонецЕсли;
			КонецЦикла;

		Иначе
			МассивИдентификаторов = СоответсвиеИдентификаторовФактМаршрута.Получить(Параметр);
			Если МассивИдентификаторов <> Неопределено Тогда
				Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
					ПараметрыКоманды = Новый Структура();
					ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
					ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);  
				КонецЦикла;
				МассивИдентификаторов = Новый Массив();
				СоответсвиеИдентификаторовФактМаршрута.Удалить(Параметр);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОстановитьПроигрываниеТрека" Тогда
		//ОстановитьПроигрываниеТрека();
	ИначеЕсли ИмяСобытия = "МаршрутныйЛист_ПодборПунктаВМаршрут" Тогда
		ПроверятьОткрытиеФормы    = Истина;
	    ЕстьИзмененияВДанныхКарты = Истина;
		ОбработчикАвтообновленияКарты();
		
		Если Параметр.Свойство("Пункт") Тогда
			Пункт  = Параметр.Пункт;
			КоординатыТекПункта = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Пункт, "Лат, Лон");
			мсвКоординатДляФокусировки = Новый Массив();
			мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", КоординатыТекПункта.Лат, КоординатыТекПункта.Лон));
			ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатДляФокусировки); 
			ВыделитьНаКарте(ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Карта

&НаКлиенте
Процедура mapHTMLДокументСформирован(Элемент)

	HTMLobj        = Элементы.mapHTML.Документ.defaultView;
	Если НЕ КартаЗагружена Тогда
		КартаЗагружена = Истина;
		ОбновитьКарту(Неопределено);
	КонецЕсли;
	
	Попытка
		ScriptVersion = Число(Элементы.mapHTML.Документ.script_version_to_1c.value);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура mapHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Попытка
		Если ДанныеСобытия.Element.id = "messageButton" Тогда
			#Если ВебКлиент Тогда
				OnConsoleMessage(ДанныеСобытия.Element.value);
				ДанныеСобытия.Element.value = "";
			#Иначе
				OnConsoleMessage(ДанныеСобытия.Event.currentTarget.consoleMessage);
				ДанныеСобытия.Event.currentTarget.consoleMessage = "";
			#КонецЕсли
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ПанельРазделов

&НаКлиенте
Процедура ДекорацияПанельРазделовНажатие(Элемент)
	
	Элементы.ПанельРазделовОтображение.Видимость = Ложь;
	Элементы.ПанельРазделовОсновная.Видимость    = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТрекНажатие(Элемент)
	
	Элементы.ПанельТрекаОтображение.Видимость = Ложь;
	Элементы.ПанельТрекаОсновная.Видимость    = Истина;

	Если Элементы.ПанельТрекаОсновная.Видимость Тогда
		РасчитатьФактРасстояние();
		
		Элементы.ГруппаТрек.Видимость = РежимОткрытия = "РежимКарты_МаршрутныйЛист"
			ИЛИ РежимОткрытия = "РежимКарты_ПутевойЛист";
		Элементы.ГруппаПроигрываниеМаршрутаАРМ.Видимость = НЕ Элементы.ГруппаТрек.Видимость;
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодбораНажатие(Элемент)
	
	Элементы.ПанельПодбораОтображение.Видимость    = Ложь;
	Элементы.ПанельПодбораОсновная.Видимость       = Истина;
		
КонецПроцедуры

#КонецОбласти

#Область МаршрутизацияПоКоординатам

&НаКлиенте
Процедура МаршрутизацияПоАдресамПриИзменении(Элемент)
	
	Если МаршрутПоАдресам.Количество() <> 0 Тогда
		ОчиститьМаршрутПоАдресам();
	ИначеЕсли Маршрут.Количество() <> 0 Тогда
		ОчиститьМаршрут();
	КонецЕсли;
	
	Если МаршрутизацияПоАдресамКоординатам = 0 Тогда
		Элементы.СтраницыМаршрутизации.ТекущаяСтраница = Элементы.СтраницаМаршрутизацииПоАдресам;
	Иначе
		Элементы.СтраницыМаршрутизации.ТекущаяСтраница = Элементы.СтраницаМаршрутизацииПоКоординатам;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
		
	мсвКоординатыДляФокусировки = Новый Массив(); 
	
	СчТочек = 1;
	Для Каждого ТекСтрока Из Маршрут Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.УникальныйИдентификатор) Тогда
			ТекСтрока.УникальныйИдентификатор = Новый УникальныйИдентификатор();
		КонецЕсли;

		Если НЕ ТекСтрока.Широта = 0
			И НЕ ТекСтрока.Долгота = 0 Тогда
			ТекстНСТР_1 = НСтр("en='Departure point:';ru='Адрес:'");
			
			АдресНадпись = "<strong>" + ТекстНСТР_1 + "</strong> " + Строка(ТекСтрока.НазваниеТочки);
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекСтрока.Широта, ТекСтрока.Долгота,
			АдресНадпись, КластеризацияМаркеровНаКарте, "8",
			уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, 0, 0, 255));
			ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, Истина);
			
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Широта, ТекСтрока.Долгота));
		КонецЕсли;
		СчТочек = СчТочек + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторМаршрутизацииПоАдресам) Тогда
		НадписьРасстояние        = "0 км";
		НадписьДлительность      = " 0 дн. 00:00";

		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторМаршрутизацииПоАдресам);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Идентификатор", ТекущиеДанные.УникальныйИдентификатор);
	ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутизацияПоАдресам

&НаКлиенте
Процедура ПунктОтправленияПриИзменении(Элемент)
	ЗаполнитьМаршрутПоАдресу(МаршрутПоАдресам[0], 1, Ложь, Истина);
	
	НадписьРасстояние        = "0 км";
	НадписьДлительность      = " 0 дн. 00:00";
	
	Для Счетчик = 1 По СчОтрезковЗаказа Цикл
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + Счетчик);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЦикла;
	СчОтрезковЗаказа = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПрибытияПриИзменении(Элемент)
	ЗаполнитьМаршрутПоАдресу(МаршрутПоАдресам[1], 5, Ложь, Истина);

	НадписьРасстояние        = "0 км";
	НадписьДлительность      = " 0 дн. 00:00";

	Для Счетчик = 1 По СчОтрезковЗаказа Цикл
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + Счетчик);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЦикла;
	СчОтрезковЗаказа = 0;

КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура Отборы_СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	ИзменятьИконки = Ложь;
	Если ИзменятьИконки Тогда
		УстановитьИконкиОтбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отборы_СписокПунктовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Трек

&НаКлиенте
Процедура Трек_СкоростьПроигрыванияПриИзменении(Элемент)
	
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда
		Трек_СкоростьПроигрыванияФактМаршрутаПриИзменении();
	Иначе
		Трек_СкоростьПроигрыванияПланМаршрутаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ОтображатьПоДокументуПриИзменении(Элемент)
	
	ЕстьИзмененияВДанныхКарты  = Истина;
	Трек_ОтображатьПоДокументу = Трек_ОтображатьПоДокументуЗаПериод = "По документу";
	
	Элементы.ГруппаТрек_МаршрутныйДокумент.Видимость   = Трек_ОтображатьПоДокументу;
	Элементы.ГруппаТрек_ТранспортноеСредство.Видимость = Не Трек_ОтображатьПоДокументу;
	Элементы.ГруппаПлановыйМаршрут.Видимость           = Трек_ОтображатьПоДокументу;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_МаршрутныйДокументПриИзменении(Элемент)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	
	ПлановыйМаршрут    = "[]";
	ФактическийМаршрут = "[]";
	НадписьРасстояние        = "0 км";
	НадписьДлительность      = " 0 дн. 00:00";
	ФактическоеРасстояние    = "- км";
	ПлановоеРасстояние       = "- км";
	
	УстановитьНаличиеСпидометра();
	УстановитьДанныеТрека();

	Трек_ЗаполнитьПериодТСПоДокументу();
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_МаршрутныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Трек_ОтображатьПоДокументу = Истина;
	Элементы.ГруппаТрек_МаршрутныйДокумент.Видимость   = Трек_ОтображатьПоДокументу;
	Элементы.ГруппаТрек_ТранспортноеСредство.Видимость = Не Трек_ОтображатьПоДокументу;
	Элементы.ГруппаПлановыйМаршрут.Видимость           = Трек_ОтображатьПоДокументу;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ТранспортноеСредствоПриИзменении(Элемент)

	ЕстьИзмененияВДанныхКарты = Истина;
	
	ПлановыйМаршрут          = "[]";
	ФактическийМаршрут       = "[]";
	НадписьРасстояние        = "0 км";
	НадписьДлительность      = " 0 дн. 00:00";
	ФактическоеРасстояние    = "- км";
	ПлановоеРасстояние       = "- км";
	
	УстановитьНаличиеСпидометра();
	УстановитьДанныеТрека();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ПериодМаршрутаСПриИзменении(Элемент)

	ЕстьИзмененияВДанныхКарты = Истина;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ПериодМаршрутаПоПриИзменении(Элемент)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ОтображатьПлановыйМаршрутПриИзменении(Элемент)

	ЕстьИзмененияВДанныхКарты = Истина;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ОтображатьФактическийМаршрутПриИзменении(Элемент)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Отборы_СписокПунктов

&НаСервереБезКонтекста
Процедура Поиск_СписокПунктовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("мсвОтмеченныеПункты") Тогда
		мсвОтмеченныеПункты = Настройки.ДополнительныеСвойства.мсвОтмеченныеПункты;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мсвОтмеченныеПункты) Тогда
		мсвОтмеченныеПункты = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл
		СтрокаСписка = ТекСтрока.Значение.Данные;
		
		Если мсвОтмеченныеПункты.Найти(СтрокаСписка.Ссылка) <> Неопределено Тогда 
			СтрокаСписка.ФлагВыбора = 1;
		КонецЕсли;
		СтрокаСписка.УникальныйИдентификатор = СтрокаСписка.Ссылка.УникальныйИдентификатор();   
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_СписокПунктовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.Поиск_СписокПунктовФлагВыбора 
		ИЛИ Поле = Элементы.Отборы_СписокПунктовФлагВыбора Тогда
		Если Элемент.ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		РежимАктивацииОтбора = Поле = Элементы.Отборы_СписокПунктовФлагВыбора;
		
		Если Поле = Элементы.Отборы_СписокПунктовФлагВыбора Тогда
			ТекМсвОтмеченныеПункты = мсвОтмеченныеПункты_Отборы;
		Иначе
			ТекМсвОтмеченныеПункты = мсвОтмеченныеПункты;
		КонецЕсли;
		
		Если ТекМсвОтмеченныеПункты.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			ТекМсвОтмеченныеПункты.Добавить(Элемент.ТекущаяСтрока);
		Иначе 
			ТекМсвОтмеченныеПункты.Удалить(ТекМсвОтмеченныеПункты.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", ТекМсвОтмеченныеПункты);
		
		Если РежимАктивацииОтбора Тогда
			Элементы.Отборы_СписокПунктов.Обновить();
		Иначе 
			Элементы.Поиск_СписокПунктов.Обновить();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СписокПунктовПриАктивизацииСтроки", 0.1, Истина);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Поиск_СписокПунктовПриАктивизацииСтроки(Элемент)
	
	Если Элемент = Неопределено
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РежимАктивацииОтбора = Элемент = Элементы.Отборы_СписокПунктов;
	ПодключитьОбработчикОжидания("Подключаемый_СписокПунктовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Отборы_СписокТС

&НаСервереБезКонтекста
Процедура Отборы_СписокТСПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("мсвОтмеченныеТС") Тогда
		мсвОтмеченныеТС = Настройки.ДополнительныеСвойства.мсвОтмеченныеТС;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мсвОтмеченныеТС) Тогда
		мсвОтмеченныеТС = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл
		СтрокаСписка = ТекСтрока.Значение.Данные;
		
		Если мсвОтмеченныеТС.Найти(СтрокаСписка.Ссылка) <> Неопределено 
			И НЕ ТекСтрока.Значение.Данные.ЭтоГруппа Тогда
			СтрокаСписка.ФлагВыбора = 1;
		КонецЕсли;
		СтрокаСписка.УникальныйИдентификатор = СтрокаСписка.Ссылка.УникальныйИдентификатор();   
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отборы_СписокТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.Отборы_СписокТСФлагВыбора Тогда
		Если Элемент.ТекущиеДанные = Неопределено
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		Если мсвОтмеченныеТС_Отборы.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			мсвОтмеченныеТС_Отборы.Добавить(Элемент.ТекущаяСтрока);
		Иначе 
			мсвОтмеченныеТС_Отборы.Удалить(мсвОтмеченныеТС_Отборы.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		ЕстьИзмененияВОтборах = Истина;
		Отборы_СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС_Отборы);
		Элементы.Отборы_СписокТС.Обновить();
		ПодключитьОбработчикОжидания("Подключаемый_СписокТСПриАктивизацииСтроки", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Отборы_СписокТСПриАктивизацииСтроки(Элемент)
	
	Если Элемент = Неопределено
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокТСПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокГеозон

&НаКлиенте
Процедура СписокГеозонВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Обработчик = Новый ОписаниеОповещения("ОбновитьСписокЗонЗавершение", ЭтотОбъект, Новый Структура("Ссылка", ТекущиеДанные.Ссылка));
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Справочник.уатГеозоны_уэ.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,,,,Обработчик);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонПриАктивизацииСтроки(Элемент)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьФокусНаЗонеКарты();

КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонНаименованиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ТекущиеДанные.ПредставлениеНовой = ТекущиеДанные.Наименование + " " + Нстр("en = '(Not recorded)'; ru = '(Не записана)'");
	Иначе
		ТекущиеДанные.ПредставлениеНовой = "";
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонОтобразитьПриИзменении(Элемент)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	МассивСтрок = Новый Массив();
	ТекущиеДанные.Отобразить = ТекущиеДанные.Отобразить % 2;
	СписокГеозонПроставитьПометкиВниз(ТекущиеДанные, МассивСтрок);
	СписокГеозонПроставитьПометкиВверх(ТекущиеДанные);
	ОтобразитьЗоныНаКарте(,Истина,, МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокГеозонКоординаты

&НаКлиенте
Процедура СписокГеозонКоординатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КартыНеДоступны() Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекГруппа = Элементы.СписокГеозон.ТекущиеДанные;
	Если Не ТекГруппа = Неопределено
		И ЗначениеЗаполнено(ТекГруппа.Ссылка)
		И ПолучитьЗначениеРеквизита(ТекГруппа.Ссылка, "ЭтоГруппа") Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонКоординатыПередНачаломИзменения(Элемент, Отказ)
	
	Если КартыНеДоступны() Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекГруппа = Элементы.СписокГеозон.ТекущиеДанные;
	Если НЕ ТекГруппа = Неопределено
		И ЗначениеЗаполнено(ТекГруппа.Ссылка)
		И ПолучитьЗначениеРеквизита(ТекГруппа.Ссылка, "ЭтоГруппа") Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонКоординатыПередУдалением(Элемент, Отказ)
	
	Если КартыНеДоступны() Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекГруппа = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекГруппа.Ссылка)
		И ЗначениеЗаполнено(ТекГруппа.Ссылка)
		И ПолучитьЗначениеРеквизита(ТекГруппа.Ссылка, "ЭтоГруппа") Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонКоординатыПриИзменении(Элемент)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(ТекущиеДанные);
	ОтобразитьЗоныНаКарте(,Истина,,МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Отборы_СписокГеозон

&НаКлиенте
Процедура НастройкаКластеризацииДляОтображенияПриИзменении(Элемент)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКластеризацииДляОтображенияОтборПриИзменении(Элемент)
	
	ЕстьИзмененияВОтборах = Истина;
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Отборы_СписокГеозонПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("мсвОтмеченныеГеозоны") Тогда
		мсвОтмеченныеГеозоны = Настройки.ДополнительныеСвойства.мсвОтмеченныеГеозоны;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мсвОтмеченныеГеозоны) Тогда
		мсвОтмеченныеГеозоны = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл
		СтрокаСписка = ТекСтрока.Значение.Данные;
		
		Если мсвОтмеченныеГеозоны.Найти(СтрокаСписка.Ссылка) <> Неопределено 
			И НЕ ТекСтрока.Значение.Данные.ЭтоГруппа Тогда
			СтрокаСписка.ФлагВыбора = 1;
		КонецЕсли;
		СтрокаСписка.УникальныйИдентификатор = СтрокаСписка.Ссылка.УникальныйИдентификатор();   
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отборы_СписокГеозонВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.Отборы_СписокГеозонФлагВыбора Тогда
		Если Элемент.ТекущиеДанные = Неопределено
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			Возврат;
		КонецЕсли;
			
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		Если мсвОтмеченныеГеозоны_Отборы.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			мсвОтмеченныеГеозоны_Отборы.Добавить(Элемент.ТекущаяСтрока);
		Иначе 
			мсвОтмеченныеГеозоны_Отборы.Удалить(мсвОтмеченныеГеозоны_Отборы.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		ЕстьИзмененияВОтборах = Истина;
		Отборы_СписокГеозон.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеГеозоны", мсвОтмеченныеГеозоны_Отборы);
		Элементы.Отборы_СписокГеозон.Обновить();

		ПодключитьОбработчикОжидания("Подключаемый_СписокГеозонПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Отборы_СписокГеозонПриАктивизацииСтроки(Элемент)
	
	Если Элемент = Неопределено
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокГеозонПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Поиск_СписокПунктов

&НаКлиенте
Процедура Поиск_СписокПунктов_Отбор_БезКоординатПриИзменении(Элемент)
	
	мсвУдаляемыеОтборы = Новый Массив();
	
	Для Каждого ЭлементАктивации Из Поиск_СписокПунктов.Отбор.Элементы Цикл 
		Если ЭлементАктивации.Представление = "Не заполнена широта" Или ЭлементАктивации.Представление = "Не заполнена долгота" Тогда 
			мсвУдаляемыеОтборы.Добавить(ЭлементАктивации);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из мсвУдаляемыеОтборы Цикл 
		Поиск_СписокПунктов.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Если Поиск_СписокПунктов_Отбор_БезКоординат Тогда 
		ЭлементОтбора = Поиск_СписокПунктов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Лат");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = 0;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Представление    = "Не заполнена широта";
		ЭлементОтбора.Использование    = Истина;
		
		ЭлементОтбора = Поиск_СписокПунктов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Лон");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = 0;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Представление    = "Не заполнена долгота";
		ЭлементОтбора.Использование    = Истина;
		
		Элементы.Поиск_СписокПунктов.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.Поиск_СписокПунктов.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли;
	
	Элементы.Поиск_СписокПунктов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ШиротаПриИзменении(Элемент)
	
	ПоказатьПунктыНаКарте();
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ДолготаПриИзменении(Элемент)
	
	ПоказатьПунктыНаКарте();
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Поиск_СтрокаПоиска = Текст;
	ГеокодироватьСтрокуПоиска(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Поиск_НайденныеАдресаПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.Поиск_НайденныеАдреса.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Поиск_Широта  = ТекСтрока.Лат;
	Поиск_Долгота = ТекСтрока.Лон;
	Поиск_ДанныеАдресаDaData = ТекСтрока.ДанныеАдресаDaData;
	Поиск_ПредставлениеАдреса = ТекСтрока.ПредставлениеАдреса;
	
	Если НЕ (Поиск_Широта = 0 И Поиск_Долгота = 0) Тогда 
		
		ПараметрыКоманды = Новый Структура("Широта, Долгота",
		Формат(Поиск_Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(Поиск_Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
		ВыделитьНаКарте(ПараметрыКоманды);  

	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокКонтрагентов

&НаКлиенте
Процедура СписокКонтрагентовПриАктивизацииСтроки(Элемент)

	Если Элемент = Неопределено
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РежимАктивацииОтбора = Элемент = Элементы.Отборы_СписокКонтрагентов;
	ПодключитьОбработчикОжидания("Подключаемый_СписокКонтрагентовПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СписокКонтрагентовФлагВыбора 
		ИЛИ Поле = Элементы.Отборы_СписокКонтрагентовФлагВыбора Тогда
		Если Элемент.ТекущиеДанные = Неопределено
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		РежимАктивацииОтбора = Элемент = Элементы.Отборы_СписокКонтрагентов;
		
		Если РежимАктивацииОтбора Тогда
			ТекМсвОтмеченныеКонтрагенты = мсвОтмеченныеКонтрагенты_Отборы;
		Иначе
			ТекМсвОтмеченныеКонтрагенты = мсвОтмеченныеКонтрагенты;
		КонецЕсли;

		Если ТекМсвОтмеченныеКонтрагенты.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			ТекМсвОтмеченныеКонтрагенты.Добавить(Элемент.ТекущаяСтрока);
		Иначе 
			ТекМсвОтмеченныеКонтрагенты.Удалить(ТекМсвОтмеченныеКонтрагенты.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты", ТекМсвОтмеченныеКонтрагенты);
		Если РежимАктивацииОтбора Тогда
			Элементы.Отборы_СписокКонтрагентов.Обновить();
		Иначе
			Элементы.СписокКонтрагентов.Обновить();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СписокКонтрагентовПриАктивизацииСтроки", 0.1, Истина);
	ИначеЕсли Поле = Элементы.СписокКонтрагентовНаименование 
		ИЛИ Поле = Элементы.Отборы_СписокКонтрагентовНаименование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокКонтрагентовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Если Настройки.ДополнительныеСвойства.Свойство("мсвОтмеченныеКонтрагенты") Тогда
		мсвОтмеченныеКонтрагенты = Настройки.ДополнительныеСвойства.мсвОтмеченныеКонтрагенты;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мсвОтмеченныеКонтрагенты) Тогда
		мсвОтмеченныеКонтрагенты = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл 
		СтрокаСписка = ТекСтрока.Значение.Данные;
		Если мсвОтмеченныеКонтрагенты.Найти(ТекСтрока.Ключ) <> Неопределено 
			И НЕ СтрокаСписка.ЭтоГруппа Тогда 
			СтрокаСписка.ФлагВыбора = 1;
		КонецЕсли; 
		СтрокаСписка.УникальныйИдентификатор = СтрокаСписка.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовПунктыНазначенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.ПунктНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовПунктыНазначенияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	КоординатыФокусировки = ПолучитьКоординатыФокусировкиКонтрагента(ТекущиеДанные.ПунктНазначения);
	Если КоординатыФокусировки.Лат = 0
		И КоординатыФокусировки.Лон = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("Широта, Долгота", Формат(КоординатыФокусировки.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(КоординатыФокусировки.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
	ВыделитьНаКарте(ПараметрыКоманды,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокМаршрутов

&НаКлиенте
Процедура Отборы_СписокМаршрутовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.Отборы_СписокМаршрутовФлагВыбора 
		ИЛИ Поле = Элементы.СписокМаршрутовФлагВыбора Тогда
		Если Элемент.ТекущиеДанные = Неопределено
			ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		РежимАктивацииОтбора = Элемент = Элементы.Отборы_СписокМаршрутов;

		Если РежимАктивацииОтбора Тогда
			ТекМсвОтмеченныеМаршруты = мсвОтмеченныеМаршруты_Отборы;
		Иначе
			ТекМсвОтмеченныеМаршруты = мсвОтмеченныеМаршруты;
		КонецЕсли;
		
		Если ТекМсвОтмеченныеМаршруты.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			ТекМсвОтмеченныеМаршруты.Добавить(Элемент.ТекущаяСтрока);
		Иначе 
			ТекМсвОтмеченныеМаршруты.Удалить(ТекМсвОтмеченныеМаршруты.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		ЕстьИзмененияВОтборах = Истина;
		Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты", ТекМсвОтмеченныеМаршруты);
		Если РежимАктивацииОтбора Тогда
			Элементы.Отборы_СписокМаршрутов.Обновить();
		Иначе
			Элементы.СписокМаршрутов.Обновить()
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СписокМаршрутовПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Отборы_СписокМаршрутовПриАктивизацииСтроки(Элемент)
	
	Если Элемент = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РежимАктивацииОтбора = Элемент = Элементы.Отборы_СписокМаршрутов;
	ПодключитьОбработчикОжидания("Подключаемый_СписокМаршрутовПриАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура Отборы_СписокМаршрутовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Если Настройки.ДополнительныеСвойства.Свойство("мсвОтмеченныеМаршруты") Тогда
		мсвОтмеченныеМаршруты = Настройки.ДополнительныеСвойства.мсвОтмеченныеМаршруты;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мсвОтмеченныеМаршруты) Тогда
		мсвОтмеченныеМаршруты = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Строки Цикл 
		СтрокаСписка = ТекСтрока.Значение.Данные;
		Если мсвОтмеченныеМаршруты.Найти(ТекСтрока.Ключ) <> Неопределено 
			И НЕ СтрокаСписка.ЭтоГруппа Тогда 
			СтрокаСписка.ФлагВыбора = 1;
		КонецЕсли;
		СтрокаСписка.УникальныйИдентификатор = СтрокаСписка.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыКПодборуПриИзменении(Элемент)
	
	мсвМаршруты = ПолучитьДанныеМаршрутов(ОтображаемыйМаршрут);
	Если мсвМаршруты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мсвКоординатыДляФокусировки = Новый Массив();
	Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина,
		мсвМаршруты[0].ЦветНаКарте, мсвМаршруты[0].УникальныйИдентификатор,,,, Истина, Ложь);
	
	ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
	ВыделитьНаКарте(ПараметрыКоманды);

	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыКПодборуПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	МассивПунктов = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(МассивПунктов) = Тип("Массив") 
		И МассивПунктов.Количество() <> 0 
		И ТипЗнч(МассивПунктов[0]) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		
		Если ПунктыКПодбору.Количество() <> 0
			И МассивПунктов[0] = ПунктыКПодбору[ПунктыКПодбору.Количество() - 1].Пункт Тогда
			Возврат;
		КонецЕсли;
		
		НовСтрока			       = ПунктыКПодбору.Добавить();
		НовСтрока.Пункт            = МассивПунктов[0];
		НовСтрока.ТипТочкиМаршрута = ?(ПунктыКПодбору.Количество() = 1,
		ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),
		ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"));
		
		мсвМаршруты = ПолучитьДанныеМаршрутов(ОтображаемыйМаршрут);
		Если мсвМаршруты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		мсвКоординатыДляФокусировки = Новый Массив();
		Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина,
		мсвМаршруты[0].ЦветНаКарте, мсвМаршруты[0].УникальныйИдентификатор,,,, Истина, Ложь);
		
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_МаршрутПоАдресам

&НаКлиенте
Процедура МаршрутПоАдресамПриИзменении(Элемент)
	
	СчТочек  = 1; 
	FTLЗаказ = Истина;
	
	Для Каждого ТекСтрока Из МаршрутПоАдресам Цикл
		ЗаполнитьМаршрутПоАдресу(ТекСтрока, СчТочек, FTLЗаказ, Истина);
		СчТочек = СчТочек + 1;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Транспорт_ЗаказНаТС) Тогда
		Для Счетчик = 1 По СчОтрезковЗаказа Цикл
			ПараметрыКоманды = Новый Структура();
			ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + Счетчик);
			ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
		КонецЦикла;
		СчОтрезковЗаказа = 0;
	КонецЕсли;

	НадписьРасстояние        = "0 км";
	НадписьДлительность      = " 0 дн. 00:00";
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторМаршрутизацииПоАдресам);
	ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПоАдресамПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.МаршрутПоАдресам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Транспорт_ЗаказНаТС) Тогда
		Для Счетчик = 1 По СчОтрезковЗаказа Цикл
			ПараметрыКоманды = Новый Структура();
			ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + Счетчик);
			ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
		КонецЦикла; 
		СчОтрезковЗаказа = 0;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Идентификатор", ТекущиеДанные.УникальныйИдентификатор);
	ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_АРМ_МаршрутыСписокЗаказовДерево

&НаКлиенте
Процедура ТСДляПодбораЗаказовВАРМПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ТСДляПодбораЗаказовВАРМ) Тогда 
		ТСДляПодбораЗаказовВАРМGUID = "";
		АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		ОбновитьНадписьХарактеристикТСДляПодбора();
		ЗаказыКПодборуОбновитьИтоги();
		Возврат;
	КонецЕсли;
	
	ОбновитьНадписьХарактеристикТСДляПодбора();
	ЗаказыКПодборуОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСДляПодбораЗаказовВАРМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = Новый СписокЗначений();
	
	Если ФормаАРМ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Если ФормаАРМ.НастройкаРежимОтображенияМЛ = 0 Тогда
			Для Каждого ТекСтрокаТС Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл
				ПредставлениеТС = ТекСтрокаТС.ТСПредставление;
				Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл
					ПредставлениеМЛ = ПредставлениеТС +
						?(НЕ ЗначениеЗаполнено(ТекСтрокаМЛ.Группировка), " " + НСТР( "ru = '(Новый маршрутный лист)'"),
						" (" + ТекСтрокаМЛ.ПредставлениеМЛ + ")");
						
					ДанныеВыбора.Добавить(Новый Структура("ТС,GUIDТС,GUIDМЛ,ПредставлениеТС",
						ТекСтрокаТС.ТС, ТекСтрокаТС.GUID, ТекСтрокаМЛ.GUID, ПредставлениеМЛ), ПредставлениеМЛ);
				КонецЦикла;
					
				Если ТекСтрокаТС.ПолучитьЭлементы().Количество() = 0 Тогда
					ДанныеВыбора.Добавить(Новый Структура("ТС,GUIDТС,GUIDМЛ,ПредставлениеТС",
						ТекСтрокаТС.ТС, ТекСтрокаТС.GUID, ТекСтрокаТС.GUID, ПредставлениеТС), ПредставлениеТС);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыСписок Цикл 
				ПредставлениеТС = ТекСтрока.ТСПредставление + ?(ТекСтрока.НовыйМЛ
				И НЕ ЗначениеЗаполнено(ТекСтрока.МЛ), " " + НСТР( "ru = '(Новый маршрутный лист)'"),
				?(ЗначениеЗаполнено(ТекСтрока.МЛ), " (" + ТекСтрока.ПредставлениеМЛ + ")", ""));
				
				ДанныеВыбора.Добавить(Новый Структура("ТС,GUIDТС,GUIDМЛ,ПредставлениеТС",
					ТекСтрока.ТС, ТекСтрока.GUID, ТекСтрока.GUID, ПредставлениеТС), ПредставлениеТС);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМДиспетчера" Тогда
		Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыСписок Цикл 
			ДанныеВыбора.Добавить(ТекСтрока.ТС);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСДляПодбораЗаказовВАРМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Если ФормаАРМ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мсвТС = Новый Массив();
	
	Если РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Если ФормаАРМ.НастройкаРежимОтображенияМЛ = 0 Тогда
			Для Каждого ТекСтрокаТС Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл
				ПредставлениеТС = ТекСтрокаТС.ТСПредставление;
				Для Каждого ТекСтрокаМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл
					ПредставлениеМЛ = ПредставлениеТС +
						?(НЕ ЗначениеЗаполнено(ТекСтрокаМЛ.Группировка), " " + НСТР( "ru = '(Новый маршрутный лист)'"),
						" (" + ТекСтрокаМЛ.ПредставлениеМЛ + ")");
						
					ДанныеВыбора.Добавить(Новый Структура("ТС,GUIDТС,GUIDМЛ,ПредставлениеТС",
						ТекСтрокаТС.ТС, ТекСтрокаТС.GUID, ТекСтрокаМЛ.GUID, ПредставлениеМЛ), ПредставлениеМЛ);
				КонецЦикла;
					
				Если ТекСтрокаТС.ПолучитьЭлементы().Количество() = 0 Тогда
					ДанныеВыбора.Добавить(Новый Структура("ТС,GUIDТС,GUIDМЛ,ПредставлениеТС",
						ТекСтрокаТС.ТС, ТекСтрокаТС.GUID, ТекСтрокаТС.GUID, ПредставлениеТС), ПредставлениеТС);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыСписок Цикл 
				ПредставлениеТС = ТекСтрока.ТСПредставление + ?(ТекСтрока.НовыйМЛ, " " + НСТР( "ru = '(Новый маршрутный лист)'"),
				?(ЗначениеЗаполнено(ТекСтрока.МЛ), " (" + ТекСтрока.ПредставлениеМЛ + ")", ""));
				
				ДанныеВыбора.Добавить(Новый Структура("ТС,GUIDТС,GUIDМЛ,ПредставлениеТС",
					ТекСтрока.ТС, ТекСтрока.GUID, ТекСтрока.GUID,ПредставлениеТС), ПредставлениеТС);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМДиспетчера" Тогда
		Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыСписок Цикл 
			ДанныеВыбора.Добавить(ТекСтрока.ТС);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСДляПодбораЗаказовВАРМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ДанныеВыбора = Неопределено Тогда 
		ДанныеВыбора = Новый СписокЗначений();
	КонецЕсли;
	
	Если ФормаАРМ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мсвТС = Новый Массив();
	
	Если РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Попытка
			Если ФормаАРМ.НастройкаРежимОтображенияМЛ = 0 Тогда
				Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл 
					ДанныеВыбора.Добавить(ТекСтрока.ТС);
				КонецЦикла;
			Иначе
				Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыСписок Цикл 
					ДанныеВыбора.Добавить(ТекСтрока.ТС);
				КонецЦикла;
			КонецЕсли;
		Исключение
			Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл 
				ДанныеВыбора.Добавить(ТекСтрока.ТС);
			КонецЦикла;	
		КонецПопытки;
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМДиспетчера" Тогда
		Для Каждого ТекСтрока Из ФормаАРМ.МаршрутыСписок Цикл 
			ДанныеВыбора.Добавить(ТекСтрока.ТС);
		КонецЦикла;
	КонецЕсли;
	УстановитьСписокВыбораТСДляПодбораВАРМ(мсвТС, Текст, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСДляПодбораЗаказовВАРМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатТС") Тогда
		ТСДляПодбораЗаказовВАРМ  = ВыбранноеЗначение;
	Иначе
		ТСДляПодбораЗаказовВАРМ                = ВыбранноеЗначение.ТС;
		ОбновитьНадписьХарактеристикТСДляПодбора();
		
		ТСДляПодбораЗаказовВАРМGUID = ВыбранноеЗначение.GUIDТС;
		Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС", Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
		ВыбранноеЗначение.GUIDТС, ВыбранноеЗначение.GUIDМЛ, Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыСписокЗаказовДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МаршрутыСписокЗаказовДеревоГруппировка Тогда
		
		Если Элемент.ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ЭлементГруппировка = Элемент.ТекущиеДанные.Группировка;
		ЭлементЭтап        = Элемент.ТекущиеДанные.Этап;
		Если Элемент.ТекущиеДанные.УровеньДерева = "Пункт" Тогда
			Если ТипЗнч(ЭлементГруппировка) = Тип("Строка")Тогда
				ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Адрес);
			Иначе
				ПоказатьЗначение(Неопределено, ЭлементГруппировка);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементЭтап) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ПоказатьЗначение(Неопределено, ЭлементЭтап);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.МаршрутыСписокЗаказовДеревоГрузоотправитель Тогда
		Если Элемент.ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Грузоотправитель);
	ИначеЕсли Поле = Элементы.МаршрутыСписокЗаказовДеревоГрузополучатель Тогда
		Если Элемент.ТекущиеДанные = Неопределено 
			ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Грузополучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыСписокЗаказовДеревоПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.АРМ_МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС", Новый Структура("GUIDМЛ,GUIDТС,ПерестроениеМЛ",
	GUIDМЛ, GUIDТС, Истина));
	Оповестить("ЭлектронныеКарты_МаршрутыУдалитьЗаказ",
	Новый Структура("GUIDПункта, GUIDЗаказа",
	GUIDПункта,
	GUIDЗаказа));

КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыСписокЗаказовДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеИсточник = Элементы.АРМ_МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанныеИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	GUIDТС     = ТекущиеДанныеИсточник.GUIDТС;
	GUIDМЛ     = ТекущиеДанныеИсточник.GUIDМЛ;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС",  Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
	GUIDТС, GUIDМЛ, Ложь));
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		ТекущиеДанныеПриемник = АРМ_МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(Строка);
	Иначе
		Возврат;
	КонецЕсли;
	
	GUIDПунктаИсточник = ТекущиеДанныеИсточник.GUIDПункта;
	GUIDЗаказаИсточник = ТекущиеДанныеИсточник.GUIDЗаказа;
	GUIDПунктаПриемник = ТекущиеДанныеПриемник.GUIDПункта;
	GUIDЗаказаПриемник = ТекущиеДанныеПриемник.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_МаршрутыПеретаскивание",
	Новый Структура("GUIDПунктаИсточник,GUIDЗаказаИсточник,GUIDПунктаПриемник,GUIDЗаказаПриемник",
	GUIDПунктаИсточник,
	GUIDЗаказаИсточник,
	GUIDПунктаПриемник,
	GUIDЗаказаПриемник));
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы 

#Область КоманднаяПанель

&НаКлиенте
Процедура ОбновитьКарту(Команда)
	
	ЕстьИзмененияВОтборах     = Истина; 
	ЕстьИзмененияВДанныхКарты = Истина;  
	
	Если Элементы.mapHTML.Доступность = Ложь Тогда
		Элементы.mapHTML.Доступность = Истина; 
	КонецЕсли;

	СоответсвиеКомандКарты_Отборы = Новый Соответствие();
	кэшОбъектыКарты_Отборы        = Новый Соответствие();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ГеокодироватьВсе(Команда)
	
	Состояние(НСтр("en='Performed geocoding of coordinates in points.';ru='Выполняется геокодирование координат в пунктах.'"));
	
	ДанныеГрупповогоГеокодирования = ПолучитьДанныеДляГрупповогоГеокодирования();
	
	Если ДанныеГрупповогоГеокодирования.Ошибка Тогда 
		Возврат;
	КонецЕсли;
	
	ВсегоПунктов = ДанныеГрупповогоГеокодирования.ДанныеПунктов.Количество();
	
	Если ВсегоПунктов = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("en='Geocoding is not performed! Coordinates are filled in all destinations.';ru='Геокодирование не выполнено! Во всех пунктах назначения заполнены координаты.'"));
		Возврат;
	КонецЕсли;
	
	СчГеокодировано = 0;
	Для Каждого ТекПункт Из ДанныеГрупповогоГеокодирования.ДанныеПунктов Цикл 
		ТекстОшибкиOSM = "";
		
		Если ТекПункт.ПредставлениеПолное = "" Тогда 
			ТекстОшибкиOSM = НСтр("en='Point adress is not filled';ru='Адрес пункта не заполнен'");
		Иначе 
			мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(ТекПункт.ПредставлениеПолное,, ТекстОшибкиOSM);
		КонецЕсли;
		
		Если ТекстОшибкиOSM = "" Тогда 
			ТекПункт.Вставить("Лат", мсвКоординат.Лат);
			ТекПункт.Вставить("Лон", мсвКоординат.Лон);
			СчГеокодировано = СчГеокодировано + 1;
			
		Иначе 
			ТекстОшибкиOSM = "";
			
			Если ТекПункт.ПредставлениеСокращенное = "" Тогда 
				ТекстОшибкиOSM = НСтр("en='Point adress is not filled';ru='Адрес пункта не заполнен'");
			Иначе 
				мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(ТекПункт.ПредставлениеСокращенное,, ТекстОшибкиOSM);
			КонецЕсли;
			
			Если ТекстОшибкиOSM = "" Тогда 
				ТекПункт.Вставить("Лат", мсвКоординат.Лат);
				ТекПункт.Вставить("Лон", мсвКоординат.Лон);
				СчГеокодировано = СчГеокодировано + 1;
				
			Иначе 
				ТекстОшибкиOSM = "";
				
				Если ТекПункт.ПредставлениеАдреса = "" Тогда 
					ТекстОшибкиOSM = НСтр("en='Point adress is not filled';ru='Адрес пункта не заполнен'");
				Иначе 
					мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(ТекПункт.ПредставлениеАдреса,, ТекстОшибкиOSM);
				КонецЕсли;
				
				Если ТекстОшибкиOSM = "" Тогда 
					ТекПункт.Вставить("Лат", мсвКоординат.Лат);
					ТекПункт.Вставить("Лон", мсвКоординат.Лон);
					СчГеокодировано = СчГеокодировано + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьКоординатыВПунктах(ДанныеГрупповогоГеокодирования.ДанныеПунктов);
	
	Элементы.Поиск_СписокПунктов.Обновить();
	
	ТекстПредупреждения = НСтр("en='Automatic geocoding completed successfully.';ru='Автоматическое геокодирование успешно выполнено.'");
	ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("en='Geocoded points: %1 of %2';ru='Геокодировано пунктов: %1 из %2'");
	ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("en='Not geocoded points: %3 of %2';ru='Не геокодировано пунктов: %3 из %2'");
	
	ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Строка(СчГеокодировано), Строка(ВсегоПунктов), Строка(ВсегоПунктов-СчГеокодировано));
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКоординатыВПунктах(ДанныеПунктов)
	
	Для Каждого ТекПункт Из ДанныеПунктов Цикл 
		Если ТекПункт.Свойство("Лат") И ТекПункт.Свойство("Лон") Тогда 
			СпрОб = ТекПункт.Ссылка.ПолучитьОбъект();
			СпрОб.Лат = ТекПункт.Лат;
			СпрОб.Лон = ТекПункт.Лон;
			СпрОб.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_Карта(Команда)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;

	ВидПечати = 1;
	Элементы.mapHTML.Доступность = Ложь;
	HTMLobj.makeScreenShot(); 
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_МаршртныйЛист(Команда)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ВидПечати = 2;
	Элементы.mapHTML.Доступность = Ложь;
	HTMLobj.makeScreenShot();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_МаршрутныйЛистСЗаказами(Команда)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ВидПечати = 3;
	Элементы.mapHTML.Доступность = Ложь;
	HTMLobj.makeScreenShot();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПунктыПогрузкиЗаказов(Команда)
	
	Если ФормаАРМ = Неопределено
		ИЛИ НЕ ФормаАРМ.Открыта() Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьПунктыПогрузкиЗаказов.Пометка
		= НЕ Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьПунктыПогрузкиЗаказов.Пометка;
	
	Оповестить("ЭлектронныеКарты_ОбработчикАвтообновления",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПунктыРазгрузкиЗаказов(Команда)
	
	Если ФормаАРМ = Неопределено
		ИЛИ НЕ ФормаАРМ.Открыта() Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьПунктыРазгрузкиЗаказов.Пометка
		= НЕ Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьПунктыРазгрузкиЗаказов.Пометка;
	
	Оповестить("ЭлектронныеКарты_ОбработчикАвтообновления",, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНаправленияЗаказов(Команда)
	Если ФормаАРМ = Неопределено
		ИЛИ НЕ ФормаАРМ.Открыта() Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьНаправленияЗаказов.Пометка
		= НЕ Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьНаправленияЗаказов.Пометка;
	
	Оповестить("ЭлектронныеКарты_ОбработчикАвтообновления",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьМЛ(Команда)
	
	Если ФормаАРМ = Неопределено
		ИЛИ НЕ ФормаАРМ.Открыта() Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьМЛ.Пометка
		= НЕ Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы.ОтображатьМЛ.Пометка;
	
	Оповестить("ЭлектронныеКарты_ОбработчикАвтообновления",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПункты(Команда)

	Если НЕ РежимОткрытия = "РежимКарты_ПунктыНазначения" Тогда
		ЕстьИзмененияВОтборах     = Истина;
	КонецЕсли;
	
	Элементы.ОтображатьПункты.Пометка = НЕ Элементы.ОтображатьПункты.Пометка;
	
	УстановитьВидимостьИДоступностьПанелей();
	ОбработчикАвтообновленияКарты();
	
	Если НЕ Элементы.ОтображатьПункты.Пометка
		И Элементы.ОтображатьПанельПункты.Пометка Тогда
		ПерейтиНаДоступнуюПанель(Элементы.ОтображатьПанельПункты);
	ИначеЕсли Элементы.ОтображатьПункты.Пометка Тогда
		ОтображатьПанельПункты(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКонтрагентов(Команда)
	
	Если НЕ РежимОткрытия = "РежимКарты_Контрагенты" Тогда
		ЕстьИзмененияВОтборах     = Истина; 
	КонецЕсли;
	
	Элементы.ОтображатьКонтрагентов.Пометка = НЕ Элементы.ОтображатьКонтрагентов.Пометка; 
	
	УстановитьВидимостьИДоступностьПанелей();
	ОбработчикАвтообновленияКарты();
	
	Если НЕ Элементы.ОтображатьКонтрагентов.Пометка
		И Элементы.ОтображатьПанельКонтрагентов.Пометка Тогда
		ПерейтиНаДоступнуюПанель(Элементы.ОтображатьПанельКонтрагентов);
	ИначеЕсли Элементы.ОтображатьКонтрагентов.Пометка Тогда
		ОтображатьПанельКонтрагентов(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьМаршруты(Команда)
	
	Если НЕ РежимОткрытия = "РежимКарты_Маршруты" Тогда
		ЕстьИзмененияВОтборах     = Истина; 
	КонецЕсли;
	
	Элементы.ОтображатьМаршруты.Пометка = НЕ Элементы.ОтображатьМаршруты.Пометка; 
	
	УстановитьВидимостьИДоступностьПанелей();
	ОбработчикАвтообновленияКарты();
	
	Если НЕ Элементы.ОтображатьМаршруты.Пометка
		И Элементы.ОтображатьПанельМаршруты.Пометка Тогда
		ПерейтиНаДоступнуюПанель(Элементы.ОтображатьПанельМаршруты);
	ИначеЕсли Элементы.ОтображатьМаршруты.Пометка Тогда
		ОтображатьПанельМаршруты(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗоны(Команда)

	Если НЕ РежимОткрытия = "РежимКарты_Геозоны" Тогда
		ЕстьИзмененияВОтборах     = Истина; 
	КонецЕсли;
	
	Элементы.ОтображатьЗоны.Пометка = НЕ Элементы.ОтображатьЗоны.Пометка;
	
	УстановитьВидимостьИДоступностьПанелей();
	ОбработчикАвтообновленияКарты();
	
	Если НЕ Элементы.ОтображатьКластеры.Пометка
		И НЕ Элементы.ОтображатьЗоны.Пометка
		И Элементы.ОтображатьПанельЗоны.Пометка Тогда
		ПерейтиНаДоступнуюПанель(Элементы.ОтображатьПанельЗоны);
	ИначеЕсли Элементы.ОтображатьЗоны.Пометка Тогда
		ОтображатьПанельЗоны(Неопределено);
	КонецЕсли;

	Если Элементы.СтраницыЗон.ТекущаяСтраница = Элементы.ПанельКластеры
		И РежимОткрытия <> "РежимКарты_Кластеры" Тогда
		Если РежимОткрытия = "РежимКарты_Геозоны" Тогда
			Элементы.СтраницыЗон.ТекущаяСтраница = Элементы.ПанельЗон;	
		Иначе
			Элементы.СтраницыЗон.ТекущаяСтраница = Элементы.ОтборЗоны;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКластеры(Команда)

	Если НЕ РежимОткрытия = "РежимКарты_Кластеры" Тогда
		ЕстьИзмененияВОтборах     = Истина;
	КонецЕсли;
	
	Элементы.ОтображатьКластеры.Пометка = НЕ Элементы.ОтображатьКластеры.Пометка;
	
	УстановитьВидимостьИДоступностьПанелей();
	ОбработчикАвтообновленияКарты();
	
	Если НЕ Элементы.ОтображатьКластеры.Пометка
		И НЕ Элементы.ОтображатьЗоны.Пометка
		И Элементы.ОтображатьПанельЗоны.Пометка Тогда
		ПерейтиНаДоступнуюПанель(Элементы.ОтображатьПанельЗоны);
	ИначеЕсли Элементы.ОтображатьКластеры.Пометка Тогда
		ОтображатьПанельЗоны(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТС(Команда)
	
	ЕстьИзмененияВОтборах = Истина;
	
	Элементы.ОтображатьТС.Пометка = НЕ Элементы.ОтображатьТС.Пометка;
	
	УстановитьВидимостьИДоступностьПанелей();
	ОбработчикАвтообновленияКарты();
	
	Если НЕ Элементы.ОтображатьТС.Пометка
		И Элементы.ОтображатьПанельТС.Пометка Тогда
		ПерейтиНаДоступнуюПанель(Элементы.ОтображатьПанельТС);
	ИначеЕсли Элементы.ОтображатьТС.Пометка
		И РежимОткрытия <> "РежимКарты_АРМЛогиста"
		И РежимОткрытия <> "РежимКарты_АРМДиспетчера" Тогда
		ОтображатьПанельТС(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПериодАвтоматическогоОбновления", ПериодАвтоматическогоОбновления);
	ПараметрыФормы.Вставить("КластеризацияМаркеровНаКарте",    КластеризацияМаркеровНаКарте);
	ПараметрыФормы.Вставить("ПунктФокусировкиПриОткрытии",     ПунктФокусировкиПриОткрытии);
	ПараметрыФормы.Вставить("НачальныйМасштаб",                НачальныйМасштаб);
	ПараметрыФормы.Вставить("ИспользоватьАвтомасштабирование", ИспользоватьАвтомасштабирование);
	ПараметрыФормы.Вставить("МаксимальныйРадиусКластера",      МаксимальныйРадиусКластера);
	ПараметрыФормы.Вставить("КаталогПунктовНаКарте",           КаталогПунктовНаКарте);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаНастроек", ПараметрыФормы,
		ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельРазделов 

&НаКлиенте
Процедура ОтображатьПанельМаршрутизации(Команда)
	
	УстановитьПометкуПанелиРазделов("ОтображатьПанельРасчетМаршрута");
	Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаМаршрутизации;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельПункты(Команда)
	
	УстановитьПометкуПанелиРазделов("ОтображатьПанельПункты");
	Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаПунктовНазначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельКонтрагентов(Команда)
	
	УстановитьПометкуПанелиРазделов("ОтображатьПанельКонтрагентов");
	Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаКонтрагентов;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельМаршруты(Команда)
	
	УстановитьПометкуПанелиРазделов("ОтображатьПанельМаршруты");
	Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаМаршрутов;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельЗоны(Команда)
	
	УстановитьПометкуПанелиРазделов("ОтображатьПанельЗоны");
	Элементы.НастройкаКластеризацииДляОтображенияОтбор.Видимость = Элементы.ОтображатьКластеры.Видимость
		И Элементы.ОтображатьКластеры.Пометка;
	Элементы.ОтборГеозоны.Видимость = Элементы.ОтображатьЗоны.Видимость
		И Элементы.ОтображатьЗоны.Пометка;
		
	Если РежимОткрытия = "РежимКарты_Геозоны" Тогда
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Геозоны'");
	ИначеЕсли РежимОткрытия = "РежимКарты_Кластеры" Тогда
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Кластеры'");
	ИначеЕсли Элементы.НастройкаКластеризацииДляОтображенияОтбор.Видимость
		И НЕ Элементы.ОтборГеозоны.Видимость Тогда
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Кластеры'");
	Иначе
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Геозоны'");
	КонецЕсли;
		
	Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаЗон;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельТС(Команда)
	
	УстановитьПометкуПанелиРазделов("ОтображатьПанельТС");
	Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.ОтборТС;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРазделов(Команда)
	
	Элементы.ПанельРазделовОтображение.Видимость = Истина;
	Элементы.ПанельРазделовОсновная.Видимость    = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельТрека(Команда)
	
	Элементы.ПанельТрекаОтображение.Видимость    = Истина;
	Элементы.ПанельТрекаОсновная.Видимость       = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельПодбора(Команда)
	
	Элементы.ПанельПодбораОтображение.Видимость    = Истина;
	Элементы.ПанельПодбораОсновная.Видимость       = Ложь;

КонецПроцедуры

#КонецОбласти

#Область МаршрутизацияПоАдресам

&НаКлиенте
Процедура МаршрутизацияОчистить(Команда)
	
	УдалитьВсеТочкиМаршрута();
	
	НадписьРасстояние   = "0 км";
	НадписьДлительность = " 0 дн. 00:00";
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияРассчитать(Команда)
	
	ВыполнитьМаршрутизациюПоТаблице(?(Команда=Неопределено, Ложь, Истина), РежимОткрытия = "РежимКарты_ЗаказГрузоотправителя");
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияПрименить(Команда)
	
	// Если форма не создана, то оповещение не будет получено.
	ПараметрыФормы = Новый Структура("Ключ", Транспорт_ЗаказНаТС);
	ФормаЗаказ = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаДокумента", ПараметрыФормы);
	
	ПунктыЗаказа = Новый Массив;
	Для Каждого ТекСтрока Из МаршрутПоАдресам Цикл
		СтруктураПункта = Новый Структура("Пункт, ТипТочкиМаршрута", ТекСтрока.Адрес, ТекСтрока.ТипТочкиМаршрута);
		ПунктыЗаказа.Добавить(СтруктураПункта);
	КонецЦикла;
	Оповестить("ОбновленыПунктыЗаказаНаТС", ПунктыЗаказа);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы_СписокПунктов

&НаКлиенте
Процедура СписокПунктовОтметитьВсе_Отборы(Команда)

	ЕстьИзмененияВОтборах = Истина;
	
	СписокПунктовОтметитьВсеСервер(мсвОтмеченныеПункты_Отборы);
	Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", мсвОтмеченныеПункты_Отборы);
	Элементы.Отборы_СписокПунктов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПунктовСнятьВсеОтметки_Отборы(Команда)
	
	ЕстьИзмененияВОтборах = Истина;
	
	мсвОтмеченныеПункты_Отборы = Новый Массив();
	Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", мсвОтмеченныеПункты_Отборы);
	Элементы.Отборы_СписокПунктов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПунктовОтметитьВсе(Команда)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	
	СписокПунктовОтметитьВсеСервер(мсвОтмеченныеПункты);
	Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", мсвОтмеченныеПункты);
	Элементы.Поиск_СписокПунктов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПунктовСнятьВсеОтметки(Команда)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	
	мсвОтмеченныеПункты = Новый Массив();
	Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", мсвОтмеченныеПункты);
	Элементы.Поиск_СписокПунктов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ГеокодироватьСтрокуПоиска(Команда)
	
	Поиск_НайденныеАдреса.Очистить();
	
	Если Поиск_СтрокаПоиска = "" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиOSM = "";

	мсвРезультат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(Поиск_СтрокаПоиска, Новый Структура("РезультатВМассив", Истина), ТекстОшибкиOSM);
	
	Если Не ТекстОшибкиOSM = "" Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиOSM,, "Поиск_СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мсвРезультат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекАдрес Из мсвРезультат Цикл 
		НовАдрес = Поиск_НайденныеАдреса.Добавить();
		НовАдрес.ПредставлениеАдреса = ?(ТекАдрес.Свойство("display_name"),ТекАдрес.display_name,"");
		НовАдрес.Лат = Число(ТекАдрес.lat);
		НовАдрес.Лон = Число(ТекАдрес.lon);
		ТекАдрес.Свойство("data", НовАдрес.ДанныеАдресаDaData);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_НайтиНаЯндексКартах(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Поиск_СтрокаПоиска, "Яндекс.Карты");
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_НайтиВGoogleMaps(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Поиск_СтрокаПоиска, "GoogleMaps");
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ВставитьКоординатыИзБуфера(Команда)
	
	СтрокаРазбора = "";
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		#Если МобильныйКлиент Тогда
			Возврат;
		#Иначе
			COMОбъект = Новый COMОбъект("htmlfile");
			СтрокаРазбора = COMОбъект.ParentWindow.ClipboardData.GetData("Text");
		#КонецЕсли
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазбора = "" Тогда 
		ТекстОшибки = НСтр("en='Clipboard contains no data.';ru='Буфер обмена не содержит данных.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СтрокаРазбора = СокрЛП(СтрокаРазбора);
	
	// Ожидаемый вид строки с координатами: 32.45684684, 42.46546464, где сначала идет широта, затем долгота, разделенные запятой.
	флОшибка = Ложь;
	
	Если СтрНайти(СтрокаРазбора, ".") <> 0 И СтрНайти(СтрокаРазбора, ",") <> 0 Тогда 
		СтрокиРазбора = СтрЗаменить(СтрокаРазбора, ",", Символы.ПС);
		Если СтрЧислоСтрок(СтрокиРазбора) = 2 Тогда 
			Попытка
				ШиротаБуфер  = Число(СокрЛП(СтрПолучитьСтроку(СтрокиРазбора, 1)));
				ДолготаБуфер = Число(СокрЛП(СтрПолучитьСтроку(СтрокиРазбора, 2)));
				
				Поиск_Широта  = ШиротаБуфер;
				Поиск_Долгота = ДолготаБуфер;
				
				ПоказатьПунктыНаКарте();
				
			Исключение
				флОшибка = Истина;
			КонецПопытки;
			
		Иначе 
			флОшибка = Истина;
		КонецЕсли;
		
	Иначе 
		флОшибка = Истина;
	КонецЕсли;
	
	Если флОшибка Тогда 
		ТекстОшибки = НСтр("en='Clipboard contains incorrect data.';ru='Буфер обмена содержит некорректные данные.'");
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ЗаписатьКоординаты(Команда)
	
	ТекущаяСтрока = Элементы.Поиск_СписокПунктов.ТекущаяСтрока;
	Если ЗаписатьКоординатыПункта(ТекущаяСтрока, Поиск_Широта, Поиск_Долгота, Поиск_ДанныеАдресаDaData, Поиск_ПредставлениеАдреса) Тогда 
		ПоказатьОповещениеПользователя(НСтр("en='Point coordinates set.';ru='Координаты пункта установлены.'"),,, БиблиотекаКартинок.Информация32);
		Оповестить("ЭлектронныеКарты_ЗаписьКоординатПункта", Новый Структура("Лат, Лон", Поиск_Широта, Поиск_Долгота), ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ЗаписатьИВыбрать(Команда)
	
	ТекущаяСтрока = Элементы.Поиск_СписокПунктов.ТекущаяСтрока;
	Если ЗаписатьКоординатыПункта(ТекущаяСтрока, Поиск_Широта, Поиск_Долгота, Поиск_ДанныеАдресаDaData, Поиск_ПредставлениеАдреса) Тогда 
		ПоказатьОповещениеПользователя(НСтр("en='Point coordinates set.';ru='Координаты пункта установлены.'"),,, БиблиотекаКартинок.Информация32);
		Оповестить("ЭлектронныеКарты_СозданиеНовогоПункта", Новый Структура("Пункт, Представление", ТекущаяСтрока, ПунктСтрока), ДокументОснование);
		
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_СоздатьИВыбрать(Команда)
	
	ПредставлениеАдреса = "";
	Если ЗначениеЗаполнено(Поиск_ПредставлениеАдреса) Тогда
		ПредставлениеАдреса = Поиск_ПредставлениеАдреса;
	ИначеЕсли ЗначениеЗаполнено(Поиск_СтрокаПоиска) Тогда
		ПредставлениеАдреса = Поиск_СтрокаПоиска;
	Иначе
		ТекстНСтр = НСтр("ru = 'Ошибка создания пункта. Адрес пункта не заполнен'; en = 'Address is empty. Cannot create point'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	НовыйПункт = СоздатьНовыйПункт(Поиск_Широта, Поиск_Долгота, Поиск_ДанныеАдресаDaData, ПредставлениеАдреса);
	Если ЗначениеЗаполнено(НовыйПункт) Тогда
		ПоказатьОповещениеПользователя(НСтр("en='Point coordinates set.';ru='Пункт создан.'"),,, БиблиотекаКартинок.Информация32);
		Оповестить("ЭлектронныеКарты_СозданиеНовогоПункта", Новый Структура("Пункт, Представление", НовыйПункт, ПунктСтрока), ДокументОснование);
		
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СписокТС

&НаКлиенте
Процедура СписокТСОтметитьВсе(Команда)
	
	ЕстьИзмененияВОтборах     = Истина;
	
	СписокТСОтметитьВсеСервер(мсвОтмеченныеТС_Отборы);
	Отборы_СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС_Отборы);
	Элементы.Отборы_СписокТС.Обновить();
	
	ОбработчикАвтообновленияКарты();

КонецПроцедуры

&НаКлиенте
Процедура СписокТССнятьВсеОтметки(Команда)
	
	ЕстьИзмененияВОтборах     = Истина;
	
	мсвОтмеченныеТС_Отборы = Новый Массив();
	Отборы_СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС_Отборы);
	Элементы.Отборы_СписокТС.Обновить();
	
	ОбработчикАвтообновленияКарты();

КонецПроцедуры


#КонецОбласти

#Область СписокКонтрагентов

&НаКлиенте
Процедура СписокКонтрагентовОтметитьВсе_Отборы(Команда)
	
	ЕстьИзмененияВОтборах     = Истина;
	
	СписокКонтрагентовОтметитьВсеСервер(мсвОтмеченныеКонтрагенты_Отборы);
	СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты",
	мсвОтмеченныеКонтрагенты_Отборы);
	Элементы.Отборы_СписокКонтрагентов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовОтметитьВсе(Команда)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	
	СписокКонтрагентовОтметитьВсеСервер(мсвОтмеченныеКонтрагенты);
	СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты",
	мсвОтмеченныеКонтрагенты);
	Элементы.Отборы_СписокКонтрагентов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовСнятьВсеОтметки_Отборы(Команда)
	
	ЕстьИзмененияВОтборах     = Истина;
	
	мсвОтмеченныеКонтрагенты_Отборы = Новый Массив();
	СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты",
	мсвОтмеченныеКонтрагенты_Отборы);
	Элементы.Отборы_СписокКонтрагентов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовСнятьВсеОтметки(Команда)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	
	мсвОтмеченныеКонтрагенты = Новый Массив();
	СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты",
	мсвОтмеченныеКонтрагенты);
	Элементы.СписокКонтрагентов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

#КонецОбласти

#Область Геозоны

&НаКлиенте
Процедура СписокГеозонОтборыОтметитьВсе(Команда)
	ЕстьИзмененияВОтборах = Истина; 
	
	СписокГеозонОтметитьВсеСервер(мсвОтмеченныеГеозоны_Отборы);
	Отборы_СписокГеозон.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеГеозоны",
		мсвОтмеченныеГеозоны_Отборы);
	Элементы.Отборы_СписокГеозон.Обновить();
	
	ОбработчикАвтообновленияКарты();

КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонОтборыСнятьВсеОтметки(Команда)
	
	ЕстьИзмененияВОтборах = Истина;
	
	мсвОтмеченныеГеозоны_Отборы = Новый Массив();
	Отборы_СписокГеозон.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеГеозоны", мсвОтмеченныеГеозоны_Отборы);
	Элементы.Отборы_СписокГеозон.Обновить();
	
	ОбработчикАвтообновленияКарты();

КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияЗон(Команда)
	
	ЗаписатьДанныеЗон();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗон(Команда)
	
	ОбновитьСписокГеозонСервер();
	ОбновитьКарту(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонОтметитьВсе(Команда)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	СписокГеозонПроставитьПометкиРекурсивно(СписокГеозон.ПолучитьЭлементы(), 1);
	
	ОтобразитьЗоныНаКарте();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонСнятьВсеОтметки(Команда)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	СписокГеозонПроставитьПометкиРекурсивно(СписокГеозон.ПолучитьЭлементы(), 0);

	ОтобразитьЗоныНаКарте();
	
КонецПроцедуры

#КонецОбласти

#Область СписокМаршрутов

&НаКлиенте
Процедура СписокМаршрутовОтборыОтметитьВсе_Отборы(Команда)
	
	ЕстьИзмененияВОтборах = Истина;
	
	СписокМаршрутовОтметитьВсеСервер(мсвОтмеченныеМаршруты_Отборы);
	Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты",
		мсвОтмеченныеМаршруты_Отборы);
	Элементы.Отборы_СписокМаршрутов.Обновить();
	
	ОбработчикАвтообновленияКарты();

КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутовОтборыОтметитьВсе(Команда) 

	ЕстьИзмененияВДанныхКарты = Истина;
	
	СписокМаршрутовОтметитьВсеСервер(мсвОтмеченныеМаршруты);
	Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты",
		мсвОтмеченныеМаршруты);
	Элементы.СписокМаршрутов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутовОтборыСнятьВсеОтметки(Команда)
	
	ЕстьИзмененияВДанныхКарты = Истина;
	
	мсвОтмеченныеМаршруты = Новый Массив();
	Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты", мсвОтмеченныеМаршруты);
	Элементы.СписокМаршрутов.Обновить();
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутовОтборыСнятьВсеОтметки_Отборы(Команда)

	ЕстьИзмененияВОтборах = Истина;
	
	мсвОтмеченныеМаршруты_Отборы = Новый Массив();
	Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты", мсвОтмеченныеМаршруты_Отборы);
	Элементы.Отборы_СписокМаршрутов.Обновить();
	
	ОбработчикАвтообновленияКарты();

КонецПроцедуры

&НаКлиенте
Процедура ПодборПунктовВМаршрутЗаписать(Команда)
	
	Если ПунктыКПодбору.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ни один из пунктов'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийМаршрут) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите маршрут'"));
		Возврат;
	КонецЕсли;
	
	Если ПолучитьКоличествоЭтаповМаршрута(ТекущийМаршрут) > 0 Тогда 
		ТекстВопроса = НСтр("ru='Добавленные ранее данные по маршруту будут перезаписаны. Продолжить?'");
		Оповещение   = Новый ОписаниеОповещения("ПодборПунктовВМаршрутЗаписатьПодтверждение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		мсвПунктов = Новый Массив();
		Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
			ДанныеПункта = Новый Структура("ПунктОтправления, ТипТочиМаршрута",
			ТекСтрока.Пункт, ТекСтрока.ТипТочкиМаршрута);
			мсвПунктов.Добавить(ДанныеПункта);
		КонецЦикла;
		ПодборПунктовВМаршрутЗаписатьСервер(ТекущийМаршрут, мсвПунктов);
		ОповеститьОбИзменении(ТекущийМаршрут);
		
		Оповестить("ЭлектронныеКарты_ЗаписьМаршрута",,ТекущийМаршрут);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьМаршрут(Команда)
	мсвКоординатДляФокусировки = Новый Массив();

	Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
		Если ТипЗнч(ТекСтрока.Пункт) <> Тип("СправочникСсылка.уатПунктыНазначения") 
			ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураРеквизиотов = ПолучитьЗначениеРеквизитов(ТекСтрока.Пункт, "Лат, Лон");
		мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", СтруктураРеквизиотов.Лат, СтруктураРеквизиотов.Лон));
	КонецЦикла;
	ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатДляФокусировки); 
	ВыделитьНаКарте(ПараметрыКоманды,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПунктМаршрута(Команда)
	ТекущиеДанные = Элементы.ПунктыКПодбору.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Пункт) <> Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Возврат;
	КонецЕсли;
	СтруктураРеквизиотов = ПолучитьЗначениеРеквизитов(ТекущиеДанные.Пункт, "Лат, Лон");
	
	мсвКоординатДляФокусировки = Новый Массив();
	мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", СтруктураРеквизиотов.Лат, СтруктураРеквизиотов.Лон));
	ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатДляФокусировки); 
	ВыделитьНаКарте(ПараметрыКоманды,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеМаршрута(Команда)
	
	// Проверка корректности маршрута. Первая точка должна быть погрузкой, остальные - разгрузкой.
	ТекстОшибки = "";
	Если ПунктыКПодбору.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Для оптимального перестроения требуется заполнить маршрут'");
	ИначеЕсли ПунктыКПодбору[0].ТипТочкиМаршрута <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
		ТекстОшибки = НСтр("ru = 'Для оптимального перестроения первая точка маршрута должна быть точкой погрузки'");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		Для Сч = 1 По ПунктыКПодбору.Количество() - 1 Цикл
			Если ПунктыКПодбору[Сч].ТипТочкиМаршрута <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
				ТекстОшибки = НСтр(
					"ru = 'Для оптимального перестроения все точки маршрута после первой должны быть точками разгрузки'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкиМаршрутизации = уатОбщегоНазначения_уэ.ПолучитьНастройкиМаршрутизацииДляОптимизацииМаршрута();
	флRarusVRP = НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP";
	Если НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "Яндекс"
		Или НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP" Тогда
		// Яндекс
		IDЗадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(НастройкиМаршрутизации, ТекстОшибки);
		Если Не ЗначениеЗаполнено(IDЗадачиВнешнийМаршрутизатор) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
		Если ЗаданиеВыполнено Тогда
			Если ТекстОшибки = "" Тогда 
				ОптимальноеПерестроениеМаршрутаПослеМаршрутизации(Неопределено, Неопределено);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизатор = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеМаршрутаПослеМаршрутизации", ЭтотОбъект);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал,
		|МаксимальныйИнтервал,
		|ТекущийИнтервал,
		|КоэффициентУвеличенияИнтервала", 
		1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму(
		"ОбщаяФорма.уатДлительнаяОперация",
		,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект)
		);
	Иначе
		// Алгоритм очередей
		АдресаПунктов = Новый Массив;
		Для Каждого ТекСтрока Из ПунктыКПодбору Цикл     
			АдресаПунктов.Добавить(ТекСтрока.Пункт);
		КонецЦикла;
		ДополнительныеПараметры = Новый Структура("НастройкиМаршрутизации, АдресаПунктов", НастройкиМаршрутизации, АдресаПунктов);
		Если НЕ уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(АдресаПунктов) Тогда
			
			ТекстВопроса = Новый ФорматированнаяСтрока(
				НСтр("en='To continue routing it is necessary to update the distances between the points.';ru='Для продолжения маршрутизации необходимо выполнить обновление расстояний между пунктами.'") + Символы.ПС
				+ НСтр("en='For update it is necessary to have access to the server';ru='Для обновления необходимо наличие доступа к серверу'") + " "
				+ НСтр("en='via the Internet. Operation can take a long time.';ru='через интернет. Операция может занять длительное время.'") + Символы.ПС
				+ НСтр("en='Duration depends on the number of destinations in route.';ru='Продолжительность зависит от количества пунктов назначения в маршруте.'") + Символы.ПС
				+ НСтр("en='Maximum number of requests to online service is limited.';ru='Максимальное количество запросов к онлайн сервису ограничено.'")
			);
			
			Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеМаршрутаОбновитьПункты", ЭтотОбъект, ДополнительныеПараметры);
			СписокОтветов = Новый СписокЗначений();
			СписокОтветов.Добавить("ОбновитьПункты",          НСтр("en='Update distances';ru='Обновить расстояния'"));
			СписокОтветов.Добавить("ПродолжитьБезОбновления", НСтр("en='Continue without updating';ru='Продолжить без обновления'"));
			СписокОтветов.Добавить("Отменить",                НСтр("en='Cancel routing';ru='Отменить маршрутизацию'"));
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокОтветов);
		Иначе 
			ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АРМ

&НаКлиенте
Процедура АРМ_МаршрутыЗаписать(Команда)
	Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	ТекущиеДанные = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];

	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС",  Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
		GUIDТС, GUIDМЛ, Ложь));
	Оповестить("ЭлектронныеКарты_ЗаписатьМаршруты");
		
КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыДобавитьПункт(Команда)
	
	Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	ТекущиеДанные = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора",,ЭтотОбъект,,,,
	Новый ОписаниеОповещения("АРМ_МаршрутыДобавитьПунктЗавершениеСписок", ЭтотОбъект, ТекущиеДанные), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыДобавитьГараж(Команда)
	
	Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;

	ТекущиеДанные = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];

	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Гараж", Истина));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("АРМ_ПослеЗакрытияФормыВыбораГаражаСписок", ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АРМ_ОптимальноеПерестроениеЗаказов(Команда)
	
	Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	ТекущиеДанные = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];
	
	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС",  Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
	GUIDТС, GUIDМЛ, Ложь));
	Оповестить("ЭлектронныеКарты_ОптимальноеПерестроениеЗаказов",
	Новый Структура("GUIDПункта, GUIDЗаказа",
	GUIDПункта,
	GUIDЗаказа));
	
КонецПроцедуры

&НаКлиенте
Процедура АРМ_РазвернутьВсеМаршруты(Команда)
	Для Каждого ТекСтрока Из АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		Элементы.АРМ_МаршрутыСписокЗаказовДерево.Развернуть(ТекСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АРМ_СвернутьВсеМаршруты(Команда)
	Для Каждого ТекСтрока Из АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		Элементы.АРМ_МаршрутыСписокЗаказовДерево.Свернуть(ТекСтрока.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыПереместитьВверх(Команда)
	ТекущиеДанные = Элементы.АРМ_МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС",  Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
		GUIDТС, GUIDМЛ, Ложь));
	Оповестить("ЭлектронныеКарты_МаршрутыПереместитьВверх",
		Новый Структура("GUIDПункта, GUIDЗаказа",
		GUIDПункта,
		GUIDЗаказа));
		
КонецПроцедуры

&НаКлиенте
Процедура АРМ_ВыделитьМаршрут(Команда)
	Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];
	
	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС",  Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
	GUIDТС, GUIDМЛ, Ложь));
	Оповестить("ЭлектронныеКарты_ВыделитьМаршрут");

КонецПроцедуры

&НаКлиенте
Процедура АРМ_ВыделитьПунктМаршрута(Команда)
	ТекущиеДанные = Элементы.АРМ_МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.УровеньДерева = "Пункт" Тогда
		Если ТипЗнч(ТекущиеДанные.Группировка) = Тип("Строка")Тогда
			ЭлементГруппировка = ТекущиеДанные.Адрес;
		Иначе
			ЭлементГруппировка = ТекущиеДанные.Группировка;
		КонецЕсли;
		
		СтруктураРеквизиотов = ПолучитьЗначениеРеквизитов(ЭлементГруппировка, "Лат, Лон");
		
		мсвКоординатДляФокусировки = Новый Массив();
		мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", СтруктураРеквизиотов.Лат, СтруктураРеквизиотов.Лон)); 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.АРМ_МаршрутыСписокЗаказовДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС",  Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
		GUIDТС, GUIDМЛ, Ложь));
	Оповестить("ЭлектронныеКарты_МаршрутыПереместитьВниз",
		Новый Структура("GUIDПункта, GUIDЗаказа",
		GUIDПункта,
		GUIDЗаказа));

КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовВАРМПодобрать(Команда)
	
	Если НЕ ЗначениеЗаполнено(АРМДиспетчера_ЗаказыКПодбору) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ни один из заказов'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТСДляПодбораЗаказовВАРМ) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите ТС'"));
		Возврат;
	КонецЕсли;
	
	Если ФормаАРМ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПодбора = Новый Структура("Заказы, ТС", Новый Массив(), ТСДляПодбораЗаказовВАРМ);
	ДанныеПодбора.Заказы.Добавить(АРМДиспетчера_ЗаказыКПодбору);

	Оповестить("ЭлектронныеКарты_ПодборЗаказовАРМДиспетчера", ДанныеПодбора, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Трек

&НаКлиенте
Процедура Трек_РедактироватьПериод(Команда)
	
	ДиалогРедактированияСтандартногоПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактированияСтандартногоПериода.Период.ДатаНачала    = Трек_ПериодМаршрутаС;
	ДиалогРедактированияСтандартногоПериода.Период.ДатаОкончания = Трек_ПериодМаршрутаПо;
	
	ДиалогРедактированияСтандартногоПериода.Показать(Новый ОписаниеОповещения("Трек_РедактироватьПериодЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_ПроигратьПлановыйМаршрут(Команда)
	
	Если Не Трек_ОтображатьПлановыйМаршрут Тогда 
		Возврат;
	КонецЕсли;
		
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда 
		Трек_ПроигратьФактическийМаршрутПометка = Ложь;
	КонецЕсли;
	
	Трек_ПроигратьПлановыйМаршрутПометка = Не Трек_ПроигратьПлановыйМаршрутПометка;
	ОбновитьКнопкиПроигрывания();
	
	СкоростьПроигрыванияПланМаршрутаМиллиСек = (60 - Трек_СкоростьПроигрывания) * 1000;
	
	Если ПлановыйМаршрут = "" Тогда
		ПлановыйМаршрут = "[]";
	КонецЕсли;
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	?(Трек_ПроигратьПлановыйМаршрутПометка, "true", "false"),
	Формат(СкоростьПроигрыванияПланМаршрутаМиллиСек, "ЧН=0; ЧГ=0"), "false", ПлановыйМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
	ПараметрыКоманды = Новый Структура("КоординатыСтрока", ПлановыйМаршрут);
	ВыделитьНаКарте(ПараметрыКоманды);

КонецПроцедуры

&НаКлиенте
Процедура Трек_ПроигратьФактическийМаршрут(Команда)
	
	Если НЕ Трек_ОтображатьФактическийМаршрут Тогда 
		Возврат;
	КонецЕсли;
	
	Если Трек_ПроигратьПлановыйМаршрутПометка Тогда 
		Трек_ПроигратьПлановыйМаршрутПометка = Ложь;
	КонецЕсли;
	
	Трек_ПроигратьФактическийМаршрутПометка = Не Трек_ПроигратьФактическийМаршрутПометка;
	ОбновитьКнопкиПроигрывания();
	
	СкоростьПроигрыванияФактМаршрутаМиллиСек = (60 - Трек_СкоростьПроигрывания) * 1000;
	
	Если ФактическийМаршрут = "" Тогда
		ФактическийМаршрут = "[]";
	КонецЕсли;

	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	?(Трек_ПроигратьФактическийМаршрутПометка, "true", "false"),
	Формат(СкоростьПроигрыванияФактМаршрутаМиллиСек, "ЧН=0; ЧГ=0"), "true", ФактическийМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
	ПараметрыКоманды = Новый Структура("КоординатыСтрока", ФактическийМаршрут);
	ВыделитьНаКарте(ПараметрыКоманды);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФактическоеРасстояние(Команда)
	РасчитатьФактРасстояние();
КонецПроцедуры

&НаКлиенте
Процедура МЗ_ПроигратьПлановыйМаршрут(Команда)
	
	Если (НЕ ЕстьМЛ 
		И ((РежимОткрытия = "РежимКарты_АРМЛогиста"
		ИЛИ РежимОткрытия = "РежимКарты_АРМДиспетчера")
		И НЕ ФормаАРМ = Неопределено
		И ФормаАРМ.Открыта())) Тогда
		Возврат;
	КонецЕсли;

	Если Трек_ПроигратьПлановыйМаршрутПометка Тогда 
		Трек_ПроигратьПлановыйМаршрутПометка = Ложь;
	КонецЕсли;
	
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда 
		Трек_ПроигратьФактическийМаршрутПометка = Ложь;
	КонецЕсли;
	
	МЗ_ПроигратьПлановыйМаршрутПометка = Не МЗ_ПроигратьПлановыйМаршрутПометка;
	ОбновитьКнопкиПроигрывания();
		
	СкоростьПроигрыванияПланМаршрутаМиллиСек = (60 - МЗ_СкоростьПроигрыванияПланМаршрута) * 1000;
	
	мсвКоординатыДляФокусировки = Новый Массив();
	Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки,,,,,,,Истина);
	
	Если ПлановыйМаршрут = "" Тогда
		ПлановыйМаршрут = "[]";
	КонецЕсли;
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	?(МЗ_ПроигратьПлановыйМаршрутПометка, "true", "false"),
	Формат(СкоростьПроигрыванияПланМаршрутаМиллиСек, "ЧН=0; ЧГ=0"), "false", ПлановыйМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);	

	ПараметрыКоманды = Новый Структура("КоординатыСтрока", ПлановыйМаршрут);
	ВыделитьНаКарте(ПараметрыКоманды);

КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура УстановитьПервоначальныеЗначенияПеременныхСервер(ПараметрыОткрытия)
	
	ТипЭлектронныхКарт   = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	ТипЭлектронныхКартПостроениеМаршрутов = 
			уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПостроениеМаршрутов");
	ЯндексКарты = ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;

	ЕстьИзмененияВОтборах = Истина;
	
	// Получаем скрипт карты
	СкриптКарты = ПолучитьСкрипт();

	ПараметрыОткрытия.Свойство("РежимОткрытия",        РежимОткрытия);
	ПараметрыОткрытия.Свойство("ОбъектОснование",      ОбъектОснование);
	ПараметрыОткрытия.Свойство("ДокументОснование",    ДокументОснование);
	ПараметрыОткрытия.Свойство("ПунктСтрока",          ПунктСтрока);
	ПараметрыОткрытия.Свойство("РедактироватьМаршрут", РедактироватьМаршрутМЛ);
	
	Если ПараметрыОткрытия.Свойство("ШиротаВъезда") Тогда
		Транспорт_ШиротаВъезда  = ПараметрыОткрытия.ШиротаВъезда;
		Транспорт_ДолготаВъезда = ПараметрыОткрытия.ДолготаВъезда;
		Транспорт_ШиротаСъезда  = ПараметрыОткрытия.ШиротаСъезда;
		Транспорт_ДолготаСъезда = ПараметрыОткрытия.ДолготаСъезда;
	КонецЕсли;
	
	// Тип карт для геокодирования пунктов. Используется сервис подсказок пунктов.
	ТипЭлектронныхКартПодсказокАдресов = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
	Если ТипЭлектронныхКартПодсказокАдресов = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда
		Элементы.Поиск_СтрокаПоиска.ПодсказкаВвода = НСтр("ru = 'Поиск адреса в DaData'");
		КомандаГеокодирования = Команды.Найти("ГеокодироватьСтрокуПоиска");
		Если КомандаГеокодирования <> Неопределено Тогда
			КомандаГеокодирования.Подсказка = НСтр("ru = 'Поиск в сервисе DaData'; en = 'Search the DaData database'");
		КонецЕсли;
	ИначеЕсли ТипЭлектронныхКартПодсказокАдресов = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда
		Элементы.Поиск_СтрокаПоиска.ПодсказкаВвода = НСтр("ru = 'Поиск адреса в Яндекс'");
		КомандаГеокодирования = Команды.Найти("ГеокодироватьСтрокуПоиска");
		Если КомандаГеокодирования <> Неопределено Тогда
			КомандаГеокодирования.Подсказка = НСтр("ru = 'Поиск в базе Яндекса.
				|В случае неуспешного поиска рекомендуется предпринять еще одну попытку поиска, изменив последовательность слов в строке поиска.
				|Например рекомендуется адрес ""8 к2 с4, Ивана Франко Улица, Москва"" изменить на ""8 к2 с4, Улица Ивана Франко, Москва""';
				|en = 'Search the Yandex database.
				|If the needed result is not found, change the word sequence in search field.
				|For example change ""8 к2 с4, Ивана Франко Улица, Москва"" for ""8 к2 с4, Улица Ивана Франко, Москва""'");
		КонецЕсли;
	ИначеЕсли ТипЭлектронныхКартПодсказокАдресов = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда
		Элементы.Поиск_СтрокаПоиска.ПодсказкаВвода = НСтр("ru = 'Поиск адреса в OSM'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПервоначальныеЗначенияПеременныхКлиент()
	
	ПервоначальныеЗначенияПеременныхУстановлено = Истина;
	СчетчикДокументСформирован      = 0;
	
	СоответсвиеКартинок             = Новый Соответствие();
	СоответсвиеКартинокТиповПунктов = Новый Соответствие();
	
	мсвОтмеченныеКонтрагенты = Новый Массив();
	мсвОтмеченныеПункты      = Новый Массив();
	мсвОтмеченныеМаршруты    = Новый Массив();
	мсвОтмеченныеТС          = Новый Массив();
	
	НадписьРасстояние        = "0 км";
	НадписьДлительность      = " 0 дн. 00:00";
	ФактическоеРасстояние    = "- км";
	ПлановоеРасстояние       = "- км";

	СообщениеШтрафаВыведено  = Ложь;
	ПроверятьОткрытиеФормы   = Ложь;
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	СоответсвиеКомандКарты        = Новый Соответствие();
	СоответсвиеКомандКарты_Отборы = Новый Соответствие();
	
	кэшОбъектыКарты			 = Новый Соответствие();
	кэшОбъектыКарты_Отборы	 = Новый Соответствие();
	
	мсвОбъектыКарты          = Новый Массив();
	
	ИдентификаторМаршрутизацииПоАдресам    = Новый УникальныйИдентификатор();
	СоответсвиеИдентификаторовМаршрута     = Новый Соответствие(); 
	СоответсвиеИдентификаторовФактМаршрута = Новый Соответствие();
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки(мсвОтмеченныеПункты, мсвОтмеченныеКонтрагенты, мсвОтмеченныеМаршруты, мсвОтмеченныеТС, мсвОтмеченныеГеозоны)
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатЭлектронныеКарты.Форма.ФормаOSM", "уатЭлектронныеКарты_Настройки");
	Иначе 
		СтруктураНастроекФормы = Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(СтруктураНастроекФормы) = Тип("Структура") Тогда 
		СтруктураНастроекФормы = Новый Структура();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекФормы);
	
	Если Не СтруктураНастроекФормы.Свойство("КластеризацияМаркеровНаКарте") Тогда 
		КластеризацияМаркеровНаКарте = Истина;
	КонецЕсли;
	
	ГруппаКомандОтображения         = Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы;
	ГруппаКомандОтображениеОбъектов = Элементы.ГруппаОтображениеОбъектов.ПодчиненныеЭлементы;
	
	Если СтруктураНастроекФормы.Свойство("МЗ_ОтображатьМаршрут") Тогда 
		ГруппаКомандОтображения.ОтображатьМЛ.Пометка = СтруктураНастроекФормы.МЗ_ОтображатьМаршрут;
	Иначе 
		ГруппаКомандОтображения.ОтображатьМЛ.Пометка = Истина;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("МЗ_ОтображатьПунктыПогрузки") Тогда 
		ГруппаКомандОтображения.ОтображатьПунктыПогрузкиЗаказов.Пометка = СтруктураНастроекФормы.МЗ_ОтображатьПунктыПогрузки;
	Иначе 
		ГруппаКомандОтображения.ОтображатьПунктыПогрузкиЗаказов.Пометка = Истина;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("МЗ_ОтображатьПунктыРазгрузки") Тогда 
		ГруппаКомандОтображения.ОтображатьПунктыРазгрузкиЗаказов.Пометка = СтруктураНастроекФормы.МЗ_ОтображатьПунктыРазгрузки;
	Иначе 
		ГруппаКомандОтображения.ОтображатьПунктыРазгрузкиЗаказов.Пометка = Истина;
	КонецЕсли;

	Если СтруктураНастроекФормы.Свойство("МЗ_ОтображатьНаправления") Тогда 
		ГруппаКомандОтображения.ОтображатьНаправленияЗаказов.Пометка = СтруктураНастроекФормы.МЗ_ОтображатьНаправления;
	Иначе 
		ГруппаКомандОтображения.ОтображатьНаправленияЗаказов.Пометка = Истина;
	КонецЕсли;
	
	
	Если СтруктураНастроекФормы.Свойство("ОтображатьТС") Тогда 
		ГруппаКомандОтображениеОбъектов.ОтображатьТС.Пометка = СтруктураНастроекФормы.ОтображатьТС;
	Иначе 
		ГруппаКомандОтображениеОбъектов.ОтображатьТС.Пометка = Ложь;
	КонецЕсли;

	Если СтруктураНастроекФормы.Свойство("ОтображатьЗоны") Тогда 
		ГруппаКомандОтображениеОбъектов.ОтображатьЗоны.Пометка = СтруктураНастроекФормы.ОтображатьЗоны;
	Иначе 
		ГруппаКомандОтображениеОбъектов.ОтображатьЗоны.Пометка = Ложь;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("ОтображатьКластеры") Тогда 
		ГруппаКомандОтображениеОбъектов.ОтображатьКластеры.Пометка = СтруктураНастроекФормы.ОтображатьКластеры;
	Иначе 
		ГруппаКомандОтображениеОбъектов.ОтображатьКластеры.Пометка = Ложь;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("ОтображатьПункты") Тогда 
		ГруппаКомандОтображениеОбъектов.ОтображатьПункты.Пометка = СтруктураНастроекФормы.ОтображатьПункты;
	Иначе 
		ГруппаКомандОтображениеОбъектов.ОтображатьПункты.Пометка = Ложь;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("ОтображатьКонтрагентов") Тогда 
		ГруппаКомандОтображениеОбъектов.ОтображатьКонтрагентов.Пометка = СтруктураНастроекФормы.ОтображатьКонтрагентов;
	Иначе 
		ГруппаКомандОтображениеОбъектов.ОтображатьКонтрагентов.Пометка = Ложь;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("ОтображатьМаршруты") Тогда 
		ГруппаКомандОтображениеОбъектов.ОтображатьМаршруты.Пометка = СтруктураНастроекФормы.ОтображатьМаршруты;
	Иначе 
		ГруппаКомандОтображениеОбъектов.ОтображатьМаршруты.Пометка = Ложь;
	КонецЕсли;
		
	Если СтруктураНастроекФормы.Свойство("мсвОтмеченныеПункты") Тогда 
		мсвОтмеченныеПункты = СтруктураНастроекФормы.мсвОтмеченныеПункты;
		
		Если НЕ РежимОткрытия = "РежимКарты_ПунктыНазначения" Тогда
			Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", мсвОтмеченныеПункты);
			Элементы.Поиск_СписокПунктов.Обновить();
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(мсвОтмеченныеПункты) <> Тип("Массив") Тогда 
		мсвОтмеченныеПункты = Новый Массив();
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("мсвОтмеченныеКонтрагенты") Тогда 
		мсвОтмеченныеКонтрагенты = СтруктураНастроекФормы.мсвОтмеченныеКонтрагенты;
		
		Если НЕ РежимОткрытия = "РежимКарты_Контрагенты" Тогда
			СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты", мсвОтмеченныеКонтрагенты);
			Элементы.СписокКонтрагентов.Обновить();
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(мсвОтмеченныеКонтрагенты) <> Тип("Массив") Тогда 
		мсвОтмеченныеКонтрагенты = Новый Массив();
	КонецЕсли;

	Если СтруктураНастроекФормы.Свойство("мсвОтмеченныеМаршруты") Тогда 
		мсвОтмеченныеМаршруты = СтруктураНастроекФормы.мсвОтмеченныеМаршруты;
		
		Если НЕ РежимОткрытия = "РежимКарты_Маршруты" Тогда
			Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты", мсвОтмеченныеМаршруты);
			Элементы.Отборы_СписокМаршрутов.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(мсвОтмеченныеМаршруты) <> Тип("Массив") Тогда 
		мсвОтмеченныеМаршруты = Новый Массив();
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("мсвОтмеченныеТС") Тогда 
		мсвОтмеченныеТС = СтруктураНастроекФормы.мсвОтмеченныеТС;
		Отборы_СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС);
		Элементы.Отборы_СписокТС.Обновить();
	КонецЕсли;
	Если ТипЗнч(мсвОтмеченныеТС) <> Тип("Массив") Тогда 
		мсвОтмеченныеТС = Новый Массив();
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("мсвОтмеченныеГеозоны") Тогда 
		мсвОтмеченныеГеозоны = СтруктураНастроекФормы.мсвОтмеченныеГеозоны;
		
		Если НЕ РежимОткрытия = "РежимКарты_Геозоны" Тогда
			Отборы_СписокГеозон.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеГеозоны", мсвОтмеченныеГеозоны);
			Элементы.Отборы_СписокГеозон.Обновить();
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(мсвОтмеченныеГеозоны) <> Тип("Массив") Тогда 
		мсвОтмеченныеГеозоны = Новый Массив();
	КонецЕсли;

	Если СтруктураНастроекФормы.Свойство("ТекНастройкаКластеризацииДляОтображения") Тогда 
		ТекНастройкаКластеризацииДляОтображения = СтруктураНастроекФормы.ТекНастройкаКластеризацииДляОтображения;
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("СкоростьПроигрыванияМаршрута") Тогда 
		Трек_СкоростьПроигрывания = СтруктураНастроекФормы.СкоростьПроигрыванияМаршрута;
	Иначе 
		Трек_СкоростьПроигрывания = 30; // Время проигрывания 5 сек (60-5).
	КонецЕсли;
	
	Если СтруктураНастроекФормы.Свойство("СкоростьПроигрыванияПланМаршрута") Тогда 
		МЗ_СкоростьПроигрыванияПланМаршрута = СтруктураНастроекФормы.СкоростьПроигрыванияПланМаршрута;
	Иначе 
		МЗ_СкоростьПроигрыванияПланМаршрута = 30; // Время проигрывания 5 сек (60-5).
	КонецЕсли;

	Если СтруктураНастроекФормы.Свойство("ГеозоныДляОтображения") Тогда 
		мсвЗоны = СтруктураНастроекФормы.ГеозоныДляОтображения;
		
		Для Каждого ТекЗона Из СписокГеозонДляОтображения.ПолучитьЭлементы() Цикл 
			Если Не мсвЗоны.Найти(ТекЗона.Ссылка) = Неопределено Тогда 
				ТекЗона.Отобразить = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроекКарты = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатЭлектронныеКарты.Форма.ФормаOSM", "уатЭлектронныеКарты_НастройкиКартыOSM");
	Иначе 
		СтруктураНастроекКарты = Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(СтруктураНастроекКарты) = Тип("Структура") Тогда 
		СтруктураНастроекКарты = Новый Структура();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекКарты);
	
	Если НачальныйМасштаб = 0 Тогда 
		НачальныйМасштаб = 10;
	КонецЕсли;
	Если МаксимальныйРадиусКластера = 0 Тогда 
		МаксимальныйРадиусКластера = 30;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура СохранитьНастройки(мсвОтмеченныеПункты, мсвОтмеченныеКонтрагенты, мсвОтмеченныеМаршруты,
	мсвОтмеченныеТС, мсвОтмеченныеГеозоны, НастройкаКластеризацииДляОтображения)
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекФормы = Новый Структура();
	
	СтруктураНастроекФормы.Вставить("ПериодАвтоматическогоОбновления",      ПериодАвтоматическогоОбновления);
	СтруктураНастроекФормы.Вставить("КластеризацияМаркеровНаКарте",         КластеризацияМаркеровНаКарте);
	
	ГруппаКомандОтображения         = Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы;
	ГруппаКомандОтображениеОбъектов = Элементы.ГруппаОтображениеОбъектов.ПодчиненныеЭлементы;
	
	СтруктураНастроекФормы.Вставить("МЗ_ОтображатьМаршрут",			 ГруппаКомандОтображения.ОтображатьМЛ.Пометка);
	СтруктураНастроекФормы.Вставить("МЗ_ОтображатьПунктыПогрузки",	 ГруппаКомандОтображения.ОтображатьПунктыПогрузкиЗаказов.Пометка);
	СтруктураНастроекФормы.Вставить("МЗ_ОтображатьПунктыРазгрузки",	 ГруппаКомандОтображения.ОтображатьПунктыРазгрузкиЗаказов.Пометка);
	СтруктураНастроекФормы.Вставить("МЗ_ОтображатьНаправления",		 ГруппаКомандОтображения.ОтображатьНаправленияЗаказов.Пометка);
	
	СтруктураНастроекФормы.Вставить("ОтображатьТС",                 ГруппаКомандОтображениеОбъектов.ОтображатьТС.Пометка);
	СтруктураНастроекФормы.Вставить("ОтображатьЗоны",               ГруппаКомандОтображениеОбъектов.ОтображатьЗоны.Пометка);
	СтруктураНастроекФормы.Вставить("ОтображатьПункты",             ГруппаКомандОтображениеОбъектов.ОтображатьПункты.Пометка);
	СтруктураНастроекФормы.Вставить("ОтображатьМаршруты",           ГруппаКомандОтображениеОбъектов.ОтображатьМаршруты.Пометка);
	СтруктураНастроекФормы.Вставить("ОтображатьКонтрагентов",       ГруппаКомандОтображениеОбъектов.ОтображатьКонтрагентов.Пометка);
	СтруктураНастроекФормы.Вставить("ОтображатьКластеры",           ГруппаКомандОтображениеОбъектов.ОтображатьКластеры.Пометка);

	
	СтруктураНастроекФормы.Вставить("СкоростьПроигрыванияМаршрута",     Трек_СкоростьПроигрывания);
	СтруктураНастроекФормы.Вставить("СкоростьПроигрыванияПланМаршрута", МЗ_СкоростьПроигрыванияПланМаршрута);
	
	мсвЗоны = Новый Массив();
	Для Каждого ТекЗона Из СписокГеозонДляОтображения.ПолучитьЭлементы() Цикл 
		Если ТекЗона.Отобразить Тогда 
			мсвЗоны.Добавить(ТекЗона.Ссылка);
		КонецЕсли;
	КонецЦикла;
	СтруктураНастроекФормы.Вставить("ГеозоныДляОтображения", мсвЗоны);
	
	СтруктураНастроекФормы.Вставить("мсвОтмеченныеПункты",      мсвОтмеченныеПункты);
	СтруктураНастроекФормы.Вставить("мсвОтмеченныеКонтрагенты", мсвОтмеченныеКонтрагенты);
	СтруктураНастроекФормы.Вставить("мсвОтмеченныеМаршруты",    мсвОтмеченныеМаршруты);
	СтруктураНастроекФормы.Вставить("мсвОтмеченныеТС",          мсвОтмеченныеТС);
	СтруктураНастроекФормы.Вставить("мсвОтмеченныеГеозоны",     мсвОтмеченныеГеозоны);
	
	СтруктураНастроекФормы.Вставить("ТекНастройкаКластеризацииДляОтображения",     ТекНастройкаКластеризацииДляОтображения);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатЭлектронныеКарты.Форма.ФормаOSM", "уатЭлектронныеКарты_Настройки", СтруктураНастроекФормы);
	
	СтруктураНастроекКарты = Новый Структура();
	СтруктураНастроекКарты.Вставить("ПунктФокусировкиПриОткрытии",     ПунктФокусировкиПриОткрытии);
	СтруктураНастроекКарты.Вставить("НачальныйМасштаб",                НачальныйМасштаб);
	СтруктураНастроекКарты.Вставить("ИспользоватьАвтомасштабирование", ИспользоватьАвтомасштабирование);
	СтруктураНастроекКарты.Вставить("МаксимальныйРадиусКластера",      МаксимальныйРадиусКластера);
	СтруктураНастроекКарты.Вставить("КаталогПунктовНаКарте",           КаталогПунктовНаКарте);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатЭлектронныеКарты.Форма.ФормаOSM", "уатЭлектронныеКарты_НастройкиКартыOSM", СтруктураНастроекКарты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Знач Ссылка, Знач ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитов(Объект, ИмяРеквизитов)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект, ИмяРеквизитов);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСкрипт()
	
	mapHTML = уатЭлектронныеКартыПовтИсп.ПолучитьСкрипт();
	
	Возврат mapHTML;
	
КонецФункции

&НаКлиенте
Процедура OnConsoleMessage(Message)
	
	Если уатЭлектронныеКартыКлиент.ЭтоОтветChromium(Message) Тогда 
		флОшибка = Ложь;
		стрОтвет = уатЭлектронныеКартыКлиент.ДесериализоватьОтветChromium(Message, флОшибка);
		Если флОшибка Тогда 
			ТекстОшибки = НСтр("en='Failed to get a response from the map.';ru='Неудалось получить ответ от карты.'") + Символы.ПС +
			НСтр("en='Further work with this map is impossible.';ru='Дальнейшая работа с картой невозможна.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КартаЗагружена = Ложь;
			ЭтотОбъект.ТолькоПросмотр = Истина;
			Возврат;
		КонецЕсли;
		
		OnConsoleMessageОсновнойСкрипт(стрОтвет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура OnConsoleMessageОсновнойСкрипт(стрОтвет)
	
	ТекСтраница = Элементы.СтраницыРазделов.ТекущаяСтраница;
	
	Если НРег(стрОтвет.command) = НРег("makescreenshot") Тогда  
		Элементы.mapHTML.Доступность = Истина;
		ПечатьСкриншота(ВидПечати, СтрЗаменить(стрОтвет.data.screenshot, "data:image/png;base64,", "")); 
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("mapDblClick") Тогда
		
		ОбработатьmapDblClick(стрОтвет); 
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("mapClick") Тогда 
		
		ОбработатьMapClick(стрОтвет, ТекСтраница);
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("href") Тогда
		
		СсылкаНаОбъект = СформироватьСсылкуОбъекта(стрОтвет.data.type, стрОтвет.data.object, стрОтвет.data.guid);
		Если НЕ СсылкаНаОбъект = Неопределено Тогда 
			ПоказатьЗначение(, СсылкаНаОбъект);
		КонецЕсли;
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("playStop") Тогда
		
		ОстановитьЗапуститьТрек(стрОтвет);
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("getTraceWay") Тогда 
		
		Если Строка(стрОтвет.code) = "429" Тогда 
			ТекстНСТР = НСтр("ru='Слишком много запросов за единицу времени. Повторите запрос с небольшой задержкой.'");
			Состояние(ТекстНСТР,,, БиблиотекаКартинок.Ошибка32);
		КонецЕсли;
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("traceRoute") Тогда
		
		ОбработатьTraceRoute(стрОтвет); 
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("drawObjects") Тогда 
		ОбработатьDrawObjects(стрОтвет);
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("geozoneEdit") Тогда
		СписокГеозонОбновитьКоординатыГеозоны(стрОтвет.data, стрОтвет.guid); 
	ИначеЕсли НРег(стрОтвет.command) = НРег("geozoneCreate") И стрОтвет.code = "0" Тогда
		НоваяГеозона = СоздатьНовуюГеозону(стрОтвет.data);
		Если НоваяГеозона <> Неопределено Тогда
			МассивСтрок = Новый Массив();
			МассивСтрок.Добавить(НоваяГеозона);
			ОтобразитьЗоныНаКарте(,Истина,,МассивСтрок);
		КонецЕсли;
	ИначеЕсли НРег(стрОтвет.command) = НРег("geozoneSelection") И стрОтвет.code = "0" Тогда
		Для Каждого ТекСтрока Из СписокГеозон.ПолучитьЭлементы() Цикл
			Если ТекСтрока.GUID = стрОтвет.guid Тогда
				Элементы.СписокГеозон.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ((НРег(стрОтвет.command) = НРег("pointClick")
		И НРег(стрОтвет.description) = НРег("Point click id")) 
		ИЛИ (НРег(стрОтвет.command) = НРег("ManualRouting")
		И Строка(стрОтвет.code) = "0"
		И стрОтвет.data.Свойство("guid"))) Тогда
		
		ОбработатьPointClick(стрОтвет);
		
	ИначеЕсли НРег(стрОтвет.command) = НРег("hreforder") Тогда
		GUIDТС     = стрОтвет.data.guidVehicle;
		GUIDМЛ     = стрОтвет.data.guidRL;
		GUIDПункта = стрОтвет.data.guidPoint;
		GUIDЗаказа = стрОтвет.data.guid;
		
			
		Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС", Новый Структура("GUIDМЛ,GUIDТС,ПерестроениеМЛ",
			GUIDМЛ, GUIDТС, Истина));
		Оповестить("ЭлектронныеКарты_МаршрутыУдалитьЗаказ",
		Новый Структура("GUIDПункта, GUIDЗаказа",
		GUIDПункта,
		GUIDЗаказа));

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КартыНеДоступны()
	
	Если HTMLobj = Неопределено Тогда 
		Попытка
			Элементы.mapHTML.Документ.defaultView.evalJSFunc("");
			HTMLobj = Элементы.mapHTML.Документ.defaultView;
			КартаЗагружена = Истина; 
			Попытка
				ScriptVersion = Число(Элементы.mapHTML.Документ.script_version_to_1c.value);
			Исключение
			КонецПопытки;
		Исключение  
			HTMLobj        = Неопределено;
			КартаЗагружена = Ложь;
			Возврат Истина;
		КонецПопытки; 
	КонецЕсли;
	
	Если НЕ КартаЗагружена Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Элементы.mapHTML.Документ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СчетчикДокументСформирован <> ScriptVersion Тогда
		HTMLobj  = Элементы.mapHTML.Документ.defaultView;
	КонецЕсли; 
	
	Если Элементы.mapHTML.Документ.readyState <> "complete"
		И Элементы.mapHTML.Документ.readyState <> "interactive" Тогда
		Возврат Истина;
	КонецЕсли;
	 
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикАвтообновленияКартыОбработчикОжидания()
	ОбработчикАвтообновленияКарты();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАвтообновленияКарты()
	
	Если НЕ КартаЗагружена Тогда
		ЕстьИзмененияВОтборах     = Ложь; 
		ЕстьИзмененияВДанныхКарты = Ложь; 
	КонецЕсли;
	
	ПоказатьОтборыНаКарте(); 

	Если ЕстьИзмененияВДанныхКарты Тогда
		Если НЕ ПервоначальныеЗначенияПеременныхУстановлено Тогда
			УстановитьПервоначальныеЗначенияПеременныхКлиент();
		КонецЕсли;
		кэшОбъектыКарты.Очистить();
		СоответсвиеКомандКарты.Очистить();
		мсвОбъектыКарты.Очистить();

		СчОтрезковЗаказа = 0;  
		
		СтрокаФокуса = "";
		Если (РежимОткрытия = "РежимКарты_АРМЛогиста"
			ИЛИ РежимОткрытия = "РежимКарты_АРМДиспетчера")
			И НЕ ФормаАРМ = Неопределено
			И ФормаАРМ.Открыта() Тогда 
			// ПоказатьДанныеАРМНаКарте 
			НеТребуетсяОбновлениеОтборов = Истина;
			Оповестить("ЭлектронныеКарты_ОбработчикАвтообновления",, ЭтотОбъект);
		Иначе
			Если РежимОткрытия = "РежимКарты_ПунктыНазначения" Тогда 
				ПоказатьПунктыНаКарте(Ложь, СтрокаФокуса); 
			ИначеЕсли РежимОткрытия = "РежимКарты_Контрагенты" Тогда 
				ПоказатьКонтрагентовНаКарте(Ложь, СтрокаФокуса);
			ИначеЕсли РежимОткрытия = "РежимКарты_Маршруты" Тогда
				ПоказатьМаршрутыНаКарте(Ложь, СтрокаФокуса);
			ИначеЕсли РежимОткрытия = "РежимКарты_МаршрутныйЛист" 
				ИЛИ РежимОткрытия = "РежимКарты_ПутевойЛист" Тогда
				ПоказатьМЛНаКарте(Ложь, СтрокаФокуса);
			ИначеЕсли РежимОткрытия = "РежимКарты_Парковка"
				ИЛИ РежимОткрытия = "РежимКарты_Штраф"
				ИЛИ РежимОткрытия = "РежимКарты_ОтчетПоставщикаПЦ" Тогда
				ОтобразитьПарковкиЗаправки();
			ИначеЕсли РежимОткрытия = "РежимКарты_ОтчетСистемыПлатон" Тогда
				ОтобразитьТрекМаршрутаНаКарте(Транспорт_ШиротаВъезда, Транспорт_ДолготаВъезда, Транспорт_ШиротаСъезда, Транспорт_ДолготаСъезда);
			ИначеЕсли РежимОткрытия = "РежимКарты_ТипыПунктов" Тогда
				ОтобразитьСправочникНаКарте(); 
			ИначеЕсли РежимОткрытия = "РежимКарты_Геозоны" Тогда
				ОтобразитьЗоныНаКарте(Ложь, Ложь, СтрокаФокуса);
			ИначеЕсли РежимОткрытия = "РежимКарты_Кластеры" Тогда 
				ОтобразитьЗоныНаКарте(Истина, Ложь, СтрокаФокуса);
			ИначеЕсли РежимОткрытия = "РежимКарты_ЗаказГрузоотправителя" Тогда
				ВыполнитьМаршрутизациюПоТаблице(Ложь, Истина, Ложь, СтрокаФокуса); 
				
				Элементы.МаршрутПоАдресам.ТолькоПросмотр     = Ложь;
				Элементы.МаршрутПоАдресамПрименить.Видимость = Истина;
				ЗначениеРеквизитов = ПолучитьЗначениеРеквизитов(Транспорт_ЗаказНаТС,"FTL,Мультимодальный,ЭтоЭтап");
				Если ЗначениеЗаполнено(Транспорт_ЗаказНаТС)
					И ЗначениеРеквизитов.Мультимодальный 
					И НЕ ЗначениеРеквизитов.ЭтоЭтап 
					И МаршрутМультимодальногоЗаказа.Количество() <> 0 Тогда
					ТекСтраницаМаршрутизации = Элементы.СтраницаМаршрутизацииПоАдресамМультимодальныйЗаказ;
					ЗаполнитьСтраницаМаршрутизацииПоАдресам();
				ИначеЕсли ЗначениеЗаполнено(Транспорт_ЗаказНаТС)
					И ЗначениеРеквизитов.FTL 
					ИЛИ МаршрутПоАдресам.Количество() < 2 Тогда
					ТекСтраницаМаршрутизации                = Элементы.СтраницаМаршрутизацииПоАдресам;
					Элементы.ГруппаРасчетМаршрута.Видимость = Истина;
					Элементы.МаршрутПоАдресам.ТолькоПросмотр     = Истина;
					Элементы.МаршрутПоАдресамПрименить.Видимость = Ложь;
				Иначе
					ТекСтраницаМаршрутизации = Элементы.СтраницаМаршрутизацииПоАдресамЗаказ;
				КонецЕсли;
				Элементы.СтраницыМаршрутизации.ТекущаяСтраница = ТекСтраницаМаршрутизации;
				
			Иначе
				Если Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаМаршрутизации Тогда
					ВыполнитьМаршрутизациюПоТаблице(Ложь, Ложь, Ложь, СтрокаФокуса);
				КонецЕсли;
			КонецЕсли; 
			
			ЕстьИзмененияВДанныхКарты = Ложь;
			ВывестиСтекВызововКомандКарты();
		КонецЕсли;
	Иначе 
		ВывестиСтекВызововКомандКарты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду()
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.mapHTML.Документ.readyState <> "complete" Тогда 
		ПодключитьОбработчикОжидания("ВыполнитьКоманду", 0.5, Истина);
		Возврат;
	КонецЕсли;
	
	ТекКоманда = кэшОбъектыКарты.Получить(Строка(КомандаДляВыполнения.Идентификатор));
	СтрокаКомандыБезИдентификатора = "";
	СтрокаКомандыКарты             = "";
	Если ТекКоманда <> Неопределено Тогда
		СтрокаКомандыБезИдентификатора = ТекКоманда.СтрокаКомандыБезИдентификатора;
		СтрокаКомандыКарты             = ТекКоманда.КомандаКарты;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Идентификатор", КомандаДляВыполнения.Идентификатор);
	ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	ОбработатьКомандуКарты("traceRoute",   ПараметрыКоманды, Истина,, СтрокаКомандыКарты, СтрокаКомандыБезИдентификатора);

	КомандаДляВыполнения = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуКарты(Знач КомандаКарты, ПараметрыКоманды = Неопределено, Знач ВыводитьНаКарту = Ложь, Отбор = Ложь,
	СтрокаКомандыКарты = "", СтрокаКомандыБезИдентификатора = "", МассивКомманд = Неопределено)
	
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды  = Новый Структура();
	КонецЕсли;  
	
	Если ПараметрыКоманды.Свойство("Идентификатор") Тогда
		Идентификатор = Строка(ПараметрыКоманды.Идентификатор);
	Иначе
		Идентификатор = Строка(Новый УникальныйИдентификатор());
		ПараметрыКоманды.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Если СтрокаКомандыКарты = "" Тогда
		СтрокаКомандыКарты = ПолучитьСтрокуКомандуКарты(КомандаКарты,
		ПараметрыКоманды, ЯндексКарты, СтрокаКомандыБезИдентификатора);
	КонецЕсли;

	Если СтрокаКомандыКарты = "" Тогда
		Возврат;
	КонецЕсли;

	Если КомандаКарты = "deleteObject" Тогда
		
		Если Отбор Тогда    
			ТекКоманда = кэшОбъектыКарты_Отборы.Получить(Идентификатор); 
			Если ТекКоманда <> Неопределено Тогда
				СоответсвиеКомандКарты_Отборы.Удалить(ТекКоманда.СтрокаКомандыБезИдентификатора);
				кэшОбъектыКарты_Отборы.Удалить(Идентификатор);
			КонецЕсли;
		Иначе
			ТекКоманда = кэшОбъектыКарты.Получить(Идентификатор); 
			Если ТекКоманда <> Неопределено Тогда    
				ТекИдентификатор = мсвОбъектыКарты.Найти(Идентификатор);
				Если ТекИдентификатор <> Неопределено Тогда;
					мсвОбъектыКарты.Удалить(ТекИдентификатор);
				КонецЕсли;
				СоответсвиеКомандКарты.Удалить(ТекКоманда.СтрокаКомандыБезИдентификатора);
				кэшОбъектыКарты.Удалить(Идентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивКомманд <> Неопределено Тогда
			МассивКомманд.Добавить(СтрокаКомандыКарты);
		КонецЕсли;
		
		Если ВыводитьНаКарту 
			И НЕ КартыНеДоступны() Тогда      
			Попытка
				HTMLobj.evalJSFunc(СтрокаКомандыКарты);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		
		Если Отбор Тогда
			ТекИдентификатор = СоответсвиеКомандКарты_Отборы.Получить(СтрокаКомандыБезИдентификатора); 
			Если ТекИдентификатор = Неопределено Тогда 
				Если кэшОбъектыКарты_Отборы.Получить(Идентификатор) <> Неопределено Тогда
					ПараметрыКомандыУдаления = Новый Структура();
					ПараметрыКомандыУдаления.Вставить("Идентификатор", Идентификатор);
					ОбработатьКомандуКарты("deleteObject", ПараметрыКомандыУдаления, Истина, Отбор);
				КонецЕсли;
				СоответсвиеКомандКарты_Отборы.Вставить(СтрокаКомандыБезИдентификатора, Идентификатор);
			ИначеЕсли ТекИдентификатор <> Идентификатор Тогда 
				ПараметрыКомандыУдаления = Новый Структура();
				ПараметрыКомандыУдаления.Вставить("Идентификатор", ТекИдентификатор);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКомандыУдаления, Истина, Отбор);
				
				СоответсвиеКомандКарты_Отборы.Вставить(СтрокаКомандыБезИдентификатора, Идентификатор);
			Иначе
				ВыводитьНаКарту = Ложь;
			КонецЕсли;
		Иначе
			ТекИдентификатор = СоответсвиеКомандКарты.Получить(СтрокаКомандыБезИдентификатора); 
			Если ТекИдентификатор = Неопределено Тогда   
				Если кэшОбъектыКарты.Получить(Идентификатор) <> Неопределено Тогда
					ПараметрыКомандыУдаления = Новый Структура();
					ПараметрыКомандыУдаления.Вставить("Идентификатор", Идентификатор);
					ОбработатьКомандуКарты("deleteObject", ПараметрыКомандыУдаления, Истина, Отбор);
				КонецЕсли;
				СоответсвиеКомандКарты.Вставить(СтрокаКомандыБезИдентификатора, Идентификатор);
			ИначеЕсли ТекИдентификатор <> Идентификатор Тогда
				ПараметрыКомандыУдаления = Новый Структура();
				ПараметрыКомандыУдаления.Вставить("Идентификатор", ТекИдентификатор);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКомандыУдаления, Истина, Отбор); 
				
				СоответсвиеКомандКарты.Вставить(СтрокаКомандыБезИдентификатора, Идентификатор);
			Иначе
				ВыводитьНаКарту = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура("ИмяКоманды,КомандаКарты,СтрокаКомандыБезИдентификатора,Ссылка,МЛGUID,ТСGUID,Лат,Лон");
		СтруктураДанных.ИмяКоманды                     = КомандаКарты;
		СтруктураДанных.КомандаКарты                   = СтрокаКомандыКарты; 
		СтруктураДанных.СтрокаКомандыБезИдентификатора = СтрокаКомандыБезИдентификатора;
		
		Если ПараметрыКоманды.Свойство("ПунктСсылка") Тогда
			СтруктураДанных.Ссылка = ПараметрыКоманды.ПунктСсылка;
		КонецЕсли;
		Если ПараметрыКоманды.Свойство("МЛ") Тогда
			СтруктураДанных.МЛGUID         = ПараметрыКоманды.МЛ;
		КонецЕсли;
		Если ПараметрыКоманды.Свойство("ТС") Тогда
			СтруктураДанных.ТСGUID         = ПараметрыКоманды.ТС;
		КонецЕсли;
		Если ПараметрыКоманды.Свойство("ДанныеЗаказа") Тогда
			СтруктураДанных.Ссылка         = ПараметрыКоманды.ДанныеЗаказа.Ссылка;
		КонецЕсли;
		Если ПараметрыКоманды.Свойство("Лат") Тогда
			СтруктураДанных.Лат           = ПараметрыКоманды.Лат;
		КонецЕсли;
		Если ПараметрыКоманды.Свойство("Лон") Тогда
			СтруктураДанных.Лон           = ПараметрыКоманды.Лон;
		КонецЕсли;

		Если Отбор Тогда   
			кэшОбъектыКарты_Отборы.Вставить(Идентификатор, СтруктураДанных);
		Иначе  
			мсвОбъектыКарты.Добавить(Идентификатор);
			кэшОбъектыКарты.Вставить(Идентификатор, СтруктураДанных);
		КонецЕсли;
		
		Если МассивКомманд <> Неопределено Тогда
			МассивКомманд.Добавить(СтрокаКомандыКарты);
		КонецЕсли;
		
		Если ВыводитьНаКарту 
			И НЕ КартыНеДоступны() Тогда 
			Попытка
				HTMLobj.evalJSFunc(СтрокаКомандыКарты);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКартеМассив(МассивКомманд)
	
	Если МассивКомманд = Неопределено 
		ИЛИ МассивКомманд.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		СтрокаРезультат = ОтобразитьДанныеНаКартеМассивСервер(МассивКомманд);
		Если ЗначениеЗаполнено(СтрокаРезультат) Тогда 
			HTMLobj.evalJSFunc(СтрокаРезультат);
		КонецЕсли;

	#Иначе
		
		СтрокаКомандыКарты = "";
		ТекстПостроитель = Новый ЗаписьXML;
		ТекстПостроитель.УстановитьСтроку();
		
		Для Каждого ТекСтрока Из МассивКомманд Цикл
			
			ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
			ТекстПостроитель.ЗаписатьБезОбработки(";" + Символы.ПС);
			
		КонецЦикла;
		СтрокаРезультат = ТекстПостроитель.Закрыть();
		Если ЗначениеЗаполнено(СтрокаРезультат) Тогда 
			HTMLobj.evalJSFunc(СтрокаРезультат);
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтобразитьДанныеНаКартеМассивСервер(МассивКомманд)
	
	
	СтрокаКомандыКарты = "";
	ТекстПостроитель = Новый ЗаписьXML;
	ТекстПостроитель.УстановитьСтроку();
	
	Для Каждого ТекСтрока Из МассивКомманд Цикл
		
		ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
		ТекстПостроитель.ЗаписатьБезОбработки(";" + Символы.ПС);
		
	КонецЦикла;
	СтрокаРезультат = ТекстПостроитель.Закрыть();  
	Возврат СтрокаРезультат;

КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуКомандуКарты(Знач КомандаКарты, ПараметрыКоманды = Неопределено,
		ЯндексКарты = Ложь, СтрокаКомандыБезИдентификатора = "")
	
	Возврат уатЭлектронныеКартыКлиент.ПолучитьСтрокуКомандуКарты(КомандаКарты, ПараметрыКоманды,
		ЯндексКарты, HTMLobj, СтрокаКомандыБезИдентификатора, ТипЭлектронныхКартПостроениеМаршрутов);
	
КонецФункции

&НаКлиенте
Процедура ВывестиСтекВызововКомандКарты()
	
	#Если ВебКлиент Тогда
		ВывестиСтекВызововКомандСервер(СтрокаИнициализации, кэшОбъектыКарты, 
			кэшОбъектыКарты_Отборы, мсвОбъектыКарты, КомандаДляВыполнения, СчетчикДокументСформирован);
	#Иначе
		СтрокаКомандыКарты = ""; 
		
		ТекстПостроитель = Новый ЗаписьXML;
		ТекстПостроитель.УстановитьСтроку();
		
		ТекстПостроитель.ЗаписатьБезОбработки(СтрокаИнициализации);
		ТекстПостроитель.ЗаписатьБезОбработки(";");
			
		// Выводим сначала вспомогательные объекты
		Для Каждого ТекСтрока Из кэшОбъектыКарты_Отборы Цикл
			ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока.Значение.КомандаКарты);
			ТекстПостроитель.ЗаписатьБезОбработки(";");
		КонецЦикла;
		// Важен порядок отображения
		Для Каждого ТекСтрока Из мсвОбъектыКарты Цикл
			ТекКоманда = кэшОбъектыКарты.Получить(Строка(ТекСтрока)); 
			Если ТекКоманда <> Неопределено Тогда
				ТекстПостроитель.ЗаписатьБезОбработки(ТекКоманда.КомандаКарты);
				ТекстПостроитель.ЗаписатьБезОбработки(";");
				
				Если ТекКоманда.ИмяКоманды = "traceRoute" Тогда
					КомандаДляВыполнения = Новый Структура("Идентификатор, Команда", 
					Строка(ТекСтрока), ТекКоманда.КомандаКарты);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаФокуса) Тогда
			ТекстПостроитель.ЗаписатьБезОбработки(СтрокаФокуса);
			ТекстПостроитель.ЗаписатьБезОбработки(";");
		КонецЕсли;
	
		СтрокаРезультат = ТекстПостроитель.Закрыть();
		
		СчетчикДокументСформирован = СчетчикДокументСформирован + 1;
		Если ЗначениеЗаполнено(СтрокаРезультат) Тогда  
			Если ЗначениеЗаполнено(МаксимальныйРадиусКластера) Тогда
				СтрокаСкрипта = СтрЗаменить(СкриптКарты, "maxClusterRadius: 140", "maxClusterRadius: "
				+ Формат(МаксимальныйРадиусКластера, "ЧГ=0"));
			Иначе
				СтрокаСкрипта = СкриптКарты;	
			КонецЕсли;

			СтрокаСкрипта = СтрЗаменить(СтрокаСкрипта,
			"<input id=""script_version_to_1c"" name=""script_version_to_1c""  type=""hidden"" value=0 />",
			"<input id=""script_version_to_1c"" name=""script_version_to_1c""  type=""hidden"" value=" + СчетчикДокументСформирован + " />");
			mapHTML = СтрЗаменить(СтрокаСкрипта, "// call stack", СтрокаРезультат); 

		КонецЕсли;
	#КонецЕсли 
	
	Если ЗначениеЗаполнено(КомандаДляВыполнения) Тогда
		ПодключитьОбработчикОжидания("ВыполнитьКоманду", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтекВызововКомандСервер(СтрокаИнициализации, кэшОбъектыКарты, кэшОбъектыКарты_Отборы,
	мсвОбъектыКарты, КомандаДляВыполнения, СчетчикДокументСформирован)
	
	СтрокаКомандыКарты = ""; 
	
	ТекстПостроитель = Новый ЗаписьXML;
	ТекстПостроитель.УстановитьСтроку();
	
	ТекстПостроитель.ЗаписатьБезОбработки(СтрокаИнициализации);
	ТекстПостроитель.ЗаписатьБезОбработки(";");
	
	// Выводим сначала вспомогательные объекты
	Для Каждого ТекСтрока Из кэшОбъектыКарты_Отборы Цикл
		ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока.Значение.КомандаКарты);
		ТекстПостроитель.ЗаписатьБезОбработки(";");
	КонецЦикла;
	// Важен порядок отображения
	Для Каждого ТекСтрока Из мсвОбъектыКарты Цикл
		ТекКоманда = кэшОбъектыКарты.Получить(Строка(ТекСтрока)); 
		Если ТекКоманда <> Неопределено Тогда
			ТекстПостроитель.ЗаписатьБезОбработки(ТекКоманда.КомандаКарты);
			ТекстПостроитель.ЗаписатьБезОбработки(";");
			
			Если ТекКоманда.ИмяКоманды = "traceRoute" Тогда
				КомандаДляВыполнения = Новый Структура("Идентификатор, Команда", 
				Строка(ТекСтрока), ТекКоманда.КомандаКарты);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаФокуса) Тогда
		ТекстПостроитель.ЗаписатьБезОбработки(СтрокаФокуса);
		ТекстПостроитель.ЗаписатьБезОбработки(";");
	КонецЕсли;
	
	СтрокаРезультат = ТекстПостроитель.Закрыть();
	
	СчетчикДокументСформирован = СчетчикДокументСформирован + 1;
	Если ЗначениеЗаполнено(СтрокаРезультат) Тогда     
		Если ЗначениеЗаполнено(МаксимальныйРадиусКластера) Тогда
			СтрокаСкрипта = СтрЗаменить(СкриптКарты, "maxClusterRadius: 140", "maxClusterRadius: "
			+ Формат(МаксимальныйРадиусКластера, "ЧГ=0"));
		Иначе
			СтрокаСкрипта = СкриптКарты;	
		КонецЕсли;

		СтрокаСкрипта = СтрЗаменить(СтрокаСкрипта,
		"<input id=""script_version_to_1c"" name=""script_version_to_1c""  type=""hidden"" value=0 />",
		"<input id=""script_version_to_1c"" name=""script_version_to_1c""  type=""hidden"" value=" + СчетчикДокументСформирован + " />");
		mapHTML = СтрЗаменить(СтрокаСкрипта, "// call stack", СтрокаРезультат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНаКарте(ПараметрыКоманды, КомандаСкрипта = "", ВыводитьНаКарту = Истина)

	Если ПараметрыКоманды.Свойство("мсвКоординат")
		ИЛИ ПараметрыКоманды.Свойство("КоординатыСтрока") Тогда
		Если ПараметрыКоманды.Свойство("мсвКоординат") Тогда
			мсвКоординат = "";
			Для Каждого ТекКоордината Из ПараметрыКоманды.мсвКоординат Цикл
				Если ТекКоордината.Лат = 0 И ТекКоордината.Лон = 0 Тогда 
					Продолжить;
				КонецЕсли;
				стрТекКоордината = "["+Формат(ТекКоордината.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекКоордината.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
				мсвКоординат = мсвКоординат + ?(мсвКоординат="", стрТекКоордината, ","+стрТекКоордината);
			КонецЦикла;
		Иначе
			мсвКоординат = ПараметрыКоманды.КоординатыСтрока;
		КонецЕсли;
		ПараметрыКоманды.Вставить("Координаты", мсвКоординат); 
		КомандаСкрипта = ПолучитьСтрокуКомандуКарты("setBoundsToWay", ПараметрыКоманды, ЯндексКарты);
	Иначе
		КомандаСкрипта = ПолучитьСтрокуКомандуКарты("setFocusWOZoom", ПараметрыКоманды, ЯндексКарты);
	КонецЕсли;
	
	Если ВыводитьНаКарту
		И НЕ КартыНеДоступны() Тогда 
		Попытка
			HTMLobj.evalJSFunc(КомандаСкрипта);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуПанелиРазделов(НаименованиеРаздела)
	Для Каждого ТекСтрока Из Элементы.ПанельРазделовГруппаПереключателей.ПодчиненныеЭлементы Цикл
		ТекСтрока.Пометка     = Ложь;
		ТекСтрока.Отображение = ОтображениеКнопки.Картинка;
		Если ТекСтрока.Имя = НаименованиеРаздела Тогда
			ТекСтрока.Пометка = Истина;
			ТекСтрока.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуИнициализации()
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Координаты",			 уатЭлектронныеКартыПовтИсп.ПолучитьСтрокуИнициализацииКоординаты(ПунктФокусировкиПриОткрытии));
	ПараметрыКоманды.Вставить("МасштабОтображения",	 НачальныйМасштаб);
	ПараметрыКоманды.Вставить("ИмяКласса",			 ?(РежимОткрытия = "РежимКарты_Геозоны", "Geozone", "Depict"));

	СтрокаКомандыКарты = ПолучитьСтрокуКомандуКарты("launchMap", ПараметрыКоманды, ЯндексКарты);
	СтрокаКомандыКарты = СтрокаКомандыКарты + ";" + УстановитьРежимРисования();
	
	Возврат СтрокаКомандыКарты;
	
КонецФункции

&НаКлиенте
Функция УстановитьРежимРисования()
	
	Если ЯндексКарты Тогда
		Возврат "";
	КонецЕсли;
	
	РежимМаршруты             = РежимОткрытия = "РежимКарты_Маршруты";
	РежимМаршрутизацияЗаказов = РежимОткрытия = "РежимКарты_АРМЛогиста";
	РедакторГеозон            = РежимОткрытия = "РежимКарты_Геозоны";
	ВключитьРежим             = РежимМаршруты ИЛИ РежимМаршрутизацияЗаказов ИЛИ РедакторГеозон;
	Если ВключитьРежим Тогда
		ПараметрыКоманды = Новый Структура("РедактированиеЗон",
			?(РедакторГеозон, "true", "false"));
		СтрокаКомандыКарты = ПолучитьСтрокуКомандуКарты("showDrawingPanel", ПараметрыКоманды, ЯндексКарты);
	Иначе 
		СтрокаКомандыКарты = ПолучитьСтрокуКомандуКарты("hideDrawingPanel", ПараметрыКоманды, ЯндексКарты)
	КонецЕсли; 
	
	Возврат СтрокаКомандыКарты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РассчитатьМаршрут(МассивМаршрутов, ЯндексКарты)
	Для Каждого ПараметрыКоманды Из МассивМаршрутов Цикл
		
		РезультатOSM = Неопределено;
		ТекстОшибки  = "";
		Если НЕ ЯндексКарты
			И уатЗащищенныеФункцииСервер.РассчитатьМаршрут(ПараметрыКоманды.ТочкиМаршрута,
			РезультатOSM, ТекстОшибки) Тогда
			ПараметрыКоманды.Вставить("МаршрутOSM", РезультатOSM.ParseString);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПунктыСледованияПоМаршруту(ПунктыКПодбору)
	
	мсвПунктыСледования = Новый Массив();

	Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
			Продолжить;
		КонецЕсли;
		
		тНадписьПрибытие = "<STRONG>"+НСтр("ru = 'Пункт:'; en = 'Point:'")+"</STRONG> " + ЭкранироватьСимволы(Строка(ТекСтрока.Пункт))
		+ "<br><STRONG>"+НСтр("ru = 'Операция:'")+"</STRONG> " + Строка(ТекСтрока.ТипТочкиМаршрута);
		
		стрДанныеПунктаОтправления = Новый Структура();
		стрДанныеПунктаОтправления.Вставить("Пункт",        ТекСтрока.Пункт);
		стрДанныеПунктаОтправления.Вставить("Лат",          0);
		стрДанныеПунктаОтправления.Вставить("Выполнен",     Ложь);
		стрДанныеПунктаОтправления.Вставить("Лон",          0);
		стрДанныеПунктаОтправления.Вставить("СтрокаПоиска", "");
		стрДанныеПунктаОтправления.Вставить("ТекстНадписи",  тНадписьПрибытие);
		стрДанныеПунктаОтправления.Вставить("ЦветФона",     "#ffffff");
		мсвПунктыСледования.Добавить(стрДанныеПунктаОтправления);
	КонецЦикла;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТипЗнч(ТекПункт.Пункт) = Тип("Строка") Тогда 
			Продолжить;
		КонецЕсли;
		мсвПунктыДляЗапроса.Добавить(ТекПункт.Пункт);
	КонецЦикла;
	
	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("мсвПунктов", мсвПунктыДляЗапроса);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПунктыНазначения.Ссылка,
	|	уатПунктыНазначения.Лат,
	|	уатПунктыНазначения.Лон
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка В(&мсвПунктов)";
	
	ТабКоординатСпр = мЗапрос.Выполнить().Выгрузить();
	
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТипЗнч(ТекПункт.Пункт) = Тип("Строка") Тогда
			ТекПункт.СтрокаПоиска = ТекПункт.Пункт;
			Продолжить;
		КонецЕсли;
		
		КоординатыПоСпр = ТабКоординатСпр.Найти(ТекПункт.Пункт, "Ссылка");
		Если Не КоординатыПоСпр = Неопределено И Не (КоординатыПоСпр.Лат = 0 И КоординатыПоСпр.Лон = 0) Тогда 
			ТекПункт.Лат = КоординатыПоСпр.Лат;
			ТекПункт.Лон = КоординатыПоСпр.Лон;
		КонецЕсли;
		ТекПункт.СтрокаПоиска = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдреса(ТекПункт.Пункт);
	КонецЦикла;
	
	Возврат мсвПунктыСледования;
КонецФункции

&НаКлиенте
Процедура ГеокодироватьАдреса(мсвПунктыСледования, мсвКоординатДляФокусировки = Неопределено)
	
	Если мсвКоординатДляФокусировки = Неопределено Тогда
		мсвКоординатДляФокусировки = Новый Массив();
	КонецЕсли;
	
	ТребуетсяГеокодирование = Ложь;
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТекПункт.Лат = 0 И ТекПункт.Лон = 0 Тогда
			ТребуетсяГеокодирование = Истина;
		Иначе
			мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяГеокодирование Тогда
		ГеокодироватьАдресаСервер(мсвПунктыСледования, мсвКоординатДляФокусировки);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ГеокодироватьАдресаСервер(мсвПунктыСледования, мсвКоординатДляФокусировки)
	СоответсвиеПунтов = Новый Соответствие();
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТекПункт.Лат = 0 И ТекПункт.Лон = 0 
			И ЗначениеЗаполнено(ТекПункт.СтрокаПоиска) Тогда
			
			ТекКоординаты = СоответсвиеПунтов.Получить(ТекПункт.СтрокаПоиска);
			Если ТекКоординаты = Неопределено Тогда
				ТекстОшибкиOSM = "";
				КоличествоПолученныхРезультатов = Неопределено;
				мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(ТекПункт.СтрокаПоиска,, ТекстОшибкиOSM, КоличествоПолученныхРезультатов);
				
				Если КоличествоПолученныхРезультатов = 0 Тогда
					ТекстОшибкиOSM = "";
					ЭтоГеокодированиеOSM = Истина;
					стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаБезСокращений(ТекПункт.СтрокаПоиска,, ЭтоГеокодированиеOSM);
					мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
				КонецЕсли;
				
				Если ТекстОшибкиOSM = "" Тогда 
					ТекПункт.Лат = мсвКоординат.Лат;
					ТекПункт.Лон = мсвКоординат.Лон;
					СоответсвиеПунтов.Вставить(ТекПункт.СтрокаПоиска,
						Новый Структура("Лат, Лон", мсвКоординат.Лат, мсвКоординат.Лон));
					мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
				Иначе 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиOSM);
				КонецЕсли;
			Иначе
				ТекПункт.Лат = ТекКоординаты.Лат;
				ТекПункт.Лон = ТекКоординаты.Лон;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияИспользованияВОтбореСписок()
	
	ЗапрещенныеВОтбореПоля = Новый Массив;
	ЗапрещенныеВОтбореПоля.Добавить("ФлагВыбора");

	Поиск_СписокПунктов.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	СписокКонтрагентов.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	Отборы_СписокМаршрутов.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	Отборы_СписокГеозон.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	Отборы_СписокТС.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьФактРасстояние()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияРасчитатьФактРасстояние) Тогда
		ОтменитьВыполнениеЗаданияРасчитатьФактРасстояние(ИдентификаторЗаданияРасчитатьФактРасстояние);
	КонецЕсли;
	
	Если Элементы.ПанельТрекаОсновная.Видимость
		И ИсточникФактическихДанныхДляКартографии <> ""
		И (ЗначениеЗаполнено(Трек_МаршрутныйДокумент) 
		ИЛИ ЗначениеЗаполнено(Трек_ТранспортноеСредство)) Тогда
		
		Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		
		ДлительнаяОперация = РасчитатьФактРасстояниеПараметрыВыполненияВФоне();
		ИдентификаторЗаданияРасчитатьФактРасстояние = ДлительнаяОперация.ИдентификаторЗадания;
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("РасчитатьФактРасстояниеДлительнаяОперацияЗавершение", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьФактРасстояниеДлительнаяОперацияЗавершение(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.Обновить;
	Иначе
		Если Операция.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(Операция.АдресРезультата) Тогда
				Данные = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
				Если ТипЗнч(Данные) = Тип("Строка") Тогда
					ФактическоеРасстояние = Данные;
				КонецЕсли;
			КонецЕсли; 
			УстановитьДанныеТрека();
			Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.Обновить;
			ИдентификаторЗаданияРасчитатьФактРасстояние     = "";
		Иначе
			Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.Обновить;
			ИдентификаторЗаданияРасчитатьФактРасстояние     = "";

			ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗаданияРасчитатьФактРасстояние(ИдентификаторЗаданияРасчитатьФактРасстояние)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияРасчитатьФактРасстояние);
	
КонецПроцедуры

&НаСервере
Функция РасчитатьФактРасстояниеПараметрыВыполненияВФоне()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет фактических данных маршрута'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  Трек_ТекущееТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            Трек_ПериодМаршрутаС);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       Трек_ПериодМаршрутаПо);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       0);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  0);
	ОбъектСтруктура.Вставить("Прицепы",               Новый Массив());
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
	"уатЭлектронныеКартыСервер.РасчитатьФактРасстояниеДлительнаяОперация",
	ОбъектСтруктура,
	ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокиВПроизвольномДереве(КоллекцияУзлов, СтруктураОтбора, ИскатьВПодчиненных=Ложь)
	
	Результат = Новый Массив();
	
	Для Каждого ЭлементАктивации Из КоллекцияУзлов Цикл 
		флЭлементСоответствуетОтбору = Истина;
		Для Каждого ТекУсловие Из СтруктураОтбора Цикл 
			Если Не ЭлементАктивации[ТекУсловие.Ключ] = ТекУсловие.Значение Тогда 
				флЭлементСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флЭлементСоответствуетОтбору Тогда 
			Результат.Добавить(ЭлементАктивации);
		КонецЕсли;
		Если ИскатьВПодчиненных Тогда 
			мсвПодчиненных = НайтиСтрокиВПроизвольномДереве(ЭлементАктивации.ПолучитьЭлементы(), СтруктураОтбора, ИскатьВПодчиненных);
			Для Каждого ТекПодчиненный Из мсвПодчиненных Цикл 
				Результат.Добавить(ТекПодчиненный);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПечатьСкриншота(ВидПечати, КартинкаBase64)
	
	ПараметрыФормы = Новый Структура("Ключ", Трек_МаршрутныйДокумент);
	ФормаМЛ = ПолучитьФорму("Документ.уатМаршрутныйЛист.ФормаОбъекта", ПараметрыФормы);
	Если ФормаМЛ.Открыта() 
		И ФормаМЛ.Модифицированность Тогда
		ТекстОшибки = Нстр("ru = 'Для выполнения команды требуется записать документ'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ФормаМЛ.Активизировать();
	Иначе
		Если ВидПечати = 1 Тогда
			ДопПараметрыПечати = Новый Структура();
			ДопПараметрыПечати.Вставить("КартинкаBase64", КартинкаBase64);
			
			МассивОбъектовПечати = Новый Массив(); 
			МассивОбъектовПечати.Добавить(ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка"));
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.уатМаршрутныйЛист", 
			"Карта", 
			МассивОбъектовПечати, 
			ЭтотОбъект, 
			ДопПараметрыПечати
			);
			
			
		ИначеЕсли ВидПечати = 2 Тогда
			ДопПараметрыПечати = Новый Структура();
			ДопПараметрыПечати.Вставить("КартинкаBase64", КартинкаBase64);
			
			МассивОбъектовПечати = Новый Массив();
			МассивОбъектовПечати.Добавить(Трек_МаршрутныйДокумент);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.уатМаршрутныйЛист", 
			"МаршрутныйЛист", 
			МассивОбъектовПечати, 
			ЭтотОбъект, 
			ДопПараметрыПечати
			);
		ИначеЕсли ВидПечати = 3 Тогда
			ДопПараметрыПечати = Новый Структура();
			ДопПараметрыПечати.Вставить("КартинкаBase64", КартинкаBase64);
			
			МассивОбъектовПечати = Новый Массив();
			МассивОбъектовПечати.Добавить(Трек_МаршрутныйДокумент);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.уатМаршрутныйЛист", 
			"МаршрутныйЛистСЗаказами", 
			МассивОбъектовПечати, 
			ЭтотОбъект, 
			ДопПараметрыПечати
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

 &НаСервереБезКонтекста
Функция СформироватьСсылкуОбъекта(Знач ТипМетаданных, Знач ИмяОбъекта, Знач Guid)
	
	Если НРег(ТипМетаданных) = НРег("Справочники") Тогда 
		СсылкаОбъекта = Справочники[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Guid));
	ИначеЕсли НРег(ТипМетаданных) = НРег("Документы") Тогда 
		СсылкаОбъекта = Документы[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Guid));
	Иначе 
		СсылкаОбъекта = Неопределено;
	КонецЕсли;
	
	Если СсылкаОбъекта = Неопределено
		ИЛИ СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда 
		Возврат Неопределено;
	Иначе 
		Возврат СсылкаОбъекта;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено
		ИЛИ НЕ ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("ПериодАвтоматическогоОбновления", ПериодАвтоматическогоОбновления);
	РезультатЗакрытия.Свойство("КластеризацияМаркеровНаКарте",    КластеризацияМаркеровНаКарте);
	РезультатЗакрытия.Свойство("ПунктФокусировкиПриОткрытии",     ПунктФокусировкиПриОткрытии);
	РезультатЗакрытия.Свойство("НачальныйМасштаб",                НачальныйМасштаб);
	РезультатЗакрытия.Свойство("ИспользоватьАвтомасштабирование", ИспользоватьАвтомасштабирование);
	РезультатЗакрытия.Свойство("МаксимальныйРадиусКластера",      МаксимальныйРадиусКластера);
	РезультатЗакрытия.Свойство("КаталогПунктовНаКарте",           КаталогПунктовНаКарте);

	АвтоМасштабироватьПриОткрытии = Истина;
	
	СохранитьНастройки(мсвОтмеченныеПункты_Отборы, мсвОтмеченныеКонтрагенты_Отборы,
		мсвОтмеченныеМаршруты_Отборы, мсвОтмеченныеТС_Отборы, мсвОтмеченныеГеозоны_Отборы,
		НастройкаКластеризацииДляОтображения);
		
	ЕстьИзмененияВОтборах     = Истина; 
	ЕстьИзмененияВДанныхКарты = Истина;
	
	Попытка
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКартыОбработчикОжидания");
	Исключение
	КонецПопытки;
	
	Если НЕ ПериодАвтоматическогоОбновления = 0 Тогда 
		ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКартыОбработчикОжидания", ПериодАвтоматическогоОбновления, Ложь);
	Иначе 
		ОбработчикАвтообновленияКарты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РежимыРаботы

&НаКлиенте
Процедура УстановитьРежимРаботы(Знач ПараметрыРаботы = Неопределено, ФормаВладельца = Неопределено)
	
	Если ПараметрыРаботы = Неопределено Тогда 
		ПараметрыРаботы = Новый Структура();
	КонецЕсли;
	
	Если ПараметрыРаботы.Свойство("РежимОткрытия") Тогда
		
		РежимОткрытия   = ПараметрыРаботы.РежимОткрытия;
		ПараметрыРаботы.Свойство("ОбъектОснование",   ОбъектОснование);
		Если ПараметрыРаботы.Свойство("ДокументОснование") Тогда
			ДокументОснование = ПараметрыРаботы.ДокументОснование;
		КонецЕсли;
		
		Если ПараметрыРаботы.Свойство("ШиротаВъезда") Тогда
			Транспорт_ШиротаВъезда  = ПараметрыРаботы.ШиротаВъезда;
			Транспорт_ДолготаВъезда = ПараметрыРаботы.ДолготаВъезда;
			Транспорт_ШиротаСъезда  = ПараметрыРаботы.ШиротаСъезда;
			Транспорт_ДолготаСъезда = ПараметрыРаботы.ДолготаСъезда;
		КонецЕсли;
	КонецЕсли;
	
	ФормаАРМ				  = Неопределено;
	ЕстьИзмененияВОтборах	  = Истина;
	ЕстьИзмененияВДанныхКарты = Истина;
	РедактироватьМаршрут	  = Ложь;
	
	СоответсвиеИдентификаторовФактМаршрута = Новый Соответствие();
	СоответсвиеИдентификаторовМаршрута     = Новый Соответствие();
	
	УстановитьИсходныеСтраницыРазделов();
	УстановитьПодменюПечати();
	УстановитьРежимРаботы_ПоУмолчанию();
	УстановитьВидимостьИДоступностьПанелей();
	
	Если РежимОткрытия = "РежимКарты_Контрагенты" Тогда
		
		УстановитьРежимРаботы_Контрагенты();

	ИначеЕсли РежимОткрытия = "РежимКарты_Геозоны" Тогда
		
		УстановитьРежимРаботы_Геозоны();
		
	ИначеЕсли РежимОткрытия = "РежимКарты_Кластеры" Тогда
		
		УстановитьРежимРаботы_Кластеры();

	ИначеЕсли РежимОткрытия = "РежимКарты_ПунктыНазначения" Тогда
		
		УстановитьРежимРаботы_ПунктыНазначения(?(ПараметрыРаботы.Свойство("ПунктСтрока"),
			ПараметрыРаботы.ПунктСтрока, ПунктСтрока));

	ИначеЕсли РежимОткрытия = "РежимКарты_Маршруты" Тогда
		
		УстановитьРежимРаботы_Маршруты();
		
	ИначеЕсли РежимОткрытия = "РежимКарты_ЗаказГрузоотправителя" Тогда
		
		УстановитьРежимРаботы_ЗаказГрузоотправителя();
		
	ИначеЕсли РежимОткрытия = "РежимКарты_МаршрутныйЛист"  Тогда

		УстановитьРежимРаботы_МаршрутныйЛист();
		Если ПараметрыРаботы.Свойство("РедактироватьМаршрут") 
			И НЕ ПараметрыРаботы.РедактироватьМаршрут Тогда
			РедактироватьМаршрут = Ложь;
			Элементы.ГруппаОписаниеМЛ.Видимость = Ложь;
		КонецЕсли;

	ИначеЕсли РежимОткрытия = "РежимКарты_ПутевойЛист" Тогда
		
		УстановитьРежимРаботы_ПутевойЛист();
		
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		
		УстановитьРежимРаботы_АРМЛогиста(ФормаВладельца);

	ИначеЕсли РежимОткрытия = "РежимКарты_АРМДиспетчера" Тогда
		
		УстановитьРежимРаботы_АРМДиспетчера(ФормаВладельца);

	ИначеЕсли РежимОткрытия = "РежимКарты_Парковка" 
		ИЛИ РежимОткрытия = "РежимКарты_Штраф"
		ИЛИ РежимОткрытия = "РежимКарты_ОтчетПоставщикаПЦ" Тогда
		
		ПерейтиНаДоступнуюПанель(Неопределено);
		ЗакрытьПанельРазделов(Неопределено);

	ИначеЕсли РежимОткрытия = "РежимКарты_ОтчетСистемыПлатон" Тогда
		
		ПерейтиНаДоступнуюПанель(Неопределено);
		ЗакрытьПанельРазделов(Неопределено);

	ИначеЕсли РежимОткрытия = "РежимКарты_ТипыПунктов" Тогда
		
		ПерейтиНаДоступнуюПанель(Неопределено);
		ЗакрытьПанельРазделов(Неопределено);
		
	Иначе 
		Элементы.ОтображатьПанельРасчетМаршрута.Видимость = Истина;
		Элементы.МаршрутПоАдресамПрименить.Видимость      = Ложь;
		ОтображатьПанельМаршрутизации(Неопределено);
	КонецЕсли;
	УстановитьНаличиеСпидометра();
	УстановитьДанныеТрека();
	
	Элементы.ОтображатьЗоны.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	УстановитьВидимостьИДоступностьПанелей();
	
	Если Элементы.ПанельТрека.Видимость Тогда
		Элементы.ПанельТрека.Видимость = НЕ ЯндексКарты;
	КонецЕсли;  
	
	СтрокаИнициализации = ПолучитьСтрокуИнициализации();
	
	Попытка
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКартыОбработчикОжидания");
	Исключение
	КонецПопытки;
	
	Если НЕ ПериодАвтоматическогоОбновления = 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКартыОбработчикОжидания", ПериодАвтоматическогоОбновления, Ложь);
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКартыОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсходныеСтраницыРазделов()
	Элементы.СтраницыЗон.ТекущаяСтраница				 = Элементы.ОтборЗоны;
	Элементы.СтраницыКонтрагентов.ТекущаяСтраница		 = Элементы.ОтборКонтрагенты;
	Элементы.СтраницыПунктовНазначения.ТекущаяСтраница	 = Элементы.ОтборПунктов;
	Элементы.СтраницыМаршрутов.ТекущаяСтраница			 = Элементы.ОтборМаршруты;
	
	Элементы.СтраницыПодборов.ТекущаяСтраница = Элементы.ГруппаПодборЗаказовВАРМ;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодменюПечати()
	
	Если ЯндексКарты Тогда
		Элементы.ПодменюКомандыПечать.Видимость = Ложь;
		Элементы.ФормаПечать_Карта1.Видимость   = Ложь;
	Иначе
		Элементы.ПодменюКомандыПечать.Видимость = РежимОткрытия = "РежимКарты_МаршрутныйЛист";
		Элементы.ФормаПечать_Карта1.Видимость   = НЕ РежимОткрытия = "РежимКарты_МаршрутныйЛист";	
		
		Если РежимОткрытия = "РежимКарты_Геозоны" Тогда
			Элементы.ПодменюКомандыПечать.Видимость = Ложь;
			Элементы.ФормаПечать_Карта1.Видимость   = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_ПоУмолчанию()
	
	Элементы.ГруппаОтображениеАРМ.Видимость        = Ложь;
	Элементы.ФормаПоиск_ГеокодироватьВсе.Видимость = Ложь;
	Элементы.ПанельПодбора.Видимость               = Ложь;
	Элементы.ПанельТрека.Видимость                 = Ложь;
	Элементы.ГруппаОписаниеМЛ.Видимость            = Ложь;
	
	Элементы.ОтображатьПанельРасчетМаршрута.Видимость = Ложь;
	Элементы.ОтображатьПанельПункты.Видимость         = Истина;
	Элементы.ОтображатьПанельКонтрагентов.Видимость   = Истина;
	Элементы.ОтображатьПанельМаршруты.Видимость       = Истина;
	Элементы.ОтображатьПанельЗоны.Видимость           = Истина;
	Элементы.ОтображатьПанельТС.Видимость             = Истина;
	
	Элементы.ГруппаПодборЗаказовВАРМ.Видимость           = Истина;
	Элементы.ГруппаПодбораМаршрутов.Видимость            = Истина;
	Элементы.ГруппаПодборЗаказовВАРМДиспетчера.Видимость = Истина;

	Элементы.Поиск_КомандыВыбора.Видимость            = Ложь;
	Элементы.Поиск_ЗаписатьКоординаты.Видимость       = Истина;
	Поиск_СтрокаПоиска = "";
	
	Элементы.МаршрутПоАдресам.ТолькоПросмотр     = Ложь;
	Элементы.МаршрутПоАдресамПрименить.Видимость = Истина;
	
	Элементы.ДекорацияПодбораНадпись.Заголовок    = Нстр("ru = 'Развернуть маршрут'");

	ЗакрытьПанельТрека(Неопределено);
	ЗакрытьПанельПодбора(Неопределено);
	ДекорацияПанельРазделовНажатие(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_Контрагенты()
	
	мсвОтмеченныеКонтрагенты.Добавить(ОбъектОснование);
	СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты", мсвОтмеченныеКонтрагенты);
	Элементы.СписокКонтрагентов.Обновить();
	Если Элементы.СписокКонтрагентов.ДанныеСтроки(ОбъектОснование) = Неопределено Тогда
		ТекстНСтр = НСтр("ru = 'Требуемый объект не найден. Проверьте состав настроек списка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	Элементы.СписокКонтрагентов.ТекущаяСтрока = ОбъектОснование;

	Элементы.СтраницыКонтрагентов.ТекущаяСтраница  = Элементы.ПанельКонтрагентов;
		
	ОтображатьПанельКонтрагентов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_Геозоны()
	
	РежимОтображенияГеозоныКластеры = 0;
	ОбновитьСписокГеозонСервер(ОбъектОснование);
	НайдСтроки = НайтиСтрокиВПроизвольномДереве(СписокГеозон.ПолучитьЭлементы(), Новый Структура("Ссылка", ОбъектОснование), Истина);
	Если НайдСтроки.Количество() Тогда 
		Элементы.СписокГеозон.ТекущаяСтрока = НайдСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

	Элементы.СтраницыЗон.ТекущаяСтраница           = Элементы.ПанельЗон;

	ОтображатьПанельЗоны(Неопределено);
	ПереключитьРежимГеозоныКластеры();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_Кластеры()
	
	НастройкаКластеризацииДляОтображения = ПолучитьЗначениеРеквизита(ОбъектОснование, "НастройкаКластеризации");
	РежимОтображенияГеозоныКластеры      = 1;
	
	Элементы.СтраницыЗон.ТекущаяСтраница = Элементы.ПанельКластеры;
	
	ОтображатьПанельЗоны(Неопределено);
	ПереключитьРежимГеозоныКластеры();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_ПунктыНазначения(ТекПунктСтрока)
	
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		мсвОтмеченныеПункты.Добавить(ОбъектОснование);
		Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", мсвОтмеченныеПункты);
		Элементы.Поиск_СписокПунктов.Обновить();
		Если Элементы.Поиск_СписокПунктов.ДанныеСтроки(ОбъектОснование) = Неопределено Тогда
			ТекстНСтр = НСтр("ru = 'Требуемый объект не найден. Проверьте состав настроек списка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		КонецЕсли;
		Элементы.Поиск_СписокПунктов.ТекущаяСтрока = ОбъектОснование;
	
		ПодключитьОбработчикОжидания("Подключаемый_СписокПунктовПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;

	Элементы.ФормаПоиск_ГеокодироватьВсе.Видимость = Истина;
	
	Элементы.СтраницыПунктовНазначения.ТекущаяСтраница = Элементы.СтраницаПоиска;
	
	ОтображатьПанельПункты(Неопределено);
	
	Если ЗначениеЗаполнено(ТекПунктСтрока) Тогда
		Поиск_СтрокаПоиска                               = ТекПунктСтрока;
		Элементы.Поиск_КомандыВыбора.Видимость           = Истина;
		Элементы.Поиск_СоздатьИВыбрать.КнопкаПоУмолчанию = Истина;
		Элементы.Поиск_ЗаписатьКоординаты.Видимость      = Ложь;
		ГеокодироватьСтрокуПоиска(Неопределено);
		Если Поиск_НайденныеАдреса.Количество() > 0 Тогда
			Элементы.Поиск_НайденныеАдреса.ТекущаяСтрока = Поиск_НайденныеАдреса[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_Маршруты()
	
	Элементы.ПанельПодбора.Видимость = Истина;

	РедактироватьМаршрут = Истина;
	Трек_ОтображатьПлановыйМаршрут             = Истина;
	Элементы.СтраницыМаршрутов.ТекущаяСтраница = Элементы.ПанельМаршруты;
	Элементы.СтраницыПодборов.ТекущаяСтраница  = Элементы.ГруппаПодбораМаршрутов;
	
	ОтображатьПанельМаршруты(Неопределено);
	ДекорацияПодбораНажатие(Неопределено);

	мсвОтмеченныеМаршруты.Добавить(ОбъектОснование);
	Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты", мсвОтмеченныеМаршруты);
	
	Попытка
		Элементы.СписокМаршрутов.Обновить();
		Если Элементы.СписокМаршрутов.ДанныеСтроки(ОбъектОснование) = Неопределено Тогда
			ТекстНСтр = НСтр("ru = 'Требуемый объект не найден. Проверьте состав настроек списка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		КонецЕсли;
	Исключение
	Конецпопытки;
	Элементы.СписокМаршрутов.ТекущаяСтрока = ОбъектОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_ЗаказГрузоотправителя()
	
	Транспорт_ЗаказНаТС = ОбъектОснование;

	Элементы.ПанельТрека.Видимость                    = Истина;
	Элементы.ОтображатьПанельРасчетМаршрута.Видимость = Истина;
	Элементы.МаршрутизацияПоАдресам.Видимость         = Ложь;
	Элементы.ГруппаРасчетМаршрута.Видимость           = Ложь;
	
	УдалитьВсеТочкиМаршрута();
	ЗаполнитьМаршрутПоАдресамИзЗаказа(Транспорт_ЗаказНаТС);

	ЗначениеРеквизитов = ПолучитьЗначениеРеквизитов(Транспорт_ЗаказНаТС,"FTL,Мультимодальный,ЭтоЭтап");
	Если ЗначениеЗаполнено(Транспорт_ЗаказНаТС)
		И ЗначениеРеквизитов.Мультимодальный 
		И НЕ ЗначениеРеквизитов.ЭтоЭтап 
		И МаршрутМультимодальногоЗаказа.Количество() <> 0 Тогда
		ТекСтраницаМаршрутизации = Элементы.СтраницаМаршрутизацииПоАдресамМультимодальныйЗаказ;
	ИначеЕсли ЗначениеЗаполнено(Транспорт_ЗаказНаТС)
		И ЗначениеРеквизитов.FTL  Тогда
		ТекСтраницаМаршрутизации                     = Элементы.СтраницаМаршрутизацииПоАдресам;
		Элементы.ГруппаРасчетМаршрута.Видимость      = Истина;
		Элементы.МаршрутПоАдресам.ТолькоПросмотр     = Истина;
		Элементы.МаршрутПоАдресамПрименить.Видимость = Ложь;
	Иначе
		ТекСтраницаМаршрутизации = Элементы.СтраницаМаршрутизацииПоАдресамЗаказ;
	КонецЕсли;
	Элементы.СтраницыМаршрутизации.ТекущаяСтраница = ТекСтраницаМаршрутизации;
	
	СчТочек = 1;
	Для Каждого ТекСтрока Из МаршрутПоАдресам Цикл
		ЗаполнитьМаршрутПоАдресу(ТекСтрока, ЗначениеРеквизитов.FTL, СчТочек);
		СчТочек = СчТочек + 1;
	КонецЦикла;
	
	ОтображатьПанельМаршрутизации(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_МаршрутныйЛист()
	
	РедактироватьМаршрут = Истина; 
	
	Трек_МаршрутныйДокумент            = ОбъектОснование;
	Трек_ОтображатьПлановыйМаршрут     = Истина;
	Трек_ОтображатьФактическийМаршрут  = Истина;
	Трек_ОтображатьПоДокументу         = Истина;
	Трек_ОтображатьПоДокументуЗаПериод = "По документу";
	Трек_ИсточникПунктов               = 0;
	
	Элементы.ГруппаОписаниеМЛ.Видимость                   = Истина;
	Элементы.ГруппаТрек_МаршрутныйДокумент.Видимость      = Трек_ОтображатьПоДокументу;
	Элементы.ГруппаТрек_ТранспортноеСредство.Видимость    = НЕ Трек_ОтображатьПоДокументу;
	Трек_ЗаполнитьПериодТСПоДокументу();
	
	Элементы.ПанельТрека.Видимость     = Истина;
	
	ПерейтиНаДоступнуюПанель(Неопределено);
	ЗакрытьПанельРазделов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_ПутевойЛист()
	
	Трек_МаршрутныйДокумент            = ОбъектОснование;
	Трек_ОтображатьПлановыйМаршрут     = Истина;
	Трек_ОтображатьФактическийМаршрут  = Истина;
	Трек_ОтображатьПоДокументу         = Истина;
	Трек_ОтображатьПоДокументуЗаПериод = "По документу";
	Трек_ИсточникПунктов               = 1;
	
	Элементы.ГруппаТрек_МаршрутныйДокумент.Видимость   = Трек_ОтображатьПоДокументу;
	Элементы.ГруппаТрек_ТранспортноеСредство.Видимость = НЕ Трек_ОтображатьПоДокументу;
	Трек_ЗаполнитьПериодТСПоДокументу();
	
	Элементы.ПанельТрека.Видимость     = Истина;
	
	ПерейтиНаДоступнуюПанель(Неопределено);
	ЗакрытьПанельРазделов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_АРМЛогиста(ФормаВладельца)
	
	РедактироватьМаршрут = Истина;
	
	ФормаАРМ = ФормаВладельца;
	
	Элементы.ГруппаОтображениеАРМ.Видимость      = Истина;
	Элементы.ПанельТрека.Видимость               = Истина;
	Элементы.ПанельПодбора.Видимость             = Истина;
	Элементы.ОтображатьМаршруты.Видимость        = Ложь;
	
	Элементы.ГруппаПодбораМаршрутов.Видимость            = Ложь;
	Элементы.ГруппаПодборЗаказовВАРМ.Видимость           = Истина;
	Элементы.ГруппаПодборЗаказовВАРМДиспетчера.Видимость = Ложь;

	Элементы.СтраницыПодборов.ТекущаяСтраница  = Элементы.ГруппаПодборЗаказовВАРМ;
	Элементы.ДекорацияПодбораНадпись.Заголовок = Нстр("ru = 'Развернуть маршрут'");
	
	ПерейтиНаДоступнуюПанель(Неопределено);
	ЗакрытьПанельРазделов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботы_АРМДиспетчера(ФормаВладельца)
	
	ФормаАРМ = ФормаВладельца;
	
	Элементы.ГруппаОтображениеАРМ.Видимость      = Истина;
	Элементы.ПанельТрека.Видимость               = Истина;
	Элементы.ПанельПодбора.Видимость             = Истина;
	Элементы.ОтображатьМаршруты.Видимость        = Ложь;
	
	Элементы.ГруппаПодбораМаршрутов.Видимость             = Ложь;
	Элементы.ГруппаПодборЗаказовВАРМ.Видимость            = Ложь;
	Элементы.ГруппаПодборЗаказовВАРМДиспетчера.Видимость  = Истина;  
	
	Элементы.СтраницыПодборов.ТекущаяСтраница  = Элементы.ГруппаПодборЗаказовВАРМДиспетчера;
	Элементы.ДекорацияПодбораНадпись.Заголовок = Нстр("ru = 'Развернуть маршрут'");
	
	ПерейтиНаДоступнуюПанель(Неопределено);
	ЗакрытьПанельРазделов(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура ПоказатьОтборыНаКарте()
	
	Если НЕ ЕстьИзмененияВОтборах Тогда
		Возврат;
	КонецЕсли;  
	
	ЕстьИзмененияВОтборах   = Ложь;
	
	СоответсвиеКомандКарты_Отборы = Новый Соответствие();
	кэшОбъектыКарты_Отборы        = Новый Соответствие();

	ФлагОтображатьПункты = Элементы.ОтображатьПункты.Видимость
		И Элементы.ОтображатьПункты.Пометка 
		И НЕ РежимОткрытия = "РежимКарты_ПунктыНазначения";
	ФлагОтображатьКонтрагентов = Элементы.ОтображатьКонтрагентов.Видимость
		И Элементы.ОтображатьКонтрагентов.Пометка 
		И НЕ РежимОткрытия = "РежимКарты_Контрагенты";
	ФлагОтображатьМаршруты = Элементы.ОтображатьМаршруты.Видимость
		И Элементы.ОтображатьМаршруты.Пометка 
		И НЕ РежимОткрытия = "РежимКарты_Маршруты";
	ФлагОтображатьЗоны = Элементы.ОтображатьЗоны.Видимость
		И Элементы.ОтображатьЗоны.Пометка 
		И НЕ РежимОткрытия = "РежимКарты_Геозоны"; 
	ФлагОтображатьКластеры = Элементы.ОтображатьКластеры.Видимость
		И Элементы.ОтображатьКластеры.Пометка
		И НЕ РежимОткрытия = "РежимКарты_Кластеры";
	ФлагОтображатьТС = Элементы.ОтображатьТС.Видимость
		И Элементы.ОтображатьТС.Пометка;

	ФлагОтображатьОтборы = ФлагОтображатьПункты
		ИЛИ ФлагОтображатьКонтрагентов ИЛИ ФлагОтображатьМаршруты
		ИЛИ ФлагОтображатьЗоны ИЛИ ФлагОтображатьТС ИЛИ ФлагОтображатьКластеры;

	ЕстьИзмененияВОтборах = Ложь;
	
	Если НЕ ФлагОтображатьОтборы Тогда 
		Возврат;
	КонецЕсли;
		
	мсвПунктов      = Новый Массив();
	мсвКонтрагентов = Новый Массив();
	мсвМаршруты     = Новый Массив();
	мсвГеозон       = Новый Массив();
	мсвТС           = Новый Массив();
	мсвКластеров    = Новый Массив();
	
	ПолучитьДанныеОбъектовОтбора(мсвПунктов, мсвКонтрагентов, мсвМаршруты, мсвГеозон, мсвКластеров, мсвТС,
		ФлагОтображатьПункты, ФлагОтображатьКонтрагентов, ФлагОтображатьМаршруты,
		ФлагОтображатьЗоны, ФлагОтображатьКластеры, ФлагОтображатьТС,
		мсвОтмеченныеПункты_Отборы, мсвОтмеченныеКонтрагенты_Отборы,
		мсвОтмеченныеМаршруты_Отборы, мсвОтмеченныеГеозоны_Отборы, мсвОтмеченныеТС_Отборы,
		ТекНастройкаКластеризацииДляОтображения, ТипЭлектронныхКарт, СоответсвиеКартинокТиповПунктов);
	
	Если ФлагОтображатьПункты Тогда 
		ОтобразитьПунктыНаКарте(мсвПунктов,, Истина);
	КонецЕсли;
	
	Если ФлагОтображатьКонтрагентов Тогда
		ОтобразитьКонтрагентовНаКарте(мсвКонтрагентов,, Истина);
	КонецЕсли;
	
	Если ФлагОтображатьМаршруты Тогда
		ОтобразитьМаршрутыНаКарте(мсвМаршруты,, Истина);
	КонецЕсли;
	
	Если ФлагОтображатьЗоны Тогда
		ОтобразитьГеозоныНаКарте(мсвГеозон,, Истина);
	КонецЕсли;
	
	Если ФлагОтображатьКластеры Тогда
		
		Для Каждого ТекКластер Из мсвКластеров Цикл 
			КрасныйЦвет = ?(ТекКластер.Цвет.Красный= -1, 255, ТекКластер.Цвет.Красный);
			ЗеленыйЦвет = ?(ТекКластер.Цвет.Зеленый= -1, 255, ТекКластер.Цвет.Зеленый);
			СинийЦвет   = ?(ТекКластер.Цвет.Синий= -1,   255, ТекКластер.Цвет.Синий);
			
			мсвКоординат = "";
			Для Каждого ТекТочка Из ТекКластер.Координаты Цикл 
				стрКоординаты = "[" + Формат(ТекТочка.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," + Формат(ТекТочка.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "]";
				мсвКоординат  = мсвКоординат + ?(мсвКоординат="", стрКоординаты, "," + стрКоординаты);
			КонецЦикла;
			
			ЦветКластераСтр = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(КрасныйЦвет, ЗеленыйЦвет, СинийЦвет);
			
			ПараметрыКоманды = Новый Структура();
			ПараметрыКоманды.Вставить("Координаты",     мсвКоординат);
			ПараметрыКоманды.Вставить("ЦветЗоны",       ЦветКластераСтр);
			ПараметрыКоманды.Вставить("Редактирование", "false");
			ПараметрыКоманды.Вставить("Идентификатор",  ТекКластер.Идентификатор);
			ОбработатьКомандуКарты("showPolygon", ПараметрыКоманды,, Истина);
			
		КонецЦикла;
	КонецЕсли;

	Если ФлагОтображатьТС
		И (РежимОткрытия = "РежимКарты_АРМЛогиста"
		ИЛИ РежимОткрытия = "РежимКарты_АРМДиспетчера") Тогда
		ПодобратьТСизАРМЛогиста();
		
	ИначеЕсли ФлагОтображатьТС Тогда
		ОтобразитьТСНаКарте(мсвТС,, Истина); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПунктыНаКарте(мсвПунктов, ВыводитьНаКарту = Ложь, Отбор = Ложь)
	Для Каждого ДанныеПункта Из мсвПунктов Цикл
		Если ДанныеПункта.Геокодирован Тогда 
			ТекстНадписи = ДанныеПункта.ТекстНадписи;
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ДанныеПункта.Лат,
			ДанныеПункта.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, "8", 
			уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(ДанныеПункта.Картинка, "svg+xml",
			СоответсвиеКартинок),,, ДанныеПункта.Ссылка);
			ПараметрыКоманды.Вставить("Идентификатор", ДанныеПункта.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеОбъектовОтбора(мсвПунктов, мсвКонтрагентов, мсвМаршруты, мсвГеозон, мсвКластеров, мсвТС,
		ФлагОтображатьПункты, ФлагОтображатьКонтрагентов, ФлагОтображатьМаршруты,
		ФлагОтображатьЗоны, ФлагОтображатьКластеры, ФлагОтображатьТС,
		мсвОтмеченныеПункты_Отборы, мсвОтмеченныеКонтрагенты_Отборы,
		мсвОтмеченныеМаршруты_Отборы, мсвОтмеченныеГеозоны_Отборы, мсвОтмеченныеТС_Отборы,
		НастройкаКластеризацииДляОтображения, ТипЭлектронныхКарт, СоответсвиеКартинокТиповПунктов)
		
	Если ФлагОтображатьПункты Тогда
		мсвПунктов = ПолучитьДанныеПунктов(мсвОтмеченныеПункты_Отборы, ТипЭлектронныхКарт,, СоответсвиеКартинокТиповПунктов);
	КонецЕсли;
	
	Если ФлагОтображатьКонтрагентов Тогда
		мсвКонтрагентов = ПолучитьДанныеКонтрагентов(мсвОтмеченныеКонтрагенты_Отборы);
	КонецЕсли;
	
	Если ФлагОтображатьМаршруты Тогда
		мсвМаршруты     = ПолучитьДанныеМаршрутов(мсвОтмеченныеМаршруты_Отборы);
	КонецЕсли;
	
	Если ФлагОтображатьЗоны Тогда
		мсвГеозон       = ПолучитьДанныеГеозон(мсвОтмеченныеГеозоны_Отборы);
	КонецЕсли;
	
	Если ФлагОтображатьТС Тогда 
		мсвТС           = уатЭлектронныеКартыСервер.ПолучитьДанныеТС(мсвОтмеченныеТС_Отборы);
	КонецЕсли;
	
	Если ФлагОтображатьКластеры 
		И Константы.уатИспользоватьКластеризацию_уэ.Получить() = Истина Тогда
		мсвКластеров = уатЗащищенныеФункцииСервер_уэ.ПолучитьКластерыДляОтображенияНаКарте(НастройкаКластеризацииДляОтображения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПунктов(Пункт, ТипЭлектронныхКарт = Неопределено, ЦветМаршрута = Неопределено, СоответсвиеКартинок = Неопределено)
	
	Если ТипЗнч(Пункт) = Тип("Массив") Тогда
		МассивПунктов = Пункт;
	Иначе
		МассивПунктов = Новый Массив();
		МассивПунктов.Добавить(Пункт);
	КонецЕсли;
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивПунктов", МассивПунктов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Лат КАК Лат,
	|	уатПунктыНазначения.Лон КАК Лон,
	|	уатПунктыНазначения.ЗначенияПолейАдреса КАК ЗначенияПолейАдреса,
	|	уатПунктыНазначения.ЗначениеАдреса КАК ЗначениеАдреса,
	|	уатПунктыНазначения.Ссылка КАК Ссылка,
	|	уатПунктыНазначения.Наименование КАК Наименование,
	|	уатПунктыНазначения.ЦветНаКарте КАК ЦветНаКарте,
	|	уатПунктыНазначения.ТипПункта.Картинка КАК Картинка,
	|	уатПунктыНазначения.ТипПункта КАК ТипПункта,
	|	уатПунктыНазначения.ТипПункта.Служебный КАК ТипПунктаСлужебный,
	|	уатПунктыНазначения.ТипПункта.Картинка КАК ТипПунктаКартинка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка В(&МассивПунктов)
	|	И НЕ уатПунктыНазначения.ЭтоГруппа";
	
	СоответвиеНадписей = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблоновИнформацииДляКарты(МассивПунктов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураПункта = Новый Структура("Геокодирован, Лат, Лон,
		|ЗначениеАдреса, УникальныйИдентификатор,
		|Ссылка, Наименование, Картинка, ТипПункта, ТипПунктаСлужебный, ТекстНадписи");
		
		СтруктураПункта.Геокодирован        = НЕ (Выборка.Лат = 0 И Выборка.Лон = 0);
		СтруктураПункта.Лат                 = Выборка.Лат;
		СтруктураПункта.Лон                 = Выборка.Лон;
		СтруктураПункта.ЗначениеАдреса      = Выборка.ЗначениеАдреса;
		СтруктураПункта.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		СтруктураПункта.Ссылка                  = Выборка.Ссылка;
		СтруктураПункта.Наименование            = Выборка.Наименование;
		СтруктураПункта.ТипПункта               = Выборка.ТипПункта;
		СтруктураПункта.ТипПунктаСлужебный      = Выборка.ТипПунктаСлужебный;
		Если ЗначениеЗаполнено(СтруктураПункта.ЗначениеАдреса) Тогда
			Если ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
				ИЛИ ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")
				ИЛИ ТипЭлектронныхКарт = Неопределено Тогда 
				СтруктураПункта.ЗначениеАдреса = уатЭлектронныеКартыПовтИсп.ПолучитьПредставлениеАдресаOSM(СтруктураПункта.ЗначениеАдреса);
			Иначе 
				СтруктураПункта.ЗначениеАдреса = "";
			КонецЕсли;
		Иначе
			Если ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
				ИЛИ ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")
				ИЛИ ТипЭлектронныхКарт = Неопределено Тогда  
				ЗначенияПолейАдреса = Выборка.ЗначенияПолейАдреса.Получить();
				СтруктураПункта.ЗначениеАдреса = уатЭлектронныеКартыПовтИсп.ПолучитьПредставлениеАдресаOSM(ЗначенияПолейАдреса);
			Иначе 
				СтруктураПункта.ЗначениеАдреса = "";
			КонецЕсли;
		КонецЕсли;
		
		Если СоответсвиеКартинок <> Неопределено Тогда
			Если ЦветМаршрута <> Неопределено Тогда
				ЦветНаКарте         = ЦветМаршрута;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ЦветНаКарте) Тогда
				ЦветПункта = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(Выборка.ЦветНаКарте);
				ЦветНаКарте         = ЦветПункта;
			Иначе
				ЦветНаКарте         = Новый Цвет(89, 89, 89);
			КонецЕсли;
			СтруктураПункта.Картинка = ПолучитьИзображениеИзПункта(Выборка.ТипПункта, СоответсвиеКартинок,
				Выборка.ТипПунктаКартинка, ЦветНаКарте);
		КонецЕсли;
		СтруктураПункта.ТекстНадписи = СоответвиеНадписей.Получить(Выборка.Ссылка);
		Результат.Добавить(СтруктураПункта);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзображениеИзПункта(ТипПункта, СоответсвиеКартинок, ОсновнаяКартинка, ЦветПункта)
	
	ЦветИзображения = ПолучитьЦветLeaflet(ЦветПункта.Красный,
			ЦветПункта.Зеленый, ЦветПункта.Синий);
	
	Возврат ПолучитьИзображениеИзТипаПункта(ТипПункта, СоответсвиеКартинок, ОсновнаяКартинка, ЦветИзображения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветLeaflet(Знач Красный, Знач Зеленый, Знач Синий)
	
	ЦветСтр = "#"+ДесятичноеВШестнадцатеричное(Красный)+ДесятичноеВШестнадцатеричное(Зеленый)+ДесятичноеВШестнадцатеричное(Синий);
	
	Возврат ЦветСтр;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДесятичноеВШестнадцатеричное(Знач дЧисло)
	
	Если дЧисло = 0 Тогда 
		Возврат "00";
	КонецЕсли;
	
	База = 16;
	Результат = "";
	Пока дЧисло <> 0 Цикл
		Поз =дЧисло % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		дЧисло = Цел(дЧисло / База);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда 
		Возврат "0" + Результат;
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзображениеИзТипаПункта(ТипПункта, СоответсвиеКартинок, ОсновнаяКартинка = Неопределено, ЦветИзображения = "#444444")

	ТекстМакета = СоответсвиеКартинок.Получить(ТипПункта);
	Если ТекстМакета = Неопределено Тогда
		Если ОсновнаяКартинка = Неопределено Тогда
			ОсновнаяКартинка = ПолучитьЗначениеРеквизита(ТипПункта, "Картинка");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОсновнаяКартинка) Тогда
			
			ТекстМакета = Справочники.уатТипыПунктов.ПолучитьМакет("КартинкаАдрес");
			ТекстМакета = ТекстМакета.ПолучитьТекст();
		Иначе
			
			ФайлКартинки = ОсновнаяКартинка.Получить();
			Если ЗначениеЗаполнено(ФайлКартинки) Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("cvg");
				ФайлКартинки.Записать(ИмяФайла);
				
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ИмяФайла);
				ТекстМакета = ТекстовыйДокумент.ПолучитьТекст();
				ТекстМакета = СтрЗаменить(ТекстМакета, "pt", "px");
			Иначе
				ТекстМакета = Справочники.уатТипыПунктов.ПолучитьМакет("КартинкаАдрес");
				ТекстМакета = ТекстМакета.ПолучитьТекст();
			КонецЕсли;
		КонецЕсли;
		СоответсвиеКартинок.Вставить(ТипПункта, ТекстМакета);
	КонецЕсли;

	Если ЦветИзображения <> "" Тогда
		СтрокаПоиска = "fill=";
		СтрокаПоиска1 = """";
		СтрокаПоиска2 = """";
		ЧислоВхождений = СтрЧислоВхождений(ТекстМакета, СтрокаПоиска);
		fillОбласти    = СтрНайти(ТекстМакета, "<path");
		Если ЧислоВхождений = 0 Тогда
			СтрокаПоиска   = "fill:";
			ЧислоВхождений = СтрЧислоВхождений(ТекстМакета, СтрокаПоиска);
			
			СтрокаПоиска1 = ":";
			СтрокаПоиска2 = ";";
		КонецЕсли;
		
		Для Счетчик = 1 По ЧислоВхождений Цикл
			fillОбласти = СтрНайти(ТекстМакета, СтрокаПоиска,,fillОбласти+1);
			Если fillОбласти <> 0 Тогда
				
				Если СтрокаПоиска1 = ":" Тогда 
					НачальнаяПозицияКонцаfillОбласти1 = СтрНайти(ТекстМакета, СтрокаПоиска1,,fillОбласти);
				Иначе
					НачальнаяПозицияКонцаfillОбласти1 = СтрНайти(ТекстМакета, СтрокаПоиска1,,fillОбласти );
				КонецЕсли;
				НачальнаяПозицияКонцаfillОбласти2 = СтрНайти(ТекстМакета, СтрокаПоиска2,,
					НачальнаяПозицияКонцаfillОбласти1 + 1);
					
				Цвет = Сред(ТекстМакета, НачальнаяПозицияКонцаfillОбласти1 + 1, НачальнаяПозицияКонцаfillОбласти2 - НачальнаяПозицияКонцаfillОбласти1 - 1);
				
				Если Цвет = "rgb(100%,100%,100%)"
					ИЛИ Цвет = "white" Тогда
					Продолжить;
				КонецЕсли;
				
				НачалоСтроки = Лев(ТекстМакета, НачальнаяПозицияКонцаfillОбласти1) + ЦветИзображения;
				ОкончаниеСтроки = Сред(ТекстМакета, НачальнаяПозицияКонцаfillОбласти2, СтрДлина(ТекстМакета));
				
				ТекстМакета = НачалоСтроки + ОкончаниеСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДвоичныеДанныеМакета = ПолучитьДвоичныеДанныеИзСтроки(ТекстМакета);
		
	ИзображениеИзМакета  = Новый Картинка(ДвоичныеДанныеМакета);
	
	Возврат ИзображениеИзМакета;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентов(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Массив") Тогда
		МассивКонтрагентов = Контрагент;
	Иначе
		МассивКонтрагентов = Новый Массив();
		МассивКонтрагентов.Добавить(Контрагент);
	КонецЕсли;
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Контрагенты.Наименование КАК НаименованиеКонтрагента,
	               |	уатПунктыНазначения.Наименование КАК НаименованиеПункта,
	               |	уатПунктыНазначения.Лат КАК Лат,
	               |	уатПунктыНазначения.Лон КАК Лон,
	               |	Контрагенты.Ссылка КАК Ссылка,
	               |	уатПунктыНазначения.Ссылка КАК СсылкаПункт,
	               |	КонтрагентыПунктыНазначения.Основной КАК Основной,
	               |	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	КонтрагентыПунктыНазначения.ДоступенС КАК ДоступенС,
	               |	КонтрагентыПунктыНазначения.ДоступенПо КАК ДоступенПо
	               |ИЗ
	               |	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО КонтрагентыПунктыНазначения.Ссылка = Контрагенты.Ссылка
	               |			И (НЕ Контрагенты.ЭтоГруппа)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	               |		ПО КонтрагентыПунктыНазначения.ПунктНазначения = уатПунктыНазначения.Ссылка
	               |			И (уатПунктыНазначения.Лат <> 0
	               |				ИЛИ уатПунктыНазначения.Лон <> 0)
	               |ГДЕ
	               |	Контрагенты.Ссылка В(&МассивКонтрагентов)
	               |	И КонтрагентыПунктыНазначения.Основной";
	
	ТаблицаДопПарметров = Новый ТаблицаЗначений;
	ТаблицаДопПарметров.Колонки.Добавить("Ссылка",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДопПарметров.Колонки.Добавить("Пункт",          Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	ТаблицаДопПарметров.Колонки.Добавить("Основной",       Новый ОписаниеТипов("Булево"));
	ТаблицаДопПарметров.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица")); 
	ТаблицаДопПарметров.Колонки.Добавить("ДоступенС",      Новый ОписаниеТипов("Дата")); 
	ТаблицаДопПарметров.Колонки.Добавить("ДоступенПо",     Новый ОписаниеТипов("Дата"));
	
	ТекМассивКонтрагентов = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураКонтрагента = Новый Структура("УникальныйИдентификатор, НаименованиеКонтрагента, Лат, Лон,
		|НаименованиеПункта, Ссылка, СсылкаПункт, Геокодирован, ТекстНадписи", "", "", 0, 0, "", "", "", Ложь, "");
		
		
		СтруктураКонтрагента.Геокодирован = НЕ (Выборка.Лат = 0 И Выборка.Лон = 0);
		
		СтруктураКонтрагента.Лат                 = Выборка.Лат;
		СтруктураКонтрагента.Лон                 = Выборка.Лон;
		СтруктураКонтрагента.НаименованиеКонтрагента = ЭкранироватьСимволы(Выборка.НаименованиеКонтрагента);
		СтруктураКонтрагента.НаименованиеПункта      = ЭкранироватьСимволы(Выборка.НаименованиеПункта);
		СтруктураКонтрагента.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		СтруктураКонтрагента.Ссылка                  = Выборка.Ссылка;
		СтруктураКонтрагента.СсылкаПункт             = Выборка.СсылкаПункт; 
		
		НоваяСтрока = ТаблицаДопПарметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Пункт = Выборка.СсылкаПункт;
		Результат.Добавить(СтруктураКонтрагента);
		ТекМассивКонтрагентов.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	ДополнительныеПараметрыНадписи = Новый Структура("ДанныеПункта", ТаблицаДопПарметров);
	СоответвиеНадписей = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблоновИнформацииДляКарты(ТекМассивКонтрагентов, ДополнительныеПараметрыНадписи);
	Для Каждого ТекСтрока Из Результат Цикл
		ТекСтрока.ТекстНадписи = СоответвиеНадписей.Получить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрутов(МассивМаршрутов)
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивМаршрутов", МассивМаршрутов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатМаршруты.Ссылка КАК Ссылка,
	               |	уатМаршруты.Наименование КАК Наименование,
	               |	уатМаршруты.Родитель КАК Родитель,
	               |	уатМаршруты.ЭтоГруппа КАК ЭтоГруппа,
	               |	уатМаршруты.ЦветНаКарте КАК ЦветНаКарте
	               |ИЗ
	               |	Справочник.уатМаршруты КАК уатМаршруты
	               |ГДЕ
	               |	уатМаршруты.Ссылка В(&МассивМаршрутов)
	               |	И НЕ уатМаршруты.ЭтоГруппа
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Родитель,
	               |	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураМаршрута = Новый Структура("Ссылка, ЦветНаКарте, мсвПунктыСледования, УникальныйИдентификатор");
		СтруктураМаршрута.Ссылка = Выборка.Ссылка;
		Если ЗначениеЗаполнено(Выборка.ЦветНаКарте) Тогда
			ЦветПункта = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(Выборка.ЦветНаКарте);
			ЦветНаКарте         = ЦветПункта;
		Иначе
			ЦветНаКарте         = Новый Цвет(96, 96, 96);
		КонецЕсли;
		СтруктураМаршрута.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		СтруктураМаршрута.ЦветНаКарте = ЦветНаКарте;
		мсвПунктыСледования = уатЭлектронныеКартыСервер.ПолучитьПунктыСледованияПоМаршруту(Выборка.Ссылка);
		СтруктураМаршрута.мсвПунктыСледования = мсвПунктыСледования;  
		
		Результат.Добавить(СтруктураМаршрута);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеГеозон(МассивГеозон)
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивГеозон", МассивГеозон);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатГеозоны_уэ.Ссылка КАК Ссылка,
	               |	уатГеозоны_уэ.ЦветЗоныХранилище КАК ЦветЗоныХранилище
	               |ИЗ
	               |	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	               |ГДЕ
	               |	уатГеозоны_уэ.Ссылка В(&МассивГеозон)
	               |	И уатГеозоны_уэ.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураГеозоны = Новый Структура("Ссылка, ЦветЗоны, Координаты, УникальныйИдентификатор");
		СтруктураГеозоны.Ссылка = Выборка.Ссылка;
		
		ЦветЗоны = Выборка.ЦветЗоныХранилище.Получить();
		Если ЦветЗоны = Неопределено Тогда 
			СтруктураГеозоны.ЦветЗоны = Новый Цвет(255, 255, 255);
		Иначе 
			СтруктураГеозоны.ЦветЗоны = ЦветЗоны;
		КонецЕсли;
		мсвКоординаты = Новый Массив();
		
		Для Каждого ТекСтрока Из Выборка.Ссылка.Координаты Цикл
			мсвКоординаты.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Лат, ТекСтрока.Лон));
		КонецЦикла;  
		СтруктураГеозоны.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		СтруктураГеозоны.Координаты = мсвКоординаты;
		Результат.Добавить(СтруктураГеозоны);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьПанелей()
	
	ОтображатьПункты       = (Элементы.ОтображатьПункты.Пометка
		И Элементы.ОтображатьПункты.Видимость)
		ИЛИ РежимОткрытия = "РежимКарты_ПунктыНазначения";
	ОтображатьКонтрагентов = (Элементы.ОтображатьКонтрагентов.Пометка
		И Элементы.ОтображатьКонтрагентов.Видимость) 
		ИЛИ РежимОткрытия = "РежимКарты_Контрагенты";
	ОтображатьМаршруты     = (Элементы.ОтображатьМаршруты.Пометка
		И Элементы.ОтображатьМаршруты.Видимость)
		ИЛИ РежимОткрытия = "РежимКарты_Маршруты";	
	ОтображатьЗоны = (Элементы.ОтображатьЗоны.Видимость
		И Элементы.ОтображатьЗоны.Пометка)
		ИЛИ РежимОткрытия = "РежимКарты_Геозоны"; 
	ОтображатьКластеры = (Элементы.ОтображатьКластеры.Видимость
		И Элементы.ОтображатьКластеры.Пометка)
		ИЛИ РежимОткрытия = "РежимКарты_Кластеры";
	ОтображатьТС      = (Элементы.ОтображатьТС.Пометка
		И Элементы.ОтображатьТС.Видимость)
		И НЕ (РежимОткрытия = "РежимКарты_АРМЛогиста"
		ИЛИ РежимОткрытия = "РежимКарты_АРМДиспетчера");
		
	Элементы.ОтображатьПанельПункты.Видимость       = ОтображатьПункты;
	Элементы.ОтображатьПанельКонтрагентов.Видимость = ОтображатьКонтрагентов;
	Элементы.ОтображатьПанельМаршруты.Видимость     = ОтображатьМаршруты;
	Элементы.ОтображатьПанельЗоны.Видимость         = ОтображатьЗоны ИЛИ ОтображатьКластеры;
	Элементы.ОтображатьПанельТС.Видимость           = ОтображатьТС;

	Элементы.ПанельРазделов.Видимость = ОтображатьПункты ИЛИ ОтображатьКонтрагентов
		ИЛИ ОтображатьМаршруты ИЛИ ОтображатьЗоны
		ИЛИ ОтображатьКластеры ИЛИ ОтображатьТС
		ИЛИ Элементы.ОтображатьПанельРасчетМаршрута.Видимость;
		
	Элементы.НастройкаКластеризацииДляОтображенияОтбор.Видимость = Элементы.ОтображатьКластеры.Видимость
		И Элементы.ОтображатьКластеры.Пометка;
	Элементы.ОтборГеозоны.Видимость = Элементы.ОтображатьЗоны.Видимость
		И Элементы.ОтображатьЗоны.Пометка;
		
	Если РежимОткрытия = "РежимКарты_Геозоны" Тогда
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Геозоны'");
	ИначеЕсли РежимОткрытия = "РежимКарты_Кластеры" Тогда
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Кластеры'");
	ИначеЕсли (Элементы.НастройкаКластеризацииДляОтображенияОтбор.Видимость
		И НЕ Элементы.ОтборГеозоны.Видимость
		И Элементы.СтраницыЗон.ТекущаяСтраница = Элементы.ОтборЗоны)
		ИЛИ Элементы.СтраницыЗон.ТекущаяСтраница = Элементы.ПанельКластеры Тогда
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Кластеры'");
	Иначе
		Элементы.ОтображатьПанельЗоны.Заголовок = Нстр("ru = 'Геозоны'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДоступнуюПанель(ТекПанель)
	
	МассивКомандПереключателя = 
		Элементы.ПанельРазделовГруппаПереключателей.ПодчиненныеЭлементы;
	
	Для Каждого ТекСтрока Из МассивКомандПереключателя Цикл
		Если ТекСтрока.Видимость 
			И НЕ ТекПанель = ТекСтрока Тогда
			Если ТекСтрока = Элементы.ОтображатьПанельРасчетМаршрута Тогда
				ОтображатьПанельМаршрутизации(Неопределено);
			ИначеЕсли ТекСтрока = Элементы.ОтображатьПанельПункты Тогда
				ОтображатьПанельПункты(Неопределено);
			ИначеЕсли ТекСтрока = Элементы.ОтображатьПанельКонтрагентов Тогда
				ОтображатьПанельКонтрагентов(Неопределено);
			ИначеЕсли ТекСтрока = Элементы.ОтображатьПанельМаршруты Тогда
				ОтображатьПанельМаршруты(Неопределено);
			ИначеЕсли ТекСтрока = Элементы.ОтображатьПанельЗоны Тогда
				ОтображатьПанельЗоны(Неопределено);
			ИначеЕсли ТекСтрока = Элементы.ОтображатьПанельТС Тогда
				ОтображатьПанельТС(Неопределено);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИконкиОтбора()
	
	ЕстьОтборы = Ложь;
	
	Попытка
		СписокПН = Поиск_СписокПунктов.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Для Каждого ТекОтбор Из СписокПН.Элементы Цикл
			Если ТипЗнч(ТекОтбор) = Тип("ПорядокКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементыОтбор = ТекОтбор.Элементы;
			Для Каждого ТекЭлементыОтбор Из ЭлементыОтбор Цикл
				Если ТекЭлементыОтбор.Использование Тогда
					ЕстьОтборы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОтборы Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Элементы.Отборы_СписокПунктовНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
	Элементы.Поиск_СписокПунктовНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
		
		
	ЕстьОтборы = Ложь;
	
	Попытка
		СписокПН = СписокКонтрагентов.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Для Каждого ТекОтбор Из СписокПН.Элементы Цикл
			Если ТипЗнч(ТекОтбор) = Тип("ПорядокКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементыОтбор = ТекОтбор.Элементы;
			Для Каждого ТекЭлементыОтбор Из ЭлементыОтбор Цикл
				Если ТекЭлементыОтбор.Использование Тогда
					ЕстьОтборы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОтборы Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Элементы.СписокКонтрагентовНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
	Элементы.Отборы_СписокКонтрагентовПунктовНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
		
		
	ЕстьОтборы = Ложь;
	
	Попытка
		СписокПН = Отборы_СписокМаршрутов.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Для Каждого ТекОтбор Из СписокПН.Элементы Цикл
			Если ТипЗнч(ТекОтбор) = Тип("ПорядокКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементыОтбор = ТекОтбор.Элементы;
			Для Каждого ТекЭлементыОтбор Из ЭлементыОтбор Цикл
				Если ТекЭлементыОтбор.Использование Тогда
					ЕстьОтборы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОтборы Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Элементы.СписокМаршрутовНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
	Элементы.Отборы_СписокМаршрутовНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
		
		
	ЕстьОтборы = Ложь;
	
	Попытка
		СписокПН = Отборы_СписокТС.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Для Каждого ТекОтбор Из СписокПН.Элементы Цикл
			Если ТипЗнч(ТекОтбор) = Тип("ПорядокКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементыОтбор = ТекОтбор.Элементы;
			Для Каждого ТекЭлементыОтбор Из ЭлементыОтбор Цикл
				Если ТекЭлементыОтбор.Использование Тогда
					ЕстьОтборы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОтборы Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Элементы.Отборы_СписокМаршрутовНастройкаСписка1.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);
		
		
	ЕстьОтборы = Ложь;
	
	Попытка
		СписокПН = Отборы_СписокГеозон.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Для Каждого ТекОтбор Из СписокПН.Элементы Цикл
			Если ТипЗнч(ТекОтбор) = Тип("ПорядокКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементыОтбор = ТекОтбор.Элементы;
			Для Каждого ТекЭлементыОтбор Из ЭлементыОтбор Цикл
				Если ТекЭлементыОтбор.Использование Тогда
					ЕстьОтборы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОтборы Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Элементы.Отборы_СписокГеозонНастройкаСписка.Картинка = ?(ЕстьОтборы, БиблиотекаКартинок.уатОтборКомпоновкиУстановлен,
		БиблиотекаКартинок.уатОтборКомпоновкиНеУстановлен);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСообщенийКарты

&НаКлиенте
Процедура ОбработатьMapClick(стрОтвет, ТекСтраница)
	Если НЕ (стрОтвет.data.Свойство("lat")
		И стрОтвет.data.Свойство("lng")) Тогда 
		Возврат;
	КонецЕсли;  
	
	Если МаршрутизацияПоАдресамКоординатам = 1
		И ТекСтраница = Элементы.СтраницаМаршрутизации Тогда
		Попытка
			мЛат = Число(СокрЛП(стрОтвет.data.lat));
			мЛон = Число(СокрЛП(стрОтвет.data.lng));
			НоваяСтрока = Маршрут.Добавить();
			НоваяСтрока.НазваниеТочки = уатЭлектронныеКартыКлиент.ПолучитьАдресПоКоординатамOSM(мЛат, мЛон);
			НоваяСтрока.Широта        = мЛат;
			НоваяСтрока.Долгота       = мЛон;
			МаршрутПриИзменении(Неопределено);
		Исключение
		КонецПопытки;
	ИначеЕсли РежимОткрытия = "РежимКарты_ПунктыНазначения"
		И ТекСтраница = Элементы.СтраницаПунктовНазначения
		И Элементы.СтраницыПунктовНазначения.ТекущаяСтраница = Элементы.СтраницаПоиска Тогда
		Поиск_Широта  = стрОтвет.data.lat;
		Поиск_Долгота = стрОтвет.data.lng;
		ПоказатьПунктыНаКарте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьPointClick(стрОтвет)
	Если РежимОткрытия = "РежимКарты_Маршруты" Тогда
		
		Если НЕ Элементы.ПунктыКПодбору.Доступность Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Элементы.ПанельПодбораОсновная.Видимость Тогда
			ДекорацияПодбораНажатие(Неопределено);
		КонецЕсли;
		
		Если НРег(стрОтвет.command) = НРег("ManualRouting") Тогда
			ТекПункт = кэшОбъектыКарты_Отборы.Получить(стрОтвет.data.guid);
		Иначе
			ТекПункт = кэшОбъектыКарты_Отборы.Получить(стрОтвет.guid);
		КонецЕсли;
		
		Если ТекПункт <> Неопределено
			И ЗначениеЗаполнено(ТекПункт.Ссылка)
			И ТипЗнч(ТекПункт.Ссылка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			
			НайдСтроки = ПунктыКПодбору.НайтиСтроки(Новый Структура("Пункт", ТекПункт.Ссылка));
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрока			      = ПунктыКПодбору.Добавить();
				НовСтрока.Пункт           = ТекПункт.Ссылка;
				НовСтрока.ТипТочкиМаршрута = ?(ПунктыКПодбору.Количество() = 1,
				ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),
				ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"));
			КонецЕсли;
			
			мсвМаршруты = ПолучитьДанныеМаршрутов(ОтображаемыйМаршрут);
			Если мсвМаршруты.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			мсвКоординатыДляФокусировки = Новый Массив();
			Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина,
			мсвМаршруты[0].ЦветНаКарте, мсвМаршруты[0].УникальныйИдентификатор,,,, Истина, Ложь);
			
			ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
			ВыделитьНаКарте(ПараметрыКоманды);
		КонецЕсли; 
		
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		
		Если НЕ Элементы.ПанельПодбораОсновная.Видимость Тогда
			ДекорацияПодбораНажатие(Неопределено);
		КонецЕсли;
		
		Если НРег(стрОтвет.command) = НРег("ManualRouting") Тогда
			ТекДокумент = кэшОбъектыКарты.Получить(стрОтвет.data.guid);
		Иначе
			ТекДокумент = кэшОбъектыКарты.Получить(стрОтвет.guid);
		КонецЕсли;
		
		Если ТекДокумент <> Неопределено
			И ЗначениеЗаполнено(ТекДокумент.Ссылка)
			И ТипЗнч(ТекДокумент.Ссылка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			
			Если НЕ ЗначениеЗаполнено(ТСДляПодбораЗаказовВАРМ) Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать ТС из выпадающего списка'"));
				Возврат;
			КонецЕсли;
			
			МассивЗаказовПодбора = Новый Массив();
			МассивЗаказовПодбора.Добавить(ТекДокумент.Ссылка);
			
			ДанныеПодбора = Новый Структура("ТС,GUID,Заказы", ТСДляПодбораЗаказовВАРМ, ТСДляПодбораЗаказовВАРМGUID, МассивЗаказовПодбора);
			
			Если МассивЗаказовПодбора.Количество() <> 0 Тогда
				АРМДиспетчера_ЗаказыКПодбору = МассивЗаказовПодбора[0];
			КонецЕсли;
			
			Оповестить("ЭлектронныеКарты_ПодборЗаказов",
			ДанныеПодбора);
			
		ИначеЕсли ТекДокумент <> Неопределено
			И ЗначениеЗаполнено(ТекДокумент.МЛGUID)
			И ЗначениеЗаполнено(ТекДокумент.ТСGUID) Тогда
			
			Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС", Новый Структура("GUIDТС,GUIDМЛ,ПерестроениеМЛ",
			ТекДокумент.ТСGUID, ТекДокумент.МЛGUID, Истина));
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьDrawObjects(стрОтвет)
	Если РежимОткрытия = "РежимКарты_Маршруты" Тогда
		
		Если НЕ Элементы.ПунктыКПодбору.Доступность Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Элементы.ПанельПодбораОсновная.Видимость Тогда
			ДекорацияПодбораНажатие(Неопределено);
		КонецЕсли;
		
		мсвКоординатДляФокусировки = Новый Массив();
		мсвДляИзменения            = Новый Массив();
		ПодобратьЗаказыПоВыделеннымОбластям(стрОтвет.data, мсвКоординатДляФокусировки, мсвДляИзменения, кэшОбъектыКарты_Отборы);
		
		мсвКоординатДляФокусировки = Новый Массив();
		мсвМаршруты = ПолучитьДанныеМаршрутов(ОтображаемыйМаршрут);
		Если мсвМаршруты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		мсвКоординатыДляФокусировки = Новый Массив();
		Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина,
		мсвМаршруты[0].ЦветНаКарте, мсвМаршруты[0].УникальныйИдентификатор,,,, Истина, Ложь);
			
		
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды);
		
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		
		Если НЕ Элементы.ПанельПодбораОсновная.Видимость Тогда
			ДекорацияПодбораНажатие(Неопределено);
		КонецЕсли;
		
		мсвКоординатДляФокусировки = Новый Массив();
		мсвДляИзменения            = Новый Массив();
		ПодобратьЗаказыПоВыделеннымОбластям(стрОтвет.data, мсвКоординатДляФокусировки, мсвДляИзменения, кэшОбъектыКарты);
		
		ПараметрыКоманды = Новый Структура("КоординатыСтрока", мсвКоординатДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды);
		
		Если НЕ ЗначениеЗаполнено(ТСДляПодбораЗаказовВАРМ) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать ТС из выпадающего списка'"));
			Возврат;
		КонецЕсли;
		
		ДанныеПодбора = Новый Структура("ТС,GUID,Заказы",
		ТСДляПодбораЗаказовВАРМ, ТСДляПодбораЗаказовВАРМGUID, мсвДляИзменения);
		
		Если мсвДляИзменения.Количество() <> 0 Тогда
			АРМДиспетчера_ЗаказыКПодбору = мсвДляИзменения[0];
		КонецЕсли;
		
		Оповестить("ЭлектронныеКарты_ПодборЗаказов",
		ДанныеПодбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьMapDblClick(стрОтвет)
	Если (РежимОткрытия = "РежимКарты_Маршруты" 
		ИЛИ РежимОткрытия = "РежимКарты_АРМЛогиста"
		ИЛИ РежимОткрытия = "РежимКарты_МаршрутныйЛист")
		И РедактироватьМаршрут Тогда
		
		Если РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
			Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
				ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
				ПоказатьПредупреждение(, ТекстНСТР);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ПодборПунктаВМаршрутЗавершение", ЭтотОбъект);
		
		МассивПунктов  = СформироватьМассивПунктовПодбора(РежимОткрытия);
		ПараметрыФормы = Новый Структура("Лат, Лон, КаталогПунктовНаКарте, РежимОткрытия, МассивПунктов", 
		стрОтвет.data.lat, стрОтвет.data.lng, КаталогПунктовНаКарте, РежимОткрытия, МассивПунктов);
		
		ОткрытьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаПодбораПункта", ПараметрыФормы, ЭтотОбъект,,,,Обработчик);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьЗапуститьТрек(стрОтвет)
	Если стрОтвет.code = "1"
		И (РежимОткрытия = "РежимКарты_АРМЛогиста"
		ИЛИ РежимОткрытия = "РежимКарты_АРМДиспетчера") Тогда 
		ТекстНСТР = НСтр("en='For playback of route track, it is neccesary to select a routing list in AWP form';ru='Для проигрывания трека маршрута необходимо выделить маршрутный лист в форме АРМ'");
		ПоказатьПредупреждение(, ТекстНСТР);
	КонецЕсли;
	Трек_ПроигратьПлановыйМаршрутПометка    = Ложь;
	Трек_ПроигратьФактическийМаршрутПометка = Ложь;
	МЗ_ПроигратьПлановыйМаршрутПометка      = Ложь;
	ОбновитьКнопкиПроигрывания();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьTraceRoute(стрОтвет)
	Если Строка(стрОтвет.code) = "0" И стрОтвет.data.Свойство("totalDistance") И стрОтвет.data.Свойство("totalTime") 
		И (стрОтвет.data.Свойство("plan")) Тогда 
		Попытка
			РасстояниеМаршрута = Число(стрОтвет.data.totalDistance);
			ВремяМаршрута      = Число(стрОтвет.data.totalTime);
			
			РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, РасстояниеМаршрута);
			уатЭлектронныеКартыКлиент.СекВДату(ВремяМаршрута,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
			
			НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние / 1000, 2) + " км";
			НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
			+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
			+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
		Исключение
			ТекстНСТР = НСтр("en='Error getting OSM data.';ru='Ошибка при получении данных OSM.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			НадписьРасстояние   = "0 км";
			НадписьДлительность = " 0 дн. 00:00";
		КонецПопытки;
		
	ИначеЕсли стрОтвет.data.Свойство("plan") Тогда
		ТекстНСТР = НСтр("en='Failed to map a route';ru='Не удалось проложить маршрут'");
		Состояние(ТекстНСТР,,, БиблиотекаКартинок.Ошибка32);
		НадписьРасстояние   = "0 км";
		НадписьДлительность = " 0 дн. 00:00";
	КонецЕсли;	
	
	ТекМаршрут = "";
	Если стрОтвет.data.Свойство("waypoints") Тогда
		МассивТочек = СтрРазделить(стрОтвет.data.waypoints, ",");
		Итератор    = 1;
		
		ТекМаршрут = "";
		
		ИтераторСтрок   = 1;
		ПоследняяСтрока = МассивТочек.Количество();
		
		#Если ВебКлиент Тогда
			Для Каждого ТекСтрока Из МассивТочек Цикл
				Если Итератор = 1 Тогда
					ТекМаршрут = ТекМаршрут + "[" + ТекСтрока + ",";
					Итератор  = 2;
				ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
					Итератор = 1;
					ТекМаршрут = ТекМаршрут + ТекСтрока + "]";
				ИначеЕсли Итератор = 2 Тогда	
					Итератор = 1;
					ТекМаршрут = ТекМаршрут + ТекСтрока + "],";
				КонецЕсли;
				ИтераторСтрок = ИтераторСтрок + 1;
			КонецЦикла;
			ТекМаршрут = "[" + ТекМаршрут + "]";
		#Иначе
			
			ТекстПостроитель = Новый ЗаписьXML;
			ТекстПостроитель.УстановитьСтроку();
			ТекстПостроитель.ЗаписатьБезОбработки("[");
			Для Каждого ТекСтрока Из МассивТочек Цикл
				Если Итератор = 1 Тогда
					ТекстПостроитель.ЗаписатьБезОбработки("[");
					ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
					ТекстПостроитель.ЗаписатьБезОбработки(",");
					Итератор  = 2;
				ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
					Итератор = 1;
					ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
					ТекстПостроитель.ЗаписатьБезОбработки("]");
				ИначеЕсли Итератор = 2 Тогда	
					Итератор = 1;
					ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
					ТекстПостроитель.ЗаписатьБезОбработки("],");
				КонецЕсли;
				ИтераторСтрок = ИтераторСтрок + 1;
			КонецЦикла;
			ТекстПостроитель.ЗаписатьБезОбработки("]");
			
			ТекМаршрут = ТекстПостроитель.Закрыть();
			
		#КонецЕсли
	КонецЕсли;
	
	Если стрОтвет.data.Свойство("fact") Тогда
		ФактическийМаршрут = ТекМаршрут;
		
		ФактическоеРасстояние   = НадписьРасстояние;
		ФактическаяДлительность = НадписьДлительность;
		
	ИначеЕсли стрОтвет.data.Свойство("plan") Тогда
		ПлановыйМаршрут    = ТекМаршрут;
		
		ПлановоеРасстояние   = НадписьРасстояние;
		ПлановаяДлительность = НадписьДлительность;
		
	КонецЕсли;
	УстановитьДанныеТрека();
	
КонецПроцедуры

#КонецОбласти

#Область РежимКарты_ТС

&НаКлиенте
Процедура Подключаемый_СписокТСПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.Отборы_СписокТС.ТекущиеДанные;
	ТекущееПоле   = Элементы.Отборы_СписокТС.ТекущийЭлемент;
	ТекущаяСтрока = Элементы.Отборы_СписокТС.ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЭтоГруппа 
		И ТекущееПоле = Элементы.Отборы_СписокТСНаименование Тогда
		Если мсвОтмеченныеТС_Отборы.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда 
			мсвОтмеченныеТС_Отборы.Добавить(ТекущиеДанные.Ссылка);
			
			Отборы_СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС_Отборы);
			Элементы.Отборы_СписокТС.Обновить();
			
		КонецЕсли;
	КонецЕсли;

	Если мсвОтмеченныеТС_Отборы.Найти(ТекущиеДанные.Ссылка) <> Неопределено Тогда 
		ТекМсвОтмеченные = Новый Массив();
		ТекМсвОтмеченные.Добавить(ТекущиеДанные.Ссылка);
		
		мсвТС = уатЭлектронныеКартыСервер.ПолучитьДанныеТС(ТекМсвОтмеченные);
		ОтобразитьТСНаКарте(мсвТС, Истина, РежимАктивацииОтбора); 
		
		Если мсвТС.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ДанныеТС = мсвТС[0];
		
		ПараметрыКоманды = Новый Структура("Широта, Долгота",
		Формат(ДанныеТС.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(ДанныеТС.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
		ВыделитьНаКарте(ПараметрыКоманды);
	Иначе  
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, РежимАктивацииОтбора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СписокТСОтметитьВсеСервер(мсвОтмеченныхПунктов)
	
	Схема     = Элементы.Отборы_СписокТС.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Отборы_СписокТС.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;
	
	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ПолеКомпоновки.Заголовок     = "ЭтоГруппа";
	ПолеКомпоновки.Использование = Истина;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл
		Если ТекПункт.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		мсвОтмеченныхПунктов.Добавить(ТекПункт.Ссылка);
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура ОтобразитьТСНаКарте(мсвТС, ВыводитьНаКарту = Ложь, Отбор = Ложь)
	Для Каждого ДанныеТС Из мсвТС Цикл
		Если Не ДанныеТС.Геокодирован Тогда 
			Продолжить;
		КонецЕсли;

		ТекстНадписи = ДанныеТС.ТекстНадписи;
		
		Картинка = "";
		Если ДанныеТС.ТСЗанято Тогда 
			НомерИконки = 2;
			ЦветСостояния = ДанныеТС.ЦветСостояния;
			Картинка = уатЭлектронныеКартыКлиент.ПолучитьМаркерТС(2,
			ЦветСостояния, ДанныеТС.ИспользуетсяМП, ДанныеТС.ТСНеНаЛинии);
			
		Иначе 
			НомерИконки = 1;
			Картинка = уатЭлектронныеКартыКлиент.ПолучитьМаркерТС(1,,
			ДанныеТС.ИспользуетсяМП, ДанныеТС.ТСНеНаЛинии);
		КонецЕсли;
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ДанныеТС.Лат,
		ДанныеТС.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, НомерИконки, Картинка);
		ПараметрыКоманды.Вставить("Идентификатор", ДанныеТС.УникальныйИдентификатор);
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РежимКарты_ПунктыНазначения

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхПункта(Знач ПунктСсылка)
	
	Результат = Новый Структура("Лат, Лон, СтрокаПоиска", 0, 0, "");
	
	Результат.Лат          = ПунктСсылка.Лат;
	Результат.Лон          = ПунктСсылка.Лон;
	Результат.СтрокаПоиска = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдреса(ПунктСсылка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СписокПунктовПриАктивизацииСтроки()

	Если РежимАктивацииОтбора Тогда
		ТекущиеДанные = Элементы.Отборы_СписокПунктов.ТекущиеДанные;
		ТекущееПоле   = Элементы.Отборы_СписокПунктов.ТекущийЭлемент;
		ТекущаяСтрока = Элементы.Отборы_СписокПунктов.ТекущаяСтрока;
	Иначе
		ТекущиеДанные = Элементы.Поиск_СписокПунктов.ТекущиеДанные;
		ТекущееПоле   = Элементы.Поиск_СписокПунктов.ТекущийЭлемент;
		ТекущаяСтрока = Элементы.Поиск_СписокПунктов.ТекущаяСтрока;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЭтоГруппа 
		И (ТекущееПоле = Элементы.Отборы_СписокПунктовНаименование 
		ИЛИ ТекущееПоле = Элементы.Поиск_СписокПунктовНаименование) Тогда
			
		Если РежимАктивацииОтбора Тогда
			ТекМсвОтмеченныеПункты = мсвОтмеченныеПункты_Отборы;
		Иначе
			ТекМсвОтмеченныеПункты = мсвОтмеченныеПункты;
		КонецЕсли;
		
		Если ТекМсвОтмеченныеПункты.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда 
			ТекМсвОтмеченныеПункты.Добавить(ТекущиеДанные.Ссылка);
			
			Поиск_СписокПунктов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеПункты", ТекМсвОтмеченныеПункты);
			Если РежимАктивацииОтбора Тогда
				Элементы.Отборы_СписокПунктов.Обновить();
			Иначе 
				Элементы.Поиск_СписокПунктов.Обновить();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Поиск_НайденныеАдреса.Очистить();
	
	Если Поиск_ТребуетсяГеокодироватьПункт Тогда
		Поиск_ТребуетсяГеокодироватьПункт = Ложь;
		ГеокодироватьСтрокуПоиска(Неопределено);
	КонецЕсли;

	Поиск_Широта  = ТекущиеДанные.Лат;
	Поиск_Долгота = ТекущиеДанные.Лон;
	Если Поиск_Широта = 0 И Поиск_Долгота = 0 И Поиск_НайденныеАдреса.Количество() > 0 Тогда
		Поиск_Широта  = Поиск_НайденныеАдреса[0].Лат;
		Поиск_Долгота = Поиск_НайденныеАдреса[0].Лон;
	КонецЕсли;
	
	Если РежимАктивацииОтбора Тогда
		ТекМсвОтмеченныеПункты = мсвОтмеченныеПункты_Отборы;
	Иначе
		ТекМсвОтмеченныеПункты = мсвОтмеченныеПункты;
	КонецЕсли;
	
	Поиск_СтрокаПоиска = "";
	Если ТекМсвОтмеченныеПункты.Найти(ТекущиеДанные.Ссылка) <> Неопределено Тогда
		мсвПунктов = ПолучитьДанныеПунктов(ТекущиеДанные.Ссылка, ТипЭлектронныхКарт,,СоответсвиеКартинокТиповПунктов);
		ОтобразитьПунктыНаКарте(мсвПунктов, Истина, РежимАктивацииОтбора); 
		
		Если мсвПунктов.Количество() <> 0 Тогда
			Поиск_СтрокаПоиска = мсвПунктов[0].ЗначениеАдреса;
		КонецЕсли;
		Если Поиск_Широта = 0
			И Поиск_Долгота = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыКоманды = Новый Структура("Широта, Долгота",
			Формат(Поиск_Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(Поиск_Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
		ВыделитьНаКарте(ПараметрыКоманды);
	Иначе  
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, РежимАктивацииОтбора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СписокПунктовОтметитьВсеСервер(мсвОтмеченныхПунктов)
	
	Схема     = Элементы.Поиск_СписокПунктов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Поиск_СписокПунктов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;
	
	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ПолеКомпоновки.Заголовок     = "ЭтоГруппа";
	ПолеКомпоновки.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл
		Если ТекПункт.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		мсвОтмеченныхПунктов.Добавить(ТекПункт.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьКоординатыПункта(ПунктСсылка, Широта, Долгота, ДанныеАдресаDaData, ПредставлениеАдреса)
	
	Если НЕ ТипЗнч(ПунктСсылка) = Тип("СправочникСсылка.уатПунктыНазначения")
		ИЛИ НЕ ЗначениеЗаполнено(ПунктСсылка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПунктОбъект = ПунктСсылка.ПолучитьОбъект();
	Если ПунктОбъект.ЭтоГруппа Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПунктОбъект.Лат = Широта;
	ПунктОбъект.Лон = Долгота;
	
	Если ЗначениеЗаполнено(ДанныеАдресаDaData) Тогда
		ПунктОбъект.Адрес = ПредставлениеАдреса;
		ПунктОбъект.ЗначениеАдреса = уатИнтеграции_проф.ПолучитьЗначениеАдресаПоДаннымDaData(ДанныеАдресаDaData, ПредставлениеАдреса);
	КонецЕсли;
	
	ПунктОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляГрупповогоГеокодирования()
	
	Результат = Новый Структура("Ошибка, ДанныеПунктов", Истина, Новый Массив());
	
	Схема = Элементы.Поиск_СписокПунктов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Поиск_СписокПунктов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;

	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();

	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Лат");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = 0;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Лон");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = 0;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл 
		мсвПунктыДляЗапроса.Добавить(ТекПункт.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвПунктыДляЗапроса", мсвПунктыДляЗапроса);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Ссылка КАК Ссылка,
	|	уатПунктыНазначения.ЗначенияПолейАдреса КАК ЗначенияПолей,
	|	уатПунктыНазначения.Адрес КАК Адрес,
	|	уатПунктыНазначения.ЗначениеАдреса КАК ЗначениеАдреса
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка В(&мсвПунктыДляЗапроса)";
	
	Результат.Ошибка = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Попытка
			Если ЗначениеЗаполнено(Выборка.ЗначениеАдреса) Тогда
				ПредставлениеПолное = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(Выборка.ЗначениеАдреса, Ложь);
			Иначе
				// {Совместимость}
				// Этот код - для совместимости с старым форматом хранения адреса в XML.
				// Как и все использование Выборка.ЗначенияПолей в этой функции
				ПредставлениеПолное = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(Выборка.ЗначенияПолей.Получить(), Ложь);
				// {/Совместимость}
			КонецЕсли;
		Исключение
			ПредставлениеПолное = "";
		КонецПопытки;
		
		Попытка
			Если ЗначениеЗаполнено(Выборка.ЗначениеАдреса) Тогда
				ПредставлениеСокращенное = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(Выборка.ЗначениеАдреса, Истина);
			Иначе
				// {Совместимость}
				// Этот код - для совместимости с старым форматом хранения адреса в XML.
				ПредставлениеСокращенное = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(Выборка.ЗначенияПолей.Получить(), Истина);
				// {/Совместимость}
			КонецЕсли;
		Исключение
			ПредставлениеСокращенное = "";
		КонецПопытки;
		
		ДанныеПункта = Новый Структура();
		ДанныеПункта.Вставить("Ссылка",                   Выборка.Ссылка);
		ДанныеПункта.Вставить("ПредставлениеПолное",      ПредставлениеПолное);
		ДанныеПункта.Вставить("ПредставлениеСокращенное", ПредставлениеСокращенное);
		ДанныеПункта.Вставить("ПредставлениеАдреса",      Выборка.Адрес);
		Результат.ДанныеПунктов.Добавить(ДанныеПункта);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеДляГрупповогоГеокодирования()

&НаСервереБезКонтекста
Функция СоздатьНовыйПункт(Широта, Долгота, ДанныеАдресаDaData, ПредставлениеАдреса)
	
	ПунктОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
	
	ПунктОбъект.Лат = Широта;
	ПунктОбъект.Лон = Долгота;
	ПунктОбъект.Наименование = ПредставлениеАдреса;
	ПунктОбъект.Адрес = ПредставлениеАдреса;
	Если ЗначениеЗаполнено(ДанныеАдресаDaData) Тогда
		ПунктОбъект.ЗначениеАдреса = уатИнтеграции_проф.ПолучитьЗначениеАдресаПоДаннымDaData(ДанныеАдресаDaData, ПредставлениеАдреса);
	Иначе
		ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
		ДанныеАдресаJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, ВидКИ);
		ПунктОбъект.ЗначениеАдреса = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеАдресаJSON);
	КонецЕсли;
	ПунктОбъект.УстановитьСлучайныйЦветПункта();
	ПунктОбъект.Страна = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	
	ПунктОбъект.Записать();
	Возврат ПунктОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область РежимКарты_ЗаказГрузоотправителя

&НаКлиенте
Процедура УдалитьВсеТочкиМаршрута()
	
	МаршрутПоАдресам.Очистить();
	Маршрут.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутПоАдресамИзЗаказа(ЗаказНаТС);
	МаршрутМультимодальногоЗаказа.Очистить();
	Если ЗаказНаТС.Мультимодальный
		И НЕ ЗаказНаТС.ЭтоЭтап Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ЗаказНаТС);
			
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
			|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ВидПеревозки КАК ЭтапВидПеревозки,
			|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
			|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан
			|ИЗ
			|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
			|ГДЕ
			|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
			|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа";
		РезультатЗапроса = Запрос.Выполнить();
		
		ПредТочка = Неопределено;
		Индекс     = 0;
		ПредИндекс = 0;
		Если РезультатЗапроса.Пустой() Тогда
			ВидПеревозки = ЗаказНаТС.ВидПеревозки;
			НоваяСтрока  = МаршрутПоАдресам.Добавить();
			НоваяСтрока.Адрес			 = ЗаказНаТС.АдресОтправления;
			НоваяСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
			НоваяСтрока.ЗаказНаТС		 = ЗаказНаТС;
			
			НоваяСтрока = МаршрутПоАдресам.Добавить();
			НоваяСтрока.Адрес			 = ЗаказНаТС.АдресНазначения;
			НоваяСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
			НоваяСтрока.ЗаказНаТС		 = ЗаказНаТС;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекЗаказНаТС = Выборка.Этап;
				ВидПеревозки = Выборка.ЭтапВидПеревозки;
				
				Если ТекЗаказНаТС.FTL Тогда
					ИндексСтроки = 1;
					Для Каждого ТекСтрока Из ТекЗаказНаТС.ПромежуточныеПункты Цикл
						
						Если ИндексСтроки = 1 Тогда
							НоваяСтрокаМаршрут = МаршрутМультимодальногоЗаказа.Добавить();
							НоваяСтрокаМаршрут.ПунктПогрузки	   = ТекСтрока.Пункт;
							НоваяСтрокаМаршрут.ВидПеревозки	       = ?(ЗначениеЗаполнено(ВидПеревозки),
								ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
							НоваяСтрокаМаршрут.ЗаказНаТС		   = ТекЗаказНаТС;
							НоваяСтрокаМаршрут.ДатаОтправленияПлан = ТекСтрока.ПрибытиеПлан;
							НоваяСтрокаМаршрут.ИндексПогрузки      = ?(ПредТочка = ТекСтрока.Пункт, ПредИндекс, ПредИндекс + 1);
						ИначеЕсли ИндексСтроки = ТекЗаказНаТС.ПромежуточныеПункты.Количество() Тогда 
							НоваяСтрокаМаршрут.ПунктРазгрузки	   = ТекСтрока.Пункт;
							НоваяСтрокаМаршрут.ДатаПрибытияПлан    = ТекСтрока.УбытиеПлан;
							НоваяСтрокаМаршрут.ИндексРазгрузки     = НоваяСтрокаМаршрут.ИндексПогрузки + ИндексСтроки - 1;
							НоваяСтрокаМаршрут.Время               = ТекЗаказНаТС.Время;
							НоваяСтрокаМаршрут.Расстояние          = ТекЗаказНаТС.Расстояние;
							
							ПредИндекс = НоваяСтрокаМаршрут.ИндексРазгрузки;
						КонецЕсли;

						Если ПредТочка = ТекСтрока.Пункт Тогда
							НоваяСтрока = МаршрутПоАдресам[Индекс - 1];
							НоваяСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
							НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
							НоваяСтрока.ЗаказНаТС		 = ТекЗаказНаТС;
							ПредТочка = Неопределено;
							
							ИндексСтроки = ИндексСтроки + 1;
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = МаршрутПоАдресам.Добавить();
						НоваяСтрока.Адрес			 = ТекСтрока.Пункт;
						НоваяСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
						НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
						НоваяСтрока.ЗаказНаТС		 = ТекЗаказНаТС;
							
						Индекс = Индекс + 1;
						ИндексСтроки = ИндексСтроки + 1;
					КонецЦикла;
					
					Если ТекЗаказНаТС.ПромежуточныеПункты.Количество() <> 0 Тогда
						ПредТочка = ТекЗаказНаТС.ПромежуточныеПункты[ТекЗаказНаТС.ПромежуточныеПункты.Количество() - 1].Пункт;
					КонецЕсли;
				Иначе
					Если ПредТочка = ТекЗаказНаТС.АдресОтправления Тогда
						НоваяСтрока = МаршрутПоАдресам[Индекс - 1];
						НоваяСтрока.ТипТочкиМаршрута  = Перечисления.уатТипыТочекМаршрута.Погрузка;
						НоваяСтрока.ВидПеревозки	  = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
						НоваяСтрока.ЗаказНаТС		  = ТекЗаказНаТС;
					Иначе
						НоваяСтрока = МаршрутПоАдресам.Добавить();
						НоваяСтрока.Адрес			  = ТекЗаказНаТС.АдресОтправления;
						НоваяСтрока.ТипТочкиМаршрута  = Перечисления.уатТипыТочекМаршрута.Погрузка;
						НоваяСтрока.ВидПеревозки	  = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
						НоваяСтрока.ЗаказНаТС		  = ТекЗаказНаТС;
						Индекс = Индекс + 1;
					КонецЕсли;
					
					НоваяСтрока = МаршрутПоАдресам.Добавить();
					НоваяСтрока.Адрес			  = ТекЗаказНаТС.АдресНазначения;
					НоваяСтрока.ТипТочкиМаршрута  = Перечисления.уатТипыТочекМаршрута.Разгрузка;
					НоваяСтрока.ВидПеревозки	  = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
					НоваяСтрока.ЗаказНаТС		  = ТекЗаказНаТС;

					НоваяСтрока = МаршрутМультимодальногоЗаказа.Добавить();
					НоваяСтрока.ПунктПогрузки	  = ТекЗаказНаТС.АдресОтправления;
					НоваяСтрока.ПунктРазгрузки	  = ТекЗаказНаТС.АдресНазначения;
					НоваяСтрока.ВидПеревозки	  = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
					НоваяСтрока.ЗаказНаТС		  = ТекЗаказНаТС;
					НоваяСтрока.ДатаОтправленияПлан = Выборка.ДатаОтправленияПлан;
					НоваяСтрока.ДатаПрибытияПлан    = Выборка.ДатаПрибытияПлан;
					НоваяСтрока.ИндексПогрузки      = ?(ПредТочка = ТекЗаказНаТС.АдресОтправления, ПредИндекс, ПредИндекс + 1);
					НоваяСтрока.ИндексРазгрузки     = НоваяСтрока.ИндексПогрузки + 1;
					НоваяСтрока.Время               = ТекЗаказНаТС.Время;
					НоваяСтрока.Расстояние          = ТекЗаказНаТС.Расстояние;
					
					ПредИндекс = НоваяСтрока.ИндексРазгрузки;
					
					Индекс = Индекс + 1;
					
					ПредТочка = ТекЗаказНаТС.АдресНазначения;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ЗаказНаТС.FTL Тогда
		ВидПеревозки = ЗаказНаТС.ВидПеревозки;
		
		Для Каждого ТекСтрока Из ЗаказНаТС.ПромежуточныеПункты Цикл
			НоваяСтрока = МаршрутПоАдресам.Добавить();
			НоваяСтрока.Адрес			 = ТекСтрока.Пункт;
			НоваяСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
			НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
			НоваяСтрока.ЗаказНаТС		 = ЗаказНаТС;
		КонецЦикла;
	Иначе
		
		ВидПеревозки = ЗаказНаТС.ВидПеревозки;
		НоваяСтрока = МаршрутПоАдресам.Добавить();
		НоваяСтрока.Адрес			 = ЗаказНаТС.АдресОтправления;
		НоваяСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
		НоваяСтрока.ЗаказНаТС		 = ЗаказНаТС;

		НоваяСтрока = МаршрутПоАдресам.Добавить();
		НоваяСтрока.Адрес			 = ЗаказНаТС.АдресНазначения;
		НоваяСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НоваяСтрока.ВидПеревозки	 = ?(ЗначениеЗаполнено(ВидПеревозки), ВидПеревозки, Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая);
		НоваяСтрока.ЗаказНаТС		 = ЗаказНаТС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаршрутПоАдресу(ТекСтрока, СчТочек, FTLЗаказ = Истина, ВыводитьНаКарту = Ложь)
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.ТипТочкиМаршрута) Тогда
		ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.Адрес) Тогда 
		ТекСтрока.Широта  = 0;
		ТекСтрока.Долгота = 0;
		Возврат;
	КонецЕсли;
	
	стрДанныеПункта = ПолучитьСтруктуруДанныхПункта(ТекСтрока.Адрес);
	
	Если стрДанныеПункта.Лат = 0 И стрДанныеПункта.Лон = 0 Тогда 
		ТекстОшибкиOSM = "";
		мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрДанныеПункта.СтрокаПоиска,, ТекстОшибкиOSM);
		Если ТекстОшибкиOSM = "" Тогда 
			стрДанныеПункта.Лат = мсвКоординат.Лат;
			стрДанныеПункта.Лон = мсвКоординат.Лон;
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиOSM,,"МаршрутПоАдресам["+Формат(МаршрутПоАдресам.Индекс(ТекСтрока), "ЧДЦ=; ЧН=0; ЧГ=0")+"].Адрес");
		КонецЕсли;
	КонецЕсли;
	
	ТекСтрока.Широта  = стрДанныеПункта.Лат;
	ТекСтрока.Долгота = стрДанныеПункта.Лон; 
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.УникальныйИдентификатор) Тогда
		ТекСтрока.УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	мсвКоординатыДляФокусировки = Новый Массив();
	мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Широта, ТекСтрока.Долгота));
	
	ТекстНСТР_1 = НСтр("en='Departure point:';ru='Адрес:'");
	АдресНадпись = "<strong>" + ТекстНСТР_1 + "</strong> " + Строка(ТекСтрока.Адрес);
	
	ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекСтрока.Широта,
	ТекСтрока.Долгота, АдресНадпись, КластеризацияМаркеровНаКарте, "8",
	?(FTLЗаказ,
	уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, 0, 0, 255),
	уатЭлектронныеКартыКлиент.ПолучитьМаркерПункта(СчТочек, 0, 0, 255)));
	ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
	ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
	
КонецПроцедуры

#КонецОбласти

#Область РежимКарты_Геозоны

&НаКлиенте
Процедура Подключаемый_СписокГеозонПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.Отборы_СписокГеозон.ТекущиеДанные;
	ТекущееПоле   = Элементы.Отборы_СписокГеозон.ТекущийЭлемент;
	ТекущаяСтрока = Элементы.Отборы_СписокГеозон.ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЭтоГруппа 
		И ТекущееПоле = Элементы.Отборы_СписокГеозонНаименование Тогда
		Если мсвОтмеченныеГеозоны_Отборы.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда 
			мсвОтмеченныеГеозоны_Отборы.Добавить(ТекущиеДанные.Ссылка);
			
			Отборы_СписокГеозон.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеГеозоны", мсвОтмеченныеГеозоны_Отборы);
			Элементы.Отборы_СписокТС.Обновить();
			
		КонецЕсли;
	КонецЕсли;

	Если мсвОтмеченныеГеозоны_Отборы.Найти(ТекущиеДанные.Ссылка) <> Неопределено Тогда 
		ТекМсвОтмеченные = Новый Массив();
		ТекМсвОтмеченные.Добавить(ТекущиеДанные.Ссылка);
		
		мсвГеозон = ПолучитьДанныеГеозон(ТекМсвОтмеченные);
		ОтобразитьГеозоныНаКарте(мсвГеозон, Истина, Истина); 
		
		УстановитьФокусНаЗонеКарты();
	Иначе  
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонПроставитьПометкиРекурсивно(КоллекцияОбхода, Знач ЗначениеПометки)
	
	Для Каждого ТекУзел Из КоллекцияОбхода Цикл 
		ТекУзел.Отобразить = ЗначениеПометки;
		ПодчиненныеУзлы = ТекУзел.ПолучитьЭлементы();
		Если ПодчиненныеУзлы.Количество() Тогда 
			СписокГеозонПроставитьПометкиРекурсивно(ПодчиненныеУзлы, ЗначениеПометки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеЗон(КоллекцияОбхода = Неопределено)
	
	Если КоллекцияОбхода = Неопределено Тогда
		КоллекцияОбхода = СписокГеозон;
	КонецЕсли;
	
	Для Каждого ТекЗона Из КоллекцияОбхода.ПолучитьЭлементы() Цикл 
		Если ТекЗона.ПолучитьЭлементы().Количество() Тогда 
			ЗаписатьДанныеЗон(ТекЗона);
		КонецЕсли;
		ЗаписатьДанныеЗоны(ТекЗона, ТекЗона.Координаты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеЗоны(ЗонаСтрока, Знач Координаты)
	
	ЗонаСсылка = ЗонаСтрока.Ссылка;
	
	Если Не ЗначениеЗаполнено(ЗонаСсылка) Тогда
		ЗонаОб = Справочники.уатГеозоны_уэ.СоздатьЭлемент();
		ЗонаОб.Наименование		 = ЗонаСтрока.Наименование;
		ЗонаОб.ЦветЗоныХранилище = Новый ХранилищеЗначения(ЗонаСтрока.ЦветЗоны, Новый СжатиеДанных(9));
		Для Каждого ТекТочка Из Координаты Цикл
			НовТочка = ЗонаОб.Координаты.Добавить();
			ЗаполнитьЗначенияСвойств(НовТочка, ТекТочка);
		КонецЦикла;
	Иначе
		
		Если ЗонаСсылка.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		ЗонаОб = ЗонаСсылка.ПолучитьОбъект();
		ЗонаОб.Наименование = ЗонаСтрока.Наименование;
		ЗонаОб.Координаты.Очистить();
		
		Для Каждого ТекТочка Из Координаты Цикл 
			НовТочка = ЗонаОб.Координаты.Добавить();
			ЗаполнитьЗначенияСвойств(НовТочка, ТекТочка);
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ЗонаОб.Записать();
		
		ЗонаСтрока.Ссылка             = ЗонаОб.Ссылка;
		ЗонаСтрока.ПредставлениеНовой = "";
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while writing coordinate of zone <%1>.';ru='Возникла ошибка при записи координт зоны <%1>.'");
		ТекстОшибки = СтрШаблон(ТекстНСТР, ЗонаСсылка) + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьНовуюГеозону(КоординатыЗоны)
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.Координаты.Количество() = 0
		И НЕ ЭтоГруппаГеозон(ТекущиеДанные.Ссылка) Тогда
		Если НЕ ТекущиеДанные.Отобразить Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СписокГеозонОбновитьКоординатыГеозоны(КоординатыЗоны, "");
		
		ПараметрыКоманды = Новый Структура("id", "");
		КомандаСкрипта = ПолучитьСтрокуКомандуКарты("deleteObject", ПараметрыКоманды, ЯндексКарты);
		HTMLobj.evalJSFunc(КомандаСкрипта);
		Возврат Неопределено;
	КонецЕсли;
		
	НоваяГеозона = СписокГеозон.ПолучитьЭлементы().Добавить();
	НоваяГеозона.Наименование  = Нстр("en = 'New geofence'; ru = 'Новая геозона'");
	НоваяГеозона.ПредставлениеНовой = НоваяГеозона.Наименование + " " + Нстр("en = '(Not recorded)'; ru = '(Не записана)'");
	НоваяГеозона.ЦветЗоны           = УстановитьСлучайныйЦветГеозоны();
	НоваяГеозона.НомерКартинки      = 3;
	Для Каждого ТекСтрока Из КоординатыЗоны Цикл
		ТекКоординаты = НоваяГеозона.Координаты.Добавить();
		ТекКоординаты.Лат = ТекСтрока.Лат;
		ТекКоординаты.Лон = ТекСтрока.Лон;
	КонецЦикла;
	НоваяГеозона.GUID					 = Новый УникальныйИдентификатор();
	НоваяГеозона.Отобразить				 = Истина;
	Элементы.СписокГеозон.ТекущаяСтрока	 = НоваяГеозона.ПолучитьИдентификатор();
	
	РаскраситьНовуюГеозону(НоваяГеозона.GUID, НоваяГеозона.ЦветЗоны,НоваяГеозона.Наименование);
	
	ПараметрыКоманды = Новый Структура("id", "");
	КомандаСкрипта = ПолучитьСтрокуКомандуКарты("deleteObject", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
	Возврат НоваяГеозона;
	
КонецФункции

&НаСервере
Процедура РаскраситьНовуюГеозону(GUID, ЦветЗоны, НаименованиеЗоны)
	
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокГеозон.GUID");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = GUID;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЗоны);
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	ЭлементУсловногоОформления.Представление = НСтр("en='Color of zone';ru='Цвет зоны'") + " " + НаименованиеЗоны;
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокГеозонЦвет");
	ПолеОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьСлучайныйЦветГеозоны()
	
	ЦветГеозоны = уатЗащищенныеФункцииСервер_проф.СлучайноеЧисло(, 15);
	
	Если ЦветГеозоны = 0 Тогда 
		ЦветГеозоны = 16;
	КонецЕсли;
	
	ЦветГеозоны = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(ЦветГеозоны);
	
	Возврат ЦветГеозоны;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоГруппаГеозон(ГеозонаСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ГеозонаСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГеозоны_уэ.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	уатГеозоны_уэ.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ЭтоГруппа;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЭтоГруппаГеозон()

&НаКлиенте
Процедура СписокГеозонОбновитьКоординатыГеозоны(КоординатыЗоны, GUID = "")
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GUID) Тогда 
		ТекСтрЗоны = НайтиСтрокуГеозоныПОGUID(GUID, СписокГеозон);
	Иначе
		ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекСтрЗоны = НайтиСтрокуГеозоныПОGUID(ТекущиеДанные.GUID, СписокГеозон);
	КонецЕсли;

	Если ТекСтрЗоны = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрЗоны.Ссылка)
		И ЭтоГруппаГеозон(ТекСтрЗоны.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрЗоны.Координаты.Очистить();
	
	Для Каждого ТекКоордината Из КоординатыЗоны Цикл 
		НовСтрокаКоординат = ТекСтрЗоны.Координаты.Добавить();
		НовСтрокаКоординат.Лат = ТекКоордината.Лат;
		НовСтрокаКоординат.Лон = ТекКоордината.Лон;
	КонецЦикла;
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(ТекСтрЗоны);
	ОтобразитьЗоныНаКарте(,Истина,,МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуГеозоныПОGUID(GUID, ТекСписокГеозон)
	ТекСтрЗоны = Неопределено;
	Для Каждого ТекСтрока Из ТекСписокГеозон.ПолучитьЭлементы() Цикл
		Если ТекСтрЗоны <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ТекСтрока.ПолучитьЭлементы().Количество() Тогда
			ТекСтрЗоны = НайтиСтрокуГеозоныПОGUID(GUID, ТекСтрока);
		ИначеЕсли ТекСтрока.GUID = GUID Тогда
			ТекСтрЗоны = ТекСтрока;
			ТекСтрЗоны.ПредставлениеНовой = ТекСтрЗоны.Наименование + " " + Нстр("en = '(Not recorded)'; ru = '(Не записана)'");
			Возврат ТекСтрЗоны;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекСтрЗоны;
КонецФункции

&НаКлиенте
Процедура ОтобразитьЗоныНаКарте(ОтображатьКластеры = Ложь, ВыводитьНаКарту = Ложь, СтрокаФокуса = "", МассивСтрок = Неопределено)
	
	мсвКоординатыДляФокусировки = Новый Массив();
	
	Если РежимОтображенияГеозоныКластеры = 1 
		ИЛИ ОтображатьКластеры Тогда
		
		ФлагОтображатьКластеры = Элементы.ОтображатьКластеры.Видимость
			И Элементы.ОтображатьКластеры.Пометка;
		ФлагОтображатьКластеры = ?(Элементы.СтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаЗон
			И РежимОтображенияГеозоныКластеры = 1, Ложь, ФлагОтображатьКластеры);

		Если ФлагОтображатьКластеры Тогда
			НастройкаКластеризации = ТекНастройкаКластеризацииДляОтображения;
		Иначе
			НастройкаКластеризации = НастройкаКластеризацииДляОтображения;
		КонецЕсли;
		ОтобразитьКластерыНаКарте(мсвКоординатыДляФокусировки, НастройкаКластеризации, ВыводитьНаКарту, ФлагОтображатьКластеры);
	Иначе  
		УдалятьЗоны = Ложь;
		Если МассивСтрок = Неопределено Тогда
			МассивЗон = СписокГеозон.ПолучитьЭлементы();
		Иначе
			МассивЗон   = МассивСтрок; 
			УдалятьЗоны = Истина;
		КонецЕсли;
		ОтобразитьКоллекциюЗонНаКартеРекурсивно(МассивЗон, мсвКоординатыДляФокусировки, ВыводитьНаКарту, УдалятьЗоны);
		УстановитьФокусНаЗонеКарты(ВыводитьНаКарту, СтрокаФокуса);
	КонецЕсли;
	
	Если мсвКоординатыДляФокусировки.Количество() Тогда   
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, ВыводитьНаКарту);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоллекциюЗонНаКартеРекурсивно(Знач КоллекцияОбхода, мсвКоординатыДляФокусировки, ВыводитьНаКарту = Ложь, УдалятьЗоны = Ложь)
	
	Для Каждого ТекЗона Из КоллекцияОбхода Цикл 
		Если ТекЗона.Отобразить = 0 Тогда
			Если УдалятьЗоны Тогда
				ПараметрыКоманды = Новый Структура();
				ПараметрыКоманды.Вставить("Идентификатор", ТекЗона.GUID);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, ВыводитьНаКарту);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		КрасныйЦвет = ?(ТекЗона.ЦветЗоны.Красный=-1, 255, ТекЗона.ЦветЗоны.Красный);
		ЗеленыйЦвет = ?(ТекЗона.ЦветЗоны.Зеленый=-1, 255, ТекЗона.ЦветЗоны.Зеленый);
		СинийЦвет   = ?(ТекЗона.ЦветЗоны.Синий=-1,   255, ТекЗона.ЦветЗоны.Синий);
		
		мсвКоординат = "";
		Для Каждого ТекТочка Из ТекЗона.Координаты Цикл 
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекТочка.Лат, ТекТочка.Лон));
			стрКоординаты = "[" + Формат(ТекТочка.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," + Формат(ТекТочка.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "]";
			мсвКоординат  = мсвКоординат + ?(мсвКоординат="", стрКоординаты, "," + стрКоординаты);
		КонецЦикла;
		
		ЦветЗоныСтр = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(КрасныйЦвет, ЗеленыйЦвет, СинийЦвет);
		
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Координаты",     мсвКоординат);
		ПараметрыКоманды.Вставить("ЦветЗоны",       ЦветЗоныСтр);
		ПараметрыКоманды.Вставить("Редактирование", "true"); 
		ПараметрыКоманды.Вставить("Идентификатор",  ТекЗона.GUID);
		ОбработатьКомандуКарты("showPolygon", ПараметрыКоманды, ВыводитьНаКарту);
		
		ОтобразитьКоллекциюЗонНаКартеРекурсивно(ТекЗона.ПолучитьЭлементы(), мсвКоординатыДляФокусировки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКластерыНаКарте(мсвКоординатыДляФокусировки, НастройкаКластеризации, ВыводитьНаКарту = Ложь, Отбор = Ложь)
	
	КластерыДляОтображения = уатЗащищенныеФункцииСервер_уэ.ПолучитьКластерыДляОтображенияНаКарте(НастройкаКластеризации);
	
	Для Каждого ТекКластер Из КластерыДляОтображения Цикл 
		КрасныйЦвет = ?(ТекКластер.Цвет.Красный=-1, 255, ТекКластер.Цвет.Красный);
		ЗеленыйЦвет = ?(ТекКластер.Цвет.Зеленый=-1, 255, ТекКластер.Цвет.Зеленый);
		СинийЦвет   = ?(ТекКластер.Цвет.Синий=-1,   255, ТекКластер.Цвет.Синий);
		
		мсвКоординат = "";
		Для Каждого ТекТочка Из ТекКластер.Координаты Цикл 
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекТочка.Лат, ТекТочка.Лон));
			стрКоординаты = "[" + Формат(ТекТочка.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," + Формат(ТекТочка.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "]";
			мсвКоординат  = мсвКоординат + ?(мсвКоординат="", стрКоординаты, "," + стрКоординаты);
		КонецЦикла;
		
		ЦветКластераСтр = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(КрасныйЦвет, ЗеленыйЦвет, СинийЦвет);
		
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Координаты",     мсвКоординат);
		ПараметрыКоманды.Вставить("ЦветЗоны",       ЦветКластераСтр);
		ПараметрыКоманды.Вставить("Редактирование", "false");
		ПараметрыКоманды.Вставить("Идентификатор",  ТекКластер.Идентификатор);
		ОбработатьКомандуКарты("showPolygon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокГеозонОтметитьВсеСервер(мсвОтмеченныхГеозон)
	
	Схема     = Элементы.Отборы_СписокГеозон.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Отборы_СписокГеозон.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;
	
	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл 
		мсвОтмеченныхГеозон.Добавить(ТекПункт.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонПроставитьПометкиВниз(ТекущиеДанные, МассивСтрок)
	
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Отобразить;
	МассивСтрок.Добавить(ТекущиеДанные);
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отобразить = Значение;
		МассивСтрок.Добавить(Потомок);
		СписокГеозонПроставитьПометкиВниз(Потомок, МассивСтрок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГеозонПроставитьПометкиВверх(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Не Родитель = Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для Каждого Потомок Из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Отобразить = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Отобразить);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Отобразить = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Отобразить = 2;
		Иначе
			Родитель.Отобразить = 0;
		КонецЕсли;
		СписокГеозонПроставитьПометкиВверх(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьГеозоныНаКарте(мсвГеозон, ВыводитьНаКарту = Ложь, Отбор = Ложь)

	Для Каждого ТекЗона Из мсвГеозон Цикл 
		
		КрасныйЦвет = ?(ТекЗона.ЦветЗоны.Красный = -1, 255, ТекЗона.ЦветЗоны.Красный);
		ЗеленыйЦвет = ?(ТекЗона.ЦветЗоны.Зеленый = -1, 255, ТекЗона.ЦветЗоны.Зеленый);
		СинийЦвет   = ?(ТекЗона.ЦветЗоны.Синий = -1,   255, ТекЗона.ЦветЗоны.Синий);
		
		мсвКоординат = "";
		
		#Если ВебКлиент Тогда
			Для Каждого ТекТочка Из ТекЗона.Координаты Цикл 
				стрКоординаты = "[" + Формат(ТекТочка.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," + Формат(ТекТочка.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "]";
				мсвКоординат  = мсвКоординат + ?(мсвКоординат="", стрКоординаты, "," + стрКоординаты);
			КонецЦикла;
		#Иначе
			ТекстПостроитель = Новый ЗаписьXML;
			ТекстПостроитель.УстановитьСтроку();
			
			Индекс = 0;
			Для Каждого ТекТочка Из ТекЗона.Координаты Цикл 
				Если Индекс <> 0 Тогда
					ТекстПостроитель.ЗаписатьБезОбработки(",");
				КонецЕсли;
				
				ТекстПостроитель.ЗаписатьБезОбработки("[");
				ТекстПостроитель.ЗаписатьБезОбработки(Формат(ТекТочка.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
				ТекстПостроитель.ЗаписатьБезОбработки(",");
				ТекстПостроитель.ЗаписатьБезОбработки(Формат(ТекТочка.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
				ТекстПостроитель.ЗаписатьБезОбработки("]");
				
				Индекс = Индекс + 1;
			КонецЦикла;
			
			мсвКоординат = ТекстПостроитель.Закрыть();
		#КонецЕсли
		
		ЦветЗоныСтр = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(КрасныйЦвет, ЗеленыйЦвет, СинийЦвет);
		
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Координаты",     мсвКоординат);
		ПараметрыКоманды.Вставить("ЦветЗоны",       ЦветЗоныСтр);
		ПараметрыКоманды.Вставить("Редактирование", "false");
		ПараметрыКоманды.Вставить("Идентификатор", ТекЗона.УникальныйИдентификатор);
		ОбработатьКомандуКарты("showPolygon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаЗонеКарты(ВыводитьНаКарту = Истина, СтрокаФокуса = "")
	
	Если РежимОткрытия = "РежимКарты_Геозоны" Тогда
		ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ЭтоГруппа = ЗначениеЗаполнено(ТекущиеДанные.Ссылка) И ПолучитьЗначениеРеквизита(ТекущиеДанные.Ссылка, "ЭтоГруппа");
		Если ТекущиеДанные.Отобразить 
			И НЕ ЭтоГруппа Тогда
			КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("selectLayer", Новый Структура("Идентификатор", ТекущиеДанные.GUID), ЯндексКарты);  
			СтрокаФокуса = КомандаСкрипта;
			Если ВыводитьНаКарту
				И НЕ КартыНеДоступны() Тогда
				HTMLobj.evalJSFunc(КомандаСкрипта);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.Отборы_СписокГеозон.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ЭтоГруппа = ЗначениеЗаполнено(ТекущиеДанные.Ссылка) И ПолучитьЗначениеРеквизита(ТекущиеДанные.Ссылка, "ЭтоГруппа");
		Если ТекущиеДанные.ФлагВыбора 
			И НЕ ЭтоГруппа
			И НЕ КартыНеДоступны() Тогда
			КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("selectLayer", Новый Структура("Идентификатор", Строка(ТекущиеДанные.УникальныйИдентификатор)), ЯндексКарты);
			HTMLobj.evalJSFunc(КомандаСкрипта);
		КонецЕсли;

	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПереключитьРежимГеозоныКластеры()
	
	Если РежимОтображенияГеозоныКластеры = 1 Тогда 
		Элементы.НастройкаКластеризацииДляОтображения.Видимость = Истина;
		Элементы.СписокГеозон.Видимость                         = Ложь;
		Элементы.СписокГеозонКоординаты.Видимость               = Ложь;
		
	Иначе 
		Элементы.НастройкаКластеризацииДляОтображения.Видимость = Ложь;
		Элементы.СписокГеозон.Видимость                         = Истина;
		Элементы.СписокГеозонКоординаты.Видимость               = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокГеозонСервер(ВыбраннаяЗона=Неопределено)
	
	ДеревоГеозон = РеквизитФормыВЗначение("СписокГеозон", Тип("ДеревоЗначений"));
	
	ДеревоГеозон.Строки.Очистить();
	
	мЗапрос = Новый Запрос;
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГеозоны_уэ.Родитель КАК Родитель,
	|	уатГеозоны_уэ.Ссылка КАК Ссылка,
	|	уатГеозоны_уэ.Наименование КАК Наименование,
	|	уатЗоны_уэКоординаты.Лат КАК Лат,
	|	уатЗоны_уэКоординаты.Лон КАК Лон,
	|	уатЗоны_уэКоординаты.Комментарий КАК Комментарий,
	|	уатГеозоны_уэ.ЦветЗоныХранилище КАК ЦветЗоныХранилище,
	|	ВЫБОР
	|		КОГДА уатЗоны_уэКоординаты.Лат ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКоординаты,
	|	ВЫБОР
	|		КОГДА уатГеозоны_уэ.Родитель = ЗНАЧЕНИЕ(Справочник.уатГеозоны_уэ.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокГрупп,
	|	уатГеозоны_уэ.Родитель.Наименование КАК РодительНаименование
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГеозоны_уэ.Координаты КАК уатЗоны_уэКоординаты
	|		ПО (уатЗоны_уэКоординаты.Ссылка = уатГеозоны_уэ.Ссылка)
	|ГДЕ
	|	уатГеозоны_уэ.ЭтоГруппа = ЛОЖЬ
	|	И НЕ уатГеозоны_уэ.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокГрупп,
	|	РодительНаименование,
	|	Наименование,
	|	уатЗоны_уэКоординаты.НомерСтроки";
	
	ВыборкаЗон = мЗапрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗон.Следующий() Цикл 
		УзелВставки = ПолучитьСоздатьРодительскийУзел(ВыборкаЗон.Родитель, ДеревоГеозон);
		
		НайдСтроки = УзелВставки.Строки.НайтиСтроки(Новый Структура("Ссылка", ВыборкаЗон.Ссылка), Истина);
		Если НайдСтроки.Количество() = 0 Тогда 
			НайдСтр = УзелВставки.Строки.Добавить();
			НайдСтр.Ссылка        = ВыборкаЗон.Ссылка;
			НайдСтр.Наименование  = ВыборкаЗон.Наименование;
			НайдСтр.НомерКартинки = 3;
			НайдСтр.Отобразить    = 0;
			НайдСтр.GUID          = ВыборкаЗон.Ссылка.УникальныйИдентификатор();
			ЦветЗоны = ВыборкаЗон.ЦветЗоныХранилище.Получить();
			Если ЦветЗоны = Неопределено Тогда 
				НайдСтр.ЦветЗоны = Новый Цвет(255, 255, 255);
			Иначе 
				НайдСтр.ЦветЗоны = ЦветЗоны;
			КонецЕсли;
			
			НайдСтр.Координаты.Колонки.Добавить("Лат",         Новый ОписаниеТипов("Число"));
			НайдСтр.Координаты.Колонки.Добавить("Лон",         Новый ОписаниеТипов("Число"));
			НайдСтр.Координаты.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
			
		Иначе 
			НайдСтр = НайдСтроки.Получить(0);
		КонецЕсли;
		
		Если ВыборкаЗон.ЕстьКоординаты Тогда 
			НовКоордината = НайдСтр.Координаты.Добавить();
			НовКоордината.Лат         = ВыборкаЗон.Лат;
			НовКоордината.Лон         = ВыборкаЗон.Лон;
			НовКоордината.Комментарий = ВыборкаЗон.Комментарий;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВыбраннаяЗона = Неопределено Тогда 
		НайдСтрока = ДеревоГеозон.Строки.Найти(ВыбраннаяЗона, "Ссылка", Истина);
		Если Не НайдСтрока = Неопределено Тогда 
			НайдСтрока.Отобразить = 1;
			стрОбхода = НайдСтрока;
			Пока Истина Цикл 
				ТекРодитель = стрОбхода.Родитель;
				Если ТекРодитель = Неопределено Тогда 
					Прервать;
				КонецЕсли;
				ТекРодитель.Отобразить = 2;
				стрОбхода = стрОбхода.Родитель;
			КонецЦикла;
			УстановитьПометкиДереваЗонРекурсивно(НайдСтрока.Строки, 1);
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоГеозон, "СписокГеозон");
	
	РаскраситьСписокГеозон();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоздатьРодительскийУзел(Знач РодительСсылка, ДеревоЗон)
	
	Если РодительСсылка = Справочники.уатГеозоны_уэ.ПустаяСсылка() Тогда 
		Возврат ДеревоЗон;
	КонецЕсли;
	
	НайдУзлы = ДеревоЗон.Строки.НайтиСтроки(Новый Структура("Ссылка", РодительСсылка));
	Если НайдУзлы.Количество() Тогда 
		Возврат НайдУзлы.Получить(0);
	Иначе 
		КорневойУзел = ПолучитьСоздатьРодительскийУзел(РодительСсылка.Родитель, ДеревоЗон);
		НовУзел = КорневойУзел.Строки.Добавить();
		НовУзел.Ссылка        = РодительСсылка.Ссылка;
		НовУзел.Наименование  = РодительСсылка.Наименование;
		НовУзел.НомерКартинки = 0;
		НовУзел.Отобразить    = 0;
		
		Возврат НовУзел;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьПометкиДереваЗонРекурсивно(КоллекцияСтрок, Знач Пометка)
	
	Для Каждого ТекСтрока Из КоллекцияСтрок Цикл 
		Если ТекСтрока.Строки.Количество() Тогда 
			УстановитьПометкиДереваЗонРекурсивно(ТекСтрока.Строки, Пометка);
		КонецЕсли;
		ТекСтрока.Отобразить = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьСписокГеозон()
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для Каждого ЭлементУсловногоОформления Из ЭтотОбъект.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ЭтотОбъект.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГеозоны_уэ.Ссылка,
	|	уатГеозоны_уэ.Наименование,
	|	уатГеозоны_уэ.ЦветЗоныХранилище
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	уатГеозоны_уэ.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		хзЦветФона = ВыборкаЦвета.ЦветЗоныХранилище;
		Если хзЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ЦветФона = хзЦветФона.Получить();
		Если ЦветФона = Неопределено Или Не ТипЗнч(ЦветФона) = Тип("Цвет") Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокГеозон.Ссылка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='Color of zone';ru='Цвет зоны'") + " " + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокГеозонЦвет");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗонЗавершение(Результат, ДопПараметры) Экспорт
	
	Ссылка = ДопПараметры.Ссылка;
	
	ОбновитьСписокЗонЗавершениеСервер(Ссылка);
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.Отобразить Тогда 
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив(); 
	МассивСтрок.Добавить(ТекущиеДанные);
	ОтобразитьЗоныНаКарте(,Истина,, МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗонЗавершениеСервер(Ссылка)
	
	Для Каждого ТекСтрока Из СписокГеозон.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Ссылка = Ссылка Тогда
			ТекСтрока.GUID = ?(ЗначениеЗаполнено(ТекСтрока.GUID), ТекСтрока.GUID, Новый УникальныйИдентификатор());
			ТекСтрока.Наименование = Ссылка.Наименование;
			Если НЕ ТекСтрока.Ссылка.ЭтоГруппа Тогда
				ЦветЗоны = Ссылка.ЦветЗоныХранилище.Получить();
				Если ЦветЗоны = Неопределено Тогда 
					ТекСтрока.ЦветЗоны = Новый Цвет(255, 255, 255);
				Иначе 
					ТекСтрока.ЦветЗоны = ЦветЗоны;
				КонецЕсли;
			КонецЕсли;

			ТекСтрока.Координаты.Очистить();
			Для Каждого ТекТочка Из Ссылка.Координаты Цикл 
				НовТочка = ТекСтрока.Координаты.Добавить();
				НовТочка.Лат         = ТекТочка.Лат;
				НовТочка.Лон         = ТекТочка.Лон;
				НовТочка.Комментарий = ТекТочка.Комментарий;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РаскраситьСписокГеозон();
	
КонецПроцедуры

#КонецОбласти

#Область РежимКарты_Контрагенты

&НаКлиенте
Процедура Подключаемый_СписокКонтрагентовПриАктивизацииСтроки()

	Если РежимАктивацииОтбора Тогда
		ТекущиеДанные = Элементы.Отборы_СписокКонтрагентов.ТекущиеДанные;
		ТекущееПоле   = Элементы.Отборы_СписокКонтрагентов.ТекущийЭлемент;
		ТекущаяСтрока = Элементы.Отборы_СписокКонтрагентов.ТекущаяСтрока;
	Иначе
		ТекущиеДанные = Элементы.СписокКонтрагентов.ТекущиеДанные;
		ТекущееПоле   = Элементы.СписокКонтрагентов.ТекущийЭлемент;
		ТекущаяСтрока = Элементы.СписокКонтрагентов.ТекущаяСтрока;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЭтоГруппа 
		И (ТекущееПоле = Элементы.Отборы_СписокКонтрагентовНаименование 
		ИЛИ ТекущееПоле = Элементы.СписокКонтрагентовНаименование) Тогда 
		Если мсвОтмеченныеКонтрагенты.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда 
			Если РежимАктивацииОтбора Тогда
				ТекМсвОтмеченныеКонтрагенты = мсвОтмеченныеКонтрагенты_Отборы;
			Иначе
				ТекМсвОтмеченныеКонтрагенты = мсвОтмеченныеКонтрагенты;
			КонецЕсли;
			ТекМсвОтмеченныеКонтрагенты.Добавить(ТекущиеДанные.Ссылка);
			СписокКонтрагентов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеКонтрагенты", ТекМсвОтмеченныеКонтрагенты);
			Если РежимАктивацииОтбора Тогда
				Элементы.Отборы_СписокКонтрагентов.Обновить();
			Иначе 
				Элементы.СписокКонтрагентов.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимАктивацииОтбора Тогда
		ТекМсвОтмеченныеОбъекты = мсвОтмеченныеКонтрагенты_Отборы;
	Иначе
		ТекМсвОтмеченныеОбъекты = мсвОтмеченныеКонтрагенты;
	КонецЕсли;
	
	Если ТекМсвОтмеченныеОбъекты.Найти(ТекущиеДанные.Ссылка) <> Неопределено Тогда   
		мсвКонтрагентов = ПолучитьДанныеКонтрагентов(ТекущиеДанные.Ссылка);
		ОтобразитьКонтрагентовНаКарте(мсвКонтрагентов, Истина, РежимАктивацииОтбора); 
		
		Если мсвКонтрагентов.Количество() <> 0 Тогда
			Лат  = мсвКонтрагентов[0].Лат;
			Лон  = мсвКонтрагентов[0].Лон;
			
			Если Лат = 0
				И Лон = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыКоманды = Новый Структура("Широта, Долгота",
			Формат(Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
			ВыделитьНаКарте(ПараметрыКоманды);
		КонецЕсли;
	Иначе  
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, РежимАктивацииОтбора);
	КонецЕсли;
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКонтрагентовНаКарте(мсвКонтрагентов, ВыводитьНаКарту = Ложь, Отбор = Ложь, ТекущиеКонтрагент = Неопределено, СтрокаФокуса = "")
	
	ПараметрыКоманды = Новый Структура("Широта, Долгота", 0, 0);
	Для Каждого ТекКонтрагент Из мсвКонтрагентов Цикл 
		Если НЕ ТекКонтрагент.Геокодирован Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстНадписи = ТекКонтрагент.ТекстНадписи;
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекКонтрагент.Лат,
		ТекКонтрагент.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, "8",
		уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(БиблиотекаКартинок.уатКартаКонтрагент, "png", СоответсвиеКартинок)); 
		
		ПараметрыКоманды.Вставить("Идентификатор", ТекКонтрагент.УникальныйИдентификатор);
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
		
		Если ТекКонтрагент.Ссылка = ТекущиеКонтрагент Тогда
			ПараметрыКоманды = Новый Структура("Широта, Долгота",
			Формат(ТекКонтрагент.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(ТекКонтрагент.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")); 
			ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, ВыводитьНаКарту);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокКонтрагентовОтметитьВсеСервер(мсвОтмеченныхПунктов)
	
	Схема     = Элементы.СписокКонтрагентов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокКонтрагентов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;
	
	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ПолеКомпоновки.Заголовок     = "ЭтоГруппа";
	ПолеКомпоновки.Использование = Истина;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл
		Если ТекПункт.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		мсвОтмеченныхПунктов.Добавить(ТекПункт.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтрагентовНаКарте(ВыводитьНаКарту = Истина, СтрокаФокуса = "")
	
	Если мсвОтмеченныеКонтрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеКонтрагент = Элементы.СписокКонтрагентов.ТекущиеДанные;
	Если ТипЗнч(Элементы.СписокКонтрагентов.ТекущаяСтрока)
		= Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущиеДанные = Неопределено;
	КонецЕсли;
	
	мсвКонтрагентов = ПолучитьДанныеКонтрагентов(мсвОтмеченныеКонтрагенты);	
	ОтобразитьКонтрагентовНаКарте(мсвКонтрагентов, ВыводитьНаКарту, Ложь,
		?(ТекущиеКонтрагент <> Неопределено, ТекущиеКонтрагент.Ссылка, ТекущиеКонтрагент), СтрокаФокуса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоординатыФокусировкиКонтрагента(ДанныеКонтрагента)
	
	Результат = Новый Структура("Лат, Лон", 0, 0);
	
	Если ТипЗнч(ДанныеКонтрагента) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеКонтрагента);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПунктыНазначения.Лат КАК Лат,
		|	уатПунктыНазначения.Лон КАК Лон
		|ИЗ
		|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		|ГДЕ
		|	уатПунктыНазначения.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Результат.Лат = Выборка.Лат;
			Результат.Лон = Выборка.Лон;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеКонтрагента) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеКонтрагента);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатПунктыНазначения.Лат КАК Лат,
		|	уатПунктыНазначения.Лон КАК Лон,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		|		ПО КонтрагентыПунктыНазначения.ПунктНазначения = уатПунктыНазначения.Ссылка
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатПунктыНазначения.Лат,
		|	уатПунктыНазначения.Лон,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		|		ПО КонтрагентыПунктыНазначения.ПунктНазначения = уатПунктыНазначения.Ссылка
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Результат.Лат = Выборка.Лат;
			Результат.Лон = Выборка.Лон;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьКоординатыФокусировкиКонтрагента()

#КонецОбласти

#Область Маршруты  

 &НаСервере
Процедура СписокМаршрутовОтметитьВсеСервер(мсвОтмеченныхМаршрутов)
	
	Схема     = Элементы.Отборы_СписокМаршрутов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Отборы_СписокМаршрутов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;
	
	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ПолеКомпоновки.Заголовок     = "ЭтоГруппа";
	ПолеКомпоновки.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл
		Если ТекПункт.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		мсвОтмеченныхМаршрутов.Добавить(ТекПункт.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокМаршрутовПриАктивизацииСтроки()
	
	Если РежимАктивацииОтбора Тогда
		ТекущиеДанные = Элементы.Отборы_СписокМаршрутов.ТекущиеДанные;
		ТекущееПоле   = Элементы.Отборы_СписокМаршрутов.ТекущийЭлемент;
		ТекущаяСтрока = Элементы.Отборы_СписокМаршрутов.ТекущаяСтрока;
	Иначе
		ТекущиеДанные = Элементы.СписокМаршрутов.ТекущиеДанные;
		ТекущееПоле   = Элементы.СписокМаршрутов.ТекущийЭлемент;
		ТекущаяСтрока = Элементы.СписокМаршрутов.ТекущаяСтрока;
	КонецЕсли;

	Если ТекущиеДанные = Неопределено
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущийМаршрут                           = Неопределено;
		ТекущееПредставлениеМаршрутаОднимПунктом = Ложь;
		ПунктыКПодбору.Очистить();
		
		Элементы.ГруппаПодборПунктовКоманды.Доступность = ТекущееПредставлениеМаршрутаОднимПунктом;
		Элементы.ПунктыКПодбору.Доступность             = ТекущееПредставлениеМаршрутаОднимПунктом;
		Элементы.ГруппаПодборПунктовПарные.Видимость    = НЕ ТекущееПредставлениеМаршрутаОднимПунктом;
		
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Ссылка <> ТекущийМаршрут 
		ИЛИ ТекущееПредставлениеМаршрутаОднимПунктом <> ТекущиеДанные.ПредставлениеМаршрутаОднимПунктом) Тогда
		
		ТекущийМаршрут = ТекущиеДанные.Ссылка;
		ТекущееПредставлениеМаршрутаОднимПунктом = ТекущиеДанные.ПредставлениеМаршрутаОднимПунктом;
	
		ПунктыКПодбору.Очистить();
		ЗаполнитьПунктыСледованияТекМаршрута(ТекущийМаршрут);
	Иначе
		ТекущийМаршрут = ТекущиеДанные.Ссылка;
		ТекущееПредставлениеМаршрутаОднимПунктом = ТекущиеДанные.ПредставлениеМаршрутаОднимПунктом;
	КонецЕсли;

	Элементы.ГруппаПодборПунктовКоманды.Доступность = ТекущееПредставлениеМаршрутаОднимПунктом;
	Элементы.ПунктыКПодбору.Доступность             = ТекущееПредставлениеМаршрутаОднимПунктом;
	Элементы.ГруппаПодборПунктовПарные.Видимость    = НЕ ТекущееПредставлениеМаршрутаОднимПунктом;


	МассивМаршрут = Новый Массив(); 
	Если НЕ ТекущиеДанные.ЭтоГруппа 
		И (ТекущееПоле = Элементы.Отборы_СписокМаршрутовНаименование 
		ИЛИ ТекущееПоле = Элементы.СписокМаршрутовСсылка) Тогда
		Если РежимАктивацииОтбора Тогда
			ТекМсвОтмеченныеМаршруты = мсвОтмеченныеМаршруты_Отборы;
		Иначе
			ТекМсвОтмеченныеМаршруты = мсвОтмеченныеМаршруты;
		КонецЕсли;
		
		МассивМаршрут.Добавить(ТекущиеДанные.Ссылка);
		Если ТекМсвОтмеченныеМаршруты.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда 
			ТекМсвОтмеченныеМаршруты.Добавить(ТекущиеДанные.Ссылка);
			Отборы_СписокМаршрутов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеМаршруты", ТекМсвОтмеченныеМаршруты);
			Если РежимАктивацииОтбора Тогда
				Элементы.Отборы_СписокМаршрутов.Обновить();
			Иначе 
				Элементы.СписокМаршрутов.Обновить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимАктивацииОтбора Тогда
		ТекМсвОтмеченныеПункты = мсвОтмеченныеМаршруты_Отборы;
	Иначе
		ТекМсвОтмеченныеПункты = мсвОтмеченныеМаршруты;
	КонецЕсли;
	
	Если НЕ КартаЗагружена Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекМсвОтмеченныеПункты.Найти(ТекущиеДанные.Ссылка) <> Неопределено Тогда
		мсвМаршруты = ПолучитьДанныеМаршрутов(ТекущиеДанные.Ссылка);
		ОтобразитьМаршрутыНаКарте(мсвМаршруты, Истина, РежимАктивацииОтбора); 
		
		Если мсвМаршруты.Количество() <> 0 Тогда
			мсвКоординатыДляФокусировки = Новый Массив();
			мсвПунктыСледования = мсвМаршруты[0].мсвПунктыСледования;
			Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
				Если ТекПункт.Лат = 0 И ТекПункт.Лон = 0 Тогда 
					Продолжить;
				КонецЕсли; 
				мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
			КонецЦикла;
			
			ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
			ВыделитьНаКарте(ПараметрыКоманды);
		КонецЕсли;
	Иначе
		МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(ТекущиеДанные.Ссылка);
		Если МассивИдентификаторов <> Неопределено Тогда
			Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
				ПараметрыКоманды = Новый Структура();
				ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, РежимАктивацииОтбора);  
			КонецЦикла;
			МассивИдентификаторов = Новый Массив();
			СоответсвиеИдентификаторовМаршрута.Удалить(ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПунктыСледованияТекМаршрута(ТекМаршрут)
	
	Если НЕ ТекущееПредставлениеМаршрутаОднимПунктом Тогда
		 Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТекМаршрут.Этапы Цикл
		НовСтрока			       = ПунктыКПодбору.Добавить();
		НовСтрока.Пункт            = ТекСтрока.ПунктОтправления;
		НовСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочиМаршрута;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьМаршрутыНаКарте(мсвМаршруты, ВыводитьНаКарту = Ложь, Отбор = Ложь)
	
	мсвКоординатыДляФокусировки = Новый Массив();
	МассивМаршрутов             = Новый Массив();
	Для Каждого ТекМаршрут Из мсвМаршруты Цикл
		ОтображаемыйМаршрут = ТекМаршрут.Ссылка;
		Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина,
		ТекМаршрут.ЦветНаКарте, ТекМаршрут.УникальныйИдентификатор,
		ТекМаршрут.мсвПунктыСледования, МассивМаршрутов,, ВыводитьНаКарту, Отбор);
	КонецЦикла;
	
	РассчитатьМаршрут(МассивМаршрутов, ЯндексКарты);
	Для Каждого ТекПараметрыКоманды Из МассивМаршрутов Цикл
		
		МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(ТекПараметрыКоманды.Маршрут); 
		Если МассивИдентификаторов = Неопределено Тогда
			МассивИдентификаторов = Новый Массив();
		КонецЕсли;  		
		ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
		МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор); 
		СоответсвиеИдентификаторовМаршрута.Вставить(ТекПараметрыКоманды.Маршрут, МассивИдентификаторов);

		ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
		ОбработатьКомандуКарты("traceRoute", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор); 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМаршрутыНаКарте(ВыводитьНаКарту = Истина, СтрокаФокуса = "")
	
	мсвКоординатыДляФокусировки = Новый Массив();
	
	мсвМаршруты = ПолучитьДанныеМаршрутов(мсвОтмеченныеМаршруты);
	Для Каждого ТекМаршрут Из мсвМаршруты Цикл 
		ОтображаемыйМаршрут = ТекМаршрут.Ссылка;
		Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина, ТекМаршрут.ЦветНаКарте, ТекМаршрут.УникальныйИдентификатор,
			ТекМаршрут.мсвПунктыСледования,,,ВыводитьНаКарту, Ложь);
	КонецЦикла;
	
	Если Трек_ОтображатьПлановыйМаршрут Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки); 
		ВыделитьНаКарте(ПараметрыКоманды,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоординатыФактическогоМаршрута(Знач ОбъектСсылка, Знач ДатаС, Знач ДатаПо, Знач ИсточникПунктовДляФактТрека)
	
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьКоординатыФактическогоМаршрута(ОбъектСсылка, ДатаС, ДатаПо, ИсточникПунктовДляФактТрека);
	
КонецФункции // ПолучитьКоординатыФактическогоМаршрута()

&НаКлиенте
Процедура Транспорт_ОтобразитьФактическийМаршрутНаКарте(мсвКоординатыДляФокусировки, ЦветМаршрута = Неопределено, ВыводитьНаКарту = Ложь, Отбор = Ложь)
	
	Если Трек_ОтображатьПоДокументу 
		И ТипЗнч(Трек_МаршрутныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") 
		И ПроверятьОткрытиеФормы Тогда
		ПараметрыФормы = Новый Структура("Ключ", Трек_МаршрутныйДокумент);
		ФормаМЛ = ПолучитьФорму("Документ.уатМаршрутныйЛист.ФормаОбъекта", ПараметрыФормы);
		Если ФормаМЛ.Открыта() Тогда
			ТекМаршрутныйДокумент = ФормаМЛ.Объект;
		Иначе
			ТекМаршрутныйДокумент = Трек_МаршрутныйДокумент;
		КонецЕсли;
	Иначе
		ТекМаршрутныйДокумент = Трек_МаршрутныйДокумент;
	КонецЕсли;

	МассивИдентификаторов = СоответсвиеИдентификаторовФактМаршрута.Получить(ТекМаршрутныйДокумент); 
	Если МассивИдентификаторов <> Неопределено Тогда
		Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
			ПараметрыКоманды = Новый Структура();
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, Отбор);
		КонецЦикла;  
		МассивИдентификаторов = Новый Массив();
	Иначе
		МассивИдентификаторов = Новый Массив();
	КонецЕсли;
	
	КоординатыФактическогоМаршрута = ПолучитьКоординатыФактическогоМаршрута(
		?(Трек_ОтображатьПоДокументу, ТекМаршрутныйДокумент, Трек_ТранспортноеСредство), 
		Трек_ПериодМаршрутаС, 
		Трек_ПериодМаршрутаПо,
		Трек_ИсточникПунктов
	);
	
	мсвКоординат = "";
	мсвСтрокКоординат = Новый Массив;
	ПредыдущаяШирота = 0;
	ПредыдущаяДолгота = 0;
	
	МассивТочек = Новый Массив();
	Для Каждого ТекКоордината Из КоординатыФактическогоМаршрута.КоординатыТрека Цикл
		Если (ТекКоордината.Лат = 0 И ТекКоордината.Лон = 0)
			ИЛИ (ПредыдущаяШирота = ТекКоордината.Лат И ПредыдущаяДолгота = ТекКоордината.Лон) Тогда 
			Продолжить;
		КонецЕсли;
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекКоордината.Лат, ТекКоордината.Лон));
		ПредыдущаяШирота = ТекКоордината.Лат;
		ПредыдущаяДолгота = ТекКоордината.Лон;
		стрТекКоордината = "["+Формат(ТекКоордината.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекКоордината.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
		мсвСтрокКоординат.Добавить(стрТекКоордината);
		МассивТочек.Добавить(Формат(ТекКоордината.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
		МассивТочек.Добавить(Формат(ТекКоордината.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
	КонецЦикла;
	мсвКоординат = СтрСоединить(мсвСтрокКоординат, ",");
	
	Итератор   = 1;
	ТекМаршрут = "";
	
	ИтераторСтрок   = 1;
	ПоследняяСтрока = МассивТочек.Количество();
	#Если ВебКлиент Тогда
		Для Каждого ТекСтрока Из МассивТочек Цикл
			Если Итератор = 1 Тогда
				ТекМаршрут = ТекМаршрут + "[" + ТекСтрока + ",";
				Итератор  = 2;
			ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
				Итератор = 1;
				ТекМаршрут = ТекМаршрут + ТекСтрока + "]";
			ИначеЕсли Итератор = 2 Тогда	
				Итератор = 1;
				ТекМаршрут = ТекМаршрут + ТекСтрока + "],";
			КонецЕсли;
			ИтераторСтрок = ИтераторСтрок + 1;
		КонецЦикла;
		ТекМаршрут = "[" + ТекМаршрут + "]";
	#Иначе
		
		ТекстПостроитель = Новый ЗаписьXML;
		ТекстПостроитель.УстановитьСтроку();
		ТекстПостроитель.ЗаписатьБезОбработки("[");
		Для Каждого ТекСтрока Из МассивТочек Цикл
			Если Итератор = 1 Тогда
				ТекстПостроитель.ЗаписатьБезОбработки("[");
				ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
				ТекстПостроитель.ЗаписатьБезОбработки(",");
				Итератор  = 2;
			ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
				Итератор = 1;
				ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
				ТекстПостроитель.ЗаписатьБезОбработки("]");
			ИначеЕсли Итератор = 2 Тогда	
				Итератор = 1;
				ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
				ТекстПостроитель.ЗаписатьБезОбработки("],");
			КонецЕсли;
			ИтераторСтрок = ИтераторСтрок + 1;
		КонецЦикла;
		ТекстПостроитель.ЗаписатьБезОбработки("]");
		
		ТекМаршрут = ТекстПостроитель.Закрыть();
	#КонецЕсли
	
	ФактическийМаршрут = ТекМаршрут;
			
	Если Не мсвКоординат = "" Тогда 
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление",
				мсвКоординат, "'#000000'", "5",  "true");  
		ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
		МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
		ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
		
		ПараметрыКоманды = Новый Структура("Координаты", мсвКоординат);
	КонецЕсли;
	
	мсвПунктов = Новый Массив();
	Для Каждого ТекПункт Из КоординатыФактическогоМаршрута.ДанныеПунктов Цикл
		Если ТекПункт.Свойство("Пункт") Тогда
			мсвПунктов.Добавить(ТекПункт.Пункт);
		КонецЕсли;
	КонецЦикла;
	
	мсвПунктов = ПолучитьДанныеПунктов(мсвПунктов, ТипЭлектронныхКарт, ЦветМаршрута, СоответсвиеКартинок);
	
	СоответствиеПунктов = Новый Соответствие();
	Для Каждого ТекПункт Из мсвПунктов Цикл
		СоответствиеПунктов.Вставить(ТекПункт.Ссылка,
			Новый Структура("Картинка, ТипПункта, ТипПунктаСлужебный",
				ТекПункт.Картинка, ТекПункт.ТипПункта, ТекПункт.ТипПунктаСлужебный));
	КонецЦикла;

	// Сначала отобразим промежуточные точки
	СчТочки = 1;
	МассивЗначащихТочек = Новый Массив();
	Для Каждого ТекПункт Из КоординатыФактическогоМаршрута.ДанныеПунктов Цикл 
		
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
		
		Если ТекПункт.Свойство("ЕстьЗаказы")
			И НЕ ТекПункт.ЕстьЗаказы Тогда 
			ДанныеПункта = СоответствиеПунктов.Получить(ТекПункт.Пункт);
			Если НЕ ЗначениеЗаполнено(ТекПункт.Пункт)
				ИЛИ ДанныеПункта <> Неопределено
				ИЛИ ДанныеПункта.ТипПунктаСлужебный Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОтображаемыеТочки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПункт);
		
			Маркер = уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(ДанныеПункта.Картинка,
				"svg+xml", СоответсвиеКартинок);
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекПункт.Лат,
			ТекПункт.Лон, ТекПункт.ТекстНадписи, КластеризацияМаркеровНаКарте, "9",
			Маркер);
			
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
		Иначе  
			НоваяСтрока = ОтображаемыеТочки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПункт);
		
			Маркер  = уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочки, 0, 0, 0, ТекПункт.ЦветФона);
			
			СчТочки = СчТочки + 1;
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекПункт.Лат,
			ТекПункт.Лон, ТекПункт.ТекстНадписи, КластеризацияМаркеровНаКарте, "9",
			Маркер);

			МассивЗначащихТочек.Добавить(ПараметрыКоманды);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПараметрыКоманды Из МассивЗначащихТочек Цикл
		ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
		МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
		ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
		
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
	КонецЦикла;  
	
	СоответсвиеИдентификаторовФактМаршрута.Вставить(ТекМаршрутныйДокумент, МассивИдентификаторов); 
	
КонецПроцедуры

&НаКлиенте
Процедура Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, ОтображениеЭлемента = Ложь,
	ЦветНаКарте = Неопределено, ТекПунктУникальныйИдентификатор = "",
	мсвПунктыСледования = Неопределено, МассивМаршрутов = Неопределено,
	План = Ложь, ВыводитьНаКарту = Ложь, Отбор = Ложь)
	
	Если ЦветНаКарте = Неопределено Тогда
		ЦветНаКарте   = Новый Цвет(135, 34, 221);
		ЦветМаршрута  = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(135, 34, 221);
	Иначе
		ЦветМаршрута  = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ЦветНаКарте.Красный, ЦветНаКарте.Зеленый, ЦветНаКарте.Синий);
	КонецЕсли;
	ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.АвтомобильнаяГрузовая");
	
	Если мсвПунктыСледования = Неопределено Тогда
		Если ОтображениеЭлемента
			И ТекущееПредставлениеМаршрутаОднимПунктом
			И ОтображаемыйМаршрут = ТекущийМаршрут Тогда
			
			мсвПукнтов = Новый Массив();
			Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
				мсвПукнтов.Добавить(Новый Структура("Пункт, ТипТочкиМаршрута",
				ТекСтрока.Пункт,
				ТекСтрока.ТипТочкиМаршрута));
			КонецЦикла;
			мсвПунктыСледования = ПолучитьПунктыСледованияПоМаршруту(мсвПукнтов);
		Иначе
			Если НЕ ОтображениеЭлемента Тогда
				
				Если Трек_ОтображатьПоДокументу 
					И ТипЗнч(Трек_МаршрутныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") 
					И ПроверятьОткрытиеФормы Тогда
					ПараметрыФормы = Новый Структура("Ключ", Трек_МаршрутныйДокумент);
					ФормаМЛ = ПолучитьФорму("Документ.уатМаршрутныйЛист.ФормаОбъекта", ПараметрыФормы);
					Если ФормаМЛ.Открыта() Тогда
						ТекМаршрутныйДокумент = ФормаМЛ.Объект;
						ВидПеревозки          = ПолучитьЗначениеРеквизита(ТекМаршрутныйДокумент.Ссылка, "ВидПеревозки");
					Иначе
						ТекМаршрутныйДокумент = Трек_МаршрутныйДокумент;
						ВидПеревозки        = ПолучитьЗначениеРеквизита(ТекМаршрутныйДокумент, "ВидПеревозки");
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Трек_МаршрутныйДокумент) Тогда
					ТекМаршрутныйДокумент = Трек_МаршрутныйДокумент;
					ВидПеревозки          = ПолучитьЗначениеРеквизита(ТекМаршрутныйДокумент, "ВидПеревозки");
				КонецЕсли;
				мсвПунктыСледования = уатЗащищенныеФункцииСервер_проф.ПолучитьПунктыСледования(ТекМаршрутныйДокумент);
				
			Иначе
				мсвПунктыСледования = уатЭлектронныеКартыСервер.ПолучитьПунктыСледованияПоМаршруту(ОтображаемыйМаршрут);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если мсвПунктыСледования.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ГеокодироватьАдреса(мсвПунктыСледования);
	
	ТочкиМаршрута = Новый Массив();
	мсвКоординат  = "";
	
	ПараметрыТрассировки = "";
	Для Сч = 0 По мсвПунктыСледования.Количество() - 1 Цикл 
		ТекПунктСтарт = мсвПунктыСледования[Сч];
		
		Если ТекПунктСтарт.Лат = 0 И ТекПунктСтарт.Лон = 0 Тогда 
			Если ЗначениеЗаполнено(ТекПунктСтарт.Пункт) Тогда 
				ТекстНСТР = НСтр("en='For ""%1"" could not determine the coordinates.';ru='Для пункта ""%1"" не удалось определить координаты.'");
				ТекстОшибки = СтрШаблон(ТекстНСТР, ТекПунктСтарт.Пункт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		мсвКоординат = мсвКоординат + ?(мсвКоординат = "", "", ",") + 
			"[" + Формат(ТекПунктСтарт.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," +
			Формат(ТекПунктСтарт.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
			
		ТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ТекПунктСтарт.Лат, ТекПунктСтарт.Лон));
		
	КонецЦикла;
	
	мсвПунктов = Новый Массив();
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл
		мсвПунктов.Добавить(ТекПункт.Пункт);
	КонецЦикла;
	
	мсвПунктов = ПолучитьДанныеПунктов(мсвПунктов, ТипЭлектронныхКарт, ЦветНаКарте, СоответсвиеКартинок);
	
	СоответствиеПунктов = Новый Соответствие();
	Для Каждого ТекПункт Из мсвПунктов Цикл
		СоответствиеПунктов.Вставить(ТекПункт.Ссылка,
			Новый Структура("Картинка, ТипПункта, ТипПунктаСлужебный",
				ТекПункт.Картинка, ТекПункт.ТипПункта, ТекПункт.ТипПунктаСлужебный));
	КонецЦикла;
	
	СчТочки  = 1;
	СчПункта = 1;
	МассивЗначащихТочек   = Новый Массив();
	МассивИдентификаторов = Новый Массив();
	
	Если ОтображениеЭлемента Тогда
		ТекОбъект = ОтображаемыйМаршрут;
	Иначе
		Если ЗначениеЗаполнено(Трек_МаршрутныйДокумент) Тогда
			ТекОбъект = Трек_МаршрутныйДокумент;
		Иначе
			ТекОбъект = ОтображаемыйМаршрут;
		КонецЕсли;
	КонецЕсли;

	МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(ОтображаемыйМаршрут); 
	Если МассивИдентификаторов <> Неопределено Тогда
		Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
			ПараметрыКоманды = Новый Структура();
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, Отбор);
		КонецЦикла;
		МассивИдентификаторов = Новый Массив();
	Иначе
		МассивИдентификаторов = Новый Массив();
	КонецЕсли;

	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТекПункт.Лат = 0 И ТекПункт.Лон = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ОтображаемыеТочки.Количество() >= СчТочки 
			И ОтображаемыеТочки[СчТочки - 1].Лат = ТекПункт.Лат
			И ОтображаемыеТочки[СчТочки - 1].Лон = ТекПункт.Лон
			И Трек_ОтображатьФактическийМаршрут = Истина Тогда
			// Точка уже показана на карте как точка фактического маршрута, нет смысла показывать ее еще раз
			Если НЕ (ТекПункт.Свойство("ЕстьЗаказы")
				И НЕ ТекПункт.ЕстьЗаказы) Тогда
				СчПункта = СчПункта + 1;
			КонецЕсли;
			СчТочки = СчТочки + 1;
			Продолжить;
		КонецЕсли;
		
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
		
		ТекстНадписи = ТекПункт.ТекстНадписи;

		Если ТекПункт.Свойство("ЕстьЗаказы")
			И НЕ ТекПункт.ЕстьЗаказы Тогда
			ДанныеПункта = СоответствиеПунктов.Получить(ТекПункт.Пункт);
			Если ДанныеПункта.ТипПунктаСлужебный Тогда
				СчТочки = СчТочки + 1;
				Продолжить;
			КонецЕсли;
			Маркер   = уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(ДанныеПункта.Картинка,
				"svg+xml", СоответсвиеКартинок);
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекПункт.Лат,
			ТекПункт.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, "9",
			Маркер);
			МассивЗначащихТочек.Добавить(ПараметрыКоманды);
		Иначе
			Маркер = ?(ТекПункт.Выполнен, уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчПункта, 0, 0, 255, ТекПункт.ЦветФона),
			уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчПункта, ЦветНаКарте.Красный,
			ЦветНаКарте.Зеленый, ЦветНаКарте.Синий, ТекПункт.ЦветФона));
			
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекПункт.Лат,
			ТекПункт.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, "9",
			Маркер);
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
			
			СчПункта = СчПункта + 1;
		КонецЕсли;
		
		СчТочки = СчТочки + 1;
	КонецЦикла;
	
	Для Каждого ПараметрыКоманды Из МассивЗначащихТочек Цикл 
		ТекУникальныйИдентификатор = Новый УникальныйИдентификатор(); 
		МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
		ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Отбор);
	КонецЦикла;
	
	ПараметрыТрассировки = ПараметрыТрассировки + ?(ПараметрыТрассировки = "", "", ",")
	+ "[["+ мсвКоординат +"], '"
	+ ЦветМаршрута
	+ "', '', true]";
	
	ПараметрыКоманды = Новый Структура("Координаты,ТочкиМаршрута,Цвет,Толщина,Факт,МЛ,ПараметрыТрассировки,ВидПеревозки,Направление,ВидЛинии, Маршрут"
	+ ?(План, ",ПлановыйМаршрут" , ""),
	мсвКоординат, ТочкиМаршрута, ЦветМаршрута, "5", "true", Неопределено, ПараметрыТрассировки, ВидПеревозки, "true", ?(ЯндексКарты, "'solid'", "'0'"), ОтображаемыйМаршрут);

	Если МассивМаршрутов = Неопределено Тогда
		МассивМаршрутов  = Новый Массив();
		МассивМаршрутов.Добавить(ПараметрыКоманды);

		ТекПараметрыКоманды  = МассивМаршрутов[0]; 
		ЖДМаршрутНеРассчитан = Ложь;
		Расстояние           = 0; 
		Время                = 0;
		Если ТекПараметрыКоманды.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская") Тогда
			ТекПараметрыКоманды.ВидЛинии    = ?(ЯндексКарты, "'dashdot'", "'7, 2, 7'");
			ТекПараметрыКоманды.Цвет        = """"+ ТекПараметрыКоманды.Цвет + """"; 
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("showPolyline", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор);
			
		ИначеЕсли ТекПараметрыКоманды.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") Тогда
			ТекПараметрыКоманды.ВидЛинии    = ?(ЯндексКарты, "'dash'", "'8, 8'");
			ТекПараметрыКоманды.Цвет        = """"+ ТекПараметрыКоманды.Цвет + """";
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("showPolyline", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор);
			
		ИначеЕсли ТекПараметрыКоманды.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная") Тогда
			
			РезультатOSM = Неопределено;
			ТекстОшибки  = ""; 
			Если уатЗащищенныеФункцииСервер.РассчитатьЖДМаршрут(ТекПараметрыКоманды.ТочкиМаршрута, РезультатOSM, ТекстОшибки) Тогда 
				ТекПараметрыКоманды.Координаты = РезультатOSM.Координаты;
				Расстояние                     = РезультатOSM.Расстояние;
				Время                          = РезультатOSM.Время;
			Иначе
				ЖДМаршрутНеРассчитан = Истина;
			КонецЕсли;
			
			Цвет = ТекПараметрыКоманды.Цвет;
			ТекПараметрыКоманды.Направление = "false";
			ТекПараметрыКоманды.Толщина     = "7";
			ТекПараметрыКоманды.Цвет        = """" + Цвет + """";
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("showPolyline", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор);
			
			ТекПараметрыКоманды.Направление = "false";
			ТекПараметрыКоманды.Толщина     = "5";
			ТекПараметрыКоманды.Цвет        = """#ffffff""";
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("showPolyline", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор);
			
			ТекПараметрыКоманды.Направление = "true";
			ТекПараметрыКоманды.Цвет        = """" + Цвет + """";
			ТекПараметрыКоманды.ВидЛинии    = ?(ЯндексКарты, "'dash'", "'8, 8'");
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("showPolyline", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор);
		Иначе   
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			ОбработатьКомандуКарты("traceRoute", ТекПараметрыКоманды, ВыводитьНаКарту, Отбор);
		КонецЕсли;
		
		Если ТекПараметрыКоманды.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")
			ИЛИ ТекПараметрыКоманды.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная")
			ИЛИ ЖДМаршрутНеРассчитан Тогда
			ПредПункт = Неопределено; 
			мсвПункты = Новый Массив;
			
			Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
				Если ПредПункт = Неопределено Тогда
					ПредПункт = ТекПункт.Пункт;
				Иначе
					мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
					ПредПункт, 
					ТекПункт.Пункт));
				КонецЕсли;
			КонецЦикла;
			уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты,,,,Ложь); 
			Расстояние   = 0; 
			Время        = 0;
			Для Каждого ТекПункт Из мсвПункты Цикл
				Расстояние = Расстояние + ТекПункт.Расстояние;
				Время      = уатАРМКлиент.СложитьВремя(ТекПункт.Время, Время);
			КонецЦикла; 
			
			Попытка 
				РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
				уатЭлектронныеКартыКлиент.СекВДату(Время * 3600,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
				
				НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние, 2) + " км";
				НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
				+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
				+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
			Исключение
				НадписьРасстояние   = "0 км";
				НадписьДлительность = " 0 дн. 00:00";
			КонецПопытки; 
			ПлановоеРасстояние  = НадписьРасстояние;
			ПлановыйМаршрут     = "[" + ТекПараметрыКоманды.Координаты + "]";
		ИначеЕсли ТекПараметрыКоманды.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная") Тогда
			Попытка 
				РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
				уатЭлектронныеКартыКлиент.СекВДату(Время,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
				
				НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние / 1000, 2) + " км";
				НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
				+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
				+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
			Исключение
				НадписьРасстояние   = "0 км";
				НадписьДлительность = " 0 дн. 00:00";
			КонецПопытки; 
			ПлановоеРасстояние  = НадписьРасстояние;
			ПлановыйМаршрут     = "[" + ТекПараметрыКоманды.Координаты + "]";
		КонецЕсли;
		
		СоответсвиеИдентификаторовМаршрута.Вставить(ТекОбъект, МассивИдентификаторов); 
	Иначе
		МассивМаршрутов.Добавить(ПараметрыКоманды);
		
		СоответсвиеИдентификаторовМаршрута.Вставить(ТекОбъект, МассивИдентификаторов); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭтаповМаршрута(Маршрут)
	
	Возврат Маршрут.Этапы.Количество();
	
КонецФункции

&НаСервере
Процедура ПодборПунктовВМаршрутЗаписатьСервер(МаршрутСсылка, мсвПунктов)
	
	МаршрутОбъект = МаршрутСсылка.ПолучитьОбъект();
	
	МаршрутОбъект.Этапы.Очистить();
	Для Каждого ТекТочка Из мсвПунктов Цикл 
		НовТочка = МаршрутОбъект.Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(НовТочка, ТекТочка);
	КонецЦикла;
	
	Для Сч = 0 По МаршрутОбъект.Этапы.Количество() - 1 Цикл 
		Пункт1 = МаршрутОбъект.Этапы[Сч].ПунктОтправления;
		
		Если Сч = МаршрутОбъект.Этапы.Количество() - 1 Тогда 
			МаршрутОбъект.Этапы[Сч].Расстояние = 0;
			МаршрутОбъект.Этапы[Сч].ВремяВПути = 0;
			Продолжить;
		Иначе 
			Пункт2 = МаршрутОбъект.Этапы[Сч+1].ПунктОтправления;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Пункт1) Или Не ЗначениеЗаполнено(Пункт2) Тогда
			Продолжить;
		КонецЕсли;
		
		мсвПункты = Новый Массив;
		мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", Пункт1, Пункт2));
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		
		МаршрутОбъект.Этапы[Сч].Расстояние = мсвПункты[0].Расстояние;
		МаршрутОбъект.Этапы[Сч].ВремяВПути = мсвПункты[0].Время;
	КонецЦикла;
	
	мРасстояние = МаршрутОбъект.Этапы.Итог("Расстояние");
	Если МаршрутОбъект.Расстояние <> мРасстояние Тогда
		МаршрутОбъект.Расстояние = мРасстояние;
	КонецЕсли;
	
	мВремяВПути = 0;
	Для Каждого ТекСтрока Из МаршрутОбъект.Этапы цикл
		Если ЗначениеЗаполнено(ТекСтрока.ВремяВПути) Тогда
			мВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяВПути, ТекСтрока.ВремяВПути);
		КонецЕсли;
	КонецЦикла;
	Если МаршрутОбъект.ВремяВПути <> мВремяВПути Тогда
		МаршрутОбъект.ВремяВПути = мВремяВПути;
	КонецЕсли;
	
	Попытка
		МаршрутОбъект.Записать();
		МаршрутСсылка = МаршрутОбъект.Ссылка; 
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПунктовВМаршрутЗаписатьПодтверждение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		мсвПунктов = Новый Массив();
		Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
			ДанныеПункта = Новый Структура("ПунктОтправления, ТипТочиМаршрута",
			ТекСтрока.Пункт, ТекСтрока.ТипТочкиМаршрута);
			мсвПунктов.Добавить(ДанныеПункта);
		КонецЦикла;
		ПодборПунктовВМаршрутЗаписатьСервер(ТекущийМаршрут, мсвПунктов);
		ОповеститьОбИзменении(ТекущийМаршрут);
		Оповестить("ЭлектронныеКарты_ЗаписьМаршрута",,ТекущийМаршрут);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыПоВыделеннымОбластям(ДанныеВыделения, мсвКоординатДляФокусировки, мсвДляИзменения, кэшОбъектыКарты)
	
	Если РежимОткрытия = "РежимКарты_Маршруты" Тогда
		
		Для Каждого ТекСтрокаЗначение Из кэшОбъектыКарты Цикл 
			ТекСтрока = ТекСтрокаЗначение.Значение;
			Если НЕ (ЗначениеЗаполнено(ТекСтрока.Ссылка)
				И ТипЗнч(ТекСтрока.Ссылка) = Тип("СправочникСсылка.уатПунктыНазначения")) Тогда 
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекОбъект Из ДанныеВыделения Цикл 
				мМассивХ = Новый Массив();
				мМассивУ = Новый Массив();
				
				Для Каждого ТекКоордината Из ТекОбъект Цикл
					мМассивХ.Добавить(ТекКоордината.Лат);
					мМассивУ.Добавить(ТекКоордината.Лон);
					
					мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекКоордината.Лат, ТекКоордината.Лон));
					
				КонецЦикла;
				Лат = ТекСтрока.Ссылка.Лат;
				Лон = ТекСтрока.Ссылка.Лон;
				
				Если Лат <> 0 И Лон <> 0 
					И ТочкаВПолигоне(мМассивХ, мМассивУ, Лат, Лон) Тогда
					
					НайдСтроки = ПунктыКПодбору.НайтиСтроки(Новый Структура("Пункт", ТекСтрока.Ссылка));
					Если НайдСтроки.Количество() = 0 Тогда
						НовСтрока			      = ПунктыКПодбору.Добавить();
						НовСтрока.Пункт           = ТекСтрока.Ссылка;
						НовСтрока.ТипТочкиМаршрута = ?(ПунктыКПодбору.Количество() = 1,
						ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),
						ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	Иначе		
		Для Каждого ТекСтрокаЗначение Из кэшОбъектыКарты Цикл
			ТекСтрока = ТекСтрокаЗначение.Значение;
			Если НЕ (ЗначениеЗаполнено(ТекСтрока.Ссылка)
				И ТипЗнч(ТекСтрока.Ссылка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")) Тогда 
				Продолжить;
			КонецЕсли;
			Для Каждого ТекОбъект Из ДанныеВыделения Цикл 
				мМассивХ = Новый Массив();
				мМассивУ = Новый Массив();
				
				Для Каждого ТекКоордината Из ТекОбъект Цикл
					мМассивХ.Добавить(ТекКоордината.Лат);
					мМассивУ.Добавить(ТекКоордината.Лон);
					
					мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекКоордината.Лат, ТекКоордината.Лон));
					
				КонецЦикла;
				
				Если ТекСтрока.Лат <> 0 И ТекСтрока.Лон <> 0 
					И ТочкаВПолигоне(мМассивХ, мМассивУ, ТекСтрока.Лат, ТекСтрока.Лон) Тогда
					Если мсвДляИзменения.Найти(ТекСтрока.Ссылка) = Неопределено Тогда 	
						мсвДляИзменения.Добавить(ТекСтрока.Ссылка);
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТочкаВПолигоне(МассивХ, МассивУ, Лат, Лон) 
	
	ВыхМассивХ = Новый Массив;
	ВыхМассивУ = Новый Массив;
	
	Результат = Ложь;
	КоличУзлов = МассивХ.Количество();
	Если КоличУзлов = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыхМассивХ.Добавить(МассивХ[КоличУзлов - 1]);
	ВыхМассивУ.Добавить(МассивУ[КоличУзлов - 1]);
	Для Идентификатор = 0 По КоличУзлов - 1 Цикл
		ВыхМассивХ.Добавить(МассивХ[Идентификатор]);
		ВыхМассивУ.Добавить(МассивУ[Идентификатор]);
	КонецЦикла;
	Для Идентификатор = 0 По КоличУзлов - 1 Цикл
		Если Не уэXOR((Лон > ВыхМассивУ[Идентификатор]),(Лон <= ВыхМассивУ[Идентификатор + 1])) Тогда
			Если (Лат - ВыхМассивХ[Идентификатор]) < 
				(Лон - ВыхМассивУ[Идентификатор]) * (ВыхМассивХ[Идентификатор + 1] - ВыхМассивХ[Идентификатор]) /
				(ВыхМассивУ[Идентификатор + 1] - ВыхМассивУ[Идентификатор]) Тогда
				Результат = НЕ Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция уэXOR(ПеременнаяА, ПеременнаяВ)

	Если ПеременнаяА и НЕ ПеременнаяВ Тогда
		Результат = Истина;
	ИначеЕсли ПеременнаяА И ПеременнаяВ Тогда
		Результат = Ложь;
	ИначеЕсли (НЕ ПеременнаяА) И ПеременнаяВ Тогда
		Результат = Истина;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьМЛНаКарте(ВыводитьНаКарту = Истина, СтрокаФокуса = "")
	
	Если Трек_ОтображатьФактическийМаршрут 
		И Трек_ПериодМаршрутаС > Трек_ПериодМаршрутаПо Тогда 
		ТекстОшибки = НСтр("en='Period end date cannot be earlier than start date';ru='Дата окончания периода не может быть меньше даты начала'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Транспорт_ПериодМаршрутаПо");
		Возврат;
	КонецЕсли;

	мсвКоординатыДляФокусировки = Новый Массив();
	
	Если Трек_ОтображатьФактическийМаршрут Тогда 
		Если ПериодАвтоматическогоОбновления = 0 Тогда 
			ТекстНСТР = НСтр("en='Display the actual route ...';ru='Отображение фактического маршрута ...'");
			Состояние(ТекстНСТР);
		КонецЕсли;
		
		ЦветМаршрута = Новый Цвет(135, 34, 221);
		Транспорт_ОтобразитьФактическийМаршрутНаКарте(мсвКоординатыДляФокусировки, ЦветМаршрута, ВыводитьНаКарту, Ложь);
		
		РасчитатьФактРасстояние();
	КонецЕсли;
	
	Если Трек_ОтображатьПоДокументу 
		И Трек_ОтображатьПлановыйМаршрут Тогда 
		Если ПериодАвтоматическогоОбновления = 0 Тогда 
			ТекстНСТР = НСтр("en='Displaying of planned route ...';ru='Отображение планового маршрута ...'");
			Состояние(ТекстНСТР);
		КонецЕсли;
		Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки,,,,,, Истина, ВыводитьНаКарту, Ложь);
	КонецЕсли;
	
	Если Трек_ОтображатьПлановыйМаршрут Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки); 
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, ВыводитьНаКарту);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутизацияПоАдресам

&НаКлиенте
Процедура ПоказатьПунктыНаКарте(ВыводитьНаКарту = Истина, СтрокаФокуса = "")
	
	Если мсвОтмеченныеПункты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Поиск_СписокПунктов.ТекущиеДанные;
	Если ТипЗнч(Элементы.Поиск_СписокПунктов.ТекущаяСтрока)
		= Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущиеДанные = Неопределено;
	КонецЕсли;
	
	ТекущийПункт = Неопределено;
	
	РезультатГеокодированияПоказан = Ложь;
	
	мсвПунктов  = ПолучитьДанныеПунктов(мсвОтмеченныеПункты, ТипЭлектронныхКарт,, СоответсвиеКартинокТиповПунктов);
	Для Каждого ДанныеПункта Из мсвПунктов Цикл
		Если (ТекущиеДанные <> Неопределено
			И НЕ ТекущиеДанные.Свойство("Ссылка")) Тогда 
			Продолжить;
		КонецЕсли;

		Если ТекущиеДанные <> Неопределено
			И ДанныеПункта.Ссылка = ТекущиеДанные.Ссылка Тогда
			ТекущийПункт = ДанныеПункта;
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПункта.Геокодирован Тогда 
			ТекстНадписи = ДанныеПункта.ТекстНадписи;
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ДанныеПункта.Лат,
			ДанныеПункта.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, "8", 
			уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(ДанныеПункта.Картинка, "svg+xml", СоответсвиеКартинок)); 
			ПараметрыКоманды.Вставить("Идентификатор", ДанныеПункта.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
			
			Если ДанныеПункта.Лат = Поиск_Широта И ДанныеПункта.Лон = Поиск_Долгота Тогда
				РезультатГеокодированияПоказан = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ (Поиск_Широта = 0 И Поиск_Долгота = 0)
		И ТекущийПункт <> Неопределено Тогда 
		
		ПараметрыКоманды = Новый Структура("Широта, Долгота",
			Формат(Поиск_Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(Поиск_Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, ВыводитьНаКарту);
		
		ТекстНадписи = ТекущийПункт.ТекстНадписи;

		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(Поиск_Широта,
		Поиск_Долгота, ТекстНадписи, КластеризацияМаркеровНаКарте, "8",
		уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(ТекущийПункт.Картинка, "svg+xml", СоответсвиеКартинок));
		ПараметрыКоманды.Вставить("Идентификатор", ТекущийПункт.УникальныйИдентификатор);
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
		
		РезультатГеокодированияПоказан = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМаршрутизациюПоТаблице(ОтображатьСообщения=Истина, ОтображатьЗаказы = Ложь, ВыводитьНаКарту = Истина, СтрокаФокуса = "")
	
	мсвКоординатыДляФокусировки = Новый Массив();
	
	Если ОтображатьЗаказы = Истина 
		И ЗначениеЗаполнено(Транспорт_ЗаказНаТС) Тогда
		
		Если МаршрутПоАдресам.Количество() < 2 Тогда 
			Если ОтображатьСообщения Тогда 
				ТекстОшибки = НСтр("en='To perform routing, you must specify at least 2 route points.';ru='Для выполнения маршрутизации необходимо указать как минимум 2 точки маршрута.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "МаршрутПоАдресам");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Для Счетчик = 1 По СчОтрезковЗаказа Цикл
			ПараметрыКоманды = Новый Структура();
			ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + Счетчик);
			ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
		КонецЦикла; 
		СчОтрезковЗаказа = 0;
		
		стрМсвТочек          = "";
		ТочкиМаршрута        = Новый Массив();
		
		FTLЗаказ        = Ложь;
		ДанныеПоЗаказам = ПолучитьДанныеПоЗаказуДляКартографии(Транспорт_ЗаказНаТС, FTLЗаказ);
			
		СчТочек         = 1;
		СчТочекНадписей = 0;
		
		МассивОтрезков  = Новый Массив();
		ТекЗаказНаТС    = Неопределено;
		ТекВидПеревозки = Неопределено;
		ЦветЗаказа      = Новый Цвет(0, 0, 0);
		ПредЦветЗаказа  = Неопределено;
		Для Каждого ТекСтрока Из МаршрутПоАдресам Цикл 
			
			ДанныеПоЗаказу = ДанныеПоЗаказам.Получить(ТекСтрока.ЗаказНаТС);
			Если ДанныеПоЗаказу = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если ТекСтрока.Широта = 0 И ТекСтрока.Долгота = 0 Тогда 
				Если ОтображатьСообщения Тогда 
					ТекстОшибки = НСтр("en='For addresses not specified coordinates. Address will not participate in routing.';ru='Для адреса не указаны координаты. Адрес не будет учавствовать в маршрутизации.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "МаршрутПоАдресам["+Формат(ТекСтрока.ПолучитьИдентификатор(), "ЧН=0; ЧГ=0")+"].Адрес");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			
			Если ТекЗаказНаТС <> Неопределено
				И ТекЗаказНаТС <> ТекСтрока.ЗаказНаТС Тогда
				стрМсвТочек = стрМсвТочек + ?(стрМсвТочек="", "", ",") + "["+Формат(ТекСтрока.Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекСтрока.Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
				ТочкиМаршрута.Добавить(Новый Структура("Лат, Лон, Пункт", ТекСтрока.Широта, ТекСтрока.Долгота, ТекСтрока.Адрес));
				МассивОтрезков.Добавить(Новый Структура("ТочкиМаршрута,стрМсвТочек,ВидПеревозки,ЦветЗаказа", ТочкиМаршрута, стрМсвТочек, ТекВидПеревозки, ЦветЗаказа));
				
				стрМсвТочек     = "";
				ТочкиМаршрута   = Новый Массив();
				СчТочекНадписей = 0;
			КонецЕсли;
			
			ЦветЗаказа = ДанныеПоЗаказу.ЦветЗаказа;
			Если ПредЦветЗаказа = Неопределено Тогда
				ЦветЗаказаМаркер = ДанныеПоЗаказу.ЦветЗаказа;
				ПредЦветЗаказа   = ДанныеПоЗаказу.ЦветЗаказа;
			Иначе
				ЦветЗаказаМаркер = ПредЦветЗаказа;
				ПредЦветЗаказа   = ДанныеПоЗаказу.ЦветЗаказа;
			КонецЕсли;
			
			Если НЕ ЦветЗаказа.Вид = ВидЦвета.Абсолютный Тогда 
				ЦветЗаказа = Новый Цвет(0, 0, 0);
			КонецЕсли;
			Если НЕ ЦветЗаказаМаркер.Вид = ВидЦвета.Абсолютный Тогда 
				ЦветЗаказаМаркер = Новый Цвет(0, 0, 0);
			КонецЕсли;
			
			АдресНадпись = ДанныеПоЗаказу.МассивНадписей[СчТочекНадписей];
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекСтрока.Широта,
			ТекСтрока.Долгота, АдресНадпись, КластеризацияМаркеровНаКарте, "9",
			?(FTLЗаказ,
			уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, ЦветЗаказаМаркер.Красный, ЦветЗаказаМаркер.Зеленый, ЦветЗаказаМаркер.Синий),
			уатЭлектронныеКартыКлиент.ПолучитьМаркерПункта(?(СчТочек = 1, 1, 5), ЦветЗаказаМаркер.Красный, ЦветЗаказаМаркер.Зеленый, ЦветЗаказаМаркер.Синий)));
			ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
			
			СчТочек = СчТочек + 1;
			СчТочекНадписей = СчТочекНадписей + 1;
			
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Широта, ТекСтрока.Долгота));
			стрМсвТочек = стрМсвТочек + ?(стрМсвТочек="", "", ",") + "["+Формат(ТекСтрока.Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекСтрока.Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
			
			ТочкиМаршрута.Добавить(Новый Структура("Лат, Лон, Пункт", ТекСтрока.Широта, ТекСтрока.Долгота, ТекСтрока.Адрес));
			
			ТекЗаказНаТС    = ТекСтрока.ЗаказНаТС;
			ТекВидПеревозки = ТекСтрока.ВидПеревозки;
		КонецЦикла;
		
		МассивОтрезков.Добавить(Новый Структура("ТочкиМаршрута,стрМсвТочек,ВидПеревозки,ЦветЗаказа", ТочкиМаршрута, стрМсвТочек, ТекВидПеревозки, ЦветЗаказа));
		
		Расстояние         = 0;
		Время              = 0;
		ПлановыйМаршрут    = "";
		ТекПлановыйМаршрут = "";
		
		СчОтрезковЗаказа = 1;
		Для Каждого ТекСтрока Из МассивОтрезков Цикл
			Если ТекСтрока.стрМсвТочек = "" Тогда 
				Продолжить;
			КонецЕсли;
			ЖДМаршрутНеРассчитан = Ложь;
			ЦветЗаказа = ТекСтрока.ЦветЗаказа;
			ЦветЛинии  = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ЦветЗаказа.Красный, ЦветЗаказа.Зеленый, ЦветЗаказа.Синий);
			Если ТекСтрока.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская") Тогда
				ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
				ТекСтрока.стрМсвТочек, """" + ЦветЛинии + """", "5",  "true", ?(ЯндексКарты, "'dashdot'", "'7, 2, 7'"));
				ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + СчОтрезковЗаказа);
				ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту);
				
				СчОтрезковЗаказа = СчОтрезковЗаказа + 1;
			ИначеЕсли ТекСтрока.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") Тогда
				ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
				ТекСтрока.стрМсвТочек, """" + ЦветЛинии + """", "5",  "true", ?(ЯндексКарты, "'dash'", "'8, 8'"));
				ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + СчОтрезковЗаказа);
				ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту);
				
				СчОтрезковЗаказа = СчОтрезковЗаказа + 1;
			ИначеЕсли ТекСтрока.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная") Тогда
				РезультатOSM = Неопределено;
				ТекстОшибки  = "";
				Если уатЗащищенныеФункцииСервер.РассчитатьЖДМаршрут(ТекСтрока.ТочкиМаршрута, РезультатOSM, ТекстОшибки) Тогда 
					ТекСтрока.стрМсвТочек = РезультатOSM.Координаты; 
					Расстояние            = Расстояние + Окр(РезультатOSM.Расстояние / 1000, 2);
					Время                 = уатАРМКлиент.СложитьВремя(РезультатOSM.Время, Время);
				КонецЕсли;
				
				ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
				ТекСтрока.стрМсвТочек, """" + ЦветЛинии + """", "7",  "false", ?(ЯндексКарты, "'solid'", "''")); 
				ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + СчОтрезковЗаказа);
				ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту);
				СчОтрезковЗаказа = СчОтрезковЗаказа + 1;
				
				ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
				ТекСтрока.стрМсвТочек, """#ffffff""", "5",  "false", ?(ЯндексКарты, "'solid'", "''"));
				ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + СчОтрезковЗаказа);
				ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту);
                СчОтрезковЗаказа = СчОтрезковЗаказа + 1;
				
				ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
				ТекСтрока.стрМсвТочек, """" + ЦветЛинии + """", "5",  "true", ?(ЯндексКарты, "'dash'", "'8, 8'"));
				ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + СчОтрезковЗаказа);
				ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту);
				СчОтрезковЗаказа = СчОтрезковЗаказа + 1;
				
			Иначе
				ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута, Цвет, Толщина, Факт, ПлановыйМаршрут",
				ТекСтрока.стрМсвТочек, ТекСтрока.ТочкиМаршрута,
				ЦветЛинии, "''",  "true",  "true");
				ПараметрыКоманды.Вставить("Идентификатор", Строка(ИдентификаторМаршрутизацииПоАдресам) + СчОтрезковЗаказа);
				ОбработатьКомандуКарты("traceRoute", ПараметрыКоманды, ВыводитьНаКарту);
				СчОтрезковЗаказа = СчОтрезковЗаказа + 1;
				
			КонецЕсли;
			
			Если ТекСтрока.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")
				ИЛИ ТекСтрока.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная")
				ИЛИ ЖДМаршрутНеРассчитан Тогда
				ПредПункт = Неопределено; 
				мсвПункты = Новый Массив;
				
				Для Каждого ТекПункт Из ТекСтрока.ТочкиМаршрута Цикл 
					Если ПредПункт = Неопределено Тогда
						ПредПункт = ТекПункт.Пункт;
					Иначе
						мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
						ПредПункт, 
						ТекПункт.Пункт));
					КонецЕсли;
				КонецЦикла;
				уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты,,,,Ложь); 
				Для Каждого ТекПункт Из мсвПункты Цикл
					Расстояние = Расстояние + ТекПункт.Расстояние;
					Время      = уатАРМКлиент.СложитьВремя(ТекПункт.Время, Время);
				КонецЦикла; 
				
				Попытка 
					РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
					уатЭлектронныеКартыКлиент.СекВДату(Время * 3600,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
					
					НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние, 2) + " км";
					НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
					+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
					+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
				Исключение
					НадписьРасстояние   = "0 км";
					НадписьДлительность = " 0 дн. 00:00";
				КонецПопытки; 
				ПлановоеРасстояние  = НадписьРасстояние;
				ТекПлановыйМаршрут  = ?(ТекПлановыйМаршрут = "", "", ТекПлановыйМаршрут + ",") + ТекСтрока.стрМсвТочек;
			ИначеЕсли ТекСтрока.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная") Тогда
				Попытка 
					РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
					уатЭлектронныеКартыКлиент.СекВДату(Время,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
					
					НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние, 2) + " км";
					НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
					+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
					+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
				Исключение
					НадписьРасстояние   = "0 км";
					НадписьДлительность = " 0 дн. 00:00";
				КонецПопытки; 
				ПлановоеРасстояние  = НадписьРасстояние;
				ТекПлановыйМаршрут  = ?(ТекПлановыйМаршрут = "", "", ТекПлановыйМаршрут + ",") + ТекСтрока.стрМсвТочек;
			Иначе
				ПредПункт = Неопределено; 
				мсвПункты = Новый Массив;
				
				Для Каждого ТекПункт Из ТекСтрока.ТочкиМаршрута Цикл 
					Если ПредПункт = Неопределено Тогда
						ПредПункт = ТекПункт.Пункт;
					Иначе
						мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
						ПредПункт, 
						ТекПункт.Пункт));
					КонецЕсли;
				КонецЦикла;
				уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты); 
				Для Каждого ТекПункт Из мсвПункты Цикл
					Расстояние = Расстояние + ТекПункт.Расстояние;
					Время      = уатАРМКлиент.СложитьВремя(ТекПункт.Время, Время);
				КонецЦикла; 
				
				//Попытка 
				//	РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
				//	уатЭлектронныеКартыКлиент.СекВДату(Время * 3600,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
				//	
				//	НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние, 2) + " км";
				//	НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
				//	+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
				//	+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
				//Исключение
				//	НадписьРасстояние   = "0 км";
				//	НадписьДлительность = " 0 дн. 00:00";
				//КонецПопытки; 
				ПлановоеРасстояние = НадписьРасстояние;
				ТекПлановыйМаршрут = ?(ТекПлановыйМаршрут = "", "", ТекПлановыйМаршрут + ",") + ?(ЗначениеЗаполнено(ПлановыйМаршрут),
				Сред(ПлановыйМаршрут,2,СтрДлина(ПлановыйМаршрут)-2), ТекСтрока.стрМсвТочек); 
				ПлановыйМаршрут = "";
			КонецЕсли;
		КонецЦикла;
		ПлановыйМаршрут = "[" + ТекПлановыйМаршрут + "]";
	
	ИначеЕсли МаршрутизацияПоАдресамКоординатам = 0 Тогда
		Если МаршрутПоАдресам.Количество() < 2 Тогда 
			Если ОтображатьСообщения Тогда 
				ТекстОшибки = НСтр("en='To perform routing, you must specify at least 2 route points.';ru='Для выполнения маршрутизации необходимо указать как минимум 2 точки маршрута.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "МаршрутПоАдресам");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		стрМсвТочек          = "";
		СчТочек = 1;
		ТекстНСТР_1 = НСтр("en='Departure point:';ru='Адрес:'");

		Для Каждого ТекСтрока Из МаршрутПоАдресам Цикл 
			Если ТекСтрока.Широта = 0 И ТекСтрока.Долгота = 0 Тогда 
				Если ОтображатьСообщения Тогда 
					ТекстОшибки = НСтр("en='For addresses not specified coordinates. Address will not participate in routing.';ru='Для адреса не указаны координаты. Адрес не будет учавствовать в маршрутизации.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "МаршрутПоАдресам["+Формат(ТекСтрока.ПолучитьИдентификатор(), "ЧН=0; ЧГ=0")+"].Адрес");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			АдресНадпись = "<strong>" + ТекстНСТР_1 + "</strong> " + ЭкранироватьСимволы(Строка(ТекСтрока.Адрес));
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекСтрока.Широта, ТекСтрока.Долгота, 
				АдресНадпись, КластеризацияМаркеровНаКарте, "9", уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, 0, 0, 255));
			ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
			
			СчТочек = СчТочек + 1;

			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Широта, ТекСтрока.Долгота));
			стрМсвТочек = стрМсвТочек + ?(стрМсвТочек="", "", ",") + "["+Формат(ТекСтрока.Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекСтрока.Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
		КонецЦикла;
		
		Если НЕ стрМсвТочек = "" Тогда
			
			ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута, Цвет, Толщина, Факт, ПлановыйМаршрут",
				стрМсвТочек, мсвКоординатыДляФокусировки, "#0000FF", 5, "false", "true");
			ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторМаршрутизацииПоАдресам);
			ОбработатьКомандуКарты("traceRoute", ПараметрыКоманды, ВыводитьНаКарту);
				
		КонецЕсли;
		
	Иначе
		Если Маршрут.Количество() < 2 Тогда 
			Если ОтображатьСообщения Тогда 
				ТекстОшибки = НСтр("en='To perform routing, you must specify at least 2 route points.';ru='Для выполнения маршрутизации необходимо указать как минимум 2 точки маршрута.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Маршрут");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		стрМсвТочек = "";
		СчТочек = 1;
		ТекстНСТР_1 = НСтр("en='Departure point:';ru='Адрес:'");

		Индекс = 1;
		Для Каждого ТекСтрока Из Маршрут Цикл 
			Если ТекСтрока.Широта = 0 И ТекСтрока.Долгота = 0 Тогда 
				Если ОтображатьСообщения Тогда 
					ТекстОшибки = НСтр("en='There are no coordinates for point. Point will not participate in routing.';ru='Для точки не заданы координаты. Точка не будет учавствовать в маршрутизации.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Маршрут.["+Формат(Индекс-1, "ЧН=0; ЧГ=0")+"]");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			АдресНадпись = "<strong>" + ТекстНСТР_1 + "</strong> " + ЭкранироватьСимволы(Строка(ТекСтрока.НазваниеТочки));
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекСтрока.Широта, ТекСтрока.Долгота,
				АдресНадпись, КластеризацияМаркеровНаКарте, "9", уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, 0, 0, 255));
			ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
			СчТочек = СчТочек + 1;

			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Широта, ТекСтрока.Долгота));
			стрМсвТочек = стрМсвТочек + ?(стрМсвТочек="", "", ",") + "["+Формат(ТекСтрока.Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекСтрока.Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если Не стрМсвТочек = "" Тогда 
			ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута, Цвет, Толщина, Факт, ПлановыйМаршрут",
			стрМсвТочек, мсвКоординатыДляФокусировки, "#0000FF", "''", "false", "true");
			ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторМаршрутизацииПоАдресам);
			ОбработатьКомандуКарты("traceRoute", ПараметрыКоманды, ВыводитьНаКарту);
		КонецЕсли;
	КонецЕсли;
	
	Если мсвКоординатыДляФокусировки.Количество() Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, ВыводитьНаКарту);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоЗаказуДляКартографии(ЗаказНаТС, FTLЗаказ)
	
	ДанныеПоЗаказам = Новый Соответствие();
	FTLЗаказ        = ЗаказНаТС.FTL;
	
	Если ЗаказНаТС.Мультимодальный
		И НЕ ЗаказНаТС.ЭтоЭтап Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ЗаказНаТС);
			
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
			|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ВидПеревозки КАК ЭтапВидПеревозки
			|ИЗ
			|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
			|ГДЕ
			|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
			|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДанныеПоЗаказу = уатЗащищенныеФункцииСервер_проф.ПолучитьДанныеПоЗаказуДляКартографии(ЗаказНаТС);
			
			ЦветЗаказа  = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(ДанныеПоЗаказу.Цвет);
			ДанныеПоЗаказу.Вставить("ЦветЗаказа", ЦветЗаказа);
			ДанныеПоЗаказам.Вставить(ЗаказНаТС, ДанныеПоЗаказу);
			
			МассивНадписей = Новый Массив();
			ДополнительныеПараметрыНадписи = Новый Структура("FTL, НомерПункта");
			ДополнительныеПараметрыНадписи.FTL = FTLЗаказ;
			Если НЕ FTLЗаказ Тогда  
				ДополнительныеПараметрыНадписи.НомерПункта = 0;
				МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ЗаказНаТС, ДополнительныеПараметрыНадписи));
				ДополнительныеПараметрыНадписи.НомерПункта = 1;
				МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ЗаказНаТС, ДополнительныеПараметрыНадписи)); 
			Иначе 
				НомерПункта = 0;
				Для Каждого ТекСтрока Из ЗаказНаТС.ПромежуточныеПункты Цикл
					ДополнительныеПараметрыНадписи.НомерПункта = НомерПункта;
					МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ЗаказНаТС, ДополнительныеПараметрыНадписи));
					НомерПункта = НомерПункта + 1;
				КонецЦикла;
			КонецЕсли;
			ДанныеПоЗаказу.Вставить("МассивНадписей", МассивНадписей);

		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ДанныеПоЗаказу = уатЗащищенныеФункцииСервер_проф.ПолучитьДанныеПоЗаказуДляКартографии(Выборка.Этап);
				
				ЦветЗаказа  = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(ДанныеПоЗаказу.Цвет);
				ДанныеПоЗаказу.Вставить("ЦветЗаказа", ЦветЗаказа);
				ДанныеПоЗаказам.Вставить(Выборка.Этап, ДанныеПоЗаказу); 
				
				МассивНадписей = Новый Массив();
				ДополнительныеПараметрыНадписи = Новый Структура("FTL, НомерПункта");
				ДополнительныеПараметрыНадписи.FTL = FTLЗаказ;
				Если НЕ FTLЗаказ Тогда  
					ДополнительныеПараметрыНадписи.НомерПункта = 0;
					МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(Выборка.Этап, ДополнительныеПараметрыНадписи));
					ДополнительныеПараметрыНадписи.НомерПункта = 1;
					МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(Выборка.Этап, ДополнительныеПараметрыНадписи)); 
				Иначе 
					НомерПункта = 0;
					Для Каждого ТекСтрока Из Выборка.Этап.ПромежуточныеПункты Цикл
						ДополнительныеПараметрыНадписи.НомерПункта = НомерПункта;
						МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(Выборка.Этап, ДополнительныеПараметрыНадписи));
						НомерПункта = НомерПункта + 1;
					КонецЦикла;
				КонецЕсли;
				ДанныеПоЗаказу.Вставить("МассивНадписей", МассивНадписей);
			КонецЦикла;
			
			FTLЗаказ = Истина;
		КонецЕсли;
	Иначе
		ДанныеПоЗаказу = уатЗащищенныеФункцииСервер_проф.ПолучитьДанныеПоЗаказуДляКартографии(ЗаказНаТС);
		ЦветЗаказа  = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(ДанныеПоЗаказу.Цвет);
		ДанныеПоЗаказу.Вставить("ЦветЗаказа", ЦветЗаказа);
		
		МассивНадписей = Новый Массив();
		ДополнительныеПараметрыНадписи = Новый Структура("FTL, НомерПункта");
		ДополнительныеПараметрыНадписи.FTL = FTLЗаказ;
		Если НЕ FTLЗаказ Тогда  
			ДополнительныеПараметрыНадписи.НомерПункта = 0;
			МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ЗаказНаТС, ДополнительныеПараметрыНадписи));
			ДополнительныеПараметрыНадписи.НомерПункта = 1;
			МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ЗаказНаТС, ДополнительныеПараметрыНадписи)); 
		Иначе 
			НомерПункта = 0;
			Для Каждого ТекСтрока Из ЗаказНаТС.ПромежуточныеПункты Цикл
				ДополнительныеПараметрыНадписи.НомерПункта = НомерПункта;
				МассивНадписей.Добавить(уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(ЗаказНаТС, ДополнительныеПараметрыНадписи));
				НомерПункта = НомерПункта + 1;
			КонецЦикла;
		КонецЕсли;
		ДанныеПоЗаказу.Вставить("МассивНадписей", МассивНадписей);
		ДанныеПоЗаказам.Вставить(ЗаказНаТС, ДанныеПоЗаказу);
	КонецЕсли;
	
	Возврат ДанныеПоЗаказам;
	
КонецФункции // ПолучитьДанныеПоЗаказуДляКартографии()

&НаКлиенте
Процедура ОчиститьМаршрутПоАдресам()
	
	Для Каждого ТекСтрока Из МаршрутПоАдресам Цикл
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЦикла; 
	МаршрутПоАдресам.Очистить();

	Если ЗначениеЗаполнено(ИдентификаторМаршрутизацииПоАдресам) Тогда
		НадписьРасстояние        = "0 км";
		НадписьДлительность      = " 0 дн. 00:00";

		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторМаршрутизацииПоАдресам);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМаршрут()
	
	Для Каждого ТекСтрока Из Маршрут Цикл
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ТекСтрока.УникальныйИдентификатор);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЦикла; 
	Маршрут.Очистить();

	Если ЗначениеЗаполнено(ИдентификаторМаршрутизацииПоАдресам) Тогда
		НадписьРасстояние        = "0 км";
		НадписьДлительность      = " 0 дн. 00:00";

		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор", ИдентификаторМаршрутизацииПоАдресам);
		ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницаМаршрутизацииПоАдресам()
	УдаляемыеРеквизиты   = Новый Массив();
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для Каждого ТекСтрока Из НовыеРеквизитыМультимодальногоЗаказа Цикл
		УдаляемыеРеквизиты.Добавить(ТекСтрока.Наименование);
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты,УдаляемыеРеквизиты);
	Для Каждого ТекСтрока Из НовыеЭлементыМультимодальногоЗаказа Цикл
		Если Элементы.Найти(ТекСтрока.Значение) <> Неопределено Тогда
			Элементы.Удалить(Элементы[ТекСтрока.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	НовыеРеквизитыМультимодальногоЗаказа.Очистить();
	НовыеЭлементыМультимодальногоЗаказа.Очистить();
	
	Индекс = 1;

	ОбщееВремя      = 0;
	ОбщееРасстояние = 0;
	Для Каждого ТекСтрока Из МаршрутМультимодальногоЗаказа Цикл
		
		ЦветЗаказа = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(ТекСтрока.ЗаказНаТС.ЦветДокумента);
		
		Если НЕ ЦветЗаказа.Вид = ВидЦвета.Абсолютный Тогда 
			ЦветЗаказа = Новый Цвет(0, 0, 0);
		КонецЕсли;

		ПунктПогрузки      = "МаршрутМультимодальногоЗаказа[" + (Индекс - 1) + "].ПунктПогрузки";
		ПунктПогрузкиДата  = "МаршрутМультимодальногоЗаказа[" + (Индекс - 1) + "].ДатаОтправленияПлан";
		ПунктРазгрузки     = "МаршрутМультимодальногоЗаказа[" + (Индекс - 1) + "].ПунктРазгрузки";
		ПунктРазгрузкиДата = "МаршрутМультимодальногоЗаказа[" + (Индекс - 1) + "].ДатаПрибытияПлан";
			
		НаименованиеРеквизитаПогрузка  = "ИзображениеЗаказПогрузка" + Индекс;
		НаименованиеРеквизитаРазгрузка = "ИзображениеЗаказРазгрузка" + Индекс;
		
		ГруппаЗаказ = Элементы.Добавить("ГруппаЗаказ" + Индекс,
			Тип("ГруппаФормы"), Элементы.СтраницаМаршрутизацииПоАдресамМультимодальныйЗаказ);
		
		ГруппаЗаказ.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаказ.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаказ.ОтображатьЗаголовок = Ложь; 
		ГруппаЗаказ.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ГруппаЗаказ" + Индекс);
		
		ГруппаЗаказИнформация = Элементы.Добавить("ГруппаЗаказИнформация" + Индекс,
			Тип("ГруппаФормы"), ГруппаЗаказ);
		ГруппаЗаказИнформация.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаказИнформация.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаказИнформация.ОтображатьЗаголовок = Ложь; 
		ГруппаЗаказИнформация.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
		ГруппаЗаказИнформация.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, ТекСтрока.Расстояние);
		СекВДату(ТекСтрока.Время * 3600,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
		
		ОбщееРасстояние = ОбщееРасстояние + ТекСтрока.Расстояние;  
		ОбщееВремя      = ОбщееВремя + ТекСтрока.Время * 3600; 
		
		НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
			+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
			+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
			
		НовыйЭлемент = Элементы.Добавить("ДекорацияВремя" + Индекс, Тип("ДекорацияФормы"),ГруппаЗаказИнформация);
		НовыйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = НадписьДлительность;
		НовыйЭлемент.Ширина    = 14;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		НовыйРеквизит = Новый РеквизитФормы("ИзображениеВидПеревозки" + Индекс, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НоваяСтрока   = НовыеРеквизитыМультимодальногоЗаказа.Добавить();
		НоваяСтрока.Наименование = "ИзображениеВидПеревозки" + Индекс;
		НоваяСтрока.Значение     = уатЭлектронныеКартыСервер.МаркерВидаПеревозки(ТекСтрока.ВидПеревозки,
		ЦветЗаказа.Красный, ЦветЗаказа.Зеленый, ЦветЗаказа.Синий);
		НоваяСтрока.Группа       = ГруппаЗаказИнформация.Имя;
		НоваяСтрока.Элемент      = НовыйЭлемент.Имя;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияРасстояние" + Индекс, Тип("ДекорацияФормы"),ГруппаЗаказИнформация);
		НовыйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = СтрШаблон("%1 км", Формат(ТекСтрока.Расстояние, "ЧДЦ=2; ЧФ='Ч '; ЧН="));
		
		//НовыйЭлемент = Элементы.Добавить("ДекорацияВидПеревозки" + Индекс, Тип("ДекорацияФормы"),ГруппаЗаказИнформация);
		//НовыйЭлемент.Вид       = ВидДекорацииФормы.Надпись;
		//НовыйЭлемент.Заголовок = ТекСтрока.ВидПеревозки;
		//НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		//НовыйЭлемент.Ширина = 13;
		//НовыйЭлемент.ВысотаЗаголовка = 1;
		
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ГруппаЗаказИнформация" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ИзображениеВидПеревозки" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ДекорацияВремя" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ДекорацияРасстояние" + Индекс);
		//НовыеЭлементыМультимодальногоЗаказа.Добавить("ДекорацияВидПеревозки" + Индекс);

		ГруппаЗаказПогрузка = Элементы.Добавить("ГруппаЗаказПогрузка" + Индекс,
		Тип("ГруппаФормы"), ГруппаЗаказ);
		ГруппаЗаказПогрузка.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаказПогрузка.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаказПогрузка.ОтображатьЗаголовок = Ложь; 
		ГруппаЗаказПогрузка.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаказПогрузка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		НовыйЭлементПунктПогрузкиДата = Элементы.Добавить("ПунктПогрузкиДата" + Индекс, Тип("ПолеФормы"),
			ГруппаЗаказПогрузка);
		НовыйЭлементПунктПогрузкиДата.Вид                = ВидПоляФормы.ПолеНадписи;
		НовыйЭлементПунктПогрузкиДата.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлементПунктПогрузкиДата.ПутьКДанным        = ПунктПогрузкиДата;
		НовыйЭлементПунктПогрузкиДата.Формат             = "ДФ='    dd.MM.yy HH:mm'; ДП=-";
		НовыйЭлементПунктПогрузкиДата.Ширина             = 11;
		НовыйЭлементПунктПогрузкиДата.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
		НовыйЭлементПунктПогрузкиДата.РастягиватьПоГоризонтали = Ложь;

		НовыйЭлементПунктПогрузки = Элементы.Добавить("ПунктПогрузки" + Индекс, Тип("ПолеФормы"),
		ГруппаЗаказПогрузка);
		НовыйЭлементПунктПогрузки.Заголовок          = ?(ТекСтрока.ИндексПогрузки < 10,
			"  " + ТекСтрока.ИндексПогрузки, ТекСтрока.ИндексПогрузки);
		НовыйЭлементПунктПогрузки.Вид                = ВидПоляФормы.ПолеВвода;
		НовыйЭлементПунктПогрузки.ТолькоПросмотр     = Истина;
		НовыйЭлементПунктПогрузки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		НовыйЭлементПунктПогрузки.ПутьКДанным        = ПунктПогрузки;

		НовыеЭлементыМультимодальногоЗаказа.Добавить("ГруппаЗаказПогрузка" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ПунктПогрузкиДата" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ПунктПогрузки" + Индекс);
		
		ГруппаЗаказРазгрузка = Элементы.Добавить("ГруппаЗаказРазгрузка" + Индекс,
			Тип("ГруппаФормы"), ГруппаЗаказ);
		ГруппаЗаказРазгрузка.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаказРазгрузка.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаказРазгрузка.ОтображатьЗаголовок = Ложь; 
		ГруппаЗаказРазгрузка.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаказРазгрузка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		НовыйЭлементПунктРазгрузкиДата = Элементы.Добавить("ПунктРазгрузкиДата" + Индекс, Тип("ПолеФормы"),
			ГруппаЗаказРазгрузка);
		НовыйЭлементПунктРазгрузкиДата.Вид                = ВидПоляФормы.ПолеНадписи;
		НовыйЭлементПунктРазгрузкиДата.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлементПунктРазгрузкиДата.ПутьКДанным        = ПунктРазгрузкиДата;
		НовыйЭлементПунктРазгрузкиДата.Формат             = "ДФ='    dd.MM.yy HH:mm'; ДП=-";
		НовыйЭлементПунктРазгрузкиДата.Ширина             = 11;   
		НовыйЭлементПунктРазгрузкиДата.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
		НовыйЭлементПунктРазгрузкиДата.РастягиватьПоГоризонтали = Ложь;

		НовыйЭлементПунктРазгрузки = Элементы.Добавить("ПунктРазгрузки" + Индекс, Тип("ПолеФормы"),
		ГруппаЗаказРазгрузка);
		НовыйЭлементПунктРазгрузки.Заголовок          = ?(ТекСтрока.ИндексРазгрузки < 10,
			"  " + ТекСтрока.ИндексРазгрузки, ТекСтрока.ИндексРазгрузки);
		НовыйЭлементПунктРазгрузки.Вид                = ВидПоляФормы.ПолеВвода;
		НовыйЭлементПунктРазгрузки.ТолькоПросмотр     = Истина;
		НовыйЭлементПунктРазгрузки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		НовыйЭлементПунктРазгрузки.ПутьКДанным        = ПунктРазгрузки;
		
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ГруппаЗаказРазгрузка" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ПунктРазгрузкиДата" + Индекс);
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ПунктРазгрузки" + Индекс);
		
		НовыйЭлемент = Элементы.Добавить("ИзображениеИнтервал" + Индекс, Тип("ДекорацияФормы"),
			ГруппаЗаказ);
		НовыйЭлемент.Заголовок          = "";
		НовыйЭлемент.Вид                = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Ширина             = 1;
		НовыйЭлемент.Высота             = 1;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь; 
		НовыйЭлемент.РастягиватьПоВертикали   = Ложь;
		
		НовыеЭлементыМультимодальногоЗаказа.Добавить("ИзображениеИнтервал" + Индекс);

		Если Индекс = 1 Тогда
			ТипМаркераПогрузка = 1;
		Иначе
			ТипМаркераПогрузка = 2;
		КонецЕсли;
		
		Если Индекс = МаршрутМультимодальногоЗаказа.Количество() Тогда
			ТипМаркераРазгрузка = 3;
		Иначе
			ТипМаркераРазгрузка = 2;
		КонецЕсли;
			
		НовыйРеквизит = Новый РеквизитФормы(НаименованиеРеквизитаПогрузка, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НоваяСтрока   = НовыеРеквизитыМультимодальногоЗаказа.Добавить();
		НоваяСтрока.Наименование = НаименованиеРеквизитаПогрузка;
		НоваяСтрока.Значение     = уатЭлектронныеКартыСервер.МаркерЭтапаМультимодальногоЗаказа(ТипМаркераПогрузка,
		ЦветЗаказа.Красный, ЦветЗаказа.Зеленый, ЦветЗаказа.Синий);
		НоваяСтрока.Группа       = ГруппаЗаказПогрузка.Имя;
		НоваяСтрока.Элемент      = НовыйЭлементПунктПогрузки.Имя;
		
		НовыйРеквизит = Новый РеквизитФормы(НаименованиеРеквизитаРазгрузка, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НоваяСтрока   = НовыеРеквизитыМультимодальногоЗаказа.Добавить();
		НоваяСтрока.Наименование = НаименованиеРеквизитаРазгрузка;
		НоваяСтрока.Значение     = уатЭлектронныеКартыСервер.МаркерЭтапаМультимодальногоЗаказа(ТипМаркераРазгрузка,
		ЦветЗаказа.Красный, ЦветЗаказа.Зеленый, ЦветЗаказа.Синий);
		НоваяСтрока.Группа       = ГруппаЗаказРазгрузка.Имя;
		НоваяСтрока.Элемент      = НовыйЭлементПунктРазгрузки.Имя;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, ТекСтрока.Расстояние);
	СекВДату(ОбщееВремя, РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
	НадписьДлительностьМЗ = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
			+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
			+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");  
	НадписьРасстояниеМЗ = СтрШаблон("%1 км", Формат(ОбщееРасстояние, "ЧДЦ=2; ЧФ='Ч '; ЧН="));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Для Каждого ТекСтрока Из НовыеРеквизитыМультимодальногоЗаказа Цикл
		ЭтотОбъект[ТекСтрока.Наименование] = ТекСтрока.Значение;
		
		НовыйЭлемент = Элементы.Вставить(ТекСтрока.Наименование, Тип("ПолеФормы"),
			Элементы[ТекСтрока.Группа], Элементы[ТекСтрока.Элемент]);
		НовыйЭлемент.Вид                = ВидПоляФормы.ПолеКартинки;
		НовыйЭлемент.ПутьКДанным        = ТекСтрока.Наименование;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.Ширина             = 2;
		НовыйЭлемент.Высота             = 1;
		НовыйЭлемент.РазмерКартинки           = РазмерКартинки.РеальныйРазмер;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь; 
		НовыйЭлемент.РастягиватьПоВертикали   = Ложь;
		НовыйЭлемент.Рамка                    = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки); 
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;

		НовыеЭлементыМультимодальногоЗаказа.Добавить(ТекСтрока.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СекВДату(Знач Время,Дней,Часов,Минут,Секунд) 
	Дней = Цел(Время/(60*60*24));	
	Время = Время - Дней*(60*60*24);
	Часов = Цел(Время /(60*60));
	Время = Время - Часов*(60*60);	
	Минут = Цел(Время / 60);
	Секунд = Время - Минут*(60);
КонецФункции

#КонецОбласти

#Область Трек

&НаСервере
Процедура Трек_ЗаполнитьПериодТСПоДокументу()
	
	тПериодМаршрутаС      = Неопределено;
	тПериодМаршрутаПо     = Неопределено;
	тТранспортноеСредство = Неопределено;
	
	Если ТипЗнч(Трек_МаршрутныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда 
		ДанныеПунктов = Документы.уатМаршрутныйЛист.ПолучитьПлановыеФактическиеДатыПосещенияПунктов(Трек_МаршрутныйДокумент);
		
		Для Каждого ТекПункт Из ДанныеПунктов Цикл 
			Если ЗначениеЗаполнено(ТекПункт.ПрибытиеПлан) Тогда 
				Если тПериодМаршрутаС = Неопределено Тогда 
					тПериодМаршрутаС = ТекПункт.ПрибытиеПлан;
				Иначе 
					тПериодМаршрутаС = Мин(тПериодМаршрутаС, ТекПункт.ПрибытиеПлан);
				КонецЕсли;
				Если тПериодМаршрутаПо = Неопределено Тогда 
					тПериодМаршрутаПо = ТекПункт.ПрибытиеПлан;
				Иначе 
					тПериодМаршрутаПо = Макс(тПериодМаршрутаПо, ТекПункт.ПрибытиеПлан);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.УбытиеПлан) Тогда 
				Если тПериодМаршрутаС = Неопределено Тогда 
					тПериодМаршрутаС = ТекПункт.УбытиеПлан;
				Иначе 
					тПериодМаршрутаС = Мин(тПериодМаршрутаС, ТекПункт.УбытиеПлан);
				КонецЕсли;
				Если тПериодМаршрутаПо = Неопределено Тогда 
					тПериодМаршрутаПо = ТекПункт.УбытиеПлан;
				Иначе 
					тПериодМаршрутаПо = Макс(тПериодМаршрутаПо, ТекПункт.УбытиеПлан);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.ПрибытиеФакт) Тогда 
				Если тПериодМаршрутаС = Неопределено Тогда 
					тПериодМаршрутаС = ТекПункт.ПрибытиеФакт;
				Иначе 
					тПериодМаршрутаС = Мин(тПериодМаршрутаС, ТекПункт.ПрибытиеФакт);
				КонецЕсли;
				Если тПериодМаршрутаПо = Неопределено Тогда 
					тПериодМаршрутаПо = ТекПункт.ПрибытиеФакт;
				Иначе 
					тПериодМаршрутаПо = Макс(тПериодМаршрутаПо, ТекПункт.ПрибытиеФакт);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.УбытиеФакт) Тогда 
				Если тПериодМаршрутаС = Неопределено Тогда 
					тПериодМаршрутаС = ТекПункт.УбытиеФакт;
				Иначе 
					тПериодМаршрутаС = Мин(тПериодМаршрутаС, ТекПункт.УбытиеФакт);
				КонецЕсли;
				Если тПериодМаршрутаПо = Неопределено Тогда 
					тПериодМаршрутаПо = ТекПункт.УбытиеФакт;
				Иначе 
					тПериодМаршрутаПо = Макс(тПериодМаршрутаПо, ТекПункт.УбытиеФакт);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		тТранспортноеСредство = Трек_МаршрутныйДокумент.ТС;
	ИначеЕсли ТипЗнч(Трек_МаршрутныйДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
		Если Трек_МаршрутныйДокумент.Задание.Количество() = 0 Тогда 
			тПериодМаршрутаС  = Трек_МаршрутныйДокумент.ДатаВыезда;
			тПериодМаршрутаПо = Трек_МаршрутныйДокумент.ДатаВозвращения;
		Иначе 
			Для Каждого ТекСтрока Из Трек_МаршрутныйДокумент.Задание Цикл 
				Если ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия) Тогда 
					Если тПериодМаршрутаС = Неопределено Тогда 
						тПериодМаршрутаС = ТекСтрока.ВремяПрибытия;
					Иначе 
						тПериодМаршрутаС = Мин(тПериодМаршрутаС, ТекСтрока.ВремяПрибытия);
					КонецЕсли;
					Если тПериодМаршрутаПо = Неопределено Тогда 
						тПериодМаршрутаПо = ТекСтрока.ВремяПрибытия;
					Иначе 
						тПериодМаршрутаПо = Макс(тПериодМаршрутаПо, ТекСтрока.ВремяПрибытия);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.ВремяУбытия) Тогда 
					Если тПериодМаршрутаС = Неопределено Тогда 
						тПериодМаршрутаС = ТекСтрока.ВремяУбытия;
					Иначе 
						тПериодМаршрутаС = Мин(тПериодМаршрутаС, ТекСтрока.ВремяУбытия);
					КонецЕсли;
					Если тПериодМаршрутаПо = Неопределено Тогда 
						тПериодМаршрутаПо = ТекСтрока.ВремяУбытия;
					Иначе 
						тПериодМаршрутаПо = Макс(тПериодМаршрутаПо, ТекСтрока.ВремяУбытия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		тТранспортноеСредство = Трек_МаршрутныйДокумент.ТранспортноеСредство;
	КонецЕсли;
	
	Трек_ПериодМаршрутаС      = ?(тПериодМаршрутаС = Неопределено, '00010101', тПериодМаршрутаС);
	Трек_ПериодМаршрутаПо     = ?(тПериодМаршрутаПо = Неопределено, '00010101', тПериодМаршрутаПо);
	Трек_ТранспортноеСредство = тТранспортноеСредство;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиПроигрывания()
	
	Если Трек_ПроигратьПлановыйМаршрутПометка Тогда 
		Элементы.Трек_ПроигратьПлановыйМаршрут.Картинка  = БиблиотекаКартинок.уатИконкаПаузаПроигрыванияМаршрута;
		Элементы.Трек_ПроигратьПлановыйМаршрут.Заголовок = Нстр("ru = 'Остановить'");
	Иначе 
		Элементы.Трек_ПроигратьПлановыйМаршрут.Картинка  = БиблиотекаКартинок.уатИконкаПроигратьМаршрут;
		Элементы.Трек_ПроигратьПлановыйМаршрут.Заголовок = Нстр("ru = 'Воспроизвести'");
	КонецЕсли;
	
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда 
		Элементы.Трек_ПроигратьФактическийМаршрут.Картинка  = БиблиотекаКартинок.уатИконкаПаузаПроигрыванияМаршрута;
		Элементы.Трек_ПроигратьФактическийМаршрут.Заголовок = Нстр("ru = 'Остановить'");
	Иначе 
		Элементы.Трек_ПроигратьФактическийМаршрут.Картинка = БиблиотекаКартинок.уатИконкаПроигратьМаршрут;
		Элементы.Трек_ПроигратьФактическийМаршрут.Заголовок = Нстр("ru = 'Воспроизвести'");
	КонецЕсли;
	
	Если МЗ_ПроигратьПлановыйМаршрутПометка Тогда 
		Элементы.МЗ_ПроигратьПлановыйМаршрут.Картинка = БиблиотекаКартинок.уатИконкаПаузаПроигрыванияМаршрута;
		Элементы.МЗ_ПроигратьПлановыйМаршрут.Заголовок = Нстр("ru = 'Остановить'");
	Иначе 
		Элементы.МЗ_ПроигратьПлановыйМаршрут.Картинка = БиблиотекаКартинок.уатИконкаПроигратьМаршрут;
		Элементы.МЗ_ПроигратьПлановыйМаршрут.Заголовок = Нстр("ru = 'Воспроизвести'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_СкоростьПроигрыванияФактМаршрутаПриИзменении()
	
	Если ФактическийМаршрут = "" Тогда
		ФактическийМаршрут = "[]";
	КонецЕсли;

	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
		"false", 0, "false", ФактическийМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_СкоростьПроигрыванияПланМаршрутаПриИзменении()
	
	Если ПлановыйМаршрут = "" Тогда
		ПлановыйМаршрут = "[]";
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	"false", 0, "false", ПлановыйМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Трек_ПериодМаршрутаС  = Период.ДатаНачала;
	Трек_ПериодМаршрутаПо = Период.ДатаОкончания;
	
	ПоказатьМЛНаКарте(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаличиеСпидометра()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияРасчитатьФактРасстояние) Тогда
		ОтменитьВыполнениеЗаданияРасчитатьФактРасстояние(ИдентификаторЗаданияРасчитатьФактРасстояние);
	КонецЕсли;
	
	Если Трек_ОтображатьПоДокументу Тогда
		Если ТипЗнч(Трек_МаршрутныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ТС = ПолучитьЗначениеРеквизита(Трек_МаршрутныйДокумент, "ТС");
		Иначе
			Если НЕ ЗначениеЗаполнено(ТС) Тогда
				Возврат;
			КонецЕсли;
			ТС = ПолучитьЗначениеРеквизита(Трек_МаршрутныйДокумент, "ТранспортноеСредство");
		КонецЕсли;
	Иначе
		ТС = Трек_ТранспортноеСредство;
	КонецЕсли;
	Трек_ТекущееТранспортноеСредство = ТС;
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат;
	КонецЕсли;
	ДанныеТС = ПолучитьЗначениеРеквизитов(ТС, "Модель, ИспользуемаяСистемаGPS, ИсточникФактическихДанныхДляКартографии");
	МодельТС           = ДанныеТС.Модель; 
	НаличиеСпидометра  = ПолучитьЗначениеРеквизита(МодельТС, "НаличиеСпидометра");
	Если ДанныеТС.ИсточникФактическихДанныхДляКартографии = ПредопределенноеЗначение("Перечисление.уатИсточникФактическихДанныхДляКартографии.МобильноеПриложение") Тогда
		ИсточникФактическихДанныхДляКартографии = "МобильноеПриложение";
	ИначеЕсли ЗначениеЗаполнено(ДанныеТС.ИспользуемаяСистемаGPS) Тогда
		ИсточникФактическихДанныхДляКартографии = "Мониторинг";
	Иначе 
		ИсточникФактическихДанныхДляКартографии = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеТрека()
	Если НаличиеСпидометра Тогда
		Элементы.ДекорацияОтображатьФактическийМаршрут.Заголовок = Нстр("ru = 'Фактический маршрут:'");
		ФактическоеРасстояние = СтрЗаменить(ФактическоеРасстояние, "м/ч", "км");
	Иначе
		Элементы.ДекорацияОтображатьФактическийМаршрут.Заголовок = Нстр("ru = 'Факт. время работы:'");
		ФактическоеРасстояние = СтрЗаменить(ФактическоеРасстояние, "км", "м/ч");
		Если НЕ РежимОткрытия = "РежимКарты_АРМЛогиста" 
			И НЕ РежимОткрытия = "РежимКарты_АРМДиспетчера"
			И НЕ РежимОткрытия = "РежимКарты_ЗаказГрузоотправителя" Тогда
			ПлановоеРасстояние = "- км";
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОптимальноеПерестроениеМаршрута

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизации()
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеМаршрутаОбновитьПункты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ОбновитьПункты" Тогда 
		уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ДополнительныеПараметры.АдресаПунктов);
		ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		
	ИначеЕсли РезультатВопроса = "ПродолжитьБезОбновления" Тогда 
		ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Результат, ДопПараметры)
	
	УстановитьАдресХранилищаДляРезультатаМаршрутизации();
	уатЗащищенныеФункцииСервер_уэ.ОптимальноеПерестроениеМаршрута(
		АдресХранилищаДО, ДопПараметры.АдресаПунктов, ПунктыКПодбору[0].Пункт);
	ОптимальноеПерестроениеМаршрутаПослеМаршрутизации(Неопределено, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОптимальноеПерестроениеМаршрутаПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	ТекстПредупреждения = "";
	ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения);
	
	мсвМаршруты = ПолучитьДанныеМаршрутов(ОтображаемыйМаршрут);
	Если мсвМаршруты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мсвКоординатыДляФокусировки = Новый Массив();
	Транспорт_ОтобразитьПлановыйМаршрутНаКарте(мсвКоординатыДляФокусировки, Истина,
		мсвМаршруты[0].ЦветНаКарте, мсвМаршруты[0].УникальныйИдентификатор,,,, Истина, Ложь);
	
	ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
	ВыделитьНаКарте(ПараметрыКоманды);
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения)
	
	РаспредЗаказов = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	
	Если РаспредЗаказов = Неопределено Или Не ТипЗнч(РаспредЗаказов) = Тип("Структура") Или Не РаспредЗаказов.Свойство("пул") Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаЭтапыНовая = ПунктыКПодбору.Выгрузить(Новый Массив);
	СтрокаНовогоМаршрута = ТаблицаЭтапыНовая.Добавить();
	СтрокаНовогоМаршрута.ТипТочкиМаршрута  = Перечисления.уатТипыТочекМаршрута.Погрузка;
	СтрокаНовогоМаршрута.Пункт = ПунктыКПодбору[0].Пункт;
	
	Для Каждого ТекСтрока Из РаспредЗаказов.пул.Маршрут Цикл
		СтрокаНовогоМаршрута = ТаблицаЭтапыНовая.Добавить();
		СтрокаНовогоМаршрута.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		
		Для Каждого ТекЭтапСтарый Из ПунктыКПодбору Цикл
			Если ТипЗнч(ТекСтрока.Заказ) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ТекЭтапСтарый.Пункт = ТекСтрока.Заказ Тогда
				СтрокаНовогоМаршрута.Пункт = ТекЭтапСтарый.Пункт;
				Прервать;
			ИначеЕсли Строка(ТекЭтапСтарый.Пункт) = ТекСтрока.Заказ Тогда
				// Поиск пункта по строковому представлению
				СтрокаНовогоМаршрута.Пункт = ТекЭтапСтарый.Пункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(СтрокаНовогоМаршрута.Пункт) Тогда
			ТекстПредупреждения = НСтр("ru = 'Ошибка при оптимизации маршрута. 
			|В маршруте не найден переданный из маршрутизатора пункт %1'");
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ТекСтрока.Заказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПунктыКПодбору.Загрузить(ТаблицаЭтапыНовая);
	ТекстПредупреждения = НСтр("ru = 'Оптимизация маршрута выполнена успешно'");
КонецПроцедуры

&НаСервере
Функция ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(НастройкиМаршрутизации, ТекстОшибки)
	
	Грузоподъемность = 0;
	ОбъемКузова = 0;
	ТипТС = Неопределено;
	РежимОптимизацииМаршрута = Истина;
	ВозвратВГараж = Ложь;
	МассивПунктовРазгрузки = Новый Массив;
	ПунктОтправления = Неопределено;
	ТекстОшибки      = "";
	
	Сч = 0;
	Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
		Если Сч = 0 Тогда
			ПунктОтправления = ТекСтрока.Пункт;
		Иначе 
			МассивПунктовРазгрузки.Добавить(Новый Структура("Ссылка, GUID", ТекСтрока.Пункт, ТекСтрока.Пункт.Наименование));
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	ДанныеПоЗаказам = Новый Структура(
		"МассивПромежуточныхТочек, СтрокиЗаказаВДокументе, Гараж, УчитыватьГаражВозвращения, ГаражВозвращения, ДатаВыезда, КоличествоЗаказов",
		МассивПунктовРазгрузки,
		Новый Соответствие(),
		ПунктОтправления,
		Ложь,
		Неопределено,
		НачалоДня(ТекущаяДатаСеанса()),
		0
	);
	ХарактеристикиСцепки = Новый Структура("ТС,Грузоподъемность,ОбъемКузова", Неопределено, Грузоподъемность, ОбъемКузова);
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуSVRP(
		НачалоДня(ТекущаяДатаСеанса()),
		ХарактеристикиСцепки, 
		ДанныеПоЗаказам,
		НастройкиМаршрутизации,
		ТекстОшибки,
		Истина
	);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатSVRP(
		АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		
		Если ТекстОшибки = "" Тогда 
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыДлительнойОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ОтменитьВыполнение")
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		
		Попытка
			ОтключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания");
		Исключение
		КонецПопытки;
		
		ОповещениеПослеДлительнойОперации = Неопределено;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭкранироватьСимволы(СтрокаЭкранирования)
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаЭкранирования, """","\"""), "'", "\'"),
			"&", "\&"), "<", "\<"), ">", "\>");
КонецФункции

#КонецОбласти

#Область АРМ

&НаКлиенте
Функция ПоказатьДанныеАРМНаКарте(Знач ТаблицаМаршрутов, Знач мсвАдреса, ВыводитьНаКарту = Ложь,  ВыводитьВМассив = Ложь)
	
	ГруппаКомандОтображения = Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы;

	мсвКоординатыДляФокусировки = Новый Массив();
	
	ПараметрыТрассировки = "";
	
	МассивМаршрутов = Новый Массив();
	ТочкиМаршрута   = Новый Массив();
	
	ЕстьМЛ = Ложь;  
	Если ВыводитьВМассив Тогда
		МассивКомманд = Новый Массив();
	Иначе
		МассивКомманд = Неопределено;
	КонецЕсли;
	Если ГруппаКомандОтображения.ОтображатьМЛ.Пометка Тогда
		Для Каждого ТекМаршрут Из ТаблицаМаршрутов Цикл
			МассивИдентификаторов = СоответсвиеИдентификаторовФактМаршрута.Получить(ТекМаршрут.GUIDМЛ); 
			Если МассивИдентификаторов <> Неопределено Тогда
				Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
					ПараметрыКоманды = Новый Структура();
					ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
					ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, ВыводитьНаКарту И НЕ ВыводитьВМассив,,,,МассивКомманд);
				КонецЦикла; 
				МассивИдентификаторов = Новый Массив();
			Иначе
				МассивИдентификаторов = Новый Массив();
			КонецЕсли;
	
			Если ТекМаршрут.Координаты.Количество() < 2 Тогда 
				Продолжить;
			КонецЕсли;
			
			ЦветМаршрута	 = ТекМаршрут.Цвет;
			
			Если ЦветМаршрута = Неопределено
				ИЛИ Не ТипЗнч(ЦветМаршрута) = Тип("Цвет") Тогда 
				ТекМаршрут.Цвет = Новый Цвет;
				ТекМаршрут.Цвет.Зеленый = 255;
				ТекМаршрут.Цвет.Красный = 255;
				ТекМаршрут.Цвет.Синий   = 255;
				
				ЦветМаршрута	 = ТекМаршрут.Цвет;
			КонецЕсли;
			
			Если ТекМаршрут.Координаты.Количество() > 1 Тогда 
				ТочкаСтарта = ТекМаршрут.Координаты[0];
				СчТочек = 1;
				Если Не (ТочкаСтарта.lat = 0 И ТочкаСтарта.lon = 0) Тогда 
					
					ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТочкаСтарта.lat, ТочкаСтарта.lon, 
					ТочкаСтарта.Представление, КластеризацияМаркеровНаКарте, ТочкаСтарта.НомерИконки,
					уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, ЦветМаршрута.Красный, ЦветМаршрута.Зеленый, ЦветМаршрута.Синий));
					ПараметрыКоманды.Вставить("МЛ", ТекМаршрут.GUIDМЛ);
					ПараметрыКоманды.Вставить("ТС", ТекМаршрут.GUIDТС);
					
					ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
					МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
					ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
					ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту И НЕ ВыводитьВМассив,,,,МассивКомманд);
				КонецЕсли;
				
				ТочкиМаршрута = Новый Массив();
				стрМсвТочек   = "";
				Для Сч = 0 По ТекМаршрут.Координаты.Количество() - 1 Цикл
					СтрокаС  = ТекМаршрут.Координаты[Сч];
					
					Если (СтрокаС.lat = 0 И СтрокаС.lon = 0) Тогда 
						Продолжить;
					КонецЕсли;
					
					Если Сч <> 0 Тогда
						СчТочек = СчТочек + 1;
						ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(СтрокаС.lat, СтрокаС.lon, 
						СтрокаС.Представление, КластеризацияМаркеровНаКарте, ТочкаСтарта.НомерИконки,
						уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочек, ЦветМаршрута.Красный, ЦветМаршрута.Зеленый, ЦветМаршрута.Синий));
						ПараметрыКоманды.Вставить("МЛ", ТекМаршрут.GUIDМЛ);
						ПараметрыКоманды.Вставить("ТС", ТекМаршрут.GUIDТС);
						
						ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
						МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
						ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
						ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту И НЕ ВыводитьВМассив,,,,МассивКомманд);
					КонецЕсли;
					
					стрМсвТочек = стрМсвТочек + ?(стрМсвТочек = "", "", ",") +
					"[" + Формат(СтрокаС.lat, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," + Формат(СтрокаС.lon, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "]";
					
					ТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", СтрокаС.lat, СтрокаС.lon));
					
				КонецЦикла;
				
				Если НЕ ЯндексКарты Тогда
					
					ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута, Цвет, Толщина, Факт, МЛ, ТС"
					+ ?(ТекМаршрут.Фокус, ",ПлановыйМаршрут", ""),
					стрМсвТочек, ТочкиМаршрута, уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ЦветМаршрута.Красный, ЦветМаршрута.Зеленый, ЦветМаршрута.Синий),
					?(ТекМаршрут.Фокус, "9","''"), ?(ТекМаршрут.Фокус,"true","false"), ТекМаршрут.GUIDМЛ, ТекМаршрут.GUIDТС);
					МассивМаршрутов.Добавить(ПараметрыКоманды);
				Иначе
					
					ПараметрыТрассировки = "";
					ПараметрыТрассировки = ПараметрыТрассировки + ?(ПараметрыТрассировки="", "", ",")
					+ "[["+стрМсвТочек+"], '"
					+ уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ЦветМаршрута.Красный, ЦветМаршрута.Зеленый, ЦветМаршрута.Синий)
					+ "', " + ?(ТекМаршрут.Фокус, "8","''") + ", " + ?(ТекМаршрут.Фокус, "true","false") + "]";
					
					ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута,
					|Цвет, Толщина, Факт, МЛ, ТС, ПараметрыТрассировки"
					+ ?(ТекМаршрут.Фокус, ",ПлановыйМаршрут", ""),
					стрМсвТочек, ТочкиМаршрута, уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ЦветМаршрута.Красный, ЦветМаршрута.Зеленый, ЦветМаршрута.Синий),
					?(ТекМаршрут.Фокус, "9","''"),  ?(ТекМаршрут.Фокус, "true","false"), ТекМаршрут.GUIDМЛ, ТекМаршрут.GUIDТС, ПараметрыТрассировки);
					МассивМаршрутов.Добавить(ПараметрыКоманды);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекМаршрут.Фокус Тогда
				мсвКоординатыДляФокусировки = ТочкиМаршрута;
			КонецЕсли; 
			
			СоответсвиеИдентификаторовФактМаршрута.Вставить(ТекМаршрут.GUIDМЛ, МассивИдентификаторов); 
		КонецЦикла;
		
		ОтобразитьДанныеНаКартеМассив(МассивКомманд);
		
		РассчитатьМаршрут(МассивМаршрутов, ЯндексКарты);
		Для Каждого ТекПараметрыКоманды Из МассивМаршрутов Цикл 
			ЕстьМЛ = Истина;
			МассивИдентификаторов = СоответсвиеИдентификаторовФактМаршрута.Получить(ТекПараметрыКоманды.МЛ); 
			Если МассивИдентификаторов = Неопределено Тогда
				МассивИдентификаторов = Новый Массив();
			КонецЕсли;   
			
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ТекПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			СоответсвиеИдентификаторовФактМаршрута.Вставить(ТекПараметрыКоманды.МЛ, МассивИдентификаторов); 
			
			ОбработатьКомандуКарты("traceRoute", ТекПараметрыКоманды, ВыводитьНаКарту);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ТекАдрес Из мсвАдреса Цикл
		МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(ТекАдрес.ДанныеЗаказа.Ссылка); 
		Если МассивИдентификаторов <> Неопределено Тогда
			Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
				ПараметрыКоманды = Новый Структура();
				ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина);
			КонецЦикла; 
			МассивИдентификаторов = Новый Массив();
		Иначе
			МассивИдентификаторов = Новый Массив();
		КонецЕсли;

		флУстановитьФокус = Ложь;
		
		Если ГруппаКомандОтображения.ОтображатьПунктыПогрузкиЗаказов.Пометка Тогда 
			Маркер_ТипТочки = 1;
			
			ЦветКартинки = "";
			Маркер = уатЭлектронныеКартыКлиент.ПолучитьМаркерПункта(Маркер_ТипТочки, ТекАдрес.ЦветЛинии.Красный,
			ТекАдрес.ЦветЛинии.Зеленый, ТекАдрес.ЦветЛинии.Синий, ЦветКартинки);
				
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекАдрес.АдресОтправления.Лат,
			ТекАдрес.АдресОтправления.Лон, ТекАдрес.АдресОтправления.Представление, КластеризацияМаркеровНаКарте, "9",
			Маркер, Маркер_ТипТочки, ЦветКартинки);  
			ПараметрыКоманды.Вставить("ДанныеЗаказа", ТекАдрес.ДанныеЗаказа);
			ПараметрыКоманды.Вставить("Лат", ТекАдрес.АдресОтправления.Лат);
			ПараметрыКоманды.Вставить("Лон", ТекАдрес.АдресОтправления.Лон);

			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
			
			флУстановитьФокус = Истина;
		КонецЕсли;
		
		Если ГруппаКомандОтображения.ОтображатьПунктыРазгрузкиЗаказов.Пометка Тогда 
			Маркер_ТипТочки = 5;
			
			ЦветКартинки = "";
			Маркер = уатЭлектронныеКартыКлиент.ПолучитьМаркерПункта(Маркер_ТипТочки, ТекАдрес.ЦветЛинии.Красный,
			ТекАдрес.ЦветЛинии.Зеленый, ТекАдрес.ЦветЛинии.Синий, ЦветКартинки);
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекАдрес.АдресНазначения.Лат,
			ТекАдрес.АдресНазначения.Лон, ТекАдрес.АдресНазначения.Представление, КластеризацияМаркеровНаКарте, "9",
			Маркер, Маркер_ТипТочки, ЦветКартинки);
			ПараметрыКоманды.Вставить("ДанныеЗаказа", ТекАдрес.ДанныеЗаказа);
			ПараметрыКоманды.Вставить("Лат", ТекАдрес.АдресНазначения.Лат);
			ПараметрыКоманды.Вставить("Лон", ТекАдрес.АдресНазначения.Лон);

			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту);
			
			флУстановитьФокус = Истина;
		КонецЕсли;
		
		Если ГруппаКомандОтображения.ОтображатьНаправленияЗаказов.Пометка Тогда 
			стрЦветЛинии = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ТекАдрес.ЦветЛинии.Красный,ТекАдрес.ЦветЛинии.Зеленый,ТекАдрес.ЦветЛинии.Синий);
			
			Координаты = "["+Формат(ТекАдрес.АдресОтправления.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + ","
			+ Формат(ТекАдрес.АдресОтправления.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "],[" 
			+ Формат(ТекАдрес.АдресНазначения.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + ","
			+ Формат(ТекАдрес.АдресНазначения.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0") 
			+ "]";
			ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление",
			Координаты, "'" + стрЦветЛинии + "'", ?(ТекАдрес.Фокус, "9", "5"),  "true");
			
			ТекУникальныйИдентификатор = Новый УникальныйИдентификатор();
			МассивИдентификаторов.Добавить(ТекУникальныйИдентификатор);
			ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
			
			ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды, ВыводитьНаКарту);
			
			флУстановитьФокус = Истина;
		КонецЕсли;
		
		АРМДиспетчера_ЗаказыКПодбору = ТекАдрес.ДанныеЗаказа.Ссылка;
		
		Если флУстановитьФокус
			И ТекАдрес.Фокус
			И мсвКоординатыДляФокусировки.Количество() = 0 Тогда
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекАдрес.АдресОтправления.Лат,
				ТекАдрес.АдресОтправления.Лон));
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекАдрес.АдресНазначения.Лат,
				ТекАдрес.АдресНазначения.Лон));
		КонецЕсли;
			
		СоответсвиеИдентификаторовМаршрута.Вставить(ТекАдрес.ДанныеЗаказа.Ссылка, МассивИдентификаторов);
	КонецЦикла;
	
	ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
	ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, ВыводитьНаКарту);
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьТСизАРМЛогиста(ВыводитьНаКарту = Ложь)
	
	Если ФормаАРМ = Неопределено
		ИЛИ Не ФормаАРМ.Открыта() Тогда 
		Возврат;
	КонецЕсли;
	
	мсвТС = Новый Массив();
	Если РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Попытка
			Если ФормаАРМ.НастройкаРежимОтображенияМЛ = 0 Тогда
				Для Каждого ТекТС Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл 
					мсвТС.Добавить(ТекТС.ТС);
				КонецЦикла;
			Иначе
				Для Каждого ТекТС Из ФормаАРМ.МаршрутыСписок Цикл 
					мсвТС.Добавить(ТекТС.ТС);
				КонецЦикла;
			КонецЕсли;
		Исключение
			Для Каждого ТекТС Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл 
				мсвТС.Добавить(ТекТС.ТС);
			КонецЦикла;
		КонецПопытки;
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМДиспетчера" Тогда
		Для Каждого ТекТС Из ФормаАРМ.МаршрутыСписок Цикл 
			мсвТС.Добавить(ТекТС.ТС);
		КонецЦикла;
	КонецЕсли;
	
	мсвКоординатДляФокусировки = Новый Массив();
	
	Если Элементы.ГруппаОтображениеОбъектов.ПодчиненныеЭлементы.ОтображатьТС.Пометка Тогда
		ТаблицаТС = уатЭлектронныеКартыСервер.ПолучитьДанныеТС(мсвТС);
		Для Каждого ДанныеТС Из ТаблицаТС Цикл 
			Если Не ДанныеТС.Геокодирован Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекстНадписи = ДанныеТС.ТекстНадписи;
			
			Картинка = "";
			Если ДанныеТС.ТСЗанято Тогда 
				НомерИконки = 2;
				ЦветСостояния = ДанныеТС.ЦветСостояния;
				Картинка = уатЭлектронныеКартыКлиент.ПолучитьМаркерТС(2,
				ЦветСостояния, ДанныеТС.ИспользуетсяМП, ДанныеТС.ТСНеНаЛинии);
			Иначе 
				НомерИконки = 1;
				Картинка = уатЭлектронныеКартыКлиент.ПолучитьМаркерТС(1,,
				ДанныеТС.ИспользуетсяМП, ДанныеТС.ТСНеНаЛинии);
			КонецЕсли;
			
			ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ДанныеТС.Лат,
			ДанныеТС.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, НомерИконки, Картинка);
			
			ПараметрыКоманды.Вставить("Идентификатор", ДанныеТС.УникальныйИдентификатор);
			ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды, ВыводитьНаКарту, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьХарактеристикТСДляПодбора()
	
	ЗаказыКПодбору_ОбъемКузова      = 0;
	ЗаказыКПодбору_Грузоподъемность = 0;
	ЗаказыКПодбору_МаксКолУпак      = 0;

	Если ФормаАРМ = Неопределено
		ИЛИ НЕ ФормаАРМ.Открыта()
		ИЛИ НЕ РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТСДляПодбораЗаказовВАРМ) Тогда 
		Возврат;
	КонецЕсли;
	
	ХарактеристикиТС = ПолучитьСуммарныеХарактеристикиСцепки(ТСДляПодбораЗаказовВАРМ,
		ФормаАРМ.НастройкаАлгоритмМаршрутизации, ФормаАРМ.КоэффициентГрузоподъемности,
		ФормаАРМ.КоэффициентОбъемаКузова);
	
	ЗаказыКПодбору_ОбъемКузова      = ХарактеристикиТС.ОбъемКузова;
	ЗаказыКПодбору_Грузоподъемность = ХарактеристикиТС.Грузоподъемность;
	ЗаказыКПодбору_МаксКолУпак      = ХарактеристикиТС.МаксимальноеКоличествоУпаковок;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммарныеХарактеристикиСцепки(ТС,
	НастройкаАлгоритмМаршрутизации, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова)
	
	ХарактеристикиСцепки = Новый Структура("Грузоподъемность, ОбъемКузова, МаксимальноеКоличествоУпаковок, ТипТС", 0, 0, 0, Неопределено);
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(ТС);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	Запрос.УстановитьПараметр("КоэфГрузоподъемности", КоэффициентГрузоподъемности);
	Запрос.УстановитьПараметр("КоэфОбъемаКузова",     КоэффициентОбъемаКузова);
	Запрос.УстановитьПараметр("ЯндексМаршрутизация",  НастройкаАлгоритмМаршрутизации = 3);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатТС.Грузоподъемность <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатТС.Грузоподъемность * &КоэфГрузоподъемности
	|		ИНАЧЕ уатТС.Модель.Грузоподъемность * &КоэфГрузоподъемности
	|	КОНЕЦ КАК Грузоподъемность,
	|	ВЫБОР
	|		КОГДА уатТС.ОбъемКузова <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатТС.ОбъемКузова * &КоэфОбъемаКузова
	|		ИНАЧЕ уатТС.Модель.ОбъемКузова * &КоэфОбъемаКузова
	|	КОНЕЦ КАК ОбъемКузова,
	|	ВЫБОР
	|		КОГДА уатТС.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатТС.МаксимальноеКоличествоУпаковок
	|		ИНАЧЕ уатТС.Модель.МаксимальноеКоличествоУпаковок
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.Ссылка В(&мсвТС)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ХарактеристикиСцепки.Грузоподъемность               = Выборка.Грузоподъемность;
		ХарактеристикиСцепки.ОбъемКузова                    = Выборка.ОбъемКузова;
		ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок = Выборка.МаксимальноеКоличествоУпаковок;
	КонецЕсли;
		
	ХарактеристикиСцепки.ТипТС = ТС.ТипТС;
	Если Не ЗначениеЗаполнено(ХарактеристикиСцепки.ТипТС) Тогда 
		ХарактеристикиСцепки.ТипТС = ТС.Модель.ТипТС;
	КонецЕсли;
	
	Возврат ХарактеристикиСцепки;
	
КонецФункции // ПолучитьСуммарныеХарактеристикиСцепки()

&НаКлиенте
Процедура ЗаказыКПодборуОбновитьИтоги()

	Список_ИтогоМаршрутыВсегоТС         = 0;
	Список_ИтогоМаршрутыМЛ              = 0;
	Список_ИтогоМаршрутыРасстояние      = 0;
	Список_ИтогоМаршрутыВремяВПути      = 0;
	Список_ИтогоМаршрутыВремяСтоянок    = 0;
	Список_ИтогоМаршрутыВремяВсего      = 0;
	Список_ИтогоМаршрутыЗаказов         = 0;
	Список_ИтогоМаршрутыВес             = 0;
	Список_ИтогоМаршрутыВесВсего        = 0;
	Список_ИтогоМаршрутыОбъем           = 0;
	Список_ИтогоМаршрутыОбъемВсего      = 0;
	Список_ИтогоМаршрутыКолМест         = 0;
	Список_ИтогоМаршрутыВремяОжидания   = 0;
	Список_ИтогоПунктовПогрузки         = 0;
	Список_ИтогоПунктовРазгрузки        = 0;
	Список_ИтогоМаршрутыКолМестВсего    = 0;
	Список_ИтогоКоличествоПунктов       = 0;
	
	АРМ_СводнаяИнформацияЗаказы           = "";
	АРМ_СводнаяИнформацияВесМЛ            = "";
	АРМ_СводнаяИнформацияОбьемМЛ          = "";
	АРМ_СводнаяИнформацияКоличествоМестМЛ = "";
	АРМ_СводнаяИнформацияКоличествоМЛ     = "";
	АРМ_СводнаяИнформацияРасстояние       = "";
	АРМ_СводнаяИнформацияВремяВПути       = "";
	АРМ_СводнаяИнформацияПункты           = "";
	АРМ_СводнаяИнформацияВремяСтоянок     = "";
	АРМ_СводнаяИнформацияВремяОжидания    = "";
	
	
	флПогрузки  = Ложь;
	флРазгрузки = Ложь;
	
	Список_ИтогоМаршрутыВесВсего     = Список_ИтогоМаршрутыВесВсего + ЗаказыКПодбору_Грузоподъемность;
	Список_ИтогоМаршрутыОбъемВсего   = Список_ИтогоМаршрутыОбъемВсего + ЗаказыКПодбору_ОбъемКузова;
	Список_ИтогоМаршрутыКолМестВсего = Список_ИтогоМаршрутыКолМестВсего + ЗаказыКПодбору_МаксКолУпак;

	СоответсвиеЗаказов = Новый Соответствие();
	
	ЭлементыВеткаПункты = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы();
	Если ЭлементыВеткаПункты.Количество() > 0 Тогда
		Список_ИтогоМаршрутыМЛ = Список_ИтогоМаршрутыМЛ + 1;
		Для Каждого ТекСтрокаПункт Из ЭлементыВеткаПункты Цикл
			Список_ИтогоКоличествоПунктов = Список_ИтогоКоличествоПунктов + 1;
			мВремяСтоянки  = 0;
			мВремяОжидания = 0;
			
			флПогрузки  = Ложь;
			флРазгрузки = Ложь;
			
			ЭлементыВеткаЗаказ = ТекСтрокаПункт.ПолучитьЭлементы();
			Для Каждого ТекСтрокаЗаказ Из ЭлементыВеткаЗаказ Цикл
				мВремяСтоянки  = уатАРМКлиент.СложитьВремя(мВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
				Если ТекСтрокаЗаказ.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
					Если СоответсвиеЗаказов.Получить(ТекСтрокаЗаказ.Этап) = Неопределено Тогда
						СоответсвиеЗаказов.Вставить(ТекСтрокаЗаказ.Этап, ТекСтрокаЗаказ.Этап);
						Список_ИтогоМаршрутыЗаказов = Список_ИтогоМаршрутыЗаказов + 1;
					КонецЕсли;
					Список_ИтогоМаршрутыВес     = Список_ИтогоМаршрутыВес + ТекСтрокаЗаказ.ВесБрутто;
					Список_ИтогоМаршрутыОбъем   = Список_ИтогоМаршрутыОбъем + ТекСтрокаЗаказ.Объем;
					Список_ИтогоМаршрутыКолМест = Список_ИтогоМаршрутыКолМест + ТекСтрокаЗаказ.КолМест;
					
					флПогрузки  = Истина;
				ИначеЕсли ТекСтрокаЗаказ.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
					флРазгрузки = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если флПогрузки Тогда
				Список_ИтогоПунктовПогрузки = Список_ИтогоПунктовПогрузки + 1;
			КонецЕсли;
			
			Если флРазгрузки Тогда
				Список_ИтогоПунктовРазгрузки = Список_ИтогоПунктовРазгрузки + 1;
			КонецЕсли;
			
			мВремяСтоянки  = уатАРМКлиент.СложитьВремя(мВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
			
			Список_ИтогоМаршрутыВремяОжидания	 = уатАРМКлиент.СложитьВремя(Список_ИтогоМаршрутыВремяОжидания, ТекСтрокаПункт.Ожидание);
			Список_ИтогоМаршрутыВремяВПути		 = уатАРМКлиент.СложитьВремя(Список_ИтогоМаршрутыВремяВПути, ТекСтрокаПункт.ВремяВПути);
			Список_ИтогоМаршрутыВремяСтоянок	 = уатАРМКлиент.СложитьВремя(Список_ИтогоМаршрутыВремяСтоянок, мВремяСтоянки);
			
			Список_ИтогоМаршрутыВремяВсего = уатАРМКлиент.СложитьВремя(Список_ИтогоМаршрутыВремяВсего, ТекСтрокаПункт.ВремяВПути);
			Список_ИтогоМаршрутыВремяВсего = уатАРМКлиент.СложитьВремя(Список_ИтогоМаршрутыВремяВсего, ТекСтрокаПункт.Ожидание);
			Список_ИтогоМаршрутыВремяВсего = уатАРМКлиент.СложитьВремя(Список_ИтогоМаршрутыВремяВсего, мВремяСтоянки);
			
			Список_ИтогоМаршрутыРасстояние = Список_ИтогоМаршрутыРасстояние + ТекСтрокаПункт.Расстояние;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлементыВеткаПункты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АРМ_СводнаяИнформацияЗаказы           = СтрШаблон(НСтр("ru = 'Пунктов: %1; Заказов: %2'"),
	Строка(Список_ИтогоКоличествоПунктов), Строка(Список_ИтогоМаршрутыЗаказов));
	АРМ_СводнаяИнформацияВесМЛ            = Строка(Список_ИтогоМаршрутыВес) + " / " + Список_ИтогоМаршрутыВесВсего;
	АРМ_СводнаяИнформацияОбьемМЛ          = Строка(Список_ИтогоМаршрутыОбъем) + " / " + Список_ИтогоМаршрутыОбъемВсего;
	АРМ_СводнаяИнформацияКоличествоМестМЛ = Строка(Список_ИтогоМаршрутыКолМест) + " / " + Список_ИтогоМаршрутыКолМестВсего;
	АРМ_СводнаяИнформацияКоличествоМЛ     = Строка(Список_ИтогоМаршрутыМЛ);
	АРМ_СводнаяИнформацияРасстояние       = Строка(Список_ИтогоМаршрутыРасстояние);
	АРМ_СводнаяИнформацияВремяВПути       = Формат(Список_ИтогоМаршрутыВремяВПути, "ЧДЦ=2; ЧРД=:");
	АРМ_СводнаяИнформацияВремяСтоянок     = Формат(Список_ИтогоМаршрутыВремяСтоянок, "ЧДЦ=2; ЧРД=:");
	АРМ_СводнаяИнформацияВремяОжидания    = Формат(Список_ИтогоМаршрутыВремяОжидания, "ЧДЦ=2; ЧРД=:");
	АРМ_СводнаяИнформацияПункты           = Строка(Список_ИтогоПунктовПогрузки) + " / " + Список_ИтогоПунктовРазгрузки;

КонецПроцедуры

&НаКлиенте
Процедура АктивизацияСтрокиТСАРМЛогиста(Параметры = Неопределено)
	Если ФормаАРМ = Неопределено
		ИЛИ НЕ ФормаАРМ.Открыта()
		ИЛИ РежимОткрытия <> "РежимКарты_АРМЛогиста" Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("Очистить") Тогда 
			ТСДляПодбораЗаказовВАРМ     = Неопределено;
			ТСДляПодбораЗаказовВАРМGUID = "";
			АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
			ОбновитьНадписьХарактеристикТСДляПодбора();
			ЗаказыКПодборуОбновитьИтоги();
			Возврат;
		ИначеЕсли Параметры.Свойство("ТС") 
			И ЗначениеЗаполнено(Параметры.ТС) Тогда
			Если ТСДляПодбораЗаказовВАРМ <> Параметры.ТС Тогда
				ТСДляПодбораЗаказовВАРМ = Параметры.ТС;
				ОбновитьНадписьХарактеристикТСДляПодбора();
			КонецЕсли;
			ТСДляПодбораЗаказовВАРМGUID = Параметры.GUID;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТСДляПодбораЗаказовВАРМ) Тогда 
		ТСДляПодбораЗаказовВАРМGUID = "";
		АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		ЗаказыКПодборуОбновитьИтоги();
		Возврат;
	КонецЕсли;

	Если ФормаАРМ.НастройкаРежимОтображенияМЛ = 0 Тогда
		
		СтрокаТС = Неопределено;
		Для Каждого ТекСтрокаТС Из ФормаАРМ.МаршрутыДерево.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаТС.ТС = ТСДляПодбораЗаказовВАРМ Тогда 
				СтрокаТС = ТекСтрокаТС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТС = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтрокаМЛ = Неопределено;
		Для Каждого ТекСтрокаМЛ Из СтрокаТС.ПолучитьЭлементы() Цикл 
			Если ТекСтрокаМЛ.GUID = ТСДляПодбораЗаказовВАРМGUID Тогда 
				СтрокаМЛ = ТекСтрокаМЛ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТС.ПолучитьЭлементы().Количество() = 0 Тогда 
			СтрокаМЛ = СтрокаТС;
			ТСДляПодбораЗаказовВАРМGUID = "";
			АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
			ЗаказыКПодборуОбновитьИтоги();
			Возврат;
		КонецЕсли;
		
		Если ТСДляПодбораЗаказовВАРМGUID = ""
			И СтрокаМЛ = Неопределено Тогда
			СтрокаМЛ = СтрокаТС.ПолучитьЭлементы()[0];
			ТСДляПодбораЗаказовВАРМGUID = СтрокаМЛ.GUID;
		ИначеЕсли СтрокаМЛ = Неопределено Тогда 
			ТСДляПодбораЗаказовВАРМGUID = "";
			АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
			ЗаказыКПодборуОбновитьИтоги();
			Возврат;
		КонецЕсли;
		
		АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		
		НомерПункта = 1;
		Для Каждого ТекПункт Из СтрокаМЛ.ПолучитьЭлементы() Цикл 
			НовСтрокаПункт = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, ТекПункт);
			
			НовСтрокаПункт.НомерПункта = НомерПункта;
			НомерПункта = НомерПункта + 1;
			Для Каждого ТекСтрокаЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрокаЗаказ);
			КонецЦикла;
		КонецЦикла;
	Иначе
		
		ТекущиеДанные = ФормаАРМ.Элементы.МаршрутыСписок.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.GUID <> ТСДляПодбораЗаказовВАРМGUID Тогда
			Возврат;
		КонецЕсли;
		
		АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Очистить();
		
		Для Каждого ТекПункт ИЗ ФормаАРМ.МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл 
			НовСтрокаПункт = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, ТекПункт);
			НовСтрокаПункт.GUIDМЛ = НовСтрокаПункт.GUIDТС;
			
			Для Каждого ТекСтрокаЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекСтрокаЗаказ);
				НовСтрокаЗаказ.GUIDМЛ = НовСтрокаЗаказ.GUIDТС;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ЗаказыКПодборуОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораТСДляПодбораВАРМ(мсвТС, Текст, ДанныеВыбора)
	
	Для Каждого ТекТС Из мсвТС Цикл 
		ТекПредставление = Строка(ТекТС);
		
		Если ПустаяСтрока(Текст) Тогда 
			ДанныеВыбора.Добавить(ТекТС);
			
		Иначе 
			Если Не Лев(НРег(ТекПредставление), СтрДлина(Текст)) = НРег(Текст) Тогда 
				Продолжить;
			КонецЕсли;
			
			врПозицияОтсечения = СтрДлина(Текст);
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ТекПредставление, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ТекПредставление, СтрДлина(ТекПредставление)-врПозицияОтсечения)));
			ДанныеВыбора.Добавить(ТекТС, тПредставление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивПунктовПодбора(РежимОткрытия)
	
	МассивПунктов = Новый Массив();
	Если РежимОткрытия = "РежимКарты_Маршруты" Тогда
		Индекс   = 0;
		ТекПункт = Неопределено;
		Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
			Если ТипЗнч(ТекСтрока.Пункт) = Тип("Строка")
				ИЛИ (ТекПункт <> Неопределено
				И ТекСтрока.Пункт = ТекПункт) Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
			ТекСтрока.Пункт, 0, Индекс));
			Индекс = Индекс + 1;
		КонецЦикла;
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Индекс   = 0;
		ТекПункт = Неопределено;
		Для Каждого ТекСтрока Из АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
			Если ТипЗнч(ТекСтрока.Группировка) = Тип("Строка")
				ИЛИ (ТекПункт <> Неопределено
				И ТекСтрока.Группировка = ТекПункт) Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
			ТекСтрока.Группировка, ТекСтрока.Расстояние, Индекс));
			Индекс = Индекс + 1;
		КонецЦикла;
	ИначеЕсли РежимОткрытия = "РежимКарты_МаршрутныйЛист" Тогда
		Индекс   = 0;
		ТекПункт = Неопределено;
		Для Каждого ТекСтрока Из Трек_МаршрутныйДокумент.Заказы Цикл
			Если ТипЗнч(ТекСтрока.Пункт) = Тип("Строка")
				ИЛИ (ТекПункт <> Неопределено
				И ТекСтрока.Пункт = ТекПункт) Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
			ТекСтрока.Пункт, ТекСтрока.Расстояние, Индекс));
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат МассивПунктов;

КонецФункции

&НаКлиенте
Процедура ПодборПунктаВМаршрутЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПодборПунктаВМаршрут(Результат.НовыйАдресСсылка, Результат.ТипОтрезкаПути);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборПунктаВМаршрут(НовыйАдресСсылка, ТипОтрезкаПути)
	
	Если РежимОткрытия = "РежимКарты_Маршруты" Тогда
		мсвКоординатДляФокусировки = Новый Массив();
		
		ИспользоватьДляПланированияВАРМЛогиста = Ложь;
		Если ЗначениеЗаполнено(ТекущийМаршрут) Тогда
			ИспользоватьДляПланированияВАРМЛогиста = ПолучитьЗначениеРеквизита(ТекущийМаршрут, "ИспользоватьДляПланированияВАРМЛогиста"); 
		Иначе
			Возврат;
		КонецЕсли;
		
		ПодборПунктаВМаршрутЗавершение_Маршруты(НовыйАдресСсылка, мсвКоординатДляФокусировки, ИспользоватьДляПланированияВАРМЛогиста, ТипОтрезкаПути);
		
		МассивИдентификаторов = СоответсвиеИдентификаторовМаршрута.Получить(ТекущийМаршрут);
		Если МассивИдентификаторов <> Неопределено Тогда
			Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
				ПараметрыКоманды = Новый Структура();
				ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, РежимАктивацииОтбора);  
			КонецЦикла;
			МассивИдентификаторов = Новый Массив();
			СоответсвиеИдентификаторовМаршрута.Удалить(ТекущийМаршрут);
		КонецЕсли;

		мсвМаршруты = ПолучитьДанныеМаршрутов(ТекущийМаршрут);
		Если мсвМаршруты.Количество() <> 0 Тогда
			мсвМаршруты[0].мсвПунктыСледования = Неопределено;
			ОтобразитьМаршрутыНаКарте(мсвМаршруты, Истина, Ложь); 
			мсвКоординатыДляФокусировки = Новый Массив();
			мсвПунктыСледования = мсвМаршруты[0].мсвПунктыСледования;
			Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
				Если ТекПункт.Лат = 0 И ТекПункт.Лон = 0 Тогда 
					Продолжить;
				КонецЕсли; 
				мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
			КонецЦикла;
			
			ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
			ВыделитьНаКарте(ПараметрыКоманды);
		КонецЕсли;
		
	ИначеЕсли РежимОткрытия = "РежимКарты_АРМЛогиста" Тогда
		Если АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() = 0 Тогда
			ТекстНСТР = НСтр("en='It is nessecary to choose routing list!';ru='Необходимо выбрать маршрутный лист!'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
				
		мсвКоординатДляФокусировки = Новый Массив();
		ИндексПункта = ПодборПунктаВМаршрутЗавершение_АРМЛогиста(НовыйАдресСсылка, мсвКоординатДляФокусировки, ТипОтрезкаПути);
		
		ТекущиеДанные = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[0];  
		
		МассивИдентификаторов = СоответсвиеИдентификаторовФактМаршрута.Получить(ТекущиеДанные.GUIDМЛ);
		Если МассивИдентификаторов <> Неопределено Тогда
			Для Каждого ТекУникальныйИдентификатор Из МассивИдентификаторов Цикл
				ПараметрыКоманды = Новый Структура();
				ПараметрыКоманды.Вставить("Идентификатор", ТекУникальныйИдентификатор);
				ОбработатьКомандуКарты("deleteObject", ПараметрыКоманды, Истина, РежимАктивацииОтбора);  
			КонецЦикла;
			МассивИдентификаторов = Новый Массив();
			СоответсвиеИдентификаторовФактМаршрута.Удалить(ТекущиеДанные.GUIDМЛ);
		КонецЕсли;

		АРМ_МаршрутыДобавитьПунктЗавершениеСписок(НовыйАдресСсылка, ТекущиеДанные);
		
		мсвКоординатДляФокусировки = Новый Массив();
		
		ТекущиеДанныеИсточник = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()
		[АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы().Количество() - 1];
		
		Если ТипЗнч(ИндексПункта) = Тип("Число") Тогда
			ИндексПункта = АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы()[ИндексПункта].ПолучитьИдентификатор();
			ТекущиеДанныеПриемник = АРМ_МаршрутыСписокЗаказовДерево.НайтиПоИдентификатору(ИндексПункта);
		Иначе
			Возврат;
		КонецЕсли;
		
		GUIDПунктаИсточник = ТекущиеДанныеИсточник.GUIDПункта;
		GUIDЗаказаИсточник = ТекущиеДанныеИсточник.GUIDЗаказа;
		GUIDПунктаПриемник = ТекущиеДанныеПриемник.GUIDПункта;
		GUIDЗаказаПриемник = ТекущиеДанныеПриемник.GUIDЗаказа;
		
		Оповестить("ЭлектронныеКарты_МаршрутыПеретаскивание",
		Новый Структура("GUIDПунктаИсточник,GUIDЗаказаИсточник,GUIDПунктаПриемник,GUIDЗаказаПриемник",
		GUIDПунктаИсточник,
		GUIDЗаказаИсточник,
		GUIDПунктаПриемник,
		GUIDЗаказаПриемник));
		
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды);
		
	ИначеЕсли РежимОткрытия = "РежимКарты_МаршрутныйЛист" Тогда
		Оповестить("ЭлектронныеКарты_ПодборПунктаВМаршрут",
		Новый Структура("Пункт, Источник, ТипОтрезкаПути", НовыйАдресСсылка, Трек_МаршрутныйДокумент, ТипОтрезкаПути), ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АРМ_МаршрутыДобавитьПунктЗавершениеСписок(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда		
		GUIDТС     = ТекущиеДанные.GUIDТС;
		GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
		GUIDПункта = ТекущиеДанные.GUIDПункта;
		GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
		
		Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС", Новый Структура("GUIDМЛ,GUIDТС,ПерестроениеМЛ",
		GUIDМЛ, GUIDТС, Истина));
		Оповестить("ЭлектронныеКарты_МаршрутыДобавитьПункт",
		Результат);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодборПунктаВМаршрутЗавершение_АРМЛогиста(Результат, мсвКоординатДляФокусировки, ТипОтрезкаПути)
	
	МассивПунктов        = Новый Массив();
	МассивПунктовСсылок  = Новый Массив();
	
	Индекс   = 0;
	ТекПункт = Неопределено;
	Для Каждого ТекСтрока Из АРМ_МаршрутыСписокЗаказовДерево.ПолучитьЭлементы() Цикл
		Если ТипЗнч(ТекСтрока.Группировка) = Тип("Строка")
			ИЛИ (ТекПункт <> Неопределено
			И ТекСтрока.Группировка = ТекПункт) Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
		ТекСтрока.Группировка, ТекСтрока.Расстояние, Индекс));
		МассивПунктовСсылок.Добавить(ТекСтрока.Группировка);
		Индекс = Индекс + 1;
	КонецЦикла;

	мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", Результат.Лат, Результат.Лон));
	
	Если ТипОтрезкаПути = 1 Тогда
		ИндексНовогоПункта = Индекс;
	Иначе
		ИндексНовогоПункта = ПодборПунктаВМаршрутСервер(Результат, МассивПунктов, МассивПунктовСсылок);
	КонецЕсли;
	
	Возврат ИндексНовогоПункта;

КонецФункции

&НаСервереБезКонтекста
Функция ПодборПунктаВМаршрутСервер(НовыйПункт, МассивПунктов, МассивПунктовСсылок)
	
	Возврат уатЭлектронныеКартыСервер.ПодборПунктаВМаршрут(НовыйПункт, МассивПунктов, МассивПунктовСсылок);
	
КонецФункции

&НаСервере
Процедура ПодборПунктаВМаршрутЗавершение_Маршруты(Результат, мсвКоординатДляФокусировки, ИспользоватьДляПланированияВАРМЛогиста, ТипОтрезкаПути)
	
	МассивПунктов        = Новый Массив();
	МассивПунктовСсылок  = Новый Массив();
	
	Индекс   = 0;
	ТекПункт = Неопределено;
	Для Каждого ТекСтрока Из ПунктыКПодбору Цикл
		Если ТипЗнч(ТекСтрока.Пункт) = Тип("Строка")
			ИЛИ (ТекПункт <> Неопределено
			И ТекСтрока.Пункт = ТекПункт) Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
		ТекСтрока.Пункт, 0, Индекс));
		МассивПунктовСсылок.Добавить(ТекСтрока.Пункт);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ТипОтрезкаПути = 1 Тогда
		ИндексНовогоПункта = Индекс;
	Иначе
		ИндексНовогоПункта = ПодборПунктаВМаршрутСервер(Результат, МассивПунктов, МассивПунктовСсылок);
	КонецЕсли;

	Если ПунктыКПодбору.Количество() = 0 Тогда
		ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
	ИначеЕсли ПунктыКПодбору.Количество() = 1 Тогда
		ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
	Иначе
		Если ИспользоватьДляПланированияВАРМЛогиста Тогда
			ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
		Иначе
			ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		КонецЕсли;
	КонецЕсли;
	
	НовСтрока = ПунктыКПодбору.Вставить(ИндексНовогоПункта);
	НовСтрока.Пункт            = Результат;
	НовСтрока.ТипТочкиМаршрута = ТипТочкиМаршрута;

	мсвКоординатДляФокусировки.Добавить(Новый Структура("Лат, Лон", Результат.Лат, Результат.Лон));

КонецПроцедуры

&НаКлиенте
Процедура АРМ_ПослеЗакрытияФормыВыбораГаражаСписок(РезультатЗакрытия, ТекущиеДанные) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	GUIDТС     = ТекущиеДанные.GUIDТС;
	GUIDМЛ     = ТекущиеДанные.GUIDМЛ;
	GUIDПункта = ТекущиеДанные.GUIDПункта;
	GUIDЗаказа = ТекущиеДанные.GUIDЗаказа;
	
	Оповестить("ЭлектронныеКарты_АктивизацияСтрокиТС", Новый Структура("GUIDМЛ,GUIDТС,ПерестроениеМЛ",
	GUIDМЛ, GUIDТС, Истина));
	Оповестить("ЭлектронныеКарты_МаршрутыДобавитьГараж",
	РезультатЗакрытия);

	
КонецПроцедуры


#КонецОбласти

#Область ПрочиеДокументы

&НаКлиенте
Процедура ОтобразитьПарковкиЗаправки()

	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.уатПарковка") Тогда
		ОтобразитьПарковку();

	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.уатОтчетПоставщикаПЦ") Тогда
		ОтобразитьЗаправку();

	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.уатШтраф") Тогда
		ОтобразитьШтраф();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПарковку()
	
	СтруктураРеквизиотов = ПолучитьЗначениеРеквизитов(ОбъектОснование, "КоординатыЗоны, ПарковочнаяЗона, ТС");
	КоординатыЗоны       = СтруктураРеквизиотов.КоординатыЗоны;
	ПарковочнаяЗона      = СтруктураРеквизиотов.ПарковочнаяЗона;
	ТС                   = СтруктураРеквизиотов.ТС;
	
	МассивWKT = Новый Массив();
	МассивWKT.Добавить("Geometry");
	МассивWKT.Добавить("Point");
	МассивWKT.Добавить("LineString");
	МассивWKT.Добавить("Polygon");
	МассивWKT.Добавить("MultiPoint");
	МассивWKT.Добавить("MultiLineString");
	МассивWKT.Добавить("MultiPolygon");
	МассивWKT.Добавить("Triangle");
	
	Для Каждого ТекСтрока Из МассивWKT Цикл
		КоординатыЗоны = СтрЗаменить(СтрЗаменить(СтрЗаменить(КоординатыЗоны, ТекСтрока, ""), ВРег(ТекСтрока), ""), НРег(ТекСтрока), "");
	КонецЦикла;
	
	КоординатыЗоны = СтрЗаменить(СтрЗаменить(КоординатыЗоны, "(", ""), ")", "");
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КоординатыЗоны, ",");
	
	мсвКоординат = "";
	мМассивПодстрок = Новый Массив();
	мсвКоординатыДляФокусировки = Новый Массив;
	Для Каждого ТекТочка Из МассивПодстрок Цикл 
		мМассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекТочка, " ");
		Если мМассивПодстрок.Количество() = 2 Тогда
			стрКоординаты = "[" + Формат(мМассивПодстрок[1], "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," + Формат(мМассивПодстрок[0], "ЧРД=.; ЧН=0.0000; ЧГ=0") + "]";
			мсвКоординат  = мсвКоординат + ?(мсвКоординат="", стрКоординаты, "," + стрКоординаты);
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", мМассивПодстрок[1], мМассивПодстрок[0]));

		КонецЕсли;
	КонецЦикла;
	
	ЦветЗоныСтр = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(2, 97, 192);
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Координаты",     мсвКоординат);
	ПараметрыКоманды.Вставить("ЦветЗоны",       ЦветЗоныСтр);
	ПараметрыКоманды.Вставить("Редактирование", "false");
	
	ОбработатьКомандуКарты("showPolygon", ПараметрыКоманды);
		
	Если мМассивПодстрок.Количество() = 2 Тогда
		ТекстНСТР   = НСтр("en='Parking:';ru='Парковка:'");
		ТекстНСТР_1 = НСтр("en='Vehicle:';ru='ТС:'");
		ТекстНадписи = "<STRONG>" + ТекстНСТР + "</STRONG> " + ЭкранироватьСимволы(ПарковочнаяЗона)
		+ "<br><STRONG>" + ТекстНСТР_1 + "</STRONG> " + ЭкранироватьСимволы(Строка(ТС));
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(мМассивПодстрок[1], мМассивПодстрок[0], 
				ТекстНадписи, Ложь, "8",
				уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(БиблиотекаКартинок.уатКартаПарковка, "png", СоответсвиеКартинок));
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды)
	
	КонецЕсли;
	
	Если мсвКоординатыДляФокусировки.Количество() Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, Ложь);
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЗаправку()
	
	МассивЗаправок = ПолучитьЗаправки(ОбъектОснование);
	
	МассивПараметрыКоманд       = Новый Массив();
	мсвКоординатыДляФокусировки = Новый Массив();
	Для Каждого ТекСтрока Из МассивЗаправок Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Лат)
			И НЕ ЗначениеЗаполнено(ТекСтрока.Лон) Тогда
			Продолжить;
		КонецЕсли;
		
		МестоЗаправкиНаименование = ТекСтрока.МестоЗаправкиНаименование;
		ТС                        = ТекСтрока.ТС;
		Дата                      = ТекСтрока.Дата;
		ГСМ                       = ТекСтрока.НоменклатураОтчета;
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекСтрока.Лат, ТекСтрока.Лон));
		
		ТекстНСТР   = НСтр("en='Gas station:';ru='Заправка:'");
		ТекстНСТР_1 = НСтр("en='Date:';ru='Дата:'");
		ТекстНСТР_2 = НСтр("en='Fuels:';ru='ГСМ:'");
		ТекстНСТР_3 = НСтр("en='Vehicle:';ru='ТС:'");
		ТекстНадписи = "<STRONG>" + ТекстНСТР + "</STRONG> " + ЭкранироватьСимволы(МестоЗаправкиНаименование)
		+ "<br><STRONG>" + ТекстНСТР_1 + "</STRONG> " + Формат(Дата, "ДФ='dd.MM.yyyy HH:mm'")
		+ "<br><STRONG>" + ТекстНСТР_2 + "</STRONG> " + ЭкранироватьСимволы(Строка(ГСМ))
		+ "<br><STRONG>" + ТекстНСТР_3 + "</STRONG> " + ЭкранироватьСимволы(Строка(ТС));
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекСтрока.Лат, ТекСтрока.Лон, 
		ТекстНадписи, Ложь, "8", уатЗащищенныеФункцииСервер_проф.СформироватьАдресКартинкиИзКонфигурации(БиблиотекаКартинок.уатКартаЗаправка));
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);

	КонецЦИкла;
	
	ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
	ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаправки(ОбъектОснование)
	
	МассивЗаправок = Новый Массив();
	Для Каждого ТекСтрока Из ОбъектОснование.Заправки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Лат)
			И НЕ ЗначениеЗаполнено(ТекСтрока.Лон) Тогда
			Продолжить;
		КонецЕсли;
		МассивЗаправок.Добавить(Новый Структура("Лат, Лон, МестоЗаправкиНаименование, ТС, Дата, НоменклатураОтчета",
		ТекСтрока.Лат,ТекСтрока.Лон,ТекСтрока.МестоЗаправкиНаименование,ТекСтрока.ТС,ТекСтрока.Дата, ТекСтрока.НоменклатураОтчета));
	КонецЦИкла;
	Возврат МассивЗаправок;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьШтраф()
	
	СтруктураРеквизиотов = ПолучитьЗначениеРеквизитов(ОбъектОснование, "Лат, Лон, ТС");
	Лат       = СтруктураРеквизиотов.Лат;
	Лон       = СтруктураРеквизиотов.Лон;
	ТС        = СтруктураРеквизиотов.ТС;
	
	Если НЕ ЗначениеЗаполнено(Лат)
		И НЕ ЗначениеЗаполнено(Лон)
		И НЕ СообщениеШтрафаВыведено Тогда
		СообщениеШтрафаВыведено = Истина;
		ТекстНСТР = НСтр("ru='Координаты штрафа не определены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	мсвКоординат = "";
	мсвКоординатыДляФокусировки = Новый Массив;
	мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", Лат, Лон));
	
	ЦветЗоныСтр = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(2, 97, 192);
			
	ТекстНСТР   = НСтр("en='Parking:';ru='Штраф:'");
	ТекстНСТР_1 = НСтр("en='Vehicle:';ru='ТС:'");
	ТекстНадписи = "<STRONG>" + ТекстНСТР + "</STRONG> " + ЭкранироватьСимволы(Строка(ОбъектОснование))
	+ "<br><STRONG>" + ТекстНСТР_1 + "</STRONG> " + ЭкранироватьСимволы(Строка(ТС));
	
	ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(Лат, Лон, 
	ТекстНадписи, Ложь, "8",
	уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(БиблиотекаКартинок.уатКартаМестоНарушенияПДД, "png", СоответсвиеКартинок));
	ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);
	
	Если мсвКоординатыДляФокусировки.Количество() Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСправочникНаКарте()
	
	Широта  = 55.753318;
	Долгота = 37.620736;
	
	ИзображениеИзМакета  = ПолучитьИзображениеИзТипаПункта(ОбъектОснование, СоответсвиеКартинокТиповПунктов);

	ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(Широта,
	Долгота, ЭкранироватьСимволы(Строка(ОбъектОснование)), КластеризацияМаркеровНаКарте, "8",
	уатЭлектронныеКартыКлиент.СформироватьАдресКартинкиИзКонфигурации(ИзображениеИзМакета, "svg+xml", СоответсвиеКартинок));
	ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);

	мсвКоординатыДляФокусировки = Новый Массив();
	мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", Широта, Долгота));
	
	Если мсвКоординатыДляФокусировки.Количество() Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьТрекМаршрутаНаКарте(ШиротаВъезда, ДолготаВъезда, ШиротаСъезда, ДолготаСъезда)
	
	ЦветТрека = Новый Цвет(0, 0, 0);
	
	мсвКоординатыДляФокусировки = Новый Массив();
	мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ШиротаВъезда, ДолготаВъезда));
	мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ШиротаСъезда, ДолготаСъезда));
	
	ТекстНСТР_1  = НСтр("ru='Въезд на тарифицируемый участок'");
	ВъездНадпись = "<strong>" + ТекстНСТР_1 + "</strong> ";
	
	ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ШиротаВъезда,
		ДолготаВъезда, ВъездНадпись, КластеризацияМаркеровНаКарте, "9",
		уатЭлектронныеКартыКлиент.ПолучитьМаркерПункта(3, ЦветТрека.Красный, ЦветТрека.Зеленый, ЦветТрека.Синий));
	ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);
		
	ТекстНСТР_1  = НСтр("ru='Съезд с тарифицируемого участка'");
	СъездНадпись = "<strong>" + ТекстНСТР_1 + "</strong> ";
	
	ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ШиротаСъезда,
		ДолготаСъезда, СъездНадпись, КластеризацияМаркеровНаКарте, "9",
		уатЭлектронныеКартыКлиент.ПолучитьМаркерПункта(3, ЦветТрека.Красный, ЦветТрека.Зеленый, ЦветТрека.Синий));
	ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);

	стрМсвТочек = "["+Формат(ШиротаВъезда, "ЧРД=.; ЧН=0.0000; ЧГ=0") + ","
		+ Формат(ДолготаВъезда, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "],[" 
		+ Формат(ШиротаСъезда, "ЧРД=.; ЧН=0.0000; ЧГ=0") + ","
		+ Формат(ДолготаСъезда, "ЧРД=.; ЧН=0.0000; ЧГ=0") 
		+ "]";
		
	ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута, Цвет, Толщина, Факт",
		стрМсвТочек, мсвКоординатыДляФокусировки, 
		уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(ЦветТрека.Красный, ЦветТрека.Зеленый, ЦветТрека.Синий), "''",  "true");

	ОбработатьКомандуКарты("traceRoute", ПараметрыКоманды);
	
	Если мсвКоординатыДляФокусировки.Количество() Тогда 
		ПараметрыКоманды = Новый Структура("мсвКоординат", мсвКоординатыДляФокусировки);
		ВыделитьНаКарте(ПараметрыКоманды, СтрокаФокуса, Ложь);
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

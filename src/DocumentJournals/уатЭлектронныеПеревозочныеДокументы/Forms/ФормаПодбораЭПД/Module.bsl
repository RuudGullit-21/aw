
#Область ПеременныеФормы

&НаКлиенте
Перем ТекущиеДанныеСсылка; // Хранит данные строки ТЧ
&НаКлиенте
Перем РеквизитыТекущейВерсииТитула;
&НаКлиенте
Перем РеквизитыТекущейВерсииТитулаГрузополучатель;
&НаКлиенте
Перем РеквизитыТекущейВерсииТитулаГрузоперевозчик;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаСпискаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Внешнему пользователю физическому лицу запрещено открытие документов
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() И ТипЗнч(ПользователиКлиентСервер.АвторизованныйПользователь().ОбъектАвторизации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Параметры.Свойство("ЭПД", ЭПД);
	Если ТипЗнч(ЭПД.СсылкаТитулГрузоотправителяГрузополучатель) = Тип("СправочникСсылка.Организации") Тогда
		// Титул грузополучателя
		Элементы.ОтборГрузополучатель.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Элементы.ОтборГрузоотправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты"); 
		Элементы.ОтборПеревозчик.ОграничениеТипа       = Новый ОписаниеТипов("СправочникСсылка.Контрагенты"); 
		
		ТипЭТрН = "Грузополучатель";
		
		Элементы.ИсточникДат.СписокВыбора.Очистить(); 
		Элементы.ИсточникДат.СписокВыбора.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1, Нстр("ru = 'Т1 оформление'"));
		Элементы.ИсточникДат.СписокВыбора.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2, Нстр("ru = 'Т2 Погрузка'"));
		Элементы.ИсточникДат.СписокВыбора.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3, Нстр("ru = 'Т3 Приемка'"));
		
		Элементы.ОтборВодитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица, СписокЗначений");
	Иначе
		Элементы.ОтборГрузополучатель.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ОтборГрузоотправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты"); 
		Элементы.ОтборПеревозчик.ОграничениеТипа       = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ТипЭТрН = "Перевозчик";
		
		Элементы.ОтборВодитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СписокЗначений");
		
		Элементы.ИсточникДат.СписокВыбора.Очистить(); 
		Элементы.ИсточникДат.СписокВыбора.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1, Нстр("ru = 'Т1 оформление'"));
		Элементы.ИсточникДат.СписокВыбора.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2, Нстр("ru = 'Т2 Погрузка'"));

		ЗакрытиеЗаказовНаТСПутевымиЛистами = Константы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Получить();
	КонецЕсли; 
	
	ИсточникДат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
	
	Список.ТекстЗапроса = УстановитьТекстЗапросаСписка(ЗакрытиеЗаказовНаТСПутевымиЛистами);  
		
	ПравоРедактированияДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.уатЗаказГрузоотправителя);
	Если НЕ ПравоРедактированияДокумента Тогда 
		Элементы.ФормаИзменитьВыделенные.Видимость                 = Ложь;
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;
		Элементы.ФормаОткрытьРедакторЦепочкиДокументов.Видимость   = Ложь;
	КонецЕсли;
	
	АвторизованВнешнийПользователь = Ложь;
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора                  = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = АвторизованныйКонтрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
		Элементы.ПодменюЗаполнить.Видимость = Ложь;
		Элементы.ПодменюПечать.Видимость = Ложь;
		Элементы.ФормаИзменитьВыделенные.Видимость = Ложь;
	КонецЕсли;
		
	УстановитьЦветаСтатусов();
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	уатОбщегоНазначенияСервер.ПереместитьКнопкуКонтакты(Элементы);
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот") = Ложь Тогда
		Элементы.СтатусОбработкиСопроводительныхДокументов.Видимость      = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") = Ложь Тогда
		Элементы.КартинкаЕстьРасхождения.Видимость = Ложь;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ВключенОтбор", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", Новый Массив);
	
	ЗапрещенныеВОтбореПоля = Новый Массив;
	ЗапрещенныеВОтбореПоля.Добавить("СтатусЗаказа");
	ЗапрещенныеВОтбореПоля.Добавить("СтатусОбработкиСопроводительныхДокументов");
	Список.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеВОтбореПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменен заказ грузоотправителя"
			Или ИмяСобытия = "Изменен маршрутный лист" 
			Или ИмяСобытия = "Изменено закрытие заказов на ТС"
			Или ИмяСобытия = "Изменен статус заказа" Тогда
		
		Элементы.Список.Обновить();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ПодключаемоеОборудование 
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаСпискаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСсылка = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование  
	ЗаполнитьОтборыПоЭПД(ЭПД, РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель);
	УстановитьОтборы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СтатусЗаказа
		И ПравоРедактированияДокумента Тогда 
		СтандартнаяОбработка = Ложь;
		
		РеквизитыЗаказа = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ВыбраннаяСтрока.Ссылка, "Мультимодальный, ЭтоЭтап, Проведен, ДатаЗакрытия");
		
		Если РеквизитыЗаказа.Мультимодальный
			И НЕ РеквизитыЗаказа.ЭтоЭтап Тогда 
			ТекстНСТР = НСтр("en = 'Immediate installation of the status of the multimodal parent order is prohibited.'; ru = 'Непосредственная установка статуса мультимодального родительского заказа запрещена.'")
				+ Символы.ПС + НСтр("en = 'It is necessary to set the stage statuses for this order.'; ru = 'Необходимо устанавливать статусы этапов по данному заказу.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			
		Иначе
			ТекДанные = Элементы.Список.ТекущиеДанные;
			флДокументЗакрыт = Ложь;
			Если Не ТекДанные = Неопределено Тогда 
				Если ТекДанные.СтатусЗаказа = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда 
					флДокументЗакрыт = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// Проверка на доступ на изменение пользователем закрытого документа.
			РазрешитьРедактирование = Ложь;
			Если флДокументЗакрыт Тогда
				ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
				РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекПользователь, "РазрешитьРедактированиеЗакрытыхДокументов");
			КонецЕсли;
			
			Если флДокументЗакрыт И НЕ РазрешитьРедактирование Тогда 
				ТекстНСТР = НСтр("en='This order has already been closed. Status can not be changed.';ru='Данный заказ уже был закрыт. Изменение статуса невозможно.'");
				ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Иначе 
				ПараметрыФормыВыбора = Новый Структура("ПоказатьВводДаты");
				ФормаВыбораСтатуса = ПолучитьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
				ФормаВыбораСтатуса.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокВыборПослеВыбораСтатуса", ЭтотОбъект, ВыбраннаяСтрока);
				ФормаВыбораСтатуса.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				
				ЭлементОтбора = ФормаВыбораСтатуса.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДействуетНаЗаказыГрузоотправителей");
				ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение   = Истина;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.Использование    = Истина;
				
				ФормаВыбораСтатуса.Открыть();
			КонецЕсли;
		КонецЕсли;
	Иначе  
		ЗаказНаТС = ВыбраннаяСтрока.Ссылка;
		Рейс      = ВыбраннаяСтрока.СвязанныйДокумент;
		ВыбратьДокументыСервер();
		
		Оповестить("ФормаПодбораЭПД_Выбор");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И Не ТекДанные.Свойство("ГруппировкаСтроки") И ТекДанные.Мультимодальный И ТекДанные.ЭтоЭтап Тогда
		Оповестить("Изменен заказ грузоотправителя", ТекДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	КлючиСтрок = Строки.ПолучитьКлючи();
	МассивЗаказов = Новый Массив();
	Для Каждого ТекСтрока Из КлючиСтрок Цикл
		МассивЗаказов.Добавить(ТекСтрока.Ссылка);
	КонецЦикла;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	               |ПОМЕСТИТЬ втЭтапы
	               |ИЗ
	               |	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	               |ГДЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	втЭтапы.Этап КАК Этап,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	               |ИЗ
	               |	втЭтапы КАК втЭтапы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЭтапы.Этап КАК Заказ
	               |					ИЗ
	               |						втЭтапы КАК втЭтапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = втЭтапы.Этап)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЭтапы.ЗаказГрузоотправителя,
	               |	втЭтапы.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	               |ИЗ
	               |	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ уатСтатусыГрузов_уэСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, Заказ В (&мсвЗаказов)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание,
	               |	КОЛИЧЕСТВО(уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент) КАК Всего,
	               |	СУММА(ВЫБОР
	               |			КОГДА уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ОбработкаЗавершена
	               |ПОМЕСТИТЬ втСтатусыСопроводительныхДокументовСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание В (&МсвЗаказов)) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказы.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ КАК СтатусЗаказа,
	               |	СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) <> 0 КАК НаличиеСопроводительныхДокументов,
	               |	ВЫБОР
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.Всего) = СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена)
	               |			ТОГДА 3
	               |		КОГДА СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) = 0
	               |			ТОГДА 0
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК СтатусОбработкиСопроводительныхДокументов
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	               |		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ уатСтатусыГрузов_уэСрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказы.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыСопроводительныхДокументовСрезПоследних КАК втСтатусыСопроводительныхДокументовСрезПоследних
	               |		ПО втЗаказы.Ссылка = втСтатусыСопроводительныхДокументовСрезПоследних.Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ";
	Запрос.УстановитьПараметр("мсвЗаказов", МассивЗаказов);

	ВыборкаЗаказ = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из Строки Цикл
		ДанныеСтрокаСписка = ТекСтрока.Значение.Данные;
		Отбор              = Новый Структура("Ссылка", ДанныеСтрокаСписка.Ссылка);
		Выборка            = ВыборкаЗаказ.НайтиСтроки(Отбор);
		
		Если Выборка.Количество() <> 0 Тогда
			ДанныеСтрокаСписка.СтатусЗаказа = Выборка[0].СтатусЗаказа; 
			ДанныеСтрокаСписка.СостояниеВыполненияСтрока = Строка(ДанныеСтрокаСписка.ПроцентВыполнения)
			+ "% " + Нстр("en = 'done'; ru = 'выполнено'");
			ДанныеСтрокаСписка.НаличиеСопроводительныхДокументов         = Выборка[0].НаличиеСопроводительныхДокументов;
			ДанныеСтрокаСписка.СтатусОбработкиСопроводительныхДокументов = Выборка[0].СтатусОбработкиСопроводительныхДокументов; 
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)   
	Если НЕ флагОтборСтатус Тогда 
		флагОтборСтатус = Истина;
	КонецЕсли;

	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТСПриИзменении(Элемент)   
	Если НЕ флагОтборТС Тогда 
		флагОтборТС = Истина;
	КонецЕсли;

	УстановитьОтборы(,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительПриИзменении(Элемент)   
	Если НЕ флагОтборВодитель Тогда 
		флагОтборВодитель = Истина;
	КонецЕсли;

	УстановитьОтборы(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОтборГрузоотправительПриИзменении(Элемент)   
	Если НЕ флагОтборГрузоотправитель Тогда 
		флагОтборГрузоотправитель = Истина;
	КонецЕсли;

	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборГрузополучательПриИзменении(Элемент) 
	Если НЕ флагОтборГрузополучатель Тогда 
		флагОтборГрузополучатель = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПеревозчикПриИзменении(Элемент)  
	Если НЕ флагОтборПеревозчик Тогда 
		флагОтборПеревозчик = Истина;
	КонецЕсли;

	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВремяПодачиПриИзменении(Элемент)
	Если НЕ флагОтборДатаВремяПодачи Тогда 
		флагОтборДатаВремяПодачи = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборФактическиеДатаВремяПодачиПриИзменении(Элемент) 
	Если НЕ флагОтборФактическиеДатаВремяПодачи Тогда 
		флагОтборФактическиеДатаВремяПодачи = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВремяУбытияПриИзменении(Элемент)
	Если НЕ флагОтборДатаВремяУбытия Тогда 
		флагОтборДатаВремяУбытия = Истина;
	КонецЕсли;

	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданЭПДПриИзменении(Элемент) 
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборГрузоотправительПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборГрузополучательПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборПеревозчикПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборДатаВремяПодачиПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборФактическиеДатаВремяПодачиПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборОтборДатаВремяУбытияПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборТСПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура флагОтборСтатусПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительЭПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка   = Ложь;
	ПараметрыОткрытияФормы = Новый Структура("Ключ", ЭПД);
	ФормаЭТРН = ПолучитьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыОткрытияФормы);
	Попытка
		ФормаЭТРН.Элементы.Страницы.ТекущаяСтраница.ТолькоПросмотр = Истина;
	Исключение
	КонецПопытки;
	ОбменСГИСЭПДКлиент.ВывестиФормуВводаДанных(ФормаЭТРН, "ХранимыеДанныеТитулГрузоотправителяВодители",, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТСЭПДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка   = Ложь;
	ПараметрыОткрытияФормы = Новый Структура("Ключ", ЭПД);
	ФормаЭТРН = ПолучитьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыОткрытияФормы); 
	Попытка
		ФормаЭТРН.Элементы.Страницы.ТекущаяСтраница.ТолькоПросмотр = Истина;
	Исключение
	КонецПопытки;
	ОбменСГИСЭПДКлиент.ВывестиФормуВводаДанных(ФормаЭТРН, "ХранимыеДанныеТитулГрузоотправителяТранспортноеСредство",, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьДокументы(Команда)  
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	Конецесли;
	ЗаказНаТС = ТекущиеДанные.Ссылка;
	Рейс      = ТекущиеДанные.СвязанныйДокумент; 
	
	ВыбратьДокументыСервер();  
	
	Оповестить("ФормаПодбораЭПД_Выбор");
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)  
	ПараметрыСоздания = СоздатьДокументыСервер(РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель);
	ПараметрыСоздания = Новый Структура("ЭПД", ПараметрыСоздания);    
	
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаДокумента", ПараметрыСоздания);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЦветаСтатусов()
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.СтатусЗаказа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтатусЗаказа");
		ПолеОформления.Использование = Истина;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.СтатусЗаказа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗаказовСтатусЗаказа");
		ПолеОформления.Использование = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) И ТипЗнч(ДополнительныеПараметры) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		Если РезультатЗакрытия.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда 
			Если ЗначениеЗаполнено(РезультатЗакрытия.ДатаУстановки) Тогда 
				СообщениеОшибки = "";
				флСуммаУслугИзменилась = Ложь;
				флПересчетИтогов = Ложь;
				ЗакрытиеЗаказаСервер(ДополнительныеПараметры, РезультатЗакрытия.ДатаУстановки, СообщениеОшибки, Истина, флСуммаУслугИзменилась, флПересчетИтогов);
				Если Не ПустаяСтрока(СообщениеОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
				Иначе
					Если флСуммаУслугИзменилась И НЕ флПересчетИтогов Тогда
						ПоказатьПредупреждение(Неопределено, НСтр("en='Recalculation of tabular section ""Incomes"" was not done!';ru='Не выполнен пересчет табличной части ""Доходы""!'"));
					КонецЕсли;
					Элементы.Список.Обновить();
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			УстановитьСтатусБезОткрытияФормы(ДополнительныеПараметры, РезультатЗакрытия.Статус, РезультатЗакрытия.ДатаУстановки);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусБезОткрытияФормы(ЗаказСсылка, НовыйСтатус, ДатаУстановкиСтатуса)
	
	Документы.уатЗаказГрузоотправителя.УстановитьСтатусЗаказа(ЗаказСсылка, НовыйСтатус, ДатаУстановкиСтатуса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗакрытиеЗаказаСервер(ДокументСсылка, ДатаЗакрытия, СообщениеОшибки = "", Интерактивно = Ложь, флСуммаУслугИзменилась = Ложь, флПересчетИтогов = Ложь)
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Документы.уатЗаказГрузоотправителя.ЗакрытиеДокумента(ДокументСсылка, ДатаЗакрытия, СообщениеОшибки, Интерактивно, флСуммаУслугИзменилась);
		флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказНаТСПерерасчетИтоговПриПроведении");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы(РучноеИзменениеВодители = Ложь, РучноеИзменениеТС = Ложь)  
	ВключенОтбор  = Ложь;  
	МассивЗаказов = Новый Массив();
	
	Если флагОтборГрузоотправитель Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Грузоотправитель", ОтборГрузоотправитель);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Грузоотправитель",,, Ложь);
	КонецЕсли; 
	
	
	Если ТипЭТрН = "Грузополучатель" Тогда
		Если флагОтборГрузополучатель Тогда
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация", ОтборГрузополучатель);
		Иначе
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация",,, Ложь);
		КонецЕсли;
		Если флагОтборПеревозчик Тогда
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Перевозчик", ОтборПеревозчик);
		Иначе
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Перевозчик",,, Ложь);
		КонецЕсли;
	Иначе 
		Если флагОтборГрузополучатель Тогда
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Грузополучатель", ОтборГрузополучатель);
		Иначе
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Грузополучатель",,, Ложь);
		КонецЕсли; 
		Если флагОтборПеревозчик Тогда
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация", ОтборПеревозчик);
		Иначе
			уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация",,, Ложь);
		КонецЕсли;
	КонецЕсли;
	Если ОтборСозданЭПД = "Все" Тогда 
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ЕстьЭПД",,, Ложь);
	ИначеЕсли ОтборСозданЭПД = "Создан" Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ЕстьЭПД", Истина); 
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ЕстьЭПД", Ложь); 
	КонецЕсли; 
		
	Если флагОтборДатаВремяПодачи
		ИЛИ флагОтборФактическиеДатаВремяПодачи
		ИЛИ флагОтборДатаВремяУбытия
		ИЛИ флагОтборСтатус 
		ИЛИ флагОтборВодитель
		ИЛИ флагОтборТС Тогда
		ВключенОтбор = Истина;
		
		МассивЗаказов = ПолучитьМассивЗаказовПоОтборам(флагОтборСтатус, ОтборСтатус,
			флагОтборДатаВремяПодачи, ОтборДатаВремяПодачи, флагОтборФактическиеДатаВремяПодачи, ОтборФактическиеДатаВремяПодачи,
			флагОтборДатаВремяУбытия, ОтборДатаВремяУбытия,
			флагОтборВодитель, ОтборВодитель, ОтборВодитель1С, флагОтборТС, ОтборТС, ОтборТС1С,
			РеквизитыТекущейВерсииТитула, ЗакрытиеЗаказовНаТСПутевымиЛистами, РучноеИзменениеТС, РучноеИзменениеВодители, ИсточникДат, ТипЭТрН);
	КонецЕсли;
	
	Если ВключенОтбор Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВключенОтбор", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", МассивЗаказов);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ВключенОтбор", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", Новый Массив);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗаказовПоОтборам(флагОтборСтатус, ОтборСтатус, флагОтборДатаВремяПодачи, ОтборДатаВремяПодачи, 
	флагОтборФактическиеДатаВремяПодачи, ОтборФактическиеДатаВремяПодачи, флагОтборДатаВремяУбытия, ОтборДатаВремяУбытия,
	флагОтборВодитель, ОтборВодитель, ОтборВодитель1C, флагОтборТС, ОтборТС, ОтборТС1С,
	РеквизитыТекущейВерсииТитула, ЗакрытиеЗаказовНаТСПутевымиЛистами, РучноеИзменениеТС = Ложь, РучноеИзменениеВодители = Ложь, ИсточникДат, ТипЭТрН)
	
	МассивЗаказовСтатусов = Новый Массив();
	Если флагОтборСтатус Тогда
		МассивЗаказовСтатусов = ПолучитьМассивЗаказовПоСтатусам(ОтборСтатус);
	КонецЕсли;
	
	МассивВодителей = Новый Массив();
	Если РучноеИзменениеВодители
		И флагОтборВодитель Тогда
		МассивВодителей = Новый Массив();
		Если ТипЗнч(ОтборВодитель1C) = Тип("СписокЗначений") Тогда 
			Для Каждого ТекВодитель Из ОтборВодитель1C Цикл
				 МассивВодителей.Добавить(ТекВодитель.Значение);
			КонецЦикла;
		Иначе
			МассивВодителей.Добавить(ОтборВодитель1C);
		Конецесли;
	ИначеЕсли флагОтборВодитель Тогда  
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить("Имя");
		МассивИменРеквизитов.Добавить("Фамилия");
		МассивИменРеквизитов.Добавить("Отчество"); 
		МассивИменРеквизитов.Добавить("НомерВУ");
		МассивИменРеквизитов.Добавить("СерияВУ");
		МассивИменРеквизитов.Добавить("ФЛ_ИНН"); 

		Если ТипЗнч(ОтборВодитель) = Тип("Строка") Тогда  
			ТабличнаяЧасть  = "ТитулГрузоотправителяВодители";
			ДанныеВодитель  = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, РеквизитыТекущейВерсииТитула, ТабличнаяЧасть, 1); 
			МассивВодителей = ПолучитьВодителей(ДанныеВодитель, ТипЭТрН); 
			Если МассивВодителей.Количество() <> 0 Тогда
				ОтборВодитель1C = МассивВодителей[0]; 
			Иначе
				флагОтборВодитель = Ложь;
				ОтборВодитель1C = ?(ТипЭТрН = "Грузополучатель", Справочники.ФизическиеЛица.ПустаяСсылка(), 
					Справочники.Сотрудники.ПустаяСсылка());
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОтборВодитель) = Тип("СправочникСсылка.ХранимыеДанныеЭПД") Тогда 
			ДанныеВодитель = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, ОтборВодитель);
			МассивВодителей = ПолучитьВодителей(ДанныеВодитель, ТипЭТрН);
			Если МассивВодителей.Количество() <> 0 Тогда
				ОтборВодитель1C = МассивВодителей[0]; 
			Иначе
				флагОтборВодитель = Ложь;
				ОтборВодитель1C = ?(ТипЭТрН = "Грузополучатель", Справочники.ФизическиеЛица.ПустаяСсылка(), 
					Справочники.Сотрудники.ПустаяСсылка());
			КонецЕсли;
		Иначе  
			Индекс = 1;
			Для Каждого ТекСтрока Из ОтборВодитель Цикл 
				ТекМассивВодителей = Новый Массив();
				Если ТипЗнч(ТекСтрока.Значение) = Тип("Строка") Тогда  
					ТабличнаяЧасть  = "ТитулГрузоотправителяВодители";
					ДанныеВодитель  = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, РеквизитыТекущейВерсииТитула, ТабличнаяЧасть, Индекс); 
					ТекМассивВодителей = ПолучитьВодителей(ДанныеВодитель, ТипЭТрН);
				ИначеЕсли ТипЗнч(ТекСтрока.Значение) = Тип("СправочникСсылка.ХранимыеДанныеЭПД") Тогда 
					ДанныеВодитель = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, ТекСтрока.Значение);
					ТекМассивВодителей = ПолучитьВодителей(ДанныеВодитель, ТипЭТрН);
				КонецЕсли;
				Для Каждого ТекВодитель Из ТекМассивВодителей Цикл 
					МассивВодителей.Добавить(ТекВодитель);
				КонецЦикла;
				Индекс = Индекс + 1;
			КонецЦикла; 
			
			Если МассивВодителей.Количество() = 1 Тогда
				ОтборВодитель1C = МассивВодителей[0];
			ИначеЕсли МассивВодителей.Количество() <> 0 Тогда 
				ОтборВодитель1C = Новый СписокЗначений();
				Для Каждого ТекВодитель Из МассивВодителей Цикл 
					ОтборВодитель1C.Добавить(ТекВодитель);
				КонецЦикла;
			Иначе
				флагОтборВодитель = Ложь;
				ОтборВодитель1C = ?(ТипЭТрН = "Грузополучатель", Справочники.ФизическиеЛица.ПустаяСсылка(), 
					Справочники.Сотрудники.ПустаяСсылка());
			КонецЕсли;

		КонецЕсли;
	КонецЕсли; 
	
	МассивТС = Новый Массив();
	Если РучноеИзменениеТС
		И флагОтборТС Тогда
		МассивТС = Новый Массив();
		МассивТС.Добавить(ОтборТС1С);
	ИначеЕсли флагОтборТС Тогда
		ТабличнаяЧасть  = "ТитулГрузоотправителяТранспортноеСредство";
		
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить(ТабличнаяЧасть + "VIN");
		МассивИменРеквизитов.Добавить(ТабличнаяЧасть + "Марка");
		МассивИменРеквизитов.Добавить(ТабличнаяЧасть + "НомерСТС"); 
		МассивИменРеквизитов.Добавить(ТабличнаяЧасть + "РегистрационныйНомер");

		Если ТипЗнч(ОтборТС) = Тип("Строка") Тогда  
			СтруктураРезультат = Новый Структура();
			Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл 
				Если РеквизитыТекущейВерсииТитула.Свойство(ИмяРеквизита) Тогда
					Значение  = РеквизитыТекущейВерсииТитула[ИмяРеквизита];
				Иначе
					Значение  = "";
				КонецЕсли; 
				СтруктураРезультат.Вставить(ИмяРеквизита, Значение);
			КонецЦикла;
            МассивТС  = ПолучитьТС(СтруктураРезультат, ТабличнаяЧасть, ОтборТС1С);   
		ИначеЕсли ТипЗнч(ОтборТС) = Тип("СправочникСсылка.ХранимыеДанныеЭПД") Тогда 
			ДанныеТС = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, ОтборТС);
			МассивТС = ПолучитьТС(ДанныеТС, ТабличнаяЧасть, ОтборТС1С);
		КонецЕсли;
	КонецЕсли;


	Запрос = Новый Запрос();
	
	Если НЕ ЗакрытиеЗаказовНаТСПутевымиЛистами Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
		               |	уатМаршрутныйЛистЗаказы.Ссылка.Водитель1 КАК Водитель1,
		               |	уатМаршрутныйЛистЗаказы.Ссылка.Водитель2 КАК Водитель2,
		               |	уатМаршрутныйЛистЗаказы.Ссылка.ТС КАК ТС
		               |ПОМЕСТИТЬ втДанные
		               |ИЗ
		               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		               |		ПО уатЗаказГрузоотправителя.Ссылка = уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя
		               |			И (уатМаршрутныйЛистЗаказы.Ссылка.Проведен)
		               |ГДЕ
		               |	уатЗаказГрузоотправителя.Проведен
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	уатЗаказГрузоотправителя.Ссылка,
		               |	уатЗаказПеревозчику_уэГрузы.Ссылка.Водитель,
		               |	"""",
		               |	уатЗаказПеревозчику_уэГрузы.Ссылка.ТС
		               |ИЗ
		               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
		               |		ПО (уатЗаказПеревозчику_уэГрузы.Заказ = уатЗаказГрузоотправителя.Ссылка)
		               |ГДЕ
		               |	уатЗаказГрузоотправителя.Проведен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втДанные.Ссылка КАК Ссылка,
		               |	втДанные.Водитель1 КАК Водитель1,
		               |	втДанные.Водитель2 КАК Водитель2,
		               |	втДанные.ТС КАК ТС
		               |ИЗ
		               |	втДанные КАК втДанные
		               |ГДЕ
		               |	втДанные.Ссылка.Проведен"; 
		Если флагОтборДатаВремяПодачи
			ИЛИ флагОтборФактическиеДатаВремяПодачи
			ИЛИ флагОтборДатаВремяУбытия
			Тогда
			Запрос.УстановитьПараметр("ОтборДатаВремяПодачи", ОтборДатаВремяПодачи);
			Запрос.УстановитьПараметр("ОтборФактическиеДатаВремяПодачи", ОтборФактическиеДатаВремяПодачи);
			Запрос.УстановитьПараметр("ОтборДатаВремяУбытия", ОтборДатаВремяУбытия);
			
			Если ИсточникДат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3 Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И (&ОтборДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ДоставкаС И втДанные.Ссылка.ДоставкаПо
				|			ИЛИ &ОтборФактическиеДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ДоставкаС И втДанные.Ссылка.ДоставкаПо
				|			ИЛИ &ОтборДатаВремяУбытия МЕЖДУ втДанные.Ссылка.ДоставкаС И втДанные.Ссылка.ДоставкаПо)";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	И (&ОтборДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ОтправлениеС И втДанные.Ссылка.ОтправлениеПо
				|			ИЛИ &ОтборФактическиеДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ОтправлениеС И втДанные.Ссылка.ОтправлениеПо
				|			ИЛИ &ОтборДатаВремяУбытия МЕЖДУ втДанные.Ссылка.ОтправлениеС И втДанные.Ссылка.ОтправлениеПо)";
			КонецЕсли;
		КонецЕсли;

		Если флагОтборСтатус Тогда 
			Запрос.УстановитьПараметр("МассивЗаказовСтатусов", МассивЗаказовСтатусов);
			Запрос.Текст = Запрос.Текст + "
			|	И втДанные.Ссылка В(&МассивЗаказовСтатусов)";
		КонецЕсли;
		Если флагОтборВодитель Тогда 
			Запрос.УстановитьПараметр("МассивВодителей", МассивВодителей);
			Запрос.Текст = Запрос.Текст + "
			|	И (втДанные.Водитель1 В (&МассивВодителей)
			|			ИЛИ втДанные.Водитель2 В (&МассивВодителей))";
		КонецЕсли;
		Если флагОтборТС Тогда 
			Запрос.УстановитьПараметр("МассивТС", МассивТС);
			Запрос.Текст = Запрос.Текст + "
			|	И втДанные.ТС В (&МассивТС)";
		КонецЕсли;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
		               |	уатПутевойЛистЗадание.Ссылка.Водитель1 КАК Водитель1,
		               |	уатПутевойЛистЗадание.Ссылка.Водитель2 КАК Водитель2,
		               |	уатПутевойЛистЗадание.Ссылка.ТранспортноеСредство КАК ТС
		               |ПОМЕСТИТЬ втДанные
		               |ИЗ
		               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		               |		ПО уатЗаказГрузоотправителя.Ссылка = уатПутевойЛистЗадание.ЗаказНаТС
		               |			И (уатПутевойЛистЗадание.Ссылка.Проведен)
		               |ГДЕ
		               |	уатЗаказГрузоотправителя.Проведен
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	уатЗаказГрузоотправителя.Ссылка,
		               |	уатЗаказПеревозчику_уэГрузы.Ссылка.Водитель,
		               |	"""",
		               |	уатЗаказПеревозчику_уэГрузы.Ссылка.ТС
		               |ИЗ
		               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
		               |		ПО (уатЗаказПеревозчику_уэГрузы.Заказ = уатЗаказГрузоотправителя.Ссылка)
		               |ГДЕ
		               |	уатЗаказГрузоотправителя.Проведен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втДанные.Ссылка КАК Ссылка,
		               |	втДанные.Водитель1 КАК Водитель1,
		               |	втДанные.Водитель2 КАК Водитель2,
		               |	втДанные.ТС КАК ТС
		               |ИЗ
		               |	втДанные КАК втДанные
		               |ГДЕ
		               |	втДанные.Ссылка.Проведен";
		Если флагОтборДатаВремяПодачи
			ИЛИ флагОтборФактическиеДатаВремяПодачи
			ИЛИ флагОтборДатаВремяУбытия
			Тогда
			Запрос.УстановитьПараметр("ОтборДатаВремяПодачи", ОтборДатаВремяПодачи);
			Запрос.УстановитьПараметр("ОтборФактическиеДатаВремяПодачи", ОтборФактическиеДатаВремяПодачи);
			Запрос.УстановитьПараметр("ОтборДатаВремяУбытия", ОтборДатаВремяУбытия);
			
			Если ИсточникДат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3 Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И (&ОтборДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ДоставкаС И втДанные.Ссылка.ДоставкаПо
				|			ИЛИ &ОтборФактическиеДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ДоставкаС И втДанные.Ссылка.ДоставкаПо
				|			ИЛИ &ОтборДатаВремяУбытия МЕЖДУ втДанные.Ссылка.ДоставкаС И втДанные.Ссылка.ДоставкаПо)";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	И (&ОтборДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ОтправлениеС И втДанные.Ссылка.ОтправлениеПо
				|			ИЛИ &ОтборФактическиеДатаВремяПодачи МЕЖДУ втДанные.Ссылка.ОтправлениеС И втДанные.Ссылка.ОтправлениеПо
				|			ИЛИ &ОтборДатаВремяУбытия МЕЖДУ втДанные.Ссылка.ОтправлениеС И втДанные.Ссылка.ОтправлениеПо)";
			КонецЕсли;
		КонецЕсли;
		Если флагОтборСтатус Тогда 
			Запрос.УстановитьПараметр("МассивЗаказовСтатусов", МассивЗаказовСтатусов);
			Запрос.Текст = Запрос.Текст + "
			|	И втДанные.Ссылка В(&МассивЗаказовСтатусов)";
		КонецЕсли;
		Если флагОтборВодитель Тогда 
			Запрос.УстановитьПараметр("МассивВодителей", МассивВодителей);
			Запрос.Текст = Запрос.Текст + "
			|	И (втДанные.Водитель1 В (&МассивВодителей)
			|			ИЛИ втДанные.Водитель2 В (&МассивВодителей))";
		КонецЕсли;
		Если флагОтборТС Тогда 
			Запрос.УстановитьПараметр("МассивТС", МассивТС);
			Запрос.Текст = Запрос.Текст + "
			|	И втДанные.ТС В (&МассивТС)";
		КонецЕсли;
		
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	МассивЗаказов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивЗаказов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивЗаказов;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьМассивЗаказовПоСтатусам(Статус)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	               |ПОМЕСТИТЬ втЭтапы
	               |ИЗ
	               |	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	втЭтапы.Этап КАК Этап,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	               |ИЗ
	               |	втЭтапы КАК втЭтапы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЭтапы.Этап КАК Заказ
	               |					ИЗ
	               |						втЭтапы КАК втЭтапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = втЭтапы.Этап)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЭтапы.ЗаказГрузоотправителя,
	               |	втЭтапы.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	               |ИЗ
	               |	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ уатСтатусыГрузов_уэСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, ) КАК уатСтатусыГрузов_уэСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание,
	               |	КОЛИЧЕСТВО(уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент) КАК Всего,
	               |	СУММА(ВЫБОР
	               |			КОГДА уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ОбработкаЗавершена
	               |ПОМЕСТИТЬ втСтатусыСопроводительныхДокументовСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, ) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказы.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ КАК СтатусЗаказа,
	               |	СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) <> 0 КАК НаличиеСопроводительныхДокументов,
	               |	ВЫБОР
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.Всего) = СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена)
	               |			ТОГДА ""обработка завершена""
	               |		КОГДА СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) = 0
	               |			ТОГДА ""не введены""
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена) = 0
	               |			ТОГДА ""обработка не завершена""
	               |		ИНАЧЕ ""обработка в работе""
	               |	КОНЕЦ КАК СтатусОбработкиСопроводительныхДокументов
	               |ПОМЕСТИТЬ втРезультат
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	               |		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ уатСтатусыГрузов_уэСрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказы.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыСопроводительныхДокументовСрезПоследних КАК втСтатусыСопроводительныхДокументовСрезПоследних
	               |		ПО втЗаказы.Ссылка = втСтатусыСопроводительныхДокументовСрезПоследних.Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезультат.Ссылка КАК Ссылка,
	               |	втРезультат.СтатусЗаказа КАК СтатусЗаказа,
	               |	втРезультат.НаличиеСопроводительныхДокументов КАК НаличиеСопроводительныхДокументов,
	               |	втРезультат.СтатусОбработкиСопроводительныхДокументов КАК СтатусОбработкиСопроводительныхДокументов
	               |ИЗ
	               |	втРезультат КАК втРезультат
	               |ГДЕ  
				   |	втРезультат.СтатусЗаказа = &Статус";
	Запрос.УстановитьПараметр("Статус", Статус);
	
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	МассивЗаказовДляСтатусов = Новый Массив();
	Пока ВыборкаЗаказ.Следующий() Цикл
		МассивЗаказовДляСтатусов.Добавить(ВыборкаЗаказ.Ссылка);
	КонецЦикла;

	Возврат МассивЗаказовДляСтатусов;
	
КонецФункции

&НаСервере
Процедура ВыбратьДокументыСервер()
	
	МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.ЭПД       = ЭПД;
	МенеджерЗаписи.ЗаказНаТС = ЗаказНаТС;
	МенеджерЗаписи.Рейс      = Рейс;
	МенеджерЗаписи.Записать(Истина); 
	
	уатОбменСГИСЭПД.ДобавитьДокументОснование(ЭПД, ЗаказНаТС);
	Если ЗначениеЗаполнено(Рейс) Тогда
		уатОбменСГИСЭПД.ДобавитьДокументОснование(ЭПД, Рейс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыПоЭПД(ЭПД, РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель)
	ОтборСозданЭПД        = "Не создан";
	ОтборГрузоотправитель = ЭПД.СсылкаТитулГрузоотправителяГрузоотправитель;
	ОтборГрузополучатель  = ЭПД.СсылкаТитулГрузоотправителяГрузополучатель;
	ОтборПеревозчик       = ЭПД.СсылкаТитулГрузоотправителяПеревозчик;

	ВыбранныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
		
	ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитов(ЭПД, ЭПД.Организация, СтруктураРеквизитов);
	
	РеквизитыТекущейВерсииТитула = ОбменСГИСЭПД.ПолучитьВерсиюТитулаДокумента(СтруктураРеквизитов, ВыбранныйТитул, 0);
	ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(РеквизитыТекущейВерсииТитула);
	Если РеквизитыТекущейВерсииТитула.Свойство("ХранимыеДанныеТитулГрузоотправителяТранспортноеСредство") Тогда
		ТранспортноеСредство = РеквизитыТекущейВерсииТитула.ХранимыеДанныеТитулГрузоотправителяТранспортноеСредство;
		ОтборТС              = ТранспортноеСредство;
	КонецЕсли;
	
	ВыбранныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2;
	РеквизитыТекущейВерсииТитулаГрузоперевозчик = ОбменСГИСЭПД.ПолучитьВерсиюТитулаДокумента(СтруктураРеквизитов, ВыбранныйТитул, 0);
		ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(РеквизитыТекущейВерсииТитулаГрузоперевозчик);

	ВыбранныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3;
	РеквизитыТекущейВерсииТитулаГрузополучатель = ОбменСГИСЭПД.ПолучитьВерсиюТитулаДокумента(СтруктураРеквизитов, ВыбранныйТитул, 0);
		ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(РеквизитыТекущейВерсииТитулаГрузополучатель);
		
	ЗаполнитьДатыОтбора(РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель);

	ТабличнаяЧасть  = "ТитулГрузоотправителяВодители";
	КоличествоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(РеквизитыТекущейВерсииТитула, ТабличнаяЧасть);
	Если КоличествоСтрок = 1 Тогда
		ОтборВодитель = ЗначениеРеквизитаСтруктурыРеквизитов(РеквизитыТекущейВерсииТитула, "ХранимыеДанныеВодитель", ТабличнаяЧасть, 1);
	ИначеЕсли КоличествоСтрок > 1 Тогда  
		ОтборВодитель = Новый СписокЗначений;
		Для ИндексСтроки = 1 По КоличествоСтрок Цикл
			Значение = ЗначениеРеквизитаСтруктурыРеквизитов(РеквизитыТекущейВерсииТитула, 
			"ХранимыеДанныеВодитель", ТабличнаяЧасть, ИндексСтроки);
			Если Значение = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ОтборВодитель.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОтборГрузоотправитель) Тогда 
		флагОтборГрузоотправитель = Истина;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОтборГрузополучатель) Тогда 
		флагОтборГрузополучатель = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПеревозчик) Тогда 
		флагОтборПеревозчик = Истина;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОтборДатаВремяПодачи) Тогда 
		флагОтборДатаВремяПодачи = Истина;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОтборФактическиеДатаВремяПодачи) Тогда 
		флагОтборФактическиеДатаВремяПодачи = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборДатаВремяУбытия) Тогда 
		флагОтборДатаВремяУбытия = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборТС) Тогда 
		флагОтборТС = Истина;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОтборВодитель) Тогда 
		флагОтборВодитель = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьТекстЗапросаСписка(ЗакрытиеЗаказовНаТСПутевымиЛистами)

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДокументуатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	ДокументуатЗаказГрузоотправителя.ПометкаУдаления КАК ПометкаУдаления,
	               |	ДокументуатЗаказГрузоотправителя.Номер КАК Номер,
	               |	ДокументуатЗаказГрузоотправителя.Дата КАК Дата,
	               |	ДокументуатЗаказГрузоотправителя.Проведен КАК Проведен,
	               |	ДокументуатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	               |	ДокументуатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	               |	ДокументуатЗаказГрузоотправителя.ВалютаДокумента КАК ВалютаДокумента,
	               |	ДокументуатЗаказГрузоотправителя.ВалютаТоваров КАК ВалютаТоваров,
	               |	ДокументуатЗаказГрузоотправителя.ВесБрутто КАК ВесБрутто,
	               |	ДокументуатЗаказГрузоотправителя.ВидОперации КАК ВидОперации,
	               |	ДокументуатЗаказГрузоотправителя.ВидДоставки КАК ВидДоставки,
	               |	ДокументуатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	               |	ДокументуатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	               |	ДокументуатЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ДокументуатЗаказГрузоотправителя.ДокументОснование КАК ДокументОснование,
	               |	ДокументуатЗаказГрузоотправителя.ДоставкаПо КАК ДоставкаПо,
	               |	ДокументуатЗаказГрузоотправителя.ДоставкаС КАК ДоставкаС,
	               |	ДокументуатЗаказГрузоотправителя.КоличествоМест КАК КоличествоМест,
	               |	ВЫРАЗИТЬ(ДокументуатЗаказГрузоотправителя.Комментарий КАК СТРОКА(500)) КАК Комментарий,
	               |	ДокументуатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя КАК КонтактноеЛицоГрузоотправителя,
	               |	ДокументуатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя КАК КонтактноеЛицоГрузополучателя,
	               |	ДокументуатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	               |	ДокументуатЗаказГрузоотправителя.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |	ДокументуатЗаказГрузоотправителя.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |	ВЫРАЗИТЬ(ДокументуатЗаказГрузоотправителя.НазваниеГруза КАК СТРОКА(500)) КАК НазваниеГруза,
	               |	ДокументуатЗаказГрузоотправителя.НомерПоУчетуЗаказчика КАК НомерПоУчетуЗаказчика,
	               |	ДокументуатЗаказГрузоотправителя.Объем КАК Объем,
	               |	ДокументуатЗаказГрузоотправителя.Организация КАК Организация,
	               |	ДокументуатЗаказГрузоотправителя.Подразделение КАК Подразделение,
	               |	ДокументуатЗаказГрузоотправителя.Ответственный КАК Ответственный,
	               |	ДокументуатЗаказГрузоотправителя.ОтправлениеПо КАК ОтправлениеПо,
	               |	ДокументуатЗаказГрузоотправителя.ОтправлениеС КАК ОтправлениеС,
	               |	ДокументуатЗаказГрузоотправителя.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения,
	               |	ДокументуатЗаказГрузоотправителя.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	               |	ДокументуатЗаказГрузоотправителя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ДокументуатЗаказГрузоотправителя.СуммаДокумента КАК СуммаДокумента,
	               |	ДокументуатЗаказГрузоотправителя.ВидПеревозки КАК ВидПеревозки,
	               |	ДокументуатЗаказГрузоотправителя.НаправлениеПеревозки КАК НаправлениеПеревозки,
	               |	ДокументуатЗаказГрузоотправителя.ТипЦен КАК ТипЦен,
	               |	ДокументуатЗаказГрузоотправителя.ТребованиеКТС КАК ТребованиеКТС,
	               |	ДокументуатЗаказГрузоотправителя.ТребованиеКТСТипТС КАК ТребованиеКТСТипТС,
	               |	ДокументуатЗаказГрузоотправителя.УчитыватьНДС КАК УчитыватьНДС,
	               |	ДокументуатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	ДокументуатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	ДокументуатЗаказГрузоотправителя.РодительскийЗаказ КАК РодительскийЗаказ,
	               |	ДокументуатЗаказГрузоотправителя.МоментВремени КАК МоментВремени,
	               |	ВЫБОР
	               |		КОГДА ДокументуатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |			ТОГДА 1
	               |		КОГДА ДокументуатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА 2
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ДетализацияЗакрытия,
	               |	ДокументуатЗаказГрузоотправителя.Приоритет КАК Приоритет,
	               |	ДокументуатЗаказГрузоотправителя.СуммаЗатрат КАК СуммаЗатрат,
	               |	ВЫБОР
	               |		КОГДА ДокументуатЗаказГрузоотправителя.Мультимодальный
	               |				И ДокументуатЗаказГрузоотправителя.ЭтоЭтап
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.Авиационная)
	               |						ТОГДА 6
	               |					КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.АвтомобильнаяПассажирская)
	               |						ТОГДА 8
	               |					КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.Железнодорожная)
	               |						ТОГДА 9
	               |					КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.Морская)
	               |						ТОГДА 10
	               |					ИНАЧЕ 7
	               |				КОНЕЦ
	               |		КОГДА ДокументуатЗаказГрузоотправителя.Мультимодальный
	               |				И НЕ ДокументуатЗаказГрузоотправителя.ЭтоЭтап
	               |			ТОГДА 5
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.Авиационная)
	               |					ТОГДА 0
	               |				КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.АвтомобильнаяПассажирская)
	               |					ТОГДА 2
	               |				КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.Железнодорожная)
	               |					ТОГДА 3
	               |				КОГДА ДокументуатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.Морская)
	               |					ТОГДА 4
	               |				ИНАЧЕ 1
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВидМультимодальногоЗаказа,
	               |	ВЫБОР
	               |		КОГДА ДокументуатЗаказГрузоотправителя.Проведен
	               |			ТОГДА 1
	               |		КОГДА ДокументуатЗаказГрузоотправителя.ПометкаУдаления
	               |			ТОГДА 2
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СтатусПроведенияДокумента,
	               |	ДокументуатЗаказГрузоотправителя.ДатаЗакрытия КАК ДатаЗакрытия,
	               |	ДокументуатЗаказГрузоотправителя.ОбъектСтроительства КАК ОбъектСтроительства,
	               |	ДокументуатЗаказГрузоотправителя.Маршрут КАК Маршрут,
	               |	ДокументуатЗаказГрузоотправителя.ЕстьРасхождения КАК ЕстьРасхождения,
	               |	ДокументуатЗаказГрузоотправителя.СуммаДоходовПлан КАК СуммаДоходовПлан,
	               |	ДокументуатЗаказГрузоотправителя.СуммаРасходовПлан КАК СуммаРасходовПлан,
	               |	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ПустаяСсылка) КАК СтатусЗаказа,
	               |	ВЫБОР
	               |		КОГДА НЕ ДокументуатЗаказГрузоотправителя.Проведен
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	               |		ИНАЧЕ уатТекущееСостояниеВыполненияЗаказов.Состояние
	               |	КОНЕЦ КАК Состояние,
	               |	СостоянияПоОбъектамУчетаЭДО.СостояниеЭДО КАК СостояниеЭДО,
	               |	ЛОЖЬ КАК НаличиеСопроводительныхДокументов,
	               |	0 КАК СтатусОбработкиСопроводительныхДокументов,
	               |	ВЫБОР
	               |		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ НаличиеФайлов.ЕстьФайлы
	               |	КОНЕЦ КАК ПрисоединенныйФайл,
	               |	ДокументуатЗаказГрузоотправителя.ЭтоШаблонПеревозки КАК ЭтоШаблонПеревозки,
	               |	ДокументуатЗаказГрузоотправителя.НаименованиеШаблона КАК НаименованиеШаблона,
	               |	уатТекущееСостояниеВыполненияЗаказов.ПроцентВыполнения КАК ПроцентВыполнения,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК СостояниеВыполненияСтрока,
	               |	ВЫБОР
	               |		КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Открыт)
	               |					ТОГДА 1
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен)
	               |							ТОГДА 2
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Выполнен)
	               |									ТОГДА 3
	               |								ИНАЧЕ ВЫБОР
	               |										КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Отклонен)
	               |											ТОГДА 4
	               |										ИНАЧЕ ВЫБОР
	               |												КОГДА НЕ ДокументуатЗаказГрузоотправителя.Проведен
	               |													ТОГДА 0
	               |												ИНАЧЕ -1
	               |											КОНЕЦ
	               |									КОНЕЦ
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СостояниеВыполненияКартинка,
	               |	СвязанныеДокументы.СвязанныйДокумент КАК СвязанныйДокумент,";
	Если НЕ ЗакрытиеЗаказовНаТСПутевымиЛистами Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	СвязанныеДокументы.СвязанныйДокумент.ТС КАК ТС,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатМаршрутныйЛист
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель1
		|		ИНАЧЕ ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатЗаказПеревозчику_уэ
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	КОНЕЦ
		|	КОНЕЦ КАК Водитель,
		|	СвязанныеДокументы.СвязанныйДокумент.Контрагент КАК Перевозчик,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА уатСвязанныеДокументыЭПД.ЭПД ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьЭПД
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК ДокументуатЗаказГрузоотправителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущееСостояниеВыполненияЗаказов КАК уатТекущееСостояниеВыполненияЗаказов
		|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = уатТекущееСостояниеВыполненияЗаказов.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияПоОбъектамУчетаЭДО
		|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = СостоянияПоОбъектамУчетаЭДО.СсылкаНаОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			уатМаршрутныйЛистЗаказы.Ссылка КАК СвязанныйДокумент,
		|			уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|		ИЗ
		|			Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|		ГДЕ
		|			НЕ уатМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			уатЗаказПеревозчику_уэГрузы.Ссылка,
		|			уатЗаказПеревозчику_уэГрузы.Заказ
		|		ИЗ
		|			Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
		|		ГДЕ
		|			НЕ уатЗаказПеревозчику_уэГрузы.Ссылка.ПометкаУдаления";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатПутевойЛист
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.ТранспортноеСредство
		|		ИНАЧЕ ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатЗаказПеревозчику_уэ
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.ТС
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
		|	КОНЕЦ
		|	КОНЕЦ КАК ТС,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатПутевойЛист
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель1
		|		ИНАЧЕ ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатЗаказПеревозчику_уэ
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	КОНЕЦ
		|	КОНЕЦ КАК Водитель,
		|	СвязанныеДокументы.СвязанныйДокумент.Контрагент КАК Перевозчик,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА уатСвязанныеДокументыЭПД.ЭПД ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьЭПД
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК ДокументуатЗаказГрузоотправителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущееСостояниеВыполненияЗаказов КАК уатТекущееСостояниеВыполненияЗаказов
		|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = уатТекущееСостояниеВыполненияЗаказов.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияПоОбъектамУчетаЭДО
		|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = СостоянияПоОбъектамУчетаЭДО.СсылкаНаОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			уатПутевойЛистЗадание.Ссылка КАК СвязанныйДокумент,
		|			уатПутевойЛистЗадание.ЗаказНаТС КАК ЗаказГрузоотправителя
		|		ИЗ
		|			Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|		ГДЕ
		|			НЕ уатПутевойЛистЗадание.Ссылка.ПометкаУдаления 
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			уатЗаказПеревозчику_уэГрузы.Ссылка,
		|			уатЗаказПеревозчику_уэГрузы.Заказ
		|		ИЗ
		|			Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
		|		ГДЕ
		|			НЕ уатЗаказПеревозчику_уэГрузы.Ссылка.ПометкаУдаления"; 
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК СвязанныеДокументы
	|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = СвязанныеДокументы.ЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = уатСвязанныеДокументыЭПД.ЗаказНаТС
	|		И (СвязанныеДокументы.СвязанныйДокумент = уатСвязанныеДокументыЭПД.Рейс ИЛИ уатСвязанныеДокументыЭПД.Рейс = Неопределено)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВключенОтбор
	|				ТОГДА ДокументуатЗаказГрузоотправителя.Ссылка В (&МассивЗаказов)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ДокументуатЗаказГрузоотправителя.Проведен 
	|	И НЕ ДокументуатЗаказГрузоотправителя.ЭтоШаблонПеревозки 
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ДокументуатЗаказГрузоотправителя.Ссылка,";
	Если НЕ ЗакрытиеЗаказовНаТСПутевымиЛистами Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|		СвязанныеДокументы.СвязанныйДокумент.ТС,
		|		ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатМаршрутныйЛист
		|		 ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель1
		|		ИНАЧЕ ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатЗаказПеревозчику_уэ
		|		ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|		КОНЕЦ
		|		КОНЕЦ,"; 
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатПутевойЛист
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.ТранспортноеСредство
		|		ИНАЧЕ ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатЗаказПеревозчику_уэ
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.ТС
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
		|	КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатПутевойЛист
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель1
		|		ИНАЧЕ ВЫБОР
		|		КОГДА СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.уатЗаказПеревозчику_уэ
		|			ТОГДА СвязанныеДокументы.СвязанныйДокумент.Водитель
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	КОНЕЦ
		|	КОНЕЦ,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|		СвязанныеДокументы.СвязанныйДокумент,
	|		ДокументуатЗаказГрузоотправителя.ПометкаУдаления,
	|		ДокументуатЗаказГрузоотправителя.Номер,
	|		ДокументуатЗаказГрузоотправителя.Дата,
	|		ДокументуатЗаказГрузоотправителя.Проведен,
	|		ДокументуатЗаказГрузоотправителя.АдресНазначения,
	|		ДокументуатЗаказГрузоотправителя.АдресОтправления,
	|		ДокументуатЗаказГрузоотправителя.ВалютаДокумента,
	|		ДокументуатЗаказГрузоотправителя.ВалютаТоваров,
	|		ДокументуатЗаказГрузоотправителя.ВесБрутто,
	|		ДокументуатЗаказГрузоотправителя.ВидОперации,
	|		ДокументуатЗаказГрузоотправителя.ВидДоставки,
	|		ДокументуатЗаказГрузоотправителя.Грузоотправитель,
	|		ДокументуатЗаказГрузоотправителя.Грузополучатель,
	|		ДокументуатЗаказГрузоотправителя.ДоговорКонтрагента,
	|		ДокументуатЗаказГрузоотправителя.ДокументОснование,
	|		ДокументуатЗаказГрузоотправителя.ДоставкаПо,
	|		ДокументуатЗаказГрузоотправителя.ДоставкаС,
	|		ДокументуатЗаказГрузоотправителя.КоличествоМест,
	|		ДокументуатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя,
	|		ДокументуатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя,
	|		ДокументуатЗаказГрузоотправителя.Контрагент,
	|		ДокументуатЗаказГрузоотправителя.КратностьВзаиморасчетов,
	|		ДокументуатЗаказГрузоотправителя.КурсВзаиморасчетов,
	|		ДокументуатЗаказГрузоотправителя.НомерПоУчетуЗаказчика,
	|		ДокументуатЗаказГрузоотправителя.Объем,
	|		ДокументуатЗаказГрузоотправителя.Организация,
	|		ДокументуатЗаказГрузоотправителя.Подразделение,
	|		ДокументуатЗаказГрузоотправителя.Ответственный,
	|		ДокументуатЗаказГрузоотправителя.ОтправлениеПо,
	|		ДокументуатЗаказГрузоотправителя.ОтправлениеС,
	|		ДокументуатЗаказГрузоотправителя.СтоянкаПунктНазначения,
	|		ДокументуатЗаказГрузоотправителя.СтоянкаПунктОтправления,
	|		ДокументуатЗаказГрузоотправителя.СуммаВключаетНДС,
	|		ДокументуатЗаказГрузоотправителя.СуммаДокумента,
	|		ДокументуатЗаказГрузоотправителя.ВидПеревозки,
	|		ДокументуатЗаказГрузоотправителя.НаправлениеПеревозки,
	|		ДокументуатЗаказГрузоотправителя.ТипЦен,
	|		ДокументуатЗаказГрузоотправителя.ТребованиеКТС,
	|		ДокументуатЗаказГрузоотправителя.ТребованиеКТСТипТС,
	|		ДокументуатЗаказГрузоотправителя.УчитыватьНДС,
	|		ДокументуатЗаказГрузоотправителя.Мультимодальный,
	|		ДокументуатЗаказГрузоотправителя.ЭтоЭтап,
	|		ДокументуатЗаказГрузоотправителя.РодительскийЗаказ,
	|		ДокументуатЗаказГрузоотправителя.МоментВремени,
	|		ДокументуатЗаказГрузоотправителя.Приоритет,
	|		ДокументуатЗаказГрузоотправителя.СуммаЗатрат,
	|		ДокументуатЗаказГрузоотправителя.ДатаЗакрытия,
	|		ДокументуатЗаказГрузоотправителя.ОбъектСтроительства,
	|		ДокументуатЗаказГрузоотправителя.Маршрут,
	|		ДокументуатЗаказГрузоотправителя.ЕстьРасхождения,
	|		ДокументуатЗаказГрузоотправителя.СуммаДоходовПлан,
	|		ДокументуатЗаказГрузоотправителя.СуммаРасходовПлан,
	|		СостоянияПоОбъектамУчетаЭДО.СостояниеЭДО,
	|		ДокументуатЗаказГрузоотправителя.ЭтоШаблонПеревозки,
	|		ДокументуатЗаказГрузоотправителя.НаименованиеШаблона,
	|		уатТекущееСостояниеВыполненияЗаказов.ПроцентВыполнения,
	|		ВЫРАЗИТЬ(ДокументуатЗаказГрузоотправителя.Комментарий КАК СТРОКА(500)),
	|		ВЫРАЗИТЬ(ДокументуатЗаказГрузоотправителя.НазваниеГруза КАК СТРОКА(500)),
	|		ВЫБОР
	|			КОГДА ДокументуатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|				ТОГДА 1
	|			КОГДА ДокументуатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА 2
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ ДокументуатЗаказГрузоотправителя.Проведен
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	|			ИНАЧЕ уатТекущееСостояниеВыполненияЗаказов.Состояние
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ НаличиеФайлов.ЕстьФайлы
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Открыт)
	|						ТОГДА 1
	|					ИНАЧЕ ВЫБОР
	|							КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен)
	|								ТОГДА 2
	|							ИНАЧЕ ВЫБОР
	|									КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Выполнен)
	|										ТОГДА 3
	|									ИНАЧЕ ВЫБОР
	|											КОГДА уатТекущееСостояниеВыполненияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Отклонен)
	|												ТОГДА 4
	|											ИНАЧЕ ВЫБОР
	|													КОГДА НЕ ДокументуатЗаказГрузоотправителя.Проведен
	|														ТОГДА 0
	|													ИНАЧЕ -1
	|												КОНЕЦ
	|										КОНЕЦ
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ";
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяТаблицы)

	Если СтруктураСРеквизитами.СоответствиеТаблицИЧислаСтрок.Свойство(ИмяТаблицы) Тогда
		ЧислоСтрок = СтруктураСРеквизитами.СоответствиеТаблицИЧислаСтрок[ИмяТаблицы];
	Иначе
		ЧислоСтрок = 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок;	

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяРеквизита, ИмяТаблицы = "", НомерСтроки = "")
	
	Возврат уатОбменСГИСЭПД.ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяРеквизита, ИмяТаблицы, НомерСтроки);
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(СтруктураСРеквизитами)
	
	уатОбменСГИСЭПД.ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(СтруктураСРеквизитами);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, СтруктураРеквизитов, ТабличнаяЧасть = "", НомерСтроки = "") 
	Если ТипЗнч(СтруктураРеквизитов) = Тип("Структура") Тогда
		ДанныеЭПД = Неопределено;
	Иначе
		ДанныеЭПД = СтруктураРеквизитов.Данные; 
	КонецЕсли;
	Индекс = 1; 
	
	СтруктураРезультат = Новый Структура();
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл 
		Если ДанныеЭПД <> Неопределено Тогда
			ТекСтроки = ДанныеЭПД.НайтиСтроки(Новый Структура("Имя", ИмяРеквизита));
			Если ТекСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Значение  = ТекСтроки[0].Значение;
		Иначе
			Значение  = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, ИмяРеквизита, ТабличнаяЧасть, НомерСтроки);
		КонецЕсли; 
		СтруктураРезультат.Вставить(ИмяРеквизита, Значение);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВодителей(ДанныеВодитель, ТипЭТрН) 
	Запрос = Новый Запрос(); 
	
	Если ТипЭТрН = "Грузополучатель" Тогда 
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.ИНН КАК ФизическоеЛицоИНН,
		|	ФизическиеЛица.ФИО КАК ФизическоеЛицоФИО,
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ДокументыФизическихЛиц.Номер КАК Номер,
		|	ДокументыФизическихЛиц.Серия КАК Серия
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО ФизическиеЛица.Ссылка = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента)
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления";
	Иначе  
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.УдостоверениеВодителя);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.ФизическоеЛицо.ИНН КАК ФизическоеЛицоИНН,
		|	Сотрудники.ФизическоеЛицо.ФИО КАК ФизическоеЛицоФИО,
		|	Сотрудники.Ссылка КАК Ссылка,
		|	уатРегистрационныеДокументы.Номер КАК Номер,
		|	уатРегистрационныеДокументы.Серия КАК Серия
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
		|		ПО Сотрудники.Ссылка = уатРегистрационныеДокументы.ВладелецДокументов
		|			И (уатРегистрационныеДокументы.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя))
		|			И (уатРегистрационныеДокументы.ВидДокумента = &ВидДокумента)
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления"; 
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();  
		
	ФИОСопоставлен       = Ложь;
	ИННСопоставлен       = Ложь;
	ВУСопоставлен        = Ложь;
	КолВоСопоставлено    = 0; 
	ТекКолВоСопоставлено = 0;  
	
	МассивВодителей = Новый Массив(); 
	
	Пока Выборка.Следующий() Цикл
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(Выборка.ФизическоеЛицоФИО))," ");
		КоличествоПодстрок = ФИО.Количество();
		Фамилия  = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя		 = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество = ?(КоличествоПодстрок > 2, ФИО[2], "");
		
		ФИОСопоставлен       = Ложь;
		ИННСопоставлен       = Ложь;
		ВУСопоставлен        = Ложь;
		ТекКолВоСопоставлено = 0;

		Если (Фамилия = НРег(СокрЛП(ДанныеВодитель.Фамилия))
			И Имя = НРег(СокрЛП(ДанныеВодитель.Имя))
			И Отчество = НРег(СокрЛП(ДанныеВодитель.Отчество)))
			И ЗначениеЗаполнено(Фамилия) Тогда
			ФИОСопоставлен       = Истина;
			ТекКолВоСопоставлено = ТекКолВоСопоставлено + 1; 
		КонецЕсли;
		
		Если НРег(СокрЛП(Выборка.ФизическоеЛицоИНН)) = НРег(СокрЛП(ДанныеВодитель.ФЛ_ИНН))
			И ЗначениеЗаполнено(Выборка.ФизическоеЛицоИНН) Тогда
			ИННСопоставлен       = Истина;
			ТекКолВоСопоставлено = ТекКолВоСопоставлено + 1;   
		КонецЕсли;
		
		Если (НРег(СокрЛП(Выборка.Номер)) = НРег(СокрЛП(ДанныеВодитель.НомерВУ))
			И НРег(СокрЛП(Выборка.Серия)) = НРег(СокрЛП(ДанныеВодитель.СерияВУ)))
			И ЗначениеЗаполнено(Выборка.Номер) Тогда
			ВУСопоставлен        = Истина;
			ТекКолВоСопоставлено = ТекКолВоСопоставлено + 1;
		КонецЕсли;
		
		Если ТекКолВоСопоставлено > КолВоСопоставлено Тогда 
			МассивВодителей = Новый Массив();
			МассивВодителей.Добавить(Выборка.Ссылка);
		КонецЕсли;
		КолВоСопоставлено = ТекКолВоСопоставлено;
	КонецЦикла;

	Возврат МассивВодителей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТС(ДанныеТС, ТабличнаяЧасть, ОтборТС1С) 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.СТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	уатТС.VIN КАК VIN,
	               |	уатТС.ГосударственныйНомер КАК ГосударственныйНомер,
	               |	уатРегистрационныеДокументы.Номер КАК Номер,
	               |	уатРегистрационныеДокументы.Серия КАК Серия
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |		ПРАВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	               |		ПО (уатТС.Ссылка = уатРегистрационныеДокументы.ВладелецДокументов)
	               |			И (уатРегистрационныеДокументы.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС))
	               |			И (уатРегистрационныеДокументы.ВидДокумента = &ВидДокумента)
	               |ГДЕ
	               |	НЕ уатТС.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();  
	
	МассивТС = Новый Массив(); 
	
	ГосНомерСопоставлен  = Ложь;
	VINСопоставлен       = Ложь;
	СТССопоставлен       = Ложь;
	КолВоСопоставлено    = 0; 
	ТекКолВоСопоставлено = 0;
	Пока Выборка.Следующий() Цикл
		ГосНомерСопоставлен  = Ложь;
		VINСопоставлен       = Ложь;
		СТССопоставлен       = Ложь;
		ТекКолВоСопоставлено = 0;
		Если НРег(СокрЛП(Выборка.ГосударственныйНомер)) = НРег(СокрЛП(ДанныеТС[ТабличнаяЧасть + "РегистрационныйНомер"]))
			И ЗначениеЗаполнено(Выборка.ГосударственныйНомер) Тогда
			ГосНомерСопоставлен  = Истина;
			ТекКолВоСопоставлено = ТекКолВоСопоставлено + 1;
		КонецЕсли;
		Если НРег(СокрЛП(Выборка.VIN)) = НРег(СокрЛП(ДанныеТС[ТабличнаяЧасть + "VIN"]))
			И ЗначениеЗаполнено(Выборка.VIN) Тогда 
			VINСопоставлен = Истина;
			ТекКолВоСопоставлено = ТекКолВоСопоставлено + 1;
		КонецЕсли;
		Если (НРег(СокрЛП(Выборка.Номер)) = НРег(СокрЛП(ДанныеТС[ТабличнаяЧасть + "НомерСТС"]))
			ИЛИ НРег(СокрЛП(Выборка.Серия)) + НРег(СокрЛП(Выборка.Номер)) = НРег(СокрЛП(ДанныеТС[ТабличнаяЧасть + "НомерСТС"])))
			И ЗначениеЗаполнено(Выборка.Номер) Тогда
			СТССопоставлен = Истина;
			ТекКолВоСопоставлено = ТекКолВоСопоставлено + 1;
		КонецЕсли; 
		Если ТекКолВоСопоставлено > КолВоСопоставлено Тогда 
			ОтборТС1С = Выборка.Ссылка; 
			
			МассивТС = Новый Массив();
			МассивТС.Добавить(ОтборТС1С);
		КонецЕсли;
		КолВоСопоставлено = ТекКолВоСопоставлено;
	КонецЦикла;
	Возврат МассивТС;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыСервер(РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель)
	
	ПараметрыСоздания = Новый Структура(); 
	ПараметрыСоздания.Вставить("ДетализацияЗакрытия",   Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам);
	ПараметрыСоздания.Вставить("Грузоотправитель",      ОтборГрузоотправитель);
	ПараметрыСоздания.Вставить("Грузополучатель",       ОтборГрузополучатель);
	ПараметрыСоздания.Вставить("Организация",           ?(ТипЭТрН = "Грузополучатель", ОтборГрузополучатель, ОтборПеревозчик)); 
	
	Если РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяПрибытия") Тогда
		ПараметрыСоздания.Вставить("ОтправлениеС",     РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяПрибытия);
	ИначеЕсли РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяФактическиеДатаВремяПодачи") Тогда
		ПараметрыСоздания.Вставить("ОтправлениеС",     РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяФактическиеДатаВремяПодачи);
	Иначе
		ПараметрыСоздания.Вставить("ОтправлениеС",     ОтборФактическиеДатаВремяПодачи);
	КонецЕсли;
	Если РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяУбытия") Тогда
		ПараметрыСоздания.Вставить("ОтправлениеПо",     РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяУбытия);
	ИначеЕсли РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяФактическиеДатаВремяУбытия") Тогда
		ПараметрыСоздания.Вставить("ОтправлениеПо",     РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяФактическиеДатаВремяУбытия);
	Иначе
		ПараметрыСоздания.Вставить("ОтправлениеПо",     ОтборДатаВремяУбытия);
	КонецЕсли;

	Если РеквизитыТекущейВерсииТитулаГрузополучатель.Свойство("ТитулГрузополучателяФактическиеДатаВремяПрибытия") Тогда
		ПараметрыСоздания.Вставить("ДоставкаС",     РеквизитыТекущейВерсииТитулаГрузополучатель.ТитулГрузополучателяФактическиеДатаВремяПрибытия);
	ИначеЕсли РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяПрибытия") Тогда
		ПараметрыСоздания.Вставить("ДоставкаС",     РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяПрибытия);
	Иначе
		ПараметрыСоздания.Вставить("ДоставкаС",     ОтборФактическиеДатаВремяПодачи);
	КонецЕсли;
	Если РеквизитыТекущейВерсииТитулаГрузополучатель.Свойство("ТитулГрузополучателяФактическиеДатаВремяУбытия") Тогда
		ПараметрыСоздания.Вставить("ДоставкаПо",     РеквизитыТекущейВерсииТитулаГрузополучатель.ТитулГрузополучателяФактическиеДатаВремяУбытия);
	ИначеЕсли РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяУбытия") Тогда
		ПараметрыСоздания.Вставить("ДоставкаПо",     РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяУбытия);
	Иначе
		ПараметрыСоздания.Вставить("ДоставкаПо",     ОтборДатаВремяУбытия);
	КонецЕсли;
	ПараметрыСоздания.Вставить("НомерПоУчетуЗаказчика", ?(РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяЗаказНомер = "Без номера",
		ЭПД.Номер, РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяЗаказНомер));
	ПараметрыСоздания.Вставить("ДатаВходящегоДокумента", РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяЗаказДата);
		
	АдресПогрузки    = ЗаполнитьПредставлениеАдреса("ТитулГрузоотправителяАдресПогрузки", РеквизитыТекущейВерсииТитула);
	
	Если ТипЭТрН = "Грузополучатель" Тогда  
		АдресДоставки = ЗаполнитьПредставлениеАдреса("ТитулГрузополучателяАдресВыгрузки", РеквизитыТекущейВерсииТитулаГрузополучатель);
		Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
			АдресДоставки = ЗаполнитьПредставлениеАдреса("ТитулГрузоотправителяГрузополучательАдресДоставки", РеквизитыТекущейВерсииТитула);
		КонецЕсли;
	Иначе
		АдресДоставки = ЗаполнитьПредставлениеАдреса("ТитулГрузоотправителяГрузополучательАдресДоставки", РеквизитыТекущейВерсииТитула);
	КонецЕсли;
	
	ПараметрыСоздания.Вставить("АдресОтправления",  НайтиСоздатьПунктНазначения(АдресПогрузки));
	ПараметрыСоздания.Вставить("АдресНазначения",   НайтиСоздатьПунктНазначения(АдресДоставки));
	
	Контрагент   = Неопределено;
	МассивГрузов = ЗаполнитьМассивГрузов("ТитулГрузоотправителяГрузы", РеквизитыТекущейВерсииТитула, Контрагент);

	ПараметрыСоздания.Вставить("Контрагент",     Контрагент);
	ПараметрыСоздания.Вставить("Валюта",         Справочники.Валюты.НайтиПоКоду(РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяКодВалюты));
	ПараметрыСоздания.Вставить("МассивГрузов",   МассивГрузов);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПредставлениеАдреса(ТабличнаяЧасть, РеквизитыТекущейВерсииТитула) 
	
	МассивИменРеквизитов = Новый Массив;
	
	МассивИменРеквизитов.Добавить("Индекс");
	МассивИменРеквизитов.Добавить("КодРегиона");
	МассивИменРеквизитов.Добавить("Город");
	МассивИменРеквизитов.Добавить("Район");
	МассивИменРеквизитов.Добавить("НаселенныйПункт");
	МассивИменРеквизитов.Добавить("Улица");
	МассивИменРеквизитов.Добавить("Дом");
	МассивИменРеквизитов.Добавить("Корпус");
	МассивИменРеквизитов.Добавить("Представление");
	МассивИменРеквизитов.Добавить("КодСтраны");
	
	СтруктураРеквизитовАдреса = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, РеквизитыТекущейВерсииТитула, ТабличнаяЧасть);
	
	КонтактнаяИнформация = ОбменСГИСЭПД.КонтактнаяИнформацияВXML(СтруктураРеквизитовАдреса, ,
																ОбменСГИСЭПДВызовСервера.ВидФактическийАдресКонтрагента());
    Возврат ОбменСГИСЭПД.ПредставлениеКонтактнойИнформации(КонтактнаяИнформация);
	
КонецФункции

&НаСервере
Функция НайтиСоздатьПунктНазначения(АдресПункта)
	ПунктНазначения = Справочники.уатПунктыНазначения.ПустаяСсылка();
	
	НаименованиеПункта = СокрЛП(Лев(АдресПункта, 150));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеПункта);
	Запрос.УстановитьПараметр("АдресПункта",  СокрЛП(Лев(АдресПункта, 200)));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА уатПунктыНазначения.Адрес = &АдресПункта
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	(уатПунктыНазначения.Наименование = &Наименование
	|			ИЛИ уатПунктыНазначения.Адрес = &АдресПункта)
	|	И НЕ уатПунктыНазначения.ПометкаУдаления
	|	И НЕ уатПунктыНазначения.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ПунктНазначения = Выборка.Ссылка;
		
	Иначе
		// {Совместимость}
		// Этот код - для совместимости с старым форматом хранения адреса в XML.
		ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
		
		КонтактнаяИнформацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		КонтактнаяИнформацияXDTO.Комментарий   = "";
		КонтактнаяИнформацияXDTO.Представление = АдресПункта;
		КонтактнаяИнформацияXDTO.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		
		АдресXDTO = КонтактнаяИнформацияXDTO.Состав;
		АдресXDTO.Страна = Строка(Справочники.СтраныМира.Россия);
		АдресXDTO.Состав = АдресПункта;
		
		КонтактнаяИнформацияXML = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
		// {/Совместимость}
		
		СтруктураАдресаJSON = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
		СтруктураАдресаJSON.country = Строка(Справочники.СтраныМира.Россия);
		СтруктураАдресаJSON.value = АдресПункта;
		КонтактнаяИнформацияJSON = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(СтруктураАдресаJSON);
		
		ПунктОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
		ПунктОбъект.Наименование        = НаименованиеПункта;
		ПунктОбъект.Страна              = Справочники.СтраныМира.Россия;
		ПунктОбъект.ВремяДоступностиПо  = '00010101235900';
		ПунктОбъект.РадиусПоиска        = 100;
		
		ЗначениеУстановлено = Ложь;
		ТекПользователь     = Пользователи.АвторизованныйПользователь();
		ПодразделениеПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		Если ЗначениеЗаполнено(ПодразделениеПользователь) Тогда 
			ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПодразделениеПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
				ПунктОбъект.РадиусПоиска        = ЗначениеНастройки;
				ЗначениеУстановлено = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеУстановлено Тогда 
			ОрганизацияПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ОрганизацияПользователь) Тогда 
				ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОрганизацияПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
				Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
					ПунктОбъект.РадиусПоиска = ЗначениеНастройки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПунктОбъект.Адрес               = АдресПункта;
		// {Совместимость}
		// Этот код - для совместимости с старым форматом хранения адреса в XML.
		ПунктОбъект.ЗначенияПолейАдреса = Новый ХранилищеЗначения(КонтактнаяИнформацияXML, Новый СжатиеДанных(9));
		// {/Совместимость}
		ПунктОбъект.ЗначениеАдреса      = КонтактнаяИнформацияJSON;
		
		уатЭлектронныеКартыСервер.ГеокодироватьКоординатыВПунктеНазначения(ПунктОбъект);
				
		ПунктОбъект.Записать();
		
		ПунктНазначения = ПунктОбъект.Ссылка;
	КонецЕсли;
	
	Возврат ПунктНазначения;
КонецФункции

&НаСервере
Функция ЗаполнитьМассивГрузов(ТабличнаяЧасть, РеквизитыТекущейВерсииТитула, Заказчик = Неопределено) 
	
	Возврат уатОбменСГИСЭПД.ЗаполнитьМассивГрузов(ТабличнаяЧасть, РеквизитыТекущейВерсииТитула, Заказчик);
	
КонецФункции

&НаКлиенте
Процедура ИсточникДатПриИзменении(Элемент)
	Если ИсточникДат = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1") Тогда
		Элементы.ДекорацияОтборДатаВремяПодачи.Заголовок            = Нстр("ru = 'План. дата и время подачи ТС:'");
		Элементы.ДекорацияОтборФактическиеДатаВремяПодачи.Заголовок = Нстр("ru = 'Факт. дата и время подачи ТС:'");
		Элементы.ДекорацияОтборДатаВремяУбытия.Заголовок            = Нстр("ru = 'Факт. дата и время убытия:'"); 
		
		Элементы.ДекорацияОтборДатаВремяПодачи.Ширина            = 19;
		Элементы.ДекорацияОтборФактическиеДатаВремяПодачи.Ширина = 19;
		Элементы.ДекорацияОтборДатаВремяУбытия.Ширина            = 19;
	ИначеЕсли ИсточникДат = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2") Тогда 
		Элементы.ДекорацияОтборДатаВремяПодачи.Заголовок            = Нстр("ru = 'Факт. дата и время постановки на выгрузку:'");
		Элементы.ДекорацияОтборФактическиеДатаВремяПодачи.Заголовок = Нстр("ru = 'Факт. дата и время прибытия ТС:'");
		Элементы.ДекорацияОтборДатаВремяУбытия.Заголовок            = Нстр("ru = 'Факт. даты и время убытия:'"); 
		
		Элементы.ДекорацияОтборДатаВремяПодачи.Ширина            = 27;
		Элементы.ДекорацияОтборФактическиеДатаВремяПодачи.Ширина = 27;
		Элементы.ДекорацияОтборДатаВремяУбытия.Ширина            = 27;
	ИначеЕсли ИсточникДат = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3") Тогда
		Элементы.ДекорацияОтборДатаВремяПодачи.Заголовок            = Нстр("ru = 'Заявленные дата и время прибытия:'");
		Элементы.ДекорацияОтборФактическиеДатаВремяПодачи.Заголовок = Нстр("ru = 'Факт. дата и время прибытия ТС:'");
		Элементы.ДекорацияОтборДатаВремяУбытия.Заголовок            = Нстр("ru = 'Факт. даты и время убытия:'"); 
		
		Элементы.ДекорацияОтборДатаВремяПодачи.Ширина            = 22;
		Элементы.ДекорацияОтборФактическиеДатаВремяПодачи.Ширина = 22;
		Элементы.ДекорацияОтборДатаВремяУбытия.Ширина            = 22;
	КонецЕсли;
	ЗаполнитьДатыОтбора(РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель);
	УстановитьОтборы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыОтбора(РеквизитыТекущейВерсииТитула, РеквизитыТекущейВерсииТитулаГрузоперевозчик, РеквизитыТекущейВерсииТитулаГрузополучатель)
	Если ИсточникДат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3 Тогда 
		ВыбранныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3;
		
		Если РеквизитыТекущейВерсииТитулаГрузополучатель.Свойство("ТитулГрузополучателяЗаявленныеДатаВремяПрибытия") Тогда
			ОтборДатаВремяПодачи            = РеквизитыТекущейВерсииТитулаГрузополучатель.ТитулГрузополучателяЗаявленныеДатаВремяПрибытия; 
		ИначеЕсли РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяДатаИВремяДоставки") Тогда
			ОтборДатаВремяПодачи            = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяДатаИВремяДоставки;
		КонецЕсли;
		Если РеквизитыТекущейВерсииТитулаГрузополучатель.Свойство("ТитулГрузополучателяФактическиеДатаВремяПрибытия") Тогда
			ОтборФактическиеДатаВремяПодачи = РеквизитыТекущейВерсииТитулаГрузополучатель.ТитулГрузополучателяФактическиеДатаВремяПрибытия;
		Иначе
			ОтборФактическиеДатаВремяПодачи = ТекущаяДатаСеанса();
		КонецЕсли;
		Если РеквизитыТекущейВерсииТитулаГрузополучатель.Свойство("ТитулГрузополучателяФактическиеДатаВремяУбытия") Тогда
			ОтборДатаВремяУбытия            = РеквизитыТекущейВерсииТитулаГрузополучатель.ТитулГрузополучателяФактическиеДатаВремяУбытия;
		Иначе
			ОтборДатаВремяУбытия            = ТекущаяДатаСеанса();
		КонецЕсли;
	ИначеЕсли ИсточникДат = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2 Тогда 
		ВыбранныйТитул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3;
		
		Если РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяПостановкиНаПогрузку") Тогда
			ОтборДатаВремяПодачи            = РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяПостановкиНаПогрузку; 
		ИначеЕсли РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяЗаявленныеДатаВремяПодачи") Тогда
			ОтборДатаВремяПодачи            = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяЗаявленныеДатаВремяПодачи;
		КонецЕсли;
		Если РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяПрибытия") Тогда
			ОтборФактическиеДатаВремяПодачи = РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяПрибытия;
		ИначеЕсли РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяФактическиеДатаВремяПодачи") Тогда
			ОтборФактическиеДатаВремяПодачи = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяФактическиеДатаВремяПодачи;
		КонецЕсли;
		Если РеквизитыТекущейВерсииТитулаГрузоперевозчик.Свойство("ТитулПеревозчикаПриемкаЗамечанияДатаВремяУбытия") Тогда
			ОтборДатаВремяУбытия            = РеквизитыТекущейВерсииТитулаГрузоперевозчик.ТитулПеревозчикаПриемкаЗамечанияДатаВремяУбытия;
		ИначеЕсли РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяФактическиеДатаВремяУбытия") Тогда
			ОтборДатаВремяУбытия            = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяФактическиеДатаВремяУбытия;
		КонецЕсли;
	Иначе	
		Если РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяЗаявленныеДатаВремяПодачи") Тогда
			ОтборДатаВремяПодачи            = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяЗаявленныеДатаВремяПодачи;
		КонецЕсли;  
		Если РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяФактическиеДатаВремяПодачи") Тогда
			ОтборФактическиеДатаВремяПодачи = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяФактическиеДатаВремяПодачи;
		КонецЕсли;
		Если РеквизитыТекущейВерсииТитула.Свойство("ТитулГрузоотправителяФактическиеДатаВремяУбытия") Тогда
			ОтборДатаВремяУбытия            = РеквизитыТекущейВерсииТитула.ТитулГрузоотправителяФактическиеДатаВремяУбытия;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

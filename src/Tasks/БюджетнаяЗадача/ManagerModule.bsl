#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает длительность переданной задачи
//
// Параметры:
//  Задача		 - ЗадачаОбъект.БюджетнаяЗадача		 - задача, которой ставим срок
//  ШагПроцесса	 - Справочник.ШагиБюджетныхПроцессов - шаг процесса на основании которого заполняем срок исполнения
//
Процедура УстановитьДлительностьЗадачи(Задача, ШагПроцесса) Экспорт
	
	//Если ШагПроцесса.ТипДлительности = Перечисления.ТипыСроковШаговБюджетногоПроцесса.ВКалендарныхДнях Тогда
	Если ЗначениеЗаполнено(ШагПроцесса) И ЗначениеЗаполнено(ШагПроцесса.Длительность) Тогда
		Задача.СрокИсполнения = КонецДня(Задача.Дата + (ШагПроцесса.Длительность - 1) * 86400);
	КонецЕсли;
	//Иначе
	//	График = Константы.ОсновнойКалендарьПредприятия.Получить();
	//	Задача.СрокИсполнения = КонецДня(КалендарныеГрафики.ПолучитьДатуПоКалендарю(График, Задача.Дата, ШагПроцесса.Длительность - 1));
	//КонецЕсли;
	
КонецПроцедуры

// Формирует бюджетные задачи на основании расписания бюджетного процесса
//
Процедура ФормированиеБюджетныхЗадач() Экспорт
	
	ДействующаяМодельБюджетирования = Справочники.МоделиБюджетирования.МодельБюджетированияПоУмолчанию(ТекущаяДатаСеанса());
	Если ДействующаяМодельБюджетирования <> Неопределено Тогда
		СформироватьБюджетныеЗадачиПоМодели(ДействующаяМодельБюджетирования);
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево подчиненных задач по реквизиту "основная задача"
//
// Параметры:
//  Задача	 - ЗадачаСсылка.БюджетнаяЗадача	 - задача, для которой определяются подчиненные задачи
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьДеревоПодчиненныхЗадач(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Компановка = Отчеты.ВыполнениеЗадачБюджетногоПроцесса.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Вариант = Компановка.ВариантыНастроек.Найти("СвязанныеЗадачи");
	
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компановка));
	КомпановщикНастроек.ЗагрузитьНастройки(Вариант.Настройки);
	
	Отбор = КомпановщикНастроек.Настройки.Отбор;
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ПравоеЗначение = Задача;
	
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача.ОсновнаяЗадача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	НовыйОтбор.Использование = Истина;
	
	НастройкиКомпоновкиДанных = КомпановщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Компановка, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	Результат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу утверждаемых документов по шагам процесса
//
// Параметры:
//  Действие			 - ПеречислениеСсылка.ТипыДействийШаговБюджетныхПроцессов	 - действие
//  НастройкаДействия	 - ТаблицаЗначений											 - таблица действий
//  Период				 - Дата														 - период действия задачи
// 
// Возвращаемое значение:
//   - 
//
Функция УтверждаемыеДокументыПоШагуПроцесса(Действие, НастройкаДействия, Период) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("ШагБюджетногоПроцесса");
	
	Если Действие <> Перечисления.ТипыДействийШаговБюджетныхПроцессов.УтверждениеБюджетов Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкаДействия <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Имя", "УтверждаемыеШагиБюджетногоПроцесса");
		НайденныеСтроки = НастройкаДействия.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			УтверждаемыеШагиПроцесса = НайденныеСтроки[0].Значение;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БюджетнаяЗадача.Документ,
			|	БюджетнаяЗадача.ШагБюджетногоПроцесса
			|ИЗ
			|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
			|ГДЕ
			|	БюджетнаяЗадача.ШагБюджетногоПроцесса В(&УтверждаемыеШагиПроцесса)
			|	И БюджетнаяЗадача.Период = &Период
			|	И НЕ БюджетнаяЗадача.ПометкаУдаления
			|	И БюджетнаяЗадача.Выполнена";
			Запрос.УстановитьПараметр("УтверждаемыеШагиПроцесса", УтверждаемыеШагиПроцесса);
			Запрос.УстановитьПараметр("Период", Период);
			Результат = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УП 2.0.3.7
//  
//  Изменяет структуру хранения настроек действий шагов бюджетного процесса
//
Процедура ИзменитьХранениеНастроекДействий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БюджетнаяЗадача.Ссылка КАК Ссылка,
	|	БюджетнаяЗадача.Действие КАК Действие,
	|	БюджетнаяЗадача.НастройкаДействия КАК НастройкаДействия
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	НЕ БюджетнаяЗадача.ПометкаУдаления
	|	И БюджетнаяЗадача.Действие В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДействийШаговБюджетныхПроцессов.ВводЭкземпляраБюджета), 
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДействийШаговБюджетныхПроцессов.УдалитьСогласованиеБюджетногоОтчета))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиДействия = Выборка.НастройкаДействия.Получить();
		Если НастройкиДействия = Неопределено 
			Или НастройкиДействия.Колонки.Найти("Имя") <> Неопределено Тогда
			// Хранение соотвествует новой структуре
			Продолжить;
		КонецЕсли;
		
		НовыеНастройкиДействия = Новый ТаблицаЗначений;
		НовыеНастройкиДействия.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
		НовыеНастройкиДействия.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		НовыеНастройкиДействия.Колонки.Добавить("Значение");
		
		ДоступныеНастройки = Новый Структура;
		ДоступныеНастройки.Вставить("ВидБюджета",    НСтр("en='Budget type';ru='Вид бюджета'"));
		ДоступныеНастройки.Вставить("Сценарий",      НСтр("en='Script';ru='Сценарий'"));
		ДоступныеНастройки.Вставить("Организация",   НСтр("en='Company';ru='Организация'"));
		ДоступныеНастройки.Вставить("Подразделение", НСтр("en='Department';ru='Подразделение'"));
		
		Для каждого Настройка Из ДоступныеНастройки Цикл
			СтрокаНастройкиДействия = НастройкиДействия.Найти(Настройка.Ключ);
			Если СтрокаНастройкиДействия <> Неопределено Тогда
				Если Настройка.Ключ = "Организация" 
					И Выборка.Действие = Перечисления.ТипыДействийШаговБюджетныхПроцессов.УдалитьСогласованиеБюджетногоОтчета Тогда
					ИмяНастройки = "Организации";
					ПредставлениеНастройки = НСтр("en='Companies';ru='Организации'");
					ЗначениеНастройки = Новый СписокЗначений();
					ЗначениеНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
					ЗначениеНастройки.Добавить(СтрокаНастройкиДействия.Значение);
				ИначеЕсли Настройка.Ключ = "Подразделение" 
					И Выборка.Действие = Перечисления.ТипыДействийШаговБюджетныхПроцессов.УдалитьСогласованиеБюджетногоОтчета Тогда
					ИмяНастройки = "Подразделения";
					ПредставлениеНастройки = НСтр("en='Departments';ru='Подразделения'");
					ЗначениеНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
					ЗначениеНастройки = Новый СписокЗначений();
					ЗначениеНастройки.Добавить(СтрокаНастройкиДействия.Значение);
				Иначе
					ИмяНастройки = Настройка.Ключ;
					ПредставлениеНастройки = Настройка.Значение;
					ЗначениеНастройки = СтрокаНастройкиДействия.Значение;
				КонецЕсли;
				НоваяСтрока = НовыеНастройкиДействия.Добавить();
				НоваяСтрока.Имя = ИмяНастройки;
				НоваяСтрока.Представление = ПредставлениеНастройки;
				НоваяСтрока.Значение = ЗначениеНастройки;
			КонецЕсли;
		КонецЦикла;
		
		БюджетнаяЗадача = Выборка.Ссылка.ПолучитьОбъект();
		БюджетнаяЗадача.НастройкаДействия = Новый ХранилищеЗначения(НовыеНастройкиДействия);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(БюджетнаяЗадача);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УП 2.0.4.6
//  
//  Задачи СогласованиеБюджетногоОтчета преобразуются в Прочие
//
Процедура ПреобразоватьСогласованияБюджетныхОтчетовВПрочие() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БюджетнаяЗадача.Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.Действие = &Действие
	|	И НЕ БюджетнаяЗадача.ПометкаУдаления";
	Запрос.УстановитьПараметр("Действие", Перечисления.ТипыДействийШаговБюджетныхПроцессов.УдалитьСогласованиеБюджетногоОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастройкиКонтрольныхОтчетов = Новый ТаблицаЗначений;
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("ВидБюджета");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("Сценарий");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("Организации");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("Подразделения");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("ПредставлениеОранизации");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("ПредставлениеПодразделения");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("ДанныеВПодготовке");
	НастройкиКонтрольныхОтчетов.Колонки.Добавить("ДанныеКУтверждению");
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Действие = Перечисления.ТипыДействийШаговБюджетныхПроцессов.Прочее;
		
		НастройкиДействия = Объект.НастройкаДействия.Получить();
		
		// Преобразуем настройки действия в настройки контрольных отчетов
		НастройкиКонтрольныхОтчетов.Очистить();
		НоваяСтрока = НастройкиКонтрольныхОтчетов.Добавить();
		Для каждого Параметр Из НастройкиДействия Цикл
			НоваяСтрока[Параметр.Имя] = Параметр.Значение;
			Если Параметр.Имя = "Подразделения" Тогда
				НоваяСтрока["ПредставлениеПодразделения"] = Строка(Параметр.Значение);
			КонецЕсли;
			Если Параметр.Имя = "Организации" Тогда
				НоваяСтрока["ПредставлениеОранизации"] = Строка(Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Объект.НастройкаДействия = Неопределено;
		Объект.НастройкиКонтрольныхОтчетов = Новый ХранилищеЗначения(НастройкиКонтрольныхОтчетов);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования)
	
	ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования, ТекущаяДата(), Истина);
	ТаблицаСвязейЗадач = Справочники.МоделиБюджетирования.ПолучитьТаблицуСвязейЗадач(ТаблицаЗадач);
	
	Запрос = Новый Запрос();
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ТаблицаЗадач", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ТаблицаСвязейЗадач", ТаблицаСвязейЗадач);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Табл.НомерЗадачи КАК НомерЗадачи,
	|	Табл.ШагПроцесса КАК ШагПроцесса,
	|	Табл.Период КАК Период,
	|	Табл.ЗадачаВыполнена КАК ЗадачаВыполнена,
	|	Табл.Задача КАК Задача,
	|	ВЫБОР
	|		КОГДА Табл.Задача <> ЗНАЧЕНИЕ(Задача.БюджетнаяЗадача.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗадачаСформирована,
	|	Табл.ДатаНачала КАК ДатаНачала,
	|	Табл.ДатаОкончанияФакт КАК ДатаОкончанияФакт
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Табл.Задача КАК Задача,
	|	Табл.ПредыдущаяЗадача КАК ПредыдущаяЗадача
	|ПОМЕСТИТЬ ТаблицаСвязей
	|ИЗ
	|	&ТаблицаСвязейЗадач КАК Табл
	|ГДЕ
	|	Табл.ПредыдущаяЗадача <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗадач.ШагПроцесса КАК ШагПроцесса,
	|	МАКСИМУМ(ТаблицаЗадач.Период) КАК Период
	|ПОМЕСТИТЬ МаксимальныеПериодыВыполненныхЗадач
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|ГДЕ
	|	ТаблицаЗадач.ЗадачаСформирована
	|	И ТаблицаЗадач.ЗадачаВыполнена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗадач.ШагПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗадач.НомерЗадачи КАК НомерЗадачи,
	|	ТаблицаЗадач.ШагПроцесса КАК ШагПроцесса,
	|	ТаблицаЗадач.Период КАК Период,
	|	ТаблицаЗадач.ЗадачаВыполнена КАК ЗадачаВыполнена,
	|	ТаблицаЗадач.Задача КАК Задача,
	|	ТаблицаЗадач.ЗадачаСформирована КАК ЗадачаСформирована,
	|	ТаблицаЗадач.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ПериодыПоследующиеЗаВыполнением
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПериодыВыполненныхЗадач КАК МаксимальныеПериодыВыполненныхЗадач
	|		ПО ТаблицаЗадач.ШагПроцесса = МаксимальныеПериодыВыполненныхЗадач.ШагПроцесса
	|ГДЕ
	|	ТаблицаЗадач.Период > ЕСТЬNULL(МаксимальныеПериодыВыполненныхЗадач.Период, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПоследующиеЗаВыполнением.НомерЗадачи КАК НомерЗадачи,
	|	ПериодыПоследующиеЗаВыполнением.Период КАК Период,
	|	ПериодыПоследующиеЗаВыполнением.ШагПроцесса КАК ШагПроцесса
	|ПОМЕСТИТЬ ЗадачиКФормированию
	|ИЗ
	|	ПериодыПоследующиеЗаВыполнением КАК ПериодыПоследующиеЗаВыполнением
	|ГДЕ
	|	НЕ ПериодыПоследующиеЗаВыполнением.ШагПроцесса В
	|				(ВЫБРАТЬ
	|					Фильтр.ШагПроцесса
	|				ИЗ
	|					ПериодыПоследующиеЗаВыполнением КАК Фильтр
	|				ГДЕ
	|					Фильтр.ЗадачаСформирована)
	|	И ПериодыПоследующиеЗаВыполнением.ДатаНачала <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиКФормированию.ШагПроцесса КАК ШагПроцесса,
	|	МИНИМУМ(ЗадачиКФормированию.Период) КАК Период
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	ЗадачиКФормированию КАК ЗадачиКФормированию
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиКФормированию.ШагПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиКФормированию.НомерЗадачи КАК НомерЗадачи
	|ПОМЕСТИТЬ ЗадачиКФормированиюМинимальныйПериод
	|ИЗ
	|	ЗадачиКФормированию КАК ЗадачиКФормированию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ЗадачиКФормированию.ШагПроцесса = Фильтр.ШагПроцесса
	|			И ЗадачиКФормированию.Период = Фильтр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.НомерЗадачи КАК НомерЗадачи,
	|	ТаблицаСвязей.ПредыдущаяЗадача КАК ПредыдущаяЗадача,
	|	ТаблицаЗадач.ДатаОкончанияФакт КАК ДатаОкончанияФакт
	|ПОМЕСТИТЬ НомерПредыдущихЗадач
	|ИЗ
	|	ЗадачиКФормированиюМинимальныйПериод КАК ЗадачиКФормированию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
	|		ПО ЗадачиКФормированию.НомерЗадачи = ТаблицаСвязей.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО (ТаблицаСвязей.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомерПредыдущихЗадач.НомерЗадачи КАК НомерЗадачи,
	|	МАКСИМУМ(ТаблицаЗадач.ДатаОкончанияФакт) КАК ДатаОкончанияФакт
	|ИЗ
	|	НомерПредыдущихЗадач КАК НомерПредыдущихЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО НомерПредыдущихЗадач.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	НомерПредыдущихЗадач.НомерЗадачи
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ТаблицаЗадач.ЗадачаВыполнена, ИСТИНА)) = ИСТИНА";
	// Пояснение к условию: 
	// МИНИМУМ - на тот случай, если выполнена только одна из задач параллельной группы
	// ИСТИНА в ЕСТЬNULL - на случай, если задача не имеет предыдущих задач
	
	НомерЗадачКФормированию = Запрос.Выполнить().Выгрузить();
	Для Каждого ЗадачаКФормированию из НомерЗадачКФормированию Цикл
		СтрокаЗадачи = ТаблицаЗадач.Найти(ЗадачаКФормированию.НомерЗадачи, "НомерЗадачи");
		ЗадачаОбъект = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
		
		ЗадачаОбъект.УстановитьНовыйНомер();
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ТаблицаЗадач", ТаблицаЗадач);
		ЗадачаОбъект.Период = СтрокаЗадачи.Период;
		ЗадачаОбъект.Заполнить(СтрокаЗадачи.ШагПроцесса);
		
		Если Не ЗначениеЗаполнено(ЗадачаКФормированию.ДатаОкончанияФакт) Тогда
			ЗадачаОбъект.Дата = СтрокаЗадачи.ДатаНачала;
		Иначе
			ЗадачаОбъект.Дата = Макс(ЗадачаКФормированию.ДатаОкончанияФакт + 1, СтрокаЗадачи.ДатаНачала);
		КонецЕсли;
		
		УстановитьДлительностьЗадачи(ЗадачаОбъект, СтрокаЗадачи.ШагПроцесса);
		
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
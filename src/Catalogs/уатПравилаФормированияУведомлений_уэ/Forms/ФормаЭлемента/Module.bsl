
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		АвтоТест = Истина;
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		Объект.ОтветственныйУведомления = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,	"ОсновнойОтветственный");
		Объект.АвторУведомления = Объект.ОтветственныйУведомления;
		
		ПоказыватьСообщениеПравилоНеИспользуется = Истина;
	КонецЕсли;
	
	ИспользоватьПрогнозированиеОпозданий = ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
	УчетПланФактаВМаршрутныхЛистах = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить(); 
	ИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками = ПолучитьФункциональнуюОпцию("уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьСписокТиповОбласти();
	
	ЗаполнитьОбластиПрименения();
	УстановитьДоступныеШаблоны();
	УстановитьСписокСобытий();
	УстановитьСписокТиповПолучателей();
	УстановитьДоступныеТипыИндивидуальныхПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ПравилоИспользуется И Не ВидУведомленияДоступен() Тогда
		Отказ = Истина;
		ОписаниеОповещенияВопроса = Новый ОписаниеОповещения("ОткрытиеОрганайзераЗавершение", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'В настройках программы выбранный вид уведомления отключен. Открыть форму настроек органайзера?';
		|en = 'Selected notification type is disabled. Open settings form?'");
		ПоказатьВопрос(ОписаниеОповещенияВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ПроверитьЗаполнениеОбластейПрименения(Отказ);
	
	Если Не Отказ Тогда
		ПеренестиОбластиПрименения();
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если не Отказ и Объект.ВидУведомления <> ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов") Тогда
		Объект.НастройкаКомплектовДокументов = Справочники.уатНастройкиКомплектовДокументов_уэ.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не АвтоТест И ПоказыватьСообщениеПравилоНеИспользуется И Не Объект.ПравилоИспользуется Тогда
		ПоказыватьСообщениеПравилоНеИспользуется = Ложь;
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Созданное правило не используется. Если уверены, повторите закрытие формы.'; en='The rule is not used. If you are sure, close the form again.'");
		Сообщение.Поле = "ПравилоИспользуется";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидУведомленияПриИзменении(Элемент)
	
	УстановитьВидимость();
	УстановитьДоступныеШаблоны();
	УстановитьСписокТиповПолучателей();
	УстановитьДоступныеТипыИндивидуальныхПолучателей();
	
	Если ЗначениеЗаполнено(Объект.ШаблонСообщения) Тогда
		ВидУведомленияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	УстановитьСписокТиповОбласти();
	УстановитьСписокСобытий();
	УстановитьСписокТиповПолучателей();
	
	Объект.ТипСобытия = Неопределено;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТипСобытияПриИзменении(Элемент)
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ВидУведомленияПриИзмененииСервер()
	
	ПараметрыШаблонаСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ШаблонСообщения, 
		"ПредназначенДляЭлектронныхПисем, ПредназначенДляSMS");
	
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо") 
		И Не ПараметрыШаблонаСообщения.ПредназначенДляЭлектронныхПисем Тогда
		Объект.ШаблонСообщения = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.ПустаяСсылка");
	ИначеЕсли Не ПараметрыШаблонаСообщения.ПредназначенДляSMS Тогда
		Объект.ШаблонСообщения = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_тблОбластиПрименения

&НаКлиенте
Процедура тблОбластиПримененияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.тблОбластиПрименения.ТекущиеДанные;
	УстановитьТипОбласти(ТекСтрока.ВидОбластиПрименения, ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура тблОбластиПримененияВидОбластиПримененияПриИзменении(Элемент)
	ТекСтрока = Элементы.тблОбластиПрименения.ТекущиеДанные;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидОбластиПрименения", ТекСтрока.ВидОбластиПрименения);
	НайденныеСтроки = тблОбластиПрименения.НайтиСтроки(ПараметрыОтбора);
	// Если строка с таким типом уже есть, то переходим к этой строке
	Если НайденныеСтроки.Количество() > 1 Тогда
		// Отличаем текущую строку от той, к которой нужно перейти
		Если Элементы.тблОбластиПрименения.ТекущаяСтрока <> НайденныеСтроки[0].ПолучитьИдентификатор() Тогда
			Элементы.тблОбластиПрименения.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Иначе
			Элементы.тблОбластиПрименения.ТекущаяСтрока = НайденныеСтроки[1].ПолучитьИдентификатор();
		КонецЕсли;
		тблОбластиПрименения.Удалить(ТекСтрока);
	Иначе
		ТекСтрока.ЗначениеОбластиПрименения = Неопределено;
		УстановитьТипОбласти(ТекСтрока.ВидОбластиПрименения, ТекСтрока);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПолучателиУведомлений

&НаКлиенте
Процедура ПолучателиУведомленийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
        Элемент.ТекущиеДанные.Значение = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВидУведомленияДоступен()
	Результат = ((Объект.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо или Объект.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов)	
					И ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент")) 
				ИЛИ (Объект.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю
					И ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи"))
				ИЛИ (Объект.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.SMSСообщение
					И ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия"))
				ИЛИ (Объект.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.Напоминание
					И ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"))
				Или (Объект.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.СообщениеМобильногоПриложения
					И ПолучитьФункциональнуюОпцию("уатМобильноеПриложениеВодителя"))
				ИЛИ Не ЗначениеЗаполнено(Объект.ВидУведомления);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОткрытиеОрганайзераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ГруппаЗадание.Видимость = Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю");
	Элементы.ГруппаНапоминание.Видимость = Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.Напоминание");
	Элементы.ГруппаEmailSMS.Видимость = Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.SMSСообщение")
		Или Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо")
		ИЛИ Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов");
		
	Элементы.УчетнаяЗаписьЭлектроннойПочты.Видимость = 
		Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо") 
		ИЛИ Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов");
		
	Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС")
		И (Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса")
		ИЛИ Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаГрузовогоМеста")) Тогда
		Элементы.ТипСобытия.Подсказка = НСтр("ru = 'Для Заказов на ТС с детализацией по грузовым местам могут происходить как события ""Изменение статуса""
											|(при создании документа или при установке статуса документа пользователем), так и события ""Изменение статуса грузового места"".
											|Для Заказов на ТС с детализацией по товарам или по заказу в целом происходят только события ""Изменение статуса"".';
											|en= 'If ""closing details"" is set to ""by cargo space"" for the trucking order, then 
											|both ""Status change"" and ""Cargo space status change"" events can occur.
											|Otherwise only ""Status change"" event can occur.'");
		
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.Тендер")
		И Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаОтветаПеревозчика") Тогда
		Элементы.ТипСобытия.Подсказка = НСтр("ru = 'Для данного события отслеживается поступление встречных предложений и изменение статусов безоговорочных сделок.';");

	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ТС")
		И Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ЗагрузкаИзМониторинга") Тогда
		Элементы.ТипСобытия.Подсказка = НСтр("ru = 'Для данного события отслеживаются проблемы при загрузки данных из мониторинга. Проблемой считается отсутствие данных по ТС более 12 часов.
                                              |Для получения уведомлений требуется установить флаг ""Формировать уведомления при отсутствии данных"" в карточке ТС на закладке ""Мониторинг"".'");

	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС")
		И Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаРодительскогоЗаказа") Тогда
		Элементы.ТипСобытия.Подсказка = НСтр("ru = 'Для данного события отслеживается изменение статусов родительских мультимодальных заказов независимо от детализации.';
											|en= 'For this event type the status of parent multimodal order is monitored regardless of closing details'");
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент") Тогда
		Элементы.ТипСобытия.Подсказка = "Для Сопроводительных документов отслеживается изменение статуса документами ""Установка статусов сопроводительных документов"" и ""Пакет сопроводительных документов"".";
				
	Иначе
		Элементы.ТипСобытия.Подсказка = "";
		
	КонецЕсли;
	
	Элементы.ГруппаСтатусПодсказка.Видимость =
		Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса")
		ИЛИ Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаГрузовогоМеста")
		ИЛИ Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаРодительскогоЗаказа")
		ИЛИ Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаОтправления")
		ИЛИ Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаПолучения");
	
	Элементы.ГруппаПунктПодсказка.Видимость = 
		Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктФактИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаФактИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктПланИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаПланИзменено");
		
	Элементы.НастройкаКомплектовДокументов.Видимость =
	Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов");
	Элементы.ШаблонСообщения.Видимость = 
	НЕ Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов"); 
	Элементы.ГруппаПолучателиУведомлений.Видимость = 
	НЕ Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокТиповОбласти()
	
	Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Очистить();
	флПотребностьВПеревозке = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке");
	флЗаказНаТС             = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС");
	флМаршрутныйЛист        = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист");
	флЗаказПеревозчику      = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику");
	флТендер                = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.Тендер");
	флАктОтгрузки           = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктОтгрузки");
	флАктПриемки            = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктПриемки");
	флСтраховойСертификат   = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат");
	флСД                    = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент");
	флПакетСД               = Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПакетСопроводительныхДокументов");
	
	Если флСД Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтветственныйВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтветственныйРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОрганизацияВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОрганизацияРавно"));
	КонецЕсли;
	
	Если флПотребностьВПеревозке Или флЗаказНаТС Тогда
		ПредставлениеПеревозчикаРавно = НСтр("ru = 'Контрагент'; en = 'Counterparty'");
		ПредставлениеПеревозчикаВСписке = НСтр("ru = 'Контрагент (список)'; en = 'Counterparty (list)'");
	Иначе
		ПредставлениеПеревозчикаРавно = НСтр("ru = 'Перевозчик'; en = 'Carrier'");
		ПредставлениеПеревозчикаВСписке = НСтр("ru = 'Перевозчик (список)'; en = 'Carrier (list)'");
	КонецЕсли;
		
	Если флПотребностьВПеревозке Или флЗаказНаТС Или флМаршрутныйЛист Или флЗаказПеревозчику Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорРавно"));
	КонецЕсли;
	Если флПотребностьВПеревозке Или флЗаказНаТС Или флМаршрутныйЛист Или флЗаказПеревозчику Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентРавно"), ПредставлениеПеревозчикаРавно);
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентВСписке"), ПредставлениеПеревозчикаВСписке);
	КонецЕсли;
	
	Если флСД Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаРавно"));
	КонецЕсли;
	
	Если флТендер Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.БиржаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.БиржаРавно"));
	КонецЕсли;

	Если флЗаказНаТС Или флМаршрутныйЛист Или флЗаказПеревозчику Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиВСписке"));
	КонецЕсли;
	
	Если флЗаказНаТС
		ИЛИ флМаршрутныйЛист Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.МаршрутРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.МаршрутВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипСобытияРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипСобытияВСписке"));
	КонецЕсли;
	
	Если флЗаказНаТС Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваВСписке"));
	КонецЕсли;
	
	Если флМаршрутныйЛист Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаВСписке"));
	КонецЕсли;
	
	Если флМаршрутныйЛист 
		И (Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктФактИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаФактИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктПланИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаПланИзменено")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрогнозОпозданияПоМаршрутномуЛисту")) Тогда
		
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаВСписке"));
	КонецЕсли;
	
	Если (флЗаказНаТС Или флЗаказПеревозчику Или флПотребностьВПеревозке Или флАктОтгрузки Или флАктПриемки Или флСтраховойСертификат ИЛИ флСД)
		И (Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаГрузовогоМеста")
		Или Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаРодительскогоЗаказа")) Тогда

		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусВСписке"));
		
	КонецЕсли;
	
	Если флАктОтгрузки Или флАктПриемки Тогда
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаВСписке"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СкладРавно"));
		Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СкладВСписке"));
	КонецЕсли;
	
	Если флПакетСД Тогда
		Если Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаОтправления") Тогда
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительРавно"));
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительВСписке"));
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияРавно"));
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияВСписке"));
		ИначеЕсли Объект.ТипСобытия = ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаПолучения") Тогда
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательРавно"));
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательВСписке"));
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияРавно"));
			Элементы.тблОбластиПримененияВидОбластиПрименения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияВСписке"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипОбласти(ТипОбласти, ТекущиеДанные)
	
	ТекПараметрыВыбора = Неопределено;
	Если НЕ ЗначениеЗаполнено(ТипОбласти) Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.БиржаВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.БиржаРавно") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатБиржиГрузоперевозок_уэ");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.МаршрутРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.МаршрутВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМаршруты");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатНаправленияПеревозок");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Склады");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаВСписке") 
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатВидыДоставки_уэ");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыПеревозок");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтветственныйРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтветственныйВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОрганизацияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОрганизацияВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатОбъектыСтроительства");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатСтатусы_уэ");
		ТекПараметрыВыбора = ПолучитьПараметрыВыбораСтатусов();
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СкладРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СкладВСписке") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипСобытияВСписке")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипСобытияРавно") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыСобытий_уэ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекПараметрыВыбора) Тогда
		НовыеПараметрыВыбора = Новый ФиксированныйМассив(ТекПараметрыВыбора);
		Элементы.тблОбластиПримененияЗначениеОбластиПрименения.ПараметрыВыбора = НовыеПараметрыВыбора;
	КонецЕсли;

	Если ЭтоОбластьПримененияРавно(ТипОбласти) Тогда
		Элементы.тблОбластиПримененияЗначениеОбластиПрименения.ОграничениеТипа = ТекОграничениеТипа;
	Иначе
		Элементы.тблОбластиПримененияЗначениеОбластиПрименения.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОбластиПрименения) Тогда
			ТекущиеДанные.ЗначениеОбластиПрименения = Новый СписокЗначений;
		КонецЕсли;
		ТекущиеДанные.ЗначениеОбластиПрименения.ТипЗначения = ТекОграничениеТипа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбластиПрименения()
	тблОбластиПрименения.Очистить();
	ПараметрыОтбора = Новый Структура("ВидОбластиПрименения");
	Для Каждого ТекСтрока Из Объект.ОбластиПрименения Цикл
		ПараметрыОтбора.ВидОбластиПрименения = ТекСтрока.ВидОбластиПрименения;
		НайденныеСтроки = тблОбластиПрименения.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ЭтоОбластьПримененияРавно(ТекСтрока.ВидОбластиПрименения) Тогда
				// Вид области применения "Равно"
				// Такой ситуации быть не должно - две строки с одним типом сравнения "равно" это ошибка.
			Иначе
				// Вид области применения "В списке"
				НоваяСтрока = НайденныеСтроки[0];
				НоваяСтрока.ЗначениеОбластиПрименения.Добавить(ТекСтрока.ЗначениеОбластиПрименения);
			КонецЕсли;
			
		Иначе
			Если ЭтоОбластьПримененияРавно(ТекСтрока.ВидОбластиПрименения) Тогда
				// Вид области применения "Равно"
				НоваяСтрока = тблОбластиПрименения.Добавить();
				НоваяСтрока.ЗначениеОбластиПрименения = ТекСтрока.ЗначениеОбластиПрименения;
				НоваяСтрока.ВидОбластиПрименения = ТекСтрока.ВидОбластиПрименения;
			Иначе
				// Вид области применения "В списке"
				НоваяСтрока = тблОбластиПрименения.Добавить();
				НоваяСтрока.ВидОбластиПрименения = ТекСтрока.ВидОбластиПрименения;
				НоваяСтрока.ЗначениеОбластиПрименения = Новый СписокЗначений;
				НоваяСтрока.ЗначениеОбластиПрименения.Добавить(ТекСтрока.ЗначениеОбластиПрименения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОбластьПримененияРавно(ТипОбласти)
	Если ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентРавно") 
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.МаршрутРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтветственныйРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОрганизацияРавно") 
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаРавно") 
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ПунктРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипПунктаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.СкладРавно") 
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.БиржаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаРавно")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейПримененияПравил_уэ.ТипСобытияРавно") Тогда
 		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПеренестиОбластиПрименения()
	Объект.ОбластиПрименения.Очистить();
	Для Каждого ТекСтрока Из тблОбластиПрименения Цикл
		Если ТипЗнч(ТекСтрока.ЗначениеОбластиПрименения) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из ТекСтрока.ЗначениеОбластиПрименения Цикл
				СтруктураПоиска = Новый Структура("ЗначениеОбластиПрименения, ВидОбластиПрименения", ЭлементСписка.Значение, ТекСтрока.ВидОбластиПрименения);
				Если Объект.ОбластиПрименения.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					НоваяСтрока = Объект.ОбластиПрименения.Добавить();
					НоваяСтрока.ЗначениеОбластиПрименения = ЭлементСписка.Значение;
					НоваяСтрока.ВидОбластиПрименения = ТекСтрока.ВидОбластиПрименения;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект.ОбластиПрименения.Добавить();
			НоваяСтрока.ЗначениеОбластиПрименения = ТекСтрока.ЗначениеОбластиПрименения;
			НоваяСтрока.ВидОбластиПрименения = ТекСтрока.ВидОбластиПрименения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступныеШаблоны()
	
	НовыйМассив = Новый Массив();
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", Истина);
		НовыйМассив.Добавить(НовыйПараметр); 
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидУведомления) Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", Истина);
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
		
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ШаблонСообщения.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокСобытий()
	
	Элементы.ТипСобытия.СписокВыбора.Очистить();
	Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеВесообъемныхХарактеристик"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеПунктовМаршрута"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаГрузовогоМеста"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаРодительскогоЗаказа"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ОбработкаСобытия"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеТС"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеВодителя"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеПеревозчика"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеТС"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеВодителя"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеПеревозчика"));
		Если ИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками Тогда
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ЗакреплениеМаршрутногоЛистаЗаПеревозчиком"));
		КонецЕсли;
		Если УчетПланФактаВМаршрутныхЛистах Тогда
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктФактИзменено"));
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаФактИзменено"));
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктПланИзменено"));
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаПланИзменено"));
		Иначе
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктПланИзменено"), НСтр("ru = 'Изменение времени прибытия в пункт'"));
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаПланИзменено"), НСтр("ru = 'Изменение времени убытия из пункта'"));
		КонецЕсли;
		Если ИспользоватьПрогнозированиеОпозданий Тогда
			Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ПрогнозОпозданияПоМаршрутномуЛисту"));
		КонецЕсли;
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УведомлениеПеревозчикуПоСопроводительнымДокументам"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ОбработкаСобытия"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.Тендер") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаОтветаПеревозчика"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеПеревозчика"), Нстр("ru = 'Изменение страховщика'"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктОтгрузки") 
		Или Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктПриемки") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.РасхожденияПоСкладскомуАкту"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ТС") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ЗагрузкаИзМониторинга"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПакетСопроводительныхДокументов") Тогда
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаОтправления"));
		Элементы.ТипСобытия.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаПолучения"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокТиповПолучателей()
	
	Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Очистить();
	Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель"));
	
	// Сообщение в мобильное приложение "Водитель УАТ" осмысленно отправлять только водителю
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.СообщениеМобильногоПриложения") Тогда
		Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист") Тогда
			Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Водитель"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Ответственный"));
	
	// Задание или напоминание можно поставить только пользователю
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю")
		ИЛИ Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.Напоминание") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузоотправитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузополучатель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Перевозчик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Водитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Перевозчик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоКонтрагента"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Страховщик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоСтраховщика"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерСтраховщика"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоКонтрагента"));
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПакетСопроводительныхДокументов") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Отправитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Получатель"));
	КонецЕсли;
	
	// Получатели из связанных Заказов на ТС
	Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист")
		Или Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктОтгрузки")
		Или Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктПриемки") 
		Или Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику")
		Или Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузоотправитель"),
			НСтр("ru = 'Грузоотправитель (из Заказа на ТС)'; en = 'Consignor (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя"),
			НСтр("ru = 'Контактное лицо грузоотправителя (из Заказа на ТС)'; en = 'Consignor contacts (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя"),
			НСтр("ru = 'Отв. менеджер грузоотправителя (из Заказа на ТС)'; en = 'Consignor''s main manager (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузополучатель"),
			НСтр("ru = 'Грузополучатель (из Заказа на ТС)'; en = 'Consignee (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя"),
			НСтр("ru = 'Контактное лицо грузополучателя (из Заказа на ТС)'; en = 'Consignee contacts (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя"),
			НСтр("ru = 'Отв. менеджер грузополучателя (из Заказа на ТС)'; en = 'Consignee''s main manager (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"),
			НСтр("ru = 'Контрагент (из Заказа на ТС)'; en = 'Counterparty (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента"),
			НСтр("ru = 'Отв. менеджер контрагента (из Заказа на ТС)'; en = 'Counterparty''s main manager (from trucking order)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораСтатусов()
	Если Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса")
		И Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаГрузовогоМеста")
		И Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаРодительскогоЗаказа")
		И Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаОтправления")
		И Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатусаПолучения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйМассив = Новый Массив();
	Если Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаЗаказыГрузоотправителей", Истина);
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаЗаказыПеревозчику", Истина);
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаПотребностиВПеревозке", Истина);
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктОтгрузки") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаАктыОтгрузки", Истина);
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктПриемки") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаАктыПриемки", Истина);
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаСтраховыеСертификаты", Истина);
	ИначеЕсли Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент")
		ИЛИ Объект.ТипОбъекта = ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПакетСопроводительныхДокументов") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДействуетНаСопроводительныеДокументы", Истина);
	КонецЕсли;
	НовыйМассив.Добавить(НовыйПараметр);
	
	Возврат НовыйМассив;
КонецФункции

&НаКлиенте
Процедура УстановитьДоступныеТипыИндивидуальныхПолучателей()
	
	Если Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.РолиИсполнителей");
	ИначеЕсли Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.Напоминание") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ИначеЕсли Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.SMSСообщение") 
		Или Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица,
		| СправочникСсылка.Пользователи, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица");
	ИначеЕсли Объект.ВидУведомления = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.СообщениеМобильногоПриложения") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе 
		ТекОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Элементы.ПолучателиУведомленийЗначение.ОграничениеТипа = ТекОграничениеТипа;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОбластейПрименения(Отказ)
	Для Каждого ТекСтрока Из тблОбластиПрименения Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.ВидОбластиПрименения) Тогда
			Отказ = Истина;
			НомерСтроки = тблОбластиПрименения.Индекс(ТекСтрока);
			ТекстНСтр = НСтр("ru='Не заполнена колонка ""Вид области применения"" в строке %1 таблицы ""Область применения"".'; en='Row %1 is not filled.'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ТекстНСтр, НомерСтроки+1);
			Сообщение.Поле = "тблОбластиПрименения[" + НомерСтроки + "].ВидОбластиПрименения";
			Сообщение.Сообщить();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекСтрока.ЗначениеОбластиПрименения) Тогда
			Отказ = Истина;
			НомерСтроки = тблОбластиПрименения.Индекс(ТекСтрока);
			ТекстНСтр = НСтр("ru='Не заполнена колонка ""Значение области применения"" в строке %1 таблицы ""Область применения"".'; en='Row %1 is not filled.'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ТекстНСтр, НомерСтроки+1);
			Сообщение.Поле = "тблОбластиПрименения[" + НомерСтроки + "].ЗначениеОбластиПрименения";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


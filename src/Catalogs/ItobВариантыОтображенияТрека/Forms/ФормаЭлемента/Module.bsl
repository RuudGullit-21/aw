#Область ОписаниеПеременных

&НаКлиенте
Перем КешЗначенийПолзунков;		// Структура для возможности откатить некорректное редактирование ползунка.

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьГруппПолзунковПоИхЗначениям();
	
	УстановитьЗаголовокДекорацийПолзунковПоИхЗначениям();
	
	ЗапомнитьЗначенияПолзунков();
	
	ВыделитьИнтервалыИмеющиеСмысл();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Набор = РегистрыСведений.ItobШкалаДинамическогоТрека.СоздатьНаборЗаписей();
	Набор.Отбор.ВариантОтображенияТрека.Установить(Объект.Ссылка);
	
	ЗначениеПредыдущегоПолзунка = -1;
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);			
		ЗначениеТекущегоПолзунка = ЭтотОбъект[ИмяТекущегоПолзунка];
		
		ИмяРеквизитаХраненияЦвета = "ЦветДляИнтервала" + Строка(Счетчик);
		ЗначениеХраненияЦвета = ЭтотОбъект[ИмяРеквизитаХраненияЦвета];
		
		Если НЕ ЗначениеТекущегоПолзунка = ЗначениеПредыдущегоПолзунка Тогда 
			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.ВариантОтображенияТрека = Объект.Ссылка;
			НоваяСтрока.СкоростьВерхняяГраница = ЗначениеТекущегоПолзунка;
			НоваяСтрока.ВыбранныйЦвет = ЗначениеХраненияЦвета; 
		КонецЕсли; 
		
		ЗначениеПредыдущегоПолзунка = ЗначениеТекущегоПолзунка;
	КонецЦикла;	
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьДинамическоеОтображениеТрекаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура Ползунок1ПриИзменении(Элемент)
	
	ЗначениеПолзункаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура Ползунок2ПриИзменении(Элемент)
	
	ЗначениеПолзункаПриИзменении(); 
	
КонецПроцедуры

&НаКлиенте
Процедура Ползунок3ПриИзменении(Элемент)
	
	ЗначениеПолзункаПриИзменении();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьЦветДляИнтервала1(Команда)
	
	ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманды", "УстановитьЦветДляИнтервала1");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаХранения", "ЦветДляИнтервала1");
	ДиалогВыбораЦвета.Цвет = Элементы.УстановитьЦветДляИнтервала1.ЦветФона;
	ДиалогВыбораЦвета.Показать(Новый ОписаниеОповещения("ВыборЦветаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветДляИнтервала2(Команда)
	
	ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманды", "УстановитьЦветДляИнтервала2");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаХранения", "ЦветДляИнтервала2");
	ДиалогВыбораЦвета.Цвет = Элементы.УстановитьЦветДляИнтервала2.ЦветФона;
	ДиалогВыбораЦвета.Показать(Новый ОписаниеОповещения("ВыборЦветаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветДляИнтервала3(Команда)
	
	ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманды", "УстановитьЦветДляИнтервала3");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаХранения", "ЦветДляИнтервала3");
	ДиалогВыбораЦвета.Цвет = Элементы.УстановитьЦветДляИнтервала3.ЦветФона;
	ДиалогВыбораЦвета.Показать(Новый ОписаниеОповещения("ВыборЦветаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветДляИнтервала4(Команда)
	
	ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманды", "УстановитьЦветДляИнтервала4");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаХранения", "ЦветДляИнтервала4");
	ДиалогВыбораЦвета.Цвет = Элементы.УстановитьЦветДляИнтервала4.ЦветФона;
	ДиалогВыбораЦвета.Показать(Новый ОписаниеОповещения("ВыборЦветаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьВсемПолзункамЗначенияПоУмолчанию();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗагрузитьИнтервалыДинамическогоТрекаИзРегистра();	
	КонецЕсли; 
	
	УстановитьФонКомандамИзмененияЦветаТрека();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнтервалыДинамическогоТрекаИзРегистра()
	
	Шкала = РегистрыСведений.ItobШкалаДинамическогоТрека.ПолнаяШкалаВариантовОтображенияТрека(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
				
	Счетчик = 1;
	Для каждого СтрокаШкалы Из Шкала Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		ИмяРеквизитаХраненияЦвета = "ЦветДляИнтервала" + Строка(Счетчик);
		
		ЭтотОбъект[ИмяТекущегоПолзунка] = СтрокаШкалы.СкоростьВерхняяГраница;
		
		ЭтотОбъект[ИмяРеквизитаХраненияЦвета] = СтрокаШкалы.ВыбранныйЦвет;
		
		Счетчик = Счетчик + 1;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФонКомандамИзмененияЦветаТрека()
	
	Для Счетчик = 1 По 4 Цикл
		ИмяРеквизитаХраненияЦвета = "ЦветДляИнтервала" + Строка(Счетчик);
		ИмяКомандыИзмененияЦвета = "УстановитьЦветДляИнтервала" + Строка(Счетчик);
		
		СохраненныйЦвет = ЭтотОбъект[ИмяРеквизитаХраненияЦвета];
		Элементы[ИмяКомандыИзмененияЦвета].ЦветФона = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(СохраненныйЦвет);
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаДинамическийЦветТрека_Горизонтальная.Видимость = Объект.ИспользоватьДинамическоеОтображениеТрека;
	
КонецПроцедуры
 
&НаКлиенте
// Если значение текущего ползунка = 200, то следующие показываться не должны (избыточная информация).
//
Процедура УстановитьВидимостьГруппПолзунковПоИхЗначениям()
	
	ЗначениеПредыдущегоПолзунка = -1;
	ВидимостьПредыдущегоПолзунка = Истина;
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		ИмяГруппыТекущегоПолзунка = "Группа" + ИмяТекущегоПолзунка;
		
		ЗначениеТекущегоПолзунка = ЭтотОбъект[ИмяТекущегоПолзунка];
		
		Если НЕ ВидимостьПредыдущегоПолзунка Тогда
			Элементы[ИмяГруппыТекущегоПолзунка].Видимость = Ложь;
			
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеТекущегоПолзунка < 200 Тогда
			Элементы[ИмяГруппыТекущегоПолзунка].Видимость = Истина;
		ИначеЕсли НЕ ЗначениеПредыдущегоПолзунка = 200 Тогда 
			Элементы[ИмяГруппыТекущегоПолзунка].Видимость = Истина;
		Иначе
			Элементы[ИмяГруппыТекущегоПолзунка].Видимость = Ложь;
		КонецЕсли;
		
		ВидимостьПредыдущегоПолзунка = Элементы[ИмяГруппыТекущегоПолзунка].Видимость;
		ЗначениеПредыдущегоПолзунка = ЗначениеТекущегоПолзунка;
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВсемПолзункамЗначенияПоУмолчанию()
	
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		ЭтотОбъект[ИмяТекущегоПолзунка] = 200;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПолзункаПриИзменении()
	
	Если ИнтервалыНеоднозначноПерекрываются() Тогда
		ВосстановитьЗначенияПолзунков();
	Иначе
		ЗапомнитьЗначенияПолзунков();
	КонецЕсли;
	
	УстановитьВидимостьГруппПолзунковПоИхЗначениям();
	
	УстановитьЗаголовокДекорацийПолзунковПоИхЗначениям();
	
	ВыделитьИнтервалыИмеющиеСмысл();
	
КонецПроцедуры

&НаКлиенте
Функция ИнтервалыНеоднозначноПерекрываются()
	
	ЕстьПерекрытие = Ложь;
	
	ПредыдущаяВерхняяГраница = 0;
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		ЗначениеТекущегоПолзунка = ЭтотОбъект[ИмяТекущегоПолзунка];	
		
		Если ЗначениеТекущегоПолзунка < ПредыдущаяВерхняяГраница Тогда
			ЕстьПерекрытие = Истина;
			
			Прервать;
		КонецЕсли;
		
		ПредыдущаяВерхняяГраница = ЗначениеТекущегоПолзунка;
	КонецЦикла; 
	
	
	Возврат ЕстьПерекрытие;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьЗначенияПолзунков()
	
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		
		ЭтотОбъект[ИмяТекущегоПолзунка] = КешЗначенийПолзунков[ИмяТекущегоПолзунка];		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьЗначенияПолзунков()
	
	КешЗначенийПолзунков = Новый Структура;
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		ЗначениеТекущегоПолзунка = ЭтотОбъект[ИмяТекущегоПолзунка];
		
		КешЗначенийПолзунков.Вставить(ИмяТекущегоПолзунка, ЗначениеТекущегоПолзунка);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокДекорацийПолзунковПоИхЗначениям()
	
	Элементы.Декорация_Ползунок1_С.Заголовок = "от  0";
	Элементы.Декорация_Ползунок1_По.Заголовок = "до " + Строка(Ползунок1);
	
	Элементы.Декорация_Ползунок2_С.Заголовок = "от  " + Строка(Ползунок1);
	Элементы.Декорация_Ползунок2_По.Заголовок = "до " + Строка(Ползунок2);
	
	Элементы.Декорация_Ползунок3_С.Заголовок = "от  " + Строка(Ползунок2);
	Элементы.Декорация_Ползунок3_По.Заголовок = "до " + Строка(Ползунок3);
	
	Элементы.Декорация_Ползунок4_С.Заголовок = "от  " + Строка(Ползунок3);
	Элементы.Декорация_Ползунок4_По.Заголовок = " ";
	
	ШрифтДекорации = ШрифтДекорацийПолзунков();
	Для Счетчик = 1 По 4 Цикл
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
		ИмяДекорацииС = "Декорация_" + ИмяТекущегоПолзунка + "_С";
		ИмяДекорацииПо = "Декорация_" + ИмяТекущегоПолзунка + "_По";
		
		Элементы[ИмяДекорацииС].Шрифт = ШрифтДекорации;
		Элементы[ИмяДекорацииПо].Шрифт = ШрифтДекорации;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
// Для интервалов, не имеющих смысла (от 0 до 0):
//	-Зачеркиваются декорации
//	-Меняется цвет текста декораций
//	-Команда изменения цвета становится неактивной
//
Процедура ВыделитьИнтервалыИмеющиеСмысл()
	 
	ЦветАвто = Новый Цвет;
	ЦветСерый = Новый Цвет(160, 160, 160);	// Цвет "Рамка" - серый.
	
	Для Счетчик = 2 По 4 Цикл
		ИмяПредыдущегоПолзунка = "Ползунок" + Строка(Счетчик - 1);
		ИмяТекущегоПолзунка = "Ползунок" + Строка(Счетчик);
			
		ЗначениеПредыдущегоПолзунка = ЭтотОбъект[ИмяПредыдущегоПолзунка]; 
		ЗначениеТекущегоПолзунка = ЭтотОбъект[ИмяТекущегоПолзунка];
		
		ИмяДекорацииС = "Декорация_" + ИмяТекущегоПолзунка + "_С";
		ИмяДекорацииПо = "Декорация_" + ИмяТекущегоПолзунка + "_По";
		ИмяКомандыИзмененияЦвета = "УстановитьЦветДляИнтервала" + Строка(Счетчик);
		
		Если ЗначениеТекущегоПолзунка = ЗначениеПредыдущегоПолзунка Тогда 
			Элементы[ИмяДекорацииС].ЦветТекста = ЦветСерый;
			Элементы[ИмяДекорацииПо].ЦветТекста = ЦветСерый;
						
			Элементы[ИмяКомандыИзмененияЦвета].Доступность = Ложь;
		Иначе
			Элементы[ИмяДекорацииС].ЦветТекста = ЦветАвто;
			Элементы[ИмяДекорацииПо].ЦветТекста = ЦветАвто;
			
			Элементы[ИмяКомандыИзмененияЦвета].Доступность = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция ШрифтДекорацийПолзунков()
	
	Возврат Новый Шрифт("Arial", 12,, Истина);
	
КонецФункции

&НаКлиенте
Процедура ВыборЦветаЗавершение(ВыбранныйЦвет, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЦвет = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	АбсолютныйЦвет = ItobОбщегоНазначенияВызовСервера.ПолучитьАбсолютныйЦвет(ВыбранныйЦвет);
	
	Элементы[ДополнительныеПараметры.ИмяЭлементаКоманды].ЦветФона = АбсолютныйЦвет;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаХранения] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(АбсолютныйЦвет.Красный, 
																								  						  АбсолютныйЦвет.Зеленый, 
																								  						  АбсолютныйЦвет.Синий);
КонецПроцедуры

#КонецОбласти 
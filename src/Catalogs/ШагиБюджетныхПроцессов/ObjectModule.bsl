#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мРежимОбновленияКода Экспорт; // если флаг установлен - не производится обновление наименования, 
// представления длительности, представления расписания 
Перем мРежимОбновленияНаименования Экспорт; // если флаг установлен - не производим проверки
Перем мПериодичностьРодителя Экспорт; // содержит периодичность родительского элемента.

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	Если мРежимОбновленияКода Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	ПроверенныеРеквизитыОбъекта = Новый Массив;
	Если ЭтоГруппа Тогда
		ПроверенныеРеквизитыОбъекта.Добавить("Наименование");
		ПроверенныеРеквизитыОбъекта.Добавить("Описание");
	Иначе
		ПроверяемыеРеквизиты.Добавить("Родитель");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ПроверенныеРеквизитыОбъекта);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Перем Ошибки, ПериодичностьРодителя;
	
	Если ОбменДанными.Загрузка ИЛИ мРежимОбновленияКода Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Если мРежимОбновленияНаименования Тогда
			ПериодичностьРодителя = мПериодичностьРодителя;
		Иначе
			ПериодичностьРодителя = ?(ЗначениеЗаполнено(Родитель), Родитель.Периодичность, Владелец.Периодичность);
		КонецЕсли;
		
		Дополнение = ", " + ПорядокВыполненияШагов;
		ПредставлениеПериодичности = "";
		
		Если Периодичность = ПериодичностьРодителя Тогда
			ПредставлениеПериодичности = НСтр("en='Однократно';ru='Однократно'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
			ПредставлениеПериодичности = НСтр("en='Daily';ru='Ежедневно'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			ПредставлениеПериодичности = НСтр("en='Weekly';ru='Еженедельно'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
			ПредставлениеПериодичности = НСтр("en='By ten-day periods';ru='По декадам'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			ПредставлениеПериодичности = НСтр("en='Monthly';ru='Ежемесячно'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			ПредставлениеПериодичности = НСтр("en='Ежеквартально';ru='Ежеквартально'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			ПредставлениеПериодичности = НСтр("en='By half-year periods';ru='По полугодиям'");
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			ПредставлениеПериодичности = НСтр("en='Ежегодно';ru='Ежегодно'");
		КонецЕсли;
		Если ПустаяСтрока(Описание) Тогда
			Наименование = Строка(ПредставлениеПериодичности) + Дополнение;
		Иначе
			Наименование = Строка(Описание) + " (" + ПредставлениеПериодичности + Дополнение + ")";
		КонецЕсли;
		
		ЗаполнитьПредставлениеРасписания();
		
		Если мРежимОбновленияНаименования Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ТипДлительности = Перечисления.ТипыСроковШаговБюджетногоПроцесса.ВКалендарныхДнях Тогда
			ОписаниеДлительности = НСтр("en='календарный день, календарных дня, календарных дней';ru='календарный день, календарных дня, календарных дней'");
		Иначе
			ОписаниеДлительности = НСтр("en='рабочий день, рабочих дня, рабочих дней';ru='рабочий день, рабочих дня, рабочих дней'");
		КонецЕсли;
		ПредставлениеДлительности = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Длительность, ОписаниеДлительности);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШагиБюджетныхПроцессов.Родитель,
	|	ШагиБюджетныхПроцессов.Периодичность
	|ИЗ
	|	Справочник.ШагиБюджетныхПроцессов КАК ШагиБюджетныхПроцессов
	|ГДЕ
	|	ШагиБюджетныхПроцессов.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредыдущийРодитель = Справочники.ШагиБюджетныхПроцессов.ПустаяСсылка();
	ПредыдущаяПериодичность = Периодичность;
	Если Выборка.Следующий() Тогда
		ПредыдущийРодитель = Выборка.Родитель;
		ПредыдущаяПериодичность = Выборка.Периодичность;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Если Не Ссылка.Пустая() Тогда
			ПроверитьВозможностьСменыПериодичности(Ошибки, ПредыдущаяПериодичность);
		КонецЕсли;
		
		ПроверитьПериодичностьПоРодителю(Ошибки, ПериодичностьРодителя);
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
	Если Не Ссылка.Пустая() и Не Отказ Тогда
		
		Если Родитель <> ПредыдущийРодитель Тогда
			УстановитьНовыйКод();
			Справочники.ШагиБюджетныхПроцессов.ПеренумероватьГруппуЭлементов(ПредыдущийРодитель, Ссылка);
		КонецЕсли;
		
		Если ЭтоГруппа Тогда
			Если Периодичность <> ПредыдущаяПериодичность Тогда
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ШагиБюджетныхПроцессов.Ссылка
				|ИЗ
				|	Справочник.ШагиБюджетныхПроцессов КАК ШагиБюджетныхПроцессов
				|ГДЕ
				|	ШагиБюджетныхПроцессов.ЭтоГруппа
				|	И ШагиБюджетныхПроцессов.Родитель = &Ссылка";
				
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Объект.мРежимОбновленияНаименования = Истина;
					Объект.мПериодичностьРодителя = Периодичность;
					Объект.Записать();
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет реквизит "Представление расписания"
// на основании выбранных параметров запуска для отображения в списке
//
// Параметры
//  Нет
//
Процедура ЗаполнитьПредставлениеРасписания()
	
	ПредставлениеРасписания = НСтр("en='Начать ';ru='Начать '");
	Если Срок > 0 Тогда
		ПредставлениеРасписания = ПредставлениеРасписания +
		?(УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоОкончанияПериода
		ИЛИ УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоНачалаПериода, НСтр("en='to';ru='до'"), НСтр("en='после';ru='после'"));
	Иначе
		ПредставлениеРасписания = ПредставлениеРасписания + НСтр("en='вместе';ru='вместе'");
	КонецЕсли;
	
	СтрУсловиеЗапуска = СтрЗаменить(НРег(УсловиеЗапуска), НСтр("en='до ';ru='до '"), "");
	СтрУсловиеЗапуска = СтрЗаменить(НРег(СтрУсловиеЗапуска), НСтр("en='после ';ru='после '"), "");
	СтрУсловиеЗапуска = СокрЛП(СтрУсловиеЗапуска);
	
	ПредставлениеРасписания = ПредставлениеРасписания + " " + СтрУсловиеЗапуска + " ";
	
	Если Срок > 0 Тогда
		ПредставлениеРасписания = ПредставлениеРасписания + 
		?(УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоНачалаПериода
		ИЛИ УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоОкончанияПериода, НСтр("en='for';ru='за'"), НСтр("en='every';ru='через'"));
		ПредставлениеРасписания = ПредставлениеРасписания + " " + Срок + " " + НРег(ТипСрока);
	КонецЕсли;
	
	ПредставлениеРасписания = СокрЛП(ПредставлениеРасписания);
	ПредставлениеРасписания = СтрЗаменить(ПредставлениеРасписания, НСтр("en='вместе начала';ru='вместе начала'"), НСтр("en='вместе с началом';ru='вместе с началом'"));
	ПредставлениеРасписания = СтрЗаменить(ПредставлениеРасписания, НСтр("en='вместе окончания';ru='вместе окончания'"), НСтр("en='вместе с окончанием';ru='вместе с окончанием'"));
	
КонецПроцедуры

Процедура ПроверитьВозможностьСменыПериодичности(Ошибки, ПредыдущаяПериодичность)
	
	Если Периодичность = ПредыдущаяПериодичность Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПериодичностей = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ТаблицаПериодичностей", ТаблицаПериодичностей);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаПериодичностей.Периодичность,
	               |	ТаблицаПериодичностей.Порядок
	               |ПОМЕСТИТЬ УпорядоченныеПериодичности
	               |ИЗ
	               |	&ТаблицаПериодичностей КАК ТаблицаПериодичностей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УпорядоченныеПериодичности.Периодичность,
	               |	УпорядоченныеПериодичности.Порядок
	               |ПОМЕСТИТЬ ПериодичностьТекущая
	               |ИЗ
	               |	УпорядоченныеПериодичности КАК УпорядоченныеПериодичности
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.Периодичность КАК ПеречислениеПериодичность
	               |		ПО УпорядоченныеПериодичности.Периодичность = ПеречислениеПериодичность.Ссылка
	               |			И (ПеречислениеПериодичность.Ссылка = &Периодичность)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(МАКСИМУМ(УпорядоченныеПериодичности.Порядок), 0) КАК ПорядокПодчиненного,
	               |	ПериодичностьЗапускаЗадачиБюджетногоПроцесса.Порядок
	               |ПОМЕСТИТЬ ВременнаяТаблица
	               |ИЗ
	               |	Справочник.ШагиБюджетныхПроцессов КАК ШагиБюджетныхПроцессов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УпорядоченныеПериодичности КАК УпорядоченныеПериодичности
	               |		ПО (УпорядоченныеПериодичности.Периодичность = ШагиБюджетныхПроцессов.Периодичность)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодичностьТекущая КАК ПериодичностьЗапускаЗадачиБюджетногоПроцесса
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ШагиБюджетныхПроцессов.Ссылка В ИЕРАРХИИ(&Ссылка)
	               |	И ШагиБюджетныхПроцессов.ЭтоГруппа
	               |	И ШагиБюджетныхПроцессов.Ссылка <> &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПериодичностьЗапускаЗадачиБюджетногоПроцесса.Порядок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	1 КАК Поле1
	               |ИЗ
	               |	ВременнаяТаблица КАК ВременнаяТаблица
	               |ГДЕ
	               |	ВременнаяТаблица.Порядок < ВременнаяТаблица.ПорядокПодчиненного";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
		"Периодичность",
		НСтр("en='Невозможно изменить периодичность. Сначала измените периодичность у подчиненных групп';ru='Невозможно изменить периодичность. Сначала измените периодичность у подчиненных групп'"), "");
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	БюджетнаяЗадача.Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.ШагБюджетногоПроцесса В ИЕРАРХИИ(&ШагБюджетногоПроцесса)";
	
	Запрос.УстановитьПараметр("ШагБюджетногоПроцесса", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
		"Периодичность",
		НСтр("en='Невозможно изменить периодичность."
"Есть созданные задачи по подчиненным этапам. "
"Установите флаг ""Не выполняется"" у этапа и создайте новый этап.';ru='Невозможно изменить периодичность."
"Есть созданные задачи по подчиненным этапам. "
"Установите флаг ""Не выполняется"" у этапа и создайте новый этап.'"), "");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодичностьПоРодителю(Ошибки, ПериодичностьРодителя)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПериодичностей.Периодичность,
	|	ТаблицаПериодичностей.Порядок
	|ПОМЕСТИТЬ УпорядоченныеПериодичности
	|ИЗ
	|	&ТаблицаПериодичностей КАК ТаблицаПериодичностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпорядоченныеПериодичности.Порядок
	|ПОМЕСТИТЬ ПериодичностьРодитель
	|ИЗ
	|	УпорядоченныеПериодичности КАК УпорядоченныеПериодичности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.Периодичность КАК ПеречислениеПериодичность
	|		ПО УпорядоченныеПериодичности.Периодичность = ПеречислениеПериодичность.Ссылка
	|			И (ПеречислениеПериодичность.Ссылка = &ПериодичностьРодителя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпорядоченныеПериодичности.Порядок
	|ПОМЕСТИТЬ Периодичность
	|ИЗ
	|	УпорядоченныеПериодичности КАК УпорядоченныеПериодичности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.Периодичность КАК ПеречислениеПериодичность
	|		ПО УпорядоченныеПериодичности.Периодичность = ПеречислениеПериодичность.Ссылка
	|			И (ПеречислениеПериодичность.Ссылка = &Периодичность)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВложенныйЗапрос.ПорядокРодителя) КАК ПорядокРодителя,
	|	МАКСИМУМ(ВложенныйЗапрос.Порядок) КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодичностьРодитель.Порядок КАК ПорядокРодителя,
	|		NULL КАК Порядок
	|	ИЗ
	|		ПериодичностьРодитель КАК ПериодичностьРодитель
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		Периодичность.Порядок
	|	ИЗ
	|		Периодичность КАК Периодичность) КАК ВложенныйЗапрос");
	
	ТаблицаПериодичностей = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Запрос.УстановитьПараметр("ТаблицаПериодичностей", ТаблицаПериодичностей);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ПериодичностьРодителя", ПериодичностьРодителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() и Выборка.Порядок > Выборка.ПорядокРодителя Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
		"Периодичность",
		НСтр("en='Периодичность должна быть меньше периодичности группы';ru='Периодичность должна быть меньше периодичности группы'"), "");
	КонецЕсли;
	
КонецПроцедуры

мРежимОбновленияКода = Ложь;
мРежимОбновленияНаименования = Ложь;

#КонецОбласти

#КонецЕсли

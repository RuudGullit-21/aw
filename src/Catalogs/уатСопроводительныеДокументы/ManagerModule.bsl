#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Позволяет определить список заблокированных реквизитов.
// 
// Возвращаемое значение:
//  Массив - из Строка - строки в формате "ИмяРеквизита[;ИмяЭлементаФормы,...]",
//  где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы -
//  имя элемента формы, связанного с реквизитом. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив();
	БлокируемыеРеквизиты.Добавить("ПлановаяДатаОбработкиВручную");
	БлокируемыеРеквизиты.Добавить("ПлановаяДатаОбработки");
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	СДСсылка = Неопределено;
	
	Если ТипЗнч(ПредметСообщения) = Тип("СправочникСсылка.уатСопроводительныеДокументы") Тогда 
		СДСсылка = ПредметСообщения;
	ИначеЕсли ТипЗнч(ПредметСообщения) = Тип("Структура")
		И ПредметСообщения.Свойство("Предмет") И ТипЗнч(ПредметСообщения.Предмет) = Тип("СправочникСсылка.уатСопроводительныеДокументы") Тогда
		СДСсылка = ПредметСообщения.Предмет;
	КонецЕсли;
	
	Если СДСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Контрагент = СДСсылка.ВладелецДокумента;
	СписокАдресов = Документы.уатРассылкаЭлектронныхПисем_уэ.СформироватьСписокАдресов(
		Новый Структура("Контрагент, КонтактноеЛицо", Контрагент, Контрагент.ОсновноеКонтактноеЛицо));
		
	Если СписокАдресов.Количество() > 0 Тогда
		стрАдрес = СписокАдресов[0].Значение;
		Если Не стрАдрес.Количество() = 0 Тогда
			НовыйПолучатель = ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адрес = стрАдрес.Представление;
			НовыйПолучатель.Представление = ?(стрАдрес.Объект = Контрагент,Строка(Контрагент),Строка(Контрагент.ОсновноеКонтактноеЛицо)) + " <" + стрАдрес.Представление + ">";
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ТекстВременнаяТаблица - Строка - Имя временной таблицы, в которую помещаются полученные данные.
//  Объединить  - Булево  - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	уатСопроводительныеДокументы.ВладелецДокумента КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|ГДЕ
	|	уатСопроводительныеДокументы.Ссылка = &Предмет
	|	И НЕ уатСопроводительныеДокументы.ВладелецДокумента = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьСтатусДокумента(СопроводительныйДокумент, Статус = Неопределено, ДатаСтатуса = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СопроводительныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = Документы.уатУстановкаСтатусовСопроводительныхДокументов.СоздатьДокумент();
	Если НЕ ЗначениеЗаполнено(ДатаСтатуса) Тогда
		ДокОбъект.Дата = ТекущаяДата();
	Иначе
		ДокОбъект.Дата = ДатаСтатуса;
	КонецЕсли;
	ДокОбъект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	ДокОбъект.Организация   = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ДокОбъект.Ответственный, "ОсновнаяОрганизация");
	
	НоваяСтрока = ДокОбъект.СопроводительныеДокументы.Добавить();
	НоваяСтрока.СопроводительныйДокумент = СопроводительныйДокумент;	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		НоваяСтрока.Статус = Справочники.уатСтатусы_уэ.Новый;
	Иначе
		НоваяСтрока.Статус = Статус;
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

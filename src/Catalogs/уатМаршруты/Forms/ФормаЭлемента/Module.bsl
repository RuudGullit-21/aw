
#Область ОписаниеПеременных

&НаКлиенте
Перем ОповещениеПослеДлительнойОперации;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизатор;
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.уатМаршруты) Тогда 
		Элементы.ПредставлениеМаршрута.Доступность = Ложь;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Или уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		МодульЭлектронныеКартыСервер = ОбщегоНазначения.ОбщийМодуль("уатЭлектронныеКартыСервер");
		МодульЭлектронныеКартыСервер.УстановитьСписокВыбораЦветовВПоле(Элементы.ЦветНаКарте);
		Если Объект.Ссылка.Пустая() Тогда
			УстановитьСлучайныйЦветПункта();
		КонецЕсли;
	КонецЕсли;

	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	Элементы.ГруппаСтатус.Видимость = Объект.Статус = Перечисления.уатСтатусыдействия.НеДействует;
	
	ВосстановитьНастройки();
	ЗаполнитьРасписаниеРейсов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьДоступность();
	
	Если Объект.ПредставлениеМаршрутаОднимПунктом Тогда 
		ПредставлениеМаршрута = 1;
	Иначе 
		ПредставлениеМаршрута = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЭлектронныеКарты_ЗаписьМаршрута"
		И Источник = Объект.Ссылка Тогда
		Модифицированность = Истина;
		Прочитать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнитьРасписаниеРейсов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Расстояние = 0 И Объект.ВремяВПути = 0 Тогда
		ПриИзмененииПункта();
		ОбновитьРасстояние();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеМаршрутаПриИзменении(Элемент)
	
	Если ПредставлениеМаршрута = 1 Тогда 
		Объект.ПредставлениеМаршрутаОднимПунктом = Истина;
	Иначе 
		Объект.ПредставлениеМаршрутаОднимПунктом = Ложь;
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() ИЛИ уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
			Объект.ИспользоватьДляПланированияВАРМЛогиста = Ложь;
			Объект.НочнойМаршрут = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяВПутиПриИзменении(Элемент)
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.ВремяВПути);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтправленияПриИзменении(Элемент)
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.ВремяОтправления);
	
	Если Объект.ВремяОтправления > 23.59 Тогда
		Объект.ВремяОтправления = 23 + (Объект.ВремяОтправления - Цел(Объект.ВремяОтправления));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляПланированияВАРМЛогистаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Элементы.ГруппаСтатус.Видимость = Объект.Статус = ПредопределенноеЗначение("Перечисление.уатСтатусыдействия.НеДействует");
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовТолькоДействующиеПриИзменении(Элемент)
	ЗаполнитьРасписаниеРейсов();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПунктыСледования

&НаКлиенте
Процедура ПунктыСледованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ПунктыСледования.ТекущиеДанные.УИД = СформироватьУИД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПередУдалением(Элемент, Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеТаблицыФормыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПослеУдаления(Элемент)
	
	ОбновитьРасстояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьРасстояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПунктОтправленияПриИзменении(Элемент)
	
	ПриИзмененииПункта();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПунктПрибытияПриИзменении(Элемент)
	
	ПриИзмененииПункта();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыВремяВПутиПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПунктыСледования.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяВПути);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьВремяРасстояние(Команда)
	
	ПриИзмененииПункта();
	ОбновитьРасстояние();
	Если Объект.ВремяВПути = 0 И Объект.Расстояние = 0 Тогда 
		ТекстНСТР = НСтр("en='Failed to calculate the time and distance between points.';ru='Не удалось рассчитать время и расстояние между пунктами.'");
		ПоказатьПредупреждение(, ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовНастроить(Команда)
	ПараметрыФормы = Новый Структура("Маршрут", Объект.Ссылка);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовОбновить(Команда)
	ЗаполнитьРасписаниеРейсов();
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеМаршрута(Команда)
	
	// Проверка корректности маршрута. Первая точка должна быть погрузкой, остальные - разгрузкой.
	ТекстОшибки = "";
	Если Не Объект.ПредставлениеМаршрутаОднимПунктом Тогда
		ТекстОшибки = НСтр("ru = 'Для оптимального перестроения маршрут должен быть представлен одиночными пунктами'");
	ИначеЕсли Объект.Этапы.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Для оптимального перестроения требуется заполнить маршрут'");
	ИначеЕсли Объект.Этапы[0].ТипТочиМаршрута <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
		ТекстОшибки = НСтр("ru = 'Для оптимального перестроения первая точка маршрута должна быть точкой погрузки'");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		Для Сч = 1 По Объект.Этапы.Количество() - 1 Цикл
			Если Объект.Этапы[Сч].ТипТочиМаршрута <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
				ТекстОшибки = НСтр(
					"ru = 'Для оптимального перестроения все точки маршрута после первой должны быть точками разгрузки'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкиМаршрутизации = уатОбщегоНазначения_уэ.ПолучитьНастройкиМаршрутизацииДляОптимизацииМаршрута();
	флRarusVRP = НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP";
	ТекстОшибки = "";
	
	Если НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "Яндекс"
		Или НастройкиМаршрутизации.НастройкаАлгоритмОптимизации = "RarusVRP" Тогда
		// Яндекс
		IDЗадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(НастройкиМаршрутизации, ТекстОшибки);
		Если Не ЗначениеЗаполнено(IDЗадачиВнешнийМаршрутизатор) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
		Если ЗаданиеВыполнено Тогда
			Если ТекстОшибки = "" Тогда 
				ОптимальноеПерестроениеМаршрутаПослеМаршрутизации(Неопределено, Неопределено);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизатор = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеМаршрутаПослеМаршрутизации", ЭтотОбъект);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал,
		|МаксимальныйИнтервал,
		|ТекущийИнтервал,
		|КоэффициентУвеличенияИнтервала", 
		1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму(
		"ОбщаяФорма.уатДлительнаяОперация",
		,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект)
		);
	Иначе
		// Алгоритм очередей
		АдресаПунктов = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Этапы Цикл
			АдресаПунктов.Добавить(ТекСтрока.ПунктОтправления);
		КонецЦикла;
		ДополнительныеПараметры = Новый Структура("НастройкиМаршрутизации, АдресаПунктов", НастройкиМаршрутизации, АдресаПунктов);
		Если Не уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(АдресаПунктов) Тогда
			
			ТекстВопроса = Новый ФорматированнаяСтрока(
				НСтр("en='To continue routing it is necessary to update the distances between the points.';ru='Для продолжения маршрутизации необходимо выполнить обновление расстояний между пунктами.'") + Символы.ПС
				+ НСтр("en='For update it is necessary to have access to the server';ru='Для обновления необходимо наличие доступа к серверу'") + " "
				+ НСтр("en='via the Internet. Operation can take a long time.';ru='через интернет. Операция может занять длительное время.'") + Символы.ПС
				+ НСтр("en='Duration depends on the number of destinations in route.';ru='Продолжительность зависит от количества пунктов назначения в маршруте.'") + Символы.ПС
				+ НСтр("en='Maximum number of requests to online service is limited.';ru='Максимальное количество запросов к онлайн сервису ограничено.'")
			);
			
			Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеМаршрутаОбновитьПункты", ЭтотОбъект, ДополнительныеПараметры);
			СписокОтветов = Новый СписокЗначений();
			СписокОтветов.Добавить("ОбновитьПункты",          НСтр("en='Update distances';ru='Обновить расстояния'"));
			СписокОтветов.Добавить("ПродолжитьБезОбновления", НСтр("en='Continue without updating';ru='Продолжить без обновления'"));
			СписокОтветов.Добавить("Отменить",                НСтр("en='Cancel routing';ru='Отменить маршрутизацию'"));
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокОтветов);
		Иначе 
			ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьРасстояние()
	
	мРасстояние = Объект.Этапы.Итог("Расстояние");
	Если Объект.Расстояние <> мРасстояние Тогда
		Объект.Расстояние = мРасстояние;
	КонецЕсли;
	
	мВремяВПути = 0;
	Для Каждого ТекСтрока Из Объект.Этапы цикл
		Если ЗначениеЗаполнено(ТекСтрока.ВремяВПути) Тогда
			мВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяВПути, ТекСтрока.ВремяВПути);
		КонецЕсли;
	КонецЦикла;
	Если Объект.ВремяВПути <> мВремяВПути Тогда
		Объект.ВремяВПути = мВремяВПути;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьРасстояние()

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ВариантПоставкиПРОФ = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	
	Если Объект.ПредставлениеМаршрутаОднимПунктом Тогда
		Элементы.ПунктыСледования.ПодчиненныеЭлементы.ЭтапыПунктПрибытия.Видимость    = Ложь;
		Элементы.ПунктыСледования.ПодчиненныеЭлементы.ЭтапыПунктОтправления.Заголовок = НСтр("en='Point';ru='Пункт'");
		Элементы.ПунктыСледования.ПодчиненныеЭлементы.ПунктыСледованияКонтрагент.Видимость = Истина;
		
	Иначе
		Элементы.ПунктыСледования.ПодчиненныеЭлементы.ЭтапыПунктПрибытия.Видимость    = Истина;
		Элементы.ПунктыСледования.ПодчиненныеЭлементы.ЭтапыПунктОтправления.Заголовок = НСтр("en='Point of departure';ru='Пункт отправления'");
		Элементы.ПунктыСледования.ПодчиненныеЭлементы.ПунктыСледованияКонтрагент.Видимость = Ложь;
	КонецЕсли;
	
	Если ВариантПоставкиКОРП ИЛИ ВариантПоставкиПРОФ Тогда
		
		Элементы.СтраницаРасписаниеРейсов.Видимость = Истина;
		Элементы.ЦветНаКарте.Видимость              = Истина;
		
		Элементы.ИспользоватьДляПланированияВАРМЛогиста.Доступность = Объект.ПредставлениеМаршрутаОднимПунктом;
		
		Если Объект.ПредставлениеМаршрутаОднимПунктом Тогда 
			Элементы.ЭтапыОперация.Видимость = Истина;
		Иначе 
			Элементы.ЭтапыОперация.Видимость = Ложь;
		КонецЕсли;
		
		Если ВариантПоставкиКОРП И Объект.ИспользоватьДляПланированияВАРМЛогиста Тогда
			Элементы.ВремяОтправления.Видимость = Истина;
			Элементы.СтраницаТС.Видимость       = Истина;
			Элементы.НочнойМаршрут.Видимость    = Истина;
		Иначе 
			Элементы.ВремяОтправления.Видимость = Ложь;
			Элементы.СтраницаТС.Видимость       = Ложь;
			Элементы.НочнойМаршрут.Видимость    = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ЭтапыОперация.Видимость            = Ложь;
		Элементы.ВремяОтправления.Видимость         = Ложь;
		Элементы.СтраницаТС.Видимость               = Ложь;
		Элементы.СтраницаРасписаниеРейсов.Видимость = Ложь;
		Элементы.ЦветНаКарте.Видимость              = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьДляПланированияВАРМЛогиста.Видимость = ВариантПоставкиКОРП;
	
	// Сейчас контрагент не используется для заполнения в документах, 
	// используется только для маршрутизации по алгоритму фиксированных маршрутов.
	// Отображения для варианта "Парные пункты" оставлено, чтобы не потерять данные пользователей.
	Элементы.ПунктыСледованияКонтрагент.Видимость = ВариантПоставкиКОРП;
	
	Элементы.ОптимальноеПерестроениеМаршрута.Видимость = ВариантПоставкиКОРП И Объект.ПредставлениеМаршрутаОднимПунктом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПункта()
	
	Для Сч = 0 По Объект.Этапы.Количество() - 1 Цикл 
		Пункт1 = Объект.Этапы[Сч].ПунктОтправления;
		
		Если Объект.ПредставлениеМаршрутаОднимПунктом Тогда
			Если Сч = Объект.Этапы.Количество() - 1 Тогда 
				Объект.Этапы[Сч].Расстояние = 0;
				Объект.Этапы[Сч].ВремяВПути = 0;
				Продолжить;
			Иначе 
				Пункт2 = Объект.Этапы[Сч+1].ПунктОтправления;
			КонецЕсли;
		Иначе
			Пункт2 = Объект.Этапы[Сч].ПунктПрибытия;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Пункт1) Или Не ЗначениеЗаполнено(Пункт2) Тогда
			Продолжить;
		КонецЕсли;
		
		мсвПункты = Новый Массив;
		мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", Пункт1, Пункт2));
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		
		Объект.Этапы[Сч].Расстояние = мсвПункты[0].Расстояние;
		Объект.Этапы[Сч].ВремяВПути = мсвПункты[0].Время;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает новый УИД для таблицы этапов.
// Новый УИД = Количество этапов + 1.
//
// Возвращаемое значение:
//	Число - номер нового этапа маршрута.
//
&НаСервере
Функция СформироватьУИД()
	
	мТаблица = Объект.Этапы.Выгрузить();
	мТаблица.Сортировать("УИД Возр");
	мКоличество = мТаблица.Количество();
	Если мКоличество > 0 Тогда
		мУИД = мТаблица[мКоличество-1].УИД + 1;
	Иначе
		мУИД = 1;
	КонецЕсли;
	
	Возврат мУИД;
	
КонецФункции //СформироватьУИД

&НаСервере
Процедура УстановитьСлучайныйЦветПункта()
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Возврат;
	КонецЕсли;
	
	МодульЗащищенныеФункцииСервер_проф = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_проф");
	Объект.ЦветНаКарте = МодульЗащищенныеФункцииСервер_проф.СлучайноеЧисло(, 15);
	
	Если Объект.ЦветНаКарте = 0 Тогда 
		Объект.ЦветНаКарте = 16;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеРейсов()
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРейсов.Очистить();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРасписаниеРейсов.Выход КАК Выход,
		|	уатРасписаниеРейсов.Рейс КАК Рейс,
		|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
		|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
		|	уатРасписаниеРейсов.FTL КАК FTL,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяОтправления,
		|	ЕСТЬNULL(уатМаршрутыЭтапы.ПунктОтправления, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК Пункт
		|ИЗ
		|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
		|		ПО уатРасписаниеРейсов.Маршрут = уатМаршрутыЭтапы.Ссылка
		|			И уатРасписаниеРейсов.УИДПункта = уатМаршрутыЭтапы.УИД
		|ГДЕ
		|	уатРасписаниеРейсов.Маршрут = &Маршрут";
		Если РасписаниеРейсовТолькоДействующие Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И (уатРасписаниеРейсов.ДействуетС = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ уатРасписаниеРейсов.ДействуетС <= &ТекущаяДата)
			|	И (уатРасписаниеРейсов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ уатРасписаниеРейсов.ДействуетПо >= &ТекущаяДата)";
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	уатРасписаниеРейсов.Рейс,
		|	уатРасписаниеРейсов.ДатаУстановки,
		|	уатРасписаниеРейсов.ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо,
		|	уатМаршрутыЭтапы.НомерСтроки";
		Запрос.УстановитьПараметр("Маршрут", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = РасписаниеРейсов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		ПрочиеНастройки = ХранилищеНастроекДанныхФорм.Загрузить(
			"Справочник.уатМаршруты.Форма.ОсновнаяФорма",
			"уатМаршруты_Настройки"
		);
		Если ТипЗнч(ПрочиеНастройки) = Тип("Структура") 
			И ПрочиеНастройки.Свойство("РасписаниеРейсовТолькоДействующие") Тогда
			РасписаниеРейсовТолькоДействующие = ПрочиеНастройки.РасписаниеРейсовТолькоДействующие;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочиеНастройки = Новый Структура("РасписаниеРейсовТолькоДействующие", РасписаниеРейсовТолькоДействующие);
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Справочник.уатМаршруты.Форма.ОсновнаяФорма", 
		"уатМаршруты_Настройки", 
		ПрочиеНастройки
	);
	
КонецПроцедуры

#Область ОптимальноеПерестроениеМаршрута

&НаСервере
Функция ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(НастройкиМаршрутизации, ТекстОшибки)
	
	Грузоподъемность = 0;
	ОбъемКузова = 0;
	ТипТС = Неопределено;
	РежимОптимизацииМаршрута = Истина;
	ВозвратВГараж = Ложь;
	МассивПунктовРазгрузки = Новый Массив;
	ПунктОтправления = Неопределено;
	ТекстОшибки      = "";
	
	ДатаПланирования = НачалоДня(ТекущаяДатаСеанса());
	Сч = 0;
	Для Каждого ТекСтрока Из Объект.Этапы Цикл
		Если Сч = 0 Тогда
			ПунктОтправления = ТекСтрока.ПунктОтправления;
		Иначе 
			МассивПунктовРазгрузки.Добавить(Новый Структура("Ссылка, GUID", ТекСтрока.ПунктОтправления, ТекСтрока.ПунктОтправления.Наименование));
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	ДанныеПоЗаказам = Новый Структура(
		"МассивПромежуточныхТочек, СтрокиЗаказаВДокументе, Гараж, УчитыватьГаражВозвращения, ГаражВозвращения, ДатаВыезда, КоличествоЗаказов",
		МассивПунктовРазгрузки,
		Новый Соответствие(),
		ПунктОтправления,
		Ложь,
		Неопределено,
		НачалоДня(ТекущаяДатаСеанса()),
		0
	);
	ХарактеристикиСцепки = Новый Структура("ТС,Грузоподъемность,ОбъемКузова", Неопределено, Грузоподъемность, ОбъемКузова);
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуSVRP(
		НачалоДня(ТекущаяДатаСеанса()),
		ХарактеристикиСцепки, 
		ДанныеПоЗаказам,
		НастройкиМаршрутизации,
		ТекстОшибки,
		Истина
	);
	
КонецФункции

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизации()
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатSVRP(
		АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		
		Если ТекстОшибки = "" Тогда  
			
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыДлительнойОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ОтменитьВыполнение")
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		
		Попытка
			ОтключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания");
		Исключение
		КонецПопытки;
		
		ОповещениеПослеДлительнойОперации = Неопределено;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОптимальноеПерестроениеМаршрутаПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	ТекстПредупреждения = "";
	ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения);
	ОбновитьРасстояние();
	Модифицированность = Истина;
	ТекстПредупреждения = Новый ФорматированнаяСтрока(ТекстПредупреждения 
	+ Символы.ПС,
	?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор),НСтр("ru = 'ID задачи: '; en = 'Task ID: '") + IDЗадачиВнешнийМаршрутизатор, ""),
	Символы.ПС,
	?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) И НЕ флRarusVRP,
	Новый ФорматированнаяСтрока(НСтр("ru='Открыть в браузере'"),,,, "https://courier.yandex.ru/mvrp-map#" + IDзадачиВнешнийМаршрутизатор), ""));
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения)
	
	РаспредЗаказов = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	
	Если РаспредЗаказов = Неопределено Или Не ТипЗнч(РаспредЗаказов) = Тип("Структура") Или Не РаспредЗаказов.Свойство("пул") Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаЭтапыНовая = Объект.Этапы.Выгрузить(Новый Массив);
	
	СтрокаНовогоМаршрута = ТаблицаЭтапыНовая.Добавить();
	СтрокаНовогоМаршрута.ТипТочиМаршрута  = Перечисления.уатТипыТочекМаршрута.Погрузка;
	СтрокаНовогоМаршрута.ВремяВПути       = РаспредЗаказов.пул.ВремяВПутиОтГаража;
	СтрокаНовогоМаршрута.Расстояние       = РаспредЗаказов.пул.РасстояниеОтГаража;
	СтрокаНовогоМаршрута.УИД              = Объект.Этапы[0].УИД;
	СтрокаНовогоМаршрута.ПунктОтправления = Объект.Этапы[0].ПунктОтправления;
	
	Для Каждого ТекСтрока Из РаспредЗаказов.пул.Маршрут Цикл
		СтрокаНовогоМаршрута = ТаблицаЭтапыНовая.Добавить();
		СтрокаНовогоМаршрута.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;;
		СтрокаНовогоМаршрута.ВремяВПути = ТекСтрока.ВремяВПути;
		СтрокаНовогоМаршрута.Расстояние = ТекСтрока.Расстояние;
		
		Для Каждого ТекЭтапСтарый Из Объект.Этапы Цикл
			Если ТипЗнч(ТекСтрока.Заказ) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ТекЭтапСтарый.ПунктОтправления = ТекСтрока.Заказ Тогда
				СтрокаНовогоМаршрута.ПунктОтправления = ТекЭтапСтарый.ПунктОтправления;
				СтрокаНовогоМаршрута.УИД              = ТекЭтапСтарый.УИД;
				Прервать;
			ИначеЕсли Строка(ТекЭтапСтарый.ПунктОтправления) = ТекСтрока.Заказ Тогда
				// Поиск пункта по строковому представлению
				СтрокаНовогоМаршрута.ПунктОтправления = ТекЭтапСтарый.ПунктОтправления;
				СтрокаНовогоМаршрута.УИД              = ТекЭтапСтарый.УИД;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(СтрокаНовогоМаршрута.ПунктОтправления) Тогда
			ТекстПредупреждения = НСтр("ru = 'Ошибка при оптимизации маршрута. 
			|В маршруте не найден переданный из маршрутизатора пункт %1'");
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ТекСтрока.Заказ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Этапы.Загрузить(ТаблицаЭтапыНовая);
	ТекстПредупреждения = НСтр("ru = 'Оптимизация маршрута выполнена успешно'");
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеМаршрутаОбновитьПункты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ОбновитьПункты" Тогда 
		уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ДополнительныеПараметры.АдресаПунктов);
		ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		
	ИначеЕсли РезультатВопроса = "ПродолжитьБезОбновления" Тогда 
		ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеМаршрутаПослеОбновленияПунктов(Результат, ДопПараметры)
	
	УстановитьАдресХранилищаДляРезультатаМаршрутизации();
	уатЗащищенныеФункцииСервер_уэ.ОптимальноеПерестроениеМаршрута(
		АдресХранилищаДО, ДопПараметры.АдресаПунктов, Объект.Этапы[0].ПунктОтправления);
	ОптимальноеПерестроениеМаршрутаПослеМаршрутизации(Неопределено, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

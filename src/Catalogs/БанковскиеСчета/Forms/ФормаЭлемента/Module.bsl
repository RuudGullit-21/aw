
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		ТекстНСТР = НСтр("en='Not specified the owner of the bank account!';ru='Не указан владелец банковского счёта!'") + Символы.ПС + 
					НСтр("en='Bank account should be created from catalog ""Counterparts"" or ""Company"".';ru='Банковский счет следует создавать из справочника ""Контрагенты"" или ""Организации"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Владелец.Заголовок = НСтр("en='Counterpartу';ru='Контрагент'");
		Элементы.ГруппаДатаОткрытияЗакрытия.Видимость = Ложь;
		
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.Владелец.Заголовок = НСтр("en='Company';ru='Организация'");
		Элементы.ГруппаДатаОткрытияЗакрытия.Видимость = Истина;
		
	Иначе
		ТекстНСТР = НСтр("en='Depositor specified incorrectly!';ru='Неверно указан владелец банковского счета!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		Возврат;
	
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ПолучитьВалютуРегламентированногоУчета();
		
	ЗаполнитьРеквизитыБанка(ЭтотОбъект);
	ЗаполнитьРеквизитыБанкаДляРасчетов(ЭтотОбъект);
	
	ИспользуетсяБанкДляРасчетов	= ЗначениеЗаполнено(Объект.БанкДляРасчетов);
	
	БанкНеВыбран            = НСтр("en='<will be filled automatically after entering RCBIK>';ru='<заполняется автоматически после ввода БИК>'");
	БанкДляРасчетовНеВыбран = НСтр("en='<will be filled automatically after entering RCBIK>';ru='<заполняется автоматически после ввода БИК>'");
	
	ПодсказкаПодразделение  = НСтр("en='Department, which is inserted by default in Receipt and';ru='Подразделение, которое подставляется по умолчанию в Поступление и'") + Символы.ПС + 
								НСтр("en='Charge-off this Bank account';ru='Списание с этого банковского счета'");
	
	Если Параметры.Ключ.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
			Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		АвтоНаименование    = СформироватьАвтоНаименование();
		Объект.Наименование = АвтоНаименование;
		
	Иначе
		АвтоНаименование    = СформироватьАвтоНаименование();
	КонецЕсли;
	
	ИностранныйБанк       = ?(Объект.ИностранныйБанк, 1, 0);
	СВИФТБанка            = Объект.Банк.СВИФТБИК;
	СВИФТБанкаДляРасчетов = Объект.БанкДляРасчетов.СВИФТБИК;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТекстОшибки = "";
	Если НЕ Объект.ИностранныйБанк И НЕ ПроверитьКорректностьНомераСчета(Объект.НомерСчета, Объект.Валютный, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НомерСчета", "Объект", Отказ);
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ Объект.ИностранныйБанк И НЕ ПроверитьКорректностьБИК(БИКБанка, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанка",, Отказ);
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
	//	ТекстНСТР = НСтр("en='Bank with RCBIC ""%1"" was not found in banks catalog';ru='Банк с БИК ""%1"" не найден в справочнике банков'");
	//	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНСТР, БИКБанка);
	//	ТекстОшибки = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Корректность", "БИК",,, ТекстОшибки);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанка",, Отказ);
	//КонецЕсли;	
	
	Если ИспользуетсяБанкДляРасчетов = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БИКБанкаДляРасчетов");
	Иначе
		ТекстОшибки = "";
		Если НЕ Объект.Валютный И НЕ ПроверитьКорректностьБИК(БИКБанкаДляРасчетов, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанкаДляРасчетов",, Отказ);
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
		//	ТекстНСТР = НСтр("en='Bank with RCBIC ""%1"" was not found in banks catalog';ru='Банк с БИК ""%1"" не найден в справочнике банков'");
		//	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНСТР, БИКБанкаДляРасчетов);
		//	ТекстОшибки =  ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
		//		"Поле", "Корректность", "БИК банка для расчетов",,, ТекстОшибки);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанкаДляРасчетов",, Отказ);
		//КонецЕсли;	
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ИспользуетсяБанкДляРасчетов Тогда
		ТекущийОбъект.БанкДляРасчетов	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьРеквизитыБанка(ЭтотОбъект);
	ЗаполнитьРеквизитыБанкаДляРасчетов(ЭтотОбъект);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура("Ссылка, Владелец", Объект.Ссылка, Объект.Владелец);
	
	Оповестить("ИзмененБанковскийСчет", ПараметрОповещения);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанЭлементБанк" Тогда
		
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Банки")
			И ЗначениеЗаполнено(Параметр)
			И Объект.Банк <> Параметр Тогда
			
			Объект.Банк = Параметр;
			
		КонецЕсли;
		
		ЗаполнитьРеквизитыБанка(ЭтотОбъект);
		ЗаполнитьРеквизитыБанкаДляРасчетов(ЭтотОбъект);
		УстановитьНаименованиеСчета();
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Объект.НомерСчета = СокрЛП(Объект.НомерСчета);
	
	УстановитьНаименованиеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Объект.Валютный	= (Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета);
	
	УстановитьНаименованиеСчета();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйБанкПриИзменении(Элемент)
	Объект.ИностранныйБанк = (ИностранныйБанк = 1);
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	СформироватьАвтоНаименование();
	Если ПустаяСтрока(БИКБанка) Тогда
		Объект.Банк = Неопределено;
		РеквизитыБанка = Неопределено;
	КонецЕсли;
	СВИФТБанка = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Банк, "СВИФТБИК");
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораБанка(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СписокБанков = НайтиБанкВКлассификаторе(СокрЛП(Текст), Элемент.Имя, Объект.Валютный);
		Если Не СписокБанков = Неопределено Тогда 
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СписокБанков;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.Банк = ВыбранноеЗначение;
	
	РеквизитыБанка    = ПолучитьРеквизитыБанка(Объект.Банк);
	СВИФТБанка        = РеквизитыБанка.СВИФТБИК;
	БИКБанка          = РеквизитыБанка.Код;
	//ВыбранноеЗначение = СокрЛП(РеквизитыБанка.Код);
	
	УстановитьНаименованиеСчета();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Банк    = Неопределено;
	РеквизитыБанка = Неопределено;
	
	УстановитьНаименованиеСчета();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		ПоказатьЗначение(Неопределено, Объект.Банк);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораБанка(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		ПоказатьЗначение(Неопределено, Объект.Банк);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.Банк = ВыбранноеЗначение;
	
	РеквизитыБанка    = ПолучитьРеквизитыБанка(Объект.Банк);
	//ВыбранноеЗначение = СокрЛП(РеквизитыБанка.Код);
	СВИФТБанка        = РеквизитыБанка.СВИФТБИК;
	БИКБанка          = РеквизитыБанка.Код;
	
	УстановитьНаименованиеСчета();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаОчистка(Элемент, СтандартнаяОбработка)
	Объект.Банк    = Неопределено;
	РеквизитыБанка = Неопределено;
	
	УстановитьНаименованиеСчета();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	Если НЕ ИспользуетсяБанкДляРасчетов Тогда
		Объект.БанкДляРасчетов = Неопределено;
		БИКБанкаДляРасчетов = "";
		СВИФТБанкаДляРасчетов = "";
	КонецЕсли;
		
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	Если ПустаяСтрока(БИКБанкаДляРасчетов) Тогда
		Объект.БанкДляРасчетов = Неопределено;
		РеквизитыБанкаДляРасчетов = Неопределено;
	КонецЕсли;
	СВИФТБанкаДляРасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.БанкДляРасчетов, "СВИФТБИК");
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораБанкаДляРасчетов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не Ожидание = 0 Тогда 
		СписокБанков = НайтиБанкВКлассификаторе(СокрЛП(Текст), Элемент.Имя, Объект.Валютный);
		Если Не СписокБанков = Неопределено Тогда 
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СписокБанков;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.БанкДляРасчетов    = ВыбранноеЗначение;
	
	РеквизитыБанкаДляРасчетов = ПолучитьРеквизитыБанка(Объект.БанкДляРасчетов);
	СВИФТБанкаДляРасчетов     = РеквизитыБанкаДляРасчетов.СВИФТБИК;
	БИКБанкаДляРасчетов       = РеквизитыБанкаДляРасчетов.Код;
	//ВыбранноеЗначение         = СокрЛП(РеквизитыБанкаДляРасчетов.Код);
	//КоррсчетБанкаДляРасчетов  = СокрЛП(РеквизитыБанкаДляРасчетов.КоррСчет);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.БанкДляРасчетов    = Неопределено;
	
	РеквизитыБанкаДляРасчетов = Неопределено;
	КоррсчетБанкаДляРасчетов  = "";
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.БанкДляРасчетов) Тогда
		ПоказатьЗначение(Неопределено, Объект.БанкДляРасчетов);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораБанкаДляРасчетов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.БанкДляРасчетов    = ВыбранноеЗначение;
	
	РеквизитыБанкаДляРасчетов = ПолучитьРеквизитыБанка(Объект.БанкДляРасчетов);
	СВИФТБанкаДляРасчетов     = РеквизитыБанкаДляРасчетов.СВИФТБИК;
	БИКБанкаДляРасчетов       = РеквизитыБанкаДляРасчетов.Код;
	//ВыбранноеЗначение         = СокрЛП(РеквизитыБанкаДляРасчетов.Код);
	//КоррсчетБанкаДляРасчетов  = СокрЛП(РеквизитыБанкаДляРасчетов.КоррСчет);
		
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаДляРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.БанкДляРасчетов) Тогда
		ПоказатьЗначение(Неопределено, Объект.БанкДляРасчетов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СВИФТБанкаДляРасчетовОчистка(Элемент, СтандартнаяОбработка)
	Объект.БанкДляРасчетов    = Неопределено;
	РеквизитыБанкаДляРасчетов = Неопределено;
	
	КоррсчетБанкаДляРасчетов  = "";
	
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Функция ПолучитьВалютуРегламентированногоУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Если Объект.Валютный Тогда
		Элементы.НомерСчета.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерСчета.ОтметкаНезаполненного     = Ложь;
	Иначе
		Элементы.НомерСчета.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Элементы.ГруппаБанкДляРасчетов.Доступность = ИспользуетсяБанкДляРасчетов;
	Элементы.НомерИДатаРазрешения.Доступность = Объект.Валютный;
	Элементы.СчетВБанкеДляРасчетов.Доступность = ИспользуетсяБанкДляРасчетов;

	Если Не Объект.ИностранныйБанк Тогда
		Элементы.НомерСчета.Маска = "!!!!!!!!!!!!!!!!!!!!";
		
		Элементы.БИКБанка.Заголовок = НСтр("en='BIC';ru='БИК'");
		Элементы.БИКБанка.КнопкаОткрытия = Истина;
		Элементы.БИКБанка.КнопкаВыбора = Истина;
		Элементы.БИКБанка.ТолькоПросмотр = Ложь;
		
		Элементы.СВИФТБанка.КнопкаОткрытия = Ложь;
		Элементы.СВИФТБанка.КнопкаВыбора = Ложь;
		Элементы.СВИФТБанка.КнопкаОчистки = Ложь;
		Элементы.СВИФТБанка.ТолькоПросмотр = Истина;
		
		Элементы.КоррСчетБанка.Видимость = Не Объект.Валютный;
		Элементы.КоррСчетБанкаДляРасчетов.Видимость = Не Объект.Валютный;
		
		Элементы.СчетВБанкеДляРасчетов.Видимость = Объект.Валютный;
		
		Элементы.АдресБанка.Видимость = Объект.Валютный;
		Элементы.ГородБанка.Видимость = Не Объект.Валютный;
		
		Элементы.АдресБанкаДляРасчетов.Видимость = Объект.Валютный;
		Элементы.ГородБанкаДляРасчетов.Видимость = Не Объект.Валютный;
		
		Элементы.Переместить(Элементы.БИКБанка, Элементы.БИКБанка.Родитель, Элементы.СВИФТБанка);
		
		Если Объект.Валютный Тогда
			Элементы.БИКБанкаДляРасчетов.Заголовок = НСтр("en='National bank code';ru='Национальный код банка'");
			Элементы.Переместить(Элементы.СВИФТБанкаДляРасчетов, Элементы.СВИФТБанкаДляРасчетов.Родитель, Элементы.БИКБанкаДляРасчетов);
		Иначе
			Элементы.БИКБанкаДляРасчетов.Заголовок = НСтр("en='BIC';ru='БИК'");
			Элементы.Переместить(Элементы.БИКБанкаДляРасчетов, Элементы.БИКБанкаДляРасчетов.Родитель, Элементы.СВИФТБанкаДляРасчетов);
		КонецЕсли;
	Иначе
		Элементы.НомерСчета.Маска = "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
		
		Элементы.БИКБанка.Заголовок = НСтр("en='National bank code';ru='Национальный код банка'");
		Элементы.БИКБанка.КнопкаОткрытия = Ложь;
		Элементы.БИКБанка.КнопкаВыбора = Ложь;
		Элементы.БИКБанка.ТолькоПросмотр = Истина;
		
		Элементы.СВИФТБанка.КнопкаОткрытия = Истина;
		Элементы.СВИФТБанка.КнопкаВыбора = Истина;
		Элементы.СВИФТБанка.КнопкаОчистки = Истина;
		Элементы.СВИФТБанка.ТолькоПросмотр = Ложь;
		
		Элементы.КоррСчетБанка.Видимость = Ложь;
		Элементы.КоррСчетБанкаДляРасчетов.Видимость = Ложь;
		
		Элементы.СчетВБанкеДляРасчетов.Видимость = Истина;
		
		Элементы.АдресБанка.Видимость = Истина;
		Элементы.ГородБанка.Видимость = Ложь;
		
		Элементы.АдресБанкаДляРасчетов.Видимость = Истина;
		Элементы.ГородБанкаДляРасчетов.Видимость = Ложь;
		
		Элементы.Переместить(Элементы.СВИФТБанка, Элементы.СВИФТБанка.Родитель, Элементы.БИКБанка);
		
		Если Объект.Валютный Тогда
			Элементы.БИКБанкаДляРасчетов.Заголовок = НСтр("en='National bank code';ru='Национальный код банка'");
			Элементы.Переместить(Элементы.СВИФТБанкаДляРасчетов, Элементы.СВИФТБанкаДляРасчетов.Родитель, Элементы.БИКБанкаДляРасчетов);
		Иначе
			Элементы.БИКБанкаДляРасчетов.Заголовок = НСтр("en='BIC';ru='БИК'");
			Элементы.Переместить(Элементы.БИКБанкаДляРасчетов, Элементы.БИКБанкаДляРасчетов.Родитель, Элементы.СВИФТБанкаДляРасчетов);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.БИКБанкаДляРасчетов.КнопкаОткрытия = Не Объект.Валютный;
	Элементы.БИКБанкаДляРасчетов.КнопкаВыбора = Не Объект.Валютный;
	Элементы.БИКБанкаДляРасчетов.ТолькоПросмотр = Объект.Валютный;
		
	Элементы.СВИФТБанкаДляРасчетов.КнопкаОткрытия = Объект.Валютный;
	Элементы.СВИФТБанкаДляРасчетов.КнопкаВыбора = Объект.Валютный;
	Элементы.СВИФТБанкаДляРасчетов.КнопкаОчистки = Объект.Валютный;
	Элементы.СВИФТБанкаДляРасчетов.ТолькоПросмотр = НЕ Объект.Валютный;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыБанка(Знач Банк)
	
	СтрокаРеквизитов    = Новый Структура("Код, КоррСчет, Наименование, Город, СВИФТБИК");
	СтруктураРеквизитов = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Банк,
		СтрокаРеквизитов);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыБанка(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.Банк) Тогда
		Форма.РеквизитыБанка	= ПолучитьРеквизитыБанка(Форма.Объект.Банк);
		Форма.БИКБанка			= Форма.РеквизитыБанка.Код;
	Иначе
		Форма.РеквизитыБанка	= Неопределено;
		Форма.БИКБанка			= "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыБанкаДляРасчетов(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.БанкДляРасчетов) Тогда
		Форма.РеквизитыБанкаДляРасчетов = ПолучитьРеквизитыБанка(Форма.Объект.БанкДляРасчетов);
		Форма.БИКБанкаДляРасчетов		= Форма.РеквизитыБанкаДляРасчетов.Код;
		Форма.КоррсчетБанкаДляРасчетов	= Форма.РеквизитыБанкаДляРасчетов.КоррСчет;
	Иначе
		Форма.РеквизитыБанкаДляРасчетов = Неопределено;
		Форма.БИКБанкаДляРасчетов		= "";
		Форма.КоррсчетБанкаДляРасчетов	= "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованиеСчета()
	
	Если ПустаяСтрока(Объект.Наименование) ИЛИ Объект.Наименование = АвтоНаименование Тогда
		АвтоНаименование	= СформироватьАвтоНаименование();
		Объект.Наименование	= АвтоНаименование;
	Иначе
		АвтоНаименование	= СформироватьАвтоНаименование();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьАвтоНаименование()

	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = Прав(СокрЛП(Объект.НомерСчета), 4) 
	+ ?(ЗначениеЗаполнено(Объект.Банк), " в " + Строка(Объект.Банк), "")
	+ " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 150);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "")
	+ " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 150);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокБанковПоРеквизитам(ОбластьПоиска, ТекстДляПоиска)
	
	Возврат Справочники.БанковскиеСчета.ПолучитьСписокБанковПоРеквизитам(ОбластьПоиска, ТекстДляПоиска);
	
КонецФункции

&НаКлиенте
Функция НайтиБанкВКлассификаторе(ТекстДляПоиска, Поле, Валютный = Ложь)
	Перем ТекстОшибки;
	
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		ТекстСообщения = "";
		Если Поле = "БИКБанкаДляРасчетов" Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
				ТекстСообщения =  ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Поле", "Заполнение", "БИК банка для расчетов");
			КонецЕсли;
		Иначе
			Если НЕ ИспользуетсяБанкДляРасчетов Тогда
				ТекстСообщения =  ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Поле", "Заполнение", "БИК");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Найти(Поле, "БИК") = 1 Тогда
		ОбластьПоиска = "Код";
	ИначеЕсли Найти(Поле, "Коррсчет") = 1 Тогда
		ОбластьПоиска = "КоррСчет";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьСписокБанковПоРеквизитам(ОбластьПоиска, ТекстДляПоиска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьНомераСчета(Номер, ВалютныйСчет = Ложь, ТекстОшибки = "")

	Результат	= Истина;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки	= "";
	Если НЕ ВалютныйСчет И СтрДлина(Номер) <> 20 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("en='Account number should consist of 20 digits';ru='Номер счета должен состоять из 20 цифр'");
		Результат	= Ложь;
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("en='In account number are not just numbers. Perhaps the number is incorrect';ru='В номере счета есть не только цифры. Возможно, номер указан неверно'");
		Результат	= Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьБИК(БИК, ТекстОшибки = "")

	Результат	= Истина;
	
	Если ПустаяСтрока(БИК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки	= "";
	Если СтрДлина(БИК) <> 9 Тогда
		ТекстОшибки	= ТекстОшибки +
			НСтр("en='RCBIC of the Bank shall consist of 9 digits';ru='БИК банка должен состоять из 9 цифр'");
		Результат	= Ложь;
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК) Тогда
		ТекстОшибки	= ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("en=""Bank's RCBIC must consists only numbers"";ru='В составе БИК банка должны быть только цифры'");
		Результат	= Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораБанка(ЭлементВладелец)
	
	ПараметрыФормы	= Новый Структура(
		"ТекущаяСтрока, ПараметрВыборГруппИЭлементов",
		Объект.Банк, ИспользованиеГруппИЭлементов.Элементы);
		
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, ЭлементВладелец);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораБанкаДляРасчетов(ЭлементВладелец)
	
	ПараметрыФормы	= Новый Структура(
		"ТекущаяСтрока, ПараметрВыборГруппИЭлементов",
		Объект.БанкДляРасчетов, ИспользованиеГруппИЭлементов.Элементы);
		
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, ЭлементВладелец);
	
КонецПроцедуры

#КонецОбласти

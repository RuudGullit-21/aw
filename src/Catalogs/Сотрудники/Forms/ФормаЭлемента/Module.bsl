#Область ОбработчикиСобытий

&НаКлиенте
Перем ОткрытыеФормы Экспорт; // Открытые формы

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ОписаниеСотрудника = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "Сотрудник";

	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
			Объект.Код = ПолучитьОчереднойТабельныйНомер(Объект.Ссылка);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПриема) Тогда
			Объект.ДатаПриема = ТекущаяДата();
		КонецЕсли;
		
		Модифицированность = Ложь;
	КонецЕсли;
	
	мДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей);
		
	мДниДоОкончанияДействияТопливныхКарт = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт);
		
	Парам = ДокументыВодителей.Параметры.Элементы.Найти("ДниДоОкончанияДействияДокументовВодителей");
	Парам.Значение = мДниДоОкончанияДействияДокументовВодителей;
	Парам.Использование = Истина;
	Парам = ДокументыВодителей.Параметры.Элементы.Найти("ТекущаяДата");
	Парам.Значение = НачалоДня(ТекущаяДата());
	Парам.Использование = Истина;
	
	Парам = ПластиковыеКарты.Параметры.Элементы.Найти("ДниДоОкончанияДействияТопливныхКарт");
	Парам.Значение = мДниДоОкончанияДействияТопливныхКарт;
	Парам.Использование = Истина;
	Парам = ПластиковыеКарты.Параметры.Элементы.Найти("ТекущаяДата");
	Парам.Значение = НачалоДня(ТекущаяДата());
	Парам.Использование = Истина;
	
	// В случае поставки КОРП или ПРОФ свойства динамического списка тарифов ЗП сотрудников переопределяются,
	// делается запрос к другому регистру сведений, изначально список настроен для корректной работы в УАТ СТД
	ВариантПоставкиПРОФКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Или уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	Если ВариантПоставкиПРОФКОРП Тогда	
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица = "РегистрСведений.уатТарифыСотрудников.СрезПоследних";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса = ТекстЗаросаТарифовЗПСотрудниковПРОФКОРП();
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ТарифыСотрудников,
		СвойстваСписка);	
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	// Список тарифов ЗП сотрудника не предназначен для просмотра пользователями без соответствующих прав
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.уатТарифыЗП) Тогда
		Элементы.ГруппаТарифыЗП.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НастроитьОтборы();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НастроитьОтборы();
	Оповестить("ЗаписанСотрудник", Объект.Ссылка);
	ЗаписатьРеквизитыРегДокументов();
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусРегДокументов = ?(ЗначениеЗаполнено(Объект.ДатаУвольнения), Перечисления.уатСтатусыДействия.Действует,
		Перечисления.уатСтатусыДействия.НеДействует);
	ПроверитьИзменитьСтатусЗакрепленныхЗаСотрудникомДокументов(СтатусРегДокументов);
	
	// автосоздание первой записи регистра
	Если ЗначениеЗаполнено(ТекущийОбъект.Организация) Тогда
		СрезДанных = РегистрыСведений.уатКадроваяИсторияСотрудников.СрезПоследних(, Новый Структура("Сотрудник", ТекущийОбъект.Ссылка));
		Если СрезДанных.Количество() = 0 Тогда
			МенЗаписи = РегистрыСведений.уатКадроваяИсторияСотрудников.СоздатьМенеджерЗаписи();
			МенЗаписи.Период        = ?(ТекущийОбъект.ДатаПриема = '00010101', ТекущаяДата(), ТекущийОбъект.ДатаПриема);
			МенЗаписи.Сотрудник     = ТекущийОбъект.Ссылка;
			МенЗаписи.Организация   = ТекущийОбъект.Организация;
			МенЗаписи.Подразделение = ТекущийОбъект.Подразделение;
			МенЗаписи.Должность     = ТекущийОбъект.Должность;
			МенЗаписи.ГрафикРаботы  = ТекущийОбъект.ГрафикРаботы;
			МенЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если уатОбщегоНазначения.ОбластьПерсональныхДанныхВключена("ЛичныеДанные") Тогда
		// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
		ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
		// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеМестаРаботыСотрудника"
		И (Параметр = Объект.Ссылка ИЛИ ТипЗнч(Параметр) = Тип("Массив") И Параметр.Найти(Объект.Ссылка) <> Неопределено) Тогда
		Прочитать();
		УстановитьВидимость(); 
	ИначеЕсли ИмяСобытия = "РегистрационныеДокументы_Запись" Тогда
		Элементы.ДокументыВодителей.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы
		И ЗначениеЗаполнено(СообщениеПользователю) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СообщениеПользователю;
		
		Попытка
			Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
				ИдентификаторНазначения = ВладелецФормы.УникальныйИдентификатор;
			Иначе
				ИдентификаторНазначения = ВладелецФормы.Родитель.УникальныйИдентификатор;
			Конецесли;
			Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
			Сообщение.Сообщить();
		Исключение
		КонецПопытки;
		СообщениеПользователю = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ФизическоеЛицо, "Наименование");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	#Если ВебКлиент Тогда
		Если ТекущаяСтраница = Элементы.ГруппаВодитДокументы Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДокументыВодителей, "ВладелецДокументов", Объект.Ссылка, Истина);
		ИначеЕсли ТекущаяСтраница = Элементы.ГруппаТарифыЗП Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ТарифыСотрудников, "Сотрудник", Объект.Ссылка, Истина);
		ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЭкипажТС Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ЭкипажТС, "Сотрудник", Объект.Ссылка, Истина);
		ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПластиковыеКарты Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПластиковыеКарты, "КомуВыдана", Объект.Ссылка, Истина);
		ИначеЕсли ТекущаяСтраница = Элементы.ГруппаКадроваяИстория Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(КадроваяИстория, "Сотрудник", Объект.Ссылка, Истина);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
		Объект.Код = ПолучитьОчереднойТабельныйНомер(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДокументыВодителейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПередНачаломДобавленияСвязанныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("ВладелецДокументов, ПринадлежностьДокументов", Объект.Ссылка,
				ПредопределенноеЗначение("Перечисление.уатПринадлежностьДокументов.ДокументыВодителя"));
			ОткрытьФорму("Справочник.уатРегистрационныеДокументы.ФормаОбъекта", ПараметрыОткрытия,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТарифыСотрудниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПередНачаломДобавленияСвязанныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("Сотрудник", Объект.Ссылка);
			ОткрытьФорму("РегистрСведений.уатТарифыСотрудников.ФормаЗаписи", ПараметрыОткрытия,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЭкипажТСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПередНачаломДобавленияСвязанныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("Сотрудник", Объект.Ссылка);
			ОткрытьФорму("РегистрСведений.уатЭкипажТС.ФормаЗаписи", ПараметрыОткрытия,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПластиковыеКартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПередНачаломДобавленияСвязанныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("КомуВыдана", Объект.Ссылка);
			ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаОбъекта", ПараметрыОткрытия,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура КадроваяИсторияПослеУдаления(Элемент)
	уатОбщегоНазначенияСервер.ОбновитьТекущееМестоРаботыВСправочникеСотрудники(Объект.Ссылка);
	Оповестить("ИзменениеМестаРаботыСотрудника", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьДокументыСотрудникаПоФизЛицу(Команда)
	ПараметрыФормы = Новый Структура("Сотрудник", Объект.Ссылка);
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЗаполненияДокументовСотрудникаПоФизЛицу", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГрафика(Команда)
	флОтказ = Ложь;
	ПередНачаломДобавленияСвязанныхДанных(флОтказ);
	Если флОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Сотрудник", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.уатФормаГрафикРаботы", ПараметрыФормы, , Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПереводСотрудника(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ПереводСотрудникаПродолжение", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. Continue?';ru='Для выполнения данной операции необходимо записать элемент. Продолжить?'");
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПереводСотрудникаЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереводСотрудникаПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
		Возврат;
	КонецЕсли;
	
	ПереводСотрудникаЗавершение();
		
КонецПроцедуры

&НаКлиенте
Процедура ПереводСотрудникаЗавершение()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник", Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("РегистрСведений.уатКадроваяИсторияСотрудников.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПереводов(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКадроваяИстория;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НастроитьОтборы()
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДокументыВодителей, "ВладелецДокументов", Объект.Ссылка, Истина);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПластиковыеКарты, "КомуВыдана", Объект.Ссылка, Истина);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ТарифыСотрудников, "Сотрудник", Объект.Ссылка, Истина);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ЭкипажТС, "Сотрудник", Объект.Ссылка, Истина);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(КадроваяИстория, "Сотрудник", Объект.Ссылка, Истина);
КонецПроцедуры

// Функция формирует очередной табельный номер сотрудника
// уникальность в пределах организации и вида договора
// Возвращаемое значение:
//   Строка   – табельный номер
//
&НаСервереБезКонтекста
Функция ПолучитьОчереднойТабельныйНомер(Ссылка)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СотрудникиОрганизаций.Код) КАК Код
	|ИЗ
	|	Справочник.Сотрудники КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка <> &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатаЗапроса = Запрос.Выполнить();
	
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат "0000000001";
	Иначе
		СтрокаРезультата = РезультатаЗапроса.Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Код) Тогда
			Возврат "0000000001";
		Иначе
			Возврат уатОбщегоНазначенияТиповые.уатПолучитьСледующийНомер(СокрП(СтрокаРезультата.Код));
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьОчереднойТабельныйНомер()

&НаСервере
Процедура ПроверитьИзменитьСтатусЗакрепленныхЗаСотрудникомДокументов(Статус)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатРегистрационныеДокументы.Ссылка КАК Ссылка,
	|	уатРегистрационныеДокументы.Наименование КАК Наименование,
	|	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	|ГДЕ
	|	НЕ уатРегистрационныеДокументы.ПометкаУдаления
	|	И уатРегистрационныеДокументы.ВладелецДокументов = &Сотрудник
	|	И уатРегистрационныеДокументы.Статус = &Статус");
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Запрос.УстановитьПараметр("Статус",    Статус);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СообщениеПользователю = "";
	Пока Выборка.Следующий() Цикл
		Если Статус = Перечисления.уатСтатусыДействия.НеДействует Тогда
			ТекстНСТР = НСтр("ru='У сотрудника имеются недействующие документы. Проверьте срок действия документов.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			
			СообщениеПользователю = ?(ЗначениеЗаполнено(СообщениеПользователю), СообщениеПользователю + Символы.ПС, "") + ТекстНСТР;
			Прервать;
		Иначе
			ДокОбъект        = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.уатСтатусыДействия.НеДействует;
			
			Попытка 
				ДокОбъект.Записать();
				ТекстНСТР = НСтр("ru='У сотрудника ""%1"" имеется действующий документ ""%2"", статус документа был изменен.'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.ВладелецДокументов, Выборка.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				
				СообщениеПользователю = ?(ЗначениеЗаполнено(СообщениеПользователю), СообщениеПользователю + Символы.ПС, "") + ТекстНСТР;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияСвязанныхДанных(Отказ)
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("en='To perform this operation, you must record the elements!';ru='Для выполнения данной операции необходимо записать элемент!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗаросаТарифовЗПСотрудниковПРОФКОРП()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.Период КАК Период,
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.Регистратор КАК Регистратор,
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.НомерСтроки КАК НомерСтроки,
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.Активность КАК Активность,
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП КАК ТарифЗП,
	|	РегистрСведенийуатТарифыСотрудниковСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок)
	|			ТОГДА 0
	|		КОГДА РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой)
	|			ТОГДА 1
	|		КОГДА РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки)
	|				ИЛИ РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений)
	|			ТОГДА 2
	|		КОГДА РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
	|				ИЛИ РегистрСведенийуатТарифыСотрудниковСрезПоследних.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные)
	|			ТОГДА 3
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ИконкаМетодРасчета
	|ИЗ
	|	РегистрСведений.уатТарифыСотрудников.СрезПоследних КАК РегистрСведенийуатТарифыСотрудниковСрезПоследних";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаписатьРеквизитыРегДокументов()
	мсвДокументов = уатОбщегоНазначения.ПолучитьРегистрационныеДокументы(Объект.Ссылка,
		Объект.Организация, Объект.Подразделение);
		
	Для Каждого ТекДокумент Из мсвДокументов Цикл
		ДокументОбъект = ТекДокумент.ПолучитьОбъект();
		ДокументОбъект.Организация   = Объект.Организация;
		ДокументОбъект.Подразделение = Объект.Подразделение;
		
		Попытка 
			ДокументОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	флНеПринят = СотрудникЕщёНеПринят(Объект.Ссылка);
	флУволен   = ЗначениеЗаполнено(Объект.ДатаУвольнения) И Объект.ДатаУвольнения <= НачалоДня(ТекущаяДата());
	
	Элементы.ГруппаСтатус.Видимость               = (НЕ Объект.Ссылка.Пустая() И флНеПринят) ИЛИ флУволен;
	Элементы.ПеремещениеСотрудника.Видимость      = НЕ флУволен;
	Элементы.ПеремещениеСотрудника.Заголовок      = ?(флНеПринят, "Прием на работу", "Перевод");
	Элементы.История.Видимость                    = НЕ флНеПринят;
	Элементы.ГиперссылкиКадроваяИстория.Видимость = НЕ Объект.Ссылка.Пустая();
		
	Статус = ?(флУволен, "Сотрудник уволен", "Сотрудник не принят");
	
	Элементы.ТекущееМестоРаботы.ТолькоПросмотр = (НЕ Объект.Ссылка.Пустая());
	Элементы.ДатаПриема.ТолькоПросмотр = (НЕ Объект.Ссылка.Пустая()) И НЕ СотрудникЕщёНеПринят(Объект.Ссылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникЕщёНеПринят(СотрудникСсылка)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(, Сотрудник = &Сотрудник) КАК уатКадроваяИсторияСотрудниковСрезПоследних");
	Запрос.УстановитьПараметр("Сотрудник", СотрудникСсылка);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.КомуВыдана)
		И Параметры.Свойство("КомуВыдана") Тогда
		Объект.КомуВыдана = Параметры.КомуВыдана;
	КонецЕсли;
	
	флЗаписьНового = Объект.Ссылка.Пустая();
	
	Если флЗаписьНового Тогда
		Элементы.ГруппаЗаполнитьАдресПоУмолчанию.Видимость	 = Ложь;
		Элементы.КомуВыдана.ТолькоПросмотр				 = Ложь;
		Элементы.ДатаВыдачи.ТолькоПросмотр				 = Ложь;
		Объект.ДатаВыдачи								 = ТекущаяДата();
		Элементы.ДатаВыдачи.Ширина = 8;
	Иначе
		СтруктураИстории	 = ОбновитьДанныеОВладельце(Объект.Ссылка);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураИстории);
	КонецЕсли;
	
	Элементы.ГруппаСтатус.Видимость = ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < ТекущаяДата()
		ИЛИ Объект.Статус.Действует = Ложь;
		
	Если ЗначениеЗаполнено(Объект.КемВыдана)
			И ТипЗнч(Объект.КемВыдана) = Тип("СправочникСсылка.уатАЗС") Тогда
		УчетнаяЗаписьПЦ = ЗначениеРеквизитаОбъекта(Объект.КемВыдана, "УчетнаяЗаписьПЦ");
		ВнешняяСистема  = ЗначениеРеквизитаОбъекта(УчетнаяЗаписьПЦ, "ВнешняяСистема");
	КонецЕсли;
	ПолучитьЗаголовокБлокировки();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ПолучитьСтатусКартыЗагрузкаИзAPI();
	УстановитьДоступностьПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УдалитьНезначащиеСимволы(Объект.Код);
	Если Объект.Основная 
		И ЗначениеЗаполнено(Объект.КомуВыдана) Тогда
		ДругаяКарта = ПолучитьДругуюОсновнуюКарту(Объект.Ссылка, Объект.КомуВыдана);
		Если ДругаяКарта <> Неопределено Тогда
			Отказ = Истина;
			ТекстНСТР = НСтр("en='In ""%1"" already have a primary fuel card ""%2"" issued by ""%3""!';ru='У ""%1"" уже имеется основная топливная карта ""%2"", выданная ""%3""!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.КомуВыдана, ДругаяКарта.Ссылка, ДругаяКарта.КемВыдана);
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если флЗаписьНового Тогда
		ЗаписатьИсториюИзмененияВладельцаКарты(ТекущийОбъект);
		флЗаписьНового = Ложь;
	КонецЕсли;
	
	Если флЗаписыватьЛимит Тогда
		ЗаписатьЛимит(ТекущийОбъект.Ссылка, ТекущийОбъект.КомуВыдана,
			ТекущаяДата(), ТекущийОбъект.Лимит);
		флЗаписыватьЛимит = Ложь;
	КонецЕсли;
	
	Если КомуВыданаДатаВыдачиИзменены() Тогда
		ЗаписатьИсториюИзмененияВладельцаКарты(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Элементы.ГруппаЗаполнитьАдресПоУмолчанию.Видимость = НЕ флЗаписьНового;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомуВыданаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	Список.Добавить(НСтр("en='Vehicle';ru='ТС'"));
	Список.Добавить(НСтр("en='Driver';ru='Водитель'"));
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("КомуВыданаНачалоВыбораЗавершение", ЭтотОбъект,
		Новый Структура("Элемент", Элемент)), Список, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КомуВыданаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Перем СтандартнаяОбработка;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = НСтр("en='Vehicle';ru='ТС'") Тогда
		уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(ДополнительныеПараметры.Элемент, Объект.КомуВыдана, Неопределено, СтандартнаяОбработка);
	Иначе
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(ДополнительныеПараметры.Элемент, Объект.КомуВыдана, Новый Структура, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуВыданаОткрытие(Элемент, СтандартнаяОбработка)
	Если ТипЗнч(Объект.КомуВыдана) = Тип("СправочникСсылка.Сотрудники") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.КомуВыдана, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомуВыданаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ТипЗнч(Объект.КомуВыдана) = Тип("СправочникСсылка.Сотрудники") Тогда
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомуВыданаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ТипЗнч(Объект.КомуВыдана) = Тип("СправочникСсылка.Сотрудники") Тогда
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КемВыданаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить(НСтр("en='Gas station';ru='АЗС'"));
	Список.Добавить(НСтр("en='Counterparties';ru='Контрагенты'"));
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("КемВыданаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), Список, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КемВыданаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.IDкарты							  = Неопределено;
	Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатАЗС") Тогда
		ЗагрузкаИзAPI = Ложь;
	Иначе
		УчетнаяЗаписьПЦ = ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "УчетнаяЗаписьПЦ");
		ВнешняяСистема  = ЗначениеРеквизитаОбъекта(УчетнаяЗаписьПЦ, "ВнешняяСистема");
		ЗагрузкаИзAPI = ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатАЗС")
		И ЗначениеЗаполнено(УчетнаяЗаписьПЦ)
		И (ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть")
		ИЛИ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД"));
	КонецЕсли;
		
	Элементы.ФормаПрименитьЛимит.Видимость				 = ЗагрузкаИзAPI;
	Элементы.ФормаЗаблокироватьРазблокировать.Видимость	 = ЗагрузкаИзAPI;
	Элементы.ГруппаIDкарты.Видимость					 = ЗагрузкаИзAPI;
	Элементы.ЗаполнитьВладельца.Видимость				 = ЗагрузкаИзAPI
	И ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД");
	
	Если ЗагрузкаИзAPI Тогда
		ПолучитьСтатусКарты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КемВыданаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = НСтр("en='Gas station';ru='АЗС'") Тогда
		ОткрытьФорму("Справочник.уатАЗС.Форма.ФормаВыбора",,ДополнительныеПараметры.Элемент);
	Иначе
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",,ДополнительныеПараметры.Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзменитьВладельцаНажатие(Элемент)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ЗначенияЗаписи = ПолучитьЗначенияЗаписиИстории(Объект.Ссылка);
	

	Если ЗначенияЗаписи.Период = '00010101' Тогда
		ПараметрыФормы	 = Новый Структура();
		СтруктураОтбора	 = Новый Структура();
		СтруктураОтбора.Вставить("Карта",				 Объект.Ссылка);
		СтруктураОтбора.Вставить("КомуВыдана",			 Объект.КомуВыдана);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",	 СтруктураОтбора);
	Иначе
		ПараметрыФормы	 = Новый Структура();
		СтруктураОтбора	 = Новый Структура();
		СтруктураОтбора.Вставить("Карта",				 Объект.Ссылка);
		СтруктураОтбора.Вставить("КомуВыдана",			 ЗначенияЗаписи.КомуВыдана);
		Если ЗначенияЗаписи.Период = НачалоДня(ТекущаяДата()) Тогда
			ПараметрыФормы.Вставить("Ключ",					 ПолучитьКлючЗаписиИсторияПеремещенияТопливныхКарт(Объект.Ссылка));
		КонецЕсли;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",	 СтруктураОтбора);
	КонецЕсли; 

	ОткрытьФорму("РегистрСведений.уатИсторияПеремещенияТопливныхКарт.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ДекорацияДекорацияИзменитьВладельцаНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Элементы.ГруппаСтатус.Видимость = ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < ТекущаяДата()
		ИЛИ ЗначениеРеквизитаОбъекта(Объект.Статус, "Действует") = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Элементы.ГруппаСтатус.Видимость = ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < ТекущаяДата()
		ИЛИ ЗначениеРеквизитаОбъекта(Объект.Статус, "Действует") = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЛимитПриИзменении(Элемент)
	флЗаписыватьЛимит = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыдачиПриИзменении(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ДатаВыдачиПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура ПрименитьЛимит(Команда)
	Если ТипЗнч(Объект.КемВыдана) <> Тип("СправочникСсылка.уатАЗС") 
		И ЗначениеЗаполнено(Объект.IDкарты) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	Выполнено   = уатЗагрузкаПЦ.Газпромнефть_ПрименитьЛимит(СтруктураПараметровУчетнойЗаписи, Объект.IDкарты, Объект.Лимит, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Выполнено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Лимит успешно установлен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьРазблокировать(Команда)
	
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		ЗаблокироватьРазблокироватьГазпромнефть();
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		ЗаблокироватьРазблокироватьЛукойл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусКарты(Команда)
	ПолучитьСтатусКарты(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторКарты(Команда)
	Если ТипЗнч(Объект.КемВыдана) <> Тип("СправочникСсылка.уатАЗС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		IDкарты = ПолучитьИдентификаторКартыГазпромнефть();
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		IDкарты = ПолучитьИдентификаторКартыЛукойл();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(IDкарты) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Карта не найдена.'"));
		Возврат
	Иначе
		Объект.IDкарты = IDкарты;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВладельца(Команда)
	Если ТипЗнч(Объект.КемВыдана) <> Тип("СправочникСсылка.уатАЗС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		ПолучитьВладельцаКартыЛукойл();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьСтатусКартыЗагрузкаИзAPI()

	ПолучитьСтатусКартыЗагрузкаИзAPIСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусКартыЗагрузкаИзAPIСервер()

	Если ЗначениеЗаполнено(Объект.КемВыдана) 
		И ТипЗнч(Объект.КемВыдана) = Тип("СправочникСсылка.уатАЗС") Тогда
		УчетнаяЗаписьПЦ = Объект.КемВыдана.УчетнаяЗаписьПЦ;
		ЗагрузкаИзAPI = ТипЗнч(Объект.КемВыдана) = Тип("СправочникСсылка.уатАЗС")
		И ЗначениеЗаполнено(УчетнаяЗаписьПЦ)
		И (УчетнаяЗаписьПЦ.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть
		ИЛИ УчетнаяЗаписьПЦ.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД);
	Иначе
		ЗагрузкаИзAPI = Ложь;
	КонецЕсли;
	Элементы.ФормаЗаблокироватьРазблокировать.Видимость	 = ЗагрузкаИзAPI;
	Элементы.ГруппаIDкарты.Видимость					 = ЗагрузкаИзAPI;
	Элементы.ЗаполнитьВладельца.Видимость				 = ЗагрузкаИзAPI
	И УчетнаяЗаписьПЦ.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД;
	Элементы.ФормаПрименитьЛимит.Видимость				 = ЗагрузкаИзAPI
	И УчетнаяЗаписьПЦ.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть;
	Элементы.ОбновитьСтатусКарты.Видимость				 = ЗагрузкаИзAPI;
	Если НЕ ЗагрузкаИзAPI Тогда
		Элементы.Статус.Ширина = 21;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторКартыГазпромнефть()
	
	ТекстОшибки = "";
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	
	МассивКарт = уатЗагрузкаПЦ.Газпромнефть_ПолучитьМассивКарт(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат "";
	КонецЕсли;

	Для Каждого ТекКарта Из МассивКарт Цикл
		Если ТекКарта.Номер = Объект.Код Тогда
			IDкарты = ТекКарта.Идентификатор;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат IDкарты;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторКартыЛукойл()
	
	ТекстОшибки = "";

	IDКонтракта     = СтрЗаменить(СтрЗаменить(Строка(Объект.Код), Символы.НПП, ""), " ", "");
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	IDКонтракта = уатЗагрузкаПЦ.ЛИКАРД_ПолучитьIDКонтрактаПоНомеру(СтруктураПараметровУчетнойЗаписи, IDКонтракта, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(IDКонтракта), Символы.НПП, ""), " ", "");
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВладельцаКартыЛукойл()
	
	ТекстОшибки = "";
	НаименованиеВладельца = "";
	
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	ДетальнаяИнформацияПоДоговору = уатЗагрузкаПЦ.ЛИКАРД_ПолучитьИнформациюПоДоговору(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		clientId = ДетальнаяИнформацияПоДоговору.clientId;
		СоответствиеВодителей = уатЗагрузкаПЦ.ЛИКАРД_ПолучитьСписокВодителей(СтруктураПараметровУчетнойЗаписи, clientId, ТекстОшибки);
		
		IDКонтракта     = СтрЗаменить(СтрЗаменить(Строка(Объект.Код), Символы.НПП, ""), " ", "");
	
		ДетальнаяИнформацияПоКарте = уатЗагрузкаПЦ.ЛИКАРД_ДетальнаяИнформацияПоКарте(СтруктураПараметровУчетнойЗаписи, Объект.IDкарты, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		СтруктураВодителя = СоответствиеВодителей.Получить(ДетальнаяИнформацияПоКарте.Получить("driverId"));
		
		Если СтруктураВодителя <> Неопределено Тогда
			НаименованиеВладельца = ?(ЗначениеЗаполнено(СтруктураВодителя.НаименованиеВодителя),
				СтруктураВодителя.НаименованиеВодителя, СтруктураВодителя.НаименованиеТС);
			ВладелецКарты = уатЗагрузкаПЦ.ЛИКАРД_УстановитьВладельцаТопливнойКарты(НаименованиеВладельца);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВладелецКарты) Тогда
		Если ЗначениеЗаполнено(НаименованиеВладельца) Тогда
			ТекстНстр = СтрШаблон(Нстр("ru = 'Владелец карты не найден (%1).'"), НаименованиеВладельца);
		Иначе
			ТекстНстр = Нстр("ru = 'Владелец карты не найден.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
		Возврат
	Иначе
		Объект.КомуВыдана = ВладелецКарты;
		ЗаписатьИсториюИзмененияВладельцаКарты(Объект);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьКлючЗаписиИсторияПеремещенияТопливныхКарт(Карта)
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("Карта", Карта);
	ЗначениеКлюча.Вставить("Период", НачалоДня(ТекущаяДата()));
	Возврат РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СоздатьКлючЗаписи(ЗначениеКлюча);
	
КонецФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура ПолучитьСтатусКарты(ИзменятьСтатус = Ложь)
	
	Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Заблокировать'");
	
	Если ТипЗнч(Объект.КемВыдана) <> Тип("СправочникСсылка.уатАЗС") 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.IDкарты) Тогда
		Возврат;
	КонецЕсли;
	
	флБлокировки = Ложь;
	
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		ПолучитьСтатусКартыГазпромнефть(ИзменятьСтатус);
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		ПолучитьСтатусКартыЛукойл(ИзменятьСтатус);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусКартыГазпромнефть(ИзменятьСтатус = Ложь)
	
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	ДетальнаяИнформацияПоКарте = уатЗагрузкаПЦ.Газпромнефть_ПолучитьИнформациюПоКарте(СтруктураПараметровУчетнойЗаписи, Объект.IDкарты, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДетальнаяИнформацияПоКарте = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменятьСтатус Тогда
		Статус = ДетальнаяИнформацияПоКарте.СтатусСсылка;
		Если Статус <> Объект.Статус Тогда
			Объект.Статус		 = Статус;
			Модифицированность	 = Истина;
		Конецесли;
	КонецЕсли;
	
	ПолучитьЗаголовокБлокировки();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусКартыЛукойл(ИзменятьСтатус = Ложь)
	
	ТекстОшибки = "";
	
	IDкарты = СтрЗаменить(СтрЗаменить(Объект.IDкарты, Символы.НПП, ""), " ", "");
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);

	ДетальнаяИнформацияПоКарте = уатЗагрузкаПЦ.ЛИКАРД_ДетальнаяИнформацияПоКарте(СтруктураПараметровУчетнойЗаписи, IDкарты, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	result = ДетальнаяИнформацияПоКарте;
	status = result.Получить("trackingStatus");
	Если ТипЗнч(status) = Тип("Строка") Тогда
		Если ИзменятьСтатус Тогда
			Статус = уатЗагрузкаПЦ.ПолучитьСтатусКарты(status, СтруктураПараметровУчетнойЗаписи);
			Если Статус <> Объект.Статус Тогда
				Объект.Статус		 = Статус;
				Модифицированность	 = Истина;
			Конецесли;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьЗаголовокБлокировки();
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДругуюОсновнуюКарту(Ссылка, КомуВыдана)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПластиковыеКарты.Основная,
	|	уатПластиковыеКарты.КомуВыдана,
	|	уатПластиковыеКарты.КемВыдана,
	|	уатПластиковыеКарты.Ссылка
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.КомуВыдана = &КомуВыдана
	|	И уатПластиковыеКарты.Основная
	|	И уатПластиковыеКарты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КомуВыдана", КомуВыдана);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Ссылка, КемВыдана", Выборка.Ссылка, Выборка.КемВыдана);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаписатьИсториюИзмененияВладельцаКарты(Знач ТекущийОбъект)
	
	НаборЗаписей = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Карта.Установить(ТекущийОбъект.Ссылка); 
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		НаборЗаписей.Очистить();
	КОнецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период		 = ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаВыдачи), ТекущийОбъект.ДатаВыдачи, ТекущаяДата());
	Запись.Карта		 = ТекущийОбъект.Ссылка;
	Запись.КомуВыдана	 = ТекущийОбъект.КомуВыдана;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияЗаписиИстории(Ссылка)
	ТаблицаРегистра = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(, Новый Структура("Карта", Ссылка));
	
	СтруктураРеквизитов = Новый Структура;
	
	Если ТаблицаРегистра.Количество() > 0 Тогда
		СтруктураРеквизитов.Вставить("Период",        ТаблицаРегистра[0].Период);
		СтруктураРеквизитов.Вставить("Карта", ТаблицаРегистра[0].Карта);
		СтруктураРеквизитов.Вставить("КомуВыдана", ТаблицаРегистра[0].КомуВыдана);
	Иначе
		СтруктураРеквизитов.Вставить("Период", '00010101');
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьДанныеОВладельце(Ссылка)
	ИсторияПеремещенияТопливныхКартСрезПоследних = Новый Структура("ДатаВыдачи, КомуВыдана", Дата(1,1,1), Неопределено);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатИсторияПеремещенияТопливныхКартСрезПоследних.Период,
	               |	уатИсторияПеремещенияТопливныхКартСрезПоследних.КомуВыдана
	               |ИЗ
	               |	РегистрСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(&Дата, Карта = &Карта) КАК уатИсторияПеремещенияТопливныхКартСрезПоследних";
	
	Запрос.УстановитьПараметр("Карта", Ссылка);
	Запрос.УстановитьПараметр("Дата",  ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИсторияПеремещенияТопливныхКартСрезПоследних.ДатаВыдачи = Выборка.Период;
		ИсторияПеремещенияТопливныхКартСрезПоследних.КомуВыдана = Выборка.КомуВыдана;
	КонецЕсли;
	
	Возврат ИсторияПеремещенияТопливныхКартСрезПоследних;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияДекорацияИзменитьВладельцаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураИстории	 = ОбновитьДанныеОВладельце(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураИстории);
	ЗаписатьЛимит(Объект.Ссылка, Объект.КомуВыдана, ТекущаяДата(), Объект.Лимит);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЛимит(Карта, КомуВыдана, ДатаУстановки, Лимит)
	
	ИсторияПоУстановленнымЛимитам = РегистрыСведений.уатИсторияУстановкиЛимитовТопливныхКарт.СоздатьНаборЗаписей();
	ИсторияПоУстановленнымЛимитам.Отбор.Карта.Установить(Карта);
	ИсторияПоУстановленнымЛимитам.Отбор.КомуВыдана.Установить(КомуВыдана);
	ИсторияПоУстановленнымЛимитам.Отбор.ДатаУстановки.Установить(ДатаУстановки);
	ИсторияПоУстановленнымЛимитам.Прочитать();

	Если ИсторияПоУстановленнымЛимитам.Количество() <> 0 Тогда
		ИсторияПоУстановленнымЛимитам.Очистить();
	КонецЕсли;

	НоваяЗапись = ИсторияПоУстановленнымЛимитам.Добавить();
	НоваяЗапись.Карта			 = Карта;
	НоваяЗапись.КомуВыдана		 = КомуВыдана;
	НоваяЗапись.ДатаУстановки	 = ДатаУстановки;
	
	НоваяЗапись.Лимит			 = Лимит;
	
	Попытка
		ИсторияПоУстановленнымЛимитам.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменениеСтатусаБлокировкиТопливныхКарт(Карта, КомуВыдана, ДатаУстановки, Заблокирована)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Карта", Карта);
	Запрос.УстановитьПараметр("КомуВыдана", КомуВыдана);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт.Заблокирована КАК Заблокирована
	               |ИЗ
	               |	РегистрСведений.уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт КАК уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт
	               |ГДЕ
	               |	уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт.Карта = &Карта
	               |	И уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт.КомуВыдана = &КомуВыдана
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт.ДатаУстановки УБЫВ";
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Заблокирована = Выборка.Заблокирована Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИсторияИзмененийСтатусаБлокировкиТопливныхКарт = РегистрыСведений.уатИсторияИзмененияСтатусаБлокировкиТопливныхКарт.СоздатьНаборЗаписей();
	ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Отбор.Карта.Установить(Карта);
	ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Отбор.КомуВыдана.Установить(КомуВыдана);
	ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Отбор.ДатаУстановки.Установить(ДатаУстановки);
	ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Прочитать();

	Если ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Количество() <> 0 Тогда
		ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Очистить();
	КонецЕсли;

	НоваяЗапись = ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Добавить();
	НоваяЗапись.Карта			 = Карта;
	НоваяЗапись.КомуВыдана		 = КомуВыдана;
	НоваяЗапись.ДатаУстановки	 = ДатаУстановки;
	
	НоваяЗапись.Заблокирована	 = Заблокирована;
	
	Попытка
		ИсторияИзмененийСтатусаБлокировкиТопливныхКарт.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ДатаВыдачиПриИзмененииСервер()
	Попытка
	СрезПоследних = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(, Новый Структура("Карта", Объект.Ссылка));
	Если СрезПоследних.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей  = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Карта.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Для Каждого ТекЗапись Из  НаборЗаписей Цикл
		Если ТекЗапись.Период = СрезПоследних[0].Период Тогда
			ТекЗапись.Период = Объект.ДатаВыдачи;
			НаборЗаписей.Записать();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьУчетныеДанныеЛукойл(Номер)
	
	УчетнаяЗаписьПЦ = Новый Структура("АдресСервиса, Пароль, IDКонтракта, SSLСертификат");
	ЗаполнитьЗначенияСвойств(УчетнаяЗаписьПЦ, Объект.КемВыдана.УчетнаяЗаписьПЦ);
	УчетнаяЗаписьПЦ.IDКонтракта   = Номер;
	
	Возврат УчетнаяЗаписьПЦ;
	
КонецФункции

&НаКлиенте
Процедура ЗаблокироватьРазблокироватьГазпромнефть()
	
	Если ТипЗнч(Объект.КемВыдана) <> Тип("СправочникСсылка.уатАЗС") 
		И ЗначениеЗаполнено(Объект.IDкарты) Тогда
		Возврат;
	КонецЕсли;
	
	флБлокировки    = ?(Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Разблокировать'; en = 'Unblock'"), Ложь, Истина);
	текФлБлокировки = флБлокировки;
	
	ТекстОшибки = "";
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	Выполнено   = уатЗагрузкаПЦ.Газпромнефть_БлокироватьРазблокироватьКарту(СтруктураПараметровУчетнойЗаписи, Объект.IDкарты, текФлБлокировки, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПолучитьСтатусКарты(Истина);
	
	Если флБлокировки = текФлБлокировки Тогда
		ЗаписатьИзменениеСтатусаБлокировкиТопливныхКарт(Объект.Ссылка, Объект.КомуВыдана, ТекущаяДата(), текФлБлокировки);
		
		ТекстНстр = ?(текФлБлокировки, Нстр("ru = 'Карта заблокирована'"), Нстр("ru = 'Карта разблокирована'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
	Иначе
		ТекстНстр = Нстр("ru = 'Статус карты не изменился'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьРазблокироватьЛукойл()
	
	Если ТипЗнч(Объект.КемВыдана) <> Тип("СправочникСсылка.уатАЗС") 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.IDкарты) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки			 = "";
	
	текФлБлокировки = ?(Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Разблокировать'; en = 'Unblock'"), Ложь, Истина);
	
	УчетнаяЗаписьПЦ = ЗаполнитьУчетныеДанныеЛукойл("");

	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	уатЗагрузкаПЦ.ЛИКАРД_БлокироватьРазблокироватьКарту(СтруктураПараметровУчетнойЗаписи, Объект.IDкарты, текФлБлокировки, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПолучитьСтатусКарты(Истина);
	
	Если флБлокировки = текФлБлокировки Тогда
		ЗаписатьИзменениеСтатусаБлокировкиТопливныхКарт(Объект.Ссылка, Объект.КомуВыдана, ТекущаяДата(), текФлБлокировки);
		
		ТекстНстр = ?(текФлБлокировки, Нстр("ru = 'Карта заблокирована'"), Нстр("ru = 'Карта разблокирована'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
	Иначе
		ТекстНстр = Нстр("ru = 'Статус карты не изменился'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезначащиеСимволы(ЗначениеНастройки)
	
	ЗначениеНастройки = СокрЛП(ЗначениеНастройки);

КонецПроцедуры

&НаСервере
Процедура ПолучитьЗаголовокБлокировки()
	
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		Статус = Объект.Статус;
		Если СтрНайти(Статус.НаименованиеВСистемеПоставщика, "Locked") <> 0 Тогда
			Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Разблокировать'; en = 'Unblock'");
			флБлокировки = Истина;
		Иначе
			Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Заблокировать'");
			флБлокировки = Ложь;
		КонецЕсли;

	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		Статус = Объект.Статус;
		Если Статус.НаименованиеВСистемеПоставщика = "CC051" 
			ИЛИ Статус.НаименованиеВСистемеПоставщика = "CC052" Тогда
			Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Разблокировать'; en = 'Unblock'");
			флБлокировки = Истина;
		Иначе
			Элементы.ФормаЗаблокироватьРазблокировать.Заголовок = Нстр("ru = 'Заблокировать'");
			флБлокировки = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолей()
	
	ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	
	Если ЗаблокированныеРеквизиты.Количество() > 0 Тогда
		РазблокируемыеРеквизиты = Новый Массив();
		Если Не ЗначениеЗаполнено(Объект.КомуВыдана) Тогда
			РазблокируемыеРеквизиты.Добавить("КомуВыдана");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
			РазблокируемыеРеквизиты.Добавить("ДатаВыдачи");
		КонецЕсли;
		Если РазблокируемыеРеквизиты.Количество() <> 0 Тогда
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, РазблокируемыеРеквизиты);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КомуВыданаДатаВыдачиИзменены()
	
	СтруктураИстории = ОбновитьДанныеОВладельце(Объект.Ссылка);
	
	Если СтруктураИстории.КомуВыдана <> Объект.КомуВыдана Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураИстории.ДатаВыдачи <> Объект.ДатаВыдачи Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

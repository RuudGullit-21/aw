
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами 
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Команды1СПАРКРиски
	СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Список, Элементы.ПодменюСПАРК);
	// Конец Команды1СПАРКРиски

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействие.КомандыЭДО_ФормаСпискаПриСоздании(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Элементы.ЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");

	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты) Тогда 
		Элементы.ФормаИзменитьВыделенные.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;
	КонецЕсли;  
	
	мДниДоОкончанияДействияДокументовКонтрагентов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовКонтрагентов); 
		
	Парам = Список.Параметры.Элементы.Найти("ДниДоОкончанияДействияДокументовКонтрагентов");
	Парам.Значение = мДниДоОкончанияДействияДокументовКонтрагентов;
	Парам.Использование = Истина;
	Парам = Список.Параметры.Элементы.Найти("ТекущаяДата");
	Парам.Значение = НачалоДня(ТекущаяДата());
	Парам.Использование = Истина;
	
	// Ограничение просмотра для внешнего пользователя
	АвторизованВнешнийПользователь = Ложь;
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора                  = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = АвторизованныйКонтрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
		Элементы.ПодменюЗаполнение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействиеКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействиеКлиент.КомандыЭДО_ФормаСпискаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец Команды1СПАРКРиски

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список, Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияПоКонтактнойИнформации(Команда)
	
	ТекстНСТР = НСтр("en='For all counterparties will be filled in tabular section ""Destinations"""
"according to the contact information. Continue?';ru='Для всех контрагентов будет заполнена табличная часть ""Пункты назначения"""
"по контактной информации. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПунктыПоКонтактнойИнформации", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПоКонтактнойИнформации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		
		Если КоличествоПунктовНазначения() Тогда
			
			ТекстНСТР = НСтр("en='Clear tabular sections ""Destinations"" before filling?';ru='Очистить табличные части ""Пункты назначения"" перед заполнением?'");
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьПунктыПоКонтактнойИнформацииОчистка", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			
			ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПоКонтактнойИнформацииОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьПунктыНазначения();
		ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		
		ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение()
	
	ПолучитьВсехКонтрагентов();
	Для Каждого Объект Из Контрагенты Цикл
		Для Каждого КонтактнаяИнформация Из Объект.КонтактнаяИнформация Цикл 
			Если Не КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СокрЛП(КонтактнаяИнформация.Представление) = "" Тогда 
				Продолжить;
			КонецЕсли;
			
			флАдресДобавлен = Ложь;
			Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл 
				Если ПолучитьАдресПункта(ТекСтрока.ПунктНазначения) = КонтактнаяИнформация.Представление Тогда 
					флАдресДобавлен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флАдресДобавлен Тогда 
				Продолжить;
			КонецЕсли;
			
			ПунктСсылка = ПолучитьПунктНазначенияИБ(КонтактнаяИнформация.Представление);
			Если ПунктСсылка = Неопределено Тогда   
				мЛат = 0;
				мЛон = 0;
				
				ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
				Если ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
					ИЛИ ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")
					ИЛИ ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.DaData") Тогда 
					стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформация.Значение, Ложь,, ТипЭлектронныхКарт);
					стрПредставлениеПункта = СтрЗаменить(стрПредставлениеПункта,Символы.ПС," ");
					ТекстОшибкиOSM = "";
					мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
					Если ТекстОшибкиOSM = "" Тогда 
						мЛат = мсвКоординат.Лат;
						мЛон = мсвКоординат.Лон;
						
					Иначе 
						стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформация.Значение, Истина,, ТипЭлектронныхКарт);
						стрПредставлениеПункта = СтрЗаменить(стрПредставлениеПункта,Символы.ПС," ");
						ТекстОшибкиOSM = "";
						мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
						Если ТекстОшибкиOSM = "" Тогда 
							мЛат = мсвКоординат.Лат;
							мЛон = мсвКоординат.Лон;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ПунктСсылка = СоздатьПунктНазначенияИБ(КонтактнаяИнформация.Значение, КонтактнаяИнформация.Представление, мЛат, мЛон);
			КонецЕсли;
			
			Если Не ПунктСсылка = Неопределено Тогда 
				СоздатьПунктНазначенияКонтрагент(Объект.Ссылка, ПунктСсылка);
				НоваяСтрока = Объект.ПунктыНазначения.Добавить();
				НоваяСтрока.ПунктНазначения = ПунктСсылка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаСервереБезКонтекста
Функция КоличествоПунктовНазначения()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтрагентыПунктыНазначения.Ссылка КАК Ссылка,
	               |	КонтрагентыПунктыНазначения.НомерСтроки КАК НомерСтроки,
	               |	КонтрагентыПунктыНазначения.Основной КАК Основной,
	               |	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
	               |	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо
	               |ИЗ
	               |	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка.Количество();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьПунктыНазначения()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КонтрагентыПунктыНазначения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.ПунктыНазначения.Очистить();
		ОбъектСправочника.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВсехКонтрагентов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Контрагенты.Ссылка КАК Ссылка,
	               |	Контрагенты.КонтактнаяИнформация.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Тип КАК Тип,
	               |		Вид КАК Вид,
	               |		Представление КАК Представление,
	               |		Страна КАК Страна,
	               |		Регион КАК Регион,
	               |		Город КАК Город,
	               |		АдресЭП КАК АдресЭП,
	               |		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	               |		НомерТелефона КАК НомерТелефона,
	               |		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	               |		ВидДляСписка КАК ВидДляСписка,
	               |		Значение КАК Значение
	               |	) КАК КонтактнаяИнформация,
	               |	Контрагенты.ПунктыНазначения.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Основной КАК Основной,
	               |		ПунктНазначения КАК ПунктНазначения,
	               |		КонтактноеЛицо КАК КонтактноеЛицо
	               |	) КАК ПунктыНазначения,
	               |	ЛОЖЬ КАК Модифицирован
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ЭтоГруппа = ЛОЖЬ";

	ТаблицаИсточник = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		Стр = Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, СтрокаТаблицыИсточника,,"КонтактнаяИнформация, ПунктыНазначения");
		
		Для каждого КонтактнаяИнформация Из СтрокаТаблицыИсточника.КонтактнаяИнформация Цикл
			СтрКонтактнаяИнформация = Стр.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрКонтактнаяИнформация, КонтактнаяИнформация);
		КонецЦикла;
		
		Для каждого ПунктыНазначения Из СтрокаТаблицыИсточника.ПунктыНазначения Цикл
			СтрПунктыНазначения = Стр.ПунктыНазначения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПунктыНазначения, ПунктыНазначения);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПункта(ПунктСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ПунктСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Адрес КАК Адрес
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Адрес;
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьАдресПункта()

&НаСервереБезКонтекста
Функция ПолучитьПунктНазначенияИБ(Представление)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Адрес", Представление);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Адрес = &Адрес
	|	И НЕ уатПунктыНазначения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьПунктНазначенияИБ()

&НаСервереБезКонтекста
Функция СоздатьПунктНазначенияИБ(ЗначениеАдреса, Представление, Широта, Долгота)
	
	ПунктНазначенияОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
	ПунктНазначенияОбъект.ЗначениеАдреса      = ЗначениеАдреса;
	ПунктНазначенияОбъект.Адрес               = Представление;
	ПунктНазначенияОбъект.Лат                 = Широта;
	ПунктНазначенияОбъект.Лон                 = Долгота;
	
	Попытка
		ПунктНазначенияОбъект.Записать();
		Возврат ПунктНазначенияОбъект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),, "Объект.ПунктыНазначения");
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // СоздатьПунктНазначенияИБ()

&НаСервере
Процедура СоздатьПунктНазначенияКонтрагент(Ссылка, ПунктСсылка)
	
	ОбъектСправочник = Ссылка.ПолучитьОбъект();
	НоваяСтрока = ОбъектСправочник.ПунктыНазначения.Добавить();
	НоваяСтрока.ПунктНазначения = ПунктСсылка;
	ОбъектСправочник.Записать();
	
КонецПроцедуры 

#КонецОбласти

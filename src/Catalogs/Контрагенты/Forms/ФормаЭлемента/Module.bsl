
#Область ПеременныеФормы

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; // Содержит форму длительной операции
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействие.КомандыЭДО_ФормаЭлементаПриСоздании(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	Если Параметры.Ключ.Пустая() Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	Если РеквизитыПроверкиКонтрагентов.Свойство("НеИспользоватьКэш") Тогда
		РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
	КонецЕСли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если Объект.Ссылка.Пустая() Тогда
		Контрагент = Объект.ИНН;
	Иначе
		Контрагент = Объект.Ссылка;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Объект,
		Контрагент,
		ВидКонтрагентаСпаркиРиски(Объект.ЮридическоеФизическоеЛицо),
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// Команды1СПАРКРиски
	СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.ПодменюСПАРК);
	// Конец Команды1СПАРКРиски
	
	Элементы.ГруппаИндексыСПАРКРиски.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски");
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	Если Параметры.Ключ.Пустая() Тогда 
		Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Истина;
	Иначе 
		Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Ложь;
	КонецЕсли;
	
	ЮрФизЛица = Новый Структура;
	ЮрФизЛица.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЮрФизЛица.Вставить("ЮридическоеЛицо",  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ВходитВХолдинг = ЗначениеЗаполнено(Объект.ГоловнойКонтрагент)
		И Объект.ГоловнойКонтрагент <> Объект.Ссылка;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	УстановитьТекущуюСтраницуЮрФизЛица(ЭтотОбъект);
	Элементы.ГоловнойКонтрагент.Видимость = ВходитВХолдинг;
	
	Элементы.НалоговыйНомер.Видимость = ЗначениеЗаполнено(Объект.СтранаРегистрации)
		И (Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия);
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	ИспользоватьСтрахование = ПолучитьФункциональнуюОпцию("уатИспользоватьСтрахование_уэ");
	Элементы.ГруппаСтрахование.Видимость = ИспользоватьСтрахование;

	НайтиДублиКонтрагента();
	РазместитьРеквизитыЗапретУведомлений();
	РазместитьКомандуИсторияЮридическогоАдреса();

	мДниДоОкончанияДействияДокументов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
	уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
	"ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовКонтрагентов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыКонтрагента, "ДниДоОкончанияДействияДокументов", мДниДоОкончанияДействияДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыКонтрагента, "ТекущаяДата", НачалоДня(ТекущаяДата())); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыКонтрагента.Отбор, "ВладелецДокументов", Объект.Ссылка,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействиеКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	УстановитьДлинуСтрокиИНН();
	Перевозчик_уэПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
		И НЕ ТекущийОбъект.Модифицированность() Тогда
		
		ДанныеКонтактногоЛица        = Неопределено;
		ПредставлениеКонтактногоЛица = Неопределено;
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействиеКлиент.КомандыЭДО_ФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	НайтиДублиКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ВходитВХолдинг И НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("en='Field ""Main counterparty"" is not filled';ru='Поле ""Головной контрагент"" не заполнено'");
		Сообщение.Поле = "ГоловнойКонтрагент";
		Сообщение.УстановитьДанные(РеквизитФормыВЗначение("Объект"));
		Сообщение.Сообщить();
		
		Отказ = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Взаимодействия
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Контрагенты");
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	Оповестить("ОбновлениеМестРемонтов", Объект.Ссылка, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() И Не ИгнорироватьНаличиеДублей Тогда 
		НайтиДублиКонтрагента();
		Если СписокДублей.Количество() > 0 Тогда
			Отказ = Истина;
			ДублиКонтрагентаПоказатьВопрос();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.уатРедактированиеИсторииКонтактнойИнформации") Тогда
		
		ЭлементАдреса = Неопределено;
		// Поиск элемента юридического адреса
		Для Каждого Элемент Из Элементы Цикл
			Если Элемент.Родитель.Заголовок = "Юридический адрес" И 
					СтрНайти(Элемент.Имя, "РасширеннаяПодсказка") = 0 И 
						Элемент.Имя <> "ИсторияЮрАдреса" Тогда
						
				уатОбщегоНазначенияКлиент.УстановитьАдресПослеРедактированияИстории(ЭтотОбъект,
					ВыбранноеЗначение.ИсторияИзмененийАдреса, Элемент);
					
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Перевозчик_уэПриИзменении(Элемент)
	
	Если Элементы.Найти("Рейтинг_уэ") <> Неопределено Тогда
		Элементы.Рейтинг_уэ.Видимость = ЭтотОбъект.Перевозчик_уэ;
	КонецЕсли;
	
	Если Элементы.Найти("Услуга_уэ") <> Неопределено Тогда
		Элементы.Услуга_уэ.Видимость = ЭтотОбъект.Перевозчик_уэ;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустая() Тогда

		СтандартнаяОбработка = Ложь;

		ТекстВопроса = НСтр("en='Data is not yet recorded.';ru='Данные еще не записаны.'")
			+ Символы.ПС
			+ НСтр("en='Choose of settlement account is possible only after data recording.';ru='Выбор расчетного счета возможен только после записи данных.'")
			+ Символы.ПС
			+ НСтр("en='Data will be written.';ru='Данные будут записаны.'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОсновнойБанковскийСчетНачалоВыбораЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если ПроверитьЗаполнение() Тогда
        Записать();
        ПараметрыОтбора = Новый Структура("Владелец", Объект.Ссылка);
        ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
        Результат = Неопределено;

        ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ОсновнойБанковскийСчетНачалоВыбораЗавершениеБанковскиеСчета", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбораЗавершениеБанковскиеСчета(Результат1, ДополнительныеПараметры1) Экспорт
    
    Результат = Результат1;
    Если Результат <> Неопределено Тогда
        Объект.ОсновнойБанковскийСчет = Результат;
        ЭтотОбъект.Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновноеКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустая() Тогда

		СтандартнаяОбработка = Ложь;

		ТекстВопроса = НСтр("en='Data is not yet recorded.';ru='Данные еще не записаны.'")
			+ Символы.ПС
			+ НСтр("en='Select contact is possible only after data recording.';ru='Выбор контактного лица возможен только после записи данных.'")
			+ Символы.ПС
			+ НСтр("en='Data will be written.';ru='Данные будут записаны.'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОсновноеКонтактноеЛицоНачалоВыбораЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновноеКонтактноеЛицоНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если ПроверитьЗаполнение() Тогда
        Записать();
        ПараметрыОтбора = Новый Структура("ОбъектВладелец", Объект.Ссылка);
        ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
        Результат = Неопределено;

        ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", ПараметрыФормы, 
        Объект.ОсновноеКонтактноеЛицо,,,, Новый ОписаниеОповещения("ОсновноеКонтактноеЛицоНачалоВыбораЗавершениеКонтактныеЛица", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновноеКонтактноеЛицоНачалоВыбораЗавершениеКонтактныеЛица(Результат1, ДополнительныеПараметры1) Экспорт
    
    Результат = Результат1;
    Если Результат <> Неопределено Тогда
        Объект.ОсновноеКонтактноеЛицо = Результат;
        ЭтотОбъект.Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуЮрФизЛица(Форма)

	Если Форма.Объект.ЮридическоеФизическоеЛицо = 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Форма.Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница = Форма.Элементы.ГруппаФизЛицо;
	Иначе
		Форма.Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница = Форма.Элементы.ГруппаЮрЛицо;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущуюСтраницуЮрФизЛица()

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда
		Объект.ЮридическоеФизическоеЛицо = ЮрФизЛица.ЮридическоеЛицо;
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо = ЮрФизЛица.ЮридическоеЛицо Тогда
		Объект.ДокументУдостоверяющийЛичность = "";
	Иначе
		Объект.КПП = "";
	КонецЕсли;
	
	УстановитьТекущуюСтраницуЮрФизЛица(ЭтотОбъект);
	
	ПриИзмененииИННКППВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ПриИзмененииИННКППВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ПриИзмененииИННКППВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННФизЛицоПриИзменении(Элемент)
	
	ПриИзмененииИННКППВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрациииПриИзменении(Элемент)
	УстановитьДлинуСтрокиИНН();
	Элементы.НалоговыйНомер.Видимость = ЗначениеЗаполнено(Объект.СтранаРегистрации)
		И (Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОФизЛицоПриИзменении(Элемент)
	
	ПриИзмененииИННКППВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходитВХолдингПриИзменении(Элемент)

	Если (НЕ ВходитВХолдинг) ИЛИ (ВходитВХолдинг И Объект.ГоловнойКонтрагент = Объект.Ссылка) Тогда
		Объект.ГоловнойКонтрагент = Неопределено;
	КонецЕсли;

	Элементы.ГоловнойКонтрагент.Видимость = ВходитВХолдинг;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	НайтиДублиКонтрагента();	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекНаименование)	
			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
			Список.Добавить(ТекНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);

	РезультатВыбора = Неопределено;


	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), Список,  Элементы.НаименованиеПолное);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора <> Неопределено Тогда
        
        Объект.НаименованиеПолное = РезультатВыбора.Значение;
        ФормироватьНаименованиеПолноеАвтоматически = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПолеПоискаИНННаименование)
		И НЕ ЗначениеЗаполнено(Объект.ИНН) 
		И НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	уатОбщегоНазначенияКлиент.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПунктыНазначения

&НаКлиенте
Процедура ПунктыНазначенияОсновнойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Основной Тогда // Снимем пометку основного в остальных строках.
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл 
			Если ТекСтрока.Основной И Не ТекСтрока = ТекущиеДанные Тогда 
				ТекСтрока.Основной = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияДоступенСПриИзменении(Элемент)
	ТекДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ДоступенС > ТекДанные.ДоступенПо И ЗначениеЗаполнено(ТекДанные.ДоступенПо) Тогда
		ТекДанные.ДоступенС = Дата(1,1,1,0,0,0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияДоступенПоПриИзменении(Элемент)
	ТекДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ДоступенС > ТекДанные.ДоступенПо И ЗначениеЗаполнено(ТекДанные.ДоступенПо) Тогда
		ТекДанные.ДоступенПо = Дата(1,1,1,0,0,0);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Грузоотправители

&НаКлиенте
Процедура ГрузоотправителиОсновнойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Грузоотправители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Основной Тогда // Снимем пометку основного в остальных строках.
		Для Каждого ТекСтрока Из Объект.Грузоотправители Цикл 
			Если ТекСтрока.Основной И Не ТекСтрока = ТекущиеДанные Тогда 
				ТекСтрока.Основной = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Получатели

&НаКлиенте
Процедура ПолучателиОсновнойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Грузополучатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Основной Тогда // Снимем пометку основного в остальных строках.
		Для Каждого ТекСтрока Из Объект.Грузополучатели Цикл 
			Если ТекСтрока.Основной И Не ТекСтрока = ТекущиеДанные Тогда 
				ТекСтрока.Основной = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДокументыКонтрагента

&НаКлиенте
Процедура ДокументыКонтрагентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПередНачаломДобавленияСвязанныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("ВладелецДокументов, ПринадлежностьДокументов", Объект.Ссылка,
				ПредопределенноеЗначение("Перечисление.уатПринадлежностьДокументов.ДокументыКонтрагента"));
			ОткрытьФорму("Справочник.уатРегистрационныеДокументы.ФормаОбъекта", ПараметрыОткрытия,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец Команды1СПАРКРиски

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ПроверитьКонтрагентаПоКнопке(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		ТекстНСТР = НСтр("en='Refill current attributes?';ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН", Ложь);
		ДопПараметры.Вставить("СтрокаПоиска", Объект.Наименование);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
		ТекстНСТР = НСтр("en='Field ""TIN"" is not filled';ru='Поле ""ИНН"" не заполнено'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПоКонтактнойИнформации(Команда)
	
	Если Объект.ПунктыНазначения.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the tabular section ""Destinations"" before filling?';ru='Очистить табличную часть ""Пункты назначения"" перед заполнением?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПунктыПоКонтактнойИнформацииОчистка", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ВидКонтрагентаСпаркиРиски(Объект.ЮридическоеФизическоеЛицо),
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ПриИзмененииИННКППВидаКонтрагента()
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	НайтиДублиКонтрагента();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидКонтрагентаСпаркиРиски(ЮридическоеФизическоеЛицо)
	
	Если ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо");
	ИначеЕсли ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель");
	Иначе
		ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовСПАРКРиски.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()
	
	ПолеПоискаИНННаименование = СокрЛП(ПолеПоискаИНННаименование);
	
	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
		ТекстНСТР = НСтр("en='Enter the INN or name';ru='Введите ИНН или Наименование'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоИНН = ЭтоИНН(ПолеПоискаИНННаименование);
	Если ЗаполнениеПоИНН Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	Иначе
		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ПолеПоискаИНННаименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(ДопПараметры.ПроверитьИНН);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)
	
	ОтобразитьЗаполнениеПоДаннымЕГР = ПустаяСтрока(ТекстЗаполнения) И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если ЭтоИНН(ТекстЗаполнения) Тогда
		ЭтоЮрЛицо = (СтрДлина(ТекстЗаполнения) = 10);
		
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
		РезультатВыполнения = ДанныеЕдиныхГосРеестровПоИНН(Объект.ИНН, ЭтоЮрЛицо);
		
		Если РезультатВыполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
			ЗаполнитьРеквизитыНаСервере(РезультатВыполнения.АдресРеквизитовКонтрагента, Истина);
		КонецЕсли; 
		
	Иначе
		Объект.НаименованиеПолное = ТекстЗаполнения;
	КонецЕсли;
	
	ТекстЗаполнения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
	
	Если ЗначениеЗаполнено(Объект.СтранаРегистрации) И Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Автоматически заполняются только реквизиты российских контрагентов.'"));
		Возврат;
	КонецЕсли;
	
	Если ПроверитьИНН Тогда
		ИННОбъекта = СокрП(Объект.ИНН);
	Иначе
		ИННОбъекта = СокрП(ПолеПоискаИНННаименование);
	КонецЕсли;

	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ДанныеДляЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ДанныеДляЗаполнения.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Или ДанныеДляЗаполнения.ОписаниеОшибки = "НеУказанПароль" Тогда
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
				ТекстВопроса = НСтр("en='Connect to online user support for automatic"
"population of the counterparty attributes."
"Connect now?';ru='Для автоматического заполнения реквизитов контрагентов"
"необходимо подключиться к интернет-поддержке пользователей."
"Подключиться сейчас?'");
				ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, Новый Структура("ПроверитьИНН", ПроверитьИНН));
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		ИначеЕсли ДанныеДляЗаполнения.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "kontragent");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
			
		Иначе
			ПоказатьПредупреждение(, ДанныеДляЗаполнения.ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ДанныеДляЗаполнения.Свойство("ЮридическоеФизическоеЛицо") 
		И ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо 
		И НЕ Параметры.Ключ.Пустая() Тогда
		
		ЭтоЮрЛицо = (ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		
		ТекстВопроса = СтрШаблон(
			НСтр("en='Fill by TIN %1 %2?';ru='Заполнить по ИНН %1 %2?'"), 
			?(ЭтоЮрЛицо, НСтр("en='legal person';ru='юридического лица'"), НСтр("en='businessman';ru='предпринимателя'")),
			ДанныеДляЗаполнения.НаименованиеКонтрагента);
			
		ДополнительныеПараметры = Новый Структура("АдресРеквизитовКонтрагента, ПроверитьИНН", ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ДанныеДляЗаполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
		ЗаполнитьРеквизитыНаСервере(ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН)
	КонецЕсли;
	
	ПриИзмененииИННКППВидаКонтрагента();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Наименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", Наименование);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо)
	ДанныеЗаполнения = Новый Структура("ОписаниеОшибки", "");
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИННОбъекта);
		Иначе
			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("ЮридическоеФизическоеЛицо", 
			?(РезультатПроверки.ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ДанныеЗаполнения.ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Иначе
			ДанныеЗаполнения.Вставить("НаименованиеКонтрагента", РеквизитыКонтрагента.Наименование);
			ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", РеквизитыКонтрагента.ЮридическоеФизическоеЛицо);
			ДанныеЗаполнения.Вставить("АдресРеквизитовКонтрагента", ПоместитьВоВременноеХранилище(РеквизитыКонтрагента, Новый УникальныйИдентификатор));
		КонецЕсли;
	Иначе
		ДанныеЗаполнения.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеквизитыНаСервере(ДополнительныеПараметры.АдресРеквизитовКонтрагента, ДополнительныеПараметры.ПроверитьИНН);
		ПриИзмененииИННКППВидаКонтрагента();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыНаСервере(АдресРеквизитовКонтрагента, ПроверитьИНН)
	
	РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
	
	Если Объект.ЮридическоеФизическоеЛицо <> РеквизитыКонтрагента.ЮридическоеФизическоеЛицо Тогда
		Объект.ЮридическоеФизическоеЛицо = РеквизитыКонтрагента.ЮридическоеФизическоеЛицо;
		УстановитьТекущуюСтраницуЮрФизЛица(ЭтотОбъект);
	КонецЕсли; 
	
	ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УдалитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
	
КонецПроцедуры

// Функция - Выполняет поиск реквизита контактной информации по ее виду
//
&НаСервере
Функция ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации)
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(Форма, ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для корректного заполнения генерируемых реквизитов
	ДанныеСтроки = ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	Форма[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН)
	
	Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо Тогда
		Объект.ЮридическоеФизическоеЛицо = РеквизитыКонтрагента.ЮридическоеФизическоеЛицо;
		УстановитьТекущуюСтраницуЮрФизЛица(ЭтотОбъект);
	КонецЕсли; 
	
	ЭтоЮрЛицо = (РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
			РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
			РеквизитыКонтрагента.ЮридическийАдрес);
			
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
			РеквизитыКонтрагента.ЮридическийАдрес);
			
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента"),
			РеквизитыКонтрагента.ЮридическийАдрес);
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество
				+ ", " + ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПоКонтактнойИнформацииОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.ПунктыНазначения.Очистить();
		ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПоКонтактнойИнформацииЗавершение()
	
	Для Каждого КонтактнаяИнформация Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл 
		Если Не КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(КонтактнаяИнформация.Представление) = "" Тогда 
			Продолжить;
		КонецЕсли;
		
		флАдресДобавлен = Ложь;
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл 
			Если ПолучитьАдресПункта(ТекСтрока.ПунктНазначения) = КонтактнаяИнформация.Представление Тогда 
				флАдресДобавлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флАдресДобавлен Тогда 
			Продолжить;
		КонецЕсли;
		
		ПунктСсылка = ПолучитьПунктНазначенияИБ(КонтактнаяИнформация.Представление);
		Если ПунктСсылка = Неопределено Тогда 
			мЛат = 0;
			мЛон = 0;
			
			ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
			Если ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
				Или ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")
				ИЛИ ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.DaData") Тогда 
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформация.Значение, Ложь,, ТипЭлектронныхКарт);
				стрПредставлениеПункта = СтрЗаменить(стрПредставлениеПункта,Символы.ПС," ");
				ТекстОшибкиOSM = "";
				мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
				Если ТекстОшибкиOSM = "" Тогда 
					мЛат = мсвКоординат.Лат;
					мЛон = мсвКоординат.Лон;
					
				Иначе 
					стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформация.Значение, Истина,, ТипЭлектронныхКарт);
					стрПредставлениеПункта = СтрЗаменить(стрПредставлениеПункта,Символы.ПС," ");
					ТекстОшибкиOSM = "";
					мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
					Если ТекстОшибкиOSM = "" Тогда 
						мЛат = мсвКоординат.Лат;
						мЛон = мсвКоординат.Лон;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ПунктСсылка = СоздатьПунктНазначенияИБ(КонтактнаяИнформация.Значение, КонтактнаяИнформация.Представление, мЛат, мЛон);
		КонецЕсли;
		
		Если Не ПунктСсылка = Неопределено Тогда 
			НоваяСтрока = Объект.ПунктыНазначения.Добавить();
			НоваяСтрока.ПунктНазначения = ПунктСсылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПункта(ПунктСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ПунктСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Адрес КАК Адрес
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Адрес;
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьАдресПункта()

&НаСервереБезКонтекста
Функция ПолучитьПунктНазначенияИБ(Представление)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Адрес", Представление);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Адрес = &Адрес
	|	И НЕ уатПунктыНазначения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьПунктНазначенияИБ()

&НаСервереБезКонтекста
Функция СоздатьПунктНазначенияИБ(ЗначениеАдреса, Представление, Широта, Долгота)
	
	ПунктНазначенияОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
	ПунктНазначенияОбъект.ЗначениеАдреса      = ЗначениеАдреса;
	ПунктНазначенияОбъект.Адрес               = Представление;
	ПунктНазначенияОбъект.Лат                 = Широта;
	ПунктНазначенияОбъект.Лон                 = Долгота;
	
	Попытка
		ПунктНазначенияОбъект.Записать();
		Возврат ПунктНазначенияОбъект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),, "Объект.ПунктыНазначения");
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // СоздатьПунктНазначенияИБ()

&НаКлиенте
Процедура УстановитьДлинуСтрокиИНН()
	КонтрагентЗарегистрированВРФ = (Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") 
									ИЛИ Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
	ДлинаСтрокиИНН = ?(КонтрагентЗарегистрированВРФ, Новый КвалификаторыСтроки(12), Новый КвалификаторыСтроки(50));
	Элементы.ИНН.ОграничениеТипа        = Новый ОписаниеТипов("Строка", , ДлинаСтрокиИНН);
	Элементы.ИННФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("Строка", , ДлинаСтрокиИНН);
	
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если КонтрагентЗарегистрированВРФ И ТипЗнч(АвторизованныйПользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") И
		 ПравоИзменения() Тогда
		Объект.Инн = Лев(Объект.Инн, 12);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НайтиДублиКонтрагента()
	мсвДубли = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка <> &Ссылка И 
	|	(";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	(Контрагенты.ИНН = &ИНН
		|		И Контрагенты.КПП = &КПП) ИЛИ";
		Запрос.УстановитьПараметр("ИНН", Объект.ИНН);
		Запрос.УстановитьПараметр("КПП", Объект.КПП);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	Контрагенты.НаименованиеПолное ПОДОБНО &НаименованиеПолное)";
	Запрос.УстановитьПараметр("НаименованиеПолное", Объект.НаименованиеПолное);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДублей.Очистить();
	Пока Выборка.Следующий() Цикл
		СтруктураДубля = Новый Структура("Контрагент, ИНН, КПП, Код, НаименованиеПолное");
		ЗаполнитьЗначенияСвойств(СтруктураДубля, Выборка);
		СписокДублей.Добавить(СтруктураДубля);
	КонецЦикла;
	Если СписокДублей.Количество() > 0 Тогда
		СписокДублейНадпись = НСТР("ru='Дубликатов по ИНН и КПП или полному наименованию: '; en='Duplicates number: '") + СписокДублей.Количество();
		Элементы.СписокДублейГиперссылка.Видимость = Истина;
	Иначе
		СписокДублейНадпись = "";
		Элементы.СписокДублейГиперссылка.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДублиКонтрагентаПоказатьВопрос()
	ОписаниеОповещения = Новый ОписаниеОповещения("ДублиКонтрагентаЗавершение", ЭтаФорма);
	ТекстВопроса = НСТР("ru='Найдены дубликаты по ИНН, КПП или полному наименованию. Записать?';
						|en='Duplicate counterparties found. Save?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ДублиКонтрагентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ИгнорироватьНаличиеДублей = Истина;
		ЭтаФорма.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДублейГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Дубли", СписокДублей);
	ОткрытьФорму("Справочник.Контрагенты.Форма.уатФормаДублейКонтрагента", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура РазместитьРеквизитыЗапретУведомлений()
	
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКонтактнаяИнформация = Элементы.Найти("ГруппаКонтактнаяИнформация");
	Если ГруппаКонтактнаяИнформация <> Неопределено Тогда
		уатГруппаЗапретОтправкиУведомлений = Элементы.Добавить("уатГруппаЗапретОтправкиУведомлений", Тип("ГруппаФормы"), ГруппаКонтактнаяИнформация);
		уатГруппаЗапретОтправкиУведомлений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		уатГруппаЗапретОтправкиУведомлений.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		уатГруппаЗапретОтправкиУведомлений.Отображение = ОтображениеОбычнойГруппы.Нет;
		уатГруппаЗапретОтправкиУведомлений.ОтображатьЗаголовок = Ложь;
		Элементы.Переместить(уатГруппаЗапретОтправкиУведомлений, ГруппаКонтактнаяИнформация,ГруппаКонтактнаяИнформация);
		
		уатЗапретОтправкиSMS = Элементы.Добавить("уатЗапретОтправкиSMS", Тип("ПолеФормы"), уатГруппаЗапретОтправкиУведомлений);
		уатЗапретОтправкиSMS.Вид = ВидПоляФормы.ПолеФлажка;
		уатЗапретОтправкиSMS.ПутьКДанным = "Объект.ЗапретОтправкиSMS";
		уатЗапретОтправкиЭлектроннойПочты = Элементы.Добавить("уатЗапретОтправкиЭлектроннойПочты", Тип("ПолеФормы"), уатГруппаЗапретОтправкиУведомлений);
		уатЗапретОтправкиЭлектроннойПочты.Вид = ВидПоляФормы.ПолеФлажка;
		уатЗапретОтправкиЭлектроннойПочты.ПутьКДанным = "Объект.ЗапретОтправкиЭлектроннойПочты";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКомандуИсторияЮридическогоАдреса()
	
	ГруппаКонтактнаяИнформация = Элементы.Найти("ГруппаКонтактнаяИнформация");
	Если ГруппаКонтактнаяИнформация <> Неопределено Тогда
		
		Для Каждого Элемент Из Элементы Цикл
			Если Элемент.Заголовок = "Юридический адрес" Тогда
				
				Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				
				уатИсторияЮрАдреса = Элементы.Добавить("ИсторияЮрАдреса", Тип("ПолеФормы"), Элемент);
				уатИсторияЮрАдреса.Вид = ВидПоляФормы.ПолеНадписи;
				уатИсторияЮрАдреса.ПутьКДанным = "ИсторияЮрАдреса" ;
				уатИсторияЮрАдреса.Гиперссылка = Истина;
				уатИсторияЮрАдреса.УстановитьДействие("Нажатие", "ИсторияЮрАдресаНажатие");
				уатИсторияЮрАдреса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				
				ИсторияЮрАдреса = НСтр("ru = 'История юридического адреса'");
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПравоИзменения()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.Контрагенты);
	
КонецФункции

&НаКлиенте
Процедура ПередНачаломДобавленияСвязанныхДанных(Отказ)
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("en='To perform this operation, you must record the elements!';ru='Для выполнения данной операции необходимо записать элемент!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

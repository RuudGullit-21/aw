
#Область ПеременныеФормы

&НаКлиенте
Перем НеобходимоЗаписать;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если уатЖурналыТранспортныхДокументов.ЗапретОткрытияФормыОбъекта(Отказ, СтандартнаяОбработка,
		Метаданные.Справочники.уатТС) Тогда
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
		
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.уатТС) Тогда 
		Элементы.ВводВЭксплуатацию.Доступность               		 = Ложь;
		Элементы.ПеремещениеТС.Доступность                  		 = Ложь;
		Элементы.ВыбытиеТС.Доступность                      		 = Ложь;
		Элементы.ФормаЗаполнитьПоМоделиТС.Доступность       		 = Ложь;
		Элементы.ИзменитьТранспортныйНалог.Доступность      		 = Ложь;
		Элементы.АмортизацияЗаполнитьАмортизацию.Доступность		 = Ложь;
		Элементы.СформироватьНаименование.Доступность        		 = Ложь;
		Элементы.ИзменитьНомерБортовогоУстройстваАвтодор.Доступность = Ложь;
		Элементы.ИзменитьНомерБортовогоУстройстваПлатон.Доступность  = Ложь;
		Элементы.ИсторияЗакрепленияБортовыхУстройств.Доступность	 = Ложь;
	КонецЕсли;
	
	уатИспользоватьСервисШтрафовНет   = Константы.уатИспользоватьСервисШтрафовНет.Получить();
	Элементы.СтраницаШтрафы.Видимость = уатИспользоватьСервисШтрафовНет
		И Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное;
	
	уатИспользоватьИнтеграциюПаркоматика = Константы.уатИспользоватьИнтеграциюПаркоматика.Получить();
	Элементы.СтраницаПарковки.Видимость  = уатИспользоватьИнтеграциюПаркоматика 
		И Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное;
		
	уатИспользоватьСервисMultiGo       = Константы.уатИспользоватьСервисMultiGo.Получить();
	Элементы.СтраницаMultiGo.Видимость = уатИспользоватьСервисMultiGo; 
	
	Если уатИспользоватьСервисШтрафовНет Тогда
		ЗаполнитьЗначенияШтрафов();
	КонецЕсли;
	
	Элементы.ПринадлежностьТС.Видимость = Ложь;
	
	ИспользоватьОпоздания = ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
	Элементы.ФормироватьУведомленияОбОпозданияхВРейсе.Видимость = ИспользоватьОпоздания
		И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
	
	флЗаписьНовогоТС = Объект.Ссылка.Пустая();
	
	Если флЗаписьНовогоТС Тогда
		Элементы.Организация.ТолькоПросмотр	 = Истина;
		Элементы.Подразделение.ТолькоПросмотр	 = Истина;
		Элементы.Колонна.ТолькоПросмотр	 = Истина;
		Элементы.ДатаВводаВЭксплуатацию.ТолькоПросмотр	 = Истина;
		Элементы.ДатаВыбытия.ТолькоПросмотр				 = Истина;
		Объект.ФормироватьУведомленияОбОпозданияхВРейсе = ИспользоватьОпоздания;
	Иначе
		СтруктураИсторииПлатон	 = ОбновитьДанныеОНомереУстройства(Объект.Ссылка, Справочники.уатВнешниеСистемы.Платон);
		Если Объект.Ссылка.НомерБортовогоУстройстваПлатон <> СтруктураИсторииПлатон.НомерБортовогоУстройства Тогда
			Объект.НомерБортовогоУстройстваПлатон = СтруктураИсторииПлатон.НомерБортовогоУстройства;
			Модифицированность = Истина;
		КонецЕсли;
		
		СтруктураИсторииАвтодор  = ОбновитьДанныеОНомереУстройства(Объект.Ссылка, Справочники.уатВнешниеСистемы.Автодор);
		Если Объект.Ссылка.НомерБортовогоУстройстваАвтодор <> СтруктураИсторииАвтодор.НомерБортовогоУстройства Тогда	
			Объект.НомерБортовогоУстройстваАвтодор = СтруктураИсторииАвтодор.НомерБортовогоУстройства;	
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекОрг = Объект.Организация;
	Иначе
		ТекОрг = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ТекущаяДата", НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ДатаОкончания", ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПластиковыеКарты, "ДниДоОкончанияДействияТопливныхКарт",
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрг, ПредопределенноеЗначение(
		"ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт")));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Маршруты, "Ссылка", Объект.Ссылка);
	
	// установка параметров для отображения флага просроч. документов ТС
	мВремяДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрг,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыТС, "ДниДоОкончанияДействияДокументовТС", мВремяДоОкончанияДействияДокументовТС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыТС, "ТекущаяДата", НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаГСМ, "ДатаСреза", ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаТЖ, "ДатаСреза", ТекущаяДата());
		
	ОбновитьСвязанныеДанныеПоТС();
		
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	ПрочитатьТранспортныйНалог();
	
	УстановитьВидимостьИсточникФактическихДанныхДляКартографии();
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ИспользоватьАвтоматическуюМаршрутизацию  = ПолучитьФункциональнуюОпцию("уатИспользоватьАвтоматическуюМаршрутизацию");
		Элементы.СтраницаМаршрутизация.Видимость = ИспользоватьАвтоматическуюМаршрутизацию;
	Иначе
		Элементы.СтраницаМаршрутизация.Видимость = Ложь;
		Элементы.СтраницаСекции.Видимость		 = Ложь;
	КонецЕсли;
		
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	УстановитьВидимость();
	
	НаименованиеПоШаблону = СформироватьНаименованиеСервер();
	Элементы.ГруппаСтатус.Видимость = ЗначениеЗаполнено(Объект.ДатаВыбытия) И Объект.ДатаВыбытия < ТекущаяДата();
	
	// ITOB +++	
	Если Объект.ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы._1СЦСМ") Тогда 
		Попытка  
			УстановитьПривилегированныйРежим(Истина);
			НастройкиОтображенияОбъекта = ItobОбщегоНазначения.ПолучитьНастройкиОтображенияОбъектов(Объект.Ссылка);
			УстановитьПривилегированныйРежим(Ложь); 
			
			МониторингЦветМаршрутаЧисло = НастройкиОтображенияОбъекта.ЦветМаршрутаНаКарте;
			МониторингЦветНадписиНаКартеЧисло =  НастройкиОтображенияОбъекта.ЦветНадписиНаКарте;
			МониторингИконкаНаКарте = НастройкиОтображенияОбъекта.ИконкаНаКарте;
			МониторингДополнительнаяИконкаНаКарте = НастройкиОтображенияОбъекта.ДополнительнаяИконкаНаКарте;
			МониторингВариантОтображенияТрека = НастройкиОтображенияОбъекта.ВариантОтображенияТрека;
		Исключение
		КонецПопытки;
	КонецЕсли;
	// ITOB ---

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьСтраницуНачальногоПробегаНаработки();
	
	УстановитьСтраницуGPS();
	УстановитьВидимость();
	ОбновитьСписокВыбораИспользуемойСистемыМониторинга();
	ОбновитьСписокВыбораИспользуемогоСервисаШтрафов();
	
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ИспользуемаяСистемаGPS, "НаименованиеПС") = "Waliot" Тогда
		
		
		НаименованиеДействия = "Справочник.уатТС.Форма.ФормаЭлемента.ПриОткрытии";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(НаименованиеДействия, 
		?(ТипЗнч(Объект.ИспользуемаяСистемаGPS) = Тип("Строка"), Объект.ИспользуемаяСистемаGPS,
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ИспользуемаяСистемаGPS, "НаименованиеПС")),, ЭтотОбъект);
		#КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьСвязанныеДанныеПоТС();
	УстановитьВидимость();
	
	Если Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Если флЗаписьНовогоТС ИЛИ Элементы.ГруппаВводВЭксплуатацию.ТекущаяСтраница = Элементы.ПомощникВводаВЭксплуатацию Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстНСТР = НСтр("en = 'The vehicle must be put into service.
			|Open the commissioning assistant?'; ru = 'Транспортное средство необходимо ввести в эксплуатацию. 
			|Открыть ""Помощник ввода  в эксплуатацию""?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект), ТекстНСТР, Режим);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Изменен регистр агрегаты ТС" Тогда
		ОтобразитьАгрегатыТС();
		
	ИначеЕсли Источник = Объект.Ссылка И ИмяСобытия = "ОбновитьФорму" Тогда
		Если Параметр.Свойство("КоэффициентИзмененияНормТоплива") Тогда
			КоэффициентИзмененияНормТоплива = Параметр.КоэффициентИзмененияНормТоплива;
		КонецЕсли;
		ПрочитатьТранспортныйНалог();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("СправочникСсылка.уатТС") 
		И Параметр.Свойство("Организация") И Параметр.Свойство("Подразделение") Тогда
		
		Объект.Организация 		= Параметр.Организация;
		Объект.Подразделение	= Параметр.Подразделение;
		Объект.Колонна			= Параметр.Колонна;
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму_МестонахождениеТС" И ТипЗнч(Источник) = Тип("Массив")
		И Источник.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		Прочитать();
		ОбновитьСвязанныеДанныеПоТС();
		УстановитьВидимость();
		
	ИначеЕсли ИмяСобытия = "ИзмененНомерБортовогоУстройстваТС" И Объект.Ссылка = Источник Тогда
		
		Если Параметр.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Платон") Тогда
			Объект.НомерБортовогоУстройстваПлатон = Параметр.НомерБортовогоУстройства;
			Модифицированность = Истина;
		ИначеЕсли Параметр.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Автодор") Тогда
			Объект.НомерБортовогоУстройстваАвтодор = Параметр.НомерБортовогоУстройства;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НеобходимоЗаписать = Неопределено Тогда
		Если ЗначениеЗаполнено(Объект.ОсновноеСредство) И ОсновноеСредствоУжеИспользуется(Объект.Ссылка, 
				Объект.ОсновноеСредство) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстНСТР = НСтр("en='Fixed assets for ""%1"" is already in use in other vehicles."
"Continue record of object?';ru='Основное средство ""%1"" уже используется в других транспортных средствах."
"Продолжить запись объекта?'");
			Текст = СтрШаблон(ТекстНСТР, Строка(Объект.ОсновноеСредство));
			Отказ = Истина;
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), Текст, Режим);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ЭтоГруппа Тогда 
		Если ЗначениеЗаполнено(Объект.Наименование)
			И Объект.Наименование = НаименованиеПоШаблону 
			И НЕ ВопросСформироватьНаименование Тогда
			НовоеНаименование              = СформироватьНаименованиеСервер();
			Если НовоеНаименование <> НаименованиеПоШаблону Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюНаименованиеПоШаблонуЗавершение", ЭтотОбъект, НовоеНаименование), "Измененить наименование на новое по шаблону?",
				РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Нет);
			Иначе
				ВопросСформироватьНаименование = Истина;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = СформироватьНаименованиеСервер();
			Модифицированность             = Истина;
			ВопросСформироватьНаименование = Истина;
		КонецЕсли;
	Иначе
		ВопросСформироватьНаименование = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НеобходимоЗаписать = Истина;
		Если Не Объект.ЭтоГруппа И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			СформироватьНаименованиеСервер();
		КонецЕсли;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюНаименованиеПоШаблонуЗавершение(РезультатВопроса, НовоеНаименование) Экспорт
	
	ВопросСформироватьНаименование = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Наименование   = СформироватьНаименованиеСервер();
		НаименованиеПоШаблону = Объект.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	флЗаписьНовогоТС = ТекущийОбъект.Ссылка.Пустая();		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗаписатьНалоговуюБазуПоМощности();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// ITOB +++
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТекущийОбъект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы._1СЦСМ Тогда
		
		Выборка = РегистрыСведений.ItobНастройкиОтображенияОбъектов.Выбрать(Новый Структура("Объект", ТекущийОбъект.Ссылка));
		Пока Выборка.Следующий() Цикл
			Запись = Выборка.ПолучитьМенеджерЗаписи();
		КонецЦикла;
		Запись = ?(Запись = Неопределено, РегистрыСведений.ItobНастройкиОтображенияОбъектов.СоздатьМенеджерЗаписи(), Запись); 
		Запись.Объект = ТекущийОбъект.Ссылка;
		Запись.ЦветМаршрутаНаКарте = МониторингЦветМаршрутаЧисло;
		Запись.ЦветНадписиНаКарте  = МониторингЦветНадписиНаКартеЧисло;
		Запись.ИконкаНаКарте = МониторингИконкаНаКарте;
		Запись.ДополнительнаяИконкаНаКарте = МониторингДополнительнаяИконкаНаКарте;
		Запись.ВариантОтображенияТрека = МониторингВариантОтображенияТрека;
		Запись.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
			
КонецПроцедуры
// ITOB ---

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Если НЕ ВопросПомощникВводаВЭксплуатацию И (флЗаписьНовогоТС ИЛИ Элементы.ГруппаВводВЭксплуатацию.ТекущаяСтраница = Элементы.ПомощникВводаВЭксплуатацию) Тогда
			СтандартнаяОбработка			 = Ложь;
			ЗавершениеРаботы				 = Ложь;
			Отказ							 = Истина;
			ВопросПомощникВводаВЭксплуатацию = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ВопросСформироватьНаименование И ЗначениеЗаполнено(Объект.Наименование)
		И Объект.Наименование = НаименованиеПоШаблону Тогда
		СтандартнаяОбработка			 = Ложь;
		ЗавершениеРаботы				 = Ложь;
		Отказ							 = Истина;
		ВопросСформироватьНаименование	 = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыПриИзменении(Элемент)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(ЭтотОбъект, Элемент);
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДанныеCANшиныОдометрПриИзменении(Элемент)
	
	Если НЕ Объект.ИспользоватьДанныеCANшиныОдометр Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm") Тогда
		ТекстОшибки = "";
		// Должна быть разница во времени не менее 15 минут
		
		ДатаОкончания = ТекущаяДата();
		ДатаНачала    = ДатаОкончания - 86400;
		Одометр = уатМониторинг.Omnicomm_ПолучитьОдометрТС(ДатаНачала,, Объект.ИДвСистемеНавигации, Объект.Подразделение, ТекстОшибки,,Объект.УчетнаяЗаписьСистемыМониторинга);
		Если Одометр <> Неопределено И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			Режим   = РежимДиалогаВопрос.ДаНет;
			
			Если Одометр.КонечныйОдометр = 0 ИЛИ Одометр.КонечныйОдометр = Неопределено Тогда
				Одометр = "0";
			Иначе
				Одометр = Одометр.КонечныйОдометр;
			КонецЕсли;
			
			ТекстНСТР = СтрШаблон(НСтр("en = 'Current odometer reading = %1 km?'; ru = 'Текущее значение одометра = %1 км ?'"), Одометр);
			ПоказатьВопрос(Новый ОписаниеОповещения("ИспользоватьДанныеCANшиныОдометрПриИзмененииЗавершение", ЭтотОбъект), ТекстНСТР, Режим);
		Иначе
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		НаименованиеДействия = "Справочник.уатТС.Форма.ФормаЭлемента.ИспользоватьДанныеCANшиныОдометрПриИзменении";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(НаименованиеДействия,
		?(ТипЗнч(Объект.ИспользуемаяСистемаGPS) = Тип("Строка"), Объект.ИспользуемаяСистемаGPS, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ИспользуемаяСистемаGPS, "НаименованиеПС"))
		,, ЭтотОбъект);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДанныеCANшиныОдометрПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Объект.ИспользоватьДанныеCANшиныОдометр = РезультатВопроса = КодВозвратаДиалога.Да;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеФормыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеФормыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеФормыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеФормыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	ЗаполнитьРеквизитыТСПоМоделиТС(Новый ОписаниеОповещения("МодельПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьСтраницуНачальногоПробегаНаработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойРежимРаботыПриИзменении(Элемент)
	Элементы.РазрешитьНарушениеРежимаРаботы.Видимость = ЗначениеЗаполнено(Объект.ОсновнойРежимРаботы);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТСОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокументСостояние = ПолучитьДокументСостоянияТС(Объект.Ссылка);
	Если ЗначениеЗаполнено(ДокументСостояние) Тогда
		ПоказатьЗначение(Неопределено, ДокументСостояние);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументСостоянияТС(Ссылка)
	Возврат уатОбщегоНазначения.уатСостояниеТС(Ссылка, ТекущаяДата()).Документ;
КонецФункции

&НаКлиенте
Процедура СекцииТСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СоставТСТСМодель Тогда
		СтандартнаяОбработка = Ложь;
		СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("СоставТС", ВыбраннаяСтрока);
		ПоказатьЗначение(Новый ОписаниеОповещения("СоставТСВыборЗавершение", ЭтотОбъект), СпрСсылка);
	КонецЕсли;
	Если Поле = Элементы.СоставТСВСоставеМодель Тогда
		СтандартнаяОбработка = Ложь; 
		СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("СоставТС", ВыбраннаяСтрока,,Истина);
		ПоказатьЗначение(Новый ОписаниеОповещения("СоставТСВыборЗавершение", ЭтотОбъект), СпрСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставТСВыборЗавершение(ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоставТСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("ВСоставе", Объект.Ссылка);
			ОткрытьФорму("РегистрСведений.уатСоставТС.ФормаЗаписи", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("СоставТСПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СоставТСПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПластиковыеКартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
	    	ПараметрыОткрытия = Новый Структура("КомуВыдана", Объект.Ссылка);
			ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаОбъекта", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПластиковыеКартыПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПластиковыеКартыПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЭкипажПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура("ТС", Объект.Ссылка);
			ОткрытьФорму("РегистрСведений.уатЭкипажТС.ФормаЗаписи", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ЭкипажПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЭкипажПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыТСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
	    	ПараметрыОткрытия = Новый Структура("ВладелецДокументов, ПринадлежностьДокументов",
				Объект.Ссылка, ПредопределенноеЗначение("Перечисление.уатПринадлежностьДокументов.ДокументыТС"));
			ОткрытьФорму("Справочник.уатРегистрационныеДокументы.ФормаОбъекта", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ДокументыТСПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДокументыТСПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНалоговойБазыПриИзменении(Элемент)
	ОбновитьНалоговуюБазу();
КонецПроцедуры

&НаКлиенте
Процедура ШиныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("Агрегаты", ВыбраннаяСтрока);	
	ПоказатьЗначение(Новый ОписаниеОповещения("ШиныВыборЗавершение", ЭтотОбъект), СпрСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ШиныВыборЗавершение(ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("Агрегаты", ВыбраннаяСтрока);	
	ПоказатьЗначение(Новый ОписаниеОповещения("АккумуляторыВыборЗавершение", ЭтотОбъект), СпрСсылка);
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыВыборЗавершение(ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СпрСсылка = ВернутьСсылкуНаОбъектПоКлючу("Агрегаты", ВыбраннаяСтрока);	
	ПоказатьЗначение(Новый ОписаниеОповещения("ПрочиеАгрегатыВыборЗавершение", ЭтотОбъект), СпрСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыВыборЗавершение(ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОМестонахождении()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатМестонахождениеТССрезПоследних.Организация,
	               |	уатМестонахождениеТССрезПоследних.Подразделение,
	               |	уатМестонахождениеТССрезПоследних.Колонна
	               |ИЗ
	               |	РегистрСведений.уатМестонахождениеТС.СрезПоследних(, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
	  
	Запрос.УстановитьПараметр("ТС", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Объект.Организация   = Выборка.Организация;
		Объект.Подразделение = Выборка.Подразделение;
		Объект.Колонна       = Выборка.Колонна;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаТранспортногоНалогаПриИзменении(Элемент)
	ОбновитьНадписьСтавкаТранспортногоНалога();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНалоговуюБазу()
	Если ЕдиницаИзмеренияНалоговойБазы = "251" Тогда
		Элементы.НалоговаяБаза.Заголовок = НСтр("en='Engine power';ru='Мощность двигателя'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "999" Тогда
		Элементы.НалоговаяБаза.Заголовок = НСтр("en='Motive force';ru='Сила тяги'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "181" Тогда
		Элементы.НалоговаяБаза.Заголовок = НСтр("en='Gross tonnage';ru='Валовая вместимость'");
	Иначе
		Элементы.НалоговаяБаза.Заголовок = НСтр("en='Tax base';ru='Налоговая база'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МощностьДвигателяЛСПриИзменении(Элемент)
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗаписатьНалоговуюБазуПоМощности();
		ПрочитатьТранспортныйНалог();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНалоговуюБазуПоМощности()
	Если НЕ ЗначениеЗаполнено(Объект.МощностьДвигателяЛС) Тогда
		Возврат;
	КонецЕсли;
	
	тблСреза = РегистрыСведений.уатСведенияОТС.СрезПоследних(ТекущаяДата(), Новый Структура("ТС", Объект.Ссылка));
	Если тблСреза.Количество() = 0 Тогда
		НоваяЗапись = РегистрыСведений.уатСведенияОТС.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.ТС = Объект.Ссылка;
		НоваяЗапись.НалоговаяБаза = Объект.МощностьДвигателяЛС;
		НоваяЗапись.ЕдиницаИзмеренияНалоговойБазы = 251;
		Попытка
			НоваяЗапись.Записать();
		Исключение
		КонецПопытки;
	Иначе
		Если НЕ ЗначениеЗаполнено(тблСреза[0].НалоговаяБаза) Тогда
			НоваяЗапись = РегистрыСведений.уатСведенияОТС.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, тблСреза[0]);
			НоваяЗапись.Период = ТекущаяДата();
			НоваяЗапись.НалоговаяБаза = Объект.МощностьДвигателяЛС;
			НоваяЗапись.ЕдиницаИзмеренияНалоговойБазы = 251;
			Попытка
				НоваяЗапись.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемаяСистемаGPSПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ИспользуемаяСистемаGPS) 
			И Не ЗначениеЗаполнено(Объект.ИсточникФактическихДанныхДляКартографии) Тогда 
		Объект.ИсточникФактическихДанныхДляКартографии = ПредопределенноеЗначение("Перечисление.уатИсточникФактическихДанныхДляКартографии.СистемаСпутниковогоМониторинга");
	КонецЕсли;
	
	Объект.ИДвСистемеНавигации = "";
	УстановитьВидимость();
	УстановитьСтраницуGPS();
	УстановитьВидимостьГПС();
	Элементы.ИспользоватьДанныеCANшиныОдометр.Видимость = Объект.ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm");
	
	НаименованиеДействия = "Справочник.уатТС.Форма.ФормаЭлемента.ИспользуемаяСистемаGPSПриИзменении";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
	уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(НаименованиеДействия, 
	?(ТипЗнч(Объект.ИспользуемаяСистемаGPS) = Тип("Строка"), Объект.ИспользуемаяСистемаGPS,
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ИспользуемаяСистемаGPS, "НаименованиеПС")),, ЭтотОбъект);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьСистемыМониторингаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

// ITOB +++
&НаКлиенте
Процедура МониторингИконкаНаКартеПриИзменении(Элемент)
	МониторингАдресИконки = ПолучитьНавигационнуюСсылку(МониторингИконкаНаКарте, "Иконка")	
КонецПроцедуры

&НаКлиенте
Процедура МониторингДополнительнаяИконкаНаКартеПриИзменении(Элемент)
	МониторингАдресДополнительнойИконки = ПолучитьНавигационнуюСсылку(МониторингДополнительнаяИконкаНаКарте, "Иконка")	
КонецПроцедуры

&НаКлиенте
Процедура МониторингЦветНадписиНаКартеПриИзменении(Элемент)
	МониторингЦветНадписиНаКартеЧисло = УстановитьЧисленноеПредставлениеЦвета(МониторингЦветНадписиНаКарте);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МониторингЦветМаршрутаПриИзменении(Элемент)
	МониторингЦветМаршрутаЧисло = УстановитьЧисленноеПредставлениеЦвета(МониторингЦветМаршрута);
	Модифицированность = Истина;
КонецПроцедуры
// ITOB ---

&НаКлиенте
Процедура МаршрутыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Новый ОписаниеОповещения("МаршрутыВыборЗавершение", ЭтотОбъект), Элементы.Маршруты.ТекущиеДанные.Маршрут);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыВыборЗавершение(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
	
	Если ТипЗнч(ТекСтрока.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда //для модели запрещаем изменения всех данных
		ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотр",
			КлючЗаписиНормыРасходаГСМ(СтруктураЗаписиНормыГСМ(ТекСтрока)), Истина);
	Иначе //для ТС запрещаем изменение ТС
		ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотрМодели",
			КлючЗаписиНормыРасходаГСМ(СтруктураЗаписиНормыГСМ(ТекСтрока)), Истина);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ТолькоПросмотрМодели", Новый Структура("Период, МодельТС, ГСМ, Организация",
			ТекущаяДата(), Объект.Ссылка, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Модель, "ОсновноеТопливо"), Объект.Организация), Истина);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", ПараметрыФормы);
	КонецЕсли;
	
	Если Копирование И ТипЗнч(Элементы.НормыРасходаГСМ.ТекущиеДанные.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Отказ = Истина;
		ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура("ТолькоПросмотрМодели, ЗначениеКопирования",
			Истина, КлючЗаписиНормыРасходаГСМ(СтруктураЗаписиНормыГСМ(ТекСтрока)));
			
		Форма = ПолучитьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
		
		ЗаполнитьЗначенияСвойств(Форма.Запись, ТекСтрока);
		Форма.Запись.Период   = ТекущаяДата();
		Форма.Запись.МодельТС = Объект.Ссылка;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередУдалением(Элемент, Отказ)
	ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
	Если ТипЗнч(ТекСтрока.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.НормыРасходаГСМ.ТекущиеДанные;
		ТекСтрока.МодельТС = Объект.Ссылка;
		ТекСтрока.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Модель, "ОсновноеТопливо");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаТЖПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.НормыРасходаТЖ.ТекущиеДанные;
	Если ТипЗнч(ТекСтрока.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура("Ключ, ТолькоПросмотр",
			КлючЗаписиНормыРасходаТЖ(СтруктураЗаписиНормыТЖ(ТекСтрока)), Истина);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаТехническихЖидкостей.ФормаЗаписи", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаТЖПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ТолькоПросмотрМодели", Новый Структура("Период, МодельТС",
			ТекущаяДата(), Объект.Ссылка), Истина);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаТехническихЖидкостей.ФормаЗаписи", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ВладелецТСПриИзменении(Элемент)
	// очистка водителя, если он не относится к владельцу ТС
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		СписокВодителей = Вычислить("уатОбщегоНазначения_уэ.ВодителиКонтрагента(Объект.ВладелецТС)");
		Если СписокВодителей.НайтиПоЗначению(Объект.Водитель) = Неопределено Тогда
			Объект.Водитель = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияПериодПриИзменении(Элемент)
	ТекСтрока = Элементы.Амортизация.ТекущиеДанные;
	ТекСтрока.Период = НачалоМесяца(ТекСтрока.Период);
КонецПроцедуры

&НаКлиенте
Процедура ОбязательныеВидыДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УстановитьОтборКатегорииПоВидуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбязательныеВидыДокументовВидДокументаПриИзменении(Элемент)
	УстановитьОтборКатегорииПоВидуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКатегорииПоВидуДокумента()
	ТекСтрока = Элементы.ОбязательныеВидыДокументов.ТекущиеДанные;
	
	мсвКатегории = ПолучитьКатегорииПоВидуДокумента(ТекСтрока.ВидДокумента);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", мсвКатегории));
	Элементы.ОбязательныеВидыДокументовКатегорияДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКатегорииПоВидуДокумента(ВидДокумента)
	Возврат ВидДокумента.Категории.Выгрузить().ВыгрузитьКолонку("Категория");
КонецФункции

&НаКлиенте
Процедура ФормироватьУведомленияПриОтсутствииДанныхПриИзменении(Элемент)
	Элементы.ПолучательУведомленийПриОтсутствииДанных.Видимость = Объект.ФормироватьУведомленияПриОтсутствииДанных;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиMultiGoПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НастройкиMultiGo.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Значение = Неопределено Тогда
		 ТекущиеДанные.Значение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьMultiGoПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура ЗаполнитьПоМоделиТС(Команда)
	ЗаполнитьРеквизитыТСПоМоделиТС(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВводВЭксплуатацию(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. Continue?';ru='Для выполнения данной операции необходимо записать элемент. Продолжить?'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ВводВЭксплуатациюПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТС", Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФормы.Вставить("Колонна", Объект.Колонна);
		ОткрытьФорму("Документ.уатВводВЭксплуатациюТСиОборудования.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТС(Команда)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТС", Объект.Ссылка);
	ОткрытьФорму("Документ.уатПеремещениеТСиОборудования.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВыбытиеТС(Команда)
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТС", Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("Колонна", Объект.Колонна);
	
	ОткрытьФорму("Документ.уатВыбытиеТСиОборудования.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМестонахождение;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоэффициентГСМ(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Перед вводом коэффициента ГСМ необходимо записать ТС!");
		Возврат;
	КонецЕсли;
	
	СтараяЗапись = СтруктураСрезаСведенийОТС(Объект.Ссылка);
	Если СтараяЗапись = Неопределено Тогда //нет записей регистра
		СтруктураЗаполнения = Новый Структура("Период, ТС", ТекущаяДата(), Объект.Ссылка);
		ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения);
		
	Иначе //есть записи регистра
		Если НачалоДня(СтараяЗапись.Период) = НачалоДня(ТекущаяДата()) Тогда //
			ПараметрыОткрытия = Новый Структура("Ключ", ПолучитьКлючСтаройЗаписи(СтараяЗапись));
		Иначе
			СтруктураЗаполнения = СтараяЗапись;
			СтруктураЗаполнения.Вставить("Период", ТекущаяДата());
			СтруктураЗаполнения.Вставить("ТС", Объект.Ссылка);
			ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.уатСведенияОТС.ФормаЗаписи", ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияКоэффициентаГСМ(Команда)
	ОткрытьФорму("РегистрСведений.уатСведенияОТС.ФормаСписка", Новый Структура("Отбор", Новый Структура("ТС", Объект.Ссылка)),, "История");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТранспортныйНалог(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ИзменитьТранспортныйНалогЗавершение", ЭтотОбъект), "Перед вводом значения транспортного налога необходимо записать ТС!");
		Возврат;
	КонецЕсли;

	ДатаСреза = НачалоГода(ТекущаяДата())-1; // конец предыдущего года, т.к. ТН начисляется за предыдущий год
	СтараяЗапись = СтруктураСрезаСведенийОТС(Объект.Ссылка, ДатаСреза);
	Если СтараяЗапись = Неопределено Тогда //нет записей регистра
		СтруктураЗаполнения = Новый Структура("Период, ТС, НачислятьТранспортныйНалог", НачалоГода(ДатаСреза), Объект.Ссылка, Истина);
		ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения);
		
	Иначе //есть записи регистра
		Если НачалоГода(СтараяЗапись.Период) = НачалоГода(ДатаСреза) Тогда //
			ПараметрыОткрытия = Новый Структура("Ключ", ПолучитьКлючСтаройЗаписи(СтараяЗапись));
		Иначе
			СтруктураЗаполнения = СтараяЗапись;
			СтруктураЗаполнения.Вставить("Период", НачалоГода(ДатаСреза));
			СтруктураЗаполнения.Вставить("ТС", Объект.Ссылка);
			//СтруктураЗаполнения.Вставить("СтавкаТранспортногоНалога", Неопределено);
			ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.уатСведенияОТС.ФормаЗаписи", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияТранспортногоНалога(Команда)
	ОткрытьФорму("РегистрСведений.уатСведенияОТС.ФормаСписка", Новый Структура("Отбор", Новый Структура("ТС", Объект.Ссылка)),, "История");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАмортизацию(Команда)
	Если Объект.СрокИспользования = 0 ИЛИ Объект.БалансоваяСтоимость = 0 Тогда
		ТекстНСТР = НСтр("en='For automatic calculation by period, you must specify the period of use and book value of vehicle';ru='Для автоматического расчета по периодам следует указать срок использования и балансовую стоимость ТС'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Объект.Амортизация.Количество() = 0 Тогда
		ЗаполнитьАмортизациюВводДаты();
	Иначе
		ОписОповещ = Новый ОписаниеОповещения("ЗаполнитьАмортизациюВопросОчистить", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
		ПоказатьВопрос(ОписОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАмортизациюВопросОчистить(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Амортизация.Очистить();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьАмортизациюВводДаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАмортизациюВводДаты()
	ОписОповещ = Новый ОписаниеОповещения("ЗаполнитьАмортизациюВводДатыОкончание", ЭтотОбъект);
	ТекстНСТР = НСтр("en='Commissioning date for depreciation calculating';ru='Дата ввода в эксплуатацию для расчета амортизации'");
	ПоказатьВводДаты(ОписОповещ, Объект.ДатаВводаВЭксплуатацию, ТекстНСТР, ЧастиДаты.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАмортизациюВводДатыОкончание(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНач = НачалоМесяца(Результат);
	ПоследняяКопейка = Объект.БалансоваяСтоимость; //учет последней копейки
	
	Для Сч = 0 По Объект.СрокИспользования-1 Цикл
		НоваяСтрока = Объект.Амортизация.Добавить();
		НоваяСтрока.Период = ДобавитьМесяц(ДатаНач, Сч);
		НоваяСтрока.Сумма = Объект.БалансоваяСтоимость / Объект.СрокИспользования;
		
		ПоследняяКопейка = ПоследняяКопейка - НоваяСтрока.Сумма;
		Если Сч = Объект.СрокИспользования-1 И ПоследняяКопейка <> 0 Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + ПоследняяКопейка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблон(Команда)
	
	ПараметрыФормы = Новый Структура("ОбъектНастройки", "Справочник_уатТС");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование(Команда)
	
	Объект.Наименование   = СформироватьНаименованиеСервер();
	НаименованиеПоШаблону = Объект.Наименование;
	Модифицированность  = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникВводаВЭксплуатацию(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';ru='Для выполнения данной операции необходимо записать элемент. Данные будут записаны.'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ОткрытьПомощникВводаВЭксплуатациюПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТС", Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФормы.Вставить("Колонна", Объект.Колонна);
		ПараметрыФормы.Вставить("ДатаВводаВЭксплуатацию", Объект.ДатаВводаВЭксплуатацию);
		ПараметрыФормы.Вставить("НачальныйПробег", Объект.НачальныйПробег);
		
		ОткрытьФорму("Справочник.уатТС.Форма.ПомощникВводаВЭксплуатацию", ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗакрепленияБортовыхУстройств(Команда)
		
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОткрытаИзФормыТС", Истина);
	СтруктураОтбора = Новый Структура("ТС", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОповещениеОЗакрытииИсторииТС = Новый ОписаниеОповещения("ИсторияЗакрепленияБортовыхУстройствЗакрытие", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.уатИсторияЗакрепленияБортовыхУстройств.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытииИсторииТС, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерБортовогоУстройстваАвтодор(Команда)
	ИзменитьНомерБортовогоУстройстваНажатие("Автодор");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерБортовогоУстройстваПлатон(Команда)
	ИзменитьНомерБортовогоУстройстваНажатие("Платон");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымГИБДД(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.VIN) Тогда
		ТекстНСТР = НСтр("ru='У ТС не заполнен VIN.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;

	ТекстНСТР = НСтр("ru='Перезаполнить реквизиты, соответствующие истории регистрации в ГИБДД?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыТСПоДаннымГИБДД", ЭтотОбъект), 
	ТекстНСТР, 
	РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиMultiGo(Команда)
	Если Объект.НастройкиMultiGo.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьНастройкиMultiGoПродолжение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
	Иначе
		ЗагрузитьНастройкиMultiGoСервер();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьСтраницуНачальногоПробегаНаработки()
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Модель)
		ИЛИ уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Модель, "НаличиеСпидометра") = Истина Тогда
		Элементы.НачальныйПробег.Заголовок = НСтр("en='Initial mileage km';ru='Начальный пробег, км'");
	Иначе
		Элементы.НачальныйПробег.Заголовок = НСтр("en='Initial operation time, h';ru='Начальная наработка, ч'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьСостояниеИКоэффициентИзмененияНормТоплива(Ссылка)
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("КоэффициентИзмененияНормТоплива", 
		уатОбщегоНазначения.уатПолучитьКоэффициентИзмененияНормТопливаТС(Ссылка, ТекущаяДата()));
	СтруктураВозврата.Вставить("СостояниеТС", уатОбщегоНазначения.уатСостояниеТС(Ссылка, ТекущаяДата()).Состояние);
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ОсновноеСредствоУжеИспользуется(Ссылка, ОсновноеСредство)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",           Ссылка);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Наименование
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.Ссылка <> &Ссылка
	|	И уатТС.ОсновноеСредство = &ОсновноеСредство";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатПустой = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатПустой;
	
КонецФункции

&НаСервере
Процедура ОбновитьСвязанныеДанныеПоТС()
	СтруктураДанных = ОбновитьСостояниеИКоэффициентИзмененияНормТоплива(Объект.Ссылка);
	КоэффициентИзмененияНормТоплива = СтруктураДанных.КоэффициентИзмененияНормТоплива;
	СостояниеТС = СтруктураДанных.СостояниеТС;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Экипаж.Отбор, "ТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(МестонахождениеТС.Отбор, "ТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПластиковыеКарты.Отбор, "КомуВыдана", Объект.Ссылка,,,Истина);
	Если (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт")) Тогда
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ВСоставе", Объект.Ссылка,,,Истина);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ТС",,,,Ложь);  
		
		// Тест
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ВСоставе", Объект.Ссылка,,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ТС",,,,Ложь);
	Иначе
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ВСоставе",,,,Ложь);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ТС", Объект.Ссылка,,,Истина);  
		
		// Тест
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ВСоставе",,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СоставТС.Отбор, "ТС", Объект.Ссылка,,,Истина);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыТС.Отбор, "ВладелецДокументов", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СекцииТС.Отбор, "Владелец", Объект.Ссылка,,,Истина);
	ОбновитьДанныеОМестонахождении();
	ОтобразитьАгрегатыТС();
	
	СписокМодельТС = Новый СписокЗначений;
	СписокМодельТС.Добавить(Объект.Ссылка);
	СписокМодельТС.Добавить(Объект.Модель);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаГСМ.Отбор, "МодельТС", СписокМодельТС, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаТЖ.Отбор, "МодельТС", СписокМодельТС, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаГСМ, "ТС", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаГСМ, "Модель", Объект.Модель);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаТЖ, "ТС", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаТЖ, "Модель", Объект.Модель);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьАгрегатыТС()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Шины, "Дата", ТекущаяДата(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Шины, "ТС", Объект.Ссылка, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аккумуляторы, "Дата", ТекущаяДата(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аккумуляторы, "ТС", Объект.Ссылка, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПрочиеАгрегаты, "Дата", ТекущаяДата(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПрочиеАгрегаты, "ТС", Объект.Ссылка, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ТаблицаСоответствийДатчиков.Видимость = Ложь;
	Если Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		Элементы.ВладелецТС.Видимость               = Истина;
		Элементы.ВладелецТС.ОграничениеТипа         = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Элементы.ГрафикРаботы.Видимость             = Истина;
		Элементы.ГруппаПривлеченноеТС.Видимость     = Ложь;
	ИначеЕсли Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		Элементы.ВладелецТС.Видимость               = Истина;
		Элементы.ВладелецТС.ОграничениеТипа         = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ГрафикРаботы.Видимость             = Ложь;
		Элементы.ГруппаПривлеченноеТС.Видимость     = Истина;
	Иначе 
		Элементы.ВладелецТС.Видимость               = Ложь;
		Элементы.ГрафикРаботы.Видимость             = Ложь;
		Элементы.ГруппаПривлеченноеТС.Видимость     = Ложь;
	КонецЕсли;
	
	ЭтоАвиаТранспорт    = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт"));
	ЭтоМорскойТранспорт = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт"));
	ЭтоЖДТранспорт      = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт"));
	ЭтоПривлеченноеТС   = (Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")); 
	ЭтоВиртуальноеТС    = (Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	
	Если ЭтоМорскойТранспорт Или ЭтоЖДТранспорт Или ЭтоАвиаТранспорт Тогда  
		
		Элементы.ГруппаСтраницы.Видимость                   = Не ЭтоПривлеченноеТС И Не ЭтоВиртуальноеТС;
		Элементы.ГруппаДопИнформация1.Видимость             = ЭтоПривлеченноеТС Или ЭтоВиртуальноеТС;
		Элементы.СтраницаДопПараметры.Видимость             = Ложь;
		Элементы.СтраницаСоставТС.Видимость                 = Ложь;
		Элементы.СтраницаЭкипаж.Видимость                   = Ложь;
		Элементы.СтраницаАгрегаты.Видимость                 = Ложь;
		Элементы.СтраницаМестонахождение.Видимость          = Ложь;
		Элементы.СтраницаПластиковыеКарты.Видимость         = Ложь;
		Элементы.СтраницаНормыГСМ.Видимость                 = Ложь;
		Элементы.СтраницаНормыТЖ.Видимость                  = Ложь;
		Элементы.СтраницаМониторинг.Видимость               = Ложь;
		Элементы.СтраницаБухУчет.Видимость                  = Ложь;
		Элементы.ГруппаVIN.Видимость                        = Ложь;
		Элементы.ГруппаЦветКузова.Видимость                 = Ложь;
		Элементы.ГруппаГодВыпуска.Видимость                 = Ложь;
		Элементы.ГруппаСобственныйВес.Видимость             = Ложь;
		Элементы.ГруппаСобственное.Видимость                = Ложь;
		Элементы.ГруппаОсновнаяКолонкаПравая.Видимость      = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаЛицензия.Видимость                   = Ложь;
		Элементы.СостояниеТС.Видимость                      = Ложь;
		Элементы.СтраницаМаршрутизация.Видимость            = Ложь;
		Элементы.Марка.Видимость                            = Ложь;
		Элементы.Гараж.Видимость                            = Ложь;
		Элементы.ГосударственныйНомер.Видимость             = Ложь;
		Элементы.ТипВладенияТС.Видимость                    = Ложь;
		Элементы.ГаражныйНомер.Заголовок                    = "Номер";
		Элементы.СтраницаХарактеристики.Видимость           = Ложь;
		Элементы.СтраницаПлатныеДороги.Видимость            = Ложь;
		Элементы.СтраницаСекции.Видимость                   = Ложь;
		Элементы.ГруппаОбязательныеВидыДокументов.Видимость = Ложь;
		Элементы.ГруппаVINПривлеченноеТС.Видимость          = Ложь;
		Элементы.СтраницаДокументы.Видимость = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");		
	Иначе 
		ЭтоАвтотранспорт = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
		ЭтоПрицеп        = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
		ЭтоОборудование  = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование"));
		НаличиеТопливногоБака = Объект.Модель.НаличиеТопливногоБака;
		ЭтоСобственноеТС      = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		
		Элементы.ГруппаСтраницы.Видимость                        = Истина;
		Элементы.СтраницаДопПараметры.Видимость                  = Истина;
		Элементы.СтраницаСоставТС.Видимость                      = Истина;
		Элементы.СтраницаЭкипаж.Видимость                        = ЭтоАвтотранспорт И (Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Элементы.СтраницаАгрегаты.Видимость                      = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.СтраницаМестонахождение.Видимость               = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.СтраницаПластиковыеКарты.Видимость              = (ЭтоАвтотранспорт И ЭтоСобственноеТС)
			ИЛИ ((ЭтоПрицеп ИЛИ ЭтоОборудование) И НаличиеТопливногоБака И ЭтоСобственноеТС);
		Элементы.СтраницаНормыГСМ.Видимость                      = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.СтраницаНормыТЖ.Видимость                       = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.СтраницаМониторинг.Видимость                    = Не Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");
		Элементы.СтраницаБухУчет.Видимость                       = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаVIN.Видимость                             = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаЦветКузова.Видимость                      = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаГодВыпуска.Видимость                      = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаСобственныйВес.Видимость                  = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаСобственное.Видимость                     = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаДопПараметрыШапкаКолонкаЛевая.Видимость   = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаДопПараметрыПодвалКолонкаПривлеченное.Видимость = НЕ Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ОсновнойРежимРаботыДляМаршрутизации.Видимость   = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.РазрешитьНарушениеРежимаРаботы.Видимость        = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаОсновнаяКолонкаПравая.Видимость           = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.НачальныйПробег.Видимость                       = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.ГруппаДопПараметрыПодвалКолонкаПравая.Видимость = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.СтраницаПлатныеДороги.Видимость				 = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		Элементы.Марка.Видимость                                 = Истина;
		Элементы.Гараж.Видимость                                 = Истина;
		Элементы.ГосударственныйНомер.Видимость                  = Истина;
		Элементы.ТипВладенияТС.Видимость                         = Истина;
		Элементы.ГаражныйНомер.Заголовок                         = "Гаражный номер";
		Элементы.СтраницаХарактеристики.Видимость                = Истина;
		Элементы.СтраницаПлатныеДороги.Видимость                 = Истина;
		Элементы.СтраницаСекции.Видимость                        = Истина;
		Элементы.ГруппаОбязательныеВидыДокументов.Видимость      = Истина; 
		Элементы.ГруппаЛицензия.Видимость                        = Истина;
		Элементы.ГруппаVINПривлеченноеТС.Видимость               = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное");
		Элементы.СтраницаДокументы.Видимость = Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
		
		
		Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.уатИсторияЗакрепленияБортовыхУстройств) Тогда
			Элементы.ИсторияЗакрепленияБортовыхУстройств.Видимость 	   = Ложь;
			Элементы.ИзменитьНомерБортовогоУстройстваАвтодор.Видимость = Ложь;
			Элементы.ИзменитьНомерБортовогоУстройстваПлатон.Видимость  = Ложь;
		КонецЕсли;
		
		Если Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			Элементы.ГруппаСобственное.Видимость = Ложь;
		Иначе
			Элементы.ГруппаСобственное.Видимость = Истина;
		КонецЕсли;
		
		Если ЭтоАвтотранспорт Тогда
			Заголовок = НСтр("en='Vehicle';ru='Транспортное средство'");
		ИначеЕсли ЭтоПрицеп Тогда
			Заголовок = НСтр("en='Trailer';ru='Прицеп'");
		ИначеЕсли ЭтоМорскойТранспорт Тогда 
			Заголовок = НСтр("en='Sea transport';ru='Морской транспорт'");
		ИначеЕсли ЭтоЖДТранспорт Тогда
			Заголовок = НСтр("en='Railway transport';ru='Железнодорожный транспорт'");
		ИначеЕсли ЭтоАвиаТранспорт Тогда
			Заголовок = НСтр("en='Air transport';ru='Авиационный транспорт'");
		Иначе
			Заголовок = НСтр("en='Equipment';ru='Оборудование'");
		КонецЕсли;
		
		Элементы.ГосударственныйНомер.Видимость          = Не Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");
		Элементы.ГаражныйНомер.Видимость                 = Не Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");
		Элементы.ГруппаСобственноеПривлеченное.Видимость = Не Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");
		Элементы.СтраницаДокументы.Видимость             = Не Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");
		Элементы.ТипВладенияТС.Видимость 			 	 = Не Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное");
		
		Элементы.ГруппаДопПараметрыПодвал.Видимость = ЭтоАвтотранспорт;
		
		Элементы.СоставТСВСоставе.Видимость = НЕ ЭтоАвтотранспорт;
		Элементы.СоставТСВСоставеМодель.Видимость = Не ЭтоАвтотранспорт;
		Элементы.СоставТСТС.Видимость = ЭтоАвтотранспорт;
		Элементы.СоставТСТСМодель.Видимость = ЭтоАвтотранспорт;
		
		ОбновитьНалоговуюБазу();
		ОбновитьНадписьСтавкаТранспортногоНалога();
		
		Элементы.ГруппаГиперссылки.Видимость = НЕ (Объект.Ссылка.Пустая());
		ВидимостьВводВЭксплуатацию = (Объект.ДатаВводаВЭксплуатацию = '00010101');
		Если Элементы.ВводВЭксплуатацию.Видимость <> ВидимостьВводВЭксплуатацию Тогда
			Элементы.ВводВЭксплуатацию.Видимость = ВидимостьВводВЭксплуатацию;
		КонецЕсли;
		Элементы.НачальныйПробег.ТолькоПросмотр = НЕ ВидимостьВводВЭксплуатацию;
		Элементы.ГруппаВводВЭксплуатацию.ТекущаяСтраница = ?(ВидимостьВводВЭксплуатацию, Элементы.ПомощникВводаВЭксплуатацию, Элементы.Гиперссылки);
		
		ВидимостьПеремещениеВыбытие = (Объект.ДатаВводаВЭксплуатацию <> '00010101' И Объект.ДатаВыбытия = '00010101');
		Если Элементы.ПеремещениеТС.Видимость <> ВидимостьПеремещениеВыбытие Тогда
			Элементы.ПеремещениеТС.Видимость = ВидимостьПеремещениеВыбытие;
		КонецЕсли;
		Если Элементы.ВыбытиеТС.Видимость <> ВидимостьПеремещениеВыбытие Тогда
			Элементы.ВыбытиеТС.Видимость = ВидимостьПеремещениеВыбытие;
		КонецЕсли;
		
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
			ИспользоватьАвтоматическуюМаршрутизацию  = ПолучитьФункциональнуюОпцию("уатИспользоватьАвтоматическуюМаршрутизацию");
			Элементы.СтраницаМаршрутизация.Видимость = ИспользоватьАвтоматическуюМаршрутизацию;
		Иначе 
			Элементы.СтраницаМаршрутизация.Видимость = Ложь;
		КонецЕсли;

	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() И Не ЭтоАвиаТранспорт И Не ЭтоЖДТранспорт И Не ЭтоМорскойТранспорт Тогда
		Элементы.СтраницаМаршруты.Видимость = Истина;
	Иначе 
		Элементы.СтраницаМаршруты.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.АвтоГРАФ 
		И (Объект.УчетнаяЗаписьСистемыМониторинга.Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5
		ИЛИ Объект.УчетнаяЗаписьСистемыМониторинга.Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7) Тогда
		Элементы.ТаблицаСоответствийДатчиков.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ШтрафыНЕТ_ОбновитьИнформацииОТС.Видимость = ЗначениеЗаполнено(Объект.УчетнаяЗаписьCервисаШтрафов)
	И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.УчетнаяЗаписьCервисаШтрафов, "ВнешняяСистема")
		= ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет");
	Элементы.ШтрафыНЕТ_ЗагрузитьШтрафы.Видимость = ЗначениеЗаполнено(Объект.УчетнаяЗаписьCервисаШтрафов)
	И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.УчетнаяЗаписьCервисаШтрафов, "ВнешняяСистема")
		= ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет");
		
	Элементы.ПолучательУведомленийПриОтсутствииДанных.Видимость = Объект.ФормироватьУведомленияПриОтсутствииДанных;

	Элементы.СтраницаШтрафы.Видимость   = уатИспользоватьСервисШтрафовНет
		И Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") И Не ЭтоАвиаТранспорт И Не ЭтоЖДТранспорт И Не ЭтоМорскойТранспорт;
	Элементы.СтраницаПарковки.Видимость = уатИспользоватьИнтеграциюПаркоматика 
		И Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") И Не ЭтоАвиаТранспорт И Не ЭтоЖДТранспорт И Не ЭтоМорскойТранспорт;

	Элементы.РазрешитьНарушениеРежимаРаботы.Видимость = ЗначениеЗаполнено(Объект.ОсновнойРежимРаботы);
	
	АдресСервисаMultiGo = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.УчетнаяЗаписьMultiGo, "АдресСервиса");
	Элементы.ИДвСервисеMultiGo.Видимость = ЗначениеЗаполнено(Объект.УчетнаяЗаписьMultiGo)
		И АдресСервисаMultiGo <> "https://api.multigo.ru"
		И АдресСервисаMultiGo <> "https://api.multigo.ru/router/1/";

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоМоделиТС(Знач Оповещение)
	
	ТекстНСТР = НСтр("en='Refill attributes of corresponding model of vehicle?';ru='Перезаполнить реквизиты, соответствующие модели ТС?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыТСПоМоделиТСЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), 
		ТекстНСТР, 
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоМоделиТСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Если Не Оповещение = Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//Объект.ВладелецТС = Неопределено;
	//Объект.Водитель   = Неопределено;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипТС",                  Неопределено);
	СтруктураРеквизитов.Вставить("ВидМоделиТС",            Неопределено);
	СтруктураРеквизитов.Вставить("МодельДвигателя",        Неопределено);
	СтруктураРеквизитов.Вставить("МощностьДвигателяЛС",    Неопределено);
	СтруктураРеквизитов.Вставить("МощностьДвигателяКВт",   Неопределено);
	СтруктураРеквизитов.Вставить("СобственныйВес",         Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерДлина",  Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерВысота", Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерШирина", Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерДлина",    Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерВысота",   Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерШирина",   Неопределено);
	СтруктураРеквизитов.Вставить("Марка",                  Неопределено);
	
	СтруктураЗначенияРекв = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(Объект.Модель, СтруктураРеквизитов);
	
	Если ТипЗнч(СтруктураЗначенияРекв) = Тип("Структура") Тогда 
		Для Каждого ТекРекв Из СтруктураЗначенияРекв Цикл
			Объект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	Иначе
		Для Каждого ТекРекв Из СтруктураРеквизитов Цикл
			Объект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимость();
	ПриИзмененииВидаМоделиТС();
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСсылкуНаОбъектПоКлючу(ИмяСписка, ВыбраннаяСтрока, ФлагТС = Ложь, ФлагМодельВСоставе = Ложь)
	Если ИмяСписка = "СоставТС" Тогда
		Если ФлагТС Тогда
			Возврат ВыбраннаяСтрока.ТС;
		ИначеЕсли ФлагМодельВСоставе Тогда 
			СтуктураОтбора = Новый Структура("ТС", ВыбраннаяСтрока.ТС);
			Запись = РегистрыСведений.уатСоставТС.Получить(СтуктураОтбора); 
			Возврат Запись.ВСоставе.Модель;
		Иначе
			Возврат ВыбраннаяСтрока.ТС.Модель;
		КонецЕсли;
	ИначеЕсли ИмяСписка = "Агрегаты" Тогда
		Возврат ВыбраннаяСтрока.СерияНоменклатуры;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаМоделиТС()
	Если Объект.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") Тогда
		Объект.ОсновнойВидПЛ         = Неопределено;
		Объект.ОсновнойРежимРаботы   = Неопределено;
		Объект.ОсновноеУсловиеРаботы = Неопределено;
		Объект.ОсновнойВидПеревозки   = Неопределено;
		Объект.АвтоматическиСписыватьРасходТопливаНаЗапуск = Ложь;
		ОчиститьКоэффициентИзмененияНормТопливаТС(Объект.Ссылка);
		КоэффициентИзмененияНормТоплива = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьКоэффициентИзмененияНормТопливаТС(ТС)
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатСведенияОТС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТС.Установить(ТС);
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСтавкаТранспортногоНалога()
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Не ЗначениеЗаполнено(ВалютаРегл) Тогда
		ВалютаРегл = "руб";
	КонецЕсли;
	
	НадписьСтавкаТранспортногоНалога = ?(ЗначениеЗаполнено(СтавкаТранспортногоНалога), ""
		+ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтавкаТранспортногоНалога, "Ставка") + " (" + ВалютаРегл + ")", НСтр("en='not specified';ru='не указана'"));
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТранспортныйНалог()
	тблСреза = РегистрыСведений.уатСведенияОТС.СрезПоследних(НачалоГода(ТекущаяДата())-1, Новый Структура("ТС", Объект.Ссылка));
	Если тблСреза.Количество() > 0 Тогда
		НачислятьТранспортныйНалог = тблСреза[0].НачислятьТранспортныйНалог;
		СтавкаТранспортногоНалога = тблСреза[0].СтавкаТранспортногоНалога;
		НалоговаяБаза = тблСреза[0].НалоговаяБаза;
		ЕдиницаИзмеренияНалоговойБазы = тблСреза[0].ЕдиницаИзмеренияНалоговойБазы;
		ЭкологическийКласс = тблСреза[0].ЭкологическийКласс;
		
		ОбновитьНадписьСтавкаТранспортногоНалога();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуGPS()
	
	Если Объект.ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы._1СЦСМ") Тогда
		Элементы.СтраницыGPS.Видимость = Истина;
		Элементы.GPSобщее.Видимость = Ложь;
		Элементы.ИДвСистемеНавигации.Видимость = Ложь;
		Элементы.ЦСМ.Видимость = Истина;
		Элементы.СтраницыGPS.ТекущаяСтраница = Элементы.ЦСМ;
		
		ТекТерминал = ПрочитатьТерминал(Объект.Ссылка);
		Если ТекТерминал <> Неопределено Тогда
			Терминал = ТекТерминал;
		КонецЕсли;
		
		УстановитьКартинкиИконокОбъекта();
		ОбновитьЦветНастраиваемогоРевизита("МониторингЦветНадписиНаКарте", "МониторингЦветНадписиНаКартеЧисло");
		ОбновитьЦветНастраиваемогоРевизита("МониторингЦветМаршрута", "МониторингЦветМаршрутаЧисло");
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ИспользуемаяСистемаGPS) Тогда
		Элементы.СтраницыGPS.Видимость = Истина;
		Элементы.GPSобщее.Видимость = Истина;
		Элементы.ИДвСистемеНавигации.Видимость = Истина;
		Элементы.ЦСМ.Видимость = Ложь;
		Элементы.СтраницыGPS.ТекущаяСтраница = Элементы.GPSобщее;
		УстановитьВидимостьГПС();
		
	Иначе
		Элементы.СтраницыGPS.Видимость = Ложь;
		Элементы.ИДвСистемеНавигации.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ИспользоватьДанныеCANшиныОдометр.Видимость = Объект.ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm");
	Элементы.ИспользоватьДанныеCANшиныОдометр.Заголовок = "Использовать данные CAN-шины для получения пробега и значения одометра";
	Элементы.ИспользоватьДанныеCANшиныОдометр.Подсказка = "Использовать данные CAN-шины для получения пробега и значения одометра.";
	Элементы.УчетнаяЗаписьСистемыМониторинга.Видимость  = НЕ Объект.ИспользуемаяСистемаGPS = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы._1СЦСМ");
	
	НаименованиеДействия = "Справочник.уатТС.Форма.ФормаЭлемента.УстановитьСтраницуGPS";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
	уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(НаименованиеДействия,
		?(ТипЗнч(Объект.ИспользуемаяСистемаGPS) = Тип("Строка"), Объект.ИспользуемаяСистемаGPS,
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ИспользуемаяСистемаGPS, "НаименованиеПС")),, ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьТерминал(Ссылка)
	БылУстановленПривилегированныйРежим = Истина;
	Если Не ПривилегированныйРежим() Тогда
		БылУстановленПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	СтруктураПривязки = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Объект", Ссылка));
	
	Если НЕ БылУстановленПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Если СтруктураПривязки.ТерминалУстановлен = Истина Тогда
		Возврат СтруктураПривязки.Терминал;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьГПС()
	
	Если Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm
			ИЛИ Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon
			ИЛИ Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ Тогда 
		Элементы.НадписьЧасовойПояс.Видимость = Истина;
	Иначе 
		Элементы.НадписьЧасовойПояс.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.НадписьЧасовойПояс.Видимость Тогда 
		Если Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm Тогда 
			Omnicomm_ЧасовойПоясПоПодразделению = Ложь;
			Omnicomm_ЧасовойПояс = 3;
			
			ПараметрыOmnicomm = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Получить().Получить();
			Если Не ПараметрыOmnicomm = Неопределено Тогда 
				Если ПараметрыOmnicomm.Свойство("ЧасовойПоясПоПодразделению") Тогда
					Omnicomm_ЧасовойПоясПоПодразделению = ПараметрыOmnicomm.ЧасовойПоясПоПодразделению;
				КонецЕсли;
				
				Если ПараметрыOmnicomm.Свойство("ЧасовойПояс") Тогда
					Omnicomm_ЧасовойПояс = ПараметрыOmnicomm.ЧасовойПояс;
				КонецЕсли;
			КонецЕсли;
			
			Если Omnicomm_ЧасовойПоясПоПодразделению Тогда 
				Omnicomm_ЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
					Объект.Подразделение,
					ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm
				);
				
				НадписьЧасовойПояс = " " + НСтр("ru = 'по подразделению'") + " """ + Строка(Объект.Подразделение) + """: " 
					+ ?(Omnicomm_ЧасовойПояс < 0, "", "+") + Строка(Omnicomm_ЧасовойПояс);
				
			Иначе 
				НадписьЧасовойПояс = ": " + ?(Omnicomm_ЧасовойПояс < 0, "", "+") + Строка(Omnicomm_ЧасовойПояс);
			КонецЕсли;
			
		ИначеЕсли Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon Тогда  
			Wialon_ЧасовойПоясПоПодразделению = Ложь;
			Wialon_ЧасовойПояс = 3;
			
			ПараметрыWialon = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Получить().Получить();
			Если Не ПараметрыWialon = Неопределено Тогда 
				Если ПараметрыWialon.Свойство("ЧасовойПоясПоПодразделению") Тогда
					Wialon_ЧасовойПоясПоПодразделению = ПараметрыWialon.ЧасовойПоясПоПодразделению;
				КонецЕсли;
				
				Если ПараметрыWialon.Свойство("ЧасовойПояс") Тогда
					Wialon_ЧасовойПояс = ПараметрыWialon.ЧасовойПояс;
				КонецЕсли;
			КонецЕсли;
			
			Если Wialon_ЧасовойПоясПоПодразделению Тогда 
				Wialon_ЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
					Объект.Подразделение,
					ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиWialon
				);
				
				НадписьЧасовойПояс = " " + НСтр("ru = 'по подразделению'") + " """ + Строка(Объект.Подразделение) + """: " 
					+ ?(Wialon_ЧасовойПояс < 0, "", "+") + Строка(Wialon_ЧасовойПояс);
				
			Иначе 
				НадписьЧасовойПояс = ": " + ?(Wialon_ЧасовойПояс < 0, "", "+") + Строка(Wialon_ЧасовойПояс);
			КонецЕсли;
			
		ИначеЕсли Объект.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ Тогда  
			СКАУТ_ЧасовойПоясПоПодразделению = Ложь;
			СКАУТ_ЧасовойПояс = "Europe/Moscow";
			
			ПараметрыСКАУТ = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхСКАУТ.Получить().Получить();
			Если Не ПараметрыСКАУТ = Неопределено Тогда 
				Если ПараметрыСКАУТ.Свойство("ЧасовойПоясПоПодразделению") Тогда
					СКАУТ_ЧасовойПоясПоПодразделению = ПараметрыСКАУТ.ЧасовойПоясПоПодразделению;
				КонецЕсли;
				
				Если ПараметрыСКАУТ.Свойство("ЧасовойПояс") Тогда
					СКАУТ_ЧасовойПояс = ПараметрыСКАУТ.ЧасовойПояс;
				КонецЕсли;
			КонецЕсли;
			
			Если СКАУТ_ЧасовойПоясПоПодразделению Тогда 
				СКАУТ_ЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
					Объект.Подразделение,
					ПланыВидовХарактеристик.уатПраваИНастройки.ЧасовойПоясДляВзаимодействияСКАУТ
				);
				
				НадписьЧасовойПояс = " " + НСтр("ru = 'по подразделению'") + " """ + Строка(Объект.Подразделение) + """: " 
					+ Строка(СКАУТ_ЧасовойПояс);
				
			Иначе 
				НадписьЧасовойПояс = ": " + Строка(СКАУТ_ЧасовойПояс);
			КонецЕсли;
		Иначе 
			НадписьЧасовойПояс = "";
		КонецЕсли;
		
		НадписьЧасовойПояс = НСтр("ru = 'При загрузке данных будет использоваться настройка часового пояса'") + НадписьЧасовойПояс;
		
	Иначе 
		НадписьЧасовойПояс = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИсточникФактическихДанныхДляКартографии()
	
	Если Константы.уатИспользоватьМобильноеПриложениеВодителя.Получить() <> Истина Тогда
		Элементы.ИсточникФактическихДанныхДляКартографии.СписокВыбора.Удалить(
			Элементы.ИсточникФактическихДанныхДляКартографии.СписокВыбора.НайтиПоЗначению(
				Перечисления.уатИсточникФактическихДанныхДляКартографии.МобильноеПриложение));
		Элементы.НадписьМПНеИспользуется.Видимость = Истина;
	Иначе 
		Элементы.НадписьМПНеИспользуется.Видимость = Ложь;
	КонецЕсли;
	
	Если Константы.уатИспользоватьМониторинг.Получить() <> Истина Тогда
		Элементы.ИсточникФактическихДанныхДляКартографии.СписокВыбора.Удалить(
			Элементы.ИсточникФактическихДанныхДляКартографии.СписокВыбора.НайтиПоЗначению(
				Перечисления.уатИсточникФактическихДанныхДляКартографии.СистемаСпутниковогоМониторинга));
		Элементы.НадписьССМНеИспользуется.Видимость = Истина;
		Элементы.ГруппаGPSдоп.Видимость = Ложь;
		Элементы.ИспользуемаяСистемаGPS.Видимость = Ложь;
		Элементы.УчетнаяЗаписьСистемыМониторинга.Видимость = Ложь;
	Иначе 
		Элементы.НадписьССМНеИспользуется.Видимость = Ложь;
		Элементы.ГруппаGPSдоп.Видимость = Истина;
		Элементы.ИспользуемаяСистемаGPS.Видимость = Истина;
		Элементы.УчетнаяЗаписьСистемыМониторинга.Видимость = Истина;
	КонецЕсли;
	
	Если Элементы.ИсточникФактическихДанныхДляКартографии.СписокВыбора.Количество() = 1 Тогда 
		Элементы.ИсточникФактическихДанныхДляКартографии.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводВЭксплуатациюПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если Записать() Тогда 
				ПараметрыФормы = Новый Структура("ТС", Объект.Ссылка);
				ОткрытьФорму("Документ.уатВводВЭксплуатациюТСиОборудования.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникВводаВЭксплуатациюПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТранспортныйНалогЗавершение(ДополнительныеПараметры) Экспорт
    Заглушка = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючСтаройЗаписи(СтараяЗапись)
	Возврат РегистрыСведений.уатСведенияОТС.СоздатьКлючЗаписи(Новый Структура("Период, ТС", СтараяЗапись.Период, СтараяЗапись.ТС));
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураСрезаСведенийОТС(ТС, Знач ДатаСреза = Неопределено)
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	тблСрез = РегистрыСведений.уатСведенияОТС.СрезПоследних(ДатаСреза, Новый Структура("ТС", ТС));
	Если тблСрез.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		СтруктРез = Новый Структура("Период, ТС, СтавкаТранспортногоНалога, КоэффициентИзмененияНормТоплива, НачислятьТранспортныйНалог, НалоговаяБаза, ЕдиницаИзмеренияНалоговойБазы, ЭкологическийКласс, Комментарий");
		ЗаполнитьЗначенияСвойств(СтруктРез, тблСрез[0]);
		Возврат СтруктРез;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьНаименованиеСервер()
	
	СпрОб = РеквизитФормыВЗначение("Объект");
	Возврат уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатТС", СпрОб);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораИспользуемойСистемыМониторинга()
	Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Очистить();
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьOmnicomm") Тогда
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьWialon") Тогда
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьЦСМ") Тогда
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы._1СЦСМ"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьАвтоГРАФ") Тогда
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьСКАУТ") Тогда
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ"));
	КонецЕсли;
	МассивПСМ = Новый Массив();
	уатРаботаСРасширениями.ПСМ_ЗаполнитьМассивВнешихСистем(МассивПСМ);
	Для Каждого ТекСтрока Из МассивПСМ Цикл
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(ТекСтрока);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ИспользуемаяСистемаGPS)
		И Элементы.ИспользуемаяСистемаGPS.СписокВыбора.НайтиПоЗначению(Объект.ИспользуемаяСистемаGPS) = Неопределено Тогда
		Элементы.ИспользуемаяСистемаGPS.СписокВыбора.Добавить(Объект.ИспользуемаяСистемаGPS);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораИспользуемогоСервисаШтрафов()
	Элементы.ИспользуемыйСервисШтрафов.СписокВыбора.Очистить();
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьСервисШтрафовНет") Тогда
		Элементы.ИспользуемыйСервисШтрафов.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИспользуемыйСервисШтрафов)
		И Элементы.ИспользуемыйСервисШтрафов.СписокВыбора.НайтиПоЗначению(Объект.ИспользуемыйСервисШтрафов) = Неопределено Тогда
		Элементы.ИспользуемыйСервисШтрафов.СписокВыбора.Добавить(Объект.ИспользуемыйСервисШтрафов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВопросПомощникВводаВЭксплуатацию = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТС", Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФормы.Вставить("Колонна", Объект.Колонна);
		ПараметрыФормы.Вставить("ДатаВводаВЭксплуатацию", Объект.ДатаВводаВЭксплуатацию);
		ПараметрыФормы.Вставить("НачальныйПробег", Объект.НачальныйПробег);

		ОткрытьФорму("Справочник.уатТС.Форма.ПомощникВводаВЭксплуатацию", ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияШтрафов()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.Статус КАК Статус,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.ПричинаНеактивности КАК ПричинаНеактивности,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.ДатаПоследнейПроверкивГИС КАК ДатаПоследнейПроверкивГИС,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.ДатаПоследнейПроверкивГИБДД КАК ДатаПоследнейПроверкивГИБДД,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.ДатаПоследнейПроверкивДИТ КАК ДатаПоследнейПроверкивДИТ,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.ДатаДобавленияТС КАК ДатаДобавленияТС,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.КоличествоШтрафов КАК КоличествоШтрафов,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.СуммаЗадолженности КАК СуммаЗадолженности,
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.Автопарк КАК Автопарк
	               |ИЗ
	               |	РегистрСведений.уатИнформацияоТСпоДаннымСервисаШтрафов КАК уатИнформацияоТСпоДаннымСервисаШтрафов
	               |ГДЕ
	               |	уатИнформацияоТСпоДаннымСервисаШтрафов.ТС = &ТС";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Штрафы_Статус						 = Выборка.Статус;
		Штрафы_Автопарк						 = Выборка.Автопарк;
		Штрафы_ПричинаНеактивности			 = Выборка.ПричинаНеактивности;
		Штрафы_ДатаПоследнейПроверкивГИБДД	 = Выборка.ДатаПоследнейПроверкивГИБДД;
		Штрафы_ДатаПоследнейПроверкивГИС	 = Выборка.ДатаПоследнейПроверкивГИС;
		Штрафы_ДатаПоследнейПроверкивДИТ	 = Выборка.ДатаПоследнейПроверкивДИТ;
		Штрафы_ДатаДобавленияТС				 = Выборка.ДатаДобавленияТС;
		Штрафы_КоличествоШтрафов			 = Выборка.КоличествоШтрафов;
		Штрафы_СуммаЗадолженности			 = Выборка.СуммаЗадолженности;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьCистемыШтрафовПриИзменении(Элемент)
	Элементы.ШтрафыНЕТ_ОбновитьИнформацииОТС.Видимость = ЗначениеЗаполнено(Объект.УчетнаяЗаписьCервисаШтрафов)
	И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.УчетнаяЗаписьCервисаШтрафов, "ВнешняяСистема")
		= ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет");
	Элементы.ШтрафыНЕТ_ЗагрузитьШтрафы.Видимость = ЗначениеЗаполнено(Объект.УчетнаяЗаписьCервисаШтрафов)
	И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.УчетнаяЗаписьCервисаШтрафов, "ВнешняяСистема")
		= ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет");
КонецПроцедуры

&НаКлиенте
Процедура ШтрафыНЕТ_ОбновитьИнформацииОТС(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("ru='Перед обновлением информации о ТС в сервисе штрафов необходимо записать объект!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.УчетнаяЗаписьCервисаШтрафов)
		И ЗначениеЗаполнено(Объект.ИДвСервисеШтрафов) Тогда
		
		ТекстОшибки = "";
		
		уатИнтеграции_проф.ОбновитьИнформациюОТСВСервисеШтрафов(Объект.УчетнаяЗаписьCервисаШтрафов, Объект.Ссылка, Объект.ИДвСервисеШтрафов, ТекстОшибки);
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаполнитьЗначенияШтрафов();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШтрафыНЕТ_ЗагрузитьШтрафы(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("ru='Перед обновлением информации о ТС в сервисе штрафов необходимо записать объект!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗаписьCервисаШтрафов)
		И ЗначениеЗаполнено(Объект.ИДвСервисеШтрафов) Тогда
		
		ТекущийПериод = Новый СтандартныйПериод;
		
		Обработчик    = Новый ОписаниеОповещения("ЗагрузитьШтрафыЗавершениеПериод", ЭтотОбъект);
		Диалог        = Новый ДиалогРедактированияСтандартногоПериода;
		Диалог.Период = ТекущийПериод;
		Диалог.Показать(Обработчик);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметры(Команда)
	Если Объект.ТаблицаСоответствийДатчиков.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьПараметрыЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	ЗагрузитьПараметрыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметрыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаСоответствийДатчиков.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗагрузитьПараметрыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметрыФрагмент()

	СоответствиеКолонок	 = Новый Соответствие();
	ТекстОшибки			 = "";
	
	КодОтвета = уатМониторинг.АвтоГРАФ5_ЗагрузитьПараметры(Объект.ИДвСистемеНавигации, СоответствиеКолонок, ТекстОшибки, Объект.УчетнаяЗаписьСистемыМониторинга);
	Если ЗначениеЗаполнено(ТекстОшибки)Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СоответствиеКолонок Цикл
		ИскСтроки = Объект.ТаблицаСоответствийДатчиков.НайтиСтроки(Новый Структура("НаименованиеДатчика", ТекСтрока.Ключ));
		Если ИскСтроки.Количество() = 0 Тогда
			НоваяСтрока                     = Объект.ТаблицаСоответствийДатчиков.Добавить();
			НоваяСтрока.НаименованиеДатчика = ТекСтрока.Ключ;
			НоваяСтрока.ОписаниеДатчика     = ТекСтрока.Значение;
			Если НоваяСтрока.НаименованиеДатчика = "TotalDistance" 
				ИЛИ НоваяСтрока.НаименованиеДатчика = "Total1Distance" Тогда
				НоваяСтрока.НазначениеДатчика = "Пробег";
			ИначеЕсли НоваяСтрока.НаименованиеДатчика = "EngineMotohours" 
				ИЛИ НоваяСтрока.НаименованиеДатчика = "Engine1Motohours" Тогда
				НоваяСтрока.НазначениеДатчика = "Время работы двигателя";
			ИначеЕсли НоваяСтрока.НаименованиеДатчика = "EngineFuelConsum"
				ИЛИ НоваяСтрока.НаименованиеДатчика = "Engine1FuelConsum" Тогда
				НоваяСтрока.НазначениеДатчика = "Расход топлива";
			ИначеЕсли НоваяСтрока.НаименованиеДатчика = "TankFuelLevel Last" 
				ИЛИ НоваяСтрока.НаименованиеДатчика = "Tank1FuelLevel Last" Тогда
				НоваяСтрока.НазначениеДатчика = "Уровень топлива";
			ИначеЕсли НоваяСтрока.НаименованиеДатчика = "SummaryTankFuelLevelLast" Тогда
				НоваяСтрока.НазначениеДатчика = "Остаток топлива возврат";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	 Объект.ТаблицаСоответствийДатчиков.Сортировать("НазначениеДатчика УБЫВ, НаименованиеДатчика");
	
КонецПроцедуры

// ITOB +++
&НаКлиенте
Функция УстановитьЧисленноеПредставлениеЦвета(НовыйЦвет)
	
	Реузльтат = 0;
	УстановитьЦветСервер(НовыйЦвет, Реузльтат);
	
	Возврат Реузльтат;
	
КонецФункции

&НаСервере
Процедура УстановитьЦветСервер(ВыбранныйЦвет, ЦветДесятичный)
	
	АбсолютныйЦвет = ItobОбщегоНазначения.ПолучитьАбсолютныйЦвет(ВыбранныйЦвет); 
	ЦветДесятичный = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(АбсолютныйЦвет.Красный, 
																					АбсолютныйЦвет.Зеленый, 
																					АбсолютныйЦвет.Синий);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦветНастраиваемогоРевизита(ИмяНастраемогоРеквизита, ИмяРеквезитаХранение)
	
	Синий = Цел(ЭтотОбъект[ИмяРеквезитаХранение]/(256*256));
	Зеленый = Цел((ЭтотОбъект[ИмяРеквезитаХранение] - Синий*256*256)/256);
	Красный = ЭтотОбъект[ИмяРеквезитаХранение] - Синий*256*256 - Зеленый*256;
	
	ЭтотОбъект[ИмяНастраемогоРеквизита] = Новый Цвет(Красный, Зеленый, Синий);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкиИконокОбъекта()
	
	МониторингАдресДополнительнойИконки = ПолучитьНавигационнуюСсылку(МониторингДополнительнаяИконкаНаКарте, "Иконка");	
	МониторингАдресИконки = ПолучитьНавигационнуюСсылку(МониторингИконкаНаКарте, "Иконка")	
	
КонецПроцедуры
// ITOB ---

&НаКлиенте
Процедура ЗагрузитьШтрафыЗавершениеПериод(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала    = НачалоДня(Результат.ДатаНачала);
	ДатаОкончания = НачалоДня(Результат.ДатаОкончания);
		
	Загружено   = 0;	
	ЗагрузитьШтрафыЗавершениеСервер(ДатаНачала, ДатаОкончания, Загружено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтрафыЗавершениеСервер(ДатаНачала, ДатаОкончания, Загружено = 0)
	
	ТекстОшибки = "";

	ДлительнаяОперация = ЗагрузитьШтрафыЗавершениеДлительнаяОперацияСервер(ДатаНачала, ДатаОкончания, ТекстОшибки);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	НастройкиОжидания.ВыводитьОкноОжидания       = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьШтрафыЗавершениеДлительнаяОперацияЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтрафыЗавершениеДлительнаяОперацияЗавершение(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		
	Иначе
		Если Операция.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(Операция.АдресРезультата) Тогда
				Данные = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
				Если ТипЗнч(Данные) = Тип("Структура") Тогда
					Если Данные.Свойство("ТекстОшибки") Тогда
						Если ЗначениеЗаполнено(Данные.ТекстОшибки) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Данные.ТекстОшибки);
							Возврат;
						Иначе
							ОповеститьОбИзменении(Тип("ДокументСсылка.уатШтраф"));
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьШтрафыЗавершениеДлительнаяОперацияСервер(ДатаНачала, ДатаОкончания, ТекстОшибки)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка штрафов'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
	"уатИнтеграции_проф.ШтрафовНет_СписокШтрафовДлительнаяОперация",
	Новый Структура("УчетнаяЗапись, ИДвСервисеШтрафов, ТС, ДатаНачала, ДатаОкончания",
		Объект.УчетнаяЗаписьCервисаШтрафов, Объект.ИДвСервисеШтрафов, Объект.Ссылка, ДатаНачала, ДатаОкончания),
	ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Функция СтруктураЗаписиНормыГСМ(ТекСтрока)
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период", ТекСтрока.Период);
	СтруктураЗаписи.Вставить("Организация", ТекСтрока.Организация);
	СтруктураЗаписи.Вставить("МодельТС", ТекСтрока.МодельТС);
	СтруктураЗаписи.Вставить("ГСМ", ТекСтрока.ГСМ);
	СтруктураЗаписи.Вставить("РаботаНаДвухВидахТопливаОдновременно", ТекСтрока.РаботаНаДвухВидахТопливаОдновременно);
	
	Возврат СтруктураЗаписи;
КонецФункции

&НаСервереБезКонтекста
Функция КлючЗаписиНормыРасходаГСМ(СтруктураЗаписи)
	Возврат РегистрыСведений.уатНормыРасходаГСМ.СоздатьКлючЗаписи(СтруктураЗаписи);
КонецФункции

&НаКлиенте
Функция СтруктураЗаписиНормыТЖ(ТекСтрока)
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период", ТекСтрока.Период);
	СтруктураЗаписи.Вставить("МодельТС", ТекСтрока.МодельТС);
	СтруктураЗаписи.Вставить("ГСМ", ТекСтрока.ГСМ);
	
	Возврат СтруктураЗаписи;
КонецФункции

&НаСервереБезКонтекста
Функция КлючЗаписиНормыРасходаТЖ(СтруктураЗаписи)
	Возврат РегистрыСведений.уатНормыРасходаТехническихЖидкостей.СоздатьКлючЗаписи(СтруктураЗаписи);
КонецФункции

&НаКлиенте
Процедура ИзменитьНомерБортовогоУстройстваНажатие(НаименованиеСистемы)
			
	ПараметрыФормы = Новый Структура("Период, ТС, ОткрытаИзФормыТС", ТекущаяДата(), Объект.Ссылка, Истина);
	ДопПараметры = Новый Структура();
	
	
	Если НаименованиеСистемы = "Платон" Тогда
		ПараметрыФормы.Вставить("ВнешняяСистема", ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Платон"));
		ПараметрыФормы.Вставить("НомерБортовогоУстройства",  Объект.НомерБортовогоУстройстваПлатон);
		
		ДопПараметры.Вставить("ВнешняяСистема", ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Платон"));
	ИначеЕсли НаименованиеСистемы = "Автодор" Тогда
		ПараметрыФормы.Вставить("ВнешняяСистема", ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Автодор"));
		ПараметрыФормы.Вставить("НомерБортовогоУстройства", Объект.НомерБортовогоУстройстваАвтодор);
		
		ДопПараметры.Вставить("ВнешняяСистема", ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Автодор"));
	КонецЕсли;
	
	ОповещениеОСменеНомераУстройства = Новый ОписаниеОповещения("ИзменитьНомерБортовогоУстройстваПродолжение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("РегистрСведений.уатИсторияЗакрепленияБортовыхУстройств.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОСменеНомераУстройства, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерБортовогоУстройстваПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	СтруктураИстории	 = ОбновитьДанныеОНомереУстройства(Объект.Ссылка, ДополнительныеПараметры.ВнешняяСистема);
	Если СтруктураИстории.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Платон") Тогда
		Объект.НомерБортовогоУстройстваПлатон = СтруктураИстории.НомерБортовогоУстройства;
	ИначеЕсли СтруктураИстории.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Автодор") Тогда
		Объект.НомерБортовогоУстройстваАвтодор = СтруктураИстории.НомерБортовогоУстройства;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДанныеОНомереУстройства(ТС, ВнешняяСистема)
	ИсторияЗакрепленияБортовыхУстройствСрезПоследних = Новый Структура("ВнешняяСистема, НомерБортовогоУстройства", Справочники.уатВнешниеСистемы.ПустаяСсылка(), "");
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатИсторияЗакрепленияБортовыхУстройствСрезПоследних.ВнешняяСистема КАК ВнешняяСистема,
	               |	уатИсторияЗакрепленияБортовыхУстройствСрезПоследних.НомерБортовогоУстройства КАК НомерБортовогоУстройства
	               |ИЗ
	               |	РегистрСведений.уатИсторияЗакрепленияБортовыхУстройств.СрезПоследних(
	               |			&Дата,
	               |			ТС = &ТС
	               |				И ВнешняяСистема = &ВнешняяСистема) КАК уатИсторияЗакрепленияБортовыхУстройствСрезПоследних";
	
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("Дата",  ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИсторияЗакрепленияБортовыхУстройствСрезПоследних.ВнешняяСистема = Выборка.ВнешняяСистема;
		ИсторияЗакрепленияБортовыхУстройствСрезПоследних.НомерБортовогоУстройства = Выборка.НомерБортовогоУстройства;
	КонецЕсли;
	
	Возврат ИсторияЗакрепленияБортовыхУстройствСрезПоследних;
	
КонецФункции

&НаСервере
Процедура ИсторияЗакрепленияБортовыхУстройствЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураИсторииПлатон	 = ОбновитьДанныеОНомереУстройства(Объект.Ссылка, Справочники.уатВнешниеСистемы.Платон);
	Если Объект.Ссылка.НомерБортовогоУстройстваПлатон <> СтруктураИсторииПлатон.НомерБортовогоУстройства Тогда
		Объект.НомерБортовогоУстройстваПлатон = СтруктураИсторииПлатон.НомерБортовогоУстройства;
		Модифицированность = Истина;
	КонецЕсли;
	
	СтруктураИсторииАвтодор  = ОбновитьДанныеОНомереУстройства(Объект.Ссылка, Справочники.уатВнешниеСистемы.Автодор);
	Если Объект.Ссылка.НомерБортовогоУстройстваАвтодор <> СтруктураИсторииАвтодор.НомерБортовогоУстройства Тогда	
		Объект.НомерБортовогоУстройстваАвтодор = СтруктураИсторииАвтодор.НомерБортовогоУстройства;	
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПоДаннымГИБДДНаСервере(VIN, Капча, ТекстОшибки)
	
	ДанныеТС = уатИнтеграции_проф.ГИБДД_ПолучитьИсториюРегистрацииТС(VIN, Капча, ТекстОшибки);
	Возврат ДанныеТС;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоДаннымГИБДД(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеКапчи", ЭтотОбъект);
	ПараметрыОткрытия  = Новый Структура();
	
	ОткрытьФорму("Документ.уатДТП.Форма.ФормаКапчи", ПараметрыОткрытия,ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеКапчи(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Капча       = Новый Структура();
	Капча.Вставить("captchaToken", Результат.captchaToken);
	Капча.Вставить("captchaWord",  Результат.captchaWord);
	
	ДанныеТС  = ЗаполнитьПоДаннымГИБДДНаСервере(Объект.VIN, Капча, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
	 	ТекстНСТР = НСтр("ru = 'Онлайн сервисы ГИББД недоступны в данный момент.
		|Повторите попытку позже или выполните запрос по ссылке в браузере и вручную скопируйте результат запроса в программу'");
		
		ТекстПредупреждения = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Онлайн сервисы ГИББД недоступны в данный момент.'"),
		Символы.ПС,
		НСтр("ru = 'Повторите попытку позже или выполните запрос по '"),
		Новый ФорматированнаяСтрока(НСтр("ru='ссылке в браузере'"),,,, "https://гибдд.рф/check/auto#" + Объект.VIN),
		НСтр("ru = ' и вручную скопируйте результат запроса в программу.'")
		);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекМодель = Объект.Модель;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеТС);
	
	ЗаполненыРеквизиты = "";
	Если ДанныеТС.Свойство("Модель") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Модель",
		ЗаполненыРеквизиты + ", " + "Модель");
		
		Если ТекМодель <> ДанныеТС.Модель Тогда
			ЗаполнитьРеквизитыТСПоМоделиТС(Новый ОписаниеОповещения("МодельПриИзмененииЗавершение", ЭтотОбъект));
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеТС.Свойство("МодельСоздана")
		И ДанныеТС.МодельСоздана Тогда
		Если ДанныеТС.Свойство("МодельТипТС") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Тип ТС",
			ЗаполненыРеквизиты + ", " + "Тип ТС");
		КонецЕсли;
	КонецЕсли;

	Если ДанныеТС.Свойство("ГодВыпуска") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Год выпуска",
		ЗаполненыРеквизиты + ", " + "Год выпуска");
	КонецЕсли;
	Если ДанныеТС.Свойство("НомерШасси") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Номер шасси",
		ЗаполненыРеквизиты + ", " + "Номер шасси");
	КонецЕсли;
	Если ДанныеТС.Свойство("НомерКузова") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Номер кузова",
		ЗаполненыРеквизиты + ", " + "Номер кузова");
	КонецЕсли;
	Если ДанныеТС.Свойство("НомерДвигателя") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Номер двигателя",
		ЗаполненыРеквизиты + ", " + "Номер двигателя");
	КонецЕсли;
	Если ДанныеТС.Свойство("ЦветКузова") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Цвет кузова",
		ЗаполненыРеквизиты + ", " + "Цвет кузова");
	КонецЕсли;
	Если ДанныеТС.Свойство("МощностьДвигателяКВт") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Мощность двигателя, кВт.",
		ЗаполненыРеквизиты + ", " + "Мощность двигателя, кВт.");
	КонецЕсли;
	Если ДанныеТС.Свойство("МощностьДвигателяЛС") Тогда
		ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Мощность двигателя (л.с.)",
		ЗаполненыРеквизиты + ", " + "Мощность двигателя (л.с.)");
	КонецЕсли;
	Если ДанныеТС.Свойство("МодельСоздана") 
		И ДанныеТС.МодельСоздана Тогда
		Если ДанныеТС.Свойство("РабочийОбъемДвигателя") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Рабочий объем двигателя",
			ЗаполненыРеквизиты + ", " + "Рабочий объем двигателя");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаполненыРеквизиты) Тогда
		ТекстНСТР = СтрШаблон(НСтр("ru='Заполнены реквизиты: %1'"), ЗаполненыРеквизиты);
	Иначе
		ТекстНСТР = НСтр("ru='Реквизиты не заполнены. Проверьте корректность VIN'");
	КонецЕсли;
	ПоказатьПредупреждение(,ТекстНСТР);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиMultiGoПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НастройкиMultiGo.Очистить();
	КонецЕсли;
	
	ЗагрузитьНастройкиMultiGoСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиMultiGoСервер()
	МакетДанных = Справочники.уатТС.ПолучитьМакет("НастройкиMultiGo");
	КолСтрок    = МакетДанных.ВысотаТаблицы;
	Для Сч = 1 По КолСтрок Цикл
		НоваяСтрока = Объект.НастройкиMultiGo.Добавить();
		НоваяСтрока.Наименование = МакетДанных.Область(сч,1,сч,1).Текст;
		НоваяСтрока.ПараметрAPI  = МакетДанных.Область(сч,2,сч,2).Текст;
		НоваяСтрока.Описание     = МакетДанных.Область(сч,5,сч,5).Текст;
		Значение                 = МакетДанных.Область(сч,3,сч,3).Текст;

		ТипЗначения = МакетДанных.Область(сч,4,сч,4).ТипЗначения;
		Если Тип(ТипЗначения) = Тип("Булево") Тогда
			НоваяСтрока.Значение = ?(Значение = "Истина", Истина, Ложь);
		ИначеЕсли Тип(ТипЗначения) = Тип("Число") Тогда
			Попытка
				НоваяСтрока.Значение = Число(Значение);
			Исключение
				НоваяСтрока.Значение = 0;
			КонецПопытки;
		Иначе
			НоваяСтрока.Значение = Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное;
		Объект.ВладелецТС = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент();
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатСоставТС.ТС КАК ТС,
		|	уатСоставТС.ВСоставе КАК ВСоставе
		|ИЗ
		|	РегистрСведений.уатСоставТС КАК уатСоставТС
		|ГДЕ
		|	уатСоставТС.ВСоставе = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Прицеп = Выборка.ТС;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСоставТС.ТС КАК ТС,
	|	уатСоставТС.ВСоставе КАК ВСоставе
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ВСоставе = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.уатСоставТС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТС = Выборка.ТС;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Прицеп) Тогда
		МенеджерЗаписи = РегистрыСведений.уатСоставТС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТС = Прицеп;
		МенеджерЗаписи.ВСоставе = Объект.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	ЗаполнитьРеквизитыТСПоМоделиТС();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВладелецТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Объект.ВладелецТС;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
	Если ЗначениеЗаполнено(Объект.ВладелецТС) Тогда
		СтруктураОтбора.Вставить("ВладелецТС", Объект.ВладелецТС);
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.ВладелецТС) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.ВладелецТС);
		КонецЕсли;
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьНаименование(Команда)
	
	Объект.Наименование   = СформироватьНаименованиеСервер();
	НаименованиеПоШаблону = Объект.Наименование;
	Модифицированность  = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьНаименованиеСервер()
	
	СпрОб = РеквизитФормыВЗначение("Объект");
	Возврат уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатТС", СпрОб);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоМоделиТС()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипТС",                  Неопределено);
	СтруктураРеквизитов.Вставить("ВидМоделиТС",            Неопределено);
	СтруктураРеквизитов.Вставить("МодельДвигателя",        Неопределено);
	СтруктураРеквизитов.Вставить("МощностьДвигателяЛС",    Неопределено);
	СтруктураРеквизитов.Вставить("МощностьДвигателяКВт",   Неопределено);
	СтруктураРеквизитов.Вставить("СобственныйВес",         Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерДлина",  Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерВысота", Неопределено);
	СтруктураРеквизитов.Вставить("ГабаритныйРазмерШирина", Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерДлина",    Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерВысота",   Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерШирина",   Неопределено);
	СтруктураРеквизитов.Вставить("Марка",                  Неопределено);
	
	СтруктураЗначенияРекв = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(Объект.Модель, СтруктураРеквизитов);
	
	Если ТипЗнч(СтруктураЗначенияРекв) = Тип("Структура") Тогда 
		Для Каждого ТекРекв Из СтруктураЗначенияРекв Цикл
			Объект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	Иначе
		Для Каждого ТекРекв Из СтруктураРеквизитов Цикл
			Объект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ПриИзмененииВидаМоделиТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаМоделиТС()
	Если Объект.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") Тогда
		Объект.ОсновнойВидПЛ          = Неопределено;
		Объект.ОсновнойРежимРаботы    = Неопределено;
		Объект.ОсновноеУсловиеРаботы  = Неопределено;
		Объект.ОсновнойВидПеревозки   = Неопределено;
		Объект.АвтоматическиСписыватьРасходТопливаНаЗапуск = Ложь;
		ОчиститьКоэффициентИзмененияНормТопливаТС(Объект.Ссылка);
		КоэффициентИзмененияНормТоплива = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьКоэффициентИзмененияНормТопливаТС(ТС)
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатСведенияОТС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТС.Установить(ТС);
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СервисПарковок") Тогда
		Объект.СервисПарковок    = Параметры.СервисПарковок;
	КонецЕсли;

	Элементы.Автопарк.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Объект.Автопарк) Тогда
		Элементы.Автопарк.СписокВыбора.Добавить(Объект.IDАвтопарка, Объект.Автопарк);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаПоследнегоОбмена = НачалоДня(НачалоДня(ТекущаяДата())-1);
	КонецЕсли;
	Элементы.ФормаЛогированиеЗапросов.Пометка = Объект.ЛогированиеЗапросов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СервисПарковокПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если Объект.СервисПарковок = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Паркоматика") Тогда
		ПроверитьПодключениеПаркоматика();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроксиСервера(Команда)
	
	ПараметрыФормы = Неопределено;
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		ПараметрыФормы = Новый Структура("НастройкаПроксиНаКлиенте", Истина);
	КонецЕсли;
	
	ПолучениеФайловИзИнтернетаКлиент.ОткрытьФормуПараметровПроксиСервера(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеЗапросов(Команда)
	Элементы.ФормаЛогированиеЗапросов.Пометка = НЕ Элементы.ФормаЛогированиеЗапросов.Пометка;
	Объект.ЛогированиеЗапросов                = НЕ Объект.ЛогированиеЗапросов;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресПоУмолчанию(Команда)
	Объект.АдресСервиса = Элементы.АдресСервиса.ПодсказкаВвода;
КонецПроцедуры

&НаКлиенте
Процедура АвтопаркОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.Автопарк = Элементы.Автопарк.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура АвтопаркНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service штрафов.';ru='Необходимо указать адрес сервиса парковок.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КлючАвторизации) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо заполнить ключ авторизации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.КлючАвторизации");
		Возврат;
	КонецЕсли;

	Если НЕ ПодключениеКПаркоматикаДоступно() Тогда 
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтопаркОчистка(Элемент, СтандартнаяОбработка)
	Объект.IDАвтопарка = "";
	Объект.Автопарк    = "";
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьПодключениеПаркоматика()
	
	ТекстОшибки = "";
	ОшибкаЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service штрафов.';ru='Необходимо указать адрес сервиса парковок.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КлючАвторизации) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо заполнить ключ авторизации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.КлючАвторизации",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключениеКПаркоматикаДоступно() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Функция ПодключениеКПаркоматикаДоступно()
	
	ТекстОшибки = "";
	
	СписокАвтопарков = уатИнтеграции_проф.Паркоматика_СписокАвтопарков(Объект, ТекстОшибки);
	Элементы.Автопарк.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Для Каждого ТекАвтосервис Из СписокАвтопарков Цикл
			IDАвтопарк            = ТекАвтосервис.Значение;
			НаименованиеАвтопарка = ТекАвтосервис.Представление;
			Элементы.Автопарк.СписокВыбора.Добавить(IDАвтопарк, НаименованиеАвтопарка);
		КонецЦикла;
		Возврат Истина;
	Иначе 
		ПоказатьПредупреждение(,ТекстОшибки); 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.СервисПарковок = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Паркоматика") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = Нстр("en = 'https://api.parkomatica.ru'; ru = 'https://api.parkomatica.ru'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


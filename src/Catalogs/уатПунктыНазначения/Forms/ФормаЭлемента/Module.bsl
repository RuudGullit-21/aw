
#Область ПеременныеФормы

&НаКлиенте
Перем СтрокаПолученияПодсказкиАдреса; // Хранит строку, по которой выполнялся поиск в сервисе подсказок по адресам
&НаКлиенте
Перем СписокПодсказокАдреса; // Хранит подсказки, полученные в сервисе подсказок по адресам

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда 
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			ЗначенияПолейКИ_ = ПолучитьЗначенияПолейКИ(Параметры.ЗначениеКопирования);
			Если ТипЗнч(ЗначенияПолейКИ_) = Тип("Строка") Тогда
				ЗначенияПолей = ЗначенияПолейКИ_;
			КонецЕсли;
		КонецЕсли;
		ИнтервалВремениДляПоискаКоординат = Дата(1,1,1,12,0,0);
		УстановитьЗначениеРадиусПоискаПоНастройкамПользователя();
	Иначе 
		ЗначенияПолейКИ_ = ПолучитьЗначенияПолейКИ(Объект.Ссылка);
		Если ТипЗнч(ЗначенияПолейКИ_) = Тип("Строка") Тогда
			ЗначенияПолей = ЗначенияПолейКИ_;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипПункта) Тогда
		Объект.ТипПункта = Справочники.уатТипыПунктов.Адрес;
		ТипПунктаПриИзмененииСервер();
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.уатПунктыНазначения) Тогда 
		Элементы.ГруппаКоординатыКоманды.Видимость  = Ложь;
		Элементы.ИзменитьКоординатыСоседнихПунктов.Доступность = Ложь;
		Элементы.ОпределитьГеозону.Доступность = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТерминалыПункта,
		"Владелец",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		"Отбор_Владелец",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	ОбновитьНадписьРазрешенныеТипыТС();
	уатЭлектронныеКартыСервер.УстановитьСписокВыбораЦветовВПоле(Элементы.ЦветНаКарте);

	Если Объект.Ссылка.Пустая() Тогда
		УстановитьСлучайныйЦветПункта();
		ОбновлятьПривязкуКГеозонамПриЗаписи = Истина;
	КонецЕсли;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Элементы.ГруппаГеозона.Видимость = Ложь;
	КонецЕсли;
		
	Элементы.ДоставкаВМонопаллетах.Доступность = Объект.ДоставкаВПаллетах;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	НаименованиеПоШаблону = СформироватьНаименованиеСервер();
	
	ВосстановитьНастройки();
	ЗаполнитьРасписаниеРейсов();
	
	ТипПоставщика = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
	Если ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда
		ИспользоватьПодсказкиАдресов = Истина;
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите текст для поиска адреса в DaData'");
		Элементы.Адрес.ПодсказкаВвода = НСтр("ru = 'Введите текст для поиска адреса в DaData'");
	ИначеЕсли ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда
		ИспользоватьПодсказкиАдресов = Истина;
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите текст для поиска адреса в Яндекс'");
		Элементы.Адрес.ПодсказкаВвода = НСтр("ru = 'Введите текст для поиска адреса в Яндекс'");
	ИначеЕсли ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда
		ИспользоватьПодсказкиАдресов = Истина;
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите текст для поиска адреса в OSM'");
		Элементы.Адрес.ПодсказкаВвода = НСтр("ru = 'Введите текст для поиска адреса в OSM'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьРасстояния();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ОбновитьРасстояния();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ЗначенияПолейАдреса = Новый ХранилищеЗначения(ЗначенияПолей, Новый СжатиеДанных(9));
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не Объект.ЭтоГруппа Тогда
		Если ЗначениеЗаполнено(Объект.Наименование)
			И Объект.Наименование = НаименованиеПоШаблону 
			И НЕ ВопросСформироватьНаименование Тогда
			
			НовоеНаименование              = СформироватьНаименованиеСервер();
			Если НовоеНаименование <> НаименованиеПоШаблону Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, НовоеНаименование), "Измененить наименование на новое по шаблону?",
				РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Нет);
			Иначе
				ВопросСформироватьНаименование = Истина;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = СформироватьНаименованиеСервер();
			Модифицированность             = Истина;
			ВопросСформироватьНаименование = Истина;
		КонецЕсли;
	Иначе
		ВопросСформироватьНаименование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "УказаниеКоординатНаКарте" 
		Или (ИмяСобытия = "ЭлектронныеКарты_ЗаписьКоординатПункта" И Источник = Объект.Ссылка) Тогда 
		Если ТолькоПросмотр Тогда
			ТекстНСТР = НСтр("en='No rights to change coordinates.';ru='Недостаточно прав для изменения координат.'");
			ПоказатьОповещениеПользователя(
				НСтр("en='Set coordinates';ru='Установка координат'"),
				, 
				ТекстНСТР, 
				БиблиотекаКартинок.Информация32
			);
			Возврат;
		КонецЕсли;
		
		Объект.Лат = Параметр.Лат;
		Объект.Лон = Параметр.Лон;
		
		ТекстНСТР = НСтр("en='The coordinates of the point ""%1"" are set.';ru='Координаты пункта ""%1"" установлены.'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Наименование);
		ПоказатьОповещениеПользователя(
			НСтр("en='Coordinates set';ru='Координаты установлены'"),
			, 
			ТекстНСТР, 
			БиблиотекаКартинок.Информация32
		);
		Модифицированность = Истина;
		Прочитать();
		
		ОпределитьГеозону(Неопределено);
		Объект.ПробегВнеГеозоны = ПолучитьПробегВнеГеозоны(Объект.Лат, Объект.Лон);
	ИначеЕсли (ИмяСобытия = "ВыборКоординатПункта" И Источник = Объект.Ссылка) Тогда
		Объект.Лат = Параметр.Лат;
		Объект.Лон = Параметр.Лон;
		Модифицированность = Истина;
		ОпределитьГеозону(Неопределено);
		Объект.ПробегВнеГеозоны = ПолучитьПробегВнеГеозоны(Объект.Лат, Объект.Лон);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	#Если Клиент Тогда
		Оповестить("ЗаписанЭлементСправочникаПунктыНазначения", Объект.Ссылка, ЭтотОбъект);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТерминалыПункта,
		"Владелец",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		"Отбор_Владелец",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	ОбновитьНадписьРазрешенныеТипыТС();
	ПрочитатьГеозонуПункта();
	
	ЗаполнитьРасписаниеРейсов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТерминалыПункта,
		"Владелец",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		"Отбор_Владелец",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	ОбновитьНадписьРазрешенныеТипыТС();
	Если НЕ ПараметрыЗаписи.Свойство("НеОбновлятьПривязкуКГеозонам") Тогда
		ОбновитьПривязкуПунктаКГеозонамПриЗаписи(ТекущийОбъект);
		ПрочитатьГеозонуПункта();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ВопросСформироватьНаименование 
		И ЗначениеЗаполнено(Объект.Наименование)
		И Объект.Наименование = НаименованиеПоШаблону Тогда
		СтандартнаяОбработка			 = Ложь;
		ЗавершениеРаботы				 = Ложь;
		Отказ							 = Истина;
		ВопросСформироватьНаименование	 = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	уатОбщегоНазначенияТиповыеКлиент.ПредставлениеНачалоВыбораПунктаНазначения(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;                          
		Если ВыбранноеЗначение.Свойство("Город") И ВыбранноеЗначение.Свойство("Улица") 
			И ВыбранноеЗначение.Свойство("Дом") И ВыбранноеЗначение.Свойство("Корпус") Тогда 
			
			Адрес = "";
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Город) Тогда
				Адрес = Адрес + ВыбранноеЗначение.Город + ", ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Улица) Тогда
				Адрес = Адрес + ВыбранноеЗначение.Улица + ", ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыбранноеЗначение.дом) Тогда
				Адрес = Адрес + ВыбранноеЗначение.дом + ", ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Корпус) Тогда
				Адрес = Адрес + НСтр("en='Corp.';ru='корп.'") + " " + ВыбранноеЗначение.Корпус + ", ";
			КонецЕсли;
			Если ЗначениеЗаполнено(Адрес) Тогда
				Адрес = Лев(Адрес, СтрДлина(Адрес) - 2);
			КонецЕсли;
			
			Объект.Адрес = Адрес;
				
			
		ИначеЕсли ВыбранноеЗначение.Свойство("Лат") И ВыбранноеЗначение.Свойство("Лон") Тогда
			
			Объект.Лат = ВыбранноеЗначение.Лат;
			Объект.Лон = ВыбранноеЗначение.Лон;
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Адрес) тогда
				Ответ = КодВозвратаДиалога.Нет;
				Если ЗначениеЗаполнено(Объект.Адрес) тогда
					ПоказатьВопрос(Новый ОписаниеОповещения("АдресОбработкаВыбораЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение)), "Поле адрес не пусто. Установить адрес выбранной точки?",
						РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Нет);
					Возврат;
				Иначе
					Ответ = КодВозвратаДиалога.Да;
				КонецЕсли;
				АдресОбработкаВыбораФрагмент(ВыбранноеЗначение, Ответ);

			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Модифицированность = Истина;
		Попытка
			СтандартнаяОбработка = Ложь;
			#Если ВебКлиент Тогда
				СтруктураПодсказки = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
			#Иначе
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
				СтруктураПодсказки = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
			#КонецЕсли
			Объект.Адрес = СтруктураПодсказки.ПредставлениеАдреса;
			Объект.Лат = СтруктураПодсказки.Широта;
			Объект.Лон = СтруктураПодсказки.Долгота;
			Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
				Объект.Наименование = СтруктураПодсказки.ПредставлениеАдреса;
			КонецЕсли;
			Если СтруктураПодсказки.Свойство("ЗначениеАдреса") Тогда
				Объект.ЗначениеАдреса = СтруктураПодсказки.ЗначениеАдреса;
			Иначе
				Объект.ЗначениеАдреса = ЗначениеАдресаВСвободнойФорме(СтруктураПодсказки.ПредставлениеАдреса);
			КонецЕсли;
			Если СтруктураПодсказки.Свойство("Страна") Тогда
				Объект.Страна = уатОбщегоНазначенияТиповыеСервер.ПолучитьСтрануИзНаименования(СтруктураПодсказки.Страна);
			Иначе
				Объект.Страна = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
			КонецЕсли;
		Исключение
			Объект.Адрес = ВыбранноеЗначение;
			Объект.ЗначениеАдреса = ЗначениеАдресаВСвободнойФорме(ВыбранноеЗначение);
			Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
				Объект.Наименование = ВыбранноеЗначение;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
	
	
	Ответ = РезультатВопроса;
	
	АдресОбработкаВыбораФрагмент(ВыбранноеЗначение, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбораФрагмент(Знач ВыбранноеЗначение, Знач Ответ)
	
	Если Ответ = КодВозвратаДиалога.Да тогда
		Объект.Адрес = ВыбранноеЗначение.Адрес;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст)
		И ТипЗнч(СтрокаПолученияПодсказкиАдреса) = Тип("Строка")
		И ТипЗнч(СписокПодсказокАдреса) = Тип("СписокЗначений")
		И СокрЛП(Текст) = СокрЛП(СтрокаПолученияПодсказкиАдреса)
		И СписокПодсказокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПодсказокАдреса.Скопировать();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ИспользоватьПодсказкиАдресов И Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = "";
		ДанныеВыбора = уатЭлектронныеКартыКлиент.ПолучитьПодсказкиПоАдресу(Текст, ТекстОшибки);
		ДанныеВыбора.Добавить(Текст,,, БиблиотекаКартинок.УровеньДоступаРедактирование);
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		СтрокаПолученияПодсказкиАдреса = Текст;
		СписокПодсказокАдреса = ДанныеВыбора.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	Объект.ЗначениеАдреса = ЗначениеАдресаВСвободнойФорме(Объект.Адрес);
КонецПроцедуры

&НаКлиенте
Процедура ТипПунктаПриИзменении(Элемент)
	
	ТипПунктаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаВПаллетахПриИзменении(Элемент)
	
	Если Не Объект.ДоставкаВПаллетах Тогда 
		Объект.ДоставкаВМонопаллетах = Ложь;
	КонецЕсли;
	
	Элементы.ДоставкаВМонопаллетах.Доступность = Объект.ДоставкаВПаллетах;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ШифрПункта) И ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.ШифрПункта = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст)
		И ТипЗнч(СтрокаПолученияПодсказкиАдреса) = Тип("Строка")
		И ТипЗнч(СписокПодсказокАдреса) = Тип("СписокЗначений")
		И СокрЛП(Текст) = СокрЛП(СтрокаПолученияПодсказкиАдреса)
		И СписокПодсказокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПодсказокАдреса.Скопировать();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ИспользоватьПодсказкиАдресов И Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = "";
		ДанныеВыбора = уатЭлектронныеКартыКлиент.ПолучитьПодсказкиПоАдресу(Текст, ТекстОшибки);
		ДанныеВыбора.Добавить(Текст,,, БиблиотекаКартинок.УровеньДоступаРедактирование);
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		СтрокаПолученияПодсказкиАдреса = Текст;
		СписокПодсказокАдреса = ДанныеВыбора.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Попытка
			СтандартнаяОбработка = Ложь;
			#Если ВебКлиент Тогда
				СтруктураПодсказки = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
			#Иначе
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
				СтруктураПодсказки = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
			#КонецЕсли
			Объект.Адрес = СтруктураПодсказки.ПредставлениеАдреса;
			Объект.Наименование = СтруктураПодсказки.ПредставлениеАдреса;
			Объект.Лат = СтруктураПодсказки.Широта;
			Объект.Лон = СтруктураПодсказки.Долгота;
			Если СтруктураПодсказки.Свойство("ЗначениеАдреса") Тогда
				Объект.ЗначениеАдреса = СтруктураПодсказки.ЗначениеАдреса;
			Иначе
				Объект.ЗначениеАдреса = ЗначениеАдресаВСвободнойФорме(СтруктураПодсказки.ПредставлениеАдреса);
			КонецЕсли;
			Если СтруктураПодсказки.Свойство("Страна") Тогда
				Объект.Страна = уатОбщегоНазначенияТиповыеСервер.ПолучитьСтрануИзНаименования(СтруктураПодсказки.Страна);
			Иначе
				Объект.Страна = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
			КонецЕсли;
		Исключение
			Объект.Наименование = ВыбранноеЗначение;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаСоседниеПункты Тогда
		ПолучитьСоседниеПункты(Объект.Лат, Объект.Лон, Объект.РадиусПоиска);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГеозонаПунктаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Перед ручной установой геозоны необходимо записать элемент");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГеозонаПунктаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПривязатьПунктКГеозоне(ВыбранноеЗначение);
	
	ОбновлятьПривязкуКГеозонамПриЗаписи = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЛатПриИзменении(Элемент)
	ОбновлятьПривязкуКГеозонамПриЗаписи = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЛонПриИзменении(Элемент)
	ОбновлятьПривязкуКГеозонамПриЗаписи = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовТолькоДействующиеПриИзменении(Элемент)
	ЗаполнитьРасписаниеРейсов();
КонецПроцедуры

&НаКлиенте
Процедура СтоянкаПРПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.СтоянкаПР);
КонецПроцедуры

&НаКлиенте
Процедура СтоянкаПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.СтоянкаДоп);
КонецПроцедуры

&НаКлиенте
Процедура РазрешенныеТипыТССтоянкаДопПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РазрешенныеТипыТС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.СтоянкаДоп);

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_РасстоянияМеждуПунктами

&НаКлиенте
Процедура РасстоянияМеждуПунктамиТаблицаРасстоянийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	РедактироватьЗапись(Неопределено, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасстоянияМеждуПунктамиТаблицаРасстоянийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	РедактироватьЗапись(Элемент.ТекущиеДанные.Пункт, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасстоянияМеждуПунктамиТаблицаРасстоянийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если НужноУдалитьЗапись(Элемент.ТекущиеДанные.Пункт, Объект.Ссылка) Тогда 
		ОтветНаВопрос = Неопределено;
		
		ТекстНСТР = НСтр("en='Delete a record?';ru='Удалить запись?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РасстоянияМеждуПунктамиТаблицаРасстоянийПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РасстоянияМеждуПунктамиТаблицаРасстоянийПередУдалениемФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РасстоянияМеждуПунктамиТаблицаРасстоянийПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос  = КодВозвратаДиалога.Да Тогда
		УдалитьЗаписьТаблицаРасстояний(Элемент.ТекущиеДанные.Пункт, Объект.Ссылка);
	КонецЕсли;
	
	РасстоянияМеждуПунктамиТаблицаРасстоянийПередУдалениемФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РасстоянияМеждуПунктамиТаблицаРасстоянийПередУдалениемФрагмент()
	
	ОбновитьРасстояния();

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТерминалыПункта

&НаКлиенте
Процедура ТерминалыПунктаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Или Модифицированность Тогда 
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Владелец",    Элемент);
		ДополнительныеПараметры.Вставить("Ключ",        Элемент.ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("Добавление",  Истина); 
		ДополнительныеПараметры.Вставить("Копирование", Копирование);
		
		Отказ = Истина;
		ТекстВопроса = НСтр("en='Data has been changed. Save changes?';ru='Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ТерминалыПунктаЗаписатьЭлемент", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПунктаПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Или Модифицированность Тогда 
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Владелец",    Элемент);
		ДополнительныеПараметры.Вставить("Ключ",        Элемент.ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("Добавление",  Ложь); 
		ДополнительныеПараметры.Вставить("Копирование", Ложь);
		
		Отказ = Истина;
		ТекстВопроса = НСтр("en='Data has been changed. Save changes?';ru='Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ТерминалыПунктаЗаписатьЭлемент", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ГеокодироватьКоординаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Адрес) Тогда
		ТекстНСТР = НСтр("en='To perform geocoding, you must specify the address.';ru='Для выполнения геокодирования необходимо указать адрес.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Адрес");
		Возврат;
	КонецЕсли;
	
	уатЭлектронныеКартыКлиент.ГеокодироватьКоординатыВПунктеНазначения(ЭтотОбъект,, ВыбиратьРезультатГеокодированияИзСписка);
	
	Если НЕ ВыбиратьРезультатГеокодированияИзСписка Тогда
		Модифицированность = Истина;
		ОпределитьГеозону(Неопределено);
		Объект.ПробегВнеГеозоны = ПолучитьПробегВнеГеозоны(Объект.Лат, Объект.Лон);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПробегВнеГеозоны(Команда)
	
	Объект.ПробегВнеГеозоны = ПолучитьПробегВнеГеозоны(Объект.Лат, Объект.Лон);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблон(Команда)
	
	ПараметрыФормы = Новый Структура("ОбъектНастройки", "Справочник_уатПунктыНазначения");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование(Команда)
	
	Объект.Наименование   = СформироватьНаименованиеСервер();
	НаименованиеПоШаблону = Объект.Наименование;
	Если НЕ ЗначениеЗаполнено(Объект.ШифрПункта) Тогда
		Объект.ШифрПункта   = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоседниеПункты(Команда)
	ПолучитьСоседниеПункты(Объект.Лат, Объект.Лон, Объект.РадиусПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоординатыСоседнихПунктов(Команда)
	ВыделенныеСтроки = Элементы.СоседниеПункты.ВыделенныеСтроки;
	Если ТипЗнч(ВыделенныеСтроки) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ВыделенныеСтроки.Количество()-1;
	Пока Индекс >= 0 Цикл
		
		ТекПункт = СоседниеПункты.НайтиПоИдентификатору(ВыделенныеСтроки[Индекс]);
		Индекс   = Индекс - 1;
		
		Если ТекПункт.Широта = Объект.Лат И ТекПункт.Долгота = Объект.Лон Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		ЗаписатьПунктНазначения(ТекПункт.Пункт, Объект.Лат, Объект.Лон, ТекстОшибки);
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекПункт.Широта  = Объект.Лат;
			ТекПункт.Долгота = Объект.Лон;
			ТекПункт.РасстояниеМеждуПунктами = 0;
			ТекстНСТР = НСтр("en='The coordinates of the point ""%1"" are changed.';ru='Координаты пункта ""%1"" изменены.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстНСТР, ТекПункт.Пункт));
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКоординатыИзБуфера(Команда)
	
	СтрокаРазбора = "";
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		#Если МобильныйКлиент Тогда
			Возврат;
		#Иначе
			COMОбъект = Новый COMОбъект("htmlfile");
			СтрокаРазбора = COMОбъект.ParentWindow.ClipboardData.GetData("Text");
		#КонецЕсли
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазбора = "" Тогда 
		ТекстОшибки = НСтр("en='Clipboard contains no data.';ru='Буфер обмена не содержит данных.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СтрокаРазбора = СокрЛП(СтрокаРазбора);
	
	// Ожидаемый вид строки с координатами: 32.45684684, 42.46546464, где сначала идет широта, затем долгота, разделенные запятой.
	флОшибка = Ложь;
	
	Если СтрНайти(СтрокаРазбора, ".") <> 0 И СтрНайти(СтрокаРазбора, ",") <> 0 Тогда 
		СтрокиРазбора = СтрЗаменить(СтрокаРазбора, ",", Символы.ПС);
		Если СтрЧислоСтрок(СтрокиРазбора) = 2 Тогда 
			Попытка
				ШиротаБуфер  = Число(СокрЛП(СтрПолучитьСтроку(СтрокиРазбора, 1)));
				ДолготаБуфер = Число(СокрЛП(СтрПолучитьСтроку(СтрокиРазбора, 2)));
				
				Объект.Лат  = ШиротаБуфер;
				Объект.Лон = ДолготаБуфер;
				
			Исключение
				флОшибка = Истина;
			КонецПопытки;
			
		Иначе 
			флОшибка = Истина;
		КонецЕсли;
		
	Иначе 
		флОшибка = Истина;
	КонецЕсли;
	
	Если флОшибка Тогда 
		ТекстОшибки = НСтр("en='Clipboard contains incorrect data.';ru='Буфер обмена содержит некорректные данные.'");
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьГеокодирование(Команда)
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.Форма.ФормаНастроекГеокодирования",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГеозону(Команда)
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Оповещ = Новый ОписаниеОповещения("ОпределитьГеозонуЗаписатьЭлемент", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Перед определением геозоны необходимо записать элемент. Продолжить?",	РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОпределитьГеозонуПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГеозонуЗаписатьЭлемент(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Попытка
			Записать(Новый Структура("НеОбновлятьПривязкуКГеозонам", Истина));
		Исключение
			Возврат;
		КонецПопытки;
		
		ОпределитьГеозонуПродолжение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГеозонуПродолжение()
	Если ЗначениеЗаполнено(ГеозонаПункта) Тогда
		Оповещ = Новый ОписаниеОповещения("ОпределитьГеозонуВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Введенное значение геозоны будет очищено! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОпределитьГеозонуПродолжениеПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГеозонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОпределитьГеозонуПродолжениеПродолжение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГеозонуПродолжениеПродолжение()
	ОпределитьГеозонуПунктаСервер();
	ОбновлятьПривязкуКГеозонамПриЗаписи = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовНастроить(Команда)
	ПараметрыФормы = Новый Структура("ПунктНазначения", Объект.Ссылка);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовОбновить(Команда)
	ЗаполнитьРасписаниеРейсов();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьРасстояния()
	
	ОбработкаОбъект = ДанныеФормыВЗначение(РасстоянияМеждуПунктами, Тип("ОбработкаОбъект.уатРасстоянияМеждуПунктами"));
	ОбработкаОбъект.Пункт = Объект.Ссылка;
	ОбработкаОбъект.ОбновитьТаблицу();
	ЗначениеВДанныеФормы(ОбработкаОбъект, РасстоянияМеждуПунктами);
	
КонецПроцедуры

// Процедура обрабатывает действие начала редактирования или ввода новой
// записи контактной информации
//
// Параметры
//  ВыбОбъект - объект уже существующей записи в регистре контактной информации
//  ВыбТип - тип уже существующей или новой записи в регистре контактной информации
//  ВыбВид - вид уже существующей или новой записи в регистре контактной информации
//  ТекущийОбъект - Объект новой записи в регистре контактной информации
//  ФормаВладелец - форма из которой произошел вызов процедуры
&НаКлиенте
Процедура РедактироватьЗапись(Пункт, ТекущийОбъект)
	
	КлючЗаписиРасстоянияМеждуПунктами = ПолучитьКлючЗаписи(Пункт, ТекущийОбъект);
	Если КлючЗаписиРасстоянияМеждуПунктами = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Пункт1", ТекущийОбъект);
	Иначе
		ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписиРасстоянияМеждуПунктами);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.уатРасстоянияМеждуПунктами.ФормаЗаписи", ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("РедактироватьЗаписьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗаписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьРасстояния();

КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписи(Пункт, ТекущийОбъект)
	МенеджерЗаписи = РегистрыСведений.уатРасстоянияМеждуПунктами.СоздатьМенеджерЗаписи();

	Если ЗначениеЗаполнено(Пункт) Тогда
		МенеджерЗаписи.Пункт1 = Пункт;
		МенеджерЗаписи.Пункт2 = ТекущийОбъект;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Возврат РегистрыСведений.уатРасстоянияМеждуПунктами.СоздатьКлючЗаписи(Новый Структура("Пункт1, Пункт2",	МенеджерЗаписи.Пункт1, МенеджерЗаписи.Пункт2));
		Иначе
			МенеджерЗаписи.Пункт1 = ТекущийОбъект;
			МенеджерЗаписи.Пункт2 = Пункт;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				Возврат РегистрыСведений.уатРасстоянияМеждуПунктами.СоздатьКлючЗаписи(Новый Структура("Пункт1, Пункт2", МенеджерЗаписи.Пункт1, МенеджерЗаписи.Пункт2));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция НужноУдалитьЗапись(Пункт, ТекущийОбъект)
	
	Результат = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.уатРасстоянияМеждуПунктами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пункт1 = Пункт;
	МенеджерЗаписи.Пункт2 = ТекущийОбъект;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Результат = Истина;
	Иначе
		МенеджерЗаписи.Пункт2 = Пункт;
		МенеджерЗаписи.Пункт1 = ТекущийОбъект;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НужноУдалитьЗапись()

&НаСервере
Процедура УдалитьЗаписьТаблицаРасстояний(Пункт, ТекущийОбъект)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("РасстоянияМеждуПунктами");
	ОбработкаОбъект.УдалитьЗапись(Пункт, ТекущийОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияПолейКИ(ТекСсылка)
	Возврат ТекСсылка.ЗначенияПолейАдреса.Получить();
КонецФункции

&НаСервере
Процедура ТипПунктаПриИзмененииСервер()
	
	Объект.СтоянкаПР  = Объект.ТипПункта.СтоянкаПР;
	Объект.СтоянкаДоп = Объект.ТипПункта.СтоянкаДоп;
	ОбновитьНадписьРазрешенныеТипыТС();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьНадписьРазрешенныеТипыТС()
	
	НадписьРазрешенныеТипыТС = уатОбщегоНазначения.ОбновитьНадписьРазрешенныеТипыТС(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыПунктаЗаписатьЭлемент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Записать();
		
		ПараметрыФормы = Новый Структура();
		
		Если ДополнительныеПараметры.Копирование Тогда 
			ПараметрыФормы.Вставить("ЗначениеКопирования", ДополнительныеПараметры.Ключ);
		ИначеЕсли ДополнительныеПараметры.Добавление Тогда 
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец", Параметры.Ключ));
		Иначе 
			ПараметрыФормы.Вставить("Ключ", ДополнительныеПараметры.Ключ);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.уатТерминалы.ФормаОбъекта", ПараметрыФормы, ДополнительныеПараметры.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаименованиеСервер()
	
	СпрОб = РеквизитФормыВЗначение("Объект");
	Возврат уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатПунктыНазначения", СпрОб);
	
КонецФункции

&НаСервере
Процедура ПолучитьСоседниеПункты(Широта, Долгота, РадиусПоиска)
	
	СоседниеПункты.Очистить();
	
	МетровВГрадусеШироты  = 111226.255;
	МетровВГрадусеДолготы = 10;
	КолвоМетров          = Окр(РадиусПоиска / МетровВГрадусеШироты, 3, РежимОкругления.Окр15как20);
	Если КолвоМетров = 0 Тогда
		КолвоМетров  = 0.001;
	КонецЕсли;
	МаксШирота  = Широта + КолвоМетров;
	МинШирота   = Широта - КолвоМетров;
	
	КолвоМетров          = Окр(РадиусПоиска / МетровВГрадусеДолготы, 3, РежимОкругления.Окр15как20);
	Если КолвоМетров = 0 Тогда
		КолвоМетров  = 0.001;
	КонецЕсли;
	МаксДолгота = Долгота + КолвоМетров;
	МинДолгота  = Долгота - КолвоМетров;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("МаксШирота", МаксШирота);
	Запрос.УстановитьПараметр("МинШирота", МинШирота);
	Запрос.УстановитьПараметр("МаксДолгота", МаксДолгота);
	Запрос.УстановитьПараметр("МинДолгота", МинДолгота);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатПунктыНазначения.Ссылка КАК Ссылка,
	               |	уатПунктыНазначения.Лат КАК Лат,
	               |	уатПунктыНазначения.Лон КАК Лон,
	               |	уатПунктыНазначения.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	               |ГДЕ
	               |	уатПунктыНазначения.Лат <= &МаксШирота
	               |	И уатПунктыНазначения.Лат >= &МинШирота
	               |	И уатПунктыНазначения.Лон <= &МаксДолгота
	               |	И уатПунктыНазначения.Лон >= &МинДолгота
	               |	И уатПунктыНазначения.Ссылка <> &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РасстояниеМеждуТочками = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(Широта, Долгота, Выборка.Лат, Выборка.Лон);
		Если РасстояниеМеждуТочками > РадиусПоиска Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СоседниеПункты.Добавить();
		НоваяСтрока.Пункт   = Выборка.Ссылка;
		НоваяСтрока.Широта  = Выборка.Лат;
		НоваяСтрока.Долгота = Выборка.Лон;
		НоваяСтрока.РасстояниеМеждуПунктами = РасстояниеМеждуТочками;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПунктНазначения(Пункт, Широта, Долгота, ТекстОшибки)
	
	Попытка
		СпрОбъект = Пункт.ПолучитьОбъект();
		СпрОбъект.Лат = Широта;
		СпрОбъект.Лон = Долгота;
		СпрОбъект.Записать();
	Исключение
		ТекстНСТР = НСтр("en='Not recorded';ru='Не записан'") + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, НовоеНаименование) Экспорт
	
	ВопросСформироватьНаименование = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Наименование   = СформироватьНаименованиеСервер();
		НаименованиеПоШаблону = Объект.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеРадиусПоискаПоНастройкамПользователя()
	
	Объект.РадиусПоиска = 100;
	
	ЗначениеУстановлено = Ложь;
	ТекПользователь     = Пользователи.АвторизованныйПользователь();
	ПодразделениеПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
	Если ЗначениеЗаполнено(ПодразделениеПользователь) Тогда 
		ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПодразделениеПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
			Объект.РадиусПоиска        = ЗначениеНастройки;
			ЗначениеУстановлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеУстановлено Тогда 
		ОрганизацияПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОрганизацияПользователь) Тогда 
			ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОрганизацияПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
				Объект.РадиусПоиска = ЗначениеНастройки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
			"Справочник.уатПунктыНазначения.Форма.ОсновнаяФорма",
			"уатПунктыНазначения_НастройкиГеокодирования"
		);
		СтруктураНастроекПоУмолчанию = Справочники.уатПунктыНазначения.СтруктураНастроекГеокодированияПоУмолчанию();
		Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
			СтруктураНастроек = СтруктураНастроекПоУмолчанию;
		Иначе
			Для Каждого КлючИЗначение Из СтруктураНастроекПоУмолчанию Цикл
				Если Не СтруктураНастроек.Свойство(КлючИЗначение.Ключ) Тогда
					СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураНастроек);
		
		ПрочиеНастройки = ХранилищеНастроекДанныхФорм.Загрузить(
			"Справочник.уатПунктыНазначения.Форма.ОсновнаяФорма",
			"уатПунктыНазначения_ПрочиеНастройки"
		);
		Если ТипЗнч(ПрочиеНастройки) = Тип("Структура") 
			И ПрочиеНастройки.Свойство("РасписаниеРейсовТолькоДействующие") Тогда
			РасписаниеРейсовТолькоДействующие = ПрочиеНастройки.РасписаниеРейсовТолькоДействующие;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Справочники.уатПунктыНазначения.СтруктураНастроекГеокодированияПоУмолчанию();
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтаФорма);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Справочник.уатПунктыНазначения.Форма.ОсновнаяФорма", 
		"уатПунктыНазначения_НастройкиГеокодирования", 
		СтруктураНастроек
	);
	
	ПрочиеНастройки = Новый Структура("РасписаниеРейсовТолькоДействующие", РасписаниеРейсовТолькоДействующие);
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Справочник.уатПунктыНазначения.Форма.ОсновнаяФорма", 
		"уатПунктыНазначения_ПрочиеНастройки", 
		ПрочиеНастройки
	);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГеозонуПункта()
	
	ГеозонаПункта = Неопределено;
	Элементы.ГеозонаПункта.ПодсказкаВвода = "Не определена";
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекГеозона = уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(Объект.Ссылка);
	Если ТекГеозона <> Неопределено Тогда
		ГеозонаПункта = ТекГеозона;
		Если ГеозонаПункта.Пустая() Тогда
			Элементы.ГеозонаПункта.ПодсказкаВвода = "Не входит в геозоны";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьПунктКГеозоне(Геозона)
	Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Геозона) Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения_уэ.уатПривязкаПунктовНазначенияКГеозонам(Объект.Ссылка, Геозона);
	ПрочитатьГеозонуПункта();
КонецПроцедуры

&НаСервере
Процедура ОпределитьГеозонуПунктаСервер()
	уатОбщегоНазначения_уэ.уатПривязкаПунктовНазначенияКГеозонам(Объект.Ссылка);
	Прочитать();
	Модифицированность = Истина;
	ПрочитатьГеозонуПункта();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПривязкуПунктаКГеозонамПриЗаписи(ТекущийОбъект)
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() И ОбновлятьПривязкуКГеозонамПриЗаписи Тогда
		уатОбщегоНазначения_уэ.уатПривязкаПунктовНазначенияКГеозонам(Объект.Ссылка);
		ОбновлятьПривязкуКГеозонамПриЗаписи = Ложь; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСлучайныйЦветПункта()
	
	Объект.ЦветНаКарте = уатЗащищенныеФункцииСервер_проф.СлучайноеЧисло(, 15);
	
	Если Объект.ЦветНаКарте = 0 Тогда 
		Объект.ЦветНаКарте = 16;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеРейсов()
	РасписаниеРейсов.Очистить();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРасписаниеРейсов.Рейс КАК Рейс,
		|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
		|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
		|	уатРасписаниеРейсов.FTL КАК FTL,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяОтправления,
		|	уатРасписаниеРейсов.ПунктОтправления КАК ПунктОтправления,
		|	уатРасписаниеРейсов.Грузоотправитель КАК Грузоотправитель,
		|	уатРасписаниеРейсов.Грузополучатель КАК Грузополучатель
		|ИЗ
		|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|ГДЕ
		|	уатРасписаниеРейсов.ПунктНазначения = &Пункт";
		Если РасписаниеРейсовТолькоДействующие Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И (уатРасписаниеРейсов.ДействуетС = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ уатРасписаниеРейсов.ДействуетС <= &ТекущаяДата)
			|	И (уатРасписаниеРейсов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ уатРасписаниеРейсов.ДействуетПо >= &ТекущаяДата)";
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	уатРасписаниеРейсов.ПунктОтправления,
		|	уатРасписаниеРейсов.Рейс,
		|	уатРасписаниеРейсов.ДатаУстановки,
		|	уатРасписаниеРейсов.ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо";
		Запрос.УстановитьПараметр("Пункт", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = РасписаниеРейсов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеАдресаВСвободнойФорме(ПредставлениеАдреса);
	
	ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	ДанныеАдресаJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, ВидКИ);
	ЗначениеАдреса = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеАдресаJSON);
	
	Возврат ЗначениеАдреса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьJSONНаСервере(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураСхемы = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураСхемы;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПробегВнеГеозоны(Лат, Лон)

	Возврат уатОбщегоНазначения_уэ.ПолучитьПробегВнеГеозоны(Лат, Лон, Истина);

КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	// Запрет на просмотр карточки организации для внешнего пользователя.
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	НаименованиеПолное		= Объект.НаименованиеПолное;
	
	ЭтоЮрЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ОрганизацияЗарегистрированаВРФ = (Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") 
									ИЛИ Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
									
	Элементы.ГруппаИндивидуальныйПредприниматель.Видимость	= ЭтоФизЛицо;
	Элементы.КПП.Видимость = ЭтоЮрЛицо;
	
	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
	
	Если ЭтоФизЛицо Тогда
		ВидОрганизации = НСтр("en='Individual entrepreneur';ru='Индивидуальный предприниматель'");
		
		Элементы.НаименованиеСокращенное.Подсказка = НСтр("en='For example: IE Ivanov I. I.';ru='Например: ИП Иванов И.И.'");
		Элементы.НаименованиеПолное.Подсказка      = НСтр("en='Example: Individual entrepreneur Ivanov Ivan Ivanovich';ru='Например: Индивидуальный предприниматель Иванов Иван Иванович'");
		Элементы.Наименование.Подсказка            = НСтр("en='For example: Ivanov I. I. IE';ru='Например: Иванов И.И. ИП'");
		
		Элементы.ОГРН.Заголовок = НСтр("en='OGRNIE';ru='ОГРНИП'");
		Элементы.ОГРН.Подсказка = НСтр("en='The main state registration number of an individual entrepreneur,"
"is specified in the Certificate of state registration of an individual as an IE';ru='Основной государственный регистрационный номер индивидуального предпринимателя, "
"указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок   = НСтр("en='Address';ru='Адрес  по  прописке'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок = НСтр("en='Residential address';ru='Адрес   проживания'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("en='Registered address coincides with the address of residence';ru='Адрес по прописке совпадает с адресом проживания'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок      = НСтр("en='Adress for information';ru='Адрес для информ.'");
		Элементы.ПочтовыйАдресОрганизацииСовпадает.Заголовок      = НСтр("en='Adress for information';ru='Адрес для информ.'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("en='Address for information is same as address for registration';ru='Адрес для информирования совпадает с адресом по прописке'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;
		
		Элементы.ИНН.Маска = ?(ОрганизацияЗарегистрированаВРФ, "999999999999", "");
		Элементы.ОГРН.Маска = "999999999999999";
	Иначе
		ВидОрганизации = НСтр("en='Legal entity';ru='Юридическое лицо'");
		Элементы.ИНН.Маска = ?(ОрганизацияЗарегистрированаВРФ, "9999999999", "");
		Элементы.ОГРН.Маска = "9999999999999";
	КонецЕсли;
	
	СоздатьБанковскийСчет = НСтр("en='Create';ru='Создать'");
	
	КоличествоБанковскихСчетов = Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(
		Объект.Ссылка);
		
	Элементы.СоздатьБанковскийСчет.Видимость = (КоличествоБанковскихСчетов = 0);
	Элементы.ГруппаОсновнойБанковскийСчет.Видимость = (КоличествоБанковскихСчетов <> 0);
	
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	РазместитьКонтактнуюИнформацию();
	
	// Установка доступности ссылок в зависимости от доступности данных формы для изменения
	Элементы.СоздатьБанковскийСчет.Доступность = НЕ ТолькоПросмотр;
	Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Доступность = НЕ ТолькоПросмотр;
	Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Доступность = НЕ ТолькоПросмотр;
	Элементы.ВсеОтветственныеЛица.Доступность = НЕ ТолькоПросмотр;
	Элементы.Руководитель.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГлавныйБухгалтер.Доступность = НЕ ТолькоПросмотр;
	Элементы.Кассир.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = АдресныйКлассификаторПуст;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Доступность = НЕ ТолькоПросмотр;
	
	УправлениеФормой(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействие.КомандыЭДО_ФормаЭлементаПриСоздании(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.Организации) Тогда
		Элементы.ГруппаКонтактнаяИнформация.ТолькоПросмотр = Истина;
		Элементы.ГруппаВидОрганизацииКод.Доступность = Ложь;
		Элементы.ГруппаЮрАдресОрганизации.Доступность = Ложь;
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Доступность = Ложь;
		Элементы.ФактАдресОрганизацииСовпадает.Доступность = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Для Каждого ТекКИ Из Параметры.ЗначениеКопирования.КонтактнаяИнформация Цикл 
			НаборКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид", ТекКИ.Вид));
			Если НаборКИ.Количество() Тогда 
				ЗаполнитьЗначенияСвойств(НаборКИ[0], ТекКИ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаКИ Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл 
			ЭтотОбъект[ТекСтрокаКИ.ИмяРеквизита] = ТекСтрокаКИ.Представление;
		КонецЦикла;
		
		Если ЮрФактАдресаСовпадают Тогда
			СкопироватьПолеКонтактнойИнформацииСервер("КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
		КонецЕсли;
		Если ЮрПочтовыйАдресаСовпадают Тогда
			СкопироватьПолеКонтактнойИнформацииСервер("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
			
			Если КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = ПредставлениеПустойГиперссылки() Тогда
				КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = "";
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Истина;
	Иначе 
		Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействиеКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		
		Если Параметр.Владелец = Объект.Ссылка Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
				
				Объект.ОсновнойБанковскийСчет = Параметр.Ссылка;
				
				Элементы.СоздатьБанковскийСчет.Видимость = Ложь;
				Элементы.ГруппаБанковскийСчет.Видимость = Истина;
				
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		
		ОбновитьИнформациюОбответственныхЛицах();
		
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Модифицированность	= Истина;
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			ДвоичныеДанныеКартинки = СсылкаНаДвоичныеДанныеФайла(Объект.ФайлЛоготип, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресЛоготип = ДвоичныеДанныеКартинки;
			КонецЕсли;
			РаботаСЛоготипом = Ложь;
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			ДвоичныеДанныеКартинки = СсылкаНаДвоичныеДанныеФайла(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда 
				АдресПечать = ДвоичныеДанныеКартинки;
			КонецЕсли;
			РаботаСФаксимиле = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатЭлектронноеВзаимодействиеКлиент.КомандыЭДО_ФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УстановитьДополнительныеСвойстваКонтактнойИнформации();
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлЛоготип) Тогда
		ДвоичныеДанныеКартинки = СсылкаНаДвоичныеДанныеФайла(ТекущийОбъект.ФайлЛоготип, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресЛоготип = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлФаксимильнаяПечать) Тогда
		ДвоичныеДанныеКартинки = СсылкаНаДвоичныеДанныеФайла(ТекущийОбъект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресПечать = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.уатРедактированиеИсторииКонтактнойИнформации") Тогда
		
		уатОбщегоНазначенияКлиент.УстановитьАдресПослеРедактированияИстории(
			ЭтотОбъект,
			ВыбранноеЗначение.ИсторияИзмененийАдреса,
			Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
		
		ПриИзмененииЮрАдресаОрганизации();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Попытка
		ИмяСправочникаХранилищаФайлов = ИсточникВыбора.ИмяСправочникаХранилищаФайлов;
	Исключение
		ИмяСправочникаХранилищаФайлов = "";
	КонецПопытки;
	
	Если ИмяСправочникаХранилищаФайлов = "ОрганизацииПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ВыбранноеЗначение;
			ДвоичныеДанныеКартинки = СсылкаНаДвоичныеДанныеФайла(Объект.ФайлЛоготип, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресЛоготип = ДвоичныеДанныеКартинки;
			КонецЕсли;
			
			РаботаСЛоготипом = Ложь;
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			ДвоичныеДанныеКартинки = СсылкаНаДвоичныеДанныеФайла(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресПечать = ДвоичныеДанныеКартинки;
			КонецЕсли;
			
			РаботаСФаксимиле = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ВидОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПредЗначение = Объект.ЮридическоеФизическоеЛицо;
	ВидыОрганизаций = Новый СписокЗначений;
	ВидыОрганизаций.Добавить(ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ВидыОрганизаций.Добавить(ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	ТекЭлемент = ?(Объект.ЮридическоеФизическоеЛицо = ВидыОрганизаций[0].Значение, ВидыОрганизаций[0], 
		ВидыОрганизаций[1]);
	ВыбЭлемент = Неопределено;

	ВидыОрганизаций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВидОрганизацииНажатиеЗавершение", ЭтотОбъект, Новый Структура("ПредЗначение", ПредЗначение)), "", ТекЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ФамилияИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	Перем АвтоНаименованиеПолное;
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	НаименованиеПолное		= Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	НаименованиеПолное	= Объект.НаименованиеПолное;

КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Если СтрДлина(Объект.ИНН) >= 4 
		И ПустаяСтрока(Объект.КПП) Тогда
		
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	Результат = Неопределено;

	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект,,,, Новый ОписаниеОповещения("СоздатьБанковскийСчетНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	ИсходныйЮрАдресОрганизации	= КонтактнаяИнформацияПолеЮрАдресОрганизации;
	
	ГиперссылкаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
	Если НЕ ИсходныйЮрАдресОрганизации = КонтактнаяИнформацияПолеЮрАдресОрганизации Тогда
	
		ПриИзмененииЮрАдресаОрганизации();
	
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	ГиперссылкаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
	ПриИзмененииФактАдресаОрганизации();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииУчредительныйАдресИностраннойОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииУчредительныйАдресИностраннойОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонПоЮридическомуАдресуОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонПоЮридическомуАдресуОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругаяИнформацияОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
		
		Если КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = ПредставлениеПустойГиперссылки() Тогда
			КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо,Должность",
		Объект.Ссылка,
		ОтветственноеЛицо,
		ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					РуководительКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо,Должность",
		Объект.Ссылка,
		ОтветственноеЛицо,
		ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					ГлавныйБухгалтерКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКассираНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо,Должность",
		Объект.Ссылка,
		ОтветственноеЛицо,
		ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					КассирКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	// Исправление возможной опечатки в разделителе
	Объект.КодОКВЭД = СтрЗаменить(Объект.КодОКВЭД, ",", ".");

КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	УстановитьДлинуСтрокиИНН();
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеПодписиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ВсеБанковскиеСчета(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВсеОтветственныеЛица(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор			= Новый Структура("СтруктурнаяЕдиница", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("en='Field ""TIN"" is not filled';ru='Поле ""ИНН"" не заполнено'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(Объект.ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	Если Не ЗначениеЗаполнено(ПолеПоискаИНН) Тогда
		ТекстНСТР = НСтр("en='Enter TIN';ru='Введите ИНН'");
		ПоказатьПредупреждение(, ТекстНСТР);
		ТекущийЭлемент = Элементы.ПолеПоискаИНН;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ПолеПоискаИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПомощникСозданияФаксимилеПечати(Команда)
	
	СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", Нстр("ru ='Инструкция ""Как создать факсимиле печати""'"));
	
	ПараметрыКомандыПечати = Новый Массив;
	ПараметрыКомандыПечати.Добавить(Объект.Ссылка);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Организации", "НапечататьПомощникСозданияФаксимилеПечати", ПараметрыКомандыПечати, ЭтотОбъект, СтруктураДополнительныхПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлЛоготип);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеЛоготипаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготип = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФайлЛоготип");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимиле(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимилеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимилеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимиле(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлФаксимильнаяПечать);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимиле(Команда)
	
	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресПечать = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФайлФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрПечатнойФормыСчетНаОплату(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Для предварительного просмотра печатной формы ""Счет на оплату"" необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПредварительныйПросмотрПечатнойФормыСчетНаОплатуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;

	
	СтруктураДополнительныхПараметров = Новый Структура("Подпись", Объект.Ссылка);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы, ДополнительныеПараметры", "Предварительный просмотр печатной формы Счет на оплату.", СтруктураДополнительныхПараметров);
	
	ПараметрыКомандыПечати = Новый  Массив;
	ПараметрыКомандыПечати.Добавить(ПредопределенноеЗначение("Документ.уатСчетНаОплатуПокупателю.ПустаяСсылка"));
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатСчетНаОплатуПокупателю", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", ПараметрыКомандыПечати, ЭтотОбъект, ПараметрыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ПредварительныйПросмотрПечатнойФормыСчетНаОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	
	СтруктураДополнительныхПараметров = Новый Структура("Подпись", Объект.Ссылка);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы, ДополнительныеПараметры", "Предварительный просмотр печатной формы Счет на оплату.", СтруктураДополнительныхПараметров);
	
	ПараметрыКомандыПечати = Новый  Массив;
	ПараметрыКомандыПечати.Добавить(ПредопределенноеЗначение("Документ.уатСчетНаОплатуПокупателю.ПустаяСсылка"));
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатСчетНаОплатуПокупателю", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", ПараметрыКомандыПечати, ЭтотОбъект, ПараметрыПечати);
	
	
КонецПроцедуры

&НаКлиенте
Функция СокращенноеНаименованиеИндивидульногоПредпринимателя(Фамилия, Имя, Отчество)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en='IE%1%2%3';ru='ИП%1%2%3'"),
			?(ПустаяСтрока(СокрЛП(Фамилия)),  "", " " + СокрЛП(Фамилия)),
			?(ПустаяСтрока(СокрЛП(Имя)),      "", " " + Лев(СокрЛП(Имя), 1) + "."),
			?(ПустаяСтрока(СокрЛП(Отчество)), "", " " + Лев(СокрЛП(Отчество), 1) + "."));
	
КонецФункции

&НаКлиенте
Функция ПолноеНаименованиеИндивидульногоПредпринимателя(Фамилия, Имя, Отчество)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en='Individual entrepreneur%1%2%3';ru='Индивидуальный предприниматель%1%2%3'"),
			?(ПустаяСтрока(СокрЛП(Фамилия)),  "", " " + СокрЛП(Фамилия)),
			?(ПустаяСтрока(СокрЛП(Имя)),      "", " " + СокрЛП(Имя)),
			?(ПустаяСтрока(СокрЛП(Отчество)), "", " " + СокрЛП(Отчество)));
	
КонецФункции

&НаКлиенте
Функция НаименованиеИндивидульногоПредпринимателя(Фамилия, Имя, Отчество)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en='%1%2%3IE';ru='%1%2%3ИП'"),
			?(ПустаяСтрока(СокрЛП(Фамилия)),  "", СокрЛП(Фамилия) + " "),
			?(ПустаяСтрока(СокрЛП(Имя)),      "", Лев(СокрЛП(Имя), 1) + ". "),
			?(ПустаяСтрока(СокрЛП(Отчество)), "", Лев(СокрЛП(Отчество), 1) + ". "));
	
КонецФункции

&НаКлиенте
Процедура ФИОПриИзменении()
	
	Если ЗначениеЗаполнено(Объект.ФамилияИП)
		ИЛИ ЗначениеЗаполнено(Объект.ИмяИП)
		ИЛИ ЗначениеЗаполнено(Объект.ОтчествоИП) Тогда
		
		Объект.НаименованиеСокращенное = СокращенноеНаименованиеИндивидульногоПредпринимателя(
											Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
		Объект.НаименованиеПолное = ПолноеНаименованиеИндивидульногоПредпринимателя(
											Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
		Объект.Наименование = НаименованиеИндивидульногоПредпринимателя(
											Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
		НаименованиеСокращенноеПриИзменении(Элементы.НаименованиеСокращенное);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляРеквизитов()
	
	Объект.Наименование = "";
	Объект.НаименованиеСокращенное = "";
	Объект.НаименованиеПолное = "";
	Объект.КодИМНС = "";
	Объект.ИндивидуальныйПредприниматель = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Объект.ИНН = "";
	Объект.КПП = "";
	Объект.ОГРН = "";
	Объект.НаименованиеИМНС = "";
	Объект.СвидетельствоСерияНомер = "";
	Объект.НаименованиеПлательщикаПриПеречисленииНалогов = "";
	Объект.СвидетельствоДатаВыдачи = Дата("00010101000000");
	Объект.ОсновнойБанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Объект.КодПоОКАТО = "";
	Объект.КодОКВЭД = "";
	Объект.КодПоОКПО = "";
	Объект.НаименованиеОКВЭД = "";
	Объект.Префикс = "";
	Объект.КонтактнаяИнформация.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОрганизации()
	
	ЭтоЮрЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	ОрганизацияЗарегистрированаВРФ = (Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") 
									ИЛИ Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
									
	Элементы.ГруппаИндивидуальныйПредприниматель.Видимость	= ЭтоФизЛицо;
	Элементы.КПП.Видимость = ЭтоЮрЛицо;
	
	Если ЭтоФизЛицо Тогда
		ВидОрганизации = НСтр("en='Individual entrepreneur';ru='Индивидуальный предприниматель'");
		
		Элементы.НаименованиеСокращенное.Подсказка = НСтр("en='For example: IE Ivanov I. I.';ru='Например: ИП Иванов И.И.'");
		Элементы.НаименованиеПолное.Подсказка      = НСтр("en='Example: Individual entrepreneur Ivanov Ivan Ivanovich';ru='Например: Индивидуальный предприниматель Иванов Иван Иванович'");
		Элементы.Наименование.Подсказка            = НСтр("en='For example: Ivanov I. I. IE';ru='Например: Иванов И.И. ИП'");
		
		Элементы.ОГРН.Заголовок = НСтр("en='OGRNIE';ru='ОГРНИП'");
		Элементы.ОГРН.Подсказка = НСтр("en='The main state registration number of the individual entrepreneur,"
"is specified in the Certificate of state registration of an individual as an IE';ru='Основной государственный регистрационный номер индивидуального  "
"предпринимателя, указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок   = НСтр("en='Address';ru='Адрес  по  прописке'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок = НСтр("en='Residential address';ru='Адрес   проживания'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("en='Registered address coincides with the address of residence';ru='Адрес по прописке совпадает с адресом проживания'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок      = НСтр("en='Adress for information';ru='Адрес для информ.'");
		Элементы.ПочтовыйАдресОрганизацииСовпадает.Заголовок      = НСтр("en='Adress for information';ru='Адрес для информ.'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("en='Address for information is same as address for registration';ru='Адрес для информирования совпадает с адресом по прописке'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;
		Элементы.ИНН.Маска = ?(ОрганизацияЗарегистрированаВРФ, "999999999999", "");
		Элементы.ОГРН.Маска = "999999999999999";
		
	Иначе
		ВидОрганизации = НСтр("en='Legal entity';ru='Юридическое лицо'");
		Элементы.ИНН.Маска = ?(ОрганизацияЗарегистрированаВРФ, "9999999999", "");
		Элементы.ОГРН.Маска = "9999999999999";
		
		Элементы.НаименованиеСокращенное.Подсказка = НСтр("en='For example: Daisy LLC';ru='Например: ООО ""Ромашка""'");
		Элементы.НаименованиеПолное.Подсказка      = НСтр("en='Example: Limited liability company ""Daisy""';ru='Например: Общество с ограниченной ответственностью ""Ромашка""'");
		Элементы.Наименование.Подсказка            = НСтр("en='For example: Daisy LLC';ru='Например: Ромашка ООО'");
		
		Элементы.ОГРН.Заголовок = НСтр("en='MSRN';ru='ОГРН'");
		Элементы.ОГРН.Подсказка = НСтр("en='Main state registration number';ru='Основной государственный регистрационный номер'");
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок   = НСтр("en='Legal address';ru='Юридический адрес'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок = НСтр("en='Actual address';ru='Фактический адрес'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("en='Actual address is same as legal address';ru='Фактический адрес совпадает с юридическим адресом'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок      = НСтр("en='Postal address:';ru='Почтовый адрес:'");
		Элементы.ПочтовыйАдресОрганизацииСовпадает.Заголовок      = НСтр("en='Postal address:';ru='Почтовый адрес:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("en='Postal address is same as legal address';ru='Почтовый адрес совпадает с юридическим адресом'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;
	КонецЕсли;
	
	ОчиститьПоляРеквизитов();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ПредЗначение = ДополнительныеПараметры.ПредЗначение;
	
	ВыбЭлемент = ВыбранныйЭлемент;
	Если ВыбЭлемент <> Неопределено Тогда
		Объект.ЮридическоеФизическоеЛицо = ВыбЭлемент.Значение;
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> ПредЗначение Тогда
		ПриИзмененииВидаОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетНажатиеЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    Результат = Результат1;
    
    УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Закладка Адреса, телефоны
	Элементы.ФактАдресОрганизацииСовпадает.Видимость = Форма.ЮрФактАдресаСовпадают;
	Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Видимость = НЕ Форма.ЮрФактАдресаСовпадают;
	Элементы.ПочтовыйАдресОрганизацииСовпадает.Видимость = Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Видимость = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресОрганизации) 
		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресОрганизации = ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресОрганизацииСовпадает = НСтр("en='<not filled>';ru='<не заполнен>'");
	Иначе
		Форма.ФактАдресОрганизацииСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресОрганизации;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации) 
		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресОрганизацииСовпадает = НСтр("en='<not filled>';ru='<не заполнен>'");
	Иначе
		Форма.ПочтовыйАдресОрганизацииСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтатическиеРеквизиты()
	
	СтатическиеРеквизиты = Новый Массив();
	
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);
	
	Возврат СтатическиеРеквизиты;
	
КонецФункции

&НаСервере
Процедура УстановитьДополнительныеСвойстваКонтактнойИнформации()
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Если ЭтоФизЛицо Тогда
		ЮрФактАдресаСовпадают     = Истина;
		ЮрПочтовыйАдресаСовпадают = Истина;
	Иначе
		ЮрФактАдресаСовпадают        = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеФактАдресОрганизации);
		ЮрПочтовыйАдресаСовпадают    = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации)
			ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресОрганизации = ПредставлениеПустойГиперссылки(),
			"", КонтактнаяИнформацияПолеЮрАдресОрганизации)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()
	
	ИсторияЮрАдреса = НСтр("ru = 'История юридического адреса'");
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево, СтатическиеРеквизиты());
	
	УстановитьДополнительныеСвойстваКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='LLC';ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Limited liability company';ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='LLC';ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='JSC';ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Open Joint-Stock Company';ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='JSC';ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='CJSC';ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Closed Joint-Stock Company';ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='CJSC';ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='IE';ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Individual entrepreneur';ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='IE';ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, 
			НСтр("en='Limited liability company';ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Limited liability company';ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='LLC';ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='Open Joint-Stock Company';ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Open Joint-Stock Company';ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='JSC';ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='Closed Joint-Stock Company';ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Closed Joint-Stock Company';ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='CJSC';ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("en='Individual entrepreneur';ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("en='Individual entrepreneur';ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("en='IE';ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
	Если КоличествоКавычек > 1 Тогда
		// Наименование организации внутри внешних кавычек
		ПозицияПервойКавычки	= Найти(Наименование, """");
		ПозицияПоследнейКавычки	= 0;
		
		ВремНаименование	= Наименование;
		
		ПозицияКавычки		= ПозицияПервойКавычки;
		Пока ПозицияКавычки > 0 Цикл
			ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
			ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
			ПозицияКавычки		= Найти(ВремНаименование, """");
		КонецЦикла;
		
		Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
		Если НЕ КоличествоКавычек%2 = 0 Тогда
			Наименование	= Наименование + """";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.ОрганизационноПравоваяФорма
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФорма)
				ИЛИ ПустаяСтрока(СтруктураНаименования.Наименование), "", " """)
			+ СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФорма)
				ИЛИ ПустаяСтрока(СтруктураНаименования.Наименование), "", """");
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(Форма)
	
	Форма.Элементы.ВариантНаименованияДляПечатныхФорм.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование")).Представление = 
		НСтр("en='Abbreviate';ru='Сокращенное'") + 
		?(ПустаяСтрока(Форма.Объект.НаименованиеСокращенное), "", " (" + Форма.Объект.НаименованиеСокращенное + ")");
		
	Форма.Элементы.ВариантНаименованияДляПечатныхФорм.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование")).Представление = 
		НСтр("en='Full';ru='Полное'") + 
		?(ПустаяСтрока(Форма.Объект.НаименованиеПолное), "", " (" + Форма.Объект.НаименованиеПолное + ")");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	Руководитель		= НСтр("en='Create';ru='Создать'");
	ГлавныйБухгалтер	= НСтр("en='Create';ru='Создать'");
	Кассир				= НСтр("en='Create';ru='Создать'");
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ""физ. лицо не указано""
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо)
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ""должность не указана""
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность)
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Подпись.Факсимиле КАК ФизическоеЛицоПодпись
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	РуководительПодпись = Справочники.уатПодписи.ПустаяСсылка();
	БухгалтерПодпись    = Справочники.уатПодписи.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтотОбъект.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='%1 (%2)';ru='%1 (%2)'"),
			Выборка.ФизическоеЛицо, Выборка.Должность);
			
		Если Выборка.ПредставлениеОтветственногоЛица = "Руководитель"  Тогда
			РуководительПодпись = Выборка.ФизическоеЛицоПодпись;
		ИначеЕсли Выборка.ПредставлениеОтветственногоЛица = "ГлавныйБухгалтер" Тогда
			БухгалтерПодпись = Выборка.ФизическоеЛицоПодпись;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]
			= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
		
	Попытка
		ДвоичныеДанныеФайла          = СсылкаНаДвоичныеДанныеФайла(РуководительПодпись, Новый УникальныйИдентификатор);
		ФаксимилеПодписиРуководителя = ДвоичныеДанныеФайла;
		ДвоичныеДанныеФайла                = СсылкаНаДвоичныеДанныеФайла(БухгалтерПодпись, Новый УникальныйИдентификатор);
		ФаксимилеПодписиГлавногоБухгалтера = ДвоичныеДанныеФайла;
	Исключение
	КонецПопытки;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо)
	
	Возврат ОтветственноеЛицо;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииЮрАдресаОрганизации()

	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеФактАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФактАдресаОрганизации()

	ЮрФактАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеФактАдресОрганизации);
	ЮрПочтовыйАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтотОбъект[ИмяПриемника]	= ЭтотОбъект[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].Значение;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].Значение = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].Значение = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПолеКонтактнойИнформацииСервер(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтотОбъект[ИмяПриемника]	= ЭтотОбъект[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].Значение;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].Значение = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].Значение = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат)
	
	Если Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		ПриИзмененииЮрАдресаОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресОрганизации" Тогда
		ПриИзмененииФактАдресаОрганизации();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ИННОбъекта, ПроверитьПодключение = Истина)
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	ДанныеЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, НЕ ЭтоФизЛицо, Объект.Ссылка);
	
	// Обработка ошибок
	Если НЕ ПустаяСтрока(ДанныеЗаполнения.ОписаниеОшибки) Тогда
		Если ДанныеЗаполнения.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Или ДанныеЗаполнения.ОписаниеОшибки = "НеУказанПароль" Тогда
			Если ПроверитьПодключение Тогда
				ТекстВопроса = НСтр("en='For automatic filling in attributes"
"it is necessary to connect to the Internet support of users."
"Would you like to connect now?';ru='Для автоматического заполнения реквизитов"
"необходимо подключиться к Интернет-поддержке пользователей."
"Подключиться сейчас?'");
				ПараметрыВопроса = Новый Структура("ИННОбъекта", ИННОбъекта);
				ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		ИначеЕсли ДанныеЗаполнения.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "organizaciya");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
			
		Иначе
			ПоказатьПредупреждение(, ДанныеЗаполнения.ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Параметры.Ключ.Пустая() Тогда
		ПерезаполнитьРеквизитыНаСервере(ДанныеЗаполнения.АдресРеквизитовОрганизации);
	Иначе
		ПерезаполнитьРеквизитыНаКлиенте(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо, Знач Ссылка)
	
	ДанныеЗаполнения = Новый Структура("ОписаниеОшибки", "");
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИННОбъекта);
		Иначе
			РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
		КонецЕсли;
		
		РеквизитыОрганизации.Вставить("ЮридическоеФизическоеЛицо", 
			?(РезультатПроверки.ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			
			ДанныеЗаполнения.ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
			
		Иначе
			
			ДанныеЗаполнения.Вставить("НаименованиеОрганизации", РеквизитыОрганизации.Наименование);
			ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", РеквизитыОрганизации.ЮридическоеФизическоеЛицо);
			ДанныеЗаполнения.Вставить("АдресРеквизитовОрганизации", ПоместитьВоВременноеХранилище(РеквизитыОрганизации, Новый УникальныйИдентификатор));
			
		КонецЕсли;
		
	Иначе
		
		ДанныеЗаполнения.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьРеквизитыНаСервере(АдресРеквизитовОрганизации)
	
	Реквизиты = ПолучитьИзВременногоХранилища(АдресРеквизитовОрганизации);
	ЗаполнитьПоРеквизитамНаСервере(Реквизиты);
	УдалитьИзВременногоХранилища(АдресРеквизитовОрганизации);
	
КонецПроцедуры

&НаСервере
Функция ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации)
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(Форма, ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	Форма[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРеквизитамНаСервере(Реквизиты)
	
	Если НЕ Объект.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо Тогда
		Объект.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо;
		ПриИзмененииВидаОрганизации();
	КонецЕсли;
	
	Объект.ИНН = Реквизиты.ИНН;
	
	Реквизиты.Свойство("КПП", Объект.КПП);
	
	Объект.Наименование            = Реквизиты.Наименование;
	Объект.НаименованиеПолное      = Реквизиты.НаименованиеПолное;
	Объект.НаименованиеСокращенное = Реквизиты.НаименованиеСокращенное;
	Объект.ОГРН                    = Реквизиты.РегистрационныйНомер;
	
	Если Реквизиты.Свойство("СвидетельствоОРегистрации")
		И ЗначениеЗаполнено(Реквизиты.СвидетельствоОРегистрации) Тогда
		
		Объект.СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en='%1 No.%2';ru='%1 №%2'"), 
								Реквизиты.СвидетельствоОРегистрации.Серия, Реквизиты.СвидетельствоОРегистрации.Номер);
		Объект.СвидетельствоДатаВыдачи = Реквизиты.СвидетельствоОРегистрации.Дата;
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("Телефон") Тогда
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                     ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"),
		                                     Реквизиты.Телефон);
	КонецЕсли;
	
	Если Реквизиты.Свойство("ЮридическийАдрес") Тогда
		ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                     ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"),
		                                     Реквизиты.ЮридическийАдрес);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРеквизитыНаКлиенте(ДанныеЗаполнения)
	
	ТекстВопроса = СтрШаблон(
		НСтр("en='Fill by TIN %1 %2?';ru='Заполнить по ИНН %1 %2?'"), 
		?(ДанныеЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"), НСтр("en='legal person';ru='юридического лица'"), НСтр("en='businessman';ru='предпринимателя'")),
		ДанныеЗаполнения.НаименованиеОрганизации);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьРеквизитыЗавершение", ЭтотОбъект, ДанныеЗаполнения.АдресРеквизитовОрганизации);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРеквизитыЗавершение(Ответ, АдресРеквизитовОрганизации) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРеквизитыНаСервере(АдресРеквизитовОрганизации);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ДополнительныеПараметры.ИННОбъекта, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()
	
	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
	
КонецФункции

&НаКлиенте
Процедура УстановитьДлинуСтрокиИНН()
	ОрганизацияЗарегистрированаВРФ = (Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") 
									ИЛИ Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	ДлинаСтрокиИНН = ?(ОрганизацияЗарегистрированаВРФ, Новый КвалификаторыСтроки(12), Новый КвалификаторыСтроки(50));
	Элементы.ИНН.ОграничениеТипа        = Новый ОписаниеТипов("Строка", , ДлинаСтрокиИНН);
	Если ОрганизацияЗарегистрированаВРФ Тогда
		Объект.Инн = Лев(Объект.Инн, 12);
		Если ЭтоФизЛицо Тогда
			Элементы.ИНН.Маска = "999999999999";
		Иначе
			Элементы.ИНН.Маска = "9999999999";
		КонецЕсли;
	Иначе
		Элементы.ИНН.Маска = "";
	КОнецЕсли;
КонецПроцедуры

// Процедура - Гиперссылка нажатие
//
// Параметры:
//  Форма				 - 	 - 
//  Элемент				 - 	 - 
//  СтандартнаяОбработка - 	 - 
//
&НаКлиенте
Процедура ГиперссылкаНажатие(Форма, Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент);
	Если (ДанныеСтроки = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Представление = Форма[ДанныеСтроки.ИмяРеквизита];
	Если Представление = ПредставлениеПустойГиперссылки() Тогда
		Представление = "";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Значение", ДанныеСтроки.Значение);
	ПараметрыОткрытия.Вставить("Представление", ДанныеСтроки.Представление);
	ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	ПараметрыОткрытия.Вставить("РедактированиеТолькоВДиалоге", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ГиперссылкаНажатиеЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,, Оповещение);
	
КонецПроцедуры

// Завершение немодальных диалогов
&НаКлиенте
Процедура ГиперссылкаНажатиеЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Результат        = ДополнительныеПараметры.Результат;
	ДанныеСтроки     = ДополнительныеПараметры.ДанныеСтроки;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	Результат.Вставить("ЗначенияПолейДоИзменения", ДанныеСтроки.ЗначенияПолей);
	Результат.Вставить("ПредставлениеДоИзменения", ДанныеСтроки.Представление);
	Результат.Вставить("ЗначениеПоляДоИзменения", Форма[ДанныеСтроки.ИмяРеквизита]);
	
	Форма[ДанныеСтроки.ИмяРеквизита]	= ?(ПустаяСтрока(РезультатЗакрытия.Представление), ПредставлениеПустойГиперссылки(), РезультатЗакрытия.Представление);
	ДанныеСтроки.ЗначенияПолей			= РезультатЗакрытия.КонтактнаяИнформация;
	ДанныеСтроки.Значение               = РезультатЗакрытия.Значение;
	ДанныеСтроки.Представление			= РезультатЗакрытия.Представление;
	ДанныеСтроки.Комментарий			= РезультатЗакрытия.Комментарий;
	Форма.Модифицированность = Истина;
	
	ПослеИзмененияКонтактнойИнформации(Результат);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

// Функция - Получить строку дополнительных значений
//
// Параметры:
//  Форма	 - 	 - 
//  Элемент	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

// Функция - Представление пустой гиперссылки
// 
// Возвращаемое значение:
//   - 
//
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустойГиперссылки()

	Возврат НСтр("en='Fill';ru='Заполнить'");

КонецФункции

&НаКлиенте
Процедура АдресЛоготипНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура АдресПечатьНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимиле = Ложь)
	
	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимиле = ЭтоРаботаСФаксимиле;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, ИмяРеквизитаОбъекта, Фильтр;
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ПросмотретьПрисоединенныйФайл();
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаОбъекта)
		И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()
	
	Перем ИдентификаторФайла;
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(ИмяЭлементаСКартинкой)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ДополнительныеПараметры = Новый Структура("ИмяЭлементаСКартинкой", ИмяЭлементаСКартинкой);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ИмяЭлементаСКартинкой = "ФайлЛоготип" Тогда
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элементы.АдресЛоготип, , , , ОписаниеОповещения);
		Иначе
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элементы.АдресПечать, , , , ОписаниеОповещения);
		КонецЕсли;
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(ВыбраннаяКартинка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяКартинка) Тогда
		
		УстановитьКартинкуВЭлементе(ВыбраннаяКартинка, ДополнительныеПараметры.ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуВЭлементе(ФайлКартинки, ИмяЭлементаСКартинкой)
	
	Модифицированность = Истина;
	
	Объект[ИмяЭлементаСКартинкой] = ФайлКартинки;
	Если ИмяЭлементаСКартинкой =  "ФайлФаксимильнаяПечать" Тогда
		ИмяЭлемента = "АдресПечать";
	Иначе
		ИмяЭлемента = "АдресЛоготип";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		ЭтотОбъект[ИмяЭлемента] = ПолучитьКартинку(ФайлКартинки, УникальныйИдентификатор);
	Иначе
		ЭтотОбъект[ИмяЭлемента] = "";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьКартинку(ФайлКартинки, УникальныйИдентификатор)
	
	ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	Возврат ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеФрагмент()
	
	Перем ИдентификаторФайла;
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	
КонецПроцедуры

&НаСервере
Функция СсылкаНаДвоичныеДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	уатОбщегоНазначенияКлиент.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Позволяет определить список заблокированных реквизитов.
// 
// Возвращаемое значение:
//  Массив - из Строка - строки в формате "ИмяРеквизита[;ИмяЭлементаФормы,...]",
//  где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы -
//  имя элемента формы, связанного с реквизитом. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив();
	БлокируемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Функция - Получить текст надписи для формы тарифа
//
// Параметры:
//  ПараметрыВыработки	 - 	 - 
//  ВидУпаковки			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьТекстНадписиДляФормыТарифа(Знач ПараметрыВыработки, Знач ВидУпаковки) Экспорт
	
	Если ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоДней Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid for 1 day';ru='Тариф действует за 1 день'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid for 1 haul';ru='Тариф действует за 1 ездку'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоЗаказов Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid for 1 order';ru='Тариф действует за 1 заказ'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid for 1 transaction';ru='Тариф действует за 1 операцию'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоПассажиров Тогда 
		ТекстНСТР = НСтр("en='Rate is valid per 1 passenger';ru='Тариф действует за 1 пассажира'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоРейсов Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid for 1 routing list';ru='Тариф действует за 1 маршрутный лист'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоТочек Тогда 
		ТекстНСТР = НСтр("en='The tariff is valid for 1 point';ru='Тариф действует за 1 точку'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации Тогда 
		ТекстНСТР = НСтр("en='The tariff is valid for 1 point';ru='Тариф действует за 1 точку'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта Тогда 
		ТекстНСТР = НСтр("en='The tariff is valid for 1 point';ru='Тариф действует за 1 точку'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоТС Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid for 1 vehicle';ru='Тариф действует за 1 ТС'");
		Возврат ТекстНСТР;
		
	ИначеЕсли ПараметрыВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок Тогда 
		ТекстНСТР = НСтр("en='Tariff is valid per unit:';ru='Тариф действует за единицу:'") + " " + НРег(ВидУпаковки.Наименование);
		Возврат ТекстНСТР;
		
	Иначе 
		ТекстНСТР = НСтр("en='Tariff is valid per unit:';ru='Тариф действует за единицу:'") + " " + НРег(ПараметрыВыработки.ЕдиницаИзмерения.НаименованиеПолное);
		Возврат ТекстНСТР;
	КонецЕсли;
	
КонецФункции // ПолучитьТекстНадписиДляФормыТарифа()

// Возвращает параметры выработки для автоматического расчета услуг
//  в документах Заказ на ТС, МЛ
// 
// Возвращаемое значение:
//   - 
//
Функция ПараметрыВыработкиАвтоРасчетУслуг() Экспорт
	мсв = Новый Массив;
	мсв.Добавить(Справочники.уатПараметрыВыработки.ВесГруза);
	мсв.Добавить(Справочники.уатПараметрыВыработки.Объем);
	мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоУпаковок);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ОбъемКм);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ТнКм);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПробегОбщий);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПробегПорожний);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПробегСГрузом);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ВремяВПростое);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ВремяВРаботе);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ВремяОжидания);
	мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоЗаказов);
	мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоРейсов);
	мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоТочек);
	мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации);
	мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта);
	мсв.Добавить(Справочники.уатПараметрыВыработки.СкладскаяОбработка);
	мсв.Добавить(Справочники.уатПараметрыВыработки.СтоимостьГруза);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя);
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда	
		мсв.Добавить(Справочники.уатПараметрыВыработки.ВнеРасписания);
		мсв.Добавить(Справочники.уатПараметрыВыработки.КоличествоКонтейнеров);
	КонецЕсли;
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПревышениеВеса);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПревышениеОбъема);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПревышениеВысоты);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПревышениеДлины);
	мсв.Добавить(Справочники.уатПараметрыВыработки.ПревышениеШирины);
	мсв.Добавить(Справочники.уатПараметрыВыработки.НочнаяДоставка);
	
	Возврат мсв;
КонецФункции

// Выполняет заполнение предопределенных элементов справочника
//
// Параметры:
//  ТолькоЕИ - 	 - 
//  ИмяЭлемента - 	 - 
//
Процедура ЗаполнитьПредопределенныеДанные(ТолькоЕИ = Ложь, ИмяЭлемента = Неопределено, ИмяРеквизита = Неопределено) Экспорт
	Макет = Справочники.уатПараметрыВыработки.ПолучитьМакет("НастройкиПредопределенныхЭлементов");
	ОбластьНастроек = Макет.ПолучитьОбласть("Настройки");
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		ИмяПредопрЭлемента = СтрЗаменить(СокрЛП(ОбластьНастроек.Область(НомерСтроки, 1, НомерСтроки, 1).Текст), "ИмяЭлемента_", "");
		Если ЗначениеЗаполнено(ИмяЭлемента) И ИмяЭлемента <> ИмяПредопрЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ТекЭлемент = Справочники.уатПараметрыВыработки[ИмяПредопрЭлемента];
		Исключение
			Продолжить;
		КонецПопытки;
		
		СпрОбъект = ТекЭлемент.ПолучитьОбъект();
		
		//ЕИ
		Если НЕ ЗначениеЗаполнено(СпрОбъект.ЕдиницаИзмерения) 
			И ЗначениеЗаполнено(ОбластьНастроек.Область(НомерСтроки, 2, НомерСтроки, 2).Текст) Тогда
			
			УстановитьЗначениеРеквизита(СпрОбъект, "ЕдиницаИзмерения", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		КонецЕсли;
			
		Если НЕ ТолькоЕИ Тогда
			//УАТ
			УстановитьЗначениеРеквизита(СпрОбъект, "Временный", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			УстановитьЗначениеРеквизита(СпрОбъект, "ДействуетНаТС", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			УстановитьЗначениеРеквизита(СпрОбъект, "ДействуетНаСотрудников", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			
			//Логистика
			УстановитьЗначениеРеквизита(СпрОбъект, "ДействуетНаТСМЛ", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			УстановитьЗначениеРеквизита(СпрОбъект, "ДействуетНаСотрудниковМЛ", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			УстановитьЗначениеРеквизита(СпрОбъект, "ИспользоватьДляЗаказовИПотребности", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			УстановитьЗначениеРеквизита(СпрОбъект, "ИспользоватьДляМаршрутныхЛистов", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
			
			//УАТ
			УстановитьЗначениеРеквизита(СпрОбъект, "ИспользоватьВТарифахНаУслуги", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		КонецЕсли;
		
		УстановитьЗначениеРеквизита(СпрОбъект, "СводныйПоказатель", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		УстановитьЗначениеРеквизита(СпрОбъект, "ИсточникПолученияФактЗначенийДляПривлТС", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		УстановитьЗначениеРеквизита(СпрОбъект, "ИсточникПолученияФактЗначенийДляСобственногоТС", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		
		УстановитьЗначениеРеквизита(СпрОбъект, "РассчитыватьПриПогрузке", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		УстановитьЗначениеРеквизита(СпрОбъект, "РассчитыватьПриРазгрузке", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		
		УстановитьЗначениеРеквизита(СпрОбъект, "СпособВводаЗначений", ИмяРеквизита, ОбластьНастроек, НомерСтроки);
		
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьЗначениеРеквизита(СпрОбъект, ИмяРеквизита, ИмяРеквизитаВх, ОбластьНастроек, НомерСтроки)
	Если ЗначениеЗаполнено(ИмяРеквизитаВх) И ИмяРеквизита <> ИмяРеквизитаВх Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ЕдиницаИзмерения" Тогда
		СпрОбъект.ЕдиницаИзмерения = уатОбновлениеИнформационнойБазы.НайтиСоздатьЕдиницу(ОбластьНастроек.Область(НомерСтроки, 2, НомерСтроки, 2).Текст,
			ОбластьНастроек.Область(НомерСтроки, 3, НомерСтроки, 3).Текст,
			ОбластьНастроек.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
	ИначеЕсли ИмяРеквизита = "Временный" Тогда
		СпрОбъект.Временный = НРег(ОбластьНастроек.Область(НомерСтроки, 5, НомерСтроки, 5).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ДействуетНаТС" Тогда
		СпрОбъект.ДействуетНаТС = НРег(ОбластьНастроек.Область(НомерСтроки, 6, НомерСтроки, 6).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ДействуетНаСотрудников" Тогда
		СпрОбъект.ДействуетНаСотрудников = НРег(ОбластьНастроек.Область(НомерСтроки, 7, НомерСтроки, 7).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ДействуетНаТСМЛ" Тогда
		СпрОбъект.ДействуетНаТСМЛ = НРег(ОбластьНастроек.Область(НомерСтроки, 8, НомерСтроки, 8).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ДействуетНаСотрудниковМЛ" Тогда
		СпрОбъект.ДействуетНаСотрудниковМЛ = НРег(ОбластьНастроек.Область(НомерСтроки, 9, НомерСтроки, 9).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ИспользоватьДляЗаказовИПотребности" Тогда
		СпрОбъект.ИспользоватьДляЗаказовИПотребности = НРег(ОбластьНастроек.Область(НомерСтроки, 10, НомерСтроки, 10).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ИспользоватьДляМаршрутныхЛистов" Тогда
		СпрОбъект.ИспользоватьДляМаршрутныхЛистов = НРег(ОбластьНастроек.Область(НомерСтроки, 11, НомерСтроки, 11).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "ИспользоватьВТарифахНаУслуги" Тогда
		СпрОбъект.ИспользоватьВТарифахНаУслуги = НРег(ОбластьНастроек.Область(НомерСтроки, 12, НомерСтроки, 12).Текст) = "1";
	ИначеЕсли ИмяРеквизита = "СводныйПоказатель" Тогда
		СпрОбъект.СводныйПоказатель = НРег(ОбластьНастроек.Область(НомерСтроки, 13, НомерСтроки, 13).Текст) = "1";
		Если СпрОбъект.СводныйПоказатель Тогда
			СпрОбъект.ИспользоватьПриПланировании = Истина;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ИсточникПолученияФактЗначенийДляПривлТС" Тогда
		СпрОбъект.ИсточникПолученияФактЗначенийДляПривлТС        = Перечисления.уатИсточникиФактДанныхПоказателейПланирования.МаршрутныйЛист;
	ИначеЕсли ИмяРеквизита = "ИсточникПолученияФактЗначенийДляСобственногоТС" Тогда
		СпрОбъект.ИсточникПолученияФактЗначенийДляСобственногоТС = Перечисления.уатИсточникиФактДанныхПоказателейПланирования.ПутевойЛист;
	ИначеЕсли ИмяРеквизита = "РассчитыватьПриПогрузке"
		И (СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания
		ИЛИ СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя) Тогда
		СпрОбъект.РассчитыватьПриПогрузке = Истина;
		
	ИначеЕсли ИмяРеквизита = "РассчитыватьПриРазгрузке"
		И (СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания
		ИЛИ СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя) Тогда
		СпрОбъект.РассчитыватьПриРазгрузке = Истина;
	
	ИначеЕсли ИмяРеквизита = "СпособВводаЗначений" Тогда
		Если СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания
			ИЛИ СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя Тогда
			СпрОбъект.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу;
		ИначеЕсли СпрОбъект.Ссылка = Справочники.уатПараметрыВыработки.ВнеРасписания Тогда
			СпрОбъект.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
		ИначеЕсли СпрОбъект.ДействуетНаТСМЛ ИЛИ СпрОбъект.ДействуетНаСотрудниковМЛ Тогда
			СпрОбъект.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

// Возвращает структуру с некоторыми их тех параметрами выработки, для которых по номеру этапа 
//  может происходить как суммирование, так и выбор максимального.
//  Используется для расчета по Путевым листам и ТТД.
// 
// Возвращаемое значение:
//   - 
//
Функция ПараметрыВыработкиСуммированиеПоЭтапам() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ВесГруза", Справочники.уатПараметрыВыработки.ВесГруза.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("Объем",    Справочники.уатПараметрыВыработки.Объем.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("КоличествоЕздок", Справочники.уатПараметрыВыработки.КоличествоЕздок.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("ПробегСГрузом", Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("ПробегПорожний", Справочники.уатПараметрыВыработки.ПробегПорожний.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("ПробегСПассажирами", Справочники.уатПараметрыВыработки.ПробегСПассажирами.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("КоличествоОпераций", Справочники.уатПараметрыВыработки.КоличествоОпераций.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("ФактическоеВремяОпоздания", Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.СпособРасчетаПоНомеруЭтапа = 0);
	Результат.Вставить("ФактическоеВремяПростоя", Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.СпособРасчетаПоНомеруЭтапа = 0);
		
	Возврат Результат;
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	мсвЗапрещенныеКВыбору = Новый Массив();
	
	Если НЕ Константы.уатИспользоватьOmnicomm.Получить()
			И НЕ Константы.уатИспользоватьWialon.Получить()
			И НЕ Константы.уатИспользоватьАвтоГРАФ.Получить()
			И НЕ Константы.уатИспользоватьСКАУТ.Получить()
			И НЕ Константы.уатИспользоватьЦСМ.Получить() Тогда 
		мсвЗапрещенныеКВыбору.Добавить(Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		мсвЗапрещенныеКВыбору.Добавить(Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
	КонецЕсли;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		мсвЗапрещенныеКВыбору.Добавить(Справочники.уатПараметрыВыработки.КоличествоКонтейнеров);
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ЗапрещенныеКВыбору", мсвЗапрещенныеКВыбору);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + Параметры.СтрокаПоиска + "%");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.Наименование
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	НЕ уатПараметрыВыработки.Ссылка В (&ЗапрещенныеКВыбору)
	|	И уатПараметрыВыработки.Наименование ПОДОБНО &СтрокаПодбора
	|	И %__ДопПараметры__%";
	
	ДопОтборы = "";
	Если Параметры.Свойство("Отбор") И Не Параметры.Отбор = Неопределено Тогда  
		Сч = 1;
		Для Каждого ТекОтбор Из Параметры.Отбор Цикл 
			ДопОтборы = ДопОтборы + ?(ДопОтборы="",""," И ")
				+ "уатПараметрыВыработки." + ТекОтбор.Ключ 
				+ ?(ТипЗнч(ТекОтбор.Значение) = Тип("Массив"), " В (&Парам", " = &Парам")
				+ Формат(Сч, "ЧН=0; ЧГ=0")
				+ ?(ТипЗнч(ТекОтбор.Значение) = Тип("Массив"), ")", "");
			Запрос.УстановитьПараметр("Парам" + Формат(Сч, "ЧН=0; ЧГ=0"), ТекОтбор.Значение);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ДопОтборы = "" Тогда 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%__ДопПараметры__%", "ИСТИНА");
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%__ДопПараметры__%", ДопОтборы);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(Параметры.СтрокаПоиска);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
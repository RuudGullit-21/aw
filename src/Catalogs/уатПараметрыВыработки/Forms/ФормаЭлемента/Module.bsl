
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Запрет на просмотр карточки параметра выработки для внешнего пользователя.
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если Не Отказ Тогда 
		Если Параметры.Ключ.Пустая() Тогда 
			Объект.Коэффициент = 1;
			Объект.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.НеРассчитывать;
		Иначе 
			Если Объект.Предопределенный Тогда 
				Элементы.ГруппаСпособРасчетаПараметровВыработки.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		мСпособРасчетаПараметраВыработки = Неопределено;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ИспользоватьВТарифахНаУслуги = Истина;
	КонецЕсли;
	
	УстановитьДоступностьФлаговИспользованияВДокументах();
	
	//Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Объект.Предопределенный;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() И Константы["уатИспользоватьЦСМ"].Получить() 
		И (РольДоступна("ItobАдминистраторМониторинга")
		ИЛИ РольДоступна("ПолныеПрава")) Тогда
		// ЦСМ +++
		
		ЭтаФорма.Элементы.УсловияОтбораПоказатель.СписокВыбора.Очистить();
		ЭтаФорма.Элементы.УсловияОтбораПоказатель.СписокВыбора.Добавить("Состояние");
		ЭтаФорма.Элементы.УсловияОтбораПоказатель.СписокВыбора.Добавить("Скорость");
		ЭтаФорма.Элементы.УсловияОтбораПоказатель.СписокВыбора.Добавить("Местонахождение");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ItobНазначенияДатчиков.Ссылка,
		|	ItobНазначенияДатчиков.Представление КАК Представление
		|ИЗ
		|	Справочник.ItobНазначенияДатчиков КАК ItobНазначенияДатчиков
		|ГДЕ
		|	(НЕ ItobНазначенияДатчиков.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЭтаФорма.Элементы.УсловияОтбораПоказатель.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);	
		КонецЦикла;	
		
		ВидСравненияРавно   = Перечисления.ItobВидыСравнения.Равно;
		ВидСравненияНеРавно = Перечисления.ItobВидыСравнения.НеРавно;
		
		// ЦСМ ---
	Иначе
		Элементы.ЦСМ.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеВысоты")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеДлины")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеШирины")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеВеса")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеОбъема")
		Тогда
		Элементы.Временный.Доступность = Ложь;
		Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеВеса") Тогда
			ЕИПорогаПревышения = Константы.уатЕдиницаИзмеренияВеса.Получить();
		ИначеЕсли Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПревышениеОбъема") Тогда
			ЕИПорогаПревышения = Константы.уатЕдиницаИзмеренияОбъема.Получить();
		Иначе
			ЕИПорогаПревышения = "м";
		КонецЕсли;
		
		Элементы.ДействуетНаТС.Доступность = Ложь;
		Элементы.ДействуетНаСотрудников.Доступность = Ложь;
		Элементы.ИспользоватьДляЗаказовИПотребности.Заголовок = "Заказ на ТС";
		Элементы.ИспользоватьДляЗаказовИПотребности.Подсказка =
			"Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документе ""Заказ на ТС""";
		Элементы.ИспользоватьДляМаршрутныхЛистов.Заголовок = "Маршрутный лист";
		Элементы.ИспользоватьДляМаршрутныхЛистов.Подсказка =
			"Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документе ""Маршрутный лист""";
		Элементы.ИспользоватьВТарифахНаУслуги.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.НочнаяДоставка") Тогда
		Элементы.Временный.Доступность = Ложь;
		Элементы.ДействуетНаТС.Доступность = Ложь;
		Элементы.ДействуетНаСотрудников.Доступность = Ложь;
		Элементы.ГруппаПорогПревышения.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПорогПревышения.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьОтборБазовыхПараметровВыработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПострочныйРасчетПоЗаказамНаТС = (Объект.СпособВводаЗначений = 
		ПредопределенноеЗначение("Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти"));
		
	УстановитьСписокСпособовРасчетаПараметровВыработки(Объект.Ссылка.Пустая());
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Записан параметр выработки", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДействуетНаТСПриИзменении(Элемент)
	
	УстановитьСписокСпособовРасчетаПараметровВыработки();
	Если НЕ Объект.ДействуетНаТС И НЕ Объект.ДействуетНаСотрудников Тогда
		Объект.ИспользоватьВСпецработахПЛ = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействуетНаСотрудниковПриИзменении(Элемент)
	
	УстановитьСписокСпособовРасчетаПараметровВыработки();
	Если НЕ Объект.ДействуетНаТС И НЕ Объект.ДействуетНаСотрудников Тогда
		Объект.ИспользоватьВСпецработахПЛ = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействуетНаТСМЛПриИзменении(Элемент)
	
	УстановитьСписокСпособовРасчетаПараметровВыработки();
	Если НЕ Объект.ДействуетНаТСМЛ И НЕ Объект.ДействуетНаСотрудниковМЛ Тогда
		Объект.ИспользоватьВДопВыработкеМЛ = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействуетНаСотрудниковМЛПриИзменении(Элемент)
	
	УстановитьСписокСпособовРасчетаПараметровВыработки();
	Если НЕ Объект.ДействуетНаТСМЛ И НЕ Объект.ДействуетНаСотрудниковМЛ Тогда
		Объект.ИспользоватьВДопВыработкеМЛ = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПострочныйРасчетПоЗаказамНаТСПриИзменении(Элемент)
	Объект.СпособВводаЗначений = ?(ПострочныйРасчетПоЗаказамНаТС,
		ПредопределенноеЗначение("Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти"),
		ПредопределенноеЗначение("Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу"));
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НаименованиеДляДокументов) Тогда
		Объект.НаименованиеДляДокументов = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулуНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеИсточника", Объект.АлгоритмРасчетаПараметра);
	ПараметрыФормы.Вставить("Заголовок", " (" + Объект.СпособРасчетаПараметровВыработки + ")");
	ПараметрыФормы.Вставить("СпособРасчетаПараметровВыработки", Объект.СпособРасчетаПараметровВыработки);
	ПараметрыФормы.Вставить("ПараметрВыработки", Объект.Ссылка);
	ОповещениеЗакрытие = Новый ОписаниеОповещения("РедактироватьФормулуЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатКонструкторФормул", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПараметровВыработкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.НеРассчитывать");
	Объект.АлгоритмРасчетаПараметра = "";
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПараметровВыработкиПриИзменении(Элемент)
	
	Если Не мСпособРасчетаПараметраВыработки = Объект.СпособРасчетаПараметровВыработки Тогда
		Объект.АлгоритмРасчетаПараметра = "";
		УстановитьВидимость();
	КонецЕсли;
	мСпособРасчетаПараметраВыработки = Объект.СпособРасчетаПараметровВыработки;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПараметровВыработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ДействуетНаТСМЛ
		И (Объект.ДействуетНаСотрудников Или Объект.ДействуетНаТС) Тогда
		ТекстНСТР = НСтр("en='For output parameters valid on both waybills and routing lists or orders automatic calculation is impossible'
						|;ru='Для параметров выработки, используемых одновремено в Путевых листах и Маршрутных листах или заказах, автоматический расчет недоступен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.СпособРасчетаПараметровВыработки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляМаршрутныхЛистовПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляЗаказовИПотребностиПриИзменении(Элемент)
	УстановитьСписокСпособовРасчетаПараметровВыработки();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВременныйПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПриПланированииПриИзменении(Элемент)
	Элементы.ГруппаПланирование.Видимость = Объект.ИспользоватьПриПланировании;
КонецПроцедуры

// ЦСМ +++

&НаКлиенте
Процедура УсловияОтбораПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если ВыбранноеЗначение = "Состояние" Тогда
			Если НЕ ТипЗнч(Элементы.УсловияОтбора.ТекущиеДанные.Значение) = Тип("ПеречислениеСсылка.ItobСостоянияТерминалов") Тогда
				Элементы.УсловияОтбора.ТекущиеДанные.Значение = ПустоеСостояниеТерминала;
			КонецЕсли;			
		ИначеЕсли ВыбранноеЗначение = "Скорость" Тогда
			Если НЕ ТипЗнч(Элементы.УсловияОтбора.ТекущиеДанные.Значение) = Тип("Число") Тогда
				Элементы.УсловияОтбора.ТекущиеДанные.Значение = 0;
			КонецЕсли;			
		ИначеЕсли ВыбранноеЗначение = "Местонахождение" Тогда
			Если НЕ ТипЗнч(Элементы.УсловияОтбора.ТекущиеДанные.Значение) = Тип("СправочникСсылка."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны")) Тогда
				Элементы.УсловияОтбора.ТекущиеДанные.Значение = ПустаяГеографическаяЗона;
			КонецЕсли;
			Если НЕ Элементы.УсловияОтбора.ТекущиеДанные.ВидСравнения = ВидСравненияРавно
				И НЕ Элементы.УсловияОтбора.ТекущиеДанные.ВидСравнения = ВидСравненияНеРавно Тогда			
				Элементы.УсловияОтбора.ТекущиеДанные.ВидСравнения = ВидСравненияРавно;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(Элементы.УсловияОтбора.ТекущиеДанные.Значение) <> Тип("Число") Тогда
			Элементы.УсловияОтбора.ТекущиеДанные.Значение = 0;			
		
		КонецЕсли;		
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПараметраПриИзменении(Элемент)
	
	УстановитьВидимость();	
	
КонецПроцедуры

// ЦСМ ---
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ГруппаПланирование.Видимость = Объект.ИспользоватьПриПланировании;
	
	Элементы.ПараметрВыработкиОС.Доступность = Объект.ДействуетНаТС;
	
	флВозможностьИспользованияВУслугах = (НЕ Объект.Предопределенный)
		ИЛИ ПараметрыВыработкиАвтоРасчетУслуг().Найти(Объект.Ссылка) <> Неопределено;
	
	Элементы.ГруппаРасчетТранспортныхУслуг.Видимость = флВозможностьИспользованияВУслугах;
	Элементы.ИспользоватьДляЗаказовИПотребности.Доступность = флВозможностьИспользованияВУслугах;
	Элементы.ИспользоватьДляМаршрутныхЛистов.Доступность = флВозможностьИспользованияВУслугах;
		
	//флНетРасчетаВыработки = (Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка"));
	//
	//Элементы.ДекорацияНетРасчетаВыработки.Видимость = флНетРасчетаВыработки;
	//Элементы.ГруппаЕстьРасчетВыработки.Видимость = Не флНетРасчетаВыработки;
	//Элементы.ИспользоватьВТарифахНаУслуги.Видимость = Объект.Ссылка <> ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка");
	
	флСкладскаяОбработка = (Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка"));
	Элементы.ДействуетНаТС.Видимость = НЕ флСкладскаяОбработка;
	Элементы.ДействуетНаСотрудников.Видимость = НЕ флСкладскаяОбработка;
	Элементы.ДействуетНаТСМЛ.Видимость = НЕ флСкладскаяОбработка;
	Элементы.ДействуетНаСотрудниковМЛ.Видимость = НЕ флСкладскаяОбработка;
	Элементы.ГруппаСпособРасчетаПоНомеруЭтапа.Видимость = НЕ флСкладскаяОбработка;
	
	Элементы.ПострочныйРасчетПоЗаказамНаТС.Видимость = (Объект.ДействуетНаТСМЛ ИЛИ Объект.ДействуетНаСотрудниковМЛ)
		И Объект.Ссылка <> ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СтоимостьГруза");
	Элементы.СпособРасчетаПараметровВыработки.Доступность =
		(Объект.ДействуетНаСотрудников ИЛИ Объект.ДействуетНаТС
		ИЛИ Объект.ДействуетНаТСМЛ ИЛИ Объект.ДействуетНаСотрудниковМЛ
		ИЛИ Объект.ИспользоватьДляЗаказовИПотребности ИЛИ Объект.СводныйПоказатель);
	
	Если Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.НеРассчитывать")
		ИЛИ Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута")
		ИЛИ Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта")
		ИЛИ Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки")
		ИЛИ Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера")
		ИЛИ Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоПараметруВыработки") Тогда 
		Элементы.ГруппаФормулаРасчета.Видимость = Ложь;
		Элементы.ГруппаФормулаРасчетаПояснение.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаФормулаРасчета.Видимость = Истина;
		Элементы.ГруппаФормулаРасчетаПояснение.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ВидУпаковки.Видимость = 
		Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки");
	Элементы.ТипКонтейнера.Видимость = 
		Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера");
	Элементы.ТипПункта.Видимость = 
		Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта");
	Элементы.ТипТочкиМаршрута.Видимость =
		Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута");
	Элементы.БазовыйПараметрВыработки.Видимость =
		Объект.СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоПараметруВыработки");
		
	Если НЕ Объект.Предопределенный
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоЕздок")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВесГруза")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.Объем")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСПассажирами")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы2")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы3")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы4")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы5")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоОпераций")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ФактическоеВремяОпоздания")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ФактическоеВремяПростоя") Тогда
		Элементы.ГруппаСпособРасчетаПоНомеруЭтапа.Видимость = (Объект.ДействуетНаСотрудников Или Объект.ДействуетНаТС);
	Иначе
		Элементы.ГруппаСпособРасчетаПоНомеруЭтапа.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИсточникПолученияФактЗначенийДляСобственногоТС.Видимость
		= НЕ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоПривлеченныхТС");
	Элементы.ИсточникПолученияФактЗначенийДляПривлТС.Видимость
		= НЕ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоСобственныхТС");
		
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоПривлеченныхТС") Тогда
		Элементы.ИсточникПолученияФактЗначенийДляПривлТС.Доступность = Ложь;
	Иначе
		Элементы.ИсточникПолученияФактЗначенийДляПривлТС.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоВодителей") Тогда
		Элементы.ИсточникПолученияФактЗначенийДляПривлТС.Видимость = Ложь;
		Элементы.ИсточникПолученияФактЗначенийДляСобственногоТС.Заголовок = Нстр("ru = 'Источник получения фактических значений'");
	КонецЕсли;
	
	Элементы.ГруппаТипыТочекРасчетаВыработки.Видимость = Объект.ДействуетНаТСМЛ
		И (Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ФактическоеВремяОпоздания")
		Или Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ФактическоеВремяПростоя"));
		
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы[ПолучитьИмяТекущейСтраницы()];
	Элементы.УвеличитьОбщийПробегНаПробегСпец.Видимость =
		Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы2")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы3")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы4")
		ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСпециальнойРаботы5")
		ИЛИ (НЕ Объект.Предопределенный И НЕ Объект.Временный);
		
	Элементы.ОтображениеВВидеФлага.Видимость = НЕ Объект.Предопределенный;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.Наценка") Тогда
		Элементы.ГруппаНаценкаПояснение.Видимость = Истина;
		Элементы.ГруппаРасчетВыработкиВПЛ.Видимость = Ложь;
		Элементы.ГруппаРасчетТранспортныхУслуг.Видимость = Ложь;
		Элементы.ГруппаСтраницаПланирование.Видимость = Ложь;
		Элементы.ЦСМ.Видимость = Ложь;
	КонецЕсли;
		
	Элементы.ИспользоватьВСпецработахПЛ.Видимость  = (Объект.ДействуетНаТС   ИЛИ Объект.ДействуетНаСотрудников);
	Элементы.ИспользоватьВДопВыработкеМЛ.Видимость = (Объект.ДействуетНаТСМЛ ИЛИ Объект.ДействуетНаСотрудниковМЛ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыработкиАвтоРасчетУслуг()
	Возврат Справочники.уатПараметрыВыработки.ПараметрыВыработкиАвтоРасчетУслуг();
КонецФункции

&НаСервере
Процедура УстановитьДоступностьФлаговИспользованияВДокументах()
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		Если РасчетВыработкиВСтраховомСертификате() Тогда
			Элементы.ИспользоватьДляЗаказовИПотребности.Заголовок =
				НСтр("en='""Order for trucking"", ""Order for carrier"" (by orders for trucking), ""Need for the carriage"", ""Insurance certificate""';" +
					"ru='""Заказ на ТС"", ""Заказ перевозчику"" (по заказам на ТС), ""Потребность в перевозке"", ""Страховой сертификат""'");
			Элементы.ИспользоватьДляЗаказовИПотребности.Подсказка =
				НСтр("en='Parameter will be used for the calculation of transportation services according to price lists in documents" +
					" ""Order for trucking"", ""Order to carrier (by order for trucking)"", ""Need for the carriage"", ""Insurance certificate""';" +
					"ru='Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документах" +
					" ""Заказ на ТС"", ""Заказ перевозчику (по заказам на ТС)"", ""Потребность в перевозке"", ""Страховой сертификат""'");
		Иначе
			Элементы.ИспользоватьДляЗаказовИПотребности.Заголовок =
				НСтр("en='""Order for trucking"", ""Order for carrier"" (by orders for trucking), ""Need for the carriage""';" +
					 "ru='""Заказ на ТС"", ""Заказ перевозчику"" (по заказам на ТС), ""Потребность в перевозке""'");
			Элементы.ИспользоватьДляЗаказовИПотребности.Подсказка =
				НСтр("en='Parameter will be used for the calculation of transportation services according to price lists" +
				" in documents ""Order for trucking"", ""Order to carrier (by order for trucking)"", ""Need for the carriage""';" +
					 "ru='Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документах" +
					 " ""Заказ на ТС"", ""Заказ перевозчику (по заказам на ТС)"", ""Потребность в перевозке""'");
		КонецЕсли;
		Элементы.ИспользоватьДляМаршрутныхЛистов.Подсказка = НСтр("en='Parameter will be used in the calculation of the transport services on price lists by documents ""routing list"", ""order the carrier (by routing lists)""';ru='Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документах ""Маршрутный лист"", ""Заказ перевозчику (по маршрутным листам)""'");
	Иначе 
		Элементы.ИспользоватьДляЗаказовИПотребности.Заголовок = НСтр("en='""Orders for trucking"", ""Order for the carrier"" (by orders for trucking)';ru='""Заказ на ТС"", ""Заказ перевозчику"" (по заказам на ТС)'");
		Элементы.ИспользоватьДляЗаказовИПотребности.Подсказка = НСтр("en='Parameter will be used for the calculation of transportation services according to price lists in documents ""Order for trucking"" and ""Order to carrier (by order for trucking)""';ru='Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документах ""Заказ на ТС"", ""Заказ перевозчику (по заказам на ТС)""'");
		Элементы.ИспользоватьДляМаршрутныхЛистов.Подсказка = НСтр("en='Parameter will be used in the calculation of the transport services on price lists by documents ""routing list"", ""order the carrier (by routing lists)""';ru='Параметр будет использоваться при расчете транспортных услуг по прейскурантам в документах ""Маршрутный лист"", ""Заказ перевозчику (по маршрутным листам)""'");
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АдминистраторСистемы") ИЛИ Объект.Ссылка.Пустая() Тогда
		Элементы.ИспользоватьДляЗаказовИПотребности.ТолькоПросмотр = Ложь;
		Элементы.ИспользоватьДляМаршрутныхЛистов.ТолькоПросмотр    = Ложь;
		Элементы.ПострочныйРасчетПоЗаказамНаТС.ТолькоПросмотр      = Ложь;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|ГДЕ
		|	(уатЗаказГрузоотправителя.Услуги.Тариф.ПараметрВыработки = &Ссылка
		|			ИЛИ уатЗаказГрузоотправителя.Расходы.Тариф.ПараметрВыработки = &Ссылка)
		|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатЗаказПеревозчику_уэ.Ссылка
		|ИЗ
		|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
		|ГДЕ
		|	уатЗаказПеревозчику_уэ.МаршрутныйЛист = ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)
		|	И уатЗаказПеревозчику_уэ.Расходы.Тариф.ПараметрВыработки = &Ссылка
		|	И НЕ уатЗаказПеревозчику_уэ.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатПотребностьВПеревозке_уэ.Ссылка
		|ИЗ
		|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
		|ГДЕ
		|	уатПотребностьВПеревозке_уэ.Услуги.Тариф.ПараметрВыработки = &Ссылка
		|	И НЕ уатПотребностьВПеревозке_уэ.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Элементы.ИспользоватьДляЗаказовИПотребности.ТолькоПросмотр = Истина;
			Элементы.ИспользоватьДляЗаказовИПотребности.Подсказка = Элементы.ИспользоватьДляЗаказовИПотребности.Подсказка + Символы.ПС + 
			НСтр("en='It is prohibited to change flag - output parameter is used in accounting!';ru='Изменение флага запрещено - параметр выработки используется в учете!'");
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатМаршрутныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
		|ГДЕ
		|	(уатМаршрутныйЛист.Доходы.Тариф.ПараметрВыработки = &Ссылка
		|			ИЛИ уатМаршрутныйЛист.Расходы.Тариф.ПараметрВыработки = &Ссылка
		|			ИЛИ уатМаршрутныйЛист.ВыработкаТСиСотрудников.ПараметрВыработки = &Ссылка)
		|	И НЕ уатМаршрутныйЛист.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатЗаказПеревозчику_уэ.Ссылка
		|ИЗ
		|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
		|ГДЕ
		|	уатЗаказПеревозчику_уэ.МаршрутныйЛист <> ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)
		|	И уатЗаказПеревозчику_уэ.Расходы.Тариф.ПараметрВыработки = &Ссылка
		|	И НЕ уатЗаказПеревозчику_уэ.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Элементы.ИспользоватьДляМаршрутныхЛистов.ТолькоПросмотр = Истина;
			Элементы.ИспользоватьДляМаршрутныхЛистов.Подсказка = Элементы.ИспользоватьДляМаршрутныхЛистов.Подсказка + Символы.ПС + 
			НСтр("en='It is prohibited to change flag - output parameter is used in accounting!';ru='Изменение флага запрещено - параметр выработки используется в учете!'");
			Элементы.ПострочныйРасчетПоЗаказамНаТС.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулуЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.АлгоритмРасчетаПараметра = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокСпособовРасчетаПараметровВыработки(ИзменятьДанные = Истина)
	
	Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Очистить();
	Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.НеРассчитывать"));
	Если НЕ Объект.ДействуетНаСотрудников И НЕ Объект.ДействуетНаТС Тогда
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута"));
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки"));
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
			Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера"));
		КонецЕсли;
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта"));
	КонецЕсли;
	Если (Объект.ДействуетНаСотрудников ИЛИ Объект.ДействуетНаТС)
		И НЕ (Объект.ДействуетНаТСМЛ ИЛИ Объект.ДействуетНаСотрудниковМЛ ИЛИ Объект.ИспользоватьДляЗаказовИПотребности) Тогда
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоШапке"));
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаданию"));
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоТТД"));
	ИначеЕсли (Объект.ДействуетНаТСМЛ ИЛИ Объект.ДействуетНаСотрудниковМЛ ИЛИ Объект.ИспользоватьДляЗаказовИПотребности)
		И НЕ (Объект.ДействуетНаСотрудников ИЛИ Объект.ДействуетНаТС) Тогда
		Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаказамИМаршрутнымЛистам"));
		Если НЕ Объект.Предопределенный Тогда
			Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоПараметруВыработки"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменятьДанные И Элементы.СпособРасчетаПараметровВыработки.СписокВыбора.НайтиПоЗначению(
		Объект.СпособРасчетаПараметровВыработки) = Неопределено Тогда
		
		Объект.СпособРасчетаПараметровВыработки =
			ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.НеРассчитывать");
		Объект.АлгоритмРасчетаПараметра = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборБазовыхПараметровВыработки()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.Предопределенный
	|	И (уатПараметрыВыработки.ДействуетНаСотрудниковМЛ
	|			ИЛИ уатПараметрыВыработки.ДействуетНаТСМЛ)");
	
	мсвПВ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", мсвПВ);
	мсвПараметрыВыбора = Новый Массив;
	мсвПараметрыВыбора.Добавить(НовыйПараметр);
	Элементы.БазовыйПараметрВыработки.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяТекущейСтраницы()

	Возврат ?(Объект.ВидПараметра=Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика
		ИЛИ Объект.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ПодсчетИмпульсов, "Датчик", "Отбор");

КонецФункции // ПолучитьИмяТекущейСтраницы()

&НаСервере
Функция РасчетВыработкиВСтраховомСертификате()
	мсвРез = Новый Массив;
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.ВесГруза);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.Объем);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.КоличествоУпаковок);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.СтоимостьГруза);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.КоличествоЗаказов);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.ВремяВРаботе);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.ПробегСГрузом);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.ПробегОбщий);
	мсвРез.Добавить(Справочники.уатПараметрыВыработки.НочнаяДоставка);
	
	Возврат мсвРез.Найти(Объект.Ссылка) <> Неопределено;
КонецФункции
	
#КонецОбласти


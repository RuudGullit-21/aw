#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает таблицу с планируемыми и фактическими задачами
//
// Параметры:
//  МодельБюджетирования			 - 		 - 
//  НаДату							 - Дата	 - Дата по которую (включительно) будет построено расписание
//  ДополнятьФактическимиЗадачами	 - Булево	 - если ИСТИНА - то будут заполнены данные о фактических задачах
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Расписание бюджетного процесса с даты начала действия модели по параметр "НаДату"
//
Функция ПолучитьБюджетныеЗадачи(Знач МодельБюджетирования, Знач НаДату, Знач ДополнятьФактическимиЗадачами = Ложь) Экспорт
	
	НачалоДействияМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "НачалоДействия");
	Если Не ЗначениеЗаполнено(НачалоДействияМодели) Тогда
		Возврат ПолучитьТаблицуЗадач();
	КонецЕсли;
	
	ТаблицаРезультат = ПолучитьТаблицуЗадачБюджетирования(МодельБюджетирования, НачалоДействияМодели, НаДату, ДополнятьФактическимиЗадачами);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу со связями задач между собой
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений	 - таблица, полученная функцией "ПолучитьБюджетныеЗадачи"
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица связей между задачами
//
Функция ПолучитьТаблицуСвязейЗадач(ТаблицаЗадач) Экспорт
	
	ТаблицаСвязейЗадач = Новый ТаблицаЗначений;
	ТаблицаСвязейЗадач.Колонки.Добавить("ПредыдущаяЗадача", Новый ОписаниеТипов("Число"));
	ТаблицаСвязейЗадач.Колонки.Добавить("Задача", 			Новый ОписаниеТипов("Число"));
	ТаблицаСвязейЗадач.Колонки.Добавить("СледующаяЗадача", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаЗадачи из ТаблицаЗадач Цикл
		НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
		НоваяСтрока.Задача = СтрокаЗадачи.НомерЗадачи;
		ТаблицаПредыдущих = СтрокаЗадачи.ПредыдущиеЗадачи;
		Если ЗначениеЗаполнено(ТаблицаПредыдущих) Тогда
			Для Каждого ПредыдущаяЗадача из ТаблицаПредыдущих Цикл
				НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
				НоваяСтрока.Задача = СтрокаЗадачи.НомерЗадачи;
				НоваяСтрока.ПредыдущаяЗадача = ПредыдущаяЗадача.НомерЗадачи;
				НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
				НоваяСтрока.Задача = ПредыдущаяЗадача.НомерЗадачи;
				НоваяСтрока.СледующаяЗадача = СтрокаЗадачи.НомерЗадачи;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСвязейЗадач.Сортировать("Задача, ПредыдущаяЗадача, СледующаяЗадача");
	
	Возврат ТаблицаСвязейЗадач;
	
КонецФункции

// Проверяет, действует ли модель бюджетирования в периоде
//
// Параметры:
//  МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Модель бюджетирования для проверки
//  НачалоПериода		 - Дата									 - Дата начала периода, для которого необходимо выполнить проверку
//  ОкончаниеПериода	 - Дата									 - Дата окончания периода, для которого необходимо выполнить проверку
// 
// Возвращаемое значение:
//  Истина - Модель бюджетирования действует
//  Ложь - Модель бюджетирования не действует
//
Функция МодельБюджетированияДействует(МодельБюджетирования, НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Ссылка = &МодельБюджетирования
	|	И МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &НачалоПериода
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|		ИЛИ &ОкончаниеПериода = &ПустаяДата
	|		ИЛИ МоделиБюджетирования.КонецДействия >= &ОкончаниеПериода)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ?(ЗначениеЗаполнено(ОкончаниеПериода), ОкончаниеПериода, '00010101000000'));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	РезультаЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультаЗапроса.Пустой(); 
	
КонецФункции

// Возвращает количество действующих моделей бюджетирования для периода
//
// Параметры:
//  НачалоПериода	 - Дата	 - Дата начала периода, для которого необходимо получить количество действующих моделей
//  ОкончаниеПериода - Дата	 - Дата окончания периода, для которого необходимо получить количество действующих моделей
// 
// Возвращаемое значение:
//  Число - Количество действующих соглашений
//
Функция КоличествоДействующихМоделейБюджетирования(Знач НачалоПериода = Неопределено, Знач ОкончаниеПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &НачалоПериода
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|		ИЛИ МоделиБюджетирования.КонецДействия >= &ОкончаниеПериода)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления";
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		ОкончаниеПериода = НачалоПериода;
	КонецЕсли;

	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

// Получает действующую модель бюджетирования, если она одна в справочнике.
//
// Параметры:
//  НачалоПериода	 - Дата	 - Дата начала периода, для которого необходимо получить модель по умолчанию
//  ОкончаниеПериода - Дата	 - Дата окончания периода, для которого необходимо получить модель по умолчанию
// 
// Возвращаемое значение:
//  СправочникСсылка.МодельБюджетирования - Модель бюджетирования по умолчанию
//  Неопределено - Если действующих моделей бюджетирования нет или их больше одной
//
Функция МодельБюджетированияПоУмолчанию(Знач НачалоПериода = Неопределено, Знач ОкончаниеПериода = Неопределено) Экспорт
	
	МодельБюджетирования = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &НачалоПериода
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|		ИЛИ МоделиБюджетирования.КонецДействия >= &ОкончаниеПериода)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления";
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		ОкончаниеПериода = НачалоПериода;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПустаяДата",       '00010101000000');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		МодельБюджетирования = Выборка.МодельБюджетирования;
	КонецЕсли;
	
	Возврат МодельБюджетирования;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//  
//  Возвращаемое значание:
//  Массив - имена блокируемых реквизитов
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Периодичность");
	Результат.Добавить("НачалоДействия");
	Результат.Добавить("БюджетыПоОрганизациям");
	Результат.Добавить("БюджетыПоПодразделениям");
	
	Возврат Результат;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УП 2.0.4.6
//  
//  Обороты по Моделям, пересекающимся по периоду действия, разносятся на различные сценарии.
//  Модели, пересекающиеся по периоду действия, закрываются.
//
Процедура ОбработатьМоделиПересекающиесяПоПериодуДействия() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МоделиБюджетирования.Ссылка
	|ПОМЕСТИТЬ МоделиБюджетирования
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МоделиБюджетирования КАК ПересекающиесяМодели
	|		ПО МоделиБюджетирования.Ссылка <> ПересекающиесяМодели.Ссылка
	|			И (НЕ ПересекающиесяМодели.ПометкаУдаления)
	|			И (ПересекающиесяМодели.Статус = &Действует)
	|			И (ПересекающиесяМодели.НачалоДействия МЕЖДУ МоделиБюджетирования.НачалоДействия И МоделиБюджетирования.КонецДействия
	|				ИЛИ ПересекающиесяМодели.КонецДействия МЕЖДУ МоделиБюджетирования.НачалоДействия И МоделиБюджетирования.КонецДействия
	|				ИЛИ ПересекающиесяМодели.НачалоДействия <= МоделиБюджетирования.НачалоДействия
	|					И (ПересекающиесяМодели.КонецДействия >= МоделиБюджетирования.КонецДействия
	|						ИЛИ ПересекающиесяМодели.КонецДействия = &ПустаяДата)
	|				ИЛИ МоделиБюджетирования.КонецДействия = &ПустаяДата
	|					И ПересекающиесяМодели.КонецДействия >= МоделиБюджетирования.НачалоДействия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭкземплярБюджет.МодельБюджетирования) КАК МодельБюджетирования,
	|	ЭкземплярБюджет.Сценарий
	|ПОМЕСТИТЬ СценарииИспользуемыеДляНесколькихМоделей
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МоделиБюджетирования КАК МоделиБюджетирования
	|		ПО ЭкземплярБюджет.МодельБюджетирования = МоделиБюджетирования.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭкземплярБюджет.Сценарий
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭкземплярБюджет.МодельБюджетирования) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭкземплярБюджета.Ссылка,
	|	ЭкземплярБюджета.МодельБюджетирования,
	|	ЭкземплярБюджета.Сценарий
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МоделиБюджетирования КАК МоделиБюджетирования
	|		ПО ЭкземплярБюджета.МодельБюджетирования = МоделиБюджетирования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СценарииИспользуемыеДляНесколькихМоделей КАК СценарииИспользуемыеДляНесколькихМоделей
	|		ПО ЭкземплярБюджета.Сценарий = СценарииИспользуемыеДляНесколькихМоделей.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МоделиБюджетирования.Ссылка
	|ИЗ
	|	МоделиБюджетирования КАК МоделиБюджетирования";
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	Запрос.УстановитьПараметр("Действует", Перечисления.СтатусыМоделейБюджетирования.Действует);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[2].Выбрать();
	ТаблицаСценариев = Новый ТаблицаЗначений;
	ТаблицаСценариев.Колонки.Добавить("МодельБюджетирования", Новый ОписаниеТипов("СправочникСсылка.МоделиБюджетирования"));
	ТаблицаСценариев.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ТаблицаСценариев.Колонки.Добавить("СценарийПоМодели", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ПараметрыПоиска = Новый Структура("МодельБюджетирования, Сценарий");
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Выборка);
		РезультатПоиска = ТаблицаСценариев.НайтиСтроки(ПараметрыПоиска);
		Если РезультатПоиска.Количество() Тогда
			НовыйСценарий = РезультатПоиска[0].СценарийПоМодели;
		Иначе
			// Создадим новый сценарий
			РеквизитыТекущегоСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Сценарий, 
				"Наименование, Периодичность, Валюта, ИспользоватьКурсыДругогоСценария, СценарийКурсов");
			НовыйСценарийОбъект = Справочники.Сценарии.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйСценарийОбъект, РеквизитыТекущегоСценария);
			НовыйСценарийОбъект.Наименование = Строка(Выборка.МодельБюджетирования) + " - " + НовыйСценарийОбъект.Наименование;
			НовыйСценарийОбъект.Записать();
			
			НовыйСценарий = НовыйСценарийОбъект.Ссылка;
			
			ПрогнозныеКурсыТекущегоСценария = РегистрыСведений.ПрогнозныеКурсыСценариев.СоздатьНаборЗаписей();
			ПрогнозныеКурсыТекущегоСценария.Отбор.Сценарий.Установить(Выборка.Сценарий);
			ПрогнозныеКурсыТекущегоСценария.Прочитать();
			
			ПрогнозныеКурсыНовогоСценария = РегистрыСведений.ПрогнозныеКурсыСценариев.СоздатьНаборЗаписей();
			ПрогнозныеКурсыНовогоСценария.Отбор.Сценарий.Установить(НовыйСценарий);
			Для каждого Запись Из ПрогнозныеКурсыТекущегоСценария Цикл
				НоваяЗапись = ПрогнозныеКурсыНовогоСценария.Добавить();
				НоваяЗапись.Сценарий = НовыйСценарий;
				НоваяЗапись.Валюта = Запись.Валюта;
				НоваяЗапись.Курс = Запись.Курс;
				НоваяЗапись.Кратность = Запись.Кратность;
			КонецЦикла;
			ПрогнозныеКурсыНовогоСценария.Записать();
			
			НоваяСтрокаТаблицыСценариев = ТаблицаСценариев.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыСценариев, Выборка);
			НоваяСтрокаТаблицыСценариев.СценарийПоМодели = НовыйСценарий;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Сценарий = НовыйСценарий;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			НаборЗаписей = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.Сценарий = НовыйСценарий;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
			
	КонецЦикла;
	
	// Переведем пересекающиеся модели в статус "Закрыта"
	Выборка = Результаты[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Перечисления.СтатусыМоделейБюджетирования.Закрыта;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем Дата, НачалоПериода, ОкончаниеПериода;
	
	Если Параметры.Свойство("Дата", Дата) Тогда
		
		СтандартнаяОбработка = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоделиБюджетирования.ПометкаУдаления КАК ПометкаУдаления,
		|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования,
		|	МоделиБюджетирования.Представление КАК ТекстПредставление
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.Статус = &Статус
		|	И МоделиБюджетирования.НачалоДействия <= &Дата
		|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
		|			ИЛИ МоделиБюджетирования.КонецДействия >= &Дата)";
		
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
		Запрос.УстановитьПараметр("Дата",   Дата);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	ИначеЕсли Параметры.Свойство("НачалоПериода", НачалоПериода) И Параметры.Свойство("ОкончаниеПериода", ОкончаниеПериода) Тогда
		 
		СтандартнаяОбработка = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоделиБюджетирования.ПометкаУдаления КАК ПометкаУдаления,
		|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования,
		|	МоделиБюджетирования.Представление КАК ТекстПредставление
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.Статус = &Статус
		|	И МоделиБюджетирования.НачалоДействия <= &НачалоПериода
		|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
		|			ИЛИ МоделиБюджетирования.КонецДействия >= &ОкончаниеПериода)";
		
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		ДанныеВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда
				ДанныеВыбора.Добавить(
					Новый Структура("Значение, ПометкаУдаления", Выборка.МодельБюджетирования, Выборка.ПометкаУдаления),
					Выборка.ТекстПредставление, 
					, 
					БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
			Иначе
				ДанныеВыбора.Добавить(Выборка.МодельБюджетирования, Выборка.ТекстПредставление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область МеханизмФормированияБюджетногоРасписанияСлужебныеПроцедуры

Функция ПолучитьДатуПоКалендарю(МенеджерГрафика, Дата, Отклонение)
	
	Возврат Дата + Отклонение*24*3600;
	
КонецФункции

Функция ТаблицуНомеровЗадачВСтроку(ТаблицаНомеровЗадач)
	
	Результат = "";
	Для Каждого СтрокаЗадачи из ТаблицаНомеровЗадач Цикл
		Результат = Результат + "| " + СтрокаЗадачи.НомерЗадачи + " |";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуЗадач()
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("НомерЗадачи", 				Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("ШагПроцесса", 				Новый ОписаниеТипов("СправочникСсылка.ШагиБюджетныхПроцессов"));
	ТаблицаЗадач.Колонки.Добавить("Действие", 					Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДействийШаговБюджетныхПроцессов"));
	ТаблицаЗадач.Колонки.Добавить("Исполнитель", 				Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗадач.Колонки.Добавить("Периодичность", 				Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаЗадач.Колонки.Добавить("НастройкаДействия");			// Хранилище значений
	
	ТаблицаЗадач.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ПериодСтрокой", 				Новый ОписаниеТипов("Строка"));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачала", 				Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончания", 				Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Колонки.Добавить("ПредыдущиеЗадачиСтрокой", 	Новый ОписаниеТипов("Строка"));
	ТаблицаЗадач.Колонки.Добавить("ПредыдущиеЗадачи");			// Таблица значений
	
	ТаблицаЗадач.Колонки.Добавить("Задача", 					Новый ОписаниеТипов("ЗадачаСсылка.БюджетнаяЗадача"));
	//ОписаниеТиповДокумент = Новый ОписаниеТипов("ДокументСсылка.ЭкземплярБюджета, ДокументСсылка.ПланЗакупок,
	//	|ДокументСсылка.ПланПродаж, ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланСборкиРазборки");
	ОписаниеТиповДокумент = Новый ОписаниеТипов("ДокументСсылка.ЭкземплярБюджета");
	ТаблицаЗадач.Колонки.Добавить("Документ", 					ОписаниеТиповДокумент);
	ТаблицаЗадач.Колонки.Добавить("ЗадачаВыполнена", 			Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачалаФакт", 			Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончанияФакт", 			Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Индексы.Добавить("НомерЗадачи");
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция ПолучитьПериодЗадачи(Выборка, ТаблицаЗадач, МенеджерГрафика, 
								ПараметрыПериодаГруппы, ТаблицаПредыдущихЗадач, ДополнитьФактом = Ложь, СведенияОФакте = Неопределено)
								
	Если ДополнитьФактом И СведенияОФакте <> Неопределено Тогда
		ДатаОкончания = СведенияОФакте.ДатаОкончания;
		Если Не СведенияОФакте.Выполнена Тогда
			ДатаОкончания = КонецДня(ТекущаяДата());
		КонецЕсли;
		Возврат Новый Структура("ДатаНачалаЗадачи, ДатаОкончанияЗадачи", СведенияОФакте.ДатаНачала, ДатаОкончания);
	КонецЕсли;
								
	Если Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоНачалаПериода
		ИЛИ Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ПослеНачалаПериода Тогда
		ДатаНачалаЗадачи = ПараметрыПериодаГруппы.ДатаНачала;
	Иначе
		ДатаНачалаЗадачи = КонецДня(ПараметрыПериодаГруппы.ДатаОкончания) + 1;
	КонецЕсли;
	
	Если Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоНачалаПериода
		ИЛИ Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаШаговБюджетногоПроцесса.ДоОкончанияПериода Тогда
		Знак = -1;
	Иначе
		Знак = 1;
	КонецЕсли;
	
	Если Выборка.ТипСрока = Перечисления.ТипыСроковШаговБюджетногоПроцесса.ВРабочихДнях Тогда
		ДатаНачалаЗадачи = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаНачалаЗадачи, Знак * Выборка.Срок);
	Иначе
		ДатаНачалаЗадачи = ДатаНачалаЗадачи + Знак * Выборка.Срок * 86400;
	КонецЕсли;
	
	Если ДополнитьФактом Тогда
		ДатаПредыдущейЗадачи = ТекущаяДата();
	Иначе
		ДатаПредыдущейЗадачи = Дата(1, 1, 1);
	КонецЕсли;
	Для Каждого СтрокаТаблицы из ТаблицаПредыдущихЗадач Цикл
		НайденнаяСтрока = ТаблицаЗадач.Найти(СтрокаТаблицы.НомерЗадачи, "НомерЗадачи");
		ДатаОкончания = Неопределено;
		Если ДополнитьФактом Тогда
			ДатаОкончания = НайденнаяСтрока.ДатаОкончанияФакт;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = НайденнаяСтрока.ДатаОкончания;
		КонецЕсли;
		ДатаПредыдущейЗадачи = Макс(ДатаПредыдущейЗадачи, ДатаОкончания);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаПредыдущейЗадачи) Тогда
		ДатаНачалаЗадачи = Макс(ДатаНачалаЗадачи, ДатаПредыдущейЗадачи + 1);
	КонецЕсли;
	
	Если Выборка.ТипДлительности = Перечисления.ТипыСроковШаговБюджетногоПроцесса.ВРабочихДнях Тогда
		ДатаОкончанияЗадачи = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаНачалаЗадачи, Выборка.Длительность);
	Иначе
		ДатаОкончанияЗадачи = ДатаНачалаЗадачи + Выборка.Длительность * 86400;
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачалаЗадачи, ДатаОкончанияЗадачи", НачалоДня(ДатаНачалаЗадачи), КонецДня(ДатаОкончанияЗадачи));
	
КонецФункции

#КонецОбласти

#Область МеханизмФормированияБюджетногоРасписанияЗаполнениеТаблицыРасписания

// Функция добавляет в таблицу планируемых задач строку
//	выполняет следующие действия:
//	1. добавляет строку планируемой задачи
//	2. заполняет сведения о фактическом исполнении шага, если в параметрах есть флаг "дополнять фактом"
//
// Параметры
//  Выборка  						- ДеревоЗначений - результат запроса к справочнику "Шаги бюджетного процесса" с иерархией шагов
//  ПараметрыТаблицыЗадач  			- Структура - содержит таблицу с задачами и флаг "дополнять фактом"
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  ТаблицаПредыдущихЗадач  		- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи
//		
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа или задача будет считаться выполненой
//
Функция ДобавитьСтрокуПлановойЗадачи(Выборка, ПараметрыТаблицыЗадач, МенеджерГрафика, ПараметрыПериодаГруппы, ТаблицаПредыдущихЗадач)
	
	ТаблицаЗадач = ПараметрыТаблицыЗадач.ТаблицаЗадач;
	
	НоваяСтрока 						= ТаблицаЗадач.Добавить();
	НоваяСтрока.НомерЗадачи 			= ТаблицаЗадач.Количество();
	НоваяСтрока.ШагПроцесса 			= Выборка.ШагПроцесса;
	НоваяСтрока.Действие 				= Выборка.Действие;
	НоваяСтрока.НастройкаДействия 		= Выборка.НастройкаДействия;
	НоваяСтрока.Исполнитель 			= Выборка.Исполнитель;
	НоваяСтрока.Периодичность 			= Выборка.ПериодичностьРодитель;
	
	ПараметрыДатПлан = ПолучитьПериодЗадачи(Выборка, 
											ТаблицаЗадач, 
											МенеджерГрафика, 
											ПараметрыПериодаГруппы, 
											ТаблицаПредыдущихЗадач);
	
	НоваяСтрока.ДатаНачала 				= ПараметрыДатПлан.ДатаНачалаЗадачи;
	НоваяСтрока.ДатаОкончания 			= ПараметрыДатПлан.ДатаОкончанияЗадачи;
	
	Если ПараметрыТаблицыЗадач.Свойство("ДополнитьФактом") Тогда
		
		СведенияОФакте = Неопределено;
		КлючПоиска = Новый Структура("Период, ШагПроцесса", ПараметрыПериодаГруппы.ДатаНачала, Выборка.ШагПроцесса);
		НайденныеСтроки = ПараметрыТаблицыЗадач.ТаблицаФакт.НайтиСтроки(КлючПоиска);
		Если НайденныеСтроки.Количество() Тогда
			СведенияОФакте = НайденныеСтроки[0];
			НоваяСтрока.Задача 			= СведенияОФакте.Задача;
			НоваяСтрока.Документ 		= СведенияОФакте.Документ;
			НоваяСтрока.ЗадачаВыполнена = СведенияОФакте.Выполнена;
			НоваяСтрока.Исполнитель 	= СведенияОФакте.Исполнитель;
		КонецЕсли;
		ПараметрыДатФакт = ПолучитьПериодЗадачи(Выборка, 
											ТаблицаЗадач, 
											МенеджерГрафика, 
											ПараметрыПериодаГруппы, 
											ТаблицаПредыдущихЗадач,
											Истина,
											СведенияОФакте);

		НоваяСтрока.ДатаНачалаФакт 			= ПараметрыДатФакт.ДатаНачалаЗадачи;
		НоваяСтрока.ДатаОкончанияФакт		= ПараметрыДатФакт.ДатаОкончанияЗадачи;
		Если НайденныеСтроки.Количество() Тогда
			ПараметрыТаблицыЗадач.ТаблицаФакт.Удалить(СведенияОФакте);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.Период		 	= ПараметрыПериодаГруппы.ДатаНачала;
	НоваяСтрока.ПериодСтрокой 	= БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(
																НоваяСтрока.Период, 
																НоваяСтрока.Периодичность);
	
	НоваяСтрока.ПредыдущиеЗадачиСтрокой = ТаблицуНомеровЗадачВСтроку(ТаблицаПредыдущихЗадач);
	НоваяСтрока.ПредыдущиеЗадачи 		= ТаблицаПредыдущихЗадач.Скопировать();
	
	ПредыдущиеЗадачи = Новый ТаблицаЗначений;
	ПредыдущиеЗадачи.Колонки.Добавить("НомерЗадачи");
	ПредыдущиеЗадачи.Добавить().НомерЗадачи = НоваяСтрока.НомерЗадачи;
	
	Возврат ПредыдущиеЗадачи;
	
КонецФункции

// Рекурсивная функция генерации списка задач на основании дерева шагов процесса
//	выполняет следующие действия:
//	1. если это группа задач - передает управление процедуры, обрабатывающей группы
//		формирование задач по группе выполняется для каждого периода группы
//	2. если это шаг процесса - передает управление процедуре, формирующей строку задачи
//
// Параметры
//  Выборка  						- ДеревоЗначений - результат запроса к справочнику "Шаги бюджетного процесса" с иерархией шагов
//  ТаблицаЗадач  					- ТаблицаЗначений - заполняемая таблица
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ТаблицаПредыдущихЗадач  			- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи
//		
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа или задача будет считаться выполненой
//
Функция ОбработатьИсполнениеШагаПроцесса(Выборка, 
											ТаблицаЗадач, 
											ПараметрыПериодаГруппы, 
											МенеджерГрафика, 
											ТаблицаПредыдущихЗадач)
	
	Если Не Выборка.ЭтоГруппа Тогда
		
		НоваяТаблицаПредыдущих = ДобавитьСтрокуПлановойЗадачи(Выборка, 
															ТаблицаЗадач, 
															МенеджерГрафика, 
															ПараметрыПериодаГруппы,
															ТаблицаПредыдущихЗадач);
		
	Иначе
		
		ДатаНачала = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПараметрыПериодаГруппы.ДатаНачала, Выборка.Периодичность);
		ДатаНачала = Макс(ДатаНачала, ПараметрыПериодаГруппы.ДатаНачала);
		
		Пока ДатаНачала <= ПараметрыПериодаГруппы.ДатаОкончания Цикл
			
			ДатаКонца = БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаНачала, Выборка.Периодичность);
			ДатаКонца = Мин(ДатаКонца, ПараметрыПериодаГруппы.ДатаОкончания);
			
			ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаКонца);
			НоваяТаблицаПредыдущих = ЗаполнитьДеревоЗадач(Выборка, 
															ТаблицаЗадач, 
															ПараметрыПериода, 
															МенеджерГрафика, 
															ТаблицаПредыдущихЗадач);
			
			ДатаНачала = ДатаКонца + 1; //Переходим в следующий период
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяТаблицаПредыдущих;
	
КонецФункции

// Рекурсивная функция генерации списка задач на основании дерева шагов процесса
//	выполняет следующие действия:
//	1. для каждой строки дерева, содержащей шаг процесса вызывает процедуру - обработчик шага процесса
//	2. на основании вида группы формирует таблицу, которая содержит номера задач, 
//	при выполнении которых группа будет считаться выполненной и процесс перейдет на следующий за группой шаг
//
// Параметры
//  ДеревоШагов  					- ДеревоЗначений - результат запроса к справочнику "Шаги бюджетного процесса" с иерархией шагов
//  ТаблицаЗадач  					- ТаблицаЗначений - заполняемая таблица
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ПредыдущиеЗадачи  				- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи
//	
//	Возвращаемое значение:
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа будет считаться выполненой
//
Функция ЗаполнитьДеревоЗадач(ДеревоШагов, ТаблицаЗадач, ПараметрыПериодаГруппы, 
							МенеджерГрафика, ПредыдущиеЗадачи = Неопределено)
							
	Если ПредыдущиеЗадачи = Неопределено Тогда
		ПредыдущиеЗадачи = Новый ТаблицаЗначений;
		ПредыдущиеЗадачи.Колонки.Добавить("НомерЗадачи");
	КонецЕсли;
	
	ТаблицаПредыдущихЗадач = ПредыдущиеЗадачи.Скопировать();
	ТекущаяТаблицаПредыдущихЗадач = ТаблицаПредыдущихЗадач.СкопироватьКолонки();
	
	ПоследовательнаяГруппа = Ложь;
	
	Для Каждого Выборка из ДеревоШагов.Строки Цикл
		
		НоваяТаблицаПредыдущих = ОбработатьИсполнениеШагаПроцесса(Выборка, 
																ТаблицаЗадач, 
																ПараметрыПериодаГруппы, 
																МенеджерГрафика, 
																ТаблицаПредыдущихЗадач);
																
		Если НоваяТаблицаПредыдущих = Неопределено Тогда
			Продолжить; //ни одна задача не входит в период отчета
		КонецЕсли;
		
		Если Выборка.ПорядокВыполненияШагов = Перечисления.ПорядокВыполненияШаговБюджетногоПроцесса.Последовательно Тогда
			ТаблицаПредыдущихЗадач = НоваяТаблицаПредыдущих;
			ПоследовательнаяГруппа = Истина;
		Иначе
			Для Каждого СтрокаЗадачи из НоваяТаблицаПредыдущих Цикл
				ТекущаяТаблицаПредыдущихЗадач.Добавить().НомерЗадачи = СтрокаЗадачи.НомерЗадачи;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоследовательнаяГруппа и НоваяТаблицаПредыдущих <> Неопределено Тогда
		Для Каждого СтрокаЗадачи из НоваяТаблицаПредыдущих Цикл
			ТекущаяТаблицаПредыдущихЗадач.Добавить().НомерЗадачи = СтрокаЗадачи.НомерЗадачи;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекущаяТаблицаПредыдущихЗадач;
	
КонецФункции

// Функция возвращает таблицу планируемых задач, построенное по шагам процесса
//	выполняет следующие действия:
//	1. формирует дерево значений с элементами справочника "шаги бюджетного процесса"
//	2. подготавливает менеджер временных таблиц для последующего определения длительности "по рабочим дням"
//	3. формирует таблицу с фактическими задачами, если установлен флаг "дополнять фактом". 
//		таблица фактических задач впоследствие используется в алгоритме заполнения итоговой таблице плановых задач
//	4. дополняет таблицу плановых задач фактическими задачами, если эти задачи были сформированы "вне бюджетного процесса"
//
// Параметры
//  МодельБюджетирования  	- СправочникСсылка.МодельБюджетирования - модель для которой строиться дерево задач
//  ДатаНачала  			- дата - дата, с которой будет строиться таблица задач
//  ДатаОкончания  			- дата - дата, по которую будет строиться таблице задач
//  ДополнятьФактом  		- Булево - Если ИСТИНА - то будут заполнены сведения о фактических задачах
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений, содержащая сведения о планируемых и фактических шагах бюджетного процесса
//
Функция ПолучитьТаблицуЗадачБюджетирования(МодельБюджетирования, ДатаНачала, ДатаОкончания, ДополнятьФактом)
	
	Отказ = Ложь;
	
	ТаблицаЗадач = ПолучитьТаблицуЗадач();
	
	Если Отказ Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШагиБюджетныхПроцессов.Ссылка КАК ШагПроцесса,
		|	ШагиБюджетныхПроцессов.Периодичность КАК Периодичность,
		|	ШагиБюджетныхПроцессов.Действие КАК Действие,
		|	ШагиБюджетныхПроцессов.НастройкаДействия КАК НастройкаДействия,
		|	ШагиБюджетныхПроцессов.Родитель.Периодичность КАК ПериодичностьРодитель,
		|	ШагиБюджетныхПроцессов.Родитель.ПорядокВыполненияШагов КАК ПорядокВыполненияШагов,
		|	ШагиБюджетныхПроцессов.Родитель.УсловиеЗапуска КАК УсловиеЗапуска,
		|	ШагиБюджетныхПроцессов.Родитель.Срок КАК Срок,
		|	ШагиБюджетныхПроцессов.Родитель.ТипСрока КАК ТипСрока,
		|	ШагиБюджетныхПроцессов.Длительность - 1 КАК Длительность,
		|	ШагиБюджетныхПроцессов.ТипДлительности,
		|	ШагиБюджетныхПроцессов.Ответственный КАК Исполнитель,
		|	ШагиБюджетныхПроцессов.ЭтоГруппа,
		|	ШагиБюджетныхПроцессов.Код КАК Код
		|ИЗ
		|	Справочник.ШагиБюджетныхПроцессов КАК ШагиБюджетныхПроцессов
		|ГДЕ
		|	ШагиБюджетныхПроцессов.Владелец = &МодельБюджетирования
		|	И (ШагиБюджетныхПроцессов.ЭтоГруппа
		|			ИЛИ ШагиБюджетныхПроцессов.НеВыполняется = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШагПроцесса ИЕРАРХИЯ";
		
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	РезультатЗапроса = Запрос.Выполнить();
	ДеревоШагов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоШагов.Строки.Сортировать("Код", Истина);
	
	ПараметрыТаблицыЗадач		 = Новый Структура("ТаблицаЗадач", ТаблицаЗадач);
	
	Если ДополнятьФактом Тогда
		ПараметрыТаблицыЗадач.Вставить("ДополнитьФактом", ДополнятьФактом);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БюджетнаяЗадача.ШагБюджетногоПроцесса КАК ШагПроцесса,
		|	БюджетнаяЗадача.Период,
		|	БюджетнаяЗадача.Ссылка КАК Задача,
		|	БюджетнаяЗадача.Документ КАК Документ,
		|	БюджетнаяЗадача.Исполнитель,
		|	БюджетнаяЗадача.Дата КАК ДатаНачала,
		|	БюджетнаяЗадача.ДатаИсполнения КАК ДатаОкончания,
		|	БюджетнаяЗадача.Выполнена,
		|	БюджетнаяЗадача.ШагБюджетногоПроцесса.Родитель.Периодичность КАК Периодичность
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования
		|	И БюджетнаяЗадача.ИсходныйШагБюджетногоПроцесса = ЗНАЧЕНИЕ(Справочник.ШагиБюджетныхПроцессов.ПустаяСсылка)
		|	И НЕ БюджетнаяЗадача.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаФакт = РезультатЗапроса.Выгрузить();
		ТаблицаФакт.Индексы.Добавить("Период, ШагПроцесса");
		
		ПараметрыТаблицыЗадач.Вставить("ТаблицаФакт", ТаблицаФакт);
		
	КонецЕсли;
	
	// Дополним конец периода
	// задачи формируем на ДатаОкончания + 365 рабочих или календарных дней
	// 365 - максимальная длительность задачи
	//МаксДата = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаОкончания, 365);
	МаксДата = ПолучитьДатуПоКалендарю(Неопределено, ДатаОкончания, 365);
	МаксДата = Макс(МаксДата, ДатаОкончания + 365 * 86400);
	ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, МаксДата);
	
	//ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериода, МенеджерГрафика);
	ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериода, Неопределено);
	
	Если ДополнятьФактом Тогда
		Для Каждого ОставшасяСтрокаЗадач из ПараметрыТаблицыЗадач.ТаблицаФакт Цикл
			НоваяСтрока 					= ТаблицаЗадач.Добавить();
			НоваяСтрока.НомерЗадачи			= ТаблицаЗадач.Количество();
			НоваяСтрока.Задача 				= ОставшасяСтрокаЗадач.Задача;
			НоваяСтрока.Документ 			= ОставшасяСтрокаЗадач.Документ;
			НоваяСтрока.ЗадачаВыполнена		= ОставшасяСтрокаЗадач.Выполнена;
			НоваяСтрока.Исполнитель 		= ОставшасяСтрокаЗадач.Исполнитель;
			НоваяСтрока.ДатаНачалаФакт 		= ОставшасяСтрокаЗадач.ДатаНачала;
			НоваяСтрока.ДатаНачалаФакт 		= ОставшасяСтрокаЗадач.ДатаНачала;
			НоваяСтрока.Периодичность 		= ОставшасяСтрокаЗадач.Периодичность;
			ДатаОкончания					= ОставшасяСтрокаЗадач.ДатаОкончания;
			Если Не ОставшасяСтрокаЗадач.Выполнена Тогда
				ДатаОкончания = КонецДня(ТекущаяДата());
			КонецЕсли;
			НоваяСтрока.ДатаОкончанияФакт 	= ДатаОкончания;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
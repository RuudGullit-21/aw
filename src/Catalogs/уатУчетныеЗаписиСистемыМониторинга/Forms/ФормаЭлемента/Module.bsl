#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ХранилищеСистемныхНастроек.Удалить("Справочник.уатУчетныеЗаписиСистемыМониторинга.Форма.ФормаЭлемента/Такси/НастройкиОкна",, ИмяПользователя());
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПарольУстановлен = уатОбщегоНазначения_проф.ПроверитьЗаполнениеПароля(Объект.Ссылка);
		Пароль = ?(ПарольУстановлен, "********", "");
	КонецЕсли;
	Элементы.Пароль.КнопкаВыбора = Ложь;

	Если Параметры.Свойство("СистемаМониторинга") Тогда
		ПереданнаяСистемаМониторинга = Параметры.СистемаМониторинга;
		Объект.СистемаМониторинга    = Параметры.СистемаМониторинга;
 	КонецЕсли;
	Элементы.ФормаЛогированиеЗапросов.Пометка = Объект.ЛогированиеЗапросов;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТипБраузера = ОпределитьПрограммуПросмотра(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	ОбновитьСписокВыбораИспользуемойСистемыМониторинга();
	HTML = ИнициализироватьСкрипт();
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.уатУчетныеЗаписиСистемыМониторинга);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьВидимостьДоступностьНастроекСозданияДокументов();

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
		Пароль        = ?(ЗначениеЗаполнено(Пароль), "********", "");
		ПарольИзменен = Ложь;
	КонецЕсли;
	
	уатРаботаСРасширениями.ПСМ_УчетныеЗаписиСистемыМониторингаПриЗаписиНаСервере(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьТокен(Команда)
	
	Если Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon") Тогда
		ПолучитьТокенWialon();
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ") Тогда
		ПолучитьТокенАвтоГРАФ();
	Иначе
		ИдентификаторДействия = "Справочник.уатУчетныеЗаписиСистемыМониторинга.ПолучитьТокен";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.СистемаМониторинга, "НаименованиеПС"),Объект.Ссылка,ЭтотОбъект);
		#КонецЕсли
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторПользователя(Команда)
	ИдентификаторДействия = "Справочник.уатУчетныеЗаписиСистемыМониторинга.ПолучитьИдентификаторПользователя";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
	уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.СистемаМониторинга, "НаименованиеПС"),Объект.Ссылка,ЭтотОбъект);
	#КонецЕсли
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm") Тогда
		ПроверитьПодключениеOmnicomm();
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon") Тогда
		ПроверитьПодключениеWialon();
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ") Тогда
		ПроверитьПодключениеАвтоГРАФ();
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ") Тогда
		ПроверитьПодключениеСКАУТ();
	Иначе	
		ИдентификаторДействия = "Справочник.уатУчетныеЗаписиСистемыМониторинга.ПроверитьПодключение";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.СистемаМониторинга, "НаименованиеПС"),Объект.Ссылка,ЭтотОбъект);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресПоУмолчанию(Команда)
	Объект.АдресСервиса = СтрЗаменить(СтрЗаменить(Элементы.АдресСервиса.ПодсказкаВвода, "Например:", ""), " ", "");
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроксиСервера(Команда)
	
	ПараметрыФормы = Неопределено;
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		ПараметрыФормы = Новый Структура("НастройкаПроксиНаКлиенте", Истина);
	КонецЕсли;
	
	ПолучениеФайловИзИнтернетаКлиент.ОткрытьФормуПараметровПроксиСервера(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеЗапросов(Команда)
	Элементы.ФормаЛогированиеЗапросов.Пометка = НЕ Элементы.ФормаЛогированиеЗапросов.Пометка;
	Объект.ЛогированиеЗапросов                = НЕ Объект.ЛогированиеЗапросов;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СистемаМониторингаПриИзменении(Элемент)
	
	Объект.Логин				 = Неопределено;
	Пароль						 = Неопределено;
	Объект.АдресСервиса			 = Неопределено;
	Объект.ТокенАвторизации		 = Неопределено;
	Объект.СпособРаботы			 = Неопределено;
	Объект.СпособПодключения	 = Неопределено;
	Объект.Сервер				 = Неопределено;
	Объект.ИмяБД				 = Неопределено;
	Объект.Драйвер				 = Неопределено;
	Объект.ИмяPIPE				 = Неопределено;
	Объект.ИмяDSN				 = Неопределено;
	Объект.Ресурс				 = Неопределено;
	Объект.ВидСистемы			 = Неопределено;
	Объект.Версия				 = Неопределено;
	Объект.ЛогированиеЗапросов   = Ложь;

	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РесурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ТокенАвторизации) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо получить токен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ТокенАвторизации");
		Возврат;
	КонецЕсли;
	
	Если Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon") Тогда
		ОбновитьСписокВыбораРесурсаWialon(Истина);
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ") Тогда
		ОбновитьСписокВыбораРесурсаАвтоГРАФ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодключенияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СпособРаботыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВидСистемыПриИзменении(Элемент)
	Элементы.ПроверитьПодключение.Видимость	 = Объект.ВидСистемы = 0;
КонецПроцедуры

&НаКлиенте
Процедура ПарольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСПочтовымиСообщениямиКлиент.ПолеПароляНачалоВыбора(Элемент, Пароль, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
	
	НаименованиеПС = ЗначениеРеквизитаОбъекта(Объект.СистемаМониторинга, "НаименованиеПС");
	
	Если ЗначениеЗаполнено(НаименованиеПС) Тогда
		Объект.Пароль = Пароль;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Элементы.Пароль.КнопкаВыбора = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособРеализацииВебСервисаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЗаправкиГСМПриИзменении(Элемент)
	УстановитьВидимостьДоступностьНастроекСозданияДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьСливыГСМПриИзменении(Элемент)
	УстановитьВидимостьДоступностьНастроекСозданияДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаправкиПриИзменении(Элемент)
	УстановитьОтборАЗС();
КонецПроцедуры

&НаКлиенте
Процедура ВидСливаПриИзменении(Элемент)
	УстановитьОтборАЗССлив();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокВыбораИспользуемойСистемыМониторинга()
	Элементы.СистемаМониторинга.СписокВыбора.Очистить();
	Элементы.СистемаМониторинга.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm"));
	Элементы.СистемаМониторинга.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon"));
	Элементы.СистемаМониторинга.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ"));
	Элементы.СистемаМониторинга.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ"));

	МассивПСМ = Новый Массив();
	уатРаботаСРасширениями.ПСМ_ЗаполнитьМассивВнешихСистем(МассивПСМ);
	Для Каждого ТекСтрока Из МассивПСМ Цикл
		Элементы.СистемаМониторинга.СписокВыбора.Добавить(ТекСтрока);
	КонецЦикла;

	Если ЗначениеЗаполнено(Объект.СистемаМониторинга)
		И Элементы.СистемаМониторинга.СписокВыбора.НайтиПоЗначению(Объект.СистемаМониторинга) = Неопределено Тогда
		Элементы.СистемаМониторинга.СписокВыбора.Добавить(Объект.СистемаМониторинга);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.АдресСервиса.Ширина = 0;
	Элементы.АдресСервиса.РастягиватьПоГоризонтали = Истина;
	
	Элементы.СпособРаботы.Видимость			 = Ложь;
	Элементы.СпособПодключения.Видимость	 = Ложь;
	Элементы.Логин.Видимость				 = Ложь;
	Элементы.Пароль.Видимость				 = Ложь;
	Элементы.АдресСервиса.Видимость			 = Ложь;
	Элементы.Сервер.Видимость				 = Ложь;
	Элементы.ИмяБД.Видимость				 = Ложь;
	Элементы.Драйвер.Видимость				 = Ложь;
	Элементы.ИмяPIPE.Видимость				 = Ложь;
	Элементы.ИмяDSN.Видимость				 = Ложь;
	Элементы.ИмяDSN.Видимость				 = Ложь;
	Элементы.ГруппаТокен.Видимость			 = Ложь;
	Элементы.Ресурс.Видимость				 = Ложь;
	Элементы.ВидСистемы.Видимость			 = Ложь;
	Элементы.Версия.Видимость				 = Ложь;
	
	Элементы.ФормаЛогированиеЗапросов.Видимость			 = Истина;
	Элементы.ПроверитьПодключение.Видимость				 = Истина;
	Элементы.СпособРеализацииВебСервиса.Видимость		 = Ложь;
	Элементы.ИдентификаторКлиента.Видимость				 = Ложь;
	Элементы.ГруппаИдентификаторПользователя.Видимость	 = Ложь;
	Элементы.КлючАвторизации.Видимость					 = Ложь;
	Элементы.ТокенАвторизации.ОтображениеПодсказки		 = ОтображениеПодсказки.Авто;
	Элементы.ТокенАвторизации.Заголовок = НСтр("en = 'Authorization token'; ru = 'Токен авторизации'");
	Элементы.ГруппаДопИнформацияАвтоГРАФ.Видимость      = Ложь;

	Элементы.ГруппаРеквизитыЗаполнения.Видимость        = Ложь; 
	Элементы.ГруппаИнтервалЗапросов.Видимость           = Ложь;
	Если Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = Нстр("en = 'Например: http://demo.omnicomm.ru:8001/'; ru = 'Например: http://demo.omnicomm.ru:8001/'");
		Элементы.СпособРаботы.Видимость					 = Истина;
		Если Объект.СпособРаботы = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.БД") Тогда
			Элементы.СпособПодключения.Видимость	 = Истина;
			Элементы.ПроверитьПодключение.Видимость	 = Ложь;
			Элементы.ФормаЛогированиеЗапросов.Видимость	 = Ложь;

			Если Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.уатСпособПодключенияКOmnicomm.СтандартноеПодключение") Тогда
				Элементы.Логин.Видимость   = Истина;
				Элементы.Пароль.Видимость  = Истина;
				Элементы.Сервер.Видимость  = Истина;
				Элементы.ИмяБД.Видимость   = Истина;
				Элементы.Драйвер.Видимость = Истина;
			ИначеЕсли Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.уатСпособПодключенияКOmnicomm.PIPEПодключение") Тогда
				Элементы.Логин.Видимость   = Истина;
				Элементы.Пароль.Видимость  = Истина;
				Элементы.Сервер.Видимость  = Истина;
				Элементы.ИмяБД.Видимость   = Истина;
				Элементы.Драйвер.Видимость = Истина;
				Элементы.ИмяPIPE.Видимость = Истина;
			ИначеЕсли Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.уатСпособПодключенияКOmnicomm.DSNПодключение") Тогда
				Элементы.ИмяDSN.Видимость  = Истина;
			КонецЕсли;
			
		ИначеЕсли Объект.СпособРаботы = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.ВебСервис") Тогда
			Элементы.Логин.Видимость             = Истина;
			Элементы.Пароль.Видимость            = Истина;
			Элементы.АдресСервиса.Видимость      = Истина;
			Элементы.СпособРеализацииВебСервиса.Видимость	 = Истина;
			Если НЕ ЗначениеЗаполнено(Объект.СпособРеализацииВебСервиса) Тогда
				Объект.СпособРеализацииВебСервиса = ПредопределенноеЗначение("Перечисление.уатСпособыРеализацииВебСервиса.SOAP");
			КонецЕсли;
			
			Если Объект.СпособРеализацииВебСервиса = ПредопределенноеЗначение("Перечисление.уатСпособыРеализацииВебСервиса.SOAP") Тогда
				Элементы.ФормаЛогированиеЗапросов.Видимость	 = Ложь;
			КонецЕсли;

		КонецЕсли;
		Элементы.ГруппаРеквизитыЗаполнения.Видимость = Истина;
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon") Тогда
		Если Объект.ВидСистемы = 0 Тогда 
			Элементы.АдресСервиса.ПодсказкаВвода = НСтр("ru = 'Например: http://hst-api.wialon.com'");
		Иначе 
			Элементы.АдресСервиса.ПодсказкаВвода = НСтр("ru = 'Например: http://wtest.gurtam.com/'");
		КонецЕсли;
		Элементы.ГруппаТокен.Видимость	 = Истина;
		Элементы.Ресурс.Видимость		 = Истина;
		Элементы.ВидСистемы.Видимость	 = Истина;
		Элементы.АдресСервиса.Видимость	 = Истина; 
		Элементы.ГруппаРеквизитыЗаполнения.Видимость = Истина;
		Элементы.ГруппаИнтервалЗапросов.Видимость    = Истина;
		ОбновитьСписокВыбораРесурсаWialon();
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ") Тогда
		Элементы.Версия.Видимость = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.Версия) Тогда
			Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_4");
		КонецЕсли;
		
		Если Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_4") Тогда
			ПодсказкаВвода = НСтр("ru = 'Например: http://192.168.0.1:24800/'; en = 'For example: http://192.168.0.1:24800/'");
		ИначеЕсли Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_5") Тогда 
			ПодсказкаВвода = НСтр("ru = 'Например: http://m.tk-chel.ru/ServiceJSON/'"); 
		Иначе
			ПодсказкаВвода = НСтр("ru = 'Например: http://demo.tk-nav.com/'");
		КонецЕсли;
		Элементы.АдресСервиса.ПодсказкаВвода = ПодсказкаВвода;
		
		Элементы.АдресСервиса.Видимость	 = Истина;
		Если Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_5")
			ИЛИ Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_7") Тогда
			Элементы.ГруппаТокен.Видимость	 = Истина;
			Элементы.Ресурс.Видимость		 = Истина;
		Иначе
			Элементы.ГруппаДопИнформацияАвтоГРАФ.Видимость = Истина;
		КонецЕсли;
		
		Элементы.АдресСервиса.Ширина = 28;
		Элементы.АдресСервиса.РастягиватьПоГоризонтали = Ложь;
		
		Если Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_5")
			ИЛИ Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_7") Тогда
			ОбновитьСписокВыбораРесурсаАвтоГРАФ();
		Иначе
			Элементы.ФормаЛогированиеЗапросов.Видимость	 = Ложь;
		КонецЕсли;
		Элементы.ГруппаРеквизитыЗаполнения.Видимость = Истина;
	ИначеЕсли Объект.СистемаМониторинга = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = НСтр("ru = 'Например: http://spic.scout365.ru:8081'");
		Элементы.Логин.Видимость		 = Истина;
		Элементы.Пароль.Видимость		 = Истина;
		Элементы.АдресСервиса.Видимость	 = Истина;
		
		Элементы.ФормаЛогированиеЗапросов.Видимость	 = Ложь;
		Элементы.ГруппаРеквизитыЗаполнения.Видимость = Истина;
	Иначе
		
		Элементы.ФормаЛогированиеЗапросов.Видимость	 = Ложь;
		
		ИдентификаторДействия = "Справочник.уатУчетныеЗаписиСистемыМониторинга.УстановитьВидимость";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия,
			уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.СистемаМониторинга, "НаименованиеПС"),,ЭтотОбъект);
		#КонецЕсли
	КонецЕсли;
		
	Элементы.ГруппаЗаполнитьАдресПоУмолчанию.Видимость	 = Элементы.АдресСервиса.Видимость;

	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенWialonЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ТокенАвторизации = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенАвтоГРАФЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ТокенАвторизации = Результат;
	ОбновитьСписокВыбораРесурсаАвтоГРАФ();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораРесурсаWialon(ПроверкаРеквизитов = Ложь)
	
	Если ПроверкаРеквизитов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ТокенАвторизации) Тогда 
			ТекстОшибки = НСтр("ru='Необходимо указать токен авторизации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ТокенАвторизации");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
			ТекстОшибки = НСтр("ru='Необходимо указать адрес сервиса'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ТокенАвторизации)
			ИЛИ НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	СтруктураПараметровУчетнойЗаписи = Новый Структура("ТокенАвторизации, АдресСервиса, Ресурс");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	СписокРесурсовWialon = уатМониторинг.Wialon_ПолучитьСписокРесурсов(СтруктураПараметровУчетнойЗаписи);
	
	Для Каждого ТекСтрока Из СписокРесурсовWialon Цикл 
		Если Элементы.Ресурс.СписокВыбора.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			Элементы.Ресурс.СписокВыбора.Добавить(ТекСтрока.Значение, ТекСтрока.Представление);
		КонецЕсли;
	КонецЦикла;
	
	мсвУдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.Ресурс.СписокВыбора Цикл 
		Если СписокРесурсовWialon.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			мсвУдаляемыеЭлементы.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из мсвУдаляемыеЭлементы Цикл 
		Элементы.Ресурс.СписокВыбора.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораРесурсаАвтоГРАФ()
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("ТокенАвторизации, АдресСервиса, Ресурс");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	СписокРесурсов = уатМониторинг.АвтоГРАФ5_ПолучитьСписокРесурсов(СтруктураПараметровУчетнойЗаписи);
	
	Для Каждого ТекСтрока Из СписокРесурсов Цикл 
		Если Элементы.Ресурс.СписокВыбора.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			Элементы.Ресурс.СписокВыбора.Добавить(ТекСтрока.Значение, ТекСтрока.Представление);
		КонецЕсли;
	КонецЦикла;
	
	мсвУдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.Ресурс.СписокВыбора Цикл 
		Если СписокРесурсов.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			мсвУдаляемыеЭлементы.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из мсвУдаляемыеЭлементы Цикл 
		Элементы.Ресурс.СписокВыбора.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWialon()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТокенАвторизации) Тогда 
		ТекстОшибки = НСтр("en='To verify connection, you must specify the authorization token';ru='Для проверки подключения необходимо указать токен авторизации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ТокенАвторизации",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='To check the connection it is necessary to specify address of service ""Wialon hosting""';ru='Для проверки подключения необходимо указать адрес сервиса ""Wialon hosting""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключениеКWialonДоступно() Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ресурс) Тогда 
		ОбновитьСписокВыбораРесурсаWialon();
		Если Элементы.Ресурс.СписокВыбора.Количество() Тогда 
			Объект.Ресурс = Элементы.Ресурс.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеOmnicomm()
	
	Если НЕ Объект.СпособРаботы = ПредопределенноеЗначение("Перечисление.уатСпособРаботыСOmnicomm.ВебСервис") Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service Omnicomm.';ru='Необходимо указать адрес сервиса Omnicomm.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключениеКOmnicommДоступно() Тогда 
		ТекстОшибки = СтрШаблон(НСтр("ru='По указанному адресу <%1> отсутствует возможность подключения к функциям API Omnicomm'"), Объект.АдресСервиса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеАвтоГРАФ()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify service address of AvtoGRAF.';ru='Необходимо указать адрес сервиса АвтоГРАФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТокенАвторизации) 
		И (Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_5")
			ИЛИ Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_7"))Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать токен авторизации сервиса АвтоГРАФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ТокенАвторизации",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ресурс) 
		И (Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_5")
			ИЛИ Объект.Версия = ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_7")) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать имя ресурса в сервисе АвтоГРАФ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.Ресурс",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда 
		ТекстОшибки = НСтр("en='To check connection, you must save the changes';ru='Для проверки подключения необходимо сохранить изменения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключениеКАвтоГРАФДоступно() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='По указанному адресу <%1> отсутствует возможность подключения к функциям API АвтоГРАФ'"), Объект.АдресСервиса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеСКАУТ()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service SKAUT.';ru='Необходимо указать адрес сервиса СКАУТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Логин) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify username for authorization in SKAUT service.';ru='Необходимо указать логин для авторизации в сервисе СКАУТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.Логин",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пароль) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify password for authorization in SKAUT service.';ru='Необходимо указать пароль для авторизации в сервисе СКАУТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Пароль",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключениеКСКАУТДоступно() Тогда 
		ТекстОшибки = НСтр("ru='По указанному адресу отсутствует возможность подключения к функциям API СКАУТ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезначащиеСимволыВНастройках()
	
	Если НЕ ЕстьПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьНезначащиеСимволы(Объект.Логин);
	ЗаменитьНезначащиеСимволы(Объект.АдресСервиса);
	ЗаменитьНезначащиеСимволы(Объект.ТокенАвторизации);
	ЗаменитьНезначащиеСимволы(Объект.ИмяБД);
	ЗаменитьНезначащиеСимволы(Объект.Драйвер);
	ЗаменитьНезначащиеСимволы(Объект.ИмяPIPE);
	ЗаменитьНезначащиеСимволы(Объект.ИмяDSN);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНезначащиеСимволы(ЗначениеНастройки)
	
	НовоеЗначение = ЗначениеНастройки;
	
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символы.ПС, "");
	
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символ(182), "");
	
	НовоеЗначение = СокрЛП(НовоеЗначение);
	
	ЗначениеНастройки = НовоеЗначение;
	
КонецПроцедуры

&НаСервере
Функция ПодключениеКСКАУТДоступно()
	
	ТекстОшибки = "";

	СтруктураПараметровУчетнойЗаписи = Новый Структура("АдресСервиса,Логин,Пароль,СистемаМониторинга");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	
	Если НЕ ПарольИзменен Тогда
		ТекПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка);
	Иначе
		ТекПароль = Пароль;
	КонецЕсли;
	
	СтруктураПараметровУчетнойЗаписи.Пароль = ТекПароль;
	
	ТаблицаТС = уатМониторинг.ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат НЕ (ЗначениеЗаполнено(ТекстОшибки) ИЛИ ТаблицаТС = Неопределено);
	
КонецФункции

&НаСервере
Функция ПодключениеКАвтоГРАФДоступно()
	
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("АдресСервиса,Ресурс,ТокенАвторизации,Версия,СистемаМониторинга");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	
	ТаблицаТС = уатМониторинг.ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат НЕ (ЗначениеЗаполнено(ТекстОшибки) ИЛИ ТаблицаТС = Неопределено);
	
КонецФункции

&НаСервере
Функция ПодключениеКOmnicommДоступно()
	
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("АдресСервиса,Логин,Пароль,СпособРаботы,СпособРеализацииВебСервиса,СистемаМониторинга");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	
	Если НЕ ПарольИзменен Тогда
		ТекПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка);
	Иначе
		ТекПароль = Пароль;
	КонецЕсли;
	
	СтруктураПараметровУчетнойЗаписи.Пароль = ТекПароль;

	ТаблицаТС = уатМониторинг.ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат НЕ (ЗначениеЗаполнено(ТекстОшибки) ИЛИ ТаблицаТС = Неопределено);
	
КонецФункции

&НаКлиенте
Функция ПодключениеКWialonДоступно()
	
	ТекстОшибки = "";
	
	Если НЕ ПроверитьПодключениеWialonНаСервере(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("en='At the address <%1> is missing the ability to connect to the API functions WIALON';ru='По указанному адресу <%1> отсутствует возможность подключения к функциям API WIALON'"), Объект.АдресСервиса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеWialonНаСервере(ТекстОшибки)
	
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("ТокенАвторизации, АдресСервиса, Ресурс, СистемаМониторинга");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);

	ТаблицаТС = уатМониторинг.ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Возврат НЕ (ЗначениеЗаполнено(ТекстОшибки) ИЛИ ТаблицаТС = Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьТокенWialon()
	
	Если ПустаяСтрока(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить адрес сервиса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		АдресСервиса = ЗаполнитьАдресСервисаWialon();
		
		Попытка
			Если ТипБраузера = "ie11" 
				ИЛИ ТипБраузера = "ie" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не закрывайте окно авторизации Wialon. Для получения токена пройдите авторизацию и скопируйте токен из строки адреса.
                      |Например: http://hosting.wialon.com/post_token.html?&access_token=demo,
                      |Токен: demo'"));
			КонецЕсли;
			HTMLobj = Элементы.HTML.Документ.defaultView;
			HTMLobj.getTokenWialon(АдресСервиса);
		Исключение
			ТекстОшибки = НСтр("en='Session token is not received and could not be installed.';ru='Токен сессии не получен и не может быть установлен.'");
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецПопытки;
	#Иначе
		ОткрытьФорму(
		"ОбщаяФорма.уатФормаАвторизацииWialon",
		Новый Структура("АдресСервиса, ВидСистемы",Объект.АдресСервиса, Объект.ВидСистемы),
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПолучитьТокенWialonЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьАдресСервисаWialon()
	
	АдресСервиса      = "";
	Wialon_ВидСистемы = 0;
	
	АдресСервиса = Объект.АдресСервиса;
	Wialon_ВидСистемы = Объект.ВидСистемы;
	
	Если Wialon_ВидСистемы = 0 Тогда 
		АдресСервиса = "http://hosting.wialon.com";
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСервиса) Тогда 
		Возврат АдресСервиса;
	КонецЕсли;
	
	// адрес не должен оканчиваться символом "/"
	Если Прав(АдресСервиса, 1) = "/" Тогда
		АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса)-1);
	КонецЕсли;
	
	// адрес должен начинаться на "http" или "https"
	Если Не НРег(Лев(АдресСервиса, 7)) = "http://" Тогда 
		Если Не НРег(Лев(АдресСервиса, 8)) = "https://" Тогда 
			АдресСервиса = "http://" + АдресСервиса;
		КонецЕсли;
	КонецЕсли;
	АдресСервиса = АдресСервиса + "/login.html?client_id=""1C:Enterprise""&access_type=256&activation_time=0&duration=604800&flags=1&redirect_uri=" + АдресСервиса + "/post_token.html";
	
	Возврат АдресСервиса;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьТокенАвтоГРАФ()
	
	Если ПустаяСтрока(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить адрес сервиса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
	"Справочник.уатУчетныеЗаписиСистемыМониторинга.Форма.ФормаАвторизации",
	Новый Структура("АдресСервиса, ВнешняяСистема",Объект.АдресСервиса, Объект.СистемаМониторинга),
	ЭтотОбъект,
	,
	,
	,
	Новый ОписаниеОповещения("ПолучитьТокенАвтоГРАФЗавершение", ЭтотОбъект),
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьСкрипт()
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("html");
	СкриптДвоичныеДанные = ПолучитьОбщийМакет("уатАвторизацияWialon");
	
	Попытка
		СкриптДвоичныеДанные.Записать(ВременныйФайл);
	Исключение
		Возврат "";
	КонецПопытки;
	
	СкриптWialon = "";
	
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(ВременныйФайл, КодировкаТекста.UTF8);
		СкриптWialon = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если СкриптWialon = "" Тогда 
		Возврат "";
	КонецЕсли;

	Возврат СкриптWialon;
	
КонецФункции

&НаКлиенте
Процедура LoginOnClick(ДанныеСобытия)
	
	Попытка
		Если ДанныеСобытия.srcElement.id = "login" Тогда
			wialonToken = Элементы.HTML.Документ.wialonToken;
			Объект.ТокенАвторизации = wialonToken;
			Если wialonToken = "" Тогда 
				ТекстОшибки = НСтр("en='Session token is not received and could not be installed.';ru='Токен сессии не получен и не может быть установлен.'");
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLДокументСформирован(Элемент)
	Попытка
		HTMLobj = Элементы.HTML.Документ.defaultView;
		ДобавитьОбработчик HTMLobj.onclick, LoginOnClick;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ОпределитьПрограммуПросмотра(ИнформацияПрограммыПросмотра)
	
	Результат = Неопределено;
	
	Информация = НРег(ИнформацияПрограммыПросмотра);
	
	Если СтрНайти(Информация, "edge") > 0 Тогда
		Результат = "edge";
	ИначеЕсли СтрНайти(Информация, "msie") > 0 Тогда
		Результат = "ie";
	ИначеЕсли СтрНайти(Информация, "trident") > 0 Тогда
		Результат = "ie11";
	ИначеЕсли СтрНайти(Информация, "firefox") > 0 Тогда
		Результат = "firefox";
	ИначеЕсли СтрНайти(Информация, "opera") > 0 Тогда
		Результат = "opera";
	ИначеЕсли СтрНайти(Информация, "opr") > 0 Тогда
		Результат = "operawebkit";
	ИначеЕсли СтрНайти(Информация, "yabrowser") > 0 Тогда
		Результат = "yabrowser";
	ИначеЕсли СтрНайти(Информация, "chrome") > 0 Тогда
		Результат = "chrome";
	ИначеЕсли СтрНайти(Информация, "safari") > 0 Тогда
		Результат = "safari";
	ИначеЕсли СтрНайти(Информация, "maxthon") > 0 Тогда
		Результат = "maxthon";	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Функция УстановитьВидимостьДоступностьНастроекСозданияДокументов()
	Элементы.ГруппаНастройки.Видимость = Объект.СоздаватьЗаправкиГСМ ИЛИ Объект.СоздаватьСливыГСМ;
	Элементы.ГруппаЗначенияЗаполненияГСМ.Видимость       = Объект.СоздаватьЗаправкиГСМ;
	Элементы.ГруппаЗначенияЗаполненияСливовГСМ.Видимость = Объект.СоздаватьСливыГСМ;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборАЗС()
	Объект.АЗС = Неопределено;
	Если Объект.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ Объект.ВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Истина);
	Иначе
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Ложь);
	КонецЕсли;
	МассивПарамВыбора = Новый Массив();
	МассивПарамВыбора.Добавить(НовыйПараметр);
	Элементы.АЗС.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборАЗССлив() 
	Объект.АЗССлив = Неопределено;
	Если Объект.ВидСлива = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Истина);
	Иначе
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Ложь);
	КонецЕсли;
	МассивПарамВыбора = Новый Массив();
	МассивПарамВыбора.Добавить(НовыйПараметр);
	Элементы.АЗССлив.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

#КонецОбласти

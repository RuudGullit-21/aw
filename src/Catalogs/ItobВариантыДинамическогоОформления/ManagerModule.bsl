
#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подбирает (со строгим отбором по терминалу и в порядке приоритета) вариант динамического оформления,
//  опираясь на проверку условий из ТЧ "УсловияОтбора". Если ТЧ пустая, то считается, что условие выполняется.
//
// Параметры:
//  ИсточникЗначения	- см.ItobДинамическиеОтборы.ПроверитьУсловиеДинамическогоОтбора(). 
//  Терминал			- см.ItobДинамическиеОтборы.ПроверитьУсловиеДинамическогоОтбора(). 
//  ДатчикиТерминала	- см.ItobДинамическиеОтборы.ПроверитьУсловиеДинамическогоОтбора(). 
//  ЗначенияДатчиков	- см.ItobДинамическиеОтборы.ПроверитьУсловиеДинамическогоОтбора(). 
// 
// Возвращаемое значение:
//  СправочникСсылка.ItobВариантыДинамическогоОформления, Неопределено - Подобранный вариант динамического оформления,
//  или Неопределено в случае неуспешного подбора.
//
Функция Подобрать(ИсточникЗначения, Терминал, ДатчикиТерминала, ЗначенияДатчиков) Экспорт
	
	ПодобранныйВариант = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТерминалДляОтбора", Терминал);
	Запрос.УстановитьПараметр("ПустаяСсылкаТерминалы", ItobВызовСервераПовтИсп.ПустаяСсылкаПоИмени("Терминалы"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobВариантыДинамическогоОформления.Ссылка КАК Ссылка,
	|	ItobВариантыДинамическогоОформленияУсловияОтбора.Ссылка ЕСТЬ NULL КАК ТЧУсловийОтбораПустая,
	|	ItobВариантыДинамическогоОформленияУсловияОтбора.Показатель КАК Показатель,
	|	ItobВариантыДинамическогоОформленияУсловияОтбора.ВидСравнения КАК ВидСравнения,
	|	ItobВариантыДинамическогоОформленияУсловияОтбора.Значение КАК Значение
	|ИЗ
	|	Справочник.ItobВариантыДинамическогоОформления КАК ItobВариантыДинамическогоОформления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobВариантыДинамическогоОформления.УсловияОтбора КАК ItobВариантыДинамическогоОформленияУсловияОтбора
	|		ПО ItobВариантыДинамическогоОформления.Ссылка = ItobВариантыДинамическогоОформленияУсловияОтбора.Ссылка
	|ГДЕ
	|	(ItobВариантыДинамическогоОформления.ТерминалДляОтбора = &ПустаяСсылкаТерминалы
	|			ИЛИ ItobВариантыДинамическогоОформления.ТерминалДляОтбора = &ТерминалДляОтбора)
	|	И НЕ ItobВариантыДинамическогоОформления.ПометкаУдаления
	|	И (ItobВариантыДинамическогоОформления.ДляКарты
	|			ИЛИ ItobВариантыДинамическогоОформления.ДляСписка)
	|	И НЕ ItobВариантыДинамическогоОформления.ЭтоВариантОформленияЗадержкиДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ItobВариантыДинамическогоОформления.Приоритет
	|ИТОГИ ПО
	|	Ссылка";
		
	ДеревоВариантовОформления = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	Для каждого ВариантОформления Из ДеревоВариантовОформления.Строки Цикл
		Если ItobДинамическиеОтборы.ПроверитьУсловиеДинамическогоОтбора(ВариантОформления.Строки, 
																		ИсточникЗначения, 
																		ДатчикиТерминала, 
																		ЗначенияДатчиков) Тогда
			
			ПодобранныйВариант = ВариантОформления.Ссылка;
			
			Прервать;	
		КонецЕсли; 	
	КонецЦикла; 
	   
	
	Возврат ПодобранныйВариант;	
	
КонецФункции

// Для каждой записи актуальности подбирает вариант динамического оформления. 
//	Если новый вариант отличается от старого - актуализирует записи актуальности.
//	Выполняется в фоновом задании (необходимо учесть это при запуске из транзакции).
//
Процедура АктуализироватьОформлениеВФоне() Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация всех вариантов динамического оформления'");
	ПараметрыВыполнения.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор);	
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Справочники.ItobВариантыДинамическогоОформления.АктуализироватьОформление_ОбработчикФоновогоЗадания", 
													   ПараметрыПроцедуры, 
													   ПараметрыВыполнения);
	
КонецПроцедуры

// Для каждой записи актуальности подбирает вариант динамического оформления. 
//	Если новый вариант отличается от старого - актуализирует записи актуальности.
//
Процедура АктуализироватьОформление() Экспорт

	НачатьТранзакцию();
	Попытка
		АктуализироватьОформлениеТранзакция();
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();	
		КонецЕсли; 
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Ошибка при обновлении вариантов динамического оформления",
								 УровеньЖурналаРегистрации.Ошибка,,,
								 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								 
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура АктуализироватьОформление_ОбработчикФоновогоЗадания(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	АктуализироватьОформление();
	
КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура АктуализироватьОформлениеТранзакция()
	
	// Блокируем весь регистр - во время пересчета частое РЗ актуальности с высокой вероятностью испортит данные.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ItobАктуальностьДанныхТерминалов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobАктуальностьДанныхТерминалов.Терминал КАК Терминал,
	|	ItobАктуальностьДанныхТерминалов.Скорость КАК Скорость,
	|	ItobАктуальностьДанныхТерминалов.Направление КАК Направление,
	|	ItobАктуальностьДанныхТерминалов.РазрешеннаяСкоростьПоПДД КАК РазрешеннаяСкоростьПоПДД,
	|	ItobАктуальностьДанныхТерминалов.ДанныеДатчиков КАК ДанныеДатчиков,
	|	ItobАктуальностьДанныхТерминалов.ПодходящийВариантДинамическогоОформления КАК ТекущийВариантДинамическогоОформления,
	|	ItobТерминалыДатчики.Назначение КАК Назначение,
	|	ItobТерминалыДатчики.Датчик.Код КАК КодДатчика,
	|	ItobТерминалыДатчики.Ссылка ЕСТЬ NULL КАК ТЧДатчикиПустая
	|ИЗ
	|	РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|		ПО ItobАктуальностьДанныхТерминалов.Терминал = ItobТерминалыДатчики.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Скорость),
	|	МАКСИМУМ(Направление),
	|	МАКСИМУМ(ДанныеДатчиков),
	|	МАКСИМУМ(ТекущийВариантДинамическогоОформления),
	|	МАКСИМУМ(ТЧДатчикиПустая)
	|ПО
	|	Терминал";
	
	ДанныеДатчиков = Новый ТаблицаЗначений;
	ДанныеДатчиков.Колонки.Добавить("Назначение");
	ДанныеДатчиков.Колонки.Добавить("КодДатчика");
	ДанныеДатчиков.Колонки.Добавить("КодДатчикаСтрокой");
	
	ПустойВариантДинамическогоОформления = Справочники.ItobВариантыДинамическогоОформления.ПустаяСсылка();
	
	ВыборкаПоЗаписямАктуальности = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаписямАктуальности.Следующий() Цикл
		ДанныеДатчиков.Очистить();
		
		Если НЕ ВыборкаПоЗаписямАктуальности.ТЧДатчикиПустая Тогда
			ВыборкаПоДаннымДатчиков = ВыборкаПоЗаписямАктуальности.Выбрать();
			Пока ВыборкаПоДаннымДатчиков.Следующий() Цикл
				НоваяСтрока = ДанныеДатчиков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоДаннымДатчиков);
				
				НоваяСтрока.КодДатчикаСтрокой = Формат(НоваяСтрока.КодДатчика,"ЧН=0; ЧГ=0");
			КонецЦикла;	
		КонецЕсли; 
		 		
		ЗначенияДатчиков = ItobОбщегоНазначения.ПреобразоватьСтрокуВДанныеДатчиков(ВыборкаПоЗаписямАктуальности.ДанныеДатчиков);
		
		ПодходящийВариантДинамическогоОформления = Подобрать(ВыборкаПоЗаписямАктуальности, 
															 ВыборкаПоЗаписямАктуальности.Терминал, 
															 ДанныеДатчиков, 
															 ЗначенияДатчиков);
															 
		Если ПодходящийВариантДинамическогоОформления = Неопределено Тогда
			ПодходящийВариантДинамическогоОформления = ПустойВариантДинамическогоОформления;	
		КонецЕсли;
		
		Если НЕ ВыборкаПоЗаписямАктуальности.ТекущийВариантДинамическогоОформления = ПодходящийВариантДинамическогоОформления Тогда
			Запись = РегистрыСведений.ItobАктуальностьДанныхТерминалов.СоздатьМенеджерЗаписи();
			Запись.Терминал = ВыборкаПоЗаписямАктуальности.Терминал;	// Запрос в цикле тут, чтобы не выбирать ресурсы в запросе (на дистанции гарантированно приводит к багам).
			Запись.Прочитать();
			Запись.ПодходящийВариантДинамическогоОформления = ПодходящийВариантДинамическогоОформления;
			
			Запись.Записать();
		КонецЕсли; 	
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти 

#КонецЕсли


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	Если ПустаяСтрока(Объект.НаименованиеПолное)
	 ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			Объект.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяЕдиницаПоКлассификатору");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СтавкаНДС               = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			Объект.ВидНоменклатуры = ?(Объект.Услуга, Справочники.ВидыНоменклатуры.Услуга, Справочники.ВидыНоменклатуры.Товар);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура) Тогда
		Элементы.ЕдиницыИзмерения.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		СтатьяДоходов = Справочники.уатСтатьиДоходов.ОсновнаяСтатьяДоходов;
		СтатьяРасходов = Справочники.уатСтатьиРасходов.ОсновнаяСтатьяРасходов;
	Иначе
		ЗагрузитьСтатьиДоходовЗатрат();
	КонецЕсли;
	
	ОбновитьНадписьСодержитКоличество();
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	УстановитьВидимостьДоступность();
	УстановитьАвтоотметку();
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьВидимостьДоступность();
	УстановитьОтбор();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("НайтиСоздатьШтрихкод", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьНадписьСодержитКоличество();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		МенЗАп = РегистрыСведений.уатСтатьиДоходовРасходовНоменклатуры.СоздатьМенеджерЗаписи();
		МенЗАп.Номенклатура = ТекущийОбъект.Ссылка;
		МенЗАп.СтатьяДоходов = СтатьяДоходов;
		МенЗАп.СтатьяРасходов = СтатьяРасходов;
		МенЗАп.Записать();
	КонецЕсли;
	
	ОбновитьНадписьСодержитКоличество();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ЗаполнитьПризнакиПоВидуНоменклатуры();
	УстановитьВидимостьДоступность();
	УстановитьАвтоотметку();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Объект.Наименование);

	РезультатВыбора = Неопределено;


	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), Список, Элементы.НаименованиеПолное);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    // Выбор из списка и обработка выбора.
    
    РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора <> Неопределено Тогда
        
        Объект.НаименованиеПолное				   = РезультатВыбора.Значение;
        ФормироватьНаименованиеПолноеАвтоматически = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ОбновитьНадписьСодержитКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_НоменклатураГрузов

&НаКлиенте
Процедура НоменклатураГрузовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Параметры.Ключ.Пустая() Тогда 
		ТекстНСТР = НСтр("en='To add features you need to record the item. Continue?';ru='Для добавления характеристики необходимо записать элемент. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("НоменклатураГрузовПередНачаломДобавленияОтветНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе 
		НоменклатураГрузовПередНачаломДобавленияЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГрузовПередНачаломДобавленияОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Записать();
	НоменклатураГрузовПередНачаломДобавленияЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГрузовПередНачаломДобавленияЗавершение()
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.уатНоменклатураГрузов.ФормаЗаписи", ПараметрыФормы, Элементы.НоменклатураГрузов);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_АналогиНоменклатуры

&НаКлиенте
Процедура АналогиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКлючЗаписи = Новый Структура("Номенклатура, Аналог");
	Если ТекущиеДанные.ПрямойАналог = "Обратный" Тогда
		СтруктураКлючЗаписи.Номенклатура = ТекущиеДанные.Аналог;
		СтруктураКлючЗаписи.Аналог = Объект.Ссылка;
	Иначе
		СтруктураКлючЗаписи.Номенклатура = Объект.Ссылка;
		СтруктураКлючЗаписи.Аналог = ТекущиеДанные.Аналог;
	КонецЕсли;
	МассивКлючЗаписи = Новый Массив;
	МассивКлючЗаписи.Добавить(СтруктураКлючЗаписи);
	КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.уатАналоги"), МассивКлючЗаписи);
	
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписи);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("АналогНоменклатурыЗакрытиеФормыЗаписи", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.уатАналоги.ФормаЗаписи", ПараметрыФормы, Элементы.АналогиНоменклатуры,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура СоздатьАналог(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда 
		ТекстНСТР = НСтр("en='To add features you need to record the item. Continue?';ru='Для добавления характеристики необходимо записать элемент. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("СоздатьАналогОтветНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе 
		СоздатьАналогЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАналогОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Записать();
	СоздатьАналогЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАналогЗавершение()
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("АналогНоменклатурыЗакрытиеФормыЗаписи", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.уатАналоги.ФормаЗаписи", ПараметрыФормы, Элементы.АналогиНоменклатуры,,,,ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьОтбор()
	
	НоменклатураГрузов.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	АналогиНоменклатуры.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	Элементы.НоменклатураГрузов.Обновить();
	Элементы.АналогиНоменклатуры.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет по реквизиту ВидНоменклатуры признаки Услуга 
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПризнакиПоВидуНоменклатуры()
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Объект.Услуга = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВидНоменклатуры, "Услуга");
	Иначе
		Объект.Услуга = Ложь;
	КонецЕсли;
	
	Если Объект.Услуга Тогда
		Объект.НомерГТД = Неопределено;
		Объект.СтранаПроисхождения = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПризнакиПоВидуНоменклатуры()

// Процедура устанавливает автоотметку незаполненного.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Если НЕ Объект.Услуга Тогда

		Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = Истина;
		Элементы.ЕдиницаХраненияОстатков.АвтоОтметкаНезаполненного = Истина;

	Иначе

		Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЕдиницаИзмерения.ОтметкаНезаполненного     = Ложь;
		Элементы.ЕдиницаХраненияОстатков.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЕдиницаХраненияОстатков.ОтметкаНезаполненного     = Ложь;

	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметку()

&НаКлиенте
// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьВидимостьДоступность()

	Элементы.НомерГТД.Доступность			 = НЕ Объект.Услуга;
	Элементы.СтранаПроисхождения.Доступность = НЕ Объект.Услуга;
	Элементы.ВидГрузаСверху.Видимость        = НЕ Объект.Услуга;
	Элементы.ЕдиницаХраненияОстатков.Видимость = НЕ Объект.Ссылка.Пустая();

КонецПроцедуры // УстановитьДоступность()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(Объект.НаименованиеПолное) 
	 ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

&НаСервере
Процедура ЗагрузитьСтатьиДоходовЗатрат()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатьиДоходовРасходовНоменклатуры.СтатьяРасходов,
	|	уатСтатьиДоходовРасходовНоменклатуры.СтатьяДоходов
	|ИЗ
	|	РегистрСведений.уатСтатьиДоходовРасходовНоменклатуры КАК уатСтатьиДоходовРасходовНоменклатуры
	|ГДЕ
	|	уатСтатьиДоходовРасходовНоменклатуры.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатьяДоходов = Выборка.СтатьяДоходов;
		СтатьяРасходов = Выборка.СтатьяРасходов;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСодержитКоличество()
	
	Элементы.уатКоличествоВОсновнойУпаковке.Заголовок = НСтр("en='Contains';ru='Содержит'") + ", " + Объект.ЕдиницаИзмерения;
	Элементы.уатКоличествоВУпаковкеДляРоссыпи.Заголовок = НСтр("en='Contains';ru='Содержит'") + ", " + Объект.ЕдиницаИзмерения;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогНоменклатурыЗакрытиеФормыЗаписи(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Элементы.АналогиНоменклатуры.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура НайтиСоздатьШтрихкод(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.Объект) И ЗначениеЗаполнено(Результат.Штрихкод) Тогда
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",
			Новый Структура("Штрихкод, Объект", Результат.Штрихкод, Объект.Ссылка));
		ОткрытьФорму("РегистрСведений.уатШтрихкоды.ФормаЗаписи", ПараметрыФормы);
	ИначеЕсли ЗначениеЗаполнено(Результат.Объект) И Результат.Объект <> Объект.Ссылка Тогда
		Сообщить(СтрШаблон("Считанный штрикод ""%1"" принадлежит другому объекту ""%2""", Результат.Штрихкод, Результат.Объект));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		ОтображениеПериода = ?(Объект.ОтображатьНомерПериода, 1, 0);
		Если Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги")
			И Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			
			Объект.Валюта = ВалютаРеглУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный") Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗаполнитьСписокПоказателейПланирования();
	
	Для Каждого ТекСтрока Из Объект.РазрезыПоказателейПланирования Цикл
		НоваяСтрока = РазрезыПоказателейПланирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьВидимость();
	УстановитьСписокВыбораПериодичностьКраткосрочногоПланирования();
	
	Если НЕ Объект.Ссылка.Пустая() 
		И Объект.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный") Тогда
		ПериодичностьДолгосрочногоПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВедущийСценарий, "Периодичность");
		УстановитьСписокВыбораПериодичностьПланирования(ПериодичностьДолгосрочногоПланирования);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОтображениеПериода = ?(Объект.ОтображатьНомерПериода, 1, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Объект.РазрезыПоказателейПланирования.Очистить();
	Для Каждого ТекСтрока Из ПоказателиПланирования Цикл
		СтрокиАналитик = РазрезыПоказателейПланирования.НайтиСтроки(Новый Структура("ПараметрВыработки", ТекСтрока.ПараметрВыработки));
		Если СтрокиАналитик.Количество() <> 0 Тогда
			Для Каждого ТекСтрока Из СтрокиАналитик Цикл
				НоваяСтрока = Объект.РазрезыПоказателейПланирования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект.РазрезыПоказателейПланирования.Добавить();
			НоваяСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
		Конецесли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборРазрезовПланированияСценария" Тогда
		ОбработкаВыбораРазрезовПланирования(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделПриИзменении(Элемент)
	УстановитьВидимость();

	Если Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.Выработка") Тогда
		Объект.Валюта          = Неопределено;
		Объект.ПолучательУслуг = Неопределено;
	ИначеЕсли Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") Тогда
		Объект.Валюта          = ВалютаРеглУчета;
		Объект.ПолучательУслуг = ПредопределенноеЗначение("Перечисление.уатПолучателиУслуг.Контрагент");
	Иначе
		Объект.Валюта          = ВалютаРеглУчета;
		Объект.ПолучательУслуг = Неопределено;
	КонецЕсли;
	
	МассивУдаляемыхЗначений = Новый Массив();
	Для Каждого ТекСтрока Из Объект.РазрезыПланирования Цикл
		Если Объект.Раздел <> ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") 
			И (ТекСтрока.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Договор")
			ИЛИ ТекСтрока.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Услуга")) Тогда
			МассивУдаляемыхЗначений.Добавить(ТекСтрока);
			
		ИначеЕсли Объект.Раздел <> ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы")
			И (ТекСтрока.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НоменклатураГруза")
			ИЛИ ТекСтрока.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья")) Тогда
			
			МассивУдаляемыхЗначений.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивУдаляемыхЗначений Цикл
		Объект.РазрезыПланирования.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ВидПланированияПриИзменении(Элемент)
	Элементы.ВедущийСценарий.Видимость                             = Объект.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный");

	Если Объект.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный") Тогда
		Объект.Периодичность = Неопределено;
		
		ПериодичностьДолгосрочногоПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВедущийСценарий, "Периодичность");
		УстановитьСписокВыбораПериодичностьПланирования(ПериодичностьДолгосрочногоПланирования);
		
	Иначе
		
		УстановитьСписокВыбораПериодичностьПланирования(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьКраткосрочногоПланированияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	Объект.ПериодичностьКраткосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка");
	
	УстановитьСписокВыбораПериодичностьКраткосрочногоПланирования();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКраткосрочноеПланированиеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПериодаПриИзменении(Элемент)
	
	Объект.ОтображатьНомерПериода = ОтображениеПериода = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияВариантАналитикиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.РазрезыПланированияВариантАналитикиПредставление.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРазрезов = ПолучитьСписокРазрезов(ТекущиеДанные.РазрезПланирования);
	ДанныеВыбора   = СписокРазрезов;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияВариантАналитикиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	Конецесли;
	
	Элементы.РазрезыПланированияВариантАналитикиПредставление.СписокВыбора.Очистить();
	Элементы.РазрезыПланированияВариантАналитикиПредставление.СписокВыбора.Добавить(ВыбранноеЗначение);
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВариантАналитики = ВыбранноеЗначение;
	Если ТекущиеДанные.ВариантАналитики
		= ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПринадлежностьТС") Тогда
		ТекущиеДанные.ПланированиеПоГруппам = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РазрезыПланированияРазрезПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.РазрезыПланированияРазрезПланирования.СписокВыбора.Очистить();
	ДанныеВыбора = ПолучитьСписокВыбораРазрезПланирования(Объект.Раздел);

КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияРазрезПланированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	Конецесли;
	
	Элементы.РазрезыПланированияРазрезПланирования.СписокВыбора.Очистить();
	Элементы.РазрезыПланированияРазрезПланирования.СписокВыбора.Добавить(ВыбранноеЗначение);
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РазрезПланирования = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПланированияРазрезыПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоказателиПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	мРазрезыПланирования = Новый Массив;
	СтрокиАналитик = РазрезыПоказателейПланирования.НайтиСтроки(Новый Структура("ПараметрВыработки", ТекущиеДанные.ПараметрВыработки));
	Для Каждого ТекСтрока Из СтрокиАналитик Цикл
		СтруктураЗаполнения = Новый Структура("РазрезПланирования, ВариантАналитики, ПланированиеПоГруппам");
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ТекСтрока);
		мРазрезыПланирования.Добавить(СтруктураЗаполнения);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура("Раздел, РазрезыПланирования, ПараметрВыработки",
		Объект.Раздел, мРазрезыПланирования, ТекущиеДанные.ПараметрВыработки);
	ОткрытьФорму("Справочник.уатСценарииПланирования.Форма.ФормаВыбораРазрезовПланирования", ПараметрыОткрытия, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРазрезовПланирования(ДопПараметры)
	
	Если ТипЗнч(ДопПараметры.РазрезыПланирования) <> Тип("Массив") Тогда
		Возврат;
	Конецесли;
	
	ТекущиеДанные = Элементы.ПоказателиПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РазрезыПланирования = "";
	
	Сч = РазрезыПоказателейПланирования.Количество()-1;
	Пока Сч >= 0 Цикл
		Если РазрезыПоказателейПланирования[Сч].ПараметрВыработки = ДопПараметры.ПараметрВыработки Тогда
			РазрезыПоказателейПланирования.Удалить(Сч);
		КонецЕсли;
					
		Сч = Сч - 1;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДопПараметры.РазрезыПланирования Цикл
		НоваяСтрока = РазрезыПоказателейПланирования.Добавить();
		НоваяСтрока.ПараметрВыработки = ДопПараметры.ПараметрВыработки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		ТекущиеДанные.РазрезыПланирования = ?(ЗначениеЗаполнено(ТекущиеДанные.РазрезыПланирования),
			ТекущиеДанные.РазрезыПланирования + ", ", "")
			+ Строка(НоваяСтрока.РазрезПланирования) + 
			?(ЗначениеЗаполнено(НоваяСтрока.ВариантАналитики), " (" + НоваяСтрока.ВариантАналитики + ")", "");
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОперативноеПланированиеПриИзменении(Элемент)
	Элементы.ГруппаИспользоватьОперативноеПланирование.Видимость = Объект.ИспользоватьОперативноеПланирование;
	Элементы.НастройкиСозданияЗаказа.Видимость                   = Объект.ИспользоватьОперативноеПланирование;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПланированияПараметрВыработкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПоказателиПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СводныйПоказатель   = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекущиеДанные.ПараметрВыработки, "СводныйПоказатель");
	ТекущиеДанные.РазрезыПланирования = "";

КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияРазрезПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВариантАналитики              = "";
	ТекущиеДанные.ПланированиеПоГруппам         = Ложь;
	
	Если ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС")
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВариантАналитики)
		И Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ОбъемыПеревозок") Тогда
		ТекущиеДанные.ВариантАналитики   = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС");
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС")
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВариантАналитики) ТОгда
		ТекущиеДанные.ВариантАналитики   = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТС");
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья")
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВариантАналитики) Тогда
		ТекущиеДанные.ВариантАналитики   = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяДоходов");
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Маршрут")
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВариантАналитики) Тогда
		ТекущиеДанные.ВариантАналитики   = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Маршрут");
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Контрагент")
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВариантАналитики) Тогда
		ТекущиеДанные.ВариантАналитики   = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Заказчик");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВедущийСценарийПриИзменении(Элемент)
	
	ПериодичностьДолгосрочногоПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВедущийСценарий, "Периодичность");
	УстановитьСписокВыбораПериодичностьПланирования(ПериодичностьДолгосрочногоПланирования);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	флРазделПредоставленныеУслуги = Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги");
	флРазделДоходыРасходы         = Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы");
	флРазделОбъемыПеревозок       = Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ОбъемыПеревозок");
	флРазделВыработка             = Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.Выработка");
	
	Элементы.ПериодичностьКраткосрочногоПланирования.Видимость     = Объект.ИспользоватьКраткосрочноеПланирование;
	Элементы.ПолучательУслуг.Видимость                             = флРазделПредоставленныеУслуги;
	Элементы.ГруппаПолучательУслугВалюта.Видимость                 = флРазделПредоставленныеУслуги ИЛИ флРазделДоходыРасходы;
	Элементы.ВедущийСценарий.Видимость                             = Объект.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный");
	
	Элементы.ОтображениеПериода.Видимость                          = Объект.ИспользоватьКраткосрочноеПланирование;
	Элементы.ГруппаИспользоватьОперативноеПланирование.Видимость   = Объект.ИспользоватьОперативноеПланирование;
	Элементы.НастройкиСозданияЗаказа.Видимость                     = Объект.ИспользоватьОперативноеПланирование;
	
	Элементы.ГруппаИспользоватьОперативноеПланированиеНастройки.Видимость = Не флРазделОбъемыПеревозок;
	Элементы.ГруппаПоказателиПланирования.Видимость                       = Не флРазделОбъемыПеревозок;
	Элементы.ПараметрВыработки.Видимость                                  = флРазделОбъемыПеревозок;
	Элементы.ПланированиеОбъемовВПроцентах.Видимость                      = флРазделОбъемыПеревозок;
	
	Если Объект.ПериодичностьКраткосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Элементы.ГруппаОтображатьПериод.Доступность = Ложь;
		ОтображениеПериода = 0;
		ОтображениеПериодаПриИзменении(Неопределено);
	Иначе
		Элементы.ГруппаОтображатьПериод.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя")
		ИЛИ Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Элементы.ГруппаИспользоватьКраткосрочноеПланирование.Видимость = Ложь;
		Объект.ИспользоватьКраткосрочноеПланирование = Ложь;
	ИначеЕсли флРазделОбъемыПеревозок Тогда
		Элементы.ГруппаИспользоватьКраткосрочноеПланирование.Видимость = Ложь;
		Объект.ИспользоватьКраткосрочноеПланирование = Ложь;
	Иначе
		Элементы.ГруппаИспользоватьКраткосрочноеПланирование.Видимость = Истина;
	КонецЕсли;
		
	Если флРазделПредоставленныеУслуги Тогда
		Элементы.ДекорацияОписание.Заголовок = 
			Нстр("ru = 'По аналитикам: ""Организация"", ""Колонна"", ""Подразделение"", ""Транспортное средство"" - планирование и сбор факта производится всегда.'");
	ИначеЕсли флРазделВыработка Тогда
		Элементы.ДекорацияОписание.Заголовок = 
			Нстр("ru = 'По аналитикам: ""Организация"", ""Колонна"", ""Транспортное средство"", ""Параметр выработки"" - планирование и сбор факта производится всегда.'");
	ИначеЕсли флРазделДоходыРасходы Тогда
		Элементы.ДекорацияОписание.Заголовок = 
			Нстр("ru = 'По аналитикам: ""Организация"", ""Колонна"", ""Подразделение"", ""Транспортное средство"" - планирование и сбор факта производится всегда.'");
	ИначеЕсли флРазделОбъемыПеревозок Тогда
		Элементы.ДекорацияОписание.Заголовок = 
			Нстр("ru = 'По аналитикам: ""Организация"", ""Подразделение"", ""Перевозчик"", ""Договор"" - планирование и сбор факта производится всегда.'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокВыбораПериодичностьКраткосрочногоПланирования()
	
	Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Очистить();
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.ПериодичностьКраткосрочногоПланирования.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокВыбораПериодичностьПланирования(ПериодичностьДолгосрочногоПланирования)
	
	Элементы.Периодичность.СписокВыбора.Очистить();
	
	Если ПериодичностьДолгосрочногоПланирования = Неопределено Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		
	ИначеЕсли ПериодичностьДолгосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли ПериодичностьДолгосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли ПериодичностьДолгосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли ПериодичностьДолгосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Декада"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	ИначеЕсли ПериодичностьДолгосрочногоПланирования = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Неделя"));
		Элементы.Периодичность.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.День"));

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораРазрезПланирования(Раздел)
	
	СписокВыбораРазрезПланирования = Новый СписокЗначений;
	
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Маршрут"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ВидПеревозки"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ОбъектСтроительства"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НаправлениеПеревозки"));
	
	Если Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги")
		Или Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы")
		Или Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.Выработка") Тогда
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Подразделение"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ПараметрВыработки"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Колонна"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Контрагент"));
	КонецЕсли;
	
	Если Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") Тогда
		
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Договор"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Услуга"));
		
	ИначеЕсли Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы") Тогда
		
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НоменклатураГруза"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья"));
	КонецЕсли;
	
	Возврат СписокВыбораРазрезПланирования;
	
КонецФункции

&НаСервере
Процедура ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования, Раздел)
	
	СтрокиРазделов = Объект.РазрезыПланирования.НайтиСтроки(Новый Структура("РазрезПланирования", Раздел));
	Если СтрокиРазделов.Количество() = 0 Тогда
		СписокВыбораРазрезПланирования.Добавить(Раздел);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПоказателейПланирования()
	
	Для Каждого ТекСтрока Из Объект.РазрезыПоказателейПланирования Цикл
		
		Разрез = ПоказателиПланирования.НайтиСтроки(Новый Структура("ПараметрВыработки",
		ТекСтрока.ПараметрВыработки));
		
		Если Разрез.Количество() <> 0 Тогда
			Разрез[0].РазрезыПланирования = ?(ЗначениеЗаполнено(Разрез[0].РазрезыПланирования),
			Разрез[0].РазрезыПланирования + ", ", "")
			+ Строка(ТекСтрока.РазрезПланирования) + 
			?(ЗначениеЗаполнено(ТекСтрока.ВариантАналитики), " (" + ТекСтрока.ВариантАналитики + ")", "");
		Иначе
			НоваяСтрока = ПоказателиПланирования.Добавить();
			НоваяСтрока.ПараметрВыработки   = ТекСтрока.ПараметрВыработки;
			НоваяСтрока.СводныйПоказатель   = ТекСтрока.ПараметрВыработки.СводныйПоказатель;
			НоваяСтрока.РазрезыПланирования = Строка(ТекСтрока.РазрезПланирования) + 
			?(ЗначениеЗаполнено(ТекСтрока.ВариантАналитики), " (" + ТекСтрока.ВариантАналитики + ")", "");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокРазрезов(РазрезПланирования)
	
	СписокВыбораВариантАналитики = Новый СписокЗначений();

	Если РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС") Тогда
		Если Объект.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ОбъемыПеревозок") Тогда
			СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТипТС"));
			СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС"));
		Иначе
			СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТС"));
			СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТипТС"));
			СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПринадлежностьТС"));
			СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС"));
		КонецЕсли;
	ИначеЕсли РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Контрагент") Тогда
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Заказчик"));
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Грузоотправитель"));
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Грузополучатель"));
	ИначеЕсли РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Маршрут") Тогда
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Маршрут"));
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПунктОтправления"));
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПунктНазначения"));
	ИначеЕсли РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья") Тогда
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяДоходов"));
		СписокВыбораВариантАналитики.Добавить(ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяРасходов"));
	КонецЕсли;
	
	Возврат СписокВыбораВариантАналитики;
КонецФункции

#КонецОбласти

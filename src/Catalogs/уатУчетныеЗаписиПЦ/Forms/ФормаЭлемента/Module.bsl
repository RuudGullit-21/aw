
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ВнешняяСистема") Тогда
		ПереданнаяВнешняяСистема = Параметры.ВнешняяСистема;
	КонецЕсли;

	Элементы.Договор.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Объект.НаименованиеДоговора) Тогда
		Элементы.Договор.СписокВыбора.Добавить(Объект.IDКонтракта, Объект.НаименованиеДоговора);
	КонецЕсли;

	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаПоследнегоОбмена = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		ПарольУстановлен = уатОбщегоНазначения_проф.ПроверитьЗаполнениеПароля(Объект.Ссылка);
		Пароль = ?(ПарольУстановлен, "********", "");
	КонецЕсли;
	Элементы.Пароль.КнопкаВыбора = Ложь;
	Элементы.ФормаЛогированиеЗапросов.Пометка = Объект.ЛогированиеЗапросов;
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.уатУчетныеЗаписиПЦ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВнешняяСистема.СписокВыбора.Очистить();
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьПЦГазпромнефть") 
		ИЛИ ПереданнаяВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		Элементы.ВнешняяСистема.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьПЦППР") 
		ИЛИ ПереданнаяВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР") Тогда
		Элементы.ВнешняяСистема.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьПЦЛукойл") 
		ИЛИ ПереданнаяВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		Элементы.ВнешняяСистема.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД"));
	КонецЕсли;
	Если уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьПЦРоснефть") 
		ИЛИ ПереданнаяВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") Тогда
		Элементы.ВнешняяСистема.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереданнаяВнешняяСистема) Тогда
		Объект.ВнешняяСистема = ПереданнаяВнешняяСистема;
	КонецЕсли;
	
	УстановитьВидимость();
	SHA512_ИнициализироватьСкрипт();
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(SSLСертификатАдрес) Тогда
		ТекущийОбъект.SSLСертификат = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(SSLСертификатАдрес), Новый СжатиеДанных(9));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
		Пароль        = ?(ЗначениеЗаполнено(Пароль), "********", "");
		ПарольИзменен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		ПроверитьПодключениеГазпромнефть();
	ИначеЕсли Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		ПроверитьПодключениеЛукойл();
	ИначеЕсли Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") Тогда
		ПроверитьПодключениеРоснефть();
	ИначеЕсли Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР") Тогда
		ПроверитьПодключениеППР();
	Иначе
		ИдентификаторДействия = "Справочник.уатУчетныеЗаписиПЦ.ПроверитьПодключение";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСПЦ_ВыполнитьДействияВФорме(ИдентификаторДействия, 
			уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВнешняяСистема, "НаименованиеПС"),,ЭтотОбъект);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресПоУмолчанию(Команда)
	Объект.АдресСервиса = СтрЗаменить(СтрЗаменить(Элементы.АдресСервиса.ПодсказкаВвода, "Например:", ""), " ", "");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	Отказ = Ложь;
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ФлагУдаленияФайла = Ложь;
	
	ПараметрыДиалога = Новый Структура("Режим, Фильтр, ИндексФильтра, Заголовок");
	ПараметрыДиалога.Режим  = РежимДиалогаВыбораФайла.Открытие;
	ПараметрыДиалога.Фильтр = НСтр("ru='Хранилище клиентского сертификата'") + "(*.p12)|*.p12";
	ПараметрыДиалога.ИндексФильтра = 0;
	ПараметрыДиалога.Заголовок = НСтр("ru='Выберите файл хранилища клиентского сертификата'");
	
	ОбработчикВыбораФайлаОбработки = Новый ОписаниеОповещения("ИзменитьФайлПослеВыбораФайлаОбработки", ЭтотОбъект);
	
	ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузкиФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ЗаполнитьЗначенияСвойств(ПараметрыЗагрузкиФайла.Диалог, ПараметрыДиалога);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикВыбораФайлаОбработки, ПараметрыЗагрузкиФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьIDКонтрактаПоНомеру(Команда)
	
	УдалитьНезначащиеСимволыВНастройках();
	ОшибкаЗаполнения = Ложь;
	
	Если Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
			ТекстОшибки = НСтр("en='It is necessary to specify address of service Роснефть.';ru='Необходимо указать адрес сервиса Роснефть.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Логин) Тогда 
			ТекстОшибки = НСтр("ru='Необходимо указать логин.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.Логин",, ОшибкаЗаполнения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пароль) Тогда 
			ТекстОшибки = НСтр("ru='Необходимо указать пароль.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Пароль",, ОшибкаЗаполнения);
		КонецЕсли;

		ТекстСообщения = НСтр("ru='Введите номер топливной карты'");
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
			ТекстОшибки = НСтр("en='It is necessary to specify address of service Лукойл ЛИКАРД.';ru='Необходимо указать адрес сервиса Лукойл ЛИКАРД.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
		КонецЕсли;
		
		Если НЕ SSLСертификатЗагружен(Объект.Ссылка) Тогда 
			ТекстОшибки = НСтр("ru='Необходимо загрузить клиентский сертификат.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкаЗаполнения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пароль) Тогда 
			ТекстОшибки = НСтр("ru='Необходимо указать пароль от хранилища клиентского сертификата.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Пароль",, ОшибкаЗаполнения);
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Введите номер договора'");
	Конецесли;

	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьIDКонтрактаПоНомеруПродолжение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения,, ТекстСообщения, 150);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроксиСервера(Команда)
	
	ПараметрыФормы = Неопределено;
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		ПараметрыФормы = Новый Структура("НастройкаПроксиНаКлиенте", Истина);
	КонецЕсли;
	
	ПолучениеФайловИзИнтернетаКлиент.ОткрытьФормуПараметровПроксиСервера(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеЗапросов(Команда)
	Элементы.ФормаЛогированиеЗапросов.Пометка = НЕ Элементы.ФормаЛогированиеЗапросов.Пометка;
	Объект.ЛогированиеЗапросов                = НЕ Объект.ЛогированиеЗапросов;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.НаименованиеДоговора = Элементы.Договор.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПодключениеКГазпромнефтьДоступно();
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяСистемаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СохранятьОтчетВКаталогПриИзменении(Элемент)
	Объект.КаталогФайлаДанных = "";
	УстановитьВидимость();
	Если Объект.СохранятьОтчетВКаталог Тогда
		КаталогФайлаДанныхНачалоВыбора(Неопределено, Неопределено, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьНаОтделыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайлаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЗаголовокВыбора = НСтр("ru='Выберите каталог для сохранения отчета'");
	
	ОбработчикВыбораКаталога= Новый ОписаниеОповещения("СохранятьОтчетВКаталогПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ВыбратьКаталог(ОбработчикВыбораКаталога, ЗаголовокВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьIDКонтрактаПоНомеруПродолжение(Номер, ДополнительныеПараметры) Экспорт
	
	ОшибкаЗаполнения = Ложь;
	Если НЕ ЗначениеЗаполнено(Номер) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать номер.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("Ссылка,ВнешняяСистема,АдресСервиса,Логин,
	|Пароль,КлючАвторизации,СоздаватьЗаправкиГСМ,
	|IDКонтракта,НаименованиеДоговора,СохранятьОтчетВКаталог,КаталогФайлаДанных,ДатаПоследнегоОбмена,
	|Организация,Ответственный,РазбиватьНаОтделы,SSLСертификат,
	|ОсновнаяАЗС,ЛогированиеЗапросов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	
	Если НЕ ПарольИзменен Тогда
		ТекПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка);
	Иначе
		ТекПароль = Пароль;
	КонецЕсли;
	
	СтруктураПараметровУчетнойЗаписи.Пароль = ТекПароль;

	Если Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") Тогда
		IDКонтракта = уатЗагрузкаПЦ.Роснефть_ПолучитьIDКонтрактаПоНомеруКарты(СтруктураПараметровУчетнойЗаписи, Номер, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;

	Иначе
		
		Если ЭтоАдресВременногоХранилища(SSLСертификатАдрес) Тогда
			SSLСертификат = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(SSLСертификатАдрес), Новый СжатиеДанных(9));
		Иначе
			SSLСертификат = Объект.Ссылка.SSLСертификат;
		КонецЕсли;
		СтруктураПараметровУчетнойЗаписи.SSLСертификат = SSLСертификат;
	
		IDКонтракта = уатЗагрузкаПЦ.ЛИКАРД_ПолучитьIDКонтрактаПоНомеру(СтруктураПараметровУчетнойЗаписи, Номер, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Объект.IDКонтракта = СтрЗаменить(СтрЗаменить(Строка(IDКонтракта), Символы.НПП, ""), " ", "");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.КаталогФайлаДанных.Видимость         = Объект.СохранятьОтчетВКаталог;
	Элементы.ГруппаПароль.Видимость               = Истина;
	Элементы.Логин.Видимость                      = Истина;
	Элементы.Договор.Видимость                    = Истина;
	Элементы.ГруппаСохранятьОтчетВФайл.Видимость  = Истина;
	Элементы.КлючАвторизации.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	Элементы.ГруппаРазбиватьНаОтделы.Видимость    = Ложь;
	Элементы.ГруппаСертификат.Видимость           = Ложь;
	Элементы.ГруппаIDДоговора.Видимость           = Ложь;
	Элементы.ОсновнаяАЗС.Видимость                = Ложь;
	
	Если Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = Нстр("en = 'Например: https://api-demo.opti-24.com'; ru = 'Например: https://api-demo.opti-24.com'");
		Элементы.Пароль.Подсказка = Нстр("ru = 'Пароль пользователя, захешированный функцией SHA-512 по стандарту SHS - FIPS 180-4, результат хеширования в нижнем регистре.
                                          |Если введены не зашифрованные данные, пароль будет зашифрован автоматически.'");
		Элементы.Пароль.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.HTML.Видимость = Истина;
	ИначеЕсли Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = Нстр("en = 'Например: https://online.petrolplus.ru'; ru = 'Например: https://online.petrolplus.ru'");
		Элементы.ГруппаПароль.Видимость      = Ложь;
		Элементы.Логин.Видимость             = Ложь;
		Элементы.Договор.Видимость           = Ложь;
		Элементы.ГруппаРазбиватьНаОтделы.Видимость = Истина;
		Элементы.КлючАвторизации.Подсказка = Нстр("ru = 'Как получить ключ авторизации:
                                                   |1. Зайдите в раздел «Настройки компании» Личного кабинета ППР — вкладка «API». При необходимости авторизуйтесь на сайте, используя свои логин и пароль.
                                                   |2. Выпустите ключ и скопируйте в буфер обмена ключ авторизации.
                                                   |3. Используйте полученный ключ авторизации.
                                                   |
                                                   |В целях безопасности данных, ключ не сохраняется в личном кабинете ППР. Поэтому нет возможности продублировать ключ или посмотреть информацию повторно. В случае потери ключа, его компрометации, либо по другим соображениям безопасности, авторизационный ключ всегда можно перевыпустить. При этом старый ключ станет недействительным.'");
		Элементы.КлючАвторизации.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.ГруппаСохранятьОтчетВФайл.Видимость  = Ложь;
		Элементы.РазбиватьНаОтделы.Подсказка         = Нстр("ru = 'При установке флага, в справочнике АЗС, появится возможность выбрать отдел.
		|В документ отчет ПЦ попадут только те транзакции, у которых наименование отдела совпадает с отделом выбранным в АЗС.'");
	ИначеЕсли Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = Нстр("en = 'Например: https://11.111.11.11'; ru = 'Например: https://11.111.11.11'");
		Элементы.Логин.Видимость             = Ложь;
		Элементы.Договор.Видимость           = Ложь;
		Элементы.ГруппаСертификат.Видимость  = Истина;
		Элементы.Пароль.Подсказка            = Нстр("ru = 'Пароль от хранилища клиентского сертификата, выданного поставщиком API.'");
		Элементы.Пароль.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.ЗагрузитьСертификат.Заголовок       = ?(SSLСертификатЗагружен(Объект.Ссылка), Нстр("ru = 'Изменить'"), Нстр("ru = 'Загрузить'"));
		Элементы.КлючАвторизации.Видимость           = Ложь;
		Элементы.ГруппаСохранятьОтчетВФайл.Видимость = Ложь;
		Элементы.ГруппаIDДоговора.Видимость          = Истина;
		Элементы.ГруппаРазбиватьНаОтделы.Видимость   = Истина;
		Элементы.ОсновнаяАЗС.Видимость               = Объект.РазбиватьНаОтделы;
		Элементы.ПолучитьIDКонтрактаПоНомеру.Заголовок = Нстр("ru = 'Получить идентификатор договора по номеру'");
		Элементы.РазбиватьНаОтделы.Подсказка         = Нстр("ru = 'При загрузке данных будет создано несколько документов ""Отчет поставщика ПЦ"" с разными АЗС.
                                                             |Требуемая АЗС определяется по владельцу топливной карты, если карта не найдена, то документ создается для ""Основной АЗС"".'");
	ИначеЕсли Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") Тогда
		Элементы.АдресСервиса.ПодсказкаВвода = Нстр("en = 'Например: https://lkapi.rn-card.ru'; ru = 'Например: https://lkapi.rn-card.ru'");
		Элементы.Логин.Видимость             = Истина;
		Элементы.Договор.Видимость           = Ложь;
		Элементы.ГруппаСертификат.Видимость  = Ложь;
		Элементы.КлючАвторизации.Видимость           = Ложь;
		Элементы.ГруппаСохранятьОтчетВФайл.Видимость = Ложь;
		Элементы.ГруппаIDДоговора.Видимость          = Истина;
		Элементы.ПолучитьIDКонтрактаПоНомеру.Заголовок = Нстр("ru = 'Получить идентификатор договора по номеру топливной карты'");
		Элементы.Пароль.Подсказка = Нстр("ru = 'Пароль пользователя'; en = 'User password'");
		Элементы.Пароль.ОтображениеПодсказки = ОтображениеПодсказки.Авто;


	Иначе
		Элементы.HTML.Видимость = Ложь;

		Элементы.Пароль.Подсказка = Нстр("ru = 'Пароль пользователя'; en = 'User password'");
		Элементы.Пароль.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		ИдентификаторДействия = "Справочник.уатУчетныеЗаписиПЦ.УстановитьВидимость";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСПЦ_ВыполнитьДействияВФорме(ИдентификаторДействия,
			уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВнешняяСистема, "НаименованиеПС"),,ЭтотОбъект);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФайлПослеВыбораФайлаОбработки(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		SSLСертификатАдрес = Результат.Хранение;
		Элементы.ЗагрузитьСертификат.Заголовок = Нстр("ru = 'Изменить'");
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранятьОтчетВКаталогПослеВыбора(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Объект.КаталогФайлаДанных = Результат;
		Модифицированность        = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция SSLСертификатЗагружен(УчетнаяЗаписьПЦ)
	Возврат ЗначениеЗаполнено(УчетнаяЗаписьПЦ.SSLСертификат.Получить());
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключениеГазпромнефть()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service Газпромнефть.';ru='Необходимо указать адрес сервиса Газпромнефть.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПодключениеКГазпромнефтьДоступно() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЛукойл()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service Лукойл ЛИКАРД.';ru='Необходимо указать адрес сервиса Лукойл ЛИКАРД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если НЕ SSLСертификатЗагружен(Объект.Ссылка) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо загрузить клиентский сертификат.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать пароль от хранилища клиентского сертификата.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Пароль",, ОшибкаЗаполнения);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.IDКонтракта) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать номер договора.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.IDКонтракта",, ОшибкаЗаполнения);
	КонецЕсли;

	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, ОшибкаЗаполнения);

	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаИнформацииПоДоговору = "";
	Если Не ПодключениеКЛукойлДоступно(СтрокаИнформацииПоДоговору) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждение = НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'") + 
		Символы.ПС + 
		Символы.ПС + 
		СтрокаИнформацииПоДоговору;
	ПоказатьПредупреждение(, ТекстПредупреждение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеРоснефть()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service Роснефть.';ru='Необходимо указать адрес сервиса Роснефть.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Логин) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать логин.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.Логин",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать пароль.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Пароль",, ОшибкаЗаполнения);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.IDКонтракта) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать номер договора.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.IDКонтракта",, ОшибкаЗаполнения);
	КонецЕсли;

	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, ОшибкаЗаполнения);

	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаИнформацииПоДоговору = "";
	Если Не ПодключениеКРоснефтьДоступно(СтрокаИнформацииПоДоговору) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждение = НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'");
	ПоказатьПредупреждение(, ТекстПредупреждение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеППР()
	
	УдалитьНезначащиеСимволыВНастройках();
	
	ОшибкаЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of service ППР.';ru='Необходимо указать адрес сервиса ППР.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.АдресСервиса",, ОшибкаЗаполнения);
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПодключениеКППРДоступно() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезначащиеСимволыВНастройках()
	
	Если НЕ ЕстьПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьНезначащиеСимволы(Объект.Логин);
	ЗаменитьНезначащиеСимволы(Объект.АдресСервиса);
	ЗаменитьНезначащиеСимволы(Объект.КлючАвторизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНезначащиеСимволы(ЗначениеНастройки)
	
	НовоеЗначение = ЗначениеНастройки;
	
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символы.ПС, "");
	
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символ(182), "");
	
	НовоеЗначение = СокрЛП(НовоеЗначение);
	
	ЗначениеНастройки = НовоеЗначение;
	
КонецПроцедуры

&НаСервере
Функция ПодключениеКГазпромнефтьДоступно()
	
	ТабДанных   = Неопределено;
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("Ссылка,ВнешняяСистема,АдресСервиса,Логин,
		|Пароль,КлючАвторизации,СоздаватьЗаправкиГСМ,
		|IDКонтракта,НаименованиеДоговора,СохранятьОтчетВКаталог,КаталогФайлаДанных,ДатаПоследнегоОбмена,
		|Организация,Ответственный,РазбиватьНаОтделы,SSLСертификат,
		|ОсновнаяАЗС,ЛогированиеЗапросов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	
	Если НЕ ПарольИзменен Тогда
		ТекПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка);
	Иначе
		ТекПароль = Пароль;
	КонецЕсли;
	
	СтруктураПараметровУчетнойЗаписи.Пароль = ТекПароль;
	СписокДоговоров = уатЗагрузкаПЦ.Газпромнефть_ПолучитьСписокДоговоров(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Для Каждого ТекСтрока Из СписокДоговоров Цикл 
		Если Элементы.Договор.СписокВыбора.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			Элементы.Договор.СписокВыбора.Добавить(ТекСтрока.Значение, ТекСтрока.Представление);
		КонецЕсли;
	КонецЦикла;
	
	мсвУдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.Договор.СписокВыбора Цикл 
		Если СписокДоговоров.НайтиПоЗначению(ТекСтрока.Значение) = Неопределено Тогда 
			мсвУдаляемыеЭлементы.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из мсвУдаляемыеЭлементы Цикл 
		Элементы.Договор.СписокВыбора.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Истина;
	Иначе 
		ТекстОшибки = ТекстОшибки
			+ Символы.ПС +  НСтр("ru='Проверьте авторизационные данные или обратитесь в службу технической поддержки Газпромнефть gpn-card@gazprom-neft.ru.'")
			;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПодключениеКЛукойлДоступно(СтрокаИнформацииПоДоговору)
	
	ТабДанных   = Неопределено;
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("Ссылка,ВнешняяСистема,АдресСервиса,Логин,
	|Пароль,КлючАвторизации,СоздаватьЗаправкиГСМ,
	|IDКонтракта,НаименованиеДоговора,СохранятьОтчетВКаталог,КаталогФайлаДанных,ДатаПоследнегоОбмена,
	|Организация,Ответственный,РазбиватьНаОтделы,SSLСертификат,
	|ОсновнаяАЗС,ЛогированиеЗапросов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	Если НЕ ПарольИзменен Тогда
		ТекПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка);
	Иначе
		ТекПароль = Пароль;
	КонецЕсли;
	СтруктураПараметровУчетнойЗаписи.Пароль = ТекПароль;
	Если ЭтоАдресВременногоХранилища(SSLСертификатАдрес) Тогда
		SSLСертификат = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(SSLСертификатАдрес), Новый СжатиеДанных(9));
	Иначе
		SSLСертификат = Объект.Ссылка.SSLСертификат;
	КонецЕсли;
	СтруктураПараметровУчетнойЗаписи.SSLСертификат = SSLСертификат;
	ИнформациюПоДоговору  = уатЗагрузкаПЦ.ЛИКАРД_ПолучитьИнформациюПоДоговору(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) 
		ИЛИ НЕ ЗначениеЗаполнено(ИнформациюПоДоговору.contractNumber) Тогда
		ТекстОшибки = НСтр("ru='По указанному адресу отсутствует возможность подключения к функциям API Лукойл ЛИКАРД.'") + 
			Символы.ПС + ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	Иначе
		СтрокаИнформацииПоДоговору = Нстр("ru = 'Клиент: %1 договор %2 от %3. Статус договора: %4.'");
		СтрокаИнформацииПоДоговору = СтрШаблон(СтрокаИнформацииПоДоговору, ИнформациюПоДоговору.clientShortName,
		ИнформациюПоДоговору.contractNumber, Формат(ИнформациюПоДоговору.openDate, "yyyy-MM-dd"),
		ИнформациюПоДоговору.status);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодключениеКРоснефтьДоступно(СтрокаИнформацииПоДоговору)
	
	ТабДанных   = Неопределено;
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("Ссылка,ВнешняяСистема,АдресСервиса,Логин,
		|Пароль,КлючАвторизации,СоздаватьЗаправкиГСМ,
		|IDКонтракта,НаименованиеДоговора,СохранятьОтчетВКаталог,КаталогФайлаДанных,ДатаПоследнегоОбмена,
		|Организация,Ответственный,РазбиватьНаОтделы,SSLСертификат,
		|ОсновнаяАЗС,ЛогированиеЗапросов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);
	
	Если НЕ ПарольИзменен Тогда
		ТекПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка);
	Иначе
		ТекПароль = Пароль;
	КонецЕсли;
	
	СтруктураПараметровУчетнойЗаписи.Пароль = ТекПароль;

	ИнформациюПоДоговору = уатЗагрузкаПЦ.Роснефть_ПолучитьИнформациюПоДоговору(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru='По указанному адресу отсутствует возможность подключения к функциям API Роснефть.'") + 
			Символы.ПС + ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодключениеКППРДоступно()
	
	ТекстОшибки = "";
	
	СтруктураПараметровУчетнойЗаписи = Новый Структура("Ссылка,ВнешняяСистема,АдресСервиса,Логин,
	|Пароль,КлючАвторизации,СоздаватьЗаправкиГСМ,
	|IDКонтракта,НаименованиеДоговора,СохранятьОтчетВКаталог,КаталогФайлаДанных,ДатаПоследнегоОбмена,
	|Организация,Ответственный,РазбиватьНаОтделы,SSLСертификат,
	|ОсновнаяАЗС,ЛогированиеЗапросов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровУчетнойЗаписи, Объект);

	ПодключениеДоступно = уатЗагрузкаПЦ.ППР_ПроверитьПодключение(СтруктураПараметровУчетнойЗаписи, ТекущаяДата(), ТекущаяДата(), ТекстОшибки);
	Если ПодключениеДоступно Тогда
		Возврат Истина;
	Иначе 
		ТекстОшибки = НСтр("ru='По указанному адресу отсутствует возможность подключения к функциям API ППР.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура SHA512_ИнициализироватьСкрипт()
	
	HTML = Нстр("ru = '<!doctype html> 
	|<html> 
	|<head> 
	|<meta charset=""utf-8"" /> 
	|<title>Title</title> 
	|</head><body scroll=""no"">
	|<meta name=""viewport"" content=""width=device-width, initial-scale=1"" /> 
	|Пароль:
	|<div class=''apare''><form action=''#'' method=''post''>
	|Enter a text:<br>
	|<input type=''text'' name=''strex'' id=''strex'' size=''23'' /> <input type=''button'' id=''cryptstr'' value=''Кодировать'' /><br>
	|Результат (SHA512):<br>
	|<input type=''text'' name=''strcrypt'' id=''strcrypt'' size=''55'' />
	|</form></div>
	|
	|<script>
	|function SHA512(str){function int64(msint_32,lsint_32){this.highOrder=msint_32;this.lowOrder=lsint_32;}
	|var H=[new int64(0x6a09e667,0xf3bcc908),new int64(0xbb67ae85,0x84caa73b),new int64(0x3c6ef372,0xfe94f82b),new int64(0xa54ff53a,0x5f1d36f1),new int64(0x510e527f,0xade682d1),new int64(0x9b05688c,0x2b3e6c1f),new int64(0x1f83d9ab,0xfb41bd6b),new int64(0x5be0cd19,0x137e2179)];var K=[new int64(0x428a2f98,0xd728ae22),new int64(0x71374491,0x23ef65cd),new int64(0xb5c0fbcf,0xec4d3b2f),new int64(0xe9b5dba5,0x8189dbbc),new int64(0x3956c25b,0xf348b538),new int64(0x59f111f1,0xb605d019),new int64(0x923f82a4,0xaf194f9b),new int64(0xab1c5ed5,0xda6d8118),new int64(0xd807aa98,0xa3030242),new int64(0x12835b01,0x45706fbe),new int64(0x243185be,0x4ee4b28c),new int64(0x550c7dc3,0xd5ffb4e2),new int64(0x72be5d74,0xf27b896f),new int64(0x80deb1fe,0x3b1696b1),new int64(0x9bdc06a7,0x25c71235),new int64(0xc19bf174,0xcf692694),new int64(0xe49b69c1,0x9ef14ad2),new int64(0xefbe4786,0x384f25e3),new int64(0x0fc19dc6,0x8b8cd5b5),new int64(0x240ca1cc,0x77ac9c65),new int64(0x2de92c6f,0x592b0275),new int64(0x4a7484aa,0x6ea6e483),new int64(0x5cb0a9dc,0xbd41fbd4),new int64(0x76f988da,0x831153b5),new int64(0x983e5152,0xee66dfab),new int64(0xa831c66d,0x2db43210),new int64(0xb00327c8,0x98fb213f),new int64(0xbf597fc7,0xbeef0ee4),new int64(0xc6e00bf3,0x3da88fc2),new int64(0xd5a79147,0x930aa725),new int64(0x06ca6351,0xe003826f),new int64(0x14292967,0x0a0e6e70),new int64(0x27b70a85,0x46d22ffc),new int64(0x2e1b2138,0x5c26c926),new int64(0x4d2c6dfc,0x5ac42aed),new int64(0x53380d13,0x9d95b3df),new int64(0x650a7354,0x8baf63de),new int64(0x766a0abb,0x3c77b2a8),new int64(0x81c2c92e,0x47edaee6),new int64(0x92722c85,0x1482353b),new int64(0xa2bfe8a1,0x4cf10364),new int64(0xa81a664b,0xbc423001),new int64(0xc24b8b70,0xd0f89791),new int64(0xc76c51a3,0x0654be30),new int64(0xd192e819,0xd6ef5218),new int64(0xd6990624,0x5565a910),new int64(0xf40e3585,0x5771202a),new int64(0x106aa070,0x32bbd1b8),new int64(0x19a4c116,0xb8d2d0c8),new int64(0x1e376c08,0x5141ab53),new int64(0x2748774c,0xdf8eeb99),new int64(0x34b0bcb5,0xe19b48a8),new int64(0x391c0cb3,0xc5c95a63),new int64(0x4ed8aa4a,0xe3418acb),new int64(0x5b9cca4f,0x7763e373),new int64(0x682e6ff3,0xd6b2b8a3),new int64(0x748f82ee,0x5defb2fc),new int64(0x78a5636f,0x43172f60),new int64(0x84c87814,0xa1f0ab72),new int64(0x8cc70208,0x1a6439ec),new int64(0x90befffa,0x23631e28),new int64(0xa4506ceb,0xde82bde9),new int64(0xbef9a3f7,0xb2c67915),new int64(0xc67178f2,0xe372532b),new int64(0xca273ece,0xea26619c),new int64(0xd186b8c7,0x21c0c207),new int64(0xeada7dd6,0xcde0eb1e),new int64(0xf57d4f7f,0xee6ed178),new int64(0x06f067aa,0x72176fba),new int64(0x0a637dc5,0xa2c898a6),new int64(0x113f9804,0xbef90dae),new int64(0x1b710b35,0x131c471b),new int64(0x28db77f5,0x23047d84),new int64(0x32caab7b,0x40c72493),new int64(0x3c9ebe0a,0x15c9bebc),new int64(0x431d67c4,0x9c100d4c),new int64(0x4cc5d4be,0xcb3e42b6),new int64(0x597f299c,0xfc657e2a),new int64(0x5fcb6fab,0x3ad6faec),new int64(0x6c44198c,0x4a475817)];var W=new Array(64);var a,b,c,d,e,f,g,h,i,j;var T1,T2;var charsize=8;function utf8_encode(str){return unescape(encodeURIComponent(str));}
	|function str2binb(str){var bin=[];var mask=(1<<charsize)-1;var len=str.length*charsize;for(var i=0;i<len;i+=charsize){bin[i>>5]|=(str.charCodeAt(i/charsize)&mask)<<(32-charsize-(i % 32));}
	|return bin;}
	|function binb2hex(binarray){var hex_tab=''0123456789abcdef'';var str='''';var length=binarray.length*4;var srcByte;for(var i=0;i<length;i+=1){srcByte=binarray[i>>2]>>((3-(i % 4))*8);str+=hex_tab.charAt((srcByte>>4)&0xF)+hex_tab.charAt(srcByte&0xF);}
	|return str;}
	|function safe_add_2(x,y){var lsw,msw,lowOrder,highOrder;lsw=(x.lowOrder&0xFFFF)+(y.lowOrder&0xFFFF);msw=(x.lowOrder>>>16)+(y.lowOrder>>>16)+(lsw>>>16);lowOrder=((msw&0xFFFF)<<16)|(lsw&0xFFFF);lsw=(x.highOrder&0xFFFF)+(y.highOrder&0xFFFF)+(msw>>>16);msw=(x.highOrder>>>16)+(y.highOrder>>>16)+(lsw>>>16);highOrder=((msw&0xFFFF)<<16)|(lsw&0xFFFF);return new int64(highOrder,lowOrder);}
	|function safe_add_4(a,b,c,d){var lsw,msw,lowOrder,highOrder;lsw=(a.lowOrder&0xFFFF)+(b.lowOrder&0xFFFF)+(c.lowOrder&0xFFFF)+(d.lowOrder&0xFFFF);msw=(a.lowOrder>>>16)+(b.lowOrder>>>16)+(c.lowOrder>>>16)+(d.lowOrder>>>16)+(lsw>>>16);lowOrder=((msw&0xFFFF)<<16)|(lsw&0xFFFF);lsw=(a.highOrder&0xFFFF)+(b.highOrder&0xFFFF)+(c.highOrder&0xFFFF)+(d.highOrder&0xFFFF)+(msw>>>16);msw=(a.highOrder>>>16)+(b.highOrder>>>16)+(c.highOrder>>>16)+(d.highOrder>>>16)+(lsw>>>16);highOrder=((msw&0xFFFF)<<16)|(lsw&0xFFFF);return new int64(highOrder,lowOrder);}
	|function safe_add_5(a,b,c,d,e){var lsw,msw,lowOrder,highOrder;lsw=(a.lowOrder&0xFFFF)+(b.lowOrder&0xFFFF)+(c.lowOrder&0xFFFF)+(d.lowOrder&0xFFFF)+(e.lowOrder&0xFFFF);msw=(a.lowOrder>>>16)+(b.lowOrder>>>16)+(c.lowOrder>>>16)+(d.lowOrder>>>16)+(e.lowOrder>>>16)+(lsw>>>16);lowOrder=((msw&0xFFFF)<<16)|(lsw&0xFFFF);lsw=(a.highOrder&0xFFFF)+(b.highOrder&0xFFFF)+(c.highOrder&0xFFFF)+(d.highOrder&0xFFFF)+(e.highOrder&0xFFFF)+(msw>>>16);msw=(a.highOrder>>>16)+(b.highOrder>>>16)+(c.highOrder>>>16)+(d.highOrder>>>16)+(e.highOrder>>>16)+(lsw>>>16);highOrder=((msw&0xFFFF)<<16)|(lsw&0xFFFF);return new int64(highOrder,lowOrder);}
	|function maj(x,y,z){return new int64((x.highOrder&y.highOrder)^(x.highOrder&z.highOrder)^(y.highOrder&z.highOrder),(x.lowOrder&y.lowOrder)^(x.lowOrder&z.lowOrder)^(y.lowOrder&z.lowOrder));}
	|function ch(x,y,z){return new int64((x.highOrder&y.highOrder)^(~x.highOrder&z.highOrder),(x.lowOrder&y.lowOrder)^(~x.lowOrder&z.lowOrder));}
	|function rotr(x,n){if(n<=32){return new int64((x.highOrder>>>n)|(x.lowOrder<<(32-n)),(x.lowOrder>>>n)|(x.highOrder<<(32-n)));}else{return new int64((x.lowOrder>>>n)|(x.highOrder<<(32-n)),(x.highOrder>>>n)|(x.lowOrder<<(32-n)));}}
	|function sigma0(x){var rotr28=rotr(x,28);var rotr34=rotr(x,34);var rotr39=rotr(x,39);return new int64(rotr28.highOrder^rotr34.highOrder^rotr39.highOrder,rotr28.lowOrder^rotr34.lowOrder^rotr39.lowOrder);}
	|function sigma1(x){var rotr14=rotr(x,14);var rotr18=rotr(x,18);var rotr41=rotr(x,41);return new int64(rotr14.highOrder^rotr18.highOrder^rotr41.highOrder,rotr14.lowOrder^rotr18.lowOrder^rotr41.lowOrder);}
	|function gamma0(x){var rotr1=rotr(x,1),rotr8=rotr(x,8),shr7=shr(x,7);return new int64(rotr1.highOrder^rotr8.highOrder^shr7.highOrder,rotr1.lowOrder^rotr8.lowOrder^shr7.lowOrder);}
	|function gamma1(x){var rotr19=rotr(x,19);var rotr61=rotr(x,61);var shr6=shr(x,6);return new int64(rotr19.highOrder^rotr61.highOrder^shr6.highOrder,rotr19.lowOrder^rotr61.lowOrder^shr6.lowOrder);}
	|function shr(x,n){if(n<=32){return new int64(x.highOrder>>>n,x.lowOrder>>>n|(x.highOrder<<(32-n)));}else{return new int64(0,x.highOrder<<(32-n));}}
	|str=utf8_encode(str);strlen=str.length*charsize;str=str2binb(str);str[strlen>>5]|=0x80<<(24-strlen % 32);str[(((strlen+128)>>10)<<5)+31]=strlen;for(var i=0;i<str.length;i+=32){a=H[0];b=H[1];c=H[2];d=H[3];e=H[4];f=H[5];g=H[6];h=H[7];for(var j=0;j<80;j++){if(j<16){W[j]=new int64(str[j*2+i],str[j*2+i+1]);}else{W[j]=safe_add_4(gamma1(W[j-2]),W[j-7],gamma0(W[j-15]),W[j-16]);}
	|T1=safe_add_5(h,sigma1(e),ch(e,f,g),K[j],W[j]);T2=safe_add_2(sigma0(a),maj(a,b,c));h=g;g=f;f=e;e=safe_add_2(d,T1);d=c;c=b;b=a;a=safe_add_2(T1,T2);}
	|H[0]=safe_add_2(a,H[0]);H[1]=safe_add_2(b,H[1]);H[2]=safe_add_2(c,H[2]);H[3]=safe_add_2(d,H[3]);H[4]=safe_add_2(e,H[4]);H[5]=safe_add_2(f,H[5]);H[6]=safe_add_2(g,H[6]);H[7]=safe_add_2(h,H[7]);}
	|var binarray=[];for(var i=0;i<H.length;i++){binarray.push(H[i].highOrder);binarray.push(H[i].lowOrder);}
	|return binb2hex(binarray);}
	|
	|document.getElementById(''cryptstr'').onclick=function(){var txt_string=document.getElementById(''strex'').value;document.getElementById(''strcrypt'').value=SHA512(txt_string);return false;}
	|
	|window.setTimeout(function(){if(typeof clickSelCnt ==''function'') clickSelCnt(''pre.code'')}, 4000);
	|</script> 
	|</body> 
	|</html>'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	Если Объект.ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть") 
		И СтрДлина(Пароль) <> 128 
		И СтрНайти(Пароль, "**") = 0 Тогда
		Попытка
			HTMLobj = Элементы.HTML.Документ.defaultView;
			Пароль = HTMLobj.SHA512(Пароль);
		Исключение
			ТекстОшибки = НСтр("ru='Пароль пользователя должен быть зашифрован функцией SHA-512 по стандарту SHS - FIPS 180-4.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	ПарольИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСПочтовымиСообщениямиКлиент.ПолеПароляНачалоВыбора(Элемент, Пароль, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПарольИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Элементы.Пароль.КнопкаВыбора = Истина;
КонецПроцедуры

//&НаКлиенте
//Функция СтрокаДляURL(Строка)
//	СоответвиеСимволов = Новый Соответствие();
//	СоответвиеСимволов.Вставить("&", "%26");
//	СоответвиеСимволов.Вставить("$", "%24");
//	СоответвиеСимволов.Вставить("+", "%2b");
//	СоответвиеСимволов.Вставить(",", "%2c");
//	СоответвиеСимволов.Вставить("/", "%2f");
//	СоответвиеСимволов.Вставить(":", "%3a");
//	СоответвиеСимволов.Вставить(";", "%3b");
//	СоответвиеСимволов.Вставить("=", "%3d");
//	СоответвиеСимволов.Вставить("?", "%25");
//	СоответвиеСимволов.Вставить("@" ,"%40");
//	СоответвиеСимволов.Вставить("#", "%23");
//	
//	СоответвиеСимволов.Вставить("<", "%3c");
//	СоответвиеСимволов.Вставить(">", "%3e");
//	СоответвиеСимволов.Вставить("[", "%5b");
//	СоответвиеСимволов.Вставить("]", "%5d");
//	СоответвиеСимволов.Вставить("{", "%7b");
//	СоответвиеСимволов.Вставить("}", "%7c");
//	СоответвиеСимволов.Вставить("\", "%5c");
//	СоответвиеСимволов.Вставить("^", "%5e");
//	СоответвиеСимволов.Вставить("%", "%25");
//	
//	ПреобразованнаяСтрока = "";
//	Для Индекс = 1 По СтрДлина(Строка) Цикл
//		ТекСимвол = Сред(Строка, Индекс, 1);
//		
//		СимволЗамены = СоответвиеСимволов.Получить(ТекСимвол);
//		Если ЗначениеЗаполнено(СимволЗамены) Тогда
//			ПреобразованнаяСтрока = ПреобразованнаяСтрока + СимволЗамены;
//		Иначе
//			ПреобразованнаяСтрока = ПреобразованнаяСтрока + ТекСимвол;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат ПреобразованнаяСтрока;
//КонецФункции

#КонецОбласти


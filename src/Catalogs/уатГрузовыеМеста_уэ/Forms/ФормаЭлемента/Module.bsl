
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Заголовок = ?(Объект.Контейнер,
		НСтр("ru='Контейнер (создание)'"), НСтр("ru='Грузовое место (создание)'"));
		
		КонтейнерДоступность               = Истина;
		УникальноеГрузовоеМестоДоступность = Истина;
	Иначе
		Заголовок = Объект.Наименование + " " + ?(Объект.Контейнер,
		НСтр("ru='(Контейнер)'"), НСтр("ru='(Грузовое место)'"));
		
		КонтейнерДоступность               = Ложь;
		УникальноеГрузовоеМестоДоступность = Ложь;
	КонецЕсли;

	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Товары");
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	// создание грузового места из заказа грузоотправителя
	Если Параметры.Свойство("СозданиеГрузовогоМестаИзЗаказа") Тогда
		СозданиеГрузовогоМестаИзЗаказа = Истина;
		УдалитьВЗаказеСтрокуПосле = Параметры.УдалитьСтрокуПосле;
		
		Объект.ВидУпаковки = Параметры.ВидУпаковки;
		Объект.ВесБрутто = Параметры.ВесБрутто;
		Объект.КоличествоМест = Параметры.КоличествоМест;
		Объект.Объем = Параметры.Объем;
		Объект.УчитыватьНДС = Параметры.УчитыватьНДС;
		Объект.СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
		Объект.Стоимость = Параметры.Стоимость;
		Объект.Валюта = Параметры.Валюта;
		Объект.ОписаниеГруза = Параметры.ОписаниеГруза;
		Объект.Длина = Параметры.Длина;
		Объект.Ширина = Параметры.Ширина;
		Объект.Высота = Параметры.Высота;
		
		Для Каждого ТекСтрокаТовар Из Параметры.ТоварныйСостав Цикл
			НоваяСтрока = Объект.ТоварныйСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовар);
		КонецЦикла;
		
		Если НЕ УдалитьВЗаказеСтрокуПосле Тогда
			// Грузовое место создано без данных шапки, расчитаем по таблице
			ВесБрутто = 0;  
			Объем = 0;  
			КоличествоМест = 0;
			
			Для Каждого ТекСоставГрузМеста Из Объект.ТоварныйСостав Цикл
				
				ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСоставГрузМеста.Номенклатура,
					"ЕдиницаХраненияОстатков");
				
				ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСоставГрузМеста.Номенклатура, ЕдиницаИзмерения, ТекСоставГрузМеста.Количество);
				ВесБрутто      = ВесБрутто + ВесОбъем.Вес;
				Объем          = Объем + ВесОбъем.Объем;
				КоличествоМест = КоличествоМест + ВесОбъем.КоличествоМест;
			КонецЦикла;
			
			Объект.ВесБрутто = ВесБрутто;
			Объект.Объем     = Объем;
			
			ЦелаяЧасть = Цел(КоличествоМест);
			ДробнаяЧасть = КоличествоМест - ЦелаяЧасть;
			КоличествоМест = ?(ДробнаяЧасть=0,ЦелаяЧасть,ЦелаяЧасть +1);
			
			Объект.КоличествоМест = КоличествоМест;
			Объект.Стоимость = Объект.ТоварныйСостав.Итог("Сумма");
			Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
				Объект.Стоимость = Объект.Стоимость + Объект.ТоварныйСостав.Итог("СуммаНДС");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Объект.Валюта.Пустая() Тогда
		Объект.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ВесТары.Заголовок = НСтр("en='Tare weight';ru='Вес тары'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес груза'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.Объем.Заголовок = НСтр("en='Volume';ru='Объем груза'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	ОбновитьВсегоВТЧТоварыСервер();
	ОбновитьВсегоВТЧГрузыСервер();
	
	Элементы.ТоварыКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимость();
	ОбновитьВесоОбъемныеХарактеристикиТоварногоСостава();
	ОбновитьВесоОбъемныеХарактеристикиГрузовогоСостава();
	ОбъемПриИзменении(Неопределено);
	ВесБруттоПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьВсегоВТЧТоварыСервер();
	ОбновитьВсегоВТЧГрузыСервер();
	ЗаполнитьСтатус();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

	ОбновитьВсегоВТЧТоварыСервер();
	ОбновитьВсегоВТЧГрузыСервер();
	
	Если ЗначениеЗаполнено(ДатаУстановкиСтатуса)
		И Объект.УникальноеГрузовоеМесто Тогда
		ДокУстановки = Документы.уатУстановкаСтатусаГруза_уэ.СоздатьДокумент();
		ДокУстановки.Заполнить(Объект.Ссылка);
		Для Каждого ТекСтрока Из ДокУстановки.Грузы Цикл 
			ТекСтрока.НовыйСтатус = Статус;
		КонецЦикла;
		ДокУстановки.ДатаВремяУстановкиСтатуса = ДатаУстановкиСтатуса;
		ДокУстановки.Ответственный             = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		Попытка
			ДокУстановки.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗаполнитьСтатус();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если СозданиеГрузовогоМестаИзЗаказа Тогда
		Оповестить("СозданоГрузовоеМесто", Новый Структура("Ссылка, УдалитьСтрокуПосле, ТоварныйСостав",
			Объект.Ссылка, УдалитьВЗаказеСтрокуПосле, Объект.ТоварныйСостав));
	КонецЕсли;
	Оповестить("ГрузовоеМесто_ПослеЗаписи");
	
	ОбновитьВесоОбъемныеХарактеристикиТоварногоСостава();
	ОбновитьВесоОбъемныеХарактеристикиГрузовогоСостава();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъемНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РассчитатьОбъем();
	ОбъемПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесТарыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьВесТарыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	
	ПараметрыФормыВыбора = Новый Структура("ПоказатьВводДаты");
	ФормаВыбораСтатуса = ПолучитьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
	ФормаВыбораСтатуса.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СтатусНажатиеЗавершение", ЭтотОбъект, Объект.Ссылка);
	ФормаВыбораСтатуса.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ЭлементОтбора = ФормаВыбораСтатуса.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДействуетНаЗаказыГрузоотправителей");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбораСтатуса.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесБруттоПриИзменении(Элемент)
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	КоэффициентГрузоподъемности = ВесоОбъемныеХарактеристики.КоэффициентГрузоподъемности;

	Элементы.ВесБрутто.ЦветТекста = уатОбщегоНазначенияКлиент.ПолучитьЦветЗаполнения(Объект.ВесБрутто, Объект.Грузоподъемность * КоэффициентГрузоподъемности);
КонецПроцедуры

&НаКлиенте
Процедура ОбъемПриИзменении(Элемент)
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	КоэффициентОбъемаКузова     = ВесоОбъемныеХарактеристики.КоэффициентОбъемаКузова;

	Элементы.Объем.ЦветТекста = уатОбщегоНазначенияКлиент.ПолучитьЦветЗаполнения(Объект.Объем, Объект.Вместимость * КоэффициентОбъемаКузова);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоподъемностьПриИзменении(Элемент)
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	КоэффициентГрузоподъемности = ВесоОбъемныеХарактеристики.КоэффициентГрузоподъемности;

	Элементы.ВесБрутто.ЦветТекста = уатОбщегоНазначенияКлиент.ПолучитьЦветЗаполнения(Объект.ВесБрутто, Объект.Грузоподъемность * КоэффициентГрузоподъемности);
КонецПроцедуры

&НаКлиенте
Процедура ВместимостьПриИзменении(Элемент)
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	КоэффициентОбъемаКузова     = ВесоОбъемныеХарактеристики.КоэффициентОбъемаКузова;

	Элементы.Объем.ЦветТекста = уатОбщегоНазначенияКлиент.ПолучитьЦветЗаполнения(Объект.Объем, Объект.Вместимость * КоэффициентОбъемаКузова);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварныйСостав

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтрока = Элементы.Товары.ТекущиеДанные;
		ТекСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВесоОбъемныеХарактеристикиТоварногоСостава(Элемент.ТекущиеДанные);
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
	СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьВесОбъем(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокГрузМестЗаказаСервер(ТекСтрока.ЗаказГрузоотправителя, Истина);
	Иначе
		уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Товары.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0
		ИЛИ НЕ уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Коэффициент", СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекКоэффициент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент");
	Если ТекКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
									ВыбранноеЗначение, "Коэффициент") / ТекКоэффициент;
	КонецЕсли; 		
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	ТоварыСуммаПриИзменении(Неопределено);
	РассчитатьВесОбъем(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьВесОбъем(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказГрузоотправителяПриИзменении(Элемент)
	ТоварыНоменклатураПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузовойСостав

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтрока = Элементы.Грузы.ТекущиеДанные;
		ТекСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.уатВидыУпаковки_уэ.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВесоОбъемныеХарактеристикиГрузовогоСостава(Элемент.ТекущиеДанные);
	ОбновитьВсегоВТЧГрузы();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПослеУдаления(Элемент)
	ОбновитьВсегоВТЧГрузы();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГрузовоеМесто) Тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(СтрокаТабличнойЧасти.ГрузовоеМесто,
		"ВидУпаковки, ТипКонтейнера, Контейнер");
		
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	РассчитатьВесОбъем(СтрокаТабличнойЧасти, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокГрузМестЗаказаСервер(ТекСтрока.ЗаказГрузоотправителя, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьВесОбъем(СтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Грузы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Грузы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЗаказГрузоотправителяПриИзменении(Элемент)
	ГрузыГрузовоеМестоПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	РазрешитьРедактированиеРеквизитов = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитов",ЭтотОбъект);
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект,РазрешитьРедактированиеРеквизитов);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьВсегоВТЧТовары();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТоварномуСоставу(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РассчитатьПоТоварномуСоставуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("en='Recalculate cargo place parameters by commodity composition?';ru='Пересчитать параметры грузового места по товарному составу?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатГрузовыеМеста_уэ.ТоварныйСостав";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download goods list from a file';ru='Загрузка списка товаров из файла'");
	// Описание колонок для макета загрузки комплектации
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрузыИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатГрузовыеМеста_уэ.ГрузовойСостав";
	ПараметрыЗагрузки.Заголовок = НСтр("ru='Загрузка списка грузов из файла'");
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаГрузовойСостав");
	
	// Описание колонок для макета загрузки комплектации
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьГрузыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнениеПоОстаткам(Команда)
	Оповещение = Новый ОписаниеОповещения("ПерезаполнениеПоОстаткамЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Перезаполненить грузовой состав по остаткам в контейнере?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиГрузовВКонтейнере(Команда)
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетОстаткиГрузовВКонтейнере(Объект.Ссылка);
	ОткрытьФорму("Отчет.уатОстаткиГрузовВКонтейнерах_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Контейнер(Команда)
	Если НЕ КонтейнерДоступность Тогда
		РазрешитьРедактированиеРеквизитов = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитов",ЭтотОбъект, Ложь);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект,РазрешитьРедактированиеРеквизитов);
	Иначе
		Объект.Контейнер = НЕ Объект.Контейнер;
		
		Объект.ВидУпаковки   = Неопределено;
		Объект.ТипКонтейнера = Неопределено;
		Объект.ГрузовойСостав.Очистить();
		
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УникальноеГрузовоеМесто(Команда)
	Если НЕ УникальноеГрузовоеМестоДоступность Тогда
		РазрешитьРедактированиеРеквизитов = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитов",ЭтотОбъект, Истина);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект,РазрешитьРедактированиеРеквизитов);
	Иначе
		Объект.УникальноеГрузовоеМесто = НЕ Объект.УникальноеГрузовоеМесто;
		
		Если Объект.УникальноеГрузовоеМесто Тогда
			ЗаполнитьСтатус();
			
		Иначе
			Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
				ТекСтрока.ЗаказГрузоотправителя = Неопределено;
			КонецЦикла;
			Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
				ТекСтрока.ЗаказГрузоотправителя = Неопределено;
			КонецЦикла;
		КонецЕсли;
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНоменклатурыТоварногоСостава()
	
	Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) тогда
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("Номенклатура", ТекСтрока.Номенклатура);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			ТекСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) тогда
			ТекСтрока.Количество = 1;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
		РассчитатьВесОбъем(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНоменклатурыГрузовогоСостава()
	
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) 
			И ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) тогда
			РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекСтрока.ГрузовоеМесто, "ВидУпаковки, ТипКонтейнера, Контейнер");
			Если РеквизитыГрузовогоМеста.Контейнер Тогда
				ТекСтрока.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
			Иначе
				ТекСтрока.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) тогда
			ТекСтрока.Количество = 1;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
		РассчитатьВесОбъем(ТекСтрока, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура РассчитатьПоТоварномуСоставуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоТоварномуСоставуНаСервере();
	ОбъемПриИзменении(Неопределено);
	ВесБруттоПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнениеПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнениеПоОстаткамСервер();
	
	Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
		РассчитатьВесОбъем(ТекСтрока);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	КонецЦикла;
	ОбновитьВсегоВТЧТовары();
	
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		РассчитатьВесОбъем(ТекСтрока, Истина);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	КонецЦикла;
	ОбновитьВсегоВТЧГрузы();
	РассчитатьПоТоварномуСоставуНаСервере();
	ОбъемПриИзменении(Неопределено);
	ВесБруттоПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Процедура РассчитатьПоТоварномуСоставуНаСервере()
	
	Справочники.уатГрузовыеМеста_уэ.РассчитатьХарактеристикиПоТоварномуСоставу(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если Элементы.ТоварыСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ТоварыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.ТоварыСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ТоварыСуммаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.ТоварыВсего.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ТоварыВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	
	Если Элементы.ГрузыСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ГрузыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.ГрузыСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ГрузыСуммаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.ГрузыВсего.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ГрузыВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;

	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, СуммаВключаетНДС, УчитыватьНДС",
		Объект.Валюта, 
		ПолучитьКурсКратностьВалюты(Объект.Валюта).Курс,
		Объект.СуммаВключаетНДС, 
		Объект.УчитыватьНДС
	);
	
	Элементы.ЦеныИВалюта.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Элементы.УникальныйНомер.Видимость                    = Объект.УникальноеГрузовоеМесто;
	Элементы.Контрагент.Видимость                         = Объект.УникальноеГрузовоеМесто;
	Элементы.Статус.Видимость                             = Объект.УникальноеГрузовоеМесто;
	Элементы.ФормированиеШКНаКаждыйЭкземпляр.Видимость    = НЕ Объект.УникальноеГрузовоеМесто;
	Элементы.ТоварыЗаказГрузоотправителя.Видимость        = Объект.УникальноеГрузовоеМесто;
	Элементы.ГрузыЗаказГрузоотправителя.Видимость         = Объект.УникальноеГрузовоеМесто;

	Элементы.ГруппаУпаковка.Видимость = НЕ Объект.Контейнер;
	Элементы.ТипКонтейнера.Видимость  = Объект.Контейнер;
	
	Элементы.ВесТары.Заголовок = ?(Объект.Контейнер,
		СтрЗаменить(Элементы.ВесТары.Заголовок, НСтр("en='Tare weight';ru='Вес тары'"),
		НСтр("ru='Вес контейнера'")),
		СтрЗаменить(Элементы.ВесТары.Заголовок, НСтр("ru='Вес контейнера'"),
		НСтр("en='Tare weight';ru='Вес тары'")));
	Элементы.УникальныйНомер.Заголовок = ?(Объект.Контейнер,
		НСтр("ru='Номер контейнера'"),
		НСтр("ru='Уникальный номер'"));
	Элементы.УникальноеГрузовоеМесто.Заголовок = ?(Объект.Контейнер,
		НСтр("ru='Уникальный контейнер'"),
		НСтр("ru='Уникальное грузовое место'"));
	Элементы.ГруппаВесоОбъемныеХарактеристики.Заголовок = ?(Объект.Контейнер,
		НСтр("ru='Весо-объемные характеристики контейнера'"),
		НСтр("ru='Весо-объемные характеристики грузового места'"));
	
	Элементы.ФормаОтчетОстаткиГрузовВКонтейнере.Видимость = Объект.Контейнер И Объект.УникальноеГрузовоеМесто;
	
	Элементы.ГруппаГрузовойСостав.Видимость     = Объект.Контейнер;
	Элементы.ПерезаполнениеПоОстаткам.Видимость = Объект.Контейнер И Объект.УникальноеГрузовоеМесто;
	
	Элементы.Контейнер.Пометка                  = Объект.Контейнер;
	Элементы.УникальноеГрузовоеМесто.Пометка    = Объект.УникальноеГрузовоеМесто;

	Элементы.Контейнер.Картинка                  = ?(Объект.Контейнер,
		БиблиотекаКартинок.уатФлагВключен, БиблиотекаКартинок.уатФлагВыключен);
	Элементы.УникальноеГрузовоеМесто.Картинка    = ?(Объект.УникальноеГрузовоеМесто, 
		БиблиотекаКартинок.уатФлагВключен, БиблиотекаКартинок.уатФлагВыключен);
	
	Элементы.Объем.КнопкаВыбора   = НЕ Объект.Контейнер;
	Элементы.ВесТары.КнопкаВыбора = НЕ Объект.Контейнер;
	
	Элементы.ВесТары.Ширина = ?(Объект.Контейнер, 13, 11);
	Элементы.Объем.Ширина   = ?(Объект.Контейнер, 13, 11);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсКратностьВалюты(Валюта)
	ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", Валюта));
	Если ВалютаРасчетовКурсКратность.Курс = NULL ИЛИ НЕ ЗначениеЗаполнено(ВалютаРасчетовКурсКратность.Курс) Тогда
		ВалютаРасчетовКурсКратность.Курс = 1;
	КонецЕсли;
	Если ВалютаРасчетовКурсКратность.Кратность = NULL ИЛИ НЕ ЗначениеЗаполнено(ВалютаРасчетовКурсКратность.Кратность) Тогда
		ВалютаРасчетовКурсКратность.Кратность = 1;
	КонецЕсли;
		
	Возврат ВалютаРасчетовКурсКратность;
КонецФункции

&НаКлиенте
Процедура РассчитатьВесОбъем(ТекСтрока, ГрузовойСостав = Ложь)
	
	Если ГрузовойСостав Тогда
		Номенклатура = ТекСтрока.ГрузовоеМесто;
	Иначе
		Номенклатура = ТекСтрока.Номенклатура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура)
		ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
		ВесОбъем = ПолучитьГрузовойСоставПоЗаказу(ТекСтрока.ЗаказГрузоотправителя, Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
		ТекСтрока.Вес  = ВесОбъем.ВесБрутто;
		ЗаполнитьЗначенияСвойств(ТекСтрока, ВесОбъем);
	Иначе
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
			ТекСтрока.Вес = ВесОбъем.Вес;
		Иначе
			ВесОбъем = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(
			Номенклатура, "Длина, Ширина, Высота, ВесБрутто, Объем, КоличествоМест, Стоимость");
			ТекСтрока.Вес  = ВесОбъем.ВесБрутто;
			ТекСтрока.Цена = ВесОбъем.Стоимость;
		КонецЕсли;
		
		ТекСтрока.Объем          = ВесОбъем.Объем;
		ТекСтрока.КоличествоМест = ВесОбъем.КоличествоМест;
		Если ВесОбъем.Свойство("Длина") Тогда
			ТекСтрока.Длина          = ВесОбъем.Длина;
			ТекСтрока.Ширина         = ВесОбъем.Ширина;
			ТекСтрока.Высота         = ВесОбъем.Высота;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГрузовойСоставПоЗаказу(ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, Количество)
	СтруктураРезультат = Новый Структура("ВесБрутто,Объем,КоличествоМест,Цена,Длина,Ширина,Высота");
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		СтрокаГруза = ЗаказГрузоотправителя.ГрузовойСостав.НайтиСтроки(Новый Структура("ГрузовоеМесто, ВидУпаковки",
			Номенклатура, ЕдиницаИзмерения));
		Если СтрокаГруза.Количество() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРезультат, СтрокаГруза[0]);
			
			СтруктураРезультат.ВесБрутто      = СтрокаГруза[0].ВесБрутто * (Количество / СтрокаГруза[0].КоличествоМест);
			СтруктураРезультат.Объем          = СтрокаГруза[0].Объем * (Количество / СтрокаГруза[0].КоличествоМест);
			
			Если ТипЗнч(СтрокаГруза[0].ВидУпаковки) = Тип("СправочникСсылка.уатВидыУпаковки_уэ") Тогда
				СтруктураРезультат.КоличествоМест = ?(СтрокаГруза[0].ВидУпаковки.Коэффициент = 0, 0, Количество / СтрокаГруза[0].ВидУпаковки.Коэффициент);
			Иначе
				СтруктураРезультат.КоличествоМест = 1;
			КонецЕсли;
			СтруктураРезультат.Цена           = СтрокаГруза[0].Стоимость * (Количество / СтрокаГруза[0].КоличествоМест);

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокиТовара = ЗаказГрузоотправителя.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения",
			Номенклатура, ЕдиницаИзмерения));
		Если СтрокиТовара.Количество() Тогда 
			ЗаполнитьЗначенияСвойств(СтруктураРезультат, СтрокиТовара[0]);
				
			СтруктураРезультат.ВесБрутто      = СтрокиТовара[0].ВесБрутто * (Количество / СтрокиТовара[0].Количество);
			СтруктураРезультат.Объем          = СтрокиТовара[0].Объем * (Количество / СтрокиТовара[0].Количество);
			СтруктураРезультат.КоличествоМест = СтрокиТовара[0].КоличествоМест * (Количество / СтрокиТовара[0].Количество);
			
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(Номенклатура, ЕдиницаИзмерения, Количество);
			Если ВесОбъем.Свойство("Длина") Тогда
				СтруктураРезультат.Длина          = ВесОбъем.Длина;
				СтруктураРезультат.Ширина         = ВесОбъем.Ширина;
				СтруктураРезультат.Высота         = ВесОбъем.Высота;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.Валюта);
	СтруктураПараметров.Вставить("ДоступностьВалютыДокумента", Истина);
	//СтруктураПараметров.Вставить("ИзменениеВалюты",		  Истина);
	//СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	//СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	//СтруктураПараметров.Вставить("Договор",				  Новый Структура("ВалютаВзаиморасчетов", Объект.Валюта));
	СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(Объект.Валюта, Объект.Валюта, ТекущаяДата());
	СтруктураПараметров.Вставить("Курс",				  СтруктураКурсы.Курс);
	СтруктураПараметров.Вставить("Кратность",			  СтруктураКурсы.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента",		  ТекущаяДата());
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3

	// 2. Открываем форму "Цены и Валюта".
	//ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
	//	Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
	//	Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
	//	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ФормаЦеныВалюта = ПолучитьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров);
	ФормаЦеныВалюта.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение));
	ФормаЦеныВалюта.Открыть();
	
	ФормаЦеныВалюта.Элементы.Валюта.Заголовок = НСтр("en='Payment currency';ru='Валюта расчетов'");
	Если ПравоРедактированиеДокумента() Тогда
		ФормаЦеныВалюта.Элементы.ВалютаДокумента.Видимость = Истина;
		ФормаЦеныВалюта.Элементы.Валюта.ТолькоПросмотр = Ложь;
		ФормаЦеныВалюта.Элементы.ВалютаКурсКратностьРасчетов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	СтруктураЦеныИВалюта = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		
		// Для объедининенного решения с БП 3
		уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта, Объект.Валюта, ВалютаРасчетовПередИзменением, Объект.УчитыватьНДС);
		// Для объедининенного решения с БП 3
		
		Объект.Валюта		   = СтруктураЦеныИВалюта.ВалютаДокумента;
		//Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.КурсРасчетов;
		//Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением);
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, Курс, СуммаВключаетНДС, УчитыватьНДС",
									Объект.Валюта, ПолучитьКурсКратностьВалюты(Объект.Валюта),
									Объект.СуммаВключаетНДС, Объект.УчитыватьНДС);
	Элементы.ЦеныИВалюта.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьВсегоВТЧТовары();
    УстановитьВидимость();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ПредыдущаяВалюта)
	
	СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, Объект.Валюта, ТекущаяДата());
	   
	Для Каждого СтрокаТабЧасти Из Объект.ТоварныйСостав Цикл
		
		// Цена.
		СтрокаТабЧасти.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТабЧасти.Цена, 
			ПредыдущаяВалюта,
			Объект.Валюта,
			СтруктураКурсы.КурсНач, 
			СтруктураКурсы.Курс, 
			СтруктураКурсы.КратностьНач, 
			СтруктураКурсы.Кратность);
																	
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
		Если Объект.СуммаВключаетНДС Тогда
			СтрокаТабЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабЧасти.Сумма * СтавкаНДС / 100);
		Иначе
			СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	ТекстНадписи = СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента));
	Возврат ТекстНадписи;
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.ТоварныйСостав Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ТоварыСтавкаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНДС.Видимость  = Истина;
		Элементы.ТоварыВсего.Видимость     = Истина;
		
		Элементы.ГрузыСтавкаНДС.Видимость  = Истина;
		Элементы.ГрузыСуммаНДС.Видимость   = Истина;
		Элементы.ГрузыВсего.Видимость      = Истина;

		Для каждого СтрокаТабличнойЧасти Из Объект.ТоварныйСостав Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ГрузовойСостав Цикл
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;

	Иначе
		Элементы.ТоварыСтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНДС.Видимость  = Ложь;
		Элементы.ТоварыВсего.Видимость     = Ложь;
		
		Элементы.ГрузыСтавкаНДС.Видимость  = Ложь;
		Элементы.ГрузыСуммаНДС.Видимость   = Ложь;
		Элементы.ГрузыВсего.Видимость      = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура ОбновитьВсегоВТЧТовары()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТоварныйСостав Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧГрузы()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ГрузовойСостав Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧТоварыСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТоварныйСостав Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧГрузыСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ГрузовойСостав Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВесоОбъемныеХарактеристикиТоварногоСостава(ТекСтрока = Неопределено)
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого врТекСтрока ИЗ Объект.ТоварныйСостав Цикл
			ОбновитьВесоОбъемныеХарактеристикиТоварногоСостава(врТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	РассчитатьВесОбъем(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВесоОбъемныеХарактеристикиГрузовогоСостава(ТекСтрока = Неопределено)
	
	Если ТекСтрока = Неопределено Тогда
		Для Каждого врТекСтрока ИЗ Объект.ГрузовойСостав Цикл
			ОбновитьВесоОбъемныеХарактеристикиГрузовогоСостава(врТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	РассчитатьВесОбъем(ТекСтрока, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Справочники.уатГрузовыеМеста_уэ);
	Возврат Рез;
КонецФункции

&НаСервере
Процедура РассчитатьОбъем()
	
	ОбъемМетрКуб = Объект.Длина * Объект.Ширина * Объект.Высота;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		Объект.Объем = ОбъемМетрКуб * 1000;
	Иначе 
		Объект.Объем = ОбъемМетрКуб;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	ЗаполнитьРеквизитыНоменклатурыТоварногоСостава();
	ОбновитьВсегоВТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрузыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьГрузыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	ЗаполнитьРеквизитыНоменклатурыГрузовогоСостава();
	ОбновитьВсегоВТЧГрузы();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.ТоварныйСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТовары.СтавкаНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрузыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ГрузовоеМесто) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.ГрузовойСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТовары.СтавкаНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесТарыСервер()
	
	ВесТарыНоменклатуры = 0;
	
	Для Каждого ТекСоставГрузМеста Из Объект.ТоварныйСостав Цикл
		Если ЗначениеЗаполнено(ТекСоставГрузМеста.ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = ТекСоставГрузМеста.ЕдиницаИзмерения;
			
		Иначе
			ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				ТекСоставГрузМеста.Номенклатура,
				"ЕдиницаХраненияОстатков"
			);
			
		КонецЕсли;
		
		Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда 
			КоэфЕИ = ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		Если КоэфЕИ = 0 Тогда 
			КоэфЕИ = 1;
		КонецЕсли;
		
		РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(ТекСоставГрузМеста.Номенклатура, ТекСоставГрузМеста.Количество * КоэфЕИ);
		ВесТарыНоменклатуры = ВесТарыНоменклатуры + уатОбщегоНазначения_уэ.ПолучитьВесТарыПоУпаковкам(РаспределениеПоУпаковкам);
	КонецЦикла;
	
	ВесТарыГМ = Объект.ВидУпаковки.ВесТары * Объект.КоличествоМест;
	
	Объект.ВесТары = ВесТарыГМ + ВесТарыНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка КАК Ссылка,
	|	уатСтатусы_уэ.Наименование КАК Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию КАК ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию КАК ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей
	|	И уатСтатусы_уэ.Ссылка = &Статус";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЦвета.Следующий() Тогда 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено
			И ЦветФона = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если Не ЦветТекста = Неопределено Тогда 
			Элементы.Статус.ЦветТекста = ЦветТекста;
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			Элементы.Статус.ЦветФона = ЦветФона;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатус()
	
	Если Объект.Ссылка.Пустая() Тогда
		ДатаУстановкиСтатуса = ТекущаяДатаСеанса();
		
		Статус = Справочники.уатСтатусы_уэ.Новый;
		УстановитьУсловноеОформлениеПолейСтатусов();
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.УникальноеГрузовоеМесто Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ГрузовоеМесто", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыГрузов_уэСрезПоследних.Период КАК Период,
	|	уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатСтатусыГрузов_уэСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(&ТекущаяДата, ГрузовоеМесто = &ГрузовоеМесто) КАК уатСтатусыГрузов_уэСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Статус = Выборка.Статус;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = Справочники.уатСтатусы_уэ.Новый;
	КонецЕсли;
	
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Статус               = Результат.Статус;
		ДатаУстановкиСтатуса = Результат.ДатаУстановки;
		
		УстановитьУсловноеОформлениеПолейСтатусов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипКонтейнераПриИзменении(Элемент)
	ТипКонтейнераПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ТипКонтейнераПриИзмененииСервер()
	ЗаполнитьЗначенияСвойств(Объект, Объект.ТипКонтейнера,, "Наименование,Код,Родитель");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетОстаткиГрузовВКонтейнере(Ссылка)
	Возврат Справочники.уатГрузовыеМеста_уэ.ПолучитьПараметрыОткрытияОтчетОстаткиГрузовВКонтейнере(Ссылка);
КонецФункции

&НаСервере
Процедура ПерезаполнениеПоОстаткамСервер()
	Объект.ГрузовойСостав.Очистить();
	Объект.ТоварныйСостав.Очистить();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контейнер",   Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатОстаткиГрузовВКонтейнерах_уэОстатки.Контейнер КАК Контейнер,
	               |	уатОстаткиГрузовВКонтейнерах_уэОстатки.ГрузовоеМесто КАК ГрузовоеМесто,
	               |	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	уатОстаткиГрузовВКонтейнерах_уэОстатки.КоличествоОстаток КАК Количество,
	               |	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	               |ИЗ
	               |	РегистрНакопления.уатОстаткиГрузовВКонтейнерах_уэ.Остатки(&ТекущаяДата, Контейнер = &Контейнер) КАК уатОстаткиГрузовВКонтейнерах_уэОстатки
	               |ГДЕ
	               |	уатОстаткиГрузовВКонтейнерах_уэОстатки.КоличествоОстаток > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") Тогда
			НоваяСтрока = Объект.ТоварныйСостав.Добавить();
			НоваяСтрока.ЗаказГрузоотправителя = Выборка.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура          = Выборка.ГрузовоеМесто;
			НоваяСтрока.Количество            = Выборка.Количество;
			НоваяСтрока.ЕдиницаИзмерения      = Выборка.ЕдиницаИзмерения;
		Иначе
			НоваяСтрока = Объект.ГрузовойСостав.Добавить();
			НоваяСтрока.ЗаказГрузоотправителя = Выборка.ЗаказГрузоотправителя;
			НоваяСтрока.ГрузовоеМесто         = Выборка.ГрузовоеМесто;
			НоваяСтрока.Количество            = Выборка.Количество;
			НоваяСтрока.ЕдиницаИзмерения      = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокГрузМестЗаказаСервер(ТекЗаказ, ТоварныйСостав = Истина)
	
	СписРез = Новый СписокЗначений();
	Если НЕ ТоварныйСостав Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.ГрузовойСостав Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.ГрузовоеМесто);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Для Каждого ТекСтрока Из ТекЗаказ.Товары Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписРез;
	
КонецФункции


&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитов(Результат, УникальноеГрузовоеМесто) Экспорт
	
	Если Результат Тогда
		КонтейнерДоступность               = Истина;
		УникальноеГрузовоеМестоДоступность = Истина;
		
		Если УникальноеГрузовоеМесто <> Неопределено Тогда
			Если УникальноеГрузовоеМесто Тогда
				УникальноеГрузовоеМесто(Неопределено);
			Иначе
				Контейнер(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПланированиеТО    = ПредопределенноеЗначение("Перечисление.уатПериодичностьТО.ПоВыработке");
	ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
	СервисныйИнтервал = 20000;
	
	Если Параметры.Свойство("МодельТС") Тогда
		МодельТС = Параметры.МодельТС;
		Заголовок = Нстр("ru = 'Сервисная книжка'") + " " + МодельТС.Наименование;

		Если Параметры.Свойство("Создание") Тогда
			Элементы.Переместить(Элементы.СписокТО,Элементы.ГруппаНастройки,);

			Элементы.Переместить(Элементы.Работы,Элементы.ГруппаРаботыСвернута,);
			Элементы.Переместить(Элементы.Запчасти,Элементы.ГруппаЗапчастиСвернута,);
		КонецЕсли;
			
		Если Параметры.Свойство("МассивТО") Тогда
			МассивТО = Параметры.МассивТО;
		Иначе
			МассивТО = МодельТС.НормативыОбслуживания;
		КонецЕсли;
		
		Индекс = 1;
		Для Каждого ТекСтрока Из МассивТО Цикл
			НоваяСтрока = СписокТО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Индекс          = Индекс;
			НоваяСтрока.Привязана       = Истина;
			ДобавитьКолонкуВТЧРаботыЗапчисти(ТекСтрока.ВидОбслуживания, Индекс);
			Индекс = Индекс + 1;
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МодельТС.Установить(МодельТС);
		НаборЗаписей.Прочитать();
		
		мТО = НаборЗаписей.Выгрузить();
		мТО.Свернуть("ТО");
		
		Индекс = СписокТО.Количество() + 1;
		Для Каждого ТекСтрока Из мТО Цикл
			
			мКолонкиТО = СписокТО.НайтиСтроки(Новый Структура("ВидОбслуживания", ТекСтрока.ТО));
			Если мКолонкиТО.Количество() <> 0 Тогда
				Продолжить;
			Конецесли;

			НоваяСтрока = СписокТО.Добавить();
			НоваяСтрока.ВидОбслуживания = ТекСтрока.ТО;
			НоваяСтрока.Индекс          = Индекс;
			НоваяСтрока.Привязана       = Ложь;
			ДобавитьКолонкуВТЧРаботыЗапчисти(ТекСтрока.ТО, Индекс, Ложь);
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			мКолонкиТО = СписокТО.НайтиСтроки(Новый Структура("ВидОбслуживания", ТекЗапись.ТО));
			Если мКолонкиТО.Количество() = 0 Тогда
				Продолжить;
			Конецесли;
			
			Если ТипЗнч(ТекЗапись.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокиРаботы = Запчасти.НайтиСтроки(Новый Структура("Номенклатура", ТекЗапись.Номенклатура));
				Если СтрокиРаботы.Количество() = 0 Тогда
					НоваяСтрока = Запчасти.Добавить();
				Иначе
					НоваяСтрока = СтрокиРаботы[0];
				КонецЕсли;
				НаименованиеРеквизита = "Запчасти";
			Иначе
				СтрокиРаботы = Работы.НайтиСтроки(Новый Структура("Номенклатура", ТекЗапись.Номенклатура));
				Если СтрокиРаботы.Количество() = 0 Тогда
					НоваяСтрока = Работы.Добавить();
				Иначе
					НоваяСтрока = СтрокиРаботы[0];
				КонецЕсли;
				НЧ = ПолучитьКоличествоНЧРаботы(МодельТС, ТекЗапись.Номенклатура);
				НоваяСтрока.НЧ = ТекЗапись.Номенклатура.Наименование + ?(ЗначениеЗаполнено(НЧ), " (" + Строка(НЧ) + " ч.)", "");
				НаименованиеРеквизита = "Работы";
			КонецЕсли;
			НоваяСтрока.Номенклатура                              = ТекЗапись.Номенклатура;
			НоваяСтрока["ВидОбслуживания" + мКолонкиТО[0].Индекс] = ТекЗапись.Количество;
		КонецЦикла;
		
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		ЕдиницаИзмеренияГрузов = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				"ОсновнаяЕдиницаПоКлассификатору");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РаботыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыПодбора",ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.уатФормаПодбораСвязанныхРаботЗапчастей", Новый Структура("РаботаПоОбслуживанию", 
		ВыбранноеЗначение),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокТОПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.СписокТО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьКолонкуВТЧРаботыЗапчисти(ТекущиеДанные.Индекс);
КонецПроцедуры

&НаКлиенте
Процедура СписокТОВидОбслуживанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокТО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Индекс) Тогда
		ТекущиеДанные.Индекс = СписокТО.Количество();
	КонецЕсли;
	ДобавитьКолонкуВТЧРаботыЗапчисти(ТекущиеДанные.ВидОбслуживания, ТекущиеДанные.Индекс, Истина);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ЗаписатьСервиснуюКнижку();
	ЗаполнитьСписокРаботЗапчастейВМодели();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзExel(Команда)
	ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияПомощника",ЭтотОбъект, Новый Структура("ВидТЧ", 1));
	Результат = ОткрытьФорму("Справочник.уатМоделиТС.Форма.ФормаСервиснаяКнижкаСоздание"
	,,,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзExelЗапчасти(Команда)
	ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияПомощника",ЭтотОбъект, Новый Структура("ВидТЧ", 0));
	Результат = ОткрытьФорму("Справочник.уатМоделиТС.Форма.ФормаСервиснаяКнижкаСоздание"
	,,,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВExel(Команда)
	ПоказатьДиалогВыбораФайла(1, 1);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВExelЗапчасти(Команда)
	ПоказатьДиалогВыбораФайла(,1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидОбслуживания(Команда)
	
	ТекущийЭлементТЧ = Элементы.Работы.ТекущийЭлемент;
	Если ТекущийЭлементТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТО Цикл
		Если "Работы" + ТекСтрока.Представление = ТекущийЭлементТЧ.Имя Тогда
			ОткрытьФорму("Справочник.уатВидыОбслуживанияТС.Форма.ФормаЭлемента", Новый Структура("Ключ",ТекСтрока.Значение));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияПомощника(ЗначенияЗаполнения,Параметр) Экспорт	
	Если НЕ ЗначенияЗаполнения = неопределено Тогда
		Если ТипЗнч(ЗначенияЗаполнения) = Тип("Структура") Тогда
				ПериодичностьОбслуживания  = ЗначенияЗаполнения.ПериодичностьОбслуживания; 
				КоличествоПериодов         = ЗначенияЗаполнения.КоличествоПериодов; 
				ПараметрВыработки          = ЗначенияЗаполнения.ПараметрВыработки;
				СервисныйИнтервал          = ЗначенияЗаполнения.СервисныйИнтервал; 
				Допуск                     = ЗначенияЗаполнения.Допуск;
				ДопускПерОбслуживания      = ЗначенияЗаполнения.ДопускПерОбслуживания;
				ПланированиеТО             = ЗначенияЗаполнения.ПланированиеТО;

				ПоказатьДиалогВыбораФайла(Параметр.ВидТЧ);
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыПодбора(ЗначенияЗаполнения,Параметр) Экспорт	
	Если НЕ ЗначенияЗаполнения = Неопределено
		И ЗначенияЗаполнения.Свойство("Работы")
		И ЗначенияЗаполнения.Свойство("Запчасти")Тогда
		
		Для Каждого ТекСтрока Из ЗначенияЗаполнения.Работы Цикл 
			мСтрок = Работы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если мСтрок.Количество() = 0 Тогда
				НоваяСтрока = Работы.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ЗначенияЗаполнения.Запчасти Цикл
			мСтрок = Запчасти.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если мСтрок.Количество() = 0 Тогда
				НоваяСтрока = Запчасти.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСервиснуюКнижку()
	
	ИмяКлючевойОперации = "уатОперации.СервиснаяКнижкаТО.Запись";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	НаборЗаписей = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МодельТС.Установить(МодельТС);
	НаборЗаписей.Записать();
	
	Для Каждого ТекСтрока Из Работы Цикл
		Для Каждого ТекКолонка Из СписокТО Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока["ВидОбслуживания" + ТекКолонка.Индекс]) Тогда
				НаборЗаписейНоменклатура = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
				НаборЗаписейНоменклатура.Отбор.МодельТС.Установить(МодельТС);
				НаборЗаписейНоменклатура.Отбор.ТО.Установить(ТекКолонка.ВидОбслуживания);
				НаборЗаписейНоменклатура.Отбор.Номенклатура.Установить(ТекСтрока.Номенклатура);
				НаборЗаписейНоменклатура.Прочитать();
				
				Если НаборЗаписейНоменклатура.Количество() = 0 Тогда
					НовЗапись = НаборЗаписейНоменклатура.Добавить();
					НовЗапись.МодельТС     = МодельТС;
					НовЗапись.ТО           = ТекКолонка.ВидОбслуживания;
					НовЗапись.Номенклатура = ТекСтрока.Номенклатура;
					НовЗапись.Количество   = ТекСтрока["ВидОбслуживания" + ТекКолонка.Индекс];
				Иначе
					НаборЗаписейНоменклатура[0].МодельТС     = МодельТС;
					НаборЗаписейНоменклатура[0].ТО           = ТекКолонка.ВидОбслуживания;
					НаборЗаписейНоменклатура[0].Номенклатура = ТекСтрока.Номенклатура;
					НаборЗаписейНоменклатура[0].Количество   = ТекСтрока["ВидОбслуживания" + ТекКолонка.Индекс];
				КонецЕсли;
				НаборЗаписейНоменклатура.Записать(Истина);
			Конецесли;
		КонецЦикла;
	КонецЦикла;
	
	
	Для Каждого ТекСтрока Из Запчасти Цикл
		Для Каждого ТекКолонка Из СписокТО Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока["ВидОбслуживания" + ТекКолонка.Индекс]) Тогда
				НаборЗаписейНоменклатура = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
				НаборЗаписейНоменклатура.Отбор.МодельТС.Установить(МодельТС);
				НаборЗаписейНоменклатура.Отбор.ТО.Установить(ТекКолонка.ВидОбслуживания);
				НаборЗаписейНоменклатура.Отбор.Номенклатура.Установить(ТекСтрока.Номенклатура);
				НаборЗаписейНоменклатура.Прочитать();
				
				Если НаборЗаписейНоменклатура.Количество() = 0 Тогда
					НовЗапись = НаборЗаписейНоменклатура.Добавить();
					НовЗапись.МодельТС     = МодельТС;
					НовЗапись.ТО           = ТекКолонка.ВидОбслуживания;
					НовЗапись.Номенклатура = ТекСтрока.Номенклатура;
					НовЗапись.Количество   = ТекСтрока["ВидОбслуживания" + ТекКолонка.Индекс];
				Иначе
					НаборЗаписейНоменклатура[0].МодельТС     = МодельТС;
					НаборЗаписейНоменклатура[0].ТО           = ТекКолонка.ВидОбслуживания;
					НаборЗаписейНоменклатура[0].Номенклатура = ТекСтрока.Номенклатура;
					НаборЗаписейНоменклатура[0].Количество   = ТекСтрока["ВидОбслуживания" +ТекКолонка.Индекс];
				КонецЕсли;
				НаборЗаписейНоменклатура.Записать(Истина);
			Конецесли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРаботЗапчастейВМодели()
	
	ТекОбъект = МодельТС.ПолучитьОбъект();
	ТекОбъект.НормативыОбслуживания.Очистить();
	Для Каждого ТекСтрока Из СписокТО Цикл
		НоваяСтрока = ТекОбъект.НормативыОбслуживания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		ИспользоватьВПланированииТО = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			НоваяСтрока.ВидОбслуживания, "ИспользоватьВПланированииТО");
		Если Не ЗначениеЗаполнено(НоваяСтрока.ПланированиеТО) Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.ПараметрВыработки) 
				И ЗначениеЗаполнено(НоваяСтрока.ПериодичностьОбслуживания)  Тогда
				НоваяСтрока.ПланированиеТО = Перечисления.уатПериодичностьТО.ЧтоНаступитРаньше;
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ПараметрВыработки) Тогда
				НоваяСтрока.ПланированиеТО = Перечисления.уатПериодичностьТО.ПоВыработке;
			Иначе
				НоваяСтрока.ПланированиеТО = Перечисления.уатПериодичностьТО.ПоВремени
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Плановый = ИспользоватьВПланированииТО;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТекОбъект.НормативыОбслуживания Цикл
		СписокРабот     = "";
		СписокЗапчастей = "";
		
		НаборЗаписейНоменклатура = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
		НаборЗаписейНоменклатура.Отбор.МодельТС.Установить(МодельТС);
		НаборЗаписейНоменклатура.Отбор.ТО.Установить(ТекСтрока.ВидОбслуживания);
		НаборЗаписейНоменклатура.Прочитать();
		
		Для Каждого ТекСтрокаНабор Из НаборЗаписейНоменклатура Цикл
			Если ТипЗнч(ТекСтрокаНабор.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				СписокЗапчастей = ?(ЗначениеЗаполнено(СписокЗапчастей), СписокЗапчастей + ", ", "") + ТекСтрокаНабор.Номенклатура;
			Иначе
				СписокРабот = ?(ЗначениеЗаполнено(СписокРабот), СписокРабот + ", ", "") + ТекСтрокаНабор.Номенклатура;
			Конецесли;
		КонецЦикла;
		
		ТекСтрока.СписокРабот     = СписокРабот;
		ТекСтрока.СписокЗапчастей = СписокЗапчастей;
	КонецЦикла;
	ТекОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(ВидТЧ = 0, ВидОперации = 0)
	
	ПараметрыОткрытия = Новый Структура("ВидТЧ, ВидОперации", ВидТЧ, ВидОперации);
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайлаЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
		Возврат;
	КонецЕсли;

	СтрокаОшибки = "";
	
	Если ДополнительныеПараметры.ВидОперации = 0 Тогда
		ВыполнитьЗагрузкуДанныхExcel(ПутьКФайлу, СтрокаОшибки, ДополнительныеПараметры.ВидТЧ);
	Иначе
		ВыполнитьВыгрузкуДанныхExcel(ПутьКФайлу, СтрокаОшибки, ДополнительныеПараметры.ВидТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхExcel(ПутьКФайлу, СтрокаОшибки, ВидТЧ = 0)
	
	ДопПараметры = Новый Структура("ПутьКФайлу, СтрокаОшибка, ВидТЧ",ПутьКФайлу, СтрокаОшибки, ВидТЧ);
	Обработчик = Новый ОписаниеОповещения("ПрочитатьДанныеИзФайлаПослеПодключения", ЭтотОбъект, ДопПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхExcelЗавершение(ДвоичныеДанные, ДопПараметры) Экспорт
	
	Если ДвоичныеДанные <> Неопределено Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДопПараметры.ПутьКФайлу));
		
		Попытка
			НашФайл = ПолучитьТабличныйДокументЗагрузки(Адрес, РасширениеФайла);
		Исключение
			НашФайл = Неопределено;
			СтрокаОшибки = НСтр("en='An error occurred while reading the document.';ru='Ошибка при чтении табличного документа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
			Возврат;
		КонецПопытки;
		
		Попытка
			ВсегоСтрок   = НашФайл.ВысотаТаблицы;
			ВсегоКолонок = НашФайл.ШиринаТаблицы;
		Исключение
			НашФайл = Неопределено;
			СтрокаОшибки = НСтр("en='Error while working with the document.';ru='Ошибка при работе с табличным документом.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
			Возврат;
		КонецПопытки;
		
		мсвЗагруженныеДанные = Новый Массив;
		Колич = ВсегоСтрок;
		
		Если Колич = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПерваСтрока = Истина;
		МассивТО        = Новый Соответствие();
		мМассивТО       = Новый Массив();
		МассивРабот     = Новый Массив();
		СервиснаяКнижка = Новый Массив();
		
		// Читаем строки с данными
		Для НомерСтроки = 1 По ВсегоСтрок Цикл
			
			// Пропускаем строки с незаполненными работами
			Попытка
				Если ПустаяСтрока(НашФайл.Область("R"+ НомерСтроки + "C" + 1).Текст) 
					И ПустаяСтрока(НашФайл.Область("R"+ НомерСтроки + "C" + 2).Текст) Тогда
					Продолжить;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если ПерваСтрока Тогда
				ПерваСтрока = Ложь;
				ЗаголовокТО = НашФайл.Область("R" + НомерСтроки + "C" + 1).Текст;
				Для НомерКолонки = 2 По ВсегоКолонок Цикл
					ТекущееЗначение = НРег(СокрЛП(НашФайл.Область("R" + НомерСтроки + "C" + НомерКолонки).Текст));
					Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
						ВидТО = НайтиСоздатьВидТО(ЗаголовокТО, ТекущееЗначение, МодельТС);
						МассивТО.Вставить(НомерКолонки, ВидТО);
						мМассивТО.Добавить(ВидТО);
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Для НомерКолонки = 2 По ВсегоКолонок Цикл
				СтруктураСервиснаяКнижка = Новый Структура("ТО, Номенклатура, Количество");
				Номенклатура    = НРег(СокрЛП(НашФайл.Область("R" + НомерСтроки + "C" + 1).Текст));
				ТекущееЗначение = НРег(СокрЛП(НашФайл.Область("R" + НомерСтроки + "C" + НомерКолонки).Текст));
				
				Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
					СтруктураСервиснаяКнижка.ТО           = МассивТО.Получить(НомерКолонки);
					Если ДопПараметры.ВидТЧ = 0 Тогда
						СтруктураСервиснаяКнижка.Номенклатура = НайтиСоздатьНоменклатуру(Номенклатура);
					Иначе
						СтруктураСервиснаяКнижка.Номенклатура = НайтиСоздатьРаботу(Номенклатура);
					КонецЕсли;
					
					Попытка
						Если ЭтоЧисло(ТекущееЗначение) Тогда
							СтруктураСервиснаяКнижка.Количество = Число(ТекущееЗначение);
						Иначе
							СтруктураСервиснаяКнижка.Количество = 1;
						КонецЕсли;
					Исключение
						СтруктураСервиснаяКнижка.Количество = 1;
					КонецПопытки;
					СервиснаяКнижка.Добавить(СтруктураСервиснаяКнижка);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаполнитьСервиснуюКнижку(мМассивТО, СервиснаяКнижка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументЗагрузки(Адрес, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(Адрес); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Попытка
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


&НаКлиенте
Процедура ВыполнитьВыгрузкуДанныхExcel(ПутьКФайлу, СтрокаОшибки, ВидТЧ = 0)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВидТЧ = 0 Тогда
		ТабДокШаблона = ПолучитьТабличныйДокумент(Запчасти);
	Иначе
		ТабДокШаблона = ПолучитьТабличныйДокумент(Работы);
	Конецесли;
	
	ТабДокШаблона.НачатьЗапись(, ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСервиснуюКнижку(МассивТО, СервиснаяКнижка);
	
	Индекс = СписокТО.Количество() + 1;
	ЗначениеПараметраВыработки = 0;
	Для Каждого ТекСтрока Из МассивТО Цикл
		
		СтрокиТО = СписокТО.НайтиСтроки(Новый Структура("ВидОбслуживания", ТекСтрока));
		Если СтрокиТО.Количество() = 0 Тогда
			НоваяСтрока = СписокТО.Добавить();
			НоваяСтрока.Индекс    = Индекс;
			НоваяСтрока.Привязана = Ложь;
		Иначе
			НоваяСтрока = СтрокиТО[0];  
		КонецЕсли;
		
		ЗначениеПараметраВыработки = ЗначениеПараметраВыработки + СервисныйИнтервал;
		НоваяСтрока.ВидОбслуживания            = ТекСтрока;
		НоваяСтрока.ПланированиеТО             = ПланированиеТО;
		НоваяСтрока.ПараметрВыработки          = ПараметрВыработки;
		НоваяСтрока.ПериодичностьОбслуживания  = ПериодичностьОбслуживания;
		НоваяСтрока.ДопускПерОбслуживания      = ДопускПерОбслуживания;
		НоваяСтрока.ЗначениеПараметраВыработки = ЗначениеПараметраВыработки;
		НоваяСтрока.КоличествоПериодов         = КоличествоПериодов;
		НоваяСтрока.Допуск                     = Допуск;
		
		Если СтрокиТО.Количество() = 0 Тогда
			ДобавитьКолонкуВТЧРаботыЗапчисти(ТекСтрока, Индекс, Ложь);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Для Каждого ТекЗапись Из СервиснаяКнижка Цикл
		СтрокиТО = СписокТО.НайтиСтроки(Новый Структура("ВидОбслуживания", ТекЗапись.ТО));
		Если СтрокиТО.Количество() = 0  Тогда
			Продолжить;
		Конецесли;
		
		Если ТипЗнч(ТекЗапись.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			мСтроки = Запчасти.НайтиСтроки(Новый Структура("Номенклатура", ТекЗапись.Номенклатура));
			Если мСтроки.Количество() <> 0 Тогда
				НоваяСтрока = мСтроки[0];
			Иначе
				НоваяСтрока = Запчасти.Добавить();
			КонецЕсли;
			НаименованиеРеквизита = "Запчасти";
		Иначе
			мСтроки = Работы.НайтиСтроки(Новый Структура("Номенклатура", ТекЗапись.Номенклатура));
			Если мСтроки.Количество() <> 0 Тогда
				НоваяСтрока = мСтроки[0];
			Иначе
				НоваяСтрока = Работы.Добавить();
			КонецЕсли;
			НЧ = ПолучитьКоличествоНЧРаботы(МодельТС, ТекЗапись.Номенклатура);
			НоваяСтрока.НЧ = ТекЗапись.Номенклатура.Наименование + ?(ЗначениеЗаполнено(НЧ), " (" + Строка(НЧ) + " ч.)", "");
			НаименованиеРеквизита = "Работы";
		КонецЕсли;
		НоваяСтрока.Номенклатура             = ТекЗапись.Номенклатура;
		НоваяСтрока["ВидОбслуживания" + СтрокиТО[0].Индекс]      = ТекЗапись.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЧисло(Знач ПроверяемоеЗначение)
	
	Если ПроверяемоеЗначение = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисла.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьВидТО(ЗаголовокТО, НаименованиеТО, МодельТС)
	
	Если Не ЗначениеЗаполнено(НаименованиеТО) Тогда 
		Возврат Справочники.уатВидыОбслуживанияТС.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаголовокТО) Тогда 
		ЗаголовокТО = "";
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеТО", НаименованиеТО);
	Запрос.УстановитьПараметр("ЗаголовокТО", ЗаголовокТО + " " + НаименованиеТО);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатВидыОбслуживанияТС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатВидыОбслуживанияТС КАК уатВидыОбслуживанияТС
	               |ГДЕ
	               |	(уатВидыОбслуживанияТС.Наименование = &НаименованиеТО
	               |			ИЛИ уатВидыОбслуживанияТС.Наименование = &ЗаголовокТО
	               |				И НЕ уатВидыОбслуживанияТС.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		ВидОбслуживания = Справочники.уатВидыОбслуживанияТС.СоздатьЭлемент();
		ВидОбслуживания.ИспользоватьВПланированииТО = Истина;
		ВидОбслуживания.Наименование = НаименованиеТО;
		ВидОбслуживания.Записать();
		
		Возврат ВидОбслуживания.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьНоменклатуру(НаименованиеГруза)
	
	Если Не ЗначениеЗаполнено(НаименованиеГруза) Тогда 
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруза);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.Наименование = &Наименование
	|			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Наименование       = НаименованиеГруза;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеГруза;
	НоменклатураОбъект.ЕдиницаИзмерения   = ЕдиницаИзмеренияГрузов;
	НоменклатураОбъект.ВидНоменклатуры    = Справочники.ВидыНоменклатуры.Товар;
	
	НоменклатураОбъект.Записать();
	
	НоменклатураОбъект.ЕдиницаХраненияОстатков = НайтиСоздатьЕдиницуХраненияОстатков(НоменклатураОбъект.Ссылка);
	
	НоменклатураОбъект.Записать();
	
	Возврат НоменклатураОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьРаботу(НаименованиеРаботы)
	
	Если Не ЗначениеЗаполнено(НаименованиеРаботы) Тогда 
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеРаботы);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатРаботыПоРемонту.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатРаботыПоРемонту КАК уатРаботыПоРемонту
	|ГДЕ
	|	НЕ уатРаботыПоРемонту.ПометкаУдаления
	|	И НЕ уатРаботыПоРемонту.ЭтоГруппа
	|	И (уатРаботыПоРемонту.Наименование = &Наименование
	|			ИЛИ уатРаботыПоРемонту.НаименованиеПолное ПОДОБНО &Наименование)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НоменклатураОбъект = Справочники.уатРаботыПоРемонту.СоздатьЭлемент();
	НоменклатураОбъект.Наименование       = НаименованиеРаботы;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеРаботы;
	
	НоменклатураОбъект.Записать();
	
	Возврат НоменклатураОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьЕдиницуХраненияОстатков(НоменклатураСсылка)
	
	Если Не ЗначениеЗаполнено(НоменклатураСсылка) Тогда 
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",   ЕдиницаИзмеренияГрузов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &НоменклатураСсылка
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаИзмерения
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ЕдиницаХраненияОстатковОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаХраненияОстатковОбъект.Владелец                = НоменклатураСсылка;
	ЕдиницаХраненияОстатковОбъект.Наименование            = ЕдиницаИзмеренияГрузов.Наименование;
	ЕдиницаХраненияОстатковОбъект.ЕдиницаПоКлассификатору = ЕдиницаИзмеренияГрузов;
	ЕдиницаХраненияОстатковОбъект.Коэффициент             = 1;
	
	ЕдиницаХраненияОстатковОбъект.Записать();
	
	Возврат ЕдиницаХраненияОстатковОбъект.Ссылка;
	
КонецФункции // НайтиСоздатьЕдиницуХраненияОстатков()

&НаСервере
Функция ПолучитьКоличествоНЧРаботы(Модель, Работа)
	Возврат Справочники.уатРаботыПоРемонту.ПолучитьКоличествоНЧРаботы(Модель, Работа);
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокумент(Знач ТЧ, мКолонкаИндекс = 0)
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Выводим заголовок таблицы
	КолонкаИндекс = мКолонкаИндекс;
	Таблица = ТЧ.Выгрузить();
	Пока КолонкаИндекс < Таблица.Колонки.Количество() Цикл
		Колонка = Таблица.Колонки[КолонкаИндекс];
		
		Область = ТабДокумент.Область(1, КолонкаИндекс + ?(мКолонкаИндекс = 0,1,0), 1, КолонкаИндекс + ?(мКолонкаИндекс = 0,1,0));
		Область.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		Область.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);

		Область.Шрифт = Новый Шрифт(,,Истина,,,);
			
		Для Каждого ТекСтрока Из СписокТО Цикл
			Если ТекСтрока.Индекс = КолонкаИндекс Тогда
				Область.Текст = ТекСтрока.ВидОбслуживания; 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Область.Текст) Тогда
			Область.Текст = "Работы";
			Область.ШиринаКолонки = 25;
		ИначеЕсли КолонкаИндекс = 0 Тогда
			Область.ШиринаКолонки = 25;
		КонецЕсли;
		
		КолонкаИндекс = КолонкаИндекс + 1;
	КонецЦикла;
	
	// Выводим строки таблицы
	СтрокаИндекс = 0;
	Пока СтрокаИндекс < Таблица.Количество() Цикл
		Таблица_Строка = Таблица[СтрокаИндекс];
		КолонкаИндекс = мКолонкаИндекс;
		Пока КолонкаИндекс < Таблица.Колонки.Количество() Цикл
			Колонка = Таблица.Колонки[КолонкаИндекс];
			Область = ТабДокумент.Область(СтрокаИндекс + 2, КолонкаИндекс + ?(мКолонкаИндекс = 0,1,0), СтрокаИндекс + 2, КолонкаИндекс + ?(мКолонкаИндекс = 0,1,0));
			Область.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			Область.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			Область.Текст = Таблица_Строка[Колонка.Имя];  // + 2, т.к. в первой строке выведен заголовок
			КолонкаИндекс = КолонкаИндекс + 1;
		КонецЦикла;
		СтрокаИндекс = СтрокаИндекс + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуВТЧРаботыЗапчисти(ВидОбслуживания, Индекс, Привязана = Истина)
	
	Если Элементы.Найти("РаботыВидОбслуживания" + Индекс) <> Неопределено Тогда
		ТекКолонка = Элементы.Найти("РаботыВидОбслуживания" + Индекс);
		ТекКолонка.Заголовок = ВидОбслуживания.Наименование;
		ТекКолонка = Элементы.Найти("ЗапчастиВидОбслуживания" + Индекс);
		ТекКолонка.Заголовок = ВидОбслуживания.Наименование;
	Иначе
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОбслуживания" + Индекс, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(16)),"Работы", ВидОбслуживания)); 
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		НовыйЭлемент = Элементы.Добавить("РаботыВидОбслуживания"+Индекс, Тип("ПолеФормы"), Элементы.Работы);
		НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Работы.ВидОбслуживания" + Индекс;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйЭлемент.Ширина = 5;
		Если НЕ Привязана Тогда
			НовыйЭлемент.ЦветФона = ЦветаСтиля.уатИтогиФонГруппы;
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов = Новый Массив; 
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОбслуживания" + Индекс, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(16,3)),"Запчасти", ВидОбслуживания));
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		НовыйЭлемент = Элементы.Добавить("ЗапчастиВидОбслуживания"+Индекс, Тип("ПолеФормы"), Элементы.Запчасти);
		НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Запчасти.ВидОбслуживания" + Индекс;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйЭлемент.Ширина = 5;
		Если НЕ Привязана Тогда
			НовыйЭлемент.ЦветФона = ЦветаСтиля.уатИтогиФонГруппы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкуВТЧРаботыЗапчисти(Индекс)
	
	НовыйЭлемент = Элементы.Найти("РаботыВидОбслуживания"+Индекс);
	Если НовыйЭлемент <> Неопределено Тогда
		Элементы.Удалить(НовыйЭлемент);
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("Работы.ВидОбслуживания" + Индекс); 
		ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Найти("ЗапчастиВидОбслуживания"+Индекс);
	Если НовыйЭлемент <> Неопределено Тогда
		Элементы.Удалить(НовыйЭлемент);
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("Запчасти.ВидОбслуживания" + Индекс); 
		ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, Значение)
	// Фиксация операции для статистики
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайлаЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПутьКФайлуЗавершениеВыбора", ЭтотОбъект, Новый Структура("ВидТЧ, ВидОперации",
		ДополнительныеПараметры.ВидТЧ, ДополнительныеПараметры.ВидОперации));
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр             = НСтр("en='Excel file';ru='Файлы Excel'") + "(*.xls; *.xlsx)|*.xls;*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок          = НСтр("ru='Выберите файл");
	
	ДиалогВыбораФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайлаПослеПодключения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	#Если МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ПутьКФайлу); 
		ВыполнитьЗагрузкуДанныхExcelЗавершение(ДвоичныеДанные, ДополнительныеПараметры);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхExcelЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьСозданиеДвоичныхДанныхИзФайла(Оповещение, ДополнительныеПараметры.ПутьКФайлу);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти






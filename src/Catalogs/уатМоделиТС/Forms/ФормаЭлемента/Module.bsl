
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если уатЖурналыТранспортныхДокументов.ЗапретОткрытияФормыОбъекта(Отказ, СтандартнаяОбработка,
		Метаданные.Справочники.уатМоделиТС) Тогда
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.ВидМоделиТС           = Перечисления.уатВидыМоделейТС.Автотранспорт;
		Объект.НаличиеТопливногоБака = Истина;
		Объект.НаличиеСпидометра     = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаГСМ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаТЖ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаГСМ, "ДатаСреза", ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаТЖ, "ДатаСреза", ТекущаяДата());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаГСМ, "Модель", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаТЖ, "Модель", Объект.Ссылка);
	
	СпидометрСчетчикМЧ = ?(Не Объект.НаличиеСпидометра, 1, 0);
	
	// Сохраним старое значение Вида модели ТС
	Если Параметры.Ключ.Пустая() Тогда 
		ВидМоделиТСДоИзменения = Перечисления.уатВидыМоделейТС.ПустаяСсылка();
	Иначе 
		ВидМоделиТСДоИзменения = Объект.ВидМоделиТС;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.уатМоделиТС) Тогда
		Элементы.СпидометрСчетчикМЧ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		ИспользоватьАвтоматическуюМаршрутизацию  = ПолучитьФункциональнуюОпцию("уатИспользоватьАвтоматическуюМаршрутизацию");
		Элементы.СтраницаМаршрутизация.Видимость = ИспользоватьАвтоматическуюМаршрутизацию;

		
		Элементы.СтоимостьТСФиксир.Видимость  = Истина;
		Элементы.СтоимостьТСЗаКм.Видимость    = Истина;
		Элементы.СтоимостьТСЗаЧас.Видимость   = Истина;
		Элементы.СтоимостьТСЗаЗаказ.Видимость = Истина;
	Иначе 
		Элементы.СтраницаМаршрутизация.Видимость = Ложь;
	КонецЕсли;
	

	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриИзмененииПризнакаСпидометра();
	ОтобразитьНадписьДопТопливоАналог();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаГСМ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НормыРасходаТЖ.Отбор, "МодельТС", Объект.Ссылка,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаГСМ, "Модель", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормыРасходаТЖ, "Модель", Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("МодельТС"	, Объект.Ссылка);
		СтруктураОтбора.Вставить("ГСМ"		, Объект.ОсновноеТопливо);
		ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", 
			СтруктураОтбора));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломИзменения(Элемент, Отказ)
	Если Модифицированность Тогда
		Ответ = Неопределено;
		Отказ = Истина;
		ТекстНСТР = НСтр("en='Before changing norms of fues consumption it is necessary to record the item. Continue?';ru='Перед изменением норм расход ГСМ необходимо записать элемент. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("НормыРасходаГСМПередНачаломИзмененияЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеТопливоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры	 = Новый Структура("ЗначениеГСМДоИзменения", Объект.ОсновноеТопливо);
	ОписаниеОповещенияЗакр	 = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);

	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"), ДополнительныеПараметры, ОписаниеОповещенияЗакр);
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеТопливоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеТопливоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеТопливоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры	 = Новый Структура("ЗначениеГСМДоИзменения", Объект.ДополнительноеТопливо);
	ОписаниеОповещенияЗакр	 = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМДоп", ЭтотОбъект, ДополнительныеПараметры);
	
	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"), ДополнительныеПараметры, ОписаниеОповещенияЗакр);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеТопливоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеТопливоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ТипДвигателяПриИзменении(Элемент)
	Если Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт") И НЕ ЗначениеЗаполнено(Объект.ТипДвигателя) Тогда
		Объект.ОсновноеТопливо = Неопределено;
		Объект.ДополнительноеТопливо = Неопределено;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВидМоделиТСПриИзменении(Элемент)
	ЭтоАвтотранспорт = (Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	Если ЭтоАвтотранспорт И НЕ ЗначениеЗаполнено(Объект.ТипДвигателя) Тогда
		Объект.ОсновноеТопливо = Неопределено;
		Объект.ДополнительноеТопливо = Неопределено;
	КонецЕсли;
	Если НЕ ЭтоАвтотранспорт Тогда
		Объект.ДополнительноеТопливо = Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТипТСПриИзменении(Элемент)
	ЗаполнитьРеквизитыТСПоТипуТС();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура НаличиеТопливногоБакаПриИзменении(Элемент)
	УстановитьВидимость();
	Если НЕ Объект.НаличиеТопливногоБака тогда
		Объект.ОбъемБака = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативыОбслуживанияВидОбслуживанияПриИзменении(Элемент)
	СтрокТабличнойЧасти = Элементы.НормативыОбслуживания.ТекущиеДанные;
	ПроверитьНаДублиТО(СтрокТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура НормативыОбслуживанияПараметрВыработкиПриИзменении(Элемент)
	СтрокТабличнойЧасти = Элементы.НормативыОбслуживания.ТекущиеДанные;
	ПроверитьНаДублиТО(СтрокТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СпидометрСчетчикМЧПриИзменении(Элемент)
	Объект.НаличиеСпидометра = ?(СпидометрСчетчикМЧ = 0, Истина, Ложь);
	ПриИзмененииПризнакаСпидометра();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаТЖПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	#Если ВебКлиент Тогда
		Если НЕ Копирование Тогда
			Отказ = Истина;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("МодельТС", Объект.Ссылка);
			ОткрытьФорму("РегистрСведений.уатНормыРасходаТехническихЖидкостей.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураОтбора));
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Описание");
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеТопливоПриИзменении(Элемент)
	ОтобразитьНадписьДопТопливоАналог();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеТопливоПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДополнительноеТопливо) Тогда
		Объект.ОбъемДопБака = 0;
	КонецЕсли;
	
	ОтобразитьНадписьДопТопливоАналог();
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_НормативыОбслуживания

&НаКлиенте
Процедура НормативыОбслуживанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	уатОбщегоНазначенияКлиент.ПроверитьЗаписьНовогоОбъектаВФорме(ЭтотОбъект, Объект.Ссылка,,, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;	
	Если НЕ Копирование Тогда
		НоваяСтрока = Объект.НормативыОбслуживания.Добавить(); 
		Элементы.НормативыОбслуживания.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ПомощникПланированияТО();
	Иначе
		ЗначенияЗаполнения = ЗаполнитьСтруктуруТекущимиДанными();
		
		НоваяСтрока = Объект.НормативыОбслуживания.Добавить();
		ЭтотОбъект.Элементы.НормативыОбслуживания.Обновить();

		Элементы.НормативыОбслуживания.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ПомощникПланированияТО(ЗначенияЗаполнения);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НормативыОбслуживанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЗначенияФормы = ЗаполнитьСтруктуруТекущимиДанными();
	ПомощникПланированияТО(ЗначенияФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура ОткрытьСервиснуюКнижку(Команда)
	
	МассивТО = Новый Массив();
	Для Каждого ТекСтрока Из Объект.НормативыОбслуживания Цикл
		КолонкиМассивТО = Новый Структура("ВидОбслуживания, Допуск, ЗначениеПараметраВыработки, КоличествоПериодов, ПараметрВыработки,
		|ПериодичностьОбслуживания, ДопускПерОбслуживания, Валюта, Стоимость, ПланированиеТО, Количество");
		ЗаполнитьЗначенияСвойств(КолонкиМассивТО, ТекСтрока);
		МассивТО.Добавить(КолонкиМассивТО);
	КонецЦикла;
	
	ПриЗакрытииФормы = Новый ОписаниеОповещения("ОткрытьСервиснуюКнижкуПослеЗакрытия",ЭтотОбъект);

	ОткрытьФорму("Справочник.уатМоделиТС.Форма.ФормаСервиснаяКнижка", Новый Структура("МодельТС, МассивТО", 
			Объект.Ссылка, МассивТО),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьСервиснуюКнижку(Команда)
	
	МассивТО = Новый Массив();
	Для Каждого ТекСтрока Из Объект.НормативыОбслуживания Цикл
		КолонкиМассивТО = Новый Структура("ВидОбслуживания, Допуск, ЗначениеПараметраВыработки, КоличествоПериодов, ПараметрВыработки,
		|ПериодичностьОбслуживания, ДопускПерОбслуживания, Валюта, Стоимость, ПланированиеТО, Количество");
		ЗаполнитьЗначенияСвойств(КолонкиМассивТО, ТекСтрока);
		МассивТО.Добавить(КолонкиМассивТО);
	КонецЦикла;
	
	ПриЗакрытииФормы = Новый ОписаниеОповещения("ОткрытьСервиснуюКнижкуПослеЗакрытия",ЭтотОбъект);

	ОткрытьФорму("Справочник.уатМоделиТС.Форма.ФормаСервиснаяКнижка", Новый Структура("МодельТС, МассивТО, Создание", 
			Объект.Ссылка, МассивТО, Истина),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСервиснуюКнижку(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. Continue?';ru='Для выполнения данной операции необходимо записать элемент. Продолжить?'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("КопироватьСервиснуюКнижкуПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если Объект.НормативыОбслуживания.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("КопироватьСервиснуюКнижкуОчистка", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("КопироватьСервиснуюКнижкуЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.уатМоделиТС.ФормаВыбора",, ЭтотОбъект,,,,Обработчик);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПриИзмененииПризнакаСпидометра()
	Элементы.НормыРасходаГСМЛинейнаяНорма.Видимость						= Объект.НаличиеСпидометра;
	Элементы.НормыРасходаГСМНормаНаИзменениеСобственногоВеса.Видимость	= Объект.НаличиеСпидометра;
	Элементы.НормыРасходаГСМНормаНаТранспортнуюРаботу.Видимость			= Объект.НаличиеСпидометра;
	Элементы.НормыРасходаГСМНормаСпециальнаяНаМоточас.Видимость			= НЕ Объект.НаличиеСпидометра;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.АвиационныйТранспорт
		Или Объект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.МорскойТранспорт
		Или Объект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.ЖДТранспорт Тогда 
		
		Элементы.СтраницаНормыРасходаГСМ.Видимость                  = Ложь;
		Элементы.СтраницаНормыРасходаТехническихЖидкостей.Видимость = Ложь;
		Элементы.НормыТО.Видимость                                  = Ложь;
		Элементы.МакетТС.Видимость                                  = Ложь;
		Элементы.ГруппаТопливо.Видимость                           = Ложь;
		Элементы.МаксимальнаяСкорость.Видимость                     = Ложь;
		Элементы.СобственныйВес.Видимость                           = Ложь;
		Элементы.ГруппаКоличество.Видимость                         = Ложь;
		Элементы.ГруппаСамосвал.Видимость                           = Ложь;
		Элементы.ГруппаДвигатель.Видимость                          = Ложь;
		Элементы.ГруппаДверь.Видимость                              = Ложь;
		Элементы.СпособПогрузки.Видимость                           = Ложь;
		Элементы.ГруппаДопИнформация.Видимость                      = Ложь;
		Элементы.СпидометрСчетчикМЧ.Видимость                       = Ложь;
		Элементы.КатегорияАТСЕЭК.Видимость                          = Ложь;
		Элементы.СтраницаМаршрутизация.Видимость                    = Ложь;
		Элементы.ВидПривода.Видимость                               = Ложь;
		Элементы.Марка.Видимость                                    = Ложь;

	Иначе 
		Элементы.СтраницаНормыРасходаГСМ.Видимость                  = Истина;
		Элементы.СтраницаНормыРасходаТехническихЖидкостей.Видимость = Истина;
		Элементы.НормыТО.Видимость                                  = Истина;
		Элементы.МакетТС.Видимость                                  = Истина;
		Элементы.ГруппаТопливо.Видимость                           = Истина;
		Элементы.МаксимальнаяСкорость.Видимость                     = Истина;
		Элементы.СобственныйВес.Видимость                           = Истина;
		Элементы.ГруппаКоличество.Видимость                         = Истина;
		Элементы.ГруппаСамосвал.Видимость                           = Истина;
		Элементы.ГруппаДвигатель.Видимость                          = Истина;
		Элементы.ГруппаДверь.Видимость                              = Истина;
		Элементы.СпособПогрузки.Видимость                           = Истина;
		Элементы.ГруппаДопИнформация.Видимость                      = Истина;
		Элементы.СпидометрСчетчикМЧ.Видимость                       = Истина;
		Элементы.КатегорияАТСЕЭК.Видимость                          = Истина;
		Элементы.Марка.Видимость                                    = Истина;
		Элементы.ВидПривода.Видимость                               = Истина;
		
		ЭтоАвтотранспорт = ?(Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"), Истина, Ложь);
		ЭтоПрицеп = ?(Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"), Истина, Ложь);
		ЭтоОборудование = ?(Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование"), Истина, Ложь);
		
		Если ЭтоАвтотранспорт Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ТипДвигателя) Тогда
				Элементы.МодельДвигателя.Доступность       		= Ложь;
				Элементы.ОсновноеТопливо.Доступность       		= Ложь;
				Элементы.ДополнительноеТопливо.Доступность 		= Ложь;
				Элементы.ОсновноеТопливо.Подсказка 				= НСтр("en='To select fuel, enter the type of engine';ru='Для выбора топлива укажите тип двигателя'");
				Элементы.ОсновноеТопливо.ОтображениеПодсказки 	= ОтображениеПодсказки.Кнопка;
			Иначе
				Элементы.МодельДвигателя.Доступность       		= Истина;
				Элементы.ОсновноеТопливо.Доступность       		= Истина;
				Элементы.ДополнительноеТопливо.Доступность 		= Истина;
				Элементы.ОсновноеТопливо.Подсказка 				= "";
				Элементы.ОсновноеТопливо.ОтображениеПодсказки 	= ОтображениеПодсказки.Авто;
			КонецЕсли;
		Иначе
			Элементы.МодельДвигателя.Доступность       = Истина;
			Элементы.ОсновноеТопливо.Доступность       = Истина;
			Элементы.ДополнительноеТопливо.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.ТипТС.Видимость           = ЭтоАвтотранспорт Или ЭтоПрицеп Или ЭтоОборудование;
		Элементы.КатегорияАТСЕЭК.Видимость = ЭтоАвтотранспорт Или ЭтоПрицеп;
		Элементы.ГруппаСамосвал.Видимость  = Объект.ТипТС.Самосвал;
		
		Элементы.ОбъемБака.Видимость       = Объект.НаличиеТопливногоБака;
		Элементы.ОбъемДопБака.Видимость    = Объект.НаличиеТопливногоБака И ЗначениеЗаполнено(Объект.ДополнительноеТопливо);
		Если ЗначениеЗаполнено(Объект.ДополнительноеТопливо) Тогда
			Элементы.НаличиеТопливногоБака.Заголовок = "Топливные баки";
		Иначе
			Элементы.НаличиеТопливногоБака.Заголовок = "Топливный бак";
		КонецЕсли;
		
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
			ИспользоватьАвтоматическуюМаршрутизацию  = ПолучитьФункциональнуюОпцию("уатИспользоватьАвтоматическуюМаршрутизацию");
			Элементы.СтраницаМаршрутизация.Видимость = ИспользоватьАвтоматическуюМаршрутизацию;
		Иначе 
			Элементы.СтраницаМаршрутизация.Видимость = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаДублиТО(СтрокаТабличнойЧасти)

	СчДублей = 0;
	Для Каждого СтрокаТЧ Из Объект.НормативыОбслуживания Цикл
		Если (СтрокаТабличнойЧасти.ВидОбслуживания = СтрокаТЧ.ВидОбслуживания)
			И (СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТЧ.ПараметрВыработки) Тогда
			СчДублей = СчДублей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СчДублей > 1 Тогда
		ТекстНСТР = НСтр("en='Cannot enter two lines with same maintenance type';ru='Нельзя вводить две строки с одинаковым видом ТО'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтрокаТабличнойЧасти.ВидОбслуживания = ПредопределенноеЗначение("Справочник.уатВидыОбслуживанияТС.ПустаяСсылка"); 
	Иначе
		ИспользоватьВПланированииТО = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.ВидОбслуживания, "ИспользоватьВПланированииТО");
		СтрокаТабличнойЧасти.Плановый        = ИспользоватьВПланированииТО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормыРасходаГСМПередНачаломИзмененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОсновноеТопливо = Результат;
	ОсновноеТопливоПриИзменении(Неопределено);
	
	Если Объект.ОсновноеТопливо <> ДопПараметры.ЗначениеГСМДоИзменения Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМДоп(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительноеТопливо = Результат;
	ДополнительноеТопливоПриИзменении(Неопределено);
	
	Если Объект.ДополнительноеТопливо <> ДопПараметры.ЗначениеГСМДоИзменения Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// Помощник планирования ТО
&НаКлиенте
Процедура ПомощникПланированияТО(ЗначенияЗаполнения = неопределено)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. Continue?';ru='Для выполнения данной операции необходимо записать элемент. Продолжить?'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ПомощникПланированияТОПродолжение", ЭтотОбъект, ЗначенияЗаполнения);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияПомощника", ЭтотОбъект);
		Результат = ОткрытьФорму("Справочник.уатМоделиТС.Форма.ФормаПомощника", Новый Структура("МодельТС, ЗначенияЗаполнения", 
		Объект.Ссылка, ЗначенияЗаполнения),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПланированияТОПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если Записать() Тогда 
				ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияПомощника", ЭтотОбъект);
				Результат = ОткрытьФорму("Справочник.уатМоделиТС.Форма.ФормаПомощника", Новый Структура("МодельТС, ЗначенияЗаполнения", 
				Объект.Ссылка, ДопПараметры),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПомощника(ЗначенияЗаполнения,Параметр) Экспорт	
	Если НЕ ЗначенияЗаполнения = неопределено Тогда
		Если ТипЗнч(ЗначенияЗаполнения) = Тип("Массив") Тогда
			Для Каждого ТекСтрока Из ЗначенияЗаполнения Цикл
				НоваяСтрока = Объект.НормативыОбслуживания.Добавить();
				
				НоваяСтрока.ВидОбслуживания            = ТекСтрока.ВидОбслуживания; 
				НоваяСтрока.ПериодичностьОбслуживания  = ТекСтрока.ПериодичностьОбслуживания; 
				НоваяСтрока.КоличествоПериодов         = ТекСтрока.КоличествоПериодов; 
				НоваяСтрока.ПараметрВыработки          = ТекСтрока.ПараметрВыработки;
				НоваяСтрока.ЗначениеПараметраВыработки = ТекСтрока.ЗначениеПараметраВыработки; 
				НоваяСтрока.Допуск                     = ТекСтрока.Допуск;
				НоваяСтрока.ДопускПерОбслуживания      = ТекСтрока.ДопускПерОбслуживания;
				НоваяСтрока.СписокРабот                = "";
				НоваяСтрока.СписокЗапчастей            = "";
				НоваяСтрока.ПланированиеТО             = ТекСтрока.ПланированиеТО;
				
				ПроверитьНаДублиТО(НоваяСтрока);
			КонецЦикла;
		ИначеЕсли ЗначенияЗаполнения.Применить Тогда
			НоваяСтрока =  Элементы.НормативыОбслуживания.ТекущиеДанные;
			
			НоваяСтрока.ВидОбслуживания            = ЗначенияЗаполнения.ВидОбслуживания; 
			НоваяСтрока.ПериодичностьОбслуживания  = ЗначенияЗаполнения.ПериодичностьОбслуживания; 
			НоваяСтрока.КоличествоПериодов         = ЗначенияЗаполнения.КоличествоПериодов; 
			НоваяСтрока.ПараметрВыработки          = ЗначенияЗаполнения.ПараметрВыработки;
			НоваяСтрока.ЗначениеПараметраВыработки = ЗначенияЗаполнения.ЗначениеПараметраВыработки; 
			НоваяСтрока.Допуск                     = ЗначенияЗаполнения.Допуск;
			НоваяСтрока.ДопускПерОбслуживания      = ЗначенияЗаполнения.ДопускПерОбслуживания;
			НоваяСтрока.СписокРабот                = ЗначенияЗаполнения.СписокРабот;
			НоваяСтрока.СписокЗапчастей            = ЗначенияЗаполнения.СписокЗапчастей;
			НоваяСтрока.ПланированиеТО             = ЗначенияЗаполнения.ПланированиеТО;
			
			ПроверитьНаДублиТО(НоваяСтрока);
		Конецесли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтруктуруТекущимиДанными()
	ЗначенияЗаполнения = Новый Структура;
	
	ТекущиеДаные = Элементы.НормативыОбслуживания.ТекущиеДанные;
	ЗначенияЗаполнения.Вставить("ВидОбслуживания",            ТекущиеДаные.ВидОбслуживания);
	ЗначенияЗаполнения.Вставить("ПериодичностьОбслуживания",  ТекущиеДаные.ПериодичностьОбслуживания);
	ЗначенияЗаполнения.Вставить("КоличествоПериодов",         ТекущиеДаные.КоличествоПериодов);
	ЗначенияЗаполнения.Вставить("ПараметрВыработки",          ТекущиеДаные.ПараметрВыработки);
	ЗначенияЗаполнения.Вставить("ЗначениеПараметраВыработки", ТекущиеДаные.ЗначениеПараметраВыработки);
	ЗначенияЗаполнения.Вставить("Допуск",                     ТекущиеДаные.Допуск);
	ЗначенияЗаполнения.Вставить("ДопускПерОбслуживания",      ТекущиеДаные.ДопускПерОбслуживания);
	ЗначенияЗаполнения.Вставить("ПланированиеТО",             ТекущиеДаные.ПланированиеТО);

	Возврат ЗначенияЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Функция ДопТопливоЭтоАналогОсновного(ОснТопливо, ДопТопливо)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатАналогиГСМ.Аналог КАК Аналог
	|ИЗ
	|	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
	|ГДЕ
	|	уатАналогиГСМ.ГСМ = &ГСМ
	|	И уатАналогиГСМ.Аналог = &Аналог");
	Запрос.УстановитьПараметр("ГСМ", ОснТопливо);
	Запрос.УстановитьПараметр("Аналог", ДопТопливо);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ОтобразитьНадписьДопТопливоАналог()
	Если ЗначениеЗаполнено(Объект.ОсновноеТопливо)
		И ЗначениеЗаполнено(Объект.ДополнительноеТопливо) Тогда
		Если Объект.ОсновноеТопливо = Объект.ДополнительноеТопливо Тогда
			Элементы.ДекорацияДопТопливоАналог.Заголовок = "Указанное дополнительное топливо совпадает с основным! Необходимо выбрать другой вид дополнительного топлива.";
			Элементы.ДекорацияДопТопливоАналог.Видимость = Истина;
		ИначеЕсли ДопТопливоЭтоАналогОсновного(Объект.ОсновноеТопливо, Объект.ДополнительноеТопливо) Тогда
			Элементы.ДекорацияДопТопливоАналог.Заголовок = "Указанное дополнительное топливо является аналогом основного топлива! Необходимо выбрать другой вид дополнительного топлива.";
			Элементы.ДекорацияДопТопливоАналог.Видимость = Истина;
		Иначе
			Элементы.ДекорацияДопТопливоАналог.Видимость = Ложь;
			Элементы.ДекорацияДопТопливоАналог.Заголовок = "";
		КонецЕсли;
	Иначе
		Элементы.ДекорацияДопТопливоАналог.Видимость = Ложь;
		Элементы.ДекорацияДопТопливоАналог.Заголовок = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоТипуТС()
	
	ТекстНСТР = НСтр("en='Refill attributes corresponding to type of vehicle?';ru='Перезаполнить реквизиты, соответствующие типу ТС?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыТСПоТипуТСЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыТСПоТипуТСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Грузоподъемность",     Неопределено);
	СтруктураРеквизитов.Вставить("ОбъемКузова",          Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерДлина",  Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерВысота", Неопределено);
	СтруктураРеквизитов.Вставить("ПолезныйРазмерШирина", Неопределено);
	
	СтруктураЗначенияРекв = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(Объект.ТипТС, СтруктураРеквизитов);
	
	Если ТипЗнч(СтруктураЗначенияРекв) = Тип("Структура") Тогда 
		Для Каждого ТекРекв Из СтруктураЗначенияРекв Цикл
			Объект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	Иначе
		Для Каждого ТекРекв Из СтруктураРеквизитов Цикл
			Объект[ТекРекв.Ключ] = ТекРекв.Значение;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСервиснуюКнижкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьСервиснуюКнижкуСервер(Результат);
	
	ТекстНСТР = НСтр("ru='Копирование сервисной книжки завершено'");
	ПоказатьОповещениеПользователя(ТекстНСТР);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСервиснуюКнижкуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если Записать() Тогда 
				
				Если Объект.НормативыОбслуживания.Количество() > 0 Тогда
					ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
					ПоказатьВопрос(Новый ОписаниеОповещения("КопироватьСервиснуюКнижкуОчистка", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
					Возврат;
				КонецЕсли;
				
				Обработчик = Новый ОписаниеОповещения("КопироватьСервиснуюКнижкуЗавершение", ЭтотОбъект);
				ОткрытьФорму("Справочник.уатМоделиТС.ФормаВыбора",, ЭтотОбъект,,,,Обработчик);
			КонецЕсли;
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСервиснуюКнижкуОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НормативыОбслуживания.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("КопироватьСервиснуюКнижкуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатМоделиТС.ФормаВыбора",, ЭтотОбъект,,,,Обработчик);

	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСервиснуюКнижкуПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Истина;
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСервиснуюКнижкуСервер(МодельТСДляКопирования)
	
	НаборЗаписей = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МодельТС.Установить(МодельТСДляКопирования);
	НаборЗаписей.Прочитать();
	
	НаборЗаписейТекущая = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
	НаборЗаписейТекущая.Отбор.МодельТС.Установить(Объект.Ссылка);
	НаборЗаписейТекущая.Записать();
	
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		НовЗапись = НаборЗаписейТекущая.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, ТекЗапись);
		НовЗапись.МодельТС = Объект.Ссылка;
	КонецЦикла;
	
	НаборЗаписейТекущая.Записать(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Модель", МодельТСДляКопирования);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатМоделиТСНормативыОбслуживания.Ссылка КАК Ссылка,
	               |	уатМоделиТСНормативыОбслуживания.Валюта КАК Валюта,
	               |	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	               |	уатМоделиТСНормативыОбслуживания.Допуск КАК Допуск,
	               |	уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки КАК ЗначениеПараметраВыработки,
	               |	уатМоделиТСНормативыОбслуживания.Количество КАК Количество,
	               |	уатМоделиТСНормативыОбслуживания.КоличествоПериодов КАК КоличествоПериодов,
	               |	уатМоделиТСНормативыОбслуживания.ПараметрВыработки КАК ПараметрВыработки,
	               |	уатМоделиТСНормативыОбслуживания.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	               |	уатМоделиТСНормативыОбслуживания.ДопускПерОбслуживания КАК ДопускПерОбслуживания,
	               |	уатМоделиТСНормативыОбслуживания.Плановый КАК Плановый,
	               |	уатМоделиТСНормативыОбслуживания.Стоимость КАК Стоимость,
	               |	уатМоделиТСНормативыОбслуживания.ПланированиеТО КАК ПланированиеТО,
	               |	уатМоделиТСНормативыОбслуживания.СписокРабот КАК СписокРабот,
	               |	уатМоделиТСНормативыОбслуживания.СписокЗапчастей КАК СписокЗапчастей
	               |ИЗ
	               |	Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	               |ГДЕ
	               |	уатМоделиТСНормативыОбслуживания.Ссылка = &Модель";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.НормативыОбслуживания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

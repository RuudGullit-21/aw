
#Область Переменные_Формы

&НаКлиенте
Перем ФормаДлительнойОперации;
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперации;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизатор;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Сброс размеров и положения окна этой формы.
	СброситьРазмерыИПоложениеОкна();

	Высота = 35;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаМаршрутизации = ТекущаяДата();
		Объект.Наименование      = Объект.ДатаМаршрутизации;
	КонецЕсли;
	
	Элементы.НастройкаУказыватьНаименованиеЭтапаВручную.Видимость = Ложь;
	Если Параметры.Свойство("Маршрутизация") Тогда
		Если Параметры.Свойство("ДатаМаршрутизацииЭтапа") Тогда
			Объект.ДатаМаршрутизации = Параметры.ДатаМаршрутизацииЭтапа;
		КонецЕсли;
		Если Параметры.Свойство("НаименованиеЭтапа") Тогда
			Объект.Наименование = Параметры.НаименованиеЭтапа;
		КонецЕсли;
		Если Параметры.Свойство("РодительЭтапа") Тогда
			Объект.Родитель = Параметры.РодительЭтапа;
		КонецЕсли;
		
		НастройкаУказыватьНаименованиеЭтапаВручную = Истина;
		
		ЭтоМаршрутизация = Истина;
		Элементы.ФормаКоманднаяПанель.Видимость							 = Ложь;
		Элементы.НастройкаУказыватьНаименованиеЭтапаВручную.Видимость	 = Истина;
		Элементы.ГруппаКоманднаяПанельМаршрутизация.Видимость			 = Истина;
		Элементы.ФормаОК.КнопкаПоУмолчанию								 = Истина;
		Элементы.ВариантНастроек.Видимость								 = Ложь;
		Элементы.ВремяВыполненияМаршрутизации.Видимость					 = Ложь;
		Элементы.Код.Видимость											 = Ложь;
		Элементы.ГруппаАлгоритм.Видимость								 = Ложь;
		АвтоЗаголовок = Ложь;
		Высота = 10;
		Заголовок = Нстр("ru = 'Введите наименование этапа'");
		Элементы.ГруппаРезультаты.Видимость = Ложь;
	Иначе
		СводнаяИнформацияHTML = ПолучитьТекстСводнаяИнформацияHTML();
		ВремяВыполненияМаршрутизацииДата		 = '00010101'+Объект.ВремяВыполненияМаршрутизации;
		Если НЕ ЗначениеЗаполнено(Объект.АлгоритмМаршрутизации) 
			И ЗначениеЗаполнено(Объект.НастройкиМаршрутизации) Тогда
			Попытка
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Объект.НастройкиМаршрутизации);
				Структура = ПрочитатьJSON(ЧтениеJSON);
				Если Структура.Свойство("НастройкаАлгоритмМаршрутизации") Тогда
					Объект.АлгоритмМаршрутизации = Структура.НастройкаАлгоритмМаршрутизации;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Элементы.ИдентификаторЗадачи.Видимость			 = Объект.АлгоритмМаршрутизации = 3 Или Объект.АлгоритмМаршрутизации = 4;
		Элементы.ГруппаИдентификаторЗадачи.Видимость	 = Объект.АлгоритмМаршрутизации = 3;
		Элементы.ДекорацияИдентификаторЗадачиОткрытьВБраузере.Заголовок = Новый ФорматированнаяСтрока( 
			Новый ФорматированнаяСтрока(НСтр("ru='Открыть в браузере'"),,,, "https://courier.yandex.ru/mvrp-map#" + Объект.ИдентификаторЗадачи));

		Элементы.СтраницаМетрики.Видимость		 = Объект.АлгоритмМаршрутизации = 3 ИЛИ Объект.АлгоритмМаршрутизации = 4;
		Элементы.СтраницаОтвет.Видимость		 = Объект.АлгоритмМаршрутизации = 3;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если ЭтоМаршрутизация Тогда
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	Если ЭтоМаршрутизация Тогда
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаМаршрутизацииПриИзменении(Элемент)
	Если ЭтоМаршрутизация Тогда
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	Закрыть(Новый Структура("Наименование, Родитель, ДатаМаршрутизации, НастройкаУказыватьНаименованиеЭтапаВручную",
	Объект.Наименование, Объект.Родитель, Объект.ДатаМаршрутизации, НастройкаУказыватьНаименованиеЭтапаВручную));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМетрики(Команда)
	
	мТСДляМаршрутизации				 = Новый Массив();
	мЗаказов						 = Новый Массив();
	СтрукутураНастроекМаршрутизации	 = ПолучитьНастройкиМаршрутизации(Объект.НастройкиМаршрутизации);

	флОшибка = Ложь;
	ПодготовитьДанныеДляМаршрутизации(мТСДляМаршрутизации, мЗаказов, Объект.Ссылка, Объект.АдресВыезда, флОшибка);
	
	Если флОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ВнешняяМаршрутизация(мТСДляМаршрутизации, мЗаказов, СтрукутураНастроекМаршрутизации);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьТекстСводнаяИнформацияHTML()
	
	мТекстНСТР = Новый Массив();
	мТекстНСТР.Добавить(НСтр("en='Vehicles';ru='Выделено'"));
	мТекстНСТР.Добавить(НСтр("en='Orders:';ru='Заказы:'"));
	мТекстНСТР.Добавить(НСтр("en='Weight';ru='Вес'"));
	мТекстНСТР.Добавить(НСтр("en='Volume';ru='Объем'"));
	мТекстНСТР.Добавить(НСтр("en='Distributed';ru='Распределено'"));
	мТекстНСТР.Добавить(НСтр("en='Vehicles involved:';ru='Задействовано ТС:'"));
	мТекстНСТР.Добавить(НСтр("en='Routing lists:';ru='Маршрутных листов:'"));
	мТекстНСТР.Добавить(НСтр("en='Orders:';ru='Заказов:'"));
	мТекстНСТР.Добавить(НСтр("en='Points (load/unload)';ru='Пунктов (погр./разгр.):'"));
	мТекстНСТР.Добавить(НСтр("en='Time in transit (mm:hh):';ru='Время в пути, чч:мм:'"));
	мТекстНСТР.Добавить(НСтр("en='Time of parking (mm:hh):';ru='Время стоянок, чч:мм:'"));
	мТекстНСТР.Добавить(НСтр("en='Waiting time (mm:hh):';ru='Время ожидания, чч:мм:'"));
	мТекстНСТР.Добавить(НСтр("en='Common time (mm:hh):';ru='Общее время, чч:мм:'"));
	мТекстНСТР.Добавить(НСтр("en='Distance (km):';ru='Расстояние, км:'"));
	
	Рез = "<!DOCTYPE html>
	|<html lang=""en"">
	|<head>
	|	<meta charset=""UTF-8"">
	|	<title>Таблицы</title>
	|	<style>
	|	*{
	|	margin: 0;
	|	padding: 0;
	|	}
	|		.table-1c{
	|			border: 1px solid #a0a0a0;
	|			border-collapse: collapse;
	|			font-size: 12px;
	|			font-family: arial;
	|			width: 680px;
	|		}
	|		.table-1c td{
	|			border-bottom: 1px solid #e6e6e6;
	|			padding: 4px 8px;
	|			color: #333;
	|		}
	|		.table-1c tr:last-child td{border-bottom: 0;}
	|		.table-1c th{
	|			border-bottom: 1px solid #ccc;
	|			background: #f2f2f2;
	|			text-align: left;
	|			color: #4d4d4d;
	|			font-weight: normal;
	|		}
	|		.table-1c th.head{
	|			border-top: 1px solid #ccc;
	|		}
	|		.table-1c th .br-write{
	|			height: 100%;
	|			border: 1px solid #fff;
	|			padding: 5px 6px;
	|		}
	|		.table-1c.table-yat{width: 100%; border: 0;}
	|		.table-1c.table-yat td{
	|			border-bottom: 0;
	|			padding: 9px 10px 11px;
	|		}
	|		.table-1c.table-yat td .col-order, .table-1c.table-yat td .col-transport{
	|			display: inline-block;
	|		}
	|		.table-1c.table-yat td .col-order{width: 150px;}
	|		.table-1c.table-yat th .br-write{padding: 6px 10px;}
	|		.table-1c.table-yat td .col-transport{width: 150px;}
	|		.wrap-col{font-size: 12px;
	|				line-height: 14px;
	|				padding: 3px 0 3px;}
	|		.table-1c.table-yat td .col-headt{width: 230px;}
	|		.color-orange{color:#C60;}
	|	</style>
	|</head>
	|<body>
	|	<table class=""table-1c table-yat"">
	|		<tr>
	|			<th><div class=""br-write"">" + мТекстНСТР[0] + "</div></th>
	|		</tr>
	|		<tr>
	|			<td>
	|				<div class=""wrap-col""><span class=""col-order"">" + мТекстНСТР[1] + "</span> <strong>" + Объект.КоличествоЗаказовВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-order"">" + мТекстНСТР[2] + ", " + уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса()+":"+"</span> <strong>" + Объект.ВесЗаказовВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-order"">" + мТекстНСТР[3] + ", " + уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема()+":"+"</span> <strong>" + Объект.ОбъемЗаказовВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-order"">" + Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование + ":</span> <strong>" + Объект.КоличествоМестЗаказовВыделено +"</strong></div>
	|			</td>
	|		</tr>
	|		<tr>
	|			<th class=""head""><div class=""br-write"">" + мТекстНСТР[4] + "</div></th>
	|		</tr>
	|		<tr>
	|			<td>
	|				<div class=""wrap-col""><span class=""col-transport"">" + мТекстНСТР[5] + "</span> <strong>" + Объект.ЗадействованоТСВыделено +"</strong> / " + Объект.ЗадействованоТСВсего +"</div>
	|				<div class=""wrap-col""><span class=""col-transport"">" + мТекстНСТР[6] + "</span> <strong>" + Объект.МаршрутныхЛистовВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">" + мТекстНСТР[7] + "</span> <strong>" + Объект.ЗаказовВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">" + мТекстНСТР[8] + "</span> <strong>" + Объект.КоличествоПунктовПогрузки +"</strong> / <strong>" + Объект.КоличествоПунктовПогрузки +"</strong> </div>
	|				<div class=""wrap-col""><span class=""col-transport"">" + мТекстНСТР[2] + ", " + уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса()+":" + "</span> <strong>" + Объект.ВесВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">" + мТекстНСТР[3] + ", "+уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема()+":"+"</span> <strong>" + Объект.ОбъемВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">" + Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование + ":</span> <strong>" + Объект.КоличествоМестВыделено +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">"+ мТекстНСТР[9] + "</span> <strong>" + Формат(Объект.ВремяВПути, "ЧДЦ=2; ЧРД=:; ЧН=") +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">"+ мТекстНСТР[10] + "</span> <strong>" + Формат(Объект.ВремяСтоянок, "ЧДЦ=2; ЧРД=:; ЧН=") +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">"+ мТекстНСТР[11] + "</span> <strong>" + Формат(Объект.ВремяОжидания, "ЧДЦ=2; ЧРД=:; ЧН=") +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">"+ мТекстНСТР[12] + "</span> <strong>" + Формат(Объект.ВремяВсего, "ЧДЦ=2; ЧРД=:; ЧН=") +"</strong></div>
	|				<div class=""wrap-col""><span class=""col-transport"">"+ мТекстНСТР[13] + "</span> <strong>" + Объект.РасстояниеВсего +"</strong></div>
	|			</td>
	|		</tr>
	|	</table>
	|	
	|</body>
	|</html>";
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("Справочник.уатЭтапыМаршрутизации.Форма.ФормаЭлемента/Такси/НастройкиОкна", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьДанныеДляМаршрутизации(мТСДляМаршрутизации, мЗаказов, ЭтапМаршрутизации, АдресВыезда, флОшибка)
	
	мМЛДляМаршрутизации	 = ПодготовитьМассивМЛДляМаршрутизации(ЭтапМаршрутизации);
	мТСДляМаршрутизации	 = ПодготовитьМассивТСДляМаршрутизации(мМЛДляМаршрутизации);
	мЗаказов			 = ПодготовитьМассивЗаказовДляМаршрутизации(мТСДляМаршрутизации, АдресВыезда);
	Если мЗаказов.Количество() = 0 Тогда
		флОшибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьМассивТСДляМаршрутизации(мМЛДляМаршрутизации)
	
	мТСДляМаршрутизации = Новый Массив();
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфГрузоподъемности = 1000;
	Иначе 
		КоэфГрузоподъемности = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъемаКузова = 1000;
	Иначе 
		КоэфОбъемаКузова = 1;
	КонецЕсли;
	
	Для Каждого ТекТС Из мМЛДляМаршрутизации Цикл
		СтруктураСтрокиТС = Новый Структура(
		"ТСПредставление,ТС,ИндексСтрокиТС,Гараж,ГаражЛат,ГаражЛон,СобственныйВес,ЭтоВиртуальноеТС,
		|КоличествоВиртуальныхТС,МаксимальноеКоличествоУпаковок,МинимальныйВесГруза,
		|МинимальныйОбъемГруза,МинимальноеКоличествоУпаковок,ОбъемКузова,ДатаВыездаТС,Грузоподъемность,GUID, МЛ"
		);
		
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиТС, ТекТС);

		СтруктураСтрокиТС.Грузоподъемность = ТекТС.ТСМодельГрузоподъемность * КоэфГрузоподъемности;
		СтруктураСтрокиТС.ОбъемКузова      = ТекТС.ТСМодельОбъемКузова * КоэфОбъемаКузова;
		СтруктураСтрокиТС.СобственныйВес   = ТекТС.ТСМодельСобственныйВес * КоэфГрузоподъемности;
		СтруктураСтрокиТС.ИндексСтрокиТС   = ТекТС.ИндексСтроки;
		СтруктураСтрокиТС.ЭтоВиртуальноеТС = ТекТС.ТСПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное;
		
		СтруктураСтрокиТС.МинимальныйВесГруза            = ТекТС.ТСМодельМинимальныйВесГруза * КоэфГрузоподъемности;
		СтруктураСтрокиТС.МинимальныйОбъемГруза          = ТекТС.ТСМодельМинимальныйОбъемГруза * КоэфОбъемаКузова;
		СтруктураСтрокиТС.МинимальноеКоличествоУпаковок  = ТекТС.ТСМодельМинимальноеКоличествоУпаковок;
		СтруктураСтрокиТС.МаксимальноеКоличествоУпаковок = ТекТС.ТСМодельМаксимальноеКоличествоУпаковок;
		СтруктураСтрокиТС.КоличествоВиртуальныхТС        = 1;
		СтруктураСтрокиТС.GUID                           = ?(ЗначениеЗаполнено(ТекТС.ТС.ГосударственныйНомер), ТекТС.ТС.ГосударственныйНомер, ТекТС.ТС.Наименование) + "уатМЛ#" + Строка(ТекТС.МЛ.УникальныйИдентификатор());
		СтруктураСтрокиТС.МЛ                             = ТекТС.МЛ;
		СтруктураСтрокиТС.Вставить("Прицепы", Новый Массив());
		
		СтруктураСтрокиТС.Вставить("Характеристики", Новый Массив());
		
		мТСДляМаршрутизации.Добавить(СтруктураСтрокиТС);
	КонецЦикла;
	
	Возврат мТСДляМаршрутизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьМассивМЛДляМаршрутизации(ЭтапМаршрутизации)
	
	// Найдем все МЛ привязанные к этапу
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЭтапМаршрутизации", ЭтапМаршрутизации);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМаршрутныйЛист.Ссылка КАК МЛ,
	               |	уатМаршрутныйЛист.ТС КАК ТС,
	               |	уатМаршрутныйЛист.ТС.Представление КАК ТСПредставление,
	               |	уатМаршрутныйЛист.ТС.ПринадлежностьТС КАК ТСПринадлежностьТС,
	               |	уатМаршрутныйЛист.ТС.Модель.СобственныйВес КАК ТСМодельСобственныйВес,
	               |	уатМаршрутныйЛист.ТС.Модель.ОбъемКузова КАК ТСМодельОбъемКузова,
	               |	уатМаршрутныйЛист.ТС.Модель.Грузоподъемность КАК ТСМодельГрузоподъемность,
	               |	уатМаршрутныйЛист.ТС.Модель.МинимальныйВесГруза КАК ТСМодельМинимальныйВесГруза,
	               |	уатМаршрутныйЛист.ТС.Модель.МинимальныйОбъемГруза КАК ТСМодельМинимальныйОбъемГруза,
	               |	уатМаршрутныйЛист.ТС.Модель.МинимальноеКоличествоУпаковок КАК ТСМодельМинимальноеКоличествоУпаковок,
	               |	уатМаршрутныйЛист.ТС.Модель.МаксимальноеКоличествоУпаковок КАК ТСМодельМаксимальноеКоличествоУпаковок,
	               |	уатМаршрутныйЛист.АдресОтправления КАК Гараж,
	               |	уатМаршрутныйЛист.АдресОтправления.Лат КАК ГаражЛат,
	               |	уатМаршрутныйЛист.АдресОтправления.Лон КАК ГаражЛон
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	уатМаршрутныйЛист.ЭтапМаршрутизации = &ЭтапМаршрутизации
	               |	И НЕ уатМаршрутныйЛист.ПометкаУдаления";
	
	Выборка					 = Запрос.Выполнить().Выбрать();
	мсвМЛ					 = Новый Массив();
	СчДобавленныхОбъектов	 = 0;
	Пока Выборка.Следующий() Цикл
		СтруктураСтрокиМЛ = Новый Структура("ИндексСтроки, МЛ, ТС, ТСПредставление,ТСПринадлежностьТС,ТСМодельСобственныйВес,
		|ТСМодельОбъемКузова,ТСМодельМинимальныйВесГруза,ТСМодельМинимальныйОбъемГруза,ТСМодельГрузоподъемность, ТСМодельМинимальноеКоличествоУпаковок,
		|ТСМодельМаксимальноеКоличествоУпаковок, Гараж, ГаражЛат, ГаражЛон");
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиМЛ, Выборка);
		СтруктураСтрокиМЛ.ИндексСтроки = СчДобавленныхОбъектов;
		мсвМЛ.Добавить(СтруктураСтрокиМЛ);
		
		СчДобавленныхОбъектов = СчДобавленныхОбъектов + 1;
	КонецЦикла;
	
	Возврат мсвМЛ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьМассивЗаказовДляМаршрутизации(мТСДляМаршрутизации, АдресВыезда)
	
	мЗаказов = Новый Массив();
	СтоянкаПунктОтправления = 0;
	флагАдресВыезда = Истина;
	Для Каждого ТекСтрокаТС Из мТСДляМаршрутизации Цикл
		флагАдресВыезда = Истина;
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаТС.МЛ.Заказы Цикл
			Если флагАдресВыезда И АдресВыезда = ТекСтрокаЗаказ.Пункт Тогда
				СтоянкаПунктОтправления = ТекСтрокаЗаказ.Стоянка;
				ЗаказОтправления        = ТекСтрокаЗаказ.ЗаказГрузоотправителя;
				НоменклатураОтправления = ТекСтрокаЗаказ.Номенклатура;
				Продолжить;
			КонецЕсли;
			Если АдресВыезда <> ТекСтрокаЗаказ.Пункт Тогда
				флагАдресВыезда = Ложь;
			КонецЕсли;
			
			Если ЗаказОтправления = ТекСтрокаЗаказ.ЗаказГрузоотправителя
				И НоменклатураОтправления =  ТекСтрокаЗаказ.Номенклатура Тогда
				СтоянкаПунктОтправленияТекущая = СтоянкаПунктОтправления;
				СтоянкаПунктОтправления        = 0;
			Иначе
				СтоянкаПунктОтправленияТекущая = 0;
			КонецЕсли;
			
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("МЛ",         ТекСтрокаТС.МЛ);
			ДанныеГруза.Вставить("ТС",         ТекСтрокаТС.ТС);
			ДатаПосещения = ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.ПрибытиеФакт),ТекСтрокаЗаказ.ПрибытиеФакт, ТекСтрокаЗаказ.ПрибытиеПлан);
			ДанныеГруза.Вставить("ДатаПосещения",              ДатаПосещения);
			ДанныеГруза.Вставить("СтрокаПакета",               ТекСтрокаЗаказ.НомерСтроки);
			ДанныеГруза.Вставить("GUID",                       ТекСтрокаЗаказ.GUIDСтроки);
			ДанныеГруза.Вставить("Заказ",                      ТекСтрокаЗаказ.ЗаказГрузоотправителя);
			ДанныеГруза.Вставить("Груз",                       ТекСтрокаЗаказ.Номенклатура);
			ДанныеГруза.Вставить("Количество",                 ТекСтрокаЗаказ.Количество);
			ДанныеГруза.Вставить("ВесБрутто",                  ТекСтрокаЗаказ.ВесБрутто + ТекСтрокаЗаказ.ВесТары);
			ДанныеГруза.Вставить("Объем",                      ТекСтрокаЗаказ.Объем);
			ДанныеГруза.Вставить("КоличествоУпаковок",         ТекСтрокаЗаказ.КоличествоМест);
			ДоставкаС  = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаС - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаС));
			ДоставкаПо = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаПо - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаПо));
			ОтправлениеС  = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС));
			ОтправлениеПо = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеПо - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеПо));
			ДанныеГруза.Вставить("ОтправлениеС",               ОтправлениеС);
			ДанныеГруза.Вставить("ОтправлениеПо",              ОтправлениеПо);
			ДанныеГруза.Вставить("ДоставкаС",                  ДоставкаС);
			ДанныеГруза.Вставить("ДоставкаПо",                 ДоставкаПо);
			ДанныеГруза.Вставить("ОтправлениеСДата",           Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС));
			ДанныеГруза.Вставить("ОтправлениеПоДата",          Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеПо));
			ДанныеГруза.Вставить("ДоставкаСДата",              Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаС));
			ДанныеГруза.Вставить("ДоставкаПоДата",             Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаПо));
			ДанныеГруза.Вставить("ОтправлениеСДата",           Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС));
			ДанныеГруза.Вставить("СтоянкаПунктНазначения",     ТекСтрокаЗаказ.Стоянка);
			ДанныеГруза.Вставить("СтоянкаПунктОтправления",    СтоянкаПунктОтправленияТекущая);
			ДанныеГруза.Вставить("ДопСтоянкаПунктНазначения",  ТекСтрокаЗаказ.СтоянкаИзПункта);
			ДанныеГруза.Вставить("АдресНазначения",            ТекСтрокаЗаказ.Пункт);
			ДанныеГруза.Вставить("АдресОтправления",           ТекСтрокаЗаказ.ЗаказГрузоотправителя.АдресОтправления);
			ДанныеГруза.Вставить("ЛатНазн",                    ТекСтрокаЗаказ.Пункт.Лат);
			ДанныеГруза.Вставить("ЛонНазн",                    ТекСтрокаЗаказ.Пункт.Лон);
			
			Если НЕ ЗначениеЗаполнено(ДанныеГруза.АдресОтправления) Тогда
				Продолжить;
			Иначе
				ДанныеГруза.Вставить("ЛатОтпр",                    ДанныеГруза.АдресОтправления.Лат);
				ДанныеГруза.Вставить("ЛонОтпр",                    ДанныеГруза.АдресОтправления.Лон);
			КонецЕсли;
			ДанныеГруза.Вставить("Высота",                     0);
			ДанныеГруза.Вставить("Длина",                      0);
			ДанныеГруза.Вставить("Ширина",                     0); 
			ДанныеГруза.Вставить("Приоритет",                  ТекСтрокаЗаказ.ЗаказГрузоотправителя.Приоритет);
			ДанныеГруза.Вставить("ДопСтоянкаПунктОтправления", ТекСтрокаЗаказ.СтоянкаИзПункта);
			ДанныеГруза.Вставить("id",                         0);
			мЗаказов.Добавить(ДанныеГруза);
		КонецЦикла;
	КонецЦикла;
	
	Возврат мЗаказов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиМаршрутизации(НастройкиМаршрутизации)
	
	СтруктураНастроек = Новый Структура(уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
	СтруктураНастроек.Вставить("ДатаПланирования",                         ТекущаяДата());
	СтруктураНастроек.НастройкаАлгоритмМаршрутизации                       = 0;
	СтруктураНастроек.НастройкаРежимОптимизации                            = 0;
	СтруктураНастроек.НастройкаМаршрутизацияВФоновомРежиме                 = Ложь;
	СтруктураНастроек.НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации      = Ложь;
	СтруктураНастроек.НастройкаУчитыватьСекцииТранспортныхСредств          = Ложь;
	СтруктураНастроек.НастройкаСмешиватьГрузыВСекциях                      = Ложь;
	СтруктураНастроек.НастройкаВремяВыездаИзГаража                         = 0;
	СтруктураНастроек.НастройкаВремяВыездаТранспортныхСредств              = '00010101000000';
	СтруктураНастроек.НастройкаВремяВозвратаТранспортныхСредств            = '00010101000000';
	СтруктураНастроек.НастройкаСжиматьЗаказы                               = Ложь;
	СтруктураНастроек.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу   = 0;
	СтруктураНастроек.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 0;
	СтруктураНастроек.НастройкаИспользоватьВПриоритетеСобственныйТранспорт = 0;
	СтруктураНастроек.НастройкаЧасовойПояс                                 = 0;
	СтруктураНастроек.НастройкаВозвратВГаражСобственныеТС                  = Ложь;
	СтруктураНастроек.НастройкаВозвратВГаражПривлеченныеТС                 = Ложь;
	СтруктураНастроек.НастройкаВозвратВГаражВиртуальныеТС                  = Ложь;
	СтруктураНастроек.НастройкиВнешнийМаршрутизатор                        = "";
	СтруктураНастроек.НастройкаИспользоватьХарактеристикиЗаказовНаТС       = 0;
	СтруктураНастроек.НастройкаУчитыватьГруппыСовместимости                = 0;
	СтруктураНастроек.НастройкаМаксимальноеЧислоЗаказовМаршрута            = 0;
	СтруктураНастроек.НастройкаМаксимальноеЧислоЗаказовМаршрута            = 0;
	СтруктураНастроек.НастройкаКларкРайтРежимДоставки                      = 0;
	СтруктураНастроек.НастройкаДействиеСПросроченнымиЗаказами              = 0;
	СтруктураНастроек.НастройкаГруппироватьПунктыВОднуМашину               = Ложь;
	СтруктураНастроек.НастройкаУчетЖесткихГабаритовГруза                   = Ложь;
	СтруктураНастроек.НастройкаЗаездНаСкладСобственныеТС                   = Ложь;
	СтруктураНастроек.НастройкаЗаездНаСкладПривлеченныеТС                  = Ложь;
	СтруктураНастроек.НастройкаЗаездНаСкладВиртуальныеТС                   = Ложь;
	СтруктураНастроек.НастройкаВыездСоСкладаСобственныеТС                  = Истина;
	СтруктураНастроек.НастройкаВыездСоСкладаПривлеченныеТС                 = Истина;
	СтруктураНастроек.НастройкаВыездСоСкладаВиртуальныеТС                  = Истина;
	СтруктураНастроек.НастройкаВыездИзГаражаСобственныеТС                  = Ложь;
	СтруктураНастроек.НастройкаВыездИзГаражаПривлеченныеТС                 = Ложь;
	СтруктураНастроек.НастройкаВыездИзГаражаВиртуальныеТС                  = Ложь;
	СтруктураНастроек.НастройкаВозвратВГаражСобственныеТС                  = Ложь;
	СтруктураНастроек.НастройкаВозвратВГаражПривлеченныеТС                 = Ложь;
	СтруктураНастроек.НастройкаВозвратВГаражВиртуальныеТС                  = Ложь;
	СтруктураНастроек.НастройкаУчитыватьГруппыСовместимости                = Ложь;

	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(НастройкиМаршрутизации);
	
	Попытка
		СтруктураНастроекJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Возврат СтруктураНастроек;
	КонецПопытки;
	
	Если ТипЗнч(СтруктураНастроекJSON) <> Тип("Структура") Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	Для Каждого ЭлементНастроек из СтруктураНастроек Цикл 
		Если СтруктураНастроекJSON.Свойство(ЭлементНастроек.Ключ)
			И СтруктураНастроекJSON[ЭлементНастроек.Ключ] <> Неопределено Тогда
			СтруктураНастроек[ЭлементНастроек.Ключ] = СтруктураНастроекJSON[ЭлементНастроек.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Процедура ВнешняяМаршрутизация(мТСДляМаршрутизации, мЗаказов, СтрукутураНастроекМаршрутизации)
	
	ТекстОшибки = "";
	
	IDзадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуMVRP(
		СтрукутураНастроекМаршрутизации.ДатаПланирования,
		мТСДляМаршрутизации, 
		мЗаказов,
		СтрукутураНастроекМаршрутизации,
		ТекстОшибки
	);
	
	Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) Тогда 
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	УстановитьАдресХранилищаДляРезультатаМаршрутизации();
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивОшибок",        Новый Массив());
	ДопПараметры.Вставить("ОшибкаМаршрутизации", Ложь);
	ДопПараметры.Вставить("мсвЗаказов",          мЗаказов);
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки);
	Если ЗаданиеВыполнено Тогда
		Если ТекстОшибки = "" Тогда 
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал,
		|МаксимальныйИнтервал,
		|ТекущийИнтервал,
		|КоэффициентУвеличенияИнтервала", 
		1, 15, 1, 1.4);
	
	ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP", 1, Истина);
	
	ФормаДлительнойОперации = ОткрытьФорму(
		"ОбщаяФорма.уатДлительнаяОперация",
		,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект, ДопПараметры)
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьметрикиИзВременногоХранилища()
	
	Для Каждого ТекСтрока Из Объект.Метрики Цикл
		ТекСтрока.ЗначениеТекущее = 0;
	КонецЦикла;
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Если Результат.Свойство("ВнешняяМаршрутизация") Тогда 
		флВнешняяМаршрутизация = Истина;
	КонецЕсли;
	
	Если Результат.Свойство("Метрики") Тогда
		Если ТипЗнч(Результат.Метрики) = Тип("Массив") Тогда
			МетрикиВнешнейМаршрутизации = Результат.Метрики;
			ЕстьМетрики = МетрикиВнешнейМаршрутизации.Количество() > 0;
			Если ЕстьМетрики Тогда
				Метрики = МетрикиВнешнейМаршрутизации[0];
				Если Метрики.Свойство("ОбщиеМетрики") Тогда
					Для Каждого ТекСтрока Из Метрики.ОбщиеМетрики Цикл
						СтрокиМетрик = Объект.Метрики.НайтиСтроки(Новый Структура("GUIDТС, Свойство", "", ТекСтрока.Свойство));
						Если СтрокиМетрик.Количество() > 0 Тогда
							СтрокиМетрик[0].ЗначениеТекущее = ТекСтрока.Значение;
						Иначе 
							НоваяСтрока = Объект.Метрики.Добавить();
							НоваяСтрока.GUIDТС          = "";
							НоваяСтрока.Свойство        = ТекСтрока.Свойство;
							НоваяСтрока.ЗначениеТекущее = ТекСтрока.Значение;
							НоваяСтрока.Значение        = ТекСтрока.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекСтрока Из МетрикиВнешнейМаршрутизации Цикл
					Если ТекСтрока.Свойство("ТС") Тогда
						мИдентификаторов = СтрРазделить(ТекСтрока.ТС, "уатМЛ#", Ложь);
						стТС			 = "";
						стМЛ			 = "";
						МаршрутныйЛист	 = "";
						Если мИдентификаторов.Количество() = 2 Тогда
							стТС = мИдентификаторов[0];
							стМЛ = мИдентификаторов[1];
							
							Попытка
								МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(стМЛ));
								ТС = Справочники.уатТС.ПолучитьСсылку(Новый УникальныйИдентификатор(стТС));
							Исключение
							КонецПопытки;
						КонецЕсли;
						Для Каждого ТекМетрика Из ТекСтрока.Метрики Цикл
							СтрокиМетрик = Объект.Метрики.НайтиСтроки(Новый Структура("GUIDТС,МаршрутныйЛист, Свойство", стТС, МаршрутныйЛист, ТекМетрика.Свойство));
							Если СтрокиМетрик.Количество() > 0 Тогда
								СтрокиМетрик[0].ЗначениеТекущее = ТекМетрика.Значение;
							Иначе 
								НоваяСтрока = Объект.Метрики.Добавить();
								НоваяСтрока.GUIDТС          = стТС;
								НоваяСтрока.МаршрутныйЛист  = МаршрутныйЛист;
								НоваяСтрока.ТС              = ТС;
								НоваяСтрока.Свойство        = ТекМетрика.Свойство;
								НоваяСтрока.ЗначениеТекущее = ТекМетрика.Значение;
								НоваяСтрока.Значение        = ТекМетрика.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Объект.Метрики.Сортировать("ТС, Свойство");
КонецФункции

&НаКлиенте
Процедура ПриЗакрытииФормыДлительнойОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ОтменитьВыполнение")
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И Объект.АлгоритмМаршрутизации = 3 Тогда 
		Попытка
			ОтключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания");
		Исключение
		КонецПопытки;
		
		ОповещениеПослеДлительнойОперации = Неопределено;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизации()
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресВрХранилища, IDзадачи, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатMVRP(
		АдресВрХранилища,
		IDзадачи,
		ТекстОшибки
	);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		
		Если ТекстОшибки = "" Тогда 
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			ПолучитьметрикиИзВременногоХранилища();
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуMVRP(ДатаВыезда, мсвТС, мсвЗаказы, СтруктураНастроекАРМ, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуMVRP(
	ДатаВыезда,
	мсвТС,
	мсвЗаказы,
	СтруктураНастроекАРМ,
	ТекстОшибки,
	Истина
	);
	
КонецФункции // ВнешняяМаршрутизация_ДобавитьЗадачуMVRP()

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатСправочникФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ОснОрганизацияПользователя = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	ВидНачисленияПредыдущееЗначение = Объект.ВидНачисления;
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	ЗаполнитьПредставлениеТС();
	ЗаполнитьСписокВыбораВидНачисления();
	СложныйТарифПереключатель = ?(Объект.СложныйТариф, "Сложный тариф", "Простой тариф");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатСправочникФормаЭлементаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступныеГруппировки();
	УстановитьСписокТиповОбласти();
	ОбновитьФлагПострочныйРасчетПоЗаказамНаТС();
	УстановитьВидимость();
		
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЗаполнитьПредставлениеТС();
	ВидНачисленияПредыдущееЗначение = Объект.ВидНачисления;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьПредставлениеТС();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Записан параметр выработки" И Параметр = Объект.ПараметрВыработки Тогда
		ОбновитьФлагПострочныйРасчетПоЗаказамНаТС();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНачисленияПриИзменении(Элемент)
	СпособРасчетаОплатыТруда = ПолучитьСпособРасчетаОплатыТруда(Объект.ВидНачисления);
	
	Если СпособРасчетаОплатыТруда <> ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок")
		И СпособРасчетаОплатыТруда <> ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой") Тогда
		
		Если Объект.РасчетПоСтрокам Тогда
			Объект.РасчетПоСтрокам = Ложь;
		КонецЕсли;
		Если Объект.СложныйТариф Тогда
			Объект.СложныйТариф = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидНачисления = ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт") Тогда
		Объект.Применение = 2;
		Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяВРемонте");
		ОбновитьФлагПострочныйРасчетПоЗаказамНаТС();
	Иначе
		Если Объект.Применение = 2 Тогда
			Объект.Применение = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидНачисленияПредыдущееЗначение <> Объект.ВидНачисления Тогда
		ОчиститьСложныеТарифы();
	КонецЕсли;
	
	ВидНачисленияПредыдущееЗначение = Объект.ВидНачисления;
	УстановитьДоступныеГруппировки();
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиПриИзменении(Элемент)
	Если (НЕ ПараметрВыработкиПрименимДляПострочногоРасчета()) И Объект.РасчетПоСтрокам Тогда
		Объект.РасчетПоСтрокам = Ложь;
	КонецЕсли;
	
	УстановитьСписокТиповОбласти();
	ОбновитьФлагПострочныйРасчетПоЗаказамНаТС();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ОтборПараметраВыработки());
		
	ОткрытьФорму("Справочник.уатПараметрыВыработки.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор = ОтборПараметраВыработки();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВыработкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор = ОтборПараметраВыработки();
КонецПроцедуры

&НаКлиенте
Функция ОтборПараметраВыработки()
	Рез = Новый Структура;
	Если Объект.Применение = 1 Тогда
		Рез.Вставить("ДействуетНаСотрудниковМЛ", Истина);
	Иначе
		Рез.Вставить("ДействуетНаСотрудников", Истина);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СложныйТарифПриИзменении(Элемент)
	Объект.СложныйТариф = (СложныйТарифПереключатель = "Сложный тариф");
	
	Если Объект.СложныйТариф Тогда
		Объект.Тариф = 0;
	Иначе
		Объект.ГруппировкаТарифа1 = Неопределено;
		Объект.ГруппировкаТарифа2 = Неопределено;
		Объект.ГруппировкаТарифа3 = Неопределено;
		Объект.ТаблицаРасчета.Очистить();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетаПриИзменении(Элемент)
	Если Объект.Применение = 1 Тогда
		Объект.РасчетПоСтрокам = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораВидНачисления();
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоСтрокамПриИзменении(Элемент)
	УстановитьСписокТиповОбласти();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа1ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидНачисления <> ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт") Тогда
		ВыборГруппировкиТарифаОткрытьФорму(Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа2ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидНачисления <> ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт") Тогда
		ВыборГруппировкиТарифаОткрытьФорму(Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа3ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаТарифа3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидНачисления <> ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт") Тогда
		ВыборГруппировкиТарифаОткрытьФорму(Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОбластиДействияП

&НаКлиенте
Процедура ОбластиДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ОбластиДействия.ТекущиеДанные;
	УстановитьТипОбласти(ТекСтрока.ВидОбластиДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОбластиДействияВидОбластиДействияПриИзменении(Элемент)
	ТекСтрока = Элементы.ОбластиДействия.ТекущиеДанные;
	ТекСтрока.ЗначениеОбластиДействия = Неопределено;
	УстановитьТипОбласти(ТекСтрока.ВидОбластиДействия);
	ЗаполнитьПредставлениеТС();
КонецПроцедуры

&НаКлиенте
Процедура ОбластиДействияЗначениеОбластиДействияПриИзменении(Элемент)
	ЗаполнитьПредставлениеТС();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьСпособРасчетаОплатыТруда(ВидНачисления)
	Возврат ВидНачисления.СпособРасчетаОплатыТруда;
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеТС()
	Для Каждого ТекСтрока Из Объект.ОбластиДействия Цикл
		Если ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС.Тягач Тогда
			ПредставлениеТС_ = Строка(ТекСтрока.ЗначениеОбластиДействия);
		Иначе
			ПредставлениеТС_ = "";
		КонецЕсли;
		Если ТекСтрока.ПредставлениеТС <> ПредставлениеТС_ Тогда
			ТекСтрока.ПредставлениеТС = ПредставлениеТС_;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПараметрВыработкиПрименимДляПострочногоРасчета()
	мсвПараметровВыработки = Новый Массив;
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ВесГруза);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.Объем);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ВремяВРаботе);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.КоличествоЕздок);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.КоличествоОпераций);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.КоличествоПассажиров);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.Подача);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСГрузом);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегПорожний);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПростойПодПогрузкой);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ТнКм);
	мсвПараметровВыработки.Добавить(Справочники.уатПараметрыВыработки.ОбъемКм);
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПараметрыВыработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
		|ГДЕ
		|	НЕ уатПараметрыВыработки.ПометкаУдаления
		|	И НЕ уатПараметрыВыработки.Предопределенный
		|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = &СпособРасчетаПараметровВыработки");
		Запрос.УстановитьПараметр("СпособРасчетаПараметровВыработки", Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаданию);
		мсвДопПараметры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого ТекДопПараметр Из мсвДопПараметры Цикл
			мсвПараметровВыработки.Добавить(ТекДопПараметр);
		КонецЦикла;
	КонецЕсли;
		
	Возврат мсвПараметровВыработки.Найти(Объект.ПараметрВыработки) <> Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	СпособРасчетаОплатыТруда = ПолучитьСпособРасчетаОплатыТруда(Объект.ВидНачисления);
	ЭтоСдельныйЗаработок = (СпособРасчетаОплатыТруда = 
		ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок"));
	ЭтоФиксТариф = (СпособРасчетаОплатыТруда = 
		ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой"));
		
	Если СпособРасчетаОплатыТруда = 
			ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы")
		ИЛИ СпособРасчетаОплатыТруда = 
			ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений")
		ИЛИ СпособРасчетаОплатыТруда = 
			ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки")
		ИЛИ СпособРасчетаОплатыТруда = 
			ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные") Тогда
		Элементы.ДекорацияТариф.Заголовок = "%";
	Иначе
		Элементы.ДекорацияТариф.Заголовок = ВалютаУпр;
	КонецЕсли;
	
	Элементы.ГруппаТариф.Видимость = НЕ Объект.СложныйТариф;
	Элементы.ГруппаТаблицаРасчета.Видимость = Объект.СложныйТариф;
	
	Если Не Объект.СложныйТариф Тогда
		Если Объект.ТаблицаРасчета.Количество() > 0 Тогда
			Объект.ТаблицаРасчета.Очистить();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГруппировкаТарифа1) Тогда
			Объект.ГруппировкаТарифа1 = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГруппировкаТарифа2) Тогда
			Объект.ГруппировкаТарифа2 = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГруппировкаТарифа3) Тогда
			Объект.ГруппировкаТарифа3 = Неопределено;
		КонецЕсли;
	Иначе	
		Если Объект.Тариф <> 0 Тогда
			Объект.Тариф = 0;
		КонецЕсли;
		
		Элементы.ТаблицаРасчетаЗнакГруппировки1.Видимость	  = ЗначениеЗаполнено(Объект.ГруппировкаТарифа1);
		Элементы.ТаблицаРасчетаЗначениеГруппировки1.Видимость = Элементы.ТаблицаРасчетаЗнакГруппировки1.Видимость;
		Элементы.ТаблицаРасчетаЗначениеГруппировки1.Заголовок = Объект.ГруппировкаТарифа1;
		Элементы.ТаблицаРасчетаЗнакГруппировки2.Видимость	  = ЗначениеЗаполнено(Объект.ГруппировкаТарифа2);
		Элементы.ТаблицаРасчетаЗначениеГруппировки2.Видимость = Элементы.ТаблицаРасчетаЗнакГруппировки2.Видимость;
		Элементы.ТаблицаРасчетаЗначениеГруппировки2.Заголовок = Объект.ГруппировкаТарифа2;		
		Элементы.ТаблицаРасчетаЗнакГруппировки3.Видимость	  = ЗначениеЗаполнено(Объект.ГруппировкаТарифа3);
		Элементы.ТаблицаРасчетаЗначениеГруппировки3.Видимость = Элементы.ТаблицаРасчетаЗнакГруппировки3.Видимость;
		Элементы.ТаблицаРасчетаЗначениеГруппировки3.Заголовок = Объект.ГруппировкаТарифа3;		
		
		Элементы.ТаблицаРасчетаТариф.Видимость = ЗначениеЗаполнено(Объект.ВидНачисления);
		
		Если Элементы.ТаблицаРасчетаЗначениеГруппировки1.Видимость Тогда
			Если Объект.ГруппировкаТарифа1 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза") Тогда
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.Формат = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.ФорматРедактирования = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.МинимальноеЗначение = 0;
			Иначе
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.Формат = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.ФорматРедактирования = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки1.МинимальноеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.ТаблицаРасчетаЗначениеГруппировки2.Видимость Тогда
			Если Объект.ГруппировкаТарифа2 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза") Тогда
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.Формат = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.ФорматРедактирования = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.МинимальноеЗначение = 0;
			Иначе
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.Формат = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.ФорматРедактирования = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки2.МинимальноеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.ТаблицаРасчетаЗначениеГруппировки3.Видимость Тогда
			Если Объект.ГруппировкаТарифа3 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза") Тогда
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.Формат = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.ФорматРедактирования = "ЧДЦ = 1; ЧЦ = 2";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.МинимальноеЗначение = 0;
			Иначе
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.Формат = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.ФорматРедактирования = "ЧДЦ = 3; ЧЦ = 10";
				Элементы.ТаблицаРасчетаЗначениеГруппировки3.МинимальноеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СложныйТариф.Видимость		             = ЭтоСдельныйЗаработок ИЛИ ЭтоФиксТариф;
	Элементы.ПараметрВыработки.Видимость             = ЭтоСдельныйЗаработок;
	Элементы.РасчетПоСтрокам.Видимость	             = Объект.Применение <> 1 И (ЭтоСдельныйЗаработок
		И ПараметрВыработкиПрименимДляПострочногоРасчета() ИЛИ ЭтоФиксТариф);
	Элементы.ПострочныйРасчетПоЗаказамНаТС.Видимость = Объект.Применение = 1 И ЭтоСдельныйЗаработок;
	Элементы.ГруппаПодсказка.Видимость               = Объект.РасчетПоСтрокам
		ИЛИ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ПараметрВыработки, "СпособВводаЗначений")
		= ПредопределенноеЗначение("Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти");
	
	Если НЕ ЭтоСдельныйЗаработок Тогда
		Если НЕ ЭтоФиксТариф Тогда
			Объект.СложныйТариф = Ложь;
		КонецЕсли;
		
		Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПустаяСсылка");
		ОбновитьФлагПострочныйРасчетПоЗаказамНаТС();
	КонецЕсли;
	
	Если НЕ Элементы.РасчетПоСтрокам.Видимость Тогда
		Объект.РасчетПоСтрокам = Ложь;
	КонецЕсли;

	ЭтоОплатаЗаРемонт = (Объект.ВидНачисления = 
		ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт"));
	Элементы.ПараметрВыработки.ТолькоПросмотр = ЭтоОплатаЗаРемонт;
	
	Элементы.тПодсказкаРасчетПраздники.Видимость =
		(Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяРаботыВВыходныеДни")
		ИЛИ Объект.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяПраздничное"));
	Элементы.тПодсказкаРасчетДоплаты.Видимость = (Объект.ВидНачисления = 
		ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ДоплатаЗаПраздничныеИВыходные"));
	Элементы.ГруппаПодсказкаРасчет.Видимость = (Элементы.тПодсказкаРасчетПраздники.Видимость
		ИЛИ Элементы.тПодсказкаРасчетДоплаты.Видимость);
		
	Элементы.ИсточникВыручкиМЛ.Видимость = (Объект.Применение = 1) И (СпособРасчетаОплатыТруда = 
		ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки"))
		ИЛИ Объект.СложныйТариф
		И (Объект.ГруппировкаТарифа1 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Выручка")
		ИЛИ Объект.ГруппировкаТарифа2 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Выручка")
		ИЛИ Объект.ГруппировкаТарифа3 = ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Выручка"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипОбласти(ТипОбласти)
	флПрофКорп = НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	Если НЕ ЗначениеЗаполнено(ТипОбласти) Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Тягач") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.МодельТягача") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМоделиТС");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ТипТягача") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыТС");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Контрагент") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Подразделение") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Маршрут") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМаршруты");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ПунктОтправления")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ПунктНазначения") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.Номенклатура") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ВидРемонта") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыОбслуживанияТС");
	ИначеЕсли ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.КлассВодителя") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("Число");
	ИначеЕсли флПрофКорп И ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ОбъектСтроительства") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатОбъектыСтроительства");
	ИначеЕсли флПрофКорп И ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ВидПеревозки") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыПеревозок");
	ИначеЕсли флПрофКорп И ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.НаправлениеПеревозки") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатНаправленияПеревозок");
	ИначеЕсли флПрофКорп И (ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ГеозонаОтправления")
		ИЛИ ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ГеозонаНазначения")) Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатГеозоны_уэ");
	ИначеЕсли флПрофКорп И ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ГрузовоеМесто") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ");
	ИначеЕсли флПрофКорп И ТипОбласти = ПредопределенноеЗначение("Перечисление.уатВидыОбластейДействияТарифовТС.ВидГруза") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыГрузов");
	КонецЕсли;
	
	Элементы.ОбластиДействияЗначениеОбластиДействия.ОграничениеТипа = ТекОграничениеТипа;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокТиповОбласти()
	Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Очистить();
	
	СписокДоступныхВидовОбластиДействия = СписокДоступныхВидовОбластиДействия();
	Для Каждого ТекЭлем Из СписокДоступныхВидовОбластиДействия Цикл
		Элементы.ОбластиДействияВидОбластиДействия.СписокВыбора.Добавить(ТекЭлем.Значение, ТекЭлем.Представление);
	КонецЦикла;
	
	// Удаление строки области действия, если вид области не входит в список доступных видов
	// например, Контрагент не будет доступен, если снят флаг "Построчный расчет"
	СчОбласть = Объект.ОбластиДействия.Количество() - 1;
	Пока СчОбласть >= 0 Цикл
		ТекОбласть = Объект.ОбластиДействия[СчОбласть];
		Если СписокДоступныхВидовОбластиДействия.НайтиПоЗначению(ТекОбласть.ВидОбластиДействия) = Неопределено Тогда
			Объект.ОбластиДействия.Удалить(СчОбласть);
		КонецЕсли;
		СчОбласть = СчОбласть - 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СписокДоступныхВидовОбластиДействия()
	Возврат Справочники.уатТарифыЗП.СписокДоступныхВидовОбластиДействия(Объект.ВидНачисления, Объект.РасчетПоСтрокам,
		Объект.Применение);
КонецФункции

&НаКлиенте
Процедура УстановитьДоступныеГруппировки()
	
	флОплатаЗаРемонт = (Объект.ВидНачисления = ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт"));
	
	Элементы.ГруппировкаТарифа1.СписокВыбора.Очистить();
	Элементы.ГруппировкаТарифа2.СписокВыбора.Очистить();
	Элементы.ГруппировкаТарифа3.СписокВыбора.Очистить();
	Элементы.ГруппировкаТарифа1.КнопкаВыпадающегоСписка = флОплатаЗаРемонт;
	Элементы.ГруппировкаТарифа2.КнопкаВыпадающегоСписка = флОплатаЗаРемонт;
	Элементы.ГруппировкаТарифа3.КнопкаВыпадающегоСписка = флОплатаЗаРемонт;
	
	Если флОплатаЗаРемонт Тогда
		списГруппировки = Новый СписокЗначений;
		списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.ВремяРаботы"), "Время в ремонте");
		списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Грузоподъемность"));
		списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.ОбъемКузова"));
		Элементы.ГруппировкаТарифа1.РежимВыбораИзСписка = Истина;
		Элементы.ГруппировкаТарифа2.РежимВыбораИзСписка = Истина;
		Элементы.ГруппировкаТарифа3.РежимВыбораИзСписка = Истина;
		Для Каждого ТекГруп Из списГруппировки Цикл
			Элементы.ГруппировкаТарифа1.СписокВыбора.Добавить(ТекГруп.Значение, ТекГруп.Представление);
			Элементы.ГруппировкаТарифа2.СписокВыбора.Добавить(ТекГруп.Значение, ТекГруп.Представление);
			Элементы.ГруппировкаТарифа3.СписокВыбора.Добавить(ТекГруп.Значение, ТекГруп.Представление);
		КонецЦикла;
	Иначе
		Элементы.ГруппировкаТарифа1.РежимВыбораИзСписка = Ложь;
		Элементы.ГруппировкаТарифа2.РежимВыбораИзСписка = Ложь;
		Элементы.ГруппировкаТарифа3.РежимВыбораИзСписка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборГруппировкиТарифаОткрытьФорму(Элемент)
	
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборГруппировкиТарифаЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	списГруппировки = Новый СписокЗначений;
	//Если Объект.ВидНачисления = ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт") Тогда
	//	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.ВремяРаботы"));
	//	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Грузоподъемность"));
	//	списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.ОбъемКузова"));
	//Иначе
		списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Грузоподъемность"));
		списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.ОбъемКузова"));
		списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.КлассГруза"));
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВидНачисления, "СпособРасчетаОплатыТруда")
			= ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок")
			ИЛИ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ВидНачисления, "СпособРасчетаОплатыТруда")
			= ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой") Тогда
			списГруппировки.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппировкиТарифов.Выручка"));
		КонецЕсли;
	//КонецЕсли;
	ПараметрыФормы.Вставить("ДополнительныеГруппировки", списГруппировки);
	ПараметрыФормы.Вставить("ВидНачисления", Объект.ВидНачисления);
	
	ОткрытьФорму("Справочник.уатТарифыЗП.Форма.ФормаВыбораГруппировкиТарифа", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыборГруппировкиТарифаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа1 Тогда
		Объект.ГруппировкаТарифа1 = Результат;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа2 Тогда
		Объект.ГруппировкаТарифа2 = Результат;
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ГруппировкаТарифа3 Тогда
		Объект.ГруппировкаТарифа3 = Результат;
	КонецЕсли;
	Модифицированность = Истина;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСложныеТарифы()
	Объект.ГруппировкаТарифа1 = Неопределено;
	Объект.ГруппировкаТарифа2 = Неопределено;
	Объект.ГруппировкаТарифа3 = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидНачисления()
	
	Элементы.ВидНачисления.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатОсновныеНачисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА уатОсновныеНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок)
	|			ТОГДА 0
	|		КОГДА уатОсновныеНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой)
	|			ТОГДА 1
	|		КОГДА уатОсновныеНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
	|				ИЛИ уатОсновныеНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	ПланВидовРасчета.уатОсновныеНачисления КАК уатОсновныеНачисления
	|ГДЕ
	|	(НЕ уатОсновныеНачисления.ПометкаУдаления
	|				И НЕ &ПрименениеРемонтныеЛисты
	|			ИЛИ (уатОсновныеНачисления.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт)
	|				ИЛИ уатОсновныеНачисления.СпособРасчетаОплатыТруда = ЗНАЧЕНИЕ(Перечисление.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексКартинки,
	|	уатОсновныеНачисления.Наименование");
	Запрос.УстановитьПараметр("ПрименениеРемонтныеЛисты", Объект.Применение = 2);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИндексКартинки = 0 Тогда
			ТекКартинка = БиблиотекаКартинок.уатТарифПоВыработке;
		ИначеЕсли Выборка.ИндексКартинки = 1 Тогда
			ТекКартинка = БиблиотекаКартинок.уатТарифФиксированный;
		ИначеЕсли Выборка.ИндексКартинки = 2 Тогда
			ТекКартинка = БиблиотекаКартинок.уатТарифДоплата;
		Иначе
			ТекКартинка = БиблиотекаКартинок.уатТарифПроцентом;
		КонецЕсли;
					
		Элементы.ВидНачисления.СписокВыбора.Добавить(Выборка.Ссылка,,, ТекКартинка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФлагПострочныйРасчетПоЗаказамНаТС()
	ПострочныйРасчетПоЗаказамНаТС =
		(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ПараметрВыработки, "СпособВводаЗначений") =
		ПредопределенноеЗначение("Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти"));
КонецПроцедуры

#КонецОбласти

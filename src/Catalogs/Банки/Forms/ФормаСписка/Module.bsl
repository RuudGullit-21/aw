
#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.Банки) Тогда 
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;
		Элементы.ФормаПодобратьИзКлассификатора.Видимость = Ложь;
		Элементы.ФормаОбновитьИзКлассификатора.Видимость  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение.Количество() Тогда 
		СоздатьОбновитьЭлементыСправочника(ВыбранноеЗначение);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПослеДобавления" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Группа Тогда
		Текст = НСтр("en='There is an opportunity to choose the Bank from classifier.';ru='Есть возможность подобрать банк из классификатора.'") + Символы.ПС + 
				НСтр("en='Choose?';ru='Подобрать?'");
		
		ТекДанные = Элементы.Список.ТекущиеДанные;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Родитель", Родитель);
		Если Копирование Тогда
			ДополнительныеПараметры.Вставить("Наименование", ТекДанные.Наименование);
			ДополнительныеПараметры.Вставить("Код", ТекДанные.Код);
			ДополнительныеПараметры.Вставить("КоррСчет", ТекДанные.КоррСчет);
			ДополнительныеПараметры.Вставить("Город", ТекДанные.Город);
			ДополнительныеПараметры.Вставить("Адрес", ТекДанные.Адрес);
			ДополнительныеПараметры.Вставить("Телефоны", ТекДанные.Телефоны);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьИзКлассификатора(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);
	ОткрытьФорму("Справочник.КлассификаторБанков.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список, Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзКлассификатора(Команда)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ВыполнитьНаСервере(ИБФайловая);
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		ПодключатьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
		Если ПодключатьОбработчикОжидания Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
		
	Иначе
		ЗагрузитьПодготовленныеДанныеНаКлиенте(Результат.СтруктураДанныхКлиента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СоздатьОбновитьЭлементыСправочника(Знач мсвСсылок)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДанныеИзКлассификатора", мсвСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Банки.Ссылка КАК Банк,
	|	КлассификаторБанков.Ссылка КАК Классификатор
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО КлассификаторБанков.Код = Банки.Код
	|ГДЕ
	|	КлассификаторБанков.Ссылка В(&ДанныеИзКлассификатора)";
	
	ТабСсылок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСсылка Из мсвСсылок Цикл 
		НайдСтрока = ТабСсылок.Найти(ТекСсылка, "Классификатор");
		Если НайдСтрока = Неопределено Тогда 
			НовОбъект = Справочники.Банки.СоздатьЭлемент();
			НовОбъект.Код = ТекСсылка.Код;
		Иначе 
			НовОбъект = НайдСтрока.Банк.ПолучитьОбъект();
		КонецЕсли;
		
		НовОбъект.Наименование = ТекСсылка.Наименование;
		
		НовОбъект.Родитель     = ПолучитьРодителя(ТекСсылка.Родитель);
		НовОбъект.СВИФТБИК	   = ТекСсылка.СВИФТБИК;
		НовОбъект.КоррСчет     = ТекСсылка.КоррСчет;
		НовОбъект.Город        = ТекСсылка.Город;
		НовОбъект.Адрес        = ТекСсылка.Адрес;
		НовОбъект.Телефоны     = ТекСсылка.Телефоны;
		
		Попытка
			НовОбъект.Записать();
		Исключение
			ТекстНСТР = НСтр("en='Error while creating a new catalog element.';ru='Ошибка при создании нового элемента справочника.'") + Символы.ПС + 
						НСтр("en='Error description:';ru='Описание ошибки:'") + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРодителя(Знач Группа)
	
	Если ЗначениеЗаполнено(Группа) Тогда 
		мЗапрос = Новый Запрос();
		мЗапрос.УстановитьПараметр("Код", Группа.Код);
		
		мЗапрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Банки.Ссылка
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.ЭтоГруппа
		|	И Банки.Код = &Код";
		
		Рез = мЗапрос.Выполнить();
		
		Если Рез.Пустой() Тогда 
			НовГруппа = Справочники.Банки.СоздатьГруппу();
			НовГруппа.Код          = Группа.Код;
			НовГруппа.Наименование = Группа.Наименование;
			НовГруппа.Родитель     = ПолучитьРодителя(Группа.Родитель);
			
			Попытка
				НовГруппа.Записать();
				Возврат НовГруппа.Ссылка;
			Исключение
				ТекстНСТР = НСтр("en='Error when creating new catalog group.';ru='Ошибка при создании новой группы справочника.'") + Символы.ПС + 
							НСтр("en='Error description:';ru='Описание ошибки:'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Возврат Неопределено;
			КонецПопытки;
		Иначе 
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	Иначе 
		Возврат Справочники.Банки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьРодителя()

&НаКлиенте
Процедура ВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);
		ОткрытьФорму("Справочник.КлассификаторБанков.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПараметрыФормы = Новый Структура("Основание", ДополнительныеПараметры);
		ОткрытьФорму("Справочник.Банки.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			СтруктураДанныхНаКлиенте = ЗагрузитьПодготовленныеДанные();
			ЗагрузитьПодготовленныеДанныеНаКлиенте(СтруктураДанныхНаКлиенте);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанныеНаКлиенте(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("УспешноВыполнена") Тогда
		
		ТекстНСТР = НСтр("en='Banks updated from classifier';ru='Банки обновлены из классификатора'");
		ПоказатьОповещениеПользователя(НСтр("en='RefreshEnabled';ru='Обновление'"),, ТекстНСТР);
		
	КонецЕсли;
	
	Оповестить("ОбновитьПослеДобавления");
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("УспешноОбновлены") Тогда
		СтруктураДанныхНаКлиенте.Вставить("УспешноОбновлены", СтруктураДанных.УспешноОбновлены);
	КонецЕсли;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервере
Функция ВыполнитьНаСервере(ИБФайловая)
	
	СтруктураПараметров = Новый Структура();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Справочники.Банки.ОбновитьБанкиИзКлассификатора(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеФоновогоЗадания = НСтр("en='Update banks from classifier';ru='Обновление банков из классификатора'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Справочники.Банки.ОбновитьБанкиИзКлассификатора", 
			СтруктураПараметров, 
			НаименованиеФоновогоЗадания);
			
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

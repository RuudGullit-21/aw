
#Область ОбработчикиСобытий

Функция УстановитьСтатусТочекМаршрута(Запрос)
	
	ДанныеОтвета = Новый Структура("ОК, Комментарий", Истина, "");
	
	Попытка
		ПолученныеДанные = ИнициализироватьПолученныеДанныеУстановкиСтатуса();
		ЗаполнитьДанныеМаршрутногоЛистаПоЗаказу(Запрос, ПолученныеДанные);
		КонвертироватьДанныеЗапросаУстановкиСтатуса(Запрос, ПолученныеДанные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ДанныеОтвета.Комментарий = СформироватьКомментарийИсточникуВСлучаеИсключения(ИнформацияОбОшибке, ПолученныеДанные);
		ДанныеОтвета.ОК = Ложь;
	КонецПопытки; 
	
	Возврат УстановитьСтатусЗавершение(ДанныеОтвета, ПолученныеДанные);
	
КонецФункции

Функция УстановитьСтатусЗаявокПРР(Запрос)
	
	ДанныеОтвета = Новый Структура("ОК, Комментарий", Истина, "");
	
	Попытка
		ПолученныеДанные = ИнициализироватьПолученныеДанныеУстановкиСтатуса();
		ЗаполнитьДанныеМаршрутногоЛиста(Запрос, ПолученныеДанные);
		КонвертироватьДанныеЗапросаУстановкиСтатуса(Запрос, ПолученныеДанные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ДанныеОтвета.Комментарий = СформироватьКомментарийИсточникуВСлучаеИсключения(ИнформацияОбОшибке, ПолученныеДанные);
		ДанныеОтвета.ОК = Ложь;
	КонецПопытки; 
	
	Возврат УстановитьСтатусЗавершение(ДанныеОтвета, ПолученныеДанные);
	
КонецФункции

Функция ПроверкаСоединения(Запрос)
	
	ДанныеОтвета = Новый Структура;
	ДанныеОтвета.Вставить("ОК", Истина);
	ДанныеОтвета.Вставить("Комментарий", "");	
	ДанныеОтвета.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	ДанныеОтвета.Вставить("ВерсияИнтерфейса", "1.7");
	ДанныеОтвета.Вставить("ИнтеграцияВключена", ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ"));
	 	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Ответ = Новый HTTPСервисОтвет(200,, Заголовки);
	
	ДанныеОтветаJSON = уатИнтеграции_уэ.СериализоватьВJSON(ДанныеОтвета);
	Ответ.УстановитьТелоИзСтроки(ДанныеОтветаJSON);
	
	Возврат Ответ;

КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьПолученныеДанныеУстановкиСтатуса()
	
	ПолученныеДанные = Новый Структура;
	ПолученныеДанные.Вставить("ТочкаВыполнена");
	ПолученныеДанные.Вставить("МаршрутныйЛист");
	ПолученныеДанные.Вставить("ПрибытиеФакт");
	ПолученныеДанные.Вставить("УбытиеФакт");
	ПолученныеДанные.Вставить("КодОтвета");
	ПолученныеДанные.Вставить("КомментарийКСменеСтатуса");
	ПолученныеДанные.Вставить("ИДЗаказаНаТССтрокой");
	ПолученныеДанные.Вставить("СтатусЗаданияПРР");
	
	Возврат ПолученныеДанные;
	
КонецФункции

Процедура КонвертироватьДанныеЗапросаУстановкиСтатуса(Запрос, ПолученныеДанные)
	
	ТелоОтветаJSON = Запрос.ПолучитьТелоКакСтроку();
	Если ПустаяСтрока(ТелоОтветаJSON) Тогда
		ПолученныеДанные.КодОтвета = 400;
		
		ВызватьИсключение НСтр("ru = 'Пустое тело запроса не допускается. Как минимум, обязательно указание статуса'");	
	КонецЕсли;
	
	ДанныеОтвета = уатИнтеграции_уэ.ДесериализоватьJSON(ТелоОтветаJSON);
	Если НЕ ДанныеОтвета.Свойство("Статус") Тогда
		ПолученныеДанные.КодОтвета = 400;
		                                                                 
		ВызватьИсключение НСтр("ru = 'Не заполнено обязательное поле тела запроса ""Статус""'");	
	КонецЕсли; 
	
	ПолученныеДанные.ТочкаВыполнена = Неопределено;
	ПолученныеДанные.ТочкаВыполнена = КонвертироватьСтатусИзСтроки(ДанныеОтвета.Статус);
	ПолученныеДанные.СтатусЗаданияПРР = ДанныеОтвета.Статус;
	Если ПолученныеДанные.ТочкаВыполнена = Неопределено Тогда
		ПолученныеДанные.КодОтвета = 400;
		                                                                 
		ВызватьИсключение НСтр("ru = 'Указан неизвестный статус'");
	КонецЕсли; 
	
	КомментарийКСменеСтатуса = "";
	Если ДанныеОтвета.Свойство("Комментарий") Тогда
		КомментарийКСменеСтатуса = XMLСтрока(ДанныеОтвета.Комментарий);	
	КонецЕсли;
	ПолученныеДанные.КомментарийКСменеСтатуса = КомментарийКСменеСтатуса;
	
	ПрибытиеФакт = '00010101';
	Если ДанныеОтвета.Свойство("ДатаНачалаРаботы") Тогда
		Попытка
			ПрибытиеФакт = уатИнтеграции_уэ.ДесериализоватьДатуISO(ДанныеОтвета.ДатаНачалаРаботы);
		Исключение
		    ПолученныеДанные.КодОтвета = 400;
		                                                                 
			ВызватьИсключение НСтр("ru = 'Неверный формат даты начала работы (ожидается строка с датой формата ISO)'");
		КонецПопытки; 	
	КонецЕсли;
	ПолученныеДанные.ПрибытиеФакт = ПрибытиеФакт;
	
	УбытиеФакт = '00010101';
	Если ДанныеОтвета.Свойство("ДатаОкончанияРаботы") Тогда	
		Попытка
			УбытиеФакт = уатИнтеграции_уэ.ДесериализоватьДатуISO(ДанныеОтвета.ДатаОкончанияРаботы);
		Исключение
		    ПолученныеДанные.КодОтвета = 400;
		                                                                 
			ВызватьИсключение НСтр("ru = 'Неверный формат даты окончания работы (ожидается строка с датой формата ISO)'");
		КонецПопытки;	
	КонецЕсли;
	ПолученныеДанные.УбытиеФакт = УбытиеФакт;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ПрибытиеФакт)
		 И НЕ ЗначениеЗаполнено(ПолученныеДанные.УбытиеФакт) Тогда
		 
		ПолученныеДанные.КодОтвета = 400;
		                                                                 
		ВызватьИсключение НСтр("ru = 'Если указано факт. время прибытия, то обязательно заполнение факт. времени убытия'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.УбытиеФакт)
		 И НЕ ЗначениеЗаполнено(ПолученныеДанные.ПрибытиеФакт) Тогда
		 
		ПолученныеДанные.КодОтвета = 400;
		                                                                 
		ВызватьИсключение НСтр("ru = 'Если указано факт. время убытия, то обязательно заполнение факт. времени прибытия'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ПрибытиеФакт)
		 И ЗначениеЗаполнено(ПолученныеДанные.УбытиеФакт)
		 И ПолученныеДанные.УбытиеФакт <= ПолученныеДанные.ПрибытиеФакт Тогда
		 
		ПолученныеДанные.КодОтвета = 400;
		                                                                 
		ВызватьИсключение НСтр("ru = 'Факт. время убытия должно быть строго больше факт. времени прибытия'");
	КонецЕсли; 
		
	ПолученныеДанные.КодОтвета = 200;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМаршрутногоЛистаПоЗаказу(Запрос, ПолученныеДанные)
	
	ПолученныеДанные.КодОтвета = 500;
	
	ИДЗаказаНаТССтрокой = Запрос.ПараметрыURL["pointID"];
	Если НЕ ЗначениеЗаполнено(ИДЗаказаНаТССтрокой) Тогда
		ПолученныеДанные.КодОтвета = 400;
		
		ВызватьИсключение НСтр("ru = 'Не указан идентификатор задания ПРР (обязательное поле)'");	
	КонецЕсли; 
	ПолученныеДанные.ИДЗаказаНаТССтрокой = ИДЗаказаНаТССтрокой;

	Попытка
		ИДЗаказаНаТС = Новый УникальныйИдентификатор(ИДЗаказаНаТССтрокой);
	Исключение
		ПолученныеДанные.КодОтвета = 400;
		
		ВызватьИсключение НСтр("ru = 'В качестве идентификатора задания ПРР передана строка, не являющаяся уникальным идентификатором'");
	КонецПопытки;
	
	Попытка
		ЗаказНаТС = Документы.уатЗаказГрузоотправителя.ПолучитьСсылку(ИДЗаказаНаТС);
	Исключение
		ПолученныеДанные.КодОтвета = 500;
		
		ВызватьИсключение НСтр("ru = 'Не найден Заказ на ТС, идентификатор которого совпадает с переданным идентификатором Задания ПРР'");
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	НомерЗаказа = ЗаказНаТС.Номер;
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ЗначениеЗаполнено(НомерЗаказа) Тогда
		// В базе нет Заказа на ТС с переданным ID, в переменной ЗаказНаТС - ссылка нового объекта
		ПолученныеДанные.КодОтвета = 500;
		
		ВызватьИсключение НСтр("ru = 'Не найден Заказ на ТС, идентификатор которого совпадает с переданным идентификатором Задания ПРР'");
	КонецЕсли;
	
	ЗапросКБазеданных = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатМаршрутныйЛист) КАК МаршрутныйЛист
	|ПОМЕСТИТЬ втМаршрутныеЛисты
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&ЗаказНаТС) КАК СвязанныеДокументы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.уатМаршрутныйЛист)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втМаршрутныеЛисты.МаршрутныйЛист.Ссылка КАК МаршрутныйЛистСсылка
	|ИЗ
	|	втМаршрутныеЛисты КАК втМаршрутныеЛисты
	|ГДЕ
	|	втМаршрутныеЛисты.МаршрутныйЛист.ПометкаУдаления = ЛОЖЬ");
	ЗапросКБазеданных.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Выборка = ЗапросКБазеданных.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученныеДанные.МаршрутныйЛист = Выборка.МаршрутныйЛистСсылка;
	Иначе
		ПолученныеДанные.КодОтвета = 500;
		
		ВызватьИсключение НСтр("ru = 'Не найден Маршрутный лист, в который входит Заказ на ТС, полученный по переданному идентификатору Задания ПРР'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМаршрутногоЛиста(Запрос, ПолученныеДанные)
	
	ПолученныеДанные.КодОтвета = 500;
	
	ИДМаршрутногоЛистаСтрокой = Запрос.ПараметрыURL["OrderUID"];
	Если НЕ ЗначениеЗаполнено(ИДМаршрутногоЛистаСтрокой) Тогда
		ПолученныеДанные.КодОтвета = 400;
		
		ВызватьИсключение НСтр("ru = 'Не указан идентификатор заявки ПРР (обязательное поле)'");	
	КонецЕсли; 

	Попытка
		ИДМаршрутногоЛиста = Новый УникальныйИдентификатор(ИДМаршрутногоЛистаСтрокой);
	Исключение
		ПолученныеДанные.КодОтвета = 400;
		
		ВызватьИсключение НСтр("ru = 'В качестве идентификатора заявки ПРР передана строка, не являющаяся уникальным идентификатором'");
	КонецПопытки;
	
	Попытка
		МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПолучитьСсылку(ИДМаршрутногоЛиста);
	Исключение
		ПолученныеДанные.КодОтвета = 500;
		
		ВызватьИсключение НСтр("ru = 'Не найден Маршрутный лист, идентификатор которого совпадает с переданным идентификатором Заявки ПРР'");
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	НомерДокумента = МаршрутныйЛист.Номер;
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
		// В базе нет Маршрутного листа с переданным ID, в переменной МаршрутныйЛист - ссылка нового объекта
		ПолученныеДанные.КодОтвета = 500;
		
		ВызватьИсключение НСтр("ru = 'Не найден Маршрутный лист, идентификатор которого совпадает с переданным идентификатором Заявки ПРР'");
	КонецЕсли;
	
	ПолученныеДанные.МаршрутныйЛист = МаршрутныйЛист;
	
КонецПроцедуры

Функция КонвертироватьСтатусИзСтроки(СтатусСтрокой)
	
	ТочкаМаршрутаВыполнена = Неопределено;
	Если СтатусСтрокой = "Новый"
		 ИЛИ СтатусСтрокой = "ОжидаетРазгрузки"
		 ИЛИ СтатусСтрокой = "ВРаботе"
		 ИЛИ СтатусСтрокой = "Спланирован"
		 ИЛИ СтатусСтрокой = "ЧастичноСпланирован"
		 ИЛИ СтатусСтрокой = "Отобран"
		 ИЛИ СтатусСтрокой = "ГотовКПогрузке" 
		 ИЛИ СтатусСтрокой = "Отменен" Тогда
		
		ТочкаМаршрутаВыполнена = Ложь;
	ИначеЕсли СтатусСтрокой = "Выполнен" Тогда
		ТочкаМаршрутаВыполнена = Истина;
	КонецЕсли; 
	
	Возврат ТочкаМаршрутаВыполнена;
	
КонецФункции
 
Функция СформироватьКомментарийИсточникуВСлучаеИсключения(ИнформацияОбОшибке, ПолученныеДанные)
	
	Комментарий = "";
	Если ПолученныеДанные.КодОтвета = 400
		 ИЛИ ПолученныеДанные.КодОтвета = 404
		 ИЛИ ПолученныеДанные.КодОтвета = 200 Тогда
		 
		Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли; 
	
	Возврат Комментарий;
	
КонецФункции

Функция УстановитьСтатусЗавершение(ДанныеОтвета, ПолученныеДанные)
	
	Если ДанныеОтвета.ОК Тогда
		Попытка
			// Сохранение полученных данных
			ЗаписьОчереди = РегистрыСведений.уатОчередьЗагрузкиИзWMS_уэ.СоздатьМенеджерЗаписи();
			ЗаписьОчереди.ИдентификаторСообщения = Новый УникальныйИдентификатор;
			ЗаписьОчереди.ДатаСоздания = ТекущаяДатаСеанса();
			ДанныеСообщения = Новый Структура("ТочкаВыполнена, ПрибытиеФакт, УбытиеФакт, КомментарийКСменеСтатуса, ИДЗаказаНаТССтрокой, СтатусЗаданияПРР");
			ЗаполнитьЗначенияСвойств(ДанныеСообщения, ПолученныеДанные);
			ЗаписьОчереди.МаршрутныйЛист = ПолученныеДанные.МаршрутныйЛист;
			ЗаписьОчереди.ДанныеСообщения = Новый ХранилищеЗначения(ДанныеСообщения, Новый СжатиеДанных(9));
			
			// Привилегированный режим включается для корректного выполнения подписок на события БСП, 
			// которые могут сработать при записи, вместо требования добавления ролей БСП пользователю обмена.
			УстановитьПривилегированныйРежим(Истина);
			ЗаписьОчереди.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ДанныеОтвета.Комментарий = СформироватьКомментарийИсточникуВСлучаеИсключения(ИнформацияОбОшибке, ПолученныеДанные);
			ДанныеОтвета.ОК = Ложь;
		КонецПопытки;
	КонецЕсли; 
	 
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Ответ = Новый HTTPСервисОтвет(ПолученныеДанные.КодОтвета,, Заголовки);	
	
	ДанныеОтветаJSON = уатИнтеграции_уэ.СериализоватьВJSON(ДанныеОтвета);
	Ответ.УстановитьТелоИзСтроки(ДанныеОтветаJSON);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти 
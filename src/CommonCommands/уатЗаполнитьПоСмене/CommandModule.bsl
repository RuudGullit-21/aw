
#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	ЭлементыИсточника = ПараметрыВыполненияКоманды.Источник.Элементы;
	
	Если ЭлементыИсточника.Найти("Список") <> Неопределено Тогда
		мСтрок = ЭлементыИсточника.Список.ВыделенныеСтроки;
		Если мСтрок.Количество() <> 0 Тогда
			Источник = мСтрок[0];
			ШаблонЗаполнения = ПолучитьРеквизит(Источник, "ШаблонЗаполнения");
			РасписаниеРаботы = ПолучитьРеквизит(Источник, "РасписаниеРаботы");

			ПараметрыФормы = Новый Структура("Источник, ШаблонЗаполнения, РасписаниеРаботы", Источник,ШаблонЗаполнения,РасписаниеРаботы);
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьГрафикПоСмене", ЭтотОбъект, ПараметрыФормы);
			ОткрытьФорму("Справочник.уатСмены.Форма.ФормаВыбора",ПараметрыФормы, ПараметрыВыполненияКоманды.Источник,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	ИначеЕсли ЭлементыИсточника.Страницы.ТекущаяСтраница.Имя = "НастройкаЗаполненияСтраница" Тогда
		Источник          = ПараметрыВыполненияКоманды.Источник;
		ШаблонЗаполнения  = Источник.Объект.ШаблонЗаполнения;
		РасписаниеРаботы  = Источник.Объект.РасписаниеРаботы;

		ПараметрыФормы = Новый Структура("Источник, ШаблонЗаполнения, РасписаниеРаботы", Источник,ШаблонЗаполнения,РасписаниеРаботы);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьГрафикПоСмене", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("Справочник.уатСмены.Форма.ФормаВыбора",, ПараметрыВыполненияКоманды.Источник,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("en='It is necessary to open ""Setting of filling""!';ru='Необходимо открыть страницу ""Настройка заполнения""!'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьРеквизит(Источник, Поле)
	мРасписания = Новый Массив();
	Для Каждого ТекСтрока Из Источник[Поле] Цикл
		Если Поле = "ШаблонЗаполнения" Тогда
			мРасписания.Добавить(Новый Структура("НомерСтроки, ДеньВключенВГрафик, ПредставлениеДня, ПредставлениеРасписания", ТекСтрока.НомерСтроки, ТекСтрока.ДеньВключенВГрафик, "",""));
		Иначе
			мРасписания.Добавить(Новый Структура("НомерСтроки, НомерДня, ВремяНачала, ВремяОкончания", ТекСтрока.НомерСтроки, ТекСтрока.НомерДня, ТекСтрока.ВремяНачала, ТекСтрока.ВремяОкончания));
		КонецЕсли;
	КонецЦикла;
	Возврат мРасписания;
КонецФункции

&НаКлиенте
Процедура ОчиститьИнтервалыРабочегоВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	РасписаниеРаботы = Новый Массив();
	Для Каждого ТекРасписания Из ДополнительныеПараметры.РасписаниеРаботы Цикл
		РасписаниеРаботы.Добавить(ТекРасписания);
	КонецЦикла;
	Для Каждого ТекСтрока Из ДополнительныеПараметры.ШаблонЗаполнения Цикл
		Если ТипЗнч(ДополнительныеПараметры.Источник) = Тип("СправочникСсылка.Календари") Тогда
			Для Каждого ТекРасписания Из ДополнительныеПараметры.РасписаниеРаботы Цикл
				Если ТекРасписания.НомерДня = ТекСтрока.НомерСтроки Тогда
					ТекИндекс = РасписаниеРаботы.Найти(ТекРасписания);
					Если ТекИндекс <> Неопределено Тогда 
						РасписаниеРаботы.Удалить(ТекИндекс);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиРасписания  = ДополнительныеПараметры.РасписаниеРаботы.НайтиСтроки(Новый Структура("НомерДня", ТекСтрока.НомерСтроки));
			Для Каждого ТекРасписания Из СтрокиРасписания Цикл
				ДополнительныеПараметры.РасписаниеРаботы.Удалить(ТекРасписания);
			КонецЦикла;
		КонецЕсли;
		ТекСтрока.ПредставлениеРасписания = ПредставлениеПустогоРасписания();
	КонецЦикла;
	Если ТипЗнч(ДополнительныеПараметры.Источник) = Тип("СправочникСсылка.Календари") Тогда
		ДополнительныеПараметры.РасписаниеРаботы = РасписаниеРаботы;
	КонецЕсли;
	ЗаполнитьГрафикПоСменеЗавершение(ДополнительныеПараметры.Смена, ДополнительныеПараметры.ШаблонЗаполнения, ДополнительныеПараметры.РасписаниеРаботы, ДополнительныеПараметры.Источник);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикПоСменеЗавершение(Смена, ШаблонЗаполнения, РасписаниеРаботы, Источник)
	тПериодыСмены = ПериодыСмены(Смена);
	Если тПериодыСмены.Количество() = 0 Тогда
		Возврат;
	КОнецЕсли;
	
	Для Каждого СтрокаШаблона Из ШаблонЗаполнения Цикл
		
		Если НЕ СтрокаШаблона.ДеньВключенВГрафик Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеИнтервалов = "";
		Секунд = 0;
		Для Каждого ТекПериод Из тПериодыСмены Цикл
			Если ТипЗнч(Источник) = Тип("СправочникСсылка.Календари") Тогда
				СтрокаРасписания = Новый Структура("НомерДня, ВремяНачала, ВремяОкончания",СтрокаШаблона.НомерСтроки, ТекПериод.ВремяНачала, ТекПериод.ВремяОкончания);
				ПредставлениеИнтервала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1-%2, ", Формат(СтрокаРасписания.ВремяНачала, "ДФ=ЧЧ:мм; ДП="), Формат(СтрокаРасписания.ВремяОкончания, "ДФ=ЧЧ:мм; ДП="));
				ПредставлениеИнтервалов = ПредставлениеИнтервалов + ПредставлениеИнтервала;
				Если Не ЗначениеЗаполнено(СтрокаРасписания.ВремяОкончания) Тогда
					СекундИнтервала = КонецДня(СтрокаРасписания.ВремяОкончания) - СтрокаРасписания.ВремяНачала + 1;
				Иначе
					СекундИнтервала = СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала;
				КонецЕсли;
				РасписаниеРаботы.Добавить(СтрокаРасписания);
			Иначе
				СтрокаРасписания = РасписаниеРаботы.Добавить();
				СтрокаРасписания.НомерДня       = СтрокаШаблона.НомерСтроки;
				СтрокаРасписания.ВремяНачала    = ТекПериод.ВремяНачала;
				СтрокаРасписания.ВремяОкончания = ТекПериод.ВремяОкончания;
				
				ПредставлениеИнтервала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1-%2, ", Формат(СтрокаРасписания.ВремяНачала, "ДФ=ЧЧ:мм; ДП="), Формат(СтрокаРасписания.ВремяОкончания, "ДФ=ЧЧ:мм; ДП="));
				ПредставлениеИнтервалов = ПредставлениеИнтервалов + ПредставлениеИнтервала;
				Если Не ЗначениеЗаполнено(СтрокаРасписания.ВремяОкончания) Тогда
					СекундИнтервала = КонецДня(СтрокаРасписания.ВремяОкончания) - СтрокаРасписания.ВремяНачала + 1;
				Иначе
					СекундИнтервала = СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала;
				КонецЕсли;
			КонецЕсли;
			Секунд = Секунд + СекундИнтервала;
		КонецЦикла;
		
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеИнтервалов, 2);
	
		Если Секунд = 0 Тогда
			СтрокаШаблона.ПредставлениеРасписания = ПредставлениеПустогоРасписания();
		КонецЕсли;
		
		Часов = Окр(Секунд / 3600, 1);
	
		СтрокаШаблона.ПредставлениеРасписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en='%1 h. (%2)';ru='%1 ч. (%2)'"), Часов, ПредставлениеИнтервалов);
	КонецЦикла;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Календари") Тогда
		ЗаполнитьГрафикПоСменеЗавершениеСервер(Источник, ШаблонЗаполнения, РасписаниеРаботы);
	Иначе
		Источник.Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикПоСменеЗавершениеСервер(Объект, ШаблонЗаполнения, РасписаниеРаботы)
	мОбъект = Объект.Ссылка.ПолучитьОбъект();
	мОбъект.ШаблонЗаполнения.Очистить();
	Для Каждого ТекСтрока Из ШаблонЗаполнения Цикл
		НоваяСтрока = мОбъект.ШаблонЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	мОбъект.РасписаниеРаботы.Очистить();
	Для Каждого ТекСтрока Из РасписаниеРаботы Цикл
		НоваяСтрока = мОбъект.РасписаниеРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(мОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикПоСмене(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры.Источник) = Тип("СправочникСсылка.Календари") Тогда
		СтрокиШаблон = Новый Массив();
		Для Каждого ТекСтрока Из ДополнительныеПараметры.ШаблонЗаполнения Цикл
			Если ТекСтрока.ДеньВключенВГрафик Тогда
				СтрокиШаблон.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокиШаблон = ДополнительныеПараметры.ШаблонЗаполнения.НайтиСтроки(Новый Структура("ДеньВключенВГрафик", Истина));
	КонецЕсли;
	
	ОчиститьИнтервалы = Ложь;
	Для Каждого ТекСтрока Из СтрокиШаблон Цикл
		Если ТипЗнч(ДополнительныеПараметры.Источник) = Тип("СправочникСсылка.Календари") Тогда
			СтрокиРасписания = Новый Массив();
			Для Каждого ТекСтрокаРасписание Из ДополнительныеПараметры.РасписаниеРаботы Цикл
				Если ТекСтрокаРасписание.НомерДня = ТекСтрока.НомерСтроки Тогда
					СтрокиРасписания.Добавить(ТекСтрокаРасписание);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиРасписания  = ДополнительныеПараметры.РасписаниеРаботы.НайтиСтроки(Новый Структура("НомерДня", ТекСтрока.НомерСтроки));
		КонецЕсли;
		
		ОчиститьИнтервалы = СтрокиРасписания.Количество();
		Если ОчиститьИнтервалы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОчиститьИнтервалы Тогда
		ТекстНСТР = НСтр("en='Working time intervals will be cleared! Continue operation?';ru='Интервалы рабочего времени будут очищены! Продолжить выполнение операции?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьИнтервалыРабочегоВремени", ЭтотОбъект, Новый Структура("Смена, ШаблонЗаполнения, РасписаниеРаботы, Источник", Результат, СтрокиШаблон, ДополнительныеПараметры.РасписаниеРаботы, ДополнительныеПараметры.Источник)),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
	Иначе
		ЗаполнитьГрафикПоСменеЗавершение(Результат, СтрокиШаблон, ДополнительныеПараметры.РасписаниеРаботы, ДополнительныеПараметры.Источник);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеПустогоРасписания()
	
	Возврат НСтр("en='Fill schedule';ru='Заполнить расписание'");
	
КонецФункции

&НаСервере
Функция ПериодыСмены(Смена)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСменыПериодыСмены.ВремяНачала КАК ВремяНачала,
	               |	ВЫБОР
	               |		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(уатСменыПериодыСмены.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), ДЕНЬ), ЕСТЬNULL(уатСменыПериодыСмены.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА) = 0
	               |			ТОГДА КОНЕЦПЕРИОДА(ЕСТЬNULL(уатСменыПериодыСмены.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), ДЕНЬ)
	               |		ИНАЧЕ ЕСТЬNULL(уатСменыПериодыСмены.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ВремяОкончания,
	               |	ВЫБОР
	               |		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(уатСменыПериодыСмены.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), ДЕНЬ), ЕСТЬNULL(уатСменыПериодыСмены.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА) = 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВремяОкончанияИзменено
	               |ИЗ
	               |	Справочник.уатСмены.ПериодыСмены КАК уатСменыПериодыСмены
	               |ГДЕ
	               |	уатСменыПериодыСмены.Ссылка = &Смена
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремяНачала";
		
	Запрос.УстановитьПараметр("Смена", Смена);
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из Выборка Цикл
		Если ТекСтрока.ВремяНачала >= ТекСтрока.ВремяОкончания Тогда
			НоваяСтрока = Выборка.Добавить();
			НоваяСтрока.ВремяНачала    = ТекСтрока.ВремяНачала;
			НоваяСтрока.ВремяОкончания = КонецДня(Дата(1,1,1));
			НоваяСтрока.ВремяОкончанияИзменено = Истина;
			
			НоваяСтрока = Выборка.Добавить();
			НоваяСтрока.ВремяНачала    = Дата(1,1,1);
			НоваяСтрока.ВремяОкончания = ТекСтрока.ВремяОкончания;
			
			Выборка.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Выборка.Сортировать("ВремяНачала");
	ВремяОкончанияИзменено = Выборка.НайтиСтроки(Новый Структура("ВремяОкончанияИзменено", Истина));
	
	// Находим пересечения
	Счетчик = 0;
	Пока Счетчик <> Выборка.Количество() Цикл
		ТекСтрока = Выборка[Счетчик];
		ИндексСтроки = Выборка.Индекс(ТекСтрока);
		Счетчик = Счетчик + 1;
		Для Каждого ТекСтрокаПров Из Выборка Цикл
			ИндексСтрокиПров = Выборка.Индекс(ТекСтрокаПров);
			Если ИндексСтроки = ИндексСтрокиПров Тогда
				Продолжить;
			КонецЕсли;
			Если (ТекСтрокаПров.ВремяНачала <= ТекСтрока.ВремяОкончания) И (ТекСтрокаПров.ВремяОкончания >= ТекСтрока.ВремяНачала) Тогда
				НоваяСтрока = Выборка.Добавить();
				НоваяСтрока.ВремяНачала    = Мин(ТекСтрокаПров.ВремяНачала, ТекСтрока.ВремяНачала);
				НоваяСтрока.ВремяОкончания = Макс(ТекСтрокаПров.ВремяОкончания, ТекСтрока.ВремяОкончания);
				
				Выборка.Удалить(ТекСтрокаПров);
				Выборка.Удалить(ТекСтрока);
				Счетчик = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Выборка.Сортировать("ВремяНачала");
	
	Если ВремяОкончанияИзменено.Количество() Тогда
		ТекСтрока = Выборка.Найти(КонецДня(Дата(1,1,1)), "ВремяОкончания");
		Если ТекСтрока <> Неопределено Тогда
			ТекСтрока.ВремяОкончания = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	мСмены    = Новый Массив();
	Для Каждого ТекСтрока Из Выборка Цикл
		текСтрока = Новый Структура("ВремяНачала, ВремяОкончания", ТекСтрока.ВремяНачала, ТекСтрока.ВремяОкончания);
		мСмены.Добавить(текСтрока);
	КонецЦикла;
	
	Возврат мСмены;
	
КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличныйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Процедура уатНапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Права = Неопределено) Экспорт
	
	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;
	
	Если НЕ ПечДокумент.АвтоМасштаб
		И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	Если НаПринтер Тогда
		
		ПечДокумент.Напечатать();
		
	Иначе
		
		// Отобразить печатный документ на экране
		ПечДокумент.ОтображатьЗаголовки = Ложь;
		ПечДокумент.ОтображатьСетку     = Ложь;
		ПечДокумент.Показать(Заголовок);
		
	КонецЕсли;
	
	
КонецПроцедуры // НапечататьДокумент()

// Функция по виду сравнения возвращает текстовый параметр для запроса.
// 
// Параметры
//  ВидСравнения - Вид сравнения, для которого получается представление
// 
// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура уатНапечататьДокументИзФормыСписка(Документ, КоличествоЭкземпляров = 1) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СоответствиеМакетов = Документ.ПолучитьСписокПечатныхФорм();
	Исключение
		ТекстНСТР = НСтр("en='Document have no printed forms!';ru='Документ не имеет печатных форм!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецПопытки;
	
	НазваниеМакета = уатПолучитьПечатнуюФормуПоУмолчанию(уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(Документ, "Имя"), СоответствиеМакетов);
	Попытка
		Документ.Печать(НазваниеМакета, КоличествоЭкземпляров);
	Исключение
		Документ.Печать(НазваниеМакета);
	КонецПопытки ;
КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Функция уатПолучитьПечатнуюФормуПоУмолчанию(ИмяОбъекта, СписокМакетов) Экспорт
	
	Перем НазваниеМакета;
	
	МакетПоУмолчанию = уатОбщегоНазначенияТиповыеСервер.ПолучитьМакетПоУмолчанию(ИмяОбъекта);
	                       
	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
		
		// Пытаемся найти форму в соответствии
		ИмяМакета = СписокМакетов[МакетПоУмолчанию];
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИмяМакета) Тогда
			
			// Текущая печатная форма еще не найдена
			// Установим по умолчанию первую из списка
			Для Каждого Элемент Из СписокМакетов Цикл
				МакетПоУмолчанию = Элемент.Ключ;
				Прервать;
			КонецЦикла; 
			уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
				Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
					СтруктураМакета.Макет               = СтрокаМакетаВСписке.Значение;
					СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли МакетПоУмолчанию = Неопределено Тогда
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		Иначе
			СтруктураМакета = МакетПоУмолчанию;
		КонецЕсли;
		
		Если СтруктураМакета.Макет = Неопределено Тогда
			Если СписокМакетов.Количество() <> 0 Тогда
				СтрокаМакетаВСписке = СписокМакетов[0];
				СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
				СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МакетПоУмолчанию = СтруктураМакета.Макет;
		уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);
		
	КонецЕсли;
	
	Возврат МакетПоУмолчанию;
	
	
КонецФункции // ПолучитьПечатнуюФормуПоУмолчанию()

// В зависимости от настроек текущего пользователя выводит для ДокументаОбъекта 
// печатную форму по умолчанию на экран или на принтер.
//
// Параметры:
//  ДокументОбъект - печатаемый документ.
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//  ФормаДокумента - форма печатаемого документа.
//
Функция уатНапечататьДокументПоУмолчанию(ДокументОбъект, Пользователь = Неопределено, НазваниеМакета = "", ФормаДокумента = Неопределено, НаПринтер = Ложь) Экспорт
	
	Попытка
		СоответствиеМакетов = ДокументОбъект.ПолучитьСписокПечатныхФорм();
	Исключение
		//Предупреждение("Документ не имеет печатных форм!");
		Возврат Ложь;
	КонецПопытки;
	
	Если уатОбщегоНазначенияТиповыеСервер.РазрешеноПроведениеДокумента(ДокументОбъект)
		И (НЕ уатПраваИНастройки.уатПраво("ПечатьНепроведенных")) Тогда
		
		ТекстНСТР = НСтр("en='Insufficient authority to print unposted document!';ru='Недостаточно полномочий для печати непроведенного документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат Ложь;
	КонецЕсли;
			
	Если НазваниеМакета = "" Тогда
		НазваниеМакета = уатПолучитьПечатнуюФормуПоУмолчанию(уатОбщегоНазначенияТиповыеСервер.МетаданныеОбъекта(ДокументОбъект, "Имя"), СоответствиеМакетов);
	КонецЕсли;
	
	Если ФормаДокумента = Неопределено Тогда
		Если уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПечатьДокументовБезПредварительногоПросмотра") Тогда
			ДокументОбъект.Печать(НазваниеМакета, , Истина);
		Иначе
			ДокументОбъект.Печать(НазваниеМакета);
		КонецЕсли;
	Иначе
		Если уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПечатьДокументовБезПредварительногоПросмотра") Тогда
			ДокументОбъект.Печать(НазваниеМакета, , Истина, ФормаДокумента);
		Иначе
			ДокументОбъект.Печать(НазваниеМакета, , , ФормаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // НапечататьДокументПоУмолчанию()

// Сохраняет в настройках пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
//
// Параметры:
//  ИмяОбъекта     - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//
Процедура уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, НазваниеМакета) Экспорт
	
	уатОбщегоНазначенияТиповыеСервер.СохранитьТекущуюКнопкуПечатиНаСервере(ИмяОбъекта, НазваниеМакета);
	
КонецПроцедуры // СохранитьТекущуюКнопкуПечати()

// Выполняет команду печати реестра документов.
// 
// Параметры:
//	ОписаниеКоманды - структура, содержащая ключ, соответствующие таблице значений
//						создаваемой функций БСП УправлениеПечатью.СоздатьКоллекциюКомандПечати(),
//						и ключ Форма - управляемая форма, из которой вызвана команда печати.
//
Функция ВыполнитьКомандуПечатиРеестраДокументов(ОписаниеКоманды) Экспорт
	
	НастройкиОтборов = Новый Массив();
	
	КомпоновщикНастроек = ОписаниеКоманды.Форма.Список.КомпоновщикНастроек;
	Для Каждого ТекОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл 
		НастройкиОтборов.Добавить(ТекОтбор);
	КонецЦикла;
	
	Для Каждого ТекНастройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
		Если Не ТипЗнч(ТекНастройка) = Тип("ОтборКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекОтбор Из ТекНастройка.Элементы Цикл 
			НастройкиОтборов.Добавить(ТекОтбор);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", ОписаниеКоманды.ЗаголовокФормы);
	ПараметрыФормы.Вставить("Ключ",      ОписаниеКоманды.МенеджерПечати);
	ПараметрыФормы.Вставить("Отборы",    НастройкиОтборов);
	ПараметрыФормы.Вставить("Период",    ОписаниеКоманды.Форма.Элементы.Список.Период);
	
	ОткрытьФорму("Отчет.уатРеестрДокументов.Форма.ФормаОтчета", ПараметрыФормы, ОписаниеКоманды.Форма, Новый УникальныйИдентификатор);
	
КонецФункции

// Выполняет команду печати этикеток номенклатуры.
// 
// Параметры:
//	ОписаниеКоманды - структура, содержащая ключ, соответствующие таблице значений
//						создаваемой функций БСП УправлениеПечатью.СоздатьКоллекциюКомандПечати(),
//						и ключ Форма - управляемая форма, из которой вызвана команда печати.
//
Функция ВыполнитьКомандуПечатиЭтикеток(ОписаниеКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура("МенеджерПечати", ОписаниеКоманды.МенеджерПечати);
	
	АдресВХранилище = уатОбщегоНазначенияТиповыеСервер.ДанныеДляПечатиЭтикеток(
		ОписаниеКоманды.Идентификатор, ОписаниеКоманды.ОбъектыПечати, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенниковБПО.Форма",
		Новый Структура("АдресВХранилище", АдресВХранилище),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// НАЧАЛО ВЫБОРА

// Процедура перехватывает событие начала выбора контактного лица контрагента
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КонтактныеЛица.ФормаВыбора",,Элемент);
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Список.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	ФормаВыбора.Заголовок     = НСтр("en='Catolog Contacts of counterparties';ru='Справочник Контактные лица контрагентов'");
	ФормаВыбора.Автозаголовок = Ложь;
	
	ФормаВыбора.Открыть();
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Контрагент) ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидКонтактногоЛица");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента");
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	Иначе
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ОбъектВладелец");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Контрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
		ФормаВыбора.Элементы.ОбъектВладелец.Видимость = Ложь;
	КонецЕсли;
	
	Попытка
		ФормаВыбора.Элементы.ОбъектВладелец.Заголовок     = НСтр("en='Counterpartу';ru='Контрагент'");
		ФормаВыбора.Элементы.ВидКонтактногоЛица.Видимость = Ложь;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа;
//  ФормаДокумента - форма редактируемого документа;
//  ЭлементФормы - элемент формы документа, который надо заполнить; 
//  Контрагент  - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов - вид договора взаиморасчетов для отбора, значение 
//                перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязательный,
//                ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                ДоступностьОтбора (если не задан, то Ложь).
//
Процедура уатНачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
	ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
	СтруктураДополнительныхПараметров = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ДоговорКонтрагента);
	
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыФормы, ЭлементФормы);
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Контрагент;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	
	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда
		
		// Оставим в выборе только "правильные" договоры
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДоговора");
		
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ЭлементОтбора.ПравоеЗначение   = ВидыДоговораВзаиморасчетов;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
	КонецЕсли;
	
	// Еще надо фильтровать по организации, если она заполнена
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") 
		И ДокументОбъект.Свойство("Организация")
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		ЗначениеОрганизации = ДокументОбъект.Организация;
		
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = ЗначениеОрганизации;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
	КонецЕсли;
	
	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл
			
			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;
			
			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда
				
				ЭлементОтбора               = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ);
				
				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
				Иначе
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				
				ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				ЭлементОтбора.Использование  = Истина;
				
				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ЭлементОтбора.РежимОтображения = ДоступностьОтбора;
				Иначе
					ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()


////////////////////////////////////////////////////////////////////////////////
// ПУНКТЫ НАЗНАЧЕНИЯ

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация"
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы
//
// Возвращаемое значение:
//     Неопределено
//
Процедура ПредставлениеНачалоВыбораПунктаНазначения(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = Ложь;
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма.Объект;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура;
	
	ДанныеСтроки.Вставить("Вид",           ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"));
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML
	// Без совместимости - одна строка
	// ДанныеСтроки.Вставить("Комментарий", уатОбщегоНазначенияТиповыеСервер.ПолучитьКомментарийИзКонтактнойИнформации(ДанныеЗаполнения.ЗначениеАдреса));
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ЗначениеАдреса) Тогда
		ДанныеСтроки.Вставить("Комментарий", уатОбщегоНазначенияТиповыеСервер.ПолучитьКомментарийИзКонтактнойИнформации(ДанныеЗаполнения.ЗначениеАдреса));
	Иначе
		ДанныеСтроки.Вставить("Комментарий", уатОбщегоНазначенияТиповыеСервер.ПолучитьКомментарийИзКонтактнойИнформации(Форма.ЗначенияПолей));
	КонецЕсли;
	// {/Совместимость}
	ДанныеСтроки.Вставить("Представление", Элемент.ТекстРедактирования);
	ДанныеСтроки.Вставить("Страна",        Форма.Объект.Страна);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML
	// Без совместимости - одна строка
	// ПараметрыОткрытия.Вставить("Значение", ДанныеЗаполнения.ЗначениеАдреса);
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ЗначениеАдреса) Тогда
		ПараметрыОткрытия.Вставить("Значение", ДанныеЗаполнения.ЗначениеАдреса);
	Иначе
		ПараметрыОткрытия.Вставить("ЗначенияПолей", Форма.ЗначенияПолей);
	КонецЕсли;
	// {/Совместимость}
	ПараметрыОткрытия.Вставить("Представление", ДанныеСтроки.Представление);
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершениеПунктаНазначения", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("Страна",            ДанныеСтроки.Страна);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

// Завершение немодальных диалогов
Процедура ПредставлениеНачалоВыбораЗавершениеПунктаНазначения(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт

	Форма            = ДополнительныеПараметры.Форма;
	
	Country = "";
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("Страна") Тогда 
			Country = ДополнительныеПараметры.Страна;
		КонецЕсли;
		Форма.ЭтотОбъект.Объект.Страна = ?(ЗначениеЗаполнено(Country), Country, уатОбщегоНазначенияТиповыеСервер.ПолучитьСтрануИзНаименования());
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатЗакрытия.КонтактнаяИнформация;
		
	КонецЕсли;
	
	Адрес = РезультатЗакрытия.Значение;
	Если ЗначениеЗаполнено(Адрес) Тогда
		#Если НЕ ВебКлиент Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Адрес);
			
			response = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			Country = response.Получить("country");
		#Иначе
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(РезультатЗакрытия.КонтактнаяИнформация) Тогда
				РезультатыЧтения = Новый Структура;
				ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
				Country = уатОбщегоНазначенияТиповыеСервер.СтранаИзXML(РезультатЗакрытия.КонтактнаяИнформация, ТипКонтактнойИнформации, РезультатыЧтения);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	Форма.ЭтотОбъект.Объект.Страна = уатОбщегоНазначенияТиповыеСервер.ПолучитьСтрануИзНаименования(Country);

	ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	Форма.Объект.ЗначениеАдреса = РезультатЗакрытия.Значение;
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОДБОР

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура уатОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, УникальныйИдентификатор) Экспорт
	
	//Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураПараметров.Организация, "ВестиСкладскойУчетУАТ") Тогда
		ОткрытьФорму("Обработка.уатПодборНоменклатуры.Форма.Форма", СтруктураПараметров, ФормаДокумента, УникальныйИдентификатор);
//	Иначе
//		ТекстНСТР = НСтр("en='To be able to use the ""Selection"" mode,"
//"in the ""Setting rights and settings"" data processor, the check box"
//"""Conducting warehouse accounting by facilities of FMS"" must be set';ru='Для возможности использования режима ""Подбор"","
//"в обработке ""Установка прав и настроек"" должен быть установлен флажок"
//"""Ведение складского учета средствами УАТ""'");
//		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
//	КонецЕсли;
	
КонецПроцедуры // уатОткрытьПодборНоменклатуры()

// Универсальная процедура, которая инициирует механизм подбора
// агрегатов в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура уатОткрытьПодборАгрегатов(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт
	
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("ОбщаяФорма.уатФормаПодбораАгрегатов", СтруктураПараметров, ФормаДокумента,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // уатОткрытьПодборАгрегатов()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Общий клиентский модуль "Электронные карты"
//
// Содержит служебные методы подготовки данных для нужд картографии
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПредставлениеАдреса(Знач ПунктСсылка) Экспорт
	
	Если ТипЗнч(ПунктСсылка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ДанныеАдресаJSON = ПунктСсылка.ЗначениеАдреса;
		
		Если ЗначениеЗаполнено(ДанныеАдресаJSON) Тогда 
			Возврат ПолучитьПредставлениеАдресаOSMПоJSON(ДанныеАдресаJSON);
		Иначе
			// {Совместимость}
			// Этот код - для совместимости с старым форматом хранения адреса в XML.
			// Без XML надо просто сделать следующее:
			//Возврат Строка(ПунктСсылка);
			ДанныеАдресаXML = ПолучитьДанныеXMLПункта(ПунктСсылка);
			Если ДанныеАдресаXML = Неопределено Или ДанныеАдресаXML = "" Тогда 
				Возврат Строка(ПунктСсылка);
			Иначе
				Возврат ПолучитьПредставлениеАдресаOSM(ДанныеАдресаXML);
			КонецЕсли;
			// {/Совместимость}
		КонецЕсли;
	Иначе 
		Возврат Строка(ПунктСсылка);
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСообщениеОбОшибке(ИмяСобытия="", Комментарий="", Объект=Неопределено,
	                                СтруктураДопПараметров=Неопределено) Экспорт 
	
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	
	Если Объект = Неопределено Тогда 
		Объект = Метаданные.ОбщиеМодули.уатЭлектронныеКартыСервер;
	КонецЕсли;
	
	Попытка
		ИмяСобытияВЖурналеРегистрации = НСтр("en='Cartography.';ru='Картография.'") + " " + ИмяСобытия;
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
			Уровень,
			Объект,
			,
			Комментарий);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Комментарий);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьТипИспользуемыхЭлектронныхКарт(ТипПоставщика = "Картография") Экспорт
	
	Возврат уатОбщегоНазначенияПовтИсп_проф.ПолучитьТипИспользуемыхЭлектронныхКарт(ТипПоставщика);
	
КонецФункции // ПолучитьТипИспользуемыхЭлектронныхКарт()

// {Совместимость}
// Этот код - для совместимости с старым форматом хранения адреса в XML.
Функция ПолучитьДанныеXMLПункта(Знач ПунктСсылка) Экспорт
	
	Если ТипЗнч(ПунктСсылка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		Если ТипЗнч(ПунктСсылка.ЗначенияПолейАдреса) = Тип("ХранилищеЗначения") Тогда
			Возврат ПунктСсылка.ЗначенияПолейАдреса.Получить();
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеXMLПункта()
// {/Совместимость}

Функция ПолучитьПредставлениеАдресаOSM(Знач XMLСтрокаАдреса, Знач СокращениеУлицыПерфиксом=Ложь, 
	ДопИнформацияАдреса = Неопределено, ТипЭлектронныхКарт = Неопределено) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(XMLСтрокаАдреса) Тогда
		Возврат ПолучитьПредставлениеАдресаOSMПоJSON(XMLСтрокаАдреса, СокращениеУлицыПерфиксом,, ДопИнформацияАдреса, ТипЭлектронныхКарт);
	КонецЕсли;
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML.
	ПоляАдреса = уатЗащищенныеФункцииСервер_проф.СформироватьСтруктуруКонтактнойИнформации(XMLСтрокаАдреса);
	ЕстьДомИлиУлица = Ложь;
	ПредставлениеАдреса = "";
	
	Если ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.DaData
		И ПоляАдреса.Свойство("Представление")
		И ЗначениеЗаполнено(ПоляАдреса.Представление) Тогда
		// В сервис DaData передается представление адреса, созданное БСП,
		// поскольку данный сервис способен его корректно обработать.
		ПредставлениеАдреса = ПоляАдреса.Представление;
		Возврат ПредставлениеАдреса;
	КонецЕсли;
	
	Если ПоляАдреса.Свойство("ПроизвольныйАдрес") Тогда
		ПредставлениеАдреса = ПоляАдреса.ПроизвольныйАдрес;
		// Не знаем, есть ли дом или улица, но считаем, что есть, чтобы в этом случае алгоритм работы не изменился
		ЕстьДомИлиУлица = Истина;
	КонецЕсли;
	
	Если ПоляАдреса.Свойство("Дом") Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.Дом;
		ЕстьДомИлиУлица = Истина;
	КонецЕсли;
	
	Если ПоляАдреса.Свойство("Корпус") И ПоляАдреса.Свойство("Строение") Тогда 
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="",НСтр("en='k';ru='к'")," " + НСтр("en='k';ru='к'")) + ПоляАдреса.Корпус + НСтр("en='from';ru='с'") + ПоляАдреса.Строение;
		ЕстьДомИлиУлица = Истина;
	ИначеЕсли ПоляАдреса.Свойство("Корпус") Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="",НСтр("en='k';ru='к'")," " + НСтр("en='k';ru='к'")) + ПоляАдреса.Корпус;
		ЕстьДомИлиУлица = Истина;
	ИначеЕсли ПоляАдреса.Свойство("Строение") Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="",НСтр("en='from';ru='с'")," " + НСтр("en='from';ru='с'")) + ПоляАдреса.Строение;
		ЕстьДомИлиУлица = Истина;
	КонецЕсли;
	
	Если ПоляАдреса.Свойство("Улица") Тогда
		стрСокращениеУлицы = ?(ПоляАдреса.Улица.Сокращение="", "", НаименованиеАдресногоСокращения(ПоляАдреса.Улица.Сокращение));
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ?(СокращениеУлицыПерфиксом, стрСокращениеУлицы + " ", "") + ПоляАдреса.Улица.Наименование + ?(СокращениеУлицыПерфиксом, "", " " + стрСокращениеУлицы);
		ЕстьДомИлиУлица = Истина;
	КонецЕсли;
	
	Если ПоляАдреса.Свойство("НаселПункт") Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.НаселПункт.Наименование + ?(ПоляАдреса.НаселПункт.Сокращение="",""," "+НаименованиеАдресногоСокращения(ПоляАдреса.НаселПункт.Сокращение));
	КонецЕсли;
	
	Если ПоляАдреса.Свойство("Город") Тогда 
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.Город.Наименование;
	ИначеЕсли ПоляАдреса.Свойство("СубъектРФ") Тогда 
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.СубъектРФ.Наименование;
	КонецЕсли;
	
	Если ТипЗнч(ДопИнформацияАдреса) = Тип("Структура") Тогда
		ДопИнформацияАдреса.Вставить("ЕстьДомИлиУлица", ЕстьДомИлиУлица);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	// {/Совместимость}
КонецФункции

Функция ПолучитьПредставлениеАдресаOSMПоJSON(Знач JSONСтрокаАдреса, Знач СокращениеУлицыПерфиксом=Ложь, 
	ПолучитьПредставлениеАдресаБезСокращений = Ложь, ДопИнформацияАдреса = Неопределено, ТипЭлектронныхКарт = Неопределено) Экспорт
	
	ПоляАдреса = уатЗащищенныеФункцииСервер_проф.СформироватьСтруктуруКонтактнойИнформацииПоJSON(JSONСтрокаАдреса);
	ЕстьДомИлиУлица = Ложь;
	ПредставлениеАдреса = "";
	
	Если ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.DaData
		И ПоляАдреса.Свойство("value")
		И ЗначениеЗаполнено(ПоляАдреса.value) Тогда
		// В сервис DaData передается представление адреса, созданное БСП,
		// поскольку данный сервис способен его корректно обработать.
		ПредставлениеАдреса = ПоляАдреса.value;
		Возврат ПредставлениеАдреса;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(ПоляАдреса.AddressType) Тогда
		ПредставлениеАдреса = ПоляАдреса.value;
		// Не знаем, есть ли дом или улица, но считаем, что есть, чтобы в этом случае алгоритм работы не изменился
		ЕстьДомИлиУлица = Истина;
		Возврат ПредставлениеАдреса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляАдреса.houseNumber) Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.houseNumber;
		ЕстьДомИлиУлица = Истина;
	КонецЕсли;
	
	Для Каждого Здание Из ПоляАдреса.buildings Цикл
		ТипЗдания = НРег(Лев(Здание.Type, 1));
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="",ТипЗдания," " + ТипЗдания) + Здание.Number;
		ЕстьДомИлиУлица = Истина;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПоляАдреса.street) Тогда
		стрСокращениеУлицы = ?(ПоляАдреса.streetType="", "", НаименованиеАдресногоСокращения(ПоляАдреса.streetType));
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ?(СокращениеУлицыПерфиксом, стрСокращениеУлицы + " ", "") + ПоляАдреса.street + ?(СокращениеУлицыПерфиксом, "", " " + стрСокращениеУлицы);
		ЕстьДомИлиУлица = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляАдреса.settlement) Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.settlement + ?(ПоляАдреса.settlementType="",""," "+НаименованиеАдресногоСокращения(ПоляАдреса.settlementType));
	ИначеЕсли ПоляАдреса.Свойство("locality") И ЗначениеЗаполнено(ПоляАдреса.locality) Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.locality + ?(ПоляАдреса.localityType="",""," "+НаименованиеАдресногоСокращения(ПоляАдреса.localityType));
	ИначеЕсли ПоляАдреса.Свойство("territory") И ЗначениеЗаполнено(ПоляАдреса.territory) Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.territory + ?(ПоляАдреса.territoryType="",""," "+НаименованиеАдресногоСокращения(ПоляАдреса.territoryType));
	КонецЕсли;
	
	// Поле "city" видно пользователю только для административно-территориальных адресов, 
	// поле "MunDistrict" - только для муниципальных адресов.
	Если ПоляАдреса.addressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес() И ЗначениеЗаполнено(ПоляАдреса.city) Тогда 
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.city;
	ИначеЕсли РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(ПоляАдреса.addressType) И ЗначениеЗаполнено(ПоляАдреса.MunDistrict) Тогда
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.MunDistrict;
	ИначеЕсли ЗначениеЗаполнено(ПоляАдреса.area) Тогда 
		ПредставлениеАдреса = ПредставлениеАдреса + ?(ПредставлениеАдреса="","",", ") + ПоляАдреса.area;
	КонецЕсли;
	
	Если ТипЗнч(ДопИнформацияАдреса) = Тип("Структура") Тогда
		ДопИнформацияАдреса.Вставить("ЕстьДомИлиУлица", ЕстьДомИлиУлица);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция ПолучитьПредставлениеАдресаБезСокращений(Знач ПредставлениеАдреса, АдресныеСокращенияМассив = Неопределено, ЭтоГеокодированиеOSM = Ложь) Экспорт
	
	Если ЭтоГеокодированиеOSM Тогда
		// Область. Для повышения качества геокодирования область лучше оставить как целое слово.
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " обл,", " область,");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " обл.", " область");
		
		// Корпус, строение требуется обработать отдельно, чтобы привести номер дома к формату OSM
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", корпус ", " к");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", корп. ", " к");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", корп.", " к");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", к. ", " к");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", стр. ", " с");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", стр.", " с");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, ", стр ", " с");
		
		// Удаление некоторых часто встречающихся некорректных адресных сокращений,
		// которые могут не быть удалены с помощью адресного классификатора.
		
		// Дом
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "д.", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " дом ", " ");
		
		// Удаление улиц, микрорайонов, городов и т.п.
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "г.", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "ул.", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "п.", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "ш.", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, "№", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " мкр", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " пр-кт", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " пр-т", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " р-н", "");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " г,", ",");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " ул,", ",");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " п,", ",");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " ш,", ",");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " с,", ",");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " пер,", ",");
		ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, " пр-д,", ",");
	КонецЕсли;

	// Удаление всех адресных сокращений, входящих в адресный классификатор
	Если АдресныеСокращенияМассив = Неопределено Тогда
		АдресныеСокращенияМассив = Новый Массив();
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	АдресныеСокращения = Новый ТаблицаЗначений;
	АдресныеСокращения.Колонки.Добавить("АдресныйОбъект", ТипСтрока);
	АдресныеСокращения.Колонки.Добавить("СокращениеОбъекта", ТипСтрока);
	АдресныеСокращения.Колонки.Добавить("ДлинаПредставленияОбъекта",
	Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	АдресныеСокращенияСоответствие = АдресныйКлассификатор.СокращенияАдресныхОбъектов(АдресныеСокращенияМассив);
	Для Каждого КлючЗначение Из АдресныеСокращенияСоответствие Цикл
		СтрокаСокращение = АдресныеСокращения.Добавить();
		СтрокаСокращение.АдресныйОбъект    = ВРег(КлючЗначение.Ключ);
		СтрокаСокращение.СокращениеОбъекта = КлючЗначение.Значение;
		СтрокаСокращение.ДлинаПредставленияОбъекта = СтрДлина(КлючЗначение.Ключ);
	КонецЦикла;
		
	ТаблицаАдресныхСокращений = РегистрыСведений.АдресныеОбъекты.АдресныеСокращения();
	Для Каждого СтрокаТаблицы Из ТаблицаАдресныхСокращений Цикл
		СтрокаСокращение = АдресныеСокращения.Добавить();
		СтрокаСокращение.АдресныйОбъект				 = ВРег(СтрокаТаблицы.Наименование);
		СтрокаСокращение.СокращениеОбъекта			 = СтрокаТаблицы.Сокращение;
		СтрокаСокращение.ДлинаПредставленияОбъекта	 = СтрДлина(СтрокаСокращение.АдресныйОбъект);
	КонецЦикла;

	// Сортировка по убыванию длины для исключения
	// включения адресных объектов друг в друга.
	АдресныеСокращения.Свернуть("АдресныйОбъект, СокращениеОбъекта, ДлинаПредставленияОбъекта");
	АдресныеСокращения.Сортировать("ДлинаПредставленияОбъекта Убыв");
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПредставлениеАдреса, ",", Истина);
	
	ПредставлениеАдреса = "";
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		Для Каждого ТекСокращение Из АдресныеСокращения Цикл
			Если НЕ ЗначениеЗаполнено(ТекСокращение.АдресныйОбъект) Тогда
				Продолжить;
			КонецЕсли;
			
			СокрСтрока = ТекСтрока;
			Если СтрНайти(СокрСтрока, "  ") <> 0 Тогда
				МассивБезПробелов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПредставлениеАдреса, " ", Истина);
				Для Каждого ТекСтрокаБезПробела Из МассивБезПробелов Цикл
					СокрСтрока = ?(ЗначениеЗаполнено(СокрСтрока), СокрСтрока + " " + ТекСтрокаБезПробела, ТекСтрокаБезПробела);
				КонецЦикла;
			КонецЕсли;
			СокрСтрока = СокрЛП(ТекСтрока);

			СтрПоиска			 = НРег(ТекСокращение.АдресныйОбъект);
			СтрПоискаСокр		 = НРег(ТекСокращение.СокращениеОбъекта);
			НомерВхождения		 = СтрНайти(НРег(СокрСтрока), СтрПоиска);
			НомерВхожденияСокр	 = СтрНайти(НРег(СокрСтрока), СтрПоискаСокр);
			СтрДлина			 = СтрДлина(СтрПоиска);
			СтрДлинаСокр		 = СтрДлина(СтрПоискаСокр);
			
			ФразаВначале = НомерВхождения = 1 И Прав(Лев(СокрСтрока, СтрДлина + 1),1) = " ";
			ФразаВконце	 = НомерВхождения <> 0 И НомерВхождения -1 + СтрДлина = СтрДлина(СокрСтрока)
				И Лев(Прав(СокрСтрока, СтрДлина + 1),1) = " ";
			
			ФразаВначалеСокр = НомерВхожденияСокр = 1 И Прав(Лев(СокрСтрока, СтрДлинаСокр + 1),1) = " ";
			ФразаВконцСокр	 = НомерВхожденияСокр <> 0 И НомерВхожденияСокр -1 + СтрДлинаСокр = СтрДлина(СокрСтрока)
				И Лев(Прав(СокрСтрока, СтрДлинаСокр + 1),1) = " ";
			
			Если ФразаВначале ИЛИ ФразаВконце Тогда
				Если ФразаВначале Тогда
					СокрСтрока = СокрЛП(Сред(СокрСтрока, НомерВхождения + СтрДлина, СтрДлина(СокрСтрока)));
				Иначе
					СокрСтрока = СокрЛП(Сред(СокрСтрока, 0, НомерВхождения - 1));
				КонецЕсли;
				Прервать;
			ИначеЕсли ФразаВначалеСокр ИЛИ ФразаВконцСокр Тогда
				Если ФразаВначалеСокр Тогда
					СокрСтрока = СокрЛП(Сред(СокрСтрока, НомерВхожденияСокр + СтрДлинаСокр, СтрДлина(СокрСтрока)));
				Иначе
					СокрСтрока = СокрЛП(Сред(СокрСтрока, 0, НомерВхожденияСокр - 1));
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПредставлениеАдреса = ?(ЗначениеЗаполнено(ПредставлениеАдреса), ПредставлениеАдреса + ", " + СокрСтрока, СокрСтрока);
	КонецЦикла;
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция НаименованиеАдресногоСокращения(Знач АдресноеСокращение)
	
	Наименование = уатОбщегоНазначенияПовтИсп_проф.ПолноеНаименованиеАдресногоСокращения(АдресноеСокращение);	
	Если Наименование = Неопределено Тогда
		Наименование = "";
	КонецЕсли;
	
	Возврат СокрЛП(Наименование);
	
КонецФункции // НаименованиеАдресногоСокращения()

// Функция расчитывает показатель ETA (ожидаемое время прибытия)
//
// Параметры:
//  ТочкаОтправления - Структура - координаты ("Лат", "Лон") точки отправления
//  ТочкаНазначения  - Структура - координаты ("Лат", "Лон") точки назначения
//  ВремяВыезда      - Структура - время выезда из точки отправления
//  ДопПараметры     - Структура - дополнительные параметры
//  ТекстОшибки      - Структура - текст описания ошибки
// Возвращаемое значение:
//   - Структура - ключи: 
//               * - "Расстояние" - расстояние маршрута, км
//               * - "Время"      - время движения, сек
//               * - "ETA"        - дата прибытия в точку назначения
//
Функция РасчитатьETA_OSM(Знач ТочкаОтправления, Знач ТочкаНазначения, Знач ВремяВыезда, Знач ДопПараметры, ТекстОшибки) Экспорт
	
	Результат = Новый Структура("Расстояние, Время, ETA",0,'00010101','00010101');
	
	Если ДопПараметры = Неопределено Или Не ТипЗнч(ДопПараметры) = Тип("Структура") Тогда 
		ТекстОшибки = НСтр("en='Invalid parameter ""AddParameters"" in function ""ETA"".';ru='Неверно указан параметр ""ДопПараметры"" в функции ""ETA"".'");
		Возврат Результат;
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ТипКартографии") Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify mapping type in add. parameters of function ""ETA"".';ru='Необходимо указать тип картографии в доп. параметрах функции ""ETA"".'");
		Возврат Результат;
	КонецЕсли;
	
	Если Не (ДопПараметры.ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM") 
			Или ДопПараметры.ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")) Тогда 
		ТекстОшибки = НСтр("en='Invalid type of mapping is used to calculate ETA.';ru='Указан неверный тип картографии для расчета ETA.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ТочкаОтправления.Лат = 0 И ТочкаОтправления.Лон = 0 Тогда
		ТекстОшибки = НСтр("en='Not specified coordinates of departure address.';ru='Не указаны координаты адреса отправления.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ТочкаНазначения.Лат = 0 И ТочкаНазначения.Лон = 0 Тогда
		ТекстОшибки = НСтр("en='Not specified the coordinates of the destination address.';ru='Не указаны координаты адреса назначения.'");
		Возврат Результат;
	КонецЕсли;
	
	мсвТочкиМаршрута = Новый Массив();
	мсвТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ТочкаОтправления.Лат, ТочкаОтправления.Лон));
	мсвТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ТочкаНазначения.Лат, ТочкаНазначения.Лон));
	
	ДанныеМаршрута = Неопределено;
	Если уатЗащищенныеФункцииСервер.РассчитатьМаршрут(мсвТочкиМаршрута, ДанныеМаршрута, ТекстОшибки) Тогда 
		Результат.Расстояние = ДанныеМаршрута.Расстояние / 1000;
		Результат.Время      = ДанныеМаршрута.Время;
		Результат.ETA        = ВремяВыезда + Результат.Время;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСервераКартографииМаршрутизацииПоУмолчанию() Экспорт
	
	СтруктураНастроек = Новый Структура();
	
	ТипПоставщикаПустой = Перечисления.уатТипыЭлектронныхКарт.ПустаяСсылка();
	ТипПоставщикаЯндекс = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
	ТипПоставщикаOSM    = Перечисления.уатТипыЭлектронныхКарт.OSM;
	
	СтруктураНастроек.Вставить("Картография_Использование",         Ложь);
	СтруктураНастроек.Вставить("Картография_ТипПоставщика",         ТипПоставщикаПустой);
	СтруктураНастроек.Вставить("Картография_Сервер",                "");
	СтруктураНастроек.Вставить("Картография_Ключ",                  "");
	
	СтруктураНастроек.Вставить("Геокодирование_Использование",      Ложь);
	СтруктураНастроек.Вставить("Геокодирование_ТипПоставщика",      ТипПоставщикаПустой);
	СтруктураНастроек.Вставить("Геокодирование_Сервер",             "");
	СтруктураНастроек.Вставить("Геокодирование_Ключ",               "");
	СтруктураНастроек.Вставить("Геокодирование_ДополнительныйКлюч", "");
	
	СтруктураНастроек.Вставить("ПодсказкиАдресов_Использование",    Ложь);
	СтруктураНастроек.Вставить("ПодсказкиАдресов_ТипПоставщика",    ТипПоставщикаПустой);
	СтруктураНастроек.Вставить("ПодсказкиАдресов_Сервер",           "");
	СтруктураНастроек.Вставить("ПодсказкиАдресов_Ключ",             "");
	СтруктураНастроек.Вставить("ПодсказкиАдресов_СоздаватьПунктыВЗаказеНаТС", Ложь);
	
	СтруктураНастроек.Вставить("ПостроениеМаршрутов_Использование", Ложь);
	СтруктураНастроек.Вставить("ПостроениеМаршрутов_ТипПоставщика", ТипПоставщикаПустой);
	СтруктураНастроек.Вставить("ПостроениеМаршрутов_Сервер",        "");
	СтруктураНастроек.Вставить("ПостроениеМаршрутов_Ключ",          "");
	
	СтруктураНастроек.Вставить("ПостроениеМаршрутовЖД_Использование", Истина);
	СтруктураНастроек.Вставить("ПостроениеМаршрутовЖД_ТипПоставщика", ТипПоставщикаOSM);
	СтруктураНастроек.Вставить("ПостроениеМаршрутовЖД_Сервер",        "https://signal.eu.org/osm/eu/");
	
	СтруктураНастроек.Вставить("Навигация_Использование",           Ложь);
	СтруктураНастроек.Вставить("Навигация_ТипПоставщика",           ТипПоставщикаЯндекс);
	СтруктураНастроек.Вставить("Навигация_Сервер",                  "");
	СтруктураНастроек.Вставить("Навигация_Ключ",                    "");
	СтруктураНастроек.Вставить("Навигация_ИдентификаторКлиента",    "");

	СтруктураНастроек.Вставить("Маршрутизация_Использование",          Ложь);
	СтруктураНастроек.Вставить("Маршрутизация_ТипПоставщика",          ТипПоставщикаЯндекс);
	СтруктураНастроек.Вставить("Маршрутизация_Сервер",                 "");
	СтруктураНастроек.Вставить("Маршрутизация_ИдентификаторКомпании",  "");
	СтруктураНастроек.Вставить("Маршрутизация_Ключ",                   "");
	СтруктураНастроек.Вставить("Маршрутизация_Токен",                  "");
	СтруктураНастроек.Вставить("Маршрутизация_ТипАвторизации",         "API-ключ");
	
	Возврат СтруктураНастроек;
	
КонецФункции // НастройкиСервераКартографииМаршрутизацииПоУмолчанию()

// Функция предназначена для получения настроек подключения к серверам картографии
// и маршрутизации.
//
Функция ПолучитьНастройкиСервераКартографииМаршрутизации() Экспорт
	
	Возврат уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиСервераКартографииМаршрутизации();
	
КонецФункции // ПолучитьНастройкиСервераКартографииМаршрутизации()

// Функция предназначена для получения настроек подключения к серверам картографии
// и маршрутизации.
//
Функция ПолучитьНастройкуСервераКартографииМаршрутизации(НаименованиеНастройки = "") Экспорт
	
	СтруктураНастроек = ПолучитьНастройкиСервераКартографииМаршрутизации();
	
	ЗначениеНастройки = "";
	СтруктураНастроек.Свойство(НаименованиеНастройки, ЗначениеНастройки);
	
	Если ЗначениеНастройки = Неопределено Тогда
		ЗначениеНастройки = "";
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции // ПолучитьНастройкиСервераКартографииМаршрутизации()

// Процедура предназначена для установки настроек подключения к серверам картографии
// и маршрутизации.
//
Процедура СохранитьНастройкиСервераКартографииМаршрутизации(Знач СтруктураНастроек) Экспорт
	
	БазаНастроек = НастройкиСервераКартографииМаршрутизацииПоУмолчанию();
	
	Для Каждого ТекНастройка Из БазаНастроек Цикл 
		Если СтруктураНастроек.Свойство(ТекНастройка.Ключ) Тогда
			БазаНастроек.Вставить(ТекНастройка.Ключ, СтруктураНастроек[ТекНастройка.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Константы.уатСерверКартографииМаршрутизации.Установить(Новый ХранилищеЗначения(БазаНастроек, Новый СжатиеДанных(9)));
	
КонецПроцедуры

Функция ПараметрыПроксиСервераПоУмолчанию()
	
	стрПараметрыПроксиСервераOSM = Новый Структура();
	стрПараметрыПроксиСервераOSM.Вставить("ВариантИспользования", 0);
	стрПараметрыПроксиСервераOSM.Вставить("Адрес",                "");
	стрПараметрыПроксиСервераOSM.Вставить("Порт",                 0);
	стрПараметрыПроксиСервераOSM.Вставить("Пользователь",         "");
	стрПараметрыПроксиСервераOSM.Вставить("Пароль",               "");
	
	Возврат стрПараметрыПроксиСервераOSM;
	
КонецФункции // ПараметрыПроксиСервераПоУмолчанию()

// Функция предназначена для получения параметров прокси-сервера.
//
Функция ПолучитьПараметрыПроксиСервера() Экспорт
	
	стрПараметрыПроксиСервера = ПараметрыПроксиСервераПоУмолчанию();
	
	ХранилищеНастроек = Константы.уатПараметрыПроксиСервера.Получить();
	Если ХранилищеНастроек = Неопределено Тогда 
		Возврат стрПараметрыПроксиСервера;
	КонецЕсли;
	стрПараметры = ХранилищеНастроек.Получить();
	Если стрПараметры = Неопределено Тогда 
		Возврат стрПараметрыПроксиСервера;
	КонецЕсли;
	
	Для Каждого ТекНастройка Из стрПараметрыПроксиСервера Цикл 
		Если стрПараметры.Свойство(ТекНастройка.Ключ) Тогда
			стрПараметрыПроксиСервера.Вставить(ТекНастройка.Ключ, стрПараметры[ТекНастройка.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат стрПараметрыПроксиСервера;
	
КонецФункции // ПолучитьПараметрыПроксиСервера()

// Процедура предназначена для установки параметров прокси-сервера OSM.
//
Процедура СохранитьПараметрыПроксиСервера(Знач СтруктураПараметров) Экспорт
	
	БазаПараметров = ПараметрыПроксиСервераПоУмолчанию();
	
	Для Каждого ТекНастройка Из БазаПараметров Цикл 
		Если СтруктураПараметров.Свойство(ТекНастройка.Ключ) Тогда
			БазаПараметров.Вставить(ТекНастройка.Ключ, СтруктураПараметров[ТекНастройка.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Константы.уатПараметрыПроксиСервера.Установить(Новый ХранилищеЗначения(БазаПараметров, Новый СжатиеДанных(9)));
	
КонецПроцедуры

// Функция предназначена для преобразования текста ответа сервера геокодирования в массив объектов.
//
// Параметры:
//  ОтветГеокодера - Строка - содержит текст ответа сервера геокодирования.
//
// Возвращаемое значение:
//   Массив - массив полученных объектов.
//
Функция ДесериализоватьОтветГеокодера(Знач ОтветГеокодера) Экспорт
	
	Результат = Новый Массив();
	
	XMLотфильтрованый = ОтветГеокодера;
	
	// Удаление из текста XML неверных символов
	Для Сч = 0 По 31 Цикл 
		XMLотфильтрованый = СтрЗаменить(XMLотфильтрованый, Символ(Сч), "");
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(XMLотфильтрованый);
	
	Пока ЧтениеXML.Прочитать() Цикл 
		стрОбъект = Неопределено;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("place") Тогда
			стрОбъект = Новый Структура();
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
				стрОбъект.Вставить(Строка(ЧтениеXML.Имя), ЧтениеXML.Значение);
			КонецЦикла;
			Результат.Добавить(стрОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции // ДесериализоватьОтветГеокодера()

// Функция предназначена для получения координат пункта по его адресу с помощью системы геокодирования.
//
// Параметры:
//  стрАдрес     - Строка    - адрес пункта.
//  ДопПараметры - Структура - дополнительные параметры.
//  ТекстОшибки  - Строка    - описание возникшей ошибки.
// 
// Возвращаемое значение:
//   - Структура, содержащая координаты пункта.
//
Функция ГеокодироватьАдресOSM(Знач стрАдрес, Знач ДопПараметры=Неопределено, ТекстОшибки, КоличествоПолученныхРезультатов = Неопределено) Экспорт
	
	Координаты = Новый Структура("Лат, Лон", 0, 0);
	Если Не ДопПараметры = Неопределено И ДопПараметры.Свойство("РезультатВМассив") Тогда
		ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
		Если НЕ ЗначениеЗаполнено(ТипИспользуемыхЭлектронныхКарт) Тогда
			ТекстНСТР = Нстр("ru = 'Для выбора из нескольких вариантов геокодирования пунктов необходимо включить сервис ""Подсказки при вводе адресов""
				|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
			Возврат Координаты;
		КонецЕсли;
	Иначе
		ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
		Если НЕ ЗначениеЗаполнено(ТипИспользуемыхЭлектронныхКарт) Тогда
			ТекстНСТР = Нстр("ru = 'Для геокодирования пунктов необходимо включить сервис ""Геокодирование""
				|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
			Возврат Координаты;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда 
		Возврат уатЗащищенныеФункцииСервер_проф.ВнешнийМаршрутизатор_ГеокодироватьАдресВнешняяСистема(стрАдрес, ДопПараметры, ТекстОшибки, КоличествоПолученныхРезультатов);
	ИначеЕсли ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда 
		Возврат уатЗащищенныеФункцииСервер_проф.DaData_ГеокодироватьАдрес(стрАдрес, ДопПараметры, ТекстОшибки, КоличествоПолученныхРезультатов);
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено И ДопПараметры.Свойство("РезультатВМассив") Тогда
		СерверГеокодирования = ПолучитьНастройкуСервераКартографииМаршрутизации("ПодсказкиАдресов_Сервер");
	Иначе
		СерверГеокодирования = ПолучитьНастройкуСервераКартографииМаршрутизации("Геокодирование_Сервер");
	КонецЕсли;
	
	Если НРег(Лев(СерверГеокодирования, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		СерверГеокодирования = СтрЗаменить(СерверГеокодирования, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		СерверГеокодирования = СтрЗаменить(СерверГеокодирования, "http://", "");
	КонецЕсли;
	
	позАдресПорт = СтрНайти(СерверГеокодирования, ":");
	Если позАдресПорт = 0 Тогда 
		позКонец = СтрНайти(СерверГеокодирования, "/");
		Если позКонец = 0 Тогда 
			АдресСервера = СерверГеокодирования;
		Иначе 
			АдресСервера = Лев(СерверГеокодирования, позКонец-1);
		КонецЕсли;
		
		ПортСервера = ?(ИспользоватьЗащищенноеСоединение, 443, 80);
		
	Иначе 
		АдресСервера = Лев(СерверГеокодирования, позАдресПорт-1);
		
		СерверГеокодирования = Прав(СерверГеокодирования, СтрДлина(СерверГеокодирования)-позАдресПорт);
		
		позКонец = СтрНайти(СерверГеокодирования, "/");
		Если позКонец = 0 Тогда 
			стрПорт = СерверГеокодирования;
		Иначе 
			стрПорт = Лев(СерверГеокодирования, позКонец-1);
		КонецЕсли;
		
		Попытка
			ПортСервера = Число(стрПорт);
		Исключение
			ПортСервера = ?(ИспользоватьЗащищенноеСоединение, 443, 80);
		КонецПопытки;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(?(ИспользоватьЗащищенноеСоединение, "https", "http"));
	
	Если ИспользоватьЗащищенноеСоединение Тогда 
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе 
		ЗащищенноеСоединениеOpenSSL = Неопределено;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(
			АдресСервера, 
			ПортСервера,
			,
			,
			ИнтернетПрокси,
			10, 
			ЗащищенноеСоединениеOpenSSL
		);
		
	Исключение
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error while connecting to geocoding server.';ru='Ошибка при установке соединения с сервером геокодирования.'");
		Возврат Координаты;
	КонецПопытки;
	
	// Необходимо экранировать некоторые символы.
	стрАдрес = СтрЗаменить(стрАдрес, " ", "+");
	
	ТекстЗапроса = "search?q=" + стрАдрес + "&format=xml";
	
	Если Не ДопПараметры = Неопределено И ДопПараметры.Свойство("КоличествоРезультат") Тогда 
		ТекстЗапроса = ТекстЗапроса + "&limit=" + Формат(ДопПараметры.КоличествоРезультат, "ЧДЦ=; ЧН=0; ЧГ=0");
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error occurred while retrieving data from the geocoding server.';ru='Ошибка при получении данных от сервера геокодирования.'");
		Возврат Координаты;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		мсвНайденныеОбъекты = ДесериализоватьОтветГеокодера(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		HTTPСоединение = Неопределено;
		
		Если ТипЗнч(мсвНайденныеОбъекты) = Тип("Массив") Тогда
			КоличествоПолученныхРезультатов = мсвНайденныеОбъекты.Количество();
		КонецЕсли;
		
		Если Не ДопПараметры = Неопределено И ДопПараметры.Свойство("РезультатВМассив") Тогда 
			Возврат мсвНайденныеОбъекты;
		КонецЕсли;
		
		АдресНайден = Ложь;
		
		// 1 проход по домам
		Если ДопПараметры = Неопределено Или Не ДопПараметры.Свойство("ЕстьДомИлиУлица") Или ДопПараметры.ЕстьДомИлиУлица = Истина Тогда
			// Если ДопПараметры.ЕстьДомИлиУлица = Ложь, тогда сюда не заходим, потому что приоритета у домов нету.
			Для Каждого ТекОбъект Из мсвНайденныеОбъекты Цикл 
				Если ТекОбъект.Свойство("class") И ТекОбъект.class = "building" Тогда 
					Попытка
						Если ТекОбъект.Свойство("lat") И ТекОбъект.Свойство("lon") Тогда 
							Координаты.Лат  = Число(ТекОбъект.lat);
							Координаты.Лон = Число(ТекОбъект.lon);
						Иначе 
							ВызватьИсключение НСтр("en='Error in structure of geocoding server response.';ru='Ошибка в структуре ответа сервера геокодирования.'");
						КонецЕсли;
					Исключение
						ТекстОшибки = НСтр("en='Error while processing of geocoding server response.';ru='Ошибка при обработке ответа сервера геокодирования.'");
						Возврат Координаты;
					КонецПопытки;
					АдресНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// 2 проход по всем
		Если Не АдресНайден Тогда 
			Для Каждого ТекОбъект Из мсвНайденныеОбъекты Цикл 
				Попытка
					Если ТекОбъект.Свойство("lat") И ТекОбъект.Свойство("lon") Тогда 
						Координаты.Лат  = Число(ТекОбъект.lat);
						Координаты.Лон = Число(ТекОбъект.lon);
					Иначе 
						ВызватьИсключение НСтр("en='Error in structure of geocoding server response.';ru='Ошибка в структуре ответа сервера геокодирования.'");
					КонецЕсли;
				Исключение
					ТекстОшибки = НСтр("en='Error while processing of geocoding server response.';ru='Ошибка при обработке ответа сервера геокодирования.'");
					Возврат Координаты;
				КонецПопытки;
				АдресНайден = Истина;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		Если Не АдресНайден Тогда
			ТекстОшибки = НСтр("en='Failed to get coordinates for address';ru='Не удалось получить координаты по адресу'") + " """+стрАдрес+"""." + Символы.ПС + 
			НСтр("en='Try to input other names or key words.';ru='Попробуйте ввести другие названия или ключевые слова.'");
		КонецЕсли;
		
		Возврат Координаты;
		
	Иначе
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error occurred while accessing to geocoding server. Error code:';ru='Ошибка при обращении к серверу геокодирования. Код ошибки:'") +" " + Строка(HTTPОтвет.КодСостояния);
		Возврат Координаты;
	КонецЕсли;
	
КонецФункции // ГеокодироватьАдресOSM()

Функция ПолучитьПодсказкиПоАдресу(Знач стрАдрес, ТекстОшибки = "") Экспорт
	
	СписокПодсказок = Новый СписокЗначений;
	ТипКартографии = ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
	Если ТипКартографии = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда
		СписокРезультатов = уатИнтеграции_проф.ПолучитьПодсказкиПоАдресуDaData(стрАдрес, ТекстОшибки);
		Если ТекстОшибки = "" Тогда
			КартинкаПодсказки = БиблиотекаКартинок.уатDaData;
			Для Каждого ТекРезультат Из СписокРезультатов Цикл
				ПредставлениеАдреса = ТекРезультат.ПредставлениеАдреса;
				ЗначениеАдреса = ТекРезультат.ЗначениеАдреса;
				Широта = ТекРезультат.Широта;
				Долгота = ТекРезультат.Долгота;
				ЗаписьJSON = Новый ЗаписьJSON();
				ЗаписьJSON.УстановитьСтроку();
				СтруктураПодсказки = Новый Структура;
				СтруктураПодсказки.Вставить("ПредставлениеАдреса", ПредставлениеАдреса);
				СтруктураПодсказки.Вставить("ЗначениеАдреса",      ЗначениеАдреса);
				СтруктураПодсказки.Вставить("Широта",              Широта);
				СтруктураПодсказки.Вставить("Долгота",             Долгота);
				ЗаписатьJSON(ЗаписьJSON, СтруктураПодсказки);
				СтруктураПодсказкиJSON = ЗаписьJSON.Закрыть();
				СписокПодсказок.Добавить(СтруктураПодсказкиJSON, ПредставлениеАдреса,, КартинкаПодсказки);
			КонецЦикла;
		КонецЕсли;
		Возврат СписокПодсказок;
	ИначеЕсли ТипКартографии = Перечисления.уатТипыЭлектронныхКарт.Яндекс
		Или ТипКартографии = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда
		ДопПараметры = Новый Структура("РезультатВМассив", Истина);
		МассивРезультатов = ГеокодироватьАдресOSM(стрАдрес, ДопПараметры, ТекстОшибки);
		Если ТекстОшибки = "" Тогда
			Если ТипКартографии = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда
				КартинкаПодсказки = БиблиотекаКартинок.ЯндексКарты;
			Иначе
				КартинкаПодсказки = БиблиотекаКартинок.уатOSM;
			КонецЕсли;
			Для Каждого ТекРезультат Из МассивРезультатов Цикл
				ПредставлениеАдреса = ТекРезультат.display_name;
				Широта = ТекРезультат.lat;
				Долгота = ТекРезультат.lon;
				ЗаписьJSON = Новый ЗаписьJSON();
				ЗаписьJSON.УстановитьСтроку();
				СтруктураПодсказки = Новый Структура;
				СтруктураПодсказки.Вставить("ПредставлениеАдреса", ПредставлениеАдреса);
				СтруктураПодсказки.Вставить("Широта",              Широта);
				СтруктураПодсказки.Вставить("Долгота",             Долгота);
				ЗаписатьJSON(ЗаписьJSON, СтруктураПодсказки);
				СтруктураПодсказкиJSON = ЗаписьJSON.Закрыть();
				СписокПодсказок.Добавить(СтруктураПодсказкиJSON, ПредставлениеАдреса,, КартинкаПодсказки);
			КонецЦикла;
		КонецЕсли;
		Возврат СписокПодсказок;
	Иначе
		Возврат СписокПодсказок;
	КонецЕсли;
	
КонецФункции

// Функция предназначена для получения координат пункта по его адресу с помощью системы геокодирования.
//
// Параметры:
//  стрАдрес     - Строка    - адрес пункта.
//  ДопПараметры - Структура - дополнительные параметры.
//  ТекстОшибки  - Строка    - описание возникшей ошибки.
// 
// Возвращаемое значение:
//   - Структура, содержащая координаты пункта.
//
Функция ПроверитьВозможностьГеокодированияАдресаOSM(ТекстОшибки) Экспорт
	
	ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
	
	Если НЕ ЗначениеЗаполнено(ТипИспользуемыхЭлектронныхКарт) Тогда 
		ТекстОшибки = Нстр("ru = 'Для геокодирования пунктов необходимо включить сервис ""Геокодирование""
		|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
		Возврат Ложь;
	ИначеЕсли ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда 
		Возврат уатЗащищенныеФункцииСервер_проф.ВнешнийМаршрутизатор_ПроверитьВозможностьГеокодироватьАдресВнешняяСистема(ТекстОшибки);
	ИначеЕсли ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда
		стрАдрес = "Москва";
		ГеокодироватьАдресOSM(стрАдрес,, ТекстОшибки);
		АдресГеокодированУспешно = ТекстОшибки = "";
		Возврат АдресГеокодированУспешно;
	КонецЕсли;
		
	стрАдрес = "";
	
	Координаты = Новый Структура("Лат, Лон", 0, 0);
	
	СерверГеокодирования = ПолучитьНастройкуСервераКартографииМаршрутизации("Геокодирование_Сервер");
	
	Если НРег(Лев(СерверГеокодирования, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		СерверГеокодирования = СтрЗаменить(СерверГеокодирования, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		СерверГеокодирования = СтрЗаменить(СерверГеокодирования, "http://", "");
	КонецЕсли;
	
	позАдресПорт = СтрНайти(СерверГеокодирования, ":");
	Если позАдресПорт = 0 Тогда 
		позКонец = СтрНайти(СерверГеокодирования, "/");
		Если позКонец = 0 Тогда 
			АдресСервера = СерверГеокодирования;
		Иначе 
			АдресСервера = Лев(СерверГеокодирования, позКонец-1);
		КонецЕсли;
		
		ПортСервера = ?(ИспользоватьЗащищенноеСоединение, 443, 80);
		
	Иначе 
		АдресСервера = Лев(СерверГеокодирования, позАдресПорт-1);
		
		СерверГеокодирования = Прав(СерверГеокодирования, СтрДлина(СерверГеокодирования)-позАдресПорт);
		
		позКонец = СтрНайти(СерверГеокодирования, "/");
		Если позКонец = 0 Тогда 
			стрПорт = СерверГеокодирования;
		Иначе 
			стрПорт = Лев(СерверГеокодирования, позКонец-1);
		КонецЕсли;
		
		Попытка
			ПортСервера = Число(стрПорт);
		Исключение
			ПортСервера = ?(ИспользоватьЗащищенноеСоединение, 443, 80);
		КонецПопытки;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(?(ИспользоватьЗащищенноеСоединение, "https", "http"));
	
	Если ИспользоватьЗащищенноеСоединение Тогда 
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе 
		ЗащищенноеСоединениеOpenSSL = Неопределено;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(
			АдресСервера, 
			ПортСервера,
			,
			,
			ИнтернетПрокси,
			10, 
			ЗащищенноеСоединениеOpenSSL
		);
		
	Исключение
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error while connecting to geocoding server.';ru='Ошибка при установке соединения с сервером геокодирования.'");
		Возврат Ложь;
	КонецПопытки;
	
	// Необходимо экранировать некоторые символы.
	стрАдрес = СтрЗаменить(стрАдрес, " ", "+");
	
	ТекстЗапроса = "search?q=" + стрАдрес + "&format=xml";
	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error occurred while retrieving data from the geocoding server.';ru='Ошибка при получении данных от сервера геокодирования.'");
		Возврат Ложь;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		мсвНайденныеОбъекты = ДесериализоватьОтветГеокодера(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		HTTPСоединение = Неопределено;
		
		АдресНайден = Ложь;
		
		// 1 проход по домам
		Для Каждого ТекОбъект Из мсвНайденныеОбъекты Цикл 
			Если ТекОбъект.Свойство("class") И ТекОбъект.class = "building" Тогда 
				Попытка
					Если ТекОбъект.Свойство("lat") И ТекОбъект.Свойство("lon") Тогда 
						Координаты.Лат  = Число(ТекОбъект.lat);
						Координаты.Лон = Число(ТекОбъект.lon);
					Иначе 
						ВызватьИсключение НСтр("en='Error in structure of geocoding server response.';ru='Ошибка в структуре ответа сервера геокодирования.'");
					КонецЕсли;
				Исключение
					ТекстОшибки = НСтр("en='Error while processing of geocoding server response.';ru='Ошибка при обработке ответа сервера геокодирования.'");
					Возврат Ложь;
				КонецПопытки;
				АдресНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// 2 проход по всем
		Если Не АдресНайден Тогда 
			Для Каждого ТекОбъект Из мсвНайденныеОбъекты Цикл 
				Попытка
					Если ТекОбъект.Свойство("lat") И ТекОбъект.Свойство("lon") Тогда 
						Координаты.Лат  = Число(ТекОбъект.lat);
						Координаты.Лон = Число(ТекОбъект.lon);
					Иначе 
						ВызватьИсключение НСтр("en='Error in structure of geocoding server response.';ru='Ошибка в структуре ответа сервера геокодирования.'");
					КонецЕсли;
				Исключение
					ТекстОшибки = НСтр("en='Error while processing of geocoding server response.';ru='Ошибка при обработке ответа сервера геокодирования.'");
					Возврат Ложь;
				КонецПопытки;
				АдресНайден = Истина;
				Прервать;
			КонецЦикла;
		КонецЕсли;
			
		Возврат Истина;
		
	Иначе
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error occurred while accessing to geocoding server. Error code:';ru='Ошибка при обращении к серверу геокодирования. Код ошибки:'") +" " + Строка(HTTPОтвет.КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАдресПоКоординатамOSM(Знач Широта, Знач Долгота, Знач ДопПараметры=Неопределено, ТекстОшибки="") Экспорт
	
	ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
	
	Если НЕ ЗначениеЗаполнено(ТипИспользуемыхЭлектронныхКарт) Тогда 
		ТекстНСТР = НСтр("ru = 'Для геокодирования пунктов необходимо включить сервис ""Геокодирование""
		|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
		Возврат "";
	ИначеЕсли ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда 
		Возврат уатЗащищенныеФункцииСервер_проф.ВнешнийМаршрутизатор_ОбратноеГеокодированиеВнешняяСистема(Широта, Долгота, ДопПараметры, ТекстОшибки);
	ИначеЕсли ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.DaData Тогда
		ТекстОшибки = НСтр("ru = 'Для сервиса геокодирования DaData получение адреса по координатам запрещено'");
		Возврат "";
	КонецЕсли;
	
	СерверГеокодирования = ПолучитьНастройкуСервераКартографииМаршрутизации("Геокодирование_Сервер");
	
	Если НРег(Лев(СерверГеокодирования, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		СерверГеокодирования = СтрЗаменить(СерверГеокодирования, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		СерверГеокодирования = СтрЗаменить(СерверГеокодирования, "http://", "");
	КонецЕсли;
	
	позАдресПорт = СтрНайти(СерверГеокодирования, ":");
	Если позАдресПорт = 0 Тогда 
		позКонец = СтрНайти(СерверГеокодирования, "/");
		Если позКонец = 0 Тогда 
			АдресСервера = СерверГеокодирования;
		Иначе 
			АдресСервера = Лев(СерверГеокодирования, позКонец-1);
		КонецЕсли;
		
		ПортСервера = ?(ИспользоватьЗащищенноеСоединение, 443, 80);
		
	Иначе 
		АдресСервера = Лев(СерверГеокодирования, позАдресПорт-1);
		
		СерверГеокодирования = Прав(СерверГеокодирования, СтрДлина(СерверГеокодирования)-позАдресПорт);
		
		позКонец = СтрНайти(СерверГеокодирования, "/");
		Если позКонец = 0 Тогда 
			стрПорт = СерверГеокодирования;
		Иначе 
			стрПорт = Лев(СерверГеокодирования, позКонец-1);
		КонецЕсли;
		
		Попытка
			ПортСервера = Число(стрПорт);
		Исключение
			ПортСервера = ?(ИспользоватьЗащищенноеСоединение, 443, 80);
		КонецПопытки;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(?(ИспользоватьЗащищенноеСоединение, "https", "http"));
	
	Если ИспользоватьЗащищенноеСоединение Тогда 
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе 
		ЗащищенноеСоединениеOpenSSL = Неопределено;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(
			АдресСервера, 
			ПортСервера,
			,
			,
			ИнтернетПрокси,
			10, 
			ЗащищенноеСоединениеOpenSSL
		);
		
	Исключение
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error while connecting to geocoding server.';ru='Ошибка при установке соединения с сервером геокодирования.'");
		Возврат "";
	КонецПопытки;
	
	ТекстЗапроса = "reverse?lat=" + Формат(Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0")
		+ "&lon=" + Формат(Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "&format=xml&zoom=18&addressdetails=1";
	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error occurred while retrieving data from the geocoding server.';ru='Ошибка при получении данных от сервера геокодирования.'");
		Возврат "";
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		стрРезультат = Новый Структура();
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("result") Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 
					стрРезультат.Вставить(Строка(ЧтениеXML.Имя), ЧтениеXML.Значение);
				КонецЦикла;
				ЧтениеXML.Прочитать();
				стрРезультат.Вставить("view", ЧтениеXML.Значение);
				Продолжить;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("addressparts") Тогда
				стрАдресДетально = Новый Структура();
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("addressparts")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
						врИмяУзла = Строка(ЧтениеXML.Имя);
						ЧтениеXML.Прочитать();
						Попытка
							стрАдресДетально.Вставить(врИмяУзла, ЧтениеXML.Значение);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				стрРезультат.Вставить("addressparts", стрАдресДетально);
			КонецЕсли;
		КонецЦикла;
		
		Если стрРезультат.Свойство("view") Тогда 
			Возврат стрРезультат.view;
		Иначе 
			Возврат "";
		КонецЕсли;
		
	Иначе
		HTTPСоединение = Неопределено;
		ТекстОшибки = НСтр("en='Error occurred while accessing to geocoding server. Error code:';ru='Ошибка при обращении к серверу геокодирования. Код ошибки:'") +" " + Строка(HTTPОтвет.КодСостояния);
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьАдресПоКоординатамOSM()

// Функция возвращает объект "Цвет" по индексу из массива досутпных цветов.
//
// Параметры:
//  ИндексЦвета - Число - индекс цвета в массиве.
// 
// Возвращаемое значение:
//   - Цвет.
//
Функция ПолучитьЦветДокументаПоКоллекции(Знач НомерЦвета) Экспорт
	
	МассивЦветов = ПолучитьМассивЦветов();
	
	ИндексЦвета = НомерЦвета - 1;
	
	Если ИндексЦвета > 15 Или ИндексЦвета < 0 Тогда 
		Возврат Новый Цвет();
	Иначе 
		Возврат МассивЦветов[ИндексЦвета];
	КонецЕсли;
	
КонецФункции // ПолучитьЦветДокументаПоКоллекции()

// Процедура предназначена для формирования списка выбора в поле формы.
//
// Параметры:
//  ЭлементПолеВыбора - элемент формы, для которого необходимо заполнить список выбора.
//
Процедура УстановитьСписокВыбораЦветовВПоле(ЭлементПолеВыбора) Экспорт
	
	ЭлементПолеВыбора.СписокВыбора.Очистить();
	
	ЭлементПолеВыбора.СписокВыбора.Добавить(1,  "синий",,           БиблиотекаКартинок.уатЦветДокументаСиний);
	ЭлементПолеВыбора.СписокВыбора.Добавить(2,  "красный",,         БиблиотекаКартинок.уатЦветДокументаКрасный);
	ЭлементПолеВыбора.СписокВыбора.Добавить(3,  "темно-оранжевый",, БиблиотекаКартинок.уатЦветДокументаТемноОранжевый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(4,  "ночной",,          БиблиотекаКартинок.уатЦветДокументаНочной);
	ЭлементПолеВыбора.СписокВыбора.Добавить(5,  "темно-синий",,     БиблиотекаКартинок.уатЦветДокументаТемноСиний);
	ЭлементПолеВыбора.СписокВыбора.Добавить(6,  "розовый",,         БиблиотекаКартинок.уатЦветДокументаРозовый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(7,  "серый",,           БиблиотекаКартинок.уатЦветДокументаСерый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(8,  "коричневый",,      БиблиотекаКартинок.уатЦветДокументаКоричневый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(9,  "темно-зеленый",,   БиблиотекаКартинок.уатЦветДокументаТемноЗеленый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(10, "фиолетовый",,      БиблиотекаКартинок.уатЦветДокументаФиолетовый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(11, "черный",,          БиблиотекаКартинок.уатЦветДокументаЧерный);
	ЭлементПолеВыбора.СписокВыбора.Добавить(12, "желтый",,          БиблиотекаКартинок.уатЦветДокументаЖелтый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(13, "зеленый",,         БиблиотекаКартинок.уатЦветДокументаЗеленый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(14, "оранжевый",,       БиблиотекаКартинок.уатЦветДокументаОранжевый);
	ЭлементПолеВыбора.СписокВыбора.Добавить(15, "светло-синий",,    БиблиотекаКартинок.уатЦветДокументаСветлоСиний);
	ЭлементПолеВыбора.СписокВыбора.Добавить(16, "оливковый",,       БиблиотекаКартинок.уатЦветДокументаОливковый);
	
КонецПроцедуры

// Функция предназначена для получения массива доступных цветов.
// 
// Возвращаемое значение:
//   - Массив доступных цветов.
//
Функция ПолучитьМассивЦветов() Экспорт
	
	МассивЦветов = Новый Массив();
	
	// Синий.
	МассивЦветов.Добавить(Новый Цвет(30, 152, 255));
	
	// Красный.
	МассивЦветов.Добавить(Новый Цвет(237, 69, 67));
	
	// Темно-оранжевый.
	МассивЦветов.Добавить(Новый Цвет(230, 118, 27));
	
	// Ночной.
	МассивЦветов.Добавить(Новый Цвет(14, 71, 121));
	
	// Темно-синий.
	МассивЦветов.Добавить(Новый Цвет(23, 123, 201));
	
	// Розовый.
	МассивЦветов.Добавить(Новый Цвет(243, 113, 209));
	
	// Серый.
	МассивЦветов.Добавить(Новый Цвет(179, 179, 179));
	
	// Коричневый.
	МассивЦветов.Добавить(Новый Цвет(121, 61, 14));
	
	// Темно-зеленый.
	МассивЦветов.Добавить(Новый Цвет(27, 173, 3));
	
	// Фиолетовый.
	МассивЦветов.Добавить(Новый Цвет(181, 30, 255));
	
	// Черный.
	МассивЦветов.Добавить(Новый Цвет(89, 89, 89));
	
	// Желтый.
	МассивЦветов.Добавить(Новый Цвет(255, 210, 30));
	
	// Зеленый.
	МассивЦветов.Добавить(Новый Цвет(86, 219, 64));
	
	// Оранжевый.
	МассивЦветов.Добавить(Новый Цвет(255, 147, 30));
	
	// Светло-синий.
	МассивЦветов.Добавить(Новый Цвет(130, 205, 255));
	
	// Оливковый.
	МассивЦветов.Добавить(Новый Цвет(151, 161, 0));
	
	Возврат МассивЦветов;
	
КонецФункции // ПолучитьМассивЦветов()

Функция ПолучитьДвоичныеДанныеКартинки(Знач Картинка, Формат, стрФормат) Экспорт
	
	Если Формат = "" Тогда
		стрФормат = НРег(Строка(Картинка.Формат()));
	Иначе
		стрФормат = НРег(Строка(Формат));
	КонецЕсли;

	Возврат Картинка.ПолучитьДвоичныеДанные();
	
КонецФункции

Функция МаркерЭтапаМультимодальногоЗаказа(ТипМаркера, Знач Красный, Знач Зеленый, Знач Синий) Экспорт
	
	ЦветСтрока = "#"+ДесятичноеВШестнадцатеричное(Красный)+ДесятичноеВШестнадцатеричное(Зеленый)+ДесятичноеВШестнадцатеричное(Синий);
	
	Если ТипМаркера = 1 Тогда
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<path d=""M8 7.65C7.5264 7.65 7.0722 7.46563 6.73731 7.13744C6.40242 6.80925 6.21429 6.36413 6.21429 5.9C6.21429 5.43587 6.40242 4.99075 6.73731 4.66256C7.0722 4.33437 7.5264 4.15
		|8 4.15C8.4736 4.15 8.9278 4.33437 9.26269 4.66256C9.59758 4.99075 9.78571 5.43587 9.78571 5.9C9.78571 6.12981 9.73953 6.35738 9.64979 6.5697C9.56004 6.78202 9.42851 6.97493 9.26269 7.13744C9.09687 7.29994 8.90002 7.42884 8.68336 7.51679C8.46671 7.60473 8.2345 7.65 8 7.65ZM8 1C6.67392
		|1 5.40215 1.51625 4.46447 2.43518C3.52678 3.3541 3 4.60044 3 5.9C3 9.575 8 15 8 15C8 15 13 9.575 13 5.9C13 4.60044 12.4732 3.3541 11.5355 2.43518C10.5979 1.51625 9.32608 1 8 1Z"" fill=""%1""/>
		|</svg>", ЦветСтрока);
		
	ИначеЕсли ТипМаркера = 2 Тогда
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<circle cx=""8"" cy=""8"" r=""3"" stroke=""%1"" stroke-width=""2""/>
		|<circle cx=""8"" cy=""2"" r=""1"" fill=""%1""/>
		|<circle cx=""8"" cy=""14"" r=""1"" fill=""%1""/>
		|</svg>", ЦветСтрока);
	Иначе
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<path d=""M9.26667 3.41176H13V10.4706H8.33333L8.06667 9.05882H4.33333V14H3V2H9L9.26667 3.41176ZM9 9.05882H10.3333V7.64706H11.6667V6.23529H10.3333V4.82353H9V6.23529L8.33333
		|4.82353V3.41176H7V4.82353H5.66667V3.41176H4.33333V4.82353H5.66667V6.23529H4.33333V7.64706H5.66667V6.23529H7V7.64706H8.33333V6.23529L9 7.64706V9.05882ZM7 6.23529V4.82353H8.33333V6.23529H7ZM9 6.23529H10.3333V7.64706H9V6.23529Z"" fill=""%1""/>
		|</svg>", ЦветСтрока);
	КонецЕсли;
	
	ДвоичныеДанныеМакета = ПолучитьДвоичныеДанныеИзСтроки(МаркерСтрока);
	АдресКартинки        = ПоместитьВоВременноеХранилище(ДвоичныеДанныеМакета, Новый УникальныйИдентификатор);
	
	Возврат АдресКартинки;
	
КонецФункции

Функция МаркерВидаПеревозки(ВидПеревозки, Знач Красный, Знач Зеленый, Знач Синий) Экспорт
	
	ЦветСтрока = "#"+ДесятичноеВШестнадцатеричное(Красный)+ДесятичноеВШестнадцатеричное(Зеленый)+ДесятичноеВШестнадцатеричное(Синий);

	Если ВидПеревозки = Справочники.уатВидыПеревозок.Авиационная Тогда
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<g clip-path=""url(#clip0_4660_15118)"">
		|<path d=""M15.3816 1.38159C15.524 1.63656 15.6357 1.90195 15.624 2.2013C15.6112 2.58405 15.4528 2.89442 15.1826 3.16279C14.1368 4.20202 13.0976 5.24781 12.0515 6.28674C12.0081 6.32334 11.9766 6.37203 11.9609 6.42661C11.9453 6.48119 11.9462 6.5392 11.9636 6.59324C12.5479 9.1028 13.1301 11.6124 13.7103 14.1219C13.7281 14.1759 13.7291 14.2339 13.7132 14.2884C13.6973 14.3429 13.6652 14.3913 13.6212 14.4272C13.2611 14.7766 12.9094 15.135 12.5335 15.5109L9.20309 9.15721C9.1453 9.20845 9.1036 9.2424 9.06577 9.28023C8.03558 10.3104 7.00468 11.3401 5.97309 12.3693C5.93573 12.4012 5.90762 12.4425 5.89169 12.4889C5.87576 12.5353 5.8726 12.5852 5.88255 12.6332C5.97518 13.24 6.0559 13.8485 6.14645 14.4543C6.15741 14.5024 6.15508 14.5526 6.13971 14.5994C6.12433 14.6463 6.09649 14.6881 6.05918 14.7203C5.79438 14.975 5.53703 15.2383 5.26121 15.5141C5.18675 15.3843 5.11913 15.2714 5.05569 15.1567C4.64107 14.4115 4.22943 13.665 3.81004 12.9228C3.76057 12.8375 3.68973 12.7667 3.60452 12.7172C2.7994 12.2624 1.98833 11.8159 1.18053 11.3655C1.13288 11.3387 1.08552 11.311 1.01075 11.2684L1.34674 10.9325C1.50461 10.7746 1.65622 10.6099 1.82361 10.4627C1.88778 10.4082 1.97039 10.3804 2.05445 10.385C2.6743 10.4651 3.29206 10.5604 3.91161 10.6414C3.9506 10.6453 3.98996 10.6413 4.0274 10.6297C4.06484 10.6182 4.09959 10.5993 4.12964 10.5741C5.18019 9.53252 6.22508 8.48524 7.27087 7.43886C7.30066 7.40907 7.32508 7.37393 7.36648 7.32359C5.24751 6.21198 3.14224 5.1093 1.01969 3.9965C1.06675 3.94467 1.10101 3.90386 1.13854 3.86633C1.46231 3.54256 1.78906 3.22176 2.10747 2.89263C2.14021 2.85285 2.18422 2.82391 2.23371 2.80961C2.28321 2.79531 2.33587 2.79632 2.38478 2.8125C4.89633 3.3971 7.40719 3.97882 9.91735 4.55766C10.0618 4.59192 10.1479 4.56541 10.2518 4.46146C11.2422 3.46214 12.255 2.48456 13.2275 1.46856C13.8026 0.86778 14.4576 0.732849 15.1439 1.14389L15.3816 1.38159Z"" fill=""%1""/>
		|</g>
		|<defs>
		|<clipPath id=""clip0_4660_15118"">
		|<rect width=""16"" height=""16"" fill=""white""/>
		|</clipPath>
		|</defs>
		|</svg>", ЦветСтрока);
	ИначеЕсли ВидПеревозки = Справочники.уатВидыПеревозок.Железнодорожная Тогда
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<g clip-path=""url(#clip0_4651_15148)"">
		|<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M8 1C6.89543 1 6 1.89543 6 3V12H16V3C16 1.89543 15.1046 1 14 1H8ZM8 2C7.44772 2 7 2.44772 7 3V7H15V3C15 2.44772 14.5523 2 14 2H8ZM7 8H8V10H7V8ZM15 8H14V10H15V8Z"" fill=""%1""/>
		|<path d=""M5 12V3L2 5.5V12H5Z"" fill=""%1""/>
		|<path d=""M0 7H1V12H0V7Z"" fill=""%1""/>
		|<path d=""M0 13H15V13.2928L17.7071 16H16.2928L14.2928 14H9.70709L11.707 16H10.2929L8.29285 14H0V13Z"" fill=""%1""/>
		|</g>
		|<defs>
		|<clipPath id=""clip0_4651_15148"">
		|<rect width=""16"" height=""16"" fill=""white""/>
		|</clipPath>
		|</defs>
		|</svg>", ЦветСтрока);
	ИначеЕсли ВидПеревозки = Справочники.уатВидыПеревозок.Морская Тогда
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<path d=""M3.2 4.80004L6.24 4.80004V4.00004L3.2 4.00004V4.80004Z"" fill=""%1""/>
		|<path d=""M6.24 6.56004L3.2 6.56004V5.76004L6.24 5.76004V6.56004Z"" fill=""%1""/>
		|<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M1.2 1.92004H8.24V3.36004H8.96V4.16004H8.24V8.35485C10.3491 7.36111 12.11 5.95025 12.88 5.20004H15.92L12.88 13.12V13.2H14.4V14H1.04L0 9.20004H1.2V4.16004H0.48V3.36004H1.2V1.92004ZM7.44 2.72004V8.68085C6.2042 9.10157 4.87322 9.20004 3.55637 9.20004H2V2.72004H7.44ZM12.32 8.96004V10.72H10.56L12.32 8.96004Z"" fill=""%1""/>
		|</svg>", ЦветСтрока);
	ИначеЕсли ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая Тогда
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""16"" viewBox=""0 0 16 16"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M1 3H11L11 6H12.7991L15 8.72472V12.6434H13.9982C13.9982 13.3914 13.4049 14 12.6757 14C11.9465 14 11.3532 13.3914 11.3532 12.6434H5.35666C5.35663 13.3914 4.76336 14 4.03415 14C3.30497 14 2.71167 13.3914 2.71165 12.6434H1V3ZM3.23675 12.6433C3.23675 13.0943 3.59444 13.4614 4.03415 13.4614C4.4739 13.4614 4.83156 13.0944 4.83156 12.6433C4.83156 12.1922 4.4739 11.8253 4.03415 11.8253C3.59441 11.8253 3.23675 12.1922 3.23675 12.6433ZM11.8783 12.6433C11.8783 13.0943 12.236 13.4614 12.6757 13.4614C13.1154 13.4614 13.4731 13.0944 13.4731 12.6433C13.4731 12.1922 13.1154 11.8253 12.6757 11.8253C12.236 11.8253 11.8783 12.1922 11.8783 12.6433ZM11.2815 7.12067V8.96704H13.8871L12.4506 7.12067H11.2815ZM9 5H3V6H9V5ZM9 7H3V8H9V7Z"" fill=""%1""/>
		|</svg>", ЦветСтрока);
	Иначе
		МаркерСтрока =
		СтрШаблон("<svg width=""16"" height=""12"" viewBox=""0 0 16 12"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<path d=""M11.8549 8.25276C11.7931 8.14793 11.7412 8.05193 11.6894 7.95593L5.7859 10.1358C5.53266 10.6241 5.22756 11.1648 4.8877 11.7661L12.5776 8.93248C12.2759 8.78071 12.0248 8.54457 11.8549 8.25276Z"" fill=""%1""/>
		|<path d=""M3.16192 2.42871C2.74672 2.42864 2.33557 2.51036 1.95195 2.6692C1.56833 2.82804 1.21975 3.0609 0.926131 3.35447C0.632512 3.64803 0.399601 3.99656 0.240692 4.38015C0.0817837 4.76374 -6.32298e-09 5.17489 0 5.59009C0 6.83258 1.6 9.7832 2.52414 11.3832C2.58861 11.4953 2.68147 11.5884 2.7934 11.6531C2.90533 11.7179 3.03235 11.752 3.16165 11.752C3.29095 11.752 3.41796 11.7179 3.52989 11.6531C3.64182 11.5884 3.7347 11.4953 3.79916 11.3832C4.7222 9.7832 6.3233 6.83147 6.3233 5.59009C6.3233 4.75164 5.99023 3.94753 5.39736 3.35466C4.80449 2.76179 4.00037 2.42871 3.16192 2.42871ZM3.16192 7.0185C2.87938 7.01861 2.60316 6.93493 2.36818 6.77804C2.13321 6.62115 1.95005 6.3981 1.84185 6.1371C1.73365 5.8761 1.70529 5.58888 1.76034 5.31176C1.8154 5.03464 1.95139 4.78007 2.15113 4.58025C2.35088 4.38042 2.6054 4.24432 2.8825 4.18916C3.1596 4.134 3.44684 4.16226 3.70788 4.27035C3.96892 4.37845 4.19204 4.56154 4.34902 4.79645C4.506 5.03136 4.58979 5.30756 4.58979 5.59009C4.58993 5.77772 4.55311 5.96354 4.48143 6.13693C4.40974 6.31033 4.30459 6.4679 4.172 6.60065C4.0394 6.7334 3.88195 6.83873 3.70863 6.91061C3.53532 6.9825 3.34955 7.01953 3.16192 7.01961V7.0185Z"" fill=""%1""/>
		|<path d=""M13.3639 0.262085C13.0197 0.262013 12.679 0.329729 12.361 0.461371C12.043 0.593013 11.7541 0.786003 11.5108 1.02931C11.2674 1.27262 11.0744 1.56149 10.9427 1.87941C10.8109 2.19734 10.7432 2.53809 10.7432 2.88222C10.7432 3.91229 12.0673 6.35809 12.8353 7.68554C12.8888 7.77834 12.9659 7.85542 13.0587 7.90901C13.1515 7.96259 13.2567 7.9908 13.3639 7.9908C13.471 7.9908 13.5763 7.96259 13.669 7.90901C13.7618 7.85542 13.8389 7.77834 13.8924 7.68554C14.6576 6.3614 15.984 3.91229 15.984 2.88222C15.984 2.18732 15.7079 1.52088 15.2166 1.02951C14.7252 0.538137 14.0588 0.262085 13.3639 0.262085ZM13.3639 4.06898C13.1297 4.06898 12.9008 3.99954 12.7061 3.86944C12.5113 3.73934 12.3596 3.55443 12.27 3.33808C12.1804 3.12173 12.1569 2.88367 12.2026 2.654C12.2483 2.42432 12.3611 2.21335 12.5266 2.04777C12.6922 1.88218 12.9032 1.76941 13.1329 1.72373C13.3625 1.67804 13.6006 1.7015 13.817 1.79111C14.0333 1.88073 14.2182 2.03248 14.3483 2.22718C14.4784 2.42189 14.5479 2.65081 14.5479 2.88498C14.5471 3.19852 14.4221 3.49897 14.2001 3.72042C13.9781 3.94186 13.6774 4.06623 13.3639 4.06623V4.06898Z"" fill=""%1""/>
		|</svg>", ЦветСтрока);
	КонецЕсли;
	
	ДвоичныеДанныеМакета = ПолучитьДвоичныеДанныеИзСтроки(МаркерСтрока);
	АдресКартинки        = ПоместитьВоВременноеХранилище(ДвоичныеДанныеМакета, Новый УникальныйИдентификатор);
	
	Возврат АдресКартинки;
	
КонецФункции

// Процедура выполняет преобразование ответа карт в структуру.
//
Процедура ПрочитатьОтветChromiumВСтруктуруСервер(стрСообщение, Результат, флОшибка) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(стрСообщение);
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		флОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("command") Тогда 
			ЧтениеXML.Прочитать();
			Результат.command = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("code") Тогда 
			ЧтениеXML.Прочитать();
			Результат.code = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("description") Тогда 
			ЧтениеXML.Прочитать();
			Результат.description = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("data") Тогда 
			Если НРег(Результат.command) = НРег("pointClick") Тогда 
				Если НРег(ЧтениеXML.Имя) = НРег("data") Тогда
					ЧтениеXML.Прочитать();
					Результат.guid = ЧтениеXML.Значение;
				КонецЕсли;
			ИначеЕсли НРег(Результат.command) = НРег("drawObjects") Тогда 
				Результат.Вставить("data", Новый Массив());
				
				мсвКоординатыОбъекта = Неопределено;
				стрКоординатыТочки   = Неопределено;
				
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("object") Тогда 
						мсвКоординатыОбъекта = Новый Массив();
						
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lat") Тогда 
						стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лат = Число(ЧтениеXML.Значение);
						ЧтениеXML.Прочитать();
						ЧтениеXML.Прочитать();
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лон = Число(ЧтениеXML.Значение);
						мсвКоординатыОбъекта.Добавить(стрКоординатыТочки);
						
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("object") Тогда 
						Результат.data.Добавить(мсвКоординатыОбъекта);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли НРег(Результат.command) = НРег("geozoneEdit") Тогда
				стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
				ФлагЛат = Ложь;
				ФлагЛон = Ложь;

				Результат.Вставить("data", Новый Массив());
				
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lat") Тогда 
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лат = Число(ЧтениеXML.Значение);
						ФлагЛат = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lon") Тогда
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лон = Число(ЧтениеXML.Значение);
						ФлагЛон = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
						ЧтениеXML.Прочитать();
						Результат.guid = ЧтениеXML.Значение;
					Иначе
						Если ФлагЛат И ФлагЛон Тогда
							Результат.data.Добавить(стрКоординатыТочки);
							ФлагЛат = Ложь;
							ФлагЛон = Ложь;
							стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НРег(Результат.command) = НРег("geozoneCreate") Тогда
				стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
				ФлагЛат = Ложь;
				ФлагЛон = Ложь;

				Результат.Вставить("data", Новый Массив());

				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lat") Тогда 
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лат = Число(ЧтениеXML.Значение);
						ФлагЛат = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lon") Тогда
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лон = Число(ЧтениеXML.Значение);
						ФлагЛон = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
						ЧтениеXML.Прочитать();
						Результат.guid = ЧтениеXML.Значение;
					Иначе
						Если ФлагЛат И ФлагЛон Тогда
							Результат.data.Добавить(стрКоординатыТочки);
							ФлагЛат = Ложь;
							ФлагЛон = Ложь;
							стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НРег(Результат.command) = НРег("geozoneSelection") Тогда
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
						ЧтениеXML.Прочитать();
						Результат.guid = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НРег(Результат.command) = НРег("makescreenshot") Тогда
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
						Результат.data.Вставить("screenshot", Строка(ЧтениеXML.Значение));
					КонецЕсли;
				КонецЦикла;
			Иначе 
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
						имяУзла = ЧтениеXML.Имя;
						ЧтениеXML.Прочитать();
						Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
							Результат.data.Вставить(Строка(имяУзла), Строка(ЧтениеXML.Значение));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Функция возвращает пункты назначения по элементу справочника Маршруты
//
Функция ПолучитьПунктыСледованияПоМаршруту(Знач МаршрутСсылка) Экспорт
	
	мсвПунктыСледования = Новый Массив();
	Если МаршрутСсылка.ПредставлениеМаршрутаОднимПунктом Тогда
		Для Каждого ТекСтрока Из МаршрутСсылка.Этапы Цикл

			ДополнительныеПараметрыНадписи = Новый Структура("Пункт, Операция, ОтправительПолучатель",
				ТекСтрока.ПунктОтправления, ТекСтрока.ТипТочиМаршрута, ТекСтрока.Грузополучатель);
			ТекстНадписи  = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(МаршрутСсылка, ДополнительныеПараметрыНадписи);
			
			стрДанныеПунктаОтправления = Новый Структура();
			стрДанныеПунктаОтправления.Вставить("Пункт",        ТекСтрока.ПунктОтправления);
			стрДанныеПунктаОтправления.Вставить("Лат",          0);
			стрДанныеПунктаОтправления.Вставить("Выполнен",     Ложь);
			стрДанныеПунктаОтправления.Вставить("Лон",          0);
			стрДанныеПунктаОтправления.Вставить("СтрокаПоиска", "");
			стрДанныеПунктаОтправления.Вставить("ТекстНадписи", ТекстНадписи);
			стрДанныеПунктаОтправления.Вставить("ЦветФона",     "#ffffff");
			мсвПунктыСледования.Добавить(стрДанныеПунктаОтправления);
			
		КонецЦикла;
	Иначе
		СчСтрок = 0;
		Для Каждого ТекСтрока Из МаршрутСсылка.Этапы Цикл
			Если СчСтрок = 0 Тогда
				ОперацияВПункте = Перечисления.уатТипыТочекМаршрута.Погрузка;
			Иначе
				ОперацияВПункте = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка;
			КонецЕсли;
			
			ДополнительныеПараметрыНадписи = Новый Структура("Пункт, Операция, ОтправительПолучатель",
				ТекСтрока.ПунктОтправления, ОперацияВПункте, ТекСтрока.Грузополучатель);
			ТекстНадписи  = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(МаршрутСсылка, ДополнительныеПараметрыНадписи);
			
			стрДанныеПунктаОтправления = Новый Структура();
			стрДанныеПунктаОтправления.Вставить("Пункт",        ТекСтрока.ПунктОтправления);
			стрДанныеПунктаОтправления.Вставить("Лат",          0);
			стрДанныеПунктаОтправления.Вставить("Выполнен",     Ложь);
			стрДанныеПунктаОтправления.Вставить("Лон",          0);
			стрДанныеПунктаОтправления.Вставить("СтрокаПоиска", "");
			стрДанныеПунктаОтправления.Вставить("ТекстНадписи", ТекстНадписи);
			стрДанныеПунктаОтправления.Вставить("ЦветФона",     "#ffffff");
			мсвПунктыСледования.Добавить(стрДанныеПунктаОтправления);
			
			Если СчСтрок = МаршрутСсылка.Этапы.Количество() Или МаршрутСсылка.Этапы.Количество() = 1 Тогда
				ОперацияВПункте = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			Иначе
				ОперацияВПункте = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка;
			КонецЕсли;
			
			ДополнительныеПараметрыНадписи = Новый Структура("Пункт, Операция, ОтправительПолучатель",
				ТекСтрока.ПунктПрибытия, ОперацияВПункте, ТекСтрока.Грузополучатель);
			ТекстНадписи  = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(МаршрутСсылка, ДополнительныеПараметрыНадписи);
			
			стрДанныеПунктаПрибытия = Новый Структура();
			стрДанныеПунктаПрибытия.Вставить("Пункт",        ТекСтрока.ПунктПрибытия);
			стрДанныеПунктаПрибытия.Вставить("Лат",          0);
			стрДанныеПунктаПрибытия.Вставить("Выполнен",     Ложь);
			стрДанныеПунктаПрибытия.Вставить("Лон",          0);
			стрДанныеПунктаПрибытия.Вставить("СтрокаПоиска", "");
			стрДанныеПунктаПрибытия.Вставить("ТекстНадписи", ТекстНадписи);
			стрДанныеПунктаПрибытия.Вставить("ЦветФона",     "#ffffff");
			мсвПунктыСледования.Добавить(стрДанныеПунктаПрибытия);
			
			СчСтрок = СчСтрок + 1;
		КонецЦикла;
	КонецЕсли;
	
	мсвПунктыДляЗапроса = Новый Массив();
	
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТипЗнч(ТекПункт.Пункт) = Тип("Строка") Тогда 
			Продолжить;
		КонецЕсли;
		мсвПунктыДляЗапроса.Добавить(ТекПункт.Пункт);
	КонецЦикла;
	
	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("мсвПунктов", мсвПунктыДляЗапроса);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПунктыНазначения.Ссылка,
	|	уатПунктыНазначения.Лат,
	|	уатПунктыНазначения.Лон
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Ссылка В(&мсвПунктов)";
	
	ТабКоординатСпр = мЗапрос.Выполнить().Выгрузить();
	
	Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
		Если ТипЗнч(ТекПункт.Пункт) = Тип("Строка") Тогда
			ТекПункт.СтрокаПоиска = ТекПункт.Пункт;
			Продолжить;
		КонецЕсли;
		
		КоординатыПоСпр = ТабКоординатСпр.Найти(ТекПункт.Пункт, "Ссылка");
		Если Не КоординатыПоСпр = Неопределено И Не (КоординатыПоСпр.Лат = 0 И КоординатыПоСпр.Лон = 0) Тогда 
			ТекПункт.Лат = КоординатыПоСпр.Лат;
			ТекПункт.Лон = КоординатыПоСпр.Лон;
		КонецЕсли;
		ТекПункт.СтрокаПоиска = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдреса(ТекПункт.Пункт);
	КонецЦикла;
	
	Возврат мсвПунктыСледования;
	
КонецФункции // ПолучитьПунктыСледованияПоМаршруту()

Функция ПреобразоватьЦвет(ИсходныйЦвет, ТаблицаЦветов) Экспорт
	Попытка		
		Если ТипЗнч(ИсходныйЦвет) = Тип("Цвет") Тогда
			
			Если ИсходныйЦвет.Вид = ВидЦвета.ЭлементСтиля Тогда
				МассивСтилей = Новый Массив();
				Для Каждого ТекСтрока Из Метаданные.ЭлементыСтиля Цикл
					 МассивСтилей.Добавить(ТекСтрока.Представление());
				КонецЦикла;
				
				ОбъектМетаданныхСтиля = МассивСтилей.Найти(Сред(Строка(ИсходныйЦвет), 8));
				Если ОбъектМетаданныхСтиля <> Неопределено Тогда 
					ИсходныйЦвет = Метаданные.ЭлементыСтиля[ОбъектМетаданныхСтиля].Значение;
				КонецЕсли;
			КонецЕсли;
			
			Если ИсходныйЦвет.Вид = ВидЦвета.WebЦвет Тогда
				СтрЦвет = СокрЛП(Строка(ИсходныйЦвет));
				Позиция = Найти(СтрЦвет,"(");
				Если Позиция <> 0 Тогда
					СтрЦвет = НРег(СтрЗаменить(Сред(СтрЦвет, Позиция+  1), ")", ""));
					тЦветов = ПрочитатьТаблицуЦветов(ТаблицаЦветов);
					ТекЦвет = тЦветов.Найти(НРег(СтрЦвет), "Название");
					Если ТекЦвет <> Неопределено Тогда
						Возврат Новый Структура("Красный,Синий,Зеленый", ТекЦвет.Красный, ТекЦвет.Синий, ТекЦвет.Зеленый);
					Иначе
						ТекЦвет = тЦветов.Найти(НРег(СтрЦвет + "1"), "Название");
						Если ТекЦвет <> Неопределено Тогда
							Возврат Новый Структура("Красный,Синий,Зеленый", ТекЦвет.Красный, ТекЦвет.Синий, ТекЦвет.Зеленый);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИсходныйЦвет.Вид = ВидЦвета.Абсолютный Тогда
				Возврат Новый Структура("Красный,Синий,Зеленый", ИсходныйЦвет.Красный, ИсходныйЦвет.Синий, ИсходныйЦвет.Зеленый);
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Новый Структура("Красный, Синий, Зеленый", 0, 0, 0);
	Исключение
	КонецПопытки;
КонецФункции

Функция ПрочитатьТаблицуЦветов(ТаблицаЦветов)
	
	тЦветов = Новый ТаблицаЗначений;
	тЦветов.Колонки.Добавить("Название");
	тЦветов.Колонки.Добавить("Красный");
	тЦветов.Колонки.Добавить("Синий");
	тЦветов.Колонки.Добавить("Зеленый");
	тЦветов.Колонки.Добавить("Шестнадцатиричный");
	
 	Для НомерСтроки = 2 По ТаблицаЦветов.ВысотаТаблицы Цикл
		мсвЦветов    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаЦветов.Область(НомерСтроки, 3).Текст, " ");
		Наименование = НРег(ТаблицаЦветов.Область(НомерСтроки,1).Текст);
		Если НЕ ЗначениеЗАполнено(Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтроока = тЦветов.Добавить();
		ТекСтроока.Название = Наименование;
		ТекСтроока.Красный  = Число(мсвЦветов.Получить(0));
		ТекСтроока.Зеленый  = Число(мсвЦветов.Получить(1));
		ТекСтроока.Синий    = Число(мсвЦветов.Получить(2));
		ТекСтроока.Шестнадцатиричный = ТаблицаЦветов.Область(НомерСтроки,4).Текст;
	КонецЦикла;
	
	Возврат тЦветов;
КонецФункции

Функция ПолучитьДанныеТС(МассивТС) Экспорт
	
	Результат = Новый Массив();
	
	кэшТекущаяДата = ТекущаяДата();
	
	ИспользуетсяМП = Константы.уатИспользоватьМобильноеПриложениеВодителя.Получить();
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивТС",        МассивТС);
	Запрос.УстановитьПараметр("ИспользуетсяМП",  ИспользуетсяМП);
	Запрос.УстановитьПараметр("ТекущаяДата",     кэшТекущаяДата);
	Запрос.УстановитьПараметр("НачалоДня",       НачалоДня(кэшТекущаяДата));
	Запрос.УстановитьПараметр("КонецДня",        КонецДня(кэшТекущаяДата));

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатВодителиНаЛинии.ТС КАК ТС,
	               |	уатВодителиНаЛинии.ФизическоеЛицо КАК Водитель
	               |ПОМЕСТИТЬ ВТ_ВодителиНаЛинии
	               |ИЗ
	               |	РегистрСведений.уатВодителиНаЛинии КАК уатВодителиНаЛинии
	               |ГДЕ
	               |	уатВодителиНаЛинии.ТС В(&МассивТС)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Наименование КАК Наименование,
	               |	уатТС.ЭтоГруппа КАК ЭтоГруппа,
	               |	уатТС.Ссылка КАК Ссылка,
	               |	втТекущееМестоположениеТС.Широта КАК Лат,
	               |	втТекущееМестоположениеТС.Долгота КАК Лон,
	               |	ВЫБОР
	               |		КОГДА уатТС.ЭтоГруппа
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатСостояниеТССрезПоследних.Состояние ЕСТЬ NULL
	               |					ТОГДА ЛОЖЬ
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ТСЗанято,
	               |	уатСостояниеТССрезПоследних.Состояние.ЦветСостояния КАК ЦветСостояния,
	               |	уатСостояниеТССрезПоследних.Состояние КАК Состояние,
	               |	ВЫБОР
	               |		КОГДА &ИспользуетсяМП
	               |				И ВТ_ВодителиНаЛинии.Водитель ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТСНеНаЛинии,
	               |	уатСостояниеТССрезПоследних.Регистратор КАК РегистраторСостояния,
	               |	ВЫБОР
	               |		КОГДА ВТ_ВодителиНаЛинии.Водитель ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	               |						ТОГДА ВЫБОР
	               |								КОГДА уатСостояниеТССрезПоследних.Регистратор ЕСТЬ NULL
	               |									ТОГДА ЕСТЬNULL(уатТС.Водитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	               |								ИНАЧЕ ВЫБОР
	               |										КОГДА ТИПЗНАЧЕНИЯ(уатСостояниеТССрезПоследних.Регистратор.Водитель1) = ТИП(Справочник.Сотрудники)
	               |											ТОГДА уатСостояниеТССрезПоследних.Регистратор.Водитель1.ФизическоеЛицо
	               |										КОГДА уатСостояниеТССрезПоследних.Регистратор.Водитель1 = НЕОПРЕДЕЛЕНО
	               |											ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |										ИНАЧЕ уатСостояниеТССрезПоследних.Регистратор.Водитель1
	               |									КОНЕЦ
	               |							КОНЕЦ
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА уатСостояниеТССрезПоследних.Регистратор ЕСТЬ NULL
	               |								ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |							ИНАЧЕ ВЫБОР
	               |									КОГДА ТИПЗНАЧЕНИЯ(уатСостояниеТССрезПоследних.Регистратор.Водитель1) = ТИП(Справочник.Сотрудники)
	               |										ТОГДА уатСостояниеТССрезПоследних.Регистратор.Водитель1.ФизическоеЛицо
	               |									КОГДА уатСостояниеТССрезПоследних.Регистратор.Водитель1 = НЕОПРЕДЕЛЕНО
	               |										ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |									ИНАЧЕ уатСостояниеТССрезПоследних.Регистратор.Водитель1
	               |								КОНЕЦ
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |		ИНАЧЕ ВТ_ВодителиНаЛинии.Водитель
	               |	КОНЕЦ КАК Водитель
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			уатТекущееМестоположениеТСПоМониторингу.ТС КАК ТС,
	               |			уатТекущееМестоположениеТСПоМониторингу.Дата КАК Дата,
	               |			ЗНАЧЕНИЕ(Перечисление.уатИсточникФактическихДанныхДляКартографии.СистемаСпутниковогоМониторинга) КАК ИсточникФактическихДанныхДляКартографии,
	               |			уатТекущееМестоположениеТСПоМониторингу.Широта КАК Широта,
	               |			уатТекущееМестоположениеТСПоМониторингу.Долгота КАК Долгота
	               |		ИЗ
	               |			РегистрСведений.уатТекущееМестоположениеТСПоМониторингу КАК уатТекущееМестоположениеТСПоМониторингу
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			уатТекущиеКоординатыМП.ТС,
	               |			уатТекущиеКоординатыМП.Дата,
	               |			ЗНАЧЕНИЕ(Перечисление.уатИсточникФактическихДанныхДляКартографии.МобильноеПриложение),
	               |			уатТекущиеКоординатыМП.Лат,
	               |			уатТекущиеКоординатыМП.Лон
	               |		ИЗ
	               |			РегистрСведений.уатТекущиеКоординатыМП КАК уатТекущиеКоординатыМП) КАК втТекущееМестоположениеТС
	               |		ПО уатТС.Ссылка = втТекущееМестоположениеТС.ТС
	               |			И уатТС.ИсточникФактическихДанныхДляКартографии = втТекущееМестоположениеТС.ИсточникФактическихДанныхДляКартографии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВодителиНаЛинии КАК ВТ_ВодителиНаЛинии
	               |		ПО уатТС.Ссылка = ВТ_ВодителиНаЛинии.ТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСостояниеТС.СрезПоследних(
	               |				,
	               |				Период < &ТекущаяДата
	               |					И ДатаОкончания > &ТекущаяДата) КАК уатСостояниеТССрезПоследних
	               |		ПО (уатСостояниеТССрезПоследних.ТС = уатТС.Ссылка)
	               |ГДЕ
	               |	уатТС.Ссылка В(&МассивТС)";
	
	ТаблицаЦветов = ПолучитьОбщийМакет("уатТаблицаЦветов"); 
	
	ТаблицаДопПарметров = Новый ТаблицаЗначений;
	ТаблицаДопПарметров.Колонки.Добавить("Ссылка",               Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ТаблицаДопПарметров.Колонки.Добавить("Состояние",            Новый ОписаниеТипов("СправочникСсылка.уатСостояниеТС"));
	ТаблицаДопПарметров.Колонки.Добавить("РегистраторСостояния", Новый ОписаниеТипов("ДокументСсылка.уатКорректировкаЗаписейРегистров,
	|ДокументСсылка.уатДиспозицияТС,ДокументСсылка.уатЗаявкаНаРемонт,ДокументСсылка.уатМаршрутныйЛист,
	|ДокументСсылка.уатПутевойЛист,ДокументСсылка.уатРазнарядка,ДокументСсылка.уатРемонтныйЛист,ДокументСсылка.уатТехнологическийПутевойЛист"));
	ТаблицаДопПарметров.Колонки.Добавить("Водитель",    Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураТС = Новый Структура("УникальныйИдентификатор, Наименование, Лат, Лон,
		|Ссылка, Геокодирован, ТСЗанято, ЦветСостояния, Состояние,
		|ИспользуетсяМП, ТСНеНаЛинии, РегистраторСостояния, ТекстНадписи",
		"", "", 0, 0, "", Ложь, 1, "", "", Ложь, Ложь, "");
		
		
		Если ЗначениеЗаполнено(Выборка.Лат) И ЗначениеЗаполнено(Выборка.Лон) Тогда 
			СтруктураТС.Геокодирован = Истина;
		КонецЕсли;
		
		СтруктураТС.Лат                 = Выборка.Лат;
		СтруктураТС.Лон                 = Выборка.Лон;
		СтруктураТС.Наименование        = Выборка.Наименование;
		СтруктураТС.УникальныйИдентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		СтруктураТС.Ссылка                  = Выборка.Ссылка;
		СтруктураТС.ТСЗанято                = Выборка.ТСЗанято;
		СтруктураТС.Состояние               = Выборка.Состояние;
		СтруктураТС.ИспользуетсяМП          = ИспользуетсяМП;
		СтруктураТС.ТСНеНаЛинии             = Выборка.ТСНеНаЛинии;
		
		СтруктураТС.РегистраторСостояния    = Выборка.РегистраторСостояния;
		
		Если ЗначениеЗаполнено(Выборка.ЦветСостояния) Тогда
			СтруктураТС.ЦветСостояния       = уатЭлектронныеКартыСервер.ПреобразоватьЦвет(Выборка.ЦветСостояния.Получить(), ТаблицаЦветов);
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаДопПарметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Результат.Добавить(СтруктураТС);
	КонецЦикла;
	
	ДополнительныеПараметрыНадписи = Новый Структура("ТекущееСостояние", ТаблицаДопПарметров);
	
	СоответвиеНадписей = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблоновИнформацииДляКарты(МассивТС, ДополнительныеПараметрыНадписи);
	Для Каждого ТекСтрока Из Результат Цикл
		ТекСтрока.ТекстНадписи = СоответвиеНадписей.Получить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьГиперссылкуОткрытияОбъектаДляКарты(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Идентификатор = Строка(Ссылка.УникальныйИдентификатор());
	
	ПредметМетаданные = Ссылка.Метаданные(); 
	ТипЗначения       = ТипЗнч(Ссылка);
	ИмяОбъекта        = ПредметМетаданные.Имя; 
	ПолноеИмя         = ПредметМетаданные.ПолноеИмя();
	Если СтрНайти(ПолноеИмя, "Справочник.") <> 0 Тогда
		ТипОбъекта = "Справочники";
	ИначеЕсли СтрНайти(ПолноеИмя, "Документ.") <> 0 Тогда
		ТипОбъекта = "Документы";
	Иначе
		Возврат "";
	КонецЕсли; 
	
	СтрокаДокумента = СтрШаблон("#"" onclick=""reporting(\'href\',\'0\',\'Href\',\'<type>" + ТипОбъекта + "</type><object>%1</object><guid>",
	ИмяОбъекта) + 
	Идентификатор + "</guid>\');";
	
	Возврат СтрокаДокумента;
	
КонецФункции

Функция СформироватьГиперссылкуУдаленияЗаказаДляКарты(GUIDТС, GUIDМЛ, GUIDПункта, GUIDЗаказа)
	
	СтрокаДокумента = "<a href=""#"" onclick=""reporting(\'hreforder\',\'0\',\'Hreforder\',\'<guidVehicle>%1</guidVehicle><guidRL>%2</guidRL><guidPoint>%3</guidPoint><guid>%4</guid>\');"">Удалить</a>";
	СтрокаДокумента = СтрШаблон(СтрокаДокумента, GUIDТС, GUIDМЛ, GUIDПункта, GUIDЗаказа);
	
	Возврат СтрокаДокумента;
	
КонецФункции

Функция СформироватьПредставлениеОбъектаДляКарты(СтруктураНастроек) Экспорт
	
	СтрокаПредставление = "";
	//Если СтруктураНастроек.ТипДокумента = "МаршрутныйЛист" Тогда
	//	СтрокаПредставление = СформироватьПредставлениеМЛДляКарты(СтруктураНастроек);
	//КонецЕсли;
	//
	//
	Возврат СтрокаПредставление;
	
КонецФункции

Функция СформироватьПредставлениеМЛДляКарты(ТекстМЛ, СтруктураНастроек) Экспорт
	
	СтрокаПредставление = ""; 
	ТекстНадписи = Нстр("ru = '<table class = ""tablecontainer""><tr><th nowrap=""nowrap""></th><th nowrap=""nowrap""></th></tr>
                         |<tr><td>%1</td><td></td></tr>
                         |%2
                         |</table>
                         |%3'");
	
	МассивЗаказов = Новый Массив();
	Если СтруктураНастроек.Свойство("МассивЗаказов") Тогда
		МассивЗаказов = СтруктураНастроек.МассивЗаказов;
	КонецЕсли;
	
	ТекстИнформацииОЗаказе  = "";
	ТекстИнформацииОЗаказах = "";
	Если МассивЗаказов.Количество() = 1 Тогда
		ТекЗаказ = МассивЗаказов[0];
		
		ПредставлениеСсылкиДляУдаленияЗаказа = "";
		Если СтруктураНастроек.Свойство("АРМЛогиста") Тогда
			GUIDЗаказа = ТекЗаказ.GUIDЗаказа;
			GUIDПункта = ТекЗаказ.GUIDПункта;
			GUIDТС     = ТекЗаказ.GUIDТС;
			
			Если ТекЗаказ.Свойство("GUIDМЛ") Тогда 
				GUIDМЛ     = ТекЗаказ.GUIDМЛ;
			Иначе
				GUIDМЛ     = GUIDТС;
			КонецЕсли;
			
			ПредставлениеСсылкиДляУдаленияЗаказа = СформироватьГиперссылкуУдаленияЗаказаДляКарты(GUIDТС, GUIDМЛ, GUIDПункта, GUIDЗаказа);
		КонецЕсли;	
		
		СтруктураНастроек.Вставить("Заказ", ТекЗаказ.Этап);
		СтруктураНастроек.Вставить("ТипТочкиМаршрута", ТекЗаказ.Операция);
		СтруктураНастроек.Вставить("ОкноС", ТекЗаказ.ОкноС);  
		СтруктураНастроек.Вставить("ОкноПо", ТекЗаказ.ОкноПо);
		СтруктураНастроек.Вставить("Количесвто",		 ТекЗаказ.Количество);
		СтруктураНастроек.Вставить("ВесБрутто",			 ТекЗаказ.ВесБрутто);
		СтруктураНастроек.Вставить("Объем",				 ТекЗаказ.Объем);
		Попытка
			СтруктураНастроек.Вставить("КоличествоМест",	 ТекЗаказ.КолМест);
		Исключение
			СтруктураНастроек.Вставить("КоличествоМест",	 ТекЗаказ.КоличествоМест);
		КонецПопытки;
		
		ТекстИнформацииОЗаказе = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(СтруктураНастроек.МЛ, СтруктураНастроек);
		
		ТекстИнформацииОЗаказе = СтрШаблон(Нстр("ru = '<tr><td>%1</td><td style=""padding: 6px 0;vertical-align: top;"">&nbsp;&nbsp;%2</td></tr>'"),
		ТекстИнформацииОЗаказе, ПредставлениеСсылкиДляУдаленияЗаказа);
		
	Иначе
		Индекс = 1;
		
		ТекстИнформацииОЗаказе  = "<tr><td style=""font-weight: bold""><br>Заказы на ТС:&nbsp;</td><td></td></tr>";
		
		ТекстПостроительОбщий = Новый ЗаписьXML;
		ТекстПостроительОбщий.УстановитьСтроку();

		Если МассивЗаказов.Количество() > 10 Тогда
			ТекстИнформацииОЗаказах = "<div style=""overflow: auto; height:200px;"">";  
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
		Иначе
			ТекстИнформацииОЗаказах = "<div>";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
		КонецЕсли;
		
		ТекстИнформацииОЗаказах = 
			"<table class = ""tablecontainer""><tr><th nowrap=""nowrap""></th><th nowrap=""nowrap""></th></tr>"; 
		ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
		
		СтруктураНастроек.Вставить("Заказ", "");
		СтруктураНастроек.Вставить("ТипТочкиМаршрута", "");
		СтруктураНастроек.Вставить("ОкноС", "");  
		СтруктураНастроек.Вставить("ОкноПо", "");
		СтруктураНастроек.Вставить("Количество",		 0);
		СтруктураНастроек.Вставить("ВесБрутто",			 0);
		СтруктураНастроек.Вставить("Объем",				 0);
		СтруктураНастроек.Вставить("КоличествоМест",	 0);
		
		Для Каждого ТекЗаказ Из МассивЗаказов Цикл
			
			НомерДокумента = ТекЗаказ.Номер;
			
			ИндексЗаказа   = Строка(СтруктураНастроек.МЛ)
			+ "_" + НомерДокумента + "_" + Индекс;
			ПредставлениеЗаказа = СтрШаблон(Нстр("ru = '<a>%1</a>'"),
			НомерДокумента);
			
			ПредставлениеСсылкиДляУдаленияЗаказа = "";
			Если СтруктураНастроек.Свойство("АРМЛогиста") Тогда
				GUIDЗаказа = ТекЗаказ.GUIDЗаказа;
				GUIDПункта = ТекЗаказ.GUIDПункта;
				GUIDТС     = ТекЗаказ.GUIDТС;
				
				Если ТекЗаказ.Свойство("GUIDМЛ") Тогда 
					GUIDМЛ     = ТекЗаказ.GUIDМЛ;
				Иначе
					GUIDМЛ     = GUIDТС;
				КонецЕсли;
				
				ПредставлениеСсылкиДляУдаленияЗаказа = СформироватьГиперссылкуУдаленияЗаказаДляКарты(GUIDТС, GUIDМЛ, GUIDПункта, GUIDЗаказа);
			КонецЕсли;	
				
			ТекстПостроитель = Новый ЗаписьXML;
			ТекстПостроитель.УстановитьСтроку();
			
			ТекИнформация  = "<table class = ""tablecontainer""><tr><th nowrap=""nowrap""></th><th nowrap=""nowrap""></th></tr>";
			
			ТекстПостроитель.ЗаписатьБезОбработки(ТекИнформация);
			ТекИнформация  = "<tr><td>";
			ТекстПостроитель.ЗаписатьБезОбработки(ТекИнформация);
			
			СтруктураНастроек.Заказ            = ТекЗаказ.Этап;
			СтруктураНастроек.ТипТочкиМаршрута = ТекЗаказ.Операция;
			СтруктураНастроек.ОкноС            = ТекЗаказ.ОкноС;  
			СтруктураНастроек.ОкноПо           = ТекЗаказ.ОкноПо;
			СтруктураНастроек.Количество       = ТекЗаказ.Количество;
			СтруктураНастроек.ВесБрутто        = ТекЗаказ.ВесБрутто;
			СтруктураНастроек.Объем            = ТекЗаказ.Объем; 
			Попытка
				СтруктураНастроек.КоличествоМест   = ТекЗаказ.КолМест;
			Исключение
				СтруктураНастроек.КоличествоМест   = ТекЗаказ.КоличествоМест;
			КонецПопытки;
			
			ТекИнформация = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблонаИнформацииДляКарты(СтруктураНастроек.МЛ, СтруктураНастроек);

			ТекстПостроитель.ЗаписатьБезОбработки(ТекИнформация);
			ТекИнформация  = "</td><td></td></tr>";    
			ТекстПостроитель.ЗаписатьБезОбработки(ТекИнформация);
			ТекИнформация  = "</td></tr></table>";
			ТекстПостроитель.ЗаписатьБезОбработки(ТекИнформация);
			ТекИнформация = ТекстПостроитель.Закрыть();
			
			ТекстИнформацииОЗаказах = "<tr><td></td><td><input type=""checkbox"" id=""";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ИндексЗаказа);
			ТекстИнформацииОЗаказах = """ class=""hide""/>
			|<label for=""";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ИндексЗаказа);
			ТекстИнформацииОЗаказах = """ >
			|";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ПредставлениеЗаказа);
			ТекстИнформацииОЗаказах = "</label>
			|<div>";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекИнформация);
			ТекстИнформацииОЗаказах = "
			|</div>&nbsp;&nbsp;";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ПредставлениеСсылкиДляУдаленияЗаказа);
			ТекстИнформацииОЗаказах = "</td></tr>";
			ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах);
			Индекс = Индекс + 1;
		КонецЦикла;
		ТекстИнформацииОЗаказах = "</table></div>";
		ТекстПостроительОбщий.ЗаписатьБезОбработки(ТекстИнформацииОЗаказах); 
		
		ТекстИнформацииОЗаказах = ТекстПостроительОбщий.Закрыть();

	КонецЕсли;
		
	ТекстНадписи = СтрШаблон(ТекстНадписи,
	ТекстМЛ,
	ТекстИнформацииОЗаказе,
	ТекстИнформацииОЗаказах); 

	МаксДлинаСтроки = 499;
	
	СтрокаПредставление = "<div style=""color:white; width:" + МаксДлинаСтроки + "px""></div>"
	+ СтрЗаменить(ТекстНадписи, Символы.ПС, "");

	Возврат СтрокаПредставление;
	
КонецФункции

Функция ПодборПунктаВМаршрут(НовыйПункт, МассивПунктов, МассивПунктовСсылок) Экспорт
	
	Если ТипЗнч(НовыйПункт) = Тип("Структура") Тогда
		КоординатыНовойТочки = НовыйПункт;
	Иначе
		КоординатыНовойТочки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйПункт, "Лат, Лон");
	КонецЕсли;

	КоординатыПунктов  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПунктовСсылок, "Лат, Лон");
	ИндексНовогоПункта = 0;
	
	// Если маршрут состоит из двух точек, новая точка всегда размещается между 1 и 2
	КолВоТочек = МассивПунктов.Количество();
	Если КолВоТочек < 2 Тогда
		Если КолВоТочек = 0 Тогда
			ИндексНовогоПункта = 0;
		Иначе
			ИндексНовогоПункта = МассивПунктов[МассивПунктов.Количество() - 1].Индекс + 1;
		КонецЕсли;
	Иначе
		// Найдем ближайшую точку (по прямой) до указанной на карте
		ПервыйПункт         = Неопределено;
		ТекДистанция        = Неопределено;
		ИндексПервогоПункта = 0;
		ИндексПунктов       = 0;
		Для Каждого ТекСтрока Из МассивПунктов Цикл
			ТекКоординаты = КоординатыПунктов.Получить(ТекСтрока.Пункт);
			
			Дистанция = уатЗащищенныеФункцииСервер_проф.РассчитатьДистанциюПоКоординатам(ТекКоординаты.Лат, ТекКоординаты.Лон,
			КоординатыНовойТочки.Лат, КоординатыНовойТочки.Лон);
			Если ТекДистанция = Неопределено
				ИЛИ Дистанция < ТекДистанция Тогда
				ИндексПервогоПункта = ИндексПунктов;
				ТекДистанция        = Дистанция;
				ПервыйПункт         = ТекСтрока;
			КонецЕсли;
			ИндексПунктов = ИндексПунктов + 1;
		КонецЦикла;
		
		РезультатПервыйОтрезок = Неопределено;
		РезультатВторойОтрезок = Неопределено;
		ТекстОшибки            = "";
		ПерваяДистанция        = 0;
		ВтораяДистанция        = 0;
		Если (ИндексПервогоПункта - 1) >= 0 Тогда
			Если (ИндексПервогоПункта + 1) >= КолВоТочек Тогда
				ИндексНовогоПункта = ИндексПервогоПункта;
			Иначе
				СоседнийПункт = МассивПунктов[ИндексПервогоПункта - 1];
				СоседнийПункт = КоординатыПунктов.Получить(СоседнийПункт.Пункт);
				
				ПервыйОтрезок = Новый Массив();
				ПервыйОтрезок.Добавить(СоседнийПункт);
				ПервыйОтрезок.Добавить(КоординатыНовойТочки);
				
				СоседнийПункт = КоординатыПунктов.Получить(ПервыйПункт.Пункт);
				
				ВторойОтрезок = Новый Массив();
				ВторойОтрезок.Добавить(КоординатыНовойТочки);
				ВторойОтрезок.Добавить(СоседнийПункт);
				
				Если уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(
					ПервыйОтрезок, РезультатПервыйОтрезок, ТекстОшибки)
					И уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(
					ВторойОтрезок, РезультатВторойОтрезок, ТекстОшибки) Тогда
					
					ПерваяДистанция = РезультатПервыйОтрезок.Расстояние + РезультатВторойОтрезок.Расстояние;

					Если ЗначениеЗаполнено(ПервыйПункт.Расстояние) Тогда
						ДопРасстояние = ПервыйПункт.Расстояние;
					Иначе

						СоседнийПункт = МассивПунктов[ИндексПервогоПункта + 1];
						СоседнийПункт = КоординатыПунктов.Получить(СоседнийПункт.Пункт);
						
						ПервыйОтрезок = Новый Массив();
						ПервыйОтрезок.Добавить(ПервыйПункт.Пункт);
						ПервыйОтрезок.Добавить(СоседнийПункт);
				
						Если уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(
							ПервыйОтрезок, РезультатПервыйОтрезок, ТекстОшибки) Тогда
							ДопРасстояние = РезультатПервыйОтрезок.Расстояние;
						Иначе
							ДопРасстояние = 0;
						КонецЕсли;
					КонецЕсли;
					ПерваяДистанция = ПерваяДистанция + ДопРасстояние;
					
					СоседнийПункт = КоординатыПунктов.Получить(ПервыйПункт.Пункт);
					
					ПервыйОтрезок = Новый Массив();
					ПервыйОтрезок.Добавить(СоседнийПункт);
					ПервыйОтрезок.Добавить(КоординатыНовойТочки);
					
					СоседнийПункт = МассивПунктов[ИндексПервогоПункта + 1];
					СоседнийПункт = КоординатыПунктов.Получить(СоседнийПункт.Пункт);

					ВторойОтрезок = Новый Массив();
					ВторойОтрезок.Добавить(КоординатыНовойТочки);
					ВторойОтрезок.Добавить(СоседнийПункт);
					Если уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(
						ПервыйОтрезок, РезультатПервыйОтрезок, ТекстОшибки)
						И уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(
						ВторойОтрезок, РезультатВторойОтрезок, ТекстОшибки) Тогда
						
						ВтораяДистанция = РезультатПервыйОтрезок.Расстояние + РезультатВторойОтрезок.Расстояние;
							
						Если ЗначениеЗаполнено(МассивПунктов[ИндексПервогоПункта - 1].Расстояние) Тогда
							ДопРасстояние = МассивПунктов[ИндексПервогоПункта - 1].Расстояние;
						Иначе
							
							СоседнийПункт = МассивПунктов[ИндексПервогоПункта - 1];
							СоседнийПункт = КоординатыПунктов.Получить(СоседнийПункт.Пункт);
							
							ПервыйОтрезок = Новый Массив();
							ПервыйОтрезок.Добавить(СоседнийПункт);
							ПервыйОтрезок.Добавить(ПервыйПункт.Пункт);
							
							Если уатЗащищенныеФункцииСервер.РассчитатьВремяРасстояние(
								ПервыйОтрезок, РезультатПервыйОтрезок, ТекстОшибки) Тогда
								ДопРасстояние = РезультатПервыйОтрезок.Расстояние;
							Иначе
								ДопРасстояние = 0;
							КонецЕсли;
						КонецЕсли;
						ВтораяДистанция = ВтораяДистанция + ДопРасстояние;
						
						ИндексНовогоПункта = ?(ПерваяДистанция < ВтораяДистанция, ИндексПервогоПункта, ИндексПервогоПункта + 1);
					Иначе
						ИндексНовогоПункта = ИндексПервогоПункта;
					КонецЕсли;
				Иначе
					ИндексНовогоПункта = ИндексПервогоПункта + 1;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ИндексНовогоПункта = ИндексПервогоПункта + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексНовогоПункта < КолВоТочек Тогда
		ИндексНовогоПункта = МассивПунктов[ИндексНовогоПункта].Индекс;
	КонецЕсли;
	
	Возврат ИндексНовогоПункта;
	
КонецФункции

Функция ДесятичноеВШестнадцатеричное(Знач дЧисло)
	
	Если дЧисло = 0 Тогда 
		Возврат "00";
	КонецЕсли;
	
	База = 16;
	Результат = "";
	Пока дЧисло <> 0 Цикл
		Поз =дЧисло % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		дЧисло = Цел(дЧисло / База);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда 
		Возврат "0" + Результат;
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ЭкранироватьСимволы(СтрокаЭкранирования) Экспорт
	Возврат уатЭлектронныеКартыПовтИсп.ЭкранироватьСимволы(СтрокаЭкранирования);
КонецФункции

Функция ПолучитьДанныеШаблоновИнформацииДляКарты(МассивОбъектов, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		Результат = Новый Соответствие();
		Если МассивОбъектов.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли;
		ТекМассивОбъектов = МассивОбъектов;
		ТекОбъект = МассивОбъектов[0];
	Иначе
		Результат = "";
		ТекМассивОбъектов = Новый Массив();
		ТекМассивОбъектов.Добавить(МассивОбъектов);
		ТекОбъект = МассивОбъектов;
	КонецЕсли;
	
	Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.уатПунктыНазначения")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("СправочникОбъект.уатПунктыНазначения") Тогда 
		ВидОбъекта = "ПунктыНазначения";
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("СправочникОбъект.Контрагенты") Тогда
		ВидОбъекта = "Контрагенты";
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.уатТС")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("СправочникОбъект.уатТС") Тогда
		ВидОбъекта = "ТС";
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.уатМаршруты")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("СправочникОбъект.уатМаршруты") Тогда 
		ВидОбъекта = "Маршруты";
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда 
		ВидОбъекта = "ЗаказГрузоотправителя"; 
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.уатПутевойЛист")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		ВидОбъекта = "ПутевойЛист"; 
	ИначеЕсли (ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист"))
		И ДополнительныеПараметры.Свойство("Заказ") Тогда 
		ВидОбъекта = "МаршрутныйЛистЗаказ";
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
		ВидОбъекта = "МаршрутныйЛист";
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДанныеФормыСтруктура")
		И ТекОбъект.Свойство("Ссылка") Тогда
		ТекОбъект = ТекОбъект.Ссылка;
		Если (ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
			ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист"))
			И ДополнительныеПараметры.Свойство("Заказ") Тогда 
			ВидОбъекта = "МаршрутныйЛистЗаказ";
		ИначеЕсли (ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
			ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист")) Тогда 
			ВидОбъекта = "МаршрутныйЛист";
		Иначе
			Возврат Результат;
		КонецЕсли; 
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	СтруктураПараметров = уатЭлектронныеКартыПовтИсп.РазложитьСтрокуШаблонаВМассивПодстрок(ВидОбъекта);
	Если СтруктураПараметров.СтрокаЗапроса = "" 
		И СтруктураПараметров.СтрокаЗапросаДопПараметры = "" Тогда
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			Для Каждого ТекОбъект Из МассивОбъектов Цикл
				Результат.Вставить(ТекОбъект, СтруктураПараметров.Шаблон);
			КонецЦикла;
		Иначе
			Возврат СтруктураПараметров.Шаблон; 
		КонецЕсли;
	КонецЕсли;
	ПолноеИмяОбъектаМетаданных = СтруктураПараметров.ПолноеИмяОбъектаМетаданных;
	ИмяОбъектаМетаданных       = СтруктураПараметров.ИмяОбъектаМетаданных; 
	СтрокаЗапроса              = СтруктураПараметров.СтрокаЗапроса;
	СтрокаРеквизитов           = СтруктураПараметров.СтрокаРеквизитов;
	СтрокаЗапросаДопПараметры  = СтруктураПараметров.СтрокаЗапросаДопПараметры;
	СтрокаДопРеквизитов        = СтруктураПараметров.СтрокаДопРеквизитов;
	
	ЕстьДопДанные = Истина;
	СтрокаЗапросавтДопПарметры = "";
	ИмяДанных = "";
	Если ДополнительныеПараметры.Свойство("ТекущееСостояние") Тогда 
		ТаблицаДопПарметров = ДополнительныеПараметры.ТекущееСостояние;
		ИмяДанных = "ТекущееСостояние";
	ИначеЕсли ДополнительныеПараметры.Свойство("ДанныеПункта") Тогда 
		ТаблицаДопПарметров = ДополнительныеПараметры.ДанныеПункта;
		ИмяДанных = "ДанныеПункта";
	ИначеЕсли ДополнительныеПараметры.Свойство("ДанныеЗаказа") Тогда 
		ТаблицаДопПарметров = ДополнительныеПараметры.ДанныеЗаказа;  
		ИмяДанных = "ДанныеЗаказа";
	Иначе
		ЕстьДопДанные = Ложь;
	КонецЕсли; 
	Если ЕстьДопДанные Тогда
		Для Каждого ТекКолонка Из ТаблицаДопПарметров.Колонки Цикл
			СтрокаЗапросавтДопПарметры = ?(СтрокаЗапросавтДопПарметры = "", "", СтрокаЗапросавтДопПарметры + ",") +
			ИмяДанных + "." + ТекКолонка.Имя + " КАК " + ТекКолонка.Имя;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТаблицаДопПарметров",ТаблицаДопПарметров);	
		Запрос.УстановитьПараметр("МассивОбъектов",     ТекМассивОбъектов);
		Запрос.Текст = "ВЫБРАТЬ
		|	%4
		|ПОМЕСТИТЬ %6
		|ИЗ
		|	&ТаблицаДопПарметров КАК %6
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	%5
		|	%6.Ссылка КАК Ссылка
		|ИЗ
		|	%6 КАК %6
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	%2
		|	%1.Ссылка КАК Ссылка
		|ИЗ
		|	%3 КАК %1
		|ГДЕ
		|	%1.Ссылка В (&МассивОбъектов)"; 
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяОбъектаМетаданных,
			?(ЗначениеЗаполнено(СтрокаЗапроса), СтрокаЗапроса + ",", ""), ПолноеИмяОбъектаМетаданных, 
			СтрокаЗапросавтДопПарметры,
			?(ЗначениеЗаполнено(СтрокаЗапросаДопПараметры), СтрокаЗапросаДопПараметры + ",", ""), ИмяДанных);
		
		Попытка
			МассивРезультатов        = Запрос.ВыполнитьПакет();
			ВыборкаОсновныеПараметры = МассивРезультатов[2].Выбрать();
			ВыборкаДопПараметры      = МассивРезультатов[1].Выбрать();
		Исключение  
			Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
				Для Каждого ТекОбъект Из МассивОбъектов Цикл
					ТекстНадписи = Нстр("ru = 'Проверьте правильность заполнения шаблона'");
					Результат.Вставить(ТекОбъект, ТекстНадписи);
				КонецЦикла;
				Возврат Результат;
			Иначе 
				Возврат Нстр("ru = 'Проверьте правильность заполнения шаблона'");
			КонецЕсли;
		КонецПопытки;
	Иначе
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивОбъектов",     ТекМассивОбъектов);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	%2
		|	%1.Ссылка КАК Ссылка
		|ИЗ
		|	%3 КАК %1
		|ГДЕ
		|	%1.Ссылка В (&МассивОбъектов)"; 
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяОбъектаМетаданных, ?(ЗначениеЗаполнено(СтрокаЗапроса), СтрокаЗапроса + ",", ""), ПолноеИмяОбъектаМетаданных);
		
		Попытка
			ВыборкаОсновныеПараметры = Запрос.Выполнить().Выбрать();
		Исключение
			Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
				Для Каждого ТекОбъект Из МассивОбъектов Цикл
					ТекстНадписи = Нстр("ru = 'Проверьте правильность заполнения шаблона'");
					Результат.Вставить(ТекОбъект, ТекстНадписи);
				КонецЦикла;
				Возврат Результат;
			Иначе 
				Возврат Нстр("ru = 'Проверьте правильность заполнения шаблона'");
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	СоответвиеРеквизитов = Новый Соответствие();
	Пока ВыборкаОсновныеПараметры.Следующий() Цикл 
		ЗначенияРеквизитовСтруктура = Новый Структура(СтрЗаменить(СтрокаРеквизитов, ".", ""));
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовСтруктура, ВыборкаОсновныеПараметры);
		СоответвиеРеквизитов.Вставить(ВыборкаОсновныеПараметры.Ссылка, ЗначенияРеквизитовСтруктура); 
	КонецЦикла; 
	СоответвиеДопРеквизитов = Новый Соответствие();
	Если ЕстьДопДанные Тогда
		Пока ВыборкаДопПараметры.Следующий() Цикл 
			ЗначенияРеквизитовСтруктура = Новый Структура(СтрЗаменить(СтрокаДопРеквизитов, ".", ""));
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовСтруктура, ВыборкаДопПараметры);
			СоответвиеДопРеквизитов.Вставить(ВыборкаДопПараметры.Ссылка, ЗначенияРеквизитовСтруктура); 
		КонецЦикла;
	КонецЕсли;
	
	МассивПодстрок = СтруктураПараметров.МассивПодстрок;
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		Для Каждого ТекОбъект Из МассивОбъектов Цикл
			ТекСоответвиеРеквизитов    = СоответвиеРеквизитов.Получить(ТекОбъект);
			ТекДополнительныеПараметры = СоответвиеДопРеквизитов.Получить(ТекОбъект);
			Для Каждого ТекСтрока Из СтруктураПараметров.СоответвиеПараметров Цикл
				ТекПараметр       = ТекСтрока.Значение;
				ИмяПараметра      = СтрЗаменить(ТекПараметр.Имя, ".", "");
				СтрокаФормата     = ТекПараметр.СтрокаФормата;
				
				ЗначениеРеквизита = ""; 
				ЭтоДопРеквизит    = Ложь;
				Если ТекСоответвиеРеквизитов.Свойство(ИмяПараметра) Тогда
					ЗначениеРеквизита    = ТекСоответвиеРеквизитов[ИмяПараметра];
					ТекПараметр.Значение = ЗначениеРеквизита;
				ИначеЕсли ТекДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
					ЗначениеРеквизита    = ТекДополнительныеПараметры[ИмяПараметра];
					ТекПараметр.Значение = ЗначениеРеквизита;
					ЭтоДопРеквизит = Истина;
				КонецЕсли; 
				Если ЗначениеЗаполнено(ТекПараметр.Значение) Тогда  
					Если ЗначениеЗаполнено(СтрокаФормата) Тогда
						ТекПараметр.Значение = Формат(ТекПараметр.Значение, СтрокаФормата);
					КонецЕсли;
					ТекПараметр.Значение = ЭкранироватьСимволы(Строка(ТекПараметр.Значение));
				Иначе 
					ТекПараметр.Значение = "";
				КонецЕсли;
				
				МассивИндексов = ТекПараметр.МассивИндексов; 
				Для Каждого ТекИндекс Из МассивИндексов Цикл
					МассивПодстрок[ТекИндекс] = ТекПараметр.Значение;
				КонецЦикла; 
				МассивИндексов = ТекПараметр.МассивИндексовСсылок; 
				Для Каждого ТекИндекс Из МассивИндексов Цикл 
					Если ЭтоДопРеквизит Тогда
						ЗначениеСсылка = ТекДополнительныеПараметры[ИмяПараметра + "Ссылка"];
					Иначе
						ЗначениеСсылка = ТекСоответвиеРеквизитов[ИмяПараметра + "Ссылка"];
					КонецЕсли;
					МассивПодстрок[ТекИндекс] = СформироватьГиперссылкуОткрытияОбъектаДляКарты(ЗначениеСсылка);
				КонецЦикла;
			КонецЦикла;

			ТекстПостроитель = Новый ЗаписьXML;
			ТекстПостроитель.УстановитьСтроку();
			Для Каждого ТекСтрока Из МассивПодстрок Цикл
				ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока); 
			КонецЦикла;
						
			Для Каждого ТекСтрока Из СтруктураПараметров.СоответвиеПараметров Цикл
				ТекПараметр       = ТекСтрока.Значение;
				ИмяПараметра      = СтрЗаменить(ТекПараметр.Имя, ".", "");
				
				ЗначениеРеквизита = "";
				ТекСоответвиеРеквизитов.Свойство(ИмяПараметра, ЗначениеРеквизита);
				ТекПараметр.Значение = ?(НЕ ЗначениеЗаполнено(ЗначениеРеквизита), "", Строка(ЗначениеРеквизита));
				
				МассивИндексов = ТекПараметр.МассивИндексов; 
				Для Каждого ТекИндекс Из МассивИндексов Цикл
					МассивПодстрок[ТекИндекс] = ТекПараметр.Значение;
				КонецЦикла;
			КонецЦикла;
			
			ТекстНадписи  = ТекстПостроитель.Закрыть(); 
			
			Результат.Вставить(ТекОбъект, ТекстНадписи);
		КонецЦикла;
	Иначе   
		ТекСоответвиеРеквизитов = СоответвиеРеквизитов.Получить(ТекОбъект);
		Для Каждого ТекСтрока Из СтруктураПараметров.СоответвиеПараметров Цикл
			ТекПараметр       = ТекСтрока.Значение;
			ИмяПараметра      = СтрЗаменить(ТекПараметр.Имя, ".", "");
			
			ЗначениеРеквизита = "";
			ТекСоответвиеРеквизитов.Свойство(ИмяПараметра, ЗначениеРеквизита);
			ТекПараметр.Значение = ?(НЕ ЗначениеЗаполнено(ЗначениеРеквизита), "", Строка(ЗначениеРеквизита));
			
			МассивИндексов = ТекПараметр.МассивИндексов; 
			Для Каждого ТекИндекс Из МассивИндексов Цикл
				МассивПодстрок[ТекИндекс] = ТекПараметр.Значение;
			КонецЦикла;
		КонецЦикла;
		
		ТекстПостроитель = Новый ЗаписьXML;
		ТекстПостроитель.УстановитьСтроку();
		Для Каждого ТекСтрока Из МассивПодстрок Цикл
			ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока); 
		КонецЦикла;
		Результат = ТекстПостроитель.Закрыть();
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьДанныеШаблонаИнформацииДляКарты(Знач Объект, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;
	
	НастройкиШаблонов = уатЭлектронныеКартыПовтИсп.ПолучитьНастройкиШаблоновИнформацииДляКарты();
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.уатПунктыНазначения")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.уатПунктыНазначения") Тогда 
		Если НастройкиШаблонов.Свойство("ПунктыНазначения") Тогда  
			ТекстШаблона = НастройкиШаблонов.ПунктыНазначения;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("ПунктыНазначения");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты") Тогда 
		Если НастройкиШаблонов.Свойство("Контрагенты") Тогда  
			ТекстШаблона = НастройкиШаблонов.Контрагенты;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Контрагенты");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.уатТС")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.уатТС") Тогда 
		Если НастройкиШаблонов.Свойство("ТС") Тогда  
			ТекстШаблона = НастройкиШаблонов.ТС;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("ТС");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.уатМаршруты")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.уатМаршруты") Тогда 
		Если НастройкиШаблонов.Свойство("Маршруты") Тогда  
			ТекстШаблона = НастройкиШаблонов.Маршруты;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("Маршруты");
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда
		Если НастройкиШаблонов.Свойство("ЗаказГрузоотправителя") Тогда  
			ТекстШаблона = НастройкиШаблонов.ЗаказГрузоотправителя;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("ЗаказГрузоотправителя");
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.уатПутевойЛист")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		Если НастройкиШаблонов.Свойство("ПутевойЛист") Тогда  
			ТекстШаблона = НастройкиШаблонов.ПутевойЛист;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("ПутевойЛист");
		КонецЕсли; 
	ИначеЕсли (ТипЗнч(Объект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.уатМаршрутныйЛист"))
		И ДополнительныеПараметры.Свойство("Заказ") Тогда 
		
		Если НастройкиШаблонов.Свойство("МаршрутныйЛистЗаказ") Тогда  
			ТекстШаблона = НастройкиШаблонов.МаршрутныйЛистЗаказ;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("МаршрутныйЛистЗаказ");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
		Если НастройкиШаблонов.Свойство("МаршрутныйЛист") Тогда  
			ТекстШаблона = НастройкиШаблонов.МаршрутныйЛист;
		Иначе 
			ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("МаршрутныйЛист");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
		И Объект.Свойство("Ссылка") Тогда
		Объект = Объект.Ссылка;
		Если (ТипЗнч(Объект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.уатМаршрутныйЛист"))
			И ДополнительныеПараметры.Свойство("Заказ") Тогда
			Если НастройкиШаблонов.Свойство("МаршрутныйЛистЗаказ") Тогда 
				ТекстШаблона = НастройкиШаблонов.МаршрутныйЛистЗаказ;
			Иначе 
				ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("МаршрутныйЛистЗаказ");
			КонецЕсли;
		ИначеЕсли (ТипЗнч(Объект) = Тип("ДокументСсылка.уатМаршрутныйЛист")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.уатМаршрутныйЛист")) Тогда
			Если НастройкиШаблонов.Свойство("МаршрутныйЛист") Тогда 
				ТекстШаблона = НастройкиШаблонов.МаршрутныйЛист;
			Иначе 
				ТекстШаблона = ПолучитьТекстШаблонаПоУмолчанию("МаршрутныйЛист");
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли; 
	Иначе
		Возврат "";
	КонецЕсли;  
	// Извлекаем из шаблона параметры
	ПараметрыТекстаСообщения = ОпределитьПараметрыТекстаСообщения(ТекстШаблона);
	// Заполняем параметры
	Сообщение = ЗаполнитьПараметрыСообщения(Объект, ПараметрыТекстаСообщения, ДополнительныеПараметры);
	// Заполнение значений параметров 
	НачальнаяПозиция = 1;
	Пока СтрНайти(ТекстШаблона, "<a href=""",, НачальнаяПозиция) <> 0 Цикл
		ПозицияСсылки           = СтрНайти(ТекстШаблона, "<a href=""",, НачальнаяПозиция);
		ПозицияОкончаниеСсылки  = СтрНайти(ТекстШаблона, """>", НаправлениеПоиска.СНачала, ПозицияСсылки + 2); 
		
		НайденнаяСсылка   = Сред(ТекстШаблона, ПозицияСсылки + 9, ПозицияОкончаниеСсылки - ПозицияСсылки - 9); 
		ПозицияПараметра  = СтрНайти(НайденнаяСсылка, "[");
		ПозицияОкончание  = СтрНайти(НайденнаяСсылка, "]", НаправлениеПоиска.СНачала, ПозицияПараметра + 1);
		Если ПозицияОкончание = 0 Тогда
			НачальнаяПозиция = ПозицияСсылки + 1;
			Продолжить;
		КонецЕсли;
		
		НайденныйПараметр = Сред(НайденнаяСсылка, ПозицияПараметра + 1, ПозицияОкончание - ПозицияПараметра - 1);

		МассивРазобранныйПараметр = СтрРазделить(НайденныйПараметр, ".", Ложь);
		Если МассивРазобранныйПараметр.Количество() = 0 Тогда
			ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
		Иначе
			ГлавныйЭлемент = МассивРазобранныйПараметр[0];
			ТекДанные = ПараметрыТекстаСообщения.Получить(ГлавныйЭлемент);
			Если ТекДанные = Неопределено Тогда
				ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
			Иначе
				Если ТипЗнч(ТекДанные) = Тип("Соответствие") Тогда
					Ссылка    = МассивРазобранныйПараметр[1];
					ТекДанные = ТекДанные.Получить(Ссылка);
					Если ТекДанные = Неопределено Тогда
						ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
					ИначеЕсли ТипЗнч(ТекДанные) = Тип("Соответствие") Тогда
						Ссылка    = МассивРазобранныйПараметр[2];
						ТекДанные = ТекДанные.Получить(Ссылка);
						Если ТекДанные = Неопределено Тогда
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
						ИначеЕсли ТипЗнч(ТекДанные) = Тип("Соответствие") Тогда
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
						ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные) Тогда
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
						ИначеЕсли ТипЗнч(ТекДанные) = Тип("Строка") Тогда
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
						Иначе
							ПредметМетаданные = ТекДанные.Метаданные(); // ОбъектМетаданных 
							ТипЗначения       = ТипЗнч(ТекДанные);
							ИмяОбъекта        = ПредметМетаданные.Имя; 
							ОбъектМетаданных  = Метаданные.НайтиПоТипу(ТипЗначения);
							Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
								ТипОбъекта = "Справочники";
							ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
								ТипОбъекта = "Документы";
							Иначе
								ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
								НачальнаяПозиция = ПозицияСсылки + 1;
								Продолжить;
							КонецЕсли;    
							
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>",
							"<a href=""" + СформироватьГиперссылкуОткрытияОбъектаДляКарты(ТекДанные)+ """>"); 
						КонецЕсли;
					ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные) Тогда
						 ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
					Иначе
						Попытка
							ПредметМетаданные = ТекДанные.Метаданные(); // ОбъектМетаданных
						Исключение 
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
							Продолжить;
						КонецПопытки;
						ТипЗначения       = ТипЗнч(ТекДанные);
						ИмяОбъекта        = ПредметМетаданные.Имя; 
						ОбъектМетаданных  = Метаданные.НайтиПоТипу(ТипЗначения);
						Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
							ТипОбъекта = "Справочники";
						ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
							ТипОбъекта = "Документы";
						Иначе
							ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>", "<a href="""">");
							НачальнаяПозиция = ПозицияСсылки + 1;
							Продолжить;
						КонецЕсли;    
						
						ТекстШаблона = СтрЗаменить(ТекстШаблона,"<a href=""" + НайденнаяСсылка + """>",
							"<a href=""" + СформироватьГиперссылкуОткрытияОбъектаДляКарты(ТекДанные)+ """>"); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		НачальнаяПозиция = ПозицияСсылки + 1;
	КонецЦикла;
	СообщениеРезультат = УстановитьЗначенияРеквизитовВТекстСообщения(ТекстШаблона, ПараметрыТекстаСообщения); 
	СообщениеРезультат = СтрЗаменить(СтрЗаменить(СообщениеРезультат, "   ", "&nbsp;&nbsp;&nbsp;"), "  ", "&nbsp;&nbsp;");
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СообщениеРезультат, Символы.ПС, ""), "<p style=""", "<p style=""margin: 5px 0;"), "<p>", "<p style=""margin: 5px 0;"">");
	
КонецФункции

Функция УстановитьЗначенияРеквизитовВТекстСообщения(ТекстШаблона, ПараметрыТекстаСообщения)
	
	Текст = ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ТекстШаблона, ПараметрыТекстаСообщения);
	
	Возврат Текст;
	
КонецФункции

Функция ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(Знач ШаблонСтроки, ВставляемыеЗначения, Знач Префикс = "") Экспорт
	
	Результат = ШаблонСтроки;
	Для каждого СписокРеквизитов Из ВставляемыеЗначения Цикл
		Если ТипЗнч(СписокРеквизитов.Значение) = Тип("Соответствие") Тогда
			Результат = ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(Результат, СписокРеквизитов.Значение, Префикс + СписокРеквизитов.Ключ + ".");
		Иначе
			Результат = СтрЗаменить(Результат, "[" + Префикс + СписокРеквизитов.Ключ + "]", ЭкранироватьСимволы(Строка(СписокРеквизитов.Значение)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьПараметрыТекстаСообщения(ТекстСообщения)
	
	МассивПараметров = Новый Соответствие;
	
	ДлинаСообщения = СтрДлина(ТекстСообщения);
	
	Текст = ТекстСообщения;
	Позиция = СтрНайти(Текст, "[");
	Пока Позиция > 0 Цикл
		Если Позиция + 1 > ДлинаСообщения Тогда
			Прервать;
		КонецЕсли;
		ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, Позиция + 1);
		Если ПозицияОкончание > 0 Тогда
			НайденныйПараметр = Сред(Текст, Позиция + 1, ПозицияОкончание - Позиция - 1);
			МассивПараметров.Вставить(НайденныйПараметр, "");
		ИначеЕсли ПозицияОкончание = 0 Тогда
			ПозицияОкончание = Позиция + 1;
		КонецЕсли;
		Если ПозицияОкончание > ДлинаСообщения Тогда
			Прервать;
		КонецЕсли;
		Позиция = СтрНайти(Текст, "[", НаправлениеПоиска.СНачала, ПозицияОкончание);
	КонецЦикла;
	
	СоответствиеПараметров = Новый Соответствие;
	Для каждого ЭлементаМассиваПараметров Из МассивПараметров Цикл
		ПозицияФормат = СтрНайти(ЭлементаМассиваПараметров.Ключ, "{");
		Если ПозицияФормат > 0 Тогда
			ИмяПараметра  = Лев(ЭлементаМассиваПараметров.Ключ, ПозицияФормат - 1);
			СтрокаФормата = Сред(ЭлементаМассиваПараметров.Ключ, ПозицияФормат );
		Иначе
			ИмяПараметра  = ЭлементаМассиваПараметров.Ключ;
			СтрокаФормата = "";
		КонецЕсли;
		МассивРазобранныйПараметр = СтрРазделить(ИмяПараметра, ".", Ложь);
		Если МассивРазобранныйПараметр.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЭлементСоответствия(СоответствиеПараметров, МассивРазобранныйПараметр, СтрокаФормата);
	КонецЦикла;
	
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура УстановитьЭлементСоответствия(СоответствиеПараметров, Знач МассивРазобранныйПараметр, СтрокаФормата)
	ЭлементСоответствия = СоответствиеПараметров.Получить(МассивРазобранныйПараметр[0]);
	Если ЭлементСоответствия = Неопределено Тогда
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			ВнутреннийЭлементСоответствия = Новый Соответствие;
			СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0], ВнутреннийЭлементСоответствия);
			МассивРазобранныйПараметр.Удалить(0);
			УстановитьЭлементСоответствия(ВнутреннийЭлементСоответствия, МассивРазобранныйПараметр, СтрокаФормата)
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0] + СтрокаФормата] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0] + СтрокаФормата, "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			МассивРазобранныйПараметр.Удалить(0);
			УстановитьЭлементСоответствия(ЭлементСоответствия, МассивРазобранныйПараметр, СтрокаФормата)
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0] + СтрокаФормата] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0] + СтрокаФормата, "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьПараметрыСообщения(Предмет, ПараметрыТекстаСообщения, ДополнительныеПараметры)
	
	Сообщение = Новый Структура("ЗначенияРеквизитов");
	Сообщение.ЗначенияРеквизитов = Новый Соответствие;
	ИмяОбъекта = "";
	
	ПредметМетаданные = Предмет.Метаданные(); // ОбъектМетаданных
	ИмяОбъекта        = ПредметМетаданные.Имя;

	ПараметрТекстаСообщения = ПараметрыТекстаСообщения[ИмяОбъекта];
	Если ПараметрТекстаСообщения <> Неопределено Тогда
		ЗаполнитьЗначенияРеквизитовПоПараметрам(Сообщение, ПараметрыТекстаСообщения[ИмяОбъекта], Предмет);
	КонецЕсли; 
	
	Если ПараметрыТекстаСообщения.Получить("ДанныеПункта") <> Неопределено Тогда
		ДанныеПункта = Новый Соответствие; 
		Если ДополнительныеПараметры.Свойство("НомерПункта") Тогда
			Если ДополнительныеПараметры.FTL Тогда
				СтрокаПункта = Предмет.ПромежуточныеПункты[ДополнительныеПараметры.НомерПункта];
				ДанныеПункта.Вставить("Пункт", СтрокаПункта.Пункт); 
				ДанныеПункта.Вставить("ОтправительПолучатель", СтрокаПункта.ОтправительПолучатель);
				ДанныеПункта.Вставить("ТипТочкиМаршрута", СтрокаПункта.ТипТочкиМаршрута);
				ДанныеПункта.Вставить("КонтактноеЛицо", СтрокаПункта.КонтактноеЛицо);
				ДанныеПункта.Вставить("ПрибытиеПлан", СтрокаПункта.ПрибытиеПлан);
				ДанныеПункта.Вставить("УбытиеПлан", СтрокаПункта.УбытиеПлан);
				ДанныеПункта.Вставить("Стоянка", СтрокаПункта.Стоянка);
				ДанныеПункта.Вставить("ОкноС", СтрокаПункта.ОкноС);
				ДанныеПункта.Вставить("ОкноПо", СтрокаПункта.ОкноПо);
			Иначе
				Если ДополнительныеПараметры.НомерПункта = 0 Тогда 
					ДанныеПункта.Вставить("Пункт", Предмет.АдресОтправления);
					ДанныеПункта.Вставить("ОтправительПолучатель", Предмет.Грузоотправитель);
					ДанныеПункта.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
					ДанныеПункта.Вставить("КонтактноеЛицо", Предмет.КонтактноеЛицоГрузоотправителя);
					ДанныеПункта.Вставить("ПрибытиеПлан", Предмет.ОтправлениеС);
					ДанныеПункта.Вставить("УбытиеПлан", Предмет.ОтправлениеПо);
					ДанныеПункта.Вставить("Стоянка", Предмет.СтоянкаПунктОтправления);  
					ДанныеПункта.Вставить("ОкноС", Предмет.ОтправлениеС);
					ДанныеПункта.Вставить("ОкноПо", Предмет.ОтправлениеПо);
				Иначе
					ДанныеПункта.Вставить("Пункт", Предмет.АдресНазначения);
					ДанныеПункта.Вставить("ОтправительПолучатель", Предмет.Грузополучатель); 
					ДанныеПункта.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Разгрузка);
					ДанныеПункта.Вставить("КонтактноеЛицо", Предмет.КонтактноеЛицоГрузополучателя);  
					ДанныеПункта.Вставить("ПрибытиеПлан", Предмет.ДоставкаС);
					ДанныеПункта.Вставить("УбытиеПлан", Предмет.ДоставкаПо); 
					ДанныеПункта.Вставить("Стоянка", Предмет.СтоянкаПунктНазначения);
					ДанныеПункта.Вставить("ОкноС", Предмет.ДоставкаС);
					ДанныеПункта.Вставить("ОкноПо", Предмет.ДоставкаПо);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого ТекСтрока Из ДополнительныеПараметры Цикл
				ДанныеПункта.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияРеквизитов = Новый Соответствие;
		Для Каждого ТекРеквизит Из ПараметрыТекстаСообщения.Получить("ДанныеПункта") Цикл 
			Позиция = СтрНайти(ТекРеквизит.Ключ, "{");
			Если Позиция > 0 Тогда
				ИмяПараметра = Лев(ТекРеквизит.Ключ, Позиция - 1); 
			Иначе
				ИмяПараметра = ТекРеквизит.Ключ;
			КонецЕсли;
			
			ЗначениеПредмет = ДанныеПункта.Получить(ИмяПараметра);
			Если ЗначениеПредмет <> Неопределено Тогда
				Если ТипЗнч(ТекРеквизит.Значение) = Тип("Соответствие")
					И НЕ ТипЗнч(ЗначениеПредмет) = Тип("Строка") Тогда
					ЗаполнитьРеквизитыПоПредмету(ТекРеквизит.Значение, ЗначениеПредмет);
				Иначе
					ЗначенияРеквизитов.Вставить(ИмяПараметра, ЗначениеПредмет);
				Конецесли;
			КонецЕсли;
		КонецЦикла;
		УстановитьПараметрыИзЗапроса(ПараметрыТекстаСообщения.Получить("ДанныеПункта"), ЗначенияРеквизитов); 
		Сообщение.Вставить("ДанныеПункта", ПараметрыТекстаСообщения.Получить("ДанныеПункта"));
	ИначеЕсли ПараметрыТекстаСообщения.Получить("ТекущееСостояние") <> Неопределено Тогда
		ТекущееСостояние = Новый Соответствие; 
		Для Каждого ТекСтрока Из ДополнительныеПараметры Цикл
			ТекущееСостояние.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
		КонецЦикла;
		
		ЗначенияРеквизитов = Новый Соответствие;
		Для Каждого ТекРеквизит Из ПараметрыТекстаСообщения.Получить("ТекущееСостояние") Цикл 
			Позиция = СтрНайти(ТекРеквизит.Ключ, "{");
			Если Позиция > 0 Тогда
				ИмяПараметра = Лев(ТекРеквизит.Ключ, Позиция - 1); 
			Иначе
				ИмяПараметра = ТекРеквизит.Ключ;
			КонецЕсли;
			
			ЗначениеПредмет = ТекущееСостояние.Получить(ИмяПараметра);
			Если ЗначениеПредмет <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПредмет) Тогда
				Если ТипЗнч(ТекРеквизит.Значение) = Тип("Соответствие") Тогда
					ЗаполнитьРеквизитыПоПредмету(ТекРеквизит.Значение, ЗначениеПредмет);
				Иначе
					ЗначенияРеквизитов.Вставить(ИмяПараметра, ЗначениеПредмет);
				Конецесли;
			КонецЕсли;
		КонецЦикла;
		УстановитьПараметрыИзЗапроса(ПараметрыТекстаСообщения.Получить("ТекущееСостояние"), ЗначенияРеквизитов); 
		Сообщение.Вставить("ТекущееСостояние", ПараметрыТекстаСообщения.Получить("ТекущееСостояние"));
	ИначеЕсли ПараметрыТекстаСообщения.Получить("ДанныеЗаказа") <> Неопределено Тогда
		
		ДанныеЗаказа = Новый Соответствие; 
		Для Каждого ТекСтрока Из ДополнительныеПараметры Цикл
			ДанныеЗаказа.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
		КонецЦикла;
		
		ЗначенияРеквизитов = Новый Соответствие;
		Для Каждого ТекРеквизит Из ПараметрыТекстаСообщения.Получить("ДанныеЗаказа") Цикл 
			Позиция = СтрНайти(ТекРеквизит.Ключ, "{");
			Если Позиция > 0 Тогда
				ИмяПараметра = Лев(ТекРеквизит.Ключ, Позиция - 1); 
			Иначе
				ИмяПараметра = ТекРеквизит.Ключ;
			КонецЕсли;
			
			ЗначениеПредмет = ДанныеЗаказа.Получить(ИмяПараметра);
			Если ЗначениеПредмет <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПредмет) Тогда
				Если ТипЗнч(ТекРеквизит.Значение) = Тип("Соответствие") Тогда
					ЗаполнитьРеквизитыПоПредмету(ТекРеквизит.Значение, ЗначениеПредмет);
				Иначе
					ЗначенияРеквизитов.Вставить(ИмяПараметра, ЗначениеПредмет);
				Конецесли;
			КонецЕсли;
		КонецЦикла;
		УстановитьПараметрыИзЗапроса(ПараметрыТекстаСообщения.Получить("ДанныеЗаказа"), ЗначенияРеквизитов); 
		Сообщение.Вставить("ДанныеЗаказа", ПараметрыТекстаСообщения.Получить("ДанныеЗаказа"));

	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ЗаполнитьЗначенияРеквизитовПоПараметрам(Сообщение, Знач ПараметрыТекстаСообщения, Предмет)
	
	ЗаполнитьРеквизитыПоПредмету(ПараметрыТекстаСообщения, Предмет);
	Сообщение.ЗначенияРеквизитов = ПараметрыТекстаСообщения;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоПредмету(Реквизиты, Предмет)
	
	МетаданныеОбъекта  = Предмет.Метаданные();
	ПараметрыОснования = ОпределитьРеквизитыДляЗапросаПоМетаданным(Реквизиты, МетаданныеОбъекта);
	
	СписокРеквизитов = Сред(СписокПараметров(ПараметрыОснования), 3);
	Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
		
		ЗначенияРеквизитов = Новый Соответствие;
		Для Каждого ЗначениеРеквизита Из ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, СписокРеквизитов, Истина) Цикл
			ЗначенияРеквизитов.Вставить(ЗначениеРеквизита.Ключ,ЗначениеРеквизита.Значение);
		КонецЦикла;
		УстановитьПараметрыИзЗапроса(Реквизиты, ЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьРеквизитыДляЗапросаПоМетаданным(Знач ПараметрыТекстаСообщения, МетаданныеОбъекта)
	
	ПараметрыОснования = СкопироватьСоответствие(ПараметрыТекстаСообщения);
	ОбработатьОпределитьРеквизитыДляЗапросаПоМетаданным(ПараметрыОснования, МетаданныеОбъекта);
	Возврат ПараметрыОснования;
	
КонецФункции

Процедура ОбработатьОпределитьРеквизитыДляЗапросаПоМетаданным(ПараметрыОснования, МетаданныеОбъекта)
	
	Для Каждого ПараметрОснования Из ПараметрыОснования Цикл
		Позиция = СтрНайти(ПараметрОснования.Ключ, "{");
		Если Позиция > 0 Тогда
			ИмяПараметра = Лев(ПараметрОснования.Ключ, Позиция - 1);
		Иначе
			ИмяПараметра = ПараметрОснования.Ключ;
		КонецЕсли;
		Если ТипЗнч(ПараметрОснования.Значение) = Тип("Соответствие") Тогда
			МетаданныеОбъектаПоКлючу = МетаданныеОбъекта.Реквизиты.Найти(ИмяПараметра);
			Если МетаданныеОбъектаПоКлючу <> Неопределено Тогда
				Для каждого Тип Из МетаданныеОбъектаПоКлючу.Тип.Типы() Цикл
					ОбработатьОпределитьРеквизитыДляЗапросаПоМетаданным(ПараметрОснования.Значение, Метаданные.НайтиПоТипу(Тип));
				КонецЦикла;
			Иначе
				ПараметрыОснования.Удалить(ПараметрОснования.Ключ);
			КонецЕсли;
		ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти(ИмяПараметра) = Неопределено Тогда
			РеквизитНеНайден = Истина;
			Для Каждого СтандартныеРеквизиты Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				Если СтрСравнить(СтандартныеРеквизиты.Имя, ИмяПараметра) = 0 Тогда
					РеквизитНеНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если РеквизитНеНайден Тогда
				ПараметрыОснования.Удалить(ПараметрОснования.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СписокПараметров(ПараметрыТекстаСообщения, Префикс = "")
	
	СписокРеквизитов = "";
	Реквизиты = Новый Соответствие;
	Для каждого Реквизит Из ПараметрыТекстаСообщения Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Соответствие") Тогда
			СписокРеквизитов = СписокРеквизитов + СписокПараметров(Реквизит.Значение, Реквизит.Ключ + ".");
		Иначе
			Если ПустаяСтрока(Реквизит.Значение) Тогда
				
				ОписаниеРеквизита = ИмяПараметраБезСтрокиФормата(Реквизит.Ключ);
				Если Реквизиты[ОписаниеРеквизита.Имя] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Реквизиты.Вставить(ОписаниеРеквизита.Имя, Истина);
				
				СписокРеквизитов = СписокРеквизитов + ", " + Префикс + ОписаниеРеквизита.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура УстановитьПараметрыИзЗапроса(Параметры, Результат, Знач Префикс = "")
	
	Для каждого ЗначениеПараметра Из Параметры Цикл
		Если ТипЗнч(Параметры[ЗначениеПараметра.Ключ]) = Тип("Соответствие") Тогда
			УстановитьПараметрыИзЗапроса(Параметры[ЗначениеПараметра.Ключ], Результат, Префикс + ЗначениеПараметра.Ключ);
		Иначе
			Если ПустаяСтрока(ЗначениеПараметра.Значение) Тогда
				ПозицияФормата = СтрНайти(ЗначениеПараметра.Ключ, "{");
				Если ПозицияФормата > 0 Тогда
					ИмяПараметра = Лев(ЗначениеПараметра.Ключ, ПозицияФормата - 1);
					СтрокаФормата =Сред(ЗначениеПараметра.Ключ, ПозицияФормата + 1, СтрДлина(ЗначениеПараметра.Ключ) - СтрДлина(ИмяПараметра) -2);
					Значение = Результат.Получить(Префикс + ИмяПараметра);
					Если СтрНачинаетсяС(СтрокаФормата , "Д") Тогда
						Параметры[ЗначениеПараметра.Ключ] = Формат(ПреобразоватьСтрокиКТипу(Значение, "Дата"), СтрокаФормата);
					ИначеЕсли СтрНачинаетсяС(СтрокаФормата , "Ч") Тогда
						Параметры[ЗначениеПараметра.Ключ] = Формат(ПреобразоватьСтрокиКТипу(Значение, "Число"), СтрокаФормата);
					ИначеЕсли СтрНачинаетсяС(СтрокаФормата , "Б") Тогда
						Параметры[ЗначениеПараметра.Ключ] = Формат(ПреобразоватьСтрокиКТипу(Значение, "Булево"), СтрокаФормата);
					Иначе
						Параметры[ЗначениеПараметра.Ключ] = Формат(Результат.Получить(Префикс + ИмяПараметра), СтрокаФормата);
					КонецЕсли;
				Иначе
					Параметры[ЗначениеПараметра.Ключ] = ?(Результат[Префикс + ЗначениеПараметра.Ключ] <> Неопределено, Результат[Префикс + ЗначениеПараметра.Ключ], "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьСоответствие(Источник)
	
	Получатель = Новый Соответствие;
	
	Для Каждого Элемент Из Источник Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда
			Получатель[Элемент.Ключ] = СкопироватьСоответствие(Элемент.Значение);
		Иначе
			Получатель[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Получатель;
	
КонецФункции

Функция ПреобразоватьСтрокиКТипу(Значение, Тип)
	ОписаниеТипа = Новый ОписаниеТипов(Тип);
	Возврат ОписаниеТипа.ПривестиЗначение(Значение);
КонецФункции

Функция ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта) Экспорт
	
	Возврат уатЭлектронныеКартыПовтИсп.ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта);
	
КонецФункции

Функция ПолучитьТекстШаблонаHTML(Шаблон) Экспорт
	ТелоШаблона = "<!DOCTYPE html>
                       |<html dir=""ltr"">
                       |<head>
                       |<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
                       |<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
                       |<meta name=""format-detection"" content=""telephone=no"" />
                       |<style type=""text/css"">
                       |body{margin:0;padding:8px;}
                       |p{line-height:1.15;margin:0;white-space:pre-wrap;}
                       |ol,ul{margin-top:0;margin-bottom:0;}
                       |img{border:none;}
                       |li>p{display:inline;}
                       |</style>
                       |</head>
                       |<body>
                       |";
	ТелоШаблона = ТелоШаблона + Шаблон;
	ТелоШаблона = ТелоШаблона + "
	|</body>
	|</html>";
	Возврат ТелоШаблона;
	
КонецФункции

Функция ИмяПараметраБезСтрокиФормата(Знач ПараметрШаблонаИзТекста) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Имя",   "");
	Результат.Вставить("Формат", "");
	
	ПозицияФорматТекст = СтрНайти(ПараметрШаблонаИзТекста, "{", НаправлениеПоиска.СКонца);
	Если ПозицияФорматТекст > 0 Тогда
		Результат.Имя = Лев(ПараметрШаблонаИзТекста, ПозицияФорматТекст - 1);
		Результат.Формат = Сред(ПараметрШаблонаИзТекста, ПозицияФорматТекст + 1, СтрДлина(ПараметрШаблонаИзТекста) - ПозицияФорматТекст - 1);
	Иначе
		Результат.Имя = ПараметрШаблонаИзТекста;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РасчитатьФактРасстояниеДлительнаяОперация(ОбъектСтруктура, АдресХранилища = Неопределено) Экспорт
	
	РезультатСтруктура = Новый Структура;
	// РАСЧЕТ.
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСтруктура.ТранспортноеСредство, "ИсточникФактическихДанныхДляКартографии") = 
		ПредопределенноеЗначение("Перечисление.уатИсточникФактическихДанныхДляКартографии.МобильноеПриложение") Тогда
		уатМобильноеПриложениеВодителяСервер.РассчитатьСпидометр(ОбъектСтруктура, РезультатСтруктура);
	Иначе
		уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	КонецЕсли;
	
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		ФактическоеРасстояние = "" + Окр(РезультатСтруктура.СчетчикПоGPS, 2) + " км";
	Иначе
		ФактическоеРасстояние = "- км";
	КонецЕсли;
		
	Если АдресХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(ФактическоеРасстояние, АдресХранилища);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ГеокодироватьКоординатыВПунктеНазначения(ПунктОбъект) Экспорт
	
	мЛат = 0;
	мЛон = 0;
	
	ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
	Если Не ЗначениеЗаполнено(ТипЭлектронныхКарт) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
		Или ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")
		Или ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.DaData") Тогда
		// {Совместимость}
		// Этот код - для совместимости с старым форматом хранения адреса в XML.	
		ДопПараметры = Новый Структура;
		Если ЗначениеЗаполнено(ПунктОбъект.ЗначениеАдреса) Тогда
			стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSMПоJSON(ПунктОбъект.ЗначениеАдреса, Ложь,,ДопПараметры, ТипЭлектронныхКарт);
		Иначе
			стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(ПунктОбъект.ЗначенияПолей, Ложь, ДопПараметры, ТипЭлектронныхКарт);
		КонецЕсли;
		// {/Совместимость}
		ТекстОшибкиOSM = "";
		
		КоличествоПолученныхРезультатов = Неопределено;
		мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM, КоличествоПолученныхРезультатов);
		Если КоличествоПолученныхРезультатов = 0 Тогда
			ТекстОшибкиOSM = "";
			ЭтоГеокодированиеOSM = Истина;
			стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаБезСокращений(стрПредставлениеПункта,, ЭтоГеокодированиеOSM);
			мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
		КонецЕсли;
		Если ТекстОшибкиOSM = "" Тогда
			мЛат = мсвКоординат.Лат;
			мЛон = мсвКоординат.Лон;
			
			ПунктОбъект.Лат = мЛат;
			ПунктОбъект.Лон = мЛон;
			
		Иначе 
			// {Совместимость}
			// Этот код - для совместимости с старым форматом хранения адреса в XML.	
			Если ЗначениеЗаполнено(ПунктОбъект.ЗначениеАдреса) Тогда
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSMПоJSON(ПунктОбъект.ЗначениеАдреса,, Истина, ДопПараметры, ТипЭлектронныхКарт);
			Иначе
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(ПунктОбъект.ЗначенияПолей, Истина, ДопПараметры, ТипЭлектронныхКарт);
			КонецЕсли;
			// {/Совместимость}
			ТекстОшибкиOSM = "";
			мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
			Если КоличествоПолученныхРезультатов = 0 Тогда
				ТекстОшибкиOSM = "";
				ЭтоГеокодированиеOSM = Истина;
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаБезСокращений(стрПредставлениеПункта,, ЭтоГеокодированиеOSM);
				мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
			КонецЕсли;
			Если ТекстОшибкиOSM = "" Тогда
				мЛат = мсвКоординат.Лат;
				мЛон = мсвКоординат.Лон;
				
				ПунктОбъект.Лат = мЛат;
				ПунктОбъект.Лон = мЛон;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

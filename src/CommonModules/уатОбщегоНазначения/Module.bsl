////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс


#Область РаботаСВременем

// Функция преобразует тип Дата в тип Число в формате ЧЧ.ММ
//
Функция уатВремяВЧЧ_ММ(Время) Экспорт
	
	Часы = Цел(Время / 3600);
	//Минуты = Цел((Время - (Часы * 3600))/60)/100;
	Минуты = Окр((Время - (Часы * 3600))/60)/100;
	Результат = Часы + Минуты;
	Возврат Результат;
	
КонецФункции	

// Функция преобразует тип Число в формате ЧЧ.ММ в количество секунд
//
Функция уатВремяВСекунды(Время) Экспорт
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 100;
	Результат = Часы * 3600 + Минуты * 60;
	Возврат Результат;
КонецФункции	

// Функция преобразует тип Число в формате ЧЧ.ДЕСЯТЫЕ ДОЛИ ЧАСА в количество секунд
//
Функция уатПоказанияСчетчикаВСекунды(Время) Экспорт
	
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 60;
	Результат = Часы * 3600 + Минуты * 60;
	Возврат Результат;
КонецФункции	

// Преобразует время из представления в виде строки в число
//
// Параметры:
//  Время        - Строка - Строковое представление времени
//
// Возвращаемое значение:
//  Время - Число 5.2 - Время в виде числа
Функция уатВремяСтрокаВЧисло(Время) Экспорт
	
	Поз = Найти(Время,":");
	Если НЕ Поз тогда
		Возврат 0;
	КонецЕсли;
	ЦелЧасть = Число(Лев(Время,Поз-1));
	ДробЧасть = Число(Сред(Время,Поз+1,6)) / 60;
	Возврат ЦелЧасть + ДробЧасть; 	
	
КонецФункции

// Преобразует время из числового представления в строковое
//
// Параметры:
//  Время        - Число - числовое представление времени
//
// Возвращаемое значение
//  Время - Строка - Время в виде строки
Функция уатВремяЧислоВСтрока(Время) Экспорт
	
	ЦелЧасть = Цел(Время);
	ДробЧасть = (Время - ЦелЧасть) * 60;
	Возврат Строка(ЦелЧасть) + ":" + Строка(Окр(ДробЧасть,0));
	
КонецФункции

// Форматирует выводимое время в отчетах.
// Переводит время в сотых долях часа во время в формате Часы:Минуты
// Параметры:
//  ДатаВремяЧисло - Число - время в часах и сотых долях часа
// Возвращаемое значение:
//	В зависимости от настроек УАТ - Время в часах и минутах (ЧЧ:мм) или время во входящем формате (не изменяется)
//
Функция уатФорматироватьВремяВОтчетах(ДатаВремяЧисло, ФорматПоУмолчанию = Неопределено, Права = Неопределено) Экспорт
	Если НЕ уатПраваИНастройки.уатПраво("ФорматироватьВремяВОтчетах", Права) Тогда
		Если ФорматПоУмолчанию <> Неопределено Тогда
			Возврат Формат(ДатаВремяЧисло, ФорматПоУмолчанию);
		КонецЕсли;
		
		Возврат ДатаВремяЧисло;
	КонецЕсли;
	
	Если ДатаВремяЧисло = 0 ИЛИ ДатаВремяЧисло = Null Тогда
		СтрокаЧМ = 0;
	Иначе
		СтрокаЧМ = "" + Цел(ДатаВремяЧисло) + ":" + 
			Прав(Формат(Окр((ДатаВремяЧисло - Цел(ДатаВремяЧисло))/10*6, 2), "ЧДЦ=2; ЧН=00"), 2);
	КонецЕсли;
	
	Возврат СтрокаЧМ;
КонецФункции

// Функция удаляет секунды из даты
//
Функция уатДатаБезСекунд(ДатаИВремя) Экспорт
	Рез = НачалоДня(ДатаИВремя) + Час(ДатаИВремя)*3600 + Минута(ДатаИВремя)*60;
	Возврат Рез;
КонецФункции

#КонецОбласти


#Область Стоянка

// Функция получает стоянку в пункте
//
Функция ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ПунктСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатПунктыНазначения.СтоянкаПР = 0
	|			ТОГДА ЕстьNULL(уатТипыПунктов.СтоянкаПР, 0)
	|		ИНАЧЕ уатПунктыНазначения.СтоянкаПР
	|	КОНЕЦ КАК СтоянкаПР
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов КАК уатТипыПунктов
	|		ПО уатПунктыНазначения.ТипПункта = уатТипыПунктов.Ссылка
	|ГДЕ
	|	уатПунктыНазначения.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.СтоянкаПР;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция получает время дополнительной стоянки в пункте
//
Функция ПолучитьВремяДопСтонки(ПунктНазначения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ПунктНазначения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатПунктыНазначения.СтоянкаДоп = 0
	|			ТОГДА ЕстьNULL(уатТипыПунктов.СтоянкаДоп, 0)
	|		ИНАЧЕ уатПунктыНазначения.СтоянкаДоп
	|	КОНЕЦ КАК СтоянкаДоп
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов КАК уатТипыПунктов
	|		ПО уатПунктыНазначения.ТипПункта = уатТипыПунктов.Ссылка
	|ГДЕ
	|	уатПунктыНазначения.Ссылка = &Ссылка";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.СтоянкаДоп;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция получает время дополнительной стоянки в пункте
//
Функция ОбновитьНадписьРазрешенныеТипыТС(Пункт, СтрокаРазрешенныеТипыТС ="") Экспорт
	
	СтрокаРазрешенныеТипыТС = "";
	
	Индекс = 0;
	Если Пункт.РазрешенныеТипыТС.Количество() > 0 Тогда 
		Для Каждого ТекСтрока Из Пункт.РазрешенныеТипыТС Цикл 
			Если Индекс >= 2 Тогда
				СтрокаРазрешенныеТипыТС = СтрокаРазрешенныеТипыТС + Символы.ПС +
				СтрШаблон(НСтр("ru='еще %1 типов ТС'"), Пункт.РазрешенныеТипыТС.Количество() - 2);
				Прервать;
			КонецЕсли;
			
			СтрокаРазрешенныеТипыТС = СтрокаРазрешенныеТипыТС + ?(СтрокаРазрешенныеТипыТС="", "", Символы.ПС)
			+ "• " + Формат(ТекСтрока.СтоянкаДоп, "ЧДЦ=2; ЧРД=:") + " - " + Строка(ТекСтрока.ТипТС);
			
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из Пункт.ТипПункта.РазрешенныеТипыТС Цикл
			Если Индекс >= 2 Тогда
				СтрокаРазрешенныеТипыТС = СтрокаРазрешенныеТипыТС + Символы.ПС +
				СтрШаблон(НСтр("ru='еще %1 типов ТС'"), Пункт.ТипПункта.РазрешенныеТипыТС.Количество() - 2);
				Прервать;
			КонецЕсли;
			
			СтрокаРазрешенныеТипыТС = СтрокаРазрешенныеТипыТС + ?(СтрокаРазрешенныеТипыТС="", "", Символы.ПС)
			+ "• " + Формат(ТекСтрока.СтоянкаДоп, "ЧДЦ=2; ЧРД=:") + " - " + Строка(ТекСтрока.ТипТС);

			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаРазрешенныеТипыТС) Тогда 
		НадписьРазрешенныеТипыТС = НСтр("en='For the type of point';ru='Для пункта'") + " " 
			+ НСтр("en='allowed';ru='разрешены'") + ": " + Символы.ПС + СтрокаРазрешенныеТипыТС;
	ИначеЕсли уатОбщегоНазначения.ПолучитьВремяДопСтонки(Пункт.Ссылка) Тогда 
		НадписьРазрешенныеТипыТС = НСтр("en='For the type of point';ru='Для пункта'") + " " 
			+ НСтр("en='allowed all vehicles types';ru='разрешены любые типы ТС'") + " (" + Формат(уатОбщегоНазначения.ПолучитьВремяДопСтонки(Пункт.Ссылка), "ЧДЦ=2; ЧРД=:") + ")";
	ИначеЕсли ЗначениеЗаполнено(Пункт.Ссылка) Тогда 
		НадписьРазрешенныеТипыТС = НСтр("en='For the type of point';ru='Для пункта'") + " " 
			+ НСтр("en='allowed all vehicles types';ru='разрешены любые типы ТС'");
	Иначе 
		НадписьРазрешенныеТипыТС = НСтр("en='Type of point is not specified. Allowed all types of vehicles';ru='Пункт не указан. Разрешены любые типы ТС'");
	КонецЕсли;
	
	Возврат НадписьРазрешенныеТипыТС;
	
КонецФункции

// Функция получает стоянку в пункте
//
Функция ПолучитьРазрешенныеТипыТС(МассивПунктов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивПунктов", МассивПунктов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Ссылка КАК Пункт,
	|	КОЛИЧЕСТВО(уатПунктыНазначенияРазрешенныеТипыТС.НомерСтроки) КАК КолВоТиповПунктов
	|ПОМЕСТИТЬ втКолВоРазрТиповТСПункта
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения.РазрешенныеТипыТС КАК уатПунктыНазначенияРазрешенныеТипыТС
	|		ПО уатПунктыНазначения.Ссылка = уатПунктыНазначенияРазрешенныеТипыТС.Ссылка
	|ГДЕ
	|	уатПунктыНазначения.Ссылка В(&МассивПунктов)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПунктыНазначения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКолВоРазрТиповТСПункта.Пункт КАК ПунктПогрузки,
	|	уатПунктыНазначенияРазрешенныеТипыТС.ТипТС КАК ТипТС
	|ИЗ
	|	втКолВоРазрТиповТСПункта КАК втКолВоРазрТиповТСПункта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатПунктыНазначения.РазрешенныеТипыТС КАК уатПунктыНазначенияРазрешенныеТипыТС
	|		ПО (втКолВоРазрТиповТСПункта.КолВоТиповПунктов > 0)
	|			И втКолВоРазрТиповТСПункта.Пункт = уатПунктыНазначенияРазрешенныеТипыТС.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втКолВоРазрТиповТСПункта.Пункт,
	|	уатТипыПунктовРазрешенныеТипыТС.ТипТС
	|ИЗ
	|	втКолВоРазрТиповТСПункта КАК втКолВоРазрТиповТСПункта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТипыПунктов.РазрешенныеТипыТС КАК уатТипыПунктовРазрешенныеТипыТС
	|		ПО втКолВоРазрТиповТСПункта.Пункт.ТипПункта = уатТипыПунктовРазрешенныеТипыТС.Ссылка
	|			И (втКолВоРазрТиповТСПункта.КолВоТиповПунктов = 0)
	|ИТОГИ ПО
	|	Пункт";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти


#Область Агрегаты

// Возвращает таблицу установленных шин
//
Функция уатШиныТС(ТС, Дата = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	              |	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние,
	              |	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	              |	уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель КАК Модель,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель.Производитель КАК Производитель,";
	
	Если Метаданные.РегистрыСведений.уатАгрегатыТС.Измерения.Найти("МОЛ") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	уатАгрегатыТССрезПоследних.МОЛ КАК МОЛ,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель.Наименование КАК Характеристики
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	              |		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки,
	              |		ВложенныйЗапрос.Период КАК Период
	              |	ИЗ
	              |		(ВЫБРАТЬ
	              |			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	              |			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	              |		ИЗ
	              |			РегистрСведений.уатАгрегатыТС.СрезПоследних(
	              |					&Дата,
	              |					ТС В (&ТС)
	              |						И СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК уатАгрегатыТССрезПоследних
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	              |					&Дата,
	              |					ТС В (&ТС)
	              |						И СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК уатАгрегатыТССрезПоследних
	              |			ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	              |				И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	              |	
	              |	СГРУППИРОВАТЬ ПО
	              |		уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	              |		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	              |				&Дата,
	              |				ТС В (&ТС)
	              |					И СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК уатАгрегатыТССрезПоследних
	              |		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	              |			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	              |			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТС",ТС);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Шина);
	Запрос.УстановитьПараметр("Дата", ?(Дата = Неопределено, ТекущаяДата(), Дата));
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	// удалим из таблицы результата снятые агрегаты
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Сч = РезультатТаблица.Количество()-1;
	Пока Сч >= 0 Цикл
		Если СписокСостоянийАгрегата.НайтиПоЗначению(РезультатТаблица[Сч].Состояние) = Неопределено Тогда
			РезультатТаблица.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат РезультатТаблица;
КонецФункции // уатШиныТС

// Процедура возвращает состояние шины
//
Функция уатСостояниеШины(мСерияНоменклатуры, мДата)	ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ВложенныйЗапрос.Период КАК Период,
	|		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаУстановки, СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаУстановки, СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних
	|			ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|				И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаУстановки, СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки";
	Запрос.УстановитьПараметр("ДатаУстановки", мДата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", мСерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.СостояниеАгрегата;
	Иначе	
		Результат = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

// Возвращает таблицу установленных аккумуляторов
//
Функция уатАккумуляторыТС(ТС, Дата = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              |	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	              |	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние,
	              |	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	              |	уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель КАК Модель,
	              |	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель.Емкость КАК Емкость
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	              |		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки,
	              |		ВложенныйЗапрос.Период КАК Период
	              |	ИЗ
	              |		(ВЫБРАТЬ
	              |			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	              |			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	              |		ИЗ
	              |			РегистрСведений.уатАгрегатыТС.СрезПоследних(
	              |					&Дата,
	              |					ТС В (&ТС)
	              |						И СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК уатАгрегатыТССрезПоследних
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	              |					&Дата,
	              |					ТС В (&ТС)
	              |						И СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК уатАгрегатыТССрезПоследних
	              |			ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	              |				И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	              |	
	              |	СГРУППИРОВАТЬ ПО
	              |		уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	              |		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	              |				&Дата,
	              |				ТС В (&ТС)
	              |					И СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК уатАгрегатыТССрезПоследних
	              |		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	              |			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	              |			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки";
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Аккумулятор);
	Запрос.УстановитьПараметр("Дата", ?(Дата = Неопределено, ТекущаяДата(), Дата));
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	// удалим из таблицы результата снятые агрегаты
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Сч = РезультатТаблица.Количество()-1;
	Пока Сч >= 0 Цикл
		Если СписокСостоянийАгрегата.НайтиПоЗначению(РезультатТаблица[Сч].Состояние) = Неопределено Тогда
			РезультатТаблица.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат РезультатТаблица;
КонецФункции // уатАккумуляторыТС

// Процедура возвращает состояние шины
//
Функция уатСостояниеАккумулятора(мСерияНоменклатуры,мДата)	ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ВложенныйЗапрос.Период КАК Период,
	|		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаУстановки, СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаУстановки, СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних
	|			ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|				И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.СерияНоменклатуры,
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаУстановки, СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки";
	Запрос.УстановитьПараметр("ДатаУстановки", мДата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", мСерияНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.СостояниеАгрегата;
	Иначе	
		Результат = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

// Возвращает таблицу установленных прочих агрегатов
//
Функция уатПрочиеАгрегатыТС(ТС, Дата = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	|	уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель КАК Модель
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки,
	|		ВложенныйЗапрос.Период КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|					&Дата,
	|					ТС В (&ТС)
	|						И НЕ СерияНоменклатуры.ТипАгрегата В (&ТипыАгрегатовШинаИлиАккумулятор)) КАК уатАгрегатыТССрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|					&Дата,
	|					ТС В (&ТС)
	|						И НЕ СерияНоменклатуры.ТипАгрегата В (&ТипыАгрегатовШинаИлиАккумулятор)) КАК уатАгрегатыТССрезПоследних
	|			ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|				И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|				&Дата,
	|				ТС В (&ТС)
	|					И НЕ СерияНоменклатуры.ТипАгрегата В (&ТипыАгрегатовШинаИлиАккумулятор)) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период";
	Запрос.УстановитьПараметр("ТС", ТС);
	СписокТиповАгрегата = Новый СписокЗначений;
	СписокТиповАгрегата.Добавить(Справочники.уатТипыАгрегатов.Шина);
	СписокТиповАгрегата.Добавить(Справочники.уатТипыАгрегатов.Аккумулятор);
	Запрос.УстановитьПараметр("ТипыАгрегатовШинаИлиАккумулятор", СписокТиповАгрегата);
	Запрос.УстановитьПараметр("Дата",?(Дата = Неопределено, ТекущаяДата(), Дата));
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	// удалим из таблицы результата снятые агрегаты
	СписокСостоянийАгрегата = Новый СписокЗначений;
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Сч = РезультатТаблица.Количество()-1;
	Пока Сч >= 0 Цикл
		Если СписокСостоянийАгрегата.НайтиПоЗначению(РезультатТаблица[Сч].Состояние) = Неопределено Тогда
			РезультатТаблица.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат РезультатТаблица;
КонецФункции // уатПрочиеАгрегатыТС

// Возвращает список ссылок на элементы справочника Серийные номера по переданному списку с/н
// 
// Параметры:
//  СписокСерийныхНомеров - список серийных номеров
//
// Возвращаемое значение:
//  Список ссылок на элементы справочинка
Функция ПолучитьСписокАгрегатовПоСерийнымНомерам(СписокСерийныхНомеров) Экспорт
	
	мЗапрос = новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСерииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.уатСерииНоменклатуры КАК уатСерииНоменклатуры
	|ГДЕ
	|	уатСерииНоменклатуры.СерийныйНомер В (&СерийныйНомер)";
	мЗапрос.УстановитьПараметр("СерийныйНомер",СписокСерийныхНомеров);
	СписокСсылок = новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(мЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокСсылок;
КонецФункции

#КонецОбласти


#Область ТранспортныеСредства

// Возвращает наименование справочника ТС.
//
Функция ПолучитьНаименованиеСправочникаТС() Экспорт
	
	Возврат "уатТС";
	
КонецФункции

// Возвращает префикс реквизитов справочника ТС.
//
Функция ПолучитьПрефиксРеквизитовСправочникаТС() Экспорт
	
	Возврат "";
	
КонецФункции

// Модифицирует запрос к справочнику ТС в соответсвии с поставкой
//
// Параметры:
//  ТекстЗапроса - Строка
// 
// Возвращаемое значение:
//  Строка - Модифицированный текст запроса в соответвии с поставкой
//
Функция МодифицироватьЗапросКСправочникаТСВСоответсвииСПоставкой(ТекстЗапроса) Экспорт
	НаименованиеТС      = уатОбщегоНазначения.ПолучитьНаименованиеСправочникаТС();
	ПрефиксРеквизитовТС = уатОбщегоНазначения.ПолучитьПрефиксРеквизитовСправочникаТС();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.Подразделение",
		"уатТС." + ПрефиксРеквизитовТС + "Подразделение");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.Организация",
		"уатТС." + ПрефиксРеквизитовТС + "Организация");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.УчетнаяЗаписьСистемыМониторинга",
		"уатТС." + ПрефиксРеквизитовТС + "УчетнаяЗаписьСистемыМониторинга");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.УчетнаяЗаписьCервисаПарковок",
		"уатТС." + ПрефиксРеквизитовТС + "УчетнаяЗаписьCервисаПарковок");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.УчетнаяЗаписьCервисаШтрафов",
		"уатТС." + ПрефиксРеквизитовТС + "УчетнаяЗаписьCервисаШтрафов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.ИДвСервисеПарковок",
		"уатТС." + ПрефиксРеквизитовТС + "ИДвСервисеПарковок");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.ИДвСервисеШтрафов",
		"уатТС." + ПрефиксРеквизитовТС + "ИДвСервисеШтрафов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.ИДвСистемеНавигации",
		"уатТС." + ПрефиксРеквизитовТС + "ИДвСистемеНавигации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.ИспользуемаяСистемаGPS",
		"уатТС." + ПрефиксРеквизитовТС + "ИспользуемаяСистемаGPS");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС.ИспользоватьДанныеCANшиныОдометр",
		"уатТС." + ПрефиксРеквизитовТС + "ИспользоватьДанныеCANшиныОдометр");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "уатТС", НаименованиеТС);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает представление модели для переданного объекта.
//
// Параметры:
//  ТС           - Справочник.уатТС,
//               Справочник.уатОборудованиеТС, Справочник.уатМоделиТС - 
//               Объект, представление модели которого, необходиом получить.
//
// Возвращаемое значение:
//  Результат - Строка - Представление ТС
Функция уатПредставлениеМоделиТС(ТС) Экспорт
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Результат = "";
	ИначеЕсли ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
		Если ЗначениеЗаполнено(ТС.Модель) Тогда
			Результат = ТС.Модель.Наименование;
		Иначе   
			Результат = "";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Результат = ТС.Наименование;
	Иначе 
		Результат = "";
		ТекстНСТР = НСтр("en='In the procedure <уатПредставлениеМоделиТС> passed the wrong value!';ru='В процедуру <уатПредставлениеМоделиТС> передано неправильное значение!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	Возврат результат;
КонецФункции

// Функция выполняет проверку, является ли переданное ТС автотранспортом.
//
// Параметры:
//  ТС           - Проверяемое транспортное средство
//
// Возвращаемое значение:
//  Результат - Булево - Результат проверки
Функция уатЭтоТС(ТС) Экспорт
	Если ТС = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТС) тогда
		Возврат ЛожЬ;
	КонецЕсли;
	Если ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт ИЛИ 
			ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
		результат = Истина; 
	Иначе	 
		результат = Ложь;
	КонецЕсли;
	Возврат результат;
КонецФункции	

// Функция вычисляет разность показаний счетчика транспортного средства
//
// Параметры:
//  СчетчикВыезда - значение счетчика перед выездом
//  СчетчикВозвращения - значение счетчика по возвращению
//
// Возвращаемое значение
//  Результат - число - разность показаний
Функция уатРазностьПоказанийСчетчика(СчетчикВыезда, СчетчикВозвращения) ЭКСПОРТ
	Перем чРазностьПоказаний;
	Перем чИнд;
	Перем чМаксСчетчик;
	Перем чКоличЗнаков;
	
	чРазностьПоказаний = СчетчикВозвращения - СчетчикВыезда;
	
	Если чРазностьПоказаний < 0 Тогда
		чКоличЗнаков = СтрДлина(Формат(Цел(СчетчикВыезда), "ЧГ="));
		Если чКоличЗнаков > 0 Тогда
			Результат = Pow(10, чКоличЗнаков)  + чРазностьПоказаний;
		Иначе
			Результат = 0;
		КонецЕсли;	
	Иначе
		Результат = чРазностьПоказаний;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // глПробегПоСпидометру       

// Функция возвращает список значений, заполненный номенклатурой топлива
//
Функция ПолучитьНормыРасходаГСМ(МодельТС, ГСМ, ПараметрыРасчета) ЭКСПОРТ
	
	Если НЕ ПараметрыРасчета.Свойство("ДатаРасчета") Тогда
		ПараметрыРасчета.Вставить("ДатаРасчета", ТекущаяДата());
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("Организация") Тогда
		ПараметрыРасчета.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("ЭтоПЛ") Тогда
		ПараметрыРасчета.Вставить("ЭтоПЛ", Истина);
	КонецЕсли;
		
	// для проф/корп получение норм выполняется в другом модуле
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		МодульуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
		Возврат МодульуатОбщегоНазначения_проф.ПолучитьНормыРасходаГСМ(МодельТС, ГСМ, ПараметрыРасчета);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыРасходаГСМ.*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|		&Период,
	|		МодельТС = &МодельТС
	|		    И РаботаНаДвухВидахТопливаОдновременно = &РаботаНаДвухВидахТопливаОдновременно
	|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
	
	ТаблицаГСМ = уатПолучитьАналогиГСМ(ГСМ, Перечисления.уатГруппыГСМ.Топливо);
	
	СписокГСМ = Новый СписокЗначений;
	СписокГСМ.Добавить(ГСМ);
	
	//// добавление норм на аналоги
	//Для Каждого ТекСтрока Из ТаблицаГСМ Цикл
	//	СписокГСМ.Добавить(ТекСтрока.Аналог);
	//КонецЦикла;
	
	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.ДатаРасчета);
	Запрос.УстановитьПараметр("МодельТС", ?(ТипЗнч(МодельТС) = Тип("СправочникСсылка.уатТС"), МодельТС.Модель, МодельТС));
	Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
	Запрос.УстановитьПараметр("РаботаНаДвухВидахТопливаОдновременно", ПараметрыРасчета.РаботаНаДвухВидахТопливаОдновременно);
	
	РезЗапроса = Запрос.Выполнить();
	Выборка = РезЗапроса.Выбрать();
	НормаРасхода = Новый Структура;
	
	Выборка.Следующий();
	Для каждого ТекКолонка ИЗ РезЗапроса.Колонки Цикл
		Если НЕ ЗначениеЗаполнено(Выборка[ТекКолонка.Имя]) Тогда
			Если ТекКолонка.Имя = "ГСМ" Тогда
				НормаРасхода.Вставить("ГСМ", Справочники.Номенклатура.ПустаяСсылка());
			ИначеЕсли ТекКолонка.Имя = "МодельТС" Тогда
				НормаРасхода.Вставить("МодельТС", Справочники.уатМоделиТС.ПустаяСсылка());
			ИначеЕсли СтрНайти(ТекКолонка.Имя, "СпециальнаяРабота") <> 0 Тогда
				НормаРасхода.Вставить(ТекКолонка.Имя, Справочники.уатПараметрыВыработки.ПустаяСсылка());
			ИначеЕсли ТекКолонка.Имя = "УчитыватьПростоиДляРасчетаНормыМоточасов" Тогда
				НормаРасхода.Вставить("УчитыватьПростоиДляРасчетаНормыМоточасов", Ложь);
			ИначеЕсли ТекКолонка.Имя = "АлгоритмРасчета" Тогда
				НормаРасхода.Вставить("АлгоритмРасчета", Новый ХранилищеЗначения(Неопределено));
			Иначе
				НормаРасхода.Вставить(ТекКолонка.Имя, 0);
			КонецЕсли;
		Иначе
			НормаРасхода.Вставить(ТекКолонка.Имя, ?(ЗначениеЗаполнено(Выборка[ТекКолонка.Имя]), Выборка[ТекКолонка.Имя], 0));
		КонецЕсли;
		
		//Если НЕ МодельТС.НаличиеСпидометра И ТекКолонка.Имя = "ЛинейнаяНорма" И 
		//		НЕ ЗначениеЗаполнено(Выборка["ЛинейнаяНорма"]) тогда
		//	НормаРасхода.Вставить("ЛинейнаяНорма", 0.0001);	
		//	Продолжить;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат НормаРасхода;
		
КонецФункции

// Возвращает показания спидометра
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатТекущийСпидометр(ТС, ТекДата) ЭКСПОРТ
	Возврат РегистрыСведений.уатСчетчикиТС.ПолучитьСчетчик(ТекДата, ТС, Перечисления.уатТипыСчетчиковТС.Спидометр);
КонецФункции // уатТекущийСпидометр       

// Возвращает показания счетчика моточасов
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатТекущийСчетчикМЧ(ТС, ТекДата) ЭКСПОРТ
	Возврат РегистрыСведений.уатСчетчикиТС.ПолучитьСчетчик(ТекДата, ТС, Перечисления.уатТипыСчетчиковТС.СчетчикМЧ);
КонецФункции // уатТекущийСпидометр       

// Функция получает коэффициент изменения норм топлива для ТС на заданную дату.
//
// Параметры
//  ТС           - транспортное средство 
//  ТекДата      - дата, на которую  необходимо получить коэффициент
//
// Возвращаемое значение
//  Результат - число - коэффициент
Функция уатПолучитьКоэффициентИзмененияНормТопливаТС(ТС, ЗаданнаяДата) Экспорт
	тблСреза = РегистрыСведений.уатСведенияОТС.СрезПоследних(ЗаданнаяДата, Новый Структура("ТС", ТС));
	Если тблСреза.Количество() > 0 Тогда
		Возврат тблСреза[0].КоэффициентИзмененияНормТоплива;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Функция возвращает список (массив) основных средств и оборудования входящего в состав
// транспортного средства.
//
// Параметры:
//  ТС - транспортное средство для которого необходимо получить состав
//
// Возвращаемое значение:
//  мсвСостав - массив, содержащий состав ТС
Функция уатСоставТС(ТС, мсвСостав = Неопределено, знач ТСнач = Неопределено) ЭКСПОРТ
	// запоминаем главное ТС
	Если ТСнач = Неопределено Тогда
		ТСнач = ТС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК СоставТС
	|ГДЕ
	|	СоставТС.ВСоставе = &ТС
	|	И НЕ СоставТС.ТС.ПометкаУдаления
	|	И СоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	РезультатСостав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТС");
	
	Если мсвСостав = Неопределено Тогда
		мсвСостав = РезультатСостав;
	Иначе	
		Для Каждого ТекТС Из РезультатСостав Цикл
			// Делаем проверку на бесконечную рекурсию, когда в регистре состав ТС указаны ТС1 в составе ТС2 и ТС2 в составе ТС1
			Если ТекТС = ТСнач Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСостав.Добавить(ТекТС);
		КонецЦикла;	
	КонецЕсли;	
	Для Каждого ТекТС Из РезультатСостав Цикл
		// Делаем проверку на бесконечную рекурсию, когда в регистре состав ТС указаны ТС1 в составе ТС2 и ТС2 в составе ТС1
		Если ТекТС = ТСнач Тогда
			Продолжить;
		КонецЕсли;
			
		уатСоставТС(ТекТС, мсвСостав, ТСнач);
	КонецЦикла;
	
	Возврат мсвСостав;
КонецФункции // уатСоставТС       

// Функция проверяет действительность документов на ТС
//
Функция уатПросроченныеДокументыТС(вхДата, вхДопускДней, вхТС, выхТаблицаДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(вхДата) + вхДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("ТС",            вхТС);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДокументыТС.ВидДокумента КАК ВидДокумента,
	|	уатДокументыТС.Номер КАК Номер,
	|	уатДокументыТС.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыТС.ДатаОкончания КАК ДатаОкончания,
	|	уатДокументыТС.Статус КАК Статус
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыТС
	|ГДЕ
	|	уатДокументыТС.ВладелецДокументов = &ТС
	|	И уатДокументыТС.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС)
	|	И уатДокументыТС.Статус <> ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|	И уатДокументыТС.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|	И НЕ уатДокументыТС.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатПросроченныеДокументыТС()

// Функция проверяет занятость ТС
//
Функция уатТСЗанято(ДатаНач, ДатаКон, вхТС, выхМассивДокументов = Неопределено, Регистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКон-1);
	Запрос.УстановитьПараметр("ТС",            вхТС);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТС.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	|ГДЕ
	|	уатСостояниеТС.ТС = &ТС
	|	И ВЫБОР
	|			КОГДА уатСостояниеТС.Период <= &ДатаОкончания
	|					И уатСостояниеТС.ДатаОкончания >= &ДатаНачала
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И уатСостояниеТС.Состояние = ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.СформированПутевойЛист)";
	Если ЗначениеЗаполнено(Регистратор) Тогда
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.Текст = Запрос.Текст + "
		|	И уатСостояниеТС.Регистратор <> &Регистратор";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхМассивДокументов = РезультатЗапроса.ВыгрузитьКолонку("Регистратор");
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатТСЗанято()

// Возвращает таблицу путевых листов
//
Функция уатПутевыеЛисты(ТС, ДатаНач, ДатаКон, НомерПЛ = Неопределено, Рассчитан = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",               ?(ЗначениеЗаполнено(ДатаНач), ДатаНач, '00010101'));
	Запрос.УстановитьПараметр("ДатаКон",               ?(ЗначениеЗаполнено(ДатаКон), ДатаКон, '39991231235959'));
	Запрос.УстановитьПараметр("ТС",                    ?(ЗначениеЗаполнено(ТС), ТС, Неопределено));
	Запрос.УстановитьПараметр("НомерПЛ",               НомерПЛ);
	Запрос.УстановитьПараметр("Рассчитан",             Рассчитан);
	Запрос.УстановитьПараметр("НаличиеТопливногоБака", ТС.Модель.НаличиеТопливногоБака);
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПутевойЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатПутевойЛист КАК уатПутевойЛист
		|ГДЕ
		|	НЕ уатПутевойЛист.ПометкаУдаления
		|	И (&ТС = НЕОПРЕДЕЛЕНО
		|			ИЛИ (уатПутевойЛист.ТранспортноеСредство = &ТС
		|				ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС
		|					И &НаличиеТопливногоБака))
		|	И (&НомерПЛ = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатПутевойЛист.Номер = &НомерПЛ)
		|	И (&Рассчитан = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатПутевойЛист.Рассчитан = &Рассчитан)
		|	И (уатПутевойЛист.ДатаВозвращения МЕЖДУ &ДатаНач И &ДатаКон
		|			ИЛИ уатПутевойЛист.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПутевойЛист.ДатаВыезда";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПутевойЛист.Ссылка КАК Ссылка,
		|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда
		|ПОМЕСТИТЬ тблПЛ
		|ИЗ
		|	Документ.уатПутевойЛист КАК уатПутевойЛист
		|ГДЕ
		|	НЕ уатПутевойЛист.ПометкаУдаления
		|	И (&ТС = НЕОПРЕДЕЛЕНО
		|			ИЛИ (уатПутевойЛист.ТранспортноеСредство = &ТС
		|				ИЛИ (уатПутевойЛист.Прицепы.ТС = &ТС
		|					ИЛИ уатПутевойЛист.Задание.Прицеп1 = &ТС
		|					ИЛИ уатПутевойЛист.Задание.Прицеп2 = &ТС
		|						И &НаличиеТопливногоБака)))
		|	И (&НомерПЛ = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатПутевойЛист.Номер = &НомерПЛ)
		|	И (&Рассчитан = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатПутевойЛист.Рассчитан = &Рассчитан)
		|	И (уатПутевойЛист.ДатаВозвращения МЕЖДУ &ДатаНач И &ДатаКон
		|			ИЛИ уатПутевойЛист.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатТПЛ.Ссылка,
		|	уатТПЛ.ДатаВыезда
		|ИЗ
		|	Документ.уатТехнологическийПутевойЛист КАК уатТПЛ
		|ГДЕ
		|	НЕ уатТПЛ.ПометкаУдаления
		|	И (&ТС = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатТПЛ.ТС = &ТС
		|				И &НаличиеТопливногоБака)
		|	И (&НомерПЛ = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатТПЛ.Номер = &НомерПЛ)
		|	И (&Рассчитан = НЕОПРЕДЕЛЕНО
		|			ИЛИ уатТПЛ.Рассчитан = &Рассчитан)
		|	И (уатТПЛ.ДатаВозвращения МЕЖДУ &ДатаНач И &ДатаКон
		|			ИЛИ уатТПЛ.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тблПЛ.Ссылка КАК Ссылка
		|ИЗ
		|	тблПЛ КАК тблПЛ
		|
		|УПОРЯДОЧИТЬ ПО
		|	тблПЛ.ДатаВыезда";
	КонецЕсли;
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатТаблица;
КонецФункции // глСпидометр       

// Возвращает таблицу пут. листов
// Параметры:
//	- УчетТехнологическихПЛ (Число). 0 - только ПЛ, 1 - только ТПЛ, 2 - ПЛ и ТПЛ
//
Функция уатПутевыеЛистыВыездВозврат(ТС, Дата, ВремяДоВыезда, ВремяПослеВозврата, НомерПЛ = Неопределено, Рассчитан = Неопределено, УчетТехнологическихПЛ = 0, мсвПутевыеЛисты = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВремяДоВыезда", ВремяДоВыезда);
	Запрос.УстановитьПараметр("ВремяПослеВозврата", ВремяПослеВозврата);
	Запрос.УстановитьПараметр("НомерПЛ", НомерПЛ);
	Запрос.УстановитьПараметр("Рассчитан", Рассчитан);
	Запрос.УстановитьПараметр("УчетПЛ", УчетТехнологическихПЛ = 0 ИЛИ УчетТехнологическихПЛ = 2);
	Запрос.УстановитьПараметр("УчетТехнологическихПЛ", УчетТехнологическихПЛ = 1 ИЛИ УчетТехнологическихПЛ = 2);
	Запрос.УстановитьПараметр("мсвПутевыеЛисты", мсвПутевыеЛисты);
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.Водитель1 КАК Водитель
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	&УчетПЛ
	|	И НЕ уатПутевойЛист.ПометкаУдаления
	|	И уатПутевойЛист.Ссылка В(&мсвПутевыеЛисты)
	|	И &Дата МЕЖДУ ДОБАВИТЬКДАТЕ(уатПутевойЛист.ДатаВыезда, ЧАС, -&ВремяДоВыезда) И ДОБАВИТЬКДАТЕ(уатПутевойЛист.ДатаВозвращения, ЧАС, &ВремяПослеВозврата)
	|	И (&НомерПЛ = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатПутевойЛист.Номер = &НомерПЛ)
	|	И (&Рассчитан = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатПутевойЛист.Рассчитан = &Рассчитан)
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС";
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + 
		"ВЫБРАТЬ
		|	уатТехнологическийПутевойЛист.Ссылка,
		|	уатТехнологическийПутевойЛист.ДатаВыезда,
		|	уатТехнологическийПутевойЛист.Водитель
		|ИЗ
		|	Документ.уатТехнологическийПутевойЛист КАК уатТехнологическийПутевойЛист
		|ГДЕ
		|	&УчетТехнологическихПЛ
		|	И НЕ уатТехнологическийПутевойЛист.ПометкаУдаления
		|	И уатТехнологическийПутевойЛист.Ссылка В(&мсвПутевыеЛисты)
		|	И &Дата МЕЖДУ ДОБАВИТЬКДАТЕ(уатТехнологическийПутевойЛист.ДатаВыезда, ЧАС, -&ВремяДоВыезда) И ДОБАВИТЬКДАТЕ(уатТехнологическийПутевойЛист.ДатаВозвращения, ЧАС, &ВремяПослеВозврата)
		|	И (&НомерПЛ = НЕОПРЕДЕЛЕНО ИЛИ уатТехнологическийПутевойЛист.Номер = &НомерПЛ)
		|	И (&Рассчитан = НЕОПРЕДЕЛЕНО ИЛИ уатТехнологическийПутевойЛист.Рассчитан = &Рассчитан)
		|	И уатТехнологическийПутевойЛист.ТС = &ТС";
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "уатПутевойЛист.ТранспортноеСредство = &ТС",
		"(уатПутевойЛист.ТранспортноеСредство = &ТС
		|		ИЛИ уатПутевойЛист.Прицепы.ТС.Модель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС)");
	Иначе //ПРОФ, КОРП
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "уатПутевойЛист.ТранспортноеСредство = &ТС",
		"(уатПутевойЛист.ТранспортноеСредство = &ТС
		|		ИЛИ уатПутевойЛист.Прицепы.ТС.Модель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
		|		ИЛИ уатПутевойЛист.Задание.Прицеп1.Модель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
		|		ИЛИ уатПутевойЛист.Задание.Прицеп2.Модель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)");
	КонецЕсли;
	
	Если мсвПутевыеЛисты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И уатПутевойЛист.Ссылка В(&мсвПутевыеЛисты)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И уатТехнологическийПутевойЛист.Ссылка В(&мсвПутевыеЛисты)", "");
	КонецЕсли;
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	РезультатТаблица.Сортировать("ДатаВыезда");
	
	Возврат РезультатТаблица;
КонецФункции // глСпидометр       

// Функция выполняет поиск предыдущего ПЛ по указанному ТС и дате выезда по текущему ПЛ.
// Если ПЛ найден и он не рассчитан, то возвращается Истина, иначе Ложь.
// Возвращаются также номер и дата найденного предыдущего ПЛ
//
Функция ПредыдущийПЛНеРассчитан(ТС, ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, ЭтотПЛ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПутевойЛист.Рассчитан,
	|	уатПутевойЛист.Номер,
	|	уатПутевойЛист.Дата
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка <> &ЭтотПЛ
	|	И уатПутевойЛист.ДатаВозвращения <= &ДатаКонтроль
	|	И уатПутевойЛист.Проведен
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВозвращения УБЫВ");
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ДатаКонтроль", ДатаВыезда);
	Запрос.УстановитьПараметр("ЭтотПЛ", ЭтотПЛ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Рез = НЕ Выборка.Рассчитан;
		ПредПЛ_номер = Выборка.Номер;
		ПредПЛ_дата = Выборка.Дата;
	Иначе
		Рез = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Рез;
КонецФункции

// Функция возвращает текущее состояние
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция уатСостояниеТС(ТС,Дата) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТССрезПоследних.ТС,
	|	уатСостояниеТССрезПоследних.Состояние,
	|	уатСостояниеТССрезПоследних.ДатаОкончания,
	|	уатСостояниеТССрезПоследних.Контрагент,
	|	уатСостояниеТССрезПоследних.Заказ,
	|	уатСостояниеТССрезПоследних.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.уатСостояниеТС.СрезПоследних(&Период, ТС = &ТС) КАК уатСостояниеТССрезПоследних";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Период", Дата);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса;
КонецФункции // уатСостояниеТС       

// Функция возвращает текущее состояние
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция МестонахождениеТС(ТС, Знач Дата = Неопределено, СообщатьОбОшибке = Истина) ЭКСПОРТ
	
	Рез = Новый Структура;
	Рез.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Рез.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
	Рез.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Если НЕ ЗначениеЗаполнено(ТС) ИЛИ Дата = '00010101' Тогда
		Возврат Рез;
	КонецЕсли;
		
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.ДатаВыбытия КАК ДатаВыбытия
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.Ссылка = &ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|		ПО уатМестонахождениеТССрезПоследних.ТС = уатТС.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаТС = МассивРезультатов[0].Выбрать();
	
	флОшибка = Ложь;
	
	// если ТС уже выбыло, то оно нигде не находится	
	Если ВыборкаТС.Следующий() Тогда
		Если ВыборкаТС.ДатаВыбытия <> '00010101' Тогда
			Если ВыборкаТС.ДатаВыбытия <= Дата Тогда
				флОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		флОшибка = Истина;
	КонецЕсли;
	
	Если НЕ флОшибка Тогда;
		ВыборкаДетали = МассивРезультатов[1].Выбрать();
		Если ВыборкаДетали.Следующий() Тогда
			Рез.Организация = ВыборкаДетали.Организация;
			Рез.Подразделение = ВыборкаДетали.Подразделение;
			Рез.Колонна = ВыборкаДетали.Колонна;
		Иначе
			флОшибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СообщатьОбОшибке И флОшибка Тогда
		СообщениеОшибка = СтрШаблон(НСтр("en='Currently registered of vehicle/equipment ""%1"" undefined on %2';ru='Местонахождение ТС/оборудования ""%1"" не определено на %2'"), ТС, Формат(Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка);
	КонецЕсли;
		
	Возврат Рез;
КонецФункции // МестонахождениеТС       

// Функция возвращает Истину если ТС свободен для выезда и Ложь если нет
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
Функция уатТССвободенДляВыезда(ТС,Дата) ЭКСПОРТ
	Если уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.НаКонсервацииИсправен Или
		уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.Выбыло Или
		уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.НаКонсервацииНеИсправен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|
	|ГДЕ
	|	(уатПутевойЛист.ТранспортноеСредство = &ТС ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС) И
	|	уатПутевойЛист.ДатаВыезда <= &Дата И
	|	(уатПутевойЛист.ДатаВозвращения >= &Дата ИЛИ (уатПутевойЛист.ДатаВозвращения) ЕСТЬ NULL ) И
	|	уатПутевойЛист.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Истина ;		//нет выписанных путевых листов на эту дату
	Иначе	
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // уатТССвободенДляВыезда       

// Функция возвращает Истину если ТС занесено в пут. листе и Ложь если нет
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция уатТСВПутевомЛисте(ТС,ПутевойЛист) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.ТранспортноеСредство,
	|	уатПутевойЛист.Прицепы.(
	|		ТС
	|	)
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|
	|ГДЕ
	|	(уатПутевойЛист.ТранспортноеСредство = &ТС ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС) И
	|	уатПутевойЛист.Ссылка = &ПутевойЛист";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // утПроверкаКорректностиПЛ       

// Функция возвращает ссылку на элемент справочника "Сотрудники" по переданному GUID.
//
Функция СформироватьСсылкуНаСотрудникаПоGUID(GUIDСотрудника) Экспорт
	
	Попытка
		Возврат Справочники.Сотрудники.ПолучитьСсылку(GUIDСотрудника);
	Исключение
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции // СформироватьСсылкуНаСотрудникаПоGUID()

// Процедура устанавливает занятость ТС (флаг и текст сообщения HTML) в ТЧ в документе Разнарядка и обработке Пакетная выписка
//
Процедура ОбновитьСтатусыЗанятости(ТабЧасть, Дата, Организация, ТекСтрокаНомер = Неопределено, флагУчитыватьГрафики = Ложь) Экспорт
	
	мсвТС = Новый Массив;
	мсвВодители = Новый Массив;
	
	Для Каждого ТекСтрока Из ТабЧасть Цикл
		Если ТекСтрокаНомер <> Неопределено И ТекСтрока.НомерСтроки <> ТекСтрокаНомер Тогда
			Продолжить;
		КонецЕсли;
		
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			мсвТС.Добавить(ТекСтрока.ТС);
		КонецЕсли;
		Если мсвВодители.Найти(ТекСтрока.Водитель) = Неопределено Тогда
			мсвВодители.Добавить(ТекСтрока.Водитель);
		КонецЕсли;
		Если мсвВодители.Найти(ТекСтрока.Водитель2) = Неопределено Тогда
			мсвВодители.Добавить(ТекСтрока.Водитель2);
		КонецЕсли;
	КонецЦикла;
	
	УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки = Ложь;
	Если флагУчитыватьГрафики Тогда
		УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабЧасть.ТС КАК ТС,
		               |	ТабЧасть.НомерСтроки КАК НомерСтроки,
		               |	ТабЧасть.ДатаВыезда КАК ДатаВыезда,
		               |	ТабЧасть.ДатаВозвращения КАК ДатаВозвращения
		               |ПОМЕСТИТЬ Табчасть
		               |ИЗ
		               |	&ТабЧасть КАК ТабЧасть
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЧасть.ТС КАК ТС,
		               |	ТабЧасть.НомерСтроки КАК НомерСтроки,
		               |	ТабЧасть.ДатаВыезда КАК ДатаВыезда,
		               |	уатТС.ГрафикРаботы КАК ГрафикРаботы,
		               |	уатТС.ГрафикРаботы.ПроизводственныйКалендарь КАК ГрафикРаботыПроизводственныйКалендарь
		               |ПОМЕСТИТЬ втТабчасть
		               |ИЗ
		               |	Табчасть КАК ТабЧасть
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
		               |		ПО ТабЧасть.ТС = уатТС.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(уатСостояниеТС.Период) КАК Период,
		               |	втТабчасть.ТС КАК ТС,
		               |	втТабчасть.НомерСтроки КАК НомерСтроки,
		               |	втТабчасть.ГрафикРаботы КАК ГрафикРаботы,
		               |	втТабчасть.ГрафикРаботыПроизводственныйКалендарь КАК ГрафикРаботыПроизводственныйКалендарь,
		               |	втТабчасть.ДатаВыезда КАК ДатаВыезда
		               |ПОМЕСТИТЬ втСостоянияТСПериод
		               |ИЗ
		               |	втТабчасть КАК втТабчасть
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
		               |		ПО втТабчасть.ТС = уатСостояниеТС.ТС
		               |			И (уатСостояниеТС.Состояние.РазрешитьВыпискуДокументов = ЛОЖЬ)
		               |			И втТабчасть.ДатаВыезда >= уатСостояниеТС.Период
		               |			И (ВЫБОР
		               |				КОГДА уатСостояниеТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		               |						И уатСостояниеТС.ДатаОкончания <> НЕОПРЕДЕЛЕНО
		               |					ТОГДА втТабчасть.ДатаВыезда < уатСостояниеТС.ДатаОкончания
		               |				ИНАЧЕ ИСТИНА
		               |			КОНЕЦ)
		               |			И (уатСостояниеТС.Состояние.РазрешитьВыпискуДокументов = ЛОЖЬ)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втТабчасть.ТС,
		               |	втТабчасть.НомерСтроки,
		               |	втТабчасть.ГрафикРаботыПроизводственныйКалендарь,
		               |	втТабчасть.ГрафикРаботы,
		               |	втТабчасть.ДатаВыезда
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	втСостоянияТСПериод.ТС КАК ТС,
		               |	ЕСТЬNULL(уатСостояниеТС.Состояние, ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.ПустаяССылка)) КАК Состояние,
		               |	втСостоянияТСПериод.ГрафикРаботы КАК ГрафикРаботы,
		               |	втСостоянияТСПериод.ГрафикРаботыПроизводственныйКалендарь КАК ГрафикРаботыПроизводственныйКалендарь,
		               |	НАЧАЛОПЕРИОДА(втСостоянияТСПериод.ДатаВыезда, ДЕНЬ) КАК ДатаСреза,
		               |	втСостоянияТСПериод.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ втГрафикРаботы
		               |ИЗ
		               |	втСостоянияТСПериод КАК втСостоянияТСПериод
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
		               |		ПО втСостоянияТСПериод.ТС = уатСостояниеТС.ТС
		               |			И втСостоянияТСПериод.Период = уатСостояниеТС.Период
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ) КАК ДеньВключенВГрафик,
		               |	втГрафикРаботы.ТС КАК ТС,
		               |	втГрафикРаботы.ДатаСреза КАК ДатаСреза,
		               |	втГрафикРаботы.Состояние КАК Состояние,
		               |	втГрафикРаботы.НомерСтроки КАК НомерСтроки,
		               |	втГрафикРаботы.ГрафикРаботы КАК ГрафикРаботы
		               |ПОМЕСТИТЬ втРабочееВремя
		               |ИЗ
		               |	втГрафикРаботы КАК втГрафикРаботы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		               |		ПО втГрафикРаботы.ГрафикРаботы = КалендарныеГрафики.Календарь
		               |			И втГрафикРаботы.ДатаСреза = КалендарныеГрафики.ДатаГрафика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	втРабочееВремя.ДеньВключенВГрафик КАК РаботаетПоГрафику,
		               |	втРабочееВремя.ТС КАК ТС,
		               |	втРабочееВремя.ДатаСреза КАК ДатаСреза,
		               |	втРабочееВремя.Состояние КАК Состояние,
		               |	втРабочееВремя.НомерСтроки КАК НомерСтроки,
		               |	втРабочееВремя.ГрафикРаботы КАК ГрафикРаботы
		               |ИЗ
		               |	втРабочееВремя КАК втРабочееВремя";
		Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть.Выгрузить());
		
		тзСостоянияТС = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС);
	ДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей);
	ДниДоОкончанияДействияТК = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт);
		
	тблЗанятостьТС = уатОбщегоНазначения.ЗанятостьТС(мсвТС, Дата, ДниДоОкончанияДействияДокументовТС, ДниДоОкончанияДействияТК);
	тблЗанятостьВодителей = уатОбщегоНазначения.ЗанятостьВодителей(мсвВодители, Дата, ДниДоОкончанияДействияДокументовВодителей, ДниДоОкончанияДействияТК);
		
	Для Каждого ТекСтрока Из ТабЧасть Цикл
		Если ТекСтрокаНомер <> Неопределено И ТекСтрока.НомерСтроки <> ТекСтрокаНомер Тогда
			Продолжить;
		КонецЕсли;
					
		СтрокаЗанятостиТС = тблЗанятостьТС.Найти(ТекСтрока.ТС, "ТС");
		Если СтрокаЗанятостиТС = Неопределено Тогда
			ДанныеСтрокаЗанятостьТС = "";
			ДанныеЗанятостьТС = Ложь;
			ДанныеДокументыТС = "";
			ДанныеПросроченныеТК = "";
		Иначе
			ДанныеСтрокаЗанятостьТС = СтрокаЗанятостиТС.СтрокаЗанятость;
			ДанныеЗанятостьТС = СтрокаЗанятостиТС.Занятость;
			ДанныеДокументыТС = СтрокаЗанятостиТС.СтрокаДокументыТС;
			ДанныеПросроченныеТК = СтрокаЗанятостиТС.СтрокаПросроченныеТК;
		КонецЕсли;
		
		СтрокаЗанятостиВодитель1 = тблЗанятостьВодителей.Найти(ТекСтрока.Водитель, "Водитель");
		Если СтрокаЗанятостиВодитель1 = Неопределено Тогда
			ДокументыВодитель1 = "";
			ДокументыТКВодитель1 = "";
			ДанныеЗанятостьВодитель1 = Ложь;
		Иначе
			ДокументыВодитель1 = СтрокаЗанятостиВодитель1.ПросроченныеДокументы;
			ДокументыТКВодитель1 = СтрокаЗанятостиВодитель1.ПросроченныеДокументыТК;
			ДанныеЗанятостьВодитель1 = Истина;
		КонецЕсли;
		СтрокаЗанятостиВодитель2 = тблЗанятостьВодителей.Найти(ТекСтрока.Водитель2, "Водитель");
		Если СтрокаЗанятостиВодитель2 = Неопределено Тогда
			ДокументыВодитель2 = "";
			ДокументыТКВодитель2 = "";
			ДанныеЗанятостьВодитель2 = Ложь;
		Иначе
			ДокументыВодитель2 = СтрокаЗанятостиВодитель2.ПросроченныеДокументы;
			ДокументыТКВодитель2 = СтрокаЗанятостиВодитель2.ПросроченныеДокументыТК;
			ДанныеЗанятостьВодитель2 = Истина;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДокументыВодитель1) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_",
				?(ПустаяСтрока(ДанныеДокументыТС), "", ". ") + ДокументыВодитель1 + "_%Строка2%_");
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_",
				?(ПустаяСтрока(ДанныеПросроченныеТК), "", ". ") + ДокументыТКВодитель1 + "_%Строка3%_");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ДокументыВодитель2) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_",
				?(ПустаяСтрока(ДанныеДокументыТС) И ПустаяСтрока(ДокументыВодитель1), "", ". ") + ДокументыВодитель2 + "_%Строка2%_");
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_",
				?(ПустаяСтрока(ДанныеПросроченныеТК) И ПустаяСтрока(ДокументыТКВодитель1), "", ". ") + ДокументыТКВодитель2 + "_%Строка3%_");
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеДокументыТС + ДокументыВодитель1 + ДокументыВодитель2) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", НСтр("en='There are no warnings on validity of documents';ru='Предупреждений по сроку действия документов нет'"));
		Иначе
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "");
		КонецЕсли;
		Если ПустаяСтрока(ДанныеПросроченныеТК + ДокументыТКВодитель1 + ДокументыТКВодитель2) Тогда
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", НСтр("en='Warnings on duration of fuel cards no';ru='Предупреждений по сроку действия топливных карт нет'"));
		Иначе
			ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "");
		КонецЕсли;
		
		Если флагУчитыватьГрафики Тогда
			ДанныеГрафики = Ложь;
			СтрокаЗанятостиТС = тзСостоянияТС.НайтиСтроки(Новый Структура("ТС, НомерСтроки", ТекСтрока.ТС, ТекСтрока.НомерСтроки));
			Если СтрокаЗанятостиТС.Количество() <> 0 Тогда
				Если ЗначениеЗаполнено(СтрокаЗанятостиТС[0].Состояние) Тогда
					ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "</tbody>", "<tr>
					|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%СтрокаГрафик%_</tr>
					|</tbody>");
					ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%СтрокаГрафик%_", СтрШаблон(НСтр("en='Vehicle ""%1"" on the date of departure is in the states ""%2"".';ru='ТС ""%1""  на дату выезда находится в состояния ""%2"".'"), СтрокаЗанятостиТС[0].ТС, СтрокаЗанятостиТС[0].Состояние));
					ДанныеГрафики = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаЗанятостиТС[0].ГрафикРаботы) Тогда
					ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "</tbody>", "<tr>
					|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%СтрокаГрафик%_</tr>
					|</tbody>");
					ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%СтрокаГрафик%_", СтрШаблон(НСтр("en='Vehicle ""%1"" on the date of departure is not available on schedule.';ru='ТС ""%1""  на дату выезда не доступно по графику работы.'"), СтрокаЗанятостиТС[0].ТС));
					
					Если УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки Тогда
						ДанныеГрафики = Истина;
					КонецЕсли;
				ИначеЕсли НЕ СтрокаЗанятостиТС[0].РаботаетПоГрафику Тогда
					ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "</tbody>", "<tr>
					|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%СтрокаГрафик%_</tr>
					|</tbody>");
					ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%СтрокаГрафик%_", СтрШаблон(НСтр("en='Vehicle ""%1"" on the date of departure is not available on schedule.';ru='ТС ""%1""  на дату выезда не доступно по графику работы.'"), СтрокаЗанятостиТС[0].ТС));
					ДанныеГрафики = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДанныеГрафики = Ложь;
		КонецЕсли;
		ТекСтрока.ЗанятостьТС = ДанныеЗанятостьТС ИЛИ ДанныеЗанятостьВодитель1 ИЛИ ДанныеЗанятостьВодитель2 ИЛИ ДанныеГрафики;
		ТекСтрока.ПанельДопИнформации = ДанныеСтрокаЗанятостьТС;
	КонецЦикла;
КонецПроцедуры

// Процедура устанавливает текст дополнительной информации по ТС
//
Функция ЗанятостьТС(мсвТС, Дата, ДопускДней, ДниДоОкончанияДействияТК, ДопПараметры=Неопределено) Экспорт
	
	// право просмотра отчетов
	Просмотр_уатПробегТС = ПравоДоступа("Просмотр", Метаданные.Отчеты.уатПробегТС);
	Просмотр_уатНаработкаОборудованияВМоточасах = ПравоДоступа("Просмотр", Метаданные.Отчеты.уатНаработкаОборудованияВМоточасах);
	
	// Проверка занятости выполняется в привилегированном режиме
	// важно выполнить проверку по всем документам, не только по тем, которые доступны пользователю
	УстановитьПривилегированныйРежим(Истина);
	
	Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("ТС");
	Рез.Колонки.Добавить("ЦиклическоеТО");
	Рез.Колонки.Добавить("ВыработкаОбщая");
	Рез.Колонки.Добавить("ВыработкаПослеТО");
	Рез.Колонки.Добавить("ДатаТО");
	Рез.Колонки.Добавить("ВСоставеТС");
	Рез.Колонки.Добавить("СтрокаПЛ");
	Рез.Колонки.Добавить("СтрокаРЛ");
	Рез.Колонки.Добавить("СтрокаПробег");
	Рез.Колонки.Добавить("СтрокаТО");
	Рез.Колонки.Добавить("СтрокаСоставТС");
	Рез.Колонки.Добавить("СтрокаДокументыТС");
	Рез.Колонки.Добавить("СтрокаПросроченныеТК");
	Рез.Колонки.Добавить("Занятость");
	Рез.Колонки.Добавить("СтрокаЗанятость");
	Рез.Индексы.Добавить("ТС");
		
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура();
	КонецЕсли;
	
	// Запрос общей выработки
	ЗапросВыработка = Новый Запрос();
	ЗапросВыработка.УстановитьПараметр("мсвТС", мсвТС);
	ЗапросВыработка.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВыработкаТСОбороты.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|			ТОГДА СУММА(уатВыработкаТСОбороты.КоличествоОборот) / 3600
	|		ИНАЧЕ СУММА(уатВыработкаТСОбороты.КоличествоОборот)
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ВТ_ВыработкаТС
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			,
	|			,
	|			,
	|			ТС В (&мсвТС)
	|				И (ТС.Модель.НаличиеСпидометра
	|						И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|					ИЛИ НЕ ТС.Модель.НаличиеСпидометра
	|						И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе))) КАК уатВыработкаТСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВыработкаТСОбороты.ТС,
	|	уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК ТС,
	|	ЕСТЬNULL(ВТ_ВыработкаТС.Значение, 0) + уатТС.НачальныйПробег КАК Значение
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыработкаТС КАК ВТ_ВыработкаТС
	|		ПО (ВТ_ВыработкаТС.ТС = уатТС.Ссылка)
	|ГДЕ
	|	уатТС.Ссылка В(&мсвТС)";
	
	тблВыработкаТС = ЗапросВыработка.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тблВыработкаТС Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ТекСтрока.ТС);
		НоваяСтрока.ВыработкаОбщая = ТекСтрока.Значение;
	КонецЦикла;
	
	// Запрос информации по последним ТО

	// Запрос подошедших по сроку ТО
	ВыборкаТС = СписокТСДляТО(НачалоДня(Дата), мсвТС).Выбрать();
	Пока ВыборкаТС.Следующий() Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
		НоваяСтрока.ВыработкаПослеТО = ВыборкаТС.ВыработкаПослеПоследнегоТО;
		НоваяСтрока.ДатаТО    = ВыборкаТС.ПлановаяДатаТО;
		НоваяСтрока.Занятость = Истина;
		НоваяСтрока.ЦиклическоеТО = ВыборкаТС.ВидТО.Циклический;
		НоваяСтрока.СтрокаТО = ". " + НСтр("en=""It's time for maintenance:"";ru='Подошел срок ТО:'") + " <A href=""ПриближениеСроковТО"">" + Строка(ВыборкаТС.ВидТО) + "</A>";
	КонецЦикла;

	
	// Запрос ТС, в составе которых находятся входящие ТС
	ЗапросСоставТС = Новый Запрос();
	ЗапросСоставТС.УстановитьПараметр("мсвТС", мсвТС);
	ЗапросСоставТС.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСоставТС.ТС КАК ТС,
	|	уатСоставТС.ВСоставе КАК ВСоставе
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ТС В (&мсвТС)";
	тблВСоставеТС = ЗапросСоставТС.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тблВСоставеТС Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ТекСтрока.ТС);
		НоваяСтрока.ВСоставеТС = ТекСтрока.ВСоставе;
		НоваяСтрока.СтрокаСоставТС = ?(ЗначениеЗаполнено(ТекСтрока.ВСоставе), ". " + НСтр("en='Vehicle consists:';ru='В составе ТС:'")
		+ " <A href=""" + ПолучитьНавигационнуюСсылку(ТекСтрока.ВСоставе) + """>" + Строка(ТекСтрока.ВСоставе) + "</A>", "");
	КонецЦикла;
	
	// Запрос корректности ПЛ: не закрыт какой-то из путевых листов (нарушается цепочка остатков топлива)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Дата КАК Дата,
	|	уатПутевойЛист.Номер КАК Номер
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И НЕ уатПутевойЛист.Рассчитан
	|	И НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыезда, ДЕНЬ) <= &ТекДата
	|	И (уатПутевойЛист.ДатаВозвращения = ДАТАВРЕМЯ(1,1,1) ИЛИ НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВозвращения, ДЕНЬ) >= &ТекДата)
	|	И уатПутевойЛист.ТранспортноеСредство В(&мсвТС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТС,
	|	ВЫБОР
	|		КОГДА уатПутевойЛист.ДатаВозвращения = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &ТекДата
	|		ИНАЧЕ уатПутевойЛист.ДатаВозвращения
	|	КОНЕЦ УБЫВ,
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ТС";
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТС.Следующий() Цикл
		ВыборкаПЛ = ВыборкаТС.Выбрать();
		
		Если ВыборкаПЛ.Количество() > 1 Тогда
			ВыборкаПЛ.Следующий();
			
			НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
			НоваяСтрока.Занятость = Истина;
			НоваяСтрока.СтрокаПЛ = ". " + НСтр("en='Not closed waybill:';ru='Не закрыт путевой лист:'") + " <A href="""
			+ ПолучитьНавигационнуюСсылку(ВыборкаПЛ.Ссылка) + """>" + Строка(ВыборкаПЛ.Номер) + " "
			+ НСтр("en='from';ru='от'") + " " + Формат(ВыборкаПЛ.Дата, "ДЛФ = D") + "</A>";
		КонецЕсли;
	КонецЦикла;
		
	// Запрос корректности РЛ: не выполнен последний ремонтный лист
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРемонтныйЛист.ТС КАК ТС,
	|	уатРемонтныйЛист.Ссылка КАК Ссылка,
	|	уатРемонтныйЛист.Дата КАК Дата,
	|	уатРемонтныйЛист.Номер КАК Номер
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	(НЕ уатРемонтныйЛист.ПометкаУдаления)
	|	И уатРемонтныйЛист.Проведен
	|	И (НЕ уатРемонтныйЛист.Выполнен)
	|	И НАЧАЛОПЕРИОДА(уатРемонтныйЛист.ДатаНачала, ДЕНЬ) <= &ТекДата
	|	И (уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1,1,1) ИЛИ НАЧАЛОПЕРИОДА(уатРемонтныйЛист.ДатаОкончания, ДЕНЬ) >= &ТекДата)
	|	И уатРемонтныйЛист.ТС В(&мсвТС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТС,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА &ТекДата
	|		ИНАЧЕ уатРемонтныйЛист.ДатаОкончания
	|	КОНЕЦ УБЫВ
	|ИТОГИ ПО
	|	ТС";
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТС.Следующий() Цикл
		ВыборкаРЛ = ВыборкаТС.Выбрать();
		
		Если ВыборкаРЛ.Следующий() Тогда
			НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
			НоваяСтрока.Занятость = Истина;
			НоваяСтрока.СтрокаРЛ = ". " + НСтр("en='Not done repair sheet:';ru='Не выполнен ремонтный лист:'") + " <A href="""
			+ ПолучитьНавигационнуюСсылку(ВыборкаРЛ.Ссылка) + """>" + Строка(ВыборкаРЛ.Номер) + " "
			+ НСтр("en='from';ru='от'") + " " + Формат(ВыборкаРЛ.Дата, "ДЛФ = D") + "</A>";
		КонецЕсли;
	КонецЦикла;
	
	// Есть просроченные документы на ТС
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДокументыТС.ВидДокумента КАК ВидДокумента,
	|	уатДокументыТС.Номер КАК Номер,
	|	уатДокументыТС.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыТС.ВладелецДокументов КАК ТС,
	|	уатДокументыТС.ДатаОкончания КАК ДатаОкончания,
	|	уатДокументыТС.Статус КАК Статус
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыТС
	|ГДЕ
	|	НЕ уатДокументыТС.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|	И уатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И уатДокументыТС.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыТС.ВладелецДокументов В(&мсвТС)
	|	И уатДокументыТС.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС)
	|	И НЕ уатДокументыТС.ПометкаУдаления
	|ИТОГИ ПО
	|	ТС";
	
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("мсвТС", мсвТС);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТС.Следующий() Цикл
		ВыборкаДокументы = ВыборкаТС.Выбрать();
		
		СтрокаВидыДокументов = "";
		Пока ВыборкаДокументы.Следующий() Цикл
			СтрокаВидыДокументов = СтрокаВидыДокументов + Строка(ВыборкаДокументы.ВидДокумента) + ", ";
		КонецЦикла;
		СтрокаВидыДокументов = Лев(СтрокаВидыДокументов, СтрДлина(СтрокаВидыДокументов) - 2);
		
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
		НоваяСтрока.Занятость = Истина;
		НоваяСтрока.СтрокаДокументыТС = ?(ЗначениеЗаполнено(НоваяСтрока.СтрокаДокументыТС), ". ", "") + 
			НСтр("en='Vehicle document has expired:';ru='Истек срок действия документа на ТС:'")
			+ " <A href=""СписокДокументовТС"">" + СтрокаВидыДокументов + "</A>";
	КонецЦикла;
	
	// Есть просроченные ТК (топливные карты)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(уатИсторияПеремещенияТопливныхКартСрезПоследних.КомуВыдана, уатПластиковыеКарты.КомуВыдана) КАК ТС
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(&Дата, ) КАК уатИсторияПеремещенияТопливныхКартСрезПоследних
	|		ПО уатПластиковыеКарты.Ссылка = уатИсторияПеремещенияТопливныхКартСрезПоследних.Карта
	|ГДЕ
	|	НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И уатПластиковыеКарты.ДатаОкончания <= &ДатаОкончания
	|	И уатПластиковыеКарты.Статус.Действует = ИСТИНА
	|	И уатПластиковыеКарты.КомуВыдана В(&мсвТС)");
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("мсвТС", мсвТС);
	
	ВыборкаТС = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТС.Следующий() Цикл
		НоваяСтрока = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ВыборкаТС.ТС);
		НоваяСтрока.Занятость = Истина;
		НоваяСтрока.СтрокаПросроченныеТК = ?(ЗначениеЗаполнено(НоваяСтрока.СтрокаПросроченныеТК), ". ", "") + 
			НСтр("en='Has expired';ru='Истек срок действия'") + " <A href=""СписокТК"">" + НСтр("en='vehicle fuel card';ru='топливной карты ТС'") + "</A>";
	КонецЦикла;
	
	// доп. запрос по наличию спидометра
	ЗапросСпидометр = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.Модель.НаличиеСпидометра КАК НаличиеСпидометра
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.Ссылка В(&мсвТС)");
	ЗапросСпидометр.УстановитьПараметр("мсвТС", мсвТС);
	тблНаличиеСпидометра = ЗапросСпидометр.Выполнить().Выгрузить();
	СтруктураНаличиеСпидометра = Новый Соответствие;
	Для Каждого ТекСтрока Из тблНаличиеСпидометра Цикл
		СтруктураНаличиеСпидометра.Вставить(ТекСтрока.Ссылка, ТекСтрока.НаличиеСпидометра);
	КонецЦикла;
	
	// формирование текста
	Для Каждого ТекТС Из мсвТС Цикл
		СтрокаЗанятостьТС = ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(Рез, ТекТС);
		
		ВыработкаОбщая = СтрокаЗанятостьТС.ВыработкаОбщая;
		ДатаПоследнегоТО = СтрокаЗанятостьТС.ДатаТО;
		ВыработкаПослеТО = СтрокаЗанятостьТС.ВыработкаПослеТО;
		СтрокаТО = СтрокаЗанятостьТС.СтрокаТО;
		СтрокаСоставТС = СтрокаЗанятостьТС.СтрокаСоставТС;
		СтрокаПЛ = СтрокаЗанятостьТС.СтрокаПЛ;
		СтрокаРЛ = СтрокаЗанятостьТС.СтрокаРЛ;
		СтрокаПросроченныеДокументы = СтрокаЗанятостьТС.СтрокаДокументыТС;
		СтрокаПросроченныеТК = СтрокаЗанятостьТС.СтрокаПросроченныеТК;
		
		ТекТСНаличиеСпидометра = СтруктураНаличиеСпидометра.Получить(ТекТС);
		Если ТекТСНаличиеСпидометра = Неопределено Тогда
			ТекТСНаличиеСпидометра = Истина;
		КонецЕсли;
				
		СтрокаПробег = ?(ТекТСНаличиеСпидометра, НСтр("en='Mileage:';ru='Пробег:'") + " ", НСтр("en='Operation time:';ru='Наработка:'") + " ");
		Если (ТекТСНаличиеСпидометра И Просмотр_уатПробегТС) 
			ИЛИ (НЕ ТекТСНаличиеСпидометра И Просмотр_уатНаработкаОборудованияВМоточасах) Тогда
			СтрокаПробег = СтрокаПробег + "<A href=""" + ?(ТекТСНаличиеСпидометра, "ОтчетПробег", "ОтчетНаработка") + """>"
				+ ?(ЗначениеЗаполнено(ВыработкаОбщая), ВыработкаОбщая, 0) + "</A>";
		Иначе
			СтрокаПробег = СтрокаПробег + ?(ЗначениеЗаполнено(ВыработкаОбщая), ВыработкаОбщая, 0);
		КонецЕсли;
				
		СтрокаПробег = СтрокаПробег + ?(ДатаПоследнегоТО = '00010101' ИЛИ НЕ СтрокаЗанятостьТС.ЦиклическоеТО, "", ". "
			+ ?(ТекТСНаличиеСпидометра, НСтр("en='Mileage';ru='Пробег'"), НСтр("en='Time';ru='Время'")) + " " + НСтр("en='after maintenance:';ru='после ТО:'")+" "); 
			
		СтрокаПробег = СтрокаПробег + ?(ДатаПоследнегоТО = '00010101' ИЛИ НЕ СтрокаЗанятостьТС.ЦиклическоеТО, "", "" + ВыработкаПослеТО);
		
		Если СтрокаТО = "" Тогда
			СтрокаТО = ". " + НСтр("en='There are no warnings of planned maintenance';ru='Предупреждений по плановому ТО нет'");
		КонецЕсли;
		
		ТекстВедущегоБлока = "";
		Если ДопПараметры.Свойство("ОсновныеДанныеТС") Тогда 
			ТекстВедущегоБлока = ДопПараметры.ОсновныеДанныеТС;
		КонецЕсли;
		
		ТекстПробегССМ = "";
		Если ДопПараметры.Свойство("ПробегССМ") Тогда 
			ТекстПробегССМ = ДопПараметры.ПробегССМ;
		КонецЕсли;
		
		стрШаблон = 
		"<!DOCTYPE html>
		|<html>
		|<head>
		|<style>
		|body{
		|	margin: 0px; 
		|	padding: 0;
		|}
		|</style>
		|</head>
		|<body>
		|<table border=""0"" width=""100%"" cellspacing=""0"">
		|<tbody>"+?(ТекстВедущегоБлока = "", "", "
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка0%_</span></td>
		|</tr>")+?(ТекстПробегССМ = "", "", "
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%СтрокаССМ%_</span></td>
		|</tr>")+"
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка1%_</span></td>
		|</tr>
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка2%_</span></td>
		|</tr>
		|<tr>
		|<td valign=""top""><span style=""font-size: 12px; font-family: 'MS Sans Serif';"">_%Строка3%_</span></td>
		|</tr>
		|</tbody>
		|</table>
		|</body>
		|</html>";
		
		стрРезультат = СтрЗаменить(стрШаблон, "_%Строка0%_", ТекстВедущегоБлока);
		стрРезультат = СтрЗаменить(стрРезультат, "_%СтрокаССМ%_", ТекстПробегССМ);
		стрРезультат = СтрЗаменить(стрРезультат, "_%Строка1%_", СтрокаПробег + СтрокаТО + СтрокаСоставТС);
		стрРезультат = СтрЗаменить(стрРезультат, "_%Строка2%_", СтрокаПросроченныеДокументы + "_%Строка2%_" + СтрокаПЛ + СтрокаРЛ); //оставляем маркер для добавления данных по водителям
		стрРезультат = СтрЗаменить(стрРезультат, "_%Строка3%_", СтрокаПросроченныеТК + "_%Строка3%_"); //оставляем маркер для добавления данных по водителям
		
		СтрокаЗанятостьТС.СтрокаЗанятость = стрРезультат;
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // ЗанятостьТС()

Функция ЗанятостьТС_НайтиДобавитьСтрокуЗанятости(тблЗанятости, ТС)
	СтрокаПоиска = тблЗанятости.Найти(ТС, "ТС");
	Если СтрокаПоиска = Неопределено Тогда
		СтрокаПоиска = тблЗанятости.Добавить();
		СтрокаПоиска.ТС = ТС;
		СтрокаПоиска.ЦиклическоеТО  = Истина;
		СтрокаПоиска.ВыработкаОбщая = 0;
		СтрокаПоиска.ВыработкаПослеТО = 0;
		СтрокаПоиска.ДатаТО = '00010101';
		СтрокаПоиска.ВСоставеТС = Неопределено;
		СтрокаПоиска.СтрокаПЛ = "";
		СтрокаПоиска.СтрокаРЛ = "";
		СтрокаПоиска.СтрокаПробег = "";
		СтрокаПоиска.СтрокаТО = "";
		СтрокаПоиска.СтрокаСоставТС = "";
		СтрокаПоиска.СтрокаДокументыТС = "";
		СтрокаПоиска.СтрокаПросроченныеТК = "";
		СтрокаПоиска.Занятость = Ложь;
		СтрокаПоиска.СтрокаЗанятость = "";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
КонецФункции

// Функция получат текущие статусы ТС
//
Функция ПолучитьТекущиеСостоянияТС(ТС, ДатаНачала, ДатаОкончания) Экспорт
	МассивСостояний = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатСостояниеТС.Регистратор КАК Документ,
	               |	уатСостояниеТС.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	               |ГДЕ
	               |	уатСостояниеТС.Состояние.РазрешитьВыпискуДокументов = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА уатСостояниеТС.Период <= &ДатаОкончания
	               |					И уатСостояниеТС.ДатаОкончания >= &ДатаНачала
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И уатСостояниеТС.ТС = &ТС
	               |	И уатСостояниеТС.Состояние <> ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.СформированПутевойЛист)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСостояний.Добавить(Новый Структура("Состояние, Документ", Выборка.Состояние, Выборка.Документ));
	КонецЦикла;
	
	Возврат МассивСостояний;
	
КонецФункции

// Просроченные документы Водителей
//
Функция ЗанятостьВодителей(мсвВодители, Дата, ДопускДней, ДниДоОкончанияДействияТК) Экспорт
	Рез = Новый ТаблицаЗначений;
	Рез.Колонки.Добавить("Водитель");
	Рез.Колонки.Добавить("ПросроченныеДокументы");
	Рез.Колонки.Добавить("ПросроченныеДокументыТК");
	
	//уатПросроченныеДокументыВодителяСписок
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДокументыВодителей.ВладелецДокументов КАК Сотрудник,
	|	уатДокументыВодителей.ВидДокумента КАК ВидДокумента,
	|	уатДокументыВодителей.Номер КАК Номер,
	|	уатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания КАК ДатаОкончания,
	|	уатДокументыВодителей.Статус КАК Статус
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыВодителей
	|ГДЕ
	|	НЕ уатДокументыВодителей.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|	И уатДокументыВодителей.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И уатДокументыВодителей.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыВодителей.ВладелецДокументов В(&мсвВодители)
	|	И уатДокументыВодителей.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
	|	И НЕ уатДокументыВодителей.ПометкаУдаления
	|ИТОГИ ПО
	|	Сотрудник");
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("мсвВодители", мсвВодители);		
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		ВыборкаДокументы = ВыборкаСотрудник.Выбрать();
		
		НоваяСтрока = Рез.Добавить();
		НоваяСтрока.Водитель = ВыборкаСотрудник.Сотрудник;
		
	    СтрокаДокументы = "";
		Пока ВыборкаДокументы.Следующий() Цикл
			СтрокаДокументы = СтрокаДокументы + Строка(ВыборкаДокументы.ВидДокумента) + ", ";
		КонецЦикла;
		СтрокаДокументы = Лев(СтрокаДокументы, СтрДлина(СтрокаДокументы) - 2);
				
		НоваяСтрока.ПросроченныеДокументы = НСтр("en='At';ru='У'") +" " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаСотрудник.Сотрудник) + 
			" " + НСтр("en='expired validity of the document:';ru='истек срок действия документа:'")
			+ " <A href=""ДокументыВодителя:"+ВыборкаСотрудник.Сотрудник.УникальныйИдентификатор()+""">" + СтрокаДокументы + "</A>";;
		НоваяСтрока.ПросроченныеДокументыТК = "";
	КонецЦикла;
		
	// Просроченные топливные карты.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПластиковыеКарты.КомуВыдана КАК Сотрудник
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И уатПластиковыеКарты.Статус.Действует = ИСТИНА
	|	И уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И уатПластиковыеКарты.ДатаОкончания <= &ДатаОкончания
	|	И уатПластиковыеКарты.КомуВыдана В(&мсвВодители)");
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Дата) + ДопускДней * 24 * 60 * 60);
	Запрос.УстановитьПараметр("мсвВодители", мсвВодители);
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		НоваяСтрока = Рез.Найти(ВыборкаСотрудник.Сотрудник, "Водитель");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = Рез.Добавить();
			НоваяСтрока.Водитель = ВыборкаСотрудник.Сотрудник;
			НоваяСтрока.ПросроченныеДокументы = "";
			НоваяСтрока.ПросроченныеДокументыТК = "";
		КонецЕсли;
				
		НоваяСтрока.ПросроченныеДокументыТК = НСтр("en='At';ru='У'") +" " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаСотрудник.Сотрудник) + 
			" " + НСтр("en='expired';ru='истек срок действия'")
			+ " <A href=""ТКВодителя:"+Строка(ВыборкаСотрудник.Сотрудник.УникальныйИдентификатор())+""">" + НСтр("en='fuel card';ru='топливной карты'")+ "</A>";
		
	КонецЦикла;
		
	Возврат Рез;
КонецФункции

// Формирует текст HTML доп. информации для отображения в динамических списках ТС
//
Функция СформироватьТекстДопИнформацииПоТС(ТС, ДопПараметры = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ТС) ИЛИ ТС.ЭтоГруппа Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
		
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТС);
	
	ДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС);
	ДниДоОкончанияДействияТК = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияТопливныхКарт);
		
	тблЗанятостьТС = уатОбщегоНазначения.ЗанятостьТС(мсвТС, ТекущаяДата(), ДниДоОкончанияДействияДокументовТС, ДниДоОкончанияДействияТК, ДопПараметры);
	
	СтрокаЗанятостиТС = тблЗанятостьТС.Найти(ТС, "ТС");
	Если СтрокаЗанятостиТС = Неопределено Тогда
		ДанныеСтрокаЗанятостьТС = "";
		ДанныеЗанятостьТС = Ложь;
		ДанныеДокументыТС = "";
		ДанныеПросроченныеТК = "";
	Иначе
		ДанныеСтрокаЗанятостьТС = СтрокаЗанятостиТС.СтрокаЗанятость;
		ДанныеЗанятостьТС = СтрокаЗанятостиТС.Занятость;
		ДанныеДокументыТС = СтрокаЗанятостиТС.СтрокаДокументыТС;
		ДанныеПросроченныеТК = СтрокаЗанятостиТС.СтрокаПросроченныеТК;
	КонецЕсли;
	
	ДокументыВодитель = "";
	ДокументыТКВодитель = "";
	Если ДопПараметры.Свойство("Водитель") Тогда
		мсвВодители = Новый Массив;
		мсвВодители.Добавить(ДопПараметры.Водитель);
		
		ДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей);
		
		тблЗанятостьВодителей = уатОбщегоНазначения.ЗанятостьВодителей(мсвВодители, ТекущаяДата(), ДниДоОкончанияДействияДокументовВодителей, ДниДоОкончанияДействияТК);
	
		СтрокаЗанятостиВодитель = тблЗанятостьВодителей.Найти(ДопПараметры.Водитель, "Водитель");
		Если СтрокаЗанятостиВодитель = Неопределено Тогда
			ДокументыВодитель = "";
			ДокументыТКВодитель = "";
			ДанныеЗанятостьВодитель = Ложь;
		Иначе
			ДокументыВодитель = СтрокаЗанятостиВодитель.ПросроченныеДокументы;
			ДокументыТКВодитель = СтрокаЗанятостиВодитель.ПросроченныеДокументыТК;
			ДанныеЗанятостьВодитель = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДокументыВодитель) Тогда
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "_%Строка2%_"
			+ ?(ПустаяСтрока(ДанныеДокументыТС), "", ". ") + ДокументыВодитель);
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "_%Строка3%_"
			+ ?(ПустаяСтрока(ДанныеПросроченныеТК), "", ". ") + ДокументыТКВодитель);
	КонецЕсли;
			
	Если ПустаяСтрока(ДанныеДокументыТС + ДокументыВодитель) Тогда
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", НСтр("en='There are no warnings on validity of documents';ru='Предупреждений по сроку действия документов нет'"));
	Иначе
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка2%_", "");
	КонецЕсли;
	Если ПустаяСтрока(ДанныеПросроченныеТК + ДокументыТКВодитель) Тогда
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", НСтр("en='Warnings on duration of fuel cards no';ru='Предупреждений по сроку действия топливных карт нет'"));
	Иначе
		ДанныеСтрокаЗанятостьТС = СтрЗаменить(ДанныеСтрокаЗанятостьТС, "_%Строка3%_", "");
	КонецЕсли;
	
	Возврат ДанныеСтрокаЗанятостьТС;
КонецФункции

// Функция возвращает список видов ТС - прицепы\
//
Функция уатСписокВидовТСПрицепов()ЭКСПОРТ
	
	СписокПрицепов = Новый СписокЗначений;
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.Полуприцеп);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.Прицеп);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.ПрицепСамосвал);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.ПрицепЦистерна);
	Возврат СписокПрицепов;
	
КонецФункции    

// Функция получает значения грузоподъемности и объема кузова для ТС
//  
// Параметры:
//  ТС           - транспортное средство параметры которого необходимо получить
//
// Возвращаемое значение:
//  Параметры - Структура - Структура, содержащая характеристики ТС
//
Функция уатПолучитьГрузоподъемностьИОбъемТС(ТС, ПроверкаМаршрутизация = Ложь) Экспорт
	
	Параметры = Новый Структура("Грузоподъемность, ОбъемКузова", 0, 0);
	
	Попытка
		ТС.ПолучитьОбъект();
	Исключение
		Возврат Параметры;
	КонецПопытки;
	
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") И ЗначениеЗаполнено(ТС) Тогда
		
		ГрузоподъемностьМодели = ТС.Модель.Грузоподъемность;
		ОбъемКузоваМодели      = ТС.Модель.ОбъемКузова;
		
		Параметры.Грузоподъемность = ?(ПроверкаМаршрутизация И ТС.Грузоподъемность <> 0, ТС.Грузоподъемность, ГрузоподъемностьМодели);
		Параметры.Грузоподъемность = ?(Параметры.Грузоподъемность < ГрузоподъемностьМодели, ГрузоподъемностьМодели, Параметры.Грузоподъемность);
		
		Если Метаданные.Справочники.Найти("уатСекцииТС") = Неопределено Тогда 
			Параметры.ОбъемКузова = ?(ПроверкаМаршрутизация И ТС.ОбъемКузова <> 0, ТС.ОбъемКузова, ОбъемКузоваМодели);
			Параметры.ОбъемКузова = ?(Параметры.ОбъемКузова < ОбъемКузоваМодели, ОбъемКузоваМодели, Параметры.ОбъемКузова);
			
		Иначе 
			ЗапросСекции = Новый Запрос();
			ЗапросСекции.УстановитьПараметр("Владелец", ТС);
			ЗапросСекции.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатСекцииТС.Объем КАК Объем
			|ИЗ
			|	Справочник.уатСекцииТС КАК уатСекцииТС
			|ГДЕ
			|	уатСекцииТС.Владелец = &Владелец
			|	И НЕ уатСекцииТС.ПометкаУдаления";
			
			РезультатСекции = ЗапросСекции.Выполнить();
			
			Если РезультатСекции.Пустой() Тогда 
				Параметры.ОбъемКузова = ?(ПроверкаМаршрутизация И ТС.ОбъемКузова <> 0, ТС.ОбъемКузова, ОбъемКузоваМодели);
				Параметры.ОбъемКузова = ?(Параметры.ОбъемКузова < ОбъемКузоваМодели, ОбъемКузоваМодели, Параметры.ОбъемКузова);
			Иначе 
				ВыборкаСекции = РезультатСекции.Выбрать();
				Пока ВыборкаСекции.Следующий() Цикл 
					Параметры.ОбъемКузова = Параметры.ОбъемКузова + ВыборкаСекции.Объем;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		Параметры.Грузоподъемность = Параметры.Грузоподъемность * 1000;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		Параметры.ОбъемКузова = Параметры.ОбъемКузова * 1000;
	КонецЕсли;
	
	Возврат Параметры;
	
КОнецФункции

// Функция возвращает пробег ТС
//
Функция уатПробегТС(ДатаКонец, ТС, ДатаНачала = Неопределено, УчитыватьНачальныйПробег = Истина) Экспорт
	Если Не ЗначениеЗаполнено(ТС) Тогда
		Возврат 0;
	КонецЕсли;
	
	НаличиеСпидометра = ТС.Модель.НаличиеСпидометра;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0) КАК Пробег
	|ПОМЕСТИТЬ Выработка
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			&ДатаНачала,
	|			&МоментВремени,
	|			Регистратор,
	|			ПараметрВыработки = &ПараметрВыработки
	|				И ТС = &ТС) КАК уатВыработкаТСОбороты
	|";
	
	Если УчитыватьНачальныйПробег = Истина Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СправочникуатТС.НачальныйПробег, 0)"+?(НаличиеСпидометра, "", " * 3600")+"
		|ИЗ
		|	Справочник.уатТС КАК СправочникуатТС
		|ГДЕ
		|	СправочникуатТС.НачальныйПробег > 0
		|	И СправочникуатТС.Ссылка = &ТС";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(Выработка.Пробег, 0)) КАК Пробег
	|ИЗ
	|	Выработка КАК Выработка";
	Запрос.УстановитьПараметр("МоментВремени",ДатаКонец);
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала",Дата(1,1,1));
	КонецЕсли;
	Если НаличиеСпидометра Тогда
		Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщий);
	Иначе
		Запрос.УстановитьПараметр("Параметрвыработки", Справочники.уатПараметрыВыработки.ВремяВРаботе);
	Конецесли;
	Запрос.УстановитьПараметр("ТС",ТС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	Если ЗначениеЗаполнено(ВыборкаЗапроса.Пробег) Тогда
		Если НаличиеСпидометра Тогда
			Результат = ВыборкаЗапроса.Пробег;
		Иначе
			Результат = ВыборкаЗапроса.Пробег/3600;
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция возвращает место установки оборудования
//
Функция уатМестоУстановкиОборудования(вхОборудование) Экспорт
	
	Если ТипЗнч(вхОборудование) = Тип("Тип") ИЛИ вхОборудование = Неопределено ИЛИ вхОборудование = NULL Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСоставТС.ВСоставе
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ТС = &Оборудование";
	
	Запрос.УстановитьПараметр("Оборудование", вхОборудование);		
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Результат = ВыборкаЗапроса.ВСоставе;
	Иначе	
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатМестоУстановкиОборудования()

#КонецОбласти


#Область Водители

// Функция - проверяет действительность документов на водителя
//
Функция уатПросроченныеДокументыВодителя(вхДата, вхДопускДней, вхВодитель, выхТаблицаДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(вхДата) + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("Сотрудник",     вхВодитель);		
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДокументыВодителей.ВидДокумента КАК ВидДокумента,
	|	уатДокументыВодителей.Номер КАК Номер,
	|	уатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания КАК ДатаОкончания,
	|	уатДокументыВодителей.Статус КАК Статус
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ВладелецДокументов = &Сотрудник
	|	И уатДокументыВодителей.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
	|	И уатДокументыВодителей.Статус <> ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.НеДействует)
	|	И уатДокументыВодителей.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыВодителей.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|	И НЕ уатДокументыВодителей.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // уатПросроченныеДокументыВодителя()

// Функция - проверяет занятость сотрудника
//
Функция уатСотрудникЗанят(ДатаНач, ДатаКон, вхВодитель, выхТаблицаДокументов = Неопределено, Регистратор = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(вхВодитель) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	// "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	уатРабочееВремяСотрудников.Регистратор КАК Регистратор,
	//|	уатРабочееВремяСотрудников.Период КАК ДатаРаботыКонец,
	//|	ВЫБОР
	//|		КОГДА ТИПЗНАЧЕНИЯ(уатРабочееВремяСотрудников.Регистратор) = ТИП(Документ.уатПутевойЛист)
	//|			ТОГДА уатРабочееВремяСотрудников.Регистратор.ДатаВыезда
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ТИПЗНАЧЕНИЯ(уатРабочееВремяСотрудников.Регистратор) = ТИП(Документ.уатРемонтныйЛист)
	//|					ТОГДА уатРабочееВремяСотрудников.Регистратор.ДатаНачала
	//|				ИНАЧЕ уатРабочееВремяСотрудников.ДатаРаботы
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ДатаРаботыНачало
	//|ПОМЕСТИТЬ втРабочееВремя
	//|ИЗ
	//|	РегистрНакопления.уатРабочееВремяСотрудников КАК уатРабочееВремяСотрудников
	//|ГДЕ
	//|	уатРабочееВремяСотрудников.Сотрудник = &Сотрудник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втРабочееВремя.Регистратор КАК Регистратор
	//|ИЗ
	//|	втРабочееВремя КАК втРабочееВремя
	//|ГДЕ
	//|	втРабочееВремя.ДатаРаботыНачало <= &ДатаОкончания
	//|	И втРабочееВремя.ДатаРаботыКонец >= &ДатаНачала
	//|	И втРабочееВремя.Регистратор <> &Регистратор";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛист.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Проведен
	|	И уатПутевойЛист.Ссылка <> &Регистратор
	|	И (уатПутевойЛист.Водитель1 = &Сотрудник
	|			ИЛИ уатПутевойЛист.Водитель2 = &Сотрудник
	|			ИЛИ уатПутевойЛист.Сотрудник1 = &Сотрудник
	|			ИЛИ уатПутевойЛист.Сотрудник2 = &Сотрудник)
	|	И уатПутевойЛист.ДатаВыезда <= &ДатаОкончания
	|	И уатПутевойЛист.ДатаВозвращения >= &ДатаНачала";
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатТехнологическийПутевойЛист.Ссылка
		|ИЗ
		|	Документ.уатТехнологическийПутевойЛист КАК уатТехнологическийПутевойЛист
		|ГДЕ
		|	уатТехнологическийПутевойЛист.Проведен
		|	И уатТехнологическийПутевойЛист.Ссылка <> &Регистратор
		|	И уатТехнологическийПутевойЛист.Водитель = &Сотрудник
		|	И уатТехнологическийПутевойЛист.ДатаВыезда <= &ДатаОкончания
		|	И уатТехнологическийПутевойЛист.ДатаВозвращения >= &ДатаНачала";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКон-1);
	Запрос.УстановитьПараметр("Сотрудник", вхВодитель);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса.ВыгрузитьКолонку("Регистратор");
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатСотрудникЗанят()

// Функция - возвращает реквизиты водителя
//
Функция уатПрочитатьРеквизитыВодителя(вхВодитель, вхДата, вхОрганизация = Неопределено) Экспорт
	
	Результат = Новый Структура("ТабельныйНомер, Наименование, Организация, ПодразделениеОрганизации, Должность, Класс, Позывной",
		"", "", Неопределено, Неопределено, Неопределено, Неопределено, "");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Класс КАК Класс,
	|	Сотрудники.Позывной КАК Позывной,
	|	Сотрудники.ДатаПриема КАК ДатаПриема,
	|	Сотрудники.ДатаУвольнения КАК ДатаУвольнения,
	|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
	|	уатКадроваяИсторияСотрудников.Организация КАК Организация,
	|	уатКадроваяИсторияСотрудников.Подразделение КАК ПодразделениеОрганизации,
	|	уатКадроваяИсторияСотрудников.Должность КАК Должность,
	|	уатКадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
	|				&ДатаСреза,
	|				Сотрудник = &Водитель
	|					И (&Организация = НЕОПРЕДЕЛЕНО
	|						ИЛИ Организация = &Организация)) КАК уатКадроваяИсторияСотрудников
	|		ПО Сотрудники.Ссылка = уатКадроваяИсторияСотрудников.Сотрудник
	|ГДЕ
	|	Сотрудники.Ссылка = &Водитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Наименование");
	
	Если ТипЗнч(вхВодитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудник = &Водитель", "Сотрудник.ФизическоеЛицо = &Водитель");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.Ссылка = &Водитель", "Сотрудники.ФизическоеЛицо = &Водитель");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаСреза",   вхДата);
	Запрос.УстановитьПараметр("Водитель",    вхВодитель);
	Запрос.УстановитьПараметр("Организация", вхОрганизация);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаРезультатаЗапроса);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // уатПрочитатьРеквизитыВодителя

// Функция получает удостоверение водителя.
//
// Параметры:
//	ФизЛицо - водитель, входящий параметр
//	ДокументСерия - серия документа, исходящий параметр
//	ДокументНомер - номер документа, исходящий параметр
//	ДокументКатегория - категория документа, исходящий параметр
//
// Возвращаемое значение:
//	Булево. Истина, если документ найден.
//
Функция уатУдостоверениеВодителя(Сотрудник, ДокументСерия, ДокументНомер, ДокументКатегория, ДатаВыдачиВУ = Неопределено) Экспорт
	
	ДокументСерия 		= "";
	ДокументНомер 		= "";
	ДокументКатегория 	= "";
	ДатаВыдачиВУ      	= Дата(1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатДокументыВодителей.ВладелецДокументов КАК Сотрудник,
	|	уатДокументыВодителей.ВидДокумента КАК ВидДокумента,
	|	уатДокументыВодителей.Серия КАК Серия,
	|	уатДокументыВодителей.Номер КАК Номер,
	|	уатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания КАК ДатаОкончания,
	|	уатДокументыВодителей.КемВыдан КАК КемВыдан,
	|	уатДокументыВодителей.ОткрытыеКатегории КАК Категория
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ВладелецДокументов = &Сотрудник
	|	И уатДокументыВодителей.ВидДокумента = &ВидДокумента
	|	И уатДокументыВодителей.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
	|	И НЕ уатДокументыВодителей.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.УдостоверениеВодителя);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.Физлицо,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &ФизЛицо
		|				И ВидДокумента = &ВидДокумента) КАК ДокументыФизическихЛицСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыдачи УБЫВ";
		Запрос.УстановитьПараметр("Физлицо", ?(ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники"),
			Сотрудник.ФизическоеЛицо, Сотрудник));
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Ложь;
		Иначе
			РезультатВыборки = РезультатЗапроса.Выбрать();
			РезультатВыборки.Следующий();
			ДокументСерия = РезультатВыборки.Серия;
			ДокументНомер = РезультатВыборки.Номер; 
			ДатаВыдачиВУ  = РезультатВыборки.ДатаВыдачи;
			Результат = Истина;
		КонецЕсли;
	Иначе	
		РезультатВыборки = РезультатЗапроса.Выбрать();
		РезультатВыборки.Следующий();
		ДокументСерия 		= РезультатВыборки.Серия;
		ДокументНомер 		= РезультатВыборки.Номер;
		ДокументКатегория 	= РезультатВыборки.Категория;
		ДатаВыдачиВУ      	= РезультатВыборки.ДатаВыдачи;
		Результат = Истина;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

// Функция получает СНИЛС водителя.
//
// Параметры:
//	Сотрудник - водитель, входящий параметр
//
// Возвращаемое значение:
//	Строка
//
Функция СНИЛСВодителя(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатДокументыВодителей.Номер КАК Номер
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ВладелецДокументов = &Сотрудник
	|	И уатДокументыВодителей.ВидДокумента = &ВидДокумента
	|	И уатДокументыВодителей.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
	|	И НЕ уатДокументыВодителей.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.СНИЛС);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатВыборки = РезультатЗапроса.Выбрать();
	РезультатВыборки.Следующий();  
	Если РезультатЗапроса.Пустой() Тогда  
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ФизическиеЛица.СтраховойНомерПФР КАК Номер
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка = &Физлицо";
		Запрос.УстановитьПараметр("Физлицо", ?(ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники"),
			Сотрудник.ФизическоеЛицо, Сотрудник));
			
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат "";
		Иначе
			РезультатВыборки = РезультатЗапроса.Выбрать();
			РезультатВыборки.Следующий();
			Возврат РезультатВыборки.Номер;
		КонецЕсли;
	Иначе
		Возврат РезультатВыборки.Номер;
	КонецЕсли;
	
КонецФункции      

// Функция получает лицензию медорганизации.
//
// Параметры:
//	ФизЛицо - водитель, входящий параметр
//	ДокументСерия - серия документа, исходящий параметр
//	ДокументНомер - номер документа, исходящий параметр
//	ДокументКатегория - категория документа, исходящий параметр
//
// Возвращаемое значение:
//	Булево. Истина, если документ найден.
//
Функция уатЛицензияМедорганизации(Сотрудник, ДокументСерия, ДокументНомер, ДатаВыдачи, ДатаОкончания, ВладелецДокументов) Экспорт
	
	ДокументСерия      = "";
	ДокументНомер      = "";
	ДатаВыдачи         = Дата(1,1,1);
	ДатаОкончания      = Дата(1,1,1);
	ВладелецДокументов = "";
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатДокументыСотрудников.ВладелецДокументов КАК ВладелецДокументов,
		|	уатДокументыСотрудников.ВидДокумента КАК ВидДокумента,
		|	уатДокументыСотрудников.Серия КАК Серия,
		|	уатДокументыСотрудников.Номер КАК Номер,
		|	уатДокументыСотрудников.ДатаВыдачи КАК ДатаВыдачи,
		|	уатДокументыСотрудников.ДатаОкончания КАК ДатаОкончания,
		|	уатДокументыСотрудников.КемВыдан КАК КемВыдан,
		|	уатДокументыСотрудников.ОткрытыеКатегории КАК Категория,
		|	уатДокументыСотрудников.ВладелецДокументов.Наименование КАК ВладелецДокументовНаименование
		|ИЗ
		|	Справочник.уатРегистрационныеДокументы КАК уатДокументыСотрудников
		|ГДЕ
		|	уатДокументыСотрудников.ВладелецДокументов = &Сотрудник
		|	И уатДокументыСотрудников.ВидДокумента = &ВидДокумента
		|	И уатДокументыСотрудников.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
		|	И НЕ уатДокументыСотрудников.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыдачи УБЫВ";
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.МедицинскаяЛицензия);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	уатСотрудникиКонтрагентов.Контрагент КАК Контрагент
			               |ПОМЕСТИТЬ втКонтрагенты
			               |ИЗ
			               |	РегистрСведений.уатСотрудникиКонтрагентов КАК уатСотрудникиКонтрагентов
			               |ГДЕ
			               |	уатСотрудникиКонтрагентов.ФизЛицо = &ФизЛицо
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	уатДокументыКонтрагентов.ВладелецДокументов КАК ВладелецДокументов,
			               |	уатДокументыКонтрагентов.ВидДокумента КАК ВидДокумента,
			               |	уатДокументыКонтрагентов.Серия КАК Серия,
			               |	уатДокументыКонтрагентов.Номер КАК Номер,
			               |	уатДокументыКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
			               |	уатДокументыКонтрагентов.ДатаОкончания КАК ДатаОкончания,
			               |	уатДокументыКонтрагентов.КемВыдан КАК КемВыдан,
			               |	уатДокументыКонтрагентов.ОткрытыеКатегории КАК Категория,
			               |	уатДокументыКонтрагентов.ВладелецДокументов.Наименование КАК ВладелецДокументовНаименование
			               |ИЗ
			               |	втКонтрагенты КАК втКонтрагенты
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК уатДокументыКонтрагентов
			               |		ПО втКонтрагенты.Контрагент = уатДокументыКонтрагентов.ВладелецДокументов
			               |ГДЕ
			               |	уатДокументыКонтрагентов.ВидДокумента = &ВидДокумента
			               |	И уатДокументыКонтрагентов.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыКонтрагента)
			               |	И НЕ уатДокументыКонтрагентов.ПометкаУдаления
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДатаВыдачи УБЫВ";
			Запрос.УстановитьПараметр("Физлицо", ?(ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники"),
			Сотрудник.ФизическоеЛицо, Сотрудник));
			Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.МедицинскаяЛицензия);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Результат = Ложь;
			Иначе
				РезультатВыборки = РезультатЗапроса.Выбрать();
				РезультатВыборки.Следующий();
				ДокументСерия      = РезультатВыборки.Серия;
				ДокументНомер      = РезультатВыборки.Номер; 
				ДатаВыдачи         = РезультатВыборки.ДатаВыдачи;
				ДатаОкончания      = РезультатВыборки.ДатаОкончания;
				ВладелецДокументов = РезультатВыборки.ВладелецДокументовНаименование;
				Результат = Истина;
			КонецЕсли;
		Иначе	
			РезультатВыборки = РезультатЗапроса.Выбрать();
			РезультатВыборки.Следующий();
			ДокументСерия      = РезультатВыборки.Серия;
			ДокументНомер      = РезультатВыборки.Номер;
			ДатаВыдачи         = РезультатВыборки.ДатаВыдачи;
			ДатаОкончания      = РезультатВыборки.ДатаОкончания;
			Результат = Истина;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатСотрудникиКонтрагентов.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ втКонтрагенты
		|ИЗ
		|	РегистрСведений.уатСотрудникиКонтрагентов КАК уатСотрудникиКонтрагентов
		|ГДЕ
		|	уатСотрудникиКонтрагентов.ФизЛицо = &ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатДокументыКонтрагентов.ВладелецДокументов КАК ВладелецДокументов,
		|	уатДокументыКонтрагентов.ВидДокумента КАК ВидДокумента,
		|	уатДокументыКонтрагентов.Серия КАК Серия,
		|	уатДокументыКонтрагентов.Номер КАК Номер,
		|	уатДокументыКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	уатДокументыКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	уатДокументыКонтрагентов.КемВыдан КАК КемВыдан,
		|	уатДокументыКонтрагентов.ОткрытыеКатегории КАК Категория,
		|	уатДокументыКонтрагентов.ВладелецДокументов.Наименование КАК ВладелецДокументовНаименование
		|ИЗ
		|	втКонтрагенты КАК втКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК уатДокументыКонтрагентов
		|		ПО втКонтрагенты.Контрагент = уатДокументыКонтрагентов.ВладелецДокументов
		|ГДЕ
		|	уатДокументыКонтрагентов.ВидДокумента = &ВидДокумента
		|	И уатДокументыКонтрагентов.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыКонтрагента)
		|	И НЕ уатДокументыКонтрагентов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыдачи УБЫВ";
		Запрос.УстановитьПараметр("Физлицо", Сотрудник);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.уатВидыДокументов.МедицинскаяЛицензия);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Ложь;
		Иначе
			РезультатВыборки = РезультатЗапроса.Выбрать();
			РезультатВыборки.Следующий();
			ДокументСерия      = РезультатВыборки.Серия;
			ДокументНомер      = РезультатВыборки.Номер; 
			ДатаВыдачи         = РезультатВыборки.ДатаВыдачи;
			ДатаОкончания      = РезультатВыборки.ДатаОкончания; 
			ВладелецДокументов = РезультатВыборки.ВладелецДокументовНаименование;
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции      

// Функция возвращает таблицу значений параметров выработки водителей 
//
// Параметры: 	
//  ТС           - ссылка на справочник ОС
//
// Возвращаемое значение: 
//  Список значений
//
Функция уатПараметрыВыработкиВодителей() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПараметрыВыработки.Ссылка КАК ПараметрВыработки,
	|	уатПараметрыВыработки.Временный КАК Временный
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ПометкаУдаления = &ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаСотрудников = &ДействуетНаСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПараметрыВыработки.Наименование";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ДействуетНаСотрудников", Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПараметрыВыработкиВодителей

// Возвращает таблицу пут. листов водителя
//
// Параметры:
//  Водитель     - водитель, путевые листы которого возвращаются
//  ДатаНач      - начало периода выборки путевых листов
//  ДатаКон      - конец периода выборки путевых листов
//  НомерПЛ      - номер путевого листа который необходимо выбрать
//  СтатусПЛ     - статус путевых листов, которые должны попасть в выборку
//  ПроведенПЛ   - признак того, что в выборку должны попасть только проведенные
//                 или непроведенные документы
//
// Возвращаемое значение:
//  Результат   - таблица значений
//
Функция уатПутевыеЛистыВодителя(Водитель, ДатаНач, ДатаКон, НомерПЛ = Неопределено, СтатусПЛ = Неопределено,
		ПроведенПЛ = Неопределено) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель
	|			ИЛИ уатПутевойЛист.Сотрудник1 = &Водитель
	|			ИЛИ уатПутевойЛист.Сотрудник2 = &Водитель)
	|	И уатПутевойЛист.ПометкаУдаления <> &ПометкаУдаления
	|	И уатПутевойЛист.ДатаВыезда >= &ДатаВыезда
	|	И уатПутевойЛист.ДатаВозвращения <= &ДатаВозвращения";
	
	Запрос.УстановитьПараметр("ДатаВыезда", ДатаНач);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДатаКон);
	Запрос.УстановитьПараметр("Водитель", Водитель);
	Запрос.УстановитьПараметр("ПометкаУдаления", Истина);
	
	Если НомерПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Номер = &НомерПЛ";
	КонецЕсли;
	
	Если СтатусПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Рассчитан = &СтатусПЛ";
		Запрос.УстановитьПараметр("Рассчитан", СтатусПЛ);
	КонецЕсли;
	
	Если ПроведенПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Проведен = &Проведен";
		Запрос.УстановитьПараметр("Проведен", ПроведенПЛ);
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда УБЫВ";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
КонецФункции // уатПутевыеЛистыВодителя       

// Возвращает признак того, что сотрудник на указанную дату
// работает по своему графику.
//
Функция СотрудникРаботаетПоГрафику(тчСотрудники, ДатаСреза, Знач ОкончаниеИнтервала = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ОкончаниеИнтервала) Тогда
		// Установлено ограничение интервала ПЛ/МЛ = 1 сутки, то есть многодневные ПЛ считаются только за первые сутки
		Если ОкончаниеИнтервала > ДатаСреза + 24*3600 Тогда
			ОкончаниеИнтервала = ДатаСреза + 24*3600;
		// Если интервал нулевой, то для корректного поиска по графиками добавляем секунду к концу интервала
		ИначеЕсли ОкончаниеИнтервала = ДатаСреза Тогда
			ОкончаниеИнтервала = ДатаСреза + 1;
		КонецЕсли;
	КонецЕсли;
	
	тчГрафикиРабот = ПолучитьГрафикиРаботыСотрудниковЗаПериод(тчСотрудники, ДатаСреза, ОкончаниеИнтервала);
	мсвГрафики = тчГрафикиРабот.ВыгрузитьКолонку("ГрафикРаботы");
	
	тблРабочиеИнтервалыГрафиков = ГрафикиРаботы.РасписанияРаботыНаПериод(мсвГрафики, НачалоДня(ДатаСреза),
		КонецДня(?(ЗначениеЗаполнено(ОкончаниеИнтервала), ОкончаниеИнтервала, ДатаСреза)));
		
	ДобавитьКорректировкиРасписанияРаботыСотрудниковИТС(тблРабочиеИнтервалыГрафиков, тчСотрудники, НачалоДня(ДатаСреза),
		КонецДня(?(ЗначениеЗаполнено(ОкончаниеИнтервала), ОкончаниеИнтервала, ДатаСреза)));
	
	// Границы интервалов преобразуем из вида "Время" в "Дата + Время",
	// если интервал заканчивается в полночь, то перещелкиваем окончание интервала на следующий день
	тблРабочиеИнтервалыГрафиков.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	тблРабочиеИнтервалыГрафиков.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Для Каждого ТекРабочийИнтервал Из тблРабочиеИнтервалыГрафиков Цикл
		Если ЗначениеЗаполнено(ТекРабочийИнтервал.ВремяНачала) Тогда
			ТекРабочийИнтервал.ДатаНачала = ТекРабочийИнтервал.ДатаГрафика + (ТекРабочийИнтервал.ВремяНачала - '00010101');
		Иначе
			ТекРабочийИнтервал.ДатаНачала = ТекРабочийИнтервал.ДатаГрафика;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекРабочийИнтервал.ВремяОкончания) Тогда
			ТекРабочийИнтервал.ДатаОкончания = ТекРабочийИнтервал.ДатаГрафика + (ТекРабочийИнтервал.ВремяОкончания - '00010101');
		Иначе
			ТекРабочийИнтервал.ДатаОкончания = ТекРабочийИнтервал.ДатаГрафика + 24*3600;
		КонецЕсли
	КонецЦикла;
			
	// склеиваем переходящие ночные интервалы, например, 22-00 + 00-7 = 22-7
	тблРабочиеИнтервалыГрафиков.Сортировать("Сотрудник, ГрафикРаботы, ДатаГрафика, ВремяНачала");
	мсвСтрокиУдалить = Новый Массив;
	Для Сч = 1 По тблРабочиеИнтервалыГрафиков.Количество()-1 Цикл
		ТекРабочийИнтервал  = тблРабочиеИнтервалыГрафиков[Сч];
		ПредРабочийИнтервал = тблРабочиеИнтервалыГрафиков[Сч-1];
		
		Если ПредРабочийИнтервал.Сотрудник = ТекРабочийИнтервал.Сотрудник
			И ПредРабочийИнтервал.ГрафикРаботы = ТекРабочийИнтервал.ГрафикРаботы
			И ТекРабочийИнтервал.ДатаНачала - ПредРабочийИнтервал.ДатаОкончания <= 60 Тогда
			
			ТекРабочийИнтервал.ДатаНачала = ПредРабочийИнтервал.ДатаНачала;
			мсвСтрокиУдалить.Добавить(ПредРабочийИнтервал);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблРабочиеИнтервалыГрафиков.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тчГрафикиРабот.Сотрудник КАК Сотрудник,
	|	тчГрафикиРабот.Организация КАК Организация,
	|	тчГрафикиРабот.Период КАК Период,
	|	тчГрафикиРабот.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	тчГрафикиРабот.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ втГрафикРаботы
	|ИЗ
	|	&тчГрафикиРабот КАК тчГрафикиРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблРабочиеИнтервалыГрафиков.Сотрудник КАК Сотрудник,
	|	тблРабочиеИнтервалыГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	тблРабочиеИнтервалыГрафиков.ДатаГрафика КАК ДатаГрафика,
	|	тблРабочиеИнтервалыГрафиков.ДатаНачала КАК ДатаНачала,
	|	тблРабочиеИнтервалыГрафиков.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ втРабочиеИнтервалыГрафиков
	|ИЗ
	|	&тблРабочиеИнтервалыГрафиков КАК тблРабочиеИнтервалыГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втГрафикРаботы.Сотрудник КАК Сотрудник,
	|	втГрафикРаботы.Организация КАК Организация,
	|	втГрафикРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	втГрафикРаботы.Период КАК Период,
	|	ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ) КАК ДеньВключенВГрафик,
	|	ЕСТЬNULL(уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени, ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.ПустаяСсылка)) КАК ВидИспользованияРабочегоВремени,
	|	ЕСТЬNULL(уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени.ИспользоватьКакРабочееВремя, ЛОЖЬ) КАК ИспользоватьКакРабочееВремя,
	|	ЕСТЬNULL(уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени.ИспользоватьКакЦелодневныйПростой, ЛОЖЬ) КАК ИспользоватьКакЦелодневныйПростой
	|ПОМЕСТИТЬ втРабочееВремя
	|ИЗ
	|	втГрафикРаботы КАК втГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО втГрафикРаботы.Период = КалендарныеГрафики.ДатаГрафика
	|			И втГрафикРаботы.ГрафикРаботы = КалендарныеГрафики.Календарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатРабочееВремяСотрудников.Обороты КАК уатРабочееВремяСотрудниковОбороты
	|		ПО втГрафикРаботы.Сотрудник = уатРабочееВремяСотрудниковОбороты.Сотрудник
	|			И втГрафикРаботы.Организация = уатРабочееВремяСотрудниковОбороты.Организация
	|			И втГрафикРаботы.Период = уатРабочееВремяСотрудниковОбороты.ДатаРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРабочееВремя.Сотрудник КАК Сотрудник,
	|	втРабочееВремя.Организация КАК Организация,
	|	втРабочееВремя.ГрафикРаботы КАК ГрафикРаботы,
	|	втРабочееВремя.Период КАК Период,
	|	втРабочееВремя.ДеньВключенВГрафик КАК ДеньВключенВГрафик,
	|	втРабочееВремя.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	втРабочиеИнтервалыГрафиков.ДатаНачала КАК ДатаНачала,
	|	втРабочиеИнтервалыГрафиков.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА втРабочиеИнтервалыГрафиков.ДатаНачала < &НачалоИнтервала
	|			ТОГДА &НачалоИнтервала
	|		ИНАЧЕ втРабочиеИнтервалыГрафиков.ДатаНачала
	|	КОНЕЦ КАК НачалоПересечения,
	|	ВЫБОР
	|		КОГДА втРабочиеИнтервалыГрафиков.ДатаОкончания > &КонецИнтервала
	|			ТОГДА &КонецИнтервала
	|		ИНАЧЕ втРабочиеИнтервалыГрафиков.ДатаОкончания
	|	КОНЕЦ КАК КонецПересечения
	|ПОМЕСТИТЬ втТаблицаРезультат
	|ИЗ
	|	втРабочееВремя КАК втРабочееВремя
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРабочиеИнтервалыГрафиков КАК втРабочиеИнтервалыГрафиков
	|		ПО втРабочееВремя.ГрафикРаботы = втРабочиеИнтервалыГрафиков.ГрафикРаботы
	|			И втРабочееВремя.Сотрудник = втРабочиеИнтервалыГрафиков.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(втРабочееВремя.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(втРабочиеИнтервалыГрафиков.ДатаГрафика, ДЕНЬ))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втРабочееВремя.ВидИспользованияРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА втРабочееВремя.ИспользоватьКакЦелодневныйПростой
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (втРабочееВремя.ДеньВключенВГрафик ИЛИ НЕ втРабочиеИнтервалыГрафиков.ДатаНачала ЕСТЬ NULL)
	|	И втРабочиеИнтервалыГрафиков.ДатаНачала < &КонецИнтервала
	|	И втРабочиеИнтервалыГрафиков.ДатаОкончания > &НачалоИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаРезультат.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА &КонецИнтервала <> НЕОПРЕДЕЛЕНО
	|				И &КонецИнтервала > &НачалоИнтервала
	|			ТОГДА СУММА(РАЗНОСТЬДАТ(втТаблицаРезультат.НачалоПересечения, втТаблицаРезультат.КонецПересечения, СЕКУНДА) / ВЫБОР
	|						КОГДА &НачалоИнтервала = &КонецИнтервала
	|							ТОГДА 1
	|						ИНАЧЕ РАЗНОСТЬДАТ(&НачалоИнтервала, &КонецИнтервала, СЕКУНДА)
	|					КОНЕЦ)
	|		ИНАЧЕ МАКСИМУМ(1)
	|	КОНЕЦ КАК КоэффициентЗанятостиПоДокументу,
	|	МИНИМУМ(втТаблицаРезультат.НачалоПересечения) КАК НачалоПересечения,
	|	МАКСИМУМ(втТаблицаРезультат.КонецПересечения) КАК КонецПересечения
	|ИЗ
	|	втТаблицаРезультат КАК втТаблицаРезультат
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаРезультат.Сотрудник");
	
	Запрос.УстановитьПараметр("тчГрафикиРабот", тчГрафикиРабот);
	Запрос.УстановитьПараметр("тблРабочиеИнтервалыГрафиков", тблРабочиеИнтервалыГрафиков);
	Запрос.УстановитьПараметр("НачалоИнтервала", ДатаСреза);
	Запрос.УстановитьПараметр("КонецИнтервала", ?(ЗначениеЗаполнено(ОкончаниеИнтервала), ОкончаниеИнтервала, ДатаСреза));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

// Возвращает признак того, что ТС на указанную дату
// работает по своему графику.
//
Функция ТСРаботаетПоГрафику(ТС, ДатаСреза) Экспорт
	
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
		мТС = Новый Массив();
		мТС.Добавить(ТС);
	ИначеЕсли ТипЗнч(ТС) = Тип("Массив") Тогда
		мТС = ТС;
	Иначе
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Ссылка КАК ТС,
	               |	&ДатаСреза КАК ДатаСреза,
	               |	уатТС.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	               |	уатТС.ГрафикРаботы КАК ГрафикРаботы
	               |ПОМЕСТИТЬ втГрафикРаботы
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Ссылка В(&ТС)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ) КАК ДеньВключенВГрафик,
	               |	втГрафикРаботы.ТС КАК ТС,
	               |	втГрафикРаботы.ДатаСреза КАК ДатаСреза
	               |ПОМЕСТИТЬ втРабочееВремя
	               |ИЗ
	               |	втГрафикРаботы КАК втГрафикРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |		ПО втГрафикРаботы.ГрафикРаботы = КалендарныеГрафики.Календарь
	               |			И втГрафикРаботы.ДатаСреза = КалендарныеГрафики.ДатаГрафика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втРабочееВремя.ДеньВключенВГрафик КАК ДеньВключенВГрафик,
	               |	втРабочееВремя.ТС КАК ТС,
	               |	втРабочееВремя.ДатаСреза КАК ДатаСреза
	               |ИЗ
	               |	втРабочееВремя КАК втРабочееВремя
	               |ГДЕ
	               |	втРабочееВремя.ДеньВключенВГрафик = ИСТИНА";
	Запрос.УстановитьПараметр("ТС", мТС);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

// Функция возвращает ФИО физ. лица или юридического лица организации
// Параметры:
//	ФизЛицо  физ. лицо или организация
// Возвращаемое значение:
//	Структура - ключи Фамилия, Имя, Отчество,
//	если инициалы не найдены, то возвращается Неопределено
//
Функция уатФИОФизЛица(ФизЛицо, Знач ТекДата = Неопределено) Экспорт
	Если НЕ уатРаботаСМетаданными.уатЕстьРегистрСведений("ФИОФизическихЛиц") Тогда
		Если уатРаботаСМетаданными.ЕстьСправочник("ФизическиеЛица")
			И (ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(ФизЛицо) = Тип("СправочникОбъект.ФизическиеЛица"))
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ФИО", "ФизическиеЛица") Тогда
			Возврат ФизЛицо.ФИО;
			
		ИначеЕсли уатРаботаСМетаданными.ЕстьСправочник("Организации")
			И (ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ФизЛицо) = Тип("СправочникОбъект.Организации")) Тогда
			Возврат ФизЛицо.Наименование;
			
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекДата = Неопределено Тогда
		ТекДата = ТекущаяДата();
	КонецЕсли;
		
	Табл = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ТекДата, Новый Структура("ФизическоеЛицо", ФизЛицо));
	Если Табл.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		//Возврат Табл[0].Фамилия + " " + Табл[0].Имя + " " + Табл[0].Отчество;
		Возврат Новый Структура("Фамилия, Имя, Отчество", Табл[0].Фамилия, Табл[0].Имя, Табл[0].Отчество);
	КонецЕсли;
КонецФункции

// Функция возвращает полное ФИО физ. лица или юридического лица организации
// Параметры:
//	ФизЛицо  физ. лицо или организация,
//	ТекДата - дата текущего ФИО
//	флПодставлятьИнициалыФизЛицаЕслиНетФИО - флаг подстановки инициалов, если ФИО не обнаружено
// Возвращаемое значение:
//	Строка - представление ФИО физ. лица
//
Функция уатФИОСотрудникаПолноеСтрокой(Знач ФизЛицо, Знач ТекДата = Неопределено, 
	флПодставлятьИнициалыФизЛицаЕслиНетФИО = Ложь, флПодставлятьНаименованиеЕслиНетФИО = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Сотрудники") ИЛИ 
		ТипЗнч(ФизЛицо) = Тип("СправочникОбъект.Сотрудники") Тогда
		Если ЗначениеЗаполнено(ФизЛицо.ФизическоеЛицо) Тогда
			ФизЛицо = ФизЛицо.ФизическоеЛицо;
		Иначе 
			Если флПодставлятьИнициалыФизЛицаЕслиНетФИО Тогда
				Возврат уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ФизЛицо);
			ИначеЕсли флПодставлятьНаименованиеЕслиНетФИО Тогда
				Возврат Строка(ФизЛицо);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ФИО = уатФИОФизЛица(ФизЛицо, ТекДата);
	Если ФИО = Неопределено Тогда //возвращаем инициалы физ. лица
		Если флПодставлятьИнициалыФизЛицаЕслиНетФИО Тогда
			Возврат уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ФизЛицо);
		ИначеЕсли флПодставлятьНаименованиеЕслиНетФИО Тогда
			Возврат Строка(ФизЛицо);
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
	Иначе //возвращаем полное ФИО
		Если ТипЗнч(ФИО) = Тип("Структура") Тогда
			Возврат ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество;
		Иначе
			Возврат ФИО;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Процедура очищает поля, связанные со справочником Сотрудники и задает ограничение типа,
// поскольку в текущей версии решения используется составной тип
//
Процедура УстановитьОграничениеТипаСотрудников(ДокОбъект) Экспорт
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		Если ДокОбъект.Водитель1 = Неопределено Тогда
			ДокОбъект.Водитель1 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Водитель2 = Неопределено Тогда
			ДокОбъект.Водитель2 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Сотрудник1 = Неопределено Тогда
			ДокОбъект.Сотрудник1 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Сотрудник2 = Неопределено Тогда
			ДокОбъект.Сотрудник2 = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.МедработникВыезд = Неопределено Тогда
			ДокОбъект.МедработникВыезд = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.МедработникВозврат = Неопределено Тогда
			ДокОбъект.МедработникВозврат = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ВыдалДиспетчер = Неопределено Тогда
			ДокОбъект.ВыдалДиспетчер = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ВыпустилМеханик = Неопределено Тогда
			ДокОбъект.ВыпустилМеханик = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ПринялДиспетчер = Неопределено Тогда
			ДокОбъект.ПринялДиспетчер = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.ПринялМеханик = Неопределено Тогда
			ДокОбъект.ПринялМеханик = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.УполномоченныйНаПроставлениеОдометраПриВыезде = Неопределено Тогда
			ДокОбъект.УполномоченныйНаПроставлениеОдометраПриВыезде = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.УполномоченныйНаПроставлениеОдометраПриВозврате = Неопределено Тогда
			ДокОбъект.УполномоченныйНаПроставлениеОдометраПриВозврате = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет экипаж ТС
Процедура ЗаполнитьЭкипажТС(ТС, Организация, ТекДата,
	Водитель1 = Ложь, Водитель2 = Ложь, Сотрудник1 = Ложь, Сотрудник2 = Ложь,
	флПерезаполнять = Истина, ОкончаниеИнтервала = Неопределено, ВыводитьСообщения = Истина, флИзменениеДаты = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат;
	КонецЕсли;
		
	НастройкаЗаполнениеВодителей           = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеВодителей);
	НастройкаЗаполнениеСопроводительныхЛиц = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеСопроводительныхЛиц);
	НастройкаПодставлятьВторогоВодителя    = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ПодставлятьВторогоВодителя);
	НастройкаПодставлятьВторогоСотрудника  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ПодставлятьВторогоСотрудника);
		
	НастройкаЗаполнятьВодителей =
		(НастройкаЗаполнениеВодителей = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику
		ИЛИ НастройкаЗаполнениеВодителей = Перечисления.уатВариантыЗаполненияВодителей.ПоЭкипажу И НЕ флИзменениеДаты);
	НастройкаЗаполнятьСопроводительныхЛиц =
		(НастройкаЗаполнениеСопроводительныхЛиц = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику
		ИЛИ НастройкаЗаполнениеСопроводительныхЛиц = Перечисления.уатВариантыЗаполненияВодителей.ПоЭкипажу И НЕ флИзменениеДаты);
		
	Если НЕ НастройкаЗаполнятьВодителей И НЕ НастройкаЗаполнятьСопроводительныхЛиц Тогда
		Возврат;
	КонецЕсли;
	
	// очистка экипажа перед заполнением
	Если НастройкаЗаполнятьВодителей И флПерезаполнять Тогда
		Если Водитель1 <> Ложь Тогда
			Если ТипЗнч(Водитель1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Водитель1 = Справочники.ФизическиеЛица.ПустаяСсылка();
			Иначе
				Водитель1 = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Водитель2 <> Ложь И НастройкаПодставлятьВторогоВодителя Тогда
			Если ТипЗнч(Водитель2) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Водитель2 = Справочники.ФизическиеЛица.ПустаяСсылка();
			Иначе
				Водитель2 = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НастройкаЗаполнятьСопроводительныхЛиц И флПерезаполнять Тогда
		Если Сотрудник1 <> Ложь Тогда
			Если ТипЗнч(Сотрудник1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Сотрудник1 = Справочники.ФизическиеЛица.ПустаяСсылка();
			Иначе
				Сотрудник1 = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Сотрудник2 <> Ложь И НастройкаПодставлятьВторогоСотрудника Тогда
			Если ТипЗнч(Сотрудник2) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Сотрудник2 = Справочники.ФизическиеЛица.ПустаяСсылка();
			Иначе
				Сотрудник2 = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	тблЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТС(ТС, ТекДата);
	
	флагЕстьВодители =
		тблЭкипаж.Найти(Перечисления.уатЧленыЭкипажа.ОсновнойВодитель, "ЧленЭкипажа") <> Неопределено
		ИЛИ тблЭкипаж.Найти(Перечисления.уатЧленыЭкипажа.ВторойВодитель, "ЧленЭкипажа") <> Неопределено;
		
	флагЕстьСопроводительныеЛица =
		тблЭкипаж.Найти(Перечисления.уатЧленыЭкипажа.ОсновноеСопроводительноеЛицо, "ЧленЭкипажа") <> Неопределено
		ИЛИ тблЭкипаж.Найти(Перечисления.уатЧленыЭкипажа.ВтороеСопроводительноеЛицо, "ЧленЭкипажа") <> Неопределено;

	СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТС, ТекДата, Организация, ОкончаниеИнтервала);
	
	СтруктураЭкипажСообщения = Новый Структура;
	
	// водитель 1
	Если НастройкаЗаполнятьВодителей И Водитель1 <> Ложь Тогда
		Если флПерезаполнять ИЛИ НЕ ЗначениеЗаполнено(Водитель1) Тогда
			Водитель1 = СтруктураЭкипаж.Водитель;
		КонецЕсли;
		
		Если ВыводитьСообщения И НастройкаЗаполнениеВодителей = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику Тогда
			Если флПерезаполнять И НЕ ЗначениеЗаполнено(Водитель1) Тогда
				СтруктураЭкипажСообщения.Вставить("Водитель1", Водитель1);
			ИначеЕсли НЕ флПерезаполнять И ЗначениеЗаполнено(Водитель1) Тогда
				тзПоГрафику = уатОбщегоНазначения.СотрудникРаботаетПоГрафику(Водитель1, ТекДата, ОкончаниеИнтервала);
				Если тзПоГрафику.Количество() = 0 Тогда
					СтруктураЭкипажСообщения.Вставить("Водитель1", Водитель1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// водитель 2
	Если НастройкаЗаполнятьВодителей И НастройкаПодставлятьВторогоВодителя И Водитель2 <> Ложь Тогда
		Если флПерезаполнять ИЛИ НЕ ЗначениеЗаполнено(Водитель2) Тогда
			Водитель2 = СтруктураЭкипаж.Водитель2;
		КонецЕсли;
		
		Если ВыводитьСообщения И НастройкаЗаполнениеВодителей = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику Тогда
			Если флПерезаполнять И НЕ ЗначениеЗаполнено(Водитель2) Тогда
				СтруктураЭкипажСообщения.Вставить("Водитель2", Водитель2);
			ИначеЕсли НЕ флПерезаполнять И ЗначениеЗаполнено(Водитель2) Тогда
				тзПоГрафику = уатОбщегоНазначения.СотрудникРаботаетПоГрафику(Водитель2, ТекДата, ОкончаниеИнтервала);
				Если тзПоГрафику.Количество() = 0 Тогда
					СтруктураЭкипажСообщения.Вставить("Водитель2", Водитель2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// сопроводительное лицо 1
	Если НастройкаЗаполнятьСопроводительныхЛиц И Сотрудник1 <> Ложь Тогда
		Если флПерезаполнять ИЛИ НЕ ЗначениеЗаполнено(Сотрудник1) Тогда
			Сотрудник1 = СтруктураЭкипаж.Сотрудник;
		КонецЕсли;
		
		Если ВыводитьСообщения И НастройкаЗаполнениеСопроводительныхЛиц = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику Тогда
			Если флПерезаполнять И НЕ ЗначениеЗаполнено(Сотрудник1) Тогда
				СтруктураЭкипажСообщения.Вставить("Сотрудник1", Сотрудник1);
			ИначеЕсли НЕ флПерезаполнять И ЗначениеЗаполнено(Сотрудник1) Тогда
				тзПоГрафику = уатОбщегоНазначения.СотрудникРаботаетПоГрафику(Сотрудник1, ТекДата, ОкончаниеИнтервала);
				Если тзПоГрафику.Количество() = 0 Тогда
					СтруктураЭкипажСообщения.Вставить("Сотрудник1", Сотрудник1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// сопроводительное лицо 2
	Если НастройкаЗаполнятьСопроводительныхЛиц И НастройкаПодставлятьВторогоСотрудника И Сотрудник2 <> Ложь Тогда
		Если флПерезаполнять ИЛИ НЕ ЗначениеЗаполнено(Сотрудник2) Тогда
			Сотрудник2 = СтруктураЭкипаж.Сотрудник2;
		КонецЕсли;
		
		Если ВыводитьСообщения И НастройкаЗаполнениеСопроводительныхЛиц = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику Тогда
			Если флПерезаполнять И НЕ ЗначениеЗаполнено(Сотрудник2) Тогда
				СтруктураЭкипажСообщения.Вставить("Сотрудник2", Сотрудник2);
			ИначеЕсли НЕ флПерезаполнять И ЗначениеЗаполнено(Сотрудник2) Тогда
				тзПоГрафику = уатОбщегоНазначения.СотрудникРаботаетПоГрафику(Сотрудник2, ТекДата, ОкончаниеИнтервала);
				Если тзПоГрафику.Количество() = 0 Тогда
					СтруктураЭкипажСообщения.Вставить("Сотрудник2", Сотрудник2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СообщениеЗаполнитьЭкипажТС(СтруктураЭкипажСообщения,
		флПерезаполнять И (флагЕстьВодители ИЛИ флагЕстьСопроводительныеЛица));
	
КонецПроцедуры

Процедура СообщениеЗаполнитьЭкипажТС(СтруктураЭкипаж, флПерезаполнять)
	
	Если СтруктураЭкипаж.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеЧленовЭкипажа = Новый Структура;
	ПредставлениеЧленовЭкипажа.Вставить("Водитель1",
		Новый Структура("Текст1, Текст2, Текст3", "Водитель", "водитель", "водителя"));
	ПредставлениеЧленовЭкипажа.Вставить("Водитель2",
		Новый Структура("Текст1, Текст2, Текст3", "Водитель", "водитель", "водителя 2"));
	ПредставлениеЧленовЭкипажа.Вставить("Сотрудник1",
		Новый Структура("Текст1, Текст2, Текст3", "Сопровождающее лицо", "сопровождающее лицо", "сопровождающее лицо"));
	ПредставлениеЧленовЭкипажа.Вставить("Сотрудник2",
		Новый Структура("Текст1, Текст2, Текст3", "Сопровождающее лицо", "сопровождающее лицо", "сопровождающее лицо 2"));
	
	Если флПерезаполнять Тогда
		СтрокаСотрудники = "";
		Для Каждого ТекСотрудник Из СтруктураЭкипаж Цикл
			СтрокаСотрудники = СтрокаСотрудники + СтрШаблон("%1, ",
				ПредставлениеЧленовЭкипажа[ТекСотрудник.Ключ].Текст3);
		КонецЦикла;
		СтрокаСотрудники = Лев(СтрокаСотрудники, СтрДлина(СтрокаСотрудники)-2);
		
		ТекстСообщения = СтрШаблон("Не удалось заполнить %1 из экипажа", СтрокаСотрудники);
	Иначе
		ТекстСообщения = "";
		Для Каждого ТекСотрудник Из СтруктураЭкипаж Цикл
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = ТекстСообщения + СтрШаблон("%1 %2, ",
					ПредставлениеЧленовЭкипажа[ТекСотрудник.Ключ].Текст1, ТекСотрудник.Значение);
			Иначе
				ТекстСообщения = ТекстСообщения + СтрШаблон("%1 %2, ",
					ПредставлениеЧленовЭкипажа[ТекСотрудник.Ключ].Текст2, ТекСотрудник.Значение);
			КонецЕсли;
		КонецЦикла;
		ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-2);
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + "
		|Возможно, график работы не указан или отсутствует рабочее время на дату документа (период документа).
		|Если графики работы учитывать не требуется, то настройку ""Заполнять водителей / сопроводительных лиц""
		|следует установить в значение ""По экипажу"" или ""Не используется"".";
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Процедура вносит изменения в расписание работы по графикам согласно корректировкам
// по документам уатКорректировкаИспользованияРаботникамиРабочегоВремени с видом операции "План":
// имеющиеся данные по графикам замещаются корректировками
// Параметры:
//  тблРабочиеИнтервалыГрафиковРасписанияРаботы - таблица значений с колонками ГрафикРаботы, ДатаГрафика, ВремяНачала, ВремяОкончания
//
Процедура ДобавитьКорректировкиРасписанияРаботыСотрудниковИТС(тблРабочиеИнтервалыГрафиков, СотрудникиИТС, НачалоПериода, КонецПериода) Экспорт
	КэшГрафикиСотрудников = Неопределено;
	
	Если тблРабочиеИнтервалыГрафиков.Колонки.Найти("Регистратор") = Неопределено Тогда
		тблРабочиеИнтервалыГрафиков.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.уатКорректировкаИспользованияРаботникамиРабочегоВремени"));
	КонецЕсли;
	Если тблРабочиеИнтервалыГрафиков.Колонки.Найти("Время") = Неопределено Тогда
		тблРабочиеИнтервалыГрафиков.Колонки.Добавить("Время", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если тблРабочиеИнтервалыГрафиков.Колонки.Найти("ВидВремени") = Неопределено Тогда
		тблРабочиеИнтервалыГрафиков.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.уатВидыИспользованияРабочегоВремени"));
	КонецЕсли;
		
	// входной параметр Сотрудники приводим к одному типу Массив
	мсвСотрудникиИТС = Новый Массив;
	Если ТипЗнч(СотрудникиИТС) = Тип("СправочникСсылка.Сотрудники")
		ИЛИ ТипЗнч(СотрудникиИТС) = Тип("СправочникСсылка.уатТС") Тогда
		мсвСотрудникиИТС.Добавить(СотрудникиИТС);
	Иначе
		Для Каждого ТекСотр Из СотрудникиИТС Цикл
			Если мсвСотрудникиИТС.Найти(ТекСотр.Сотрудник) = Неопределено Тогда
				мсвСотрудникиИТС.Добавить(ТекСотр.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// "расширяем" таблицу рабочих интервалов графика по сотрудникам, то есть добавляем колонку Сотрудник и заполняем,
	// при этом по одному графику может работать несколько сотрудников и вместо одной строки получаем несколько строк
	тблРабочиеИнтервалыГрафиков.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.уатТС"));
	КоличСтрокУдалить = тблРабочиеИнтервалыГрафиков.Количество();
	Для Сч = 0 По КоличСтрокУдалить - 1 Цикл
		ТекРабочийИнтервал = тблРабочиеИнтервалыГрафиков[Сч];
		Для Каждого ТекСотрудник Из мсвСотрудникиИТС Цикл
			ТекГрафикСотрудника = ГрафикРаботыСотрудникаНаДату(ТекСотрудник, ТекРабочийИнтервал.ДатаГрафика, КэшГрафикиСотрудников, мсвСотрудникиИТС);
			Если ТекГрафикСотрудника = ТекРабочийИнтервал.ГрафикРаботы Тогда
				// Добавляется новая строка, если сотрудник работает по текущему графику на указанную дату
				НоваяСтрока = тблРабочиеИнтервалыГрафиков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекРабочийИнтервал);
				НоваяСтрока.Сотрудник = ТекСотрудник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Сч = 0 По КоличСтрокУдалить - 1 Цикл
		тблРабочиеИнтервалыГрафиков.Удалить(0);
	КонецЦикла;
	
	//// запрос по корректировкам рабочего времени сотрудников
	//ЗапросКорректировки = Новый Запрос(
	//"ВЫБРАТЬ
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы КАК ДатаРаботы,
	//|	МАКСИМУМ(уатКорректировкаПланаРабочегоВремениСотрудников.ДокументКорректировки) КАК ДокументКорректировки,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Время КАК Время
	//|ПОМЕСТИТЬ КорректировкаПланаСвернутая
	//|ИЗ
	//|	РегистрСведений.уатКорректировкаПланаРабочегоВремениСотрудников КАК уатКорректировкаПланаРабочегоВремениСотрудников
	//|ГДЕ
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник В(&мсвСотрудники)
	//|	И уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы МЕЖДУ &НачалоПериода И &КонецПериода
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Время
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы КАК ДатаРаботы,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.Смена КАК Смена,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени КАК ВидВремени,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени.ИспользоватьКакРабочееВремя КАК РабочееВремя,
	//|	уатКорректировкаПланаРабочегоВремениСотрудников.ДокументКорректировки КАК Регистратор,
	//|	КорректировкаПланаСвернутая.Время КАК Время
	//|ИЗ
	//|	КорректировкаПланаСвернутая КАК КорректировкаПланаСвернутая
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатКорректировкаПланаРабочегоВремениСотрудников КАК уатКорректировкаПланаРабочегоВремениСотрудников
	//|		ПО КорректировкаПланаСвернутая.Сотрудник = уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник
	//|			И КорректировкаПланаСвернутая.ДатаРаботы = уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы
	//|			И КорректировкаПланаСвернутая.ДокументКорректировки = уатКорректировкаПланаРабочегоВремениСотрудников.ДокументКорректировки");
	//ЗапросКорректировки.УстановитьПараметр("мсвСотрудники", мсвСотрудникиИТС);
	//ЗапросКорректировки.УстановитьПараметр("НачалоПериода", НачалоПериода);
	//ЗапросКорректировки.УстановитьПараметр("КонецПериода",  КонецПериода);
	//тблКорректировки = ЗапросКорректировки.Выполнить().Выгрузить();
	
	// запрос по корректировкам рабочего времени сотрудников
	ЗапросКорректировки = Новый Запрос(
	"ВЫБРАТЬ
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы КАК ДатаРаботы,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Смена КАК Смена,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени КАК ВидВремени,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ВидИспользованияРабочегоВремени.ИспользоватьКакРабочееВремя КАК РабочееВремя,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.ДокументКорректировки КАК Регистратор,
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Время КАК Время
	|ИЗ
	|	РегистрСведений.уатКорректировкаПланаРабочегоВремениСотрудников КАК уатКорректировкаПланаРабочегоВремениСотрудников
	|ГДЕ
	|	уатКорректировкаПланаРабочегоВремениСотрудников.Сотрудник В(&мсвСотрудники)
	|	И уатКорректировкаПланаРабочегоВремениСотрудников.ДатаРаботы МЕЖДУ &НачалоПериода И &КонецПериода");
	ЗапросКорректировки.УстановитьПараметр("мсвСотрудники", мсвСотрудникиИТС);
	ЗапросКорректировки.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросКорректировки.УстановитьПараметр("КонецПериода",  КонецПериода);
	тблКорректировки = ЗапросКорректировки.Выполнить().Выгрузить();
		
	// и наконец, внесение корректировок в рабочие интервалы графиков
	мсвСтрокУдалить = Новый Массив;
	Для Каждого ТекКорректировка Из тблКорректировки Цикл
		// Удаление строк по графику, совпадающих по дате с корректировками - корректировки вытесняют график
		мсвСтрокиПоиска = тблРабочиеИнтервалыГрафиков.НайтиСтроки(
			Новый Структура("Сотрудник, ДатаГрафика", ТекКорректировка.Сотрудник, ТекКорректировка.ДатаРаботы));
		Для Каждого ТекСтрокаПоиска Из мсвСтрокиПоиска Цикл
			Если ТипЗнч(ТекСтрокаПоиска.Регистратор) <> Тип("ДокументСсылка.уатКорректировкаИспользованияРаботникамиРабочегоВремени") Тогда
				мсвСтрокУдалить.Добавить(ТекСтрокаПоиска);
			КонецЕсли;
		КонецЦикла;
		
		// Добавление корректировок в виде интервалов рабочего времени.
		// ! только для видов рабочего времени с установленным флагом "Использовать как рабочее время"
		//Если ТекКорректировка.РабочееВремя Тогда
			Если ЗначениеЗаполнено(ТекКорректировка.Смена) Тогда
				ОбщееВремяСмены = ПродолжительностьСмены(ТекКорректировка.Смена);
				Для Каждого ТекПериодСмены Из ТекКорректировка.Смена.ПериодыСмены Цикл
					НоваяСтрока = тблРабочиеИнтервалыГрафиков.Добавить();
					НоваяСтрока.Сотрудник      = ТекКорректировка.Сотрудник;
					НоваяСтрока.ДатаГрафика    = ТекКорректировка.ДатаРаботы;
					НоваяСтрока.ГрафикРаботы   = ГрафикРаботыСотрудникаНаДату(ТекКорректировка.Сотрудник, ТекКорректировка.ДатаРаботы, КэшГрафикиСотрудников, мсвСотрудникиИТС);
					НоваяСтрока.ВремяНачала    = ТекПериодСмены.ВремяНачала;
					НоваяСтрока.ВремяОкончания = ТекПериодСмены.ВремяОкончания;
					НоваяСтрока.Регистратор    = ТекКорректировка.Регистратор;
					НоваяСтрока.ВидВремени     = ТекКорректировка.ВидВремени;
					
					// Для смен с несколькими интервалами, если время корректировки НЕ соответствует итоговой продолжительности смены,
					// то время нужно распределить по интервалам смены для исключения удвоения, утроения и т.д. часов в обработке РедактированиеРабочегоВремени
					// Если время корректировки соответствует итоговой продолжительности смены, то время нужно подставить из интервалов смены по умолчанию,
					// то есть вообще не нужно заполнять
					Если ТекКорректировка.Время <> ОбщееВремяСмены Тогда
						НоваяСтрока.Время = ТекКорректировка.Время/3600/ТекКорректировка.Смена.ПериодыСмены.Количество();
					КонецЕсли;
				КонецЦикла;
			Иначе
				НоваяСтрока = тблРабочиеИнтервалыГрафиков.Добавить();
				НоваяСтрока.Сотрудник    = ТекКорректировка.Сотрудник;
				НоваяСтрока.ДатаГрафика  = ТекКорректировка.ДатаРаботы;
				НоваяСтрока.ГрафикРаботы = ГрафикРаботыСотрудникаНаДату(ТекКорректировка.Сотрудник, ТекКорректировка.ДатаРаботы, КэшГрафикиСотрудников, мсвСотрудникиИТС);
				НоваяСтрока.Регистратор  = ТекКорректировка.Регистратор;
				НоваяСтрока.ВидВремени   = ТекКорректировка.ВидВремени;
				НоваяСтрока.Время        = ТекКорректировка.Время/3600;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
		тблРабочиеИнтервалыГрафиков.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
КонецПроцедуры

// Функция возвращает график работы сотрудника на указанную дату
//
Функция ГрафикРаботыСотрудникаНаДату(Сотрудник, ДатаРаботы, КэшГрафикиСотрудников = Неопределено, мсвВсеСотрудники = Неопределено) Экспорт
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.уатТС") Тогда
		Возврат Сотрудник.ГрафикРаботы;
	КонецЕсли;
		
	Рез = Неопределено;
	
	Если КэшГрафикиСотрудников = Неопределено Тогда
		ЗапросСведения = Новый Запрос(
		"ВЫБРАТЬ
		|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	уатКадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	уатКадроваяИсторияСотрудников.Период КАК НачалоПериода,
		|	ДАТАВРЕМЯ(1,1,1) КАК КонецПериода
		|ИЗ
		|	РегистрСведений.уатКадроваяИсторияСотрудников КАК уатКадроваяИсторияСотрудников
		|ГДЕ
		|	&ПоВсемСотрудникам ИЛИ уатКадроваяИсторияСотрудников.Сотрудник В(&мсвСотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Период");
		ЗапросСведения.УстановитьПараметр("мсвСотрудники", мсвВсеСотрудники);
		ЗапросСведения.УстановитьПараметр("ПоВсемСотрудникам", мсвВсеСотрудники = Неопределено);
		
		КэшГрафикиСотрудников = ЗапросСведения.Выполнить().Выгрузить();
		
		КоличСтрок = КэшГрафикиСотрудников.Количество();
		Для Сч = 0 По КоличСтрок - 1 Цикл
			Если Сч = КоличСтрок - 1 Тогда
				Прервать;
			КонецЕсли;
			ТекСтрокаСведения  = КэшГрафикиСотрудников[Сч];
			СледСтрокаСведения = КэшГрафикиСотрудников[Сч+1];
			Если ТекСтрокаСведения.Сотрудник = СледСтрокаСведения.Сотрудник Тогда
				ТекСтрокаСведения.КонецПериода = СледСтрокаСведения.НачалоПериода-1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	мсвГрафикиСотрудника = КэшГрафикиСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого ТекГрафикСотрудника Из мсвГрафикиСотрудника Цикл
		Если ДатаРаботы >= НачалоДня(ТекГрафикСотрудника.НачалоПериода)
			И (ТекГрафикСотрудника.КонецПериода = '00010101'
			ИЛИ ДатаРаботы <= КонецДня(ТекГрафикСотрудника.КонецПериода)) Тогда
			
			Рез = ТекГрафикСотрудника.ГрафикРаботы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Функция возвращает таблицу оборотов РН РабочееВремяСотрудников, дополненную колонкой "Подразделение"
// Подразделение заполняется текущим на периоды записей РН подразделением сотрудника по данным РС уатКадроваяИстория 
//
// Параметры:
//  мсвСотрудники	 - Массив - отбор по сотрудникам
//  ДатаНач			 - Дата - Начало периода
//  ДатаКон			 - Дата - Конец периода
//  Организация		 - справочник ссылка - отбор по организации
// 
// Возвращаемое значение:
//   - таблица значений
//
Функция РабочееВремяСотрудниковПоПодразделениям(ДатаНач, ДатаКон, Знач мсвСотрудники = Неопределено, Знач Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	уатРабочееВремяСотрудниковОбороты.ДатаРаботы КАК ДатаРаботы,
	|	уатРабочееВремяСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	СУММА(уатРабочееВремяСотрудниковОбороты.ДнейОборот) КАК ДнейОборот,
	|	СУММА(уатРабочееВремяСотрудниковОбороты.ВремяОборот) КАК ВремяОборот,
	|	уатРабочееВремяСотрудниковОбороты.Регистратор.Подразделение КАК Подразделение,
	|	уатРабочееВремяСотрудниковОбороты.Регистратор ССЫЛКА Документ.уатПутевойЛист
	|		ИЛИ уатРабочееВремяСотрудниковОбороты.Регистратор ССЫЛКА Документ.уатРемонтныйЛист КАК ЭтоПЛРЛ
	|ИЗ
	|	РегистрНакопления.уатРабочееВремяСотрудников.Обороты(
	|			ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -2),
	|			ДОБАВИТЬКДАТЕ(&ДатаКон, МЕСЯЦ, 2),
	|			Регистратор,
	|			(&Организация = НЕОПРЕДЕЛЕНО
	|				ИЛИ Организация = &Организация)
	|				И (&мсвСотрудникиНеопределено
	|					ИЛИ Сотрудник В (&мсвСотрудники))) КАК уатРабочееВремяСотрудниковОбороты
	|ГДЕ
	|	уатРабочееВремяСотрудниковОбороты.ДатаРаботы МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРабочееВремяСотрудниковОбороты.ВидИспользованияРабочегоВремени,
	|	уатРабочееВремяСотрудниковОбороты.ДатаРаботы,
	|	уатРабочееВремяСотрудниковОбороты.Сотрудник,
	|	уатРабочееВремяСотрудниковОбороты.Регистратор");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("мсвСотрудники", мсвСотрудники);
	Запрос.УстановитьПараметр("мсвСотрудникиНеопределено", мсвСотрудники = Неопределено);
	Запрос.УстановитьПараметр("Организация", Организация);
	тблРабочееВремя = Запрос.Выполнить().Выгрузить();
	
	Если мсвСотрудники = Неопределено И тблРабочееВремя.Количество() > 0 Тогда
		мсвСотрудники = тблРабочееВремя.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	ЗапросКадроваяИстория = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатКадроваяИсторияСотрудников.Период КАК Период,
	|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	уатКадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	|	уатКадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников КАК уатКадроваяИсторияСотрудников
	|ГДЕ
	|	(&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатКадроваяИсторияСотрудников.Организация = &Организация)
	|	И (&мсвСотрудникиНеопределено
	|			ИЛИ уатКадроваяИсторияСотрудников.Сотрудник В (&мсвСотрудники))
	|	И уатКадроваяИсторияСотрудников.Период <= &ДатаКон");
	ЗапросКадроваяИстория.УстановитьПараметр("ДатаКон", ДатаКон);
	ЗапросКадроваяИстория.УстановитьПараметр("мсвСотрудники", мсвСотрудники);
	ЗапросКадроваяИстория.УстановитьПараметр("мсвСотрудникиНеопределено", мсвСотрудники = Неопределено);
	ЗапросКадроваяИстория.УстановитьПараметр("Организация", Организация);
	тблКадроваяИстория = ЗапросКадроваяИстория.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		флНачислятьЗарплатуПоПодразделениюДокумента = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьЗарплатуПоПодразделениюДокумента);
	Иначе
		флНачислятьЗарплатуПоПодразделениюДокумента = Ложь;
	КонецЕсли;
	
	тблРабочееВремя.Колонки.Добавить("ГрафикРаботы",  Новый ОписаниеТипов("СправочникСсылка.Календари"));
	Для Каждого ТекСтрока Из тблРабочееВремя Цикл
		МаксПериод = '00010101';
		ТекПодразделение = Неопределено;
		ТекГрафикРаботы = Неопределено;
		
		мсвКИ = тблКадроваяИстория.НайтиСтроки(Новый Структура("Сотрудник", ТекСтрока.Сотрудник));
		Для Каждого ТекСтрокаКИ Из мсвКИ Цикл
			Если ТекСтрокаКИ.Период > МаксПериод И ТекСтрокаКИ.Период <= ТекСтрока.ДатаРаботы Тогда
				ТекПодразделение = ТекСтрокаКИ.Подразделение;
				ТекГрафикРаботы = ТекСтрокаКИ.ГрафикРаботы;
				МаксПериод = ТекСтрокаКИ.Период;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекПодразделение) Тогда
			Если ТекСтрока.ЭтоПЛРЛ И флНачислятьЗарплатуПоПодразделениюДокумента Тогда
				// оставляем подразделение документа
			Иначе
				ТекСтрока.Подразделение = ТекПодразделение;
			КонецЕсли;
			ТекСтрока.ГрафикРаботы  = ТекГрафикРаботы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат тблРабочееВремя;
	
КонецФункции

// Функция возвращает общую продолжительность смены
//
Функция ПродолжительностьСмены(Смена) Экспорт
	Если НЕ ЗначениеЗаполнено(Смена) Тогда
		Возврат 0;
	КонецЕсли;
	
	Рез = 0;
	Для Каждого ТекПериод Из Смена.ПериодыСмены Цикл
		Если ТекПериод.ВремяНачала > ТекПериод.ВремяОкончания Тогда
			Рез = Рез + ((ТекПериод.ВремяОкончания + 24*3600) - ТекПериод.ВремяНачала);
		Иначе
			Рез = Рез + (ТекПериод.ВремяОкончания - ТекПериод.ВремяНачала);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

#КонецОбласти


#Область ГСМ

// Возвращает значение реквизитов ГСМ из регистра сведений
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПрочитатьРеквизитГСМ(ГСМ, ИмяРеквизита="") ЭКСПОРТ
	Перем ЗначениеРеквизита;
	
	ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГСМ.Получить(Новый Структура("Номенклатура",ГСМ));
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат ВыборкаЗаписей;
	Иначе	
		ВыборкаЗаписей.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Возврат ЗначениеРеквизита;
	КонецЕсли;	
КонецФункции // уатПрочитатьРеквизитГСМ()

// Возвращает количество литров по талону ГСМ
//					
// Возвращаемое значение: ЗначениеРеквизита
Функция уатКоличествоЛитровТалонаГСМ(Дата, АЗС, ГСМ, КоличествоТалонов) ЭКСПОРТ
	
	Если ТипЗнч(ГСМ) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГСМ.Получить(Новый Структура("Номенклатура",ГСМ));
		
	ИначеЕсли ТипЗнч(ГСМ) = Тип("Структура") Тогда
		
		ВыборкаЗаписей = ГСМ;
		
	КонецЕсли;
	
	Если ВыборкаЗаписей <> Неопределено Тогда
		Если ВыборкаЗаписей.ЛитровыйТалон Тогда
			Результат = ВыборкаЗаписей.НоминалТалона * КоличествоТалонов;
		Иначе
			// определим последнюю цену ГСМ
			мЦена = уатНайтиЦенуНоменклатуры(Дата, ВыборкаЗаписей.ГСМТалона, АЗС).Цена;
			Результат = ?(мЦена=0, 0, окр(ВыборкаЗаписей.НоминалТалона * КоличествоТалонов / мЦена, 3));
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // уатКоличествоЛитровТалонаГСМ()

// Возвращает таблицу аналогов ГСМ
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПолучитьАналогиГСМ(ГСМ, ГруппаГСМ=Неопределено) ЭКСПОРТ
	
	Если Тип("ТаблицаЗначений") <> ТипЗнч(ГСМ) Тогда
		ТабГСМ = Новый ТаблицаЗначений;
		ТабГСМ.Колонки.Добавить("ГСМ");
		НоваяСтрока 	= ТабГСМ.Добавить();
		НоваяСтрока.ГСМ = ГСМ;
	Иначе
		ТабГСМ = ГСМ;
	КонецЕсли;	
	
	ТаблицаАналоги = Новый ТаблицаЗначений;
	ТаблицаАналоги.Колонки.Добавить("ГСМ");
	ТаблицаАналоги.Колонки.Добавить("Аналог");
	ТаблицаАналоги.Колонки.Добавить("ТС");
	Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
		ТаблицаАналоги.Колонки.Добавить("АналогТоплива");
		ТаблицаАналоги.Колонки.Добавить("Литровый");
		ТаблицаАналоги.Колонки.Добавить("Номинал");
	КонецЕсли;	
	
	ЕстьТС = ТабГСМ.Колонки.Найти("ТС") <> Неопределено;
	Для Каждого Строка Из ТабГСМ Цикл
		
		Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатНоменклатураГСМ.Номенклатура КАК Аналог,
			|	уатАналогиГСМ.Аналог КАК АналогТоплива,
			|	уатАналогиГСМ.ГСМ КАК ГСМ,
			|	уатНоменклатураГСМ.ЛитровыйТалон КАК Литровый,
			|	уатНоменклатураГСМ.НоминалТалона КАК Номинал
			|ИЗ
			|	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатАналогиГСМ.Аналог = уатНоменклатураГСМ.ГСМТалона
			|
			|ГДЕ
			|	уатАналогиГСМ.ГСМ = &ГСМ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ГСМ", Строка.ГСМТалона);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
				
				НоваяСтрока = ТаблицаАналоги.Добавить();
				НоваяСтрока.ГСМ 			= СтрокаЗапроса.ГСМ;
				НоваяСтрока.Аналог 			= СтрокаЗапроса.Аналог;
				НоваяСтрока.АналогТоплива 	= СтрокаЗапроса.АналогТоплива;
				НоваяСтрока.Литровый 		= СтрокаЗапроса.Литровый;
				НоваяСтрока.Номинал 		= СтрокаЗапроса.Номинал;
				Если ЕстьТС Тогда
					НоваяСтрока.ТС 			= Строка.ТС;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	АналогиГСМ.Аналог,
			|	АналогиГСМ.ГСМ КАК ГСМ
			|ИЗ
			|	РегистрСведений.уатАналогиГСМ КАК АналогиГСМ
			|
			|ГДЕ
			|	АналогиГСМ.ГСМ = &ГСМ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ГСМ", Строка.ГСМ);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
				
				НоваяСтрока = ТаблицаАналоги.Добавить();
				НоваяСтрока.ГСМ 			= СтрокаЗапроса.ГСМ;
				НоваяСтрока.Аналог 			= СтрокаЗапроса.Аналог;
				Если ЕстьТС Тогда
					НоваяСтрока.ТС 			= Строка.ТС;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаАналоги;
	
КонецФункции // уатПолучитьАналогиГСМ()

// Возвращает таблицу заправок по ПЛ
// Параметры: 	ПутевойЛист - ссылка на документ
// Возвращаемое значение: таблица документов Заправка ГСМ
//
Функция уатПолучитьЗаправкиДляПЛ(ПутевойЛист) ЭКСПОРТ
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМЗаправки.Ссылка.Дата КАК Дата,
	|	уатЗаправкаГСМЗаправки.Ссылка.Номер КАК Номер,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ КАК ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.Страна КАК Страна,
	|	уатЗаправкаГСМЗаправки.Дата КАК ДатаЗаправки,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
	|	уатЗаправкаГСМЗаправки.Цена КАК Цена,
	|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Сумма КАК Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
	|	уатЗаправкаГСМЗаправки.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист КАК ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Ссылка,
	|	уатЗаправкаГСМЗаправки.НомерСтроки КАК НомерСтроки,
	|	уатЗаправкаГСМЗаправки.НомераТалонов КАК НомераТалонов,
	|	уатЗаправкаГСМЗаправки.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК Всего,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
	|	И уатЗаправкаГСМЗаправки.ПутевойЛист <> НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("ПутевойЛист", ?(ЗначениеЗаполнено(ПутевойЛист), ПутевойЛист, НЕОПРЕДЕЛЕНО));
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПолучитьЗаправкиДляПЛ

// Функция возвращает остаток ГСМ на автомобиле
// Параметры: МоментВремени - время на которое определяется остаток
// ТС
// ГСМ
// ПутевойЛист - параметр нужно передавать только в случае, если нужен остаток на выезд по путевому листу.
//               Если этот параметр передан, то производится контроль заправок  
Функция уатОстатокГСМнаТС(МоментВремени, ТС, ГСМ, ПутевойЛист = Неопределено) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	Запрос.Текст=
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА (ОстаткиГСМ.КоличествоОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиГСМ.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(&Момент, ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|";
	
	// получаем аналоги
	тзАналогиГСМ = уатПолучитьАналогиГСМ(ГСМ);
	
	// добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ 			= ГСМ;
	НоваяСтрока.Аналог 			= ГСМ;
	
	Запрос.УстановитьПараметр("Момент",МоментВремени);
	Запрос.УстановитьПараметр("ГСМ",тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС",ТС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	Результат = ВыборкаЗапроса.Количество;
	
	Возврат Результат;
	
КонецФункции // уатОстатокГСМнаТС       

// Функция возвращает таблицу остатков ТЖ на ТС
// Параметры:МоментВремени - время на которое определяется остаток
// ТС
Функция уатОстатокТЖнаТС(МоментВремени, ТС) ЭКСПОРТ
	тблНормыРасходаТЖ = ПолучитьНормыРасходаТЖ(ТС, МоментВремени);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыРасходаТЖ.ГСМ КАК ТЖ
	|ПОМЕСТИТЬ НормыРасходаТЖ
	|ИЗ
	|	&тблНормыРасходаТЖ КАК НормыРасходаТЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(уатОстаткиТЖнаТС.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(НормыРасходаТЖ.ТЖ, уатОстаткиТЖнаТС.ТЖ) КАК ТЖ
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(&Момент, ТС = &ТС) КАК уатОстаткиТЖнаТС
	|		ПОЛНОЕ СОЕДИНЕНИЕ НормыРасходаТЖ КАК НормыРасходаТЖ
	|		ПО уатОстаткиТЖнаТС.ТЖ = НормыРасходаТЖ.ТЖ";
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("тблНормыРасходаТЖ", тблНормыРасходаТЖ);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Возврат Рез;
КонецФункции // уатОстатокТЖнаТС       

// Функция возвращает таблицу норм расхода ТЖ на указанную дату среза.
//	Сначала ищет нормы на ТС, если не находит, то продолжает искать по модели ТС.
//
Функция ПолучитьНормыРасходаТЖ(ТС, ЗаданнаяДата, ТЖ = Неопределено)  Экспорт
	мсвТС = Новый Массив;
	Если ТипЗнч(ТС) = Тип("Массив") Тогда
		Для Каждого ТекТС Из ТС Цикл
			мсвТС.Добавить(ТекТС);
			мсвТС.Добавить(ТекТС.Модель);
		КонецЦикла;
	Иначе
		мсвТС.Добавить(ТС);
		мсвТС.Добавить(ТС.Модель);
	КонецЕсли;
	
	// запрос по ТС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыРасходаТехническихЖидкостей.Период КАК Период,
	|";
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
	Запрос.Текст = Запрос.Текст + "НормыРасходаТехническихЖидкостей.МодельТС КАК МодельТС,
	|	NULL КАК ТС,";
	Иначе
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатМоделиТС
	|			ТОГДА НормыРасходаТехническихЖидкостей.МодельТС
	|		ИНАЧЕ НормыРасходаТехническихЖидкостей.МодельТС.Модель
	|	КОНЕЦ КАК МодельТС,
	|ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатТС
	|			ТОГДА НормыРасходаТехническихЖидкостей.МодельТС
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ТС,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	НормыРасходаТехническихЖидкостей.ГСМ,
	|	НормыРасходаТехническихЖидкостей.Норма,
	|	НормыРасходаТехническихЖидкостей.НормаНаМоточас,
	|	НормыРасходаТехническихЖидкостей.ЛинейнаяНорма,
	|	НормыРасходаТехническихЖидкостей.НормаНаДопТопливо,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.Норма = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НормаНаОснТопливо,
	|	";
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
	Запрос.Текст = Запрос.Текст + "
	|1 КАК Приоритет
	|";
	Иначе
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатТС
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "ИЗ
	|	РегистрСведений.уатНормыРасходаТехническихЖидкостей.СрезПоследних(
	|			&Период,
	|			МодельТС В (&ТСМодели)
	|			И ГСМ = &ТЖ
	|			) КАК НормыРасходаТехническихЖидкостей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	Запрос.УстановитьПараметр("ТСМодели", мсвТС);
	Запрос.УстановитьПараметр("ТЖ", ТЖ);
	Если НЕ ЗначениеЗаполнено(ТЖ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ГСМ = &ТЖ", "");
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	// удаляем лишние строки, поскольку приоритет норм для ТС выше, чем для моделей
	мсвСтрокУдалить = Новый Массив;
	Если Рез.Количество() > 1 Тогда
		Для Каждого ТекСтрокаНормы Из Рез Цикл
			// строки с приоритетом = 2 (это модели)
			Если ТекСтрокаНормы.Приоритет = 2 Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСтрокиПоиска = Рез.НайтиСтроки(Новый Структура("МодельТС, ГСМ, Приоритет", ТекСтрокаНормы.МодельТС, ТекСтрокаНормы.ГСМ, 2));
			Для Каждого ТекСтрокаЛишняя Из мсвСтрокиПоиска Цикл //нашли лишние строки по модели
				мсвСтрокУдалить.Добавить(ТекСтрокаЛишняя);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для Каждого ТекСтрокаДляУдаления Из мсвСтрокУдалить Цикл
		Рез.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции // уатПолучитьНормыРасходаТЖ

// Функция возвращает список видов заправок ГСМ
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция СписокВидовЗаправок() ЭКСПОРТ
	
	мСписокЗаправок = Новый СписокЗначений;
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны);
	
	Возврат мСписокЗаправок;
	
КонецФункции // СписокВидовЗаправок       

// Возвращает таблицу сливов по ПЛ
// Параметры: 	ПутевойЛист - ссылка на документ
// Возвращаемое значение: таблица документов Слив ГСМ
//
Функция уатПолучитьСливыДляПЛ(ПутевойЛист) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСливГСМ.Дата КАК Дата,
	|	уатСливГСМ.Номер КАК Номер,
	|	уатСливГСМ.ВидОперации КАК ВидОперации,
	|	уатСливГСМ.АЗС КАК АЗС,
	|	уатСливГСМ.ТС КАК ТС,
	|	уатСливГСМ.ГСМ КАК ГСМ,
	|	уатСливГСМ.Количество КАК Количество,
	|	уатСливГСМ.ПутевойЛист КАК ПутевойЛист,
	|	уатСливГСМ.ПутевойЛистПриемник КАК ПутевойЛистПриемник,
	|	уатСливГСМ.Ссылка КАК Ссылка,
	|	уатСливГСМ.Проведен КАК Проведен,
	|	уатСливГСМ.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА уатСливГСМ.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатСливГСМ.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.уатСливГСМ КАК уатСливГСМ
	|ГДЕ
	|	уатСливГСМ.ПутевойЛист = &ПутевойЛист
	|	И уатСливГСМ.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|	И НЕ уатСливГСМ.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу сливов по ПЛ на ТС
// Параметры: 	ПутевойЛист - ссылка на документ
// Возвращаемое значение: таблица документов Слив ГСМ
//
Функция уатПолучитьСливыНаТСДляПЛ(ПутевойЛист) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСливГСМ.Дата КАК Дата,
	|	уатСливГСМ.Номер КАК Номер,
	|	уатСливГСМ.ВидОперации КАК ВидОперации,
	|	уатСливГСМ.АЗС КАК АЗС,
	|	уатСливГСМ.ТС КАК ТС,
	|	уатСливГСМ.ГСМ КАК ГСМ,
	|	уатСливГСМ.Количество КАК Количество,
	|	уатСливГСМ.ПутевойЛист КАК ПутевойЛист,
	|	уатСливГСМ.ПутевойЛистПриемник КАК ПутевойЛистПриемник,
	|	уатСливГСМ.Ссылка КАК Ссылка,
	|	уатСливГСМ.Проведен КАК Проведен,
	|	уатСливГСМ.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА уатСливГСМ.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатСливГСМ.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.уатСливГСМ КАК уатСливГСМ
	|ГДЕ
	|	уатСливГСМ.ПутевойЛистПриемник = &ПутевойЛист
	|	И уатСливГСМ.ПутевойЛистПриемник <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|	И уатСливГСМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийСливГСМ.НаТС)
	|	И НЕ уатСливГСМ.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает результат запроса по остаткам ГСМ по партиям
//
Функция уатПолучитьОстаткиПартийГСМ(МоментВремени, СпособОценкиМПЗ, ТС, ГСМ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиГСМ.Партия КАК Партия,
	|	ОстаткиГСМ.ТС КАК ТС,
	|	ОстаткиГСМ.ГСМ КАК ГСМ,
	|	ОстаткиГСМ.Организация КАК Организация,
	|	ОстаткиГСМ.Подразделение КАК Подразделение,
	|	ОстаткиГСМ.Колонна КАК Колонна,
	|	ЕСТЬNULL(ОстаткиГСМ.КоличествоОстаток, 0) КАК Количество,
	|	ОстаткиГСМ.СтоимостьОстаток КАК Стоимость,
	|	ОстаткиГСМ.СтоимостьУпрОстаток КАК СтоимостьУпр,
	|	ОстаткиГСМ.СуммаНДСОстаток КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
	|			&Момент,
	|			ГСМ В (&ГСМ)
	|				И ТС = &ТС) КАК ОстаткиГСМ
	|ГДЕ
	|	ОстаткиГСМ.КоличествоОстаток > 0";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата УБЫВ";
	КонецЕсли;
	
	// получаем аналоги
	тзАналогиГСМ = уатПолучитьАналогиГСМ(ГСМ);
	
	// добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ГСМ;
	НоваяСтрока.Аналог = ГСМ;
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ГСМ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Возврат Запрос.Выполнить();
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГСМ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияГСМ - Сформированная таблица значений,
//  ПоДокументу - булево, Истина - берем данные из документа и рассчитываем стоимость. Ложь - читаем данные из регистра
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция уатПодготовитьТаблицуСписанияГСМ(ДокументОбъект, ТаблицаДляСписанияГСМ, ПоДокументу, вхСредняяЦена = 0,
		СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияГСМ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ГСМ");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Организация");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Подразделение");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Колонна");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Стоимость");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СуммаНДС");
	
	Если ПоДокументу Тогда
		// Заполняем таблицу по данным документа. Рассчитываем стоимость ГСМ
		// получим результат запроса по таблице ГСМ в пут. листе
		РезультатЗапросаПоГСМ = Новый Запрос();
		
		МоментВремениОстПартий = ДокументОбъект.МоментВремени();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	уатПутевойЛистРасходГСМ.Ссылка.ДатаЗакрытия КАК Дата
			|ИЗ
			|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен = &Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Активен",Истина);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			РезультатЗапросаПоГСМ.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
			
			тблВыборкаЗапросаПоГСМ = ДокументОбъект.РасходГСМ.Выгрузить();
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Дата");
			тблВыборкаЗапросаПоГСМ.Колонки.РасходПоФакту.Имя = "СписываемоеКоличество";
			тблВыборкаЗапросаПоГСМ.ЗаполнитьЗначения(ДокументОбъект.ДатаЗакрытия, "Дата");
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаЗакрытия, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ 
				ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатСливГСМ.ТС,
			|	уатСливГСМ.ГСМ,
			|	уатСливГСМ.АЗС.Контрагент_Склад КАК Склад,
			|	уатСливГСМ.Количество КАК СписываемоеКоличество,
			|	уатСливГСМ.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатСливГСМ.Дата
			|ИЗ
			|	Документ.уатСливГСМ КАК уатСливГСМ
			|
			|ГДЕ
			|	уатСливГСМ.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент",1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатОперацииСТехническимиЖидкостями") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатОперацииСТехническимиЖидкостями") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатОперацииСТехническимиЖидкостями.ТС,
			|	уатОперацииСТехническимиЖидкостями.Номенклатура КАК ГСМ,
			|	уатОперацииСТехническимиЖидкостями.Ссылка.Склад КАК Склад,
			|	уатОперацииСТехническимиЖидкостями.Количество КАК СписываемоеКоличество,
			|	уатОперацииСТехническимиЖидкостями.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатОперацииСТехническимиЖидкостями.Ссылка.Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостями
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатОперацииСТехническимиЖидкостями.Номенклатура = уатНоменклатураГСМ.Номенклатура
			|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ) КАК уатМестонахождениеТС
			|		ПО уатОперацииСТехническимиЖидкостями.ТС = уатМестонахождениеТС.ТС
			|ГДЕ
			|	уатОперацииСТехническимиЖидкостями.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент", 1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		КонецЕсли;
			
		СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
		
		// Перебираем строки ГСМ, который надо списать
		Для Каждого ВыборкаЗапросаПоГСМ Из тблВыборкаЗапросаПоГСМ Цикл
			НадоСписатьКоличество = ВыборкаЗапросаПоГСМ.СписываемоеКоличество;
			
			// Получение остатков ГСМ по партиям
			РезультатЗапросаПартииГСМ = уатПолучитьОстаткиПартийГСМ(МоментВремениОстПартий, СпособОценкиМПЗ, 
				ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			ВыборкаЗапросаПартииГСМ = РезультатЗапросаПартииГСМ.Выбрать();
			
			// КоличествоОстаток = уатОстатокГСМнаТС(ДокументОбъект.МоментВремени(), ВыборкаЗапросаПоГСМ.ТС, 
			//	ВыборкаЗапросаПоГСМ.ГСМ);
			//Если НадоСписатьКоличество > КоличествоОстаток Тогда
			//	//Расход по ТС превышает остаток
			//	ВсеОК=Ложь;
			//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество + ", остаток: " + 
			//		КоличествоОстаток;
			//КонецЕсли; 
			
			Если ВсеОК Тогда
				
				НадоСписатьСумму = 0;
				НадоСписатьСуммуУпр = 0;
				НадоСписатьСуммуНДС = 0;
				
				Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					Попытка
						мТаблицаДляСуммы	= РезультатЗапросаПартииГСМ.Выгрузить();
						НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") *
							НадоСписатьКоличество;
						НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") *
							НадоСписатьКоличество;
						НадоСписатьСуммуНДС = мТаблицаДляСуммы.Итог("СуммаНДС") / мТаблицаДляСуммы.Итог("Количество") *
							НадоСписатьКоличество;
					Исключение
					КонецПопытки;	
				КонецЕсли;
				
				Пока НадоСписатьКоличество > 0 Цикл
					Если ВыборкаЗапросаПартииГСМ.Следующий() Тогда
						мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииГСМ.Количество);
						мКоличество = ?(мКоличество < 0, 0, мКоличество);
						
						Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
							мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииГСМ.Стоимость);
							мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииГСМ.СтоимостьУпр);
							мСуммаНДС = Мин(НадоСписатьСуммуНДС, ВыборкаЗапросаПартииГСМ.СуммаНДС);
						Иначе
							Если ВыборкаЗапросаПартииГСМ.Количество = 0 
								ИЛИ ВыборкаЗапросаПартииГСМ.Количество < НадоСписатьКоличество Тогда
								мСтоимость = ВыборкаЗапросаПартииГСМ.Стоимость;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр;
								мСуммаНДС = ВыборкаЗапросаПартииГСМ.СуммаНДС;
							Иначе	
								мСтоимость = ВыборкаЗапросаПартииГСМ.Стоимость * НадоСписатьКоличество / 
									ВыборкаЗапросаПартииГСМ.Количество;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр * НадоСписатьКоличество / 
									ВыборкаЗапросаПартииГСМ.Количество;
								// мСтоимостьУпр = мСтоимость;
								мСуммаНДС = ВыборкаЗапросаПартииГСМ.СуммаНДС * НадоСписатьКоличество / 
									ВыборкаЗапросаПартииГСМ.Количество;
							КонецЕсли;
							
						КонецЕсли;      
						
						Если мКоличество > 0 Тогда
							НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
							НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
							НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
							НоваяСтрока.Партия = ВыборкаЗапросаПартииГСМ.Партия;
							НоваяСтрока.ГСМ = ВыборкаЗапросаПартииГСМ.ГСМ;
							НоваяСтрока.Колонна = ВыборкаЗапросаПартииГСМ.Колонна;
							НоваяСтрока.Организация = ВыборкаЗапросаПартииГСМ.Организация;
							НоваяСтрока.Подразделение = ВыборкаЗапросаПартииГСМ.Подразделение;
							НоваяСтрока.Количество = мКоличество;
							НоваяСтрока.Стоимость = мСтоимость;	
							НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
							НоваяСтрока.СуммаНДС = мСуммаНДС;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ")
								ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатОперацииСТехническимиЖидкостями")
								ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатОперацииСТехническимиЖидкостями") Тогда
								
								НоваяСтрока.Склад		 = ВыборкаЗапросаПоГСМ.Склад;
								НоваяСтрока.Номенклатура = ВыборкаЗапросаПартииГСМ.ГСМ;
								НоваяСтрока.Сумма		 = мСтоимость;
								НоваяСтрока.Коэффициент	 = ВыборкаЗапросаПоГСМ.Коэффициент;
								
							КонецЕсли;	
							
							мСписаноКоличество = мСписаноКоличество + НоваяСтрока.Количество;
							мСписаноСтоимость  = мСписаноСтоимость + НоваяСтрока.Стоимость;
						КонецЕсли;
						
						НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
						НадоСписатьСумму      = НадоСписатьСумму - мСтоимость;
						НадоСписатьСуммуУпр   = НадоСписатьСуммуУпр - мСтоимостьУпр;
						НадоСписатьСуммуНДС   = НадоСписатьСуммуНДС - мСуммаНДС;
						
					Иначе
						НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
						НоваяСтрока.Партия = Неопределено;
						НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
						НоваяСтрока.Количество = НадоСписатьКоличество;
						НоваяСтрока.Стоимость = НадоСписатьСумму;	
						НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
						НоваяСтрока.СуммаНДС = НадоСписатьСуммуНДС;
						
						НадоСписатьКоличество = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
		
	Иначе
		
		// Заполняем таблицу по движениям регистра документа. Стоимость ГСМ берем из регистра
		
		РезультатЗапросаПоГСМ 		= Новый Запрос();
		РезультатЗапросаПоГСМ.Текст	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатОстаткиГСМнаТС.ТС,
		|	уатОстаткиГСМнаТС.ГСМ,
		|	уатОстаткиГСМнаТС.Организация,
		|	уатОстаткиГСМнаТС.Подразделение,
		|	уатОстаткиГСМнаТС.Колонна,
		|	уатОстаткиГСМнаТС.Количество,
		|	уатОстаткиГСМнаТС.Стоимость,
		|	уатОстаткиГСМнаТС.СтоимостьУпр,
		|	уатОстаткиГСМнаТС.СуммаНДС
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	уатОстаткиГСМнаТС.Регистратор = &Ссылка";
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		// Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
			НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
			НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
			НоваяСтрока.Организация = ВыборкаЗапросаПоГСМ.Организация;
			НоваяСтрока.Подразделение = ВыборкаЗапросаПоГСМ.Подразделение;
			НоваяСтрока.Колонна = ВыборкаЗапросаПоГСМ.Колонна;
			НоваяСтрока.Количество = ВыборкаЗапросаПоГСМ.Количество;
			НоваяСтрока.Стоимость = ВыборкаЗапросаПоГСМ.Стоимость;
			НоваяСтрока.СтоимостьУпр = ВыборкаЗапросаПоГСМ.СтоимостьУпр;
			НоваяСтрока.СуммаНДС = ВыборкаЗапросаПоГСМ.СуммаНДС;
		КонецЦикла; 
		
	КонецЕсли;
	
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, 
		ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из ТаблицаДляСписанияГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()

#КонецОбласти


#Область ТопливныеКарты

// Возвращает пластиковую карту, закрепленную за ТС или водителем
// Параметры: ТС
// Водитель
// КемВыдана 
// Возвращаемое значение: Пластиковая карта
Функция уатПластиковаяКартаТСВодителя(ТС, Водитель, КемВыдана = Неопределено, Знач Дата = Неопределено, НужнаНеПросроченнаяКарта = Истина) ЭКСПОРТ
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", Дата);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПластиковыеКарты.Ссылка КАК Ссылка,
	|	уатПластиковыеКарты.Основная КАК Основная,
	|	уатИсторияПеремещенияТопливныхКартСрезПоследних.КомуВыдана КАК КомуВыдана,
	|	уатПластиковыеКарты.КемВыдана КАК КемВыдана,
	|	уатПластиковыеКарты.ПинКод КАК ПинКод,
	|	уатПластиковыеКарты.ДатаВыдачи КАК ДатаВыдачи,
	|	уатПластиковыеКарты.ПометкаУдаления КАК ПометкаУдаления,
	|	уатПластиковыеКарты.Статус КАК Статус,
	|	уатПластиковыеКарты.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ втКарты
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(&Дата, ) КАК уатИсторияПеремещенияТопливныхКартСрезПоследних
	|		ПО уатПластиковыеКарты.Ссылка = уатИсторияПеремещенияТопливныхКартСрезПоследних.Карта
	|ГДЕ
	|	НЕ уатПластиковыеКарты.ПометкаУдаления
	|	И (уатПластиковыеКарты.Статус.Действует = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКарты.Ссылка КАК ПластиковаяКарта,
	|	втКарты.Основная КАК Основная,
	|	ЛОЖЬ КАК флагТСВладелец
	|ИЗ
	|	втКарты КАК втКарты
	|ГДЕ
	|	(втКарты.КомуВыдана = &ТС
	|			ИЛИ втКарты.КомуВыдана = &Водитель)";
	
	Если КемВыдана <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	втКарты.КемВыдана = &КемВыдана";
		Запрос.УстановитьПараметр("КемВыдана", КемВыдана);
	КонецЕсли;
	
	Если НужнаНеПросроченнаяКарта Тогда
		ТекстЗапроса = ТекстЗапроса + " И ВЫБОР
		|			КОГДА втКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА втКарты.ДатаОкончания >= &Дата
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + " 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втКарты.Ссылка,
	|	втКарты.Основная,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКарты КАК втКарты
	|		ПО уатСоставТС.ВСоставе = втКарты.КомуВыдана
	|		И уатСоставТС.ТС = &ТС";
	
	Если КемВыдана <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	втКарты.КемВыдана = &КемВыдана";
		Запрос.УстановитьПараметр("КемВыдана", КемВыдана);
	КонецЕсли;
	
	Если НужнаНеПросроченнаяКарта Тогда
		ТекстЗапроса = ТекстЗапроса + " И ВЫБОР
		|			КОГДА втКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА втКарты.ДатаОкончания >= &Дата
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	флагТСВладелец,
	|	Основная УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТС",ТС);
	Запрос.УстановитьПараметр("Водитель",Водитель);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() Тогда
		
		Результат = РезультатЗапроса[0].ПластиковаяКарта;
		
	Иначе
		
		Результат = Справочники.уатПластиковыеКарты.ПустаяСсылка();
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатПластиковаяКартаТСВодителя

// Возвращает ТС или водителя, за которыми закреплена пластиковая карта
// Возвращаемое значение: ТС или водитель
Функция уатВладелецПластиковойКарты(ПластиковаяКарта, Знач Дата = Неопределено) ЭКСПОРТ
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос=Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатИсторияПеремещенияТопливныхКартСрезПоследних.КомуВыдана КАК КомуВыдана
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(&Дата, Карта = &ПластиковаяКарта) КАК уатИсторияПеремещенияТопливныхКартСрезПоследних
	|		ПО уатПластиковыеКарты.Ссылка = уатИсторияПеремещенияТопливныхКартСрезПоследних.Карта
	|			И (уатПластиковыеКарты.Ссылка = &ПластиковаяКарта)";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПластиковаяКарта",ПластиковаяКарта);
	Запрос.УстановитьПараметр("Дата",Дата);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		Результат = ВыборкаЗапроса.КомуВыдана;
	Иначе
		Результат = Неопределено;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатВладелецПластиковойКарты

// Функция возвращает список топливных карт.
//
Функция уатСписокТопливныхКарт(ВладельцыКарт, Знач Дата = Неопределено, КемВыдана = Неопределено) ЭКСПОРТ
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатИсторияПеремещенияТопливныхКартСрезПоследних.Карта КАК Карта,
	               |	уатИсторияПеремещенияТопливныхКартСрезПоследних.Карта.Код КАК Код
	               |ИЗ
	               |	РегистрСведений.уатИсторияПеремещенияТопливныхКарт.СрезПоследних(&Дата, ) КАК уатИсторияПеремещенияТопливныхКартСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	               |		ПО уатИсторияПеремещенияТопливныхКартСрезПоследних.Карта = уатПластиковыеКарты.Ссылка
	               |			И (НЕ уатПластиковыеКарты.ПометкаУдаления)
	               |			И (уатИсторияПеремещенияТопливныхКартСрезПоследних.КомуВыдана В (&ВладельцыКарт))
	               |			И (уатПластиковыеКарты.Статус.Действует = ИСТИНА)
	               |			И (ВЫБОР
	               |				КОГДА уатПластиковыеКарты.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |					ТОГДА уатПластиковыеКарты.ДатаОкончания >= &Дата
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)";
	Если КемВыдана <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (уатПластиковыеКарты.КемВыдана = &КемВыдана)";
		Запрос.УстановитьПараметр("КемВыдана", КемВыдана);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладельцыКарт", ВладельцыКарт);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	СписокТК = Новый СписокЗначений;   
	Выборка  = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокТК.Добавить(Выборка.Карта, Выборка.Код);
	КонецЦикла;
	Возврат СписокТК;
	
КонецФункции

Функция ПолучитьВладельцаТС(ТС) ЭКСПОРТ
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСоставТС.ВСоставе КАК ТС
	               |ИЗ
	               |	РегистрСведений.уатСоставТС КАК уатСоставТС
	               |ГДЕ
	               |	уатСоставТС.ТС = &ТС";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ТС;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область ДоходыРасходы

// Функция находит план затрат
//
// Параметры:
//  Организация - ссылка справочника Организации
//  Подразделение - ссылка справочника ПодразделениеОрганизации
//  ТС     - автомобиль
//  Колонна - ссылка справочника уатКолонна
//
// Возвращаемое значение: - ссылка справочника уатПланыПримененияЗатрат если найден,
//							Неопределено - если не найден.
//
// Алгоритм поиска:
// 1. Ищем записи для указанных Организации и Подразделения. Если найдена - работаем с этой записью. Если нет,
//    то ищем записи для Организации. Если найдена - работаем с этой записью. Если нет,  то ищем записи для 
//    пустой Организации. Если не найдено - возвращаем Неопределено.
// 2. Среди набора записей ищем первую у которой в фильтрах указаны и колонна и ТС. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 3. Среди набора записей ищем первую у которой в фильтрах указано ТС. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 4. Среди набора записей ищем первую у которой в фильтрах указана Колонна. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 5. Среди набора записей ищем первую у которой пустой фильтр. Если найдена то переходим к пункту 6.
// 6. Возвращаем ссылку.
//
Функция уатНайтиПланЗатрат(ПланЗатрат, Организация, ТС, Колонна = Неопределено) ЭКСПОРТ
	ПланЗатрат = Справочники.уатПланыПримененияЗатрат.ПустаяСсылка();
	
	//Если НЕ ЗначениеЗаполнено(ТС) Тогда
	//	Возврат Истина;
	//КонецЕсли;
	
	Результат = Ложь;
	
	Если Колонна = Неопределено И ЗначениеЗаполнено(ТС) Тогда
		Колонна = МестонахождениеТС(ТС).Колонна;
	КонецЕсли;	
	
	ЗапросПланЗатрат = Новый Запрос;
	ЗапросПланЗатрат.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПланыПримененияЗатрат.Ссылка КАК Ссылка,
	|	уатПланыПримененияЗатрат.Фильтры.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Фильтр КАК Фильтр
	|	) КАК Фильтры
	|ИЗ
	|	Справочник.уатПланыПримененияЗатрат КАК уатПланыПримененияЗатрат
	|ГДЕ
	|	уатПланыПримененияЗатрат.Организация = &Организация
	|	И НЕ уатПланыПримененияЗатрат.ПометкаУдаления";
	
	ЗапросПланЗатрат.УстановитьПараметр("Организация", Организация);
	мРезультатЗапроса = ЗапросПланЗатрат.Выполнить();
	
	Если мРезультатЗапроса.Пустой() Тогда
		
		ЗапросПланЗатрат.Текст = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПланыПримененияЗатрат.Ссылка КАК Ссылка,
		|	уатПланыПримененияЗатрат.Фильтры.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Фильтр КАК Фильтр
		|	) КАК Фильтры
		|ИЗ
		|	Справочник.уатПланыПримененияЗатрат КАК уатПланыПримененияЗатрат
		|ГДЕ
		|	уатПланыПримененияЗатрат.Организация = &Организация
		|	И НЕ уатПланыПримененияЗатрат.ПометкаУдаления";
		
		ЗапросПланЗатрат.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
		мРезультатЗапроса = ЗапросПланЗатрат.Выполнить();
		
		Если мРезультатЗапроса.Пустой() Тогда
			
			Возврат Результат;
			
		КонецЕсли;
	КонецЕсли;
	
	РезультатФильтр 		= Ложь;
	РезультатФильтрТС 		= Ложь;
	РезультатФильтрКолонна 	= Ложь;
	
	мВыборкаЗапроса = мРезультатЗапроса.Выбрать();
	
	// первый проход, ищем фильтр по ТС и по Колонне
	Пока мВыборкаЗапроса.Следующий() Цикл
		
		мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
		Пока мВыборкаЗапросаФильтры.Следующий() Цикл
			
			Если мВыборкаЗапросаФильтры.Фильтр = Колонна Тогда
				РезультатФильтрКолонна = Истина;
			ИначеЕсли мВыборкаЗапросаФильтры.Фильтр = ТС Тогда
				РезультатФильтрТС = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если РезультатФильтрКолонна и РезультатФильтрТС Тогда
			
			Результат	= Истина;
			ПланЗатрат = мВыборкаЗапроса.Ссылка;
			Возврат Результат;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не (РезультатФильтрТС и РезультатФильтрКолонна) Тогда
		// второй проход, ищем фильтр по ТС
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			Пока мВыборкаЗапросаФильтры.Следующий() Цикл
				Если мВыборкаЗапросаФильтры.Фильтр = ТС Тогда
					
					Результат	= Истина;
					ПланЗатрат = мВыборкаЗапроса.Ссылка;
					Возврат Результат;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		// третий проход, ищем фильтр по Колонне
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			Пока мВыборкаЗапросаФильтры.Следующий() Цикл
				Если мВыборкаЗапросаФильтры.Фильтр = Колонна Тогда
					
					Результат	= Истина;
					ПланЗатрат = мВыборкаЗапроса.Ссылка;
					Возврат Результат;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		// четвертый проход, ищем записи с пустым фильтром
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			// нет никаких фильтров
			Если мВыборкаЗапросаФильтры.Количество() = 0 Тогда
				
				Результат	= Истина;
				ПланЗатрат = мВыборкаЗапроса.Ссылка;
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатНайтиПланЗатрат       

// Функция находит статью затрат по переданным виду затрат и плану затрат
// Возвращается первая попавшаяся статья, если найдено несколько
//
// Параметры:
//  ПланЗатрат - ссылка справочника уатПланыПримененияЗатрат
//  ВидЗатрат - перечисление уатВидыЗатрат
//
// Возвращаемое значение: - ссылка справочника уатСтатьиРасходов если найден,
//							Неопределено - если не найден.
//
Функция НайтиСтатьюЗатрат(ПланЗатрат, ВидЗатрат) ЭКСПОРТ
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПланыПримененияЗатрат.СтатьяРасходов
	|ИЗ
	|	Справочник.уатПланыПримененияЗатрат.Расходы КАК уатПланыПримененияЗатрат
	|ГДЕ
	|	уатПланыПримененияЗатрат.Ссылка = &ПланЗатрат
	|	И уатПланыПримененияЗатрат.СтатьяРасходов.ВидЗатрат = &ВидЗатрат");
	Запрос.УстановитьПараметр("ПланЗатрат", ПланЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат", ВидЗатрат);
	мРезультатЗапроса = Запрос.Выполнить();
	
	Выборка = мРезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтатьяРасходов;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // НайтиСтатьюЗатрат       

// Обработчик регламентного задания "Распределение доходов и расходов"
//
Процедура РаспределениеДоходовРасходов() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Allocation of incomes and expenses';ru='Распределение доходов и расходов'");
	
	ТекстНСТР = НСтр("en='Beginning of distribution';ru='Начало распределения'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРаспределениеДоходовРасходов.Ссылка КАК Документ,
	|	уатРаспределениеДоходовРасходов.Дата КАК ДатаДокумента,
	|	Организации.Ссылка КАК Организация,
	|	уатРаспределениеДоходовРасходов.Ссылка ЕСТЬ NULL КАК ДокументОтсутствует
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатРаспределениеДоходовРасходов.Ссылка КАК Ссылка,
	|			уатРаспределениеДоходовРасходов.Дата КАК Дата,
	|			уатРаспределениеДоходовРасходов.Организация КАК Организация
	|		ИЗ
	|			Документ.уатРаспределениеДоходовРасходов КАК уатРаспределениеДоходовРасходов
	|		ГДЕ
	|			уатРаспределениеДоходовРасходов.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|			И уатРаспределениеДоходовРасходов.Проведен
	|			И НЕ уатРаспределениеДоходовРасходов.ПометкаУдаления) КАК уатРаспределениеДоходовРасходов
	|		ПО Организации.Ссылка = уатРаспределениеДоходовРасходов.Организация
	|ИТОГИ ПО
	|	Организация");
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(НачалоДня(ТекущаяДата())-1));
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ДокСсылка = Документы.уатРаспределениеДоходовРасходов.ПустаяСсылка();
		ВыборкаДокумент = ВыборкаОрганизация.Выбрать();
		Пока ВыборкаДокумент.Следующий() Цикл
			Если ВыборкаДокумент.Документ <> NULL И ВыборкаДокумент.ДатаДокумента > ДокСсылка.Дата Тогда
				ДокСсылка = ВыборкаДокумент.Документ;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокСсылка = Документы.уатРаспределениеДоходовРасходов.ПустаяСсылка() Тогда
			Док = Документы.уатРаспределениеДоходовРасходов.СоздатьДокумент();
			уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Ложь, Истина, Док);
			
			Док.Организация = ВыборкаОрганизация.Организация;
			Док.Дата = НачалоДня(ТекущаяДата())-1;
			Док.УстановитьНовыйНомер();
			Док.Комментарий = НСтр("en='Document is automatically created when executing scheduled jobs';ru='Документ создан автоматически при выполнении регламентного задания'");
		Иначе
			Док = ДокСсылка.ПолучитьОбъект();
			Док.Дата = НачалоДня(ТекущаяДата())-1;
		КонецЕсли;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ТекстНСТР = НСтр("en='Posted document';ru='Проведен документ'") + " """ + Док + """";
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
		Исключение
			ТекстНСТР = НСтр("en='During document posting';ru='При проведении документа'") + " """ + Док + " "" " + НСтр("en='errors occured:';ru='возникли ошибки:'") +" " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
		КонецПопытки;
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='End of distribution';ru='Окончание распределения'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
КонецПроцедуры

#КонецОбласти


#Область Ремонты

// Процедура выполняет регламентное задание уатОбновлениеПлановыхДатТО.
//
Процедура уатОбновлениеПланаРемонтныхРабот() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru = 'Обновление плановых дат ТО'");
	
	ТекстНСТР = НСтр("ru='Начало процедуры обновления данных'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	ОбновитьПланыРемонтныхРабот();
	
	ТекстНСТР = НСтр("ru='Обновление данных завершено'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура выполняет обновление планов ТО.
//
Процедура ОбновитьПланыРемонтныхРабот(ТС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТС = Неопределено Тогда
		// Очистка регистра перед добавлением актуальных записей.
		НаборЗаписей = РегистрыСведений.уатПлановыеДатыТО.СоздатьНаборЗаписей();
		НаборЗаписей.Записать(Истина);
	Иначе
		Если ТС.Количество() <> 0 Тогда
			ТекТС = ТС[0];
			
			НаборЗаписей = РегистрыСведений.уатПлановыеДатыТО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТС.Установить(ТекТС);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				НаборЗаписей.Очистить();
			КонецЕсли;
		КонецЕсли;
	КОнецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаПо", ТекущаяДата());
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.Текст = ТекстЗапросаСписокТСДляТО(ТС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаТО = ?(Выборка.Циклический,Выборка.ДатаПоследнегоТО, Выборка.ДатаВводаВЭксплуатацию);
		
		СреднесуточнаяВыработка         = 0;
		КоличествоДнейПослеПоследнегоТО = 0;
		ВыработкаПослеПоследнегоТО      = 0;
		ПробегПриПоследнемТО            = 0;
		Если ЗначениеЗаполнено(ДатаТО) Тогда
			// Наработка с даты проведения последнего ТО (из регистра Выработка ТС). 
			// Для сервисной книжки дата проведения последнего ТО = дате начала эксплуатации
			//
			ВыработкаПослеПоследнегоТО = ?(Выборка.Циклический,
			ПолучитьВыработкаПослеПоследнегоТО(Выборка.ТС, Выборка.ДатаПоследнегоТО, Выборка.ПараметрВыработки, Выборка.ВидТО, ПробегПриПоследнемТО),
			Выборка.ВыработкаСНачалаЭксплуатации);
			
			ПлановаяДатаТО = ПолучитьПлановуюДатуТО(Выборка, ВыработкаПослеПоследнегоТО, КоличествоДнейПослеПоследнегоТО, СреднесуточнаяВыработка, ПробегПриПоследнемТО);
		Иначе
			ПлановаяДатаТО = Дата(1,1,1);
		КонецЕсли;
		
		МассивДат = Новый Массив();
		МассивДат.Добавить(ПлановаяДатаТО);
		
		Если Выборка.Циклический Тогда
			ГоризонтПланирования = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Выборка.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ГоризонтПланированияЦиклическихТОЛет"));
			
			Если ЗначениеЗаполнено(ГоризонтПланирования) Тогда
				ТекПлановаяДатаТО    = ПлановаяДатаТО;
				ГоризонтПланирования = ДобавитьМесяц(ТекущаяДатаСеанса(), 12 * ГоризонтПланирования);
				Разница              = НачалоДня(ПлановаяДатаТО) - НачалоДня(ДатаТО);
				
				Если Разница > 0 Тогда
					Пока ТекПлановаяДатаТО <= ГоризонтПланирования Цикл
						Если Выборка.ПланированиеТО = Перечисления.уатПериодичностьТО.ПоВремени Тогда
							ТекПлановаяДатаТО = ПолучитьПлановуюДатуТОПоВремени(ТекПлановаяДатаТО,
								Выборка.ПериодичностьОбслуживания, Выборка.КоличествоПериодов);
						ИначеЕсли Выборка.ПланированиеТО = Перечисления.уатПериодичностьТО.ПоВыработке Тогда
							ТекПлановаяДатаТО = ТекПлановаяДатаТО + Разница;
						Иначе
							ТекПлановаяДатаТОПоВремени   = ПолучитьПлановуюДатуТОПоВремени(ТекПлановаяДатаТО,
								Выборка.ПериодичностьОбслуживания, Выборка.КоличествоПериодов);
							ТекПлановаяДатаТОПоВыработке = ТекПлановаяДатаТО + Разница;
							Если ЗначениеЗаполнено(ТекПлановаяДатаТОПоВремени)
								И ЗначениеЗаполнено(ТекПлановаяДатаТОПоВыработке) Тогда
								ТекПлановаяДатаТО = Мин(ТекПлановаяДатаТОПоВремени, ТекПлановаяДатаТОПоВыработке);
							ИначеЕсли НЕ ЗначениеЗаполнено(ТекПлановаяДатаТОПоВремени) Тогда
								ТекПлановаяДатаТО = ТекПлановаяДатаТОПоВыработке;
							Иначе
								ТекПлановаяДатаТО = ТекПлановаяДатаТОПоВремени;
							КонецЕсли;
						КонецЕсли;
						МассивДат.Добавить(ТекПлановаяДатаТО);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.уатПлановыеДатыТО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
		НаборЗаписей.Отбор.ТО.Установить(Выборка.ВидТО);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;	
		
		Для Каждого ПлановаяДатаТО Из МассивДат Цикл
			
			Если ПлановаяДатаТО > Дата(3999,1,1) Тогда
				Продолжить;
			КонецЕсли;
			
			// Строка исправляет ошибку, связанную с милисекундами в дате, которых не видно
			ПлановаяДатаТО = НачалоДня(ПлановаяДатаТО);
			
			НаборЗаписей = РегистрыСведений.уатПлановыеДатыТО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
			НаборЗаписей.Отбор.Период.Установить(ПлановаяДатаТО);
			НаборЗаписей.Отбор.ТО.Установить(Выборка.ВидТО);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() <> 0 Тогда
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			Если Год(ПлановаяДатаТО) = 1 
				ИЛИ Год(ПлановаяДатаТО) > Год(ТекущаяДата()) + 10 Тогда
				Попытка
					НаборЗаписей.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
				Продолжить;
			КонецЕсли;
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период                  = ПлановаяДатаТО;
			Запись.ТС                      = Выборка.ТС;
			Запись.ТО                      = Выборка.ВидТО;
			Запись.Дата                    = ПлановаяДатаТО;
			Запись.ДатаПоследнегоТО        = ДатаТО;
			Запись.ВыработкаПоследнегоТО   = Выборка.ВыработкаПоследнегоТО;
			Запись.ВыработкаПослеПоследнегоТО      = ВыработкаПослеПоследнегоТО;
			Запись.ДатаРаботы                      = Выборка.ДатаРаботы;
			Запись.КоличествоДнейПослеПоследнегоТО = КоличествоДнейПослеПоследнегоТО;
			Запись.СреднесуточнаяВыработка         = СреднесуточнаяВыработка;
			Запись.Плановая                        = НЕ Выборка.Невыполнено;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	Если ТС = Неопределено Тогда
		Константы.уатДатаАктуальностиПланаРемонтныхРабот.Установить(ТекущаяДата());
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает выработку после последнего ТО
//
Функция ПолучитьВыработкаПослеПоследнегоТО(ТС, ДатаНачала, ПараметрВыработки, ВидТО, ПробегПриПоследнемТО) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода",     ДатаНачала);
	Запрос.УстановитьПараметр("ТС",                ТС);
	Запрос.УстановитьПараметр("ПараметрВыработки", ПараметрВыработки);
	Запрос.УстановитьПараметр("ВидТО",             ВидТО);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|			ТОГДА ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0) / 3600
	|		ИНАЧЕ ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0)
	|	КОНЕЦ КАК КоличествоОборот,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатПрохождениеТОСрезПоследних.Регистратор) = ТИП(Документ.уатВводНачальныхПоказаний)
	|			ТОГДА ВЫБОР
	|					КОГДА уатПрохождениеТОСрезПоследних.ПараметрВыработки.Временный
	|						ТОГДА ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Выработка, 0) / 3600
	|					ИНАЧЕ ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Выработка, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПробегПриПоследнемТО
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			&НачалоПериода,
	|			,
	|			,
	|			ТС = &ТС
	|				И ПараметрВыработки = &ПараметрВыработки) КАК уатВыработкаТСОбороты
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				&НачалоПериода,
	|				ТС = &ТС
	|					И ПараметрВыработки = &ПараметрВыработки
	|					И ВидТО = &ВидТО) КАК уатПрохождениеТОСрезПоследних
	|		ПО уатВыработкаТСОбороты.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И уатВыработкаТСОбороты.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ПробегПриПоследнемТО = Выборка.ПробегПриПоследнемТО;
		Возврат Выборка.КоличествоОборот;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоВыработкиЗаПериодПоТС()

// Возвращает плановую дату следующего ТО
//
Функция ПолучитьПлановуюДатуТО(Выборка, ВыработкаПослеТО, КоличествоДнейПослеПоследнегоТО, СреднесуточнаяВыработка, ПробегПриПоследнемТО) Экспорт
	
	ТС                        = Выборка.ТС;
	ПараметрВыработки         = Выборка.ПараметрВыработки;
	ДатаТО                    = ?(Выборка.Циклический,Выборка.ДатаПоследнегоТО, Выборка.ДатаВводаВЭксплуатацию);
	ДатаРаботы                = Выборка.ДатаРаботы;
	ПериодичностьТО           = Выборка.ПланированиеТО;
	ПериодичностьОбслуживания = Выборка.ПериодичностьОбслуживания;
	КоличествоПериодов        = Выборка.КоличествоПериодов;
	Норма                     = Выборка.НормаВыработки;
	ДатаВводаВЭксплуатацию    = Выборка.ДатаВводаВЭксплуатацию;
	НачальныйПробег           = ?(Выборка.ДатаПоследнегоТО <= Выборка.ДатаВводаВЭксплуатацию, Выборка.НачальныйПробег, 0);

	Если ЗначениеЗаполнено(ДатаТО) Тогда
		ДатаПоследнегоТО = ДатаТО;
	Иначе 
		ДатаПоследнегоТО = ДатаВводаВЭксплуатацию;
	КонецЕсли;
	
	Если ПериодичностьТО = Перечисления.уатПериодичностьТО.ПоВремени Тогда
		тПлановаяДатаТО = ПолучитьПлановуюДатуТОПоВремени(ДатаПоследнегоТО, ПериодичностьОбслуживания, КоличествоПериодов);
		
	ИначеЕсли ПериодичностьТО = Перечисления.уатПериодичностьТО.ПоВыработке Тогда
		тПлановаяДатаТО = ПолучитьПлановуюДатуТОПоВыработке(ТС, ПараметрВыработки, 
			ДатаРаботы, ДатаПоследнегоТО, ВыработкаПослеТО, Норма, НачальныйПробег, КоличествоДнейПослеПоследнегоТО,
			СреднесуточнаяВыработка, ПробегПриПоследнемТО, Выборка.Циклический);
	Иначе
		тПлановаяДатаТОПоВремени   = ПолучитьПлановуюДатуТОПоВремени(ДатаПоследнегоТО, ПериодичностьОбслуживания, КоличествоПериодов);
		
		тПлановаяДатаТОПоВыработке = ПолучитьПлановуюДатуТОПоВыработке(ТС, ПараметрВыработки,
			ДатаРаботы, ДатаПоследнегоТО, ВыработкаПослеТО, Норма, НачальныйПробег, КоличествоДнейПослеПоследнегоТО,
			СреднесуточнаяВыработка, ПробегПриПоследнемТО, Выборка.Циклический);
		Если ЗначениеЗаполнено(тПлановаяДатаТОПоВремени)
			И ЗначениеЗаполнено(тПлановаяДатаТОПоВыработке) Тогда
			тПлановаяДатаТО = Мин(тПлановаяДатаТОПоВремени, тПлановаяДатаТОПоВыработке);
		ИначеЕсли НЕ ЗначениеЗаполнено(тПлановаяДатаТОПоВремени) Тогда
			тПлановаяДатаТО = тПлановаяДатаТОПоВыработке;
		Иначе
			тПлановаяДатаТО = тПлановаяДатаТОПоВремени;
		КонецЕсли;
	КонецЕсли;
	Возврат тПлановаяДатаТО;
	
КонецФункции

// Возвращает плановую дату следующего ТО
//
Функция ПолучитьПлановуюДатуТОПоВремени(ДатаПоследнегоТО, ПериодичностьОбслуживания, КоличествоПериодов)
	
	Если ПериодичностьОбслуживания = Перечисления.Периодичность.Неделя Тогда
		тПлановаяДатаТО = ДатаПоследнегоТО + 86400 * 7 * КоличествоПериодов;
		
	ИначеЕсли ПериодичностьОбслуживания = Перечисления.Периодичность.Декада Тогда
		тПлановаяДатаТО = ДатаПоследнегоТО + 86400 * 10 * КоличествоПериодов;
		
	ИначеЕсли ПериодичностьОбслуживания = Перечисления.Периодичность.Месяц Тогда
		тПлановаяДатаТО = ДобавитьМесяц(ДатаПоследнегоТО, КоличествоПериодов);
		
	ИначеЕсли ПериодичностьОбслуживания = Перечисления.Периодичность.Квартал Тогда
		тПлановаяДатаТО = ДобавитьМесяц(ДатаПоследнегоТО, 3 * КоличествоПериодов);
		
	ИначеЕсли ПериодичностьОбслуживания = Перечисления.Периодичность.Полугодие Тогда
		тПлановаяДатаТО = ДобавитьМесяц(ДатаПоследнегоТО, 6 * КоличествоПериодов);
		
	ИначеЕсли ПериодичностьОбслуживания = Перечисления.Периодичность.Год Тогда
		тПлановаяДатаТО = ДобавитьМесяц(ДатаПоследнегоТО, 12 * КоличествоПериодов);
		
	Иначе
		тПлановаяДатаТО = ДатаПоследнегоТО + 86400 * КоличествоПериодов;
	КонецЕсли;
	
	Возврат тПлановаяДатаТО;
	
КонецФункции

// Возвращает плановую дату следующего ТО
//
Функция ПолучитьПлановуюДатуТОПоВыработке(ТС, ПараметрВыработки, ДатаРаботы, ДатаПоследнегоТО, 
	ВыработкаПослеТО, Норма, НачальныйПробег, КоличествоДнейПослеПоследнегоТО, СреднесуточнаяВыработка, ПробегПриПоследнемТО, Циклический)
	
	ТекущийПробег    = ВыработкаПослеТО + НачальныйПробег - ПробегПриПоследнемТО;
	Если ТекущийПробег < Норма Тогда
		КоличествоДнейПослеПоследнегоТО = (НачалоДня(ДатаРаботы) - НачалоДня(ДатаПоследнегоТО)) / 86400;
		СреднесуточнаяВыработка         = ?(КоличествоДнейПослеПоследнегоТО = 0, 0, ВыработкаПослеТО / КоличествоДнейПослеПоследнегоТО);
		тПланДата = ?(СреднесуточнаяВыработка = 0, '00010101', НачалоДня(ДатаПоследнегоТО) + ((Норма - (НачальныйПробег - ПробегПриПоследнемТО))/ СреднесуточнаяВыработка * 86400));
	Иначе
		Если (НачальныйПробег - ПробегПриПоследнемТО) >= Норма Тогда
			тПланДата = ДатаПоследнегоТО;
		Иначе
			тПланДата = ПолучитьДатуПревышенияВыработки(ТС, ПараметрВыработки, ВыработкаПослеТО, ДатаПоследнегоТО, Циклический);
			Если НЕ ЗначениеЗаполнено(тПланДата) Тогда
				тПланДата = ДатаПоследнегоТО;
			КонецЕсли;
		КонецЕсли;
		КоличествоДнейПослеПоследнегоТО = (НачалоДня(ДатаРаботы) - НачалоДня(ДатаПоследнегоТО)) / 86400;
		СреднесуточнаяВыработка         = ?(КоличествоДнейПослеПоследнегоТО = 0, 0, ВыработкаПослеТО / КоличествоДнейПослеПоследнегоТО);
		
	КонецЕсли;
	
	ВыработкаПослеТО = ТекущийПробег;
	
	Возврат тПланДата;
	
КонецФункции

// Возвращает плановую дату следующего ТО
//
Функция ПолучитьДатуПревышенияВыработки(ТС, ПараметрВыработки, ВыработкаПослеТО, ДатаПоследнегоТО, Циклический)
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",                ТС);
	Запрос.УстановитьПараметр("ПараметрВыработки", ПараметрВыработки); 
	Если Циклический Тогда
		Запрос.УстановитьПараметр("ДатаПоследнегоТО", ДатаПоследнегоТО);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатВыработкаТСОбороты.Период КАК Период,
	               |	уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.уатВыработкаТС.Обороты(
	               |			" + ?(Циклический, "&ДатаПоследнегоТО", "") + ",
	               |			,
	               |			Регистратор,
	               |			ТС = &ТС
	               |				И ПараметрВыработки = &ПараметрВыработки) КАК уатВыработкаТСОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Выработка        = Запрос.Выполнить().Выбрать();
	КоличествоОборот = 0;
	Пока Выработка.Следующий() Цикл
		КоличествоОборот = Выработка.КоличествоОборот + КоличествоОборот;
		Если КоличествоОборот >= ВыработкаПослеТО Тогда
			Возврат Выработка.Период;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Дата(1,1,1);
	
КонецФункции

// Возвращает разрешенные виды ТО
//
Функция ПолучитьРазрешенныеВидыТО(ТС) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Модель", ТС.Модель);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания
	               |ИЗ
	               |	Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	               |ГДЕ
	               |	уатМоделиТСНормативыОбслуживания.Ссылка = &Модель
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатВидыОбслуживанияТС.ВидОбслуживанияТС
	               |ИЗ
	               |	Справочник.уатВидыОбслуживанияТС КАК уатВидыОбслуживанияТС
	               |ГДЕ
	               |	уатВидыОбслуживанияТС.ИспользоватьВПланированииТО = ЛОЖЬ";
	МассивВидовОбслуживания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОбслуживания");
	Возврат МассивВидовОбслуживания;
	
КонецФункции

// Список ТС у которых подошел срок ТО
// 
// Параметры
//  ДатаТО - Дата, на которую нужно осуществлять проверку  
//  ТС -  ТС, для которого нужно проверить.
//  ВидТО - Вид проходимого ТО (например, ТО1)
// 
//
// Возвращаемое значение:
// РезультатЗапроса 
//
//
Функция ТекстЗапросаСписокТСДляТО(ТС = Неопределено) Экспорт
	
	ЗапросТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	|	уатМоделиТСНормативыОбслуживания.ПараметрВыработки КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки
	|	КОНЕЦ КАК ЗначениеПараметраВыработки,
	|	уатМоделиТСНормативыОбслуживания.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	ВЫБОР
	|		КОГДА уатМоделиТСНормативыОбслуживания.КоличествоПериодов ЕСТЬ NULL
	|				ИЛИ уатМоделиТСНормативыОбслуживания.КоличествоПериодов = 0
	|			ТОГДА 1
	|		ИНАЧЕ уатМоделиТСНормативыОбслуживания.КоличествоПериодов
	|	КОНЕЦ КАК ПродолжительностьПериода,
	|	ВЫБОР
	|		КОГДА уатМоделиТСНормативыОбслуживания.КоличествоПериодов ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатМоделиТСНормативыОбслуживания.КоличествоПериодов
	|	КОНЕЦ КАК КоличествоПериодов,
	|	ВЫБОР
	|		КОГДА уатМоделиТСНормативыОбслуживания.Допуск ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатМоделиТСНормативыОбслуживания.Допуск
	|	КОНЕЦ КАК Допуск,
	|	ВЫБОР
	|		КОГДА уатМоделиТСНормативыОбслуживания.ДопускПерОбслуживания ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатМоделиТСНормативыОбслуживания.ДопускПерОбслуживания
	|	КОНЕЦ КАК ДопускПерОбслуживания,
	|	уатТС.Ссылка КАК ТС,
	|	уатТС.НачальныйПробег КАК НачальныйПробег,
	|	ВЫБОР
	|		КОГДА уатТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(&ДатаПо, ДЕНЬ)
	|		ИНАЧЕ уатТС.ДатаВводаВЭксплуатацию
	|	КОНЕЦ КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.ВидОбслуживания.Циклический, ЛОЖЬ) КАК Циклический,
	|	ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.ПланированиеТО, ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВремени)) КАК ПланированиеТО
	|ПОМЕСТИТЬ НормыТО
	|ИЗ
	|	Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|		ПО (уатТС.Модель = уатМоделиТСНормативыОбслуживания.Ссылка)
	|ГДЕ
	|	НЕ уатТС.ПометкаУдаления
	|	И уатМоделиТСНормативыОбслуживания.ВидОбслуживания <> ЗНАЧЕНИЕ(Справочник.уатВидыОбслуживанияТС.ПустаяСсылка)";
	
	Если ТипЗнч(ТС) = Тип("Массив") Тогда
		ЗапросТекст = ЗапросТекст + "
		|И уатТС.Ссылка В (&ТС)";
	ИначеЕсли ЗначениеЗаполнено(ТС) Тогда
		ЗапросТекст = ЗапросТекст + "
		|И уатТС.Ссылка = &ТС";
	КонецЕсли;
	
	ЗапросТекст = ЗапросТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПрохождениеТОСрезПоследних.ТС КАК ТС,
	|	МИНИМУМ(уатПрохождениеТОСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ втДатыПолследнегоТОКнижка
	|ИЗ
	|	РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|			,
	|			НЕ ВидТО.Циклический
	|				И ТС В
	|					(ВЫБРАТЬ
	|						НормыТО.ТС КАК ТС
	|					ИЗ
	|						НормыТО КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПрохождениеТОСрезПоследних.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПрохождениеТОСрезПоследних.ТС КАК ТС,
	|	МАКСИМУМ(уатПрохождениеТОСрезПоследних.ВидТО) КАК ВидТО,
	|	уатПрохождениеТОСрезПоследних.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПрохождениеТОСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втПрохождениеТОКнижка
	|ИЗ
	|	втДатыПолследнегоТОКнижка КАК втДатыПолследнегоТОКнижка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				,
	|				ТС В
	|						(ВЫБРАТЬ
	|							втДатыПолследнегоТОКнижка.ТС КАК ТС
	|						ИЗ
	|							втДатыПолследнегоТОКнижка КАК втДатыПолследнегоТОКнижка)
	|					И НЕ ВидТО.Циклический) КАК уатПрохождениеТОСрезПоследних
	|		ПО втДатыПолследнегоТОКнижка.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И втДатыПолследнегоТОКнижка.Период = уатПрохождениеТОСрезПоследних.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПрохождениеТОСрезПоследних.ТС,
	|	уатПрохождениеТОСрезПоследних.ПараметрВыработки,
	|	уатПрохождениеТОСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НормыТО.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ КАК Выработка,
	|	ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатПрохождениеТОСрезПоследних.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|			КОНЕЦ
	|	КОНЕЦ КАК ВыработкаПоследнегоТО,
	|	ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПробег,
	|	НормыТО.ПараметрВыработки КАК ПараметрВыработки,
	|	НормыТО.ЗначениеПараметраВыработки КАК Норма,
	|	НормыТО.Допуск КАК Допуск,
	|	НормыТО.ВидОбслуживания КАК ВидТО,
	|	уатПрохождениеТОСрезПоследних.Период КАК ДатаПоследнегоТО,
	|	НормыТО.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	НормыТО.КоличествоПериодов КАК КоличествоПериодов,
	|	ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|			КОНЕЦ
	|	КОНЕЦ КАК ВыработкаПослеТО,
	|	НормыТО.ЗначениеПараметраВыработки - (ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|			КОНЕЦ
	|	КОНЕЦ) КАК Осталось,
	|	НормыТО.ПланированиеТО КАК ПланированиеТО,
	|	НормыТО.Циклический КАК Циклический,
	|	ЛОЖЬ КАК ТОПройдено,
	|	(НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВыработке)
	|			ИЛИ НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ЧтоНаступитРаньше))
	|			И ВЫБОР
	|				КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|						И уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|							ТОГДА -уатПрохождениеТОСрезПоследних.Выработка
	|						ИНАЧЕ ВЫБОР
	|								КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА НормыТО.ПараметрВыработки.Временный
	|												ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|											ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|										КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА НормыТО.ПараметрВыработки.Временный
	|											ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|										ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|									КОНЕЦ - ВЫБОР
	|										КОГДА уатПрохождениеТОСрезПоследних.ПараметрВыработки.Временный
	|											ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|										ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ >= НормыТО.ЗначениеПараметраВыработки - НормыТО.Допуск - ВЫБОР
	|				КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|							И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|						ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|							И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|					ТОГДА НормыТО.НачальныйПробег
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИЛИ (НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВремени)
	|			ИЛИ НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ЧтоНаступитРаньше))
	|			И ВЫБОР
	|				КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ГОД, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|							ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), МЕСЯЦ, 6 * НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|									ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), КВАРТАЛ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|								ИНАЧЕ ВЫБОР
	|										КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|											ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), МЕСЯЦ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|										ИНАЧЕ ВЫБОР
	|												КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|													ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ДЕНЬ, 10 * НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|												ИНАЧЕ ВЫБОР
	|														КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|															ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), НЕДЕЛЯ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|														ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ДЕНЬ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.ДопускПерОбслуживания)
	|													КОНЕЦ
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ < &ДатаПо КАК Невыполнено
	|ПОМЕСТИТЬ ДанныеПоТО
	|ИЗ
	|	НормыТО КАК НормыТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				,
	|				ВидТО.Циклический
	|					И (ТС, ВидТО, ПараметрВыработки) В
	|						(ВЫБРАТЬ
	|							НормыТО.ТС КАК ТС,
	|							НормыТО.ВидОбслуживания КАК ВидТО,
	|							НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|						ИЗ
	|							НормыТО КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних
	|		ПО НормыТО.ВидОбслуживания = уатПрохождениеТОСрезПоследних.ВидТО
	|			И НормыТО.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И НормыТО.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				,
	|				,
	|				(ТС, ПараметрВыработки) В
	|					(ВЫБРАТЬ
	|						НормыТО.ТС КАК ТС,
	|						НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|					ИЗ
	|						НормыТО КАК НормыТО)) КАК уатВыработкаОбороты
	|		ПО НормыТО.ПараметрВыработки = уатВыработкаОбороты.ПараметрВыработки
	|			И НормыТО.ТС = уатВыработкаОбороты.ТС
	|ГДЕ
	|	НормыТО.Циклический = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормыТО.ТС,
	|	ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних1.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатПрохождениеТОСрезПоследних1.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних1.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних1.Выработка
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	НормыТО.ПараметрВыработки,
	|	НормыТО.ЗначениеПараметраВыработки,
	|	НормыТО.Допуск,
	|	НормыТО.ВидОбслуживания,
	|	втПрохождениеТОКнижка.Период,
	|	НормыТО.ПериодичностьОбслуживания,
	|	НормыТО.КоличествоПериодов,
	|	ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних1.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних1.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних1.Выработка
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НормыТО.ЗначениеПараметраВыработки - (ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ),
	|	НормыТО.ПланированиеТО,
	|	НормыТО.Циклический,
	|	ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	(НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВыработке)
	|			ИЛИ НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ЧтоНаступитРаньше))
	|			И ВЫБОР
	|				КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|							ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|						ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|					КОНЕЦ
	|			КОНЕЦ >= НормыТО.ЗначениеПараметраВыработки - НормыТО.Допуск - ВЫБОР
	|				КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|							И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|						ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|							И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|					ТОГДА НормыТО.НачальныйПробег
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИЛИ (НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВремени)
	|			ИЛИ НормыТО.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ЧтоНаступитРаньше))
	|			И ВЫБОР
	|				КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ГОД, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|							ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), МЕСЯЦ, 6 * НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|									ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), КВАРТАЛ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|								ИНАЧЕ ВЫБОР
	|										КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|											ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), МЕСЯЦ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|										ИНАЧЕ ВЫБОР
	|												КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|													ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ДЕНЬ, 10 * НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|												ИНАЧЕ ВЫБОР
	|														КОГДА НормыТО.ПериодичностьОбслуживания = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|															ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), НЕДЕЛЯ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|														ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ДЕНЬ, НормыТО.ПродолжительностьПериода), ДЕНЬ, -1 * НормыТО.Допуск)
	|													КОНЕЦ
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ < &ДатаПо
	|ИЗ
	|	НормыТО КАК НормыТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрохождениеТОКнижка КАК втПрохождениеТОКнижка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|					,
	|					НЕ ВидТО.Циклический
	|						И (ТС, ВидТО, ПараметрВыработки) В
	|							(ВЫБРАТЬ
	|								НормыТО.ТС КАК ТС,
	|								НормыТО.ВидТО КАК ВидТО,
	|								НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|							ИЗ
	|								втПрохождениеТОКнижка КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних1
	|			ПО втПрохождениеТОКнижка.ТС = уатПрохождениеТОСрезПоследних1.ТС
	|				И втПрохождениеТОКнижка.ВидТО = уатПрохождениеТОСрезПоследних1.ВидТО
	|				И втПрохождениеТОКнижка.ПараметрВыработки = уатПрохождениеТОСрезПоследних1.ПараметрВыработки
	|				И втПрохождениеТОКнижка.Период = уатПрохождениеТОСрезПоследних1.Период
	|		ПО НормыТО.ТС = втПрохождениеТОКнижка.ТС
	|			И НормыТО.ПараметрВыработки = втПрохождениеТОКнижка.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				,
	|				,
	|				(ТС, ПараметрВыработки) В
	|					(ВЫБРАТЬ
	|						НормыТО.ТС КАК ТС,
	|						НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|					ИЗ
	|						НормыТО КАК НормыТО)) КАК уатВыработкаОбороты
	|		ПО НормыТО.ПараметрВыработки = уатВыработкаОбороты.ПараметрВыработки
	|			И НормыТО.ТС = уатВыработкаОбороты.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				,
	|				НЕ ВидТО.Циклический
	|					И (ТС, ВидТО, ПараметрВыработки) В
	|						(ВЫБРАТЬ
	|							НормыТО.ТС КАК ТС,
	|							НормыТО.ВидОбслуживания КАК ВидТО,
	|							НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|						ИЗ
	|							НормыТО КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних
	|		ПО НормыТО.ВидОбслуживания = уатПрохождениеТОСрезПоследних.ВидТО
	|			И НормыТО.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И НормыТО.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки
	|ГДЕ
	|	НЕ НормыТО.Циклический
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыработкаОборотыПериод.ТС КАК ТС,
	|	МАКСИМУМ(ВыработкаОборотыПериод.Период) КАК Период,
	|	МИНИМУМ(ВыработкаОборотыПериод.Период) КАК ПериодМин
	|ПОМЕСТИТЬ ВыработкаОборотыПериод
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			(ТС, ПараметрВыработки) В
	|				(ВЫБРАТЬ
	|					НормыТО.ТС КАК ТС,
	|					НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|				ИЗ
	|					НормыТО КАК НормыТО)) КАК ВыработкаОборотыПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаОборотыПериод.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеПоТО.ТС КАК ТС,
	|	ДанныеПоТО.ПараметрВыработки КАК ПараметрВыработки,
	|	ДанныеПоТО.Допуск КАК Допуск,
	|	ДанныеПоТО.ТС.Модель КАК Модель,
	|	ДанныеПоТО.ВидТО КАК ВидТО,
	|	ДанныеПоТО.Норма КАК НормаВыработки,
	|	ДанныеПоТО.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	ДанныеПоТО.КоличествоПериодов КАК КоличествоПериодов,
	|	ДанныеПоТО.Выработка КАК ВыработкаСНачалаЭксплуатации,
	|	ДанныеПоТО.ВыработкаПоследнегоТО КАК ВыработкаПоследнегоТО,
	|	ДанныеПоТО.ТС.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеПоТО.ДатаПоследнегоТО = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПоТО.ДатаПоследнегоТО, ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию)
	|	КОНЕЦ КАК ДатаПоследнегоТО,
	|	ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ВЫБОР
	|		КОГДА ДанныеПоТО.Циклический
	|			ТОГДА ЕСТЬNULL(уатВыработкаОборотыПериод.Период, ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию)
	|		ИНАЧЕ ЕСТЬNULL(уатВыработкаОборотыПериод.Период, ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию)
	|	КОНЕЦ КАК ДатаРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПлановаяДатаТО,
	|	ДанныеПоТО.ПланированиеТО КАК ПланированиеТО,
	|	ДанныеПоТО.Циклический КАК Циклический,
	|	ДанныеПоТО.ТОПройдено КАК ТОПройдено,
	|	ДанныеПоТО.Невыполнено КАК Невыполнено,
	|	ДанныеПоТО.НачальныйПробег КАК НачальныйПробег
	|ИЗ
	|	ДанныеПоТО КАК ДанныеПоТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОборотыПериод КАК уатВыработкаОборотыПериод
	|		ПО ДанныеПоТО.ТС = уатВыработкаОборотыПериод.ТС
	|ГДЕ
	|	ДанныеПоТО.ТОПройдено = ЛОЖЬ";
	
	Возврат ЗапросТекст;
	
КонецФункции // уатСписокТСДляТО()

// Список ТС у которых подошел срок ТО
// 
// Параметры
//  ДатаТО - Дата, на которую нужно осуществлять проверку  
//  ТС -  ТС, для которого нужно проверить.
//  ВидТО - Вид проходимого ТО (например, ТО1)
// 
//
// Возвращаемое значение:
// РезультатЗапроса 
//
//
Функция СписокТСДляТО(ДатаТО = Неопределено, ТС = Неопределено, РежимПланирования = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаТО) Тогда
		ДатаТО = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон",              КонецДня(ДатаТО));
	Запрос.УстановитьПараметр("ТС",                   ТС);
	Запрос.УстановитьПараметр("РежимПланирования",    РежимПланирования);
	Запрос.УстановитьПараметр("ОтображатьВыбывшиеТС", Истина);
	Запрос.УстановитьПараметр("ТекущаяДата",          ТекущаяДата());
	
	Запрос.Текст = ТекстЗапросаСписокТСДляТОПлановыеДаты(ТС);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // уатСписокТСДляТО()

// Список ТС у которых подошел срок ТО
// 
// Параметры
//  ДатаТО - Дата, на которую нужно осуществлять проверку  
//  ТС -  ТС, для которого нужно проверить.
//  ВидТО - Вид проходимого ТО (например, ТО1)
// 
//
// Возвращаемое значение:
// РезультатЗапроса 
//
//
Функция ТекстЗапросаСписокТСДляТОПлановыеДаты(ТС = Неопределено, Склад = Неопределено) Экспорт
		
	ЗапросТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	|	уатМоделиТСНормативыОбслуживания.ПараметрВыработки КАК ПараметрВыработки,
	|	уатТС.Ссылка КАК ТС,
	|	уатПлановыеДатыТО.Дата КАК Дата,
	|	уатМоделиТСНормативыОбслуживания.СписокРабот КАК СписокРабот,
	|	уатМоделиТСНормативыОбслуживания.СписокЗапчастей КАК СписокЗапчастей,
	|	уатМоделиТСНормативыОбслуживания.Допуск КАК Допуск,
	|	уатМоделиТСНормативыОбслуживания.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	уатМоделиТСНормативыОбслуживания.КоличествоПериодов КАК КоличествоПериодов,
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания.Циклический КАК ВидОбслуживанияЦиклический,
	|	уатМоделиТСНормативыОбслуживания.ПланированиеТО КАК ПланированиеТО,
	|	уатМоделиТСНормативыОбслуживания.ДопускПерОбслуживания КАК ДопускПерОбслуживания,
	|	уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки КАК ЗначениеПараметраВыработки,
	|	уатТС.НачальныйПробег КАК НачальныйПробег,
	|	уатПлановыеДатыТО.Плановая КАК Плановая
	|ПОМЕСТИТЬ НормыТО
	|ИЗ
	|	РегистрСведений.уатПлановыеДатыТО КАК уатПлановыеДатыТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|		ПО уатПлановыеДатыТО.ТС = уатТС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|		ПО уатПлановыеДатыТО.ТО = уатМоделиТСНормативыОбслуживания.ВидОбслуживания
	|			И уатПлановыеДатыТО.ТС.Модель = уатМоделиТСНормативыОбслуживания.Ссылка
	|ГДЕ
	|	НЕ уатТС.ПометкаУдаления";
	
	Если ТипЗнч(ТС) = Тип("Массив") Тогда
		ЗапросТекст = ЗапросТекст + "
		|И уатТС.Ссылка В (&ТС)";
	ИначеЕсли ЗначениеЗаполнено(ТС) Тогда
		ЗапросТекст = ЗапросТекст + "
		|И уатТС.Ссылка = &ТС";
	КонецЕсли;
	
	ЗапросТекст = ЗапросТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПрохождениеТОСрезПоследних.ТС КАК ТС,
	|	МИНИМУМ(уатПрохождениеТОСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ втДатыПолследнегоТОКнижка
	|ИЗ
	|	РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|			,
	|			НЕ ВидТО.Циклический
	|				И ТС В
	|					(ВЫБРАТЬ
	|						НормыТО.ТС КАК ТС
	|					ИЗ
	|						НормыТО КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПрохождениеТОСрезПоследних.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПрохождениеТОСрезПоследних.ТС КАК ТС,
	|	МАКСИМУМ(уатПрохождениеТОСрезПоследних.ВидТО) КАК ВидТО,
	|	уатПрохождениеТОСрезПоследних.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПрохождениеТОСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втПрохождениеТОКнижка
	|ИЗ
	|	втДатыПолследнегоТОКнижка КАК втДатыПолследнегоТОКнижка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				,
	|				ТС В
	|						(ВЫБРАТЬ
	|							втДатыПолследнегоТОКнижка.ТС КАК ТС
	|						ИЗ
	|							втДатыПолследнегоТОКнижка КАК втДатыПолследнегоТОКнижка)
	|					И НЕ ВидТО.Циклический) КАК уатПрохождениеТОСрезПоследних
	|		ПО втДатыПолследнегоТОКнижка.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И втДатыПолследнегоТОКнижка.Период = уатПрохождениеТОСрезПоследних.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПрохождениеТОСрезПоследних.ТС,
	|	уатПрохождениеТОСрезПоследних.ПараметрВыработки,
	|	уатПрохождениеТОСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыТО.ТС КАК ТС,
	|	НормыТО.ПараметрВыработки КАК ПараметрВыработки,
	|	НормыТО.ВидОбслуживания КАК ВидОбслуживания,
	|	ЕСТЬNULL(втПрохождениеТОКнижка.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
	|	НормыТО.Дата КАК Дата,
	|	НормыТО.СписокРабот КАК СписокРабот,
	|	НормыТО.СписокЗапчастей КАК СписокЗапчастей,
	|	НормыТО.Допуск КАК Допуск,
	|	НормыТО.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	НормыТО.КоличествоПериодов КАК КоличествоПериодов,
	|	НормыТО.ВидОбслуживанияЦиклический КАК ВидОбслуживанияЦиклический,
	|	НормыТО.ПланированиеТО КАК ПланированиеТО,
	|	НормыТО.ДопускПерОбслуживания КАК ДопускПерОбслуживания,
	|	НормыТО.ЗначениеПараметраВыработки КАК ЗначениеПараметраВыработки,
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ КАК Выработка,
	|	ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПробег,
	|	ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТОПройдено,
	|	ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних1.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатПрохождениеТОСрезПоследних1.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних1.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних1.Выработка
	|			КОНЕЦ
	|	КОНЕЦ КАК ВыработкаПоследнегоТО,
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних1.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних1.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних1.Выработка
	|			КОНЕЦ
	|	КОНЕЦ КАК ВыработкаПослеТО,
	|	НормыТО.ЗначениеПараметраВыработки - (ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Осталось,
	|	НормыТО.Плановая КАК Плановая
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	НормыТО КАК НормыТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрохождениеТОКнижка КАК втПрохождениеТОКнижка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|					,
	|					НЕ ВидТО.Циклический
	|						И (ТС, ВидТО, ПараметрВыработки) В
	|							(ВЫБРАТЬ
	|								НормыТО.ТС КАК ТС,
	|								НормыТО.ВидТО КАК ВидТО,
	|								НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|							ИЗ
	|								втПрохождениеТОКнижка КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних1
	|			ПО втПрохождениеТОКнижка.ТС = уатПрохождениеТОСрезПоследних1.ТС
	|				И втПрохождениеТОКнижка.ВидТО = уатПрохождениеТОСрезПоследних1.ВидТО
	|				И втПрохождениеТОКнижка.ПараметрВыработки = уатПрохождениеТОСрезПоследних1.ПараметрВыработки
	|				И втПрохождениеТОКнижка.Период = уатПрохождениеТОСрезПоследних1.Период
	|		ПО НормыТО.ПараметрВыработки = втПрохождениеТОКнижка.ПараметрВыработки
	|			И НормыТО.ТС = втПрохождениеТОКнижка.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				,
	|				,
	|				(ТС, ПараметрВыработки) В
	|					(ВЫБРАТЬ
	|						НормыТО.ТС КАК ТС,
	|						НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|					ИЗ
	|						НормыТО КАК НормыТО)) КАК уатВыработкаТСОбороты
	|		ПО НормыТО.ПараметрВыработки = уатВыработкаТСОбороты.ПараметрВыработки
	|			И НормыТО.ТС = уатВыработкаТСОбороты.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				,
	|				НЕ ВидТО.Циклический
	|					И (ТС, ВидТО, ПараметрВыработки) В
	|						(ВЫБРАТЬ
	|							НормыТО.ТС КАК ТС,
	|							НормыТО.ВидОбслуживания КАК ВидТО,
	|							НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|						ИЗ
	|							НормыТО КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних
	|		ПО НормыТО.ВидОбслуживания = уатПрохождениеТОСрезПоследних.ВидТО
	|			И НормыТО.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И НормыТО.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки
	|ГДЕ
	|	НЕ НормыТО.ВидОбслуживания.Циклический
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормыТО.ТС,
	|	НормыТО.ПараметрВыработки,
	|	НормыТО.ВидОбслуживания,
	|	ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|	НормыТО.Дата,
	|	НормыТО.СписокРабот,
	|	НормыТО.СписокЗапчастей,
	|	НормыТО.Допуск,
	|	НормыТО.ПериодичностьОбслуживания,
	|	НормыТО.КоличествоПериодов,
	|	НормыТО.ВидОбслуживанияЦиклический,
	|	НормыТО.ПланированиеТО,
	|	НормыТО.ДопускПерОбслуживания,
	|	НормыТО.ЗначениеПараметраВыработки,
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НормыТО.ЗначениеПараметраВыработки - (ВЫБОР
	|		КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|				ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|				ИЛИ НЕ НормыТО.ТС.Модель.НаличиеСпидометра
	|					И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаТСОбороты.ПараметрВыработки.Временный
	|					ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|				ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|			КОНЕЦ
	|	КОНЕЦ),
	|	НормыТО.Плановая
	|ИЗ
	|	НормыТО КАК НормыТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(
	|				,
	|				ВидТО.Циклический
	|					И (ТС, ВидТО, ПараметрВыработки) В
	|						(ВЫБРАТЬ
	|							НормыТО.ТС КАК ТС,
	|							НормыТО.ВидОбслуживания КАК ВидТО,
	|							НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|						ИЗ
	|							НормыТО КАК НормыТО)) КАК уатПрохождениеТОСрезПоследних
	|		ПО НормыТО.ВидОбслуживания = уатПрохождениеТОСрезПоследних.ВидТО
	|			И НормыТО.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки
	|			И НормыТО.ТС = уатПрохождениеТОСрезПоследних.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				,
	|				,
	|				(ТС, ПараметрВыработки) В
	|					(ВЫБРАТЬ
	|						НормыТО.ТС КАК ТС,
	|						НормыТО.ПараметрВыработки КАК ПараметрВыработки
	|					ИЗ
	|						НормыТО КАК НормыТО)) КАК уатВыработкаТСОбороты
	|		ПО НормыТО.ТС = уатВыработкаТСОбороты.ТС
	|			И НормыТО.ПараметрВыработки = уатВыработкаТСОбороты.ПараметрВыработки
	|ГДЕ
	|	НормыТО.ВидОбслуживания.Циклический
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРезультат.ТС КАК ТС,
	|	втРезультат.ТС.Модель КАК Модель,
	|	втРезультат.ПараметрВыработки КАК ПараметрВыработки,
	|	втРезультат.ВидОбслуживания КАК ВидТО,
	|	ВЫБОР
	|		КОГДА втРезультат.Период = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА втРезультат.ТС.ДатаВводаВЭксплуатацию
	|		ИНАЧЕ втРезультат.Период
	|	КОНЕЦ КАК ДатаПоследнегоТО,
	|	втРезультат.Дата КАК ПлановаяДатаТО,
	|	втРезультат.СписокРабот          КАК СписокРабот,
	|	втРезультат.СписокЗапчастей      КАК СписокЗапчастей,
	|	втРезультат.Допуск КАК Допуск,
	|	втРезультат.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	втРезультат.КоличествоПериодов КАК КоличествоПериодов,
	|	втРезультат.ВидОбслуживанияЦиклический КАК Циклический,
	|	втРезультат.ПланированиеТО КАК ПланированиеТО,
	|	втРезультат.ДопускПерОбслуживания КАК ДопускПерОбслуживания,
	|	втРезультат.ЗначениеПараметраВыработки КАК НормаВыработки,
	|	втРезультат.Выработка КАК Выработка,
	|	втРезультат.НачальныйПробег КАК НачальныйПробег,
	|	втРезультат.Выработка + втРезультат.НачальныйПробег КАК ВыработкаСНачалаЭксплуатации,
	|	ВЫБОР
	|		КОГДА втРезультат.ПараметрВыработки = НЕОПРЕДЕЛЕНО
	|				ИЛИ втРезультат.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользуетсяПараметрВыработки,
	|	втРезультат.ВыработкаПоследнегоТО КАК ВыработкаПоследнегоТО,
	|	втРезультат.ВыработкаПослеТО КАК ВыработкаПослеПоследнегоТО,
	|	втРезультат.Осталось КАК ВыработкаОстаток,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), НАЧАЛОПЕРИОДА(втРезультат.Дата, ДЕНЬ), ДЕНЬ) КАК ОсталосьДней,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна";
	
	Если  Склад <> Неопределено Тогда
		ЗапросТекст = ЗапросТекст + " 
		|ПОМЕСТИТЬ втРезультатМестонахождение";
	КонецЕсли;
	
	ЗапросТекст = ЗапросТекст + "
	|ИЗ
	|	втРезультат КАК втРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(
	|				&ДатаКон,
	|				ТС В
	|					(ВЫБРАТЬ
	|						втРезультат.ТС КАК ТС
	|					ИЗ
	|						втРезультат КАК втРезультат)) КАК уатМестонахождениеТССрезПоследних
	|		ПО втРезультат.ТС = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|ВЫБОР
	|	КОГДА &РежимПланирования
	|	ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|			КОГДА втРезультат.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВремени)
	|				ТОГДА ДОБАВИТЬКДАТЕ(втРезультат.Дата, ДЕНЬ, -1 * втРезультат.ДопускПерОбслуживания)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втРезультат.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВыработке)
	|						ТОГДА ВЫБОР
	|								КОГДА втРезультат.ВыработкаПослеТО >= втРезультат.ЗначениеПараметраВыработки - втРезультат.Допуск
	|									ТОГДА ДОБАВИТЬКДАТЕ(&ДатаКон, ДЕНЬ, -1)
	|								ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаКон, ДЕНЬ, 1)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ДОБАВИТЬКДАТЕ(втРезультат.Дата, ДЕНЬ, -1 * втРезультат.ДопускПерОбслуживания) <= ДОБАВИТЬКДАТЕ(&ДатаКон, ДЕНЬ, -1)
	|									ИЛИ втРезультат.ВыработкаПослеТО >= втРезультат.ЗначениеПараметраВыработки - втРезультат.Допуск
	|								ТОГДА ДОБАВИТЬКДАТЕ(&ДатаКон, ДЕНЬ, -1)
	|							ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаКон, ДЕНЬ, 1)
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ <= ДОБАВИТЬКДАТЕ(&ДатаКон, ДЕНЬ, -1)
	|		И НЕ втРезультат.Плановая
	|	КОНЕЦ
	|	И втРезультат.ТОПройдено = ЛОЖЬ
	|	И (&ОтображатьВыбывшиеТС
	|			ИЛИ втРезультат.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1))
	|;";
	
	Если Склад = Неопределено Тогда
		Возврат ЗапросТекст;
	Конецесли;
	
	ЗапросТекст = ЗапросТекст + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРезультатМестонахождение.ТС КАК ТС,
	|	втРезультатМестонахождение.Модель КАК Модель,
	|	втРезультатМестонахождение.ПараметрВыработки КАК ПараметрВыработки,
	|	втРезультатМестонахождение.ВидТО КАК ВидТО,
	|	втРезультатМестонахождение.ДатаПоследнегоТО КАК ДатаПоследнегоТО,
	|	втРезультатМестонахождение.ПлановаяДатаТО КАК ПлановаяДатаТО,
	|	втРезультатМестонахождение.Допуск КАК Допуск,
	|	втРезультатМестонахождение.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|	втРезультатМестонахождение.КоличествоПериодов КАК КоличествоПериодов,
	|	втРезультатМестонахождение.Циклический КАК Циклический,
	|	втРезультатМестонахождение.ПланированиеТО КАК ПланированиеТО,
	|	втРезультатМестонахождение.ДопускПерОбслуживания КАК ДопускПерОбслуживания,
	|	втРезультатМестонахождение.НормаВыработки КАК НормаВыработки,
	|	втРезультатМестонахождение.Выработка КАК Выработка,
	|	втРезультатМестонахождение.НачальныйПробег КАК НачальныйПробег,
	|	втРезультатМестонахождение.ВыработкаСНачалаЭксплуатации КАК ВыработкаСНачалаЭксплуатации,
	|	втРезультатМестонахождение.ИспользуетсяПараметрВыработки КАК ИспользуетсяПараметрВыработки,
	|	втРезультатМестонахождение.ВыработкаПоследнегоТО КАК ВыработкаПоследнегоТО,
	|	втРезультатМестонахождение.ВыработкаПослеПоследнегоТО КАК ВыработкаПослеПоследнегоТО,
	|	втРезультатМестонахождение.ВыработкаОстаток КАК ВыработкаОстаток,
	|	втРезультатМестонахождение.Организация КАК Организация,
	|	втРезультатМестонахождение.Колонна КАК Колонна,
	|	втРезультатМестонахождение.ОсталосьДней КАК ОсталосьДней, 
	|	уатСервиснаяКнижка.Номенклатура КАК Работа,
	|	СУММА(ЕСТЬNULL(уатСервиснаяКнижка.Количество, 0)) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатСервиснаяКнижка.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипНоменклатуры,
	|	СУММА(ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	|ИЗ
	|	втРезультатМестонахождение КАК втРезультатМестонахождение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСервиснаяКнижка КАК уатСервиснаяКнижка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&Период, Склад = &Склад) КАК уатПартииТоваровНаСкладахОстатки
	|			ПО уатСервиснаяКнижка.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|		ПО втРезультатМестонахождение.Модель = уатСервиснаяКнижка.МодельТС
	|			И втРезультатМестонахождение.ВидТО = уатСервиснаяКнижка.ТО
	|
	|СГРУППИРОВАТЬ ПО
	|	втРезультатМестонахождение.ТС,
	|	втРезультатМестонахождение.Модель,
	|	втРезультатМестонахождение.ПараметрВыработки,
	|	втРезультатМестонахождение.ВидТО,
	|	втРезультатМестонахождение.ДатаПоследнегоТО,
	|	втРезультатМестонахождение.ПлановаяДатаТО,
	|	втРезультатМестонахождение.ПериодичностьОбслуживания,
	|	втРезультатМестонахождение.Циклический,
	|	втРезультатМестонахождение.ПланированиеТО,
	|	втРезультатМестонахождение.ИспользуетсяПараметрВыработки,
	|	втРезультатМестонахождение.Организация,
	|	втРезультатМестонахождение.Колонна,
	|	втРезультатМестонахождение.Допуск,
	|	втРезультатМестонахождение.КоличествоПериодов,
	|	втРезультатМестонахождение.ДопускПерОбслуживания,
	|	втРезультатМестонахождение.НормаВыработки,
	|	втРезультатМестонахождение.Выработка,
	|	втРезультатМестонахождение.НачальныйПробег,
	|	втРезультатМестонахождение.ВыработкаСНачалаЭксплуатации,
	|	втРезультатМестонахождение.ВыработкаПоследнегоТО,
	|	втРезультатМестонахождение.ВыработкаПослеПоследнегоТО,
	|	втРезультатМестонахождение.ВыработкаОстаток,
	|	втРезультатМестонахождение.ОсталосьДней,
	|	уатСервиснаяКнижка.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТС,
	|	ВидТО,
	|	ТипНоменклатуры,
	|	Работа";
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "Склад = &Склад", "");
	КонецЕсли;

	Возврат ЗапросТекст;
	
КонецФункции // уатСписокТСДляТО()

// Список массив работ и запчастей по сервисной книжке ТС
//
Функция НайтиРаботыПоОбслуживанию(ВидРемонта, ТС) Экспорт
	МассивРабот = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСервиснаяКнижка.Номенклатура КАК Номенклатура,
	               |	уатСервиснаяКнижка.Количество КАК Количество
	               |ИЗ
	               |	РегистрСведений.уатСервиснаяКнижка КАК уатСервиснаяКнижка
	               |ГДЕ
	               |	уатСервиснаяКнижка.МодельТС = &Модель
	               |	И уатСервиснаяКнижка.ТО = &ВидОбслуживания";
	Запрос.УстановитьПараметр("Модель", ТС.Модель);
	Запрос.УстановитьПараметр("ВидОбслуживания", ВидРемонта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРабот.Добавить(Новый Структура("Номенклатура, Количество", Выборка.Номенклатура, Выборка.Количество));
	КонецЦикла;
	Возврат МассивРабот;
КонецФункции

#КонецОбласти


#Область НоменклатураГрузы

// Возвращает значение реквизитов Груза из регистра сведений
// Параметры:
//	Груз - СправочникСсылка.Номенклатура - ссылка на элемент номенклатуры
//	Груз - СправочникСсылка.ЕдиницыИзмерения - ссылка на элемент единиц измерения
//	ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
//					Класс
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПрочитатьРеквизитыГруза(Груз, ЕдиницаИзмерения, ИмяРеквизита="") ЭКСПОРТ
	Перем ЗначениеРеквизита;
	
	ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГрузов.Получить(Новый Структура("Номенклатура, ЕдиницаИзмерения",
		Груз, ЕдиницаИзмерения));
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат ВыборкаЗаписей;
	Иначе	
		ВыборкаЗаписей.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Возврат ЗначениеРеквизита;
	КонецЕсли;	
КонецФункции // уатПрочитатьРеквизитГруза()

// Функция находит цену
//
// Параметры:
//
Функция уатНайтиЦенуНоменклатуры(Дата, Номенклатура, Контрагент = Неопределено, флСообщатьОшибки = Истина) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Период КАК Период,
	               |	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	               |	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
	               |	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта КАК Валюта,
	               |	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Цена КАК Цена,
	               |	ВЫБОР
	               |		КОГДА уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент = НЕОПРЕДЕЛЕНО
	               |			ТОГДА 3
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент ССЫЛКА Справочник.уатАЗС
	               |					ТОГДА 0
	               |				ИНАЧЕ 1
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрСведений.уатЦеныНоменклатурыКонтрагентов.СрезПоследних(
	               |			&Дата,
	               |			Номенклатура = &Номенклатура
	               |				И (Контрагент В (&мсвКонтрагенты)
	               |					ИЛИ Контрагент = НЕОПРЕДЕЛЕНО)) КАК уатЦеныНоменклатурыКонтрагентовСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	Запрос.УстановитьПараметр("Дата", Дата);		
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);		
	
	мсвКонтрагенты = Новый Массив;
	мсвКонтрагенты.Добавить(Контрагент);
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.уатАЗС") И 
			ТипЗнч(Контрагент.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
		мсвКонтрагенты.Добавить(Контрагент.Контрагент_Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("мсвКонтрагенты", мсвКонтрагенты);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Результат = Новый Структура("Цена, Валюта", ВыборкаРезультатаЗапроса.Цена, ВыборкаРезультатаЗапроса.Валюта);
	Иначе
		Если флСообщатьОшибки = Истина Тогда
			ТекстНСТР = НСтр("en='Not specified products and services price ""%1"", counterparty/Gas station ""%2"" on date %3';ru='Не указана цена номенклатуры ""%1"", контрагента/АЗС ""%2"", на дату %3'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Номенклатура, Контрагент, Дата);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		Результат = Новый Структура("Цена, Валюта", 0, Неопределено);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатНайтиЦенуНоменклатуры       

// Функция возвращает истина, если входящая номенклатура является услугой
//
Функция ВидНоменклатурыУслуга(Номенклатура) Экспорт
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Услуга", "Номенклатура") Тогда
		
		Возврат Номенклатура.Услуга;
		
	ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипНоменклатуры", "Номенклатура")
		И Метаданные.Перечисления.Найти("ТипыНоменклатуры") <> Неопределено Тогда
		
		Возврат Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция получает класс номенклатуры грузов
//
Функция уатКлассГруза(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатНоменклатураГрузов.Класс
	|ИЗ
	|	РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
	|ГДЕ
	|	уатНоменклатураГрузов.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Класс;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция выполняет получение веса и объема для заданной номенклатуры и единицы
// измерения.
//
// Параметры:
//  Номенклатура - номенклатура для которой необходимо получить параметры
//  ЕдиницаИзмерения - единица измерения номенклатуры, для которой необходимо получить параметры
//
// Возвращаемое значение:
//  Результат - Структура - содержащая значения веса и объема
Функция ПолучитьВесОбъемНоменклатуры(Номенклатура, ЕдиницаИзмерения, КоличествоНоменклатуры) Экспорт
	
	Вес = 0; Объем = 0; КолМест = 0;
	Ширина = 0; Длина = 0; Высота = 0;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Новый Структура("Вес, Объем, КоличествоМест, Ширина, Длина, Высота", 0, 0, 0, 0, 0, 0);
	КонецЕсли;
	
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	КоэфВеса   = 1;
	КоэфОбъема = 1;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НоменклатураСсылка", Номенклатура.Ссылка);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",   ЕдиницаИзмерения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(уатНоменклатураГрузов.Вес, 0) КАК Вес,
	|	ЕСТЬNULL(уатНоменклатураГрузов.Объем, 0) КАК Объем,
	|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,";
	Если ЭтоСтандарт Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(уатНоменклатураГрузов.КоличествоМест, 0) КАК КоличествоМест,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.уатКоличествоВОсновнойУпаковке = 0
	|			ТОГДА 0
	|		ИНАЧЕ 1 / СправочникНоменклатура.уатКоличествоВОсновнойУпаковке
	|	КОНЕЦ КАК КоличествоМест,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(уатНоменклатураГрузов.ШиринаГруза, 0) КАК Ширина,
	|	ЕСТЬNULL(уатНоменклатураГрузов.ДлинаГруза, 0) КАК Длина,
	|	ЕСТЬNULL(уатНоменклатураГрузов.ВысотаГруза, 0) КАК Высота,
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.Ссылка = &ЕдиницаИзмерения
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПолеСортировки
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
	|			ПО (уатНоменклатураГрузов.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
	|				И (уатНоменклатураГрузов.Номенклатура = ЕдиницыИзмерения.Владелец)
	|		ПО СправочникНоменклатура.Ссылка = ЕдиницыИзмерения.Владелец
	|ГДЕ
	|	(ЕСТЬNULL(уатНоменклатураГрузов.Вес, 0) <> 0
	|			ИЛИ ЕСТЬNULL(уатНоменклатураГрузов.Объем, 0) <> 0)
	|	И СправочникНоменклатура.Ссылка = &НоменклатураСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки,
	|	Коэффициент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоэфЕИ = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Вес <> 0 И Объем <> 0 И КолМест <> 0 И Длина <> 0 И Ширина <> 0 И Высота <> 0 Тогда 
			Прервать; 
		КонецЕсли;
		
		Если Выборка.Коэффициент = 0 Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если КоэфЕИ = 0 Тогда 
			КоэфЕИ = Выборка.Коэффициент;
		КонецЕсли;
		
		// Если для указанной в строке единицы измерения не заданы все характеристики,
		// характеристика будет взяты из другой единицы измерения
		// значение характеристики будут приведено к текущей единице измерения по коэффициенту
		
		Если Вес = 0 И Выборка.Вес <> 0 тогда 
			Вес = ((Выборка.Вес * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент) / КоэфВеса;
		КонецЕсли;
		
		Если Объем = 0 И Выборка.Объем <> 0 Тогда
			Объем = ((Выборка.Объем * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент) / КоэфОбъема;
		КонецЕсли;
		
		Если КолМест = 0 И Выборка.КоличествоМест <> 0 тогда
			КолМест = Выборка.КоличествоМест;
		КонецЕсли;
		
		Если Ширина = 0 И Выборка.Ширина <> 0 тогда
			Ширина = ((Выборка.Ширина * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент);
		КонецЕсли;
		
		Если Длина = 0 И Выборка.Длина <> 0 тогда
			Длина = ((Выборка.Длина * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент);
		КонецЕсли;
		
		Если Высота = 0 И Выборка.Высота <> 0 тогда
			Высота = ((Выборка.Высота * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент);
		КонецЕсли;
	КонецЦикла;
	
	Если КоэфЕИ = 0 Тогда 
		КоэфЕИ = 1;
	КонецЕсли;
	
	Вес = Вес * КоличествоНоменклатуры;
	
	// Если номенклатура может быть упакована в упаковки - необходимо в качестве объема использовать
	// общий объем упаковок.
	Если ЭтоСтандарт Тогда
		ОбъемУпаковокНоменклатуры = 0;
		КоличествоМестУпаковокНоменклатуры = 0;
	Иначе
		РаспределениеПоУпаковкам = Вычислить("уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(Номенклатура, КоличествоНоменклатуры * КоэфЕИ)");
		ОбъемУпаковокНоменклатуры = Вычислить("уатОбщегоНазначения_уэ.ПолучитьОбъемГрузаПоУпаковкам(РаспределениеПоУпаковкам)");
		КоличествоМестУпаковокНоменклатуры = Вычислить("уатОбщегоНазначения_уэ.ПолучитьКоличествоМестГрузаПоУпаковкам(РаспределениеПоУпаковкам)");
	КонецЕсли;
		
	// Результатом всегда является итоговый объем всей номенклатуры.
	Если ОбъемУпаковокНоменклатуры > 0 Тогда 
		Объем = ОбъемУпаковокНоменклатуры;
	Иначе 
		Объем = Объем * КоличествоНоменклатуры;
	КонецЕсли;
	
	Если КоличествоМестУпаковокНоменклатуры > 0 Тогда 
		КолМест = КоличествоМестУпаковокНоменклатуры;
	Иначе 
		КолМест = КолМест * КоличествоНоменклатуры;
	КонецЕсли;
	
	Возврат Новый Структура("Вес, Объем, КоличествоМест, Ширина, Длина, Высота", Вес, Объем, КолМест, Ширина, Длина, Высота);
	
КонецФункции

#КонецОбласти


#Область ГрафикиРаботы

// Формирует временную таблицу периодов с заданной периодичностью, формируемой, с помощью,
// запроса, возвращаемого методом ЗапросВТПериоды.
// Создает в МенеджерВременныхТаблиц временную таблицу с именем <ИмяВТ> 
// и периодичностью <Периодичность>	
// за интервал с <НачалоИнтервала> по <ОкончаниеИнтервала>.
//
Процедура СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ВызватьИсключение НСтр("en='The end date cannot be earlier than the start date.';ru='Дата окончания не может быть меньше даты начала.'")
	КонецЕсли;
	
	Запрос = ЗапросВТПериоды(НачалоИнтервала, ОкончаниеИнтервала, Периодичность, ИмяПоляПериод, ИмяВТ, ИспользоватьКонецПериода);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция возвращает запрос, формирующий временную таблицу периодов с заданной периодичностью.
//
// Параметры:
//	ОписаниеНачалаИнтервала - Строка, имя параметра в тексте запроса ("&НачалоПериода", "ДАТАВРЕМЯ(2013, 1, 1)").
//							- Дата, начальная дата интервала, за который формируются периоды.
//	ОписаниеОкончанияИнтервала -  Строка, имя параметра в тексте запроса,
//							- Дата, конечная дата интервала, за который формируются периоды.
//	Периодичность - периодичность, на которую будет разбиваться интервал.
//		По умолчанию <МЕСЯЦ>. Может принимать значения:	ГОД, КВАРТАЛ, МЕСЯЦ, ДЕНЬ.
//	ИмяПоляПериод - наименование колонки во временной таблице периодов. 
//		По умолчанию <Период>.
//	ИмяВТ - наименование временной таблицы периодов, по умолчанию <ВТПериоды>.
//	ИспользоватьКонецПериода - булево, необязательный, по умолчанию - Ложь. 
//		Определяет необходимость использовать в качестве значения последнюю секунду периода. 
//		То есть если Истина, то для периодичности месяц, 
//		временная таблица будет заполнена датами конца каждого месяца, 
//		и если ложь, то - датами начала.
//
Функция ЗапросВТПериоды(Знач ОписаниеНачалаИнтервала, Знач ОписаниеОкончанияИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) 
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Дата")
		И ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Дата") Тогда
		
		Если ОписаниеОкончанияИнтервала < ОписаниеНачалаИнтервала Тогда
			
			ТекстИсключения = НСтр("en='Period end date cannot be earlier than start date';ru='Дата окончания периода не может быть меньше даты начала'");
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			ЛетВИнтервале = Год(ОписаниеОкончанияИнтервала) - Год(ОписаниеНачалаИнтервала);
			Если ЛетВИнтервале > 100 Тогда
				
				ТекстИсключения = НСтр("ru='Попытка получить данные за слишком большой интервал времени'")
					+ " (%1 " + НСтр("en='years';ru='лет'") + ": " + НСтр("en='from';ru='с'")+ " %2 " + НСтр("en='till';ru='по'") + " %3)";
				
				ТекстИсключения = СтрШаблон(ТекстИсключения, Формат(ЛетВИнтервале, "ЧГ="), Формат(ОписаниеНачалаИнтервала, "ДЛФ=D"), Формат(ОписаниеОкончанияИнтервала, "ДЛФ=D"));
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) КАК ИмяПоляПериод
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	ВТЦифры КАК Цифры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры1000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99999)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала";
	
	Если ВРег(Периодичность) <> "ГОД"
		И ВРег(Периодичность) <> "КВАРТАЛ"
		И ВРег(Периодичность) <> "МЕСЯЦ"
		И ВРег(Периодичность) <> "ДЕНЬ" Тогда
		
		ВызватьИсключение НСтр("ru='Невозможно сформировать запрос с переданными параметрами.'");
		
	КонецЕсли;
	
	Если ИспользоватьКонецПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧАС", Периодичность);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ИмяПоляПериод", "КАК " + ИмяПоляПериод);
	
	Если ИспользоватьКонецПериода Тогда
		НачалоПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	Иначе
		НачалоПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаИнтервала", НачалоПериодаИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеПериодаИнтервала", ОкончаниеПериодаИнтервалаПредставление);
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Строка") Тогда
		НачалоИнтервалаПредставление = ОписаниеНачалаИнтервала;
	Иначе
		НачалоИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеНачалаИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Строка") Тогда
		ОкончаниеИнтервалаПредставление = ОписаниеОкончанияИнтервала;
	Иначе
		ОкончаниеИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеОкончанияИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоИнтервала",
		"ВЫБОР КОГДА " + НачалоИнтервалаПредставление + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(1980, 1, 1) ИНАЧЕ " + НачалоИнтервалаПредставление + " КОНЕЦ");
	
	ИмяОкончаниеИнтервала = "ОкончаниеИнтервала" + СтрЗаменить(ИмяВТ, "_", "");
	Запрос.УстановитьПараметр(ИмяОкончаниеИнтервала, ДобавитьМесяц(ТекущаяДатаСеанса(), 60));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеИнтервала",
		"ВЫБОР КОГДА " + ОкончаниеИнтервалаПредставление+ " = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), " + ВРег(Периодичность) + ") ТОГДА &" + ИмяОкончаниеИнтервала + " ИНАЧЕ " + ОкончаниеИнтервалаПредставление+ " КОНЕЦ");
	
	ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТЦифры");
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы = "") 
	
	Если ПустаяСтрока(НовоеИмяТаблицы) Тогда
		ЗамещаемыйТекст = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к тексту запроса, переданному в параметре ТекстЗапроса, текст запроса
// уничтожения временной таблицы
//
// Параметры:
//		ТекстЗапроса - Строка
//		ИмяВременнойТаблицы - Строка
//
Процедура ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы) 
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса + РазделительЗапросов()) + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
	КонецЕсли;
	
КонецПроцедуры

Функция РазделительЗапросов()
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

// Возвращает таблицу графиков работы сотрудников на заданный период
//
Функция ПолучитьГрафикиРаботыСотрудниковЗаПериод(Сотрудники, ДатаСреза = Неопределено, ОкончаниеИнтервала = Неопределено) Экспорт
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		вхСотрудники = Новый ТаблицаЗначений();
		вхСотрудники.Колонки.Добавить("Сотрудник",   Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		вхСотрудники.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		НоваяСтрока = вхСотрудники.Добавить();
		НоваяСтрока.Сотрудник   = Сотрудники;
		НоваяСтрока.Организация = Сотрудники.Организация;
	Иначе
		вхСотрудники = Сотрудники;
	КонецЕсли;
	
	Если ОкончаниеИнтервала = Неопределено ИЛИ ДатаСреза = Неопределено
		ИЛИ НачалоДня(ДатаСреза) = НачалоДня(ОкончаниеИнтервала) Тогда
		
		Если ДатаСреза = Неопределено Тогда
			ДатаСреза = ТекущаяДата();
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тчСотрудники.Сотрудник КАК Сотрудник,
		|	тчСотрудники.Организация КАК Организация
		|ПОМЕСТИТЬ втСотрудники
		|ИЗ
		|	&тчСотрудники КАК тчСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Период КАК Период,
		|	ЕСТЬNULL(уатКадроваяИсторияСотрудниковСрезПоследних.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)) КАК ГрафикРаботы,
		|	ЕСТЬNULL(уатКадроваяИсторияСотрудниковСрезПоследних.ГрафикРаботы.ПроизводственныйКалендарь, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК ПроизводственныйКалендарь,
		|	втСотрудники.Сотрудник КАК Сотрудник,
		|	втСотрудники.Организация КАК Организация
		|ИЗ
		|	втСотрудники КАК втСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
		|				&Период,
		|				(Сотрудник, Организация) В
		|					(ВЫБРАТЬ
		|						втСотрудники.Сотрудник КАК Сотрудник,
		|						втСотрудники.Организация КАК Организация
		|					ИЗ
		|						втСотрудники КАК втСотрудники)) КАК уатКадроваяИсторияСотрудниковСрезПоследних
		|		ПО втСотрудники.Сотрудник = уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|			И втСотрудники.Организация = уатКадроваяИсторияСотрудниковСрезПоследних.Организация");
		
		Запрос.УстановитьПараметр("тчСотрудники", вхСотрудники);
		Запрос.УстановитьПараметр("Период", НачалоДня(ДатаСреза));
		
		тблРез = Запрос.Выполнить().Выгрузить();
	Иначе
		// Получаем всю таблицу сведений о сотрудниках, дальше по таблице будет выполняться поиск в цикле
		ЗапросСведения = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	уатКадроваяИсторияСотрудников.Организация КАК Организация,
		|	уатКадроваяИсторияСотрудников.Период КАК Период,
		|	уатКадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	уатКадроваяИсторияСотрудников.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.уатКадроваяИсторияСотрудников КАК уатКадроваяИсторияСотрудников
		|ГДЕ
		|	уатКадроваяИсторияСотрудников.Период <= &ОкончаниеИнтервала
		|	И уатКадроваяИсторияСотрудников.Сотрудник В(&мсвСотрудники)");
		ЗапросСведения.УстановитьПараметр("мсвСотрудники",      вхСотрудники.ВыгрузитьКолонку("Сотрудник"));
		ЗапросСведения.УстановитьПараметр("ОкончаниеИнтервала", ОкончаниеИнтервала);
		тблСведенияОСотрудниках = ЗапросСведения.Выполнить().Выгрузить();
		
		// Формирование результирующей таблицы по дням со значениями графиков работы и производственных календарей
		тблРез = Новый ТаблицаЗначений;
		тблРез.Колонки.Добавить("Период",                    Новый ОписаниеТипов("Дата"));
		тблРез.Колонки.Добавить("Сотрудник",                 Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		тблРез.Колонки.Добавить("Организация",               Новый ОписаниеТипов("СправочникСсылка.Организации"));
		тблРез.Колонки.Добавить("ГрафикРаботы",              Новый ОписаниеТипов("СправочникСсылка.Календари"));
		тблРез.Колонки.Добавить("ПроизводственныйКалендарь", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
		Для Каждого ТекСтрокаСотрудник Из вхСотрудники Цикл
			ТекДата = НачалоДня(ДатаСреза);
			
			Пока ТекДата <= НачалоДня(ОкончаниеИнтервала) Цикл
				мсвСтрокиПоиска = тблСведенияОСотрудниках.НайтиСтроки(
					Новый Структура("Сотрудник, Организация", ТекСтрокаСотрудник.Сотрудник, ТекСтрокаСотрудник.Организация));
					
				Если мсвСтрокиПоиска.Количество() > 0 Тогда
					// поиск строки сведений с максимальным периодом
					СчМаксПериод = 0;
					ТекПериодСведений = '00010101';
					Для Сч = 0 По мсвСтрокиПоиска.Количество()-1 Цикл
						Если ТекПериодСведений < мсвСтрокиПоиска[Сч].Период Тогда
							ТекПериодСведений = мсвСтрокиПоиска[Сч].Период;
							СчМаксПериод = Сч;
						КонецЕсли;
					КонецЦикла;
					СтрокаСведения = мсвСтрокиПоиска[СчМаксПериод];
					
					НоваяСтрока                           = тблРез.Добавить();
					НоваяСтрока.Период                    = ТекДата;
					НоваяСтрока.Сотрудник                 = ТекСтрокаСотрудник.Сотрудник;
					НоваяСтрока.Организация               = ТекСтрокаСотрудник.Организация;
					НоваяСтрока.ГрафикРаботы              = СтрокаСведения.ГрафикРаботы;
					НоваяСтрока.ПроизводственныйКалендарь = СтрокаСведения.ГрафикРаботы.ПроизводственныйКалендарь;
				КонецЕсли;
			
				ТекДата = ТекДата + 24*3600;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат тблРез;
	
КонецФункции

#КонецОбласти


#Область ПечатиИПодписи

Процедура ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, ДанныеОбъекта, ПодписиИФаксимиле, Ошибки) Экспорт
	
	Для каждого ЭлементСоответствия Из ПодписиИФаксимиле Цикл
		
		ПлашкаПодписи = ПолучитьПлашкуПодписиБезопастно(ОбластьМакета, ЭлементСоответствия.Ключ, , Ошибки);
		Если ПлашкаПодписи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСоответствия.Значение) = Тип("Строка") 
			И ТипЗнч(ДанныеОбъекта) = Тип("СправочникСсылка.Организации")
			И ЗначениеЗаполнено(ДанныеОбъекта[ЭлементСоответствия.Значение]) Тогда
			
			Попытка
				Подпись = ДанныеОбъекта[ЭлементСоответствия.Значение].Факсимиле;
			Исключение
				Подпись = ДанныеОбъекта[ЭлементСоответствия.Значение];
			КонецПопытки;
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Подпись);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСоответствия.Значение) = Тип("СправочникСсылка.ФизическиеЛица") 
			И ЗначениеЗаполнено(ЭлементСоответствия.Значение.Подпись.Факсимиле) Тогда
			Подпись = ЭлементСоответствия.Значение.Подпись.Факсимиле;
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Подпись);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСоответствия.Значение) = Тип("СправочникСсылка.Пользователи")
			И ЗначениеЗаполнено(ЭлементСоответствия.Значение.ФизическоеЛицо.Подпись.Факсимиле) Тогда
			Подпись = ЭлементСоответствия.Значение.ФизическоеЛицо.Подпись.Факсимиле;
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Подпись);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСоответствия.Значение) = Тип("СправочникСсылка.уатПодписи")
			И ЗначениеЗаполнено(ЭлементСоответствия.Значение.Факсимиле) Тогда
			Подпись = ЭлементСоответствия.Значение.Факсимиле;
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Подпись);
			Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
				
				ПлашкаПодписи.Картинка = Новый Картинка(ДвоичныеДанные);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопастно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки)
	
	ПлашкаПодписи = ОбластьМакета.Рисунки[ИмяПлашки];
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для подписи %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	Иначе
		
		ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
	КонецЕсли;
	
	Возврат ПлашкаПодписи;
	
КонецФункции

#КонецОбласти


#Область ИсторияКонтактнойИнформации

// Процедура заполняет поле ЗначениеПолей по данным JSON. Используется при записи объекта
// для автоматического заполнения ЗначенияПолей, т.к. в форме ЗначенияПолей сейчас не заполняются,
// но требуются для обратной совместимости.
//
// Параметры:
//  ИсторияКонтактнойИнформации - ТабличнаяЧасть - Табличная часть, содержащая историю контактной информации.
//
Процедура ЗаполнитьЗначенияXMLИсторииКонтактнойИнформации(ИсторияКонтактнойИнформации) Экспорт
	
	Для Каждого СтрокаИстории Из ИсторияКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СтрокаИстории.Значение)
			И Не ЗначениеЗаполнено(СтрокаИстории.ЗначенияПолей) Тогда
			
			СтрокаИстории.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
				СтрокаИстории.Значение, СтрокаИстории.Представление, СтрокаИстории.Вид);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет поле Значение по данным XML, если оно не заполнено. Вызывается перед записью для того,
// что бы привести значения в контактной информации к новому виду с поддержкой JSON.
//
// Параметры:
//  ИсторияКонтактнойИнформации - ТабличнаяЧасть - Табличная часть, содержащая историю контактной информации.
//
Процедура ЗаполнитьЗначенияJSONИсторииКонтактнойИнформации(ИсторияКонтактнойИнформации) Экспорт
	
	Для Каждого СтрокаИстории Из ИсторияКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СтрокаИстории.ЗначенияПолей)
			И Не ЗначениеЗаполнено(СтрокаИстории.Значение) Тогда
			
			СтрокаИстории.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				СтрокаИстории.ЗначенияПолей, СтрокаИстории.Вид);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для получения контактной информации на дату для нескольких объектов.
//
// Параметры:
//    МассивОбъектов - Массив - владельцы контактной информации.
//    ТипыКИ         - Массив - необязательный, используется, если не задан все типы.
//    ВидыКИ         - Массив - необязательный, используется, если не задан все виды.
//    Дата           - Дата   - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//
// Возвращаемое значение:
//    Таблица значений - результат. Колонки:
//        * Объект        - Ссылка - владелец КИ.
//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//        * ЗначенияПолей - Строка - данные значений полей XML.
//        * Значение      - Строка - данные значений полей JSON.
//        * Представление - Строка - представление КИ.
//
Функция КонтактнаяИнформацияОбъектовНаДату(МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СвязанныеАдресаДляИстории = СвязанныеАдресаДляПолученияИсторическихЗначений();
	
	ВидыКИДляЗапроса = МассивВидовКонтактнойИнформацииДляЗапроса(ВидыКИ, СвязанныеАдресаДляИстории);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,
		ТипыКИ,
		ВидыКИДляЗапроса);
	
	ЗначенияИсторииКонтактнойИнформации = ЗначенияИсторииКонтактнойИнформацииОбъектов(МассивОбъектов, ВидыКИДляЗапроса, Дата);
	
	// Если для адреса есть связанный адрес (см. СвязанныеАдресаДляПолученияИсторическихЗначений()),
	// то нужно заменить его значение на историческое значение связанного адреса,
	// если текущее значение адреса совпадает с текущим значением связанного адреса.
	// Например, в форме редактирования Организации можно указать, что фактический адрес совпадает с юридическим.
	// Для фактического адреса история не ведется, поэтому, если актуальные значения фактического и юридического адреса совпадают,
	// то в качестве значения фактического адреса на дату нужно использовать значение юридического адреса на дату.
	ЗаменитьЗначенияДляСвязанныхАдресовНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации, СвязанныеАдресаДляИстории);
	
	// Для всех адресов теперь нужно заменить значение на историческое, если оно есть.
	// Заменять в предыдущем цикле нельзя, т.к. важно сохранить актуальное значение связанного адреса.
	ЗаменитьЗначенияКонтактнойИнформацииНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации);
	
	// Поле Значение может быть не заполнено, если адрес не редактировался в БСП 3.0.1.
	// В этом случае нужно заполнить его из поля ЗначенияПолей.
	ЗаполнитьПолеЗначениеЕслиПустое(КонтактнаяИнформация);
	
	// Т.к. мы дополнили виды контактной информации связанными адресами, а их могло не быть
	// в списке требуемых видов КИ, то нам нужно их удалить из результата.
	ЗапрашиваемыеВидыКИ = МассивВидовКонтактнойИнформации(ВидыКИ);
	ОставитьТолькоЗапрашиваемыеВидыКонтактнойИнформации(КонтактнаяИнформация, ЗапрашиваемыеВидыКИ);
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

Функция СвязанныеАдресаДляПолученияИсторическихЗначений()
	
	// В список связанных адресов нужно добавлять адреса, которые могут зависить друг от друга.
	// Например, в форме редатирования Организации можно указать, что фактический адрес может быть таким же, как и юридический.
	// Для фактического адреса история не ведется, поэтому, если фактический и юридический адрес
	// совпадают на текущий момент (т.е. фактический адрес не редактируется в форме), то
	// в качестве истории фактического адреса можно использовать историю юридического.
	// Эта функция и определяет такие зависимости.
	
	СвязанныеАдреса = Новый Соответствие;
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Возврат СвязанныеАдреса;
	
КонецФункции

Функция МассивВидовКонтактнойИнформацииДляЗапроса(ВидыКИ, СвязанныеАдреса)
	
	ВидыКИДляЗапроса = МассивВидовКонтактнойИнформации(ВидыКИ);
	
	// Если в массиве видов КИ нет связанного адреса, то добавим его
	// для получения исторических значений.
	Если ЗначениеЗаполнено(ВидыКИДляЗапроса) И ЗначениеЗаполнено(СвязанныеАдреса) Тогда
		Для Каждого СвязанныйАдрес Из СвязанныеАдреса Цикл
			Если ВидыКИДляЗапроса.Найти(СвязанныйАдрес.Ключ) <> Неопределено
				И ВидыКИДляЗапроса.Найти(СвязанныйАдрес.Значение) = Неопределено Тогда
				ВидыКИДляЗапроса.Добавить(СвязанныйАдрес.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидыКИДляЗапроса;
	
КонецФункции

Функция ЗначенияИсторииКонтактнойИнформацииОбъектов(МассивОбъектов, ВидыКИ, Дата)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДатаСведений", Дата);
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Запрос.Параметры.Вставить("Виды", ВидыКИ);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииИсторияКонтактнойИнформации.Ссылка КАК Объект,
	|	ОрганизацииИсторияКонтактнойИнформации.Вид КАК Вид,
	|	ОрганизацииИсторияКонтактнойИнформации.Вид.Тип КАК Тип,
	|	ОрганизацииИсторияКонтактнойИнформации.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииИсторияКонтактнойИнформации.Значение КАК Значение,
	|	ОрганизацииИсторияКонтактнойИнформации.Представление,
	|	ОрганизацииИсторияКонтактнойИнформации.Период
	|ПОМЕСТИТЬ ВТИсторияКонтактныхДанных
	|ИЗ
	|	Справочник.Организации.ИсторияКонтактнойИнформации КАК ОрганизацииИсторияКонтактнойИнформации
	|ГДЕ
	|	ОрганизацииИсторияКонтактнойИнформации.Ссылка В(&МассивОбъектов)
	|	И ОрганизацииИсторияКонтактнойИнформации.Период <= &ДатаСведений
	|	" + ?(ЗначениеЗаполнено(ВидыКИ), "И ОрганизацииИсторияКонтактнойИнформации.Вид В(&Виды)", "");
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыИсторияКонтактнойИнформации.Ссылка,
		|	КонтрагентыИсторияКонтактнойИнформации.Вид,
		|	КонтрагентыИсторияКонтактнойИнформации.Вид.Тип,
		|	КонтрагентыИсторияКонтактнойИнформации.ЗначенияПолей,
		|	КонтрагентыИсторияКонтактнойИнформации.Значение,
		|	КонтрагентыИсторияКонтактнойИнформации.Представление,
		|	КонтрагентыИсторияКонтактнойИнформации.Период
		|ИЗ
		|	Справочник.Контрагенты.ИсторияКонтактнойИнформации КАК КонтрагентыИсторияКонтактнойИнформации
		|ГДЕ
		|	КонтрагентыИсторияКонтактнойИнформации.Ссылка В(&МассивОбъектов)
		|	И КонтрагентыИсторияКонтактнойИнформации.Период <= &ДатаСведений
		|	" + ?(ЗначениеЗаполнено(ВидыКИ), "И КонтрагентыИсторияКонтактнойИнформации.Вид В(&Виды)", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсторияКонтактныхДанных.Объект КАК Объект,
	|	ВТИсторияКонтактныхДанных.Вид КАК Вид,
	|	МАКСИМУМ(ВТИсторияКонтактныхДанных.Период) КАК Период
	|ПОМЕСТИТЬ ВТСрезКонтактнойИнформации
	|ИЗ
	|	ВТИсторияКонтактныхДанных КАК ВТИсторияКонтактныхДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИсторияКонтактныхДанных.Объект,
	|	ВТИсторияКонтактныхДанных.Вид
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсторияКонтактныхДанных.Объект,
	|	ВТИсторияКонтактныхДанных.Тип,
	|	ВТИсторияКонтактныхДанных.Вид,
	|	ВТИсторияКонтактныхДанных.ЗначенияПолей КАК ЗначенияПолей,
	|	ВТИсторияКонтактныхДанных.Значение КАК Значение,
	|	ВТИсторияКонтактныхДанных.Представление КАК Представление
	|ИЗ
	|	ВТИсторияКонтактныхДанных КАК ВТИсторияКонтактныхДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезКонтактнойИнформации КАК ВТСрезКонтактнойИнформации
	|		ПО ВТИсторияКонтактныхДанных.Объект = ВТСрезКонтактнойИнформации.Объект
	|			И ВТИсторияКонтактныхДанных.Вид = ВТСрезКонтактнойИнформации.Вид
	|			И ВТИсторияКонтактныхДанных.Период = ВТСрезКонтактнойИнформации.Период";
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаменитьЗначенияДляСвязанныхАдресовНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации, СвязанныеАдресаДляИстории)
	
	Для Каждого ЗначениеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ВидСвязанногоАдреса = СвязанныеАдресаДляИстории.Получить(ЗначениеКонтактнойИнформации.Вид);
		Если ЗначениеЗаполнено(ВидСвязанногоАдреса) Тогда
			АктуальноеЗначениеСвязанногоАдреса = ЗначениеКонтактнойИнформацииИзТаблицы(ЗначениеКонтактнойИнформации.Объект, ВидСвязанногоАдреса, КонтактнаяИнформация);
			Если ЗначениеЗаполнено(АктуальноеЗначениеСвязанногоАдреса)
				И АктуальноеЗначениеСвязанногоАдреса.Представление = ЗначениеКонтактнойИнформации.Представление Тогда
				// Актуальное значение адреса и связанного адреса совпадает.
				// Следовательно, можно заменить значение адреса на историческое значение связанного адреса.
				ЗаменитьЗначениеКонтактнойИнформацииНаИсторическое(ЗначениеКонтактнойИнформации, ВидСвязанногоАдреса, ЗначенияИсторииКонтактнойИнформации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияКонтактнойИнформацииНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации)
	
	Для Каждого ЗначениеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ЗаменитьЗначениеКонтактнойИнформацииНаИсторическое(ЗначениеКонтактнойИнформации, ЗначениеКонтактнойИнформации.Вид, ЗначенияИсторииКонтактнойИнформации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗначениеКонтактнойИнформацииНаИсторическое(ЗначениеКонтактнойИнформации, Вид, ЗначенияИсторииКонтактнойИнформации)
	
	ИсторическоеЗначениеКонтактнойИнформации = ЗначениеКонтактнойИнформацииИзТаблицы(
		ЗначениеКонтактнойИнформации.Объект, Вид, ЗначенияИсторииКонтактнойИнформации);
	
	Если ЗначениеЗаполнено(ИсторическоеЗначениеКонтактнойИнформации) Тогда
		ЗаполнитьЗначенияСвойств(ЗначениеКонтактнойИнформации, ИсторическоеЗначениеКонтактнойИнформации, "Значение,ЗначенияПолей,Представление");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПолеЗначениеЕслиПустое(КонтактнаяИнформация)
	
	Для Каждого ЗначениеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если Не ЗначениеЗаполнено(ЗначениеКонтактнойИнформации.Значение)
			И ЗначениеЗаполнено(ЗначениеКонтактнойИнформации.ЗначенияПолей) Тогда
			ЗначениеКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				ЗначениеКонтактнойИнформации.ЗначенияПолей, ЗначениеКонтактнойИнформации.Вид);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОставитьТолькоЗапрашиваемыеВидыКонтактнойИнформации(КонтактнаяИнформация, ВидыКИ)
	
	Если Не ЗначениеЗаполнено(ВидыКИ) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыИзТаблицы = КонтактнаяИнформация.Скопировать(, "Вид");
	ВидыИзТаблицы.Свернуть("Вид");
	
	Для Каждого ВидИзТаблицы Из ВидыИзТаблицы Цикл
		Если ВидыКИ.Найти(ВидИзТаблицы.Вид) = Неопределено Тогда
			Отбор = Новый Структура("Вид", ВидИзТаблицы.Вид);
			СтрокиКУдалению = КонтактнаяИнформация.НайтиСтроки(Отбор);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				КонтактнаяИнформация.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция МассивВидовКонтактнойИнформации(ВидыКИ)
	
	ВидыКИДляЗапроса = Неопределено;
	Если ЗначениеЗаполнено(ВидыКИ) Тогда
		Если ТипЗнч(ВидыКИ) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ВидыКИДляЗапроса = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыКИ);
		Иначе
			ВидыКИДляЗапроса = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ВидыКИ);
		КонецЕсли;
	КонецЕсли;
	Возврат ВидыКИДляЗапроса;
	
КонецФункции

// Ищет в таблице контактной информации строку указанного вида контактной информации для указанного объекта.
// ТаблицаКонтактнойИнформации должна быть предварительно получена с помощью УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату.
// Если в таблице есть несколько значений для объекта и вида контактной информации, то будет возвращено первое из
// найденных значений.
//
// Параметры:
//    Объект                      - Ссылка - владелец контактной информации.
//    Вид                         - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, который нужно
//                                                                              получить.
//    ТаблицаКонтактнойИнформации - ТаблицаЗначений - таблица, которую возвращает функция УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - найденная строка контактной информации;
//   Неопределено          - если в таблице ничего не найдено.
//
Функция ЗначениеКонтактнойИнформацииИзТаблицы(Объект, Вид, ТаблицаКонтактнойИнформации) Экспорт
	
	Отбор = Новый Структура("Объект, Вид", Объект, Вид);
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти


#Область ЗащитаПерсональныхДанных

Функция ОбластьПерсональныхДанныхВключена(ИмяОбласти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбластиПерсональныхДанных.ИспользованиеСобытийЖурналаРегистрации КАК ИспользованиеСобытийЖурналаРегистрации
	|ИЗ
	|	РегистрСведений.ОбластиПерсональныхДанных КАК ОбластиПерсональныхДанных
	|ГДЕ
	|	ОбластиПерсональныхДанных.ИмяОбласти = &ИмяОбласти";
	
	Запрос.УстановитьПараметр("ИмяОбласти", ИмяОбласти);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.ИспользованиеСобытийЖурналаРегистрации;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.ФизическиеЛица";
	НовыеСведения.ПоляРегистрации	= "Ссылка";
	НовыеСведения.ПоляДоступа		= "ФИО,СтраховойНомерПФР";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.Сотрудники";
	НовыеСведения.ПоляРегистрации	= "Ссылка,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Наименование";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанныеСотрудников";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ФИОФизическихЛиц";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Фамилия,Имя,Отчество";
	НовыеСведения.ОбластьДанных		= "ИсторияФИО";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ДокументыФизическихЛиц";
	НовыеСведения.ПоляРегистрации	= "Физлицо";
	НовыеСведения.ПоляДоступа		= "Серия,Номер,ДатаВыдачи,СрокДействия,КемВыдан,КодПодразделения,Представление";
	НовыеСведения.ОбластьДанных		= "ПаспортныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ВерсииОбъектов";
	НовыеСведения.ПоляРегистрации	= "Объект";
	НовыеСведения.ПоляДоступа		= "ВерсияОбъекта";
	НовыеСведения.ОбластьДанных 	= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.уатРегистрационныеДокументы";
	НовыеСведения.ПоляРегистрации	= "Ссылка,ВладелецДокументов";
	НовыеСведения.ПоляДоступа		= "Номер,Серия,ВладелецДокументов,ДатаВыдачи,ДатаОкончания,КемВыдан,ОсновнаяКартинка";
	НовыеСведения.ОбластьДанных		= "РегистрационныеДокументыСотрудников";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.уатРегистрационныеДокументыПрисоединенныеФайлы";
	НовыеСведения.ПоляРегистрации	= "ВладелецФайла,Ссылка";
	НовыеСведения.ПоляДоступа		= "Наименование,ПутьКФайлу,Автор,ДатаСоздания";
	НовыеСведения.ОбластьДанных		= "РегистрационныеДокументыСотрудников";
	
КонецПроцедуры

Процедура ЗаполнитьОбластиПерсональныхДанных(ОбластиПерсональныхДанных) Экспорт
	
	Если ОбластиПерсональныхДанных.Найти("ИсторияФИО", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "ИсторияФИО";
		НоваяОбласть.Представление = НСтр("ru='История ФИО физического лица'");
		НоваяОбласть.Родитель = "ЛичныеДанные";
	КонецЕсли;
	
	Если ОбластиПерсональныхДанных.Найти("ЛичныеДанныеСотрудников", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "ЛичныеДанныеСотрудников";
		НоваяОбласть.Представление = НСтр("ru='Личные данные сотрудников'");
	КонецЕсли;
	
	Если ОбластиПерсональныхДанных.Найти("РегистрационныеДокументыСотрудников", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "РегистрационныеДокументыСотрудников";
		НоваяОбласть.Представление = НСтр("ru='Регистрационные документы сотрудников'");
	КонецЕсли;
	
	ОбработкаПДн = ОбластиПерсональныхДанных.Найти("ОбработкаПерсональныхДанных", "Имя");
	Если ОбработкаПДн <> Неопределено Тогда
		ОбработкаПДн.Представление = НСтр("ru='Обработка ПДн (Документ согласие и отзыв согласия на обработку персональных данных)'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОбъектовУАТ(ПараметрыОтбора, Объект) Экспорт
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	
	Если ПараметрыОтбора.Субъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчищеноПерсональныхДанных = 0;
	
	Если ОбластьПерсональныхДанныхВключена("ЛичныеДанные") Тогда
		Для Каждого Субъект Из ПараметрыОтбора.Субъекты Цикл
			Если ТипЗнч(Субъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ОбъектФизЛицо = Субъект.ПолучитьОбъект();
				ОбъектФизЛицо.Записать();
				
				ОчисткаПрисоединенныхФайлов(Субъект);
				
				// Очистка подписи физического лица
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЕСТЬNULL(уатПодписиПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.уатПодписиПрисоединенныеФайлы.ПустаяСсылка)) КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПодписиПрисоединенныеФайлы КАК уатПодписиПрисоединенныеФайлы
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатПодписи КАК уатПодписи
				|			ПО уатПодписиПрисоединенныеФайлы.ВладелецФайла = уатПодписи.Ссылка
				|		ПО (ФизическиеЛица.Подпись.Ссылка = уатПодписи.Ссылка)
				|ГДЕ
				|	ФизическиеЛица.Ссылка = &ФизическоеЛицо";
				
				Запрос.УстановитьПараметр("ФизическоеЛицо", Субъект);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.Ссылка = Справочники.уатПодписиПрисоединенныеФайлы.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					
					ОбъектПодписи = ВыборкаДетальныеЗаписи.Ссылка.ВладелецФайла.ПолучитьОбъект();
					ОбъектПодписи.Наименование = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
					ОбъектПодписи.Записать();
					
					ОбъектПодписи.УстановитьПометкуУдаления(Истина);
					
					ФайлОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ФайлОбъект.Наименование = "УДАЛЕН_" + ФайлОбъект.Наименование;
					ФайлОбъект.Записать();
					
					ФайлОбъект.УстановитьПометкуУдаления(Истина);
					
					Набор = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
					Набор.Отбор.Файл.Установить(ВыборкаДетальныеЗаписи.Ссылка);
					Набор.Прочитать();
					
					Если Набор.Количество() > 0 Тогда 
						Набор[0].ДвоичныеДанныеФайла = Новый ХранилищеЗначения(Неопределено);
						
						Набор.Записать(Истина);
					КонецЕсли;
					
					ОчищеноПерсональныхДанных = ОчищеноПерсональныхДанных + 1;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбластьПерсональныхДанныхВключена("ЛичныеДанныеСотрудников") Тогда
		Для Каждого Субъект Из ПараметрыОтбора.Субъекты Цикл
			Если ТипЗнч(Субъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Сотрудники.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|ГДЕ
				|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
				
				Запрос.УстановитьПараметр("ФизическоеЛицо", Субъект);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ОбъектСотрудник = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ОбъектСотрудник.Наименование = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
					ОбъектСотрудник.ПерсональныеДанныеСкрыты = Истина;
					ОбъектСотрудник.Записать();
					
					ПараметрыОтбора.Субъекты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
					
					ОчисткаПрисоединенныхФайлов(ВыборкаДетальныеЗаписи.Ссылка);
					
					ОчищеноПерсональныхДанных = ОчищеноПерсональныхДанных + 1;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбластьПерсональныхДанныхВключена("РегистрационныеДокументыСотрудников") Тогда
		Для Каждого Субъект Из ПараметрыОтбора.Субъекты Цикл
			Если ТипЗнч(Субъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	уатРегистрационныеДокументы.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО уатРегистрационныеДокументы.ВладелецДокументов = Сотрудники.Ссылка
				|ГДЕ
				|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
				
				Запрос.УстановитьПараметр("ФизическоеЛицо", Субъект);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СуткиВСекундах = 60 * 60 * 24;
					
					ОбъектСправочника = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					
					ОбъектСправочника.Номер = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
					ОбъектСправочника.Серия = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
					ОбъектСправочника.КемВыдан = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
					ОбъектСправочника.Наименование = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
					ОбъектСправочника.ДатаВыдачи = ОбъектСправочника.ДатаВыдачи - СуткиВСекундах * ГенераторСлучайныхЧисел.СлучайноеЧисло(1, 730);
					ОбъектСправочника.ДатаОкончания = ОбъектСправочника.ДатаОкончания - СуткиВСекундах * ГенераторСлучайныхЧисел.СлучайноеЧисло(1, 730);
					
					ОбъектСправочника.Записать();
					
					// Очистка версий для регистрационных документов
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
						
						МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
						ВключеноВерсионирование = МодульВерсионированиеОбъектов.ВключеноВерсионированиеОбъекта("Справочник.уатРегистрационныеДокументы");
						
						Если ВключеноВерсионирование Тогда
							
							ИмяРегистраВерсииОбъектов = "ВерсииОбъектов";
							НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Ссылка);
							
							Объект.ЗаписатьДанные(НаборЗаписей, Истина);
							
						КонецЕсли;
					КонецЕсли;
					
					// Очистка присоединеных файлов регистрационных документов
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	уатРегистрационныеДокументыПрисоединенныеФайлы.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.уатРегистрационныеДокументыПрисоединенныеФайлы КАК уатРегистрационныеДокументыПрисоединенныеФайлы
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
					|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
					|			ПО уатРегистрационныеДокументы.ВладелецДокументов = Сотрудники.Ссылка
					|		ПО уатРегистрационныеДокументыПрисоединенныеФайлы.ВладелецФайла = уатРегистрационныеДокументы.Ссылка
					|ГДЕ
					|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					
					Запрос.УстановитьПараметр("ФизическоеЛицо", Субъект);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						ФайлОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						ФайлОбъект.Наименование = "УДАЛЕН_" + ФайлОбъект.Наименование;
						ФайлОбъект.Записать();
						
						ФайлОбъект.УстановитьПометкуУдаления(Истина);
						
						Набор = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
						Набор.Отбор.Файл.Установить(ВыборкаДетальныеЗаписи.Ссылка);
						Набор.Прочитать();
						
						Если Набор.Количество() > 0 Тогда 
							Набор[0].ДвоичныеДанныеФайла = Новый ХранилищеЗначения(Неопределено);
							
							Набор.Записать(Истина);
						КонецЕсли;
						
					КонецЦикла;
					
					ОчищеноПерсональныхДанных = ОчищеноПерсональныхДанных + 1;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОчищеноПерсональныхДанных > 0 Тогда
		ИмяКлючевойОперации = "уатОперации.ЗащитаПерсональныхДанных.АвтоматическоеСкрытие";
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаПрисоединенныхФайлов(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФайлОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Наименование = "УДАЛЕН_" + ФайлОбъект.Наименование;
		ФайлОбъект.Записать();
		
		ФайлОбъект.УстановитьПометкуУдаления(Истина);
		
		Набор = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
		Набор.Отбор.Файл.Установить(ФайлОбъект.ТекущаяВерсия);
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда 
			Набор[0].ДвоичныеДанныеФайла = Новый ХранилищеЗначения(Неопределено);
			
			Набор.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаСогласияСубъектаПДн(Субъект) Экспорт
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласияНаОбработкуПерсональныхДанных.Действует КАК Действует,
	|	СогласияНаОбработкуПерсональныхДанных.СрокДействия КАК СрокДействия
	|ИЗ
	|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных КАК СогласияНаОбработкуПерсональныхДанных
	|ГДЕ
	|	СогласияНаОбработкуПерсональныхДанных.Субъект = &Субъект
	|	И СогласияНаОбработкуПерсональныхДанных.Период <= &ТекущаяДата";
	
	Запрос.УстановитьПараметр("Субъект", Субъект);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.СрокДействия <> '00010101' Тогда
			Если ВыборкаДетальныеЗаписи.СрокДействия >= ТекущаяДатаСеанса() Тогда
				Результат = ВыборкаДетальныеЗаписи.Действует;
			КонецЕсли;
		Иначе
			Результат = ВыборкаДетальныеЗаписи.Действует;
		КонецЕсли;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент = Ложь) Экспорт
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти


#Область ЗаполнениеСодержанияУслуги

// Функция возвращает шаблон для договора, если индивидуальный шаблон не найден, возвращается стандартный
//
Функция ШаблонЗаполненияПоУслугам(Договор, ПолучательУслуг, ШаблонПоУмолчанию = Истина) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатНастройкиЗаполненияПоУслугам.Шаблон КАК Шаблон
	|ИЗ
	|	РегистрСведений.уатНастройкиЗаполненияПоУслугам КАК уатНастройкиЗаполненияПоУслугам
	|ГДЕ
	|	уатНастройкиЗаполненияПоУслугам.Договор = &Договор");
	Запрос.УстановитьПараметр("Договор", Договор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонЗаполнения = Выборка.Шаблон;
		ШаблонПоУмолчанию = Ложь;
	Иначе
		Если ПолучательУслуг = Перечисления.уатПолучателиУслуг.НашаОрганизация Тогда
			ШаблонЗаполнения = Справочники.уатШаблоныЗаполненияПоУслугам.СтандартныеНастройкиПоступление;
		Иначе
			ШаблонЗаполнения = Справочники.уатШаблоныЗаполненияПоУслугам.СтандартныеНастройкиРеализация;
		КонецЕсли;
		ШаблонПоУмолчанию = Истина;
	КонецЕсли;
	
	Возврат ШаблонЗаполнения;
КонецФункции

// Процедура заполняет поля детализации и содержание услуги
//
Процедура УстановитьДопПоляДетализации(ТабУслуг, Договор, ПолучательУслуг, ШаблонЗаполнения = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ШаблонЗаполнения) Тогда
		ШаблонЗаполнения = ШаблонЗаполненияПоУслугам(Договор, ПолучательУслуг);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ПодготовитьТаблицуУслугПриВводеНаОсновании(ТабУслуг, ДокументОснование);
	КонецЕсли;
		
	// расширение типа для вывода нескольких значений в одной колонке через запятую
	флЕстьКолонкаТС = (ТабУслуг.Колонки.Найти("ТС") <> Неопределено);
	флЕстьКолонкаВодитель = (ТабУслуг.Колонки.Найти("Водитель") <> Неопределено);
	флЕстьКолонкаМодельТС = (ТабУслуг.Колонки.Найти("МодельТС") <> Неопределено);
	ТабУслуг.Колонки.Добавить("ТС_СостТип",       Новый ОписаниеТипов("Строка, СправочникСсылка.уатТС"));
	ТабУслуг.Колонки.Добавить("Водитель_СостТип", Новый ОписаниеТипов("Строка, СправочникСсылка.Сотрудники, СправочникСсылка.ФизическиеЛица"));
	ТабУслуг.Колонки.Добавить("МодельТС_СостТип", Новый ОписаниеТипов("Строка, СправочникСсылка.уатМоделиТС"));
	Для Каждого СтрокаТаблицы Из ТабУслуг Цикл
		Если флЕстьКолонкаТС Тогда
			СтрокаТаблицы.ТС_СостТип = СтрокаТаблицы.ТС;
		КонецЕсли;
		Если флЕстьКолонкаВодитель Тогда
			СтрокаТаблицы.Водитель_СостТип = СтрокаТаблицы.Водитель;
		КонецЕсли;
		Если флЕстьКолонкаМодельТС Тогда
			СтрокаТаблицы.МодельТС_СостТип = СтрокаТаблицы.МодельТС;
		КонецЕсли;
	КонецЦикла;
	Если флЕстьКолонкаТС Тогда
		ТабУслуг.Колонки.Удалить("ТС");
	КонецЕсли;
	Если флЕстьКолонкаВодитель Тогда
		ТабУслуг.Колонки.Удалить("Водитель");
	КонецЕсли;
	Если флЕстьКолонкаМодельТС Тогда
		ТабУслуг.Колонки.Удалить("МодельТС");
	КонецЕсли;
	ТабУслуг.Колонки.ТС_СостТип.Имя = "ТС";
	ТабУслуг.Колонки.Водитель_СостТип.Имя = "Водитель";
	ТабУслуг.Колонки.МодельТС_СостТип.Имя = "МодельТС";
	
	Если ТабУслуг.Колонки.Найти("Прицепы") = Неопределено Тогда
		ТабУслуг.Колонки.Добавить("Прицепы", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Для Каждого ТекСтрокаДетализация Из ШаблонЗаполнения.ДетализацияЗаполнения Цикл
		Если ПустаяСтрока(ТекСтрокаДетализация.ПолеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		// в таблицу добавляется колонка по имени поля регистра
		Если ТабУслуг.Колонки.Найти(ТекСтрокаДетализация.ПолеРегистра) = Неопределено Тогда 
			ТабУслуг.Колонки.Добавить(ТекСтрокаДетализация.ПолеРегистра);
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрокаДетализация.Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДопКолонки = ПолучитьИмяДопКолонки(ТекСтрокаДетализация);
		
		// в таблицу добавляется колонка по имени реквизита поля регистра
		Если ТабУслуг.Колонки.Найти(ИмяДопКолонки) = Неопределено Тогда
			//ТабУслуг.Колонки.Добавить(ИмяДопКолонки, Новый ОписаниеТипов("Строка"));
			ТабУслуг.Колонки.Добавить(ИмяДопКолонки);
		КонецЕсли;
	КонецЦикла;
		
	Если ТабУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопТаблицыДанных = ПолучитьДопТаблицыДанных(ТабУслуг, Договор, ШаблонЗаполнения);
	
	//Если ДопТаблицыДанных = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
			
	Для Каждого СтрокаТаблицы Из ТабУслуг Цикл 
		Для Каждого ТекСтрокаДетализация Из ШаблонЗаполнения.ДетализацияЗаполнения Цикл
			ИмяДопКолонки = ПолучитьИмяДопКолонки(ТекСтрокаДетализация);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяДопКолонки]) Тогда
				СтрокаТаблицы[ИмяДопКолонки] = ПолучитьЗначениеДопПоля(СтрокаТаблицы, ИмяДопКолонки, ДопТаблицыДанных, ШаблонЗаполнения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Свертка по полям детализации заполнения, если установлен флаг "Использовать свертку по полям"
	Если НЕ ЗначениеЗаполнено(ДокументОснование) И ШаблонЗаполнения.СворачиватьПоПолямДетализации Тогда
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			СтрокаСвертки = "Услуга, СтавкаНДС";
		Иначе
			СтрокаСвертки = "Услуга, СтавкаНДС, Валюта";
		КонецЕсли;
		
		Для Каждого ТекСтрокаДетализация Из ШаблонЗаполнения.ДетализацияЗаполнения Цикл
			ИмяДопКолонки = ПолучитьИмяДопКолонки(ТекСтрокаДетализация);
			Если НЕ ПустаяСтрока(ИмяДопКолонки) Тогда
				СтрокаСвертки = СтрокаСвертки + ", " + ИмяДопКолонки;
			КонецЕсли;
		КонецЦикла;
	
		СтрокаСуммы = "Количество, Сумма, СуммаНДС";
		
		ТабУслуг.Свернуть(СтрокаСвертки, СтрокаСуммы);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает строковое содержание услуги по значениям полей строки таблицы услуг
//
Функция ПолучитьСодержание(ТекСтрокаУслуг, Договор, ПолучательУслуг, ШаблонЗаполнения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ШаблонЗаполнения) Тогда
		ШаблонЗаполнения = ШаблонЗаполненияПоУслугам(Договор, ПолучательУслуг);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ШаблонЗаполнения)
		ИЛИ НЕ ЗначениеЗаполнено(ШаблонЗаполнения.Содержание) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаСодержание  = ШаблонЗаполнения.Содержание;
	
	Для Каждого ТекСтрокаДетализация Из ШаблонЗаполнения.ДетализацияЗаполнения Цикл
		ТекИмяКолонки  = ПолучитьИмяДопКолонки(ТекСтрокаДетализация);
		ТекПутьКДанным = СтрЗаменить(ТекИмяКолонки, "_", ".");
		ТекЗначение    = ТекСтрокаУслуг[ТекИмяКолонки];
		стрПодстановка = "";
		
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
			Если ТекИмяКолонки = "ПараметрВыработки" Тогда
				Если ЗначениеЗаполнено(ТекЗначение.НаименованиеДляДокументов) Тогда
					стрПодстановка = ТекЗначение.НаименованиеДляДокументов;
				Иначе
					стрПодстановка = ТекЗначение.Наименование;
				КонецЕсли;
			ИначеЕсли ТекСтрокаДетализация.Реквизит = "АдресОтправления"
				ИЛИ ТекСтрокаДетализация.Реквизит = "АдресПрибытия"
				ИЛИ ТекСтрокаДетализация.Реквизит = "АдресНазначения"
				ИЛИ ТекСтрокаДетализация.Реквизит = "АдресДоставки" Тогда
				стрПодстановка = "";
				Попытка
					Если ТекСтрокаДетализация.Реквизит = "АдресОтправления" Тогда
						ИмяШаблонаПункта = "Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу";
					Иначе
						ИмяШаблонаПункта = "Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу";
					КонецЕсли;
					стрПодстановка = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(ИмяШаблонаПункта, ТекЗначение);
				Исключение
				КонецПопытки;
				Если ПустаяСтрока(стрПодстановка) Тогда
					стрПодстановка = СокрЛП(ТекЗначение);
				КонецЕсли;
			Иначе
				Если ТипЗнч(ТекЗначение) = Тип("Дата") Тогда
					ТекЗначение = ПолучитьДатуПоФормату(ТекЗначение, ШаблонЗаполнения);
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекЗначение)) Тогда
					ТекЗначение = ПолучитьПредставлениеДокумента(ТекЗначение, ШаблонЗаполнения);
				КонецЕсли;
				
				стрПодстановка = СокрЛП(ТекЗначение);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСодержание = СтрЗаменить(СтрокаСодержание, "[" + ТекПутьКДанным + "]", стрПодстановка);
	КонецЦикла;
	
	Возврат СтрокаСодержание;
	
КонецФункции

// Функция возвращает Истина, если поле детализации указано в шаблоне
//
Функция ВключеноПолеДетализации(Поле, ШаблонЗаполнения) Экспорт
	Возврат (ШаблонЗаполнения.ДетализацияЗаполнения.Найти(Поле, "ПолеРегистра") <> Неопределено);
КонецФункции

Функция ПолучитьЗначениеДопПоля(СтрокаТаблицы, ИмяДопКолонки, ДопТаблицыДанных = Неопределено, ШаблонЗаполнения)
	
	ЗначениеДопПоля = "";
	ТаблицаДанных = Неопределено;
	
	СтруктураПоиска = Новый Структура("Регистратор", СтрокаТаблицы.Регистратор);
	Если ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатТТД") Тогда
		СтруктураПоиска.Вставить("НомерСтроки", СтрокаТаблицы.НомерСтроки);
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(ИмяДопКолонки, "_");
	Если ПозицияРазделителя = 0 Тогда
		ИмяПоля = ИмяДопКолонки;
		ИмяРеквизита = "";
	Иначе
		ИмяПоля = Лев(ИмяДопКолонки, ПозицияРазделителя - 1);
		ИмяРеквизита = Сред(ИмяДопКолонки, ПозицияРазделителя + 1);
	КонецЕсли;
	
	Если ИмяПоля = "Регистратор" И ИмяРеквизита = "АдресПрибытия" Тогда
		Если ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатТТД") Тогда
			ИмяРеквизита = "АдресДоставки";
		Иначе
			ИмяРеквизита = "АдресНазначения";
		КонецЕсли;
	КонецЕсли;
			
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Если ИмяПоля = "ТоварГруз" Тогда
			ТаблицаДанных = ДопТаблицыДанных.ТаблицаТоварГруз;
		КонецЕсли;
		
	Иначе
		МодульуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
		ЗначениеДопПоля = МодульуатОбщегоНазначения_проф.ПолучитьЗначениеДопПоля(СтрокаТаблицы, ИмяПоля, ДопТаблицыДанных, СтруктураПоиска, ТаблицаДанных);
		
	КонецЕсли;
	
	Если ИмяПоля = "НомерПоУчетуКонтрагента" Тогда
		Если ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатТТД") Тогда
			ЗначениеДопПоля = СтрокаТаблицы.Регистратор.НомерТТНКонтрагента;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
			ИЛИ ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			ЗначениеДопПоля = СтрокаТаблицы.Заказ.НомерПоУчетуЗаказчика;
		КонецЕсли;
	
	Иначе
		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоля]) Тогда
			Если ПустаяСтрока(ИмяРеквизита) Тогда // просто поле исходной таблицы, переносим как есть
				ЗначениеДопПоля = СтрокаТаблицы[ИмяПоля];
			Иначе // реквизит или доп. реквизит поля
				Если ЭтоДопРеквизит(СтрокаТаблицы, ИмяПоля, ИмяРеквизита) Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоля]) Тогда
						мсвСвойства = УправлениеСвойствами.СвойстваОбъекта(СтрокаТаблицы[ИмяПоля]);
						Для Каждого ТекСвойство Из мсвСвойства Цикл
							Если ТекСвойство.ИдентификаторДляФормул = ИмяРеквизита Тогда
								ЗначениеДопПоля = УправлениеСвойствами.ЗначениеСвойства(СтрокаТаблицы[ИмяПоля], ТекСвойство);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Попытка
						ЗначениеДопПоля = СтрокаТаблицы[ИмяПоля][ИмяРеквизита];
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаДанных <> Неопределено Тогда
		мсвСтрокиПоиск = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		СписокЗначенийПоля = Новый СписокЗначений;
		
		Для Каждого СтрокаТаблицыДанных Из мсвСтрокиПоиск Цикл 
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанных[ИмяПоля]) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекЗначениеДопПоля = "";
			
			Если ПустаяСтрока(ИмяРеквизита) Тогда // исходное поле
				ТекЗначениеДопПоля = СтрокаТаблицыДанных[ИмяПоля];
			Иначе // реквизит или доп. реквизит поля
				Если ЭтоДопРеквизит(СтрокаТаблицыДанных, ИмяПоля, ИмяРеквизита) Тогда
					мсвСвойства = УправлениеСвойствами.СвойстваОбъекта(СтрокаТаблицыДанных[ИмяПоля]);
					Для Каждого ТекСвойство Из мсвСвойства Цикл
						Если ТекСвойство.ИдентификаторДляФормул = ИмяРеквизита Тогда
							ТекЗначениеДопПоля = УправлениеСвойствами.ЗначениеСвойства(СтрокаТаблицыДанных[ИмяПоля], ТекСвойство);
						КонецЕсли;
					КонецЦикла;
				Иначе
					Попытка
						ТекЗначениеДопПоля = СтрокаТаблицыДанных[ИмяПоля][ИмяРеквизита];
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокЗначенийПоля.НайтиПоЗначению(ТекЗначениеДопПоля) = Неопределено Тогда 
				СписокЗначенийПоля.Добавить(ТекЗначениеДопПоля);
			КонецЕсли;
		КонецЦикла;
		
		СписокЗначенийПоля.СортироватьПоЗначению();
		
		ЗначениеДопПоля = "";
		Для Каждого ТекЭлемент Из СписокЗначенийПоля Цикл
			Если ТекЭлемент.Значение = Неопределено Тогда
				ТекЗначениеДопПоля = ТекЭлемент.Значение;
			ИначеЕсли ТипЗнч(ТекЭлемент.Значение) = Тип("Дата") Тогда
				ТекЗначениеДопПоля = ПолучитьДатуПоФормату(ТекЭлемент.Значение, ШаблонЗаполнения);
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекЭлемент.Значение)) Тогда
				ТекЗначениеДопПоля = ПолучитьПредставлениеДокумента(ТекЭлемент.Значение, ШаблонЗаполнения);
			Иначе
				ТекЗначениеДопПоля = ТекЭлемент.Значение;
			КонецЕсли;
			
			ЗначениеДопПоля = ЗначениеДопПоля + ", " + ТекЗначениеДопПоля;
		КонецЦикла;
		Если НЕ ПустаяСтрока(ЗначениеДопПоля) Тогда
			ЗначениеДопПоля = Сред(ЗначениеДопПоля, 3);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ЗначениеДопПоля;
КонецФункции

Функция ЭтоДопРеквизит(СтрокаТаблицы, ИмяПоля, ИмяРеквизита)
	Если ИмяРеквизита = "Код" ИЛИ ИмяРеквизита = "Наименование"
		ИЛИ ИмяРеквизита = "Номер" ИЛИ ИмяРеквизита = "Дата" Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если ИмяПоля = "Регистратор" Тогда
		МетаданныеПоля = СтрокаТаблицы.Регистратор.Метаданные();
	ИначеЕсли ИмяПоля = "Заказ" Тогда
		МетаданныеПоля = Метаданные.Документы.уатЗаказГрузоотправителя;
	ИначеЕсли ИмяПоля = "ЗаказПеревозчику" Тогда
		МетаданныеПоля = Метаданные.Документы["уатЗаказПеревозчику_уэ"]; // нет в СТД
	ИначеЕсли ИмяПоля = "ПутевойЛист" Тогда
		МетаданныеПоля = Метаданные.Документы.уатПутевойЛист;
	ИначеЕсли ИмяПоля = "Услуга" Тогда
		МетаданныеПоля = Метаданные.Справочники.Номенклатура;	
	ИначеЕсли ИмяПоля = "ПараметрВыработки" Тогда
		МетаданныеПоля = Метаданные.Справочники.уатПараметрыВыработки;
	ИначеЕсли ИмяПоля = "Маршрут" Тогда
		МетаданныеПоля = Метаданные.Справочники.уатМаршруты;
	ИначеЕсли ИмяПоля = "ОбъектСтроительства" Тогда
		МетаданныеПоля = Метаданные.Справочники.уатОбъектыСтроительства;
	ИначеЕсли ИмяПоля = "ТС" ИЛИ ИмяПоля = "Прицепы" Тогда
		МетаданныеПоля = Метаданные.Справочники.уатТС;
	ИначеЕсли ИмяПоля = "Водитель" Тогда
		МетаданныеПоля = Метаданные.Справочники.Сотрудники;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Рез = (МетаданныеПоля.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	
	Возврат Рез;
КонецФункции

Функция ПолучитьДопТаблицыДанных(ТабУслуг, Договор, ШаблонЗаполнения)
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		МодульуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
		ДопТаблицыДанных = МодульуатОбщегоНазначения_проф.ПолучитьДопТаблицыДанных(ТабУслуг, Договор, ШаблонЗаполнения);
		Возврат ДопТаблицыДанных;
	КонецЕсли;
	
	ДопТаблицыДанных = Новый Структура;
	
	Если НЕ ВключеноПолеДетализации("ТоварГруз", ШаблонЗаполнения) Тогда
		Возврат ДопТаблицыДанных;
	КонецЕсли;
	
	мсвЗаказыНаТС = Новый Массив;
	мсвТТД        = Новый Массив;
	
	Для Каждого ТекСтрока Из ТабУслуг Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") И мсвЗаказыНаТС.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
			мсвЗаказыНаТС.Добавить(ТекСтрока.Регистратор);
		ИначеЕсли ТипЗнч(ТекСтрока.Регистратор) = Тип("ДокументСсылка.уатТТД") И мсвТТД.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
			мсвТТД.Добавить(ТекСтрока.Регистратор);
		КонецЕсли;
	КонецЦикла; 
	
	СтруктураРегистраторы = Новый Структура;
	СтруктураРегистраторы.Вставить("ЗаказНаТС", мсвЗаказыНаТС);
	СтруктураРегистраторы.Вставить("ТТД",       мсвТТД);
	
	ДопТаблицыДанных.Вставить("ТаблицаТоварГруз", ПолучитьТаблицуТоварГруз(СтруктураРегистраторы, Договор));
	
	Возврат ДопТаблицыДанных;
КонецФункции

Функция ПолучитьТаблицуТоварГруз(СтруктураРегистраторы, Договор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Запрос.УстановитьПараметр("мсвЗаказыНаТС",      СтруктураРегистраторы.ЗаказНаТС);
	Запрос.УстановитьПараметр("мсвТТД",             СтруктураРегистраторы.ТТД);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Номенклатура КАК ТоварГруз,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК Регистратор,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК ЗаказНаТС,
	|	0 КАК НомерСтроки
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка В(&мсвЗаказыНаТС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДСтоимость.Номенклатура,
	|	уатТТДСтоимость.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	уатТТДСтоимость.НомерСтроки
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|ГДЕ
	|	уатТТДСтоимость.Ссылка В(&мсвТТД)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьИмяДопКолонки(ТекСтрокаДетализация)
	ИмяДопКолонки = ТекСтрокаДетализация.ПолеРегистра;
	Если НЕ ПустаяСтрока(ТекСтрокаДетализация.Реквизит) Тогда
		ИмяДопКолонки = ИмяДопКолонки + "_" + ТекСтрокаДетализация.Реквизит;
	КонецЕсли;
	
	Возврат ИмяДопКолонки;
КонецФункции

Процедура ПодготовитьТаблицуУслугПриВводеНаОсновании(ДанныеЗаполнения, мДокументОснование)
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		МодульуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
		МодульуатОбщегоНазначения_проф.ПодготовитьТаблицуУслугПриВводеНаОсновании(ДанныеЗаполнения, мДокументОснование);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДокументОснование) = Тип("ДокументСсылка.уатТТД") Тогда
		ВидДокумента = 2;
		ОбъектСтроительства = ДанныеЗаполнения[0].ОбъектСтроительства;
		Маршрут = ДанныеЗаполнения[0].Маршрут;
	Иначе //Заказ на ТС
		ВидДокумента = 0;
		ОбъектСтроительства = мДокументОснование.ОбъектСтроительства;
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			Маршрут = мДокументОснование.Маршрут;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		ДанныеЗаполнения = уатОбщегоНазначенияСервер.ПреобразоватьМассивСтрокВТаблицу(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Колонки.Найти("Услуга") = Неопределено Тогда
		Если ДанныеЗаполнения.Колонки.Найти("Номенклатура") = Неопределено Тогда
			ДанныеЗаполнения.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Иначе
			ДанныеЗаполнения.Колонки.Номенклатура.Имя = "Услуга";
		КонецЕсли;
	КонецЕсли;
	
	флЕстьКолонкаТариф = (ДанныеЗаполнения.Колонки.Найти("Тариф") <> Неопределено);
		
	СписокКолонкиДобавить = Новый Структура("Регистратор, ПараметрВыработки, ТС, МодельТС, Водитель");
	Для Каждого ТекКолонка Из СписокКолонкиДобавить Цикл
		Если ДанныеЗаполнения.Колонки.Найти(ТекКолонка.Ключ) = Неопределено Тогда
			ДанныеЗаполнения.Колонки.Добавить(ТекКолонка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполнения.ЗаполнитьЗначения(мДокументОснование, "Регистратор");
	
	Если ДанныеЗаполнения.Колонки.Найти("ЗаказНаТС") = Неопределено
		И ДанныеЗаполнения.Колонки.Найти("Заказ") = Неопределено Тогда
		ДанныеЗаполнения.Колонки.Добавить("Заказ");
		Если ВидДокумента = 0 Тогда
			ДанныеЗаполнения.ЗаполнитьЗначения(мДокументОснование, "Заказ");
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения.Колонки.Найти("ЗаказНаТС") <> Неопределено
		И ДанныеЗаполнения.Колонки.Найти("Заказ") = Неопределено Тогда
		ДанныеЗаполнения.Колонки.ЗаказНаТС.Имя = "Заказ";
	КонецЕсли;
		                                                       
	Для Каждого ТекУслуга Из ДанныеЗаполнения Цикл
		ТекУслуга.Маршрут = Маршрут;
		
		Если флЕстьКолонкаТариф И ЗначениеЗаполнено(ТекУслуга.Тариф) Тогда
			ТекУслуга.ПараметрВыработки = ТекУслуга.Тариф.ПараметрВыработки;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьПредставлениеДокумента(ДокументСсылка, ШаблонЗаполнения)
	ТекФормат = ?(ЗначениеЗаполнено(ШаблонЗаполнения.ФорматДаты), ШаблонЗаполнения.ФорматДаты, "дд.ММ.гггг");
	ДокументПредставление = СтрШаблон("№ %1 от %2", СокрЛП(ДокументСсылка.Номер),
		Формат(ДокументСсылка.Дата, "ДФ='" + ТекФормат + "'"));
	Возврат ДокументПредставление;
КонецФункции

Функция ПолучитьДатуПоФормату(ДатаЗначение, ШаблонЗаполнения)
	ТекФормат = ?(ЗначениеЗаполнено(ШаблонЗаполнения.ФорматДаты), ШаблонЗаполнения.ФорматДаты, "дд.ММ.гггг ЧЧ:мм");
	ДатаФормат = Формат(ДатаЗначение, "ДФ ='" + ТекФормат + "'");
	Возврат ДатаФормат;
КонецФункции
					
#КонецОбласти


#Область Прочее

// Функция - Возвращает общий модуль по его наименованию
//
// Параметры:
//  Имя	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Общий модуль ""%1"" не найден.';en='Common module ""%1"" was not found.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция ПолучитьАдресСтрокой(Адрес) Экспорт
	Результат = "";
	Если ТипЗнч(Адрес) = Тип("СправочникСсылка.уатПунктыНазначения") тогда
		Если ЗначениеЗаполнено(Адрес.ШифрПункта) Тогда
			Результат = Адрес.ШифрПункта;
		ИначеЕсли ПустаяСтрока(Адрес.Адрес) тогда
			Результат = Адрес.Наименование;
		Иначе
			Результат = Адрес.Адрес;
		КонецЕсли;
	ИначеЕсли типЗнч(Адрес) = тип("Строка") тогда
		Результат = Адрес;
	Иначе
		Результат = "";
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Процедура - Изменяет в заголовке элемента формы имя "1С" на "1С-Рарус"
//
// Параметры:
//  Форма				 - 	 - 
//  ИмяЗаголовка		 - 	 - 
//  РасширеннаяПодсказка - 	 - 
//
Процедура ИзменитьПолучателяСтатисики(Форма, ИмяЗаголовка, РасширеннаяПодсказка = Ложь, СписокВыбора = Ложь) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЗаголовка);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокВыбора Тогда
		// список выбора
		ЭлементФормы = ЭлементФормы.СписокВыбора[0];
		ЭлементФормы.Представление = СтрЗаменить(ЭлементФормы.Представление, """1С""", """1С-Рарус""");
	ИначеЕсли РасширеннаяПодсказка Тогда
		// расширенная подсказка
		ЭлементФормы = ЭлементФормы.РасширеннаяПодсказка;
		ЭлементФормы.Заголовок = СтрЗаменить(ЭлементФормы.Заголовок, """1С""", """1С-Рарус""");
	Иначе
		// заголовок
		ЭлементФормы.Заголовок = СтрЗаменить(ЭлементФормы.Заголовок, """1С""", """1С-Рарус""");
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Если Не уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"rarus.ru/downloads/4189",
			443,
			НСтр("ru='Компонента «Сhromium»'")
		);
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTP",
			"yandex.ru",
			80,
			НСтр("ru='Проверка подключения к интернету';")
		);
		НовыеРазрешения.Добавить(Разрешение);
		
		ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗСистемыМониторинга(НовыеРазрешения);
		ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗПЦ(НовыеРазрешения);
		ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗСервисовШтрафов(НовыеРазрешения);
		ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗСервисовПарковок(НовыеРазрешения);
		ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗБирж(НовыеРазрешения);

		МодульМобильноеПриложениеВодителяСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("уатМобильноеПриложениеВодителяСерверПовтИсп");
		стрНастроек = МодульМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
		АдресСервераМП = стрНастроек.АдресСервераМП;
		
		Если НРег(Лев(АдресСервераМП, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
			АдресСервераМП = СтрЗаменить(АдресСервераМП, "https://", "");
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
			АдресСервераМП = СтрЗаменить(АдресСервераМП, "http://", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСервераМП) Тогда
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
				АдресСервераМП,
				?(ИспользоватьЗащищенноеСоединение, 443, 80),
				НСтр("ru = 'Сервер мобильного приложения'; en = 'Mobile applications server'")
			);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЕсли;
		
		ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамКартографии(НовыеРазрешения);
	КонецЕсли;
	
	АдресСервера = ЛицензированиеСервер.АдресСервераЛицензированияКонстанта();
	
	Если Прав(АдресСервера, 1) = "/" Тогда
		АдресСервера = Лев(АдресСервера, СтрДлина(АдресСервера)-1);
	КонецЕсли;
		
	Если НРег(Лев(АдресСервера, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		АдресСервера = СтрЗаменить(АдресСервера, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		АдресСервера = СтрЗаменить(АдресСервера, "http://", "");
	КонецЕсли;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		АдресСервера,
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер лицензирования'; en = 'License server'")
	);
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗСистемыМониторинга(НовыеРазрешения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатУчетныеЗаписиСистемыМониторинга.СистемаМониторинга КАК СистемаМониторинга,
	               |	ВЫРАЗИТЬ(уатУчетныеЗаписиСистемыМониторинга.АдресСервиса КАК СТРОКА(250)) КАК АдресСервиса
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиСистемыМониторинга КАК уатУчетныеЗаписиСистемыМониторинга
	               |ГДЕ
	               |	НЕ уатУчетныеЗаписиСистемыМониторинга.ПометкаУдаления
	               |	И НЕ уатУчетныеЗаписиСистемыМониторинга.СистемаМониторинга.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСервиса = Выборка.АдресСервиса;
		Если Прав(АдресСервиса, 1) = "/" Тогда
			АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса) - 1);
		КонецЕсли;
		
		Если НРег(Лев(АдресСервиса, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
			АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
			АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
		КонецЕсли;
		
		СистемаМониторинга = СтрШаблон(НСтр("ru='Интеграция с %1'"), Выборка.СистемаМониторинга);
		
		Если ЗначениеЗаполнено(АдресСервиса) Тогда
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
			АдресСервиса,
			?(ИспользоватьЗащищенноеСоединение, 443, 80),
			СистемаМониторинга
			);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗСервисовШтрафов(НовыеРазрешения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатУчетныеЗаписиСервисовШтрафов.ВнешняяСистема КАК ВнешняяСистема,
	|	ВЫРАЗИТЬ(уатУчетныеЗаписиСервисовШтрафов.АдресСервиса КАК СТРОКА(250)) КАК АдресСервиса
	|ИЗ
	|	Справочник.уатУчетныеЗаписиСервисовШтрафов КАК уатУчетныеЗаписиСервисовШтрафов
	|ГДЕ
	|	НЕ уатУчетныеЗаписиСервисовШтрафов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСервиса = Выборка.АдресСервиса;
		Если Прав(АдресСервиса, 1) = "/" Тогда
			АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса) - 1);
		КонецЕсли;
		
		Если НРег(Лев(АдресСервиса, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
			АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
			АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
		КонецЕсли;
		
		ВнешняяСистема = СтрШаблон(НСтр("ru='Интеграция с %1'"), Выборка.ВнешняяСистема);
		
		Если ЗначениеЗаполнено(АдресСервиса) Тогда
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
			АдресСервиса,
			?(ИспользоватьЗащищенноеСоединение, 443, 80),
			ВнешняяСистема
			);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗСервисовПарковок(НовыеРазрешения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатУчетныеЗаписиСервисовПарковок.СервисПарковок КАК ВнешняяСистема,
	|	ВЫРАЗИТЬ(уатУчетныеЗаписиСервисовПарковок.АдресСервиса КАК СТРОКА(250)) КАК АдресСервиса
	|ИЗ
	|	Справочник.уатУчетныеЗаписиСервисовПарковок КАК уатУчетныеЗаписиСервисовПарковок
	|ГДЕ
	|	НЕ уатУчетныеЗаписиСервисовПарковок.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСервиса = Выборка.АдресСервиса;
		Если Прав(АдресСервиса, 1) = "/" Тогда
			АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса) - 1);
		КонецЕсли;
		
		Если НРег(Лев(АдресСервиса, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
			АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
			АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
		КонецЕсли;
		
		ВнешняяСистема = СтрШаблон(НСтр("ru='Интеграция с %1'"), Выборка.ВнешняяСистема);
		
		Если ЗначениеЗаполнено(АдресСервиса) Тогда
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
			АдресСервиса,
			?(ИспользоватьЗащищенноеСоединение, 443, 80),
			ВнешняяСистема
			);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗПЦ(НовыеРазрешения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатУчетныеЗаписиПЦ.ВнешняяСистема КАК ВнешняяСистема,
	|	ВЫРАЗИТЬ(уатУчетныеЗаписиПЦ.АдресСервиса КАК СТРОКА(250)) КАК АдресСервиса
	|ИЗ
	|	Справочник.уатУчетныеЗаписиПЦ КАК уатУчетныеЗаписиПЦ
	|ГДЕ
	|	НЕ уатУчетныеЗаписиПЦ.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСервиса = Выборка.АдресСервиса;
		Если Прав(АдресСервиса, 1) = "/" Тогда
			АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса) - 1);
		КонецЕсли;
		
		Если НРег(Лев(АдресСервиса, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
			АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
			АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
		КонецЕсли;
		
		ВнешняяСистема = СтрШаблон(НСтр("ru='Интеграция с %1'"), Выборка.ВнешняяСистема);
		
		Если ЗначениеЗаполнено(АдресСервиса) Тогда
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
			АдресСервиса,
			?(ИспользоватьЗащищенноеСоединение, 443, 80),
			ВнешняяСистема
			);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамУЗБирж(НовыеРазрешения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатУчетныеЗаписиБирж.Биржа КАК ВнешняяСистема,
	|	ВЫРАЗИТЬ(уатУчетныеЗаписиБирж.АдресСервиса КАК СТРОКА(250)) КАК АдресСервиса
	|ИЗ
	|	Справочник.уатУчетныеЗаписиБирж КАК уатУчетныеЗаписиБирж
	|ГДЕ
	|	НЕ уатУчетныеЗаписиБирж.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСервиса = Выборка.АдресСервиса;
		Если Прав(АдресСервиса, 1) = "/" Тогда
			АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса) - 1);
		КонецЕсли;
		
		Если НРег(Лев(АдресСервиса, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
			АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
			АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
		КонецЕсли;
		
		ВнешняяСистема = СтрШаблон(НСтр("ru='Интеграция с биржей %1'"), Выборка.ВнешняяСистема);
		
		Если ЗначениеЗаполнено(АдресСервиса) Тогда
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
			АдресСервиса,
			?(ИспользоватьЗащищенноеСоединение, 443, 80),
			ВнешняяСистема
			);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. процедуру
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсамКартографии(НовыеРазрешения)
	
	МодульЭлектронныеКартыСервер = ОбщегоНазначения.ОбщийМодуль("уатЭлектронныеКартыСервер");
	
	OSM_НастройкаКартографии    = МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Картография_Сервер");
	Картография_Ключ		    = МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Картография_Ключ");
	
	OSM_НастройкаМаршрутизации  = МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПостроениеМаршрутов_Сервер");
	ПостроениеМаршрутов_Ключ    = МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПостроениеМаршрутов_Ключ");
	OSM_НастройкаГеокодирования = МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Геокодирование_Сервер");
	Геокодирование_Ключ		    = МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Геокодирование_Ключ");
	
	ПодсказкиАдресов_ТипПоставщика	= МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПодсказкиАдресов_ТипПоставщика");
	ПодсказкиАдресов_Сервер			= МодульЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПодсказкиАдресов_Сервер");
	
	Если Прав(OSM_НастройкаКартографии, 1) = "/" Тогда
		OSM_НастройкаКартографии = Лев(OSM_НастройкаКартографии, СтрДлина(OSM_НастройкаКартографии)-1);
	КонецЕсли;
	Если Прав(OSM_НастройкаМаршрутизации, 1) = "/" Тогда
		OSM_НастройкаМаршрутизации = Лев(OSM_НастройкаМаршрутизации, СтрДлина(OSM_НастройкаМаршрутизации)-1);
	КонецЕсли;
	Если Прав(OSM_НастройкаГеокодирования, 1) = "/" Тогда
		OSM_НастройкаГеокодирования = Лев(OSM_НастройкаГеокодирования, СтрДлина(OSM_НастройкаГеокодирования)-1);
	КонецЕсли;
	Если Прав(ПодсказкиАдресов_Сервер, 1) = "/" Тогда
		ПодсказкиАдресов_Сервер = Лев(ПодсказкиАдресов_Сервер, СтрДлина(ПодсказкиАдресов_Сервер)-1);
	КонецЕсли;

	Если НРег(Лев(ПодсказкиАдресов_Сервер, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		ПодсказкиАдресов_Сервер = СтрЗаменить(ПодсказкиАдресов_Сервер, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		ПодсказкиАдресов_Сервер = СтрЗаменить(ПодсказкиАдресов_Сервер, "http://", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодсказкиАдресов_Сервер) Тогда
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		ПодсказкиАдресов_Сервер,
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер подсказок при вводе адресов'")
		);
		НовыеРазрешения.Добавить(Разрешение);
	КонецЕсли;
	
	Если НРег(Лев(OSM_НастройкаКартографии, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		OSM_НастройкаКартографии = СтрЗаменить(OSM_НастройкаКартографии, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		OSM_НастройкаКартографии = СтрЗаменить(OSM_НастройкаКартографии, "http://", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(OSM_НастройкаКартографии) Тогда
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		OSM_НастройкаКартографии,
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер картографии'; en = 'Mapping server'")
		);
		НовыеРазрешения.Добавить(Разрешение);
	ИначеЕсли ЗначениеЗаполнено(Картография_Ключ) Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		"enterprise.api-maps.yandex.ru",
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер картографии'; en = 'Mapping server'")
		);
		НовыеРазрешения.Добавить(Разрешение);
		
	КонецЕсли;
	
	Если НРег(Лев(OSM_НастройкаМаршрутизации, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		OSM_НастройкаМаршрутизации = СтрЗаменить(OSM_НастройкаМаршрутизации, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		OSM_НастройкаМаршрутизации = СтрЗаменить(OSM_НастройкаМаршрутизации, "http://", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(OSM_НастройкаМаршрутизации) Тогда
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		OSM_НастройкаМаршрутизации,
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер матрицы расстояний и построение маршрутов'; en = 'Routing server'")
		);
		НовыеРазрешения.Добавить(Разрешение);
	ИначеЕсли ЗначениеЗаполнено(ПостроениеМаршрутов_Ключ) Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		"api.routing.yandex.net",
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер матрицы расстояний и построения маршрутов'; en = 'Routing server'")
		);
		НовыеРазрешения.Добавить(Разрешение);
	КонецЕсли;
	
	Если НРег(Лев(OSM_НастройкаГеокодирования, 8)) = НРег("https://") Тогда 
		ИспользоватьЗащищенноеСоединение = Истина;
		OSM_НастройкаГеокодирования = СтрЗаменить(OSM_НастройкаГеокодирования, "https://", "");
	Иначе 
		ИспользоватьЗащищенноеСоединение = Ложь;
		OSM_НастройкаГеокодирования = СтрЗаменить(OSM_НастройкаГеокодирования, "http://", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(OSM_НастройкаГеокодирования) Тогда
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		OSM_НастройкаГеокодирования,
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер геокодирования'; en = 'Geocoding server'")
		);
		НовыеРазрешения.Добавить(Разрешение);
	ИначеЕсли ЗначениеЗаполнено(Геокодирование_Ключ) Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		?(ИспользоватьЗащищенноеСоединение, "HTTPS", "HTTP"),
		"geocode-maps.yandex.ru",
		?(ИспользоватьЗащищенноеСоединение, 443, 80),
		НСтр("ru = 'Сервер геокодирования'; en = 'Geocoding server'")
		);
		НовыеРазрешения.Добавить(Разрешение);
	КонецЕсли;

КонецПроцедуры

// Проверяет наличие у пользователя минимально необходимого набора ролей для запуска системы
//
&НаСервере
Функция КонтрольМинимальногоНабораРолейДляЗапускаСистемы() Экспорт
	Возврат РольДоступна("ПолныеПрава") 
			ИЛИ (РольДоступна("БазовыеПраваБСП") 
			ИЛИ РольДоступна("БазовыеПраваВнешнихПользователейБСП")) 
			И ПравоДоступа("Использование", Метаданные.Обработки.УправлениеЛицензированием);
КонецФункции

// Процедура выполняет проверку переданного значения на заполненность
//
// Параметры:
//  Значение     - проверяемое значение
//
// Возвращаемое значение:
//  Результат проверки
Функция уатЗначениеНеЗаполнено(Значение) Экспорт
	Попытка
		Возврат НЕ ЗначениеЗаполнено(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Обработчик подписки на событие "уатУдалениеЗаписиПрисоединенныхФайловВМаршрутныхЛистах".
//
Процедура уатУдалениеЗаписиПрисоединенныхФайловВМаршрутныхЛистахПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("ПрисоединенныйФайл", Источник.Ссылка);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист.ПрисоединенныеФайлы КАК уатМаршрутныйЛистПрисоединенныеФайлы
	|ГДЕ
	|	уатМаршрутныйЛистПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		ДокОб = мВыборка.Ссылка.ПолучитьОбъект();
		НайдСтроки = ДокОб.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("ПрисоединенныйФайл", Источник.Ссылка));
		Для Каждого НайдСтрока Из НайдСтроки Цикл 
			ДокОб.ПрисоединенныеФайлы.Удалить(НайдСтрока);
		КонецЦикла;
		
		Попытка
			ДокОб.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция КонфигурацияДляРФ() Экспорт
	
	Если Метаданные.Константы.Найти("уатКонфигурацияДляРФ") = Неопределено Тогда
		Возврат Истина;
	КонецЕСли;
	
	Возврат Константы.уатКонфигурацияДляРФ.Получить();
	
КонецФункции

Функция АдаптацияПолейДляJSON(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") ИЛИ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) 
		ИЛИ ТипЗнч(Значение) = Тип("Цвет") ИЛИ ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		СтруктураСписка = Новый Структура();
		Для Каждого ТекЭлемент Из Значение Цикл
			СтруктураСписка.Вставить(Строка(ТекЭлемент.Значение), ТекЭлемент.Пометка);
		КонецЦикла;
		Возврат СтруктураСписка;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Загружает настройки из хранилища.
// Результатом работы являются настройки, загруженные из хранилища.
//
Функция ВосстановитьНастройки(КлючОбъекта, КлючНастроек, ЭтоСтрутура = Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если ЭтоСтрутура Тогда
		НастройкиНекорректны = (СтруктураНастроек = Неопределено ИЛИ ТипЗнч(СтруктураНастроек) <> Тип("Структура"));
		Если НастройкиНекорректны Тогда
			СтруктураНастроек = Новый Структура();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНастроек;
КонецФункции

// Выполняет обработку заполнения документов для формы "ФормаВыборКонтрагента"
// 
Процедура ОбработкаЗаполненияФормаВыборКонтрагента(ДанныеЗаполнения, ДополнительныеСвойства) Экспорт
	
	// уатМаршрутныйЛист, уатЗаказГрузоотправителя, уатЗаказПеревозчику_уэ
	Если НЕ ДанныеЗаполнения.Свойство("флВыбратьКонтрагента") Тогда
		Возврат;
	КонецЕсли;
	
	// выходной массив контрагентов для выбора
	тзКонтрагенты = Новый ТаблицаЗначений();
	тзКонтрагенты.Колонки.Добавить("Контрагент");
	тзКонтрагенты.Колонки.Добавить("Договор");
	тзКонтрагенты.Колонки.Добавить("Услуга");
	
	КоличествоКонтрагентов	 = 0;
	ПредКонтрагент			 = Неопределено;
	
	Если ДанныеЗаполнения.Свойство("Расходы") Тогда
		ТаблицаУслуги	 = ДанныеЗаполнения.Расходы.Выгрузить();
	ИначеЕсли ДанныеЗаполнения.Свойство("Доходы") Тогда
		ТаблицаУслуги	 = ДанныеЗаполнения.Доходы.Выгрузить();
	ИначеЕсли ДанныеЗаполнения.Свойство("Услуги") Тогда
		ТаблицаУслуги	 = ДанныеЗаполнения.Услуги.Выгрузить();
	ИначеЕсли ДанныеЗаполнения.Свойство("Штрафы") Тогда
		ТаблицаУслуги	 = ДанныеЗаполнения.Штрафы.Выгрузить();
	Иначе
		Возврат;
	Конецесли;
	
	ЕстьКонтрагент         = Ложь;
	ЕстьДоговор            = Ложь;
	ЕстьЗаказ              = Ложь;
	ЕстьНоменклатураУслуги = Ложь;
	Если ТаблицаУслуги.Колонки.Найти("Контрагент") <> Неопределено Тогда
		ЕстьКонтрагент = Истина;
	КонецЕсли;
	Если ТаблицаУслуги.Колонки.Найти("Договор") <> Неопределено Тогда
		ЕстьДоговор    = Истина;
	КонецЕсли;
	Если ТаблицаУслуги.Колонки.Найти("ЗаказНаТС") <> Неопределено Тогда
		ЕстьЗаказ      = Истина;
	КонецЕсли;
	Если ТаблицаУслуги.Колонки.Найти("НоменклатураУслуги") <> Неопределено Тогда
		ЕстьНоменклатураУслуги = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрокаОперации Из ТаблицаУслуги Цикл
		Строка = тзКонтрагенты.Добавить();
		Если ДанныеЗаполнения.Свойство("Штрафы") Тогда
			Строка.Контрагент = ТекСтрокаОперации.Штраф.ПолучательПлатежа;
			Строка.Договор    = ТекСтрокаОперации.Штраф.ДоговорПолучателя;
			Строка.Услуга = Справочники.Номенклатура.ПустаяСсылка();
		ИначеЕсли ДанныеЗаполнения.Свойство("Расходы") Тогда
			Если ЕстьКонтрагент Тогда
				Строка.Контрагент = ТекСтрокаОперации.Контрагент;
			Иначе
				Строка.Контрагент = ДанныеЗаполнения.Основание.Контрагент;
			КонецЕсли;
			Если ЕстьДоговор Тогда
				Строка.Договор = ТекСтрокаОперации.Договор;
			Иначе
				Строка.Договор = ДанныеЗаполнения.Основание.ДоговорКонтрагента;
			КонецЕсли;
			Строка.Услуга = ТекСтрокаОперации.Номенклатура;
		Иначе
			Если ЕстьЗаказ Тогда
				Если ТекСтрокаОперации.ЗаказНаТС = Документы.уатЗаказГрузоотправителя.ПустаяСсылка() 
					ИЛИ ТекСтрокаОперации.ЗаказНаТС = Неопределено Тогда
					Строка.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					Строка.Договор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Иначе 
					Строка.Контрагент = ТекСтрокаОперации.ЗаказНаТС.Контрагент;
					Строка.Договор    = ТекСтрокаОперации.ЗаказНаТС.ДоговорКонтрагента;
				КонецЕсли;
				Строка.Услуга = ТекСтрокаОперации.Номенклатура;
			Иначе
				Строка.Контрагент = ДанныеЗаполнения.Основание.Контрагент;
				Строка.Договор    = ДанныеЗаполнения.Основание.ДоговорКонтрагента;
				Если ЕстьНоменклатураУслуги Тогда
					Строка.Услуга = ТекСтрокаОперации.НоменклатураУслуги;
				Иначе
					Строка.Услуга = ТекСтрокаОперации.Номенклатура;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекКонтрагент = Новый Структура("Контрагент, Договор", Строка.Контрагент, Строка.Договор);
		Если ПредКонтрагент = Неопределено
			ИЛИ ПредКонтрагент.Контрагент <> ТекКонтрагент.Контрагент 
			ИЛИ ПредКонтрагент.Договор <> ТекКонтрагент.Договор Тогда
			ПредКонтрагент = ТекКонтрагент;
			КоличествоКонтрагентов = КоличествоКонтрагентов + 1;
		КонецЕсли;
	КонецЦикла;
	тзКонтрагенты.Свернуть("Контрагент, Договор, Услуга");
	
	БольшеНеСпрашиватьДляОдногоКонтрагента = Ложь;
	Если КоличествоКонтрагентов = 1 Тогда
		НастройкиФормыВыбораКонтрагентов = уатОбщегоНазначения.ВосстановитьНастройки("ФормаВыборКонтрагента", "ОбщиеНастройки");
		НастройкиФормыВыбораКонтрагентов.Свойство("БольшеНеСпрашиватьДляОдногоКонтрагента", БольшеНеСпрашиватьДляОдногоКонтрагента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БольшеНеСпрашиватьДляОдногоКонтрагента) Тогда
		БольшеНеСпрашиватьДляОдногоКонтрагента = Ложь;
	КонецЕсли;
	
	Если КоличествоКонтрагентов > 1 ИЛИ 
		(НЕ БольшеНеСпрашиватьДляОдногоКонтрагента И тзКонтрагенты.Количество() > 1) Тогда
		тзКонтрагенты.Сортировать("Контрагент, Договор");
		ДополнительныеСвойства.Вставить("мсвКонтрагенты", тзКонтрагенты);
		ДополнительныеСвойства.Вставить("ТаблицаУслуги", ТаблицаУслуги);
	Иначе
		ДополнительныеСвойства.Вставить("мсвТаблицаУслуги", ТаблицаУслуги);
		ДополнительныеСвойства.Вставить("мсвКонтрагент", тзКонтрагенты);
	КонецЕсли;

КонецПроцедуры

// Конвертирует файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы.
//
Функция ИзменитьСправочникХраненияФайлов(Знач ВладелецФайлов, ФайлИсточник, ИмяСправочника = Неопределено) Экспорт
	
	ЗаголовокОшибки = НСтр("ru='Ошибка при конвертации присоединенных файлов подсистемы Работа с файлами"
	"в присоединенные файлы подсистемы Присоединенные файлы.';en='An error occurred when converting attached files of the ""File operations"""
	"subsystem into attached files of the ""Attached files"" subsystem.'");
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
	ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
	МенеджерПрисоединенныхФайлов = Справочники[ИмяСправочника];
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
		// Установить исключительную блокировку на файл-источник, 
		// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.Файлы.ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлИсточникОбъект.Ссылка);
		БлокировкаДанных.Заблокировать();
		
		Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
			ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
			// Установить исключительную блокировку на текущую версию файла-источник, 
			// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.ВерсииФайлов.ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ТекущаяВерсияОбъект.Ссылка);
			БлокировкаДанных.Заблокировать();
		Иначе
			ТекущаяВерсияОбъект = ФайлИсточникОбъект;
		КонецЕсли;
		
		СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
		ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
		ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
		
		ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
		ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
		ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
		ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
		ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
		
		ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
		ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
		ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
		ПрисоединенныйФайл.ПодписанЭП                   = ФайлИсточникОбъект.ПодписанЭП;
		ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
		
		ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
		ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
		ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
		ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
		ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
		
		// Если файл хранится на томе - делается ссылка на существующий файл.
		ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
		ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
		
		Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.УдалитьСертификатыШифрования Цикл
			НоваяСтрока = ПрисоединенныйФайл.УдалитьСертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
			Для Каждого ЭПСтрока Из ТекущаяВерсияОбъект.УдалитьЭлектронныеПодписи Цикл
				НоваяСтрока = ПрисоединенныйФайл.УдалитьЭлектронныеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭПСтрока);
			КонецЦикла;
		КонецЕсли;
		ПрисоединенныйФайл.Заполнить(Неопределено);
		
		ПрисоединенныйФайл.Записать();
		
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ХранилищеФайла = РаботаСФайлами.ХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка);
			
			МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Файл = СсылкаНового;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Файл = СсылкаНового;
			МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ХранилищеФайла.Получить(), Новый СжатиеДанных(9));
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
		ФайлИсточникОбъект.ПометкаУдаления = Истина;
		
		// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
		Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			ТекущаяВерсияОбъект.ПутьКФайлу = "";
			ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ФайлИсточникОбъект.ПутьКФайлу = "";
			ФайлИсточникОбъект.Том = "";
			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
			ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ТекущаяВерсияОбъект.Записать();
		КонецЕсли;
		
		ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
		ФайлИсточникОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СсылкаНового;
	
КонецФункции

Процедура ПометитьНаУдалениеВерсииФайла(Знач ФайлСсылка, Знач ВерсияИсключение) Экспорт

	ПолноеИмяСправочникаВерсий = Метаданные.НайтиПоТипу(ТипЗнч(ВерсияИсключение)).ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &Владелец
	|	И НЕ ВерсииФайлов.ПометкаУдаления
	|	И ВерсииФайлов.Ссылка <> &Исключение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Запрос.УстановитьПараметр("Исключение", ВерсияИсключение);
	ВыборкаВерсий = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Для Каждого Версия Из ВыборкаВерсий Цикл
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочникаВерсий);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Версия.Ссылка);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		Для Каждого Версия Из ВыборкаВерсий Цикл
			ВерсияОбъект = Версия.Ссылка.ПолучитьОбъект();
			ВерсияОбъект.ПометкаУдаления = Истина;
			ВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ВерсияОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Предназначена для проверки текущего пользователя к группе внешних пользователей.
//
Функция ПроверкаВнешнегоПользователя() Экспорт
	
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если ТипЗнч(АвторизованныйПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Отключает все регламентные задания
Процедура ОтключитьРегламентныеЗадания() Экспорт
	
	МассивРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	ОтключеноЗаданий  = 0;
	
	Для Каждого РегламентноеЗадание Из МассивРегламентныхЗаданий Цикл
		
		Если РегламентноеЗадание.Использование Тогда
			
			РегламентноеЗадание.Использование = Ложь;
			ОтключеноЗаданий = ОтключеноЗаданий + 1;
			
			ПараметрыЗадания = Новый Структура(
			"Ключ,
			|Наименование,
			|Использование,
			|ИмяПользователя,
			|ИнтервалПовтораПриАварийномЗавершении,
			|КоличествоПовторовПриАварийномЗавершении,
			|Расписание");
			ЗаполнитьЗначенияСвойств(ПараметрыЗадания, РегламентноеЗадание);
			
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = НСтр("en = ''; ru = 'Все регламентные задания отключены! Количество отключенных заданий: '") + ОтключеноЗаданий;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Функция - Проверяет (по наличию элементов справочников, присутствующих в демо=базах), 
//  является ли база демонстрационной.
// 
// Возвращаемое значение:
//  Булево - Истина, если это демобаза
//
Функция ЭтоДемоБаза() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &НаименованиеДемонстрационнойОрганизации
	|	И Организации.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("НаименованиеДемонстрационнойОрганизации", "Мегатранс ООО");
	
	Результат = Не Запрос.Выполнить().Пустой();
	Возврат Результат;
	
КонецФункции

// Функция - позволяет получить регистрационные документы по владельцу
//
Функция ПолучитьРегистрационныеДокументы(ВладелецДокументов, Организация = Неопределено, Подразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВладелецДокументов", ВладелецДокументов);	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДокументыВодителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ВладелецДокументов = &ВладелецДокументов";
	
	Если Организация <> Неопределено
		И Подразделение <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Текст = Запрос.Текст + "
		|	И (уатДокументыВодителей.Организация <> &Организация
		|			ИЛИ уатДокументыВодителей.Подразделение <> &Подразделение)";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат РезультатЗапроса;
КонецФункции 

// Процедура выполняет контроль заполненности подразделения в документе в зависимости от настройки по организации
Процедура ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок = "") Экспорт
	
	РежимПроверкиЗаполненияПодразделения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, 
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияДокументовПриНезаполненномПодразделении);
	
	ТекстНСтр = НСтр("ru = 'Не заполнено значение реквизита ""Подразделение""'");
	Если Не ЗначениеЗаполнено(Подразделение)
		И РежимПроверкиЗаполненияПодразделения = Перечисления.уатВидыКонтроля.Запрещать Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	ИначеЕсли Не ЗначениеЗаполнено(Подразделение)
		И РежимПроверкиЗаполненияПодразделения = Перечисления.уатВидыКонтроля.Предупреждать Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет свойства справочников контрагентов для подсистем БИП
Процедура ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников) Экспорт
	
	СвойстваСправочника = Новый Структура;
	СвойстваСправочника.Вставить("Имя",           "Контрагенты");
	СвойстваСправочника.Вставить("Иерархический", Истина);
	СвойстваСправочника.Вставить("РеквизитИНН",   "ИНН");
	СвойстваСправочника.Вставить("РеквизитКПП",   "КПП");
	
	НовоеСвойство = СвойстваСправочников.Добавить();
	ЗаполнитьЗначенияСвойств(НовоеСвойство, СвойстваСправочника);
	
КонецПроцедуры

// Процедура отключает использование строки поиска в форме списка
Процедура ОтключениеНовогоПоискаВСписках(Форма) Экспорт
	
	Список = Форма.Элементы.Найти("Список");
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	
	ДополнениеСтрокаПоиска = Форма.Элементы.Найти("ДополнениеСтрокаПоиска");
	Если НЕ ДополнениеСтрокаПоиска = Неопределено Тогда
		ДополнениеСтрокаПоиска.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

// Функция - Есть реквизит объекта (уат)
//
// Параметры:
//  ИмяРеквизита		 - Строка - Имя искомого реквизита
//  МетаданныеОбъекта	 - ОбъектМетаданых - Метаданные объекта
// 
// Возвращаемое значение:
//   - Булево - Есть ревизит или нет
//
Функция уатЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
	
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		
		Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты цикл
			Если Врег(Реквизит.Имя) = Врег(ИмяРеквизита) Тогда
				Возврат Истина;    
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти


#КонецОбласти
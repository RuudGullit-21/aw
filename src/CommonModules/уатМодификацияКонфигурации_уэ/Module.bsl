
////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры, вызываемые из обработчиков форм, таких как:
// "ПриСозданииНаСервере".
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеОбработчиковФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатТС.Форма.ФормаЭлемента" Тогда 
		СправочникУатТСПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
				
	ИначеЕсли Форма.ИмяФормы = "Справочник.уатПунктыНазначения.Форма.ФормаЭлемента" Тогда 
		СправочникУатПунктыНазначенияПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.уатПунктыНазначения.Форма.ФормаСписка" Тогда 
		СправочникУатПунктыНазначенияФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.уатПунктыНазначения.Форма.ФормаВыбора" Тогда 
		СправочникУатПунктыНазначенияФормаВыбораПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда 
		СправочникКонтрагентыПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрНакопления.уатОборотыПоМаршрутномуЛисту.Форма.ФормаСписка" Тогда 
		РегистрНакопленияУатОборотыПоМаршрутномуЛистуФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.уатНоменклатураГрузов.Форма.ФормаСписка" Тогда 
		РегистрСведенийУатНоменклатураГрузовФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.уатНоменклатураГрузов.Форма.ФормаЗаписи" Тогда 
		РегистрСведенийУатНоменклатураГрузовФормаЗаписиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.уатТТД.Форма.ФормаДокумента" Тогда 
		ДокументУатТТДФормаДокументаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда 
		СправочникНоменклатураФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.уатРасстоянияМеждуПунктами.Форма.ФормаСписка" Тогда 
		РегистрСведенийУатРасстоянияМеждуПунктамиФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда 
		СправочникКонтрагентыПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
		
	Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда 
		СправочникКонтрагентыПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Общее

// Переопределяемая процедура, вызываемая из серверного контекста формы
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма
//  ДопПараметры - Структура - структура дополнительных параметров
//
Процедура ФормаВыполнитьДействияВКонтекстеСервера(Форма, ДопПараметры=Неопределено) Экспорт
	
	Если Не ДопПараметры = Неопределено И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда 
		Если ДопПараметры.Свойство("ИмяМетодаОбработчика")
				И ДопПараметры.ИмяМетодаОбработчика = "СправочникУатТСФормаЭлементаПринадлежностьПриИзмененииУстановитьВидимостьДоступность" Тогда 
			СправочникУатТСФормаЭлементаПринадлежностьПриИзмененииУстановитьВидимостьДоступность(Форма, ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая при установке рабочего стола
//
// Параметры:
//  СоставФорм	 - СоставФормНачальнойСтраницы - набор форм, входящих в рабочий стол
//
Процедура УстановитьРабочийСтолПользователя(СоставФорм) Экспорт
	
	Если ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда 
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ПраваяКолонка.Очистить();
		
		Если ТипЗнч(ПользователиКлиентСервер.АвторизованныйПользователь().ОбъектАвторизации) = Тип("СправочникСсылка.ФизическиеЛица") И ПравоДоступа("Просмотр", Метаданные.Обработки.ДоступныеАнкеты) Тогда
			СоставФорм.ЛеваяКолонка.Добавить("Обработка.ДоступныеАнкеты.Форма");
		ИначеЕсли Не Метаданные.Обработки.Найти("уатПанельФункцийВнешнегоПользователя") = Неопределено И ПравоДоступа("Просмотр", Метаданные.Обработки.уатПанельФункцийВнешнегоПользователя) Тогда
			СоставФорм.ЛеваяКолонка.Добавить("Обработка.уатПанельФункцийВнешнегоПользователя.Форма");
			СоставФорм.ПраваяКолонка.Добавить("Задача.ЗадачаИсполнителя.Форма.МоиЗадачиДляРабочегоСтола");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СоставФорм.ЛеваяКолонка.Очистить();
	
	Если уатЖурналыТранспортныхДокументов.ТекущийПользовательМедработник() Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Документ.уатЖурналМедицинскогоОсмотраВодителей.Форма.ФормаСписка");
		Возврат;
	ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательКонтролерТС() Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Документ.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Форма.ФормаСписка");
		Возврат;
	ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательУполномоченныйНаПроставлениеОдометра() Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Документ.уатЖурналУчетаПоказанийОдометра.Форма.ФормаСписка");
		Возврат;
	КонецЕсли;
	
	Если Не Метаданные.Обработки.Найти("уатПанельФункций") = Неопределено И ПравоДоступа("Просмотр", Метаданные.Обработки.уатПанельФункций) Тогда
		Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда 
			СоставФорм.ЛеваяКолонка.Добавить("Обработка.уатПанельФункций.Форма");
		КонецЕсли;
	ИначеЕсли НЕ Метаданные.Обработки.Найти("уатМониторРуководителя_уэ") = Неопределено И ПравоДоступа("Просмотр", Метаданные.Обработки.уатМониторРуководителя_уэ) Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.уатМониторРуководителя_уэ.Форма.МониторРуководителя");
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Документы.уатПутевойЛист) Тогда
			СоставФорм.ЛеваяКолонка.Добавить("Документ.уатПутевойЛист.Форма.ФормаСпискаБезПанелиОтборов");
		КонецЕсли;
		Если ПравоДоступа("Просмотр", Метаданные.Справочники.уатТС) Тогда
			СоставФорм.ЛеваяКолонка.Добавить("Справочник.уатТС.Форма.ФормаСпискаБезПанелиОтборов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СправочникУатТСПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ПринадлежностьТС.Видимость = Истина;
	Форма.Элементы.ПринадлежностьТС.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФормыПриИзменении");
	
	Форма.Элементы.Водитель.УстановитьДействие("НачалоВыбора",         "Подключаемый_ПолеФормыНачалоВыбора");
	Форма.Элементы.Водитель.УстановитьДействие("ОбработкаВыбора",      "Подключаемый_ПолеФормыОбработкаВыбора");
	Форма.Элементы.Водитель.УстановитьДействие("АвтоПодбор",           "Подключаемый_ПолеФормыАвтоПодбор");
	Форма.Элементы.Водитель.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ПолеФормыОкончаниеВводаТекста");
	Форма.Элементы.Водитель.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	
	СправочникУатТСФормаЭлементаПринадлежностьПриИзмененииУстановитьВидимостьДоступность(Форма);
	
КонецПроцедуры

Процедура СправочникУатТСФормаЭлементаПринадлежностьПриИзмененииУстановитьВидимостьДоступность(Форма, ДопПараметры=Неопределено)
	
	Если Форма.Объект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.АвиационныйТранспорт
			Или Форма.Объект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.МорскойТранспорт
			Или Форма.Объект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.ЖДТранспорт Тогда 
		Форма.Объект.Водитель = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное
			И ТипЗнч(Форма.Объект.ВладелецТС) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Форма.Объект.ВладелецТС = Неопределено;
	ИначеЕсли Форма.Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное
			И ТипЗнч(Форма.Объект.ВладелецТС) = Тип("СправочникСсылка.Организации") Тогда 
		Форма.Объект.ВладелецТС = Неопределено;
	ИначеЕсли Форма.Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда
		Форма.Объект.ВладелецТС = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда
		Форма.Объект.ИспользуемаяСистемаGPS = Неопределено;
		Форма.Объект.ИДвСистемеНавигации    = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное
			Или Форма.Объект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда
		Форма.Объект.Организация                                 = Неопределено;
		Форма.Объект.Подразделение                               = Неопределено;
		Форма.Объект.Колонна                                     = Неопределено;
		Форма.Объект.НачальныйПробег                             = Неопределено;
		Форма.Объект.ДатаПостановкиНаУчетГИБДД                   = Неопределено;
		Форма.КоэффициентИзмененияНормТоплива                    = Неопределено;
		Форма.Объект.АвтоматическиСписыватьРасходТопливаНаЗапуск = Неопределено;
		Форма.Объект.ЗаполнятьПутевойЛистСпискомОборудования     = Неопределено;
		Форма.Объект.ИконкаНаКарте                               = Неопределено;
		Форма.Объект.ОсновноеСредство                            = Неопределено;
		Форма.Объект.КодПоКлассификатору                         = Неопределено;
		Форма.Объект.БалансоваяСтоимость                         = Неопределено;
		Форма.Объект.СрокИспользования                           = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникУатПунктыНазначенияПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	// Отобразим страницу "ТерминалыПункта"
	Форма.Элементы.СтраницаТерминалыПункта.Видимость = Истина;
	
	// Отобразим реквизит "ДоставкаВПаллетах"
	Форма.Элементы.ДоставкаВПаллетах.Видимость = Истина;
	
	// Отобразим реквизит "ДоставкаВМонопаллетах"
	Форма.Элементы.ДоставкаВМонопаллетах.Видимость = Истина;
	
	// Отобразим реквизит "ОтдельнаяГруппировкаПриКомплектации"
	Форма.Элементы.ОтдельнаяГруппировкаПриКомплектации.Видимость = Истина;
	
КонецПроцедуры

Процедура СправочникУатПунктыНазначенияФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ДобавитьКомандуОбновитьВремяРасстояниеМеждуПунктами(Форма);
	
КонецПроцедуры

Процедура СправочникУатПунктыНазначенияФормаВыбораПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	// Зарезервировано
	
КонецПроцедуры

Функция СправочникКонтрагентыНужноРазместитьРеквизитыПеревозчика(Форма)
	
	флКлючевойРеквизитНайден = Ложь;
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл 
		Если РеквизитФормы.Имя = "Перевозчик_уэ" Тогда 
			флКлючевойРеквизитНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не флКлючевойРеквизитНайден;
	
КонецФункции // СправочникКонтрагентыНужноРазместитьРеквизитыПеревозчика()

Процедура СправочникКонтрагентыРазместитьРеквизитыПеревозчика(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив();
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Перевозчик_уэ", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Рейтинг_уэ",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный))));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Услуга_уэ",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КодАТИ",        Новый ОписаниеТипов("Строка")));

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	РеквизитПеревозчик = Форма.Элементы.Добавить("Перевозчик_уэ", Тип("ПолеФормы"), Форма.Элементы.ГруппаРеквизитыПеревозчика);
	РеквизитПеревозчик.Вид                = ВидПоляФормы.ПолеФлажка;
	РеквизитПеревозчик.ПутьКДанным        = "Перевозчик_уэ";
	РеквизитПеревозчик.Заголовок          = НСтр("en='Carrier';ru='Перевозчик'");
	РеквизитПеревозчик.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	РеквизитПеревозчик.УстановитьДействие("ПриИзменении", "Перевозчик_уэПриИзменении");
	
	РеквизитРейтинг = Форма.Элементы.Добавить("Рейтинг_уэ", Тип("ПолеФормы"), Форма.Элементы.ГруппаРеквизитыПеревозчика);
	РеквизитРейтинг.Вид                  = ВидПоляФормы.ПолеВвода;
	РеквизитРейтинг.ПутьКДанным          = "Рейтинг_уэ";
	РеквизитРейтинг.Заголовок            = НСтр("en='Rating';ru='Рейтинг'");
	РеквизитРейтинг.КнопкаРегулирования  = Истина;
	РеквизитРейтинг.МинимальноеЗначение  = 0;
	РеквизитРейтинг.МаксимальноеЗначение = 10;
	
	РеквизитУслуга = Форма.Элементы.Добавить("Услуга_уэ", Тип("ПолеФормы"), Форма.Элементы.ГруппаРеквизитыПеревозчика);
	РеквизитУслуга.Вид         = ВидПоляФормы.ПолеВвода;
	РеквизитУслуга.ПутьКДанным = "Услуга_уэ";
	РеквизитУслуга.Заголовок   = НСтр("en='Service';ru='Услуга'");
	
	уатИспользоватьИнтеграциюАТИ_уэ = Константы.уатИспользоватьИнтеграциюАТИ_уэ.Получить();
	Если уатИспользоватьИнтеграциюАТИ_уэ Тогда
		РеквизитУслуга = Форма.Элементы.Добавить("КодАТИ", Тип("ПолеФормы"), Форма.Элементы.ГруппаРеквизитыПеревозчика);
		РеквизитУслуга.Вид         = ВидПоляФормы.ПолеВвода;
		РеквизитУслуга.ПутьКДанным = "КодАТИ";
		РеквизитУслуга.Заголовок   = НСтр("ru='Код АТИ'");
		РеквизитУслуга.Подсказка   = НСтр("ru='Код участника биржи грузоперевозок АвтоТрансИнфо'");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначенияРеквизитовПеревозчика(Контрагент)
	
	ЗначенияРеквизитовПеревозчика = Новый Структура("Перевозчик,Рейтинг,Услуга,КодАТИ", Ложь, 0, Справочники.Номенклатура.ПустаяСсылка(), "");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСведенияОКонтрагентах_уэ.Перевозчик КАК Перевозчик,
	|	уатСведенияОКонтрагентах_уэ.Рейтинг КАК Рейтинг,
	|	уатСведенияОКонтрагентах_уэ.Услуга КАК Услуга,
	|	уатСведенияОКонтрагентах_уэ.КодАТИ КАК КодАТИ
	|ИЗ
	|	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	|ГДЕ
	|	уатСведенияОКонтрагентах_уэ.Контрагент = &Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовПеревозчика, Выборка);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитовПеревозчика;
	
КонецФункции // ПолучитьЗначенияРеквизитовПеревозчика()

Процедура СправочникКонтрагентыПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Если СправочникКонтрагентыНужноРазместитьРеквизитыПеревозчика(Форма) Тогда 
		СправочникКонтрагентыРазместитьРеквизитыПеревозчика(Форма);
	КонецЕсли;
	
	ЗначенияРеквизитовПеревозчика = ПолучитьЗначенияРеквизитовПеревозчика(Форма.Объект.Ссылка);
	Форма.Перевозчик_уэ = ЗначенияРеквизитовПеревозчика.Перевозчик;
	Форма.Рейтинг_уэ    = ЗначенияРеквизитовПеревозчика.Рейтинг;
	Форма.Услуга_уэ     = ЗначенияРеквизитовПеревозчика.Услуга;
	уатИспользоватьИнтеграциюАТИ_уэ = Константы.уатИспользоватьИнтеграциюАТИ_уэ.Получить();
	Если уатИспользоватьИнтеграциюАТИ_уэ Тогда
		Форма.КодАТИ        = ЗначенияРеквизитовПеревозчика.КодАТИ;
	КонецЕсли;
	
	// Отобразим реквизит "уатОтдельнаяГруппировкаПриКомплектации"
	Форма.Элементы.уатОтдельнаяГруппировкаПриКомплектации.Видимость = Истина;
	
КонецПроцедуры

Процедура СправочникКонтрагентыПриЧтенииНаСервере(Форма, ТекущийОбъект)
	
	Если СправочникКонтрагентыНужноРазместитьРеквизитыПеревозчика(Форма) Тогда 
		СправочникКонтрагентыРазместитьРеквизитыПеревозчика(Форма);
	КонецЕсли;
	
	ЗначенияРеквизитовПеревозчика = ПолучитьЗначенияРеквизитовПеревозчика(ТекущийОбъект.Ссылка);
	Форма.Перевозчик_уэ = ЗначенияРеквизитовПеревозчика.Перевозчик;
	Форма.Рейтинг_уэ    = ЗначенияРеквизитовПеревозчика.Рейтинг;
	Форма.Услуга_уэ     = ЗначенияРеквизитовПеревозчика.Услуга;
	уатИспользоватьИнтеграциюАТИ_уэ = Константы.уатИспользоватьИнтеграциюАТИ_уэ.Получить();
	Если уатИспользоватьИнтеграциюАТИ_уэ Тогда
		Форма.КодАТИ        = ЗначенияРеквизитовПеревозчика.КодАТИ;
	КонецЕсли;

КонецПроцедуры

Процедура СправочникКонтрагентыПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЗаписей = РегистрыСведений.уатСведенияОКонтрагентах_уэ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(ТекущийОбъект.Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Контрагент = ТекущийОбъект.Ссылка;
	НоваяЗапись.Перевозчик = Форма.Перевозчик_уэ;
	НоваяЗапись.Рейтинг    = Форма.Рейтинг_уэ;
	НоваяЗапись.Услуга     = Форма.Услуга_уэ;
	уатИспользоватьИнтеграциюАТИ_уэ = Константы.уатИспользоватьИнтеграциюАТИ_уэ.Получить();
	Если уатИспользоватьИнтеграциюАТИ_уэ Тогда
		НоваяЗапись.КодАТИ = Форма.КодАТИ;
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура РегистрНакопленияУатОборотыПоМаршрутномуЛистуФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ЭлементКоличествоМест = Форма.Элементы.Найти("КоличествоМест");
	Если Не ЭлементКоличествоМест = Неопределено Тогда 
		ЭлементКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрСведенийУатНоменклатураГрузовФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ЭлементКоличествоМест = Форма.Элементы.Найти("КоличествоМест");
	Если Не ЭлементКоличествоМест = Неопределено Тогда 
		ЭлементКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрСведенийУатНоменклатураГрузовФормаЗаписиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ЭлементКоличествоМест = Форма.Элементы.Найти("КоличествоМест");
	Если Не ЭлементКоличествоМест = Неопределено Тогда 
		ЭлементКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументУатТТДФормаДокументаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ЭлементКоличествоМест = Форма.Элементы.Найти("ТабличноеПолеТТНКоличествоМест");
	Если Не ЭлементКоличествоМест = Неопределено Тогда 
		ЭлементКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникНоменклатураФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	// Отобразим реквизит "уатВидУпаковкиОсновной"
	Форма.Элементы.уатВидУпаковкиОсновной.Видимость = Истина;
	
	// Отобразим реквизит "уатКоличествоВОсновнойУпаковке"
	Форма.Элементы.уатКоличествоВОсновнойУпаковке.Видимость = Истина;
	
	// Отобразим реквизит "уатВидУпаковкиДляРоссыпи"
	Форма.Элементы.уатВидУпаковкиДляРоссыпи.Видимость = Истина;
	
	// Отобразим реквизит "уатКоличествоВУпаковкеДляРоссыпи"
	Форма.Элементы.уатКоличествоВУпаковкеДляРоссыпи.Видимость = Истина;
	
КонецПроцедуры

Процедура РегистрСведенийУатРасстоянияМеждуПунктамиФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ДобавитьКомандуОбновитьВремяРасстояниеМеждуПунктами(Форма);
	
КонецПроцедуры

Процедура ДобавитьКомандуОбновитьВремяРасстояниеМеждуПунктами(Форма)
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатРасстоянияМеждуПунктами) Тогда 
		кОбновитьВремяРасстояние = Форма.Команды.Добавить("ОбновитьВремяРасстояниеМеждуПунктами");
		кОбновитьВремяРасстояние.Действие    = "Подключаемый_уатВыполнитьКоманду";
		кОбновитьВремяРасстояние.Заголовок   = НСтр("en='Update distances between points';ru='Обновить расстояния между пунктами'");;
		кОбновитьВремяРасстояние.Картинка    = БиблиотекаКартинок.Обновить;
		кОбновитьВремяРасстояние.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		эОбновитьВремяРасстояние = Форма.Элементы.Добавить("ОбновитьВремяРасстояниеМеждуПунктами", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
		эОбновитьВремяРасстояние.ИмяКоманды = "ОбновитьВремяРасстояниеМеждуПунктами";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

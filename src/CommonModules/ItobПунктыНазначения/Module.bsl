
#Область ПрограммныйИнтерфейс

// Процедура - Запись пункта назначения
//
// Параметры:
//  Источник - ОпределяемыйТип.ItobПунктНазначенияОбъект - источник события.
//	Отказ	 - Булево - признак отказа от записи.
//
Процедура ЗаписьПунктаНазначения(Источник, Отказ) Экспорт
	
	ИспользоватьОбработчикЦСМ = Истина;
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		ItobЦентрСпутниковогоМониторингаПереопределяемый.ЗаписьПунктаНазначения(Источник, Отказ, ИспользоватьОбработчикЦСМ);	
	КонецЕсли; 
	
	Если ИспользоватьОбработчикЦСМ Тогда
		Если ItobОбщегоНазначения.ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса(Источник) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу изображений пунктов назначения.
//
// Параметры:
//  ТекстИПараметрыЗапросаУсловия	 - Структура - Текст и параметры запроса условия:
//  * Текст - Строка - Текст запроса условия.
//  * Параметры - Массив - Параметры запроса условия.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица изображений пунктов назначения.
//
Функция ПолучитьИзображения(ТекстИПараметрыЗапросаУсловия) Экспорт
	
	// itob ++
	УстановитьПривилегированныйРежим(Истина);
	// itob --
	
	Запрос = ПолучитьЗапросПоПунктамНазначения(ТекстИПараметрыЗапросаУсловия);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Подбирает пункт назначения по точному попаданию в его координаты (не ищет ближайшие к запрашиваемой точке).
//	В случае попадания в несколько ПН с геометрией фиксации "Окружность", берется ПН, расстояние до центра которого минимально.
//  В случае попадания в несколько ПН с геометрией фиксации "Полигон", берется случайный из них.
//	В случае попадания в несколько ПН с разной геометрией фиксации, предпочтение отдается ПН-полигону.
//	Если не нашлось ни одного подходящего пункта, то возвращается Неопределено.
//
// Параметры:
//	Широта	- Число - Широта (в градусах), по которой подбирается пункт.
//	Долгота - Число - Долота (в градусах), по которой подбирается пункт.
//	РадиусФиксацииПоУмолчанию - Число -  Для ускорения расчетов рекомендуется передать извне значение радиуса прихода на точку по умолчанию
//							    		(см. ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку()).
//
// Возвращаемое значение:
//	ОпределяемыйТип.ItobПунктНазначения - СправочникСсылка.ItobПунктыНазначения (или соответствующий справочник в случае конфигурации не ЦСМ) - Найденный пункт.
//
Функция СтрогийПоискПунктаНазначения(Широта, Долгота, РадиусФиксацииПоУмолчанию = Неопределено) Экспорт
	
	ИспользуемыйРадиусФиксацииПоУмолчанию = ?(РадиусФиксацииПоУмолчанию = Неопределено, 
											  ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку(50), 
											  РадиусФиксацииПоУмолчанию); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Широта);
	Запрос.УстановитьПараметр("Долгота", Долгота);
	Запрос.УстановитьПараметр("РадиусПоУмолчанию", ИспользуемыйРадиусФиксацииПоУмолчанию);	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobСвойстваПунктовНазначения.ПунктНазначения КАК ПунктНазначения,
	|	ItobСвойстваПунктовНазначения.Широта КАК ШиротаПункта,
	|	ItobСвойстваПунктовНазначения.Долгота КАК ДолготаПункта,
	|	ВЫБОР
	|		КОГДА ItobСвойстваПунктовНазначения.РадиусФиксацииПосещения = 0
	|			ТОГДА &РадиусПоУмолчанию
	|		ИНАЧЕ ItobСвойстваПунктовНазначения.РадиусФиксацииПосещения
	|	КОНЕЦ КАК РадиусФиксацииПосещения,
	|	ItobСвойстваПунктовНазначения.ГеометрияФиксацииПосещения = ЗНАЧЕНИЕ(Перечисление.ItobВидыГеометрииФиксацииПосещения.Полигон) КАК ЭтоПолигон,
	|	ItobТочкиГеографическихЗон.НомерТочки КАК НомерТочки,
	|	ItobТочкиГеографическихЗон.Широта КАК ШиротаТочки,
	|	ItobТочкиГеографическихЗон.Долгота КАК ДолготаТочки
	|ИЗ
	|	РегистрСведений.ItobСвойстваПунктовНазначения КАК ItobСвойстваПунктовНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobТочкиГеографическихЗон КАК ItobТочкиГеографическихЗон
	|		ПО ItobСвойстваПунктовНазначения.ПунктНазначения = ItobТочкиГеографическихЗон.ГеографическаяЗона
	|ГДЕ
	|	ItobСвойстваПунктовНазначения.ИспользоватьПриГеокодировании
	|	И НЕ ItobСвойстваПунктовНазначения.ГеографическаяРамкаШирота1 = 0
	|	И НЕ ItobСвойстваПунктовНазначения.ГеографическаяРамкаШирота2 = 0
	|	И НЕ ItobСвойстваПунктовНазначения.ГеографическаяРамкаДолгота1 = 0
	|	И НЕ ItobСвойстваПунктовНазначения.ГеографическаяРамкаДолгота2 = 0
	|	И ItobСвойстваПунктовНазначения.ГеографическаяРамкаШирота1 <= &Широта
	|	И ItobСвойстваПунктовНазначения.ГеографическаяРамкаШирота2 >= &Широта
	|	И ItobСвойстваПунктовНазначения.ГеографическаяРамкаДолгота1 <= &Долгота
	|	И ItobСвойстваПунктовНазначения.ГеографическаяРамкаДолгота2 >= &Долгота
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоПолигон УБЫВ,
	|	НомерТочки
	|ИТОГИ ПО
	|	ПунктНазначения";
				   		
	МинимальноеРасстояниеДоЦентра = Неопределено;
	ПунктСМинимальнымРасстояниемДоЦентра = Неопределено;
	ШиротыПолигона = Новый Массив;
	ДолготыПолигона = Новый Массив;
	ПараметрыГеозоны = ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны();
	ПараметрыОкружности = ПараметрыПунктаОкружности();
	ВыборкаПоПунктам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПунктам.Следующий() Цикл
		ЭтоПолигон = Ложь;
		ЭтоПервыйПроход = Истина;
		ВыборкаДетальныеЗаписи = ВыборкаПоПунктам.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЭтоПервыйПроход  Тогда
				ЭтоПолигон = ВыборкаДетальныеЗаписи.ЭтоПолигон;
				ПараметрыГеозоны = ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны();
				ПараметрыОкружности = ПараметрыПунктаОкружности();
				ШиротыПолигона.Очистить();
				ДолготыПолигона.Очистить();
								
				ЭтоПервыйПроход = Ложь;
			КонецЕсли; 
			
			Если ЭтоПолигон Тогда
				// Для полигона в детальных записях будет несколько строк. Собираем из них точки широт и долгот полигона.
				ШиротыПолигона.Добавить(ВыборкаДетальныеЗаписи.ШиротаТочки); 	
			    ДолготыПолигона.Добавить(ВыборкаДетальныеЗаписи.ДолготаТочки);					
			Иначе
				// Для окружности в детальных записях будет одна строка с параметрами пункта-окружности.
				ПараметрыОкружности.РадиусФиксацииПосещения = ВыборкаДетальныеЗаписи.РадиусФиксацииПосещения;
				ПараметрыОкружности.ШиротаЦентра = ВыборкаДетальныеЗаписи.ШиротаПункта;
				ПараметрыОкружности.ДолготаЦентра = ВыборкаДетальныеЗаписи.ДолготаПункта;
			КонецЕсли; 		
		КонецЦикла;
		
		Если ЭтоПолигон Тогда
			ПараметрыГеозоны.ШиротыЗоны = ШиротыПолигона;
			ПараметрыГеозоны.ДолготыЗоны = ДолготыПолигона; 
			Если ItobГеографическиеЗоны.ТочкаВГеозоне(Широта, Долгота, ПараметрыГеозоны) Тогда
				// Найден подходящий ПН-полигон. Дальнейшие проверки не требуются.
				Возврат ВыборкаПоПунктам.ПунктНазначения;
			КонецЕсли; 
		Иначе
			ТекущееРасстояниеДоЦентра = ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(Широта, 
																								 Долгота, 
																								 ПараметрыОкружности.ШиротаЦентра, 
																								 ПараметрыОкружности.ДолготаЦентра);
			Если ТекущееРасстояниеДоЦентра <= ПараметрыОкружности.РадиусФиксацииПосещения Тогда
				// Для пункта-окружности подбираем ближайший пункт к заданным координатам.
				Если МинимальноеРасстояниеДоЦентра = Неопределено
					 ИЛИ МинимальноеРасстояниеДоЦентра > ТекущееРасстояниеДоЦентра Тогда
					 
					МинимальноеРасстояниеДоЦентра = ТекущееРасстояниеДоЦентра;
					ПунктСМинимальнымРасстояниемДоЦентра = ВыборкаПоПунктам.ПунктНазначения;
				КонецЕсли;	
			КонецЕсли;  
		КонецЕсли; 
	КонецЦикла;
	
	
	Возврат ПунктСМинимальнымРасстояниемДоЦентра;  
	
КонецФункции

// Функция - Параметры проверяемого пункта
// 
// Возвращаемое значение:
//	Структура - параметры.
//
Функция ПараметрыПроверяемогоПункта() Экспорт
	
	Параметры = Новый Структура;
	
	// Для проверки вхождения в пункт как в окружность, следует передать заполненную широту/долготу центра и радиус фиксации посещения.
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыПунктаОкружности(), Истина);
	
	// Для проверки вхождения в пункт как в геозону следует, наоборот, оставить незаполненными предыдущие параметры, 
	//	передав вместо этого заполненные ПараметрыПроверяемойЗоны (см. ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны()).
	Параметры.Вставить("ПараметрыПроверяемойЗоны");
	
	// Для оптимизации грубой проверки на вхождение точки в радиус фиксации пункта назначения.
	//	Используется только для фиксации посещений в пункте-окружности (для полигона игнорируется).
	//	Если не заполнить, и при этом проверяется вхождение в пункт-окружность, то данная величина будет рассчитана внутри функции 
	//	"ТочкаВПунктеНазначения()", что может замедлить расчет в нагруженном случае.
	Параметры.Вставить("КосинусШиротыЦентра");
	
	
	Возврат Параметры;
	
КонецФункции

// Проверяет, входит ли точка с координатами (ШиротаТочки; ДолготаТочки) в проверяемый пункт (полигон или окружность).
//
// Параметры:
//  ШиротаТочки - Число - Широта проверяемой точки.
//  ДолготаТочки - Число - Долгота проверяемой точки. 
//  ПараметрыПроверяемогоПункта	 - Структура - см. ItobПунктыНазначения.ПараметрыПроверяемогоПункта
// 
// Возвращаемое значение:
//	Булево
//
Функция ТочкаВПунктеНазначения(ШиротаТочки, ДолготаТочки, ПараметрыПроверяемогоПункта) Экспорт
	
	Результат = Ложь;
	Если НЕ ПараметрыПроверяемогоПункта.ШиротаЦентра = Неопределено Тогда
		// Это пункт-окружность.
		Если ГрубаяПроверкаТочкаВПунктеНазначенияОкружность(ПараметрыПроверяемогоПункта, ШиротаТочки, ДолготаТочки) Тогда
			РасстояниеДоТочкиВозвращения = ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(ПараметрыПроверяемогоПункта.ШиротаЦентра,
																									ПараметрыПроверяемогоПункта.ДолготаЦентра,
																									ШиротаТочки,
																									ДолготаТочки);
			Результат = (РасстояниеДоТочкиВозвращения < ПараметрыПроверяемогоПункта.РадиусФиксацииПосещения);
		КонецЕсли; 
	Иначе
		// Это пункт-полигон.
		Результат = ItobГеографическиеЗоны.ТочкаВГеозоне(ШиротаТочки, ДолготаТочки, ПараметрыПроверяемогоПункта.ПараметрыПроверяемойЗоны);
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции

// Работает быстрее функции "ТочкаВПунктеНазначения()", однако подходит только для измерения расстояний до 1000км
//	и имеет погрешность - максимум 1.5%.
// 	Рекомендуется использовать только как предварительную проверку перед точным расчетом через функцию "ТочкаВПунктеНазначения()".
//
// Параметры:
//  ПараметрыПроверяемогоПункта	 - Структура
//  ШиротаТочки					 - Число
//  ДолготаТочки				 - Число
// 
// Возвращаемое значение:
//  Булево
//
Функция ГрубаяПроверкаТочкаВПунктеНазначенияОкружность(ПараметрыПроверяемогоПункта, ШиротаТочки, ДолготаТочки) Экспорт
	
	КосинусШиротыЦентра = ?(НЕ ПараметрыПроверяемогоПункта.КосинусШиротыЦентра = Неопределено,
							ПараметрыПроверяемогоПункта.КосинусШиротыЦентра,
							Cos(ПараметрыПроверяемогоПункта.ШиротаЦентра * 3.14 / 180));
	ДельтаШироты = ПараметрыПроверяемогоПункта.ШиротаЦентра - ШиротаТочки;
	ДельтаДолготы = (ПараметрыПроверяемогоПункта.ДолготаЦентра - ДолготаТочки) * КосинусШиротыЦентра;
	ИнтервалПоШироте = Макс(ДельтаШироты, -ДельтаШироты) * 111130;
	ИнтервалПоДолготе = Макс(ДельтаДолготы, -ДельтаДолготы) * 111319.4;
	РадиусФиксации = ПараметрыПроверяемогоПункта.РадиусФиксацииПосещения;

	Возврат (РадиусФиксации >= 0.9 * ИнтервалПоШироте 
		 	 И РадиусФиксации >= 0.9 * ИнтервалПоДолготе);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеПунктовНазначения

Функция ПолучитьЗапросПоПунктамНазначения(ТекстИПараметрыЗапросаУсловия) 
	Если ТекстИПараметрыЗапросаУсловия = Неопределено Тогда
	    ТекстИПараметрыЗапросаУсловия = ПолучитьТекстИПараметрыЗапросаУсловия();
	КонецЕсли; 
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПунктовНазначения(ТекстИПараметрыЗапросаУсловия.Текст));
	Счетчик = 0;
	Для Каждого Параметр Из ТекстИПараметрыЗапросаУсловия.Параметры Цикл
	    Запрос.УстановитьПараметр("Параметр"+Строка(Счетчик), Параметр);
		Счетчик = Счетчик+1;
	КонецЦикла; 
	
	// Настройки отображения пунктов
	ТекстЗапроса = Запрос.Текст;
	ПараметрыОформления = ПолучитьВыраженияОформленияПунктов();
	СписокПараметровОформления = ПараметрыОформления.СписокПараметровЗапроса;
	НачалоПоиска = СтрНайти(Запрос.Текст,"ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	НачалоВставки = СтрНайти(Запрос.Текст, Символы.ПС+"ИЗ"+Символы.ПС,,НачалоПоиска);	
	Запрос.Текст = Лев(Запрос.Текст, НачалоВставки) + "," + ПараметрыОформления.ТекстЗапроса + " " + Сред(Запрос.Текст, НачалоВставки+1);	
	
	НачалоВставкиУсловияСвязи = СтрНайти(Запрос.Текст,"ПО ",,НачалоПоиска);
	Запрос.Текст = Лев(Запрос.Текст, НачалоВставкиУсловияСвязи + 2) + " " + ПараметрыОформления.ТекстУсловияСвязи + " " + Сред(Запрос.Текст, НачалоВставкиУсловияСвязи+2);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	Для каждого Парам Из СписокПараметровОформления Цикл
		Запрос.УстановитьПараметр(Парам.Ключ,Парам.Значение);
	КонецЦикла;

	Возврат Запрос;
КонецФункции

Функция ПолучитьТекстИПараметрыЗапросаУсловия(Текст = "", ПараметрыЗапроса = Неопределено) 
	Если ПараметрыЗапроса = Неопределено Тогда
	    ПараметрыЗапроса = Новый Массив();
	КонецЕсли; 
	Возврат Новый Структура("Текст, Параметры", Текст, ПараметрыЗапроса);
КонецФункции // ТекстИПараметрыЗапросаУсловия()

Функция ПолучитьТекстЗапросаПунктовНазначения(ТекстЗапросаУсловия = "ИСТИНА")
	СправочникПунктыНазначения = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПунктыНазначения");
	
	ТекстЗапроса = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               	|	ItobСвойстваПунктовНазначения.Широта КАК Широта,
	               	|	ItobСвойстваПунктовНазначения.Долгота КАК Долгота,
	               	|	ВЫБОР
	               	|		КОГДА ItobСвойстваПунктовНазначения.НеПоказыватьНадпись
	               	|			ТОГДА """"
	               	|		ИНАЧЕ ItobСвойстваПунктовНазначения.ПунктНазначения.Наименование
	               	|	КОНЕЦ КАК Надпись,
	               	|	ItobСвойстваПунктовНазначения.ПунктНазначения,
	               	|	ПОДСТРОКА("""", 0, 100) КАК ИмяКартинки,
	               	|	ВЫБОР
	               	|		КОГДА ItobСвойстваПунктовНазначения.ИконкаНаКарте = ЗНАЧЕНИЕ(Справочник.ItobИконкиОбъектов.ПустаяСсылка)
	               	|			ИЛИ ТИПЗНАЧЕНИЯ(ItobСвойстваПунктовНазначения.ИконкаНаКарте) = ТИП(СТРОКА)					
	               	|			ИЛИ ItobСвойстваПунктовНазначения.ИконкаНаКарте = НЕОПРЕДЕЛЕНО					
	               	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ItobИконкиОбъектов.ItobИконкаКругЗеленый)
	               	|		ИНАЧЕ ItobСвойстваПунктовНазначения.ИконкаНаКарте
	               	|	КОНЕЦ КАК ИконкаНаКарте
	               	|ИЗ
	               	|	РегистрСведений.ItobСвойстваПунктовНазначения КАК ItobСвойстваПунктовНазначения"
			+?(Метаданные.Справочники[СправочникПунктыНазначения].ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено, "", ",
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник."+СправочникПунктыНазначения+".ДополнительныеРеквизиты КАК ДопРеквизиты
			        |		ПО ItobСвойстваПунктовНазначения.ПунктНазначения = ДопРеквизиты.Ссылка")+"
	               	|ГДЕ
	               	|	ItobСвойстваПунктовНазначения.ПоказыватьНаКарте = ИСТИНА";
	
	ТекстЗапроса =  ТекстЗапроса + " И "+ ?(ТекстЗапросаУсловия = "", "ИСТИНА", ТекстЗапросаУсловия);
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьВыраженияОформленияПунктов()
	
	СписокПараметровЗапроса = Новый Структура;
	
	ЗапросНастройки = Новый Запрос("ВЫБРАТЬ
	                               |	ItobНастройкиОтображенияЗаявок.Наименование КАК Наименование,
	                               |	ItobНастройкиОтображенияЗаявок.ВидФигуры,
	                               |	ItobНастройкиОтображенияЗаявок.ХранилищеПользовательскихНастроекОтборов,
	                               |	ItobНастройкиОтображенияЗаявок.НастройкиОформления,
	                               |	ItobНастройкиОтображенияЗаявок.Приоритет КАК Приоритет
	                               |ИЗ
	                               |	Справочник.ItobНастройкиОтображенияПунктов КАК ItobНастройкиОтображенияЗаявок
	                               |ГДЕ
	                               |	НЕ ItobНастройкиОтображенияЗаявок.ПометкаУдаления
	                               |
	                               |УПОРЯДОЧИТЬ ПО
	                               |	Приоритет,
	                               |	Наименование");
	СчетчикПараметров = 1;
	ТекстЗапросаОткрытыеЗаявки = "";
	ТекстЗапросаЗапланированныеЗаявки = "";
	ТекстЗапросаВидФигуры = "";
	
	ВыборкаНастройки = ЗапросНастройки.Выполнить().Выбрать();
	Пока ВыборкаНастройки.Следующий() Цикл
		ХранилищеПользовательскихНастроекОтборов = ВыборкаНастройки.ХранилищеПользовательскихНастроекОтборов.Получить();
		Если ХранилищеПользовательскихНастроекОтборов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиОформления = ВыборкаНастройки.НастройкиОформления.Получить();
		Если НастройкиОформления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Цвета = НастройкиОформления.Цвета;				
			ЦветОткрытыхЗаявок = ItobОбщегоНазначения.ПривестиЦветК_RGB(Цвета["ЦветНадписи"].Получить());
		Исключение
			ЦветОткрытыхЗаявок = Новый Цвет(255,0,0);
		КонецПопытки;
		ВидФигуры = ВыборкаНастройки.ВидФигуры;
		
		ТекстУсловия = "1=1";		
		ТекстУсловияСвязи = "";
		Для каждого ЭлементНастроек Из ХранилищеПользовательскихНастроекОтборов.Элементы Цикл
			
			Если НЕ ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
				Продолжить;
				
			КонецЕсли;
			
			Для каждого ЭлементОтбора Из ЭлементНастроек.Элементы Цикл
				Если Не ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;	
				ИмяПараметра = "ПараметрНастройкиОтображения"+Формат(СчетчикПараметров,"ЧН=0");
				
				Если Строка(ЭлементОтбора.ЛевоеЗначение) = "ДнейС_ПоследнегоПосещения" Тогда
				      ИмяТаблицы = "ТабПоследниеПосещения"
				Иначе	
				       ИмяТаблицы = "ItobСвойстваПунктовНазначения"

				КонецЕсли; 
				ТекУсловие = ИмяТаблицы + "." + ЭлементОтбора.ЛевоеЗначение;
				
				Если СтрНайти(ТекУсловие,ИмяТаблицы + "." + "ПунктНазначения.ДополнительныеРеквизиты.Свойство") > 0 Тогда
					ТекстУсловияСвязи = ТекстУсловияСвязи + " ДопРеквизиты.Свойство = &"+ИмяПараметра+" И "
				КонецЕсли; 
				
				ТекУсловие  = СтрЗаменить(ТекУсловие,ИмяТаблицы + "." + "ПунктНазначения.ДополнительныеРеквизиты","ДопРеквизиты");
				
				СчетчикПараметров = СчетчикПараметров+1;
				
				СписокПараметровЗапроса.Вставить(ИмяПараметра, ЭлементОтбора.ПравоеЗначение);
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ТекУсловие = ТекУсловие+" = &"+ИмяПараметра;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					ТекУсловие = "НЕ "+ТекУсловие+" = &"+ИмяПараметра;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
					ТекУсловие = ТекУсловие+" > &"+ИмяПараметра;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
					ТекУсловие = ТекУсловие+" >= &"+ИмяПараметра;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
					ТекУсловие = ТекУсловие+" < &"+ИмяПараметра;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					ТекУсловие = ТекУсловие+" <= &"+ИмяПараметра;				
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ТекУсловие = ТекУсловие+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					ТекУсловие = "НЕ "+ТекУсловие+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ТекУсловие = ТекУсловие+" В (&"+ИмяПараметра+")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					ТекУсловие = ТекУсловие+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
					ТекУсловие = "НЕ "+ТекУсловие+" В (&"+ИмяПараметра+")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					ТекУсловие = "НЕ "+ТекУсловие+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
					ТекУсловие = ТекУсловие+" ПОДОБНО ""%"+СтрЗаменить(ЭлементОтбора.ПравоеЗначение,"""","""""")+"%""";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
					ТекУсловие = "НЕ "+ТекУсловие+" ПОДОБНО ""%"+СтрЗаменить(ЭлементОтбора.ПравоеЗначение,"""","""""")+"%""";
				Иначе
					// Запрещенное условие, пропускаем.
					Продолжить;
				КонецЕсли;
				
				ТекстУсловия = ТекстУсловия+" И "+ТекУсловие;
				
			КонецЦикла;	
			
		КонецЦикла;
		
		ИмяПараметраЦветОткрытыеЗаявки        = "ЦветОткрытыеЗаявки"+СчетчикПараметров;
		ИмяПараметраВидФигуры                 = "ВидФигуры"+СчетчикПараметров;
		
		СписокПараметровЗапроса.Вставить(ИмяПараметраЦветОткрытыеЗаявки, ЦветОткрытыхЗаявок);
		СписокПараметровЗапроса.Вставить(ИмяПараметраВидФигуры, ВидФигуры);
		
		ТекстЗапросаОткрытыеЗаявки = ТекстЗапросаОткрытыеЗаявки+"
		|	КОГДА "+ТекстУсловия+" ТОГДА """+ИмяПараметраЦветОткрытыеЗаявки+"""";
		
		ТекстЗапросаВидФигуры = ТекстЗапросаВидФигуры+"
		|	КОГДА "+ТекстУсловия+" ТОГДА &"+ИмяПараметраВидФигуры;				
		
	КонецЦикла;
	
	ЦветОткрытыеЗаявкиПоУмолчанию = Новый Цвет(255,0,0);
	
	СписокПараметровЗапроса.Вставить("ЦветОткрытыеЗаявкиПоУмолчанию", ЦветОткрытыеЗаявкиПоУмолчанию);
	
	Если ТекстЗапросаОткрытыеЗаявки = "" Тогда
		ТекстЗапросаОткрытыеЗаявки = """ЦветОткрытыеЗаявкиПоУмолчанию"" КАК ЦветОткрытыеЗаявки";		
	Иначе
		ТекстЗапросаОткрытыеЗаявки = "ВЫБОР "+ТекстЗапросаОткрытыеЗаявки+"
		|	ИНАЧЕ ""ЦветОткрытыеЗаявкиПоУмолчанию""
		|КОНЕЦ КАК ЦветОткрытыеЗаявки";	
	КонецЕсли;		
	
	Если ТекстЗапросаВидФигуры = "" Тогда
		ТекстЗапросаВидФигуры = """"" КАК ВидФигуры";		
	Иначе
		ТекстЗапросаВидФигуры = "ВЫБОР "+ТекстЗапросаВидФигуры+"
		|	ИНАЧЕ """"
		|КОНЕЦ КАК ВидФигуры";	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаОткрытыеЗаявки+",
	|"+ТекстЗапросаВидФигуры;
	
	Возврат Новый Структура("ТекстЗапроса,СписокПараметровЗапроса,ТекстУсловияСвязи", ТекстЗапроса, СписокПараметровЗапроса,ТекстУсловияСвязи);	
	
КонецФункции

#КонецОбласти

Функция ПараметрыПунктаОкружности()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ШиротаЦентра");
	Параметры.Вставить("ДолготаЦентра");
	Параметры.Вставить("РадиусФиксацииПосещения", 0);

	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
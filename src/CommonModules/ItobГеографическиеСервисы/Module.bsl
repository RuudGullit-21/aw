
#Область ПрограммныйИнтерфейс

#Область МетодыГеосервиса

// Прямое геокодирование.
//
// Параметры:
//  Адрес		 - Строка	 - Представление адреса.
//  ТекстОшибки	 - Строка	 - Текст ошибки.
// 
// Возвращаемое значение:
//  Структура - Параметры адреса.
//
Функция ПрямоеГеокодирование(Адрес, ТекстОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ТекстОшибки = "Не заполнен адрес";
		Возврат Неопределено;
	КонецЕсли;
	
	СтрАдрес = ItobГеографическиеАдреса.ПреобразоватьАдреснуюСтроку(Адрес);
	
	ГеоСервис = ItobГеографическиеСервисыПовтИсп.ОбработчикПрямогоГеокодирования();
	
	Если Не ЗначениеЗаполнено(ГеоСервис) Тогда
		ТекстОшибки = "Не задан геосервис прямого геокодирования";
		Возврат Неопределено;
	КонецЕсли;
	
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ОбработчикГеоСервиса = ItobГеографическиеСервисыПовтИсп.ВнешняяОбработка(ГеоСервис);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Адрес", СтрАдрес);
	Параметры.Вставить("Таймаут", Справочники.ItobГеографическиеСервисы.Таймаут());
	
	Результат = ОбработчикГеоСервиса.СервисПрямогоГеокодирования(Параметры, ТекстОшибки);
	
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	
	Если Результат = Неопределено И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Адрес ""%1"" не найден'"), Адрес);	
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции

// Обратное геокодирование.
//
// Параметры:
//  Широта		 - Число - Географическая широта.
//  Долгота		 - Число - Географическая долгота.
//  ТекстОшибки	 - Строка	 - Текст ошибки.
// 
// Возвращаемое значение:
//  Строка - Представление адреса.
//
Функция ОбратноеГеокодирование(Широта, Долгота, ТекстОшибки = "") Экспорт
	
	Если Не (ЗначениеЗаполнено(Широта) И ЗначениеЗаполнено(Долгота)) Тогда
		ТекстОшибки = "Не заданы координаты";
		Возврат Неопределено;
	КонецЕсли;
	
	ГеоСервис = ItobГеографическиеСервисыПовтИсп.ОбработчикОбратногоГеокодирования();
	Если Не ЗначениеЗаполнено(ГеоСервис) Тогда
		ТекстОшибки = "Не задан геосервис обратного геокодирования";
		Возврат Неопределено;
	КонецЕсли;
	
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ОбработчикГеоСервиса = ItobГеографическиеСервисыПовтИсп.ВнешняяОбработка(ГеоСервис);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Широта", 	Широта);
	Параметры.Вставить("Долгота", 	Долгота);
	Параметры.Вставить("Таймаут", 	Справочники.ItobГеографическиеСервисы.Таймаут());
	
	Результат = ОбработчикГеоСервиса.СервисОбратногоГеокодирования(Параметры, ТекстОшибки);
	
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	
	Если ЗначениеЗаполнено(ТекстОшибки) ИЛИ НЕ ЗначениеЗаполнено(Результат) Тогда
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = "Не удалось геокодировать адрес";	
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Геосервис.ИмяОбработки = "Nominatim" 
		 И Геосервис.Версия <= 1.1 Тогда	// Обработчиком обратного геокодирования может быть Nominatim старой версии.
		 
		Если НЕ Результат.Результат Тогда
			ТекстОшибки = "Не удалось геокодировать адрес";
			Возврат Неопределено;
		КонецЕсли;
		
		ОбработанныйРезультат = СтруктураРезультатаОбратногоГеокодирования();
		ЗаполнитьЗначенияСвойств(ОбработанныйРезультат, Результат.Детали);  	// Широта, Долгота, представление, точность.
		ЗаполнитьЗначенияСвойств(ОбработанныйРезультат.Георамка, Результат.Детали);   // Георамка.
		ОбработанныйРезультат.Адрес = Результат.Адрес;
	Иначе
		ОбработанныйРезультат = Результат;
	КонецЕсли;
	
	ЗаписатьРезультатОбратногоГеокодирования(Широта, Долгота, ОбработанныйРезультат);	
	
	
	Возврат ?(ТипЗнч(ОбработанныйРезультат) = Тип("Строка"),  // В случае старых геосервисов возможен ответ в виде строки.
			  ОбработанныйРезультат, 
			  ОбработанныйРезультат.Адрес);
	
КонецФункции

// Расчет маршрута.
//
// Параметры:
//  ВходящиеПараметры	 - Структура - Входящие параметры содержит:
//		* ТаблицаТочекМаршрута  - ТаблицаЗначений - Точки маршрута.
//		* СпособРасчетаМаршрута - СправочникСсылка.упСпособыРасчетаМаршрута - Способ расчета маршрута.
//  ТекстОшибки			 - Строка - Текст ошибки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Рассчитанный маршрут.
//
Функция РасчетМаршрута(ВходящиеПараметры, ТекстОшибки = "") Экспорт
	
	ТаблицаТочекМаршрута = ВходящиеПараметры;  // Унификация модулей ЦСМ и ТМС (независимость от наличия способа расчета маршрута).
	СпособРасчетаМаршрута = Неопределено;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда   
		ТаблицаТочекМаршрута = ВходящиеПараметры.ТаблицаТочекМаршрута;	
		СпособРасчетаМаршрута = ВходящиеПараметры.СпособРасчетаМаршрута;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаТочекМаршрута) Тогда
		ТекстОшибки = "Не заполнен маршрут";
		Возврат Неопределено;
	КонецЕсли;
	
	// Копируем основную таблицу и сворачиваем ее, для проверки количества различных координат.
	ТаблицаТочекМаршрутаКоординаты = ТаблицаТочекМаршрута.Скопировать();
	ТаблицаТочекМаршрутаКоординаты.Свернуть("Широта,Долгота");
	Если ТаблицаТочекМаршрутаКоординаты.Количество() = 1 Тогда
		Если ТаблицаТочекМаршрута.Колонки.Найти("Путь") = Неопределено Тогда
			ТаблицаТочекМаршрута.Колонки.Добавить("Путь", Новый ОписаниеТипов("ТаблицаЗначений"));
		КонецЕсли;
		Если ТаблицаТочекМаршрута.Колонки.Найти("Index") = Неопределено Тогда
			ТаблицаТочекМаршрута.Колонки.Добавить("Index", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		Путь = Новый ТаблицаЗначений();
		Путь.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"));
		Путь.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 14, ДопустимыйЗнак.Любой)));
		Путь.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 14, ДопустимыйЗнак.Любой)));
		
		Для Каждого ТаблицаТочекМаршрутаСтрока Из ТаблицаТочекМаршрута Цикл
			ТаблицаТочекМаршрутаСтрока.Index = ТаблицаТочекМаршрута.Индекс(ТаблицаТочекМаршрутаСтрока);
			ТаблицаТочекМаршрутаСтрока.Путь = Путь.Скопировать();
		КонецЦикла;
		
		Возврат ТаблицаТочекМаршрута;	
	КонецЕсли; 
	
	ГеоСервис = ItobГеографическиеСервисыПовтИсп.ОбработчикРасчетаМаршрута();
	
	Если Не ЗначениеЗаполнено(ГеоСервис) Тогда
		ТекстОшибки = "Не задан геосервис расчета маршрута";
		Возврат Неопределено;
	КонецЕсли;
	
	КлючОграничения = Неопределено;	
	Если ЗначениеЗаполнено(СпособРасчетаМаршрута) Тогда		
		КлючОграничения = ПолучитьКлючОграничения(СпособРасчетаМаршрута, Геосервис);
		
		Если Не ЗначениеЗаполнено(КлючОграничения) Тогда
			ТекстОшибки = ТекстОшибкиТипОграниченияНеНастроен(СпособРасчетаМаршрута, Геосервис);
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ОбработчикГеоСервиса = ItobГеографическиеСервисыПовтИсп.ВнешняяОбработка(ГеоСервис);
		
	Параметры = Новый Структура;
	Параметры.Вставить("ТаблицаТочекМаршрута", ТаблицаТочекМаршрута);
	Параметры.Вставить("Таймаут", Справочники.ItobГеографическиеСервисы.Таймаут());
	Параметры.Вставить("КлючОграничения", КлючОграничения);
	
	Результат = ОбработчикГеоСервиса.СервисРасчетаМаршрута(Параметры, ТекстОшибки);	
	
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	
	Возврат Результат;
	
КонецФункции

// Функция - Параметры расчета расстояний
// 
// Возвращаемое значение:
//	Структура 
//
Функция ПараметрыРасчетаРасстояний() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Источники");   // Массив  структур, содержащих поля "широта" и "долгота", участвующих в произведении координат "слева".
	Параметры.Вставить("Назначения");   // Массив  структур, содержащих поля "широта" и "долгота", участвующих в произведении координат "справа".
	Параметры.Вставить("СпособРасчетаМаршрута");

	
	Возврат Параметры;
	
КонецФункции

// Функция - Матричный расчет расстояний
//
// Параметры:
//  ПараметрыРасчетаРасстояний	 - Структура - параметры расчета расстояний
//  ТекстОшибки					 - Строка - текст ошибки.
// 
// Возвращаемое значение:
//	Структура 
//
Функция МатричныйРасчетРасстояний(ПараметрыРасчетаРасстояний, ТекстОшибки = "") Экспорт
	
	СпособРасчетаМаршрута = ПараметрыРасчетаРасстояний.СпособРасчетаМаршрута;
	
	ГеоСервис = ItobГеографическиеСервисыПовтИсп.ОбработчикРасчетаРасстояния();	
	Если Не ЗначениеЗаполнено(ГеоСервис) Тогда
		ТекстОшибки = "Не задан геосервис расчета расстояний";
		Возврат Неопределено;
	КонецЕсли;
	
	КлючОграничения = Неопределено;	
	Если ЗначениеЗаполнено(СпособРасчетаМаршрута) Тогда		
		КлючОграничения = ПолучитьКлючОграничения(СпособРасчетаМаршрута, Геосервис);
		
		Если Не ЗначениеЗаполнено(КлючОграничения) Тогда
			ТекстОшибки = ТекстОшибкиТипОграниченияНеНастроен(СпособРасчетаМаршрута, Геосервис);
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ОбработчикГеоСервиса = ItobГеографическиеСервисыПовтИсп.ВнешняяОбработка(ГеоСервис);
	
	Параметры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыРасчетаРасстояний);
	Параметры.Вставить("Таймаут", Справочники.ItobГеографическиеСервисы.Таймаут());
	Параметры.Вставить("КлючОграничения", КлючОграничения);	
	Результат = ОбработчикГеоСервиса.СервисМатричногоРасчетаРасстояния(Параметры, ТекстОшибки);

	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

// Определяет версию интерфейса подсистемы (для поддержки обратной совместимости).
// 
// Возвращаемое значение:
//	Число
//
Функция ВерсияИнтерфейса() Экспорт
	
	Возврат 2.1;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ШаблоныСтруктурДанных

// Функция - Структура результата обратного геокодирования
// 
// Возвращаемое значение:
//	Структура 
//
Функция СтруктураРезультатаОбратногоГеокодирования() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Широта", 0);
	Результат.Вставить("Долгота", 0);
	Результат.Вставить("Точность", 0);
	Результат.Вставить("Представление", "");
	Результат.Вставить("Адрес", "");		
	Результат.Вставить("Георамка", СтруктураГеорамки());
	
	
	Возврат Результат;
	
КонецФункции

// Функция - Структура результата прямого геокодирования
// 
// Возвращаемое значение:
//	Структура 
//
Функция СтруктураРезультатаПрямогоГеокодирования() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Широта", 0);
	Результат.Вставить("Долгота", 0);
	Результат.Вставить("Адрес", "");	
	
	
	Возврат Результат;
	
КонецФункции

// Функция - Шаблон таблицы трека
// 
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ШаблонТаблицыТрека() Экспорт
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 6));
	
	ШаблонТрека  = Новый ТаблицаЗначений;
	ШаблонТрека.Колонки.Добавить("Широта", ТипЧисло);
	ШаблонТрека.Колонки.Добавить("Долгота", ТипЧисло);
	ШаблонТрека.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	
	
	Возврат ШаблонТрека;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКлючОграничения(СпособРасчетаМаршрута, Геосервис)
	
	КлючОграничения = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("упГеографическиеСервисы") Тогда
		МодульГеосервисыСПоддержкойОграничений = ОбщегоНазначения.ОбщийМодуль("упГеографическиеСервисыПовтИсп");
		Ограничения = МодульГеосервисыСПоддержкойОграничений.ОграниченияГеосервиса(Геосервис);
		КлючОграничения = Ограничения[СпособРасчетаМаршрута];
	КонецЕсли; 
		
	
	Возврат КлючОграничения;
	
КонецФункции

Функция ТекстОшибкиТипОграниченияНеНастроен(СпособРасчетаМаршрута, Геосервис)
	
	ТекстОшибки = "Для используемого в одной или нескольких ТС способа расчета маршрута """ + СпособРасчетаМаршрута 
				  + """ не задан ключ ограничения в геосервисе """ + Геосервис + """";
				  
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ЗаписатьРезультатОбратногоГеокодирования(Широта, Долгота, Результат)
	
	НачатьТранзакцию();
	Попытка	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ItobГеографическийКлассификатор");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ItobКэшГеокодера");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НовЗапись = РегистрыСведений.ItobГеографическийКлассификатор.СоздатьМенеджерЗаписи();
		НовЗапись.Широта = Результат.Широта;
		НовЗапись.Долгота = Результат.Долгота;
		НовЗапись.Точность = Результат.Точность;
		НовЗапись.Представление = Результат.Представление;		
		НовЗапись.ГеоРамкаСевер = Результат.Георамка.ГеоРамкаСевер;
		НовЗапись.ГеоРамкаЮг = Результат.Георамка.ГеоРамкаЮг;
		НовЗапись.ГеоРамкаЗапад = Результат.Георамка.ГеоРамкаЗапад;
		НовЗапись.ГеоРамкаВосток = Результат.Георамка.ГеоРамкаВосток;				
		НовЗапись.Записать();
		
		НовЗапись = РегистрыСведений.ItobКэшГеокодера.СоздатьМенеджерЗаписи();
		НовЗапись.Широта = Широта;
		НовЗапись.Долгота = Долгота;		
		НовЗапись.ГеоКладрШирота = Результат.Широта;
		НовЗапись.ГеоКладрДолгота = Результат.Долгота;
		НовЗапись.ГеоКладрТочность = Результат.Точность;
		НовЗапись.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'КешированиеДанныхГеокодирования'"), 
								 УровеньЖурналаРегистрации.Ошибка, 
								 Метаданные.РегистрыСведений.ItobГеографическийКлассификатор,, 
								 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								 
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

Функция СтруктураГеорамки()
	
	Возврат Новый Структура("ГеорамкаСевер, ГеорамкаЮг, ГеорамкаЗапад, ГеорамкаВосток", 0, 0, 0, 0);
	
КонецФункции
 
#КонецОбласти
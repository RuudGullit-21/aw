
#Область СлужебныйПрограммныйИнтерфейс

 #Область КомандыЭДО

Процедура КомандыЭДО_ФормаСписка(Форма, Входящий = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма                 = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО   = Элементы.СостояниеЭДО;
	Если Входящий Тогда
		ПараметрыПриСозданииНаСервере.Направление = ОбменСКонтрагентами.НаправленияДокументов().Входящий;
	Иначе
		ПараметрыПриСозданииНаСервере.Направление = ОбменСКонтрагентами.НаправленияДокументов().Исходящий;
	КонецЕсли;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

Процедура КомандыЭДО_ФормаДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма                  = Форма;
	ПараметрыЭДОПриСоздании.ДокументСсылка         = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	// Определим правильное размещение команд на форме документа
	МестоРазмещенияКомандПоУмолчанию = Элементы.Найти("КомандыЭДО");
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = МестоРазмещенияКомандПоУмолчанию;
	КонецЕсли;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	
	Если Форма.Команды.Найти("СоздатьЭлектроннуюТранспортнуюНакладную") <> Неопределено Тогда
		НовыйЭлемент            = Форма.Элементы.Добавить("СоздатьЭлектроннуюТранспортнуюНакладную", Тип("КнопкаФормы"), МестоРазмещенияКомандПоУмолчанию);
		НовыйЭлемент.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = "СоздатьЭлектроннуюТранспортнуюНакладную";
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандыЭДО_ПриЧтенииФормыДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма					 = Форма;
	ПараметрыЭДОПриСоздании.ДокументСсылка 			 = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО	 = Элементы.СостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО		 = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("ЕдиницыИзмерения", "Код", ИдОбъекта);
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.ИНН) Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.КПП) Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = уатЭлектронноеВзаимодействие.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Попытка 
			Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("СтраныМира", "Код", ИдОбъекта);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ИдОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЭлектронныеПеревозочныеДокументы

Функция РеквизитыЭТрН(Основание) Экспорт
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ЭлектроннаяТранспортнаяНакладная", Документы.ЭлектроннаяТранспортнаяНакладная.ПустаяСсылка());
	РеквизитыФормы.Вставить("СостояниеЭТрН",                    ""); 
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ЭлектроннаяТранспортнаяНакладная,
		|	ЭлектроннаяТранспортнаяНакладная.Дата КАК Дата
		|ИЗ
		|	Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная КАК ЭлектроннаяТранспортнаяНакладная
		|		ПО ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка = ЭлектроннаяТранспортнаяНакладная.Ссылка 
		|ГДЕ
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
		|	И НЕ ЭлектроннаяТранспортнаяНакладная.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РеквизитыФормы.ЭлектроннаяТранспортнаяНакладная = Выборка.ЭлектроннаяТранспортнаяНакладная;
		КонецЕсли;
	КонецЕсли; 
	
	РеквизитыФормы.СостояниеЭТрН = СостояниеЭТрН(РеквизитыФормы.ЭлектроннаяТранспортнаяНакладная, Основание);
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция СостояниеЭТрН(ЭлектроннаяТранспортнаяНакладная, Основание) Экспорт 
	
	СостояниеЭТрН = НСтр("ru = 'Не выбран'");
	Если ЗначениеЗаполнено(ЭлектроннаяТранспортнаяНакладная) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭлектроннаяТранспортнаяНакладная, 
			"ТитулГрузоотправителяТранспортнаяНакладнаяНомер, ТитулГрузоотправителяТранспортнаяНакладнаяДата, ТекущийШаг");
			
		СостояниеЭТрН = СтрШаблон("%1 от %2 (%3)", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОбъекта.ТитулГрузоотправителяТранспортнаяНакладнаяНомер), 
			ФОрмат(РеквизитыОбъекта.ТитулГрузоотправителяТранспортнаяНакладнаяДата, "ДФ=dd.MM.yyyy"), РеквизитыОбъекта.ТекущийШаг);
	ИначеЕсли ПравоДоступа("Изменение", Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная) Тогда
		СостояниеЭТрН = НСтр("ru = 'Выбрать документ'"); 
	КонецЕсли;
	
	Возврат СостояниеЭТрН;
КонецФункции

#КонецОбласти 

#Область СведенияОбОрганизацииИлиКонтрагенте

Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено) Экспорт

	ОбъектПолученияСведений = ЮрФизЛицо;
	
	ДанныеЮрФизЛица = СведенияОЮрФизЛице(ОбъектПолученияСведений, ДатаСведений);
	ТипЮрФизЛица    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПолученияСведений, "ЮридическоеФизическоеЛицо");
	
	ДанныеЮрФизЛица.Вставить("Самозанятый", Ложь);
	Если ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ДанныеЮрФизЛица.Вставить("Фамилия",  "");
		ДанныеЮрФизЛица.Вставить("Имя",      "");
		ДанныеЮрФизЛица.Вставить("Отчество", "");
		
		Если ТипЗнч(ОбъектПолученияСведений)=Тип("СправочникСсылка.Организации") Тогда
			НаименованияОрганизации = Справочники.Организации.НаименованияОрганизации(ОбъектПолученияСведений);
			ДанныеЮрФизЛица.Вставить("Фамилия",  НаименованияОрганизации.ФИО.Фамилия);
			ДанныеЮрФизЛица.Вставить("Имя",      НаименованияОрганизации.ФИО.Имя);
			ДанныеЮрФизЛица.Вставить("Отчество", НаименованияОрганизации.ФИО.Отчество);
			ДанныеЮрФизЛица.ПолноеНаименование = НаименованияОрганизации.ФИО.Представление;
		Иначе
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			Если ВРЕГ(Лев(ФИО,2))="ИП" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-2);
			ИначеЕсли ВРЕГ(Лев(ФИО, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-СтрДлина("Индивидуальный предприниматель"));
			КонецЕсли;
			ФИО = СтрЗаменить(ФИО, """","");
			ФИО = СтрЗаменить(ФИО, "'","");
			ФИО = СокрЛП(ФИО);
			ЗаполнитьФИОиДолжность(ДанныеЮрФизЛица, ФИО);
			ДанныеЮрФизЛица.ПолноеНаименование  = ФИО;
			ДанныеЮрФизЛица.Самозанятый         = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеЮрФизЛица.Вставить("ОфициальноеНаименование",	 ДанныеЮрФизЛица.ПолноеНаименование);
	ДанныеЮрФизЛица.Вставить("ТипЮрФизЛица",			 ТипЮрФизЛица);
	ДанныеЮрФизЛица.Вставить("ЮрФизЛицоСсылка",			 ОбъектПолученияСведений.Ссылка);
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

// Предоставляет реквизиты компании (юридического лица или предпринимателя), например, для вывода в печатной форме.
//
// Параметры:
//  Компания		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - компания, реквизиты которой нужно получить
//  Период			 - Дата - дата, на которую нужно получить значения периодических реквизитов
//  БанковскийСчет	 - СправочникСсылка.БанковскиеСчета - банковский счет, реквизиты которого нужно включить в реквизиты компании.
//                     Если не передан, будут включены реквизиты основного банковского счета.
// 
// Возвращаемое значение:
// см. НовыйРеквизитыКомпании() - коллекция общепринятых реквизитов компании.
//
Функция СведенияОЮрФизЛице(Компания, Период = '00010101', Знач БанковскийСчет = Неопределено) Экспорт
	
	Реквизиты = НовыйРеквизитыКомпании();
	
	Если Не ЗначениеЗаполнено(Компания) Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Если ТипЗнч(Компания) = Тип("СправочникСсылка.Организации") Тогда
		ЗаполнитьРеквизитыОрганизации(Реквизиты, Компания, Период);
	ИначеЕсли ТипЗнч(Компания) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗаполнитьРеквизитыКонтрагента(Реквизиты, Компания, Период);
	Иначе
		Возврат Реквизиты;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета) Тогда
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = ПолучитьБанковскийСчетПоУмолчанию(Компания);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет);
		
	КонецЕсли;
	
	// Вторичные данные
	Реквизиты.Представление               = СокрЛП(Реквизиты.Представление);
	Реквизиты.ПолноеНаименование          = СокрЛП(Реквизиты.ПолноеНаименование);
	Реквизиты.СокращенноеНаименование     = СокрЛП(Реквизиты.СокращенноеНаименование);
	Реквизиты.НаименованиеДляПечатныхФорм = СокрЛП(Реквизиты.НаименованиеДляПечатныхФорм);
	Реквизиты.ТекстКорреспондента         = СокрЛП(Реквизиты.ТекстКорреспондента);
	
	Если Не ЗначениеЗаполнено(Реквизиты.ПолноеНаименование) Тогда
		Если ЗначениеЗаполнено(Реквизиты.СокращенноеНаименование) Тогда
			Реквизиты.ПолноеНаименование = Реквизиты.СокращенноеНаименование;
		Иначе
			Реквизиты.ПолноеНаименование = Реквизиты.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Не ПустаяСтрока(Реквизиты.СвидетельствоСерияНомер) Тогда
		Реквизиты.Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'свидетельство %1 от %2'"),
			Реквизиты.СвидетельствоСерияНомер,
			Формат(Реквизиты.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Конструктор коллекции, содержащей общепринятые реквизиты компании (юридического лица или индивидуального предпринимателя).
// 
// Возвращаемое значение:
// Структура - см. содержимое функции
//
Функция НовыйРеквизитыКомпании() Экспорт
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("ЮридическоеФизическоеЛицо",          Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	// Наименования
	Реквизиты.Вставить("Представление",                      "");
	Реквизиты.Вставить("ПолноеНаименование",                 "");
	Реквизиты.Вставить("СокращенноеНаименование",            "");
	Реквизиты.Вставить("НаименованиеДляПечатныхФорм",        "");
	Реквизиты.Вставить("ФамилияИнициалыФизлица",             ""); // Фамилия И.О.
	Реквизиты.Вставить("ФИОФизлица",                         ""); // Фамилия Имя Отчество
	// Адреса и контактная информация
	Реквизиты.Вставить("ЮридическийАдрес",                   "");
	Реквизиты.Вставить("ЗначенияПолейЮридическийАдрес",      ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONЮридическийАдрес",       ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("ФактическийАдрес",                   ""); 
	Реквизиты.Вставить("ЗначенияПолейФактическийАдрес",      ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONФактическийАдрес",       ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("ПочтовыйАдрес",                      ""); 
	Реквизиты.Вставить("ЗначенияПолейПочтовыйАдрес",         ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONПочтовыйАдрес",          ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("Телефоны",                           "");
	Реквизиты.Вставить("ЗначенияПолейТелефоны",              ""); 
	Реквизиты.Вставить("ЗначениеJSONТелефоны",               ""); 
	Реквизиты.Вставить("ТелефонЮридическогоАдреса",          "");
	Реквизиты.Вставить("ЗначенияПолейТелефонЮридическогоАдреса", ""); 
	Реквизиты.Вставить("ЗначениеJSONТелефонЮридическогоАдреса", ""); 
	Реквизиты.Вставить("Факс",                               ""); 
	Реквизиты.Вставить("Email",                              "");
	// Регистрационные данные
	Реквизиты.Вставить("ОГРН",                               ""); // Здесь же ОГРНИП для ИП, рег. номер для иностранных контрагентов
	Реквизиты.Вставить("ДатаРегистрации",                    "");
	Реквизиты.Вставить("КодПоОКПО",                          "");
	Реквизиты.Вставить("ИНН",                                "");
	Реквизиты.Вставить("КПП",                                ""); // Только для ЮЛ
	Реквизиты.Вставить("СвидетельствоСерияНомер",            "");           // Только для ИП
	Реквизиты.Вставить("СвидетельствоДатаВыдачи",            '0001-01-01'); // Только для ИП
	Реквизиты.Вставить("Свидетельство",                      ""); // Свидетельство строкой, только для ИП
	Реквизиты.Вставить("ДокументУдостоверяющийЛичность",     ""); // Только для физлица
	Реквизиты.Вставить("ИндивидуальныйПредприниматель",      Справочники.ФизическиеЛица.ПустаяСсылка()); // Только для организаций-ИП
	Реквизиты.Вставить("СтранаРегистрации",                  Справочники.СтраныМира.ПустаяСсылка());
	Реквизиты.Вставить("НалоговыйНомерВСтранеРегистрации",   "");
	// Банковские реквизиты
	Реквизиты.Вставить("НомерСчета",                         "");
	Реквизиты.Вставить("ТекстКорреспондента",                "");
	Реквизиты.Вставить("БИК",                                "");
	Реквизиты.Вставить("Банк",                               "");
	Реквизиты.Вставить("АдресБанка",                         "");
	Реквизиты.Вставить("КоррСчет",                           "");
	// Должностные лица юридического лица
	Реквизиты.Вставить("Руководитель"                      , Справочники.ФизическиеЛица.ПустаяСсылка());
	Реквизиты.Вставить("РуководительФИО"                   , "");
	Реквизиты.Вставить("ДолжностьРуководителяПредставление", "");
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОрганизации(Реквизиты, Организация, Период)
	
	// Константы
	Реквизиты.СтранаРегистрации = Справочники.СтраныМира.Россия;
	
	// Общие сведения
	ИменаРеквизитовПредпринимателя = "ИндивидуальныйПредприниматель, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи";
	ИменаРеквизитовОбъекта = "ЮридическоеФизическоеЛицо, Представление, ИНН, ОГРН, КодПоОКПО, "
		+ ИменаРеквизитовПредпринимателя;
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаРеквизитовОбъекта);
	
	ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, , ИменаРеквизитовПредпринимателя); // Все, кроме реквизитов предпринимателя
	// (некоторые свойства зависят от того, как оформлен бизнес)
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, ИменаРеквизитовПредпринимателя); // Только реквизиты предпринимателя
	Иначе // Юридическое лицо
		
		Реквизиты.КПП = Организация.КПП;
		
		Если Не ЗначениеЗаполнено(Период) Тогда
			// ОтветственныеЛицаБП.ОтветственныеЛица() не интерпретирует пустую дату как "акутальное значение"
			ПериодОтветственныхЛиц = ТекущаяДатаСеанса();
		Иначе
			ПериодОтветственныхЛиц = Период;
		КонецЕсли;
		
		ОтветственныеЛица = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(Организация, ПериодОтветственныхЛиц);
		Если ЗначениеЗаполнено(ОтветственныеЛица) Тогда
			Реквизиты.Руководитель                       = ОтветственныеЛица.РуководительСсылка;
			Реквизиты.РуководительФИО                    = ОтветственныеЛица.Руководитель;
			Реквизиты.ДолжностьРуководителяПредставление = ОтветственныеЛица.РуководительДолжность;
		КонецЕсли;
		
	КонецЕсли;
	
	// Наименования
	Наименования = Справочники.Организации.НаименованияОрганизации(Организация);
	ЗаполнитьЗначенияСвойств(Реквизиты, Наименования, "ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм");
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Реквизиты.ФИОФизлица = уатОбщегоНазначенияТиповыеСервер.ПолучитьФамилиюИмяОтчество(
			Наименования.ФИО.Фамилия,
			Наименования.ФИО.Имя,
			Наименования.ФИО.Отчество,
			Ложь);
		
		Реквизиты.ФамилияИнициалыФизлица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Наименования.ФИО);
		
	КонецЕсли;
	
	// Контактная информация
	ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Организация, Период);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКонтрагента(Реквизиты, Контрагент, Период)
	
	// Общие сведения
	ИменаРеквизитовПредпринимателя = "ДокументУдостоверяющийЛичность";
	ИменаРеквизитовОбъекта = "ЮридическоеФизическоеЛицо, Представление, ИНН, КодПоОКПО, "
		+ "СтранаРегистрации, НалоговыйНомер, " + ИменаРеквизитовПредпринимателя;
		
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, ИменаРеквизитовОбъекта);
		
	Реквизиты.ДатаРегистрации                  = Дата("00010101");
	Реквизиты.НалоговыйНомерВСтранеРегистрации = ЗначенияРеквизитовОбъекта.НалоговыйНомер;
	
	ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, , ИменаРеквизитовПредпринимателя); // Все, кроме реквизитов предпринимателя
	
	// (некоторые свойства зависят от того, как оформлен бизнес контрагента)
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, ИменаРеквизитовПредпринимателя);// Только реквизиты предпринимателя
	Иначе // Юридическое лицо
		Реквизиты.КПП = Контрагент.КПП;
	КонецЕсли;
	
	// Наименования
	Наименования = НаименованияКонтрагента(Контрагент);
	ЗаполнитьЗначенияСвойств(Реквизиты, Наименования, "ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм");
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПолноеНаименованиеКонтрагента    = ?(Реквизиты.ПолноеНаименование = "ИП " + Реквизиты.Представление, Реквизиты.Представление, Реквизиты.ПолноеНаименование);
		Реквизиты.ФамилияИнициалыФизлица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПолноеНаименованиеКонтрагента);
	КонецЕсли;
	
	// Контактная информация
	ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Контрагент, Период);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет)
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Наименование, ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """")) КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Код, ЕСТЬNULL(БанковскиеСчета.Банк.Код, """")) КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Адрес, ЕСТЬNULL(БанковскиеСчета.Банк.Адрес, """")) КАК АдресБанка,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.КоррСчет, ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """")) КАК КоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыКонтактнойИнформацииКомпании(ТипКомпании)
	
	ВидыКонтактнойИнформацииКомпании = Новый Структура();
	ВидыКонтактнойИнформацииКомпании.Вставить("ЮридическийАдрес");
	ВидыКонтактнойИнформацииКомпании.Вставить("ФактическийАдрес");
	ВидыКонтактнойИнформацииКомпании.Вставить("ПочтовыйАдрес");
	ВидыКонтактнойИнформацииКомпании.Вставить("Телефоны");
	ВидыКонтактнойИнформацииКомпании.Вставить("ТелефонЮридическогоАдреса");
	ВидыКонтактнойИнформацииКомпании.Вставить("Факс");
	ВидыКонтактнойИнформацииКомпании.Вставить("Email");
	
	Если ТипКомпании = Тип("СправочникСсылка.Организации") Тогда
		ВидыКонтактнойИнформацииКомпании.ЮридическийАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ВидыКонтактнойИнформацииКомпании.ФактическийАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ВидыКонтактнойИнформацииКомпании.ПочтовыйАдрес    = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ВидыКонтактнойИнформацииКомпании.Телефоны         = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ВидыКонтактнойИнформацииКомпании.ТелефонЮридическогоАдреса
			= Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации;
		ВидыКонтактнойИнформацииКомпании.Факс             = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		ВидыКонтактнойИнформацииКомпании.Email            = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	Иначе
		ВидыКонтактнойИнформацииКомпании.ЮридическийАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ВидыКонтактнойИнформацииКомпании.ФактическийАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ВидыКонтактнойИнформацииКомпании.ПочтовыйАдрес    = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		ВидыКонтактнойИнформацииКомпании.Телефоны         = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ВидыКонтактнойИнформацииКомпании.ТелефонЮридическогоАдреса = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ВидыКонтактнойИнформацииКомпании.Факс             = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
		ВидыКонтактнойИнформацииКомпании.Email            = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	КонецЕсли;
	
	Возврат ВидыКонтактнойИнформацииКомпании;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Компания, Период)

	ВидыКонтактнойИнформации = Новый ТаблицаЗначений; // Кеш для поиска
	ВидыКонтактнойИнформации.Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ВидыКонтактнойИнформации.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	Для Каждого ОписаниеВидаКИ Из ВидыКонтактнойИнформацииКомпании(ТипЗнч(Компания)) Цикл
		
		ИдентификаторВида = ВидыКонтактнойИнформации.Добавить();
		ИдентификаторВида.Вид = ОписаниеВидаКИ.Значение;
		ИдентификаторВида.ИмяРеквизита = ОписаниеВидаКИ.Ключ;

	КонецЦикла;
	
	КонтактнаяИнформация = уатОбщегоНазначения.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Компания),
		Неопределено, // типы определяются по видам - следующему параметру
		ВидыКонтактнойИнформации.ВыгрузитьКолонку("Вид"),
		Период);

	Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		ИдентификаторВида = ВидыКонтактнойИнформации.Найти(ЭлементКонтактнойИнформации.Вид, "Вид");
		Если ИдентификаторВида = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяРеквизита = ИдентификаторВида.ИмяРеквизита;
		Реквизиты[ИмяРеквизита] = ЭлементКонтактнойИнформации.Представление;
		
		Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			// Заполним детальнее
			
			Если ИмяРеквизита = "ЮридическийАдрес" Тогда
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейЮридическийАдрес";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONЮридическийАдрес";
			ИначеЕсли ИмяРеквизита = "ФактическийАдрес" Тогда
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейФактическийАдрес";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONФактическийАдрес";
			Иначе // ПочтовыйАдрес
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейПочтовыйАдрес";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONПочтовыйАдрес";
			КонецЕсли;
			
			Реквизиты[ИмяРеквизитаЗначенияПолей] = ЭлементКонтактнойИнформации.ЗначенияПолей;
			Реквизиты[ИмяРеквизитаЗначенияПолейJSON] = ЭлементКонтактнойИнформации.Значение;
			
		ИначеЕсли ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			Если ИмяРеквизита = "ТелефонЮридическогоАдреса" Тогда
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейТелефонЮридическогоАдреса";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONТелефонЮридическогоАдреса";
			Иначе // Телефоны
				ИмяРеквизитаЗначенияПолей = "ЗначенияПолейТелефоны";
				ИмяРеквизитаЗначенияПолейJSON = "ЗначениеJSONТелефоны";
			КонецЕсли;
			
			Реквизиты[ИмяРеквизитаЗначенияПолей] = ЭлементКонтактнойИнформации.ЗначенияПолей;
			Реквизиты[ИмяРеквизитаЗначенияПолейJSON] = ЭлементКонтактнойИнформации.Значение;
			
		КонецЕсли;
		
	КонецЦикла; // По КонтактнаяИнформация
	
КонецПроцедуры

// Функция возвращает ссылку на вид контактной информации EMAILКонтрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - ссылка на вид контактной информации EMAILКонтрагента
//
Функция ВидКонтактнойИнформацииEMAILКонтрагента() Экспорт
	
	Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	
КонецФункции

Процедура ЗаполнитьФИОИДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено)
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ИсточникДанных);
	
	СтруктураПриемник.Вставить("Фамилия", ФИО.Фамилия);
	СтруктураПриемник.Вставить("Имя", ФИО.Имя);
	СтруктураПриемник.Вставить("Отчество", ФИО.Отчество);
	Если Должность <> Неопределено Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ОсновнойБанковскийСчет");
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	ТипИсточника    = ТипЗнч(Источник);
	ТипыДокументов  = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	СтрокаПараметровЭД    = ПараметрыЭД.Добавить();
	
	Если ТипИсточника = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, Грузоотправитель, ДоговорКонтрагента");
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = ЗначенияРеквизитов.Организация;
		СтрокаПараметровЭД.Контрагент			 = ЗначенияРеквизитов.Грузоотправитель;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда
		
		СтрокаПараметровЭД.Тип					 = ТипыДокументов.ТоварнаяНакладная;
		СтрокаПараметровЭД.Направление			 = НаправленияДокументов.Исходящий;
		СтрокаПараметровЭД.Организация			 = Источник.Организация;
		СтрокаПараметровЭД.Контрагент			 = Источник.Грузоотправитель;

	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки.
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	ТипыДокументов  = ОбменСКонтрагентами.ТипыДокументов();
	
	Если Параметры.ТипДокумента = ТипыДокументов.ЭТрН Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиПервичногоДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросКонструктораДополнительныхПолейШапкиПервичногоДокумента()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Номер КАК Номер,
	|	уатЗаказГрузоотправителя.Дата КАК Дата,
	|	уатЗаказГрузоотправителя.ВидОперации КАК ВидОперации,
	|	уатЗаказГрузоотправителя.Организация КАК Организация,
	|	уатЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителя.Подразделение КАК ПодразделениеОрганизации,
	|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителя.ВалютаДокумента КАК ВалютаДокумента,
	|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	|	уатЗаказГрузоотправителя.АдресНазначения.Адрес КАК АдресДоставки,
	|	уатЗаказГрузоотправителя.СуммаДокумента КАК СуммаДокумента,
	|	уатЗаказГрузоотправителя.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено)
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита
	|	И НЕ ИскСправочник.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НаименованияКонтрагента(Контрагент) Экспорт
	
	НаименованияКонтрагента = Новый Структура("СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат НаименованияКонтрагента;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, НаименованиеПолное");
	НаименованияКонтрагента.СокращенноеНаименование     = ЗначенияРеквизитов.Наименование;
	НаименованияКонтрагента.ПолноеНаименование          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияКонтрагента.НаименованиеДляПечатныхФорм = ЗначенияРеквизитов.НаименованиеПолное;
	Возврат НаименованияКонтрагента;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

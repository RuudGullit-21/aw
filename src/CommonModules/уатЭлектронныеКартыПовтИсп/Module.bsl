
#Область СлужебныйПрограммныйИнтерфейс 

// Функция возвращает скрипт для отображения карты
//
Функция ПолучитьСкрипт(ТипЭлектронныхКарт = Неопределено) Экспорт

	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьСкрипт(ТипЭлектронныхКарт);
	
КонецФункции

Функция ПолучитьСтрокуИнициализацииКоординаты(ПунктНазначения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ПунктНазначения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Лат КАК Лат,
	|	уатПунктыНазначения.Лон КАК Лон
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	НЕ уатПунктыНазначения.ПометкаУдаления
	|	И уатПунктыНазначения.Ссылка = &Ссылка
	|	И НЕ(уатПунктыНазначения.Лат = 0
	|				И уатПунктыНазначения.Лон = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Широта  = Выборка.Лат;
		Долгота = Выборка.Лон;
	Иначе 
		Широта  = 55.753318;
		Долгота = 37.620736;
	КонецЕсли;
	Координаты = Новый Структура("Широта, Долгота", Широта, Долгота);
	Возврат Координаты; 
	
КонецФункции

Функция ПолучитьПредставлениеАдресаOSM(ЗначенияПолейАдреса) Экспорт
	Возврат уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(ЗначенияПолейАдреса);
КонецФункции

Функция ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта) Экспорт
	
	ТелоШаблона = ""; 
	Если ВидОбъекта = "ПунктыНазначения" Тогда 
		ТелоШаблона = НСТр("ru = '<p><span style=""font-weight: bold;"">Пункт: <a href=""[уатПунктыНазначения.Ссылка]"" style=""font-weight: normal;"">[уатПунктыНазначения.Наименование]</a></p><p><span style=""font-weight: bold;"">Адрес:</span><span> [уатПунктыНазначения.Адрес]</span></p>'");
	ИначеЕсли ВидОбъекта = "Контрагенты" Тогда 
		ТелоШаблона = НСТр("ru = '<p><span style=""font-weight: bold;"">Контрагент: <a href=""[Контрагенты.Ссылка]"" style=""font-weight: normal;"">[Контрагенты.Наименование]</a></p><p><span style=""font-weight: bold;"">Пункт:</span><span> [ДанныеПункта.Пункт.Наименование]</span></p>'");
	ИначеЕсли ВидОбъекта = "ТС" Тогда 
		ТелоШаблона = НСТр("ru = '<p><span style=""font-weight: bold;"">ТС: <a href=""[уатТС.Ссылка]"" style=""font-weight: normal;"">[уатТС.Наименование]</a></p>'");	
	ИначеЕсли ВидОбъекта = "Маршруты" Тогда
		ТелоШаблона = НСТр("ru = '<p><span style=""font-weight: bold;"">Маршруты: <a href=""[уатМаршруты.Ссылка]"" style=""font-weight: normal;"">[уатМаршруты.Наименование]</a></p><p><span style=""font-weight: bold;"">Пункт:</span><span""> [ДанныеПункта.Пункт.Наименование]</span></p><p><span style=""font-weight: bold;"">Операция:</span><span""> [ДанныеПункта.Операция]</span></p>'");
	ИначеЕсли ВидОбъекта = "ЗаказГрузоотправителя" Тогда 
		ТелоШаблона = НСТр("ru = '<p style=""text-align: left;""><span style=""font-weight: bold;"">Заказ на ТС: </span><a href=""[уатЗаказГрузоотправителя.Ссылка]"" style=""font-weight: normal;"">[уатЗаказГрузоотправителя.Номер] от [уатЗаказГрузоотправителя.Дата{ДФ=''dd.MM.yyyy HH:mm''}]</a></p><p style=""text-align: left;""><span style=""font-weight: bold;"">Заказчик:     </span>[уатЗаказГрузоотправителя.Контрагент]</p><p style=""text-align: left;""><span style=""font-weight: bold;"">Пункт:           </span><span style=""font-weight: normal;"">[ДанныеПункта.Пункт.Наименование]</span></p><p style=""text-align: left;""><span style=""font-weight: bold;"">Операция:    </span>[ДанныеПункта.ТипТочкиМаршрута]</p><p style=""text-align: left;""><span style=""font-weight: bold;"">Временное окно с: </span>[ДанныеПункта.ОкноС{ДФ=''dd.MM.yyyy HH:mm''}] по [ДанныеПункта.ОкноПо{ДФ=''dd.MM.yyyy HH:mm''}]</p>'");
	ИначеЕсли ВидОбъекта = "МаршрутныйЛист" Тогда
		ТелоШаблона = НСТр("ru = '<p><span style=""font-weight: bold;"">Пункт: </span>[ДанныеПункта.Пункт.Наименование]</p>
                            |<p><span style=""font-weight: bold;"">Документ: </span>[ДанныеПункта.ПредставлениеМЛ]</p>
                            |<p><span style=""font-weight: bold;"">ТС:</span> [ДанныеПункта.ТС.Наименование]</p>
                            |<p><span style=""font-weight: bold;"">Прибытие план: </span>[ДанныеПункта.ПрибытиеПлан{ДФ=''dd.MM.yyyy HH:mm''}]</p>
                            |<p><span style=""font-weight: bold;"">Прибытие факт:</span> [ДанныеПункта.ПрибытиеФакт{ДФ=''dd.MM.yyyy HH:mm''}]</p>
                            |<p><span style=""font-weight: bold;"">Опоздание:</span> <span style=""color: #ff0000;"">[ДанныеПункта.Опоздание]</span></p>
                            |<p><span style=""font-weight: bold;"">Отклонение:</span> <span style=""color: #ff0000;"">[ДанныеПункта.ОтклонениеПрибытие]</span></p>
                            |<p style=""text-align: left;margin-left: 0pt;""><span style=""font-weight: bold;"">Убытие план:</span> [ДанныеПункта.УбытиеПлан{ДФ=''dd.MM.yyyy HH:mm''}]</p>
                            |<p style=""text-align: left;""><span style=""font-weight: bold;"">Убытие факт:</span> [ДанныеПункта.УбытиеФакт{ДФ=''dd.MM.yyyy HH:mm''}]</p>
                            |<p style=""text-align: left;""><br></p>'");
	ИначеЕсли ВидОбъекта = "МаршрутныйЛистЗаказ" Тогда
		ТелоШаблона = НСТр("ru = '<p style=""text-align: left;""><span style=""font-weight: bold;"">Заказ на ТС: </span><a href=""[ДанныеЗаказа.Заказ.Ссылка]"" style=""font-weight: normal;"">[ДанныеЗаказа.Заказ.Номер] от [ДанныеЗаказа.Заказ.Дата{ДФ=''dd.MM.yyyy HH:mm''}]</a></p><p style=""text-align: left;""><span style=""font-weight: bold;"">Операция:    </span>[ДанныеЗаказа.ТипТочкиМаршрута]</p><p style=""text-align: left;""><span style=""font-weight: bold;"">Временное окно с: </span>[ДанныеЗаказа.ОкноС{ДФ=''dd.MM.yyyy HH:mm''}] по [ДанныеЗаказа.ОкноПо{ДФ=''dd.MM.yyyy HH:mm''}]</p>'");
	ИначеЕсли ВидОбъекта = "ПутевойЛист" Тогда
		ТелоШаблона = НСТр("ru = '<p><span style=""font-weight: bold;"">Путевой лист: <a href=""[уатПутевойЛист.Ссылка]"" style=""font-weight: normal;"">[уатПутевойЛист.Номер] от [уатПутевойЛист.Дата{ДФ=''dd.MM.yyyy HH:mm''}]</a></p><p><span style=""font-weight: bold;"">Пункт:</span><span> [ДанныеПункта.Пункт.Наименование]</span></p><p><span style=""font-weight: bold;"">Время прибытия:</span><span> [ДанныеПункта.Дата{ДФ=''dd.MM.yyyy HH:mm''}]</span></p>'");
	КонецЕсли;
	ПолучитьТекстШаблонаHTML(ТелоШаблона);
	Возврат ТелоШаблона;
	
КонецФункции

Функция РазложитьСтрокуШаблонаВМассивПодстрок(ВидОбъекта) Экспорт 
	
	СоответвиеРезультат       = Новый Соответствие();
	МассивПодстрок            = Новый Массив();
	МассивРеквизиты           = Новый Массив();
	ИмяОбъекта                = "";
	ПолноеИмя                 = "";
	СтрокаРеквизитов          = "";
	СтрокаЗапроса             = "";
	СтрокаЗапросаДопПараметры = "";
	Шаблон                    = "";
	
	Если ВидОбъекта = "ПунктыНазначения" Тогда 
		ИмяОбъекта = "уатПунктыНазначения";
		ПолноеИмя  = "Справочник.уатПунктыНазначения";
	ИначеЕсли ВидОбъекта = "Контрагенты" Тогда
		ИмяОбъекта = "Контрагенты";
		ПолноеИмя  = "Справочник.Контрагенты";
	ИначеЕсли ВидОбъекта = "ТС" Тогда
		ИмяОбъекта = "уатТС";
		ПолноеИмя  = "Справочник.уатТС";
	ИначеЕсли ВидОбъекта = "Маршруты" Тогда 
		ИмяОбъекта = "уатМаршруты";
		ПолноеИмя  = "Справочник.уатМаршруты";
	ИначеЕсли ВидОбъекта = "ЗаказГрузоотправителя" Тогда 
		ИмяОбъекта = "уатЗаказГрузоотправителя";
		ПолноеИмя  = "Документ.уатЗаказГрузоотправителя";
	ИначеЕсли ВидОбъекта = "ПутевойЛист" Тогда
		ИмяОбъекта = "уатПутевойЛист";
		ПолноеИмя  = "Документ.уатПутевойЛист";
	ИначеЕсли ВидОбъекта = "МаршрутныйЛистЗаказ" Тогда 
		ИмяОбъекта = "уатЗаказГрузоотправителя";
		ПолноеИмя  = "Документ.уатЗаказГрузоотправителя";
	ИначеЕсли ВидОбъекта = "МаршрутныйЛист" Тогда
		ИмяОбъекта = "уатМаршрутныйЛист"; 
		ПолноеИмя  = "Документ.уатМаршрутныйЛист";
	КонецЕсли;
	
	НастройкиШаблонов = уатЭлектронныеКартыПовтИсп.ПолучитьНастройкиШаблоновИнформацииДляКарты();
	Если НастройкиШаблонов.Свойство(ВидОбъекта) Тогда  
		ШаблонСтроки = НастройкиШаблонов[ВидОбъекта];
	Иначе 
		ШаблонСтроки = ПолучитьТекстШаблонаПоУмолчанию(ВидОбъекта);
	КонецЕсли;
	ШаблонСтроки = СтрЗаменить(СтрЗаменить(ШаблонСтроки, "   ", "&nbsp;&nbsp;&nbsp;"), "  ", "&nbsp;&nbsp;");
	ШаблонСтроки = СтрЗаменить(СтрЗаменить(СтрЗаменить(ШаблонСтроки, Символы.ПС, ""), "<p style=""", "<p style=""margin: 5px 0;"), "<p>", "<p style=""margin: 5px 0;"">");
	
	ТеМассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ШаблонСтроки, "[");
	
	Индекс = 0;
	
	ТекстПостроитель = Новый ЗаписьXML;
	ТекстПостроитель.УстановитьСтроку();
	
	ТекстПостроительДопЗапрос = Новый ЗаписьXML;
	ТекстПостроительДопЗапрос.УстановитьСтроку();
	
	ТекстПостроительРеквизиты = Новый ЗаписьXML;
	ТекстПостроительРеквизиты.УстановитьСтроку();
	
	ТекстПостроительДопРеквизиты = Новый ЗаписьXML;
	ТекстПостроительДопРеквизиты.УстановитьСтроку();
	
	ЗаписыватьПарметр           = Ложь;
	ЗаписыватьПарметрЗапроса    = Ложь;
	ЗаписыватьПарметрДопЗапроса = Ложь;
	ЭтоСсылка = Ложь;
	Для Каждого ТекСтрока Из ТеМассивПодстрок Цикл 
		МассивПодстрок.Добавить(ТекСтрока);
		ЭтоСсылка = СтрНайти(ТекСтрока, "<a href=""") <> 0;
		
		Если Индекс + 1 <= ТеМассивПодстрок.Количество() - 1 Тогда
			ПозицияПараметра = СтрНайти(ТеМассивПодстрок[Индекс + 1], "]");
			Параметр         =  Лев(ТеМассивПодстрок[Индекс + 1], ПозицияПараметра);
			ТеМассивПодстрок[Индекс + 1] = СтрЗаменить(ТеМассивПодстрок[Индекс + 1], Параметр, "");
			МассивПодстрок.Добавить("[" + Параметр); 
			
			ТекПараметр = СоответвиеРезультат.Получить("[" + Параметр);
			Если ТекПараметр = Неопределено Тогда
				ТекПараметр = Новый Структура("МассивИндексов, МассивИндексовСсылок, Имя, Значение, СтрокаФормата",
					Новый Массив, Новый Массив, "", "", ""); 
			КонецЕсли; 
			Если ЭтоСсылка Тогда
				ТекПараметр.МассивИндексовСсылок.Добавить(МассивПодстрок.Количество() - 1);
			Иначе
				ТекПараметр.МассивИндексов.Добавить(МассивПодстрок.Количество() - 1);
			КонецЕсли;
			ПозицияФормат = СтрНайти(Параметр, "{");
			Если ПозицияФормат > 0 Тогда
				ИмяПараметра  = Лев(Параметр, ПозицияФормат - 1); 
				СтрокаФормата = Сред(Параметр, ПозицияФормат + 1, СтрДлина(Параметр) - СтрДлина(ИмяПараметра) -3);
			Иначе 
				ПозицияОкончание = СтрНайти(Параметр, "]");
				
				ИмяПараметра  = Лев(Параметр, ПозицияОкончание - 1);
				СтрокаФормата = "";
			КонецЕсли; 
			ТекПараметр.Имя           = ИмяПараметра;
			ТекПараметр.СтрокаФормата = СтрокаФормата;
			
			Если МассивРеквизиты.Найти(ТекПараметр.Имя)= Неопределено Тогда
				Если СтрНайти(ИмяПараметра, ИмяОбъекта + ".") <> 0 Тогда
					Если ЗаписыватьПарметрЗапроса Тогда 
						ТекстПостроитель.ЗаписатьБезОбработки(",");
						ТекстПостроительРеквизиты.ЗаписатьБезОбработки(",");
						
						ЗаписыватьПарметрЗапроса = Ложь;
					КонецЕсли;
					
					ТекРеквизитБезПробелов = СтрЗаменить(ИмяПараметра, " ", "");
					ТекРеквизитБезТочек    = СтрЗаменить(ИмяПараметра, ".", "");
					ТекстПостроитель.ЗаписатьБезОбработки("ПРЕДСТАВЛЕНИЕССЫЛКИ(");
					ТекстПостроитель.ЗаписатьБезОбработки(ТекРеквизитБезПробелов);
					ТекстПостроитель.ЗаписатьБезОбработки(")");
					ТекстПостроитель.ЗаписатьБезОбработки(" КАК ");
					ТекстПостроитель.ЗаписатьБезОбработки(ТекРеквизитБезТочек);
					
					ТекстПостроительРеквизиты.ЗаписатьБезОбработки(ТекРеквизитБезТочек);
					
					ТекстПостроитель.ЗаписатьБезОбработки(",");
					ТекстПостроитель.ЗаписатьБезОбработки(ТекРеквизитБезПробелов);
					ТекстПостроитель.ЗаписатьБезОбработки(" КАК ");
					ТекстПостроитель.ЗаписатьБезОбработки(ТекРеквизитБезТочек);
					ТекстПостроитель.ЗаписатьБезОбработки("Ссылка");
					
					ТекстПостроительРеквизиты.ЗаписатьБезОбработки(",");
					ТекстПостроительРеквизиты.ЗаписатьБезОбработки(ТекРеквизитБезТочек); 
					ТекстПостроительРеквизиты.ЗаписатьБезОбработки("Ссылка");
					
					ЗаписыватьПарметрЗапроса = Истина;
				Иначе
					Если ЗаписыватьПарметрДопЗапроса Тогда 
						ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(",");
						ТекстПостроительДопРеквизиты.ЗаписатьБезОбработки(",");
						ЗаписыватьПарметрДопЗапроса = Ложь;
					КонецЕсли; 
					
					ТекРеквизитБезПробелов = СтрЗаменить(ИмяПараметра, " ", "");
					ТекРеквизитБезТочек    = СтрЗаменить(ИмяПараметра, ".", "");
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки("ПРЕДСТАВЛЕНИЕССЫЛКИ(");
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(ТекРеквизитБезПробелов);
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(")");
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(" КАК ");
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(ТекРеквизитБезТочек);
					
					ТекстПостроительДопРеквизиты.ЗаписатьБезОбработки(ТекРеквизитБезТочек);
					
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(",");
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(ТекРеквизитБезПробелов);
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(" КАК ");
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки(ТекРеквизитБезТочек);
					ТекстПостроительДопЗапрос.ЗаписатьБезОбработки("Ссылка");
					
					ТекстПостроительДопРеквизиты.ЗаписатьБезОбработки(",");
					ТекстПостроительДопРеквизиты.ЗаписатьБезОбработки(ТекРеквизитБезТочек); 
					ТекстПостроительДопРеквизиты.ЗаписатьБезОбработки("Ссылка");
					
					ЗаписыватьПарметрДопЗапроса = Истина;
				КонецЕсли; 
			КонецЕсли;

			МассивРеквизиты.Добавить(ТекПараметр.Имя);
			СоответвиеРезультат.Вставить("[" + Параметр, ТекПараметр); 
			
			Если Индекс + 1 = ТеМассивПодстрок.Количество() - 1 Тогда 
				МассивПодстрок.Добавить(ТеМассивПодстрок[Индекс + 1]);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	СтрокаЗапроса             = ТекстПостроитель.Закрыть(); 
	СтрокаЗапросаДопПараметры = ТекстПостроительДопЗапрос.Закрыть();
	СтрокаРеквизитов          = ТекстПостроительРеквизиты.Закрыть();
	СтрокаДопРеквизитов       = ТекстПостроительДопРеквизиты.Закрыть();
	
	Возврат Новый Структура("МассивПодстрок, МассивРеквизиты, СоответвиеПараметров, ИмяОбъектаМетаданных,
	|ПолноеИмяОбъектаМетаданных, СтрокаРеквизитов, СтрокаДопРеквизитов, СтрокаЗапроса, СтрокаЗапросаДопПараметры, Шаблон",
		МассивПодстрок, МассивРеквизиты, СоответвиеРезультат, ИмяОбъекта, ПолноеИмя, СтрокаРеквизитов, СтрокаДопРеквизитов, СтрокаЗапроса, СтрокаЗапросаДопПараметры, ШаблонСтроки);
КонецФункции

Функция ОпределитьПараметрыТекстаСообщения(ТекстСообщения) Экспорт
	
	МассивПараметров = Новый Соответствие;
	
	ДлинаСообщения = СтрДлина(ТекстСообщения);
	
	Текст = ТекстСообщения;
	Позиция = СтрНайти(Текст, "[");
	Пока Позиция > 0 Цикл
		Если Позиция + 1 > ДлинаСообщения Тогда
			Прервать;
		КонецЕсли;
		ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, Позиция + 1);
		Если ПозицияОкончание > 0 Тогда
			НайденныйПараметр = Сред(Текст, Позиция + 1, ПозицияОкончание - Позиция - 1);
			МассивПараметров.Вставить(НайденныйПараметр, "");
		ИначеЕсли ПозицияОкончание = 0 Тогда
			ПозицияОкончание = Позиция + 1;
		КонецЕсли;
		Если ПозицияОкончание > ДлинаСообщения Тогда
			Прервать;
		КонецЕсли;
		Позиция = СтрНайти(Текст, "[", НаправлениеПоиска.СНачала, ПозицияОкончание);
	КонецЦикла;
	
	СоответствиеПараметров = Новый Соответствие;
	Для каждого ЭлементаМассиваПараметров Из МассивПараметров Цикл
		ПозицияФормат = СтрНайти(ЭлементаМассиваПараметров.Ключ, "{");
		Если ПозицияФормат > 0 Тогда
			ИмяПараметра  = Лев(ЭлементаМассиваПараметров.Ключ, ПозицияФормат - 1);
			СтрокаФормата = Сред(ЭлементаМассиваПараметров.Ключ, ПозицияФормат );
		Иначе
			ИмяПараметра  = ЭлементаМассиваПараметров.Ключ;
			СтрокаФормата = "";
		КонецЕсли;
		МассивРазобранныйПараметр = СтрРазделить(ИмяПараметра, ".", Ложь);
		Если МассивРазобранныйПараметр.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЭлементСоответствия(СоответствиеПараметров, МассивРазобранныйПараметр, СтрокаФормата);
	КонецЦикла;
	
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура УстановитьЭлементСоответствия(СоответствиеПараметров, Знач МассивРазобранныйПараметр, СтрокаФормата)
	ЭлементСоответствия = СоответствиеПараметров.Получить(МассивРазобранныйПараметр[0]);
	Если ЭлементСоответствия = Неопределено Тогда
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			ВнутреннийЭлементСоответствия = Новый Соответствие;
			СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0], ВнутреннийЭлементСоответствия);
			МассивРазобранныйПараметр.Удалить(0);
			УстановитьЭлементСоответствия(ВнутреннийЭлементСоответствия, МассивРазобранныйПараметр, СтрокаФормата)
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0] + СтрокаФормата] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0] + СтрокаФормата, "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если МассивРазобранныйПараметр.Количество() > 1 Тогда
			МассивРазобранныйПараметр.Удалить(0);
			УстановитьЭлементСоответствия(ЭлементСоответствия, МассивРазобранныйПараметр, СтрокаФормата)
		Иначе
			Если СоответствиеПараметров[МассивРазобранныйПараметр[0] + СтрокаФормата] = Неопределено Тогда
				СоответствиеПараметров.Вставить(МассивРазобранныйПараметр[0] + СтрокаФормата, "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТекстШаблонаHTML(Шаблон) 
	Возврат уатЭлектронныеКартыСервер.ПолучитьТекстШаблонаHTML(Шаблон);
КонецФункции

Функция ЭкранироватьСимволы(СтрокаЭкранирования) Экспорт
	Если СтрНайти(СтрокаЭкранирования, """") Тогда
		СтрокаЭкранирования = СтрЗаменить(СтрокаЭкранирования, """","\""");
	КонецЕсли;
	Если СтрНайти(СтрокаЭкранирования, "'") Тогда
		СтрокаЭкранирования = СтрЗаменить(СтрокаЭкранирования, "'", "\'");
	КонецЕсли;
	Если СтрНайти(СтрокаЭкранирования, "&") Тогда
		СтрокаЭкранирования = СтрЗаменить(СтрокаЭкранирования,"&", "\&");
	КонецЕсли;
	Если СтрНайти(СтрокаЭкранирования, "<") Тогда
		СтрокаЭкранирования = СтрЗаменить(СтрокаЭкранирования,"<", "\<");
	КонецЕсли;
	Если СтрНайти(СтрокаЭкранирования, ">") Тогда
		СтрокаЭкранирования = СтрЗаменить(СтрокаЭкранирования,">", "\>");
	КонецЕсли;
	Возврат СтрокаЭкранирования;
КонецФункции

Функция ПолучитьНастройкиШаблоновИнформацииДляКарты() Экспорт
	ХранилищеШаблонов = Константы.уатНастройкиШаблоновИнформацииДляКарты.Получить(); 
	Если ХранилищеШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Неопределено;
	Иначе 
		НастройкиШаблонов = ХранилищеШаблонов.Получить();
	КонецЕсли;
	
	Если НастройкиШаблонов = Неопределено Тогда 
		НастройкиШаблонов = Новый Структура();
	КонецЕсли;
	Возврат НастройкиШаблонов;
КонецФункции

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЕЙСТВИЙ

// Процедура выполняет доступное действие
//
// Параметры:
//	Номер			- Число		- Номер действия (соответветствует значению параметра EvenType,
//									которое возвращает панель управления при выборе действия
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпВыполнитьДоступноеДействие(Номер, СтруктураЗвонка) Экспорт
	
	МассивДоступныхДействий	= сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	ЭлементМассива = МассивДоступныхДействий[Номер];
	
	Попытка
		Выполнить("" + ЭлементМассива.Действие + "(СтруктураЗвонка)");
	Исключение
		СтрОшибки = ОписаниеОшибки();
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю("При выполнении действия <" + ЭлементМассива.Наименование + "> возникла ошибка: " + СтрОшибки);
	КонецПопытки;

КонецПроцедуры // сфпВыполнитьДоступноеДействие()

// Процедура выполняет автоматическое действие
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//  ОткрыватьЗвонок	- Булево	- Нужно ли открывать форму звонка, если настройка на действие не задана
//
Процедура сфпВыполнитьАвтоматическоеДействие(СтруктураЗвонка, ОткрыватьЗвонок = Ложь) Экспорт
	
	Входящий = Ложь;
	Если СтруктураЗвонка.Свойство("ВходящийЗвонок") Тогда
		Входящий = СтруктураЗвонка.ВходящийЗвонок;

    ИначеЕсли СтруктураЗвонка.Свойство("Входящий") Тогда
		Входящий = СтруктураЗвонка.Входящий;
	КонецЕсли;	
	
	Если Входящий Тогда
		  НаименованиеДействия = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке");
	Иначе НаименованиеДействия = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке");
	КонецЕсли;
	
	МассивАвтоматическихДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ЭлементМассива Из МассивАвтоматическихДействий Цикл
		Если ЭлементМассива.Наименование = НаименованиеДействия Тогда
			СтрОшибки = "";
			
			Если НЕ ПустаяСтрока(ЭлементМассива.Действие) Тогда
				Попытка
					Выполнить("" + ЭлементМассива.Действие + "(СтруктураЗвонка)");
				Исключение
					СтрОшибки = ОписаниеОшибки();
				КонецПопытки;
				
			Иначе
				// В настройках стоит "нет действий", проверим, что это команда панели и откроем звонок
				Если ОткрыватьЗвонок Тогда
					Попытка
						сфпОткрытьТелефонныйЗвонок(СтруктураЗвонка);
					Исключение
						СтрОшибки = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ПустаяСтрока(СтрОшибки) Тогда
				ТекстКомментария = "При выполнении действия возникла ошибка: " + СтрОшибки;
				сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("Действие при ответе", ТекстКомментария, Истина);
			КонецЕсли;	
			
			Прервать;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры // сфпВыполнитьАвтоматическоеДействие()

// Процедура выполняет открытие формы общих настроек СофтФон
//
// Параметры:
//	Нет.
//
Процедура сфпОбщиеНастройкиСофтФон() Экспорт
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("ОбщаяФорма.сфпОбщиеНастройки", ПараметрыФормы);

КонецПроцедуры

// Процедура выполняет открытие формы персональных настроек СофтФон
//
// Параметры:
//	Нет.
//
Процедура сфпПерсональныеНастройкиСофтФон() Экспорт
	
	ПараметрыФормы = Новый Структура("Пользователь", сфпСофтФонПроСервер.сфпТекущийПользователь());
	ОткрытьФорму("ОбщаяФорма." + "сфпПерсональныеНастройки", ПараметрыФормы);

КонецПроцедуры

// Процедура выполняет открытие формы списка документов "Телефонный звонок"
//
// Параметры:
//	Нет.
//
Процедура сфпТелефонныеЗвонки() Экспорт
	
	ИмяФормыСпискаДокументовТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяФормыСпискаДокументовТелефонныйЗвонок();
	Если ЗначениеЗаполнено(ИмяФормыСпискаДокументовТелефонныйЗвонок) Тогда
		ПараметрыФормы = Новый Структура();
		ОткрытьФорму(ИмяФормыСпискаДокументовТелефонныйЗвонок, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает ссылку на объект формы, в зависимости от режима запуска
//
// Параметры:
//	ФормаОбъекта	- Форма	- Форма объекта
//
// Возвращаемое значение:
//	Объект	- Ссылка на объект формы
//
Функция сфпПолучитьОбъектФормы(ФормаОбъекта) Экспорт
	
	Попытка    ОбъектФормы = ФормаОбъекта.Объект;
	Исключение ОбъектФормы = ФормаОбъекта.ЭтотОбъект;
	КонецПопытки;
	
	Возврат ОбъектФормы;

КонецФункции	


/////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНИЦИАЛИЗАЦИИ ФОРМ ОБЪЕКТОВ

// Функция создает и заполняет форму документа "Событие"
//
// Параметры:
//	СтруктураЗвонка		- Структура	- Структура данных звонка
//	ДанныеЗаполнения	- Структура	- Структура данных для заполнения документа
//
Функция сфпИнициализироватьФормуСобытия(СтруктураЗвонка, ДанныеЗаполнения)
	
	ИмяФормы = сфпСофтФонПроСерверПовтИсп.ИмяФормыДокументаСобытие();

	Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
		ДокОснование = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(СтруктураЗвонка.НовыйЗвонок, "ВзаимодействиеОснование");
		Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка." + "Событие") Тогда
			Возврат ПолучитьФорму(ИмяФормы, Новый Структура("Ключ", ДокОснование));
		КонецЕсли;	
    КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
		  ФормаСобытия = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.ИдентификаторЗвонка);		
	Иначе ФормаСобытия = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.hCall);		
	КонецЕсли;
	
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаСобытия);
	ОбъектФормы["Дата"] = сфпСофтФонПроСервер.сфпТекущаяДата();
	ОбъектФормы["Ответственный"] = ТекПользователь;
	ОбъектФормы["НачалоСобытия"] = ОбъектФормы["Дата"];
	ОбъектФормы["ОкончаниеСобытия"]	= ОбъектФормы["Дата"];
		
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Автор") Тогда
		ОбъектФормы["Автор"] = ТекПользователь;
	КонецЕсли;
	
	ИмяРеквизитаСостояние = "";
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Состояние") Тогда
		ИмяРеквизитаСостояние = "Состояние";

	ИначеЕсли сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "СостояниеСобытия") Тогда
		ИмяРеквизитаСостояние = "СостояниеСобытия";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаСостояние) Тогда
		Попытка
			ИмяПеречисления = "СостоянияСобытий";
			Состояние = ПредопределенноеЗначение("Перечисление." + ИмяПеречисления + ".Завершено");
		Исключение
			ИмяСправочника = "СостоянияСобытий";
			Состояние = ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".Завершено");
		КонецПопытки;
		
		ОбъектФормы[ИмяРеквизитаСостояние] = Состояние;	
	КонецЕсли;

	ИмяПеречисления = "ВходящееИсходящееСобытие";
	Если СтруктураЗвонка.ВходящийЗвонок Тогда
		  ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление." + ИмяПеречисления + ".Входящее");
	Иначе ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление." + ИмяПеречисления + ".Исходящее");
	КонецЕсли;
	
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "ВидСобытия") Тогда
		ИмяПеречисления = "ВидыСобытий";
		ОбъектФормы["ВидСобытия"] = ПредопределенноеЗначение("Перечисление." + ИмяПеречисления + ".ТелефонныйЗвонок");
		ОбъектФормы["ТипСобытия"] = ВходящееИсходящееСобытие;
		
	Иначе
		ОбъектФормы["ВходящееИсходящееСобытие"] = ВходящееИсходящееСобытие;
		
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "ТипСобытия") Тогда
			Попытка
				ИмяСправочника = "ТипыСобытий";
				ТипСобытия = ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ТелефонныйЗвонок");
			Исключение
				ИмяПеречисления = "ТипыСобытий";
				ТипСобытия = ПредопределенноеЗначение("Перечисление." + ИмяПеречисления + ".ТелефонныйЗвонок");
			КонецПопытки;	
			
			ОбъектФормы["ТипСобытия"] = ТипСобытия;
		КонецЕсли;
	КонецЕсли;
	
	Тема = НСтр("ru='#Создан автоматически средствами СофтФон'");
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Тема") Тогда
		ОбъектФормы["Тема"] = Тема;

	ИначеЕсли сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "ОписаниеСобытия") Тогда
		ОбъектФормы["ОписаниеСобытия"] = Тема;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "ДокументОснование") Тогда
			ОбъектФормы["ДокументОснование"] = СтруктураЗвонка.НовыйЗвонок;
			
		ИначеЕсли сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Основание") Тогда
			ОбъектФормы["Основание"] = СтруктураЗвонка.НовыйЗвонок;			
		КонецЕсли;	
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если СтруктураЗвонка.Свойство("ContactID") И ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда	
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если НЕ (СтруктураЗвонка.МассивЗвонящих = Неопределено) Тогда
			Если СтруктураЗвонка.МассивЗвонящих.Количество() = 1 Тогда
				СтруктураЗвонка.Контакт	= СтруктураЗвонка.МассивЗвонящих[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Содержание = "";
	
	Если НЕ сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Контрагент") Тогда
		НовыйУчастник = ОбъектФормы["Участники"].Добавить();
		
		УчастникКонтакт = НСтр("ru='!!!Не определен!!!'");
		
		Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
			ИмяМетаданныхКонтакта = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
			
			Если ИмяМетаданныхКонтакта = "Контрагенты" ИЛИ ИмяМетаданныхКонтакта = "КонтактныеЛица" Тогда
				УчастникКонтакт = СтруктураЗвонка.Контакт;

			ИначеЕсли Найти(Строка(СтруктураЗвонка.Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
				Содержание = Содержание + Символы.ПС + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru = ', номер: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона)
					+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
					+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
			Иначе			
				УчастникКонтакт = "" + СтруктураЗвонка.Контакт;
			КонецЕсли;

		ИначеЕсли СтруктураЗвонка.ВнешнийЗвонок Тогда
			Если СтруктураЗвонка.МассивЗвонящих <> Неопределено И СтруктураЗвонка.МассивЗвонящих.Количество() > 0 Тогда
				Содержание = Содержание + Символы.ПС + НСтр("ru='Несколько совпадений номера: '") + СтруктураЗвонка.НомерТелефона;
				Для Каждого ЭлементМассива Из СтруктураЗвонка.МассивЗвонящих Цикл
					Содержание = Содержание + Символы.ПС + Строка(ТипЗнч(ЭлементМассива)) + ": " + сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ЭлементМассива);
					ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(ЭлементМассива);
					Если НЕ (ВладелецКонтакта = Неопределено) Тогда
						Содержание = Содержание + " (" + сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта) + ")";
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;

		ИначеЕсли НЕ ПустаяСтрока(СтруктураЗвонка.CalledInfoName) Тогда
			УчастникКонтакт = СтруктураЗвонка.CalledInfoName;
		КонецЕсли;

		НовыйУчастник["Контакт"] = УчастникКонтакт;
		НовыйУчастник["КакСвязаться"] = СтруктураЗвонка.НомерТелефона;
		
		Попытка
			ФормаСобытия.Контрагент = УчастникКонтакт;
			ФормаСобытия.КонтрагентКакСвязаться = СтруктураЗвонка.НомерТелефона;

			СтрокаКонтакты = ФормаСобытия.Контакты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтакты, НовыйУчастник);
		Исключение КонецПопытки;

	Иначе
		ПредставлениеКонтакта = НСтр("ru='!!!Не определен!!!'");
		Контрагент = "";
		КонтактноеЛицо = "";

		Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
			ИмяМетаданныхКонтакта = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
			
			ПредставлениеКонтакта = "" + СтруктураЗвонка.Контакт;
			
			Если ИмяМетаданныхКонтакта = "Контрагенты" Тогда
				Контрагент = СтруктураЗвонка.Контакт;
							
			ИначеЕсли ИмяМетаданныхКонтакта = "КонтактныеЛица" Тогда
				КонтактноеЛицо = СтруктураЗвонка.Контакт;
				Контрагент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
			КонецЕсли;
			
			Если Найти(Строка(СтруктураЗвонка.Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
				Содержание = Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru = ', номер: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона)
					+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
					+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
			КонецЕсли;
				
		ИначеЕсли СтруктураЗвонка.ВнешнийЗвонок Тогда
			Если СтруктураЗвонка.МассивЗвонящих = Неопределено ИЛИ СтруктураЗвонка.МассивЗвонящих.Количество() = 0 Тогда
				Если НЕ ПустаяСтрока(СтруктураЗвонка.CallerInfoName) И Найти(СтруктураЗвонка.CallerInfoName, СтруктураЗвонка.НомерТелефона) = 0 Тогда
					ПредставлениеКонтакта = СтруктураЗвонка.CallerInfoName;
				КонецЕсли;

			Иначе
				ПредставлениеКонтакта = НСтр("ru='Несколько совпадений номера: '") + СтруктураЗвонка.НомерТелефона;
				Содержание = ПредставлениеКонтакта;
				Для Каждого ЭлементМассива Из СтруктураЗвонка.МассивЗвонящих Цикл
					ПредставлениеКонтакта = ПредставлениеКонтакта + Символы.ПС + Строка(ТипЗнч(ЭлементМассива)) + ": " + сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ЭлементМассива);
					ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(ЭлементМассива);
					Если ВладелецКонтакта <> Неопределено Тогда
						ПредставлениеКонтакта = ПредставлениеКонтакта + " (" + сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта) + ")";
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;

		ИначеЕсли НЕ ПустаяСтрока(СтруктураЗвонка.CalledInfoName) Тогда
			ПредставлениеКонтакта = СтруктураЗвонка.CalledInfoName;
		КонецЕсли;
		
		ОбъектФормы["Контрагент"] = Контрагент;
		ОбъектФормы["КонтактноеЛицо"] = КонтактноеЛицо;

		Если сфпСофтФонПроСервер.сфпТабличнаяЧастьСуществует(ОбъектФормы.Ссылка, "Участники") Тогда
			ОбъектФормы["СписокУчастников"]	= ПредставлениеКонтакта;
			
			НовыйУчастник = ОбъектФормы["Участники"].Добавить();
			НовыйУчастник["ПредставлениеКонтакта"] = ПредставлениеКонтакта;
			НовыйУчастник["КакСвязаться"] = СтруктураЗвонка.НомерТелефона;
			НовыйУчастник["КонтактноеЛицо"] = КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;	
		
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Содержание") Тогда
		ОбъектФормы["Содержание"] = Содержание;
		
	ИначеЕсли сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "СодержаниеСобытия") Тогда
		ОбъектФормы["СодержаниеСобытия"] = Содержание;	
	КонецЕсли;	
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);	
	
	Возврат ФормаСобытия;
	
КонецФункции	

// Функция создает и заполняет форму документа "Заказ покупателя"
//
// Параметры:
//	СтруктураЗвонка		- Структура	- Структура данных звонка
//	ДанныеЗаполнения	- Структура	- Структура данных для заполнения документа
//
Функция сфпИнициализироватьФормуЗаказаПокупателя(СтруктураЗвонка, ДанныеЗаполнения)

	ИмяФормы = "Документ.ЗаказПокупателя.ФормаОбъекта";		
	Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
		  ФормаЗаказа = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.ИдентификаторЗвонка);		
	Иначе ФормаЗаказа = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.hCall);		
	КонецЕсли;	
	
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаЗаказа);
	ОбъектФормы["Дата"] = сфпСофтФонПроСервер.сфпТекущаяДата();	
	ОбъектФормы["Ответственный"] = ТекПользователь;
	
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Автор") Тогда
		ОбъектФормы["Автор"] = ТекПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		ИмяМетаданныхКонтакта = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
		Если ИмяМетаданныхКонтакта = "Контрагенты" Тогда
			ОбъектФормы["Контрагент"] = СтруктураЗвонка.Контакт;
			
		Иначе
			ОбъектФормы["Комментарий"] = ОбъектФормы["Комментарий"] + ", " + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) 
			+ ": " + Строка(СтруктураЗвонка.Контакт) + НСтр("ru=', номер: '") 
			+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона);			
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);	
	
	Возврат ФормаЗаказа;	
	
КонецФункции	

// Функция создает и заполняет форму документа "Заказ клиента"
//
// Параметры:
//	СтруктураЗвонка		- Структура	- Структура данных звонка
//	ДанныеЗаполнения	- Структура	- Структура данных для заполнения документа
//
Функция сфпИнициализироватьФормуЗаказаКлиента(СтруктураЗвонка, ДанныеЗаполнения)

	ИмяФормы = "Документ.ЗаказКлиента.ФормаОбъекта";
	Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
		  ФормаЗаказа = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.ИдентификаторЗвонка);		
	Иначе ФормаЗаказа = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.hCall);		
	КонецЕсли;	
	
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаЗаказа);
	ОбъектФормы["Дата"] = сфпСофтФонПроСервер.сфпТекущаяДата();
	ОбъектФормы["Менеджер"] = ТекПользователь;
	ОбъектФормы["Комментарий"] = НСтр("ru='#Создан автоматически средствами СофтФон'");
	
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Автор") Тогда
		ОбъектФормы["Автор"] = ТекПользователь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если СтруктураЗвонка.Свойство("ContactID") И ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		КонтактИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
		Если КонтактИмяМетаданных = "Контрагенты" Тогда
			ОбъектФормы["Контрагент"] = СтруктураЗвонка.Контакт;
			
		ИначеЕсли КонтактИмяМетаданных = "Партнеры" Тогда
			ПараметрыЗаполнения = Новый Структура("Партнер", СтруктураЗвонка.Контакт);
			
		Иначе
			ОбъектФормы["Комментарий"] = ОбъектФормы["Комментарий"] + ", " + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) 
			+ ": " + Строка(СтруктураЗвонка.Контакт) + НСтр("ru=', номер: '") 
			+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона);			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);

	Возврат ФормаЗаказа;

КонецФункции

// Функция создает и заполняет форму документа "Заказ поставщика"
//
// Параметры:
//	СтруктураЗвонка		- Структура	- Структура данных звонка
//	ДанныеЗаполнения	- Структура	- Структура данных для заполнения документа
//
Функция сфпИнициализироватьФормуЗаказаПоставщика(СтруктураЗвонка, ДанныеЗаполнения)
	
	ИмяФормы = "Документ.ЗаказПоставщику.ФормаОбъекта";		
	Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
		  ФормаЗаказа = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.ИдентификаторЗвонка);		
	Иначе ФормаЗаказа = ПолучитьФорму(ИмяФормы,,, СтруктураЗвонка.hCall);		
	КонецЕсли;		
	
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	 
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаЗаказа);
	ОбъектФормы["Дата"] = сфпСофтФонПроСервер.сфпТекущаяДата();
	ОбъектФормы["Комментарий"] = НСтр("ru='#Создан автоматически средствами СофтФон'");
	
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Автор") Тогда
		ОбъектФормы["Автор"] = ТекПользователь;
	КонецЕсли;
	Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Менеджер") Тогда
		ОбъектФормы["Менеджер"] = ТекПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		КонтактИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
		Если КонтактИмяМетаданных = "Партнеры" Тогда
			ОбъектФормы["Партнер"] = СтруктураЗвонка.Контакт;
					
		ИначеЕсли КонтактИмяМетаданных = "Контрагенты" Тогда
			ПараметрыЗаполнения = Новый Структура("Контрагент", СтруктураЗвонка.Контакт);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);	
	
	Возврат ФормаЗаказа;		
	
КонецФункции	


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ

// Процедура открывает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьТелефонныйЗвонок(СтруктураЗвонка)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СтруктураЗвонка.НовыйЗвонок);
	Если ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
		ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьТелефонныйЗвонокЗавершение", сфпСофтФонПроКлиентПереопределяемый, Новый Структура("ПараметрыФормы", ПараметрыФормы));
		СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"]);
		Если СписокКонтактов.Количество() = 1 Тогда
			сфпОткрытьТелефонныйЗвонокЗавершение(СписокКонтактов[0].Значение, Новый Структура("ПараметрыФормы", ПараметрыФормы));
			
		Иначе				
			ПараметрыОткрытия = Новый Структура("ИдентификаторЗвонка,НомерТелефона", СтруктураЗвонка.hCall, СтруктураЗвонка["НомерТелефона"]);
			ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
			ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия,, Новый УникальныйИдентификатор(),,, ОписаниеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;				
		
	Иначе
		ИмяФормыДокументаТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяФормыДокументаТелефонныйЗвонок();
		Если ЗначениеЗаполнено(ИмяФормыДокументаТелефонныйЗвонок) Тогда
			ОткрытьФорму(ИмяФормыДокументаТелефонныйЗвонок, ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпОткрытьТелефонныйЗвонок() 

// Процедура заканчивает команду открытия звонка после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникОбъект	- Выбранный пользователем объект для подстановки в поле "КонтактАбонент"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров	
//
Процедура сфпОткрытьТелефонныйЗвонокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФормыДокументаТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяФормыДокументаТелефонныйЗвонок();
			
	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	Если Результат <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяФормыДокументаТелефонныйЗвонок) Тогда
			ИмяРеквизитаАбонентКонтакт = сфпСофтФонПроСервер.сфпИмяРеквизитаАбонентКонтакт();
			
			ФормаЗвонка = ПолучитьФорму(ИмяФормыДокументаТелефонныйЗвонок, ПараметрыФормы);
			
			ОбъектФормы = сфпПолучитьОбъектФормы(ФормаЗвонка);
			ОбъектФормы.АбонентПредставление = Строка(Результат.Контакт);
			ОбъектФормы[ИмяРеквизитаАбонентКонтакт] = Результат.Контакт;
			
			Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "сфпКлиент") Тогда
				ОбъектФормы.сфпКлиент = Результат.Владелец;
			КонецЕсли;
			
			Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Контрагент") Тогда
				ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(Результат.Контакт);
				Если ИмяМетаданных = "Контрагенты" Тогда
					ОбъектФормы.Контрагент = Результат.Контакт;
					
				ИначеЕсли ИмяМетаданных = "КонтактныеЛица" Тогда
					ОбъектФормы.Контрагент = Результат.Владелец;
				КонецЕсли;
			КонецЕсли;
			
			ФормаЗвонка.Открыть();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ИмяФормыДокументаТелефонныйЗвонок) Тогда
		ОткрытьФорму(ИмяФормыДокументаТелефонныйЗвонок, ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры	

// Динамически подключаемый обработчик действия "Открыть Карточку контакта" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьКарточкуКонтакта(СтруктураЗвонка)
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") И СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);	
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда	
		ПоказатьЗначение(, СтруктураЗвонка.Контакт);
		Если СтруктураЗвонка.Свойство("hCall") Тогда
			НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
			сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 						
		КонецЕсли;

	ИначеЕсли СтруктураЗвонка.Свойство("МассивЗвонящих") И ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
		ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьКарточкуКонтактаЗавершение", сфпСофтФонПроКлиентПереопределяемый, Новый Структура("СтруктураЗвонка", СтруктураЗвонка));
		СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"], Истина);
		Если СписокКонтактов.Количество() = 1 Тогда
			сфпОткрытьКарточкуКонтактаЗавершение(СписокКонтактов[0].Значение, Новый Структура());

		Иначе				
			ПараметрыОткрытия = Новый Структура("ИдентификаторЗвонка, НомерТелефона, ТолькоКлиентыИКЛ", СтруктураЗвонка.hCall, СтруктураЗвонка["НомерТелефона"], Ложь);
			ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
			ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия, , Новый УникальныйИдентификатор(),ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеВыбора);
		КонецЕсли;

	ИначеЕсли СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 								
	КонецЕсли;

КонецПроцедуры // сфпОткрытьКарточкуКонтакта() 	

// Процедура заканчивает команду открытия события после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникОбъект	- Выбранный пользователем объект для подстановки в поле "Партнер" или "Контактное лицо"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров	
//
Процедура сфпОткрытьКарточкуКонтактаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураЗвонка = ДополнительныеПараметры.СтруктураЗвонка;
	Если Результат <> Неопределено Тогда
		СтруктураЗвонка.Вставить("Контакт", Результат.Контакт);
		ПоказатьЗначение(, Результат);
	КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
	КонецЕсли;

КонецПроцедуры // сфпОткрытьКарточкуКонтактаЗавершение()

// Динамически подключаемый обработчик действия "Открыть Событие" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьСобытие(СтруктураЗвонка)
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") и СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;		
	
	ФормаСобытия = сфпИнициализироватьФормуСобытия(СтруктураЗвонка, сфпДанныеЗаполнения);
	Если ФормаСобытия <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
			ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьСобытиеЗавершение", сфпСофтФонПроКлиентПереопределяемый, Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаСобытия, СтруктураЗвонка));
			СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"], Истина);
			Если СписокКонтактов.Количество() = 1 Тогда
				сфпОткрытьСобытиеЗавершение(СписокКонтактов[0].Значение, Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаСобытия, СтруктураЗвонка));

			Иначе				
				ПараметрыОткрытия = Новый Структура("ИдентификаторЗвонка, НомерТелефона, ТолькоКлиентыИКЛ", СтруктураЗвонка.hCall, СтруктураЗвонка["НомерТелефона"], Истина);
				ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
				ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия, , Новый УникальныйИдентификатор(),ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеВыбора);
			КонецЕсли;

		Иначе			
			ФормаСобытия.Модифицированность = Истина;
			ФормаСобытия.Открыть();
			
			Если СтруктураЗвонка.Свойство("hCall") И НЕ ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
				НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
				сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 				
				
				ОбъектФормы = сфпПолучитьОбъектФормы(ФормаСобытия);
				Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Основание") Тогда
					ОбъектФормы["Основание"] = НовыйЗвонок;
					
				ИначеЕсли сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "ДокументОснование") Тогда
					ОбъектФормы["ДокументОснование"] = НовыйЗвонок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // сфпОткрытьСобытие() 	

// Процедура заканчивает команду открытия события после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникОбъект	- Выбранный пользователем объект для подстановки в поле "Партнер" или "Контактное лицо"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров	
//
Процедура сфпОткрытьСобытиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	СтруктураЗвонка = ДополнительныеПараметры.СтруктураЗвонка;
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаДокумента);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураЗвонка.Вставить("Контакт", Результат.Контакт);
		
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Контрагент") Тогда
			ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(Результат.Контакт);
			Если ИмяМетаданных = "Контрагенты" Тогда
				ОбъектФормы["Контрагент"] = Результат.Контакт;

			ИначеЕсли ИмяМетаданных = "КонтактныеЛица" Тогда
				ОбъектФормы["Контрагент"] = Результат.Владелец;
				ОбъектФормы["КонтактноеЛицо"] = Результат.Контакт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектФормы["ДокументОснование"] = СтруктураЗвонка.НовыйЗвонок;
	
	ФормаДокумента.Модифицированность = Истина;
	ФормаДокумента.Открыть();
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
		
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Основание") Тогда
			ОбъектФормы["Основание"] = НовыйЗвонок;
			
		ИначеЕсли сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "ДокументОснование") Тогда
			ОбъектФормы["ДокументОснование"] = НовыйЗвонок;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	

// Динамически подключаемый обработчик действия "Открыть Заказ покупателя" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьЗаказПокупателя(СтруктураЗвонка)
	Если СтруктураЗвонка.Свойство("ФормаПолучена") и СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;		
	ФормаЗаказа = сфпИнициализироватьФормуЗаказаПокупателя(СтруктураЗвонка, сфпДанныеЗаполнения);
	Если НЕ (ФормаЗаказа = Неопределено) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
			ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьЗаказПокупателяЗавершение", сфпСофтФонПроКлиентПереопределяемый, Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаЗаказа, СтруктураЗвонка));
			СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"], Истина);
			Если СписокКонтактов.Количество() = 1 Тогда
				сфпОткрытьЗаказПокупателяЗавершение(СписокКонтактов[0].Значение,Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаЗаказа, СтруктураЗвонка));
			Иначе				
				ПараметрыОткрытия = Новый Структура("ИдентификаторЗвонка, НомерТелефона, ТолькоКлиентыИКЛ", СтруктураЗвонка.hCall, СтруктураЗвонка["НомерТелефона"], Истина);
				ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
				ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия, , Новый УникальныйИдентификатор(),ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеВыбора);
			КонецЕсли;				
		Иначе			
			ФормаЗаказа.Модифицированность = Истина;
			ФормаЗаказа.Открыть();
			
			Если СтруктураЗвонка.Свойство("hCall") Тогда
				НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
				сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // сфпОткрытьЗаказПокупателя() 	

// Процедура заканчивает команду открытия заказа покупателя после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникОбъект	- Выбранный пользователем объект для подстановки в поле "Партнер" или "Контактное лицо"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров	
//
Процедура сфпОткрытьЗаказПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	СтруктураЗвонка = ДополнительныеПараметры.СтруктураЗвонка;
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаДокумента);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураЗвонка.Вставить("Контакт", Результат.Контакт);
		
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Контрагент") Тогда
			ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(Результат.Контакт);
			Если ИмяМетаданных = "Контрагенты" Тогда
				ОбъектФормы["Контрагент"] = Результат.Контакт;

			ИначеЕсли ИмяМетаданных = "КонтактныеЛица" Тогда
				ОбъектФормы["Контрагент"] = Результат.Владелец;
				ОбъектФормы["КонтактноеЛицо"] = Результат.Контакт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Модифицированность = Истина;
	ФормаДокумента.Открыть();
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 	
	КонецЕсли;

КонецПроцедуры	

// Динамически подключаемый обработчик действия "Открыть Заказ клиента" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьЗаказКлиента(СтруктураЗвонка)
	Если СтруктураЗвонка.Свойство("ФормаПолучена") и СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;		
	ФормаЗаказа = сфпИнициализироватьФормуЗаказаКлиента(СтруктураЗвонка, сфпДанныеЗаполнения);
	Если НЕ (ФормаЗаказа = Неопределено) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
			ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьЗаказКлиентаЗавершение", сфпСофтФонПроКлиентПереопределяемый, Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаЗаказа, СтруктураЗвонка));
			СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"], Истина);
			Если СписокКонтактов.Количество() = 1 Тогда
				сфпОткрытьЗаказКлиентаЗавершение(СписокКонтактов[0].Значение,Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаЗаказа, СтруктураЗвонка));
			Иначе				
				ПараметрыОткрытия = Новый Структура("ИдентификаторЗвонка, НомерТелефона, ТолькоКлиентыИКЛ", СтруктураЗвонка.hCall, СтруктураЗвонка["НомерТелефона"], Истина);
				ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
				ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия, , Новый УникальныйИдентификатор(),ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеВыбора);
			КонецЕсли;				
		Иначе			
			ФормаЗаказа.Модифицированность = Истина;
			ФормаЗаказа.Открыть();
			
			Если СтруктураЗвонка.Свойство("hCall") Тогда
				НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
				сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // сфпОткрытьЗаказКлиента() 	

// Процедура заканчивает команду открытия заказа клиента после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникОбъект	- Выбранный пользователем объект для подстановки в поле "Партнер" или "Контактное лицо"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров	
//
Процедура сфпОткрытьЗаказКлиентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	СтруктураЗвонка = ДополнительныеПараметры.СтруктураЗвонка;
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаДокумента);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураЗвонка.Вставить("Контакт", Результат.Контакт);
		
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Контрагент") Тогда
			ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(Результат.Контакт);
			Если ИмяМетаданных = "Контрагенты" Тогда
				ОбъектФормы["Контрагент"] = Результат.Контакт;

			ИначеЕсли ИмяМетаданных = "КонтактныеЛица" Тогда
				ОбъектФормы["Контрагент"] = Результат.Владелец;
				ОбъектФормы["КонтактноеЛицо"] = Результат.Контакт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ФормаДокумента.Модифицированность = Истина;
	ФормаДокумента.Открыть();
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 	
	КонецЕсли;

КонецПроцедуры	

// Динамически подключаемый обработчик действия "Открыть Заказ поставщику" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьЗаказПоставщику(СтруктураЗвонка)
	Если СтруктураЗвонка.Свойство("ФормаПолучена") и СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;		
	ФормаЗаказа = сфпИнициализироватьФормуЗаказаПоставщика(СтруктураЗвонка, сфпДанныеЗаполнения);
	Если НЕ (ФормаЗаказа = Неопределено) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
			ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьЗаказПоставщикуЗавершение", сфпСофтФонПроКлиентПереопределяемый, Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаЗаказа, СтруктураЗвонка));
			СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"], Истина);
			Если СписокКонтактов.Количество() = 1 Тогда
				сфпОткрытьЗаказПоставщикуЗавершение(СписокКонтактов[0].Значение,Новый Структура("ФормаДокумента, СтруктураЗвонка", ФормаЗаказа, СтруктураЗвонка));
			Иначе				
				ПараметрыОткрытия = Новый Структура("ИдентификаторЗвонка, НомерТелефона, ТолькоКлиентыИКЛ", СтруктураЗвонка.hCall, СтруктураЗвонка["НомерТелефона"], Истина);
				ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
				ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия, , Новый УникальныйИдентификатор(),ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеВыбора);
			КонецЕсли;				
		Иначе			
			ФормаЗаказа.Модифицированность = Истина;
			ФормаЗаказа.Открыть();
			
			Если СтруктураЗвонка.Свойство("hCall") Тогда
				НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
				сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // сфпОткрытьЗаказПоставщику() 

// Процедура заканчивает команду открытия заказа клиента после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникОбъект	- Выбранный пользователем объект для подстановки в поле "Партнер" или "Контактное лицо"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров	
//
Процедура сфпОткрытьЗаказПоставщикуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	СтруктураЗвонка = ДополнительныеПараметры.СтруктураЗвонка;
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаДокумента);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураЗвонка.Вставить("Контакт", Результат.Контакт);								
		
		Если сфпСофтФонПроСервер.сфпРеквизитСуществует(ОбъектФормы.Ссылка, "Контрагент") Тогда
			ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(Результат.Контакт);
			Если ИмяМетаданных = "Контрагенты" Тогда
				ОбъектФормы["Контрагент"] = Результат.Контакт;

			ИначеЕсли ИмяМетаданных = "КонтактныеЛица" Тогда
				ОбъектФормы["Контрагент"] = Результат.Владелец;
				ОбъектФормы["КонтактноеЛицо"] = Результат.Контакт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ФормаДокумента.Модифицированность = Истина;
	ФормаДокумента.Открыть();
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 	
	КонецЕсли;

КонецПроцедуры	

// Динамически подключаемый обработчик действия "Открыть Помощник продаж" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьПомощникПродаж(СтруктураЗвонка)
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") и СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);					
	
	ПараметрыФормы = Новый Структура;
	ИмяФормы = "Обработка.ПомощникПродаж.Форма";
	ФормаОбработки = ПолучитьФорму(ИмяФормы, ПараметрыФормы);
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	ОбъектФормы = сфпПолучитьОбъектФормы(ФормаОбработки);
	
	КонтактИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
	Если КонтактИмяМетаданных = "Партнеры" Тогда
		ОбъектФормы.Партнер = СтруктураЗвонка.Контакт;
		
	Иначе	
		ОбъектФормы.КонтактноеЛицо = СтруктураЗвонка.Контакт;
		ОбъектФормы.Партнер = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
	КонецЕсли;	
	
	ФормаОбработки.Открыть();
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 																
	КонецЕсли;

КонецПроцедуры // сфпОткрытьПомощникПродаж() 	

// Функция открывает отчет
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//	ИмяОтчета		- Строка	- Идентификатор открываемого отчета
//
Процедура сфпОткрытьОтчет(СтруктураЗвонка, ИмяОтчета, КлючВариантаОтчета = "", ИмяОтбораКлиента = "", ИмяСвойстваКлиента = "")
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") И СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);
	СтруктураЗвонка.Вставить("ИмяОтчета", ИмяОтчета);
	СтруктураЗвонка.Вставить("ИмяОтбораКлиента", ИмяОтбораКлиента);
	СтруктураЗвонка.Вставить("КлючВариантаОтчета", КлючВариантаОтчета);
	СтруктураЗвонка.Вставить("ИмяСвойстваКлиента", ИмяСвойстваКлиента);
		
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		сфпОткрытьОтчетЗавершение(СтруктураЗвонка.Контакт, Новый Структура("СтруктураЗвонка", СтруктураЗвонка));

	ИначеЕсли ЗначениеЗаполнено(СтруктураЗвонка["МассивЗвонящих"]) И СтруктураЗвонка["МассивЗвонящих"].Количество() > 1 Тогда
		ОписаниеВыбора = Новый ОписаниеОповещения("сфпОткрытьОтчетЗавершение", ЭтотОбъект, Новый Структура("СтруктураЗвонка", СтруктураЗвонка));
		СписокКонтактов = сфпСофтФонПроСервер.сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(СтруктураЗвонка["МассивЗвонящих"], Истина);
		Если СписокКонтактов.Количество() = 1 Тогда
			сфпОткрытьОтчетЗавершение(СписокКонтактов[0].Значение, Новый Структура("СтруктураЗвонка", СтруктураЗвонка));
			
		Иначе
			ПараметрыОткрытия = Новый Структура("НомерТелефона, ТолькоКлиентыИКЛ", СтруктураЗвонка["НомерТелефона"], Истина);
			ПараметрыОткрытия.Вставить("СписокОбъектов", сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(СтруктураЗвонка["МассивЗвонящих"]));
			ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыОткрытия,, Новый УникальныйИдентификатор(), ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеВыбора);
		КонецЕсли;

	ИначеЕсли СтруктураЗвонка.Свойство("hCall") И НЕ ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
		СозданЗвонок = Ложь;
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения, СозданЗвонок);
		Если СозданЗвонок Тогда
			сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпОткрытьОтчет()

// Процедура заканчивает команду открытия отчета после выбора пользователем контакта
//
// Параметры:
//	Результат				- СправочникСсылка	- Выбранный пользователем объект для подстановки в поле "Партнер" или "Контактное лицо"
//	ДополнительныеПараметры	- Структура			- Структура дополнительных переданных параметров
//
Процедура сфпОткрытьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураЗвонка = ДополнительныеПараметры.СтруктураЗвонка;
	Если ЗначениеЗаполнено(Результат) Тогда
		ИмяОтчета = СтруктураЗвонка.ИмяОтчета;
		Если ЗначениеЗаполнено(ИмяОтчета) Тогда
			СтруктураЗвонка.Вставить("Контакт", Результат);
			
			Клиент = Неопределено;
			ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(Результат);
			
			Если ИмяМетаданных = "Партнеры" Тогда
				Клиент = Результат;

			ИначеЕсли ИмяМетаданных = "КонтактныеЛицаПартнеров" ИЛИ
				      ИмяМетаданных = "CRM_ПотенциальныеКлиенты" Тогда
				Клиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Результат);
			КонецЕсли;

			Если ЗначениеЗаполнено(Клиент) Тогда
				ПараметрыФормы = Новый Структура();
				Если ЗначениеЗаполнено(СтруктураЗвонка.ИмяСвойстваКлиента) Тогда
					ПараметрыФормы.Вставить(СтруктураЗвонка.ИмяСвойстваКлиента, Клиент);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураЗвонка.ИмяОтбораКлиента) Тогда
					ПараметрыФормы.Вставить("Отбор", Новый Структура(СтруктураЗвонка.ИмяОтбораКлиента, Клиент));
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураЗвонка.КлючВариантаОтчета) Тогда
					ПараметрыФормы.Вставить("КлючВарианта", СтруктураЗвонка.КлючВариантаОтчета);
					ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
				КонецЕсли;
				ОткрытьФорму("Отчет." + ИмяОтчета + ".Форма", ПараметрыФормы,, Новый УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("hCall") И НЕ ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
	    СозданЗвонок = Ложь;
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения, СозданЗвонок);
		Если СозданЗвонок Тогда
			сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпОткрытьОтчетЗавершение()

// Динамически подключаемый обработчик действия "Открыть отчет Дебиторская задолженность по срокам долга" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьДебиторскаяЗадолженность(СтруктураЗвонка)
	
	Если сфпОбщегоНазначенияПовтИсп.НайтиВМетаданныхПоИмени("Отчеты", "CRM_ДебиторскаяЗадолженностьПоСрокамДолга") Тогда
		сфпОткрытьОтчет(СтруктураЗвонка, "CRM_ДебиторскаяЗадолженностьПоСрокамДолга", "Основной", "Партнер");

	ИначеЕсли сфпОбщегоНазначенияПовтИсп.НайтиВМетаданныхПоИмени("Отчеты", "СостояниеРасчетовСКлиентами") Тогда
		сфпОткрытьОтчет(СтруктураЗвонка, "СостояниеРасчетовСКлиентами", "Основной", "Партнер");
	КонецЕсли;
	
КонецПроцедуры // сфпОткрытьДебиторскаяЗадолженность() 	

// Динамически подключаемый обработчик действия "Открыть отчет Взаиморасчеты" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьВзаиморасчеты(СтруктураЗвонка)
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") И СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);
	
	ТекДата	= сфпСофтФонПроСервер.сфпТекущаяДата();
	
	КлючВарианта = "";
	КлючНазначенияИспользования = "";
	ИмяФормы = сфпСофтФонПроСерверПовтИсп.ИмяФормыОтчетаВзаиморасчеты(КлючВарианта, КлючНазначенияИспользования);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, Период, НачалоПериода, КонецПериода, Отбор, СформироватьПриОткрытии");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("Период", "ПериодМесяц");
	ПараметрыФормы.Вставить("НачалоПериода", НачалоМесяца(ТекДата));
	ПараметрыФормы.Вставить("КонецПериода", КонецМесяца(ПараметрыФормы.НачалоПериода));
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент", СтруктураЗвонка.Контакт));

	ОткрытьФорму(ИмяФормы, ПараметрыФормы,, "Контрагент=" + СтруктураЗвонка.Контакт);

	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 																		
	КонецЕсли;

КонецПроцедуры // сфпОткрытьВзаиморасчеты()

// Динамически подключаемый обработчик действия "Открыть Расчеты с партнерами" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьРасчетыСПартнерами(СтруктураЗвонка)
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") и СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);						
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Ложь;
	
	КонтактИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
	Если КонтактИмяМетаданных = "Контрагенты" Тогда
		ПараметрыФормы.Отбор = Новый Структура("Контрагент", СтруктураЗвонка.Контакт);
		ПараметрыФормы.КлючНазначенияИспользования = "Контрагент";
		ПараметрыФормы.КлючВарианта = "ПоКонтрагентамКонтекст";
		
	ИначеЕсли КонтактИмяМетаданных = "Партнеры" Тогда
		ПараметрыФормы.Отбор = Новый Структура("Партнер", СтруктураЗвонка.Контакт);
		ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
		ПараметрыФормы.КлючВарианта = "ПоПартнерамКонтекст";
		
	ИначеЕсли КонтактИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
		Владелец = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
		ПараметрыФормы.Отбор = Новый Структура("Партнер", Владелец);
		ПараметрыФормы.КлючНазначенияИспользования = Владелец;
		ПараметрыФормы.КлючВарианта = "КарточкаРасчетовСКлиентамиКонтекст";	
	КонецЕсли;
	
	ИмяФормы = "Отчет.РасчетыСПартнерами.Форма";
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 																			
	КонецЕсли;
	
КонецПроцедуры // сфпОткрытьРасчетыСПартнерами() 	

// Динамически подключаемый обработчик действия "Открыть Карточку расчетов с клиентами" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура сфпОткрытьКарточкаРасчетовСКлиентами(СтруктураЗвонка)
	
	Если СтруктураЗвонка.Свойство("ФормаПолучена") И СтруктураЗвонка.ФормаПолучена Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураЗвонка.Вставить("ФормаПолучена", Истина);							
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Ложь;
	
	КонтактИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(СтруктураЗвонка.Контакт);
	Если КонтактИмяМетаданных = "Партнеры" Тогда
		ПараметрыФормы.Отбор = Новый Структура("Партнер", СтруктураЗвонка.Контакт);
		ПараметрыФормы.КлючНазначенияИспользования = СтруктураЗвонка.Контакт;
		ПараметрыФормы.КлючВарианта = "КарточкаРасчетовСКлиентамиКонтекст";
		
	ИначеЕсли КонтактИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
		Владелец = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
		ПараметрыФормы.Отбор = Новый Структура("Партнер", Владелец);
		ПараметрыФормы.КлючНазначенияИспользования = Владелец;
		ПараметрыФормы.КлючВарианта = "КарточкаРасчетовСКлиентамиКонтекст";
	КонецЕсли;
	
	ИмяФормы = "Отчет.КарточкаРасчетовСКлиентами.Форма";
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	
	Если СтруктураЗвонка.Свойство("hCall") Тогда
		НовыйЗвонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка); 																				
	КонецЕсли;

КонецПроцедуры // сфпОткрытьКарточкаРасчетовСКлиентами() 	

// Динамически подключаемый обработчик действия "Открыть Контакт-центр" при звонке
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Процедура ОткрытьКонтактЦентр(СтруктураЗвонка)
	
	ВнешнийЗвонок = Ложь;
	
	Если СтруктураЗвонка.Свойство("НомерТелефона") Тогда
		ПараметрыСервераСФ = сфпСофтФонПроСервер.сфпПараметрыСервера();
		Если ПараметрыСервераСФ.Свойство("МаксимальнаяДлинаВнутреннихНомеров") Тогда
		    ДлинаВнутренногоНомера = ПараметрыСервераСФ.МаксимальнаяДлинаВнутреннихНомеров;
			ВнешнийЗвонок = (СтрДлина(СтруктураЗвонка.НомерТелефона) > ДлинаВнутренногоНомера);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВнешнийЗвонок Тогда
	    ВызватьИсключение НСтр("ru = 'Обработка не предусмотрена для внутреннего вызова.'");
	КонецЕсли;

	ИнформацияОЗвонке = Новый Структура();	
	ИнформацияОЗвонке.Вставить("Телефон", СтруктураЗвонка.НомерТелефона);
	ИнформацияОЗвонке.Вставить("Клиент", СтруктураЗвонка.КонтактПредставление);
	ИнформацияОЗвонке.Вставить("Контрагент", СтруктураЗвонка.Контакт);
	ИнформацияОЗвонке.Вставить("ВидВходящегоТрафика", ПредопределенноеЗначение("Справочник." + "ВидыСобытий.ВходящийЗвонок"));
	
	ДополнительныеПараметры = Новый Структура("СтруктураЗвонка,ИнформацияОЗвонке", СтруктураЗвонка, ИнформацияОЗвонке);
	ОбработчикПовторногоОткрытияФормы = Новый ОписаниеОповещения("ОткрытьКонтактЦентрПовторноеОткрытиеФормы", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура("ИнформацияОЗвонке", ИнформацияОЗвонке);
	ОткрытьФорму("Обработка." + "КонтактЦентр.Форма", ПараметрыОткрытия,,,,, ОбработчикПовторногоОткрытияФормы);
	
КонецПроцедуры

Процедура ОткрытьКонтактЦентрПовторноеОткрытиеФормы(ТребуетсяВопросПередПерезаполением, ДополнительныеПараметры) Экспорт
	
	Если ТребуетсяВопросПередПерезаполением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяВопросПередПерезаполением Тогда
		ТекстВопроса = НСтр("ru = 'В ""Контакт-центре"" есть не записанные данные.'");
		
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить("ЗаменитьЗначения", НСтр("ru = 'Заменить данные в ""Контакт-центре""'"));
		ВариантыОтветов.Добавить("ОткрытьТелефонныйЗвонок", НСтр("ru = 'Открыть ""Телефонный звонок"" в новом окне'"));
		ВариантыОтветов.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		ОбработчикОтвета = Новый ОписаниеОповещения("ОткрытьКонтактЦентрОчисткаОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтветов,, "ЗаменитьЗначения", НСтр("ru = 'Звонок от клиента'"));
		
		Возврат;
	КонецЕсли;
	
	ОткрытьКонтактЦентрОповеститьОткрытуюФорму(ДополнительныеПараметры.ИнформацияОЗвонке);
	
КонецПроцедуры

Процедура ОткрытьКонтактЦентрОчисткаОбработкаОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "ЗаменитьЗначения" Тогда
		ОткрытьКонтактЦентрОповеститьОткрытуюФорму(ДополнительныеПараметры.ИнформацияОЗвонке);
		
	ИначеЕсли Ответ = "ОткрытьТелефонныйЗвонок" Тогда
		сфпОткрытьТелефонныйЗвонок(ДополнительныеПараметры.СтруктураЗвонка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКонтактЦентрОповеститьОткрытуюФорму(ИнформацияОЗвонке)
	
	Оповестить("ПередачаЗвонкаВКонтактЦентр", ИнформацияОЗвонке, "СофтФон");
	
КонецПроцедуры


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ЗВОНКА

// Процедура - обработчик выполнения общей команды "ИсторияРазговора"
//
// Параметры:
//	ПараметрКоманды				- Произвольный	- Параметр команды
//	ПараметрыВыполненияКоманды	- Структура		- Параметры выполнения команды
//
Процедура сфпОбработкаКомандыИсторияРазговора(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокументаТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяДокументаТелефонныйЗвонок(Истина);
	Если ЗначениеЗаполнено(ИмяДокументаТелефонныйЗвонок) Тогда
		Если ТипЗнч(ПараметрКоманды) = Тип(ИмяДокументаТелефонныйЗвонок) Тогда
			сфпСофтФонПроКлиент.сфпОткрытьИсториюРазговора(ПараметрКоманды);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпОбработкаКомандыИсторияРазговора()

// Процедура - обработчик выполнения общей команды "ИсторияТелефонныхЗвонков"
//
// Параметры:
//	ПараметрКоманды				- Произвольный	- Параметр команды
//	ПараметрыВыполненияКоманды	- Структура		- Параметры выполнения команды
//
Процедура сфпОбработкаКомандыИсторияТелефонныхЗвонков(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	сфпСофтФонПроКлиент.сфпОткрытьИсториюТелефонныхЗвонков(ПараметрКоманды);

КонецПроцедуры // сфпОбработкаКомандыИсторияТелефонныхЗвонков()
	
// Процедура - обработчик выполнения общей команды "сфпКарточкаCoMagic"
//
// Параметры:
//	ПараметрКоманды				- Произвольный	- Параметр команды
//	ПараметрыВыполненияКоманды	- Структура		- Параметры выполнения команды
//
Процедура сфпОбработкаКомандыКарточкаCoMagic(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Строка") Тогда
		  CoMagicID = ПараметрКоманды;
	Иначе CoMagicID = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьCoMagicID(ПараметрКоманды);
	КонецЕсли;
	
	Если ПустаяСтрока(CoMagicID) Тогда
		Возврат;
	КонецЕсли;
	
	КлючСессии = сфпСофтФонПроСервер.сфпПолучитьКлючСессииCoMagic();
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОператораКоллтрекинга = сфпСофтФонПроСервер.сфпПараметрыОператораКоллтрекинга();
	Адрес = "http://" + ПараметрыОператораКоллтрекинга.ДоменAPP + "/analytics/auditory/cmvisitor/?session_key=" + КлючСессии + "&visitor_id=" + CoMagicID;
	ПерейтиПоНавигационнойСсылке(Адрес);

КонецПроцедуры // сфпОбработкаКомандыКарточкаCoMagic()

// Процедура - обработчик выполнения общей команды "ПереводЗвонков"
//
// Параметры:
//	ПараметрКоманды				- Произвольный	- Параметр команды
//	ПараметрыВыполненияКоманды	- Структура		- Параметры выполнения команды
//
Процедура сфпОбработкаКомандыПереводЗвонков(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;

	ИначеЕсли НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru='Недостаточно прав для настройки перевода звонков!'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Контакт", ПараметрКоманды);
	ОткрытьФорму("ОбщаяФорма.сфпПользователиДляПереключения", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник);

КонецПроцедуры // сфпОбработкаКомандыПереводЗвонков()

// Процедура - обработчик выполнения общей команды "сфпПозвонить"
//
// Параметры:
//	ПараметрКоманды				- Произвольный	- Параметр команды
//	ПараметрыВыполненияКоманды	- Структура		- Параметры выполнения команды
//
Процедура сфпОбработкаКомандыПозвонить(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрКоманды) Тогда
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru = 'Необходимо записать элемент!'"));
		Возврат;
	КонецЕсли;	
	
	Попытка    ЭтаФорма = ПараметрыВыполненияКоманды.Источник;
	Исключение ЭтаФорма = ПараметрыВыполненияКоманды;
	КонецПопытки;	
	
	ДанныеЗаполнения = Новый Структура("Основание,ЭтаФорма", ПараметрКоманды, ЭтаФорма);
	
	ИмяДокументаТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяДокументаТелефонныйЗвонок(Истина);
	Если ЗначениеЗаполнено(ИмяДокументаТелефонныйЗвонок) И ТипЗнч(ПараметрКоманды) = Тип(ИмяДокументаТелефонныйЗвонок) Тогда
		АбонентКонтакт = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ПараметрКоманды, "АбонентКонтакт"); 
		АбонентКакСвязаться	= сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ПараметрКоманды, "АбонентКакСвязаться"); 
		Если ЗначениеЗаполнено(АбонентКонтакт) Тогда
			Если ЗначениеЗаполнено(АбонентКакСвязаться) Тогда
				сфпСофтФонПроКлиент.сфпПозвонить(АбонентКакСвязаться, АбонентКонтакт, ДанныеЗаполнения);
				
		    Иначе
				СписокОбъектов = Новый СписокЗначений;
				СписокОбъектов.Добавить(АбонентКонтакт);
				сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(АбонентКакСвязаться) Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(АбонентКакСвязаться, , ДанныеЗаполнения);
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран номер телефона!'"), 5);
		КонецЕсли;
		
	ИначеЕсли Найти("" + ТипЗнч(ПараметрКоманды), "Событие") > 0 Тогда
		Контрагент = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ПараметрКоманды, "Контрагент"); 
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокОбъектов = Новый СписокЗначений();
			СписокОбъектов.Добавить(Контрагент);
			сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
		КонецЕсли;	
		
	Иначе
		СписокОбъектов = Новый СписокЗначений();
		СписокОбъектов.Добавить(ПараметрКоманды);
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // сфпОбработкаКомандыПозвонить()

#КонецОбласти
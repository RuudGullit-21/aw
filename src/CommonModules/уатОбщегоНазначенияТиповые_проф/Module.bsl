////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа. Возвращает сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Функция ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
											СуммаДокумента, ВалютаДенежныхСредств) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СтарыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать
	
	СтруктураКурсаВалютаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента      = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаВалютаДокумента.Кратность;
	
	Если Не ВалютаДокумента = СтараяВалюта И СуммаДокумента > 0 Тогда
		Возврат уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СтарыйКурс,
			КурсДокумента, СтараяКратность, КратностьДокумента);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПриИзмененииЗначенияКассыБанковскогоСчета()

// Вычисляет текущий долг контрагента по заданному договору и сделке в валюте взаиморасчетов 
// по данному договору
//
// Параметры: 
//  Договор - ссылка на элемент справочника, определяет договор контрагента, по которому надо получить долг, 
//  Сделка  - ссылка на документ, определяет сделку (заказ, накладную, платежный документ) 
//                 по которому надо получить долг.
//  СсылкаДокумент           - ссылка на документ, для которого рассчитывается долг.
//  ФлагЕстьОшибки - Булево - признак наличия ошибки.
//
// Возвращаемое значение:
//  Число -  текущий размер долга, если удалось вычислить текущий долг, иначе - 0.
//
Функция ТекущийДолг(Договор, Сделка = Неопределено, СсылкаДокумент, ФлагЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.уатВзаиморасчетыСКонтрагентами) Тогда
		ФлагЕстьОшибки = Истина;
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекущийДолг = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА уатВзаиморасчетыСКонтрагентамиОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ уатВзаиморасчетыСКонтрагентамиОстатки.Валюта
	|	КОНЕЦ КАК Валюта,
	|	СУММА(уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(уатВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента = &Договор
	|				И Сделка = &Сделка) КАК уатВзаиморасчетыСКонтрагентамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Валюта,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА уатВзаиморасчетыСКонтрагентамиОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ уатВзаиморасчетыСКонтрагентамиОстатки.Валюта
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Если ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Сделка);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Сделка = &Сделка", "");
	КонецЕсли;
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Валюта = Договор.ВалютаВзаиморасчетов Тогда
			ТекСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		ИначеЕсли Выборка.Валюта = ВалютаУпр Тогда
			ТекСуммаВзаиморасчетов = Выборка.СуммаУпр;
		Иначе
			ТекСуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетов,
				Выборка.Валюта, Договор.ВалютаВзаиморасчетов,
				ТекущаяДата(), ТекущаяДата());
		КонецЕсли;
				
		ТекущийДолг = ТекущийДолг + ТекСуммаВзаиморасчетов;
	КонецЦикла;
		
	Возврат ТекущийДолг;
	
КонецФункции // ТекущийДолг()

// Вычисляет текущий долг контрагента по договору по указанному документу
//
// Параметры: 
//  Договор - ссылка на элемент справочника, определяет договор контрагента, по которому надо получить долг, 
//  СсылкаДокумент - ссылка на документ, для которого рассчитывается долг.
//
// Возвращаемое значение:
//  Число -  текущий размер долга, если удалось вычислить текущий долг, иначе - 0.
//
Функция ТекущийДолгПоДокументу(Договор, СсылкаДокумент, флагЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.уатВзаиморасчетыСКонтрагентами) Тогда
		флагЕстьОшибки = Истина;
		Возврат 0;
	КонецЕсли;

	ТекущийДолг = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА уатВзаиморасчетыСКонтрагентамиОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ уатВзаиморасчетыСКонтрагентамиОстатки.Валюта
	|	КОНЕЦ КАК Валюта,
	|	СУММА(уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(уатВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			ДоговорКонтрагента = &Договор
	|				И Сделка = &Сделка) КАК уатВзаиморасчетыСКонтрагентамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Валюта,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА уатВзаиморасчетыСКонтрагентамиОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ уатВзаиморасчетыСКонтрагентамиОстатки.Валюта
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Сделка",  СсылкаДокумент);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Валюта = Договор.ВалютаВзаиморасчетов Тогда
			ТекСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		ИначеЕсли Выборка.Валюта = ВалютаУпр Тогда
			ТекСуммаВзаиморасчетов = Выборка.СуммаУпр;
		Иначе
			ТекСуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетов,
				Выборка.Валюта, Договор.ВалютаВзаиморасчетов,
				ТекущаяДата(), ТекущаяДата());
		КонецЕсли;
				
		ТекущийДолг = ТекущийДолг + ТекСуммаВзаиморасчетов;
	КонецЦикла;
		
	Возврат ТекущийДолг;
		
КонецФункции // ТекущийДолгПоДокументу()

// <Описание функции>
//
// Параметры
//  Периодичность (Перечисления.Периодичность): периодичность планирования по сценарию.
//  ДатаВПериоде (Дата): произвольная дата
//
// Возвращаемое значение:
//   ДатаНачалаПериода   – ближайшая дата начала периода планирования
//
Функция ДатаНачалаПериода(ДатаВПериоде,Периодичность) Экспорт
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода (ДатаВПериоде);
	Иначе
		Возврат НачалоДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаНачалаПериода()

// <Описание функции>
//
// Параметры
//  Периодичность (Перечисления.Периодичность): периодичность планирования по сценарию.
//  ДатаВПериоде (Дата): произвольная дата
//
// Возвращаемое значение:
//   ДатаКонцаПериода   – ближайшая дата начала периода планирования
//
Функция ДатаКонцаПериода(ДатаВПериоде,Периодичность) Экспорт
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат КонецДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат КонецГода (ДатаВПериоде);
	Иначе
		Возврат КонецДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаКонцаПериода()

// <Описание процедуры>
//
//  Периодичность (Перечисления.Периодичность): периодичность планирования по сценарию.
//  ДатаВПериоде (Дата): произвольная дата
// 	Смещение (число): определяет направление и количество периодов, в котором сдвигается дата
//	Возвращаемое значение: дата, отстоящая от исходной на заданное количество периодов 
//
Функция ДобавитьИнтервал(ДатаПериода,Периодичность,Смещение) Экспорт
	
	Если Смещение=0 Тогда
		НоваяДатаПериода=ДатаПериода;	
	ИначеЕсли Периодичность=Перечисления.Периодичность.День Тогда
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*24*3600);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		НоваяДатаПериода=НачалоНедели(ДатаПериода+Смещение*7*24*3600);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение*3);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		НоваяДатаПериода=ДобавитьМесяц(ДатаПериода,Смещение*12);
	Иначе
		НоваяДатаПериода=НачалоДня(ДатаПериода+Смещение*24*3600);
	КонецЕсли;
	
	Возврат НоваяДатаПериода;
	
КонецФункции // ДобавитьИнтервал()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ТестСоединения(ПараметрыСоединения, ТекстОшибки = "") Экспорт
	
	ТекстОшибкиПоУмолчанию = "Ошибка соединения с сервером репликации. ";
	
	АдресСтраницы = СтрШаблон("http%1://%2:%3/api/1/test?login=%4&pwd=%5",
							  ?(Число(ПараметрыСоединения.Порт) = 443, "s", ""),
							  СокрЛП(ПараметрыСоединения.Сервер),
							  Формат(ПараметрыСоединения.Порт, "ЧН=0; ЧГ=0"),
							  ПараметрыСоединения.Логин,
							  ПараметрыСоединения.Пароль);
	
							  
	ИмяФайла = КаталогВременныхФайлов() + "replic-result-" + Строка(Новый УникальныйИдентификатор()) + ".json";						  	
	РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресСтраницы, Новый Структура("ПутьДляСохранения", ИмяФайла));
	Если НЕ РезультатСкачивания.Статус Тогда
		ТекстОшибки = ТекстОшибкиПоУмолчанию + РезультатСкачивания.СообщениеОбОшибке;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	РезультатЧтения = Неопределено;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		РезультатЧтения = ПрочитатьJSON(ЧтениеJSON);		
	Исключение
		ТекстОшибки = ТекстОшибкиПоУмолчанию + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки; 
	
	Если НЕ (ТипЗнч(РезультатЧтения) = Тип("Структура")
		 И РезультатЧтения.Свойство("Message")
		 И РезультатЧтения.Message = "OK") Тогда
		 
		ТекстОшибки = ТекстОшибкиПоУмолчанию + " Не удалось прочитать ответ сервера";
	КонецЕсли; 
		
КонецПроцедуры
 
Функция ПолучитьДанныеАктуальности(ПараметрыРепликации, ПараметрыЗапроса) Экспорт
	
	ДанныеАктуальности = ИнициализироватьТаблицуДанныхТерминалов(ПараметрыЗапроса);
	
	СырыеДанные = СырыеДанныеАктуальности(ПараметрыРепликации, ПараметрыЗапроса, ПараметрыЗапроса.ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(СырыеДанные) Тогда
		Возврат ДанныеАктуальности;	
	КонецЕсли;
	
	ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(ДанныеАктуальности, СырыеДанные, ПараметрыЗапроса);
	
	
	Возврат ДанныеАктуальности;

КонецФункции
 
Функция ТрекТерминала(ПараметрыРепликации, ПараметрыТрека) Экспорт
	
	Трек = ИнициализироватьТаблицуДанныхТерминалов(ПараметрыТрека);
	
	СырыеДанные = СырыеДанныеТрекаТерминала(ПараметрыРепликации, ПараметрыТрека, ПараметрыТрека.ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(СырыеДанные) Тогда
		Возврат Трек;	
	КонецЕсли; 
	
	Если СырыеДанные.Количество() = 0 Тогда
		Возврат Трек;	
	КонецЕсли; 
	
	ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(Трек, СырыеДанные, ПараметрыТрека);
	
	
	Возврат Трек;
	
КонецФункции

Функция ДанныеТерминалов(ПараметрыРепликации, ПараметрыЗапроса) Экспорт
	
	ДанныеТерминалов = ?(ПараметрыЗапроса.ГруппироватьПоТерминалам, Новый Соответствие, ИнициализироватьТаблицуДанныхТерминалов(ПараметрыЗапроса));
				
	ДанныеЗапросаПреобразованные = СформироватьМассивДанныхЗапросаРепликации(ПараметрыЗапроса.ДанныеЗапроса);
	Если ДанныеЗапросаПреобразованные.Количество() = 0 Тогда
		Возврат ДанныеТерминалов;	
	КонецЕсли;	
	
	СырыеДанные = СырыеДанныеТерминалов(ПараметрыРепликации, ПараметрыЗапроса, ДанныеЗапросаПреобразованные, ПараметрыЗапроса.ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(СырыеДанные) Тогда
		Возврат ДанныеТерминалов;	
	КонецЕсли;
	
	Если ПараметрыЗапроса.ГруппироватьПоТерминалам Тогда
		СырыеДанныеТерминаловВСоответствие(ДанныеТерминалов, СырыеДанные, ПараметрыЗапроса);
	Иначе
		ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(ДанныеТерминалов, СырыеДанные, ПараметрыЗапроса);
	КонецЕсли; 
	
	
	Возврат ДанныеТерминалов;
	
КонецФункции

Функция МестоположениеТерминалов(ПараметрыРепликации, ПараметрыЗапроса) Экспорт
	
	ТаблицаМестоположенийТерминалов = ИнициализироватьТаблицуДанныхТерминалов(ПараметрыЗапроса);
	
	СырыеДанные = СырыеДанныеМестоположения(ПараметрыРепликации, ПараметрыЗапроса, ПараметрыЗапроса.ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(СырыеДанные) Тогда
		Возврат ТаблицаМестоположенийТерминалов;	
	КонецЕсли;
	
	ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(ТаблицаМестоположенийТерминалов, СырыеДанные, ПараметрыЗапроса);
	
	
	Возврат ТаблицаМестоположенийТерминалов;
	
КонецФункции

Функция ПоследнееВалидноеЗначениеДатчика(ПараметрыРепликации, ПараметрыЗапроса) Экспорт
	
	НайденнаяЗаписьДанныхТерминалов = Неопределено;
	ТабДанныеТерминалов = ИнициализироватьТаблицуДанныхТерминалов(ПараметрыЗапроса);
	
	СырыеДанные = СырыеДанныеВалидноеЗначениеДатчика(ПараметрыРепликации, ПараметрыЗапроса, ПараметрыЗапроса.ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(СырыеДанные) Тогда
		Возврат НайденнаяЗаписьДанныхТерминалов;	
	КонецЕсли;
	
	ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(ТабДанныеТерминалов, СырыеДанные, ПараметрыЗапроса);
	
	НайденнаяЗаписьДанныхТерминалов = Новый Структура;
	Для каждого Колонка Из ТабДанныеТерминалов.Колонки Цикл
		НайденнаяЗаписьДанныхТерминалов.Вставить(Колонка.Имя);		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(НайденнаяЗаписьДанныхТерминалов, ТабДанныеТерминалов[0]); 
	
	
	Возврат НайденнаяЗаписьДанныхТерминалов;
		
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Актуальность

Функция СырыеДанныеАктуальности(ПараметрыРепликации, ПараметрыЗапроса, ТекстОшибки = "")
	
	ДанныеЗапроса = СгенерироватьДанныеЗапросаКСерверуСбораДанных(ПараметрыРепликации, ПараметрыЗапроса);
	ДанныеЗапроса.Вставить("terminals", ПараметрыЗапроса.КодыТерминалов);
	
	
	Возврат ПолучитьДанныеССервераСбораДанных(ДанныеЗапроса, "/api/1/actuality", ПараметрыРепликации, ТекстОшибки);
	
КонецФункции
 
#КонецОбласти 

#Область ДанныеТерминалов

Функция СформироватьМассивДанныхЗапросаРепликации(ДанныеЗапроса)
	
	Результат = Новый Массив;
	
	Для каждого СтрокаЗапроса Из ДанныеЗапроса Цикл
		СтруктураЗапроса = Новый Структура("code", СтрокаЗапроса.КодТерминала);
		Если СтрокаЗапроса.Свойство("СчетчикАктуальности") Тогда
			СтруктураЗапроса.Вставить("counter", СтрокаЗапроса.СчетчикАктуальности);
		ИначеЕсли СтрокаЗапроса.Свойство("ЗапрашиваемыйПериод") Тогда 
			СтруктураЗапроса.Вставить("period", СтрокаЗапроса.ЗапрашиваемыйПериод);		
		Иначе
			ВызватьИсключение "В процедуру получения данных терминалов переданы некорректные параметры запроса";
		КонецЕсли; 
		
		Результат.Добавить(СтруктураЗапроса);	
	КонецЦикла; 
	
		
	Возврат Результат;
	
КонецФункции

Функция СырыеДанныеТерминалов(ПараметрыРепликации, ПараметрыЗапроса, ДанныеЗапросаПреобразованные, ТекстОшибки = "")
	
	ДанныеЗапроса = СгенерироватьДанныеЗапросаКСерверуСбораДанных(ПараметрыРепликации, ПараметрыЗапроса);
	ДанныеЗапроса.Вставить("query", ДанныеЗапросаПреобразованные);
	ДанныеЗапроса.Вставить("device_records_count", ПараметрыЗапроса.МаксимумЗаписейПоТерминалу);
	ДанныеЗапроса.Вставить("group_by_code", ПараметрыЗапроса.ГруппироватьПоТерминалам);
	ДанныеЗапроса.Вставить("include_equal_record", ПараметрыЗапроса.ВключатьДанныеПредыдущейТочки);
	
	
	Возврат ПолучитьДанныеССервераСбораДанных(ДанныеЗапроса, "/api/1/terminaldata", ПараметрыРепликации, ТекстОшибки);
		
КонецФункции

Процедура СырыеДанныеТерминаловВСоответствие(ДанныеТерминалов, СырыеДанные, ПараметрыЗапроса)

	Для каждого ДанныеПоТерминалу Из СырыеДанные Цикл
		ТаблицаДанныхСтроки = ИнициализироватьТаблицуДанныхТерминалов(ПараметрыЗапроса);
        ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(ТаблицаДанныхСтроки, ДанныеПоТерминалу["data"], ПараметрыЗапроса);
		ДанныеТерминалов.Вставить(ДанныеПоТерминалу["code"], ТаблицаДанныхСтроки);	
	КонецЦикла;
		
КонецПроцедуры
 
#КонецОбласти 

#Область Трек

Функция СырыеДанныеТрекаТерминала(ПараметрыРепликации, ПараметрыТрека, ТекстОшибки = "")
	
	ДанныеЗапроса = СгенерироватьДанныеЗапросаКСерверуСбораДанных(ПараметрыРепликации, ПараметрыТрека);
	ДанныеЗапроса.Вставить("terminal_code", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыТрека.Терминал, "Код"));
	ДанныеЗапроса.Вставить("period_from", Формат(ПараметрыТрека.ДатаНачалаUTC0, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ДанныеЗапроса.Вставить("period_to", Формат(ПараметрыТрека.ДатаОкончанияUTC0, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ДанныеЗапроса.Вставить("valid_only", ПараметрыТрека.ТолькоВалидные);
	ДанныеЗапроса.Вставить("expand_range", ПараметрыТрека.КоличествоДополнительныхЗаписей);
	ДанныеЗапроса.Вставить("counter_from", ПараметрыТрека.СчетчикНачинаяС);	
	
	
	Возврат ПолучитьДанныеССервераСбораДанных(ДанныеЗапроса, "/api/1/track", ПараметрыРепликации, ТекстОшибки);
	
КонецФункции
 
#КонецОбласти 

#Область Местоположение

Функция СырыеДанныеМестоположения(ПараметрыРепликации, ПараметрыЗапроса, ТекстОшибки = "")
	
	ДанныеЗапроса = СгенерироватьДанныеЗапросаКСерверуСбораДанных(ПараметрыРепликации, ПараметрыЗапроса);
	ДанныеЗапроса.Вставить("terminals", ПараметрыЗапроса.КодыТерминалов);
	ДанныеЗапроса.Вставить("period", Формат(ПараметрыЗапроса.ПериодUTC0, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	
	
	Возврат ПолучитьДанныеССервераСбораДанных(ДанныеЗапроса, "/api/1/locations", ПараметрыРепликации, ТекстОшибки);
		
КонецФункции
 
#КонецОбласти 

#Область ВалидноеЗначениеДатчика

Функция СырыеДанныеВалидноеЗначениеДатчика(ПараметрыРепликации, ПараметрыЗапроса, ТекстОшибки = "")
	
	ДанныеЗапроса = СгенерироватьДанныеЗапросаКСерверуСбораДанных(ПараметрыРепликации, ПараметрыЗапроса);
	ДанныеЗапроса.Вставить("terminal_code", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Терминал, "Код"));
	ДанныеЗапроса.Вставить("sensor_code", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Датчик, "Код"));
	ДанныеЗапроса.Вставить("period", Формат(ПараметрыЗапроса.ПериодUTC0, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ДанныеЗапроса.Вставить("sensor_value_from", ПараметрыЗапроса.ИнтервалВалидностиНачало);
	ДанныеЗапроса.Вставить("sensor_value_to", ПараметрыЗапроса.ИнтервалВалидностиОкончание);
	
	
	Возврат ПолучитьДанныеССервераСбораДанных(ДанныеЗапроса, "/api/1/validsensdata", ПараметрыРепликации, ТекстОшибки, Ложь);
	
КонецФункции
 
#КонецОбласти 

#Область ПарсингТаблицыДанныхТерминалов

Функция ИнициализироватьТаблицуДанныхТерминалов(ПараметрыЗапроса)
	
	ТипКолонкиОбработанныеДанныеДатчиков = ?(ПараметрыЗапроса.ПреобразоватьОбработанныеДанныеДатчиковВСоответствие,
											 Новый ОписаниеТипов("Соответствие"),
											 Новый ОписаниеТипов("Массив"));
	
	
	Результат = Новый ТаблицаЗначений;	
	Результат.Колонки.Добавить("КодТерминала", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	Результат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	Результат.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	Результат.Колонки.Добавить("Высота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	Результат.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	Результат.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	Результат.Колонки.Добавить("ЧислоСпутников", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0)));
	Результат.Колонки.Добавить("НевалидныеДанные", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(19,0)));
	Результат.Колонки.Добавить("ВерсияФормата", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
		
	Если ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.СырыеДанные Тогда	 
		Результат.Колонки.Добавить("ДанныеДатчиков_Сырые", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки()));
	ИначеЕсли ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные Тогда
		Результат.Колонки.Добавить("ДанныеДатчиков_Обработанные", ТипКолонкиОбработанныеДанныеДатчиков);	
	ИначеЕсли ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.СырыеИОбработанныеДанные Тогда
		Результат.Колонки.Добавить("ДанныеДатчиков_Сырые", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки()));
		Результат.Колонки.Добавить("ДанныеДатчиков_Обработанные",ТипКолонкиОбработанныеДанныеДатчиков);
	КонецЕсли; 
	
	Если ПараметрыЗапроса.Свойство("ОпределятьМестоположение") И ПараметрыЗапроса.ОпределятьМестоположение Тогда
		Результат.Колонки.Добавить("Местоположение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));	
	КонецЕсли; 
	
	Если ПараметрыЗапроса.Свойство("ОпределятьРазрешенныеСкоростиПоПДД")
		 И ПараметрыЗапроса.ОпределятьРазрешенныеСкоростиПоПДД Тогда
		 
		Результат.Колонки.Добавить("РазрешеннаяСкоростьПоПДД",  Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
		Результат.Колонки.Добавить("ШиротаДействияРазрешеннойСкорости", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
		Результат.Колонки.Добавить("ДолготаДействияРазрешеннойСкорости", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуДанныхТерминаловПоРезультатуЗапроса(ДанныеТерминалов, СырыеДанные, ПараметрыЗапроса)
	
	ТребуютсяСырыеДанные = (ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.СырыеДанные);
	ТребуютсяОбработанныеДанные = (ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные);
	ТребуютсяСырыеИОбработанныеДанные = (ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.СырыеИОбработанныеДанные);
	
	ОпределятьМестоположение = (ПараметрыЗапроса.Свойство("ОпределятьМестоположение") И ПараметрыЗапроса.ОпределятьМестоположение);
	ОпределятьРазрешенныеСкоростиПоПДД = (ПараметрыЗапроса.Свойство("ОпределятьРазрешенныеСкоростиПоПДД") 
										  И ПараметрыЗапроса.ОпределятьРазрешенныеСкоростиПоПДД);
	
	Для каждого СтрокаДанных Из СырыеДанные Цикл
		НовСтрокаТЗ = ДанныеТерминалов.Добавить();
		НовСтрокаТЗ.КодТерминала = СтрокаДанных["code"];
		НовСтрокаТЗ.Период = СтрокаДанных["period"];
		НовСтрокаТЗ.Широта = СтрокаДанных["lat"];
		НовСтрокаТЗ.Долгота = СтрокаДанных["lon"];
		НовСтрокаТЗ.Высота = СтрокаДанных["alt"];
		НовСтрокаТЗ.Направление = СтрокаДанных["course"];
		НовСтрокаТЗ.Скорость = СтрокаДанных["speed"];
		НовСтрокаТЗ.ЧислоСпутников = СтрокаДанных["vsat"];
		НовСтрокаТЗ.Счетчик = СтрокаДанных["counter"];
		НовСтрокаТЗ.НевалидныеДанные = (СтрокаДанных["invalid"] = 1); 
		НовСтрокаТЗ.ВерсияФормата = СтрокаДанных["vf"];
		
		Если ТребуютсяСырыеДанные Тогда	 
			НовСтрокаТЗ.ДанныеДатчиков_Сырые = СтрокаДанных["sens_data"];
		ИначеЕсли ТребуютсяОбработанныеДанные Тогда
			НовСтрокаТЗ.ДанныеДатчиков_Обработанные = СтрокаДанных["sensors"];	
		ИначеЕсли ТребуютсяСырыеИОбработанныеДанные Тогда
			НовСтрокаТЗ.ДанныеДатчиков_Сырые = СтрокаДанных["sens_data"];
			НовСтрокаТЗ.ДанныеДатчиков_Обработанные = СтрокаДанных["sensors"];
		КонецЕсли;
		
		Если ОпределятьМестоположение Тогда
			НовСтрокаТЗ.Местоположение = СтрокаДанных["address"];	
		КонецЕсли;
		
		Если ОпределятьРазрешенныеСкоростиПоПДД Тогда
			НовСтрокаТЗ.РазрешеннаяСкоростьПоПДД = СтрокаДанных["speedlimit"];
			НовСтрокаТЗ.ШиротаДействияРазрешеннойСкорости = СтрокаДанных["mappedlat"];
			НовСтрокаТЗ.ДолготаДействияРазрешеннойСкорости = СтрокаДанных["mappedlon"];
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти 

Функция СгенерироватьДанныеЗапросаКСерверуСбораДанных(ПараметрыРепликации, ПараметрыЗапроса)
	
	ТипЗапрашиваемыхДанныхДатчиков = "empty";
	Если ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные
		 ИЛИ ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.СырыеИОбработанныеДанные Тогда
		 
		ТипЗапрашиваемыхДанныхДатчиков = ?(ПараметрыЗапроса.ПреобразоватьОбработанныеДанныеДатчиковВСоответствие = Истина,
										   "map",
										   "list");
	КонецЕсли; 
	
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("login", ПараметрыРепликации.Логин);
	ДанныеЗапроса.Вставить("pwd", ПараметрыРепликации.Пароль);
	ДанныеЗапроса.Вставить("sensors_data_type", ТипЗапрашиваемыхДанныхДатчиков);
	
	
	Возврат ДанныеЗапроса;
	
КонецФункции
 
Функция ПолучитьДанныеССервераСбораДанных(ДанныеЗапроса, АдресОбращения, ПараметрыРепликации, ТекстОшибки = "", РазрешитьОтветСервераВВидеАрхива = Истина)
	
	Данные = Новый Массив;
		
	ВозможноАрхивированиеОтветаСервером = (РазрешитьОтветСервераВВидеАрхива И ItobCsmHandlerПовтИсп.ИспользованиеCsmHandlerВключено());
	ДанныеЗапроса.Вставить("packed", ВозможноАрхивированиеОтветаСервером);
	
	// Сериализуем
	ТелоЗапросаJSON = СериализоватьJSON(ДанныеЗапроса);
	
	сткОтветСервера = ОтправитьЗапросНаСерверIMCS(ПараметрыРепликации, АдресОбращения, ТелоЗапросаJSON);
	Если НЕ сткОтветСервера.Результат Тогда
		ЗаписьЖурналаРегистрации("Ошибка получения данных с сервера сбора данных", УровеньЖурналаРегистрации.Ошибка,,, сткОтветСервера.ОписаниеОшибки);
		ТекстОшибки = сткОтветСервера.ОписаниеОшибки;
		
		Возврат Данные;
	КонецЕсли;
		
	// Десериализуем ответ
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(сткОтветСервера.Ответ);
	Данные = ПрочитатьJSON(ЧтениеJSON, Истина, "period", ФорматДатыJSON.ISO);
	
	
	Возврат Данные;
	
КонецФункции

Функция СериализоватьJSON(ДанныеДляСериализации)

	Запрос = Новый ЗаписьJSON();
	Запрос.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(Запрос, ДанныеДляСериализации);
	Возврат Запрос.Закрыть();

КонецФункции

Функция ОтправитьЗапросНаСерверIMCS(ПараметрыРепликации, Адрес, ТелоЗапроса)
	
	сткРезультат = Новый Структура;
	сткРезультат.Вставить("Результат", Ложь);
	сткРезультат.Вставить("ОписаниеОшибки", "");
	сткРезультат.Вставить("КодСостояния", 0);
	сткРезультат.Вставить("Ответ", "");
	
	Таймаут = 60; // 60 секунд - таймаут соединения
	ТекстОшибкиОбработкиФайлаОтвета = "";
	ТекстОшибки = "";
	Ответ = Неопределено;
		
	Прокси = ItobОбщегоНазначения.НастройкиПрокси(сткРезультат.ОписаниеОшибки);
	Если ЗначениеЗаполнено(сткРезультат.ОписаниеОшибки) Тогда
		Возврат сткРезультат;
	КонецЕсли; 
	
	HTTP = Новый HTTPСоединение(ПараметрыРепликации.Сервер, 
								ПараметрыРепликации.Порт, 
								Неопределено, 
								Неопределено, 
								Прокси, 
								Таймаут, 
								?(ПараметрыРепликации.Порт = 443, Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
								
	ЗапросHTTP = Новый HTTPЗапрос(Адрес);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	Попытка		
		ОтветHTTP = HTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
		сткРезультат.КодСостояния = ОтветHTTP.КодСостояния;
		РезультатСкачивания = (ОтветHTTP.КодСостояния = 200);
		Ответ = ОбработатьОтветСервера(ОтветHTTP, ТекстОшибкиОбработкиФайлаОтвета);	
	Исключение
		РезультатСкачивания = Ложь;
		ТекстОшибки = ОписаниеОшибки();		
	КонецПопытки;
	
	Если НЕ РезультатСкачивания ИЛИ ЗначениеЗаполнено(ТекстОшибкиОбработкиФайлаОтвета) Тогда		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			сткРезультат.ОписаниеОшибки = ТекстОшибки; 		
		ИначеЕсли ЗначениеЗаполнено(ТекстОшибкиОбработкиФайлаОтвета) Тогда 	
			сткРезультат.ОписаниеОшибки = "Ошибка обработки ответа сервера. " + ТекстОшибкиОбработкиФайлаОтвета;
		ИначеЕсли НЕ Ответ = Неопределено Тогда 
			сткРезультат.ОписаниеОшибки = "Ошибка взаимодействия с сервером сбора данных. " + Ответ;
		КонецЕсли; 	
	Иначе		
		сткРезультат.Результат = Истина;
		сткРезультат.Ответ = Ответ;	
	КонецЕсли;	
	
	
	Возврат сткРезультат;

КонецФункции

Функция ОбработатьОтветСервера(ОтветСервера, ТекстОшибки = "")
	
	Результат = "";
	
	ФорматОтветаСервера = ОтветСервера.Заголовки["Content-Encoding"];
	Если НЕ ФорматОтветаСервера = Неопределено И ФорматОтветаСервера = "gzip" Тогда
		ТелоСообщения = ОтветСервера.ПолучитьТелоКакДвоичныеДанные();
		Результат = ItobCsmHandlerJSON.РазархивироватьGZIP(ПолучитьHEXСтрокуИзДвоичныхДанных(ТелоСообщения), ТекстОшибки);
	Иначе
		Результат = ОтветСервера.ПолучитьТелоКакСтроку("UTF-8");
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// Менеджер обмена обмена через универсальный формат (УАТ Логистика КОРП от 13.06.2023 22:59:49)
//
////////////////////////////////////////////////////////////////////////////////
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	ЗапрещенныеКОтправке = Новый ТаблицаЗначений();
	ЗапрещенныеКОтправке.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ПараметрыКонвертации.ЗапрещенныеКОтправке = ЗапрещенныеКОтправке;
	
	ЗапрещенныеКПолучению = Новый ТаблицаЗначений();
	ЗапрещенныеКПолучению.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ПараметрыКонвертации.ЗапрещенныеКПолучению = ЗапрещенныеКПолучению;
	
	Если ПараметрыКонвертации.СинонимыОбъектовФормата = Неопределено Тогда
		ПараметрыКонвертации.СинонимыОбъектовФормата = Новый Структура;
	КонецЕсли;
	
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Если ПараметрыКонвертации.ПутевыеЛисты_ВидРасходаГСМ = Неопределено Тогда
			ПараметрыКонвертации.ПутевыеЛисты_ВидРасходаГСМ = 0;
		КонецЕсли;
		Если ПараметрыКонвертации.ПутевыеЛисты_ДатаДокумента = Неопределено Тогда
			ПараметрыКонвертации.ПутевыеЛисты_ДатаДокумента = 0;
		КонецЕсли;
		Если ПараметрыКонвертации.ЗаказыНаТС_ГеокодироватьПункты = Неопределено Тогда
			ПараметрыКонвертации.ЗаказыНаТС_ГеокодироватьПункты = Ложь;
		КонецЕсли;
		Если ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента = Неопределено Тогда
			ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента = Ложь;
		КонецЕсли;
		Если ПараметрыКонвертации.ЗаказыНаТС_ИспользоватьАвтоматическуюНумерацию = Неопределено Тогда
			ПараметрыКонвертации.ЗаказыНаТС_ИспользоватьАвтоматическуюНумерацию = Ложь;
		КонецЕсли;
	Иначе
		Если Не КомпонентыОбмена.УзелКорреспондента = Неопределено И ЗначениеЗаполнено(КомпонентыОбмена.УзелКорреспондента) Тогда 
			ПараметрыКонвертации.ПутевыеЛисты_ВидРасходаГСМ     = КомпонентыОбмена.УзелКорреспондента.ПутевыеЛисты_ВидРасходаГСМ;
			ПараметрыКонвертации.ПутевыеЛисты_ДатаДокумента     = КомпонентыОбмена.УзелКорреспондента.ПутевыеЛисты_ДатаДокумента;
			ПараметрыКонвертации.ЗаказыНаТС_ГеокодироватьПункты = КомпонентыОбмена.УзелКорреспондента.ЗаказыНаТС_ГеокодироватьПункты;
			ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента = КомпонентыОбмена.УзелКорреспондента.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента;
			
			Для Каждого ТекСтрока Из КомпонентыОбмена.УзелКорреспондента.ЗапрещенныеКОтправке Цикл 
				НовСтрока = ПараметрыКонвертации.ЗапрещенныеКОтправке.Добавить();
				НовСтрока.Имя = ТекСтрока.Имя;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из КомпонентыОбмена.УзелКорреспондента.ЗапрещенныеКПолучению Цикл 
				НовСтрока = ПараметрыКонвертации.ЗапрещенныеКПолучению.Добавить();
				НовСтрока.Имя = ТекСтрока.Имя;
			КонецЦикла;
			
			Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
				ОтключитьНеиспользуемыеДляПолученияПОД(КомпонентыОбмена);
				ПараметрыКонвертации.ПроводитьЗаказыНаТС                  = КомпонентыОбмена.УзелКорреспондента.ПроводитьЗаказыНаТС;
				ПараметрыКонвертации.ПроводитьФинансовыеДокументы         = КомпонентыОбмена.УзелКорреспондента.ПроводитьФинансовыеДокументы;
				ПараметрыКонвертации.ПроводитьПоступленияМатериаловИУслуг = КомпонентыОбмена.УзелКорреспондента.ПроводитьПоступленияМатериаловИУслуг;
				ПараметрыКонвертации.Поступления_ОтражениеВУчете          = КомпонентыОбмена.УзелКорреспондента.Поступления_ОтражениеВУчете;
				ПараметрыКонвертации.ЗаказыНаТС_ИспользоватьАвтоматическуюНумерацию = КомпонентыОбмена.УзелКорреспондента.ЗаказыНаТС_ИспользоватьАвтоматическуюНумерацию;
				ПараметрыКонвертации.СинонимыОбъектовФормата              = ПолучитьСинонимыОбъектовФормата(КомпонентыОбмена.УзелКорреспондента.ВариантНастройки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений();
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена      - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - см. ОбменДаннымиXDTOСервер.ТаблицаПравилОбработкиДанных
//
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыдачаРасходныхМатериалов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗаправкаГСМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ОперацииСТЖ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПутевыеЛисты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РемонтныеЛисты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_СливГСМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОсновныеСредства_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_уатПараметрыВыработки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиентаВЗаказНаТС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщикуВЗаказНаТС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваровВЗаказНаТС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслугВЗаказНаТС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмеренияУпаковки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
	
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатАвансовыйОтчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("АвансовыйОтчет", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_АвансовыйОтчет_Отправка = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_АвансовыйОтчет_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
			
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатАвансовыйОтчетРасходы.Валюта КАК Валюта,
		|	уатАвансовыйОтчетРасходы.Курс КАК Курс,
		|	уатАвансовыйОтчетРасходы.Кратность КАК Кратность,
		|	уатАвансовыйОтчетРасходы.Ссылка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
		|	уатАвансовыйОтчетРасходы.Контрагент КАК Поставщик,
		|	уатАвансовыйОтчетРасходы.СтатьяРасходов КАК СтатьяЗатрат,
		|	уатАвансовыйОтчетРасходы.ДокументРасхода КАК ДокументРасхода,
		|	уатАвансовыйОтчетРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	уатАвансовыйОтчетРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	уатАвансовыйОтчетРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента,
		|	уатАвансовыйОтчетРасходы.Сумма КАК Сумма,
		|	уатАвансовыйОтчетРасходы.СтавкаНДС КАК СтавкаНДС,
		|	уатАвансовыйОтчетРасходы.СуммаНДС КАК СуммаНДС,
		|	уатАвансовыйОтчетРасходы.СуммаВключаетНДС КАК СуммаВключаетНДС
		|ИЗ
		|	Документ.уатАвансовыйОтчет.Расходы КАК уатАвансовыйОтчетРасходы
		|ГДЕ
		|	уатАвансовыйОтчетРасходы.Ссылка = &Ссылка
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	Валюта";
		
		ВыборкаВалюта = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаВалюта.Следующий() Цикл
			НастройкиПользователя = Новый Структура();
			НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
			НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.Подразделение);
			
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Организация, Ответственный, СуммаВключаетНДС");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
			ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
			ДанныеИБСтруктура.Вставить("Подразделение",    ДанныеИБ.Подразделение);
			ДанныеИБСтруктура.Вставить("Сумма",            ВыборкаВалюта.Сумма);
			ДанныеИБСтруктура.Вставить("ПодотчетноеЛицо",  ДанныеИБ.ПодотчетноеЛицо);
			ДанныеИБСтруктура.Вставить("Валюта", ДанныеИБ.ВалютаДокумента);
			ДанныеИБСтруктура.Вставить("КурсДокумента", ДанныеИБ.Курс);
			ДанныеИБСтруктура.Вставить("КратностьДокумента", ДанныеИБ.Кратность);
			ДанныеИБСтруктура.Вставить("СуммаВключаетНДС", Ложь);
			
			УчитыватьНДСПоУмолчанию = НалогообложениеПродавцаПоСтроке("", НастройкиПользователя.Организация);
			ДанныеИБСтруктура.Вставить("УчитыватьНДС", УчитыватьНДСПоУмолчанию);
			
			ТаблицаРасходы = Новый ТаблицаЗначений();
			ТаблицаРасходы.Колонки.Добавить("Поставщик");
			ТаблицаРасходы.Колонки.Добавить("СтатьяЗатрат");
			ТаблицаРасходы.Колонки.Добавить("Сумма");
			ТаблицаРасходы.Колонки.Добавить("НомерВходящегоДокумента");
			ТаблицаРасходы.Колонки.Добавить("ДатаВходящегоДокумента");
			ТаблицаРасходы.Колонки.Добавить("НаименованиеВходящегоДокумента");
			ТаблицаРасходы.Колонки.Добавить("Содержание");
			ТаблицаРасходы.Колонки.Добавить("СтавкаНДС");
			ТаблицаРасходы.Колонки.Добавить("СуммаНДС");
						
			ВыборкаДетальныеЗаписи = ВыборкаВалюта.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
				НоваяСтрока = ТаблицаРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				
				Если ДанныеИБ.Мультивалютный Тогда
					ДанныеИБСтруктура.Вставить("Валюта", ВыборкаДетальныеЗаписи.Валюта);
					ДанныеИБСтруктура.Вставить("КурсДокумента", ВыборкаДетальныеЗаписи.Курс);
					ДанныеИБСтруктура.Вставить("КратностьДокумента", ВыборкаДетальныеЗаписи.Кратность);
				КонецЕсли;
				
				ДанныеИБСтруктура.Вставить("СуммаВключаетНДС", ВыборкаДетальныеЗаписи.СуммаВключаетНДС);
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументРасхода) Тогда 
					НоваяСтрока.НомерВходящегоДокумента        = ВыборкаДетальныеЗаписи.ДокументРасхода.Номер;
					НоваяСтрока.ДатаВходящегоДокумента         = ВыборкаДетальныеЗаписи.ДокументРасхода.Дата;
					НоваяСтрока.НаименованиеВходящегоДокумента = Строка(ВыборкаДетальныеЗаписи.ДокументРасхода);
					НоваяСтрока.Содержание                     = Строка(ВыборкаДетальныеЗаписи.ДокументРасхода);
				Иначе 
					НоваяСтрока.НомерВходящегоДокумента        = ВыборкаДетальныеЗаписи.НомерВходящегоДокумента;
					НоваяСтрока.ДатаВходящегоДокумента         = ВыборкаДетальныеЗаписи.ДатаВходящегоДокумента;
					НоваяСтрока.НаименованиеВходящегоДокумента = ВыборкаДетальныеЗаписи.НаименованиеВходящегоДокумента;
					НоваяСтрока.Содержание                     = ВыборкаДетальныеЗаписи.НаименованиеВходящегоДокумента;
				КонецЕсли;
				
				Если НоваяСтрока.Сумма = 0 Тогда
					НоваяСтрока.Сумма = 0.01;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеИБСтруктура.Вставить("ПрочиеРасходы", ТаблицаРасходы);
			
		    ВнешнийИдентификатор = НайтиСоздатьВнешнийИдентификатор(
				ДанныеИБ.Ссылка,
				Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_АвансовыйОтчет,
				ДанныеИБСтруктура.Валюта);
			ДанныеИБСтруктура.Вставить("ВнешнийИдентификатор", Документы.уатАвансовыйОтчет.ПолучитьСсылку(ВнешнийИдентификатор));
			
			Если ТаблицаРасходы.Количество() Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
			КонецЕсли;
		КонецЦикла;
		
		// Документ будет выгружаться как структура, поэтому выгрузка его как документа не требуется
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваров_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатВозвратТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ВозвратТоваров", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыдачаРасходныхМатериалов_Отправка
Процедура ДобавитьПОД_Документ_ВыдачаРасходныхМатериалов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыдачаРасходныхМатериалов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатВыдачаРасходныхМатериалов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВыдачаРасходныхМатериалов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_ВыдачаРасходныхМатериалов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ВыдачаРасходныхМатериалов_ПередМатВПроизводство", "Имя") = Неопределено Тогда
		ИспользованиеПКО.ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка = Истина;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ВыдачаРасходныхМатериалов_ПередМатВЭксплуатацию", "Имя") = Неопределено Тогда
		ИспользованиеПКО.ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатИнвентаризацияТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваровВПересчет_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ИнвентаризацияТоваров", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ИнвентаризацияТоваров_Отправка = Истина;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ИнвентаризацияТоваровВПересчетТоваров", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ИнвентаризацияТоваровВПересчет_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДС_Отправка
Процедура ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк");
	
КонецПроцедуры

Процедура ПОД_Документ_ПБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если (ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ВозвратОтПоставщика)
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеВходящее_ОплатаПокупателя", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПриходДенежныхСредствПрочее
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеВходящее_ПриходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПрочиеРасчетыСКонтрагентами
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеВходящее_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ВозвратОтПодотчетника
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеВходящее_ВозвратОтПодотчетника", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк = Истина;
		
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПеремещениеТоваров", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКО_Отправка
Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если (ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ВозвратОтПоставщика)
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПриходныйКассовыйОрдер_ОплатаПокупателя", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ПриходДенежныхСредствПрочее
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПриходныйКассовыйОрдер_ПриходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПриходныйКассовыйОрдер_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ВозвратОтПодотчетника
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПриходныйКассовыйОрдер_ВозвратОтПодотчетника", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка = Истина;
		
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПоступлениеТоваровУслуг", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатРеализацияУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РеализацияУслуг", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_РКО_Отправка
Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Подотчет_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийРКО.ОплатаПоставщику
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РасходныйКассовыйОрдер_ОплатаПоставщику", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийРКО.РасходДенежныхСредствПрочее
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РасходныйКассовыйОрдер_РасходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РасходныйКассовыйОрдер_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
	
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийРКО.ВыдачаПодотчетнику
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РасходныйКассовыйОрдер_ВыдачаПодотчетнику", "Имя") = Неопределено Тогда
	
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Подотчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийРКО.ВозвратПокупателю
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РасходныйКассовыйОрдер_ВозвратПокупателю", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДС_Отправка
Процедура ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк");
	
КонецПроцедуры

Процедура ПОД_Документ_СБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеИсходящее_ОплатаПоставщику", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеИсходящее_РасходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеИсходящее_ПереводНаДругойСчет", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеИсходящее_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ВыдачаПодотчетнику
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеИсходящее_ВыдачаПодотчетнику", "Имя") = Неопределено Тогда
	
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПлатежноеПоручениеИсходящее_ВозвратПокупателю", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатСписаниеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СписаниеТоваров", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплатуПокупателю_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатСчетНаОплатуПокупателю;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПокупателю_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПокупателюВЗаказ_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СчетНаОплатуПокупателю_ВСчетПокупателю", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СчетНаОплатуПокупателю_Отправка = Истина;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СчетНаОплатуПокупателю_ВЗаказКлиента", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СчетПокупателюВЗаказ_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПоставщика_Отправка
Процедура ДобавитьПОД_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплатуПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатСчетНаОплатуПоставщика;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетНаОплатуПоставщика_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПоставщика_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщикаВЗаказ_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_СчетНаОплатуПоставщика_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СчетНаОплатуПоставщика_ВСчетПоставщика", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СчетНаОплатуПоставщика_Отправка = Истина;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СчетНаОплатуПоставщика_ВЗаказПоставщику", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СчетПоставщикаВЗаказ_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатТТД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ТТД", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка = Истина;
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
	
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_Отправка
Процедура ДобавитьПОД_ЗаправкаГСМ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗаправкаГСМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатЗаправкаГСМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_ЗаправкаГСМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаправкаГСМ_в_АвансовыйОтчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЗаправкаГСМ_в_СписаниеЗапасов_Отправка");
	
КонецПроцедуры

Процедура ПОД_ЗаправкаГСМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.ИспользуемоеПКО = "ЗаправкаГСМ_в_АвансовыйОтчет_Отправка" Тогда
			ИспользованиеПКО.ЗаправкаГСМ_в_АвансовыйОтчет_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка" Тогда
			ИспользованиеПКО.ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка" Тогда
			ИспользованиеПКО.ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ЗаправкаГСМ_в_СписаниеЗапасов_Отправка" Тогда
			ИспользованиеПКО.ЗаправкаГСМ_в_СписаниеЗапасов_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка" Тогда
			ИспользованиеПКО.ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка" Тогда
			ИспользованиеПКО.ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка = Истина;
		КонецЕсли;
		
		УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("ЗаправкаГСМ_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		Если ДанныеИБ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад 
			Или ДанныеИБ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад 
			Или ДанныеИБ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
			Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон); 
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаправкаГСМЗаправки.ГСМ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
			|				ИЛИ уатЗаправкаГСМЗаправки.Плотность = 0
			|			ТОГДА уатЗаправкаГСМЗаправки.Количество
			|		ИНАЧЕ уатЗаправкаГСМЗаправки.Количество * уатЗаправкаГСМЗаправки.Плотность
			|	КОНЕЦ КАК Количество,
			|	уатЗаправкаГСМЗаправки.Сумма,
			|	уатЗаправкаГСМЗаправки.СтавкаНДС,
			|	уатЗаправкаГСМЗаправки.Цена
			|ИЗ
			|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
			|ГДЕ
			|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
			
			флВыгрузкаВПередачаМатериаловВПрВо     = Истина;
			флВыгрузкаВПередачаМатериаловВЭксплуат = Истина;
			флВыгрузкаВПеремещение                 = Истина;
			флВыгрузкаВСписаниеЗапасов             = Истина;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ЗаправкаГСМ_СкладТалон_ПередМатВПроизводство", "Имя") = Неопределено Тогда
				флВыгрузкаВПередачаМатериаловВПрВо = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ЗаправкаГСМ_СкладТалон_ПередМатВЭксплуатацию", "Имя") = Неопределено Тогда
				флВыгрузкаВПередачаМатериаловВЭксплуат = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ЗаправкаГСМ_СкладТалон_СписаниеЗапасов", "Имя") = Неопределено Тогда
				флВыгрузкаВСписаниеЗапасов = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ЗаправкаГСМ_СкладТалон_Перемещение", "Имя") = Неопределено Тогда
				флВыгрузкаВПеремещение = Ложь;
			КонецЕсли;
			
			Если флВыгрузкаВПередачаМатериаловВПрВо Или флВыгрузкаВПередачаМатериаловВЭксплуат Или флВыгрузкаВСписаниеЗапасов Тогда
				НастройкиПользователя = Новый Структура();
				НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
				НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.ПодразделениеОрганизации);
				СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				
				ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, УчитыватьНДС");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "з"));
				
				ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
				
				ДанныеИБСтруктура.Вставить("Подразделение", ДанныеИБ.ПодразделениеОрганизации);
				ДанныеИБСтруктура.Вставить("Склад", СкладДляПеремещенияГСМ);
				
				Если флВыгрузкаВПередачаМатериаловВПрВо Тогда
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатЗаправкаГСМ.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВПроизводство)));
				ИначеЕсли флВыгрузкаВПередачаМатериаловВЭксплуат Тогда
				    ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатЗаправкаГСМ.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВЭксплуатацию)));
				Иначе 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ЗаправкаГСМ_в_СписаниеЗапасов_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатЗаправкаГСМ.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_СписаниеЗапасов)));
				КонецЕсли;
				
				ТаблицаТоваров = Новый ТаблицаЗначений();
				ТаблицаТоваров.Колонки.Добавить("Номенклатура");
				ТаблицаТоваров.Колонки.Добавить("Количество");
				ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
				ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					НоваяСтрока.Количество = Выборка.Количество;
					НоваяСтрока.ТипЗапасов = "Топливо";
					НоваяСтрока.ЕдиницаИзмерения = Выборка.Номенклатура.ЕдиницаИзмерения;
				КонецЦикла;
				
				ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
				
				Если ТаблицаТоваров.Количество() Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
				КонецЕсли;
				
			ИначеЕсли флВыгрузкаВПеремещение Тогда
				НастройкиПользователя = Новый Структура();
				НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
				НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.ПодразделениеОрганизации);
				СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				Если НЕ ЗначениеЗаполнено(СкладДляПеремещенияГСМ) Тогда
					ТекстСообщения = СтрШаблон("Не заполнено значение настройки ""Склад для перемещения ГСМ"" для организации ""%1""", ДанныеИБ.Организация);
					ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстСообщения, КомпонентыОбмена,
						УровеньЖурналаРегистрации.Ошибка, ДанныеИБ.Ссылка);
				КонецЕсли;
				
				ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить(
					"ВнешнийИдентификатор",
					Документы.уатЗаправкаГСМ.ПолучитьСсылку(
						НайтиСоздатьВнешнийИдентификатор(
							ДанныеИБ.Ссылка,
							Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПеремещениеТоваров)));
				
				ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "з"));
				
				ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
				
				ДанныеИБСтруктура.Вставить("СкладОтправитель", ДанныеИБ.АЗС.Контрагент_Склад);
				ДанныеИБСтруктура.Вставить("СкладПолучатель",  СкладДляПеремещенияГСМ);
				
				ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка");
				
				ТаблицаТоваров = Новый ТаблицаЗначений();
				ТаблицаТоваров.Колонки.Добавить("Номенклатура");
				ТаблицаТоваров.Колонки.Добавить("Количество");
				ТаблицаТоваров.Колонки.Добавить("СуммаВРознице");
				ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");
				ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
				ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
				ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					Если Выборка.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					НоваяСтрока.Количество = ?(Выборка.Количество=0,1,Выборка.Количество);
					НоваяСтрока.СуммаВРознице = Выборка.Сумма;
					НоваяСтрока.СтавкаНДСВРознице = Выборка.СтавкаНДС;
					НоваяСтрока.ЦенаВРознице = ?(Выборка.Цена=0,1,Выборка.Цена);
					НоваяСтрока.ТипЗапасов = "Топливо";
					НоваяСтрока.ЕдиницаИзмерения = Выборка.Номенклатура.ЕдиницаИзмерения;
				КонецЦикла;
				
				ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
				
				Если ТаблицаТоваров.Количество() Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеИБ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
			флВыгрузкаЗаНаличные = Истина;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ЗаправкаГСМ_Наличные", "Имя") = Неопределено Тогда
				флВыгрузкаЗаНаличные = Ложь;
			КонецЕсли;
			
			Если флВыгрузкаЗаНаличные Тогда 
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаправкаГСМЗаправки.Водитель.ФизическоеЛицо КАК ПодотчетноеЛицо,
				|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
				|	уатЗаправкаГСМЗаправки.ГСМ КАК Номенклатура,
				|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
				|	уатЗаправкаГСМЗаправки.Цена КАК Цена,
				|	уатЗаправкаГСМЗаправки.Сумма КАК Сумма,
				|	уатЗаправкаГСМЗаправки.СтавкаНДС КАК СтавкаНДС,
				|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС
				|ИЗ
				|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
				|ГДЕ
				|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка
				|ИТОГИ
				|	СУММА(Сумма)
				|ПО
				|	ПодотчетноеЛицо,
				|	Валюта";
				
				ВыборкаПодотчетноеЛицо = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПодотчетноеЛицо.Следующий() Цикл 
					ВыборкаВалюта = ВыборкаПодотчетноеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВалюта.Следующий() Цикл 
						НастройкиПользователя = Новый Структура();
						НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
						НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.ПодразделениеОрганизации);
						СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
						
						ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, СуммаВключаетНДС, УчитыватьНДС");
						ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
						
						ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
						
						ДанныеИБСтруктура.Вставить(
							"ВнешнийИдентификатор",
							Документы.уатЗаправкаГСМ.ПолучитьСсылку(
								НайтиСоздатьВнешнийИдентификатор(
									ДанныеИБ.Ссылка,
									Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_АвансовыйОтчет,
									ВыборкаВалюта.Валюта,
									ВыборкаВалюта.ПодотчетноеЛицо)));
						
						ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "з"));
						
						ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
						
						ДанныеИБСтруктура.Вставить("Подразделение",    ДанныеИБ.ПодразделениеОрганизации);
						ДанныеИБСтруктура.Вставить("Склад",            СкладДляПеремещенияГСМ);
						ДанныеИБСтруктура.Вставить("Валюта",           ВыборкаВалюта.Валюта);
						ДанныеИБСтруктура.Вставить("Сумма",            ВыборкаВалюта.Сумма);
						ДанныеИБСтруктура.Вставить("ПодотчетноеЛицо",  ВыборкаВалюта.ПодотчетноеЛицо);
						ДанныеИБСтруктура.Вставить("НазначениеАванса", "Заправка автомобиля ГСМ");
						
						ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ЗаправкаГСМ_в_АвансовыйОтчет_Отправка");
						
						ТаблицаТоваров = Новый ТаблицаЗначений();
						ТаблицаТоваров.Колонки.Добавить("Номенклатура");
						ТаблицаТоваров.Колонки.Добавить("Количество");
						ТаблицаТоваров.Колонки.Добавить("Сумма");
						ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
						ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
						ТаблицаТоваров.Колонки.Добавить("Цена");
						ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
						ТаблицаТоваров.Колонки.Добавить("Поставщик");
						
						ВыборкаДетальныеЗаписи = ВыборкаВалюта.Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
							Если ВыборкаДетальныеЗаписи.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							НоваяСтрока = ТаблицаТоваров.Добавить();
							НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
							НоваяСтрока.Количество = ?(ВыборкаДетальныеЗаписи.Количество=0,1,ВыборкаДетальныеЗаписи.Количество);
							НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
							Если ДанныеИБ.УчитыватьНДС Тогда
								НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
							Иначе
							    НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							КонецЕсли;
							НоваяСтрока.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаНДС;
							НоваяСтрока.Цена = ?(ВыборкаДетальныеЗаписи.Цена=0, 1, ВыборкаДетальныеЗаписи.Цена);
							НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Номенклатура.ЕдиницаИзмерения;
							НоваяСтрока.Поставщик = ДанныеИБ.АЗС.Контрагент_Склад;
						КонецЦикла;
						
						ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
						
						Если ТаблицаТоваров.Количество() Тогда
							ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ДанныеИБ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Или ДанныеИБ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта Тогда
			флВыгрузкаОтПоставщика = Истина;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ЗаправкаГСМ_Поставщик", "Имя") = Неопределено Тогда
				флВыгрузкаОтПоставщика = Ложь;
			КонецЕсли;
			
			Если флВыгрузкаОтПоставщика Тогда 
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
				|	уатЗаправкаГСМЗаправки.ГСМ КАК Номенклатура,
				|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
				|	уатЗаправкаГСМЗаправки.Цена КАК Цена,
				|	уатЗаправкаГСМЗаправки.Сумма КАК Сумма,
				|	уатЗаправкаГСМЗаправки.СтавкаНДС КАК СтавкаНДС,
				|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС
				|ИЗ
				|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
				|ГДЕ
				|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка
				|ИТОГИ
				|	СУММА(Сумма)
				|ПО
				|	Валюта";
				
				ВыборкаВалюта = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВалюта.Следующий() Цикл 
					НастройкиПользователя = Новый Структура();
					НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
					НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.ПодразделениеОрганизации);
					СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
					
					ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, СуммаВключаетНДС");
					ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
					
					ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
					
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатЗаправкаГСМ.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПоступлениеТоваровУслуг,
								ВыборкаВалюта.Валюта)));
					
					ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "з"));
					
					ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
					
					ДанныеИБСтруктура.Вставить("Подразделение", ДанныеИБ.ПодразделениеОрганизации);
					ДанныеИБСтруктура.Вставить("Контрагент",    ДанныеИБ.АЗС.Контрагент_Склад);
					ДанныеИБСтруктура.Вставить("Договор",       ДанныеИБ.ДоговорКонтрагента);
					ДанныеИБСтруктура.Вставить("Склад",         СкладДляПеремещенияГСМ);
					ДанныеИБСтруктура.Вставить("Валюта",        ВыборкаВалюта.Валюта);
					ДанныеИБСтруктура.Вставить("Сумма",         ВыборкаВалюта.Сумма);
					
					ДанныеИБСтруктура.Вставить("ВалютаВзаиморасчетов",    ВыборкаВалюта.Валюта);
					ДанныеИБСтруктура.Вставить("КурсВзаиморасчетов",      1);
					ДанныеИБСтруктура.Вставить("КратностьВзаиморасчетов", 1);
					
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка");
					
					ТаблицаТоваров = Новый ТаблицаЗначений();
					ТаблицаТоваров.Колонки.Добавить("Номенклатура");
					ТаблицаТоваров.Колонки.Добавить("Количество");
					ТаблицаТоваров.Колонки.Добавить("Сумма");
					ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
					ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
					ТаблицаТоваров.Колонки.Добавить("Цена");
					ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
					
					ВыборкаДетальныеЗаписи = ВыборкаВалюта.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
						Если ВыборкаДетальныеЗаписи.Сумма = 0 Тогда
							Продолжить;
						КонецЕсли;
						НоваяСтрока = ТаблицаТоваров.Добавить();
						НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
						НоваяСтрока.Количество = ?(ВыборкаДетальныеЗаписи.Количество=0,1,ВыборкаДетальныеЗаписи.Количество);
						НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.Сумма;
						Если ДанныеИБ.УчитыватьНДС Тогда
							НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
						Иначе
						    НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						КонецЕсли;
						НоваяСтрока.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаНДС;
						НоваяСтрока.Цена = ?(ВыборкаДетальныеЗаписи.Цена=0, 1, ВыборкаДетальныеЗаписи.Цена);
						НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Номенклатура.ЕдиницаИзмерения;
					КонецЦикла;
					
					ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
					
					Если ТаблицаТоваров.Количество() Тогда
						ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Документ будет выгружаться как структура, поэтому выгрузка его как документа не требуется
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ЗначенияДопРеквизитов_Отправка
Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
	
КонецПроцедуры
#КонецОбласти
#Область НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка
Процедура ДобавитьПОД_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатНачислениеЗарплаты;
	ПравилоОбработки.ПриОбработке            = "ПОД_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка");
	
КонецПроцедуры

Процедура ПОД_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("НачислениеЗарплаты", "Имя") = Неопределено Тогда
		ИспользованиеПКО.НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка = Истина;
	Иначе	
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		ДанныеИБСтруктура = Новый Структура("Номер,Дата,Организация,Ответственный,ПериодРегистрации");
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		
		ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
	
		ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
		
		НачисленнаяЗарплатаИВзносы = Новый ТаблицаЗначений();
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("Сумма");
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("Подразделение");
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ФизическоеЛицо");
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ВидОперации");
		
		Для Каждого ТекСтрока Из ДанныеИБ.Начисления Цикл 
			Если Не ЗначениеЗаполнено(ТекСтрока.ПодразделениеОрганизации) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = НачисленнаяЗарплатаИВзносы.Добавить();
			НоваяСтрока.Сумма = ТекСтрока.Результат;
			НоваяСтрока.Подразделение = ТекСтрока.ПодразделениеОрганизации;
			НоваяСтрока.ФизическоеЛицо = ТекСтрока.Сотрудник.ФизическоеЛицо;
			НоваяСтрока.ВидОперации = "НачисленоДоход";
		КонецЦикла;
		
		ДанныеИБСтруктура.Вставить("НачисленнаяЗарплатаИВзносы", НачисленнаяЗарплатаИВзносы);
		
		Если НачисленнаяЗарплатаИВзносы.Количество() Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
		КонецЕсли;
		
		// Документ будет выгружаться как структура, поэтому выгрузка его как документа не требуется
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ОперацииСТЖ_Отправка
Процедура ДобавитьПОД_ОперацииСТЖ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ОперацииСТЖ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатОперацииСТехническимиЖидкостями;
	ПравилоОбработки.ПриОбработке            = "ПОД_ОперацииСТЖ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка");
	
КонецПроцедуры

Процедура ПОД_ОперацииСТЖ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	ОперацияДолив = ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее;
	
	Если ОперацияДолив
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ОперацииСТехническимиЖидкостями_ПередМатВПроизводство", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка = Истина;
		
	КонецЕсли;
	
	Если ОперацияДолив
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ОперацииСТехническимиЖидкостями_ПередМатВЭксплуатацию", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка = Истина;
		
	КонецЕсли;
	
	Если ОперацияДолив
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ОперацииСТехническимиЖидкостями_ПеремещениеТоваров", "Имя") = Неопределено Тогда
		
		ИспользованиеПКО.ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка = Истина;
		
	КонецЕсли;
	
	УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
КонецПроцедуры
#КонецОбласти
#Область ПутевыеЛисты_Отправка
Процедура ДобавитьПОД_ПутевыеЛисты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПутевыеЛисты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатПутевойЛист;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПутевыеЛисты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПутЛист_ВыработкаСотрудников_Отправка");
	
КонецПроцедуры

Процедура ПОД_ПутевыеЛисты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.ИспользуемоеПКО = "ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка" Тогда
			ИспользованиеПКО.ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка" Тогда
			ИспользованиеПКО.ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка" Тогда
			ИспользованиеПКО.ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "ПутЛист_ВыработкаСотрудников_Отправка" Тогда
			ИспользованиеПКО.ПутЛист_ВыработкаСотрудников_Отправка = Истина;
		КонецЕсли;
		
		УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("ПутевыеЛисты_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		флВыгрузкаВСписание              = Истина;
		флВыгрузкаВПередМатВПроизводство = Истина;
		флВыгрузкаВПередМатВЭксплуатацию = Истина;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПутевойЛист_РасходГСМ_Списание", "Имя") = Неопределено Тогда
			флВыгрузкаВСписание = Ложь;
		КонецЕсли;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПутевойЛист_РасходГСМ_ПередМатВПроизводство", "Имя") = Неопределено Тогда
			флВыгрузкаВПередМатВПроизводство = Ложь;
		КонецЕсли;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПутевойЛист_РасходГСМ_ПередМатВЭксплуатацию", "Имя") = Неопределено Тогда
			флВыгрузкаВПередМатВЭксплуатацию = Ложь;
		КонецЕсли;
		
		Если флВыгрузкаВСписание Или флВыгрузкаВПередМатВПроизводство Или флВыгрузкаВПередМатВЭксплуатацию Тогда 
			// Расход ГСМ берем из движений по регистру уатРасходГСМнаТС, а не из ТЧ документа,
			// поскольку могут расходоваться также аналоги ГСМ
			НЗРасходГСМ = ДанныеИБ.Движения.уатРасходГСМнаТС;
			НЗРасходГСМ.Прочитать();
			
			ТабТоваров = НЗРасходГСМ.Выгрузить();
			ТабТоваров.Колонки.ГСМ.Имя = "Номенклатура";
			Если КомпонентыОбмена.ПараметрыКонвертации.ПутевыеЛисты_ВидРасходаГСМ = 1 Тогда
				ТабТоваров.Колонки.РасходПоФакту.Имя = "Количество";
			Иначе
				ТабТоваров.Колонки.РасходПоНорме.Имя = "Количество";
			КонецЕсли;
			ТабТоваров.Свернуть("Номенклатура", "Количество");
			
			// Удаляем строки с нулевым количеством
			Сч = ТабТоваров.Количество()-1;
			Пока Сч >= 0 Цикл
				Если ТабТоваров[Сч].Количество = 0 Тогда
					ТабТоваров.Удалить(Сч);
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
			
			ТабТоваров.Колонки.Добавить("ЕдиницаИзмерения");
			ТабТоваров.Колонки.Добавить("ТипЗапасов");
			Для Каждого ТекСтрока Из ТабТоваров Цикл
				ТекСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
				ТекСтрока.ТипЗапасов = "Топливо";
			КонецЦикла;
			
			Если ТабТоваров.Количество() > 0 Тогда 
				НастройкиПользователя = Новый Структура();
				НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
				НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.Подразделение);
				СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				
				ДанныеИБСтруктура = Новый Структура("Организация, Ответственный, Подразделение");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "п"));
				
				ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
				
				Если КомпонентыОбмена.ПараметрыКонвертации.ПутевыеЛисты_ДатаДокумента = 1 Тогда
					ДанныеИБСтруктура.Вставить("Дата", ДанныеИБ.ДатаЗакрытия);
				Иначе
					ДанныеИБСтруктура.Вставить("Дата", ДанныеИБ.Дата);
				КонецЕсли;
				
				ДанныеИБСтруктура.Вставить("Склад", СкладДляПеремещенияГСМ);
				
				Если флВыгрузкаВСписание Тогда 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатПутевойЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_СписаниеЗапасов)));
				ИначеЕсли флВыгрузкаВПередМатВПроизводство Тогда 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатПутевойЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВПроизводство)));
				Иначе 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатПутевойЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВЭксплуатацию)));
				КонецЕсли;
				
				ДанныеИБСтруктура.Вставить("Товары", ТабТоваров);
	
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
			КонецЕсли;
		КонецЕсли;
		
		флВыгрузкаВыработкиСотрудников = Истина;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("ПутевойЛист_ВыработкаСотрудников", "Имя") = Неопределено Тогда
			флВыгрузкаВыработкиСотрудников = Ложь;
		КонецЕсли;
		
		Если флВыгрузкаВыработкиСотрудников Тогда 
			ДанныеИБСтруктура = Новый Структура("Дата, Организация, Подразделение");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить(
				"ВнешнийИдентификатор",
				Документы.уатПутевойЛист.ПолучитьСсылку(
					НайтиСоздатьВнешнийИдентификатор(
						ДанныеИБ.Ссылка,
						Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ВыработкаСотрудников)));
			
			ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "п"));
			
			ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
			
			ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "ПутЛист_ВыработкаСотрудников_Отправка");
			
			ТаблицаВыполненныхРабот = Новый ТаблицаЗначений();
			ТаблицаВыполненныхРабот.Колонки.Добавить("ФизическоеЛицо");
			ТаблицаВыполненныхРабот.Колонки.Добавить("ВидРабот");
			ТаблицаВыполненныхРабот.Колонки.Добавить("Количество");
			
			ЗапросВыработка = Новый Запрос();
			ЗапросВыработка.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
			ЗапросВыработка.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатПутевойЛистВыработкаСотрудников.Сотрудник КАК Сотрудник,
			|	уатПутевойЛистВыработкаСотрудников.ПараметрВыработки КАК ПараметрВыработки,
			|	СУММА(ВЫБОР
			|			КОГДА уатПараметрыВыработки.Временный
			|				ТОГДА уатПутевойЛистВыработкаСотрудников.Количество / 3600
			|			ИНАЧЕ уатПутевойЛистВыработкаСотрудников.Количество
			|		КОНЕЦ) КАК Количество
			|ИЗ
			|	Документ.уатПутевойЛист.ВыработкаСотрудников КАК уатПутевойЛистВыработкаСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРаботСотрудников
			|			ПО уатПараметрыВыработки.ВидРаботыСотрудника = ВидыРаботСотрудников.Ссылка
			|		ПО уатПутевойЛистВыработкаСотрудников.ПараметрВыработки = уатПараметрыВыработки.Ссылка
			|ГДЕ
			|	уатПутевойЛистВыработкаСотрудников.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	уатПутевойЛистВыработкаСотрудников.Сотрудник,
			|	уатПутевойЛистВыработкаСотрудников.ПараметрВыработки";
			
			ВыборкаВыработка = ЗапросВыработка.Выполнить().Выбрать();
			Пока ВыборкаВыработка.Следующий() Цикл 
				Если Не ЗначениеЗаполнено(ВыборкаВыработка.Сотрудник.ФизическоеЛицо)
						Или Не ЗначениеЗаполнено(ВыборкаВыработка.ПараметрВыработки)
						Или Не ЗначениеЗаполнено(ВыборкаВыработка.Количество) Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяРабота = ТаблицаВыполненныхРабот.Добавить();
				НоваяРабота.ФизическоеЛицо = ВыборкаВыработка.Сотрудник.ФизическоеЛицо;
				НоваяРабота.ВидРабот       = ВыборкаВыработка.ПараметрВыработки;
				НоваяРабота.Количество     = Окр(ВыборкаВыработка.Количество, 3);
			КонецЦикла;
			
			ДанныеИБСтруктура.Вставить("ВыполненныеРаботы", ТаблицаВыполненныхРабот);
			
			Если ТаблицаВыполненныхРабот.Количество() Тогда 
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
			КонецЕсли;
		КонецЕсли;
		
		// Документ будет выгружаться как структура, поэтому выгрузка его как документа не требуется
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область РемонтныеЛисты_Отправка
Процедура ДобавитьПОД_РемонтныеЛисты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РемонтныеЛисты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатРемонтныйЛист;
	ПравилоОбработки.ПриОбработке            = "ПОД_РемонтныеЛисты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_ПередМатериалВПрВо_Собств_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_СписаниеЗапасов_Собств_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_ПоступТоварУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РемЛист_в_ВыработкаСотрудников_Отправка");
	
КонецПроцедуры

Процедура ПОД_РемонтныеЛисты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_ПередМатериалВПрВо_Собств_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_ПередМатериалВПрВо_Собств_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_ПоступТоварУслуг_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_ПоступТоварУслуг_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_ВыработкаСотрудников_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_ВыработкаСотрудников_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_СписаниеЗапасов_Собств_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_СписаниеЗапасов_Собств_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка" Тогда
			ИспользованиеПКО.РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка = Истина;
		КонецЕсли;
		
		УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("РемонтныеЛисты_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		Если ДанныеИБ.СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона И Не ДанныеИБ.Материалы.Количество() = 0 Тогда
			флВыгрузкаРемЗона_ПередМатВПроизводство = Истина;
			флВыгрузкаРемЗона_ПередМатВЭксплуатацию = Истина;
			флВыгрузкаРемЗона_СписаниеЗапасов       = Истина;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_РемЗона_ПередМатВПроизводство", "Имя") = Неопределено Тогда
				флВыгрузкаРемЗона_ПередМатВПроизводство = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_РемЗона_ПередМатВЭксплуатацию", "Имя") = Неопределено Тогда
				флВыгрузкаРемЗона_ПередМатВЭксплуатацию = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_РемЗона_СписаниеЗапасов", "Имя") = Неопределено Тогда
				флВыгрузкаРемЗона_СписаниеЗапасов = Ложь;
			КонецЕсли;
			
			Если флВыгрузкаРемЗона_ПередМатВПроизводство Или флВыгрузкаРемЗона_ПередМатВЭксплуатацию Или флВыгрузкаРемЗона_СписаниеЗапасов Тогда 
				ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, Подразделение, УчитыватьНДС");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "р"));
				
				ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
				
				Если флВыгрузкаРемЗона_ПередМатВПроизводство Тогда 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_ПередМатериалВПрВо_Собств_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатРемонтныйЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВПроизводство)));
				ИначеЕсли флВыгрузкаРемЗона_ПередМатВЭксплуатацию Тогда
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатРемонтныйЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВЭксплуатацию)));
				Иначе
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_СписаниеЗапасов_Собств_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатРемонтныйЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_СписаниеЗапасов)));
				КонецЕсли;
				
				Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Склады") И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
					ДанныеИБСтруктура.Вставить("Склад", ДанныеИБ.Контрагент);
				Иначе
					ДанныеИБСтруктура.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
				КонецЕсли;
				
				ТаблицаТоваров = Новый ТаблицаЗначений();
				ТаблицаТоваров.Колонки.Добавить("Номенклатура");
				ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
				ТаблицаТоваров.Колонки.Добавить("Упаковка");
				ТаблицаТоваров.Колонки.Добавить("Количество");
				ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок");
				ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
				
				Для Каждого ТекСтрока Из ДанныеИБ.Материалы Цикл 
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
					НоваяСтрока.Упаковка = ТекСтрока.ЕдиницаИзмерения;
					НоваяСтрока.Количество = Окр(ТекСтрока.Количество * ТекСтрока.ЕдиницаИзмерения.Коэффициент, 3);
					НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
					НоваяСтрока.ТипЗапасов = "СырьеИМатериалы";
				КонецЦикла;
				
				ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
				
				Если ТаблицаТоваров.Количество() Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеИБ.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис И Не (ДанныеИБ.Материалы.Количество() = 0 И ДанныеИБ.Работы.Количество() = 0 И ДанныеИБ.СобственныеМатериалы.Количество() = 0) Тогда
			флВыгрузкаАвтосервис_ПередМатВПроизводство = Истина;
			флВыгрузкаАвтосервис_ПередМатВЭксплуатацию = Истина;
			флВыгрузкаАвтосервис_СписаниеЗапасов       = Истина;
			флВыгрузкаПоступленияМатериалов            = Истина;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_Автосервис_ПередМатВПроизводство", "Имя") = Неопределено Тогда
				флВыгрузкаАвтосервис_ПередМатВПроизводство = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_Автосервис_ПередМатВЭксплуатацию", "Имя") = Неопределено Тогда
				флВыгрузкаАвтосервис_ПередМатВЭксплуатацию = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_Автосервис_СписаниеЗапасов", "Имя") = Неопределено Тогда
				флВыгрузкаАвтосервис_СписаниеЗапасов = Ложь;
			КонецЕсли;
			
			Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_Автосервис_ПоступлениеМатериалов", "Имя") = Неопределено Тогда
				флВыгрузкаПоступленияМатериалов = Ложь;
			КонецЕсли;
			
			Если флВыгрузкаАвтосервис_ПередМатВПроизводство Или флВыгрузкаАвтосервис_ПередМатВЭксплуатацию Или флВыгрузкаАвтосервис_СписаниеЗапасов Тогда 
				ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, Подразделение, УчитыватьНДС");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "р"));
				
				ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
				
				Если флВыгрузкаАвтосервис_ПередМатВПроизводство Тогда 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатРемонтныйЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВПроизводство)));
				ИначеЕсли флВыгрузкаАвтосервис_ПередМатВЭксплуатацию Тогда 
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатРемонтныйЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПередачаМатериаловВЭксплуатацию)));
				Иначе
					ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка");
					ДанныеИБСтруктура.Вставить(
						"ВнешнийИдентификатор",
						Документы.уатРемонтныйЛист.ПолучитьСсылку(
							НайтиСоздатьВнешнийИдентификатор(
								ДанныеИБ.Ссылка,
								Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_СписаниеЗапасов)));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеИБ.СкладСобственныхМатериалов) Тогда
					ДанныеИБСтруктура.Вставить("Склад", ДанныеИБ.СкладСобственныхМатериалов);
				Иначе
					НастройкиПользователя = Новый Структура();
					НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
					НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.Подразделение);
					СкладДляПеремещенияЗапчастей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияЗапчастей);
					ДанныеИБСтруктура.Вставить("Склад", СкладДляПеремещенияЗапчастей);
				КонецЕсли;
				
				ТаблицаТоваров = Новый ТаблицаЗначений();
				ТаблицаТоваров.Колонки.Добавить("Номенклатура");
				ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
				ТаблицаТоваров.Колонки.Добавить("Упаковка");
				ТаблицаТоваров.Колонки.Добавить("Количество");
				ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок");
				ТаблицаТоваров.Колонки.Добавить("ТипЗапасов");
				
				// Собственные материалы
				Для Каждого ТекСтрока Из ДанныеИБ.СобственныеМатериалы Цикл 
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
					НоваяСтрока.Упаковка = ТекСтрока.ЕдиницаИзмерения;
					НоваяСтрока.Количество = Окр(ТекСтрока.Количество * ТекСтрока.ЕдиницаИзмерения.Коэффициент, 3);
					НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
					НоваяСтрока.ТипЗапасов = "СырьеИМатериалы";
				КонецЦикла;
				
				// Материалы автосервиса
				Для Каждого ТекСтрока Из ДанныеИБ.Материалы Цикл 
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
					НоваяСтрока.Упаковка = ТекСтрока.ЕдиницаИзмерения;
					НоваяСтрока.Количество = Окр(ТекСтрока.Количество * ТекСтрока.ЕдиницаИзмерения.Коэффициент, 3);
					НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
					НоваяСтрока.ТипЗапасов = "СырьеИМатериалы";
				КонецЦикла;
				
				ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
				
				Если ТаблицаТоваров.Количество() Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если флВыгрузкаПоступленияМатериалов Тогда 
				НастройкиПользователя = Новый Структура();
				НастройкиПользователя.Вставить("Организация",   ДанныеИБ.Организация);
				НастройкиПользователя.Вставить("Подразделение", ДанныеИБ.Подразделение);
				СкладДляПеремещенияЗапчастей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияЗапчастей);
				
				ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, Подразделение, Контрагент, СуммаВключаетНДС, НомерВходящегоДокумента, ДатаВходящегоДокумента");
				ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
				
				ДанныеИБСтруктура.Вставить(
					"ВнешнийИдентификатор",
					Документы.уатРемонтныйЛист.ПолучитьСсылку(
						НайтиСоздатьВнешнийИдентификатор(
							ДанныеИБ.Ссылка,
							Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ПоступлениеТоваровУслуг)));
				
				ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "р"));
				
				ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
				
				ДанныеИБСтруктура.Вставить("Валюта",                  ДанныеИБ.ВалютаДокумента);
				ДанныеИБСтруктура.Вставить("ВалютаВзаиморасчетов",    ДанныеИБ.ВалютаДокумента);
				ДанныеИБСтруктура.Вставить("Договор",                 ДанныеИБ.ДоговорКонтрагента);
				ДанныеИБСтруктура.Вставить("КурсВзаиморасчетов",      1);
				ДанныеИБСтруктура.Вставить("КратностьВзаиморасчетов", 1);
				ДанныеИБСтруктура.Вставить("Склад",                   СкладДляПеремещенияЗапчастей);
				
				ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_ПоступТоварУслуг_Отправка");
				
				ТаблицаТоваров = Новый ТаблицаЗначений();
				ТаблицаТоваров.Колонки.Добавить("Номенклатура");
				ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
				ТаблицаТоваров.Колонки.Добавить("Упаковка");
				ТаблицаТоваров.Колонки.Добавить("Количество");
				ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок");
				ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
				ТаблицаТоваров.Колонки.Добавить("Сумма");
				ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
				ТаблицаТоваров.Колонки.Добавить("Цена");
				ТаблицаТоваров.Колонки.Добавить("ЦенаЗаУпаковку");
				
				Для Каждого ТекСтрока Из ДанныеИБ.Материалы Цикл 
					Если ТекСтрока.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаТоваров.Добавить();
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
					НоваяСтрока.Упаковка = ТекСтрока.ЕдиницаИзмерения;
					НоваяСтрока.Количество = Окр(ТекСтрока.Количество * ТекСтрока.ЕдиницаИзмерения.Коэффициент, 3);
					НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
					Если ДанныеИБ.УчитыватьНДС Тогда
						НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
					Иначе
					    НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					КонецЕсли;
					НоваяСтрока.Сумма = ТекСтрока.Сумма;
					НоваяСтрока.СуммаНДС = ТекСтрока.СуммаНДС;
					НоваяСтрока.Цена = ?(ТекСтрока.ЕдиницаИзмерения.Коэффициент = 0, ТекСтрока.Цена, Окр(ТекСтрока.Цена / ТекСтрока.ЕдиницаИзмерения.Коэффициент, 2));
					НоваяСтрока.ЦенаЗаУпаковку = ТекСтрока.Цена;
				КонецЦикла;
				
				ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
				
				ТаблицаУслуг = Новый ТаблицаЗначений();
				ТаблицаУслуг.Колонки.Добавить("Номенклатура");
				ТаблицаУслуг.Колонки.Добавить("Количество");
				ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
				ТаблицаУслуг.Колонки.Добавить("Сумма");
				ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
				ТаблицаУслуг.Колонки.Добавить("Цена");
				
				Для Каждого ТекСтрока Из ДанныеИБ.Работы Цикл 
					Если ТекСтрока.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = ТекСтрока.Работа.Номенклатура;
					НоваяСтрока.Количество = ТекСтрока.Количество;
					Если ДанныеИБ.УчитыватьНДС Тогда
						НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
					Иначе
					    НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					КонецЕсли;
					НоваяСтрока.Сумма = ТекСтрока.Сумма;
					НоваяСтрока.СуммаНДС = ТекСтрока.СуммаНДС;
					НоваяСтрока.Цена = ТекСтрока.Цена;
				КонецЦикла;
				
				ДанныеИБСтруктура.Вставить("Услуги", ТаблицаУслуг);
				
				Если ТаблицаТоваров.Количество() Или ТаблицаУслуг.Количество() Тогда
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		флВыгрузкаВыработкиСотрудников = Истина;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("РемонтныйЛист_ВыработкаСотрудников", "Имя") = Неопределено Тогда
			флВыгрузкаВыработкиСотрудников = Ложь;
		КонецЕсли;
		
		Если флВыгрузкаВыработкиСотрудников Тогда 
			ДанныеИБСтруктура = Новый Структура("Дата, Организация, Подразделение");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить(
				"ВнешнийИдентификатор",
				Документы.уатРемонтныйЛист.ПолучитьСсылку(
					НайтиСоздатьВнешнийИдентификатор(
						ДанныеИБ.Ссылка,
						Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_ВыработкаСотрудников)));
			
			ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "р"));
			
			ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
			
			ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "РемЛист_в_ВыработкаСотрудников_Отправка");
			
			ТаблицаВыполненныхРабот = Новый ТаблицаЗначений();
			ТаблицаВыполненныхРабот.Колонки.Добавить("ФизическоеЛицо");
			ТаблицаВыполненныхРабот.Колонки.Добавить("ВидРабот");
			ТаблицаВыполненныхРабот.Колонки.Добавить("Количество");
			
			ЗапросВыработка = Новый Запрос();
			ЗапросВыработка.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
			ЗапросВыработка.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатРемонтныйЛистИсполнители.Сотрудник КАК Сотрудник,
			|	уатРемонтныйЛистИсполнители.ВремяРаботы КАК ВремяРаботы
			|ИЗ
			|	Документ.уатРемонтныйЛист.Исполнители КАК уатРемонтныйЛистИсполнители
			|ГДЕ
			|	уатРемонтныйЛистИсполнители.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	Сотрудник";
			
			Если ЗначениеЗаполнено(Справочники.уатПараметрыВыработки.ВремяВРемонте.ВидРаботыСотрудника) Тогда 
				ВыборкаСотрудники = ЗапросВыработка.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСотрудники.Следующий() Цикл 
					Если Не ЗначениеЗаполнено(ВыборкаСотрудники.Сотрудник.ФизическоеЛицо) Тогда 
						Продолжить;
					КонецЕсли;
					
					КоличествоЧасов = 0;
					ВыборкаВремя = ВыборкаСотрудники.Выбрать();
					Пока ВыборкаВремя.Следующий() Цикл 
						ВремяСек = ВыборкаВремя.ВремяРаботы - '00010101';
						КоличествоЧасов = КоличествоЧасов + (ВремяСек / 3600);
					КонецЦикла;
					
					Если Не ЗначениеЗаполнено(КоличествоЧасов) Тогда 
						Продолжить;
					КонецЕсли;
					
					НоваяРабота = ТаблицаВыполненныхРабот.Добавить();
					НоваяРабота.ФизическоеЛицо = ВыборкаСотрудники.Сотрудник.ФизическоеЛицо;
					НоваяРабота.ВидРабот       = Справочники.уатПараметрыВыработки.ВремяВРемонте;
					НоваяРабота.Количество     = Окр(КоличествоЧасов, 3);
				КонецЦикла;
			КонецЕсли;
			
			ДанныеИБСтруктура.Вставить("ВыполненныеРаботы", ТаблицаВыполненныхРабот);
			
			Если ТаблицаВыполненныхРабот.Количество() Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
			КонецЕсли;
		КонецЕсли;
		
		// Документ будет выгружаться как структура, поэтому выгрузка его как документа не требуется
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область СливГСМ_Отправка
Процедура ДобавитьПОД_СливГСМ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "СливГСМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.уатСливГСМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_СливГСМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("СливГСМ_в_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("СливГСМ_в_ВозвратТоваровПоставщику_Отправка");
	
КонецПроцедуры

Процедура ПОД_СливГСМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.ИспользуемоеПКО = "СливГСМ_в_ПеремещениеТоваров_Отправка" Тогда
			ИспользованиеПКО.СливГСМ_в_ПеремещениеТоваров_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ИспользуемоеПКО = "СливГСМ_в_ВозвратТоваровПоставщику_Отправка" Тогда
			ИспользованиеПКО.СливГСМ_в_ВозвратТоваровПоставщику_Отправка = Истина;
		КонецЕсли;
		
		УдалитьНеиспользуемыеПКО(ИспользованиеПКО); // Для правил, которые не используются, не требуется выгружать удаление объектов
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("СливГСМ_Отправка", "Имя");
	Если Не ПравилоОбработки = Неопределено Тогда
		флВыгрузкаНаАЗС   = Истина;
		флВыгрузкаНаСклад = Истина;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СливГСМ_НаАЗС", "Имя") = Неопределено Тогда
			флВыгрузкаНаАЗС = Ложь;
		КонецЕсли;
		
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СливГСМ_НаСклад", "Имя") = Неопределено Тогда
			флВыгрузкаНаСклад = Ложь;
		КонецЕсли;
		
		Если флВыгрузкаНаСклад И ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаСклад Тогда
			ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "с"));
			
			ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
			
			ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "СливГСМ_в_ПеремещениеТоваров_Отправка");
			
			СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДанныеИБ.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			Если НЕ ЗначениеЗаполнено(СкладДляПеремещенияГСМ) Тогда
				ТекстСообщения = СтрШаблон("Не заполнено значение настройки ""Склад для перемещения ГСМ"" для организации ""%1""", ДанныеИБ.Организация);
				ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстСообщения, КомпонентыОбмена,
					УровеньЖурналаРегистрации.Ошибка, ДанныеИБ.Ссылка);
			КонецЕсли;
			ДанныеИБСтруктура.Вставить("СкладОтправитель", СкладДляПеремещенияГСМ);
			
			Если ТипЗнч(ДанныеИБ.АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Склады") Тогда
				ДанныеИБСтруктура.Вставить("СкладПолучатель", ДанныеИБ.АЗС.Контрагент_Склад);
			Иначе
				ДанныеИБСтруктура.Вставить("СкладПолучатель", Неопределено);
			КонецЕсли;
						
			ЗапросПартии = Новый Запрос();
			ЗапросПартии.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
			ЗапросПартии.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
			|	уатПартииТоваровНаСкладах.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	уатПартииТоваровНаСкладах.Количество КАК Количество,
			|	""Топливо"" КАК ТипЗапасов,
			|	уатПартииТоваровНаСкладах.Стоимость КАК СуммаВРознице,
			|	уатПартииТоваровНаСкладах.Номенклатура.СтавкаНДС КАК СтавкаНДСВРознице,
			|	ВЫБОР
			|		КОГДА уатПартииТоваровНаСкладах.Количество = 0
			|			ТОГДА 0
			|		ИНАЧЕ ВЫРАЗИТЬ(уатПартииТоваровНаСкладах.Стоимость / уатПартииТоваровНаСкладах.Количество КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК ЦенаВРознице
			|ИЗ
			|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
			|ГДЕ
			|	уатПартииТоваровНаСкладах.Регистратор = &Регистратор";
			
			ТаблицаТоваров = ЗапросПартии.Выполнить().Выгрузить();
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			
			Если ТаблицаТоваров.Количество() Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
			КонецЕсли;
			
		ИначеЕсли флВыгрузкаНаАЗС И ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаАЗС Тогда
			ДанныеИБСтруктура = Новый Структура("Дата, Организация, Ответственный, Подразделение");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить("ВхДанныеИБ", ДанныеИБ);
			
			ДанныеИБСтруктура.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "с"));
			
			ДанныеИБСтруктура.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
			
			ДанныеИБСтруктура.Вставить("ИспользуемоеПКО", "СливГСМ_в_ВозвратТоваровПоставщику_Отправка");
			
			ДанныеИБСтруктура.Вставить("ВидОперации", "ВозвратПоставщику");
			
			ДанныеИБСтруктура.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
			
			ДанныеИБСтруктура.Вставить("КурсВзаиморасчетов",      1);
			ДанныеИБСтруктура.Вставить("КратностьВзаиморасчетов", 1);
			
			СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДанныеИБ.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			ДанныеИБСтруктура.Вставить("Склад", СкладДляПеремещенияГСМ);
			
			Если ТипЗнч(ДанныеИБ.АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДанныеИБСтруктура.Вставить("Контрагент", ДанныеИБ.АЗС.Контрагент_Склад);
			Иначе
				ДанныеИБСтруктура.Вставить("Контрагент", Неопределено);
			КонецЕсли;
			
			ДанныеИБСтруктура.Вставить("УчитыватьНДС", НалогообложениеПродавцаПоСтроке("", ДанныеИБ.Организация));
			
			ЗапросГСМ = Новый Запрос();
			ЗапросГСМ.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
			ЗапросГСМ.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатОстаткиГСМнаТС.ГСМ КАК Номенклатура,
			|	уатОстаткиГСМнаТС.ГСМ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	уатОстаткиГСМнаТС.Количество КАК Количество,
			|	уатОстаткиГСМнаТС.ГСМ.СтавкаНДС КАК СтавкаНДС,
			|	уатОстаткиГСМнаТС.Стоимость КАК Сумма,
			|	уатОстаткиГСМнаТС.СуммаНДС КАК СуммаНДС,
			|	ВЫБОР
			|		КОГДА уатОстаткиГСМнаТС.Количество = 0
			|			ТОГДА 0
			|		ИНАЧЕ ВЫРАЗИТЬ(уатОстаткиГСМнаТС.Стоимость / уатОстаткиГСМнаТС.Количество КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК Цена
			|ИЗ
			|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
			|ГДЕ
			|	уатОстаткиГСМнаТС.Регистратор = &Регистратор
			|	И уатОстаткиГСМнаТС.Количество > 0";
			
			ТаблицаТоваров = ЗапросГСМ.Выполнить().Выгрузить();
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			
			Если ТаблицаТоваров.Количество() Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПравилоОбработки);
			КонецЕсли;
		КонецЕсли;
		
		// Документ будет выгружаться как структура, поэтому выгрузка его как документа не требуется
		УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки_Отправка");
	
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Или ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_Банки_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Отправка");
	
КонецПроцедуры

Процедура ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ВидыНоменклатуры" отсутствует в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		ИспользованиеПКО.Справочник_ВидыНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
	
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ДокументыФизическихЛиц" добавлен в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмеренияУпаковки_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
	
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа    = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_КонтрагентыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
	
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_НоменклатураГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Отправка
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа");
	
КонецПроцедуры

Процедура ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатурныеГруппыГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОсновныеСредства_Отправка
Процедура ДобавитьПОД_Справочник_ОсновныеСредства_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОсновныеСредства_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ОсновныеСредства;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ОсновныеСредства_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОсновныеСредства_Отправка");
	
КонецПроцедуры

Процедура ПОД_Справочник_ОсновныеСредства_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Не отправляем группы, т.к. Справочник УАТ иерархиеский, а справочник формата - нет.
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_ОсновныеСредства_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
	
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СкладыГруппа    = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_СкладыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Склады_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.уатСтатьиРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_уатПараметрыВыработки_Отправка
Процедура ДобавитьПОД_Справочник_уатПараметрыВыработки_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_уатПараметрыВыработки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.уатПараметрыВыработки;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
	
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Ложь;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа    = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АвансовыйОтчет"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("АвансовыйОтчет", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровОтПокупателя"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ВозвратТоваровОтПокупателя_ВЗаказНаТС", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение = Истина;
	Иначе
		ИспользованиеПКО.Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ВозвратТоваровПоставщику_ВЗаказНаТС", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение = Истина;
	Иначе
		ИспользованиеПКО.Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиентаВЗаказНаТС_Получение
Процедура ДобавитьПОД_Документ_ЗаказКлиентаВЗаказНаТС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиентаВЗаказНаТС_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказКлиентаВЗаказНаТС_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказКлиента"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ЗаказКлиентаВЗаказНаТС_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ЗаказКлиентаВЗаказНаТС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Ложь;
	СпособДоставки = "";
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Истина;
	Иначе
		// Требуется выполнить анализ по способам доставки
		Если ДанныеXDTO.Свойство("СпособДоставки") Тогда
			СпособДоставки = ДанныеXDTO.СпособДоставки.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособДоставки = "Самовывоз"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_Самовывоз", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "ДоКлиента"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_ДоКлиента", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "СиламиПеревозчикаПоАдресу"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_СиламиПеревозчикаПоАдресу", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "СиламиПеревозчика"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_СиламиПеревозчика", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "КПолучателюОпределяетСлужбаДоставки"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_СлужбаДоставки", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказКлиентаВЗаказНаТС_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщикуВЗаказНаТС_Получение
Процедура ДобавитьПОД_Документ_ЗаказПоставщикуВЗаказНаТС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщикуВЗаказНаТС_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПоставщикуВЗаказНаТС_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ЗаказПоставщикуВЗаказНаТС_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ЗаказПоставщикуВЗаказНаТС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Ложь;
	СпособДоставки = "";
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказПоставщику_ВЗаказНаТС", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Истина;
	Иначе
		// Требуется выполнить анализ по способам доставки
		Если ДанныеXDTO.Свойство("СпособДоставки") Тогда
			СпособДоставки = ДанныеXDTO.СпособДоставки.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособДоставки = "СиламиПоставщикаДоНашегоСклада"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказПоставщику_ВЗаказНаТС_Поставщик", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "НашимиСиламиСАдресаОтправителя"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказПоставщику_ВЗаказНаТС_ОтПоставщика", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "СиламиПеревозчикаДоПунктаПередачи"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказПоставщику_ВЗаказНаТС_ОтПеревозчика", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "СиламиПеревозчикаДоНашегоСклада"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказПоставщику_ВЗаказНаТС_СиламиПеревозчика", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Истина;
	ИначеЕсли
		СпособДоставки = "ОтОтправителяОпределяетСлужбаДоставки"
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказПоставщику_ВЗаказНаТС_СлужбаДоставки", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ЗаказПоставщикуВЗаказНаТС_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеВходящее_ПриходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеВходящее_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеВходящее_ОплатаПокупателя", "Имя") <> Неопределено Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Получение = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен");
	
КонецПроцедуры

Процедура ПОД_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеВходящее_ВозвратОтПодотчетника", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваровВЗаказНаТС_Получение
Процедура ДобавитьПОД_Документ_ПеремещениеТоваровВЗаказНаТС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваровВЗаказНаТС_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваровВЗаказНаТС_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_ПеремещениеТоваровВЗаказНаТС_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваровВЗаказНаТС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПеремещениеТоваров_ВЗаказНаТС", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Док_ПеремещениеТоваровВЗаказНаТС_Получение = Истина;
	Иначе
		ИспользованиеПКО.Док_ПеремещениеТоваровВЗаказНаТС_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОПрочееПоступление_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПКОПрочееПоступление_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПриходныйКассовыйОрдер_ПриходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОПрочиеДоходы_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПКОПрочиеДоходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПриходныйКассовыйОрдер_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПриходныйКассовыйОрдер_ОплатаПокупателя", "Имя") <> Неопределено Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Получение = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Подотчет_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Подотчет_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Подотчет_Получени");
	
КонецПроцедуры

Процедура ПОД_Документ_ПКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПриходныйКассовыйОрдер_ВозвратОтПодотчетника", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Подотчет_Получени = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПоступлениеТоваровУслуг", "Имя") <> Неопределено Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Получение = Ложь;
		Возврат;
	КонецЕсли;
	
	// Поиск ПТУ, созданных из Рем. листов и Заправок ГСМ. Их загружать не нужно
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатВнешниеИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.уатВнешниеИдентификаторыВыгружаемыхОбъектов КАК уатВнешниеИдентификаторыВыгружаемыхОбъектов
	|ГДЕ
	|	уатВнешниеИдентификаторыВыгружаемыхОбъектов.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.уатВидыОбъектовУниверсальногоФормата.Документ_ПоступлениеТоваровУслуг)
	|	И (уатВнешниеИдентификаторыВыгружаемыхОбъектов.Объект ССЫЛКА Документ.уатРемонтныйЛист
	|			ИЛИ уатВнешниеИдентификаторыВыгружаемыхОбъектов.Объект ССЫЛКА Документ.уатЗаправкаГСМ)
	|	И уатВнешниеИдентификаторыВыгружаемыхОбъектов.ВнешнийИдентификатор = &ВнешнийИдентификатор");
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", Новый УникальныйИдентификатор(ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение));
	флНайденРЛЗаправка = НЕ Запрос.Выполнить().Пустой();
	Если флНайденРЛЗаправка Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Получение = Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслугВЗаказНаТС_Получение
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслугВЗаказНаТС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслугВЗаказНаТС_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Док_РеализацияТоваровУслугВЗаказНаТС_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Док_РеализацияТоваровУслугВЗаказНаТС_Получение = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("РеализацияТоваровУслуг_ВЗаказНаТС", "Имя") = Неопределено Тогда
		Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС", "Имя") = Неопределено Тогда
			ИспользованиеПКО.Док_РеализацияТоваровУслугВЗаказНаТС_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКОПрочаяВыдача_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочаяВыдача"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_РКОПрочаяВыдача_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("РасходныйКассовыйОрдер_РасходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКОПрочийРасход_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_РКОПрочийРасход_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("РасходныйКассовыйОрдер_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_РКОПрочийРасход_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКОРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_РКОРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("РасходныйКассовыйОрдер_ОплатаПоставщику", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Подотчет_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Подотчет_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Подотчет_Получени");
	
КонецПроцедуры

Процедура ПОД_Документ_РКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("РасходныйКассовыйОрдер_ВыдачаПодотчетнику", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Подотчет_Получени = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеИсходящее_РасходДенежныхСредствПрочее", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеИсходящее_ПрочееСписание", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеИсходящее_ПрочиеРасчетыСКонтрагентами", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеИсходящее_ОплатаПоставщику", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Получение = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Подотчет_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Подотчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Подотчет_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Подотчет_Получен");
	
КонецПроцедуры

Процедура ПОД_Документ_СБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ПлатежноеПоручениеИсходящее_ВыдачаПодотчетнику", "Имя") = Неопределено Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Подотчет_Получен = Ложь;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
	
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Проверка корректности типа владельца.
	ИспользованиеПКО.Справочник_БанковскиеСчета_Получение = Ложь;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		
		Если Найти(Владелец.ТипЗначения, "Организация") > 0 Или Найти(Владелец.ТипЗначения, "Контрагент") > 0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчета_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыНоменклатуры"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмеренияУпаковки_Получение
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмеренияУпаковки_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Упаковки"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмеренияУпаковки_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Получение
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Получение
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппыГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппыГруппа_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа"; //@NON-NLS-1
	
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
	
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
//
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваровВПересчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПокупателюВЗаказ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщикаВЗаказ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаправкаГСМ_в_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЗаправкаГСМ_в_СписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПутЛист_ВыработкаСотрудников_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_ВыработкаСотрудников_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_ПередМатериалВПрВо_Собств_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_ПоступТоварУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РемЛист_в_СписаниеЗапасов_Собств_Отправка(ПравилаКонвертации);
		ДобавитьПКО_СливГСМ_в_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_СливГСМ_в_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Банки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОсновныеСредства_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
	
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Банки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
	
КонецПроцедуры

#Область Отправка
#Область ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка
Процедура ДобавитьПКО_ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатВыдачаРасходныхМатериалов;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "в"));
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура КАК Номенклатура,
	|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатВыдачаРасходныхМатериаловМатериалы.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(ВЫРАЗИТЬ(уатВыдачаРасходныхМатериаловМатериалы.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатВыдачаРасходныхМатериаловМатериалы.Количество) КАК КоличествоУпаковок,
	|	""СырьеИМатериалы"" КАК ТипЗапасов
	|ИЗ
	|	Документ.уатВыдачаРасходныхМатериалов.Материалы КАК уатВыдачаРасходныхМатериаловМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатВыдачаРасходныхМатериаловМатериалы.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатВыдачаРасходныхМатериаловМатериалы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура,
	|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура.ЕдиницаИзмерения,
	|	уатВыдачаРасходныхМатериаловМатериалы.ЕдиницаИзмерения";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка
Процедура ДобавитьПКО_ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатВыдачаРасходныхМатериалов;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "в"));
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура КАК Номенклатура,
		|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатВыдачаРасходныхМатериаловМатериалы.ЕдиницаИзмерения КАК Упаковка,
		|	СУММА(ВЫРАЗИТЬ(уатВыдачаРасходныхМатериаловМатериалы.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
		|	СУММА(уатВыдачаРасходныхМатериаловМатериалы.Количество) КАК КоличествоУпаковок,
		|	""СырьеИМатериалы"" КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатВыдачаРасходныхМатериаловМатериалы.Водитель) = ТИП(Справочник.Сотрудники)
		|			ТОГДА уатВыдачаРасходныхМатериаловМатериалы.Водитель.ФизическоеЛицо
		|		ИНАЧЕ уатВыдачаРасходныхМатериаловМатериалы.Водитель
		|	КОНЕЦ КАК ФизическоеЛицо
		|ИЗ
		|	Документ.уатВыдачаРасходныхМатериалов.Материалы КАК уатВыдачаРасходныхМатериаловМатериалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО уатВыдачаРасходныхМатериаловМатериалы.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
		|ГДЕ
		|	уатВыдачаРасходныхМатериаловМатериалы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура,
		|	уатВыдачаРасходныхМатериаловМатериалы.Номенклатура.ЕдиницаИзмерения,
		|	уатВыдачаРасходныхМатериаловМатериалы.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатВыдачаРасходныхМатериаловМатериалы.Водитель) = ТИП(Справочник.Сотрудники)
		|			ТОГДА уатВыдачаРасходныхМатериаловМатериалы.Водитель.ФизическоеЛицо
		|		ИНАЧЕ уатВыдачаРасходныхМатериаловМатериалы.Водитель
		|	КОНЕЦ";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НалогообложениеНДСПродавца";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПрочиеРасходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПрочиеРасходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, "НалогообложениеНДСПродавца");
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатВозвратТоваров;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВозвратПоставщику");
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВозвратТоваровТовары.Номенклатура КАК Номенклатура,
	|	уатВозвратТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатВозвратТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|				ТОГДА уатВозвратТоваровТовары.Количество
	|			ИНАЧЕ уатВозвратТоваровТовары.Количество * ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатВозвратТоваровТовары.Количество КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатВозвратТоваровТовары.Цена
	|			ИНАЧЕ уатВозвратТоваровТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	уатВозвратТоваровТовары.Цена КАК ЦенаЗаУпаковку,
	|	уатВозвратТоваровТовары.Сумма КАК Сумма,
	|	уатВозвратТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	уатВозвратТоваровТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.уатВозвратТоваров.Товары КАК уатВозвратТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатВозвратТоваровТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатВозвратТоваровТовары.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаТовары Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатИнвентаризацияТоваров;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковокУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатИнвентаризацияТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатИнвентаризацияТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|					ТОГДА уатИнвентаризацияТоваровТовары.Количество
	|				ИНАЧЕ уатИнвентаризацияТоваровТовары.Количество * ЕдиницыИзмерения.Коэффициент
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатИнвентаризацияТоваровТовары.Количество) КАК КоличествоУпаковок,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|					ТОГДА уатИнвентаризацияТоваровТовары.КоличествоУчет
	|				ИНАЧЕ уатИнвентаризацияТоваровТовары.КоличествоУчет * ЕдиницыИзмерения.Коэффициент
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК КоличествоУчет,
	|	СУММА(уатИнвентаризацияТоваровТовары.КоличествоУчет) КАК КоличествоУпаковокУчет,
	|	СУММА(уатИнвентаризацияТоваровТовары.Сумма) КАК Сумма,
	|	СУММА(уатИнвентаризацияТоваровТовары.СуммаУчет) КАК СуммаУчет,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатИнвентаризацияТоваровТовары.Цена
	|			ИНАЧЕ уатИнвентаризацияТоваровТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	уатИнвентаризацияТоваровТовары.Цена КАК ЦенаЗаУпаковку,
	|	уатИнвентаризацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	""СырьеИМатериалы"" КАК ТипЗапасов
	|ИЗ
	|	Документ.уатИнвентаризацияТоваров.Товары КАК уатИнвентаризацияТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатИнвентаризацияТоваровТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатИнвентаризацияТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатИнвентаризацияТоваровТовары.Цена
	|			ИНАЧЕ уатИнвентаризацияТоваровТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	уатИнвентаризацияТоваровТовары.Номенклатура,
	|	уатИнвентаризацияТоваровТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатИнвентаризацияТоваровТовары.ЕдиницаИзмерения,
	|	уатИнвентаризацияТоваровТовары.Цена";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваровВПересчет_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваровВПересчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияТоваровВПересчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатИнвентаризацияТоваров;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияТоваровВПересчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПересчетТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковокФакт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоФакт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаФакт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Товары.Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваровВПересчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатИнвентаризацияТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатИнвентаризацияТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|					ТОГДА уатИнвентаризацияТоваровТовары.Количество
	|				ИНАЧЕ уатИнвентаризацияТоваровТовары.Количество * ЕдиницыИзмерения.Коэффициент
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК КоличествоФакт,
	|	СУММА(уатИнвентаризацияТоваровТовары.Количество) КАК КоличествоУпаковокФакт,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|					ТОГДА уатИнвентаризацияТоваровТовары.КоличествоУчет
	|				ИНАЧЕ уатИнвентаризацияТоваровТовары.КоличествоУчет * ЕдиницыИзмерения.Коэффициент
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатИнвентаризацияТоваровТовары.КоличествоУчет) КАК КоличествоУпаковок,
	|	СУММА(уатИнвентаризацияТоваровТовары.Сумма) КАК СуммаФакт,
	|	СУММА(уатИнвентаризацияТоваровТовары.СуммаУчет) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатИнвентаризацияТоваровТовары.Цена
	|			ИНАЧЕ уатИнвентаризацияТоваровТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	уатИнвентаризацияТоваровТовары.Цена КАК ЦенаЗаУпаковку,
	|	уатИнвентаризацияТоваровТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.уатИнвентаризацияТоваров.Товары КАК уатИнвентаризацияТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатИнвентаризацияТоваровТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатИнвентаризацияТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатИнвентаризацияТоваровТовары.Цена
	|			ИНАЧЕ уатИнвентаризацияТоваровТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	уатИнвентаризацияТоваровТовары.Номенклатура,
	|	уатИнвентаризацияТоваровТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатИнвентаризацияТоваровТовары.ЕдиницаИзмерения,
	|	уатИнвентаризацияТоваровТовары.Цена";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	// Нельзя использовать процедуру ОбработатьВыгрузкуУпаковокВТаблице из-за нестандартых имен колонок
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		ОшибкаВыгрузкаУпаковки = Не РазрешенаВыгрузкаУпаковки(ТекСтрока.Упаковка);
		Если ОшибкаВыгрузкаУпаковки Тогда
			ТекСтрока.КоличествоУпаковокФакт = Неопределено;
			ТекСтрока.КоличествоУпаковок = Неопределено;
			ТекСтрока.ЦенаЗаУпаковку = Неопределено;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ИЗ
	|	Документ.уатПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочиеДоходы"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ИЗ
	|	Документ.уатПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ВозвратОтПоставщика Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.уатПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВалютаВзаиморасчетов";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ИЗ
	|	Документ.уатПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПеремещениеТоваров;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(ВЫРАЗИТЬ(уатПеремещениеТоваровТовары.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатПеремещениеТоваровТовары.Количество) КАК КоличествоУпаковок,
	|	уатПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	""СырьеИМатериалы"" КАК ТипЗапасов
	|ИЗ
	|	Документ.уатПеремещениеТоваров.Товары КАК уатПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатПеремещениеТоваровТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатПеремещениеТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатПеремещениеТоваровТовары.Номенклатура,
	|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочееПоступление"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.уатПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.уатПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПКО.ВозвратОтПоставщика Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	СУММА(уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.уатПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.уатПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПоступлениеТоваровУслуг;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетПоставщикаВЗаказ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.ВалютаДокумента);
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	// Сделку нужно выгружать в заказ, только если Счет на оплату поставщику
	Если ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика")
		И КомпонентыОбмена.ПараметрыКонвертации.ЗапрещенныеКОтправке.Найти("СчетНаОплатуПоставщика_ВЗаказПоставщику", "Имя") = Неопределено Тогда
		ИнструкцияЗаказ = Новый Структура("ИмяПКО, Значение", "Документ_СчетПоставщикаВЗаказ_Отправка", ДанныеИБ.Сделка);
		ДанныеXDTO.Вставить("Заказ", ИнструкцияЗаказ);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК Упаковка,
	|	уатПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|					ТОГДА уатПоступлениеТоваровУслугТовары.Количество
	|				ИНАЧЕ уатПоступлениеТоваровУслугТовары.Количество * ЕдиницыИзмерения.Коэффициент
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатПоступлениеТоваровУслугТовары.Количество) КАК КоличествоУпаковок,
	|	уатПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
	|	СУММА(уатПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатПоступлениеТоваровУслугТовары.Цена
	|			ИНАЧЕ уатПоступлениеТоваровУслугТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	уатПоступлениеТоваровУслугТовары.Цена КАК ЦенаЗаУпаковку
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Товары КАК уатПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатПоступлениеТоваровУслугТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПоступлениеТоваровУслугТовары.Номенклатура,
	|	уатПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатПоступлениеТоваровУслугТовары.Цена
	|			ИНАЧЕ уатПоступлениеТоваровУслугТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	уатПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	уатПоступлениеТоваровУслугТовары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(уатПоступлениеТоваровУслугУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
	|	уатПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
	|	уатПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
	|	уатПоступлениеТоваровУслугУслуги.Цена КАК Цена,
	|	уатПоступлениеТоваровУслугУслуги.Содержание КАК Содержание
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	уатПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаТовары Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатРеализацияУслуг;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетПокупателюВЗаказ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.ВалютаДокумента);
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	// Сделку нужно выгружать в заказ, только если Счет на оплату покупателю
	Если ТипЗнч(ДанныеИБ.Сделка) = Тип("ДокументСсылка.уатСчетНаОплатуПокупателю") Тогда
		ИнструкцияЗаказ = Новый Структура("ИмяПКО, Значение", "Документ_СчетПокупателюВЗаказ_Отправка", ДанныеИБ.Сделка);
		ДанныеXDTO.Вставить("Заказ", ИнструкцияЗаказ);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Если ДанныеИБ.СверткаУслугРегл Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(уатРеализацияУслугУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	уатРеализацияУслугУслуги.Номенклатура,
		|	уатРеализацияУслугУслуги.Содержание,
		|	уатРеализацияУслугУслуги.СтавкаНДС,
		|	уатРеализацияУслугУслуги.Сумма,
		|	уатРеализацияУслугУслуги.СуммаНДС,
		|	уатРеализацияУслугУслуги.Цена
		|ИЗ
		|	Документ.уатРеализацияУслуг.УслугиРегл КАК уатРеализацияУслугУслуги
		|ГДЕ
		|	уатРеализацияУслугУслуги.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(уатРеализацияУслугУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	уатРеализацияУслугУслуги.Номенклатура,
		|	уатРеализацияУслугУслуги.Содержание,
		|	уатРеализацияУслугУслуги.СтавкаНДС,
		|	уатРеализацияУслугУслуги.Сумма,
		|	уатРеализацияУслугУслуги.СуммаНДС,
		|	уатРеализацияУслугУслуги.Цена
		|ИЗ
		|	Документ.уатРеализацияУслуг.Услуги КАК уатРеализацияУслугУслуги
		|ГДЕ
		|	уатРеализацияУслугУслуги.Ссылка = &Ссылка";
	КонецЕсли;
	
	ТаблицаУслуги = Запрос.Выполнить().Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.уатРасходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатРасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.уатРасходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатРасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийРКО.ВозвратПокупателю Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.уатРасходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатРасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.ВалютаВзаиморасчетов";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Подотчет_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Подотчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.уатРасходныйКассовыйОрдер.РасшифровкаПлатежа КАК уатРасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет Тогда
		ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетПолучателя);
	Иначе
		ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетКонтрагента);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочиеРасходы"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ИЗ
	|	Документ.уатПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.уатПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтавкаНДС,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ВалютаВзаиморасчетов";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	СУММА(уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ИЗ
	|	Документ.уатПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|ГДЕ
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатСписаниеТоваров;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСписаниеТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатСписаниеТоваровТовары.ЕдиницаИзмерения КАК Упаковка,
	|	уатСписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫРАЗИТЬ(уатСписаниеТоваровТовары.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатСписаниеТоваровТовары.Количество) КАК КоличествоУпаковок,
	|	""СырьеИМатериалы"" КАК ТипЗапасов
	|ИЗ
	|	Документ.уатСписаниеТоваров.Товары КАК уатСписаниеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатСписаниеТоваровТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатСписаниеТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСписаниеТоваровТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатСписаниеТоваровТовары.Номенклатура,
	|	уатСписаниеТоваровТовары.ЕдиницаИзмерения";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплатуПокупателю_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатСчетНаОплатуПокупателю;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетПокупателю"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(уатСчетНаОплатуПокупателюУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатСчетНаОплатуПокупателюУслуги.Номенклатура,
	|	уатСчетНаОплатуПокупателюУслуги.Содержание,
	|	уатСчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	уатСчетНаОплатуПокупателюУслуги.Сумма,
	|	уатСчетНаОплатуПокупателюУслуги.СуммаНДС,
	|	уатСчетНаОплатуПокупателюУслуги.Цена
	|ИЗ
	|	Документ.уатСчетНаОплатуПокупателю.Услуги КАК уатСчетНаОплатуПокупателюУслуги
	|ГДЕ
	|	уатСчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
	
	ТаблицаУслуги = Запрос.Выполнить().Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПоставщика_Отправка
Процедура ДобавитьПКО_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплатуПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатСчетНаОплатуПоставщика;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетПоставщика"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|					ТОГДА уатСчетНаОплатуПоставщикаТовары.Количество
	|				ИНАЧЕ уатСчетНаОплатуПоставщикаТовары.Количество * ЕдиницыИзмерения.Коэффициент
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатСчетНаОплатуПоставщикаТовары.Количество) КАК КоличествоУпаковок,
	|	уатСчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатСчетНаОплатуПоставщикаТовары.Сумма) КАК Сумма,
	|	СУММА(уатСчетНаОплатуПоставщикаТовары.СуммаНДС) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатСчетНаОплатуПоставщикаТовары.Цена
	|			ИНАЧЕ уатСчетНаОплатуПоставщикаТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	уатСчетНаОплатуПоставщикаТовары.Цена КАК ЦенаЗаУпаковку
	|ИЗ
	|	Документ.уатСчетНаОплатуПоставщика.Товары КАК уатСчетНаОплатуПоставщикаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатСчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура,
	|	уатСчетНаОплатуПоставщикаТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|				ТОГДА уатСчетНаОплатуПоставщикаТовары.Цена
	|			ИНАЧЕ уатСчетНаОплатуПоставщикаТовары.Цена / ЕдиницыИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения,
	|	уатСчетНаОплатуПоставщикаТовары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСчетНаОплатуПоставщикаУслуги.Номенклатура КАК Номенклатура,
	|	уатСчетНаОплатуПоставщикаУслуги.Содержание КАК Содержание,
	|	ВЫРАЗИТЬ(уатСчетНаОплатуПоставщикаУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатСчетНаОплатуПоставщикаУслуги.Цена КАК Цена,
	|	уатСчетНаОплатуПоставщикаУслуги.Сумма КАК Сумма,
	|	уатСчетНаОплатуПоставщикаУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатСчетНаОплатуПоставщикаУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.уатСчетНаОплатуПоставщика.Услуги КАК уатСчетНаОплатуПоставщикаУслуги
	|ГДЕ
	|	уатСчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаТовары Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПокупателюВЗаказ_Отправка
Процедура ДобавитьПКО_Документ_СчетПокупателюВЗаказ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетПокупателюВЗаказ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатСчетНаОплатуПокупателю;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПокупателюВЗаказ_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СчетПокупателюВЗаказ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(уатСчетНаОплатуПокупателюУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатСчетНаОплатуПокупателюУслуги.Номенклатура,
	|	уатСчетНаОплатуПокупателюУслуги.Содержание,
	|	уатСчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	уатСчетНаОплатуПокупателюУслуги.Сумма,
	|	уатСчетНаОплатуПокупателюУслуги.СуммаНДС,
	|	уатСчетНаОплатуПокупателюУслуги.Цена
	|ИЗ
	|	Документ.уатСчетНаОплатуПокупателю.Услуги КАК уатСчетНаОплатуПокупателюУслуги
	|ГДЕ
	|	уатСчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
	
	ТаблицаУслуги = Запрос.Выполнить().Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПоставщикаВЗаказ_Отправка
Процедура ДобавитьПКО_Документ_СчетПоставщикаВЗаказ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетПоставщикаВЗаказ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатСчетНаОплатуПоставщика;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПоставщикаВЗаказ_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_СчетПоставщикаВЗаказ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(уатСчетНаОплатуПоставщикаТовары.Количество) КАК КоличествоУпаковок,
	|	СУММА(ВЫБОР
	|			КОГДА ЕдиницыИзмерения.Коэффициент ЕСТЬ NULL
	|				ТОГДА уатСчетНаОплатуПоставщикаТовары.Количество
	|			ИНАЧЕ ВЫРАЗИТЬ(уатСчетНаОплатуПоставщикаТовары.Количество * ЕдиницыИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		КОНЕЦ) КАК Количество,
	|	уатСчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатСчетНаОплатуПоставщикаТовары.Сумма) КАК Сумма,
	|	СУММА(уатСчетНаОплатуПоставщикаТовары.СуммаНДС) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|			ТОГДА уатСчетНаОплатуПоставщикаТовары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(уатСчетНаОплатуПоставщикаТовары.Цена / ЕдиницыИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	уатСчетНаОплатуПоставщикаТовары.Цена КАК ЦенаЗаУпаковку
	|ИЗ
	|	Документ.уатСчетНаОплатуПоставщика.Товары КАК уатСчетНаОплатуПоставщикаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатСчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура,
	|	уатСчетНаОплатуПоставщикаТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
	|			ТОГДА уатСчетНаОплатуПоставщикаТовары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(уатСчетНаОплатуПоставщикаТовары.Цена / ЕдиницыИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	уатСчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения,
	|	уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения,
	|	уатСчетНаОплатуПоставщикаТовары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСчетНаОплатуПоставщикаУслуги.Номенклатура КАК Номенклатура,
	|	уатСчетНаОплатуПоставщикаУслуги.Содержание КАК Содержание,
	|	ВЫРАЗИТЬ(уатСчетНаОплатуПоставщикаУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатСчетНаОплатуПоставщикаУслуги.Цена КАК Цена,
	|	уатСчетНаОплатуПоставщикаУслуги.Сумма КАК Сумма,
	|	уатСчетНаОплатуПоставщикаУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатСчетНаОплатуПоставщикаУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.уатСчетНаОплатуПоставщика.Услуги КАК уатСчетНаОплатуПоставщикаУслуги
	|ГДЕ
	|	уатСчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаТовары Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатТТД;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "т"));
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.ВалютаДокумента);
	
	Если ТипЗнч(ДанныеИБ.АдресДоставки) = Тип("СправочникСсылка.уатПунктыНазначения") И ЗначениеЗаполнено(ДанныеИБ.АдресДоставки) Тогда
		ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки.Наименование);
	Иначе
		ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТДСтоимость.НоменклатураУслуги КАК Номенклатура,
	|	ВЫРАЗИТЬ(уатТТДСтоимость.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	уатТТДСтоимость.СтавкаНДС КАК СтавкаНДС,
	|	уатТТДСтоимость.Сумма КАК Сумма,
	|	уатТТДСтоимость.СуммаНДС КАК СуммаНДС,
	|	уатТТДСтоимость.Цена КАК Цена,
	|	уатТТДСтоимость.Содержание КАК Содержание
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|ГДЕ
	|	уатТТДСтоимость.Ссылка = &Ссылка";
	
	ТаблицаУслуги = Запрос.Выполнить().Выгрузить();
	Если Не ДанныеИБ.УчитыватьНДС Тогда
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_в_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_ЗаправкаГСМ_в_АвансовыйОтчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаправкаГСМ_в_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаправкаГСМ_в_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ЗаправкаГСМ_в_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, "НалогообложениеНДСПродавца");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка
Процедура ДобавитьПКО_ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка
Процедура ДобавитьПКО_ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ЗаправкаГСМ_в_СписаниеЗапасов_Отправка
Процедура ДобавитьПКО_ЗаправкаГСМ_в_СписаниеЗапасов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЗаправкаГСМ_в_СписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЗаправкаГСМ_в_СписаниеЗапасов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ЗаправкаГСМ_в_СписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка
Процедура ДобавитьПКО_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтражениеЗарплатыВФинансовомУчете"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодРегистрации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("НачисленнаяЗарплатаИВзносы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.НачисленнаяЗарплатаИВзносы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВхДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("НачисленнаяЗарплатаИВзносы", ДанныеИБ.НачисленнаяЗарплатаИВзносы);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатОперацииСТехническимиЖидкостями;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеЖидкости.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТехническиеЖидкости.ЕдиницаИзмерения КАК Упаковка,
	|	СУММА(ВЫРАЗИТЬ(ТехническиеЖидкости.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(ТехническиеЖидкости.Количество) КАК КоличествоУпаковок,
	|	ТехническиеЖидкости.Номенклатура КАК Номенклатура,
	|	""Топливо"" КАК ТипЗапасов
	|ИЗ
	|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК ТехническиеЖидкости
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ТехническиеЖидкости.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	ТехническиеЖидкости.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТехническиеЖидкости.Номенклатура.ЕдиницаИзмерения,
	|	ТехническиеЖидкости.Номенклатура,
	|	ТехническиеЖидкости.ЕдиницаИзмерения";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	НастройкиПользователя = Новый Структура("Организация, Подразделение", ДанныеИБ.Организация, ДанныеИБ.Подразделение);
	СкладДляПеремещенияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя, ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
	ДанныеXDTO.Вставить("СкладПолучатель", СкладДляПеремещенияГСМ);
	
	Если НЕ ЗначениеЗаполнено(СкладДляПеремещенияГСМ) Тогда
		ТекстСообщения = СтрШаблон("Не заполнено значение настройки ""Склад для перемещения ГСМ"" для организации ""%1""", ДанныеИБ.Организация);
		ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстСообщения, КомпонентыОбмена,
			УровеньЖурналаРегистрации.Ошибка, ДанныеИБ.Ссылка);
	КонецЕсли;
				
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка
Процедура ДобавитьПКО_ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатОперацииСТехническимиЖидкостями;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "т"));
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.ЕдиницаИзмерения КАК Упаковка,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫРАЗИТЬ(уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Количество) КАК КоличествоУпаковок,
	|	""СырьеИМатериалы"" КАК ТипЗапасов
	|ИЗ
	|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостямиТехническиеЖидкости
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура.ЕдиницаИзмерения,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.ЕдиницаИзмерения";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка
Процедура ДобавитьПКО_ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.уатОперацииСТехническимиЖидкостями;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ПолучитьНомерДокументаПоТипу(ДанныеИБ.Номер, "т"));
	
	ДанныеXDTO.Вставить("Комментарий", "Выгрузка из УАТ ("+Строка(ДанныеИБ.Ссылка)+")");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.ЕдиницаИзмерения КАК Упаковка,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫРАЗИТЬ(уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Количество) КАК КоличествоУпаковок,
	|	""СырьеИМатериалы"" КАК ТипЗапасов,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Водитель.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостямиТехническиеЖидкости
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Номенклатура.ЕдиницаИзмерения,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.Водитель.ФизическоеЛицо,
	|	уатОперацииСТехническимиЖидкостямиТехническиеЖидкости.ЕдиницаИзмерения";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары);
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ПутЛист_ВыработкаСотрудников_Отправка
Процедура ДобавитьПКО_ПутЛист_ВыработкаСотрудников_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПутЛист_ВыработкаСотрудников_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПутЛист_ВыработкаСотрудников_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыработкаСотрудников"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыполненныеРаботы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыполненныеРаботы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРабот";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_ПутЛист_ВыработкаСотрудников_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("ВыполненныеРаботы", ДанныеИБ.ВыполненныеРаботы);
КонецПроцедуры
#КонецОбласти
#Область ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка
Процедура ДобавитьПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка
Процедура ДобавитьПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_ВыработкаСотрудников_Отправка
Процедура ДобавитьПКО_РемЛист_в_ВыработкаСотрудников_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_ВыработкаСотрудников_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_ВыработкаСотрудников_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыработкаСотрудников"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыполненныеРаботы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыполненныеРаботы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРабот";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_ВыработкаСотрудников_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("ВыполненныеРаботы", ДанныеИБ.ВыполненныеРаботы);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка
Процедура ДобавитьПКО_РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_ПередМатериалВПрВо_Собств_Отправка
Процедура ДобавитьПКО_РемЛист_в_ПередМатериалВПрВо_Собств_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_ПередМатериалВПрВо_Собств_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_ПередМатериалВПрВо_Собств_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_ПередМатериалВПрВо_Собств_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка
Процедура ДобавитьПКО_РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка
Процедура ДобавитьПКО_РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_ПоступТоварУслуг_Отправка
Процедура ДобавитьПКО_РемЛист_в_ПоступТоварУслуг_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_ПоступТоварУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_ПоступТоварУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_ПоступТоварУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Услуги", ДанныеИБ.Услуги);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка
Процедура ДобавитьПКО_РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область РемЛист_в_СписаниеЗапасов_Собств_Отправка
Процедура ДобавитьПКО_РемЛист_в_СписаниеЗапасов_Собств_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РемЛист_в_СписаниеЗапасов_Собств_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РемЛист_в_СписаниеЗапасов_Собств_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	

	
КонецПроцедуры

Процедура ПКО_РемЛист_в_СписаниеЗапасов_Собств_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВнешнийИдентификатор);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбработатьВыгрузкуУпаковокВТаблице(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область СливГСМ_в_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_СливГСМ_в_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "СливГСМ_в_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_СливГСМ_в_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_СливГСМ_в_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВхДанныеИБ.Ссылка);
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область СливГСМ_в_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_СливГСМ_в_ПеремещениеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "СливГСМ_в_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_СливГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_СливГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.ВхДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ.ВхДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка
Процедура ДобавитьПКО_Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.уатПараметрыВыработки;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыРаботСотрудников"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("КодВПрограмме", ДанныеИБ.ВидРаботыСотрудника.Код);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", ДанныеИБ.ВидРаботыСотрудника.Наименование);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПКО_Справочник_Банки_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Банки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Банки_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Банки"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Банки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Если ДанныеИБ.Владелец = Неопределено Тогда
		РеквизитВладелец = Справочники.Организации.ПустаяСсылка();
	Иначе 
		РеквизитВладелец = ДанныеИБ.Владелец;
	КонецЕсли;
	Инструкция.Значение = РеквизитВладелец;
	Если ТипЗнч(РеквизитВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(РеквизитВладелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.Услуга Тогда 
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", "Услуга");
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", "Товар");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокументаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицоОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыдачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КемВыдан";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодПодразделения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Период";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЯвляетсяУдостоверяющимЛичность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
	ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("ФизическоеЛицо");
	Записи.Колонки.Добавить("ВидДокумента");
	Записи.Колонки.Добавить("Период");
	Записи.Колонки.Добавить("Серия");
	Записи.Колонки.Добавить("Номер");
	Записи.Колонки.Добавить("ДатаВыдачи");
	Записи.Колонки.Добавить("КемВыдан");
	Записи.Колонки.Добавить("КодПодразделения");
	Записи.Колонки.Добавить("СрокДействия");
	Записи.Колонки.Добавить("Представление");
	Записи.Колонки.Добавить("ЯвляетсяУдостоверяющимЛичность");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
		СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
			СтрокаЗаписи.ЯвляетсяУдостоверяющимЛичность = СтрокаНабора.ЯвляетсяДокументомУдостоверяющимЛичность;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если Не ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
		Код = Лев(ДанныеИБ.Наименование, 4);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмеренияУпаковки_Отправка
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Упаковки"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаПоКлассификатору";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТекстОшибки = "";
	ОшибкаВыгрузкаУпаковки = Не РазрешенаВыгрузкаУпаковки(ДанныеИБ, ТекстОшибки);
	
	Если ОшибкаВыгрузкаУпаковки Тогда
		ДанныеXDTO = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстОшибки, КомпонентыОбмена,
			УровеньЖурналаРегистрации.Предупреждение, ДанныеИБ.Ссылка);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйНомер";
	НоваяСтрока.СвойствоФормата = "НалоговыйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент) И ДанныеИБ.ГоловнойКонтрагент <> ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", ДанныеИБ.ГоловнойКонтрагент);
	Иначе
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", Неопределено);
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ВидНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыНоменклатуры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НоменклатурнаяГруппа";
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчета";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		СпрСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		Если СпрСсылка = Неопределено Или СпрСсылка = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", Неопределено);
		Иначе
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", СпрСсылка);
		КонецЕсли;
	Иначе
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеИБ.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеИБ.ЭтоГруппа Тогда
		Если Не ДанныеИБ.Услуга Тогда 
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
		Иначе
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Услуга");
		КонецЕсли;
	Иначе	
		ДанныеXDTO.Вставить("ТипНоменклатуры",    "");
		ДанныеXDTO.Вставить("НаименованиеПолное", "");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатурныеГруппы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатурныеГруппы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппыГруппа";

	
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатурныеГруппы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Головная организация.
	ДанныеXDTO.Вставить("ГоловнаяОрганизация", ДанныеИБ.Ссылка);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОсновныеСредства_Отправка
Процедура ДобавитьПКО_Справочник_ОсновныеСредства_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ОсновныеСредства_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ОсновныеСредства;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ОсновныеСредства"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвентарныйНомер";
	НоваяСтрока.СвойствоФормата = "ИнвентарныйНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Пользователи_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Пользователи"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "СкладГруппа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "АдресСтрокой";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Выгрузка адреса склада
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		АдресСклада = уатОбщегоНазначения_уэ.АдресСклада(ДанныеИБ.Ссылка);
		Если ЗначениеЗаполнено(АдресСклада) Тогда
			ДанныеXDTO.Вставить("АдресСтрокой", АдресСклада.Адрес);
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.уатСтатьиРасходов;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФИО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДанныеФИО", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДанныеФИО;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ФИО) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.ФИО);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДанныеXDTO.Вставить("Фамилия", Выборка.Фамилия);
		ДанныеXDTO.Вставить("Имя", Выборка.Имя);
		ДанныеXDTO.Вставить("Отчество", Выборка.Отчество);
	Иначе 
		ДанныеXDTO.Вставить("Фамилия", "");
		ДанныеXDTO.Вставить("Имя", "");
		ДанныеXDTO.Вставить("Отчество", "");
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение
Процедура ДобавитьПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатЗаказГрузоотправителя;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровОтПокупателя"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаТоваров";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДетализацияЗакрытия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузоотправителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузополучателя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаправлениеПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПоУчетуЗаказчика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВесБрутто";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// Дата и номер входящего документа
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.Номер);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.Дата);
	КонецЕсли;
	
	// Сохранение для дальнейшей обработки имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипЗначения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЗначенияXDTO", ДанныеXDTO.КлючевыеСвойства.ТипЗначения);
	КонецЕсли;
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ОтправлениеИзСвоегоСклада = Ложь;
	ПрибытиеВСвойСклад = Истина;
	ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказыНаТС);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение
Процедура ДобавитьПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатЗаказГрузоотправителя;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаТоваров";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДетализацияЗакрытия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузоотправителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузополучателя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаправлениеПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПоУчетуЗаказчика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВесБрутто";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// Дата и номер входящего документа
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.Номер);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.Дата);
	КонецЕсли;
	
	// Сохранение для дальнейшей обработки имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипЗначения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЗначенияXDTO", ДанныеXDTO.КлючевыеСвойства.ТипЗначения);
	КонецЕсли;
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент)
		И Не ЗначениеЗаполнено(ПолученныеДанные.Грузополучатель) Тогда
		ПолученныеДанные.Грузополучатель = ПолученныеДанные.Контрагент;
	КонецЕсли;
	
	ОтправлениеИзСвоегоСклада = Истина;
	ПрибытиеВСвойСклад = Ложь;
	ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказыНаТС);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Док_ЗаказКлиентаВЗаказНаТС_Получение
Процедура ДобавитьПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_ЗаказКлиентаВЗаказНаТС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатЗаказГрузоотправителя;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказКлиента"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаТоваров";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДетализацияЗакрытия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузоотправителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузополучателя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаправлениеПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПоУчетуЗаказчика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВесБрутто";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Организация,Номер");
	
КонецПроцедуры

Процедура ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("АдресДоставки") И ЗначениеЗаполнено(ДанныеXDTO.АдресДоставки) Тогда
		ПолученныеДанные.АдресНазначения = НайтиСоздатьПунктНазначения(ДанныеXDTO.АдресДоставки, КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	Если ДанныеXDTO.Свойство("ОжидаемаяДатаПоступления") И ЗначениеЗаполнено(ДанныеXDTO.ОжидаемаяДатаПоступления) Тогда
		ДатаОтправления = ДанныеXDTO.ОжидаемаяДатаПоступления;
	Иначе
		ДатаОтправления = ПолученныеДанные.Дата;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаОтправления", ДатаОтправления);
	
	// Дата и номер входящего документа
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.Номер);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.Дата);
	Иначе
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("НомерВходящегоДокумента") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.НомерВходящегоДокумента);
		КонецЕсли;
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ДатаВходящегоДокумента") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.ДатаВходящегоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение для дальнейшей обработки имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипЗначения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЗначенияXDTO", ДанныеXDTO.КлючевыеСвойства.ТипЗначения);
	КонецЕсли;
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ОтправлениеИзСвоегоСклада = Истина;
	ПрибытиеВСвойСклад = Ложь;
	ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказыНаТС);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Док_ЗаказПоставщикуВЗаказНаТС_Получение
Процедура ДобавитьПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_ЗаказПоставщикуВЗаказНаТС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатЗаказГрузоотправителя;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказПоставщику"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаТоваров";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДетализацияЗакрытия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузоотправителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузополучателя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаправлениеПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПоУчетуЗаказчика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВесБрутто";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("АдресДоставки") И ЗначениеЗаполнено(ДанныеXDTO.АдресДоставки) Тогда
		ПолученныеДанные.АдресОтправления = НайтиСоздатьПунктНазначения(ДанныеXDTO.АдресДоставки, КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// Дата и номер входящего документа
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.Номер);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.Дата);
	Иначе
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("НомерВходящегоДокумента") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.НомерВходящегоДокумента);
		КонецЕсли;
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ДатаВходящегоДокумента") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.ДатаВходящегоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение для дальнейшей обработки имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипЗначения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЗначенияXDTO", ДанныеXDTO.КлючевыеСвойства.ТипЗначения);
	КонецЕсли;
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ОтправлениеИзСвоегоСклада = Ложь;
	ПрибытиеВСвойСклад = Истина;
	ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказыНаТС);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Док_ПеремещениеТоваровВЗаказНаТС_Получение
Процедура ДобавитьПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_ПеремещениеТоваровВЗаказНаТС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатЗаказГрузоотправителя;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДетализацияЗакрытия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузоотправителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузополучателя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаправлениеПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПоУчетуЗаказчика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВесБрутто";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// Дата и номер входящего документа
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.Номер);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.Дата);
	КонецЕсли;
	
	// Сохранение для дальнейшей обработки имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипЗначения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЗначенияXDTO", ДанныеXDTO.КлючевыеСвойства.ТипЗначения);
	КонецЕсли;
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолученныеДанные.ВалютаТоваров = ПолученныеДанные.ВалютаДокумента;
	
	ОтправлениеИзСвоегоСклада = Истина;
	ПрибытиеВСвойСклад = Истина;
	ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказыНаТС);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Док_РеализацияТоваровУслугВЗаказНаТС_Получение
Процедура ДобавитьПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Док_РеализацияТоваровУслугВЗаказНаТС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатЗаказГрузоотправителя;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаТоваров";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоставки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДетализацияЗакрытия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоставкаС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузоотправителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтактноеЛицоГрузополучателя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаправлениеПеревозки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПоУчетуЗаказчика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеПо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтправлениеС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктНазначения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтоянкаПунктОтправления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВесБрутто";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("АдресДоставки") И ЗначениеЗаполнено(ДанныеXDTO.АдресДоставки) Тогда
		ПолученныеДанные.АдресНазначения = НайтиСоздатьПунктНазначения(ДанныеXDTO.АдресДоставки, КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// Дата и номер входящего документа
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерПоУчетуЗаказчика", ДанныеXDTO.КлючевыеСвойства.Номер);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеXDTO.КлючевыеСвойства.Дата);
	КонецЕсли;
	
	// Сохранение для дальнейшей обработки имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипЗначения") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЗначенияXDTO", ДанныеXDTO.КлючевыеСвойства.ТипЗначения);
	КонецЕсли;
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ОтправлениеИзСвоегоСклада = Истина;
	ПрибытиеВСвойСклад = Ложь;
	ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьЗаказыНаТС);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатАвансовыйОтчет;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кратность";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтражения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация,ПодотчетноеЛицо");
	
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидОбъекта",           Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_АвансовыйОтчет);
	Запрос.УстановитьПараметр("Валюта",               ПолученныеДанные.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", Новый УникальныйИдентификатор(ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВнешниеИдентификаторыВыгружаемыхОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.уатВнешниеИдентификаторыВыгружаемыхОбъектов КАК уатВнешниеИдентификаторыВыгружаемыхОбъектов
	|ГДЕ
	|	уатВнешниеИдентификаторыВыгружаемыхОбъектов.ВидОбъекта = &ВидОбъекта
	|	И уатВнешниеИдентификаторыВыгружаемыхОбъектов.Валюта = &Валюта
	|	И уатВнешниеИдентификаторыВыгружаемыхОбъектов.ВнешнийИдентификатор = &ВнешнийИдентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение = Строка(Выборка.Объект.УникальныйИдентификатор());
		ПолученныеДанные.УстановитьСсылкуНового(Документы.уатАвансовыйОтчет.ПолучитьСсылку(Выборка.Объект.УникальныйИдентификатор()));
	КонецЕсли;
	
	МассивСтрокРасходы = Новый Массив();
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",                          "Сумма");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента",        "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "НаименованиеВходящегоДокумента");
		ПравилаЗаполнения.Вставить("Поставщик",                      "Контрагент");
		ПравилаЗаполнения.Вставить("СтатьяЗатрат",                   "СтатьяРасходов");
		
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ДатаОтражения", НачалоДня(ДанныеXDTO.КлючевыеСвойства.Дата));
			МассивСтрокРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Расходы", МассивСтрокРасходы);
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УчитыватьНДС", 
			НалогообложениеПродавцаПоСтроке(ДанныеXDTO.НалогообложениеНДСПродавца.Значение, ПолученныеДанные.Организация));
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда 
		УстановленнаяСсылка = ПолученныеДанные.ПолучитьСсылкуНового();
		НайденныйОбъект = УстановленнаяСсылка.ПолучитьОбъект();
		Если НайденныйОбъект = Неопределено Тогда 
			НайтиСоздатьВнешнийИдентификатор(
				УстановленнаяСсылка,
				Перечисления.уатВидыОбъектовУниверсальногоФормата.Документ_АвансовыйОтчет,
				ПолученныеДанные.ВалютаДокумента);
		Иначе 
			ДанныеИБ = НайденныйОбъект;
		КонецЕсли;
	КонецЕсли;
	
	АвансовыйОтчет_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочееПоступление"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПриходДенежныхСредствПрочее;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочиеДоходы"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПрочиеРасчетыСКонтрагентами;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ВозвратОтПоставщика;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов",    "ВалютаВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для Каждого ТекСтрока Из ПолученныеДанные.РасшифровкаПлатежа Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ВалютаВзаиморасчетов) Тогда
			ТекСтрока.ВалютаВзаиморасчетов = ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	
	ПБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ВозвратОтПодотчетника;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочиеДоходы"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПКО.ВозвратОтПоставщика;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
	КонецЕсли;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов",    "ВалютаВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для Каждого ТекСтрока Из ПолученныеДанные.РасшифровкаПлатежа Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ВалютаВзаиморасчетов) Тогда
			ТекСтрока.ВалютаВзаиморасчетов = ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	
	ПКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Подотчет_Получени
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыССотрудниками_Подотчет_Получени";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПриходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПКО.ВозвратОтПодотчетника;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПоступлениеТоваровУслуг;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКон";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНач";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КроссКурс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КроссКурс";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяРасходов";
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВалютная";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСвалютная";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВалютная";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка ТЧ Товары.
	МассивСтрокТовары = Новый Массив();
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие();
		ПравилаЗаполнения.Вставить("Номенклатура",       "Номенклатура");
		ПравилаЗаполнения.Вставить("Упаковка",           "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество",         "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Сумма",              "Сумма");
		ПравилаЗаполнения.Вставить("Цена",               "Цена");
		ПравилаЗаполнения.Вставить("ЦенаЗаУпаковку",     "ЦенаЗаУпаковку");
		ПравилаЗаполнения.Вставить("СтавкаНДС",          "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",           "СуммаНДС");
		
		Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТовары, ПравилаЗаполнения);
			// Если в формате заполнена упаковка, то количество - это количество упаковок, и единица измерения - это полученная упаковка.
			// Иначе количество - это количество, а в качестве единицы измерения будет подставлена единица хранения остатков.
			Если СтруктураДанныхСтроки.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(СтруктураДанныхСтроки.ЕдиницаИзмерения) Тогда
				СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
				Если СтруктураДанныхСтроки.Свойство("ЦенаЗаУпаковку") Тогда
					СтруктураДанныхСтроки.Цена = СтруктураДанныхСтроки.ЦенаЗаУпаковку;
				Иначе
					СтруктураДанныхСтроки.Цена = ?(СтруктураДанныхСтроки.Количество = 0, 0, СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.Количество);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Неопределено);
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	// Обработка ТЧ Услуги.
	МассивСтрокУслуги = Новый Массив();
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура",     "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание",       "Содержание");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество",       "Количество");
		ПравилаЗаполнения.Вставить("Сумма",            "Сумма");
		ПравилаЗаполнения.Вставить("Цена",             "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС",        "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",         "СуммаНДС");
		
		Для Каждого СтрокаУслуги Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаУслуги, ПравилаЗаполнения);
			
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	
	// Обработка доп. реквизитов и сведений.
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено И НЕ КомпонентыОбмена.ПараметрыКонвертации.Поступления_ОтражениеВУчете Тогда
		ПолученныеДанные.НеОтражаетсяВУчете = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ДатаКурса) Тогда
		ПолученныеДанные.ДатаКурса = ПолученныеДанные.Дата;
	КонецЕсли;
	
	флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	Если флМноговалютныйУчет И ПолученныеДанные.КроссКурс = 0 Тогда
		КурсКратностьРасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаВзаиморасчетов, ПолученныеДанные.ДатаКурса);
		Если КурсКратностьРасчетов.Курс <> 0 И ПолученныеДанные.КратностьВзаиморасчетов <> 0 Тогда
			ПолученныеДанные.КроссКурс = ПолученныеДанные.КурсВзаиморасчетов / КурсКратностьРасчетов.Курс
				* КурсКратностьРасчетов.Кратность / ПолученныеДанные.КратностьВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		СтруктураПараметровДляПолученияДоговора = уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
		ПолученныеДанные.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
			ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтруктураПараметровДляПолученияДоговора);
	КонецЕсли;
			
	Для Каждого ТекСтрока Из ПолученныеДанные.Товары Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда 
			ПолученныеДанные.УчитыватьНДС = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			// Если единица измерения не заполнена (то есть в формате не было заполнено свойство Упаковка), 
			// то используется единица хранения для номеклатуры по умолчанию, то есть единица хранения остатков.
			Если Не ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков) Тогда 
					НоменклатураОбъект = ТекСтрока.Номенклатура.ПолучитьОбъект();
					ОтложеннаяОбработка_Номенклатура(НоменклатураОбъект);
					Если НоменклатураОбъект.Модифицированность() Тогда 
						НоменклатураОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				ТекСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов) Тогда
				ТекСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПолученныеДанные.Услуги Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда 
			ПолученныеДанные.УчитыватьНДС = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов) Тогда
			ТекСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрока.Номенклатура);
		КонецЕсли;
			
		Если флМноговалютныйУчет Тогда
			ТекСтрока.Валюта           = ПолученныеДанные.ВалютаДокумента;
			ТекСтрока.ЦенаВалютная     = ТекСтрока.Цена;
			ТекСтрока.СуммаВалютная    = ТекСтрока.Сумма;
			ТекСтрока.СуммаНДСВалютная = ТекСтрока.СуммаНДС;
			ТекСтрока.КроссКурс        = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если флМноговалютныйУчет Тогда
		ПолученныеДанные.СуммаВзаиморасчетов = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(ПолученныеДанные);
	КонецЕсли;
	
	ПоступлениеТоваровУслуг_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
		
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьПоступленияМатериаловИУслуг);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочаяВыдача"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийРКО.РасходДенежныхСредствПрочее;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	РКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочийРасход"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	РКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийРКО.ОплатаПоставщику;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов",    "ВалютаВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для Каждого ТекСтрока Из ПолученныеДанные.РасшифровкаПлатежа Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ВалютаВзаиморасчетов) Тогда
			ТекСтрока.ВалютаВзаиморасчетов = ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	
	РКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Подотчет_Получени
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыССотрудниками_Подотчет_Получени";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатРасходныйКассовыйОрдер;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийРКО.ВыдачаПодотчетнику;
	
	ЗапросКасса = Новый Запрос();
	ЗапросКасса.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
	ЗапросКасса.УстановитьПараметр("Валюта",      ПолученныеДанные.ВалютаДокумента);
	ЗапросКасса.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ВалютаДенежныхСредств = &Валюта
	|	И НЕ Кассы.ЭтоГруппа
	|	И НЕ Кассы.ПометкаУдаления";
	ВыборкаКасса = ЗапросКасса.Выполнить().Выбрать();
	Если ВыборкаКасса.Следующий() Тогда 
		ПолученныеДанные.Касса = ВыборкаКасса.Ссылка;
	Иначе 
		ПолученныеДанные.Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	РКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетПолучателя";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет;
		
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("СтатьяДДС") И ЗначениеЗаполнено(ДанныеXDTO.СтатьяДДС) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		СтруктураДанныхСтроки = Новый Структура("СуммаПлатежа, СтатьяДвиженияДенежныхСредств", ПолученныеДанные.СуммаДокумента, ДанныеXDTO.СтатьяДДС);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочееСписание"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочиеРасходы"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Контрагент,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов",    "ВалютаВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для Каждого ТекСтрока Из ПолученныеДанные.РасшифровкаПлатежа Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ВалютаВзаиморасчетов) Тогда
			ТекСтрока.ВалютаВзаиморасчетов = ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	
	СБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Подотчет_Получен
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками_Подотчет_Получен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.уатПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторПлатежа";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодотчетноеЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Контрагент,Номер,Организация");
	
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ВыдачаПодотчетнику;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив();
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма",     "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
	Если ПолученныеДанные <> Неопределено Тогда
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации.ПроводитьФинансовыеДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПКО_Справочник_Банки_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Банки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Банки_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СВИФТБИК";
	НоваяСтрока.СвойствоФормата = "СВИФТБИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Страна";
	НоваяСтрока.СвойствоФормата = "Страна";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,КоррСчет,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ПКО_Справочник_Банки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_Банки_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Страна) И Не ДанныеИБ = Неопределено И ЗначениеЗаполнено(ДанныеИБ.Страна) Тогда
		ПолученныеДанные.Страна = ДанныеИБ.Страна;
	ИначеЕсли Не ЗначениеЗаполнено(ПолученныеДанные.Страна) Тогда
		ПолученныеДанные.Страна = Справочники.СтраныМира.Россия;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИностранныйБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
	
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец: выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "";
		Если Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		ИначеЕсли Найти(Владелец.ТипЗначения, "Контрагент") > 0 Тогда
			ИмяПКО = "Справочник_Контрагенты_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	// Определяем, иностранный ли банк, в котором открыт счет
	Если ЗначениеЗаполнено(ПолученныеДанные.Банк) И ТипЗнч(ПолученныеДанные.Банк) = Тип("СправочникСсылка.Банки") Тогда
		ПолученныеДанные.ИностранныйБанк = ПолученныеДанные.Банк.Страна <> Справочники.СтраныМира.Россия;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыНоменклатуры"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Услуга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// ТипНоменклатуры
	ТипНоменклатуры = ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры.Значение;
	Если ТипНоменклатуры = "Услуга" Или ТипНоменклатуры = "Работа" Тогда
		ПолученныеДанные.Услуга = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВедениеВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Организация,РасчетыВУсловныхЕдиницах,Дата,Контрагент,Наименование,Номер");
	
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
	
	// ВедениеВзаиморасчетов.
	Если Не ДанныеИБ = Неопределено И ЗначениеЗаполнено(ДанныеИБ.ВедениеВзаиморасчетов) Тогда
		ПолученныеДанные.ВедениеВзаиморасчетов = ДанныеИБ.ВедениеВзаиморасчетов;
	Иначе
		ПолученныеДанные.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДокументыФизическихЛиц"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокументаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицоОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДокумента,Физлицо");
	
КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидДокументаОтбор", ДанныеXDTO.ВидДокументаОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор", ДанныеXDTO.ПериодОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицоОтбор", ДанныеXDTO.ФизическоеЛицоОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ФизическиеЛица_Получение");
	ПКО_ВидовДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ВидыДокументовФизическихЛиц");
	
	ФизЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ФизическоеЛицоОтбор, 
				ПКО_ФизЛица, 
				"ПолучитьСсылку").Ссылка;
				
	ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ВидДокументаОтбор, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
		
	ПолученныеДанные.Отбор.Физлицо.Значение = ФизЛицоСсылка;
	ПолученныеДанные.Отбор.Физлицо.Использование = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПолученныеДанные.Отбор.ВидДокумента.Значение = ВидДокумента;
		ПолученныеДанные.Отбор.ВидДокумента.Использование = Истина;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор) Тогда
		ПолученныеДанные.Отбор.Период.Значение = ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор;
		ПолученныеДанные.Отбор.Период.Использование = Истина;		
	КонецЕсли;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Физлицо = ФизЛицоСсылка;
			СтрокаЗаписи.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.ВидДокумента, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
			СтрокаЗаписи.Период           = Строка.Период;
			СтрокаЗаписи.Серия            = Строка.Серия;
			СтрокаЗаписи.Номер            = Строка.Номер;
			СтрокаЗаписи.Представление    = Строка.Представление;
			СтрокаЗаписи.ДатаВыдачи       = Строка.ДатаВыдачи;
			СтрокаЗаписи.СрокДействия     = Строка.СрокДействия;
			СтрокаЗаписи.КемВыдан         = Строка.КемВыдан;
			СтрокаЗаписи.КодПодразделения = Строка.КодПодразделения;
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
				СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Строка.ЯвляетсяУдостоверяющимЛичность;
			Иначе
				Если СтрокаЗаписи.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
					СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Получение
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЕдиницыИзмерения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЕдиницыИзмерения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмеренияУпаковки_Получение
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмеренияУпаковки_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаПоКлассификатору";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,ЕдиницаПоКлассификатору,Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйНомер";
	НоваяСтрока.СвойствоФормата = "НалоговыйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
		// не удаляются, если этих значений нет в полученных данных.
		// Если значение есть - то оно обновляется.
		ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.КонтактнаяИнформация.Загрузить(ДанныеИБ.КонтактнаяИнформация.Выгрузить());
		
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ВидНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыНоменклатуры_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НоменклатурнаяГруппа";
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчета";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Услуга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Код,Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// ТипНоменклатуры
	ТипНоменклатуры = ДанныеXDTO.ТипНоменклатуры.Значение;
	Если ТипНоменклатуры = "Услуга" Или ТипНоменклатуры = "Работа" Тогда
		ПолученныеДанные.Услуга = Истина;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Получение
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатурныеГруппы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НоменклатурныеГруппы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатуры"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатурныеГруппы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЮридическоеФизическоеЛицо,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.НаименованиеПолное) Тогда
		ДанныеДляЗаписиВИБ.НаименованиеПолное = ДанныеДляЗаписиВИБ.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.НаименованиеСокращенное) Тогда
		ДанныеДляЗаписиВИБ.НаименованиеСокращенное = ДанныеДляЗаписиВИБ.Наименование;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
		// не удаляются, если этих значений нет в полученных данных.
		// Если значение есть - то оно обновляется.
		ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.КонтактнаяИнформация.Загрузить(ДанныеИБ.КонтактнаяИнформация.Выгрузить());
		
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "СкладГруппа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("АдресСтрокой") И ЗначениеЗаполнено(ДанныеXDTO.АдресСтрокой) Тогда
		АдресСклада = НайтиСоздатьПунктНазначения(ДанныеXDTO.АдресСтрокой, КомпонентыОбмена.ПараметрыКонвертации);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("АдресСклада", АдресСклада);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ЗаписатьАдресСклада(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.уатСтатьиРасходов;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(
		?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФИО";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,ФИО");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО");
	
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	
	ЗагрузитьДополнительныеСведения(
		ФизЛицоСсылка, 
		ПолученныеДанные.ДополнительныеСвойства,
		КомпонентыОбмена
	);
	
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
	
	Если ДанныеИБ <> Неопределено Тогда
		// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
		// не удаляются, если этих значений нет в полученных данных.
		// Если значение есть - то оно обновляется.
		ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.КонтактнаяИнформация.Загрузить(ДанныеИБ.КонтактнаяИнформация.Выгрузить());
		
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗагружаетсяИзИнтернета";
	НоваяСтрока.СвойствоФормата = "ЗагружаетсяИзИнтернета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наценка";
	НоваяСтрока.СвойствоФормата = "Наценка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнаяВалюта";
	НоваяСтрока.СвойствоФормата = "ОсновнаяВалюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописи";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописи";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУстановкиКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодМВД";
	НоваяСтрока.СвойствоФормата = "КодМВД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПФР";
	НоваяСтрока.СвойствоФормата = "КодПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВладелецДополнительныхЗначений";
	НоваяСтрока.СвойствоФормата = "ВладелецДополнительныхЗначений";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияИспользуются";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияИспользуются";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияСВесом";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияСВесом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Заголовок";
	НоваяСтрока.СвойствоФормата = "Заголовок";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыВыбораЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыВыбораЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаполнятьОбязательно";
	НоваяСтрока.СвойствоФормата = "ЗаполнятьОбязательно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МногострочноеПолеВвода";
	НоваяСтрока.СвойствоФормата = "МногострочноеПолеВвода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подсказка";
	НоваяСтрока.СвойствоФормата = "Подсказка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФорматСвойства";
	НоваяСтрока.СвойствоФормата = "ФорматСвойства";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДополнительноеСведение";
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вес";
	НоваяСтрока.СвойствоФормата = "Вес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппыГруппа
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатурныеГруппыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа3";
	НоваяСтрока.СвойствоФормата = "КодАльфа3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа"; //@NON-NLS-1
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	

	// ВидыДоговоров.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
	ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку, "СКомиссионеромНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку, "СКомитентомНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСкладов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСкладов;
	ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Оптовый, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Розничный, "Розничный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ВидыСкладов.Оптовый);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ВидыСкладов.Розничный);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура АвансовыйОтчет_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	Если Не ДанныеИБ.Мультивалютный Тогда 
		// Заменяем свойства, которые получили из XDTO.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Расходы
	
	РасходыИсточник = ПолученныеДанные.Расходы;
	
	Если ДанныеИБ.Мультивалютный Тогда 
		СтруктураПоиска = Новый Структура("Валюта", ПолученныеДанные.ВалютаДокумента);
		РасходыПриемник = ДанныеИБ.Расходы.НайтиСтроки(СтруктураПоиска);
	Иначе 
		РасходыПриемник = ДанныеИБ.Расходы;
	КонецЕсли;
	
	Если РасходыИсточник.Количество() = РасходыПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По РасходыИсточник.Количество() - 1 Цикл
			СтрокаИсточник = РасходыИсточник[ИндексСтроки];
			СтрокаПриемник = РасходыПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Сумма) Тогда
				СтрокаПриемник.Сумма = СтрокаИсточник.Сумма;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Контрагент) Тогда
				СтрокаПриемник.Контрагент = СтрокаИсточник.Контрагент;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяРасходов) Тогда
				СтрокаПриемник.СтатьяРасходов = СтрокаИсточник.СтатьяРасходов;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаПриемник.ДатаОтражения) Тогда
				СтрокаПриемник.ДатаОтражения = СтрокаИсточник.ДатаОтражения;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаПриемник.ДокументРасхода) Тогда
				Если ЗначениеЗаполнено(СтрокаИсточник.НомерВходящегоДокумента) Тогда
					СтрокаПриемник.НомерВходящегоДокумента = СтрокаИсточник.НомерВходящегоДокумента;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаИсточник.ДатаВходящегоДокумента) Тогда
					СтрокаПриемник.ДатаВходящегоДокумента = СтрокаИсточник.ДатаВходящегоДокумента;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаИсточник.НаименованиеВходящегоДокумента) Тогда
					СтрокаПриемник.НаименованиеВходящегоДокумента = СтрокаИсточник.НаименованиеВходящегоДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ДанныеИБ.Мультивалютный Тогда 
			ПредДанные = ДанныеИБ.Расходы.Выгрузить();
			
			ДанныеИБ.Расходы.Очистить();
			
			Для Каждого СтрокаТаблицы Из ПредДанные Цикл 
				Если СтрокаТаблицы.Валюта <> ПолученныеДанные.ВалютаДокумента Тогда 
					ЗаполнитьЗначенияСвойств(ДанныеИБ.Расходы.Добавить(), СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТаблицы Из ПолученныеДанные.Расходы Цикл 
				НовСтрока = ДанныеИБ.Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицы);
				НовСтрока.Валюта = ПолученныеДанные.ВалютаДокумента;
				Если ПолученныеДанные.ДополнительныеСвойства.Свойство("НалогообложениеНДСПродавца") Тогда
					НовСтрока.УчитыватьНДС = НалогообложениеПродавцаПоСтроке(
						ПолученныеДанные.ДополнительныеСвойства.НалогообложениеНДСПродавца, ПолученныеДанные.Организация);
				КонецЕсли;
			КонецЦикла;
		Иначе 
			ДанныеИБ.Расходы.Загрузить(ПолученныеДанные.Расходы.Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если КомпонентыОбмена.ВерсияФорматаОбмена = "1.0.beta" Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, НалогообложениеНДСПродавца = Ложь, ИмяСвойства = "Налогообложение")
	// Используется для свойства формата НалогообложениеНДС и НалогообложениеНДСПродавца
	// Выгрузка налогообложения производится только в версии формата 1.8 и выше (версии между 1.3 и 1.8 не поддерживаются)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) <= ВерсияФорматаЧислом("1.7") Тогда
		Возврат;
	КонецЕсли;
	
	Если НалогообложениеНДСПродавца Тогда
		Налогообложение = НалогообложениеПродавцаСтрокой(ДанныеИБ.УчитыватьНДС);
	Иначе
	 	Если ДанныеИБ.УчитыватьНДС Тогда
			Налогообложение = "ПродажаОблагаетсяНДС";
		Иначе
	    	Налогообложение = "ПродажаНеОблагаетсяНДС";
	    КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить(ИмяСвойства, Налогообложение);
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		// Выгрузка данных о ФИО
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизическихЛиц
		|ГДЕ ФизическоеЛицо = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		ИмяПКОГруппа = "Справочник_КонтрагентыГруппа";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Банки") Тогда
		ИмяПКО = "Справочник_Банки_Отправка";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения_Отправка";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи_Отправка";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ИмяПКО = "Справочник_Подразделения_Отправка";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ ИЗ ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			ДопРеквизитыСтрока.ТипЗначения = ПКО.ТипДанных;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	// Если история ФИО не передана и не заполнено поле ФИО физческого лица,
	// то заполнять регистр не требуется
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО")
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.ФИО) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
		// Набор записей полностью заменяется на полученные данные
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
			МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
			МенеджерЗаписиФИО.Период   = СтрокаФИО.НачалоПериода;
			МенеджерЗаписиФИО.Фамилия  = СтрокаФИО.Фамилия;
			МенеджерЗаписиФИО.Имя      = СтрокаФИО.Имя;
			МенеджерЗаписиФИО.Отчество = СтрокаФИО.Отчество;
	
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
				Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
					МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
				Иначе
					МенеджерЗаписиФИО.Период = '19700101';
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
		КонецЦикла;
	
	Иначе
		
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолученныеДанные.ФИО);
		МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		
		Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
			МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
		Иначе
			МенеджерЗаписиФИО.Период = '19700101';
		КонецЕсли;
		МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
			
	КонецЕсли;
		
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		ИмяПКО = "Справочник_КонтрагентыГруппа";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		ИмяПКО = "Справочник_Валюты";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Договор")>0 Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения")>0 Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение")>0 Тогда
		ИмяПКО = "Справочник_Подразделения_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		ИмяПКО = "Справочник_СкладыГруппа";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа";
	
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаказНаТС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	Если Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Найти("ВидДоставки") <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидДоставки) И ЗначениеЗаполнено(ДанныеИБ.ВидДоставки) Тогда
			ПолученныеДанные.ВидДоставки = ДанныеИБ.ВидДоставки;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
			ПолученныеДанные.ВидОперации = ДанныеИБ.ВидОперации;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Найти("ВидПеревозки") <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ДанныеИБ.ВидПеревозки) Тогда
			ПолученныеДанные.ВидПеревозки = ДанныеИБ.ВидПеревозки;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты.Найти("ДетализацияЗакрытия") <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ДанныеИБ.ДетализацияЗакрытия) Тогда
			ПолученныеДанные.ДетализацияЗакрытия = ДанныеИБ.ДетализацияЗакрытия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
		ПолученныеДанные.Подразделение = ДанныеИБ.Подразделение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.НомерПоУчетуЗаказчика) И ЗначениеЗаполнено(ДанныеИБ.НомерПоУчетуЗаказчика) Тогда
		ПолученныеДанные.НомерПоУчетуЗаказчика = ДанныеИБ.НомерПоУчетуЗаказчика;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ДатаВходящегоДокумента) И ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента) Тогда
		ПолученныеДанные.ДатаВходящегоДокумента = ДанныеИБ.ДатаВходящегоДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента) И ЗначениеЗаполнено(ДанныеИБ.ВалютаДокумента) Тогда
		ПолученныеДанные.ВалютаДокумента = ДанныеИБ.ВалютаДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) И ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ПолученныеДанные.ДоговорКонтрагента = ДанныеИБ.ДоговорКонтрагента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КурсВзаиморасчетов) И ЗначениеЗаполнено(ДанныеИБ.КурсВзаиморасчетов) Тогда
		ПолученныеДанные.КурсВзаиморасчетов = ДанныеИБ.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КратностьВзаиморасчетов) И ЗначениеЗаполнено(ДанныеИБ.КратностьВзаиморасчетов) Тогда
		ПолученныеДанные.КратностьВзаиморасчетов = ДанныеИБ.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВалютаТоваров) И ЗначениеЗаполнено(ДанныеИБ.ВалютаТоваров) Тогда
		ПолученныеДанные.ВалютаТоваров = ДанныеИБ.ВалютаТоваров;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Грузоотправитель) И ЗначениеЗаполнено(ДанныеИБ.Грузоотправитель) Тогда
		ПолученныеДанные.Грузоотправитель = ДанныеИБ.Грузоотправитель;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Грузополучатель) И ЗначениеЗаполнено(ДанныеИБ.Грузополучатель) Тогда
		ПолученныеДанные.Грузополучатель = ДанныеИБ.Грузополучатель;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.АдресОтправления) И ЗначениеЗаполнено(ДанныеИБ.АдресОтправления) Тогда
		ПолученныеДанные.АдресОтправления = ДанныеИБ.АдресОтправления;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.АдресНазначения) И ЗначениеЗаполнено(ДанныеИБ.АдресНазначения) Тогда
		ПолученныеДанные.АдресНазначения = ДанныеИБ.АдресНазначения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ОтправлениеС) И ЗначениеЗаполнено(ДанныеИБ.ОтправлениеС) Тогда
		ПолученныеДанные.ОтправлениеС = ДанныеИБ.ОтправлениеС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ОтправлениеПо) И ЗначениеЗаполнено(ДанныеИБ.ОтправлениеПо) Тогда
		ПолученныеДанные.ОтправлениеПо = ДанныеИБ.ОтправлениеПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ДоставкаС) И ЗначениеЗаполнено(ДанныеИБ.ДоставкаС) Тогда
		ПолученныеДанные.ДоставкаС = ДанныеИБ.ДоставкаС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ДоставкаПо) И ЗначениеЗаполнено(ДанныеИБ.ДоставкаПо) Тогда
		ПолученныеДанные.ДоставкаПо = ДанныеИБ.ДоставкаПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КонтактноеЛицоГрузоотправителя) И ЗначениеЗаполнено(ДанныеИБ.КонтактноеЛицоГрузоотправителя) Тогда
		ПолученныеДанные.КонтактноеЛицоГрузоотправителя = ДанныеИБ.КонтактноеЛицоГрузоотправителя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КонтактноеЛицоГрузополучателя) И ЗначениеЗаполнено(ДанныеИБ.КонтактноеЛицоГрузополучателя) Тогда
		ПолученныеДанные.КонтактноеЛицоГрузополучателя = ДанныеИБ.КонтактноеЛицоГрузополучателя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтоянкаПунктОтправления) И ЗначениеЗаполнено(ДанныеИБ.СтоянкаПунктОтправления) Тогда
		ПолученныеДанные.СтоянкаПунктОтправления = ДанныеИБ.СтоянкаПунктОтправления;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтоянкаПунктНазначения) И ЗначениеЗаполнено(ДанныеИБ.СтоянкаПунктНазначения) Тогда
		ПолученныеДанные.СтоянкаПунктНазначения = ДанныеИБ.СтоянкаПунктНазначения;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область Товары
	// Мержевание ТЧ Товары.
	флСумма     = Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.Товары.Реквизиты.Найти("Сумма") <> Неопределено;
	флЦена      = Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.Товары.Реквизиты.Найти("Цена") <> Неопределено;
	флСтавкаНДС = Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.Товары.Реквизиты.Найти("СтавкаНДС") <> Неопределено;
	флСуммаНДС  = Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.Товары.Реквизиты.Найти("СуммаНДС") <> Неопределено;
	
	ТоварыИсточник = ПолученныеДанные.Товары;
	ТоварыПриемник = ДанныеИБ.Товары;
	
	Если ТоварыИсточник.Количество() = ТоварыПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По ТоварыИсточник.Количество() - 1 Цикл
			СтрокаИсточник = ТоварыИсточник[ИндексСтроки];
			СтрокаПриемник = ТоварыПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Номенклатура) Тогда
				СтрокаПриемник.Номенклатура = СтрокаИсточник.Номенклатура;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ЕдиницаИзмерения) Тогда
				СтрокаПриемник.ЕдиницаИзмерения = СтрокаИсточник.ЕдиницаИзмерения;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Количество) Тогда
				СтрокаПриемник.Количество = СтрокаИсточник.Количество;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ВесБрутто) Тогда
				СтрокаПриемник.ВесБрутто = СтрокаИсточник.ВесБрутто;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Объем) Тогда
				СтрокаПриемник.Объем = СтрокаИсточник.Объем;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КоличествоМест) Тогда
				СтрокаПриемник.КоличествоМест = СтрокаИсточник.КоличествоМест;
			КонецЕсли;
			Если флСумма И ЗначениеЗаполнено(СтрокаИсточник.Сумма) Тогда
				СтрокаПриемник.Сумма = СтрокаИсточник.Сумма;
			КонецЕсли;
			Если флЦена И ЗначениеЗаполнено(СтрокаИсточник.Цена) Тогда
				СтрокаПриемник.Цена = СтрокаИсточник.Цена;
			КонецЕсли;
			Если флСтавкаНДС И ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если флСуммаНДС И ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ЗаказНаТС_ЗаполнитьОбщиеСвойства_ПРОФ(ПолученныеДанные, ДанныеИБ, ОтправлениеИзСвоегоСклада, ПрибытиеВСвойСклад, ПараметрыКонвертации)
	Если ОтправлениеИзСвоегоСклада И ПрибытиеВСвойСклад Тогда
		ПолученныеДанные.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад;
	ИначеЕсли ОтправлениеИзСвоегоСклада И Не ПрибытиеВСвойСклад Тогда
	    ПолученныеДанные.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь;
	ИначеЕсли Не ОтправлениеИзСвоегоСклада И ПрибытиеВСвойСклад Тогда
		ПолученныеДанные.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад;
	Иначе
		ПолученныеДанные.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьДверь;
	КонецЕсли;
	ПолученныеДанные.ВидОперации = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
	
	ПолученныеДанные.ДатаКурса = ПолученныеДанные.Дата;
	
	Для Каждого ТекСтрока Из ПолученныеДанные.Товары Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда 
			ПолученныеДанные.УчитыватьНДС = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			// Если единица измерения не заполнена (то есть в формате не было заполнено свойство Упаковка), 
			// то используется единица хранения для номеклатуры по умолчанию, то есть единица хранения остатков.
			Если Не ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков) Тогда 
					НоменклатураОбъект = ТекСтрока.Номенклатура.ПолучитьОбъект();
					ОтложеннаяОбработка_Номенклатура(НоменклатураОбъект);
					Если НоменклатураОбъект.Модифицированность() Тогда 
						НоменклатураОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				ТекСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
			
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
			ТекСтрока.ВесБрутто      = ВесОбъем.Вес;
			ТекСтрока.Объем          = ВесОбъем.Объем;
			ТекСтрока.КоличествоМест = ВесОбъем.КоличествоМест;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура();
	СтруктураОбъектовНастроек.Вставить("Организация",   ПолученныеДанные.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПолученныеДанные.Подразделение);
	
	ПолученныеДанные.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидПеревозки) Тогда 
		ПолученныеДанные.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
	КонецЕсли;
	
	ДетализацияНастройка = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ДетализацияЗаказаГрузоотправителя);
	Если ДетализацияНастройка = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
		ДетализацияНастройка = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
	КонецЕсли;
	ПолученныеДанные.ДетализацияЗакрытия = ДетализацияНастройка;
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ДетализацияЗакрытия) Тогда 
		ПолученныеДанные.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.АдресОтправления) Тогда
		Если ОтправлениеИзСвоегоСклада Тогда
			ПолученныеДанные.АдресОтправления = уатОбщегоНазначения_уэ.АдресСклада(ПолученныеДанные.Грузоотправитель);
			Если Не ЗначениеЗаполнено(ПолученныеДанные.АдресОтправления) Тогда
				ПолученныеДанные.АдресОтправления = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойПунктОтправления);
			КонецЕсли;
		Иначе
			ПолученныеДанные.АдресОтправления = ПолучитьАдресДоставки_ПРОФ(ПолученныеДанные.Грузоотправитель, ПолученныеДанные.Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.АдресНазначения) Тогда
		Если ПрибытиеВСвойСклад Тогда
			ПолученныеДанные.АдресНазначения = уатОбщегоНазначения_уэ.АдресСклада(ПолученныеДанные.Грузополучатель);
			Если Не ЗначениеЗаполнено(ПолученныеДанные.АдресНазначения) Тогда
				ПолученныеДанные.АдресНазначения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойПунктОтправления);
			КонецЕсли;
		Иначе
			ПолученныеДанные.АдресНазначения = ПолучитьАдресДоставки_ПРОФ(ПолученныеДанные.Грузополучатель, ПолученныеДанные.Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПунктаОтправления = ПолучитьПараметрыПункта_ПРОФ(ПолученныеДанные.АдресОтправления, ПолученныеДанные.Грузоотправитель, ПолученныеДанные.Дата);
	ПолученныеДанные.ОтправлениеС            = ПараметрыПунктаОтправления.ОкноС;
	ПолученныеДанные.ОтправлениеПо           = ПараметрыПунктаОтправления.ОкноПо;
	ПолученныеДанные.СтоянкаПунктОтправления = ПараметрыПунктаОтправления.Стоянка;
	
	ПараметрыПунктаНазначения = ПолучитьПараметрыПункта_ПРОФ(ПолученныеДанные.АдресНазначения, ПолученныеДанные.Грузополучатель, ПолученныеДанные.Дата);
	ПолученныеДанные.ДоставкаС              = ПараметрыПунктаНазначения.ОкноС;
	ПолученныеДанные.ДоставкаПо             = ПараметрыПунктаНазначения.ОкноПо;
	ПолученныеДанные.СтоянкаПунктНазначения = ПараметрыПунктаНазначения.Стоянка;
	
	ПолученныеДанные.КонтактноеЛицоГрузоотправителя = ПолучитьКонтактноеЛицоКонтрагента_ПРОФ(ПолученныеДанные.Грузоотправитель);
	ПолученныеДанные.КонтактноеЛицоГрузополучателя  = ПолучитьКонтактноеЛицоКонтрагента_ПРОФ(ПолученныеДанные.Грузополучатель);
	
	Если ПрибытиеВСвойСклад Тогда
		ПолученныеДанные.НаправлениеПеревозки = ПараметрыПунктаНазначения.НаправлениеПеревозки
	Иначе
		ПолученныеДанные.НаправлениеПеревозки = ПараметрыПунктаОтправления.НаправлениеПеревозки
	КонецЕсли;
	
	// Дата и номер входящего документа
	ПолученныеДанные.ДополнительныеСвойства.Свойство("НомерПоУчетуЗаказчика", ПолученныеДанные.НомерПоУчетуЗаказчика);
	ПолученныеДанные.ДополнительныеСвойства.Свойство("ДатаВходящегоДокумента", ПолученныеДанные.ДатаВходящегоДокумента);
	
	// Номер документа
	Если ПараметрыКонвертации.ЗаказыНаТС_ИспользоватьАвтоматическуюНумерацию Тогда
		Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные.УстановитьНовыйНомер();
		Иначе
			ПолученныеДанные.Номер = ДанныеИБ.Номер;
		КонецЕсли;
	КонецЕсли;
	
	// Добавление в комментарий имени документа универсального формата, из которого был загружен Заказ на ТС
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ТипЗначенияXDTO") Тогда
		Если ПараметрыКонвертации.СинонимыОбъектовФормата.Свойство(ПолученныеДанные.ДополнительныеСвойства.ТипЗначенияXDTO) Тогда
			СинонимОбъектаФормата = ПараметрыКонвертации.СинонимыОбъектовФормата[ПолученныеДанные.ДополнительныеСвойства.ТипЗначенияXDTO];
		Иначе
			СинонимОбъектаФормата = ПолученныеДанные.ДополнительныеСвойства.ТипЗначенияXDTO;
		КонецЕсли;
		ЗагруженоИзДокумента = СтрШаблон("%1 %2", НСтр("ru = 'Загружено из документа'"), СинонимОбъектаФормата);
		Если ПустаяСтрока(ПолученныеДанные.Комментарий) Тогда
			ПолученныеДанные.Комментарий = ЗагруженоИзДокумента;
		ИначеЕсли Стрнайти(ПолученныеДанные.Комментарий, ЗагруженоИзДокумента, НаправлениеПоиска.СКонца) = 0 Тогда
			ПолученныеДанные.Комментарий = СтрШаблон("%1 (%2)", ПолученныеДанные.Комментарий,	ЗагруженоИзДокумента
			);
		КонецЕсли;
	 КонецЕсли;
КонецПроцедуры
Процедура ЗаписатьАдресСклада(СкладСсылка, ДополнительныеСвойства)
	Если ДополнительныеСвойства.Свойство("АдресСклада")
		И ЗначениеЗаполнено(ДополнительныеСвойства.АдресСклада) Тогда
	
		МенЗаписи = РегистрыСведений.уатАдресаСкладов_уэ.СоздатьМенеджерЗаписи();
		МенЗаписи.Склад = СкладСсылка;
		МенЗаписи.Адрес = ДополнительныеСвойства.АдресСклада;
		МенЗаписи.Записать();
	
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	// Если в дополнительных реквизитах, которые получены из сообщения обмена,
	// нет значения, которое указано в базе, то сохраняем это значение в данных ИБ.
	
	СвойстваДополнительныхРеквизитовПолученныхДанных = ПолученныеДанные.ДополнительныеРеквизиты.Выгрузить();
	СвойстваДополнительныхРеквизитовПолученныхДанных.Свернуть("Свойство", "");
	
	Для Каждого СвойствоДополнительногоРеквизита Из СвойстваДополнительныхРеквизитовПолученныхДанных Цикл
		Если ЗначениеЗаполнено(СвойствоДополнительногоРеквизита.Свойство) Тогда
			
			СтруктураОтбора = Новый Структура("Свойство", СвойствоДополнительногоРеквизита.Свойство);	
		
			// Перед тем, как добавить реквизиты из полученных данных, нужно предварительно
			// удалить строки для свойства из ДанныеИБ.
			
			СтрокиДляУдаления = ДанныеИБ.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.ДополнительныеРеквизиты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				ЗаполнитьЗначенияСвойств(ДанныеИБ.ДополнительныеРеквизиты.Добавить(), СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	// Если в контактной информации, которые получены из сообщения обмена,
	// нет значения, которое указано в базе, то сохраняем это значение в данных ИБ.
	
	СвойстваВидаКонтактнойИнформации = ПолученныеДанные.КонтактнаяИнформация.Выгрузить();
	СвойстваВидаКонтактнойИнформации.Свернуть("Вид", "");
	
	Для Каждого СвойствоВидаКонтактнойИнформации Из СвойстваВидаКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СвойствоВидаКонтактнойИнформации.Вид) Тогда
			
			СтруктураОтбора = Новый Структура("Вид", СвойствоВидаКонтактнойИнформации.Вид);	
		
			// Перед тем, как добавить виды контактной информации из полученных данных, нужно предварительно
			// удалить строки для свойства из ДанныеИБ.
			
			СтрокиДляУдаления = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.КонтактнаяИнформация.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				ЗаполнитьЗначенияСвойств(ДанныеИБ.КонтактнаяИнформация.Добавить(), СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		
		ТипОбъекта = ПолученныеДанные.Метаданные().Имя;
		РодительВидовКИ = Справочники.ВидыКонтактнойИнформации["Справочник"+ТипОбъекта];
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			
			ТекВидКИ = Неопределено;
			
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				ТипКИ = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
				НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
				
				Если ЗначениеЗаполнено(НаименованиеКИ) Тогда
					Запрос = Новый Запрос();
					Запрос.Параметры.Вставить("Родитель",     РодительВидовКИ);
					Запрос.Параметры.Вставить("Наименование", НаименованиеКИ);
					Запрос.Параметры.Вставить("Тип",          ТипКИ);
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ВидыКонтактнойИнформации.Ссылка
					|ИЗ
					|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
					|ГДЕ
					|	ВидыКонтактнойИнформации.Родитель = &Родитель
					|	И ВидыКонтактнойИнформации.Наименование = &Наименование
					|	И ВидыКонтактнойИнформации.Тип = &Тип";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ТекВидКИ = Выборка.Ссылка;
					Иначе
						ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
						ВидКИОбъект.ОбменДанными.Загрузка = Истина;
						ВидКИОбъект.Используется = Истина;
						ВидКИОбъект.Родитель     = РодительВидовКИ;
						ВидКИОбъект.Наименование = НаименованиеКИ;
						ВидКИОбъект.Тип = ТипКИ;
						ВидКИОбъект.Записать();
						ТекВидКИ = ВидКИОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailФизЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				Если ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				Если ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекВидКИ, "Тип, РазрешитьВводНесколькихЗначений, ЗапретитьРедактированиеПользователем");
			
			// Проверим, что вид КИ не поддерживает множественные значения.
			// Если так - то нужно убедиться, что в табличной части нет такого вида КИ
			СтрокиВидаКИ = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ТекВидКИ));
			Если СтрокиВидаКИ.Количество() > 0 Тогда
				Если НЕ СвойстваВидаКИ.РазрешитьВводНесколькихЗначений Тогда
					Если СвойстваВидаКИ.ЗапретитьРедактированиеПользователем Тогда
						ТекстИсключения = НСтр("ru = 'Вид контактной информации %1 полученного объекта указан несколько раз. Загрузка не возможна.'");
						ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ТекВидКИ); 
						ВызватьИсключение ТекстИсключения;
					Иначе
						ОбъектВидаКИ = ТекВидКИ.ПолучитьОбъект();
						ОбъектВидаКИ.РазрешитьВводНесколькихЗначений = Истина;
						ОбъектВидаКИ.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ, СвойстваВидаКИ.Тип);
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Функция НайтиСоздатьВнешнийИдентификатор(ОбъектСсылка, ВидОбъекта, Валюта=Неопределено, ФизическоеЛицо=Неопределено)
	Если Валюта = Неопределено Тогда 
		Валюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	Если ФизическоеЛицо = Неопределено Тогда 
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объект",          ОбъектСсылка);
	Запрос.УстановитьПараметр("ВидОбъекта",      ВидОбъекта);
	Запрос.УстановитьПараметр("Валюта",          Валюта);
	Запрос.УстановитьПараметр("ФизическоеЛицо",  ФизическоеЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатВнешниеИдентификаторыВыгружаемыхОбъектов.ВнешнийИдентификатор КАК ВнешнийИдентификатор
	|ИЗ
	|	РегистрСведений.уатВнешниеИдентификаторыВыгружаемыхОбъектов КАК уатВнешниеИдентификаторыВыгружаемыхОбъектов
	|ГДЕ
	|	уатВнешниеИдентификаторыВыгружаемыхОбъектов.Объект = &Объект
	|	И уатВнешниеИдентификаторыВыгружаемыхОбъектов.ВидОбъекта = &ВидОбъекта
	|	И уатВнешниеИдентификаторыВыгружаемыхОбъектов.Валюта = &Валюта
	|	И уатВнешниеИдентификаторыВыгружаемыхОбъектов.ФизическоеЛицо = &ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ВнешнийИдентификатор = Выборка.ВнешнийИдентификатор;
	Иначе 
		ВнешнийИдентификатор = Новый УникальныйИдентификатор();
		
		НаборЗаписей = РегистрыСведений.уатВнешниеИдентификаторыВыгружаемыхОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
		НаборЗаписей.Отбор.ВидОбъекта.Установить(ВидОбъекта);
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Объект               = ОбъектСсылка;
		Запись.ВидОбъекта           = ВидОбъекта;
		Запись.Валюта               = Валюта;
		Запись.ФизическоеЛицо       = ФизическоеЛицо;
		Запись.ВнешнийИдентификатор = ВнешнийИдентификатор;
				
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Возврат ВнешнийИдентификатор;
КонецФункции
Функция НайтиСоздатьПунктНазначения(АдресПункта, ПараметрыКонвертации)
	ПунктНазначения = Справочники.уатПунктыНазначения.ПустаяСсылка();
		
		НаименованиеПункта = СокрЛП(Лев(АдресПункта, 150));
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", НаименованиеПункта);
		Запрос.УстановитьПараметр("АдресПункта",  СокрЛП(Лев(АдресПункта, 200)));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	уатПунктыНазначения.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА уатПунктыНазначения.Адрес = &АдресПункта
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
		|ГДЕ
		|	(уатПунктыНазначения.Наименование = &Наименование
		|			ИЛИ уатПунктыНазначения.Адрес = &АдресПункта)
		|				И НЕ уатПунктыНазначения.ПометкаУдаления
		|				И НЕ уатПунктыНазначения.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ПунктНазначения = Выборка.Ссылка;
		
		Иначе
			// {Совместимость}
			// Этот код - для совместимости с старым форматом хранения адреса в XML.
			ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
			
			КонтактнаяИнформацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
			КонтактнаяИнформацияXDTO.Комментарий   = "";
			КонтактнаяИнформацияXDTO.Представление = АдресПункта;
			КонтактнаяИнформацияXDTO.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
			
			АдресXDTO = КонтактнаяИнформацияXDTO.Состав;
			АдресXDTO.Страна = Строка(Справочники.СтраныМира.Россия);
			АдресXDTO.Состав = АдресПункта;
			
			КонтактнаяИнформацияXML = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
			// {/Совместимость}
			
			СтруктураАдресаJSON = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
			СтруктураАдресаJSON.country = Строка(Справочники.СтраныМира.Россия);
			СтруктураАдресаJSON.value = АдресПункта;
			КонтактнаяИнформацияJSON = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(СтруктураАдресаJSON);
			
			ПунктОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
			ПунктОбъект.Наименование        = НаименованиеПункта;
			ПунктОбъект.Страна              = Справочники.СтраныМира.Россия;
			ПунктОбъект.ВремяДоступностиПо  = '00010101235900';
			ПунктОбъект.РадиусПоиска        = 100;
					
			ЗначениеУстановлено = Ложь;
			ТекПользователь     = Пользователи.АвторизованныйПользователь();
			ПодразделениеПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
			Если ЗначениеЗаполнено(ПодразделениеПользователь) Тогда 
				ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПодразделениеПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
				Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
					ПунктОбъект.РадиусПоиска        = ЗначениеНастройки;
					ЗначениеУстановлено = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеУстановлено Тогда 
				ОрганизацияПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
				Если ЗначениеЗаполнено(ОрганизацияПользователь) Тогда 
					ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОрганизацияПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
					Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
						ПунктОбъект.РадиусПоиска = ЗначениеНастройки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ПунктОбъект.Адрес               = АдресПункта;
			// {Совместимость}
			// Этот код - для совместимости с старым форматом хранения адреса в XML.
			ПунктОбъект.ЗначенияПолейАдреса = Новый ХранилищеЗначения(КонтактнаяИнформацияXML, Новый СжатиеДанных(9));
			// {/Совместимость}
			ПунктОбъект.ЗначениеАдреса      = КонтактнаяИнформацияJSON;
			
			Если ПараметрыКонвертации.ЗаказыНаТС_ГеокодироватьПункты Тогда
				ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформацияJSON, Ложь,, ТипЭлектронныхКарт);
				ТекстОшибкиOSM = "";
				мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
				Если ТекстОшибкиOSM = "" Тогда 
					ПунктОбъект.Лат = мсвКоординат.Лат;
					ПунктОбъект.Лон = мсвКоординат.Лон;
					
				Иначе 
					стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(КонтактнаяИнформацияJSON, Истина,, ТипЭлектронныхКарт);
					ТекстОшибкиOSM = "";
					мсвКоординат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта,, ТекстОшибкиOSM);
					Если ТекстОшибкиOSM = "" Тогда 
						ПунктОбъект.Лат = мсвКоординат.Лат;
						ПунктОбъект.Лон = мсвКоординат.Лон;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПунктОбъект.Записать();
			
			ПунктНазначения = ПунктОбъект.Ссылка;
		КонецЕсли;
		
		Возврат ПунктНазначения;
КонецФункции
Функция НалогообложениеПродавцаПоСтроке(НалогообложениеНДСПродавца, Организация)
	Если НалогообложениеНДСПродавца = "ОблагаетсяНДС" Тогда
		УчитыватьНДС = Истина;
	ИначеЕсли НалогообложениеНДСПродавца = "НеОблагаетсяНДС" Тогда
		УчитыватьНДС = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда 
		УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	Иначе
		УчитыватьНДС = Истина;
	КонецЕсли;
	
	Возврат УчитыватьНДС;
КонецФункции
Функция НалогообложениеПродавцаСтрокой(УчитыватьНДС)
	Если УчитыватьНДС Тогда
	    Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	
	Возврат Налогообложение;
КонецФункции
Процедура ОбработатьВыгрузкуУпаковокВТаблице(ТаблицаТовары)
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") И ТаблицаТовары.Колонки.Найти("Упаковка") <> Неопределено Тогда
		ЕстьКолонкаКоличествоУпаковок = ТаблицаТовары.Колонки.Найти("КоличествоУпаковок") <> Неопределено;
		ЕстьКолонкаКоличествоУпаковокУчет = ТаблицаТовары.Колонки.Найти("КоличествоУпаковокУчет") <> Неопределено;
		ЕстьКолонкаЦенаЗаУпаковку = ТаблицаТовары.Колонки.Найти("ЦенаЗаУпаковку") <> Неопределено;
		Для Каждого ТекСтрока Из ТаблицаТовары Цикл
			ОшибкаВыгрузкаУпаковки = Не РазрешенаВыгрузкаУпаковки(ТекСтрока.Упаковка);
			Если ОшибкаВыгрузкаУпаковки И ЕстьКолонкаКоличествоУпаковок Тогда
				ТекСтрока.КоличествоУпаковок = Неопределено;
			КонецЕсли;
			Если ОшибкаВыгрузкаУпаковки И ЕстьКолонкаКоличествоУпаковокУчет Тогда
				ТекСтрока.КоличествоУпаковокУчет = Неопределено;
			КонецЕсли;
			Если ОшибкаВыгрузкаУпаковки И ЕстьКолонкаЦенаЗаУпаковку Тогда
				ТекСтрока.ЦенаЗаУпаковку = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
	
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено 
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И НЕ ДопЗначенияИспользуются 
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
					Продолжить;
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено) 
				ИЛИ НЕ ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено 
					И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтключитьНеиспользуемыеДляПолученияПОД(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	// Удаление правил обработки данных получения, для которых отключены все правила конвертации объектов,
	// чтобы объекты игнорировались, а не помечались на удаление
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	// ПОД для получения, использование которых зависит от одного флага на форме настроек обмена
	ТаблицаЗапрещенныеДляПолученияПОД = Новый ТаблицаЗначений;
	ТаблицаЗапрещенныеДляПолученияПОД.Колонки.Добавить("ИмяЗапрещенныеКПолучению");
	ТаблицаЗапрещенныеДляПолученияПОД.Колонки.Добавить("ИмяПОД");
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "АвансовыйОтчет";
	НоваяСтрока.ИмяПОД = "Документ_АвансовыйОтчет_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеВходящее_ПриходДенежныхСредствПрочее";
	НоваяСтрока.ИмяПОД = "Документ_ПБДСПрочееПоступление_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеВходящее_ПрочиеРасчетыСКонтрагентами";
	НоваяСтрока.ИмяПОД = "Документ_ПБДСПрочиеДоходы_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеВходящее_ОплатаПокупателя";
	НоваяСтрока.ИмяПОД = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеВходящее_ВозвратОтПодотчетника";
	НоваяСтрока.ИмяПОД = "Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПриходныйКассовыйОрдер_ПриходДенежныхСредствПрочее";
	НоваяСтрока.ИмяПОД = "Документ_ПКОПрочееПоступление_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПриходныйКассовыйОрдер_ПрочиеРасчетыСКонтрагентами";
	НоваяСтрока.ИмяПОД = "Документ_ПКОПрочиеДоходы_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПриходныйКассовыйОрдер_ОплатаПокупателя";
	НоваяСтрока.ИмяПОД = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПриходныйКассовыйОрдер_ВозвратОтПодотчетника";
	НоваяСтрока.ИмяПОД = "Документ_ПКОРасчетыССотрудниками_Подотчет_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ИмяПОД = "Документ_ПоступлениеТоваровУслуг_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "РеализацияТоваровУслуг_ВЗаказНаТС";
	НоваяСтрока.ИмяПОД = "Документ_РеализацияТоваровУслугВЗаказНаТС_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "РасходныйКассовыйОрдер_РасходДенежныхСредствПрочее";
	НоваяСтрока.ИмяПОД = "Документ_РКОПрочаяВыдача_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "РасходныйКассовыйОрдер_ПрочиеРасчетыСКонтрагентами";
	НоваяСтрока.ИмяПОД = "Документ_РКОПрочийРасход_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "РасходныйКассовыйОрдер_ОплатаПоставщику";
	НоваяСтрока.ИмяПОД = "Документ_РКОРасчетыСКонтрагентами_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "РасходныйКассовыйОрдер_ВыдачаПодотчетнику";
	НоваяСтрока.ИмяПОД = "Документ_РКОРасчетыССотрудниками_Подотчет_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеИсходящее_РасходДенежныхСредствПрочее";
	НоваяСтрока.ИмяПОД = "Документ_СБДСПереводНаДругойСчет_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеИсходящее_ПрочееСписание";
	НоваяСтрока.ИмяПОД = "Документ_СБДСПрочееСписание_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеИсходящее_ПрочиеРасчетыСКонтрагентами";
	НоваяСтрока.ИмяПОД = "Документ_СБДСПрочиеРасходы_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеИсходящее_ОплатаПоставщику";
	НоваяСтрока.ИмяПОД = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	
	НоваяСтрока = ТаблицаЗапрещенныеДляПолученияПОД.Добавить();
	НоваяСтрока.ИмяЗапрещенныеКПолучению = "ПлатежноеПоручениеИсходящее_ВыдачаПодотчетнику";
	НоваяСтрока.ИмяПОД = "Документ_СБДСРасчетыССотрудниками_Подотчет_Получение";
	
	Для Каждого ТекСтрокаПОД Из ТаблицаЗапрещенныеДляПолученияПОД Цикл
		Если ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти(ТекСтрокаПОД.ИмяЗапрещенныеКПолучению, "Имя") <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("Имя", ТекСтрокаПОД.ИмяПОД);
			НайденныеСтроки = КомпонентыОбмена.ПравилаОбработкиДанных.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				КомпонентыОбмена.ПравилаОбработкиДанных.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// ПОД для получения, использование которых зависит от нескольких флагов на форме настроек обмена
	Если ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС", "Имя")                            <> Неопределено
		И ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_Самовывоз", "Имя")                 <> Неопределено
		И ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_ДоКлиента", "Имя")                 <> Неопределено
		И ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_СиламиПеревозчикаПоАдресу", "Имя") <> Неопределено
		И ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_СиламиПеревозчика", "Имя")         <> Неопределено
		И ПараметрыКонвертации.ЗапрещенныеКПолучению.Найти("ЗаказКлиента_ВЗаказНаТС_СлужбаДоставки", "Имя")            <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Имя", "Документ_ЗаказКлиентаВЗаказНаТС_Получение");
		НайденныеСтроки = КомпонентыОбмена.ПравилаОбработкиДанных.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			КомпонентыОбмена.ПравилаОбработкиДанных.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Номенклатура(Объект)
	// Единица хранения остатков.
	Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) И Не ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков) Тогда 
		ЕдиницаХранения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаХранения.Владелец                = Объект.Ссылка;
		ЕдиницаХранения.Наименование            = Объект.ЕдиницаИзмерения.Наименование;
		ЕдиницаХранения.ЕдиницаПоКлассификатору = Объект.ЕдиницаИзмерения;
		ЕдиницаХранения.Коэффициент             = 1;
		ЕдиницаХранения.Записать();
		
		Объект.ЕдиницаХраненияОстатков = ЕдиницаХранения.Ссылка;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	// Заполнение контрагента, если он не заполнен.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.ДоговорКонтрагента) Тогда
				СтрокаПриемник.ДоговорКонтрагента = СтрокаИсточник.ДоговорКонтрагента;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ВалютаВзаиморасчетов) Тогда
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ВалютаВзаиморасчетов;
			Иначе
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаВзаиморасчетов) Тогда
				СтрокаПриемник.СуммаВзаиморасчетов = СтрокаИсточник.СуммаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаПлатежа) Тогда
				СтрокаПриемник.СуммаПлатежа = СтрокаИсточник.СуммаПлатежа;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КратностьВзаиморасчетов) Тогда
				СтрокаПриемник.КратностьВзаиморасчетов = СтрокаИсточник.КратностьВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КурсВзаиморасчетов) Тогда
				СтрокаПриемник.КурсВзаиморасчетов = СтрокаИсточник.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	// Заполнение контрагента, если он не заполнен.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	// Если в базе указана касса - она в приоритете.
	Если ЗначениеЗаполнено(ДанныеИБ.Касса) Тогда
		ПолученныеДанные.Касса = ДанныеИБ.Касса;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаПлатежа) Тогда
				СтрокаПриемник.СуммаПлатежа = СтрокаИсточник.СуммаПлатежа;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ДоговорКонтрагента) Тогда
				СтрокаПриемник.ДоговорКонтрагента = СтрокаИсточник.ДоговорКонтрагента;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ВалютаВзаиморасчетов) Тогда
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ВалютаВзаиморасчетов;
			Иначе
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КурсВзаиморасчетов) Тогда
				СтрокаПриемник.КурсВзаиморасчетов = СтрокаИсточник.КурсВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КратностьВзаиморасчетов) Тогда
				СтрокаПриемник.КратностьВзаиморасчетов = СтрокаИсточник.КратностьВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаВзаиморасчетов) Тогда
				СтрокаПриемник.СуммаВзаиморасчетов = СтрокаИсточник.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	СоответствиеВидовКИ = Новый Соответствие();
	
	// Виды КИ справочника "Контрагенты".
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты,         "АдресЭлектроннойПочты");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,       "Телефон");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты,          "Факс");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,     "ФактическийАдрес");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,       "ЮридическийАдрес");
	
	// Виды КИ справочника "Организации".
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,                       "АдресЭлектроннойПочты");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,               "ПочтовыйАдрес");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,                     "Телефон");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации, "ТелефонРабочий");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,                        "Факс");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,                   "ФактическийАдрес");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,                     "ЮридическийАдрес");
	
	// Виды КИ справочника "ФизическиеЛица".
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.EmailФизЛица,                  "АдресЭлектроннойПочты");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ПочтовыйАдрес");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,  "ТелефонРабочий");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
		
		ЗначениеВУФ = СоответствиеВидовКИ.Получить(СтрокаКИ.Вид); 
		
		Если СвойстваВидаКИ.Предопределенный И Не ЗначениеВУФ = Неопределено Тогда
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = ЗначениеВУФ;
			
		Иначе
			
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
			
			Если ИмяТипаКИ <> "Адрес"
				И ИмяТипаКИ <> "АдресЭлектроннойПочты"
				И ИмяТипаКИ <> "ВебСтраница"
				И ИмяТипаКИ <> "Другое"
				И ИмяТипаКИ <> "Телефон"
				И ИмяТипаКИ <> "Факс" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		
		КонецЕсли;
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПолучитьАдресДоставки_ПРОФ(Грузополучатель, Контрагент)
	АдресДоставки = Справочники.уатПунктыНазначения.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Грузополучатель", Грузополучатель);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
	|	1 КАК Приоритет
	|ИЗ
	|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	|ГДЕ
	|	КонтрагентыПунктыНазначения.Ссылка = &Грузополучатель
	|	И КонтрагентыПунктыНазначения.Основной
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыПунктыНазначения.ПунктНазначения,
	|	2
	|ИЗ
	|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	|ГДЕ
	|	КонтрагентыПунктыНазначения.Ссылка = &Грузополучатель
	|	И НЕ КонтрагентыПунктыНазначения.Основной
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыПунктыНазначения.ПунктНазначения,
	|	3
	|ИЗ
	|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	|ГДЕ
	|	КонтрагентыПунктыНазначения.Ссылка = &Контрагент
	|	И КонтрагентыПунктыНазначения.Основной
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыПунктыНазначения.ПунктНазначения,
	|	4
	|ИЗ
	|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	|ГДЕ
	|	КонтрагентыПунктыНазначения.Ссылка = &Контрагент
	|	И НЕ КонтрагентыПунктыНазначения.Основной
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ВыборкаПункты = Запрос.Выполнить().Выбрать();
	Если ВыборкаПункты.Следующий() Тогда 
		АдресДоставки = ВыборкаПункты.ПунктНазначения;
		
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтрагентыКонтактнаяИнформация.Представление КАК ПредставлениеАдреса,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Грузополучатель
		|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыКонтактнаяИнформация.Представление,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
		|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		ВыборкаКИ = Запрос.Выполнить().Выбрать();
		Если ВыборкаКИ.Следующий() Тогда 
			НаименованиеПункта = СокрЛП(Лев(ВыборкаКИ.ПредставлениеАдреса, 150));
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеПункта);
			Запрос.УстановитьПараметр("АдресПункта",  СокрЛП(Лев(ВыборкаКИ.ПредставлениеАдреса, 200)));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	уатПунктыНазначения.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА уатПунктыНазначения.Адрес = &АдресПункта
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
			|ГДЕ
			|	(уатПунктыНазначения.Наименование = &Наименование
			|			ИЛИ уатПунктыНазначения.Адрес = &АдресПункта
			|				И НЕ уатПунктыНазначения.ПометкаУдаления
			|				И НЕ уатПунктыНазначения.ЭтоГруппа)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				АдресДоставки = Выборка.Ссылка;
				
			Иначе
				ПунктОбъект = Справочники.уатПунктыНазначения.СоздатьЭлемент();
				ПунктОбъект.Наименование        = НаименованиеПункта;
				ПунктОбъект.Страна              = Справочники.СтраныМира.Россия;
				ПунктОбъект.ВремяДоступностиПо  = '00010101235900';
				ПунктОбъект.РадиусПоиска        = 100;
				
				ЗначениеУстановлено = Ложь;
				ТекПользователь     = Пользователи.АвторизованныйПользователь();
				ПодразделениеПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ПодразделениеПользователь) Тогда 
					ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПодразделениеПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
					Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
						ПунктОбъект.РадиусПоиска        = ЗначениеНастройки;
						ЗначениеУстановлено = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеУстановлено Тогда 
					ОрганизацияПользователь = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
					Если ЗначениеЗаполнено(ОрганизацияПользователь) Тогда 
						ЗначениеНастройки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОрганизацияПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.РадиусПоискаВПунктеМетров);
						Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда 
							ПунктОбъект.РадиусПоиска = ЗначениеНастройки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ПунктОбъект.Адрес               = ВыборкаКИ.ПредставлениеАдреса;
				ПунктОбъект.ЗначенияПолейАдреса = Новый ХранилищеЗначения(ВыборкаКИ.ЗначенияПолей, Новый СжатиеДанных(9));
				ПунктОбъект.Записать();
				
				АдресДоставки = ПунктОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат АдресДоставки;
КонецФункции
Функция ПолучитьКонтактноеЛицоКонтрагента_ПРОФ(КонтрагентСсылка)
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", КонтрагентСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	|ГДЕ
	|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
	|	И КонтрагентыПунктыНазначения.Основной
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
	|	2
	|ИЗ
	|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
	|ГДЕ
	|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
	|	И НЕ КонтрагентыПунктыНазначения.Основной
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.ОсновноеКонтактноеЛицо,
	|	3
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КонтактноеЛицо) Тогда
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
КонецФункции
Функция ПолучитьНомерДокументаПоТипу(СтарыйНомер, ПрефиксТипа)
	ПозНачалаНомера = 0;
	
	Для Сч = 1 По СтрДлина(СтарыйНомер) Цикл
		ТекСимвол = Сред(СтарыйНомер, Сч, 1);
		Попытка 
			СимволКакЧисло = Число(ТекСимвол);
			ЭтоЧисло = Истина;
		Исключение
			ЭтоЧисло = Ложь;
		КонецПопытки;
		Если ЭтоЧисло и ПозНачалаНомера = 0 Тогда
			ПозНачалаНомера = Сч;
		ИначеЕсли Не ЭтоЧисло И Не ПозНачалаНомера = 0 Тогда
			ПозНачалаНомера = 0;
		КонецЕсли;
	КонецЦикла;
	
	НомерБезПрефикса = Сред(СтарыйНомер, ПозНачалаНомера);
	Префикс          = Лев(СтарыйНомер, ПозНачалаНомера-1);
	
	Возврат "" + ПрефиксТипа + Префикс + Сред(НомерБезПрефикса, 2);
КонецФункции
Функция ПолучитьПараметрыПункта_ПРОФ(ПунктСсылка, Контрагент, ДатаДокумента)
	ПараметрыПункта = Новый Структура("ОкноС, ОкноПо, Стоянка, Лат, Лон", '00010101', '00010101', 0, 0, 0);
		
	ПараметрыПункта.Стоянка = уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка);
	
	ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ПунктСсылка, Контрагент);
	Если НЕ ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиС)
		И НЕ ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда 
		ПараметрыПункта.ОкноС  = НачалоДня(ДатаДокумента);
		ПараметрыПункта.ОкноПо = КонецДня(ДатаДокумента);
	Иначе
		ПараметрыПункта.ОкноС  = НачалоДня(ДатаДокумента) + (ВремяДоступности.ВремяДоступностиС - '00010101');
		ПараметрыПункта.ОкноПо = НачалоДня(ДатаДокумента) + (ВремяДоступности.ВремяДоступностиПо - '00010101');
		ПараметрыПункта.Лат    = ПунктСсылка.Лат;
		ПараметрыПункта.Лон    = ПунктСсылка.Лон;
	КонецЕсли;
	
	ПараметрыПункта.Вставить("НаправлениеПеревозки", ПунктСсылка.НаправлениеПеревозки);
	
	Возврат ПараметрыПункта;
КонецФункции
Функция ПолучитьСинонимыОбъектовФормата(ВариантНастройки)
	СинонимыОбъектовФормата = Новый Структура;
	
	МакетСинонимов = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПолучитьМакет("СинонимыОбъектовФормата");
		
	КолонкаПриемник = Неопределено;
	Для СчКолонок = 1 По МакетСинонимов.ШиринаТаблицы Цикл 
		Если НРег(МакетСинонимов.Область("R1C"+Формат(СчКолонок, "ЧН=0; ЧГ=0")).Текст) = НРег(ВариантНастройки) Тогда
			КолонкаПриемник = СчКолонок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КолонкаПриемник <> Неопределено Тогда
		Для СчСтрок = 2 По МакетСинонимов.ВысотаТаблицы Цикл
			
			ЯчейкаИмени = СтрШаблон("R%1C1", Формат(СчСтрок, "ЧН=0; ЧГ=0"));
			ЯчейкаСинонима = СтрШаблон("R%1C%2", Формат(СчСтрок, "ЧН=0; ЧГ=0"), Формат(КолонкаПриемник, "ЧН=0; ЧГ=0"));
			
			ИмяОбъектаФормата     = СокрЛП(МакетСинонимов.Область(ЯчейкаИмени).Текст);
			СинонимОбъектаФормата = СокрЛП(МакетСинонимов.Область(ЯчейкаСинонима).Текст);
			
			СинонимыОбъектовФормата.Вставить(ИмяОбъектаФормата, СинонимОбъектаФормата);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СинонимыОбъектовФормата;
КонецФункции
Функция ПолучитьСтрокиТоваровЗаказаНаТС(ДанныеXDTO)
	МассивСтрокТовары = Новый Массив();
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие();
		ПравилаЗаполнения.Вставить("Номенклатура",       "Номенклатура");
		ПравилаЗаполнения.Вставить("Упаковка",           "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество",         "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Сумма",              "Сумма");
		ПравилаЗаполнения.Вставить("Цена",               "Цена");
		ПравилаЗаполнения.Вставить("ЦенаЗаУпаковку",     "ЦенаЗаУпаковку");
		ПравилаЗаполнения.Вставить("СтавкаНДС",          "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",           "СуммаНДС");
		
		Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(СтрокаТовары, ПравилаЗаполнения);
			// Если в формате заполнена упаковка, то количество - это количество упаковок, и единица измерения - это полученная упаковка.
			// Иначе количество - это количество, а в качестве единицы измерения будет подставлена единица хранения остатков.
			Если СтруктураДанныхСтроки.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(СтруктураДанныхСтроки.ЕдиницаИзмерения) Тогда
				СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
				Если СтруктураДанныхСтроки.Свойство("ЦенаЗаУпаковку") Тогда
					СтруктураДанныхСтроки.Цена = СтруктураДанныхСтроки.ЦенаЗаУпаковку;
				Иначе
					СтруктураДанныхСтроки.Цена = ?(СтруктураДанныхСтроки.Количество = 0, 0, СтруктураДанныхСтроки.Сумма / СтруктураДанныхСтроки.Количество);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Неопределено);
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрокТовары;
КонецФункции
Процедура ПоступлениеТоваровУслуг_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область Товары
	
	ТоварыИсточник = ПолученныеДанные.Товары;
	ТоварыПриемник = ДанныеИБ.Товары;
	
	Если ТоварыИсточник.Количество() = ТоварыПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По ТоварыИсточник.Количество() - 1 Цикл
			СтрокаИсточник = ТоварыИсточник[ИндексСтроки];
			СтрокаПриемник = ТоварыПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Номенклатура) Тогда
				СтрокаПриемник.Номенклатура = СтрокаИсточник.Номенклатура;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ЕдиницаИзмерения) Тогда
				СтрокаПриемник.ЕдиницаИзмерения = СтрокаИсточник.ЕдиницаИзмерения;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Количество) Тогда
				СтрокаПриемник.Количество = СтрокаИсточник.Количество;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Сумма) Тогда
				СтрокаПриемник.Сумма = СтрокаИсточник.Сумма;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Цена) Тогда
				СтрокаПриемник.Цена = СтрокаИсточник.Цена;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Услуги
	
	УслугиИсточник = ПолученныеДанные.Услуги;
	УслугиПриемник = ДанныеИБ.Услуги;
	
	Если УслугиИсточник.Количество() = УслугиПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По УслугиИсточник.Количество() - 1 Цикл
			СтрокаИсточник = УслугиИсточник[ИндексСтроки];
			СтрокаПриемник = УслугиПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Номенклатура) Тогда
				СтрокаПриемник.Номенклатура = СтрокаИсточник.Номенклатура;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Содержание) Тогда
				СтрокаПриемник.Содержание = СтрокаИсточник.Содержание;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Количество) Тогда
				СтрокаПриемник.Количество = СтрокаИсточник.Количество;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Сумма) Тогда
				СтрокаПриемник.Сумма = СтрокаИсточник.Сумма;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Цена) Тогда
				СтрокаПриемник.Цена = СтрокаИсточник.Цена;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяРасходов) Тогда
				СтрокаПриемник.СтатьяРасходов = СтрокаИсточник.СтатьяРасходов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.Валюта) Тогда
				СтрокаПриемник.Валюта = СтрокаИсточник.Валюта;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ЦенаВалютная) Тогда
				СтрокаПриемник.ЦенаВалютная = СтрокаИсточник.ЦенаВалютная;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаВалютная) Тогда
				СтрокаПриемник.СуммаВалютная = СтрокаИсточник.СуммаВалютная;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДСВалютная) Тогда
				СтрокаПриемник.СуммаНДСВалютная = СтрокаИсточник.СуммаНДСВалютная;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КроссКурс) Тогда
				СтрокаПриемник.КроссКурс = СтрокаИсточник.КроссКурс;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Функция РазрешенаВыгрузкаУпаковки(ЕдиницаИзмерения, ТекстОшибки = "")
	// Имеет смысл выгружать только единицы измерения, подчиненные номенклатуре. 
	// Единицы измерения с другим владельцем устарели и не поддерживаются.
	Если ТипЗнч(ЕдиницаИзмерения.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Основная единица измерения не выгружается, по аналогии с ERP.
	Если ЕдиницаИзмерения.Ссылка = ЕдиницаИзмерения.Владелец.ЕдиницаХраненияОстатков Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Поле "Единица по классификатору" не является обязательным для заполнения, 
	// но при незаполненной единице по классификатору обмен невозможен
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения.ЕдиницаПоКлассификатору) Тогда
		ТекстНСтр = НСтр("ru = 'Не заполнено значение реквизита ""Единица по классификатору"" для единицы измерения ""%1"" номенклатуры ""%2""'; 
			|en = 'Field ""Unit by classifier"" for measurement unit ""%1"" of product ""%2"" is empty'");
		ТекстОшибки = СтрШаблон(ТекстНСтр, ЕдиницаИзмерения.Наименование, ЕдиницаИзмерения.Владелец);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции
Процедура РКО_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	// Заполнение контрагента, если он не заполнен.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	// Если в базе указана касса - она в приоритете.
	Если ЗначениеЗаполнено(ДанныеИБ.Касса) Тогда
		ПолученныеДанные.Касса = ДанныеИБ.Касса;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаПлатежа) Тогда
				СтрокаПриемник.СуммаПлатежа = СтрокаИсточник.СуммаПлатежа;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ДоговорКонтрагента) Тогда
				СтрокаПриемник.ДоговорКонтрагента = СтрокаИсточник.ДоговорКонтрагента;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ВалютаВзаиморасчетов) Тогда
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ВалютаВзаиморасчетов;
			Иначе
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КурсВзаиморасчетов) Тогда
				СтрокаПриемник.КурсВзаиморасчетов = СтрокаИсточник.КурсВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КратностьВзаиморасчетов) Тогда
				СтрокаПриемник.КратностьВзаиморасчетов = СтрокаИсточник.КратностьВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаВзаиморасчетов) Тогда
				СтрокаПриемник.СуммаВзаиморасчетов = СтрокаИсточник.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура СБДС_Merge(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	// Заполнение контрагента, если он не заполнен.
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		ПолученныеДанные.Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			Если ЗначениеЗаполнено(СтрокаИсточник.ДоговорКонтрагента) Тогда
				СтрокаПриемник.ДоговорКонтрагента = СтрокаИсточник.ДоговорКонтрагента;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.ВалютаВзаиморасчетов) Тогда
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ВалютаВзаиморасчетов;
			Иначе
				СтрокаПриемник.ВалютаВзаиморасчетов = СтрокаИсточник.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтавкаНДС) Тогда
				СтрокаПриемник.СтавкаНДС = СтрокаИсточник.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаВзаиморасчетов) Тогда
				СтрокаПриемник.СуммаВзаиморасчетов = СтрокаИсточник.СуммаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаНДС) Тогда
				СтрокаПриемник.СуммаНДС = СтрокаИсточник.СуммаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.СуммаПлатежа) Тогда
				СтрокаПриемник.СуммаПлатежа = СтрокаИсточник.СуммаПлатежа;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КратностьВзаиморасчетов) Тогда
				СтрокаПриемник.КратностьВзаиморасчетов = СтрокаИсточник.КратностьВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаИсточник.КурсВзаиморасчетов) Тогда
				СтрокаПриемник.КурсВзаиморасчетов = СтрокаИсточник.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура УдалитьНеиспользуемыеПКО(ИспользованиеПКО)
	МассивУдаляемыхПравил = Новый Массив;
	Для Каждого ТекПравило Из ИспользованиеПКО Цикл
		Если ТекПравило.Значение = Ложь Тогда
			МассивУдаляемыхПравил.Добавить(ТекПравило.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекИмяПравила Из МассивУдаляемыхПравил Цикл
		ИспользованиеПКО.Удалить(ТекИмяПравила);
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьИспользованиеПКО(ИспользованиеПКО, Режим)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО[Правило.Ключ] = Режим;
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПроводитьДокумент)
	Если ПроводитьДокумент = Истина Тогда
		ПолученныеДанные.Проведен = Истина;
		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации:
//                         Ключ - имя параметра, значение - значение параметра, по умолчанию - Неопределено.
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ПутевыеЛисты_ВидРасходаГСМ");
	ПараметрыКонвертации.Вставить("ПутевыеЛисты_ДатаДокумента");
	ПараметрыКонвертации.Вставить("ЗапрещенныеКОтправке");
	ПараметрыКонвертации.Вставить("ЗапрещенныеКПолучению");
	ПараметрыКонвертации.Вставить("ЗаказыНаТС_ГеокодироватьПункты");
	ПараметрыКонвертации.Вставить("ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента");
	ПараметрыКонвертации.Вставить("ЗаказыНаТС_ИспользоватьАвтоматическуюНумерацию");
	ПараметрыКонвертации.Вставить("ПроводитьЗаказыНаТС");
	ПараметрыКонвертации.Вставить("ПроводитьПоступленияМатериаловИУслуг");
	ПараметрыКонвертации.Вставить("ПроводитьФинансовыеДокументы");
	ПараметрыКонвертации.Вставить("Поступления_ОтражениеВУчете");
	ПараметрыКонвертации.Вставить("СинонимыОбъектовФормата");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура:
//    * ОбъектОбработки - Произвольный
//    * ИспользованиеПКО - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * ДанныеИБ - СправочникОбъект
//               - ДокументОбъект
//               - и т.п.
//    * ПолученныеДанные - СправочникОбъект
//                       - ДокументОбъект
//                       - и т.п.
//    * КонвертацияСвойств - ТаблицаЗначений
//    * ДанныеXDTO - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * СтекВыгрузки - Массив из Произвольный
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВыдачаРасходныхМатериалов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВыдачаРасходныхМатериалов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетНаОплатуПоставщика_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетНаОплатуПоставщика_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_ЗаправкаГСМ_Отправка_ПриОбработке" Тогда 
		ПОД_ЗаправкаГСМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОбработке" Тогда 
		ПОД_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_ОперацииСТЖ_Отправка_ПриОбработке" Тогда 
		ПОД_ОперацииСТЖ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_ПутевыеЛисты_Отправка_ПриОбработке" Тогда 
		ПОД_ПутевыеЛисты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_РемонтныеЛисты_Отправка_ПриОбработке" Тогда 
		ПОД_РемонтныеЛисты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_СливГСМ_Отправка_ПриОбработке" Тогда 
		ПОД_СливГСМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ОсновныеСредства_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ОсновныеСредства_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказКлиентаВЗаказНаТС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказКлиентаВЗаказНаТС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщикуВЗаказНаТС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщикуВЗаказНаТС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваровВЗаказНаТС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваровВЗаказНаТС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОПрочееПоступление_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОПрочееПоступление_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОПрочиеДоходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОПрочиеДоходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОПрочаяВыдача_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОПрочаяВыдача_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОПрочийРасход_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОПрочийРасход_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыССотрудниками_Подотчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ВыдачаРасхМатериаловВПередМатВПроизвод_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ВыдачаРасхМатериаловВПередМатВЭксплуат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваровВПересчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваровВПересчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Отправк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПокупателюВЗаказ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПокупателюВЗаказ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщикаВЗаказ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПоставщикаВЗаказ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_уатТТД_в_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаправкаГСМ_в_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаправкаГСМ_в_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаправкаГСМ_в_ПередачаМатериаловВЭксплуат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаправкаГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаправкаГСМ_в_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ЗаправкаГСМ_в_СписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЗаправкаГСМ_в_СписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_НачислениеЗарплаты_в_ОтражениеЗарплатыВФУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ОперацииСТЖ_Долив_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВПроизвод_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ОперацииСТЖ_Залив_в_ПередачаМатВЭксплуат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ПутЛист_ВыработкаСотрудников_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПутЛист_ВыработкаСотрудников_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВПрВо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПутЛист_РасхГСМ_в_ПередачаМатериаловВЭксп_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПутЛист_РасхГСМ_в_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_ВыработкаСотрудников_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_ВыработкаСотрудников_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_ПередМатериалВПрВо_АвтСерв_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_ПередМатериалВПрВо_Собств_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_ПередМатериалВПрВо_Собств_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_ПередМатериалВЭксплуат_АвтСерв_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_ПередМатериалВЭксплуат_Собств_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_ПоступТоварУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_ПоступТоварУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_СписаниеЗапасов_АвтСерв_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_РемЛист_в_СписаниеЗапасов_Собств_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РемЛист_в_СписаниеЗапасов_Собств_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_СливГСМ_в_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_СливГСМ_в_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_СливГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_СливГСМ_в_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Спр_ПараметрыВыработки_ВидыРаботСотрудник_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Банки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатурныеГруппы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатурныеГруппы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_ВозвратТоваровОтПокупателяВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_ВозвратТоваровПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_ЗаказКлиентаВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_ЗаказПоставщикуВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_ПеремещениеТоваровВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Док_РеализацияТоваровУслугВЗаказНаТС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Подотчет_Получени_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Подотчет_Получен_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Банки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Банки_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатурныеГруппы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НоменклатурныеГруппы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Номенклатура" Тогда 
		ОтложеннаяОбработка_Номенклатура(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

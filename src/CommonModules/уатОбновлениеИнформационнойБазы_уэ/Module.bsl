////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации "Управление автотранспортом".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "ТЛЭиУправлениеАвтотранспортомКОРП";
	Описание.Версия = "1.1.26.1";
	Если Описание.Свойство("ИдентификаторИнтернетПоддержки") Тогда
		Описание.ИдентификаторИнтернетПоддержки = "UAT_TLE_CORP";
	КонецЕсли;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("УправлениеЛицензированием");
	Описание.ТребуемыеПодсистемы.Добавить("УправлениеАвтотранспортомПроф");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// События возникающие в контексте Сервера
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить("уатОбновлениеИнформационнойБазы_уэ");
	
КонецПроцедуры // ПриДобавленииОбработчиковСлужебныхСобытий()


////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область Обработчики_выполняемые_при_каждом_обновлении_ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьИдентификаторыОбъектовМетаданных";
	Обработчик.МонопольныйРежим = Истина;
	Обработчик.ОбщиеДанные = Истина;
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_заполнении_пустой_ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы_уэ.ПервоначальноеЗаполнениеИБ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы_уэ.ЗаполнитьСписокКлючевыхОпераций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	// Бюджетирование.
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	Обработчик.НачальноеЗаполнение = Истина;
	// Конец Бюджетирование.
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_1_1_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.5.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы_уэ.ЗаполнитьРеквизитыАктовПриемкиОтгрузки_1_1_5_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
		
	#Область Обработчики_выполняемые_при_обновлении_на_версию_1_1_22
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.21.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы_уэ.ЗаполнитьРеквизитыСпособовВзаимодействий_1_1_21_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Попытка
		ВыполняетсяАпгрейдСтандарт = ПараметрыСеанса.уатВыполняетсяАпгрейдСтандарт;
	Исключение
		ВыполняетсяАпгрейдСтандарт = Ложь;
	КонецПопытки;
	
	Попытка
		ВыполняетсяАпгрейдПРОФ = ПараметрыСеанса.уатВыполняетсяАпгрейдПРОФ;
	Исключение
		ВыполняетсяАпгрейдПРОФ = Ложь;
	КонецПопытки;
	
	стрСведенияОбОбновлении = Новый Структура(
		"ПредыдущаяВерсия,ТекущаяВерсия,ВыводитьОписание,ВыполняетсяАпгрейдСтандарт,ВыполняетсяАпгрейдПРОФ", 
		ПредыдущаяВерсия,
		ТекущаяВерсия,
		ВыводитьОписаниеОбновлений,
		ВыполняетсяАпгрейдСтандарт,
		ВыполняетсяАпгрейдПРОФ
	);
	
	Попытка
		Константы.уатСведенияОбОбновленииИБ_уэ.Установить(Новый ХранилищеЗначения(стрСведенияОбОбновлении, Новый СжатиеДанных(9)));
	Исключение
		ВызватьИсключение НСтр("en='Error when setting value of the constant ""уатСведенияОбОбновленииИБ_уэ""';ru='Ошибка при установке значения константы ""уатСведенияОбОбновленииИБ_уэ""'");
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	Попытка
		ХранилищеСведенийОбОбновлении = Константы.уатСведенияОбОбновленииИБ_уэ.Получить();
		Если ХранилищеСведенийОбОбновлении = Неопределено Тогда 
			ВызватьИсключение НСтр("en='Store information not available';ru='Хранилище сведений не доступно'");
		КонецЕсли;
		
		стрСведенияОбОбновлении = ХранилищеСведенийОбОбновлении.Получить();
		Если стрСведенияОбОбновлении = Неопределено 
			Или Не ТипЗнч(стрСведенияОбОбновлении) = Тип("Структура") Тогда 
				ВызватьИсключение НСтр("en='Storage information is not fil';ru='Хранилище сведений не заполнено'");
		КонецЕсли;
	Исключение
		стрСведенияОбОбновлении = Новый Структура(
			"ПредыдущаяВерсия,ТекущаяВерсия,ВыводитьОписание,ВыполняетсяАпгрейдСтандарт,ВыполняетсяАпгрейдПРОФ", 
			"0.0.0.0",
			"0.0.0.0",
			Ложь,
			Ложь,
			Ложь
		);
	КонецПопытки;
	
	Если стрСведенияОбОбновлении.ВыполняетсяАпгрейдСтандарт Или стрСведенияОбОбновлении.ВыполняетсяАпгрейдПРОФ Тогда
		Возврат;
	КонецЕсли;
	
	Если стрСведенияОбОбновлении.ВыводитьОписание Тогда 
		МакетОписаниеОбновлений = ПолучитьОбщийМакет("уатОписаниеИзмененийСистемы_уэ");
		
		Для Каждого ТекОбл Из Макет.ВыделенныеОбласти Цикл 
			Если Не Найти(ТекОбл.Текст, "Конфигурация успешно обновлена на версию") = 0 Тогда 
				Макет.Очистить();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		предМакет = Новый ТабличныйДокумент;
		предМакет.Вывести(Макет);
		Макет.Очистить();
		
		Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Заголовок"));
		
		весПредыдущаяВерсия = ВесВерсии(стрСведенияОбОбновлении.ПредыдущаяВерсия, ".");
		весТекущаяВерсия    = ВесВерсии(стрСведенияОбОбновлении.ТекущаяВерсия, ".");
		
		списОписанияВерсий = Новый СписокЗначений;
		
		Для Каждого ТекОписаниеВерсии Из МакетОписаниеОбновлений.Области Цикл 
			ИмяОбласти = СокрЛП(ВРег(ТекОписаниеВерсии.Имя));
			Если Лев(ИмяОбласти, 6) = "ВЕРСИЯ" Тогда 
				ВерсияОписания = Прав(ИмяОбласти, СтрДлина(ИмяОбласти)-6);
				весТекОписания = ВесВерсии(ВерсияОписания, "_");
				Если весТекОписания > весПредыдущаяВерсия И весТекОписания <= весТекущаяВерсия Тогда 
					списОписанияВерсий.Добавить(весТекОписания, ВерсияОписания);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		списОписанияВерсий.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для Каждого ТекВерсия Из списОписанияВерсий Цикл 
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + ТекВерсия.Представление));
			Макет.НачатьГруппуСтрок("Версия" + ТекВерсия.Представление);
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + ТекВерсия.Представление));
			Макет.ЗакончитьГруппуСтрок();
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
		КонецЦикла;
		
		Макет.Вывести(предМакет);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомСтандарт";
	Обработчик.Процедура                 = "уатОбновлениеИнформационнойБазы.ПриПереходеСРедакцииСтандарт2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомПроф";
	Обработчик.Процедура                 = "уатОбновлениеИнформационнойБазы_уэ.ПриПереходеСРедакцииПРОФ2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомСтандарт";
	Обработчик.Процедура                 = "уатОбновлениеИнформационнойБазы_уэ.ПриПереходеСРедакцииПРОФ2";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации,
//        следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомСтандарт" Тогда 
		ПараметрыСеанса.уатВыполняетсяАпгрейдСтандарт = Истина;
		
	ИначеЕсли ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомПроф" Тогда 
		ПараметрыСеанса.уатВыполняетсяАпгрейдПРОФ = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий системы

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - Параметры запуска.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Параметры.Вставить("ПодробнаяИнформация", НСтр("en='1C:Transport logistics, freight forwarding and fleet management CORP 1.0';ru='1С:Транспортная логистика, экспедирование и управление автотранспортом КОРП, редакция 1.1'"));
	Иначе
		Параметры.Вставить("ПодробнаяИнформация", НСтр("en='1C:Fleet management PROF 2.1';ru='Управление автотранспортом Проф, редакция 2.2'"));
	КонецЕсли;
	
КонецПроцедуры // ПриДобавленииПараметровРаботыКлиентаПриЗапуске()

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции УАТ

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазыУЭ() Экспорт
	
	// структура описания подсистемы УАТ
	ОписаниеУЭ = Новый Структура("Имя, Версия, ТребуемыеПодсистемы", "", "", Новый Массив);
	
	// заполение данных по подсистеме УАТ
	ПриДобавленииПодсистемы(ОписаниеУЭ);
	
	Если ОбновлениеИнформационнойБазыСлужебный.НеобходимоВыполнитьОбновление(
			ОписаниеУЭ.Версия, ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ОписаниеУЭ.Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия, Знач Разделитель) Экспорт 
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, Разделитель));
	
КонецФункции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обработчики_выполняемые_при_заполнении_пустой_ИБ

// Процедура выполняет первоначальное заполнение
//
Процедура ПервоначальноеЗаполнениеИБ() Экспорт
	
	// Заполнение справочников, констант и прочих настроек.
	ЗаполнитьКонстантыПриПервоначальномЗаполненииИБ();
	ЗаполнитьНастройкиКластеризации();
	УстановитьПризнакИспользованияПричинЗакрытияВМП();
	Если ТекущийЯзык() = Метаданные.Языки.Английский Тогда
		// Автоматический запуск помощника английской локализации будет выполнен только в том случае,
		// когда первый запуск происходит от имени пользователя с настроенным английским языком.
		// В противном случае его можно будет запустить вручную.
		// Используется не язык локализации или базы, а именно ТекущийЯзык() пользователя,
		// на котором получаются синонимы объектов метаданных.
		ЗапуститьСтартовыйПомощникДляАнглийскойЛокализации();
	КонецЕсли;
	ЗаполнитьРеквизитыСпособовВзаимодействий();
КонецПроцедуры

// Заполнение реквизитов справочника "уатНастройкиКластеризации_уэ"
//
Процедура ЗаполнитьНастройкиКластеризации()
	
	СпрОб = Справочники.уатНастройкиКластеризации_уэ.МестнаяДоставка.ПолучитьОбъект();
	СпрОб.ШагКластеризации = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	
	СпрОб = Справочники.уатНастройкиКластеризации_уэ.МеждугородняяДоставка.ПолучитьОбъект();
	СпрОб.ШагКластеризации = 20;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	
КонецПроцедуры

// Заполняет константы при первоначальном заполнении ИБ
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура ЗаполнитьКонстантыПриПервоначальномЗаполненииИБ()
	
	Константы.уатИспользоватьРекламации_уэ.Установить(Истина);
	Константы.уатИспользоватьСкладскиеАкты_уэ.Установить(Истина);
	Константы.уатИспользоватьАвтоматическуюМаршрутизацию_уэ.Установить(Истина);
	
КонецПроцедуры // ЗаполнитьКонстантыПриПервоначальномЗаполненииИБ()

// Процедура заполняет реквизит "ИспользоватьВМобильномПриложении" в справочнике "уатПричиныЗакрытияЗаказов"
//
Процедура УстановитьПризнакИспользованияПричинЗакрытияВМП()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПричиныЗакрытияЗаказов.Ссылка
	|ИЗ
	|	Справочник.уатПричиныЗакрытияЗаказов КАК уатПричиныЗакрытияЗаказов
	|ГДЕ
	|	НЕ уатПричиныЗакрытияЗаказов.ИспользоватьВМобильномПриложении";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ИспользоватьВМобильномПриложении = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьСтартовыйПомощникДляАнглийскойЛокализации()
	
	Если Метаданные.Обработки.Найти("уатСтартовыйПомощникДляАнглийскойЛокализации") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Обработки.уатСтартовыйПомощникДляАнглийскойЛокализации.ВыполнитьДействияДляАнглийскойЛокализации();
	
КонецПроцедуры

// Формирует состав ключевых показателей (в случае их отсутствия).
//
Процедура ЗаполнитьСписокКлючевыхОпераций() Экспорт
	
	КлючевыеОперации = Новый Массив();
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "АРМ_Логиста.Открытие");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='AWP Logistician (opening)';ru='АРМ Логиста (открытие)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "АРМ_Логиста.ОбновлениеСпискаЗаказов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='AWP Logistician (update list of orders)';ru='АРМ Логиста (обновление списка заказов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "АРМ_Логиста.ОбновлениеСпискаТС");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='AWP Logistician (updating vehicle list)';ru='АРМ Логиста (обновление списка ТС)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "АРМ_Логиста.МаршрутизацияЗаказов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='AWP Logistics (routing of orders)';ru='АРМ Логиста (маршрутизация заказов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "ЗаказНаТС.РасчетДоходов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='Order for trucking (calculation of incomes)';ru='Заказ на ТС (расчет доходов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "МаршрутныйЛист.РасчетДоходов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='Routing list (income accounting)';ru='Маршрутный лист (расчет доходов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "МаршрутныйЛист.РасчетРасходов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='Routing list (calculation of expenses)';ru='Маршрутный лист (расчет расходов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "ЗаказПеревозчику.РасчетРасходов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='Order to carrier (calculation of expenses)';ru='Заказ перевозчику (расчет расходов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	КлючеваяОперация = Новый Структура();
	КлючеваяОперация.Вставить("Имя",          "ПотребностьВПеревозке.РасчетДоходов");
	КлючеваяОперация.Вставить("Наименование", НСтр("en='Need for the carriage (calculation of income)';ru='Потребность в перевозке (расчет доходов)'"));
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	
	СоздатьКлючевыеОперацииУАТ(КлючевыеОперации);
	
КонецПроцедуры

Процедура СоздатьКлючевыеОперацииУАТ(КлючевыеОперации)
	
	Для Каждого КлючеваяОперация Из КлючевыеОперации Цикл 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ИмяОперации", КлючеваяОперация.Имя);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеОперации.Ссылка
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|ГДЕ
		|	КлючевыеОперации.Имя = &ИмяОперации";
		
		Если Не Запрос.Выполнить().Пустой() Тогда 
			Продолжить;
		КонецЕсли;
		
		СпрОб = Справочники.КлючевыеОперации.СоздатьЭлемент();
		СпрОб.Имя = КлючеваяОперация.Имя;
		СпрОб.Наименование = КлючеваяОперация.Наименование;
		СпрОб.ЦелевоеВремя = КлючеваяОперация.ЦелевоеВремя;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизиты справочника "Способы взаимодействий"
Процедура ЗаполнитьРеквизитыСпособовВзаимодействий() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатСпособыВзаимодействий_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСпособыВзаимодействий_уэ КАК уатСпособыВзаимодействий_уэ
	|ГДЕ
	|	(уатСпособыВзаимодействий_уэ.Предопределенный
	|			ИЛИ НЕ уатСпособыВзаимодействий_уэ.ПометкаУдаления)");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.уатСпособыВзаимодействий_уэ.SMSСообщение
			ИЛИ Выборка.Ссылка = Справочники.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю
			ИЛИ Выборка.Ссылка = Справочники.уатСпособыВзаимодействий_уэ.Напоминание
			ИЛИ Выборка.Ссылка = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо
			Или Выборка.Ссылка = Справочники.уатСпособыВзаимодействий_уэ.СообщениеМобильногоПриложения
			Или Выборка.Ссылка = Справочники.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов Тогда
			Объект.ИспользоватьДляУведомлений = Истина;
		КонецЕсли;
		
		Если Выборка.Ссылка <> Справочники.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю
			И Выборка.Ссылка <> Справочники.уатСпособыВзаимодействий_уэ.Напоминание
			И Выборка.Ссылка <> Справочники.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов Тогда
			Объект.ИспользоватьДляТендеров = Истина;
		КонецЕсли;
		
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_обновления_при_переходе_с_УАТ_ПРОФ_2

// Процедура выполняет обновление ИБ в случае перехода с редакции УАТ ПРОФ 2
//
Процедура ПриПереходеСРедакцииПРОФ2() Экспорт
	
	ПереходСоСТД2_ВыполнитьОбработчикиПервоначальногоЗаполнения();
	
КонецПроцедуры

Процедура ПереходСоСТД2_ВыполнитьОбработчикиПервоначальногоЗаполнения()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	ПриДобавленииОбработчиковОбновления(Обработчики);
	Для Каждого Обработчик Из Обработчики Цикл 
		Если Не (Обработчик.НачальноеЗаполнение Или Обработчик.Версия = "*") Тогда 
			Продолжить;
		КонецЕсли;
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик.Процедура);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_1_1_5

// Заполнение ТЧ документов "Акт приемки" и "Акт отгрузки",
// связанных с разделением на план и факт, а также добавлением новых реквизитов
Процедура ЗаполнитьРеквизитыАктовПриемкиОтгрузки_1_1_5_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатАктПриемки_уэ.Ссылка КАК Ссылка,
	|	уатАктПриемки_уэ.Дата КАК Дата,
	|	уатАктПриемки_уэ.Проведен КАК Проведен
	|ИЗ
	|	Документ.уатАктПриемки_уэ КАК уатАктПриемки_уэ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатАктОтгрузки_уэ.Ссылка,
	|	уатАктОтгрузки_уэ.Дата,
	|	уатАктОтгрузки_уэ.Проведен
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ КАК уатАктОтгрузки_уэ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Проведен Тогда
			Объект.СтатусВыполнения = Справочники.уатСтатусы_уэ.Выполнен;
			Объект.ОперацияВыполнена = Истина;
			Объект.НачалоОперации = Выборка.Дата;
			Объект.ОкончаниеОперации = Выборка.Дата;
		Иначе
			Объект.СтатусВыполнения = Справочники.уатСтатусы_уэ.Новый;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из Объект.Грузы Цикл
			Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
				Если Не СтрокаГруза = Неопределено Тогда 
					ТекСтрока.ВесБрутто      = СтрокаГруза.ВесБрутто * (ТекСтрока.Количество / СтрокаГруза.КоличествоМест);
					ТекСтрока.Объем          = СтрокаГруза.Объем * (ТекСтрока.Количество / СтрокаГруза.КоличествоМест);
					Если ТипЗнч(ТекСтрока.ЕдиницаИзмерения) <> Тип(Справочники.уатВидыУпаковки_уэ) Или ТекСтрока.ЕдиницаИзмерения.Коэффициент = 0 Тогда
						ТекСтрока.КоличествоМест = 0;
					Иначе
						ТекСтрока.КоличествоМест = ТекСтрока.КоличествоМест / ТекСтрока.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				СтрокиТовара = ТекСтрока.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения));
				Если СтрокиТовара.Количество() Тогда 
					ТекСтрока.ВесБрутто      = СтрокиТовара[0].ВесБрутто * (ТекСтрока.Количество / СтрокиТовара[0].Количество);
					ТекСтрока.Объем          = СтрокиТовара[0].Объем * (ТекСтрока.Количество / СтрокиТовара[0].Количество);
					ТекСтрока.КоличествоМест = СтрокиТовара[0].КоличествоМест * (ТекСтрока.Количество / СтрокиТовара[0].Количество);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
				ТекСтрока.ВесБрутто = ТекСтрока.Заказ.ВесБрутто;
				ТекСтрока.Объем = ТекСтрока.Заказ.Объем;
				ТекСтрока.КоличествоМест = ТекСтрока.Заказ.КоличествоМест;
				
			Иначе
				ТекСтрока.ВесБрутто = 0;
				ТекСтрока.Объем = 0;
				ТекСтрока.КоличествоМест = 0;
			КонецЕсли;
			ТекСтрока.Статус = Справочники.уатСтатусы_уэ.ДоставленНаСклад;
		КонецЦикла;
		
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_1_1_21

// Процедура заполняет реквизиты справочника "Способы взаимодействий"
Процедура ЗаполнитьРеквизитыСпособовВзаимодействий_1_1_21_8() Экспорт
	ЗаполнитьРеквизитыСпособовВзаимодействий();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

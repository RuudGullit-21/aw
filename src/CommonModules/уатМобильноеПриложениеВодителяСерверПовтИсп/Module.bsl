
////////////////////////////////////////////////////////////////////////////////
// Общий модуль взаимодействия с мобильным приложением водителя УАТ.
//
// Модуль содержит процедуры и функции повторного использования
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция предназначена для получения настроек работы мобильного приложения. Если настройка не установлена - ей 
// будет присвоено значение по-умолчанию (см. метод "НастройкиМобильногоПриложенияПоУмолчанию()")
//
// Возвращаемое значение:
//   Структура - ключ структуры - имя настройки, значение - соответствующее настройке значение
//
Функция ПолучитьНастройкиМобильногоПриложения() Экспорт 
	
	стрРезультат = НастройкиМобильногоПриложенияПоУмолчанию();
	
	ХранилищеНастройки = Константы.уатНастройкиМобильногоПриложенияВодителя.Получить();
	Если ХранилищеНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	стрНастройки = ХранилищеНастройки.Получить();
	Если стрНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	
	Для Каждого ТекНастройка Из стрРезультат Цикл 
		
		// Версия протокола не зависит от настроек пользователя
		// Остальное - из настроек пользователя
		Если стрНастройки.Свойство(ТекНастройка.Ключ) И НЕ ТекНастройка.Ключ = "protocolVersion" Тогда
			стрРезультат.Вставить(ТекНастройка.Ключ, стрНастройки[ТекНастройка.Ключ]);
		Иначе 
			стрРезультат.Вставить(ТекНастройка.Ключ, НастройкиМобильногоПриложенияПоУмолчанию(ТекНастройка.Ключ));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат стрРезультат;
	
КонецФункции // ПолучитьНастройкиМобильногоПриложения()

// Функция предназначена для получения параметров работы мобильного приложения. Если параметр не установлен - ему 
// будет присвоено значение по-умолчанию (см. метод "ПараметрыМобильногоПриложенияПоУмолчанию()")
//
// Возвращаемое значение:
//   Структура - ключ структуры - имя параметра, значение - соответствующее параметру значение
//
Функция ПолучитьПараметрыДляМобильногоПриложения() Экспорт 
	
	стрРезультат = ПараметрыМобильногоПриложенияПоУмолчанию();
	
	ХранилищеНастройки = Константы.уатПараметрыМобильногоПриложенияВодителя.Получить();
	Если ХранилищеНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	стрПараметры = ХранилищеНастройки.Получить();
	Если стрПараметры = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из стрРезультат Цикл 
		
		// Версия протокола не зависит от настроек пользователя
		// Остальное - из настроек пользователя
		Если стрПараметры.Свойство(ТекПараметр.Ключ) И НЕ ТекПараметр.Ключ = "protocolVersion" Тогда
			стрРезультат.Вставить(ТекПараметр.Ключ, стрПараметры[ТекПараметр.Ключ]);
		Иначе
			стрРезультат.Вставить(ТекПараметр.Ключ, НастройкиМобильногоПриложенияПоУмолчанию(ТекПараметр.Ключ));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат стрРезультат;
	
КонецФункции // ПолучитьПараметрыДляМобильногоПриложения()

// Функция предназначена для получения настроек хранения истории местоположения. Если параметр не установлен - ему 
// будет присвоено значение по-умолчанию (см. метод "ПараметрыХраненияИсторииМестоположенияПоУмолчанию()")
//
// Возвращаемое значение:
//   Структура - ключ структуры - имя параметра, значение - соответствующее параметру значение
//
Функция ПолучитьНастройкиХраненияИсторииМестоположения() Экспорт
	
	стрРезультат = ПараметрыХраненияИсторииМестоположенияПоУмолчанию();
	
	ХранилищеНастройки = Константы.уатНастройкиХраненияИсторииМестоположения.Получить();
	Если ХранилищеНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	стрНастройки = ХранилищеНастройки.Получить();
	Если стрНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из стрРезультат Цикл 
		Если стрНастройки.Свойство(ТекПараметр.Ключ) Тогда
			стрРезультат.Вставить(ТекПараметр.Ключ, стрНастройки[ТекПараметр.Ключ]);
		Иначе 
			стрРезультат.Вставить(ТекПараметр.Ключ, НастройкиМобильногоПриложенияПоУмолчанию(ТекПараметр.Ключ));
		КонецЕсли;
	КонецЦикла;
	
	Возврат стрРезультат;
	
КонецФункции // ПолучитьНастройкиХраненияИсторииМестоположения()

// Функция возвращает признак ведения лога работы web-сервиса "Driver app service (UAT)" 
//
// Возвращаемое значение:
//   Булево - истина - необходимо логировать работу;
//            ложь   - логирование отключено.
//
Функция ВестиЛогWSМПВУАТ() Экспорт 
	
	Возврат Константы.уатВестиЛогWSМПВУАТ.Получить();
	
КонецФункции // ВестиЛогWSМПВУАТ()

// Функция возвращает признак использования мобильного приложения водителя УАТ
//
// Возвращаемое значение:
//   Булево - истина - подсистема работы с мобильным приложением водителя УАТ используется;
//            ложь   - подсистема работы с мобильным приложением водителя УАТ не используется.
//
Функция РазрешенаРаботаСМобильнымПриложением() Экспорт 
	
	Возврат Константы.уатИспользоватьМобильноеПриложениеВодителя.Получить();
	
КонецФункции // РазрешенаРаботаСМобильнымПриложением()

// Функция возвращает описание ошибки по коду на указанном языке
//
// Параметры:
//  КодОшибки - Число  - номер ошибки по таблице ошибок (см. общий макет "уатОписаниеОшибокМобильногоПриложения")
//  Язык      - строка - код локализации описания ошибки (указывается в соответствующей группировке в макете 
//                       "Описание ошибок мобильного приложения".)
//
// Возвращаемое значение:
//   Строка   - строковое описание ошибки на требуемом языке
//
Функция ПолучитьОписаниеКодаОшибки(Знач КодОшибки, Знач Язык="ru") Экспорт 
	
	МакетОшибок = ПолучитьОбщийМакет("уатОписаниеОшибокМобильногоПриложения");
	
	ОбластьПоЯзыку = МакетОшибок.Области.Найти("ОписаниеОшибки_"+Язык);
	Если ОбластьПоЯзыку = Неопределено Тогда 
		ОбластьПоЯзыку = МакетОшибок.Области.Найти("ОписаниеОшибки_ru");
	КонецЕсли;
	
	СтрокаОшибки = МакетОшибок.НайтиТекст(Формат(КодОшибки, "ЧН=0; ЧГ="),,МакетОшибок.Области.Найти("КодОшибки"));
	Если СтрокаОшибки = Неопределено Тогда 
		Возврат ПолучитьОписаниеКодаОшибки(29999, Язык); // неопределенная ошибка
	КонецЕсли;
	
	Возврат МакетОшибок.Область(Сред(СтрокаОшибки.Имя, 1, Найти(СтрокаОшибки.Имя, "C"))+Строка(ОбластьПоЯзыку.Лево)).Текст;
	
КонецФункции // ПолучитьОписаниеКодаОшибки()

// Функция возвращает описание статуса мобильного приложения по коду
//
// Параметры:
//  КодОшибки - Число  - номер ошибки по таблице ошибок (см. общий макет "уатОписаниеСтатусовМобильногоПриложения")
//  Язык      - строка - код локализации описания ошибки (указывается в соответствующей группировке в макете 
//                       "Описание ошибок мобильного приложения".)
//
// Возвращаемое значение:
//   Строка   - строковое описание ошибки на требуемом языке
//
Функция ПолучитьОписаниеСтатусаМобильногоПриложения(Знач КодОшибки, Знач Язык="ru") Экспорт 
	
	МакетОшибок = ПолучитьОбщийМакет("уатОписаниеСтатусовМобильногоПриложения");
	
	ОбластьПоЯзыку = МакетОшибок.Области.Найти("ОписаниеСтатуса_"+Язык);
	Если ОбластьПоЯзыку = Неопределено Тогда 
		ОбластьПоЯзыку = МакетОшибок.Области.Найти("ОписаниеСтатуса_ru");
	КонецЕсли;
	
	СтрокаОшибки = МакетОшибок.НайтиТекст(Формат(КодОшибки, "ЧН=0; ЧГ="),,МакетОшибок.Области.Найти("КодСтатуса"));
	Если СтрокаОшибки = Неопределено Тогда 
		Возврат ПолучитьОписаниеКодаОшибки(29999, Язык); // неопределенная ошибка
	КонецЕсли;
	
	Возврат МакетОшибок.Область(Сред(СтрокаОшибки.Имя, 1, Найти(СтрокаОшибки.Имя, "C"))+Строка(ОбластьПоЯзыку.Лево)).Текст;
	
КонецФункции // ПолучитьОписаниеКодаОшибки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция предназначена для получения настроек работы мобильного приложения "по-умолчанию".
// Состав имеющихся настроек определяется в структуре "стрНастройки" данной функции.
// При отсутсвии настроек, несоответсвии ключа - будет использоваться значение, определенное 
// в данной структуре. Иные значения, не определенные в составе данных настроек будут проигнорированы.
//
// Параметры:
//  ВыбранноеСвойство - строка - имя настроки, для которой необходимо получить значение по-умолчанию.
//                               Если данный параметр не заполнен - будут получены все имеющиеся настройки.
//
// Возвращаемое значение:
//   Структура, Число, Строка, Булево - Структура - при получении всех настроек, другие типы - при получении выбранной настройки.
//
Функция НастройкиМобильногоПриложенияПоУмолчанию(ВыбранноеСвойство="") Экспорт 
	
	стрНастройки = Новый Структура();
	
	стрНастройки.Вставить("Company",                 "");
	стрНастройки.Вставить("gpsDataSendInterval",     60);     // Интервал в секундах отправки данных GPS c мобильного устройства
	стрНастройки.Вставить("gpsDataDensity",          60);     // Интервал в секундах получения отметок местоположения
	стрНастройки.Вставить("positionSources",         "all");  // Возможные источники информации о местоположении (gps/all)
	стрНастройки.Вставить("routeListsCheckInterval", 300);    // Интервал в секундах обновления данных по маршрутным листам
	стрНастройки.Вставить("messagesCheckInterval",   60);     // Интервал в секундах проверки сообщений
	стрНастройки.Вставить("logging",                 Ложь);   // Признак логирования работы мобильного приложения
	стрНастройки.Вставить("useBackgroundProcess",    Истина); // Признак работы в фоновом режиме мобильного приложения
	стрНастройки.Вставить("useMarksAndSignatures",   Ложь);   // Оценка уровня сервиса
	
	стрНастройки.Вставить("useRouteLists",           Истина);  // Признак использования Путевых листов
	стрНастройки.Вставить("useWaybills",             Истина);  // Признак использования Маршрутных листы
	стрНастройки.Вставить("useOrdersForRepair",      Истина);  // Признак использования Заявок на ремонт
	стрНастройки.Вставить("useChat",                 Истина);  // Признак использования Чата

	стрНастройки.Вставить("AutomaticDetectionOfArrival",  1);
	стрНастройки.Вставить("SearchRadiusType",             2);
	стрНастройки.Вставить("ControlRadius",                Ложь);
	стрНастройки.Вставить("SearchRadius",                 150);
	стрНастройки.Вставить("ControlItemsOrder",            Ложь);
	стрНастройки.Вставить("ControlGeodata",               0);
	
	стрНастройки.Вставить("ПолучателиСообщений",     Справочники.РолиИсполнителей.ПустаяСсылка());
	стрНастройки.Вставить("ТемаОбсуждения",          "");
	стрНастройки.Вставить("ИдентификаторОбсуждения", "");
	
	// Настройки сервера МП
	стрНастройки.Вставить("АдресСервераМП",  ""); // Адрес сервера мобильного приложения
	стрНастройки.Вставить("ПортСервераМП",   0);  // Порт сервера мобильного приложения
	стрНастройки.Вставить("ЛогинСервераМП",  ""); // Логин сервера мобильного приложения
	стрНастройки.Вставить("ПарольСервераМП", ""); // Пароль сервера мобильного приложения
	стрНастройки.Вставить("ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий",
		Справочники.уатГруппыДиспетчеров.ПустаяСсылка());
		
	стрНастройки.Вставить("ОграничениеЧислаМЛДнейВперед",   0);
	стрНастройки.Вставить("ОграничениеЧислаМЛДнейНазад",    0);
	
	стрНастройки.Вставить("СоздаватьАктОтгрузкиВРейсПриПогрузке", Ложь);
	стрНастройки.Вставить("СоздаватьАктПриемкиИзРейсаПриРазгрузке", Ложь);
	
	стрНастройки.Вставить("protocolVersion", ПолучитьВерсиюПротоколаМобильногоПриложения());

	Если ВыбранноеСвойство = "" Тогда 
		Возврат стрНастройки;
	Иначе 
		Попытка
			Возврат стрНастройки[ВыбранноеСвойство];
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // НастройкиМобильногоПриложенияПоУмолчанию()

// Функция предназначена для получения параметров работы мобильного приложения "по-умолчанию".
// Состав имеющихся параметров определяется в структуре "стрПараметры" данной функции.
// При отсутсвии параметров, несоответсвии ключа - будет использоваться значение, определенное 
// в данной структуре. Иные значения, не определенные в составе данных параметров будут проигнорированы.
//
// Параметры:
//  ВыбранныйПараметр - строка - имя параметра, для которого необходимо получить значение по-умолчанию.
//                               Если данный параметр не заполнен - будут получены все имеющиеся параметры.
//
// Возвращаемое значение:
//   Структура, Строка - Структура - при получении всех параметров, другие типы - при получении выбранного параметра.
//
Функция ПараметрыМобильногоПриложенияПоУмолчанию(ВыбранныйПараметр="") Экспорт 
	
	стрПараметры = Новый Структура();
	
	стрПараметры.Вставить("appVer",  ""); // Актуальная версия мобильного приложения
	стрПараметры.Вставить("appLink", ""); // Ссылка на актуальную версию мобильного приложения
	стрПараметры.Вставить("protocolVersion", ПолучитьВерсиюПротоколаМобильногоПриложения());
	
	Если ВыбранныйПараметр = "" Тогда 
		Возврат стрПараметры;
	Иначе 
		Попытка
			Возврат стрПараметры[ВыбранныйПараметр];
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // ПараметрыМобильногоПриложенияПоУмолчанию()

// Функция предназначена для получения версии протоколамобильного приложения.
//
Функция ПолучитьВерсиюПротоколаМобильногоПриложения() Экспорт 
	
	Возврат "1.5"
	
КонецФункции


// Функция предназначена для получения настроек хранения истории местоположения "по-умолчанию".
// Состав имеющихся настроек определяется в структуре "стрНастройки" данной функции.
// При отсутсвии настроек, несоответсвии ключа - будет использоваться значение, определенное 
// в данной структуре. Иные значения, не определенные в составе данных параметров будут проигнорированы.
//
// Параметры:
//  ВыбраннаяНастройка - строка - имя настройки, для которой необходимо получить значение по-умолчанию.
//                               Если данный параметр не заполнен - будут получены все имеющиеся настройки.
//
// Возвращаемое значение:
//   Структура, Строка - Структура - при получении всех параметров, другие типы - при получении выбранного параметра.
//
Функция ПараметрыХраненияИсторииМестоположенияПоУмолчанию(ВыбраннаяНастройка="") Экспорт
	
	стрНастройки = Новый Структура();
	
	стрНастройки.Вставить("РежимСохранения", 0); // Режим сохранения истории местоположения. (0 - не сохранять, 1 - сохранять во внешнюю БД, 2 - сохранять в регистр)
	стрНастройки.Вставить("АдресСервера",    ""); // Адрес сервера внешней базы местоположения
	стрНастройки.Вставить("ИмяБазы",         ""); // Имя базы на сервере
	стрНастройки.Вставить("Логин",           ""); // Логин пользователя
	стрНастройки.Вставить("Пароль",          ""); // Пароль пользователя
	
	Если ВыбраннаяНастройка = "" Тогда 
		Возврат стрНастройки;
	Иначе 
		Попытка
			Возврат стрНастройки[ВыбраннаяНастройка];
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // ПараметрыХраненияИсторииМестоположенияПоУмолчанию()

#КонецОбласти
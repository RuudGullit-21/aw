////////////////////////////////////////////////////////////////////////////////
// Модуль является помощником для работы с библиотекой CsmHandler.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает версию библиотеки CsmHandler.
//
// Параметры:
//  ТекстОшибки				 - Строка		 - Текст ошибки.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем, 
//  	в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Строка - Версия библиотеки CsmHandler.
//
Функция Версия(ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = "0.0.0";
	
	Если ИспользованиеCsmHandlerВключено() Тогда	
		РезультатРасчета = ItobCsmHandlerJSON.Версия(ТекстОшибки);				
	Иначе	
		РезультатРасчета = ItobCsmHandlerПереопределяемый.Версия(ТекстОшибки, ДополнительныеПараметры);	
	КонецЕсли;
	
	ОбработатьРассчитанныйРезультат(Результат, РезультатРасчета, ТекстОшибки, "Ошибка вычисления Версия():", Ложь);

	
	Возврат Результат;

КонецФункции
 
// Рассчитывает расстояние между точками по географическим координатам.
//
// Параметры:
//  Широта1					 - Число		 - Широта первой дочки.
//  Долгота1				 - Число		 - Долгота первой дочки.
//  Широта2					 - Число		 - Широта второй дочки.
//  Долгота2				 - Число		 - Долгота второй дочки.
//  ТекстОшибки				 - Строка		 - Текст ошибки.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем,
// 		в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Число - Расстояние между точками.
//
Функция Расстояние(Широта1, Долгота1, Широта2, Долгота2, ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = 0;
	
	Если ИспользованиеCsmHandlerВключено() Тогда	
		РезультатРасчета = ItobCsmHandlerJSON.Расстояние(Широта1, Долгота1, Широта2, Долгота2, ТекстОшибки);		
	Иначе	
		РезультатРасчета = ItobCsmHandlerПереопределяемый.Расстояние(Широта1, Долгота1, Широта2, Долгота2, ТекстОшибки, ДополнительныеПараметры);	 
	КонецЕсли;
	
	ОбработатьРассчитанныйРезультат(Результат, РезультатРасчета, ТекстОшибки, "Ошибка вычисления Расстояние():", Ложь);

	
	Возврат Результат;
					
КонецФункции
 
// Преобразует закодированные данные в коды датчиков и их значения.
//
// Параметры:
//  ДанныеДатчиков			 - Строка		 - Закодированные данные датчиков.
//  ВерсияФормата			 - Число		 - Версия формата данных.
//  ТекстОшибки				 - Строка		 - Текст ошибки.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем, 
//  	в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Соответствие - Данные датчиков.
//
Функция СтрокаДляДанныхДатчика(ДанныеДатчиков, ВерсияФормата, ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ИспользованиеCsmHandlerВключено() Тогда	
		Если ДанныеДатчиков = "" Тогда
			Возврат Результат;
		КонецЕсли; 
		
		РезультатЧтения = Неопределено;
		РезультатРасчета = ItobCsmHandlerJSON.СтрокаДляДанныхДатчика(ДанныеДатчиков, ВерсияФормата, ТекстОшибки);
		ОбработатьРассчитанныйРезультат(РезультатЧтения, РезультатРасчета, ТекстОшибки, "Ошибка вычисления СтрокаДляДанныхДатчика():");
		
		Если НЕ РезультатЧтения = Неопределено Тогда
			// Получаем коды и значения датчиков в виде массивов.
			КодыДатчиков = РезультатЧтения[0];
			ЗначенияДатчиков = РезультатЧтения[1];
			Для СчетчикДатчика = 0 По КодыДатчиков.Количество() - 1 Цикл   	// Преобразовываем данные из массивов в соответствие.
				Результат.Вставить(КодыДатчиков[СчетчикДатчика], ЗначенияДатчиков[СчетчикДатчика]);
			КонецЦикла; 	
		КонецЕсли; 		                     
	Иначе
		РезультатРасчета = ItobCsmHandlerПереопределяемый.СтрокаДляДанныхДатчика(ДанныеДатчиков, ВерсияФормата, ТекстОшибки, ДополнительныеПараметры);
		ОбработатьРассчитанныйРезультат(Результат, РезультатРасчета, ТекстОшибки, "Ошибка вычисления СтрокаДляДанныхДатчика():");
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции
 
// Рассчитывает расстояния между точками.
//
// Параметры:
//  Координаты				 - Массив из Массив - Массив массивов координат.
//  ТекстОшибки				 - Строка		 - Текст ошибки.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем, 
//  	в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Массив из Число - Массив расстояний.
//
Функция МассивРасстояний(Координаты, ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Массив();
	
	Если ИспользованиеCsmHandlerВключено() Тогда
		КоординатыJSON = ЗначениеВJSON(Координаты);
		
		РезультатРасчета = ItobCsmHandlerJSON.МассивРасстояний(КоординатыJSON, ТекстОшибки);			
	Иначе		
		РезультатРасчета = ItobCsmHandlerПереопределяемый.МассивРасстояний(Координаты, ТекстОшибки, ДополнительныеПараметры);
	КонецЕсли;
	
	ОбработатьРассчитанныйРезультат(Результат, РезультатРасчета, ТекстОшибки, "Ошибка вычисления МассивРасстояний():");
	
	
	Возврат Результат;
	
КонецФункции
 
// Преобразует закодированную полилинию из формата ломанной линии предоставленного гугл сервисом.
//
// Параметры:
//  ЗакодированнаяПолилиния	 - Строка		 - Закодированная полилиния.
//  ТекстОшибки				 - Строка		 - Текст ошибки.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем, 
//  	в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Массив из Массив - Массив из двух элементов, массив с широтами и массив с долготами.
//
Функция РаскодированиеЛинии(ЗакодированнаяПолилиния, ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Массив();
	
	Если ИспользованиеCsmHandlerВключено() Тогда	
		РезультатЧтения = Неопределено;
		РезультатРасчета = ItobCsmHandlerJSON.РаскодированиеЛинии(ЗакодированнаяПолилиния, ТекстОшибки);
		ОбработатьРассчитанныйРезультат(РезультатЧтения, РезультатРасчета, ТекстОшибки, "Ошибка вычисления РаскодированиеЛинии():");
		
		Если НЕ РезультатЧтения = Неопределено Тогда    // Превращаем массив массивов в массив структур Широта-Долгота.
			Для СчетчикСтрок = 0 По РезультатЧтения[0].Количество() - 1 Цикл
			     Результат.Добавить(Новый Структура("Широта, Долгота", РезультатЧтения[0][СчетчикСтрок], РезультатЧтения[1][СчетчикСтрок]));
			КонецЦикла;	
		КонецЕсли; 
	Иначе	
		РезультатРасчета = ItobCsmHandlerПереопределяемый.РаскодированиеЛинии(ЗакодированнаяПолилиния, ТекстОшибки, ДополнительныеПараметры);
		ОбработатьРассчитанныйРезультат(Результат, РезультатРасчета, ТекстОшибки, "Ошибка вычисления РаскодированиеЛинии():");
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции
 
// Ищет значения датчиков в закодированных данных датчиков.
//
// Параметры:
//  ДанныеДатчиков			 - Массив из Строка - Массив из строк закодированных данных датчиков.
//  КодыДатчиков			 - Массив из Число  - Массив из кодов датчиков, которые нужно получить.
//  ВерсииФормата			 - Массив 		 - Массив из версий форматов, элементов в массиве столько же сколько и в ДанныеДатчиков.
//  ТекстОшибки				 - Строка		 - Текст ошибки.
//  ДополнительныеПараметры	 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем, 
//  	в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Массив из Массив - Массив массивов,
//  0 элемент массива - массив значений для кода датчика КодыДатчиков[0],
//  и т.п. до КодыДатчиков[КодыДатчиков.Количество() - 1].
//
Функция ПоискЗначенийДатчиков(ДанныеДатчиков, КодыДатчиков, ВерсииФормата, ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	ДанныеВиртуальныхДатчиков = Новый Массив;
	
	Возврат ПоискЗначенийВсехДатчиков(ДанныеДатчиков, ДанныеВиртуальныхДатчиков, КодыДатчиков, ВерсииФормата, ТекстОшибки, ДополнительныеПараметры);
	
КонецФункции
 
// Ищет значения датчиков в закодированных данных датчиков (включая виртуальные).
//
// Параметры:
//  ДанныеДатчиков				 - Массив	 - Массив из строк закодированных данных датчиков.
//  ДанныеВиртуальныхДатчиков	 - Массив	 - Массив из строк закодированных данных датчиков, 
//  	элементов в массиве столько же сколько и в ДанныеДатчиков.
//
//  КодыДатчиков				 - Массив	 - Массив из кодов датчиков, которые нужно получить.
//  ВерсииФормата				 - Массив	 - Массив из версий форматов, элементов в массиве столько же сколько и в ДанныеДатчиков.
//  ТекстОшибки					 - Строка	 - Текст ошибки.
//  ДополнительныеПараметры		 - Произвольный	 - Дополнительные параметры, для работы с переопределяемым модулем, 
//  	в случае ошибки в библиотеке.
//
// Возвращаемое значение:
//  Массив - Массив массивов,
// 	 	0 элемент массива - массив значений для кода датчика КодыДатчиков[0],
//  	и т.п. до КодыДатчиков[КодыДатчиков.Количество() - 1].
//
Функция ПоискЗначенийВсехДатчиков(ДанныеДатчиков, ДанныеВиртуальныхДатчиков, КодыДатчиков, ВерсииФормата, ТекстОшибки = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Новый Массив);	// Результат по умолчанию - массив с вложенным пустым массивом.
	
	Если ИспользованиеCsmHandlerВключено() Тогда		
		// Преобразуем ответ из массивов в JSON.
		ДанныеДатчиковJSON = ЗначениеВJSON(ДанныеДатчиков);
		ДанныеВиртуальныхДатчиковJSON = ЗначениеВJSON(ДанныеВиртуальныхДатчиков);
		КодыДатчиковJSON = ЗначениеВJSON(КодыДатчиков);
		ВерсииФорматаJSON = ЗначениеВJSON(ВерсииФормата);
		
		// Получаем результат расчета.
		РезультатРасчета = ItobCsmHandlerJSON.ПоискЗначенийВсехДатчиков(ДанныеДатчиковJSON, ДанныеВиртуальныхДатчиковJSON, КодыДатчиковJSON, ВерсииФорматаJSON, ТекстОшибки);	
	Иначе		
		РезультатРасчета = ItobCsmHandlerПереопределяемый.ПоискЗначенийВсехДатчиков(ДанныеДатчиков, ДанныеВиртуальныхДатчиков, КодыДатчиков, ВерсииФормата, ТекстОшибки, ДополнительныеПараметры);	
	КонецЕсли;
	
	ОбработатьРассчитанныйРезультат(Результат, РезультатРасчета, ТекстОшибки, "Ошибка вычисления ПоискЗначенийВсехДатчиков():");
	
	
	Возврат Результат;
	
КонецФункции

// Формирует координаты для расчета расстояний.
//
// Параметры:
//  Широта	 - Массив	 - Список широт.
//  Долгота	 - Массив	 - Список долгот.
// 
// Возвращаемое значение:
//  Массив - Координаты для расчета:
//  * [0] - Массив - Список широт.
//  * [1] - Массив - Список долгот.
//
Функция НовыйКоординаты(Широта = Неопределено, Долгота = Неопределено) Экспорт
	
	// Проверяем поле широта.
	Если Не Тип(Широта) = Тип("Массив") Тогда
	    Широта = Новый Массив()
	КонецЕсли;
	
	// Проверяем поле долгота.
	Если Не Тип(Широта) = Тип("Массив") Тогда
	    Широта = Новый Массив()
	КонецЕсли;
	
	// Формируем результирующий массив.
	Результат = Новый Массив();
	Результат.Добавить(Широта);
	Результат.Добавить(Долгота);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеВJSON(Значение)

	Запрос = Новый ЗаписьJSON();
	Запрос.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(Запрос, Значение);
	Возврат Запрос.Закрыть();

КонецФункции

Функция JSONВЗначение(JSON)
	
	Ответ = Новый ЧтениеJSON();
	Ответ.УстановитьСтроку(JSON);
	Возврат ПрочитатьJSON(Ответ);
	
КонецФункции

// Возвращает флаг использования библиотеки CsmHandler.
// 
// Возвращаемое значение:
//  Булево - Библиотека используется.
//
Функция ИспользованиеCsmHandlerВключено()
	Возврат ItobCsmHandlerПовтИсп.ИспользованиеCsmHandlerВключено();
КонецФункции

Процедура ОбработатьРассчитанныйРезультат(ОбработанныйРезультат, РассчитанныйРезультат, ТекстОшибки, ПояснениеКОшибке = "", ПреобразоватьИзJSON = Неопределено)
	
	ИспользуетсяВнешняяБиблиотека = ИспользованиеCsmHandlerВключено();
	
	ТребуетсяПреобразование = ?(ПреобразоватьИзJSON = Неопределено, ИспользуетсяВнешняяБиблиотека, ПреобразоватьИзJSON);  
	
	ЗаголовокПояснения = ?(ИспользуетсяВнешняяБиблиотека,
						   "Ошибка работы с библиотекой CsmHandler",
						   "Ошибка вычисления значения средствами 1С");
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЗаписьЖурналаРегистрации(ЗаголовокПояснения,  
								 УровеньЖурналаРегистрации.Ошибка,,, 
								 ПояснениеКОшибке + " " + ТекстОшибки);
	Иначе
		ОбработанныйРезультат = РассчитанныйРезультат;
		
		Если ТребуетсяПреобразование Тогда
			ОбработанныйРезультат = JSONВЗначение(ОбработанныйРезультат);	
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

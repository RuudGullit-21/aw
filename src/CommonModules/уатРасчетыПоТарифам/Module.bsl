////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции расчета доходов и расходов по тарифам на транспортные услуги.
// 
// Содержит код, используемый в вариантах поставки СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает ссылку на справочник прейскурантов
//
// Параметры:
//  СписокФильтров:  Структура фильтров
//	ПолучатьТолькоОдинТарифПоПараметрамВыработки
//	ДопПараметры_уэ - Структура [ПрейскурантПоставщика, Контрагент, Услуга] - содержит доп. параметры логистики
//	КэшУскорения - Структура содержит кэш значений переменных для ускорения расчета
//
// Алгоритм поиска прейскуранта: ищется последний по дате и больший по номеру прейскурант,
//	удовлетворяющий наибольшему количеству фильтров
//
Функция НайтиПрейскурант(Знач СписокФильтров, Знач Организация = Неопределено, Знач Дата = Неопределено,
	ДопПараметры_уэ = Неопределено, КэшУскорения = Неопределено) ЭКСПОРТ
	
	ЭтоЛогистика = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ЭтоПроф = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
			"ОсновнаяОрганизация");
	КонецЕсли;
	
	// инициализация кэша
	Если ЭтоПроф ИЛИ ЭтоЛогистика Тогда
		Если КэшУскорения = Неопределено Тогда
			КэшУскорения = Новый Структура;
		КонецЕсли;
		// Временная структура значений перечисления уатВидыОбластейДействияТарифовТС для ускорения расчета
		Если НЕ КэшУскорения.Свойство("Перечисление_уатВидыОбластейДействияТарифовТС") Тогда
			Перечисление_уатВидыОбластейДействияТарифовТС = Новый Структура;
			Для Каждого ТекЗначПеречисл Из Метаданные.Перечисления.уатВидыОбластейДействияТарифовТС.ЗначенияПеречисления Цикл
				Перечисление_уатВидыОбластейДействияТарифовТС.Вставить(ТекЗначПеречисл.Имя, Перечисления.уатВидыОбластейДействияТарифовТС[ТекЗначПеречисл.Имя]);
			КонецЦикла;
			КэшУскорения.Вставить("Перечисление_уатВидыОбластейДействияТарифовТС", Перечисление_уатВидыОбластейДействияТарифовТС);
		КонецЕсли;
		// Кэшируется список групп (родителей) значений фильтров для быстрого поиска по вхождению в группу
		Если НЕ КэшУскорения.Свойство("ГруппыЗначенийФильтров") Тогда
			КэшУскорения.Вставить("ГруппыЗначенийФильтров", Новый Соответствие);
		КонецЕсли;
		Для Каждого ТекФильтр Из СписокФильтров Цикл
			Если ТипЗнч(ТекФильтр.Значение) = Тип("СписокЗначений") Тогда
				Для Каждого ТекЭлем Из ТекФильтр.Значение Цикл
					Если ЗначениеЗаполнено(ТекЭлем.Значение) И КэшУскорения.ГруппыЗначенийФильтров.Получить(ТекЭлем.Значение) = Неопределено Тогда
						мсвРодителей = СписокРодителейЭлементаСправочника(ТекЭлем.Значение);
						КэшУскорения.ГруппыЗначенийФильтров.Вставить(ТекЭлем.Значение, мсвРодителей);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ТипЗнч(ТекФильтр.Значение) = Тип("Дата") Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекФильтр.Значение) И КэшУскорения.ГруппыЗначенийФильтров.Получить(ТекФильтр.Значение) = Неопределено Тогда
					мсвРодителей = СписокРодителейЭлементаСправочника(ТекФильтр.Значение);
					КэшУскорения.ГруппыЗначенийФильтров.Вставить(ТекФильтр.Значение, мсвРодителей);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//логистика
	Если ТипЗнч(ДопПараметры_уэ) = Тип("Структура") Тогда
		ПрейскурантПоставщика_уэ = ДопПараметры_уэ.ПрейскурантПоставщика;
		Контрагент_уэ = ДопПараметры_уэ.Контрагент;
		ПараметрВыработки_уэ = ДопПараметры_уэ.ПараметрВыработки;
		Если ДопПараметры_уэ.Свойство("Услуга") Тогда
			Услуга_уэ = ДопПараметры_уэ.Услуга;
		Иначе
			Услуга_уэ = Неопределено;
		КонецЕсли;
		Если ДопПараметры_уэ.Свойство("ТипПункта") Тогда
			ТипПункта_уэ = ДопПараметры_уэ.ТипПункта;
		Иначе
			ТипПункта_уэ = Неопределено;
		КонецЕсли;
		Если ДопПараметры_уэ.Свойство("ТипТочкиМаршрута") Тогда
			ТипТочкиМаршрута_уэ = ДопПараметры_уэ.ТипТочкиМаршрута;
		Иначе
			ТипТочкиМаршрута_уэ = Неопределено;
		КонецЕсли;
		Если ДопПараметры_уэ.Свойство("ВидУпаковки") Тогда
			ВидУпаковки_уэ = ДопПараметры_уэ.ВидУпаковки;
		Иначе
			ВидУпаковки_уэ = Неопределено;
		КонецЕсли;
		Если ДопПараметры_уэ.Свойство("ТипКонтейнера") Тогда
			ТипКонтейнера_уэ = ДопПараметры_уэ.ТипКонтейнера;
		Иначе
			ТипКонтейнера_уэ = Неопределено;
		КонецЕсли;
		Если ДопПараметры_уэ.Свойство("Тариф") Тогда
			Тариф_уэ = ДопПараметры_уэ.Тариф;
		Иначе
			Тариф_уэ = Неопределено;
		КонецЕсли;
		Если ДопПараметры_уэ.Свойство("ВидСкладскойОперации") Тогда
			ВидСкладскойОперации_уэ = ДопПараметры_уэ.ВидСкладскойОперации;
		Иначе
			ВидСкладскойОперации_уэ = Неопределено;
		КонецЕсли;
	Иначе
		ПрейскурантПоставщика_уэ = Ложь;
		Контрагент_уэ = Неопределено;
		ПараметрВыработки_уэ = Неопределено;
		Услуга_уэ = Неопределено;
		ТипПункта_уэ = Неопределено;
		ТипТочкиМаршрута_уэ = Неопределено;
		ВидУпаковки_уэ = Неопределено;
		ТипКонтейнера_уэ = Неопределено;
		Тариф_уэ = Неопределено;
		ВидСкладскойОперации_уэ = Неопределено;
	КонецЕсли;
			
	Если ЭтоСтандарт Тогда
		//Стандарт
		Запрос = Новый Запрос;
		Запрос.Текст =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТарифыТС.Владелец КАК Прейскурант,
		|	ТарифыТС.Ссылка КАК Тариф,
		|	ТарифыТС.ОбластьДействия КАК ОбластьДействия,
		|	0 КАК СтепеньСовпаденияФильтров,
		|	ТарифыТС.ПараметрВыработки КАК ПараметрВыработки
		|ИЗ
		|	Справочник.уатТарифыТС КАК ТарифыТС
		|ГДЕ
		|	ТарифыТС.Владелец.Организация = &Организация
		|	И ТарифыТС.Владелец.ДатаНачала <= &Дата
		|	И (КОНЕЦПЕРИОДА(ТарифыТС.Владелец.ДатаОкончания, ДЕНЬ) >= &Дата
		|			ИЛИ ТарифыТС.Владелец.ДатаОкончания = &ПустаяДата)
		|	И (НЕ ТарифыТС.ПометкаУдаления)
		|	И (НЕ ТарифыТС.ЭтоГруппа)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТарифыТС.Владелец.ДатаНачала УБЫВ,
		|	ТарифыТС.Владелец.Код УБЫВ";
	Иначе
		// ПРОФ, Логистика
		Запрос = Новый Запрос;
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	уатПрейскурантыТС.Прейскурант КАК Прейскурант,
		|	МАКСИМУМ(уатПрейскурантыТС.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТ_УстановленныеПрейскуранты
		|ИЗ
		|	РегистрСведений.уатПрейскурантыТС КАК уатПрейскурантыТС
		|ГДЕ
		|	уатПрейскурантыТС.ДатаНачала <= &Дата
		|	И (КОНЕЦПЕРИОДА(уатПрейскурантыТС.ДатаОкончания, ДЕНЬ) >= &Дата
		|			ИЛИ уатПрейскурантыТС.ДатаОкончания = &ПустаяДата)
		|
		|СГРУППИРОВАТЬ ПО
		|	уатПрейскурантыТС.Прейскурант
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_УстановленныеПрейскуранты.Прейскурант КАК Прейскурант,
		|	ТарифыТС.Ссылка КАК Тариф,
		|	ТарифыТС.ОбластьДействия КАК ОбластьДействия,
		|	0 КАК СтепеньСовпаденияФильтров,
		|	ТарифыТС.ПараметрВыработки КАК ПараметрВыработки,
		|	ВТ_УстановленныеПрейскуранты.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Справочник.уатТарифыТС КАК ТарифыТС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УстановленныеПрейскуранты КАК ВТ_УстановленныеПрейскуранты
		|		ПО ТарифыТС.Владелец = ВТ_УстановленныеПрейскуранты.Прейскурант
		|ГДЕ
		|	НЕ ТарифыТС.ТарифнаяСетка
		|	И ТарифыТС.Владелец.Организация = &Организация
		|	И НЕ ТарифыТС.ПометкаУдаления
		|	И НЕ ТарифыТС.ЭтоГруппа";
		
		Если ЭтоЛогистика ИЛИ ЭтоПроф Тогда //вызывается из МЛ, Заказ, Потребность
			Запрос.Текст = Запрос.Текст + "
			|	И ТарифыТС.Владелец.ПрейскурантПоставщика = &ПрейскурантПоставщика_уэ";
			Если ПрейскурантПоставщика_уэ И Контрагент_уэ <> Неопределено Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.Владелец.Контрагент = &Контрагент_уэ";
			КонецЕсли;
			Если ПараметрВыработки_уэ <> Неопределено Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.ПараметрВыработки = &ПараметрВыработки_уэ";
			КонецЕсли;
			Если ЗначениеЗаполнено(Услуга_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.НоменклатураУслуги = &Услуга_уэ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипПункта_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.ТипПункта = &ТипПункта_уэ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипТочкиМаршрута_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.ТипТочкиМаршрута = &ТипТочкиМаршрута_уэ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидУпаковки_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И (ТарифыТС.ВидУпаковки = &ВидУпаковки_уэ
				|	И (ТарифыТС.ПараметрВыработки <> Значение(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
				|	ИЛИ ТарифыТС.БазаТарифа = Значение(Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоМест)))";
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипКонтейнера_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.ТипКонтейнера = &ТипКонтейнера_уэ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидСкладскойОперации_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.ВидСкладскойОперации = &ВидСкладскойОперации_уэ";
			КонецЕсли;
			Если ЗначениеЗаполнено(Тариф_уэ) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ТарифыТС.Ссылка = &Тариф";
				Запрос.УстановитьПараметр("Тариф", Тариф_уэ);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_УстановленныеПрейскуранты.ДатаНачала УБЫВ,
		|	ТарифыТС.Владелец.Код УБЫВ";
		
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Если ЭтоЛогистика ИЛИ ЭтоПроф Тогда
			Запрос.УстановитьПараметр("Контрагент_уэ", Контрагент_уэ);
			Запрос.УстановитьПараметр("ПрейскурантПоставщика_уэ", ПрейскурантПоставщика_уэ);
			Запрос.УстановитьПараметр("ПараметрВыработки_уэ", ПараметрВыработки_уэ);
			Запрос.УстановитьПараметр("Услуга_уэ", Услуга_уэ);
			Запрос.УстановитьПараметр("ТипПункта_уэ", ТипПункта_уэ);
			Запрос.УстановитьПараметр("ТипТочкиМаршрута_уэ", ТипТочкиМаршрута_уэ);
			Запрос.УстановитьПараметр("ВидУпаковки_уэ", ВидУпаковки_уэ);
			Запрос.УстановитьПараметр("ТипКонтейнера_уэ", ТипКонтейнера_уэ);
			Запрос.УстановитьПараметр("ВидСкладскойОперации_уэ", ВидСкладскойОперации_уэ);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	тблТарифы = Запрос.Выполнить().Выгрузить();
		
	// Удаляем дубликаты строк. 
	// Простая свертка не подходит, т.к. ОбластьДействия имеет тип ХранилищеЗначений и не сворачивается корректно.
	Если (ЭтоПроф Или ЭтоЛогистика) И тблТарифы.Количество() > 0 Тогда
		СтруктураПоиска = Новый Структура("Прейскурант, Тариф, ДатаНачала");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, тблТарифы[0]); 
		ЕстьДубликатыСтрок = тблТарифы.НайтиСтроки(СтруктураПоиска).Количество() >= 2;
		Если ЕстьДубликатыСтрок Тогда
			тблТарифыВременная = тблТарифы.Скопировать(Новый Массив);
			Для Каждого ТекСтрока Из тблТарифы Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
				НайденныеСтроки = тблТарифыВременная.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = тблТарифыВременная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			тблТарифы = тблТарифыВременная;
		КонецЕсли;
	КонецЕсли;
	
	ОтобратьТарифыПоОбластямДействия(тблТарифы, СписокФильтров, Истина, ПрейскурантПоставщика_уэ);
	
	тблТарифы.Колонки.Добавить("ID");
	Если ЭтоПроф ИЛИ ЭтоЛогистика Тогда
		ДопПараметрыРасчетСетки = Новый Структура;
		ДопПараметрыРасчетСетки.Вставить("Дата",                  Дата);
		ДопПараметрыРасчетСетки.Вставить("Организация",           Организация);
		ДопПараметрыРасчетСетки.Вставить("Контрагент",            Контрагент_уэ);
		ДопПараметрыРасчетСетки.Вставить("ПрейскурантПоставщика", ПрейскурантПоставщика_уэ);
		ДопПараметрыРасчетСетки.Вставить("ПараметрВыработки",     ПараметрВыработки_уэ);
		ДопПараметрыРасчетСетки.Вставить("Тариф",                 Тариф_уэ);
		ДопПараметрыРасчетСетки.Вставить("Услуга",                Услуга_уэ);
		ДопПараметрыРасчетСетки.Вставить("ВидУпаковки",           ВидУпаковки_уэ);
		ДопПараметрыРасчетСетки.Вставить("ТипКонтейнера",         ТипКонтейнера_уэ);
		ДопПараметрыРасчетСетки.Вставить("ТипТочкиМаршрута",      ТипТочкиМаршрута_уэ);
		ДопПараметрыРасчетСетки.Вставить("ТипПункта",             ТипПункта_уэ);
		ДопПараметрыРасчетСетки.Вставить("ВидСкладскойОперации",  ВидСкладскойОперации_уэ);
		
		ОбщийМодульуатРасчетыПоТарифам_уэ = ОбщегоНазначения.ОбщийМодуль("уатРасчетыПоТарифам_уэ");
		ОбщийМодульуатРасчетыПоТарифам_уэ.ДополнитьТарифнойСеткой(тблТарифы, СписокФильтров, ДопПараметрыРасчетСетки,
			КэшУскорения);
	КонецЕсли;
	
	КоличТарифов = тблТарифы.Количество();
	
	Если КоличТарифов > 0 Тогда
		мсвПараметрыВыработки = Новый Массив;
		
		// Нужно оставить только строки для последнего по порядку прейскуранта (актуального)
		АктуальныйПрейскурант = тблТарифы[0].Прейскурант;
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из тблТарифы Цикл
			Если ТекСтрока.Прейскурант <> АктуальныйПрейскурант Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			ИначеЕсли (ЭтоПроф Или ЭтоЛогистика) И ТекСтрока.ДатаНачала <> тблТарифы[0].ДатаНачала Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
		
		// оставим только тарифы с максимальной степенью совпадения фильтров
		мсвСтрокУдаления = Новый Массив;
		тблТарифы.Сортировать("СтепеньСовпаденияФильтров УБЫВ");
		тблПараметрыВыработки = тблТарифы.Скопировать();
		тблПараметрыВыработки.Свернуть("ПараметрВыработки");
		Для Каждого ТекПараметрВыработки Из тблПараметрыВыработки Цикл
			МаксСтепеньСовпадения = 0;
			СчТариф = 0;
			Для Каждого ТекСтрока Из тблТарифы Цикл
				Если ТекПараметрВыработки.ПараметрВыработки <> ТекСтрока.ПараметрВыработки Тогда
					Продолжить;
				КонецЕсли;
				СчТариф = СчТариф + 1;
				
				МаксСтепеньСовпадения = Макс(ТекСтрока.СтепеньСовпаденияФильтров, МаксСтепеньСовпадения);
				
				Если ТекСтрока.СтепеньСовпаденияФильтров < МаксСтепеньСовпадения Тогда
					мсвСтрокУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат тблТарифы;
КонецФункции

// Удаляет из входящей таблицы тарифы, область действия которых не удовлетворяет входящему списку фильтров
//
Процедура ОтобратьТарифыПоОбластямДействия(тблТарифы, СписокФильтров, флТарифТС = Истина, ПрейскурантПоставщика_уэ = Ложь) Экспорт
	
	ЭтоЛогистика = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ЭтоПроф      = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	
	// разбираем входной фильтр
	Если ТипЗнч(СписокФильтров) <> Тип("Структура") Тогда
		СписокФильтров = Новый Структура;
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Тягач") Тогда
		СписокФильтров.Вставить("Тягач", Справочники.уатТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельТягача") Тогда
		СписокФильтров.Вставить("МодельТягача", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипТягача") Тогда
		СписокФильтров.Вставить("ТипТягача", Справочники.уатТипыТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Прицеп") Тогда
		СписокФильтров.Вставить("Прицеп", Справочники.уатТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельПрицепа") Тогда
		СписокФильтров.Вставить("МодельПрицепа", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипПрицепа") Тогда
		СписокФильтров.Вставить("ТипПрицепа", Справочники.уатТипыТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Контрагент") Тогда
		Если НЕ ПрейскурантПоставщика_уэ Тогда
			СписокФильтров.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ДоговорКонтрагента") Тогда
		СписокФильтров.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Маршрут") Тогда
		СписокФильтров.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Номенклатура") Тогда
		СписокФильтров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ВидПеревозки") Тогда
		СписокФильтров.Вставить("ВидПеревозки", Справочники.уатВидыПеревозок.ПустаяСсылка());
	КонецЕсли;
	
	//ПРОФ, КОРП
	Если ЭтоПроф ИЛИ ЭтоЛогистика Тогда 
		Если НЕ СписокФильтров.Свойство("ОбъектСтроительства") Тогда
			СписокФильтров.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ГрузовоеМесто") Тогда
			СписокФильтров.Вставить("ГрузовоеМесто", Справочники.уатГрузовыеМеста_уэ.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ПунктОтправления") Тогда
			СписокФильтров.Вставить("ПунктОтправления", Справочники.уатПунктыНазначения.ПустаяСсылка());
		Иначе
			УдалитьИзФильтровПунктыСтрокой(СписокФильтров, "ПунктОтправления");
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ПунктНазначения") Тогда
			СписокФильтров.Вставить("ПунктНазначения", Справочники.уатПунктыНазначения.ПустаяСсылка());
		Иначе
			УдалитьИзФильтровПунктыСтрокой(СписокФильтров, "ПунктНазначения");
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ВидГруза") Тогда
			СписокФильтров.Вставить("ВидГруза", Справочники.уатВидыГрузов.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("НаправлениеПеревозки") Тогда
			СписокФильтров.Вставить("НаправлениеПеревозки", Справочники.уатНаправленияПеревозок.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	Если ЭтоЛогистика Тогда
		Если НЕ СписокФильтров.Свойство("ГеозонаОтправления") Тогда
			СписокФильтров.Вставить("ГеозонаОтправления", Справочники.уатГеозоны_уэ.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ГеозонаНазначения") Тогда
			СписокФильтров.Вставить("ГеозонаНазначения", Справочники.уатГеозоны_уэ.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("Склад") Тогда
			СписокФильтров.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ВидУпаковки") Тогда
			СписокФильтров.Вставить("ВидУпаковки", Справочники.уатВидыУпаковки_уэ.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ТипКонтейнера") Тогда
			СписокФильтров.Вставить("ТипКонтейнера", Справочники.уатТипыКонтейнеров_уэ.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	// макет схемы для компоновщика области действия
	Если флТарифТС Тогда
		Если ПрейскурантПоставщика_уэ Тогда
			Если ЭтоПроф Тогда
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты_проф");
			Иначе
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействияКонтрагенты");
			КонецЕсли;
		Иначе
			Если ЭтоПроф Тогда
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия_проф");
			Иначе //Логистика, Стандарт
				СхемаКомпоновкиДанных = Справочники.уатТарифыТС.ПолучитьМакет("КомпоновкаДанныхОбластьДействия");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭтоЛогистика Тогда
			СхемаКомпоновкиДанных = Справочники.уатТарифыСебестоимости_уэ.ПолучитьМакет("КомпоновкаДанныхОбластьДействия");
		Иначе
			СхемаКомпоновкиДанных = Справочники.уатТарифыСебестоимости_уэ.ПолучитьМакет("КомпоновкаДанныхОбластьДействия_проф");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВидовОбластейТарифа = СтруктураВидовОбластейТарифа(ПрейскурантПоставщика_уэ);
	
	мсвСтрокУдаления = Новый Массив;
	
	Для Каждого ТекСтрокаТариф Из тблТарифы Цикл
		// получаем структуру области действия тарифа из хранилища значений
		Если флТарифТС Тогда
			ОблДействияТарифа = ТекСтрокаТариф.ОбластьДействия.Получить(); 
		Иначе
			ОблДействияТарифа = ТекСтрокаТариф.Тариф.ОбластьДействия.Получить();
		КонецЕсли;
		
		// оставляем "общий" тариф - тариф с незаполненной областью действия
		Если ТипЗнч(ОблДействияТарифа) <> Тип("НастройкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		// Области неиспользуемые или с незаполненным видом области удаляем из отбора, считаем то их нет
		Сч = ОблДействияТарифа.Отбор.Элементы.Количество() - 1;
		Пока Сч >= 0 Цикл
			ТекОбластьТарифа = ОблДействияТарифа.Отбор.Элементы[Сч];
			Если НЕ ТекОбластьТарифа.Использование
				ИЛИ ТекОбластьТарифа.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("") Тогда
				ОблДействияТарифа.Отбор.Элементы.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		Если ОблДействияТарифа.Отбор.Элементы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		мсвПоляОбластиДействия = Новый Массив; //подсчет степени совпадения фильтров (она равна количеству видов отбора)
		Для Каждого ТекСтрока Из ОблДействияТарифа.Отбор.Элементы Цикл
			Если мсвПоляОбластиДействия.Найти(ТекСтрока.ЛевоеЗначение) = Неопределено Тогда
				мсвПоляОбластиДействия.Добавить(ТекСтрока.ЛевоеЗначение);
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем тариф, у которого область содержит непустое значение, а во входном фильтре - пустое
		флТарифНеПодходит = Ложь;
		Для Каждого ТекВидОбластиДействия Из СтруктураВидовОбластейТарифа Цикл
			ИмяВидаОбластиДействия = ТекВидОбластиДействия.Ключ;
			
			ОбластьЕстьВТарифе = Ложь;
			Для Каждого ТекОбластьДействия Из ОблДействияТарифа.Отбор.Элементы Цикл
				Если ТекОбластьДействия.ЛевоеЗначение = ТекВидОбластиДействия.Значение
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВИерархии
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСписке
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеЗаполнено
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеНачинаетсяС
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеПодобно
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеРавно
					И ТекОбластьДействия.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеСодержит
					//И Лев(ТекОбластьДействия.ЛевоеЗначение, СтрДлина(ТекВидОбластиДействия.Значение)) =
					//Строка(ТекВидОбластиДействия.Значение) Тогда
					Тогда
					
					ОбластьЕстьВТарифе = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТипЗнч(СписокФильтров[ИмяВидаОбластиДействия]) = Тип("СписокЗначений") Тогда
				ЗначениеФильтраЗаполнено = Ложь;
				Для Каждого ТекФильтр Из СписокФильтров[ИмяВидаОбластиДействия] Цикл
					Если ЗначениеЗаполнено(ТекФильтр.Значение) Тогда
						ЗначениеФильтраЗаполнено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЗначениеФильтраЗаполнено = ЗначениеЗаполнено(СписокФильтров[ИмяВидаОбластиДействия]);
			КонецЕсли;
			
			Если ОбластьЕстьВТарифе И НЕ ЗначениеФильтраЗаполнено Тогда
				флТарифНеПодходит = Истина;
				Прервать;
			КонецЕсли;
			
			// Предварительная проверка соответствия области действия тарифа и входного отбора.
			// Предназначена для отсеивания заведомо неподходящих по области действия тарифов.
			// Проверка выполняется только для областей действия вида "Равно" и "В списке"
			Для Каждого ТекОбластьДействия Из ОблДействияТарифа.Отбор.Элементы Цикл
				Если ТекОбластьДействия.ЛевоеЗначение = ТекВидОбластиДействия.Значение Тогда
				//Если Лев(ТекОбластьДействия.ЛевоеЗначение, СтрДлина(ТекВидОбластиДействия.Значение)) =
				//Строка(ТекВидОбластиДействия.Значение) Тогда
						
					Если ТекОбластьДействия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						Если ТипЗнч(СписокФильтров[ИмяВидаОбластиДействия]) = Тип("СписокЗначений") Тогда
							Для Каждого ТекФильтр Из СписокФильтров[ИмяВидаОбластиДействия] Цикл
								Если ТекФильтр.Значение <> ТекОбластьДействия.ПравоеЗначение Тогда
									флТарифНеПодходит = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							Если СписокФильтров[ИмяВидаОбластиДействия] <> ТекОбластьДействия.ПравоеЗначение Тогда
								флТарифНеПодходит = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ТекОбластьДействия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда 
						Если ТипЗнч(СписокФильтров[ИмяВидаОбластиДействия]) = Тип("СписокЗначений") Тогда
							Для Каждого ТекФильтр Из СписокФильтров[ИмяВидаОбластиДействия] Цикл
								Если ТекОбластьДействия.ПравоеЗначение.НайтиПоЗначению(ТекФильтр.Значение) = Неопределено Тогда
									флТарифНеПодходит = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							Если ТекОбластьДействия.ПравоеЗначение.НайтиПоЗначению(СписокФильтров[ИмяВидаОбластиДействия]) = Неопределено Тогда
								флТарифНеПодходит = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			
				Если флТарифНеПодходит Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если флТарифНеПодходит Тогда
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецЕсли;
		
		// Ниже обрабатыватся тарифы, у которых либо одна из областей действия отсутствует (общий случай совпадений, не
		// увеличивает степень совпадения фильтра), либо заполнены и область действия тарифа, и входящий фильтр, соотв. этой
		// области действия (частный случай совпадения, увеличивает степень совпадения фильтра)
		
		// по каждому виду области действия добавляем соотв. входной фильтр
		Для Каждого ТекВидОбластиДействия Из СтруктураВидовОбластейТарифа Цикл
			ИмяВидаОбластиДействия = ТекВидОбластиДействия.Ключ;
			
			// добавляем отбор из входного фильтра
			ТекВхЗначение = СписокФильтров[ИмяВидаОбластиДействия];
			Если ТипЗнч(ТекВхЗначение) <> Тип("СписокЗначений") Тогда
				ТекВхЗначение = Новый СписокЗначений;
				ТекВхЗначение.Добавить(СписокФильтров[ИмяВидаОбластиДействия]);
			КонецЕсли;
			
			НовыйОтборПоФильтру = ОблДействияТарифа.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтборПоФильтру.Использование = Истина;
			НовыйОтборПоФильтру.ЛевоеЗначение = ТекВидОбластиДействия.Значение;
			НовыйОтборПоФильтру.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтборПоФильтру.ПравоеЗначение = ТекВхЗначение;
		КонецЦикла;
		
		// Выводим результат компоновки в таблицу значений
		// Для этого к пустым настройкам (в них есть только отбор) добавляем группировку
		Группировка = ОблДействияТарифа.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Группировка.Использование = Истина;
		// и выбранные поля
		ПолеВыбора = ОблДействияТарифа.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеВыбора.Использование = Истина;
		ПолеВыбора = ОблДействияТарифа.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Раздел");
		ПолеВыбора.Использование = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОблДействияТарифа,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		Исключение
			Если флТарифТС Тогда
				СтрокаСообщ = "Ошибка при расчете по тарифу """ + ТекСтрокаТариф.Тариф + """ (прейскурант """
					+ ТекСтрокаТариф.Прейскурант + """): возможно некорректное заполнение области действия!";
			Иначе
				СтрокаСообщ = "Ошибка при расчете по тарифу себестоимости """ + ТекСтрокаТариф.Тариф + """: возможно некорректное заполнение области действия!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщ + " Подробнее см. журнал регистрации.");
			ЗаписьЖурналаРегистрации(СтрокаСообщ, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецПопытки;
				
		// Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		
		// Создадим и инициализируем процессор вывода результата и выводим в таблицу
		тблРез = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(тблРез);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если тблРез.Количество() < СтруктураВидовОбластейТарифа.Количество() Тогда //тариф не подходит
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаТариф.СтепеньСовпаденияФильтров = мсвПоляОбластиДействия.Количество();
	КонецЦикла;
	
	// удаляем неподходящие тарифы
	Для Каждого ТекСтрокаУдаления Из мсвСтрокУдаления Цикл
		тблТарифы.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Вводим структуру видов областей действия тарифа:
//  ключи - это возможные имена областей,
//  значения - поля компоновки (добавлены для сравнения с настройками отборов тарифа)
Функция СтруктураВидовОбластейТарифа(ПрейскурантПоставщика_уэ = Ложь) Экспорт
	ЭтоЛогистика = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ЭтоПроф      = уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	
	СтруктураВидовОбластейТарифа = Новый Структура;
	СтруктураВидовОбластейТарифа.Вставить("Тягач", Новый ПолеКомпоновкиДанных("Тягач"));
	СтруктураВидовОбластейТарифа.Вставить("МодельТягача", Новый ПолеКомпоновкиДанных("МодельТягача"));
	СтруктураВидовОбластейТарифа.Вставить("ТипТягача", Новый ПолеКомпоновкиДанных("ТипТягача"));
	СтруктураВидовОбластейТарифа.Вставить("Прицеп", Новый ПолеКомпоновкиДанных("Прицеп"));
	СтруктураВидовОбластейТарифа.Вставить("МодельПрицепа", Новый ПолеКомпоновкиДанных("МодельПрицепа"));
	СтруктураВидовОбластейТарифа.Вставить("ТипПрицепа", Новый ПолеКомпоновкиДанных("ТипПрицепа"));
	СтруктураВидовОбластейТарифа.Вставить("ДоговорКонтрагента", Новый ПолеКомпоновкиДанных("ДоговорКонтрагента"));
	СтруктураВидовОбластейТарифа.Вставить("Маршрут", Новый ПолеКомпоновкиДанных("Маршрут"));
	СтруктураВидовОбластейТарифа.Вставить("Номенклатура", Новый ПолеКомпоновкиДанных("Номенклатура"));
	СтруктураВидовОбластейТарифа.Вставить("ВидПеревозки", Новый ПолеКомпоновкиДанных("ВидПеревозки"));
	// ПРОФ, КОРП
	Если ЭтоПроф ИЛИ ЭтоЛогистика Тогда 
		СтруктураВидовОбластейТарифа.Вставить("ОбъектСтроительства", Новый ПолеКомпоновкиДанных("ОбъектСтроительства"));
		СтруктураВидовОбластейТарифа.Вставить("ГрузовоеМесто", Новый ПолеКомпоновкиДанных("ГрузовоеМесто"));
		СтруктураВидовОбластейТарифа.Вставить("ПунктОтправления", Новый ПолеКомпоновкиДанных("ПунктОтправления"));
		СтруктураВидовОбластейТарифа.Вставить("ПунктНазначения", Новый ПолеКомпоновкиДанных("ПунктНазначения"));
		СтруктураВидовОбластейТарифа.Вставить("ВидГруза", Новый ПолеКомпоновкиДанных("ВидГруза"));
		СтруктураВидовОбластейТарифа.Вставить("НаправлениеПеревозки", Новый ПолеКомпоновкиДанных("НаправлениеПеревозки"));
	КонецЕсли;
	// только КОРП
	Если ЭтоЛогистика Тогда 
		СтруктураВидовОбластейТарифа.Вставить("ГеозонаОтправления", Новый ПолеКомпоновкиДанных("ГеозонаОтправления"));
		СтруктураВидовОбластейТарифа.Вставить("ГеозонаНазначения", Новый ПолеКомпоновкиДанных("ГеозонаНазначения"));
		СтруктураВидовОбластейТарифа.Вставить("Склад", Новый ПолеКомпоновкиДанных("Склад"));
		СтруктураВидовОбластейТарифа.Вставить("ВидУпаковки", Новый ПолеКомпоновкиДанных("ВидУпаковки"));
		СтруктураВидовОбластейТарифа.Вставить("ТипКонтейнера", Новый ПолеКомпоновкиДанных("ТипКонтейнера"));
	КонецЕсли;
	Если НЕ ПрейскурантПоставщика_уэ Тогда
		СтруктураВидовОбластейТарифа.Вставить("Контрагент", Новый ПолеКомпоновкиДанных("Контрагент"));
	КонецЕсли;
	
	Возврат СтруктураВидовОбластейТарифа;
КонецФункции
	
// Функция возвращает значение тарифа
//
// Параметры:
//  Тариф - ссылка справочника Тарифы
//  ЗначенияГруппировок - структура или соответствия со значениями группировок
//
Функция ЗначениеТарифа(Тариф, ЗначенияГруппировок, IDстроки = Неопределено) Экспорт
	
	Результат = 0;
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	Если НЕ ЭтоСтандарт И Тариф.ТарифнаяСетка Тогда
		Если ЗначениеЗаполнено(IDстроки) Тогда // это ID строки тарифа-сетки
			СтрокаСетки = Тариф.СтрокиТарифнойСетки.Найти(IDстроки, "ID");
			Если СтрокаСетки <> Неопределено Тогда
				Если Тариф.СложныйТариф Тогда
					мсвГруппировкиТарифа = Тариф.ЗначенияТарифнойСетки.НайтиСтроки(Новый Структура("ID", IDстроки));
					Для Каждого ТекСтрока Из мсвГруппировкиТарифа Цикл
						Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа1) Тогда
							Если Не уатПроверкаУсловияТарифа(Тариф, 1, ТекСтрока, ЗначенияГруппировок) Тогда
								Продолжить;
							КонецЕсли;              
						КонецЕсли;              
						Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа2) Тогда
							Если Не уатПроверкаУсловияТарифа(Тариф, 2, ТекСтрока, ЗначенияГруппировок) Тогда
								Продолжить;
							КонецЕсли;              
						КонецЕсли;              
						Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа3) Тогда
							Если Не уатПроверкаУсловияТарифа(Тариф, 3, ТекСтрока, ЗначенияГруппировок) Тогда
								Продолжить;
							КонецЕсли;              
						КонецЕсли;              
						Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа4) Тогда
							Если Не уатПроверкаУсловияТарифа(Тариф, 4, ТекСтрока, ЗначенияГруппировок) Тогда
								Продолжить;
							КонецЕсли;              
						КонецЕсли;
						Результат = ТекСтрока.Тариф;
						Прервать;
					КонецЦикла;
				Иначе
					Результат = СтрокаСетки.Тариф;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // это обычный тариф
		Если Тариф.СложныйТариф Тогда
			Результат = 0;
			Для Каждого ТекСтрока Из Тариф.Тарифы Цикл
				Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа1) Тогда
					Если Не уатПроверкаУсловияТарифа(Тариф, 1, ТекСтрока, ЗначенияГруппировок) Тогда
						Продолжить;
					КонецЕсли;              
				КонецЕсли;              
				Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа2) Тогда
					Если Не уатПроверкаУсловияТарифа(Тариф, 2, ТекСтрока, ЗначенияГруппировок) Тогда
						Продолжить;
					КонецЕсли;              
				КонецЕсли;              
				Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа3) Тогда
					Если Не уатПроверкаУсловияТарифа(Тариф, 3, ТекСтрока, ЗначенияГруппировок) Тогда
						Продолжить;
					КонецЕсли;              
				КонецЕсли;              
				Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа4) Тогда
					Если Не уатПроверкаУсловияТарифа(Тариф, 4, ТекСтрока, ЗначенияГруппировок) Тогда
						Продолжить;
					КонецЕсли;              
				КонецЕсли;
				Результат = ТекСтрока.Тариф;
				Прервать;
			КонецЦикла;
		Иначе
			Результат = Тариф.Тариф;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#Область РасчетУслугВДокументах

// Функция рассчитывает стоимость транспортных услуг по тарифам в ТТД
//
Процедура РассчитатьСтоимостьУслугТТД(ДокументОбъект) Экспорт
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	СписокФильтров = Новый Структура();
	СписокФильтров.Вставить("Дата", ДокументОбъект.Дата);
	СписокФильтров.Вставить("Организация", ДокументОбъект.Организация);
	СписокФильтров.Вставить("Контрагент", ДокументОбъект.Контрагент);
	СписокФильтров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	СписокФильтров.Вставить("ВидПеревозки", ДокументОбъект.ВидПеревозки);
	
	тзВыработкаСвернутая = ДокументОбъект.ПолучитьВыработкуСвернутуюСУчетомЭтапов(Ложь);
			
	// доп. обработка входящей ТЧ Выработка
	тзВыработкаСвернутая.Колонки.Добавить("КоличествоЧасовДоп");
	тзВыработкаСвернутая.Колонки.Добавить("ПростойПодПогрузкойДоп");
	тзВыработкаСвернутая.Колонки.Добавить("ПростойПодРазгрузкойДоп");
	тзВыработкаСвернутая.Колонки.Добавить("ПодачаДоп");
	тзВыработкаСвернутая.Колонки.Добавить("ПогрузочноРазгрузочныеРаботыДоп");
	тзВыработкаСвернутая.Колонки.Добавить("ПробегОбщийДоп");
	Для Каждого ТекСтрока Из тзВыработкаСвернутая Цикл
		// перевод временной выработки в секунды
		ТекСтрока.КоличествоЧасовДоп = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоЧасов);
		ТекСтрока.ПодачаДоп = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Подача);
		ТекСтрока.ПростойПодПогрузкойДоп = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПростойПодПогрузкой);
		ТекСтрока.ПростойПодРазгрузкойДоп = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПростойПодРазгрузкой);
		Если ТекСтрока.ПогрузочноРазгрузочныеРаботы > 0 И Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы.Временный Тогда
			ТекСтрока.ПогрузочноРазгрузочныеРаботыДоп = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПогрузочноРазгрузочныеРаботы);
		Иначе
			ТекСтрока.ПогрузочноРазгрузочныеРаботыДоп = ТекСтрока.ПогрузочноРазгрузочныеРаботы;
		КонецЕсли;
		
		// пересчет выработки, зависящей от количества ездок, выполнен при свертке таблицы
		ТекСтрока.ПробегОбщийДоп = ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний;
		
		Для Сч = 1 По ТекСтрока["КоличествоСпецРабот"] Цикл
			// пробег общий, должен включать пробег спец. работ
			ТекСпецРабота = ТекСтрока["СпецРабота" + Сч];
			Если ЗначениеЗаполнено(ТекСпецРабота)
				И НЕ ТекСпецРабота.Временный
				И ТекСпецРабота.УвеличитьОбщийПробегНаПробегСпец Тогда
				ТекСтрока.ПробегОбщийДоп = ТекСтрока.ПробегОбщийДоп + ТекСтрока["КоличествоСпецРаботы" + Сч];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	мСписокФиксированныхТарифов = Новый СписокЗначений;
	тзФиксированныеТарифы = Новый ТаблицаЗначений;
	тзФиксированныеТарифы.Колонки.Добавить("Прейскурант");
	тзФиксированныеТарифы.Колонки.Добавить("Тариф");
	тзФиксированныеТарифы.Колонки.Добавить("ПутЛист");
	
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	// промежуточная таблица стоимости услуг
	тблСтоимость = ДокументОбъект.Стоимость.Выгрузить();
	тблСтоимость.Очистить();
	тблСтоимость.Колонки.Добавить("Прейскурант");
	тблСтоимость.Колонки.Добавить("НомерСтрокиВыработки");
	тблСтоимость.Колонки.Добавить("СтепеньСовпаденияФильтров");
	тблСтоимость.Колонки.Добавить("СписокФильтров");
	тблСтоимость.Колонки.Добавить("ЗначенияГруппировок");
	тблСтоимость.Колонки.Добавить("IDСтроки");
	
	Для Каждого ТекСтрока Из тзВыработкаСвернутая Цикл
		// обновили фильтры данными текущей строки
		СписокПрицепов = Новый СписокЗначений;
		СписокМоделейПрицепов = Новый СписокЗначений;
		СписокТиповПрицепов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ТекСтрока.ПутЛист) Тогда
			СписокФильтров.Вставить("Тягач",        ТекСтрока.ПутЛист.ТранспортноеСредство);
			СписокФильтров.Вставить("МодельТягача", ТекСтрока.ПутЛист.ТранспортноеСредство.Модель);
			СписокФильтров.Вставить("ТипТягача",    ТекСтрока.ПутЛист.ТранспортноеСредство.ТипТС);
			
			Для Каждого ТекПрицеп Из ТекСтрока.ПутЛист.Прицепы Цикл
				СписокПрицепов.Добавить(ТекПрицеп.ТС);
				СписокМоделейПрицепов.Добавить(ТекПрицеп.ТС.Модель);
				СписокТиповПрицепов.Добавить(ТекПрицеп.ТС.ТипТС);
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЭтоСтандарт Тогда
			Для Каждого ТекПрицеп Из ТекСтрока.Прицепы Цикл
				СписокПрицепов.Добавить(ТекПрицеп);
				СписокМоделейПрицепов.Добавить(ТекПрицеп.Модель);
				СписокТиповПрицепов.Добавить(ТекПрицеп.ТипТС);
			КонецЦикла;
		КонецЕсли;
		Если СписокПрицепов.Количество() > 0 Тогда
			СписокФильтров.Вставить("Прицеп",        СписокПрицепов);
			СписокФильтров.Вставить("МодельПрицепа", СписокМоделейПрицепов);
			СписокФильтров.Вставить("ТипПрицепа",    СписокТиповПрицепов);
		КонецЕсли;
		
		СписокФильтров.Вставить("Маршрут", ТекСтрока.Маршрут);
		СписокФильтров.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		Если НЕ ЭтоСтандарт Тогда
			СписокФильтров.Вставить("ВидГруза", ТекСтрока.Номенклатура.уатВидГруза);
			СписокФильтров.Вставить("ОбъектСтроительства", ТекСтрока.ОбъектСтроительства);
			СписокФильтров.Вставить("ВидПеревозки", ТекСтрока.ВидПеревозки);
			СписокФильтров.Вставить("НаправлениеПеревозки", ТекСтрока.НаправлениеПеревозки);
		КонецЕсли;
		
		// ищем прейскурант
		мТаблицаПрейскурант = НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата);
		
		// не нашли прейскурант
		Если мТаблицаПрейскурант.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		мРасстояниеГруз     = ТекСтрока.КоличествоКмГруз;
		мРасстояниеПорожний = ТекСтрока.КоличествоКмПорожний;
		мСпецРабота1        = ТекСтрока.СпецРабота1;
		мСпецРабота2        = ТекСтрока.СпецРабота2;
		мСпецРабота3        = ТекСтрока.СпецРабота3;
		мСпецРабота4        = ТекСтрока.СпецРабота4;
		мСпецРабота5        = ТекСтрока.СпецРабота5;
		мКоличСпецРабота1   = ТекСтрока.КоличествоСпецРаботы1;
		мКоличСпецРабота2   = ТекСтрока.КоличествоСпецРаботы2;
		мКоличСпецРабота3   = ТекСтрока.КоличествоСпецРаботы3;
		мКоличСпецРабота4   = ТекСтрока.КоличествоСпецРаботы4;
		мКоличСпецРабота5   = ТекСтрока.КоличествоСпецРаботы5;
		мВремяРаботы        = ТекСтрока.КоличествоЧасовДоп;
		мКоличествоОпераций = ТекСтрока.КоличествоОпераций;
		мГрузоподъемность   = уатПутевыеЛисты.уатГрузоподъемностьПоПЛ(ТекСтрока.ПутЛист);
		мОбъемКузова        = уатПутевыеЛисты.уатОбъемКузоваПоПЛ(ТекСтрока.ПутЛист);
		мКлассГруза         = уатОбщегоНазначения.уатКлассГруза(ТекСтрока.Номенклатура);
		мТнКм               = ТекСтрока.ТнКм;
		мОбъемКм            = ТекСтрока.ОбъемКм; 
		мКоличествоТонн     = ТекСтрока.КоличествоТонн;
		мОбъем              = ТекСтрока.Объем;
		мПробегОбщий        = ТекСтрока.ПробегОбщийДоп;
		
		// Значения группировок нужны в основном для расчета группировок сложных тарифов 
		ЗначенияГруппировок = Новый Соответствие;
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяРаботы/3600);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.КоличествоОпераций, мКоличествоОпераций);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПробегСГрузом, мРасстояниеГруз);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПробегПорожний, мРасстояниеПорожний);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрока.КоличествоЕздок);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ВесГруза, мКоличествоТонн);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.Объем, мОбъем);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ТнКм, мТнКм);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ОбъемКм, мОбъемКм);
		Если Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы.Временный Тогда
			ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрока.ПогрузочноРазгрузочныеРаботыДоп/3600);
		Иначе
			ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрока.ПогрузочноРазгрузочныеРаботыДоп);
		КонецЕсли;
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, ТекСтрока.ПростойПодПогрузкойДоп/3600);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, ТекСтрока.ПростойПодРазгрузкойДоп/3600);
		ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.Подача, ТекСтрока.ПодачаДоп/3600);
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Расстояние, мРасстояниеГруз);
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ВремяРаботы, мВремяРаботы/3600);
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, мКлассГруза);
		
		Если НЕ ЭтоСтандарт Тогда
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ВесГруза, мКоличествоТонн);
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемГруза, мОбъем);
			
			// Превышение габаритов
			ПорогПревышенияПоВысоте = Справочники.уатПараметрыВыработки.ПревышениеВысоты.ПорогПревышения;
			ПорогПревышенияПоДлине  = Справочники.уатПараметрыВыработки.ПревышениеДлины.ПорогПревышения;
			ПорогПревышенияПоШирине = Справочники.уатПараметрыВыработки.ПревышениеШирины.ПорогПревышения;
			ПорогПревышенияПоВесу   = Справочники.уатПараметрыВыработки.ПревышениеВеса.ПорогПревышения;
			ПорогПревышенияПоОбъему = Справочники.уатПараметрыВыработки.ПревышениеОбъема.ПорогПревышения;
						
			ПараметрыГруза = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(
				ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
			ПревышениеПоВысоте = ПараметрыГруза.Высота - ПорогПревышенияПоВысоте;
			ПревышениеПоДлине  = ПараметрыГруза.Длина  - ПорогПревышенияПоДлине;
			ПревышениеПоШирине = ПараметрыГруза.Ширина - ПорогПревышенияПоШирине;
			ПревышениеПоВесу   = мКоличествоТонн * КоэфВеса - ПорогПревышенияПоВесу;
			ПревышениеПоОбъему = мОбъем * КоэфОбъема - ПорогПревышенияПоОбъему;
			
			Если ПорогПревышенияПоВысоте > 0 И ПревышениеПоВысоте > 0 Тогда
				ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПревышениеВысоты, ПревышениеПоВысоте);
			КонецЕсли;
			Если ПорогПревышенияПоДлине > 0 И ПревышениеПоДлине > 0 Тогда
				ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПревышениеДлины, ПревышениеПоДлине);
			КонецЕсли;
			Если ПорогПревышенияПоШирине > 0 И ПревышениеПоШирине > 0 Тогда
				ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПревышениеШирины, ПревышениеПоШирине);
			КонецЕсли;
			Если ПорогПревышенияПоВесу > 0 И ПревышениеПоВесу > 0 Тогда
				ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПревышениеВеса, ПревышениеПоВесу);
			КонецЕсли;
			Если ПорогПревышенияПоОбъему > 0 И ПревышениеПоОбъему > 0 Тогда
				ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПревышениеОбъема, ПревышениеПоОбъему);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ТекСтрока["КоличествоСпецРабот"] Цикл
			ТекСпецРабота = ТекСтрока["СпецРабота" + Сч];
			ТекКоличествоСпецРаботы = ЗначенияГруппировок.Получить(ТекСпецРабота);
			Если ТекКоличествоСпецРаботы = Неопределено Тогда
				ТекКоличествоСпецРаботы = 0;
			КонецЕсли;
			ТекКоличествоСпецРаботы = ТекКоличествоСпецРаботы + КоличествоВыработкиДляРасчетаСтоимости(ТекСпецРабота, ТекСтрока["КоличествоСпецРаботы" + Сч]);
			ЗначенияГруппировок.Вставить(ТекСпецРабота, ТекКоличествоСпецРаботы);
		КонецЦикла;
		
		// нашли прейскурант с тарифами - перебираем, добавляем строки стоимости
		Для Каждого ТекСтрокаТариф из мТаблицаПрейскурант Цикл
			мСсылкаТариф = ТекСтрокаТариф.Тариф;
			мПрейскурант = ТекСтрокаТариф.Прейскурант;
			
			Если мСсылкаТариф.МетодРасчета <> Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
				И мСсылкаТариф.МетодРасчета <> Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки Тогда
				Продолжить;
			КонецЕсли;
			
			// Стоимость груза добавляем здесь, т.к. нужен перевод стоимости в валюту тарифа, а тариф известен в этом цикле
			Если НЕ ЭтоСтандарт Тогда
				мСтоимостьГруза = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ДокументОбъект.ВалютаДокумента, мПрейскурант.Валюта, ДокументОбъект.Дата, ДокументОбъект.Дата);
				ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.СтоимостьГруза, мСтоимостьГруза);
			КонецЕсли;
			
			мПараметрВыработки = мСсылкаТариф.ПараметрВыработки;
			флСпец = 0;
			мВыработка = ЗначенияГруппировок.Получить(мПараметрВыработки);
			Если мВыработка = Неопределено Тогда
				мВыработка = 0;
			ИначеЕсли мПараметрВыработки = мСпецРабота1 Тогда
				флСпец = 1;
			ИначеЕсли мПараметрВыработки = мСпецРабота2 Тогда
				флСпец = 2;
			ИначеЕсли мПараметрВыработки = мСпецРабота3 Тогда
				флСпец = 3;
			ИначеЕсли мПараметрВыработки = мСпецРабота4 Тогда
				флСпец = 4;
			ИначеЕсли мПараметрВыработки = мСпецРабота5 Тогда
				флСпец = 5;
			КонецЕсли;
			
			Если мВыработка = 0 И (мСсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки
				ИЛИ мСсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой И мСсылкаТариф.УсловиеПримененияФиксТарифа=0) Тогда
				Продолжить;
			КонецЕсли;
			
			флДобавленаСтрокаСтоимости = Ложь;
			Если мСсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой Тогда
				// Если тариф фиксированный то проверяем чтобы не было дублирования тарифа для разных строк ТТД
				Если тзФиксированныеТарифы.Найти(мСсылкаТариф, "Тариф") = Неопределено Тогда
					// ДобавитьСтрокуСтоимости(ТекСтрока, мСсылкаТариф.ПараметрВыработки, 0, мПрейскурант, мСсылкаТариф, мСсылкаТариф.Тариф);
					
					мТариф = ЗначениеТарифа(мСсылкаТариф, ЗначенияГруппировок, ТекСтрокаТариф.ID);
					
					ИндексСтрокиСтоимости = ДобавитьСтрокуСтоимостиТТД(ДокументОбъект, ТекСтрока, мПараметрВыработки, мВыработка,
						мПрейскурант, мСсылкаТариф, мТариф,, ТекСтрокаТариф.ID, тблСтоимость, ТекСтрокаТариф.СтепеньСовпаденияФильтров);
						
					Если ИндексСтрокиСтоимости <> -1 Тогда
						мНоваяСтрокаФТ 			= тзФиксированныеТарифы.Добавить();
						мНоваяСтрокаФТ.Прейскурант = мПрейскурант;
						мНоваяСтрокаФТ.Тариф 	= мСсылкаТариф;
						мНоваяСтрокаФТ.ПутЛист 	= ТекСтрока.ПутЛист;	
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				// Если тариф по параметрам выработки, то считаем от выработки
				спецРасстояние = мРасстояниеГруз;
				спецВремя = мВремяРаботы/3600;
				Если флСпец > 0 Тогда
					Если (Вычислить("мСпецРабота" + флСпец + ".Временный")) Тогда
						спецВремя = Вычислить("мКоличСпецРабота" + флСпец);
					Иначе
						спецРасстояние = Вычислить("мКоличСпецРабота" + флСпец);
					КонецЕсли;
				КонецЕсли;
				
				// если есть спецработы, то временно добавляем их к значениям группировок
				Если флСпец > 0 Тогда
					ЗначенияГруппировок[Справочники.уатПараметрыВыработки.ПробегСГрузом] = спецРасстояние;
					ЗначенияГруппировок[Справочники.уатПараметрыВыработки.ВремяВРаботе] = спецВремя;
				КонецЕсли;
				
				мТариф = ЗначениеТарифа(мСсылкаТариф, ЗначенияГруппировок, ТекСтрокаТариф.ID);
				
				// теперь удаляем спецработы из значений группировок
				Если флСпец > 0 Тогда
					ЗначенияГруппировок[Справочники.уатПараметрыВыработки.ПробегСГрузом] = мРасстояниеГруз;
					ЗначенияГруппировок[Справочники.уатПараметрыВыработки.ВремяВРаботе] = мВремяРаботы/3600;
				КонецЕсли;
			
				ИндексСтрокиСтоимости = ДобавитьСтрокуСтоимостиТТД(ДокументОбъект, ТекСтрока, мПараметрВыработки, мВыработка, 
					мПрейскурант, мСсылкаТариф, мТариф,, ТекСтрокаТариф.ID, тблСтоимость, ТекСтрокаТариф.СтепеньСовпаденияФильтров);
						
			КонецЕсли;
			
			// добавляем тарифы процентом от других тарифов
			Если ИндексСтрокиСтоимости <> -1 Тогда
				ТекСтрокаСтоимость = тблСтоимость[ИндексСтрокиСтоимости];
				ТекСтрокаСтоимость.IDСтроки = ТекСтрокаТариф.ID;
				ТекСтрокаСтоимость.СписокФильтров = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СписокФильтров);
				ТекСтрокаСтоимость.ЗначенияГруппировок = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ЗначенияГруппировок);
			КонецЕсли;
						
		КонецЦикла;
	КонецЦикла;
	
	// Для фикс. тарифов с условием применения "Всегда" оставляем только максимальный по степени совпадения фильтров
	МаксСтепеньСовпадения = 0;
	Для Каждого ТекСтрокаСтоимость Из тблСтоимость Цикл
		Если ТекСтрокаСтоимость.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
			И ТекСтрокаСтоимость.Тариф.УсловиеПримененияФиксТарифа = 1
			И ТипЗнч(ТекСтрокаСтоимость.СтепеньСовпаденияФильтров) = Тип("Число") Тогда
			
			МаксСтепеньСовпадения = Макс(МаксСтепеньСовпадения, ТекСтрокаСтоимость.СтепеньСовпаденияФильтров);
		КонецЕсли;
	КонецЦикла;
	Сч = тблСтоимость.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаСтоимость = тблСтоимость[Сч];
		Если ТекСтрокаСтоимость.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
			И ТекСтрокаСтоимость.Тариф.УсловиеПримененияФиксТарифа = 1
			И ТипЗнч(ТекСтрокаСтоимость.СтепеньСовпаденияФильтров) = Тип("Число")
			И ТекСтрокаСтоимость.СтепеньСовпаденияФильтров < МаксСтепеньСовпадения Тогда
			тблСтоимость.Удалить(ТекСтрокаСтоимость);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
			
	// Удаляем лишние тарифы согласно настройке приоритета тарифов по стоимости в прейскуранте
	Сч = тблСтоимость.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаСтоимость = тблСтоимость[Сч];
		
		// Настройка прейскуранта, когда необходимо оставлять все тарифы
		Если ТекСтрокаСтоимость.Прейскурант.ПриоритетТарифов = 2 Тогда
			Сч = Сч - 1;
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаПоиска Из тблСтоимость Цикл
			Если ТекСтрокаПоиска.НомерСтрокиВыработки = ТекСтрокаСтоимость.НомерСтрокиВыработки
				И ТекСтрокаПоиска <> ТекСтрокаСтоимость
				И ТекСтрокаПоиска.Прейскурант = ТекСтрокаСтоимость.Прейскурант
				И ТекСтрокаПоиска.ПараметрВыработки = ТекСтрокаСтоимость.ПараметрВыработки
				И (ТекСтрокаСтоимость.Прейскурант.ПриоритетТарифов = 0 И ТекСтрокаСтоимость.Сумма <= ТекСтрокаПоиска.Сумма
				ИЛИ ТекСтрокаСтоимость.Прейскурант.ПриоритетТарифов = 1 И ТекСтрокаСтоимость.Сумма >= ТекСтрокаПоиска.Сумма) Тогда
				
				тблСтоимость.Удалить(ТекСтрокаСтоимость);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	// Удаляем строки с нулевой суммой (бесплатные)
	Сч = тблСтоимость.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаСтоимость = тблСтоимость[Сч];
		Если ТекСтрокаСтоимость.Сумма = 0 Тогда
		    тблСтоимость.Удалить(ТекСтрокаСтоимость);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// добавляем стоимость по тарифам процентом
	Для Каждого ТекСтрока Из тблСтоимость Цикл
		Если ТекСтрока.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			Продолжить;
		КонецЕсли;
		
		мсвТарифыПроцентом = НайтиТарифыПроцентом(ТекСтрока.Тариф, ТекСтрока.СписокФильтров, Ложь);
			
		Для Каждого ТекТарифПроцентом Из мсвТарифыПроцентом Цикл
			Если НЕ ЗначениеЗаполнено(ТекТарифПроцентом) Тогда
				Продолжить;
			КонецЕсли;
			
			мТариф = ЗначениеТарифа(ТекТарифПроцентом, ТекСтрока.ЗначенияГруппировок, ТекСтрока.IDСтроки);
								
			ДобавитьСтрокуСтоимостиТТД(ДокументОбъект, ТекСтрока, ТекСтрока.Тариф.ПараметрВыработки, 1, ТекСтрока.Тариф.Владелец,
				ТекТарифПроцентом, мТариф, ТекСтрока.Сумма,, тблСтоимость);
		КонецЦикла;
	КонецЦикла;
	
	ДокументОбъект.Стоимость.Загрузить(тблСтоимость);	
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		ДокументОбъект.Стоимость.Свернуть("Тариф, Маршрут, Номенклатура, НоменклатураУслуги, ПараметрВыработки, ПутЛист, СтавкаНДС, Цена, Содержание, СтатьяДоходов", "СуммаНДС, Сумма, Количество");
	Иначе
		ДокументОбъект.Стоимость.Свернуть("Тариф, Маршрут, Номенклатура, НоменклатураУслуги, ПараметрВыработки, ПутЛист, СтавкаНДС, Цена, ОбъектСтроительства, Содержание, ВидПеревозки, НаправлениеПеревозки, СтатьяДоходов", "СуммаНДС, Сумма, Количество");
	КонецЕсли;
	
КонецПроцедуры //РассчитатьСтоимостьУслугТТД

#КонецОбласти


#Область ТарифыЗарплаты

// Функция определяет находится ли тариф зарплаты в области действия
//
// Параметры:
//  ТарифЗП - ссылка справочника ТарифыЗП
//  Организация - входящая организация документа, по которому используем тариф
//	СтруктураОбластьДействия - структура области действия с ключами [ТС, МодельТС, Маршрут, Контрагент, ВидРемонта].
//		В качестве значений структуры могут выступать как ссылки, так и списки ссылок
//  ВесСовпаденияФильтров - если общий тариф, то 0. Если область действия содержит например модель,
//		указанную в фильтре, то вес будет 1. Если таких совпадений n то вес = n.
//	Если имеется несовпадение по типу области значения области со значением фильтра,
//		то вес устанавливаем -1 (такой тариф не подходит вообще).
//
// Алгоритм поиска:
// Случай, когда в табличной части «Фильтр» заполнены несколько строк с одинаковым типом (например Модели ТС).
//	Для путевого листа данный тариф будет применяться только в том случае, если модель тягача в путевом листе совпадет
//	с одним из значений строк фильтра. 
// Случай, когда в табличной части «Фильтр» заполнены несколько строк с разными типами (например Модели ТС и Маршруты).
//	Для путевого листа данный тариф будет применяться только в том случае, когда одновременно будут выполнены
//	два условия:
//		1. Если модель тягача в путевом листе совпадет с одним из значений строк фильтра с типом Модель ТС;
//		2. В табличной части путевого листа  "Задание" есть хоть одна строка, в которой реквизит "Маршрут" совпадет
//			с одним из значений строк фильтра с типом Маршруты.
//
Функция ТарифЗПвОбластиДействия(ТарифЗП, Организация, СтруктураОбластьДействия, ВесСовпаденияФильтров = 0) Экспорт
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	// дозаполним структуру для корректной работы функции
	Если НЕ СтруктураОбластьДействия.Свойство("ТС") Тогда
		СтруктураОбластьДействия.Вставить("ТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("МодельТС") Тогда
		СтруктураОбластьДействия.Вставить("МодельТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ТипТС") Тогда
		СтруктураОбластьДействия.Вставить("ТипТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Маршрут") Тогда
		СтруктураОбластьДействия.Вставить("Маршрут", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Контрагент") Тогда
		СтруктураОбластьДействия.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Подразделение") Тогда
		СтруктураОбластьДействия.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	Если НЕ ЭтоСтандарт Тогда
		Если НЕ СтруктураОбластьДействия.Свойство("ОбъектСтроительства") Тогда
			СтруктураОбластьДействия.Вставить("ОбъектСтроительства", Неопределено);
		КонецЕсли;
		Если НЕ СтруктураОбластьДействия.Свойство("ВидПеревозки") Тогда
			СтруктураОбластьДействия.Вставить("ВидПеревозки", Неопределено);
		КонецЕсли;
		Если НЕ СтруктураОбластьДействия.Свойство("НаправлениеПеревозки") Тогда
			СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", Неопределено);
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ВидРемонта") Тогда
		СтруктураОбластьДействия.Вставить("ВидРемонта", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ПунктОтправления") Тогда
		СтруктураОбластьДействия.Вставить("ПунктОтправления", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ПунктНазначения") Тогда
		СтруктураОбластьДействия.Вставить("ПунктНазначения", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Номенклатура") Тогда
		СтруктураОбластьДействия.Вставить("Номенклатура", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("КлассВодителя") Тогда
		СтруктураОбластьДействия.Вставить("КлассВодителя", 0);
	КонецЕсли;
	
	// если модель не заполнена - берем из ТС
	Если НЕ ЗначениеЗаполнено(СтруктураОбластьДействия.МодельТС) И ЗначениеЗаполнено(СтруктураОбластьДействия.ТС) Тогда
		Если ТипЗнч(СтруктураОбластьДействия.ТС) = Тип("СписокЗначений") Тогда
			списМоделиТС = Новый СписокЗначений;
			Для Каждого ТекТС Из СтруктураОбластьДействия.ТС Цикл
				Если списМоделиТС.НайтиПоЗначению(ТекТС.Значение.Модель) = Неопределено Тогда
					списМоделиТС.Добавить(ТекТС.Значение.Модель);
				КонецЕсли;
			КонецЦикла;
			СтруктураОбластьДействия.Вставить("МодельТС", списМоделиТС);
		Иначе
			СтруктураОбластьДействия.Вставить("МодельТС", СтруктураОбластьДействия.ТС.Модель);
		КонецЕсли;
	КонецЕсли;
	// если тип не заполнен - сначала берем из ТС, затем из модели
	Если НЕ ЗначениеЗаполнено(СтруктураОбластьДействия.ТипТС) Тогда
		списТипыТС = Новый СписокЗначений;
		Если ЗначениеЗаполнено(СтруктураОбластьДействия.ТС) Тогда
			Если ТипЗнч(СтруктураОбластьДействия.ТС) = Тип("СписокЗначений") Тогда
				Для Каждого ТекТС Из СтруктураОбластьДействия.ТС Цикл
					Если ЗначениеЗаполнено(ТекТС.Значение.ТипТС)
						И списТипыТС.НайтиПоЗначению(ТекТС.Значение.ТипТС) = Неопределено Тогда
						списТипыТС.Добавить(ТекТС.Значение.ТипТС);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(СтруктураОбластьДействия.ТС.ТипТС) Тогда
					списТипыТС.Добавить(СтруктураОбластьДействия.ТС.ТипТС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОбластьДействия.МодельТС) Тогда
			Если ТипЗнч(СтруктураОбластьДействия.МодельТС) = Тип("СписокЗначений") Тогда
				Для Каждого ТекМодельТС Из СтруктураОбластьДействия.МодельТС Цикл
					Если ЗначениеЗаполнено(ТекМодельТС.Значение.ТипТС)
						И списТипыТС.НайтиПоЗначению(ТекМодельТС.Значение.ТипТС) = Неопределено Тогда
						списТипыТС.Добавить(ТекМодельТС.Значение.ТипТС);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(СтруктураОбластьДействия.МодельТС.ТипТС) Тогда
					списТипыТС.Добавить(СтруктураОбластьДействия.МодельТС.ТипТС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если списТипыТС.Количество() = 1 Тогда
			СтруктураОбластьДействия.Вставить("ТипТС", списТипыТС[0].Значение);
		ИначеЕсли списТипыТС.Количество() > 1 Тогда
			СтруктураОбластьДействия.Вставить("ТипТС", списТипыТС);
		КонецЕсли;
	КонецЕсли;
	
	// проверка по организации
	РезультатОрганизация = Ложь;
	Если ТарифЗП.Организации.Количество() = 0 Тогда
		РезультатОрганизация = Истина;
	Иначе
		Для Каждого ТекСтрока Из ТарифЗП.Организации Цикл
			Если ТекСтрока.Организация = Организация Тогда
				РезультатОрганизация = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Если НЕ РезультатОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если ТарифЗП.ОбластиДействия.Количество() = 0 Тогда
		Результат = Истина;
	Иначе
		тблСписокФильтров = Новый ТаблицаЗначений;
		тблСписокФильтров.Колонки.Добавить("ВидОбласти");
		тблСписокФильтров.Колонки.Добавить("Значение");
		тблСписокФильтров.Колонки.Добавить("Результат");
		Для Каждого ТекФильтр Из СтруктураОбластьДействия Цикл
			НоваяСтрока = тблСписокФильтров.Добавить();
			Если ТекФильтр.Ключ = "ТС" Тогда
				НоваяСтрока.ВидОбласти = "Тягач";
			ИначеЕсли ТекФильтр.Ключ = "МодельТС" Тогда
				НоваяСтрока.ВидОбласти = "МодельТягача";
			ИначеЕсли ТекФильтр.Ключ = "ТипТС" Тогда
				НоваяСтрока.ВидОбласти = "ТипТягача";
			Иначе
				НоваяСтрока.ВидОбласти = ТекФильтр.Ключ;
			КонецЕсли;
			НоваяСтрока.Значение = ТекФильтр.Значение;
		КонецЦикла;
		
		ВесСовпаденияФильтров = 0;
		Для Каждого ТекСтрока Из ТарифЗП.ОбластиДействия Цикл
			Для Каждого ТекФильтр Из тблСписокФильтров Цикл
				Если ТекСтрока.ВидОбластиДействия = Перечисления.уатВидыОбластейДействияТарифовТС[ТекФильтр.ВидОбласти] Тогда
					Если ТипЗнч(ТекФильтр.Значение) = Тип("СписокЗначений") И ТекФильтр.Значение.НайтиПоЗначению(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено
						ИЛИ ТекФильтр.Значение = ТекСтрока.ЗначениеОбластиДействия
						ИЛИ СписокРодителейЭлементаСправочника(ТекФильтр.Значение).Найти(ТекСтрока.ЗначениеОбластиДействия) <> Неопределено Тогда
						
						ТекФильтр.Результат = Истина;
						ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
					Иначе	
						ТекФильтр.Результат = ?(ТекФильтр.Результат = Неопределено, Ложь, ТекФильтр.Результат);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Результат = Истина;
		Для Каждого ТекФильтр Из тблСписокФильтров Цикл
			// если ТС в фильтре не указано, то тариф используется для всех ТС
			Результат = Результат И
				?(ТекФильтр.Результат = Неопределено, Истина, ТекФильтр.Результат);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция возвращает результат таблицу значений действующих тарифов з/п
//
// Параметры:
//  вхСотрудник - СправочникСсылка.Сотрудники - сотрудник, по которому ищется тариф з/п
//  вхДата - Дата - Дата поиска тарифов
//  СписокФильтров - Структура - структура фильтров с ключами, соответствующими типам области данных тарифов з/п
//
Функция НайтиТарифыЗП(вхСотрудник, вхДата, ДопПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТарифыЗПСотрудников.ТарифЗП КАК ТарифЗП,
	|	уатТарифыЗПСотрудников.Период КАК Период
	|ПОМЕСТИТЬ втТарифыИТарифныеПланы
	|ИЗ
	|	РегистрСведений.уатТарифыСотрудников.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Сотрудник
	|				И ВЫБОР
	|					КОГДА ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &Дата
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И НЕ ТарифЗП.ПометкаУдаления) КАК уатТарифыЗПСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыЗП.ТарифЗП КАК ТарифЗП,
	|	ТарифыЗП.Период КАК Период
	|ПОМЕСТИТЬ втТарифы
	|ИЗ
	|	втТарифыИТарифныеПланы КАК ТарифыЗП
	|ГДЕ
	|	ТарифыЗП.ТарифЗП ССЫЛКА Справочник.уатТарифыЗП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТарифныеПланыЗПТарифы.Тариф,
	|	ТарифыИТарифныеПланы.Период
	|ИЗ
	|	Справочник.уатТарифныеПланыЗП.Тарифы КАК ТарифныеПланыЗПТарифы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТарифыИТарифныеПланы КАК ТарифыИТарифныеПланы
	|		ПО ТарифныеПланыЗПТарифы.Ссылка = ТарифыИТарифныеПланы.ТарифЗП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТарифыЗП.ТарифЗП КАК ТарифЗП,
	|	ТарифыЗП.ТарифЗП.ВидНачисления КАК ВидНачисления,
	|	ТарифыЗП.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда КАК СпособРасчетаОплатыТруда,
	|	ТарифыЗП.ТарифЗП.ПараметрВыработки КАК ПараметрВыработки,
	|	ТарифыЗП.Период КАК Период
	|ИЗ
	|	втТарифы КАК ТарифыЗП
	|ГДЕ
	|	ТарифыЗП.ТарифЗП.Применение = &Применение
	|УПОРЯДОЧИТЬ ПО
	|	ТарифыЗП.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда.Порядок,
	|	ТарифыЗП.ТарифЗП.ВидНачисления.Приоритет УБЫВ,
	|	Период УБЫВ");
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.уатТарифыСотрудников", "РегистрСведений.уатТарифыЗПСотрудников");
	КонецЕсли;		
		
	Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
	Запрос.УстановитьПараметр("Дата", вхДата);
	Запрос.УстановитьПараметр("Дата", вхДата);
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("Применение") Тогда
		Запрос.УстановитьПараметр("Применение", ДопПараметры.Применение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТарифыЗП.ТарифЗП.Применение = &Применение", "ИСТИНА");
	КонецЕсли;
		
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	// Отключено в связи с удалением реквизита "Начислять зарплату в путевых листах" для сотрудника
	//Если РезультатТаблица.Количество() = 0 Тогда
	//	ТекстНСТР = НСтр("en='Not found rates of wages for employee';ru='Не найдены тарифы зарплаты для сотрудника'")
	//		+ " """ + вхСотрудник + """";
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	//КонецЕсли;
	
	Возврат РезультатТаблица;
КонецФункции

// Функция возвращает значение тарифа
//
// Параметры:
//  ТарифЗП - СправочникСсылка - уатТарифыЗП
//  ЗначенияГруппировок - структура или соответствие - структура значений группировок для сложных тарифов
//		содержит ключи ВремяРаботы, Грузоподъемность, КлассГруза и др.
//
Функция ЗначениеТарифаЗП(ТарифЗП, ЗначенияГруппировок) Экспорт
	Результат = 0;
	
	Если НЕ ТарифЗП.СложныйТариф Тогда
		Возврат ТарифЗП.Тариф;
	КонецЕсли;              
	
	тзУсловийТарифов = ТарифЗП.ТаблицаРасчета.Выгрузить();
	тзУсловийТарифов.Очистить();
	Для Каждого ТекСтрока Из ТарифЗП.ТаблицаРасчета Цикл
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа1) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 1, ТекСтрока, ЗначенияГруппировок) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа2) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 2, ТекСтрока, ЗначенияГруппировок) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа3) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 3, ТекСтрока, ЗначенияГруппировок) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		НоваяСтрока = тзУсловийТарифов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;	
	
	тзУсловийТарифов.Колонки.Добавить("Приоритет");
	Для Каждого ТекСтрока Из тзУсловийТарифов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки1) 
			И ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки2)
			И ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки3) Тогда
			ТекСтрока.Приоритет = 1;
		ИначеЕсли (ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки1)
			И ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки2)) ИЛИ
			(ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки1)
			И ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки3)) ИЛИ
			(ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки2)
			И ЗначениеЗаполнено(ТекСтрока.ЗнакГруппировки3)) Тогда
			ТекСтрока.Приоритет = 2;
		Иначе
			ТекСтрока.Приоритет = 3;
		КонецЕсли;
	КонецЦИкла;
	тзУсловийТарифов.Сортировать("Приоритет, НомерСтроки");
	
	Если тзУсловийТарифов.Количество() <> 0 Тогда
		Если ЗначениеЗаполнено(тзУсловийТарифов[0].ЗнакГруппировки1) Тогда
			Знак    = тзУсловийТарифов[0].ЗнакГруппировки1;
			Знак2   = тзУсловийТарифов[0].ЗнакГруппировки2;
			Знак3   = тзУсловийТарифов[0].ЗнакГруппировки3;
			Строки = Новый Массив();
			Для Каждого ТекСтрока Из тзУсловийТарифов Цикл
				Если тзУсловийТарифов[0].Приоритет = ТекСтрока.Приоритет Тогда
					Если Знак = Перечисления.уатЗнакиСравнения.Больше 
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.Больше = ТекСтрока.ЗнакГруппировки1 
							ИЛИ Перечисления.уатЗнакиСравнения.БольшеИлиРавно = ТекСтрока.ЗнакГруппировки1 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.МеньшеИлиРавно = ТекСтрока.ЗнакГруппировки1 
							ИЛИ Перечисления.уатЗнакиСравнения.Меньше = ТекСтрока.ЗнакГруппировки1 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Перечисления.уатЗнакиСравнения.Равно = ТекСтрока.ЗнакГруппировки1 Тогда
						Строки.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Строки = Новый Массив();
			Для Каждого ТекСтрока Из тзУсловийТарифов Цикл
				Если тзУсловийТарифов[0].Приоритет = ТекСтрока.Приоритет Тогда
					Если Знак = Перечисления.уатЗнакиСравнения.Больше 
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.Больше = ТекСтрока.ЗнакГруппировки1 
							ИЛИ Перечисления.уатЗнакиСравнения.БольшеИлиРавно = ТекСтрока.ЗнакГруппировки1 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.МеньшеИлиРавно = ТекСтрока.ЗнакГруппировки1 
							ИЛИ Перечисления.уатЗнакиСравнения.Меньше = ТекСтрока.ЗнакГруппировки1 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Перечисления.уатЗнакиСравнения.Равно = ТекСтрока.ЗнакГруппировки1 Тогда
						Строки.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Строки.Количество() > 1 Тогда
				тзУсловийТарифовСортировка = Новый ТаблицаЗначений();
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки1");
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки2");
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки3");
				тзУсловийТарифовСортировка.Колонки.Добавить("Тариф");
				Для Каждого ТекСтрока Из Строки Цикл
					НоваяСтрока = тзУсловийТарифовСортировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
				
				Направление1 = ОпределитьНаправлениеСортировкиСдельногоТарифаЗП(Знак);
				Направление2 = ОпределитьНаправлениеСортировкиСдельногоТарифаЗП(Знак2);
				Направление3 = ОпределитьНаправлениеСортировкиСдельногоТарифаЗП(Знак3);
				тзУсловийТарифовСортировка.Сортировать("ЗначениеГруппировки1 " + Направление1 + ",ЗначениеГруппировки2 " + Направление2 + ",ЗначениеГруппировки3 " + Направление3);
				Результат = тзУсловийТарифовСортировка[0].Тариф;
			Иначе
				Результат = тзУсловийТарифов[0].Тариф;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(тзУсловийТарифов[0].ЗнакГруппировки2) Тогда
			Знак    = тзУсловийТарифов[0].ЗнакГруппировки2;
			Знак3   = тзУсловийТарифов[0].ЗнакГруппировки3;
			Строки = Новый Массив();
			Для Каждого ТекСтрока Из тзУсловийТарифов Цикл
				Если тзУсловийТарифов[0].Приоритет = ТекСтрока.Приоритет Тогда
					Если Знак = Перечисления.уатЗнакиСравнения.Больше 
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.Больше = ТекСтрока.ЗнакГруппировки2 
							ИЛИ Перечисления.уатЗнакиСравнения.БольшеИлиРавно = ТекСтрока.ЗнакГруппировки2 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.МеньшеИлиРавно = ТекСтрока.ЗнакГруппировки2 
							ИЛИ Перечисления.уатЗнакиСравнения.Меньше = ТекСтрока.ЗнакГруппировки2 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Перечисления.уатЗнакиСравнения.Равно = ТекСтрока.ЗнакГруппировки2 Тогда
						Строки.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Строки.Количество() > 1 Тогда
				тзУсловийТарифовСортировка = Новый ТаблицаЗначений();
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки1");
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки2");
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки3");
				тзУсловийТарифовСортировка.Колонки.Добавить("Тариф");

				Для Каждого ТекСтрока Из Строки Цикл
					НоваяСтрока = тзУсловийТарифовСортировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
				
				Направление1 = ОпределитьНаправлениеСортировкиСдельногоТарифаЗП(Знак);
				Направление3 = ОпределитьНаправлениеСортировкиСдельногоТарифаЗП(Знак3);
				тзУсловийТарифовСортировка.Сортировать("ЗначениеГруппировки2 " + Направление2 + ",ЗначениеГруппировки3 " + Направление3);
				Результат = тзУсловийТарифовСортировка[0].Тариф;
			Иначе
				Результат = тзУсловийТарифов[0].Тариф;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(тзУсловийТарифов[0].ЗнакГруппировки3) Тогда
			Знак   = тзУсловийТарифов[0].ЗнакГруппировки3;
			Строки = Новый Массив();
			Для Каждого ТекСтрока Из тзУсловийТарифов Цикл
				Если тзУсловийТарифов[0].Приоритет = ТекСтрока.Приоритет Тогда
					Если Знак = Перечисления.уатЗнакиСравнения.Больше 
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.Больше = ТекСтрока.ЗнакГруппировки3 
							ИЛИ Перечисления.уатЗнакиСравнения.БольшеИлиРавно = ТекСтрока.ЗнакГруппировки3 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше
						ИЛИ Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
						Если Перечисления.уатЗнакиСравнения.МеньшеИлиРавно = ТекСтрока.ЗнакГруппировки3 
							ИЛИ Перечисления.уатЗнакиСравнения.Меньше = ТекСтрока.ЗнакГруппировки3 Тогда
							Строки.Добавить(ТекСтрока);
						КонецЕсли;
					ИначеЕсли Перечисления.уатЗнакиСравнения.Равно = ТекСтрока.ЗнакГруппировки3 Тогда
						Строки.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Строки.Количество() > 1 Тогда
				тзУсловийТарифовСортировка = Новый ТаблицаЗначений();
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки1");
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки2");
				тзУсловийТарифовСортировка.Колонки.Добавить("ЗначениеГруппировки3");
				тзУсловийТарифовСортировка.Колонки.Добавить("Тариф");

				Для Каждого ТекСтрока Из Строки Цикл
					НоваяСтрока = тзУсловийТарифовСортировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
				
				Если Знак = Перечисления.уатЗнакиСравнения.Больше 
					ИЛИ Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
					тзУсловийТарифовСортировка.Сортировать("ЗначениеГруппировки3 Убыв");
					Результат = тзУсловийТарифовСортировка[0].Тариф;
				ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше
					ИЛИ Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
					тзУсловийТарифовСортировка.Сортировать("ЗначениеГруппировки3");
					Результат = тзУсловийТарифовСортировка[0].Тариф;
				Иначе
					Результат = тзУсловийТарифовСортировка[0].Тариф;
				КонецЕсли;
			Иначе
				Результат = тзУсловийТарифов[0].Тариф;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция получает список (массив) всех родителей для указанного элемента/группы справочника
//
Функция СписокРодителейЭлементаСправочника(СпрСсылка)
	мсвРез = Новый Массив;
	
	Попытка
		ТекРодитель = СпрСсылка.Родитель;
	Исключение
		Возврат мсвРез;
	КонецПопытки;
	
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		мсвРез.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
		
	Возврат мсвРез;
КонецФункции

// Функция возвращает тариф процентом от суммы по заданному базовому тарифу
//
Функция НайтиТарифыПроцентом(БазовыйТариф, СписокФильтров, ПрейскурантПоставщика_уэ = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТарифыТС.Ссылка КАК Тариф,
	|	ТарифыТС.Владелец КАК Прейскурант,
	|	ТарифыТС.ОбластьДействия КАК ОбластьДействия,
	|	0 КАК СтепеньСовпаденияФильтров
	|ИЗ
	|	Справочник.уатТарифыТС КАК ТарифыТС
	|ГДЕ
	|	ТарифыТС.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|	И НЕ ТарифыТС.ПометкаУдаления
	|	И НЕ ТарифыТС.ЭтоГруппа
	|	И ТарифыТС.Владелец = &Прейскурант
	|	И ТарифыТС.БазовыеУслуги.Номенклатура = &НоменклатураУслуги";
	
	Запрос.УстановитьПараметр("Прейскурант", БазовыйТариф.Владелец);
	Запрос.УстановитьПараметр("НоменклатураУслуги", БазовыйТариф.НоменклатураУслуги);
	
	тблТарифыПроцентом = Запрос.Выполнить().Выгрузить();
	
	ОтобратьТарифыПоОбластямДействия(тблТарифыПроцентом, СписокФильтров, Истина, ПрейскурантПоставщика_уэ);
	
	мсвТарифыПроцентом = тблТарифыПроцентом.ВыгрузитьКолонку("Тариф");
	
	Возврат мсвТарифыПроцентом;
КонецФункции

Процедура УдалитьИзФильтровПунктыСтрокой(СписокФильтров, ВидПункта)
	ТекФильтрПункт = СписокФильтров[ВидПункта];
	Если ТипЗнч(ТекФильтрПункт) = Тип("СписокЗначений") Тогда
		Для Каждого ТекЭлем Из ТекФильтрПункт Цикл
			Если ТипЗнч(ТекЭлем.Значение) = Тип("Строка") Тогда
				ТекЭлем.Значение = Справочники.уатПунктыНазначения.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТекФильтрПункт) = Тип("Строка") Тогда
		СписокФильтров[ВидПункта] = Справочники.уатПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

// УатПарсерУсловия()
// Параметры: Значение1 - число, Значение2 - число, Знак - перечисление "ЗнакСравнения"
// Возвращаемое значение: Истина, Ложь
// Описание: Проверка простого условия по перечислению "ЗнакиСравнения"
Функция уатПарсерУсловия(Значение1,Значение2,Знак)
	
	Значение1 = Число(Значение1);
	Значение2 = Число(Значение2);
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Знак) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Знак = Перечисления.уатЗнакиСравнения.Больше Тогда
		Если Значение1 > Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
		Если Значение1 >= Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше Тогда
		Если Значение1 < Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
		Если Значение1 <= Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Равно Тогда
		Если Значение1 = Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.НеРавно Тогда
		Если Значение1 <> Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //  глУсловие

// Функция проверяет соответствие условию строки тарифа
// Параметры:
//		Тариф               - тариф
//		НомерГруппировки    - номер условия
//		СтрокаТарифа        - строка табл. части прейскуранта
//		ЗначенияГруппировок - структура или соответствие
//
Функция уатПроверкаУсловияТарифа(Тариф, НомерГруппировки, СтрокаТаблицыРасчетаТарифа, ЗначенияГруппировок)
	флТарифнаяСетка = НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() И ТипЗнч(Тариф) <> Тип("СправочникСсылка.уатТарифыЗП") И Тариф.ТарифнаяСетка;
	
	Если НомерГруппировки = 1 Тогда
		Условие = Тариф.ГруппировкаТарифа1;
		Если флТарифнаяСетка Тогда
			ЗнакУсловия = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно;
		Иначе
			ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки1;
		КонецЕсли;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки1;
		
	ИначеЕсли НомерГруппировки = 2 Тогда
		Условие = Тариф.ГруппировкаТарифа2;
		Если флТарифнаяСетка Тогда
			ЗнакУсловия = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно;
		Иначе
			ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки2;
		КонецЕсли;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки2;
		
	ИначеЕсли НомерГруппировки = 3 Тогда
		Условие = Тариф.ГруппировкаТарифа3;
		Если флТарифнаяСетка Тогда
			ЗнакУсловия = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно;
		Иначе
			ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки3;
		КонецЕсли;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки3;
		
	ИначеЕсли НомерГруппировки = 4 Тогда
		Условие = Тариф.ГруппировкаТарифа4;
		Если флТарифнаяСетка Тогда
			ЗнакУсловия = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно;
		Иначе
			ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки4;
		КонецЕсли;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки4;
		
	Иначе	
		Возврат Ложь;
		
	КонецЕсли;
	
	// если в тарифе знак или значение группировки не указаны, то условие неверно
	Если НЕ ЗначениеЗаполнено(ЗнакУсловия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеУсловия = ЗначенияГруппировок.Получить(Условие);
	ЗначениеУсловия = ?(ЗначениеУсловия = Неопределено, 0, ЗначениеУсловия);
	
	Результат = уатПарсерУсловия(ЗначениеУсловия, ЗначениеГруппировки, ЗнакУсловия);
	
	Возврат Результат;
КонецФункции

Функция ОпределитьНаправлениеСортировкиСдельногоТарифаЗП(Знак)
	Если Знак = Перечисления.уатЗнакиСравнения.Больше 
		ИЛИ Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
		Возврат "Убыв";
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше
		ИЛИ Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
		Возврат "";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ДобавитьСтрокуСтоимостиТТД(ДокументОбъект, ТекСтрока, ПараметрВыработки, Количество, СсылкаПрейскурант,
	СсылкаТариф, Тариф, БазовыйТариф = 0, IDСтроки = Неопределено, тблСтоимость, СтепеньСовпаденияФильтров = Неопределено)
	
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	ФиксТариф  = (СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой);
	ВырабТариф = (СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки);
	ПроцТариф  = (СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы);
	
	//КоличествоВыраб = КоличествоВыработкиДляРасчетаСтоимости(ПараметрВыработки, Количество);
	КоличествоВыраб = Количество;
			
	Если Тариф = 0 ИЛИ (Количество = 0 И (НЕ ФиксТариф)) Тогда
		Возврат -1;
	КонецЕсли;
	
	Если (НЕ ЭтоСтандарт) И ПроцТариф И СсылкаТариф.Скидка Тогда
		Возврат -1;
	КонецЕсли;
	
	СуммаВключаетНДС = СсылкаПрейскурант.СуммаВключаетНДС;
	
	НоваяСтрока = тблСтоимость.Добавить();
	
	Если НЕ ПроцТариф Тогда
		НоваяСтрока.СтепеньСовпаденияФильтров = СтепеньСовпаденияФильтров;
		НоваяСтрока.НомерСтрокиВыработки = ТекСтрока.НомерСтроки;
		НоваяСтрока.Прейскурант = СсылкаПрейскурант;
	КонецЕсли;
	
	НоваяСтрока.Тариф = СсылкаТариф;
	НоваяСтрока.ПутЛист = ТекСтрока.ПутЛист;
	НоваяСтрока.НоменклатураУслуги = СсылкаТариф.НоменклатураУслуги;
	НоваяСтрока.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НоваяСтрока.НоменклатураУслуги, "НаименованиеПолное");
	Если НЕ ЭтоСтандарт Тогда
		НоваяСтрока.ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
		НоваяСтрока.ВидПеревозки = ТекСтрока.ВидПеревозки;
		НоваяСтрока.НаправлениеПеревозки = ТекСтрока.НаправлениеПеревозки;
	КонецЕсли;
	НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрока.НоменклатураУслуги);
	
	КурсКратностьВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
	КурсКратностьВалютыПрейскуранта = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СсылкаПрейскурант.Валюта, ДокументОбъект.Дата);
		
	Если ФиксТариф Тогда
		НоваяСтрока.Маршрут = ТекСтрока.Маршрут;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.ПараметрВыработки = СсылкаТариф.ПараметрВыработки;
		
		Если СсылкаТариф.УсловиеПримененияФиксТарифа = 1 Тогда
			НоваяСтрока.НомерСтрокиВыработки = 1;
			НоваяСтрока.Маршрут = ДокументОбъект.Выработка[0].Маршрут;
			НоваяСтрока.Номенклатура = ДокументОбъект.Выработка[0].Номенклатура;
			НоваяСтрока.ПутЛист = ДокументОбъект.Выработка[0].ПутЛист;
			Если НЕ ЭтоСтандарт Тогда
				НоваяСтрока.ОбъектСтроительства = ДокументОбъект.Выработка[0].ОбъектСтроительства;
				НоваяСтрока.ВидПеревозки = ДокументОбъект.Выработка[0].ВидПеревозки;
				НоваяСтрока.НаправлениеПеревозки = ДокументОбъект.Выработка[0].НаправлениеПеревозки;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоЗначение = 1;
		ЦенаЗначение = Тариф;
		СуммаЗначение = Тариф;
		
		// не используем тариф, если минимальная выработка больше выработки по документу
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			Если КоличествоВыраб < СсылкаТариф.МинимальнаяВыработка И СсылкаТариф.УсловиеПримененияФиксТарифа = 0 Тогда
				тблСтоимость.Удалить(НоваяСтрока);
				Возврат -1;
			КонецЕсли;
		Иначе
			Если СсылкаТариф.ТарифнаяСетка Тогда
				СтрокаТарифа = СсылкаТариф.СтрокиТарифнойСетки.Найти(IDстроки, "ID");
				Если СтрокаТарифа = Неопределено Тогда
					МинВыраб = 0;
				Иначе
					МинВыраб = СтрокаТарифа.МинимальнаяВыработка;
				КонецЕсли;
			Иначе
				МинВыраб = СсылкаТариф.МинимальнаяВыработка;
			КонецЕсли;
			Если КоличествоВыраб < МинВыраб И СсылкаТариф.УсловиеПримененияФиксТарифа = 0 Тогда
				тблСтоимость.Удалить(НоваяСтрока);
				Возврат -1;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВырабТариф Тогда
		НоваяСтрока.Маршрут = ТекСтрока.Маршрут;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.ПараметрВыработки = ПараметрВыработки;
		ЦенаЗначение = Тариф;
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			КоличествоЗначение = КоличествоВыраб;
		Иначе
			Если СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
				КоличествоЗначение = 1;
				ЦенаЗначение = КоличествоВыраб * ЦенаЗначение / 100;
			Иначе
				КоличествоЗначение = Макс(0, КоличествоВыраб - СсылкаТариф.КоличествоБесплатныхЕдиниц);
			КонецЕсли;
		КонецЕсли;
		СуммаЗначение = КоличествоЗначение * ЦенаЗначение;
		
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			Если СсылкаТариф.МинимальнаяВыработка > КоличествоЗначение Тогда
				СуммаЗначение = СсылкаТариф.МинимальнаяВыработка * Тариф;
				ЦенаЗначение = СуммаЗначение / КоличествоЗначение;
			КонецЕсли;
		Иначе
			Если СсылкаТариф.ТарифнаяСетка Тогда
				СтрокаТарифа = СсылкаТариф.СтрокиТарифнойСетки.Найти(IDстроки, "ID");
				Если СтрокаТарифа = Неопределено Тогда
					МинСтоим = 0;
					МинВыраб = 0;
					СпособЗаполн = 0;
				Иначе
					МинСтоим = СтрокаТарифа.МинимальнаяСтоимость;
					МинВыраб = СтрокаТарифа.МинимальнаяВыработка;
					СпособЗаполн = СтрокаТарифа.СпособЗаполненияКоличества;
				КонецЕсли;
			Иначе
				МинСтоим = СсылкаТариф.МинимальнаяСтоимость;
				МинВыраб = СсылкаТариф.МинимальнаяВыработка;
				СпособЗаполн = СсылкаТариф.СпособЗаполненияКоличества;
			КонецЕсли;
			
			Если СуммаЗначение < МинСтоим Тогда
				СуммаЗначение = МинСтоим;
				Если СпособЗаполн = 0 Тогда
					ЦенаЗначение = СуммаЗначение / КоличествоЗначение;
				ИначеЕсли СпособЗаполн = 1 Тогда
					КоличествоЗначение = ?(Тариф = 0, 0, СуммаЗначение / Тариф);
				Иначе
					КоличествоЗначение = 1;
					ЦенаЗначение = СуммаЗначение;
				КонецЕсли;
			ИначеЕсли КоличествоЗначение < МинВыраб Тогда
				СуммаЗначение = МинВыраб * Тариф;
				Если СпособЗаполн = 0 Тогда
					ЦенаЗначение = СуммаЗначение / КоличествоЗначение;
				ИначеЕсли СпособЗаполн = 1 Тогда
					КоличествоЗначение = МинВыраб;
				Иначе
					КоличествоЗначение = 1;
					ЦенаЗначение = СуммаЗначение;
				КонецЕсли;
			КонецЕсли;
			Если СуммаЗначение = 0 ИЛИ ЦенаЗначение = 0 ИЛИ КоличествоЗначение = 0 Тогда
				СуммаЗначение = 0;
				ЦенаЗначение = 0;
				КоличествоЗначение = 0;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НоваяСтрока.Маршрут = ТекСтрока.Маршрут;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		КоличествоЗначение = 1;
		ЦенаЗначение = БазовыйТариф * Тариф / 100;
		СуммаЗначение = ЦенаЗначение;
		
	КонецЕсли;
	
	ТекСтавкаНДС = НоваяСтрока.НоменклатураУслуги.СтавкаНДС;
	СуммаНДСЗначение = 0;
	Если ДокументОбъект.УчитыватьНДС И ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
		НоваяСтрока.СтавкаНДС = ТекСтавкаНДС;
		СуммаНДСЗначение = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СуммаЗначение,
			ДокументОбъект.УчитыватьНДС, СсылкаПрейскурант.СуммаВключаетНДС,
			уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		Если НЕ ДокументОбъект.СуммаВключаетНДС И СсылкаПрейскурант.СуммаВключаетНДС Тогда
			СуммаЗначение = СуммаЗначение - СуммаНДСЗначение;
			ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
		ИначеЕсли ДокументОбъект.СуммаВключаетНДС И НЕ СсылкаПрейскурант.СуммаВключаетНДС Тогда
			СуммаЗначение = СуммаЗначение + СуммаНДСЗначение;
			ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
		КонецЕсли;
	КонецЕсли;
	
	// пересчитываем по валюте документа
	Если ФиксТариф ИЛИ ВырабТариф Тогда 
		ЦенаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ЦенаЗначение, 
			СсылкаПрейскурант.Валюта, ДокументОбъект.ВалютаДокумента,
			КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
			КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
		СуммаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаЗначение, 
			СсылкаПрейскурант.Валюта, ДокументОбъект.ВалютаДокумента,
			КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
			КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
		СуммаНДСЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаНДСЗначение, 
			СсылкаПрейскурант.Валюта, ДокументОбъект.ВалютаДокумента,
			КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
			КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
	КонецЕсли;
	
	НоваяСтрока.Количество = КоличествоЗначение;
	НоваяСтрока.Цена = ЦенаЗначение;
	НоваяСтрока.Сумма = СуммаЗначение;
	НоваяСтрока.СуммаНДС = СуммаНДСЗначение;
	
	ИндексСтрокиСтоимости = тблСтоимость.Индекс(НоваяСтрока);
	
	Возврат ИндексСтрокиСтоимости;
КонецФункции

// Функция возвращает количество выработки
// Параметры: Количество - время в секундах
// Если параметр выработки - время, то производится пересчет в ЧЧ.Десятые доли.
//
Функция КоличествоВыработкиДляРасчетаСтоимости(ПараметрВыработки, Количество)
	Если ПараметрВыработки.Временный Тогда
		мКоличество = Количество / 3600;
	Иначе
		мКоличество = Количество;
	КонецЕсли;	
	
	Возврат мКоличество;
КонецФункции

#КонецОбласти

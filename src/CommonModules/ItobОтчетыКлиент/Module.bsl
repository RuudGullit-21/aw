////////////////////////////////////////////////////////////////////////////////
// Клиентские события формы отчета.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//  ФормаОтчета			 - УправляемаяФорма	 - Форма отчета.
//  Элемент				 - ПолеФормы		 - Табличный документ.
//  Расшифровка			 - Произвольный		 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	НаименованиеОтчета = ItobОтчетыКлиентСервер.ПолучитьНаименованиеОтчета(ФормаОтчета);
	Если НаименованиеОтчета = "Отчет.ItobДвиженияИСтоянки" Тогда
	    ДвиженияИСтоянкиОбработкаРасшифровки(ФормаОтчета, 
											 Элемент, 
											 Расшифровка, 
											 СтандартнаяОбработка);	
		
	ИначеЕсли НаименованиеОтчета = "Отчет.ItobОтчетПоТопливу" Тогда
		ОтчетПоТопливуОбработкаРасшифровки(ФормаОтчета, 
									  Элемент, 
									  Расшифровка, 
									  СтандартнаяОбработка);
	
	ИначеЕсли НаименованиеОтчета = "Отчет.ItobОтчетПоДискретнымДатчикам" 
		  	  ИЛИ НаименованиеОтчета = "Отчет.ItobОтчетПоПростоямПриЗаведенномДвигателе"
		  	  ИЛИ НаименованиеОтчета = "Отчет.ItobОтчетПоАналоговымДатчикам"
		  	  ИЛИ НаименованиеОтчета = "Отчет.ItobПосещениеГеографическихЗон" Тогда
		  
		ОбработкаРасшифровкиСлужебный(ФормаОтчета, 
									  Элемент, 
									  Расшифровка, 
									  СтандартнаяОбработка, 
									  "Формирование отображения на карте...", 
									  "РежимМаршрута");	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команд, добавленных динамически и подключенных к обработчику "Подключаемый_Команда".
//
// Параметры:
//  ФормаОтчета	 - УправляемаяФорма	 - Форма отчета.
//  Команда		 - КомандаФормы		 - Команда, которая была вызвана.
//  Результат	 - Булево			 - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ФормаОтчета, Команда, Результат) Экспорт
	
	НаименованиеОтчета = ItobОтчетыКлиентСервер.ПолучитьНаименованиеОтчета(ФормаОтчета);	
	Если НаименованиеОтчета = "Отчет.ItobОтчетПоТопливу" Тогда
		ОтчетПоТопливуОбработчикКоманды(ФормаОтчета, Команда, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатии на одну из кнопок регулирования.
//
// Параметры:
//  ФормаОтчета			 - УправляемаяФорма	 - Форма отчета.
//  Элемент				 - ПолеФормы		 - Поле формы.
//  Направление			 - Число			 - Позволяет определить, какая из кнопок регулирования была нажата.
//  			При нажатии на увеличение (вверх) параметр равен 1, при нажатии на уменьшение (вниз) - равен -1.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения 
//								стандартной (системной) обработки события.
//  			Если в теле процедуры-обработчика установить данному параметру значение Ложь,
//  			стандартная обработка события производиться не будет.
//
Процедура Регулирование(ФормаОтчета, Элемент, Направление, СтандартнаяОбработка) Экспорт
		
	Если ItobОтчетыКлиентСервер.ЭтоОтчетСРегулированиемПериода(ФормаОтчета) Тогда	  
		РегулированиеСлужебный(ФормаОтчета, Элемент, Направление, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Элемент настройки при изменении
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета.
//  Элемент		- ПолеФормы	- Поле формы.
//
Процедура ЭлементНастройкиПриИзменении(ФормаОтчета, Элемент) Экспорт
		
КонецПроцедуры

// Для совместимости с УАТ
//
// Параметры:
//  ФормаОтчета			 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  ИсточникВыбора		 - 	 - 
//  Результат			 - 	 - 
//
Процедура ОбработкаВыбора(ФормаОтчета, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДвиженияИСтоянки

Процедура ДвиженияИСтоянкиОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ФормаОтчета.ОтчетДанныеРасшифровки)
		 И ЭтоАдресВременногоХранилища(ФормаОтчета.ОтчетДанныеРасшифровки) Тогда
		
		ТекстОшибки = "";
		ПараметрыОбновленияМаршрутаНаКарте = ItobОтчетыВызовСервера.ПолучитьПараметрыОбновленияМаршрутаНаКарте(ФормаОтчета.ОтчетДанныеРасшифровки, Расшифровка, ТекстОшибки);	
		Если ПараметрыОбновленияМаршрутаНаКарте <> Неопределено Тогда
			// Обновляем отображение маршрута.
			ОбработкаРасшифровкиСлужебный(ФормаОтчета, Элемент, ПараметрыОбновленияМаршрутаНаКарте, СтандартнаяОбработка, "Формирование отображения маршрута на карте...", "РежимМаршрута");
			
		ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(, ТекстОшибки);	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ОтчетПоТопливу

Процедура ОтчетПоТопливуОбработчикКоманды(ФормаОтчета, Команда, Результат)
	
	ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(ФормаОтчета);
	
	ПараметрОбъект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	ПараметрДатчикТоплива = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "ДатчикТоплива", НСтр("ru = 'Датчик топлива'"));
	
	Если ПараметрДатчикТоплива = "ПоВсем" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан датчик топлива (или указано несколько датчиков топлива)";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрОбъект) И ЗначениеЗаполнено(ПараметрДатчикТоплива) Тогда
		ПараметрНачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'"));
		
		ПараметрыДатчикаТоплива = ItobОтчетыВызовСервера.ПолучитьПараметрыДатчикаТоплива(ПараметрОбъект, ПараметрДатчикТоплива, ПараметрНачПериода);
		КалибровочныйГрафик = ПараметрыДатчикаТоплива.КалибровочныйГрафик;
		Если ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", КалибровочныйГрафик);
			ОткрытьФорму("Справочник.ItobКалибровочныеГрафики.Форма.ФормаЭлемента", ПараметрыОткрытия, ФормаОтчета,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтчетПоТопливуОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	
	ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(ФормаОтчета);
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Объект", ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'")));
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Дата начала'"));
	НачПериода = ?(ТипЗнч(НачПериода) = тип("СтандартнаяДатаНачала"), НачПериода.Дата, НачПериода);
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Дата окончания'"));
	КонПериода = ?(ТипЗнч(КонПериода) = тип("СтандартнаяДатаНачала"), КонПериода.Дата, КонПериода);
	
	СтруктураРасшифровки.Вставить("НачПериода", НачПериода);
	СтруктураРасшифровки.Вставить("КонПериода", КонПериода);
		
КонецПроцедуры

#КонецОбласти
  
Процедура ОбработкаРасшифровкиСлужебный(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка, ТекстОповещения, ИмяСобытия)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда	
		СтандартнаяОбработка = Ложь;
		
		Действие = Неопределено;
		Если Расшифровка.Свойство("Действие", Действие) Тогда
			Если Действие = "ОткрытьНастройкиКарты" Тогда
				ItobCsmSvcКлиент.ОткрытьНастройкиКарты();
				
				Возврат;
			КонецЕсли;			
		КонецЕсли;		
	
		ПоказатьОповещениеПользователя(ТекстОповещения);
		Оповестить(ИмяСобытия, Расшифровка);			
	КонецЕсли;
	
КонецПроцедуры

#Область Регулирование

Процедура РегулированиеСлужебный(ФормаОтчета, Элемент, Направление, СтандартнаяОбработка)
		
	Настройка = ItobОтчетыКлиентСервер.ЭлементНастройкиПоЭлементуФормы(Элемент, ФормаОтчета);	
	Если Настройка = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ItobОбщегоНазначенияКлиент.ИзменениеПериодаРегулирование(Настройка.Значение.Дата, Направление, СтандартнаяОбработка);
	
	Настройка.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти
 
#КонецОбласти 


#Область СлужебныйПрограммныйИнтерфейс

// Функция предназначена для получения настроек работы мониторинга. Если настройка не установлена - ей 
// будет присвоено значение по-умолчанию (см. метод "НастройкиМониторингаПоУмолчанию()")
//
// Параметры:
//  ВнешняяСистема - СправочникСсылка.уатВнешниеСистемы.
//
// Возвращаемое значение:
//   Структура - ключ структуры - имя настройки, значение - соответствующее настройке значение
//
Функция ПолучитьНастройкиМониторинга(ВнешняяСистема) Экспорт
	
	стрРезультат = НастройкиМониторингаПоУмолчанию(ВнешняяСистема);

	Если ВнешняяСистема = Справочники.уатВнешниеСистемы.Omnicomm Тогда
		ХранилищеНастройки = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Получить();
	ИначеЕсли ВнешняяСистема = Справочники.уатВнешниеСистемы.Wialon Тогда
		ХранилищеНастройки = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Получить();
	ИначеЕсли ВнешняяСистема = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
		ХранилищеНастройки = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхАвтоГРАФ.Получить();
	ИначеЕсли ВнешняяСистема = Справочники.уатВнешниеСистемы.СКАУТ Тогда
		ХранилищеНастройки = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхСКАУТ.Получить();
	КонецЕсли;

	Если ХранилищеНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	стрНастройки = ХранилищеНастройки.Получить();
	Если стрНастройки = Неопределено Тогда 
		Возврат стрРезультат;
	КонецЕсли;
	
	Для Каждого ТекНастройка Из стрРезультат Цикл 
		Если стрНастройки.Свойство(ТекНастройка.Ключ) Тогда
			стрРезультат.Вставить(ТекНастройка.Ключ, стрНастройки[ТекНастройка.Ключ]);
		Иначе
			стрРезультат.Вставить(ТекНастройка.Ключ,
				НастройкиМониторингаПоУмолчанию(ВнешняяСистема, ТекНастройка.Ключ));
		КонецЕсли;
	КонецЦикла;

	Возврат стрРезультат;
	
КонецФункции

// Возвращает структуру параметров для работы с системой мониторинга.
//
// Параметры:
//  УчетнаяЗаписьСистемыМониторинга - СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//
Функция ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗаписьСистемыМониторинга) Экспорт
	
	СтруктураЗначенийРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьСистемыМониторинга,
		"Ссылка,СистемаМониторинга,АдресСервиса,ВидСистемы,Драйвер,ИмяDSN,
		|ИмяPIPE,ИмяБД,Логин,Пароль,Ресурс,Сервер,СпособПодключения,
		|СпособРаботы,ТокенАвторизации,Версия,СпособРеализацииВебСервиса,
		|ИдентификаторКлиента,ИдентификаторПользователя,КлючАвторизации,
		|ЛогированиеЗапросов,СоздаватьЗаправкиГСМ,СоздаватьСливыГСМ,
		|ПрофильОбмена,ВидСлива,ВидЗаправки,АЗС,АЗССлив,Организация,Ответственный,ИнтервалЗапросов,ИнтервалЗапросов");

	АдресСервиса = СтруктураЗначенийРеквизитов.АдресСервиса;
	
	// Адрес не должен оканчиваться символом "/".
	Если Прав(АдресСервиса, 1) = "/" Тогда
		АдресСервиса = Лев(АдресСервиса, СтрДлина(АдресСервиса)-1);
	КонецЕсли;

	// Адрес должен начинаться на "http" или "https"
	Если Не НРег(Лев(АдресСервиса, 7)) = "http://" Тогда 
		Если НЕ НРег(Лев(АдресСервиса, 8)) = "https://"
			И НЕ ЗначениеЗаполнено(СтруктураЗначенийРеквизитов.СистемаМониторинга.НаименованиеПС) Тогда 
			АдресСервиса = "http://" + АдресСервиса;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗначенийРеквизитов.АдресСервиса = АдресСервиса;
	СтруктураЗначенийРеквизитов.Пароль = 
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СтруктураЗначенийРеквизитов.Ссылка);

	Возврат СтруктураЗначенийРеквизитов;
	
КонецФункции

// Функция выполняет очистку регистра в указанном периоде
//
// Параметры:
//  ИмяРегистра  - Строка - имя регистра сведений;
//  ТС           - ТС для которого вносятся корректировки;
//  ДатаС        - Дата - Дата начиная с которой вносятся корректировки;
//  ДатаПо       - Дата - Дата по которую вносятся корректировки; 
//  ТекстОшибки  - Строка -Сообщение об ошибке;
//
// Возвращаемое значение
//  Булево - признак ошибки
//
Функция ОчиститьДанныеРегистраСведенийВИнтервале(ИмяРегистра, ТС, ДатаС, ДатаПо, ТекстОшибки = "") Экспорт
	
	мсвТС = Новый Массив();
	Если ТипЗнч(ТС) = Тип("Массив") Тогда
		Для Каждого ТекТС Из ТС Цикл
			мсвТС.Добавить(ТекТС.Ссылка);
		КонецЦикла;
	Иначе
		мсвТС.Добавить(ТС);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвТС",  мсвТС);
	Запрос.УстановитьПараметр("ДатаС",  ДатаС);
	Запрос.УстановитьПараметр("ДатаПо", ?(ЗначениеЗаполнено(ДатаПо), ДатаПо, '39991231235959'));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРегистрДанныхМониторинга.Период КАК Период,
	|	уатРегистрДанныхМониторинга.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатРегистрДанныхМониторинга КАК уатРегистрДанныхМониторинга
	|ГДЕ
	|	уатРегистрДанныхМониторинга.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И уатРегистрДанныхМониторинга.ТС В(&мсвТС)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "уатРегистрДанныхМониторинга", ИмяРегистра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			СообщениеОбОшибке =
				СтрШаблон(НСтр("en = 'Error while clearing additional data register ""%1""'; ru = 'Ошибка при очистке регистра ""%1"".'"), ИмяРегистра)
				+ Символы.ПС + НСтр("en='Error description:';ru='Описание ошибки:'") + " " + ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет загрузку данных из системы мониторинга из обработок мониторинга
//
// Параметры:
//
//     ПараметрыПроцедуры - Структура - Содержит поля:
//      *  ВнешняяСистема  - СправочникСсылка.уатВнешниеСистемы
//      *  ДатаНачала                      - Дата
//      *  ДатаОкончания                   - Дата
//      *  МассивТС                        - Массив
//      *  ЗагрузитьПробегИРасходГСМ       - Булево
//      *  ЗагрузитьДополнительныеСведения - Булево
//      *  ЗагрузитьКоординаты             - Булево.
//     АдресХранилища - Строка
//                    - УникальныйИдентификатор - адрес временного хранилища для результата.
//
// Результат представляет собой структуру с полями:
//     ЕстьОшибки, КодВозврата.
//
Процедура ЗагрузитьДанныеИзСистемыМониторингаДлительнаяОперация(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт
	
	СообщениеПользователю = НСтр("en='Omnicomm satellite monitoring system data downloading is in progress';ru='Выполняется загрузка данных спутниковой системы мониторинга'");
	
	СтруктураПараметров = ПолучитьНастройкиМониторинга(ПараметрыПроцедуры.ВнешняяСистема);
	
	ДатаНачала                                  = ПараметрыПроцедуры.ДатаНачала;
	ДатаОкончания                               = ПараметрыПроцедуры.ДатаОкончания;
	
	СтруктураПараметров.МассивТС                = ПараметрыПроцедуры.МассивТС;
	СтруктураПараметров.ЗагрузитьПробегРасход   = ПараметрыПроцедуры.ЗагрузитьПробегРасход;
	СтруктураПараметров.ЗагрузитьДопСведения    = ПараметрыПроцедуры.ЗагрузитьДопСведения;
	СтруктураПараметров.ЗагрузитьКоординаты     = ПараметрыПроцедуры.ЗагрузитьКоординаты;

	ЕстьОшибки = Ложь;
	Если ЗагрузитьДанныеМониторингаПоУчетнымЗаписям(ДатаНачала, ДатаОкончания, СтруктураПараметров, ЕстьОшибки) Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("ЕстьОшибки, КодВозврата", ЕстьОшибки, 0), АдресХранилища);
	Иначе
		ПоместитьВоВременноеХранилище(Новый Структура("ЕстьОшибки, КодВозврата", Истина, 1), АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет получение списка ТС из мониторинга
//
// Параметры:
//  УчетнаяЗапись   - СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга
//  СтрокаКолонокСписка - Строка.
//
// Возвращаемое значение
//  Массив - Список ТС
//
Функция ПолучитьДанныеВсехТС(УчетнаяЗапись, СтрокаКолонокСписка, ТекстОшибки) Экспорт
	
	СписокТС    = Новый Массив();
	ТекстОшибки = "";
	СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗапись);
	
	ТаблицаТС = ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	
	Если ТаблицаТС = Неопределено Тогда
		Возврат СписокТС;
	КонецЕсли;
	
	Для Каждого ТекТС Из ТаблицаТС Цикл
		НоваяСтрока = Новый Структура(СтрокаКолонокСписка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТС);
		СписокТС.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат СписокТС;
	
КонецФункции

// Функция выполняет получение таблицы ТС из систем мониторинга.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки - Наименование, ИДвСистеме, ГаражныйНомер, ГосударственныйНомер, VIN и ИДвСистемеНавигации
//
Функция ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт
	
	ТаблицаТС = Новый ТаблицаЗначений();
	ТаблицаТС.Колонки.Добавить("Наименование", 			 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("ИДвСистеме",			 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("ГаражныйНомер",			 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("ГосударственныйНомер",	 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("VIN",					 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("ИДвСистемеНавигации",	 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("uuid",					 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("НаличиеДУТТаблица",		 Новый ОписаниеТипов("Строка"));
	ТаблицаТС.Колонки.Добавить("ГрФайл");
	
	ВнешняяСистема = СтруктураПараметровУчетнойЗаписи.СистемаМониторинга;
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm") Тогда
		Omnicomm_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon") Тогда
		Wialon_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ") Тогда
		АвтоГРАФ_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ") Тогда
		СКАУТ_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Иначе
		ИдентификаторДействия = "ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиМониторингом.ЗапонитьСписокGPSСервер";
		уатРаботаСРасширениями.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия,
		?(ТипЗнч(ВнешняяСистема) = Тип("Строка"), ВнешняяСистема, ВнешняяСистема.НаименованиеПС), СтруктураПараметровУчетнойЗаписи, ТекстОшибки, ТаблицаТС);
	КонецЕсли;
	
	Возврат ТаблицаТС;
	
КонецФункции

// Получает сводные данные мониторинга в интервале
// 
// Параметры
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  МассивТС - Массив - объекты мониторинга;
//  ДопПараметры - Структура.
//
// Возвращаемое значение:
//  Соответствие - Колонки - ТС, Пробег, ВремяРаботыДвигателя, 
//								НачальноеЗначениеОдометра, КонечноеЗначениеОдометра, РасходТоплива, 
//								НачальныйУровеньТоплива и КонечныйУровеньТоплива
//
Функция ПолучитьСводныеДанныеМониторинга(ДатаНачала, ДатаОкончания, МассивТС, ДопПараметры = Неопределено) Экспорт
	
	СводныеДанные = Новый Соответствие;
	ЕстьОшибки    = Ложь;
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ТС");
	ТаблицаДанных.Колонки.Добавить("Пробег",                    Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ВремяРаботыДвигателя",      Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("НачальноеЗначениеОдометра", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КонечноеЗначениеОдометра",  Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("РасходТоплива",             Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("НачальныйУровеньТоплива",   Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("КонечныйУровеньТоплива",    Новый ОписаниеТипов("Число"));

	МассивДанных = РазбитьМассивТСНаРазличныеУчетныеЗаписи(МассивТС, Истина);
	Для Каждого ТекСтрока Из МассивДанных Цикл
		УчетнаяЗапись  = ТекСтрока.УчетнаяЗаписьСистемыМониторинга;
		
		Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатВнешниеСистемы") Тогда
			Если УчетнаяЗапись = Справочники.уатВнешниеСистемы._1СЦСМ 
				И уатОбщегоНазначения_проф.ИспользованиеЦСМ() Тогда
				
				ТекстОшибки = "";
				Для Каждого ТекСтрокаТС Из ТекСтрока.МассивТС Цикл
					ДанныеПоТсЦСМ = ItobИнтерфейсДанныхМониторинга.СводныеДанныеОДвиженииИРасходеТопливаОбъектаМониторинга(ТекСтрокаТС.Ссылка, 
					ДатаНачала,
					ДатаОкончания,
					ТекстОшибки);
					
					Если ДанныеПоТсЦСМ = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаДанных.Добавить();
					НоваяСтрока.ТС                        = ТекСтрокаТС.Ссылка;
					НоваяСтрока.РасходТоплива             = ДанныеПоТсЦСМ.РасходТоплива;
					НоваяСтрока.НачальныйУровеньТоплива   = ДанныеПоТсЦСМ.УровеньТопливаНачало;
					НоваяСтрока.КонечныйУровеньТоплива    = ДанныеПоТсЦСМ.УровеньТопливаКонец;
					НоваяСтрока.Пробег                    = ДанныеПоТсЦСМ.ПробегGPS;
					НоваяСтрока.ВремяРаботыДвигателя      = ДанныеПоТсЦСМ.ВремяРаботыДвигателя;
					НоваяСтрока.НачальноеЗначениеОдометра = ДанныеПоТсЦСМ.СпидометрВыездаCAN;
					НоваяСтрока.КонечноеЗначениеОдометра  = ДанныеПоТсЦСМ.СпидометрВозвращенияCAN;
					
				КонецЦИкла;
				
			КонецЕсли;
		Иначе
			СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗапись);
			
			СтруктураРезультат  = ПреобразоватьМассивТСДляЗагрузкиДанных(СтруктураПараметровУчетнойЗаписи, ТекСтрока.МассивТС, ЕстьОшибки);
			СистемаМониторинга  = СтруктураПараметровУчетнойЗаписи.СистемаМониторинга;
			
			ПараметрыПроцедуры = ПолучитьНастройкиМониторинга(СистемаМониторинга);
			ПараметрыПроцедуры.МассивТС = СтруктураРезультат.МассивТС;
			ПараметрыПроцедуры.Вставить("СоответсвиеТС", СтруктураРезультат.СоответсвиеТС);
			
			Если СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm 
				И Константы.уатИспользоватьOmnicomm.Получить() Тогда
				
				Omnicomm_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
				
			ИначеЕсли СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon 
				И Константы.уатИспользоватьWialon.Получить() Тогда
				
				Wialon_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
				
			ИначеЕсли СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ
				И Константы.уатИспользоватьАвтоГРАФ.Получить() Тогда
				
				АвтоГРАФ_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
				
			ИначеЕсли СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ 
				И Константы.уатИспользоватьСКАУТ.Получить() Тогда
				
				СКАУТ_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
				
			Иначе
				уатРаботаСРасширениями.ПСМ_ПолучитьСводныеДанныеМониторинга(
					ТаблицаДанных,
					ДатаНачала, 
					ДатаОкончания, 
					ПараметрыПроцедуры, 
					СтруктураПараметровУчетнойЗаписи,
					ЕстьОшибки);

				// ПСМ. Рассчитаем позже. Для совместимости со старыми расширениями
				Для Каждого ТекСтрокаТС Из ПараметрыПроцедуры.МассивТС Цикл
					МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ТС", ТекСтрокаТС.Ссылка));
					Если МассивСтрок.Количество() = 0 Тогда
						СводныеДанные.Вставить(ТекСтрокаТС.Ссылка, Неопределено);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекТС Из МассивТС Цикл
		
		МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ТС", ТекТС));
		Пробег                     = 0;
		ВремяРаботыДвигателя       = 0;
		РасходТоплива              = 0;
		НачальноеЗначениеОдометра  = 0;
		КонечноеЗначениеОдометра   = 0;
		НачальныйУровеньТоплива    = 0;
		КонечныйУровеньТоплива     = 0;
		Если МассивСтрок.Количество() > 0 Тогда

			НачальноеЗначениеОдометра = МассивСтрок[0].НачальноеЗначениеОдометра;
			КонечноеЗначениеОдометра  = МассивСтрок[МассивСтрок.Количество() - 1].КонечноеЗначениеОдометра;
			НачальныйУровеньТоплива   = МассивСтрок[0].НачальныйУровеньТоплива;
			КонечныйУровеньТоплива    = МассивСтрок[МассивСтрок.Количество() - 1].КонечныйУровеньТоплива;
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				Пробег               = Пробег + ТекСтрока.Пробег;
				ВремяРаботыДвигателя = ВремяРаботыДвигателя + ТекСтрока.ВремяРаботыДвигателя;
				РасходТоплива        = РасходТоплива + ТекСтрока.РасходТоплива;
			КонецЦикла;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("Пробег",                     Пробег);
		СтруктураДанных.Вставить("ВремяРаботыДвигателя",       ВремяРаботыДвигателя);
		СтруктураДанных.Вставить("РасходТоплива",              РасходТоплива);
		СтруктураДанных.Вставить("НачальноеЗначениеОдометра",  НачальноеЗначениеОдометра); 
		СтруктураДанных.Вставить("КонечноеЗначениеОдометра",   КонечноеЗначениеОдометра);
		СтруктураДанных.Вставить("НачальныйУровеньТоплива",    НачальныйУровеньТоплива);
		СтруктураДанных.Вставить("КонечныйУровеньТоплива",     КонечныйУровеньТоплива);
	
		СводныеДанные.Вставить(ТекТС, СтруктураДанных);
		
	КонецЦикла;
	
	Возврат СводныеДанные;
	
КонецФункции

// Перезаполняет спидометр выезда и возврата и остаток топлива выезда и возврата
// по данным GPS.
// 
// Параметры:
//   ПутевойЛист - структура - входные данные для получения сведений из систем GPS.
//   Результат   - структура - сведения из систем GPS
//
Процедура РассчитатьСпидометрПоМониторингу(СтруктураПараметров, СтруктураРезультат) Экспорт
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("Прицепы", Новый Массив());
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаВыезда)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаВозвращения) Тогда 
		Возврат;
	КонецЕсли;
	
	флВыезд                    = СтруктураПараметров.Свойство("флВыезд")
		И СтруктураПараметров.флВыезд;
	флТолькоОдометрВозвращения = СтруктураПараметров.Свойство("флТолькоОдометрВозвращения")
		И СтруктураПараметров.флТолькоОдометрВозвращения;
	
	мсвОбъектыКЗапросу = Новый Массив;
	мсвОбъектыКЗапросу.Добавить(СтруктураПараметров.ТранспортноеСредство);
	
	Для Каждого ТекПрицеп ИЗ СтруктураПараметров.Прицепы Цикл 
		мсвОбъектыКЗапросу.Добавить(ТекПрицеп.ТС);
	КонецЦикла;
	
	// Первичный расчет
	Если НЕ СтруктураРезультат.Свойство("СводныеДанные") Тогда
		СводныеДанные = ПолучитьСводныеДанныеМониторинга(СтруктураПараметров.ДатаВыезда,
			СтруктураПараметров.ДатаВозвращения, мсвОбъектыКЗапросу);
			
		СтруктураРезультат.Вставить("СводныеДанные", СводныеДанные);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СводныеДанные Цикл
		ТС              = ТекСтрока.Ключ;
		СтруктураДанных = ТекСтрока.Значение;
		
		Сч = 0;
		Для Каждого ТекТС Из мсвОбъектыКЗапросу Цикл
			Если ТС = ТекТС Тогда
				Прервать;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
		// ПСМ. Для совместимости со старыми расширениями
		Если СтруктураДанных = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ТС.ИспользуемаяСистемаGPS) Тогда
				Продолжить;
			КонецЕсли;
				
			ТаблицаТС = Новый ТаблицаЗначений;
			ТаблицаТС.Колонки.Добавить("Ссылка");
			ТаблицаТС.Колонки.Добавить("ТС");
			ТаблицаТС.Колонки.Добавить("ИдВСистемеНавигации");
			
			НоваяСтрока                     = ТаблицаТС.Добавить();
			НоваяСтрока.ТС                  = ТС;
			НоваяСтрока.ИдВСистемеНавигации = ТС.ИДвСистемеНавигации;
			НоваяСтрока.Ссылка              = ТС.Ссылка;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Сч",           Сч);
			ДопПараметры.Вставить("флВыезд",      флВыезд);
			ДопПараметры.Вставить("ПутевойЛист",  СтруктураПараметров);
			ДопПараметры.Вставить("ИспользуемаяСистемаGPS",
			?(ТипЗнч(ТС.ИспользуемаяСистемаGPS) = Тип("Строка"),
			ТС.ИспользуемаяСистемаGPS,
			ТС.ИспользуемаяСистемаGPS.НаименованиеПС));
			
			ТекстОшибки = "";
			
			уатРаботаСРасширениями.ПСМ_РассчитатьСпидометрПоGPS(
			СтруктураРезультат,
			СтруктураПараметров.ДатаВыезда, 
			СтруктураПараметров.ДатаВозвращения, 
			ТаблицаТС, 
			ТекстОшибки,
			ДопПараметры);

		Иначе
			Если Сч = 0 Тогда 
				СтруктураРезультат.Вставить("НачальныйПробегПоGPS",
				?(ТС.Модель.НаличиеСпидометра И СтруктураДанных.НачальноеЗначениеОдометра <> 0,
					СтруктураДанных.НачальноеЗначениеОдометра, СтруктураПараметров.СпидометрВыезда));
				Если НЕ флВыезд Тогда
					СтруктураРезультат.Вставить("ПробегПоGPS",        СтруктураДанных.Пробег);
					СтруктураРезультат.Вставить("МоточасыПоGPS",      СтруктураДанных.ВремяРаботыДвигателя);
					СтруктураРезультат.Вставить("СчетчикПоGPS",       ?(ТС.Модель.НаличиеСпидометра, СтруктураРезультат.ПробегПоGPS, СтруктураРезультат.МоточасыПоGPS));
					СтруктураРезультат.Вставить("СчетчикВозвращения", СтруктураРезультат.НачальныйПробегПоGPS + СтруктураРезультат.СчетчикПоGPS);
				КонецЕсли;
			Иначе 
				стрПрицепРезультат = Новый Структура;
				стрПрицепРезультат.Вставить("ТС", ТС);
				стрПрицепРезультат.Вставить("НачальныйПробегПоGPS",
				?(ТС.Модель.НаличиеСпидометра И СтруктураДанных.НачальноеЗначениеОдометра <> 0,
					СтруктураДанных.НачальноеЗначениеОдометра,
					СтруктураПараметров.Прицепы[Сч-1].СпидометрВыезда));
				Если НЕ флВыезд Тогда
					стрПрицепРезультат.Вставить("ПробегПоGPS",        СтруктураДанных.Пробег);
					стрПрицепРезультат.Вставить("МоточасыПоGPS",      СтруктураДанных.ВремяРаботыДвигателя);
					стрПрицепРезультат.Вставить("СчетчикПоGPS",       ?(мсвОбъектыКЗапросу[Сч].Модель.НаличиеСпидометра, стрПрицепРезультат.ПробегПоGPS, стрПрицепРезультат.МоточасыПоGPS));
					стрПрицепРезультат.Вставить("СчетчикВозвращения", стрПрицепРезультат.НачальныйПробегПоGPS + стрПрицепРезультат.СчетчикПоGPS);
				КонецЕсли;
				СтруктураРезультат.Прицепы.Добавить(стрПрицепРезультат);
			КонецЕсли;
					
		КонецЕсли;	
	КонецЦикла;
	
	Попытка
		уатЗагрузкаТекущегоМестоположенияТС    = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаТекущегоМестоположенияТС);
		ИдентификаторРегламентногоЗадания      = уатЗагрузкаТекущегоМестоположенияТС.УникальныйИдентификатор;
		РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура РассчитатьГСМПоМониторингу(Объект, ПараметрыРасчетаГСМ, РезультатСтруктура, флВыезд = Ложь) Экспорт
	
	Если РезультатСтруктура = Неопределено Тогда
		РезультатСтруктура = Новый Структура();
	КонецЕсли;
	
	флЭтоТПЛ = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если флЭтоТПЛ Тогда
		ТранспортноеСредство = Объект.ТС;
	Иначе
		ТранспортноеСредство = Объект.ТранспортноеСредство;
	КонецЕсли;
		
	ОтказЗаполнениеРасходаПоGPS = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВыезда) Тогда 
		ТекстНСТР = НСтр("en='Specify date of departure';ru='Необходимо указать дату выезда'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.ДатаВыезда",, ОтказЗаполнениеРасходаПоGPS);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда 
		ТекстНСТР = НСтр("en='It is necessary to specify the return date';ru='Необходимо указать дату возвращения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.ДатаВозвращения",, ОтказЗаполнениеРасходаПоGPS);
	КонецЕсли;
	
	Если ОтказЗаполнениеРасходаПоGPS Тогда 
		Возврат;
	КонецЕсли;
	
	// Первичный расчет
	Если НЕ РезультатСтруктура.Свойство("СводныеДанные") Тогда
		мсвОбъектыКЗапросу = Новый Массив();
		мсвОбъектыКЗапросу.Добавить(ТранспортноеСредство);
		
		Если НЕ флЭтоТПЛ Тогда
			Для Каждого ТекПрицеп ИЗ Объект.Прицепы Цикл 
				мсвОбъектыКЗапросу.Добавить(ТекПрицеп.ТС);
			КонецЦикла;
		КонецЕсли;
		
		СводныеДанные = ПолучитьСводныеДанныеМониторинга(Объект.ДатаВыезда,
			Объект.ДатаВозвращения, мсвОбъектыКЗапросу);
			
		РезультатСтруктура.Вставить("СводныеДанные", СводныеДанные);
	Иначе
		СводныеДанные = РезультатСтруктура.СводныеДанные;
	КонецЕсли;

	Для Каждого СтрокаРасхода Из Объект.РасходГСМ Цикл 
		ТекОсновноеТопливо = СтрокаРасхода.ТС.Модель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС)
			И ЗначениеЗаполнено(ТекОсновноеТопливо)
			И СтрокаРасхода.ГСМ = ТекОсновноеТопливо Тогда
			Отказ = Ложь;
			СтруктураДанных = СводныеДанные.Получить(СтрокаРасхода.ТС);
			
			// ПСМ. Для совместимости со старыми расширениями
			Если СтруктураДанных = Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаРасхода.ТС.ИспользуемаяСистемаGPS) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстОшибки = "";
				
				ТС = Новый ТаблицаЗначений();
				ТС.Колонки.Добавить("ТС");
				ТС.Колонки.Добавить("ИдВСистемеНавигации");
				ТС.Колонки.Добавить("Ссылка");
				
				НоваяСтрока = ТС.Добавить();
				НоваяСтрока.ТС                  = СтрокаРасхода.ТС;
				НоваяСтрока.ИдВСистемеНавигации = СтрокаРасхода.ТС.ИДвСистемеНавигации;
				НоваяСтрока.Ссылка              = СтрокаРасхода.ТС.Ссылка;
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ЭтотОбъект", Новый Структура("Объект, ОстатокТопливаВыезд, ОстатокТопливаВозврат", Объект, 0, 0));
				ДопПараметры.Вставить("ПараметрыРасчетаГСМ", ПараметрыРасчетаГСМ);
				ДопПараметры.Вставить("Отказ", Отказ);
				ДопПараметры.Вставить("флВыезд", флВыезд);
				ДопПараметры.Вставить("ИспользуемаяСистемаGPS",
				?(ТипЗнч(СтрокаРасхода.ТС.ИспользуемаяСистемаGPS) = Тип("Строка"),
				СтрокаРасхода.ТС.ИспользуемаяСистемаGPS,
				СтрокаРасхода.ТС.ИспользуемаяСистемаGPS.НаименованиеПС));
				
				уатРаботаСРасширениями.ПСМ_ЗаполнитьГСМПоGPS(
				СтрокаРасхода,
				Объект.ДатаВыезда, 
				Объект.ДатаВозвращения, 
				ТС, 
				ТекстОшибки,
				ДопПараметры
				);
				
				Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда	
					ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд",   ДопПараметры.ЭтотОбъект.ОстатокТопливаВыезд);
					ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", ДопПараметры.ЭтотОбъект.ОстатокТопливаВозврат);
				КонецЕсли;
				
			Иначе
				
				Если флВыезд Тогда
					СтрокаРасхода.ОстатокПриВыезде = СтруктураДанных.НачальныйУровеньТоплива;
					
					Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
						ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд", СтрокаРасхода.ОстатокПриВыезде)
					КонецЕсли
				Иначе
					СтрокаРасхода.Активен       = Истина;
					СтрокаРасхода.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Отказ);
					СтрокаРасхода.РасходПоGPS   = СтруктураДанных.РасходТоплива;
					
					Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPSОстаток Тогда
						СтрокаРасхода.ОстатокПриВозвращении = СтруктураДанных.КонечныйУровеньТоплива;
						
						СтрокаРасхода.РасходПоФакту = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.ОстатокПриВозвращении + СтрокаРасхода.Выдано;
						
						Если НЕ флЭтоТПЛ Тогда
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоФакту - СтрокаРасхода.Сдано;
						КонецЕсли;
					Иначе
						Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
						ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
						КонецЕсли;
						
						СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано;
						
						Если НЕ флЭтоТПЛ Тогда
							СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВозвращении - СтрокаРасхода.Сдано;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ТипЗнч(Объект) = Тип("ДокументОбъект.уатТехнологическийПутевойЛист")
						И НЕ ТипЗнч(Объект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
						СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту; 
					КонецЕсли;
					
					Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
						ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", СтрокаРасхода.ОстатокПриВозвращении)
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Процедура выполняет регламентное задание ЗагрузкаДанныхOmnicomm.
//
Процедура ЗагрузкаДанныхOmnicomm() Экспорт
	
	// Так как регламетное задание всегда включено
	Если НЕ Константы.уатИспользоватьOmnicomm.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.Omnicomm;
	ЗагрузкаДанныхМониторинга(ВнешняяСистема);
	
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаДанныхСКАУТ.
//
Процедура ЗагрузкаДанныхСКАУТ() Экспорт 
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.СКАУТ;
	ЗагрузкаДанныхМониторинга(ВнешняяСистема);
	
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаДанныхWialon.
//
Процедура ЗагрузкаДанныхWialon() Экспорт 
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.Wialon;
	ЗагрузкаДанныхМониторинга(ВнешняяСистема);
	
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаДанныхАвтоГРАФ.
//
Процедура ЗагрузкаДанныхАвтоГРАФ() Экспорт 
	
	ВнешняяСистема = Справочники.уатВнешниеСистемы.АвтоГРАФ;
	ЗагрузкаДанныхМониторинга(ВнешняяСистема);
	
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаТекущегоМестоположенияТС.
//
Процедура ЗагрузкаТекущегоМестоположенияТС() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru = 'Загрузка текущего местоположения ТС'; en = 'Data download omnicomm'");
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	ВсеОК = Истина;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ПометкаУдаления
	|	И (уатТС.ИДвСистемеНавигации <> """"
	|			ИЛИ уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы._1СЦСМ))";
	Запрос.Текст = уатОбщегоНазначения.МодифицироватьЗапросКСправочникаТСВСоответсвииСПоставкой(Запрос.Текст);
	МассивТС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	// ЦСМ
	ЦСМ_ЗагрузкаТекущегоМестоположенияТС(МассивТС);
	
	ДатаНачала    = НачалоДня(ТекущаяДатаСеанса());
	ДатаОкончания = КонецДня(ДатаНачала);
	
	ЗагрузкаВыполнена = ЗагрузитьТекущиеДанныеМониторингаПоУчетнымЗаписям(ДатаНачала, ДатаОкончания, МассивТС);

	// Уведомления
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.Текст = "ВЫБРАТЬ
		               |	уатТекущееМестоположениеТСПоМониторингу.ТС КАК ТС
		               |ИЗ
		               |	РегистрСведений.уатТекущееМестоположениеТСПоМониторингу КАК уатТекущееМестоположениеТСПоМониторингу
		               |ГДЕ
		               |	уатТекущееМестоположениеТСПоМониторингу.УведомлениеОтправлено = ЛОЖЬ
		               |	И РАЗНОСТЬДАТ(уатТекущееМестоположениеТСПоМониторингу.Дата, &ТекущаяДата, ЧАС) > 12
		               |	И уатТекущееМестоположениеТСПоМониторингу.ТС.ФормироватьУведомленияПриОтсутствииДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			уатОбщегоНазначения_уэ.СформироватьУведомление(Выборка.ТС, Перечисления.уатТипыСобытийДляУведомления_уэ.ЗагрузкаИзМониторинга);
			
			НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() <> 0 Тогда
				НаборЗаписей[0].УведомлениеОтправлено = Истина;
				Попытка
					НаборЗаписей.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

#КонецОбласти

#Область Omnicomm

// Процедура выполняет заполнение таблицы ТС из системы Omnicomm.
//
// Параметры
//  ТаблицаТС - Колонки - Наименование, ИДвСистеме и ГаражныйНомер
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
Процедура Omnicomm_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт
	
	СпособРаботы               = СтруктураПараметровУчетнойЗаписи.СпособРаботы;
	СпособРеализацииВебСервиса = СтруктураПараметровУчетнойЗаписи.СпособРеализацииВебСервиса;
	
	Если СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
			Omnicomm_REST_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
		Иначе
			Omnicomm_SOAP_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция загружает пробег и расход ГСМ из системы Omnicomm в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	СпособРаботы               = СтруктураПараметровУчетнойЗаписи.СпособРаботы;
	СпособРеализацииВебСервиса = СтруктураПараметровУчетнойЗаписи.СпособРеализацииВебСервиса;

	Если СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.БД Тогда
		Возврат Omnicomm_БД_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
			Возврат Omnicomm_REST_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		Иначе
			Возврат Omnicomm_SOAP_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("en='Omnicomm operation method must be specified.';ru='Необходимо указать способ работы с системой Omnicomm.'");
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы Omnicomm в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	СпособРаботы               = СтруктураПараметровУчетнойЗаписи.СпособРаботы;
	СпособРеализацииВебСервиса = СтруктураПараметровУчетнойЗаписи.СпособРеализацииВебСервиса;

	Если СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.БД Тогда
		Возврат Omnicomm_БД_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
			Возврат Omnicomm_REST_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		Иначе
			Возврат Omnicomm_SOAP_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("en='Omnicomm operation method must be specified.';ru='Необходимо указать способ работы с системой Omnicomm.'");
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция загружает координаты из системы Omnicomm в регистр сведений "Координаты по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	СпособРаботы               = СтруктураПараметровУчетнойЗаписи.СпособРаботы;
	СпособРеализацииВебСервиса = СтруктураПараметровУчетнойЗаписи.СпособРеализацииВебСервиса;

	Если СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.БД Тогда
		Возврат Истина; // Нельзя загрузить координаты
		
	ИначеЕсли СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
			Возврат Omnicomm_REST_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		Иначе
			Возврат Omnicomm_SOAP_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("en='Omnicomm operation method must be specified.';ru='Необходимо указать способ работы с системой Omnicomm.'");
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы Omnicomm
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура Omnicomm_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	СпособРаботы               = СтруктураПараметровУчетнойЗаписи.СпособРаботы;
	СпособРеализацииВебСервиса = СтруктураПараметровУчетнойЗаписи.СпособРеализацииВебСервиса;

	Если СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.БД Тогда
		Omnicomm_БД_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
			Omnicomm_REST_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		Иначе
			Omnicomm_SOAP_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("en='Omnicomm operation method must be specified.';ru='Необходимо указать способ работы с системой Omnicomm.'");
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Функция загружает текущее местоположение из системы Omnicomm в регистр сведений "Текущее местоположение ТС по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	СпособРаботы               = СтруктураПараметровУчетнойЗаписи.СпособРаботы;
	СпособРеализацииВебСервиса = СтруктураПараметровУчетнойЗаписи.СпособРеализацииВебСервиса;

	Если СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.БД Тогда
		Возврат Истина; // Нельзя загрузить координаты
		
	ИначеЕсли СпособРаботы = Перечисления.уатСпособРаботыСOmnicomm.ВебСервис Тогда
		Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
			Возврат Omnicomm_REST_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		Иначе
			Возврат Omnicomm_SOAP_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("en='Omnicomm operation method must be specified.';ru='Необходимо указать способ работы с системой Omnicomm.'");
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция получает одометр на момент времени из ОО из системы GPS Omnicomm.
//
// ДатаС - дата, с которой необходимо получить данные
// ДатаПо - дата, до которой необходимо получить данные
// ТекстОшибки - строка, текст ошибки
// СтруктураДопПараметров - структура для передачи дополнительных параметров
//
Функция Omnicomm_ПолучитьОдометрТС(ДатаС, ДатаПо = Неопределено, ИДвСистемеНавигации, Подразделение, ТекстОшибки, СтруктураДопПараметров = Неопределено, УчетнаяЗаписьСистемыМониторинга = Неопределено, ТС = Неопределено) Экспорт 
	
	СпособРеализацииВебСервиса = УчетнаяЗаписьСистемыМониторинга.СпособРеализацииВебСервиса;
	Если СпособРеализацииВебСервиса = Перечисления.уатСпособыРеализацииВебСервиса.REST Тогда
		Возврат Omnicomm_REST_ПолучитьОдометрТС(ДатаС, ДатаПо, ИДвСистемеНавигации, Подразделение, ТекстОшибки, СтруктураДопПараметров, УчетнаяЗаписьСистемыМониторинга, ТС);
	Иначе
		Возврат Omnicomm_SOAP_ПолучитьОдометрТС(ДатаС, ДатаПо, ИДвСистемеНавигации, Подразделение, ТекстОшибки, СтруктураДопПараметров, УчетнаяЗаписьСистемыМониторинга, ТС);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Omnicomm_БД

// Функция загружает пробег и расход ГСМ из системы Omnicomm (через БД MySQL) в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_БД_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.Omnicomm.БД";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ТекстОшибки  = "";
	ПараметрыПроцедуры.Вставить("ДатаНачала",    ДатаНачала);
	ПараметрыПроцедуры.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыПроцедуры.Вставить("МассивТС",      ПараметрыПроцедуры.МассивТС);

	СтруктураРезультат = уатИнтеграцияМониторингOmnicomm.Omnicomm_БД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"ЗагрузитьПробегИРасходГСМ", ПараметрыПроцедуры, ТекстОшибки);
	
	Если СтруктураРезультат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборЗаписей = СтруктураРезультат.НаборЗаписей;
	Соединение   = СтруктураРезультат.Соединение;

	
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_БД_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(
		НаборЗаписей, Соединение, ПараметрыПроцедуры);
		
	ЧасовойПоясПоПодразделению	 = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс 				 = ПараметрыПроцедуры.ЧасовойПояс;

	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = СоответсвиеТС.Получить(ТекСтрока.ТС);
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
				ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ЗначОдометр = ТекСтрока.Пробег / 10; // Переводим пробег в км

		Часы   = Цел(ТекСтрока.ВремяРаботыДвигателя / 3600);
		Минуты = ((ТекСтрока.ВремяРаботыДвигателя / 3600) - Цел(ТекСтрока.ВремяРаботыДвигателя / 3600) ) * 60;
		ЗначМоточасы = Часы + Минуты / 60;
		Если ТекСтрока.РасходТоплива <> -1
			И ТекСтрока.РасходТоплива <> 0 Тогда
			ЗначТопливо = Окр(ТекСтрока.РасходТоплива / 10, 2); // Переводим в литры
		Иначе
			ЗначТопливо = 0;
		КонецЕсли;
		
		Если ЗначОдометр = 0 
			И ЗначТопливо = 0 
			И ЗначМоточасы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
		НоваяСтрока.ТС     = ТекСтрока.ТС;
		
		НоваяСтрока.Пробег               = ЗначОдометр;
		НоваяСтрока.ВремяРаботыДвигателя = ЗначМоточасы;
		НоваяСтрока.РасходТоплива        = ЗначТопливо;
		НоваяСтрока.УровеньТоплива       = Окр(ТекСтрока.УровеньТоплива / 10, 2);
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;

	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы Omnicomm (через БД MySQL) в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_БД_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.Omnicomm.БД";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ТекстОшибки  = "";
	ПараметрыПроцедуры.Вставить("ДатаНачала",    ДатаНачала);
	ПараметрыПроцедуры.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураРезультат = уатИнтеграцияМониторингOmnicomm.Omnicomm_БД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"ЗагрузитьДополнительныеСведения", ПараметрыПроцедуры, ТекстОшибки);
	
	Если СтруктураРезультат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборЗаписей = СтруктураРезультат.НаборЗаписей;
	Соединение   = СтруктураРезультат.Соединение;

	
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_БД_ВыполнитьОбработкуРезультатаЗапроса_События(
		НаборЗаписей, Соединение);
		
	ЧасовойПоясПоПодразделению	 = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс 				 = ПараметрыПроцедуры.ЧасовойПояс;

	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = СоответсвиеТС.Получить(ТекСтрока.ТС);
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
				ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		НоваяСтрока            = ТабДляРегистра.Добавить();
		НоваяСтрока.ТС         = ТекСтрока.ТС;
		НоваяСтрока.Период     = ТекСтрока.Период + ТекКорректировкаВремени;
		НоваяСтрока.ТипСобытия = ТекСтрока.ТипСобытия;
		
		Если ТекСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.ЗаправкаГСМ Тогда
			НоваяСтрока.Значение   = ТекСтрока.Значение / 10; // в литрах
		ИначеЕсли ТекСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.СливГСМ Тогда // слив
			НоваяСтрока.Значение   = ТекСтрока.Значение/ 10; // в литрах
		ИначеЕсли ТекСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.МгновенноеПревышениеСкорости Тогда // мгновенное превышение скорости
			НоваяСтрока.ДлительностьСобытия = ТекСтрока.ДлительностьСобытия; // в секундах
			НоваяСтрока.Значение 			= ТекСтрока.Значение / 10; // в км/ч
			НоваяСтрока.ПредельноеЗначение  = ТекСтрока.ПредельноеЗначение / 10; // в км/ч
		ИначеЕсли ТекСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.ДлительноеПревышениеСкорости Тогда  // длительное превышение скорости
			НоваяСтрока.ДлительностьСобытия = ТекСтрока.ДлительностьСобытия; // в секундах
			НоваяСтрока.Значение 			= ТекСтрока.Значение / 10; // в км/ч
			НоваяСтрока.ПредельноеЗначение  = ТекСтрока.ПредельноеЗначение / 10; // в км/ч
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;

	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
			"Мониторинг. Omnicomm",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы Omnicomm (через БД MySQL)
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура Omnicomm_БД_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.Omnicomm.БД";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	ТекстОшибки  = "";
	ПараметрыПроцедуры.Вставить("ДатаНачала",    ДатаНачала);
	ПараметрыПроцедуры.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураРезультат = уатИнтеграцияМониторингOmnicomm.Omnicomm_БД_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"ЗагрузитьПробегИРасходГСМ", ПараметрыПроцедуры, ТекстОшибки);
	Если СтруктураРезультат = Неопределено 
		ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СтруктураРезультат.НаборЗаписей;
	Соединение   = СтруктураРезультат.Соединение;

	ТекТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_БД_ВыполнитьОбработкуРезультатаЗапроса_СводныеДанныеМониторинга(
		НаборЗаписей, Соединение, ПараметрыПроцедуры);

	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТекТаблицаДанных Цикл
		Часы   = Цел(ТекСтрока.ВремяРаботыДвигателя / 3600);
		Минуты = ((ТекСтрока.ВремяРаботыДвигателя / 3600) - Цел(ТекСтрока.ВремяРаботыДвигателя / 3600) ) * 60;
		ЗначМоточасы = Часы + Минуты / 60;

		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТС                        = ТекСтрока.ТС;
		НоваяСтрока.Пробег                    = ТекСтрока.Пробег / 10;
		НоваяСтрока.НачальноеЗначениеОдометра = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя      = ЗначМоточасы;
		
		НоваяСтрока.РасходТоплива           = ТекСтрока.РасходТоплива / 10;
		НоваяСтрока.НачальныйУровеньТоплива = ТекСтрока.НачальныйУровеньТоплива / 10;
		НоваяСтрока.КонечныйУровеньТоплива  = ТекСтрока.КонечныйУровеньТоплива / 10;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Omnicomm_REST

// Функция выполняет авторизацию в системе Omnicomm (через ВебСервис REST)
//
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга.
//
// Возвращаемое значение:
//  Булево - Истина, если авторизация выполнена без ошибок.
//
Функция Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "")
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);

	Возврат НЕ ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

// Процедура выполняет получение таблицы ТС из системы Omnicomm (через ВебСервис REST)
//
// Параметры:
//  ТаблицаТС - Колонки - Наименование, ИДвСистеме и ГаражныйНомер
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
Процедура Omnicomm_REST_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки)
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "vehicle",, ТекстОшибки);
	
	уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_СписокТС(ТаблицаТС, ДанныеЗапроса);
	
КонецПроцедуры

// Функция загружает пробег и расход ГСМ из системы Omnicomm (через ВебСервис REST) в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_REST_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ИнтервалДетализации        = ПараметрыПроцедуры.ПериодичностьХранения;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	МассивТССCAN = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		Если ТекТС.ИспользоватьДанныеCANшиныОдометр Тогда
			МассивТекТС = Новый Массив();
			МассивТекТС.Добавить(ТекТС);
			МассивТССCAN.Добавить(Новый Структура("ТС, ЧасовойПояс", МассивТекТС, ТекЧасовойПояс));
		Иначе		
			МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
			Если МассивТекТС = Неопределено Тогда
				МассивТекТС = Новый Массив();
			КонецЕсли;
			МассивТекТС.Добавить(ТекТС);
			СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
		КонецЕсли;
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	Для Каждого ТекСтрока Из МассивТССCAN Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.ТС, ТекСтрока.ЧасовойПояс));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекДатаОкончания = ДатаОкончания;
		ТекДатаНачала    = ДатаНачала;
		Пока ТекДатаНачала < ДатаОкончания Цикл
			ТекДатаОкончания = ТекДатаНачала + (ИнтервалДетализации * 60);
			Если ТекДатаОкончания > ДатаОкончания Тогда
				ТекДатаОкончания = ДатаОкончания;
			КонецЕсли;
			
			ТекстОшибки  = "";
			
			ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
			ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
			
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("ДатаНачала",    ТекДатаНачала    - ТекКорректировкаВремени);
			ПараметрыЗапроса.Вставить("ДатаОкончания", ТекДатаОкончания - ТекКорректировкаВремени);
			ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
			
			ТекДатаНачала = ТекДатаОкончания;
			
			РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"statistics", ПараметрыЗапроса, ТекстОшибки);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			МассивРезультатовЗапросов.Добавить(
			Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса",
				 ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса));
		КонецЦикла;
	КонецЦикла;

	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, СоответсвиеТС, ЕстьОшибки);
		
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		Часы   = Цел(ТекСтрока.ВремяРаботыДвигателя / 3600);
		Минуты = ((ТекСтрока.ВремяРаботыДвигателя / 3600) - Цел(ТекСтрока.ВремяРаботыДвигателя / 3600) ) * 60;
		ЗначМоточасы = Часы + Минуты / 60;
		
		Если ТекСтрока.Пробег = 0 
			И ТекСтрока.ЗначениеОдометра = 0
			И ТекСтрока.РасходТоплива = 0 
			И ТекСтрока.УровеньТоплива = 0 
			И ЗначМоточасы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
		НоваяСтрока.ТС     = ТекСтрока.ТС;
		
		НоваяСтрока.Пробег               = ТекСтрока.Пробег;
		НоваяСтрока.ЗначениеОдометра     = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя = ЗначМоточасы;
		НоваяСтрока.РасходТоплива        = ТекСтрока.РасходТоплива / 10;
		НоваяСтрока.УровеньТоплива       = ТекСтрока.УровеньТоплива / 10;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы Omnicomm (через ВебСервис REST) в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_REST_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ИнтервалДетализации        = ПараметрыПроцедуры.ПериодичностьХранения;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	// Виды загружаемых событий.
	мсвЗагружаемыеТипыСобытий = Новый Массив();
	мсвЗагружаемыеТипыСобытий.Добавить(1);  // Заправки.
	мсвЗагружаемыеТипыСобытий.Добавить(3);  // Сливы.
	мсвЗагружаемыеТипыСобытий.Добавить(12); // Мгновенные превышения скорости.
	мсвЗагружаемыеТипыСобытий.Добавить(14); // Длительные превышения скорости.
	мсвЗагружаемыеТипыСобытий.Добавить(24); // Нарушения предельных значений датчиков.

	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("Идентификатор", ТекТС.Идентификатор);
		ПараметрыЗапроса.Вставить("ТипСобытия",    0);
		
		Для Каждого ТипСобытия Из мсвЗагружаемыеТипыСобытий Цикл
			ПараметрыЗапроса.ТипСобытия = ТипСобытия;
			
			ТекстОшибки  = "";
			РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
				"events", ПараметрыЗапроса, ТекстОшибки);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			МассивРезультатовЗапросов.Добавить(
			Новый Структура("ДатаНачала,ДатаОкончания,ТС,ЧасовойПояс,РезультатЗапроса",
			ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания,
			ТекТС.Ссылка,
			ТекЧасовойПояс, РезультатЗапроса));
		КонецЦикла;
	КонецЦикла;

	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_События(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, СоответсвиеТС, ЕстьОшибки);
		
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Функция загружает координаты из системы Omnicomm (через ВебСервис REST) в регистр сведений "Координаты по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_REST_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	ИнтервалХраненияКоординат  = ПараметрыПроцедуры.ИнтервалХраненияКоординат;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("Идентификатор", ТекТС.Идентификатор);
		
		ТекстОшибки  = "";
		РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"track", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ТС,ЧасовойПояс,РезультатЗапроса",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания,
		ТекТС.Ссылка,
		ТекЧасовойПояс, РезультатЗапроса));
	КонецЦикла;

	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_Координаты(
		МассивРезультатовЗапросов, ИнтервалХраненияКоординат, ЕстьОшибки);
		
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатКоординатыПоМониторингу",
		МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Получает сводные данные мониторинга в интервале из системы Omnicomm (через ВебСервис REST)
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура Omnicomm_REST_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ИнтервалДетализации        = ПараметрыПроцедуры.ПериодичностьХранения;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	МассивТССCAN = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		Если ТекТС.ИспользоватьДанныеCANшиныОдометр Тогда
			МассивТекТС = Новый Массив();
			МассивТекТС.Добавить(ТекТС);
			МассивТССCAN.Добавить(Новый Структура("ТС, ЧасовойПояс", МассивТекТС, ТекЧасовойПояс));
		Иначе		
			МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
			Если МассивТекТС = Неопределено Тогда
				МассивТекТС = Новый Массив();
			КонецЕсли;
			МассивТекТС.Добавить(ТекТС);
			СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
		КонецЕсли;
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	Для Каждого ТекСтрока Из МассивТССCAN Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.ТС, ТекСтрока.ЧасовойПояс));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекДатаОкончания = ДатаОкончания;
		ТекДатаНачала    = ДатаНачала;
		
		ТекстОшибки  = "";
		
		ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ТекДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ТекДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
		
		РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"statistics", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса));
	КонецЦикла;

	СоответсвиеТС    = ПараметрыПроцедуры.СоответсвиеТС;
	ТекТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_СводныеДанныеМониторинга(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, СоответсвиеТС, ЕстьОшибки);
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТекТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		Часы   = Цел(ТекСтрока.ВремяРаботыДвигателя / 3600);
		Минуты = ((ТекСтрока.ВремяРаботыДвигателя / 3600) - Цел(ТекСтрока.ВремяРаботыДвигателя / 3600) ) * 60;
		ЗначМоточасы = Часы + Минуты / 60;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТС                        = ТекСтрока.ТС;
		НоваяСтрока.Пробег                    = ТекСтрока.Пробег;
		НоваяСтрока.НачальноеЗначениеОдометра = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя      = ЗначМоточасы;
		
		НоваяСтрока.РасходТоплива           = ТекСтрока.РасходТоплива / 10;
		НоваяСтрока.НачальныйУровеньТоплива = ТекСтрока.НачальныйУровеньТоплива / 10;
		НоваяСтрока.КонечныйУровеньТоплива  = ТекСтрока.КонечныйУровеньТоплива / 10;

	КонецЦикла;
	
КонецПроцедуры

// Функция загружает текущее местоположение из системы Omnicomm в регистр сведений "Текущее местоположение ТС по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_REST_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	МассивТС = Новый Массив();
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		МассивТС.Добавить(ТекТС.Идентификатор);
	КонецЦикла;
		
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("МассивТС", МассивТС);

	РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"currentState", ПараметрыЗапроса, ТекстОшибки);

	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТСuuid;
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_ТекущиеКоординаты(
		РезультатЗапроса, СоответсвиеТС, ЕстьОшибки);
		
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекСтрока.ТС);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ТекСтрока);
			НаборЗаписей[0].Дата = ТекущаяДатаСеанса();
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
			НоваяЗапись.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Продолжить;
		КонецПопытки;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция Omnicomm_REST_ПолучитьОдометрТС(ДатаС, ДатаПо = Неопределено, ИДвСистемеНавигации, Подразделение, ТекстОшибки, СтруктураДопПараметров = Неопределено, УчетнаяЗаписьСистемыМониторинга = Неопределено, ТС = Неопределено) Экспорт 
	
	СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗаписьСистемыМониторинга);
	
	Если НЕ Omnicomm_REST_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаПо <> Неопределено И ДатаПо - ДатаС < 899 Тогда
		ДатаНачала = ДатаС - 900;
	Иначе
		ДатаНачала = ДатаС;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаПо) Тогда
		ДатаОкончания = ДатаПо;
	Иначе
		ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;

	МассивРезультатовЗапросов = Новый Массив();
 
	МассивТС = Новый Массив();
	МассивТС.Добавить(Новый Структура("Идентификатор", ИДвСистемеНавигации));
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ДатаНачала",          ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания",       ДатаОкончания);
	ПараметрыЗапроса.Вставить("МассивТС",            МассивТС);
	РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"statistics", ПараметрыЗапроса, ТекстОшибки);
	
	МассивРезультатовЗапросов.Добавить(
			Новый Структура("ДатаНачала, РезультатЗапроса", ДатаНачала, РезультатЗапроса));

	СоответсвиеТС = Новый Соответствие;
	СоответсвиеТС.Вставить(ИДвСистемеНавигации, Новый Структура("Ссылка, ИспользоватьДанныеCANшиныОдометр", ИДвСистемеНавигации, Истина));
	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_REST_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(
				 МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, СоответсвиеТС);
				 
	Одометр = Новый Структура("НачальныйОдометр, КонечныйОдометр", 0, 0);

	Если ТаблицаДанных.Количество() <> 0 Тогда
		Одометр.КонечныйОдометр = ТаблицаДанных[ТаблицаДанных.Количество()-1].ЗначениеОдометра;
		Возврат Одометр;
	КонецЕсли;
	
	Возврат Одометр;
	
КонецФункции


#КонецОбласти

#Область Omnicomm_SOAP

// Функция выполняет авторизацию в системе Omnicomm (через ВебСервис SOAP)
//
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга.
//
// Возвращаемое значение:
//  Булево - Истина, если авторизация выполнена без ошибок.
//
Функция Omnicomm_SOAP_Авторизация(СтруктураПараметровУчетнойЗаписи) Экспорт
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "signIn",, ТекстОшибки);
	Возврат НЕ ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

// Процедура выполняет получение таблицы ТС из системы Omnicomm (через ВебСервис SOAP)
//
// Параметры
//  ТаблицаТС - Колонки - Наименование, ИДвСистеме и ГаражныйНомер
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
Процедура Omnicomm_SOAP_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки)
	
	ДанныеЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "getObjectSet",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_СписокТС(ТаблицаТС, ДанныеЗапроса);
	
КонецПроцедуры

// Функция загружает пробег и расход ГСМ из системы Omnicomm (через ВебСервис SOAP) в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_SOAP_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ИнтервалДетализации        = ПараметрыПроцедуры.ПериодичностьХранения;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		ТекстОшибки  = "";
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
				ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;

		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",          ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",       ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("Идентификатор",       ТекТС.Идентификатор);
		ПараметрыЗапроса.Вставить("ИнтервалДетализации", ИнтервалДетализации);
		
		РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"getIntervalsInfo", ПараметрыЗапроса, ТекстОшибки);

		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
			Новый Структура("ТС,ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса",
			ТекТС, ДатаНачала, ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса));
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		Часы   = Цел(ТекСтрока.ВремяРаботыДвигателя / 3600);
		Минуты = ((ТекСтрока.ВремяРаботыДвигателя / 3600) - Цел(ТекСтрока.ВремяРаботыДвигателя / 3600) ) * 60;
		ЗначМоточасы = Часы + Минуты / 60;
		
		Если ТекСтрока.Пробег = 0 
			И ТекСтрока.ЗначениеОдометра = 0
			И ТекСтрока.РасходТоплива = 0 
			И ТекСтрока.УровеньТоплива = 0 
			И ЗначМоточасы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
		НоваяСтрока.ТС     = ТекСтрока.ТС;
		
		НоваяСтрока.Пробег               = ТекСтрока.Пробег;
		НоваяСтрока.ЗначениеОдометра     = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя = ЗначМоточасы;
		НоваяСтрока.РасходТоплива        = ТекСтрока.РасходТоплива;
		НоваяСтрока.УровеньТоплива       = ТекСтрока.УровеньТоплива;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы Omnicomm (через ВебСервис SOAP) в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_SOAP_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ИнтервалДетализации        = ПараметрыПроцедуры.ПериодичностьХранения;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	// Виды загружаемых событий.
	мсвЗагружаемыеТипыСобытий = Новый Массив();
	мсвЗагружаемыеТипыСобытий.Добавить(1);  // Заправки.
	мсвЗагружаемыеТипыСобытий.Добавить(3);  // Сливы.
	мсвЗагружаемыеТипыСобытий.Добавить(12); // Мгновенные превышения скорости.
	мсвЗагружаемыеТипыСобытий.Добавить(14); // Длительные превышения скорости.
	мсвЗагружаемыеТипыСобытий.Добавить(24); // Нарушения предельных значений датчиков.

	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		ТекстОшибки  = "";
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
				ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;

		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",          ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",       ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("Идентификатор",       ТекТС.Идентификатор);
		ПараметрыЗапроса.Вставить("ТипСобытия",          0);
		
		Для Каждого ТекСобытие Из мсвЗагружаемыеТипыСобытий Цикл
			
			ПараметрыЗапроса.ТипСобытия = ТекСобытие;
			РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
			"getEvents", ПараметрыЗапроса, ТекстОшибки);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			МассивРезультатовЗапросов.Добавить(
			Новый Структура("ТС,ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса",
			ТекТС, ДатаНачала, ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса));
		КонецЦикла;
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_События(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	СоответсвиеТС = ПараметрыПроцедуры.СоответсвиеТС;
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
		
		Если НоваяСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.МгновенноеПревышениеСкорости
			ИЛИ НоваяСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.ДлительноеПревышениеСкорости Тогда
			НоваяСтрока.Значение = НоваяСтрока.Значение / 10;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Функция загружает координаты из системы Omnicomm (через ВебСервис SOAP) в регистр сведений "Omnicomm_SOAP_ЗагрузитьКоординаты"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_SOAP_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки = Ложь)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	МассивТС = ПараметрыПроцедуры.МассивТС;

	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		ТекстОшибки  = "";
	
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Идентификатор",       ТекТС.Идентификатор);
		
		РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"getCurrentObjectState", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ТС,РезультатЗапроса",
			ТекТС, РезультатЗапроса));
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_ТекущиеКоординаты(
		МассивРезультатовЗапросов, ЕстьОшибки);
		
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекСтрока.ТС);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ТекСтрока);
			НаборЗаписей[0].Дата = ТекущаяДатаСеанса();
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
			НоваяЗапись.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Функция загружает текущее местоположение из системы Omnicomm в регистр сведений "Координаты по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Omnicomm_SOAP_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ИнтервалДетализации        = ПараметрыПроцедуры.ПериодичностьХранения;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	ИнтервалХраненияКоординат  = ПараметрыПроцедуры.ИнтервалХраненияКоординат;

	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		ТекстОшибки  = "";
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
				ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;

		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",          ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",       ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("Идентификатор",       ТекТС.Идентификатор);
		
		РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"getTrack", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ТС,ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса",
		ТекТС, ДатаНачала, ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса));
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_Координаты(
	МассивРезультатовЗапросов, ИнтервалХраненияКоординат, ЕстьОшибки);
	
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Период = ТекСтрока.Период + ТекКорректировкаВремени;
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатКоординатыПоМониторингу",
		МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Omnicomm",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
		
КонецФункции

// Получает сводные данные мониторинга в интервале из системы Omnicomm 
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура Omnicomm_SOAP_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.Omnicomm.ВебСервис";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
		
	МассивТС                   = ПараметрыПроцедуры.МассивТС;
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		
		ТекстОшибки  = "";
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",          ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",       ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("Идентификатор",       ТекТС.Идентификатор);
		ПараметрыЗапроса.Вставить("ИнтервалДетализации", 1440);
		ПараметрыЗапроса.Вставить("РазбивкаНаЧасти",     Ложь);
		
		РезультатЗапроса = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"getIntervalsInfo", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ТС,ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса",
		ТекТС, ДатаНачала, ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса));
	КонецЦикла;

	ТекТаблицаДанных = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_СводныеДанныеМониторинга(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТекТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		Часы   = Цел(ТекСтрока.ВремяРаботыДвигателя / 3600);
		Минуты = ((ТекСтрока.ВремяРаботыДвигателя / 3600) - Цел(ТекСтрока.ВремяРаботыДвигателя / 3600) ) * 60;
		ЗначМоточасы = Часы + Минуты / 60;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТС                        = ТекСтрока.ТС;
		НоваяСтрока.Пробег                    = ТекСтрока.Пробег;
		НоваяСтрока.НачальноеЗначениеОдометра = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя      = ЗначМоточасы;
		
		НоваяСтрока.РасходТоплива           = ТекСтрока.РасходТоплива;
		НоваяСтрока.НачальныйУровеньТоплива = ТекСтрока.НачальныйУровеньТоплива;
		НоваяСтрока.КонечныйУровеньТоплива  = ТекСтрока.КонечныйУровеньТоплива;

	КонецЦикла;
	
КонецПроцедуры

Функция Omnicomm_SOAP_ПолучитьОдометрТС(ДатаС, ДатаПо = Неопределено, ИДвСистемеНавигации, Подразделение, ТекстОшибки, СтруктураДопПараметров = Неопределено, УчетнаяЗаписьСистемыМониторинга = Неопределено, ТС = Неопределено) Экспорт 
	
	СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗаписьСистемыМониторинга);
	
	Если ДатаПо <> Неопределено И ДатаПо - ДатаС < 899 Тогда
		ДатаНачала = ДатаС - 900;
	Иначе
		ДатаНачала = ДатаС;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаПо) Тогда
		ДатаОкончания = ДатаПо;
	Иначе
		ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ДатаНачала",          ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания",       ДатаОкончания);
	ПараметрыЗапроса.Вставить("Идентификатор",       ИДвСистемеНавигации);
	РезультатЗапросаCAN = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
	"getStatisticsByPeriod", ПараметрыЗапроса, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Одометр = уатИнтеграцияМониторингOmnicomm.Omnicomm_SOAP_ВыполнитьОбработкуРезультатаЗапроса_ОдометрТС(РезультатЗапросаCAN, ИДвСистемеНавигации);
	
	
	Возврат Одометр;
	
КонецФункции


#КонецОбласти

#Область Wialon

// Функция выполняет авторизацию в системе Wialon
//
// Параметры:
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга.
//
// Возвращаемое значение:
//  Булево - Истина, если авторизация выполнена без ошибок.
//
Функция Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "")
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);

	Если НЕ ЗначениеЗаполнено(СтруктураПараметровУчетнойЗаписи.Ресурс) Тогда
		ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "search_items_avl_resource",, ТекстОшибки);
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

// Процедура выполняет получение таблицы ТС из системы Wialon.
//
// Параметры
//  ТаблицаТС - Колонки - Наименование, ИДвСистеме и ГаражныйНомер
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
Процедура Wialon_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт
	
	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "search_items_avl_unit",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуРезультатаЗапроса_СписокТС(ТаблицаТС, ДанныеЗапроса);
		
КонецПроцедуры

// Функция выполняет получение список ресурсов из системы Wialon.
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга.
//
// Возвращаемое значение:
//  СписокЗначений - Список ресурсов.
//
Функция Wialon_ПолучитьСписокРесурсов(СтруктураПараметровУчетнойЗаписи) Экспорт
	
	СписокРесурсов = Новый СписокЗначений();
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат СписокРесурсов;
	КонецЕсли;
	
	ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "search_items_avl_resource",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат СписокРесурсов;
	КонецЕсли;
	
	СписокРесурсов = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуПолученныхДанныхРесурсы(ДанныеЗапроса);

	Возврат СписокРесурсов;

КонецФункции

// Функция загружает пробег и расход ГСМ из системы Wialon в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Wialon_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.Wialon";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;

	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	// Разобьем массив ТС на часовые пояса
	ДеревоЗапроса = Новый ДеревоЗначений();
	ДеревоЗапроса.Колонки.Добавить("ЧасовойПояс",   Новый ОписаниеТипов("Число"));
	ДеревоЗапроса.Колонки.Добавить("ТС",            Новый ОписаниеТипов("СправочникСсылка."
		+ уатОбщегоНазначения.ПолучитьНаименованиеСправочникаТС()));
	ДеревоЗапроса.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ДеревоЗапроса.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	
	МассивЧасовыхПоясов = Новый Массив();
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиWialon);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		
		СтрокаЧасовогоПояса = ДеревоЗапроса.Строки.Найти(ТекЧасовойПояс, "ЧасовойПояс", Ложь);
		Если СтрокаЧасовогоПояса = Неопределено Тогда 
			СтрокаЧасовогоПояса = ДеревоЗапроса.Строки.Добавить();
			СтрокаЧасовогоПояса.ЧасовойПояс = ТекЧасовойПояс;
		КонецЕсли;
		
		НовСтр = СтрокаЧасовогоПояса.Строки.Добавить();
		НовСтр.ТС               = ТекТС.Ссылка;
		НовСтр.Наименование     = ТекТС.НаименованиеМониторинг;
		НовСтр.Идентификатор    = ТекТС.Идентификатор;
		НовСтр.ЧасовойПояс      = ТекЧасовойПояс;

		Если МассивЧасовыхПоясов.Найти(ТекЧасовойПояс) = Неопределено Тогда
			МассивЧасовыхПоясов.Добавить(ТекЧасовойПояс);
		КонецЕсли;

	КонецЦИкла;
	
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Сформируем интервалы загрузки
	СоответсвиеДатЧасовыхПоясов = уатИнтеграцияМониторингWialon.Wialon_ПолучитьДатыЗапросов(ДатаНачала, ДатаОкончания, МассивЧасовыхПоясов, ПараметрыПроцедуры);
	
	ТекДатаОкончания = ДатаОкончания;
	Для Каждого ТекЧасовойПояс Из ДеревоЗапроса.Строки Цикл
		
		МассивДат = СоответсвиеДатЧасовыхПоясов.Получить(ТекЧасовойПояс.ЧасовойПояс);
		Если МассивДат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		// Сформирум запрос на получение данных и обработаем его
		ТаблицаДанных = Wialon_ПолучитьПробегИРасходГСМ(МассивДат,
			ТекЧасовойПояс.Строки, СтруктураПараметровУчетнойЗаписи, ПараметрыПроцедуры, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Для Каждого ТекСтрокаСобытия Из ТаблицаДанных Цикл
			НоваяСтрока = ТабДляРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаСобытия); 
			
			Если ТекСтрокаСобытия.ЗначениеОдометра < 800 Тогда
				 НоваяСтрока.ЗначениеОдометра = 0;
			КонецЕсли;
			
			ТекДатаОкончания = Макс(ТекДатаОкончания, НоваяСтрока.Период);
			Попытка
				стрРазбор = ТекСтрокаСобытия.ВремяРаботыДвигателя;
				мДни = 0;
				Поз  = Найти(стрРазбор, "days");
				Если Поз <> 0 Тогда
					мДни = СокрЛП(Лев(стрРазбор, Поз-1));
					стрРазбор = Прав(стрРазбор, СтрДлина(стрРазбор)-(Поз-1));
					стрРазбор = СтрЗаменить(стрРазбор, "days ", "");
				КонецЕсли;
				Поз = Найти(стрРазбор, ":");
				мЧас = Лев(стрРазбор, Поз-1);
				стрРазбор = Прав(стрРазбор, СтрДлина(стрРазбор)-Поз);
				Поз = Найти(стрРазбор, ":");
				мМин = Лев(стрРазбор, Поз-1);
				мСек = Прав(стрРазбор, СтрДлина(стрРазбор)-Поз);
				
				мДни = ?(мДни="",0,мДни);
				мЧас = ?(мЧас="",0,мЧас);
				мМин = ?(мМин="",0,мМин);
				мСек = ?(мСек="",0,мСек);
				
				НоваяСтрока.ВремяРаботыДвигателя = Число(мДни)*24 + Число(мЧас) + (мМин*60 + мСек) / 3600;
			Исключение
				НоваяСтрока.ВремяРаботыДвигателя = 0;
			КонецПопытки;

		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТабДляРегистра Цикл
		Если ТекСтрока.Период < ДатаНачала Тогда
			ДатаНачала = ТекСтрока.Период;
		КонецЕсли;
		Если ТекСтрока.Период > ТекДатаОкончания Тогда
			ТекДатаОкончания = ТекСтрока.Период;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ТекДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция Wialon_ПолучитьПробегИРасходГСМ(МассивДат, МассивТС, СтруктураПараметровУчетнойЗаписи, ПараметрыПроцедуры, ТекстОшибки, ИспользованияОтчетыПоГруппе = Истина)
	
	ВидЗагружаемогоПробега = ПараметрыПроцедуры.ВидЗагружаемогоПробега;
	ЗагружатьВсеДанные     = ПараметрыПроцедуры.ЗагружатьВсеДанные;
	ИспользоватьСмены      = ПараметрыПроцедуры.ИспользоватьСмены;

	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Период");
	ТаблицаСобытий.Колонки.Добавить("ТС");
	ТаблицаСобытий.Колонки.Добавить("Пробег");
	ТаблицаСобытий.Колонки.Добавить("ВремяРаботыДвигателя");
	ТаблицаСобытий.Колонки.Добавить("РасходТоплива");
	ТаблицаСобытий.Колонки.Добавить("УровеньТоплива");
	ТаблицаСобытий.Колонки.Добавить("ЗначениеОдометра");
	ТаблицаСобытий.Колонки.Добавить("ЗначениеОдометраНачало");
	ТаблицаСобытий.Колонки.Добавить("УровеньТопливаНачало");
	
	МассивОбъектов = Новый Массив();
	СоответсвиеТС  = Новый Соответствие();
	Для Каждого ТекТС Из МассивТС Цикл
		МассивОбъектов.Добавить(ТекТС.Идентификатор);
		СоответсвиеТС.Вставить(ТекТС.Наименование, ТекТС.ТС);
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат ТаблицаСобытий;
	КонецЕсли;
		
	ВозможностьИспользованияОтчетовПоГруппе = ИспользованияОтчетыПоГруппе
		И уатИнтеграцияМониторингWialon.Wialon_ПроверитьВозможностьИспользованияОтчетовПоГруппе(СтруктураПараметровУчетнойЗаписи);
	
	Если ВозможностьИспользованияОтчетовПоГруппе Тогда
		Для Каждого ТекИнтервал Из МассивДат Цикл
			
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("МассивОбъектов",         МассивОбъектов);
			ПараметрыЗапроса.Вставить("Интервал",               ТекИнтервал);
			ПараметрыЗапроса.Вставить("ВидЗагружаемогоПробега", ВидЗагружаемогоПробега);
			ПараметрыЗапроса.Вставить("ИспользоватьСмены",      ИспользоватьСмены);
		
			МассивОтчетов = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "unit_group_trips", ПараметрыЗапроса, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(МассивОтчетов) <> Тип("Массив") 
				ИЛИ МассивОтчетов.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеУдалитьДанныеПредыдущегоОтчета = МассивОтчетов[0];
			Если уатИнтеграцияМониторингWialon.Wialon_ЕстьОшибка(ДанныеУдалитьДанныеПредыдущегоОтчета, ТекстОшибки) Тогда 
				Продолжить;
			КонецЕсли;
			
			ТаблицаОтчета   = МассивОтчетов[1];
			КодОшибкиWialon = 0;
			Если уатИнтеграцияМониторингWialon.Wialon_ЕстьОшибка(ТаблицаОтчета, ТекстОшибки, КодОшибкиWialon) Тогда 
				Если КодОшибкиWialon = 4 
					ИЛИ КодОшибкиWialon = "4" Тогда
					ТекстОшибки = "";
					Возврат Wialon_ПолучитьПробегИРасходГСМ(МассивДат, МассивТС, СтруктураПараметровУчетнойЗаписи, ПараметрыПроцедуры, ТекстОшибки, Ложь);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыЗапроса = Новый Структура();
			ПараметрыЗапроса.Вставить("ВидЗагружаемогоПробега", ВидЗагружаемогоПробега);
			ПараметрыЗапроса.Вставить("МассивОбъектов",         МассивОбъектов);
			ПараметрыЗапроса.Вставить("ТаблицаОтчета",          ТаблицаОтчета);

			ДанныеОтчета = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "select_result_rows", ПараметрыЗапроса, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) 
				ИЛИ НЕ ТипЗнч(ДанныеОтчета) = Тип("Массив") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеОтчета.Количество() <> 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеОтчетаПоезки = ДанныеОтчета[0];
			ДанныеОтчетаОбщий  = ДанныеОтчета[1];
			
			уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМДляГрупп(ТаблицаСобытий, ДанныеОтчетаПоезки, ДанныеОтчетаОбщий, СоответсвиеТС,
				ТекИнтервал, ЗагружатьВсеДанные, ИспользоватьСмены, ПараметрыПроцедуры.Свойство("СводныеДанные"));
			
		КонецЦикла;
	Иначе
		Для Каждого ТекТС Из МассивТС Цикл
			МассивОбъектов = Новый Массив();
			СоответсвиеТС  = Новый Соответствие();
			МассивОбъектов.Добавить(Число(ТекТС.Идентификатор));
			СоответсвиеТС.Вставить(ТекТС.Наименование, ТекТС.ТС);
			
			Для Каждого ТекИнтервал Из МассивДат Цикл
				
				ПараметрыЗапроса = Новый Структура();
				ПараметрыЗапроса.Вставить("МассивОбъектов",      МассивОбъектов);
				ПараметрыЗапроса.Вставить("Интервал",            ТекИнтервал);
				ПараметрыЗапроса.Вставить("ВидЗагружаемогоПробега", ВидЗагружаемогоПробега);
				ПараметрыЗапроса.Вставить("ИспользоватьСмены",   ИспользоватьСмены);
				
				МассивОтчетов = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "unit_trips", ПараметрыЗапроса, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(МассивОтчетов) <> Тип("Массив") 
					ИЛИ МассивОтчетов.Количество() < 2 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеУдалитьДанныеПредыдущегоОтчета = МассивОтчетов[0];
				Если уатИнтеграцияМониторингWialon.Wialon_ЕстьОшибка(ДанныеУдалитьДанныеПредыдущегоОтчета, ТекстОшибки) Тогда 
					Продолжить;
				КонецЕсли;
				
				ТаблицаОтчета = МассивОтчетов[1];
				Если уатИнтеграцияМониторингWialon.Wialon_ЕстьОшибка(ТаблицаОтчета, ТекстОшибки) Тогда 
					Продолжить;
				КонецЕсли;
				
				ПараметрыЗапроса = Новый Структура();
				ПараметрыЗапроса.Вставить("ВидЗагружаемогоПробега", ВидЗагружаемогоПробега);
				ПараметрыЗапроса.Вставить("МассивОбъектов",         МассивОбъектов);
				ПараметрыЗапроса.Вставить("ТаблицаОтчета",          ТаблицаОтчета);

				ДанныеОтчета = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "select_result_rows", ПараметрыЗапроса, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) 
					ИЛИ НЕ ТипЗнч(ДанныеОтчета) = Тип("Массив") Тогда
					Продолжить;
				КонецЕсли;
				
				
				Если ДанныеОтчета.Количество() <> 2 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеОтчетаПоезки = ДанныеОтчета[0];
				ДанныеОтчетаОбщий  = ДанныеОтчета[1];
				
				уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(ТаблицаСобытий, ДанныеОтчетаПоезки,
					ДанныеОтчетаОбщий, ТекТС.ТС, ТекИнтервал, ЗагружатьВсеДанные, ИспользоватьСмены, ПараметрыПроцедуры.Свойство("СводныеДанные"));
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы Wialon в регистр сведений "События по мониторингу".
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Wialon_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.Wialon";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;

	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Период");
	ТаблицаДанных.Колонки.Добавить("ТС");
	ТаблицаДанных.Колонки.Добавить("ТипСобытия");
	ТаблицаДанных.Колонки.Добавить("ДлительностьСобытия");
	ТаблицаДанных.Колонки.Добавить("Значение");
	ТаблицаДанных.Колонки.Добавить("ПредельноеЗначение");
	
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиWialon);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ТекстОшибки = "";
		
		РезультатОчистки = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "cleanup_result",, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
	
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",      ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",   ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ИдентификаторТС", ТекТС.Идентификатор);
		
		ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "unit_fillings", ПараметрыЗапроса, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуРезультатаЗапроса_События(ДанныеЗапроса, СтруктураПараметровУчетнойЗаписи, ТаблицаДанных, ТекТС, ТекЧасовойПояс);

	КонецЦИкла;
	
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();

	ТекДатаНачала    = ДатаНачала;
	ТекДатаОкончания = ДатаОкончания;
	Для Каждого ТекСтрокаСобытия Из ТаблицаДанных Цикл
		ПовторСтроки = ТабДляРегистра.НайтиСтроки(Новый Структура("ТС, Период, ТипСобытия",
		ТекСтрокаСобытия.ТС, ТекСтрокаСобытия.Период, ТекСтрокаСобытия.ТипСобытия));
		Если ПовторСтроки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекДатаНачала    = Мин(ТекДатаНачала, ТекСтрокаСобытия.Период);
		ТекДатаОкончания = Макс(ТекДатаОкончания, ТекСтрокаСобытия.Период);
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаСобытия); 
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		ПараметрыПроцедуры.МассивТС, ТекДатаНачала, ТекДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает координаты из системы Wialon в регистр сведений "Координаты по мониторингу".
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Wialon_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.Wialon";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;

	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	ИсточникКоординат          = ПараметрыПроцедуры.ИсточникКоординат;
	ИнтервалХраненияКоординат  = ПараметрыПроцедуры.ИнтервалХраненияКоординат;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Период");
	ТаблицаДанных.Колонки.Добавить("ТС");
	ТаблицаДанных.Колонки.Добавить("Широта");
	ТаблицаДанных.Колонки.Добавить("Долгота");
	ТаблицаДанных.Колонки.Добавить("ПредставлениеАдреса");
	ТаблицаДанных.Колонки.Добавить("Скорость");
	ТаблицаДанных.Колонки.Добавить("Курс");
	
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиWialon);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ТекстОшибки = "";
		
		РезультатОчистки = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "cleanup_result",, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
	
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",        ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",     ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ИдентификаторТС",   ТекТС.Идентификатор);
		ПараметрыЗапроса.Вставить("ИсточникКоординат", ИсточникКоординат);
		
		ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "unit_stats", ПараметрыЗапроса, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуРезультатаЗапроса_Координаты(ДанныеЗапроса, СтруктураПараметровУчетнойЗаписи, 
			ТаблицаДанных, ТекТС, ТекЧасовойПояс, ИсточникКоординат, ИнтервалХраненияКоординат);

	КонецЦИкла;
	
	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();

	Для Каждого ТекСтрокаСобытия Из ТаблицаДанных Цикл
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаСобытия); 
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатКоординатыПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает координаты из системы Wialon в регистр сведений "уатТекущееМестоположениеТСПоМониторингу".
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция Wialon_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.Wialon";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;

	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	ИсточникКоординат          = ПараметрыПроцедуры.ИсточникКоординат;
	ИнтервалХраненияКоординат  = ПараметрыПроцедуры.ИнтервалХраненияКоординат;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Период");
	ТаблицаДанных.Колонки.Добавить("ТС");
	ТаблицаДанных.Колонки.Добавить("Широта");
	ТаблицаДанных.Колонки.Добавить("Долгота");
	ТаблицаДанных.Колонки.Добавить("ПредставлениеАдреса");
	ТаблицаДанных.Колонки.Добавить("Скорость");
	ТаблицаДанных.Колонки.Добавить("Курс");
	
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиWialon);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ТекстОшибки = "";
		
		РезультатОчистки = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "cleanup_result",, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
	
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",        ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания",     ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ИдентификаторТС",   ТекТС.Идентификатор);
		ПараметрыЗапроса.Вставить("ИсточникКоординат", ИсточникКоординат);
		
		ДанныеЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "unit_stats", ПараметрыЗапроса, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		уатИнтеграцияМониторингWialon.Wialon_ВыполнитьОбработкуРезультатаЗапроса_Координаты(ДанныеЗапроса, СтруктураПараметровУчетнойЗаписи, 
			ТаблицаДанных, ТекТС, ТекЧасовойПояс, ИсточникКоординат, ИнтервалХраненияКоординат);

	КонецЦИкла;
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекСтрока.ТС);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ТекСтрока);
			НаборЗаписей[0].Дата = ТекущаяДатаСеанса();
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
			НоваяЗапись.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Продолжить;
		КонецПопытки;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы Wialon
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура Wialon_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.Wialon";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;

		// Разобьем массив ТС на часовые пояса
	ДеревоЗапроса = Новый ДеревоЗначений();
	ДеревоЗапроса.Колонки.Добавить("ЧасовойПояс",   Новый ОписаниеТипов("Число"));
	ДеревоЗапроса.Колонки.Добавить("ТС",            Новый ОписаниеТипов("СправочникСсылка."
		+ уатОбщегоНазначения.ПолучитьНаименованиеСправочникаТС()));
	ДеревоЗапроса.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ДеревоЗапроса.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	
	МассивЧасовыхПоясов = Новый Массив();
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиWialon);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		
		СтрокаЧасовогоПояса = ДеревоЗапроса.Строки.Найти(ТекЧасовойПояс, "ЧасовойПояс", Ложь);
		Если СтрокаЧасовогоПояса = Неопределено Тогда 
			СтрокаЧасовогоПояса = ДеревоЗапроса.Строки.Добавить();
			СтрокаЧасовогоПояса.ЧасовойПояс = ТекЧасовойПояс;
		КонецЕсли;
		
		НовСтр = СтрокаЧасовогоПояса.Строки.Добавить();
		НовСтр.ТС               = ТекТС.Ссылка;
		НовСтр.Наименование     = ТекТС.НаименованиеМониторинг;
		НовСтр.Идентификатор    = ТекТС.Идентификатор;
		НовСтр.ЧасовойПояс      = ТекЧасовойПояс;

		Если МассивЧасовыхПоясов.Найти(ТекЧасовойПояс) = Неопределено Тогда
			МассивЧасовыхПоясов.Добавить(ТекЧасовойПояс);
		КонецЕсли;

	КонецЦИкла;
		
	ПараметрыПроцедуры.ПериодичностьХранения = 0;
	ПараметрыПроцедуры.ЗагружатьВсеДанные    = Истина;
	ПараметрыПроцедуры.ИспользоватьСмены     = Ложь;
	ПараметрыПроцедуры.Вставить("СводныеДанные", Истина);

	// Сформируем интервалы загрузки
	СоответсвиеДатЧасовыхПоясов = уатИнтеграцияМониторингWialon.Wialon_ПолучитьДатыЗапросов(ДатаНачала, ДатаОкончания,
	МассивЧасовыхПоясов, ПараметрыПроцедуры);
	
	Для Каждого ТекЧасовойПояс Из ДеревоЗапроса.Строки Цикл
		
		МассивДат = СоответсвиеДатЧасовыхПоясов.Получить(ТекЧасовойПояс.ЧасовойПояс);
		Если МассивДат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		// Сформирум запрос на получение данных и обработаем его
		ТекТаблицаДанных = Wialon_ПолучитьПробегИРасходГСМ(МассивДат,
		ТекЧасовойПояс.Строки, СтруктураПараметровУчетнойЗаписи, ПараметрыПроцедуры, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Для Каждого ТекСтрокаСобытия Из ТекТаблицаДанных Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаСобытия); 
			НоваяСтрока.НачальныйУровеньТоплива   = ТекСтрокаСобытия.УровеньТопливаНачало;
			НоваяСтрока.КонечныйУровеньТоплива    = ТекСтрокаСобытия.УровеньТоплива;
			Если ТекСтрокаСобытия.ЗначениеОдометраНачало = Неопределено
				ИЛИ ТекСтрокаСобытия.ЗначениеОдометраНачало < 800 Тогда
				НоваяСтрока.НачальноеЗначениеОдометра = 0;
			Иначе
				НоваяСтрока.НачальноеЗначениеОдометра = ТекСтрокаСобытия.ЗначениеОдометраНачало;
			КонецЕсли;

			Попытка
				стрРазбор = ТекСтрокаСобытия.ВремяРаботыДвигателя;
				мДни = 0;
				Поз  = Найти(стрРазбор, "days");
				Если Поз <> 0 Тогда
					мДни = СокрЛП(Лев(стрРазбор, Поз-1));
					стрРазбор = Прав(стрРазбор, СтрДлина(стрРазбор)-(Поз-1));
					стрРазбор = СтрЗаменить(стрРазбор, "days ", "");
				КонецЕсли;
				Поз = Найти(стрРазбор, ":");
				мЧас = Лев(стрРазбор, Поз-1);
				стрРазбор = Прав(стрРазбор, СтрДлина(стрРазбор)-Поз);
				Поз = Найти(стрРазбор, ":");
				мМин = Лев(стрРазбор, Поз-1);
				мСек = Прав(стрРазбор, СтрДлина(стрРазбор)-Поз);
				
				мДни = ?(мДни="",0,мДни);
				мЧас = ?(мЧас="",0,мЧас);
				мМин = ?(мМин="",0,мМин);
				мСек = ?(мСек="",0,мСек);
				
				НоваяСтрока.ВремяРаботыДвигателя = Число(мДни)*24 + Число(мЧас) + (мМин*60 + мСек) / 3600;
			Исключение
				НоваяСтрока.ВремяРаботыДвигателя = 0;
			КонецПопытки;
		КонецЦикла;

	КонецЦикла;

	
КонецПроцедуры

Функция Wialon_ПолучитьСсылкуНаЛокатор(ТС, ТекстОшибки, ВремяЖизниСсылкиНаЛокатор = Неопределено) Экспорт
	
	ТекстОшибки     = "";
	КодОшибкиWialon = "";
	
	УчетнаяЗапись                    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТС, 
		уатОбщегоНазначения.ПолучитьПрефиксРеквизитовСправочникаТС() + "УчетнаяЗаписьСистемыМониторинга");
	СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗапись);
	
	Если ВремяЖизниСсылкиНаЛокатор = Неопределено Тогда
		НастройкиWialon = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Получить().Получить();
		Если НастройкиWialon = Неопределено Тогда 
			НастройкиWialon = Новый Структура();
		КонецЕсли;
		Если Не НастройкиWialon.Свойство("ВремяЖизниСсылкиНаЛокатор") Тогда
			НастройкиWialon.Вставить("ВремяЖизниСсылкиНаЛокатор", 3600);
		КонецЕсли;
		ВремяЖизниСсылкиНаЛокатор = НастройкиWialon.ВремяЖизниСсылкиНаЛокатор;
	КонецЕсли;

	Если НЕ Wialon_Авторизация(СтруктураПараметровУчетнойЗаписи) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ИДвСистемеНавигации = Число(ТС.ИДвСистемеНавигации);
	Исключение
		ТекстОшибки = НСтр("ru='Невозможно осуществить запрос для ТС'") + " <" + ТС + "> ";
		Возврат "";
	КонецПопытки;

	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(ИДвСистемеНавигации);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("МассивОбъектов",            МассивОбъектов);
	ПараметрыЗапроса.Вставить("ВремяЖизниСсылкиНаЛокатор", ВремяЖизниСсылкиНаЛокатор);

	РезультатЗапроса = уатИнтеграцияМониторингWialon.Wialon_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "locator", ПараметрыЗапроса, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) 
		ИЛИ НЕ ТипЗнч(РезультатЗапроса) = Тип("Соответствие") Тогда
		Возврат "";
	КонецЕсли;
	
	УникальныйТокен = РезультатЗапроса.Получить("h");
	Если НЕ ЗначениеЗаполнено(УникальныйТокен) Тогда
		ТекстОшибки = НСтр("ru='Не удалось получить ссылку на локатор для ТС'") + " <" + ТС + "> ";
		Возврат "";
	КонецЕсли;
	
	Если СтруктураПараметровУчетнойЗаписи.ВидСистемы = 1 Тогда
		СсылкаНаЛокатор = СтруктураПараметровУчетнойЗаписи.АдресСервиса + "/locator/index.html?t=" + УникальныйТокен;
	Иначе
		СсылкаНаЛокатор = "https://hosting.wialon.com/locator/index.html?t=" + УникальныйТокен;
	КонецЕсли;

	// Сожмем ссылку
	Если ЕстьКириллица(СсылкаНаЛокатор) Тогда
		ПолныйАдресРесурса = "https://clck.ru/--?url=" + СсылкаНаЛокатор;
	Иначе
		ПолныйАдресРесурса = "https://cutt.us/api.php?url=" + СсылкаНаЛокатор;
	КонецЕсли;

	HTTPОтвет = уатЗащищенныеФункцииСервер.ВыполнитьHTTPЗапрос(ПолныйАдресРесурса,
	"Мониторинг. Wialon", ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) 
		ИЛИ HTTPОтвет = Неопределено Тогда
		СтрокаТекстаОшибки = НСтр("ru='Не удалось сжать ссылку на локатор для ТС'") + " <" + ТС + "> ";
		СтрокаТекстаОшибки = СтрокаТекстаОшибки + " " + НСтр("ru='(Подробности см. в журнале регистрации).'");
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатЗащищенныеФункцииСервер_проф,
		,
		ТекстОшибки
		);
		Возврат СсылкаНаЛокатор;
	КонецЕсли;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если КодСостояния = 200 Тогда
		СокрСсылкаНаЛокатор = ResponseText;
		Возврат СокрСсылкаНаЛокатор;
	Иначе
		СтрокаТекстаОшибки = НСтр("ru='Не удалось получить сжать ссылку на локатор для ТС'") + " <" + ТС + "> ";
		СтрокаТекстаОшибки = СтрокаТекстаОшибки + " " + НСтр("ru='(Подробности см. в журнале регистрации).'");
		ЗаписьЖурналаРегистрации(
		"Мониторинг. Wialon",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатЗащищенныеФункцииСервер_проф,
		,
		СтрокаТекстаОшибки + Символы.ПС + ResponseText
		);
		Возврат СсылкаНаЛокатор;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область АВТОГРАФ

// Процедура выполняет получение таблицы ТС из системы АвтоГРАФ.
//
// Параметры
//  ТаблицаТС - Колонки - Наименование и ГаражныйНомер;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка.
//
Процедура АвтоГРАФ_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт
	
	Версия = СтруктураПараметровУчетнойЗаписи.Версия;
	Если Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5 
		ИЛИ Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7 Тогда
		АвтоГРАФ5_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Иначе
		АвтоГРАФ4_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Функция загружает пробег и расход ГСМ из системы АвтоГРАФ в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Версия = СтруктураПараметровУчетнойЗаписи.Версия;

	Если Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5
		ИЛИ Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7 Тогда
		Возврат АвтоГРАФ5_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	Иначе
		Возврат АвтоГРАФ4_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ в регистр сведений "События по мониторингу".
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Версия = СтруктураПараметровУчетнойЗаписи.Версия;

	Если Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5 
		ИЛИ Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7 Тогда
		Возврат АвтоГРАФ5_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	Иначе
		Возврат АвтоГРАФ4_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

// Функция загружает координаты в регистр сведений "Координаты по мониторингу".
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Версия = СтруктураПараметровУчетнойЗаписи.Версия;

	Если Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5 
		ИЛИ Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7 Тогда
		Возврат АвтоГРАФ5_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	Иначе
		Возврат АвтоГРАФ4_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

// Функция загружает текущее местоположение из системы АвтоГРАФ в регистр сведений "Текущее местоположение ТС по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Версия = СтруктураПараметровУчетнойЗаписи.Версия;

	Если Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5 
		ИЛИ Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7 Тогда
		Возврат АвтоГРАФ5_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	Иначе
		Возврат АвтоГРАФ4_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы АвтоГРАФ
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура АвтоГРАФ_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Версия = СтруктураПараметровУчетнойЗаписи.Версия;

	Если Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5 
		ИЛИ Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7 Тогда
		АвтоГРАФ5_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	Иначе
		АвтоГРАФ4_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АВТОГРАФ4

// Процедура выполняет получение таблицы ТС из системы АвтоГРАФ 4.
//
// Параметры
//  ТаблицаТС - Колонки - Наименование и ГаражныйНомер
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
//
Процедура АвтоГРАФ4_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки)
	
	ГруппыТС = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "AllGroups",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Группа Из ГруппыТС Цикл 
		Если Группа.Свойство("GroupIndex") Тогда 
			ПараметрыЗапроса = Новый Массив;
			ПараметрыЗапроса.Добавить(Группа.GroupIndex);
			ДанныеТСГруппы = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "AllCars", ПараметрыЗапроса, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
				Возврат;
			КонецЕсли;
			
			уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьОбработкуРезультатаЗапроса_СписокТС(ТаблицаТС, ДанныеТСГруппы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция загружает пробег и расход ГСМ из системы АвтоГРАФ 4 в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ4_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.АвтоГРАФ4";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ИнтервалДетализации = ПараметрыПроцедуры.ПериодичностьХранения;
	
	ТаблицаСобытий = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСобытий.Очистить();
	
	СтрокаОписанияОшибки = "";
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл 
		
		ДатаНачало = ДатаНачала;
		Пока Истина Цикл 
			ДатаКонец = ДатаНачало + ИнтервалДетализации*60 - 1;
			Если ДатаКонец > ДатаОкончания Тогда 
				ДатаКонец = ДатаОкончания;
			КонецЕсли;
			
			Если Не АвтоГРАФ4_ПолучитьДанныеПоМестоположениюТС(СтруктураПараметровУчетнойЗаписи, ТекТС, ДатаНачало, ДатаКонец, ТаблицаСобытий, СтрокаОписанияОшибки) Тогда 
				ТекстОшибки = НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='(For details, see event log)';ru='(Подробности см. в журнале регистрации)'");
				ЗаписьЖурналаРегистрации("Мониторинг. АвтоГРАФ 4",
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.ОбщиеМодули.уатМониторинг,
				                         ,
				                         НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='Error description:';ru='Описание ошибки:'")
				                         + Символы.ПС + СтрокаОписанияОшибки);
				Возврат Ложь;
			КонецЕсли;
			
			Если ДатаКонец = ДатаОкончания Тогда 
				Прервать;
			КонецЕсли;
			ДатаНачало = ДатаКонец + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 4",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТаблицаСобытий);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 4",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция АвтоГРАФ4_ПолучитьДанныеПоМестоположениюТС(СтруктураПараметровУчетнойЗаписи, Знач ТекТС, Знач ДатаС, Знач ДатаПо, ТаблицаСобытий, ТекстОшибки)
	
	// Выполнить расчет.
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(ТекТС.ГрФайл);
	ПараметрыЗапроса.Добавить(ТекТС.Идентификатор);
	ПараметрыЗапроса.Добавить(Формат(ДатаС, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить(Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить("GSM");
	ПараметрыЗапроса.Добавить("0");
	
	РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "WaitForComputing", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЧислоИнтервалов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripsNum",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Не ТипЗнч(ЧислоИнтервалов) = Тип("Структура") Или Не ЧислоИнтервалов.Свойство("TripsNum") Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ЧислоИнтервалов.TripsNum = "0" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("1");
	
	ЧислоИнтервалов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripIndex", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НовЗаписьСобытий = ТаблицаСобытий.Добавить();
	НовЗаписьСобытий.Период = ДатаПо;
	НовЗаписьСобытий.ТС     = ТекТС.Ссылка;
	
	// Пробег.
	
	ПробегНаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripDistance",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ПробегНаИнтервале) = Тип("Структура") И ПробегНаИнтервале.Свойство("TripDistance") Тогда 
		Попытка
			НовЗаписьСобытий.Пробег = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ПробегНаИнтервале.TripDistance)/1000, 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripDistance';ru='Ошибка разбора поля TripDistance'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripDistance response structure';ru='Неверная структура ответа TripDistance'");
		Возврат Ложь;
	КонецЕсли;
	
	// Моточасы.
	
	МоточасыНаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripMotor1Hours",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(МоточасыНаИнтервале) = Тип("Структура") И МоточасыНаИнтервале.Свойство("TripMotor1Hours") Тогда 
		Попытка
			НовЗаписьСобытий.ВремяРаботыДвигателя = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(МоточасыНаИнтервале.TripMotor1Hours), 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripMotor1Hours';ru='Ошибка разбора поля TripMotor1Hours'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripMotor1Hours response structure';ru='Неверная структура ответа TripMotor1Hours'");
		Возврат Ложь;
	КонецЕсли;
	
	// Расход топлива.
	
	ОбщийРасход = 0;
	
	РасходНаИнтервале_дв1 = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripMotor1Fuel",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(РасходНаИнтервале_дв1) = Тип("Структура") И РасходНаИнтервале_дв1.Свойство("TripMotor1Fuel") Тогда 
		Попытка
			// АвтоГРАФ может присылать числа вида "-5.6843418860808015E-14".
			Если Лев(РасходНаИнтервале_дв1.TripMotor1Fuel,1) = "-" Тогда
				ОбщийРасход = 0;
			Иначе
				ОбщийРасход = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(РасходНаИнтервале_дв1.TripMotor1Fuel), 3);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripMotor1Fuel';ru='Ошибка разбора поля TripMotor1Fuel'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripMotor1Fuel response structure';ru='Неверная структура ответа TripMotor1Fuel'");
		Возврат Ложь;
	КонецЕсли;
	
	РасходНаИнтервале_дв2 = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripMotor2Fuel",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(РасходНаИнтервале_дв2) = Тип("Структура") И РасходНаИнтервале_дв2.Свойство("TripMotor2Fuel") Тогда 
		Попытка
			// АвтоГРАФ может присылать числа вида "-5.6843418860808015E-14".
			Если Лев(РасходНаИнтервале_дв2.TripMotor2Fuel,1) = "-" Тогда
				ОбщийРасход = ОбщийРасход + 0;
			Иначе
				ОбщийРасход = ОбщийРасход + Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(РасходНаИнтервале_дв2.TripMotor2Fuel), 3);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripMotor2Fuel';ru='Ошибка разбора поля TripMotor2Fuel'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripMotor2Fuel response structure';ru='Неверная структура ответа TripMotor2Fuel'");
		Возврат Ложь;
	КонецЕсли;
	
	НовЗаписьСобытий.РасходТоплива = ОбщийРасход; 
	
	// Уровень топлива.
	
	УровеньТопливаНаКонецИнтервала = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripTank1EndLevel",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(УровеньТопливаНаКонецИнтервала) = Тип("Структура") И УровеньТопливаНаКонецИнтервала.Свойство("TripTank1EndLevel") Тогда 
		Попытка
			НовЗаписьСобытий.УровеньТоплива = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(УровеньТопливаНаКонецИнтервала.TripTank1EndLevel), 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripTank1EndLevel';ru='Ошибка разбора поля TripTank1EndLevel'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripTank1EndLevel response structure';ru='Неверная структура ответа TripTank1EndLevel'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовЗаписьСобытий.Пробег)
			И Не ЗначениеЗаполнено(НовЗаписьСобытий.ВремяРаботыДвигателя)
			И Не ЗначениеЗаполнено(НовЗаписьСобытий.РасходТоплива)
			И Не ЗначениеЗаполнено(НовЗаписьСобытий.УровеньТоплива) Тогда 
		ТаблицаСобытий.Удалить(НовЗаписьСобытий);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы АвтоГРАФ 4 в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ4_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.АвтоГРАФ4";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ТаблицаСобытий = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСобытий.Очистить();
	
	СтрокаОписанияОшибки = "";
	
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		 Если Не АвтоГРАФ4_ПолучитьДопСведенияПоТС(СтруктураПараметровУчетнойЗаписи, ТекТС, ДатаНачала, ДатаОкончания, ТаблицаСобытий, СтрокаОписанияОшибки) Тогда 
			ТекстОшибки = НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='(For details, see event log)';ru='(Подробности см. в журнале регистрации)'");
			ЗаписьЖурналаРегистрации("Мониторинг. АвтоГРАФ 4",
			                         УровеньЖурналаРегистрации.Ошибка,
			                         Метаданные.ОбщиеМодули.уатМониторинг,
			                         ,
			                         НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='Error description: ';ru='Описание ошибки: '") 
			                         + Символы.ПС + СтрокаОписанияОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 4",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТаблицаСобытий);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 4",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция АвтоГРАФ4_ПолучитьДопСведенияПоТС(СтруктураПараметровУчетнойЗаписи, Знач ТекТС, Знач ДатаС, Знач ДатаПо, ТаблицаСобытий, ТекстОшибки)
	
	// Выполнить расчет
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(ТекТС.ГрФайл);
	ПараметрыЗапроса.Добавить(ТекТС.Идентификатор);
	ПараметрыЗапроса.Добавить(Формат(ДатаС, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить(Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить("GSM");
	ПараметрыЗапроса.Добавить("0");
	
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "WaitForComputing", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЧислоИнтервалов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripsNum",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Не ТипЗнч(ЧислоИнтервалов) = Тип("Структура") Или Не ЧислоИнтервалов.Свойство("TripsNum") Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ЧислоИнтервалов.TripsNum = "0" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("1");
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripIndex", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("tank");
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEntriesListTypeName", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("num1");
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEntriesListKindName", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Заправки и сливы
	
	КолЗаписей = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEntriesNum",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если КолЗаписей.TripEntriesNum = "0" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("1");
	ЗаправкиСливыНаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "AllEntries", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ЗаправкиСливыНаИнтервале) = Тип("Структура") 
		И ЗаправкиСливыНаИнтервале.Свойство("EntryTank1StartLevel") 
		И ЗаправкиСливыНаИнтервале.Свойство("EntryTank1EndLevel") 
		И ЗаправкиСливыНаИнтервале.Свойство("EntryEndRealTime") Тогда 
			Попытка
				знНачальныйУровень = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ЗаправкиСливыНаИнтервале.EntryTank1StartLevel);
			Исключение
				ТекстОшибки = НСтр("en='Error while parsing field EntryTank1StartLevel';ru='Ошибка разбора поля EntryTank1StartLevel'");
				Возврат Ложь;
			КонецПопытки;
			Попытка
				знКонечныйУровень = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ЗаправкиСливыНаИнтервале.EntryTank1EndLevel);
			Исключение
				ТекстОшибки = НСтр("en='Error while parsing field EntryTank1EndLevel';ru='Ошибка разбора поля EntryTank1EndLevel'");
				Возврат Ложь;
			КонецПопытки;
			
			Если знНачальныйУровень > знКонечныйУровень Тогда 
				// слив
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.ТС         = ТекТС.Ссылка;
				НоваяСтрока.Период     = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьВремя(ЗаправкиСливыНаИнтервале.EntryEndRealTime, ТекстОшибки);
				НоваяСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.СливГСМ;
				НоваяСтрока.Значение   = Окр(знНачальныйУровень-знКонечныйУровень, 3);
				
			Иначе 
				// заправка
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.ТС         = ТекТС.Ссылка;
				НоваяСтрока.Период     = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьВремя(ЗаправкиСливыНаИнтервале.EntryEndRealTime, ТекстОшибки);
				НоваяСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.ЗаправкаГСМ;
				НоваяСтрока.Значение   = Окр(знКонечныйУровень-знНачальныйУровень, 3);
			КонецЕсли;
			
			Если Не ТекстОшибки = "" Тогда 
				ТекстОшибки = НСтр("en='Error while parsing field EntryEndRealTime';ru='Ошибка разбора поля EntryEndRealTime'") + Символы.ПС + ТекстОшибки;
				Возврат Ложь;
			КонецЕсли;
			
	ИначеЕсли ТипЗнч(ЗаправкиСливыНаИнтервале) = Тип("Массив") Тогда 
		Для Каждого ТекСобытие Из ЗаправкиСливыНаИнтервале Цикл 
			Если ТипЗнч(ТекСобытие) = Тип("Структура") 
				И ТекСобытие.Свойство("EntryTank1StartLevel") 
				И ТекСобытие.Свойство("EntryTank1EndLevel")
				И ТекСобытие.Свойство("EntryEndRealTime") Тогда
					Попытка
						знНачальныйУровень = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ТекСобытие.EntryTank1StartLevel);
					Исключение
						ТекстОшибки = НСтр("en='Error while parsing field EntryTank1StartLevel';ru='Ошибка разбора поля EntryTank1StartLevel'");
						Возврат Ложь;
					КонецПопытки;
					Попытка
						знКонечныйУровень = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ТекСобытие.EntryTank1EndLevel);
					Исключение
						ТекстОшибки = НСтр("en='Error while parsing field EntryTank1EndLevel';ru='Ошибка разбора поля EntryTank1EndLevel'");
						Возврат Ложь;
					КонецПопытки;
					
					Если знНачальныйУровень > знКонечныйУровень Тогда 
						// слив
						НоваяСтрока = ТаблицаСобытий.Добавить();
						НоваяСтрока.ТС         = ТекТС.Ссылка;
						НоваяСтрока.Период     = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьВремя(ТекСобытие.EntryEndRealTime, ТекстОшибки);
						НоваяСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.СливГСМ;
						НоваяСтрока.Значение   = Окр(знНачальныйУровень-знКонечныйУровень, 3);
						
					Иначе 
						// заправка
						НоваяСтрока = ТаблицаСобытий.Добавить();
						НоваяСтрока.ТС         = ТекТС.Ссылка;
						НоваяСтрока.Период     = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьВремя(ТекСобытие.EntryEndRealTime, ТекстОшибки);
						НоваяСтрока.ТипСобытия = Перечисления.уатТипСобытияGPS.ЗаправкаГСМ;
						НоваяСтрока.Значение   = Окр(знКонечныйУровень-знНачальныйУровень, 3);
					КонецЕсли;
					
					Если Не ТекстОшибки = "" Тогда 
						ТекстОшибки = НСтр("en='Error while parsing field EntryEndRealTime';ru='Ошибка разбора поля EntryEndRealTime'") + Символы.ПС + ТекстОшибки;
						Возврат Ложь;
					КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		ТекстОшибки = НСтр("en='Неверная структура ответа AllEntries';ru='Неверная структура ответа AllEntries'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает координаты из системы АвтоГРАФ 4 в регистр сведений "Координаты по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ4_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.АвтоГРАФ4";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ИнтервалХраненияКоординат = ПараметрыПроцедуры.ИнтервалХраненияКоординат;
	
	ТаблицаКоординат = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаКоординат.Очистить();

	СтрокаОписанияОшибки = "";
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		ДатаНачало = ДатаНачала;
		Пока Истина Цикл 
			ДатаКонец = ДатаНачало + ИнтервалХраненияКоординат;
			Если ДатаКонец > ДатаОкончания Тогда 
				ДатаКонец = ДатаОкончания;
			КонецЕсли;
			
			Если НЕ АвтоГРАФ4_ПолучитьДанныеПоКоординатамТС(СтруктураПараметровУчетнойЗаписи, ТекТС, ДатаНачало, ДатаКонец, ТаблицаКоординат, СтрокаОписанияОшибки) Тогда 
				ТекстОшибки = НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='(For details, see event log)';ru='(Подробности см. в журнале регистрации)'");
				ЗаписьЖурналаРегистрации("Мониторинг. АвтоГРАФ 4",
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.ОбщиеМодули.уатМониторинг,
				                         ,
				                         НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='Error description:';ru='Описание ошибки:'")
				                         + Символы.ПС + СтрокаОписанияОшибки);
				Возврат Ложь;
			КонецЕсли;
			
			Если ДатаКонец = ДатаОкончания Тогда 
				Прервать;
			КонецЕсли;
			ДатаНачало = ДатаКонец;
		КонецЦикла;
	КонецЦикла;
		
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатКоординатыПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 4",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТаблицаКоординат);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 4",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция АвтоГРАФ4_ПолучитьДанныеПоКоординатамТС(СтруктураПараметровУчетнойЗаписи, Знач ТекТС, Знач ДатаС, Знач ДатаПо, ТаблицаКоординат, ТекстОшибки)
	

	// Выполнить расчет.
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(ТекТС.ГрФайл);
	ПараметрыЗапроса.Добавить(ТекТС.Идентификатор);
	ПараметрыЗапроса.Добавить(Формат(ДатаС, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить(Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить("GSM");
	ПараметрыЗапроса.Добавить("0");
	
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "WaitForComputing", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЧислоИнтервалов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripsNum",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Не ТипЗнч(ЧислоИнтервалов) = Тип("Структура") Или Не ЧислоИнтервалов.Свойство("TripsNum") Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ЧислоИнтервалов.TripsNum = "0" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("1");
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripIndex", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НовЗапись = ТаблицаКоординат.Добавить();
	НовЗапись.ТС     = ТекТС.Ссылка;
	НовЗапись.Период = ДатаПо;
	
	// Координаты.
	ШиротаТочкиИнтервала = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEndLatitude",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ШиротаТочкиИнтервала) = Тип("Структура") И ШиротаТочкиИнтервала.Свойство("TripEndLatitude") Тогда 
		Попытка
			текШирота = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ШиротаТочкиИнтервала.TripEndLatitude);
			Если текШирота > 90 Или текШирота < -90 Тогда 
				НовЗапись.Широта = 0;
			Иначе 
				НовЗапись.Широта = текШирота;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripEndLatitude';ru='Ошибка разбора поля TripEndLatitude'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripEndLatitude response structure';ru='Неверная структура ответа TripEndLatitude'");
		Возврат Ложь;
	КонецЕсли;
	
	ДолготаТочкиИнтервала = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEndLongitude",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ДолготаТочкиИнтервала) = Тип("Структура") И ДолготаТочкиИнтервала.Свойство("TripEndLongitude") Тогда 
		Попытка
			текДолгота = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ДолготаТочкиИнтервала.TripEndLongitude);
			Если текДолгота > 180 Или текДолгота < -180 Тогда 
				НовЗапись.Долгота = 0;
			Иначе 
				НовЗапись.Долгота = текДолгота;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripEndLongitude';ru='Ошибка разбора поля TripEndLongitude'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripEndLongitude response structure';ru='Неверная структура ответа TripEndLongitude'");
		Возврат Ложь;
	КонецЕсли;
	
	// Скорость.
	СкоростьНаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripAverSpeed",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(СкоростьНаИнтервале) = Тип("Структура") И СкоростьНаИнтервале.Свойство("TripAverSpeed") Тогда 
		Попытка
			НовЗапись.Скорость = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(СкоростьНаИнтервале.TripAverSpeed);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripAverSpeed';ru='Ошибка разбора поля TripAverSpeed'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripAverSpeed response structure';ru='Неверная структура ответа TripAverSpeed'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовЗапись.Широта)
			И Не ЗначениеЗаполнено(НовЗапись.Долгота)
			И Не ЗначениеЗаполнено(НовЗапись.Скорость) Тогда 
		ТаблицаКоординат.Удалить(НовЗапись);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает текущее местоположение из системы АвтоГРАФ в регистр сведений "Текущее местоположение ТС по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ4_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.АвтоГРАФ4";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ИнтервалХраненияКоординат = ПараметрыПроцедуры.ИнтервалХраненияКоординат;
	
	ТаблицаКоординат = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаКоординат.Очистить();
	
	СтрокаОписанияОшибки = "";
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		ДатаНачало = ДатаНачала;
		ДатаКонец  = ДатаОкончания;
		
		Если Не АвтоГРАФ4_ЗагрузитьТекущееМестоположениеТС(СтруктураПараметровУчетнойЗаписи, ТекТС, ДатаНачало, ДатаКонец, ТаблицаКоординат, СтрокаОписанияОшибки) Тогда 
			ТекстОшибки = НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='(For details, see event log)';ru='(Подробности см. в журнале регистрации)'");
			ЗаписьЖурналаРегистрации("Мониторинг. АвтоГРАФ 4",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='Error description:';ru='Описание ошибки:'")
			+ Символы.ПС + СтрокаОписанияОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаКоординат Цикл
		
		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекСтрока.ТС);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ТекСтрока);
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Продолжить;
		КонецПопытки;

	КонецЦикла;
	
КонецФункции

Функция АвтоГРАФ4_ЗагрузитьТекущееМестоположениеТС(СтруктураПараметровУчетнойЗаписи, Знач ТекТС, Знач ДатаС, Знач ДатаПо, ТаблицаКоординат, ТекстОшибки)
	

	// Выполнить расчет.
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(ТекТС.ГрФайл);
	ПараметрыЗапроса.Добавить(ТекТС.Идентификатор);
	ПараметрыЗапроса.Добавить(Формат(ДатаС, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить(Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить("GSM");
	ПараметрыЗапроса.Добавить("0");
	
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "WaitForComputing", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЧислоИнтервалов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripsNum",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Не ТипЗнч(ЧислоИнтервалов) = Тип("Структура") Или Не ЧислоИнтервалов.Свойство("TripsNum") Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ЧислоИнтервалов.TripsNum = "0" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("1");
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripIndex", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НовЗапись = ТаблицаКоординат.Добавить();
	НовЗапись.ТС                    = ТекТС.Ссылка;
	НовЗапись.Дата                  = ДатаПо;
	НовЗапись.УведомлениеОтправлено = Ложь;
	
	// Координаты.
	ШиротаТочкиИнтервала = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEndLatitude",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ШиротаТочкиИнтервала) = Тип("Структура") И ШиротаТочкиИнтервала.Свойство("TripEndLatitude") Тогда 
		Попытка
			текШирота = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ШиротаТочкиИнтервала.TripEndLatitude);
			Если текШирота > 90 Или текШирота < -90 Тогда 
				НовЗапись.Широта = 0;
			Иначе 
				НовЗапись.Широта = текШирота;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripEndLatitude';ru='Ошибка разбора поля TripEndLatitude'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripEndLatitude response structure';ru='Неверная структура ответа TripEndLatitude'");
		Возврат Ложь;
	КонецЕсли;
	
	ДолготаТочкиИнтервала = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripEndLongitude",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ДолготаТочкиИнтервала) = Тип("Структура") И ДолготаТочкиИнтервала.Свойство("TripEndLongitude") Тогда 
		Попытка
			текДолгота = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ДолготаТочкиИнтервала.TripEndLongitude);
			Если текДолгота > 180 Или текДолгота < -180 Тогда 
				НовЗапись.Долгота = 0;
			Иначе 
				НовЗапись.Долгота = текДолгота;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripEndLongitude';ru='Ошибка разбора поля TripEndLongitude'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripEndLongitude response structure';ru='Неверная структура ответа TripEndLongitude'");
		Возврат Ложь;
	КонецЕсли;
	
	// Скорость.
	СкоростьНаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripAverSpeed",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(СкоростьНаИнтервале) = Тип("Структура") И СкоростьНаИнтервале.Свойство("TripAverSpeed") Тогда 
		Попытка
			НовЗапись.Скорость = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(СкоростьНаИнтервале.TripAverSpeed);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripAverSpeed';ru='Ошибка разбора поля TripAverSpeed'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripAverSpeed response structure';ru='Неверная структура ответа TripAverSpeed'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовЗапись.Широта)
			И Не ЗначениеЗаполнено(НовЗапись.Долгота)
			И Не ЗначениеЗаполнено(НовЗапись.Скорость) Тогда 
		ТаблицаКоординат.Удалить(НовЗапись);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы АвтоГРАФ 4
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура АвтоГРАФ4_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.Omnicomm.АвтоГРАФ4";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ТекТаблицаДанных = Новый ТаблицаЗначений;
	ТекТаблицаДанных.Колонки.Добавить("Период");
	ТекТаблицаДанных.Колонки.Добавить("ТС");
	ТекТаблицаДанных.Колонки.Добавить("Пробег");
	ТекТаблицаДанных.Колонки.Добавить("ВремяРаботыДвигателя");
	ТекТаблицаДанных.Колонки.Добавить("РасходТоплива");
	ТекТаблицаДанных.Колонки.Добавить("УровеньТоплива");
	ТекТаблицаДанных.Колонки.Добавить("ЗначениеОдометра");
	ТекТаблицаДанных.Колонки.Добавить("ЗначениеОдометраНачало");
	ТекТаблицаДанных.Колонки.Добавить("УровеньТопливаНачало");

	СтрокаОписанияОшибки = "";
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл 
		
		ДатаНачало = ДатаНачала;
		ДатаКонец  = ДатаОкончания;

		Если НЕ АвтоГРАФ4_ПолучитьДанныеПоТСДляПЛ(СтруктураПараметровУчетнойЗаписи, ТекТС, ДатаНачало, ДатаКонец, ТекТаблицаДанных, СтрокаОписанияОшибки) Тогда 
			ТекстОшибки = НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='(For details, see event log)';ru='(Подробности см. в журнале регистрации)'");
			ЗаписьЖурналаРегистрации("Мониторинг. АвтоГРАФ 4",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			НСтр("en='Error while getting vehicle data';ru='Ошибка при получении данных по ТС'") + " <" + ТекТС.Ссылка + ">. " + НСтр("en='Error description:';ru='Описание ошибки:'")
			+ Символы.ПС + СтрокаОписанияОшибки);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;

	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТекТаблицаДанных Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТС                        = ТекСтрока.ТС;
		НоваяСтрока.Пробег                    = ТекСтрока.Пробег;
		НоваяСтрока.ВремяРаботыДвигателя      = ТекСтрока.ВремяРаботыДвигателя;
		НоваяСтрока.РасходТоплива             = ТекСтрока.РасходТоплива;
		НоваяСтрока.НачальныйУровеньТоплива   = ТекСтрока.УровеньТоплива;
		НоваяСтрока.КонечныйУровеньТоплива    = ТекСтрока.УровеньТоплива;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АвтоГРАФ4_ПолучитьДанныеПоТСДляПЛ(СтруктураПараметровУчетнойЗаписи, Знач ТекТС, Знач ДатаС, Знач ДатаПо, ТаблицаДанных, ТекстОшибки)
	
	// Выполнить расчет
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(ТекТС.ГрФайл);
	ПараметрыЗапроса.Добавить(ТекТС.Идентификатор);
	ПараметрыЗапроса.Добавить(Формат(ДатаС, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить(Формат(ДатаПо, "ДФ='dd.MM.yyyy HH:mm:ss'"));
	ПараметрыЗапроса.Добавить("GSM");
	ПараметрыЗапроса.Добавить("0");
	
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "WaitForComputing", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЧислоИнтервалов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripsNum",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Не ТипЗнч(ЧислоИнтервалов) = Тип("Структура") Или Не ЧислоИнтервалов.Свойство("TripsNum") Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ЧислоИнтервалов.TripsNum = "0" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	ПараметрыЗапроса.Добавить("1");
	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripIndex", ПараметрыЗапроса, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НовСтрока = ТаблицаДанных.Добавить();
	НовСтрока.ТС = ТекТС.Ссылка;

	// Пробег
	
	ПробегНаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripDistance",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ПробегНаИнтервале) = Тип("Структура") И ПробегНаИнтервале.Свойство("TripDistance") Тогда 
		Попытка
			НовСтрока.Пробег = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ПробегНаИнтервале.TripDistance)/1000, 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripDistance';ru='Ошибка разбора поля TripDistance'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripDistance response structure';ru='Неверная структура ответа TripDistance'");
		Возврат Ложь;
	КонецЕсли;
	
	// Время работы двигателя
	
	ВремяРаботыДв1НаИнтервале = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripMotor1Hours",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ВремяРаботыДв1НаИнтервале) = Тип("Структура") И ВремяРаботыДв1НаИнтервале.Свойство("TripMotor1Hours") Тогда 
		Попытка
			НовСтрока.ВремяРаботыДвигателя  = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(ВремяРаботыДв1НаИнтервале.TripMotor1Hours), 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripMotor1Hours';ru='Ошибка разбора поля TripMotor1Hours'");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ТекстОшибки = НСтр("en='Invalid TripMotor1Hours response structure';ru='Неверная структура ответа TripMotor1Hours'");
		Возврат Ложь;
	КонецЕсли;
	
	// Расход топлива
	
	ОбщийРасход = 0;
	
	РасходНаИнтервале_дв1 = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripMotor1Fuel",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(РасходНаИнтервале_дв1) = Тип("Структура") И РасходНаИнтервале_дв1.Свойство("TripMotor1Fuel") Тогда 
		Попытка
			ОбщийРасход = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(РасходНаИнтервале_дв1.TripMotor1Fuel), 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripMotor1Fuel';ru='Ошибка разбора поля TripMotor1Fuel'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripMotor1Fuel response structure';ru='Неверная структура ответа TripMotor1Fuel'");
		Возврат Ложь;
	КонецЕсли;
	
	РасходНаИнтервале_дв2 = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripMotor2Fuel",, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(РасходНаИнтервале_дв2) = Тип("Структура") И РасходНаИнтервале_дв2.Свойство("TripMotor2Fuel") Тогда 
		Попытка
			ОбщийРасход = ОбщийРасход + Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(РасходНаИнтервале_дв2.TripMotor2Fuel), 3);
		Исключение
			ТекстОшибки = НСтр("en='Error while parsing field TripMotor2Fuel';ru='Ошибка разбора поля TripMotor2Fuel'");
			Возврат Ложь;
		КонецПопытки;
	Иначе 
		ТекстОшибки = НСтр("en='Invalid TripMotor2Fuel response structure';ru='Неверная структура ответа TripMotor2Fuel'");
		Возврат Ложь;
	КонецЕсли;
	
	НовСтрока.РасходТоплива = ОбщийРасход;
	
	// Уровень топлива.
	УровеньТопливаНаКонецИнтервала = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "TripTank1EndLevel",, ТекстОшибки);
	Если ТекстОшибки = "" Тогда 
		Если ТипЗнч(УровеньТопливаНаКонецИнтервала) = Тип("Структура") И УровеньТопливаНаКонецИнтервала.Свойство("TripTank1EndLevel") Тогда 
			Попытка
				НовСтрока.УровеньТоплива = Окр(уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ4_ДесериализоватьЧисло(УровеньТопливаНаКонецИнтервала.TripTank1EndLevel), 3);
			Исключение
				ТекстОшибки = НСтр("en='Error while parsing field TripTank1EndLevel';ru='Ошибка разбора поля TripTank1EndLevel'");
				Возврат Ложь;
			КонецПопытки;
		Иначе 
			ТекстОшибки = НСтр("en='Invalid TripTank1EndLevel response structure';ru='Неверная структура ответа TripTank1EndLevel'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции


#КонецОбласти

#Область АВТОГРАФ5

// Функция производит создание нового токена доступа к ресурсам и услугам сервиса.
//
Функция АвтоГРАФ5_СозданиеТокена(СтруктураПараметровУчетнойЗаписи) Экспорт 
	
	Токен       = "";
	ТекстОшибки = "";
	ДанныеЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "login",, ТекстОшибки);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки)
		И ТипЗнч(ДанныеЗапроса) = Тип("Строка") Тогда
		Возврат ДанныеЗапроса;
	Иначе
		 Возврат Токен;
	КонецЕсли;
	
КонецФункции

// Функция производит получение списка доступных сервису схем.
//
Функция АвтоГРАФ5_ПолучитьСписокРесурсов(СтруктураПараметровУчетнойЗаписи, ТекстОшибки = "") Экспорт 
	
	СписокРесурсов = Новый СписокЗначений;
	
	ДанныеЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "EnumSchemas",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат СписокРесурсов;
	КонецЕсли;
	
	СписокРесурсов = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуПолученныхДанныхРесурсы(ДанныеЗапроса);
	
	Возврат СписокРесурсов;
	
КонецФункции

// Процедура выполняет получение таблицы ТС из системы АвтоГРАФ 5.
//
// Параметры
//  ТаблицаТС - Колонки - Наименование и ГаражныйНомер;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка.
//
Процедура АвтоГРАФ5_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки)
	
	ДанныеЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "EnumDevices",, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат;
	КонецЕсли;

	уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуРезультатаЗапроса_СписокТС(ТаблицаТС, ДанныеЗапроса);
	
КонецПроцедуры

// Функция загружает пробег и расход ГСМ из системы АвтоГРАФ 5 в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ5_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.АвтоГРАФ5";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
		Если МассивТекТС = Неопределено Тогда
			МассивТекТС = Новый Массив();
		КонецЕсли;
		МассивТекТС.Добавить(ТекТС);
		СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекстОшибки  = "";
		
		ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
		
		РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"GetTrips", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса, МассивТС",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса, ТекТС.ТС));
		
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);

	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		
		ВремяРаботыДвигателя = ТекСтрока.ВремяРаботыДвигателя;
		Попытка
			Час_ = Число(Лев(ВремяРаботыДвигателя, 2));
			Минута_ = Число(Сред(ВремяРаботыДвигателя, 4, 2));
			Секунда_ = Число(Прав(ВремяРаботыДвигателя, 2));
		Исключение
			Попытка
				Час_ = Число(Лев(ВремяРаботыДвигателя, 1));
				ВремяРаботыДвигателя = "0" + ВремяРаботыДвигателя;
				Минута_ = Число(Сред(ВремяРаботыДвигателя, 4, 2));
				Секунда_ = Число(Прав(ВремяРаботыДвигателя, 2));
			Исключение
				Продолжить;
			КонецПопытки
		КонецПопытки;
		Час_ = Час_ + Минута_/60 + Секунда_/(60*60);
		
		ВремяРаботыДвигателя = Окр(Час_, 3);
		
		Если ТекСтрока.Пробег = 0 
			И ТекСтрока.ЗначениеОдометра = 0
			И ТекСтрока.РасходТоплива = 0 
			И ТекСтрока.УровеньТоплива = 0 
			И ВремяРаботыДвигателя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		НоваяСтрока.Период = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ПолучитьДату(ТекСтрока.Период, ТекЧасовойПояс);
		НоваяСтрока.ТС                   = ТекСтрока.ТС.Ссылка;
		НоваяСтрока.Пробег               = ТекСтрока.Пробег;
		НоваяСтрока.ЗначениеОдометра     = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя = ВремяРаботыДвигателя;
		НоваяСтрока.РасходТоплива        = ТекСтрока.РасходТоплива;
		НоваяСтрока.УровеньТоплива       = ТекСтрока.УровеньТоплива;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 5",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 5",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ из системы АвтоГРАФ 5 в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ5_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.АвтоГРАФ5";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
		Если МассивТекТС = Неопределено Тогда
			МассивТекТС = Новый Массив();
		КонецЕсли;
		МассивТекТС.Добавить(ТекТС);
		СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекстОшибки  = "";
		
		ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
		
		РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"GetTrips", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса, МассивТС",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса, ТекТС.ТС));
		
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуРезультатаЗапроса_События(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);

	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;

		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		Период = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ПолучитьДату(ТекСтрока.Период, ТекЧасовойПояс);

		ПовторСтроки = ТабДляРегистра.НайтиСтроки(Новый Структура("ТС, Период, ТипСобытия",
		ТС.Ссылка, Период, ТекСтрока.ТипСобытия));
		Если ПовторСтроки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ТС = ТС.Ссылка;
		Если НоваяСтрока.Значение < 0 Тогда
			НоваяСтрока.Значение = - НоваяСтрока.Значение;
		КонецЕсли;
		НоваяСтрока.Период = Период;
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 5",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 5",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Функция загружает координаты из системы АвтоГРАФ 5 в регистр сведений "Координаты по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ5_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.АвтоГРАФ5";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
		Если МассивТекТС = Неопределено Тогда
			МассивТекТС = Новый Массив();
		КонецЕсли;
		МассивТекТС.Добавить(ТекТС);
		СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекстОшибки  = "";
		
		ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
		
		РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"GetTrack", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса, МассивТС",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса, ТекТС.ТС));
		
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуРезультатаЗапроса_Координаты(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);

	// Создадим таблицу по структуре регистра
	ТабДляРегистра = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
	ТабДляРегистра.Очистить();
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;
		
		НоваяСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ТС = ТС.Ссылка;		
		НоваяСтрока.Период = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ПолучитьДату(ТекСтрока.Период, ТекЧасовойПояс);
		
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатКоординатыПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 5",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. АвтоГРАФ 5",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает текущее местоположение из системы АвтоГРАФ в регистр сведений "Текущее местоположение ТС по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция АвтоГРАФ5_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.АвтоГРАФ5";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
	
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
		Если МассивТекТС = Неопределено Тогда
			МассивТекТС = Новый Массив();
		КонецЕсли;
		МассивТекТС.Добавить(ТекТС);
		СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекстОшибки  = "";
		
		ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
		
		РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"GetTrack", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса, МассивТС",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса, ТекТС.ТС));
		
	КонецЦикла;

	ТаблицаДанных = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуРезультатаЗапроса_Координаты(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		ТС = ТекСтрока.ТС;
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТС.Ссылка);
		НаборЗаписей.Прочитать();
		
		ТекСтрока.ТС = ТС.Ссылка;
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ТекСтрока);
			НаборЗаписей[0].Дата = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ПолучитьДату(ТекСтрока.Период, ТекЧасовойПояс);
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
			НоваяЗапись.Дата = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ПолучитьДату(ТекСтрока.Период, ТекЧасовойПояс);
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Продолжить;
		КонецПопытки;

	КонецЦикла;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы АвтоГРАФ 5
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура АвтоГРАФ5_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.АвтоГРАФ5";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	ЧасовойПоясПоПодразделению = ПараметрыПроцедуры.ЧасовойПоясПоПодразделению;
	ЧасовойПояс                = ПараметрыПроцедуры.ЧасовойПояс;
	
	СоответсвиеЧасовыхПоясов = Новый Соответствие;
	Для Каждого ТекТС Из ПараметрыПроцедуры.МассивТС Цикл
		Если ЧасовойПоясПоПодразделению Тогда 
			ТекЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекТС.Подразделение,
			ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm);
		Иначе 
			ТекЧасовойПояс = ЧасовойПояс;
		КонецЕсли;

		МассивТекТС = СоответсвиеЧасовыхПоясов.Получить(ТекЧасовойПояс);
		Если МассивТекТС = Неопределено Тогда
			МассивТекТС = Новый Массив();
		КонецЕсли;
		МассивТекТС.Добавить(ТекТС);
		СоответсвиеЧасовыхПоясов.Вставить(ТекЧасовойПояс, МассивТекТС);
	КонецЦикла;
	
	ТекМассивТС = Новый Массив();
	Для Каждого ТекСтрока Из СоответсвиеЧасовыхПоясов Цикл
		ТекМассивТС.Добавить(Новый Структура("ТС, ЧасовойПояс", ТекСтрока.Значение, ТекСтрока.Ключ));
	КонецЦикла;
	
	МассивРезультатовЗапросов = Новый Массив();
	Для Каждого ТекТС Из ТекМассивТС Цикл 
		
		ТекстОшибки  = "";
		
		ТекЧасовойПояс          = ТекТС.ЧасовойПояс;
		ТекКорректировкаВремени = ТекЧасовойПояс * 3600;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("ДатаНачала",    ДатаНачала    - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания - ТекКорректировкаВремени);
		ПараметрыЗапроса.Вставить("МассивТС",      ТекТС.ТС);
		
		РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"GetTrips", ПараметрыЗапроса, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивРезультатовЗапросов.Добавить(
		Новый Структура("ДатаНачала,ДатаОкончания,ЧасовойПояс,РезультатЗапроса, МассивТС",
		ПараметрыЗапроса.ДатаНачала, ПараметрыЗапроса.ДатаОкончания, ТекЧасовойПояс, РезультатЗапроса, ТекТС.ТС));
		
	КонецЦикла;

	ТекТаблицаДанных = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьОбработкуРезультатаЗапроса_ПробегИРасходГСМ(
		МассивРезультатовЗапросов, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	
	// Выполним обработку полученных данных
	Для Каждого ТекСтрока Из ТекТаблицаДанных Цикл
		ТС = ТекСтрока.ТС;
		
		ВремяРаботыДвигателя = ТекСтрока.ВремяРаботыДвигателя;
		Попытка
			Час_ = Число(Лев(ВремяРаботыДвигателя, 2));
			Минута_ = Число(Сред(ВремяРаботыДвигателя, 4, 2));
			Секунда_ = Число(Прав(ВремяРаботыДвигателя, 2));
		Исключение
			Попытка
				Час_ = Число(Лев(ВремяРаботыДвигателя, 1));
				ВремяРаботыДвигателя = "0" + ВремяРаботыДвигателя;
				Минута_ = Число(Сред(ВремяРаботыДвигателя, 4, 2));
				Секунда_ = Число(Прав(ВремяРаботыДвигателя, 2));
			Исключение
				Час_     = 0;
				Минута_  = 0;
				Секунда_ = 0;
			КонецПопытки
		КонецПопытки;
		Час_ = Час_ + Минута_/60 + Секунда_/(60*60);
		
		ВремяРаботыДвигателя = Окр(Час_, 3);
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТС                        = ТекСтрока.ТС.Ссылка;
		НоваяСтрока.Пробег                    = ТекСтрока.Пробег;
		НоваяСтрока.НачальноеЗначениеОдометра = ТекСтрока.ЗначениеОдометра;
		НоваяСтрока.ВремяРаботыДвигателя      = ВремяРаботыДвигателя;
		НоваяСтрока.РасходТоплива             = ТекСтрока.РасходТоплива;
		НоваяСтрока.НачальныйУровеньТоплива   = ТекСтрока.УровеньТоплива;
		НоваяСтрока.КонечныйУровеньТоплива    = ТекСтрока.УровеньТоплива;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АвтоГРАФ5_ЗагрузитьПараметры(ИдентификаторТС, СоответствиеКолонок, ТекстОшибки, УчетнаяЗапись) Экспорт
	
	СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗапись);

	МассивТС = Новый Массив();
	МассивТС.Добавить(Новый Структура("Идентификатор", ИдентификаторТС));
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("МассивТС", МассивТС);

	РезультатЗапроса = уатИнтеграцияМониторингАвтоГРАФ.АвтоГРАФ5_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи,
		"EnumParameters", ПараметрыЗапроса, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;
		
	Для Каждого ТекТС Из МассивТС Цикл
		ДанныеТС            = РезультатЗапроса.Получить(ТекТС.Идентификатор);
		TripsParams         = ДанныеТС.Получить("TripsParams");
		СоответствиеКолонок = Новый Соответствие();
		Если ТипЗнч(TripsParams) = Тип("Массив") Тогда
			Для Каждого ТекПараметр Из TripsParams Цикл
				СоответствиеКолонок.Вставить(ТекПараметр.Получить("Name"), ТекПараметр.Получить("Caption"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область СКАУТ

// Функция загружает пробег и расход ГСМ из системы СКАУТ в регистр сведений "Пробег и расход по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция СКАУТ_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Местоположение.СКАУТ";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.МассивТС.Количество());
		
	ТекстОшибки   = "";
	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetStatistics",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДанных = уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьОбработкуПолученныхДанныхПробегИРасходГСМ(СтруктураПараметровУчетнойЗаписи,
		ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, ЕстьОшибки);

	// Получаем данные для регистра.
	// Создадим таблицу по структуре регистра для того, чтобы в дальнейшем записать набор записей 1 раз.
	НаборЗаписей   = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	ТабДляРегистра = НаборЗаписей.Выгрузить();
	ТабДляРегистра.Очистить();
	
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл 
		НовСтрока = ТабДляРегистра.Добавить();
		НовСтрока.Период               = ТекСтрока.Период_По;
		НовСтрока.ТС                   = ТекСтрока.ТС;
		НовСтрока.Пробег               = ТекСтрока.Пробег;
		НовСтрока.РасходТоплива        = ТекСтрока.РасходТоплива;
		НовСтрока.УровеньТоплива       = ТекСтрока.УровеньТоплива;
		НовСтрока.ВремяРаботыДвигателя = ТекСтрока.ВремяРаботыДвигателя;
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатПробегРасходПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. СКАУТ",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. СКАУТ",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

// Процедура выполняет получение таблицы ТС из системы СКАУТ
//
// Параметры:
//  ТаблицаЗначений - Колонки: Наименование, ИДвСистеме и ГаражныйНомер;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ТекстОшибки - Строка
//
Процедура СКАУТ_ПолучитьДанныеВсехТС(ТаблицаТС, СтруктураПараметровУчетнойЗаписи, ТекстОшибки) Экспорт 
	
	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "Login",, ТекстОшибки);
	ДанныеЗапроса = уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetAllUnits",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) 
		ИЛИ ДанныеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьОбработкуРезультатаЗапроса_СписокТС(ТаблицаТС, ДанныеЗапроса);
	
КонецПроцедуры

// Функция загружает сведения о заправках и сливах ГСМ из системы СКАУТ в регистр сведений "События по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция СКАУТ_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ДополнительныеСведения.СКАУТ";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.массивТС.Количество());
	
	ТекстОшибки = "";
	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetStatistics",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДанных = уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьОбработкуПолученныхДанныхПоСобытиям(СтруктураПараметровУчетнойЗаписи,
		ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, ЕстьОшибки);

	НаборЗаписей   = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	ТабДляРегистра = НаборЗаписей.Выгрузить();
	ТабДляРегистра.Очистить();
	
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл 
		НовСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатДополнительныеСведенияПоGPS",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. СКАУТ",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. СКАУТ",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

// Функция загружает координаты из системы СКАУТ в регистр сведений "Координаты по мониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция СКАУТ_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.Координаты.СКАУТ";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, ПараметрыПроцедуры.массивТС.Количество());
	
	ТекстОшибки = "";
	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetStatistics",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДанных = уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьОбработкуПолученныхДанныхПоКоординатам(СтруктураПараметровУчетнойЗаписи,
		ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, ЕстьОшибки);

	НаборЗаписей   = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	ТабДляРегистра = НаборЗаписей.Выгрузить();
	ТабДляРегистра.Очистить();
	
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл 
		НовСтрока = ТабДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
	
	Если НЕ ОчиститьДанныеРегистраСведенийВИнтервале("уатКоординатыПоМониторингу",
		ПараметрыПроцедуры.МассивТС, ДатаНачала, ДатаОкончания, ТекстОшибки) Тогда 
		ЗаписьЖурналаРегистрации(
		"Мониторинг. СКАУТ",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецЕсли;
	
	// Запишем новые данные.
	НаборЗап = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
	НаборЗап.Загрузить(ТабДляРегистра);
	НаборЗап.Записывать = Истина;
	Попытка
		НаборЗап.Записать(Ложь);
	Исключение
		ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
		"Мониторинг. СКАУТ",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатМониторинг,
		,
		ТекстОшибки
		);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция загружает координаты из системы СКАУТ в регистр сведений "уатТекущееМестоположениеТСПоМониторингу"
//
// Параметры:
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция СКАУТ_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки) Экспорт 
	
	ТекстОшибки   = "";
	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetStatistics",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДанных = уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьОбработкуПолученныхДанныхПоТекущимКоординатам(СтруктураПараметровУчетнойЗаписи,
		ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, ЕстьОшибки);

	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
			
		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекСтрока.ТС);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ТекСтрока);
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") +  Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из системы СКАУТ
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, РасходТоплива, 
//								НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура СКАУТ_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист.СКАУТ";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
		ТекстОшибки   = "";
	уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьЗапросДанных(СтруктураПараметровУчетнойЗаписи, "GetStatistics",, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекТаблицаДанных = уатИнтеграцияМониторингСКАУТ.СКАУТ_ВыполнитьОбработкуПолученныхДанныхПробегИРасходГСМ(СтруктураПараметровУчетнойЗаписи,
		ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, ЕстьОшибки);

	// Получаем данные для регистра.
	// Создадим таблицу по структуре регистра для того, чтобы в дальнейшем записать набор записей 1 раз.
	НаборЗаписей   = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
	ТабДляРегистра = НаборЗаписей.Выгрузить();
	ТабДляРегистра.Очистить();
	
	Для Каждого ТекСтрока Из ТекТаблицаДанных Цикл 
		НовСтрока = ТаблицаДанных.Добавить();
		НовСтрока.ТС                          = ТекСтрока.ТС;
		НовСтрока.Пробег                      = ТекСтрока.Пробег;
		НовСтрока.НачальноеЗначениеОдометра   = 0;
		НовСтрока.РасходТоплива               = ТекСтрока.РасходТоплива;
		НовСтрока.НачальныйУровеньТоплива     = ТекСтрока.УровеньТоплива;
		НовСтрока.КонечныйУровеньТоплива      = ТекСтрока.УровеньТоплива;
		НовСтрока.ВремяРаботыДвигателя        = ТекСтрока.ВремяРаботыДвигателя;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Функция предназначена для получения настроек работы мониторинга "по-умолчанию".
// Состав имеющихся настроек определяется в структуре "стрНастройки" данной функции.
// При отсутсвии настроек, несоответсвии ключа - будет использоваться значение, определенное 
// в данной структуре. Иные значения, не определенные в составе данных настроек будут проигнорированы.
//
// Параметры:
//  ВыбранноеСвойство - строка - имя настроки, для которой необходимо получить значение по-умолчанию.
//                               Если данный параметр не заполнен - будут получены все имеющиеся настройки.
//
// Возвращаемое значение:
//   Структура, Число, Строка, Булево - Структура - при получении всех настроек, другие типы - при получении выбранной настройки.
//
Функция НастройкиМониторингаПоУмолчанию(ВнешняяСистема, ВыбранноеСвойство = "") 
	
	стрНастройки = Новый Структура();
	
	// Настройки регламентного задания "Загрузка данных"
	стрНастройки.Вставить("ЗагрузитьПробегРасход",				 Ложь);
	стрНастройки.Вставить("ЗагрузитьДопСведения",				 Ложь);
	стрНастройки.Вставить("ЗагрузитьКоординаты",				 Ложь);
	стрНастройки.Вставить("ИнтервалЗагрузки",					 "Сутки");
	стрНастройки.Вставить("МассивТС",							 Новый Массив);
	
	// Настройки мониторингов
	стрНастройки.Вставить("ЧасовойПояс", ?(ВнешняяСистема = Справочники.уатВнешниеСистемы.СКАУТ,
		"Europe/Moscow",
		3));
	стрНастройки.Вставить("ЧасовойПоясПоПодразделению",			 Ложь);
	стрНастройки.Вставить("ПериодичностьХранения",				 60);
	стрНастройки.Вставить("ИнтервалХраненияКоординат",			 60);

	Если ВнешняяСистема = Справочники.уатВнешниеСистемы.Wialon Тогда
		стрНастройки.Вставить("ИспользоватьСмены",				 Ложь);
		стрНастройки.Вставить("ВидЗагружаемогоПробега",			 0);
		стрНастройки.Вставить("ИсточникКоординат",				 0);
		стрНастройки.Вставить("ЗагружатьВсеДанные",				 Ложь);
		стрНастройки.Вставить("ВремяЖизниСсылкиНаЛокатор",		 3600);
		стрНастройки.Вставить("ПродолжитьЗагрузкуLocal",		 Ложь);
	КонецЕсли;

	Если ВыбранноеСвойство = "" Тогда 
		Возврат стрНастройки;
	Иначе 
		Попытка
			Возврат стрНастройки[ВыбранноеСвойство];
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // НастройкиМониторингаПоУмолчанию()

// Процедура выполняет регламентное задание ЗагрузкаДанных.
//
// Параметры
//		ВнешняяСистема - СправочникСсылка.уатВнешниеСистемы
Процедура ЗагрузкаДанныхМониторинга(ВнешняяСистема)
	
	ИмяСобытияВЖурналеРегистрации = СтрШаблон(НСтр("en='Loading data %1';ru='Загрузка данных %1'"), ВнешняяСистема.Наименование);
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	СтруктураПараметров = ПолучитьНастройкиМониторинга(ВнешняяСистема);
	СтруктураПараметров.Вставить("РегламентноеЗадание", Истина);
	
	Если СтруктураПараметров.МассивТС.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='Not selected any vehicle';ru='В настройках регламентного задания не указано ни одно ТС'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстНСТР);
		ВызватьИсключение ТекстНСТР;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗагрузитьПробегРасход
		И НЕ СтруктураПараметров.ЗагрузитьДопСведения
		И НЕ СтруктураПараметров.ЗагрузитьКоординаты Тогда
		ТекстНСТР = НСтр("en = 'Not specified parameters: 
                          |""Upload mileage and fuels consumption"", ""Load additional data""'; ru = 'Не указаны параметры: 
                          |""Загрузить пробег и расход ГСМ"", ""Загрузить события по мониторингу"" или ""Загрузить координаты""'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстНСТР);
		ВызватьИсключение ТекстНСТР;
	КонецЕсли;
	
	// Расчет интервала по параметрам задания
	ДатаОкончания = ТекущаяДатаСеанса();
	Если СтруктураПараметров.ИнтервалЗагрузки = "Год" Тогда
		ДатаНачала = ДобавитьМесяц(ДатаОкончания, -12);
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Полугодие" Тогда
		ДатаНачала = ДобавитьМесяц(ДатаОкончания, -6);
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Квартал" Тогда
		ДатаНачала = ДобавитьМесяц(ДатаОкончания, -3);
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Месяц" Тогда
		ДатаНачала = ДобавитьМесяц(ДатаОкончания, -1);
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Неделя" Тогда
		ДатаНачала = ДатаОкончания - 7*24*3600;
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Сутки" Тогда
		ДатаНачала = ДатаОкончания - 24*3600;
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "12часов" Тогда
		ДатаНачала = ДатаОкончания - 12*3600;
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Час" Тогда
		ДатаНачала = ДатаОкончания - 3600;
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Полчаса" Тогда
		ДатаНачала = ДатаОкончания - 1800;
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "10минут" Тогда
		ДатаНачала = ДатаОкончания - 600;
	ИначеЕсли СтруктураПараметров.ИнтервалЗагрузки = "Минута" Тогда
		ДатаНачала = ДатаОкончания - 60;
	Иначе // Если не указан, считаем что сутки
		ДатаНачала = ДатаОкончания - 24*3600;
	КонецЕсли;
	
	Если НЕ ЗагрузитьДанныеМониторингаПоУчетнымЗаписям(ДатаНачала, ДатаОкончания, СтруктураПараметров) Тогда
		ТекстОшибки = НСтр("ru = 'Загрузка данных завершена.'; en = 'Data loading is completed.'") 
		+ Символы.ПС + НСтр("ru = 'При загрузке данных возникли ошибки (Подробности см. в журнале регистрации).'");
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура выполняет загрузку данных из системы мониторинга по учетным записям.
// 
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузитьДанныеМониторингаПоУчетнымЗаписям(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, ЕстьОшибки = Ложь)
	
	ЗагрузкаВыполненаУспешно = Истина;
	
	МассивДанных = РазбитьМассивТСНаРазличныеУчетныеЗаписи(ПараметрыПроцедуры.МассивТС);

	ПараметрыПроцедуры.Вставить("СоответсвиеТС");
	Для Каждого ТекСтрока Из МассивДанных Цикл
		
		УчетнаяЗапись = ТекСтрока.УчетнаяЗаписьСистемыМониторинга;
		СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗапись);

		СтруктураРезультат = ПреобразоватьМассивТСДляЗагрузкиДанных(СтруктураПараметровУчетнойЗаписи, ТекСтрока.МассивТС, ЕстьОшибки);
		ПараметрыПроцедуры.МассивТС      = СтруктураРезультат.МассивТС;
		ПараметрыПроцедуры.СоответсвиеТС = СтруктураРезультат.СоответсвиеТС;
		
		// Загрузим пробег и расход ГСМ в регистр сведений "Пробег и расход по мониторингу"
		Если ПараметрыПроцедуры.ЗагрузитьПробегРасход Тогда
			ЗагрузкаВыполненаУспешно = ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, 
				ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
				И ЗагрузкаВыполненаУспешно;
		КонецЕсли;
		// Загрузим сведения о заправках и сливах ГСМ в регистр сведений "События по мониторингу"
		Если ПараметрыПроцедуры.ЗагрузитьДопСведения Тогда
			ЗагрузкаВыполненаУспешно = ЗагрузитьСобытия(ДатаНачала, ДатаОкончания,
				ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
				И ЗагрузкаВыполненаУспешно;  
			Если ЗагрузкаВыполненаУспешно 
				И ПараметрыПроцедуры.Свойство("РегламентноеЗадание")
				И ПараметрыПроцедуры.РегламентноеЗадание
				И (СтруктураПараметровУчетнойЗаписи.СоздаватьЗаправкиГСМ
				ИЛИ СтруктураПараметровУчетнойЗаписи.СоздаватьСливыГСМ) Тогда
				СоздатьЗаправкиСливы(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи);
			КонецЕсли;
		КонецЕсли;
		// Загрузим координаты в регистр сведений "Координаты по мониторингу"
		Если ПараметрыПроцедуры.ЗагрузитьКоординаты Тогда
			ЗагрузкаВыполненаУспешно = ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания,
				ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
				И ЗагрузкаВыполненаУспешно;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполним загрузку текущего местоположения ТС в регистр сведений "Текущее местоположение ТС по мониторингу"
	Попытка
		уатЗагрузкаТекущегоМестоположенияТС    = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаТекущегоМестоположенияТС);
		ИдентификаторРегламентногоЗадания      = уатЗагрузкаТекущегоМестоположенияТС.УникальныйИдентификатор;
		РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания);
	Исключение
	КонецПопытки;
		
	Возврат ЗагрузкаВыполненаУспешно;
	
КонецФункции

// Процедура выполняет загрузку текущих данных из системы мониторинга по учетным записям.
// 
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузитьТекущиеДанныеМониторингаПоУчетнымЗаписям(ДатаНачала, ДатаОкончания, МассивТС, ЕстьОшибки = Ложь)
	
	ЗагрузкаВыполненаУспешно = Истина;
	
	МассивДанных = РазбитьМассивТСНаРазличныеУчетныеЗаписи(МассивТС);

	Для Каждого ТекСтрока Из МассивДанных Цикл
		
		УчетнаяЗапись  = ТекСтрока.УчетнаяЗаписьСистемыМониторинга;
		СтруктураПараметровУчетнойЗаписи = ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга(УчетнаяЗапись);
		ВнешняяСистема                   = УчетнаяЗапись.СистемаМониторинга;

		ПараметрыПроцедуры = ПолучитьНастройкиМониторинга(ВнешняяСистема);
		ПараметрыПроцедуры.Вставить("СоответсвиеТС");
		ПараметрыПроцедуры.Вставить("СоответсвиеТСuuid");

		СтруктураРезультат = ПреобразоватьМассивТСДляЗагрузкиДанных(СтруктураПараметровУчетнойЗаписи, ТекСтрока.МассивТС, ЕстьОшибки);
		ПараметрыПроцедуры.МассивТС      = СтруктураРезультат.МассивТС;
		ПараметрыПроцедуры.СоответсвиеТС = СтруктураРезультат.СоответсвиеТС;
		ПараметрыПроцедуры.СоответсвиеТСuuid = СтруктураРезультат.СоответсвиеТСuuid;
		
		ЗагрузкаВыполненаУспешно = ЗагрузитьТекущееМестоположениеТС(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
	КонецЦикла;
	
	Возврат ЗагрузкаВыполненаУспешно;
	
КонецФункции

// Процедура разбивает массив ТС на массивы с различными учетными записями систем мониторинга
//
// Параметры
//  МассивТС - Массив - массив значений типа СправочникСсылка.уатТС.
//
// Возвращаемое значение:
//	Массив - массив структур, с ключами УчетнаяЗаписьСистемыМониторинга и МассивТС
//
Функция РазбитьМассивТСНаРазличныеУчетныеЗаписи(МассивТС, ИспользоватьЦСМ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Omnicomm_УчетнаяЗапись  = Справочники.уатУчетныеЗаписиСистемыМониторинга.Omnicomm;
	Wialon_УчетнаяЗапись    = Справочники.уатУчетныеЗаписиСистемыМониторинга.Wialon;
	СКАУТ_УчетнаяЗапись     = Справочники.уатУчетныеЗаписиСистемыМониторинга.СКАУТ;
	АвтоГРАФ_УчетнаяЗапись  = Справочники.уатУчетныеЗаписиСистемыМониторинга.АвтоГРАФ;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивТС", МассивТС);
	Запрос.УстановитьПараметр("Omnicomm_УчетнаяЗапись",  Omnicomm_УчетнаяЗапись);
	Запрос.УстановитьПараметр("Wialon_УчетнаяЗапись",    Wialon_УчетнаяЗапись);
	Запрос.УстановитьПараметр("СКАУТ_УчетнаяЗапись",     СКАУТ_УчетнаяЗапись);
	Запрос.УстановитьПараметр("АвтоГРАФ_УчетнаяЗапись",  АвтоГРАФ_УчетнаяЗапись);
	Запрос.УстановитьПараметр("ЦСМ_УчетнаяЗапись",       Справочники.уатВнешниеСистемы._1СЦСМ);
	Запрос.УстановитьПараметр("ИспользоватьЦСМ",         ИспользоватьЦСМ);
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатТС.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА уатТС.УчетнаяЗаписьСистемыМониторинга = ЗНАЧЕНИЕ(Справочник.уатУчетныеЗаписиСистемыМониторинга.Пустаяссылка)
		|				ИЛИ уатТС.УчетнаяЗаписьСистемыМониторинга = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.Omnicomm)
		|						ТОГДА &Omnicomm_УчетнаяЗапись
		|					ИНАЧЕ ВЫБОР
		|							КОГДА уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.Wialon)
		|								ТОГДА &Wialon_УчетнаяЗапись
		|							ИНАЧЕ ВЫБОР
		|									КОГДА уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.СКАУТ)
		|										ТОГДА &СКАУТ_УчетнаяЗапись
		|									ИНАЧЕ ВЫБОР
		|											КОГДА уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.АвтоГРАФ)
		|												ТОГДА &АвтоГРАФ_УчетнаяЗапись
		|											ИНАЧЕ ВЫБОР
		|													КОГДА уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы._1СЦСМ)
		|															И &ИспользоватьЦСМ
		|														ТОГДА &ЦСМ_УчетнаяЗапись
		|													ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатУчетныеЗаписиСистемыМониторинга.Пустаяссылка)
		|												КОНЕЦ
		|										КОНЕЦ
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ уатТС.УчетнаяЗаписьСистемыМониторинга
		|	КОНЕЦ КАК УчетнаяЗапись,
		|	уатТС.ИспользуемаяСистемаGPS КАК СистемаМониторинга
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.Ссылка В(&МассивТС)
		|ИТОГИ ПО
		|	УчетнаяЗапись";
	Запрос.Текст = уатОбщегоНазначения.МодифицироватьЗапросКСправочникаТСВСоответсвииСПоставкой(Запрос.Текст);

	РезультатЗапроса = Запрос.Выполнить();
	МассивРезультат  = Новый Массив;
				
	ВыборкаУчетнаяЗаписьСистемыМониторинга = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУчетнаяЗаписьСистемыМониторинга.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаУчетнаяЗаписьСистемыМониторинга.УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьСистемыМониторинга = ВыборкаУчетнаяЗаписьСистемыМониторинга.УчетнаяЗапись;
		ВыборкаДетальныеЗаписи = ВыборкаУчетнаяЗаписьСистемыМониторинга.Выбрать();
		
		СчетчикТС = 1;
		Если ТипЗнч(УчетнаяЗаписьСистемыМониторинга) = Тип("СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга") Тогда
			СистемаМониторинга = УчетнаяЗаписьСистемыМониторинга.СистемаМониторинга;
			Если СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
				КонечныйСчетчик = 10;
			Иначе
				КонечныйСчетчик = 50;
			КонецЕсли;
		Иначе
			КонечныйСчетчик = 50;
		КонецЕсли;
		
		МсвТС     = Новый Массив();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаУчетнаяЗаписьСистемыМониторинга.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
				МсвТС.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				СчетчикТС = СчетчикТС + 1;
			Иначе
				Если СчетчикТС < КонечныйСчетчик Тогда
					МсвТС.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
					СчетчикТС = СчетчикТС + 1;
				Иначе
					МсвТС.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
					
					СтруктураДанных = Новый Структура("УчетнаяЗаписьСистемыМониторинга, МассивТС");
					СтруктураДанных.УчетнаяЗаписьСистемыМониторинга	 = УчетнаяЗаписьСистемыМониторинга;
					СтруктураДанных.МассивТС						 = МсвТС;
					МассивРезультат.Добавить(СтруктураДанных);
					
					МсвТС     = Новый Массив();
					СчетчикТС = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МсвТС.Количество() <> 0 Тогда
			СтруктураДанных = Новый Структура("УчетнаяЗаписьСистемыМониторинга, МассивТС");
			СтруктураДанных.УчетнаяЗаписьСистемыМониторинга	 = УчетнаяЗаписьСистемыМониторинга;
			СтруктураДанных.МассивТС						 = МсвТС;
			МассивРезультат.Добавить(СтруктураДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

// Процедура преобразует массив ТС в массив структур для дальнейшей загрузки данных
//
// Параметры
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  МассивТС - Массив - массив значений типа СправочникСсылка.уатТС.
//
// Возвращаемое значение:
//	Структура - массив структур, с ключами Ссылка, Идентификатор, Подразделение, ИспользоватьДанныеCANшиныОдометр
//
Функция ПреобразоватьМассивТСДляЗагрузкиДанных(СтруктураПараметровУчетнойЗаписи, МассивТС, ЕстьОшибки)
	
	МассивРезультат   = Новый Массив();
	СоответсвиеТС     = Новый Соответствие();
	СоответсвиеТСuuid = Новый Соответствие();
	
	ТекстОшибки = "";
	ТаблицаТС   = ЗаполнитьТаблицуВсемиТС(СтруктураПараметровУчетнойЗаписи, ТекстОшибки);
	Если ТаблицаТС = Неопределено Тогда
		ЕстьОшибки = Истина;
		Возврат Новый Структура("МассивТС, СоответсвиеТС", МассивРезультат, СоответсвиеТС);
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивТС", МассивТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	уатТС.ИДвСистемеНавигации КАК Идентификатор,
	               |	уатТС.Подразделение КАК Подразделение,
	               |	уатТС.ИспользоватьДанныеCANшиныОдометр КАК ИспользоватьДанныеCANшиныОдометр,
	               |	уатТС.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Ссылка В(&МассивТС)
	               |	И НЕ уатТС.ПометкаУдаления";
	Запрос.Текст = уатОбщегоНазначения.МодифицироватьЗапросКСправочникаТСВСоответсвииСПоставкой(Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Идентификатор = СтрЗаменить(СтрЗаменить(Выборка.Идентификатор, Символы.НПП, ""), " ", "");
		НайдСтр = ТаблицаТС.НайтиСтроки(Новый Структура("ИДвСистеме", Идентификатор));
		Если НайдСтр.Количество() = 0 Тогда 
			ТекстОшибки = НСтр("en='Cannot execute request. Vehicle ID';ru='Невозможно осуществить запрос. ID ТС'") 
			+ " """ + Выборка.Ссылка + """ "
			+ НСтр("en='not found in satellite monitoring system.';ru='не найдено в системе спутникового мониторинга.'");
			ЗаписьЖурналаРегистрации(
			"Мониторинг. " + СтруктураПараметровУчетнойЗаписи.СистемаМониторинга,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.уатМониторинг,
			,
			ТекстОшибки
			);
			ЕстьОшибки  = Истина;
			Продолжить;
		КонецЕсли;
		
		СтруктураРезультат = Новый Структура("Ссылка,Наименование,НаименованиеМониторинг,Идентификатор,ИДвСистемеНавигации,
		|Подразделение,ИспользоватьДанныеCANшиныОдометр,ГрФайл");
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
		СтруктураРезультат.НаименованиеМониторинг = НайдСтр[0].Наименование;
		СтруктураРезультат.ГрФайл                 = НайдСтр[0].ГрФайл;
		СтруктураРезультат.Идентификатор          = Идентификатор;
		СтруктураРезультат.ИДвСистемеНавигации    = Идентификатор;
		
		МассивРезультат.Добавить(СтруктураРезультат);
		СоответсвиеТС.Вставить(Идентификатор, СтруктураРезультат);
		
		Если ЗначениеЗаполнено(НайдСтр[0].uuid) Тогда
			СоответсвиеТСuuid.Вставить(НайдСтр[0].uuid, СтруктураРезультат);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("МассивТС, СоответсвиеТС, СоответсвиеТСuuid", МассивРезультат, СоответсвиеТС, СоответсвиеТСuuid);
	
КонецФункции

// Функция загружает пробег и расход ГСМ в регистр сведений "Пробег и расход по мониторингу".
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Если СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm Тогда
		
		Возврат Omnicomm_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
		
		Возврат Wialon_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);

	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
		
		Возврат АвтоГРАФ_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
		
		Возврат СКАУТ_ЗагрузитьПробегИРасходГСМ(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Функция загружает сведения о заправках и сливах ГСМ в регистр сведений "События по мониторингу".
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Если СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm Тогда
		
		Возврат Omnicomm_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
		
		Возврат Wialon_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
		
		Возврат АвтоГРАФ_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
		
		Возврат СКАУТ_ЗагрузитьСобытия(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Выполняет создание заправок и сливов по данным мониторинга.
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//
Процедура СоздатьЗаправкиСливы(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи)
	
	МассивТС = Новый Массив();
	Для Каждого ТекСтрока Из ПараметрыПроцедуры.МассивТС Цикл
		МассивТС.Добавить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;  
	СтруктураПараметров.Вставить("ТС",                    МассивТС);
	СтруктураПараметров.Вставить("РежимРаботы",           0);
	СтруктураПараметров.Вставить("ДатаНач",               ДатаНачала);
	СтруктураПараметров.Вставить("ДатаКон",               ДатаОкончания);
	СтруктураПараметров.Вставить("АЗСМониторинг",         СтруктураПараметровУчетнойЗаписи.АЗС);
	СтруктураПараметров.Вставить("АЗССливМониторинг",     СтруктураПараметровУчетнойЗаписи.АЗССлив);
	СтруктураПараметров.Вставить("ВидЗаправкиМониторинг", СтруктураПараметровУчетнойЗаписи.ВидЗаправки);
	СтруктураПараметров.Вставить("ВидСлива",              СтруктураПараметровУчетнойЗаписи.ВидСлива);
	СтруктураПараметров.Вставить("Ответственный",         СтруктураПараметровУчетнойЗаписи.Ответственный);
	СтруктураПараметров.Вставить("ВидПЛприПоискеПЛдляЗаправки",                      0); //учитывать только ПЛ или только ТПЛ при создании заправок ГСМ 
	
	ПрофильОбмена = СтруктураПараметровУчетнойЗаписи.ПрофильОбмена;
	СтруктураПараметров.Вставить("ГлубинаПоискаПЛДоВыезда",                          ПрофильОбмена.ГлубинаПоискаПЛДоВыезда);
	СтруктураПараметров.Вставить("ГлубинаПоискаПЛПослеВозвращения",                  ПрофильОбмена.ГлубинаПоискаПЛПослеВозвращения);
	СтруктураПараметров.Вставить("ПересчитатьПутевыеЛисты",                          ПрофильОбмена.ПересчитатьПутевыеЛисты);
	СтруктураПараметров.Вставить("ПроводитьСозданныеЗаправкиГСМ",                    ПрофильОбмена.ПроводитьСозданныеЗаправкиГСМ);
	СтруктураПараметров.Вставить("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПрофильОбмена.ПроверятьНаличееДублейПоСозданнымРанееДокументам);
	СтруктураПараметров.Вставить("ИспользоватьДанныеССМ",                            Истина);
	СтруктураПараметров.Вставить("АдресХранилищаФоновогоЗадания",                    Неопределено);
	СтруктураПараметров.Вставить("ОбрабатыватьРассчитанныеПутевыеЛисты",             ПрофильОбмена.ОбрабатыватьРассчитанныеПутевыеЛисты);  
	СтруктураПараметров.Вставить("ОбрабатыватьРассчитанныеПутевыеЛисты",             ПрофильОбмена.ЗаменятьАналогНаОсновноеТопливо);
	СтруктураПараметров.Вставить("СоздаватьСливыДляОтрицательныхЗаправок",           ?(СтруктураПараметровУчетнойЗаписи.СоздаватьСливыГСМ = Истина, 1, 0));
	уатЗагрузкаПЦ.СоздатьЗаправкиГСМпоДаннымПЦиССМ(СтруктураПараметров);

КонецПроцедуры

// Функция загружает координаты в регистр сведений "Координаты по мониторингу".
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	Если СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm Тогда
		
		Возврат Omnicomm_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
		
		Возврат Wialon_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
		
		Возврат АвтоГРАФ_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
		
		Возврат СКАУТ_ЗагрузитьКоординаты(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Функция загружает координаты в регистр сведений "Координаты по мониторингу".
//
// Параметры:
//  ДатаНачала - Дата - дата, с которой необходимо получить данные;
//  ДатаОкончания - Дата - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если загрузка данных выполнена без ошибок.
//
Функция ЗагрузитьТекущееМестоположениеТС(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки)
	
	ТекстОшибки = "";
	
	Если СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm Тогда
		
		Возврат Omnicomm_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
		
		Возврат Wialon_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
		
		Возврат АвтоГРАФ_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	ИначеЕсли СтруктураПараметровУчетнойЗаписи.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
		
		Возврат СКАУТ_ЗагрузитьТекущееМестоположение(ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки);
		
	Иначе
		
		МассивТС = ПараметрыПроцедуры.МассивТС;
		КодВозврата = уатРаботаСРасширениями.ПСМ_ЗагрузитьТекущееМестоположениеТС(ДатаНачала, ДатаОкончания, МассивТС, ТекстОшибки, СтруктураПараметровУчетнойЗаписи);
		Возврат КодВозврата = 0;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ЦСМ_ЗагрузкаТекущегоМестоположенияТС(МассивТС)
	ИспользоватьЦСМ = уатОбщегоНазначения_проф.ИспользованиеЦСМ();
	
	Если НЕ ИспользоватьЦСМ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАктальныхДанных = ItobИнтерфейсДанныхМониторинга.АктуальныеДанныеТерминаловОбъектовМониторинга(МассивТС);
	Для Каждого ТекСтрока Из ТаблицаАктальныхДанных Цикл
		
		НаборЗаписей = РегистрыСведений.уатТекущееМестоположениеТСПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТС.Установить(ТекСтрока.Объект);
		НаборЗаписей.Прочитать();
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("Дата",    ТекСтрока.Период);
		СтруктураДанных.Вставить("ТС",      ТекСтрока.Объект);
		СтруктураДанных.Вставить("Широта",  ТекСтрока.Широта);
		СтруктураДанных.Вставить("Долгота", ТекСтрока.Долгота);
		СтруктураДанных.Вставить("Долгота", ТекСтрока.Долгота);
		СтруктураДанных.Вставить("Скорость",ТекСтрока.Скорость);
		СтруктураДанных.Вставить("Курс",    ТекСтрока.Направление);
		СтруктураДанных.Вставить("УведомлениеОтправлено", Ложь);
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], СтруктураДанных);
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДанных);
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ЕстьКириллица(ИсходнаяСтрока)
	
	ЕстьКириллица=ложь;
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецОбласти

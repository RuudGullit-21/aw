////////////////////////////////////////////////////////////////////////////////
// Вызов сервера (повторное использование)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция получает имя объекта метаданных из соответствия объектов (для совместимости различных конфигураций).
//
// Параметры:
//	пОбъект - Строка - Имя объекта метаданных для установки соответствия.
// 
// Возвращаемое значение:
//	Строка - Имя объекта, соответствующее обращениям к нему. Если соответствие найдено не было,
//		то возвращается исходное имя объекта с префиксом "Itob".
//		
Функция ПолучитьИмяОбъекта(пОбъект) Экспорт
	
	соотвИменаОбъектовОпрТип = СоответствиеИменОбъектовИОпределяемыхТипов();	
	МетаНайденныйОпределяемыйТип = соотвИменаОбъектовОпрТип[пОбъект];
	Если МетаНайденныйОпределяемыйТип = Неопределено Тогда
		// Передано некорректное имя объекта
		ВызватьИсключение НСтр("ru = 'ПолучитьИмяОбъекта: Неизвестное имя объекта. Обратитесь к администратору.'");			
	КонецЕсли;
		
	мсвТипыОбъектов = МетаНайденныйОпределяемыйТип.Тип.Типы();
	ИмяОбъекта = "";
	Для каждого Тип Из мсвТипыОбъектов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ПозицияТочки = Найти(ТекущееПолноеИмя, ".");
		Если ПозицияТочки = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ИмяОбъекта = Сред(ТекущееПолноеИмя, ПозицияТочки+1);
		Прервать;
		
	КонецЦикла;	
	
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		ВызватьИсключение НСтр("ru = 'ПолучитьИмяОбъекта: Неверная настройка определяемого типа """+МетаНайденныйОпределяемыйТип.Имя+""". Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

// Функция осуществляет проверку того, может ли пользователь с текущими правами использовать ЦСМ.
//  Выполняется проверка доступности ролей "ItobБазовыеПрава" и "ПолныеПрава".
//  Если доступна хотя бы одна из этих ролей, возвращается Истина - как в функции "РолиДоступны"
//  общего модуля "Пользователи". В противном случае - Ложь.
// 
// Возвращаемое значение:
//  Булево - Признак того, что пользователь с текущими правами может использовать ЦСМ.
//
Функция ПользовательИспользуетЦСМ() Экспорт
	Возврат ItobРаботаС_БСП.РолиДоступны("ItobБазовыеПрава,ПолныеПрава");
КонецФункции

// Создает соответствие имен иконок (для совместимости различных конфигураций) и возвращает его.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен иконок для обращения к ним.
//
Функция ПолучитьИменаИконок() Экспорт
	СоответствиеИмен = Новый Соответствие;
	
	СоответствиеИмен.Вставить("ItobИконкаАвтомобильЛегковой", 	"car.png");
	СоответствиеИмен.Вставить("ItobИконкаАвтомобильЗеленый", 	"car_green.png");
	СоответствиеИмен.Вставить("ItobИконкаАвтомобильСпортивный", "sportcar.png");
	СоответствиеИмен.Вставить("ItobИконкаВертолет", 			"heli.png");
	СоответствиеИмен.Вставить("ItobИконкаВрач", 				"doctor.png");
	СоответствиеИмен.Вставить("ItobИконкаГрузовик", 			"truck.png");
	СоответствиеИмен.Вставить("ItobИконкаГрузовикЖелтый", 		"truck_yel.png");
	СоответствиеИмен.Вставить("ItobИконкаКабриолет", 			"cabri.png");
	СоответствиеИмен.Вставить("ItobИконкаКорабль", 				"ship.png");
	СоответствиеИмен.Вставить("ItobИконкаМикроавтобус", 		"micbus.png");
	СоответствиеИмен.Вставить("ItobИконкаМилиционер", 			"policeman.png");
	СоответствиеИмен.Вставить("ItobИконкаМилиция", 				"police.png");
	СоответствиеИмен.Вставить("ItobИконкаПожарнаяМашина", 		"fire.png");
	СоответствиеИмен.Вставить("ItobИконкаСкораяПомощь", 		"ambulance.png");
	СоответствиеИмен.Вставить("ItobИконкаЧеловек", 				"man.png");
	СоответствиеИмен.Вставить("ItobИконкаКругКрасный", 			"round_red.png");
	СоответствиеИмен.Вставить("ItobИконкаКругЖелтый" , 			"round_yellow.png");
	СоответствиеИмен.Вставить("ItobИконкаКругЗеленый", 			"round_green.png");
	СоответствиеИмен.Вставить("ItobИконкаЗеленаяГалочка", 		"check_green.png");
	СоответствиеИмен.Вставить("ItobИконкаДорожныйКонус", 		"road_cone.png");
	СоответствиеИмен.Вставить("ItobИконкаВидеокамера", 			"camera.png");
	СоответствиеИмен.Вставить("ItobИконкаФотоаппарат", 			"photo.png");
	
	СоответствиеИмен.Вставить("ItobИконкаКран" , 				"crane.png");
	СоответствиеИмен.Вставить("ItobИконкаКомбайн", 				"combine.png");
	СоответствиеИмен.Вставить("ItobИконкаМиксер", 				"mixer.png");
	СоответствиеИмен.Вставить("ItobИконкаТрактор", 				"tractor.png");
	СоответствиеИмен.Вставить("ItobИконкаТягач", 				"cargo_truck.png");
	СоответствиеИмен.Вставить("ItobИконкаЭкскаватор", 			"excavator.png");
	
	СоответствиеИмен.Вставить("ItobИконкаОпасность", 			"danger.png");
	СоответствиеИмен.Вставить("ItobИконкаУскорениеТорможение", 	"acceleration.png");
	СоответствиеИмен.Вставить("ItobИконкаПредупреждение", 		"warning.png");
	СоответствиеИмен.Вставить("ItobИконкаПревышениеСкорости", 	"overspeed.png");
	
	Возврат СоответствиеИмен;
КонецФункции

// Находит все подсистемы конфигурации, не включенные в командный интерфейс,
//	после чего включает такие подсистемы в возвращаемое соответствие.
//
// Возвращаемое значение:
//	Соответствие - соответствие вида (<Имя найденной подсистемы>, Истина), где в качестве имени найденной подсистемы
//				   подставляется строка с ее именем из метаданных.					
//
Функция ИменаПодсистем() Экспорт
	
	Имена = Новый Соответствие;
	ВставитьИменаПодчиненныхПодсистем(Имена, Метаданные, Истина);
	
	Возврат Новый ФиксированноеСоответствие(Имена);
	
КонецФункции

// Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
//  Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//  У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
// Параметры:
//  ПолноеИмяПодсистемы	 - Строка	 - полное имя объекта метаданных подсистема
//  	без слов "Подсистема." и с учетом регистра символов.
//  	Например: "СтандартныеПодсистемы.ВариантыОтчетов".
// 
// Возвращаемое значение:
//  Булево - Наличие подсистемы.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ItobВызовСервераПовтИсп.ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции // ПодсистемаСуществует()

// Возвращает из КЭШа радиус прихода на точку.
//
// Параметры:
//  МинимальныйРадиус	 - Число - Минимальный радиус прихода на точку.
// 
// Возвращаемое значение:
//  Число - радиус прихода на точку.
//
Функция ПолучитьРадиусЗоныПриходаНаТочку(МинимальныйРадиус = 50) Экспорт
	Возврат ItobОбщегоНазначенияКлиентСервер.МаксЗнч(Константы.ItobРадиусЗоныПриходаНаТочку.Получить(), МинимальныйРадиус);
КонецФункции // ПолучитьРадиусЗоныПриходаНаТочку()

// Возвращает параметры геокодирования.
// 
// Возвращаемое значение:
//  Структура - Параметры геокодирования.
//
Функция ПолучитьПараметрыГеокодирования() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ОграничиватьГеокодированиеГеографическойРамкой", Ложь);
	Результат.Вставить("Широта1", 0);
	Результат.Вставить("Широта2", 0);
	Результат.Вставить("Долгота1", 0);
	Результат.Вставить("Долгота2", 0);
	
	ДанныеГеоРамки = Константы.ItobГеографическаяРамкаГеокодирования.Получить().Получить();
	Если ТипЗнч(ДанныеГеоРамки) = Тип("Структура") Тогда
		ДанныеГеоРамки.Свойство("ОграничиватьГеокодированиеГеографическойРамкой", Результат.ОграничиватьГеокодированиеГеографическойРамкой);	
		ДанныеГеоРамки.Свойство("Широта1",  Результат.Широта1);
		ДанныеГеоРамки.Свойство("Широта2",  Результат.Широта2);
		ДанныеГеоРамки.Свойство("Долгота1", Результат.Долгота1);
		ДанныеГеоРамки.Свойство("Долгота2", Результат.Долгота2);
	
	КонецЕсли;
	
	Если Результат.ОграничиватьГеокодированиеГеографическойРамкой
		И (Результат.Широта1=0
		ИЛИ Результат.Широта2=0
		ИЛИ Результат.Долгота1=0
		ИЛИ Результат.Долгота2=0) Тогда
	
		Результат.ОграничиватьГеокодированиеГеографическойРамкой = Ложь;	
	
	КонецЕсли;
	
	Если Результат.ОграничиватьГеокодированиеГеографическойРамкой Тогда
		
		Результат.Вставить("ЦентрОбластиШирота", (Результат.Широта1+Результат.Широта2)/2 );
		Результат.Вставить("ЦентрОбластиДолгота", (Результат.Долгота1+Результат.Долгота2)/2);
		
		Результат.Вставить("ПротяженностьШирота", ItobОбщегоНазначенияКлиентСервер.МодульЗнч(Результат.Широта2-Результат.Широта1) );
		Результат.Вставить("ПротяженностьДолгота", ItobОбщегоНазначенияКлиентСервер.МодульЗнч(Результат.Долгота2-Результат.Долгота1) );
		
		Результат.Вставить("ПараметрЗапросаГеоРамка", "&ll="+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.ЦентрОбластиДолгота)
			+","+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.ЦентрОбластиШирота)
			+"&spn="+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.ПротяженностьДолгота)
			+","+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.ПротяженностьШирота) 
			+"&rspn=1" );		
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьПараметрыГеокодирования()

// Функция - Получить текст запроса выборки объектов
// 
// Возвращаемое значение:
// 	Строка  - текст запроса.
//
Функция ПолучитьТекстЗапросаВыборкиОбъектов() Экспорт

	ТекстЗапросаВыборкаОбъектов = "";
	
	ИмяСправочникаОрганизации = "";
	ИмяСправочникаМоделиТС    = "";
		
	ТипыОрганизации = Метаданные.ОпределяемыеТипы.Организация.Тип.Типы();       // *FIXIT* переписать.
	Если ТипыОрганизации.Количество() = 1 И ОбщегоНазначения.ЭтоСсылка(ТипыОрганизации[0]) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыОрганизации[0]);
		ИмяСправочникаОрганизации = ОбъектМетаданных.Имя;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверная настройка определяемого типа ""Организация""");
		Возврат "";
	КонецЕсли;
	
	ТипыМоделиТС = Метаданные.ОпределяемыеТипы.ItobМодельТС.Тип.Типы();    // *FIXIT* переписать.
	Если ТипыМоделиТС.Количество() = 1 И ОбщегоНазначения.ЭтоСсылка(ТипыМоделиТС[0]) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыМоделиТС[0]);
		ИмяСправочникаМоделиТС = ОбъектМетаданных.Имя;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверная настройка определяемого типа ""ItobМодельТС""");
		Возврат "";
	КонецЕсли;
	
	СвязьТиповОбъектовМониторингаСоСвойствами = ItobВызовСервераПовтИсп.СвязьТиповОбъектовМониторингаСоСвойствами();
	ПервыйЭлементОбработан = Ложь;
	Для каждого КлючИЗначение Из СвязьТиповОбъектовМониторингаСоСвойствами Цикл
		СвойстваОбъектаМониторинга = КлючИЗначение.Значение;
		
		Если НЕ НРег(Лев(СвойстваОбъектаМониторинга.ПолноеИмя, 10)) = "справочник" Тогда
			// Поддерживаются только справочники
			Продолжить;		
		КонецЕсли;
		
		ТекущаяПоддержкаИерархии = СвойстваОбъектаМониторинга.Иерархический;
		Если ТекущаяПоддержкаИерархии И НЕ СвойстваОбъектаМониторинга.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			// Поддерживается только иерархия групп и элементов
			Продолжить;
		КонецЕсли;
		
		ТекущееИмя = СвойстваОбъектаМониторинга.Имя;
		ЭтоТС = ItobОбщегоНазначения.ЭтоТипТС(КлючИЗначение.Ключ);
		ЕстьДопСведения  = Метаданные.ОпределяемыеТипы.ВладелецДополнительныхСведений.Тип.СодержитТип(КлючИЗначение.Ключ);
		ЕстьДопРеквизиты = НЕ Метаданные.Справочники[ТекущееИмя].ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено;
		
		Если ПервыйЭлементОбработан Тогда
			ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов+"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";		
		КонецЕсли;
		
		ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов+"
		|ВЫБРАТЬ "+?(ПервыйЭлементОбработан,"","РАЗРЕШЕННЫЕ")+"
		|	"+ТекущееИмя+".Ссылка КАК Объект,
		|	"+ТекущееИмя+".Представление КАК ОбъектПредставление,
		|	""" + СвойстваОбъектаМониторинга.Синоним +""" КАК ВидОбъекта,
		|	"+?(ТекущаяПоддержкаИерархии, ТекущееИмя+".ЭтоГруппа", "ЛОЖЬ")+" КАК ЭтоГруппа,
		|	"+?(ЭтоТС, "ИСТИНА","ЛОЖЬ")+" КАК ЭтоТранспортноеСредство,
		|	"+?(ЭтоТС, "ЕСТЬNULL(СвойстваТранспортныхСредств.ГосНомер,"""")","""""")+" КАК ГосНомер,
		|	"+?(ЭтоТС, "ЕСТЬNULL(СвойстваТранспортныхСредств.ГаражныйНомер,"""")","""""")+" КАК ГаражныйНомер,
		|	"+?(ЭтоТС, "ЕСТЬNULL(СвойстваТранспортныхСредств.Организация,ЗНАЧЕНИЕ(Справочник."+ИмяСправочникаОрганизации+".ПустаяСсылка))","ЗНАЧЕНИЕ(Справочник."+ИмяСправочникаОрганизации+".ПустаяСсылка)")+" КАК Организация,
		|	"+?(ЭтоТС, "ЕСТЬNULL(СвойстваТранспортныхСредств.МодельТС,ЗНАЧЕНИЕ(Справочник."+ИмяСправочникаМоделиТС+".ПустаяСсылка))","ЗНАЧЕНИЕ(Справочник."+ИмяСправочникаМоделиТС+".ПустаяСсылка)")+" КАК Марка,
		|	"+?(ЭтоТС, "ЕСТЬNULL(СвойстваТранспортныхСредств.Тип,ЗНАЧЕНИЕ(Справочник.ItobВидыТранспорта.ПустаяСсылка))","ЗНАЧЕНИЕ(Справочник.ItobВидыТранспорта.ПустаяСсылка)")+" КАК ВидТранспорта,
		|	"+?(ЕстьДопСведения, 
				"ЕСТЬNULL(ДополнительныеСведения.Значение,ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка))", 
				"ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)")+" КАК ДопСведение,
		|	"+?(ЕстьДопРеквизиты, 
				"ЕСТЬNULL("+ТекущееИмя+"ДополнительныеРеквизиты.Значение,ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка))",
				"ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)")+" КАК ДопРеквизит		
		|"+?(ПервыйЭлементОбработан,"","ПОМЕСТИТЬ втРазрешенныеОбъектыМониторинга")+"
		|ИЗ
		|	Справочник."+ТекущееИмя+" КАК "+ТекущееИмя+"";
		
		Если ЭтоТС Тогда
			ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов+"
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobСвойстваТранспортныхСредств КАК СвойстваТранспортныхСредств
			|	ПО СвойстваТранспортныхСредств.ТранспортноеСредство = "+ТекущееИмя+".Ссылка";		
		КонецЕсли;
		
		// Дополнительные сведения
		Если ЕстьДопСведения Тогда
			ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов+"
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|	ПО НЕ &ТекДопСведение = НЕОПРЕДЕЛЕНО
			|		И ДополнительныеСведения.Объект = "+ТекущееИмя+".Ссылка
			|		И ДополнительныеСведения.Свойство = &ТекДопСведение";
		КонецЕсли;
				
		// Дополнительные реквизиты
		Если ЕстьДопРеквизиты Тогда
			ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов+"
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник."+ТекущееИмя+".ДополнительныеРеквизиты КАК "+ТекущееИмя+"ДополнительныеРеквизиты
			|	ПО НЕ &ТекДопРеквизит = НЕОПРЕДЕЛЕНО
			|		И "+ТекущееИмя+"ДополнительныеРеквизиты.Ссылка = "+ТекущееИмя+".Ссылка
			|		И "+ТекущееИмя+"ДополнительныеРеквизиты.Свойство = &ТекДопРеквизит";
		КонецЕсли;
		
		ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов+"
		|ГДЕ
		|	НЕ "+ТекущееИмя+".ПометкаУдаления";
		
		ПервыйЭлементОбработан = Истина;				
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапросаВыборкаОбъектов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверная настройка определяемого типа ""ItobОбъектМониторинга""");		
	КонецЕсли;
	
	ТекстЗапросаВыборкаОбъектов = ТекстЗапросаВыборкаОбъектов +
	"
	|
	| ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|";
	
	
	Возврат ТекстЗапросаВыборкаОбъектов;	

КонецФункции

// Функция - Получить терминал по коду
//
// Параметры:
//  КодТерминала		 - Число - код терминала.
//  СерверСбораДанных	 - СправочникСсылка.ItobСерверыСбораДанных - ссылка на сервер сбора данных.
// 
// Возвращаемое значение:
//	СправочникСсылка.ItobТерминалы - ссылка на терминал
//
Функция ПолучитьТерминалПоКоду(КодТерминала, СерверСбораДанных) Экспорт
	
	НайденныйТерминал = Справочники.ItobТерминалы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодТерминала);
	Запрос.УстановитьПараметр("СерверСбораДанных", СерверСбораДанных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobТерминалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ItobТерминалы КАК ItobТерминалы
	|ГДЕ
	|	ItobТерминалы.Код = &Код
	|	И ItobТерминалы.СерверСбораДанных = &СерверСбораДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НайденныйТерминал = Выборка.Ссылка;	
	КонецЕсли; 
	
	
	Возврат НайденныйТерминал;

КонецФункции

// Функция - Получить модель терминала
//
// Параметры:
//  ТерминалСсылка - СправочникСсылка.ItobТерминалы - ссылка на терминал. 
// 
// Возвращаемое значение:
//	СправочникСсылка.ItobМоделиТерминалов - модель терминала.
//
Функция ПолучитьМодельТерминала(ТерминалСсылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ItobТерминалы.Модель КАК Модель
		|ИЗ
		|	Справочник.ItobТерминалы КАК ItobТерминалы
		|ГДЕ
		|	ItobТерминалы.Ссылка = &ТерминалСсылка");
	Запрос.УстановитьПараметр("ТерминалСсылка", ТерминалСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Модель;
	Иначе
		Возврат Справочники.ItobМоделиТерминалов.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьМодельТерминала()

// Функция - Получить данные виртуального датчика
//
// Параметры:
//  Терминал			 - СправочникСсылка.ItobТерминалы - ссылка на терминал.
//  ВиртуальныйДатчик	 - СправочникСсылка.ItobДатчики	 - ссылка на датчик.
// 
// Возвращаемое значение:
//	Структура - данные виртуального датчика. 
//
Функция ПолучитьДанныеВиртуальногоДатчика(Терминал, ВиртуальныйДатчик) Экспорт
	
	Результат = Новый Структура("Код,Датчик", -1, Справочники.ItobДатчики.ПустаяСсылка());
	
	Если ТипЗнч(ВиртуальныйДатчик) = Тип("СправочникСсылка.ItobДатчики") Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТерминалыДатчики.Датчик КАК Датчик,
		               |	ТерминалыДатчики.Датчик.Код КАК Код,
		               |	ТерминалыДатчики.Назначение КАК Назначение
		               |ИЗ
		               |	Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
		               |ГДЕ
		               |	ТерминалыДатчики.Ссылка = &Терминал
		               |	И ТерминалыДатчики.Датчик = &Датчик";		
		
	ИначеЕсли ТипЗнч(ВиртуальныйДатчик) = Тип("СправочникСсылка.ItobНазначенияДатчиков") Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТерминалыДатчики.Датчик КАК Датчик,
		               |	ТерминалыДатчики.Датчик.Код КАК Код,
		               |	ТерминалыДатчики.Назначение КАК Назначение
		               |ИЗ
		               |	Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
		               |ГДЕ
		               |	ТерминалыДатчики.Ссылка = &Терминал
		               |	И ТерминалыДатчики.Назначение = &Датчик";		
	Иначе
		// Неизвестный тип виртуального датчика
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("Датчик", ВиртуальныйДатчик);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Возврат Результат;	

КонецФункции // ПолучитьКодВиртуальногоДатчика()

// Функция - Описание типов по имени
//
// Параметры:
//  ИмяОбъекта	 - Строка - имя объекта.
// 
// Возвращаемое значение:
//	 ОписаниеТипов 
//
Функция ОписаниеТиповПоИмени(ИмяОбъекта) Экспорт
	
	МетаданныеОпределяемогоТипа = СоответствиеИменОбъектовИОпределяемыхТипов()[ИмяОбъекта];
	
	Возврат МетаданныеОпределяемогоТипа.Тип;
	
КонецФункции

// Функция - Тип по имени
//
// Параметры:
//  ИмяОбъекта	 - Строка - имя объекта.
// 
// Возвращаемое значение:
//  Массив из Тип 
//
Функция ТипПоИмени(ИмяОбъекта) Экспорт

	Возврат ItobВызовСервераПовтИсп.ОписаниеТиповПоИмени(ИмяОбъекта).Типы()[0];
	
КонецФункции

// Функция - Пустая ссылка по имени
//
// Параметры:
//  ИмяОбъекта	 - Строка - имя объекта.
// 
// Возвращаемое значение:
//  Ссылка - пустая ссылка на объект переданный в параметре.
//
Функция ПустаяСсылкаПоИмени(ИмяОбъекта) Экспорт
	
	Возврат Новый (ItobВызовСервераПовтИсп.ТипПоИмени(ИмяОбъекта));
	
КонецФункции

// Функция - Метаданные по имени
//
// Параметры:
//  ИмяОбъекта	 - Строка - имя объекта.
// 
// Возвращаемое значение:
//	ОбъектМетаданных 
//
Функция МетаданныеПоИмени(ИмяОбъекта) Экспорт
	
	Возврат ItobВызовСервераПовтИсп.ПустаяСсылкаПоИмени(ИмяОбъекта).Метаданные();
	
КонецФункции

// Функция - Типы входящие в объект мониторинга
// 
// Возвращаемое значение:
//  Массив из Тип 
//
Функция ТипыВходящиеВОбъектМониторинга() Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ItobОбъектМониторинга.Тип.Типы();
	
КонецФункции

// Функция - Связь типов объектов мониторинга со свойствами
// 
// Возвращаемое значение:
//	Соответствие 
//
Функция СвязьТиповОбъектовМониторингаСоСвойствами() Экспорт
	
	Связь = Новый Соответствие;
	
	ТипыОбъектовМониторинга = ItobВызовСервераПовтИсп.ТипыВходящиеВОбъектМониторинга();
	Для каждого ТипОбъекта Из ТипыОбъектовМониторинга Цикл
		ОбъектМетаданных =  Метаданные.НайтиПоТипу(ТипОбъекта);
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение "Неверно настроен определяемый тип ""ItobОбъектМониторинга""";
		КонецЕсли;
		
		СвойстваМетаданныхОбъекта = Новый Структура;
		СвойстваМетаданныхОбъекта.Вставить("ПолноеИмя", ОбъектМетаданных.ПолноеИмя());
		СвойстваМетаданныхОбъекта.Вставить("Иерархический", ОбъектМетаданных.Иерархический);
		СвойстваМетаданныхОбъекта.Вставить("ВидИерархии", ОбъектМетаданных.ВидИерархии);
		СвойстваМетаданныхОбъекта.Вставить("Имя", ОбъектМетаданных.Имя);
		СвойстваМетаданныхОбъекта.Вставить("Синоним", ОбъектМетаданных.Синоним);
		
		Связь.Вставить(ТипОбъекта, СвойстваМетаданныхОбъекта);
	КонецЦикла;
	
	
	Возврат Связь;
	
КонецФункции

// Функция - Это конфигурация ЦСМ
// 
// Возвращаемое значение:
//	Булево 
//
Функция ЭтоКонфигурацияЦСМ() Экспорт
	
	Возврат ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВставитьИменаПодчиненныхПодсистем(Имена, РодительскаяПодсистема, Все = Ложь, ИмяРодительскойПодсистемы = "")
	
	Для каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Если ТекущаяПодсистема.ВключатьВКомандныйИнтерфейс И Не Все Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТекущейПодсистемы = ИмяРодительскойПодсистемы + ТекущаяПодсистема.Имя;
		Имена.Вставить(ИмяТекущейПодсистемы, Истина);
		
		Если ТекущаяПодсистема.Подсистемы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВставитьИменаПодчиненныхПодсистем(Имена, ТекущаяПодсистема, Все, ИмяТекущейПодсистемы + ".");
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеИменОбъектовИОпределяемыхТипов()
	
	соотвИменаОбъектовОпрТип = Новый Соответствие;
	соотвИменаОбъектовОпрТип.Вставить("ГеографическиеЗоны", Метаданные.ОпределяемыеТипы.ItobГеографическаяЗона);
	соотвИменаОбъектовОпрТип.Вставить("ТранспортныеСредства", Метаданные.ОпределяемыеТипы.ItobТранспортноеСредство);
	соотвИменаОбъектовОпрТип.Вставить("Водители", Метаданные.ОпределяемыеТипы.ItobВодитель);
	соотвИменаОбъектовОпрТип.Вставить("МаркиТранспорта", Метаданные.ОпределяемыеТипы.ItobМодельТС);
	соотвИменаОбъектовОпрТип.Вставить("ПунктыНазначения", Метаданные.ОпределяемыеТипы.ItobПунктНазначения);
	соотвИменаОбъектовОпрТип.Вставить("ПараметрыВыработки", Метаданные.ОпределяемыеТипы.ItobПараметрВыработки);
	соотвИменаОбъектовОпрТип.Вставить("Терминалы", Метаданные.ОпределяемыеТипы.ItobТерминал);
	соотвИменаОбъектовОпрТип.Вставить("Организации", Метаданные.ОпределяемыеТипы.Организация);
	соотвИменаОбъектовОпрТип.Вставить("Контрагенты", Метаданные.ОпределяемыеТипы.ItobКонтрагент);
	соотвИменаОбъектовОпрТип.Вставить("ДоговорыКонтрагентов", Метаданные.ОпределяемыеТипы.ItobДоговорКонтрагента);
	соотвИменаОбъектовОпрТип.Вставить("Склады", Метаданные.ОпределяемыеТипы.ItobСклад);
	соотвИменаОбъектовОпрТип.Вставить("Номенклатура", Метаданные.ОпределяемыеТипы.ItobНоменклатура);
	соотвИменаОбъектовОпрТип.Вставить("АЗС", Метаданные.ОпределяемыеТипы.ItobАЗС);
	соотвИменаОбъектовОпрТип.Вставить("ПутевойЛист", Метаданные.ОпределяемыеТипы.ItobПутевойЛист);

	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.УчетГСМ") Тогда
		соотвИменаОбъектовОпрТип.Вставить("ВидыДокументовСотрудников", Метаданные.ОпределяемыеТипы["ItobВидДокументовСотрудников"]);	                                             
	КонецЕсли; 
	
	
	Возврат соотвИменаОбъектовОпрТип;
	
КонецФункции
 
#КонецОбласти

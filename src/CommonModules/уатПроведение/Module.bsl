////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ПРОВЕДЕНИЕМ
//

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения"
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", 
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> 
		Неопределено, "_Документ_.Организация КАК Организация," , "") + "
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	мГраницаКонтроля = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Включая);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", мГраницаКонтроля);
	
	мДатаКурса = ДокументСсылка.Дата;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДатаКурса") <> Неопределено
		И ЗначениеЗаполнено(ДокументСсылка.ДатаКурса) Тогда
		мДатаКурса = ДокументСсылка.ДатаКурса;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураКурсаРегл = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, мДатаКурса);
	СтруктураДополнительныеСвойства.Вставить("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	СтруктураДополнительныеСвойства.Вставить("КурсРегл"       , СтруктураКурсаРегл.Курс);
	СтруктураДополнительныеСвойства.Вставить("КратностьРегл"  , СтруктураКурсаРегл.Кратность);
	
	мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурсаУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, мДатаКурса);
	СтруктураДополнительныеСвойства.Вставить("ВалютаУпрУчета", мВалютаУправленческогоУчета);
	СтруктураДополнительныеСвойства.Вставить("КурсУпр"       , СтруктураКурсаУпр.Курс);
	СтруктураДополнительныеСвойства.Вставить("КратностьУпр"  , СтруктураКурсаУпр.Кратность);
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", ДокументСсылка.Метаданные()) Тогда
		СтруктураДополнительныеСвойства.Вставить("ВалютаДокумента", ДокументСсылка.ВалютаДокумента);
		СтруктураДополнительныеСвойства.Вставить("КурсДокумента",
			уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка, СтруктураДополнительныеСвойства.ВалютаРеглУчета));
		СтруктураДополнительныеСвойства.Вставить("КратностьДокумента",
			уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка, СтруктураДополнительныеСвойства.ВалютаРеглУчета));
	КонецЕсли;

КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, 
		СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", 
					СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДвиженияРегистров

// Выполняет движения регистра накопления Запасы.
//
Процедура ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗапасы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии;
	
	Если Отказ
	 ИЛИ ТаблицаЗапасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатПартииТоваровНаСкладах;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаЗапасы);
	
КонецПроцедуры

// Выполняет движения регистра накопления уатОстаткиГСМнаТС.
//
Процедура ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаГСМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ;
	
	Если Отказ ИЛИ ТаблицаГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатОстаткиГСМнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаГСМ);
	
КонецПроцедуры

// Выполняет движения регистра накопления уатРасходГСМнаТС.
//
Процедура ОтразитьРасходГСМНаТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаГСМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходГСМ;
	
	Если Отказ ИЛИ ТаблицаГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатРасходГСМнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаГСМ);
	
КонецПроцедуры

// Выполняет движения регистра сведений агрегаты ТС.
//
Процедура ОтразитьАгрегатыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаАгрегатов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАгрегатовТС;
	
	Если Отказ ИЛИ ТаблицаАгрегатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияАгрегаты = Движения.уатАгрегатыТС;
	ДвиженияАгрегаты.Записывать = Истина;
	ДвиженияАгрегаты.Загрузить(ТаблицаАгрегатов);

КонецПроцедуры

// Выполняет движения регистра накопления остатки агрегатов ТС
//
Процедура ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОстатковАгрегатов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОстатковАгрегатов;
	
	Если Отказ ИЛИ ТаблицаОстатковАгрегатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияАгрегаты = Движения.уатОстаткиАгрегатов;
	ДвиженияАгрегаты.Записывать = Истина;
	ДвиженияАгрегаты.Загрузить(ТаблицаОстатковАгрегатов);

КонецПроцедуры

// Выполняет движения регистра сведений Счетчики ТС
//
Процедура ОтразитьСчетчикиТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСчетчиковТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСчетчиковТС;
	
	Если Отказ ИЛИ ТаблицаСчетчиковТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСчетчикиТС = Движения.уатСчетчикиТС;
	ДвиженияСчетчикиТС.Записывать = Истина;
	ДвиженияСчетчикиТС.Загрузить(ТаблицаСчетчиковТС);

КонецПроцедуры

// Выполняет движения регистра сведений Прохождение ТО
//
Процедура ОтразитьПрохождениеТО(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПрохожденияТО = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрохожденияТО;
	
	Если Отказ ИЛИ ТаблицаПрохожденияТО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПрохождениеТО = Движения.уатПрохождениеТО;
	ДвиженияПрохождениеТО.Записывать = Истина;
	ДвиженияПрохождениеТО.Загрузить(ТаблицаПрохожденияТО);

КонецПроцедуры

// Выполняет движения регистра сведений Состояние ТС
//
Процедура ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСостоянийТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянийТС;
	
	Если Отказ ИЛИ ТаблицаСостоянийТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатСостояниеТС;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаСостоянийТС);

КонецПроцедуры

// Выполняет движения регистра накопления Рабочее время сотрудников
//
Процедура ОтразитьРабочееВремяРаботниковОрганизаций(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРабочегоВремени = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРабочегоВремени;
	
	Если Отказ ИЛИ ТаблицаРабочегоВремени.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРабочееВремя = Движения.уатРабочееВремяСотрудников;
	ДвиженияРабочееВремя.Записывать = Истина;
	ДвиженияРабочееВремя.Загрузить(ТаблицаРабочегоВремени);

КонецПроцедуры

// Выполняет движения регистра расчета Основные начисления
//
Процедура ОтразитьОсновныеНачисления(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОсновныхНачислений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОсновныхНачислений;
	
	Если Отказ ИЛИ ТаблицаОсновныхНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНачисления = Движения.уатОсновныеНачисления;
	ДвиженияНачисления.Записывать = Истина;
	ДвиженияНачисления.Загрузить(ТаблицаОсновныхНачислений);

КонецПроцедуры

// Выполняет движения регистра сведений Номенклатура ТС
//
Процедура ОтразитьНоменклатуруТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаНоменклатурыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНоменклатурыТС;
	
	Если Отказ ИЛИ ТаблицаНоменклатурыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНоменклатураТС = Движения.уатНоменклатураТС;
	ДвиженияНоменклатураТС.Записывать = Истина;
	ДвиженияНоменклатураТС.Загрузить(ТаблицаНоменклатурыТС);

КонецПроцедуры

// Выполняет движения регистра сведений Планирование работы ТС
//
Процедура ОтразитьПланированиеРаботыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПланированияРаботыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланированияРаботыТС;
	
	Если Отказ ИЛИ ТаблицаПланированияРаботыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНоменклатураТС = Движения.уатПланированиеРаботыТС;
	ДвиженияНоменклатураТС.Записывать = Истина;
	ДвиженияНоменклатураТС.Загрузить(ТаблицаПланированияРаботыТС);

КонецПроцедуры

// Выполняет движения регистра накопления Износ/пробег шин
//
Процедура ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаИзносаПробегаШин = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИзносаПробегаШин;
	
	Если Отказ ИЛИ ТаблицаИзносаПробегаШин.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияИзносаПробегаШин = Движения.уатИзносПробегШин;
	ДвиженияИзносаПробегаШин.Записывать = Истина;
	ДвиженияИзносаПробегаШин.Загрузить(ТаблицаИзносаПробегаШин);

КонецПроцедуры

// Выполняет движения регистра накопления Обороты по отчетам поставщиков ПЦ
//
Процедура ОтразитьОборотыПоОтчетамПоставщиковПЦ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОборотыПоОтчетамПоставщиковПЦ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыПоОтчетамПоставщиковПЦ;
	
	Если Отказ ИЛИ ТаблицаОборотыПоОтчетамПоставщиковПЦ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоОтчетамПоставщиковПЦ = Движения.уатОборотыПоОтчетамПоставщиковПЦ;
	ДвиженияОборотыПоОтчетамПоставщиковПЦ.Записывать = Истина;
	ДвиженияОборотыПоОтчетамПоставщиковПЦ.Загрузить(ТаблицаОборотыПоОтчетамПоставщиковПЦ);

КонецПроцедуры

// Выполняет движения регистра накопления Обороты по заправкам ГСМ
//
Процедура ОтразитьОборотыПоЗаправкамГСМ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОборотыПоЗаправкамГСМ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыПоЗаправкамГСМ;
	
	Если Отказ ИЛИ ТаблицаОборотыПоЗаправкамГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоЗаправкамГСМ = Движения.уатОборотыПоЗаправкамГСМ;
	ДвиженияОборотыПоЗаправкамГСМ.Записывать = Истина;
	ДвиженияОборотыПоЗаправкамГСМ.Загрузить(ТаблицаОборотыПоЗаправкамГСМ);

КонецПроцедуры

// Выполняет движения регистра Предоставленные услуги
//
Процедура ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПредоставленныхУслуг = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПредоставленныхУслуг;
	
	Если Отказ ИЛИ ТаблицаПредоставленныхУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУслуги = Движения.уатПредоставленныеУслуги;
	ДвиженияУслуги.Записывать = Истина;
	ДвиженияУслуги.Загрузить(ТаблицаПредоставленныхУслуг);

КонецПроцедуры

// Выполняет движения регистра Выставленные услуги
//
Процедура ОтразитьВыставленныеУслуги(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыставленныхУслуг = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыставленныхУслуг;
	
	Если Отказ ИЛИ ТаблицаВыставленныхУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУслуги = Движения.уатВыставленныеУслуги;
	ДвиженияУслуги.Записывать = Истина;
	ДвиженияУслуги.Загрузить(ТаблицаВыставленныхУслуг);

КонецПроцедуры

// Выполняет движения регистра сведений Причины закрытия заказов
//
Процедура ОтразитьПричиныЗакрытияЗаказов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПричинЗакрытия = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПричинЗакрытия;
	
	Если Отказ ИЛИ ТаблицаПричинЗакрытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУслуги = Движения.уатПричиныОтклоненияЗаказов;
	ДвиженияУслуги.Записывать = Истина;
	ДвиженияУслуги.Загрузить(ТаблицаПричинЗакрытия);
	
КонецПроцедуры

// Выполняет движения регистра накопления Выработка ТС
//
Процедура ОтразитьВыработкуТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаВыработки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкиТС;
	
	Если Отказ ИЛИ ТаблицаВыработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВыработкаТС;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(ТаблицаВыработки);
КонецПроцедуры

// Выполняет движения регистра накопления Выработка сотрудников
//
Процедура ОтразитьВыработкуСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыработки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкиСотрудников;
	
	Если Отказ ИЛИ ТаблицаВыработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВыработкаСотрудников;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(ТаблицаВыработки);

КонецПроцедуры

// Выполняет движения регистра накопления Простои
//
Процедура ОтразитьПростои(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаПростои = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПростои;
	
	Если Отказ ИЛИ ТаблицаПростои.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПростои = Движения.уатПростои;
	ДвиженияПростои.Записывать = Истина;
	ДвиженияПростои.Загрузить(ТаблицаПростои);
КонецПроцедуры

// Выполняет движения регистра накопления РасходТехническихЖидкостей.
//
Процедура ОтразитьРасходТЖ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОборотыТЖ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыТЖ;
	
	Если Отказ ИЛИ ТаблицаОборотыТЖ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатОборотыТЖнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаОборотыТЖ);
	
КонецПроцедуры

// Выполняет движения регистра накопления Заявки на ремонт
//
Процедура ОтразитьЗаявкиНаРемонт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаЗаявокНаРемонт = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаявокНаРемонт;
	
	Если Отказ ИЛИ ТаблицаЗаявокНаРемонт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаявки = Движения.уатЗаявкиНаРемонт;
	ДвиженияЗаявки.Записывать = Истина;
	ДвиженияЗаявки.Загрузить(ТаблицаЗаявокНаРемонт);

КонецПроцедуры

// Выполняет движения регистра накопления Заявки на ремонт
//
Процедура ОтразитьЗаказыГрузоотправителей(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказовГрузоотправителя;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаявки = Движения.уатЗаказыГрузоотправителей;
	ДвиженияЗаявки.Записывать = Истина;
	ДвиженияЗаявки.Загрузить(ТаблицаДвижений);

КонецПроцедуры

// Выполняет движения регистра накопления Запасы.
//
Процедура ОтразитьПартииТЖ(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПартииТЖ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ;
	
	Если Отказ
	 ИЛИ ТаблицаПартииТЖ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатОстаткиТЖнаТС;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаПартииТЖ);
	
КонецПроцедуры

// Выполняет движения регистра накопления Доходы
//
Процедура ОтразитьДоходы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДоходы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы;
	
	Если Отказ ИЛИ ТаблицаДоходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДоходы = Движения.уатДоходы;
	ДвиженияДоходы.Записывать = Истина;
	ДвиженияДоходы.Загрузить(ТаблицаДоходы);

КонецПроцедуры

// Выполняет движения регистра накопления Расходы.
//
Процедура ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасходы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы;
	
	Если Отказ ИЛИ ТаблицаРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасходы = Движения.уатРасходы;
	ДвиженияРасходы.Записывать = Истина;
	ДвиженияРасходы.Загрузить(ТаблицаРасходы);
	
КонецПроцедуры

// Выполняет движения регистра накопления Финансовые результаты.
//
Процедура ОтразитьФинансовыйРезультат(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаФинРез = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат;
	
	Если Отказ ИЛИ ТаблицаФинРез.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияФинРез = Движения.уатФинансовыеРезультаты;
	ДвиженияФинРез.Записывать = Истина;
	ДвиженияФинРез.Загрузить(ТаблицаФинРез);
	
КонецПроцедуры

// Выполняет движения регистра накопления Обороты по МЛ.
//
Процедура ОтразитьОборотыПоМаршрутномуЛисту(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаОборотыМЛ = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОборотыПоМаршрутномуЛисту;
	
	Если Отказ ИЛИ ТаблицаОборотыМЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияФинРез = Движения.уатОборотыПоМаршрутномуЛисту;
	ДвиженияФинРез.Записывать = Истина;
	ДвиженияФинРез.Загрузить(ТаблицаОборотыМЛ);
	
КонецПроцедуры

// Выполняет движения регистра сведений Корректировка плана рабочего времени сотрудников
//
Процедура ОтразитьКорректировкуПланаРабочегоВремениСотрудников(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРабочегоВремени = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРабочегоВремени;
	
	Если Отказ ИЛИ ТаблицаРабочегоВремени.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРабочееВремя = Движения.уатКорректировкаПланаРабочегоВремениСотрудников;
	ДвиженияРабочееВремя.Записывать = Истина;
	ДвиженияРабочееВремя.Загрузить(ТаблицаРабочегоВремени);

КонецПроцедуры

#КонецОбласти

#Область ФормированиеТаблицДанныхДляВыполненияДвижения

// Функция выполняет формирование таблицы партий для списания номенклатуры
//
// Параметры:
//  ТаблицаНоменклатуры - таблица номенклатуры для которой необходимо получить списываемые партии
//                 должно содержать 4 колонки: номенклатура, списываемое количество, склад с которого выполняется
//                 списание
// СпособСписанияПартий - способ списания партий: фило, либо, по средней - значение перечисления
// МоментВремени        - Момент времени на который получаются остатки партий
// СтруктураДополнительныхПараметров - структура с произвольными параметрами
//
// Возвращаемое значение:
//  Таблица списываемых партий в формате: номенклатура, склад, партия,  количество, стоимость, стоимостьУпр
//
Функция ПолучитьТаблицуПартийДляСписания(ТаблицаНоменклатуры, СпособСписанияПартий, МоментВремени = Неопределено, 
		СтруктураДополнительныхПараметров = Неопределено) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремТаб.Номенклатура,
	|	ВремТаб.Количество,
	|	ВремТаб.Склад
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаПараметр КАК ВремТаб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	СУММА(ТаблицаНоменклатуры.Количество) КАК Количество,
	|	ТаблицаНоменклатуры.Склад
	|ПОМЕСТИТЬ ТаблицаНоменклатурыГруппировка
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	мЗапрос.УстановитьПараметр("ТаблицаПараметр",ТаблицаНоменклатуры);
	Если МоментВремени = Неопределено тогда 
		мЗапрос.УстановитьПараметр("МоментВремени", Дата('00010101'));
	Иначе
		мЗапрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;
		
	Если СпособСписанияПартий = Перечисления.СпособыОценки.ПоСредней тогда
		мЗапрос.Текст = мЗапрос.Текст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Количество,
		|	Товары.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) = Товары.Количество
		|			ТОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0)
		|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(уатПартииТоваровНаСкладахОстатки.СтоимостьОстаток / 
		|				уатПартииТоваровНаСкладахОстатки.КоличествоОстаток * Товары.Количество КАК ЧИСЛО(15,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) = Товары.Количество
		|			ТОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.СтоимостьУпрОстаток, 0)
		|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(уатПартииТоваровНаСкладахОстатки.СтоимостьУпрОстаток /
		|				уатПартииТоваровНаСкладахОстатки.КоличествоОстаток * Товары.Количество КАК ЧИСЛО(15,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтоимостьУпр,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) = Товары.Количество
		|			ТОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.СуммаНДСОстаток, 0)
		|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(уатПартииТоваровНаСкладахОстатки.СуммаНДСОстаток /
		|				уатПартииТоваровНаСкладахОстатки.КоличествоОстаток * Товары.Количество КАК ЧИСЛО(15,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС
		|ИЗ
		|	ТаблицаНоменклатурыГруппировка КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Склад
		|						ИЗ
		|							ТаблицаНоменклатуры КАК мТаб)
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Номенклатура
		|						ИЗ
		|							ТаблицаНоменклатуры КАК мТаб
		|						)) КАК уатПартииТоваровНаСкладахОстатки
		|		ПО Товары.Склад = уатПартииТоваровНаСкладахОстатки.Склад
		|			И Товары.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
		|;";
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		тблПартий = МассивРезультатов[2].Выгрузить();
		тблПартий.Колонки.Добавить("Партия", Метаданные.РегистрыНакопления.уатПартииТоваровНаСкладах.Измерения.Партия.Тип);
		
		Возврат тблПартий;
		
	Иначе
		
		мЗапрос.Текст = мЗапрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.количество КАК Количество,
		|	Товары.Склад КАК Склад,
		|	уатПартииТоваровНаСкладахОстатки.Партия КАК Партия,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоПартия,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.СтоимостьУпрОстаток, 0) КАК СтоимостьУпрОстаток,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОсталось
		|ИЗ
		|	ТаблицаНоменклатурыГруппировка КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Склад
		|						ИЗ
		|							ТаблицаНоменклатуры КАК мТаб)
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Номенклатура
		|						ИЗ
		|							ТаблицаНоменклатуры КАК мТаб)) КАК уатПартииТоваровНаСкладахОстатки
		|		ПО Товары.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
		|			И Товары.Склад = уатПартииТоваровНаСкладахОстатки.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПартииТоваровНаСкладахОстатки.Партия.МоментВремени";

		Если СпособСписанияПартий = Перечисления.СпособыОценки.ЛИФО Тогда
			мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст,"уатПартииТоваровНаСкладахОстатки.Партия.МоментВремени",
				"уатПартииТоваровНаСкладахОстатки.Партия.МоментВремени Убыв");
		КонецЕсли;
		
        мЗапрос.УстановитьПараметр("Партия",Неопределено);
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		
		ТаблицаОстатковПартий = МассивРезультатов[2].Выгрузить();
		ТаблицаПартий = Новый ТаблицаЗначений();
		ТаблицаПартий.Колонки.Добавить("Склад"       , Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаПартий.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПартий.Колонки.Добавить("Партия"      , Новый ОписаниеТипов(
			"ДокументСсылка.уатОприходованиеТоваров, ДокументСсылка.уатСливГСМ, ДокументСсылка.уатПоступлениеТоваровУслуг, 
			| ДокументСсылка.уатОперацииСТехническимиЖидкостями"));
		ТаблицаПартий.Колонки.Добавить("Количество"  , Новый ОписаниеТипов("Число"),Новый КвалификаторыЧисла(15,3));
		ТаблицаПартий.Колонки.Добавить("Стоимость"   , Новый ОписаниеТипов("Число"),Новый КвалификаторыЧисла(15,2));
		ТаблицаПартий.Колонки.Добавить("СтоимостьУпр", Новый ОписаниеТипов("Число"),Новый КвалификаторыЧисла(15,2));
		ТаблицаПартий.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"),Новый КвалификаторыЧисла(15,2));
		
		Для каждого ТекСтрокаТабНоменклатуры ИЗ ТаблицаНоменклатуры Цикл
			ОсталосьСписать = ТекСтрокаТабНоменклатуры.Количество;	
			Для каждого ТекСтрокаОстатковПартий ИЗ ТаблицаОстатковПартий Цикл
				Если ОсталосьСписать = 0 ТОгда
					Прервать;
				КонецЕсли;
				Если ТекСтрокаТабНоменклатуры.Склад = ТекСтрокаОстатковПартий.Склад 
				   И ТекСтрокаТабНоменклатуры.Номенклатура = ТекСтрокаОстатковПартий.Номенклатура
				   И ТекСтрокаОстатковПартий.КоличествоОсталось > 0 тогда
					СписатьКоличество = Мин(ТекСтрокаОстатковПартий.КоличествоОсталось, ОсталосьСписать);
					Если СписатьКоличество = 0 тогда 
						Продолжить;
					КонецЕсли;
					НовСтрока = ТаблицаПартий.Добавить();
					НовСтрока.Склад        = ТекСтрокаОстатковПартий.Склад;
					НовСтрока.Номенклатура = ТекСтрокаОстатковПартий.Номенклатура;
					НовСтрока.Партия       = ТекСтрокаОстатковПартий.Партия;
					НовСтрока.количество   = СписатьКоличество;
					Если СписатьКоличество = ТекСтрокаОстатковПартий.КоличествоОсталось тогда
						НовСтрока.Стоимость    = ТекСтрокаОстатковПартий.СтоимостьОстаток;
						НовСтрока.СтоимостьУпр = ТекСтрокаОстатковПартий.СтоимостьУпрОстаток;
						НовСтрока.СуммаНДС = ТекСтрокаОстатковПартий.СуммаНДСОстаток;
					ИначеЕсли ТекСтрокаОстатковПартий.КоличествоОсталось <> 0 тогда
						НовСтрока.Стоимость    = Окр(ТекСтрокаОстатковПартий.СтоимостьОстаток    / 
							ТекСтрокаОстатковПартий.КоличествоОсталось * СписатьКоличество,2);
						НовСтрока.СтоимостьУпр = Окр(ТекСтрокаОстатковПартий.СтоимостьУпрОстаток / 
							ТекСтрокаОстатковПартий.КоличествоОсталось * СписатьКоличество,2);
						НовСтрока.СуммаНДС = Окр(ТекСтрокаОстатковПартий.СуммаНДСОстаток / 
							ТекСтрокаОстатковПартий.КоличествоОсталось * СписатьКоличество,2);
					КонецЕсли;
					ОсталосьСписать = ОсталосьСписать - СписатьКоличество;
					ТекСтрокаОстатковПартий.КоличествоОсталось  = ТекСтрокаОстатковПартий.КоличествоОсталось - СписатьКоличество;
					ТекСтрокаОстатковПартий.СтоимостьОстаток    = ТекСтрокаОстатковПартий.СтоимостьОстаток   - НовСтрока.Стоимость;
					ТекСтрокаОстатковПартий.СтоимостьУпрОстаток = ТекСтрокаОстатковПартий.СтоимостьУпрОстаток- НовСтрока.СтоимостьУпр;
					ТекСтрокаОстатковПартий.СуммаНДСОстаток = ТекСтрокаОстатковПартий.СуммаНДСОстаток- НовСтрока.СуммаНДС;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОсталосьСписать > 0 тогда
				НовСтрока = ТаблицаПартий.Добавить();
				НовСтрока.Склад        = ТекСтрокаТабНоменклатуры .Склад;
				НовСтрока.Номенклатура = ТекСтрокаТабНоменклатуры .Номенклатура;
				НовСтрока.Партия       = Неопределено;
				НовСтрока.Количество   = ОсталосьСписать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТаблицаПартий;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

#Область РаспределениеДоходовРасходов

Процедура СформироватьФинансовыйРезультат(СтруктураПараметров, АдресХранилища = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	//Если СтруктураПараметров.Свойство("ИнтерактивныйВызов") Тогда 
	//	ТекстНСТР = НСтр("en='Executing expense allocation on vehicle';ru='Выполняется распределение затрат на ТС'");
	//	//ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю", ТекстНСТР), АдресХранилища);
	//	ДлительныеОперации.СообщитьПрогресс(0, ТекстНСТР);
	//КонецЕсли;
	
	ТекстОшибок = "";
	
	ВалютаРегл = СтруктураПараметров.СтруктураДополнительныеСвойства.ВалютаРеглУчета;
	ВалютаУпр  = СтруктураПараметров.СтруктураДополнительныеСвойства.ВалютаУпрУчета;
	
	Если СтруктураПараметров.Свойство("ИнтерактивныйВызов") Тогда 
		ТекстНСТР = НСтр("en='Query is executed on unallocated incomes and expenses';ru='Выполняется запрос нераспределенных доходов и расходов'");
		//ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ПроцентВыполнения", ТекстНСТР, 10), АдресХранилища);
		ДлительныеОперации.СообщитьПрогресс(10, ТекстНСТР);
	КонецЕсли;
	
	флИсключатьДвиженияДокумента = ТипЗнч(СтруктураПараметров.ДокументСсылка) = Тип("Структура")
		И ЗначениеЗаполнено(СтруктураПараметров.ДокументСсылка.Ссылка)
		И НЕ (ТипЗнч(СтруктураПараметров.СтруктураДополнительныеСвойства) = Тип("Структура")
		И СтруктураПараметров.СтруктураДополнительныеСвойства.Свойство("ИсключатьДвиженияДокумента"));
		
	Если ЭтоСтандарт Тогда
		ТаблицаДоходыРасходы = ПолучитьТаблицуДоходыРасходы(СтруктураПараметров.ДокументСсылка, флИсключатьДвиженияДокумента);
	Иначе 
		ТаблицаДоходыРасходы = Вычислить("уатПроведение_проф.ПолучитьТаблицуДоходыРасходы(СтруктураПараметров.ДокументСсылка, флИсключатьДвиженияДокумента)");
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("ИнтерактивныйВызов") Тогда 
		ТекстНСТР = НСтр("en='Allocate income and expenses between vehicles';ru='Выполняется распределение доходов и расходов между ТС'");
		//ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ПроцентВыполнения", ТекстНСТР, 20), АдресХранилища);
		ДлительныеОперации.СообщитьПрогресс(20, ТекстНСТР);
	КонецЕсли;
	
	ТаблицаФинансовыйРезультат = ТаблицаДоходыРасходы.Скопировать();
	ТаблицаФинансовыйРезультат.Колонки.Удалить("СуммаРегл");
	ТаблицаФинансовыйРезультат.Колонки.Удалить("СуммаНДС");
	
	РаспределитьДоходыРасходыМеждуТС(СтруктураПараметров.ДокументСсылка, ТаблицаФинансовыйРезультат, ТекстОшибок, Истина); //сначала доходы
	РаспределитьДоходыРасходыМеждуТС(СтруктураПараметров.ДокументСсылка, ТаблицаФинансовыйРезультат, ТекстОшибок, Ложь); //затем расходы
	
	Если СтруктураПараметров.Свойство("ИнтерактивныйВызов") Тогда 
		ТекстНСТР = НСтр("en='Allocate income and expenses between analysts';ru='Выполняется распределение доходов и расходов между аналитиками'");
		//ПоместитьВоВременноеХранилище(Новый Структура("СообщениеПользователю, ПроцентВыполнения", ТекстНСТР, 50), АдресХранилища);
		ДлительныеОперации.СообщитьПрогресс(50, ТекстНСТР);
	КонецЕсли;
	
	РаспределитьЗатратыМеждуАналитиками(СтруктураПараметров.ДокументСсылка, ТаблицаФинансовыйРезультат, ТекстОшибок);
	
	ТаблицаФинансовыйРезультат.Колонки.Добавить("СуммаДоходовБезНДСУпр");
	ТаблицаФинансовыйРезультат.Колонки.Добавить("СуммаРасходовБезНДСУпр");
	Для Каждого ТекСтрока Из ТаблицаФинансовыйРезультат Цикл
		ТекСтрока.СуммаДоходовБезНДСУпр  = ТекСтрока.СуммаДоходовУпр  - ТекСтрока.СуммаДоходовНДСУпр;
		ТекСтрока.СуммаРасходовБезНДСУпр = ТекСтрока.СуммаРасходовУпр - ТекСтрока.СуммаРасходовНДСУпр;
	КонецЦикла;
	
	СтруктураПараметров.СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаФинансовыйРезультат", ТаблицаФинансовыйРезультат);
	СтруктураПараметров.СтруктураДополнительныеСвойства.Вставить("ТекстОшибок", ТекстОшибок);
	
	ТаблицаДоходы = ТаблицаДоходыРасходы.Скопировать();
	Сч = ТаблицаДоходы.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если НЕ ТаблицаДоходы[Сч].ЭтоДоходы Тогда
			ТаблицаДоходы.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	ТаблицаРасходы = ТаблицаДоходыРасходы.Скопировать();
	Сч = ТаблицаРасходы.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если ТаблицаРасходы[Сч].ЭтоДоходы Тогда
			ТаблицаРасходы.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	ТаблицаДоходы.Колонки.Статья.Имя = "СтатьяДоходов";
	ТаблицаРасходы.Колонки.Статья.Имя = "СтатьяРасходов";
	СтруктураПараметров.СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы", ТаблицаДоходы);
	СтруктураПараметров.СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
		
	Если СтруктураПараметров.Свойство("ИнтерактивныйВызов") Тогда 
		ТекстНСТР = НСтр("en='Cost allocation is made.';ru='Распределение затрат выполнено.'");
		ДлительныеОперации.СообщитьПрогресс(100, ТекстНСТР);
	КонецЕсли;
	
	Если АдресХранилища <> Неопределено Тогда
	    ПоместитьВоВременноеХранилище(Новый Структура("ТаблицаДоходы, ТаблицаРасходы, ТаблицаФинансовыйРезультат, ТекстОшибок, РезультатЗавершения",
			СтруктураПараметров.СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы,
			СтруктураПараметров.СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы,
			СтруктураПараметров.СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат,
			ТекстОшибок, Истина), АдресХранилища);
	КонецЕсли;
			
КонецПроцедуры

// Получает таблицу остатков доходов и расходов для распределения по ТС и аналитикам и формирования фин. результата
//
// Параметры:
//  ИсключатьДвиженияДокумента - если Истина, то движения текущего документа будут исключены из остатков -
//  это необходимо в случае проведения из формы документа, поскольку в этом случае распределение производится
//  до начала транзакции проведения и движения текущего документа еще есть в базе
//
Функция ПолучитьТаблицуДоходыРасходы(ДокументСсылка, ИсключатьДвиженияДокумента = Ложь)
	
	ЗапросОстатки = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДоходыОстатки.СтатьяДоходов КАК Статья,
	|	уатДоходыОстатки.Организация КАК Организация,
	|	уатДоходыОстатки.Подразделение КАК Подразделение,
	|	уатДоходыОстатки.Колонна КАК Колонна,
	|	уатДоходыОстатки.ТС КАК ТС,
	|	уатДоходыОстатки.Заказ КАК Заказ,
	|	уатДоходыОстатки.Контрагент КАК Контрагент,
	|	уатДоходыОстатки.Маршрут КАК Маршрут,
	|	уатДоходыОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	уатДоходыОстатки.СуммаРеглОстаток КАК СуммаРегл,
	|	уатДоходыОстатки.СуммаНДСОстаток КАК СуммаНДС,
	|	уатДоходыОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
	|	ИСТИНА КАК ЭтоДоходы
	|ИЗ
	|	РегистрНакопления.уатДоходы.Остатки(&ДатаКон, Организация = &Организация) КАК уатДоходыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРасходыОстатки.СтатьяРасходов,
	|	уатРасходыОстатки.Организация,
	|	уатРасходыОстатки.Подразделение,
	|	уатРасходыОстатки.Колонна,
	|	уатРасходыОстатки.ТС,
	|	уатРасходыОстатки.Заказ,
	|	уатРасходыОстатки.Контрагент,
	|	NULL,
	|	уатРасходыОстатки.СуммаУпрОстаток,
	|	уатРасходыОстатки.СуммаРеглОстаток,
	|	уатРасходыОстатки.СуммаНДСОстаток,
	|	уатРасходыОстатки.СуммаНДСУпрОстаток,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.уатРасходы.Остатки(&ДатаКон, Организация = &Организация) КАК уатРасходыОстатки");
	
	Если ИсключатьДвиженияДокумента Тогда
		ЗапросОстатки.Текст = СтрЗаменить(ЗапросОстатки.Текст, "РАЗРЕШЕННЫЕ", "");
		
		ЗапросОстатки.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тбл.Статья,
		|	тбл.Организация,
		|	тбл.Подразделение,
		|	тбл.Колонна,
		|	тбл.ТС,
		|	тбл.Заказ,
		|	тбл.Контрагент,
		|	тбл.Маршрут,
		|	СУММА(тбл.СуммаУпр) КАК СуммаУпр,
		|	СУММА(тбл.СуммаРегл) КАК СуммаРегл,
		|	СУММА(тбл.СуммаНДС) КАК СуммаНДС,
		|	СУММА(тбл.СуммаНДСУпр) КАК СуммаНДСУпр,
		|	тбл.ЭтоДоходы
		|ИЗ
		|("
		+ ЗапросОстатки.Текст +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" + 
		"
		|ВЫБРАТЬ
		|	уатДоходыДвижения.СтатьяДоходов,
		|	уатДоходыДвижения.Организация,
		|	уатДоходыДвижения.Подразделение,
		|	уатДоходыДвижения.Колонна,
		|	уатДоходыДвижения.ТС,
		|	уатДоходыДвижения.Заказ,
		|	уатДоходыДвижения.Контрагент,
		|	уатДоходыДвижения.Маршрут,
		|	уатДоходыДвижения.СуммаУпрРасход,
		|	уатДоходыДвижения.СуммаРеглРасход,
		|	уатДоходыДвижения.СуммаНДСРасход,
		|	уатДоходыДвижения.СуммаНДСУпрРасход,
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.уатДоходы.Обороты(,, Регистратор) КАК уатДоходыДвижения
		|ГДЕ
		|	уатДоходыДвижения.Регистратор = &ДокСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатРасходыДвижения.СтатьяРасходов,
		|	уатРасходыДвижения.Организация,
		|	уатРасходыДвижения.Подразделение,
		|	уатРасходыДвижения.Колонна,
		|	уатРасходыДвижения.ТС,
		|	уатРасходыДвижения.Заказ,
		|	уатРасходыДвижения.Контрагент,
		|	NULL,
		|	уатРасходыДвижения.СуммаУпрРасход,
		|	уатРасходыДвижения.СуммаРеглРасход,
		|	уатРасходыДвижения.СуммаНДСРасход,
		|	уатРасходыДвижения.СуммаНДСУпрРасход,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.уатРасходы.Обороты(,, Регистратор) КАК уатРасходыДвижения
		|ГДЕ
		|	уатРасходыДвижения.Регистратор = &ДокСсылка"
		+ ") КАК тбл
		|
		|СГРУППИРОВАТЬ ПО
		|	тбл.Статья,
		|	тбл.Организация,
		|	тбл.Подразделение,
		|	тбл.Колонна,
		|	тбл.ТС,
		|	тбл.Заказ,
		|	тбл.Контрагент,
		|	тбл.Маршрут,
		|	тбл.ЭтоДоходы";
		ЗапросОстатки.УстановитьПараметр("ДокСсылка", ДокументСсылка.Ссылка);
	КонецЕсли;
	
	ЗапросОстатки.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(ДокументСсылка.Дата), ВидГраницы.Включая));
	ЗапросОстатки.УстановитьПараметр("Организация", ДокументСсылка.Организация);
	
	ТаблицаИсходная = ЗапросОстатки.Выполнить().Выгрузить();
	
	Возврат ТаблицаИсходная;
КонецФункции

Функция ПолучитьТаблицуТС(ПериодРаспределения, СтатьяДоходовРасходов, Организация, Подразделение, Колонна, КэшКоэффициентыПоСтатьям, ТаблицаДоходыРасходы)
	
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	// поиск в кэше - возвращается закэшированная таблица ТС
	ТаблицаТС = КэшКоэффициентыПоСтатьям.Получить(СтатьяДоходовРасходов);
	
	Если ТаблицаТС = Неопределено Тогда
		флЭтоДоходы = (ТипЗнч(СтатьяДоходовРасходов) = Тип("СправочникСсылка.уатСтатьиДоходов"));
		СпособРаспределения = ?(флЭтоДоходы, СтатьяДоходовРасходов.СпособРаспределенияМеждуТС, СтатьяДоходовРасходов.СпособРаспределенияЗатрат);
		
		флПустая = Ложь;
		Если СпособРаспределения = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.Поровну Тогда
			// Распределять нужно поровну
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
			|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
			|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
			|	1 КАК Коэффициент
			|ИЗ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
			|ГДЕ
			|	(уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1,1,1)
			|		ИЛИ уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия > &ДатаНачалаМесяца)
			|	И уатМестонахождениеТССрезПоследних.Организация = &Организация";
			
		ИначеЕсли СпособРаспределения = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоСтоимостиТС Тогда
			// Распределять нужно пропорционально первоначальной стоимости
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
			|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
			|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
			|	уатМестонахождениеТССрезПоследних.ТС.БалансоваяСтоимость КАК Коэффициент
			|ИЗ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
			|ГДЕ
			|	уатМестонахождениеТССрезПоследних.ТС.БалансоваяСтоимость <> 0
			|	И (уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1,1,1)
			|		ИЛИ уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия > &ДатаНачалаМесяца)
			|	И уатМестонахождениеТССрезПоследних.Организация = &Организация";
			
		ИначеЕсли СпособРаспределения = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоОбъемуВыработки Тогда
			// Распределять нужно по выработке
			Если флЭтоДоходы Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
				|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
				|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
				|	ВЫБОР
				|		КОГДА &ПараметрВыработкиРаспределенияВременный
				|		ТОГДА уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиДоходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов / 3600
				|		ИНАЧЕ уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиДоходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов
				|	КОНЕЦ КАК Коэффициент
				|ИЗ
				|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация И ПараметрВыработки = &ПараметрВыработкиРаспределения) КАК уатВыработкаОбороты
				|		ПО уатМестонахождениеТССрезПоследних.ТС = уатВыработкаОбороты.ТС
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиДоходов КАК СправочникуатСтатьиДоходов
				|		ПО (СправочникуатСтатьиДоходов.Ссылка = &СтатьяДоходовРасходов)
				|ГДЕ
				|	(уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия > &ДатаНачалаМесяца)
				|	И уатМестонахождениеТССрезПоследних.Организация = &Организация";
				Запрос.УстановитьПараметр("СтатьяДоходовРасходов", СтатьяДоходовРасходов);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределения", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределенияВременный", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС.Временный);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
				|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
				|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
				|	ВЫБОР
				|		КОГДА &ВариантСпособаРаспределенияЗатрат = 1
				|			ТОГДА ВЫБОР
				|					КОГДА СправочникуатСтатьиРасходовПараметры.ПараметрВыработки.Временный
				|						ТОГДА уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходовПараметры.ПараметрВыработки.ВесовойКоэффициентДоходовРасходов / 3600
				|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходовПараметры.ПараметрВыработки.ВесовойКоэффициентДоходовРасходов
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|					КОГДА &ПараметрВыработкиРаспределенияВременный
				|						ТОГДА уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов / 3600
				|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов
				|				КОНЕЦ
				|	КОНЕЦ КАК Коэффициент
				|ИЗ
				|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиРасходов КАК СправочникуатСтатьиРасходов
				|		ПО (СправочникуатСтатьиРасходов.Ссылка = &СтатьяДоходовРасходов)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиРасходов.ПараметрыВыработкиРаспределенияМеждуТС КАК СправочникуатСтатьиРасходовПараметры
				|		ПО уатМестонахождениеТССрезПоследних.Колонна = СправочникуатСтатьиРасходовПараметры.Колонна
				|			И (СправочникуатСтатьиРасходовПараметры.Ссылка = &СтатьяДоходовРасходов)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК уатВыработкаОбороты
				|		ПО уатМестонахождениеТССрезПоследних.ТС = уатВыработкаОбороты.ТС
				|		И (&ВариантСпособаРаспределенияЗатрат = 0 И уатВыработкаОбороты.ПараметрВыработки = &ПараметрВыработкиРаспределения
				|		ИЛИ &ВариантСпособаРаспределенияЗатрат = 1 И уатВыработкаОбороты.ПараметрВыработки = СправочникуатСтатьиРасходовПараметры.ПараметрВыработки)
				|ГДЕ
				|	(уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия > &ДатаНачалаМесяца)
				|	И уатМестонахождениеТССрезПоследних.Организация = &Организация";
				Запрос.УстановитьПараметр("СтатьяДоходовРасходов", СтатьяДоходовРасходов);
				Запрос.УстановитьПараметр("ВариантСпособаРаспределенияЗатрат", СтатьяДоходовРасходов.ВариантСпособаРаспределенияЗатрат);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределения", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределенияВременный", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС.Временный);
			КонецЕсли;
			
		ИначеЕсли (НЕ ЭтоСтандарт) И СпособРаспределения = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоОбъемуВыработкиМЛ Тогда
			// Распределять нужно по выработке из МЛ
			Если флЭтоДоходы Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
				|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
				|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
				|	ВЫБОР
				|		КОГДА &ПараметрВыработкиРаспределенияВременный
				|		ТОГДА уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиДоходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов / 3600
				|		ИНАЧЕ уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиДоходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов
				|	КОНЕЦ КАК Коэффициент
				|ИЗ
				|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаПоМаршрутнымЛистам_уэ.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация И ПараметрВыработки = &ПараметрВыработкиРаспределения) КАК уатВыработкаОбороты
				|		ПО уатМестонахождениеТССрезПоследних.ТС = уатВыработкаОбороты.ТС
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиДоходов КАК СправочникуатСтатьиДоходов
				|		ПО (СправочникуатСтатьиДоходов.Ссылка = &СтатьяДоходовРасходов)
				|ГДЕ
				|	(уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия > &ДатаНачалаМесяца)
				|	И уатМестонахождениеТССрезПоследних.Организация = &Организация";
				Запрос.УстановитьПараметр("СтатьяДоходовРасходов", СтатьяДоходовРасходов);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределения", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределенияВременный", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС.Временный);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
				|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
				|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
				|	ВЫБОР
				|		КОГДА &ВариантСпособаРаспределенияЗатрат = 1
				|			ТОГДА ВЫБОР
				|					КОГДА СправочникуатСтатьиРасходовПараметры.ПараметрВыработки.Временный
				|						ТОГДА уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходовПараметры.ПараметрВыработки.ВесовойКоэффициентДоходовРасходов / 3600
				|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходовПараметры.ПараметрВыработки.ВесовойКоэффициентДоходовРасходов
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|					КОГДА &ПараметрВыработкиРаспределенияВременный
				|						ТОГДА уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов / 3600
				|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот * СправочникуатСтатьиРасходов.ПараметрВыработкиРаспределенияМеждуТС.ВесовойКоэффициентДоходовРасходов
				|				КОНЕЦ
				|	КОНЕЦ КАК Коэффициент
				|ИЗ
				|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиРасходов КАК СправочникуатСтатьиРасходов
				|		ПО (СправочникуатСтатьиРасходов.Ссылка = &СтатьяДоходовРасходов)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиРасходов.ПараметрыВыработкиРаспределенияМеждуТС КАК СправочникуатСтатьиРасходовПараметры
				|		ПО уатМестонахождениеТССрезПоследних.Колонна = СправочникуатСтатьиРасходовПараметры.Колонна
				|			И (СправочникуатСтатьиРасходовПараметры.Ссылка = &СтатьяДоходовРасходов)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаПоМаршрутнымЛистам_уэ.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК уатВыработкаОбороты
				|		ПО уатМестонахождениеТССрезПоследних.ТС = уатВыработкаОбороты.ТС
				|		И (&ВариантСпособаРаспределенияЗатрат = 0 И уатВыработкаОбороты.ПараметрВыработки = &ПараметрВыработкиРаспределения
				|		ИЛИ &ВариантСпособаРаспределенияЗатрат = 1 И уатВыработкаОбороты.ПараметрВыработки = СправочникуатСтатьиРасходовПараметры.ПараметрВыработки)
				|ГДЕ
				|	(уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия > &ДатаНачалаМесяца)
				|	И уатМестонахождениеТССрезПоследних.Организация = &Организация";
				Запрос.УстановитьПараметр("СтатьяДоходовРасходов", СтатьяДоходовРасходов);
				Запрос.УстановитьПараметр("ВариантСпособаРаспределенияЗатрат", СтатьяДоходовРасходов.ВариантСпособаРаспределенияЗатрат);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределения", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС);
				Запрос.УстановитьПараметр("ПараметрВыработкиРаспределенияВременный", СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуТС.Временный);
			КонецЕсли;
			
		ИначеЕсли НЕ флЭтоДоходы И СпособРаспределения = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПропорциональноДоходам Тогда //распределение расходов пропорционально доходам
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаДокумента.ТС КАК ТС,
			|	ТаблицаДокумента.Колонна КАК Колонна,
			|	ТаблицаДокумента.Подразделение КАК Подразделение,
			|	ТаблицаДокумента.СуммаУпр КАК СуммаУпр
			|ПОМЕСТИТЬ ТаблицаДокумента
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
			|	И ТаблицаДокумента.ЭтоДоходы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	тбл.ТС КАК ТС,
			|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
			|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
			|	СУММА(тбл.СуммаУпр) КАК Коэффициент
			|ИЗ
			|	(ВЫБРАТЬ
			|		уатФинансовыеРезультатыОбороты.ТС КАК ТС,
			|		уатФинансовыеРезультатыОбороты.СуммаДоходовУпрОборот КАК СуммаУпр
			|	ИЗ
			|		РегистрНакопления.уатФинансовыеРезультаты.Обороты(
			|				&ДатаНач,
			|				&ДатаКон,
			|				,
			|				Организация = &Организация
			|					И ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
			|					И СтатьяДоходов <> ЗНАЧЕНИЕ(Справочник.уатСтатьиДоходов.ПустаяСсылка)) КАК уатФинансовыеРезультатыОбороты
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаДокумента.ТС,
			|		ТаблицаДокумента.СуммаУпр
			|	ИЗ
			|		ТаблицаДокумента КАК ТаблицаДокумента) КАК тбл
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
			|		ПО тбл.ТС = уатМестонахождениеТССрезПоследних.ТС
			|
			|СГРУППИРОВАТЬ ПО
			|	тбл.ТС,
			|	уатМестонахождениеТССрезПоследних.Подразделение,
			|	уатМестонахождениеТССрезПоследних.Колонна");
			тблТаблицаДоходыРасходы = ТаблицаДоходыРасходы.Скопировать();
			тблТаблицаДоходыРасходы.Свернуть("ТС, Колонна, Подразделение, ЭтоДоходы", "СуммаУпр");
			Запрос.УстановитьПараметр("ТаблицаДокумента", тблТаблицаДоходыРасходы);
			
		Иначе
			ТаблицаТС = Новый ТаблицаЗначений;
			ТаблицаТС.Колонки.Добавить("ТС");
			ТаблицаТС.Колонки.Добавить("Подразделение");
			ТаблицаТС.Колонки.Добавить("Колонна");
			ТаблицаТС.Колонки.Добавить("Коэффициент");
			флПустая = Истина;
			
		КонецЕсли;
		
		Если НЕ флПустая Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ДатаНачалаМесяца", НачалоМесяца(ПериодРаспределения));
			Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ПериодРаспределения));
			Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ПериодРаспределения));
			
			ТаблицаТС = Запрос.Выполнить().Выгрузить();
			
			ТаблицаТС.Свернуть("ТС, Колонна, Подразделение", "Коэффициент");
			//ТаблицаТС.Свернуть("ТС, ПараметрВыработкиРаспределенияЗатрат, ВестиУчетЗатратПоОбъектам, НастройкаРаспределения", "Коэффициент");
		КонецЕсли;
		
		// добавляем результаты запроса в кэш по статьям
		КэшКоэффициентыПоСтатьям.Вставить(СтатьяДоходовРасходов, ТаблицаТС);
	КонецЕсли;
		
	// отбираем только ТС, принадлежащие подразделению и колонне
	тблРез = ТаблицаТС.Скопировать();
	флОтборПодразделение = ЗначениеЗаполнено(Подразделение);
	флОтборКолонна = ЗначениеЗаполнено(Колонна);
	Если флОтборПодразделение ИЛИ флОтборКолонна Тогда
		Сч = тблРез.Количество()-1;
		Пока Сч >= 0 Цикл
			Если флОтборПодразделение И ТаблицаТС[Сч].Подразделение <> Подразделение
				ИЛИ флОтборКолонна И ТаблицаТС[Сч].Колонна <> Колонна Тогда
				
				тблРез.Удалить(Сч);
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
		
	Возврат тблРез;
	
КонецФункции

Процедура РаспределитьДоходыРасходыМеждуТС(ДокументСсылка, ТаблицаФинансовыйРезультат, ТекстОшибок, ЭтоДоходы = Истина)
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	КэшКоэффициентыПоСтатьям = Новый Соответствие;
			
	ТаблицаПромежуточная = ТаблицаФинансовыйРезультат.Скопировать();
	ТаблицаПромежуточная.Очистить();
	
	мсвОшибки = Новый Массив;
	
	мсвРаспределенныхСтрок = Новый Массив;
	Для Каждого ТекСтрокаДоходыРасходы Из ТаблицаФинансовыйРезультат Цикл
		Если ТекСтрокаДоходыРасходы.ЭтоДоходы <> ЭтоДоходы Тогда
			Продолжить;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ТС) Тогда // если ТС заполнено, то распределять по ТС уже не нужно
			НоваяСтрока = ТаблицаПромежуточная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаДоходыРасходы);
			Продолжить;
		КонецЕсли;
				
		Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
			//ТекСтатья = ?(ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Статья), ТекСтрокаДоходыРасходы.Статья, Справочники.уатСтатьиДоходов.ОсновнаяСтатьяДоходов);
			ТекСтатья = ТекСтрокаДоходыРасходы.Статья;
			СпособРаспределенияМеждуТС = ТекСтатья.СпособРаспределенияМеждуТС;
		Иначе
			//ТекСтатья = ?(ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Статья), ТекСтрокаДоходыРасходы.Статья, Справочники.уатСтатьиРасходов.ОсновнаяСтатьяРасходов);
			ТекСтатья = ТекСтрокаДоходыРасходы.Статья;
			СпособРаспределенияМеждуТС = ТекСтатья.СпособРаспределенияЗатрат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СпособРаспределенияМеждуТС)
			ИЛИ СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.НеРаспределять Тогда
			
			НоваяСтрока = ТаблицаПромежуточная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаДоходыРасходы);
			Продолжить;
			
		ИначеЕсли СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоПрочимСтатьямЗатрат Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		ТаблицаТС = ПолучитьТаблицуТС(ДокументСсылка.Дата, ТекСтатья, ДокументСсылка.Организация,
			ТекСтрокаДоходыРасходы.Подразделение, ТекСтрокаДоходыРасходы.Колонна,
			КэшКоэффициентыПоСтатьям, ТаблицаФинансовыйРезультат);
		
		Попытка
			мОбщийКоэффициент = ТаблицаТС.Итог("Коэффициент");
		Исключение
			мОбщийКоэффициент = 0;
		КонецПопытки;	
		
		Если мОбщийКоэффициент = 0 Тогда
			СтрокаПодразделение = ?(ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Подразделение),
				", подразделению """ + ТекСтрокаДоходыРасходы.Подразделение + """", "");
			СтрокаКолонна = ?(ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Колонна),
				", колонне """ + ТекСтрокаДоходыРасходы.Колонна + """", "");
			
			Если СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоСтоимостиТС Тогда
				ТекОшибка = СтрШаблон(" - по статье %1 ""%2""%3%4 у всех ТС нулевая балансовая стоимость",
					?(ТекСтрокаДоходыРасходы.ЭтоДоходы, "доходов", "расходов"),
					ТекСтатья, СтрокаПодразделение, СтрокаКолонна);
					
				Если мсвОшибки.Найти(ТекОшибка) = Неопределено Тогда
					мсвОшибки.Добавить(ТекОшибка);
				КонецЕсли;
				
			ИначеЕсли СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоОбъемуВыработки Тогда
				ТекОшибка = СтрШаблон(" - по статье %1 ""%2""%3%4 у всех ТС нулевая выработка по путевым листам за %5",
					?(ТекСтрокаДоходыРасходы.ЭтоДоходы, "доходов", "расходов"),
					ТекСтатья, СтрокаПодразделение, СтрокаКолонна,
					Формат(ДокументСсылка.Дата, "ДФ='МММ гггг'"));
					
				Если мсвОшибки.Найти(ТекОшибка) = Неопределено Тогда
					мсвОшибки.Добавить(ТекОшибка);
				КонецЕсли;
				
			ИначеЕсли (НЕ ЭтоСтандарт) И СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоОбъемуВыработкиМЛ Тогда
				ТекОшибка = СтрШаблон(" - по статье %1 ""%2""%3%4 у всех ТС нулевая выработка по маршрутным листам за %5",
					?(ТекСтрокаДоходыРасходы.ЭтоДоходы, "доходов", "расходов"),
					ТекСтатья, СтрокаПодразделение, СтрокаКолонна,
					Формат(ДокументСсылка.Дата, "ДФ='МММ гггг'"));
					
				Если мсвОшибки.Найти(ТекОшибка) = Неопределено Тогда
					мсвОшибки.Добавить(ТекОшибка);
				КонецЕсли;
				
			ИначеЕсли СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.Поровну Тогда
				ТекОшибка = СтрШаблон(" - по статье %1 ""%2""%3%4 не найден список использующихся ТС",
					?(ТекСтрокаДоходыРасходы.ЭтоДоходы, "доходов", "расходов"),
					ТекСтатья, СтрокаПодразделение, СтрокаКолонна);
					
				Если мсвОшибки.Найти(ТекОшибка) = Неопределено Тогда
					мсвОшибки.Добавить(ТекОшибка);
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПромежуточная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаДоходыРасходы);
			Продолжить;
		КонецЕсли;
			
		мОбщаяСуммаПоСтатьеУпр = ТекСтрокаДоходыРасходы.СуммаУпр;
		Для Каждого ТекСтрокаТС Из ТаблицаТС Цикл
			Попытка
				мСуммаУпр = ТекСтрокаДоходыРасходы.СуммаУпр * ТекСтрокаТС.Коэффициент / мОбщийКоэффициент;
			Исключение
				мСуммаУпр = 0;
			КонецПопытки;	
			
			Если мСуммаУпр <> 0 Тогда
				мНоваяСтрока 				= ТаблицаПромежуточная.Добавить();
				ЗаполнитьЗначенияСвойств(мНоваяСтрока, ТекСтрокаДоходыРасходы);
				мНоваяСтрока.ТС				= ТекСтрокаТС.ТС;
				//Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
				//	мНоваяСтрока.СтатьяДоходов	= ТекСтатья;
				//	мНоваяСтрока.СуммаДоходовУпр = мСуммаУпр;
				//Иначе
				//	мНоваяСтрока.СтатьяРасходов	= ТекСтатья;
				//	мНоваяСтрока.СуммаРасходовУпр = мСуммаУпр;
				//КонецЕсли;
				мНоваяСтрока.Статья	= ТекСтатья;
				мНоваяСтрока.СуммаУпр = мСуммаУпр;
			КонецЕсли;	
			
			мОбщаяСуммаПоСтатьеУпр = мОбщаяСуммаПоСтатьеУпр - мСуммаУпр;
		КонецЦикла;	
		
		// последняя "копейка"
		Если мОбщаяСуммаПоСтатьеУпр <> 0 И мНоваяСтрока <> Неопределено Тогда
			мНоваяСтрока.СуммаУпр = мНоваяСтрока.СуммаУпр + мОбщаяСуммаПоСтатьеУпр;
		КонецЕсли;
	КонецЦикла;
	
	Если мсвОшибки.Количество() > 0 Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + СтрШаблон("Распределение %1 по ТС выполнено не полностью:",
			?(ЭтоДоходы, "доходов", "расходов"));
			
		Для Каждого ТекОшибка Из мсвОшибки Цикл
			ТекстОшибок = ТекстОшибок + "
				|	" + ТекОшибка;
		КонецЦикла;
	КонецЕсли;
	
	// расходы, расчитываемые по другим (прочим) расходам
	Если НЕ ЭтоДоходы Тогда
		ТаблицаТСврем = ТаблицаФинансовыйРезультат.Скопировать();
		ТаблицаТСврем.Свернуть("ТС");
		ТаблицаТСврем.Колонки.Добавить("СуммаУпр");
			
		Для Каждого ТекСтрокаДоходыРасходы Из ТаблицаФинансовыйРезультат Цикл
			Если ТекСтрокаДоходыРасходы.ЭтоДоходы
				ИЛИ ТекСтрокаДоходыРасходы.Статья.СпособРаспределенияЗатрат <> Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоПрочимСтатьямЗатрат
				ИЛИ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ТС) Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаТСврем.ЗаполнитьЗначения(0, "СуммаУпр");
			
			мОбщаяСуммаУпр  = 0;
			Для Каждого ТекТС Из ТаблицаТСврем Цикл
				Для Каждого ТекСтрокаПрочиеЗатраты Из ТекСтрокаДоходыРасходы.Статья.ПрямыеРасходы Цикл
					мсвСтрокиПоиска = ТаблицаФинансовыйРезультат.НайтиСтроки(Новый Структура("ТС, Статья", ТекТС.ТС, ТекСтрокаПрочиеЗатраты.СтатьяРасходов));
					Для Каждого ТекСтрокаПоиска Из мсвСтрокиПоиска Цикл
						ТекТС.СуммаУпр = ТекТС.СуммаУпр + ТекСтрокаПоиска.СуммаУпр;
						мОбщаяСуммаУпр = мОбщаяСуммаУпр + ТекСтрокаПоиска.СуммаУпр;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Если мОбщаяСуммаУпр = 0 Тогда //распределять не на что, просто переносим как есть
				мНоваяСтрока = ТаблицаПромежуточная.Добавить();
				ЗаполнитьЗначенияСвойств(мНоваяСтрока, ТекСтрокаДоходыРасходы);
			Иначе
				мОстатокСуммы = ТекСтрокаДоходыРасходы.СуммаУпр;
			
				Для Каждого ТекТС Из ТаблицаТСврем Цикл
					мСуммаУпр = ТекСтрокаДоходыРасходы.СуммаУпр * ТекТС.СуммаУпр / мОбщаяСуммаУпр;
					
					Если мСуммаУпр = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					мНоваяСтрока 				  = ТаблицаПромежуточная.Добавить();
					ЗаполнитьЗначенияСвойств(мНоваяСтрока, ТекСтрокаДоходыРасходы);
					мНоваяСтрока.ТС				  = ТекТС.ТС;
					мНоваяСтрока.Статья	  = ТекСтрокаДоходыРасходы.Статья;
					мНоваяСтрока.СуммаУпр = мСуммаУпр;
					
					мОстатокСуммы = мОстатокСуммы - мСуммаУпр;
				КонецЦикла;
				
				// последняя "копейка"
				Если мОстатокСуммы <> 0 И мНоваяСтрока <> Неопределено Тогда
					мНоваяСтрока.СуммаУпр = мНоваяСтрока.СуммаУпр + мОстатокСуммы;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	мсвСтрокУдалить = ТаблицаФинансовыйРезультат.НайтиСтроки(Новый Структура("ЭтоДоходы", ЭтоДоходы));
	Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
		ТаблицаФинансовыйРезультат.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаПромежуточная Цикл
		НоваяСтрока = ТаблицаФинансовыйРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

// Распределение затрат внутри ТС между значениями аналитик
// Параметры:
// - ДокументСсылка - ссылка на документ уатРаспределениеЗатрат, уатПутевойЛист
//		если ссылка на ПЛ, то распределение выполняется по выработке только этого ПЛ
// - ТаблицаЗатратПромежуточная - входная таблица затрат по ТС
// - ТаблицаЗатрат - выходная таблица распределенных затрат между аналитиками
//
Процедура РаспределитьЗатратыМеждуАналитиками(ДокументСсылка, ТаблицаФинансовыйРезультат, ТекстОшибок) Экспорт
	
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	флЭтоТПЛ = уатРаботаСМетаданными.уатЕстьДокумент("уатТехнологическийПутевойЛист")
		И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист");
	флРаспределениеПЛ = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатПутевойЛист") ИЛИ флЭтоТПЛ);
		
	УчетЗаказовВПЛ = ПолучитьФункциональнуюОпцию("уатУчетЗаказовНаТСвПутевыхЛистах");
	
	Если флРаспределениеПЛ Тогда
		ТаблицаФинансовыйРезультат.Колонки.СтатьяРасходов.Имя = "Статья";
		ТаблицаФинансовыйРезультат.Колонки.Добавить("ЭтоДоходы");
		ТаблицаФинансовыйРезультат.ЗаполнитьЗначения(Ложь, "ЭтоДоходы");
		ТаблицаФинансовыйРезультат.Колонки.Добавить("Маршрут");
		ТаблицаФинансовыйРезультат.Колонки.Добавить("Контрагент");
		ТаблицаФинансовыйРезультат.Колонки.Добавить("Подразделение");
		ТаблицаФинансовыйРезультат.Колонки.Добавить("Заказ");
		Если НЕ ЭтоСтандарт Тогда
			ТаблицаФинансовыйРезультат.Колонки.Добавить("Менеджер");
			ТаблицаФинансовыйРезультат.Колонки.Добавить("ОбъектСтроительства");
			ТаблицаФинансовыйРезультат.Колонки.Добавить("ВидПеревозки");
			ТаблицаФинансовыйРезультат.Колонки.Добавить("НаправлениеПеревозки");
		КонецЕсли;
	Иначе
		// Добавляем фиктивные колонки (если распределение выполняется не из ПЛ), чтобы не вставлять много условий флРаспределениеПЛ
		ТаблицаФинансовыйРезультат.Колонки.Добавить("СуммаРегл",   Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаФинансовыйРезультат.Колонки.Добавить("СуммаНДС",    Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	
	ТаблицаПромежуточная = ТаблицаФинансовыйРезультат.СкопироватьКолонки();
		
	ТаблицаПромежуточная.Колонки.Добавить("СтатьяДоходов",       Новый ОписаниеТипов("СправочникСсылка.уатСтатьиДоходов"));
	ТаблицаПромежуточная.Колонки.Добавить("СтатьяРасходов",      Новый ОписаниеТипов("СправочникСсылка.уатСтатьиРасходов"));
	ТаблицаПромежуточная.Колонки.Добавить("СуммаДоходовУпр",     Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПромежуточная.Колонки.Добавить("СуммаРасходовУпр",    Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПромежуточная.Колонки.Добавить("СуммаРасходовРегл",   Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПромежуточная.Колонки.Добавить("СуммаРасходовНДС",    Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПромежуточная.Колонки.Добавить("СуммаРасходовНДСУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПромежуточная.Колонки.Добавить("СуммаДоходовНДСУпр",  Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	
	// Таблица колонн ТС для получения способа распределения, если он задается по колоннам
	ЗапросКолонны = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаСреза, ) КАК уатМестонахождениеТССрезПоследних");
	ЗапросКолонны.УстановитьПараметр("ДатаСреза", КонецМесяца(ДокументСсылка.Дата));
	тблКолонныТС = ЗапросКолонны.Выполнить().Выгрузить();
	
	// распределяем затраты внутри ТС между аналитиками
	Для Каждого ТекСтрокаДоходыРасходы Из ТаблицаФинансовыйРезультат Цикл
		Если флРаспределениеПЛ И УчетЗаказовВПЛ И НЕ флЭтоТПЛ Тогда
			флРаспределять = Истина;
			ПараметрВыработкиРаспределенияМеждуАналитиками_ПробегОбщий = ТекСтрокаДоходыРасходы.ТС.Модель.НаличиеСпидометра;
			ПараметрВыработкиПробегОбщий_ВыбиратьМаксимальный =
				(Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособРасчетаПоНомеруЭтапа = 1
				ИЛИ Справочники.уатПараметрыВыработки.ПробегПорожний.СпособРасчетаПоНомеруЭтапа = 1);
			КоэффициентПересчетаВремяВПробег =
				?(Справочники.уатПараметрыВыработки.ВремяВРаботе.ВесовойКоэффициентДоходовРасходов = 0, 1,
				Справочники.уатПараметрыВыработки.ВремяВРаботе.ВесовойКоэффициентДоходовРасходов) /
				?(Справочники.уатПараметрыВыработки.ПробегОбщий.ВесовойКоэффициентДоходовРасходов = 0, 1,
				Справочники.уатПараметрыВыработки.ПробегОбщий.ВесовойКоэффициентДоходовРасходов);
		Иначе
			// колонна текущего ТС
			СтрокаКолонны = тблКолонныТС.Найти(ТекСтрокаДоходыРасходы.ТС, "ТС");
			Если СтрокаКолонны = Неопределено Тогда
				ТекКолонна = Неопределено;
			Иначе
				ТекКолонна = СтрокаКолонны.Колонна;
			КонецЕсли;
			
			ТекСпособРаспределениеНепрямыхДоходовПоЗаказам = ТекСтрокаДоходыРасходы.Статья[?(ТипЗнч(ТекСтрокаДоходыРасходы.Статья) = Тип("СправочникСсылка.уатСтатьиДоходов"),
				"СпособРаспределениеНепрямыхДоходовПоЗаказам", "СпособРаспределениеНепрямыхРасходовПоЗаказам")];
			флРаспределениеПоСобственнымЗаказам = (ТекСпособРаспределениеНепрямыхДоходовПоЗаказам = Перечисления.уатРаспределениеНепрямыхДоходовРасходовПоЗаказам.РаспределятьПоСобственнымЗаказам);
			
			флСтатьяДоходов = (ТипЗнч(ТекСтрокаДоходыРасходы.Статья) = Тип("СправочникСсылка.уатСтатьиДоходов"));
			
			// получаем признак необходимости распределения
			флРаспределять = Истина;
			СпособРаспределенияМеждуАналитиками = Неопределено;
			ПараметрВыработкиРаспределенияМеждуАналитиками = Неопределено;
			
			// Если заполнена хотя бы одна аналитика распределения, то считаем,
			// что доходы/расходы уже были распределены ранее и переносим их 1:1 в фин. рез.
			Если НЕ флРаспределениеПЛ И ((ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Маршрут)
				ИЛИ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Контрагент)
				ИЛИ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Подразделение))
				ИЛИ (НЕ ЭтоСтандарт)
				И (ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ОбъектСтроительства)
				ИЛИ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ВидПеревозки)
				ИЛИ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.НаправлениеПеревозки))) Тогда
				
				флРаспределять = Ложь;
			КонецЕсли;
			
			Если флРаспределять И НЕ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Статья) Тогда
				флРаспределять = Ложь;
			КонецЕсли;
			Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
				СпособРаспределенияМеждуАналитиками = ТекСтрокаДоходыРасходы.Статья.СпособРаспределенияМеждуАналитиками;
				Если СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять
					ИЛИ (НЕ ЗначениеЗаполнено(СпособРаспределенияМеждуАналитиками)) Тогда
						
					флРаспределять = Ложь;
				Иначе
					ПараметрВыработкиРаспределенияМеждуАналитиками = ТекСтрокаДоходыРасходы.Статья.ПараметрВыработкиРаспределенияМеждуАналитиками;
				КонецЕсли;
			Иначе
				Если флРаспределять И ТекСтрокаДоходыРасходы.Статья.ПараметрыВыработкиРаспределенияМеждуАналитиками.Количество() = 0 Тогда
					флРаспределять = Ложь;
				КонецЕсли;
				Если флРаспределять Тогда
					Если ТекСтрокаДоходыРасходы.Статья.ВариантСпособаРаспределенияЗатратМеждуАналитиками = 0 Тогда
						СпособРаспределенияМеждуАналитиками = ТекСтрокаДоходыРасходы.Статья.ПараметрыВыработкиРаспределенияМеждуАналитиками[0].СпособРаспределенияЗатратМеждуАналитиками;
						Если СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять
							ИЛИ (НЕ ЗначениеЗаполнено(СпособРаспределенияМеждуАналитиками)) Тогда
							
							флРаспределять = Ложь;
						Иначе
							ПараметрВыработкиРаспределенияМеждуАналитиками = ТекСтрокаДоходыРасходы.Статья.ПараметрыВыработкиРаспределенияМеждуАналитиками[0].ПараметрВыработки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если флРаспределять Тогда
					Если ТекСтрокаДоходыРасходы.Статья.ВариантСпособаРаспределенияЗатратМеждуАналитиками = 1 Тогда
						СтрокаКолонны = ТекСтрокаДоходыРасходы.Статья.ПараметрыВыработкиРаспределенияМеждуАналитиками.Найти(ТекКолонна, "Колонна");
						Если СтрокаКолонны = Неопределено Тогда
							флРаспределять = Ложь;
						Иначе
							СпособРаспределенияМеждуАналитиками = СтрокаКолонны.СпособРаспределенияЗатратМеждуАналитиками;
							Если СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять
								ИЛИ НЕ ЗначениеЗаполнено(СпособРаспределенияМеждуАналитиками) Тогда
								
								флРаспределять = Ложь;
							ИначеЕсли (СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.РаспределятьПоВыработке
								ИЛИ (НЕ ЭтоСтандарт) И СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.РаспределятьПоЗаказам) Тогда
								
								ПараметрВыработкиРаспределенияМеждуАналитиками = СтрокаКолонны.ПараметрВыработки;
								Если НЕ ЗначениеЗаполнено(ПараметрВыработкиРаспределенияМеждуАналитиками) Тогда
									флРаспределять = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Если используется распределение по выработке из МЛ (по заказам), но параметр выработки в статье имеет способ "В
			// целом по документу", то также не распределяем
			Если НЕ ЭтоСтандарт 
				И флРаспределять 
				И СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.РаспределятьПоЗаказам
				И ПараметрВыработкиРаспределенияМеждуАналитиками.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
				флРаспределять = Ложь;
			КонецЕсли;
			
			// Код для исключения возжных некорректных значений настройки СпособРаспределенияМеждуАналитиками в Стандарте,
			//	в частности, если указано распределение по выработке МЛ
			Если ЭтоСтандарт
				И флРаспределять
				И СпособРаспределенияМеждуАналитиками <> Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.РаспределятьПоВыработке Тогда
				флРаспределять = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ флРаспределять Тогда
			мНоваяСтрока = ТаблицаПромежуточная.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, ТекСтрокаДоходыРасходы);
			Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
				мНоваяСтрока.СтатьяДоходов       = мНоваяСтрока.Статья;
				мНоваяСтрока.СуммаДоходовУпр     = мНоваяСтрока.СуммаУпр;
				мНоваяСтрока.СуммаДоходовНДСУпр  = мНоваяСтрока.СуммаНДСУпр;
			Иначе
				мНоваяСтрока.СтатьяРасходов      = мНоваяСтрока.Статья;
				мНоваяСтрока.СуммаРасходовУпр    = мНоваяСтрока.СуммаУпр;
				мНоваяСтрока.СуммаРасходовРегл   = мНоваяСтрока.СуммаРегл;
				мНоваяСтрока.СуммаРасходовНДС    = мНоваяСтрока.СуммаНДС;
				мНоваяСтрока.СуммаРасходовНДСУпр = мНоваяСтрока.СуммаНДСУпр;
			КонецЕсли;
						
		Иначе
			Если флРаспределениеПЛ И УчетЗаказовВПЛ И НЕ флЭтоТПЛ Тогда // распределение по Заказам на ТС внутри ПЛ
				мсвУчитанныеЭтапы = Новый Массив;
				ТаблицаВыработкаТС = Новый ТаблицаЗначений;
				ТаблицаВыработкаТС.Колонки.Добавить("Заказ");
				ТаблицаВыработкаТС.Колонки.Добавить("Менеджер");
				ТаблицаВыработкаТС.Колонки.Добавить("Контрагент");
				ТаблицаВыработкаТС.Колонки.Добавить("Подразделение");
				ТаблицаВыработкаТС.Колонки.Добавить("Выработка", Новый ОписаниеТипов("Число"));
				ТаблицаВыработкаТС.Колонки.Добавить("ОбъектСтроительства");
				ТаблицаВыработкаТС.Колонки.Добавить("Маршрут");
				ТаблицаВыработкаТС.Колонки.Добавить("ВидПеревозки");
				ТаблицаВыработкаТС.Колонки.Добавить("НаправлениеПеревозки");
				
				Для Каждого ТекСтрокаЗадание Из ДокументСсылка.Задание Цикл
					Если НЕ ТекСтрокаЗадание.Выполнено Тогда
						Продолжить;
					КонецЕсли;
					
					// Пропускаем строки с нумерацией этапов, если выбирается максимальный пробег и этот этап уже был учтен ранее
					Если ТекСтрокаЗадание.НомерЕздки <> 0
						И ПараметрВыработкиРаспределенияМеждуАналитиками_ПробегОбщий
						И ПараметрВыработкиПробегОбщий_ВыбиратьМаксимальный
						И мсвУчитанныеЭтапы.Найти(ТекСтрокаЗадание.НомерЕздки) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаВыработкаТС.Добавить();
					НоваяСтрока.Заказ = ТекСтрокаЗадание.ЗаказНаТС;
					
					Если ЗначениеЗаполнено(ТекСтрокаЗадание.ЗаказНаТС) Тогда
						НоваяСтрока.Контрагент               = ТекСтрокаЗадание.ЗаказНаТС.Контрагент;
						НоваяСтрока.Подразделение            = ТекСтрокаЗадание.ЗаказНаТС.Подразделение;
						Если НЕ ЭтоСтандарт Тогда
							НоваяСтрока.Менеджер             = ТекСтрокаЗадание.ЗаказНаТС.Ответственный;
							НоваяСтрока.ОбъектСтроительства  = ТекСтрокаЗадание.ЗаказНаТС.ОбъектСтроительства;
							НоваяСтрока.Маршрут              = ТекСтрокаЗадание.ЗаказНаТС.Маршрут;
							НоваяСтрока.ВидПеревозки         = ТекСтрокаЗадание.ЗаказНаТС.ВидПеревозки;
							НоваяСтрока.НаправлениеПеревозки = ТекСтрокаЗадание.ЗаказНаТС.НаправлениеПеревозки;
						КонецЕсли;
					Иначе
						НоваяСтрока.Контрагент               = ТекСтрокаЗадание.Контрагент;
						НоваяСтрока.Подразделение            = ТекСтрокаЗадание.Подразделение;
						Если НЕ ЭтоСтандарт Тогда
							НоваяСтрока.ОбъектСтроительства  = ТекСтрокаЗадание.ОбъектСтроительства;
							НоваяСтрока.Маршрут              = ТекСтрокаЗадание.Маршрут;
							НоваяСтрока.ВидПеревозки         = ТекСтрокаЗадание.ВидПеревозки;
							НоваяСтрока.НаправлениеПеревозки = ТекСтрокаЗадание.НаправлениеПеревозки;
						КонецЕсли;
					КонецЕсли;
					
					Если ПараметрВыработкиРаспределенияМеждуАналитиками_ПробегОбщий Тогда
						НоваяСтрока.Выработка = (ТекСтрокаЗадание.КоличествоКмГруз + ТекСтрокаЗадание.КоличествоКмПорожний)
							* ТекСтрокаЗадание.КоличествоЕздок;
						Если НоваяСтрока.Выработка = 0 Тогда // если пробег нулевой, то используем время в работе
							НоваяСтрока.Выработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадание.КоличествоЧасов)/3600
								* КоэффициентПересчетаВремяВПробег;
						КонецЕсли;
					Иначе
						НоваяСтрока.Выработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадание.КоличествоЧасов)/3600;
					КонецЕсли;
					
					Если ТекСтрокаЗадание.НомерЕздки <> 0 Тогда
						мсвУчитанныеЭтапы.Добавить(ТекСтрокаЗадание.НомерЕздки);
					КонецЕсли;
				КонецЦикла;
				ТаблицаВыработкаТС.Свернуть("Заказ, Менеджер, Контрагент, Подразделение, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки", "Выработка");
				
			ИначеЕсли СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.РаспределятьПоВыработке Тогда //распределять по выработке ТС
				Если флРаспределениеПЛ Тогда
					Если ЭтоСтандарт Тогда
						ЗапросВыработка = Новый Запрос(
						"ВЫБРАТЬ
						|	уатПутевойЛистВыработкаТС.Контрагент КАК Контрагент,
						|	уатПутевойЛистВыработкаТС.Подразделение КАК Подразделение,
						|	ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка) КАК Маршрут,
						|	NULL КАК Заказ,
						|	НЕОПРЕДЕЛЕНО КАК Менеджер,
						|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Выработка
						|ИЗ
						|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
						|ГДЕ
						|	уатПутевойЛистВыработкаТС.Ссылка = &ДокументСсылка
						|	И уатПутевойЛистВыработкаТС.ТС = &ТС
						|	И уатПутевойЛистВыработкаТС.ПараметрВыработки = &ПараметрВыработки
						|
						|СГРУППИРОВАТЬ ПО
						|	уатПутевойЛистВыработкаТС.Подразделение,
						|	уатПутевойЛистВыработкаТС.Контрагент");
					Иначе
						ЗапросВыработка = Новый Запрос(
						"ВЫБРАТЬ
						|	уатПутевойЛистВыработкаТС.Контрагент КАК Контрагент,
						|	уатПутевойЛистВыработкаТС.Подразделение КАК Подразделение,
						|	уатПутевойЛистВыработкаТС.ОбъектСтроительства КАК ОбъектСтроительства,
						|	уатПутевойЛистВыработкаТС.Маршрут КАК Маршрут,
						|	уатПутевойЛистВыработкаТС.ВидПеревозки КАК ВидПеревозки,
						|	уатПутевойЛистВыработкаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
						|	NULL КАК Заказ,
						|	НЕОПРЕДЕЛЕНО КАК Менеджер,
						|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Выработка
						|ИЗ
						|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
						|ГДЕ
						|	уатПутевойЛистВыработкаТС.Ссылка = &ДокументСсылка
						|	И уатПутевойЛистВыработкаТС.ТС = &ТС
						|	И уатПутевойЛистВыработкаТС.ПараметрВыработки = &ПараметрВыработки
						|
						|СГРУППИРОВАТЬ ПО
						|	уатПутевойЛистВыработкаТС.Маршрут,
						|	уатПутевойЛистВыработкаТС.ОбъектСтроительства,
						|	уатПутевойЛистВыработкаТС.Подразделение,
						|	уатПутевойЛистВыработкаТС.Контрагент,
						|	уатПутевойЛистВыработкаТС.НаправлениеПеревозки,
						|	уатПутевойЛистВыработкаТС.ВидПеревозки");
					КонецЕсли;
					ЗапросВыработка.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
					ЗапросВыработка.УстановитьПараметр("ТС", ТекСтрокаДоходыРасходы.ТС);
					ЗапросВыработка.УстановитьПараметр("ПараметрВыработки", ПараметрВыработкиРаспределенияМеждуАналитиками);
					ТаблицаВыработкаТС = ЗапросВыработка.Выполнить().Выгрузить();
					
				Иначе
					// сформируем список из путевых листов, подлежащих к распределению затрат
					мСписокПЛДляПериода = Новый Массив;
					//Если ТипЗнч(ТекСтрокаДоходыРасходы.ДокументВыпуска) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
					//	//Если документ выпуска - путевой лист, то в списке будет только этот п/л
					//	мСписокПЛДляПериода.Добавить(ТекСтрокаДоходыРасходы.ДокументВыпуска);
					//Иначе
					// Если документ выпуска - не путевой лист, то выбираем все п/л, которые попадают в заданный период
					ЗапросПЛДляПериода = Новый Запрос;
					ЗапросПЛДляПериода.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	уатПутевойЛист.Ссылка
					|ИЗ
					|	Документ.уатПутевойЛист КАК уатПутевойЛист
					|ГДЕ
					|	уатПутевойЛист.Проведен
					|	И уатПутевойЛист.ТранспортноеСредство = &ТС
					|	И уатПутевойЛист.ДатаЗакрытия МЕЖДУ &ДатаНач И &ДатаКон";
					Если флРаспределениеПоСобственнымЗаказам Тогда
						ЗапросПЛДляПериода.УстановитьПараметр("ТС", ТекСтрокаДоходыРасходы.ТС);
					Иначе
						ЗапросПЛДляПериода.Текст = СтрЗаменить(ЗапросПЛДляПериода.Текст, "И уатПутевойЛист.ТранспортноеСредство = &ТС", ""); 
					КонецЕсли;
					ЗапросПЛДляПериода.УстановитьПараметр("ДатаНач", НачалоМесяца(ДокументСсылка.Дата));
					ЗапросПЛДляПериода.УстановитьПараметр("ДатаКон", КонецМесяца(ДокументСсылка.Дата));
					
					мСписокПЛДляПериода = ЗапросПЛДляПериода.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
					//КонецЕсли;
					
					ЗапросВыработка = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	уатВыработкаТСОбороты.Подразделение КАК Подразделение,
					|	уатВыработкаТСОбороты.Контрагент КАК Контрагент,
					|	//ДОПТЕКСТ
					|	NULL КАК Заказ,
					|	НЕОПРЕДЕЛЕНО КАК Менеджер,
					|	уатВыработкаТСОбороты.КоличествоОборот КАК Выработка
					|ИЗ
					|	РегистрНакопления.уатВыработкаТС.Обороты(
					|			&ДатаНач,
					|			&ДатаКон,
					|			Регистратор,
					|			Организация = &Организация
					|				И ТС = &ТС
					|				И ПараметрВыработки = &ПараметрВыработки) КАК уатВыработкаТСОбороты
					|ГДЕ
					|	уатВыработкаТСОбороты.Регистратор В(&мсвРегистратор)");
					Если флРаспределениеПоСобственнымЗаказам Тогда
						ЗапросВыработка.УстановитьПараметр("ТС", ТекСтрокаДоходыРасходы.ТС);
					Иначе
						ЗапросВыработка.Текст = СтрЗаменить(ЗапросВыработка.Текст, "И ТС = &ТС", ""); 
					КонецЕсли;
					ЗапросВыработка.УстановитьПараметр("Организация", ДокументСсылка.Организация);
					ЗапросВыработка.УстановитьПараметр("ДатаНач", НачалоМесяца(ДокументСсылка.Дата));
					ЗапросВыработка.УстановитьПараметр("ДатаКон", КонецМесяца(ДокументСсылка.Дата));
					ЗапросВыработка.УстановитьПараметр("ТС", ТекСтрокаДоходыРасходы.ТС);
					ЗапросВыработка.УстановитьПараметр("ПараметрВыработки", ПараметрВыработкиРаспределенияМеждуАналитиками);
					ЗапросВыработка.УстановитьПараметр("мсвРегистратор", мСписокПЛДляПериода);
					
					Если ЭтоСтандарт Тогда
						ЗапросВыработка.Текст = СтрЗаменить(ЗапросВыработка.Текст, "//ДОПТЕКСТ", "ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка) КАК Маршрут,");
					Иначе
						ЗапросВыработка.Текст = СтрЗаменить(ЗапросВыработка.Текст, "//ДОПТЕКСТ",
						"уатВыработкаТСОбороты.Маршрут КАК Маршрут,
						|уатВыработкаТСОбороты.ОбъектСтроительства КАК ОбъектСтроительства,
						|уатВыработкаТСОбороты.ВидПеревозки КАК ВидПеревозки,
						|уатВыработкаТСОбороты.НаправлениеПеревозки КАК НаправлениеПеревозки,");
					КонецЕсли;
					
					ТаблицаВыработкаТС = ЗапросВыработка.Выполнить().Выгрузить();
				КонецЕсли;
												
			ИначеЕсли НЕ ЭтоСтандарт Тогда //распределять по выработке по МЛ (по заказам)
				ЗапросВыработка = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатВыработкаПоМаршрутнымЛистам_уэ.Подразделение КАК Подразделение,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.Контрагент КАК Контрагент,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.Маршрут КАК Маршрут,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.ОбъектСтроительства КАК ОбъектСтроительства,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.ВидПеревозки КАК ВидПеревозки,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.НаправлениеПеревозки КАК НаправлениеПеревозки,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.Заказ КАК Заказ,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.Менеджер КАК Менеджер,
				|	уатВыработкаПоМаршрутнымЛистам_уэ.КоличествоОборот КАК Выработка
				|ИЗ
				|	РегистрНакопления.уатВыработкаПоМаршрутнымЛистам_уэ.Обороты(
				|			&ДатаНач,
				|			&ДатаКон,
				|			Регистратор,
				|			Организация = &Организация
				|				И ТС = &ТС
				|				И ПараметрВыработки = &ПараметрВыработки) КАК уатВыработкаПоМаршрутнымЛистам_уэ");
				ЗапросВыработка.УстановитьПараметр("Организация", ДокументСсылка.Организация);
				ЗапросВыработка.УстановитьПараметр("ДатаНач", НачалоМесяца(ДокументСсылка.Дата));
				ЗапросВыработка.УстановитьПараметр("ДатаКон", КонецМесяца(ДокументСсылка.Дата));
				Если флРаспределениеПоСобственнымЗаказам Тогда
					ЗапросВыработка.УстановитьПараметр("ТС", ТекСтрокаДоходыРасходы.ТС);
				Иначе
					ЗапросВыработка.Текст = СтрЗаменить(ЗапросВыработка.Текст, "И ТС = &ТС", ""); 
				КонецЕсли;
				ЗапросВыработка.УстановитьПараметр("ПараметрВыработки", ПараметрВыработкиРаспределенияМеждуАналитиками);
				
				ТаблицаВыработкаТС = ЗапросВыработка.Выполнить().Выгрузить();
				
			КонецЕсли;
			
			Если ЭтоСтандарт Тогда
				ТаблицаВыработкаТС.Свернуть("Подразделение, Контрагент, Заказ, Маршрут", "Выработка");
			Иначе
				ТаблицаВыработкаТС.Свернуть("Подразделение, Контрагент, Заказ, Менеджер, Маршрут, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки", "Выработка");
			КонецЕсли;   
			
			Если ТаблицаВыработкаТС.Количество() > 0 Тогда
				мОбщаяВыработка   = ТаблицаВыработкаТС.Итог("Выработка");
				мОбщаяСуммаУпр	  = ТекСтрокаДоходыРасходы.СуммаУпр;
				мОбщаяСуммаРегл	  = ТекСтрокаДоходыРасходы.СуммаРегл;
				мОбщаяСуммаНДС	  = ТекСтрокаДоходыРасходы.СуммаНДС;
				мОбщаяСуммаНДСУпр = ТекСтрокаДоходыРасходы.СуммаНДСУпр;
								
				Если мОбщаяВыработка = 0 Тогда
					// Общая выработка по заданиям нулевая, поэтому все затраты относим на первую строку задания
					ТекСтрокаВыработки = ТаблицаВыработкаТС[0];
					мНоваяСтрока 				= ТаблицаПромежуточная.Добавить();
					мНоваяСтрока.Подразделение	= ТекСтрокаВыработки.Подразделение;
					мНоваяСтрока.Контрагент		= ТекСтрокаВыработки.Контрагент;
					Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Маршрут) Тогда
						мНоваяСтрока.Маршрут = ТекСтрокаДоходыРасходы.Маршрут;
					Иначе
						мНоваяСтрока.Маршрут = ТекСтрокаВыработки.Маршрут;
					КонецЕсли;
					Если НЕ ЭтоСтандарт Тогда
						Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ОбъектСтроительства) Тогда
							мНоваяСтрока.ОбъектСтроительства = ТекСтрокаДоходыРасходы.ОбъектСтроительства;
						Иначе
							мНоваяСтрока.ОбъектСтроительства = ТекСтрокаВыработки.ОбъектСтроительства;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ВидПеревозки) Тогда
							мНоваяСтрока.ВидПеревозки = ТекСтрокаДоходыРасходы.ВидПеревозки;
						Иначе
							мНоваяСтрока.ВидПеревозки = ТекСтрокаВыработки.ВидПеревозки;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.НаправлениеПеревозки) Тогда
							мНоваяСтрока.НаправлениеПеревозки = ТекСтрокаДоходыРасходы.НаправлениеПеревозки;
						Иначе
							мНоваяСтрока.НаправлениеПеревозки = ТекСтрокаВыработки.НаправлениеПеревозки;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Менеджер) Тогда
							мНоваяСтрока.Менеджер = ТекСтрокаДоходыРасходы.Менеджер;
						Иначе
							мНоваяСтрока.Менеджер = ТекСтрокаВыработки.Менеджер;
						КонецЕсли;
					КонецЕсли;
					мНоваяСтрока.Заказ			= ТекСтрокаВыработки.Заказ;
					мНоваяСтрока.ТС				= ТекСтрокаДоходыРасходы.ТС;
					мНоваяСтрока.Статья	        = ТекСтрокаДоходыРасходы.Статья;
					мНоваяСтрока.СуммаУпр		= мОбщаяСуммаУпр;
					Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
						мНоваяСтрока.СтатьяДоходов       = мНоваяСтрока.Статья;
						мНоваяСтрока.СуммаДоходовУпр     = мОбщаяСуммаУпр;
						мНоваяСтрока.СуммаДоходовНДСУпр  = мОбщаяСуммаНДСУпр;
					Иначе
						мНоваяСтрока.СтатьяРасходов      = мНоваяСтрока.Статья;
						мНоваяСтрока.СуммаРасходовУпр    = мОбщаяСуммаУпр;
						мНоваяСтрока.СуммаРасходовРегл   = мОбщаяСуммаРегл;
						мНоваяСтрока.СуммаРасходовНДС    = мОбщаяСуммаНДС;
						мНоваяСтрока.СуммаРасходовНДСУпр = мОбщаяСуммаНДСУпр;
					КонецЕсли;
					
				Иначе	
					// Если общая выработка по заданиям ненулевая, то затраты относим только на строки с ненулевой выработкой
					Для Каждого ТекСтрокаВыработки Из ТаблицаВыработкаТС Цикл 
						Если ТекСтрокаВыработки.Выработка <> 0 Тогда
							мНоваяСтрока 				= ТаблицаПромежуточная.Добавить();
							мНоваяСтрока.Подразделение	= ТекСтрокаВыработки.Подразделение;
							мНоваяСтрока.Контрагент		= ТекСтрокаВыработки.Контрагент;
							Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Маршрут) Тогда
								мНоваяСтрока.Маршрут = ТекСтрокаДоходыРасходы.Маршрут;
							Иначе
								мНоваяСтрока.Маршрут = ТекСтрокаВыработки.Маршрут;
							КонецЕсли;
							Если НЕ ЭтоСтандарт Тогда
								Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ОбъектСтроительства) Тогда
									мНоваяСтрока.ОбъектСтроительства = ТекСтрокаДоходыРасходы.ОбъектСтроительства;
								Иначе
									мНоваяСтрока.ОбъектСтроительства = ТекСтрокаВыработки.ОбъектСтроительства;
								КонецЕсли;
								Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.ВидПеревозки) Тогда
									мНоваяСтрока.ВидПеревозки = ТекСтрокаДоходыРасходы.ВидПеревозки;
								Иначе
									мНоваяСтрока.ВидПеревозки = ТекСтрокаВыработки.ВидПеревозки;
								КонецЕсли;
								Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.НаправлениеПеревозки) Тогда
									мНоваяСтрока.НаправлениеПеревозки = ТекСтрокаДоходыРасходы.НаправлениеПеревозки;
								Иначе
									мНоваяСтрока.НаправлениеПеревозки = ТекСтрокаВыработки.НаправлениеПеревозки;
								КонецЕсли;
								Если ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Менеджер) Тогда
									мНоваяСтрока.Менеджер = ТекСтрокаДоходыРасходы.Менеджер;
								Иначе
									мНоваяСтрока.Менеджер = ТекСтрокаВыработки.Менеджер;
								КонецЕсли;
							КонецЕсли;
							мНоваяСтрока.Заказ			= ТекСтрокаВыработки.Заказ;
							мНоваяСтрока.ТС				= ТекСтрокаДоходыРасходы.ТС;
							мНоваяСтрока.Статья      	= ТекСтрокаДоходыРасходы.Статья;
							мНоваяСтрока.СуммаУпр		= ТекСтрокаДоходыРасходы.СуммаУпр    * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
							мНоваяСтрока.СуммаРегл      = ТекСтрокаДоходыРасходы.СуммаРегл   * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
							мНоваяСтрока.СуммаНДС       = ТекСтрокаДоходыРасходы.СуммаНДС    * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
							мНоваяСтрока.СуммаНДСУпр    = ТекСтрокаДоходыРасходы.СуммаНДСУпр * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
								
							Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
								мНоваяСтрока.СтатьяДоходов       = мНоваяСтрока.Статья;
								мНоваяСтрока.СуммаДоходовУпр     = мНоваяСтрока.СуммаУпр;
								мНоваяСтрока.СуммаДоходовНДСУпр  = мНоваяСтрока.СуммаНДСУпр;
							Иначе
								мНоваяСтрока.СтатьяРасходов      = мНоваяСтрока.Статья;
								мНоваяСтрока.СуммаРасходовУпр    = мНоваяСтрока.СуммаУпр;
								мНоваяСтрока.СуммаРасходовРегл   = мНоваяСтрока.СуммаРегл;
								мНоваяСтрока.СуммаРасходовНДС    = мНоваяСтрока.СуммаНДС;
								мНоваяСтрока.СуммаРасходовНДСУпр = мНоваяСтрока.СуммаНДСУпр;
							КонецЕсли;
							
							мОбщаяСуммаУпр     = мОбщаяСуммаУпр    - мНоваяСтрока.СуммаУпр;
							мОбщаяСуммаРегл    = мОбщаяСуммаРегл   - мНоваяСтрока.СуммаРегл;
							мОбщаяСуммаНДС     = мОбщаяСуммаНДС    - мНоваяСтрока.СуммаНДС;
							мОбщаяСуммаНДСУпр  = мОбщаяСуммаНДСУпр - мНоваяСтрока.СуммаНДСУпр;
						КонецЕсли;	
					КонецЦикла;	
					
					// последняя "копейка"
					Если мОбщаяСуммаУпр <> 0 Тогда
						мНоваяСтрока.СуммаУпр = мНоваяСтрока.СуммаУпр + мОбщаяСуммаУпр;
					КонецЕсли;
					Если мОбщаяСуммаРегл <> 0 Тогда
						мНоваяСтрока.СуммаРегл = мНоваяСтрока.СуммаРегл + мОбщаяСуммаРегл;
					КонецЕсли;
					Если мОбщаяСуммаНДС <> 0 Тогда
						мНоваяСтрока.СуммаНДС = мНоваяСтрока.СуммаНДС + мОбщаяСуммаНДС;
					КонецЕсли;
					Если мОбщаяСуммаНДСУпр <> 0 Тогда
						мНоваяСтрока.СуммаНДСУпр = мНоваяСтрока.СуммаНДСУпр + мОбщаяСуммаНДСУпр;
					КонецЕсли;
				КонецЕсли;	
				
			Иначе
				// нечего распределять по заказам
				мНоваяСтрока = ТаблицаПромежуточная.Добавить();
				ЗаполнитьЗначенияСвойств(мНоваяСтрока, ТекСтрокаДоходыРасходы);
				Если ТекСтрокаДоходыРасходы.ЭтоДоходы Тогда
					мНоваяСтрока.СтатьяДоходов       = мНоваяСтрока.Статья;
					мНоваяСтрока.СуммаДоходовУпр     = мНоваяСтрока.СуммаУпр;
					мНоваяСтрока.СуммаДоходовНДСУпр  = мНоваяСтрока.СуммаНДСУпр;
				Иначе
					мНоваяСтрока.СтатьяРасходов      = мНоваяСтрока.Статья;
					мНоваяСтрока.СуммаРасходовУпр    = мНоваяСтрока.СуммаУпр;
					мНоваяСтрока.СуммаРасходовРегл   = мНоваяСтрока.СуммаРегл;
					мНоваяСтрока.СуммаРасходовНДС    = мНоваяСтрока.СуммаНДС;
					мНоваяСтрока.СуммаРасходовНДСУпр = мНоваяСтрока.СуммаНДСУпр;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаФинансовыйРезультат = ТаблицаПромежуточная;
	ТаблицаФинансовыйРезультат.Колонки.Удалить("Статья");
	ТаблицаФинансовыйРезультат.Колонки.Удалить("СуммаУпр");
	ТаблицаФинансовыйРезультат.Колонки.Удалить("СуммаРегл");
	ТаблицаФинансовыйРезультат.Колонки.Удалить("СуммаНДС");
	ТаблицаФинансовыйРезультат.Колонки.Удалить("СуммаНДСУпр");
	
	Если ЭтоСтандарт Тогда
		ТаблицаФинансовыйРезультат.Свернуть("СтатьяДоходов, СтатьяРасходов, Подразделение, ТС, Заказ, Контрагент, Маршрут",
			"СуммаДоходовУпр, СуммаРасходовУпр, СуммаРасходовРегл, СуммаРасходовНДС, СуммаДоходовНДСУпр, СуммаРасходовНДСУпр")
	Иначе
		ТаблицаФинансовыйРезультат.Свернуть("СтатьяДоходов, СтатьяРасходов, Подразделение, ТС, Заказ, Менеджер, Контрагент, Маршрут, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки",
			"СуммаДоходовУпр, СуммаРасходовУпр, СуммаРасходовРегл, СуммаРасходовНДС, СуммаДоходовНДСУпр, СуммаРасходовНДСУпр")
	КонецЕсли;
	
	Если флРаспределениеПЛ Тогда
		ТаблицаПромежуточная.Колонки.СуммаРасходовУпр.Имя     = "СуммаУпр";
		ТаблицаПромежуточная.Колонки.СуммаРасходовРегл.Имя    = "СуммаРегл";
		ТаблицаПромежуточная.Колонки.СуммаРасходовНДС.Имя     = "СуммаНДС";
		ТаблицаПромежуточная.Колонки.СуммаРасходовНДСУпр.Имя  = "СуммаНДСУпр";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

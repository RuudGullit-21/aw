////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации "Управление автотранспортом".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеАвтотранспортомПроф";
	Описание.Версия = "2.2.26.1";
	Если Описание.Свойство("ИдентификаторИнтернетПоддержки") Тогда
		Описание.ИдентификаторИнтернетПоддержки = "UAT_Prof";
	КонецЕсли;
	
	// Необходимо для запуска конфигурации ТЛЭ КОРП в варианте поставки ПРОФ
	Если Метаданные.Имя = "ТЛЭиУправлениеАвтотранспортомКОРП" 
		И уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		МодульОбновлениеИнформационнойБазы = ОбщегоНазначения.ОбщийМодуль("уатОбновлениеИнформационнойБазы_уэ");
		МодульОбновлениеИнформационнойБазы.ПриДобавленииПодсистемы(Описание);
		Описание.ТребуемыеПодсистемы.Очистить();
	КонецЕсли;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("УправлениеЛицензированием");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область Обработчики_выполняемые_при_каждом_обновлении_ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьИдентификаторыОбъектовМетаданных";
	Обработчик.МонопольныйРежим = Истина;
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНаборыДопРеквизитовИСведений";
	Обработчик.МонопольныйРежим = Истина;
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьКонстантуЭтоДемоБаза";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_заполнении_пустой_ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПервоначальноеЗаполнениеИБ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПолеФИОСправочникаФизЛица";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВедениеВзаиморасчетовПоДоговорам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНастройкуПроверкиПопаданияЗаправкиВПериодПЛ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьДатыОтправленияИВыполненияВШапкеМЛ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредставлениеОбластиДействияВТарифахТС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиВремяДневное";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитыЗаказовИМаршрутныхЛистов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеСтатьиДоходовРасходов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОбластьДействияСтатусов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.НастроитьСправочникСостоянияТС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.СброситьЗначениеФлагаЭтоЭтапВНемультимодальныхЗаказах";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитСуммаЗатратДокументовЗаказаНаТС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиКоличествоЗаказов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьИспользованиеНаборов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиКоличествоТочек";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиКоличествоРейсов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитТарифыМинимальнаяСтоимость";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитПараметрыВыработкиСпособВводаЗначений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьВидыУпаковки";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиДействуетНаТСМЛ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.КорректировкаТарифовТС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПометитьНеиспользуемыеПрофилиПравДоступа";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнениеВалютыРасходовПЛ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСпецРаботы_ПЛТТДНормыГСМ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВесовойКоэффициентДоходовРасходовПараметровВыработки";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.уатПричиныЗакрытияЗаказов.ЗаполнитьПредопределенныеДанные";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПериодичностьХраненияДанныхWialon";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиХранениеНастройкиФормированияДоговоровКонтрагентов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_1_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиСекцииТСВСправочник_2_1_5_3";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВремяНачалаОкончанияРемонтов_2_1_5_4";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьКраткоеНаименованиеВидаУпаковок_2_1_5_5";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьДатуВремяВыполненияПланВМЛ_2_1_5_6";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.НастроитьСправочникРабочиеСтолы";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОтрезкиПутиВЗаказах_2_1_5_9";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОчиститьХранилищеСистемныхНастроекНачальнойСтраницы_2_1_5_9";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.2";
	Обработчик.Процедура = "Справочники.ВидыДокументовФизическихЛиц.ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеУчетныхЗаписейСистемМониторинга_2_2_1_4";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "2.2.1.4"; 
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОчиститьКэшВспомогательныхДанныхВидыБюджетов_2_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСтоянкуВДокументах_2_2_1_5";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_2
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "2.2.2.3"; 
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПланированиеРаботыТС_2_2_2_3";
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "2.2.2.3"; 
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.УстановитьКонстантуИспользоватьАвтоматическуюМаршрутизацию_2_2_2_3";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_3
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "2.2.3.2"; 
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ВыполнитьЗапонениеСтатусовДляЗаявокНаРемонт_2_2_3_2";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.СнятьПометкиУдаленияСправочникаТипыТС_2_2_4_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ВыставитьФлагСамосвал_2_2_4_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ИзменитьСтруктуруНастроекПерсонала_2_2_4_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнениеСтатусовМаршрутов_2_2_4_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитыТТД_2_2_4_2";
	Обработчик.РежимВыполнения = "Монопольно";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ДобавитьМножитель0_01вФормулыНормРасходаГСМ_2_2_4_2";
	Обработчик.РежимВыполнения = "Монопольно";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.4.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаписатьДанныеОВладельцеТопливныхКартВРегистр_2_2_4_3";
	Обработчик.РежимВыполнения = "Монопольно";

	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитыТТД_2_2_5_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиДокументыТСВодителей_2_2_5_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ВыполнитьЗаполнениеСтатусовДляОперацийСГрузами_2_2_5_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиСкладскаяОбработка_2_2_5_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьТипыТочекМаршрутов_2_2_6_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ИзменитьГруппировкиТарифовЗП_2_2_6_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьРеквизитИспользуемаяСистемаGPS_2_2_6_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитВидЗагрузкиДанныхОтПЦ_2_2_6_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеВнешнихСистем_2_2_6_11";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеПрофилейОбменаСВнешнимиСистемами_2_2_6_5";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВалютуЗаказ_2_2_6_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.7";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьНастройкиВидовКонтактнойИнформации_2_2_6_7";
	Обработчик.РежимВыполнения = "Монопольно";
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеСтатусовТопливныхКарт_2_2_6_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьРеквизитСтатусТопливныекарты_2_2_6_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьТранспортныеСредстваПользователейМобильногоПриложения_2_2_6_9";
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.10";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ИзменитьГруппировкиТарифовНаТС_2_2_6_10";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.6.11";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеВнешнихСистем_2_2_6_11";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_8
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.1";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ИзменитьГруппировкиТарифовЗП_2_2_8_1";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьОтрезкиПути_2_2_8_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.2";
	Обработчик.Процедура = "Справочники.уатВидыДокументов.ЗаполнитьПредопределенныеДанные";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьКатегорииДокументов_2_2_8_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеУчетныхЗаписейСистемМониторингаАвтоГРАФ5_2_2_8_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыОтправкиСтатистики_2_2_8_5";
	Обработчик.РежимВыполнения = "Монопольно"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.8.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитЦиклический_2_2_8_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_9
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.9.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОбластьДействияСтатусовБирж";
	Обработчик.РежимВыполнения = "Монопольно";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.9.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСтатьяРасходаТранспортныйНалог_2_2_9_5";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.9.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьТЧДопРеквизиты_2_2_9_5";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_10
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСписокРаботЗапчастейВСервернойКнижке_2_2_10_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеВнешнихСистем_2_2_10_3";
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСтатьяРасхода_2_2_10_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.УстановитьКонстантуИспользоватьГазпромнефть_2_2_10_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.10.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеППР_2_2_10_4";
	Обработчик.РежимВыполнения = "Монопольно";

	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_11
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВажностьСогласований_2_2_11_5";
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьРеквизитыФильтрацииСспискаШтрафовПоДокументу_2_2_11_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.7";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьТаблицуСоответсвийДатчиковАвтограф5_2_2_11_7";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОбластьДействияСтатусовСтраховыхСертификатов";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОбластьДействияСтатусовМобильногоПриложения";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_2_11_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиВремяВыходные_2_2_11_9";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.11.10";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОбластьДействияСтатусовСкладскихАктов";
	Обработчик.РежимВыполнения = "Монопольно";
		
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_12
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОбластьДействияСтатусаМатериалыВыданы";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСтатьяРасхода_2_2_12_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.УстановитьДопустимоеОтклонениеОтВремениПрибытия_2_2_12_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСценарииПланирования_2_2_12_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_2_12";
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПланыПримененияЗатрат_2_2_12";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСтатьяРасхода_2_2_12";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.12.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПланированиеРаботыТС_2_2_12";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_13
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.13.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПравилаРегистрацииПолученияЗаказовНаТС_2_2_13_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.13.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПростоиСостоянияТС_2_2_13_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.13.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеВнешниеСистемы_2_2_13_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.13.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьНастройкиЗаполнениеВодителей_2_2_13_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_14
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.14.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьКорректировкиРабочегоВремени_2_2_14_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.14.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_2_14_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.14.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_2_14_4";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.14.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСтатусы_2_2_14_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.14.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСопроводительныеДокументы_2_2_14_4";
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.14.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьНомераРейсов_2_2_14_5";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_15
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_2_15_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьТарифыПроцентом_2_2_15_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитНовыйФлагВПланахОбмена_2_2_15_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеВнешниеСистемы_2_2_15_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПлатежныйКалендарь_2_2_15_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПараметрыВыработки_2_2_15_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьЕдиницыИзмерернияДоверенности_2_2_15_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.15.7";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.УстановитьТипШтрихкодаДляПечатиЭтикеток_2_2_15_7";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.16.2";
	Обработчик.Процедура = "Справочники.уатШаблоныЗаполненияПоУслугам.ЗаполнитьПредопределенныеДанные";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_17
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.17.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.УдалитьКлючиДоступаРеглОтчетности_2_2_17_2";
	Обработчик.РежимВыполнения = "Монопольно";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.17.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНастройкиСервераКартографииМаршрутизации_2_2_17_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.17.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьДоговоры_2_2_17_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_18
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСтатусы_2_2_18_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНастройкиКартографии_2_2_18_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьЗаключенияМедосмотров_2_2_18_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПравилаРегистрацииОтправкиРемонтныхЛистов_2_2_18_5";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеВидовНоменклатуры_2_2_18_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.8";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВидыНоменклатуры_2_2_18_8";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьВерсиюУчетныхЗаписийСервисовШтрафов_2_2_18_9";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.10";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПравилаРегистрацииОтправкиВыработкиСотрудников_2_2_18_10";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.11";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПравилаРегистрацииПлатежныхПорученийИсходящих_2_2_18_11";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.12";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНастройкиПользователейМП_2_2_18_12";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.18.15";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСостоянияЖТД_2_2_18_15";
	Обработчик.РежимВыполнения = "Монопольно";

	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_19
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.19.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьОрганизациюРегДокументов_2_2_19_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.19.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьТипВнешнейСистемы_2_2_19_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.19.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьИсториюЗакрепленияБортовыхУстройствПлатон_2_2_19_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.19.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ПеренестиГСММасла_2_2_19_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.20.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьГруппыДиспетчеров_2_2_20_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.20.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьЧатыСВодителями_2_2_20_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.20.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбработатьДанныеДляБезопасноХранениеПаролей_2_2_20_4";
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.20.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнениеДанныхРасчетВыработкиИЗарплатыВМаршрутныхЛистах_2_2_20_5";
	Обработчик.РежимВыполнения = "Монопольно";
		
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_21
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.21.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиКоличествоКонтейнеров_2_2_21_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.21.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСтатусы_2_2_21_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.21.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьВидМоделиТСвВидеПеревозки2_2_21_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.21.9";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьСопроводительныеДокументы_2_2_21_9";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.21.10";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПравилаПолученияПоступленийТоваровУслуг_2_2_21_10";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_22
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.22.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьКадровуюИсторию_2_2_22_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.22.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьШаблоныЗаполненияПоУслугам_2_2_22_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти   
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_23  
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.23.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПараметрВыработкиПробегВнеГеозоны_2_2_23_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.23.2";
	Обработчик.Процедура = "Справочники.уатЭтапыОплаты.ЗаполнитьПредопределенныеДанные";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.23.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьДоговоры_2_2_22_3";
	Обработчик.РежимВыполнения = "Монопольно";  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.23.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.НастроитьСостояниеТСЗаявкаНаРемонтИОбновитьЦветаСостояний_2_2_23_3";
	Обработчик.РежимВыполнения = "Монопольно";  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.23.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьMultiGo_2_2_22_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.23.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПравилаРегистрацииПолученияЗаказовНаТС_2_2_23_5";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_24
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.24.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПравилаРегистрацииОтправкиРемонтныхЛистов_2_2_24_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.24.3";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеВидысообщенийДляЭПЛ_2_2_24_3";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.24.5";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьНастройкиСогласованийДокументов_2_2_24_5";
	Обработчик.РежимВыполнения = "Монопольно"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.24.6";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьУчетНДСДокументовСобственнойРемЗоны_2_2_24_6";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.24.7";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ЗаполнитьСведенияОПеревозчиках_2_2_24_7";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти
	
	#Область Обработчики_выполняемые_при_обновлении_на_версию_2_2_25
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.25.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьMultiGo_2_2_25_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.25.2";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьНастройкиШтрихкодированияОбъектов_2_2_25_2";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.25.4";
	Обработчик.Процедура = "уатОбновлениеИнформационнойБазы.ОбновитьПоставляемыеДрайвераПринтераЭтикеток_2_2_25_4";
	Обработчик.РежимВыполнения = "Монопольно";
	
	#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Попытка
		ВыполняетсяАпгрейдСтандарт = ПараметрыСеанса.уатВыполняетсяАпгрейдСтандарт;
	Исключение
		ВыполняетсяАпгрейдСтандарт = Ложь;
	КонецПопытки;
	
	стрСведенияОбОбновлении = Новый Структура(
		"ПредыдущаяВерсия,ТекущаяВерсия,ВыводитьОписание,ВыполняетсяАпгрейдСтандарт", 
		ПредыдущаяВерсия,
		ТекущаяВерсия,
		ВыводитьОписаниеОбновлений,
		ВыполняетсяАпгрейдСтандарт
	);
	
	Попытка
		Константы.уатСведенияОбОбновленииИБ.Установить(Новый ХранилищеЗначения(стрСведенияОбОбновлении, Новый СжатиеДанных(9)));
	Исключение
		ВызватьИсключение НСтр("en='Error when setting value of the constant ""уатСведенияОбОбновленииИБ""';ru='Ошибка при установке значения константы ""уатСведенияОбОбновленииИБ""'");
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		// В этом варианте поставки используется макет КОРП, макет ПРОФ не должен отображаться
		Возврат;
	КонецЕсли;
	
	Попытка
		ХранилищеСведенийОбОбновлении = Константы.уатСведенияОбОбновленииИБ.Получить();
		Если ХранилищеСведенийОбОбновлении = Неопределено Тогда 
			ВызватьИсключение НСтр("en='Store information not available';ru='Хранилище сведений не доступно'");
		КонецЕсли;
		
		стрСведенияОбОбновлении = ХранилищеСведенийОбОбновлении.Получить();
		Если стрСведенияОбОбновлении = Неопределено 
			Или Не ТипЗнч(стрСведенияОбОбновлении) = Тип("Структура") Тогда 
				ВызватьИсключение НСтр("en='Storage information is not fil';ru='Хранилище сведений не заполнено'");
		КонецЕсли;
	Исключение
		стрСведенияОбОбновлении = Новый Структура(
			"ПредыдущаяВерсия,ТекущаяВерсия,ВыводитьОписание,ВыполняетсяАпгрейдСтандарт", 
			"0.0.0.0",
			"0.0.0.0",
			Ложь,
			Ложь
		);
	КонецПопытки;
	
	ВыполняетсяАпгрейдПРОФ = Ложь;
	Если Не Метаданные.Константы.Найти("уатСведенияОбОбновленииИБ_уэ") = Неопределено Тогда 
		Попытка
			ХранилищеСведенийОбОбновлении_уэ = Константы.уатСведенияОбОбновленииИБ_уэ.Получить();
			стрСведенияОбОбновлении_уэ = ХранилищеСведенийОбОбновлении_уэ.Получить();
			ВыполняетсяАпгрейдПРОФ = стрСведенияОбОбновлении_уэ.ВыполняетсяАпгрейдПРОФ;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если стрСведенияОбОбновлении.ВыполняетсяАпгрейдСтандарт Или ВыполняетсяАпгрейдПРОФ Тогда
		Возврат;
	КонецЕсли;
	
	Если стрСведенияОбОбновлении.ВыводитьОписание Тогда 
		МакетОписаниеОбновлений = ПолучитьОбщийМакет("уатОписаниеИзмененийСистемы");
		
		Для Каждого ТекОбл Из Макет.ВыделенныеОбласти Цикл 
			Если Не Найти(ТекОбл.Текст, "Конфигурация успешно обновлена на версию") = 0 Тогда 
				Макет.Очистить();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Заголовок"));
		
		весПредыдущаяВерсия = ВесВерсии(стрСведенияОбОбновлении.ПредыдущаяВерсия, ".");
		весТекущаяВерсия    = ВесВерсии(стрСведенияОбОбновлении.ТекущаяВерсия, ".");
		
		списОписанияВерсий = Новый СписокЗначений;
		
		Для Каждого ТекОписаниеВерсии Из МакетОписаниеОбновлений.Области Цикл 
			ИмяОбласти = СокрЛП(ВРег(ТекОписаниеВерсии.Имя));
			Если Лев(ИмяОбласти, 6) = "ВЕРСИЯ" Тогда 
				ВерсияОписания = Прав(ИмяОбласти, СтрДлина(ИмяОбласти)-6);
				весТекОписания = ВесВерсии(ВерсияОписания, "_");
				Если весТекОписания > весПредыдущаяВерсия И весТекОписания <= весТекущаяВерсия Тогда 
					списОписанияВерсий.Добавить(весТекОписания, ВерсияОписания);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		списОписанияВерсий.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для Каждого ТекВерсия Из списОписанияВерсий Цикл 
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + ТекВерсия.Представление));
			Макет.НачатьГруппуСтрок("Версия" + ТекВерсия.Представление);
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + ТекВерсия.Представление));
			Макет.ЗакончитьГруппуСтрок();
			Макет.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомСтандарт";
	Обработчик.Процедура                 = "уатОбновлениеИнформационнойБазы.ПриПереходеСРедакцииСтандарт2";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации,
//        следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеАвтотранспортомСтандарт" Тогда 
		ПараметрыСеанса.уатВыполняетсяАпгрейдСтандарт = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при старте фонового задания отложенного обновления из формы обработки уатОтложенноеОбновлениеИБ
// Параметры:
//	ИмяМетода - экспортного метода модуля менеджера обработки уатОтложенноеОбновлениеИБ
//	ПараметрыМетода - структура параметров обработчика
//	АдресХранилищаДО - строка - адрес служебного хранилища для контроля состояния фонового задания
//
Процедура ВыполнитьОбработчикОтложенногоОбновления(ИмяМетода, ПараметрыМетода, АдресХранилищаДО) Экспорт
	Выполнить("Обработки.уатОтложенноеОбновлениеИБ." + ИмяМетода + "(ПараметрыМетода, АдресХранилищаДО)");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий системы

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента().
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт

	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Параметры.Вставить("ПодробнаяИнформация", НСтр("en='1C:Transport logistics, freight forwarding and fleet management CORP 1.0';ru='1С:Транспортная логистика, экспедирование и управление автотранспортом КОРП, редакция 1.1'"));
	Иначе
		Параметры.Вставить("ПодробнаяИнформация", НСтр("en='1C:Fleet management PROF 2.1';ru='Управление автотранспортом Проф, редакция 2.2'"));
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции УАТ

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия, Знач Разделитель) Экспорт 
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, Разделитель));
	
КонецФункции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обработчики_выполняемые_при_заполнении_пустой_ИБ

// Процедура выполняет обязательное первоначальное заполнение информационной базы.
//
Процедура ПервоначальноеЗаполнениеИБ() Экспорт
	
	// Установка варианта защиты
	// Начиная с релиза 1.1.21/2.2.21 по умолчанию используется прямое подключение СЛК
	Константы.уатИспользоватьПрямоеПодключениеСЛК.Установить(Истина);
	
	// Создание новой организации
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Количество() тогда
		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование = НСтр("en='Our company';ru='Наша организация'");
		Организация.НаименованиеСокращенное = НСтр("en='Our company';ru='Наша организация'");
		Организация.НаименованиеПолное = НСтр("en='LLC ""Our company""';ru='ООО ""Наша организация""'");
		Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Организация.Записать();
		Организация = Организация.Ссылка;
		уатОбщегоНазначенияПовтИсп.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", Организация, ПользователиКлиентСервер.АвторизованныйПользователь());
	Иначе
		Выборка.Следующий();
		Организация = Выборка.Ссылка;
		уатОбщегоНазначенияПовтИсп.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", Организация, ПользователиКлиентСервер.АвторизованныйПользователь());
	КонецЕсли;
	
	// Заполнение контактной информации
	КонтактнаяИнформацияОбновлениеИБ();
	
	// Заполнение классификатора единиц измерения
	НайтиСоздатьЕдиницу("166", НСтр("en='kg';ru='кг'"), НСтр("en='Kilogram';ru='Килограмм'"));
	НайтиСоздатьЕдиницу("796", НСтр("en='pcs.';ru='шт'"), НСтр("en='Piece';ru='Штука'"));
	
	// Заполнение справочников, констант и прочих настроек
	ЗаполнитьКонстантыПриПервоначальномЗаполненииИБ();
	НастроитьСправочникПараметрыВыработки();
	НастроитьСправочникВнешниеСистемы();
	НастроитьСправочникПрофилиОбменаСВнешнимиСистемами();
	НастроитьСправочникСтатусыТопливныхКарт();
	НастроитьСправочникУчетныеЗаписиСистемыМониторинга();
	НастроитьСправочникРабочиеСтолы();
	НастроитьПланВидовРасчета();
	ЗаполнитьВидыИспользованияРабочегоВремени();
	Справочники.уатСтатусы_уэ.ЗаполнитьПредопределенныеДанные();
	Справочники.уатШаблоныЗаполненияПоУслугам.ЗаполнитьПредопределенныеДанные();
	Справочники.ВидыНоменклатуры.ЗаполнитьПредопределенныеДанные();
	
	ЗаполнитьКраткоеНаименованиеВидаУпаковок_2_1_5_5();
	ЗаполнитьСтатьяРасхода_2_2_10_4();
	ЗаполнитьСтатьяРасхода_2_2_12_3();
	
	ЗаполнитьВидМоделиТСвВидеПеревозки2_2_21_6();
	НастроитьСостояниеТСЗаявкаНаРемонтИОбновитьЦветаСостояний_2_2_23_3();
	
	// Заполнение прав и настроек
	уатЗащищенныеФункцииСервер.ИнициализироватьПраваИНастройки();
	
КонецПроцедуры

// Процедура актуализирует данные в справочнике
//
Процедура ОбновитьИдентификаторыОбъектовМетаданных(Параметры = Неопределено) Экспорт 
	
	Если Параметры <> Неопределено И Не Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(Истина, Ложь, Ложь);
	
КонецПроцедуры

// Процедура актуализирует данные в справочнике
//
Процедура ОбновитьНаборыДопРеквизитовИСведений(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Используется", "НаборыДополнительныхРеквизитовИСведений") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Параметры <> Неопределено И Не Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитовИСведений.Используется
	|	И НЕ НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НаборОбъект.Используется = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Параметры выработки"
Процедура НастроитьСправочникПараметрыВыработки()
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Внешние системы"
Процедура НастроитьСправочникВнешниеСистемы()
	Справочники.уатВнешниеСистемы.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Профили обмена с внешними системами"
Процедура НастроитьСправочникПрофилиОбменаСВнешнимиСистемами()
	Справочники.уатПрофилиОбменаСВнешнимиСистемами.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Статусы топливных карт"
Процедура НастроитьСправочникСтатусыТопливныхКарт()
	Справочники.уатСтатусыТопливныхКарт.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Учетные записи системы мониторинга"
Процедура НастроитьСправочникУчетныеЗаписиСистемыМониторинга()
	Справочники.уатУчетныеЗаписиСистемыМониторинга.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Рабочие столы"
Процедура НастроитьСправочникРабочиеСтолы() Экспорт
	Справочники.уатРабочиеСтолы.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
//
Процедура НастроитьПланВидовРасчета()
	
	мВидыРасчет = ПланыВидовРасчета.уатОсновныеНачисления;
	
	Выборка = мВидыРасчет.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектПланВидаРасчета = Выборка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = мВидыРасчет.ДоплатаЗаНочныеЧасы Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ДоплатаЗаПраздничныеИВыходные Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ОплатаЗаРемонт Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ОплатаПоЧасовомуТарифу Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ПроцентомОтВыручки Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ПроцентомОтНачислений Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений;
			Если ОбъектПланВидаРасчета.БазовыеВидыРасчета.Количество() = 0 Тогда //добавляем по умолчанию базовые виды
				НовыйБазовыйВид = ОбъектПланВидаРасчета.БазовыеВидыРасчета.Добавить();
				НовыйБазовыйВид.ВидРасчета = ПланыВидовРасчета.уатОсновныеНачисления.СдельнаяОплата;
			КонецЕсли;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.СдельнаяОплата Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ФиксированнойСуммой Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой;
			
		КонецЕсли;	
		
		ОбъектПланВидаРасчета.Записать();
		
	КонецЦикла;	
КонецПроцедуры

// Выполняет заполнение справочника "уатВидыИспользованияРабочегоВремени" 
//
Процедура ЗаполнитьВидыИспользованияРабочегоВремени()
	Справочники.уатВидыИспользованияРабочегоВремени.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь)
	
	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = НСтр("en='Created';ru='Создан'");
	Иначе
		СтрСообщения1 = НСтр("en='Processed';ru='Обработан'");
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = НСтр("en='а';ru='а'") + НСтр("en='group';ru='группа'");
	Иначе
		СтрСообщения2 = НСтр("en='element';ru='элемент'");
	КонецЕсли;
	
	СтрСообщения2 = СтрСообщения2 + НСтр("en='catalog';ru='справочника'") + " """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = НСтр("en='name';ru='наименование'") +" """ + СправочникОбъект.Наименование + """";
	
	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ТекстНСТР = СтрСообщения1 + СтрСообщения2 + НСтр("en='code';ru='код'") +" """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли; 
		
	Исключение
		ТекстНСТР = НСтр("en='Not recorded';ru='Не записан'") + СтрСообщения2 + СтрСообщения3 +Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецПопытки;
	
КонецПроцедуры

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт
	
	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);
	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код                - значение соответствующего реквизита справочника,
//  Наименование       - значение соответствующего реквизита справочника,
//  НаименованиеПолное - значение соответствующего реквизита справочника,
//  ПараметрыПрописи   - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописи)
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                = Код;
		СправочникОбъект.Наименование       = Наименование;
		СправочникОбъект.НаименованиеПолное = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи   = ПараметрыПрописи;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		уатОбщегоНазначенияТиповые.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьВалюту()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты)
	
	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;
	
	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
	
	ТекстНСТР = НСтр("en='Constant ""%1"" is assigned the value ""%2""';ru='Константе ""%1"" назначено значение ""%2""'");
	ТекстНСТР = СтрШаблон(ТекстНСТР, Метаданные.Константы[ИмяКонстанты].Синоним, ЗначениеКонстанты);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	
КонецПроцедуры // УстановитьКонстанту()

// Заполнение настроек контактной информации
//
Процедура КонтактнаяИнформацияОбновлениеИБ()
	
	// Пользователи
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец Пользователи
	
	// КонтактныеЛица
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец КонтактныеЛица
	
	// Контрагенты
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Истина;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Истина;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец Контрагенты
	
	// ФизическиеЛица
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                            = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования              = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге                   = Истина;
	ПараметрыВида.ОбязательноеЗаполнение                         = Ложь;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес      = Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность        = Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса   = Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	ПараметрыВида.Порядок                                        = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                            = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования              = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге                   = Истина;
	ПараметрыВида.ОбязательноеЗаполнение                         = Ложь;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес      = Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность        = Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса   = Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	ПараметрыВида.Порядок                                        = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок                           = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                            = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования              = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге                   = Истина;
	ПараметрыВида.ОбязательноеЗаполнение                         = Ложь;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес      = Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность        = Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса   = Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	ПараметрыВида.Порядок                                        = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                                            = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования              = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге                   = Истина;
	ПараметрыВида.ОбязательноеЗаполнение                         = Ложь;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес      = Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность        = Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса   = Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	ПараметрыВида.Порядок                                        = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                                  = Справочники.ВидыКонтактнойИнформации.EmailФизЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования    = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге         = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение               = Ложь;
	ПараметрыВида.Порядок                              = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец ФизическиеЛица
	
	// Организации
	Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций();
	// Конец Организации
	
КонецПроцедуры // КонтактнаяИнформацияОбновлениеИБ()

// Заполняет константы при первоначальном заполнении ИБ
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура ЗаполнитьКонстантыПриПервоначальномЗаполненииИБ() 
	
	Если Не ЗначениеЗаполнено(Константы.уатЕдиницаИзмеренияВеса.Получить()) Тогда 
		Константы.уатЕдиницаИзмеренияВеса.Установить(Перечисления.уатЕдиницыИзмеренияВеса.Килограмм);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.уатЕдиницаИзмеренияОбъема.Получить()) Тогда 
		Константы.уатЕдиницаИзмеренияОбъема.Установить(Перечисления.уатЕдиницыИзмеренияОбъема.МетрКубический);
	КонецЕсли;
	
	// Инициализация констант - валюты
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("643", "RUB", НСтр("en='Russian ruble';ru='Российский рубль'"),
			НСтр("en='rouble, ruble, rubles, m, kopeck, kopeck, kopeck, dz, 2';ru='рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2'"));
		УстановитьКонстанту("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	КонецЕсли;
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета")
		И НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить()) Тогда
		
		ВалютаУправленческогоУчета     = НайтиСоздатьВалюту("840", "USD", НСтр("en='US dollar';ru='Доллар США'"),
			НСтр("en='dollar, dollar, dollars, m, cents, cents, cents, m, 2';ru='доллар, доллара, долларов, м, цент, цента, центов, м, 2'"));
		УстановитьКонстанту("ВалютаУправленческогоУчета", ВалютаУправленческогоУчета);
	КонецЕсли;
	
	Если Метаданные.Константы.Найти("уатКонфигурацияДляРФ") <> Неопределено Тогда
		Константы.уатКонфигурацияДляРФ.Установить(Истина);
	КонецЕСли;
	
	// Инициализация констант - настройки учета	
	Константы.уатИспользоватьЛогистику.Установить(Истина);
	Константы.уатИспользоватьПривлеченныхПеревозчиков.Установить(Истина);
	Константы.уатИспользоватьУчетДоходовИРасходов.Установить(Истина);
	
	УстановитьДопустимоеОтклонениеОтВремениПрибытия();
	
КонецПроцедуры // ЗаполнитьКонстантыПриПервоначальномЗаполненииИБ()

// Процедура заполняет поле ФИО справочника Физические лица, если он оказался не заполненным
//
Процедура ЗаполнитьПолеФИОСправочникаФизЛица() Экспорт 
	
	Если уатРаботаСМетаданными.уатЕстьРегистрСведений("ФИОФизическихЛиц") Тогда 
	
		мЗапрос = Новый Запрос;
		мЗапрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК Отчество
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
		|		ПО ФизическиеЛица.Ссылка = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	ФизическиеЛица.ФИО = """"";
		
		мВыборка = мЗапрос.Выполнить().Выбрать();
		
		Пока мВыборка.Следующий() Цикл 
			Если мВыборка.Фамилия = "" И мВыборка.Имя = "" И мВыборка.Отчество = "" Тогда 
				Продолжить;
			КонецЕсли;
			
			СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
			СпрОб.ФИО = "" + мВыборка.Фамилия + ?(мВыборка.Имя="",""," "+мВыборка.Имя) + ?(мВыборка.Отчество="",""," "+мВыборка.Отчество);
			
			СпрОб.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизит ВедениеВзаиморасчетов справочника ДоговорыКонтрагентов, если он оказался не заполненным
//
Процедура ЗаполнитьВедениеВзаиморасчетовПоДоговорам() Экспорт 
	
	мЗапрос = Новый Запрос;
	
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка)";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ОбменДанными.Загрузка = Истина;
		СпрОб.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		СпрОб.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет настройку "Проверять попадание заправки ГСМ в период ПЛ"
//
Процедура ОбновитьНастройкуПроверкиПопаданияЗаправкиВПериодПЛ() Экспорт 
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПраваИНастройки.Объект,
	|	уатПраваИНастройки.Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.ПравоНастройка.Код = &СтарыйКодНастройки";
	мЗапрос.УстановитьПараметр("СтарыйКодНастройки", "78011");
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	НЗ = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗ.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ПроверятьПопаданиеЗаправкиСливаВПериодПутевогоЛиста);
	
	Пока мВыборка.Следующий() Цикл
		НоваяЗапись = НЗ.Добавить();
		НоваяЗапись.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.ПроверятьПопаданиеЗаправкиСливаВПериодПутевогоЛиста;
		НоваяЗапись.Объект = мВыборка.Объект;
		Если мВыборка.Значение = Истина Тогда
			НоваяЗапись.Значение = Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.ПредупреждатьИОтменятьПроведение;
		Иначе
			НоваяЗапись.Значение = Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.НеПроверять;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НЗ.Записать();
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while updating setting ""Check the ingress of fueling and fuel drain during period of WB"" (2.0.3.1-ПраваИНастройки)';ru='Возникла ошибка при обновлении настройки ""Проверять попадание заправки и слива ГСМ в период ПЛ"" (2.0.3.1-ПраваИНастройки)'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецПопытки;
	
КонецПроцедуры

// Процедура актуализирует значение дат отправления и выполнения в шапке документов МЛ по данным строк
//
Процедура ОбновитьДатыОтправленияИВыполненияВШапкеМЛ() Экспорт 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(1) КАК ВсегоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыполненоСтрок,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт > уатМаршрутныйЛистЗаказы.УбытиеФакт
	|					И НЕ уатМаршрутныйЛистЗаказы.УбытиеФакт = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА уатМаршрутныйЛистЗаказы.УбытиеФакт
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 0, 0, 0)
	|					ИНАЧЕ уатМаршрутныйЛистЗаказы.ПрибытиеФакт
	|				КОНЕЦ
	|		КОНЕЦ) КАК МинДата,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт > уатМаршрутныйЛистЗаказы.УбытиеФакт
	|				ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт
	|			ИНАЧЕ уатМаршрутныйЛистЗаказы.УбытиеФакт
	|		КОНЕЦ) КАК МаксДата,
	|	уатМаршрутныйЛист.Выполнен КАК Выполнен,
	|	уатМаршрутныйЛист.ДатаИВремяВыполнения КАК ДатаИВремяВыполнения,
	|	уатМаршрутныйЛист.ДатаИВремяОтправления КАК ДатаИВремяОтправления
	|ПОМЕСТИТЬ ТабДокументов
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.Ссылка,
	|	уатМаршрутныйЛист.Выполнен,
	|	уатМаршрутныйЛист.ДатаИВремяВыполнения,
	|	уатМаршрутныйЛист.ДатаИВремяОтправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДокументов.Ссылка КАК Ссылка,
	|	ТабДокументов.ВсегоСтрок КАК ВсегоСтрок,
	|	ТабДокументов.ВыполненоСтрок КАК ВыполненоСтрок,
	|	ВЫБОР
	|		КОГДА ТабДокументов.МинДата = ДАТАВРЕМЯ(3999, 12, 31, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ТабДокументов.МинДата
	|	КОНЕЦ КАК МинДата,
	|	ТабДокументов.МаксДата КАК МаксДата
	|ИЗ
	|	ТабДокументов КАК ТабДокументов
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ТабДокументов.МинДата = ДАТАВРЕМЯ(3999, 12, 31, 0, 0, 0)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ТабДокументов.МинДата
	|			КОНЕЦ <> ТабДокументов.ДатаИВремяОтправления
	|			ИЛИ ТабДокументов.ВсегоСтрок = ТабДокументов.ВыполненоСтрок
	|				И ТабДокументов.Выполнен = ЛОЖЬ
	|			ИЛИ ТабДокументов.МаксДата <> ТабДокументов.ДатаИВремяВыполнения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабДокументов";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		ДокОб = мВыборка.Ссылка.ПолучитьОбъект();
		
		Если мВыборка.ВыполненоСтрок = 0 Тогда 
			ДокОб.Выполнен              = Ложь;
			ДокОб.ДатаИВремяОтправления = '00010101';
			ДокОб.ДатаИВремяВыполнения  = '00010101';
			
		ИначеЕсли мВыборка.ВыполненоСтрок < мВыборка.ВсегоСтрок Тогда 
			ДокОб.Выполнен              = Ложь;
			ДокОб.ДатаИВремяОтправления = НачалоМинуты(мВыборка.МинДата);
			ДокОб.ДатаИВремяВыполнения  = '00010101';
			
		Иначе 
			ДокОб.Выполнен              = Истина;
			ДокОб.ДатаИВремяОтправления = НачалоМинуты(мВыборка.МинДата);
			ДокОб.ДатаИВремяВыполнения  = НачалоМинуты(мВыборка.МаксДата);
		КонецЕсли;
		
		ДокОб.Записать();
	КонецЦикла;
	
	МенеджерВТ.Закрыть();
	
КонецПроцедуры

// Процедура устанавливает реквизит "Представление области действия" во всех тарифах ТС
//
Процедура ЗаполнитьПредставлениеОбластиДействияВТарифахТС() Экспорт 
	спрВыборка = Справочники.уатТарифыТС.Выбрать();
	Пока спрВыборка.Следующий() Цикл
		Если спрВыборка.ЭтоГруппа ИЛИ ТипЗнч(спрВыборка.ОбластьДействия) <> Тип("ХранилищеЗначения") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекОбластьДействия = спрВыборка.ОбластьДействия.Получить();
		Если ТекОбластьДействия <> Неопределено
			И ТипЗнч(ТекОбластьДействия) = Тип("НастройкиКомпоновкиДанных")
			И ТекОбластьДействия.Отбор.Элементы.Количество() > 0 Тогда
			ОбластьДействияПредставление = уатОбщегоНазначенияТиповые.уатПолучитьПредставлениеОтбора(ТекОбластьДействия.Отбор);;
		Иначе
			ОбластьДействияПредставление = "";
		КонецЕсли;
		
		Если спрВыборка.ОбластьДействияПредставление = ОбластьДействияПредставление Тогда
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = спрВыборка.ПолучитьОбъект();
		
		Попытка
			СпрОбъект.ОбластьДействияПредставление = ОбластьДействияПредставление;
			СпрОбъект.Записать();
		Исключение
			ТекстНСТР = НСтр("en='An error occurred while filling in the attribute ""View scope"" in the tariffs of the vehicles (2.0.3.2-ТарифыТС)';ru='Возникла ошибка при заполнении реквизита ""Представление области действия"" в тарифах ТС (2.0.3.2-ТарифыТС)'") + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение предопределенного элемента
// "ВремяВРаботеПоДаннымGPS" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки() Экспорт 
	
	мЗапрос = Новый Запрос();
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = ""ВремяВРаботеПоДаннымGPS""";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ДействуетНаТС                = Истина;
		СпрОб.ИспользоватьВТарифахНаУслуги = Истина;
		СпрОб.Временный                    = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет предопределенный элемент справочника уатПараметрыВыработки "Время дневное".
//
Процедура ЗаполнитьПараметрВыработкиВремяДневное() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И уатПараметрыВыработки.Предопределенный");
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "ВремяДневное");
	мВыборка = Запрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ДействуетНаСотрудников = Истина;
		СпрОб.Временный = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значение обязательных реквизитов в документах "уатЗаказГрузоотправителя"
// и "уатМаршрутныйЛист".
//
Процедура ЗаполнитьРеквизитыЗаказовИМаршрутныхЛистов() Экспорт
	
	Запрос = Новый Запрос();
	
	// Справочник "уатТС".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТС.Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ЭтоГруппа
	|	И уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
	// Документы "уатЗаказГрузоотправителя".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	(уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПустаяСсылка)
	|			ИЛИ уатЗаказГрузоотправителя.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.ПустаяСсылка)
	|			ИЛИ уатЗаказГрузоотправителя.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(ДокОб.ДетализацияЗакрытия) Тогда 
			ДокОб.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокОб.ВидДоставки) Тогда 
			ДокОб.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьДверь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокОб.ВидПеревозки) Тогда 
			ДокОб.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
	// Документы "уатМаршрутныйЛист".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМаршрутныйЛист.Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	(уатМаршрутныйЛист.ПринадлежностьПеревозки = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.ПустаяСсылка)
	|			ИЛИ уатМаршрутныйЛист.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(ДокОб.ПринадлежностьПеревозки) Тогда 
			Если ЗначениеЗаполнено(ДокОб.ТС) Тогда 
				ДокОб.ПринадлежностьПеревозки = ДокОб.ТС.ПринадлежностьТС;
			Иначе 
				ДокОб.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокОб.ВидПеревозки) Тогда 
			ДокОб.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизиты предопределенных элементов справочников уатСтатьиДоходов и уатСтатьиРасходов
// 
Процедура ЗаполнитьПредопределенныеСтатьиДоходовРасходов() Экспорт
	Спр = Справочники.уатСтатьиДоходов.ОсновнаяСтатьяДоходов;
	Если НЕ ЗначениеЗаполнено(Спр.СпособРаспределенияМеждуТС) Тогда
		СпрОб = Спр.ПолучитьОбъект();
		СпрОб.СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.НеРаспределять;
		СпрОб.СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять;
		СпрОб.СпособРаспределениеНепрямыхДоходовПоЗаказам = Перечисления.уатРаспределениеНепрямыхДоходовРасходовПоЗаказам.РаспределятьПоСобственнымЗаказам;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	Спр = Справочники.уатСтатьиРасходов.ОсновнаяСтатьяРасходов;
	Если НЕ ЗначениеЗаполнено(Спр.СпособРаспределенияЗатрат) Тогда
		СпрОб = Спр.ПолучитьОбъект();
		СпрОб.ВидЗатрат = Перечисления.уатВидыЗатрат.Прочие;
		СпрОб.ПорядокОтнесенияЗатрат = Перечисления.уатПорядкиОтнесенияРасходов.ПрямыеРасходы;
		СпрОб.СпособРаспределенияЗатрат = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.НеРаспределять;
		СпрОб.СпособРаспределениеНепрямыхРасходовПоЗаказам = Перечисления.уатРаспределениеНепрямыхДоходовРасходовПоЗаказам.РаспределятьПоСобственнымЗаказам;
		НоваяСтрока = СпрОб.ПараметрыВыработкиРаспределенияМеждуАналитиками.Добавить();
		НоваяСтрока.СпособРаспределенияЗатратМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	ЗаполнитьСтатьяРасхода_2_2_12();
КонецПроцедуры

// Процедура заполняет реквизит СпособВводаЗначений справочника уатПараметрыВыработки
//	Значение = "В табличной части"
//
Процедура ЗаполнитьРеквизитПараметрыВыработкиСпособВводаЗначений() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ПустаяСсылка)");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет актуализацию настроек периодичности загрузки Wialon.
//
Процедура ОбновитьПериодичностьХраненияДанныхWialon() Экспорт 
	
	Если Не Константы.уатИспользоватьWialon.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыWialon = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Получить().Получить();
	Если ПараметрыWialon = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыWialon.Свойство("ИнтервалЗагрузки") Тогда 
		ПараметрыWialon.Вставить("ИнтервалЗагрузки", "Сутки");
	КонецЕсли;
	Если Не ПараметрыWialon.Свойство("ПериодичностьХранения") Тогда
		ПараметрыWialon.Вставить("ПериодичностьХранения", 60);
	КонецЕсли;
	
	НастройкиИзменены = Ложь;
	
	Если Не (ПараметрыWialon.ИнтервалЗагрузки = "Неделя"
			Или ПараметрыWialon.ИнтервалЗагрузки = "Сутки" 
			Или ПараметрыWialon.ИнтервалЗагрузки = "12часов" 
			Или ПараметрыWialon.ИнтервалЗагрузки = "Час") Тогда 
		НастройкиИзменены = Истина;
		ПараметрыWialon.ИнтервалЗагрузки = "Сутки";
	КонецЕсли;
	
	Если ПараметрыWialon.ПериодичностьХранения < 60 Тогда 
		НастройкиИзменены = Истина;
		ПараметрыWialon.ПериодичностьХранения = 60;
	КонецЕсли;
	
	Если НастройкиИзменены Тогда 
		Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхWialon.Установить(Новый ХранилищеЗначения(ПараметрыWialon, Новый СжатиеДанных(9)));
	КонецЕсли;
	
КонецПроцедуры

// Процедура корректирует структуру хранения настроек шаблонов
// создания договоров контрагентов
//
Процедура ПеренестиХранениеНастройкиФормированияДоговоровКонтрагентов() Экспорт 
	
	флАпгрейдСоСтд = Ложь;
	
	НастройкиШаблоновСтарые = Константы.уатНастройкиШаблонов.Получить().Получить();
	ТекстШаблона = "";
	Если ТипЗнч(НастройкиШаблоновСтарые) = Тип("Структура") Тогда
		Если НастройкиШаблоновСтарые.Свойство("Справочник_ДоговорыКонтрагентов") Тогда 
			ТекстШаблона = НастройкиШаблоновСтарые.Справочник_ДоговорыКонтрагентов;
			Если ТипЗнч(ТекстШаблона) = Тип("Соответствие") Тогда //уже было обновлено ранее
				Настройка1 = ТекстШаблона.Получить("0");
				Если ТипЗнч(Настройка1) = Тип("Структура")
					И НЕ Настройка1.Свойство("ВедениеВзаиморасчетов") Тогда
					// Апгрейд со стандарта, там нет реквизита ВедениеВзаиморасчетов, нужно его добавить
					флАпгрейдСоСтд = Истина;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НастройкиШаблонов = НастройкиШаблоновСтарые;
	Иначе
		НастройкиШаблонов = Новый Структура;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстШаблона) ИЛИ флАпгрейдСоСтд Тогда
		ТекстШаблона = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_ДоговорыКонтрагентов")["0"];
	КонецЕсли;
		
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НастройкиЗаполнения = Новый Соответствие;
	НастройкиЗаполнения.Вставить("0", Новый Структура("ТекстШаблона, Валюта, ВидДоговора, ВедениеВзаиморасчетов",
		ТекстШаблона, ВалютаРегл, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
		Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом));
	НастройкиЗаполнения.Вставить("1", Новый Структура("ТекстШаблона, Валюта, ВидДоговора, ВедениеВзаиморасчетов",
		ТекстШаблона, ВалютаРегл, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
		Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом));
	НастройкиЗаполнения.Вставить("2", Новый Структура("ТекстШаблона, Валюта, ВидДоговора, ВедениеВзаиморасчетов",
		ТекстШаблона, ВалютаРегл, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
		Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом));
	
	НастройкиШаблонов.Вставить("Справочник_ДоговорыКонтрагентов", НастройкиЗаполнения);
	
	Константы.уатНастройкиШаблонов.Установить(Новый ХранилищеЗначения(НастройкиШаблонов, Новый СжатиеДанных(9)))
	
КонецПроцедуры

// Заполнение реквизитов справочника "Статусы"
//
Процедура ЗаполнитьОбластьДействияСтатусов() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.Новый.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ДействуетНаЗаказыПеревозчику       = Истина;
	СпрОб.ДействуетНаПотребностиВПеревозке   = Истина;
	СпрОб.ДействуетНаТендеры                 = Истина;
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ДействуетНаОперацииСГрузами        = Истина;
	СпрОб.ДействуетНаАктыОтгрузки            = Истина;
	СпрОб.ДействуетНаАктыПриемки             = Истина;
	СпрОб.ДействуетНаСтраховыеСертификаты    = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(150, 180, 68), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Открыт.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(225, 225, 190), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.НазначенРемонт.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(135, 206, 235), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.РемонтВыполнен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(233, 150, 122), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.МатериалыВыданы.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 209, 232), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Утвержден.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 236, 139), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Размещен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 247, 68), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Отправлен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(220, 166, 32), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Доставлен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 209, 232), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Составной.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(78, 194, 194), Новый СжатиеДанных(9));
	СпрОб.ЦветТекстаПоУмолчанию              = Новый ХранилищеЗначения(Новый Цвет(10, 0, 233), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Закрыт.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ДействуетНаЗаказыПеревозчику       = Истина;
	СпрОб.ДействуетНаПотребностиВПеревозке   = Истина;
	СпрОб.ДействуетНаТендеры                 = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(166, 202, 240), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Отклонен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ДействуетНаПотребностиВПеревозке   = Истина;
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 128, 144), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Выполнен.ПолучитьОбъект();
	СпрОб.ДействуетНаОперацииСГрузами = Истина;
	СпрОб.ДействуетНаАктыОтгрузки     = Истина;
	СпрОб.ДействуетНаАктыПриемки      = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(233, 150, 122), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ВРаботе.ПолучитьОбъект();
	СпрОб.ДействуетНаОперацииСГрузами = Истина;
	СпрОб.ДействуетНаАктыОтгрузки     = Истина;
	СпрОб.ДействуетНаАктыПриемки      = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(221, 160, 221), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ПовреждениеГруза.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(225, 40, 40), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ПовреждениеУпаковки.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(178, 34, 34), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Скомплектован.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(0, 150, 70), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Разукомплектован.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(100, 176, 16), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	ЗаполнитьОбластьДействияСтатусовБирж();
	ЗаполнитьОбластьДействияСтатусовСтраховыхСертификатов();
	ЗаполнитьОбластьДействияСтатусовМобильногоПриложения();
	ЗаполнитьОбластьДействияСтатусовСкладскихАктов();
	
КонецПроцедуры

// Заполнение реквизитов справочника "Статусы"
//
Процедура ЗаполнитьОбластьДействияСтатусовБирж() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.Опубликовано.ПолучитьОбъект();
	СпрОб.ДействуетНаТендеры                 = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(135, 206, 235), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Согласование.ПолучитьОбъект();
	СпрОб.ДействуетНаТендеры                 = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(233, 150, 122), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ВИсполнении.ПолучитьОбъект();
	СпрОб.ДействуетНаТендеры                  = Истина;
	СпрОб.ЦветФонаПоУмолчанию                 = Новый ХранилищеЗначения(Новый Цвет(221, 160, 221), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Завершено.ПолучитьОбъект();
	СпрОб.ДействуетНаТендеры                 = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 247, 68), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Архив.ПолучитьОбъект();
	СпрОб.ДействуетНаТендеры                 = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(220, 220, 220), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
КонецПроцедуры

// Заполнение реквизитов справочника "Статусы"
//
Процедура ЗаполнитьОбластьДействияСтатусовСтраховыхСертификатов() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.Новый.ПолучитьОбъект();
	СпрОб.ДействуетНаСтраховыеСертификаты    = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Выпущен.ПолучитьОбъект();
	СпрОб.ДействуетНаСтраховыеСертификаты    = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(233, 150, 122), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
КонецПроцедуры

// Заполнение реквизитов справочника "Статусы"
//
Процедура ЗаполнитьОбластьДействияСтатусовМобильногоПриложения() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.Подтвержден.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт             = Истина;
	СпрОб.ДоступенДляВыбораВМобильномПриложении = Истина;
	СпрОб.ЦветФонаПоУмолчанию                   = Новый ХранилищеЗначения(Новый Цвет(150, 180, 68), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ПодтвержденСЗамечаниями.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт             = Истина;
	СпрОб.ДоступенДляВыбораВМобильномПриложении = Истина;
	СпрОб.ЦветФонаПоУмолчанию                   = Новый ХранилищеЗначения(Новый Цвет(225, 40, 40), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.НеПодтвержден.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт             = Истина;
	СпрОб.ДоступенДляВыбораВМобильномПриложении = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(221, 160, 221), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);

	
КонецПроцедуры

// Заполнение реквизитов справочника "Статусы"
//
Процедура ЗаполнитьОбластьДействияСтатусовСкладскихАктов() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.ДоставленНаСклад.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(0, 128, 0), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ПринятИзРейса.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(50, 180, 50), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ВыданВРейс.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(200, 20, 120), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ВыданСоСклада.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;     
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 20, 147), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
КонецПроцедуры

// Заполнение реквизитов справочника "Статусы"
//
Процедура ЗаполнитьОбластьДействияСтатусаМатериалыВыданы() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.МатериалыВыданы.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 209, 232), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Состояния ТС"
Процедура НастроитьСправочникСостоянияТС() Экспорт
	
	спрСостояниеТС = Справочники.уатСостояниеТС;
	
	Выборка = спрСостояниеТС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийЦвет = Выборка.ЦветСостояния.Получить();
		ЗаписатьЦвет = Ложь;
		Если ТипЗнч(ТекущийЦвет) = Тип("Цвет") Тогда
			Если ТекущийЦвет.Вид <> ВидЦвета.WebЦвет Тогда
				ЗаписатьЦвет = Истина;
			КонецЕсли;
		Иначе
			ЗаписатьЦвет = Истина;
		КонецЕсли;
		
		ТребуетсяЗаписатьЭлемент = Ложь;
		ОбъектСправочник = Выборка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(ОбъектСправочник.ВидСостояния) Тогда
			Если ОбъектСправочник.ИмяПредопределенныхДанных = "СформированМаршрутныйЛист" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРейсе;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "СформированПутевойЛист" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРейсе;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "Выбыло" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Выбыло;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "ВыполнениеЗаказа" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Запланирован;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаКапитальномРемонте" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаКонсервацииИсправен" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.НаКонсервации;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаКонсервацииНеИсправен" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.НаКонсервации;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаСреднемРемонте" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаТекущемРемонте" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "ОформленоЗадание" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Запланирован;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "СформированаРазнарядка" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРейсе;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "Заблокирован" Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Прочее;
			КонецЕсли;
			ТребуетсяЗаписатьЭлемент = Истина;
		КонецЕсли;
		
		Если ЗаписатьЦвет Тогда
			Если ОбъектСправочник.ИмяПредопределенныхДанных = "СформированМаршрутныйЛист" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.СветлоЗеленый);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "СформированПутевойЛист" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.ЦветМорскойВолныНейтральный);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "Выбыло" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.СветлоСерый);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "ВыполнениеЗаказа" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.Синий);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаКапитальномРемонте" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.Шоколадный);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаКонсервацииИсправен" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.Древесный);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаКонсервацииНеИсправен" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.Древесный);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаСреднемРемонте" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.Шоколадный);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "НаТекущемРемонте" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.Шоколадный);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "ОформленоЗадание" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.НебесноГолубой);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "СформированаРазнарядка" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.ТусклоОливковый);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			ИначеЕсли ОбъектСправочник.ИмяПредопределенныхДанных = "Заблокирован" Тогда
				Хранилище = Новый ХранилищеЗначения(WebЦвета.ТемноСерый);
				ОбъектСправочник.ЦветСостояния = Хранилище;
			КонецЕсли;
			ТребуетсяЗаписатьЭлемент = Истина;
		КонецЕсли;
		
		Если ТребуетсяЗаписатьЭлемент Тогда 
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СброситьЗначениеФлагаЭтоЭтапВНемультимодальныхЗаказах() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителя.Мультимодальный
	|	И уатЗаказГрузоотправителя.РодительскийЗаказ = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатЗаказГрузоотправителя.ЭтоЭтап";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		ДокОб.ЭтоЭтап = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСуммаЗатратДокументовЗаказаНаТС() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОб.СуммаЗатрат = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокОб, "Расходы");
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет предопределенный элемент справочника уатПараметрыВыработки "Количество заказов".
//
Процедура ЗаполнитьПараметрВыработкиКоличествоЗаказов() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И уатПараметрыВыработки.Предопределенный");
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "КоличествоЗаказов");
	мВыборка = Запрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ИспользоватьДляЗаказовИПотребности = Истина;
		СпрОб.ИспользоватьДляМаршрутныхЛистов = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет обновление данных в справочнике наборов свойств.
//
Процедура ОбновитьИспользованиеНаборов() Экспорт 
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Истина;
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ДоговорыКонтрагентов",                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Должности",                                             ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КонтактныеЛица",                                        ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Контрагенты",                                           ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Номенклатура",                                          ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НоменклатурныеГруппы",                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Организации",                                           ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ОсновныеСредства",                                      ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ПодразделенияОрганизаций",                              ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатВводНачальныхДанныхПоАгрегатам",                       ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатВводНачальныхПоказаний",                               ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатВводОстатковГСМ",                                      ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатВозвратТоваров",                                       ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатВыдачаРасходныхМатериалов",                            ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатДиспозицияТС",                                         ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатДоверенность",                                         ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатДТП",                                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатЗаказГрузоотправителя",                                ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатОтклонениеГруза",                                      ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатЗакрытиеЗаявокНаРемонты",                              ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатЗаправкаГСМ",                                          ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатЗаявкаНаРемонт",                                       ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатИнвентаризацияАгрегатов",                              ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатИнвентаризацияГСМвТС",                                 ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатИнвентаризацияТоваров",                                ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатКомандировкиОрганизаций",                              ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатКорректировкаЗаписейРегистров",                        ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатКорректировкаИспользованияРаботникамиРабочегоВремени", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатМаршрутныйЛист",                                       ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатНачислениеЗарплаты",                                   ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатОперацииСАгрегатами",                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатОперацииСТехническимиЖидкостями",                      ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатОприходованиеТоваров",                                 ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатОтчетПоставщикаПЦ",                                    ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПеремещениеАгрегатов",                                 ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПеремещениеТоваров",                                   ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПоступлениеАгрегатов",                                 ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПоступлениеТоваровУслуг",                              ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПрочиеДоходыРасходы",                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПутевойЛист",                                          ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатРазнарядка",                                           ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатРаспределениеДоходовРасходов",                         ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатРеализацияУслуг",                                      ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатРемонтныйЛист",                                        ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатСливГСМ",                                              ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатСписаниеАгрегатов",                                    ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатСписаниеТоваров",                                      ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатСчетНаОплатуПокупателю",                               ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатСчетНаОплатуПоставщика",                               ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатТабельУчетаРабочегоВремени",                           ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатТТД",                                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатСерииНоменклатуры",                                  ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатАЗС",                                                ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатКолонны",                                            ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатМоделиАгрегатов",                                    ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатМоделиТС",                                           ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатПластиковыеКарты",                                   ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатТС",                                                 ПараметрыНабора);
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатЗаказПеревозчику_уэ", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_уатГрузовыеМеста_уэ",  ПараметрыНабора);
	
	ПараметрыНабораТЛЭ = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабораТЛЭ.Используется = ?(уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП(), Истина, Ложь);
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатПотребностьВПеревозке_уэ", ПараметрыНабораТЛЭ);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_уатРекламация_уэ",            ПараметрыНабораТЛЭ);
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение реквизитов предопределенного элемента "КоличествоТочек"
// справочника "уатПараметрыВыработки".
//
Процедура ЗаполнитьПараметрВыработкиКоличествоТочек() Экспорт
	
	ПараметрВыработкиОбъект = Справочники.уатПараметрыВыработки.КоличествоТочек.ПолучитьОбъект();
	
	ПараметрВыработкиОбъект.ДействуетНаТС                      = Истина;
	ПараметрВыработкиОбъект.ДействуетНаСотрудников             = Истина;
	ПараметрВыработкиОбъект.ИспользоватьДляЗаказовИПотребности = Ложь;
	ПараметрВыработкиОбъект.ИспользоватьДляМаршрутныхЛистов    = Истина;
	ПараметрВыработкиОбъект.НаименованиеДляДокументов          = ПараметрВыработкиОбъект.Наименование;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПараметрВыработкиОбъект);
	
	ПараметрВыработкиОбъект = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта.ПолучитьОбъект();
	
	ПараметрВыработкиОбъект.ДействуетНаТС                      = Истина;
	ПараметрВыработкиОбъект.ДействуетНаСотрудников             = Истина;
	ПараметрВыработкиОбъект.ИспользоватьДляЗаказовИПотребности = Ложь;
	ПараметрВыработкиОбъект.ИспользоватьДляМаршрутныхЛистов    = Истина;
	ПараметрВыработкиОбъект.НаименованиеДляДокументов          = ПараметрВыработкиОбъект.Наименование;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПараметрВыработкиОбъект);
	
	ПараметрВыработкиОбъект = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации.ПолучитьОбъект();
	
	ПараметрВыработкиОбъект.ДействуетНаТС                      = Истина;
	ПараметрВыработкиОбъект.ДействуетНаСотрудников             = Истина;
	ПараметрВыработкиОбъект.ИспользоватьДляЗаказовИПотребности = Ложь;
	ПараметрВыработкиОбъект.ИспользоватьДляМаршрутныхЛистов    = Истина;
	ПараметрВыработкиОбъект.НаименованиеДляДокументов          = ПараметрВыработкиОбъект.Наименование;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПараметрВыработкиОбъект);
	
КонецПроцедуры

// Процедура заполняет предопределенный элемент справочника уатПараметрыВыработки "Количество маршрутных листов".
//
Процедура ЗаполнитьПараметрВыработкиКоличествоРейсов() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И уатПараметрыВыработки.Предопределенный");
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "КоличествоРейсов");
	мВыборка = Запрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ИспользоватьДляЗаказовИПотребности = Истина;
		СпрОб.ИспользоватьДляМаршрутныхЛистов = Истина;
		СпрОб.ИспользоватьВТарифахНаУслуги = Истина;
		СпрОб.ДействуетНаТС = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизит МинимальнаяСтоимость справочника "Тарифы ТС"
//	Значение = МаксимальнаяВыработка * Тариф. Заполняются только простые тарифы
//	с методом расчета "По параметрам выработки"
//
Процедура ЗаполнитьРеквизитТарифыМинимальнаяСтоимость() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыТС.Ссылка
	|ИЗ
	|	Справочник.уатТарифыТС КАК уатТарифыТС
	|ГДЕ
	|	НЕ уатТарифыТС.ЭтоГруппа
	|	И НЕ уатТарифыТС.СложныйТариф
	|	И уатТарифыТС.МинимальнаяВыработка > 0
	|	И уатТарифыТС.Тариф > 0
	|	И уатТарифыТС.МинимальнаяСтоимость = 0
	|	И уатТарифыТС.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки)");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.МинимальнаяСтоимость = СпрОб.МинимальнаяВыработка * СпрОб.Тариф;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет значения реквизитов "Коэффициент" и "ОсновнойВидУпаковки" в предопределенном элементе
// справочника "уатВидыУпаковки_уэ".
//
Процедура ОбновитьВидыУпаковки() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВидыУпаковки_уэ.Ссылка
	|ИЗ
	|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|ГДЕ
	|	НЕ уатВидыУпаковки_уэ.ЭтоГруппа
	|	И уатВидыУпаковки_уэ.ОсновнойВидУпаковки
	|	И НЕ уатВидыУпаковки_уэ.ПометкаУдаления";
	
	Если Запрос.Выполнить().Пустой() Тогда 
		СпрОб = Справочники.уатВидыУпаковки_уэ.ОсновнойВидУпаковки.ПолучитьОбъект();
		СпрОб.Коэффициент = 1;
		СпрОб.ОсновнойВидУпаковки = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВидыУпаковки_уэ.Ссылка
	|ИЗ
	|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|ГДЕ
	|	НЕ уатВидыУпаковки_уэ.ЭтоГруппа
	|	И НЕ уатВидыУпаковки_уэ.Предопределенный
	|	И уатВидыУпаковки_уэ.Коэффициент = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.Коэффициент = 1;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизит "ДействуетНаТСМЛ" в предопределенных элементах 
// справочника "уатПараметрыВыработки".
//
Процедура ЗаполнитьПараметрВыработкиДействуетНаТСМЛ() Экспорт
	
	Макет = Справочники.уатПараметрыВыработки.ПолучитьМакет("НастройкиПредопределенныхЭлементов");
	ОбластьНастроек = Макет.ПолучитьОбласть("Настройки");
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		ИмяПредопрЭлемента = СтрЗаменить(СокрЛП(ОбластьНастроек.Область(НомерСтроки, 1, НомерСтроки, 1).Текст), "ИмяЭлемента_", "");
		Попытка
			ТекЭлемент = Справочники.уатПараметрыВыработки[ИмяПредопрЭлемента];
		Исключение
			Продолжить;
		КонецПопытки;
		
		СпрОбъект = ТекЭлемент.ПолучитьОбъект();
		СпрОбъект.ДействуетНаТСМЛ = НРег(ОбластьНастроек.Область(НомерСтроки, 8, НомерСтроки, 8).Текст) = "1";
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает реквизит "МинимальнаяВыработка" и "Тариф" у сложных тарифов
// и реквизиты "ГруппировкаТарифа1-3" и ТЧ "Тарифы (Группировки)" у простых тарифов
// справочника "уатТарифыТС".
//
Процедура КорректировкаТарифовТС() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тбл.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатТарифыТС.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.уатТарифыТС КАК уатТарифыТС
	|	ГДЕ
	|		уатТарифыТС.СложныйТариф
	|		И уатТарифыТС.Тариф <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатТарифыТС.Ссылка
	|	ИЗ
	|		Справочник.уатТарифыТС КАК уатТарифыТС
	|	ГДЕ
	|		НЕ уатТарифыТС.СложныйТариф
	|		И (уатТарифыТС.ГруппировкаТарифа1 <> ЗНАЧЕНИЕ(Перечисление.уатГруппировкиТарифов.ПустаяСсылка)
	|				ИЛИ уатТарифыТС.ГруппировкаТарифа2 <> ЗНАЧЕНИЕ(Перечисление.уатГруппировкиТарифов.ПустаяСсылка)
	|				ИЛИ уатТарифыТС.ГруппировкаТарифа3 <> ЗНАЧЕНИЕ(Перечисление.уатГруппировкиТарифов.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатТарифыТС.Ссылка
	|	ИЗ
	|		Справочник.уатТарифыТС КАК уатТарифыТС
	|	ГДЕ
	|		уатТарифыТС.МинимальнаяВыработка <> 0
	|		И (уатТарифыТС.СложныйТариф
	|				ИЛИ уатТарифыТС.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой)
	|				ИЛИ уатТарифыТС.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатТарифыТС.Ссылка
	|	ИЗ
	|		Справочник.уатТарифыТС КАК уатТарифыТС
	|	ГДЕ
	|		НЕ уатТарифыТС.СложныйТариф
	|	
	|	СГРУППИРОВАТЬ ПО
	|		уатТарифыТС.Ссылка
	|	
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(уатТарифыТС.Тарифы.Тариф) > 0) КАК тбл");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		флЗапись = Ложь;
		Если СпрОбъект.СложныйТариф Тогда
			Если СпрОбъект.Тариф <> 0 Тогда
				СпрОбъект.Тариф = 0;
				флЗапись = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СпрОбъект.ГруппировкаТарифа1) Тогда
				СпрОбъект.ГруппировкаТарифа1 = Неопределено;
				флЗапись = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СпрОбъект.ГруппировкаТарифа2) Тогда
				СпрОбъект.ГруппировкаТарифа2 = Неопределено;
				флЗапись = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СпрОбъект.ГруппировкаТарифа3) Тогда
				СпрОбъект.ГруппировкаТарифа3 = Неопределено;
				флЗапись = Истина;
			КонецЕсли;
			Если СпрОбъект.Тарифы.Количество() > 0 Тогда
				СпрОбъект.Тарифы.Очистить();
				флЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
		Если СпрОбъект.МинимальнаяВыработка Тогда
			Если СпрОбъект.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
				ИЛИ СпрОбъект.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы
				ИЛИ СпрОбъект.СложныйТариф Тогда
				
				СпрОбъект.МинимальнаяВыработка = 0;
				флЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если флЗапись Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет переименование неиспользуемых профилей прав доступа.
//
Процедура ПометитьНеиспользуемыеПрофилиПравДоступа() Экспорт
	
	// Профиль "Администрирование (ТЛЭ)".
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("dfc56551-1e6f-11e6-8225-28d2445dde40"));
	ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
	Если Не ПрофильОбъект = Неопределено Тогда 
		Если Не ПрофильОбъект.ПометкаУдаления Тогда 
			ПрофильОбъект.Наименование = НСтр("en='(not used)';ru='(не используется)'") + " "+ ПрофильОбъект.Наименование;
			ПрофильОбъект.Роли.Очистить();
			ПрофильОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Профиль "Администрирование (УАТ)".
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("c91dfa0e-1e6f-11e6-8225-28d2445dde40"));
	ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
	Если Не ПрофильОбъект = Неопределено Тогда 
		Если Не ПрофильОбъект.ПометкаУдаления Тогда 
			ПрофильОбъект.Наименование = НСтр("en='(not used)';ru='(не используется)'")+ " " + ПрофильОбъект.Наименование;
			ПрофильОбъект.Роли.Очистить();
			ПрофильОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Профиль "Механик (УАТ)".
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("c91dfa13-1e6f-11e6-8225-28d2445dde40"));
	ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
	Если Не ПрофильОбъект = Неопределено Тогда 
		Если Не ПрофильОбъект.ПометкаУдаления Тогда 
			ПрофильОбъект.Наименование = НСтр("en='(not used)';ru='(не используется)'")+ " " + ПрофильОбъект.Наименование;
			ПрофильОбъект.Роли.Очистить();
			ПрофильОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Профиль "Настройка мобильного приложения (УАТ)".
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("dfc5654f-1e6f-11e6-8225-28d2445dde40"));
	ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
	Если Не ПрофильОбъект = Неопределено Тогда 
		Если Не ПрофильОбъект.ПометкаУдаления Тогда 
			ПрофильОбъект.Наименование = НСтр("en='(not used)';ru='(не используется)'")+ " " + ПрофильОбъект.Наименование;
			ПрофильОбъект.Роли.Очистить();
			ПрофильОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется заполнение Валюты в ТЧ Прочие расходы в документе Путевой лист
// регламентированной валютой, если реквизит еще не заполнен
//
Процедура ЗаполнениеВалютыРасходовПЛ() Экспорт
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистПрочиеРасходы.Ссылка,
	|	уатПутевойЛистПрочиеРасходы.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.уатПутевойЛист.ПрочиеРасходы КАК уатПутевойЛистПрочиеРасходы
	|ГДЕ
	|	уатПутевойЛистПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого ТекСтрока Из ДокОб.ПрочиеРасходы Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.Валюта    = ВалютаРегл;
			КурсКратностьВалюты = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ДокОб.Дата);
			ТекСтрока.Курс      = КурсКратностьВалюты.Курс;
			ТекСтрока.Кратность = КурсКратностьВалюты.Кратность;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
КонецПроцедуры // ПереносСебестоимостиМЛ_1_0_4_4()

// Заполняет реквизиты "спец. работа 1" - "спец. работа 5" в документах "уатПутевойЛист", "уатТТД"
// и регистре "уатНормыРасходаГСМ".
//
Процедура ЗаполнитьСпецРаботы_ПЛТТДНормыГСМ() Экспорт
	
	Запрос = Новый Запрос();
	
	// РС "уатНормыРасходаГСМ"
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатНормыРасходаГСМ.Период,
	|	уатНормыРасходаГСМ.ГСМ,
	|	уатНормыРасходаГСМ.МодельТС,
	|	уатНормыРасходаГСМ.Организация
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ КАК уатНормыРасходаГСМ
	|ГДЕ
	|	(уатНормыРасходаГСМ.СпециальнаяРабота1 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу1 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота2 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу2 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота3 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу3 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота4 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу4 = 0
	|			ИЛИ уатНормыРасходаГСМ.СпециальнаяРабота5 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатНормыРасходаГСМ.НормаНаСпециальнуюРаботу5 = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатНормыРасходаГСМ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ГСМ.Установить(Выборка.ГСМ);
		НаборЗаписей.Отбор.МодельТС.Установить(Выборка.МодельТС);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл 
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота1) И Не Запись.НормаНаСпециальнуюРаботу1 = 0 Тогда 
				Запись.СпециальнаяРабота1 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота2) И Не Запись.НормаНаСпециальнуюРаботу2 = 0 Тогда 
				Запись.СпециальнаяРабота2 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота3) И Не Запись.НормаНаСпециальнуюРаботу3 = 0 Тогда 
				Запись.СпециальнаяРабота3 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота4) И Не Запись.НормаНаСпециальнуюРаботу4 = 0 Тогда 
				Запись.СпециальнаяРабота4 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.СпециальнаяРабота5) И Не Запись.НормаНаСпециальнуюРаботу5 = 0 Тогда 
				Запись.СпециальнаяРабота5 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	КонецЦикла;
	
	// док. "уатПутевойЛист"
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗадание.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|ГДЕ
	|	(уатПутевойЛистЗадание.СпецРабота1 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы1 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота2 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы2 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота3 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы3 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота4 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы4 = 0
	|			ИЛИ уатПутевойЛистЗадание.СпецРабота5 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатПутевойЛистЗадание.КоличествоСпецРаботы5 = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из ДокОб.Задание Цикл 
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И Не ТекСтрока.КоличествоСпецРаботы1 = 0 Тогда 
				ТекСтрока.СпецРабота1 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И Не ТекСтрока.КоличествоСпецРаботы2 = 0 Тогда 
				ТекСтрока.СпецРабота2 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И Не ТекСтрока.КоличествоСпецРаботы3 = 0 Тогда 
				ТекСтрока.СпецРабота3 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И Не ТекСтрока.КоличествоСпецРаботы4 = 0 Тогда 
				ТекСтрока.СпецРабота4 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И Не ТекСтрока.КоличествоСпецРаботы5 = 0 Тогда 
				ТекСтрока.СпецРабота5 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
	// док. "уатТТД"
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.Ссылка
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	(уатТТДВыработка.СпецРабота1 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы1 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота2 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы2 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота3 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы3 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота4 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы4 = 0
	|			ИЛИ уатТТДВыработка.СпецРабота5 = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)
	|				И НЕ уатТТДВыработка.КоличествоСпецРаботы5 = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из ДокОб.Выработка Цикл 
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И Не ТекСтрока.КоличествоСпецРаботы1 = 0 Тогда 
				ТекСтрока.СпецРабота1 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И Не ТекСтрока.КоличествоСпецРаботы2 = 0 Тогда 
				ТекСтрока.СпецРабота2 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И Не ТекСтрока.КоличествоСпецРаботы3 = 0 Тогда 
				ТекСтрока.СпецРабота3 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И Не ТекСтрока.КоличествоСпецРаботы4 = 0 Тогда 
				ТекСтрока.СпецРабота4 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И Не ТекСтрока.КоличествоСпецРаботы5 = 0 Тогда 
				ТекСтрока.СпецРабота5 = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "ВесовойКоэффициентДоходовРасходов" в справочнике "уатПараметрыВыработки" в случае,
// если он не заполнен.
//
Процедура ЗаполнитьВесовойКоэффициентДоходовРасходовПараметровВыработки() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ВесовойКоэффициентДоходовРасходов = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ВесовойКоэффициентДоходовРасходов = 1;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает значение константы допустимого опоздания для прогнозирования опозданий
//
Процедура УстановитьДопустимоеОтклонениеОтВремениПрибытия()
	// Значение по умолчанию = 15 минут
	ДопустимоеОпоздание = 15;
	Константы.уатДопустимоеОтклонениеОтВремениПрибытия.Установить(15);
КонецПроцедуры

Процедура ОбновитьКонстантуЭтоДемоБаза(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И Не Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = Истина;
		Возврат;
	КонецЕсли;
	
	Константы.уатЭтоДемоБаза.Установить(уатОбщегоНазначения.ЭтоДемоБаза());
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_обновления_при_переходе_с_УАТ_Стандарт_2

// Процедура выполняет обновление ИБ в случае перехода с редакции УАТ Стандарт 2
//
Процедура ПриПереходеСРедакцииСтандарт2() Экспорт
	
	ПереходСоСТД2_УстановитьСоответствиеНастроек();	
	ПереходСоСТД2_ВыполнитьОбработчикиПервоначальногоЗаполнения();
	
	ПереходСоСТД2_СоздатьДокументыВводаВыбытияТС();
	ПереходСоСТД2_СоздатьДокументыУстановкиТарифовЗП();
	ПереходСоСТД2_СоздатьДокументыУстановкиПрейскурантовТС();
	
КонецПроцедуры

// Процедура устанавливает соответствие между настройками при апгрейде СТД -> ПРОФ, СТД -> КОРП
// и переносит данные из старых настроек в новые
Процедура ПереходСоСТД2_УстановитьСоответствиеНастроек()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПраваИНастройки.Объект КАК Объект,
	|	уатПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	уатПраваИНастройки.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_Помеченные
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.ПравоНастройка.ПометкаУдаления
	|	И НЕ уатПраваИНастройки.ПравоНастройка.Предопределенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПраваИНастройки.Ссылка КАК Ссылка,
	|	уатПраваИНастройки.Код КАК Код
	|ПОМЕСТИТЬ ВТ_НеПомеченные
	|ИЗ
	|	ПланВидовХарактеристик.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	НЕ уатПраваИНастройки.ПометкаУдаления
	|	И уатПраваИНастройки.Предопределенный
	|	И НЕ уатПраваИНастройки.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Помеченные.Объект КАК Объект,
	|	ВТ_НеПомеченные.Ссылка КАК Ссылка,
	|	ВТ_Помеченные.Значение КАК Значение
	|ИЗ
	|	ВТ_Помеченные КАК ВТ_Помеченные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПомеченные КАК ВТ_НеПомеченные
	|		ПО ВТ_Помеченные.ПравоНастройка.Код = ВТ_НеПомеченные.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Рег = РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
			Рег.Объект = Выборка.Объект;
			Рег.ПравоНастройка = Выборка.Ссылка;
			Рег.Значение = Выборка.Значение;
			Рег.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереходСоСТД2_ВыполнитьОбработчикиПервоначальногоЗаполнения()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	ПриДобавленииОбработчиковОбновления(Обработчики);
	Для Каждого Обработчик Из Обработчики Цикл 
		Если Не (Обработчик.НачальноеЗаполнение Или Обработчик.Версия = "*") Тогда 
			Продолжить;
		КонецЕсли;
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик.Процедура);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходСоСТД2_СоздатьДокументыВводаВыбытияТС()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТС.ДатаВводаВЭксплуатацию КАК Период,
	|	уатТС.Организация КАК Организация,
	|	уатТС.Подразделение КАК Подразделение,
	|	уатТС.Колонна КАК Колонна,
	|	уатТС.Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатВводВЭксплуатациюТСиОборудования.ТС КАК уатВводВЭксплуатациюТСиОборудованияТС
	|		ПО (уатВводВЭксплуатациюТСиОборудованияТС.ТС = уатТС.Ссылка)
	|ГДЕ
	|	НЕ уатТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И уатТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И НЕ уатТС.ЭтоГруппа
	|	И уатВводВЭксплуатациюТСиОборудованияТС.НомерСтроки ЕСТЬ NULL
	|	И НЕ уатТС.ПометкаУдаления
	|ИТОГИ ПО
	|	Период,
	|	Организация,
	|	Подразделение,
	|	Колонна";
	
	ВыборкаПериод = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПериод.Следующий() Цикл
		ВыборкаОрганизация = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизация.Следующий() Цикл
			ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодразделение.Следующий() Цикл
				ВыборкаКолонна = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаКолонна.Следующий() Цикл
					ДокОб = Документы.уатВводВЭксплуатациюТСиОборудования.СоздатьДокумент();
					ДокОб.Дата = ВыборкаПериод.Период;
					Если Не ЗначениеЗаполнено(ДокОб.Дата) Тогда 
						ДокОб.Дата = '19000101';
					КонецЕсли;
					ДокОб.Организация = ВыборкаОрганизация.Организация;
					ДокОб.Подразделение = ВыборкаПодразделение.Подразделение;
					ДокОб.Колонна = ВыборкаКолонна.Колонна;
					ДокОб.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						Пользователи.АвторизованныйПользователь(),
						"ОсновнойОтветственный"
					);
					Если Не ЗначениеЗаполнено(ДокОб.Ответственный) Тогда 
						ДокОб.Ответственный = Пользователи.АвторизованныйПользователь();
					КонецЕсли;
					
					ВыборкаТС = ВыборкаКолонна.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаТС.Следующий() Цикл
						НовСтрока = ДокОб.ТС.Добавить();
						НовСтрока.ТС        = ВыборкаТС.Ссылка;
						НовСтрока.ДатаВвода = ВыборкаТС.Период;
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб,,, РежимЗаписиДокумента.Проведение);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходСоСТД2_СоздатьДокументыУстановкиТарифовЗП()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТарифыЗПСотрудников.Период КАК Период,
	|	уатТарифыЗПСотрудников.Сотрудник,
	|	уатТарифыЗПСотрудников.ТарифЗП,
	|	уатТарифыЗПСотрудников.ДатаОкончания,
	|	уатКадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.уатТарифыЗПСотрудников КАК уатТарифыЗПСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(уатКадроваяИсторияСотрудниковСрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних КАК уатКадроваяИсторияСотрудниковСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних КАК уатКадроваяИсторияСотрудниковСрезПоследних
	|			ПО ВложенныйЗапрос.Сотрудник = уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|				И ВложенныйЗапрос.Период = уатКадроваяИсторияСотрудниковСрезПоследних.Период
	|		ПО (уатТарифыЗПСотрудников.Сотрудник = уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник)
	|ИТОГИ ПО
	|	Период,
	|	Организация";
	
	ВыборкаПер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПер.Следующий() Цикл
		ВыборкаОрг = ВыборкаПер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрг.Следующий() Цикл
			ДокОб = Документы.уатУстановкаТарифовЗП.СоздатьДокумент();
			ДокОб.Дата = ВыборкаПер.Период;
			Если Не ЗначениеЗаполнено(ДокОб.Дата) Тогда 
				ДокОб.Дата = '19000101';
			КонецЕсли;
			
			ДокОб.Организация = ВыборкаОрг.Организация;
			ДокОб.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.АвторизованныйПользователь(),
				"ОсновнойОтветственный"
			);
			Если Не ЗначениеЗаполнено(ДокОб.Ответственный) Тогда 
				ДокОб.Ответственный = Пользователи.АвторизованныйПользователь();
			КонецЕсли;
			
			ВыборкаДетал = ВыборкаОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетал.Следующий() Цикл
				НовСтрока = ДокОб.Тарифы.Добавить();
				НовСтрока.Тариф         = ВыборкаДетал.ТарифЗП;
				НовСтрока.Сотрудник     = ВыборкаДетал.Сотрудник;
				НовСтрока.ДатаОкончания = ВыборкаДетал.ДатаОкончания;
				НовСтрока.ДатаНачала    = ВыборкаДетал.Период;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб,,, РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходСоСТД2_СоздатьДокументыУстановкиПрейскурантовТС()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(уатПрейскурантыТС.ДатаНачала, МЕСЯЦ) КАК ДатаДок,
	|	уатПрейскурантыТС.ДатаНачала КАК ДатаНачала,
	|	уатПрейскурантыТС.ДатаОкончания,
	|	уатПрейскурантыТС.Ссылка,
	|	уатПрейскурантыТС.Ссылка.Организация КАК Организация
	|ИЗ
	|	Справочник.уатПрейскурантыТС КАК уатПрейскурантыТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатУстановкаПрейскурантовТС.Прейскуранты КАК уатУстановкаПрейскурантовТСПрейскуранты
	|		ПО (уатУстановкаПрейскурантовТСПрейскуранты.Прейскурант = уатПрейскурантыТС.Ссылка)
	|ГДЕ
	|	НЕ уатПрейскурантыТС.ЭтоГруппа
	|	И НЕ уатПрейскурантыТС.ПометкаУдаления
	|	И уатУстановкаПрейскурантовТСПрейскуранты.НомерСтроки ЕСТЬ NULL
	|ИТОГИ ПО
	|	ДатаНачала,
	|	Организация";
	
	ВыборкаПер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПер.Следующий() Цикл
		ВыборкаОрг = ВыборкаПер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрг.Следующий() Цикл
			ДокОб = Документы.уатУстановкаПрейскурантовТС.СоздатьДокумент();
			ДокОб.Дата = ВыборкаПер.ДатаДок;
			Если Не ЗначениеЗаполнено(ДокОб.Дата) Тогда 
				ДокОб.Дата = '19000101';
			КонецЕсли;
			
			ДокОб.Организация   = ВыборкаОрг.Организация; 
			ДокОб.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.АвторизованныйПользователь(),
				"ОсновнойОтветственный"
			);
			Если Не ЗначениеЗаполнено(ДокОб.Ответственный) Тогда 
				ДокОб.Ответственный = Пользователи.АвторизованныйПользователь();
			КонецЕсли;
			
			ВыборкаДетал = ВыборкаОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетал.Следующий() Цикл
				НовСтрока = ДокОб.Прейскуранты.Добавить();
				НовСтрока.Прейскурант = ВыборкаДетал.Ссылка;
				Если ЗначениеЗаполнено(ВыборкаДетал.ДатаНачала) Тогда
					НовСтрока.ДатаНачала = ВыборкаДетал.ДатаНачала;
				Иначе
					НовСтрока.ДатаНачала = Дата('19000101');
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаДетал.ДатаОкончания) Тогда
					НовСтрока.ДатаОкончания = ВыборкаДетал.ДатаОкончания;
				Иначе
					НовСтрока.ДатаОкончания = Дата('21000101');
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб,,, РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_1_5

// Процедура выполняет перенос данных из помеченной на удаление ТЧ "УдалитьСекции" справочника "уатТС"
// в справочник "уатСекцииТС".
//
Процедура ПеренестиСекцииТСВСправочник_2_1_5_3() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТСУдалитьСекции.Ссылка КАК Ссылка,
	|	уатТСУдалитьСекции.Секция КАК Секция,
	|	уатТСУдалитьСекции.Объем КАК Объем
	|ИЗ
	|	Справочник.уатТС.УдалитьСекции КАК уатТСУдалитьСекции
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТС.Следующий() Цикл 
		
		ВыборкаСекции = ВыборкаТС.Выбрать();
		Пока ВыборкаСекции.Следующий() Цикл 
			СекцияОб = Справочники.уатСекцииТС.СоздатьЭлемент();
			СекцияОб.Владелец     = ВыборкаСекции.Ссылка;
			СекцияОб.Наименование = ВыборкаСекции.Секция;
			СекцияОб.Объем        = ВыборкаСекции.Объем;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СекцияОб);
		КонецЦикла;
		
		ТСОб = ВыборкаТС.Ссылка.ПолучитьОбъект();
		ТСОб.УдалитьСекции.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТСОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет значения настроек организации "Время начала ремонтного листа" и "Время окончания ремонтного листа".
//
Процедура ЗаполнитьВремяНачалаОкончанияРемонтов_2_1_5_4() Экспорт
	// время выезда ПЛ -> время начала РЛ
	НЗ_ПЛ = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗ_ПЛ.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ);
	НЗ_ПЛ.Прочитать();
	
	тблЗначенияНастроек = НЗ_ПЛ.Выгрузить();
	тблЗначенияНастроек.ЗаполнитьЗначения(ПланыВидовХарактеристик.уатПраваИНастройки.ВремяНачалаРЛ, "ПравоНастройка");
	
	НЗ_РЛ = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗ_РЛ.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ВремяНачалаРЛ);
	НЗ_РЛ.Загрузить(тблЗначенияНастроек);
	
	Попытка
		НЗ_РЛ.Записать();
	Исключение
		ТекстНСТР = "Возникла ошибка при обновлении настройки ""Время начала ремонтного листа"" (2.1.5.4-ПраваИНастройки)" + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецПопытки;
	
	// время возвращения ПЛ -> время окончания РЛ
	НЗ_ПЛ = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗ_ПЛ.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ);
	НЗ_ПЛ.Прочитать();
	
	тблЗначенияНастроек = НЗ_ПЛ.Выгрузить();
	тблЗначенияНастроек.ЗаполнитьЗначения(ПланыВидовХарактеристик.уатПраваИНастройки.ВремяОкончанияРЛ, "ПравоНастройка");
	
	НЗ_РЛ = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗ_РЛ.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ВремяОкончанияРЛ);
	НЗ_РЛ.Загрузить(тблЗначенияНастроек);
	
	Попытка
		НЗ_РЛ.Записать();
	Исключение
		ТекстНСТР = "Возникла ошибка при обновлении настройки ""Время окончания ремонтного листа"" (2.1.5.4-ПраваИНастройки)" + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецПопытки;
КонецПроцедуры

// Процедура заполняет краткое наименование в справочнике "Виды упаковки".
//
Процедура ЗаполнитьКраткоеНаименованиеВидаУпаковок_2_1_5_5() Экспорт
	
	Если Метаданные.Справочники.Найти("уатВидыУпаковки_уэ") = Неопределено Тогда
		Возврат;
	КонецЕСли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатВидыУпаковки_уэ.Ссылка КАК Ссылка,
	|	уатВидыУпаковки_уэ.КраткоеНаименование КАК КраткоеНаименование,
	|	уатВидыУпаковки_уэ.Наименование КАК Наименование,
	|	уатВидыУпаковки_уэ.Предопределенный КАК Предопределенный,
	|	уатВидыУпаковки_уэ.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|ГДЕ
	|	уатВидыУпаковки_уэ.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(Выборка.КраткоеНаименование) Тогда
			Если Выборка.Ссылка = Справочники.уатВидыУпаковки_уэ.ОсновнойВидУпаковки Тогда
				СправочникОбъект.КраткоеНаименование = НСтр("en='Package, pcs.';ru='Упак., шт.'");
			Иначе
				СправочникОбъект.КраткоеНаименование = Выборка.Наименование;
			КонецЕсли;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизит "ДатаИВремяВыполненияПлан" в документах "уатМаршрутныйЛист".
//
Процедура ЗаполнитьДатуВремяВыполненияПланВМЛ_2_1_5_6() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	НЕ уатМаршрутныйЛист.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ДокОб.Заказы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоследняяСтрока  = ДокОб.Заказы[ДокОб.Заказы.Количество()-1];
		ТекИндекс        = ДокОб.Заказы.Количество()-1;
		ПоследнийПункт   = ДокОб.Заказы[ТекИндекс].Пункт;
		ПредЗаказ        = Неопределено;
		ПоследняяСтоянка = 0;
		
		Пока ТекИндекс > 0 Цикл 
			ТекСтрока = ДокОб.Заказы[ТекИндекс];
			Если Не ТекСтрока.Пункт = ПоследнийПункт Тогда 
				Прервать;
			КонецЕсли;
			
			Если Не ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя Тогда 
				ПоследняяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтоянка, ТекСтрока.Стоянка);
				ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
			КонецЕсли;
			
			ТекИндекс = ТекИндекс - 1;
		КонецЦикла;
		
		Если ПоследняяСтрока.ПрибытиеПлан > '19700101000000' Тогда
			ДокОб.ДатаИВремяВыполненияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтрока.ПрибытиеПлан, ПоследняяСтоянка);
		Иначе
			ДокОб.ДатаИВремяВыполненияПлан = '00010101';
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизиты "ОтрезокПути" в ТЧ документов "уатЗаказГрузоотправителя" и "уатПотребностьВПеревозке_уэ".
//
Процедура ЗаполнитьОтрезкиПутиВЗаказах_2_1_5_9() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказГрузоотправителяГрузовойСостав.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|			И (НЕ уатЗаказГрузоотправителя.ПометкаУдаления)
	|			И (уатЗаказГрузоотправителя.FTL)
	|			И (уатЗаказГрузоотправителяГрузовойСостав.ОтрезокПути = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатЗаказГрузоотправителяТовары.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|			И (НЕ уатЗаказГрузоотправителя.ПометкаУдаления)
	|			И (уатЗаказГрузоотправителя.FTL)
	|			И (уатЗаказГрузоотправителяТовары.ОтрезокПути = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПотребностьВПеревозке_уэГрузовойСостав.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ.ГрузовойСостав КАК уатПотребностьВПеревозке_уэГрузовойСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|		ПО уатПотребностьВПеревозке_уэГрузовойСостав.ID = уатПотребностьВПеревозке_уэПунктыНазначения.ID
	|			И (уатПотребностьВПеревозке_уэПунктыНазначения.FTL)
	|			И (уатПотребностьВПеревозке_уэГрузовойСостав.ОтрезокПути = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|		ПО уатПотребностьВПеревозке_уэГрузовойСостав.Ссылка = уатПотребностьВПеревозке_уэ.Ссылка
	|			И (НЕ уатПотребностьВПеревозке_уэ.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПотребностьВПеревозке_уэТоварныйСостав.Ссылка
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ.ТоварныйСостав КАК уатПотребностьВПеревозке_уэТоварныйСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|		ПО уатПотребностьВПеревозке_уэТоварныйСостав.ID = уатПотребностьВПеревозке_уэПунктыНазначения.ID
	|			И (уатПотребностьВПеревозке_уэПунктыНазначения.FTL)
	|			И (уатПотребностьВПеревозке_уэТоварныйСостав.ОтрезокПути = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|		ПО уатПотребностьВПеревозке_уэТоварныйСостав.Ссылка = уатПотребностьВПеревозке_уэ.Ссылка
	|			И (НЕ уатПотребностьВПеревозке_уэ.ПометкаУдаления)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаказы = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаЗаказы.Следующий() Цикл 
		ДокОб = ВыборкаЗаказы.Ссылка.ПолучитьОбъект();
		
		ОтрезокПутиПоУмолчанию = Строка(ДокОб.АдресОтправления) + " - " + Строка(ДокОб.АдресНазначения);
		
		Для Каждого ТекСтрока Из ДокОб.ГрузовойСостав Цикл 
			Если Не ПустаяСтрока(ТекСтрока.ОтрезокПути) Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.ОтрезокПути = ОтрезокПутиПоУмолчанию;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ДокОб.Товары Цикл 
			Если Не ПустаяСтрока(ТекСтрока.ОтрезокПути) Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.ОтрезокПути = ОтрезокПутиПоУмолчанию;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
	ВыборкаПотребности = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаПотребности.Следующий() Цикл 
		ДокОб = ВыборкаПотребности.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаПунктов Из ДокОб.ПунктыНазначения Цикл 
			Если Не СтрокаПунктов.FTL Тогда 
				Продолжить;
			КонецЕсли;
			
			ОтрезокПутиПоУмолчанию = Строка(СтрокаПунктов.АдресОтправления) + " - " + Строка(СтрокаПунктов.АдресНазначения);
			
			Для Каждого ТекСтрока Из ДокОб.ГрузовойСостав Цикл 
				Если Не ТекСтрока.ID = СтрокаПунктов.ID Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекСтрока.ОтрезокПути) Тогда 
					Продолжить;
				КонецЕсли;
				
				ТекСтрока.ОтрезокПути = ОтрезокПутиПоУмолчанию;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из ДокОб.ТоварныйСостав Цикл 
				Если Не ТекСтрока.ID = СтрокаПунктов.ID Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекСтрока.ОтрезокПути) Тогда 
					Продолжить;
				КонецЕсли;
				
				ТекСтрока.ОтрезокПути = ОтрезокПутиПоУмолчанию;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьХранилищеСистемныхНастроекНачальнойСтраницы_2_1_5_9() Экспорт
	СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого Пользователь Из СписокПольЗователей Цикл

		ТекПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Имя);
		
		ЭтоТерминал = ТекПользователь.Роли.Содержит(Метаданные.Роли.уатТерминалПутевыхЛистов)
			И Не ТекПользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
			
		Если НЕ ЭтоТерминал Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();

		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ПраваяКолонка.Очистить();

		НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы,,ТекПользователь);
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_1

// Процедура выполняет заполнение предопределенных данных в справочнике "Учетные записи системы мониторинга".
//
Процедура ЗаполнитьПредопределенныеДанныеУчетныхЗаписейСистемМониторинга_2_2_1_4() Экспорт 
	
	Если Метаданные.Справочники.Найти("уатУчетныеЗаписиСистемыМониторинга") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.уатУчетныеЗаписиСистемыМониторинга.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Очищает регистр кэша по видам бюджетов подсистемы Бюджетирования
//
Процедура ОчиститьКэшВспомогательныхДанныхВидыБюджетов_2_2_1_4() Экспорт
	Набор = РегистрыСведений.СтатусыОбработкиВидаБюджета.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
КонецПроцедуры

// Процедура выполняет обновление реквизитов стоянки в документах.
//
Процедура ОбновитьСтоянкуВДокументах_2_2_1_5() Экспорт 
	
	Запрос = Новый Запрос();
	
	// Обновление документов "уатЗаказГрузоотправителя".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКОбновлению.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|	ГДЕ
	|		НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|		И (уатЗаказГрузоотправителя.УдалитьСтоянкаПунктОтправления > 0
	|				ИЛИ уатЗаказГрузоотправителя.УдалитьСтоянкаПунктНазначения > 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка
	|	ИЗ
	|		Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|	ГДЕ
	|		НЕ уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка.ПометкаУдаления
	|		И уатЗаказГрузоотправителяПромежуточныеПункты.УдалитьСтоянка > 0) КАК ЗаказыКОбновлению";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ДокОб.УдалитьСтоянкаПунктОтправления > 0 Тогда 
			Если Не (ТипЗнч(ДокОб.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения")
					И ДокОб.АдресОтправления.ТипПункта.СтоянкаДоп > 0) Тогда 
				ДокОб.СтоянкаПунктОтправления = ДокОб.УдалитьСтоянкаПунктОтправления;
			КонецЕсли;
			ДокОб.УдалитьСтоянкаПунктОтправления = 0;
		КонецЕсли;
		
		Если ДокОб.УдалитьСтоянкаПунктНазначения > 0 Тогда 
			Если Не (ТипЗнч(ДокОб.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения")
					И ДокОб.АдресНазначения.ТипПункта.СтоянкаДоп > 0) Тогда 
				ДокОб.СтоянкаПунктНазначения = ДокОб.УдалитьСтоянкаПунктНазначения;
			КонецЕсли;
			ДокОб.УдалитьСтоянкаПунктНазначения = 0;
		КонецЕсли;
		
		Для Каждого СтрокаПП Из ДокОб.ПромежуточныеПункты Цикл 
			Если СтрокаПП.УдалитьСтоянка > 0 Тогда 
				Если Не (ТипЗнч(СтрокаПП.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
						И СтрокаПП.Пункт.ТипПункта.СтоянкаДоп > 0) Тогда 
					СтрокаПП.Стоянка = СтрокаПП.УдалитьСтоянка;
				КонецЕсли;
				СтрокаПП.УдалитьСтоянка = 0;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
	// Обновление документов "уатПотребностьВПеревозке_уэ".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбновлению.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|	ГДЕ
	|		НЕ уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ПометкаУдаления
	|		И (уатПотребностьВПеревозке_уэПунктыНазначения.УдалитьСтоянкаПунктОтправления > 0
	|				ИЛИ уатПотребностьВПеревозке_уэПунктыНазначения.УдалитьСтоянкаПунктНазначения > 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатПотребностьВПеревозке_уэПромежуточныеПункты.Ссылка
	|	ИЗ
	|		Документ.уатПотребностьВПеревозке_уэ.ПромежуточныеПункты КАК уатПотребностьВПеревозке_уэПромежуточныеПункты
	|	ГДЕ
	|		НЕ уатПотребностьВПеревозке_уэПромежуточныеПункты.Ссылка.ПометкаУдаления
	|		И уатПотребностьВПеревозке_уэПромежуточныеПункты.УдалитьСтоянка > 0) КАК ДокументыКОбновлению";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаЗаказа Из ДокОб.ПунктыНазначения Цикл 
			Если СтрокаЗаказа.УдалитьСтоянкаПунктОтправления > 0 Тогда 
				Если Не (ТипЗнч(СтрокаЗаказа.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения")
						И СтрокаЗаказа.АдресОтправления.ТипПункта.СтоянкаДоп > 0) Тогда 
					СтрокаЗаказа.СтоянкаПунктОтправления = СтрокаЗаказа.УдалитьСтоянкаПунктОтправления;
				КонецЕсли;
				СтрокаЗаказа.УдалитьСтоянкаПунктОтправления = 0;
			КонецЕсли;
			
			Если СтрокаЗаказа.УдалитьСтоянкаПунктНазначения > 0 Тогда 
				Если Не (ТипЗнч(СтрокаЗаказа.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения")
						И СтрокаЗаказа.АдресНазначения.ТипПункта.СтоянкаДоп > 0) Тогда 
					СтрокаЗаказа.СтоянкаПунктНазначения = СтрокаЗаказа.УдалитьСтоянкаПунктНазначения;
				КонецЕсли;
				СтрокаЗаказа.УдалитьСтоянкаПунктНазначения = 0;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПП Из ДокОб.ПромежуточныеПункты Цикл 
			Если СтрокаПП.УдалитьСтоянка > 0 Тогда 
				Если Не (ТипЗнч(СтрокаПП.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
						И СтрокаПП.Пункт.ТипПункта.СтоянкаДоп > 0) Тогда 
					СтрокаПП.Стоянка = СтрокаПП.УдалитьСтоянка;
				КонецЕсли;
				СтрокаПП.УдалитьСтоянка = 0;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
	// Обновление документов "уатМаршрутныйЛист".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	НЕ уатМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления
	|	И уатМаршрутныйЛистЗаказы.УдалитьСтоянкаИзПункта > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаЗаказа Из ДокОб.Заказы Цикл 
			Если СтрокаЗаказа.УдалитьСтоянкаИзПункта > 0 Тогда 
				СтрокаЗаказа.СтоянкаИзПункта = СтрокаЗаказа.УдалитьСтоянкаИзПункта;
				СтрокаЗаказа.Стоянка = 0;
				СтрокаЗаказа.УдалитьСтоянкаИзПункта = 0;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_2

// Процедура выполняет обновление объектов подсистемы Планирование работы ТС.
//
Процедура ПланированиеРаботыТС_2_2_2_3() Экспорт 
	
	// справочник уатСценарииПланирования
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСценарииПланирования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСценарииПланирования КАК уатСценарииПланирования
	|ГДЕ
	|	уатСценарииПланирования.ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.ПустаяСсылка)
	|	ИЛИ уатСценарииПланирования.Раздел = ЗНАЧЕНИЕ(Перечисление.уатРазделыПланирования.ПустаяСсылка)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.Раздел = Перечисления.уатРазделыПланирования.ВыработкаТСпоПЛ;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьАвтоматическуюМаршрутизацию_2_2_2_3() Экспорт

	Если Метаданные.Константы.Найти("уатИспользоватьАвтоматическуюМаршрутизацию_уэ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Константы["уатИспользоватьАвтоматическуюМаршрутизацию_уэ"].Установить(уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП());

КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_3

// Процедура выполняет заполнение статусов для заявок на ремонт
//
Процедура ВыполнитьЗапонениеСтатусовДляЗаявокНаРемонт_2_2_3_2() Экспорт 
	
	СпрОб = Справочники.уатСтатусы_уэ.Новый.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Отклонен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);

	СпрОб = Справочники.уатСтатусы_уэ.НазначенРемонт.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(135, 206, 235), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.РемонтВыполнен.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(233, 150, 122), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Утвержден.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаявкиНаРемонт          = Истина;
	СпрОб.ЦветФонаПоУмолчанию                = Новый ХранилищеЗначения(Новый Цвет(255, 236, 139), Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатЗаявкаНаРемонт.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА уатЗакрытиеЗаявокНаРемонтыЗаявки.Ссылка.Проведен
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отклонен)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатРемонтныйЛист.Проведен
	               |					ТОГДА ВЫБОР
	               |							КОГДА уатРемонтныйЛист.Выполнен
	               |								ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.НазначенРемонт)
	               |							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.РемонтВыполнен)
	               |						КОНЕЦ
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Статус
	               |ИЗ
	               |	Документ.уатЗаявкаНаРемонт КАК уатЗаявкаНаРемонт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	               |		ПО уатЗаявкаНаРемонт.Ссылка = уатРемонтныйЛист.ЗаявкаНаРемонт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗакрытиеЗаявокНаРемонты.Заявки КАК уатЗакрытиеЗаявокНаРемонтыЗаявки
	               |		ПО уатЗаявкаНаРемонт.Ссылка = уатЗакрытиеЗаявокНаРемонтыЗаявки.ЗаявкаНаРемонт
	               |ГДЕ
	               |	уатЗаявкаНаРемонт.СтатусВыполнения = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.СтатусВыполнения = Выборка.Статус;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокОбъект);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_4

// Процедура снимает пометки на удаление со всех элементов справочника "Типы ТС"
//
Процедура СнятьПометкиУдаленияСправочникаТипыТС_2_2_4_2() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатТипыТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТипыТС КАК уатТипыТС
	|ГДЕ
	|	уатТипыТС.ПометкаУдаления = ИСТИНА";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ПометкаУдаления = Ложь;
		Попытка
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Выставляет флаг "Самосвал" в справочнике "Типы ТС"
//
Процедура ВыставитьФлагСамосвал_2_2_4_2() Экспорт
	
	Выборка = Справочники.уатТипыТС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();

		СпрОбъект.Самосвал = (СпрОбъект.ВидТС = Перечисления.уатВидыТС.ПрицепСамосвал)
			ИЛИ (СпрОбъект.ВидТС = Перечисления.уатВидыТС.Самосвал)
			ИЛИ (СпрОбъект.Наименование = "Полуприцепы самосвальные");
		
		Попытка
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Приводит к новому виду записи, связанные с (бывшими) основным диспетчером и механиком 
// в регистре сведений "уатПраваИНастройки".
//
Процедура ИзменитьСтруктуруНастроекПерсонала_2_2_4_2() Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПраваИНастройки.Объект КАК Объект,
	|	уатПраваИНастройки.Значение КАК Значение,
	|	уатПраваИНастройки.ПравоНастройка.ИмяПредопределенныхДанных КАК ПравоНастройкаИмяПредопределенныхДанных
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	(уатПраваИНастройки.ПравоНастройка.ИмяПредопределенныхДанных = &ВыдалДиспетчер
	|			ИЛИ уатПраваИНастройки.ПравоНастройка.ИмяПредопределенныхДанных = &ВыпустилМеханик)";
	мЗапрос.УстановитьПараметр("ВыдалДиспетчер", "ВыдалДиспетчер");
	мЗапрос.УстановитьПараметр("ВыпустилМеханик", "ВыпустилМеханик");
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	НЗ = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	
	Пока мВыборка.Следующий() Цикл
		НоваяЗапись = НЗ.Добавить();
		НоваяЗапись.ПравоНастройка = ?(мВыборка.ПравоНастройкаИмяПредопределенныхДанных = "ВыдалДиспетчер", 
			ПланыВидовХарактеристик.уатПраваИНастройки.ПринялДиспетчер,
			ПланыВидовХарактеристик.уатПраваИНастройки.ПринялМеханик);
		НоваяЗапись.Объект = мВыборка.Объект;
		НоваяЗапись.Значение = мВыборка.Значение;
	КонецЦикла;
	
	Попытка
		НЗ.Записать(Ложь);
	Исключение
		ТекстНСТР = НСтр("en='Error occurred while updating settings ""Main mechanic"" and ""Main dispatch manager"" (2.2.3.2-ПраваИНастройки)';ru='Возникла ошибка при обновлении настроек ""Основной диспетчер"" и ""Основной механик"" (2.2.3.2-ПраваИНастройки)'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецПопытки;;
КонецПроцедуры

// Процедура выполняет заполнение нового реквизита Статус справочника Маршруты
//
Процедура ЗаполнениеСтатусовМаршрутов_2_2_4_2() Экспорт
	Выборка = Справочники.уатМаршруты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа ИЛИ ЗначениеЗаполнено(Выборка.Статус) Тогда
			Продолжить;
		КонецЕсли;
		
		СпрОб = Выборка.ПолучитьОбъект();
		Если СпрОб.ПометкаУдаления Тогда
			СпрОб.Статус = Перечисления.уатСтатусыДействия.НеДействует;
		Иначе
			СпрОб.Статус = Перечисления.уатСтатусыДействия.Действует;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет заполнение новых реквизитов "ВидОперации" и "Перевозчик" в документах уатТТД 
//
Процедура ЗаполнитьРеквизитыТТД_2_2_4_2() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТТД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатТТД КАК уатТТД";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		ДокОб.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту;
		ДокОб.Перевозчик = ДокОб.Организация;
	
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб);
	КонецЦикла;
КонецПроцедуры

// Для норм с расчетом по формулам проставляет множитель 0.01 (линейная, трансп. работа, изм. собств. веса)
//
Процедура ДобавитьМножитель0_01вФормулыНормРасходаГСМ_2_2_4_2() Экспорт
	
	РННормыРасходаГСМ = РегистрыСведений.уатНормыРасходаГСМ.СоздатьНаборЗаписей();
	РННормыРасходаГСМ.Прочитать();
	
	флЗаписать = Ложь;
	
	Для Каждого ТекЗапись Из РННормыРасходаГСМ Цикл
		ФормулаСтруктура = ТекЗапись.АлгоритмРасчета.Получить();
		
		Если ФормулаСтруктура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФормулаСтруктура.Свойство("ЛинейнаяНорма")
			И НЕ ПустаяСтрока(ФормулаСтруктура.ЛинейнаяНорма)
			И СтрНайти(ФормулаСтруктура.ЛинейнаяНорма, "0.01") = 0 Тогда
			ФормулаСтруктура.ЛинейнаяНорма = "0.01*" + ФормулаСтруктура.ЛинейнаяНорма;
			флЗаписать = Истина;
		КонецЕсли;
		Если ФормулаСтруктура.Свойство("НормаНаИзменениеСобственногоВеса")
			И НЕ ПустаяСтрока(ФормулаСтруктура.НормаНаИзменениеСобственногоВеса)
			И СтрНайти(ФормулаСтруктура.НормаНаИзменениеСобственногоВеса, "0.01") = 0 Тогда
			ФормулаСтруктура.НормаНаИзменениеСобственногоВеса = "0.01*" + ФормулаСтруктура.НормаНаИзменениеСобственногоВеса;
			флЗаписать = Истина;
		КонецЕсли;
		Если ФормулаСтруктура.Свойство("НормаНаТранспортнуюРаботу")
			И НЕ ПустаяСтрока(ФормулаСтруктура.НормаНаТранспортнуюРаботу)
			И СтрНайти(ФормулаСтруктура.НормаНаТранспортнуюРаботу, "0.01") = 0 Тогда
			ФормулаСтруктура.НормаНаТранспортнуюРаботу = "0.01*" + ФормулаСтруктура.НормаНаТранспортнуюРаботу;
			флЗаписать = Истина;
		КонецЕсли;
		
		Если флЗаписать Тогда
			ТекЗапись.АлгоритмРасчета = Новый ХранилищеЗначения(ФормулаСтруктура);
		КонецЕсли;
	КонецЦикла;
	
	Если флЗаписать Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(РННормыРасходаГСМ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет запись данных о владельце топливной карты в РС уатИсторияПеремещенияТопливныхКарт.
//
Процедура ЗаписатьДанныеОВладельцеТопливныхКартВРегистр_2_2_4_3() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПластиковыеКарты.Ссылка КАК Ссылка,
	               |	уатПластиковыеКарты.КомуВыдана КАК КомуВыдана
	               |ИЗ
	               |	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	               |ГДЕ
	               |	уатПластиковыеКарты.ДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.уатИсторияПеремещенияТопливныхКарт.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Карта.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Карта			 = Выборка.Ссылка;
			НоваяЗапись.КомуВыдана		 = Выборка.КомуВыдана;
			НоваяЗапись.Период			 = Дата(2010,01,01);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ДатаВыдачи = НоваяЗапись.Период;
			СпрОбъект.КомуВыдана = НоваяЗапись.КомуВыдана;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_5

// Процедура заполняет реквизит СуммаДокумента в документах ТТД
Процедура ЗаполнитьРеквизитыТТД_2_2_5_2() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатТТД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатТТД КАК уатТТД";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		ДокОб.СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокОб, "Стоимость");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОб,,, РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет справочник "Регистрационные документы"
Процедура ПеренестиДокументыТСВодителей_2_2_5_3() Экспорт

	Если Метаданные.РегистрыСведений.Найти("УдалитьУатДокументыВодителей") = Неопределено 
		ИЛИ Метаданные.РегистрыСведений.Найти("УдалитьУатДокументыТС") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьУатДокументыВодителей.ВидДокумента КАК ВидДокумента,
	|	УдалитьУатДокументыВодителей.Номер КАК Номер,
	|	УдалитьУатДокументыВодителей.Серия КАК Серия,
	|	УдалитьУатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	УдалитьУатДокументыВодителей.ДатаОкончания КАК ДатаОкончания,
	|	УдалитьУатДокументыВодителей.Архив КАК Архив,
	|	УдалитьУатДокументыВодителей.КемВыдан КАК КемВыдан,
	|	УдалитьУатДокументыВодителей.Категория КАК Категория,
	|	УдалитьУатДокументыВодителей.Комментарий КАК Комментарий,
	|	УдалитьУатДокументыВодителей.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
	|	УдалитьУатДокументыВодителей.Изображение КАК Изображение,
	|	УдалитьУатДокументыВодителей.Сотрудник КАК ВладелецДокументов,
	|	ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя) КАК ПринадлежностьДокументов
	|ИЗ
	|	РегистрСведений.УдалитьУатДокументыВодителей КАК УдалитьУатДокументыВодителей
	|ГДЕ
	|	УдалитьУатДокументыВодителей.ФлагПереноса = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьУатДокументыТС.ВидДокумента,
	|	УдалитьУатДокументыТС.Номер,
	|	УдалитьУатДокументыТС.Серия,
	|	УдалитьУатДокументыТС.ДатаВыдачи,
	|	УдалитьУатДокументыТС.ДатаОкончания,
	|	УдалитьУатДокументыТС.Архив,
	|	УдалитьУатДокументыТС.КемВыдан,
	|	УдалитьУатДокументыТС.Категория,
	|	УдалитьУатДокументыТС.Комментарий,
	|	УдалитьУатДокументыТС.ПрисоединенныйФайл,
	|	УдалитьУатДокументыТС.Изображение,
	|	УдалитьУатДокументыТС.ТС,
	|	ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС)
	|ИЗ
	|	РегистрСведений.УдалитьУатДокументыТС КАК УдалитьУатДокументыТС
	|ГДЕ
	|	УдалитьУатДокументыТС.ФлагПереноса = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		НачатьТранзакцию();
		Попытка
			СпрОб = Справочники.уатРегистрационныеДокументы.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СпрОб, Выборка);
			СпрОб.Статус = ?(Выборка.Архив = Истина, Перечисления.уатСтатусыдействия.НеДействует, Перечисления.уатСтатусыдействия.Действует);
			СпрОб.Наименование = "" + СпрОб.ВидДокумента + " " + ?(ЗначениеЗаполнено(СпрОб.Серия), СпрОб.Серия+ " ", "") 
			+ ?(ЗначениеЗаполнено(СпрОб.Номер), СпрОб.Номер, "") + ?(ЗначениеЗаполнено(СпрОб.ВладелецДокументов), " (" + СпрОб.ВладелецДокументов + ")", "");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
			
			ДанныеКартинки = Выборка.Изображение.Получить();
			Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
				
				Если ТипЗнч(ДанныеКартинки) = Тип("Картинка") Тогда
					ДанныеКартинки = ДанныеКартинки.ПолучитьДвоичныеДанные();
				КонецЕсли;
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("ВладелецФайлов",              СпрОб.Ссылка);
				ПараметрыФайла.Вставить("Автор",                       Неопределено);
				ПараметрыФайла.Вставить("ИмяБезРасширения",            СпрОб.Наименование);
				ПараметрыФайла.Вставить("РасширениеБезТочки",          "png");
				ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
				
				СсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(СпрОб.Ссылка);
				АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДанныеКартинки);
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище,,,СсылкаНаФайл);
				
				СпрОб = СпрОб.Ссылка.ПолучитьОбъект();
				СпрОб.ОсновнаяКартинка = СсылкаНаФайл;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПрисоединенныйФайл) Тогда
				уатОбщегоНазначения.ИзменитьСправочникХраненияФайлов(СпрОб.Ссылка, Выборка.ПрисоединенныйФайл);
			КонецЕсли;
			
			Если СпрОб.ПринадлежностьДокументов = ПредопределенноеЗначение("Перечисление.уатПринадлежностьДокументов.ДокументыВодителя") Тогда
				НаборЗаписей = РегистрыСведений.УдалитьУатДокументыВодителей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.ВладелецДокументов);
			Иначе
				НаборЗаписей = РегистрыСведений.УдалитьУатДокументыТС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ТС.Установить(Выборка.ВладелецДокументов);
			КонецЕсли;
			
			НаборЗаписей.Отбор.ВидДокумента.Установить(Выборка.ВидДокумента);
			НаборЗаписей.Отбор.Номер.Установить(Выборка.Номер);
			НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия);
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() Тогда
				НаборЗаписей[0].ФлагПереноса = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Перененос документов ТС и водителей';
										|en = 'Перененос документов ТС и водителей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,
			,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОтменитьТранзакцию();
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

// Заполнение реквизитов новых предопределенных элементов справочника "Статусы"
Процедура ВыполнитьЗаполнениеСтатусовДляОперацийСГрузами_2_2_5_4() Экспорт
	
	СпрОб = Справочники.уатСтатусы_уэ.Новый.ПолучитьОбъект();
	СпрОб.ДействуетНаОперацииСГрузами = Истина;
	СпрОб.ДействуетНаАктыОтгрузки     = Истина;
	СпрОб.ДействуетНаАктыПриемки      = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Выполнен.ПолучитьОбъект();
	СпрОб.ДействуетНаОперацииСГрузами = Истина;
	СпрОб.ДействуетНаАктыОтгрузки     = Истина;
	СпрОб.ДействуетНаАктыПриемки      = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(233, 150, 122), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ВРаботе.ПолучитьОбъект();
	СпрОб.ДействуетНаОперацииСГрузами = Истина;
	СпрОб.ДействуетНаАктыОтгрузки     = Истина;
	СпрОб.ДействуетНаАктыПриемки      = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(221, 160, 221), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ПовреждениеГруза.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(225, 40, 40), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.ПовреждениеУпаковки.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(178, 34, 34), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Скомплектован.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(0, 150, 70), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	СпрОб = Справочники.уатСтатусы_уэ.Разукомплектован.ПолучитьОбъект();
	СпрОб.ДействуетНаЗаказыГрузоотправителей = Истина;
	СпрОб.ЦветФонаПоУмолчанию         = Новый ХранилищеЗначения(Новый Цвет(100, 176, 16), Новый СжатиеДанных(9));	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов предопределенного элемента "СкладскаяОбработка"
// справочника "уатПараметрыВыработки".
//
Процедура ЗаполнитьПараметрВыработкиСкладскаяОбработка_2_2_5_4() Экспорт
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(Ложь, "СкладскаяОбработка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И уатПараметрыВыработки.Предопределенный");
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "СкладскаяОбработка");
	мВыборка = Запрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		
		СпрОб.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти	

#Область Обновление_на_версию_2_2_6

// Процедура заполняет реквизит ТипТочиМаршрута в тч Этапы в справочнике уатМаршруты
Процедура ЗаполнитьТипыТочекМаршрутов_2_2_6_2() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(уатМаршрутыЭтапы.ТипТочиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.ПустаяСсылка)) КАК ЭтапыТипТочкиМаршрутаПустые,
	|	уатМаршрутыЭтапы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЭтапыТипТочкиМаршрута
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутыЭтапы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭтапыТипТочкиМаршрута.Ссылка КАК Ссылка
	|ИЗ
	|	втЭтапыТипТочкиМаршрута КАК втЭтапыТипТочкиМаршрута
	|ГДЕ
	|	втЭтапыТипТочкиМаршрута.ЭтапыТипТочкиМаршрутаПустые = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		НомерСтроки = 1;
		Для Каждого ТекСтрока Из СпрОб.Этапы Цикл
			Если НомерСтроки = 1 Тогда
				ТекСтрока.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НомерСтроки = 2;
			Иначе
				ТекСтрока.ТипТочиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			КонецЕсли;
		КонецЦикла;
		Попытка
			СпрОб.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

// Процедура перезаполняет реквизиты ГруппировкаТарифов1, 2 и 3 в справочнике уатТарифыЗП
//
Процедура ИзменитьГруппировкиТарифовЗП_2_2_6_3() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыЗП.Ссылка КАК Ссылка,
	|	уатТарифыЗП.ГруппировкаТарифа1 КАК ГруппировкаТарифа1,
	|	уатТарифыЗП.ГруппировкаТарифа2 КАК ГруппировкаТарифа2,
	|	уатТарифыЗП.ГруппировкаТарифа3 КАК ГруппировкаТарифа3
	|ИЗ
	|	Справочник.уатТарифыЗП КАК уатТарифыЗП
	|ГДЕ
	|	(уатТарифыЗП.ГруппировкаТарифа1 = &Расстояние
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа2 = &Расстояние
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа3 = &Расстояние
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа1 = &ВремяРаботы
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа2 = &ВремяРаботы
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа3 = &ВремяРаботы)
	|	И уатТарифыЗП.ВидНачисления <> &ОплатаЗаРемонт");
	Запрос.УстановитьПараметр("Расстояние", Перечисления.уатГруппировкиТарифов.Расстояние);
	Запрос.УстановитьПараметр("ВремяРаботы", Перечисления.уатГруппировкиТарифов.ВремяРаботы);
	Запрос.УстановитьПараметр("ОплатаЗаРемонт", ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ГруппировкаТарифа1 = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
			СпрОб.ГруппировкаТарифа1 = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		ИначеЕсли Выборка.ГруппировкаТарифа1 = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
			СпрОб.ГруппировкаТарифа1 = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		КонецЕсли;
		Если Выборка.ГруппировкаТарифа2 = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
			СпрОб.ГруппировкаТарифа2 = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		ИначеЕсли Выборка.ГруппировкаТарифа2 = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
			СпрОб.ГруппировкаТарифа2 = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		КонецЕсли;
		Если Выборка.ГруппировкаТарифа3 = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
			СпрОб.ГруппировкаТарифа3 = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		ИначеЕсли Выборка.ГруппировкаТарифа3 = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
			СпрОб.ГруппировкаТарифа3 = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет обновление реквизита ИспользуемаяСистемаGPS.
//
Процедура ОбновитьРеквизитИспользуемаяСистемаGPS_2_2_6_4() Экспорт 
	
	Запрос = Новый Запрос();
	
	// Обновление справочника "уатТС".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.УдалитьИспользуемаяСистемаGPS КАК УдалитьИспользуемаяСистемаGPS
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатТС.УдалитьИспользуемаяСистемаGPS <> """"
	|					И уатТС.УдалитьИспользуемаяСистемаGPS <> ЗНАЧЕНИЕ(Перечисление.уатСистемаGPS.ПустаяССылка)
	|					И уатТС.УдалитьИспользуемаяСистемаGPS <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПСМ_ВнешняяСистема = Справочники.уатВнешниеСистемы.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.УдалитьИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Omnicomm Тогда
			СпрОб.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm;
		ИначеЕсли Выборка.УдалитьИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.Wialon Тогда
			СпрОб.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon; 
		ИначеЕсли Выборка.УдалитьИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS._1СЦСМ Тогда
			СпрОб.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы._1СЦСМ;
		ИначеЕсли Выборка.УдалитьИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.АвтоГРАФ Тогда
			СпрОб.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.АвтоГРАФ;
		ИначеЕсли Выборка.УдалитьИспользуемаяСистемаGPS = Перечисления.уатСистемаGPS.СКАУТ Тогда
			СпрОб.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ;
		ИначеЕсли ТипЗнч(Выборка.УдалитьИспользуемаяСистемаGPS) = Тип("Строка")
			И Выборка.УдалитьИспользуемаяСистемаGPS <> "" Тогда
			Если ПСМ_ВнешняяСистема.НаименованиеПС = Выборка.УдалитьИспользуемаяСистемаGPS Тогда
				ВнешняяСистема = Выборка.УдалитьИспользуемаяСистемаGPS;
			Иначе
				ВнешняяСистема		 = уатРаботаСРасширениями.ПСМ_НайтиВнешнююСистемуПоСтроке(Выборка.УдалитьИспользуемаяСистемаGPS);
				ПСМ_ВнешняяСистема	 = ВнешняяСистема;
				ВнешняяСистема		 = Выборка.УдалитьИспользуемаяСистемаGPS;
			КонецЕсли;
			СпрОб.ИспользуемаяСистемаGPS = ВнешняяСистема;
		КонецЕсли;
		
		СпрОб.УдалитьИспользуемаяСистемаGPS = Неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
	// Обновление справочника "уатУчетныеЗаписиСистемыМониторинга".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатУчетныеЗаписиСистемыМониторинга.Ссылка КАК Ссылка,
	|	уатУчетныеЗаписиСистемыМониторинга.УдалитьСистемаМониторинга КАК УдалитьСистемаМониторинга
	|ИЗ
	|	Справочник.уатУчетныеЗаписиСистемыМониторинга КАК уатУчетныеЗаписиСистемыМониторинга
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатУчетныеЗаписиСистемыМониторинга.УдалитьСистемаМониторинга <> """"
	|					И уатУчетныеЗаписиСистемыМониторинга.УдалитьСистемаМониторинга <> ЗНАЧЕНИЕ(Перечисление.уатСистемаGPS.ПустаяССылка)
	|					И уатУчетныеЗаписиСистемыМониторинга.УдалитьСистемаМониторинга <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.УдалитьСистемаМониторинга = Перечисления.уатСистемаGPS.Omnicomm Тогда
			СпрОб.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm;
		ИначеЕсли Выборка.УдалитьСистемаМониторинга = Перечисления.уатСистемаGPS.Wialon Тогда
			СпрОб.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon; 
		ИначеЕсли Выборка.УдалитьСистемаМониторинга = Перечисления.уатСистемаGPS._1СЦСМ Тогда
			СпрОб.СистемаМониторинга = Справочники.уатВнешниеСистемы._1СЦСМ;
		ИначеЕсли Выборка.УдалитьСистемаМониторинга = Перечисления.уатСистемаGPS.АвтоГРАФ Тогда
			СпрОб.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ;
		ИначеЕсли Выборка.УдалитьСистемаМониторинга = Перечисления.уатСистемаGPS.СКАУТ Тогда
			СпрОб.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ;
		ИначеЕсли ТипЗнч(Выборка.УдалитьСистемаМониторинга) = Тип("Строка")
			И Выборка.УдалитьСистемаМониторинга <> "" Тогда
			Если ПСМ_ВнешняяСистема.НаименованиеПС = Выборка.УдалитьСистемаМониторинга Тогда
				ВнешняяСистема = ПСМ_ВнешняяСистема;
			Иначе
				ВнешняяСистема		 = уатРаботаСРасширениями.ПСМ_НайтиВнешнююСистемуПоСтроке(Выборка.УдалитьСистемаМониторинга);
				ПСМ_ВнешняяСистема	 = ВнешняяСистема;
			КонецЕсли;
			СпрОб.СистемаМониторинга = ВнешняяСистема;
		КонецЕсли;
		
		СпрОб.УдалитьСистемаМониторинга = Неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита ВидЗагрузкиДанныхОтПЦ справочника уатАЗС.
//
Процедура ЗаполнитьРеквизитВидЗагрузкиДанныхОтПЦ_2_2_6_4() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатАЗС.ВидЗагрузкиДанныхОтПЦ КАК ВидЗагрузкиДанныхОтПЦ,
	|	уатАЗС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатАЗС КАК уатАЗС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ВидЗагрузкиДанныхОтПЦ = Перечисления.уатВидыЗагрузкиДанныхОтПЦ.ЗагрузкаИзФайла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение предопределенных данных в справочнике "Внешние системы".
//
Процедура ЗаполнитьПредопределенныеДанныеУчетныхЗаписейСистемМониторинга_2_2_6_5() Экспорт 
	
	Справочники.уатВнешниеСистемы.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура выполняет заполнение предопределенных данных в справочнике "Внешние системы".
//
Процедура ЗаполнитьПредопределенныеДанныеПрофилейОбменаСВнешнимиСистемами_2_2_6_5() Экспорт 
	
	Справочники.уатПрофилиОбменаСВнешнимиСистемами.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура заполняет колонку Валюта в документах Взаимозачет и Корректировка долга, колонку Заказ на ТС в ПТУ
//
Процедура ЗаполнитьВалютуЗаказ_2_2_6_6() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""уатВзаимозачет"" КАК ВидДокумента,
	|	уатВзаимозачет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатВзаимозачет КАК уатВзаимозачет
	|ГДЕ
	|	НЕ уатВзаимозачет.ПометкаУдаления
	|	И (уатВзаимозачет.Состав.ДоговорДебитора <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				И уатВзаимозачет.Состав.ВалютаДебитора = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ИЛИ уатВзаимозачет.Состав.ДоговорКредитора <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				И уатВзаимозачет.Состав.ВалютаКредитора = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатКорректировкаДолга"",
	|	уатКорректировкаДолга.Ссылка
	|ИЗ
	|	Документ.уатКорректировкаДолга КАК уатКорректировкаДолга
	|ГДЕ
	|	НЕ уатКорректировкаДолга.ПометкаУдаления
	|	И уатКорректировкаДолга.Состав.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И уатКорректировкаДолга.Состав.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатПоступлениеТоваровУслуг"",
	|	уатПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг КАК уатПоступлениеТоваровУслуг
	|ГДЕ
	|	НЕ уатПоступлениеТоваровУслуг.ПометкаУдаления
	|	И уатПоступлениеТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС)
	|	И уатПоступлениеТоваровУслуг.Сделка ССЫЛКА Документ.уатЗаказГрузоотправителя
	|	И уатПоступлениеТоваровУслуг.Сделка <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатПоступлениеТоваровУслуг.Услуги.ЗаказНаТС = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.ВидДокумента = "уатВзаимозачет" Тогда
			Для Каждого ТекСтрока Из ДокОбъект.Состав Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ВалютаДебитора) Тогда
					ТекСтрока.ВалютаДебитора = ТекСтрока.ДоговорДебитора.ВалютаВзаиморасчетов;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ВалютаКредитора) Тогда
					ТекСтрока.ВалютаКредитора = ТекСтрока.ДоговорКредитора.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Выборка.ВидДокумента = "уатКорректировкаДолга" Тогда
			Для Каждого ТекСтрока Из ДокОбъект.Состав Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
					ТекСтрока.Валюта = ТекСтрока.Договор.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Выборка.ВидДокумента = "уатПоступлениеТоваровУслуг" Тогда
			Для Каждого ТекСтрока Из ДокОбъект.Услуги Цикл
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекСтрока.ЗаказНаТС = ДокОбъект.Сделка;
			КонецЦикла;
		
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
	КонецЦикла;
КонецПроцедуры

// Процедура изменяет формат хранения настроек видов контактной информации
Процедура ЗаполнитьНастройкиВидовКонтактнойИнформации_2_2_6_7() Экспорт
	стрНастройкиВидовКИ = уатОбщегоНазначенияПовтИсп_проф.НастройкиВидовКонтактнойИнформацииПоУмолчанию();
	
	ХранилищеНастройкиМПВодителя = Константы.уатНастройкиМобильногоПриложенияВодителя.Получить();
	Если ХранилищеНастройкиМПВодителя = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	стрНастройкиМПВодителя = ХранилищеНастройкиМПВодителя.Получить();
	Если стрНастройкиМПВодителя = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(стрНастройкиВидовКИ, стрНастройкиМПВодителя);
	Если стрНастройкиМПВодителя.Свойство("видКонтактнойИнформацииТелефонОтветственного") Тогда
		стрНастройкиВидовКИ.видКонтактнойИнформацииТелефонПользователя = стрНастройкиМПВодителя.видКонтактнойИнформацииТелефонОтветственного;
	КонецЕсли;
	Если стрНастройкиМПВодителя.Свойство("видКонтактнойИнформацииEmailОтветственного") Тогда
		стрНастройкиВидовКИ.видКонтактнойИнформацииEmailПользователя = стрНастройкиМПВодителя.видКонтактнойИнформацииEmailОтветственного;
	КонецЕсли;
	
	уатОбщегоНазначения_проф.СохранитьНастройкиВидовКонтактнойИнформации(стрНастройкиВидовКИ);
	уатМобильноеПриложениеВодителяСервер.СохранитьНастройкиМобильногоПриложения(стрНастройкиМПВодителя);
КонецПроцедуры

// Процедура выполняет заполнение предопределенных данных в справочнике "Статусы топливных карт".
//
Процедура ЗаполнитьПредопределенныеДанныеСтатусовТопливныхКарт_2_2_6_8() Экспорт 
	
	Справочники.уатСтатусыТопливныхКарт.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура выполняет обновление реквизита Статус.
//
Процедура ОбновитьРеквизитСтатусТопливныекарты_2_2_6_8() Экспорт 
	
	Запрос = Новый Запрос();
	
	// Обновление справочника "уатПластиковыеКарты".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПластиковыеКарты.Ссылка КАК Ссылка,
	|	уатПластиковыеКарты.УдалитьСтатус КАК УдалитьСтатус
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.УдалитьСтатус <> ЗНАЧЕНИЕ(Перечисление.уатСтатусыКарт.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.УдалитьСтатус = Перечисления.уатСтатусыКарт.Аннулирована Тогда 
			СпрОб.Статус = Справочники.уатСтатусыТопливныхКарт.НеДействует;
		Иначе
			СпрОб.Статус = Справочники.уатСтатусыТопливныхКарт.Действует;
		КонецЕсли;
		
		СпрОб.УдалитьСтатус = Перечисления.уатСтатусыКарт.ПустаяСсылка();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение регистра "Транспортные средства пользователей мобильного приложения".
//
Процедура ЗаполнитьТранспортныеСредстваПользователейМобильногоПриложения_2_2_6_9() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМобильныеУстройстваУдалитьВодители.ФизическоеЛицо КАК Водитель,
	|	уатМобильныеУстройстваУдалитьРазрешенныеТС.ТС КАК ТС,
	|	уатМобильныеУстройстваУдалитьВодители.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМобильныеУстройства.УдалитьРазрешенныеТС КАК уатМобильныеУстройстваУдалитьРазрешенныеТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМобильныеУстройства.УдалитьВодители КАК уатМобильныеУстройстваУдалитьВодители
	|		ПО уатМобильныеУстройстваУдалитьРазрешенныеТС.Ссылка = уатМобильныеУстройстваУдалитьВодители.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПользователиМобильногоПриложения = РегистрыСведений.уатПользователиМобильногоПриложения_ТС.СоздатьНаборЗаписей();
		ПользователиМобильногоПриложения.Отбор.Пользователь.Установить(Выборка.Водитель);
		ПользователиМобильногоПриложения.Отбор.ТС.Установить(Выборка.ТС);
		ПользователиМобильногоПриложения.Прочитать();

		Если ПользователиМобильногоПриложения.Количество() = 0 Тогда
			НоваяЗапись = ПользователиМобильногоПриложения.Добавить();
			НоваяЗапись.Пользователь = Выборка.Водитель;
			НоваяЗапись.ТС			 = Выборка.ТС;
		КонецЕсли;
	
		Попытка
			ПользователиМобильногоПриложения.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		МобильноеУстройствоОб = Выборка.Ссылка.ПолучитьОбъект();
		МобильноеУстройствоОб.УдалитьРазрешенныеТС.Очистить();
		МобильноеУстройствоОб.УдалитьВодители.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МобильноеУстройствоОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура перезаполняет реквизиты ГруппировкаТарифов1, 2 и 3 в справочнике уатТарифыТС
//
Процедура ИзменитьГруппировкиТарифовНаТС_2_2_6_10() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыТС.Ссылка КАК Ссылка,
	|	уатТарифыТС.ГруппировкаТарифа1 КАК ГруппировкаТарифа1,
	|	уатТарифыТС.ГруппировкаТарифа2 КАК ГруппировкаТарифа2,
	|	уатТарифыТС.ГруппировкаТарифа3 КАК ГруппировкаТарифа3,
	|	уатТарифыТС.ПараметрВыработки КАК ПараметрВыработки,
	|	ЕСТЬNULL(уатТарифыТС.ПараметрВыработки.Временный, ЛОЖЬ) КАК ПараметрВыработкиВременный
	|ИЗ
	|	Справочник.уатТарифыТС КАК уатТарифыТС
	|ГДЕ
	|	(уатТарифыТС.ГруппировкаТарифа1 В (&Группировки)
	|			ИЛИ уатТарифыТС.ГруппировкаТарифа2 В (&Группировки)
	|			ИЛИ уатТарифыТС.ГруппировкаТарифа3 В (&Группировки))");
	мсвГруппировки = Новый Массив;
	мсвГруппировки.Добавить(Перечисления.уатГруппировкиТарифов.Расстояние);
	мсвГруппировки.Добавить(Перечисления.уатГруппировкиТарифов.ВремяРаботы);
	мсвГруппировки.Добавить(Перечисления.уатГруппировкиТарифов.ВесГруза);
	мсвГруппировки.Добавить(Перечисления.уатГруппировкиТарифов.КоличествоМест);
	мсвГруппировки.Добавить(Перечисления.уатГруппировкиТарифов.ОбъемГруза);
	Запрос.УстановитьПараметр("Группировки", мсвГруппировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ГруппировкаТарифа1 = НовоеЗначениеГруппировки(Выборка.ГруппировкаТарифа1, Выборка);
		СпрОб.ГруппировкаТарифа2 = НовоеЗначениеГруппировки(Выборка.ГруппировкаТарифа2, Выборка);
		СпрОб.ГруппировкаТарифа3 = НовоеЗначениеГруппировки(Выборка.ГруппировкаТарифа3, Выборка);
		СпрОб.Записать();
	КонецЦикла;
КонецПроцедуры

// Вспомогательная функция для ИзменитьГруппировкиТарифовНаТС_2_2_6_10
//
Функция НовоеЗначениеГруппировки(СтароеЗначение, Выборка)
	
	НовоеЗначение = СтароеЗначение;
	
	// Для тарифов по параметрам выработки "Пробег спецработы (2, 3, 4, 5)" сохраняем особое поведение,
	// которое ранее обеспечивалось расчетом группировок
	ЭтоСпецработа = (Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы 
					ИЛИ Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2 
					ИЛИ Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3 
					ИЛИ Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4 
					ИЛИ Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5);
	
	Если ЭтоСпецработа
		И СтароеЗначение = Перечисления.уатГруппировкиТарифов.Расстояние
		И Не Выборка.ПараметрВыработкиВременный Тогда
		НовоеЗначение = Выборка.ПараметрВыработки;
	ИначеЕсли ЭтоСпецработа 
		И СтароеЗначение = Перечисления.уатГруппировкиТарифов.ВремяРаботы
		И Выборка.ПараметрВыработкиВременный Тогда
		НовоеЗначение = Выборка.ПараметрВыработки;
	ИначеЕсли СтароеЗначение = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
		НовоеЗначение = Справочники.уатПараметрыВыработки.ПробегСГрузом;
	ИначеЕсли СтароеЗначение = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
		НовоеЗначение = Справочники.уатПараметрыВыработки.ВремяВРаботе;
	ИначеЕсли СтароеЗначение = Перечисления.уатГруппировкиТарифов.ВесГруза Тогда
		НовоеЗначение = Справочники.уатПараметрыВыработки.ВесГруза;
	ИначеЕсли СтароеЗначение = Перечисления.уатГруппировкиТарифов.КоличествоМест Тогда
		НовоеЗначение = Справочники.уатПараметрыВыработки.КоличествоУпаковок;
	ИначеЕсли СтароеЗначение = Перечисления.уатГруппировкиТарифов.ОбъемГруза Тогда
		НовоеЗначение = Справочники.уатПараметрыВыработки.Объем;
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции

// Процедура выполняет заполнение предопределенных данных в справочнике "Внешние системы".
//
Процедура ЗаполнитьПредопределенныеДанныеВнешнихСистем_2_2_6_11() Экспорт 
	
	Справочники.уатВнешниеСистемы.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

#КонецОбласти	

#Область Обновление_на_версию_2_2_8

// Процедура перезаполняет реквизиты ГруппировкаТарифов1, 2 и 3 в справочнике уатТарифыЗП
//
Процедура ИзменитьГруппировкиТарифовЗП_2_2_8_1() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыЗП.Ссылка КАК Ссылка,
	|	уатТарифыЗП.ГруппировкаТарифа1 КАК ГруппировкаТарифа1,
	|	уатТарифыЗП.ГруппировкаТарифа2 КАК ГруппировкаТарифа2,
	|	уатТарифыЗП.ГруппировкаТарифа3 КАК ГруппировкаТарифа3
	|ИЗ
	|	Справочник.уатТарифыЗП КАК уатТарифыЗП
	|ГДЕ
	|	(уатТарифыЗП.ГруппировкаТарифа1 = &Расстояние
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа2 = &Расстояние
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа3 = &Расстояние
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа1 = &ВремяРаботы
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа2 = &ВремяРаботы
	|			ИЛИ уатТарифыЗП.ГруппировкаТарифа3 = &ВремяРаботы)
	|	И уатТарифыЗП.ВидНачисления <> &ОплатаЗаРемонт");
	Запрос.УстановитьПараметр("Расстояние", Перечисления.уатГруппировкиТарифов.Расстояние);
	Запрос.УстановитьПараметр("ВремяРаботы", Перечисления.уатГруппировкиТарифов.ВремяРаботы);
	Запрос.УстановитьПараметр("ОплатаЗаРемонт", ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ГруппировкаТарифа1 = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
			СпрОб.ГруппировкаТарифа1 = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		ИначеЕсли Выборка.ГруппировкаТарифа1 = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
			СпрОб.ГруппировкаТарифа1 = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		КонецЕсли;
		Если Выборка.ГруппировкаТарифа2 = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
			СпрОб.ГруппировкаТарифа2 = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		ИначеЕсли Выборка.ГруппировкаТарифа2 = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
			СпрОб.ГруппировкаТарифа2 = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		КонецЕсли;
		Если Выборка.ГруппировкаТарифа3 = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
			СпрОб.ГруппировкаТарифа3 = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		ИначеЕсли Выборка.ГруппировкаТарифа3 = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
			СпрОб.ГруппировкаТарифа3 = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет формат хранения отрезков пути в FTL Заказах на ТС и Потребностях в перевозке
Процедура ОбновитьОтрезкиПути_2_2_8_2() Экспорт
	
	ДатаОт = ДобавитьМесяц(ТекущаяДата(), -6);
	
	// Заказы на ТС
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказГрузоотправителяГрузовойСостав.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|			И (уатЗаказГрузоотправителяГрузовойСостав.ОтрезокПути <> """")
	|ГДЕ
	|	уатЗаказГрузоотправителя.FTL = ИСТИНА
	|	И уатЗаказГрузоотправителя.Проведен = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.ПометкаУдаления = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.Дата >= &ДатаОт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|			И (уатЗаказГрузоотправителяТовары.ОтрезокПути <> """")
	|ГДЕ
	|	уатЗаказГрузоотправителя.FTL = ИСТИНА
	|	И уатЗаказГрузоотправителя.Проведен = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.ПометкаУдаления = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.Дата >= &ДатаОт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки КАК уатГрузыКПеревозке_уэОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|			И (уатЗаказГрузоотправителяГрузовойСостав.ОтрезокПути <> """")
	|ГДЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.Дата >= &ДатаОт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки КАК уатГрузыКПеревозке_уэОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяТовары.Ссылка
	|			И (уатЗаказГрузоотправителяТовары.ОтрезокПути <> """")
	|ГДЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.Дата >= &ДатаОт");
	Запрос.УстановитьПараметр("ДатаОт", ДатаОт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Документы.уатЗаказГрузоотправителя.ПерезаполнитьОтрезкиПути(ДокОбъект);
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	// Потребности в перевозке
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.IDСтрокиПотребности КАК IDСтрокиПотребности
	|ПОМЕСТИТЬ втИспользуемыеПотребности
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Дата >= &ДатаОт
	|	И уатЗаказГрузоотправителя.ПометкаУдаления = ЛОЖЬ
	|	И IDСтрокиПотребности <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПотребностьВПеревозке_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ГрузовойСостав КАК уатПотребностьВПеревозке_уэГрузовойСостав
	|			ПО уатПотребностьВПеревозке_уэПунктыНазначения.ID = уатПотребностьВПеревозке_уэГрузовойСостав.ID
	|				И уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка = уатПотребностьВПеревозке_уэГрузовойСостав.Ссылка
	|		ПО уатПотребностьВПеревозке_уэ.Ссылка = уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка
	|ГДЕ
	|	уатПотребностьВПеревозке_уэ.ПометкаУдаления = ЛОЖЬ
	|	И уатПотребностьВПеревозке_уэПунктыНазначения.FTL = ИСТИНА
	|	И уатПотребностьВПеревозке_уэ.Дата >= &ДатаОт
	|	И уатПотребностьВПеревозке_уэГрузовойСостав.ОтрезокПути <> """"
	|	И НЕ уатПотребностьВПеревозке_уэПунктыНазначения.ID В
	|				(ВЫБРАТЬ
	|					втИспользуемыеПотребности.IDСтрокиПотребности
	|				ИЗ
	|					втИспользуемыеПотребности КАК втИспользуемыеПотребности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПотребностьВПеревозке_уэ.Ссылка
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ТоварныйСостав КАК уатПотребностьВПеревозке_уэТоварныйСостав
	|			ПО уатПотребностьВПеревозке_уэПунктыНазначения.ID = уатПотребностьВПеревозке_уэТоварныйСостав.ID
	|				И уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка = уатПотребностьВПеревозке_уэТоварныйСостав.Ссылка
	|		ПО уатПотребностьВПеревозке_уэ.Ссылка = уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка
	|ГДЕ
	|	уатПотребностьВПеревозке_уэ.ПометкаУдаления = ЛОЖЬ
	|	И уатПотребностьВПеревозке_уэПунктыНазначения.FTL = ИСТИНА
	|	И уатПотребностьВПеревозке_уэ.Дата <= &ДатаОт
	|	И уатПотребностьВПеревозке_уэТоварныйСостав.ОтрезокПути <> """"
	|	И НЕ уатПотребностьВПеревозке_уэПунктыНазначения.ID В
	|				(ВЫБРАТЬ
	|					втИспользуемыеПотребности.IDСтрокиПотребности
	|				ИЗ
	|					втИспользуемыеПотребности КАК втИспользуемыеПотребности)");
	Запрос.УстановитьПараметр("ДатаОт", ДатаОт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Документы.уатПотребностьВПеревозке_уэ.ПерезаполнитьОтрезкиПути(ДокОбъект);
				
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение ТЧ Категории из реквизита УдалитьКатегория:
// Выполняется разложение строкового реквизита, содержащего значения категорий через запятую.
// Если категория не найдена по наименованию, то строка ТЧ не создается
//
Процедура ЗаполнитьКатегорииДокументов_2_2_8_2() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРегистрационныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	|ГДЕ
	|	уатРегистрационныеДокументы.ВидДокумента.УчетКатегорий
	|	И уатРегистрационныеДокументы.УдалитьКатегория <> """"
	|	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРегистрационныеДокументы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатРегистрационныеДокументы.Категории.НомерСтроки) = 0");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		мсвКатегории = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СпрОб.УдалитьКатегория);
		
		Для Каждого ТекКатегорияВидаДокумента Из Выборка.Ссылка.ВидДокумента.Категории Цикл
			НоваяСтрока = СпрОб.Категории.Добавить();
			НоваяСтрока.Категория = ТекКатегорияВидаДокумента.Категория;
			
			Для Каждого ТекКатегорияСтрокой Из мсвКатегории Цикл
				Если ВРЕГ(СокрЛП(ТекКатегорияВидаДокумента.Категория.Наименование)) = ВРЕГ(СокрЛП(ТекКатегорияСтрокой)) Тогда
					НоваяСтрока.Открыта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СпрОб.ЗаполнитьОткрытыеКатегории();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение предопределенных данных в справочнике "Учетные записи системы мониторинга".
//
Процедура ЗаполнитьПредопределенныеДанныеУчетныхЗаписейСистемМониторингаАвтоГРАФ5_2_2_8_4() Экспорт 
	
	Если Метаданные.Справочники.Найти("уатУчетныеЗаписиСистемыМониторинга") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпрОбъект = Справочники.уатУчетныеЗаписиСистемыМониторинга.АвтоГРАФ5.ПолучитьОбъект();
	СпрОбъект.СистемаМониторинга				 = Справочники.уатВнешниеСистемы.АвтоГРАФ;
	СпрОбъект.Версия							 = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.уатУчетныеЗаписиСистемыМониторинга.АвтоГРАФ.ПолучитьОбъект();
	СпрОбъект.СистемаМониторинга				 = Справочники.уатВнешниеСистемы.АвтоГРАФ;
	СпрОбъект.Версия							 = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_4;
	СпрОбъект.АдресСервиса						 = Константы.УдалитьуатАдресСервисаАвтоГРАФ.Получить();
	СпрОбъект.Записать();
	
КонецПроцедуры

// Процедура выполняет заполнение параметров сбора статистики.
//
Процедура ОбновитьПараметрыОтправкиСтатистики_2_2_8_5() Экспорт
	
	// 1. Получение текущих настроек.
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторинга();
	
	// 2. Определение необходимости обновления.
	Если Не (ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга = Истина
			И ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме = Ложь
			И ПараметрыЦентраМониторинга.Сервер <> "stat.rarus.ru") Тогда 
		// Либо режим не отправка вендору, либо адрес сервера уже обновлен.
		Возврат;
	КонецЕсли;
	
	// 3. Очищаем содержимое регистра "ПакетыДляОтправки" т.к. отправка будет осуществляться на другой сервер.
	РегистрыСведений.ПакетыДляОтправки.Очистить();
	
	// 4. При необходимости (определяется разработчиком) можно очистить остальные регистры подсистемы.
	
	// 5. Установка новых параметров подсистемы.
	ТекДата = ТекущаяУниверсальнаяДата();
	
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов(); // Уже содержит новый адрес сервера.
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования = 3600;
	КонецЕсли;
	
	ПараметрыЦентраМониторинга.РегистрацияДамповСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.РегистрацияДамповПериодФормирования;
	ПараметрыЦентраМониторинга.БизнесСтатистикаСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.БизнесСтатистикаПериодФормирования;
	ПараметрыЦентраМониторинга.СтатистикаКонфигурацииСледующееФормирование = ТекДата + ПараметрыЦентраМониторинга.СтатистикаКонфигурацииПериодФормирования;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДельтаОтправки = ГСЧ.СлучайноеЧисло(0, 86400);
	ПараметрыЦентраМониторинга.ОтправкаДанныхСледующееФормирование = ТекДата + ДельтаОтправки;
	
	ПараметрыЦентраМониторинга.ПериодАгрегацииМалый = 600;
	ПараметрыЦентраМониторинга.ПериодАгрегации = 3600;
	ПараметрыЦентраМониторинга.ПериодУдаления = 86400;
	
	ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга = Истина;
	
	ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	// 6. Регистрация ИБ на новом сервере.
	// Только для БСП 3.*, т.к. в более ранних отсутствует метод "ОтправитьТестовыйПакет".
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	ПараметрыПроцедуры = Новый Структура("Итератор, ОтправкаТестовогоПакета, ПолучениеИдентификатора", 0, Ложь, Истина);
	ЦентрМониторингаСлужебный.ОтправитьТестовыйПакет(ПараметрыПроцедуры, АдресРезультата);
	
	// 7. Создание и настрока регламентного задания, отвечающего за сбор и отправку статистики.
	СтароеРегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Ложь);
	Если СтароеРегЗадание = Неопределено Тогда 
		// Регл. задание еще не создавалось. Создаем новое.
		РегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		ЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет обновление реквизита Циклический в справочнике Виды обслуживания ТС .
//
Процедура ЗаполнитьРеквизитЦиклический_2_2_8_6() Экспорт 
	
	Запрос = Новый Запрос();
	
	// Обновление справочника "уатВидыОбслуживанияТС".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВидыОбслуживанияТС.Ссылка КАК Ссылка,
	|	уатВидыОбслуживанияТС.Циклический КАК Циклический
	|ИЗ
	|	Справочник.уатВидыОбслуживанияТС КАК уатВидыОбслуживанияТС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.Циклический = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМоделиТСНормативыОбслуживания.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб                 = Выборка.Ссылка.ПолучитьОбъект();
		НормативыОбслуживания = СпрОб.НормативыОбслуживания;
		Для Каждого ТекСтрока Из НормативыОбслуживания Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки) Тогда
				ТекСтрока.ПланированиеТО = Перечисления.уатПериодичностьТО.ПоВыработке;
			Иначе
				ТекСтрока.ПланированиеТО        = Перечисления.уатПериодичностьТО.ПоВремени;
				ТекСтрока.ДопускПерОбслуживания = ТекСтрока.Допуск;
				ТекСтрока.Допуск                = 0;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
	уатОбщегоНазначения.ОбновитьПланыРемонтныхРабот();
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_9

// Процедура заполняет передопределенный элемент ТранспортныйНалог спр. СтатьиРасходов
//
Процедура ЗаполнитьСтатьяРасходаТранспортныйНалог_2_2_9_5() Экспорт 
	Справочники.уатСтатьиРасходов.ЗаполнитьПредопределенныеДанные();
КонецПроцедуры

// Процедура перезаливает ТЧ УдалитьДопРеквизиты -> ТЧ ДопРеквизиты спр. уатТипыТС
// и документов ЗаказНаТС, ПТУ, РУ, Счета на оплату.
// ТЧ ДопРеквизиты была помечена на удаление и создана новая ТЧ из-за расхождения
// гуидов ТЧ в Стд и Корп.
//
Процедура ОбновитьТЧДопРеквизиты_2_2_9_5() Экспорт 
	Если Метаданные.Справочники.уатТипыТС.ТабличныеЧасти.Найти("УдалитьДополнительныеРеквизиты") = Неопределено
		ИЛИ Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.Найти("УдалитьДополнительныеРеквизиты") = Неопределено
		ИЛИ Метаданные.Документы.уатПоступлениеТоваровУслуг.ТабличныеЧасти.Найти("УдалитьДополнительныеРеквизиты") = Неопределено
		ИЛИ Метаданные.Документы.уатРеализацияУслуг.ТабличныеЧасти.Найти("УдалитьДополнительныеРеквизиты") = Неопределено
		ИЛИ Метаданные.Документы.уатСчетНаОплатуПокупателю.ТабличныеЧасти.Найти("УдалитьДополнительныеРеквизиты") = Неопределено
		ИЛИ Метаданные.Документы.уатСчетНаОплатуПоставщика.ТабличныеЧасти.Найти("УдалитьДополнительныеРеквизиты") = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СправочникуатТипыТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТипыТС КАК СправочникуатТипыТС
	|ГДЕ
	|	НЕ СправочникуатТипыТС.ПометкаУдаления
	|	И НЕ СправочникуатТипыТС.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникуатТипыТС.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СправочникуатТипыТС.УдалитьДополнительныеРеквизиты.Значение) > 0 И
	|	КОЛИЧЕСТВО(СправочникуатТипыТС.ДополнительныеРеквизиты.Значение) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументуатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК ДокументуатЗаказГрузоотправителя
	|ГДЕ
	|	НЕ ДокументуатЗаказГрузоотправителя.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументуатЗаказГрузоотправителя.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДокументуатЗаказГрузоотправителя.УдалитьДополнительныеРеквизиты.Значение) > 0 И
	|	КОЛИЧЕСТВО(ДокументуатЗаказГрузоотправителя.ДополнительныеРеквизиты.Значение) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументуатПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг КАК ДокументуатПоступлениеТоваровУслуг
	|ГДЕ
	|	НЕ ДокументуатПоступлениеТоваровУслуг.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументуатПоступлениеТоваровУслуг.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДокументуатПоступлениеТоваровУслуг.УдалитьДополнительныеРеквизиты.Значение) > 0 И
	|	КОЛИЧЕСТВО(ДокументуатПоступлениеТоваровУслуг.ДополнительныеРеквизиты.Значение) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументуатРеализацияУслуг.Ссылка
	|ИЗ
	|	Документ.уатРеализацияУслуг КАК ДокументуатРеализацияУслуг
	|ГДЕ
	|	НЕ ДокументуатРеализацияУслуг.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументуатРеализацияУслуг.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДокументуатРеализацияУслуг.УдалитьДополнительныеРеквизиты.Значение) > 0 И
	|	КОЛИЧЕСТВО(ДокументуатРеализацияУслуг.ДополнительныеРеквизиты.Значение) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументуатСчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ.уатСчетНаОплатуПокупателю КАК ДокументуатСчетНаОплатуПокупателю
	|ГДЕ
	|	НЕ ДокументуатСчетНаОплатуПокупателю.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументуатСчетНаОплатуПокупателю.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДокументуатСчетНаОплатуПокупателю.УдалитьДополнительныеРеквизиты.Значение) > 0 И
	|	КОЛИЧЕСТВО(ДокументуатСчетНаОплатуПокупателю.ДополнительныеРеквизиты.Значение) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументуатСчетНаОплатуПоставщика.Ссылка
	|ИЗ
	|	Документ.уатСчетНаОплатуПоставщика КАК ДокументуатСчетНаОплатуПоставщика
	|ГДЕ
	|	НЕ ДокументуатСчетНаОплатуПоставщика.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументуатСчетНаОплатуПоставщика.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДокументуатСчетНаОплатуПоставщика.УдалитьДополнительныеРеквизиты.Значение) > 0 И
	|	КОЛИЧЕСТВО(ДокументуатСчетНаОплатуПоставщика.ДополнительныеРеквизиты.Значение) = 0");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из ТекОбъект.УдалитьДополнительныеРеквизиты Цикл
			НоваяСтрока = ТекОбъект.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекОбъект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_10

// Процедура заполняет регистр сведений "Серверная книжка" из справочника модели ТС
//
Процедура ЗаполнитьСписокРаботЗапчастейВСервернойКнижке_2_2_10_2() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМоделиТСНормативыОбслуживания.Ссылка КАК МодельТС,
	               |	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ТО,
	               |	уатМоделиТСНормативыОбслуживания.УдалитьРаботаПоОбслуживанию КАК Номенклатура,
	               |	1 КАК Количество,
	               |	уатМоделиТСНормативыОбслуживания.УдалитьРаботаПоОбслуживанию.Наименование КАК РаботаПоОбслуживаниюНаименование
	               |ИЗ
	               |	Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	               |ГДЕ
	               |	уатМоделиТСНормативыОбслуживания.УдалитьРаботаПоОбслуживанию <> ЗНАЧЕНИЕ(Справочник.уатРаботыПоРемонту.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписейНоменклатура = РегистрыСведений.уатСервиснаяКнижка.СоздатьНаборЗаписей();
		НаборЗаписейНоменклатура.Отбор.МодельТС.Установить(Выборка.МодельТС);
		НаборЗаписейНоменклатура.Отбор.ТО.Установить(Выборка.ТО);
		НаборЗаписейНоменклатура.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписейНоменклатура.Прочитать();
		
		Если НаборЗаписейНоменклатура.Количество() = 0 Тогда
			НовЗапись = НаборЗаписейНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Выборка);
			НовЗапись.Привязана = Истина;
			НаборЗаписейНоменклатура.Записать(Истина);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекОбъект = Выборка.МодельТС.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из ТекОбъект.НормативыОбслуживания Цикл
			ТекСтрока.СписокРабот = Выборка.РаботаПоОбслуживаниюНаименование;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение предопределенных данных в справочнике "Внешние системы".
//
Процедура ЗаполнитьПредопределенныеДанныеВнешнихСистем_2_2_10_3() Экспорт 
	
	Справочники.уатВнешниеСистемы.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура заполняет передопределенный элемент ТранспортныйНалог спр. СтатьиРасходов
//
Процедура ЗаполнитьСтатьяРасхода_2_2_10_4() Экспорт 
	СпрОбъект = Справочники.уатСтатьиРасходов.Парковки.ПолучитьОбъект();
	СпрОбъект.ВидЗатрат                 = Перечисления.уатВидыЗатрат.Прочие;
	СпрОбъект.ПорядокОтнесенияЗатрат    = Перечисления.уатПорядкиОтнесенияРасходов.ПрямыеРасходы;
	СпрОбъект.СпособРаспределенияЗатрат = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.НеРаспределять;
	СпрОбъект.СпособРаспределениеНепрямыхРасходовПоЗаказам = Перечисления.уатРаспределениеНепрямыхДоходовРасходовПоЗаказам.РаспределятьПоСобственнымЗаказам;
	НоваяСтрока = СпрОбъект.ПараметрыВыработкиРаспределенияМеждуАналитиками.Добавить();
	НоваяСтрока.СпособРаспределенияЗатратМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять;

	СпрОбъект.Записать();
КонецПроцедуры

// Процедура устанавливает константу Использовать Газпромнефть
//
Процедура УстановитьКонстантуИспользоватьГазпромнефть_2_2_10_4() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", Справочники.уатВнешниеСистемы.Газпромнефть);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	уатУчетныеЗаписиПЦ.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиПЦ КАК уатУчетныеЗаписиПЦ
	               |ГДЕ
	               |	уатУчетныеЗаписиПЦ.ВнешняяСистема = &ВнешняяСистема";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Константы.уатИспользоватьПЦГазпромнефть.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеДанныеППР_2_2_10_4() Экспорт 
	
	СпрОбъект = Справочники.уатПрофилиОбменаСВнешнимиСистемами.ППР.ПолучитьОбъект();
	СпрОбъект.ТипСистемы = Перечисления.уатТипыВнешнихСистем.ПроцессинговыйЦентр;
	СпрОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_11

// Процедура выполняет заполнение реквизита Важность
// справочника "уатШаблоныСогласований" и бизнес-процесса "уатСогласование"
//	
Процедура ЗаполнитьВажностьСогласований_2_2_11_5() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатШаблоныСогласования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатШаблоныСогласования КАК уатШаблоныСогласования
	|ГДЕ
	|	НЕ уатШаблоныСогласования.ПометкаУдаления
	|	И уатШаблоныСогласования.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.ПустаяСсылка)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	уатСогласование.Ссылка
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	НЕ уатСогласование.ПометкаУдаления
	|	И уатСогласование.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Если СпрОб.УдалитьВажность = Перечисления.УдалитьуатВажность.Высокая Тогда
			СпрОб.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
		ИначеЕсли СпрОб.УдалитьВажность = Перечисления.УдалитьуатВажность.Низкая Тогда
			СпрОб.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
		Иначе
			СпрОб.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		КонецЕсли;
					
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов Фильтрации списка штрафов по документу
//	
Процедура ЗаполнитьРеквизитыФильтрацииСспискаШтрафовПоДокументу_2_2_11_6() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатУчетныеЗаписиСервисовШтрафов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатУчетныеЗаписиСервисовШтрафов КАК уатУчетныеЗаписиСервисовШтрафов
	|ГДЕ
	|	уатУчетныеЗаписиСервисовШтрафов.ФильтрацияСпискаШтрафовСТС = ЛОЖЬ
	|	И уатУчетныеЗаписиСервисовШтрафов.ФильтрацияСпискаШтрафовИНН = ЛОЖЬ
	|	И уатУчетныеЗаписиСервисовШтрафов.ФильтрацияСпискаШтрафовПаспорт = ЛОЖЬ
	|	И уатУчетныеЗаписиСервисовШтрафов.ФильтрацияСпискаШтрафовСНИЛС = ЛОЖЬ
	|	И уатУчетныеЗаписиСервисовШтрафов.ФильтрацияСпискаШтрафовВУ = ЛОЖЬ
	|	И уатУчетныеЗаписиСервисовШтрафов.ФильтрацияСпискаШтрафовПрочее = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ФильтрацияСпискаШтрафовСТС     = Истина;
		СпрОб.ФильтрацияСпискаШтрафовИНН     = Истина;
		СпрОб.ФильтрацияСпискаШтрафовПаспорт = Истина;
		СпрОб.ФильтрацияСпискаШтрафовСНИЛС   = Истина;
		СпрОб.ФильтрацияСпискаШтрафовВУ      = Истина;
		СпрОб.ФильтрацияСпискаШтрафовПрочее  = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение таблиц соответсвий датчиков Автограф 5
//	
Процедура ЗаполнитьТаблицуСоответсвийДатчиковАвтограф5_2_2_11_7() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СистемаМониторинга", Справочники.уатВнешниеСистемы.АвтоГРАФ);
	Запрос.УстановитьПараметр("Версия",             Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	НЕ уатТС.ПометкаУдаления
	               |	И уатТС.УчетнаяЗаписьСистемыМониторинга.СистемаМониторинга = &СистемаМониторинга
	               |	И уатТС.УчетнаяЗаписьСистемыМониторинга.Версия = &Версия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеДатчиков = Новый Соответствие();
	СоответствиеДатчиков.Вставить("TotalDistance",      "Пробег");
	СоответствиеДатчиков.Вставить("EngineMotohours",    "Время работы двигателя");
	СоответствиеДатчиков.Вставить("EngineFuelConsum",   "Расход топлива");
	СоответствиеДатчиков.Вставить("TankFuelLevel Last", "Уровень топлива");
	
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого ТекСтрока Из СоответствиеДатчиков Цикл
			НоваяСтрока = СпрОб.ТаблицаСоответствийДатчиков.Добавить();
			НоваяСтрока.НаименованиеДатчика = ТекСтрока.Ключ;
			НоваяСтрока.НазначениеДатчика   = ТекСтрока.Значение;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение предопределенного элемента
// "СтоимостьГруза" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_2_11_8() Экспорт 
	
	мЗапрос = Новый Запрос();
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = ""СтоимостьГруза""";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.ДействуетНаТСМЛ                    = Истина;
		СпрОб.ИспользоватьДляЗаказовИПотребности = Истина;
		СпрОб.ИспользоватьДляМаршрутныхЛистов    = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет элемент справочника уатПараметрыВыработки "Время работы в выходные дни"
//
Процедура ЗаполнитьПараметрВыработкиВремяВыходные_2_2_11_9() Экспорт
	СпрОб = Справочники.уатПараметрыВыработки.ВремяРаботыВВыходныеДни.ПолучитьОбъект();
	СпрОб.Временный = Истина;
	СпрОб.ДействуетНаСотрудников = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_12

// Процедура заполняет передопределенный элемент Ремонты спр. СтатьиРасходов
//
Процедура ЗаполнитьСтатьяРасхода_2_2_12_3() Экспорт 
	СпрОбъект = Справочники.уатСтатьиРасходов.Ремонты.ПолучитьОбъект();
	СпрОбъект.ВидЗатрат                 = Перечисления.уатВидыЗатрат.Ремонт;
	СпрОбъект.ПорядокОтнесенияЗатрат    = Перечисления.уатПорядкиОтнесенияРасходов.ПрямыеРасходы;
	СпрОбъект.СпособРаспределенияЗатрат = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.НеРаспределять;
	СпрОбъект.СпособРаспределениеНепрямыхРасходовПоЗаказам = Перечисления.уатРаспределениеНепрямыхДоходовРасходовПоЗаказам.РаспределятьПоСобственнымЗаказам;
	
	СпрОбъект.Записать();
КонецПроцедуры

// Процедура устанавливает значение константы допустимого опоздания для прогнозирования опозданий
//
Процедура УстановитьДопустимоеОтклонениеОтВремениПрибытия_2_2_12_6() Экспорт
	УстановитьДопустимоеОтклонениеОтВремениПрибытия();
КонецПроцедуры

// Процедура выполняет обновление справочника "Сценарии планирования"
//
Процедура ОбновитьСценарииПланирования_2_2_12_8() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатСценарииПланирования.Ссылка КАК Ссылка,
	|	уатСценарииПланирования.УдалитьДетализацияПланирования КАК ДетализацияПланирования,
	|	уатСценарииПланирования.УдалитьПланированиеПоГруппамУслуг КАК ПланированиеПоГруппамУслуг,
	|	уатСценарииПланирования.Раздел КАК Раздел
	|ИЗ
	|	Справочник.уатСценарииПланирования КАК уатСценарииПланирования
	|ГДЕ
	|	(уатСценарииПланирования.УдалитьДетализацияПланирования <> ЗНАЧЕНИЕ(Перечисление.уатДетализацияПланирования.ПустаяСсылка)
	|			ИЛИ уатСценарииПланирования.УдалитьПланированиеПоГруппамУслуг = ИСТИНА
	|			ИЛИ уатСценарииПланирования.Раздел = ЗНАЧЕНИЕ(Перечисление.уатРазделыПланирования.ВыработкаТСпоПЛ)
	|			ИЛИ уатСценарииПланирования.Раздел = ЗНАЧЕНИЕ(Перечисление.уатРазделыПланирования.ВыработкаТСпоМЛ))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ВидПланирования = Перечисления.уатВидыПланирования.Долгосрочный;
		РазрезыПланирования   = СпрОб.РазрезыПланирования;
		
		Если ЗначениеЗаполнено(Выборка.ДетализацияПланирования) Тогда
			НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
			НоваяСтрокаРазреза.РазрезПланирования    = Перечисления.уатРазрезыПланирования.ТС;
			НоваяСтрокаРазреза.ПланированиеПоГруппам = Ложь;
			Если Выборка.ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТС Тогда
				НоваяСтрокаРазреза.ВариантАналитики      = Перечисления.уатВариантыАналитик.ТС;
			ИначеЕсли Выборка.ДетализацияПланирования = Перечисления.уатДетализацияПланирования.МодельТС Тогда
				НоваяСтрокаРазреза.ВариантАналитики      = Перечисления.уатВариантыАналитик.МодельТС;
			ИначеЕсли Выборка.ДетализацияПланирования = Перечисления.уатДетализацияПланирования.ТипТС Тогда
				НоваяСтрокаРазреза.ВариантАналитики      = Перечисления.уатВариантыАналитик.ТипТС;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
		НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.Контрагент;
		НоваяСтрокаРазреза.ВариантАналитики   = Перечисления.уатВариантыАналитик.Заказчик;
		
		Если Выборка.Раздел = Перечисления.уатРазделыПланирования.ПредоставленныеУслуги Тогда
			НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
			НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.Договор;
		КонецЕсли;
		
		НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
		НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.Маршрут;
		НоваяСтрокаРазреза.ВариантАналитики   = Перечисления.уатВариантыАналитик.Маршрут;
		
		НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
		НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.ОбъектСтроительства;

		НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
		НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.ВидПеревозки;

		НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
		НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.НаправлениеПеревозки;
		
		НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
		НоваяСтрокаРазреза.РазрезПланирования = Перечисления.уатРазрезыПланирования.ПараметрВыработки;
		
		Если Выборка.ПланированиеПоГруппамУслуг Тогда
			НоваяСтрокаРазреза  = РазрезыПланирования.Добавить();
			НоваяСтрокаРазреза.РазрезПланирования    = Перечисления.уатРазрезыПланирования.Услуга;
			НоваяСтрокаРазреза.ПланированиеПоГруппам = Выборка.ПланированиеПоГруппамУслуг;
		КонецЕсли;
		
		Если Выборка.Раздел = Перечисления.уатРазделыПланирования.ВыработкаТСпоПЛ
			ИЛИ Выборка.Раздел = Перечисления.уатРазделыПланирования.ВыработкаТСпоМЛ Тогда
			СпрОб.Раздел = Перечисления.уатРазделыПланирования.Выработка;
		КонецЕсли;
		
		СпрОб.УдалитьДетализацияПланирования    = Неопределено;
		СпрОб.УдалитьПланированиеПоГруппамУслуг = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение предопределенного элемента
// "СтоимостьГруза" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_2_12() Экспорт 
	
	Макет = Справочники.уатПараметрыВыработки.ПолучитьМакет("НастройкиПредопределенныхЭлементов");
	ОбластьНастроек = Макет.ПолучитьОбласть("Настройки");
	Для НомерСтроки = 44 По Макет.ВысотаТаблицы Цикл
		ИмяПредопрЭлемента = СтрЗаменить(СокрЛП(ОбластьНастроек.Область(НомерСтроки, 1, НомерСтроки, 1).Текст), "ИмяЭлемента_", "");
		Попытка
			ТекЭлемент = Справочники.уатПараметрыВыработки[ИмяПредопрЭлемента];
		Исключение
			Продолжить;
		КонецПопытки;
		
		СпрОбъект = ТекЭлемент.ПолучитьОбъект();
		
		//ЕИ
		Если НЕ ЗначениеЗаполнено(СпрОбъект.ЕдиницаИзмерения) 
			И ЗначениеЗаполнено(ОбластьНастроек.Область(НомерСтроки, 2, НомерСтроки, 2).Текст) Тогда
			
			СпрОбъект.ЕдиницаИзмерения = уатОбновлениеИнформационнойБазы.НайтиСоздатьЕдиницу(ОбластьНастроек.Область(НомерСтроки, 2, НомерСтроки, 2).Текст,
			ОбластьНастроек.Область(НомерСтроки, 3, НомерСтроки, 3).Текст,
			ОбластьНастроек.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
		КонецЕсли;
		
		//УАТ	
		СпрОбъект.Временный = НРег(ОбластьНастроек.Область(НомерСтроки, 5, НомерСтроки, 5).Текст) = "1";
		СпрОбъект.ДействуетНаТС = НРег(ОбластьНастроек.Область(НомерСтроки, 6, НомерСтроки, 6).Текст) = "1";
		СпрОбъект.ДействуетНаСотрудников = НРег(ОбластьНастроек.Область(НомерСтроки, 7, НомерСтроки, 7).Текст) = "1";
		СпрОбъект.ИспользоватьВТарифахНаУслуги = НРег(ОбластьНастроек.Область(НомерСтроки, 11, НомерСтроки, 11).Текст) = "1";
		//Логистика
		СпрОбъект.ИспользоватьДляЗаказовИПотребности = НРег(ОбластьНастроек.Область(НомерСтроки, 9, НомерСтроки, 9).Текст) = "1";
		СпрОбъект.ИспользоватьДляМаршрутныхЛистов = НРег(ОбластьНастроек.Область(НомерСтроки, 10, НомерСтроки, 10).Текст) = "1";
		СпрОбъект.ДействуетНаТСМЛ = НРег(ОбластьНастроек.Область(НомерСтроки, 8, НомерСтроки, 8).Текст) = "1";
		
		СпрОбъект.СводныйПоказатель = НРег(ОбластьНастроек.Область(НомерСтроки, 12, НомерСтроки, 12).Текст) = "1";
		
		Если СпрОбъект.СводныйПоказатель Тогда
			СпрОбъект.ИспользоватьПриПланировании                    = Истина;
			
			СпрОбъект.ИсточникПолученияФактЗначенийДляПривлТС        = Перечисления.уатИсточникиФактДанныхПоказателейПланирования.МаршрутныйЛист;
			СпрОбъект.ИсточникПолученияФактЗначенийДляСобственногоТС = Перечисления.уатИсточникиФактДанныхПоказателейПланирования.ПутевойЛист;
		КонецЕсли;
		
		СпрОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПараметрыВыработки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	               |ГДЕ
	               |	(уатПараметрыВыработки.ИсточникПолученияФактЗначенийДляПривлТС = ЗНАЧЕНИЕ(Перечисление.уатИсточникиФактДанныхПоказателейПланирования.ПустаяСсылка)
	               |			ИЛИ уатПараметрыВыработки.ИсточникПолученияФактЗначенийДляСобственногоТС = ЗНАЧЕНИЕ(Перечисление.уатИсточникиФактДанныхПоказателейПланирования.ПустаяСсылка))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ИсточникПолученияФактЗначенийДляПривлТС        = Перечисления.уатИсточникиФактДанныхПоказателейПланирования.МаршрутныйЛист;
		СпрОб.ИсточникПолученияФактЗначенийДляСобственногоТС = Перечисления.уатИсточникиФактДанныхПоказателейПланирования.ПутевойЛист;
		СпрОб.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПланыПримененияЗатрат_2_2_12() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатПланыПримененияЗатратРасходы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатПланыПримененияЗатрат.Расходы КАК уатПланыПримененияЗатратРасходы
	               |ГДЕ
	               |	уатПланыПримененияЗатратРасходы.СтатьяРасходов.ВидЗатрат = ЗНАЧЕНИЕ(Перечисление.уатВидыЗатрат.Ремонт)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб   = Выборка.Ссылка.ПолучитьОбъект();
		Расходы = СпрОб.Расходы;
		ВыдачаРасходныхМатериалов = Расходы.НайтиСтроки(Новый Структура("СтатьяРасходов", Справочники.уатСтатьиРасходов.Ремонты));
		
		Если ВыдачаРасходныхМатериалов.Количество() = 0 Тогда
			НоваяСтрока = Расходы.Добавить();
			НоваяСтрока.СтатьяРасходов = Справочники.уатСтатьиРасходов.Ремонты;
			СпрОб.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет передопределенный элемент Ремонты спр. СтатьиРасходов
//
Процедура ЗаполнитьСтатьяРасхода_2_2_12() Экспорт 
	
	СпрОбъект = Справочники.уатСтатьиРасходов.Ремонты.ПолучитьОбъект();
	СпрОбъект.ВидЗатрат                 = Перечисления.уатВидыЗатрат.ВыдачаРасходныхМатериалов;
	СпрОбъект.ПорядокОтнесенияЗатрат    = Перечисления.уатПорядкиОтнесенияРасходов.ПрямыеРасходы;
	СпрОбъект.СпособРаспределенияЗатрат = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.НеРаспределять;
	СпрОбъект.СпособРаспределениеНепрямыхРасходовПоЗаказам = Перечисления.уатРаспределениеНепрямыхДоходовРасходовПоЗаказам.РаспределятьПоСобственнымЗаказам;
	НоваяСтрока = СпрОбъект.ПараметрыВыработкиРаспределенияМеждуАналитиками.Добавить();
	НоваяСтрока.СпособРаспределенияЗатратМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять;

	СпрОбъект.Записать();
	
КонецПроцедуры

Процедура ОбновитьПланированиеРаботыТС_2_2_12() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатПланированиеРаботыТССоставПлана.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.уатПланированиеРаботыТС.СоставПлана КАК уатПланированиеРаботыТССоставПлана
	               |ГДЕ
	               |	уатПланированиеРаботыТССоставПлана.Дата = &ПустаяДата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОб       = Выборка.Ссылка.ПолучитьОбъект();
		СоставПлана = ДокОб.СоставПлана;
		
		НачДата = ДокОб.ДатаПланирования;
		КонДата = ДокОб.ДатаПланирования;
		уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ДокОб.Сценарий.Периодичность);

		Для Каждого ТекСтрока Из СоставПлана Цикл
			ТекСтрока.Дата = НачДата;
		КонецЦИкла;
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_13

// Процедура заполняет новые варианты настройки получения Заказов клиента 
// и Реализации товаров и услуг из ERP и КА аналогично старым правилам.
// Имена запрещенных к получению правил (объектов) см. в макете "Правила отправки получения данных" плана обмена.
Процедура ЗаполнитьПравилаРегистрацииПолученияЗаказовНаТС_2_2_13_3() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЗапрещенныеКПолучению КАК СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению.Имя = &ИмяЗаказКлиента");
	Запрос.УстановитьПараметр("ИмяЗаказКлиента", "ЗаказКлиента_ВЗаказНаТС");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказКлиента_ВЗаказНаТС_Самовывоз";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказКлиента_ВЗаказНаТС_ДоКлиента";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказКлиента_ВЗаказНаТС_СиламиПеревозчикаПоАдресу";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказКлиента_ВЗаказНаТС_СиламиПеревозчика";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказКлиента_ВЗаказНаТС_СлужбаДоставки";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет реквизиты по простоям в справочнике уатСостояниеТС
//
Процедура ЗаполнитьПростоиСостоянияТС_2_2_13_3() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСостояниеТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСостояниеТС КАК уатСостояниеТС
	|ГДЕ
	|	НЕ уатСостояниеТС.ПометкаУдаления
	|	И НЕ уатСостояниеТС.ЭтоГруппа");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ВидРабочегоВремениПростоя = Справочники.уатВидыИспользованияРабочегоВремени.ПростойПоВинеРаботника;
					
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеДанныеВнешниеСистемы_2_2_13_3() Экспорт 
	
	СпрОбъект = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Лукойл.ПолучитьОбъект();
	СпрОбъект.ТипСистемы = Перечисления.уатТипыВнешнихСистем.ПроцессинговыйЦентр;
	СпрОбъект.Записать();
	
КонецПроцедуры

// Процедура заполняет новые настройки УАТ (обработка Установка прав и настроек УАТ)
// "Заполнение водителей" и "Заполнение сопроводительных лиц" по данным старых настроек,
// соответственно, "Подставлять основного водителя" и "Подставлять основное сопр. лицо"
//
Процедура ЗаполнитьНастройкиЗаполнениеВодителей_2_2_13_6() Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатПраваИНастройки.ПравоНастройка.Код КАК Код,
	|	уатПраваИНастройки.Объект,
	|	уатПраваИНастройки.Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.ПравоНастройка.Код = &СтарыйКодНастройкиВодитель
	|	ИЛИ уатПраваИНастройки.ПравоНастройка.Код = &СтарыйКодНастройкиСопрЛицо";
	мЗапрос.УстановитьПараметр("СтарыйКодНастройкиВодитель", "42002");
	мЗапрос.УстановитьПараметр("СтарыйКодНастройкиСопрЛицо", "42004");
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	НЗЗаполнениеВодителей = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗЗаполнениеВодителей.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеВодителей);
	НЗЗаполнениеСопроводительныхЛиц = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НЗЗаполнениеСопроводительныхЛиц.Отбор.ПравоНастройка.Установить(ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеСопроводительныхЛиц);
	
	Пока мВыборка.Следующий() Цикл
		Если мВыборка.Код = "42002" Тогда
			НоваяЗапись = НЗЗаполнениеВодителей.Добавить();
			НоваяЗапись.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеВодителей;
		Иначе
			НоваяЗапись = НЗЗаполнениеСопроводительныхЛиц.Добавить();
			НоваяЗапись.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеСопроводительныхЛиц;
		КонецЕсли;
		НоваяЗапись.Объект = мВыборка.Объект;
		Если мВыборка.Значение = Истина Тогда
			НоваяЗапись.Значение = Перечисления.уатВариантыЗаполненияВодителей.ПоЭкипажу;
		Иначе
			НоваяЗапись.Значение = Перечисления.уатВариантыЗаполненияВодителей.ПоГрафику;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НЗЗаполнениеВодителей.Записать();
		НЗЗаполнениеСопроводительныхЛиц.Записать();
	Исключение
		ТекстСообщения = "Возникла ошибка при заполнении настроек ""Заполнять водителей"" и ""Заполнять сопроводительных лиц"" (2.2.13.6-ПраваИНастройки)" + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_14

// Процедура выполняет заполнение реквизита ВидОперации документа
// "уатКорректировкаИспользованияРаботникамиРабочегоВремени".
//
Процедура ОбновитьКорректировкиРабочегоВремени_2_2_14_2() Экспорт 
	
	мЗапрос = Новый Запрос();
	мЗапрос.Текст =
	"ВЫБРАТЬ
	|	уатКорректировкаИспользованияРаботникамиРабочегоВремени.Ссылка
	|ИЗ
	|	Документ.уатКорректировкаИспользованияРаботникамиРабочегоВремени КАК уатКорректировкаИспользованияРаботникамиРабочегоВремени
	|ГДЕ
	|	уатКорректировкаИспользованияРаботникамиРабочегоВремени.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийКорректировкаРабочегоВремени.ПустаяСсылка)";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	Пока мВыборка.Следующий() Цикл 
		ДокументОбъект = мВыборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийКорректировкаРабочегоВремени.Факт;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// "ФактическоеВремяОпоздания" и "ФактическоеВремяПростоя" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_2_14_3() Экспорт 
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, 
		Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.ИмяПредопределенныхДанных);
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, 
		Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.ИмяПредопределенныхДанных);
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// "ФактическоеВремяОпоздания" и "ФактическоеВремяПростоя" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_2_14_4() Экспорт 
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, 
		Справочники.уатПараметрыВыработки.ВнеРасписания.ИмяПредопределенныхДанных);
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// "Новый" и "Обработка завершена" справочника "уатСтатусы_уэ".
//
Процедура ОбновитьСтатусы_2_2_14_4() Экспорт 
	
	Справочники.уатСтатусы_уэ.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура выполняет перенос данных из ТЧ Документы документа Заказ на ТС
// в новые элементы справочника уатСопроводительныеДокументы с установкой их статусов
// Статус устанавливается в зависимости от флагов "Выполнен" и "Получен"
//
Процедура ОбновитьСопроводительныеДокументы_2_2_14_4() Экспорт 
	
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ТекОрганизация  = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ТекОрганизация = Выборка.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Ссылка.Дата КАК ДатаЗаказа,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.ВидДокумента КАК ВидДокумента,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Владелец КАК Владелец,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Выполнен КАК Выполнен,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.ДатаПередачи КАК ДатаПередачи,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.ДатаПолучения КАК ДатаПолучения,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Количество КАК Количество,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Комментарий КАК Комментарий,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Получен КАК Получен,
	|	уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Статус КАК Статус
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.УдалитьСопроводительныеДокументы КАК уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителяУдалитьСопроводительныеДокументы.Ссылка.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка");
	
	флИспользованиеСД = Ложь;
	мсвЗаказы = Новый Массив;
	
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаЗаказ.Следующий() Цикл
		ВыборкаСД = ВыборкаЗаказ.Выбрать();
		Пока ВыборкаСД.Следующий() Цикл
			ВидСД = ПолучитьВидСДпоВидуДокумента(ВыборкаСД.ВидДокумента);
			ДатаПолученияСД = ВыборкаСД.ДатаПолучения;
			
			// создание нового СД
			НовыйСД = Справочники.уатСопроводительныеДокументы.СоздатьЭлемент();
			НовыйСД.УстановитьНовыйКод();
			НовыйСД.ВидДокумента          = ВидСД;
			НовыйСД.ВладелецДокумента     = ВыборкаСД.Владелец;
			НовыйСД.ДатаДокумента         = ВыборкаСД.ДатаЗаказа;
			НовыйСД.КоличествоЭкземпляров = ?(ВыборкаСД.Количество = 0, 1, ВыборкаСД.Количество);
			НовыйСД.Комментарий           = ВыборкаСД.Комментарий;
			НовыйСД.Наименование          = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатСопроводительныеДокументы", НовыйСД);
			НовыйСД.Основание             = ВыборкаСД.Ссылка;
			Если ЗначениеЗаполнено(ДатаПолученияСД) Тогда
				НовыйСД.ПлановаяДатаОбработкиВручную = Истина;
				НовыйСД.ПлановаяДатаОбработки        = ДатаПолученияСД;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйСД);
			
			// установка статуса нового СД
			НовыйУстановкаСтатусаСД = Документы.уатУстановкаСтатусовСопроводительныхДокументов.СоздатьДокумент();
			Если ЗначениеЗаполнено(ДатаПолученияСД) Тогда 
				НовыйУстановкаСтатусаСД.Дата = ДатаПолученияСД;
			Иначе
				НовыйУстановкаСтатусаСД.Дата = ВыборкаСД.ДатаЗаказа;
			КонецЕсли;
			НовыйУстановкаСтатусаСД.УстановитьНовыйНомер();
			НовыйУстановкаСтатусаСД.Организация   = ТекОрганизация;
			НовыйУстановкаСтатусаСД.Ответственный = ТекПользователь;
			НоваяСтрокаТЧ = НовыйУстановкаСтатусаСД.СопроводительныеДокументы.Добавить();
			НоваяСтрокаТЧ.СопроводительныйДокумент = НовыйСД.Ссылка;
			
			Если ВыборкаСД.Выполнен Тогда
				НоваяСтрокаТЧ.Статус = Справочники.уатСтатусы_уэ.ОбработкаЗавершена;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаСД.Статус) Тогда
				НоваяСтрокаТЧ.Статус = ВыборкаСД.Статус;
			Иначе
				НоваяСтрокаТЧ.Статус = Справочники.уатСтатусы_уэ.Новый;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйУстановкаСтатусаСД,,, РежимЗаписиДокумента.Проведение);
			
			флИспользованиеСД = Истина;
		КонецЦикла;
				
		// очистка старой ТЧ Документы
		ЗаказОбъект = ВыборкаЗаказ.Ссылка.ПолучитьОбъект();
		ЗаказОбъект.УдалитьСопроводительныеДокументы.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект);
		
		Если ЗначениеЗаполнено(ЗаказОбъект.Ссылка) И  мсвЗаказы.Найти(ЗаказОбъект.Ссылка) = Неопределено Тогда
			мсвЗаказы.Добавить(ЗаказОбъект.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// если создан хотя бы один СД, то считаем, что документооборот ведется
	Если флИспользованиеСД Тогда
		Константы.уатИспользоватьДокументооборот.Установить(Истина);
	КонецЕсли;
	
	// обработка договоров и шаблонов документов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.УдалитьВидДокументаПоЗадолженности КАК УдалитьВидДокументаПоЗадолженности
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.УдалитьВидДокументаПоЗадолженности <> ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.ПустаяСсылка)
	|	И ДоговорыКонтрагентов.ВидДокументаПоЗадолженности = ЗНАЧЕНИЕ(Справочник.уатВидыСопроводительныхДокументов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатШаблоныДокументов_уэВидыДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатШаблоныДокументов_уэ.ВидыДокументов КАК уатШаблоныДокументов_уэВидыДокументов
	|ГДЕ
	|	НЕ уатШаблоныДокументов_уэВидыДокументов.Ссылка.ПометкаУдаления
	|	И уатШаблоныДокументов_уэВидыДокументов.УдалитьВидДокумента <> ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.ПустаяСсылка)
	|	И уатШаблоныДокументов_уэВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыСопроводительныхДокументов.ПустаяСсылка)");
	мсвРез = Запрос.ВыполнитьПакет();
	ВыборкаДоговоры = мсвРез[0].Выбрать();
	Пока ВыборкаДоговоры.Следующий() Цикл
		СпрОб = ВыборкаДоговоры.Ссылка.ПолучитьОбъект();
		СпрОб.ВидДокументаПоЗадолженности = ПолучитьВидСДпоВидуДокумента(СпрОб.УдалитьВидДокументаПоЗадолженности);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	ВыборкаШаблоны = мсвРез[1].Выбрать();
	Пока ВыборкаШаблоны.Следующий() Цикл
		СпрОб = ВыборкаШаблоны.Ссылка.ПолучитьОбъект();
		Для Каждого ТекСтрока Из СпрОб.ВидыДокументов Цикл
			Если ЗначениеЗаполнено(ТекСтрока.УдалитьВидДокумента) И НЕ ЗначениеЗаполнено(ТекСтрока.ВидДокумента) Тогда
				ТекСтрока.ВидДокумента = ПолучитьВидСДпоВидуДокумента(ТекСтрока.УдалитьВидДокумента);
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВидСДпоВидуДокумента(ВидДокумента)
	ВидСД = Справочники.уатВидыСопроводительныхДокументов.НайтиПоНаименованию(ВидДокумента.Наименование);
	Если ВидСД = Справочники.уатВидыСопроводительныхДокументов.ПустаяСсылка() Тогда
		НовыйВидСД = Справочники.уатВидыСопроводительныхДокументов.СоздатьЭлемент();
		НовыйВидСД.Наименование = ВидДокумента.Наименование;
		НовыйВидСД.ВидВладельца = Перечисления.уатВидыВладельцевСопроводительныхДокументов.ОбщиеДокументы;
		НовыйВидСД.Записать();
		ВидСД = НовыйВидСД.Ссылка;
	КонецЕсли;
	
	Возврат ВидСД;
КонецФункции

// Процедура заполняет новый реквизит "Номер рейса" для справочника "Рейсы"
Процедура ЗаполнитьНомераРейсов_2_2_14_5() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатРейсыМаршрутов.Ссылка КАК Ссылка,
	|	уатРейсыМаршрутов.Код КАК Код
	|ИЗ
	|	Справочник.уатРейсыМаршрутов КАК уатРейсыМаршрутов
	|ГДЕ
	|	уатРейсыМаршрутов.ПометкаУдаления = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.НомерРейса = Выборка.Код;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область Обновление_на_версию_2_2_15

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// "ФактическоеВремяОпоздания" и "ФактическоеВремяПростоя" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_2_15_2() Экспорт 
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "ПревышениеВеса");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "ПревышениеОбъема");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "ПревышениеВысоты");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "ПревышениеДлины");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "ПревышениеШирины");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "НочнаяДоставка");
		
КонецПроцедуры

// Процедура выполняет установку флага "ДобавлятьСкидкуНаценкуОтдельнойСтрокой" во всех тарифах процентом
//
Процедура ОбновитьТарифыПроцентом_2_2_15_2() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТарифыТС КАК уатТарифыТС
	|ГДЕ
	|	НЕ уатТарифыТС.ПометкаУдаления
	|	И уатТарифыТС.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ДобавлятьСкидкуНаценкуОтдельнойСтрокой = Истина;
					
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
		
КонецПроцедуры

// Процедура выполняет установку флага "ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента"
// во всех планах обмена через универсальный формат
//
Процедура ЗаполнитНовыйФлагВПланахОбмена_2_2_15_3() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПланОбменаОбъект.ЗаказыНаТС_ЗаполнятьНомерДатуВходящегоДокумента = Истина;
		ПланОбменаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеДанныеВнешниеСистемы_2_2_15_4() Экспорт 
	
	СпрОбъект = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Роснефть.ПолучитьОбъект();
	СпрОбъект.ТипСистемы = Перечисления.уатТипыВнешнихСистем.ПроцессинговыйЦентр;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.уатВнешниеСистемы.Роснефть.ПолучитьОбъект();
	СпрОбъект.ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.ПроцессинговыйЦентр;
	СпрОбъект.Записать();
	
КонецПроцедуры

// Процедура выполняет установку настройки "Использовать платежный календарь", если ранее платежи планировались
//
Процедура ОбновитьПлатежныйКалендарь_2_2_15_4() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПлатежныйКалендарь.Регистратор
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь КАК уатПлатежныйКалендарь");
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Константы.уатИспользоватьПлатежныйКалендарь.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// "ФактическоеВремяОпоздания" и "ФактическоеВремяПростоя" справочника "уатПараметрыВыработки".
//
Процедура ОбновитьПараметрыВыработки_2_2_15_4() Экспорт 
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "Наценка");
		
КонецПроцедуры

// Процедура выполняет изменение типа реквизита единиц измерения в доверенностях.
//
Процедура ОбновитьЕдиницыИзмерернияДоверенности_2_2_15_6() Экспорт 
	
	МассивПустыхЕдиниц = Новый Массив;
	МассивПустыхЕдиниц.Добавить(Неопределено);
	МассивПустыхЕдиниц.Добавить(Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	МассивПустыхЕдиниц.Добавить(Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатДоверенностьТовары.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.уатДоверенность.Товары КАК уатДоверенностьТовары
	               |ГДЕ
	               |	уатДоверенностьТовары.УдалитьЕдиницаПоКлассификатору НЕ В (&МассивПустыхЕдиниц)";
	Запрос.УстановитьПараметр("МассивПустыхЕдиниц", МассивПустыхЕдиниц);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументДоверернность = Выборка.Ссылка.ПолучитьОбъект();
		ЗначениеИзменено = Ложь;
		Для Каждого ТекСтрока Из ДокументДоверернность.Товары Цикл
			Если ЗначениеЗаполнено(ТекСтрока.УдалитьЕдиницаПоКлассификатору) Тогда
				Если ТипЗнч(ТекСтрока.УдалитьЕдиницаПоКлассификатору) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
					ТекСтрока.ЕдиницаКлассификатор = ТекСтрока.УдалитьЕдиницаПоКлассификатору;					
					ТекСтрока.УдалитьЕдиницаПоКлассификатору = Неопределено;
				ИначеЕсли ТипЗнч(ТекСтрока.УдалитьЕдиницаПоКлассификатору) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда	
					ТекСтрока.ЕдиницаКлассификатор = ТекСтрока.УдалитьЕдиницаПоКлассификатору.ЕдиницаПоКлассификатору;					
					ТекСтрока.УдалитьЕдиницаПоКлассификатору = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеИзменено = Истина;
		
		КонецЦикла;
		
		Если ЗначениеИзменено Тогда
			Попытка
				ДокументДоверернность.Записать();
			Исключение
				ТекстНСТР = "Возникла ошибка при обновлении единиц измерерния в документе ""Доверенность""" + Символы.ПС + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;			
		
КонецПроцедуры

// Процедура выполняет установку настройки "Тип штрихкода для печати этикеток"
//
Процедура УстановитьТипШтрихкодаДляПечатиЭтикеток_2_2_15_7() Экспорт 
	
	Если Метаданные.Константы.Найти("уатТипШтрихкодаДляПечати_уэ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Константы.уатТипШтрихкодаДляПечати_уэ.Установить(Перечисления.уатТипыШтрихкодов.EAN13);
	
КонецПроцедуры

#КонецОбласти


#Область Обновление_на_версию_2_2_17

// Процедура удаляет записи регистра сведений "Ключи доступа объектов", связанные с объектами регл. отчетности
//
Процедура УдалитьКлючиДоступаРеглОтчетности_2_2_17_2() Экспорт
	
	// удаление записей из регистра
	ЗапросРегистр = Новый Запрос(
	"ВЫБРАТЬ
	|	КлючиДоступаКОбъектам.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
	|ГДЕ
	|	КлючиДоступаКОбъектам.Объект ССЫЛКА Справочник.УдалитьуатРегламентированныеОтчеты
	|	ИЛИ КлючиДоступаКОбъектам.Объект ССЫЛКА Документ.УдалитьуатРегламентированныйОтчет");
	
	Выборка = ЗапросРегистр.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписиКлючи = РегистрыСведений.КлючиДоступаКОбъектам.СоздатьМенеджерЗаписи();
		МенеджерЗаписиКлючи.Объект = Выборка.Объект;
		МенеджерЗаписиКлючи.Удалить();
	КонецЦикла;
	
	// непосредственное удаление элементов справочника и документов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникУдалитьуатРегламентированныеОтчеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьуатРегламентированныеОтчеты КАК СправочникУдалитьуатРегламентированныеОтчеты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДокументУдалитьуатРегламентированныйОтчет.Ссылка
	|ИЗ
	|	Документ.УдалитьуатРегламентированныйОтчет КАК ДокументУдалитьуатРегламентированныйОтчет
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокСпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.УдалитьДанные(ДокСпрОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет настройки подключения к серверам картографии
//
Процедура ОбновитьНастройкиСервераКартографииМаршрутизации_2_2_17_4() Экспорт
	
	ТипЭлектронныхКарт = Константы.УдалитьуатТипЭлектронныхКарт.Получить();
	Если НЕ ЗначениеЗаполнено(ТипЭлектронныхКарт) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипПоставщикаЯндекс = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
	ТипПоставщикаOSM    = Перечисления.уатТипыЭлектронныхКарт.OSM;
	
	СтруктураНастроек = уатЭлектронныеКартыСервер.НастройкиСервераКартографииМаршрутизацииПоУмолчанию();

	Если ТипЭлектронныхКарт = ТипПоставщикаOSM Тогда
		
		ХранилищеНастроек = Константы.уатСерверКартографииМаршрутизации.Получить();
		Если ХранилищеНастроек = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ИсходныеНастройки = ХранилищеНастроек.Получить();
		Если ИсходныеНастройки = Неопределено 
			ИЛИ НЕ ТипЗнч(ИсходныеНастройки) = Тип("Структура") Тогда 
			Возврат;
		КонецЕсли;

		Если ИсходныеНастройки.Свойство("НастройкаКартографии") Тогда
			СтруктураНастроек.Картография_Сервер = ИсходныеНастройки.НастройкаКартографии;
		Иначе
			СтруктураНастроек.Картография_Сервер = "";
		КонецЕсли;
		СтруктураНастроек.Картография_Использование = ЗначениеЗаполнено(СтруктураНастроек.Картография_Сервер);
		Если СтруктураНастроек.Картография_Использование Тогда
			СтруктураНастроек.Картография_ТипПоставщика = ТипПоставщикаOSM;
		КонецЕсли;
		
		Если ИсходныеНастройки.Свойство("НастройкаГеокодирования") Тогда
			СтруктураНастроек.Геокодирование_Сервер = ИсходныеНастройки.НастройкаГеокодирования;
		Иначе
			СтруктураНастроек.Геокодирование_Сервер = "";
		КонецЕсли;
		СтруктураНастроек.Геокодирование_Использование = ЗначениеЗаполнено(СтруктураНастроек.Геокодирование_Сервер);
		Если СтруктураНастроек.Геокодирование_Использование Тогда
			СтруктураНастроек.Геокодирование_ТипПоставщика = ТипПоставщикаOSM;
		КонецЕсли;
		
		Если ИсходныеНастройки.Свойство("НастройкаМаршрутизации") Тогда
			СтруктураНастроек.ПостроениеМаршрутов_Сервер = ИсходныеНастройки.НастройкаМаршрутизации;
		Иначе
			СтруктураНастроек.ПостроениеМаршрутов_Сервер = "";
		КонецЕсли;
		СтруктураНастроек.ПостроениеМаршрутов_Использование = ЗначениеЗаполнено(СтруктураНастроек.ПостроениеМаршрутов_Сервер);
		Если СтруктураНастроек.ПостроениеМаршрутов_Использование Тогда
			СтруктураНастроек.ПостроениеМаршрутов_ТипПоставщика = ТипПоставщикаOSM;
		КонецЕсли;
		
	ИначеЕсли ТипЭлектронныхКарт = ТипПоставщикаЯндекс Тогда
		
		СтруктураНастроек.Картография_Ключ = Константы.УдалитьуатКлючВнешнейКартографии_уэ.Получить();
		СтруктураНастроек.Картография_Использование = ЗначениеЗаполнено(СтруктураНастроек.Картография_Ключ);
		Если СтруктураНастроек.Картография_Использование Тогда
			СтруктураНастроек.Картография_ТипПоставщика = ТипПоставщикаЯндекс;
		КонецЕсли;
		
		СтруктураНастроек.Геокодирование_Ключ = СтруктураНастроек.Картография_Ключ;
		СтруктураНастроек.Геокодирование_Использование = ЗначениеЗаполнено(СтруктураНастроек.Геокодирование_Ключ);
		Если СтруктураНастроек.Геокодирование_Использование Тогда
			СтруктураНастроек.Геокодирование_ТипПоставщика = ТипПоставщикаЯндекс;
		КонецЕсли;

		СтруктураНастроек.ПостроениеМаршрутов_Ключ = Константы.УдалитьуатКлючВнешнегоПостроенияМаршрутов_уэ.Получить();
		СтруктураНастроек.ПостроениеМаршрутов_Использование = ЗначениеЗаполнено(СтруктураНастроек.ПостроениеМаршрутов_Ключ);
		Если СтруктураНастроек.ПостроениеМаршрутов_Использование Тогда
			СтруктураНастроек.ПостроениеМаршрутов_ТипПоставщика = ТипПоставщикаЯндекс;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНастроек.Навигация_Ключ = Константы.УдалитьуатКлючВнешнегоНавигатора_уэ.Получить();
	СтруктураНастроек.Навигация_ИдентификаторКлиента = "";
	СтруктураНастроек.Навигация_Использование = ЗначениеЗаполнено(СтруктураНастроек.Навигация_Ключ);
	Если СтруктураНастроек.Навигация_Использование Тогда
		СтруктураНастроек.Навигация_ТипПоставщика = ТипПоставщикаЯндекс;
	КонецЕсли;
	
	СтруктураНастроек.Маршрутизация_Ключ = Константы.УдалитьуатКлючВнешнейМаршрутизации_уэ.Получить();
	СтруктураНастроек.Маршрутизация_Использование = ЗначениеЗаполнено(СтруктураНастроек.Маршрутизация_Ключ);
	Если СтруктураНастроек.Маршрутизация_Использование Тогда
		СтруктураНастроек.Маршрутизация_ТипПоставщика = ТипПоставщикаЯндекс;
	КонецЕсли;
	
	уатЭлектронныеКартыСервер.СохранитьНастройкиСервераКартографииМаршрутизации(СтруктураНастроек);
	
КонецПроцедуры

// Процедура обновляет реквизиты договоров, связанные с сопроводительными документами
//
Процедура ОбновитьДоговоры_2_2_17_6() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДоговорыКонтрагентов.ВидыСопроводительныхДокументов.СпособРасчетаДней) > 0");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из СпрОб.ВидыСопроводительныхДокументов Цикл
			ТекСтрока.СпособРасчетаДней = СпрОб.СпособРасчетаДней;
			ТекСтрока.ПроизводственныйКалендарь = СпрОб.ПроизводственныйКалендарь;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_18

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// "Пройдено", "Не пройдено", "Аннулировано" справочника "уатСтатусы_уэ".
//
Процедура ОбновитьСтатусы_2_2_18_2() Экспорт 
	
	Справочники.уатСтатусы_уэ.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура заполняет настройки картографии сервиса подсказок при вводе адресов, 
// выделенного из сервиса геокодирования отдельно.
Процедура ОбновитьНастройкиКартографии_2_2_18_3() Экспорт
	
	НастройкиКартографии = уатЭлектронныеКартыСервер.ПолучитьНастройкиСервераКартографииМаршрутизации();
	
	НастройкиКартографии.ПодсказкиАдресов_Использование    = НастройкиКартографии.Геокодирование_Использование;
	НастройкиКартографии.ПодсказкиАдресов_ТипПоставщика    = НастройкиКартографии.Геокодирование_ТипПоставщика;
	НастройкиКартографии.ПодсказкиАдресов_Сервер           = НастройкиКартографии.Геокодирование_Сервер;
	НастройкиКартографии.ПодсказкиАдресов_Ключ             = НастройкиКартографии.Геокодирование_Ключ;
	НастройкиКартографии.Геокодирование_ДополнительныйКлюч = ""; // Значение по умолчанию для новой настройки
	
	уатЭлектронныеКартыСервер.СохранитьНастройкиСервераКартографииМаршрутизации(НастройкиКартографии);
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// справочника "уатЗаключенияОРезультатахМедицинскогоОсмотра".
//
Процедура ОбновитьЗаключенияМедосмотров_2_2_18_4() Экспорт
	
	Справочники.уатЗаключенияОРезультатахМедицинскогоОсмотра.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура заполняет новые варианты настройки отправки Ремонтных листов
// Имена запрещенных к отправке правил (объектов) см. в макете "Правила отправки получения данных" плана обмена.
Процедура ЗаполнитьПравилаРегистрацииОтправкиРемонтныхЛистов_2_2_18_5() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "РемонтныйЛист_РемЗона_СписаниеЗапасов";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "РемонтныйЛист_Автосервис_СписаниеЗапасов";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет заполнение предопределенных данных в справочнике "Виды номенклатуры".
//
Процедура ЗаполнитьПредопределенныеДанныеВидовНоменклатуры_2_2_18_8() Экспорт 
	
	Справочники.ВидыНоменклатуры.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура выполняет заполнение нового реквизита "Вид номенклатуры" по флагу "Услуга" в справочнике "Номенклатура".
//
Процедура ЗаполнитьВидыНоменклатуры_2_2_18_8() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Услуга КАК Услуга,
	|	Номенклатура.Представление КАК Представление,
	|	Номенклатура.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ВидНоменклатуры = &ПустойВидНоменклатуры";
	Запрос.УстановитьПараметр("ПустойВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Услуга Тогда
			СпрОб.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Услуга;
		Иначе
			СпрОб.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Товар;
		КонецЕсли;
		
		Попытка
			СпрОб.ОбменДанными.Загрузка = Истина;
			СпрОб.Записать();
		Исключение
			ТекстНСТР = НСтр("ru = 'Ошибка обновления номенклатуры ""%1"" с кодом ""%2""'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Представление, Выборка.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет меняет 2 версию учетных записей сервисов штрафов на 3.
//
Процедура ОбновитьВерсиюУчетныхЗаписийСервисовШтрафов_2_2_18_9() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", Справочники.уатВнешниеСистемы.ШтрафовНет);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатУчетныеЗаписиСервисовШтрафов.Ссылка КАК Ссылка,
	               |	уатУчетныеЗаписиСервисовШтрафов.УдалитьЗагружатьФото КАК УдалитьЗагружатьФото,
	               |	уатУчетныеЗаписиСервисовШтрафов.УдалитьЗагружатьКарточкуШтрафа КАК УдалитьЗагружатьКарточкуШтрафа
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиСервисовШтрафов КАК уатУчетныеЗаписиСервисовШтрафов
	               |ГДЕ
	               |	уатУчетныеЗаписиСервисовШтрафов.ВнешняяСистема = &ВнешняяСистема";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект        = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Версия = Перечисления.уатВерсииШтрафовНет.ШтрафовНет_3;
		СправочникОбъект.ЗагружатьФото           = Выборка.УдалитьЗагружатьФото = 0;
		СправочникОбъект.ЗагружатьКарточкуШтрафа = Выборка.УдалитьЗагружатьКарточкуШтрафа = 1;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура запопрещает в существующих базах отправку выработки сотрудников в ERP по умолчанию.
// Имена запрещенных к отправке правил (объектов) см. в макете "Правила отправки получения данных" плана обмена.
Процедура ОбновитьПравилаРегистрацииОтправкиВыработкиСотрудников_2_2_18_10() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел = ЛОЖЬ
	|	И (СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = ""ОбменERP""
	|			ИЛИ СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = ""ОбменКА2"")");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "ПутевойЛист_ВыработкаСотрудников";
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "РемонтныйЛист_ВыработкаСотрудников";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьПравилаРегистрацииПлатежныхПорученийИсходящих_2_2_18_11() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "ПлатежноеПоручениеИсходящее_ПереводНаДругойСчет";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новые настройки Пользователей мобильного приложения.
//
Процедура ОбновитьНастройкиПользователейМП_2_2_18_12() Экспорт
	
	НаборЗаписей = РегистрыСведений.уатПользователиМобильногоПриложения.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		ТекЗапись.ИспользоватьПутевыеЛисты    = Истина;
		ТекЗапись.ИспользоватьМаршрутныеЛисты = Истина;
		ТекЗапись.ИспользоватьЗаявкиНаРемонт  = Истина;
		ТекЗапись.ИспользоватьЧат             = Истина;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	
КонецПроцедуры

// Процедура обновляет состояния журналов трансп. документов в регистре сведений уатСостоянияПодписиПЛ.
//
Процедура ОбновитьСостоянияЖТД_2_2_18_15() Экспорт
	
	НаборЗаписей = РегистрыСведений.уатСостоянияПодписиПутевыхЛистов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	мсвВидыДокументов = Новый Массив;
	мсвВидыДокументов.Добавить("МедработникПредрейсовый");
	мсвВидыДокументов.Добавить("МедработникПослерейсовый");
	мсвВидыДокументов.Добавить("МедработникВодитель2Предрейсовый");
	мсвВидыДокументов.Добавить("МедработникВодитель2Послерейсовый");
	мсвВидыДокументов.Добавить("КонтролерПредрейсовый");
	мсвВидыДокументов.Добавить("КонтролерПослерейсовый");
	мсвВидыДокументов.Добавить("ВодительПредрейсовый");
	мсвВидыДокументов.Добавить("ВодительПослерейсовый");
	мсвВидыДокументов.Добавить("ДиспетчерПредрейсовый");
	мсвВидыДокументов.Добавить("ДиспетчерПослерейсовый");
	
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		Для Каждого ТекВидДок Из мсвВидыДокументов Цикл
			Если ТекЗапись["Удалить" + ТекВидДок] И ТекЗапись[ТекВидДок].Пустая() Тогда
				ТекЗапись[ТекВидДок] = Перечисления.уатСостоянияТранспортныхДокументов.Подписан;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	уатЖурналыТранспортныхДокументов.ОбновитьИконкиСостоянийПодписи(НаборЗаписей);
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_19

// Процедура заполняет Организацию у рег документов
//
Процедура ЗаполнитьОрганизациюРегДокументов_2_2_19_2() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	уатРегистрационныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(Объект.ВладелецДокументов) = Тип("СправочникСсылка.уатТС") Тогда
			Объект.Организация   = Объект.ВладелецДокументов.Организация;
			Объект.Подразделение = Объект.ВладелецДокументов.Подразделение;
		ИначеЕсли ТипЗнч(Объект.ВладелецДокументов) = Тип("СправочникСсылка.Сотрудники") Тогда
			СведенияВодитель = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Объект.ВладелецДокументов,
			ТекущаяДатаСеанса());
			
			Объект.Организация   = СведенияВодитель.Организация;
			Объект.Подразделение = СведенияВодитель.ПодразделениеОрганизации;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
КонецПроцедуры

// Процедура обновляет новый реквизит ВнешняяСистема предопределенных элементов
// справочника уатПрофилиОбменаСВнешнимиСистемами и новую внешнюю систему Автодор
Процедура ЗаполнитьТипВнешнейСистемы_2_2_19_3() Экспорт
	
	СпрОбъект = Справочники.уатВнешниеСистемы.Автодор.ПолучитьОбъект();
	СпрОбъект.ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СистемаВзиманияПлаты;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Автодор.ПолучитьОбъект();
	СпрОбъект.ТипСистемы = Перечисления.уатТипыВнешнихСистем.СистемаВзиманияПлаты;
	СпрОбъект.ТипСоответствияКолонок = 1;
	Справочники.уатПрофилиОбменаСВнешнимиСистемами.ИнициализацияСоответствияКолонок(СпрОбъект);
	Справочники.уатПрофилиОбменаСВнешнимиСистемами.ИнициализацияСоответствияКолонокАвтодор(СпрОбъект);
	СпрОбъект.Записать();
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПрофилиОбменаСВнешнимиСистемами.Ссылка КАК Ссылка,
	               |	уатПрофилиОбменаСВнешнимиСистемами.ТипСистемы КАК ТипСистемы
	               |ИЗ
	               |	Справочник.уатПрофилиОбменаСВнешнимиСистемами КАК уатПрофилиОбменаСВнешнимиСистемами
	               |ГДЕ
	               |	уатПрофилиОбменаСВнешнимиСистемами.ВнешняяСистема = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Автодор Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.Автодор;
		ИначеЕсли Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Газпромнефть Тогда 
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть;
		ИначеЕсли Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Лукойл Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД;
		ИначеЕсли Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.ПлатонВыпискаОпераций Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.Платон;
		ИначеЕсли Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.ПлатонЛогистическийОтчет Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.Платон;
		ИначеЕсли Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.ППР Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР;
		ИначеЕсли Выборка.Ссылка = Справочники.уатПрофилиОбменаСВнешнимиСистемами.Роснефть Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть;
		ИначеЕсли Выборка.ТипСистемы = Перечисления.уатТипыВнешнихСистем.СистемаВзиманияПлаты Тогда
			Объект.ВнешняяСистема = Справочники.уатВнешниеСистемы.Платон;
		КонецЕсли;
		
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет начальное заполнение истории закрепления бортовых устройтсв Платон
Процедура ЗаполнитьИсториюЗакрепленияБортовыхУстройствПлатон_2_2_19_3() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	уатТС.НомерБортовогоУстройстваПлатон КАК НомерБортовогоУстройстваПлатон
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.НомерБортовогоУстройстваПлатон <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.уатИсторияЗакрепленияБортовыхУстройств.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Период 		  			= Дата("19700101000000");
			МенеджерЗаписи.ТС	  		  			= Выборка.Ссылка;
			МенеджерЗаписи.ВнешняяСистема 			= Справочники.уатВнешниеСистемы.Платон;
			МенеджерЗаписи.НомерБортовогоУстройства = Выборка.НомерБортовогоУстройстваПлатон;
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура переносит группу ГСМ "Масла" в группу ГСМ "ТЖ и присадки"
Процедура ПеренестиГСММасла_2_2_19_4() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатНоменклатураГСМ.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	               |ГДЕ
	               |	уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.УдалитьМасло)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.уатНоменклатураГСМ.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Номенклатура = Выборка.Номенклатура;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				
				МенеджерЗаписи.ГруппаГСМ = Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости;
				
				Попытка
					МенеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_20

// Процедура заполняет предопредопределенную группу диспетчеров и чатов
//
Процедура ЗаполнитьГруппыДиспетчеров_2_2_20_2() Экспорт
		
	стрНастроек     = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	РольИсполнителя = стрНастроек.ПолучателиСообщений;
	Если НЕ ЗначениеЗаполнено(РольИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	СпрОбъект = Справочники.уатГруппыДиспетчеров.ПолучателиСообщений.ПолучитьОбъект();
	Если СпрОбъект.Диспетчеры.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрСведенийИсполнителиЗадач.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК РегистрСведенийИсполнителиЗадач
	|ГДЕ
	|	РегистрСведенийИсполнителиЗадач.РольИсполнителя.Ссылка = &РольИсполнителя";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйДиспетчер = СпрОбъект.Диспетчеры.Добавить();
		НовыйДиспетчер.Диспетчер = Выборка.Исполнитель;
	КонецЦикла;
	СпрОбъект.Записать();

	СпрОбъект = Справочники.уатЧаты.ОбщийЧат.ПолучитьОбъект();
	Если СпрОбъект.Водители.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	СпрОбъект.ГруппаДиспетчеров = Справочники.уатГруппыДиспетчеров.ПолучателиСообщений;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатПользователиМобильногоПриложения.Логин КАК Логин,
	               |	уатПользователиМобильногоПриложения.Пользователь КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.уатПользователиМобильногоПриложения КАК уатПользователиМобильногоПриложения
	               |ГДЕ
	               |	уатПользователиМобильногоПриложения.ИспользоватьЧат = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйВодитель = СпрОбъект.Водители.Добавить();
		НовыйВодитель.Водитель = Выборка.Пользователь;
	КонецЦикла;
	СпрОбъект.Записать();
	
КонецПроцедуры

// Процедура заполняет чаты с водителями
//
Процедура ЗаполнитьЧатыСВодителями_2_2_20_2() Экспорт
	
	ОбщийЧат = Справочники.уатЧаты.ОбщийЧат;
	
	стрНастроек     = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	ЛогинСервераМП  = стрНастроек.ЛогинСервераМП;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЧатыСВодителями.Отправитель КАК Отправитель,
	               |	уатЧатыСВодителями.Идентификатор КАК Идентификатор,
	               |	уатЧатыСВодителями.ТекстСообщения КАК ТекстСообщения,
	               |	уатЧатыСВодителями.Дата КАК Дата,
	               |	уатЧатыСВодителями.Отправлено КАК Отправлено,
	               |	уатЧатыСВодителями.Чат КАК Чат,
	               |	ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее) КАК ВидСообщения
	               |ИЗ
	               |	РегистрСведений.уатЧатыСВодителями КАК уатЧатыСВодителями
	               |ГДЕ
	               |	уатЧатыСВодителями.Чат = ЗНАЧЕНИЕ(Справочник.уатЧаты.ПустаяСсылка)";

	Выборка  = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.уатЧатыСВодителями.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл 
			Запись.Отправитель  = ОбщийЧат;
			Запись.ВидСообщения = Выборка.ВидСообщения;
			Запись.Чат          = ОбщийЧат;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			Продолжить;
		КонецПопытки;

		МенеджерЗаписи = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Получатель     = Выборка.Отправитель;
		МенеджерЗаписи.Идентификатор  = Выборка.Идентификатор;
		
		МенеджерЗаписи.Доставлено     = Истина;
		МенеджерЗаписи.Прочитано      = Истина;
		МенеджерЗаписи.ДатаДоставки   = Выборка.Дата;
		МенеджерЗаписи.ДатаПрочтения  = Выборка.Дата;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Задание.Дата КАК ДатаCообщения,
	               |	Задание.Содержание КАК ТекстСообщения,
	               |	уатСообщенияОтВодителей.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗадачаИсполнителя.Ссылка КАК ЗадачаСсылка,
	               |	ВЫБОР
	               |		КОГДА уатСообщенияОтВодителей.Опоздание
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Опоздание)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Входящее)
	               |	КОНЕЦ КАК ВидСообщения,
	               |	Задание.СрокИсполнения КАК ДатаДоставки,
	               |	Задание.Ссылка КАК Задача
	               |ИЗ
	               |	РегистрСведений.УдалитьуатСообщенияОтВодителей КАК уатСообщенияОтВодителей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Задание КАК Задание
	               |			ПО ЗадачаИсполнителя.БизнесПроцесс = Задание.Ссылка
	               |		ПО уатСообщенияОтВодителей.Задача = ЗадачаИсполнителя.Ссылка
	               |ГДЕ
	               |	уатСообщенияОтВодителей.Перенесено = ЛОЖЬ";

	Выборка  = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыйGUID = Строка(Новый УникальныйИдентификатор());

		МенеджерЗаписи = РегистрыСведений.уатЧатыСВодителями.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Отправитель    = Выборка.ФизическоеЛицо;
		МенеджерЗаписи.Идентификатор  = НовыйGUID;
		
		МенеджерЗаписи.ТекстСообщения = Выборка.ТекстСообщения;
		МенеджерЗаписи.Дата           = Выборка.ДатаCообщения;
		МенеджерЗаписи.Отправлено     = Истина;
		МенеджерЗаписи.Чат            = ОбщийЧат;
		МенеджерЗаписи.ВидСообщения   = Выборка.ВидСообщения;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
		
		МенеджерЗаписи = РегистрыСведений.уатСтатусыСообщенийМобильногоПриложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Получатель     = ОбщийЧат;
		МенеджерЗаписи.Идентификатор  = НовыйGUID;
		
		МенеджерЗаписи.Доставлено     = Истина;
		МенеджерЗаписи.Прочитано      = Истина;
		МенеджерЗаписи.ДатаДоставки   = Выборка.ДатаДоставки;
		МенеджерЗаписи.ДатаПрочтения  = Выборка.ДатаДоставки;
		МенеджерЗаписи.УдалитьЗадача  = Выборка.Задача;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.УдалитьуатСообщенияОтВодителей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Отбор.Задача.Установить(Выборка.ЗадачаСсылка);		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл 
			Запись.Перенесено = Истина;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);

	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет реквизит пароль
//
Процедура ОбработатьДанныеДляБезопасноХранениеПаролей_2_2_20_4() Экспорт
	
	Справочники.уатУчетныеЗаписиСистемыМониторинга.ОбработатьДанныеДляПереходаНаНовуюВерсию();
	Справочники.уатУчетныеЗаписиПЦ.ОбработатьДанныеДляПереходаНаНовуюВерсию();

	ВнешняяСистема		 = Справочники.уатВнешниеСистемы.Omnicomm;
	СтруктураПараметров	 = уатМониторинг.ПолучитьНастройкиМониторинга(ВнешняяСистема);
	
	Omnicomm_ЗагрузитьПробегИРасходГСМ           = СтруктураПараметров.ЗагрузитьПробегРасход;
	Omnicomm_ЗагрузитьДополнительныеСведения     = СтруктураПараметров.ЗагрузитьДопСведения;
	Omnicomm_ЗагрузитьКоординаты                 = СтруктураПараметров.ЗагрузитьКоординаты;
	Omnicomm_ИнтервалЗагрузки                    = СтруктураПараметров.ИнтервалЗагрузки;
	Omnicomm_ПериодичностьХранения      = СтруктураПараметров.ПериодичностьХранения;
	Omnicomm_ЧасовойПояс                = СтруктураПараметров.ЧасовойПояс;
	Omnicomm_ЧасовойПоясПоПодразделению = СтруктураПараметров.ЧасовойПоясПоПодразделению;
	Omnicomm_ЧасовойПоясПереключатель   = ?(Omnicomm_ЧасовойПоясПоПодразделению, "ЗависитОтПодразделения", "Общий");
	Omnicomm_ИнтервалХраненияКоординат  = СтруктураПараметров.ИнтервалХраненияКоординат;
	
	Omnicomm_ТаблТС = Новый Массив();
	Для Каждого ТекТС Из СтруктураПараметров.МассивТС Цикл
		Omnicomm_ТаблТС.Добавить(ТекТС);
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("ЗагрузитьПробегИРасходГСМ") Тогда
		Omnicomm_ЗагрузитьПробегИРасходГСМ = СтруктураПараметров.ЗагрузитьПробегИРасходГСМ;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ЗагрузитьДополнительныеСведения") Тогда
		Omnicomm_ЗагрузитьДополнительныеСведения = СтруктураПараметров.ЗагрузитьДополнительныеСведения;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("СписокТС") Тогда
		Для Каждого ТекТС Из СтруктураПараметров.МассивТС Цикл
			Omnicomm_ТаблТС.Добавить(ТекТС);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗагрузитьПробегРасход",      Omnicomm_ЗагрузитьПробегИРасходГСМ);
	СтруктураПараметров.Вставить("ЗагрузитьДопСведения",       Omnicomm_ЗагрузитьДополнительныеСведения);
	СтруктураПараметров.Вставить("ЗагрузитьКоординаты",        Omnicomm_ЗагрузитьКоординаты);
	СтруктураПараметров.Вставить("ИнтервалЗагрузки",           Omnicomm_ИнтервалЗагрузки);
	СтруктураПараметров.Вставить("ПериодичностьХранения",      Omnicomm_ПериодичностьХранения);
	СтруктураПараметров.Вставить("ЧасовойПояс",                Omnicomm_ЧасовойПояс);
	СтруктураПараметров.Вставить("ЧасовойПоясПоПодразделению", Omnicomm_ЧасовойПоясПоПодразделению);
	СтруктураПараметров.Вставить("ИнтервалХраненияКоординат",  Omnicomm_ИнтервалХраненияКоординат);
	мсвТС = Новый Массив;
	Для Каждого ТекСтрока Из Omnicomm_ТаблТС Цикл
		мсвТС.Добавить(ТекСтрока);
	КонецЦикла;
	СтруктураПараметров.Вставить("МассивТС", мсвТС);
	ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров);
	Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Установить(ХранилищеНастроек);
	

КонецПроцедуры

// Процедура обноляет/заполняет данные некоторых объектов, связанных с реализацией учета выработки и зарплаты
// в Маршрутных листах
Процедура ЗаполнениеДанныхРасчетВыработкиИЗарплатыВМаршрутныхЛистах_2_2_20_5() Экспорт
	
	// 1. Константы - настройки программы "Учет план-факта"
	ЗапросМЛ = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(уатПраваИНастройки.Значение, ИСТИНА)) КАК Значение
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|		ПО Организации.Ссылка = уатПраваИНастройки.Объект
	|			И (уатПраваИНастройки.ПравоНастройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уатПраваИНастройки.УдалитьУчетВремениПланФактМаршрутныйЛист))
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления");
	ВыборкаМЛ = ЗапросМЛ.Выполнить().Выбрать();
	Если ВыборкаМЛ.Следующий() И ВыборкаМЛ.Значение Тогда
		Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Установить(Истина);
	КонецЕсли;
	
	ЗапросПЛ = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.ПравоНастройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.уатПраваИНастройки.УдалитьУчетПлановогоИФактическогоВремениВПутевыхЛистах)
	|	И уатПраваИНастройки.Значение = ИСТИНА");
	Если НЕ ЗапросПЛ.Выполнить().Пустой() Тогда
		Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Установить(Истина);
	КонецЕсли;
	
	// 2. Справочник "Параметры выработки". Заполнение нового ПВ и нового флага
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(, "ВремяОжидания");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(,, "ДействуетНаСотрудниковМЛ");
	
	// 3. Справочник "Тарифы зарплаты". Заполнение реквизита "Применение" = 1 для ремонтов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТарифыЗП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТарифыЗП КАК уатТарифыЗП
	|ГДЕ
	|	НЕ уатТарифыЗП.ЭтоГруппа
	|	И НЕ уатТарифыЗП.ПометкаУдаления
	|	И уатТарифыЗП.ВидНачисления = ЗНАЧЕНИЕ(ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт)
	|	И уатТарифыЗП.Применение = 0");
	ВыборкаТарифы = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТарифы.Следующий() Цикл
		СпрОбъект = ВыборкаТарифы.Ссылка.ПолучитьОбъект();
		СпрОбъект.Применение = 2;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
	КонецЦикла;
	
	// 4. Документ "Установка тарифов зарплаты". Заполнение реквизита "ВидОперации" = Собственные сотрудники
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатУстановкаТарифовЗП.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатУстановкаТарифовЗП КАК уатУстановкаТарифовЗП
	|ГДЕ
	|	НЕ уатУстановкаТарифовЗП.ПометкаУдаления
	|	И уатУстановкаТарифовЗП.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийУстановкаТарифовЗП.ПустаяСсылка)");
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДок.Следующий() Цикл
		ДокОбъект = ВыборкаДок.Ссылка.ПолучитьОбъект();
		ДокОбъект.ВидОперации = Перечисления.уатВидыОперацийУстановкаТарифовЗП.Сотрудники;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект,,,
			?(ДокОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_21

// Процедура выполняет заполнение фактических показателей маршрута по плановым,
// расчет итогов, устанавливает статус документа.
//
Процедура КонвертацияМаршрутногоЛиста_2_2_21(ДокументОбъект) Экспорт
	Если ЗначениеЗаполнено(ДокументОбъект.Статус) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Для СчСледСтрока = ТекСтрока.НомерСтроки По ДокументОбъект.Заказы.Количество()-1 Цикл
			СледСтрока = ДокументОбъект.Заказы[СчСледСтрока];
			Если СледСтрока.Пункт <> ТекСтрока.Пункт Тогда
				Если СледСтрока.Выполнен Тогда
					Если НЕ ЗначениеЗаполнено(ТекСтрока.ВремяФакт)
						И ЗначениеЗаполнено(ТекСтрока.Время) Тогда
						ТекСтрока.ВремяФакт = ТекСтрока.Время;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ТекСтрока.РасстояниеФакт)
						И ЗначениеЗаполнено(ТекСтрока.Расстояние) Тогда
						ТекСтрока.РасстояниеФакт = ТекСтрока.Расстояние;
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекСтрока.Выполнен Тогда
			ТекСтрока.ОжиданиеФакт = ТекСтрока.Ожидание;
			ТекСтрока.СтоянкаФакт  = ТекСтрока.Стоянка;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДокументОбъект.УдалитьВыработка Цикл
		НоваяСтрока = ДокументОбъект.ВыработкаТСиСотрудников.Добавить();
		НоваяСтрока.РучнойВвод = Истина;
		НоваяСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
		Если ТекСтрока.ПараметрВыработки.Временный Тогда
			НоваяСтрока.КоличествоПлан = ТекСтрока.Значение*3600;
			НоваяСтрока.КоличествоФакт = ТекСтрока.Значение*3600;
		Иначе
			НоваяСтрока.КоличествоПлан = ТекСтрока.Значение;
			НоваяСтрока.КоличествоФакт = ТекСтрока.Значение;
		КонецЕсли;
		НоваяСтрока.Контрагент            = ДокументОбъект.Контрагент;
		НоваяСтрока.Подразделение         = ДокументОбъект.Подразделение;
		НоваяСтрока.ВидПеревозки          = ДокументОбъект.ВидПеревозки;
		НоваяСтрока.НаправлениеПеревозки  = ДокументОбъект.НаправлениеПеревозки;
		НоваяСтрока.Маршрут               = ДокументОбъект.Маршрут;
		НоваяСтрока.ОбъектСтроительства   = ДокументОбъект.ОбъектСтроительства;
	КонецЦикла;
	ДокументОбъект.УдалитьВыработка.Очистить();
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов предопределенного элемента "КоличествоКонтейнеров"
// справочника "уатПараметрыВыработки".
//
Процедура ЗаполнитьПараметрВыработкиКоличествоКонтейнеров_2_2_21_3() Экспорт
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(Ложь, "КоличествоКонтейнеров");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И уатПараметрыВыработки.Предопределенный");
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "КоличествоКонтейнеров");
	мВыборка = Запрос.Выполнить().Выбрать();
	
	Если мВыборка.Следующий() Тогда
		СпрОб = мВыборка.Ссылка.ПолучитьОбъект();
		СпрОб.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет первоначальное заполнение новых предопределенных элементов
// справочника "уатСтатусы_уэ".
//
Процедура ОбновитьСтатусы_2_2_21_4() Экспорт 
	
	Справочники.уатСтатусы_уэ.ЗаполнитьПредопределенныеДанные();
	
КонецПроцедуры

// Процедура заполняет новый реквизит "Вид модели ТС" в справочнике "Виды перевозок"
// значением по умолчанию "Автотранспорт"
Процедура ЗаполнитьВидМоделиТСвВидеПеревозки2_2_21_6() Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатВидыПеревозок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатВидыПеревозок КАК уатВидыПеревозок
	|ГДЕ
	|	уатВидыПеревозок.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СправочникОбъект 			 = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.Ссылка = Справочники.уатВидыПеревозок.Авиационная Тогда
				СправочникОбъект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.АвиационныйТранспорт;
			ИначеЕсли Выборка.Ссылка = Справочники.уатВидыПеревозок.Железнодорожная Тогда
				СправочникОбъект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.ЖДТранспорт;
			ИначеЕсли Выборка.Ссылка = Справочники.уатВидыПеревозок.Морская Тогда
				СправочникОбъект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.МорскойТранспорт; 
			Иначе
				СправочникОбъект.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт;
			КонецЕсли;
			
			Попытка
				СправочникОбъект.Записать()
			Исключение
				ТекстСообщения = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет новые реквизиты справочника Сопр. Документы: ВидОснования и ВидВладельца
//
Процедура ОбновитьСопроводительныеДокументы_2_2_21_9() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСопроводительныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|		ПО уатСопроводительныеДокументы.Ссылка = уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент
	|ГДЕ
	|	НЕ уатСопроводительныеДокументы.ПометкаУдаления
	|	И НЕ уатСопроводительныеДокументы.ЭтоГруппа
	|	И уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	|	И (уатСопроводительныеДокументы.ВидВладельца = ЗНАЧЕНИЕ(Перечисление.уатВидыВладельцевСопроводительныхДокументов.ПустаяСсылка)
	|			ИЛИ уатСопроводительныеДокументы.ВидОснования = ЗНАЧЕНИЕ(Перечисление.уатВидыОснованийСопроводительныхДокументов.ПустаяСсылка))");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСД = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОбъектСД.ВидВладельца.Пустая() Тогда
			ОбъектСД.ВидВладельца = Перечисления.уатВидыВладельцевСопроводительныхДокументов.ДокументыОрганизации;
			Если ЗначениеЗаполнено(ОбъектСД.ВладелецДокумента) И ТипЗнч(ОбъектСД.ВладелецДокумента) = Тип("СправочникСсылка.Контрагенты") Тогда
				ОбъектСД.ВидВладельца = Перечисления.уатВидыВладельцевСопроводительныхДокументов.ДокументыПеревозчика;
			КонецЕсли;
		КонецЕсли;
		Если ОбъектСД.ВидОснования.Пустая() Тогда
			ОбъектСД.ВидОснования = Перечисления.уатВидыОснованийСопроводительныхДокументов.ЗаказНаТС;
			Если ЗначениеЗаполнено(ОбъектСД.Основание) И ТипЗнч(ОбъектСД.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
				ОбъектСД.ВидОснования = Перечисления.уатВидыОснованийСопроводительныхДокументов.МаршрутныйЛист;
			КонецЕсли;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСД);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новые варианты настройки получения поступлений Материалов и услуг
Процедура ЗаполнитьПравилаПолученияПоступленийТоваровУслуг_2_2_21_10() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ПоступлениеТоваровУслуг";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_22

// Процедура заполняет новые реквизиты справочника Сотрудники: ДатаПриема, ДатаУвольнения, Класс, Позывной
//    Организация, Подразделение, Должность, ГрафикРаботы
// И новые ресурсы РС уатКадроваяИстория: Подразделение, Должность
// По данным помеченного на удаление РС УдалитьТекущиеКадровыеДанные
//
Процедура ОбновитьКадровуюИсторию_2_2_22_3() Экспорт
	
	ЗапросСотрудники = Новый Запрос(
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Позывной КАК Позывной,
	|	Сотрудники.Класс КАК Класс,
	|	Сотрудники.ДатаПриема КАК ДатаПриема,
	|	Сотрудники.ДатаУвольнения КАК ДатаУвольнения,
	|	Сотрудники.Организация КАК Организация,
	|	Сотрудники.Подразделение КАК Подразделение,
	|	Сотрудники.Должность КАК Должность,
	|	Сотрудники.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ЭтоГруппа
	|	И НЕ Сотрудники.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	УдалитьТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации КАК ОсновноеРабочееМестоВОрганизации
	|ИЗ
	|	РегистрСведений.УдалитьТекущиеКадровыеДанныеСотрудников КАК УдалитьТекущиеКадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатКадроваяИсторияСотрудников.Период КАК Период,
	|	уатКадроваяИсторияСотрудников.Организация КАК Организация,
	|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	уатКадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	|	уатКадроваяИсторияСотрудников.Должность КАК Должность,
	|	уатКадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	уатКадроваяИсторияСотрудников.Комментарий КАК Комментарий,
	|	уатКадроваяИсторияСотрудников.УдалитьНачислятьЗПВПЛ КАК УдалитьНачислятьЗПВПЛ,
	|	уатКадроваяИсторияСотрудников.УдалитьКласс КАК УдалитьКласс,
	|	уатКадроваяИсторияСотрудников.УдалитьПозывной КАК УдалитьПозывной
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних КАК уатКадроваяИсторияСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ");
	мсвДанные = ЗапросСотрудники.ВыполнитьПакет();
	
	тблТекущиеКадровыеДанные = мсвДанные[1].Выгрузить();
	тблКадроваяИсторияСрез   = мсвДанные[2].Выгрузить();
	НЗКадроваяИстория        = РегистрыСведений.уатКадроваяИсторияСотрудников.СоздатьНаборЗаписей();
	
	ВыборкаСотрудники = мсвДанные[0].Выбрать();
	Пока ВыборкаСотрудники.Следующий() Цикл
		СтруктураНовыеРеквизиты = Новый Структура("ДатаПриема, ДатаУвольнения, Класс, Позывной, Организация, Подразделение, Должность, ГрафикРаботы");
		ЗаполнитьЗначенияСвойств(СтруктураНовыеРеквизиты, ВыборкаСотрудники);
		
		// Поиск записи РС УдалитьТекущиеКадровыеДанныеСотрудников с переносимыми значениями
		мсвТекущиеКадровыеДанные = тблТекущиеКадровыеДанные.НайтиСтроки(Новый Структура("Сотрудник", ВыборкаСотрудники.Ссылка));
		Если мсвТекущиеКадровыеДанные.Количество() > 0 Тогда
			СтруктураНовыеРеквизиты.ДатаПриема     = мсвТекущиеКадровыеДанные[0].ДатаПриема;
			СтруктураНовыеРеквизиты.ДатаУвольнения = мсвТекущиеКадровыеДанные[0].ДатаУвольнения;
			СтруктураНовыеРеквизиты.Организация    = мсвТекущиеКадровыеДанные[0].ТекущаяОрганизация;
			СтруктураНовыеРеквизиты.Подразделение  = мсвТекущиеКадровыеДанные[0].ТекущееПодразделение;
			СтруктураНовыеРеквизиты.Должность      = мсвТекущиеКадровыеДанные[0].ТекущаяДолжность;
		КонецЕсли;
		
		// поиск записи РС уатКадроваяИсторияСотрудников с переносимыми значениями
		мсвКадроваяИсторияСрез = тблКадроваяИсторияСрез.НайтиСтроки(Новый Структура("Сотрудник", ВыборкаСотрудники.Ссылка));
		Если мсвКадроваяИсторияСрез.Количество() > 0 Тогда
			СтруктураНовыеРеквизиты.Класс        = мсвКадроваяИсторияСрез[0].УдалитьКласс;
			СтруктураНовыеРеквизиты.Позывной     = мсвКадроваяИсторияСрез[0].УдалитьПозывной;
			СтруктураНовыеРеквизиты.ГрафикРаботы = мсвКадроваяИсторияСрез[0].ГрафикРаботы;
		КонецЕсли;
		
		// заполнение новых реквизитов справочника Сотрудники
		флДанныеИзменены = Ложь;
		Для Каждого ТекНовыйРеквизит Из СтруктураНовыеРеквизиты Цикл
			Если ВыборкаСотрудники[ТекНовыйРеквизит.Ключ] <> ТекНовыйРеквизит.Значение Тогда
				флДанныеИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флДанныеИзменены Тогда
			СотрудникОбъект = ВыборкаСотрудники.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СотрудникОбъект, СтруктураНовыеРеквизиты);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СотрудникОбъект);
		КонецЕсли;
		
		// заполнение новых ресурсов РС уатКадроваяИсторияСотрудников
		флДанныеИзменены = Ложь;
		Если ЗначениеЗаполнено(СтруктураНовыеРеквизиты.Подразделение) ИЛИ ЗначениеЗаполнено(СтруктураНовыеРеквизиты.Должность) Тогда
			НЗКадроваяИстория.Отбор.Сотрудник.Установить(ВыборкаСотрудники.Ссылка);
			
			// Изменяем только последнюю запись кадровой истории, поскольку неизвестны должность и подразделение, которые были до этого
			Если мсвКадроваяИсторияСрез.Количество() > 0 Тогда
				НЗКадроваяИстория.Отбор.Период.Установить(мсвКадроваяИсторияСрез[0].Период);
			КонецЕсли;
			
			НЗКадроваяИстория.Прочитать();
			
			Для Каждого ЗаписьКадроваяИстория Из НЗКадроваяИстория Цикл
				Если НЕ ЗначениеЗаполнено(ЗаписьКадроваяИстория.Подразделение)
					И ЗначениеЗаполнено(СтруктураНовыеРеквизиты.Подразделение) Тогда
					
					ЗаписьКадроваяИстория.Подразделение = СтруктураНовыеРеквизиты.Подразделение;
					флДанныеИзменены = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаписьКадроваяИстория.Должность)
					И ЗначениеЗаполнено(СтруктураНовыеРеквизиты.Должность) Тогда
					
					ЗаписьКадроваяИстория.Должность = СтруктураНовыеРеквизиты.Должность;
					флДанныеИзменены = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если флДанныеИзменены Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗКадроваяИстория);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура сворачивает поля детализации Регистратор.АдресНазначения и Регистратор.АдресДоставки
// в одно поле Регистратор.АдресПрибытия, который будет использоваться для всех типов документов
// Поле Содержание также корректируется.
//
Процедура ОбновитьШаблоныЗаполненияПоУслугам_2_2_22_3() Экспорт
	
	ЗапросШаблоны = Новый Запрос(
	"ВЫБРАТЬ
	|	уатШаблоныЗаполненияПоУслугам.Ссылка
	|ИЗ
	|	Справочник.уатШаблоныЗаполненияПоУслугам КАК уатШаблоныЗаполненияПоУслугам
	|ГДЕ
	|	НЕ уатШаблоныЗаполненияПоУслугам.ЭтоГруппа
	|	И НЕ уатШаблоныЗаполненияПоУслугам.ПометкаУдаления");
		
	ВыборкаШаблоны = ЗапросШаблоны.Выполнить().Выбрать();
	
	Пока ВыборкаШаблоны.Следующий() Цикл
		флДанныеИзменены = Ложь;
		
		ШаблонОбъект = ВыборкаШаблоны.Ссылка.ПолучитьОбъект();
		
		// ТЧ ДетализацияЗаполнения
		флАдресПрибытияНайден = Ложь;
		мсвСтрокУдалить = Новый Массив;
		Для Каждого ТекСтрока Из ШаблонОбъект.ДетализацияЗаполнения Цикл
			Если ТекСтрока.ПолеРегистра = "Регистратор" И (ТекСтрока.Реквизит = "АдресНазначения"
				ИЛИ ТекСтрока.Реквизит = "АдресДоставки") Тогда
				Если НЕ флАдресПрибытияНайден Тогда
					ТекСтрока.Реквизит = "АдресПрибытия";
					ТекСтрока.РеквизитПредставление = "Адрес прибытия (доставки)";
					флАдресПрибытияНайден = Истина;
					флДанныеИзменены = Истина;
				Иначе
					мсвСтрокУдалить.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
			ШаблонОбъект.ДетализацияЗаполнения.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
		// Поле Содержание (Шаблон содержания)
		Если СтрНайти(ШаблонОбъект.Содержание, "[Регистратор.АдресНазначения]") <> 0 Тогда
			ШаблонОбъект.Содержание = СтрЗаменить(ШаблонОбъект.Содержание, "[Регистратор.АдресНазначения]", "[Регистратор.АдресПрибытия]");
			флДанныеИзменены = Истина;
		КонецЕсли;
		Если СтрНайти(ШаблонОбъект.Содержание, "[Регистратор.АдресДоставки]") <> 0 Тогда
			ШаблонОбъект.Содержание = СтрЗаменить(ШаблонОбъект.Содержание, "[Регистратор.АдресДоставки]", "[Регистратор.АдресПрибытия]");
			флДанныеИзменены = Истина;
		КонецЕсли;
		КоличВхожденийАдресПрибытия = СтрЧислоВхождений(ШаблонОбъект.Содержание, "[Регистратор.АдресПрибытия]");
		Если КоличВхожденийАдресПрибытия > 1 Тогда // оставим только первое поле, дубли надо удалить
			Для Сч = 2 По КоличВхожденийАдресПрибытия Цикл
				НачПозиция = СтрНайти(ШаблонОбъект.Содержание, "[Регистратор.АдресПрибытия]",,, Сч);
				ШаблонОбъект.Содержание = Лев(ШаблонОбъект.Содержание, НачПозиция - 1)
					+ Сред(ШаблонОбъект.Содержание, НачПозиция + СтрДлина("[Регистратор.АдресПрибытия]"));
			КонецЦикла;
		КонецЕсли;
		
		Если флДанныеИзменены Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ШаблонОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область Обновление_на_версию_2_2_23

// Процедура выполняет заполнение реквизитов предопределенного элемента "СкладскаяОбработка"
// справочника "уатПараметрыВыработки".
//
Процедура ЗаполнитьПараметрВыработкиПробегВнеГеозоны_2_2_23_2() Экспорт
	
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(Ложь, "ПробегВнеГеозоны"); 
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(Ложь, "ПробегВнеГеозоныПоТипуПункта");
	Справочники.уатПараметрыВыработки.ЗаполнитьПредопределенныеДанные(Ложь, "ПробегВнеГеозоныПоВидуОперации");
	
КонецПроцедуры

// Процедура заполняет график оплаты в справочнике ДоговорыКонтрагентов
//
Процедура ОбновитьДоговоры_2_2_22_3() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК СправочникДоговорыКонтрагентов
	|ГДЕ
	|	НЕ СправочникДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ СправочникДоговорыКонтрагентов.ЭтоГруппа
	|	И СправочникДоговорыКонтрагентов.УдалитьУсловиеВозникновенияЗадолженности <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникДоговорыКонтрагентов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СправочникДоговорыКонтрагентов.ГрафикОплаты.НомерСтроки) = 0");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ДоговорОбъект.ГрафикОплаты.Добавить();
		НоваяСтрока.ВариантОтсчета                = ?(ДоговорОбъект.УдалитьУсловиеВозникновенияЗадолженности = 1,
			Перечисления.уатВариантыОтсчетаДатыПлатежа.ПослеДоставкиГруза,
			Перечисления.уатВариантыОтсчетаДатыПлатежа.ПослеПолученияСопроводительныхДокументов);
		НоваяСтрока.Процент                       = 100;
		НоваяСтрока.Срок                          = ДоговорОбъект.УдалитьДопустимоеЧислоДнейЗадолженности;
		НоваяСтрока.ПроизводственныйКалендарь     = ДоговорОбъект.УдалитьПроизводственныйКалендарь;
		НоваяСтрока.ВидСопроводительногоДокумента = ДоговорОбъект.УдалитьВидСДПоЗадолженности;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДоговорОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет цвет и вид нового состояния ТС "Заявка на ремонт"
Процедура НастроитьСостояниеТСЗаявкаНаРемонтИОбновитьЦветаСостояний_2_2_23_3() Экспорт 
	
	СпрСсылка = Справочники.уатСостояниеТС.ЗаявкаНаРемонт;
	СпрОбъект = СпрСсылка.ПолучитьОбъект();
	
	СпрОбъект.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;  
	
	Хранилище = Новый ХранилищеЗначения(WebЦвета.СветлоКоричневый);
	СпрОбъект.ЦветСостояния = Хранилище;
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки; 
	
	СпрОбъект = Справочники.уатСостояниеТС.Выбыло.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.АкварельноСиний); 
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	СпрОбъект = Справочники.уатСостояниеТС.НаКапитальномРемонте.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.СветлоКоричневый);
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;  
	
	СпрОбъект = Справочники.уатСостояниеТС.НаСреднемРемонте.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.СветлоКоричневый);
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки; 
	
	СпрОбъект = Справочники.уатСостояниеТС.НаТекущемРемонте.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.СветлоКоричневый);
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;    
	
	СпрОбъект = Справочники.уатСостояниеТС.СформированМаршрутныйЛист.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.БледноЗеленый);
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;  
	
	СпрОбъект = Справочники.уатСостояниеТС.СформированПутевойЛист.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.Аквамарин);
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	СпрОбъект = Справочники.уатСостояниеТС.СформированаРазнарядка.ПолучитьОбъект();
	СпрОбъект.ЦветСостояния = Новый ХранилищеЗначения(WebЦвета.БледноЛиловый);
	
	Попытка
		СпрОбъект.Записать()
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Процедура обновляет адрес сервиса MultiGo 
//
Процедура ОбновитьMultiGo_2_2_22_4() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатУчетныеЗаписиMultiGo.Ссылка КАК Ссылка,
	               |	уатУчетныеЗаписиMultiGo.АдресСервиса КАК АдресСервиса
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиMultiGo КАК уатУчетныеЗаписиMultiGo
	               |ГДЕ
	               |	НЕ уатУчетныеЗаписиMultiGo.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивУчеток = Новый Массив();
	Пока Выборка.Следующий() Цикл 
		Если СтрНайти(Выборка.АдресСервиса, "api7.multigo.ru") > 0 Тогда
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.АдресСервиса = "https://api.multigo.ru";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект); 
			МассивУчеток.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("МассивУчеток", МассивУчеток);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТСНастройкиMultiGo.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатТС.НастройкиMultiGo КАК уатТСНастройкиMultiGo
	               |ГДЕ
	               |	уатТСНастройкиMultiGo.Ссылка.УчетнаяЗаписьMultiGo В(&МассивУчеток)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатТСНастройкиMultiGo.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		Для Каждого ТекСтрока Из СпрОбъект.НастройкиMultiGo Цикл 
			Если ТекСтрока.ПараметрAPI = "startTankVol" Тогда
				ТекСтрока.ПараметрAPI = "startVol";
				ЕстьИзменения = Истина;
			ИначеЕсли ТекСтрока.ПараметрAPI = "avoidTollWay" Тогда
				ТекСтрока.ПараметрAPI = "avoidToll";
				ЕстьИзменения = Истина;
			ИначеЕсли ТекСтрока.ПараметрAPI = "useEntyPass" Тогда
				ТекСтрока.ПараметрAPI = "entryPass";
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новые варианты настройки получения Заказов клиента 
// и Реализации товаров и услуг из ERP и КА аналогично старым правилам.
// Имена запрещенных к получению правил (объектов) см. в макете "Правила отправки получения данных" плана обмена.
Процедура ЗаполнитьПравилаРегистрацииПолученияЗаказовНаТС_2_2_23_5() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЗапрещенныеКПолучению КАК СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФорматЗапрещенныеКПолучению.Ссылка.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ИмяЗаказКлиента", "ЗаказКлиента_ВЗаказНаТС");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ВозвратТоваровОтПокупателя_ВЗаказНаТС";
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ВозвратТоваровПоставщику_ВЗаказНаТС";
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказПоставщику_ВЗаказНаТС";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказПоставщику_ВЗаказНаТС_Поставщик";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказПоставщику_ВЗаказНаТС_ОтПоставщика";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказПоставщику_ВЗаказНаТС_ОтПеревозчика";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказПоставщику_ВЗаказНаТС_СиламиПеревозчика";
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ЗаказПоставщику_ВЗаказНаТС_СлужбаДоставки";
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКПолучению.Добавить();
		НоваяСтрока.Имя = "ПеремещениеТоваров_ВЗаказНаТС";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_24

// Процедура заполняет новый вариант настройки отправки Инвентаризации товаров и Заправки ГСМ
// Имена запрещенных к отправке правил (объектов) см. в макете "Правила отправки получения данных" плана обмена.
Процедура ЗаполнитьПравилаРегистрацииОтправкиРемонтныхЛистов_2_2_24_2() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел = ЛОЖЬ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "ИнвентаризацияТоваровВПересчетТоваров";
		
		НоваяСтрока = ПланОбменаОбъект.ЗапрещенныеКОтправке.Добавить();
		НоваяСтрока.Имя = "ЗаправкаГСМ_СкладТалон_СписаниеЗапасов";
		
		ПланОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет реквизит ВидCообщенияДляЭПЛ
Процедура ЗаполнитьПредопределенныеВидысообщенийДляЭПЛ_2_2_24_3() Экспорт
	
	СпрОб = Справочники.уатВидыСообщения.Городской.ПолучитьОбъект();
	СпрОб.ВидCообщенияДляЭПЛ = "Г";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	
	СпрОб = Справочники.уатВидыСообщения.ПассажирыИБагаж.ПолучитьОбъект();
	СпрОб.ВидCообщенияДляЭПЛ = "Г";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	
	СпрОб = Справочники.уатВидыСообщения.Междугородний.ПолучитьОбъект();
	СпрОб.ВидCообщенияДляЭПЛ = "М";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	
	СпрОб = Справочники.уатВидыСообщения.Международный.ПолучитьОбъект();
	СпрОб.ВидCообщенияДляЭПЛ = "М";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);
	
	СпрОб = Справочники.уатВидыСообщения.Пригородный.ПолучитьОбъект();
	СпрОб.ВидCообщенияДляЭПЛ = "П";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОб);

КонецПроцедуры 

// Процедура обновляет настройки хранения согласований документов на новый формат
&НаСервере
Процедура ЗаполнитьНастройкиСогласованийДокументов_2_2_24_5() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатПраваИНастройки.Объект КАК Объект,
	|	уатПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	уатПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.ПравоНастройка В(&ПраваСогласования)
	|ИТОГИ ПО
	|	Объект");
	ПраваСогласования = Новый Массив();
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьАктСверкиВзаиморасчетовГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьАктСверкиВзаиморасчетовСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьВводВЭксплуатациюГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьВводВЭксплуатациюСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьВыбытиеИзЭксплуатацииГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьВыбытиеИзЭксплуатацииСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьЗаявкаНаРасходованиеДСГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьЗаявкаНаРасходованиеДССогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьЗаявкаНаРемонтГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьЗаявкаНаРемонтСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьПеремещениеТСИОборудованияГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьПеремещенияТСИОборудованияСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьПланированиеРаботыТСГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьПланированиеРаботыТССогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьПоступлениеТоваровУслугГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьПоступлениеТоваровУслугСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьРеестрПеревозокГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьРеестрПеревозокСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьРемонтныйЛистГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьРемонтныйЛистСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьСчетНаОплатуПоставщикаГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьСчетНаОплатуПоставщикаСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьУстановкаПрейскурантовТСГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьУстановкаПрейскурантовТССогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьУстановкаТарифовЗПГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьУстановкаТарифовЗПСогласованиеПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьУстановкаТарифовСебестоимостиГруппаИсполнителейСогласованияПоУмолчанию);
	ПраваСогласования.Добавить(ПланыВидовХарактеристик.уатПраваИНастройки.УдалитьУстановкаТарифовСебестоимостиСогласованиеПоУмолчанию);
	Запрос.УстановитьПараметр("ПраваСогласования", ПраваСогласования);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ОбъектНастроек = Выборка.Объект;
		Если ТипЗнч(ОбъектНастроек) = Тип("СправочникСсылка.Организации")
			Или ТипЗнч(ОбъектНастроек) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			СтруктураНастроек = Новый Структура;
			
			ВыборкаДетали = Выборка.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				
				ВидДокумента = ВыборкаДетали.ПравоНастройка.ИмяПредопределенныхДанных;
				НастройкаСогласованиеПоУмолчанию = Ложь;
				НастройкаГруппаИсполнителейСогласованияПоУмолчанию = Ложь;
				Если СтрНачинаетсяС(ВидДокумента, "Удалить") Тогда
					ВидДокумента = СтрЗаменить(ВидДокумента, "Удалить", "");
				КонецЕсли;
				Если СтрЗаканчиваетсяНа(ВидДокумента, "ГруппаИсполнителейСогласованияПоУмолчанию") Тогда
					ВидДокумента = СтрЗаменить(ВидДокумента, "ГруппаИсполнителейСогласованияПоУмолчанию", "");
					НастройкаГруппаИсполнителейСогласованияПоУмолчанию = Истина;
				КонецЕсли;
				Если СтрЗаканчиваетсяНа(ВидДокумента, "СогласованиеПоУмолчанию") Тогда
					ВидДокумента = СтрЗаменить(ВидДокумента, "СогласованиеПоУмолчанию", "");
					НастройкаСогласованиеПоУмолчанию = Истина;
				КонецЕсли;
				
				Если Не СтруктураНастроек.Свойство(ВидДокумента) Тогда
					СтруктураНастроек.Вставить(ВидДокумента, Новый Структура);
				КонецЕсли;
				
				Если НастройкаГруппаИсполнителейСогласованияПоУмолчанию Тогда
					СтруктураНастроек[ВидДокумента].Вставить("ГруппаИсполнителейСогласованияПоУмолчанию", ВыборкаДетали.Значение);
				ИначеЕсли НастройкаСогласованиеПоУмолчанию Тогда
					СтруктураНастроек[ВидДокумента].Вставить("СогласованиеПоУмолчанию", ВыборкаДетали.Значение);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.уатНастройкиСогласований.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ОбъектНастроек;
		МенеджерЗаписи.Настройки = Новый ХранилищеЗначения(СтруктураНастроек);
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура исправляет флаги СуммаВключаетНДС, УчитыватьНДС в существующих документах
// РемонтныйЛист с видом ремонта в собственной ремонтной зоне
Процедура ЗаполнитьУчетНДСДокументовСобственнойРемЗоны_2_2_24_6() Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатРемонтныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.РемЗона)
	|	И (уатРемонтныйЛист.СуммаВключаетНДС
	|			ИЛИ уатРемонтныйЛист.УчитыватьНДС)
	|	И НЕ уатРемонтныйЛист.ПометкаУдаления";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОбъект.СуммаВключаетНДС = Ложь;
		ДокОбъект.УчитыватьНДС = Ложь;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новые ресурсы в регистре сведений уатСведенияОКонтрагентах_уэ
Процедура ЗаполнитьСведенияОПеревозчиках_2_2_24_7() Экспорт 
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатСведенияОКонтрагентах_уэ.Контрагент КАК Контрагент,
	|	уатСведенияОКонтрагентах_уэ.Перевозчик КАК Перевозчик,
	|	уатСведенияОКонтрагентах_уэ.Рейтинг КАК Рейтинг,
	|	уатСведенияОКонтрагентах_уэ.Услуга КАК Услуга,
	|	уатСведенияОКонтрагентах_уэ.КодАТИ КАК КодАТИ,
	|	уатСведенияОКонтрагентах_уэ.РедактированиеРасходов КАК РедактированиеРасходов,
	|	уатСведенияОКонтрагентах_уэ.РедактированиеПоступленийУслуг КАК РедактированиеПоступленийУслуг,
	|	уатСведенияОКонтрагентах_уэ.РедактированиеСчетовНаОплату КАК РедактированиеСчетовНаОплату,
	|	уатСведенияОКонтрагентах_уэ.СозданиеПроизвольныхПоступленийУслуг КАК СозданиеПроизвольныхПоступленийУслуг
	|ИЗ
	|	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	|ГДЕ
	|	уатСведенияОКонтрагентах_уэ.Перевозчик = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.уатСведенияОКонтрагентах_уэ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.РедактированиеРасходов) Тогда
			МенеджерЗаписи.РедактированиеРасходов = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.РедактированиеПоступленийУслуг) Тогда
			МенеджерЗаписи.РедактированиеПоступленийУслуг = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.РедактированиеСчетовНаОплату) Тогда
			МенеджерЗаписи.РедактированиеСчетовНаОплату = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено;
		КонецЕсли; 
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_на_версию_2_2_25

// Процедура обновляет настройки MultiGo 
//
Процедура ОбновитьMultiGo_2_2_25_2() Экспорт 
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить("minRefuelLevel");
	МассивПараметров.Добавить("minTankCapacity");
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("МассивПараметров", МассивПараметров);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатТСНастройкиMultiGo.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатТС.НастройкиMultiGo КАК уатТСНастройкиMultiGo
	               |ГДЕ
	               |	уатТСНастройкиMultiGo.ПараметрAPI В(&МассивПараметров)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатТСНастройкиMultiGo.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		МассивДляУдаления = Новый Массив();
		Для Каждого ТекСтрока Из СпрОбъект.НастройкиMultiGo Цикл 
			Если ТекСтрока.ПараметрAPI = "minRefuelLevel"
				ИЛИ ТекСтрока.ПараметрAPI = "minTankCapacity" Тогда 
				ЕстьИзменения = Истина; 
				МассивДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			СпрОбъект.НастройкиMultiGo.Удалить(ТекСтрока);
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит значения констант уатИспользоватьШтрихкодирование<ИмяДокумента>
// в константу уатНастройкиШтрихкодированияОбъектов
Процедура ОбновитьНастройкиШтрихкодированияОбъектов_2_2_25_2() Экспорт 
	
	СтруктураНастройки = Константы.уатНастройкиШтрихкодированияОбъектов.Получить().Получить();
	Если СтруктураНастройки = Неопределено Тогда
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("уатВнутреннееПеремещение",     Ложь);
		СтруктураНастройки.Вставить("уатВозвратТоваров",            Ложь);
		СтруктураНастройки.Вставить("уатВыдачаРасходныхМатериалов", Ложь);
		СтруктураНастройки.Вставить("уатЗаказГрузоотправителя",     Константы.УдалитьуатИспользоватьШтрихкодированиеЗаказовНаТС_уэ.Получить());
		СтруктураНастройки.Вставить("уатЗаявкаНаРемонт",            Ложь);
		СтруктураНастройки.Вставить("уатИнвентаризацияТоваров",     Ложь);
		СтруктураНастройки.Вставить("уатОприходованиеТоваров",      Ложь);
		СтруктураНастройки.Вставить("уатПеремещениеТоваров",        Ложь);
		СтруктураНастройки.Вставить("уатПоступлениеТоваровУслуг",   Ложь);
		СтруктураНастройки.Вставить("уатПутевойЛист",               Константы.УдалитьуатИспользоватьШтрихкодированиеПутевыхЛистов.Получить());
		СтруктураНастройки.Вставить("уатРемонтныйЛист",             Ложь);
		СтруктураНастройки.Вставить("уатСписаниеТоваров",           Ложь);
		
		Константы.уатНастройкиШтрихкодированияОбъектов.Установить(Новый ХранилищеЗначения(СтруктураНастройки));
	КонецЕсли;
		
КонецПроцедуры 

// Процедура создает и заполняет предопределеные элементы в справочнике Драйверы оборудования
//
Процедура ОбновитьПоставляемыеДрайвераПринтераЭтикеток_2_2_25_4() Экспорт
	
	ОбновлениеИнформационнойБазыБПО.ОбновитьПоставляемыеДрайвера();
	ОбновлениеИнформационнойБазыБПО.ОбновитьСправочникДрайвера();
	ОбновлениеИнформационнойБазыБПО.ОбновитьПодключаемоеОборудование();
	ОбновлениеИнформационнойБазыБПО.ОбновитьШаблоныЭтикетокИЦенников();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

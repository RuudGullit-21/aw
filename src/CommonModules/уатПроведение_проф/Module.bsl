////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции обеспечения проведения
// Вариант поставки ПРОФ
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

// Функция выполняет формирование таблицы партий для списания билетов
//
// Параметры:
//  ТаблицаБилетов		 - 	 - таблица билетов для которой необходимо получить списываемые партии
//  	должно содержать 3 колонки: билет, списываемое количество, склад с которого выполняется
//  	списание
//  СпособСписанияПартий - 	 - способ списания партий: фило, либо, по средней - значение перечисления
//  МоментВремени		 - 	 - Момент времени на который получаются остатки партий
// 
// Возвращаемое значение:
//  Таблица - списываемых партий в формате: билет, склад, партия,  количество
//
Функция ПолучитьТаблицуПартийБилетовДляСписания(ТаблицаБилетов, СпособСписанияПартий, МоментВремени = Неопределено) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремТаб.Билет,
	|	ВремТаб.Количество,
	|	ВремТаб.Склад
	|ПОМЕСТИТЬ ТаблицаБилетов
	|ИЗ
	|	&ТаблицаПараметр КАК ВремТаб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаБилетов.Билет,
	|	ТаблицаБилетов.Склад,
	|	СУММА(ТаблицаБилетов.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаБилетовГруппировка
	|ИЗ
	|	ТаблицаБилетов КАК ТаблицаБилетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБилетов.Билет,
	|	ТаблицаБилетов.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	мЗапрос.УстановитьПараметр("ТаблицаПараметр", ТаблицаБилетов);
	Если МоментВремени = Неопределено тогда 
		мЗапрос.УстановитьПараметр("МоментВремени", Дата('00010101'));
	Иначе
		мЗапрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;
		
	Если СпособСписанияПартий = Перечисления.СпособыОценки.ПоСредней тогда
		мЗапрос.Текст = мЗапрос.Текст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Билеты.Билет,
		|	Билеты.Количество,
		|	Билеты.Склад
		|ИЗ
		|	ТаблицаБилетовГруппировка КАК Билеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатБилетыНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Склад
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб)
		|					И Билет В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Билет
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб
		|						)) КАК уатБилетыНаСкладахОстатки
		|		ПО Билеты.Склад = уатБилетыНаСкладахОстатки.Склад
		|			И Билеты.Билет = уатБилетыНаСкладахОстатки.Билет
		|;";
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		тблПартий = МассивРезультатов[2].Выгрузить();
		тблПартий.Колонки.Добавить("Партия", Метаданные.РегистрыНакопления.уатБилетыНаСкладах.Измерения.Партия.Тип);
		
		Возврат тблПартий;
		
	Иначе
		мЗапрос.Текст = мЗапрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Билеты.Билет,
		|	Билеты.Склад,
		|	Билеты.Количество,
		|	уатБилетыНаСкладахОстатки.Партия КАК Партия,
		|	ЕСТЬNULL(уатБилетыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоПартия,
		|	ЕСТЬNULL(уатБилетыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОсталось
		|ИЗ
		|	ТаблицаБилетовГруппировка КАК Билеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатБилетыНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Склад
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб)
		|					И Билет В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							мТаб.Билет
		|						ИЗ
		|							ТаблицаБилетов КАК мТаб)) КАК уатБилетыНаСкладахОстатки
		|		ПО Билеты.Билет = уатБилетыНаСкладахОстатки.Билет
		|			И Билеты.Склад = уатБилетыНаСкладахОстатки.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатБилетыНаСкладахОстатки.Партия.МоментВремени";

		Если СпособСписанияПартий = Перечисления.СпособыОценки.ЛИФО Тогда
			мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "уатБилетыНаСкладахОстатки.Партия.МоментВремени",
				"уатБилетыНаСкладахОстатки.Партия.МоментВремени Убыв");
		КонецЕсли;
		
        МассивРезультатов = мЗапрос.ВыполнитьПакет();
		
		ТаблицаОстатковПартий = МассивРезультатов[2].Выгрузить();
		ТаблицаПартий = Новый ТаблицаЗначений();
		ТаблицаПартий.Колонки.Добавить("Склад"       , Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаПартий.Колонки.Добавить("Билет", Новый ОписаниеТипов("СправочникСсылка.уатБилеты"));
		ТаблицаПартий.Колонки.Добавить("Партия"      , Метаданные.РегистрыНакопления.уатБилетыНаСкладах.Измерения.Партия.Тип);
		ТаблицаПартий.Колонки.Добавить("Количество"  , Новый ОписаниеТипов("Число"),Новый КвалификаторыЧисла(15,2));
				
		Для каждого ТекСтрокаТабБилетов ИЗ ТаблицаБилетов Цикл
			ОсталосьСписать = ТекСтрокаТабБилетов.Количество;	
			Для каждого ТекСтрокаОстатковПартий ИЗ ТаблицаОстатковПартий Цикл
				Если ОсталосьСписать = 0 ТОгда
					Прервать;
				КонецЕсли;
				Если ТекСтрокаТабБилетов.Склад = ТекСтрокаОстатковПартий.Склад 
				   И ТекСтрокаТабБилетов.Билет = ТекСтрокаОстатковПартий.Билет
				   И ТекСтрокаОстатковПартий.КоличествоОсталось > 0 тогда
					СписатьКоличество = Мин(ТекСтрокаОстатковПартий.КоличествоОсталось, ОсталосьСписать);
					Если СписатьКоличество = 0 тогда 
						Продолжить;
					КонецЕсли;
					НовСтрока = ТаблицаПартий.Добавить();
					НовСтрока.Склад        = ТекСтрокаОстатковПартий.Склад;
					НовСтрока.Билет = ТекСтрокаОстатковПартий.Билет;
					НовСтрока.Партия       = ТекСтрокаОстатковПартий.Партия;
					НовСтрока.Количество   = СписатьКоличество;
					
					ОсталосьСписать = ОсталосьСписать - СписатьКоличество;
					ТекСтрокаОстатковПартий.КоличествоОсталось  = ТекСтрокаОстатковПартий.КоличествоОсталось - СписатьКоличество;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОсталосьСписать > 0 тогда
				НовСтрока = ТаблицаПартий.Добавить();
				НовСтрока.Склад      = ТекСтрокаТабБилетов.Склад;
				НовСтрока.Билет      = ТекСтрокаТабБилетов.Билет;
				НовСтрока.Партия     = Неопределено;
				НовСтрока.Количество = ОсталосьСписать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТаблицаПартий;
	КонецЕсли;

КонецФункции

#Область ФормированиеДвиженийРегистров

// Выполняет движения регистра сведений Местонахождение ТС
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьМестонахождениеТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаМестонахожденияТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаМестонахожденияТС;
	
	Если Отказ ИЛИ ТаблицаМестонахожденияТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатМестонахождениеТС;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаМестонахожденияТС);

КонецПроцедуры

// Выполняет движения регистра сведений Прейскуранты ТС
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьПрейскурантыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПрейскурантыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрейскурантыТС;
	
	Если Отказ ИЛИ ТаблицаПрейскурантыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатПрейскурантыТС;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаПрейскурантыТС);

КонецПроцедуры

// Выполняет движения регистра сведений Тарифы ЗП сотрудников
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьТарифыЗП(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаТарифыЗП = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТарифыЗП;
	
	Если Отказ ИЛИ ТаблицаТарифыЗП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатТарифыСотрудников;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаТарифыЗП);

КонецПроцедуры

// Выполняет движения регистра накопления Движение денежных сресдств
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьДвижениеДДС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвижениеДС;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатДвижениеДС;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления Выработка сотрудников
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВзаиморасчетов;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВзаиморасчетыСКонтрагентами;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления Выработка сотрудников
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьПричиныСписанияАгрегатов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ПричиныСписанияАгрегатов;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатСписаниеАгрегатов;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления Заявки на расходование ДС
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьЗаявкиНаРасходованиеДС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаявокНаРасходованиеДС;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатЗаявкиНаРасходованиеДС;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра сведений План работы ТС
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьПланРаботыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПланаРаботыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланаРаботыТС;
	
	Если Отказ ИЛИ ТаблицаПланаРаботыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоЗаправкамГСМ = Движения.уатПланРаботыТС;
	ДвиженияОборотыПоЗаправкамГСМ.Записывать = Истина;
	ДвиженияОборотыПоЗаправкамГСМ.Загрузить(ТаблицаПланаРаботыТС);

КонецПроцедуры

// Выполняет движения регистра накопления Факт работы ТС
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьФактРаботыТС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаФактаРаботыТС = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФактаРаботыТС;
	
	Если Отказ ИЛИ ТаблицаФактаРаботыТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоЗаправкамГСМ = Движения.уатФактРаботыТС;
	ДвиженияОборотыПоЗаправкамГСМ.Записывать = Истина;
	ДвиженияОборотыПоЗаправкамГСМ.Загрузить(ТаблицаФактаРаботыТС);

КонецПроцедуры

// Выполняет движения регистра накопления Сводные параметры выработки
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьСводныеПараметрыВыработки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаСводныеПараметрыВыработки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСводныеПараметрыВыработки;
	
	Если Отказ ИЛИ ТаблицаСводныеПараметрыВыработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОборотыПоЗаправкамГСМ = Движения.уатСводныеПараметрыВыработки;
	ДвиженияОборотыПоЗаправкамГСМ.Записывать = Истина;
	ДвиженияОборотыПоЗаправкамГСМ.Загрузить(ТаблицаСводныеПараметрыВыработки);

КонецПроцедуры

// Выполняет движения регистра накопления Выручка
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьВыручку(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыручка;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатВыручка;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления Билеты на складах
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьБилетыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	мТаблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБилетыНаСкладах;
	
	Если Отказ ИЛИ мТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработка = Движения.уатБилетыНаСкладах;
	ДвиженияВыработка.Записывать = Истина;
	ДвиженияВыработка.Загрузить(мТаблица);

КонецПроцедуры

// Выполняет движения регистра накопления выработка агрегатов
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьВыработкуАгрегатов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыработкиАгрегатов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПараметровВыработкиАгрегатов;
	
	Если Отказ ИЛИ ТаблицаВыработкиАгрегатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияВыработкиАгрегатов = Движения.уатВыработкаАгрегатов;
	ДвиженияВыработкиАгрегатов.Записывать = Истина;
	ДвиженияВыработкиАгрегатов.Загрузить(ТаблицаВыработкиАгрегатов);

КонецПроцедуры

// Выполняет движения регистра сведений уатГрафикРаботыРесурсов.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьПланированиеРемонтов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПланированиеРемонтов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланированиеРемонтов;
	
	Если Отказ ИЛИ ТаблицаПланированиеРемонтов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗапасы = Движения.уатГрафикРаботыРесурсов;
	ДвиженияЗапасы.Записывать = Истина;
	ДвиженияЗапасы.Загрузить(ТаблицаПланированиеРемонтов);
	
КонецПроцедуры

// Выполняет движения регистра накопления уатОстаткиДС.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьОстаткиДС(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОстаткиДС;
	
	Если Отказ ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРегистр = Движения.уатОстаткиДС;
	ДвиженияРегистр.Записывать = Истина;
	ДвиженияРегистр.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Выполняет движения регистра накопления уатОстаткиДСУПодотчетныхЛиц.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьОстаткиДСУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОстаткиДСУПодотчетныхЛиц;
	
	Если Отказ ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРегистр = Движения.уатОстаткиДСУПодотчетныхЛиц;
	ДвиженияРегистр.Записывать = Истина;
	ДвиженияРегистр.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Выполняет движения регистра накопления уатПлатежныйКалендарь.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлатежныйКалендарь;
	
	Если Отказ ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРегистр = Движения.уатПлатежныйКалендарь;
	ДвиженияРегистр.Записывать = Истина;
	ДвиженияРегистр.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Выполняет движения регистра сведений уатСтатусыСопроводительныхДокументов.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьСтатусыСопроводительныхДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтатусыСопроводительныхДокументов;
	
	Если Отказ ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРегистр = Движения.уатСтатусыСопроводительныхДокументов;
	ДвиженияРегистр.Записывать = Истина;
	ДвиженияРегистр.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Выполняет движения регистра сведений уатДатыОбработкиДокументов.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьДатыОбработкиДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДатыОбработкиДокументов;
	
	Если НЕ Отказ И ТаблицаДвижения.Количество() > 0 Тогда
		ДвиженияРегистр = Движения.уатДатыОбработкиДокументов;
		ДвиженияРегистр.Записывать = Истина;
		ДвиженияРегистр.Загрузить(ТаблицаДвижения);
	КонецЕсли;
	
	// Добавляются движения по другим регистраторам, если СД указан не в текущем документе, но связан с ним
	Если ДополнительныеСвойства.Свойство("ТаблицаДатыОбработкиДокументовДоп") 
		И НЕ Отказ И ДополнительныеСвойства.ТаблицаДатыОбработкиДокументовДоп.Количество() > 0 Тогда
		
		мсвРегистраторы = Новый Массив;
		Для Каждого ТекСтрока Из ДополнительныеСвойства.ТаблицаДатыОбработкиДокументовДоп Цикл
			Если мсвРегистраторы.Найти(ТекСтрока.Регистратор) = Неопределено Тогда
				мсвРегистраторы.Добавить(ТекСтрока.Регистратор);
			КонецЕсли;
		КонецЦикла;
		
		НЗДатыОбработки = РегистрыСведений.уатДатыОбработкиДокументов.СоздатьНаборЗаписей();
		Для Каждого ТекРегистратор Из мсвРегистраторы Цикл
			НЗДатыОбработки.Отбор.Регистратор.Установить(ТекРегистратор);
			
			Если ТекРегистратор.Проведен Тогда
				НЗДатыОбработки.Прочитать();
				Для Каждого ТекСтрока Из ДополнительныеСвойства.ТаблицаДатыОбработкиДокументовДоп Цикл
					Если ТекСтрока.Регистратор <> ТекРегистратор Тогда
						Продолжить;
					КонецЕсли;
					
					флЕстьЗаписьСД = Ложь;
					Для Каждого ТекЗапись Из НЗДатыОбработки Цикл
						Если ТекЗапись.СопроводительныйДокумент = ТекСтрока.СопроводительныйДокумент Тогда
							флЕстьЗаписьСД = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флЕстьЗаписьСД Тогда
						ЗаписьСД = ТекЗапись;
					Иначе
						ЗаписьСД = НЗДатыОбработки.Добавить();
					КонецЕсли;
					
					ЗаписьСД.Регистратор               = ТекРегистратор;
					ЗаписьСД.СопроводительныйДокумент  = ТекСтрока.СопроводительныйДокумент;
					ЗаписьСД.ПлановаяДатаОбработки     = ТекСтрока.ПлановаяДатаОбработки;
					ЗаписьСД.КоличествоДнейНаОбработку = ТекСтрока.КоличествоДнейНаОбработку;
				КонецЦикла;
			КонецЕсли;
			
			НЗДатыОбработки.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения регистра сведений уатВыработкаПоМаршрутнымЛистам_уэ
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьВыработкуСотрудниковПоМаршрутнымЛистам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыработкаСотрудниковПоМаршрутнымЛистам;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСостояние = Движения.уатВыработкаСотрудниковПоМаршрутнымЛистам;
	ДвиженияСостояние.Записывать = Истина;
	ДвиженияСостояние.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

// Выполняет движения регистра расчета Основные начисления
//
Процедура ОтразитьНачисленияФизическимЛицам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаНачислений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачисленияФизическимЛицам;
	
	Если Отказ ИЛИ ТаблицаНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНачисления = Движения.уатНачисленияФизическимЛицам;
	ДвиженияНачисления.Записывать = Истина;
	ДвиженияНачисления.Загрузить(ТаблицаНачислений);

КонецПроцедуры

// Выполняет движения регистра накопления уатТоварыВЯчейках
//
Процедура ОтразитьТоварыВЯчейках(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаНачислений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыВЯчейках;
	
	Если Отказ ИЛИ ТаблицаНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНачисления = Движения.уатТоварыВЯчейках;
	ДвиженияНачисления.Записывать = Истина;
	ДвиженияНачисления.Загрузить(ТаблицаНачислений);

КонецПроцедуры

// Выполняет движения регистра сведений уатДатыДвиженияТоваровНаСкладах.
//
// Параметры:
//  ДополнительныеСвойства	 - 	 - 
//  Движения				 - 	 - 
//  Отказ					 - 	 - 
//
Процедура ОтразитьДатыДвиженияТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = Неопределено;
	уатЗащищенныеФункцииСервер_проф.ПолучитьДатыДвиженияТоваровНаСкладах(ТаблицаДвижения, ДополнительныеСвойства);
	
	Если Отказ ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижения.Колонки.ВидДвижения.Имя = "ВидДвиженияНакопления";
	ТаблицаДвижения.Колонки.Добавить("ВидДвижения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход"));
	Для Каждого ТекСтрока Из ТаблицаДвижения Цикл	
		ТекСтрока.ВидДвижения = ?(ТекСтрока.ВидДвиженияНакопления = ВидДвиженияНакопления.Приход,
			Перечисления.ВидыДвиженийПриходРасход.Приход, Перечисления.ВидыДвиженийПриходРасход.Расход);
	КонецЦикла;
	ТаблицаДвижения.Колонки.Удалить("ВидДвиженияНакопления");
		
	ДвиженияРегистр = Движения.уатДатыДвиженияТоваровНаСкладах;
	ДвиженияРегистр.Записывать = Истина;
	ДвиженияРегистр.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеДоходовИРасходов

// Получает таблицу остатков доходов и расходов для распределения по ТС и аналитикам и формирования фин. результата
//
// Параметры:
//  ДокументСсылка				 - 	 - 
//  ИсключатьДвиженияДокумента	 - 	 - если Истина, то движения текущего документа будут исключены из остатков -
//  	это необходимо в случае проведения из формы документа, поскольку в этом случае распределение производится
//  	до начала транзакции проведения и движения текущего документа еще есть в базе
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьТаблицуДоходыРасходы(ДокументСсылка, ИсключатьДвиженияДокумента = Ложь) Экспорт
	
	ЗапросОстатки = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДоходыОстатки.СтатьяДоходов КАК Статья,
	|	уатДоходыОстатки.Организация КАК Организация,
	|	уатДоходыОстатки.Подразделение КАК Подразделение,
	|	уатДоходыОстатки.Колонна КАК Колонна,
	|	уатДоходыОстатки.ТС КАК ТС,
	|	уатДоходыОстатки.Заказ КАК Заказ,
	|	уатДоходыОстатки.Менеджер КАК Менеджер,
	|	уатДоходыОстатки.Контрагент КАК Контрагент,
	|	уатДоходыОстатки.Маршрут КАК Маршрут,
	|	уатДоходыОстатки.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатДоходыОстатки.ВидПеревозки КАК ВидПеревозки,
	|	уатДоходыОстатки.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатДоходыОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	уатДоходыОстатки.СуммаРеглОстаток КАК СуммаРегл,
	|	уатДоходыОстатки.СуммаНДСОстаток КАК СуммаНДС,
	|	уатДоходыОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
	|	ИСТИНА КАК ЭтоДоходы
	|ИЗ
	|	РегистрНакопления.уатДоходы.Остатки(&ДатаКон, Организация = &Организация) КАК уатДоходыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРасходыОстатки.СтатьяРасходов,
	|	уатРасходыОстатки.Организация,
	|	уатРасходыОстатки.Подразделение,
	|	уатРасходыОстатки.Колонна,
	|	уатРасходыОстатки.ТС,
	|	уатРасходыОстатки.Заказ,
	|	уатРасходыОстатки.Менеджер,
	|	уатРасходыОстатки.Контрагент,
	|	уатРасходыОстатки.Маршрут,
	|	уатРасходыОстатки.ОбъектСтроительства,
	|	уатРасходыОстатки.ВидПеревозки,
	|	уатРасходыОстатки.НаправлениеПеревозки,
	|	уатРасходыОстатки.СуммаУпрОстаток,
	|	уатРасходыОстатки.СуммаРеглОстаток,
	|	уатРасходыОстатки.СуммаНДСОстаток,
	|	уатРасходыОстатки.СуммаНДСУпрОстаток,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.уатРасходы.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И (СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.уатСтатьиРасходов.ПустаяСсылка)
	|					ИЛИ НЕ СтатьяРасходов.РаспределятьНаРБП)) КАК уатРасходыОстатки");
	
	Если ИсключатьДвиженияДокумента Тогда
		ЗапросОстатки.Текст = СтрЗаменить(ЗапросОстатки.Текст, "РАЗРЕШЕННЫЕ", "");
		
		ЗапросОстатки.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тбл.Статья,
		|	тбл.Организация,
		|	тбл.Подразделение,
		|	тбл.Колонна,
		|	тбл.ТС,
		|	тбл.Заказ,
		|	тбл.Менеджер,
		|	тбл.Контрагент,
		|	тбл.Маршрут,
		|	тбл.ОбъектСтроительства,
		|	тбл.ВидПеревозки,
		|	тбл.НаправлениеПеревозки,
		|	СУММА(тбл.СуммаУпр) КАК СуммаУпр,
		|	СУММА(тбл.СуммаРегл) КАК СуммаРегл,
		|	СУММА(тбл.СуммаНДС) КАК СуммаНДС,
		|	СУММА(тбл.СуммаНДСУпр) КАК СуммаНДСУпр,
		|	тбл.ЭтоДоходы
		|ИЗ
		|("
		+ ЗапросОстатки.Текст +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" + 
		"
		|ВЫБРАТЬ
		|	уатДоходыДвижения.СтатьяДоходов,
		|	уатДоходыДвижения.Организация,
		|	уатДоходыДвижения.Подразделение,
		|	уатДоходыДвижения.Колонна,
		|	уатДоходыДвижения.ТС,
		|	уатДоходыДвижения.Заказ,
		|	уатДоходыДвижения.Менеджер,
		|	уатДоходыДвижения.Контрагент,
		|	уатДоходыДвижения.Маршрут,
		|	уатДоходыДвижения.ОбъектСтроительства,
		|	уатДоходыДвижения.ВидПеревозки,
		|	уатДоходыДвижения.НаправлениеПеревозки,
		|	уатДоходыДвижения.СуммаУпрРасход,
		|	уатДоходыДвижения.СуммаРеглРасход,
		|	уатДоходыДвижения.СуммаНДСРасход,
		|	уатДоходыДвижения.СуммаНДСУпрРасход,
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.уатДоходы.Обороты(,, Регистратор) КАК уатДоходыДвижения
		|ГДЕ
		|	уатДоходыДвижения.Регистратор = &ДокСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатРасходыДвижения.СтатьяРасходов,
		|	уатРасходыДвижения.Организация,
		|	уатРасходыДвижения.Подразделение,
		|	уатРасходыДвижения.Колонна,
		|	уатРасходыДвижения.ТС,
		|	уатРасходыДвижения.Заказ,
		|	уатРасходыДвижения.Менеджер,
		|	уатРасходыДвижения.Контрагент,
		|	уатРасходыДвижения.Маршрут,
		|	уатРасходыДвижения.ОбъектСтроительства,
		|	уатРасходыДвижения.ВидПеревозки,
		|	уатРасходыДвижения.НаправлениеПеревозки,
		|	уатРасходыДвижения.СуммаУпрРасход,
		|	уатРасходыДвижения.СуммаРеглРасход,
		|	уатРасходыДвижения.СуммаНДСРасход,
		|	уатРасходыДвижения.СуммаНДСУпрРасход,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.уатРасходы.Обороты(,, Регистратор) КАК уатРасходыДвижения
		|ГДЕ
		|	уатРасходыДвижения.Регистратор = &ДокСсылка"
		+ ") КАК тбл
		|
		|СГРУППИРОВАТЬ ПО
		|	тбл.Статья,
		|	тбл.Организация,
		|	тбл.Подразделение,
		|	тбл.Колонна,
		|	тбл.ТС,
		|	тбл.Заказ,
		|	тбл.Менеджер,
		|	тбл.Контрагент,
		|	тбл.Маршрут,
		|	тбл.ОбъектСтроительства,
		|	тбл.ВидПеревозки,
		|	тбл.НаправлениеПеревозки,
		|	тбл.ЭтоДоходы";
		ЗапросОстатки.УстановитьПараметр("ДокСсылка", ДокументСсылка.Ссылка);
	КонецЕсли;
	
	ЗапросОстатки.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(ДокументСсылка.Дата), ВидГраницы.Включая));
	ЗапросОстатки.УстановитьПараметр("Организация", ДокументСсылка.Организация);
	
	ТаблицаИсходная = ЗапросОстатки.Выполнить().Выгрузить();
	
	Возврат ТаблицаИсходная;
КонецФункции

#КонецОбласти

#Область ПлатежныйКалендарь

// Процедура выполняет установку даты платежа по заказам при использовании отсрочки платежей
//
// Параметры:
//  Источник - 	 - 
//
Процедура УстановитьДатуПлатежа(Источник) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь") Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВалютаУпрУчета",    Константы.ВалютаУправленческогоУчета.Получить());
	ДопПараметры.Вставить("МноговалютныйУчет", флМноговалютныйУчет);
	
	мсвЗаказы = Новый Массив;
	мсвДоговоры = Новый Массив;
	тблЗаказыДоговоры = Новый ТаблицаЗначений;
	тблЗаказыДоговоры.Колонки.Добавить("ЗаказНаТС");
	тблЗаказыДоговоры.Колонки.Добавить("Договор");
	
	флНакладная = Ложь;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда
		мсвЗаказы.Добавить(Источник.Ссылка);
		мсвДоговоры.Добавить(Источник.ДоговорКонтрагента);
		НоваяСтрока = тблЗаказыДоговоры.Добавить();
		НоваяСтрока.ЗаказНаТС = Источник.Ссылка;
		НоваяСтрока.Договор   = Источник.ДоговорКонтрагента;
			
		Для Каждого ТекРасход Из Источник.Расходы Цикл
			мсвДоговоры.Добавить(ТекРасход.Договор);
			НоваяСтрока = тблЗаказыДоговоры.Добавить();
			НоваяСтрока.ЗаказНаТС = Источник.Ссылка;
			НоваяСтрока.Договор   = ТекРасход.Договор;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатПоступлениеТоваровУслуг") Тогда
		мсвДоговоры.Добавить(Источник.ДоговорКонтрагента);
		Для Каждого ТекСтрока Из Источник.Услуги Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) И мсвЗаказы.Найти(ТекСтрока.ЗаказНаТС) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекСтрока.ЗаказНаТС);
				НоваяСтрока = тблЗаказыДоговоры.Добавить();
				НоваяСтрока.ЗаказНаТС = ТекСтрока.ЗаказНаТС;
				НоваяСтрока.Договор   = Источник.ДоговорКонтрагента;
			КонецЕсли;
		КонецЦикла;
		флНакладная = Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатРеализацияУслуг") Тогда
		мсвДоговоры.Добавить(Источник.ДоговорКонтрагента);
		Для Каждого ТекСтрока Из Источник.Услуги Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Заказ) И мсвЗаказы.Найти(ТекСтрока.Заказ) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекСтрока.Заказ);
				НоваяСтрока = тблЗаказыДоговоры.Добавить();
				НоваяСтрока.ЗаказНаТС = ТекСтрока.Заказ;
				НоваяСтрока.Договор   = Источник.ДоговорКонтрагента;
			КонецЕсли;
		КонецЦикла;
		флНакладная = Истина;
		
	Иначе //маршрутный лист
		Для Каждого ТекСтрока Из Источник.Заказы Цикл
			Если мсвЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
				мсвДоговоры.Добавить(ТекСтрока.ЗаказГрузоотправителя.ДоговорКонтрагента);
				НоваяСтрока = тблЗаказыДоговоры.Добавить();
				НоваяСтрока.ЗаказНаТС = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрока.Договор   = ТекСтрока.ЗаказГрузоотправителя.ДоговорКонтрагента;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекРасход Из Источник.Расходы Цикл
			Если мсвДоговоры.Найти(ТекРасход.Договор) = Неопределено Тогда
				мсвДоговоры.Добавить(ТекРасход.Договор);
				НоваяСтрока = тблЗаказыДоговоры.Добавить();
				НоваяСтрока.ЗаказНаТС = ТекРасход.ЗаказНаТС;
				НоваяСтрока.Договор   = ТекРасход.Договор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// проверяем необходимые условия для выполнения установки даты платежа
	флОК = Ложь;
	Для Каждого ТекДоговор Из мсвДоговоры Цикл
		Если (ТекДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС
			ИЛИ ТекДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ТекДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			
			флОК = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ флОК Тогда
		Возврат;
	КонецЕсли;
	
	Если флНакладная И мсвЗаказы.Количество() = 0 Тогда
		ТекстСообщОшибка =
			"Автоматический расчет даты платежа не выполнен: в строках табличной части ""Услуги"" не заполнены Заказы на ТС.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
		Возврат;
	КонецЕсли;
	
	// получаем движения по Платежному календарю, по входящим Заказам на ТС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(уатПлатежныйКалендарь.Регистратор) КАК Регистратор,
	|	уатПлатежныйКалендарь.Контрагент КАК Контрагент,
	|	уатПлатежныйКалендарь.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПлатежныйКалендарь.ЗаказНаТС КАК ЗаказНаТС,
	|	уатПлатежныйКалендарь.ПолучательУслуг КАК ПолучательУслуг,
	|	уатПлатежныйКалендарь.Валюта КАК Валюта,
	|	уатПлатежныйКалендарь.Сделка КАК Сделка,
	|	уатПлатежныйКалендарь.ЭтапОплаты КАК ЭтапОплаты,
	|	СУММА(уатПлатежныйКалендарь.СуммаПриход) КАК СуммаПриход,
	|	СУММА(уатПлатежныйКалендарь.СуммаПриходУпр) КАК СуммаПриходУпр
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь КАК уатПлатежныйКалендарь
	|ГДЕ
	|	уатПлатежныйКалендарь.ЗаказНаТС В(&мсвЗаказы)
	|	И (уатПлатежныйКалендарь.Регистратор ССЫЛКА Документ.уатРеализацияУслуг
	|			ИЛИ уатПлатежныйКалендарь.Регистратор ССЫЛКА Документ.уатПоступлениеТоваровУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежныйКалендарь.ЭтапОплаты,
	|	уатПлатежныйКалендарь.Сделка,
	|	уатПлатежныйКалендарь.Валюта,
	|	уатПлатежныйКалендарь.ПолучательУслуг,
	|	уатПлатежныйКалендарь.Контрагент,
	|	уатПлатежныйКалендарь.ЗаказНаТС,
	|	уатПлатежныйКалендарь.ДоговорКонтрагента");
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	тблДвиженияПоПлатежномуКалендарю = Запрос.Выполнить().Выгрузить();
	
	// получаем накладные с ручными датами платежей из Платежного календара
	ЗапросРучныеДатыПлатежей = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПлатежныйКалендарь.Регистратор.ДатаПлатежа КАК ДатаПлатежа,
	|	уатПлатежныйКалендарь.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПлатежныйКалендарь.ЗаказНаТС КАК ЗаказНаТС
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(, , Регистратор, ЗаказНаТС В (&мсвЗаказы)) КАК уатПлатежныйКалендарь
	|ГДЕ
	|	(уатПлатежныйКалендарь.Регистратор ССЫЛКА Документ.уатРеализацияУслуг
	|			ИЛИ уатПлатежныйКалендарь.Регистратор ССЫЛКА Документ.уатПоступлениеТоваровУслуг)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа УБЫВ");
	ЗапросРучныеДатыПлатежей.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	тблНакладныеПоЗаказуДоговору = ЗапросРучныеДатыПлатежей.Выполнить().Выгрузить();
	
	//// добавляем в таблицу накладных текущую накладную
	//Если флНакладная Тогда
	//	Источник.
	//	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
	//		НоваяНакл = тблНакладные.Добавить();
	//		НоваяНакл.Ссылка     = Источник.Ссылка;
	//		НоваяНакл.ЗаказНаТС  = ТекЗаказ.Ссылка;
	//		НоваяНакл.Договор    = Источник.ДоговорКонтрагента;
	//		Если флМноговалютныйУчет Тогда
	//			НоваяНакл.Валюта = Источник.ВалютаВзаиморасчетов;
	//		Иначе
	//			НоваяНакл.Валюта = Источник.ВалютаДокумента;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	мсвСообщенияОбОшибках = Новый Массив;
	
	Для Каждого ТекЗаказДоговор Из тблЗаказыДоговоры Цикл
		// Движения накладной по РН "Платежный календарь" используются для получения дат платежей
		мсвДвиженияПоЗаказуДоговору = тблДвиженияПоПлатежномуКалендарю.НайтиСтроки(
			Новый Структура("ЗаказНаТС, ДоговорКонтрагента", ТекЗаказДоговор.ЗаказНаТС, ТекЗаказДоговор.Договор));
		
		Если мсвДвиженияПоЗаказуДоговору.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		УдалитьЗаписиДатыПлатежей(мсвДвиженияПоЗаказуДоговору, ТекЗаказДоговор.ЗаказНаТС);
				
		// Если в одной из накладных дата платежа указана вручную, то считаем её датой платежа для всех накладных по этому заказу и договору
		ДатаПлатежаРучная = Неопределено;
		мсвНакладныеПоЗаказуДоговору = тблНакладныеПоЗаказуДоговору.НайтиСтроки(
			Новый Структура("ЗаказНаТС, ДоговорКонтрагента", ТекЗаказДоговор.ЗаказНаТС, ТекЗаказДоговор.Договор));
		Для Каждого ТекСтрокаНакладная Из мсвНакладныеПоЗаказуДоговору Цикл
			Если ЗначениеЗаполнено(ТекСтрокаНакладная.ДатаПлатежа) Тогда
				ДатаПлатежаРучная = ТекСтрокаНакладная.ДатаПлатежа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мсвДвиженияПоЗаказуДоговору Цикл
			ПараметрыПлатежа = ПолучитьДатуСрокПлатежаПоЗаказу(ТекСтрока, флНакладная, ДатаПлатежаРучная, мсвСообщенияОбОшибках);
			ДобавитьЗаписиДатыПлатежей(ТекСтрока, ПараметрыПлатежа);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекОшибка Из мсвСообщенияОбОшибках Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка);
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура распределяет таблицу платежного календаря для записи в РН по этапам графика оплаты Договора
//  При распределении учитываются уже выставленные ранее платежи (по другим накладным)
//  Лишняя сумма платежей не будет записана в РН "Платежный календарь", но в другие регистры (Взаиморасчеты) попадает
//
// Параметры:
//  ТаблицаПлатежныйКалендарь - ТаблицаЗначений с колонками, повторяющими структуру РН "Платежный календарь"
//  ДокументСсылка            - ссылка на Реализацию или Поступление
//
Процедура РаспределитьПлатежныйКалендарьПоГрафикуОплаты(ТаблицаПлатежныйКалендарь, ДокументСсылка) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументСсылка.Метаданные() = Метаданные.Документы.уатРеализацияУслуг
		ИЛИ ДокументСсылка.Метаданные() = Метаданные.Документы.уатПоступлениеТоваровУслуг Тогда
		
		ТаблицаПлатежныйКалендарьРез = ТаблицаПлатежныйКалендарь.СкопироватьКолонки();
		ТаблицаПлатежныйКалендарьРез.Колонки.Добавить("ЭтапОплаты");
		
		ЗапросПлатежиПоЗаказам = Новый Запрос(
		"ВЫБРАТЬ
		|	уатПлатежныйКалендарьОбороты.ЗаказНаТС КАК ЗаказНаТС,
		|	СУММА(уатПлатежныйКалендарьОбороты.СуммаПриходУпрОборот) КАК СуммаПриходУпр
		|ИЗ
		|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(
		|			, &МоментДокумента
		|			,
		|			,
		|			ДоговорКонтрагента = &ДоговорКонтрагента
		|				И ЗаказНаТС В (&мсвЗаказы)) КАК уатПлатежныйКалендарьОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	уатПлатежныйКалендарьОбороты.ЗаказНаТС");
		ЗапросПлатежиПоЗаказам.УстановитьПараметр("МоментДокумента", ДокументСсылка.МоментВремени());
		ЗапросПлатежиПоЗаказам.УстановитьПараметр("ДоговорКонтрагента", ДокументСсылка.ДоговорКонтрагента);
		ЗапросПлатежиПоЗаказам.УстановитьПараметр("мсвЗаказы", ТаблицаПлатежныйКалендарь.ВыгрузитьКолонку("ЗаказНаТС"));
		тблДолгПоЗаказам = ЗапросПлатежиПоЗаказам.Выполнить().Выгрузить();
		
		ЗапросУслугиПоЗаказам = Новый Запрос(
		"ВЫБРАТЬ
		|	уатПредоставленныеУслугиОбороты.ЗаказНаТС КАК ЗаказНаТС,
		|	уатПредоставленныеУслугиОбороты.Валюта КАК Валюта,
		|	СУММА(уатПредоставленныеУслугиОбороты.СуммаОборот) КАК Сумма,
		|	уатПредоставленныеУслугиОбороты.СуммаРеглОборот КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.уатПредоставленныеУслуги.Обороты(
		|			,
		|			&МоментДокумента,
		|			,
		|			ДоговорКонтрагента = &ДоговорКонтрагента
		|				И ЗаказНаТС В (&мсвЗаказы)) КАК уатПредоставленныеУслугиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	уатПредоставленныеУслугиОбороты.ЗаказНаТС,
		|	уатПредоставленныеУслугиОбороты.СуммаРеглОборот,
		|	уатПредоставленныеУслугиОбороты.Валюта");
		ЗапросУслугиПоЗаказам.УстановитьПараметр("МоментДокумента", ДокументСсылка.МоментВремени());
		ЗапросУслугиПоЗаказам.УстановитьПараметр("ДоговорКонтрагента", ДокументСсылка.ДоговорКонтрагента);
		ЗапросУслугиПоЗаказам.УстановитьПараметр("мсвЗаказы", ТаблицаПлатежныйКалендарь.ВыгрузитьКолонку("ЗаказНаТС"));
		тблУслугиПоЗаказам = ЗапросУслугиПоЗаказам.Выполнить().Выгрузить();
		
		ВалютаУпр  = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Для Каждого ТекСтрока Из ТаблицаПлатежныйКалендарь Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Регистратор.ДатаПлатежа) Тогда
				НоваяСтрокаРез = ТаблицаПлатежныйКалендарьРез.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, ТекСтрока);
				НоваяСтрокаРез.ЭтапОплаты = Справочники.уатЭтапыОплаты.ПроизвольнаяОплата;
			Иначе
				Если ТекСтрока.ДоговорКонтрагента.ГрафикОплаты.Количество() = 0 Тогда
					НоваяСтрокаРез = ТаблицаПлатежныйКалендарьРез.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, ТекСтрока);
				Иначе
					Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
						//СуммаУслугВсего = ТекСтрока.ЗаказНаТС.СуммаДокумента;
						СуммаУслугВсегоУпр  = 0;
						мсвСтрокиУслугиПоЗаказу = тблУслугиПоЗаказам.НайтиСтроки(Новый Структура("ЗаказНаТС", ТекСтрока.ЗаказНаТС));
						Для Каждого ТекСтрокаУслугиПоЗаказу Из мсвСтрокиУслугиПоЗаказу Цикл
							Если ТекСтрокаУслугиПоЗаказу.Валюта = ВалютаУпр Тогда
								СуммаУслугВсегоУпр = СуммаУслугВсегоУпр + ТекСтрокаУслугиПоЗаказу.Сумма;
							ИначеЕсли ВалютаРегл = ВалютаУпр Тогда
								СуммаУслугВсегоУпр = СуммаУслугВсегоУпр + ТекСтрокаУслугиПоЗаказу.СуммаРегл;
							Иначе
								СуммаУслугВсегоУпр = СуммаУслугВсегоУпр + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
									ТекСтрокаУслугиПоЗаказу.Сумма,
									ТекСтрокаУслугиПоЗаказу.Валюта, ВалютаУпр,
									ТекСтрока.ЗаказНаТС.Дата, ТекСтрока.ЗаказНаТС.Дата,,, Ложь);
							КонецЕсли;
						КонецЦикла;
						
						Если СуммаУслугВсегоУпр > 0 Тогда
							СуммаВыставленоПоЗаказуРанееУпр = 0;
							СтрокаДолгПоЗаказу = тблДолгПоЗаказам.Найти(ТекСтрока.ЗаказНаТС, "ЗаказНаТС");
							Если СтрокаДолгПоЗаказу <> Неопределено Тогда
								СуммаВыставленоПоЗаказуРанееУпр = СуммаВыставленоПоЗаказуРанееУпр + СтрокаДолгПоЗаказу.СуммаПриходУпр;
							КонецЕсли;
							
							СуммаВыставленоПоЗаказуУпр = ТекСтрока.СуммаПриходУпр;
							
							Для Каждого ТекСтрокаГрафик Из ТекСтрока.ДоговорКонтрагента.ГрафикОплаты Цикл
								ТекСуммаЭтапаУпр = Окр(СуммаУслугВсегоУпр * ТекСтрокаГрафик.Процент / 100, 4);
								
								// пропускаем уже выставленные этапы оплаты
								Если СуммаВыставленоПоЗаказуРанееУпр >= ТекСуммаЭтапаУпр Тогда
									СуммаВыставленоПоЗаказуРанееУпр = СуммаВыставленоПоЗаказуРанееУпр - ТекСуммаЭтапаУпр;
									Продолжить;
								КонецЕсли;
								
								ТекСуммаЭтапаУпр = ТекСуммаЭтапаУпр - СуммаВыставленоПоЗаказуРанееУпр;
								СуммаВыставленоПоЗаказуРанееУпр = 0;
								
								ТекСуммаПриходУпр = Мин(ТекСуммаЭтапаУпр, СуммаВыставленоПоЗаказуУпр);
								
								НоваяСтрокаРез = ТаблицаПлатежныйКалендарьРез.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, ТекСтрока);
								НоваяСтрокаРез.ЭтапОплаты     = ТекСтрокаГрафик.ЭтапОплаты;
								НоваяСтрокаРез.СуммаПриходУпр = ТекСуммаПриходУпр;
								НоваяСтрокаРез.СуммаПриход    = ТекСуммаПриходУпр * ТекСтрока.СуммаПриход / ТекСтрока.СуммаПриходУпр;
								
								СуммаВыставленоПоЗаказуУпр = СуммаВыставленоПоЗаказуУпр - ТекСуммаПриходУпр;
								
								Если Окр(СуммаВыставленоПоЗаказуУпр, 2) = 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							НоваяСтрокаРез = ТаблицаПлатежныйКалендарьРез.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, ТекСтрока);
						КонецЕсли;
					Иначе
						Для Каждого ТекСтрокаГрафик Из ТекСтрока.ДоговорКонтрагента.ГрафикОплаты Цикл
							НоваяСтрокаРез = ТаблицаПлатежныйКалендарьРез.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, ТекСтрока);
							НоваяСтрокаРез.ЭтапОплаты     = ТекСтрокаГрафик.ЭтапОплаты;
							НоваяСтрокаРез.СуммаПриход    = ТекСтрока.СуммаПриход * ТекСтрокаГрафик.Процент / 100;
							НоваяСтрокаРез.СуммаПриходУпр = ТекСтрока.СуммаПриходУпр * ТекСтрокаГрафик.Процент / 100;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаПлатежныйКалендарь.Период КАК Период,
		|	ТаблицаПлатежныйКалендарь.Регистратор КАК Регистратор,
		|	ТаблицаПлатежныйКалендарь.Организация КАК Организация,
		|	ТаблицаПлатежныйКалендарь.Контрагент КАК Контрагент,
		|	ТаблицаПлатежныйКалендарь.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаПлатежныйКалендарь.Сделка КАК Сделка,
		|	ТаблицаПлатежныйКалендарь.ЗаказНаТС КАК ЗаказНаТС,
		|	ТаблицаПлатежныйКалендарь.Валюта КАК Валюта,
		|	ТаблицаПлатежныйКалендарь.ПолучательУслуг КАК ПолучательУслуг
		|ПОМЕСТИТЬ ТаблицаПлатежныйКалендарь
		|ИЗ
		|	&ТаблицаПлатежныйКалендарь КАК ТаблицаПлатежныйКалендарь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПлатежныйКалендарь.Период КАК Период,
		|	ТаблицаПлатежныйКалендарь.Регистратор КАК Регистратор,
		|	ТаблицаПлатежныйКалендарь.Организация КАК Организация,
		|	ТаблицаПлатежныйКалендарь.Контрагент КАК Контрагент,
		|	ТаблицаПлатежныйКалендарь.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаПлатежныйКалендарь.Сделка КАК Сделка,
		|	ТаблицаПлатежныйКалендарь.Валюта КАК Валюта,
		|	ТаблицаПлатежныйКалендарь.ПолучательУслуг КАК ПолучательУслуг,
		|	уатПлатежныйКалендарьОбороты.ЗаказНаТС КАК ЗаказНаТС,
		|	уатПлатежныйКалендарьОбороты.ЭтапОплаты КАК ЭтапОплаты,
		|	ЕСТЬNULL(уатПлатежныйКалендарьОбороты.СуммаПриходОборот, 0) - ЕСТЬNULL(уатПлатежныйКалендарьОбороты.СуммаРасходОборот, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(уатПлатежныйКалендарьОбороты.СуммаПриходУпрОборот, 0) - ЕСТЬNULL(уатПлатежныйКалендарьОбороты.СуммаРасходУпрОборот, 0) КАК СуммаУпрОстаток
		|ИЗ
		|	ТаблицаПлатежныйКалендарь КАК ТаблицаПлатежныйКалендарь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПлатежныйКалендарь.Обороты КАК уатПлатежныйКалендарьОбороты
		|		ПО ТаблицаПлатежныйКалендарь.ДоговорКонтрагента = уатПлатежныйКалендарьОбороты.ДоговорКонтрагента
		|			И ТаблицаПлатежныйКалендарь.Сделка = уатПлатежныйКалендарьОбороты.Сделка
		|			И ТаблицаПлатежныйКалендарь.Валюта = уатПлатежныйКалендарьОбороты.Валюта
		|			И ТаблицаПлатежныйКалендарь.ПолучательУслуг = уатПлатежныйКалендарьОбороты.ПолучательУслуг
		|			И (уатПлатежныйКалендарьОбороты.ДоговорКонтрагента.ВедениеВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС)
		|				ИЛИ ТаблицаПлатежныйКалендарь.ЗаказНаТС = уатПлатежныйКалендарьОбороты.ЗаказНаТС)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ГрафикОплаты КАК ДоговорыГрафикОплаты
		|		ПО уатПлатежныйКалендарьОбороты.ДоговорКонтрагента = ДоговорыГрафикОплаты.Ссылка
		|			И уатПлатежныйКалендарьОбороты.ЭтапОплаты = ДоговорыГрафикОплаты.ЭтапОплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПлатежныйКалендарьОбороты.Сделка.Дата,
		|	ДоговорыГрафикОплаты.НомерСтроки");
		Запрос.УстановитьПараметр("ТаблицаПлатежныйКалендарь", ТаблицаПлатежныйКалендарь);
		ТаблицаОстатковПартий = Запрос.Выполнить().Выгрузить();
		
		ТаблицаПлатежныйКалендарьРез = ТаблицаПлатежныйКалендарь.СкопироватьКолонки();
		ТаблицаПлатежныйКалендарьРез.Колонки.Добавить("ЭтапОплаты");
				
		Для каждого ТекСтрока Из ТаблицаПлатежныйКалендарь Цикл
			ОсталосьСписатьСумму = ТекСтрока.СуммаРасход;	
			Для каждого ТекСтрокаОстатковПартий Из ТаблицаОстатковПартий Цикл
				Если ОсталосьСписатьСумму = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекСтрока.ДоговорКонтрагента = ТекСтрокаОстатковПартий.ДоговорКонтрагента 
					И ТекСтрока.Сделка = ТекСтрокаОстатковПартий.Сделка
					И ТекСтрока.Валюта = ТекСтрокаОстатковПартий.Валюта
					И (ТекСтрока.ЗаказНаТС = ТекСтрокаОстатковПартий.ЗаказНаТС
						ИЛИ ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС)
					И ТекСтрокаОстатковПартий.СуммаОстаток > 0 Тогда
					
					СписатьСумму = Мин(ТекСтрокаОстатковПартий.СуммаОстаток, ОсталосьСписатьСумму);
					Если СписатьСумму = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаРез = ТаблицаПлатежныйКалендарьРез.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, ТекСтрока);
					
					НоваяСтрокаРез.ЗаказНаТС = ТекСтрокаОстатковПартий.ЗаказНаТС;
					НоваяСтрокаРез.ЭтапОплаты = ТекСтрокаОстатковПартий.ЭтапОплаты;
					
					НоваяСтрокаРез.СуммаРасход    = СписатьСумму;
					НоваяСтрокаРез.СуммаРасходУпр = СписатьСумму * ТекСтрокаОстатковПартий.СуммаУпрОстаток / ТекСтрокаОстатковПартий.СуммаОстаток;
					
					ОсталосьСписатьСумму = ОсталосьСписатьСумму - СписатьСумму;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПлатежныйКалендарь = ТаблицаПлатежныйКалендарьРез;
КонецПроцедуры

// Процедура считывает общую сумму услуг заказов по РН уатПредоставленныеУслуги
//  и оплаченную сумму услуг по РН уатПлатежныйКалендарь, рассчитывает процент и состояние оплаты,
//  записывает в эти параметры в РС уатТекущееСостояниеОплатыЗаказов
//
// Параметры:
//  ДокументОбъект - контекст из модуля объекта документа, выполняющего проведение по РН уатПредоставленныеУслуги
//					и РН уатПлатежныйКалендарь
//
Процедура ОбновитьТекущееСостояниеОплатыЗаказов(ДокументОбъект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	мсвЗаказы = Новый Массив;
	
	// заказы из добавляемых движений регистров
	Если ДокументОбъект.Движения.Найти("уатПлатежныйКалендарь") <> Неопределено Тогда
		Для Каждого ТекЗапись Из ДокументОбъект.Движения.уатПлатежныйКалендарь Цикл
			Если ЗначениеЗаполнено(ТекЗапись.ЗаказНаТС)
				И мсвЗаказы.Найти(ТекЗапись.ЗаказНаТС) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекЗапись.ЗаказНаТС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДокументОбъект.Движения.Найти("уатПредоставленныеУслуги") <> Неопределено Тогда
		Для Каждого ТекЗапись Из ДокументОбъект.Движения.уатПредоставленныеУслуги Цикл
			Если ЗначениеЗаполнено(ТекЗапись.ЗаказНаТС)
				И мсвЗаказы.Найти(ТекЗапись.ЗаказНаТС) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекЗапись.ЗаказНаТС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// заказы из удаляемых движений регистров
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("СтарыеЗаказы")
		И ДокументОбъект.ДополнительныеСвойства.Свойство("СтарыеДоговоры") Тогда
		Для Каждого ТекЗаказ Из ДокументОбъект.ДополнительныеСвойства.СтарыеЗаказы Цикл
			Если мсвЗаказы.Найти(ТекЗаказ) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекЗаказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// заказы из документа
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда
		Если мсвЗаказы.Найти(ДокументОбъект.Ссылка) = Неопределено Тогда
			мсвЗаказы.Добавить(ДокументОбъект.Ссылка);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказПеревозчику_уэ") Тогда
			ИмяТЧ        = "Грузы";
			ИмяРеквизита = "Заказ";
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатКорректировкаДолга") Тогда	
			ИмяТЧ        = "Состав";
			ИмяРеквизита = "Сделка";
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
			ИмяТЧ        = "Заказы";
			ИмяРеквизита = "ЗаказГрузоотправителя";
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПлатежноеПоручениеВходящее")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПлатежноеПоручениеИсходящее")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПриходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатРасходныйКассовыйОрдер") Тогда
			ИмяТЧ        = "РасшифровкаПлатежа";
			ИмяРеквизита = "Сделка";
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПоступлениеТоваровУслуг") Тогда
			ИмяТЧ        = "Услуги";
			ИмяРеквизита = "ЗаказНаТС";
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатРеализацияУслуг") Тогда
			ИмяТЧ        = "Услуги";
			ИмяРеквизита = "Заказ";
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСтраховойСертификат_уэ") Тогда
			ИмяТЧ        = "Грузы";
			ИмяРеквизита = "ЗаказНаТС";
		КонецЕсли;
		Для Каждого ТекСтрока Из ДокументОбъект[ИмяТЧ] Цикл
			Если ЗначениеЗаполнено(ТекСтрока[ИмяРеквизита])
				И ТипЗнч(ТекСтрока[ИмяРеквизита]) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
				И мсвЗаказы.Найти(ТекСтрока[ИмяРеквизита]) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекСтрока[ИмяРеквизита]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// родительские мультимодальные заказы
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		Если ЗначениеЗаполнено(ТекЗаказ.РодительскийЗаказ)
			И мсвЗаказы.Найти(ТекЗаказ.РодительскийЗаказ) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.РодительскийЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	мсвСостояниеОплатыПоЗаказам = уатОбщегоНазначения_проф.СостояниеОплатыПоЗаказам(мсвЗаказы);
	Для Каждого СостояниеОплатыПоЗаказу Из мсвСостояниеОплатыПоЗаказам Цикл
		Если ТипЗнч(СостояниеОплатыПоЗаказу.ЗаказНаТС.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И (СостояниеОплатыПоЗаказу.ЗаказНаТС.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ СостояниеОплатыПоЗаказу.ЗаказНаТС.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ СостояниеОплатыПоЗаказу.ЗаказНаТС.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС) Тогда
			
			НоваяЗапись = РегистрыСведений.уатТекущееСостояниеОплатыЗаказов.СоздатьМенеджерЗаписи();
			НоваяЗапись.ЗаказНаТС     = СостояниеОплатыПоЗаказу.ЗаказНаТС;
			НоваяЗапись.СуммаВсего    = СостояниеОплатыПоЗаказу.Сумма;
			НоваяЗапись.Оплачено      = СостояниеОплатыПоЗаказу.СуммаОплатыФакт;
			НоваяЗапись.ПроцентОплаты = СостояниеОплатыПоЗаказу.ПроцентОплатыФакт;
			Если СостояниеОплатыПоЗаказу.ПроцентОплатыФакт = 0 Тогда
				НоваяЗапись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.Новый;
			ИначеЕсли Окр(СостояниеОплатыПоЗаказу.ПроцентОплатыФакт) >= 100 Тогда
				НоваяЗапись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.Выполнен;
			Иначе
				НоваяЗапись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен;
			КонецЕсли;
			НоваяЗапись.ПредоплатыНедостаточно = (СостояниеОплатыПоЗаказу.СуммаОплатыФакт < СостояниеОплатыПоЗаказу.СуммаПредоплаты);
			НоваяЗапись.ОплаченоПредставление = СтрШаблон("%1 (%2)",
				Формат(СостояниеОплатыПоЗаказу.СуммаОплатыФакт, "ЧДЦ=2; ЧН=0"),
				Формат(СостояниеОплатыПоЗаказу.ПроцентОплатыФакт, "ЧДЦ=0; ЧН=0") + "%");
			НоваяЗапись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтарыеЗаказыПередЗаписью(ДокументОбъект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ДополнительныеСвойства.Свойство("СтарыеЗаказы") Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("СтарыеЗаказы",   Новый Массив);
	КонецЕсли;
	
	НЗуатПлатежныйКалендарь = ДокументОбъект.Движения.Найти("уатПлатежныйКалендарь");
	Если НЗуатПлатежныйКалендарь <> Неопределено Тогда
		НЗуатПлатежныйКалендарь.Прочитать();
		Для Каждого ТекЗапись Из НЗуатПлатежныйКалендарь Цикл
			Если ЗначениеЗаполнено(ТекЗапись.ЗаказНаТС)
				И ДокументОбъект.ДополнительныеСвойства.СтарыеЗаказы.Найти(ТекЗапись.ЗаказНаТС) = Неопределено Тогда
				ДокументОбъект.ДополнительныеСвойства.СтарыеЗаказы.Добавить(ТекЗапись.ЗаказНаТС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НЗуатПредоставленныеУслуги = ДокументОбъект.Движения.Найти("уатПредоставленныеУслуги");
	Если НЗуатПредоставленныеУслуги <> Неопределено Тогда
		НЗуатПредоставленныеУслуги.Прочитать();
		Для Каждого ТекЗапись Из НЗуатПредоставленныеУслуги Цикл
			Если ЗначениеЗаполнено(ТекЗапись.ЗаказНаТС)
				И ДокументОбъект.ДополнительныеСвойства.СтарыеЗаказы.Найти(ТекЗапись.ЗаказНаТС) = Неопределено Тогда
				ДокументОбъект.ДополнительныеСвойства.СтарыеЗаказы.Добавить(ТекЗапись.ЗаказНаТС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СопроводительныеДокументы

Процедура СформироватьТаблицуДатыОбработкиДокументов(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	ТаблицаДатыОбработкиДокументов = Новый ТаблицаЗначений;
	ТаблицаДатыОбработкиДокументов.Колонки.Добавить("Регистратор");
	ТаблицаДатыОбработкиДокументов.Колонки.Добавить("СопроводительныйДокумент");
	ТаблицаДатыОбработкиДокументов.Колонки.Добавить("ПлановаяДатаОбработки");
	ТаблицаДатыОбработкиДокументов.Колонки.Добавить("КоличествоДнейНаОбработку");
	
	// Таблица движений по другим регистраторам:
	// сюда попадают СД из Заказов при проведении МЛ и СД из МЛ при проведении Заказа
	ТаблицаДатыОбработкиДокументовДоп = ТаблицаДатыОбработкиДокументов.Скопировать();
	
	мсвЗаказыИМЛ = Новый Массив;
	мсвЗаказыИМЛ.Добавить(ДокументСсылка);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		мсвМЛ = уатОбщегоНазначения_проф.ПолучитьМЛдляЗаказаНаТС(ДокументСсылка, Ложь);
		Для Каждого ТекМЛ Из мсвМЛ Цикл
			мсвЗаказыИМЛ.Добавить(ТекМЛ);
		КонецЦикла;
	Иначе
		мсвЗаказы = уатОбщегоНазначения_проф.ПолучитьЗаказыМЛ(ДокументСсылка);
		Для Каждого ТекЗаказ Из мсвЗаказы Цикл
			мсвЗаказыИМЛ.Добавить(ТекЗаказ);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСопроводительныеДокументы.Ссылка КАК Ссылка,
	|	уатСопроводительныеДокументы.Основание КАК Основание,
	|	уатСопроводительныеДокументы.ВладелецДокумента КАК ВладелецДокумента,
	|	уатСопроводительныеДокументы.ВидДокумента КАК ВидДокумента,
	|	уатСопроводительныеДокументы.ПлановаяДатаОбработкиВручную КАК ПлановаяДатаОбработкиВручную,
	|	уатСопроводительныеДокументы.ПлановаяДатаОбработки КАК ПлановаяДатаОбработки
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|ГДЕ
	|	НЕ уатСопроводительныеДокументы.ПометкаУдаления
	|	И уатСопроводительныеДокументы.Основание В (&мсвЗаказыИМЛ)");
	Запрос.УстановитьПараметр("мсвЗаказыИМЛ", мсвЗаказыИМЛ);
	Если СтруктураДополнительныеСвойства.Свойство("СопроводительныйДокумент") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатСопроводительныеДокументы.Ссылка = &СД";
		Запрос.УстановитьПараметр("СД", СтруктураДополнительныеСвойства.СопроводительныйДокумент);
	КонецЕсли;
	
	ВыборкаСД = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСД.Следующий() Цикл
		ПлановаяДата = Неопределено;
		
		Если ВыборкаСД.ПлановаяДатаОбработкиВручную Тогда
			ПлановаяДата = ВыборкаСД.ПлановаяДатаОбработки;
			КоличествоДнейНаОбработку = 0;
			Если НЕ ЗначениеЗаполнено(ПлановаяДата) Тогда
				ТекстСообщОшибка = СтрШаблон(
					"Не установлена дата обработки сопр. документа ""%1"": не указано значение плановой даты обработки в форме сопр. документа.",
					ВыборкаСД.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
				Продолжить;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ВыборкаСД.ВладелецДокумента) Тогда // владелец СД указан - это контрагент или перевозчик
				Если ВыборкаСД.ВладелецДокумента = ВыборкаСД.Основание.Контрагент Тогда
					Договор = ВыборкаСД.Основание.ДоговорКонтрагента;
					
					Если НЕ ЗначениеЗаполнено(Договор) Тогда
						ТекстСообщОшибка = СтрШаблон("Не удалось рассчитать дату обработки ""%1"": не указан договор контрагента.",
							ВыборкаСД.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
						Продолжить;
					КонецЕсли;
				Иначе
					Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
						ВыборкаСД.Основание.Организация, ВыборкаСД.ВладелецДокумента);
						
					Если НЕ ЗначениеЗаполнено(Договор) Тогда
						ТекстСообщОшибка = СтрШаблон(
							"Не удалось рассчитать дату обработки ""%1"": не найден договор контрагента ""%2"" для организации ""%3"".",
							ВыборкаСД.Ссылка, ВыборкаСД.ВладелецДокумента, ВыборкаСД.Основание.Организация);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НастройкаПоВидуСД = Договор.ВидыСопроводительныхДокументов.Найти(ВыборкаСД.ВидДокумента, "ВидДокумента");
				Если НастройкаПоВидуСД = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НастройкаПоВидуСД.УсловиеКонтроля) Тогда
					ТекстСообщОшибка = СтрШаблон(
						"Не удалось рассчитать дату обработки ""%1"": не указаны настройки для сопроводительного документа вида ""%2"""
						" в договоре ""%3""",
						ВыборкаСД.Ссылка, ВыборкаСД.ВидДокумента, Договор);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
					Продолжить;
				КонецЕсли;
				
			Иначе // владелец СД не указан - это наша организация
				НастройкаПоВидуСД = ВыборкаСД.ВидДокумента;
				Если НЕ ЗначениеЗаполнено(НастройкаПоВидуСД.УсловиеКонтроля) Тогда
					ТекстСообщОшибка = СтрШаблон(
						"Не удалось рассчитать дату обработки ""%1"": не указаны настройки обработки сопроводительного документа вида ""%2""",
						ВыборкаСД.Ссылка, ВыборкаСД.ВидДокумента);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			КоличествоДнейНаОбработку = НастройкаПоВидуСД.КоличествоДнейНаОбработку;
			
			ДатаОтсчета = '00010101';
			Если ТипЗнч(ВыборкаСД.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
				Если НастройкаПоВидуСД.УсловиеКонтроля = Перечисления.уатУсловияКонтроляСопроводительныхДокументов.ПлановаяДатаПоЗаказуНаТС Тогда
					ДатаОтсчета = ВыборкаСД.Основание.ДоставкаС;
				Иначе
					ДатаОтсчета = ПолучитьДатуОтсчетаДляСДПоПервомуЗаказуИлиМЛ(ВыборкаСД.Основание);
					Если НЕ ЗначениеЗаполнено(ДатаОтсчета) Тогда
						ТекстСообщОшибка = СтрШаблон("Не удалось рассчитать дату обработки ""%1"": не выполнен Маршрутный лист по ""%2"".",
							ВыборкаСД.Ссылка, ВыборкаСД.Основание);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НастройкаПоВидуСД.УсловиеКонтроля = Перечисления.уатУсловияКонтроляСопроводительныхДокументов.ФактическаяДатаПоМЛ Тогда
					ДатаОтсчета = ВыборкаСД.Основание.ДатаИВремяВыполнения;
				Иначе
					ДатаОтсчета = ПолучитьДатуОтсчетаДляСДПоПервомуЗаказуИлиМЛ(ВыборкаСД.Основание);
					Если НЕ ЗначениеЗаполнено(ДатаОтсчета) Тогда
						ТекстСообщОшибка = СтрШаблон("Не удалось рассчитать дату обработки ""%1"": Заказ на ТС не указан.", ВыборкаСД.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаОтсчета = '00010101' Тогда
				Если ТипЗнч(ВыборкаСД.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
					ТекстСообщОшибка = СтрШаблон(
						"Не удалось рассчитать дату обработки ""%1"": не указано значение реквизита ""Прибытие с"" в документе ""%2"".",
						ВыборкаСД.Ссылка, ВыборкаСД.Основание);
				Иначе
					ТекстСообщОшибка = СтрШаблон(
						"Не удалось рассчитать дату обработки ""%1"": ""%2"" не выполнен.",
						ВыборкаСД.Ссылка, ВыборкаСД.Основание);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибка);
				Продолжить;
			КонецЕсли;
			
			ПлановаяДата = Неопределено;
			Если НастройкаПоВидуСД.СпособРасчетаДней = 0
				ИЛИ НЕ ЗначениеЗаполнено(НастройкаПоВидуСД.ПроизводственныйКалендарь) Тогда //каледарные дни
				ПлановаяДата = ДатаОтсчета + КоличествоДнейНаОбработку * 24 * 3600;
			Иначе //рабочие дни
				Попытка
					ПлановаяДата = КалендарныеГрафики.ДатаПоКалендарю(НастройкаПоВидуСД.ПроизводственныйКалендарь,
						ДатаОтсчета, КоличествоДнейНаОбработку);
				Исключение
					ТекстСообщ = СтрШаблон("Не удалось рассчитать дату обработки ""%1"": %2",
						ВыборкаСД.Ссылка, ИнформацияОбОшибке().Описание);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщ);
				КонецПопытки;		
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПлановаяДата) Тогда
			Если ДокументСсылка = ВыборкаСД.Основание Тогда
				НоваяСтрока = ТаблицаДатыОбработкиДокументов.Добавить();
			Иначе
				НоваяСтрока = ТаблицаДатыОбработкиДокументовДоп.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Регистратор               = ВыборкаСД.Основание;
			НоваяСтрока.СопроводительныйДокумент  = ВыборкаСД.Ссылка;
			НоваяСтрока.ПлановаяДатаОбработки     = ПлановаяДата;
			НоваяСтрока.КоличествоДнейНаОбработку = КоличествоДнейНаОбработку;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДатыОбработкиДокументов", ТаблицаДатыОбработкиДокументов);
	СтруктураДополнительныеСвойства.Вставить("ТаблицаДатыОбработкиДокументовДоп", ТаблицаДатыОбработкиДокументовДоп);
КонецПроцедуры

Функция ПолучитьДатуОтсчетаДляСДПоПервомуЗаказуИлиМЛ(ДокументСсылка) Экспорт
	ДатаОтсчета = '00010101';
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МИНИМУМ(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДоставкаС) КАК ДатаОтсчета
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|ГДЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
		|	И НЕ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОтсчета = Выборка.ДатаОтсчета;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(уатМаршрутныйЛист.ДатаИВремяВыполнения) КАК ДатаОтсчета
		|ИЗ
		|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
		|ГДЕ
		|	уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя = &Ссылка
		|	И НЕ уатМаршрутныйЛист.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОтсчета = Выборка.ДатаОтсчета;
		КонецЕсли;				
	КонецЕсли;
	
	Возврат ДатаОтсчета;
КонецФункции
					
#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДатуСрокПлатежаПоЗаказу(ДанныеСтроки, флНакладная, ДатаПлатежаРучная, мсвСообщенияОбОшибках)
	Рез = Новый Структура("ДатаСобытия, ДатаПлатежа, ДнейОтсрочки", '00010101', '00010101', 0);
	флДоСобытия = Ложь;
	
	Если ЗначениеЗаполнено(ДатаПлатежаРучная) Тогда
		Рез.ДатаСобытия = ДатаПлатежаРучная;
		Рез.ДатаПлатежа = ДатаПлатежаРучная;
		Возврат Рез;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		ТекЭтапОплаты = ДанныеСтроки.ДоговорКонтрагента.ГрафикОплаты.Найти(ДанныеСтроки.ЭтапОплаты, "ЭтапОплаты");
		Если ТекЭтапОплаты = Неопределено Тогда
			Возврат Рез;
		КонецЕсли;
	КонецЕсли;
		
	Если ТекЭтапОплаты.ВариантОтсчета = Перечисления.уатВариантыОтсчетаДатыПлатежа.ДоОтправленияПоЗаказу Тогда
		Рез.ДатаСобытия = НачалоДня(ДанныеСтроки.ЗаказНаТС.ОтправлениеС);
		флДоСобытия = Истина;
	ИначеЕсли ТекЭтапОплаты.ВариантОтсчета = Перечисления.уатВариантыОтсчетаДатыПлатежа.ПослеОтправленияПоЗаказу Тогда
		Рез.ДатаСобытия = НачалоДня(ДанныеСтроки.ЗаказНаТС.ОтправлениеПо);
	ИначеЕсли ТекЭтапОплаты.ВариантОтсчета = Перечисления.уатВариантыОтсчетаДатыПлатежа.ДоПрибытияПоЗаказу Тогда
		Рез.ДатаСобытия = НачалоДня(ДанныеСтроки.ЗаказНаТС.ДоставкаС);
		флДоСобытия = Истина;
	ИначеЕсли ТекЭтапОплаты.ВариантОтсчета = Перечисления.уатВариантыОтсчетаДатыПлатежа.ПослеПрибытияПоЗаказу Тогда
		Рез.ДатаСобытия = НачалоДня(ДанныеСтроки.ЗаказНаТС.ДоставкаПо);
	ИначеЕсли ТекЭтапОплаты.ВариантОтсчета = Перечисления.уатВариантыОтсчетаДатыПлатежа.ПослеДоставкиГруза Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
		|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатЗаказыГрузоотправителейОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатЗаказыГрузоотправителей.Период КАК ДатаДоставки
		|ИЗ
		|	РегистрНакопления.уатЗаказыГрузоотправителей КАК уатЗаказыГрузоотправителей
		|ГДЕ
		|	уатЗаказыГрузоотправителей.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
		|	И уатЗаказыГрузоотправителей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДоставки УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
		|	уатГрузыКПеревозке_уэОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатГрузыКПеревозке_уэОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатГрузыКПеревозке_уэОбороты.Регистратор КАК МаршрутныйЛист
		|ИЗ
		|	РегистрНакопления.уатГрузыКПеревозке_уэ.Обороты(, , Регистратор, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатГрузыКПеревозке_уэОбороты
		|ГДЕ
		|	уатГрузыКПеревозке_уэОбороты.Регистратор ССЫЛКА Документ.уатМаршрутныйЛист");
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ДанныеСтроки.ЗаказНаТС);
		РезЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезЗапроса[0].Пустой() Тогда //остатков по заказу нет
			Если РезЗапроса[1].Пустой() Тогда //остатков то нет, но и не было вообще движений
				ТекстСообщОшибка = СтрШаблон("""%1"" не проведен, отстутствуют движения по регистру ""Заказы грузоотправителей"".", ДанныеСтроки.ЗаказНаТС);
				Если мсвСообщенияОбОшибках.Найти(ТекстСообщОшибка) = Неопределено Тогда
					мсвСообщенияОбОшибках.Добавить(ТекстСообщОшибка);
				КонецЕсли;
			Иначе //здесь всё хорошо - и остатков нет, и движения по расходу есть - заказ выполнен
				Выборка = РезЗапроса[1].Выбрать();
				Выборка.Следующий();
				
				Рез.ДатаСобытия = НачалоДня(Выборка.ДатаДоставки);
			КонецЕсли;
		Иначе
			Если РезЗапроса[2].Пустой() Тогда // весь груз размещен в МЛ
				Выборка = РезЗапроса[3].Выбрать();
				Если Выборка.Следующий() Тогда
					ТекстСообщОшибка = СтрШаблон("""%1"" по ""%2"" не выполнен.", Выборка.МаршрутныйЛист, ДанныеСтроки.ЗаказНаТС);
				Иначе
					ТекстСообщОшибка = СтрШаблон("""%1"" не размещен в Маршрутном листе.", ДанныеСтроки.ЗаказНаТС);
				КонецЕсли;
			Иначе
				ТекстСообщОшибка = СтрШаблон("""%1"" не размещен в Маршрутном листе или размещен не полностью.", ДанныеСтроки.ЗаказНаТС);
			КонецЕсли;
			Если мсвСообщенияОбОшибках.Найти(ТекстСообщОшибка) = Неопределено Тогда
				мсвСообщенияОбОшибках.Добавить(ТекстСообщОшибка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекЭтапОплаты.ВариантОтсчета
		= Перечисления.уатВариантыОтсчетаДатыПлатежа.ПослеПолученияСопроводительныхДокументов
		И ЗначениеЗаполнено(ТекЭтапОплаты.ВидСопроводительногоДокумента) Тогда //получение СД
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(
		|			,
		|			(СопроводительныйДокумент.Основание = &ЗаказНаТС
		|				ИЛИ СопроводительныйДокумент.Основание В (&мсвМЛ))
		|				И СопроводительныйДокумент.ВладелецДокумента = &Контрагент
		|				И СопроводительныйДокумент.ВидДокумента = &ВидДокумента) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
		|ГДЕ
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(уатСтатусыСопроводительныхДокументовСрезПоследних.Период) КАК Период
		|ИЗ
		|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(
		|			,
		|			(СопроводительныйДокумент.Основание = &ЗаказНаТС
		|				ИЛИ СопроводительныйДокумент.Основание В (&мсвМЛ))
		|				И СопроводительныйДокумент.ВладелецДокумента = &Контрагент
		|				И СопроводительныйДокумент.ВидДокумента = &ВидДокумента) КАК уатСтатусыСопроводительныхДокументовСрезПоследних");
		Запрос.УстановитьПараметр("ЗаказНаТС",    ДанныеСтроки.ЗаказНаТС);
		Запрос.УстановитьПараметр("мсвМЛ",        уатОбщегоНазначения_проф.ПолучитьМЛдляЗаказаНаТС(ДанныеСтроки.ЗаказНаТС));
		Запрос.УстановитьПараметр("Контрагент",   ДанныеСтроки.ДоговорКонтрагента.Владелец);
		Запрос.УстановитьПараметр("ВидДокумента", ТекЭтапОплаты.ВидСопроводительногоДокумента);
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда // нет необработанных СД
			Если НЕ Результат[1].Пустой() Тогда
				Выборка = Результат[1].Выбрать();
				Выборка.Следующий();
				Если Выборка.Период <> NULL Тогда // обработка всех СД завершена
					Рез.ДатаСобытия = НачалоДня(Выборка.Период);
				Иначе
					ТекстСообщОшибка = СтрШаблон("для ""%1"" не обнаружен сопр. документ вида ""%2"" по владельцу ""%3"".",
						ДанныеСтроки.ЗаказНаТС, ТекЭтапОплаты.ВидСопроводительногоДокумента, ДанныеСтроки.ДоговорКонтрагента.Владелец);
				КонецЕсли;
			КонецЕсли;
		Иначе // есть необработанные СД
			ТекстСообщОшибка = СтрШаблон("для ""%1"" не завершена обработка сопр. документа вида ""%2"" по владельцу ""%3"".",
				ДанныеСтроки.ЗаказНаТС, ТекЭтапОплаты.ВидСопроводительногоДокумента, ДанныеСтроки.ДоговорКонтрагента.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	// сообщения об ошибках
	Если флНакладная И НЕ ЗначениеЗаполнено(Рез.ДатаСобытия) И НЕ ПустаяСтрока(ТекстСообщОшибка) Тогда
		ТекстСообщОшибка = "Авторасчет даты платежа не выполнен: " + ТекстСообщОшибка;
		Если мсвСообщенияОбОшибках.Найти(ТекстСообщОшибка) = Неопределено Тогда
			мсвСообщенияОбОшибках.Добавить(ТекстСообщОшибка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Рез.ДатаСобытия) Тогда
		Если НЕ ЗначениеЗаполнено(ТекЭтапОплаты.ПроизводственныйКалендарь) Тогда //календарные дни
			Если флДоСобытия Тогда
				Рез.ДатаПлатежа = Рез.ДатаСобытия - ТекЭтапОплаты.Срок * 24 * 3600;
			Иначе
				Рез.ДатаПлатежа = Рез.ДатаСобытия + ТекЭтапОплаты.Срок * 24 * 3600;
			КонецЕсли;
		Иначе //рабочие дни по календарю
			Если флДоСобытия Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 11
				|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
				|ИЗ
				|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
				|ГДЕ
				|	(ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня1
				|			ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня2)
				|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
				|	И ДанныеПроизводственногоКалендаря.Дата < &ДатаОтправкиЗаказа
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "11", ТекЭтапОплаты.Срок);
				
				Запрос.УстановитьПараметр("ВидДня1", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
				Запрос.УстановитьПараметр("ВидДня2", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
				Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ТекЭтапОплаты.ПроизводственныйКалендарь);
				Запрос.УстановитьПараметр("ДатаОтправкиЗаказа", НачалоДня(Рез.ДатаСобытия));
				
				тблВыборка = Запрос.Выполнить().Выгрузить();
				Если тблВыборка.Количество() = 0 Тогда
					ТекстСообщОшибка = СтрШаблон("Не заполнен производственный календарь %1 за %2 год.",
						ТекЭтапОплаты.ПроизводственныйКалендарь, Формат(Рез.ДатаСобытия, "ДФ=yyyy"));
					Если мсвСообщенияОбОшибках.Найти(ТекстСообщОшибка) = Неопределено Тогда
						мсвСообщенияОбОшибках.Добавить(ТекстСообщОшибка);
					КонецЕсли;
					
					Рез.ДатаПлатежа = Рез.ДатаСобытия;
				Иначе
					Рез.ДатаПлатежа = тблВыборка[тблВыборка.Количество()-1].Дата;
				КонецЕсли;
			Иначе 
				Рез.ДатаПлатежа = КалендарныеГрафики.ДатаПоКалендарю(ТекЭтапОплаты.ПроизводственныйКалендарь,
					Рез.ДатаСобытия, ТекЭтапОплаты.Срок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//Рез.ДнейОтсрочки = (Рез.ДатаПлатежа - Рез.ДатаДоставки) / (3600*24);
	Если флДоСобытия Тогда
		Рез.ДнейОтсрочки = -ТекЭтапОплаты.Срок;
	Иначе
		Рез.ДнейОтсрочки = ТекЭтапОплаты.Срок;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция - Получить таблицу платежа
//
// Параметры:
//  ТекНакладная	 - 	 - 
//  ПараметрыПлатежа - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьТаблицуПлатежа(ДанныеСтроки, ПараметрыПлатежа)
	флПоступление = (ТипЗнч(ДанныеСтроки.Регистратор) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг"));
	
	ТаблицаДатаПлатежа = Новый ТаблицаЗначений;
	ТаблицаДатаПлатежа.Колонки.Добавить("Период");
	ТаблицаДатаПлатежа.Колонки.Добавить("Регистратор");
	ТаблицаДатаПлатежа.Колонки.Добавить("Контрагент");
	ТаблицаДатаПлатежа.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДатаПлатежа.Колонки.Добавить("Валюта");
	ТаблицаДатаПлатежа.Колонки.Добавить("ЗаказНаТС");
	ТаблицаДатаПлатежа.Колонки.Добавить("Сделка");
	ТаблицаДатаПлатежа.Колонки.Добавить("ПолучательУслуг");
	ТаблицаДатаПлатежа.Колонки.Добавить("ДатаПлатежа");
	ТаблицаДатаПлатежа.Колонки.Добавить("ДнейОтсрочки");
	ТаблицаДатаПлатежа.Колонки.Добавить("СуммаПлатежа");
	ТаблицаДатаПлатежа.Колонки.Добавить("СуммаПлатежаУпр");
	ТаблицаДатаПлатежа.Колонки.Добавить("УказанаВручную");
	ТаблицаДатаПлатежа.Колонки.Добавить("ЭтапОплаты");
						
	Если ЗначениеЗаполнено(ДанныеСтроки.Регистратор.ДатаПлатежа) ИЛИ ЗначениеЗаполнено(ПараметрыПлатежа.ДатаПлатежа) Тогда
		НоваяСтрока = ТаблицаДатаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		НоваяСтрока.СуммаПлатежа    = ДанныеСтроки.СуммаПриход;
		НоваяСтрока.СуммаПлатежаУпр = ДанныеСтроки.СуммаПриходУпр;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Регистратор.ДатаПлатежа) Тогда //в документе заполнена дата платежа, значит берем её, а не рассчитываем по параметрам договора
			НоваяСтрока.УказанаВручную = Истина;
			НоваяСтрока.ДатаПлатежа = ДанныеСтроки.Регистратор.ДатаПлатежа;
			Если ЗначениеЗаполнено(ПараметрыПлатежа.ДатаСобытия) Тогда //при этом отсрочку все равно считаем
				НоваяСтрока.ДнейОтсрочки = (НачалоДня(ДанныеСтроки.Регистратор.ДатаПлатежа) - НачалоДня(ПараметрыПлатежа.ДатаСобытия))/3600/24;
			Иначе
				НоваяСтрока.ДнейОтсрочки = 0;
			КонецЕсли;
		Иначе
			// расчетная дата платежа - по параметрам договора
			НоваяСтрока.УказанаВручную = Ложь;
			НоваяСтрока.ДатаПлатежа  = ПараметрыПлатежа.ДатаПлатежа;
			НоваяСтрока.ДнейОтсрочки = ПараметрыПлатежа.ДнейОтсрочки;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТаблицаДатаПлатежа;
КонецФункции

Процедура ДобавитьЗаписиДатыПлатежей(ДанныеСтроки, ПараметрыПлатежа)
	
	флПоЗаказамНаТС = ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС;
	флПоНакладным   = ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным;
	флПоСчетам      = ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
		
	НЗ = РегистрыСведений.уатДатыПлатежей.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(ДанныеСтроки.Регистратор);
	НЗ.Прочитать();
	
	// добавление новой записи по входящим Накладной и Заказу на ТС
	ТаблицаДатаПлатежа = ПолучитьТаблицуПлатежа(ДанныеСтроки, ПараметрыПлатежа);
	Если ТаблицаДатаПлатежа <> Неопределено Тогда
		Для Каждого ТекСтрока Из ТаблицаДатаПлатежа Цикл
			НоваяЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	//// Если сделки накладные или счета, то нужно оставить только одну запись по накладной
	//// при этом заказ подставляется пустой, дата платежа - по минимальному значению,
	//// берется итог по сумме платежей всех заказов
	//Если (флПоНакладным ИЛИ флПоСчетам) И НЗ.Количество() > 1 Тогда
	//	тблНЗ = НЗ.Выгрузить();
	//	тблНЗ.Сортировать("ДатаПлатежа, ЗаказНаТС");
	//	тблНЗ[0].ЗаказНаТС = Неопределено;
	//	тблНЗ[0].СуммаПлатежа = тблНЗ.Итог("СуммаПлатежа");
	//	тблНЗ[0].СуммаПлатежаУпр = тблНЗ.Итог("СуммаПлатежаУпр");
	//	Сч = тблНЗ.Количество() - 1;
	//	Пока Сч > 0 Цикл
	//		тблНЗ.Удалить(Сч);
	//		Сч = Сч - 1;
	//	КонецЦикла;
	//	НЗ.Загрузить(тблНЗ);
	//КонецЕсли;
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура УдалитьЗаписиДатыПлатежей(мсвНакладные, ЗаказНаТС)
	
	Для Каждого ТекНакладная Из мсвНакладные Цикл
		НЗ = РегистрыСведений.уатДатыПлатежей.СоздатьНаборЗаписей();
		НЗ.Отбор.Регистратор.Установить(ТекНакладная.Регистратор);
		НЗ.Прочитать();
		
		// Удаление записей регистра по входящей Сделке
		// записи регистра по этой накладной, но по другим заказам на ТС, не изменяются
		мсвЗаписейУдалить = Новый Массив;
		Для Каждого ТекЗапись Из НЗ Цикл
			//Если флПоЗаказамНаТС И ТекЗапись.ЗаказНаТС = ЗаказНаТС
			//	ИЛИ флПоНакладным И ТекЗапись.Сделка = Накладная
			//	ИЛИ флПоСчетам И ТекЗапись.Сделка = Накладная.Сделка Тогда
			Если ТекЗапись.ЗаказНаТС = ЗаказНаТС Тогда
				мсвЗаписейУдалить.Добавить(ТекЗапись);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекЗаписьУдалить Из мсвЗаписейУдалить Цикл
			НЗ.Удалить(ТекЗаписьУдалить);
		КонецЦикла;
	
		НЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

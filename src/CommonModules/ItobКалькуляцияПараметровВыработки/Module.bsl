////////////////////////////////////////////////////////////////////////////////
// Калькуляция параметров выработки
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Преобразовывает переданное значение в соответствии с калибровочным графиком.
//
// Параметры:
//  Значение			 - Число									 - Исходное значение.
//  КалибровочныйГрафик	 - СправочникСсылка.ItobКалибровочныеГрафики - Ссылка на калибровочный график.
// 
// Возвращаемое значение:
//  Число - Преобразованное значение.
//
Функция ПреобразоватьЗначениеПоКалибровочномуГрафику(Значение, КалибровочныйГрафик) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
		// Преобразовывать нечего
		Возврат Значение;
		
	КонецЕсли;
	
	Результат = 0;
	
	Для Счетчик = 0 По КалибровочныйГрафик.Показатели.Количество()-2 Цикл
		Если Значение >= КалибровочныйГрафик.Показатели[Счетчик].Вход
			И Значение <= КалибровочныйГрафик.Показатели[Счетчик+1].Вход Тогда
			
			СтрКалибровки1 = КалибровочныйГрафик.Показатели[Счетчик];
			СтрКалибровки2 = КалибровочныйГрафик.Показатели[Счетчик+1];
			
			Результат = (СтрКалибровки1.Выход-СтрКалибровки2.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход)*Значение
				+ (СтрКалибровки1.Вход*СтрКалибровки2.Выход-СтрКалибровки2.Вход*СтрКалибровки1.Выход)/(СтрКалибровки1.Вход-СтрКалибровки2.Вход);
				
			Прервать;			
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПреобразоватьПоКалибровочномуГрафику()

// Функция возвращает таблицу выработки объекта за сутки.
//
// Параметры:
//  Терминал						 - СправочникСсылка.ItobТерминалы - Указатель на терминал.
//  НачДата							 - Дата - Начало периода расчета.
//  КонДата							 - Дата - Конец периода расчета.
//  ПредварительноРассчитанныйТрек	 - ТаблицаЗначений - Предварительно рассчитанный трек терминала. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки - ПараметрВыработки и Значение.
//
Функция ПолучитьВыработкуПоТерминалу(Терминал, НачДата, КонДата, ПредварительноРассчитанныйТрек = Неопределено) Экспорт
    	
	ТаблицаВыработки = Новый ТаблицаЗначений;
	ТаблицаВыработки.Колонки.Добавить("ПараметрВыработки");
	ТаблицаВыработки.Колонки.Добавить("Значение");
	
	ИмяСправочникаПараметрыВыработки = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки");
	
	// Определим набор датчиков, данные по которым необходимо определить
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВложенныйЗапрос.Назначение,
	               |	ВложенныйЗапрос.НазначениеКод,
	               |	ВложенныйЗапрос.Датчик
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПараметрыВыработкиУсловияОтбора.Показатель КАК Назначение,
	               |		ПараметрыВыработкиУсловияОтбора.Показатель.Код КАК НазначениеКод,
	               |		ТерминалыДатчики.Датчик КАК Датчик
	               |	ИЗ
	               |		Справочник.ItobПараметрыВыработки.УсловияОтбора КАК ПараметрыВыработкиУсловияОтбора
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
	               |			ПО ПараметрыВыработкиУсловияОтбора.Показатель = ТерминалыДатчики.Назначение
	               |				И (ТерминалыДатчики.Ссылка = &Терминал)
	               |	ГДЕ
	               |		НЕ ПараметрыВыработкиУсловияОтбора.Ссылка.ПометкаУдаления
	               |		И ПараметрыВыработкиУсловияОтбора.Показатель ССЫЛКА Справочник.ItobНазначенияДатчиков
	               |		И НЕ ТерминалыДатчики.Датчик ЕСТЬ NULL 
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПараметрыВыработки.НазначениеДатчика,
	               |		ПараметрыВыработки.НазначениеДатчика.Код,
	               |		ТерминалыДатчики.Датчик
	               |	ИЗ
	               |		Справочник.ItobПараметрыВыработки КАК ПараметрыВыработки
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
	               |			ПО ПараметрыВыработки.НазначениеДатчика = ТерминалыДатчики.Назначение
	               |				И (ТерминалыДатчики.Ссылка = &Терминал)
	               |	ГДЕ
	               |		НЕ ПараметрыВыработки.ПометкаУдаления
	               |		И ПараметрыВыработки.ВидПараметра В (ЗНАЧЕНИЕ(Перечисление.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика), ЗНАЧЕНИЕ(Перечисление.ItobВидыПараметровВыработки.ПодсчетИмпульсов))
	               |		И НЕ ТерминалыДатчики.Датчик ЕСТЬ NULL ) КАК ВложенныйЗапрос";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ItobПараметрыВыработки", ИмяСправочникаПараметрыВыработки);			   				   
	МассивДатчиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Датчик");		   
	
	Маршрут = Неопределено;
	Если НЕ ItobОперативныйМониторинг.СформироватьМаршрутПоТерминалу(Терминал, НачДата, КонДата, Маршрут, Ложь, МассивДатчиков,,,, ПредварительноРассчитанныйТрек) Тогда
		Возврат ТаблицаВыработки;	
	КонецЕсли;	
	
	ЗапросПараметры = Новый Запрос;
	ЗапросПараметры.УстановитьПараметр("Терминал", Терминал);
	ЗапросПараметры.Текст = "ВЫБРАТЬ
	                        |	ПараметрыВыработкиУсловияОтбора.Ссылка КАК ПараметрВыработки,
	                        |	ПараметрыВыработкиУсловияОтбора.Ссылка.ВидПараметра КАК ВидПараметра,
	                        |	ПараметрыВыработкиУсловияОтбора.Ссылка.НазначениеДатчика КАК НазначениеДатчика,
	                        |	ПараметрыВыработкиУсловияОтбора.Показатель,
	                        |	ПараметрыВыработкиУсловияОтбора.ВидСравнения,
	                        |	ПараметрыВыработкиУсловияОтбора.Значение,
	                        |	ТерминалыДатчики.Датчик,
	                        |	ТерминалыДатчики.Датчик.Код КАК КодДатчика,
	                        |	ВЫБОР
	                        |		КОГДА ПараметрыВыработкиУсловияОтбора.Показатель ССЫЛКА Справочник.ItobНазначенияДатчиков
	                        |			ТОГДА ВЫБОР
	                        |					КОГДА ТерминалыДатчики.Датчик ЕСТЬ NULL 
	                        |						ТОГДА 0
	                        |					ИНАЧЕ 1
	                        |				КОНЕЦ
	                        |		ИНАЧЕ 1
	                        |	КОНЕЦ КАК КоличествоВалидныхУсловий,
	                        |	ПараметрыВыработкиУсловияОтбора.НомерСтроки КАК КоличествоУсловий
	                        |ИЗ
	                        |	Справочник.ItobПараметрыВыработки.УсловияОтбора КАК ПараметрыВыработкиУсловияОтбора
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
	                        |		ПО ПараметрыВыработкиУсловияОтбора.Показатель = ТерминалыДатчики.Назначение
	                        |			И (ПараметрыВыработкиУсловияОтбора.Показатель ССЫЛКА Справочник.ItobНазначенияДатчиков)
	                        |			И (ТерминалыДатчики.Ссылка = &Терминал)
	                        |ГДЕ
	                        |	НЕ ПараметрыВыработкиУсловияОтбора.Ссылка.ПометкаУдаления
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ПараметрыВыработки.Ссылка,
	                        |	ПараметрыВыработки.ВидПараметра,
	                        |	ПараметрыВыработки.НазначениеДатчика,
	                        |	NULL,
	                        |	NULL,
	                        |	NULL,
	                        |	NULL,
	                        |	NULL,
	                        |	1,
	                        |	0
	                        |ИЗ
	                        |	Справочник.ItobПараметрыВыработки КАК ПараметрыВыработки
	                        |ГДЕ
	                        |	НЕ ПараметрыВыработки.ПометкаУдаления
	                        |ИТОГИ
	                        |	СУММА(КоличествоВалидныхУсловий),
	                        |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоУсловий)
	                        |ПО
	                        |	ПараметрВыработки";
							
	ШаблонТЗУсловия = Новый ТаблицаЗначений;
	ШаблонТЗУсловия.Колонки.Добавить("Показатель");
	ШаблонТЗУсловия.Колонки.Добавить("ВидСравнения");
	ШаблонТЗУсловия.Колонки.Добавить("Значение");
	ШаблонТЗУсловия.Колонки.Добавить("КодДатчика");
	ШаблонТЗУсловия.Колонки.Добавить("ПараметрыГеографическойЗоны");
	
	МодульГеографическиеЗоны = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоны = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоны");	
	КонецЕсли; 
	ИспользуетсяПодсистемаГеозон = НЕ (МодульГеографическиеЗоны = Неопределено);
	
	ТЗГеографическиеЗоны = ПолучитьГеографическиеЗоны();
	
	ЗапросПараметры.Текст = СтрЗаменить(ЗапросПараметры.Текст, "ItobПараметрыВыработки", ИмяСправочникаПараметрыВыработки);			   				   
	
	ВыборкаПараметры = ЗапросПараметры.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПараметры.Следующий() Цикл
		
		Если ВыборкаПараметры.КоличествоВалидныхУсловий <> ВыборкаПараметры.КоличествоУсловий Тогда
			Продолжить;
		
		КонецЕсли;
		
		Если ВыборкаПараметры.ПараметрВыработки = Справочники[ИмяСправочникаПараметрыВыработки].РасходТопливаДУТ
			 ИЛИ ВыборкаПараметры.ПараметрВыработки = Справочники[ИмяСправочникаПараметрыВыработки].РасходТопливаВДвижении
			 ИЛИ ВыборкаПараметры.ПараметрВыработки = Справочники[ИмяСправочникаПараметрыВыработки].РасходТопливаВПростое Тогда
			Продолжить;
		
		КонецЕсли;
		
		УсловияОтбора = ШаблонТЗУсловия.Скопировать();
		
		ВыборкаУсловия = ВыборкаПараметры.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаУсловия.Следующий() Цикл			
			Если ВыборкаУсловия.Показатель <> NULL Тогда
				НовСтрокаОтбора = УсловияОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаОтбора, ВыборкаУсловия);			
		    	НовСтрокаОтбора.КодДатчика = Формат(ВыборкаУсловия.КодДатчика, "ЧН=0; ЧГ=0");			
			КонецЕсли;
			Если ВыборкаУсловия.Показатель = "Местонахождение" Тогда
				Если НЕ ИспользуетсяПодсистемаГеозон Тогда
					УсловияОтбора.Удалить(НовСтрокаОтбора);
					Продолжить;
				КонецЕсли; 
				
				НайденнаяГеографическаяЗона = ТЗГеографическиеЗоны.Найти(ВыборкаУсловия.Значение, "ГеографическаяЗона");
				Если НайденнаяГеографическаяЗона <> Неопределено Тогда
					ПараметрыГеозоны = МодульГеографическиеЗоны.ПараметрыПроверяемойЗоны();
					ЗаполнитьЗначенияСвойств(ПараметрыГеозоны, НайденнаяГеографическаяЗона);
					ПараметрыГеозоны.ШиротыЗоны = Новый Массив;
					ПараметрыГеозоны.ДолготыЗоны = Новый Массив;
					
					Для каждого ЭлемМассивУ Из НайденнаяГеографическаяЗона.МассивУ Цикл
						ПараметрыГеозоны.ШиротыЗоны.Добавить(ЭлемМассивУ);				
					КонецЦикла;
					
					Для каждого ЭлемМассивХ Из НайденнаяГеографическаяЗона.МассивХ Цикл
						ПараметрыГеозоны.ДолготыЗоны.Добавить(ЭлемМассивХ);				
					КонецЦикла;
					
					НовСтрокаОтбора.ПараметрыГеографическойЗоны = ПараметрыГеозоны;
				Иначе
					// Не нашли зону - видимо она не выбрана
					УсловияОтбора.Удалить(НовСтрокаОтбора);										
				КонецЕсли;			
			КонецЕсли;		
		КонецЦикла;	
		
		Если ВыборкаПараметры.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика
			ИЛИ ВыборкаПараметры.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ПодсчетИмпульсов Тогда
			
			// Обработка изменения значения датчиков
			
			Если ВыборкаПараметры.НазначениеДатчика.Пустая() Тогда
				Продолжить;
			
			КонецЕсли;
			
			НайденнаяСтрока = Терминал.Датчики.Найти(ВыборкаПараметры.НазначениеДатчика,"Назначение");
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			
			Если НайденнаяСтрока.Датчик.Пустая() Тогда
				Продолжить;
			
			КонецЕсли;
			
			// +++ Подписка на изменение значение датчика.
			Если ВыборкаПараметры.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика Тогда
				ТекЗначение = ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
					Маршрут, Терминал, ВыборкаПараметры.НазначениеДатчика, НайденнаяСтрока.Датчик, НайденнаяСтрока.КалибровочныйГрафик, НачДата);
				
			Иначе
				ТекЗначение = ПолучитьЗначениеПараметраПодсчетИмпульсов(
					Маршрут, Терминал, ВыборкаПараметры.НазначениеДатчика, НайденнаяСтрока.Датчик, НайденнаяСтрока.КалибровочныйГрафик);
			
			КонецЕсли;
			
			СтрокаТаблицыВыработки = ТаблицаВыработки.Добавить();
			СтрокаТаблицыВыработки.ПараметрВыработки = ВыборкаПараметры.ПараметрВыработки;
			СтрокаТаблицыВыработки.Значение = ТекЗначение;	
			// --- Подписка на изменение значение датчика.
			
		Иначе
			
			Значение = 0;
			
			Если Маршрут.Количество() > 1 Тогда
				
				Если ВыборкаПараметры.ВидПараметра = ПредопределенноеЗначение("Перечисление.ItobВидыПараметровВыработки.Пробег") Тогда
					
					Значение = ПолучитьЗначениеПараметраПоПробегу(УсловияОтбора, Маршрут);
										
				ИначеЕсли ВыборкаПараметры.ВидПараметра =  ПредопределенноеЗначение("Перечисление.ItobВидыПараметровВыработки.Время") Тогда
					
					Значение = ПолучитьЗначениеПараметраПоВремени(УсловияОтбора, Маршрут);
					
				КонецЕсли;
			КонецЕсли;			
			
			СтрокаТаблицыВыработки = ТаблицаВыработки.Добавить();
			СтрокаТаблицыВыработки.ПараметрВыработки = ВыборкаПараметры.ПараметрВыработки;
			СтрокаТаблицыВыработки.Значение = Значение;
						
		КонецЕсли;
		
	КонецЦикла;
			
	Возврат ТаблицаВыработки;

КонецФункции // ПолучитьВыработкуПоТерминалу()

// Функция рассчитывает и возвращает таблицу выработки.
//
// Параметры:
//  ОбъектМониторинга	 - Справочник.ItobТранспортныеСредства	 - Ссылка на ТС.
//  НачДата				 - Дата									 - Начало периода расчета.
//  КонДата				 - Дата									 - Конец периода расчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки - ПараметрВыработки и Значение.
//
Функция ПолучитьВыработку(ОбъектМониторинга, НачДата, КонДата) Экспорт
	
	ТаблицаВыработки = Новый ТаблицаЗначений;
	ТаблицаВыработки.Колонки.Добавить("ПараметрВыработки");
	ТаблицаВыработки.Колонки.Добавить("Значение");
	
	Терминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ОбъектМониторинга,НачДата);
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда
		Возврат ТаблицаВыработки;
	
	КонецЕсли;
	
	Возврат ПолучитьВыработкуПоТерминалу(Терминал, НачДата, КонДата);
	
КонецФункции // ПолучитьВыработку()

// Возвращает значение параметра по изменению значения датчика.
//
// Параметры:
//  Маршрут					 - ТаблицаЗначений						 - Маршрут
//  Терминал				 - СправочникСсылка.ItobТерминалы		 - Ссылка на терминал.
//  НазначениеДатчика		 - СправочникСсылка.ItobНазначенияДатчиков	 - Ссылка на назначение датчика.
//  Датчик					 - СправочникСсылка.ItobДатчики				 - Ссылка на датчик.
//  КалибровочныйГрафик		 - СправочникСсылка.ItobКалибровочныеГрафики - Ссылка на калибровочный график.
//  НачДата					 - Дата										 - Учетная дата.
//  УчитыватьКрайнююТочку	 - Булево									 - Учитывать крайнюю точку.
// 
// Возвращаемое значение:
//  Число - Значение параметра.
//
Функция ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
		Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик, НачДата, УчитыватьКрайнююТочку=Ложь) Экспорт

	// Обработка изменения значения датчиков
	
	Если НазначениеДатчика.Пустая() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	КодДатчика = Формат(Датчик.Код, "ЧН=0; ЧГ=0");
	ИмяКолДатчик = "ЗначениеДатчика"+КодДатчика;
	// Проверка существования колонки
	Если Маршрут.Колонки.Найти(ИмяКолДатчик)=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДопускатьЗначенияВнеВходногоДиапазона = Истина;
	ДопустимоеЗначениеНачало = 0;
	ДопустимоеЗначениеКонец  = 0;
	
	Если НЕ КалибровочныйГрафик.Пустая() Тогда
		ДопускатьЗначенияВнеВходногоДиапазона = КалибровочныйГрафик.ДопускатьЗначенияВнеВходногоДиапазона;
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
			Показатели = КалибровочныйГрафик.Показатели.Выгрузить();
			Показатели.Сортировать("Вход Возр");
			
			Если Показатели.Количество() > 1 Тогда
				ДопустимоеЗначениеНачало = Показатели[0].Вход;	
				ДопустимоеЗначениеКонец  = Показатели[Показатели.Количество()-1].Вход;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;			
	
	Значение = 0;
	
	МинЧислоТочек = ?(УчитыватьКрайнююТочку, 2, 3);
	ИндексКрайнейТочки = ?(УчитыватьКрайнююТочку, Маршрут.Количество()-1, Маршрут.Количество()-2);
	
	Если Маршрут.Количество() >= МинЧислоТочек Тогда
		
		ДанныеНаНачало = Маршрут[0][ИмяКолДатчик];
		ДанныеНаКонец = Маршрут[ИндексКрайнейТочки][ИмяКолДатчик];
		
		// Валидны ли данные на начало ?
		
		Если ДанныеНаНачало=NULL ИЛИ ДанныеНаНачало=Неопределено 
			ИЛИ ((НЕ ДопускатьЗначенияВнеВходногоДиапазона) И (ДанныеНаНачало < ДопустимоеЗначениеНачало ИЛИ ДанныеНаНачало > ДопустимоеЗначениеКонец)) Тогда
			
			// Точка невалидна, надо смотреть предыдущие данные
			ДанныеНаНачало = ПолучитьВалидноеЗначениеДатчика(Терминал, Датчик, НачДата, ДопустимоеЗначениеНачало, ДопустимоеЗначениеКонец);
			Если ДанныеНаНачало = Неопределено Тогда
				
				// В предыдущие дни валидного значения нет, ищем в текущем дне
				Для НомерСтроки = 1 По Маршрут.Количество()-2 Цикл
					
					Если Маршрут[НомерСтроки][ИмяКолДатчик]=NULL
						ИЛИ Маршрут[НомерСтроки][ИмяКолДатчик]=Неопределено Тогда
						Продолжить;								
					КонецЕсли;
					
					Если Маршрут[НомерСтроки][ИмяКолДатчик] >= ДопустимоеЗначениеНачало
						И Маршрут[НомерСтроки][ИмяКолДатчик] <= ДопустимоеЗначениеКонец Тогда
						
						ДанныеНаНачало = Маршрут[НомерСтроки][ИмяКолДатчик];
						Прервать;								
						
					КонецЕсли;								
					
				КонецЦикла;
				
			КонецЕсли;						
			
		КонецЕсли;
		
		Если ДанныеНаКонец=NULL ИЛИ ДанныеНаКонец=Неопределено
			ИЛИ ((НЕ ДопускатьЗначенияВнеВходногоДиапазона) И (ДанныеНаКонец < ДопустимоеЗначениеНачало ИЛИ ДанныеНаКонец > ДопустимоеЗначениеКонец)) Тогда
			
			ДанныеНаКонец = Неопределено;
						
			// Точка на конец невалидна, надо смотреть предыдущие данные
			НомерСтроки = ИндексКрайнейТочки-1;
			Пока НомерСтроки >= 0 Цикл
				ТекущееЗначениеДатчика = Маршрут[НомерСтроки][ИмяКолДатчик];
				
				Если ТекущееЗначениеДатчика=NULL
					ИЛИ ТекущееЗначениеДатчика=Неопределено Тогда
					НомерСтроки = НомерСтроки-1;
					Продолжить;								
				КонецЕсли;
				
				Если ТекущееЗначениеДатчика >= ДопустимоеЗначениеНачало
					И ТекущееЗначениеДатчика <= ДопустимоеЗначениеКонец Тогда
					
					ДанныеНаКонец = ТекущееЗначениеДатчика;
					Прервать;								
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки-1;
				
			КонецЦикла;						
			
		КонецЕсли;
		
		Если ДанныеНаНачало <> Неопределено И ДанныеНаНачало <> NULL И ДанныеНаКонец <> Неопределено И ДанныеНаКонец <> NULL Тогда
			
			Если НЕ КалибровочныйГрафик.Пустая() Тогда
				
				ДанныеНаНачало = ПреобразоватьЗначениеПоКалибровочномуГрафику(ДанныеНаНачало, КалибровочныйГрафик);
				ДанныеНаКонец = ПреобразоватьЗначениеПоКалибровочномуГрафику(ДанныеНаКонец, КалибровочныйГрафик);				
				
			КонецЕсли;
			
			Значение = МАКС(ДанныеНаКонец-ДанныеНаНачало,0);
			
		КонецЕсли;				
		
		
	КонецЕсли;	
	
	Возврат Значение;

КонецФункции // ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика()

// Возвращает значение параметра подсчет импульсов
//
// Параметры:
//  Маршрут					 - ТаблицаЗначений						 - Маршрут
//  Терминал				 - СправочникСсылка.ItobТерминалы		 - Ссылка на терминал.
//  НазначениеДатчика		 - СправочникСсылка.ItobНазначенияДатчиков	 - Ссылка на назначение датчика.
//  Датчик					 - СправочникСсылка.ItobДатчики				 - Ссылка на датчик.
//  КалибровочныйГрафик		 - СправочникСсылка.ItobКалибровочныеГрафики - Ссылка на калибровочный график.
//  УчитыватьКрайнююТочку	 - Булево									 - Учитывать крайнюю точку.
// 
// Возвращаемое значение:
//  Число - Значение параметра.
//
Функция ПолучитьЗначениеПараметраПодсчетИмпульсов(
	Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик, УчитыватьКрайнююТочку=Ложь) Экспорт
	
	// Обработка изменения значения датчиков
	
	Если НазначениеДатчика.Пустая() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	КодДатчика = Формат(Датчик.Код, "ЧН=0; ЧГ=0");
	
	ДопускатьЗначенияВнеВходногоДиапазона = Истина;
	ДопустимоеЗначениеНачало = 0;
	ДопустимоеЗначениеКонец  = 0;
	
	Если НЕ КалибровочныйГрафик.Пустая() Тогда
		ДопускатьЗначенияВнеВходногоДиапазона = КалибровочныйГрафик.ДопускатьЗначенияВнеВходногоДиапазона;
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
			Показатели = КалибровочныйГрафик.Показатели.Выгрузить();
			Показатели.Сортировать("Вход Возр");
			
			Если Показатели.Количество() > 1 Тогда
				ДопустимоеЗначениеНачало = Показатели[0].Вход;	
				ДопустимоеЗначениеКонец  = Показатели[Показатели.Количество()-1].Вход;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	ИндексКрайнейТочки = ?(УчитыватьКрайнююТочку, Маршрут.Количество()-1, Маршрут.Количество()-2);
	
	СыроеЗначение = 0;
	ИмяКолДатчик = "ЗначениеДатчика"+КодДатчика;
	// Проверка существования колонки
	Если Маршрут.Колонки.Найти(ИмяКолДатчик)=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредыдущееЗначениеДатчика = Неопределено;
	
	Если Маршрут.Количество()>0 И НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
		ТекущееЗначениеДатчика = Маршрут[0][ИмяКолДатчик];
		
		НужноИскатьВалиднуюПервуюТочку = Ложь;
		
		Если ТекущееЗначениеДатчика = Неопределено
			ИЛИ ТекущееЗначениеДатчика = NULL Тогда
			НужноИскатьВалиднуюПервуюТочку = Истина;			
		КонецЕсли;					
		
		Если (ТекущееЗначениеДатчика < ДопустимоеЗначениеНачало
			ИЛИ ТекущееЗначениеДатчика > ДопустимоеЗначениеКонец) Тогда			
			НужноИскатьВалиднуюПервуюТочку = Истина;			
		КонецЕсли;
		
		Если НужноИскатьВалиднуюПервуюТочку Тогда
			ТекущееЗначениеДатчика = ПолучитьВалидноеЗначениеДатчика(Терминал, Датчик, Маршрут[0].Период, ДопустимоеЗначениеНачало, ДопустимоеЗначениеКонец);		
			ПредыдущееЗначениеДатчика = ТекущееЗначениеДатчика;
		КонецЕсли;
	
	КонецЕсли;
		
	Для Счетчик = 0 По ИндексКрайнейТочки Цикл
		ТекущееЗначениеДатчика = Маршрут[Счетчик][ИмяКолДатчик];
		
		Если ТекущееЗначениеДатчика = Неопределено
			ИЛИ ТекущееЗначениеДатчика = NULL Тогда
			Продолжить;
			
		КонецЕсли;					
		
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона
			И (ТекущееЗначениеДатчика < ДопустимоеЗначениеНачало
			ИЛИ ТекущееЗначениеДатчика > ДопустимоеЗначениеКонец) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПредыдущееЗначениеДатчика = Неопределено Тогда
			ПредыдущееЗначениеДатчика = ТекущееЗначениеДатчика;
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущееЗначениеДатчика >= ПредыдущееЗначениеДатчика Тогда
			СыроеЗначение = СыроеЗначение+ТекущееЗначениеДатчика-ПредыдущееЗначениеДатчика;
		Иначе
			СыроеЗначение = СыроеЗначение+ТекущееЗначениеДатчика-ПредыдущееЗначениеДатчика+65535;
		КонецЕсли;
		
		ПредыдущееЗначениеДатчика = ТекущееЗначениеДатчика;
		
	КонецЦикла;
	
	Значение = ПреобразоватьЗначениеПоКалибровочномуГрафику(СыроеЗначение, КалибровочныйГрафик);
	
	Возврат Значение;

КонецФункции // ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика()

// Возвращает возможные параметры выработки объекта.
//
// Параметры:
//  ТекОбъект	 - Справочник.ItobТранспортныеСредства	 - Ссылка на ТС.
//  Период		 - Дата									 - Начало периода.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица датчиков.
//
Функция ПолучитьВозможныеПараметрыВыработкиОбъекта(ТекОбъект, Период) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыВыработки.Наименование,
	               |	ТерминалыДатчики.Назначение,
	               |	ТерминалыДатчики.Датчик,
	               |	ПривязкиТерминаловСрезПоследних.Объект,
	               |	ТерминалыДатчики.Датчик.Код КАК Код,
	               |	ТерминалыДатчики.КалибровочныйГрафик,
	               |	ПараметрыВыработки.Код КАК КодПараметраВыработки,
	               |	ПараметрыВыработки.Ссылка КАК ПараметрВыработкиСсылка,
	               |	ПараметрыВыработки.ВидПараметра КАК ВидПараметраВыработки,
	               |	ПривязкиТерминаловСрезПоследних.Терминал
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&НачПериода, Объект = &Объект) КАК ПривязкиТерминаловСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobПараметрыВыработки КАК ПараметрыВыработки
	               |			ПО ТерминалыДатчики.Назначение = ПараметрыВыработки.НазначениеДатчика
	               |		ПО ПривязкиТерминаловСрезПоследних.Терминал = ТерминалыДатчики.Ссылка
	               |ГДЕ
	               |	ПараметрыВыработки.ВидПараметра В (ЗНАЧЕНИЕ(Перечисление.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика), ПараметрыВыработки.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ItobВидыПараметровВыработки.ПодсчетИмпульсов))
	               |	И НЕ ПараметрыВыработки.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПараметрыВыработки.Наименование,
	               |	ТерминалыДатчики.Назначение,
	               |	ТерминалыДатчики.Датчик,
	               |	ПривязкиТерминаловСрезПоследних.Объект,
	               |	ТерминалыДатчики.Датчик.Код,
	               |	ТерминалыДатчики.КалибровочныйГрафик,
	               |	ПараметрыВыработки.Код,
	               |	ПараметрыВыработки.Ссылка,
	               |	ПараметрыВыработки.ВидПараметра,
	               |	ПривязкиТерминаловСрезПоследних.Терминал";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ItobПараметрыВыработки", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки"));

    Запрос.УстановитьПараметр("НачПериода", Период);
    Запрос.УстановитьПараметр("Объект", ТекОбъект);

	ТабДатчиков = Запрос.Выполнить().Выгрузить();
    		
	Возврат ТабДатчиков;	

КонецФункции // ПолучитьВозможныеПараметрыВыработкиОбъекта()

// Возвращает подвижный объект.
//
// Параметры:
//  Терминал - СправочникСсылка.ItobТерминалы	 - Указатель на терминал.
//  НаДату	 - Дата								 - Период отбора.
// 
// Возвращаемое значение:
//  СправочникСсылка.ItobСотрудники, СправочникСсылка.ItobТранспортныеСредства - Объект мониторинга.
//
Функция ПолучитьПодвижныйОбъект(Терминал, НаДату) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ItobПривязкиТрекеровСрезПоследних.Объект,
	                      |	ItobПривязкиТрекеровСрезПоследних.Терминал
	                      |ИЗ
	                      |	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&ДатаДокумента) КАК ItobПривязкиТрекеровСрезПоследних
	                      |ГДЕ
	                      |	ItobПривязкиТрекеровСрезПоследних.Терминал = &Терминал
	                      |	И ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен");
	Запрос.Параметры.Вставить("ДатаДокумента", НаДату);
	Запрос.Параметры.Вставить("Терминал", Терминал);
	
	ВыборкаЗапросаПоТерминалам = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапросаПоТерминалам.Количество() > 0 Тогда
		ВыборкаЗапросаПоТерминалам.Следующий();
		
		Возврат ВыборкаЗапросаПоТерминалам.Объект;
		
	КонецЕсли;	
	
	Возврат Неопределено;

КонецФункции

// Возвращает данные по интервалам движения.
//
// Параметры:
//  Терминал			 - СправочникСсылка.ItobТерминалы	 - Указатель на терминал.
//  НачДата				 - Дата								 - Начало периода интервала.
//  КонДата				 - Дата								 - Конец периода интервала.
//  ТаблицаИнтервалов	 - ТаблицаЗначений					 - Таблица интервалов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные по интервалам движения.
//
Функция ПолучитьДанныеПоИнтерваламДвижения(Терминал, НачДата, КонДата, ТаблицаИнтервалов) Экспорт
	
	РезТабИнтервалов = Новый ТаблицаЗначений;
	РезТабИнтервалов.Колонки.Добавить("Состояние");
	РезТабИнтервалов.Колонки.Добавить("Длительность");
	РезТабИнтервалов.Колонки.Добавить("СредняяСкорость");
	РезТабИнтервалов.Колонки.Добавить("МаксимальнаяСкорость");
	РезТабИнтервалов.Колонки.Добавить("Пробег");
	РезТабИнтервалов.Колонки.Добавить("НачалоИнтервала");
	РезТабИнтервалов.Колонки.Добавить("КонецИнтервала");
	РезТабИнтервалов.Колонки.Добавить("МестоСтоянки");
	РезТабИнтервалов.Колонки.Добавить("ДанныеВыработки");
	
	ТекущийПодвижныйОбъект = ПолучитьПодвижныйОбъект(Терминал, КонДата);
	Если НЕ ЗначениеЗаполнено(ТекущийПодвижныйОбъект) Тогда
		Возврат РезТабИнтервалов;	
	КонецЕсли;
	
	ТаблицаДатчиков = ПолучитьВозможныеПараметрыВыработкиОбъекта(ТекущийПодвижныйОбъект, КонДата);
	
	// Интервалы движения
	пПараметры = Новый Структура;
	пПараметры.Вставить("ИспользоватьДанныеРегистраИнтервалыДвижения", Ложь);
	пПараметры.Вставить("ИспользоватьПоправочныйКоэффициент", Истина);
	ТаблицаИнтервалов = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(ТекущийПодвижныйОбъект, 
		НачДата, КонДата+1, Истина, ТаблицаДатчиков.ВыгрузитьКолонку("Датчик"), пПараметры);
		
	Если ТаблицаИнтервалов.Количество() > 0 Тогда
		КрайняяСтрокаИнтервалов = ТаблицаИнтервалов[ТаблицаИнтервалов.Количество()-1];
		Если КрайняяСтрокаИнтервалов.ВремяКон = КонДата+1 Тогда
			// Для комфортного восприятия информации в отчетах
			КрайняяСтрокаИнтервалов.ВремяКон = КонДата;			
		КонецЕсли;	
	КонецЕсли;	
		
	Для Каждого СтрТаблицаИнтервалов Из ТаблицаИнтервалов Цикл
		
		НовСтрокаРез = РезТабИнтервалов.Добавить();
		НовСтрокаРез.Состояние = СтрТаблицаИнтервалов.Состояние;
		НовСтрокаРез.Длительность = СтрТаблицаИнтервалов.Длительность;
		НовСтрокаРез.СредняяСкорость = СтрТаблицаИнтервалов.СредняяСкорость;
		НовСтрокаРез.МаксимальнаяСкорость = СтрТаблицаИнтервалов.МаксимальнаяСкорость;
		НовСтрокаРез.Пробег = Окр(СтрТаблицаИнтервалов.Пробег,5);
		НовСтрокаРез.НачалоИнтервала = СтрТаблицаИнтервалов.ВремяНач;
		НовСтрокаРез.КонецИнтервала  = СтрТаблицаИнтервалов.ВремяКон;
		НовСтрокаРез.МестоСтоянки    = СтрТаблицаИнтервалов.МестоСтоянки;	
		
		ТекДанныеТерминала = СтрТаблицаИнтервалов.ДанныеТерминала.Скопировать();
		
		Если ТаблицаИнтервалов.Индекс(СтрТаблицаИнтервалов) < ТаблицаИнтервалов.Количество()-1
			И ТаблицаИнтервалов[ТаблицаИнтервалов.Индекс(СтрТаблицаИнтервалов)+1].ДанныеТерминала.Количество() > 0 Тогда
			
			СледДанныеТерминала = ТаблицаИнтервалов[ТаблицаИнтервалов.Индекс(СтрТаблицаИнтервалов)+1].ДанныеТерминала;
			ЗаполнитьЗначенияСвойств(ТекДанныеТерминала.Добавить(),СледДанныеТерминала[0]);
			
			УчитыватьКрайнююТочку = Истина;
			
		Иначе
			УчитыватьКрайнююТочку = Ложь;
			
		КонецЕсли;
		
		ДанныеПараметровВыработки = Новый Соответствие;
		Для Каждого СтрокаДатчиков Из ТаблицаДатчиков Цикл
			Если Не ТипЗнч(СтрокаДатчиков.КодПараметраВыработки) = Тип("Число")
				Или СтрокаДатчиков.КодПараметраВыработки > 255 Тогда
				// Код более 255 недопустим
				Продолжить;			
			КонецЕсли;
			
			ДанныеПараметра = 0;
			Если СтрокаДатчиков.ВидПараметраВыработки = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика Тогда
				    ДанныеПараметра = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
					ТекДанныеТерминала, Терминал, СтрокаДатчиков.Назначение, СтрокаДатчиков.Датчик, 
					СтрокаДатчиков.КалибровочныйГрафик, СтрТаблицаИнтервалов.ВремяНач, УчитыватьКрайнююТочку);
				
			ИначеЕсли СтрокаДатчиков.ВидПараметраВыработки = Перечисления.ItobВидыПараметровВыработки.ПодсчетИмпульсов Тогда
				ДанныеПараметра = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПодсчетИмпульсов(
					ТекДанныеТерминала, Терминал, СтрокаДатчиков.Назначение, СтрокаДатчиков.Датчик, 
					СтрокаДатчиков.КалибровочныйГрафик, УчитыватьКрайнююТочку);
				
			
			КонецЕсли;
			
			ДанныеПараметровВыработки[СтрокаДатчиков.КодПараметраВыработки] = Окр(ДанныеПараметра*1000,0);
			
		КонецЦикла;
		
		НовСтрокаРез.ДанныеВыработки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеДатчиковВСтроку(ДанныеПараметровВыработки);
		
	КонецЦикла;
	
	Возврат РезТабИнтервалов;

КонецФункции

// Выполняет пересчет выработки по периодам расчета.
//
Процедура ВыполнитьПересчетВыработкиПоПериодамРасчета() Экспорт
	
	// Возврат; // убрать после исправления проблемы загрузки цпу на sql сервере.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	0 КАК Номер
	//|ПОМЕСТИТЬ Цифры
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	1
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	2
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	3
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	4
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	5
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	6
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	7
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	8
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	9
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ItobПериодыРасчетаВыработки.Терминал КАК Терминал,
	//|	МАКСИМУМ(ItobПериодыРасчетаВыработки.ПериодДата) КАК ПериодДата,
	//|	ИСТИНА КАК КрайнийПериод
	//|ПОМЕСТИТЬ КрайниеПериоды
	//|ИЗ
	//|	РегистрСведений.ItobПериодыРасчетаВыработки КАК ItobПериодыРасчетаВыработки
	//|ГДЕ
	//|	НЕ ItobПериодыРасчетаВыработки.ВыработкаПодсчитана
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ItobПериодыРасчетаВыработки.Терминал
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ItobПериодыРасчетаВыработки.Терминал,
	//|	ВЫБОР
	//|		КОГДА МИНИМУМ(ItobПериодыРасчетаВыработки.ПериодДата) < ДОБАВИТЬКДАТЕ(КрайниеПериоды.ПериодДата, ДЕНЬ, -180)
	//|			ТОГДА ДОБАВИТЬКДАТЕ(КрайниеПериоды.ПериодДата, ДЕНЬ, -180)
	//|		ИНАЧЕ МИНИМУМ(ItobПериодыРасчетаВыработки.ПериодДата)
	//|	КОНЕЦ КАК НачДата,
	//|	КрайниеПериоды.ПериодДата КАК КонДата
	//|ПОМЕСТИТЬ НачальныеПериоды
	//|ИЗ
	//|	РегистрСведений.ItobПериодыРасчетаВыработки КАК ItobПериодыРасчетаВыработки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ КрайниеПериоды КАК КрайниеПериоды
	//|		ПО (КрайниеПериоды.Терминал = ItobПериодыРасчетаВыработки.Терминал)
	//|ГДЕ
	//|	ItobПериодыРасчетаВыработки.Терминал В
	//|			(ВЫБРАТЬ
	//|				КрайниеПериоды.Терминал
	//|			ИЗ
	//|				КрайниеПериоды КАК КрайниеПериоды)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ItobПериодыРасчетаВыработки.Терминал,
	//|	КрайниеПериоды.ПериодДата
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	НачальныеПериоды.Терминал,
	//|	НачальныеПериоды.НачДата,
	//|	НачальныеПериоды.КонДата,
	//|	ДОБАВИТЬКДАТЕ(НачальныеПериоды.НачДата, ДЕНЬ, Цифры1.Номер + 10 * Цифры2.Номер + 100 * Цифры3.Номер + 1000 * Цифры4.Номер) КАК Период
	//|ПОМЕСТИТЬ ТабДаты
	//|ИЗ
	//|	Цифры КАК Цифры1,
	//|	Цифры КАК Цифры2,
	//|	Цифры КАК Цифры3,
	//|	Цифры КАК Цифры4,
	//|	НачальныеПериоды КАК НачальныеПериоды
	//|ГДЕ
	//|	ДОБАВИТЬКДАТЕ(НачальныеПериоды.НачДата, ДЕНЬ, Цифры1.Номер + 10 * Цифры2.Номер + 100 * Цифры3.Номер + 1000 * Цифры4.Номер) < НачальныеПериоды.КонДата
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТабДаты.Терминал КАК Терминал,
	//|	ТабДаты.НачДата,
	//|	ТабДаты.КонДата,
	//|	ТабДаты.Период КАК ПериодДата,
	//|	ЕСТЬNULL(ItobКалькуляцияВыработки.Ссылка, НЕОПРЕДЕЛЕНО) КАК КалькуляцияСсылка,
	//|	ЕСТЬNULL(ItobПериодыРасчетаВыработки.ВыработкаПодсчитана, ЛОЖЬ) КАК ВыработкаПодсчитана
	//|ИЗ
	//|	ТабДаты КАК ТабДаты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ItobКалькуляцияВыработки КАК ItobКалькуляцияВыработки
	//|		ПО ТабДаты.Терминал = ItobКалькуляцияВыработки.Терминал
	//|			И (ТабДаты.Период = НАЧАЛОПЕРИОДА(ItobКалькуляцияВыработки.Дата, ДЕНЬ))
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobПериодыРасчетаВыработки КАК ItobПериодыРасчетаВыработки
	//|		ПО ТабДаты.Терминал = ItobПериодыРасчетаВыработки.Терминал
	//|			И ТабДаты.Период = ItobПериодыРасчетаВыработки.ПериодДата
	//|ГДЕ
	//|	НЕ ЕСТЬNULL(ItobПериодыРасчетаВыработки.ВыработкаПодсчитана, ЛОЖЬ)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Терминал,
	//|	ТабДаты.Период
	//|";
	
	// Ёлкин 30.05.2019
	// Попытка оптимизировать запрос
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Номер
	|ПОМЕСТИТЬ Цифры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ItobПериодыРасчетаВыработки.ПериодДата, МЕСЯЦ) КАК ПериодДата,
	|	ItobПериодыРасчетаВыработки.Терминал КАК Терминал
	|ПОМЕСТИТЬ втВыработкаКПересчетуПоМесяцам
	|ИЗ
	|	РегистрСведений.ItobПериодыРасчетаВыработки КАК ItobПериодыРасчетаВыработки
	|ГДЕ
	|	НЕ ItobПериодыРасчетаВыработки.ВыработкаПодсчитана
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВыработкаКПересчетуПоМесяцам.Терминал КАК Терминал
	|ПОМЕСТИТЬ втТерминалы
	|ИЗ
	|	втВыработкаКПересчетуПоМесяцам КАК втВыработкаКПересчетуПоМесяцам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ItobПериодыРасчетаВыработки.Терминал КАК Терминал,
	|	МИНИМУМ(ItobПериодыРасчетаВыработки.ПериодДата) КАК ПериодМин,
	|	МАКСИМУМ(ItobПериодыРасчетаВыработки.ПериодДата) КАК ПериодМакс
	|ПОМЕСТИТЬ втКрайниеПериодыВыработки
	|ИЗ
	|	РегистрСведений.ItobПериодыРасчетаВыработки КАК ItobПериодыРасчетаВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТерминалы КАК втТерминалы
	|		ПО ItobПериодыРасчетаВыработки.Терминал = втТерминалы.Терминал
	|
	|СГРУППИРОВАТЬ ПО
	|	ItobПериодыРасчетаВыработки.Терминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВыработкаКПересчетуПоМесяцам.ПериодДата КАК ПериодМесяц,
	|	втВыработкаКПересчетуПоМесяцам.Терминал КАК Терминал,
	|	ДОБАВИТЬКДАТЕ(втВыработкаКПересчетуПоМесяцам.ПериодДата, ДЕНЬ, Цифры1.Номер + 10 * Цифры2.Номер) КАК ПериодДень
	|ПОМЕСТИТЬ втВыработкаКПересчетуПоДнямПодготовка
	|ИЗ
	|	втВыработкаКПересчетуПоМесяцам КАК втВыработкаКПересчетуПоМесяцам,
	|	Цифры КАК Цифры1,
	|	Цифры КАК Цифры2
	|ГДЕ
	|	Цифры2.Номер МЕЖДУ 0 И 3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыработкаКПересчетуПоДнямПодготовка.Терминал КАК Терминал,
	|	втВыработкаКПересчетуПоДнямПодготовка.ПериодДень КАК ПериодДата,
	|	ЕСТЬNULL(ПериодыРасчетаВыработки.ВыработкаПодсчитана, ЛОЖЬ) КАК ВыработкаПодсчитана,
	|	ЕСТЬNULL(КалькуляцияВыработки.Ссылка, НЕОПРЕДЕЛЕНО) КАК КалькуляцияСсылка
	|ИЗ
	|	втВыработкаКПересчетуПоДнямПодготовка КАК втВыработкаКПересчетуПоДнямПодготовка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКрайниеПериодыВыработки КАК втКрайниеПериодыВыработки
	|		ПО втВыработкаКПересчетуПоДнямПодготовка.Терминал = втКрайниеПериодыВыработки.Терминал
	|			И втВыработкаКПересчетуПоДнямПодготовка.ПериодДень >= втКрайниеПериодыВыработки.ПериодМин
	|			И втВыработкаКПересчетуПоДнямПодготовка.ПериодДень < втКрайниеПериодыВыработки.ПериодМакс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobПериодыРасчетаВыработки КАК ПериодыРасчетаВыработки
	|		ПО втВыработкаКПересчетуПоДнямПодготовка.Терминал = ПериодыРасчетаВыработки.Терминал
	|			И втВыработкаКПересчетуПоДнямПодготовка.ПериодДень = ПериодыРасчетаВыработки.ПериодДата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ItobКалькуляцияВыработки КАК КалькуляцияВыработки
	|		ПО втВыработкаКПересчетуПоДнямПодготовка.Терминал = КалькуляцияВыработки.Терминал
	|			И (втВыработкаКПересчетуПоДнямПодготовка.ПериодДень = НАЧАЛОПЕРИОДА(КалькуляцияВыработки.Дата, ДЕНЬ))
	|ГДЕ
	|	(НЕ ЕСТЬNULL(ПериодыРасчетаВыработки.ВыработкаПодсчитана, ЛОЖЬ)
	|			ИЛИ КалькуляцияВыработки.Ссылка ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Терминал,
	|	ПериодДата";
	
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.КалькуляцияСсылка) Тогда			
			ДокументКалькуляции =  Выборка.КалькуляцияСсылка.ПолучитьОбъект();
			Если ДокументКалькуляции.ПометкаУдаления Тогда
				ДокументКалькуляции.УстановитьПометкуУдаления(Ложь);		
			КонецЕсли;					
		Иначе
			ДокументКалькуляции  = Документы.ItobКалькуляцияВыработки.СоздатьДокумент();
			ДокументКалькуляции.Дата = НачалоДня(Выборка.ПериодДата);
			ДокументКалькуляции.Терминал = Выборка.Терминал;				
		КонецЕсли;
		
		ДокументКалькуляции.ЗаполнитьДанныеДокумента();
		ДокументКалькуляции.ДополнительныеСвойства.Вставить("НеЗаполнитьДанныеДокумента",Истина);
		ДокументКалькуляции.Записать(РежимЗаписиДокумента.Проведение);	
	КонецЦикла;				   

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверка - соответствует ли строка выработки условию параметра 
//
Функция ПроверитьУсловие(СтрокаТЗ, УсловияОтбора, ТЗ)
	
	Для Каждого Условие Из УсловияОтбора Цикл
		
		// Для состояния в движении или стоянка
		Если ТипЗнч(Условие.Показатель) = Тип("Строка")
			И НЕ Условие.Показатель = "Скорость" Тогда
			
			Если Условие.Показатель = "Состояние" Тогда
				Если Условие.ВидСравнения = Перечисления.ItobВидыСравнения.Равно
					И НЕ (СтрокаТЗ.Состояние = Условие.Значение) Тогда
					
					Возврат Ложь;					
				ИначеЕсли Условие.ВидСравнения = Перечисления.ItobВидыСравнения.НеРавно
					И (СтрокаТЗ.Состояние = Условие.Значение) Тогда
					
					Возврат Ложь;
				КонецЕсли;
				
			ИначеЕсли Условие.Показатель = "Местонахождение" Тогда
				Если СтрокаТЗ.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных Тогда
					Возврат Ложь;				
				КонецЕсли;
				
				Вхождение = Ложь;
				
				// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны 
				Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
					МодульГеографическиеЗоны = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоны");
					Вхождение = МодульГеографическиеЗоны.ТочкаВГеозоне(СтрокаТЗ.Широта,
																	   СтрокаТЗ.Долгота,
																	   Условие.ПараметрыГеографическойЗоны);
				КонецЕсли;
				
				Если Условие.ВидСравнения = Перечисления.ItobВидыСравнения.Равно И НЕ Вхождение Тогда
					Возврат Ложь;
				ИначеЕсли Условие.ВидСравнения = Перечисления.ItobВидыСравнения.НеРавно И Вхождение Тогда
					Возврат Ложь;
				КонецЕсли;	
			
			КонецЕсли;				
			
		Иначе			
			
			ЗначениеДатчика = ?(Условие.Показатель="Скорость",СтрокаТЗ.Скорость,СтрокаТЗ["ЗначениеДатчика"+Условие.КодДатчика]);
			Если ЗначениеДатчика = NULL ИЛИ ЗначениеДатчика=Неопределено Тогда
				// Данные по этому датчику не идут
				ИндексСтроки = ТЗ.Индекс(СтрокаТЗ);
				Если ИндексСтроки > 0 
					И ТЗ[ИндексСтроки-1]["ЗначениеДатчика"+Условие.КодДатчика] <> NULL
					И ТЗ[ИндексСтроки-1]["ЗначениеДатчика"+Условие.КодДатчика] <> Неопределено Тогда
					ЗначениеДатчика = ТЗ[ИндексСтроки-1]["ЗначениеДатчика"+Условие.КодДатчика];
					
				Иначе
					Возврат Ложь;	
				
				КонецЕсли;
				
				Если ЗначениеДатчика = NULL 
					ИЛИ ЗначениеДатчика=Неопределено Тогда
					Возврат Ложь;					
				
				КонецЕсли;
				
			Иначе
				
				Если Условие.ВидСравнения = Перечисления.ItobВидыСравнения.НеРавно Тогда
					РезультатВыражения = НЕ Вычислить("ЗначениеДатчика = Условие.Значение");
					
				Иначе
					РезультатВыражения = Вычислить("ЗначениеДатчика "+Строка(Условие.ВидСравнения)+" Условие.Значение");
				
				КонецЕсли;
				
				Если НЕ РезультатВыражения Тогда
					Возврат Ложь;
				
				КонецЕсли;
			
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

// Вычисление значение параметра по пробегу
//
Функция ПолучитьЗначениеПараметраПоПробегу(УсловияОтбора, ТЗ)
			
	Пробег = 0;
	
	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		
		Проверка = ПроверитьУсловие(ТЗ[Счетчик], УсловияОтбора, ТЗ);
		Если Проверка Тогда
			
			Пробег = Пробег + ТЗ[Счетчик].Пробег;
			
		КонецЕсли;		
		
	КонецЦикла;	
	
	Возврат Пробег;
	
КонецФункции // ПолучитьЗначениеПараметраПоПробегу()

// Вычисление значение параметра по времени
//
Функция ПолучитьЗначениеПараметраПоВремени(УсловияОтбора, ТЗ)
		
	Время = 0;
	
	Для Счетчик = 0 По ТЗ.Количество() - 2 Цикл
		
		Проверка = ПроверитьУсловие(ТЗ[Счетчик], УсловияОтбора, ТЗ);
		Если Проверка Тогда
			
			Время = Время + (ТЗ[Счетчик+1].Период-ТЗ[Счетчик].Период);
			
		КонецЕсли;			
		
	КонецЦикла;	
	
	Возврат Время;
	
КонецФункции // ПолучитьЗначениеПараметраПоВремени()

Функция ПолучитьВалидноеЗначениеДатчика(Терминал, Датчик, Период, НачЗначение, КонЗначение)
	
	Результат = Неопределено;
	
	ПараметрыЗапроса = ItobРепликация.ПараметрыЗапросаПоследнееВалидноеЗначениеДатчика();
	ПараметрыЗапроса.Терминал = Терминал;                  
	ПараметрыЗапроса.НаДату = Период;
	ПараметрыЗапроса.Датчик = Датчик;
	ПараметрыЗапроса.ИнтервалВалидностиНачало = НачЗначение;
	ПараметрыЗапроса.ИнтервалВалидностиОкончание = КонЗначение;	
	ДанныеТерминалов = ItobРепликация.ПоследнееВалидноеЗначениеДатчика(ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ДанныеТерминалов)
		 И ЗначениеЗаполнено(Датчик) Тогда
		 
		КодДатчикаСтрокой = Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Датчик, "Код"), "ЧН=0; ЧГ=0");
		Результат = ДанныеТерминалов.ДанныеДатчиков_Обработанные[КодДатчикаСтрокой];
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

#Область ПодсистемаItobЦентрСпутниковогоМониторингаГеографическиеЗоны

// Возвращает таблицу географических зон
//
Функция ПолучитьГеографическиеЗоны()
	ТаблицаГеографическихЗон = Новый ТаблицаЗначений;
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны 
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныСервер = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоны");
		ТаблицаГеографическихЗон = МодульГеографическиеЗоныСервер.ПолучитьГеографическиеЗоны();
	КонецЕсли;

	
	Возврат ТаблицаГеографическихЗон;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

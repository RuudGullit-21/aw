
////////////////////////////////////////////////////////////////////////////////
// Общий клиентский модуль "Электронные карты"
//
// Содержит общие методы работы с картами
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции 

Процедура ОткрытьКартуИУстановитьРежим(Знач ПараметрыРаботыФормы) Экспорт
	
	ТипКартографии = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.ПустаяСсылка") Тогда 
		ТекстНСТР = Нстр("ru = 'Для использования электронных карт необходимо включить сервис ""Картография""
		|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ИмяФормы   = "Обработка.уатЭлектронныеКарты.Форма.ФормаКарты";
	ФормаКарты = ПолучитьФорму(ИмяФормы);
	Если НЕ ФормаКарты.КартаЗагружена Тогда
		ОткрытьФорму(ИмяФормы, ПараметрыРаботыФормы);
	Иначе 
		ФормаКарты.Активизировать();
		Оповестить("УстановитьРежимРаботы", ПараметрыРаботыФормы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеАдреса(Знач ПунктСсылка) Экспорт
	
	Если ТипЗнч(ПунктСсылка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		ДанныеАдресаJSON = ПунктСсылка.ЗначениеАдреса;
		
		Если ЗначениеЗаполнено(ДанныеАдресаJSON) Тогда
			Возврат уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSMПоJSON(ДанныеАдресаJSON);
		Иначе
		    // {Совместимость}
			// Этот код - для совместимости с старым форматом хранения адреса в XML.
			// Без XML надо просто сделать следующее:
			// Возврат Строка(ПунктСсылка);
			ДанныеАдресаXML = уатЭлектронныеКартыСервер.ПолучитьДанныеXMLПункта(ПунктСсылка);
			Если ДанныеАдресаXML = Неопределено Или ДанныеАдресаXML = "" Тогда 
				Возврат Строка(ПунктСсылка);
			Иначе 
				Возврат уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(ДанныеАдресаXML);
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Возврат Строка(ПунктСсылка);
	КонецЕсли;
	
КонецФункции

// Проверяет точку на принадлежность внутренней области круга
//
//  Параметры:
// ЦентрХ, ЦентрУ - Координаты центра круга (Лат,Лон)
// Радиус - Радиус круга
// Х,У - координатЫ точки (Лат, Лон)
// УдалениеОтЦентра - через данные параметр возвращается радиус от центра окружности до точки
Функция ТочкаВКруге(ЦентрХ,ЦентрУ,Радиус, Лат, Лон,УдалениеОтЦентра = Неопределено) Экспорт
	
	УдалениеОтЦентра = Окр(sqrt( (ЦентрХ - Лат) * (ЦентрХ - Лат) + (ЦентрУ - Лон) *  (ЦентрУ - Лон)),18);
	Если Радиус > УдалениеОтЦентра тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет точку на принадлежность внутренней области многоугольника.
// На границе значение функции не определено.
//
// Параметры:
//	x,y - точка
//	XP, YP - массив вершин многоугольника.
// *************************************************************************)
Функция ТочкаВПолигоне(МассивХ, МассивУ, Лат, Лон) Экспорт 
	Перем ВыхМассивХ, ВыхМассивУ;
	Результат = Ложь;
	КоличУзлов = МассивХ.Количество();
	Если КоличУзлов = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	ВыхМассивХ = Новый Массив;
	ВыхМассивУ = Новый Массив;
	ВыхМассивХ.Добавить(МассивХ[КоличУзлов-1]);
	ВыхМассивУ.Добавить(МассивУ[КоличУзлов - 1]);
	Для I = 0 По КоличУзлов-1 Цикл
		ВыхМассивХ.Добавить(МассивХ[I]);
		ВыхМассивУ.Добавить(МассивУ[I]);
	КонецЦикла;
	Для i = 0 По КоличУзлов-1 Цикл
		Если Не уэXOR((Лон>ВыхМассивУ[i]),(Лон<=ВыхМассивУ[i+1])) Тогда
			Если (Лат-ВыхМассивХ[i])<(Лон-ВыхМассивУ[i])*(ВыхМассивХ[i+1]-ВыхМассивХ[i])/(ВыхМассивУ[i+1]-ВыхМассивУ[i]) Тогда
				Результат =  Не Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции 

// Получает строковое описание константы
//
// Параметры:
// ° Раздел <Строка> - Группа в которой находится константа, соответствует
//    имени структуры, так как они заданы в обработке
// ° Конст <Число> - Значение константы
//
// Возвращаемое значение
//  <Строка> - возвращаемое описание константы если описание найдено, иначе пустая строка
Функция ПолучитьОписаниеКонстанты(Знач Раздел, Знач Конст) Экспорт
	
	Если Раздел = "Загрузка" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='successful completion';ru='успешное завершение'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='downloaded map has been download already';ru='загружаемая карта уже была загружена'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='map file not found';ru='не найден файл карты'");
		ИначеЕсли Конст = 3 Тогда
			Возврат НСтр("en='Map file is corrupted';ru='файл карты поврежден'");
		ИначеЕсли Конст = 4 Тогда
			Возврат НСтр("en='unknown file format';ru='неизвестный формат файла'");
		ИначеЕсли Конст = 5 Тогда
			Возврат НСтр("en='system error (error creating component for working with maps)';ru='системная ошибка (ошибка создания компонента для работы с картами)'");
		ИначеЕсли Конст = 6 Тогда
			Возврат НСтр("en='missing specified in the map codifier';ru='отсутствует указанный в карте кодификатор'");
		ИначеЕсли Конст = 7 Тогда
			Возврат НСтр("en='there is no file of map display style';ru='отсутствует файл стиля отображения карты'");
		ИначеЕсли Конст = 8 Тогда
			Возврат НСтр("en='not installed driver HASP';ru='не установлен драйвер HASP'");
		ИначеЕсли Конст = 9 Тогда
			Возврат НСтр("en='HASP key is not detected';ru='ключ HASP не обнаружен'");
		ИначеЕсли Конст = 10 Тогда
			Возврат НСтр("en='no license for loadable map or use GWX control';ru='нет лицензии на загружаемую карту или на использование GWX control'");
		ИначеЕсли Конст = 11 Тогда
			Возврат НСтр("en='no downloaded maps';ru='нет ни одной загруженной карты'");
		ИначеЕсли Конст = 12 Тогда
			Возврат НСтр("en='error in the table loading command';ru='ошибка в команде загрузки таблицы'");
		ИначеЕсли Конст = 13 Тогда
			Возврат НСтр("en='error in style';ru='ошибка в стиле'");
		ИначеЕсли Конст = 14 Тогда
			Возврат НСтр("en='transferred to the loading object is not a IGWTable object';ru='переданный для загрузки объект не является объектом IGWTable'");
		ИначеЕсли Конст = 15 Тогда
			Возврат НСтр("en='table is not loaded';ru='таблица не загружена'");
		ИначеЕсли Конст = 16 Тогда 
			Возврат НСтр("en='object to load not found';ru='объекты для загрузки не найдены'");
		ИначеЕсли Конст = 17 Тогда
			Возврат НСтр("en='base map is not downloaded';ru='базовая карта не загружена'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "РежимыРаботыМыши" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='nothing';ru='ничего'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='map moving';ru='перемещение карты'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='zoom in';ru='увеличение масштаба'");;
		ИначеЕсли Конст = 3 Тогда
			Возврат НСтр("en='increase and decrease (+Shift) scale';ru='увеличение и уменьшение (+Shift) масштаба'");
		ИначеЕсли Конст = 4 Тогда
			Возврат НСтр("en='zoom out';ru='уменьшение масштаба'");
		ИначеЕсли Конст = 5 Тогда
			Возврат НСтр("en='decrease and increase (+Shift) scale';ru='уменьшение и увеличение (+Shift) масштаба'");
		ИначеЕсли Конст = 6 Тогда
			Возврат НСтр("en='map rotation (not for all projections)';ru='поворот карты (не для всех проекций)'");;
		ИначеЕсли Конст = 7 Тогда
			Возврат НСтр("en='Map centered';ru='центрирование карты'");;
		ИначеЕсли Конст = 8 Тогда
			Возврат НСтр("en='selection of region';ru='выделение региона'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "Проекции" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='projection was not initialized';ru='проекция не была инициализирована'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='Mercator projection';ru='проекция Мектатора'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='projection Mactutor in continuous space';ru='проекция Мектатора в непрерывном пространстве'");
		ИначеЕсли Конст = 3 Тогда
			Возврат НСтр("en='conic projection';ru='коническая проекция'");
		ИначеЕсли Конст = 4 Тогда
			Возврат НСтр("en='spherical projection';ru='сферическая проекция'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "РежимыПодсказок" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='tooltips not show';ru='подсказки не показываются'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='show quick tips (names of objects)';ru='показываются краткие подсказки (имена объектов)'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='show detailed tips (all properties)';ru='показываются подробные подсказки (все свойcтва объектов)'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "ТипыОбъектов" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='geo object';ru='гео объект'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='database object';ru='объект базы данных'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='graph object';ru='объект графика'");
		ИначеЕсли Конст = 3 Тогда
			Возврат НСтр("en='communication object';ru='объект связи'");
		ИначеЕсли Конст = -1 Тогда
			Возврат НСтр("en='unknown';ru='неизвестный'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "СобытияМыши" Тогда
		Если Конст = 1 Тогда
			Возврат НСтр("en='pressing by left button';ru='нажатие левой кнопки'");
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='right click';ru='нажатие правой кнопки'"); 
		ИначеЕсли Конст = 4 Тогда
			Возврат НСтр("en='releasing the left button';ru='отпускание левой кнопки'");
		ИначеЕсли Конст = 8 Тогда
			Возврат НСтр("en='releasing the right button';ru='отпускание правой кнопки'");
		ИначеЕсли Конст = 16 Тогда
			Возврат НСтр("en='move the mouse over the window';ru='перемещение мыши над окном'");
		ИначеЕсли Конст = 32 Тогда
			Возврат НСтр("en='double clicking of left button';ru='двойное нажатие левой кнопки'");
		ИначеЕсли Конст = 64 Тогда
			Возврат НСтр("en='double-click';ru='двойное нажатие правой кнопки'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "РезультатРасчета" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='route is not calculated';ru='маршрут не просчитан'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='route is calculated partially';ru='маршрут просчитан частично'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='route calculated completely';ru='маршрут просчитан полностью'");
		КонецЕсли;
		
	ИначеЕсли Раздел = "ТочкиМаршрута" Тогда
		Если Конст = 0 Тогда
			Возврат НСтр("en='Deny point';ru='точка запрета'");
		ИначеЕсли Конст = 1 Тогда
			Возврат НСтр("en='starting point';ru='начальная точка'"); 
		ИначеЕсли Конст = 2 Тогда
			Возврат НСтр("en='passing point';ru='промежуточная точка'");
		ИначеЕсли Конст = 3 Тогда
			Возврат НСтр("en='endpoint';ru='конечная точка'");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция преобразует десятичное число в двоичное
// Пример
//  IntToBin(25)   -> "11001"
//  IntToBin(25,8) -> "00011001"
//  IntToBin(25,4) -> "1001"
//
Функция IntToBin(Знач Число, Знач КоличествоРазрядовЧисла=Неопределено) Экспорт
	
	Перем ВыходнаяСтрока;
	Перем Остаток;
	
	ВыходнаяСтрока = "";
	Делимое = Число;
	
	Пока Делимое>0 Цикл
		Остаток = Делимое%2;
		ВыходнаяСтрока=Строка(Остаток)+ВыходнаяСтрока;
		Делимое = Делимое - Остаток;
		Делимое = Делимое / 2;
	КонецЦикла;
	
	Если КоличествоРазрядовЧисла<>Неопределено Тогда
		Для Счетчик = СтрДлина(ВыходнаяСтрока) По КоличествоРазрядовЧисла Цикл
			ВыходнаяСтрока = "0"+ВыходнаяСтрока;
		КонецЦикла;
		ВыходнаяСтрока = Прав (ВыходнаяСтрока,КоличествоРазрядовЧисла);
	КонецЕсли;
	
	Возврат ВыходнаяСтрока;
	
КонецФункции

Функция СекВДату(Знач Время,Дней,Часов,Минут,Секунд) Экспорт 
	Дней = Цел(Время/(60*60*24));	
	Время = Время - Дней*(60*60*24);
	Часов = Цел(Время /(60*60));
	Время = Время - Часов*(60*60);	
	Минут = Цел(Время / 60);
	Секунд = Время - Минут*(60);
КонецФункции

// Функция выполняет логическую операцию XOR для булевских переменных
//
// Параметры:
//  А            - первый параметр
//  B            - второй параметр
// 
// Возвращаемое значение:
//  результат операции
//
Функция уэXOR(перА, перВ) Экспорт
	Если перА и Не перВ Тогда
		Результат = Истина;
	ИначеЕсли перА и перВ Тогда
		Результат = Ложь;
	ИначеЕсли (Не перА) и перВ Тогда
		Результат = Истина;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПредставлениеПунктаНазначения(ЗначенияПолей, ТипЭлектронныхКарт = Неопределено) Экспорт
	
	Если ТипЭлектронныхКарт = Неопределено Тогда
		ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПодсказкиАдресов_ТипПоставщика");
	КонецЕсли;
	Возврат уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(ЗначенияПолей,,, ТипЭлектронныхКарт);
	
КонецФункции

Процедура ГеокодироватьКоординатыВПунктеНазначения(Форма, СообщатьОбОшибках = Истина, РезультатВМассив = Ложь) Экспорт
	
	мЛат = 0;
	мЛон = 0;
	
	Если РезультатВМассив Тогда
		ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
		Если Не ЗначениеЗаполнено(ТипЭлектронныхКарт) Тогда
			Если СообщатьОбОшибках Тогда
				ТекстНСТР = Нстр("ru = 'Для выбора из нескольких вариантов геокодирования пунктов необходимо включить сервис ""Подсказки при вводе адресов""
				|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Иначе
		ТипЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("Геокодирование");
		Если Не ЗначениеЗаполнено(ТипЭлектронныхКарт) Тогда
			Если СообщатьОбОшибках Тогда
				ТекстНСТР = Нстр("ru = 'Для геокодирования пунктов необходимо включить сервис ""Геокодирование""
				|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
		Или ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс")
		Или ТипЭлектронныхКарт = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.DaData") Тогда
		// {Совместимость}
		// Этот код - для совместимости с старым форматом хранения адреса в XML.	
		ДопПараметры = Новый Структура;
		Если РезультатВМассив Тогда
			ДопПараметры.Вставить("РезультатВМассив", РезультатВМассив);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.ЗначениеАдреса) Тогда
			стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSMПоJSON(Форма.Объект.ЗначениеАдреса, Ложь,,ДопПараметры, ТипЭлектронныхКарт);
		Иначе
			стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(Форма.ЗначенияПолей, Ложь, ДопПараметры, ТипЭлектронныхКарт);
		КонецЕсли;
		// {/Совместимость}
		ТекстОшибкиOSM = "";
		
		мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
		Если ТекстОшибкиOSM = "" И РезультатВМассив И мсвКоординат.Количество() = 0 Тогда
			ТекстОшибкиOSM = НСтр("en='Failed to get coordinates for address';ru='Не удалось получить координаты по адресу'") + " """+стрПредставлениеПункта+"""." + Символы.ПС + 
			НСтр("en='Try to input other names or key words.';ru='Попробуйте ввести другие названия или ключевые слова.'");
		КонецЕсли;
		
		Если ТекстОшибкиOSM = "" И РезультатВМассив И мсвКоординат.Количество() > 0 Тогда
			ОткрытьФорму("Справочник.уатПунктыНазначения.Форма.ФормаВыбораРезультатаГеокодирования", 
				Новый Структура("мсвКоординат, Пункт", мсвКоординат, Форма.Объект.Ссылка), 
				Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ТекстОшибкиOSM = "" И Не РезультатВМассив Тогда
			мЛат = мсвКоординат.Лат;
			мЛон = мсвКоординат.Лон;
			
			Форма.Объект.Лат = мЛат;
			Форма.Объект.Лон = мЛон;
			
			ТекстНСТР = НСтр("en='Point coordinates are installed';ru='Координаты пункта установлены'");
			ПоказатьОповещениеПользователя(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
			Форма.Модифицированность = Истина;
		Иначе 
			// {Совместимость}
			// Этот код - для совместимости с старым форматом хранения адреса в XML.	
			Если ЗначениеЗаполнено(Форма.Объект.ЗначениеАдреса) Тогда
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSMПоJSON(Форма.Объект.ЗначениеАдреса,, Истина, ДопПараметры, ТипЭлектронныхКарт);
			Иначе
				стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаOSM(Форма.ЗначенияПолей, Истина, ДопПараметры, ТипЭлектронныхКарт);
			КонецЕсли;
			// {/Совместимость}
			ТекстОшибкиOSM = "";
			мсвКоординат = уатЭлектронныеКартыКлиент.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибкиOSM);
			Если ТекстОшибкиOSM = "" И РезультатВМассив И мсвКоординат.Количество() = 0 Тогда
				ТекстОшибкиOSM = НСтр("en='Failed to get coordinates for address';ru='Не удалось получить координаты по адресу'") + " """+стрПредставлениеПункта+"""." + Символы.ПС + 
				НСтр("en='Try to input other names or key words.';ru='Попробуйте ввести другие названия или ключевые слова.'");
			КонецЕсли;
			Если ТекстОшибкиOSM = "" И РезультатВМассив И мсвКоординат.Количество() > 0 Тогда
				ОткрытьФорму("Справочник.уатПунктыНазначения.Форма.ФормаВыбораРезультатаГеокодирования", 
					Новый Структура("мсвКоординат, Пункт", мсвКоординат, Форма.Объект.Ссылка),
					Форма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли ТекстОшибкиOSM = "" И Не РезультатВМассив Тогда
				мЛат = мсвКоординат.Лат;
				мЛон = мсвКоординат.Лон;
				
				Форма.Объект.Лат = мЛат;
				Форма.Объект.Лон = мЛон;
				
				ТекстНСТР = НСтр("en='Point coordinates are installed';ru='Координаты пункта установлены'");
				ПоказатьОповещениеПользователя(ТекстНСТР,,, БиблиотекаКартинок.Информация32);
				Форма.Модифицированность = Истина;
			Иначе 
				Если СообщатьОбОшибках Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиOSM, Форма.Объект.Ссылка, "Адрес");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИнтернетСоедниениеДоступно() Экспорт
	
	#Если ВебКлиент Тогда
		Возврат Истина;
		
	#Иначе
		Отказ = Ложь;
		
		// проверим наличие интернет-соединения
		СерверИсточник = "yandex.ru";
		НТТР = Новый HTTPСоединение(СерверИсточник);
		
		Адрес = "/";
		ВремКаталог = КаталогВременныхФайлов() + "tmpTaxi";
		СоздатьКаталог(ВремКаталог);
		УдалитьФайлы(ВремКаталог, "*.*");
		Попытка
			НТТР.Получить(Адрес, ВремКаталог + "\" + "tmp");
		Исключение
			Отказ = Истина;
		КонецПопытки;
		УдалитьФайлы(ВремКаталог);
		
		Возврат Не Отказ;
	#КонецЕсли
	
КонецФункции // ИнтернетСоедниениеДоступно()

Процедура ИнициализироватьКартуLeaflet(Форма, Реквизит, Отказ) Экспорт
	
	Попытка 
		Форма[Реквизит] = 
		"<HTML>
		|<OBJECT id=mapHTML classid=CLSID:DF13CA26-F140-406C-9DE0-6AF2712B1C5F width=""100%"" height=""100%"">
		|</OBJECT>
		|</HTML>";
		
	Исключение
		ТекстОшибки = НСтр("en='Failed to create object of map.';ru='Не удалось создать объект карты.'") +" " + Символы.ПС +
		НСтр("en='Ensure that ActiveX security settings are configured correctly';ru='Убедитесь в корректной настройке параметров безопасности ActiveX'") + Символы.ПС +
		НСтр("en='and plug-ins in Internet options.';ru='и модулей подключения в свойствах обозревателя.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоОтветChromium(Знач стрMessage) Экспорт
	
	стрСообщение = СокрЛП(стрMessage);
	
	Если НРег(Лев(стрСообщение, 17)) = НРег("<leafletResponse>")
		И НРег(Прав(стрСообщение, 18)) = НРег("</leafletResponse>") Тогда 
			Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоОтветChromium()

Функция ПолучитьЦветLeaflet(Знач Красный, Знач Зеленый, Знач Синий) Экспорт
	
	ЦветСтр = "#"+ДесятичноеВШестнадцатеричное(Красный)+ДесятичноеВШестнадцатеричное(Зеленый)+ДесятичноеВШестнадцатеричное(Синий);
	
	Возврат ЦветСтр;
	
КонецФункции // ПолучитьЦветLeaflet()

Функция ДесятичноеВШестнадцатеричное(Знач дЧисло)
	
	Если дЧисло = 0 Тогда 
		Возврат "00";
	КонецЕсли;
	
	База = 16;
	Результат = "";
	Пока дЧисло <> 0 Цикл
		Поз =дЧисло % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		дЧисло = Цел(дЧисло / База);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда 
		Возврат "0" + Результат;
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ДесятичноеВШестнадцатеричное()

// Процедура выполняет преобразование ответа карт в структуру.
//
Процедура ПрочитатьОтветChromiumВСтруктуруКлиент(стрСообщение, Результат, флОшибка)
	
#Если Не ВебКлиент Тогда
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(стрСообщение);
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		флОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("command") Тогда 
			ЧтениеXML.Прочитать();
			Результат.command = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("code") Тогда 
			ЧтениеXML.Прочитать();
			Результат.code = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("description") Тогда 
			ЧтениеXML.Прочитать();
			Результат.description = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("data") Тогда
			Если НРег(Результат.command) = НРег("pointClick") Тогда 
				Если НРег(ЧтениеXML.Имя) = НРег("data") Тогда
					ЧтениеXML.Прочитать();
					Результат.guid = ЧтениеXML.Значение;
				КонецЕсли;
			ИначеЕсли НРег(Результат.command) = НРег("drawObjects") Тогда 
				Результат.Вставить("data", Новый Массив());
				
				мсвКоординатыОбъекта = Неопределено;
				стрКоординатыТочки   = Неопределено;
				
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("object") Тогда 
						мсвКоординатыОбъекта = Новый Массив();
						
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lat") Тогда 
						стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лат = Число(ЧтениеXML.Значение);
						ЧтениеXML.Прочитать();
						ЧтениеXML.Прочитать();
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лон = Число(ЧтениеXML.Значение);
						мсвКоординатыОбъекта.Добавить(стрКоординатыТочки);
						
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("object") Тогда 
						Результат.data.Добавить(мсвКоординатыОбъекта);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли НРег(Результат.command) = НРег("geozoneEdit") Тогда 
				Результат.Вставить("data", Новый Массив());
				
				стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
				ФлагЛат = Ложь;
				ФлагЛон = Ложь;
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lat") Тогда 
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лат = Число(ЧтениеXML.Значение);
						ФлагЛат = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lon") Тогда
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лон = Число(ЧтениеXML.Значение);
						ФлагЛон = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
						ЧтениеXML.Прочитать();
						Результат.guid = ЧтениеXML.Значение;;
					Иначе
						Если ФлагЛат И ФлагЛон Тогда
							Результат.data.Добавить(стрКоординатыТочки);
							ФлагЛат = Ложь;
							ФлагЛон = Ложь;
							стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			ИначеЕсли НРег(Результат.command) = НРег("geozoneCreate") Тогда
				Результат.Вставить("data", Новый Массив());
				
				стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
				ФлагЛат = Ложь;
				ФлагЛон = Ложь;
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lat") Тогда 
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лат = Число(ЧтениеXML.Значение);
						ФлагЛат = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("lon") Тогда
						ЧтениеXML.Прочитать();
						стрКоординатыТочки.Лон = Число(ЧтениеXML.Значение);
						ФлагЛон = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
						ЧтениеXML.Прочитать();
						Результат.guid = ЧтениеXML.Значение;
					Иначе
						Если ФлагЛат И ФлагЛон Тогда
							Результат.data.Добавить(стрКоординатыТочки);
							ФлагЛат = Ложь;
							ФлагЛон = Ложь;
							стрКоординатыТочки = Новый Структура("Лат, Лон", 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НРег(Результат.command) = НРег("geozoneSelection") Тогда
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("guid") Тогда
						ЧтениеXML.Прочитать();
						Результат.guid = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НРег(Результат.command) = НРег("makescreenshot") Тогда
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
						Результат.data.Вставить("screenshot", Строка(ЧтениеXML.Значение));
					КонецЕсли;
				КонецЦикла;
			Иначе 
				Пока Не (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НРег(ЧтениеXML.Имя) = НРег("data")) И ЧтениеXML.Прочитать() Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
						имяУзла = ЧтениеXML.Имя;
						ЧтениеXML.Прочитать();
						Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
							Результат.data.Вставить(Строка(имяУзла), Строка(ЧтениеXML.Значение));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
#КонецЕсли
	
КонецПроцедуры

Функция ДесериализоватьОтветChromium(Знач стрMessage, флОшибка) Экспорт
	
	флОшибка = Ложь;
	
	Результат = Новый Структура("command, code, description, data, guid","","","",Новый Структура,"");
	
	стрСообщение = СокрЛП(стрMessage);
	
	#Если ВебКлиент Тогда
		уатЭлектронныеКартыСервер.ПрочитатьОтветChromiumВСтруктуруСервер(стрСообщение, Результат, флОшибка);
	#Иначе
		ПрочитатьОтветChromiumВСтруктуруКлиент(стрСообщение, Результат, флОшибка);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // ДесериализоватьОтветChromium()

Функция ГеокодироватьАдресOSM(Знач стрАдрес, Знач ДопПараметры=Неопределено, ТекстОшибки) Экспорт
	
	КоличествоПолученныхРезультатов = Неопределено;
	Результат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрАдрес, ДопПараметры, ТекстОшибки, КоличествоПолученныхРезультатов);
	
	Если КоличествоПолученныхРезультатов = 0 Тогда
		ТекстОшибки = "";
		ЭтоГеокодированиеOSM = Истина;
		стрПредставлениеПункта = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаБезСокращений(стрАдрес,, ЭтоГеокодированиеOSM);
		Результат = уатЭлектронныеКартыСервер.ГеокодироватьАдресOSM(стрПредставлениеПункта, ДопПараметры, ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ГеокодироватьАдресOSM()

Функция ПолучитьАдресПоКоординатамOSM(Знач Широта, Знач Долгота, Знач ДопПараметры=Неопределено, ТекстОшибки="") Экспорт
	
	Возврат уатЭлектронныеКартыСервер.ПолучитьАдресПоКоординатамOSM(Широта, Долгота, ДопПараметры, ТекстОшибки);
	
КонецФункции // ПолучитьАдресПоКоординатамOSM()

Процедура ПроверитьКартыOSMВПодчиненнойФорме(Знач ФормаКарты, ТекстОшибки) Экспорт
	
	Если ФормаКарты = Неопределено Тогда 
		ТекстОшибки = НСтр("en='Working with this form is possible only while the form ""Electronic maps"" is open.';ru='Работа с данной формой возможна только при открытой форме ""Электронные карты"".'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПодсказкиПоАдресу(Знач стрАдрес, ТекстОшибки= "") Экспорт
	
	Возврат уатЭлектронныеКартыСервер.ПолучитьПодсказкиПоАдресу(стрАдрес, ТекстОшибки);
	
КонецФункции

// Функция предназначена для разбиения времени из секунд на дни, минуты, секунды.
Функция ПривестиВремяКЧМС(Знач ВремяВСек) Экспорт
	
	Результат = Новый Структура("Часов,Минут,Секунд",0,0,0);
	
	Результат.Часов  = Цел(ВремяВСек / 3600);
	Результат.Минут  = Цел((ВремяВСек - Результат.Часов*3600)/60);
	Результат.Секунд = ВремяВСек - (Результат.Часов*3600 + Результат.Минут*60);
	
	Возврат Результат;
	
КонецФункции // ПривестиВремяКЧМС()

Функция ПолучитьЧисловойМаркер(Знач Число, Знач Красный, Знач Зеленый, Знач Синий, Знач ЦветФона="#ffffff") Экспорт
	
	ЦветСтр = ПолучитьЦветLeaflet(Красный, Зеленый, Синий);
	
	стрМаркер = 
	"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
	|
	|<svg
	|   xmlns:dc=""http://purl.org/dc/elements/1.1/""
	|   xmlns:cc=""http://creativecommons.org/ns#""
	|   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	|   xmlns:svg=""http://www.w3.org/2000/svg""
	|   xmlns=""http://www.w3.org/2000/svg""
	|   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
	|   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
	|   width=""32""
	|   height=""32""
	|   viewBox=""0 0 8.46656 8.46656""
	|   version=""1.1""
	|   id=""svg8"">
	|  <defs
	|     id=""defs2"" />
	|  <sodipodi:namedview
	|     id=""base""
	|     pagecolor=""#ffffff""
	|     bordercolor=""#666666""
	|     borderopacity=""1.0""
	|     inkscape:pageopacity=""0.0""
	|     inkscape:pageshadow=""2""
	|     inkscape:zoom=""8""
	|     inkscape:cx=""1.585363""
	|     inkscape:cy=""4.9260586""
	|     inkscape:document-units=""px""
	|     inkscape:current-layer=""layer1""
	|     showgrid=""false""
	|     units=""px""
	|     inkscape:window-width=""1920""
	|     inkscape:window-height=""1018""
	|     inkscape:window-x=""-8""
	|     inkscape:window-y=""-8""
	|     inkscape:window-maximized=""1"" />
	|  <metadata
	|     id=""metadata5"">
	|    <rdf:RDF>
	|      <cc:Work
	|         rdf:about="""">
	|        <dc:format>image/svg+xml</dc:format>
	|        <dc:type
	|           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" />
	|        <dc:title />
	|      </cc:Work>
	|    </rdf:RDF>
	|  </metadata>
	|  <g
	|     inkscape:label=""Layer 1""
	|     inkscape:groupmode=""layer""
	|     id=""layer1""
	|     transform=""translate(0,-288.53332)"">
	|    <circle
	|       style=""opacity:1;fill:"+ЦветФона+";fill-opacity:1;fill-rule:evenodd;stroke:"+ЦветСтр+";stroke-width:0.88801676;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
	|       id=""path4517""
	|       cx=""4.2332802""
	|       cy=""292.7666""
	|       r=""3.7892716"" />
	|    <text
	|       xml:space=""preserve""
	|       style=""font-style:normal;font-weight:normal;font-size:4.67584848px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:"+ЦветСтр+";fill-opacity:1;stroke:none;stroke-width:0.3506887;""
	|       x=""4.2470031""
	|       y=""294.5502""
	|       id=""text4525""><tspan
	|         sodipodi:role=""line""
	|         id=""tspan4523""
	|         x=""4.2470031""
	|         y=""294.5502""
	|         style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Arial;-inkscape-font-specification:Arial;text-align:center;text-anchor:middle;stroke-width:0.3506887;fill:"+ЦветСтр+";""
	|         transform=""matrix(0.89888768,0,0,0.89888768,0.73501336,29.372542)"">"+Строка(Число)+"</tspan></text>
	|  </g>
	|</svg>
	|";
	
	СтрокаBASE64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(стрМаркер));
	
	ДанныеМаркера = "";
	Для Сч = 1 По СтрЧислоСтрок(СтрокаBASE64) Цикл
		ДанныеМаркера = ДанныеМаркера + СтрПолучитьСтроку(СтрокаBASE64, Сч);
	КонецЦикла;
	
	Возврат "data:image/svg+xml;utf8;base64," + ДанныеМаркера;
	
КонецФункции // ПолучитьЧисловойМаркер()

// Функция предназначена для получения маркера пункта по заказу.
//
// Параметры:
//  ТипПункта - Число - тип пункта:
//                      1 - пункт погрузки, не размещен;
//                      2 - пункт погрузки, размещен;
//                      3 - промежуточный пункт, не размещен;
//                      4 - промежуточный пункт, размещен;
//                      5 - пункт разгрузки, не размещен;
//                      6 - пункт разгрузки, размещен.
//  Красный   - Число - цвет маркера (красная составляющая).
//  Зеленый   - Число - цвет маркера (зеленая составляющая).
//  Синий     - Число - цвет маркера (синяя составляющая).
// 
// Возвращаемое значение:
//   - Строка - Маркер для размещения на карте.
//
Функция ПолучитьМаркерПункта(Знач ТипПункта = "", Знач Красный = "", Знач Зеленый = "", Знач Синий = "",
	ЦветСтрока = "", МаркерВыделен = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЦветСтрока) Тогда
		ЦветСтрока = ПолучитьЦветLeaflet(Красный, Зеленый, Синий);
	КонецЕсли;
	
	Если ТипПункта = 1 Тогда 
		МаркерСтрока = МаркерПунктаПогрузкиПустой(ЦветСтрока, МаркерВыделен);
	ИначеЕсли ТипПункта = 2 Тогда 
		МаркерСтрока = МаркерПунктаПогрузкиПолный(ЦветСтрока);
	ИначеЕсли ТипПункта = 3 Тогда 
		МаркерСтрока = МаркерПромежуточногоПунктаПустой(ЦветСтрока);
	ИначеЕсли ТипПункта = 4 Тогда 
		МаркерСтрока = МаркерПромежуточногоПунктаПолный(ЦветСтрока);
	ИначеЕсли ТипПункта = 5 Тогда 
		МаркерСтрока = МаркерПунктаРазгрузкиПустой(ЦветСтрока, МаркерВыделен);
	ИначеЕсли ТипПункта = 6 Тогда 
		МаркерСтрока = МаркерПунктаРазгрузкиПолный(ЦветСтрока);
	Иначе
		Возврат "";
	КонецЕсли;

	СтрокаBASE64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(МаркерСтрока));
	
	#Если ВебКлиент Тогда				
		ДанныеМаркера = "data:image/svg+xml;utf8;base64,";
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаBASE64) Цикл
			ДанныеМаркера = ДанныеМаркера + СтрПолучитьСтроку(СтрокаBASE64, Сч);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеМаркера) Тогда
			Возврат  ДанныеМаркера;
		Иначе
			Возврат "";
		КонецЕсли;
	#Иначе		
		ДанныеМаркера = "";
		ТекстПостроитель = Новый ЗаписьXML;
		ТекстПостроитель.УстановитьСтроку();
		
		ДанныеМаркера = "";
		
		ТекстПостроитель.ЗаписатьБезОбработки("data:image/svg+xml;utf8;base64,");
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаBASE64) Цикл
			ТекстПостроитель.ЗаписатьБезОбработки(СтрПолучитьСтроку(СтрокаBASE64, Сч));
		КонецЦикла;
		
		ДанныеМаркера = ТекстПостроитель.Закрыть();
		Если ЗначениеЗаполнено(ДанныеМаркера) Тогда
			Возврат  ДанныеМаркера;
		Иначе
			Возврат "";
		КонецЕсли;
	#КонецЕсли

	
КонецФункции // ПолучитьМаркерПункта()

// Функция предназначена для получения маркера пункта по заказу.
//
// Параметры:
//  ТипПункта - Число - тип пункта:
//                      1 - пункт погрузки, не размещен;
//                      2 - пункт погрузки, размещен;
//                      3 - промежуточный пункт, не размещен;
//                      4 - промежуточный пункт, размещен;
//                      5 - пункт разгрузки, не размещен;
//                      6 - пункт разгрузки, размещен.
//  Красный   - Число - цвет маркера (красная составляющая).
//  Зеленый   - Число - цвет маркера (зеленая составляющая).
//  Синий     - Число - цвет маркера (синяя составляющая).
// 
// Возвращаемое значение:
//   - Строка - Маркер для размещения на карте.
//
Функция ПолучитьМаркерТС(ТипТС = 1, ЦветСостояния = "",
	ИспользуетсяМП = Ложь, НеНаЛинии = Ложь) Экспорт
	
	Если ТипЗнч(ЦветСостояния) = Тип("Структура") Тогда
		ЦветСтрока = ПолучитьЦветLeaflet(ЦветСостояния.Красный, ЦветСостояния.Зеленый, ЦветСостояния.Синий);
	Иначе
		Если НЕ ЗначениеЗаполнено(ЦветСтрока) Тогда
			ЦветСтрока = "#A0A0A0";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипТС = 1 Тогда 
		МаркерСтрока = МаркерТССвободно(ИспользуетсяМП, НеНаЛинии);
	ИначеЕсли ТипТС = 2 Тогда 
		МаркерСтрока = МаркерТССЗанято(ЦветСтрока, ИспользуетсяМП, НеНаЛинии);
	Иначе
		Возврат "";
	КонецЕсли;

	СтрокаBASE64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(МаркерСтрока));
	
	#Если ВебКлиент Тогда				
		ДанныеМаркера = "data:image/svg+xml;utf8;base64,";
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаBASE64) Цикл
			ДанныеМаркера = ДанныеМаркера + СтрПолучитьСтроку(СтрокаBASE64, Сч);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеМаркера) Тогда
			Возврат  ДанныеМаркера;
		Иначе
			Возврат "";
		КонецЕсли;
	#Иначе		
		ДанныеМаркера = "";
		ТекстПостроитель = Новый ЗаписьXML;
		ТекстПостроитель.УстановитьСтроку();
		
		ДанныеМаркера = "";
		
		ТекстПостроитель.ЗаписатьБезОбработки("data:image/svg+xml;utf8;base64,");
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаBASE64) Цикл
			ТекстПостроитель.ЗаписатьБезОбработки(СтрПолучитьСтроку(СтрокаBASE64, Сч));
		КонецЦикла;
		
		ДанныеМаркера = ТекстПостроитель.Закрыть();
		Если ЗначениеЗаполнено(ДанныеМаркера) Тогда
			Возврат  ДанныеМаркера;
		Иначе
			Возврат "";
		КонецЕсли;
	#КонецЕсли

	
КонецФункции // ПолучитьМаркерПункта()

Функция МаркерТССвободно(ИспользуетсяМП = Ложь, НеНаЛинии = Ложь)
	
	Если ИспользуетсяМП Тогда
		
		Если НЕ НеНаЛинии Тогда
			ЦветЛампочки = "#32cd32"; // включена
		Иначе
			ЦветЛампочки = "#A0A0A0"; // выключена
		КонецЕсли;
		СтрокаЛампочки = СтрШаблон(НСтр("ru = '|<circle cx=""28"" cy=""5"" r=""5"" fill=""%1""/>
		|<circle cx=""28"" cy=""5"" r=""4.5"" stroke=""white""/>'"), ЦветЛампочки);

	Иначе
		СтрокаЛампочки = "";
	КонецЕсли;

	ТекстМакета = Нстр("ru = '<svg width=""33"" height=""33"" viewBox=""0 0 33 33"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
         |<g clip-path=""url(#clip0_1951_3295)"">
         |<circle cx=""15.9995"" cy=""17"" r=""16"" fill=""white""/>
         |<circle cx=""15.9995"" cy=""17"" r=""15.5"" fill=""white"" stroke=""#A0A0A0"" stroke-dasharray=""2 2""/>
         |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M9.6 18.7391V22.8696C9.6 23.5965 9.912 24.2491 10.4 24.7035V26.1739C10.4 26.393 10.4843 26.6031 10.6343 26.758C10.7843 26.913 10.9878 27 11.2 27H12C12.2122 27 12.4157 26.913 12.5657 26.758C12.7157 26.6031 12.8 26.393 12.8 26.1739V25.3478H19.2V26.1739C19.2 26.393 19.2843 26.6031 19.4343 26.758C19.5843 26.913 19.7878 27 20 27H20.8C21.0122 27 21.2157 26.913 21.3657 26.758C21.5157 26.6031 21.6 26.393 21.6 26.1739V24.7035C22.088 24.2491 22.4 23.5965 22.4 22.8696V18.7391H9.6ZM18.7515 23.3327C18.9765 23.5651 19.2817 23.6957 19.6 23.6957C19.9183 23.6957 20.2235 23.5651 20.4485 23.3327C20.6736 23.1003 20.8 22.7852 20.8 22.4565C20.8 22.1279 20.6736 21.8127 20.4485 21.5803C20.2235 21.3479 19.9183 21.2174 19.6 21.2174C19.2817 21.2174 18.9765 21.3479 18.7515 21.5803C18.5264 21.8127 18.4 22.1279 18.4 22.4565C18.4 22.7852 18.5264 23.1003 18.7515 23.3327ZM11.5515 23.3327C11.7765 23.5651 12.0817 23.6957 12.4 23.6957C12.7183 23.6957 13.0235 23.5651 13.2485 23.3327C13.4736 23.1003 13.6 22.7852 13.6 22.4565C13.6 22.1279 13.4736 21.8127 13.2485 21.5803C13.0235 21.3479 12.7183 21.2174 12.4 21.2174C12.0817 21.2174 11.7765 21.3479 11.5515 21.5803C11.3264 21.8127 11.2 22.1279 11.2 22.4565C11.2 22.7852 11.3264 23.1003 11.5515 23.3327Z"" fill=""#4A4A4A""/>
         |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M19.2 14.6087H12.8C11.9163 14.6087 11.2 15.3484 11.2 16.2609V17.913H20.8V16.2609C20.8 15.3484 20.0837 14.6087 19.2 14.6087ZM12.8 12.9565C11.0327 12.9565 9.6 14.4359 9.6 16.2609V19.5652H22.4V16.2609C22.4 14.4359 20.9673 12.9565 19.2 12.9565H12.8Z"" fill=""#4A4A4A""/>
         |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M11.2 8C9.43269 8 8 9.47941 8 11.3043V19.5652H9.6V16.2609C9.6 14.4359 11.0327 12.9565 12.8 12.9565H19.2C20.9673 12.9565 22.4 14.4359 22.4 16.2609V19.5652H24V11.3043C24 9.47941 22.5673 8 20.8 8H11.2Z"" fill=""#4A4A4A""/>
         |%2
         |</g>
         |<defs>
         |<clipPath id=""clip0_1951_3295"">
         |<rect width=""33"" height=""33"" fill=""white""/>
         |</clipPath>
         |</defs>
         |</svg>'");
	
	МаркерСтрока = СтрШаблон(ТекстМакета, ЦветЛампочки, СтрокаЛампочки);
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПунктаПогрузкиПустой()

Функция МаркерТССЗанято(ЦветСтрока, ИспользуетсяМП = Ложь, НеНаЛинии = Ложь)
	
	Если ИспользуетсяМП Тогда
		
		Если НЕ НеНаЛинии Тогда
			ЦветЛампочки = "#32cd32"; // включена
		Иначе
			ЦветЛампочки = "#A0A0A0"; // выключена
		КонецЕсли;
		СтрокаЛампочки = СтрШаблон(НСтр("ru = '|<circle cx=""28"" cy=""5"" r=""5"" fill=""%1""/>
		|<circle cx=""28"" cy=""5"" r=""4.5"" stroke=""white""/>'"), ЦветЛампочки);

	Иначе
		СтрокаЛампочки = "";
	КонецЕсли;
	
	ТекстМакета = НСтр("ru = '<svg width=""33"" height=""33"" viewBox=""0 0 33 33"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                                     |<g clip-path=""url(#clip0_1951_3291)"">
                                     |<circle cx=""15.9995"" cy=""17"" r=""16"" fill=""white""/>
                                     |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M16 31C23.732 31 30 24.732 30 17C30 9.26801 23.732 3 16 3C8.26801 3 2 9.26801 2 17C2 24.732 8.26801 31 16 31ZM16 33C24.8366 33 32 25.8366 32 17C32 8.16344 24.8366 1 16 1C7.16344 1 0 8.16344 0 17C0 25.8366 7.16344 33 16 33Z"" fill=""%1""/>
                                     |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M9.6 18.7391V22.8696C9.6 23.5965 9.912 24.2491 10.4 24.7035V26.1739C10.4 26.393 10.4843 26.6031 10.6343 26.758C10.7843 26.913 10.9878 27 11.2 27H12C12.2122 27 12.4157 26.913 12.5657 26.758C12.7157 26.6031 12.8 26.393 12.8 26.1739V25.3478H19.2V26.1739C19.2 26.393 19.2843 26.6031 19.4343 26.758C19.5843 26.913 19.7878 27 20 27H20.8C21.0122 27 21.2157 26.913 21.3657 26.758C21.5157 26.6031 21.6 26.393 21.6 26.1739V24.7035C22.088 24.2491 22.4 23.5965 22.4 22.8696V18.7391H9.6ZM18.7515 23.3327C18.9765 23.5651 19.2817 23.6957 19.6 23.6957C19.9183 23.6957 20.2235 23.5651 20.4485 23.3327C20.6736 23.1003 20.8 22.7852 20.8 22.4565C20.8 22.1279 20.6736 21.8127 20.4485 21.5803C20.2235 21.3479 19.9183 21.2174 19.6 21.2174C19.2817 21.2174 18.9765 21.3479 18.7515 21.5803C18.5264 21.8127 18.4 22.1279 18.4 22.4565C18.4 22.7852 18.5264 23.1003 18.7515 23.3327ZM11.5515 23.3327C11.7765 23.5651 12.0817 23.6957 12.4 23.6957C12.7183 23.6957 13.0235 23.5651 13.2485 23.3327C13.4736 23.1003 13.6 22.7852 13.6 22.4565C13.6 22.1279 13.4736 21.8127 13.2485 21.5803C13.0235 21.3479 12.7183 21.2174 12.4 21.2174C12.0817 21.2174 11.7765 21.3479 11.5515 21.5803C11.3264 21.8127 11.2 22.1279 11.2 22.4565C11.2 22.7852 11.3264 23.1003 11.5515 23.3327Z"" fill=""#4A4A4A""/>
                                     |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M19.2 14.6087H12.8C11.9163 14.6087 11.2 15.3484 11.2 16.2609V17.913H20.8V16.2609C20.8 15.3484 20.0837 14.6087 19.2 14.6087ZM12.8 12.9565C11.0327 12.9565 9.6 14.4359 9.6 16.2609V19.5652H22.4V16.2609C22.4 14.4359 20.9673 12.9565 19.2 12.9565H12.8Z"" fill=""#4A4A4A""/>
                                     |<path fill-rule=""evenodd"" clip-rule=""evenodd"" d=""M11.2 8C9.43269 8 8 9.47941 8 11.3043V19.5652H9.6V16.2609C9.6 14.4359 11.0327 12.9565 12.8 12.9565H19.2C20.9673 12.9565 22.4 14.4359 22.4 16.2609V19.5652H24V11.3043C24 9.47941 22.5673 8 20.8 8H11.2Z"" fill=""#4A4A4A""/>
                                     |%2
                                     |</g>
                                     |<defs>
                                     |<clipPath id=""clip0_1951_3291"">
                                     |<rect width=""33"" height=""33"" fill=""white""/>
                                     |</clipPath>
                                     |</defs>
                                     |</svg>
                                     |'");

	МаркерСтрока = СтрШаблон(ТекстМакета, ЦветСтрока, СтрокаЛампочки);
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПунктаПогрузкиПустой()

Функция МаркерПунктаПогрузкиПустой(ЦветСтрока, МаркерВыделен)
	
	Если МаркерВыделен Тогда
		МаркерСтрока ="
		|<svg width=""32"" height=""32"" viewBox=""0 0 32 32"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<circle cx=""16.5"" cy=""16.5"" r=""14.5"" fill=""" + ЦветСтрока + """/>
		|<path d=""M16 0C7.152 0 0 7.2 0 16C0 20.2435 1.68571 24.3131 4.68629 27.3137C6.17203 28.7994 7.93586 29.978 9.87706 30.7821C11.8183 31.5861 13.8988 32 16 32C20.2435 32 24.3131 30.3143 27.3137 27.3137C30.3143 24.3131 32 20.2435 32 16C32 13.8988 31.5861 11.8183 30.7821 9.87706C29.978 7.93586 28.7994 6.17203 27.3137 4.68629C25.828 3.20055 24.0641 2.022 22.1229 1.21793C20.1817 0.413852 18.1012 0 16 0ZM16 29.1881C12.6052 29.1881 8.88769 27.6556 6.48723 25.2551C4.08676 22.8546 2.54977 19.3948 2.54977 16C2.54977 12.6052 4.1828 8.75609 6.58326 6.35562C8.98373 3.95516 12.6052 2.75429 16 2.75429C19.3948 2.75429 22.8617 4.3393 25.2622 6.73976C27.6626 9.14023 29.3197 12.6052 29.3197 16C29.3197 19.3948 27.6146 23.0902 25.2142 25.4907C22.8137 27.8912 19.3948 29.1881 16 29.1881Z"" fill=""" + ЦветСтрока + """/>
		|<path d=""M16 15.5C15.337 15.5 14.7011 15.2366 14.2322 14.7678C13.7634 14.2989 13.5 13.663 13.5 13C13.5 12.337 13.7634 11.7011 14.2322 11.2322C14.7011 10.7634 15.337 10.5 16 10.5C16.663 10.5 17.2989 10.7634 17.7678 11.2322C18.2366 11.7011 18.5 12.337 18.5 13C18.5 13.3283 18.4353 13.6534 18.3097 13.9567C18.1841 14.26 17.9999 14.5356 17.7678 14.7678C17.5356 14.9999 17.26 15.1841 16.9567 15.3097C16.6534 15.4353 16.3283 15.5 16 15.5ZM16 6C14.1435 6 12.363 6.7375 11.0503 8.05025C9.7375 9.36301 9 11.1435 9 13C9 18.25 16 26 16 26C16 26 23 18.25 23 13C23 11.1435 22.2625 9.36301 20.9497 8.05025C19.637 6.7375 17.8565 6 16 6Z"" fill=""white""/>
		|</svg>";
	Иначе
		МаркерСтрока ="
		|<svg width=""32"" height=""32"" viewBox=""0 0 32 32"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<circle cx=""16.5"" cy=""16.5"" r=""14.5"" fill=""white""/>
		|<path d=""M16 0C7.152 0 0 7.2 0 16C0 20.2435 1.68571 24.3131 4.68629 27.3137C6.17203 28.7994 7.93586 29.978 9.87706 30.7821C11.8183 31.5861 13.8988 32 16 32C20.2435 32 24.3131 30.3143 27.3137 27.3137C30.3143 24.3131 32 20.2435 32 16C32 13.8988 31.5861 11.8183 30.7821 9.87706C29.978 7.93586 28.7994 6.17203 27.3137 4.68629C25.828 3.20055 24.0641 2.022 22.1229 1.21793C20.1817 0.413852 18.1012 0 16 0ZM16 29.1881C12.6052 29.1881 8.88769 27.6556 6.48723 25.2551C4.08676 22.8546 2.54977 19.3948 2.54977 16C2.54977 12.6052 4.1828 8.75609 6.58326 6.35562C8.98373 3.95516 12.6052 2.75429 16 2.75429C19.3948 2.75429 22.8617 4.3393 25.2622 6.73976C27.6626 9.14023 29.3197 12.6052 29.3197 16C29.3197 19.3948 27.6146 23.0902 25.2142 25.4907C22.8137 27.8912 19.3948 29.1881 16 29.1881Z"" fill=""" + ЦветСтрока + """/>
		|<path d=""M16 15.5C15.337 15.5 14.7011 15.2366 14.2322 14.7678C13.7634 14.2989 13.5 13.663 13.5 13C13.5 12.337 13.7634 11.7011 14.2322 11.2322C14.7011 10.7634 15.337 10.5 16 10.5C16.663 10.5 17.2989 10.7634 17.7678 11.2322C18.2366 11.7011 18.5 12.337 18.5 13C18.5 13.3283 18.4353 13.6534 18.3097 13.9567C18.1841 14.26 17.9999 14.5356 17.7678 14.7678C17.5356 14.9999 17.26 15.1841 16.9567 15.3097C16.6534 15.4353 16.3283 15.5 16 15.5ZM16 6C14.1435 6 12.363 6.7375 11.0503 8.05025C9.7375 9.36301 9 11.1435 9 13C9 18.25 16 26 16 26C16 26 23 18.25 23 13C23 11.1435 22.2625 9.36301 20.9497 8.05025C19.637 6.7375 17.8565 6 16 6Z"" fill="""+ЦветСтрока+"""/>
		|</svg>";
	КонецЕсли;
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПунктаПогрузкиПустой()

Функция МаркерПунктаПогрузкиПолный(ЦветСтрока)
	
	МаркерСтрока =
	"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
	|<svg
	|   xmlns:dc=""http://purl.org/dc/elements/1.1/""
	|   xmlns:cc=""http://creativecommons.org/ns#""
	|   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	|   xmlns:svg=""http://www.w3.org/2000/svg""
	|   xmlns=""http://www.w3.org/2000/svg""
	|   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
	|   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
	|   version=""1.1""
	|   id=""Слой_1""
	|   x=""0px""
	|   y=""0px""
	|   width=""32px""
	|   height=""32px""
	|   viewBox=""0 0 32 32""
	|   enable-background=""new 0 0 32 32""
	|   xml:space=""preserve""><metadata
	|     id=""metadata11""><rdf:RDF><cc:Work
	|         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
	|           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /><dc:title /></cc:Work></rdf:RDF></metadata><defs
	|     id=""defs9"" /><sodipodi:namedview
	|     pagecolor=""#ffffff""
	|     bordercolor=""#ffffff""
	|     borderopacity=""1""
	|     objecttolerance=""10""
	|     gridtolerance=""10""
	|     guidetolerance=""10""
	|     inkscape:pageopacity=""0""
	|     inkscape:pageshadow=""2""
	|     inkscape:window-width=""1920""
	|     inkscape:window-height=""1018""
	|     id=""namedview7""
	|     showgrid=""false""
	|     inkscape:zoom=""7.375""
	|     inkscape:cx=""-25.084746""
	|     inkscape:cy=""16""
	|     inkscape:window-x=""-8""
	|     inkscape:window-y=""-8""
	|     inkscape:window-maximized=""1""
	|     inkscape:current-layer=""Слой_1"" /><circle
	|     style=""fill:#ffffff;fill-opacity:1;stroke:"+ЦветСтрока+";stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
	|     cx=""16""
	|     cy=""16""
	|     r=""15""
	|     id=""circle5052"" /><path
	|     d=""M24,12h-3V8h-3.834h-0.791H10c-1.11,0-2,0.891-2,2v2h2v-2h0.896L18,14l-6.969,5H10v-2H8v4h2c0,1.656,1.343,3,3,3  c1.656,0,3-1.344,3-3h0.375h0.791H19c0,1.656,1.344,3,3,3s3-1.344,3-3h2v-5L24,12z M13,23c-1,0-2-1-2-2s1-2,2-2s2,1,2,2S14,23,13,23  z M22,23c-1,0-2-1-2-2s1-2,2-2s2,1,2,2S23,23,22,23z M21,16v-2h3l1.459,2H21z""
	|     id=""path2""
	|     style=""fill:"+ЦветСтрока+""" /><polygon
	|     fill="""+ЦветСтрока+"""
	|     points=""15.021,14.496 11,12 11,13 7,13 7,13 4,13 4,16 7.214,16 8,16 11,16 11,17 ""
	|     id=""polygon4"" /></svg>";
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПунктаПогрузкиПолный()

Функция МаркерПромежуточногоПунктаПустой(ЦветСтрока)
	
	МаркерСтрока =
	"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
	|<svg
	|   xmlns:dc=""http://purl.org/dc/elements/1.1/""
	|   xmlns:cc=""http://creativecommons.org/ns#""
	|   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	|   xmlns:svg=""http://www.w3.org/2000/svg""
	|   xmlns=""http://www.w3.org/2000/svg""
	|   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
	|   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
	|   version=""1.1""
	|   id=""Слой_1""
	|   x=""0px""
	|   y=""0px""
	|   width=""32px""
	|   height=""32px""
	|   viewBox=""0 0 32 32""
	|   enable-background=""new 0 0 32 32""
	|   xml:space=""preserve""><metadata
	|     id=""metadata9""><rdf:RDF><cc:Work
	|         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
	|           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /><dc:title /></cc:Work></rdf:RDF></metadata><defs
	|     id=""defs7"" /><sodipodi:namedview
	|     pagecolor=""#ffffff""
	|     bordercolor=""#ffffff""
	|     borderopacity=""1""
	|     objecttolerance=""10""
	|     gridtolerance=""10""
	|     guidetolerance=""10""
	|     inkscape:pageopacity=""0""
	|     inkscape:pageshadow=""2""
	|     inkscape:window-width=""1920""
	|     inkscape:window-height=""1018""
	|     id=""namedview5""
	|     showgrid=""false""
	|     inkscape:zoom=""10.429825""
	|     inkscape:cx=""-22.372262""
	|     inkscape:cy=""15.308015""
	|     inkscape:window-x=""-8""
	|     inkscape:window-y=""-8""
	|     inkscape:window-maximized=""1""
	|     inkscape:current-layer=""Слой_1"" /><circle
	|     id=""circle5052""
	|     r=""15""
	|     cy=""16""
	|     cx=""16""
	|     style=""fill:#ffffff;fill-opacity:1;stroke:"+ЦветСтрока+";stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"" /><path
	|     d=""m 24.19176,12 h -3 V 8 h -4 -0.625 -6.541002 c -1.11,0 -1.834,0.891 -1.834,2 v 7 h 2 v -7 h 9.000002 v 9 h -6 c 1,0 2,1 2,2 0,1 -1,2 -2,2 -1,0 -2,-1 -2,-2 0,-1 1,-2 2,-2 h -3.000002 v -2 h -2 v 4 h 2 c 0,1.656 1.177002,3 2.834002,3 1.656,0 3.166,-1.344 3.166,-3 h 0.375 0.625 2 c 0,1.656 1.344,3 3,3 1.656,0 3,-1.344 3,-3 h 2 v -5 z m -2,11 c -1,0 -2,-1 -2,-2 0,-1 1,-2 2,-2 1,0 2,1 2,2 0,1 -1,2 -2,2 z m -1,-7 v -2 h 3 l 1.459,2 z""
	|     id=""path2""
	|     style=""fill:"+ЦветСтрока+"""
	|     inkscape:connector-curvature=""0""
	|     sodipodi:nodetypes=""cccccssccccccsssccccccsccccsccccsssssccccc"" /></svg>";
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПромежуточногоПунктаПустой()

Функция МаркерПромежуточногоПунктаПолный(ЦветСтрока)
	
	МаркерСтрока =
	"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
	|<svg
	|   xmlns:dc=""http://purl.org/dc/elements/1.1/""
	|   xmlns:cc=""http://creativecommons.org/ns#""
	|   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	|   xmlns:svg=""http://www.w3.org/2000/svg""
	|   xmlns=""http://www.w3.org/2000/svg""
	|   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
	|   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
	|   version=""1.1""
	|   id=""Слой_1""
	|   x=""0px""
	|   y=""0px""
	|   width=""32px""
	|   height=""32px""
	|   viewBox=""0 0 32 32""
	|   enable-background=""new 0 0 32 32""
	|   xml:space=""preserve""><metadata
	|     id=""metadata9""><rdf:RDF><cc:Work
	|         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
	|           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /><dc:title /></cc:Work></rdf:RDF></metadata><defs
	|     id=""defs7""><pattern
	|       y=""0""
	|       x=""0""
	|       height=""6""
	|       width=""6""
	|       patternUnits=""userSpaceOnUse""
	|       id=""EMFhbasepattern"" /></defs><sodipodi:namedview
	|     pagecolor=""#ffffff""
	|     bordercolor=""#ffffff""
	|     borderopacity=""1""
	|     objecttolerance=""10""
	|     gridtolerance=""10""
	|     guidetolerance=""10""
	|     inkscape:pageopacity=""0""
	|     inkscape:pageshadow=""2""
	|     inkscape:window-width=""1441""
	|     inkscape:window-height=""768""
	|     id=""namedview5""
	|     showgrid=""false""
	|     inkscape:zoom=""10.429825""
	|     inkscape:cx=""1.6031165""
	|     inkscape:cy=""24.467679""
	|     inkscape:window-x=""205""
	|     inkscape:window-y=""122""
	|     inkscape:window-maximized=""0""
	|     inkscape:current-layer=""Слой_1"" /><circle
	|     style=""fill:#ffffff;fill-opacity:1;stroke:"+ЦветСтрока+";stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
	|     cx=""16""
	|     cy=""16""
	|     r=""15""
	|     id=""circle5052"" /><path
	|     d=""m 23.904121,12 h -3 V 8 h -3.834 -0.791 -6.3749999 c -1.11,0 -2,0.891 -2,2 v 7 h 2 L 12.109335,16.759461 13.053275,15.752733 17.904121,14 12.085668,13.151388 10.575273,13.439025 9.9041211,17 h -2 v 4 h 2 c 0,1.656 1.3429999,3 2.9999999,3 1.656,0 3,-1.344 3,-3 h 0.375 0.791 1.834 c 0,1.656 1.344,3 3,3 1.656,0 3,-1.344 3,-3 h 2 v -5 z m -11,11 c -1,0 -2,-1 -2,-2 0,-1 1,-2 2,-2 1,0 2,1 2,2 0,1 -1,2 -2,2 z m 9,0 c -1,0 -2,-1 -2,-2 0,-1 1,-2 2,-2 1,0 2,1 2,2 0,1 -1,2 -2,2 z m -1,-7 v -2 h 3 l 1.459,2 z""
	|     id=""path2""
	|     style=""fill:"+ЦветСтрока+"""
	|     inkscape:connector-curvature=""0""
	|     sodipodi:nodetypes=""cccccsscccccccccccsccccsccccssssssssssccccc"" /></svg>";
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПромежуточногоПунктаПолный()

Функция МаркерПунктаРазгрузкиПустой(ЦветСтрока, МаркерВыделен)
	
	Если МаркерВыделен Тогда
		МаркерСтрока ="
		|<svg width=""32"" height=""32"" viewBox=""0 0 32 32"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<circle cx=""16.5"" cy=""16.5"" r=""14.5"" fill=""" + ЦветСтрока + """/>
		|<path d=""M16 0C7.152 0 0 7.2 0 16C0 20.2435 1.68571 24.3131 4.68629 27.3137C6.17203 28.7994 7.93586 29.978 9.87706 30.7821C11.8183 31.5861 13.8988 32 16 32C20.2435 32 24.3131 30.3143 27.3137 27.3137C30.3143 24.3131 32 20.2435 32 16C32 13.8988 31.5861 11.8183 30.7821 9.87706C29.978 7.93586 28.7994 6.17203 27.3137 4.68629C25.828 3.20055 24.0641 2.022 22.1229 1.21793C20.1817 0.413852 18.1012 0 16 0ZM16 29.1881C12.6052 29.1881 8.88769 27.6556 6.48723 25.2551C4.08676 22.8546 2.54977 19.3948 2.54977 16C2.54977 12.6052 4.1828 8.75609 6.58326 6.35562C8.98373 3.95516 12.6052 2.75429 16 2.75429C19.3948 2.75429 22.8617 4.3393 25.2622 6.73976C27.6626 9.14023 29.3197 12.6052 29.3197 16C29.3197 19.3948 27.6146 23.0902 25.2142 25.4907C22.8137 27.8912 19.3948 29.1881 16 29.1881Z"" fill=""" + ЦветСтрока + """/>
		|<path d=""M18.4 10H24V20H17L16.6 18H11V25H9V8H18L18.4 10ZM18 18H20V16H22V14H20V12H18V14L17 12V10H15V12H13V10H11V12H13V14H11V16H13V14H15V16H17V14L18 16V18ZM15 14V12H17V14H15ZM18 14H20V16H18V14Z"" fill=""white""/>
		|</svg>";
	Иначе
		МаркерСтрока ="
		|<svg width=""32"" height=""32"" viewBox=""0 0 32 32"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
		|<circle cx=""16.5"" cy=""16.5"" r=""14.5"" fill=""white""/>
		|<path d=""M16 0C7.152 0 0 7.2 0 16C0 20.2435 1.68571 24.3131 4.68629 27.3137C6.17203 28.7994 7.93586 29.978 9.87706 30.7821C11.8183 31.5861 13.8988 32 16 32C20.2435 32 24.3131 30.3143 27.3137 27.3137C30.3143 24.3131 32 20.2435 32 16C32 13.8988 31.5861 11.8183 30.7821 9.87706C29.978 7.93586 28.7994 6.17203 27.3137 4.68629C25.828 3.20055 24.0641 2.022 22.1229 1.21793C20.1817 0.413852 18.1012 0 16 0ZM16 29.1881C12.6052 29.1881 8.88769 27.6556 6.48723 25.2551C4.08676 22.8546 2.54977 19.3948 2.54977 16C2.54977 12.6052 4.1828 8.75609 6.58326 6.35562C8.98373 3.95516 12.6052 2.75429 16 2.75429C19.3948 2.75429 22.8617 4.3393 25.2622 6.73976C27.6626 9.14023 29.3197 12.6052 29.3197 16C29.3197 19.3948 27.6146 23.0902 25.2142 25.4907C22.8137 27.8912 19.3948 29.1881 16 29.1881Z"" fill=""" + ЦветСтрока + """/>
		|<path d=""M18.4 10H24V20H17L16.6 18H11V25H9V8H18L18.4 10ZM18 18H20V16H22V14H20V12H18V14L17 12V10H15V12H13V10H11V12H13V14H11V16H13V14H15V16H17V14L18 16V18ZM15 14V12H17V14H15ZM18 14H20V16H18V14Z"" fill=""" + ЦветСтрока + """/>
		|</svg>";
	КонецЕсли;
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПунктаРазгрузкиПустой()

Функция МаркерПунктаРазгрузкиПолный(ЦветСтрока)
	
	МаркерСтрока =
	"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
	|<svg
	|   xmlns:dc=""http://purl.org/dc/elements/1.1/""
	|   xmlns:cc=""http://creativecommons.org/ns#""
	|   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	|   xmlns:svg=""http://www.w3.org/2000/svg""
	|   xmlns=""http://www.w3.org/2000/svg""
	|   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
	|   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
	|   version=""1.1""
	|   id=""Слой_1""
	|   x=""0px""
	|   y=""0px""
	|   width=""32px""
	|   height=""32px""
	|   viewBox=""0 0 32 32""
	|   enable-background=""new 0 0 32 32""
	|   xml:space=""preserve""><metadata
	|     id=""metadata11""><rdf:RDF><cc:Work
	|         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
	|           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /><dc:title /></cc:Work></rdf:RDF></metadata><defs
	|     id=""defs9"" /><sodipodi:namedview
	|     pagecolor=""#ffffff""
	|     bordercolor=""#ffffff""
	|     borderopacity=""1""
	|     objecttolerance=""10""
	|     gridtolerance=""10""
	|     guidetolerance=""10""
	|     inkscape:pageopacity=""0""
	|     inkscape:pageshadow=""2""
	|     inkscape:window-width=""1920""
	|     inkscape:window-height=""1018""
	|     id=""namedview7""
	|     showgrid=""false""
	|     inkscape:zoom=""7.375""
	|     inkscape:cx=""-28.542373""
	|     inkscape:cy=""16""
	|     inkscape:window-x=""-8""
	|     inkscape:window-y=""-8""
	|     inkscape:window-maximized=""1""
	|     inkscape:current-layer=""Слой_1"" /><circle
	|     style=""fill:#ffffff;fill-opacity:1;stroke:"+ЦветСтрока+";stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
	|     cx=""16""
	|     cy=""16""
	|     r=""15""
	|     id=""circle5052"" /><path
	|     d=""M24,12h-3V8h-2.834h-1.791H11c-1.11,0-2,0.891-2,2v2h7v5H9v4h2c0,1.656,1.343,3,3,3c1.656,0,3-1.344,3-3h1.166H19  c0,1.656,1.344,3,3,3s3-1.344,3-3h2v-5L24,12z M14,23c-1,0-2-1-2-2s1-2,2-2s2,1,2,2S15,23,14,23z M22,23c-1,0-2-1-2-2s1.172-2,2-2  c1,0,2,1,2,2S23,23,22,23z M21,16v-2h3l1.459,2H21z""
	|     id=""path2""
	|     style=""fill:"+ЦветСтрока+""" /><polygon
	|     fill="""+ЦветСтрока+"""
	|     points=""3.979,14.496 8,11.376 8,13 12.021,13 12.021,13 15,13 15,16 11.808,16 11.021,16 8,16 8,17.617 ""
	|     id=""polygon4"" /></svg>";
	
	Возврат МаркерСтрока;
	
КонецФункции // МаркерПунктаРазгрузкиПолный()

Функция СформироватьАдресКартинкиИзКонфигурации(Знач Картинка, Формат = "", СоответсвиеКартинок = Неопределено) Экспорт
	
	стрДанныеОднострочно = "";

	#Если ВебКлиент Тогда
		стрФормат = "";
		стрДанные = Base64Строка(уатЭлектронныеКартыСервер.ПолучитьДвоичныеДанныеКартинки(Картинка, Формат, стрФормат));
		
		Для Счетчик = 1 По СтрЧислоСтрок(стрДанные) Цикл
			стрДанныеОднострочно = стрДанныеОднострочно + СтрПолучитьСтроку(стрДанные, Счетчик);
		КонецЦикла;
		Возврат "data:image/" + стрФормат + ";base64," + стрДанныеОднострочно;

	#Иначе
		
		Если Формат = "" Тогда
			стрФормат = НРег(Строка(Картинка.Формат()));
		Иначе
			стрФормат = НРег(Строка(Формат));
		КонецЕсли;
		
		стрДанные = Base64Строка(Картинка.ПолучитьДвоичныеДанные());
		стрДанныеФормат = "";
		
		Если СоответсвиеКартинок <> Неопределено Тогда
			ТекКартинка     = СоответсвиеКартинок.Получить(стрДанные);
		КонецЕсли;

		Если СоответсвиеКартинок = Неопределено
			ИЛИ ТекКартинка = Неопределено Тогда
			ТекстПостроитель = Новый ЗаписьXML;
			ТекстПостроитель.УстановитьСтроку();
			
			Для Счетчик = 1 По СтрЧислоСтрок(стрДанные) Цикл
				ТекстПостроитель.ЗаписатьБезОбработки(СтрПолучитьСтроку(стрДанные, Счетчик));
			КонецЦикла;
			
			СтрокаРезультат = "data:image/" + стрФормат + ";base64," + ТекстПостроитель.Закрыть();
			Если СоответсвиеКартинок <> Неопределено Тогда
				СоответсвиеКартинок.Вставить(стрДанные, СтрокаРезультат);
			КонецЕсли;
			
			Возврат СтрокаРезультат;
		КонецЕсли;
		
		Возврат ТекКартинка;
	#КонецЕсли
	
	
КонецФункции 

// Функция возвращает объект "Цвет" по индексу из массива досутпных цветов.
//
// Параметры:
//  ИндексЦвета - Число - индекс цвета в массиве.
// 
// Возвращаемое значение:
//   - Цвет.
//
Функция ПолучитьЦветДокументаПоКоллекции(Знач ИндексЦвета) Экспорт
	
	Если ИндексЦвета = 1 Тогда 
		// Синий.
		Возврат Новый Цвет(30, 152, 255);
		
	ИначеЕсли ИндексЦвета = 2 Тогда 
		// Красный.
		Возврат Новый Цвет(237, 69, 67);
		
	ИначеЕсли ИндексЦвета = 3 Тогда 
		// Темно-оранжевый.
		Возврат Новый Цвет(230, 118, 27);
		
	ИначеЕсли ИндексЦвета = 4 Тогда 
		// Ночной.
		Возврат Новый Цвет(14, 71, 121);
		
	ИначеЕсли ИндексЦвета = 5 Тогда 
		// Темно-синий.
		Возврат Новый Цвет(23, 123, 201);
		
	ИначеЕсли ИндексЦвета = 6 Тогда 
		// Розовый.
		Возврат Новый Цвет(243, 113, 209);
		
	ИначеЕсли ИндексЦвета = 7 Тогда 
		// Серый.
		Возврат Новый Цвет(179, 179, 179);
		
	ИначеЕсли ИндексЦвета = 8 Тогда 
		// Коричневый.
		Возврат Новый Цвет(121, 61, 14);
		
	ИначеЕсли ИндексЦвета = 9 Тогда 
		// Темно-зеленый.
		Возврат Новый Цвет(27, 173, 3);
		
	ИначеЕсли ИндексЦвета = 10 Тогда 
		// Фиолетовый.
		Возврат Новый Цвет(181, 30, 255);
		
	ИначеЕсли ИндексЦвета = 11 Тогда 
		// Черный.
		Возврат Новый Цвет(89, 89, 89);
		
	ИначеЕсли ИндексЦвета = 12 Тогда 
		// Желтый.
		Возврат Новый Цвет(255, 210, 30);
		
	ИначеЕсли ИндексЦвета = 13 Тогда 
		// Зеленый.
		Возврат Новый Цвет(86, 219, 64);
		
	ИначеЕсли ИндексЦвета = 14 Тогда 
		// Оранжевый.
		Возврат Новый Цвет(255, 147, 30);
		
	ИначеЕсли ИндексЦвета = 15 Тогда 
		// Светло-синий.
		Возврат Новый Цвет(130, 205, 255);
		
	ИначеЕсли ИндексЦвета = 16 Тогда 
		// Оливковый.
		Возврат Новый Цвет(151, 161, 0);
		
	Иначе 
		Возврат Новый Цвет();
	КонецЕсли;
	
КонецФункции // ПолучитьЦветДокументаПоКоллекции()

// Функция возвращает признак использования платформой движка WebKit.
// 
// Возвращаемое значение:
//   - Булево - Истина, если используется WebKit или Ложь, если не используется.
//
Функция ЭтоПлатформаСWebKit() Экспорт 
	
	СисИнфо = Новый СистемнаяИнформация();
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.14.0") > 0 Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоПлатформаСWebKit()

Функция ПолучитьСтрокуКомандуКарты(Знач КомандаКарты, ПараметрыКоманды = Неопределено,
	ВнешнийМаршрутизатор = Ложь, HTMLobj = Неопределено, СтрокаКомандыБезИдентификатора = "", ТипЭлектронныхКартПостроениеМаршрутов) Экспорт
	
	Если ТипЗнч(ПараметрыКоманды) <> Тип("Структура") Тогда
		ПараметрыКоманды = Новый Структура();
	КонецЕсли;
	
	СтрокаКомандыКарты = "";
	Идентификатор      = ?(ПараметрыКоманды.Свойство("Идентификатор"), ПараметрыКоманды.Идентификатор, "00000000-0000-0000-0000-000000000000");
	
	Если КомандаКарты = "launchMap" Тогда 
		Координаты			 = ПараметрыКоманды.Координаты;
		МасштабОтображения	 = ПараметрыКоманды.МасштабОтображения;
		ИмяКласса			 = ПараметрыКоманды.ИмяКласса; 
		
		Если МасштабОтображения < 1
			ИЛИ МасштабОтображения > 18 Тогда 
			МасштабКарты = 10;
		Иначе
			МасштабКарты = МасштабОтображения;
		КонецЕсли;
		
		Если НЕ ВнешнийМаршрутизатор Тогда
			АдресКартографии = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Картография_Сервер");
			ТипПоставщика_ПостроениеМаршрутов = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПостроениеМаршрутов");
			
			Если ТипПоставщика_ПостроениеМаршрутов = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM") Тогда
				АдресOSRM = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПостроениеМаршрутов_Сервер");
			Иначе
				АдресOSRM = "";
			КонецЕсли;
			Возврат "launchMap(""" + ИмяКласса + """, true, true" + ", " + Формат(МасштабКарты, "ЧН=0; ЧГ=0") + ", ["
				+ Формат(Координаты.Широта, "ЧРД=.; ЧН=0; ЧГ=0") + ", " + Формат(Координаты.Долгота, "ЧРД=.; ЧН=0; ЧГ=0") 
				+ "], true, """ + АдресКартографии + """, """ + АдресOSRM + """)";
		Иначе
			Возврат "Initialize(" + Формат(Координаты.Широта, "ЧРД=.; ЧН=0; ЧГ=0") + ", " + Формат(Координаты.Долгота, "ЧРД=.; ЧН=0; ЧГ=0") 
				+ ", " + Формат(МасштабКарты, "ЧН=0; ЧГ=0") + ")";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "addPointIcon" Тогда
		
		АдресНадпись    = ?(НЕ ВнешнийМаршрутизатор,
			СтрЗаменить(ПараметрыКоманды.АдресНадпись, "reporting(\'ManualRouting", "maps.reporting(\'ManualRouting")
			,ПараметрыКоманды.АдресНадпись);
		АдресНадпись    = ?(НЕ ВнешнийМаршрутизатор,
			СтрЗаменить(АдресНадпись, "reporting(\'href", "maps.reporting(\'href")
			,АдресНадпись);
		АдресНадпись    = СтрЗаменить(АдресНадпись,"<guid></guid>", "<guid>#Идентификатор#</guid>");
				
		СтрокаКомандыБезИдентификатора = "addPointIcon("+ПараметрыКоманды.Широта + ", " + ПараметрыКоманды.Долгота 
		+ ", '" + АдресНадпись + "',"+ ПараметрыКоманды.НомерИконки 
		+ ", "  + ПараметрыКоманды.КластеризацияМаркеровНаКарте
		+ ", '" + ПараметрыКоманды.Картинка
		+ "','#Идентификатор#')";
		
		СтрокаКомандыКарты = СтрЗаменить(СтрокаКомандыБезИдентификатора, "#Идентификатор#", Идентификатор);
	ИначеЕсли КомандаКарты = "setWaypointsFactToPlay" Тогда
		Если НЕ ПараметрыКоманды.Свойство("Координаты")
			И НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "setWaypointsFactToPlay([])";
		ИначеЕсли ПараметрыКоманды.Свойство("Координаты") Тогда
			СтрокаКомандыКарты = "setWaypointsFactToPlay(["+ПараметрыКоманды.Координаты+"])";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "playRoute" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "playRoute(" + ПараметрыКоманды.МассивТочек + ","
			+?(ПараметрыКоманды.Проигрывать, ПараметрыКоманды.СкоростьПроигрывания, 0)+", 9)";
		Иначе
			СтрокаКомандыКарты = "playRoute(" + ПараметрыКоманды.МассивТочек + ","
			+?(ПараметрыКоманды.Проигрывать, ПараметрыКоманды.СкоростьПроигрывания, 0)+", 9)";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "traceRoute" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			РезультатOSM = Неопределено;
			ТекстОшибки  = "";
			
			ParseString = "";
			РассчитыватьМаршрут = Истина;
			Если ПараметрыКоманды.Свойство("МаршрутOSM") Тогда
				ParseString = ПараметрыКоманды.МаршрутOSM;
			КонецЕсли;
			
			Если ПараметрыКоманды.Свойство("РассчитыватьМаршрут") Тогда
				РассчитыватьМаршрут = ПараметрыКоманды.РассчитыватьМаршрут;
			КонецЕсли;
			
			Если ПараметрыКоманды.Свойство("ФактическийМаршрут") Тогда
				ФактическийМаршрут = "true";
			Иначе
				ФактическийМаршрут = "false";
			КонецЕсли;
			
			Если ПараметрыКоманды.Свойство("ПлановыйМаршрут") Тогда
				ПлановыйМаршрут = "true";
			Иначе
				ПлановыйМаршрут = "false";
			КонецЕсли;
			
			Если НЕ РассчитыватьМаршрут 
				И ЗначениеЗаполнено(ParseString) Тогда
				СтрокаКомандыБезИдентификатора = ParseString;
			Иначе
				Если НЕ ЗначениеЗаполнено(ParseString) Тогда
					Если уатЗащищенныеФункцииСервер.РассчитатьМаршрут(ПараметрыКоманды.ТочкиМаршрута, РезультатOSM, ТекстОшибки) Тогда 
						СтрокаКомандыБезИдентификатора = "traceRoute(["+ПараметрыКоманды.Координаты+"], '#Идентификатор#',"
							+ ФактическийМаршрут + "," + ПлановыйМаршрут + ", '" +
							ПараметрыКоманды.Цвет + "', 5, '" + СтрЗаменить(РезультатOSM.ParseString, "\", "\\") + "')";
					Иначе
						СтрокаКомандыБезИдентификатора = "traceRoute(["+ПараметрыКоманды.Координаты+"], '#Идентификатор#',"
							+ ФактическийМаршрут + "," + ПлановыйМаршрут + ", '" +
							ПараметрыКоманды.Цвет + "', 5)";
					КонецЕсли;
				Иначе
					СтрокаКомандыБезИдентификатора = "traceRoute(["+ПараметрыКоманды.Координаты+"], '#Идентификатор#',"
						+ ФактическийМаршрут + "," + ПлановыйМаршрут + ", '" +
						ПараметрыКоманды.Цвет + "', 5, '" + СтрЗаменить(ParseString, "\", "\\") + "')";
				КонецЕсли;
			КонецЕсли;
		Иначе  
			Если ПараметрыКоманды.Свойство("ФактическийМаршрут") Тогда
				ФактическийМаршрут = "true";
			Иначе
				ФактическийМаршрут = "false";
			КонецЕсли;
			
			Если ПараметрыКоманды.Свойство("ПлановыйМаршрут") Тогда
				ПлановыйМаршрут = "true";
			Иначе
				ПлановыйМаршрут = "false";
			КонецЕсли;

			Если ПараметрыКоманды.Свойство("ПараметрыТрассировки") Тогда
				СтрокаКомандыБезИдентификатора = "traceRoute(["+ПараметрыКоманды.ПараметрыТрассировки+"]" + ", '#Идентификатор#',"
				+ ФактическийМаршрут + "," + ПлановыйМаршрут + ", '" + СтрЗаменить(ParseString, "\", "\\") + "')";
			Иначе
				СтрокаКомандыБезИдентификатора = "traceRoute([[["+ПараметрыКоманды.Координаты+"]"
				+ ", '"
				+ ПараметрыКоманды.Цвет
				+ "', " + ПараметрыКоманды.Толщина + ", "+ ПараметрыКоманды.Факт + "]], '#Идентификатор#',"
				+ ФактическийМаршрут + "," + ПлановыйМаршрут + ", '" + СтрЗаменить(ParseString, "\", "\\") + "')";
			КонецЕсли;
		КонецЕсли;
		СтрокаКомандыКарты = СтрЗаменить(СтрокаКомандыБезИдентификатора, "#Идентификатор#", Идентификатор);
	ИначеЕсли КомандаКарты = "showPolygon" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыБезИдентификатора = "drawPolygon([{""latlng"": ["+ПараметрыКоманды.Координаты+"], ""color"": '" 
			+ ПараметрыКоманды.ЦветЗоны + "',  ""guid"": '#Идентификатор#'}], " + ПараметрыКоманды.Редактирование + ")";
		Иначе
			СтрокаКомандыБезИдентификатора = "showPolygon(["+ПараметрыКоманды.Координаты+"], '" 
			+ ПараметрыКоманды.ЦветЗоны + "', "+ПараметрыКоманды.Редактирование+ ", '#Идентификатор#')";
		КонецЕсли;
		СтрокаКомандыКарты = СтрЗаменить(СтрокаКомандыБезИдентификатора, "#Идентификатор#", Идентификатор);
	ИначеЕсли КомандаКарты = "selectLayer" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "selectLayer('" + Идентификатор + "')";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "refreshLayers" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "refreshLayers()";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "enableEditSelectLayer" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "enableEditSelectLayer()";
		КонецЕсли;

	ИначеЕсли КомандаКарты = "showPolyline" Тогда
		ВидЛинии = ?(ПараметрыКоманды.Свойство("ВидЛинии"), ПараметрыКоманды.ВидЛинии, "'0'");
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыБезИдентификатора = "showPolyline(["+ПараметрыКоманды.Координаты+"],'#Идентификатор#',"
			+ ПараметрыКоманды.Цвет + ", "+ПараметрыКоманды.Толщина+ ", '" + ПараметрыКоманды.Направление + "', " + ВидЛинии + ")";
		Иначе   
			Если ВидЛинии = "'0'" Тогда
				ВидЛинии = "''";
			КонецЕсли;
			СтрокаКомандыБезИдентификатора = "showPolyline(["+ПараметрыКоманды.Координаты+"]," 
			+ ПараметрыКоманды.Цвет + ", "+ПараметрыКоманды.Толщина+ ", '#Идентификатор#', " + ВидЛинии + ")";
		КонецЕсли;
		
		СтрокаКомандыКарты = СтрЗаменить(СтрокаКомандыБезИдентификатора, "#Идентификатор#", Идентификатор);
		
	ИначеЕсли КомандаКарты = "setFocusWOZoom" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "setBoundsToWay([[" + ПараметрыКоманды.Широта + "," + ПараметрыКоманды.Долгота + "]])";
		Иначе
			СтрокаКомандыКарты = "setFocusWOZoom("+ПараметрыКоманды.Широта + "," + ПараметрыКоманды.Долгота + ")";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "setBoundsToWay" Тогда
		СтрокаКомандыКарты = "setBoundsToWay(["+ПараметрыКоманды.Координаты + "])";
	ИначеЕсли КомандаКарты = "deleteObject" Тогда
		СтрокаКомандыКарты = "deleteObject('"+?(ПараметрыКоманды.Свойство("id"),
			ПараметрыКоманды.id, ПараметрыКоманды.Идентификатор) + "')";
	ИначеЕсли КомандаКарты = "showDrawingPanel" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			СтрокаКомандыКарты = "togglePanel(true, '.action-create'); maps.togglePanel(true, '#polygonCancelButton')";
		Иначе
			СтрокаКомандыКарты = "showDrawingPanel(" + ПараметрыКоманды.РедактированиеЗон + ")";
		КонецЕсли;
	ИначеЕсли КомандаКарты = "hideDrawingPanel" Тогда
		Если НЕ ВнешнийМаршрутизатор Тогда
			
			СтрокаКомандыКарты = "togglePanel(false, '.action-create')";

		Иначе
			СтрокаКомандыКарты = "hideDrawingPanel()";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВнешнийМаршрутизатор 
		И ЗначениеЗаполнено(СтрокаКомандыКарты) Тогда
		СтрокаКомандыКарты = "maps." + СтрокаКомандыКарты;
	КонецЕсли;
	
	Возврат СтрокаКомандыКарты;
КонецФункции

Функция ПолучитьСтруктуруПараметровAddPointIcon(Широта, Долгота, АдресНадпись = "",КластеризацияМаркеровНаКарте = Ложь, НомерИконки = "0",
	Картинка = "", МаркерТипТочки = 0, ЦветКартинки = "", ПунктСсылка = Неопределено) Экспорт
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Широта",                       ?(ТипЗнч(Широта) = Тип("Число"), Формат(Широта, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Широта));
	ПараметрыКоманды.Вставить("Долгота",                      ?(ТипЗнч(Долгота) = Тип("Число"), Формат(Долгота, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Долгота));
	ПараметрыКоманды.Вставить("АдресНадпись",                 АдресНадпись);
	ПараметрыКоманды.Вставить("КластеризацияМаркеровНаКарте", ?(КластеризацияМаркеровНаКарте, "true", "false"));
	ПараметрыКоманды.Вставить("НомерИконки",                  Строка(НомерИконки));
	ПараметрыКоманды.Вставить("Картинка",                     Картинка);
	ПараметрыКоманды.Вставить("МаркерТипТочки",               МаркерТипТочки);
	ПараметрыКоманды.Вставить("ЦветКартинки",                 ЦветКартинки);
	
	Если ЗначениеЗаполнено(ПунктСсылка) Тогда
		ПараметрыКоманды.Вставить("ПунктСсылка", ПунктСсылка);
	КонецЕсли;
	Возврат ПараметрыКоманды;
КонецФункции

Функция СформироватьПредставлениеОбъектаДляКарты(СтруктураНастроек) Экспорт
	
	СтрокаПредставление = "";

	Возврат СтрокаПредставление;
	
КонецФункции

Функция СформироватьПредставлениеЗаказаДляКарты(ПредставлениеЗаказа, ПредставлениеГиперссылкиРучнойМаршрутизации) Экспорт
	
	СтрокаПредставление = "";
	ТекстНадписи = "%1
                   |%2
                   |%3";
	
	ДопИнформация = "";
	
	СтрокаНаМаршрутизацию = "<br><br><div style=""font-size: 14px"">" + ПредставлениеГиперссылкиРучнойМаршрутизации + "</div>";

	ТекстНадписи = СтрШаблон(ТекстНадписи,
	ПредставлениеЗаказа,
	ДопИнформация,
	СтрокаНаМаршрутизацию
	);
	
	СтрокаПредставление = "<div style=""color:white; width:" + 400 + "px""></div>"
	+ СтрЗаменить(ТекстНадписи, Символы.ПС, "");
	
	Возврат СтрокаПредставление;
	
КонецФункции

Функция ЭкранироватьСимволы(СтрокаЭкранирования) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаЭкранирования, """","\"""), "'", "\'"),
			"&", "\&"), "<", "\<"), ">", "\>");
КонецФункции

#КонецОбласти

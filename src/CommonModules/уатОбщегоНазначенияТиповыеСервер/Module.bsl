////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Функция формирует фамилию, имя и отчество одной строкой
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы,
//                если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
		?(НЕ ПустаяСтрока(Отчество) , 
		Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
		?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;
	
КонецФункции // ПолучитьФамилиюИмяОтчество()

// Получение представления для документа, удостоверяющего личность
//
// Параметры
//  ДанныеФизЛица  – Коллекция данных физ. лица (структура, строка таблицы, ...), содержащая значения: 
//                   ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан  
//
// Возвращаемое значение:
//   Строка   – Представление документа, удостоверяющего личность
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт
	
	Возврат Строка(ДанныеФизЛица.ДокументВид) + " " + НСтр("en='series';ru='серия'") + " " +
	ДанныеФизЛица.ДокументСерия       + ", " + НСтр("en='number';ru='номер'") + 
	ДанныеФизЛица.ДокументНомер       + ", " + НСтр("en='issued';ru='выданный'") + " " +
	Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
	ДанныеФизЛица.ДокументКемВыдан;
	
КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой
//                определяется должность и подразделение работника
//  ФизЛицо     - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                по которому возвращается совокупность данных
//  ДатаСреза   - Дата - дата, на которую считываются данные
//  ФИОКратко   - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы,
//                если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчество
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ДокументВид
//                 - ДокументСерия
//                 - ДокументНомер
//                 - ДокументДатаВыдачи
//                 - ДокументКемВыдан
//                 - ДокументКодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.ТабельныйНомер КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК ФизЛицо
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|			уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|			уатКадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
	|			уатКадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
	|					&ДатаСреза,
	|					Сотрудник.ФизическоеЛицо = &ФизЛицо
	|						И Организация = &Организация) КАК уатКадроваяИсторияСотрудниковСрезПоследних) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ФизЛица.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность УБЫВ,
	|	ДокументыФизическихЛицСрезПоследних.Период УБЫВ";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
	|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
	|ДокументВид, ДокументСерия, ДокументНомер,  
	|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
	|ПредставлениеДокумента");
	
	ЗаполнитьЗначенияСвойств(Результат, Данные);
	
	ФИОСтруктура = уатОбщегоНазначения.уатФИОФизЛица(ФизЛицо, ДатаСреза);
	Если ТипЗнч(ФИОСтруктура) = Тип("Структура") Тогда
		Результат.Фамилия = ФИОСтруктура.Фамилия;
		Результат.Имя = ФИОСтруктура.Имя;
		Результат.Отчество = ФИОСтруктура.Отчество;
		Результат.Представление = ПолучитьФамилиюИмяОтчество(ФИОСтруктура.Фамилия, ФИОСтруктура.Имя, ФИОСтруктура.Отчество, ФИОКратко);
	Иначе
		Результат.Представление = Строка(ФизЛицо);
	КонецЕсли;
		
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("ФормированиеПечатныхФорм") <> Неопределено Тогда
		Возврат Вычислить("ФормированиеПечатныхФорм.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом)");
	КонецЕсли;
	
	Если ПустаяСтрока(Список) Тогда
		Список = "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",                " " + НСтр("en='TIN';ru='ИНН'") + " ");
	СоответствиеПараметров.Вставить("КПП",                " " + НСтр("en='RRC';ru='КПП'") + " ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",           " " + НСтр("en='tel:';ru='тел.:'") + " ");
	СоответствиеПараметров.Вставить("НомерСчета",         " " + НСтр("en='ac';ru='р/с'") + " ");
	СоответствиеПараметров.Вставить("Банк",               " " + НСтр("en='in the Bank';ru='в банке'") + " ");
	СоответствиеПараметров.Вставить("БИК",                " " + НСтр("en='BIC';ru='БИК'") + " ");
	СоответствиеПараметров.Вставить("КоррСчет",           " " + НСтр("en='K/s';ru='к/с'") + " ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          " " + НСтр("en='RBOC code';ru='Код по ОКПО'") + " ");
	СоответствиеПараметров.Вставить("ОГРН",               " " + НСтр("en='MSRN';ru='ОГРН'") + " ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм", " ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				#Если Клиент Тогда
					ТекстНСТР = НСтр("en='Failed to determine parameter value of company:';ru='Не удалось определить значение параметра организации:'") + " " + ИмяПараметра;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				#КонецЕсли
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Возвращает признак использования при печати пользовательского макета печатной формы.
//
// Параметры:
//  ПолныйПутьКМакету - Строка - полный путь к макету в формате:
//                               "Документ.<ИмяДокумента>.<ИмяМакета>"
//                               "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                               "ОбщийМакет.<ИмяМакета>".
// Возвращаемое значение:
//   Булево - Истина, если используется пользовательский макет печатной формы;
//            Ложь - используется предопределенный макет.
//
Функция ИспользуетсяПользовательскийМакетПечатнойФормы(ПолныйПутьКМакету) Экспорт
	
	ЧастиПути = СтрЗаменить(ПолныйПутьКМакету, ".", Символы.ПС);
	
	Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1) + "." + СтрПолучитьСтроку(ЧастиПути, 2);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 3);
	ИначеЕсли СтрЧислоСтрок(ЧастиПути) = 2 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 2);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en='Template ""%1"" is not found. Operation aborted.';ru='Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Объект",    ПутьКМетаданным);
	Запрос.Параметры.Вставить("ИмяМакета", ПутьКОбъектуМетаданных);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользовательскиеМакетыПечати.Макет КАК Макет,
	|	ПользовательскиеМакетыПечати.Использование КАК Использование
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Объект = &Объект
	|	И ПользовательскиеМакетыПечати.ИмяМакета = &ИмяМакета
	|	И ПользовательскиеМакетыПечати.Использование";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапросаПустой = Запрос.Выполнить().Пустой();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапросаПустой;
	
КонецФункции // ИспользуетсяПользовательскийМакетПечати()


////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция уатФормаМножественногоЧисла(Слово1, Слово2, Слово3, ЦелоеЧисло) Экспорт
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;
	
КонецФункции

// Функция формирует список элементов перечисления
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция уатПолучитьСписокЭлементовПеречисления(ИмяПеречисления) Экспорт
	
	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Перечисления[ИмяПеречисления];
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для Каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		СписокЭлементовПеречисления.Добавить(ЭлементПеречисления, Строка(ЭлементПеречисления));
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;
	
КонецФункции // ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления()

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт

	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='Wrong type second parameter of ИменаИлиСтруктураРеквизитов: %1';ru='Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
			Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;

	Попытка
		Если Ссылка.Пустая() Тогда
			Возврат СтруктураРеквизитов;
		КонецЕсли;
	Исключение
		ТекстНСТР = НСтр("en='Wrong type second parameter of ПолучитьЗначенияРеквизитов';ru='Неверный тип второго параметра ПолучитьЗначенияРеквизитов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат СтруктураРеквизитов;
	КонецПопытки;
			
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = "ПсевдонимЗаданнойТаблицы." + ?(ЗначениеЗаполнено(КлючИЗначение.Значение), 
			СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
	
КонецФункции

// Функция ПолучитьЗначениеРеквизита возвращает значение
// реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

// Возвращает данные для печати этикеток,
//	получает эти данные из модулей менеджеров объектов печати.
//
// Параметры:
//	Идентификатор	- Строка - может принимать значения "Этикетки";
//	ОбъектыПечати	- Массив - массив ссылок на объекты для печати, ссылки должны быть одного типа;
//	ДополнительныеПараметры	- Структура - параметры печати.
//
// Возвращаемое значение:
//	Строка	-	адрес структуры во временном хранилище, содержащей данные для печати.
//
Функция ДанныеДляПечатиЭтикеток(Идентификатор, ОбъектыПечати, ДополнительныеПараметры) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектыПечати[0]);
	Возврат МенеджерОбъекта.ДанныеДляПечатиЭтикеток(ОбъектыПечати);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕСЧЕТЫ СУММ В ДОКУМЕНТАХ

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура уатРассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = Истина;
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) Тогда
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
	КонецЕсли;
	
	СуммаВключаетНДС = Истина;
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНДС = уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС, СуммаВключаетНДС,
	уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры // уатРассчитатьСуммуНДСТабЧасти()

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция уатПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
			И уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ДокументОбъект.УчитыватьНДС
			И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция уатРассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Процедура выполняет общие действия при изменении контрагента
//
// Параметры:
//  ДокументОбъект                          - объект редактируемого документа,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязательный.
//
Процедура уатПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ЕстьДоговорКонтрагента = уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);

	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицо = "";
			Иначе
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	Иначе
		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если  уатМожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
				ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = уатПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицо)
				ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
				КонтактноеЛицо = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
			Иначе
				Если ДокументОбъект.КонтактноеЛицо.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицо = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И ДоговорКонтрагента <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				ДокументОбъект.Организация        = ДоговорКонтрагента.Организация;
			ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагента.Организация Тогда
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено; // Очистить старый договор
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) И КонтактноеЛицо <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицо = КонтактноеЛицо;
	КонецЕсли; 
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
		И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
		И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Проверяет возможность использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция уатМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Экспорт

	Перем СписокДопустимыхВидовДоговоров, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров"     , СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора"       , ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов"   , ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе не выбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено
		И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - контрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция уатПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
			СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		КонецЕсли;
		Договор = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент, СписокДопустимыхВидовДоговоров, Организация);
		
		Если уатМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров",   СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора",     ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарКонтрагент",          Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора",         СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов",ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация",         Организация);
	
	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	КонецЕсли;
	Договор = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент, СписокДопустимыхВидовДоговоров, Организация);
	Если ЗначениеЗаполнено(Договор) И уатМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
		Возврат Договор;
	КонецЕсли;
	
	// не нашли основной, тянем первый попавшийся
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|");
		
	ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДоговоров.Количество() = 1 ИЛИ (ТаблицаДоговоров.Количество() И ТаблицаДоговоров[0].Приоритет = 1) Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьДоговорПоОрганизацииИКонтрагенту()

// Функция возвращает основной банковский счет организации
//
// Параметры:
//  ТекОрганизация	 -  организация, по которой определяется счет
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьОсновнойСчетПоОрганизации(ТекОрганизация) Экспорт

	Если ЗначениеЗаполнено(ТекОрганизация)
		И ТипЗнч(ТекОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", "Организации") Тогда
			Возврат ТекОрганизация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСчетПоОрганизацииНаСервере()


////////////////////////////////////////////////////////////////////////////////
// ВЫЗЫВАЕТСЯ ИЗ МОДУЛЯ "уатОбщегоНазначенияТиповыеКлиент"

// Функция определяет установку опции "Проведение" для документа 
//
// Параметры: 
//  ДокументОбъект  - Документ, проверяемый на доступность проведения
//
// Возвращаемое значение:
//  Булево. Истина - если опция "Проведение" установлена в разрешить, в противном случае - Ложь.
//
Функция РазрешеноПроведениеДокумента(ДокументОбъект) Экспорт 

	Если Метаданные.Документы.Содержит(ДокументОбъект.Метаданные())
		И ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;

КонецФункции // РазрешеноПроведениеДокумента()

// Функция возвращает указанные метаданные для объекта
//
// Параметры: 
//  Объект            - Объект
//  СтрокаМетаданных  - Свойства объекта метаданных (реквизиты, таб.части ...)
//
// Возвращаемое значение:
//  Определяется типом полученного значения свойства метаданных объекта  
//
Функция МетаданныеОбъекта(Объект, СтрокаМетаданных) Экспорт 
	
	Возврат Объект.Метаданные()[СтрокаМетаданных];
	
КонецФункции // МетаданныеОбъекта()

// Функция получает макет по умолчанию для объекта 
//
// Параметры: 
//  ИмяОбъекта   - имя объекта метаданных
//
// Возвращаемое значение:
//  Сохраненное значение
//
Функция ПолучитьМакетПоУмолчанию(ИмяОбъекта) Экспорт 
	
	ГУИДТекПользователя = Строка(ПользователиКлиентСервер.АвторизованныйПользователь().ИдентификаторПользователяИБ);
	
	Возврат ХранилищеОбщихНастроек.Загрузить(ИмяОбъекта + "МакетПечати",,,ГУИДТекПользователя);
	
КонецФункции // ПолучитьМакетПоУмолчанию()

// Сохраняет в настройках пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
//
// Параметры:
//  ИмяОбъекта      - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  НазваниеМакета  - строка, определяет название текущего макета печатной формы,
//                    которое совпадает с текстом на кнопке печати в диалоге.
//
Процедура СохранитьТекущуюКнопкуПечатиНаСервере(ИмяОбъекта, НазваниеМакета) Экспорт 

	ГУИДТекПользователя = Строка(ПользователиКлиентСервер.АвторизованныйПользователь().ИдентификаторПользователяИБ);
	
	ХранилищеОбщихНастроек.Сохранить(ИмяОбъекта,,НазваниеМакета,,ГУИДТекПользователя);

КонецПроцедуры // СохранитьТекущуюКнопкуПечатиНаСервере()

// Функция возвращает валюту, указанную в договоре
//
// Параметры:
//  Договор  - договор, из которого необходимо получить валюту.
//
// Возвращаемое значение:
//   СправочникСсылка, Валюты  - валюта, указанная в договоре.
//
Функция ПолучитьВалютуВзаиморасчетовИзДоговора(Договор) Экспорт 

	Если ЗначениеЗаполнено(Договор)
		И ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов) Тогда 
			Возврат Договор.ВалютаВзаиморасчетов;
	Иначе 
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьВалютуВзаиморасчетовИзДоговора()

// Функция предназначена для получения комментария из XML строки контактной информации.
//
Функция ПолучитьКомментарийИзКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(XMLСтрока);
	
КонецФункции // ПолучитьКомментарийКонтактнойИнформации()

// Функция предназначена для получения страны контактной информации.
//
Функция ПолучитьСтрануИзНаименования(Знач НаименованиеСтраны = "") Экспорт
	
	Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
		Возврат Справочники.СтраныМира.НайтиПоНаименованию(НаименованиеСтраны, Истина);
	Иначе
		Возврат РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	КонецЕсли;
	
КонецФункции

Функция СтранаИзXML(Текст, ТипКонтактнойИнформации, РезультатыЧтения) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Текст, ТипКонтактнойИнформации, РезультатыЧтения);
	Попытка
		Страна = Результат.Состав.Страна;
	Исключение
		Страна = "";
	КонецПопытки;
	Возврат ПолучитьСтрануИзНаименования(Страна);
	
КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Процедура устанавливает отбор у списка
//
Процедура УстановитьОтборУСписка(ОтборСКД, Знач ЛевоеЗначение, Знач ПравоеЗначение, Знач ВидСравнения = Неопределено, Знач Использование = Истина) Экспорт      
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	КонецЕсли;
	
	ЭлементыОтбора = ОтборСКД.Элементы;
	ЭлементОтбораДанных = Неопределено;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораДанных = Неопределено Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
	КонецЕсли;
	
	ЭлементОтбораДанных.ВидСравнения   = ВидСравнения;
	ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбораДанных.Использование  = Использование;      
КонецПроцедуры

// Процдура проверяет возможность записи объекта, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Процедура ПроверитьЗаписьНовогоОбъектаВФорме(Форма, Ссылка, СтрокаТипОбъекта = Неопределено, флЗаписыватьВсегда = Ложь, флОтказ = Ложь) Экспорт
	
	Если Ссылка.Пустая() ИЛИ флЗаписыватьВсегда Тогда
		флОтказ = Истина;
		
		ТекстНСТР = НСтр("en='To perform this operation you need to record';ru='Для выполнения данной операции необходимо записать'") + " ";
		Если СтрокаТипОбъекта = "документ" Тогда
			ТекстНСТР = ТекстНСТР + НСтр("en='document!';ru='документ!'");
		Иначе
			ТекстНСТР = ТекстНСТР + НСтр("en='element!';ru='элемент!'");
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
	КонецЕсли; 
	
КонецПроцедуры // ЗаписатьНовыйОбъектВФорме()

// Процедура обновляет состояние документа.
//
Процедура ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента,
		РазрешеноПроведение) Экспорт
	
	Если Объект.Проведен Тогда
		СостояниеДокумента = "Проведен";
		КартинкаСостоянияДокумента = 1;
	ИначеЕсли РазрешеноПроведение Тогда
		СостояниеДокумента = "Не проведен";
		КартинкаСостоянияДокумента = 0;
	Иначе
		СостояниеДокумента = "Записан";
		КартинкаСостоянияДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

// Процедура открывает форму отчета по документам ТС и водителей с отбором по переданному параметру - документу
//
&НаКлиенте
Процедура ОткрытьОтчетПоДокументамТСиВодителей(Ссылка) Экспорт
	сткПараметры = уатОбщегоНазначенияСервер.ПолучитьПараметрыОткрытияОтчетыВзаиморасчеты(Ссылка);
	ОткрытьФорму("Отчет.уатДокументыПоПЛИРазнарядкам.Форма", сткПараметры);
КонецПроцедуры

// Процедура обработки нажатия гиперссылки в поле панели информации по ТС.
//
Процедура ПанельДопИнформацииПоТСПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка, ТС) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ТС) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ДанныеСобытия.href, "ПриближениеСроковТО") > 0 Тогда 
		сткПараметры = уатОбщегоНазначенияСервер.ПолучитьПараметрыОткрытияОтчетПриближениеСроковТО(ТС);
		ОткрытьФорму("Отчет.уатПриближениеСроковТО.Форма", сткПараметры, Форма);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "СписокДокументовТС") > 0 Тогда 
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ВладелецДокументов, ПринадлежностьДокументов", ТС, ПредопределенноеЗначение("Перечисление.уатПринадлежностьДокументов.ДокументыТС"));
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.уатРегистрационныеДокументы.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "СписокТК") > 0 Тогда
			
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КомуВыдана");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = ТС;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус.Действует");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		эОтбор.ПравоеЗначение = Ложь;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТКПросрочена");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = Истина;
		эОтбор.Использование  = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		ПараметрыФормы.Вставить("ОтображатьНеАктуальные", Истина);
		
		ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ДокументыВодителя:") > 0 Тогда 
		Попытка
			стрGUID = Новый УникальныйИдентификатор(Прав(ДанныеСобытия.href, 36));
		Исключение
			Возврат;
		КонецПопытки;
		
		Водитель = уатОбщегоНазначения.СформироватьСсылкуНаСотрудникаПоGUID(стрGUID);
		Если Не ЗначениеЗаполнено(Водитель) Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ВладелецДокументов, ПринадлежностьДокументов",
			Водитель, ПредопределенноеЗначение("Перечисление.уатПринадлежностьДокументов.ДокументыВодителя")));
		ОткрытьФорму("Справочник.уатРегистрационныеДокументы.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ТКВодителя:") > 0 Тогда 
		Попытка
			стрGUID = Новый УникальныйИдентификатор(Прав(ДанныеСобытия.href, 36));
		Исключение
			Возврат;
		КонецПопытки;
		
		Водитель = уатОбщегоНазначения.СформироватьСсылкуНаСотрудникаПоGUID(стрGUID);
		Если Не ЗначениеЗаполнено(Водитель) Тогда 
			Возврат;
		КонецЕсли;
		
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КомуВыдана");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = Водитель;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус.Действует");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		эОтбор.ПравоеЗначение = Ложь;
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТКПросрочена");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		эОтбор.ПравоеЗначение = Истина;
		эОтбор.Использование  = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		ПараметрыФормы.Вставить("ОтображатьНеАктуальные", Истина);
		
		ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаСписка", ПараметрыФормы, Элемент);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ОтчетПробег") > 0 Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ТС", ТС));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.уатПробегТС.Форма", ПараметрыФормы, Форма);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.href, "ОтчетНаработка") > 0 Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ТС", ТС));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.уатНаработкаОборудованияВМоточасах.Форма", ПараметрыФормы, Форма);
		
	Иначе 
		Попытка
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.href);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элементов формы связанных с пунктами назначения
//
Процедура ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ПутьКДанным) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ПутьКДанным);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

// Обработчик события ОбработкаВыбора элементов формы связанных с пунктами назначения
//
Процедура ПунктОбработкаВыбора(ПутьКДанным, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		Возврат;
	КонецЕсли;
	ПутьКДанным = ВыбранноеЗначение;
	
КонецПроцедуры

// Выполняет заполненение недостающих параметров в объединенном решении
//
Процедура ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта,ВалютаДокумента,ВалютаРасчетовПередИзменением ,УчитыватьНДС = Неопределено,СуммаВключаетНДС=Неопределено) Экспорт
	Если СтруктураЦеныИВалюта.Свойство("ДокументБезНДС") Тогда
		Если Не СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС")И УчитыватьНДС <> Неопределено  Тогда
			СтруктураЦеныИВалюта.Вставить("НалогообложениеНДС",Не СтруктураЦеныИВалюта.ДокументБезНДС)
		КонецЕсли;
	КонецЕсли;
	Если Не СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") И УчитыватьНДС <> Неопределено Тогда
		СтруктураЦеныИВалюта.Вставить("ПредНалогообложениеНДС",УчитыватьНДС);
	КонецЕсли;
	Если Не СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
		ПересчтитатьЦены = ?(ВалютаДокумента = ВалютаРасчетовПередИзменением,Ложь,Истина);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",ПересчтитатьЦены);
	КонецЕсли;
	
	Если Не СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") И СуммаВключаетНДС <> Неопределено Тогда
		ПредСуммаВключаетНДС = СуммаВключаетНДС;
		СтруктураЦеныИВалюта.Вставить("ПредСуммаВключаетНДС",ПредСуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Стоянка

// Функция заполняет время доступности и стоянку в пункте.
//
Процедура ЗаполнитьВремяДоступностиИСтоянкуВПункте(ТекущиеДанные, ДатаДокумента) Экспорт
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Пункт) Тогда
		мВремяС  = 0; 
		мВремяПо = 0; 
		мСтоянка = 0; 
			
		Если ТипЗнч(ТекущиеДанные.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
			мВыбЗнач = ТекущиеДанные.Пункт;
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(мВыбЗнач, ТекущиеДанные.ОтправительПолучатель);
			
			мВремяС  = ВремяДоступности.ВремяДоступностиС;
			мВремяПо = ВремяДоступности.ВремяДоступностиПо;

			мСтоянка = уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ТекущиеДанные.Пункт);
			
		Иначе 
			мВыбЗнач = ТекущиеДанные.Пункт;
		КонецЕсли;
		
		Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
			мВремяС = мВремяС - Дата('00010101');
		КонецЕсли;
		
		Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
			мВремяПо = мВремяПо - Дата('00010101');
			мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
		КонецЕсли;
		
		мДатаС  = ?(ЗначениеЗаполнено(ТекущиеДанные.ПрибытиеПлан), НачалоДня(ТекущиеДанные.ПрибытиеПлан), НачалоДня(ДатаДокумента));
		мДатаПо = ?(ЗначениеЗаполнено(ТекущиеДанные.УбытиеПлан), НачалоДня(ТекущиеДанные.УбытиеПлан), НачалоДня(ДатаДокумента));
		
		ТекущиеДанные.ПрибытиеПлан = мДатаС + мВремяС;
		ТекущиеДанные.УбытиеПлан   = мДатаПо + мВремяПо;
		ТекущиеДанные.Стоянка      = мСтоянка;
		ТекущиеДанные.СтоянкаДоп   = уатОбщегоНазначения.ПолучитьВремяДопСтонки(ТекущиеДанные.Пункт);
		
		ТекущиеДанные.ОкноС = мДатаС + мВремяС;
		ТекущиеДанные.ОкноПо = мДатаС + мВремяПо;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Номентклатура

&НаКлиенте
Процедура ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Знач ТекНоменклатура, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	// Заглушка
	
КонецПроцедуры

Функция ПолучитьЦветЗаполнения(ТекущееЗначение, МаксимальноеЗначение) Экспорт
	
	ТемноЗеленыйЦвет		 = Новый Цвет(0, 100, 0);
	ЛимонноЗеленыйЦвет		 = Новый Цвет(50, 205, 50);
	ТемноЗолотистыйЦвет		 = Новый Цвет(184, 134, 11);
	ТемноОранжевыйЦвет		 = Новый Цвет(255, 140, 0);
	МалиновыйЦвет			 = Новый Цвет(220, 20, 60);
	ЧерныйЦвет				 = Новый Цвет;
	
	Если МаксимальноеЗначение = 0 Тогда
		ЗначениеПроцентом = 0;
	Иначе
		ЗначениеПроцентом = ТекущееЗначение / МаксимальноеЗначение * 100;
	КонецЕсли;
	
	Если ЗначениеПроцентом >= 0 И ЗначениеПроцентом <= 25 Тогда
		Возврат ТемноЗеленыйЦвет;
	ИначеЕсли ЗначениеПроцентом > 25 И ЗначениеПроцентом <= 50 Тогда
		Возврат ЛимонноЗеленыйЦвет;
	ИначеЕсли ЗначениеПроцентом > 50 И ЗначениеПроцентом <= 75 Тогда
		Возврат ТемноЗолотистыйЦвет;
	ИначеЕсли ЗначениеПроцентом > 75 И ЗначениеПроцентом <= 100 Тогда
		Возврат ТемноОранжевыйЦвет;
	ИначеЕсли ЗначениеПроцентом > 100 Тогда
		Возврат МалиновыйЦвет;
	Иначе
		Возврат ЧерныйЦвет;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Печать

// Обработчик динамически подключаемой команды печати.
//
// Команда  - КомандаФормы - подключаемая команда формы, выполняющая обработчик Подключаемый_ВыполнитьКомандуПечати.
//            (альтернативный вызов*) Структура    - строка таблицы КомандыПечати, преобразованная в структуру.
// Источник - ТаблицаФормы, ДанныеФормыСтруктура - источник объектов печати (Форма.Объект, Форма.Элементы.Список).
//            (альтернативный вызов*) Массив - список объектов печати.
//
// *Альтернативный вызов - указанные типы используются в случае, если вызов выполняется не из штатного
//                         обработчика Подключаемый_ВыполнитьКомандуПечати.
//
Процедура ВыполнитьПодключаемуюКомандуПечати(Знач Команда, Знач Форма, Знач Источник) Экспорт
	
	ОписаниеКоманды = Команда;
	//Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
	//	ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, Форма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
	//КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Команда",  Команда);
	ДополнительныеПараметры.Вставить("Форма",    Форма);
	ДополнительныеПараметры.Вставить("Источник", Источник);
	
	Если Не ОписаниеКоманды.НеВыполнятьЗаписьВФорме И ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура")
		И (Источник.Ссылка.Пустая() Или Форма.Модифицированность) Тогда
		
		Если Источник.Ссылка.Пустая() Тогда
			ТекстНСТР = НСтр("en='Data has not been recorded yet."
"Executing of action ""%1"" is possible only after recorded the data."
"The data will be recorded.';ru='Данные еще не записаны."
"Выполнение действия ""%1"" возможно только после записи данных."
"Данные будут записаны.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР,ОписаниеКоманды.Представление);
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуПечатиПодтверждениеЗаписи", уатОбщегоНазначенияКлиент, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		КонецЕсли;
		уатОбщегоНазначенияКлиент.ВыполнитьПодключаемуюКомандуПечатиПодтверждениеЗаписи(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ВыполнитьПодключаемуюКомандуПечатиПодтверждениеЗаписи(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьПодключаемуюКомандуПечати
//
Процедура ВыполнитьПодключаемуюКомандуПечатиПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Команда  = ДополнительныеПараметры.Команда;
	Форма    = ДополнительныеПараметры.Форма;
	Источник = ДополнительныеПараметры.Источник;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Попытка
			Форма.Записать();
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Причина.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецПопытки;
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			Возврат; // запись не удалась
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(Команда, Форма, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияСеанса

// Конечная (клиентская) стадия инициализации подсистемы УАТ - клиентские предупреждения, сообщения
//
&НаКлиенте
Процедура уатИнициализацияСеансаКлиент(ДопПараметры = Неопределено) ЭКСПОРТ
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// Проверка системы защиты
	Если уатОбщегоНазначенияПовтИсп.ИспользоватьЗащитуСЛК() Тогда
		Если ДопПараметры.ОшибкаСистемыЗащиты Тогда
			ДопПараметры.Вставить("Отказ",Истина);
			ПараметрыФормы = Новый Структура;
			Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
				Описание =  "Менеджер лицензий решения ""Транспортная логистика, экспедирование и управление автотранспортом КОРП"" (серия ключей 7662) не подключен или параметры подключения указаны не верно!";
			Иначе
				Описание =  "Менеджер лицензий решения ""Управление автотранспортом ПРОФ"" (серия ключей A9EF) не подключен или параметры подключения указаны не верно!";
			КонецЕсли;
			
			Если ДопПараметры.ДоступнаРольСЛК Тогда 
				ПараметрыФормы.Вставить("МенеджерЛицензийСЛК");          
			Иначе
				Описание = Описание + "
				|Для настройки требуется роль ""Администратор"" подсистемы ""Полные права"" или роль ""Управление менеджером лицензий СЛК"".";
			КонецЕсли;
			ПараметрыФормы.Вставить("Описание",Описание);
			ПараметрыФормы.Вставить("Заголовок", "Ошибка системы защиты");
			ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
			//ОткрытьФорму("ОбщаяФорма.уатПредупреждение", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			ОткрытьФорму("Обработка.слкМенеджерЛицензий.Форма", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Возврат;
		КонецЕсли;
	Иначе
		Если ДопПараметры.ОшибкаСистемыЗащиты Тогда
			ДопПараметры.Вставить("Отказ", Истина);
			ДопПараметры.Вставить("ЗавершениеРаботы", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиСистемыЗащитыОбработкаРезультата", ЭтотОбъект, ДопПараметры);
			ПараметрыФормы = Новый Структура("РезультатыЗапуска,ПрограммноеОткрытиеФормы", Неопределено, ИСТИНА);
			ОткрытьФорму("Обработка.УправлениеЛицензированием.Форма.СостояниеСистемыЗащиты", ПараметрыФормы,,,,, ОписаниеОповещения);
			Возврат;
		КонецЕсли;
		
		Если ДопПараметры.ОшибкаВариантаПоставки Тогда
			ТекстНСТР = НСтр("en='Form is not available in the current version of the program!';ru='Форма недоступна в текущей версии программы!'");
			ПоказатьПредупреждение(,ТекстНСТР);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при получении результата работы подчиненной формы.
//
// Параметры:
//  РезультатЗакрытия  - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрОповещения - Произвольный - Дополнительные параметры вызова обработчика.
//
&НаКлиенте
Процедура НастройкиСистемыЗащитыОбработкаРезультата(РезультатЗакрытия, Параметры=Неопределено) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ИспользоватьЗащитуСЛК() Тогда
		// Проверка системы защиты
		ОписаниеОшибки = "";
		Серия = уатЗащищенныеФункцииСервер.ПолучитьСериюКлючейУАТ();
		ЛицензияПолучена = слкМенеджерЗащиты.ПроверитьЛицензиюСеанса(Серия, ОписаниеОшибки, "ПроверитьСтатус");	
		Если НЕ ЛицензияПолучена Тогда
			ОписаниеОшибки = "";
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	Иначе
		ЗавершениеРаботы = Неопределено;
		Параметры.Свойство("ЗавершениеРаботы",ЗавершениеРаботы);
		ЗавершениеРаботы = ?(ЗавершениеРаботы=Неопределено, Истина, ЗавершениеРаботы);
		
		Параметры.Отказ = (РезультатЗакрытия=Неопределено) ИЛИ РезультатЗакрытия;
		
		// завершаем работу программы при необходимости
		Если Параметры.Отказ И ЗавершениеРаботы Тогда
			ОписаниеОшибки = "";
			ЛицензированиеСервер.ЗавершениеРаботыСистемыЛицензирования(ОписаниеОшибки);
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НастройкиСистемыЗащитыОбработкаРезультата()

Процедура УстановкаРасширенияРаботыСФайламиДляВебКлиента() Экспорт 
	
	Оповещение =  Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("ПовторноеПодключение", Ложь));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение); 

КонецПроцедуры

Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт 
	
	Если Не ДополнительныеПараметры.ПовторноеПодключение И Не Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		
	ИначеЕсли ДополнительныеПараметры.ПовторноеПодключение И Не Подключено Тогда 
		ТекстНСТР = НСтр("en='Failed to connect the extension of work with files.';ru='Не удалось подключить расширение работы с файлами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(ДополнительныеПараметры) Экспорт 
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("ПовторноеПодключение", Ложь));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура УстановитьРежимОсновногоОкна() Экспорт
	Если уатОбщегоНазначения_проф.НеобходимоОткрытиеТерминалаПЛприСтарте() Тогда
		КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.Киоск);
	ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательВодитель() Тогда
		КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьТерминалПЛПриНачалеРаботыСистемы(ДопПараметры) Экспорт
	Если ДопПараметры.ПодсистемаУАТинициализирована И уатОбщегоНазначения_проф.НеобходимоОткрытиеТерминалаПЛприСтарте() Тогда 
		ПараметрыФормы = Новый Структура("ОтображатьКнопкуЗакрытия", Ложь);
		ОткрытьФорму("Обработка.уатТерминалПриемаИВыдачиПутевыхЛистов.Форма", ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьСоставНачальнойСтраницы() Экспорт
	ИнтерфейсИзменен = уатОбщегоНазначенияСервер.УстановитьСоставНачальнойСтраницы();
	Если ИнтерфейсИзменен Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Контрагенты

Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И Не ПустаяСтрока(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",     Истина);
		ПараметрыФормы.Вставить("ТекстЗаполнения", ВыбранноеЗначение);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = уатОбщегоНазначенияСервер.ДанныеВыбораКонтрагента(ПараметрыПолученияДанных, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = уатОбщегоНазначенияСервер.ДанныеВыбораКонтрагента(ПараметрыПолученияДанных, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма, ОповещениеОВыполнении = Неопределено) Экспорт
	Если Форма.Объект.ДоговорКонтрагента = Форма.Договор Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоговора = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Форма.Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	//ВалютаРасчетовПередИзменением = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Форма.Договор, "ВалютаВзаиморасчетов");
	ВалютаРасчетовПередИзменением = Форма.Объект.ВалютаДокумента;
	Если ВалютаДоговора <> ВалютаРасчетовПередИзменением Тогда
		Попытка
			СуммаДокумента = Форма.Объект.СуммаДокумента;
		Исключение
			СуммаДокумента = 0;
		КонецПопытки;
		Если СуммаДокумента <> 0 Тогда
			ДопПараметры = Новый Структура("Форма, ОповещениеОВыполнении", Форма, ОповещениеОВыполнении);
			Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииОтвет", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(Оповещ,
				СтрШаблон("Выбран договор в другой валюте.
				|Будет установлена новая валюта документа и выполнен пересчет цен из %1 в %2 по текущему курсу.
				|Продолжить?", ВалютаРасчетовПередИзменением, ВалютаДоговора),
				РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОповещениеОВыполнении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОВыполнении, Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзмененииОтвет(Результат, ДопПараметры) Экспорт
	ИзменитьВалюту = (Результат = КодВозвратаДиалога.ОК);
	Если ИзменитьВалюту Тогда
		Если ДопПараметры.ОповещениеОВыполнении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДопПараметры.ОповещениеОВыполнении, ИзменитьВалюту);
		КонецЕсли;
	Иначе
		ДопПараметры.Форма.Объект.ДоговорКонтрагента = ДопПараметры.Форма.Договор;
	КонецЕсли;
КонецПроцедуры

// Процедура при изменении договора.
//
Процедура ПриИзмененииДоговора(Форма, Знач Оповещение, ДоговорПередИзменением) Экспорт
	Если Форма.Договор = Форма.Объект.ДоговорКонтрагента Тогда
		Если Оповещение <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//ВалютаРасчетовПередИзменением = Форма.ВалютаРасчетов;
	ВалютаРасчетовПередИзменением = Форма.Объект.ВалютаДокумента;
	Форма.ВалютаРасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Форма.Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если ЗначениеЗаполнено(Форма.ВалютаРасчетов) И Форма.ВалютаРасчетов <> ВалютаРасчетовПередИзменением Тогда
		Если уатОбщегоНазначенияСервер.ЕстьРеквизитСсылки("ДатаКурса", Форма.Объект.Ссылка) И ЗначениеЗаполнено(Форма.Объект.ДатаКурса) Тогда
			ДатаКурса = Форма.Объект.ДатаКурса;
		Иначе
			ДатаКурса = Форма.Объект.Дата;
		КонецЕсли;
				
		ВалютаРасчетовКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Форма.ВалютаРасчетов, ДатаКурса);
	
		//Форма.Объект.ВалютаДокумента = Форма.ВалютаРасчетов;
		//
		//Если ЗначениеЗаполнено(Форма.Объект.ДоговорКонтрагента) Тогда
		//	Если уатОбщегоНазначенияСервер.ЕстьРеквизитСсылки("КурсВзаиморасчетов", Форма.Объект.Ссылка) Тогда
		//		Форма.Объект.КурсВзаиморасчетов	   = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1,	ВалютаРасчетовКурсКратность.Курс);
		//	ИначеЕсли уатОбщегоНазначенияСервер.ЕстьРеквизитСсылки("Курс", Форма.Объект.Ссылка) Тогда
		//		Форма.Объект.Курс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
		//	КонецЕсли;
		//	Если уатОбщегоНазначенияСервер.ЕстьРеквизитСсылки("КратностьВзаиморасчетов", Форма.Объект.Ссылка) Тогда
		//		Форма.Объект.КратностьВзаиморасчетов = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
		//	ИначеЕсли уатОбщегоНазначенияСервер.ЕстьРеквизитСсылки("Кратность", Форма.Объект.Ссылка) Тогда
		//		Форма.Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
		//	КонецЕсли;
		//КонецЕсли;
		
		СтруктураЦеныИВалюта = Новый Структура;
		СтруктураЦеныИВалюта.Вставить("ВалютаДокумента",     Форма.ВалютаРасчетов);
		СтруктураЦеныИВалюта.Вставить("ПредВалютаДокумента", ВалютаРасчетовПередИзменением);
		СтруктураЦеныИВалюта.Вставить("Курс",                ВалютаРасчетовКурсКратность.Курс);
		СтруктураЦеныИВалюта.Вставить("Кратность",           ВалютаРасчетовКурсКратность.Кратность);
		СтруктураЦеныИВалюта.Вставить("ДатаКурса",           ДатаКурса);
		Если уатОбщегоНазначенияСервер.ЕстьРеквизитСсылки("УчитыватьНДС", Форма.Объект.Ссылка) Тогда
			СтруктураЦеныИВалюта.Вставить("СуммаВключаетНДС",   Форма.Объект.СуммаВключаетНДС);
			СтруктураЦеныИВалюта.Вставить("НалогообложениеНДС", Форма.Объект.УчитыватьНДС);
		Иначе
			СтруктураЦеныИВалюта.Вставить("СуммаВключаетНДС",   Ложь);
			СтруктураЦеныИВалюта.Вставить("НалогообложениеНДС", Ложь);
		КонецЕсли;
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",    Истина);
		
		СтруктураЦеныИВалюта.Вставить("ВалютаРасчетов",    СтруктураЦеныИВалюта.ВалютаДокумента);
		СтруктураЦеныИВалюта.Вставить("КурсРасчетов",      СтруктураЦеныИВалюта.Курс);
		СтруктураЦеныИВалюта.Вставить("КратностьРасчетов", СтруктураЦеныИВалюта.Кратность);
		
		СтруктураЦеныИВалюта.Вставить("КроссКурс", 1);
		
		ДополнительныеПараметры = Новый Структура("Оповещение, ВалютаРасчетовПередИзменением", Неопределено, ВалютаРасчетовПередИзменением);
		
		Форма.ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(СтруктураЦеныИВалюта, ДополнительныеПараметры);
	КонецЕсли;
	
	Попытка
		Форма.ПриИзмененииДоговораЛокальныеОбработчики();
	Исключение
	КонецПопытки;
		
	Форма.Договор = Форма.Объект.ДоговорКонтрагента;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(Форма, Форма.Элементы.ДоговорКонтрагента);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Функция анализирует данные события ScanData подключаемого оборудования
Функция ПолучитьШтрихкодПоДаннымСобытия(Данные) Экспорт
	
	Штрихкод = "";
	
	ДанныеШтрихкодов = Новый Массив();
	Если Данные[1] = Неопределено Тогда
		ДанныеШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", Данные[0], 1));
	Иначе
		ДанныеШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", Данные[1][1], 1));
	КонецЕсли;
	
	СтруктураШтрихкод = ДанныеШтрихкодов[0];
	Если ТипЗнч(СтруктураШтрихкод) = Тип("Структура") И СтруктураШтрихкод.Свойство("Штрихкод") Тогда
		Штрихкод = СтруктураШтрихкод.Штрихкод;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Функция анализирует данные события TracksData подключаемого оборудования
Функция ПолучитьМагнитныйКодПоДаннымСобытия(Данные) Экспорт
	
	КодКарты = "";
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		КодКарты = Данные[0];
	КонецЕсли;
	
	Возврат КодКарты;
	
КонецФункции

// Функция анализирует данные события RFID подключаемого оборудования
Функция ПолучитьRFIDКодПоДаннымСобытия(Данные) Экспорт
	
	RFIDКод = "";
	Если ТипЗнч(Данные) = Тип("Массив")
		И Данные.Количество() > 0 Тогда
		КодRFID = Данные[0].TID;
	КонецЕсли;
	
	Возврат RFIDКод;
	
КонецФункции

// Обработка внешнего события Подключаемого оборудования в формах.
// Используется для объединенной конфигурации УАТ + типовая,
// для отдельной конфигурации УАТ используется одноименная процедура модуля приложения
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
		
	Заглушка = Истина;
	
КонецПроцедуры

Процедура ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник, Знач ДопПараметры = Неопределено) Экспорт

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если ИмяСобытия = "ScanData" Тогда
		
		Штрихкод = ПолучитьШтрихкодПоДаннымСобытия(Параметр);
		Если Штрихкод <> "" Тогда
			ТекОбъект = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Штрихкод,
				ДопПараметры.Свойство("ЭтоКартаДоступа"));

			Если ДопПараметры.Свойство("Оповещение") Тогда
				Рез = Новый Структура("Штрихкод, Объект", Штрихкод, ТекОбъект);
				ВыполнитьОбработкуОповещения(ДопПараметры.Оповещение, Рез);
			ИначеЕсли ТекОбъект <> Неопределено Тогда
				ПоказатьЗначение(Неопределено, ТекОбъект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма) Экспорт
	Если глПодключаемоеОборудование = Неопределено Тогда
		МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	
	ТипыОборудования = "СканерШтрихкода, СчитывательМагнитныхКарт, СчитывательRFID";
	ДопПараметры = Новый Структура("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	Оповещение = Новый ОписаниеОповещения("ЗавершеноПодключениеОборудованиеПриОткрытииФормы", ЭтотОбъект, ДопПараметры);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Оповещение, ЭтаФорма, ТипыОборудования);
КонецПроцедуры

Процедура ЗавершеноПодключениеОборудованиеПриОткрытииФормы(Результат, ДопПараметры) Экспорт
	ОборудованиеСчитывательRFIDКлиент.НачатьОткрытиеСессииСчитывателяRFID(Неопределено,
		ДопПараметры.УникальныйИдентификатор, Результат.ИдентификаторУстройства);
КонецПроцедуры

#КонецОбласти

#Область НДС

Процедура ЗаполнитьСписокВыбораНастройкаНДС(СписокНастройкаНДС) Экспорт
	СписокНастройкаНДС.Очистить();
	СписокНастройкаНДС.Добавить("Строка без НДС", НСтр("en='Document excluding VAT';ru='Строка без НДС'"));
	СписокНастройкаНДС.Добавить("НДС в сумме", НСтр("en='VAT amount';ru='НДС в сумме'"));
	СписокНастройкаНДС.Добавить("НДС сверху", НСтр("en='VAT from above';ru='НДС сверху'"));
КонецПроцедуры

#КонецОбласти

#Область ИсторияКонтактнойИнформации

Процедура ИсторияИзмененийАдресаНажатие(Форма, ВидКИ) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОтборКИ = Новый Структура("Вид", ВидКИ);
	СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборКИ);
	Если СтрокиКИ.Количество() = 0 Тогда
		ТекущийАдрес = Неопределено;
	Иначе
		ТекущийАдрес = Новый Структура("Значение, Представление",СтрокиКИ[0].Значение, СтрокиКИ[0].Представление);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Вид, ТекущийАдрес, ИсторияИзмененийАдреса, ТолькоПросмотр",
		ВидКИ,
		ТекущийАдрес,
		Объект.ИсторияКонтактнойИнформации,
		Форма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеИсторииКонтактнойИнформации", ПараметрыФормы, Форма);

КонецПроцедуры

Процедура УстановитьАдресПослеРедактированияИстории(Форма, НаборЗаписей, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Форма.Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКонтактнойИнформации.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКонтактнойИнформации.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаАдреса = НаборЗаписей[НаборЗаписей.Количество()-1];
	ОтборКИ = Новый Структура("ИмяРеквизита", Элемент.Имя);
	СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборКИ);
	Если СтрокиКИ.Количество() = 0 Тогда
		СтрокаКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		СтрокаКИ.ИмяРеквизита = Элемент.Имя;
		СтрокаКИ.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	Иначе
		СтрокаКИ = СтрокиКИ[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаКИ, СтрокаАдреса);
	Форма[Элемент.Имя] = СтрокаАдреса.Представление;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
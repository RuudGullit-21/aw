#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииГенерацииБюджета

Процедура ПоместитьДанныеДляБюджетногоОтчетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	Результат = ПолучитьДанныеДляБюджетногоОтчета(Параметры, Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Результат.ТабличныйДокумент);
	РезультатВыполнения.Вставить("ДанныеЯчеек", Результат.ДанныеЯчеек);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Возвращает данные ячеек вида бюджета и параметры их вывода
//
// Параметры:
//	Параметры - Структура - См. Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент()
//
// Возвращаемое значение:
//	Структура - данные ячеек и параметры их вывода
//		* ДанныеЯчеек                     - ТаблицаЗначений - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* ДанныеРасшифровки               - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* Результат                       - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* ПараметрыВыводаВидаБюджета      - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* СтильУровней                    - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* ДеревоСтрокСпискаРедактирования - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* Примечания                      - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//
Функция ДанныеЭкземпляраБюджета(Параметры) Экспорт
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	РежимФормирования = Параметры.РежимФормирования;
	
	Результат = ПолучитьДанныеДляБюджетногоОтчета(Параметры, РежимФормирования, СтруктураПараметровВывода);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("ДанныеЯчеек", Результат.ДанныеЯчеек);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		
		СтруктураПараметровВывода.Вставить("КолонкиТаблиц", Результат.КолонкиТаблиц);
		
		РезультатРасчета.Вставить("Результат", Результат.ТабличныйДокумент);
		РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
		РезультатРасчета.Вставить("СтильУровней", Результат.СтильУровней);
		РезультатРасчета.Вставить("ДеревоСтрокСпискаРедактирования", Результат.ДеревоСтрокСпискаРедактирования);
		
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции


Процедура ПоместитьИзмененияЭкземпляраБюджетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	
	РассчитанныеИзменения = ПолучитьИзмененияВЯчейках(Параметры.ВидБюджета, 
											Параметры.НачалоПериода, Параметры.КонецПериода, 
											СтруктураПараметровВывода, Параметры,
											Параметры.ДанныеЯчеек);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("Результат", РассчитанныеИзменения.Результат);
	РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
	РезультатРасчета.Вставить("ДанныеЯчеек", РассчитанныеИзменения.ДанныеЯчеек);
	
	// результат вывода
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьДанныеДляБюджетногоОтчета(ПараметрыДанных, РежимФормирования,
											СсылкаНаПараметрыВыводаВидаБюджета = Неопределено)
	
	ВидБюджета = ПараметрыДанных.ВидБюджета;
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		ПараметрыВыводаВидаБюджета = ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования);
	Иначе
		Если СсылкаНаПараметрыВыводаВидаБюджета = Неопределено Тогда
			ПараметрыВыводаВидаБюджета = ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования);
		Иначе
			ПараметрыВыводаВидаБюджета = СсылкаНаПараметрыВыводаВидаБюджета;
		КонецЕсли;
	КонецЕсли;
	
	// Описание отчета - состав колонок таблицы данных
	СтруктураКолонокТаблицыДанных	 = ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных;
	
	// СтруктураОписанияОтчета содержит:
	// Структура исходных ячеек - таблица с описанием структуры отчета. по сути развернутая в список матрица отчета
	// Источники данных - сегменты выбранных статей и показателей, разбитые по признаку отборов и смещений
	СтруктураОписанияОтчета			 = ПараметрыВыводаВидаБюджета.СтруктураОписанияОтчета;
	
	// СКД по источникам - сгенерированная СКД для получения данных по плану и из фактических таблиц
	СКДДанных						 = ПараметрыВыводаВидаБюджета.СКДДанных;
	
	// Дерево вывода - дерево для вывода отчета, построенное на основании структуры отчета
	ДеревоВывода					 = ПараметрыВыводаВидаБюджета.ДеревоВывода;
	КэшДанных						 = ПараметрыВыводаВидаБюджета.КэшДанных;
	
	// Получаем данные источников по СКД
	ДанныеИсточников = ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, 
												СтруктураОписанияОтчета.ИсточникиДанных, КэшДанных);
	
	// Получаем данные ячеек по источникам
	ДанныеЯчеек = ПолучитьСтруктуруЯчеекСДанными(СтруктураКолонокТаблицыДанных, ПараметрыДанных,
												СтруктураОписанияОтчета, ДанныеИсточников,
												РежимФормирования, КэшДанных);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		Результат = Новый Структура("ДанныеЯчеек", ДанныеЯчеек);
		Возврат Результат;
	КонецЕсли;
	
	// Выводим дерево в отчет
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("ДеревоВывода", ДеревоВывода);
	ПараметрыВывода.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	ПараметрыВывода.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыВывода.Вставить("НачалоПериода", ПараметрыДанных.НачалоПериода);
	ПараметрыВывода.Вставить("КонецПериода", ПараметрыДанных.КонецПериода);
	ПараметрыВывода.Вставить("РежимФормирования", РежимФормирования);
	
	КэшПараметровЕдиницИзмерения = ПолучитьКэшПараметровЕдиницИзмерения(ДанныеЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек);
	ПараметрыВывода.Вставить("КэшПараметровЕдиницИзмерения", КэшПараметровЕдиницИзмерения);
	ПараметрыВывода.Вставить("ПредставленияИзмерений", ПредставлениеИзмеренийОтчета(ДеревоВывода, ДанныеЯчеек, СтруктураКолонокТаблицыДанных));
	ПараметрыВывода.Вставить("КэшЗначенийАналитик", КэшДанных.КэшЗначенийАналитик);
	ПараметрыВывода.Вставить("ИндексыПоискаИзмерений", Новый Соответствие);
	ПараметрыВывода.Вставить("ПараметрыЯчеек", СтруктураОписанияОтчета.ПараметрыЯчеек);
	ПараметрыВывода.Вставить("СтруктураЯчеек", СтруктураОписанияОтчета.СтруктураЯчеек);
	ПараметрыВывода.Вставить("ПараметрыПериодов", ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных));
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		
		ДеревоСтрокСпискаРедактирования = Новый ДеревоЗначений;
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Строка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Представление");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Картинка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Уровень");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИДТаблицы");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИДГруппировки");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИмяИзмерения");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ФиксированноеЗначение");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ЭтоАналитикаПрочее");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("РедактируемыеЗначения");
		
		ПараметрыВывода.Вставить("ДеревоСтрокСпискаРедактирования", ДеревоСтрокСпискаРедактирования);
		ПараметрыВывода.Вставить("СтильУровней", Новый Соответствие);
		
	КонецЕсли;
	
	// Вывод бюджетного отчета
	ТабличныйДокументРезультат = ВывестиДанныеВОтчет(ПараметрыВывода);
	
	ПараметрыВыводаВидаБюджета.Вставить("ИндексыТаблицыДанныхЯчеек", ПараметрыВывода.ИндексыПоискаИзмерений);
	
	Результат = Новый Структура("ДанныеЯчеек, ТабличныйДокумент", ДанныеЯчеек, ТабличныйДокументРезультат);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		Результат.Вставить("ДеревоСтрокСпискаРедактирования", ДеревоСтрокСпискаРедактирования);
		Результат.Вставить("СтильУровней", ПараметрыВывода.СтильУровней);
		Результат.Вставить("КолонкиТаблиц", ПараметрыВывода.КолонкиТаблиц);
	КонецЕсли;
	
	ОформитьБюджет(ТабличныйДокументРезультат, ДеревоВывода, ПараметрыВывода.ДанныеОтчетаДляОформления);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзмененияВЯчейках(ВидБюджета, НачалоПериода, КонецПериода,
									ПараметрыВыводаВидаБюджета, ПараметрыДанных, ПредыдущиеДанныеЯчеек)
	
	ИндексыТаблицыДанныхЯчеек = ПараметрыВыводаВидаБюджета.ИндексыТаблицыДанныхЯчеек;
	
	// Описание отчета - состав колонок таблицы данных
	СтруктураКолонокТаблицыДанных	 = ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных;
	
	// СтруктураОписанияОтчета содержит:
	// Структура исходных ячеек - таблица с описанием структуры отчета. по сути развернутая в список матрица отчета
	// Источники данных - сегменты выбранных статей и показателей, разбитые по признаку отборов и смещений
	СтруктураОписанияОтчета			 = ПараметрыВыводаВидаБюджета.СтруктураОписанияОтчета;
	
	// СКД по источникам - сгенерированная СКД для получения данных по плану и из фактических таблиц
	СКДДанных						 = ПараметрыВыводаВидаБюджета.СКДДанных;
	
	// Дерево вывода - дерево для вывода отчета, построенное на основании структуры отчета
	КэшДанных						 = ПараметрыВыводаВидаБюджета.КэшДанных;
	
	// Получаем данные источников по СКД
	ДанныеИсточников = ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, 
												СтруктураОписанияОтчета.ИсточникиДанных, КэшДанных);
	
	// Получаем данные ячеек по источникам
	РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	
	// Таблица с развернутыми ячейками по данным, проходит итеративные циклы расчета формул
	ДанныеЯчеек = ПолучитьСтруктуруЯчеекСДанными(СтруктураКолонокТаблицыДанных, ПараметрыДанных,
												СтруктураОписанияОтчета, ДанныеИсточников,
												РежимФормирования, КэшДанных);
												
	ПараметрыПериодов = ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных);
												
	ТаблицаИзменений = РассчитатьИзмененияВОтчете(СтруктураОписанияОтчета.ПараметрыЯчеек, ПредыдущиеДанныеЯчеек, 
																			ДанныеЯчеек, ПараметрыПериодов, ИндексыТаблицыДанныхЯчеек);
	
	Результат = Новый Структура("Результат, ДанныеЯчеек", ТаблицаИзменений, ДанныеЯчеек);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры вывода вида бюджета
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого определяются параметры
//  РежимФормирования  - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - вариант формирования
//
// Возвращаемое значение:
//   Структура   - Структура параметров, используемая в функции "ПолучитьДанныеДляБюджетногоОтчета"
//
Функция ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Генерируем колонки отчета
	СтруктураКолонокТаблицыДанных = ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	
	// Генерируем источники данных и структуру ячеек
	СтруктураОписанияОтчета = ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Генерируем СКД на основании источников
	СКДДанных = ПолучитьСКДПоОписаниюИсточников(ВидБюджета, СтруктураОписанияОтчета,
													СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем дерево группировок для вывода отчета
	ДеревоВывода = ПолучитьДеревоДляВыводаОтчета(ВидБюджета, СтруктураОписанияОтчета.СтруктураЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек);
	
	//Результат
	СтруктураРезультат = Новый Структура("СтруктураКолонокТаблицыДанных, СтруктураОписанияОтчета,
										|СКДДанных, ДеревоВывода, КэшДанных", 
										СтруктураКолонокТаблицыДанных, СтруктураОписанияОтчета,
										СКДДанных, ДеревоВывода, Новый Структура);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		
		СтруктураОписанияСпискаВвода = ПараметрыСпискаВводаПоСтрокамЯчеек(ВидБюджета, 
																			СтруктураКолонокТаблицыДанных, 
																			СтруктураОписанияОтчета,
																			ДеревоВывода);
		
		СтруктураРезультат.Вставить("СтруктураОписанияСпискаВвода", СтруктураОписанияСпискаВвода);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти

Функция ПроверитьФормулу(Знач Формула, Операнды, Отказ) Экспорт
	Перем НачалоФормулы, ОкончаниеФормулы;
	
	МассивЗначений = Новый Массив;
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДатаСеанса() - Дата(1, 1, 1));
	Для Каждого Операнд из Операнды Цикл
		
		Если Не ЗначениеЗаполнено(Операнд.Идентификатор) Тогда
			ТекстНСТР = НСтр("en='Report generation error: invalid operand formulas';ru='Ошибка формирования отчета: Неверный операнд формулы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		
		Значение = ГСЧ.СлучайноеЧисло(1000, 10000000);
		МассивЗначений.Добавить(Значение);
		
		Если Найти(ВРег(Формула), "ИТОГ") = 0 Тогда
			Формула = СтрЗаменить(Формула, "[" + Операнд.Идентификатор + "]", "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
		Иначе
			Пока Найти(ВРег(Формула), "ИТОГ") Цикл
				ЧастьФормулы = ЧастьФормулыСИтогомИОперандом(Формула, "[" + Операнд.Идентификатор + "]", НачалоФормулы, ОкончаниеФормулы);
				ОкончаниеФормулы = ОкончаниеФормулы(Формула, ОкончаниеФормулы) + ")";
				Формула = СтрЗаменить(Формула, ЧастьФормулы + ОкончаниеФормулы, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
				Значение = ГСЧ.СлучайноеЧисло(1000, 10000000);
				МассивЗначений.Добавить(Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
		ДобавитьВФункциюРазностьДатТехническуюИнформацию(Формула);
	КонецЕсли;
	
	НачалоПериода = ТекущаяДата();
	КонецПериода = ТекущаяДата();
	ПериодГруппировки = ТекущаяДата();
	ГраницаФактДанных = ТекущаяДата();
	
	ТаблицаКэша = Новый ТаблицаЗначений;
	ТаблицаКэша.Колонки.Добавить("НачалоПериода");
	ТаблицаКэша.Колонки.Добавить("КонецПериода");
	ТаблицаКэша.Колонки.Добавить("Периодичность");
	ТаблицаКэша.Колонки.Добавить("ВсегоПериодов");
	
	ПараметрыПериодов = Новый Структура("КэшДобавленияПериодов, КэшРазностейДат", Новый Соответствие, ТаблицаКэша);
	
	Попытка
		Результат = Вычислить(Формула);
	Исключение
		ТекстНСТР = НСтр("en='Formula errors were detected!';ru='В формуле обнаружены ошибки!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	КонецПопытки;
	
КонецФункции

// Функция возвращает массив периодов
//
// Параметры:
//  НачалоПериода  - Дата - начало периода
//  КонецПериода  - Дата - окончание периода
//  Периодичность  - ПеречислениеСсылка.Периодичность - периодичность шага
//
// Возвращаемое значение:
//   Массив - массив периодов
//
Функция ПолучитьМассивПериодов(Знач НачалоПериода, Знач КонецПериода, Периодичность) Экспорт
	
	Результат = Новый Массив;
	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(НачалоПериода, Периодичность);
	Пока НачалоПериода <= КонецПериода Цикл
		Результат.Добавить(НачалоПериода);
		НачалоПериода = БюджетированиеКлиентСервер.ДобавитьИнтервал(НачалоПериода, Периодичность, 1);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает дерево элементов вида бюджета
// 
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого требуется построить дерево
//  ВыводитьЭлементаСложнойТаблицы  - Булево - признак, что требуется выводить элементы, 
//                                             подчиненные элементу "Настройка Ячеек"
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево элементов бюджетного отчета
//
Функция ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, ВыводитьЭлементыСложнойТаблицы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшДереваЭлементов, ХранилищеКэшаДереваЭлементов");
	Постфикс = ?(ВыводитьЭлементыСложнойТаблицы, "СДопЭлементами", "БезДопЭлементов");
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	Если ЗначенияКэша.СформированКэшДереваЭлементов = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаДереваЭлементов.Получить();
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыБюджетов.ПолучитьМакет("ДеревоЭлементовОтчета");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидБюджета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", ФинОтчеты.КэшДополнительныеРеквизиты(ВидБюджета));
	
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	Реквизиты = Новый Структура("СформированКэшДереваЭлементов, ХранилищеКэшаДереваЭлементов",
								Истина, Новый ХранилищеЗначения(Результат));
	
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры данных видов бюджета
//
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого определяются параметры данных
// 
// Возвращаемое значение:
//	Структура - параметры данных для вида бюджета, ключи:
//		Периодичности - массив периодичностей до которых следует расшифровать таблицу данных
//		Измерения - массив используемых измерений
//		ВидыАналитик - массив используемых видов аналитик
//
Функция ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыКолонок, ХранилищеКэшаСтруктурыКолонок");
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	Если ЗначенияКэша.СформированКэшСтруктурыКолонок = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаСтруктурыКолонок.Получить();
	КонецЕсли;
	
	ДеревоЭлементовБюджета = БюджетнаяОтчетностьСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	СтруктураРезультат = Новый Структура("Периодичности, Измерения, ВидыАналитик", 
										Новый Соответствие, Новый Соответствие, Новый Соответствие);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение;
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	
	Для Каждого СтрокаИзмерения из ОтобранныеСтроки Цикл
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																СтрокаИзмерения.ЭлементОтчета, 
																ДопРеквизиты.ТипИзмерения,
																КэшРеквизитов);
		Если ТипИзмерения = ТипыИзмерений.Период Тогда
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.Периодичность,
																	КэшРеквизитов);
			СтруктураРезультат.Периодичности.Вставить(Периодичность);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.ИмяИзмерения,
																	КэшРеквизитов);
			СтруктураРезультат.Измерения.Вставить(ИмяИзмерения);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Аналитика Тогда
			Аналитика = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.ВидАналитики,
																	КэшРеквизитов);
			СтруктураРезультат.ВидыАналитик.Вставить(Аналитика);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.ФиксированнаяАналитика Тогда
			Аналитика = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.ВидАналитики,
																	КэшРеквизитов);
			СтруктураРезультат.ВидыАналитик.Вставить(Аналитика);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Сценарий Тогда
			СтруктураРезультат.Измерения.Вставить("Сценарий");
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Организация Тогда
			СтруктураРезультат.Измерения.Вставить("Организация");
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Подразделение Тогда
			СтруктураРезультат.Измерения.Вставить("Подразделение");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	Для Каждого КлючИЗначение из СтруктураРезультат Цикл
		
		Соответствие = КлючИЗначение.Значение;
		
		Список = Новый Массив;
		Для Каждого КлючСоответствия из Соответствие Цикл
			Список.Добавить(КлючСоответствия.Ключ);
		КонецЦикла;
			
		ВозвращаемоеЗначение.Вставить(КлючИЗначение.Ключ, Список);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлементыФинансовыхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|		ПО ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка = ЭлементыФинансовыхОтчетов.Ссылка
		|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &ТипПоказателей)
		|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение В (&ВыводимыеПоказатели))
		|			И (ЭлементыФинансовыхОтчетов.Владелец = &Владелец)";

	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("ТипПоказателей", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВыводимыеПоказатели);
	
	ВыводимыеПоказатели = Новый СписокЗначений;
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество);
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма);
	
	Запрос.УстановитьПараметр("ВыводимыеПоказатели", ВыводимыеПоказатели);

	ЕстьКоличество = Не Запрос.Выполнить().Пустой();
	
	ВыводимыеПоказатели = Новый СписокЗначений;
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма);
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма);
	
	Запрос.УстановитьПараметр("ВыводимыеПоказатели", ВыводимыеПоказатели);

	ЕстьСумма = Не Запрос.Выполнить().Пустой();
	
	Если ЕстьСумма Тогда
		// валюта всегда используется для пересчетов
		Если ВозвращаемоеЗначение.Измерения.Найти("Валюта") = Неопределено Тогда
			ВозвращаемоеЗначение.Измерения.Добавить("Валюта");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьКоличество Тогда
		Если ВозвращаемоеЗначение.Измерения.Найти("ЕдиницаИзмерения") = Неопределено Тогда
			ВозвращаемоеЗначение.Измерения.Добавить("ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыКолонок, ХранилищеКэшаСтруктурыКолонок",
									Истина, Новый ХранилищеЗначения(ВозвращаемоеЗначение));
	
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает текст поля для определения аналитики по виду
//
// Параметры:
//  ИмяПараметра  - Строка - имя параметра, в котором в СКД будет передан вид аналитики
//  Префикс  - Строка - префикс имени поля
//
// Возвращаемое значение:
//   Строка   - конструкция "ВЫБОР" для подстановки в СКД или запрос для поля вида аналитики
//
Функция ПолучитьТекстПоляВидаАналитики(ИмяПараметра, Префикс = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБОР ";
	
	Для Сч = 1 по 6 Цикл
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|КОГДА " + Префикс + "СтатьяБюджетов.КоличествоИспользуемыхАналитик >= " + Сч + "
		|	И " + Префикс + "СтатьяБюджетов.ВидАналитики" + Сч + " = &" + ИмяПараметра + " ТОГДА " + Префикс + "Аналитика" + Сч;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНАЧЕ NULL КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает имя поля вида аналитики
// если элемент предопределенный - то имя предопределенных данных,
// иначе поле вида "Ключ_" + идентификатор элемента
//
// Параметры:
//  ПолеБюджетногоОтчета  - СправочникСсылка - поле для которого требуется получить имя
//
// Возвращаемое значение:
//   Строка - имя поля
//
Функция ИмяПоляБюджетногоОтчета(ПолеБюджетногоОтчета) Экспорт
	
	Возврат ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ПолеБюджетногоОтчета);
	
КонецФункции

Функция ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных) Экспорт
	
	Результат = Новый Структура("ГраницаФактДанных, НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыДанных);
	Результат.Вставить("УпорядоченныеПериодичностиОтчета", Новый Массив);
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	Для Каждого Периодичность из УпорядоченныеПериодичности Цикл
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Результат.УпорядоченныеПериодичностиОтчета.Добавить("Период" + Периодичность);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("КэшДобавленияПериодов", Новый Соответствие);
	
	КэшДобавления = Новый ТаблицаЗначений;
	КэшДобавления.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	КэшДобавления.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	КэшДобавления.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("Строка"));
	КэшДобавления.Колонки.Добавить("ВсегоПериодов", Новый ОписаниеТипов("Число"));
	КэшДобавления.Индексы.Добавить("НачалоПериода, КонецПериода, Периодичность");
	
	Результат.Вставить("КэшРазностейДат", КэшДобавления);
	
	Возврат Результат;
	
КонецФункции

#Область ОформлениеБюджета

Процедура ОформитьОбластиПоРезультатамКомпоновки(ДокументРезультат, Результат, ЭлементыОформления)
	
	Для Каждого СтрокаОформления ИЗ Результат Цикл
		
		НайденнаяСтрока = ЭлементыОформления.Найти(СтрокаОформления.КлючЭлементаОформления, "КлючЭлементаОформления");
		Области = СтрокаОформления.ИмяОбласти;
		Оформление = НайденнаяСтрока.Оформление.Получить();
		
		Для Каждого ИмяОбласти из Области Цикл
			Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьДокумента = ДокументРезультат.Область(ИмяОбласти);
			Для Каждого ЭлементОформления из Оформление Цикл
				Если ЭлементОформления.Параметр = НСтр("en='Background color';ru='Цвет фона'") Тогда
					ОбластьДокумента.ЦветФона = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Text color';ru='Цвет текста'") Тогда
					ОбластьДокумента.ЦветТекста = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Border color';ru='Цвет границы'") Тогда
					ОбластьДокумента.ЦветРамки = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Font';ru='Шрифт'") Тогда
					ОбластьДокумента.Шрифт = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Horizontal position';ru='Горизонтальное положение'") Тогда
					ОбластьДокумента.ГоризонтальноеПоложение = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Vertical position';ru='Вертикальное положение'") Тогда
					ОбластьДокумента.ВертикальноеПоложение = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Text orientation';ru='Ориентация текста'") Тогда
					ОбластьДокумента.ОриентацияТекста = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("en='Format';ru='Формат'") Тогда
					Если Не ОбластьДокумента.СодержитЗначение Тогда
						ОбластьДокумента.Формат = ЭлементОформления.Оформление;
						Если ОбластьДокумента.Расшифровка.Свойство("Значение") Тогда
							ОбластьДокумента.Текст = Формат(ОбластьДокумента.Расшифровка.Значение, ЭлементОформления.Оформление);
						КонецЕсли;
					Иначе
						ОбластьДокумента.Формат = ЭлементОформления.Оформление;
						Начало = Найти(ВРег(ОбластьДокумента.Формат), "ЧС");
						Если Начало Тогда
							ОстатокСтроки = Сред(ОбластьДокумента.Формат, Начало);
							Разделитель = Найти(ОстатокСтроки, ";");
							Если Разделитель Тогда
								ОстатокСтроки = Лев(ОстатокСтроки, Разделитель);
							КонецЕсли;
							ОбластьДокумента.Формат = СтрЗаменить(ОбластьДокумента.Формат, ОстатокСтроки, "");
							ОстатокСтроки = Сред(ОстатокСтроки, Найти(ОстатокСтроки, "=")+1);
							ОстатокСтроки = СтрЗаменить(ОстатокСтроки, "'", "");
							ОстатокСтроки = СокрЛП(ОстатокСтроки);
							Если Не ПустаяСтрока(ОстатокСтроки) И 
								СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОстатокСтроки, Ложь, Ложь) Тогда
								ОстатокСтроки = Число(ОстатокСтроки);
								ОбластьДокумента.Расшифровка.Вставить("СокращенныеРазряды", ОстатокСтроки);
								ОбластьДокумента.Значение = ОбластьДокумента.Значение / Pow(10, ОстатокСтроки);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбластиОформленияИзТаблицы(Таблица, КлючЭлементаОформления) Экспорт
	
	Массив = Новый Массив;
	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("КлючЭлементаОформления", КлючЭлементаОформления));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Массив.Добавить(НайденнаяСтрока.ИмяОбласти);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПредварительнуюКомпоновкуДляРасчетаОформления()
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ЯчейкиПоКлючам = ФинансоваяОтчетностьСервер.НоваяСхема();
	
	Набор = ФинОтчеты.НовыйНабор(ЯчейкиПоКлючам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭлементыОформления");
	Набор.ИмяОбъекта = "ЭлементыОформления";
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	ФинОтчеты.НовоеПолеНабора(Набор, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	
	Набор = ФинОтчеты.НовыйНабор(ЯчейкиПоКлючам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ОформляемыеСтроки");
	Набор.ИмяОбъекта = "ОформляемыеСтроки";
	ФинОтчеты.НовоеПолеНабора(Набор, "ЭлементОтчета", "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Набор = ФинОтчеты.НовыйНабор(ЯчейкиПоКлючам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ОформляемыеКолонки");
	Набор.ИмяОбъекта = "ОформляемыеКолонки";
	ФинОтчеты.НовоеПолеНабора(Набор, "ЭлементОтчета", "Колонка");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ФинОтчеты.НоваяСвязьНаборов(ЯчейкиПоКлючам, "ЭлементыОформления", "ОформляемыеСтроки", "КлючЭлементаОформления");
	ФинОтчеты.НоваяСвязьНаборов(ЯчейкиПоКлючам, "ЭлементыОформления", "ОформляемыеКолонки", "КлючЭлементаОформления");
	
	Группировка = ЯчейкиПоКлючам.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "Строка");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "Колонка");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ПорядковыйНомер");
	
	ФинОтчеты.УстановитьПараметрВывода(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
																			
	Возврат ЯчейкиПоКлючам;
																			
КонецФункции

Функция ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, ТипОформляемойОбласти, ДанныеОтчетаДляОформления)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ФинансоваяОтчетностьСервер.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	Набор.ИмяОбъекта = "ТаблицаДанных";
	Для Каждого Колонка из ДанныеОтчетаДляОформления.Колонки Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЯчейкиПоКлючам");
	Набор.ИмяОбъекта = "ЯчейкиПоКлючам";
	ФинОтчеты.НовоеПолеНабора(Набор, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка", "СтрокаЯчеек");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка", "КолонкаЯчеек");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	
	Группировка = ФинОтчеты.НоваяГруппировка(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПорядковыйНомер");
	
	ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "ТипОформляемойОбласти", ТипОформляемойОбласти);
	
	ГруппаИЛИ = КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ТаблицаЭлементов = ЭлементыОформления.Скопировать(Новый Структура("ТипОформляемойОбласти", ТипОформляемойОбласти));
	
	Для Каждого ЭлементОформления из ТаблицаЭлементов Цикл
		ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ФинОтчеты.НовыйОтбор(ГруппаИ, "КлючЭлементаОформления", ЭлементОформления.КлючЭлементаОформления);
		ФинОтчеты.СкопироватьОтбор(ЭлементОформления.Условие.Получить().Отбор, ГруппаИ, Истина);
	КонецЦикла;
	
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат КомпоновкаПоЯчейкам;
	
КонецФункции

Функция ПолучитьБазовуюКомпоновкуОформленияВсейСтрокиКолонки(ДанныеОтчетаДляОформления)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ФинансоваяОтчетностьСервер.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	Набор.ИмяОбъекта = "ТаблицаДанных";
	Для Каждого Колонка из ДанныеОтчетаДляОформления.Колонки Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДоступныеКлючи");
	Набор.ИмяОбъекта = "ДоступныеКлючи";
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерСтроки");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерКолонки");
	
	Группировка = ФинОтчеты.НоваяГруппировка(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПорядковыйНомер");
	
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат КомпоновкаПоЯчейкам;
	
КонецФункции

Функция РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ТипОформляемойОбласти, ЭлементыОформления, 
							ДанныеОтчетаДляОформления, РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
															ТипОформляемойОбласти, ДанныеОтчетаДляОформления);
	
	ПолеСоединенияФинальныхНаборов = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "НомерСтроки", "НомерКолонки");
	ФинОтчеты.НовоеПолеГруппировки(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура[0], ПолеСоединенияФинальныхНаборов);
	
	ПолеСоединения = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Строка", "Колонка");
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", ПолеСоединения + "Ячеек", ПолеСоединения);
	
	ТаблицаЭлементов = ЭлементыОформления.Скопировать(Новый Структура("ТипОформляемойОбласти", ТипОформляемойОбласти));
	
	Для Каждого ЭлементОформления из ТаблицаЭлементов Цикл
		
		ЭлементыЗамены = РасшифровкаПолейОтбораЭО.НайтиСтроки(Новый Структура("КлючЭлементаОформления", ЭлементОформления.КлючЭлементаОформления));
		
		Для Каждого ЭлементЗамены из ЭлементыЗамены Цикл
			
			Если КомпоновкаПоЯчейкам.ВычисляемыеПоля.Найти("[" + ЭлементЗамены.ИмяПоляОтбора + "]") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТипаЭлемента = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Колонка", "Строка");
			ИмяПараметраФильтра = ИмяТипаЭлемента + "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(КомпоновкаПоЯчейкам, ЭлементЗамены.ИмяПоляОтбора, 
													"ВЫБОР КОГДА " + ИмяТипаЭлемента + " = &" + ИмяПараметраФильтра + " ТОГДА
													|				" + ЭлементЗамены.ИмяРесурса + " ИНАЧЕ NULL КОНЕЦ");
			
			ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, ЭлементЗамены.ИмяПоляОтбора);
			Параметр = КомпоновкаПоЯчейкам.Параметры.Добавить();
			Параметр.Имя = ИмяПараметраФильтра;
			Параметр.Значение = ЭлементЗамены.ЭлементОтчета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЯчейкиПоКлючам", ЯчейкиПоКлючам);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Для Каждого Параметр из КомпоновкаПоЯчейкам.Параметры Цикл
		ФинОтчеты.УстановитьПараметр(КомпоновщикНастроек.Настройки.ПараметрыДанных, Параметр.Имя, Параметр.Значение, Истина);
	КонецЦикла;
	ДоступныеКлючи = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуОформленияВсейСтрокиКолонки(ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ДоступныеКлючи", "ТаблицаДанных", ПолеСоединенияФинальныхНаборов);
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ДоступныеКлючи", ДоступныеКлючи);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	Возврат Результат;
	
КонецФункции

Процедура ОформитьБюджет(ТабличныйДокументРезультат, ДеревоВывода, ДанныеОтчетаДляОформления)
	
	Если ДанныеОтчетаДляОформления = Неопределено Тогда
		// Измерения и показатели без таблицы
		Возврат;
	КонецЕсли;
	
	ТаблицаОформления = Неопределено;
	
	ЭлементыОформления = Новый ТаблицаЗначений;
	ЭлементыОформления.Колонки.Добавить("ПорядковыйНомер");
	ЭлементыОформления.Колонки.Добавить("Оформление");
	ЭлементыОформления.Колонки.Добавить("Условие");
	ЭлементыОформления.Колонки.Добавить("ТипОформляемойОбласти");
	ЭлементыОформления.Колонки.Добавить("КлючЭлементаОформления");
	
	ОформляемыеСтроки = Новый ТаблицаЗначений;
	ОформляемыеСтроки.Колонки.Добавить("ЭлементОтчета");
	ОформляемыеСтроки.Колонки.Добавить("КлючЭлементаОформления");
	
	ОформляемыеКолонки = Новый ТаблицаЗначений;
	ОформляемыеКолонки.Колонки.Добавить("ЭлементОтчета");
	ОформляемыеКолонки.Колонки.Добавить("КлючЭлементаОформления");
	
	РасшифровкаПолейОтбораЭО = Новый ТаблицаЗначений;
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ЭлементОтчета");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("КлючЭлементаОформления");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяПоляОтбора");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяРесурса");
	
	СтруктураТаблиц = Новый Структура("ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
	
	СтрокиТаблиц = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", "Таблица"));
	Для Каждого СтрокаТаблицы из СтрокиТаблиц Цикл
		
		Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
			Таблица = Неопределено;
			Если СтрокаТаблицы.ПараметрыТаблицы.Свойство(КлючИЗначение.Ключ, Таблица) Тогда
				Выполнить("ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, " + КлючИЗначение.Ключ + ")");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка из ЭлементыОформления Цикл
		Строка.ПорядковыйНомер = ЭлементыОформления.Индекс(Строка);
	КонецЦикла;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ЯчейкиПоКлючам = ПолучитьПредварительнуюКомпоновкуДляРасчетаОформления();
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЭлементыОформления", ЭлементыОформления);
	ВнешниеНаборы.Вставить("ОформляемыеСтроки", ОформляемыеСтроки);
	ВнешниеНаборы.Вставить("ОформляемыеКолонки", ОформляемыеКолонки);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(ЯчейкиПоКлючам);
	ЯчейкиПоКлючам = ФинОтчеты.ВыгрузитьРезультатСКД(ЯчейкиПоКлючам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ТаблицаОформления = Новый ТаблицаЗначений;
	ТаблицаОформления.Колонки.Добавить("КлючЭлементаОформления");
	ТаблицаОформления.Колонки.Добавить("ИмяОбласти");
	ТаблицаОформления.Колонки.Добавить("ПорядковыйНомер");
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЯчейкиПоКлючам", ЯчейкиПоКлючам);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	// Получение областей для оформления. Ячейки
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
							Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЯчейкиНаПересеченииСтрокИКолонок, ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	// Получение областей для оформления. Строки
	Результат = РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, 
															ЭлементыОформления, ДанныеОтчетаДляОформления, РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам);
	
	ОформитьОбластиПоРезультатамКомпоновки(ТабличныйДокументРезультат, Результат, ЭлементыОформления);
	
	// Получение областей для оформления. Колонки
	
	Результат = РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяКолонка, 
															ЭлементыОформления, ДанныеОтчетаДляОформления, РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	// Получение областей для оформления. ЗаголовкиСтрок
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
							Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЗаголовкиСтрок, ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	
	ЭлементОтбора = ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "Колонка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	// Получение областей для оформления. ЗаголовкиКолонок
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
							Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЗаголовкиКолонок, ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	ЭлементОтбора = ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "Строка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	// Получение областей для оформления. ВсяТаблица
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
							Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяТаблица, ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "ИСТИНА", "ИСТИНА");
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	ТаблицаОформления.Сортировать("ПорядковыйНомер");
	
	ОформитьОбластиПоРезультатамКомпоновки(ТабличныйДокументРезультат, ТаблицаОформления, ЭлементыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводДанныхВОтчет

Функция ПредставлениеИзмеренийОтчета(ДеревоВывода, ДанныеЯчеек, ОписаниеОтчета)
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ДанныеЯчеек.Строка, ДанныеЯчеек.Колонка";
	ТекстЗапросаПредставлений = ТекстЗапроса;
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ", ДанныеЯчеек." + Измерение;
		ТекстЗапросаПредставлений = ТекстЗапросаПредставлений + ", ДанныеЯчеек." + Измерение;
		ТекстЗапросаПредставлений = ТекстЗапросаПредставлений + ", ПРЕДСТАВЛЕНИЕ(ДанныеЯчеек." + Измерение + ")";
		НайденныеСтроки = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение), Истина);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Для Каждого ДопРеквизит из НайденнаяСтрока.ДополнительныеПоля Цикл
				ТекстЗапросаПредставлений = ТекстЗапросаПредставлений + 
					", ДанныеЯчеек." + Измерение + "." + ДопРеквизит.Реквизит + " КАК " + Измерение + "_" + ДопРеквизит.Реквизит;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + ", ДанныеЯчеек." + ИмяПоля;
		ТекстЗапросаПредставлений = ТекстЗапросаПредставлений + ", ДанныеЯчеек." + ИмяПоля;
		ТекстЗапросаПредставлений = ТекстЗапросаПредставлений + ", ПРЕДСТАВЛЕНИЕ(ДанныеЯчеек." + ИмяПоля + ")";
		НайденныеСтроки = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", ИмяПоля), Истина);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Для Каждого ДопРеквизит из НайденнаяСтрока.ДополнительныеПоля Цикл
				ТекстЗапросаПредставлений = ТекстЗапросаПредставлений + 
					", ДанныеЯчеек." + ИмяПоля + "." + ДопРеквизит.Реквизит + " КАК " + ИмяПоля + "_" + ДопРеквизит.Реквизит;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса = 
	ТекстЗапроса + " ПОМЕСТИТЬ ДанныеЯчеек ИЗ &ДанныеЯчеек КАК ДанныеЯчеек
	|;
	|" + ТекстЗапросаПредставлений + " ИЗ ДанныеЯчеек";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеЯчеек", ДанныеЯчеек);
	ТаблицаПредставлений = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаПредставлений;
	
КонецФункции

Процедура ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьНачало)
	
	Если Не ПараметрыВывода.ДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	МестоДобавления = ПараметрыВывода.АдресДобавленияСтрокСпискаРедактирования;
	
	НоваяСтрока = МестоДобавления.Строки.Добавить();
	НоваяСтрока.Строка 					= СтрокаОтчета.ЭлементОтчета;
	НоваяСтрока.Представление 			= ТекстГруппировки;
	НоваяСтрока.Картинка 				= ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(
																	СтрокаОтчета.ВидЭлемента);
	НоваяСтрока.Уровень 				= НоваяСтрока.Уровень();
	НоваяСтрока.ИДГруппировки 			= ОбластьНачало.Расшифровка.ИДГруппировки;
	НоваяСтрока.ИДТаблицы 				= МестоДобавления.ИДТаблицы;
	НоваяСтрока.ФиксированноеЗначение 	= Значение;
	НоваяСтрока.ИмяИзмерения 			= СтрокаОтчета.ИмяИзмерения;
	Если ЗначениеЗаполнено(Значение) Тогда
		НоваяСтрока.ЭтоАналитикаПрочее 	= Ложь;
	Иначе
		НоваяСтрока.ЭтоАналитикаПрочее 	= СтрокаОтчета.ЭтоАналитикаПрочее;
	КонецЕсли;
	НоваяСтрока.РедактируемыеЗначения	= СтрокаОтчета.РедактируемыеЗначения;
	
	СтруктураСтиля = Новый Структура("Шрифт, ЦветФона", ОбластьНачало.Шрифт, ОбластьНачало.ЦветФона);
	КэшСтилей = ПараметрыВывода.СтильУровней[МестоДобавления.ИДТаблицы];
	Если КэшСтилей = Неопределено Тогда
		КэшСтилей = Новый Соответствие;
	КонецЕсли;
	КэшСтилей.Вставить(НоваяСтрока.Уровень, СтруктураСтиля);
	ПараметрыВывода.СтильУровней.Вставить(МестоДобавления.ИДТаблицы, КэшСтилей);
	
	ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", НоваяСтрока);
	
КонецПроцедуры

Процедура УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода)
	
	Если Не ПараметрыВывода.ДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВыводимая = ПараметрыВывода.АдресДобавленияСтрокСпискаРедактирования;
	Если Не ЗначениеЗаполнено(СтрокаВыводимая.Родитель) Тогда
		ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", СтрокаВыводимая.Владелец());
	Иначе
		ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", СтрокаВыводимая.Родитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, ДеревоВывода, 
										ДеревоРезультат = Неопределено, НакопленныйОтбор = Неопределено)
	
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	
	Если ДеревоРезультат = Неопределено Тогда
		ДеревоРезультат = Новый ДеревоЗначений;
		ДеревоРезультат.Колонки.Добавить("ЭлементОтчета");
		ДеревоРезультат.Колонки.Добавить("НаименованиеДляПечати");
		ДеревоРезультат.Колонки.Добавить("ИмяИзмерения");
		ДеревоРезультат.Колонки.Добавить("ФиксированноеЗначение");
		ДеревоРезультат.Колонки.Добавить("ВидЭлемента");
	КонецЕсли;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	Для Каждого Колонка из ДеревоВывода.Строки Цикл
		
		ЭтоКолонкаПоказателя = Найти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка = 
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы 
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если ЗначениеЗаполнено(Колонка.ФиксированноеЗначение)
			ИЛИ ЭтоКолонкаПоказателя
			ИЛИ ЭтоФиксКолонка Тогда
			
			НоваяСтрока = ДеревоРезультат.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Колонка);
			
			НоваяСтрока.НаименованиеДляПечати = ТекстГруппировки(Колонка.ФиксированноеЗначение, Колонка, ПараметрыВывода, Истина);
			
			ДобавленОтбор = Ложь;
			Если Не ЭтоФиксКолонка
				И Не ЭтоКолонкаПоказателя Тогда
				НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока, НакопленныйОтбор);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
			КонецЕсли;
			
		Иначе
			
			Результат = ПолучитьВыборкуЯчеек(ДанныеЯчеек, Колонка.ИмяИзмерения, Колонка.ЭлементОтчета,, 
													НакопленныйОтбор, Истина, ИндексыПоискаИзмерений);
			Для Каждого Выборка из Результат Цикл
				
				Значение = Выборка[Колонка.ИмяИзмерения];
				Если Значение = NULL Тогда
					Продолжить; //null группировки не отображаем
				КонецЕсли;
				
				НоваяСтрока = ДеревоРезультат.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Колонка);
				НоваяСтрока.ФиксированноеЗначение = Значение;
				НоваяСтрока.НаименованиеДляПечати = ТекстГруппировки(Значение, Колонка, ПараметрыВывода, Истина);
				
				НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Значение);
				ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока, НакопленныйОтбор);
				НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоРезультат;
	
КонецФункции

Функция ПолучитьВыборкуЯчеек(ДанныеЯчеек, Измерения, Колонка = Неопределено, Строка = Неопределено,
							НакопленныйОтбор, ИерархическийОтборПоЯчейкам, ИндексыПоиска = Неопределено, ДобавлятьФлаг = Ложь)
	
	Если ИерархическийОтборПоЯчейкам Тогда
		
		ФинОтчеты = ФинансоваяОтчетностьСервер;
		Набор = Неопределено;
		СКД = ФинОтчеты.НоваяСхемаНаборОбъект("ДанныеЯчеек", Набор);
		ФинОтчеты.НовоеПолеНабора(Набор, "ОсновнойЭлемент");
		ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
		ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
		
		Если ТипЗнч(Измерения) = Тип("Массив") Тогда
			
			СписокИзмерений = Измерения;
			
		Иначе
			
			СписокИзмерений = Новый Массив;
			СписокИзмерений.Добавить(Измерения);
			
		КонецЕсли;
		
		Для Каждого ИмяИзмерения из СписокИзмерений Цикл
		
			Поле = ФинОтчеты.НовоеПолеНабора(Набор, ИмяИзмерения);
			ПолеУпорядочивания = Поле.ВыраженияУпорядочивания.Добавить();
			ПолеУпорядочивания.Выражение = 
			"ВЫБОР
			|	КОГДА ЗначениеЗаполнено(" + ИмяИзмерения + ") ТОГДА
			|	0 ИНАЧЕ 1 КОНЕЦ";
			ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеУпорядочивания = Поле.ВыраженияУпорядочивания.Добавить();
			ПолеУпорядочивания.Выражение = ИмяИзмерения;
			ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			ПолеУпорядочивания.Автоупорядочивание = Истина;
		
		КонецЦикла;
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКД);
		
		Если Колонка <> Неопределено
			И ЗначениеЗаполнено(Колонка) Тогда
			
			ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВИерархии;
			Отбор = ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "Колонка", Колонка);
			Отбор.ВидСравнения = ВидСравненияОтчета;
			
		КонецЕсли;
		
		Если Строка <> Неопределено
			И ЗначениеЗаполнено(Строка) Тогда
			
			Если ТипЗнч(Строка) = Тип("СписокЗначений") Тогда 
				ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			Иначе
				ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			Отбор = ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "Строка", Строка);
			Отбор.ВидСравнения = ВидСравненияОтчета;
			
		КонецЕсли;
		
		ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "ОсновнойЭлемент", Истина);
		
		Для Каждого КлючИЗначение из НакопленныйОтбор Цикл
			ФинОтчеты.НовоеПолеНабора(Набор, КлючИЗначение.Ключ);
			ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Группировка = Неопределено;
		
		Для Каждого ИмяИзмерения из СписокИзмерений Цикл
			
			Порядок = Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Поле = Новый ПолеКомпоновкиДанных(ИмяИзмерения);
			
			Если Группировка = Неопределено Тогда
				Группировка = ФинОтчеты.НоваяГруппировка(Компоновщик.Настройки.Структура, ИмяИзмерения);
			Иначе
				ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяИзмерения);
			КонецЕсли;
			
			Если ДобавлятьФлаг Тогда
				ФинОтчеты.НовоеПолеНабора(Набор, "Флаг" + ИмяИзмерения);
				ФинОтчеты.НовоеПолеГруппировки(Группировка, "Флаг" + ИмяИзмерения);
			КонецЕсли;
			
		КонецЦикла;
		
		ФинОтчеты.УстановитьПараметрВывода(Компоновщик.Настройки, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
		ФинОтчеты.УстановитьПараметрВывода(Компоновщик.Настройки, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
		
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СКД, Компоновщик, Новый Структура("ДанныеЯчеек", ДанныеЯчеек));
		
		Возврат Результат;
		
	Иначе
		
		СтруктураОтбора = Новый Структура();
		
		ПоляОтбора = "";
		
		Если Колонка <> Неопределено
			И ЗначениеЗаполнено(Колонка) Тогда
			
			СтруктураОтбора.Вставить("Колонка", Колонка);
			ПоляОтбора = "Колонка";
			
		КонецЕсли;
		
		Если Строка <> Неопределено Тогда
			
			СтруктураОтбора.Вставить("Строка", Строка);
			ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + "Строка";
			
		КонецЕсли;
		
		СтруктураОтбора.Вставить("ОсновнойЭлемент", Истина);
		ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + "ОсновнойЭлемент";
		
		Для Каждого КлючИЗначение из НакопленныйОтбор Цикл
			СтруктураОтбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + КлючИЗначение.Ключ;
		КонецЦикла;
		
		Если ИндексыПоиска[ПоляОтбора] <> Истина Тогда
			ИндексыПоиска.Вставить(ПоляОтбора, Истина);
			ДанныеЯчеек.Индексы.Добавить(ПоляОтбора);
		КонецЕсли;
		
		НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураОтбора);
		ОтборЯчейки = "";
		Для Каждого КлючИЗначение из СтруктураОтбора Цикл
			ОтборЯчейки = ОтборЯчейки + ?(ПустаяСтрока(ОтборЯчейки), "", ",") + КлючИЗначение.Ключ;
		КонецЦикла;
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			НайденнаяСтрока.ОтборЯчейки = ОтборЯчейки;
		КонецЦикла;
		
		Возврат НайденныеСтроки;
		
	КонецЕсли;
	
КонецФункции

Функция ГлубинаДерева(Строки, Знач Глубина = 0, ГлубинаВсего = 0) Экспорт
	
	Если Строки.Количество() Тогда
		ГлубинаВсего = Макс(ГлубинаВсего, Глубина);
	КонецЕсли;
	
	Для Каждого СтрокаПоказателя из Строки Цикл
		
		ГлубинаДерева(СтрокаПоказателя.Строки, Глубина + 1, ГлубинаВсего);
		
	КонецЦикла;
	
	Возврат ГлубинаВсего
	
КонецФункции

Процедура РаспределитьЭлементыПоУровням(Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая = 0) Экспорт
	
	Если ГлубинаТекущая > ГлубинаВсего Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтрок = СоответствиеСтрокУровням[ГлубинаТекущая + 1];
	Если СписокСтрок = Неопределено Тогда
		СписокСтрок = Новый Массив;
	КонецЕсли;
	СоответствиеСтрокУровням.Вставить(ГлубинаТекущая + 1, СписокСтрок);
	
	Если Строки = Неопределено ИЛИ Не Строки.Количество() Тогда
		
		СписокСтрок.Добавить(Неопределено);
		РаспределитьЭлементыПоУровням(Неопределено, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
		
	Иначе
		
		Для Каждого СтрокаПоказателя из Строки Цикл
			
			СписокСтрок.Добавить(СтрокаПоказателя);
			РаспределитьЭлементыПоУровням(СтрокаПоказателя.Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоЛистьевДерева(ЭлементУровня, Количество = 0)
	
	Для Каждого Элемент из ЭлементУровня.Строки Цикл
		Если Не Элемент.Строки.Количество() Тогда
			Количество = Количество + 1;
		Иначе
			ПолучитьКоличествоЛистьевДерева(Элемент, Количество);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макс(1, Количество);
	
КонецФункции

Процедура ВывестиШапкуТаблицыВОтчет(ПараметрыВывода, ДокументРезультат, СтруктураОбластей, СтруктураКолонок, СтрокаТаблицы)
	
	СоответствиеЭлементовПоУровням = Новый Соответствие;
	КоличествоУровней = ГлубинаДерева(СтруктураКолонок.Строки) + 1;
	РаспределитьЭлементыПоУровням(СтруктураКолонок.Строки, КоличествоУровней, СоответствиеЭлементовПоУровням);
	
	Постфикс = "";
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
		Постфикс = "НумерацияСтрок";
	КонецЕсли;
	
	НачалоВывода = Неопределено;
	СчетчикКолонок = 1;
	Для Сч = 1 по КоличествоУровней Цикл
		
		ВыведеннаяОбласть = ДокументРезультат.Вывести(СтруктураОбластей["ШапкаНачалоТаблицы" + Постфикс], 0);
		ВыведеннаяОбласть.Расшифровка = Неопределено;
		Если НачалоВывода = Неопределено Тогда
			НачалоВывода = ВыведеннаяОбласть;
		КонецЕсли;
		
		ДополнительнаяОбласть = СтруктураОбластей["ШапкаДополнительнаяСекция"];
		Для ДополнительнаяКолонка = 1 по СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок Цикл
			ДокументРезультат.Присоединить(ДополнительнаяОбласть);
		КонецЦикла;
		
		Если СоответствиеЭлементовПоУровням.Количество() Тогда // проверка на наличие значений колонок
			
			ЭлементыУровня = СоответствиеЭлементовПоУровням[Сч];
			Для Каждого ЭлементУровня из ЭлементыУровня Цикл
				Секция = СтруктураОбластей["ШапкаГруппировкаКолонок" + Мин(Сч, 3)];
				
				Если ЭлементУровня = Неопределено Тогда
					Секция.Параметры.Группировка = "";
				ИначеЕсли ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Группировка = ЭлементУровня.НаименованиеДляПечати;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ЭлементУровня.ФиксированноеЗначение);
					Секция.Параметры.Расшифровка = Расшифровка;
				Иначе
					Секция.Параметры.Группировка = ЭлементУровня.ФиксированноеЗначение;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ЭлементУровня.ФиксированноеЗначение);
					Секция.Параметры.Расшифровка = Расшифровка;
				КонецЕсли;
				
				ВыведеннаяОбласть = ДокументРезультат.Присоединить(Секция);
				
				Если ЭлементУровня = Неопределено Тогда
					Область = ДокументРезультат.Область(ВыведеннаяОбласть.Верх - 1,
														ВыведеннаяОбласть.Лево,
														ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Лево);
					Область.Объединить();
					Продолжить;
				КонецЕсли;
				
				ПодчиненныхЭлементов = ПолучитьКоличествоЛистьевДерева(ЭлементУровня);
				Если ПодчиненныхЭлементов > 1 Тогда
					Для НомерСекции = 1 по ПодчиненныхЭлементов - 1 Цикл
						ДокументРезультат.Присоединить(Секция);
					КонецЦикла;
					Область = ДокументРезультат.Область(ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Лево,
														ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Лево + (ПодчиненныхЭлементов - 1));
					Область.Объединить();
					ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Неопределено, ЭлементУровня.ЭлементОтчета, Неопределено, 0, Неопределено);
				ИначеЕсли Сч < КоличествоУровней Тогда
					ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, 
									Неопределено, ЭлементУровня.ЭлементОтчета, Неопределено, 0, Неопределено);
				КонецЕсли;
				
				Если Сч = КоличествоУровней Тогда
					СчетчикКолонок = СчетчикКолонок + 1;
					ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, 
									Неопределено, ЭлементУровня.ЭлементОтчета, Неопределено, 0, СчетчикКолонок);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
											1, 
											НачалоВывода.Верх + (КоличествоУровней - 1), 
											1);
		Область.Объединить();
		
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(),
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1);
									
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
											2, 
											НачалоВывода.Верх + (КоличествоУровней - 1), 
											2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
		Область.Объединить();
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(),
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1);
		ОбластьТекста = Область;
		
	Иначе
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
											1, 
											НачалоВывода.Верх + (КоличествоУровней - 1), 
											2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
		Область.Объединить();
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(),
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1);
		ОбластьТекста = Область;
		
	КонецЕсли;
	
	Текст = "";
	Если СтрокаТаблицы.Строки.Найти("ПоказательБюджетов", "ИмяИзмерения", Истина) <> Неопределено Тогда
		Текст = НСтр("en='Indicator of budgets';ru='Показатель бюджетов'");
	КонецЕсли;
	
	Если СтрокаТаблицы.Строки.Найти("СтатьяБюджетов", "ИмяИзмерения", Истина) <> Неопределено Тогда
		Текст = Текст + ?(ПустаяСтрока(Текст), "", " / " + Символы.ПС) + НСтр("en='Budget item';ru='Статья бюджетов'");
	КонецЕсли;
	
	Текст = Текст + ?(ПустаяСтрока(Текст), "", " / " + Символы.ПС) + НСтр("en='Analytics';ru='Аналитика'");
	
	ОбластьТекста.Текст = Текст;
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюКолонок Тогда
		НачалоВывода = ДокументРезультат.Вывести(СтруктураОбластей["НумерацияКолонокНачалоТаблицы" + Постфикс], 0);
		
		ДобавитьОбластьОформления(ПараметрыВывода, НачалоВывода, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1);
		
		ДополнительнаяОбласть = СтруктураОбластей["НумерацияКолонокДополнительнаяСекция"];
		Для ДополнительнаяКолонка = 1 по СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок Цикл
			ДокументРезультат.Присоединить(ДополнительнаяОбласть);
		КонецЦикла;
		Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
			
			Область = ДокументРезультат.Область(НачалоВывода.Верх, 
												2, 
												НачалоВывода.Верх, 
												2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
			Область.Объединить();
			
		Иначе
			
			Область = ДокументРезультат.Область(НачалоВывода.Верх, 
												1, 
												НачалоВывода.Верх, 
												2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
			Область.Объединить();
			
		КонецЕсли;
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1);
		ЭлементыОтчета = СоответствиеЭлементовПоУровням[КоличествоУровней];
		Для Сч = 1 По ЭлементыОтчета.Количество() Цикл
			Область = СтруктураОбластей["НумерацияКолонокГруппировкаКолонок" + Мин(КоличествоУровней, 3)];
			Область.Параметры.НомерКолонки = 1 + Сч;
			ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
			ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, 
					Неопределено, ЭлементыОтчета[Сч-1].ЭлементОтчета, Неопределено, 0, СчетчикКолонок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, Префикс, Постфикс, 
											РасчетИзменений, ВидЭлемента = Неопределено, ЛогРасчета = Неопределено)
	
	Если ВидЭлемента = Неопределено Тогда
		ВидЭлемента = СтрокаДанных.ВидЭлемента;
	КонецЕсли;
	
	Если РасчетИзменений
		И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		
		Если ЗначениеЗаполнено(ПараметрыЯчейки.Формула) Тогда
			
			ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтрокаДанных["Рассчитан" + Префикс + Постфикс] Тогда
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		ОбратныйЗнак = ПараметрыЯчейки.ОбратныйЗнак;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			СтрокаДанных[Префикс + Постфикс] = СтрокаДанных[Префикс + Постфикс + ПараметрыЯчейки.ПолеИсточника];
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			
			Формула = ПараметрыЯчейки.Формула;
			МассивЗначений = Новый Массив;
			
			// Показатели и статьи
			СтруктураПоиска = Новый Структура(ПараметрыЯчейки.ОбщиеИзмерения);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
			СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
			СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			СписокОперандов = ПараметрыЯчейки.СписокОперандов;
			
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
					Продолжить; //ячейки обрабатываются отдельно
				КонецЕсли;
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
				
				Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ИмяОперанда) Тогда
					ТекстНСТР = НСтр("en='Report generation error: invalid operand formulas';ru='Ошибка формирования отчета: Неверный операнд формулы'");
					ВызватьИсключение ТекстНСТР;
				КонецЕсли;
				
				// В операндах производного показателя
				// может быть выбрано только количество или сумма
				Если ПараметрыЯчейки.ФлагКоличество Тогда
					ПрефиксСсылки = "Количество";
					ПостФиксСсылки = "";
				Иначе
					ПрефиксСсылки = "Сумма";
					ПостФиксСсылки = ПостФикс;
				КонецЕсли;
				
				Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, НайденнаяСтрока, ПрефиксСсылки, 
																			ПостФиксСсылки, РасчетИзменений, НайденнаяСтрока.ВидОперанда);
				
				ИмяОперанда = "[" + ПараметрыЯчейки.ИмяОперанда + "]";
				СписокОперандов = СтрЗаменить(СписокОперандов, ИмяОперанда, "");
				
				МассивЗначений.Добавить(Значение);
				Формула = СтрЗаменить(Формула, ИмяОперанда, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
				
				Если ЛогРасчета <> Неопределено Тогда
					ЗначениеДляЛога = Новый Структура();
					ЗначениеДляЛога.Вставить("ИмяПоказателя", ПрефиксСсылки);
					ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидОперанда);
					ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыЯчейки.ИмяОперанда);
					ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
					ЗначениеДляЛога.Вставить("Значение", Значение);
					ЛогРасчета.Добавить(ЗначениеДляЛога);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
			СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
			СтруктураПоиска.Вставить("ВидОперанда", Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			
			ПредыдущаяЕдиницаИзмерения = Неопределено; 
			ЕстьОшибкиВЕдиницах = Ложь;
			
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
				
				Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ИмяОперанда) Тогда
					ТекстНСТР = НСтр("en='Report generation error: invalid operand formulas';ru='Ошибка формирования отчета: Неверный операнд формулы'");
					ВызватьИсключение ТекстНСТР;
				КонецЕсли;
				
				ИмяОперанда = "[" + ПараметрыЯчейки.ИмяОперанда + "]";
				
				Если Не ЕстьОшибкиВЕдиницах Тогда
					
					СтруктураПоиска = Новый Структура(ПараметрыЯчейки.ОбщиеИзмерения);
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
					СтруктураПоиска.Вставить("Строка", ПараметрыЯчейки.ОперандСтрока);
					СтруктураПоиска.Вставить("Колонка", ПараметрыЯчейки.ОперандКолонка);
					СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
					
					СтрокиСсылки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
					
					МассивЛокальныхЗначений = Новый Массив;
					
					Если СтрокиСсылки.Количество() Тогда
						
						Для Каждого СтрокаСсылки из СтрокиСсылки Цикл
							
							ПараметрыСсылки = ПараметрыЯчеек.Найти(СтрокаСсылки.ИндексСтроки, "ИндексСтроки");
							
							// В сложной таблице из ячеек выбираем первое,
							// что заполнено - количество или сумма
							Если ПараметрыСсылки.СложнаяТаблица Тогда
								Если ПараметрыСсылки.ФлагКоличество Тогда
									ПрефиксСсылки = "Количество";
									ПостФиксСсылки = "";
								Иначе
									ПрефиксСсылки = "Сумма";
									ПостФиксСсылки = ПостФикс;
								КонецЕсли;
							Иначе
								ПрефиксСсылки = Префикс;
								ПостФиксСсылки = ПостФикс;
								Если ПрефиксСсылки = "Количество" Тогда
									Если ПредыдущаяЕдиницаИзмерения = Неопределено Тогда
										ПредыдущаяЕдиницаИзмерения = СтрокаСсылки.ЕдиницаИзмерения;
									КонецЕсли;
									Если ПредыдущаяЕдиницаИзмерения <> СтрокаСсылки.ЕдиницаИзмерения Тогда
										Для Сч = 0 по МассивЗначений.ВГраница() Цикл
											МассивЗначений[Сч] = 0;
										КонецЦикла;
										ЕстьОшибкиВЕдиницах = Истина;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							РезультатПодчиненнойСсылки = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаСсылки, 
																									ПрефиксСсылки, ПостФиксСсылки, РасчетИзменений);
							Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
								МассивЗначений.Добавить(РезультатПодчиненнойСсылки);
							КонецЕсли;
							МассивЛокальныхЗначений.Добавить(РезультатПодчиненнойСсылки);
							Если ЛогРасчета <> Неопределено Тогда
								ПредставлениеЯчейки = ИмяОперанда;
								РазмерМассива = МассивЛокальныхЗначений.Количество();
								Если РазмерМассива > 1 Тогда
									ПредставлениеЯчейки = ПредставлениеЯчейки + " #" + РазмерМассива;
								КонецЕсли;
								ЗначениеДляЛога = Новый Структура();
								ЗначениеДляЛога.Вставить("ИмяПоказателя", ПрефиксСсылки);
								ЗначениеДляЛога.Вставить("ВидЭлемента", СтрокаСсылки.ВидЭлемента);
								ЗначениеДляЛога.Вставить("ИмяОперанда", ПредставлениеЯчейки);
								ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(СтрокаСсылки));
								ЗначениеДляЛога.Вставить("Значение", РезультатПодчиненнойСсылки);
								ЛогРасчета.Добавить(ЗначениеДляЛога);
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						Если ЛогРасчета <> Неопределено Тогда
							ЗначениеДляЛога = Новый Структура();
							ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
							ЗначениеДляЛога.Вставить("ИмяОперанда", НайденнаяСтрока.ИмяОперанда);
							ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
							ЗначениеДляЛога.Вставить("Значение", 0);
							ЛогРасчета.Добавить(ЗначениеДляЛога);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
					ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
					Если ЛогРасчета <> Неопределено Тогда
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидЭлемента);
						ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыЯчейки.ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
						ЗначениеДляЛога.Вставить("Значение", МассивЛокальныхЗначений);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
					
					СписокОперандов = СтрЗаменить(СписокОперандов, ИмяОперанда, "");
					Если МассивЛокальныхЗначений.Количество() = 1 Тогда
						МассивЛокальныхЗначений = МассивЛокальныхЗначений[0];
					ИначеЕсли МассивЛокальныхЗначений.Количество() = 0 Тогда
						МассивЛокальныхЗначений = 0;
					КонецЕсли;
					МассивЗначений.Добавить(МассивЛокальныхЗначений);
					Формула = СтрЗаменить(Формула, ИмяОперанда, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(СписокОперандов) Тогда
				СписокНеНайденныхОперандов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокОперандов, " ", Истина);
				Для Каждого ИмяОперанда из СписокНеНайденныхОперандов Цикл
					Формула = СтрЗаменить(Формула, ИмяОперанда, "0");
					Если ЛогРасчета <> Неопределено Тогда
						Если Лев(ИмяОперанда, 1) = "[" Тогда
							ИмяОперанда = Сред(ИмяОперанда, 2);
						КонецЕсли;
						Если Прав(ИмяОперанда, 1) = "]" Тогда
							ИмяОперанда = Лев(ИмяОперанда, СтрДлина(ИмяОперанда) - 1);
						КонецЕсли;
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ИмяОперанда", ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
						ЗначениеДляЛога.Вставить("Значение", 0);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Найти(ВРег(Формула), ВРег("РАЗНОСТЬДАТ")) Тогда
				НачалоПериода = ПараметрыПериодов.НачалоПериода;
				КонецПериода = ПараметрыПериодов.КонецПериода;
				ГраницаФактДанных = ПараметрыПериодов.ГраницаФактДанных;
				ПериодГруппировки = Неопределено;
				Для Каждого ИмяПериода из ПараметрыПериодов.УпорядоченныеПериодичностиОтчета Цикл
					Если ЗначениеЗаполнено(СтрокаДанных[ИмяПериода]) Тогда
						ПериодГруппировки = СтрокаДанных[ИмяПериода];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				РезультатВычисления = Вычислить(Формула);
				Если ТипЗнч(РезультатВычисления) = Тип("Массив") Тогда
					Если РезультатВычисления.Количество() = 1 Тогда
						РезультатВычисления = РезультатВычисления[0];
					Иначе
						РезультатВычисления = СтрСоединить(РезультатВычисления, ";");
					КонецЕсли;
				КонецЕсли;
				СтрокаДанных[Префикс + Постфикс] = РезультатВычисления;
			Исключение
				Возврат "#Знач";
			КонецПопытки;
			
		Иначе
			
			ТекстНСТР = НСтр("en='Error of generating report: Invalid element type of index';ru='Ошибка формирования отчета: Неверный вид элемента показателя'");
			ВызватьИсключение ТекстНСТР;
		
		КонецЕсли;
		
		Если ОбратныйЗнак Тогда
			СтрокаДанных[Префикс + Постфикс] = -СтрокаДанных[Префикс + Постфикс];
		КонецЕсли;
		
		СтрокаДанных["Рассчитан" + Префикс + Постфикс] = Истина;
		
	КонецЕсли;
	
	Возврат СтрокаДанных[Префикс + Постфикс];
	
КонецФункции

Функция РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, 
									Префикс, РасчетИзменений = Ложь, ЛогРасчета = Неопределено) Экспорт
	
	Если ДанныеЯчеек.Колонки.Найти("Валюта") <> Неопределено Тогда
		Если Префикс = "Сумма" Тогда
			Постфикс = ?(ЗначениеЗаполнено(СтрокаДанных.Валюта), "Вал", "");
		Иначе
			ПостФикс = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЛогРасчета <> Неопределено Тогда
		СтрокаДанных["Рассчитан" + Префикс + Постфикс] = Ложь;
	КонецЕсли;
	
	Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, Префикс, Постфикс, РасчетИзменений, , ЛогРасчета);
	Возврат Значение;
	
КонецФункции

Функция ПолучитьРасшифровку(НакопленныйОтбор, СтрокаЯчейки, СтрокаПараметров, ИмяПоказателя, ИндексСтрокиДанных, ДляРедактирования)
	
	Расшифровка = Новый Структура;
	Если ДляРедактирования Тогда
		
		Расшифровка.Вставить("СтатьяБюджетов", СтрокаЯчейки.СтатьяБюджетов);
		Если ЗначениеЗаполнено(СтрокаПараметров.ВалютаВывода) Тогда
			Расшифровка.Вставить("ВалютаВывода", СтрокаПараметров.ВалютаВывода);
		КонецЕсли;
		
		Для Каждого КлючИЗначение из НакопленныйОтбор Цикл
			Расшифровка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Расшифровка.Вставить("ИмяПоказателя", ИмяПоказателя);
	Если ИндексСтрокиДанных = Неопределено Тогда
		Расшифровка.Вставить("Значение", Неопределено);
	Иначе
		Расшифровка.Вставить("Значение", СтрокаЯчейки[ИмяПоказателя]);
		Расшифровка.Вставить("ИндексСтрокиДанных", ИндексСтрокиДанных);
	КонецЕсли;
	
	Возврат Расшифровка;
	
КонецФункции

Функция ПолучитьРасшифровкуГруппировки(Значение, НакопленныйОтбор = Неопределено, Группировка = Неопределено)
	Перем Расшифровка;
	
	Расшифровка = Новый Структура;
	
	Если Группировка <> Неопределено Тогда
		Расшифровка.Вставить("Строка", Группировка.ЭлементОтчета);
	КонецЕсли;
	
	Расшифровка.Вставить("Значение", Значение);

	Расшифровка.Вставить("ИДГруппировки", Новый УникальныйИдентификатор);
	
	Если Расшифровка.Количество() Тогда
		Возврат Расшифровка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВывестиЯчейкиВОтчет(ПараметрыВывода, ОбластьЗначение, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, СчетчикКолонок = 1)
	
	ДокументРезультат 	= ПараметрыВывода.ДокументРезультат;
	ДанныеЯчеек 		= ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска 		= ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования 	= ПараметрыВывода.ДляРедактирования;
	ПараметрыЯчеек 		= ПараметрыВывода.ПараметрыЯчеек;
	СтруктураЯчеек 		= ПараметрыВывода.СтруктураЯчеек;
	СложнаяТаблица 		= ПараметрыВывода.СложнаяТаблица;
	ПараметрыПериодов 	= ПараметрыВывода.ПараметрыПериодов;
	СчетчикСтрок 		= ПараметрыВывода.СчетчикСтрок;
	
	Для Каждого Колонка из СтруктураКолонок.Строки Цикл
		
		ДобавленОтбор = Ложь;
		ЭтоПоказатель = Найти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка = 
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы 
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если Не ЭтоФиксКолонка
			И Не ЭтоПоказатель Тогда
			НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
			ДобавленОтбор = Истина;
		КонецЕсли;
		
		Если Колонка.Строки.Количество() Тогда
			ВывестиЯчейкиВОтчет(ПараметрыВывода, ОбластьЗначение, СтрокаОтчета, Колонка, НакопленныйОтбор, СчетчикКолонок);
		Иначе
			
			СчетчикКолонок = СчетчикКолонок + 1;
			ВыводитьЗначение = Истина;
			Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если СтрокаОтчета.Строки.Количество()
					И СтрокаОтчета.Строки[0].ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					ВыводитьЗначение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			КолонкаФильтра = Колонка;
			Если НЕ СложнаяТаблица Тогда
				Если ЭтоПоказатель Тогда
					ИмяПоказателя = СтрЗаменить(Колонка.ИмяИзмерения, "#Показатель_", "");
					КолонкаФильтра = КолонкаФильтра.Родитель;
				Иначе
					ИмяПоказателя = "Сумма";
				КонецЕсли;
			КонецЕсли;
			
			Если КолонкаФильтра <> Неопределено Тогда
				КолонкаФильтра = КолонкаФильтра.ЭлементОтчета;
			КонецЕсли;
				
			СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаОтчета.ЭлементОтчета);
			Если ЗначениеЗаполнено(КолонкаФильтра) Тогда
				СтруктураПоиска.Вставить("Колонка", КолонкаФильтра);
			КонецЕсли;
			
			СтрокиСтруктуры = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСтруктуры.Количество() Тогда
				ЯчейкаОтчета = СтрокиСтруктуры[0];
			Иначе
				ВыводитьЗначение = Ложь;
			КонецЕсли;
			
			Если Не ВыводитьЗначение Тогда
				ОбластьЗначение.Параметры.Значение = Неопределено;
				ОбластьЗначение.Параметры.Расшифровка = Неопределено;
				Область = ДокументРезультат.Присоединить(ОбластьЗначение);
				Если ДляРедактирования И
					НЕ СтрокаОтчета.Строки.Количество() Тогда
					Область.ЦветФона = Новый Цвет(237, 237, 237);
				КонецЕсли;
			Иначе
				
				Строки = ПолучитьВыборкуЯчеек(ДанныеЯчеек, , КолонкаФильтра, 
												СтрокаОтчета.ЭлементОтчета, НакопленныйОтбор, Ложь, ИндексыПоиска);
				
				Если Строки.Количество() > 1 Тогда
					ТекстНСТР = НСтр("en='Error generating report: Error calculating the structure of cells';ru='Ошибка формирования отчета: Ошибка расчета структуры ячеек'");
					ВызватьИсключение ТекстНСТР;
				Иначе
					
					Значение = Неопределено;
					Расшифровка = Неопределено;
					
					ПараметрыФлагов = ПараметрыЯчеек.Найти(ЯчейкаОтчета.ИндексСтроки, "ИндексСтроки");
					
					// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы
					Если СложнаяТаблица Тогда
						ВыводитьЗначение = Истина;
						ВсегоФлагов = Число(ПараметрыФлагов.ФлагКоличество) + 
										Число(ПараметрыФлагов.ФлагСумма) + 
										Число(ПараметрыФлагов.ФлагЗначение);
						Если ВсегоФлагов > 1 Тогда
							ТекстНСТР = НСтр("en='Error report: Error forming the structure of cells';ru='Ошибка формирования отчета: Ошибка формирования структуры ячеек'");
							ВызватьИсключение ТекстНСТР;
						ИначеЕсли ПараметрыФлагов.ФлагКоличество Тогда
							ИмяПоказателя = "Количество";
						ИначеЕсли ПараметрыФлагов.ФлагЗначение Тогда
							ИмяПоказателя = "Значение";
						ИначеЕсли ПараметрыФлагов.ФлагСумма Тогда
							ИмяПоказателя = "Сумма";
						Иначе
							ВыводитьЗначение = Ложь;
						КонецЕсли;
					Иначе
						ВыводитьЗначение = Ложь;
						Если ПараметрыФлагов.ФлагКоличество Тогда
							ВыводитьЗначение = ИмяПоказателя = "Количество";
						КонецЕсли;
						Если Не ВыводитьЗначение И ПараметрыФлагов.ФлагЗначение Тогда
							ВыводитьЗначение = ИмяПоказателя = "Значение";
						КонецЕсли;
						Если Не ВыводитьЗначение И ПараметрыФлагов.ФлагСумма Тогда
							ВыводитьЗначение = ИмяПоказателя = "Сумма";
						КонецЕсли;
					КонецЕсли;
					
					Если Строки.Количество() Тогда
						
						ИмяОбласти = "ИмяОбласти" + ИмяПоказателя;
						Если ВыводитьЗначение Тогда
							Значение = РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Строки[0], ИмяПоказателя);
							Расшифровка = ПолучитьРасшифровку(НакопленныйОтбор, Строки[0], 
															ПараметрыФлагов, ИмяПоказателя,
															ДанныеЯчеек.Индекс(Строки[0]), ДляРедактирования);
							Значение = ?(ЗначениеЗаполнено(Значение), Значение, Неопределено);
						КонецЕсли;
						
						Примечание = Строки[0].Примечание;
						
					КонецЕсли;
					
					Если ИмяПоказателя = "Значение" Тогда
						Если СтрокаОтчета.Строки.Количество() Тогда
							// По нефинансовым показателям значения 
							// выводим на нижнем уровне бюджета
							Значение = Неопределено;
						КонецЕсли;
					КонецЕсли;
					
					Если Не Строки.Количество() Тогда
						Расшифровка = ПолучитьРасшифровку(НакопленныйОтбор, ЯчейкаОтчета, 
														ПараметрыФлагов, ИмяПоказателя, Неопределено, ДляРедактирования)
					КонецЕсли;
					
					ОбластьЗначение.Параметры.Значение = Значение;
					ОбластьЗначение.Параметры.Расшифровка = Расшифровка;
					
					Область = ДокументРезультат.Присоединить(ОбластьЗначение);
					СтрокаОформления = ДобавитьОбластьОформления(ПараметрыВывода, Область, 
											СтрокаОтчета.ЭлементОтчета, КолонкаФильтра, НакопленныйОтбор, СчетчикСтрок, СчетчикКолонок);
					Если СтрокаОформления <> Неопределено Тогда
						СтрокаОформления[ИмяПоказателя] = Значение;
						СтрокаОформления["Флаг" + ИмяПоказателя] = Истина;
					КонецЕсли;
					
					Если Строки.Количество() Тогда
						Строки[0][ИмяОбласти] = Область.Имя;
					КонецЕсли;
					
					Если ПараметрыВывода.ДляРедактирования Тогда
						
						МожноРедактировать = Ложь;
						Если ЯчейкаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
							Если ЯчейкаОтчета.ИД_Источника = "Документ" Тогда
								МожноРедактировать = ПараметрыФлагов["Флаг" + ИмяПоказателя];
							КонецЕсли;
						КонецЕсли;
						
						Если МожноРедактировать Тогда
							
							Если Не СтрокаОтчета.Строки.Количество() Тогда
								Если ПараметрыФлагов.ОбратныйЗнак Тогда //для ввода изменим знак
									Область.ЦветТекста = WebЦвета.Красный;
									Если ТипЗнч(Значение) = Тип("Число") Тогда
										Значение = -Значение;
									КонецЕсли;
								КонецЕсли;
								Область.СодержитЗначение = Истина;
								Область.Значение = Значение;
								Область.ТипЗначения = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2);
								Область.Защита = Ложь;
								Область.Примечание.Текст = Примечание;
							КонецЕсли;
							
						ИначеЕсли НЕ СтрокаОтчета.Строки.Количество() Тогда
							
							Область.ЦветФона = Новый Цвет(237, 237, 237);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленОтбор Тогда
			НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстГруппировки(Значение, СтрокаОтчета, ПараметрыВывода, ЭтоКолонки = Ложь)
	
	Представление = СтрокаОтчета.НаименованиеДляПечати;
	ВидАналитики = СтрокаОтчета.ВидАналитики;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Если Не ПустаяСтрока(Представление) Тогда
			Возврат Представление;
		КонецЕсли;
		Возврат "<" + СокрЛП(НСтр("en='other';ru='прочие'") + " " + НРег(ВидАналитики)) + ">";
	КонецЕсли;
	
	ВидЭлемента = СтрокаОтчета.ВидЭлемента;
	ЭлементОтчета = СтрокаОтчета.ЭлементОтчета;
	ИмяИзмерения = СтрокаОтчета.ИмяИзмерения;
	
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета;
	
	Если ВидЭлемента = ВидыЭлементов.Измерение И Найти(ИмяИзмерения, "Период") Тогда
		
		Периодичность = Перечисления.Периодичность[СтрЗаменить(ИмяИзмерения, "Период", "")];
		Возврат БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Значение, Периодичность);
		
	КонецЕсли;
	
	Если ВидЭлемента = ВидыЭлементов.Измерение Тогда
		
		ИмяИндекса = "";
		СтруктураПоиска = Новый Структура();
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
			ИмяИндекса = "Колонка";
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
			ИмяИндекса = "Строка";
		КонецЕсли;
		СтруктураПоиска.Вставить(ИмяИзмерения, Значение);
		ИмяИндекса = ИмяИндекса + "," + ИмяИзмерения;
		
		Если ПараметрыВывода.ИндексыПоискаИзмерений[ИмяИндекса] = Неопределено Тогда
			ПараметрыВывода.ПредставленияИзмерений.Индексы.Добавить(ИмяИндекса);
			ПараметрыВывода.ИндексыПоискаИзмерений.Вставить(ИмяИндекса, Истина);
		КонецЕсли;
		
		СтрокиДанных = ПараметрыВывода.ПредставленияИзмерений.НайтиСтроки(СтруктураПоиска);
		
		Если Не СтрокиДанных.Количество() Тогда //если ссылочный тип в колонках не на последнем уровне
			НаименованиеГруппировки = Строка(Значение);
		Иначе
			СтрокаПредставления = СтрокиДанных[0];
			НаименованиеГруппировки = СтрокаПредставления[ИмяИзмерения + "Представление"];
			Для Каждого ДополнительныйРеквизит из СтрокаОтчета.ДополнительныеПоля Цикл
				НаименованиеГруппировки = НаименованиеГруппировки + ", ";
				Если Не ПустаяСтрока(ДополнительныйРеквизит.Заголовок) Тогда
					НаименованиеГруппировки = НаименованиеГруппировки + ДополнительныйРеквизит.Заголовок + ": ";
				КонецЕсли;
				НаименованиеГруппировки = НаименованиеГруппировки + СтрокаПредставления[ИмяИзмерения + "_" + ДополнительныйРеквизит.Реквизит];
			КонецЦикла;
		КонецЕсли;
	
	Иначе
		
		Если ЗначениеЗаполнено(Представление) Тогда
			НаименованиеГруппировки = Представление;
		Иначе
			НаименованиеГруппировки = Строка(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭлемента = ВидыЭлементов.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.СтатьяБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.ПоказательБюджетов Тогда
		
		КэшПараметровЕдиницы = ПараметрыВывода.КэшПараметровЕдиницИзмерения;
		СтруктураПоиска = Новый Структура;
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
		КонецЕсли;
		СтруктураПоиска.Вставить("ОбъектУчета", Значение);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", Ложь);
		
		ПараметрыВыводаЕдиницы = КэшПараметровЕдиницы.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыВыводаЕдиницы.Количество() Тогда
			
			ЕдиницаИзмерения = ПараметрыВыводаЕдиницы[0].ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ", " + ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ВидАналитики) Тогда
		
		КэшПараметровЕдиницы = ПараметрыВывода.КэшПараметровЕдиницИзмерения;
		СтруктураПоиска = Новый Структура;
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
		КонецЕсли;
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", Истина);
		СтруктураПоиска.Вставить("АналитикаЕдиницыИзмерения", ВидАналитики);
		
		ПараметрыВыводаЕдиницы = КэшПараметровЕдиницы.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыВыводаЕдиницы.Количество() Тогда
			
			ЕдиницаИзмерения = Подключаемый_ЗначениеИзАналитики(
															ПараметрыВывода.КэшЗначенийАналитик, Значение, 
															ПараметрыВыводаЕдиницы[0].ЗаполнениеЕдиницыИзмерения);
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ", " + ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаименованиеГруппировки;
	
КонецФункции

Функция ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, Строка, Колонка, 
											НакопленныйОтбор, НомерСтроки, НомерКолонки)
	
	ДанныеОтчетаДляОформления = ПараметрыВывода.ДанныеОтчетаДляОформления;
	Если ДанныеОтчетаДляОформления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрокаОформления = ДанныеОтчетаДляОформления.Добавить();
	НоваяСтрокаОформления.ИмяОбласти = ВыведеннаяОбласть.Имя;
	НоваяСтрокаОформления.Строка = Строка;
	НоваяСтрокаОформления.Колонка = Колонка;
	НоваяСтрокаОформления.НомерСтроки = НомерСтроки;
	НоваяСтрокаОформления.НомерКолонки = НомерКолонки;
	
	Если НакопленныйОтбор <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОформления, НакопленныйОтбор);
	КонецЕсли;
	
	Возврат НоваяСтрокаОформления;
	
КонецФункции

Процедура ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокиОтчета, НакопленныйОтбор = Неопределено, Уровень = 1, СчетчикСтрок = 0)
	
	ДокументРезультат = ПараметрыВывода.ДокументРезультат;
	СтруктураОбластей = ПараметрыВывода.СтруктураОбластей;
	СтруктураКолонок = ПараметрыВывода.СтруктураКолонок;
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска = ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования = ПараметрыВывода.ДляРедактирования;
	ПараметрыТаблицы = ПараметрыВывода.ПараметрыТаблицы;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	ОтрабатываетсяУровней = 8;
	
	УровеньГруппировок = Мин(Уровень, ОтрабатываетсяУровней);
	ПрефиксОбласти = "Группировка" + УровеньГруппировок;
	
	ОтображатьНумерациюСтрок = ПараметрыТаблицы.ОтображатьНумерациюСтрок;
	
	Для Каждого СтрокаОтчета из СтрокиОтчета.Строки Цикл
		
		ИмяОбластиМакета = ПрефиксОбласти;
		Если УровеньГруппировок = ОтрабатываетсяУровней 
			ИЛИ Не СтрокаОтчета.Строки.Количество() Тогда
			ИмяОбластиМакета = ИмяОбластиМакета + "Финал";
		КонецЕсли;
		
		ОбластьНачало = СтруктураОбластей[ИмяОбластиМакета + "НачалоТаблицы" + ?(ОтображатьНумерациюСтрок, "НумерацияСтрок", "")];
		ОбластьЗначение = СтруктураОбластей[ИмяОбластиМакета + "Значение"];
		ОбластьДопСекция = СтруктураОбластей[ИмяОбластиМакета + "ДополнительнаяСекция"];
		
		Если СтрокаОтчета.ВыводитьВместеСПодчиненным Тогда
			
			ДобавленОтбор = Ложь;
			Если ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение) Тогда
				НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень + 1, СчетчикСтрок);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
			КонецЕсли;
			
		ИначеЕсли СтрокаОтчета.ВыводитьВместеСРодительским Тогда
			
			МассивИзмерений = Новый Массив;
			СписокСтрок = Новый СписокЗначений;
			СписокКВыводу = Новый Массив;
			
			СтрокаДляРасчетаОбъединения = СтрокаОтчета;
			
			Соединенных = -1;
			Пока СтрокаДляРасчетаОбъединения.ВыводитьВместеСРодительским
				ИЛИ СтрокаДляРасчетаОбъединения.ВыводитьВместеСПодчиненным Цикл
				СписокСтрок.Добавить(СтрокаДляРасчетаОбъединения.ЭлементОтчета);
				МассивИзмерений.Добавить(СтрокаДляРасчетаОбъединения.ИмяИзмерения);
				СписокКВыводу.Вставить(0, СтрокаДляРасчетаОбъединения);
				Соединенных = Соединенных + 1;
				СтрокаДляРасчетаОбъединения = СтрокаДляРасчетаОбъединения.Родитель;
			КонецЦикла;
			Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок - Соединенных;
			
			МассивИзмерений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИзмерений);
			
			Результат = ПолучитьВыборкуЯчеек(ДанныеЯчеек, МассивИзмерений,,
											СписокСтрок, НакопленныйОтбор, Истина, ИндексыПоиска);
			
			Для Каждого Выборка из Результат Цикл
				
				ТекущийОтбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НакопленныйОтбор);
				Для Каждого Измерение из МассивИзмерений Цикл
					ТекущийОтбор.Вставить(Измерение, Выборка[Измерение]);
				КонецЦикла;
				
				ПервыйЭлемент = Истина;
				СчетчикСтрок = СчетчикСтрок + 1;
				ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
				
				Для Каждого ВыводимаяСтрока из СписокКВыводу Цикл
					
					Если ПервыйЭлемент Тогда
						Область = ОбластьНачало;
					Иначе
						Область = ОбластьДопСекция;
					КонецЕсли;
					
					Значение = Выборка[ВыводимаяСтрока.ИмяИзмерения];
					
					ТекстГруппировки = ТекстГруппировки(Значение,
													ВыводимаяСтрока,
													ПараметрыВывода);
					
					Область.Параметры.Группировка = ТекстГруппировки;
					
					Расшифровка = ПолучитьРасшифровкуГруппировки(
											ВыводимаяСтрока.ФиксированноеЗначение, ТекущийОтбор, СтрокаОтчета);
					
					Область.Параметры.Расшифровка = Расшифровка;
					
					Если ПервыйЭлемент Тогда
						Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
							Область.Параметры.НомерСтроки = СчетчикСтрок;
						КонецЕсли;
						ОбластьВывода = ДокументРезультат.Вывести(Область, Уровень - 1);
					Иначе
						ОбластьВывода = ДокументРезультат.Присоединить(Область, Уровень - 1);
					КонецЕсли;
					
					ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, 
								СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета, Неопределено, ТекущийОтбор, СчетчикСтрок, Неопределено);
					
					ПервыйЭлемент = Ложь;
					
				КонецЦикла;
				
				Если Объединить Тогда
					ОбластьДопСекция.Параметры.Группировка = Неопределено;
					ОбластьДопСекция.Параметры.Расшифровка = Неопределено;
					Для Сч = 1 по Объединить Цикл
						Пустышка = ДокументРезультат.Присоединить(ОбластьДопСекция);
						ДобавитьОбластьОформления(ПараметрыВывода, Пустышка, 
								СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета, Неопределено, ТекущийОтбор, СчетчикСтрок, Неопределено);
					КонецЦикла;
					Пустышка = ДокументРезультат.Область(ОбластьВывода.Верх, 
																ОбластьВывода.Лево + Число(ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок), 
																ОбластьВывода.Верх, 
																ОбластьВывода.Право + Объединить);
					Пустышка.Объединить();
				КонецЕсли;
				
				ВывестиЯчейкиВОтчет(ПараметрыВывода, ОбластьЗначение, СтрокаОтчета, СтруктураКолонок, ТекущийОтбор);
				ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьВывода);
				
				ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, ТекущийОтбор, Уровень + 1, СчетчикСтрок);
				УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
				
			КонецЦикла;
			
		Иначе
		
			ЗначениеПредопределено = Ложь;
			Если СтрокаОтчета.РедактируемыеЗначения = Ложь Тогда
			
				ЭтоФиксКолонка = 
					СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
					
					ЗначениеПредопределено = СтрокаОтчета.ЭтоАналитикаПрочее
									ИЛИ ЭтоФиксКолонка ИЛИ ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение);
			КонецЕсли;
				
			// вывод области
			Если ЗначениеПредопределено Тогда
				
				ДобавленОтбор = Ложь;
				Если Не ЭтоФиксКолонка Тогда
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
					ДобавленОтбор = Истина;
				КонецЕсли;
				
				ВыводитьВОтчет = Истина;
				// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы
				Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					Если СтрокаОтчета.Родитель.Строки[0] = СтрокаОтчета Тогда
						ВыводитьВОтчет = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьВОтчет Тогда
					
					ТекстГруппировки = ТекстГруппировки(СтрокаОтчета.ФиксированноеЗначение,
																СтрокаОтчета,
																ПараметрыВывода);
					
					ОбластьНачало.Параметры.Группировка = ТекстГруппировки;
					Расшифровка = ПолучитьРасшифровкуГруппировки(
													СтрокаОтчета.ФиксированноеЗначение, НакопленныйОтбор, СтрокаОтчета);
					
					ОбластьНачало.Параметры.Расшифровка = Расшифровка;
					СчетчикСтрок = СчетчикСтрок + 1;
					ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
					
					Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
						ОбластьНачало.Параметры.НомерСтроки = СчетчикСтрок;
					КонецЕсли;
					
					ОбластьВывода = ДокументРезультат.Вывести(ОбластьНачало, Уровень - 1);
					ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, СтрокаОтчета.ЭлементОтчета, 
													Неопределено, НакопленныйОтбор, СчетчикСтрок, Неопределено);
					
					Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок;
					Если Объединить Тогда
						ОбластьДопСекция.Параметры.Группировка = Неопределено;
						ОбластьДопСекция.Параметры.Расшифровка = Неопределено;
						Для Сч = 1 по Объединить Цикл
							Пустышка = ДокументРезультат.Присоединить(ОбластьДопСекция);
							ДобавитьОбластьОформления(ПараметрыВывода, Пустышка, СтрокаОтчета.ЭлементОтчета, 
									Неопределено, НакопленныйОтбор, СчетчикСтрок, Неопределено);
						КонецЦикла;
						Пустышка = ДокументРезультат.Область(ОбластьВывода.Верх, 
															ОбластьВывода.Лево + Число(ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок), 
															ОбластьВывода.Верх, 
															ОбластьВывода.Право + Объединить);
						Пустышка.Объединить();
					КонецЕсли;
					
					ВывестиЯчейкиВОтчет(ПараметрыВывода, ОбластьЗначение, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор);
					ДобавитьСтрокуДереваСпискаРедактирования(СтрокаОтчета.ФиксированноеЗначение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьВывода);
					
				КонецЕсли;
				
				ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень + 1, СчетчикСтрок);
				
				Если ВыводитьВОтчет Тогда
					УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
				КонецЕсли;
				
				Если ДобавленОтбор Тогда
					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
				КонецЕсли;
				
			Иначе
				
				Результат = ПолучитьВыборкуЯчеек(ДанныеЯчеек, СтрокаОтчета.ИмяИзмерения,,
												СтрокаОтчета.ЭлементОтчета, НакопленныйОтбор, Истина, ИндексыПоиска);
				
				Для Каждого Выборка из Результат Цикл
					
					Значение = Выборка[СтрокаОтчета.ИмяИзмерения];
					Если Значение = NULL Тогда
						Продолжить; //null группировки не отображаем
					КонецЕсли;
					
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, Значение);
					
					ТекстГруппировки = ТекстГруппировки(Значение,
															СтрокаОтчета,
															ПараметрыВывода);
					
					ОбластьНачало.Параметры.Группировка = ТекстГруппировки;
					Расшифровка = ПолучитьРасшифровкуГруппировки(
											СтрокаОтчета.ФиксированноеЗначение, НакопленныйОтбор, СтрокаОтчета);
					СчетчикСтрок = СчетчикСтрок + 1;
					ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
					
					ОбластьНачало.Параметры.Расшифровка = Расшифровка;
					Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
						ОбластьНачало.Параметры.НомерСтроки = СчетчикСтрок;
					КонецЕсли;
					
					ОбластьВывода = ДокументРезультат.Вывести(ОбластьНачало, Уровень - 1);
					ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, СтрокаОтчета.ЭлементОтчета, 
							Неопределено, НакопленныйОтбор, СчетчикСтрок, Неопределено);
					
					Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок;
					Если Объединить Тогда
						ОбластьДопСекция.Параметры.Группировка = Неопределено;
						ОбластьДопСекция.Параметры.Расшифровка = Неопределено;
						Для Сч = 1 по Объединить Цикл
							Пустышка = ДокументРезультат.Присоединить(ОбластьДопСекция);
							ДобавитьОбластьОформления(ПараметрыВывода, Пустышка, СтрокаОтчета.ЭлементОтчета, 
									Неопределено, НакопленныйОтбор, СчетчикСтрок, Неопределено);
						КонецЦикла;
						Пустышка = ДокументРезультат.Область(ОбластьВывода.Верх, 
															ОбластьВывода.Лево + Число(ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок), 
															ОбластьВывода.Верх, 
															ОбластьВывода.Право + Объединить);
						Пустышка.Объединить();
					КонецЕсли;
					
					ВывестиЯчейкиВОтчет(ПараметрыВывода, ОбластьЗначение, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор);
					ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьВывода);
						
					ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень + 1, СчетчикСтрок);
					УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
					
					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
					
				КонецЦикла;
				
			КонецЕсли; //ЗначениеПредопределено Тогда
			
		КонецЕсли;//Если ВыводитьВместеСПодчиненным
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, ПараметрыДанных,
											ИмяОбласти, РезультатОтражения, АдресХранилища, ВсеСтроки = Ложь) Экспорт
	
	ПараметрыВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	
	СтруктураОписанияОтчета = ПараметрыВидаБюджета.СтруктураОписанияОтчета;
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	СтруктураКолонок = ПараметрыВидаБюджета.СтруктураКолонокТаблицыДанных;
	ПараметрыПериодов = ПреобразоватьПараметрыДанныхВДанныеПериодов(ПараметрыВидаБюджета.СтруктураКолонокТаблицыДанных, ПараметрыДанных);
	
	Если ВсеСтроки = Истина Тогда
		
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
		НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
		
		СтрокиКРасчету = Новый Массив;
		Для Каждого СтрокаТаблицы из НайденныеСтроки Цикл
			
			Если ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки").РасчетЗаполнение <> "пересчет" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.РассчитанСумма = Ложь;
			СтрокаТаблицы.РассчитанКоличество = Ложь;
			СтрокаТаблицы.РассчитанСуммаВал = Ложь;
			СтрокиКРасчету.Добавить(СтрокаТаблицы);
			
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ИмяОбласти) = Тип("Строка") Тогда
			
			СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиСумма");
			Если СтрокаРасчета <> Неопределено Тогда
				СтрокаРасчета.Сумма = РезультатОтражения.Сумма;
				СтрокаРасчета.СуммаВал = РезультатОтражения.СуммаВВалюте;
			Иначе
				СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиКоличество");
				Если СтрокаРасчета <> Неопределено Тогда
					СтрокаРасчета.Количество = РезультатОтражения.Количество;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ИмяОбласти) = Тип("Структура") Тогда
			
			СтрокиРасчета = ДанныеЯчеек.НайтиСтроки(ИмяОбласти);
			Если Не СтрокиРасчета.Количество() Тогда
				// При вводе списком ввели некорректную
				// комбинацию измерений
				Возврат Неопределено;
			КонецЕсли;
			
			СтрокаРасчета = СтрокиРасчета[0];
			СтрокаРасчета.Сумма = РезультатОтражения.Сумма;
			СтрокаРасчета.СуммаВал = РезультатОтражения.СуммаВВалюте;
			СтрокаРасчета.Количество = РезультатОтражения.Количество;
			
		КонецЕсли;
		
		Если СтрокаРасчета = Неопределено Тогда
			// Случай, когда строки нет в данных ячеек
			// например, когда это - добавленная через список строка
			Возврат Неопределено;
		КонецЕсли;
		
		// только связанные с текущей
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Истина, СтрокаРасчета.Строка, СтрокаРасчета.Колонка);
		СтрокаСтруктурыЯчеек = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска)[0];
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаСтруктурыЯчеек.ИндексСтроки, "ИндексСтроки");
		
		СтрокиКРасчету = Новый Массив;
		Для Каждого СвязаннаяЯчейка из ПараметрыЯчейки.СвязанныеЯчейки Цикл
			
			СтруктураПоиска = Новый Структура(СвязаннаяЯчейка.ОбщиеИзмерения);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасчета);
			СтруктураПоиска.Вставить("Строка", СвязаннаяЯчейка.Строка);
			СтруктураПоиска.Вставить("Колонка", СвязаннаяЯчейка.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицы из НайденныеСтроки Цикл
				СтрокаТаблицы.РассчитанСумма = Ложь;
				СтрокаТаблицы.РассчитанКоличество = Ложь;
				СтрокаТаблицы.РассчитанСуммаВал = Ложь;
				СтрокиКРасчету.Добавить(СтрокаТаблицы);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИмяОбласти");
	ТаблицаИзменений.Колонки.Добавить("Значение");
	ТаблицаИзменений.Колонки.Добавить("Расшифровка");
	
	ЕстьВалютаВывода = СтруктураЯчеек.Колонки.Найти("ВалютаВывода") <> Неопределено;
	
	Для Каждого СтрокаТаблицы из СтрокиКРасчету Цикл
		
		Расшифровка = Новый Структура;
		Для Каждого Периодичность из СтруктураКолонок.Периодичности Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы["Период" + Периодичность]) Тогда
				Расшифровка.Вставить("Период" + Периодичность, СтрокаТаблицы["Период" + Периодичность]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение из СтруктураКолонок.Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, СтрокаТаблицы[Измерение]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Поле из СтруктураКолонок.ВидыАналитик Цикл
			Измерение = ИмяПоляБюджетногоОтчета(Поле);
			Если ЗначениеЗаполнено(СтрокаТаблицы[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, СтрокаТаблицы[Измерение]);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьВалютаВывода И ЗначениеЗаполнено(СтрокаТаблицы.ВалютаВывода) Тогда
			Расшифровка.Вставить("ВалютаВывода", СтрокаТаблицы.ВалютаВывода);
		КонецЕсли;
		Расшифровка.Вставить("СтатьяБюджетов", СтрокаТаблицы.СтатьяБюджетов);
		
		РасшифровкаСумма = Расшифровка;
		РасшифровкаКоличество = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасшифровкаСумма);
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			РасшифровкаКоличество.Вставить("ИмяПоказателя", "Количество");
			Количество = РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаТаблицы, "Количество", Истина);
			НовоеИзменение = ТаблицаИзменений.Добавить();
			НовоеИзменение.ИмяОбласти = СтрокаТаблицы.ИмяОбластиКоличество;
			// В данные документа для ввода значение связанной ячейки должно попасть
			// с положительным знаком
			НовоеИзменение.Значение = Количество * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
			НовоеИзменение.Расшифровка = РасшифровкаКоличество;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма Тогда
			РасшифровкаСумма.Вставить("ИмяПоказателя", "Сумма");
			Сумма = РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаТаблицы, "Сумма", Истина);
			НовоеИзменение = ТаблицаИзменений.Добавить();
			НовоеИзменение.ИмяОбласти = СтрокаТаблицы.ИмяОбластиСумма;
			// В данные документа для ввода значение связанной ячейки должно попасть
			// с положительным знаком
			НовоеИзменение.Значение = Сумма * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
			НовоеИзменение.Расшифровка = РасшифровкаСумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("Результат, ПараметрыВыводаВидаБюджета, ДанныеЯчеек", ТаблицаИзменений, ПараметрыВидаБюджета, ДанныеЯчеек);
	Возврат Результат;
	
КонецФункции

Функция РассчитатьИзмененияВОтчете(ПараметрыЯчеек, ПредыдущиеДанныеЯчеек, НовыеДанныеЯчеек, ПараметрыПериодов, ИндексыПоиска)
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИмяОбласти");
	ТаблицаИзменений.Колонки.Добавить("Значение");
	
	Для Каждого Индекс из ИндексыПоиска Цикл
		НовыеДанныеЯчеек.Индексы.Добавить(Индекс.Ключ);
	КонецЦикла;
	
	// пересчитаем строки
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
	НайденныеСтроки = НовыеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаНовыхДанных из НайденныеСтроки Цикл
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаНовыхДанных.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.ФлагСумма Тогда
			РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Сумма");
		КонецЕсли;
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Количество");
		КонецЕсли;
		Если ПараметрыЯчейки.ФлагЗначение Тогда
			РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Значение");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
	НайденныеСтроки = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ЯчейкаОтчета из НайденныеСтроки Цикл
		
		Если ЯчейкаОтчета.ОтборЯчейки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЯчейкаОтчета.ОтборЯчейки);
		ОтборЯчейки = Новый Структура;
		Для Каждого Измерение из МассивОтбора Цикл
			ОтборЯчейки.Вставить(Измерение, ЯчейкаОтчета[Измерение]);
		КонецЦикла;
		
		НайденныеНовыеСтроки = НовыеДанныеЯчеек.НайтиСтроки(ОтборЯчейки);
		Если Не НайденныеНовыеСтроки.Количество() Тогда
			// При редактировании списком может быть, что строка была изменена и предыдущая
			// в новых данных отсутствует
			Продолжить;
		КонецЕсли;
		
		СтрокаНовыхДанных = НайденныеНовыеСтроки[0];
		ЗаполняемыеПоля = "ОтборЯчейки, ИмяОбластиЗначение, ИмяОбластиКоличество, ИмяОбластиСумма";
		ЗаполнитьЗначенияСвойств(СтрокаНовыхДанных, ЯчейкаОтчета, ЗаполняемыеПоля);
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(ЯчейкаОтчета.ИндексСтроки, "ИндексСтроки");
		
		Если ПараметрыЯчейки.РасчетЗаполнение <> "итог" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество
			И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиКоличество) Тогда
			
			НовоеКоличество = РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Количество", Истина);
			СтароеКоличество = РассчитатьЗначениеЯчейки(ПредыдущиеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ЯчейкаОтчета, "Количество", Истина);
			
			Если НовоеКоличество <> СтароеКоличество Тогда
				НовоеИзменение = ТаблицаИзменений.Добавить();
				НовоеИзменение.ИмяОбласти = ЯчейкаОтчета.ИмяОбластиКоличество;
				НовоеИзменение.Значение = НовоеКоличество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма
			И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиСумма) Тогда
			
			НоваяСумма = РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Сумма", Истина);
			СтараяСумма = РассчитатьЗначениеЯчейки(ПредыдущиеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ЯчейкаОтчета, "Сумма", Истина);
			
			Если НоваяСумма <> СтараяСумма Тогда
				НовоеИзменение = ТаблицаИзменений.Добавить();
				НовоеИзменение.ИмяОбласти = ЯчейкаОтчета.ИмяОбластиСумма;
				НовоеИзменение.Значение = НоваяСумма;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагЗначение
			И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиЗначение) Тогда
			
			НовоеЗначение = РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Значение", Истина);
			СтароеЗначение = РассчитатьЗначениеЯчейки(ПредыдущиеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ЯчейкаОтчета, "Значение", Истина);
			
			Если НовоеЗначение <> СтароеЗначение Тогда
				НовоеИзменение = ТаблицаИзменений.Добавить();
				НовоеИзменение.ИмяОбласти = ЯчейкаОтчета.ИмяОбластиЗначение;
				НовоеИзменение.Значение = НовоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция ВывестиДанныеВОтчет(ПараметрыВывода)
	
	ДеревоВывода 		= ПараметрыВывода.ДеревоВывода;
	ВидБюджета 			= ПараметрыВывода.ВидБюджета;
	НачалоПериода 		= ПараметрыВывода.НачалоПериода;
	КонецПериода 		= ПараметрыВывода.КонецПериода;
	ДляРедактирования 	= ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	
	ДокументРезультат 	= Новый ТабличныйДокумент;
	МакетОформления 	= ПолучитьОбщийМакет("БюджетныйОтчет");
	СтруктураОбластей 	= Новый Структура;
	
	СтруктураОбластей.Вставить("ЗаголовокОтчета", 	МакетОформления.ПолучитьОбласть("ЗаголовокОтчета"));
	СтруктураОбластей.Вставить("Текст", 			МакетОформления.ПолучитьОбласть("Текст"));
	СтруктураОбластей.Вставить("ЗаголовокТаблицы", 	МакетОформления.ПолучитьОбласть("ЗаголовокТаблицы"));
	СтруктураОбластей.Вставить("ПустаяСтрока", 		МакетОформления.ПолучитьОбласть("ПустаяСтрока"));
	
	МассивВариантовСтрок = Новый Массив;
	МассивВариантовСтрок.Добавить("");
	МассивВариантовСтрок.Добавить("НумерацияСтрок");
	СтруктураВариантовКолонок = Новый Структура("НачалоТаблицы, ДополнительнаяСекция, ГруппировкаКолонок1, ГруппировкаКолонок2, ГруппировкаКолонок3");
	
	ОтрабатываетсяУровней = 8;
	
	Для Каждого ВариантКолонки из СтруктураВариантовКолонок Цикл
	
		СтруктураОбластей.Вставить("Шапка" + ВариантКолонки.Ключ,
						МакетОформления.ПолучитьОбласть("Шапка|" + ВариантКолонки.Ключ));
		
		СтруктураОбластей.Вставить("НумерацияКолонок" + ВариантКолонки.Ключ,
						МакетОформления.ПолучитьОбласть("НумерацияКолонок|" + ВариантКолонки.Ключ));
	
	КонецЦикла;
		
	СтруктураОбластей.Вставить("ШапкаНачалоТаблицыНумерацияСтрок",
					МакетОформления.ПолучитьОбласть("ШапкаНумерацияСтрок|НачалоТаблицы"));
	
	СтруктураОбластей.Вставить("НумерацияКолонокНачалоТаблицыНумерацияСтрок",
					МакетОформления.ПолучитьОбласть("НумерацияКолонокНумерацияСтрок|НачалоТаблицы"));
	
	Для Каждого ВариантСтроки из МассивВариантовСтрок Цикл
		
		Для Сч = 1 по ОтрабатываетсяУровней - 1 Цикл
			СтруктураОбластей.Вставить("Группировка" + Сч + "НачалоТаблицы" + ВариантСтроки, 
										МакетОформления.ПолучитьОбласть("Группировка" + Сч + ВариантСтроки + "|НачалоТаблицы"));
		КонецЦикла;
		
		Для Сч = 1 по ОтрабатываетсяУровней Цикл
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналНачалоТаблицы" + ВариантСтроки, 
										МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал" + ВариантСтроки + "|НачалоТаблицы"));
		КонецЦикла;
		
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней - 1 Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ДополнительнаяСекция", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ДополнительнаяСекция"));
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналДополнительнаяСекция", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ДополнительнаяСекция"));
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней - 1 Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "Значение", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ГруппировкаКолонок1"));
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналЗначение", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ГруппировкаКолонок1"));
	КонецЦикла;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	КоличествоТаблиц = 0;
	КоличествоСтрокСверху = 0;
	
	ПараметрыВывода.Вставить("ДокументРезультат", ДокументРезультат);
	ПараметрыВывода.Вставить("СтруктураОбластей", СтруктураОбластей);
	ПараметрыВывода.Вставить("ДляРедактирования", ДляРедактирования);
	
	ПредыдущееИмяИзмерения = "";
	ПредыдущийЗаголовок = "";
	ПараметрыТаблицы = Неопределено;
	
	Для Каждого ЭлементВывода из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "ТекстовыйБлок" Тогда
			
			УстановитьПараметрыВНаименованииДляПечати(ЭлементВывода.НаименованиеДляПечати, ВидБюджета, НачалоПериода, КонецПериода);
			ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода);
			КоличествоСтрокСверху = КоличествоСтрокСверху + 3;
			ПредыдущийЗаголовок = ЭлементВывода.НаименованиеДляПечати;
			
		ИначеЕсли ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			
			Если ЭлементВывода.ВыводитьЗаголовокВОтчет = Истина Тогда
				ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода);
				КоличествоСтрокСверху = КоличествоСтрокСверху + 3;
				ПредыдущийЗаголовок = ЭлементВывода.НаименованиеДляПечати;
			ИначеЕсли ПредыдущееИмяИзмерения = "Таблица" Тогда
				ДокументРезультат.Вывести(СтруктураОбластей.ПустаяСтрока, 0);
				КоличествоСтрокСверху = КоличествоСтрокСверху + 1;
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
			
			СтруктураКолонок = ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ПараметрыВывода.ИндексыПоискаИзмерений, 
																ЭлементВывода.Строки.Найти("Колонки"));
			КоличествоСтрокСверху = КоличествоСтрокСверху + ГлубинаДерева(СтруктураКолонок.Строки) + 1;
			
			СтрокиОтчета = ЭлементВывода.Строки.Найти("Строки");
			СложнаяТаблица = ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
			ПараметрыТаблицы = ЭлементВывода.ПараметрыТаблицы;
			
			ПараметрыВывода.Вставить("СложнаяТаблица", СложнаяТаблица);
			ПараметрыВывода.Вставить("СтруктураКолонок", СтруктураКолонок);
			ПараметрыВывода.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
			Если ПараметрыТаблицы.Свойство("ДанныеОтчетаДляОформления") Тогда
				ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", ПараметрыТаблицы.ДанныеОтчетаДляОформления.СкопироватьКолонки());
			Иначе
				ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", Неопределено);
			КонецЕсли;
			
			ВывестиШапкуТаблицыВОтчет(ПараметрыВывода, ДокументРезультат, СтруктураОбластей, СтруктураКолонок, ЭлементВывода);
			
			Если ДляРедактирования Тогда
				КорневаяСтрока = ПараметрыВывода.ДеревоСтрокСпискаРедактирования.Строки.Добавить();
				Если ПустаяСтрока(ПредыдущийЗаголовок) Тогда
					КорневаяСтрока.Представление = НСтр("en='Budgete item';ru='Статьи бюджета'");
				Иначе
					КорневаяСтрока.Представление = ПредыдущийЗаголовок;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементВывода.ВидЭлемента) Тогда
					КорневаяСтрока.Картинка = 9;
				Иначе
					КорневаяСтрока.Картинка = 21;
				КонецЕсли;
				КорневаяСтрока.Уровень = 1;
				КорневаяСтрока.ИДТаблицы = Новый УникальныйИдентификатор;
				ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", КорневаяСтрока);
				КолонкиТаблиц = Неопределено;
				Если Не ПараметрыВывода.Свойство("КолонкиТаблиц", КолонкиТаблиц) Тогда
					КолонкиТаблиц = Новый Соответствие;
				КонецЕсли;
				КолонкиТаблиц.Вставить(КорневаяСтрока.ИДТаблицы, СтруктураКолонок);
				ПараметрыВывода.Вставить("КолонкиТаблиц", КолонкиТаблиц);
			КонецЕсли;
			
			ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокиОтчета);
			
			ПредыдущийЗаголовок = "";
			
		КонецЕсли;
		ПредыдущееИмяИзмерения = ЭлементВывода.ИмяИзмерения;
		
	КонецЦикла;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	Если КоличествоТаблиц = 1 Тогда
		ДокументРезультат.ФиксацияСверху = КоличествоСтрокСверху;
		ДокументРезультат.ФиксацияСлева = 2 + ПараметрыТаблицы.КоличествоДополнительныхКолонок;
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода)
	
	Если ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета Тогда
		Область = СтруктураОбластей["ЗаголовокОтчета"];
		Область.Параметры.ЗаголовокОтчета = ЭлементВывода.НаименованиеДляПечати;
	ИначеЕсли ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
		ИЛИ ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
		ИЛИ ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
		Область = СтруктураОбластей["ЗаголовокТаблицы"];
		Область.Параметры.ЗаголовокТаблицы = ЭлементВывода.НаименованиеДляПечати;
	Иначе
		Область = СтруктураОбластей["Текст"];
		Область.Параметры.Текст  = ЭлементВывода.НаименованиеДляПечати;
	КонецЕсли;
	
	ДокументРезультат.Вывести(Область, 0);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДанныхСтруктурыЯчеек

Функция ТаблицаПериодовПоИсточникамДанных(ОписаниеОтчета, ИсточникиПериодовГруппировок, НачалоПериода, КонецПериода, ГраницаФактДанных, ТекстПериодов)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТаблицаПериодов.Колонки.Добавить("Период" + Измерение, Новый ОписаниеТипов("Дата"));
	КонецЦикла;
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(ОписаниеОтчета.Периодичности);
	МассивПериодов = ПолучитьМассивПериодов(НачалоПериода, КонецПериода, МинимальнаяПериодичность);
	
	Для Каждого Период из МассивПериодов Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
			НоваяСтрока["Период" + Периодичность] = БюджетированиеКлиентСервер.ДатаНачалаПериода(Период, Периодичность);
		КонецЦикла;
	КонецЦикла;
	
	ПериодыПервогоЗапроса = СокрЛП(СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодов"));
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|" + Лев(ПериодыПервогоЗапроса, СтрДлина(ПериодыПервогоЗапроса) - 1) + "
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|";
	
	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		| ТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Отчет,
		| ТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Соединение,";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	"""" КАК ИД_ИсточникаПериодовГруппировки
	|
	|	ИЗ ТаблицаПериодов
	|";
		
	Для Каждого Источник из ИсточникиПериодовГруппировок Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|";
		
		Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
			ТекстЗапроса = ТекстЗапроса + "
			| ЛеваяТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Отчет,";
			ТекстЗапроса = ТекстЗапроса + "
			| ПраваяТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Соединение,";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|""" + Источник.Идентификатор + """ КАК ИД_ИсточникаПериодовГруппировки
		|
		|ИЗ ТаблицаПериодов КАК ЛеваяТаблицаПериодов
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ПраваяТаблицаПериодов
		|ПО ПраваяТаблицаПериодов.Период" + МинимальнаяПериодичность + 
			" МЕЖДУ " + Источник.ВыражениеНачалоПериодаГруппировки + " И " + Источник.ВыражениеКонецПериодаГруппировки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВспомогательныеДанныеРасчетаДанныхЯчеек(НачалоПериода, КонецПериода, ГраницаФактДанных, ОписаниеОтчета, 
										ИсточникиПериодовГруппировок, КэшДанных, РежимФормирования)
	Перем ВспомогательныеДанные;
	
	Если КэшДанных.Свойство("ВспомогательныеДанныеСоединенияСтруктурыСДанными", ВспомогательныеДанные) Тогда
		Возврат ВспомогательныеДанные;
	КонецЕсли;
	
	ОсновныеЭлементы = 
	
	"<ИмяТаблицы>.ИндексСтроки,
	|<ИмяТаблицы>.ОсновнойЭлемент,
	|<ИмяТаблицы>.Строка,
	|<ИмяТаблицы>.Колонка,
	|<ИмяТаблицы>.ПорядокРасчетаОперанда,
	|<ИмяТаблицы>.ВидЭлемента,
	|<ИмяТаблицы>.ВидОперанда,
	|<ИмяТаблицы>.СтатьяБюджетов,
	|<ИмяТаблицы>.ПоказательБюджетов,
	|";
	
	ОсновныеФлаги = 
	
	"<ИмяТаблицы>.ФлагСтатьяБюджетов,
	|<ИмяТаблицы>.ФлагПоказательБюджетов,";
	
	ТекстИзмерений = "";
	ТекстФлагиИзмерений = "";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		ТекстИзмерений = ТекстИзмерений + "
		|" + "<ИмяТаблицы>." + Измерение + " КАК " + Измерение + ",
		|";
		ТекстФлагиИзмерений = ТекстФлагиИзмерений + "
		|" + "<ИмяТаблицы>.Флаг" + Измерение + " КАК Флаг" + Измерение + ",
		|";
	КонецЦикла;
	
	ТекстАналитики = "";
	ТекстФлагиАналитики = "";
	ТекстРодителиАналитик = "";
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстАналитики = ТекстАналитики + "
		|" + "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля + ",
		|";
		ТекстФлагиАналитики = ТекстФлагиАналитики + "
		|" + "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля + ",
		|";
		ТекстРодителиАналитик = ТекстРодителиАналитик + "<ИмяТаблицы>.Родитель" + ИмяПоля + " КАК Родитель" + ИмяПоля + ",
		|";
	КонецЦикла;
	
	ТекстПериодов = "";
	ТекстФлагиПериодов = "";
	ТекстВыраженияПериодов = "";
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстПериодов = ТекстПериодов + "
		|" + "<ИмяТаблицы>.Период" + Измерение + " КАК Период" + Измерение + ",
		|";
		ТекстФлагиПериодов = ТекстФлагиПериодов + "
		|" + "<ИмяТаблицы>.ФлагПериод" + Измерение + " КАК ФлагПериод" + Измерение + ",
		|";
		ТекстВыраженияПериодов = ТекстВыраженияПериодов + "
		|" + "<ИмяТаблицы>.ВыражениеПериода" + Измерение + " КАК ВыражениеПериода" + Измерение + ",
		|";
	КонецЦикла;
	
	ЕстьПериодичность = ОписаниеОтчета.Периодичности.Количество();
	
	ТаблицаПериодов = Неопределено;
	Если ЕстьПериодичность Тогда
		
		ТаблицаПериодов = ТаблицаПериодовПоИсточникамДанных(ОписаниеОтчета, ИсточникиПериодовГруппировок, 
																НачалоПериода, КонецПериода, ГраницаФактДанных, ТекстПериодов);
		
	КонецЕсли;
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("ОсновныеЭлементы", 			ОсновныеЭлементы);
	ВспомогательныеДанные.Вставить("ОсновныеФлаги", 			ОсновныеФлаги);
	ВспомогательныеДанные.Вставить("ТекстИзмерений", 			ТекстИзмерений);
	ВспомогательныеДанные.Вставить("ТекстФлагиИзмерений", 		ТекстФлагиИзмерений);
	ВспомогательныеДанные.Вставить("ТекстАналитики", 			ТекстАналитики);
	ВспомогательныеДанные.Вставить("ТекстФлагиАналитики", 		ТекстФлагиАналитики);
	ВспомогательныеДанные.Вставить("ТекстРодителиАналитик", 	ТекстРодителиАналитик);
	ВспомогательныеДанные.Вставить("ТекстПериодов", 			ТекстПериодов);
	ВспомогательныеДанные.Вставить("ТекстФлагиПериодов", 		ТекстФлагиПериодов);
	ВспомогательныеДанные.Вставить("ТекстВыраженияПериодов", 	ТекстВыраженияПериодов);
	ВспомогательныеДанные.Вставить("ТаблицаПериодов", 			ТаблицаПериодов);
	ВспомогательныеДанные.Вставить("РежимФормирования", 		РежимФормирования);
	
	КэшДанных.Вставить("ВспомогательныеДанныеСоединенияСтруктурыСДанными", ВспомогательныеДанные);
	
	Возврат ВспомогательныеДанные;
	
КонецФункции

Функция ФиксированныеЗначенияОтчета(Запрос, ИмяТаблицы, ОписаниеОтчета, КэшДанных, ПроверитьВКэше)
	Перем Таблица;
	
	Если ПроверитьВКэше Тогда
		Если КэшДанных.Свойство("СтруктураЯчеек_ФиксированныеЗначенияОтчета", Таблица) Тогда
			Возврат Таблица;
		КонецЕсли;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоля");
	Таблица.Колонки.Добавить("Родитель");
	Таблица.Колонки.Добавить("Список");
	
	Если Не ОписаниеОтчета.ВидыАналитик.Количество() Тогда
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = "";
	Для Каждого ВидАналитики из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТекстЗапроса = ТекстЗапроса + 
		?(ПустаяСтрока(ТекстЗапроса), "", "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""" + ИмяПоля + """ КАК ИмяПоля,
		|	Родитель" + ИмяПоля + " КАК Родитель,
		|	" + ИмяПоля + " КАК Значение
		|ИЗ " + ИмяТаблицы + "
		|
		|";
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса + " ИТОГИ ПО ИмяПоля, Родитель";
	
	ВыборкаИмяПоля = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИмяПоля.Следующий() Цикл
		ВыборкаРодитель = ВыборкаИмяПоля.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРодитель.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаРодитель.Родитель) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоля = ВыборкаРодитель.ИмяПоля;
			НоваяСтрока.Родитель = ВыборкаРодитель.Родитель;
			НоваяСтрока.Список = Новый СписокЗначений;
			ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать();
			ТипыЗначений = Новый Массив;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Значение) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока.Список.Добавить(ВыборкаДетальныеЗаписи.Значение);
				Тип = ТипЗнч(ВыборкаДетальныеЗаписи.Значение);
				Если ТипыЗначений.Найти(Тип) = Неопределено Тогда
					ТипыЗначений.Добавить(Тип);
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока.Список.ТипЗначения = Новый ОписаниеТипов(ТипыЗначений);
		КонецЦикла;
	КонецЦикла;
	
	СписокСвернутый = Таблица.СкопироватьКолонки();
	Пока Таблица.Количество() Цикл
		СтрокаРаботы = Таблица[0];
		Нашли = Ложь;
		СтрокиОбработки = СписокСвернутый.НайтиСтроки(Новый Структура("ИмяПоля", СтрокаРаботы.ИмяПоля));
		Для Каждого СтрокаСписка из СтрокиОбработки Цикл
			Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СтрокаСписка.Список, СтрокаРаботы.Список) Тогда
				
				СтрокаСписка.Родитель.Добавить(СтрокаРаботы.Родитель);
				Таблица.Удалить(0);
				Нашли = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		Если Не Нашли Тогда
			СтрокаСписка = СписокСвернутый.Добавить();
			СтрокаСписка.Родитель = Новый СписокЗначений;
			СтрокаСписка.Родитель.Добавить(СтрокаРаботы.Родитель);
			ЗаполнитьЗначенияСвойств(СтрокаСписка, СтрокаРаботы, "ИмяПоля, Список");
			Таблица.Удалить(0);
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверитьВКэше Тогда
		КэшДанных.Вставить("СтруктураЯчеек_ФиксированныеЗначенияОтчета", СписокСвернутый);
	КонецЕсли;
	
	Возврат СписокСвернутый;
	
КонецФункции

Процедура ДополнитьВспомогательныеДанныеСтатьямиПоказателямиЯчеек(Запрос, ВспомогательныеДанные, КэшДанных)
	
	Если КэшДанных.Свойство("СоответствиеСтатейПоказателейЯчейкам") Тогда
		ВспомогательныеДанные.Вставить("СоответствиеСтатейПоказателейЯчейкам", КэшДанных.СоответствиеСтатейПоказателейЯчейкам);
		Возврат;
	КонецЕсли;
	
	ЗначенияПоСтрокам = Новый Запрос();
	ЗначенияПоСтрокам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗначенияПоСтрокам.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.СтатьяБюджетов,
	|	СтруктураЯчеек.ПоказательБюджетов
	|ПОМЕСТИТЬ ДанныеСтруктурыЯчеек
	|ИЗ
	|	СтруктураЯчеек КАК СтруктураЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктураЯчеек.Строка КАК Строка,
	|	СтруктураЯчеек.СтатьяБюджетов КАК ЗначениеОтбора,
	|	""СтатьяБюджетов"" КАК ТипПоля
	|ИЗ
	|	ДанныеСтруктурыЯчеек КАК СтруктураЯчеек
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.ПоказательБюджетов,
	|	""ПоказательБюджетов""
	|ИЗ
	|	ДанныеСтруктурыЯчеек КАК СтруктураЯчеек
	|ИТОГИ ПО
	|	Строка";

	ТаблицаПолей = ЗначенияПоСтрокам.Выполнить().Выгрузить();
	ТаблицаПолей.Индексы.Добавить("Строка, ТипПоля");
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Строка");
	Таблица.Колонки.Добавить("СтатьяБюджетов");
	Таблица.Колонки.Добавить("ПоказательБюджетов");
	
	СписокСтрок = ТаблицаПолей.Скопировать(,"Строка");
	СписокСтрок.Свернуть("Строка");
	
	Для Каждого Строка из СписокСтрок Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Строка = Строка.Строка;
		
		Поля = Новый Структура("СтатьяБюджетов, ПоказательБюджетов");
		Для Каждого КлючИЗначение из Поля Цикл
			
			СписокЗначений = ТаблицаПолей.Скопировать(Новый Структура("Строка, ТипПоля", Строка.Строка, КлючИЗначение.Ключ));
			СписокЗначений.Свернуть("ЗначениеОтбора");
			
			Список = Новый СписокЗначений;
			Для Каждого ЭлементСписка из СписокЗначений Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.ЗначениеОтбора) Тогда
					Список.Добавить(ЭлементСписка.ЗначениеОтбора);
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока[КлючИЗначение.Ключ] = Список;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСвернутый = Таблица.СкопироватьКолонки();
	Пока Таблица.Количество() Цикл
		СтрокаРаботы = Таблица[0];
		Нашли = Ложь;
		Для Каждого СтрокаСписка из СписокСвернутый Цикл
			Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СтрокаСписка.СтатьяБюджетов, СтрокаРаботы.СтатьяБюджетов)
				И ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СтрокаСписка.ПоказательБюджетов, СтрокаРаботы.ПоказательБюджетов)
				Тогда
				
				СтрокаСписка.Строка.Добавить(СтрокаРаботы.Строка);
				Таблица.Удалить(0);
				Нашли = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		Если Не Нашли Тогда
			СтрокаСписка = СписокСвернутый.Добавить();
			СтрокаСписка.Строка = Новый СписокЗначений;
			СтрокаСписка.Строка.Добавить(СтрокаРаботы.Строка);
			ЗаполнитьЗначенияСвойств(СтрокаСписка, СтрокаРаботы, "СтатьяБюджетов, ПоказательБюджетов");
			Таблица.Удалить(0);
		КонецЕсли;
	КонецЦикла;
	
	КэшДанных.Вставить("СоответствиеСтатейПоказателейЯчейкам", СписокСвернутый);
	ВспомогательныеДанные.Вставить("СоответствиеСтатейПоказателейЯчейкам", КэшДанных.СоответствиеСтатейПоказателейЯчейкам);
	
КонецПроцедуры

Функция ВыполнитьПредварительноеСоединениеСтруктурыСДанными(ОписаниеОтчета, Запрос, ВспомогательныеДанные, 
																ИмяТаблицы, ПоляИсточников, ЗначенияРодителей)
																
	Если ВспомогательныеДанные.РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстСоединенияПоСтрокам = "ВЫБОР ";
	Для Каждого СтрокаТаблицы из ВспомогательныеДанные.СоответствиеСтатейПоказателейЯчейкам Цикл
		
		Индекс = ВспомогательныеДанные.СоответствиеСтатейПоказателейЯчейкам.Индекс(СтрокаТаблицы);
		ТекстСоединенияПоСтрокам = ТекстСоединенияПоСтрокам + " КОГДА СтруктураЯчеек.Строка В (&Строка" + Индекс + ")
		|	ТОГДА 
		|		ТаблицаДанных.СтатьяБюджетов В (&СписокСтатьяБюджетов" + Индекс + ")
		|		ИЛИ ТаблицаДанных.ПоказательБюджетов В (&СписокПоказательБюджетов" + Индекс + ")
		|		";
		
		Поля = Новый Структура("СтатьяБюджетов, ПоказательБюджетов");
		Запрос.УстановитьПараметр("Строка" + Индекс, СтрокаТаблицы.Строка);
		Для Каждого КлючИЗначение из Поля Цикл
			Запрос.УстановитьПараметр("Список" + КлючИЗначение.Ключ + Индекс, СтрокаТаблицы[КлючИЗначение.Ключ]);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстСоединенияПоСтрокам = ТекстСоединенияПоСтрокам + " КОНЕЦ";
	
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ОсновныеЭлементы 		= ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги 			= ВспомогательныеДанные.ОсновныеФлаги;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов 		= ВспомогательныеДанные.ТекстФлагиПериодов;
	ТекстВыраженияПериодов 	= ВспомогательныеДанные.ТекстВыраженияПериодов;
	
	// Подготовка структуры ячеек с данными
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|" + СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		 СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		 СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		 СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
		 СтрЗаменить(ТекстВыраженияПериодов, "<ИмяТаблицы>", "СтруктураЯчеек");
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СтруктураЯчеек.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СтруктураЯчеек.Флаг" + Измерение + ",
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""документ""
			|		И Не ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ КАК " + Измерение + ",
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""документ"" ТОГДА
			|		""отобрать""
			|	ИНАЧЕ
			|		СтруктураЯчеек.Флаг" + Измерение + "
			|	КОНЕЦ КАК Флаг" + Измерение + ",
			|";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ""
		|		И Не ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ КАК " + ИмяПоля + ",
		|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"" ТОГДА
		|		""отобрать""
		|	ИНАЧЕ
		|		СтруктураЯчеек.Флаг" + ИмяПоля + "
		|	КОНЕЦ КАК Флаг" + ИмяПоля + ",
		|	СтруктураЯчеек.Родитель" + ИмяПоля + " КАК Родитель" + ИмяПоля + ",
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	СтруктураЯчеек.ИД_Источника, СтруктураЯчеек.ИД_ИсточникаПериодов
	|
	|ПОМЕСТИТЬ СтруктураЯчеекСДанными
	|
	|	ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанных
	|
	|	ПО ТаблицаДанных.ИД_Источника = ""документ""
	|		И " + ТекстСоединенияПоСтрокам;
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	И (НЕ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|		ИЛИ СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
		|";
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		НайденныеСтроки = ЗначенияРодителей.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПоля));
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	(СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отобрать"" И
		|			СтруктураЯчеек." + ИмяПоля + " = ТаблицаДанных." + ИмяПоля + ")
		|		ИЛИ ( (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""прочие"" ИЛИ
		|				СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")";
		
		Если НайденныеСтроки.Количество() Тогда
			ТекстПроверкиВхожденияВРодителя = " И
			|				ВЫБОР";
			
			ИндексПараметра = 0;
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ИндексПараметра = ИндексПараметра + 1;
				ТекстПроверкиВхожденияВРодителя = ТекстПроверкиВхожденияВРодителя + "
				|				КОГДА СтруктураЯчеек.Родитель" + ИмяПоля + " В (&Родитель" + ИмяПоля + ИндексПараметра + ") ТОГДА
				|					ВЫБОР КОГДА (ТаблицаДанных." + ИмяПоля + " В (&Список" + ИмяПоля + ИндексПараметра + ")) 
				|						ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА
				|					КОНЕЦ";
				Запрос.УстановитьПараметр("Родитель" + ИмяПоля + ИндексПараметра, НайденнаяСтрока.Родитель);
				Запрос.УстановитьПараметр("Список" + ИмяПоля + ИндексПараметра, НайденнаяСтрока.Список);
			КонецЦикла;
			ТекстПроверкиВхожденияВРодителя = ТекстПроверкиВхожденияВРодителя + " КОНЕЦ = ИСТИНА";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстПроверкиВхожденияВРодителя + "
		|			)	
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = """"
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отчет""
		|		)
		|
		|";
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ИмяТаблицы = "СтруктураЯчеекСДанными";
	
	Возврат Истина;
	
КонецФункции

Процедура РазбитьЯчейкиПоПериодам(ОписаниеОтчета, Запрос, ВспомогательныеДанные, ИмяТаблицы)
	
	Если Не ОписаниеОтчета.Периодичности.Количество() Тогда
		Возврат
	КонецЕсли;
	
	ОсновныеЭлементы 		= ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги 			= ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений 			= ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений 	= ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики 			= ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики 	= ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик 	= ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов 		= ВспомогательныеДанные.ТекстФлагиПериодов;
	ТаблицаПериодов 		= ВспомогательныеДанные.ТаблицаПериодов;

	ТекстПолей = СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодов");
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|
	|";
	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаПериодов.Период" + Периодичность + "Отчет,
		|	ТаблицаПериодов.Период" + Периодичность + "Соединение,";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО ИД_ИсточникаПериодовГруппировки
	|
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|" + СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек");
		
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПериод" + Измерение + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.ФлагПериод" + Измерение + " = ""отчет"" ТОГДА
		|		ТаблицаПериодов.Период" + Измерение + "Отчет
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Период" + Измерение + ",
		|";
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПериод" + Измерение + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.ФлагПериод" + Измерение + " = ""отчет"" ТОГДА
		|		ТаблицаПериодов.Период" + Измерение + "Соединение
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Период" + Измерение + "Соединение,
		|";
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПериод" + Измерение + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.ФлагПериод" + Измерение + " = ""отчет"" ТОГДА
		|		""отобрать""
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК ФлагПериод" + Измерение + ",
		|";
	КонецЦикла;
		
	ТекстЗапроса = ТекстЗапроса + 
		СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") +
		СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
		СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
		"СтруктураЯчеек.ИД_Источника
	|
	|ПОМЕСТИТЬ СтруктураЯчеекСПериодами
	|
	|ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов
	|	
	|ПО СтруктураЯчеек.ИД_ИсточникаПериодов = ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	И ( СтруктураЯчеек.ФлагПериод" + Измерение + " = """"
		|			ИЛИ
		|			СтруктураЯчеек.ВыражениеПериода" + Измерение + " = -1
		|			ИЛИ
		|			(СтруктураЯчеек.ВыражениеПериода" + Измерение + " > -1
		|				И ДобавитьКДате(&НачалоПериода, " + Измерение + ", СтруктураЯчеек.ВыражениеПериода" + Измерение + ") = 
		|					ТаблицаПериодов.Период" + Измерение + "Отчет)
		|		)";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|; ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ИмяТаблицы = "СтруктураЯчеекСПериодами";
	
КонецПроцедуры

Процедура СобратьВыполнитьФинальноеСоединениеСтруктурыСДанными(ОписаниеОтчета, Запрос, ВспомогательныеДанные, 
																ИмяТаблицы, ПоляИсточников, ЗначенияРодителей)
	
	ТекстПериодов = ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов = ВспомогательныеДанные.ТекстФлагиПериодов;
	
	// Подготовка структуры ячеек с данными
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагСтатьяБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.СтатьяБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.СтатьяБюджетов
	|	КОНЕЦ КАК СтатьяБюджетов,
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПоказательБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.ПоказательБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.ПоказательБюджетов
	|	КОНЕЦ КАК ПоказательБюджетов,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда,
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
			|			ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения)
			|		) > 1 ТОГДА НЕОПРЕДЕЛЕНО ИНАЧЕ 
			|		МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения))
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|			ИЛИ СтруктураЯчеек.Флаг" + Измерение + " = ""отчет"")
			|			И НЕ ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ КАК " + Измерение + ",
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""отчет"" ТОГДА
			|		""""
			|	КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		И Не ТаблицаДанных." + Измерение + " Есть NULL ТОГДА
			|		""отобрать""
			|	ИНАЧЕ
			|		СтруктураЯчеек.Флаг" + Измерение + "
			|	КОНЕЦ КАК Флаг" + Измерение + ",
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек");
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек");
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|			ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отчет"")
		|			И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ КАК " + ИмяПоля + ",
		|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отчет"" ТОГДА
		|		""""
		|	КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		И Не ТаблицаДанных." + ИмяПоля + " Есть NULL ТОГДА
		|		""отобрать""
		|	ИНАЧЕ
		|		СтруктураЯчеек.Флаг" + ИмяПоля + "
		|	КОНЕЦ КАК Флаг" + ИмяПоля + ",
		|	СтруктураЯчеек.Родитель" + ИмяПоля + ",
		|";
	КонецЦикла;
	
	Для Каждого ПолеРесурса из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		Если Найти(ПолеРесурса.ИмяРесурса, "Сумма") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(ЕстьNULL(ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ", 0)) КАК " + ПолеРесурса.ИмяРесурса + ",
			|";
		ИначеЕсли Найти(ПолеРесурса.ИмяРесурса, "Количество") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктураЯчеек.ЕдиницаИзмерения) = 1 ТОГДА
			|		СУММА(ЕстьNULL(ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ", 0)) ИНАЧЕ 0 КОНЕЦ КАК " + ПолеРесурса.ИмяРесурса + ",
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	МИНИМУМ(ТаблицаДанных.НомерПоПорядку) КАК МинимумНомерПоПорядку,
	|	МАКСИМУМ(ТаблицаДанных.Примечание),
	|	СтруктураЯчеек.ИД_Источника
	|
	|	ПОМЕСТИТЬ СтруктураЯчеекСДаннымиСтатейПоказателей
	|
	|	ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанных
	|
	|	ПО 
	|		СтруктураЯчеек.ИД_Источника = ТаблицаДанных.ИД_Источника
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	(СтруктураЯчеек.ФлагПериод" + Измерение + " = ""отобрать""
		|			И СтруктураЯчеек.Период" + Измерение + "Соединение = ТаблицаДанных.Период" + Измерение + ")
		|		ИЛИ
		|		(СтруктураЯчеек.ФлагПериод" + Измерение + " <> ""отобрать""
		|			И ТаблицаДанных.Период" + Измерение + " = НЕОПРЕДЕЛЕНО)	)
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	И (НЕ СтруктураЯчеек.ФлагСтатьяБюджетов = ""отобрать""
	|		ИЛИ СтруктураЯчеек.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов)
	|
	|	И (НЕ СтруктураЯчеек.ФлагПоказательБюджетов = ""отобрать""
	|		ИЛИ СтруктураЯчеек.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов)
	|	
	|	";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	И (НЕ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|		ИЛИ СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
		|";
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		НайденныеСтроки = ЗначенияРодителей.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПоля));
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	(СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отобрать"" И
		|			СтруктураЯчеек." + ИмяПоля + " = ТаблицаДанных." + ИмяПоля + ")
		|		ИЛИ ( (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""прочие"" ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отчет"") ";
		
		Если НайденныеСтроки.Количество() Тогда
			ТекстПроверкиВхожденияВРодителя = "И
			|				ВЫБОР";

			ИндексПараметра = 0;
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ИндексПараметра = ИндексПараметра + 1;
				ТекстПроверкиВхожденияВРодителя = ТекстПроверкиВхожденияВРодителя + "
				|				КОГДА СтруктураЯчеек.Родитель" + ИмяПоля + " В (&Родитель" + ИмяПоля + ИндексПараметра + ") ТОГДА
				|					ВЫБОР КОГДА (ТаблицаДанных." + ИмяПоля + " В (&Список" + ИмяПоля + ИндексПараметра + ")) 
				|						ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА
				|					КОНЕЦ";
				Запрос.УстановитьПараметр("Родитель" + ИмяПоля + ИндексПараметра, НайденнаяСтрока.Родитель);
				Запрос.УстановитьПараметр("Список" + ИмяПоля + ИндексПараметра, НайденнаяСтрока.Список);
			КонецЦикла;
			ТекстПроверкиВхожденияВРодителя = ТекстПроверкиВхожденияВРодителя + " КОНЕЦ = ИСТИНА";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстПроверкиВхожденияВРодителя + "
		|			)
		|		ИЛИ (СтруктураЯчеек.Флаг" + ИмяПоля + " <> ""отобрать"" И
		|				СтруктураЯчеек.Флаг" + ИмяПоля + " <> ""прочие"" И
		|				СтруктураЯчеек.Флаг" + ИмяПоля + " <> ""отчет"")
		|			)
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО
	|	
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагСтатьяБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.СтатьяБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.СтатьяБюджетов
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПоказательБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.ПоказательБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.ПоказательБюджетов
	|	КОНЕЦ,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда,
	|	СтруктураЯчеек.ИД_Источника,
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		ИЛИ СтруктураЯчеек.Флаг" + Измерение + " = ""отчет"")
			|		И НЕ ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ,
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""отчет"" ТОГДА
			|		""""
			|	КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		И Не ТаблицаДанных." + Измерение + " Есть NULL ТОГДА
			|		""отобрать""
			|	ИНАЧЕ
			|		СтруктураЯчеек.Флаг" + Измерение + "
			|	КОНЕЦ,
			|";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отчет"")
		|		И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ,
		|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отчет"" ТОГДА
		|		""""
		|	КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		И Не ТаблицаДанных." + ИмяПоля + " Есть NULL ТОГДА
		|		""отобрать""
		|	ИНАЧЕ
		|		СтруктураЯчеек.Флаг" + ИмяПоля + "
		|	КОНЕЦ,
		|	СтруктураЯчеек.Родитель" + ИмяПоля + ",
		|";
	КонецЦикла;
	
	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = "Период" + Периодичность;
		ТекстЗапроса = ТекстЗапроса + "
		|	СтруктураЯчеек." + ИмяПериода + ",
		|	СтруктураЯчеек.Флаг" + ИмяПериода + ",";
	КонецЦикла;
	
	ИмяТаблицы = "СтруктураЯчеекСДаннымиСтатейПоказателей";
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	Запрос.Текст = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СобратьВыполнитьСоединениеCНФП(ОписаниеОтчета, Запрос, ВспомогательныеДанные, 
															ИмяТаблицы, ПоляИсточников, ЗначенияРодителей)
	
	ТекстПериодов = ВспомогательныеДанные.ТекстПериодов;
	
	// Подготовка структуры ячеек с данными
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СтруктураЯчеек.СтатьяБюджетов,
	|	СтруктураЯчеек.ПоказательБюджетов,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда,
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
			|			ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения)
			|		) > 1 ТОГДА НЕОПРЕДЕЛЕНО ИНАЧЕ 
			|		МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения))
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		И НЕ ТаблицаДанных." + Измерение + "  ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ КАК " + Измерение + ",
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек");
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ КАК " + ИмяПоля + ",
		|";
	КонецЦикла;
	
	Для Каждого ПолеРесурса из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		Если Найти(ПолеРесурса.ИмяРесурса, "Сумма")
			ИЛИ Найти(ПолеРесурса.ИмяРесурса, "Количество") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(СтруктураЯчеек." + ПолеРесурса.ИмяРесурса + ") КАК " + ПолеРесурса.ИмяРесурса + ",
			|";
		ИначеЕсли Найти(ПолеРесурса.ИмяРесурса, "ЗначениеПоказателя") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА СтруктураЯчеек.ОсновнойЭлемент ТОГДА
			|		ВЫБОР
			|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДанных.ЗначениеПоказателя) = 0 ТОГДА
			|				0
			|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДанных.ЗначениеПоказателя) = 1 ТОГДА
			|				МАКСИМУМ(ТаблицаДанных.ЗначениеПоказателя)
			|			ИНАЧЕ
			|				""#Знач"" 
			|		КОНЕЦ
			|	ИНАЧЕ
			|		МАКСИМУМ(ТаблицаДанных.ЗначениеПоказателя)
			|	КОНЕЦ КАК ЗначениеПоказателя,
			|
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	МИНИМУМ(СтруктураЯчеек.МинимумНомерПоПорядку) КАК МинимумНомерПоПорядку,
	|	МАКСИМУМ(СтруктураЯчеек.Примечание) КАК Примечание,
	|	Ложь КАК РассчитанСумма,
	|	Ложь КАК РассчитанСуммаВал,
	|	Ложь КАК РассчитанКоличество,
	|	Ложь КАК РассчитанЗначение
	|
	|	ПОМЕСТИТЬ СтруктураЯчеекСНФП
	|
	|	ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанных
	|
	|	ПО СтруктураЯчеек.ИД_Источника = ТаблицаДанных.ИД_Источника
	//|	И (СтруктураЯчеек.ВидЭлемента = Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель)
	//|		ИЛИ СтруктураЯчеек.ВидОперанда = Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель))
	|	И ЛОЖЬ
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	(СтруктураЯчеек.ФлагПериод" + Измерение + " = ""отобрать""
		|			И СтруктураЯчеек.Период" + Измерение + " = ТаблицаДанных.Период" + Измерение + ")
		|		ИЛИ
		|		(СтруктураЯчеек.ФлагПериод" + Измерение + " <> ""отобрать""
		|			И ТаблицаДанных.Период" + Измерение + " = НЕОПРЕДЕЛЕНО)	)
		|";
	КонецЦикла;
	
	//ТекстЗапроса = ТекстЗапроса + "
	//|	И СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
	//|	";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	И (НЕ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|		ИЛИ СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
		|";
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		НайденныеСтроки = ЗначенияРодителей.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПоля));
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	(СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отобрать"" И
		|			СтруктураЯчеек." + ИмяПоля + " = ТаблицаДанных." + ИмяПоля + ")
		|		ИЛИ ( СтруктураЯчеек.Флаг" + ИмяПоля + " = ""прочие"" ";
		
		Если НайденныеСтроки.Количество() Тогда
			ТекстПроверкиВхожденияВРодителя = "И
			|				ВЫБОР";

		ИндексПараметра = 0;
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			ИндексПараметра = ИндексПараметра + 1;
			ТекстПроверкиВхожденияВРодителя = ТекстПроверкиВхожденияВРодителя + "
			|				КОГДА СтруктураЯчеек.Родитель" + ИмяПоля + " В (&Родитель" + ИмяПоля + ИндексПараметра + ") ТОГДА
			|					ВЫБОР КОГДА (ТаблицаДанных." + ИмяПоля + " В (&Список" + ИмяПоля + ИндексПараметра + ")) 
			|						ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА
			|					КОНЕЦ";
			Запрос.УстановитьПараметр("Родитель" + ИмяПоля + ИндексПараметра, НайденнаяСтрока.Родитель);
			Запрос.УстановитьПараметр("Список" + ИмяПоля + ИндексПараметра, НайденнаяСтрока.Список);
		КонецЦикла;
		ТекстПроверкиВхожденияВРодителя = ТекстПроверкиВхожденияВРодителя + " КОНЕЦ = ИСТИНА";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстПроверкиВхожденияВРодителя + "
		|			)
		|		ИЛИ (СтруктураЯчеек.Флаг" + ИмяПоля + " <> ""отобрать"" И
		|				СтруктураЯчеек.Флаг" + ИмяПоля + " <> ""прочие"")
		|			)
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО
	|	" + ?(Найти(ПолеРесурса.ИмяРесурса, "ЗначениеПоказателя"), " 
	|	ВЫБОР КОГДА СтруктураЯчеек.ОсновнойЭлемент ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаДанных.ЗначениеПоказателя
	|	КОНЕЦ, ", "") + "
	|	СтруктураЯчеек.СтатьяБюджетов,
	|	СтруктураЯчеек.ПоказательБюджетов,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда,
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		И НЕ ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ,
			|";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ,
		|";
	КонецЦикла;

	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = "Период" + Периодичность;
		ТекстЗапроса = ТекстЗапроса + "
		|	СтруктураЯчеек." + ИмяПериода + ",";
	КонецЦикла;
	
	ИмяТаблицы = "СтруктураЯчеекСНФП";
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	ТекстЗапроса = ЛЕВ(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаИзМенеджера(Запрос, ИмяТаблицы, Порядок = "МинимумНомерПоПорядку, ПорядокРасчетаОперанда")
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ " + ИмяТаблицы + "
	|УПОРЯДОЧИТЬ ПО 
	|	" + Порядок;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСтруктуруЯчеекСДанными(ОписаниеОтчета, ПараметрыДанных,
										НастройкиСтруктурыЯчеек, ДанныеИсточников,
										РежимФормирования, КэшДанных)
	
	НачалоПериода 		= ПараметрыДанных.НачалоПериода;
	КонецПериода 		= ПараметрыДанных.КонецПериода;
	ГраницаФактДанных 	= ПараметрыДанных.ГраницаФактДанных;
	
	СтруктураЯчеек = НастройкиСтруктурыЯчеек.СтруктураЯчеек;
	ПоляИсточников = НастройкиСтруктурыЯчеек.ПоляИсточников;
	ИсточникиПериодовГруппировок = НастройкиСтруктурыЯчеек.ИсточникиПериодовГруппировок;
	
	ВспомогательныеДанные = ВспомогательныеДанныеРасчетаДанныхЯчеек(НачалоПериода, КонецПериода, ГраницаФактДанных, ОписаниеОтчета, 
																			ИсточникиПериодовГруппировок, КэшДанных, РежимФормирования);
	
	ОсновныеЭлементы 		= ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги 			= ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений 			= ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений 	= ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики 			= ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики 	= ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик 	= ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов 		= ВспомогательныеДанные.ТекстФлагиПериодов;
	ТекстВыраженияПериодов 	= ВспомогательныеДанные.ТекстВыраженияПериодов;
	ТаблицаПериодов 		= ВспомогательныеДанные.ТаблицаПериодов;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек);
	Запрос.УстановитьПараметр("ТаблицаДанных", ДанныеИсточников);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ 
	|" + 	СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстВыраженияПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") + "
	|	СтруктураЯчеек.ИД_Источника, СтруктураЯчеек.ИД_ИсточникаПериодов
	|
	|ПОМЕСТИТЬ СтруктураЯчеек
	|
	|ИЗ &СтруктураЯчеек КАК СтруктураЯчеек
	|
	|;
	|
	|";
	
	// Подготовка таблицы данных
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|" + 	СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
	Для Каждого ПолеРесурса из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ",
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание
	|
	|ПОМЕСТИТЬ ТаблицаДанных
	|
	|ИЗ &ТаблицаДанных КАК ТаблицаДанных
	|
	|;
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ИмяТаблицы = "СтруктураЯчеек";
	
	ДополнитьВспомогательныеДанныеСтатьямиПоказателямиЯчеек(Запрос, ВспомогательныеДанные, КэшДанных);
	
	ЗначенияРодителей = ФиксированныеЗначенияОтчета(Запрос, ИмяТаблицы, ОписаниеОтчета, КэшДанных, Истина);
	Если ВыполнитьПредварительноеСоединениеСтруктурыСДанными(ОписаниеОтчета, Запрос, ВспомогательныеДанные, 
																	ИмяТаблицы, ПоляИсточников, ЗначенияРодителей) Тогда
		
		ЗначенияРодителей = ФиксированныеЗначенияОтчета(Запрос, ИмяТаблицы, ОписаниеОтчета, КэшДанных, Ложь);
		
	КонецЕсли;
	
	РазбитьЯчейкиПоПериодам(ОписаниеОтчета, Запрос, ВспомогательныеДанные, ИмяТаблицы);
	
	СобратьВыполнитьФинальноеСоединениеСтруктурыСДанными(ОписаниеОтчета, Запрос, ВспомогательныеДанные, 
																	ИмяТаблицы, ПоляИсточников, ЗначенияРодителей);
																																		
	СобратьВыполнитьСоединениеCНФП(ОписаниеОтчета, Запрос, ВспомогательныеДанные, 
												ИмяТаблицы, ПоляИсточников, ЗначенияРодителей);
												
	Таблица = ТаблицаИзМенеджера(Запрос, ИмяТаблицы);
	
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("СуммаВал");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Значение");
	
	Таблица.Колонки.Добавить("ИмяОбластиСумма");
	Таблица.Колонки.Добавить("ИмяОбластиКоличество");
	Таблица.Колонки.Добавить("ИмяОбластиЗначение");
	
	Таблица.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент, ВидОперанда");
	Таблица.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент");
	
	Таблица.Колонки.Добавить("ОтборЯчейки");
	
	Для Каждого Индекс из НастройкиСтруктурыЯчеек.ИндексыСтруктурыЯчеек Цикл
		Таблица.Индексы.Добавить(Индекс + ", Строка, Колонка, ОсновнойЭлемент");
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ПолучениеОписанияИсточниковДанных

Функция ПоИсточникуПредположительноНужныФактическиеДанные(Источник)
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияОтбора = Новый Массив;
	
	Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, "Сценарий", ЗначенияОтбора) Тогда
		
		Для Каждого ЗначениеОтбора из ЗначенияОтбора Цикл
			
			Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеОтбора.ПравоеЗначение = Справочники.Сценарии.ФактическиеДанные Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
				И ЗначениеОтбора.ПравоеЗначение <> Справочники.Сценарии.ФактическиеДанные Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Родитель = ЗначениеОтбора.Родитель;
			Пока ЗначениеЗаполнено(Родитель) Цикл
				Если Родитель.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
					Возврат Истина;
				ИначеЕсли Родитель.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
					Возврат Истина;
				КонецЕсли;
				Родитель = Родитель.Родитель;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыражениеПериодаГруппировкиИсточникаДанных(ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшРеквизитов);
	
	Если ЗначениеЗаполнено(ПериодСмещения) Тогда
		ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшРеквизитов);
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодичностьСмещения = Неопределено;
		КонецЕсли;
	Иначе
		ПериодСмещения = Неопределено;
	КонецЕсли;
	
	Если СтруктураКолонок.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
		Если МинимальнаяПериодичность = Перечисления.Периодичность.Неделя Тогда
			
			ТекстПоля = "ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ПериодПланирования, " + МинимальнаяПериодичность + ") < &НачалоПериода
						|ТОГДА &НачалоПериода ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодПланирования, " + МинимальнаяПериодичность + ") КОНЕЦ";
			
		Иначе
			
			ТекстПоля = "НАЧАЛОПЕРИОДА(ПериодПланирования, " + МинимальнаяПериодичность + ")";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПериодСмещения) И ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			
			ТекстПоля = "ДОБАВИТЬКДАТЕ(" + ТекстПоля + ", ";
			ТекстПоля = ТекстПоля + ПериодичностьСмещения + ", ";
			ТекстПоля = ТекстПоля + ПериодСмещения + ")";
			
		КонецЕсли;
		
	Иначе
		
		ТекстПоля = "Неопределено";
		
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ВыражениеГраницыПериодаИсточникаДанных(ТипИсточника, ИмяПоля, ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшРеквизитов);
	
	Если ЗначениеЗаполнено(ПериодСмещения) Тогда
		ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшРеквизитов);
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодичностьСмещения = Неопределено;
		КонецЕсли;
	Иначе
		ПериодСмещения = Неопределено;
	КонецЕсли;
	
	Формула = ?(ИмяПоля = "НачалоПериода", "НижняяГраница", "ВерхняяГраница") + "Данных";
	Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
	ЭлементОтчета, 
	ДопРеквизиты[Формула],
	КэшРеквизитов);
	
	Формула = СтрЗаменить(НРег(Формула), НРег("[Начало периода данных]"), "&НачалоПериода");
	Формула = СтрЗаменить(Формула, НРег("[Конец периода данных]"), "&КонецПериода");
	Формула = СтрЗаменить(Формула, НРег("[Граница факт.данных]"), "&ГраницаФактДанных");
	
	// для сопоставимости формул удалим вспомогательные пользовательские символы
	Формула = СтрЗаменить(Формула, " ", "");
	Формула = СтрЗаменить(Формула, Символы.ПС, "");
	Формула = СтрЗаменить(Формула, Символы.Таб, "");
	
	Если ЗначениеЗаполнено(ПериодСмещения) И ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
		
		Формула = "ДОБАВИТЬКДАТЕ(" + Формула + ", ";
		Формула = Формула + ПериодичностьСмещения + ", -";
		Формула = Формула + ПериодСмещения + ")";
		
	КонецЕсли;
	
	Если ИмяПоля = "КонецПериода" Тогда
		Формула = "КОНЕЦПЕРИОДА(" + Формула + ", ДЕНЬ)";
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции

Процедура УбратьИзОтбораОпределенныеИзмерения(СтрокаОтчета, ДополнительныйОтбор, КэшРеквизитов)
	
	Список = Новый СписокЗначений;
	ПараметрыОтборов = ПараметрыДоступностиФильтров(СтрокаОтчета, , КэшРеквизитов);
	Для Каждого КлючИЗначение из ПараметрыОтборов Цикл
		Если Не ПараметрыОтборов[КлючИЗначение.Ключ] Тогда
			НайтиОтборПоИмени(ДополнительныйОтбор, КлючИЗначение.Ключ, Список);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора из Список Цикл
		ДополнительныйОтбор.Отбор.Элементы.Удалить(ЭлементОтбора.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьИсточник(КэшРеквизитов, НайденныйИсточник, ЭлементОтчета)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	НайденныйИсточник.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Если НайденныйИсточник.Объекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.СтатьяБюджетов,
																КэшРеквизитов);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПоказательБюджетов,
																КэшРеквизитов);
	КонецЕсли;
	
	Если НайденныйИсточник.Объекты.Найти(ОбъектУчета) = Неопределено Тогда
		НайденныйИсточник.Объекты.Добавить(ОбъектУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИсточник(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	СтруктураИсточника = Новый Структура;
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.СтатьяБюджетов,
																КэшРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПоказательБюджетов,
																КэшРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	Иначе
		Массив = Неопределено;
	КонецЕсли;
	
	Если ИсточникДокумент Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "Факт");
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "Обороты");
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "Остатки");
	КонецЕсли;
	
	СтруктураИсточника.Вставить("Объекты", Массив);
	
	СтруктураИсточника.Вставить("ВыражениеПериодаГруппировки", ВыражениеПериодаГруппировкиИсточникаДанных(
																	ЭлементОтчета,
																	СтруктураКолонок,
																	КэшРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеНачалоПериода", ВыражениеГраницыПериодаИсточникаДанных(
																	СтруктураИсточника.ТипИсточника, 
																	"НачалоПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеКонецПериода", ВыражениеГраницыПериодаИсточникаДанных(
																	СтруктураИсточника.ТипИсточника, 
																	"КонецПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшРеквизитов));
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшРеквизитов);
	ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшРеквизитов);
	СтруктураИсточника.Вставить("ПериодСмещения", ПериодСмещения);
	СтруктураИсточника.Вставить("ПериодичностьСмещения", ПериодичностьСмещения);
	
	ОтборЭлемента = ЭлементОтчета.ДополнительныйОтбор.Получить();
	УбратьИзОтбораОпределенныеИзмерения(ОтобраннаяСтрока, ОтборЭлемента, КэшРеквизитов);
	СтруктураИсточника.Вставить("ДополнительныйОтбор", ОтборЭлемента);
	
	Если ИсточникДокумент Тогда
		СтруктураИсточника.Вставить("Идентификатор", "Документ");
	Иначе
		СтруктураИсточника.Вставить("Идентификатор", "ИД_" + Источники.Количество());
	КонецЕсли;
	
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив);
	СтруктураИсточника.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Источники.Добавить(СтруктураИсточника);
	
КонецПроцедуры

Функция СравнитьИсточники(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		Если ИсточникДокумент Тогда
			Если Источник.ТипИсточника <> "Факт" Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Источник.ТипИсточника <> "Обороты" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		Если Источник.ТипИсточника <> "Обороты" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		Если Источник.ТипИсточника <> "Остатки" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ТекстНСТР = НСтр("en='Invalid data source type';ru='Неверный тип источника данных'");
		ВызватьИсключение ТекстНСТР;
		
	КонецЕсли;
	
	Если НЕ ИсточникДокумент Тогда
		
		ВыражениеПериодаГруппировки = ВыражениеПериодаГруппировкиИсточникаДанных(
																	ЭлементОтчета,
																	СтруктураКолонок,
																	КэшРеквизитов);
																	
		Если ВыражениеПериодаГруппировки <> Источник.ВыражениеПериодаГруппировки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВыражениеНачалоПериода = ВыражениеГраницыПериодаИсточникаДанных(
																	Источник.ТипИсточника, 
																	"НачалоПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшРеквизитов);
		
		Если ВыражениеНачалоПериода <> Источник.ВыражениеНачалоПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВыражениеКонецПериода = ВыражениеГраницыПериодаИсточникаДанных(
																	Источник.ТипИсточника, 
																	"КонецПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшРеквизитов);
		
		Если ВыражениеКонецПериода <> Источник.ВыражениеКонецПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОтборЭлемента = ЭлементОтчета.ДополнительныйОтбор.Получить();
		УбратьИзОтбораОпределенныеИзмерения(ОтобраннаяСтрока, ОтборЭлемента, КэшРеквизитов);
		
		Если Не СравнитьОтборы(Источник.ДополнительныйОтбор, ОтборЭлемента) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиИсточник(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент)
	
	Для Каждого Источник из Источники Цикл
		Если СравнитьИсточники(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент) Тогда
			Возврат Источник;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьИсточникиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования = Неопределено)
	
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	Для Каждого ОтобраннаяСтрока из ОтобранныеСтроки Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИсточникДокумент = Ложь;
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
			
			Родитель = ОтобраннаяСтрока.Родитель;
			Если Не ЗначениеЗаполнено(Родитель) 
				ИЛИ Не Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
				ИсточникДокумент = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйИсточник = НайтиИсточник(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент);
		Если НайденныйИсточник = Неопределено Тогда
			ДобавитьИсточник(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент);
		Иначе
			ДополнитьИсточник(КэшРеквизитов, НайденныйИсточник, ОтобраннаяСтрока.ЭлементОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание источников вида бюджета в виде массива.
//
// Параметры:
//  ВидБюджета - СправочникСсылка.ВидБюджета - вид бюджета, для которого следует получить описание источников.
//  СтруктураКолонок - Массив - структура колонок таблицы ввода
//  РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - назначение источников
//                                                                              (документ, отчет, заполнение и пр.).
//
// Возвращаемое значение:
//  Массив - описание источников в виде массива.
//
Функция ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонок, РежимФормирования) Экспорт
	
	Источники = Новый Массив;
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДеревоЭлементовБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	Для Каждого Источник из Источники Цикл
		
		Источник.Вставить("ПредполагаетФактическиеДанные", ПоИсточникуПредположительноНужныФактическиеДанные(Источник));
		
	КонецЦикла;
	
	Возврат Источники;
	
КонецФункции

#КонецОбласти

#Область ПолучениеИсточникПериодовГруппировок

Функция ВыражениеПравилаПериодаГруппировки(ИмяПоля, ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	Формула = ИмяПоля + "Группировки";
	Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты[Формула],
																КэшРеквизитов);
	
	Формула = СтрЗаменить(НРег(Формула), НРег("[Начало периода данных]"), "&НачалоПериода");
	Формула = СтрЗаменить(Формула, НРег("[Конец периода данных]"), "&КонецПериода");
	Формула = СтрЗаменить(Формула, НРег("[Граница факт.данных]"), "&ГраницаФактДанных");
	Формула = СтрЗаменить(Формула, НРег("[Период группировки]"), "ЛеваяТаблицаПериодов.Период" + МинимальнаяПериодичность);
	
	// для сопоставимости формул удалим вспомогательные пользовательские символы
	Формула = СтрЗаменить(Формула, " ", "");
	Формула = СтрЗаменить(Формула, Символы.ПС, "");
	Формула = СтрЗаменить(Формула, Символы.Таб, "");
	
	Возврат Формула;
	
КонецФункции

Функция СравнитьПравилаПериодаГруппировок(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ВыражениеНачалоПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																"НачалоПериода",
																ЭлементОтчета, 
																СтруктураКолонок, 
																КэшРеквизитов);
	
	Если ВыражениеНачалоПериодаГруппировки <> Источник.ВыражениеНачалоПериодаГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыражениеКонецПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																"КонецПериода",
																ЭлементОтчета, 
																СтруктураКолонок, 
																КэшРеквизитов);
	
	Если ВыражениеКонецПериодаГруппировки <> Источник.ВыражениеКонецПериодаГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	СтруктураИсточника = Новый Структура;
	
	СтруктураИсточника.Вставить("ВыражениеНачалоПериодаГруппировки", ВыражениеПравилаПериодаГруппировки(
																		"НачалоПериода",
																		ЭлементОтчета, 
																		СтруктураКолонок, 
																		КэшРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеКонецПериодаГруппировки", ВыражениеПравилаПериодаГруппировки(
																		"КонецПериода",
																		ЭлементОтчета, 
																		СтруктураКолонок, 
																		КэшРеквизитов));
																	
	СтруктураИсточника.Вставить("Идентификатор", "ИД_" + Источники.Количество());
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив);
	СтруктураИсточника.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Источники.Добавить(СтруктураИсточника);
	
КонецПроцедуры

Функция НайтиПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок)
	
	Для Каждого Источник из Источники Цикл
		Если СравнитьПравилаПериодаГруппировок(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок) Тогда
			Возврат Источник;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования = Неопределено)
	
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	Для Каждого ОтобраннаяСтрока из ОтобранныеСтроки Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйИсточник = НайтиПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок);
		Если НайденныйИсточник = Неопределено Тогда
			ДобавитьПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок);
		Иначе
			НайденныйИсточник.СписокЭлементов.Добавить(ОтобраннаяСтрока.ЭлементОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание источников вида бюджета в виде массива
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидБюджета - вид бюджета, для которого следует получить описание источников
//  ДляЭкземпляраБюджета  - Булево - истина, если процедура выполняется для экземпляра бюджета
//
// Возвращаемое значение:
//   Массив   - описание источников в виде массива
//
Функция ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонок, РежимФормирования) Экспорт
	
	Источники = Новый Массив;
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДеревоЭлементовБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	Возврат Источники;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтруктурыЯчеекБюджетногоОтчета

Функция ПолучитьТаблицыВидаБюджета(ВидБюджета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлементыФинансовыхОтчетов.Ссылка,
	|	ЭлементыФинансовыхОтчетов.ВидЭлемента
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
	|	И ЭлементыФинансовыхОтчетов.ВидЭлемента В(&ВидЭлемента)"
	);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("ВидЭлемента", Список);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКонечныеЭлементыДерева(Элемент, Все = Ложь, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Если Все Тогда
			Результат = Новый ДеревоЗначений;
			Результат.Колонки.Добавить("Ссылка");
			Результат.Колонки.Добавить("ВидЭлемента");
		Иначе
			Результат = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из Элемент.Строки Цикл
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст Тогда
			Продолжить;
		КонецЕсли;
		Если Все Тогда
			НоваяСтрока = Результат.Строки.Добавить();
			НоваяСтрока.Ссылка = СтрокаДерева.ЭлементОтчета;
			НоваяСтрока.ВидЭлемента = СтрокаДерева.ВидЭлемента;
			ПолучитьКонечныеЭлементыДерева(СтрокаДерева, Все, НоваяСтрока);
		Иначе
			Если Не СтрокаДерева.Строки.Количество() Тогда
				Результат.Добавить(СтрокаДерева.ЭлементОтчета);
			КонецЕсли;
			ПолучитьКонечныеЭлементыДерева(СтрокаДерева, Все, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонечныеЭлементы(ВидБюджета, ЭлементРодитель)
	
	ДеревоЭлементов = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
	Если ЭлементРодитель = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка() Тогда
		Строки = ПолучитьКонечныеЭлементыДерева(ДеревоЭлементов, Истина);
		Колонки = Новый ДеревоЗначений;
		Колонки.Колонки.Добавить("Ссылка");
		Колонки.Строки.Добавить().Ссылка = ЭлементРодитель;
	Иначе
		Шапка = ДеревоЭлементов.Строки.Найти(ЭлементРодитель, "ЭлементОтчета");
		Элемент = Шапка.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки, "ВидЭлемента");
		Строки = ПолучитьКонечныеЭлементыДерева(Элемент, Истина);
		Элемент = Шапка.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки, "ВидЭлемента");
		Колонки = ПолучитьКонечныеЭлементыДерева(Элемент, Истина);
	КонецЕсли;
	
	Возврат Новый Структура("Строки, Колонки", Строки, Колонки);
	
КонецФункции

Процедура ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(НоваяСтрока, Знач Элемент, КэшДопРеквизитов, РежимФормирования)
	
	Пока ЗначениеЗаполнено(Элемент) Цикл
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			НоваяСтрока.ФлагСтатьяБюджетов = "заполнить";
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			НоваяСтрока.ФлагПоказательБюджетов = "заполнить";
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			НоваяСтрока.СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СтатьяБюджетов", КэшДопРеквизитов);
			НоваяСтрока.ФлагСтатьяБюджетов = "отобрать";
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			НоваяСтрока.ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ПоказательБюджетов", КэшДопРеквизитов);
			НоваяСтрока.ФлагПоказательБюджетов = "отобрать";
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения", КэшДопРеквизитов);
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Организация", КэшДопРеквизитов);
				НоваяСтрока.Организация = Значение;
				НоваяСтрока.ФлагОрганизация = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Подразделение", КэшДопРеквизитов);
				НоваяСтрока.Подразделение = Значение;
				НоваяСтрока.ФлагПодразделение = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Сценарий", КэшДопРеквизитов);
				НоваяСтрока.Сценарий = Значение;
				НоваяСтрока.ФлагСценарий = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Валюта", КэшДопРеквизитов);
				НоваяСтрока.Валюта = Значение;
				НоваяСтрока.ФлагВалюта = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				
				ЭтоАналитикаПрочее = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ЭтоАналитикаПрочее", КэшДопРеквизитов);
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизитов);
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "РазрешитьРедактирование", КэшДопРеквизитов);
				ИмяАналитики = ИмяПоляБюджетногоОтчета(ВидАналитики);
				Значение = Элемент.ЗначениеАналитики;
				Если ЭтоАналитикаПрочее Тогда
					НоваяСтрока[ИмяАналитики] = Неопределено;
					Если РазрешитьРедактирование = Истина Тогда
						Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
							НоваяСтрока["Флаг" + ИмяАналитики] = "заполнить";
						Иначе
							НоваяСтрока["Флаг" + ИмяАналитики] = "документ";
						КонецЕсли;
					Иначе
						НоваяСтрока["Флаг" + ИмяАналитики] = "прочие";
					КонецЕсли;
				Иначе
					НоваяСтрока[ИмяАналитики] = Значение;
					НоваяСтрока["Флаг" + ИмяАналитики] = "отобрать";
				КонецЕсли;
				НоваяСтрока["Родитель" + ИмяАналитики] = Элемент.Родитель;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизитов);
				ИмяАналитики = ИмяПоляБюджетногоОтчета(ВидАналитики);
				НоваяСтрока["Флаг" + ИмяАналитики] = "заполнить";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				
				ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ИмяИзмерения", КэшДопРеквизитов);
				НоваяСтрока["Флаг" + ИмяИзмерения] = "заполнить";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				
				Период = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Периодичность", КэшДопРеквизитов);
				НоваяСтрока["ФлагПериод" + Период] = "заполнить";
				
				ЗначениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ЗначениеПериода", КэшДопРеквизитов);
				Если ЗначениеПериода = Неопределено Тогда
					НоваяСтрока["ВыражениеПериода" + Период] = -1;
				Иначе
					НоваяСтрока["ВыражениеПериода" + Период] = ЗначениеПериода;
				КонецЕсли;
				
				УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
				НайденныйИндекс = УпорядоченныеПериодичности.Найти(Период);
				
				Для Сч = НайденныйИндекс + 1 По УпорядоченныеПериодичности.ВГраница() Цикл
					Период = УпорядоченныеПериодичности[Сч];
					ИмяПериода = "Период" + Период;
					Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПериода) <> Неопределено Тогда
						НоваяСтрока["Флаг" + ИмяПериода] = "заполнить";
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		Элемент = Элемент.Родитель;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруЯчеек(Параметры, Колонки)
	
	Для Каждого Колонка из Колонки.Строки Цикл
		ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, Параметры.ДеревоСтрок, Колонка.Ссылка);
		ЗаполнитьСтруктуруЯчеек(Параметры, Колонка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВалютаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатей)
	
	ОбъектВалютногоУчета = Неопределено;
	Если ЗначениеЗаполнено(НоваяСтрока.ПоказательБюджетов) Тогда
		ОбъектВалютногоУчета = НоваяСтрока.ПоказательБюджетов;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда
		ОбъектВалютногоУчета = НоваяСтрока.СтатьяБюджетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыВалютногоУчета = КэшРеквизитовСтатей[ОбъектВалютногоУчета];
	Если РеквизитыВалютногоУчета = Неопределено Тогда
	
		Реквизиты = Новый Структура("АналитикаЗаполнениеВалюты, УчитыватьПоВалюте, 
								|АналитикаВалюты, ВалютаОпределяетсяАналитикой", "АналитикаВалюты.ЗаполнениеВалюты");
		
		РеквизитыВалютногоУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектВалютногоУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектВалютногоУчета, РеквизитыВалютногоУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.УчитыватьПоВалюте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.ВалютаОпределяетсяАналитикой Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = ИмяПоляБюджетногоОтчета(РеквизитыВалютногоУчета.АналитикаВалюты);
	Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = НоваяСтрока[ИмяПоля];
		Если ЗначениеЗаполнено(ЗначениеПоля)
			И ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
			Возврат НоваяСтрока[ИмяПоля][РеквизитыВалютногоУчета.АналитикаЗаполнениеВалюты];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Функция ЕдиницаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатей)
	
	ОбъектУчета = Неопределено;
	Если ЗначениеЗаполнено(НоваяСтрока.ПоказательБюджетов) Тогда
		ОбъектУчета = НоваяСтрока.ПоказательБюджетов;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда
		ОбъектУчета = НоваяСтрока.СтатьяБюджетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыУчета = КэшРеквизитовСтатей[ОбъектУчета];
	Если РеквизитыУчета = Неопределено Тогда
	
		Реквизиты = Новый Структура("АналитикаЗаполнениеЕдиницы, УчитыватьПоКоличеству, 
									|АналитикаЕдиницыИзмерения, ЕдиницаИзмеренияОпределяетсяАналитикой,
									|ЕдиницаИзмерения", 
									"АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения");
		
		РеквизитыУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектУчета, РеквизитыУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыУчета.УчитыватьПоКоличеству Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыУчета.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Возврат РеквизитыУчета.ЕдиницаИзмерения;
	КонецЕсли;
	
	ИмяПоля = ИмяПоляБюджетногоОтчета(РеквизитыУчета.АналитикаЕдиницыИзмерения);
	Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = НоваяСтрока[ИмяПоля];
		Если ЗначениеЗаполнено(ЗначениеПоля)
			И ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
			Возврат НоваяСтрока[ИмяПоля][РеквизитыУчета.АналитикаЗаполнениеЕдиницы];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Процедура ЗаполнитьПризнакиСуммаКоличествоФормулы(СтруктураЯчеек)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СтруктураЯчеек.Строка КАК Строка,
	                      |	СтруктураЯчеек.Колонка КАК Колонка,
	                      |	СтруктураЯчеек.ФлагСумма,
	                      |	СтруктураЯчеек.ФлагКоличество,
	                      |	СтруктураЯчеек.ОперандСтрока,
	                      |	СтруктураЯчеек.ОперандКолонка,
	                      |	СтруктураЯчеек.ОсновнойЭлемент,
	                      |	СтруктураЯчеек.СложнаяТаблица
	                      |ПОМЕСТИТЬ СтруктураЯчеек
	                      |ИЗ
	                      |	&СтруктураЯчеек КАК СтруктураЯчеек
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Строка,
	                      |	Колонка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТаблицаОсновныхЭлементов.Строка,
	                      |	ТаблицаОсновныхЭлементов.Колонка,
	                      |	МАКСИМУМ(ТаблицаОсновныхЭлементов.СложнаяТаблица) КАК СложнаяТаблица,
	                      |	МАКСИМУМ(ТаблицаФлагов.ФлагСумма) КАК ФлагСумма,
	                      |	МАКСИМУМ(ТаблицаФлагов.ФлагКоличество) КАК ФлагКоличество
	                      |ПОМЕСТИТЬ ТаблицаОсновныхЭлементов
	                      |ИЗ
	                      |	СтруктураЯчеек КАК ТаблицаОсновныхЭлементов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураЯчеек КАК ТаблицаФлагов
	                      |		ПО ТаблицаОсновныхЭлементов.ОперандСтрока = ТаблицаФлагов.Строка
	                      |			И ТаблицаОсновныхЭлементов.ОперандКолонка = ТаблицаФлагов.Колонка
	                      |ГДЕ
	                      |	(ВЫРАЗИТЬ(ТаблицаОсновныхЭлементов.Строка КАК Справочник.ЭлементыФинансовыхОтчетов).ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)
	                      |			ИЛИ ВЫРАЗИТЬ(ТаблицаОсновныхЭлементов.Колонка КАК Справочник.ЭлементыФинансовыхОтчетов).ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТаблицаОсновныхЭлементов.Колонка,
	                      |	ТаблицаОсновныхЭлементов.Строка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТаблицаОсновныхЭлементов.Строка,
	                      |	ТаблицаОсновныхЭлементов.Колонка,
	                      |	ВЫБОР
	                      |		КОГДА ТаблицаОсновныхЭлементов.СложнаяТаблица = ИСТИНА
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ТаблицаОсновныхЭлементов.ФлагСумма
	                      |	КОНЕЦ КАК ФлагСумма,
	                      |	ВЫБОР
	                      |		КОГДА ТаблицаОсновныхЭлементов.СложнаяТаблица = ИСТИНА
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ТаблицаОсновныхЭлементов.ФлагКоличество
	                      |	КОНЕЦ КАК ФлагКоличество
	                      |ИЗ
	                      |	ТаблицаОсновныхЭлементов КАК ТаблицаОсновныхЭлементов");
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек);
	
	СтрокиКРасчету = Запрос.Выполнить().Выбрать();
	Пока СтрокиКРасчету.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Истина, СтрокиКРасчету.Строка, СтрокиКРасчету.Колонка);
		НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтрокиКРасчету, "ФлагСумма, ФлагКоличество");
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, ДеревоСтрок, Колонка)
	
	СтруктураЯчеек 					= Параметры.СтруктураЯчеек;
	ИсточникиДанных 				= Параметры.ИсточникиДанных;
	ИсточникиПериодовГруппировок 	= Параметры.ИсточникиПериодовГруппировок;
	Родитель 						= Параметры.Родитель;
	ТаблицаНастроек 				= Параметры.ТаблицаНастроек;
	КэшДопРеквизитов 				= Параметры.КэшРеквизитов;
	
	КэшРеквизитовСтатейВалюты = Неопределено;
	Параметры.Свойство("КэшРеквизитовСтатейВалюты", КэшРеквизитовСтатейВалюты);
	КэшРеквизитовСтатейЕдИзм = Неопределено;
	Параметры.Свойство("КэшРеквизитовСтатейЕдИзм", КэшРеквизитовСтатейЕдИзм);
	
	Если КэшРеквизитовСтатейВалюты = Неопределено Тогда
		КэшРеквизитовСтатейВалюты = Новый Соответствие;
		Параметры.Вставить("КэшРеквизитовСтатейВалюты", КэшРеквизитовСтатейВалюты);
	КонецЕсли;
	
	Если КэшРеквизитовСтатейЕдИзм = Неопределено Тогда
		КэшРеквизитовСтатейЕдИзм = Новый Соответствие;
		Параметры.Вставить("КэшРеквизитовСтатейЕдИзм", КэшРеквизитовСтатейЕдИзм);
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева из ДеревоСтрок.Строки Цикл
		
		Строка = СтрокаДерева.Ссылка;
		ПодчиненныеСтроки = ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, СтрокаДерева, Колонка);
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		// определение базового элемента ячейки
		Элемент = Неопределено;
		РассчитатьПоПодчиненным = 0;
		// 0 - не рассчитывать
		// 1 - сумма по измерению
		// 2 - обработка групп
		
		Если Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			РассчитатьПоПодчиненным = 2;
		
		ИначеЕсли Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			РассчитатьПоПодчиненным = 2;
		
		ИначеЕсли Не ЗначениеЗаполнено(Родитель)
			ИЛИ Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
			
			Элемент = Строка;
			Пока ЗначениеЗаполнено(Элемент) Цикл
				Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
					Прервать;
				КонецЕсли;
				Элемент = Элемент.Родитель;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				РассчитатьПоПодчиненным = 1;
			КонецЕсли;
			
		ИначеЕсли Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках Тогда
			
			Элемент = Колонка;
			Пока ЗначениеЗаполнено(Элемент) Цикл
				Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
					ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
					Прервать;
				КонецЕсли;
				Элемент = Элемент.Родитель;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				РассчитатьПоПодчиненным = 1;
			КонецЕсли;
			
		ИначеЕсли Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			СтруктураПоиска = Новый Структура("Строка, Колонка, Родитель", Строка, Колонка, Родитель);
			НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				Элемент = НайденныеСтроки[0].Элемент;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Если Не РассчитатьПоПодчиненным Тогда
				Продолжить;
			КонецЕсли;
			Если Не РассчитатьПоПодчиненным = 2 Тогда
				Если Не МожноСуммироватьПодчиненныеСтроки(ПодчиненныеСтроки) Тогда
					Продолжить;
				КонецЕсли;
				Если Не ПодчиненныеСтроки.Количество() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = СтруктураЯчеек.Добавить();
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.Колонка = Колонка;
		
		НоваяСтрока.СложнаяТаблица = Параметры.СложнаяТаблица;
		
		ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(НоваяСтрока, Строка, КэшДопРеквизитов, Параметры.РежимФормирования);
		ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(НоваяСтрока, Колонка, КэшДопРеквизитов, Параметры.РежимФормирования);
		
		НоваяСтрока.ВалютаВывода = ВалютаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатейВалюты);
		
		Если НоваяСтрока.Владелец().Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			НоваяСтрока.ЕдиницаИзмерения = ЕдиницаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатейЕдИзм);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент) Тогда
			
			НоваяСтрока.ВидЭлемента = Элемент.ВидЭлемента;
			
			НоваяСтрока.ОбратныйЗнак = Элемент.ОбратныйЗнак;
			Показатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВыводимыеПоказатели", КэшДопРеквизитов);
			
			НоваяСтрока.ФлагСумма = Истина;
			Если Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество Тогда
				НоваяСтрока.ФлагСумма = Ложь;
				НоваяСтрока.ФлагКоличество = Истина;
			ИначеЕсли Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма Тогда
				НоваяСтрока.ФлагКоличество = Истина;
			КонецЕсли;
			
			Если Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма
				ИЛИ Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма Тогда
				Валюта = НоваяСтрока.Валюта;
				ВалютаВвода = НоваяСтрока.ВалютаВывода;
				Если ЗначениеЗаполнено(Валюта)
					И ЗначениеЗаполнено(ВалютаВвода) Тогда
					Если Валюта <> ВалютаВвода Тогда
						НоваяСтрока.ФлагСумма = Ложь;
						НоваяСтрока.ФлагКоличество = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
				НоваяСтрока.ФлагСтатьяБюджетов = "заполнить";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
				НоваяСтрока.ФлагПоказательБюджетов = "заполнить";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
				НоваяСтрока.СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СтатьяБюджетов", КэшДопРеквизитов);
				НоваяСтрока.ФлагСтатьяБюджетов = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
				НоваяСтрока.ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ПоказательБюджетов", КэшДопРеквизитов);
				НоваяСтрока.ФлагПоказательБюджетов = "отобрать";
			КонецЕсли;
			
		Иначе
			НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
			
		КонецЕсли;
		
		ЗаполнитьСведенияОбИсточникеДанных(НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент, 
																	ПодчиненныеСтроки, КэшДопРеквизитов, Параметры);
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

Функция МожноСуммироватьПодчиненныеСтроки(ПодчиненныеСтроки)
	
	МожноСуммировать = Истина;
	ПредыдущееПолеИсточника = Неопределено;
	Для Каждого Строка из ПодчиненныеСтроки Цикл
		Если ПредыдущееПолеИсточника <> Неопределено
			И Строка.ПолеИсточника <> ПредыдущееПолеИсточника Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		ПредыдущееПолеИсточника = Строка.ПолеИсточника;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВычислитьЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы)
	
	НайденнаяПозиция = Найти(ВРег(Формула), ВРег(ИмяОперанда));
	ОкончаниеФормулы = НайденнаяПозиция + СтрДлина(ИмяОперанда);
	
	// проверка что "ИТОГ" применяется к операнду
	
	НачалоФормулы = 0;
	Сч = НайденнаяПозиция - 5;
	Найдено = Ложь;
	Пока Сч > 0 Цикл
		Если ВРЕГ(Сред(Формула, Сч, 5)) = "ИТОГ(" Тогда
			НачалоФормулы = Сч;
			Найдено = Истина;
			Прервать;
		КонецЕсли;
		ПозицияПроверки = Сч + 4;
		Если СокрЛП(Сред(Формула, ПозицияПроверки, 1)) <> "" Тогда
			Возврат Неопределено; // перед операндом и функцией итог вставлен символ
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Если Не Найдено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(Формула, НачалоФормулы, ОкончаниеФормулы - НачалоФормулы);
	
КонецФункции

Функция ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы)
	Перем ЛокальноеОкончаниеФормулы, ЛокальноеНачалоФормулы;
	
	ЧислоВхождений = СтрЧислоВхождений(ВРег(Формула), ВРег(ИмяОперанда));
	СтрокаПоиска = Формула;
	НачалоФормулы = 0; ОкончаниеФормулы = 0;
	
	Для Сч = 1 по ЧислоВхождений Цикл
		ЧастиФормулы = ВычислитьЧастьФормулыСИтогомИОперандом(СтрокаПоиска, ИмяОперанда, ЛокальноеНачалоФормулы, ЛокальноеОкончаниеФормулы);
		НачалоФормулы = ОкончаниеФормулы + ЛокальноеНачалоФормулы;
		ОкончаниеФормулы = ОкончаниеФормулы + ЛокальноеОкончаниеФормулы;
		Если ЧастиФормулы <> Неопределено Тогда
			Возврат ЧастиФормулы
		КонецЕсли;
		СтрокаПоиска = Сред(СтрокаПоиска, ОкончаниеФормулы);
		ОкончаниеФормулы = ОкончаниеФормулы - 1;
	КонецЦикла;
	
КонецФункции

Функция ОкончаниеФормулы(Формула, ОкончаниеФормулы)
	
	Результат = "";
	Сч = ОкончаниеФормулы;
	Пока Сч < СтрДлина(Формула) Цикл
		Символ = Сред(Формула, Сч, 1);
		Если Символ = ")" Тогда
			Прервать;
		КонецЕсли;
		Результат = Результат + Символ;
		Сч = Сч + 1;
	КонецЦикла;
	
	ОкончаниеФормулы = Сч;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВФункциюИтогТехническуюИнформацию(Формула, СтруктураФлаговПериодов, СтрокаОперанда)
	Перем НачалоФормулы, ОкончаниеФормулы;
	
	СписокДобавленных = Новый Массив;
	
	ИмяОперанда = "[" + СтрокаОперанда.ИмяОперанда + "]";
	ЧастьФункции = ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы);
	
	СоответствиеИменФункций = Новый Соответствие;
	
	Пока ЧастьФункции <> Неопределено Цикл
		
		НовыйОперанд = СтрокаОперанда.Владелец().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОперанд, СтрокаОперанда);
		НовыйОперанд.ИмяОперанда = "ИТОГ_" + Новый УникальныйИдентификатор;
		СписокДобавленных.Добавить(НовыйОперанд);
		
		ВтораяЧастьФормулы = ОкончаниеФормулы(Формула, ОкончаниеФормулы);
		
		КрасивоеИмяОперанда = СтрЗаменить(ЧастьФункции + ВтораяЧастьФормулы + ")", """", "'");
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, "[", "'");
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, "]", "'");
		СоответствиеИменФункций.Вставить(НовыйОперанд.ИмяОперанда, КрасивоеИмяОперанда);
		
		РеальнаяПерваяЧастьФормулы = "ИТОГ(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Префикс, Постфикс, СтрокаДанных, """ + НовыйОперанд.ИмяОперанда + """";
		
		СписокИзмерений = СокрЛП(ВтораяЧастьФормулы);
		СписокИзмерений = СокрЛП(Сред(СписокИзмерений, 2)); // отсекается запятая
		СписокИзмерений = Лев(СписокИзмерений, СтрДлина(СписокИзмерений) - 1); //отсекается последняя ковычка
		СписокИзмерений = Сред(СписокИзмерений, 2); // отсекается первая ковычка
		МассивЗаголовковИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(СписокИзмерений),,Истина, Истина);
		МассивРезультат = Новый Массив;
		Для Каждого Колонка из СтрокаОперанда.Владелец().Колонки Цикл
			Если МассивЗаголовковИзмерений.Найти(ВРег(Колонка.Заголовок)) <> Неопределено Тогда
				// Для суммируемых показателей очистим флаги измерений отчета для суммирования
				// при расчете данных ячеек
				Если СтруктураФлаговПериодов <> Неопределено И
					БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(ВРег(Колонка.Имя), "ПЕРИОД") Тогда
					СтруктураФлаговПериодов.Вставить("Флаг" + Колонка.Имя, "отчет");
				КонецЕсли;
				НовыйОперанд["Флаг" + Колонка.Имя] = "";
				
				МассивРезультат.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		СписокРеальныхИзмерений = СтрСоединить(МассивРезультат);
		РеальнаяВтораяЧастьФормулы = СтрЗаменить(ВтораяЧастьФормулы, СписокИзмерений, СписокРеальныхИзмерений);
		
		НоваяЧастьФункции = РеальнаяПерваяЧастьФормулы + РеальнаяВтораяЧастьФормулы;
		Формула = Лев(Формула, НачалоФормулы - 1) + НоваяЧастьФункции + Сред(Формула, ОкончаниеФормулы);
		ЧастьФункции = ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы);
		
	КонецЦикла;
	
	// Если операнд используется и вне функции ИТОГ - оставим его
	// иначе - удалим
	Если Найти(Формула, ИмяОперанда) Тогда
		СписокДобавленных.Добавить(СтрокаОперанда);
	Иначе
		СтрокаОперанда.Владелец().Удалить(СтрокаОперанда);
	КонецЕсли;
	
	Для Каждого СтрокаОперанда из СписокДобавленных Цикл
		ИмяФормулы = СоответствиеИменФункций.Получить(СтрокаОперанда.ИмяОперанда);
		Если ИмяФормулы <> Неопределено Тогда
			Формула = СтрЗаменить(Формула, СтрокаОперанда.ИмяОперанда, ИмяФормулы);
			СтрокаОперанда.ИмяОперанда = ИмяФормулы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДобавленных;
	
КонецФункции

Функция СтрЗаменитьБезУчетаРегистра(Знач Строка, Знач ПодстрокаПоиска, Знач ПодстрокаЗамены) Экспорт
	
	ПодстрокаПоиска = Строка(ПодстрокаПоиска);
	Если ПустаяСтрока(ПодстрокаПоиска) Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если СтрДлина(Строка) < СтрДлина(ПодстрокаПоиска) Тогда
		Возврат Строка;
	КонецЕсли;
	
	ПодстрокаПоиска = ВРег(ПодстрокаПоиска);
	ДлинаПодстрокиПоиска = СтрДлина(ПодстрокаПоиска);
	
	Результат = "";
	ПрошлиВсюСтроку = Ложь;
	
	Пока Не ПрошлиВсюСтроку Цикл
		Если ВРег(Лев(Строка, ДлинаПодстрокиПоиска)) = ПодстрокаПоиска Тогда
			Результат = Результат + ПодстрокаЗамены;
			Строка = Сред(Строка, ДлинаПодстрокиПоиска + 1);
		Иначе
			Результат = Результат + Лев(Строка, 1);
			Строка = Сред(Строка, 2);
		КонецЕсли;
		ПрошлиВсюСтроку = Строка = "";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВФункциюРазностьДатТехническуюИнформацию(Формула)
	
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "РазностьДат(", "РазностьДат(ПараметрыПериодов, ");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Начало периода данных]", "НачалоПериода");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Конец периода данных]", "КонецПериода");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Граница факт.данных]", "ГраницаФактДанных");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Период группировки]", "ПериодГруппировки");
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов)
	
	Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		СтрокаОперанда.СтатьяБюджетов = Неопределено;
		СтрокаОперанда.ФлагСтатьяБюджетов = "";
		Реквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели");
		СтрокаОперанда.ФлагСумма = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		СтрокаОперанда.ПоказательБюджетов = Неопределено;
		СтрокаОперанда.ФлагПоказательБюджетов = "";
		Реквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели");
		СтрокаОперанда.ФлагСумма = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "СтатьяБюджетов", КэшДопРеквизитов);
		ВыводимыеПоказатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели", КэшДопРеквизитов);
		СтрокаОперанда.СтатьяБюджетов = СтатьяБюджетов;
		СтрокаОперанда.ФлагСтатьяБюджетов = "отобрать";
		СтрокаОперанда.ФлагСумма = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ПоказательБюджетов", КэшДопРеквизитов);
		ВыводимыеПоказатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели", КэшДопРеквизитов);
		СтрокаОперанда.ПоказательБюджетов = ПоказательБюджетов;
		СтрокаОперанда.ФлагПоказательБюджетов = "отобрать";
		СтрокаОперанда.ФлагСумма = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
		
		СтрокаЯчейки = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "СтрокаЯчейки", КэшДопРеквизитов);
		КолонкаЯчейки = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "КолонкаЯчейки", КэшДопРеквизитов);
		СтрокаОперанда.ОперандСтрока = СтрокаЯчейки;
		СтрокаОперанда.ОперандКолонка = КолонкаЯчейки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьЯчейкиОперандовФормулы(КэшДопРеквизитов, НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Операнды)
	
	СтруктураФлаговПериодов = Новый Структура;
	ФлагиОперандов = Новый Массив;
	
	Для Каждого ДанныеОперанда из Операнды Цикл
		
		СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
		
		ВидОперанда = ДанныеОперанда.Операнд.ВидЭлемента;
		Если ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока,,"Формула, ИД_Источника, ПолеИсточника, ФлагСумма, ФлагКоличество, ФлагЗначение, ОбратныйЗнак");
		КонецЕсли;
		ЗаполнитьСведенияОбИсточникеДанных(СтрокаОперанда, ИсточникиДанных, ИсточникиПериодовГруппировок, ДанныеОперанда.Операнд, 
																						Неопределено, КэшДопРеквизитов, Неопределено);
		
		СтрокаОперанда.ИмяОперанда = ДанныеОперанда.Идентификатор;
		СтрокаОперанда.ВидОперанда = ВидОперанда;
		СтрокаОперанда.ОсновнойЭлемент = Ложь;
		
		СтруктураОперанда = Новый Структура("ФлагСумма, ФлагКоличество");
		ЗаполнитьЗначенияСвойств(СтруктураОперанда, СтрокаОперанда);
		ФлагиОперандов.Добавить(СтруктураОперанда);
		
		Если Найти(ВРег(НоваяСтрока.Формула), "ИТОГ(") Тогда
			ДобавленныеИтоги = ДобавитьВФункциюИтогТехническуюИнформацию(НоваяСтрока.Формула, СтруктураФлаговПериодов, СтрокаОперанда);
			Для Каждого СтрокаОперанда из ДобавленныеИтоги Цикл
				НоваяСтрока.СписокОперандов = НоваяСтрока.СписокОперандов + " [" + СтрокаОперанда.ИмяОперанда + "]";
				ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов);
			КонецЦикла;
		Иначе
			НоваяСтрока.СписокОперандов = НоваяСтрока.СписокОперандов + " [" + СтрокаОперанда.ИмяОперанда + "]";
			ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение из СтруктураФлаговПериодов Цикл
		
		НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		
	КонецЦикла;
	
	Возврат ФлагиОперандов;
	
КонецФункции

Процедура ЗаполнитьСведенияОбИсточникеДанных(НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент, 
																		ПодчиненныеСтроки, КэшДопРеквизитов, Параметры)
	
	ТребуетИсточник = Истина;
	НоваяСтрока.ОсновнойЭлемент = Истина;
	
	Если НоваяСтрока.Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
		ИЛИ НоваяСтрока.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
		
		ТребуетИсточник = Ложь;
		
		ТаблицаСтрокаКолонка = Новый ТаблицаЗначений;
		ТаблицаСтрокаКолонка.Колонки.Добавить("Строка");
		ТаблицаСтрокаКолонка.Колонки.Добавить("Колонка");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлементыФинансовыхОтчетов.Ссылка,
		|	ЭлементыФинансовыхОтчетов.Код КАК Код
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Родитель В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				Фильтр.Родитель
		|			ИЗ
		|				Справочник.ЭлементыФинансовыхОтчетов КАК Фильтр
		|			ГДЕ
		|				Фильтр.Ссылка = &Ссылка)
		|	И НЕ ЭлементыФинансовыхОтчетов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		
		Если НоваяСтрока.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			ВидФормулы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																		НоваяСтрока.Колонка, "ФормулаПоГруппе", КэшДопРеквизитов);
			Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Колонка);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
				СтрокаПодч.Колонка = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаПодч.Строка = НоваяСтрока.Строка;
			КонецЦикла;
			
			НоваяСтрока.ОбратныйЗнак = НоваяСтрока.Колонка.ОбратныйЗнак;
			
		Иначе
			ВидФормулы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																		НоваяСтрока.Строка, "ФормулаПоГруппе", КэшДопРеквизитов);

			Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Строка);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
				СтрокаПодч.Колонка = НоваяСтрока.Колонка;
				СтрокаПодч.Строка = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			НоваяСтрока.ОбратныйЗнак = НоваяСтрока.Строка.ОбратныйЗнак;
			
		КонецЕсли;
		
		Если Не ТаблицаСтрокаКолонка.Количество() Тогда
			Формула = "";
		Иначе
			Для Каждого Строка из ТаблицаСтрокаКолонка Цикл
				
				СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
				СтрокаОперанда.ПорядокРасчетаОперанда = ТаблицаСтрокаКолонка.Индекс(Строка);
				СтрокаОперанда.ИмяОперанда = Строка.Строка.НаименованиеДляПечати + 
					?(ЗначениеЗаполнено(Строка.Колонка), "; " + Строка.Колонка.НаименованиеДляПечати, "");
				СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
				СтрокаОперанда.ОсновнойЭлемент = Ложь;
				СтрокаОперанда.ОперандСтрока = Строка.Строка;
				СтрокаОперанда.ОперандКолонка = Строка.Колонка;
				
			КонецЦикла;
			Формула = Перечисления.ВидыФормулБюджетирования.ИмяФункции(ВидФормулы) + "(МассивЗначений)";
		КонецЕсли;
		
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли НоваяСтрока.Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
		ИЛИ НоваяСтрока.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		
		Если НоваяСтрока.СложнаяТаблица Тогда
			// для сложной таблицы итог храним в поле сумма
			ФлагСумма = Истина;
			ФлагКоличество = Ложь;
		Иначе
			ФлагСумма = Ложь;
			ФлагКоличество = Ложь;
			Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
				ФлагСумма = ФлагСумма ИЛИ ПодчиненнаяСтрока.ФлагСумма;
				ФлагКоличество = ФлагКоличество ИЛИ ПодчиненнаяСтрока.ФлагКоличество;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.ФлагСумма = ФлагСумма;
		НоваяСтрока.ФлагКоличество = ФлагКоличество;
		
		ТребуетИсточник = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлементыФинансовыхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Родитель = &Ссылка
		|	И ЭлементыФинансовыхОтчетов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)";
		
		СтрокаФормулы = Неопределено;
		КолонкаФормулы = Неопределено;
		
		Если НоваяСтрока.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			
			Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Колонка);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаФормулы = НоваяСтрока.Строка;
				КолонкаФормулы = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
		Иначе
			
			Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Строка);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КолонкаФормулы = НоваяСтрока.Колонка;
				СтрокаФормулы = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаФормулы = Неопределено Тогда
			Формула = "";
		Иначе
			
			СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
			СтрокаОперанда.ИмяОперанда = НСтр("en='Formula by group';ru='Формула по группе'");
			СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
			СтрокаОперанда.ОсновнойЭлемент = Ложь;
			СтрокаОперанда.ОперандСтрока = СтрокаФормулы;
			СтрокаОперанда.ОперандКолонка = КолонкаФормулы;
			Формула = "[" + СтрокаОперанда.ИмяОперанда + "]";
			
		КонецЕсли;
		
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли Не ЗначениеЗаполнено(Элемент) Тогда // расчет по подчиненным строкам
		
		ТребуетИсточник = Ложь;
		
		НоваяСтрока.ФлагКоличество = Ложь;
		НоваяСтрока.ФлагСумма = Ложь;
		
		Формула = "";
		ПорядковыйНомерСтроки = 0;
		Для Каждого Строка из ПодчиненныеСтроки Цикл
			
			ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
			СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
			СтрокаОперанда.ИмяОперанда = НСтр("en='Nested row';ru='Вложенная строка'") + " #" + ПорядковыйНомерСтроки;
			СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
			СтрокаОперанда.ОсновнойЭлемент = Ложь;
			СтрокаОперанда.ОперандСтрока = Строка.Строка;
			СтрокаОперанда.ОперандКолонка = Строка.Колонка;
			Формула = Формула + "СУММА([" + СтрокаОперанда.ИмяОперанда + "]) + ";
			
			НоваяСтрока.ФлагКоличество = НоваяСтрока.ФлагКоличество ИЛИ Строка.ФлагКоличество;
			НоваяСтрока.ФлагСумма = НоваяСтрока.ФлагСумма ИЛИ Строка.ФлагСумма;
			
		КонецЦикла;
		
		Формула = Лев(Формула, СтрДлина(Формула) - 3);
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
		Для Каждого Периодичность из Параметры.ОписаниеОтчета.Периодичности Цикл
			Колонка = "Период" + Периодичность;
			Если НоваяСтрока["Флаг" + Колонка] = "заполнить" Тогда
				НоваяСтрока["Флаг" + Колонка] = "отчет";
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		
		ТребуетИсточник = Ложь;
		
		Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Формула", КэшДопРеквизитов);
		Если Найти(ВРег(Формула), "ИТОГ(")
			ИЛИ Найти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
			НоваяСтрока.ПредставлениеФормулы = Формула;
		КонецЕсли;
		НоваяСтрока.Формула = Формула;
		ФлагиОперандов = ЗаполнитьЯчейкиОперандовФормулы(КэшДопРеквизитов, НоваяСтрока, 
															ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент.ОперандыФормулы);
		Если Найти(ВРег(НоваяСтрока.Формула), "РАЗНОСТЬДАТ(") Тогда
			ДобавитьВФункциюРазностьДатТехническуюИнформацию(НоваяСтрока.Формула);
		КонецЕсли;
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		
		ОперандыФлагСумма = Ложь;
		ОперандыФлагКоличество = Ложь;
		Для Каждого ПодчиненнаяСтрока из ФлагиОперандов Цикл
			ОперандыФлагСумма = ОперандыФлагСумма ИЛИ ПодчиненнаяСтрока.ФлагСумма;
			ОперандыФлагКоличество = ОперандыФлагКоличество ИЛИ ПодчиненнаяСтрока.ФлагКоличество;
		КонецЦикла;
		
		Если ОперандыФлагКоличество И Не ОперандыФлагСумма Тогда
			ФлагСумма = Ложь;
			ФлагКоличество = Истина;
		Иначе
			ФлагСумма = Истина;
			ФлагКоличество = Ложь;
		КонецЕсли;
		
		НоваяСтрока.ФлагКоличество = ФлагКоличество;
		НоваяСтрока.ФлагСумма = ФлагСумма;
			
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		НоваяСтрока.ПолеИсточника = "Оборот";
		РасчетЗаполнение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СпособЗаполнения", КэшДопРеквизитов);
		
		НоваяСтрока.РасчетЗаполнение = "";
		Если ПодчиненныеСтроки <> Неопределено 
			И ПодчиненныеСтроки.Количество() Тогда
			НоваяСтрока.РасчетЗаполнение = "итог";
		ИначеЕсли РасчетЗаполнение = 1 Тогда
			НоваяСтрока.РасчетЗаполнение = "пересчет";
		ИначеЕсли РасчетЗаполнение = 2 Тогда
			НоваяСтрока.РасчетЗаполнение = "заполнение";
		КонецЕсли;
		
		// для операндов формулы не предусмотрены
		Если Параметры <> Неопределено Тогда
			
			РежимыФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов;
			
			ДобавитьФормулуРасчета = НоваяСтрока.РасчетЗаполнение = "пересчет" И Параметры.РежимФормирования = РежимыФормирования.Документ;
			ДобавитьФормулуРасчета = ДобавитьФормулуРасчета ИЛИ 
				(НоваяСтрока.РасчетЗаполнение = "заполнение" И Параметры.РежимФормирования = РежимыФормирования.Заполнение);
			ДобавитьФормулуРасчета = ДобавитьФормулуРасчета ИЛИ 
				(НоваяСтрока.РасчетЗаполнение = "пересчет" И Параметры.РежимФормирования = РежимыФормирования.Заполнение);
			
			Если ДобавитьФормулуРасчета Тогда
				
				Если НоваяСтрока.РасчетЗаполнение = "заполнение" Тогда
					НоваяСтрока.ФлагСтатьяБюджетов = ""; //статья нужна только справочно, отборы по ней не нужны
				КонецЕсли;
				
				Если Параметры.РежимФормирования = РежимыФормирования.Заполнение Тогда
					НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
				КонецЕсли;
				
				Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Формула", КэшДопРеквизитов);
				Если Найти(ВРег(Формула), "ИТОГ(")
					ИЛИ Найти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
					НоваяСтрока.ПредставлениеФормулы = Формула;
				КонецЕсли;
				НоваяСтрока.Формула = Формула;
				ЗаполнитьЯчейкиОперандовФормулы(КэшДопРеквизитов, НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент.ОперандыФормулы);
				Если Найти(ВРег(НоваяСтрока.Формула), "РАЗНОСТЬДАТ(") Тогда
					ДобавитьВФункциюРазностьДатТехническуюИнформацию(НоваяСтрока.Формула);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		НоваяСтрока.ПолеИсточника = "Оборот";
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		ТипПоказателя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипЗначенияПоказателя", КэшДопРеквизитов);
		Если ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.НачальныйОстаток Тогда
			НоваяСтрока.ПолеИсточника = "НачальныйОстаток";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.КонечныйОстаток Тогда
			НоваяСтрока.ПолеИсточника = "КонечныйОстаток";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Приход Тогда
			НоваяСтрока.ПолеИсточника = "Приход";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Расход Тогда
			НоваяСтрока.ПолеИсточника = "Расход";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Оборот Тогда
			НоваяСтрока.ПолеИсточника = "Оборот";
		КонецЕсли;
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	КонецЕсли;
	
	Если ТребуетИсточник Тогда
		
		// "все статьи" входят в "показатель бюджетов"
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			НайденныйЭлемент = Неопределено;
			КорневойЭлемент = Элемент;
			Пока ЗначениеЗаполнено(КорневойЭлемент) Цикл
				Если КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
					Прервать;
				КонецЕсли;
				КорневойЭлемент = КорневойЭлемент.Родитель;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(КорневойЭлемент) Тогда
				КорневойЭлемент = Элемент;
				Пока ЗначениеЗаполнено(КорневойЭлемент) Цикл
					Если КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
						ИЛИ КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
						Прервать;
					КонецЕсли;
					КорневойЭлемент = КорневойЭлемент.Родитель;
				КонецЦикла;
				Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
					НайденныйЭлемент = КорневойЭлемент;
				КонецЕсли;
			Иначе
				НайденныйЭлемент = КорневойЭлемент;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементПоиска = Элемент;
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭлементПоиска = НайденныйЭлемент;
		КонецЕсли;
		
		Для Каждого Источник из ИсточникиДанных Цикл
			Если Источник.СписокЭлементов.Найти(ЭлементПоиска) <> Неопределено Тогда
				НоваяСтрока.ИД_Источника = Источник.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Источник из ИсточникиПериодовГруппировок Цикл
			Если Источник.СписокЭлементов.Найти(ЭлементПоиска) <> Неопределено Тогда
				НоваяСтрока.ИД_ИсточникаПериодов = Источник.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТипКолонкиСтруктурыЯчеек(Имя, Аналитика = Ложь)
	
	МассивТипов = Новый Массив;
	Классификатор = Неопределено;
	
	Если Имя = "ОсновнойЭлемент"
		ИЛИ Имя = "ОбратныйЗнак"
		ИЛИ Имя = "ПризнакИспользования" Тогда
		МассивТипов.Добавить(Тип("Булево"));
	ИначеЕсли Имя = "Строка" или Имя = "Колонка" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	ИначеЕсли Имя = "ВидЭлемента" Тогда
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ИначеЕсли Имя = "СтатьяБюджетов" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	ИначеЕсли Имя = "ПоказательБюджетов" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ИначеЕсли Найти(Имя, "Период") Тогда
		МассивТипов.Добавить(Тип("Дата"));
	ИначеЕсли Имя = "Флаг" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(10);
	ИначеЕсли Имя = "Организация" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ИначеЕсли Имя = "Подразделение" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	ИначеЕсли Имя = "Сценарий" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Сценарии"));
	ИначеЕсли Имя = "ЕдиницаИзмерения" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	ИначеЕсли Имя = "Валюта" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Валюты"));
	ИначеЕсли Найти(Имя, "Аналитика") Тогда
		МассивТипов = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
		Возврат Новый ОписаниеТипов(МассивТипов, "Строка", , , Новый КвалификаторыСтроки(120));
	ИначеЕсли Аналитика Тогда
		МассивТипов = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
		Возврат Новый ОписаниеТипов(МассивТипов, "Строка", , , Новый КвалификаторыСтроки(120));
	ИначеЕсли Имя = "Количество" ИЛИ Имя = "Сумма" Тогда
		МассивТипов.Добавить(Тип("Число"));
	ИначеЕсли Имя = "НомерСтроки" Тогда
		МассивТипов.Добавить(Тип("Число"));
	ИначеЕсли Имя = "Формула" Тогда
		МассивТипов.Добавить(Тип("Строка"));
	ИначеЕсли Имя = "ИД_Источника" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(30);
	ИначеЕсли Имя = "ПолеИсточника" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(50);
	ИначеЕсли Имя = "ИмяОперанда" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(150);
	ИначеЕсли Имя = "ВидОперанда" Тогда
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ИначеЕсли Имя = "ОперандСтрока"
		ИЛИ Имя = "ОперандКолонка" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	ИначеЕсли Имя = "ОбщиеИзмерения"
		ИЛИ Имя = "СписокОперандов" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(1000);
	ИначеЕсли Имя = "ИсточникиРасчета"
		ИЛИ Имя = "Примечание" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(1000);
	Иначе
		ТекстНСТР = НСтр("en='Unknown column type structure of cells';ru='Неизвестный тип колонки структуры ячеек'");
		ВызватьИсключение ТекстНСТР;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Классификатор) Тогда
		Возврат Новый ОписаниеТипов(МассивТипов,,,,Классификатор);
	Иначе
		Возврат Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецФункции

Функция ЭтоФиксированныйЭлемент(Знач СтрокаТекущегоЭлемента) Экспорт
	
	Если ТипЗнч(СтрокаТекущегоЭлемента) = Тип("Строка") Тогда
		АдресСтруктурыЭлемента = СтрокаТекущегоЭлемента;
		ВидЭлемента = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента).ВидЭлемента;
	Иначе
		ВидЭлемента = СтрокаТекущегоЭлемента.ВидЭлемента;
		АдресСтруктурыЭлемента = СтрокаТекущегоЭлемента.АдресСтруктурыЭлемента;
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														АдресСтруктурыЭлемента, "ТипИзмерения");
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			ЗначениеПериода = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														АдресСтруктурыЭлемента, "ЗначениеПериода");
			Если ЗначениеПериода <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьИмяИзмерения(КэшДопРеквизиты, Элемент)
	
	Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		Возврат "СтатьяБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		Возврат "ПоказательБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		Возврат "СтатьяБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		Возврат "ПоказательБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат "Организация";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Периодичность", КэшДопРеквизиты);
			Возврат "Период" + Периодичность;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат "Подразделение";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат "Сценарий";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизиты);
			ИмяАналитики = ИмяПоляБюджетногоОтчета(ВидАналитики);
			Возврат ИмяАналитики;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
			ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизиты);
			ИмяАналитики = ИмяПоляБюджетногоОтчета(ВидАналитики);
			Возврат ИмяАналитики;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ИмяИзмерения", КэшДопРеквизиты);
			Возврат ИмяИзмерения;
			
		КонецЕсли;
	Иначе
		ТекстНСТР = НСтр("en='Unknown dimension: %1';ru='Неизвестное измерение: %1'");
		Ошибка = СтрШаблон(ТекстНСТР, Элемент);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИсточникиРасчета(СтруктураЯчеек, Ячейка, ВключатьНефинансовые, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли;
	
	Если Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
		ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
		ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Ложь, Ячейка.Строка, Ячейка.Колонка);
		ПодчиненныеСтроки = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
				НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(
					Новый Структура("ОсновнойЭлемент, Строка, Колонка", 
					Истина, ПодчиненнаяСтрока.ОперандСтрока, ПодчиненнаяСтрока.ОперандКолонка));
				Для Каждого СтрокаСсылки из НайденныеСтроки Цикл
					ПолучитьИсточникиРасчета(СтруктураЯчеек, СтрокаСсылки, Ложь, Результат);
				КонецЦикла;
			Иначе
				Если Результат.Найти(ПодчиненнаяСтрока.ИД_Источника) = Неопределено Тогда
					Результат.Добавить(ПодчиненнаяСтрока.ИД_Источника);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Результат.Найти(Ячейка.ИД_Источника) = Неопределено Тогда
			Результат.Добавить(Ячейка.ИД_Источника);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПолныйСписокИзмеренийЯчейки(КэшДопРеквизиты, Знач Строка, Знач Колонка)
	
	Массив = Новый Массив;
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ИсходнаяСтрока = Строка;
	ИсходнаяКолонка = Колонка;
	
	Пока ЗначениеЗаполнено(Строка)
		И Не Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Цикл
		
		Если Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если Строка.ЗначениеАналитики <> ИсходнаяСтрока.ЗначениеАналитики Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Строка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Строка = Строка.Родитель;
		
	КонецЦикла;
	
	Пока ЗначениеЗаполнено(Колонка)
		И Не Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если Колонка.ЗначениеАналитики <> ИсходнаяСтрока.ЗначениеАналитики Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Колонка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Колонка = Колонка.Родитель;
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, Ячейка, ЯчейкиСсылки = Неопределено)
	
	СтруктураПоиска = Новый Структура("ОперандСтрока, ОперандКолонка", Ячейка.Строка, Ячейка.Колонка);
	ЯчейкиССсылками = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Если ЯчейкиСсылки = Неопределено Тогда
		ЯчейкиСсылки = Новый ТаблицаЗначений;
		ЯчейкиСсылки.Колонки.Добавить("Строка");
		ЯчейкиСсылки.Колонки.Добавить("Колонка");
		ЯчейкиСсылки.Колонки.Добавить("ОбщиеИзмерения");
		ЯчейкиСсылки.Индексы.Добавить("Строка, Колонка");
	КонецЕсли;
	
	Для Каждого ЯчейкаССсылкой из ЯчейкиССсылками Цикл
		ПоискВСсылках = Новый Структура("Строка, Колонка");
		ЗаполнитьЗначенияСвойств(ПоискВСсылках, ЯчейкаССсылкой);
		Если ЯчейкиСсылки.НайтиСтроки(ПоискВСсылках).Количество() Тогда
			Продолжить;
		КонецЕсли;
		ПоискВСсылках.Вставить("ОсновнойЭлемент", Истина);
		ПоискВСсылках.Вставить("РасчетЗаполнение", "пересчет");
		НайденнаяСтрока = СтруктураЯчеек.НайтиСтроки(ПоискВСсылках);
		Если НЕ НайденнаяСтрока.Количество() Тогда
			Продолжить;
		КонецЕсли;
		НоваяЯчейка = ЯчейкиСсылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЯчейка, НайденнаяСтрока[0]);
		НоваяЯчейка.ОбщиеИзмерения = ЯчейкаССсылкой.ОбщиеИзмерения;
		СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, НоваяЯчейка, ЯчейкиСсылки);
	КонецЦикла;
	
	Возврат ЯчейкиСсылки;
	
КонецФункции

Функция ПолучитьСтруктуруЯчеекВидаБюджета(ВидБюджета, ИсточникиДанных, ИсточникиПериодовГруппировок, ОписаниеОтчета, РежимФормирования)
	
	ДеревоЭлементов = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
#Область Подготовка_таблицы

	МассивОсновныхКолонок = Новый Массив;

	СтруктураЯчеек = Новый ТаблицаЗначений;
	
	СтруктураЯчеек.Колонки.Добавить("ОсновнойЭлемент", 		ТипКолонкиСтруктурыЯчеек("ОсновнойЭлемент"));
	СтруктураЯчеек.Колонки.Добавить("Строка", 				ТипКолонкиСтруктурыЯчеек("Строка"));
	СтруктураЯчеек.Колонки.Добавить("Колонка", 				ТипКолонкиСтруктурыЯчеек("Колонка"));
	МассивОсновныхКолонок.Добавить("ОсновнойЭлемент");
	МассивОсновныхКолонок.Добавить("Строка");
	МассивОсновныхКолонок.Добавить("Колонка");
	
	СтруктураЯчеек.Колонки.Добавить("РасчетЗаполнение", 	ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("СложнаяТаблица", 		ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	
	СтруктураЯчеек.Колонки.Добавить("ВидЭлемента", 			ТипКолонкиСтруктурыЯчеек("ВидЭлемента"));
	СтруктураЯчеек.Колонки.Добавить("ОбратныйЗнак", 		ТипКолонкиСтруктурыЯчеек("ОбратныйЗнак"));
	МассивОсновныхКолонок.Добавить("ВидЭлемента");
	
	СтруктураЯчеек.Колонки.Добавить("СтатьяБюджетов", 			ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	СтруктураЯчеек.Колонки.Добавить("ПоказательБюджетов", 		ТипКолонкиСтруктурыЯчеек("ПоказательБюджетов"));
	МассивОсновныхКолонок.Добавить("СтатьяБюджетов");
	МассивОсновныхКолонок.Добавить("ПоказательБюджетов");
	
	// валюта ячейки (не измерение). Служит для контроля ввода в разных валютах
	СтруктураЯчеек.Колонки.Добавить("ВалютаВывода", 		ТипКолонкиСтруктурыЯчеек("Валюта"));
	
	СтруктураЯчеек.Колонки.Добавить("ФлагСтатьяБюджетов", 			ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("ФлагПоказательБюджетов", 		ТипКолонкиСтруктурыЯчеек("Флаг"));
	МассивОсновныхКолонок.Добавить("ФлагСтатьяБюджетов");
	МассивОсновныхКолонок.Добавить("ФлагПоказательБюджетов");
	
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		СтруктураЯчеек.Колонки.Добавить("Период" + Измерение, ТипКолонкиСтруктурыЯчеек("Период"), Строка(Измерение));
		СтруктураЯчеек.Колонки.Добавить("ФлагПериод" + Измерение, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("ВыражениеПериода" + Измерение, ТипКолонкиСтруктурыЯчеек("Количество"));
		МассивОсновныхКолонок.Добавить("ВыражениеПериода" + Измерение);
		МассивОсновныхКолонок.Добавить("Период" + Измерение);
		МассивОсновныхКолонок.Добавить("ФлагПериод" + Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		СтруктураЯчеек.Колонки.Добавить(Измерение, ТипКолонкиСтруктурыЯчеек(Измерение), Измерение);
		СтруктураЯчеек.Колонки.Добавить("Флаг" + Измерение, ТипКолонкиСтруктурыЯчеек("Флаг"));
		МассивОсновныхКолонок.Добавить(Измерение);
		МассивОсновныхКолонок.Добавить("Флаг" + Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяИзмерения = ИмяПоляБюджетногоОтчета(Измерение);
		СтруктураЯчеек.Колонки.Добавить(ИмяИзмерения, ТипКолонкиСтруктурыЯчеек(ИмяИзмерения, Истина), Строка(Измерение));
		СтруктураЯчеек.Колонки.Добавить("Флаг" + ИмяИзмерения, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("Родитель" + ИмяИзмерения, ТипКолонкиСтруктурыЯчеек("Строка"));
		МассивОсновныхКолонок.Добавить(ИмяИзмерения);
		МассивОсновныхКолонок.Добавить("Флаг" + ИмяИзмерения);
		МассивОсновныхКолонок.Добавить("Родитель" + ИмяИзмерения);
	КонецЦикла;
	
	СтруктураЯчеек.Колонки.Добавить("ФлагКоличество", 	ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	СтруктураЯчеек.Колонки.Добавить("ФлагСумма", 		ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	СтруктураЯчеек.Колонки.Добавить("ФлагЗначение", 	ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	
	СтруктураЯчеек.Колонки.Добавить("Формула", 			ТипКолонкиСтруктурыЯчеек("Формула"));
	СтруктураЯчеек.Колонки.Добавить("ПредставлениеФормулы", ТипКолонкиСтруктурыЯчеек("Формула"));
	
	СтруктураЯчеек.Колонки.Добавить("ИД_Источника", 		ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	СтруктураЯчеек.Колонки.Добавить("ИД_ИсточникаПериодов", ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	СтруктураЯчеек.Колонки.Добавить("ПолеИсточника", 		ТипКолонкиСтруктурыЯчеек("ПолеИсточника"));
	МассивОсновныхКолонок.Добавить("ИД_Источника");
	МассивОсновныхКолонок.Добавить("ИД_ИсточникаПериодов");
	
	СтруктураЯчеек.Колонки.Добавить("ИмяОперанда", 		ТипКолонкиСтруктурыЯчеек("ИмяОперанда"));
	СтруктураЯчеек.Колонки.Добавить("ВидОперанда", 		ТипКолонкиСтруктурыЯчеек("ВидОперанда"));
	СтруктураЯчеек.Колонки.Добавить("ОперандСтрока", 	ТипКолонкиСтруктурыЯчеек("ОперандСтрока"));
	СтруктураЯчеек.Колонки.Добавить("ОперандКолонка", 	ТипКолонкиСтруктурыЯчеек("ОперандКолонка"));
	СтруктураЯчеек.Колонки.Добавить("ОбщиеИзмерения", 	ТипКолонкиСтруктурыЯчеек("ОбщиеИзмерения"));
	СтруктураЯчеек.Колонки.Добавить("СписокОперандов", 	ТипКолонкиСтруктурыЯчеек("СписокОперандов"));
	МассивОсновныхКолонок.Добавить("ВидОперанда");
	
	// для упорядочивания операндов формул типа "выполнение", "отклонение"
	СтруктураЯчеек.Колонки.Добавить("ПорядокРасчетаОперанда", 	ТипКолонкиСтруктурыЯчеек("Количество"));
	СтруктураЯчеек.Колонки.Добавить("ИндексСтроки", 			ТипКолонкиСтруктурыЯчеек("Количество"));
	МассивОсновныхКолонок.Добавить("ПорядокРасчетаОперанда");
	МассивОсновныхКолонок.Добавить("ИндексСтроки");
	
	// таблица значений ячеек которые надо пересчитывать
	СтруктураЯчеек.Колонки.Добавить("СвязанныеЯчейки");
	
#КонецОбласти
	
#Область Заполнение_таблицы
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЭлементыФинансовыхОтчетов.Элемент,
	                      |	ЭлементыФинансовыхОтчетов.Строка,
	                      |	ЭлементыФинансовыхОтчетов.Колонка,
	                      |	ЭлементыФинансовыхОтчетов.Ссылка.Родитель КАК Родитель
	                      |ИЗ
	                      |	Справочник.ЭлементыФинансовыхОтчетов.ЭлементыТаблицы КАК ЭлементыФинансовыхОтчетов
	                      |ГДЕ
	                      |	ЭлементыФинансовыхОтчетов.Ссылка.Владелец = &ВидБюджета");
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Индексы.Добавить("Строка, Колонка, Родитель");
	
	Элементы = ПолучитьКонечныеЭлементы(ВидБюджета, Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка());
	
	КэшДополнительныеРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	Параметры = Новый Структура;
	Параметры.Вставить("РежимФормирования", 			РежимФормирования);
	Параметры.Вставить("СтруктураЯчеек", 				СтруктураЯчеек);
	Параметры.Вставить("ТаблицаНастроек", 				ТаблицаНастроек);
	Параметры.Вставить("ИсточникиДанных", 				ИсточникиДанных);
	Параметры.Вставить("ИсточникиПериодовГруппировок", 	ИсточникиПериодовГруппировок);
	Параметры.Вставить("КэшРеквизитов", 				КэшДополнительныеРеквизиты);
	Параметры.Вставить("ОписаниеОтчета", 				ОписаниеОтчета);
	Параметры.Вставить("ДеревоСтрок", 					Элементы.Строки);
	Параметры.Вставить("Родитель", 						Неопределено);
	Параметры.Вставить("СложнаяТаблица", 				Ложь);
	
	ЗаполнитьСтруктуруЯчеек(Параметры, Элементы.Колонки);
	
	Таблицы = ПолучитьТаблицыВидаБюджета(ВидБюджета);
	Для Каждого Таблица из Таблицы Цикл
		Элементы = ПолучитьКонечныеЭлементы(ВидБюджета, Таблица.Ссылка);
		Параметры.Вставить("ДеревоСтрок", Элементы.Строки);
		Параметры.Вставить("Колонки", Элементы.Колонки);
		Параметры.Вставить("Родитель", Таблица.Ссылка);
		Параметры.Вставить("СложнаяТаблица", Таблица.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		ЗаполнитьСтруктуруЯчеек(Параметры, Элементы.Колонки);
	КонецЦикла;
	
	ЗаполнитьПризнакиСуммаКоличествоФормулы(СтруктураЯчеек);
	
#КонецОбласти
	
#Область Расчет_полей_по_которым_будет_поиск_данных_при_выводе_отчета

	ИсточникиПроизводныхПоказателей = Новый ТаблицаЗначений;
	ИсточникиПроизводныхПоказателей.Колонки.Добавить("Строка", ТипКолонкиСтруктурыЯчеек("Строка"));
	ИсточникиПроизводныхПоказателей.Колонки.Добавить("Колонка", ТипКолонкиСтруктурыЯчеек("Колонка"));
	ИсточникиПроизводныхПоказателей.Колонки.Добавить("ИД_Источника", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(30)));

	Для Каждого Ячейка из СтруктураЯчеек Цикл
		
		Если Ячейка.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			
			Массив1 = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты,
														Ячейка.ОперандСтрока, Ячейка.ОперандКолонка);
			Массив2 = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты,
														Ячейка.Строка, Ячейка.Колонка);
			
			Результат = "";
			Для Каждого Элемент из Массив1 Цикл
				Если Массив2.Найти(Элемент) <> Неопределено Тогда
					Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
				КонецЕсли;
			КонецЦикла;
			
			Ячейка.ОбщиеИзмерения = Результат;
			
		ИначеЕсли (Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
				ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
				ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа)
				И Ячейка.ОсновнойЭлемент Тогда
			
			ИсточникиРасчета = ПолучитьИсточникиРасчета(СтруктураЯчеек, Ячейка, Ложь);
			Если ПустаяСтрока(ИсточникиРасчета) Тогда
				// в формуле только нефинансовые показатели
				ИсточникиРасчета = ПолучитьИсточникиРасчета(СтруктураЯчеек, Ячейка, Истина);
			КонецЕсли;
			Если ИсточникиРасчета <> Неопределено И ИсточникиРасчета.Количество() Тогда
				Для Каждого ИсточникЯчейки Из ИсточникиРасчета Цикл
					НоваяСтрока = ИсточникиПроизводныхПоказателей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Ячейка);
					НоваяСтрока.ИД_Источника = ИсточникЯчейки;
				КонецЦикла;
			КонецЕсли;
			
			ОбщиеЯчейки = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты, 
																Ячейка.Строка, Ячейка.Колонка);
			Результат = "";
			Для Каждого Элемент из ОбщиеЯчейки Цикл
				Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
			КонецЦикла;
			Ячейка.ОбщиеИзмерения = Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти

	Для Каждого Ячейка из СтруктураЯчеек Цикл
		Если Ячейка.ОсновнойЭлемент Тогда
			Ячейка.СвязанныеЯчейки = СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, Ячейка);
		КонецЕсли;
		Ячейка.ИндексСтроки = СтруктураЯчеек.Индекс(Ячейка);
	КонецЦикла;
	
	МинимальнаяСтруктураЯчеек = СтруктураЯчеек.Скопировать(,СтрСоединить(МассивОсновныхКолонок, ","));
	
	ОставшиесяКолонки = Новый Массив;
	ОставшиесяКолонки.Добавить("ИндексСтроки");
	
	Для Каждого Колонка из СтруктураЯчеек.Колонки Цикл
		Если МассивОсновныхКолонок.Найти(Колонка.Имя) = Неопределено Тогда
			ОставшиесяКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЯчеек = СтруктураЯчеек.Скопировать(,СтрСоединить(ОставшиесяКолонки, ","));
	ПараметрыЯчеек.Индексы.Добавить("ИндексСтроки");
	СтруктураЯчеек = МинимальнаяСтруктураЯчеек;
	
	СтруктураЯчеекПоИсточникам = СтруктураЯчеек.СкопироватьКолонки();
	Для Каждого Ячейка из СтруктураЯчеек Цикл
		Если Ячейка.ОсновнойЭлемент Тогда
			СтруктураПоиска = Новый Структура("Строка, Колонка");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Ячейка);
			НайденныеСтроки = ИсточникиПроизводныхПоказателей.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() Тогда
				Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
					НоваяСтрока = СтруктураЯчеекПоИсточникам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Ячейка);
					НоваяСтрока.ИД_Источника = НайденнаяСтрока.ИД_Источника;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = СтруктураЯчеекПоИсточникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Ячейка);
	КонецЦикла;
	
	СтруктураЯчеекПоИсточникам.Индексы.Добавить("ИндексСтроки");
	СтруктураЯчеекПоИсточникам.Индексы.Добавить("ОсновнойЭлемент, Строка");
	СтруктураЯчеекПоИсточникам.Индексы.Добавить("ОсновнойЭлемент, Строка, Колонка");
	СтруктураЯчеекПоИсточникам.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент");
	
	Возврат Новый Структура("СтруктураЯчеек, ПараметрыЯчеек", СтруктураЯчеекПоИсточникам, ПараметрыЯчеек);
	
КонецФункции

#КонецОбласти

#Область ГенерацияСКДДляПолученияДанных

Процедура ДобавитьПоляТаблицыДанныхПоОписанию(Набор, 
								Описание, 
								ПоляРесурсов)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ФинОтчеты.НовоеПолеНабора(Набор, "ИД_Источника", , , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	ФинОтчеты.НовоеПолеНабора(Набор, "СтатьяБюджетов", , , ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	ФинОтчеты.НовоеПолеНабора(Набор, "ПоказательБюджетов", , , ТипКолонкиСтруктурыЯчеек("ПоказательБюджетов"));
	
	Если Описание.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеНабора(Набор, "Период", , , Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	Для Каждого Измерение из Описание.Измерения Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение, , , ТипКолонкиСтруктурыЯчеек(Измерение));
	КонецЦикла;
	
	Для Каждого Аналитика из Описание.ВидыАналитик Цикл
		ИмяПараметра = ИмяПоляБюджетногоОтчета(Аналитика);
		ФинОтчеты.НовоеПолеНабора(Набор, ИмяПараметра, ИмяПараметра, Строка(Аналитика), ТипКолонкиСтруктурыЯчеек(Аналитика, Истина));
	КонецЦикла;
	
	Для Каждого КлючИЗначение из ПоляРесурсов Цикл
		
		Если КлючИЗначение.Ключ <> "Примечание" Тогда
			ФинОтчеты.НовоеПолеНабора(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , ТипКолонкиСтруктурыЯчеек("Сумма"));
		Иначе
			ФинОтчеты.НовоеПолеНабора(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , ТипКолонкиСтруктурыЯчеек("Примечание"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьРесурсыИВычисляемыеПоля(СКД, СтруктураКолонок, ПоляИсточников, Остатки)
	
	Если СтруктураКолонок <> Неопределено Тогда
		Периодичности = Новый Массив;
		Для Каждого Периодичность из СтруктураКолонок.Периодичности Цикл
			Периодичности.Добавить("Период" + Периодичность);
		КонецЦикла;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", , 		"МИНИМУМ(НомерПоПорядку)");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", , 			"МАКСИМУМ(Примечание)");
	Если ПоляИсточников.Найти("ЗначениеПоказателя") <> Неопределено Тогда
		ФинОтчеты.НовыйРесурс(СКД, "ЗначениеПоказателя", , 	"ВЫБОР 
															|	КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначениеПоказателя) > 1 
															|		ТОГДА ""#Знач"" 
															|	ИНАЧЕ МАКСИМУМ(ЗначениеПоказателя) КОНЕЦ");
	КонецЕсли;
	
	ПоляНабора = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
								|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
								|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляНабора, ПоляИсточников);
	
	Для Каждого КлючИЗначение из ПоляНабора Цикл
		
		Если ПоляИсточников.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ФинОтчеты.НовыйРесурс(СКД, КлючИЗначение.Ключ, , 	"СУММА(ЕстьNULL(" + КлючИЗначение.Ключ + ", 0))");
		КонецЕсли;
		
	КонецЦикла;
	
	Если Остатки Тогда
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаКонечныйОстаток", "0", , "СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0)) +
																			|СУММА(ЕстьNULL(СуммаПриход, 0)) -
																			|СУММА(ЕстьNULL(СуммаРасход, 0))");
		КонецЕсли;
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалКонечныйОстаток", "0", , "СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0)) +
																			|СУММА(ЕстьNULL(СуммаВалПриход, 0)) -
																			|СУММА(ЕстьNULL(СуммаВалРасход, 0))");
		КонецЕсли;
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоКонечныйОстаток", "0", , "СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0)) +
																				 |СУММА(ЕстьNULL(КоличествоПриход, 0)) -
																				 |СУММА(ЕстьNULL(КоличествоРасход, 0))");
		КонецЕсли;
		
	Иначе
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаКонечныйОстаток", "0", , "0");
		КонецЕсли;
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалКонечныйОстаток", "0", , "0");
		КонецЕсли;
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоКонечныйОстаток", "0", , "0");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остатки И Периодичности.Количество() Тогда
	
		Если ПоляИсточников.Найти("СуммаНачальныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаНачальныйОстаток", , 
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаПриход, 0))"",,,""Первая"",""Предыдущая""), 0) - 
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаРасход, 0))"",,,""Первая"",""Предыдущая""), 0)");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаВалНачальныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалНачальныйОстаток", , 
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалПриход, 0))"",,,""Первая"",""Предыдущая""), 0) - 
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалРасход, 0))"",,,""Первая"",""Предыдущая""), 0)");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаКонечныйОстаток", ,
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаПриход, 0))"",,,""Первая"",""Текущая"") - 
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаРасход, 0))"",,,""Первая"",""Текущая"")");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалКонечныйОстаток", ,
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалПриход, 0))"",,,""Первая"",""Текущая"") - 
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалРасход, 0))"",,,""Первая"",""Текущая"")");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("КоличествоНачальныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "КоличествоНачальныйОстаток", , 
			"ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоПриход, 0))"",,,""Первая"",""Предыдущая""), 0) - 
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоРасход, 0))"",,,""Первая"",""Предыдущая""), 0)");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "КоличествоКонечныйОстаток", ,
			"ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоПриход, 0))"",,,""Первая"",""Текущая"") - 
			|ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоРасход, 0))"",,,""Первая"",""Текущая"")");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаОборот", "0",,
		"СУММА(ЕстьNULL(СуммаПриход, 0)) - СУММА(ЕстьNULL(СуммаРасход, 0))");
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаВалОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалОборот", "0",,
		"СУММА(ЕстьNULL(СуммаВалПриход, 0)) - СУММА(ЕстьNULL(СуммаВалРасход, 0))");
	КонецЕсли;
	
	Если ПоляИсточников.Найти("КоличествоОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоОборот", "0",,
		"СУММА(ЕстьNULL(КоличествоПриход, 0)) - СУММА(ЕстьNULL(КоличествоРасход, 0))");
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ПоляНабора = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
								|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
								|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
								|СуммаОборот, СуммаВалОборот, КоличествоОборот, 
								|СуммаКонечныйОстаток, СуммаВалКонечныйОстаток, КоличествоКонечныйОстаток,
								|ЗначениеПоказателя");
								
	Для Каждого КлючИЗначение из ПоляНабора Цикл
		
		Если ПоляИсточников.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьПодчиненныйНаборПлановыхОборотов(
										СКДПлановыеДанные,
										БазовыйОбъединенныйНабор,
										Источник, СтруктураКолонокТаблицыДанных,
										Аналитики,
										ПараметрыКУстановке,
										РежимФормирования)
	
	ДляПоказателя = Источник.ТипИсточника = "Остатки";
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ //{РАЗРЕШЕННЫЕ}
	|	""" + Источник.Идентификатор + """ КАК ИД_Источника,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов", "НЕОПРЕДЕЛЕНО") + " КАК ПоказательБюджетов,
	|	Данные.СтатьяБюджетов,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.УчитыватьПоВалюте", 
							"Данные.СтатьяБюджетов.УчитыватьПоВалюте") + " КАК УчитыватьПоВалюте,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.ВалютаОпределяетсяАналитикой", 
							"Данные.СтатьяБюджетов.ВалютаОпределяетсяАналитикой") + " КАК ВалютаОпределяетсяАналитикой,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АдресАналитикиВалюта", 
							"Данные.СтатьяБюджетов.АдресАналитикиВалюта") + " КАК АдресАналитикиВалюта,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АналитикаВалюты.ЗаполнениеВалюты", 
							"Данные.СтатьяБюджетов.АналитикаВалюты.ЗаполнениеВалюты") + " КАК ИсточникЗаполненияВалюты,
	|";
	
	ТекстПолейКомпоновки = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	"ВЫБРАТЬ
	|	ИД_Источника,
	|	ПоказательБюджетов.* КАК ПоказательБюджетов,
	|	СтатьяБюджетов.* КАК СтатьяБюджетов,
	|	УчитыватьПоВалюте КАК УчитыватьПоВалюте,
	|	ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	ИсточникЗаполненияВалюты КАК ИсточникЗаполненияВалюты,
	|";
	
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + 
				?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.УчитыватьПоКоличеству", 
								"Данные.СтатьяБюджетов.УчитыватьПоКоличеству") + " КАК УчитыватьПоКоличеству,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой", 
								"Данные.СтатьяБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой") + " КАК ЕдиницаИзмеренияОпределяетсяАналитикой,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АдресАналитикиКоличество", 
								"Данные.СтатьяБюджетов.АдресАналитикиКоличество") + " КАК АдресАналитикиКоличество,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения", 
								"Данные.СтатьяБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения") + " КАК ИсточникЗаполнениеЕдиницыИзмерения,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.ЕдиницаИзмерения", 
								"Данные.СтатьяБюджетов.ЕдиницаИзмерения") + " КАК ЕдиницаИзмерения,
		|";
		
		ТекстПолейКомпоновки = ТекстПолейКомпоновки +
		"	УчитыватьПоКоличеству КАК УчитыватьПоКоличеству,
		|	ЕдиницаИзмеренияОпределяетсяАналитикой КАК ЕдиницаИзмеренияОпределяетсяАналитикой,
		|	АдресАналитикиКоличество КАК АдресАналитикиКоличество,
		|	ИсточникЗаполнениеЕдиницыИзмерения КАК ИсточникЗаполнениеЕдиницыИзмерения,
		|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|";
	КонецЕсли;
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		
		ТекстПоляАналитики = "ВЫБОР ";
		Для Сч = 1 по 6 Цикл
			ТекстПоляАналитики = ТекстПоляАналитики + "
			|	КОГДА НСИ.АдресТрансляцииАналитики%НомерПоля% = " + Сч + " ТОГДА
			|		Данные.Аналитика" + Сч;
		КонецЦикла;
		ТекстПоляАналитики = ТекстПоляАналитики + "
		|КОНЕЦ";
		
	КонецЕсли;
	
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("Сценарий") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "Сценарий,
		|";
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Сценарий.* КАК Сценарий,
		|";
	КонецЕсли;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		Если Не Найти(Измерение, "Аналитика") Тогда
			Если Измерение = "ЕдиницаИзмерения" Тогда
				// Единицы измерения формируются на уровне
				// общей компоновки
			ИначеЕсли Измерение = "Валюта" Тогда
				ТекстЗапроса = ТекстЗапроса + "Валюта КАК ВалютаХранения,
				|";
				ТекстПолейКомпоновки = ТекстПолейКомпоновки + "ВалютаХранения,
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + Измерение + ",
				|";
				ТекстПолейКомпоновки = ТекстПолейКомпоновки + Измерение + ".* КАК " + Измерение + ",
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// для показателей выводим все аналитики для расчета валюты
	Для Сч = 1 по 6 Цикл
		Если ДляПоказателя Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБОР 
			|	КОГДА 
			|		НЕ НСИ.ТранслироватьАналитику" + Сч + " 
			|	ТОГДА 
			|		НСИ.Аналитика" + Сч + "
			|	ИНАЧЕ 
			|		" + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) + "
			|	КОНЕЦ КАК Аналитика" + Сч + ",
			|	";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "Аналитика" + Сч + ",
			|";
		КонецЕсли;
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Аналитика" + Сч + ".* КАК Аналитика" + Сч + ",
		|";
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		ТекстЗапроса = ТекстЗапроса + Источник.ВыражениеПериодаГруппировки + " КАК Период,
		|	";
		
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Период КАК Период,
		|";
		
	КонецЕсли;
	
	Для Каждого Аналитика из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПараметра = ИмяПоляБюджетногоОтчета(Аналитика);
		ПараметрыКУстановке.Вставить(ИмяПараметра, Аналитика);
		
		ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПараметра, "Данные.");
		
		Если Источник.ТипИсточника = "Остатки" Тогда
			ТекстПоля = СтрЗаменить(ТекстПоля, "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик", 
												"НСИ.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик");
			ТекстПоля = СтрЗаменить(ТекстПоля, "Данные.СтатьяБюджетов.ВидАналитики", 
												"НСИ.СвязанныйПоказательБюджетов.ВидАналитики");
			ТекстПоля = СтрЗаменить(ТекстПоля, "Данные.Аналитика", "ДанныеАналитика");
		
			Для Сч = 1 по 6 Цикл
				ТекстПоля = СтрЗаменить(ТекстПоля, "ДанныеАналитика" + Сч, 
																	" ВЫБОР КОГДА НСИ.ТранслироватьАналитику" + Сч + 
																	" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
																	" ИНАЧЕ НСИ.Аналитика" + Сч + 
																	" КОНЕЦ");
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + " 
		|	" + ТекстПоля + " КАК " + ИмяПараметра + ",
		|";
		
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + ИмяПараметра + " КАК " + ИмяПараметра + ",
		|";
	КонецЦикла;
	
	ТекстПоказателя = "
	|ВЫБОР 
	|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария) ТОГДА
	|	СуммаСценарияОборот
	|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета) ТОГДА
	|	СуммаУпрОборот
	|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеРеглУчета) ТОГДА
	|	СуммаРеглОборот
	|КОНЕЦ";
	
	ПараметрыКУстановке.Вставить("ВариантСумм");
	
	Если НЕ ДляПоказателя Тогда
	
		ТекстЗапроса = ТекстЗапроса + 
		ТекстПоказателя + " КАК СуммаПриход,
		|	0 КАК СуммаРасход,
		|	СуммаВВалютеОборот КАК СуммаВалХраненияПриход,
		|	0 КАК СуммаВалХраненияРасход,
		|	КоличествоОборот КАК КоличествоПриход,
		|	0 КАК КоличествоРасход
		|";
	
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА НСИ.Коэффициент * " + ТекстПоказателя + " ИНАЧЕ 0 КОНЕЦ КАК СуммаПриход,
		|	ВЫБОР КОГДА НСИ.РАСХОД ТОГДА НСИ.Коэффициент * " + ТекстПоказателя + " ИНАЧЕ 0 КОНЕЦ КАК СуммаРасход,
		|	ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА НСИ.Коэффициент * СуммаВВалютеОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВалХраненияПриход,
		|	ВЫБОР КОГДА НСИ.РАСХОД ТОГДА НСИ.Коэффициент * СуммаВВалютеОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВалХраненияРасход,
		|	ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА КоличествоОборот ИНАЧЕ 0 КОНЕЦ КАК КоличествоПриход,
		|	ВЫБОР КОГДА НСИ.РАСХОД ТОГДА КоличествоОборот ИНАЧЕ 0 КОНЕЦ КАК КоличествоРасход
		|	
		|";
		
	КонецЕсли;
	
	ТекстПолейКомпоновки = ТекстПолейКомпоновки + 
	"	СуммаПриход,
	|	СуммаРасход,
	|	СуммаВалХраненияПриход,
	|	СуммаВалХраненияРасход,
	|	КоличествоПриход,
	|	КоличествоРасход
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|//{ПоляКомпоновки}
	|
	|ИЗ 
	|	РегистрНакопления.ОборотыБюджетов.Обороты(
	|		{&ПустаяДата}, 
	|		{&ДатаАктуальности}, АВТО, ПериодПланирования МЕЖДУ " + Источник.ВыражениеНачалоПериода + " и " + Источник.ВыражениеКонецПериода + "
	|";
	
	Если Не ДляПоказателя
		И Источник.Объекты <> Неопределено Тогда
		
		ИмяПараметра = "ВыбранныеСтатьиБюджетов" + Источник.Идентификатор;
		ТекстЗапроса = ТекстЗапроса + "И СтатьяБюджетов В (&" + ИмяПараметра + ")
		|";
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Источник.Объекты);
		ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
		
	КонецЕсли;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		ОтборПоИзмерениям = Неопределено;
		Если Измерение = "ЕдиницаИзмерения" Тогда
			// Единицы измерения формируются на уровне
			// общей компоновки
			Продолжить;
		КонецЕсли;
		Если Источник.Свойство(Измерение, ОтборПоИзмерениям)
			И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
			
			ИмяПараметра = "Выбранные" + Измерение + Источник.Идентификатор;
			ТекстЗапроса = ТекстЗапроса + " И "  + Измерение + " В (&" + ИмяПараметра + ")
			|";
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		ОтборПоИзмерениям = Неопределено;
		ИмяАналитики = ИмяПоляБюджетногоОтчета(Измерение);
		Если Источник.Свойство(ИмяАналитики, ОтборПоИзмерениям)
			И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
			
			ПараметрыКУстановке.Вставить(ИмяАналитики, Измерение);
			ТекстАналитики = ПолучитьТекстПоляВидаАналитики(ИмяАналитики);
			ИмяПараметра = "Выбранные" + ИмяАналитики + Источник.Идентификатор;
			
			ТекстЗапроса = ТекстЗапроса + " И " + ТекстАналитики + " В (&" + ИмяПараметра + ")
			|";
		
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + 
	"		{Статус.*
	|";
	
	СтруктураОтборов = Новый Структура("Сценарий, Организация, Подразделение, Аналитика1,
										|Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6");
	
	Для Каждого КлючИЗначение из СтруктураОтборов Цикл
		
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, КлючИЗначение.Ключ) Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			| " + КлючИЗначение.Ключ + ".* КАК " + КлючИЗначение.Ключ + "_" + Источник.Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Аналитика из Аналитики Цикл
		
		ИмяАналитики = ИмяПоляБюджетногоОтчета(Аналитика);
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики) Тогда
			
			ИмяПараметра = ИмяПоляБюджетногоОтчета(Аналитика);
			ТекстЗапроса = ТекстЗапроса + ", 
			|	" + ПолучитьТекстПоляВидаАналитики(ИмяПараметра) + " КАК " + ИмяПараметра + "_" + Источник.Идентификатор;
			
			ПараметрыКУстановке.Вставить(ИмяПараметра, Аналитика);
			ДобавитьПараметрСхемы(СКДПлановыеДанные, ИмяПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "}) КАК Данные
	|";
	
	Если ДляПоказателя Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиПоказателейБюджетов КАК НСИ
		|	ПО НСИ.СтатьяБюджетов = Данные.СтатьяБюджетов
		|";
		Если Источник.Объекты <> Неопределено Тогда
			
			ИмяПараметра = "ВыбранныеПоказателиБюджетов" + Источник.Идентификатор;
			ТекстЗапроса = ТекстЗапроса + "
			|И НСИ.СвязанныйПоказательБюджетов в (&" + ИмяПараметра + ")";
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Источник.Объекты);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		ТекстЗапросаИсключения = ТекстЗапроса;
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, ", АВТО ,", ", Регистратор ,");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, ТекстПоказателя, "-" + ТекстПоказателя);
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "СуммаВВалютеОборот", "-СуммаВВалютеОборот");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "КоличествоОборот", "-КоличествоОборот");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "//{ПоляКомпоновки}", "");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "//{РАЗРЕШЕННЫЕ}", "");
		
		ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаИсключения + "
		|ГДЕ Регистратор = &Документ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{ПоляКомпоновки}", "{" + ТекстПолейКомпоновки + "}");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{РАЗРЕШЕННЫЕ}", "РАЗРЕШЕННЫЕ");
	
	ТипИсточника = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	Имя = "Набор_План_Обороты_" + Источник.Идентификатор;
	НаборСКД = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, ТипИсточника, Имя);
	НаборСКД.Запрос = ТекстЗапроса;
	
КонецПроцедуры

Функция УдалитьИзСтруктурыНеиспользуемыеКлючи(Структура, МассивДоступных)
	
	КУдалению = Новый Массив;
	Для Каждого КлючиИЗначение из Структура Цикл
		Если МассивДоступных.Найти(КлючиИЗначение.Ключ) = Неопределено Тогда
			КУдалению.Добавить(КлючиИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ из КУдалению Цикл
		Структура.Удалить(Ключ);
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСКДПлановыеДанные(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
									Аналитики, ПараметрыКУстановке, РежимФормирования)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДПлановыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДПлановыеДанные, 
													Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), 
													"Данные");
	
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
									|СуммаВалПриход, СуммаВалРасход, 
									|КоличествоПриход, КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	
	// заполнение наборов - источников данных
	Для Каждого Источник из ИсточникиДанных Цикл
		
		Если Источник.ТипИсточника = "Обороты"
			ИЛИ Источник.ТипИсточника = "Остатки" Тогда
			
			ДобавитьПодчиненныйНаборПлановыхОборотов(СКДПлановыеДанные, БазовыйОбъединенныйНабор, 
													Источник, СтруктураКолонокТаблицыДанных, Аналитики, 
													ПараметрыКУстановке, РежимФормирования);
													
			ДополнительныйОтбор = Источник.ДополнительныйОтбор;
			Если ДополнительныйОтбор <> Неопределено Тогда
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтбор.Отбор, 
																	СКДПлановыеДанные.НастройкиПоУмолчанию.Отбор,
																	Истина, , 
																	"_" + Источник.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяПериода = "Неопределено";
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ИмяПериода = "Период";
	КонецЕсли;
	
	ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ УчитыватьПоКоличеству ТОГДА Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиКоличество = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиКоличество = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиКоличество = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиКоличество = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиКоличество = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиКоличество = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			ИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
	ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "Валюта", 
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА ВалютаХранения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			ИсточникЗаполненияВалюты,
		|			ВалютаХранения)
		|	КОНЕЦ");
		
		
	Если ПоляРесурсов.Свойство("СуммаВалПриход") Тогда
			
		ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "СуммаВалПриход", 
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА СуммаВалХраненияПриход
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВалХраненияПриход,
		|								" + ИмяПериода + ",
		|								ВалютаХранения,
		|								Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА Аналитика6
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ");
		
	КонецЕсли;
		
	Если ПоляРесурсов.Свойство("СуммаВалРасход") Тогда
			
		ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "СуммаВалРасход", 
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА СуммаВалХраненияРасход
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВалХраненияРасход,
		|								" + ИмяПериода + ",
		|								ВалютаХранения,
		|								Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА Аналитика6
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ");
		
	КонецЕсли;
	
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "ВалютаРеглУчета");
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КэшПлановыхКурсов");
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КэшЗначенийАналитик");
	
	// настройка СКД
	Для Каждого КлючИЗначение из ПоляРесурсов Цикл
		ФинОтчеты.НовыйРесурс(СКДПлановыеДанные, КлючИЗначение.Ключ, , 		"СУММА(" + КлючИЗначение.Ключ + ")");
		ФинОтчеты.НовоеПолеВыбора(СКДПлановыеДанные.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ГруппировкаПлановых = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДПлановыеДанные, СтруктураКолонокТаблицыДанных);
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "Период");
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДПлановыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДПлановыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДПлановыеДанные;
	
КонецФункции

Функция Подключаемый_ЗначениеИзАналитики(КэшЗначенийАналитик, ЗначениеАналитики, 
											АдресВАналитике, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеАналитики)
		ИЛИ ТипЗнч(ЗначениеАналитики) = Тип("Строка") Тогда
		
		Возврат ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
	СтруктураРеквизитов = КэшЗначенийАналитик[ЗначениеАналитики];
	Если СтруктураРеквизитов = Неопределено Тогда
		Попытка
			// Если изменят порядок следования или состав аналитик в статье
			// в данных может быть ссылка на элемент типа справочника
			// не имеющий заданного поля
			ЗначениеРезультат = ЗначениеАналитики[АдресВАналитике];
		Исключение
			
			Возврат ЗначениеПоУмолчанию;
			
		КонецПопытки;
		СтруктураРеквизитов = Новый Соответствие;
		СтруктураРеквизитов.Вставить(АдресВАналитике, ЗначениеРезультат);
		КэшЗначенийАналитик.Вставить(ЗначениеАналитики, СтруктураРеквизитов);
		Возврат ЗначениеРезультат;
	КонецЕсли;
	
	ЗначениеРезультат = СтруктураРеквизитов[АдресВАналитике];
	Если ЗначениеРезультат = Неопределено Тогда
		ЗначениеРезультат = ЗначениеАналитики[АдресВАналитике];
		СтруктураРеквизитов.Вставить(АдресВАналитике, ЗначениеРезультат);
	КонецЕсли;
	
	Возврат ЗначениеРезультат;
	
КонецФункции

Функция ПлановыйКурсПоТаблицеКурсов(ТаблицаКурсов, Валюта, ВалютаРеглУчета, Период, Сценарий)
	
	Если Валюта = ВалютаРеглУчета Тогда
		
		Возврат 1;
		
	Иначе
		
		Если Период = Неопределено Тогда
			СтруктураПоиска = Новый Структура("Валюта, Сценарий", Валюта, Сценарий);
		Иначе
			СтруктураПоиска = Новый Структура("Валюта, Сценарий, Период", Валюта, Сценарий, Период);
		КонецЕсли;
		
		Курсы = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
		
		Если Не Курсы.Количество() И Период = Неопределено Тогда
			Возврат 0;
		ИначеЕсли Не Курсы.Количество() Тогда
			
			СтруктураПоиска = Новый Структура("Валюта, Сценарий", Валюта, Сценарий);
			НайденныеСтроки = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				Возврат 0;
			КонецЕсли;
			
			Для Сч = 1 по НайденныеСтроки.Количество() Цикл
				ИндексСтроки = НайденныеСтроки.Количество() - Сч;
				Если НайденныеСтроки[ИндексСтроки].Период < Период Тогда
					Возврат НайденныеСтроки[ИндексСтроки].Курс;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Возврат Курсы[0].Курс;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция Подключаемый_ПересчитатьПоКурсу(Сумма, Период, ВалютаХранения, Сценарий,
										ВалютаРеглУчета, КэшПлановыхКурсов, 
										КэшЗначенийАналитик, ЗначениеАналитики, АдресВАналитике) Экспорт
	
	Валюта = Подключаемый_ЗначениеИзАналитики(КэшЗначенийАналитик, ЗначениеАналитики, АдресВАналитике, ВалютаХранения);
	
	Если Валюта = ВалютаХранения Тогда
		Возврат Сумма;
	КонецЕсли;
	
	КурсВалютыХранения = ПлановыйКурсПоТаблицеКурсов(КэшПлановыхКурсов, ВалютаХранения, ВалютаРеглУчета, Период, Сценарий);
	КурсВалюты = ПлановыйКурсПоТаблицеКурсов(КэшПлановыхКурсов, Валюта, ВалютаРеглУчета, Период, Сценарий);
	
	Если КурсВалюты = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Сумма * КурсВалютыХранения / КурсВалюты;
	
КонецФункции

Функция ДобавитьПоляИтоговойТаблицыПоОписанию(СКД, СтруктураКолонокТаблицыДанных)
	
	ИзмеренияРасчета = Новый Структура;
	ИзмеренияРасчета.Вставить("СтатьяБюджетов");
	ИзмеренияРасчета.Вставить("ПоказательБюджетов");
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		ИзмеренияРасчета.Вставить(Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		ИмяИзмерения = ИмяПоляБюджетногоОтчета(Измерение);
		ИзмеренияРасчета.Вставить(ИмяИзмерения);
	КонецЦикла;
	
	НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	
	Для Каждого КлючИЗначение из ИзмеренияРасчета Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ПолучитьСКДИтоговыеДанныеОстатки(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "Данные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход, 
									|ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	БазовыйОбъединенныйНабор.ИмяОбъекта = "ПредварительныйРасчет";
	//ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "НефинансовыйПоказатель", , , Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных, ПоляИсточников, Истина);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	//ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	
	Периодичности = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Периодичности.Сортировать("Порядок УБЫВ");
	
	Для Каждого СтрокаПериодичности из Периодичности Цикл
		
		Измерение = СтрокаПериодичности.Периодичность;
		
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Период = "Период" + Измерение;
		
		НовоеВычисляемоеПоле = СКДИтоговыеДанные.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = Период;
		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			НовоеВычисляемоеПоле.Выражение = "ВЫБОР КОГДА
											|	НАЧАЛОПЕРИОДА(Период, """ + Измерение + """) < &НачалоПериода ТОГДА
											|		&НачалоПериода
											|	ИНАЧЕ
											|		НАЧАЛОПЕРИОДА(Период, """ + Измерение + """)
											|	КОНЕЦ";
			ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		Иначе
			НовоеВычисляемоеПоле.Выражение = "НАЧАЛОПЕРИОДА(Период, """ + Измерение + """)";
		КонецЕсли;
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата");
		
		ГруппировкаПериода = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, Период);
		ТекущийИндекс = Периодичности.Индекс(СтрокаПериодичности);
		ВГраница = ТекущийИндекс - 1;
		Для Сч = 0 ПО ВГраница Цикл
			Измерение = Периодичности[ВГраница - Сч].Периодичность;
			Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = "Период" + Измерение;
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПериода, Период);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
		
		Порядок = СКДИтоговыеДанные.НастройкиПоУмолчанию.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Период" + МинимальнаяПериодичность);
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Порядок.Использование = Истина;
		
		ФинОтчеты.УстановитьОтбор(СКДИтоговыеДанные.НастройкиПоУмолчанию.Отбор, "Период", , ВидСравненияКомпоновкиДанных.Заполнено);
		
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДИтоговыеДанныеОбороты(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные, Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "Данные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
									|ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	//ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "НефинансовыйПоказатель", , , Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	
	ПлановыеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ПлановыеДанные");
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
									|СуммаВалПриход, СуммаВалРасход,
									|КоличествоПриход, КоличествоРасход");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ПлановыеДанные.ИмяОбъекта = "ПлановыеДанные";
	
	ФактическиеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ФактическиеДанные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход, ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ФактическиеДанные.ИмяОбъекта = "ФактическиеДанные";
	//ФинОтчеты.НовоеПолеНабора(ФактическиеДанные, "НефинансовыйПоказатель", , , Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных, ПоляИсточников, Ложь);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	//ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	
	Периодичности = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Периодичности.Сортировать("Порядок УБЫВ");
	
	Для Каждого СтрокаПериодичности из Периодичности Цикл
		
		Измерение = СтрокаПериодичности.Периодичность;
		
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Период = "Период" + Измерение;
		
		НовоеВычисляемоеПоле = СКДИтоговыеДанные.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = Период;
		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			НовоеВычисляемоеПоле.Выражение = "ВЫБОР КОГДА
											|	НАЧАЛОПЕРИОДА(Период, """ + Измерение + """) < &НачалоПериода ТОГДА
											|		&НачалоПериода
											|	ИНАЧЕ
											|		НАЧАЛОПЕРИОДА(Период, """ + Измерение + """)
											|	КОНЕЦ";
			ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		Иначе
			НовоеВычисляемоеПоле.Выражение = "НАЧАЛОПЕРИОДА(Период, """ + Измерение + """)";
		КонецЕсли;
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата");
		
		ГруппировкаПериода = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, Период);
		ТекущийИндекс = Периодичности.Индекс(СтрокаПериодичности);
		ВГраница = ТекущийИндекс - 1;
		Для Сч = 0 ПО ВГраница Цикл
			Измерение = Периодичности[ВГраница - Сч].Периодичность;
			Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = "Период" + Измерение;
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПериода, Период);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.УстановитьОтбор(СКДИтоговыеДанные.НастройкиПоУмолчанию.Отбор, "Период", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДПредварительныйИтоговыйРасчет(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные, Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "Данные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
									|ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	//ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "НефинансовыйПоказатель", , , Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	
	ПлановыеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ПлановыеДанные");
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход, 
									|СуммаВалПриход, СуммаВалРасход, 
									|КоличествоПриход, КоличествоРасход");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ПлановыеДанные.ИмяОбъекта = "ПлановыеДанные";
	
	ФактическиеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ФактическиеДанные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход, ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ФактическиеДанные.ИмяОбъекта = "ФактическиеДанные";
	//ФинОтчеты.НовоеПолеНабора(ФактическиеДанные, "НефинансовыйПоказатель", , , Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, Неопределено, ПоляИсточников, Ложь);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	//ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
		
		ГруппировкаПериод = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, "Период");
		НовоеПоле = ГруппировкаПериод.ПоляГруппировки.Элементы[0];
		НовоеПоле.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[Строка(МинимальнаяПериодичность)];
		НовоеПоле.НачалоПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.НачалоПериода");
		НовоеПоле.КонецПериода 	= Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериода");
		
		ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		ДобавитьПараметрСхемы(СКДИтоговыеДанные, "КонецПериода");
		
		Порядок = СКДИтоговыеДанные.НастройкиПоУмолчанию.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Период");
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Порядок.Использование = Истина;
		
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
												Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДИтоговыеДанные)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДДанныеДокумента = Новый Структура;
	
	// Данные документа состоят из многих СКД, результаты которой должны быть объединены в итоговой
	Для Каждого Источник из ИсточникиДанных Цикл
		
		СКДДокументаПоИсточнику = ПолучитьСКДДанныхДокумента(Источник, СтруктураКолонокТаблицыДанных, 
																Аналитики, АналитикиШапки, ПараметрыКУстановке);
		Имя = "ДанныеДокумента_" + Источник.Идентификатор;
		СКДДанныеДокумента.Вставить(Имя, СКДДокументаПоИсточнику);
		
		ПодчиненныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные.НаборыДанных[0], Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), Имя);
		ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход, 
										|СуммаВалПриход, СуммаВалРасход, 
										|КоличествоПриход, КоличествоРасход");
										
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
		
		ДобавитьПоляТаблицыДанныхПоОписанию(ПодчиненныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ПодчиненныйНабор.ИмяОбъекта = Имя;
		
	КонецЦикла;
	
	Возврат СКДДанныеДокумента;
	
КонецФункции

Процедура ДобавитьПараметрСхемы(СКД, Имя)
	
	Если СКД.Параметры.Найти(Имя) = Неопределено Тогда
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.Имя = Имя;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСКДДанныхДокумента(Источник, СтруктураКолонокТаблицыДанных, Аналитики, АналитикиШапки, ПараметрыКУстановке)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКД = ФинОтчеты.НоваяСхема();
	
	НаборАналитика = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭкземплярБюджета_Аналитика");
	НаборСуммы = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭкземплярБюджета_Суммы");
	
	НаборАналитика.ИмяОбъекта = "ЭкземплярБюджета_Аналитика";
	НаборСуммы.ИмяОбъекта = "ЭкземплярБюджета_Суммы";
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Суммы";
	Связь.НаборДанныхПриемник = "ЭкземплярБюджета_Аналитика";
	Связь.ВыражениеИсточник = "ИдентификаторСтроки";
	Связь.ВыражениеПриемник = "ИдентификаторСтроки";
	
	ЕстьВидыНоменклатуры = 
		СтруктураКолонокТаблицыДанных.ВидыАналитик.Количество()
		ИЛИ СтруктураКолонокТаблицыДанных.Измерения.Найти("ЕдиницаИзмерения") <> Неопределено;
		
	Если Не ЕстьВидыНоменклатуры Тогда
		
		Для Каждого Аналитика из Аналитики Цикл
			ИмяАналитики = ИмяПоляБюджетногоОтчета(Аналитика);
			Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики) Тогда
				ЕстьВидыНоменклатуры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьВидыНоменклатуры Тогда
		
		НаборПараметрыСтатей = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "КэшПараметровСтатей");
		НаборПараметрыСтатей.ИмяОбъекта = "КэшПараметровСтатей";
		
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяБюджетов");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "КоличествоИспользуемыхАналитик");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики1");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики2");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики3");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики4");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики5");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики6");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяУчитыватьПоКоличеству");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяЕдиницаИзмеренияОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяАдресАналитикиКоличество");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяИсточникЗаполнениеЕдиницыИзмерения");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяЕдиницаИзмерения");
		
		Связь = СКД.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Аналитика";
		Связь.НаборДанныхПриемник = "КэшПараметровСтатей";
		Связь.ВыражениеИсточник = "СтатьяБюджетов";
		Связь.ВыражениеПриемник = "СтатьяБюджетов";
		
	КонецЕсли;
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		
		НаборСвязи = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "НастройкиСвязей");
		НаборСвязи.ИмяОбъекта = "НастройкиСвязей";
		
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Расход");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Коэффициент");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "СтатьяБюджетов", "СтатьяБюджетовСвязи");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательБюджетов");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательКоличествоИспользуемыхАналитик");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "УчитыватьПоВалюте");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "АдресАналитикиВалюта");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ИсточникЗаполненияВалюты");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ВалютаОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательУчитыватьПоКоличеству");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательЕдиницаИзмеренияОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательАдресАналитикиКоличество");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательИсточникЗаполнениеЕдиницыИзмерения");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательЕдиницаИзмерения");
		
		Для Сч = 1 По 6 Цикл
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Аналитика" + Сч, "ПоказательАналитика" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ТранслироватьАналитику" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "АдресТрансляцииАналитики" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательВидАналитики" + Сч);
			
			ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч, "СтатьяАналитика" + Сч);
		КонецЦикла;
	
		Связь = СКД.СвязиНаборовДанных.Добавить();
		Если ЕстьВидыНоменклатуры Тогда
			Связь.НаборДанныхИсточник = "КэшПараметровСтатей";
		Иначе
			Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Аналитика";
		КонецЕсли;
		Связь.НаборДанныхПриемник = "НастройкиСвязей";
		Связь.ВыражениеИсточник = "СтатьяБюджетов";
		Связь.ВыражениеПриемник = "СтатьяБюджетовСвязи";
		
		ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
		
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Валюта", "ВалютаХранения");
		
	Иначе
		
		Для Сч = 1 По 6 Цикл
			ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч);
		КонецЦикла;
		
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Валюта");
		
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "СтатьяБюджетов", , , ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ПериодПланирования", , , Новый ОписаниеТипов("Дата"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Примечание");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Количество");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Сумма");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "СуммаВВалюте");
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		
		ТекстПоляАналитики = "ВЫБОР ";
		Для Сч = 1 по 6 Цикл
			ТекстПоляАналитики = ТекстПоляАналитики + "
			|	КОГДА АдресТрансляцииАналитики%НомерПоля% = " + Сч + " ТОГДА
			|		СтатьяАналитика" + Сч;
		КонецЦикла;
		ТекстПоляАналитики = ТекстПоляАналитики + "
		|КОНЕЦ";
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоПриход", "ВЫБОР КОГДА НЕ Расход ТОГДА Количество ИНАЧЕ 0 КОНЕЦ");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоРасход", "ВЫБОР КОГДА Расход ТОГДА Количество ИНАЧЕ 0 КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаПриход", "ВЫБОР КОГДА НЕ Расход ТОГДА Коэффициент * Сумма ИНАЧЕ 0 КОНЕЦ");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаРасход", "ВЫБОР КОГДА Расход ТОГДА Коэффициент * Сумма ИНАЧЕ 0 КОНЕЦ");
		
		ТекстыАналитик = Новый Соответствие;
		Для Сч = 1 По 6 Цикл
			
			ТекстАналитики = "ВЫБОР КОГДА ТранслироватьАналитику" + Сч + 
											" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
											" ИНАЧЕ ПоказательАналитика" + Сч + 
											" КОНЕЦ";
			
			ФинОтчеты.НовоеВычисляемоеПоле(СКД, "Аналитика" + Сч, ТекстАналитики);
			ТекстыАналитик.Вставить(Сч, ТекстАналитики);
			
		КонецЦикла;
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ ПоказательУчитыватьПоКоличеству ТОГДА Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ПоказательЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ПоказательЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА ПоказательАдресАналитикиКоличество = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ, 
		|			ПоказательИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "Валюта", 
		"ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА ВалютаХранения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ, 
		|			ИсточникЗаполненияВалюты,
		|			ВалютаХранения)
		|	КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалПриход", 
		"ВЫБОР КОГДА НЕ Расход ТОГДА Коэффициент * 
		|	ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА СуммаВВалюте
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВВалюте,
		|								ПериодПланирования,
		|								ВалютаХранения,
		|								&Документ_Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ
		|КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалРасход", 
		"ВЫБОР КОГДА Расход ТОГДА Коэффициент * 
		|	ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА СуммаВВалюте
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВВалюте
		|								ПериодПланирования,
		|								ВалютаХранения,
		|								&Документ_Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ
		|КОНЕЦ");
		
		ДобавитьПараметрСхемы(СКД, "ВалютаРеглУчета");
		ДобавитьПараметрСхемы(СКД, "КэшПлановыхКурсов");
		ДобавитьПараметрСхемы(СКД, "КэшЗначенийАналитик");
		
	Иначе
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ СтатьяУчитыватьПоКоличеству ТОГДА Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ СтатьяЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА СтатьяЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА СтатьяАдресАналитикиКоличество = 1 ТОГДА Аналитика1
		|									КОГДА СтатьяАдресАналитикиКоличество = 2 ТОГДА Аналитика2
		|									КОГДА СтатьяАдресАналитикиКоличество = 3 ТОГДА Аналитика3
		|									КОГДА СтатьяАдресАналитикиКоличество = 4 ТОГДА Аналитика4
		|									КОГДА СтатьяАдресАналитикиКоличество = 5 ТОГДА Аналитика5
		|									КОГДА СтатьяАдресАналитикиКоличество = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			СтатьяИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
		ДобавитьПараметрСхемы(СКД, "КэшЗначенийАналитик");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаПриход", "Сумма");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаРасход", "0");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалПриход", "СуммаВВалюте");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалРасход", "0");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоПриход", "Количество");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоРасход", "0");
		
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИД_Источника";
	НовоеВычисляемоеПоле.Выражение = """" + Источник.Идентификатор + """";
	
	Группировка = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	Если Источник.ТипИсточника = "Остатки" Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПоказательБюджетов");
	КонецЕсли;
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "СтатьяБюджетов");
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		
		Если Не Найти(Измерение, "Аналитика")
			И Не Измерение = "Валюта"
			И Не Измерение = "ЕдиницаИзмерения" Тогда
			
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = Измерение;
			НовоеВычисляемоеПоле.Выражение = "&Документ_" + Измерение;
			ДобавитьПараметрСхемы(СКД, "Документ_" + Измерение);
			
		КонецЕсли;
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, Измерение);
		
	КонецЦикла;
	
	Для Каждого ВидАналитики из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПоля = ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если АналитикиШапки.Найти(ВидАналитики) = Неопределено Тогда
		
			ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПоля);
			ТекстПоля = СтрЗаменить(ТекстПоля, "СтатьяБюджетов.", "");
			
			Если Источник.ТипИсточника = "Остатки" Тогда
				
				ТекстПоля = СтрЗаменить(ТекстПоля, "КоличествоИспользуемыхАналитик", "ПоказательКоличествоИспользуемыхАналитик");
				ТекстПоля = СтрЗаменить(ТекстПоля, "ВидАналитики", "ПоказательВидАналитики");
				Для Сч = 1 по 6 Цикл
					ТекстПоля = СтрЗаменить(ТекстПоля, " Аналитика" + Сч, " ВЫБОР КОГДА ТранслироватьАналитику" + Сч + 
																		" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
																		" ИНАЧЕ ПоказательАналитика" + Сч + 
																		" КОНЕЦ");
				КонецЦикла;
				
			КонецЕсли;
		
		Иначе
			
			ТекстПоля = "&Документ_" + ИмяПоля;
			
		КонецЕсли;
		
		НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
		НовоеВычисляемоеПоле.Выражение = ТекстПоля;
		
		ДобавитьПараметрСхемы(СКД, ИмяПоля);
		ПараметрыКУстановке.Вставить(ИмяПоля, ВидАналитики);
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяПоля);
		
	КонецЦикла;
	
	СтруктураОтборов = Новый Структура("Сценарий, Организация, Подразделение, Аналитика1,
										|Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6");
	
	Для Каждого КлючИЗначение из СтруктураОтборов Цикл
		
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, КлючИЗначение.Ключ)
			И СтруктураКолонокТаблицыДанных.Измерения.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			
			Измерение = КлючИЗначение.Ключ;
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = Измерение;
			НовоеВычисляемоеПоле.Выражение = "&Документ_" + Измерение;
			ДобавитьПараметрСхемы(СКД, "Документ_" + Измерение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Аналитика из Аналитики Цикл
		
		ИмяАналитики = ИмяПоляБюджетногоОтчета(Аналитика);
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики)
			И СтруктураКолонокТаблицыДанных.ВидыАналитик.Найти(Аналитика) = Неопределено Тогда
			
			ИмяПоля = ИмяПоляБюджетногоОтчета(Аналитика);
			
			Если АналитикиШапки.Найти(Аналитика) = Неопределено Тогда
			
				ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПоля);
				ТекстПоля = СтрЗаменить(ТекстПоля, "СтатьяБюджетов.", "");
				
				Если Источник.ТипИсточника = "Остатки" Тогда
					
					ТекстПоля = СтрЗаменить(ТекстПоля, "КоличествоИспользуемыхАналитик", "ПоказательКоличествоИспользуемыхАналитик");
					ТекстПоля = СтрЗаменить(ТекстПоля, "ВидАналитики", "ПоказательВидАналитики");
					Для Сч = 1 по 6 Цикл
						ТекстПоля = СтрЗаменить(ТекстПоля, " Аналитика" + Сч, " ВЫБОР КОГДА ТранслироватьАналитику" + Сч + 
																			" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
																			" ИНАЧЕ ПоказательАналитика" + Сч + 
																			" КОНЕЦ");
					КонецЦикла;
					
				КонецЕсли;
			
				ДобавитьПараметрСхемы(СКД, ИмяПоля);
				ПараметрыКУстановке.Вставить(ИмяПоля, Аналитика);
				
			Иначе
				
				ТекстПоля = "&Документ_" + ИмяПоля;
				ДобавитьПараметрСхемы(СКД, "Документ_" + ИмяПоля);
				
			КонецЕсли;
		
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
			НовоеВычисляемоеПоле.Выражение = ТекстПоля;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "Период";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "ПериодПланирования";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеПериодаГруппировки);
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "НачалоПериода";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "ПараметрыДанных.НачалоПериода";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеНачалоПериода);
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "КонецПериода";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "ПараметрыДанных.КонецПериода";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеКонецПериода);
	КонецЕсли;
	
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовыйРесурс(СКД, "СуммаПриход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаРасход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаВалПриход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаВалРасход");
	ФинОтчеты.НовыйРесурс(СКД, "КоличествоПриход");
	ФинОтчеты.НовыйРесурс(СКД, "КоличествоРасход");
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", "МИНИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", "МАКСИМУМ");
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаВалПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаВалРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "КоличествоПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "КоличествоРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																	РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																	РасположениеИтоговКомпоновкиДанных.Нет);
	
	Если Источник.Идентификатор <> "Документ" Тогда
		
		Если Источник.ТипИсточника = "Обороты" Тогда
			Если Источник.Объекты.Количество() Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "СтатьяБюджетов", 
											МассивВСписок(Источник.Объекты), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		ИначеЕсли Источник.ТипИсточника = "Остатки" Тогда
			Если Источник.Объекты.Количество() Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ПоказательБюджетов", 
											МассивВСписок(Источник.Объекты), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		КонецЕсли;
		
		Если МинимальнаяПериодичность <> Неопределено Тогда
			
			ЗначениеОтбора = Новый ПолеКомпоновкиДанных("НачалоПериода");
			Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Период", ЗначениеОтбора);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			
			ЗначениеОтбора = Новый ПолеКомпоновкиДанных("КонецПериода");
			Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Период", ЗначениеОтбора);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			
		КонецЕсли;
		
		ДобавитьПараметрСхемы(СКД, "НачалоПериода");
		ДобавитьПараметрСхемы(СКД, "КонецПериода");
		ДобавитьПараметрСхемы(СКД, "ГраницаФактДанных");
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
			
			ДополнительныйФильтр = Неопределено;
			Если Источник.Свойство(Измерение, ДополнительныйФильтр) Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, Измерение, 
											МассивВСписок(ДополнительныйФильтр), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			
			ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
			ДополнительныйФильтр = Неопределено;
			Если Источник.Свойство(ИмяПоля, ДополнительныйФильтр) Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, ИмяПоля, 
											МассивВСписок(ДополнительныйФильтр), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		КонецЦикла;
		
		ДополнительныйОтбор = Источник.ДополнительныйОтбор;
		Если ДополнительныйОтбор <> Неопределено Тогда
			ФинОтчеты.СкопироватьОтбор(ДополнительныйОтбор.Отбор, СКД.НастройкиПоУмолчанию.Отбор, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СКД;
	
КонецФункции

Функция ПолучитьСКДПоОписаниюИсточников(ВидБюджета, СтруктураОписанияОтчета, СтруктураКолонокТаблицыДанных, РежимФормирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшСхемыКомпоновки, ХранилищеКэшаСхемыКомпоновки");
	Постфикс = РежимФормирования;
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	Если ЗначенияКэша.СформированКэшСхемыКомпоновки = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаСхемыКомпоновки.Получить();
	КонецЕсли;
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	ПоляИсточников = СтруктураОписанияОтчета.ПоляИсточников;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АналитикиСтатейБюджетов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";

	Аналитики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыБюджетовАналитикиШапки.ВидАналитики
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	АналитикиШапки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидАналитики");
	
	ЕстьОстатки = Ложь;
	Для Каждого Источник из ИсточникиДанных Цикл
		ЕстьОстатки = Источник.ТипИсточника = "Остатки";
		Если ЕстьОстатки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКУстановке = Новый Структура;
	
	СКДПлановыеДанные = ПолучитьСКДПлановыеДанные(ИсточникиДанных, ПоляИсточников,
													СтруктураКолонокТаблицыДанных, Аналитики, 
													ПараметрыКУстановке, РежимФормирования);
	Если ЕстьОстатки Тогда
		СКДПредварительныйРасчет = ПолучитьСКДПредварительныйИтоговыйРасчет(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных);
		СКДИтоговыеДанные = ПолучитьСКДИтоговыеДанныеОстатки(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных);
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
			СКДДанныеДокумента = ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
														Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДПредварительныйРасчет);
		КонецЕсли;
	Иначе
		СКДПредварительныйРасчет = Неопределено;
		СКДИтоговыеДанные = ПолучитьСКДИтоговыеДанныеОбороты(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных);
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
			СКДДанныеДокумента = ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
																	Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДИтоговыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры компоновки
	Для Каждого Параметр из ПараметрыКУстановке Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("СписокЗначений") Тогда
			ПараметрКомпоновки = СКДПлановыеДанные.Параметры.Найти(Параметр.Ключ);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = СКДПлановыеДанные.Параметры.Добавить();
				ПараметрКомпоновки.Имя = Параметр.Ключ;
			КонецЕсли;
			ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			ПараметрКомпоновки = СКДИтоговыеДанные.Параметры.Найти(Параметр.Ключ);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = СКДИтоговыеДанные.Параметры.Добавить();
				ПараметрКомпоновки.Имя = Параметр.Ключ;
			КонецЕсли;
			ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
				Для Каждого СКДДокумента из СКДДанныеДокумента Цикл
					ПараметрКомпоновки = СКДДокумента.Значение.Параметры.Найти(Параметр.Ключ);
					Если ПараметрКомпоновки = Неопределено Тогда
						ПараметрКомпоновки = СКДДокумента.Значение.Параметры.Добавить();
						ПараметрКомпоновки.Имя = Параметр.Ключ;
					КонецЕсли;
					ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаИЛИ = СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0].Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	НовыйЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Примечание");
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	// отсечем "пустые значения"
	Для Каждого СтрокаПоля из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		
		НовыйЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаПоля.ИмяРесурса);
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	КонецЦикла;
	
	Результат = Новый Структура("СКДИтоговая, СКДПлановыеДанные, СКДДанныеДокумента, СКДПредварительныйРасчет, Параметры", 
							СКДИтоговыеДанные, СКДПлановыеДанные, СКДДанныеДокумента, СКДПредварительныйРасчет, ПараметрыКУстановке);
	
	Реквизиты = Новый Структура("СформированКэшСхемыКомпоновки, ХранилищеКэшаСхемыКомпоновки",
								Истина, Новый ХранилищеЗначения(Результат));
								
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ГенерацияДереваДляВыводаОтчета

Функция ДобавитьГруппировкуДереваВывода(МестоДобавления, ИмяИзмерения, ЭлементОтчета, ВидЭлемента)
	
	Если ИмяИзмерения = "Таблица" ИЛИ ИмяИзмерения = "ТекстовыйБлок" Тогда
		
		Если ТипЗнч(МестоДобавления) <> Тип("ДеревоЗначений") Тогда
			МестоДобавления = МестоДобавления.Владелец();
		КонецЕсли;
		
	Иначе
		
		ВТаблице = Ложь;
		СтрокаПроверки = МестоДобавления;
		
		Если ТипЗнч(СтрокаПроверки) <> Тип("ДеревоЗначений") Тогда
			Пока ЗначениеЗаполнено(СтрокаПроверки) Цикл
				Если СтрокаПроверки.ИмяИзмерения = "Таблица" Тогда
					ВТаблице = Истина;
					Прервать;
				КонецЕсли;
				СтрокаПроверки = СтрокаПроверки.Родитель;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ВТаблице Тогда
			
			Если ТипЗнч(СтрокаПроверки) <> Тип("ДеревоЗначений") Тогда
				МестоДобавления = МестоДобавления.Владелец();
			КонецЕсли;
			
			Таблица = МестоДобавления.Строки.Добавить();
			Таблица.ИмяИзмерения = "Таблица";
			Таблица.Строки.Добавить().ИмяИзмерения = "Колонки";
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюКолонок", Ложь);
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюСтрок", Ложь);
			
			МестоДобавления = Таблица.Строки.Добавить();
			МестоДобавления.ИмяИзмерения = "Строки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяГруппировка = МестоДобавления.Строки.Добавить();
	НоваяГруппировка.ИмяИзмерения = ИмяИзмерения;
	НоваяГруппировка.ЭлементОтчета = ЭлементОтчета;
	НоваяГруппировка.ВидЭлемента = ВидЭлемента;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ДанныеОтчетаДляОформления(ПараметрыТаблицы, КэшДопРеквизиты)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Строка");
	Таблица.Колонки.Добавить("НомерСтроки");
	Таблица.Колонки.Добавить("Колонка");
	Таблица.Колонки.Добавить("НомерКолонки");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("ФлагКоличество");
	Таблица.Колонки.Добавить("ФлагСумма");
	Таблица.Колонки.Добавить("ФлагЗначение");
	Таблица.Колонки.Добавить("ИмяОбласти");
	
	МассивЭлементов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, ПараметрыТаблицы.ОформляемыеСтроки.ВыгрузитьКолонку("ЭлементОтчета"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, ПараметрыТаблицы.ОформляемыеКолонки.ВыгрузитьКолонку("ЭлементОтчета"));
	
	МассивИзмерений = Новый Массив;
	
	Для Каждого ЭлементОтчета из МассивЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Неопределено Тогда
			// Не измерение
			Продолжить;
		КонецЕсли;
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Периодичность = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			ИмяИзмерения = "Период" + Периодичность;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
			ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
			ИмяИзмерения = ИмяПоляБюджетногоОтчета(ВидАналитики);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизиты);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			ИмяИзмерения = "Организация";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			ИмяИзмерения = "Подразделение";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			ИмяИзмерения = "Сценарий";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
			ИмяИзмерения = "Валюта";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
			ИмяИзмерения = ИмяПоляБюджетногоОтчета(ВидАналитики);
			
		КонецЕсли;
		
		Если МассивИзмерений.Найти(ИмяИзмерения) = Неопределено Тогда
			МассивИзмерений.Добавить(ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяИзмерения из МассивИзмерений Цикл
		Таблица.Колонки.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзмеренийВДеревеВывода(ВидБюджета, ДеревоВывода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабличнаяЧасть.Реквизит,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВыводитьЗаголовок
		|			ТОГДА ТабличнаяЧасть.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Заголовок,
		|	ТабличнаяЧасть.Ссылка КАК ЭлементОтчета
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.ДополнительныеПоля КАК ТабличнаяЧасть
		|		ПО (ТабличнаяЧасть.Ссылка = Справочник.Ссылка)
		|			И (Справочник.Владелец = &ВидБюджета)
		|ИТОГИ ПО
		|	ЭлементОтчета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЭлементы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлементы.Следующий() Цикл
		СтрокаДерева = ДеревоВывода.Строки.Найти(ВыборкаЭлементы.ЭлементОтчета, "ЭлементОтчета", Истина);
		ВыборкаДополнительныеРеквизиты = ВыборкаЭлементы.Выбрать();
		Пока ВыборкаДополнительныеРеквизиты.Следующий() Цикл
			СтрокаДерева.ДополнительныеПоля.Добавить(
				Новый Структура("Реквизит, Заголовок", ВыборкаДополнительныеРеквизиты.Реквизит, НРег(ВыборкаДополнительныеРеквизиты.Заголовок)));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Знач МестоДобавления, Элементы)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Для Каждого Элемент из Элементы.Строки Цикл
		
		НоваяГруппировка = Неопределено;
		
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета 
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст Тогда
			
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ТекстовыйБлок", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ПоказательБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "СтатьяБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			ПоказательБюджетов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ПоказательБюджетов", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ПоказательБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = ПоказательБюджетов;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			СтатьяБюджетов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "СтатьяБюджетов", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "СтатьяБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = СтатьяБюджетов;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
			ЗначениеФильтра = Неопределено; ЭтоАналитикаПрочее = Неопределено; ВидАналитики = Неопределено;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Периодичность = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
				ИмяИзмерения = "Период" + Периодичность;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
				ИмяИзмерения = ИмяПоляБюджетногоОтчета(ВидАналитики);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				ИмяИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизиты);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				Организация = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Организация", КэшДопРеквизиты);
				ИмяИзмерения = "Организация";
				ЗначениеФильтра = Организация;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
				Подразделение = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Подразделение", КэшДопРеквизиты);
				ИмяИзмерения = "Подразделение";
				ЗначениеФильтра = Подразделение;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				Сценарий = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Сценарий", КэшДопРеквизиты);
				ИмяИзмерения = "Сценарий";
				ЗначениеФильтра = Сценарий;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				Валюта = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Валюта", КэшДопРеквизиты);
				ИмяИзмерения = "Валюта";
				ЗначениеФильтра = Валюта;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
				ЭтоАналитикаПрочее = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ЭтоАналитикаПрочее", КэшДопРеквизиты);
				РазрешитьРедактирование = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "РазрешитьРедактирование", КэшДопРеквизиты);
				ИмяИзмерения = ИмяПоляБюджетногоОтчета(ВидАналитики);
				Если ЭтоАналитикаПрочее Тогда
					ЗначениеФильтра = "<прочие " + НРег(ВидАналитики) + ">";
				Иначе
					ЗначениеФильтра = Элемент.ЭлементОтчета.ЗначениеАналитики;
				КонецЕсли;
				
			КонецЕсли;
				
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, ИмяИзмерения, Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			Если ЭтоАналитикаПрочее = Истина Тогда
				НоваяГруппировка.ФиксированноеЗначение = Неопределено;
				НоваяГруппировка.НаименованиеДляПечати = ЗначениеФильтра;
			Иначе
				НоваяГруппировка.ФиксированноеЗначение = ЗначениеФильтра;
			КонецЕсли;
			НоваяГруппировка.ВидАналитики = ВидАналитики;
			НоваяГруппировка.ЭтоАналитикаПрочее = ЭтоАналитикаПрочее;
			НоваяГруппировка.РедактируемыеЗначения = РазрешитьРедактирование = Истина;
			
			ВыводитьВместеСРодительским = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВыводитьВместеСРодительским", КэшДопРеквизиты);
			Если ВыводитьВместеСРодительским = Истина Тогда
				МестоДобавления.ВыводитьВместеСПодчиненным = Истина;
				НоваяГруппировка.ВыводитьВместеСРодительским = Истина;
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Таблица", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			Таблица.ВыводитьЗаголовокВОтчет = Элемент.ВыводитьЗаголовокЭлемента;
			Таблица.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Строки", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Колонки", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			
			Выводить = Истина;
			Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если Элемент.ВыводитьЗаголовокЭлемента = Ложь Тогда
					НоваяГруппировка = МестоДобавления;
					Выводить = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Выводить Тогда
				
				НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, 
													ИмяПоляБюджетногоОтчета(Элемент.ЭлементОтчета), 
													Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
				
				НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
			
			ОтображатьНумерациюКолонок = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ОтображатьНумерациюКолонок", КэшДопРеквизиты);
			ОтображатьНумерациюСтрок = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ОтображатьНумерациюСтрок", КэшДопРеквизиты);
			Таблица = ФинансоваяОтчетностьКлиентСервер.ТаблицаЭлемента(МестоДобавления);
			
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюКолонок", ОтображатьНумерациюКолонок = Истина);
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюСтрок", 	ОтображатьНумерациюСтрок = Истина);
			
			ТаблицыЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент.ЭлементОтчета, 
									"ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
			
			Таблица.ПараметрыТаблицы.Вставить("ЭлементыОформления", 		ТаблицыЭлемента.ЭлементыОформления.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("ОформляемыеСтроки", 			ТаблицыЭлемента.ОформляемыеСтроки.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("ОформляемыеКолонки", 		ТаблицыЭлемента.ОформляемыеКолонки.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("РасшифровкаПолейОтбораЭО", 	ТаблицыЭлемента.РасшифровкаПолейОтбораЭО.Выгрузить());
			
			Таблица.ПараметрыТаблицы.Вставить("ДанныеОтчетаДляОформления", 	ДанныеОтчетаДляОформления(Таблица.ПараметрыТаблицы, КэшДопРеквизиты));
			
		КонецЕсли;
		
		Если НоваяГруппировка <> Неопределено Тогда
			
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, НоваяГруппировка, Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьДеревоВТаблицу(Дерево, Таблица = Неопределено, Уровень = 0)
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Колонка из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из Дерево.Строки Цикл
		
		Пробел = "";
		Для Сч = 1 по Уровень Цикл
			Пробел = Пробел + " - ";
		КонецЦикла;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока[0] = Пробел + Строка(НоваяСтрока[0]);
		ПреобразоватьДеревоВТаблицу(СтрокаДерева, Таблица, Уровень + 1);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура УстановитьПараметрыВНаименованииДляПечати(НаименованиеДляПечати, ВидБюджета, НачалоПериода, КонецПериода)
	
	Если Найти(НаименованиеДляПечати, "[Вид отчета]") > 0 Тогда
		НаименованиеДляПечати = СтрЗаменить(НаименованиеДляПечати, "[Вид отчета]", Строка(ВидБюджета));
	КонецЕсли;
	
	Если Найти(НаименованиеДляПечати, "[Период отчетности]") > 0 Тогда
		ПериодСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода);
		НаименованиеДляПечати = СтрЗаменить(НаименованиеДляПечати, "[Период отчетности]", Строка(ПериодСтрокой));
	КонецЕсли;
	
	Если Найти(НаименованиеДляПечати, "[Конечная дата периода отчета]") > 0 Тогда
		КонецОтчета = Формат(КонецПериода, "ДЛФ=DD");
		НаименованиеДляПечати = СтрЗаменить(НаименованиеДляПечати, "[Конечная дата периода отчета]", Строка(КонецОтчета));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПризнакиУчетаПоСтрокамДерева(Строки, ПризнакиУчета, ЕстьСумма, ЕстьКоличество, ЕстьЗначение)
	
	Для Каждого Строка из Строки Цикл
		
		НайденнаяКолонка = ПризнакиУчета.Найти(Строка.ЭлементОтчета);
		
		Если НайденнаяКолонка <> Неопределено Тогда
			ЕстьСумма = ЕстьСумма ИЛИ НайденнаяКолонка.ФлагСумма;
			ЕстьКоличество = ЕстьКоличество ИЛИ НайденнаяКолонка.ФлагКоличество;
			ЕстьЗначение = ЕстьЗначение ИЛИ НайденнаяКолонка.ФлагЗначение;
		КонецЕсли;
		
		Если ЕстьСумма И ЕстьКоличество И ЕстьЗначение Тогда
			Возврат;
		КонецЕсли;
		
		ПризнакиУчетаПоСтрокамДерева(Строка.Строки, ПризнакиУчета, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиКоличестваВКолонки(Таблица, ПараметрыУчетаПоКолонкам, СтрокаДобавления = Неопределено)
	
	Если СтрокаДобавления = Неопределено Тогда
		СтрокаДобавления = Таблица.Строки.Найти("Колонки");
	КонецЕсли;
	
	Если Не СтрокаДобавления.Строки.Количество() Тогда
		
		ПризнакиУчета = ПараметрыУчетаПоКолонкам.ПризнакиУчетаПоКолонкам.ТаблицаКолонок;
		ЕстьСуммаВОтчете = ПараметрыУчетаПоКолонкам.ЕстьСумма;
		ЕстьКоличествоВОтчете = ПараметрыУчетаПоКолонкам.ЕстьКоличество;
		ЕстьЗначениеВОтчете = ПараметрыУчетаПоКолонкам.ЕстьЗначение;
		
		Если СтрокаДобавления.ИмяИзмерения = "Колонки" Тогда
			Строки = Таблица.Строки.Найти("Строки").Строки;
			ЕстьСумма = Ложь;
			ЕстьКоличество = Ложь;
			ЕстьЗначение = Ложь;
			// расчет флагов для простой таблицы
			ПризнакиУчетаПоСтрокамДерева(Строки, 
				ПараметрыУчетаПоКолонкам.ПризнакиУчетаПоКолонкам.ТаблицаСтрок, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
		Иначе
			НайденнаяКолонка = ПризнакиУчета.Найти(СтрокаДобавления.ЭлементОтчета);
			ЕстьСумма = НайденнаяКолонка.ФлагСумма;
			ЕстьКоличество = НайденнаяКолонка.ФлагКоличество;
			ЕстьЗначение = НайденнаяКолонка.ФлагЗначение;
		КонецЕсли;
		
		Если ЕстьКоличество Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Количество";
			НоваяСтрока.НаименованиеДляПечати = "Количество";
		КонецЕсли;
		
		Если ЕстьЗначение Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Значение";
			НоваяСтрока.НаименованиеДляПечати = "Значение";
		КонецЕсли;
		
		ДобавитьСумму = Ложь;
		
		ЕстьДополнительныеКолонки = ЕстьКоличество ИЛИ ЕстьЗначение;
		
		Если ЕстьСумма И ЕстьДополнительныеКолонки Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли Не ЕстьДополнительныеКолонки И СтрокаДобавления.ИмяИзмерения = "Колонки" Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли Не ЕстьДополнительныеКолонки И (ЕстьКоличествоВОтчете ИЛИ ЕстьЗначениеВОтчете) Тогда
			ДобавитьСумму = Истина;
		КонецЕсли;
		
		Если ДобавитьСумму Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Сумма";
			НоваяСтрока.НаименованиеДляПечати = "Сумма";
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из СтрокаДобавления.Строки Цикл
		ДобавитьКолонкиКоличестваВКолонки(Таблица, ПараметрыУчетаПоКолонкам, Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПризнакиУчетаПоКолонкамИСтрокам(СтруктураЯчеек, ПараметрыЯчеек)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураЯчеек.ИндексСтроки КАК ИндексСтроки,
	               |	СтруктураЯчеек.Строка,
	               |	СтруктураЯчеек.Колонка
	               |ПОМЕСТИТЬ ТаблицаСтруктураЯчеек
	               |ИЗ
	               |	&СтруктураЯчеек КАК СтруктураЯчеек
	               |ГДЕ
	               |	СтруктураЯчеек.ОсновнойЭлемент
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИндексСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	               |	ПараметрыЯчеек.ФлагСумма,
	               |	ПараметрыЯчеек.ФлагКоличество,
	               |	ПараметрыЯчеек.ФлагЗначение
	               |ПОМЕСТИТЬ ТаблицаПараметрыЯчеек
	               |ИЗ
	               |	&ПараметрыЯчеек КАК ПараметрыЯчеек
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИндексСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураЯчеек.Строка,
	               |	СтруктураЯчеек.Колонка,
	               |	ПараметрыЯчеек.ФлагСумма,
	               |	ПараметрыЯчеек.ФлагКоличество,
	               |	ПараметрыЯчеек.ФлагЗначение
	               |ПОМЕСТИТЬ СтруктураЯчеек
	               |ИЗ
	               |	ТаблицаСтруктураЯчеек КАК СтруктураЯчеек
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметрыЯчеек КАК ПараметрыЯчеек
	               |		ПО СтруктураЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураЯчеек.Колонка,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагСумма) КАК ФлагСумма,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагКоличество) КАК ФлагКоличество,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагЗначение) КАК ФлагЗначение
	               |ИЗ
	               |	СтруктураЯчеек КАК СтруктураЯчеек
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтруктураЯчеек.Колонка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураЯчеек.Строка,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагСумма) КАК ФлагСумма,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагКоличество) КАК ФлагКоличество,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагЗначение) КАК ФлагЗначение
	               |ИЗ
	               |	СтруктураЯчеек КАК СтруктураЯчеек
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтруктураЯчеек.Строка";
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек.Скопировать(, "ИндексСтроки, ОсновнойЭлемент, Строка, Колонка"));
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек.Скопировать(, "ИндексСтроки, ФлагСумма, ФлагКоличество, ФлагЗначение"));
	
	Массив = Запрос.ВыполнитьПакет();
	ТаблицаКолонок = Массив[3].Выгрузить();
	ТаблицаКолонок.Индексы.Добавить("Колонка");
	
	ТаблицаСтрок = Массив[4].Выгрузить();
	ТаблицаСтрок.Индексы.Добавить("Строка");
	
	Возврат Новый Структура("ТаблицаКолонок, ТаблицаСтрок", ТаблицаКолонок, ТаблицаСтрок);
	
КонецФункции

Функция ПолучитьДеревоДляВыводаОтчета(ВидБюджета, СтруктураЯчеек, ПараметрыЯчеек)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшДереваВывода, ХранилищеКэшаДереваВывода");
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	Если ЗначенияКэша.СформированКэшДереваВывода = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаДереваВывода.Получить();
	КонецЕсли;
	
	ДеревоВидаБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
	ПризнакиУчетаПоКолонкам = ПризнакиУчетаПоКолонкамИСтрокам(СтруктураЯчеек, ПараметрыЯчеек);
	ТаблицаПризнаковКолонок = ПризнакиУчетаПоКолонкам.ТаблицаКолонок;
	
	ЕстьСумма 		= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагСумма") <> Неопределено;
	ЕстьКоличество 	= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагКоличество") <> Неопределено;
	ЕстьЗначение 	= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагЗначение") <> Неопределено;
	
	ПараметрыУчетаПоКолонкам = Новый Структура("ПризнакиУчетаПоКолонкам, ЕстьСумма, ЕстьКоличество, ЕстьЗначение", 
												ПризнакиУчетаПоКолонкам, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
	
	ДеревоВывода = Новый ДеревоЗначений;
	ДеревоВывода.Колонки.Добавить("ИмяИзмерения");
	ДеревоВывода.Колонки.Добавить("ВидЭлемента");
	ДеревоВывода.Колонки.Добавить("ЭлементОтчета");
	ДеревоВывода.Колонки.Добавить("ВидАналитики");
	ДеревоВывода.Колонки.Добавить("НаименованиеДляПечати");
	ДеревоВывода.Колонки.Добавить("ФиксированноеЗначение");
	ДеревоВывода.Колонки.Добавить("ВыводитьЗаголовокВОтчет");
	ДеревоВывода.Колонки.Добавить("ЭтоАналитикаПрочее", 			Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("РедактируемыеЗначения", 			Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьВместеСПодчиненным", 	Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьВместеСРодительским", 	Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ДополнительныеПоля", 			Новый ОписаниеТипов("Массив"));
	ДеревоВывода.Колонки.Добавить("ПараметрыТаблицы", 				Новый ОписаниеТипов("Структура"));
	
	КэшДопРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	// Заполнение дерева группировками
	СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизитов, ДеревоВывода, ДеревоВидаБюджета);
	
	// Добавление дополнительных колонок и заполнение
	// вспомогательной информации
	Для Каждого ЭлементВывода из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			ЭлементВывода.ПараметрыТаблицы.Вставить("КоличествоДополнительныхКолонок", РассчитатьГлубинуУровней(ЭлементВывода) - 1);
			Если ЗначениеЗаполнено(ЭлементВывода.ЭлементОтчета) Тогда
				Если ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДобавитьКолонкиКоличестваВКолонки(ЭлементВывода, ПараметрыУчетаПоКолонкам);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДополнительныеПоляИзмеренийВДеревеВывода(ВидБюджета, ДеревоВывода);
	
	Реквизиты = Новый Структура("СформированКэшДереваВывода, ХранилищеКэшаДереваВывода",
									Истина, Новый ХранилищеЗначения(ДеревоВывода));
	
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДеревоВывода;
	
КонецФункции


// Производит расчета изменений в ячейках табличного документа экземпляра бюджета
// Ключевая операция: "Бюджетирование.ВыводПолучениеИзмененийЭкземпляраБюджета"
//
Функция ИзмененияЭкземпляраБюджета(Параметры) Экспорт
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	
	РассчитанныеИзменения = ПолучитьИзмененияВЯчейках(Параметры.ВидБюджета, 
											Параметры.НачалоПериода, Параметры.КонецПериода, 
											СтруктураПараметровВывода, Параметры,
											Параметры.ДанныеЯчеек);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("Результат", РассчитанныеИзменения.Результат);
	РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
	РезультатРасчета.Вставить("ДанныеЯчеек", РассчитанныеИзменения.ДанныеЯчеек);
	
	// результат вывода
	Возврат РезультатРасчета;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоИсточникам

Процедура ПолучитьНастраиваемыеЭлементыОтбора(Отбор, Список, Имя)
	
	Для Каждого ЭлементОтбора из Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПолучитьНастраиваемыеЭлементыОтбора(ЭлементОтбора, Список, Имя);
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(ЭлементОтбора.ПравоеЗначение, "<заполнить")
			И Найти(НРег(ЭлементОтбора.ЛевоеЗначение), Имя) Тогда
			
			Список.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьНастройкиСКДПередВыводом(Настройки, ПараметрыДанных) Экспорт
	Перем Значение;
	
	Структура = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
	Структура.Вставить("Организация");
	Структура.Вставить("Сценарий");
	Структура.Вставить("Подразделение");
	
	Для Каждого КлючИЗначение из Структура Цикл
		
		Используется = ПараметрыДанных.Свойство(КлючИЗначение.Ключ, Значение);
		Если Используется Тогда
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		
		Отборы = Новый Массив;
		ПолучитьНастраиваемыеЭлементыОтбора(Настройки.Отбор, Отборы, НРег(КлючИЗначение.Ключ));
		Для Каждого ЭлементОтбора из Отборы Цикл
			ЭлементОтбора.Использование = Используется;
			Если Используется Тогда
				ЭлементОтбора.ПравоеЗначение = Значение;
				ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, ИсточникиДанных, КэшДанных)
	Перем СКДПлановыеДанные, СКДДанныеДокумента;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	НачалоПериода = ПараметрыДанных.НачалоПериода;
	КонецПериода = ПараметрыДанных.КонецПериода;
	ГраницаФактДанных = ПараметрыДанных.ГраницаФактДанных;
	
	ВнешниеНаборы = Новый Структура;
	
	Если КэшДанных.Свойство("ВалютаРеглУчета") Тогда
		
		ВалютаРеглУчета = КэшДанных.ВалютаРеглУчета;
		
	Иначе
		
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КэшДанных.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("КэшЗначенийАналитик") Тогда
		
		КэшЗначенийАналитик = КэшДанных.КэшЗначенийАналитик;
		
	Иначе
		
		КэшЗначенийАналитик = Новый Соответствие;
		КэшДанных.Вставить("КэшЗначенийАналитик", КэшЗначенийАналитик);
		
	КонецЕсли;
		
	Если КэшДанных.Свойство("КэшПлановыхКурсов") Тогда
		
		КэшПлановыхКурсов = КэшДанных.КэшПлановыхКурсов;
		
	Иначе
		
		КэшПлановыхКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(,,НачалоПериода, КонецПериода);
		КэшПлановыхКурсов.Сортировать("Валюта, Сценарий, Период");
		КэшПлановыхКурсов.Индексы.Добавить("Валюта, Сценарий, Период");
		КэшПлановыхКурсов.Индексы.Добавить("Валюта, Сценарий");
		
		КэшДанных.Вставить("КэшПлановыхКурсов", КэшПлановыхКурсов);
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("ПлановыеДанные") Тогда
		
		ПлановыеДанные = КэшДанных.ПлановыеДанные;
		
	ИначеЕсли СКДДанных.Свойство("СКДПлановыеДанные", СКДПлановыеДанные) И 
		СКДПлановыеДанные.НаборыДанных[0].Элементы.Количество() Тогда
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПлановыеДанные);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если ПараметрыДанных.Свойство("Документ") Тогда
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ", ПараметрыДанных.Документ);
		КонецЕсли;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", ВалютаРеглУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", КэшПлановыхКурсов);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВариантСумм", ПараметрыДанных.ВариантСумм);
		
		Если ПараметрыДанных.Свойство("Статус") Тогда
			ФинОтчеты.УстановитьОтбор(Компоновщик.Настройки.Отбор, "Статус", ПараметрыДанных.Статус, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		ПлановыеДанные = ФинОтчеты.ВыгрузитьРезультатСКД(СКДПлановыеДанные, Компоновщик);
		
		КэшДанных.Вставить("ПлановыеДанные", ПлановыеДанные);
		
	Иначе
		
		ПлановыеДанные = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ПлановыеДанные", ПлановыеДанные);
	
	Если СКДДанных.Свойство("СКДДанныеДокумента", СКДДанныеДокумента) И СКДДанныеДокумента <> Неопределено Тогда
		
		#Область ПодготовкаКэшейДляДанныхДокумента
		
		Если КэшДанных.Свойство("НастройкиСвязей") Тогда
			
			НастройкиСвязей = КэшДанных.НастройкиСвязей;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РегистрСведений.СтатьяБюджетов,
			|	РегистрСведений.СвязанныйПоказательБюджетов КАК ПоказательБюджетов,
			|	РегистрСведений.Коэффициент,
			|	РегистрСведений.Расход,
			|	РегистрСведений.Аналитика1,
			|	РегистрСведений.Аналитика2,
			|	РегистрСведений.Аналитика3,
			|	РегистрСведений.Аналитика4,
			|	РегистрСведений.Аналитика5,
			|	РегистрСведений.Аналитика6,
			|	РегистрСведений.ТранслироватьАналитику1,
			|	РегистрСведений.ТранслироватьАналитику2,
			|	РегистрСведений.ТранслироватьАналитику3,
			|	РегистрСведений.ТранслироватьАналитику4,
			|	РегистрСведений.ТранслироватьАналитику5,
			|	РегистрСведений.ТранслироватьАналитику6,
			|	РегистрСведений.АдресТрансляцииАналитики1,
			|	РегистрСведений.АдресТрансляцииАналитики2,
			|	РегистрСведений.АдресТрансляцииАналитики3,
			|	РегистрСведений.АдресТрансляцииАналитики4,
			|	РегистрСведений.АдресТрансляцииАналитики5,
			|	РегистрСведений.АдресТрансляцииАналитики6,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики1 КАК ПоказательВидАналитики1,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики2 КАК ПоказательВидАналитики2,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики3 КАК ПоказательВидАналитики3,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики4 КАК ПоказательВидАналитики4,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики5 КАК ПоказательВидАналитики5,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики6 КАК ПоказательВидАналитики6,
			|	РегистрСведений.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик КАК ПоказательКоличествоИспользуемыхАналитик,
			|	РегистрСведений.СвязанныйПоказательБюджетов.УчитыватьПоВалюте КАК УчитыватьПоВалюте,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ИсточникЗаполненияВалюты,
			|	РегистрСведений.СвязанныйПоказательБюджетов.УчитыватьПоКоличеству КАК ПоказательУчитыватьПоКоличеству,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой КАК ПоказательЕдиницаИзмеренияОпределяетсяАналитикой,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АдресАналитикиКоличество КАК ПоказательАдресАналитикиКоличество,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК ПоказательИсточникЗаполнениеЕдиницыИзмерения,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ЕдиницаИзмерения КАК ПоказательЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.СвязиПоказателейБюджетов КАК РегистрСведений";
			
			РезультатЗапроса = Запрос.Выполнить();
			НастройкиСвязей = РезультатЗапроса.Выгрузить();
			КэшДанных.Вставить("НастройкиСвязей", НастройкиСвязей);
			
		КонецЕсли;
		
		Если КэшДанных.Свойство("КэшПараметровСтатей") Тогда
			
			КэшПараметровСтатей = КэшДанных.КэшПараметровСтатей;
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтатьиБюджетов.Ссылка КАК СтатьяБюджетов,
			|	СтатьиБюджетов.КоличествоИспользуемыхАналитик,
			|	СтатьиБюджетов.ВидАналитики1,
			|	СтатьиБюджетов.ВидАналитики2,
			|	СтатьиБюджетов.ВидАналитики3,
			|	СтатьиБюджетов.ВидАналитики4,
			|	СтатьиБюджетов.ВидАналитики5,
			|	СтатьиБюджетов.ВидАналитики6,
			|	СтатьиБюджетов.УчитыватьПоКоличеству КАК СтатьяУчитыватьПоКоличеству,
			|	СтатьиБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой КАК СтатьяЕдиницаИзмеренияОпределяетсяАналитикой,
			|	СтатьиБюджетов.АдресАналитикиКоличество КАК СтатьяАдресАналитикиКоличество,
			|	СтатьиБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СтатьяИсточникЗаполнениеЕдиницыИзмерения,
			|	СтатьиБюджетов.ЕдиницаИзмерения КАК СтатьяЕдиницаИзмерения
			|ИЗ
			|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов";
			
			РезультатЗапроса = Запрос.Выполнить();
			КэшПараметровСтатей = РезультатЗапроса.Выгрузить();
			КэшДанных.Вставить("КэшПараметровСтатей", КэшПараметровСтатей);
			
		КонецЕсли;
		
		#КонецОбласти
		
		СтруктураДанныхДокумента = Новый Структура;
		Для Каждого КлючИЗначение из СКДДанныеДокумента Цикл
			
			Если КэшДанных.Свойство(КлючИЗначение.Ключ) Тогда
				
				МакетКомпоновки = КэшДанных[КлючИЗначение.Ключ];
				
			Иначе
				
				Компоновщик = ФинОтчеты.КомпоновщикСхемы(КлючИЗначение.Значение);
				
				ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
				
				Для Каждого Параметр из СКДДанных.Параметры Цикл
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				Значение = Неопределено;
				Если ПараметрыДанных.Свойство("Организация", Значение) Тогда
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Организация", Значение);
				КонецЕсли;
				Если ПараметрыДанных.Свойство("Подразделение", Значение) Тогда
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Подразделение", Значение);
				КонецЕсли;
				Для Каждого ВычисляемоеПоле из ПараметрыДанных.ДополнительныеФильтрыПоАналитикам Цикл
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_" + ВычисляемоеПоле.Ключ, ПараметрыДанных[ВычисляемоеПоле.Ключ]);
				КонецЦикла;
				
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Валюта", 		ПараметрыДанных.Валюта);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Сценарий", 	ПараметрыДанных.Сценарий);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", 		НачалоПериода);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", 		КонецПериода);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", 	ГраницаФактДанных);
				
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", ВалютаРеглУчета);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", КэшПлановыхКурсов);
				
				МакетКомпоновки = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(КлючИЗначение.Значение, Компоновщик);
				КэшДанных.Вставить(КлючИЗначение.Ключ, МакетКомпоновки);
				
			КонецЕсли;
			
			ВнешниеНаборыДокумента = Новый Структура;
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Аналитика", ПараметрыДанных.АналитикаСтатейБюджетов);
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Суммы", ПараметрыДанных.ОборотыПоСтатьямБюджетов);
			ВнешниеНаборыДокумента.Вставить("НастройкиСвязей", НастройкиСвязей);
			ВнешниеНаборыДокумента.Вставить("КэшПараметровСтатей", КэшПараметровСтатей);
			
			ДанныеТаблицыДокумента = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДокумента);
			ВнешниеНаборы.Вставить(КлючИЗначение.Ключ, ДанныеТаблицыДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("МакетПредварительнойСКД") Тогда
		МакетПредварительнойСКД = КэшДанных.МакетПредварительнойСКД;
	Иначе
		СКДПредварительная = СКДДанных.СКДПредварительныйРасчет;
		Если СКДПредварительная <> Неопределено Тогда
			Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПредварительная);
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
			МакетПредварительнойСКД = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПредварительная, Компоновщик);
			КэшДанных.Вставить("МакетПредварительнойСКД", МакетПредварительнойСКД);
		КонецЕсли;
	КонецЕсли;
	
	Если КэшДанных.Свойство("ФактическиеДанные") Тогда
		ФактическиеДанные = КэшДанных.ФактическиеДанные;
	Иначе
		Если ПараметрыДанных.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеРеглУчета Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ИначеЕсли ПараметрыДанных.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета Тогда
			Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
				Валюта = Константы.ВалютаУправленческогоУчета.Получить();
			Иначе
				Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			КонецЕсли;
		Иначе
			Валюта = ПараметрыДанных.ВалютаСценария;
		КонецЕсли;
		ФактическиеДанные = БюджетированиеСервер.ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, Валюта);
		КэшДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ФактическиеДанные", ФактическиеДанные);
	
	Если МакетПредварительнойСКД <> Неопределено Тогда
		ТаблицаПредварительныхИтогов = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетПредварительнойСКД, ВнешниеНаборы);
		ВнешниеНаборы.Вставить("ПредварительныйРасчет", ТаблицаПредварительныхИтогов);
	КонецЕсли;
	
	Если КэшДанных.Свойство("МакетСКДИтоговой") Тогда
		МакетСКДИтоговой = КэшДанных.МакетСКДИтоговой;
	Иначе
		СКДИтоговая = СКДДанных.СКДИтоговая;
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДИтоговая);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		МакетСКДИтоговой = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДИтоговая, Компоновщик);
		КэшДанных.Вставить("МакетСКДИтоговой", МакетСКДИтоговой);
	КонецЕсли;
	
	ТаблицаРезультат = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетСКДИтоговой, ВнешниеНаборы);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область ФункцииФормулБюджетныхОтчетов

Функция ПроверитьАргументФункции(Аргумент)
	
	Если Аргумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Аргумент = Число(Аргумент);
	Исключение
		Аргумент = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено)
				 
				 МассивЗначений = Новый Массив;
				 МассивЗначений.Добавить(Значение1);
				 МассивЗначений.Добавить(Значение2);
				 МассивЗначений.Добавить(Значение3);
				 МассивЗначений.Добавить(Значение4);
				 МассивЗначений.Добавить(Значение5);
				 МассивЗначений.Добавить(Значение6);
				 МассивЗначений.Добавить(Значение7);
				 МассивЗначений.Добавить(Значение8);
				 МассивЗначений.Добавить(Значение9);
				 МассивЗначений.Добавить(Значение10);
				 МассивЗначений.Добавить(Значение11);
				 МассивЗначений.Добавить(Значение12);
				 МассивЗначений.Добавить(Значение13);
				 МассивЗначений.Добавить(Значение14);
				 МассивЗначений.Добавить(Значение15);
				 МассивЗначений.Добавить(Значение16);
				 МассивЗначений.Добавить(Значение17);
				 МассивЗначений.Добавить(Значение18);
				 МассивЗначений.Добавить(Значение19);
				 МассивЗначений.Добавить(Значение20);
				 
				 Результат = 0;
				 ФлагВедущееЗначение = Истина;
				 ВедущееЗначение = 0;
				 
				 Для Каждого ЗначениеФункции из МассивЗначений Цикл
					 
					 СчВлож = 0;
					 ОбошлиВсе = Ложь;
					 Пока Не ОбошлиВсе Цикл
						 Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
							 Если СчВлож = ЗначениеФункции.Количество() Тогда
								 ОбошлиВсе = Истина;
								 Продолжить;
							 КонецЕсли;
							 Значение = ЗначениеФункции[СчВлож];
							 СчВлож = СчВлож + 1;
						 Иначе
							 Значение = ЗначениеФункции;
							 ОбошлиВсе = Истина;
						 КонецЕсли;
						 
						 Если ФлагВедущееЗначение Тогда
							 ФлагВедущееЗначение = Ложь;
							 Если ПроверитьАргументФункции(Значение) Тогда
								 ВедущееЗначение = Значение;
							 КонецЕсли;
							 Продолжить;
						КонецЕсли;
						 
						 Если Не ПроверитьАргументФункции(Значение) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Результат = Результат + Значение;
						 
					 КонецЦикла;
					 
				 КонецЦикла;
	
	Возврат Новый Структура("Результат, ВедущееЗначение", Результат, ВедущееЗначение);
				 
КонецФункции

Функция Отклонение(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
				 Значение5, Значение6, Значение7, Значение8,
				 Значение9, Значение10, Значение11, Значение12,
				 Значение13, Значение14, Значение15, Значение16,
				 Значение17, Значение18, Значение19, Значение20);
				 
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
				 
	Возврат Результат - ВедущееЗначение;
	
КонецФункции

Функция ПроцентОтклонения(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
				 Значение5, Значение6, Значение7, Значение8,
				 Значение9, Значение10, Значение11, Значение12,
				 Значение13, Значение14, Значение15, Значение16,
				 Значение17, Значение18, Значение19, Значение20);
				 
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
				 
	Если Результат = 0 и ВедущееЗначение <> 0 Тогда
		Возврат 100;
	ИначеЕсли Результат = 0 и ВедущееЗначение = 0 Тогда
		Возврат 0;
	ИначеЕсли ВедущееЗначение = 0 Тогда
		Возврат 100;
	КонецЕсли;
	
	Возврат Окр(100 * (Результат - ВедущееЗначение) / ВедущееЗначение, 2)
	
КонецФункции

#КонецОбласти

#Область СтруктураОписанияВидаБюджета

Функция ПолучитьЗначенияДополнительныхФильтров(Таблица, ИмяКолонки)
	
	Копия = Таблица.Скопировать();
	Копия.Свернуть(ИмяКолонки + ", Флаг" + ИмяКолонки);
	
	Результат = Новый Массив;
	
	Для Каждого Значение из Копия Цикл
		Если Значение["Флаг" + ИмяКолонки] <> "отобрать" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Значение[ИмяКолонки]) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат.Добавить(Значение[ИмяКолонки]);
	КонецЦикла;
	
	Если Результат.Количество() Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДополнитьИсточникиДанныхПредопределеннымиЗначениями(ИсточникиДанных, СтруктураКолонокТаблицыДанных, СтруктураЯчеек)
	
	Для Каждого Источник из ИсточникиДанных Цикл
		
		НайденныеСтроки = СтруктураЯчеек.Скопировать(Новый Структура("ИД_Источника", Источник.Идентификатор));
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
			
			РазличныеЗначения = ПолучитьЗначенияДополнительныхФильтров(НайденныеСтроки, Измерение);
			Если РазличныеЗначения <> Неопределено Тогда
				
				Источник.Вставить(Измерение, РазличныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			
			ИмяПоля = ИмяПоляБюджетногоОтчета(Измерение);
			РазличныеЗначения = ПолучитьЗначенияДополнительныхФильтров(НайденныеСтроки, ИмяПоля);
			Если РазличныеЗначения <> Неопределено Тогда
				
				Источник.Вставить(ИмяПоля, РазличныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла
	
КонецФункции

Функция ПоляИсточниковОтчета(СтруктураКолонок, СтруктураЯчеек, ПараметрыЯчеек)
	
	ЕстьВалюта = СтруктураКолонок.Измерения.Найти("Валюта") <> Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтруктураЯчеек.ИндексСтроки,
	               |	" + ?(ЕстьВалюта, "СтруктураЯчеек.Валюта", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)") + " КАК Валюта,
	               |	" + ?(ЕстьВалюта, "СтруктураЯчеек.ФлагВалюта", """""") + " КАК ФлагВалюта
	               |	
	               |ПОМЕСТИТЬ СтруктураЯчеек
	               |ИЗ
	               |	&СтруктураЯчеек КАК СтруктураЯчеек
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |" +
				   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ПараметрыЯчеек.ИндексСтроки,
				   |	ПараметрыЯчеек.ФлагСумма,
				   |	ПараметрыЯчеек.ФлагКоличество,
				   |	ПараметрыЯчеек.ФлагЗначение,
				   |	ПараметрыЯчеек.ПолеИсточника
				   |ПОМЕСТИТЬ ПараметрыЯчеек
				   |ИЗ
				   |	&ПараметрыЯчеек КАК ПараметрыЯчеек
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ПараметрыЯчеек.ИндексСтроки,
				   |	ПараметрыЯчеек.ФлагСумма,
				   |	ПараметрыЯчеек.ФлагКоличество,
				   |	ПараметрыЯчеек.ФлагЗначение,
				   |	ПараметрыЯчеек.ПолеИсточника,
				   |	СтруктураЯчеек.ФлагВалюта,
				   |	СтруктураЯчеек.Валюта
				   |ПОМЕСТИТЬ ПредварительныеПоляИсточников
				   |ИЗ
				   |	СтруктураЯчеек КАК СтруктураЯчеек
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
				   |		ПО СтруктураЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ПредварительныеПоляИсточников.ИндексСтроки,
				   |	ПредварительныеПоляИсточников.ФлагСумма,
				   |	ПредварительныеПоляИсточников.ФлагКоличество,
				   |	ПредварительныеПоляИсточников.ФлагЗначение,
				   |	ЕСТЬNULL(ВложенныйЗапрос.ПолеИсточника, ПредварительныеПоляИсточников.ПолеИсточника) КАК ПолеИсточника,
				   |	ПредварительныеПоляИсточников.ФлагВалюта,
				   |	ПредварительныеПоляИсточников.Валюта,
				   |	ВЫБОР
				   |		КОГДА ВложенныйЗапрос.ПолеИсточника <> ПредварительныеПоляИсточников.ПолеИсточника
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Вспомогательное
				   |ПОМЕСТИТЬ ТаблицаЯчеек
				   |ИЗ
				   |	ПредварительныеПоляИсточников КАК ПредварительныеПоляИсточников
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			""НачальныйОстаток"" КАК ПолеИсточника
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""КонечныйОстаток""
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""Приход""
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""Расход""
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""Оборот"") КАК ВложенныйЗапрос
				   |		ПО (ПредварительныеПоляИсточников.ПолеИсточника = ВложенныйЗапрос.ПолеИсточника
				   |				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""Оборот""
				   |					И ВложенныйЗапрос.ПолеИсточника В (""Приход"", ""Расход"")
				   |				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""КонечныйОстаток""
				   |					И ВложенныйЗапрос.ПолеИсточника В (""НачальныйОстаток"", ""Приход"", ""Расход"")
				   |				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""НачальныйОстаток""
				   |					И ВложенныйЗапрос.ПолеИсточника В (""Приход"", ""Расход""))
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	""Сумма"" + СтруктураЯчеек.ПолеИсточника КАК ИмяРесурса,
				   |	СтруктураЯчеек.Вспомогательное
				   |ПОМЕСТИТЬ ИменаРесурсов
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагСумма
				   |	И СтруктураЯчеек.ПолеИсточника <> """"
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	""СуммаВал"" + СтруктураЯчеек.ПолеИсточника,
				   |	СтруктураЯчеек.Вспомогательное
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагСумма
				   |	И СтруктураЯчеек.ПолеИсточника <> """"
				   |	И (СтруктураЯчеек.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
				   |			ИЛИ СтруктураЯчеек.ФлагВалюта = ""заполнить"")
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	""Количество"" + СтруктураЯчеек.ПолеИсточника,
				   |	СтруктураЯчеек.Вспомогательное
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагКоличество
				   |	И СтруктураЯчеек.ПолеИсточника <> """"
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	""ЗначениеПоказателя"",
				   |	СтруктураЯчеек.Вспомогательное
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагЗначение
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   |	ИменаРесурсов.ИмяРесурса,
				   |	МИНИМУМ(ИменаРесурсов.Вспомогательное) КАК Вспомогательное
				   |ИЗ
				   |	ИменаРесурсов КАК ИменаРесурсов
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ИменаРесурсов.ИмяРесурса";
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек.Скопировать(, "ИндексСтроки" + ?(ЕстьВалюта, ", Валюта, ФлагВалюта", "")));
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек.Скопировать(, "ИндексСтроки, ФлагСумма, ФлагКоличество, ФлагЗначение, ПолеИсточника"));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыОписанияВидаБюджета, ХранилищеКэшаСтруктурыОписанияВидаБюджета");
	Постфикс = РежимФормирования;
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	Если ЗначенияКэша.СформированКэшСтруктурыОписанияВидаБюджета = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаСтруктурыОписанияВидаБюджета.Получить();
	КонецЕсли;
	
	// Получаем источники данных
	ИсточникиДанных = ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем источники данных группировок по периоду
	ИсточникиПериодовГруппировок = ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем структуру ячеек
	ОписаниеЯчеек = ПолучитьСтруктуруЯчеекВидаБюджета(ВидБюджета, ИсточникиДанных, ИсточникиПериодовГруппировок, 
																	СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	СтруктураЯчеек = ОписаниеЯчеек.СтруктураЯчеек;
	ПараметрыЯчеек = ОписаниеЯчеек.ПараметрыЯчеек;
	
	// Дополнение источников постоянными фильтрами
	ДополнитьИсточникиДанныхПредопределеннымиЗначениями(ИсточникиДанных, СтруктураКолонокТаблицыДанных, СтруктураЯчеек);
	
	// Дополнение фильтров аналитиками шапки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыБюджетовАналитикиШапки.ВидАналитики
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
		
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяПоля = ИмяПоляБюджетногоОтчета(Выборка.ВидАналитики);
		Для Каждого Источник Из ИсточникиДанных Цикл
			ФинансоваяОтчетностьСервер.НовыйОтбор(Источник.ДополнительныйОтбор.Отбор, ИмяПоля, "<заполнить_" + ИмяПоля + ">");
		КонецЦикла;
	КонецЦикла;
	
	МассивИндексов = Новый Массив;
	Для Каждого СтрокаТаблицы из СтруктураЯчеек Цикл
		
		ОбщиеИзмерения = ПараметрыЯчеек[СтрокаТаблицы.ИндексСтроки].ОбщиеИзмерения;
		
		Если ЗначениеЗаполнено(ОбщиеИзмерения)
			И МассивИндексов.Найти(ОбщиеИзмерения) = Неопределено Тогда
			
			МассивИндексов.Добавить(ОбщиеИзмерения);
			
		КонецЕсли;
	КонецЦикла;
	
	ПоляИсточников = ПоляИсточниковОтчета(СтруктураКолонокТаблицыДанных, СтруктураЯчеек, ПараметрыЯчеек);
	
	Результат = Новый Структура;
	Результат.Вставить("ИсточникиДанных", 				ИсточникиДанных);
	Результат.Вставить("ИсточникиПериодовГруппировок", 	ИсточникиПериодовГруппировок);
	Результат.Вставить("СтруктураЯчеек", 				СтруктураЯчеек);
	Результат.Вставить("ПараметрыЯчеек", 				ПараметрыЯчеек);
	Результат.Вставить("ИндексыСтруктурыЯчеек", 		МассивИндексов);
	Результат.Вставить("ПоляИсточников", 				ПоляИсточников);
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыОписанияВидаБюджета, ХранилищеКэшаСтруктурыОписанияВидаБюджета",
								Истина, Новый ХранилищеЗначения(Результат));
								
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтруктураОписанияСпискаВвода

Функция ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеКолонки)
	
	КэшДопРеквизиты 	= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	АналитикиШапки 		= СведенияОБюджетеДляРасчета.АналитикиШапки;
	
	Заголовок = Неопределено;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		Заголовок = НСтр("en='Budget item';ru='Статья бюджетов'");
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов");
		Возврат Новый Структура("Заголовок, ТипЗначения", Заголовок, ТипЗначения);
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
														
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			Заголовок = Строка(Периодичность);
			
			ПериодичностьТекст = "";
			Если Периодичность = Перечисления.Периодичность.Год Тогда
				Формат = "ДФ=гггг";
			ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Формат = "ДФ='''%1'' ММММ гггг'";
				ПериодичностьТекст = НСтр("en='Half a year with';ru='Полугодие с'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
				Формат = "ДФ='к ''%1'''";
				ПериодичностьТекст = НСтр("en='quarter';ru='квартал'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
				Формат = "ДФ='ММММ гггг'";
			ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
				Формат = "ДФ='''%1'' дд.ММ.гг'";
				ПериодичностьТекст = НСтр("en='Decade from';ru='Декада с'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
				Формат = "ДФ='''%1'' дд.ММ.гг'";
				ПериодичностьТекст = НСтр("en='Week';ru='Неделя с'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
				Формат = "ДЛФ=D";
			КонецЕсли;
			Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Формат, ПериодичностьТекст);
				
			Возврат Новый Структура("Заголовок, ТипЗначения, Формат", Заголовок, Новый ОписаниеТипов("Дата"), Формат);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
			
			Возврат Новый Структура("Заголовок, ТипЗначения", "Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
												ЭлементОтчета.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
		
	ТипЗначения = ВидАналитики.ТипЗначения;
	
	Результат = Новый Структура("Заголовок, ТипЗначения", Строка(ВидАналитики), ТипЗначения);
	
	Если ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
		
		ПараметрыВыбора = Новый Структура("Отбор, Значение", 
					"Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ДополнительноеСвойство"));
		Результат.Вставить("ПараметрыВыбора", ПараметрыВыбора);
		
	Иначе
		
		СоответствиеСвязанныхЭлементов = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
		СтруктураСвязей = Неопределено;
		
		Для Каждого Тип из ТипЗначения.Типы() Цикл
			
			СвязанныеТипы = СоответствиеСвязанныхЭлементов[Тип];
			Если СвязанныеТипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого КлючИЗначение из ВышележащиеКолонки Цикл
				Для Каждого ТипВышележащейКолонки из КлючИЗначение.Значение.ТипЗначения.Типы() Цикл
					ПараметрыСвязи = СвязанныеТипы.Найти(ТипВышележащейКолонки, "Тип");
					Если ПараметрыСвязи <> Неопределено Тогда
						СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
								"Элементы.СписокРедактированияБюджета.ТекущиеДанные." + КлючИЗначение.Ключ, ПараметрыСвязи.Реквизит);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаАналитики из АналитикиШапки Цикл
				Для Каждого ТипВышележащейКолонки из СтрокаАналитики.ТипЗначения.Типы() Цикл
					ПараметрыСвязи = СвязанныеТипы.Найти(ТипВышележащейКолонки, "Тип");
					Если ПараметрыСвязи <> Неопределено Тогда
						СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
								"Объект.Аналитика" + СтрокаАналитики.НомерСтроки, ПараметрыСвязи.Реквизит);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураСвязей <> Неопределено Тогда
			Результат.Вставить("СвязиПараметровВыбора", СтруктураСвязей);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеДляСтрокиБюджетаКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы)
	
	СложнаяТаблица 			= СведенияОБюджетеДляРасчета.СложнаяТаблица;
	КэшДопРеквизиты 		= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	
	ЭлементыТекущегоУровня = Новый Структура();
	ЭлементыТекущегоУровня.Вставить("Периодичности", 	Новый Массив);
	ЭлементыТекущегоУровня.Вставить("СтрокиОснования", 	Новый Массив);
	ЭлементыТекущегоУровня.Вставить("НакопленныйОтбор", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВышележащиеЭлементы.НакопленныйОтбор));
	ЭлементыТекущегоУровня.Вставить("НастройкиКолонок", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВышележащиеЭлементы.НастройкиКолонок));
	ЭлементыТекущегоУровня.Вставить("Измерения", ВышележащиеЭлементы.Измерения);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
									ЭлементыТекущегоУровня.Периодичности,
									ВышележащиеЭлементы.Периодичности);
	
	ЭлементыТекущегоУровня.СтрокиОснования.Добавить(ЭлементОтчета.ЭлементОтчета);
	
	СоответствиеСтатейКолонок = Новый Соответствие;
	НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент, Строка", Истина, ЭлементОтчета.ЭлементОтчета));
	ЕстьРедактируемаяСтатья = Ложь;
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ОписаниеЯчейки = Новый Структура("СтатьяБюджетов, ИмяПоказателя", НайденнаяСтрока.СтатьяБюджетов, Неопределено);
		// Если сложная таблица: в разных ячейках могут быть разные показатели
		// для простой таблицы: одна колонка-один показатель
		Если СложнаяТаблица Тогда
			СтрокаПараметров = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
			Если СтрокаПараметров.ФлагЗначение Тогда
				ИмяПоказателя = "Значение";
			ИначеЕсли СтрокаПараметров.ФлагКоличество Тогда
				ИмяПоказателя = "Количество";
			Иначе
				ИмяПоказателя = "Сумма";
			КонецЕсли;
			ОписаниеЯчейки.Вставить("ИмяПоказателя", ИмяПоказателя);
		КонецЕсли;
		СоответствиеСтатейКолонок.Вставить(НайденнаяСтрока.Колонка, ОписаниеЯчейки);
		Если ЗначениеЗаполнено(НайденнаяСтрока.СтатьяБюджетов) Тогда
			ЕстьРедактируемаяСтатья = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭлементОтчета.Строки.Количество() Тогда
		Если Не ЕстьРедактируемаяСтатья Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СложнаяТаблица Тогда
		ЭлементыТекущегоУровня.Вставить("СтатьиБюджетов", СоответствиеСтатейКолонок);
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			ЭлементыТекущегоУровня.Периодичности.Добавить(Периодичность);
			ЭлементыТекущегоУровня.НастройкиКолонок.Вставить("Период" + Периодичность, 
				ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы.НастройкиКолонок));
			
			Возврат ЭлементыТекущегоУровня;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		Если ЗначениеЗаполнено(ЭлементыТекущегоУровня.Измерения) Тогда
			ЭлементыТекущегоУровня.Измерения = ЭлементыТекущегоУровня.Измерения + ",";
		Иначе
			ЭлементыТекущегоУровня.Измерения = "";
		КонецЕсли;
		ЭлементыТекущегоУровня.Измерения = ЭлементыТекущегоУровня.Измерения + ЭлементОтчета.ИмяИзмерения;
		
		Если ЗначениеЗаполнено(ЭлементОтчета.ФиксированноеЗначение)
			ИЛИ ЭлементОтчета.ЭтоАналитикаПрочее Тогда
			ЭлементыТекущегоУровня.НакопленныйОтбор.Вставить(ЭлементОтчета.ИмяИзмерения, ЭлементОтчета.ФиксированноеЗначение);
			ЭлементыТекущегоУровня.НастройкиКолонок.Вставить(ЭлементОтчета.ИмяИзмерения, 
				ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы.НастройкиКолонок));
		КонецЕсли;
		
		Возврат ЭлементыТекущегоУровня;
		
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		
		Возврат ЭлементыТекущегоУровня;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НастройкиВводаЯчейкиСписка(СведенияОБюджетеДляРасчета, СтрокаСпискаВвода, Измерения, НакопленныйОтбор)
	
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	СтруктураКолонок 		= СведенияОБюджетеДляРасчета.СтруктураКолонокТаблицыДанных;
	
	ТаблицаИзмерений = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(
							Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаСпискаВвода));
	
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения);
	НастройкиВвода = Новый Структура();
	
	Для Каждого Измерение из МассивИзмерений Цикл
		
		КопияТаблицы = ТаблицаИзмерений.Скопировать();
		КопияТаблицы.Свернуть(Измерение + ", Флаг" + Измерение);
		Выборка = ПолучитьВыборкуЯчеек(СтруктураОписанияОтчета.СтруктураЯчеек, Измерение, , СтрокаСпискаВвода, НакопленныйОтбор, Истина, , Истина);
		
		МассивВыбираемыхЗначений = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы из Выборка Цикл
			Если СтрокаТаблицы["Флаг" + Измерение] = "отобрать" Тогда
				МассивВыбираемыхЗначений.Добавить(СтрокаТаблицы[Измерение]);
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "прочие" Тогда
				Если СтруктураКолонок.Измерения.Найти(Измерение) <> Неопределено Тогда
					МассивВыбираемыхЗначений.Добавить(Неопределено, "<прочие>");
				Иначе
					Для Каждого ВидАналитики из СтруктураКолонок.ВидыАналитик Цикл
						ИмяИзмерения = ИмяПоляБюджетногоОтчета(ВидАналитики);
						Если ИмяИзмерения = Измерение Тогда
							МассивВыбираемыхЗначений.Добавить(Неопределено, "<прочие " + НРег(ВидАналитики) + ">");
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "документ" Тогда
				МассивВыбираемыхЗначений = Неопределено;
				Прервать;
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "заполнить" Тогда //период
				МассивВыбираемыхЗначений = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиВвода.Вставить(Измерение, МассивВыбираемыхЗначений);
		
	КонецЦикла;
	
	Возврат НастройкиВвода;
	
КонецФункции

Функция СписокИзмеренийРедактированияОтличается(ЭлементСравнения1, ЭлементСравнения2, СложнаяТаблица)
	
	Если ЭлементСравнения1 = Неопределено
		ИЛИ ЭлементСравнения2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементСравнения1.Измерения <> ЭлементСравнения2.Измерения Тогда
		Возврат Истина;
	КонецЕсли;
	
	МинимальнаяПериодичность1 = Перечисления.Периодичность.МинимальнаяПериодичность(ЭлементСравнения1.Периодичности);
	МинимальнаяПериодичность2 = Перечисления.Периодичность.МинимальнаяПериодичность(ЭлементСравнения2.Периодичности);
	
	Если МинимальнаяПериодичность1 <> МинимальнаяПериодичность2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СложнаяТаблица Тогда
		Для Каждого КлючИЗначение из ЭлементСравнения1.СтатьиБюджетов Цикл
			НастройкиСтатей2 = ЭлементСравнения2.СтатьиБюджетов[КлючИЗначение.Ключ];
			Если НастройкиСтатей2 = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если НастройкиСтатей2.СтатьяБюджетов <> КлючИЗначение.Значение.СтатьяБюджетов
				ИЛИ НастройкиСтатей2.ИмяПоказателя <> КлючИЗначение.Значение.ИмяПоказателя Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементыДерева, СоответствиеРезультат, ВышележащиеЭлементы = Неопределено)
	
	СложнаяТаблица 			= СведенияОБюджетеДляРасчета.СложнаяТаблица;
	КэшДопРеквизиты 		= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	СтруктураКолонок 		= СведенияОБюджетеДляРасчета.СтруктураКолонокТаблицыДанных;
	
	Если ВышележащиеЭлементы = Неопределено Тогда
		
		ВышележащиеЭлементы = Новый Структура("Периодичности, НакопленныйОтбор, 
												|Измерения, НастройкиКолонок, СтрокиОснования", 
												Новый Массив, Новый Структура, 
												"", Новый Структура(), Новый Массив);
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	СоответствиеУровня = Новый Соответствие;
	
	Для Каждого ЭлементОтчета из ЭлементыДерева.Строки Цикл
		
		КолонкиПредыдущегоУровня = Неопределено;
		ЭлементыТекущегоУровня = ДоступныеДляСтрокиБюджетаКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы);
		
		Если ЭлементОтчета.Строки.Количество() Тогда
			
			КолонкиПредыдущегоУровня = РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, 
									ЭлементОтчета, СоответствиеРезультат, 
									?(ЭлементыТекущегоУровня = Неопределено, ВышележащиеЭлементы, ЭлементыТекущегоУровня));
			
			Если КолонкиПредыдущегоУровня = Неопределено Тогда
				МассивЭлементов.Добавить(КолонкиПредыдущегоУровня);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КолонкиПредыдущегоУровня <> Неопределено Тогда
			МассивЭлементов.Добавить(КолонкиПредыдущегоУровня);
			Если ЭлементыТекущегоУровня <> Неопределено Тогда
				КолонкиПредыдущегоУровня.НакопленныйОтбор = ЭлементыТекущегоУровня.НакопленныйОтбор;
			Иначе
				КолонкиПредыдущегоУровня.НакопленныйОтбор = ВышележащиеЭлементы.НакопленныйОтбор;
			КонецЕсли;
			СоответствиеУровня.Вставить(ЭлементОтчета.ЭлементОтчета, КолонкиПредыдущегоУровня);
		ИначеЕсли ЭлементыТекущегоУровня <> Неопределено Тогда
			МассивЭлементов.Добавить(ЭлементыТекущегоУровня);
			СоответствиеУровня.Вставить(ЭлементОтчета.ЭлементОтчета, ЭлементыТекущегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение из СоответствиеУровня Цикл
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(КлючИЗначение.Значение.Периодичности);
		Измерения = "";
		
		Если МинимальнаяПериодичность <> Неопределено Тогда
			Измерения = "Период" + МинимальнаяПериодичность;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.Измерения) Тогда
			Измерения = Измерения + ?(ЗначениеЗаполнено(Измерения), ",", "") + КлючИЗначение.Значение.Измерения;
		КонецЕсли;
		
		НастройкиВвода = НастройкиВводаЯчейкиСписка(СведенияОБюджетеДляРасчета, 
													КлючИЗначение.Ключ, Измерения, 
													КлючИЗначение.Значение.НакопленныйОтбор);
		
		МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения);
		
		СтруктураОписанияСтроки = Новый Структура("Измерения, НастройкиКолонок, 
													|НастройкиВвода, СтрокиОснования", 
												МассивИзмерений, КлючИЗначение.Значение.НастройкиКолонок, 
												НастройкиВвода, КлючИЗначение.Значение.СтрокиОснования);
												
		Если СложнаяТаблица Тогда
			СтруктураОписанияСтроки.Вставить("СтатьиБюджетов", КлючИЗначение.Значение.СтатьиБюджетов);
		КонецЕсли;
		
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СтруктураОписанияСтроки);
		
	КонецЦикла;
	
	Для Сч = 1 по МассивЭлементов.ВГраница() Цикл
		Если СписокИзмеренийРедактированияОтличается(МассивЭлементов[Сч-1], МассивЭлементов[Сч], СложнаяТаблица) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ОпределяющийЭлемент = Неопределено;
	Для Каждого Элемент из МассивЭлементов Цикл
		Если Элемент <> Неопределено Тогда
			ОпределяющийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОпределяющийЭлемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиОснования = Новый Массив;
	Для Каждого ЭлементМассива из МассивЭлементов Цикл
		Если ЭлементМассива = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиОснования, ЭлементМассива.СтрокиОснования);
	КонецЦикла;
	
	ОпределяющийЭлемент.СтрокиОснования = СтрокиОснования;
	
	Возврат ОпределяющийЭлемент;
	
КонецФункции

Процедура ПараметрыКолонокВвода(ВидБюджета, ЭлементОтчета, СтруктураКолонок, СтруктураОписанияОтчета, КэшДопРеквизиты, ПараметрыЭлементовТаблицы)
	
	СложнаяТаблица = ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ВидАналитики.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	Справочник.ВидыБюджетов.АналитикиШапки КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ВидБюджета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	АналитикиШапки = РезультатЗапроса.Выгрузить();
	
	СведенияОБюджетеДляРасчета = Новый Структура;
	СведенияОБюджетеДляРасчета.Вставить("КэшДопРеквизиты", КэшДопРеквизиты);
	СведенияОБюджетеДляРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонок);
	СведенияОБюджетеДляРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	СведенияОБюджетеДляРасчета.Вставить("АналитикиШапки", АналитикиШапки);
	СведенияОБюджетеДляРасчета.Вставить("СложнаяТаблица", СложнаяТаблица);
	
	Для Каждого ЭлементОтчета из ЭлементОтчета.Строки Цикл
		
		Если ЭлементОтчета.ИмяИзмерения = "Строки" Тогда
			
			РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ПараметрыЭлементовТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСпискаВводаПоСтрокамЯчеек(ВидБюджета, СтруктураКолонокТаблицыДанных,
												СтруктураОписанияОтчета, ДеревоВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшПараметровСпискаВвода, ХранилищеКэшаПараметровСпискаВвода");
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	Если ЗначенияКэша.СформированКэшПараметровСпискаВвода = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаПараметровСпискаВвода.Получить();
	КонецЕсли;
	
	КэшДопРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ПараметрыСтрок = Новый Соответствие;
	
	Для Каждого ЭлементОтчета из ДеревоВывода.Строки Цикл
		
		Если ЭлементОтчета.ИмяИзмерения = "Таблица" Тогда
			
			ПараметрыКолонокВвода(ВидБюджета, ЭлементОтчета, СтруктураКолонокТаблицыДанных, 
										СтруктураОписанияОтчета, КэшДопРеквизиты, ПараметрыСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура("СформированКэшПараметровСпискаВвода, ХранилищеКэшаПараметровСпискаВвода",
									Истина, Новый ХранилищеЗначения(ПараметрыСтрок));
								
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыСтрок;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Процедура возвращает отбор по имени 
// процедура не рекурсивная, т.к. вызывается из СравнитьОтборы,
// в которой уже обработан обход групп
//
// Параметры:
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - искомый отбор
//  ЭлементыОтбора - ОтбораКомпоновкиДанных - отбор, где ищем
//  НайденныйЭлемент - ЭлементОтбораКомпоновкиДанных - найденный элемент отбора
//
Функция НайтиОтбор(ЭлементОтбора, ЭлементыОтбора, НайденныйЭлемент)
	
	Для Каждого ЭлементОтбораСравнения из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораСравнения) <> Тип(ЭлементОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбораСравнения) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение
				И ЭлементОтбораСравнения.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение
				И ЭлементОтбораСравнения.ВидСравнения = ЭлементОтбора.ВидСравнения
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение
				Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		Иначе
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ТипГруппы = ЭлементОтбора.ТипГруппы
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение
				Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор)
	
	Для Каждого ЭлементОтбора из ЭлементСравненияОтбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЕстьЗначимыеЭлементыОтбора(ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиОтборПоИмени(ИсточникОтбор, ИмяЭлемента, НайденныйОтбор = Неопределено) Экспорт
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Если ТипЗнч(ИсточникОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыОтбора = ИсточникОтбор.Элементы;
	Иначе
		ЭлементыОтбора = ИсточникОтбор.Отбор.Элементы;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если НайтиОтборПоИмени(ЭлементОтбора, ИмяЭлемента, НайденныйОтбор) Тогда
				
				Если НайденныйОтбор = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки
				ИЛИ ЭлементОтбора.ПравоеЗначение = ПолеКомпоновки)
				И ЭлементОтбора.Использование Тогда
				
				Если НайденныйОтбор = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныйОтбор.Добавить(ЭлементОтбора);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйОтбор = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат НайденныйОтбор.Количество();
	КонецЕсли;
	
КонецФункции

Функция СравнитьОтборы(ИсточникОтбор, ЭлементСравненияОтбор)
	
	Если ИсточникОтбор = Неопределено
		И ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор.Отбор);
	КонецЕсли;
	
	Если ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ИсточникОтбор.Отбор);
	КонецЕсли;
	
	Для Каждого ЭлементОтбора из ИсточникОтбор.Отбор.Элементы Цикл
		НайденныйЭлемент = Неопределено;
		Если Не НайтиОтбор(ЭлементОтбора, ЭлементСравненияОтбор.Отбор.Элементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не СравнитьОтборы(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора из ЭлементСравненияОтбор.Отбор.Элементы Цикл
		НайденныйЭлемент = Неопределено;
		Если Не НайтиОтбор(ЭлементОтбора, ИсточникОтбор.Отбор.Элементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не СравнитьОтборы(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТекстФормулыПоГруппе(ЭлементОтчета, ДеревоЭлементов) Экспорт
	
	
	
КонецФункции

Функция МассивВСписок(Массив) 
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции

Функция ТипИзмеренияСовпадаетСИскомым(СтрокаЭлемента, ТипИскомый, КэшДопРеквизитов)
	
	Если СтрокаЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ИскомоеИзмерение = Перечисления.ТипыИзмеренийФинансовогоОтчета[ТипИскомый];
		ИмяИзмерения = Неопределено;
		
		Если ЗначениеЗаполнено(СтрокаЭлемента.АдресСтруктурыЭлемента)
			ИЛИ ЗначениеЗаполнено(СтрокаЭлемента.ЭлементОтчета) Тогда
			
			Если ЗначениеЗаполнено(СтрокаЭлемента.АдресСтруктурыЭлемента) Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли Не ЗначениеЗаполнено(КэшДопРеквизитов) Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.ЭлементОтчета, "ТипИзмерения");
			Иначе
				ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизитов);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИскомоеИзмерение = ИмяИзмерения Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВРодительскихСтрокахЕстьОпределенныйЭлемент(Знач СтрокаДерева, ТипИскомый, КэшДопРеквизитов)
	
	СтрокаРодитель = СтрокаДерева;
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если ТипИзмеренияСовпадаетСИскомым(СтрокаРодитель, ТипИскомый, КэшДопРеквизитов) Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаРодитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(СтрокаРодитель);
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(СтрокаДерева, ТипИскомый, КэшДопРеквизитов)
	
	ПодчиненныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаДерева);
	Если Не ПодчиненныеСтроки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
		
		Если ТипИзмеренияСовпадаетСИскомым(ПодчиненнаяСтрока, ТипИскомый, КэшДопРеквизитов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(ПодчиненнаяСтрока, ТипИскомый, КэшДопРеквизитов) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыДоступностиФильтров(СтрокаОтчета, ПараметрыОпределения = Неопределено, КэшДопРеквизитов = Неопределено) Экспорт
	
	МенеджерПеречисления = Перечисления.ВидыЭлементовФинансовогоОтчета;
	
	ДоступностьФильтров = Новый Структура("Организация, Подразделение, Сценарий", Истина, Истина, Истина);
	Колонка = Неопределено; Строка = Неопределено;
	
	Если ПараметрыОпределения = Неопределено Тогда
		
		НастройкаЯчеек = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, 
															Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
		Если НастройкаЯчеек = Неопределено Тогда
			
			СтрокиТаблицы = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, 
															Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
			КолонкиТаблицы = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, 
															Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			Если СтрокиТаблицы = Неопределено И КолонкиТаблицы = Неопределено Тогда
				// это отчет без структуры
				Строка = СтрокаОтчета;
				Колонка = Неопределено;
			ИначеЕсли СтрокиТаблицы <> Неопределено Тогда
				Строка = СтрокаОтчета;
				Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
				Колонка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			ИначеЕсли КолонкиТаблицы <> Неопределено Тогда
				Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
				Строка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
				Колонка = СтрокаОтчета;
			КонецЕсли;
			
		Иначе
			
			ТаблицаНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЯчеек.ЭлементОтчета, "ЭлементыТаблицы").Выгрузить();
			СтрокаОпределенияЯчейки = ТаблицаНастройки.Найти(СтрокаОтчета.ЭлементОтчета, "Элемент");
			Если СтрокаОпределенияЯчейки = Неопределено Тогда
				Родитель = СтрокаОтчета.Родитель;
				СтрокаОпределенияЯчейки = ТаблицаНастройки.Найти(Родитель.ЭлементОтчета, "Элемент");
			КонецЕсли;
			Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
			Строка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ЭлементОтчета", СтрокаОпределенияЯчейки.Строка);
			Колонка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ЭлементОтчета", СтрокаОпределенияЯчейки.Колонка);
			
		КонецЕсли;
		
	Иначе
		
		АдресТаблицыЭлементов = Неопределено; АдресЭлементовОтчета = Неопределено;
		ТаблицаЭлементов = Неопределено; ДеревоЭлементов = Неопределено;
		Если ПараметрыОпределения.Свойство("АдресТаблицыЭлементов", АдресТаблицыЭлементов) Тогда
			ТаблицаЭлементов = ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов);
		КонецЕсли;
		Если ПараметрыОпределения.Свойство("АдресЭлементовОтчета", АдресЭлементовОтчета) Тогда
			ДеревоЭлементов = ПолучитьИзВременногоХранилища(АдресЭлементовОтчета);
		КонецЕсли;
		
		Если ТаблицаЭлементов = Неопределено Тогда
			
			ЭлементДерева = ДеревоЭлементов.Строки.Найти(ПараметрыОпределения.АдресРедактируемогоЭлемента, "АдресСтруктурыЭлемента", Истина);
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементДерева, 
																	Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
			ИсточникПодчиненных = Неопределено;
			Если КорневойЭлемент <> Неопределено Тогда
				ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(КорневойЭлемент, 
																			"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
				Колонка = ЭлементДерева;
				Строка = ИсточникПодчиненных;
			КонецЕсли;
			
			Если КорневойЭлемент = Неопределено Тогда
				
				КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементДерева, 
																		Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
				Если КорневойЭлемент <> Неопределено Тогда
					ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(КорневойЭлемент, 
																				"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
					Колонка = ИсточникПодчиненных;
					Строка = ЭлементДерева;
				КонецЕсли;
				
			КонецЕсли;
			
			Если КорневойЭлемент = Неопределено Тогда
			
				Строка = ЭлементДерева;
				Колонка = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ЯчейкаМатрицы = ТаблицаЭлементов.Найти(ПараметрыОпределения.АдресРедактируемогоЭлемента, "Элемент");
			
			Строка = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Строка, "АдресСтруктурыЭлемента", Истина);
			Колонка = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Колонка, "АдресСтруктурыЭлемента", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение из ДоступностьФильтров Цикл
		
		ИскомыйТип = КлючИЗначение.Ключ;
		
		ЕстьЯчейкиСНеопределеннымЭлементом = Истина;
		Если ВРодительскихСтрокахЕстьОпределенныйЭлемент(Строка, ИскомыйТип, КэшДопРеквизитов) Тогда
			ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
		ИначеЕсли Не ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(Строка, ИскомыйТип, КэшДопРеквизитов) Тогда
			ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
		КонецЕсли;
		
		// в строках измерение не определено - проверим колонки
		Если ЕстьЯчейкиСНеопределеннымЭлементом И Колонка <> Неопределено Тогда
			
			ЕстьЯчейкиСНеопределеннымЭлементом = Истина;
			Если ВРодительскихСтрокахЕстьОпределенныйЭлемент(Колонка, ИскомыйТип, КэшДопРеквизитов) Тогда
				ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
			ИначеЕсли Не ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(Колонка, ИскомыйТип, КэшДопРеквизитов) Тогда
				ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(КлючИЗначение.Ключ, ЕстьЯчейкиСНеопределеннымЭлементом);
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьКэшПараметровЕдиницИзмерения(ДанныеЯчеек, ПараметрыЯчеек)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеЯчеек.СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ДанныеЯчеек.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ДанныеЯчеек
	|ИЗ
	|	&ДанныеЯчеек КАК ДанныеЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ ПараметрыЯчеек
	|ИЗ
	|	&ПараметрыЯчеек КАК ПараметрыЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеЯчеек.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ПараметрыЯчеек.ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ СтатьиПоказатели
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
	|		ПО ДанныеЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка КАК ОбъектУчета,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)) КАК ЗаполнениеЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.СтатьяБюджетов
	|			И (СтатьиПоказатели.ПоказательБюджетов = ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
	|ГДЕ
	|	Справочник.УчитыватьПоКоличеству
	|	И СтатьиПоказатели.ФлагКоличество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)),
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения)
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.ПоказательБюджетов
	|ГДЕ
	|	Справочник.УчитыватьПоКоличеству
	|	И СтатьиПоказатели.ФлагКоличество
	|");
	
	Запрос.УстановитьПараметр("ДанныеЯчеек", ДанныеЯчеек);
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек);
	ТаблицаКоличественногоУчета = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, ОбъектУчета, ЕдиницаИзмеренияОпределяетсяАналитикой");
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, ОбъектУчета, ЕдиницаИзмеренияОпределяетсяАналитикой, АналитикаЕдиницыИзмерения");
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Колонка, ЕдиницаИзмеренияОпределяетсяАналитикой");
	ТаблицаКоличественногоУчета.Индексы.Добавить("Колонка, ЕдиницаИзмеренияОпределяетсяАналитикой, АналитикаЕдиницыИзмерения");
	
	Возврат ТаблицаКоличественногоУчета;
	
КонецФункции

Функция РассчитатьГлубинуУровней(СтрокиДерева, Знач Глубина = 1, ПредыдущийФлаг = Ложь) Экспорт
	
	Если Не ПредыдущийФлаг Тогда
		ФинальнаяГлубинаУровня = 1;
	Иначе
		ФинальнаяГлубинаУровня = Глубина;
	КонецЕсли;
	
	Результат = ФинальнаяГлубинаУровня;
	ПодчиненныеЭлементы = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокиДерева);
	Для Каждого СтрокаДерева из ПодчиненныеЭлементы Цикл
		
		Если СтрокаДерева.ВыводитьВместеСРодительским Тогда
			ГлубинаТекущегоУровня = ФинальнаяГлубинаУровня + 1;
		Иначе
			ГлубинаТекущегоУровня = ФинальнаяГлубинаУровня;
		КонецЕсли;
		Результат = Макс(Результат, ГлубинаТекущегоУровня);
		Результат = Макс(Результат, РассчитатьГлубинуУровней(СтрокаДерева, ГлубинаТекущегоУровня, СтрокаДерева.ВыводитьВместеСРодительским));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
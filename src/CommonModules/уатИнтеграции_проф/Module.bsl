////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции для интеграции с внешними системами.
// 
// Содержит код, используемый в варианте поставке ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет получение таблицы ТС из внешних систем
//
// Параметры:
//
//     ПараметрыПроцедуры - Структура - Содержит поля:
//      *  ВнешняяСистема  - СправочникСсылка.уатВнешниеСистемы
//      *  УчетнаяЗапись   - СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга,
//                           СправочникСсылка.уатУчетныеЗаписиСервисовШтрафов,
//                           СправочникСсылка.уатУчетныеЗаписиСервисовПарковок
//      *  СтрокаКолонокСписка - Строка.
//     АдресХранилища - Строка
//                    - УникальныйИдентификатор - адрес временного хранилища для результата.
//
// Результат представляет собой структуру с полями:
//     СписокВнешняяСистема, ТекстОшибки.
//
Процедура ПолучитьДанныеВсехТС(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	СписокТС    = Новый Массив();
	ТекстОшибки = "";
	
	ВнешняяСистема		 = ПараметрыПроцедуры.ВнешняяСистема;
	УчетнаяЗапись		 = ПараметрыПроцедуры.УчетнаяЗапись;
	
	СтрокаКолонокСписка = "Наименование,ИДвСистеме,ГаражныйНомер,ТССопоставлена,ГосударственныйНомер,
	|СТС,Статус,VIN,Автопарк,IDАвтопарка";
	
	СтруктураРеквизитов	 = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнешняяСистема, "ТипВнешнейСистемы,НаименованиеПС");
	ТипВнешнейСистемы	 = СтруктураРеквизитов.ТипВнешнейСистемы;
	НаименованиеПС		 = СтруктураРеквизитов.НаименованиеПС;
	
	СистемаМониторинга = ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга");
	СервисПарковок     = ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок");

	Если СистемаМониторинга Тогда
		СписокТС = уатМониторинг.ПолучитьДанныеВсехТС(УчетнаяЗапись,
			СтрокаКолонокСписка, ТекстОшибки);
			
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Паркоматика") Тогда
		ТабДанных = уатИнтеграции_проф.Паркоматика_СписокТС(УчетнаяЗапись, ТекстОшибки);
		Для Каждого ТекТС Из ТабДанных Цикл
			
			НоваяСтрока = Новый Структура("Наименование, ИДвСистеме, ГаражныйНомер, ГосударственныйНомер, СТС, VIN, Статус, ТССопоставлена");
			НоваяСтрока.Наименование         = ТекТС.carNum;
			НоваяСтрока.ИДвСистеме           = ТекТС.id;
			НоваяСтрока.ГосударственныйНомер = ТекТС.carNum;
			НоваяСтрока.Статус               = ТекТС.status;
			СписокТС.Добавить(НоваяСтрока);
		КонецЦикла;
		
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет") Тогда
		Если ПараметрыПроцедуры.Автопарк = "По всем учетным записям" 
			ИЛИ ПараметрыПроцедуры.Автопарк = "Не входящие в автопарки" Тогда
			
			ТекУчетнаяЗапись = Новый Структура("ТокенАвторизации,АдресСервиса,IDАвтопарка,Версия,IDКомпании");
			ТекУчетнаяЗапись.ТокенАвторизации  = УчетнаяЗапись.ТокенАвторизации;
			ТекУчетнаяЗапись.АдресСервиса      = УчетнаяЗапись.АдресСервиса;
			ТекУчетнаяЗапись.IDАвтопарка       = "";
			ТекУчетнаяЗапись.IDКомпании        = УчетнаяЗапись.IDКомпании;
			ТекУчетнаяЗапись.Версия     	   = УчетнаяЗапись.Версия;
		Иначе
			ТекУчетнаяЗапись = УчетнаяЗапись;
		КонецЕсли;
		
		мсвАвтопаков = Новый Массив();
		Если ПараметрыПроцедуры.Автопарк = "Не входящие в автопарки" Тогда 
			мсвАвтопаков = ПолучитьСписокАвтопаков(УчетнаяЗапись.ТокенАвторизации);
		КонецЕсли;
		
		ТабДанных = уатИнтеграции_проф.ШтрафовНет_СписокТС(ТекУчетнаяЗапись, ТекстОшибки);
		Для Каждого ТекТС Из ТабДанных Цикл
			
			НоваяСтрока = Новый Структура("Наименование, ИДвСистеме, ГаражныйНомер, ГосударственныйНомер,
			|СТС, VIN, Статус, ТССопоставлена, Автопарк, IDАвтопарка");
			НоваяСтрока.Наименование         = ТекТС.name;
			НоваяСтрока.ИДвСистеме           = ТекТС.id;
			НоваяСтрока.ГосударственныйНомер = ТекТС.reg;
			НоваяСтрока.СТС                  = ТекТС.cert;
			НоваяСтрока.Статус               = ТекТС.status;
			НоваяСтрока.Автопарк             = ТекТС.unitName;
			НоваяСтрока.IDАвтопарка          = ТекТС.unitID;
			
			Если мсвАвтопаков.Количество() <> 0 Тогда
				Если мсвАвтопаков.Найти(НоваяСтрока.IDАвтопарка) = Неопределено Тогда
					СписокТС.Добавить(НоваяСтрока);
				КонецЕсли;
			Иначе
				СписокТС.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки)
		ИЛИ СписокТС.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("СписокВнешняяСистема, ТекстОшибки", СписокТС, ТекстОшибки), АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Проверим сопоставлена ТС или нет
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Системамониторинга",	 СистемаМониторинга);
	Запрос.УстановитьПараметр("СервисПарковок",		 СервисПарковок);
	Запрос.УстановитьПараметр("ВнешняяСистема",		 ВнешняяСистема);
	Запрос.УстановитьПараметр("НаименованиеПС",		 НаименованиеПС);
	Запрос.УстановитьПараметр("УчетнаяЗапись",		 УчетнаяЗапись);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА &Системамониторинга
	               |			ТОГДА уатТС.УчетнаяЗаписьСистемыМониторинга
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &СервисПарковок
	               |					ТОГДА уатТС.УчетнаяЗаписьCервисаПарковок
	               |				ИНАЧЕ уатТС.УчетнаяЗаписьCервисаШтрафов
	               |			КОНЕЦ
	               |	КОНЕЦ КАК УчетнаяЗаписьСистемы,
	               |	ВЫБОР
	               |		КОГДА &Системамониторинга
	               |			ТОГДА уатТС.ИДвСистемеНавигации
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &СервисПарковок
	               |					ТОГДА уатТС.ИДвСервисеПарковок
	               |				ИНАЧЕ уатТС.ИДвСервисеШтрафов
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ИДвСистеме
	               |ПОМЕСТИТЬ втРезультат
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	НЕ уатТС.ПометкаУдаления
	               |	И ВЫБОР
	               |			КОГДА &Системамониторинга
	               |				ТОГДА уатТС.ИспользуемаяСистемаGPS = &ВнешняяСистема
	               |						ИЛИ уатТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.ПустаяСсылка)
	               |						ИЛИ уатТС.ИспользуемаяСистемаGPS = НЕОПРЕДЕЛЕНО
	               |						ИЛИ уатТС.ИспользуемаяСистемаGPS = &НаименованиеПС
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА &СервисПарковок
	               |						ТОГДА уатТС.ИспользуемыйСервисПарковок = &ВнешняяСистема
	               |								ИЛИ уатТС.ИспользуемыйСервисПарковок = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.ПустаяСсылка)
	               |								ИЛИ уатТС.ИспользуемыйСервисПарковок = НЕОПРЕДЕЛЕНО
	               |					ИНАЧЕ уатТС.ИспользуемыйСервисШтрафов = &ВнешняяСистема
	               |							ИЛИ уатТС.ИспользуемыйСервисШтрафов = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.ПустаяСсылка)
	               |							ИЛИ уатТС.ИспользуемыйСервисШтрафов = НЕОПРЕДЕЛЕНО
	               |				КОНЕЦ
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезультат.ИДвСистеме КАК ИДвСистеме
	               |ИЗ
	               |	втРезультат КАК втРезультат
	               |ГДЕ
	               |	втРезультат.УчетнаяЗаписьСистемы = &УчетнаяЗапись";
	
	Запрос.Текст = уатОбщегоНазначения.МодифицироватьЗапросКСправочникаТСВСоответсвииСПоставкой(Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из СписокТС Цикл
		ИДвСистеме = СтрЗаменить(СтрЗаменить(ТекСтрока.ИДвСистеме, Символы.НПП, ""), " ", "");
		
		Для Каждого ТекТС Из Выборка Цикл
			ТекИДвСистеме = СтрЗаменить(СтрЗаменить(ТекТС.ИДвСистеме, Символы.НПП, ""), " ", "");  
			Если ИДвСистеме = ТекИДвСистеме Тогда
				ТекСтрока.ТССопоставлена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Новый Структура("СписокВнешняяСистема, ТекстОшибки", СписокТС, ТекстОшибки), АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСписокАвтопаков(ТокенАвторизации)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатУчетныеЗаписиСервисовШтрафов.IDАвтопарка КАК IDАвтопарка,
	               |	уатУчетныеЗаписиСервисовШтрафов.ТокенАвторизации КАК ТокенАвторизации
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиСервисовШтрафов КАК уатУчетныеЗаписиСервисовШтрафов
	               |ГДЕ
	               |	НЕ уатУчетныеЗаписиСервисовШтрафов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	флЕстьПустой  = Ложь;
	мсвАвтопарков = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Если  Выборка.ТокенАвторизации = ТокенАвторизации Тогда
			мсвАвтопарков.Добавить(Выборка.IDАвтопарка);
			Если Выборка.IDАвтопарка = "" Тогда
				флЕстьПустой = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если флЕстьПустой Тогда
		мсвАвтопарков = Новый Массив();
	КонецЕсли;

	Возврат мсвАвтопарков;
	
КонецФункции

// Записывает событие в журнал регистрации.
// Предназначен для записи дополнительных событий, которые не записываются системой.
//
Процедура ЗаписатьСообщениеЛога(Знач УчетнаяЗапись, Комментарий = "",
	Уровень = Неопределено, Объект = Неопределено, ИмяСобытияВЖурналеРегистрации = "") Экспорт
	
	Если УчетнаяЗапись = Неопределено
		ИЛИ (ТипЗнч(УчетнаяЗапись) = Тип("Структура")
		И НЕ УчетнаяЗапись.Свойство("Ссылка"))
		ИЛИ НЕ УчетнаяЗапись.ЛогированиеЗапросов Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("Структура")
		И УчетнаяЗапись.Свойство("Ссылка") Тогда
		УчетнаяЗапись = УчетнаяЗапись.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатУчетныеЗаписиСервисовШтрафов") Тогда
		ИмяСобытияВЖурналеРегистрации = "Штрафы. Штрафов нет. Логи запросов";
		Объект = Метаданные.ОбщиеМодули.уатИнтеграцияШтрафовНет;
	ИначеЕсли ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатУчетныеЗаписиСервисовПарковок") Тогда
		ИмяСобытияВЖурналеРегистрации = "Сервис парковок. Паркоматика. Логи запросов";
		Объект = Метаданные.ОбщиеМодули.уатИнтеграцияПарковкиПаркоматика;
	ИначеЕсли ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатУчетныеЗаписиБирж") Тогда
		ИмяСобытияВЖурналеРегистрации = "Биржы грузоперевозок. АТИ. Логи запросов";
		Объект = Метаданные.ОбщиеМодули.уатИнтеграцияБиржиАТИ_уэ;
	ИначеЕсли ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга") Тогда
		Если УчетнаяЗапись.СистемаМониторинга = Справочники.уатВнешниеСистемы.Omnicomm Тогда
			ИмяСобытияВЖурналеРегистрации = "Мониторинг. Omnicomm. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияМониторингOmnicomm;
		ИначеЕсли УчетнаяЗапись.СистемаМониторинга = Справочники.уатВнешниеСистемы.Wialon Тогда
			ИмяСобытияВЖурналеРегистрации = "Мониторинг. Wialon. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияМониторингWialon;
		ИначеЕсли УчетнаяЗапись.СистемаМониторинга = Справочники.уатВнешниеСистемы.СКАУТ Тогда
			ИмяСобытияВЖурналеРегистрации = "Мониторинг. СКАУТ. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияМониторингСКАУТ;
		ИначеЕсли УчетнаяЗапись.СистемаМониторинга = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
			ИмяСобытияВЖурналеРегистрации = "Мониторинг. АвтоГРАФ 5. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияМониторингАвтоГРАФ;
		КонецЕсли;
	ИначеЕсли ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатУчетныеЗаписиПЦ") Тогда
		Если УчетнаяЗапись.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
			ИмяСобытияВЖурналеРегистрации = "Процессинговый центр. Газпромнефть. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияПЦГазпромнефть;
		ИначеЕсли УчетнаяЗапись.ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР Тогда
			ИмяСобытияВЖурналеРегистрации = "Процессинговый центр. ППР. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияПЦППР;
		ИначеЕсли УчетнаяЗапись.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
			ИмяСобытияВЖурналеРегистрации = "Процессинговый центр. Топливные карты Роснефть. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияПЦРоснефть;
		ИначеЕсли УчетнаяЗапись.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
			ИмяСобытияВЖурналеРегистрации = "Процессинговый центр. Лукойл ЛИКАРД. Логи запросов";
			Объект = Метаданные.ОбщиеМодули.уатИнтеграцияПЦЛукойлЛИКАРД;
		КонецЕсли;
	ИначеЕсли ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.уатУчетныеЗаписиMultiGo") Тогда
		ИмяСобытияВЖурналеРегистрации = "Сервис MultiGo. Логи запросов";
		Объект = Метаданные.ОбщиеМодули.уатИнтеграцияMultiGo;
	КонецЕсли;

	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	Если Объект = Неопределено Тогда 
		Объект = Метаданные.ОбщиеМодули.уатЗащищенныеФункцииСервер;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяСобытияВЖурналеРегистрации) Тогда
		ИмяСобытияВЖурналеРегистрации = "Логи запросов";
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации,
	Уровень,
	Объект,
	,
	Комментарий);
	
КонецПроцедуры

#Область Штрафы

// Процедура выполняет регламентное задание уатИнформацияоТСпоДаннымШтрафовНЕТ.
//
Процедура ИнформацияоТСпоДаннымШтрафовНЕТ() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("ru='Информация о ТС по данным Штрафов НЕТ'");
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", Справочники.уатВнешниеСистемы.ШтрафовНет);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	уатТС.ИДвСервисеШтрафов КАК ИДвСервисеШтрафов,
	               |	уатТС.УчетнаяЗаписьCервисаШтрафов КАК УчетнаяЗаписьCервисаШтрафов,
	               |	уатТС.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ИспользуемыйСервисШтрафов = &ВнешняяСистема
	               |	И уатТС.ИДвСервисеШтрафов <> """"
	               |	И НЕ уатТС.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабДанных   = Неопределено;
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(Выборка.УчетнаяЗаписьCервисаШтрафов) Тогда   
			Продолжить;
		КонецЕсли;
		
		ОбновитьИнформациюОТСВСервисеШтрафов(Выборка.УчетнаяЗаписьCервисаШтрафов,
		Выборка.Ссылка, Выборка.ИДвСервисеШтрафов, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,
			,, Нстр("ru = 'Ошибка при загрузке данных по ТС '") +
			Выборка.Наименование + " " + ТекстОшибки);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Функция производит получение сводной информации об аккаунте клиента.
//
Функция ШтрафовНет_ИнформацияОбАккаунте(УчетныеЗаписиСервисаШтрафов, ТекстОшибки = "") Экспорт 
	
	ИнформацияОбАккаунте = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "account", ТекстОшибки);
	Возврат ИнформацияОбАккаунте;
	
КонецФункции

// Функция производит получение информации о компании.
//
Функция ШтрафовНет_ИнформацияОКомпании(УчетныеЗаписиСервисаШтрафов, ТекстОшибки = "") Экспорт 
	
	ИнформацияОКомпании = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "companies_info", ТекстОшибки);

	Возврат ИнформацияОКомпании;
	
КонецФункции

// Функция производит получение списка компаний.
//
Функция ШтрафовНет_СписокКомпаний(УчетныеЗаписиСервисаШтрафов, ТекстОшибки = "") Экспорт 
	
	СписокКомпаний = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "companies", ТекстОшибки);
	Возврат СписокКомпаний;
	
КонецФункции

// Функция производит получение списка автопарков.
//
Функция ШтрафовНет_СписокАвтопарков(УчетныеЗаписиСервисаШтрафов, ТекстОшибки = "") Экспорт 
	
	СписокАвтопарков = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "units", ТекстОшибки);
	Возврат СписокАвтопарков;
	
КонецФункции

// Функция производит получение списка транспортных средств.
//
Функция ШтрафовНет_СписокТС(УчетныеЗаписиСервисаШтрафов, МассивIDТС = Неопределено, ТекстОшибки = "") Экспорт 
	
	ТабТС = Новый ТаблицаЗначений();
	ТабТС.Колонки.Добавить("name",			 Новый ОписаниеТипов("Строка")); 
	ТабТС.Колонки.Добавить("id", 			 Новый ОписаниеТипов("Строка")); 
	ТабТС.Колонки.Добавить("reg",			 Новый ОписаниеТипов("Строка"));
	ТабТС.Колонки.Добавить("cert",			 Новый ОписаниеТипов("Строка"));
	ТабТС.Колонки.Добавить("status",		 Новый ОписаниеТипов("Строка"));
	ТабТС.Колонки.Добавить("inactiveReason", Новый ОписаниеТипов("Строка"));
	ТабТС.Колонки.Добавить("gisScannedAt",	 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабТС.Колонки.Добавить("gibddScannedAt", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабТС.Колонки.Добавить("ditScannedAt",	 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабТС.Колонки.Добавить("createdAt",		 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабТС.Колонки.Добавить("finesCount",	 Новый ОписаниеТипов("Число"));
	ТабТС.Колонки.Добавить("finesAmount",	 Новый ОписаниеТипов("Число"));
	ТабТС.Колонки.Добавить("unitId",	     Новый ОписаниеТипов("Строка"));
	ТабТС.Колонки.Добавить("unitName",	     Новый ОписаниеТипов("Строка"));
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Страница", 1);
	Если ЗначениеЗаполнено(МассивIDТС) 
		И МассивIDТС.Количество() = 1 Тогда
		ПараметрыЗапроса.Вставить("МассивIDТС", МассивIDТС[0]);
	КонецЕсли;
	СписокТС = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "cars", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТабТС;
	КонецЕсли;
	
	СоответсвиеАвтопарков = Новый Соответствие;
	СписокАвтопарков = ШтрафовНет_СписокАвтопарков(УчетныеЗаписиСервисаШтрафов, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		МассивАвтопарков = СписокАвтопарков.Получить("units");
		Если ТипЗнч(МассивАвтопарков) = Тип("Массив") Тогда
			Для Каждого ТекАвтосервис Из МассивАвтопарков Цикл
				СоответсвиеАвтопарков.Вставить(ТекАвтосервис.Получить("id"),
					ТекАвтосервис.Получить("name"));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ШтрафовНет_ЗаполнитьТабТС(СписокТС, ТабТС, СоответсвиеАвтопарков);
	
	КолвоТС  = 0;
	МассивТС = СписокТС.Получить("cars");
	Если ТипЗнч(МассивТС) = Тип("Массив") Тогда
		КолвоТС = МассивТС.Количество();
	КонецЕсли;
	
	Если КолвоТС >= 50 Тогда
		Счетчик = 2;
		Пока КолвоТС >= 50 Цикл
			ПараметрыЗапроса.Страница = Счетчик;
			
			СписокТС = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "cars", ТекстОшибки, ПараметрыЗапроса);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат ТабТС;
			КонецЕсли;
			
			КолвоТС  = 0;
			МассивТС = СписокТС.Получить("cars");
			Если ТипЗнч(МассивТС) = Тип("Массив") Тогда
				КолвоТС = МассивТС.Количество();
			КонецЕсли;
			
			ШтрафовНет_ЗаполнитьТабТС(СписокТС, ТабТС, СоответсвиеАвтопарков);
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабТС;
	
КонецФункции

// Функция производит получение списка транспортных средств.
//
Процедура ШтрафовНет_ЗаполнитьТабТС(СписокТС, ТабТС, СоответсвиеАвтопарков) 
	
	МассивТС = СписокТС.Получить("cars");
	Если ТипЗнч(МассивТС) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из МассивТС Цикл 
			НовСтр                = ТабТС.Добавить();
			НовСтр.name           = ТекЭлемент.Получить("name");
			НовСтр.id             = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("id")), " ", ""), Символы.НПП, "");
			НовСтр.reg            = ТекЭлемент.Получить("grz");
			НовСтр.cert           = ТекЭлемент.Получить("sts");
			НовСтр.status         = ТекЭлемент.Получить("status");
			НовСтр.inactiveReason = ТекЭлемент.Получить("inactive_reason");
			НовСтр.gisScannedAt   = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("gisScannedAt"));
			НовСтр.gibddScannedAt = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("gibddScannedAt"));
			НовСтр.ditScannedAt   = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("ditScannedAt"));
			НовСтр.finesCount     = ТекЭлемент.Получить("finesCount");
			НовСтр.finesAmount    = ТекЭлемент.Получить("finesAmount");
			НовСтр.unitId         = ТекЭлемент.Получить("unit_id");
			НовСтр.unitName       = СоответсвиеАвтопарков.Получить(НовСтр.unitId);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция производит получение информации о ТС.
//
Функция ШтрафовНет_ИнформацияОТС(УчетныеЗаписиСервисаШтрафов, IDТС, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDТС", IDТС);
	
	ИнформацияОТС = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "cars", ТекстОшибки, ПараметрыЗапроса);
	
	Возврат ИнформацияОТС;
	
КонецФункции

// Функция производит получение информации о количестве штрафов в компании
//
Функция ШтрафовНет_СтатистикаПоШтрафам(УчетныеЗаписиСервисаШтрафов, IDТС, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDТС", IDТС);
	
	ИнформацияОТС = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "stat_fines", ТекстОшибки, ПараметрыЗапроса);
	
	Возврат ИнформацияОТС;
	
КонецФункции

// Функция добавляет ТС в сервис.
//
Функция ШтрафовНет_НовоеТранспортноеСредство(УчетныеЗаписиСервисаШтрафов, ТС, ТекстОшибки = "") Экспорт 
	
	IDТС = "";
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ТС", ТС);
	
	ИнформацияОТС = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "cars_new", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат IDТС;
	КонецЕсли;
	
	IDТС = ИнформацияОТС.Получить("id");
	Если ЗначениеЗаполнено(IDТС) Тогда
		IDТС = СтрЗаменить(СтрЗаменить(Строка(ИнформацияОТС.Получить("id")), " ", ""), Символы.НПП, "");
	Иначе
		IDТС = "";
	КонецЕсли;
	
	Возврат IDТС;
	
КонецФункции

// Процедура удаляет ТС из сервиса.
//
Процедура ШтрафовНет_УдалениеТранспортногоСредства(УчетныеЗаписиСервисаШтрафов, IDТС, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDТС",             IDТС);
	
	Результат = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "cars_delete", ТекстОшибки, ПараметрыЗапроса);
	
КонецПроцедуры

// Процедура производит загрузку списка штрафов.
//
// Параметры
//  ПараметрыПроцедуры - Структура - параметры запроса
//
Процедура ШтрафовНет_ЗагрузитьСписокШтрафов(ПараметрыПроцедуры, ТекстОшибки = "",
	ДатаПоследнегоОбмена = Неопределено, ЗагружатьШтрафы = Истина, ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор = Ложь) Экспорт 
	
	МассивШтрафов  = Новый Массив();
	УчетнаяЗапись  = ПараметрыПроцедуры.УчетнаяЗапись;

	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись,
		"Ссылка,Организация,Подразделение,Ответственный,Контрагент,ДоговорКонтрагента,
		|ДатаПоследнегоОбмена, ШтрафСвязанСМашиной, ШтрафСвязанСМашинойИНеСопоставлен,
		|ШтрафСвязанСКомпанией, ШтрафСвязанСВодителем,
		|ТокенАвторизации,АдресСервиса,IDАвтопарка,
		|ФильтрацияСпискаШтрафовСТС,ФильтрацияСпискаШтрафовИНН,
		|ФильтрацияСпискаШтрафовСНИЛС,ФильтрацияСпискаШтрафовПаспорт,
		|ФильтрацияСпискаШтрафовВУ,ФильтрацияСпискаШтрафовПрочее,
		|Версия,IDКомпании,ЗагружатьФото,ЗагружатьКарточкуШтрафа,КаталогКонтрагентов,ЛогированиеЗапросов");
	
	ВестиЛог = ДанныеУчетнойЗаписи.ЛогированиеЗапросов;
	
	ОбновлятьДатуПоследнегоОбмена = Ложь;
	Если ПараметрыПроцедуры.Свойство("ДатаНачала")
		И ПараметрыПроцедуры.Свойство("ДатаОкончания") Тогда
		ДатаПоследнегоОбмена = КонецДня(ПараметрыПроцедуры.ДатаОкончания);
		ДатаС                = ПараметрыПроцедуры.ДатаНачала;
		ДатаПо               = ДатаПоследнегоОбмена;
		
		ДатаС  = УниверсальноеВремя(ДатаС, ЧасовойПоясСеанса());
		ДатаПо = УниверсальноеВремя(ДатаПо, ЧасовойПоясСеанса());
		
		Если ПараметрыПроцедуры.Свойство("ТС") Тогда
			ДанныеУчетнойЗаписи.ШтрафСвязанСКомпанией = Ложь;
			ДанныеУчетнойЗаписи.ШтрафСвязанСВодителем = Ложь;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ДатаПоследнегоОбмена) Тогда
			ДатаС   = ДанныеУчетнойЗаписи.ДатаПоследнегоОбмена;
			ДатаПо  = ДатаПоследнегоОбмена;
		Иначе
			ДатаС   = НачалоГода(ДатаПоследнегоОбмена);
			ДатаПо  = ДатаПоследнегоОбмена;
		КонецЕсли;
		
		// Вычитаем 2 часа, рекомендация сервиса
		ДатаС  = УниверсальноеВремя(ДатаС, ЧасовойПоясСеанса()) - (2 * 3600);
		ДатаПо = УниверсальноеВремя(ДатаПо, ЧасовойПоясСеанса());
		
		Если ВестиЛог Тогда
			ТекстЛога = СтрШаблон("Получение списка штрафов по автопарку ""%1"" регламентным заданием 'Загрузка данных Штрафов НЕТ'",
			ДанныеУчетнойЗаписи.IDАвтопарка);
			ЗаписатьСообщениеЛога(ДанныеУчетнойЗаписи, ТекстЛога);
		КонецЕсли;
		
		ОбновлятьДатуПоследнегоОбмена = Истина;
	КонецЕсли;
	ДанныеУчетнойЗаписи.Вставить("ОбновлятьДатуПоследнегоОбмена", ОбновлятьДатуПоследнегоОбмена);
	
	// Получаем список штрафов связанных с ТС
	СоответствиеТС = Неопределено;
	Если ЗагружатьШтрафы Тогда
		Если ДанныеУчетнойЗаписи.ШтрафСвязанСМашиной 
			ИЛИ ДанныеУчетнойЗаписи.ШтрафСвязанСМашинойИНеСопоставлен Тогда
			
			// Получаем сопоставленные ТС
			Если ПараметрыПроцедуры.Свойство("ТС") Тогда
				СоответствиеТС = Новый Соответствие();
				СоответствиеТС.Вставить(ПараметрыПроцедуры.ИДвСервисеШтрафов, ПараметрыПроцедуры.ТС);
				Метод = "fines_cars";
			Иначе
				СоответствиеТС = ЗаполнитьСоответствиеТСвСервисеШтрафов(ДанныеУчетнойЗаписи.Ссылка);
				Метод = "fines";
			КонецЕсли;
			
			ПринадлежностьШтрафов = "ШтрафСвязанСМашиной";
			ШтрафовНет_ЗагрузитьСписокШтрафовПоПринадлежности(ДанныеУчетнойЗаписи, ВестиЛог, ПринадлежностьШтрафов, ДатаС, ДатаПо, СоответствиеТС, Метод);
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.ШтрафСвязанСКомпанией Тогда
			ПринадлежностьШтрафов = "ШтрафСвязанСКомпанией";
			ШтрафовНет_ЗагрузитьСписокШтрафовПоПринадлежности(ДанныеУчетнойЗаписи, ВестиЛог, ПринадлежностьШтрафов, ДатаС, ДатаПо);
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.ШтрафСвязанСВодителем Тогда
			ПринадлежностьШтрафов = "ШтрафСвязанСВодителем";
			ШтрафовНет_ЗагрузитьСписокШтрафовПоПринадлежности(ДанныеУчетнойЗаписи, ВестиЛог, ПринадлежностьШтрафов, ДатаС, ДатаПо);
		КонецЕсли;
	КонецЕсли;

	Если ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор 
		И ПолучитьФункциональнуюОпцию("уатИспользоватьЗагрузкуОтчетовИзСистемВзиманияПлаты") Тогда
		Если СоответствиеТС = Неопределено Тогда
			СоответствиеТС = ЗаполнитьСоответствиеТСвСервисеШтрафов(ДанныеУчетнойЗаписи.Ссылка);
		КонецЕсли;
		ШтрафовНет_ЗагрузитьСписокПроездовПоЦКАД(ДанныеУчетнойЗаписи, ВестиЛог, ДатаС, ДатаПо, ДатаПоследнегоОбмена, СоответствиеТС);
	КонецЕсли;
	
КонецПроцедуры

Функция ШтрафовНет_ПолучитьДанныеОплаты(УчетнаяЗапись, МассивОплаченныхПостановлений) Экспорт
	
	СоответсвиеШтрафов = Новый Соответствие();
	
	ТекстОшибки = "";
	
	ТекМассивОплаченныхПостановлений = Новый Массив();
	МассивПостановлений              = Новый Массив();
	Счетчик = 0;
	Для Каждого ТекСтрока Из МассивОплаченныхПостановлений Цикл
		Если Счетчик > 200 Тогда
			ТекМассивОплаченныхПостановлений.Добавить(МассивПостановлений);
			
			МассивПостановлений = Новый Массив();
			Счетчик = 0;
		КонецЕсли;
		МассивПостановлений.Добавить(ТекСтрока);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТекМассивОплаченныхПостановлений.Добавить(МассивПостановлений);
	
	Для Каждого МассивПостановлений Из ТекМассивОплаченныхПостановлений Цикл
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("МассивШтрафов", МассивПостановлений);
		
		ИнформацияРеестров = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетнаяЗапись, "registries", ТекстОшибки, ПараметрыЗапроса);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		МассивРеестров = ИнформацияРеестров.Получить("registries");
		Если ТипЗнч(МассивРеестров) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из МассивРеестров Цикл 
				
				IDРеестра = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("id")), " ", ""), Символы.НПП, "");
				
				ПараметрыЗапроса = Новый Структура();
				ПараметрыЗапроса.Вставить("IDРеестра", IDРеестра);
				
				ИнформацияРеестра = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетнаяЗапись, "registries", ТекстОшибки, ПараметрыЗапроса);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
				МассивДеталиРеестра = ИнформацияРеестра.Получить("items");
				Если ТипЗнч(МассивДеталиРеестра) = Тип("Массив") Тогда
					Для Каждого ТекЭлементРеестра Из МассивДеталиРеестра Цикл
						
						uin = ТекЭлементРеестра.Получить("uin");
						ДатаОплатыШтрафа = ПреобразоватьДатуИзСтроки(ТекЭлементРеестра.Получить("paid_at"));
						СуммаОплаты      = ТекЭлементРеестра.Получить("pay_amount");
						СоответсвиеШтрафов.Вставить(uin, Новый Структура("ДатаОплатыШтрафа, СуммаОплаты",
						ДатаОплатыШтрафа, СуммаОплаты));
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;


	Возврат СоответсвиеШтрафов;
	
КонецФункции

// Функция производит получение списка штрафов.
//
Процедура ШтрафовНет_ОбновитьШтраф(МассивИдТС, УчетнаяЗапись, IDШтрафа,
	ЗагрузкаФото = Истина, ЗагрузкаКарточкиШтрафа = Ложь, ТекстОшибки = "") Экспорт 

	МассивШтрафов  = Новый Массив();
	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись,
		"Ссылка,Организация,Подразделение,Ответственный,
		|ДатаПоследнегоОбмена, ШтрафСвязанСМашиной, ШтрафСвязанСМашинойИНеСопоставлен,
		|ШтрафСвязанСКомпанией, ШтрафСвязанСВодителем,
		|ТокенАвторизации,АдресСервиса,IDАвтопарка,
		|ФильтрацияСпискаШтрафовСТС,ФильтрацияСпискаШтрафовИНН,
		|ФильтрацияСпискаШтрафовСНИЛС,ФильтрацияСпискаШтрафовПаспорт,
		|ФильтрацияСпискаШтрафовВУ,ФильтрацияСпискаШтрафовПрочее,
		|Версия,IDКомпании,ЗагружатьФото,ЗагружатьКарточкуШтрафа,КаталогКонтрагентов,ЛогированиеЗапросов");
	ДанныеУчетнойЗаписи.ЗагружатьФото           = ЗагрузкаФото;
	ДанныеУчетнойЗаписи.ЗагружатьКарточкуШтрафа = ЗагрузкаКарточкиШтрафа;
	
	ВестиЛог = ДанныеУчетнойЗаписи.ЛогированиеЗапросов;
	
	// Получаем Список штрафов
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("UIN",      IDШтрафа);
	ПараметрыЗапроса.Вставить("Страница", 1);
	
	СписокШтрафов = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(ДанныеУчетнойЗаписи, "fines_info", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрафов = СписокШтрафов.Получить("fines");
	МассивПостановлений           = Новый Массив();
	МассивОплаченныхПостановлений = Новый Массив();
	
	СоответствиеТС = ЗаполнитьСоответствиеТСвСервисеШтрафов(ДанныеУчетнойЗаписи.Ссылка);
	
	Если ТипЗнч(ДанныеШтрафов) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из ДанныеШтрафов Цикл 
			СтруктураШтрафа = ЗаполнитьСтруктураШтрафа(ТекЭлемент, ДанныеУчетнойЗаписи, СоответствиеТС);
			
			Если ЗначениеЗаполнено(СтруктураШтрафа.ТС) Тогда
				ПринадлежностьШтрафа = Перечисления.уатПринадлежностьШтрафов.Машина;
			Иначе
				ПринадлежностьШтрафа = Перечисления.уатПринадлежностьШтрафов.МашинаНеизвестная;
			КонецЕсли;
			
			СтруктураШтрафа.Вставить("ПринадлежностьШтрафа", ПринадлежностьШтрафа);
			
			МассивШтрафов.Добавить(СтруктураШтрафа);
			МассивПостановлений.Добавить(СтруктураШтрафа.НомерПостановления);
			
			Если СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.paid
				ИЛИ СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.partpaid
				ИЛИ СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.overpaid
				ИЛИ СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.prepaid Тогда
				МассивОплаченныхПостановлений.Добавить(СтруктураШтрафа.НомерПостановления);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЛога           = "";
	Для Каждого ТекШтраф Из МассивШтрафов Цикл
		
		СоответсвиеОплатыШтрафов = ШтрафовНет_ПолучитьДанныеОплаты(ДанныеУчетнойЗаписи, МассивОплаченныхПостановлений);
		СоответсвиеШтрафов       = ШтрафовНет_ПолучитьСуществующиеШтрафы(ДанныеУчетнойЗаписи, МассивПостановлений);

		ОбновитьШтраф = ЗагрузкаФото = Ложь И ЗагрузкаКарточкиШтрафа = Ложь;
		
		СоздатьОбновитьШтраф(ДанныеУчетнойЗаписи, ВестиЛог, ТекШтраф, СоответсвиеШтрафов, СоответсвиеОплатыШтрафов, ТекстЛога, ОбновитьШтраф);
		Если ВестиЛог Тогда
			ЗаписатьСообщениеЛога(ДанныеУчетнойЗаписи, ТекстЛога);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция производит получение списка реестров.
//
Функция ШтрафовНет_СписокРеестров(УчетныеЗаписиСервисаШтрафов, ТекстОшибки = "") Экспорт 
	
	ТабРеестров = Новый ТаблицаЗначений();
	
	ТабРеестров.Колонки.Добавить("IDРеестра",                      Новый ОписаниеТипов("Строка"));
	ТабРеестров.Колонки.Добавить("СуммаОплачиваемыхПостановлений", Новый ОписаниеТипов("Число"));
	ТабРеестров.Колонки.Добавить("Комиссия",                       Новый ОписаниеТипов("Число"));
	ТабРеестров.Колонки.Добавить("ИтоговаяСтоимость",              Новый ОписаниеТипов("Число"));
	ТабРеестров.Колонки.Добавить("ДатаСозданияРеестра",            Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабРеестров.Колонки.Добавить("Организация",                    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабРеестров.Колонки.Добавить("Ответственный",                  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТабРеестров.Колонки.Добавить("Штрафы",                         Новый ОписаниеТипов("Массив"));
	
	// Получаем Список Реестров	
	СписокРеестров = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "registries", ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТабРеестров;
	КонецЕсли;
	
	СоответствиеТС = ЗаполнитьСоответствиеТСвСервисеШтрафов(УчетныеЗаписиСервисаШтрафов);
	МассивРеестров = СписокРеестров.Получить("registries");
	
	Если ТипЗнч(МассивРеестров) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из МассивРеестров Цикл 
			НовСтр                                = ТабРеестров.Добавить();
			НовСтр.IDРеестра                      = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("id")), " ", ""), Символы.НПП, "");
			НовСтр.Организация	                  = УчетныеЗаписиСервисаШтрафов.Организация;
			НовСтр.Ответственный                  = УчетныеЗаписиСервисаШтрафов.Ответственный;
			НовСтр.СуммаОплачиваемыхПостановлений = ТекЭлемент.Получить("amount");
			НовСтр.ИтоговаяСтоимость              = ТекЭлемент.Получить("total_amount");
			НовСтр.Комиссия                       = НовСтр.ИтоговаяСтоимость - НовСтр.СуммаОплачиваемыхПостановлений;
			НовСтр.ДатаСозданияРеестра            = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("created_at"));
			
			МассивДеталиРеестра                   = ТекЭлемент.Получить("items");
			Если ТипЗнч(МассивДеталиРеестра) = Тип("Массив") Тогда
				МассивШтрафы     = Новый Массив();
				МассивUINШтрафов = Новый Массив();
				СоответсвиеUINШтрафов = Новый Соответствие();
				Для Каждого ТекШтраф Из МассивДеталиРеестра Цикл
					Если ТекШтраф.Получить("inactiveReason") = "incorrect_number" Тогда
						СтруктураШтрафа = Новый Структура("Статус, ПричинаОтказа");
						СтруктураШтрафа.Статус        = ТекШтраф.Получить("status");
						СтруктураШтрафа.ПричинаОтказа = ТекШтраф.Получить("inactiveReason");
						МассивШтрафы.Добавить(СтруктураШтрафа);
						Продолжить;
					КонецЕсли;
					Если ТекШтраф.Получить("inactive_reason") = "incorrect_number" Тогда
						СтруктураШтрафа = Новый Структура("Статус, ПричинаОтказа");
						СтруктураШтрафа.Статус        = ТекШтраф.Получить("status");
						СтруктураШтрафа.ПричинаОтказа = ТекШтраф.Получить("inactive_reason");
						МассивШтрафы.Добавить(СтруктураШтрафа);
						Продолжить;
					КонецЕсли;
					
					МассивUINШтрафов.Добавить(ТекШтраф.Получить("uin"));
					СоответсвиеUINШтрафов.Вставить(ТекШтраф.Получить("uin"), ТекШтраф);
				КонецЦикла;
				
				Если МассивДеталиРеестра.Количество() = 0 Тогда
					ПараметрыЗапроса = Новый Структура();
					ПараметрыЗапроса.Вставить("IDРеестра", НовСтр.IDРеестра);
					
					ИнформацияРеестра   = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "registries", ТекстОшибки, ПараметрыЗапроса);
					МассивДеталиРеестра = ИнформацияРеестра.Получить("items");
					Если ТипЗнч(МассивДеталиРеестра) = Тип("Массив") Тогда
						Для Каждого ТекШтраф Из МассивДеталиРеестра Цикл
							Если ТекШтраф.Получить("inactive_reason") = "incorrect_number" Тогда
								СтруктураШтрафа = Новый Структура("Статус, ПричинаОтказа");
								СтруктураШтрафа.Статус        = ТекШтраф.Получить("status");
								СтруктураШтрафа.ПричинаОтказа = ТекШтраф.Получить("inactive_reason");
								МассивШтрафы.Добавить(СтруктураШтрафа);
								Продолжить;
							КонецЕсли;
							
							МассивUINШтрафов.Добавить(ТекШтраф.Получить("uin"));
							СоответсвиеUINШтрафов.Вставить(ТекШтраф.Получить("uin"), ТекШтраф);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если МассивUINШтрафов.Количество() = 0 Тогда
					НовСтр.Штрафы = МассивШтрафы;
					Продолжить;
				КонецЕсли;
				
				// Получаем Список штрафов
				ПараметрыЗапроса = Новый Структура();
				ПараметрыЗапроса.Вставить("МассивUINШтрафов", МассивUINШтрафов);
				
				СписокШтрафов = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "fines_info", ТекстОшибки, ПараметрыЗапроса);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					Возврат ТабРеестров;
				КонецЕсли;
				
				МассивШтрафов = СписокШтрафов.Получить("fines");
				
				Если ТипЗнч(МассивШтрафов) = Тип("Массив") Тогда
					Для Каждого ТекШтраф Из МассивШтрафов Цикл 
						СтруктураШтрафа = ЗаполнитьСтруктураШтрафа(ТекШтраф, УчетныеЗаписиСервисаШтрафов, СоответствиеТС);
						
						ДеталиРеестра = СоответсвиеUINШтрафов.Получить(СтруктураШтрафа.НомерПостановления);
						СтруктураШтрафа.Вставить("Статус", "");
						СтруктураШтрафа.Вставить("ПричинаОтказа", "");
						Если ДеталиРеестра <> Неопределено Тогда
							СтруктураШтрафа.Статус        = ДеталиРеестра.Получить("status");
							СтруктураШтрафа.ПричинаОтказа = ТекЭлемент.Получить("inactive_reason");
							МассивШтрафы.Добавить(СтруктураШтрафа);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НовСтр.Штрафы = МассивШтрафы;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабРеестров;
	
КонецФункции

// Процедура создание счета на оплату штрафа.
//
Процедура ШтрафовНет_СозданиеСчета(УчетныеЗаписиСервисаШтрафов, Реестр, IDРеестра, ТекстОшибки = "", ФайлСсылка = Неопределено, IDСчета = "") Экспорт 
	
	ТокенАвторизации     = УчетныеЗаписиСервисаШтрафов.ТокенАвторизации;
	Адрес                = УчетныеЗаписиСервисаШтрафов.АдресСервиса;
	
	Если НЕ ЗначениеЗаполнено(IDСчета) Тогда
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("IDРеестра", IDРеестра);
		ИнформацияОСчете = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "bill_new", ТекстОшибки, ПараметрыЗапроса);
		
		IDСчета = СтрЗаменить(ИнформацияОСчете.Получить("id"), Символы.НПП, "");

		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("IDСчета", IDСчета);
		ИнформацияОСчете = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "bill", ТекстОшибки, ПараметрыЗапроса);

	Иначе
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("IDСчета", IDСчета);
		ИнформацияОСчете = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "bill", ТекстОшибки, ПараметрыЗапроса);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;

	pdfUrl = ?(УчетныеЗаписиСервисаШтрафов.Версия = Перечисления.уатВерсииШтрафовНет.ШтрафовНет_3,
	ИнформацияОСчете.Получить("url"),
	ИнформацияОСчете.Получить("pdf_url"));
	
	IDСчета = СтрЗаменить(ИнформацияОСчете.Получить("id"), Символы.НПП, "");

	Если НЕ ЗначениеЗаполнено(pdfUrl) 
		И pdfUrl <> "null" Тогда
		ТекстОшибки  = НСтр("ru = 'Pdf-файл счета на оплату не найден или пока не сформирован.'");
		Возврат;
	Иначе
		Попытка
			ТекстОшибкиФайл = "";
			Изображение     = "";
			ВременныйФайл = ПолучитьИмяВременногоФайла("html");
			
			Результат = уатИнтеграцияШтрафовНет.ЗагрузитьФайлССервера(
			pdfUrl,
			ВременныйФайл,
			ТекстОшибкиФайл
			);
			
			Попытка
				ДвоичныеДанные  = Новый ДвоичныеДанные(ВременныйФайл);
				РасширениеФайла = ПолучитьРасширениеФайла(pdfUrl);
				ИмяФайла        = СтрЗаменить(Сред(pdfUrl, СтрНайти(pdfUrl, "/", НаправлениеПоиска.СКонца)+1, СтрДлина(pdfUrl)),"." + РасширениеФайла, "");
			Исключение
			КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременныйФайл);
			Исключение
			КонецПопытки;
			
			ТекДата      = ТекущаяДата();
			ТекУниврДата = ТекущаяУниверсальнаяДата();
			GUIDКартинки = Новый УникальныйИдентификатор();
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
			СведенияОФайле.РасширениеБезТочки             = РасширениеФайла;
			СведенияОФайле.ВремяИзменения                 = ТекДата;
			СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
			СведенияОФайле.Размер                         = ДвоичныеДанные.Размер();
			СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			СведенияОФайле.АдресВременногоХранилищаТекста = "";
			
			ФлагИзображениеСуществует = Ложь;
			
			МассивФайлов = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(Реестр.Ссылка);
			Для Каждого ТекСтрокаФайл Из МассивФайлов Цикл
				Если ТекСтрокаФайл.Наименование = ИмяФайла Тогда
					ФайлСсылка = ТекСтрокаФайл.Ссылка;
					ФлагИзображениеСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ФлагИзображениеСуществует Тогда
				Попытка
					ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(Реестр.Ссылка, СведенияОФайле);
				Исключение
					ТекстОшибки = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
		Исключение
			ТекстОшибки  = ОписаниеОшибки();
			Возврат;
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

// Функция создание реестра.
//
Функция ШтрафовНет_СозданиеРеестра(УчетныеЗаписиСервисаШтрафов, Реестр, ТекстОшибки = "", ДанныеРеестра = Неопределено) Экспорт 
	
	IDРеестра = "";
	
	МассивUINШтрафов = Новый Массив();
	Для Каждого ТекСтрока Из Реестр.Штрафы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Штраф.IDШтрафа) Тогда
			Продолжить;
		КонецЕсли;
		МассивUINШтрафов.Добавить(ТекСтрока.Штраф.НомерПостановления);
	КонецЦикла;

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("МассивUINШтрафов", МассивUINШтрафов);
	
	ДанныеРеестра = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "registries_new", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат IDРеестра;
	КонецЕсли;
	
	IDРеестра = ДанныеРеестра.Получить("id");
	IDРеестра = СтрЗаменить(СтрЗаменить(Строка(IDРеестра), " ", ""), Символы.НПП, "");

	Возврат IDРеестра;
	
КонецФункции

// Процедура удаляет реестр.
//
Процедура ШтрафовНет_УдалениеРеестра(УчетныеЗаписиСервисаШтрафов, Реестр, IDРеестра, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDРеестра", IDРеестра);
	
	Результат = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "registries_delete", ТекстОшибки, ПараметрыЗапроса);
	
КонецПроцедуры

// Функция получения информации о реестре.
//
Функция ШтрафовНет_ИнформацияРеестра(УчетныеЗаписиСервисаШтрафов, Реестр, IDРеестра, ТекстОшибки = "", ФайлСсылка = Неопределено) Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDРеестра", IDРеестра);
	
	ИнформацияРеестра = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "registries", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;
	
	pdfUrl = ?(УчетныеЗаписиСервисаШтрафов.Версия = Перечисления.уатВерсииШтрафовНет.ШтрафовНет_3,
	ИнформацияРеестра.Получить("url"),
	ИнформацияРеестра.Получить("pdfUrl"));
	
	Если НЕ ЗначениеЗаполнено(pdfUrl) 
		И pdfUrl <> "null" Тогда
		ТекстОшибки  = НСтр("ru = 'Pdf-файл текущего реестра со списком оплачиваемых постановлений (Формируется после выставления счета).
		|Счет не выставлен.'");
		Возврат 1;
	Иначе
		Попытка
			ТекстОшибкиФайл = "";
			Изображение     = "";
			ВременныйФайл = ПолучитьИмяВременногоФайла("html");
			
			Результат = уатИнтеграцияШтрафовНет.ЗагрузитьФайлССервера(
			pdfUrl,
			ВременныйФайл,
			ТекстОшибкиФайл
			);
			
			Попытка
				ДвоичныеДанные  = Новый ДвоичныеДанные(ВременныйФайл);
				РасширениеФайла = ПолучитьРасширениеФайла(pdfUrl);
				ИмяФайла        = СтрЗаменить(Сред(pdfUrl, СтрНайти(pdfUrl, "/", НаправлениеПоиска.СКонца)+1, СтрДлина(pdfUrl)),"." + РасширениеФайла, "");
			Исключение
				ТекстОшибки  = ОписаниеОшибки();
			КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременныйФайл);
			Исключение
				ТекстОшибки  = ОписаниеОшибки();
			КонецПопытки;
			
			ТекДата      = ТекущаяДата();
			ТекУниврДата = ТекущаяУниверсальнаяДата();
			GUIDКартинки = Новый УникальныйИдентификатор();
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
			СведенияОФайле.РасширениеБезТочки             = РасширениеФайла;
			СведенияОФайле.ВремяИзменения                 = ТекДата;
			СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
			СведенияОФайле.Размер                         = ДвоичныеДанные.Размер();
			СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			СведенияОФайле.АдресВременногоХранилищаТекста = "";
			
			ФлагИзображениеСуществует = Ложь;
			
			МассивФайлов = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(Реестр.Ссылка);
			Для Каждого ТекСтрокаФайл Из МассивФайлов Цикл
				Если ТекСтрокаФайл.Наименование = ИмяФайла Тогда
					ФайлСсылка = ТекСтрокаФайл.Ссылка;
					ФлагИзображениеСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ФлагИзображениеСуществует Тогда
				Попытка
					ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(Реестр.Ссылка, СведенияОФайле);
				Исключение
					ТекстНСТР = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
					Возврат 1;
				КонецПопытки;
			КонецЕсли;
			
		Исключение
			ТекстОшибки  = ОписаниеОшибки();
			Возврат 1;
		КонецПопытки;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

// Функция получения информации о реестре.
//
Функция ШтрафовНет_ИнформацияРеестраКвитанция(УчетныеЗаписиСервисаШтрафов, Реестр, IDРеестра, uinШтрафа, ТекстОшибки = "", ФайлСсылка = Неопределено) Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDРеестра", IDРеестра);
	
	ИнформацияРеестра = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "registries", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;
	
	items = ИнформацияРеестра.Получить("items");
	Если ТипЗнч(items) = Тип("Массив") Тогда
		Для Каждого ТекСтрока Из items Цикл
			uin = ТекСтрока.Получить("uin");
			Если uin = uinШтрафа Тогда
				pdfUrl = ТекСтрока.Получить("pdfUrl");
				Если НЕ ЗначениеЗаполнено(pdfUrl) 
					И pdfUrl <> "null" Тогда
					ТекстОшибки  = НСтр("ru = 'Pdf-файл квитанции формируется при успешной оплате через сервис.
					|Квитанция не сформирована.'");
					Возврат 1;
				Иначе
					Попытка
						ТекстОшибкиФайл = "";
						Изображение     = "";
						ВременныйФайл = ПолучитьИмяВременногоФайла("html");
						
						Результат = уатИнтеграцияШтрафовНет.ЗагрузитьФайлССервера(
						pdfUrl,
						ВременныйФайл,
						ТекстОшибкиФайл
						);
						
						Попытка
							ДвоичныеДанные  = Новый ДвоичныеДанные(ВременныйФайл);
							РасширениеФайла = ПолучитьРасширениеФайла(pdfUrl);
							ИмяФайла        = СтрЗаменить(Сред(pdfUrl, СтрНайти(pdfUrl, "/", НаправлениеПоиска.СКонца)+1, СтрДлина(pdfUrl)),"." + РасширениеФайла, "");
						Исключение
						КонецПопытки;
						
						Попытка
							УдалитьФайлы(ВременныйФайл);
						Исключение
						КонецПопытки;
						
						ТекДата      = ТекущаяДата();
						ТекУниврДата = ТекущаяУниверсальнаяДата();
						GUIDКартинки = Новый УникальныйИдентификатор();
						
						СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
						СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
						СведенияОФайле.РасширениеБезТочки             = РасширениеФайла;
						СведенияОФайле.ВремяИзменения                 = ТекДата;
						СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
						СведенияОФайле.Размер                         = ДвоичныеДанные.Размер();
						СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
						СведенияОФайле.АдресВременногоХранилищаТекста = "";
						
						ФлагИзображениеСуществует = Ложь;
						
						МассивФайлов = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(Реестр.Ссылка);
						Для Каждого ТекСтрокаФайл Из МассивФайлов Цикл
							Если ТекСтрокаФайл.Наименование = ИмяФайла Тогда
								ФайлСсылка = ТекСтрокаФайл.Ссылка;
								ФлагИзображениеСуществует = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если НЕ ФлагИзображениеСуществует Тогда
							Попытка
								ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(Реестр.Ссылка, СведенияОФайле);
							Исключение
								ТекстНСТР = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
								Возврат 1;
							КонецПопытки;
						КонецЕсли;
						
					Исключение
						ТекстОшибки  = ОписаниеОшибки();
						Возврат 1;
					КонецПопытки;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

// Процедура производит получение списка штрафов.
//
Процедура ШтрафовНет_СписокШтрафовДлительнаяОперация(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт 
	
	ТекстОшибки = "";
	ДатаПоследнегоОбмена = ТекущаяДатаСеанса();
	
	ОбновитьДатуПоследнегоОбмена = Ложь;
	Если НЕ ТипЗнч(ПараметрыПроцедуры) = Тип("Структура") Тогда
		ПараметрыПроцедуры = Новый Структура("УчетнаяЗапись", ПараметрыПроцедуры);
		ОбновитьДатуПоследнегоОбмена = Истина;
	КонецЕсли;  
	ЗагружатьШтрафы                             = Истина;
	ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор = Ложь;
	Если ПараметрыПроцедуры.Свойство("ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор") Тогда
		ЗагружатьШтрафы                             = Ложь;
		ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор = Истина;
	КонецЕсли;
	ШтрафовНет_ЗагрузитьСписокШтрафов(ПараметрыПроцедуры, ТекстОшибки, ДатаПоследнегоОбмена,
		ЗагружатьШтрафы, ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор);

	Если ОбновитьДатуПоследнегоОбмена Тогда
		Попытка
			СпрОбъект = ПараметрыПроцедуры.УчетнаяЗапись.ПолучитьОбъект();
			СпрОбъект.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если АдресХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("ТекстОшибки", ТекстОшибки), АдресХранилища);
	КонецЕсли;

	
КонецПроцедуры

Процедура ШтрафовНет_ПолучитьКарточкуШтрафа(УчетныеЗаписиСервисаШтрафов, ИДШтрафа, МассивИзображений, ТекстОшибки = "") Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDШтрафа", ИДШтрафа);
	
	КарточкаШтрафа = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетныеЗаписиСервисаШтрафов, "card", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		url = КарточкаШтрафа.Получить("url");
		РасширениеФайла = ПолучитьРасширениеФайла(url);
		ИмяФайла        = "Карточка штрафа." + РасширениеФайла;
		МассивИзображений.Добавить(Новый Структура("url, ИмяФайла, РасширениеФайла",
		url, ИмяФайла, РасширениеФайла));
	Исключение
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область Паркоматика

// Функция производит получение списка транспортных средств.
//
Функция Паркоматика_СписокТС(УчетнаяЗаписьСервисаПарковок, ТекстОшибки = "") Экспорт 
	
	ТабТС = Новый ТаблицаЗначений();
	ТабТС.Колонки.Добавить("id", 			 Новый ОписаниеТипов("Строка")); 
	ТабТС.Колонки.Добавить("carNum",		 Новый ОписаниеТипов("Строка"));
	ТабТС.Колонки.Добавить("status",		 Новый ОписаниеТипов("Число"));
	ТабТС.Колонки.Добавить("organizationId", Новый ОписаниеТипов("Строка"));
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Страница", 1);

	СписокТС = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "car", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТабТС;
	КонецЕсли;
	
	МассивТС = СписокТС.Получить("data");
	Если ТипЗнч(МассивТС) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из МассивТС Цикл 
			НовСтр                = ТабТС.Добавить();
			НовСтр.id             = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("id")), " ", ""), Символы.НПП, "");
			НовСтр.carNum         = ТекЭлемент.Получить("carNum");
			НовСтр.status         = ТекЭлемент.Получить("status");
			НовСтр.organizationId = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("organizationId")), " ", ""), Символы.НПП, "");
		КонецЦикла;
	КонецЕсли;

	ДанныеОТС = СписокТС.Получить("meta");
	Если ДанныеОТС = Неопределено Тогда
		Возврат ТабТС;
	КонецЕсли;
	
	КолВоСтраниц    = ДанныеОТС.Получить("pageCount");
	Если КолВоСтраниц > 1 Тогда
		НомерСтруницы = 2;
		Для НомерСтруницы = 2 По КолВоСтраниц Цикл
			ПараметрыЗапроса.Страница = НомерСтруницы;
			СписокТС = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "car", ТекстОшибки, ПараметрыЗапроса);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат ТабТС;
			КонецЕсли;
			
			МассивТС = СписокТС.Получить("data");
			Если ТипЗнч(МассивТС) = Тип("Массив") Тогда
				Для Каждого ТекЭлемент Из МассивТС Цикл 
					НовСтр                = ТабТС.Добавить();
					НовСтр.id             = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("id")), " ", ""), Символы.НПП, "");
					НовСтр.carNum         = ТекЭлемент.Получить("carNum");
					НовСтр.status         = ТекЭлемент.Получить("status");
					НовСтр.organizationId = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("organizationId")), " ", ""), Символы.НПП, "");
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
		
	Возврат ТабТС;
	
КонецФункции

// Функция производит получение списка автопарков.
//
Функция Паркоматика_СписокАвтопарков(Знач УчетнаяЗаписьСервисаПарковок, ТекстОшибки = "") Экспорт 
	
	СписокАвтопарков = Новый СписокЗначений();
	
	СписокТС = Паркоматика_СписокТС(УчетнаяЗаписьСервисаПарковок, ТекстОшибки);
	Для Каждого ТекЭлемент Из СписокТС Цикл
		organizationId = ТекЭлемент.organizationId;
		Если СписокАвтопарков.НайтиПоЗначению(organizationId) = Неопределено Тогда
			Description = Паркоматика_ПолучениеДанныхОрганизации(УчетнаяЗаписьСервисаПарковок, organizationId, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = "";
				Продолжить;
			КонецЕсли;
			СписокАвтопарков.Добавить(organizationId, Description.Получить("name"));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокАвтопарков;
	
КонецФункции

// Функция производит получение данных организации по ID.
//
Функция Паркоматика_ПолучениеДанныхОрганизации(УчетнаяЗаписьСервисаПарковок, ID, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ID);
	
	Description = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "organization", ТекстОшибки, ПараметрыЗапроса);

	Возврат Description;
	
КонецФункции

// Функция добавляет ТС в сервис.
//
Функция Паркоматика_НовоеТранспортноеСредство(УчетнаяЗаписьСервисаПарковок, ТС, ТекстОшибки = "") Экспорт 
	
	IDТС = "";
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ТС", ТС);
	
	ИнформацияОТС = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "car_new", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат IDТС;
	КонецЕсли;
	
	IDТС = ИнформацияОТС.Получить("id");
	Если ЗначениеЗаполнено(IDТС) Тогда
		IDТС = СтрЗаменить(СтрЗаменить(Строка(ИнформацияОТС.Получить("id")), " ", ""), Символы.НПП, "");
	Иначе
		IDТС = "";
	КонецЕсли;
	
	Возврат IDТС;
	
КонецФункции

// Процедура удаляет ТС из сервиса.
//
Процедура Паркоматика_УдалениеТранспортногоСредства(УчетнаяЗаписьСервисаПарковок, IDТС, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDТС",             IDТС);
	
	Результат = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "car_delete", ТекстОшибки, ПараметрыЗапроса);
	
КонецПроцедуры

// Функция производит получение списка парковочных сессий.
//
Функция Паркоматика_СписокПарковочныхСессий(ПараметрыПроцедуры, ТекстОшибки = "") Экспорт 
	
	ТабПарковок = Новый ТаблицаЗначений();
	
	ТабПарковок.Колонки.Добавить("IDПарковки",                          Новый ОписаниеТипов("Строка"));
	ТабПарковок.Колонки.Добавить("Организация",                         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТабПарковок.Колонки.Добавить("Ответственный",                       Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТабПарковок.Колонки.Добавить("Подразделение",                       Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабПарковок.Колонки.Добавить("Статус",                              Новый ОписаниеТипов("ПеречислениеСсылка.уатСтатусыПарковок"));
	ТабПарковок.Колонки.Добавить("ПарковочнаяЗона",                     Новый ОписаниеТипов("Строка"));
	ТабПарковок.Колонки.Добавить("Паркотрон",                           Новый ОписаниеТипов("Строка"));
	ТабПарковок.Колонки.Добавить("Инициатор",                           Новый ОписаниеТипов("Строка"));
	ТабПарковок.Колонки.Добавить("ТС",                                  Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ТабПарковок.Колонки.Добавить("Водитель",                            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТабПарковок.Колонки.Добавить("Запущена",                            Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабПарковок.Колонки.Добавить("Завершена",                           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабПарковок.Колонки.Добавить("Создана",                             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТабПарковок.Колонки.Добавить("СтоимостьСессииКомиссия",             Новый ОписаниеТипов("Число"));
	ТабПарковок.Колонки.Добавить("СтоимостьСессииБезКомиссии",          Новый ОписаниеТипов("Число"));
	ТабПарковок.Колонки.Добавить("ИтоговаяСтоимость",                   Новый ОписаниеТипов("Число"));
	ТабПарковок.Колонки.Добавить("ВалютаДокумента",                     Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТабПарковок.Колонки.Добавить("КаналЗавершения",                     Новый ОписаниеТипов("ПеречислениеСсылка.уатМетодыЗавершенияПарковочнойСессии"));
	ТабПарковок.Колонки.Добавить("КоординатыЗоны",                      Новый ОписаниеТипов("Строка"));
		
	Если ТипЗнч(ПараметрыПроцедуры) = Тип("Структура") Тогда
		УчетнаяЗаписьСервисаПарковок = ПараметрыПроцедуры.УчетнаяЗапись;
		ДатаС                        = НачалоДня(ПараметрыПроцедуры.ДатаНачала);
		ДатаПо                       = КонецДня(ПараметрыПроцедуры.ДатаОкончания);
	Иначе
		УчетнаяЗаписьСервисаПарковок = ПараметрыПроцедуры;
		Если ЗначениеЗаполнено(УчетнаяЗаписьСервисаПарковок.ДатаПоследнегоОбмена) Тогда
			ДатаС    = НачалоДня(УчетнаяЗаписьСервисаПарковок.ДатаПоследнегоОбмена);
			ДатаПо   = КонецДня(ТекущаяДата());
		Иначе
			ДатаС    = НачалоГода(ТекущаяДата());
			ДатаПо   = КонецДня(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
	МассивIDТС     = Новый Массив();
	СоответствиеТС = ЗаполнитьСоответствиеТСвСервисеПарковок(УчетнаяЗаписьСервисаПарковок, МассивIDТС, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) 
		ИЛИ МассивIDТС.Количество() = 0 Тогда
		Возврат ТабПарковок;
	КонецЕсли;
	
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхПарковки.Паркоматика";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, МассивIDТС.Количество());

	ДлительныеОперации.СообщитьПрогресс(, Символы.ПС + Нстр("ru = 'Выполняется получение списка парковочных сессий...'"));

	// Получаем Список штрафов
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("from",       ПолучитьTimestamp(ДатаС));
	ПараметрыЗапроса.Вставить("to",         ПолучитьTimestamp(ДатаПо));
	ПараметрыЗапроса.Вставить("page",       0);

	СписокПарковок = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "parking-session", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТабПарковок;
	КонецЕсли;
	
	meta            = СписокПарковок.Получить("meta");
	КолВоСтраниц    = meta.Получить("pageCount");
	
	Прогресс         = 0;
	ТекКолВоПарковок = 0;
	КолВоПарковок    = meta.Получить("totalCount");
	
	МассивПарковок = СписокПарковок.Получить("data");
	Если ТипЗнч(МассивПарковок) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из МассивПарковок Цикл 
			
			ТекКолВоПарковок = ТекКолВоПарковок + 1;
			Прогресс        = Цел((ТекКолВоПарковок * 100) / ?(КолВоПарковок = 0, 1, КолВоПарковок));
			Если Прогресс > 0 Тогда
				Если Прогресс >= 100 Тогда
					Прогресс = 99;
				КонецЕсли;
				ДлительныеОперации.СообщитьПрогресс(,Символы.ПС + Нстр("ru = 'Выполняется получение списка парковочных сессий...'") + Прогресс + "%");
			КонецЕсли;

			СтруктуруПарковки	 = ЗаполнитьСтруктураПарковки(ТекЭлемент, УчетнаяЗаписьСервисаПарковок, СоответствиеТС);
			Если НЕ ЗначениеЗаполнено(СтруктуруПарковки.ТС) 
				ИЛИ СтруктуруПарковки.ТС.УчетнаяЗаписьCервисаПарковок <> УчетнаяЗаписьСервисаПарковок Тогда
				Продолжить;
			КонецЕсли;
			НовСтр 				 = ТабПарковок.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтруктуруПарковки);
			
		КонецЦикла;
	КонецЕсли; 

	Если КолВоСтраниц > 1 Тогда
		Для Счетчик = 1 По КолВоСтраниц Цикл
			ПараметрыЗапроса.Page = Счетчик;
			
			СписокПарковок = уатИнтеграцияПарковкиПаркоматика.Паркоматика_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаПарковок, "parking-session", ТекстОшибки, ПараметрыЗапроса);

			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			
			МассивПарковок = СписокПарковок.Получить("data");
			Если ТипЗнч(МассивПарковок) = Тип("Массив") Тогда
				Для Каждого ТекЭлемент Из МассивПарковок Цикл 
					ТекКолВоПарковок = ТекКолВоПарковок + 1;
					Прогресс        = Цел((ТекКолВоПарковок * 100) / ?(КолВоПарковок = 0, 1, КолВоПарковок));
					Если Прогресс > 0 Тогда
						Если Прогресс >= 100 Тогда
							Прогресс = 99;
						КонецЕсли;
						ДлительныеОперации.СообщитьПрогресс(, Символы.ПС + Нстр("ru = 'Выполняется получение списка парковочных сессий...'") + Прогресс + "%");
					КонецЕсли;

					СтруктуруПарковки	 = ЗаполнитьСтруктураПарковки(ТекЭлемент, УчетнаяЗаписьСервисаПарковок, СоответствиеТС);
					Если НЕ ЗначениеЗаполнено(СтруктуруПарковки.ТС) 
						ИЛИ СтруктуруПарковки.ТС.УчетнаяЗаписьCервисаПарковок <> УчетнаяЗаписьСервисаПарковок Тогда
						Продолжить;
					КонецЕсли;
					НовСтр 				 = ТабПарковок.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтруктуруПарковки);
										
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;

	Возврат ТабПарковок;
	
КонецФункции

// Процедура производит получение списка парковочных сессий.
//
Процедура Паркоматика_СписокПарковочныхСессийДлительнаяОперация(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт 
	
	ТекстОшибки = "";
	ТабПарковок = Паркоматика_СписокПарковочныхСессий(ПараметрыПроцедуры, ТекстОшибки);
	
	Если ТипЗнч(ПараметрыПроцедуры) = Тип("Структура") Тогда
		УчетнаяЗаписьСервисаПарковок = ПараметрыПроцедуры.УчетнаяЗапись;
	Иначе
		УчетнаяЗаписьСервисаПарковок = ПараметрыПроцедуры;
	КонецЕсли;
	
	Попытка
		СпрОбъект = УчетнаяЗаписьСервисаПарковок.ПолучитьОбъект();
		СпрОбъект.ДатаПоследнегоОбмена = ТекущаяДата();
		СпрОбъект.Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	Конецпопытки;
	
	Для Каждого ТекСтрока Из ТабПарковок Цикл
		уатИнтеграции_проф.СоздатьПарковку(ТекСтрока);
	КонецЦикла;
	
	Если АдресХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("ТекстОшибки", ТекстОшибки), АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область DaData

Функция ПолучитьПодсказкиПоАдресуDaData(СтрокаАдреса, ТекстОшибки = "", ВидКИ = Неопределено) Экспорт
	
	ПодсказкиПоАдресу = Новый Массив;
	// Массив подсказок кэшируется, так как при работе с подсказками на формах Заказа на ТС или Пунктв назначения
	// в зависимости от действий пользователя получение списка подсказок по одному адресу может вызываться несколько раз
	МассивПодсказок = уатОбщегоНазначенияПовтИсп_проф.ПолучитьПодсказкиПоАдресуDaData(СтрокаАдреса, ТекстОшибки);
	
	Если ВидКИ = Неопределено Тогда 
		ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	КонецЕсли;
	
	Для Каждого ТекПодсказка Из МассивПодсказок Цикл
		// Переводим структуру полей адреса DaData в строку JSON, содержащую значение адреса во внутреннем представлении БСП
		ЗначениеАдреса = ПолучитьЗначениеАдресаПоДаннымDaData(ТекПодсказка.data, ТекПодсказка.unrestricted_value, ВидКИ);
		СтруктураПодсказки = Новый Структура;
		СтруктураПодсказки.Вставить("ПредставлениеАдреса", ТекПодсказка.unrestricted_value);
		СтруктураПодсказки.Вставить("ЗначениеАдреса", ЗначениеАдреса);
		Если ТекПодсказка.data.Свойство("geo_lat") И ЗначениеЗаполнено(ТекПодсказка.data.geo_lat) Тогда
			ОписаниеЧисла = Новый ОписаниеТипов("Число");
			СтруктураПодсказки.Вставить("Широта", ОписаниеЧисла.ПривестиЗначение(ТекПодсказка.data.geo_lat));
		Иначе
			СтруктураПодсказки.Вставить("Широта", 0);
		КонецЕсли;
		Если ТекПодсказка.data.Свойство("geo_lon") И ЗначениеЗаполнено(ТекПодсказка.data.geo_lon) Тогда
			ОписаниеЧисла = Новый ОписаниеТипов("Число");
			СтруктураПодсказки.Вставить("Долгота", ОписаниеЧисла.ПривестиЗначение(ТекПодсказка.data.geo_lon));
		Иначе
			СтруктураПодсказки.Вставить("Долгота", 0);
		КонецЕсли;
		
		ПодсказкиПоАдресу.Добавить(СтруктураПодсказки);
	КонецЦикла;
	
	Возврат ПодсказкиПоАдресу;
	
КонецФункции

Функция DaData_ПолучитьВариантыГеокодирования(Знач СтрокаАдреса, ТекстОшибки= "") Экспорт
	
	МассивПодсказок = уатЗащищенныеФункцииСервер_проф.ПолучитьПодсказкиПоАдресуDaData(СтрокаАдреса, ТекстОшибки);
	
	Результат = Новый Массив;
	Для Каждого ТекПодсказка Из МассивПодсказок Цикл
		ДанныеПодсказки = Новый Структура("display_name, lat, lon, data");
		ДанныеПодсказки.display_name = ТекПодсказка.unrestricted_value;
		ДанныеПодсказки.lat = ТекПодсказка.data.geo_lat;
		ДанныеПодсказки.lon = ТекПодсказка.data.geo_lon;
		Если Не ЗначениеЗаполнено(ДанныеПодсказки.lat) Тогда
			ДанныеПодсказки.lat = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеПодсказки.lon) Тогда
			ДанныеПодсказки.lon = 0;
		КонецЕсли;
		ДанныеПодсказки.data = ТекПодсказка.data;
		Результат.Добавить(ДанныеПодсказки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
Функция ГеокодироватьАдресDaData(стрАдрес, ДопПараметры, ТекстОшибки, КоличествоПолученныхРезультатов) Экспорт
	
	Координаты = Новый Структура("Лат, Лон", 0, 0);
	
	МассивПодсказок = уатЗащищенныеФункцииСервер_проф.ПолучитьПодсказкиПоАдресуDaData(стрАдрес, ТекстОшибки);
	мсвНайденныеОбъекты = Новый Массив;
	Если ТекстОшибки = "" Тогда
		КоличествоПолученныхРезультатов = МассивПодсказок.Количество();
		
		Если Не ДопПараметры = Неопределено И ДопПараметры.Свойство("РезультатВМассив") Тогда 
			Для Каждого ТекПодсказка Из МассивПодсказок Цикл
				НайденныйОбъект = Новый Структура("display_name, lat, lon", 
					ТекПодсказка.unrestricted_value, ТекПодсказка.data.geo_lat, ТекПодсказка.data.geo_lon);
				мсвНайденныеОбъекты.Добавить(НайденныйОбъект);
			КонецЦикла;
			
			Возврат мсвНайденныеОбъекты;
		ИначеЕсли КоличествоПолученныхРезультатов > 0 Тогда
			ТекПодсказка = МассивПодсказок[0];
			Координаты.Лат = ТекПодсказка.data.geo_lat;
			Координаты.Лон = ТекПодсказка.data.geo_lon;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Координаты;
	
КонецФункции

// Функция преобразует структуру value контактной информации, полученной из DaData, 
// в строку JSON, содержащую значение адреса во внутреннем представлении БСП
Функция ПолучитьЗначениеАдресаПоДаннымDaData(ДанныеDaData, ПредставлениеАдреса, ВидКИ = Неопределено) Экспорт
	
	Если ВидКИ = Неопределено Тогда
		ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	КонецЕсли;
	
	ДанныеАдресаJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению("", ВидКИ);
	ПрочитатьКонтактнуюИнформациюПоДаннымDaData(ДанныеАдресаJSON, ДанныеDaData, ПредставлениеАдреса);
	ЗначениеАдреса = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеАдресаJSON);
	
	Возврат ЗначениеАдреса;
	
КонецФункции

#КонецОбласти

#Область ГИБДД

// Функция производит получение ДТП ТС.
//
// Параметры
//  VIN - Строка - Идентификационный номер
//
// Возвращаемое значение:
//  Массив - Данные о ДТП.
//
Функция ГИБДД_ПолучитьИсториюДТП(VIN, Капча, ЗапросВыполнен, ТекстОшибки = "", ПовторныйЗапрос = Ложь) Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("VIN", VIN);
	ПараметрыЗапроса.Вставить("captchaToken", Капча.captchaToken);
	ПараметрыЗапроса.Вставить("captchaWord",  Капча.captchaWord);

	ДанныеЗапроса = уатЗащищенныеФункцииСервер_проф.ГИБДД_ВыполнитьЗапросДанных("dtp", ПараметрыЗапроса, ТекстОшибки, ЗапросВыполнен);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Если ДанныеЗапроса.Получить("code") <> Неопределено
		И ДанныеЗапроса.Получить("code") = 201 Тогда  
		ПовторныйЗапрос = Истина;
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ДанныеЗапроса.Получить("code")<> Неопределено
		И ДанныеЗапроса.Получить("message") <> Неопределено Тогда
		ТекстОшибки = ДанныеЗапроса.Получить("message");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	ДанныеДТП = уатЗащищенныеФункцииСервер_проф.ГИБДД_ВыполнитьОбработкуРезультатаЗапроса_ДТП(ДанныеЗапроса);
	
	Возврат ДанныеДТП;
	
КонецФункции

// Функция производит получение истории регистрации ТС в ГИБДД.
//
// Параметры
//  VIN - Строка - Идентификационный номер
//
// Возвращаемое значение:
//  Структура - Данные ТС.
//
Функция ГИБДД_ПолучитьИсториюРегистрацииТС(VIN, Капча, ТекстОшибки = "") Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("VIN", VIN);
	ПараметрыЗапроса.Вставить("captchaToken", Капча.captchaToken);
	ПараметрыЗапроса.Вставить("captchaWord",  Капча.captchaWord);
	ДанныеЗапроса = уатЗащищенныеФункцииСервер_проф.ГИБДД_ВыполнитьЗапросДанных("history", ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ДанныеЗапроса.Получить("code")<> Неопределено
		И ДанныеЗапроса.Получить("message") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеЗапроса.Получить("message"));
	КонецЕсли;
	
	ДанныеТС = уатЗащищенныеФункцииСервер_проф.ГИБДД_ВыполнитьОбработкуРезультатаЗапроса_ИсторияРагистрации(ДанныеЗапроса);
	
	Возврат ДанныеТС;
	
КонецФункции

// Процедура производит получение списка ДТП.
//
Процедура ГИБДД_СписокДТПДлительнаяОперация(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт 
	
	МассивТС         = ПараметрыПроцедуры.МассивТС;
	Капча            = ПараметрыПроцедуры.Капча;
	Если МассивТС = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПовторныйЗапрос  = Ложь;
	ТекстОшибки      = "";
	ЗапросВыполнен   = Истина;
	РезультатЗапроса = Новый Массив();
	ТекМассивТС      = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл 
		Если ПовторныйЗапрос Тогда
			ТекМассивТС.Добавить(ТекТС);
			Продолжить;
		КонецЕсли;
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекТС, "VIN, Наименование");
		
		VIN          = СтруктураРеквизитов.VIN;
		Наименование = СтруктураРеквизитов.Наименование;
		
		СообщениеОПрогрессе = Нстр("ru = 'Выполняется проверка на участие в ДТП ТС'") + " " + Наименование;
		ДлительныеОперации.СообщитьПрогресс(,СообщениеОПрогрессе);
		
		Если НЕ ЗначениеЗаполнено(VIN) Тогда
			ТекстНСТР = СтрШаблон(НСтр("ru='У ТС %1 не заполнен VIN.'"), СтруктураРеквизитов.Наименование);
			ДлительныеОперации.СообщитьПрогресс(,ТекстНСТР);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗапросВыполнен Тогда
			РезультатЗапроса.Добавить(Новый Структура("ТС, VIN, Наименование, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки",
			ТекТС, VIN, Наименование, Новый Массив, Новый Соответствие, ТекстОшибки));
			Продолжить;
		КонецЕсли;

		ТекстОшибки    = "";
		ЗапросВыполнен = Истина;
		СоответсвиеДокументов = Новый Соответствие;
		ДанныеДТП   = ГИБДД_ПолучитьСоответсвиеДТП(VIN, Капча, СоответсвиеДокументов, ЗапросВыполнен, ТекстОшибки, ПовторныйЗапрос); 
		Если ПовторныйЗапрос Тогда
			ТекМассивТС.Добавить(ТекТС);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатЗапроса.Добавить(Новый Структура("ТС, VIN, Наименование, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки",
			ТекТС, VIN, Наименование, Новый Массив, Новый Соответствие, ТекстОшибки));
			Продолжить;
		КонецЕсли;
		
		РезультатЗапроса.Добавить(Новый Структура("ТС, VIN, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки",
		ТекТС, VIN, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки));
	КонецЦикла;
	
	ТекстОшибкиПредупреждения = "";
	
	ЕстьОшибки       = Ложь;
	КолВоЗагружено   = 0;
	КолВоНЕЗагружено = 0;
	Для Каждого ТекСтрока Из РезультатЗапроса Цикл
		ТекстОшибки           = ТекСтрока.ТекстОшибки;
		СоответсвиеДокументов = ТекСтрока.СоответсвиеДокументов;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибкиПредупреждения = Новый ФорматированнаяСтрока(ТекстОшибкиПредупреждения,
			Новый ФорматированнаяСтрока(
			Символы.ПС,
			Новый ФорматированнаяСтрока(ТекСтрока.Наименование,,,, "https://гибдд.рф/check/auto#" + ТекСтрока.VIN)));
			ЕстьОшибки = Истина;
			КолВоНЕЗагружено = КолВоНЕЗагружено + 1;
			Продолжить;
		КонецЕсли;
		
		КолВоЗагружено = КолВоЗагружено + 1;
		ДанныеДТП = ТекСтрока.ДанныеДТП;
		ГИБДД_СоздатьДТП(ТекСтрока.ТС, ДанныеДТП, СоответсвиеДокументов);
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстЗагружено   = ?(КолВоЗагружено = 0, "", 
			СтрШаблон(НСтр("ru = 'Загружено успешно: %1 ТС.'"), КолВоЗагружено) + Символы.ПС);
		ТекстНЕЗагружено = СтрШаблон(НСтр("ru = 'Не загружено: %1 ТС.'"), КолВоНЕЗагружено);
		
		ТекстОшибкиПредупреждения = Новый ФорматированнаяСтрока(
		НСтр("ru = 'При получении данных от онлайн сервиса ГИБДД возникли проблемы:'"),
		Символы.ПС,
		ТекстОшибки,
		Символы.ПС,
		Символы.ПС,
		ТекстЗагружено,
		ТекстНЕЗагружено,
		Символы.ПС,
		НСтр("ru = 'Повторите попытку позже или выполните запрос по ссылке в браузере'"),
		НСтр("ru = ' и вручную скопируйте результат запроса в программу.'"),
		Символы.ПС,
		Символы.ПС,
		НСтр("ru = 'Ссылки для загрузки данных ДТП:'"),
		ТекстОшибкиПредупреждения);
	КонецЕсли;

	Если АдресХранилища <> Неопределено Тогда 
		Если ПовторныйЗапрос Тогда
			ПоместитьВоВременноеХранилище(Новый Структура("МассивТС, ТекстПредупреждения",
				ТекМассивТС, ТекстОшибкиПредупреждения), АдресХранилища);
		Иначе
			ПоместитьВоВременноеХранилище(Новый Структура("ТекстПредупреждения", ТекстОшибкиПредупреждения), АдресХранилища);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит получение списка ДТП.
//
Процедура ГИБДД_ОбновитьСписокДТПДлительнаяОперация(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт 
	
	МассивТС         = ПараметрыПроцедуры.МассивТС;
	МассивДокументов = ПараметрыПроцедуры.МассивДокументов;
	Капча            = ПараметрыПроцедуры.Капча;

	Если МассивТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПовторныйЗапрос  = Ложь;
	ТекстОшибки      = "";
	ЗапросВыполнен   = Истина;
	РезультатЗапроса = Новый Массив(); 
	ТекМассивТС      = Новый Массив();
	Для Каждого ТекТС Из МассивТС Цикл  
		Если ПовторныйЗапрос Тогда
			ТекМассивТС.Добавить(ТекТС);
			Продолжить;
		КонецЕсли;
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекТС, "VIN, Наименование");
		
		VIN          = СтруктураРеквизитов.VIN;
		Наименование = СтруктураРеквизитов.Наименование;
		
		СообщениеОПрогрессе = Нстр("ru = 'Выполняется проверка на участие в ДТП ТС'") + " " + Наименование;
		ДлительныеОперации.СообщитьПрогресс(,СообщениеОПрогрессе);
		
		Если НЕ ЗначениеЗаполнено(VIN) Тогда
			ТекстНСТР = СтрШаблон(НСтр("ru='У ТС %1 не заполнен VIN.'"), СтруктураРеквизитов.Наименование);
			ДлительныеОперации.СообщитьПрогресс(,ТекстНСТР);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗапросВыполнен Тогда
			РезультатЗапроса.Добавить(Новый Структура("ТС, VIN, Наименование, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки",
			ТекТС, VIN, Наименование, Новый Массив, Новый Соответствие, ТекстОшибки));
			Продолжить;
		КонецЕсли;

		ТекстОшибки    = "";
		ЗапросВыполнен = Истина;
		СоответсвиеДокументов = Новый Соответствие;
		ДанныеДТП   = ГИБДД_ПолучитьСоответсвиеДТП(VIN, Капча, СоответсвиеДокументов, ЗапросВыполнен, ТекстОшибки, ПовторныйЗапрос);
		Если ПовторныйЗапрос Тогда
			ТекМассивТС.Добавить(ТекТС);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатЗапроса.Добавить(Новый Структура("ТС, VIN, Наименование, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки",
			ТекТС, VIN, Наименование, Новый Массив, Новый Соответствие, ТекстОшибки));
			Продолжить;
		КонецЕсли;
		
		РезультатЗапроса.Добавить(Новый Структура("ТС, VIN, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки",
		ТекТС, VIN, ДанныеДТП, СоответсвиеДокументов, ТекстОшибки));
	КонецЦикла;
	
	ТекстОшибкиПредупреждения = "";
	
	ЕстьОшибки       = Ложь;
	КолВоЗагружено   = 0;
	КолВоНЕЗагружено = 0;
	Для Каждого ТекСтрока Из РезультатЗапроса Цикл
		ТекстОшибки           = ТекСтрока.ТекстОшибки;
		СоответсвиеДокументов = ТекСтрока.СоответсвиеДокументов;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибкиПредупреждения = Новый ФорматированнаяСтрока(ТекстОшибкиПредупреждения,
			Новый ФорматированнаяСтрока(
			Символы.ПС,
			Новый ФорматированнаяСтрока(ТекСтрока.Наименование,,,, "https://гибдд.рф/check/auto#" + ТекСтрока.VIN)));
			ЕстьОшибки = Истина;
			КолВоНЕЗагружено = КолВоНЕЗагружено + 1;
			Продолжить;
		КонецЕсли;
		
		КолВоЗагружено = КолВоЗагружено + 1;
		ДанныеДТП = ТекСтрока.ДанныеДТП;
		ГИБДД_ОбновитьДТП(ТекСтрока.ТС, МассивДокументов, ДанныеДТП, СоответсвиеДокументов);
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстЗагружено   = ?(КолВоЗагружено = 0, "", 
		СтрШаблон(НСтр("ru = 'Загружено успешно: %1 ТС.'"), КолВоЗагружено) + Символы.ПС);
		ТекстНЕЗагружено = СтрШаблон(НСтр("ru = 'Не загружено: %1 ТС.'"), КолВоНЕЗагружено);
		
		ТекстОшибкиПредупреждения = Новый ФорматированнаяСтрока(
		НСтр("ru = 'При получении данных от онлайн сервиса ГИБДД возникли проблемы:'"),
		Символы.ПС,
		ТекстОшибки,
		Символы.ПС,
		Символы.ПС,
		ТекстЗагружено,
		ТекстНЕЗагружено,
		Символы.ПС,
		НСтр("ru = 'Повторите попытку позже или выполните запрос по ссылке в браузере'"),
		НСтр("ru = ' и вручную скопируйте результат запроса в программу.'"),
		Символы.ПС,
		Символы.ПС,
		НСтр("ru = 'Ссылки для загрузки данных ДТП:'"),
		ТекстОшибкиПредупреждения);
	КонецЕсли;

	Если АдресХранилища <> Неопределено Тогда 
		Если ПовторныйЗапрос Тогда
			ПоместитьВоВременноеХранилище(Новый Структура("МассивТС, МассивДокументов, ТекстПредупреждения",
				ТекМассивТС, МассивДокументов, ТекстОшибкиПредупреждения), АдресХранилища);
		Иначе
			ПоместитьВоВременноеХранилище(Новый Структура("ТекстПредупреждения", ТекстОшибкиПредупреждения), АдресХранилища);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ГИБДД_ПолучитьСоответсвиеДТП(VIN, Капча, СоответсвиеДокументов, ЗапросВыполнен, ТекстОшибки, ПовторныйЗапрос)
	ДанныеДТП = уатИнтеграции_проф.ГИБДД_ПолучитьИсториюДТП(VIN, Капча, ЗапросВыполнен, ТекстОшибки, ПовторныйЗапрос);
	Если ПовторныйЗапрос Тогда
		Возврат ДанныеДТП;
	КонецЕсли;
	
	МассивНомерСправкиГИБДД = Новый Массив();
	Для Каждого ТекДТП Из ДанныеДТП Цикл
		МассивНомерСправкиГИБДД.Добавить(ТекДТП.НомерСправкиГИБДД);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомерСправкиГИБДД", МассивНомерСправкиГИБДД);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатДТП.Ссылка КАК Ссылка,
	               |	уатДТП.НомерСправкиГИБДД КАК НомерСправкиГИБДД
	               |ИЗ
	               |	Документ.уатДТП КАК уатДТП
	               |ГДЕ
	               |	НЕ уатДТП.ПометкаУдаления
	               |	И уатДТП.НомерСправкиГИБДД В(&МассивНомерСправкиГИБДД)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответсвиеДокументов.Вставить(Выборка.НомерСправкиГИБДД, Выборка.Ссылка);
	КонецЦикла;
	Возврат ДанныеДТП;
КонецФункции

Процедура ГИБДД_СоздатьДТП(ТС, ДанныеДТП, СоответсвиеДокументов) Экспорт
	
	ТекПользователь         = Пользователи.АвторизованныйПользователь();
	Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойОтветственный");

	Дата = ТекущаяДатаСеанса();
	Для Каждого ТекДТП Из ДанныеДТП Цикл
		Если СоответсвиеДокументов.Получить(ТекДТП.НомерСправкиГИБДД) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыйДокумент = Документы.уатДТП.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекДТП);
		НовыйДокумент.ТС  = ТС;
		НовыйДокумент.Дата = Дата;
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(НовыйДокумент.ТС, Дата);
		НовыйДокумент.Организация   = МестонахождениеТС.Организация;
		НовыйДокумент.Подразделение = МестонахождениеТС.Подразделение;
		НовыйДокумент.Колонна = МестонахождениеТС.Колонна;
		НовыйДокумент.Ответственный = Ответственный;
		НовыйДокумент.Записать();
	КонецЦикла;


КонецПроцедуры

Процедура ГИБДД_ОбновитьДТП(ТС, МассивДокументов, ДанныеДТП, СоответсвиеДокументов) Экспорт
	
	ТекПользователь         = Пользователи.АвторизованныйПользователь();
	Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойОтветственный");

	Дата = ТекущаяДатаСеанса();
	Для Каждого ТекДТП Из ДанныеДТП Цикл
		ДокументСсылка = СоответсвиеДокументов.Получить(ТекДТП.НомерСправкиГИБДД);
		Если ДокументСсылка = Неопределено
			ИЛИ МассивДокументов.Найти(ДокументСсылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыйДокумент = ДокументСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекДТП);
		НовыйДокумент.Записать();
	КонецЦикла;

КонецПроцедуры

// Функция производит получение капчи.
//
// Возвращаемое значение:
//  Массив - Данные о ДТП.
//
Функция ГИБДД_Капча(ТекстОшибки = "") Экспорт
	
	ТекстОшибки   = "";
	ДанныеЗапроса = уатЗащищенныеФункцииСервер_проф.ГИБДД_ВыполнитьЗапросДанных("captcha",, ТекстОшибки);
	Возврат ДанныеЗапроса;
	
КонецФункции

#КонецОбласти

#Область MultiGo

// Функция производит проверку точки на доступность.
//
Функция MultiGo_ПроверкаТочкиНаДоступность(Знач УчетнаяЗаписьСервисаMultiGo, Пункт, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Пункт", Пункт);

	РезультатыЗапроса = уатИнтеграцияMultiGo.MultiGo_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаMultiGo, "checkPoint", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат НЕ MultiGo_ЕстьОшибка(РезультатыЗапроса.Получить("err"), ТекстОшибки, РезультатыЗапроса.Получить("errmsg"));
	
КонецФункции

Функция MultiGo_ПроверкаПодключения(Знач УчетнаяЗаписьСервисаMultiGo, ТекстОшибки = "") Экспорт 
	
	РезультатыЗапроса = уатИнтеграцияMultiGo.MultiGo_ВыполнитьЗапросДанных(УчетнаяЗаписьСервисаMultiGo, "checkStart", ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат НЕ MultiGo_ЕстьОшибка(РезультатыЗапроса.Получить("err"), ТекстОшибки, РезультатыЗапроса.Получить("errmsg"));
	
КонецФункции

// Функция производит построение маршрута MultiGo.
//
Функция MultiGo_ПостроитьМаршрутДлительнаяОперация(Знач МЛ, АдресХранилища = Неопределено) Экспорт
	
	ТекстОшибки   = "";
	СсылкаMultiGo = "";
	МассивПунктов = MultiGo_ПостроитьМаршрут(МЛ, СсылкаMultiGo, ТекстОшибки);
	
	Если АдресХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("МассивПунктов, СсылкаMultiGo, ТекстОшибки",
			МассивПунктов, СсылкаMultiGo, ТекстОшибки), АдресХранилища);
	КонецЕсли;
	
КонецФункции

// Функция производит построение маршрута MultiGo.
//
Функция MultiGo_ПостроитьМаршрут(ПараметрыПроцедуры, СсылкаMultiGo, ТекстОшибки = "") Экспорт 
	
	МассивРезультат = Новый Массив();
	
	ТС = ПараметрыПроцедуры.ТС;
	
	ДанныеПунктов = Документы.уатМаршрутныйЛист.ПолучитьПлановыеФактическиеДатыПосещенияПунктов(ПараметрыПроцедуры);
		
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("НомерРейса",    ПараметрыПроцедуры.Номер);
	ПараметрыЗапроса.Вставить("ДатаСтарта",    ПараметрыПроцедуры.ДатаСтарта);
	ПараметрыЗапроса.Вставить("ДанныеПунктов", ДанныеПунктов);
	ПараметрыЗапроса.Вставить("IDТС",          ТС.ИДвСервисеMultiGo);
	ПараметрыЗапроса.Вставить("Настройки",     ПараметрыПроцедуры.Настройки);
	
	УчетнаяЗаписьMultiGo = ТС.УчетнаяЗаписьMultiGo;
	
	РезультатыЗапроса = уатИнтеграцияMultiGo.MultiGo_ВыполнитьЗапросДанных(УчетнаяЗаписьMultiGo, "start", ТекстОшибки, ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
	Если MultiGo_ЕстьОшибка(РезультатыЗапроса.Получить("err"),
		ТекстОшибки, РезультатыЗапроса.Получить("errmsg")) Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
	routeId = РезультатыЗапроса.Получить("data").Получить("routeId");
	
	Если MultiGo_ПроверитьПостроениеМаршрута(УчетнаяЗаписьMultiGo, routeId,
		ТекущаяДатаСеанса(), 300, ТекстОшибки) Тогда
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("routeId", routeId);

		РезультатыЗапроса = уатИнтеграцияMultiGo.MultiGo_ВыполнитьЗапросДанных(УчетнаяЗаписьMultiGo, "get", ТекстОшибки, ПараметрыЗапроса);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат МассивРезультат;
		КонецЕсли;
		
		Если MultiGo_ЕстьОшибка(РезультатыЗапроса.Получить("err"), ТекстОшибки, РезультатыЗапроса.Получить("errmsg")) Тогда
			Возврат МассивРезультат;
		КонецЕсли;
		
		data = РезультатыЗапроса.Получить("data");

		СсылкаMultiGo = data.Получить("shortUrl");
		СписокПунктов = data.Получить("list");
		
		ТипыТочек = УчетнаяЗаписьMultiGo.ТипыТочек;
		
		Индекс          = 0;
		РасстояниеОбщее = 0;
		Для Каждого ТекСтрока Из СписокПунктов Цикл
			ЗаписьJSON = Новый ЗаписьJSON;
			ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "", Истина);
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
			ЗаписатьJSON(ЗаписьJSON, ТекСтрока);
			ОтветMultiGo = ЗаписьJSON.Закрыть();
			
			КоординатыТочки = ТекСтрока.Получить("ll");
			ТипТочки        = ТекСтрока.Получить("type");
			ПрибытиеПлан    = ПрочитатьДатуJSON(ТекСтрока.Получить("dt"), ФорматДатыJSON.ISO);
			СтоянкаСек      = ?(ТекСтрока.Получить("pauseDt") = Неопределено, 0, ТекСтрока.Получить("pauseDt"));
			СтоянкаЧас      = Цел(СтоянкаСек / 3600);
			СтоянкаМин      = Цел((СтоянкаСек - СтоянкаЧас * 3600) / 60);

			Стоянка         = СтоянкаЧас + (СтоянкаМин / 100);
			
			Если Индекс < СписокПунктов.Количество() - 1 Тогда
				СледПрибытиеПлан  = ПрочитатьДатуJSON(СписокПунктов[Индекс + 1].Получить("dt"), ФорматДатыJSON.ISO);
				
				мВремяСек  = СледПрибытиеПлан - ПрибытиеПлан - СтоянкаСек;
				мВремяЧас  = Цел(мВремяСек / 3600);
				мВремяМин  = Цел((мВремяСек - мВремяЧас * 3600) / 60);
				
				Время      = мВремяЧас + (мВремяМин / 100);
				
				Расстояние = СписокПунктов[Индекс + 1].Получить("dist")/1000;
				Расстояние = Расстояние - РасстояниеОбщее;
			Иначе
				Время      = 0;
				Расстояние = 0;
			КонецЕсли;
			РасстояниеОбщее = РасстояниеОбщее + Расстояние;
			
			Индекс = Индекс + 1;
			
			Если ТипТочки = 1 Тогда
				МассивРезультат.Добавить(Новый Структура("Пункт, ТипПункта, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo",
					ДанныеПунктов[0].Пункт, ТипТочки, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo));
			ИначеЕсли ТипТочки = 3 Тогда
				МассивРезультат.Добавить(Новый Структура("Пункт, ТипПункта, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo", 
					ДанныеПунктов[ДанныеПунктов.Количество() - 1].Пункт, ТипТочки, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo));
			ИначеЕсли ТипТочки = 2 Тогда
				Для Каждого ТекСтрока Из ДанныеПунктов Цикл
					ДлинаЛат    = СтрДлина(КоординатыТочки[0]);
					ДлинаЛон    = СтрДлина(КоординатыТочки[1]);
					ТочностьЛат = ДлинаЛат - СтрДлина(Цел(КоординатыТочки[0])) - 1;
					ТочностьЛон = ДлинаЛон - СтрДлина(Цел(КоординатыТочки[1])) - 1;
					ФорматЛат   = СтрШаблон("ЧЦ=%1; ЧДЦ=%2", ДлинаЛат, ТочностьЛат);
					ФорматЛон   = СтрШаблон("ЧЦ=%1; ЧДЦ=%2", ДлинаЛон, ТочностьЛон);
					Если Формат(ТекСтрока.Пункт.Лат, ФорматЛат) = Формат(КоординатыТочки[0], ФорматЛат)
						И Формат(ТекСтрока.Пункт.Лон, ФорматЛон) = Формат(КоординатыТочки[1], ФорматЛон) Тогда
						МассивРезультат.Добавить(Новый Структура("Пункт, ТипПункта, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo",
							ТекСтрока.Пункт, ТипТочки, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo));
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				
				ТекстНСтр = "";
				ТипПоставщика = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
				
				ПунктСтруктура = Неопределено;
				Details = ТекСтрока.Получить("details");
				Если Details <> Неопределено
					И ЗначениеЗаполнено(Details.Получить("address")) Тогда
					АдресПредставление = Details.Получить("address");
				ИначеЕсли ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.DaData
					ИЛИ ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.Яндекс
					ИЛИ ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда 
					АдресПредставление = уатЭлектронныеКартыСервер.ПолучитьАдресПоКоординатамOSM(КоординатыТочки[0], КоординатыТочки[1]);
					
					ПодсказкиАдресовТекстОшибки = "";
					ДанныеВыбора = уатЭлектронныеКартыСервер.ПолучитьПодсказкиПоАдресу(АдресПредставление, ПодсказкиАдресовТекстОшибки);
					Если ДанныеВыбора.Количество() <> 0 Тогда
						ВыбранноеЗначение = ДанныеВыбора[0].Значение;
						Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
							Попытка
								#Если ВебКлиент Тогда
									АдресСтруктура = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
								#Иначе
									ЧтениеJSON = Новый ЧтениеJSON;
									ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
									АдресСтруктура = ПрочитатьJSON(ЧтениеJSON);
									ЧтениеJSON.Закрыть();
								#КонецЕсли
								ПунктСтруктура    = АдресСтруктура;
								ВыбранноеЗначение = АдресСтруктура.ПредставлениеАдреса;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
	
				// Поиск существующего в базе пункта
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатПунктыНазначения.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
				|ГДЕ
				|	уатПунктыНазначения.ПометкаУдаления = ЛОЖЬ
				|	И уатПунктыНазначения.ЭтоГруппа = ЛОЖЬ
				|	И (уатПунктыНазначения.Наименование = &АдресПредставление
				|			ИЛИ уатПунктыНазначения.Адрес = &АдресПредставление
				|			ИЛИ уатПунктыНазначения.АдресДляПоиска = &АдресПредставление)
				|	И (уатПунктыНазначения.Лат = &Широта
				|			ИЛИ &Широта = 0)
				|	И (уатПунктыНазначения.Лон = &Долгота
				|			ИЛИ &Долгота = 0)");
				Запрос.УстановитьПараметр("АдресПредставление", АдресПредставление);
				Запрос.УстановитьПараметр("Широта",             КоординатыТочки[0]);
				Запрос.УстановитьПараметр("Долгота",            КоординатыТочки[1]);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Пункт = Выборка.Ссылка;
				Иначе
					ТипТочкиЗначение = ТипыТочек.НайтиСтроки(Новый Структура("ТипТочкиAPI", ТипТочки));
					Если ТипТочкиЗначение.Количество() = 0 Тогда
						ТипПункта = Справочники.уатТипыПунктов.Адрес;
					Иначе
						ТипПункта = ?(ЗначениеЗаполнено(ТипТочкиЗначение[0].ТипТочки),
							ТипТочкиЗначение[0].ТипТочки,
							Справочники.уатТипыПунктов.Адрес);
					КонецЕсли;
					
					НовыйАдрес = Справочники.уатПунктыНазначения.СоздатьЭлемент();
					НовыйАдрес.Родитель            = УчетнаяЗаписьMultiGo.ГруппаДляНовыхПунктов;
					НовыйАдрес.Лат                 = КоординатыТочки[0];
					НовыйАдрес.Лон                 = КоординатыТочки[1];
					
					Если Details = Неопределено Тогда
						Наименование = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатПунктыНазначения", НовыйАдрес); 
					Иначе
						Наименование = Details.Получить("name");
						Если ТипТочки = 7 
							И Details.Получить("brand") <> Неопределено Тогда
							brand = Details.Получить("brand");
							Если ЗначениеЗаполнено(brand.Получить("name")) Тогда
								Наименование = brand.Получить("name") + " " + Наименование;
							КонецЕсли;
						ИначеЕсли ТипТочки = 21
							ИЛИ ТипТочки = 25
							ИЛИ ТипТочки = 23 Тогда  
							Наименование = Наименование;
						ИначеЕсли ЗначениеЗаполнено(Details.Получить("road")) Тогда
							Наименование = Наименование + " " + Details.Получить("road");
						Иначе
							Наименование = СтрШаблон(НСтр("ru = '%1 [%2, %3]'"), Наименование, НовыйАдрес.Лат, НовыйАдрес.Лон);
						КонецЕсли; 
					КонецЕсли;

					НовыйАдрес.Наименование        = Наименование;
					НовыйАдрес.Адрес               = АдресПредставление;
					
					Если ТипЗнч(ПунктСтруктура) = Тип("Структура") 
						И ПунктСтруктура.Свойство("ЗначениеАдреса") Тогда
						НовыйАдрес.ЗначениеАдреса      = ПунктСтруктура.ЗначениеАдреса;
					КонецЕсли;
					
					НовыйАдрес.ТипПункта           = ТипПункта;
					НовыйАдрес.СтоянкаПР           = НовыйАдрес.ТипПункта.СтоянкаПР;
					НовыйАдрес.СтоянкаДоп          = НовыйАдрес.ТипПункта.СтоянкаДоп;
					
					НовыйАдрес.Страна              = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
					НовыйАдрес.УстановитьСлучайныйЦветПункта();
					НовыйАдрес.Записать();
					
					Пункт = НовыйАдрес.Ссылка;
				КонецЕсли;

				МассивРезультат.Добавить(Новый Структура("Пункт, ТипПункта, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo",
					Пункт, ТипТочки, Расстояние, Время, ПрибытиеПлан, Стоянка, ОтветMultiGo));
			КонецЕсли;
		КонецЦикла;

		Возврат МассивРезультат;
	Иначе
		Возврат МассивРезультат;
	КонецЕсли;
 
КонецФункции

Функция MultiGo_ПроверитьПостроениеМаршрута(УчетнаяЗаписьMultiGo, routeId, ВремяЗапуска, ВремяОжиданияСек, ТекстОшибки, ПаузаСек = 1)
	
	РезультатыЗапроса = Новый Соответствие;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("routeId", routeId);
	ДанныеЗапроса = уатИнтеграцияMultiGo.MultiGo_ВыполнитьЗапросДанных(УчетнаяЗаписьMultiGo, "check", ТекстОшибки, ПараметрыЗапроса);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если MultiGo_ЕстьОшибка(ДанныеЗапроса.Получить("err"), ТекстОшибки, РезультатыЗапроса.Получить("errmsg")) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	МаршрутПостроен = Ложь;
	Если ДанныеЗапроса.Получить("data").Получить("end") = 1 Тогда
		Возврат Истина;
	Иначе 
		Попытка
			Выполнено = ДанныеЗапроса.Получить("data").Получить("percent");
			ДлительныеОперации.СообщитьПрогресс(,СтрШаблон(Нстр("ru = 'Расчет рейса %1'"), Цел(Выполнено)) + "%");
		Исключение
		КонецПопытки;
		
		Если ТекущаяДатаСеанса() - ВремяЗапуска >= ВремяОжиданияСек Тогда
			ТекстОшибки = НСтр("ru='Ошибка при попытке построить маршрут.'");
		Иначе
			МаршрутПостроен = MultiGo_ПроверитьПостроениеМаршрута(УчетнаяЗаписьMultiGo, 
				routeId, ВремяЗапуска, ВремяОжиданияСек, ТекстОшибки, ПаузаСек + 2);
		КонецЕсли;
		Возврат МаршрутПостроен;
	КонецЕсли;

КонецФункции

Функция MultiGo_ЕстьОшибка(КодОшибки, ТекстОшибки, ОписаниеОшибки = Неопределено) Экспорт
	
	КодыОшибок = Новый Соответствие;
	КодыОшибок.Вставить("14001",    НСтр("ru='Неизвестный клиент (apiKey)'"));
	КодыОшибок.Вставить( 14001 ,    НСтр("ru='Неизвестный клиент (apiKey)'"));
	КодыОшибок.Вставить("14002",    НСтр("ru='Терминал заблокирован'"));
	КодыОшибок.Вставить( 14002 ,    НСтр("ru='Терминал заблокирован'"));
	КодыОшибок.Вставить("14003",    НСтр("ru='Клиент не активен'"));
	КодыОшибок.Вставить( 14003 ,    НСтр("ru='Клиент не активен'"));
	КодыОшибок.Вставить("14004",    НСтр("ru='Запрос запрещен'"));
	КодыОшибок.Вставить( 14004 ,    НСтр("ru='Запрос запрещен'"));
	КодыОшибок.Вставить("14005",    НСтр("ru='Неизвестное ТС (ТС клиента не слинковано с ТС MultiGO)'"));
	КодыОшибок.Вставить( 14005 ,    НСтр("ru='Неизвестное ТС (ТС клиента не слинковано с ТС MultiGO)'"));
	КодыОшибок.Вставить("14006",    НСтр("ru='Нет точек для маршрута'"));
	КодыОшибок.Вставить( 14006 ,    НСтр("ru='Нет точек для маршрута'"));
	КодыОшибок.Вставить("14007",    НСтр("ru='Не настроены параметры для построения рейсов'"));
	КодыОшибок.Вставить( 14007 ,    НСтр("ru='Не настроены параметры для построения рейсов'"));
	КодыОшибок.Вставить("14008",    НСтр("ru='Неизвестный рейс'"));
	КодыОшибок.Вставить( 14008 ,    НСтр("ru='Неизвестный рейс'"));
	КодыОшибок.Вставить("14009",    НСтр("ru='Неизвестный token'"));
	КодыОшибок.Вставить( 14009 ,    НСтр("ru='Неизвестный token'"));
	КодыОшибок.Вставить("14010",    НСтр("ru='Рейс не в статусе ""исполнения""'"));
	КодыОшибок.Вставить( 14010 ,    НСтр("ru='Рейс не в статусе ""исполнения""'"));
	КодыОшибок.Вставить("14011",    НСтр("ru='Данный рейс не рейс ТС'"));
	КодыОшибок.Вставить( 14011 ,    НСтр("ru='Данный рейс не рейс ТС'"));
	КодыОшибок.Вставить("14012",    НСтр("ru='Неизвестное состояние ТС'"));
	КодыОшибок.Вставить( 14012 ,    НСтр("ru='Неизвестное состояние ТС'"));
	КодыОшибок.Вставить("14013",    НСтр("ru='Ошибка точек маршрута (скорее всего одна или более точек не на дороге)'"));
	КодыОшибок.Вставить( 14013 ,    НСтр("ru='Ошибка точек маршрута (скорее всего одна или более точек не на дороге)'"));
	КодыОшибок.Вставить("14014",    НСтр("ru='Координаты ТС далеко от геометрии рейса'"));
	КодыОшибок.Вставить( 14014 ,    НСтр("ru='Координаты ТС далеко от геометрии рейса'"));
	КодыОшибок.Вставить("14015",    НСтр("ru='Неизвестен объем бака на старте'"));
	КодыОшибок.Вставить( 14015 ,    НСтр("ru='Неизвестен объем бака на старте'"));
	КодыОшибок.Вставить("14016",    НСтр("ru='Рейс не готов'"));
	КодыОшибок.Вставить( 14016 ,    НСтр("ru='Рейс не готов'"));
	КодыОшибок.Вставить("14018",    НСтр("ru='Ошибка создания рейса'"));
	КодыОшибок.Вставить( 14018 ,    НСтр("ru='Ошибка создания рейса'"));
	КодыОшибок.Вставить("14019",    НСтр("ru='Есть участок ""пустой бак""'"));
	КодыОшибок.Вставить( 14019 ,    НСтр("ru='Есть участок ""пустой бак""'"));
	
	КодыОшибок.Вставить("12001",    НСтр("ru='Неизвестный клиент (apiKey)'"));
	КодыОшибок.Вставить( 12001 ,    НСтр("ru='Неизвестный клиент (apiKey)'"));
	КодыОшибок.Вставить("12002",    НСтр("ru='Терминал заблокирован'"));
	КодыОшибок.Вставить( 12002 ,    НСтр("ru='Терминал заблокирован'"));
	КодыОшибок.Вставить("12003",    НСтр("ru='Клиент не активен'"));
	КодыОшибок.Вставить( 12003 ,    НСтр("ru='Клиент не активен'"));
	КодыОшибок.Вставить("12004",    НСтр("ru='Запрос запрещен'"));
	КодыОшибок.Вставить( 12004 ,    НСтр("ru='Запрос запрещен'"));
	КодыОшибок.Вставить("12005",    НСтр("ru='Неизвестное ТС (ТС клиента не слинковано с ТС MultiGO)'"));
	КодыОшибок.Вставить( 12005 ,    НСтр("ru='Неизвестное ТС (ТС клиента не слинковано с ТС MultiGO)'"));
	КодыОшибок.Вставить("12006",    НСтр("ru='Нет точек для маршрута'"));
	КодыОшибок.Вставить( 12006 ,    НСтр("ru='Нет точек для маршрута'"));
	КодыОшибок.Вставить("12007",    НСтр("ru='Не настроены параметры для построения рейсов'"));
	КодыОшибок.Вставить( 12007 ,    НСтр("ru='Не настроены параметры для построения рейсов'"));
	КодыОшибок.Вставить("12008",    НСтр("ru='Неизвестный рейс'"));
	КодыОшибок.Вставить( 12008 ,    НСтр("ru='Неизвестный рейс'"));
	КодыОшибок.Вставить("12009",    НСтр("ru='Неизвестный token'"));
	КодыОшибок.Вставить( 12009 ,    НСтр("ru='Неизвестный token'"));
	КодыОшибок.Вставить("12010",    НСтр("ru='Рейс не в статусе ""исполнения""'"));
	КодыОшибок.Вставить( 12010 ,    НСтр("ru='Рейс не в статусе ""исполнения""'"));
	КодыОшибок.Вставить("12011",    НСтр("ru='Данный рейс не рейс ТС'"));
	КодыОшибок.Вставить( 12011 ,    НСтр("ru='Данный рейс не рейс ТС'"));
	КодыОшибок.Вставить("12012",    НСтр("ru='Неизвестное состояние ТС'"));
	КодыОшибок.Вставить( 12012 ,    НСтр("ru='Неизвестное состояние ТС'"));
	КодыОшибок.Вставить("12013",    НСтр("ru='Ошибка точек маршрута (скорее всего одна или более точек не на дороге)'"));
	КодыОшибок.Вставить( 12013 ,    НСтр("ru='Ошибка точек маршрута (скорее всего одна или более точек не на дороге)'"));
	КодыОшибок.Вставить("12014",    НСтр("ru='Координаты ТС далеко от геометрии рейса'"));
	КодыОшибок.Вставить( 12014 ,    НСтр("ru='Координаты ТС далеко от геометрии рейса'"));
	КодыОшибок.Вставить("12015",    НСтр("ru='Неизвестен объем бака на старте'"));
	КодыОшибок.Вставить( 12015 ,    НСтр("ru='Неизвестен объем бака на старте'"));
	КодыОшибок.Вставить("12016",    НСтр("ru='Рейс не готов'"));
	КодыОшибок.Вставить( 12016 ,    НСтр("ru='Рейс не готов'"));
	КодыОшибок.Вставить("12018",    НСтр("ru='Ошибка создания рейса'"));
	КодыОшибок.Вставить( 12018 ,    НСтр("ru='Ошибка создания рейса'"));
	КодыОшибок.Вставить("12019",    НСтр("ru='Есть участок ""пустой бак""'"));
	КодыОшибок.Вставить( 12019 ,    НСтр("ru='Есть участок ""пустой бак""'"));
	
	стрОшибка = КодыОшибок.Получить(КодОшибки);
	
	Если КодОшибки = 0 Тогда
		Возврат Ложь;
	ИначеЕсли стрОшибка = Неопределено Тогда 
		ТекстОшибки = НСтр("en='Undefined error';ru='Неопределенная ошибка'");
	Иначе 
		ТекстОшибки = стрОшибка;
	КонецЕсли;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		Если ТипЗнч(ОписаниеОшибки) = Тип("Массив") Тогда
			Попытка
				Для Каждого ТекСтрока Из ОписаниеОшибки Цикл
					ТекстОшибки = ТекстОшибки + Символы.ПС;
					ТекстОшибки = ТекстОшибки + ТекСтрока.Получить("message");
				КонецЦикла;
			Исключение
			КонецПопытки;
		ИначеЕсли ТипЗнч(ОписаниеОшибки) = Тип("Строка")
			И ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ТекстОшибки = ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Процедура выполняет регламентное задание уатЗагрузкаДанныхИзПаркоматика.
//
Процедура ЗагрузкаДанныхИзПаркоматика() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Download Паркоматикаdata';ru='Загрузка данных Паркоматика'");
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", Справочники.уатВнешниеСистемы.Паркоматика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатУчетныеЗаписиСервисовПарковок.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиСервисовПарковок КАК уатУчетныеЗаписиСервисовПарковок
	               |ГДЕ
	               |	уатУчетныеЗаписиСервисовПарковок.СервисПарковок = &ВнешняяСистема
	               |	И НЕ уатУчетныеЗаписиСервисовПарковок.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = "";
		
		ТабПарковок = Паркоматика_СписокПарковочныхСессий(Выборка.Ссылка, ТекстОшибки);
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			Для Каждого ТекПарковка Из ТабПарковок Цикл
				СоздатьПарковку(ТекПарковка);
			КонецЦикла;
		Иначе
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		
		Попытка
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ДатаПоследнегоОбмена = ТекущаяДата();
			СпрОбъект.Записать();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		Конецпопытки;

	КонецЦикла;
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Процедура выполняет регламентное задание уатЗагрузкаДанныхИзШтрафовНЕТ.
//
Процедура ЗагрузкаДанныхШтрафовНЕТ() Экспорт
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Download Штрафов НЕТ data';ru='Загрузка данных Штрафов НЕТ'");
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВнешняяСистема", Справочники.уатВнешниеСистемы.ШтрафовНет);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатУчетныеЗаписиСервисовШтрафов.Ссылка КАК Ссылка,
	               |	уатУчетныеЗаписиСервисовШтрафов.IDАвтопарка КАК IDАвтопарка,
	               |	уатУчетныеЗаписиСервисовШтрафов.ТокенАвторизации КАК ТокенАвторизации,
	               |	уатУчетныеЗаписиСервисовШтрафов.ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор КАК ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиСервисовШтрафов КАК уатУчетныеЗаписиСервисовШтрафов
	               |ГДЕ
	               |	уатУчетныеЗаписиСервисовШтрафов.ВнешняяСистема = &ВнешняяСистема
	               |	И НЕ уатУчетныеЗаписиСервисовШтрафов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = "";
		
		ТабРеестров = ШтрафовНет_СписокРеестров(Выборка.Ссылка, ТекстОшибки);
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			Для Каждого ТекРеестр Из ТабРеестров Цикл
				СоздатьРеестр(Выборка.Ссылка, ТекРеестр);
			КонецЦикла;
		КонецЕсли;

		ТекстОшибки          = "";
		ДатаПоследнегоОбмена = ТекущаяДатаСеанса();
		
		ПараметрыПроцедуры = Новый Структура("УчетнаяЗапись", Выборка.Ссылка);
		ШтрафовНет_ЗагрузитьСписокШтрафов(ПараметрыПроцедуры, ТекстОшибки, ДатаПоследнегоОбмена,
			Истина, Выборка.ЗагрузкаПроездовПоЦКАДвОтчетыСистемыАвтодор);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Попытка
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;
			СпрОбъект.Записать();
		Исключение
		Конецпопытки;

	КонецЦикла;
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

#КонецОбласти

#Область Штрафы

Процедура ШтрафовНет_ЗагрузитьСписокШтрафовПоПринадлежности(УчетнаяЗапись, ВестиЛог, ПринадлежностьШтрафов, ДатаС, ДатаПо,
	СоответствиеТС = Неопределено, Метод = "fines")
	
	ТекстОшибки = "";
	
	// Получаем список штрафов
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Страница",            1);
	ПараметрыЗапроса.Вставить("ДатаС",               ДатаС);
	ПараметрыЗапроса.Вставить("ДатаПо",              ДатаПо);
	ПараметрыЗапроса.Вставить(ПринадлежностьШтрафов, Истина);
	
	Если Метод = "fines_cars" Тогда
		МассивIDТС = Новый Массив();
		Для Каждого ТекТС Из СоответствиеТС Цикл
			МассивIDТС.Добавить(ТекТС.Ключ);
		КонецЦикла;
		ПараметрыЗапроса.Вставить("МассивIDТС", МассивIDТС);
	КонецЕсли;
	
	// Постраничная загрузка штрафов, точное колво страниц определить пока нельзя
	НомерСтруницы = 1;
	КолВоШтрафов  = 1000;
	Пока КолВоШтрафов >= 1000 Цикл
		ПараметрыЗапроса.Страница = НомерСтруницы;
		
		МассивПостановлений           = Новый Массив();
		МассивОплаченныхПостановлений = Новый Массив();
		МассивШтрафов = ШтрафовНет_ЗагрузитьПорциюШтрафов(УчетнаяЗапись,
			ПараметрыЗапроса, МассивПостановлений,
			МассивОплаченныхПостановлений, ТекстОшибки, СоответствиеТС, Метод, КолВоШтрафов);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		ТекКолВоШтрафовВсего = МассивШтрафов.Количество();
		
		НомерСтруницы = НомерСтруницы + 1;
		
		// Создадим штрафы
		ТекКолВоШтрафов     = 0;
		СообщениеОПрогрессеПринадлежность = Нстр("ru = 'Выполняется создание%1 порции штрафов %2'");
		
		Если ПринадлежностьШтрафов = "ШтрафСвязанСМашиной" Тогда 
			СообщениеОПрогрессеПринадлежность = СтрШаблон(СообщениеОПрогрессеПринадлежность,
				?(ПараметрыЗапроса.Страница = 1, "", " " + ПараметрыЗапроса.Страница), "по ТС");
		ИначеЕсли ПринадлежностьШтрафов = "ШтрафСвязанСКомпанией" Тогда
			СообщениеОПрогрессеПринадлежность = СтрШаблон(СообщениеОПрогрессеПринадлежность,
				?(ПараметрыЗапроса.Страница = 1, "", " " + ПараметрыЗапроса.Страница), "по владельцу (компании)");
		Иначе
			СообщениеОПрогрессеПринадлежность = СтрШаблон(СообщениеОПрогрессеПринадлежность,
				?(ПараметрыЗапроса.Страница = 1, "", " " + ПараметрыЗапроса.Страница), "по водителю");
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(,СообщениеОПрогрессеПринадлежность);

		СоответсвиеОплатыШтрафов = ШтрафовНет_ПолучитьДанныеОплаты(УчетнаяЗапись, МассивОплаченныхПостановлений);
		СоответсвиеШтрафов       = ШтрафовНет_ПолучитьСуществующиеШтрафы(УчетнаяЗапись, МассивПостановлений);
		Для Каждого ТекШтраф Из МассивШтрафов Цикл
			ТекстЛога           = "";
			ТекКолВоШтрафов     = ТекКолВоШтрафов + 1;
			
			// Выводим прогресс
			СообщениеОПрогрессе = СообщениеОПрогрессеПринадлежность;
			СообщениеОПрогрессе = Символы.ПС + СообщениеОПрогрессе;
			СообщениеОПрогрессе = СообщениеОПрогрессе + Символы.ПС +
				СтрШаблон(Нстр("ru = 'Загружено %1 из %2 штрафов'"), ТекКолВоШтрафов, ТекКолВоШтрафовВсего);
			ДлительныеОперации.СообщитьПрогресс(,СообщениеОПрогрессе);
			
			СоздатьОбновитьШтраф(УчетнаяЗапись, ВестиЛог, ТекШтраф, СоответсвиеШтрафов, СоответсвиеОплатыШтрафов, ТекстЛога);
			Если ВестиЛог Тогда
				ЗаписатьСообщениеЛога(УчетнаяЗапись, ТекстЛога);
			КонецЕсли;
			
			ДатаПоследнегоОбмена = ТекШтраф.ДатаОбновления;
		КонецЦикла;
		
		Если УчетнаяЗапись.Свойство("ОбновлятьДатуПоследнегоОбмена") 
			И УчетнаяЗапись.ОбновлятьДатуПоследнегоОбмена
			И ЗначениеЗаполнено(ДатаПоследнегоОбмена) Тогда
			Попытка
				СпрОбъект = УчетнаяЗапись.Ссылка.ПолучитьОбъект();
				СпрОбъект.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;
				СпрОбъект.Записать();
			Исключение
			Конецпопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрафовНет_ПолучитьСуществующиеШтрафы(УчетнаяЗапись, МассивПостановлений)
	
	СоответсвиеШтрафов = Новый Соответствие();
	
	Запрос   = Новый Запрос();
	Запрос.УстановитьПараметр("МассивПостановлений",  МассивПостановлений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатШтраф.Ссылка КАК Ссылка,
	               |	уатШтраф.НомерПостановления КАК НомерПостановления
	               |ИЗ
	               |	Документ.уатШтраф КАК уатШтраф
	               |ГДЕ
	               |	НЕ уатШтраф.ПометкаУдаления
	               |	И уатШтраф.НомерПостановления В(&МассивПостановлений)";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СоответсвиеШтрафов.Вставить(Выборка.НомерПостановления, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответсвиеШтрафов;
	
КонецФункции

Функция ШтрафовНет_ЗагрузитьПорциюШтрафов(УчетнаяЗапись, ПараметрыЗапроса, МассивПостановлений,
	МассивОплаченныхПостановлений, ТекстОшибки, СоответствиеТС, Метод = "fines", КолВоШтрафов = 0)
	
	ПорцияШтрафов = Новый Массив();
	
	ШтрафСвязанСМашиной       = ПараметрыЗапроса.Свойство("ШтрафСвязанСМашиной");
	ШтрафСвязанСВодителем     = ПараметрыЗапроса.Свойство("ШтрафСвязанСВодителем");
	ШтрафСвязанСКомпанией     = ПараметрыЗапроса.Свойство("ШтрафСвязанСКомпанией");
	
	// Получим порцию штрафов
	СписокШтрафов = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетнаяЗапись, Метод, ТекстОшибки, ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ПорцияШтрафов;
	КонецЕсли;
	МассивШтрафов = СписокШтрафов.Получить("fines");
		
	Прогресс        = 0;
	КолВоШтрафов    = 0;
	ТекКолВоШтрафов = 0;
	Если ТипЗнч(МассивШтрафов) = Тип("Массив") Тогда
		КолВоШтрафов = МассивШтрафов.Количество();
	КонецЕсли;
	
	Если ШтрафСвязанСМашиной Тогда
		ТекстШтрафСвязан = Нстр("ru = 'по ТС (%1 штрафов)'");
	ИначеЕсли ШтрафСвязанСВодителем Тогда
		ТекстШтрафСвязан = Нстр("ru = 'по водителю (%1 штрафов)'");
	Иначе
		ТекстШтрафСвязан = Нстр("ru = 'по владельцу (компании) (%1 штрафов)'");
	КонецЕсли;
	ТекстШтрафСвязан = СтрШаблон(ТекстШтрафСвязан, КолВоШтрафов);
	
	СообщениеОПрогрессе = СтрШаблон(Нстр("ru = 'Выполняется получение%1 порции штрафов %2'"),
		?(ПараметрыЗапроса.Страница = 1, "", " " + ПараметрыЗапроса.Страница), ТекстШтрафСвязан);
	
	Если ТипЗнч(МассивШтрафов) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из МассивШтрафов Цикл 
			
			СтруктураШтрафа = ЗаполнитьСтруктураШтрафа(ТекЭлемент, УчетнаяЗапись, СоответствиеТС);
			
			Если ЗначениеЗаполнено(СтруктураШтрафа.ТС) Тогда
				Если НЕ Метод = "fines_cars" Тогда
					Если НЕ УчетнаяЗапись.ШтрафСвязанСМашиной Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ПринадлежностьШтрафа = Перечисления.уатПринадлежностьШтрафов.Машина;
			ИначеЕсли ШтрафСвязанСВодителем Тогда
				ПринадлежностьШтрафа = Перечисления.уатПринадлежностьШтрафов.Водитель;
			ИначеЕсли ШтрафСвязанСКомпанией Тогда
				ПринадлежностьШтрафа = Перечисления.уатПринадлежностьШтрафов.Владелец;
			Иначе
				Если НЕ УчетнаяЗапись.ШтрафСвязанСМашинойИНеСопоставлен Тогда
					Продолжить;
				КонецЕсли;
				ПринадлежностьШтрафа = Перечисления.уатПринадлежностьШтрафов.МашинаНеизвестная;
			КонецЕсли;
			СтруктураШтрафа.Вставить("ПринадлежностьШтрафа", ПринадлежностьШтрафа);
			
			ПорцияШтрафов.Добавить(СтруктураШтрафа);
			МассивПостановлений.Добавить(СтруктураШтрафа.НомерПостановления);
			
			Если СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.paid
				ИЛИ СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.partpaid
				ИЛИ СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.overpaid
				ИЛИ СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.prepaid Тогда
				МассивОплаченныхПостановлений.Добавить(СтруктураШтрафа.НомерПостановления);
			КонецЕсли;
			
			// Выводим прогресс
			ТекКолВоШтрафов = ТекКолВоШтрафов + 1;
			Прогресс        = Цел((ТекКолВоШтрафов * 100) / ?(КолВоШтрафов = 0, 1, КолВоШтрафов));
			Если Прогресс > 0 Тогда
				ДлительныеОперации.СообщитьПрогресс(,Символы.ПС + СообщениеОПрогрессе + Прогресс + "%");
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	Возврат ПорцияШтрафов;
	
КонецФункции

Процедура ШтрафовНет_ЗагрузитьСписокПроездовПоЦКАД(УчетнаяЗапись, ВестиЛог, ДатаС, ДатаПо, ДатаПоследнегоОбмена, СоответствиеТС = Неопределено)
	
	ТекстОшибки = "";
	
	// Получаем список штрафов
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Страница",            1);
	ПараметрыЗапроса.Вставить("ДатаС",               ДатаС);
	ПараметрыЗапроса.Вставить("ДатаПо",              ДатаПо);
	
	// Постраничная загрузка штрафов, точное колво страниц определить пока нельзя
	НомерСтруницы  = 1;
	КолВоПроездов  = 400;  
	СоответвиеПроездов = Новый Соответствие();
	МассивИдентификаторПроезда = Новый Массив();
	Пока КолВоПроездов >= 400 Цикл
		ПараметрыЗапроса.Страница = НомерСтруницы;
		
		МассивПроездов = ШтрафовНет_ЗагрузитьПорциюПроездовПоЦКАД(УчетнаяЗапись,
			ПараметрыЗапроса, ТекстОшибки, СоответствиеТС, КолВоПроездов);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		ТекКолВоПроездовВсего = МассивПроездов.Количество();
		
		НомерСтруницы = НомерСтруницы + 1;
		
		// Создадим штрафы
		ТекКолВоПроездов    = 0;
		СообщениеОПрогрессе = СтрШаблон(Нстр("ru = 'Выполняется получение%1 информации о проездах по ЦКАД'"),
			?(ПараметрыЗапроса.Страница = 1, "", " " + ПараметрыЗапроса.Страница));
		
		ДлительныеОперации.СообщитьПрогресс(,СообщениеОПрогрессе);
		
		Для Каждого ТекПроезд Из МассивПроездов Цикл
			МассивИдентификаторПроезда.Добавить(ТекПроезд.ИдентификаторПроезда);
			СоответвиеПроездов.Вставить(ТекПроезд.ИдентификаторПроезда, ТекПроезд);
		КонецЦикла;
		
	КонецЦикла;
	
	// Получаем существующие записи
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивИдентификаторПроезда", МассивИдентификаторПроезда);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатОтчетСистемыАвтодорРасходы.ИдентификаторПроезда КАК ИдентификаторПроезда,
	               |	уатОтчетСистемыАвтодорРасходы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.уатОтчетСистемыАвтодор.Расходы КАК уатОтчетСистемыАвтодорРасходы
	               |ГДЕ
	               |	уатОтчетСистемыАвтодорРасходы.ИдентификаторПроезда В(&МассивИдентификаторПроезда)
	               |	И НЕ уатОтчетСистемыАвтодорРасходы.Ссылка.ПометкаУдаления
	               |ИТОГИ ПО
	               |	Ссылка";
	ВыборкаОтчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОтчет.Следующий() Цикл 
		ДокОбъект = ВыборкаОтчет.Ссылка.ПолучитьОбъект();
		
		Выборка = ВыборкаОтчет.Выбрать(); 
		Пока Выборка.Следующий() Цикл
			ТекСтрока = СоответвиеПроездов.Получить(Выборка.ИдентификаторПроезда);
			Если ТекСтрока <> Неопределено Тогда
				СтрокиДокумента = ДокОбъект.Расходы.НайтиСтроки(
					Новый Структура("ИдентификаторПроезда", Выборка.ИдентификаторПроезда));
				Для Каждого ТекСтрокаРасходы Из СтрокиДокумента Цикл
					ТекСтрокаРасходы.Статус = ТекСтрока.Статус;
					Если НЕ ЗначениеЗаполнено(ТекСтрокаРасходы.ТС) Тогда
						ТекСтрокаРасходы.ТС = ТекСтрока.ТС;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ТекСтрокаРасходы.ЭлектронноеСредство) Тогда
						ТекСтрокаРасходы.ЭлектронноеСредство = ТекСтрока.ЭлектронноеСредство;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ТекСтрокаРасходы.Сумма) Тогда
						ТекСтрокаРасходы.Сумма = ТекСтрока.Сумма;
					КонецЕсли;
				КонецЦикла; 
				
				Если СтрокиДокумента.Количество() <> 0 Тогда
					СоответвиеПроездов.Удалить(Выборка.ИдентификаторПроезда);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		Попытка
			ДокОбъект.Записать();  
		Исключение
		КонецПопытки;
	КонецЦикла;  
	
	ТаблицаПроездов = Новый ТаблицаЗначений;
	ТаблицаПроездов.Колонки.Добавить("ИдентификаторПроезда");
	ТаблицаПроездов.Колонки.Добавить("ДатаОперации");
	ТаблицаПроездов.Колонки.Добавить("ПунктОплаты");
	ТаблицаПроездов.Колонки.Добавить("Номер");
	ТаблицаПроездов.Колонки.Добавить("Статус");
	ТаблицаПроездов.Колонки.Добавить("Дорога");
	ТаблицаПроездов.Колонки.Добавить("ОплатитьДо");
	ТаблицаПроездов.Колонки.Добавить("Сумма");
	ТаблицаПроездов.Колонки.Добавить("ЭлектронноеСредство");
	ТаблицаПроездов.Колонки.Добавить("ТС");
	ТаблицаПроездов.Колонки.Добавить("ИнформацияОТС");
	
	ТекДеньЗагрузки = Неопределено;
	ДокОбъект       = Неопределено;
	Если СоответвиеПроездов.Количество() <> 0 Тогда 
		Для Каждого ТекСтрока Из СоответвиеПроездов Цикл
			НоваяСтрока = ТаблицаПроездов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока.Значение);
		КонецЦикла;
		ТаблицаПроездов.Сортировать("ДатаОперации");
		
		Для Каждого ТекСтрока Из ТаблицаПроездов Цикл  
			ДеньЗагрузки = НачалоДня(ТекСтрока.ДатаОперации); 
			
			Если ТекДеньЗагрузки <> ДеньЗагрузки Тогда
				Если ДокОбъект <> Неопределено Тогда
					Попытка
						ДокОбъект.Записать();  
					Исключение 
					КонецПопытки;
				КонецЕсли;
				ДокОбъект = Документы.уатОтчетСистемыАвтодор.СоздатьДокумент();
				ДокОбъект.Дата				 = ТекущаяДатаСеанса();
				ДокОбъект.Организация		 = УчетнаяЗапись.Организация;
				ДокОбъект.Подразделение		 = УчетнаяЗапись.Подразделение;
				ДокОбъект.Контрагент		 = УчетнаяЗапись.Контрагент;
				ДокОбъект.ДоговорКонтрагента = УчетнаяЗапись.ДоговорКонтрагента;
				ДокОбъект.Ответственный		 = УчетнаяЗапись.Ответственный;
				ДокОбъект.Комментарий 		 = СтрШаблон(НСтр("ru='Загружено из сервиса Штрафов НЕТ %1'"),ДеньЗагрузки);
			КонецЕсли;
		
			НоваяСтрока = ДокОбъект.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока); 
			
			ТекДеньЗагрузки = ДеньЗагрузки;
		КонецЦикла; 
		
		Если ДокОбъект <> Неопределено Тогда
			Попытка
				ДокОбъект.Записать();  
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ШтрафовНет_ЗагрузитьПорциюПроездовПоЦКАД(УчетнаяЗапись, ПараметрыЗапроса, ТекстОшибки, СоответствиеТС, КолВоПроездов = 0)
	
	ПорцияПроездов = Новый Массив();
	
	// Получим порцию штрафов
	СписокПроездов = уатИнтеграцияШтрафовНет.ШтрафовНет_ВыполнитьЗапросДанных(УчетнаяЗапись, "ckad-txes", ТекстОшибки, ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ПорцияПроездов;
	КонецЕсли;
	МассивПроездов = СписокПроездов.Получить("txes");
		
	Прогресс         = 0;
	КолВоПроездов    = 0;
	ТекКолВоПроездов = 0;
	Если ТипЗнч(МассивПроездов) = Тип("Массив") Тогда
		КолВоПроездов = МассивПроездов.Количество();
	КонецЕсли;
	
	СообщениеОПрогрессе = СтрШаблон(Нстр("ru = 'Выполняется получение%1 порции проездов по ЦКАД'"),
		?(ПараметрыЗапроса.Страница = 1, "", " " + ПараметрыЗапроса.Страница));
	
	Если ТипЗнч(МассивПроездов) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из МассивПроездов Цикл 
			
			СтруктураПроезда = ЗаполнитьСтруктураПроездаПоЦКАД(ТекЭлемент, УчетнаяЗапись, СоответствиеТС);
			ПорцияПроездов.Добавить(СтруктураПроезда);

			// Выводим прогресс
			ТекКолВоПроездов = ТекКолВоПроездов + 1;
			Прогресс         = Цел((ТекКолВоПроездов * 100) / ?(КолВоПроездов = 0, 1, КолВоПроездов));
			Если Прогресс > 0 Тогда
				ДлительныеОперации.СообщитьПрогресс(,Символы.ПС + СообщениеОПрогрессе + Прогресс + "%");
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	Возврат ПорцияПроездов;
	
КонецФункции


// Процедура создает документ Штраф.
//
Процедура СоздатьОбновитьШтраф(УчетнаяЗапись, ВестиЛог, ТекШтраф, СоответсвиеШтрафов,
	СоответсвиеОплатыШтрафов, ТекстЛога = "", ОбновитьШтраф = Истина, ШтрафСсылка = Неопределено) Экспорт
	
	ТекШтрафСсылка = СоответсвиеШтрафов.Получить(ТекШтраф.НомерПостановления);
	ТекШтрафОплата = СоответсвиеОплатыШтрафов.Получить(ТекШтраф.НомерПостановления);
	
	Если ЗначениеЗаполнено(ТекШтрафСсылка) Тогда
		Если ВестиЛог Тогда
			ТекстЛога = ТекстЛога + СтрШаблон("штраф(%1) обновлен", ТекШтраф.НомерПостановления);
		КонецЕсли;
		
		// Ничего не делаем,если штраф нашли, но он оплачен.		
		НовыйШтраф = ТекШтрафСсылка.ПолучитьОбъект();
		
		// Заполняем все поля штрафа, кроме реквизитов шапки.
		ЗаполнитьЗначенияСвойств(НовыйШтраф, ТекШтраф,,
			"ТС,Водитель,Организация,Подразделение,
			|Ответственный,Комментарий,
			|ДатаОплатыШтрафа,СуммаШтрафа,СуммаОплаты,СуммаКОплате,ТекущиеСостояниеОплатыПостановления");
		
		Если НЕ ЗначениеЗаполнено(НовыйШтраф.Ответственный) Тогда
			НовыйШтраф.Ответственный = ТекШтраф.Ответственный;
		КонецЕсли;
		
		Если НЕ НовыйШтраф.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов.paid Тогда
			
			НовыйШтраф.СуммаШтрафа      = ТекШтраф.СуммаШтрафа;
			НовыйШтраф.СуммаКОплате     = ТекШтраф.СуммаКОплате;
			
			Если ТипЗнч(ТекШтрафОплата) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(НовыйШтраф, ТекШтрафОплата);
			КонецЕсли;
			
		КонецЕсли;
			
		НовыйШтраф.ТекущиеСостояниеОплатыПостановления = ТекШтраф.ТекущиеСостояниеОплатыПостановления;
		
	Иначе

		НовыйШтраф      = Документы.уатШтраф.СоздатьДокумент();
		НовыйШтраф.Дата = ТекущаяДатаСеанса();
		
		// Заполняем все поля штрафа.
		// Поля Организация, Подразделение, Ответсвенный подставляются из справочника "Учетные записи сервисов штрафов".
		ЗаполнитьЗначенияСвойств(НовыйШтраф, ТекШтраф,, "Водитель, Организация, Подразделение");
		Если ТипЗнч(ТекШтрафОплата) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(НовыйШтраф, ТекШтрафОплата);
		КонецЕсли;

	КонецЕсли;
	
	// Заполняем местоположение ТС, если оно было не заполнено ранее.
	Если НЕ ЗначениеЗаполнено(НовыйШтраф.Организация) 
		И НЕ ЗначениеЗаполнено(НовыйШтраф.Подразделение)
		И НЕ ЗначениеЗаполнено(НовыйШтраф.Колонна) Тогда
		
		МестонахождениеТС  = уатОбщегоНазначения.МестонахождениеТС(ТекШтраф.ТС, НовыйШтраф.Дата);
		НовыйШтраф.Колонна = МестонахождениеТС.Колонна;
		
		// Если местополежение ТС не удалось определить, подставляем данные из справочника "Учетные записи сервисов штрафов".
		Если ЗначениеЗаполнено(МестонахождениеТС.Организация) Тогда
			НовыйШтраф.Организация   = МестонахождениеТС.Организация;
			НовыйШтраф.Подразделение = МестонахождениеТС.Подразделение;
		Иначе
			НовыйШтраф.Организация   = ТекШтраф.Организация;
			НовыйШтраф.Подразделение = ТекШтраф.Подразделение;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НовыйШтраф.ДоговорПолучателя) 
		И ЗначениеЗаполнено(НовыйШтраф.Организация) 
		И ЗначениеЗаполнено(НовыйШтраф.ПолучательПлатежа) Тогда
		ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, Приоритет");
		ДанныеОбменаССервером.Организация = НовыйШтраф.Организация;
		ДанныеОбменаССервером.Контрагент  = НовыйШтраф.ПолучательПлатежа;
		ДанныеОбменаССервером.Дата        = НовыйШтраф.Дата;
		
		СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
		ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(
		ДанныеОбменаССервером,
		СтруктураПараметровДляПолученияДоговора
		);
		Если ЗначениеЗаполнено(ЗначенияДляЗаполнения.ДоговорКонтрагента) Тогда
			НовыйШтраф.ДоговорПолучателя = ЗначенияДляЗаполнения.ДоговорКонтрагента;
		Иначе
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Владелец",    НовыйШтраф.ПолучательПлатежа);
			ПараметрыЗаполнения.Вставить("Контрагент",  НовыйШтраф.ПолучательПлатежа);
			ПараметрыЗаполнения.Вставить("Организация", НовыйШтраф.Организация);
			НовыйШтраф.ДоговорПолучателя = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "2", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйШтраф.Водитель) Тогда
		
		// Заполняем водителя по данным из системы Штрафов.
		Если ЗначениеЗаполнено(ТекШтраф.Водитель) Тогда
			НовыйШтраф.Водитель = ТекШтраф.Водитель;
		Иначе
			// Заполняем водителя по данным ПЛ
			Если ЗначениеЗаполнено(НовыйШтраф.ДатаНарушения) Тогда //из ПЛ
				ЗаполнитьЗначенияСвойств(НовыйШтраф, Документы.уатШтраф.ВодительТСпоПЛ(НовыйШтраф.ТС, НовыйШтраф.ДатаНарушения));
			КонецЕсли;
			
			// Подставляем водителя из экипажа, если не нашли ПЛ на дату нарушения и водитель в экипаже один 
			Если НЕ ЗначениеЗаполнено(НовыйШтраф.Водитель) Тогда
				ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(НовыйШтраф.ТС, НовыйШтраф.ДатаНарушения);
				ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
				Если ЭкипажТССписок_Количество = 1 Тогда
					НовыйШтраф.Водитель = ЭкипажТССписок[0].Значение;
				КонецЕсли;
			Конецесли;
		КонецЕсли;

	ИначеЕсли НЕ ЗначениеЗаполнено(НовыйШтраф.ДокументОснование) 
		И ЗначениеЗаполнено(НовыйШтраф.ДатаНарушения) Тогда
		НовыйШтраф.ДокументОснование = Документы.уатШтраф.ВодительТСпоПЛ(НовыйШтраф.ТС, НовыйШтраф.ДатаНарушения).ДокументОснование;
	КонецЕсли;
	
	Если ОбновитьШтраф Тогда
		Попытка
			НовыйШтраф.Записать(РежимЗаписиДокумента.Запись);
			Если ВестиЛог Тогда
				ТекстЛога = ТекстЛога + "; " + СтрШаблон("штраф(%1) записан", НовыйШтраф.НомерПостановления);
			КонецЕсли;
			ШтрафСсылка = НовыйШтраф.Ссылка;
		Исключение
			Если ВестиЛог Тогда
				ТекстЛога = ТекстЛога + СтрШаблон("штраф(%1) не записан ", НовыйШтраф.НомерПостановления)
				+ ОписаниеОшибки();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;

	ШтрафовНет_ЗагрузитьФайлы(УчетнаяЗапись, ЗначениеЗаполнено(ТекШтрафСсылка), ТекШтраф.МассивИзображений, НовыйШтраф, ВестиЛог, ТекстЛога);
	
КонецПроцедуры

// Процедура создает документ Реестр.
//
Процедура СоздатьРеестр(УчетнаяЗапись, ТекРеестр, флШтрафыПустые = Истина) Экспорт
	
	Запрос = Новый Запрос();
	IDРеестра = СтрЗаменить(СтрЗаменить(Строка(ТекРеестр.IDРеестра), " ", ""), Символы.НПП, "");

	Запрос.УстановитьПараметр("IDРеестра", IDРеестра);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатРеестрОплатыШтрафов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.уатРеестрОплатыШтрафов КАК уатРеестрОплатыШтрафов
	               |ГДЕ
	               |	уатРеестрОплатыШтрафов.IDРеестра = &IDРеестра
	               |	И НЕ уатРеестрОплатыШтрафов.ПометкаУдаления";
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НовыйРеестр = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		НовыйРеестр      = Документы.уатРеестрОплатыШтрафов.СоздатьДокумент();
		НовыйРеестр.Дата = Текущаядата();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(НовыйРеестр, ТекРеестр,,"Штрафы");
	НовыйРеестр.IDРеестра = IDРеестра;
	
	НовыйРеестр.Штрафы.Очистить();
	
	флШтрафыПустые = Истина;
	Для Каждого ТекШтраф Из ТекРеестр.Штрафы Цикл
		Если НЕ ТекШтраф.Свойство("IDШтрафа") Тогда
			НоваяСтрока = НовыйРеестр.Штрафы.Добавить();
			НоваяСтрока.Статус        = уатИнтеграции_проф.УстановитьТекущееСостояниеОплатыПостановления(ТекШтраф.Статус);
			НоваяСтрока.ПричинаОтказа = уатИнтеграции_проф.УстановитьПричинуОтказаОплатыПостановления(ТекШтраф.ПричинаОтказа);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Штраф) Тогда
				флШтрафыПустые = Ложь;
			КонецЕсли;

			Продолжить;
		КонецЕсли;
		Запрос = Новый Запрос();
		IDШтрафа = СтрЗаменить(СтрЗаменить(Строка(ТекШтраф.IDШтрафа), " ", ""), Символы.НПП, "");

		Запрос.УстановитьПараметр("IDШтрафа", IDШтрафа);
		Запрос.Текст = "ВЫБРАТЬ
		               |	уатШтраф.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.уатШтраф КАК уатШтраф
		               |ГДЕ
		               |	уатШтраф.IDШтрафа = &IDШтрафа
		               |	И НЕ уатШтраф.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = НовыйРеестр.Штрафы.Добавить();
			НоваяСтрока.Штраф = Выборка.Ссылка;
			НоваяСтрока.Статус = уатИнтеграции_проф.УстановитьТекущееСостояниеОплатыПостановления(ТекШтраф.Статус);
			НоваяСтрока.ПричинаОтказа = уатИнтеграции_проф.УстановитьПричинуОтказаОплатыПостановления(ТекШтраф.ПричинаОтказа);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Штраф) Тогда
				флШтрафыПустые = Ложь;
			КонецЕсли;

		Иначе
			НоваяСтрока = НовыйРеестр.Штрафы.Добавить();
			
			МассивОплаченныхПостановлений = Новый Массив();
			МассивОплаченныхПостановлений.Добавить(IDШтрафа);
			
			СоответсвиеОплатыШтрафов = ШтрафовНет_ПолучитьДанныеОплаты(УчетнаяЗапись, МассивОплаченныхПостановлений);
			СоответсвиеШтрафов       = Новый Соответствие;
			СоздатьОбновитьШтраф(УчетнаяЗапись, Ложь, ТекШтраф, СоответсвиеШтрафов, СоответсвиеОплатыШтрафов, "",, НоваяСтрока.Штраф);
			НоваяСтрока.Статус        = уатИнтеграции_проф.УстановитьТекущееСостояниеОплатыПостановления(ТекШтраф.Статус);
			НоваяСтрока.ПричинаОтказа = уатИнтеграции_проф.УстановитьПричинуОтказаОплатыПостановления(ТекШтраф.ПричинаОтказа);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Штраф) Тогда
				флШтрафыПустые = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если флШтрафыПустые Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НовыйРеестр.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ШтрафовНет_ЗагрузитьФайлы(УчетнаяЗапись, ЭтоНеНовыйШтраф, МассивИзображенийШтрафа, ШтрафСсылка, ВестиЛог, ТекстЛога = "")

	ЗагрузкаФото           = УчетнаяЗапись.ЗагружатьФото;
	ЗагрузкаКарточкиШтрафа = УчетнаяЗапись.ЗагружатьКарточкуШтрафа;
	
	Если НЕ ЗагрузкаФото 
		И НЕ ЗагрузкаКарточкиШтрафа Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзображений = ПодготовитьМассивИзображенийШтрафов(МассивИзображенийШтрафа);
	
	// Штраф не новый, проверяем были ли загружены данные изображения ранее
	Если ЗначениеЗаполнено(ЭтоНеНовыйШтраф) Тогда 
		МассивФайлов = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(ШтрафСсылка.Ссылка);
		СоответсвиеИменФайлов = Новый Соответствие();
		Для Каждого ТекСтрокаФайл Из МассивИзображений Цикл
			СоответсвиеИменФайлов.Вставить(ТекСтрокаФайл.ИмяФайла, ТекСтрокаФайл);
		КонецЦикла;
		
		МассивНовыхИзображений  = Новый Массив();
		МассивСтарыхИзображений =  Новый Массив();
		Для Каждого ТекСтрокаФайл Из МассивФайлов Цикл
			Если НЕ ТекСтрокаФайл.ПометкаУдаления Тогда
				Если ТекСтрокаФайл.Наименование = "Карточка штрафа.pdf" Тогда
					ЗагрузкаКарточкиШтрафа = Ложь;
				КонецЕсли;
				
				ТекФото = СоответсвиеИменФайлов.Получить(ТекСтрокаФайл.Наименование);
				Если ЗначениеЗаполнено(ТекФото) Тогда
					МассивСтарыхИзображений.Добавить(ТекСтрокаФайл.Наименование);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаФайл Из МассивИзображений Цикл
			ТекФайл = МассивСтарыхИзображений.Найти(ТекСтрокаФайл.ИмяФайла);
			Если НЕ ЗначениеЗаполнено(ТекФайл) Тогда
				МассивНовыхИзображений.Добавить(ТекСтрокаФайл);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивНовыхИзображений = МассивИзображений;
	КонецЕсли;
		
	Если НЕ ЗагрузкаФото Тогда
		МассивНовыхИзображений = Новый Массив();
	КонецЕсли;
	
	Если ЗагрузкаКарточкиШтрафа Тогда
		ШтрафовНет_ПолучитьКарточкуШтрафа(УчетнаяЗапись, ШтрафСсылка.IDШтрафа, МассивНовыхИзображений);
	КонецЕсли;
	
	МассивИзображений = ЗаполнитьМассивИзображенийШтрафов(МассивНовыхИзображений, УчетнаяЗапись);
	
	Для Каждого ТекСтрока Из МассивИзображений Цикл
		Попытка
			Картинка = Новый Картинка(ТекСтрока.Изображение);
			
			ТипКартинки = Картинка.Формат();
			Если НЕ ТекСтрока.РасширениеФайла = "pdf"
				И (ТипКартинки = ФорматКартинки.НеизвестныйФормат 
				ИЛИ ТипКартинки = Неопределено) Тогда
				
				Если ВестиЛог Тогда
					ТекстЛога = ТекстЛога + "; " + СтрШаблон("файл(%1) не прикреплен", ТекСтрока.url)
					+ "неизвестный формат картинки";
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ТекДата      = ТекущаяДата();
			ТекУниврДата = ТекущаяУниверсальнаяДата();
			GUIDКартинки = Новый УникальныйИдентификатор();
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.ИмяБезРасширения               = ТекСтрока.ИмяФайла;
			СведенияОФайле.РасширениеБезТочки             = ТекСтрока.РасширениеФайла;
			СведенияОФайле.ВремяИзменения                 = ТекДата;
			СведенияОФайле.ВремяИзмененияУниверсальное    = ТекУниврДата;
			СведенияОФайле.Размер                         = ТекСтрока.Изображение.Размер();
			СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ТекСтрока.Изображение);
			СведенияОФайле.АдресВременногоХранилищаТекста = "";
			
			Попытка
				ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ШтрафСсылка.Ссылка, СведенияОФайле);
				Если ВестиЛог Тогда
					ТекстЛога = ТекстЛога + "; " + СтрШаблон("файл(%1) прикреплен", ТекСтрока.url);
				КонецЕсли;
			Исключение
				ТекстНСТР = НСтр("en='An error occurred while writing the file to the database.';ru='Возникла ошибка при записи файла в базу.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				
				Если ВестиЛог Тогда
					ТекстЛога = ТекстЛога + "; " + СтрШаблон("файл(%1) не прикреплен", ТекСтрока.url)
					+ " " + ТекстНСТР + " " + ОписаниеОшибки();
				КонецЕсли;
				Возврат;
			КонецПопытки;
			
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьДатуИзСтроки(Строка) Экспорт
	Попытка
		СтроковаяДата = СтрЗаменить(Строка , "-", "");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , "T", "");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , "Z", "");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , " ","");
		НоваяДата = Дата(СтроковаяДата); 
	Исключение
		НоваяДата = Дата(1,1,1);
	КонецПопытки;
	Возврат НоваяДата;
КонецФункции

Функция УстановитьСтатусШтрафа(Строка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		Возврат Справочники.уатСтатусыШтрафов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеВСервисеШтрафов", Строка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатСтатусыШтрафов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатСтатусыШтрафов КАК уатСтатусыШтрафов
	               |ГДЕ
	               |	уатСтатусыШтрафов.НаименованиеВСервисеШтрафов = &НаименованиеВСервисеШтрафов
	               |	И НЕ уатСтатусыШтрафов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Попытка
			СпрОб = Справочники.уатСтатусыШтрафов.СоздатьЭлемент();
			СпрОб.НаименованиеВСервисеШтрафов = Строка;
			Если Строка = "check" Тогда
				СпрОб.Наименование = Нстр("en = 'Check'; ru = 'Проверка'");
			ИначеЕсли Строка = "active" Тогда
				СпрОб.Наименование = Нстр("en = 'Active'; ru = 'Активный'");
			ИначеЕсли Строка = "inactive" Тогда
				СпрОб.Наименование = Нстр("en = 'Inactive'; ru = 'Неактивный'");
			ИначеЕсли Строка = "deleted" Тогда
				СпрОб.Наименование = Нстр("en = 'Deleted'; ru = 'Удален'");
			ИначеЕсли Строка = "new" Тогда
				СпрОб.Наименование = Нстр("en = 'New'; ru = 'Новый'");
			ИначеЕсли Строка = "change_status_empty" Тогда
				СпрОб.Наименование = Нстр("en = 'Deleted'; ru = 'Hет информации'");
			ИначеЕсли Строка = "specifying" Тогда
				СпрОб.Наименование = Нстр("en = 'Specifying'; ru = 'Уточнение'");
			ИначеЕсли Строка = "annulating" Тогда
				СпрОб.Наименование = Нстр("en = 'Annulating'; ru = 'Аннулирование'");
			ИначеЕсли Строка = "deannulating" Тогда
				СпрОб.Наименование = Нстр("en = 'Deannulating'; ru = 'Деаннулирование'");
			Иначе
				СпрОб.Наименование = Строка;
			КонецЕсли;
			СпрОб.Записать();
			Возврат СпрОб.Ссылка;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Справочники.уатСтатусыШтрафов.ПустаяСсылка();
	
КонецФункции

Функция УстановитьСчетПолучателяШтрафа(Строка, Банк, Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НомерСчета", Строка);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	БанковскиеСчета.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.НомерСчета = &НомерСчета
	               |	И НЕ БанковскиеСчета.ПометкаУдаления
	               |	И БанковскиеСчета.Банк = &Банк
	               |	И БанковскиеСчета.Владелец = &Владелец";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Попытка
			СтрокаНаименования = Лев(СтрокаНаименования, 150);
			СпрОб = Справочники.БанковскиеСчета.СоздатьЭлемент();
			СпрОб.НомерСчета					 = Строка;
			СпрОб.Банк							 = Банк;
			СпрОб.Владелец						 = Контрагент;
			
			СпрОб.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
			СтрокаНаименования = Прав(СокрЛП(Строка), 4) 
			+ ?(ЗначениеЗаполнено(Банк), " в " + Строка(Банк), "")
			+ " (" + Строка(СпрОб.ВалютаДенежныхСредств) + ")";
			СпрОб.Наименование					 = СтрокаНаименования;
			СпрОб.Записать();
			Возврат СпрОб.Ссылка;
		Исключение
		КонецПопытки;
	КонецЕсли;

	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	
КонецФункции

Функция УстановитьХарактерНарушенияШтрафа(Правонарушение, Статья, УчетнаяЗапись = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Правонарушение)
		И НЕ ЗначениеЗаполнено(Статья) Тогда
		ТекстЛога = "Не заполнено правонарушение и статья";
		ЗаписатьСообщениеЛога(УчетнаяЗапись, ТекстЛога);
		Возврат Справочники.уатХарактерыНарушений.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Правонарушение", Правонарушение);
	Запрос.УстановитьПараметр("Наименование",   Нстр("ru = 'Статья КоАП'") + " " + Статья);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатХарактерыНарушений.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатХарактерыНарушений КАК уатХарактерыНарушений
	               |ГДЕ
	               |	((ВЫРАЗИТЬ(уатХарактерыНарушений.Правонарушение КАК СТРОКА(500))) = (ВЫРАЗИТЬ(&Правонарушение КАК СТРОКА(500)))
	               |			ИЛИ уатХарактерыНарушений.Наименование = &Наименование)
	               |	И НЕ уатХарактерыНарушений.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Попытка
			СпрОб = Справочники.уатХарактерыНарушений.СоздатьЭлемент();
			СпрОб.Наименование   = Нстр("ru = 'Статья КоАП'") + " " + Статья;
			СпрОб.Правонарушение = Правонарушение;
			СпрОб.Записать();
			Возврат СпрОб.Ссылка;
		Исключение
			ТекстЛога = "Не удалось записать характер нарушения правонарушение:" + Правонарушение
			 + " статья:" + Статья + " " + ОписаниеОшибки();
			ЗаписатьСообщениеЛога(УчетнаяЗапись, ТекстЛога);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Справочники.уатХарактерыНарушений.ПустаяСсылка();
	
КонецФункции

Функция УстановитьПолучателяПлатежаШтрафа(УчетнаяЗапись, КБК, НаименованиеКонтрагента, ОКТМО, КПП, ИНН) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ИНН = &ИНН
	               |	И Контрагенты.КПП = &КПП
	               |	И НЕ Контрагенты.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		Попытка
			Каталог = УчетнаяЗапись.КаталогКонтрагентов;

			СпрОб = Справочники.Контрагенты.СоздатьЭлемент();
			Если ЗначениеЗаполнено(Каталог) Тогда
				СпрОб.Родитель				= Каталог;
			КонецЕсли;
			СпрОб.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			СпрОб.Наименование              = НаименованиеКонтрагента;
			СпрОб.НаименованиеПолное        = НаименованиеКонтрагента;
			СпрОб.КБК                       = КБК;
			СпрОб.КодПоОКТМО                = ОКТМО;
			СпрОб.КПП                       = КПП;
			СпрОб.ИНН                       = ИНН;
			СпрОб.Записать();
			Возврат СпрОб.Ссылка;
		Исключение
		КонецПопытки;

	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция УстановитьБанкШтрафа(БИК, Наименование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("БИК", БИК);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Банки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Банки КАК Банки
	               |ГДЕ
	               |	Банки.Код = &БИК
	               |	И НЕ Банки.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(БИК) Тогда
		Попытка
			СпрОб = Справочники.Банки.СоздатьЭлемент();
			СпрОб.Наименование       = Наименование;
			СпрОб.Код                = БИК;
			СпрОб.Страна             = Справочники.СтраныМира.Россия;
			СпрОб.Записать();
			Возврат СпрОб.Ссылка;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция УстановитьТСШтрафа(ИДвСервисеШтрафов, Наименование, СТС, ГосударственныйНомер) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ИДвСервисеШтрафов", ИДвСервисеШтрафов);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("СТС", СТС);
	Запрос.УстановитьПараметр("ГосударственныйНомер", ГосударственныйНомер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов,
	               |	МАКСИМУМ(уатРегистрационныеДокументы.Серия + "" "" + уатРегистрационныеДокументы.Номер) КАК Номер
	               |ПОМЕСТИТЬ втСТС
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)
	               |	И уатРегистрационныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	               |	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаОкончания >= &ТекДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаВыдачи <= &ТекДата
	               |		КОНЕЦ
	               |	И уатРегистрационныеДокументы.Номер = &СТС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатРегистрационныеДокументы.ВладелецДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	100 КАК Приоритет
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Наименование = &Наименование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка,
	               |	2
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ГосударственныйНомер = &ГосударственныйНомер
	               |	И &ГосударственныйНомер <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка,
	               |	1
	               |ИЗ
	               |	втСТС КАК втСТС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	               |		ПО втСТС.ВладелецДокументов = уатТС.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка,
	               |	0
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ИДвСервисеШтрафов = &ИДвСервисеШтрафов
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.уатТС.ПустаяСсылка();
	
КонецФункции

Функция УстановитьВодителяШтрафа(Нарушитель) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Нарушитель", Нарушитель);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Наименование = &Нарушитель
	               |	И НЕ Сотрудники.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции

Функция УстановитьТекущееСостояниеОплатыПостановления(Статус) Экспорт
	
	ТекущееСостояниеОплатыПостановления = "";
	Если Статус = "new" Тогда
		ТекущееСостояниеОплатыПостановления = Нстр("ru = 'Создан'");
	ИначеЕсли Статус = "wrong" Тогда
		ТекущееСостояниеОплатыПостановления = Нстр("ru = 'Ошибка'");
	ИначеЕсли Статус = "approved" Тогда
		ТекущееСостояниеОплатыПостановления = Нстр("ru = 'Проверен'");
	ИначеЕсли Статус = "process" Тогда
		ТекущееСостояниеОплатыПостановления = Нстр("ru = 'Уточняется'");
	ИначеЕсли Статус = "paid" Тогда
		ТекущееСостояниеОплатыПостановления = Нстр("ru = 'Оплачен'");
	ИначеЕсли Статус = "done" Тогда
		ТекущееСостояниеОплатыПостановления = "";
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		ТекущееСостояниеОплатыПостановления = Статус;
	КонецЕсли;
	
	Возврат ТекущееСостояниеОплатыПостановления;
	
КонецФункции

Функция УстановитьПричинуОтказаОплатыПостановления(Статус) Экспорт
	
	ПричинаОтказаОплатыПостановления = "";
	Если Статус = "incorrect_number" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Некорректный номер'");
	ИначеЕсли Статус = "fine_is_prepaid" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Ошибка'");
	ИначеЕсли Статус = "fine_already_paid" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Постановление уже оплачено'");
	ИначеЕсли Статус = "fine_is_paid_with_error" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Ошибка'");
	ИначеЕсли Статус = "already_added" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Постановление уже добавлено'");
	ИначеЕсли Статус = "fine_not_found" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Ошибка'");
	ИначеЕсли Статус = "not_enough_data_to_pay" Тогда
		ПричинаОтказаОплатыПостановления = Нстр("ru = 'Не хватает данных для оплаты постановления'");
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		ПричинаОтказаОплатыПостановления = Статус;
	КонецЕсли;
	
	Возврат ПричинаОтказаОплатыПостановления;
	
КонецФункции

Функция ПодготовитьМассивИзображенийШтрафов(МассивИзображений)
	МассивПолученныхИзображений = Новый Массив();
	Если ТипЗнч(МассивИзображений) = Тип("Массив") Тогда
		Для Каждого ТекИзображение Из МассивИзображений Цикл
			url = ТекИзображение;
			РасширениеФайла = ПолучитьРасширениеФайла(url);
			ИмяФайла        = СтрЗаменить(Сред(url, СтрНайти(url, "/", НаправлениеПоиска.СКонца)+1, СтрДлина(url)),"." + РасширениеФайла, "");
			
			МассивПолученныхИзображений.Добавить(Новый Структура("url, ИмяФайла, РасширениеФайла",
				url, ИмяФайла, РасширениеФайла));
		КонецЦикла;
	КонецЕсли;
	Возврат МассивПолученныхИзображений;
КонецФункции

Функция ЗаполнитьМассивИзображенийШтрафов(МассивИзображений, УчетнаяЗапись = Неопределено) Экспорт
	МассивПолученныхИзображений = Новый Массив();

	ТекстОшибкиФайл = "";
	Изображение     = "";
	ВременныйФайл    = ПолучитьИмяВременногоФайла("html");
	ТекстЛога = "Заполнение массива изображений штрафа: ";
	Для Каждого ТекИзображение Из МассивИзображений Цикл
		url = ТекИзображение.url;
		
		ТекстЛога = ТекстЛога + " " + url;
		
		Результат = уатИнтеграцияШтрафовНет.ЗагрузитьФайлССервера(
		url,
		ВременныйФайл,
		ТекстОшибкиФайл
		);
		
		Если ЗначениеЗАполнено(ТекстОшибкиФайл) Тогда
			ТекстЛога = ТекстЛога + " ошибка:" + ТекстОшибкиФайл;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанные  = Новый ДвоичныеДанные(ВременныйФайл);
			РасширениеФайла = ТекИзображение.РасширениеФайла;
			ИмяФайла        = ТекИзображение.ИмяФайла;
			МассивПолученныхИзображений.Добавить(Новый Структура("url, ИмяФайла, РасширениеФайла, Изображение",
			url, ИмяФайла, РасширениеФайла, ДвоичныеДанные));
			ТекстЛога = ТекстЛога + " файл добавлен в массив;";
		Исключение
			ТекстЛога = ТекстЛога + " файл не добавлен в массив" + " " + ОписаниеОшибки() + ";";
		КонецПопытки;
	КонецЦикла;
	ЗаписатьСообщениеЛога(УчетнаяЗапись, ТекстЛога);
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
	КонецПопытки;
	
	Возврат МассивПолученныхИзображений;
	
КонецФункции

Функция ЗаполнитьСоответствиеТСвСервисеШтрафов(УчетныеЗаписиСервисаШтрафов) Экспорт
	
	СоответствиеТС = Новый Соответствие();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УчетнаяЗаписьCервисаШтрафов", УчетныеЗаписиСервисаШтрафов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.ИДвСервисеШтрафов КАК ИДвСервисеШтрафов,
	               |	уатТС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ИДвСервисеШтрафов <> """"
	               |	И уатТС.УчетнаяЗаписьCервисаШтрафов = &УчетнаяЗаписьCервисаШтрафов
	               |	И НЕ уатТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТС.Вставить(Выборка.ИДвСервисеШтрафов, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеТС;
	
КонецФункции

Функция ЗаполнитьСтруктураШтрафа(ТекЭлемент, УчетнаяЗапись, СоответствиеТС = Неопределено) Экспорт
	
	ПоляШтрафа = "IDШтрафа,ДатаОбновления,НомерПостановления,ДатаПостановления,УчетнаяЗапись,Организация,Подразделение,Ответственный,
	|ПолучательПлатежа,КодБК,КодПоОКТМО,Банк,СчетПолучателя,
	|ТекущиеСостояниеОплатыПостановления,СуммаШтрафа,СуммаКОплате,СуммаОплаты,ДатаОплатыШтрафа,РазмерСкидки,ДатаСкидки,
	|Комментарий,ДатаНарушения,ХарактерНарушения,СтатусШтрафа,МестоСовершенияПравонарушения,Водитель,
	|ЧислитсяВБазеГИБДД,ЧислитсяВБазеГИСГМП,ДатаПостановления,ДатаПередачиВСлужбуФССП,
	|НомерДокумента,ТипДокумента,
	|ТС, ИнформацияОТС,МассивИзображений";
	
	СтруктураШтрафа = Новый Структура(ПоляШтрафа);
	
	СтруктураШтрафа.ДатаОбновления = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("updated_at"));
	Если ЗначениеЗаполнено(СтруктураШтрафа.ДатаОбновления) 
		И ТипЗнч(СтруктураШтрафа.ДатаОбновления) = Тип("Дата") Тогда
		СтруктураШтрафа.ДатаОбновления = МестноеВремя(СтруктураШтрафа.ДатаОбновления, ЧасовойПоясСеанса());
	Иначе
		СтруктураШтрафа.ДатаОбновления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// УИН является идентификатором штрафа
	СтруктураШтрафа.IDШтрафа 							 = ТекЭлемент.Получить("number");
	СтруктураШтрафа.НомерПостановления					 = СтруктураШтрафа.IDШтрафа;
	СтруктураШтрафа.ДатаПостановления					 = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("bill_date"));
	СтруктураШтрафа.УчетнаяЗапись						 = УчетнаяЗапись.Ссылка;
	
	// Изначально берем из настрок учетной записи
	СтруктураШтрафа.Организация							 = УчетнаяЗапись.Организация;
	СтруктураШтрафа.Подразделение						 = УчетнаяЗапись.Подразделение;
	СтруктураШтрафа.Ответственный						 = УчетнаяЗапись.Ответственный;

	// Реквизиты штрафа
	ПолучательПлатежа    = ТекЭлемент.Получить("payee_username");
	КБКПолучателя        = ТекЭлемент.Получить("payee_kbk");
	ОКТМОПолучателя      = ТекЭлемент.Получить("payee_oktmo");
	КПППолучателя        = ТекЭлемент.Получить("payee_kpp");
	ИННПолучателя        = ТекЭлемент.Получить("payee_inn");
	БИКБанкаПолучателя   = ТекЭлемент.Получить("payee_bank_bik");
	БанкПолучателя       = ТекЭлемент.Получить("payee_bank_name");
	НомерСчетаПолучателя = ТекЭлемент.Получить("payee_bank_account");
	
	СтруктураШтрафа.ПолучательПлатежа = УстановитьПолучателяПлатежаШтрафа(УчетнаяЗапись,
		КБКПолучателя, ПолучательПлатежа,
		ОКТМОПолучателя, КПППолучателя, ИННПолучателя);

	СтруктураШтрафа.КодБК			 = КБКПолучателя;
	СтруктураШтрафа.КодПоОКТМО		 = ОКТМОПолучателя;
	
	СтруктураШтрафа.Банк			 = УстановитьБанкШтрафа(БИКБанкаПолучателя, БанкПолучателя);
	СтруктураШтрафа.СчетПолучателя	 = УстановитьСчетПолучателяШтрафа(НомерСчетаПолучателя, СтруктураШтрафа.Банк, СтруктураШтрафа.ПолучательПлатежа);

	// Основная информация штрафа
	СтатусОплаты = ТекЭлемент.Получить("payment_status");
	Попытка
		СтруктураШтрафа.ТекущиеСостояниеОплатыПостановления = Перечисления.уатСтатусыПлатежейШтрафов[СтатусОплаты];
	Исключение
	КонецПопытки;
	СтруктураШтрафа.СуммаШтрафа  = ТекЭлемент.Получить("amount"); // Изначальная сумма штрафа
	СтруктураШтрафа.СуммаКОплате = ТекЭлемент.Получить("amount_to_pay"); // Сумма к оплате с учётом скидки и предыдущих платежей
	СтруктураШтрафа.РазмерСкидки = ТекЭлемент.Получить("discount_size");
	СтруктураШтрафа.ДатаСкидки	 = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("discount_date")); // Дата окончания скидки
	
	// Дополнительная информация штрафа
	СтруктураШтрафа.Комментарий			 = ТекЭлемент.Получить("name"); // Наименование штрафа
	СтруктураШтрафа.ДатаНарушения		 = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("violation_date"));
	
	РасшифровкаСтатьиНарушения	 = ТекЭлемент.Получить("koap_text"); // Расшифровка статьи нарушения
	СтатьяНарушения				 = ТекЭлемент.Получить("koap_code"); // Статья нарушения
	СтруктураШтрафа.ХарактерНарушения	 = УстановитьХарактерНарушенияШтрафа(РасшифровкаСтатьиНарушения, СтатьяНарушения, УчетнаяЗапись);
	// Показывает изменялись ли данные в ГИС ГМП. Он отражает статус оплаты, но иногда содержит информацию о том, что произошло со штрафом
	СтруктураШтрафа.СтатусШтрафа		 = УстановитьСтатусШтрафа(ТекЭлемент.Получить("change_status"));
	СтруктураШтрафа.МестоСовершенияПравонарушения = ТекЭлемент.Получить("location"); // Место нарушения
	СтруктураШтрафа.Водитель					  = УстановитьВодителяШтрафа(ТекЭлемент.Получить("violator_name"));
	
	ОрганизацияПостановления = ТекЭлемент.Получить("org");
	Если ОрганизацияПостановления = "gibdd" Тогда
		СтруктураШтрафа.ЧислитсяВБазеГИБДД = Истина;
	КонецЕсли;
	СтруктураШтрафа.ЧислитсяВБазеГИСГМП = ТекЭлемент.Получить("change_status") <> "change_status_empty";
	
	СтруктураШтрафа.ДатаПостановления       = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("bill_date"));
	// Чтобы узнать когда крайний срок оплаты штрафа, прибавьте 60 дней к дате выписывания штрафа
	СтруктураШтрафа.ДатаПередачиВСлужбуФССП	= СтруктураШтрафа.ДатаПостановления + (60 * 24 * 60 * 60);

	// Определим ТС
	Если СоответствиеТС <> Неопределено Тогда
		ДанныеТС = ТекЭлемент.Получить("best_match_car");
		Если ДанныеТС <> Неопределено Тогда
			СтруктураДанныхТС = Новый Структура();
			СтруктураДанныхТС.Вставить("id",   ДанныеТС.Получить("id"));
			СтруктураДанныхТС.Вставить("name", ДанныеТС.Получить("name")); // Название машины
			СтруктураДанныхТС.Вставить("sts",  ДанныеТС.Получить("sts")); // СТС машины
			СтруктураДанныхТС.Вставить("grz",  ДанныеТС.Получить("grz")); // ГРЗ машины
			СтруктураДанныхТС.Вставить("id",   ДанныеТС.Получить("id"));
			
			idТС = СтрЗаменить(Строка(СтруктураДанныхТС.id), Символы.НПП, "");
			
			СтруктураШтрафа.ТС	 = СоответствиеТС.Получить(idТС);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхТС); 
			СтруктураШтрафа.ИнформацияОТС = ЗаписьJSON.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШтрафа.МассивИзображений = ТекЭлемент.Получить("pics");

	// Определим тип и номер документа на который выписан штраф
	sts   = "";
	grz   = "";
	vu    = "";
	rawid = "";
	мсвДокументы = ТекЭлемент.Получить("docs");
	Если ТипЗнч(мсвДокументы) = Тип("Массив") Тогда
		Для Каждого ТекСтрока Из мсвДокументы Цикл
			is_main = ТекСтрока.Получить("is_main");
			docType = ТекСтрока.Получить("type");

			Если is_main <> Неопределено
				И is_main Тогда
				
				СтруктураШтрафа.НомерДокумента = ТекСтрока.Получить("number");
				Если docType = "sts" Тогда
					СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.СТС;
					
					sts = ТекСтрока.Получить("number");
				ИначеЕсли docType = "vu" Тогда
					СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.УдостоверениеВодителя;
					
					vu = ТекСтрока.Получить("number");
				ИначеЕсли docType = "inn" Тогда
					СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.ИНН;
				ИначеЕсли docType = "snils" Тогда
					СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.СНИЛС;
				ИначеЕсли docType = "passport" Тогда
					СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.Паспорт;
				ИначеЕсли docType = "doc_type_unknown" Тогда
					СтруктураШтрафа.ТипДокумента = "";
				ИначеЕсли docType = "grz" Тогда
					СтруктураШтрафа.ТипДокумента = "Государственный регистрационный знак ТС";
					
					grz = ТекСтрока.Получить("number");
				ИначеЕсли docType = "rawid" Тогда
					СтруктураШтрафа.ТипДокумента = "Идентификатор плательщика";
					
					rawid = ТекСтрока.Получить("number");
				ИначеЕсли docType = "ip" Тогда
					СтруктураШтрафа.ТипДокумента = "Исполнительное производство";
				ИначеЕсли docType = "proof_of_born" Тогда
					СтруктураШтрафа.ТипДокумента = "Свидетельство органов ЗАГС,
					|органа исполнительной власти или органа местного самоуправления о рождении гражданина";
				ИначеЕсли docType = "allower_to_temporary_live" Тогда
					СтруктураШтрафа.ТипДокумента = "Разрешение на временное проживание (для лиц без гражданства)";
				ИначеЕсли docType = "allower_to_wearing_hunter_weapon" Тогда
					СтруктураШтрафа.ТипДокумента = "Разрешение на хранение и ношение охотничьего оружия";
				ИначеЕсли docType = "army_ticket" Тогда
					СтруктураШтрафа.ТипДокумента = "Военный билет военнослужащего";
				ИначеЕсли docType = "certificate_aue" Тогда
					СтруктураШтрафа.ТипДокумента = "Справка об освобождении из мест лишения свободы";
				ИначеЕсли docType = "certificate_of_consideration" Тогда
					СтруктураШтрафа.ТипДокумента = "Свидетельство о рассмотрении ходатайства по существу";
				ИначеЕсли docType = "escaper_identy" Тогда
					СтруктураШтрафа.ТипДокумента = "Удостоверение беженца";
				ИначеЕсли docType = "hunter_ticket" Тогда
					СтруктураШтрафа.ТипДокумента = "Охотничий билет";
				ИначеЕсли docType = "international_passport" Тогда
					СтруктураШтрафа.ТипДокумента = "Паспорт гражданина Российской Федерации,
					|являющийся основным документом, удостоверяющим личность гражданина Российской Федерации за пределами территории Российской Федерации,
					|в том числе содержащий электронный носитель информации";
				ИначеЕсли docType = "migration_card" Тогда
					СтруктураШтрафа.ТипДокумента = "Миграционная карта";
				ИначеЕсли docType = "mobile_phone" Тогда
					СтруктураШтрафа.ТипДокумента = "Номер мобильного телефона";
				ИначеЕсли docType = "passport_of_aquaman" Тогда
					СтруктураШтрафа.ТипДокумента = "Паспорт моряка (удостоверение личности моряка)";
				ИначеЕсли docType = "passport_of_soilder" Тогда
					СтруктураШтрафа.ТипДокумента = "Удостоверение личности военнослужащего";
				ИначеЕсли docType = "passport_of_stranger" Тогда
					СтруктураШтрафа.ТипДокумента = "Паспорт иностранного гражданина";
				ИначеЕсли docType = "russian_identy" Тогда
					СтруктураШтрафа.ТипДокумента = "Удостоверение личности гражданина Российской Федерации";
				ИначеЕсли docType = "temporary_russian_identy" Тогда
					СтруктураШтрафа.ТипДокумента = "Временное удостоверение личности гражданина Российской Федерации";
				ИначеЕсли docType = "temporary_shelter_identy" Тогда
					СтруктураШтрафа.ТипДокумента = "Свидетельство о предоставлении временного
					|убежища на территории Российской Федерации";
				ИначеЕсли docType = "ussr_passport" Тогда
					СтруктураШтрафа.ТипДокумента = "Паспорт гражданина СССР";
				ИначеЕсли docType = "view_of_home" Тогда
					СтруктураШтрафа.ТипДокумента = "Вид на жительство";
				ИначеЕсли docType = "legal_inn" Тогда
					СтруктураШтрафа.ТипДокумента = "ИНН юр.лица в случае, когда кпп неизвестен";
				КонецЕсли;
			Иначе
				Если docType = "sts" Тогда
					sts = ТекСтрока.Получить("number");
				ИначеЕсли docType = "vu" Тогда
					vu = ТекСтрока.Получить("number");
				ИначеЕсли docType = "grz" Тогда
					grz = ТекСтрока.Получить("number");
				ИначеЕсли docType = "rawid" Тогда
					rawid = ТекСтрока.Получить("number");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		Если НЕ ЗначениеЗаполнено(СтруктураШтрафа.ТипДокумента)
			И мсвДокументы.Количество() <> 0 Тогда
			
			ТекСтрока = мсвДокументы[0];
			
			docType = ТекСтрока.Получить("type");
			СтруктураШтрафа.НомерДокумента = ТекСтрока.Получить("number");
			Если docType = "sts" Тогда
				СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.СТС;
				
				sts = ТекСтрока.Получить("number");
			ИначеЕсли docType = "vu" Тогда
				СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.УдостоверениеВодителя;
				
				vu = ТекСтрока.Получить("number");
			ИначеЕсли docType = "inn" Тогда
				СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.ИНН;
			ИначеЕсли docType = "snils" Тогда
				СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.СНИЛС;
			ИначеЕсли docType = "passport" Тогда
				СтруктураШтрафа.ТипДокумента = Справочники.уатВидыДокументов.Паспорт;
			ИначеЕсли docType = "doc_type_unknown" Тогда
				СтруктураШтрафа.ТипДокумента = "";
			ИначеЕсли docType = "grz" Тогда
				СтруктураШтрафа.ТипДокумента = "Государственный регистрационный знак ТС";
				
				grz = ТекСтрока.Получить("number");
			ИначеЕсли docType = "rawid" Тогда
				СтруктураШтрафа.ТипДокумента = "Идентификатор плательщика";
				
				rawid = ТекСтрока.Получить("number");
			ИначеЕсли docType = "ip" Тогда
				СтруктураШтрафа.ТипДокумента = "Исполнительное производство";
			ИначеЕсли docType = "proof_of_born" Тогда
				СтруктураШтрафа.ТипДокумента = "Свидетельство органов ЗАГС,
				|органа исполнительной власти или органа местного самоуправления о рождении гражданина";
			ИначеЕсли docType = "allower_to_temporary_live" Тогда
				СтруктураШтрафа.ТипДокумента = "Разрешение на временное проживание (для лиц без гражданства)";
			ИначеЕсли docType = "allower_to_wearing_hunter_weapon" Тогда
				СтруктураШтрафа.ТипДокумента = "Разрешение на хранение и ношение охотничьего оружия";
			ИначеЕсли docType = "army_ticket" Тогда
				СтруктураШтрафа.ТипДокумента = "Военный билет военнослужащего";
			ИначеЕсли docType = "certificate_aue" Тогда
				СтруктураШтрафа.ТипДокумента = "Справка об освобождении из мест лишения свободы";
			ИначеЕсли docType = "certificate_of_consideration" Тогда
				СтруктураШтрафа.ТипДокумента = "Свидетельство о рассмотрении ходатайства по существу";
			ИначеЕсли docType = "escaper_identy" Тогда
				СтруктураШтрафа.ТипДокумента = "Удостоверение беженца";
			ИначеЕсли docType = "hunter_ticket" Тогда
				СтруктураШтрафа.ТипДокумента = "Охотничий билет";
			ИначеЕсли docType = "international_passport" Тогда
				СтруктураШтрафа.ТипДокумента = "Паспорт гражданина Российской Федерации,
				|являющийся основным документом, удостоверяющим личность гражданина Российской Федерации за пределами территории Российской Федерации,
				|в том числе содержащий электронный носитель информации";
			ИначеЕсли docType = "migration_card" Тогда
				СтруктураШтрафа.ТипДокумента = "Миграционная карта";
			ИначеЕсли docType = "mobile_phone" Тогда
				СтруктураШтрафа.ТипДокумента = "Номер мобильного телефона";
			ИначеЕсли docType = "passport_of_aquaman" Тогда
				СтруктураШтрафа.ТипДокумента = "Паспорт моряка (удостоверение личности моряка)";
			ИначеЕсли docType = "passport_of_soilder" Тогда
				СтруктураШтрафа.ТипДокумента = "Удостоверение личности военнослужащего";
			ИначеЕсли docType = "passport_of_stranger" Тогда
				СтруктураШтрафа.ТипДокумента = "Паспорт иностранного гражданина";
			ИначеЕсли docType = "russian_identy" Тогда
				СтруктураШтрафа.ТипДокумента = "Удостоверение личности гражданина Российской Федерации";
			ИначеЕсли docType = "temporary_russian_identy" Тогда
				СтруктураШтрафа.ТипДокумента = "Временное удостоверение личности гражданина Российской Федерации";
			ИначеЕсли docType = "temporary_shelter_identy" Тогда
				СтруктураШтрафа.ТипДокумента = "Свидетельство о предоставлении временного
				|убежища на территории Российской Федерации";
			ИначеЕсли docType = "ussr_passport" Тогда
				СтруктураШтрафа.ТипДокумента = "Паспорт гражданина СССР";
			ИначеЕсли docType = "view_of_home" Тогда
				СтруктураШтрафа.ТипДокумента = "Вид на жительство";
			ИначеЕсли docType = "legal_inn" Тогда
				СтруктураШтрафа.ТипДокумента = "ИНН юр.лица в случае, когда кпп неизвестен";
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураШтрафа;
	
КонецФункции

Функция ЗаполнитьСтруктураПроездаПоЦКАД(ТекЭлемент, УчетнаяЗапись, СоответствиеТС = Неопределено) Экспорт
	
	ПоляПроезда = "ИдентификаторПроезда,ДатаОперации,ПунктОплаты,Номер,Статус,Дорога,ОплатитьДо,Сумма,
	|ЭлектронноеСредство,ТС,ИнформацияОТС";
	СтруктураПроезда = Новый Структура(ПоляПроезда);
	
	СтруктураПроезда.ИдентификаторПроезда	 = ТекЭлемент.Получить("id");
	СтруктураПроезда.ДатаОперации			 = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("date"));
	СтруктураПроезда.ПунктОплаты			 = ТекЭлемент.Получить("plaza"); 
	СтруктураПроезда.Сумма					 = ТекЭлемент.Получить("cost");
	СтруктураПроезда.Сумма					 = СтруктураПроезда.Сумма / 100;
	СтруктураПроезда.Номер					 = ТекЭлемент.Получить("ckad_id");
	СтруктураПроезда.Дорога					 = ТекЭлемент.Получить("road");
	СтруктураПроезда.ОплатитьДо				 = ПреобразоватьДатуИзСтроки(ТекЭлемент.Получить("due_at"));
	
	СтатусОплаты = ТекЭлемент.Получить("status");
	Попытка
		СтруктураПроезда.Статус = Перечисления.уатСтатусыПлатежейПроездовПоЦКАД[СтатусОплаты];
	Исключение
	КонецПопытки;

	// Определим ТС
	ДанныеТС = ТекЭлемент.Получить("best_match_car");
	Если ДанныеТС <> Неопределено Тогда
		СтруктураДанныхТС = Новый Структура();
		СтруктураДанныхТС.Вставить("id",   ДанныеТС.Получить("id"));
		СтруктураДанныхТС.Вставить("name", ДанныеТС.Получить("name")); // Название машины
		СтруктураДанныхТС.Вставить("sts",  ДанныеТС.Получить("sts")); // СТС машины
		СтруктураДанныхТС.Вставить("grz",  ДанныеТС.Получить("grz")); // ГРЗ машины
		
		Если СоответствиеТС <> Неопределено Тогда
			idТС = СтрЗаменить(Строка(СтруктураДанныхТС.id), Символы.НПП, "");
			СтруктураПроезда.ТС	 = СоответствиеТС.Получить(idТС);
		КонецЕсли;
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхТС); 
		СтруктураПроезда.ИнформацияОТС = ЗаписьJSON.Закрыть(); 
		
		Если ЗначениеЗаполнено(СтруктураПроезда.ТС) Тогда
			СтруктураПроезда.ЭлектронноеСредство = СтруктураПроезда.ТС.НомерБортовогоУстройстваАвтодор;
		КонецЕсли;
	Иначе
		СтруктураПроезда.ТС = ШтрафовНет_ПолучитьСопоставленнуюТС(,ТекЭлемент.Получить("grz"),,);
		Если ЗначениеЗаполнено(СтруктураПроезда.ТС) Тогда
			СтруктураПроезда.ЭлектронноеСредство = СтруктураПроезда.ТС.НомерБортовогоУстройстваАвтодор;
		КонецЕсли;
		
		СтруктураДанныхТС = Новый Структура();
		СтруктураДанныхТС.Вставить("grz", ТекЭлемент.Получить("grz"));
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанныхТС); 
		СтруктураПроезда.ИнформацияОТС = ЗаписьJSON.Закрыть();
	КонецЕсли;
	
	Возврат СтруктураПроезда;
	
КонецФункции

Процедура ОбновитьИнформациюОТСВСервисеШтрафов(УчетнаяЗапись, ТС, ИДвСистеме, ТекстОшибки = "") Экспорт
	
	уатИнформацияоТСпоДаннымСервисаШтрафов = РегистрыСведений.уатИнформацияоТСпоДаннымСервисаШтрафов.СоздатьНаборЗаписей();
	уатИнформацияоТСпоДаннымСервисаШтрафов.Отбор.ТС.Установить(ТС);
	уатИнформацияоТСпоДаннымСервисаШтрафов.Прочитать();
	
	Если уатИнформацияоТСпоДаннымСервисаШтрафов.Количество() <> 0 Тогда
		уатИнформацияоТСпоДаннымСервисаШтрафов.Очистить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИДвСистеме) Тогда
		Возврат;
	КонецЕсли;

	ТекстОшибки  = "";
	
	ИнформацияОТС = ШтрафовНет_ИнформацияОТС(УчетнаяЗапись, ИДвСистеме, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось обновить информацию о ТС ""%1"" по данным сервиса штрафов.'"), ТС)
		+ Символы.ПС + ТекстОшибки;
		Возврат;
	КОнецЕсли;

	Если УчетнаяЗапись.Версия = Перечисления.уатВерсииШтрафовНет.ШтрафовНет_3 Тогда
		
		СтатистикаПоШтрафам = ШтрафовНет_СтатистикаПоШтрафам(УчетнаяЗапись, ИДвСистеме, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось обновить информацию о ТС ""%1"" по данным сервиса штрафов.'"), ТС)
			+ Символы.ПС + ТекстОшибки;
			Возврат;
		КОнецЕсли;
		
		НоваяЗапись = уатИнформацияоТСпоДаннымСервисаШтрафов.Добавить();
		НоваяЗапись.ТС							 = ТС;
		НоваяЗапись.Статус						 = УстановитьСтатусШтрафа(ИнформацияОТС.Получить("status"));
		НоваяЗапись.ПричинаНеактивности			 = ИнформацияОТС.Получить("inactive_reason");
		НоваяЗапись.ДатаПоследнейПроверкивГИС	 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("updated_at"));
		НоваяЗапись.ДатаПоследнейПроверкивГИБДД	 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("gibddScannedAt"));
		НоваяЗапись.ДатаПоследнейПроверкивДИТ	 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("ditScannedAt"));
		НоваяЗапись.ДатаДобавленияТС			 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("created_at"));
		НоваяЗапись.IDАвтопарка					 = ИнформацияОТС.Получить("unit_id");

		КоличествоШтрафов			 = СтатистикаПоШтрафам.Получить("count");
		
		НоваяЗапись.КоличествоШтрафов			 = КоличествоШтрафов.Получить("other");
		
		СуммаЗадолженности			 = СтатистикаПоШтрафам.Получить("sum");

		НоваяЗапись.СуммаЗадолженности			 = СуммаЗадолженности.Получить("other");

	Иначе	
		НоваяЗапись = уатИнформацияоТСпоДаннымСервисаШтрафов.Добавить();
		НоваяЗапись.ТС							 = ТС;
		НоваяЗапись.Статус						 = УстановитьСтатусШтрафа(ИнформацияОТС.Получить("status"));
		НоваяЗапись.ПричинаНеактивности			 = ИнформацияОТС.Получить("inactiveReason");
		НоваяЗапись.ДатаПоследнейПроверкивГИС	 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("gisScannedAt"));
		НоваяЗапись.ДатаПоследнейПроверкивГИБДД	 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("gibddScannedAt"));
		НоваяЗапись.ДатаПоследнейПроверкивДИТ	 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("ditScannedAt"));
		НоваяЗапись.ДатаДобавленияТС			 = ПреобразоватьДатуИзСтроки(ИнформацияОТС.Получить("createdAt"));
		НоваяЗапись.КоличествоШтрафов			 = ИнформацияОТС.Получить("finesCount");
		НоваяЗапись.СуммаЗадолженности			 = ИнформацияОТС.Получить("finesAmount");
		НоваяЗапись.IDАвтопарка					 = ИнформацияОТС.Получить("unitId");
	КонецЕсли;
	
	СписокАвтопарков = уатИнтеграции_проф.ШтрафовНет_СписокАвтопарков(УчетнаяЗапись, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		МассивАвтопарков = СписокАвтопарков.Получить("units");
		Если ТипЗнч(МассивАвтопарков) = Тип("Массив") Тогда
			Для Каждого ТекАвтосервис Из МассивАвтопарков Цикл
				Если НоваяЗапись.IDАвтопарка = ТекАвтосервис.Получить("id") Тогда
					НоваяЗапись.Автопарк = ТекАвтосервис.Получить("name");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Попытка
		уатИнформацияоТСпоДаннымСервисаШтрафов.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьРасширениеФайла(Знач ИмяФайла)
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции

Функция ШтрафовНет_ПолучитьСопоставленнуюТС(ИДвСервисеШтрафов = "", ГосударственныйНомер = "", СТС = "", Наименование = "") Экспорт
	
	ТекТС  = Неопределено;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СТС", СТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов,
	               |	МАКСИМУМ(уатРегистрационныеДокументы.Серия + "" "" + уатРегистрационныеДокументы.Номер) КАК Номер
	               |ПОМЕСТИТЬ втСТС
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)
	               |	И уатРегистрационныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	               |	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаОкончания >= &ТекДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаВыдачи <= &ТекДата
	               |		КОНЕЦ
	               |	И уатРегистрационныеДокументы.Номер = &СТС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатРегистрационныеДокументы.ВладелецДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	100 КАК Приоритет
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Наименование = &Наименование";
	
	Если ЗначениеЗаполнено(ГосударственныйНомер) Тогда
	Запрос.УстановитьПараметр("ГосударственныйНомер", ГосударственныйНомер);
	Запрос.Текст = Запрос.Текст + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	2 КАК Приоритет
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ГосударственныйНомер = &ГосударственныйНомер
	               |	И &ГосударственныйНомер <> """"";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СТС) Тогда
		Запрос.УстановитьПараметр("СТС", СТС);
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатТС.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	втСТС КАК втСТС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
		|		ПО втСТС.ВладелецДокументов = уатТС.Ссылка";
	КонецЕсли;

	Если ЗначениеЗаполнено(ИДвСервисеШтрафов) Тогда
		Запрос.УстановитьПараметр("ИДвСервисеШтрафов", ИДвСервисеШтрафов);
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатТС.Ссылка КАК Ссылка,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.ИДвСервисеШтрафов = &ИДвСервисеШтрафов";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекТС = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ТекТС;
	
КонецФункции

#КонецОбласти

#Область Паркоматика

Функция ЗаполнитьСоответствиеТСвСервисеПарковок(УчетнаяЗаписиСервисаПарковок, МассивIDТС, ТекстОшибки) Экспорт
	
	СоответствиеТС = Новый Соответствие();
	Если ТипЗнч(МассивIDТС) <> Тип("Массив") Тогда
		МассивIDТС = Новый Массив();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УчетнаяЗаписиСервисаПарковок", УчетнаяЗаписиСервисаПарковок);
	Запрос.Текст = "ВЫБРАТЬ
	|	уатТС.ИДвСервисеПарковок КАК ИДвСервисеПарковок,
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.ИДвСервисеПарковок <> """"
	|	И уатТС.УчетнаяЗаписьCервисаПарковок = &УчетнаяЗаписиСервисаПарковок
	|	И НЕ уатТС.ПометкаУдаления";
	
	Выборка  = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивIDТС.Добавить(Выборка.ИДвСервисеПарковок);
		СоответствиеТС.Вставить(Выборка.ИДвСервисеПарковок, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеТС;
	
КонецФункции

Функция ЗаполнитьСтруктураПарковки(ТекЭлемент, УчетнаяЗаписьСервисаПарковок, СоответствиеТС = Неопределено) Экспорт
	
	СтруктураПаковки = Новый Структура("IDПарковки,Организация,Ответственный,Подразделение,ТС,ПарковочнаяЗона,Паркотрон,
	|Инициатор,Водитель,Статус,Запущена,Завершена,КаналЗавершения,СтоимостьСессииКомиссия,СтоимостьСессииБезКомиссии,
	|ИтоговаяСтоимость,Создана,Колонна,Комментарий,КоординатыЗоны,ВалютаДокумента");
	
	СтруктураПаковки.IDПарковки							 = СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("id")), " ", ""), Символы.НПП, "");
	СтруктураПаковки.Организация						 = УчетнаяЗаписьСервисаПарковок.Организация;
	СтруктураПаковки.Ответственный						 = УчетнаяЗаписьСервисаПарковок.Ответственный;
	СтруктураПаковки.Подразделение						 = УчетнаяЗаписьСервисаПарковок.Подразделение;
	СтруктураПаковки.Статус								 = ?(ТекЭлемент.Получить("status") = "closed", Перечисления.уатСтатусыПарковок.Завершена,
	Перечисления.уатСтатусыПарковок.Активна);
	
	СтоимостьСессииКомиссия = ТекЭлемент.Получить("price").Получить("sum");
	Если ЗначениеЗаполнено(СтоимостьСессииКомиссия) Тогда
		СтруктураПаковки.СтоимостьСессииКомиссия		 = СтоимостьСессииКомиссия/100;
	Иначе
		СтруктураПаковки.СтоимостьСессииКомиссия		 = 0;
	КонецЕсли;
	СтоимостьСессииБезКомиссии = ТекЭлемент.Получить("price").Получить("origin_sum");
	Если ЗначениеЗаполнено(СтоимостьСессииБезКомиссии) Тогда
		СтруктураПаковки.СтоимостьСессииБезКомиссии      = СтоимостьСессииБезКомиссии/100;
	Иначе
		СтруктураПаковки.СтоимостьСессииБезКомиссии      = 0;
	КонецЕсли;
	СтруктураПаковки.ИтоговаяСтоимость					 = СтруктураПаковки.СтоимостьСессииКомиссия;

	Если СоответствиеТС <> Неопределено Тогда
		СтруктураПаковки.ТС								 = СоответствиеТС.Получить(СтрЗаменить(СтрЗаменить(Строка(ТекЭлемент.Получить("car").Получить("id")), " ", ""), Символы.НПП, ""));
	КонецЕсли;
	
	ПарковочнаяЗона = ТекЭлемент.Получить("zone");
	СтруктураПаковки.ПарковочнаяЗона					 = ПарковочнаяЗона.Получить("number") + " (" + ПарковочнаяЗона.Получить("address") + ")";
	
	СтруктураПаковки.Паркотрон							 = "(не задано)";
	Запущена = TimestampВДату(ТекЭлемент.Получить("startedAt"));
	Если ЗначениеЗаполнено(Запущена) Тогда
		СтруктураПаковки.Запущена      = ПеревестиВМестноеВремя(Запущена);
	Иначе
		СтруктураПаковки.Запущена      = Запущена;
	КонецЕсли;
	
	Завершена = TimestampВДату(ТекЭлемент.Получить("finishedAt"));
	Если ЗначениеЗаполнено(Завершена) Тогда
		СтруктураПаковки.Завершена      = ПеревестиВМестноеВремя(Завершена);
	Иначе
		СтруктураПаковки.Завершена      = Завершена;
	КонецЕсли;
	Создана = TimestampВДату(ТекЭлемент.Получить("startedAt"));
	Если ЗначениеЗаполнено(Создана) Тогда
		СтруктураПаковки.Создана      = ПеревестиВМестноеВремя(Создана);
	Иначе
		СтруктураПаковки.Создана      = Создана;
	КонецЕсли;
	
	КаналЗавершения										 = ТекЭлемент.Получить("finishType");
	Если КаналЗавершения = "mobile-app" Тогда
		СтруктураПаковки.КаналЗавершения = Перечисления.уатМетодыЗавершенияПарковочнойСессии.МобильноеПриложение;
	ИначеЕсли КаналЗавершения = "api" Тогда
		СтруктураПаковки.КаналЗавершения = Перечисления.уатМетодыЗавершенияПарковочнойСессии.API;
	ИначеЕсли КаналЗавершения = "manual" Тогда
		СтруктураПаковки.КаналЗавершения = Перечисления.уатМетодыЗавершенияПарковочнойСессии.Вручную;
	ИначеЕсли КаналЗавершения = "expired_duration" Тогда
		СтруктураПаковки.КаналЗавершения = Перечисления.уатМетодыЗавершенияПарковочнойСессии.ИстечениеСрокаСессии;
	КонецЕсли;
	СтруктураПаковки.Инициатор							 = ТекЭлемент.Получить("user").Получить("phoneNum");
	СтруктураПаковки.КоординатыЗоны						 = ПарковочнаяЗона.Получить("location");

	ВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураПаковки.ВалютаДокумента = ВалютаРегламентированногоУчета;

	Возврат СтруктураПаковки;
	
КонецФункции

Функция TimestampВДату(ДатаТС)
	Попытка
		Возврат Дата("19700101")+?(ТипЗнч(ДатаТС) = Тип("Строка"), Число(ДатаТС), ДатаТС);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ПеревестиВМестноеВремя(ТекущееУниверсальноеВремя)
	Если ЗначениеЗаполнено(ТекущееУниверсальноеВремя) Тогда
		Возврат МестноеВремя(ТекущееУниверсальноеВремя, ЧасовойПояс());
	Иначе
		Возврат '00010101';
	КонецЕсли;
КонецФункции

// Процедура создает документ Парковка.
//
Процедура СоздатьПарковку(ТекПарковка) Экспорт
	
	ЭтоНовый = Ложь;
	Запрос   = Новый Запрос();
	Запрос.УстановитьПараметр("IDПарковки", ТекПарковка.IDПарковки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПарковка.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.уатПарковка КАК уатПарковка
	               |ГДЕ
	               |	уатПарковка.IDПарковки = &IDПарковки
	               |	И НЕ уатПарковка.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НовыйДокумент = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекПарковка,,"ТС, Водитель, Организация");
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Водитель) Тогда
			НовыйДокумент.Водитель = ТекПарковка.Водитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйДокумент.Запущена) Тогда //из ПЛ
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Документы.уатШтраф.ВодительТСпоПЛ(НовыйДокумент.ТС, НовыйДокумент.Запущена));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Организация) Тогда
			МестонахождениеТС  = уатОбщегоНазначения.МестонахождениеТС(ТекПарковка.ТС, НовыйДокумент.Дата);
			НовыйДокумент.Колонна = МестонахождениеТС.Колонна;
			Если ЗначениеЗаполнено(МестонахождениеТС.Организация) Тогда
				НовыйДокумент.Организация   = МестонахождениеТС.Организация;
				НовыйДокумент.Подразделение = МестонахождениеТС.Подразделение;
			Иначе
				НовыйДокумент.Организация   = ТекПарковка.Организация;
				НовыйДокумент.Подразделение = ТекПарковка.Подразделение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ТекПарковка.ТС) Тогда
			Возврат;
		КонецЕсли;

		НовыйДокумент      = Документы.уатПарковка.СоздатьДокумент();
		НовыйДокумент.Дата = Текущаядата();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекПарковка);
		
		МестонахождениеТС  = уатОбщегоНазначения.МестонахождениеТС(ТекПарковка.ТС, НовыйДокумент.Дата);
		НовыйДокумент.Колонна = МестонахождениеТС.Колонна;
		Если ЗначениеЗаполнено(МестонахождениеТС.Организация) Тогда
			НовыйДокумент.Организация   = МестонахождениеТС.Организация;
			НовыйДокумент.Подразделение = МестонахождениеТС.Подразделение;
		КонецЕсли;
		
		МестонахождениеТС  = уатОбщегоНазначения.МестонахождениеТС(ТекПарковка.ТС, НовыйДокумент.Дата);
		НовыйДокумент.Колонна = МестонахождениеТС.Колонна;
		Если ЗначениеЗаполнено(МестонахождениеТС.Организация) Тогда
			НовыйДокумент.Организация   = МестонахождениеТС.Организация;
			НовыйДокумент.Подразделение = МестонахождениеТС.Подразделение;
		КонецЕсли;
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйДокумент.Водитель) Тогда
		
		Если ЗначениеЗаполнено(НовыйДокумент.Запущена) Тогда //из ПЛ
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Документы.уатШтраф.ВодительТСпоПЛ(НовыйДокумент.ТС, НовыйДокумент.Запущена));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Водитель) Тогда
			ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(НовыйДокумент.ТС, НовыйДокумент.Запущена);
			ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
			Если ЭкипажТССписок_Количество = 1 Тогда
				НовыйДокумент.Водитель = ЭкипажТССписок[0].Значение;
			КонецЕсли;
		Конецесли;
	ИначеЕсли НЕ ЗначениеЗаполнено(НовыйДокумент.ДокументОснование) 
		И ЗначениеЗаполнено(НовыйДокумент.ДатаНарушения) Тогда
		НовыйДокумент.ДокументОснование = Документы.уатШтраф.ВодительТСпоПЛ(НовыйДокумент.ТС, НовыйДокумент.Запущена).ДокументОснование;
	КонецЕсли;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Функция получает TimeStamp переданной даты
//
//   ИсходнаяДата - Дата 1С
//   TimeZone     - текущий часовой пояс
//
Функция ПолучитьTimestamp(ИсходнаяДата, TimeZone=3)
	
	Timestamp = ИсходнаяДата - Дата('19700101');
	Timestamp = Timestamp - TimeZone*3600; 
	Timestamp = Формат(Timestamp, "ЧГ=0");
	
	Возврат Timestamp;
	
КонецФункции

#КонецОбласти

#Область DaData

Процедура ПрочитатьКонтактнуюИнформациюПоДаннымDaData(КонтактнаяИнформация, ДанныеDaData, ПредставлениеАдреса)
	
	КонтактнаяИнформация.AddressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
	
	СоответствиеПолей = Новый Соответствие();
	СоответствиеПолей.Вставить("result",                         "value"); // Представление
	СоответствиеПолей.Вставить("country",                        "country");
	СоответствиеПолей.Вставить("postal_code",                    "ZIPCode");
	СоответствиеПолей.Вставить("oktmo",                          "oktmo");
	СоответствиеПолей.Вставить("okato",                          "okato");
	СоответствиеПолей.Вставить("region",                         "area");
	СоответствиеПолей.Вставить("region_type",                    "areaType");
	СоответствиеПолей.Вставить("region_fias_id",                 "areaID"); // Проверить, что это то же самое, и сделать для остальных полей адреса
	
	СоответствиеПолей.Вставить("region_iso_code",                "areaCode"); // проверить, что это то же самое
	СоответствиеПолей.Вставить("area",                           "district");
	СоответствиеПолей.Вставить("area_type",                      "districtType");
	СоответствиеПолей.Вставить("city",                           "city");
	СоответствиеПолей.Вставить("city_type",                      "cityType");
	СоответствиеПолей.Вставить("city_district",                  "munDistrict"); // проверить, что это то же самое, и не перепутано с полем 1С "cityDistrict"
	СоответствиеПолей.Вставить("city_district_type",             "munDistrictType");
	СоответствиеПолей.Вставить("street",                         "street");
	СоответствиеПолей.Вставить("street_type",                    "streetType");
	//СоответствиеПолей.Вставить("Представление",                  "value");
	//СоответствиеПолей.Вставить("Комментарий",                    "comment");
	
	СоответствиеПолей.Вставить("settlement",                "locality"); // проверить, что это то же самое, и не перепутано с полем 1С "settlement"
	СоответствиеПолей.Вставить("settlement_type",      "localityType");  // проверить, что это то же самое
	
	//СоответствиеПолей.Вставить("Поселение",                      "settlement");
	//СоответствиеПолей.Вставить("ПоселениеСокращение",            "settlementType");
	//СоответствиеПолей.Вставить("ВнутригородскойРайон",           "cityDistrict");
	//СоответствиеПолей.Вставить("ВнутригородскойРайонСокращение", "cityDistrictType");
	//СоответствиеПолей.Вставить("Территория",                     "territory");
	//СоответствиеПолей.Вставить("ТерриторияСокращение",           "territoryType");
	СоответствиеПолей.Вставить("fias_id",  "id");
	СоответствиеПолей.Вставить("house_fias_id",              "houseId");
	СоответствиеПолей.Вставить("house",                            "houseNumber");
	СоответствиеПолей.Вставить("house_type_full",                        "houseType");
	
	СоответствиеПолей.Вставить("tax_office", "IFNSFLCode");
	СоответствиеПолей.Вставить("tax_office_legal", "КодИФНСЮЛ");
	СоответствиеПолей.Вставить("kladr_id", "CodeKLADR");
	
	Для каждого ПолеКонтактнойИнформации Из ДанныеDaData Цикл
		ИмяПоля = СоответствиеПолей.Получить(ПолеКонтактнойИнформации.Ключ);
		Если ИмяПоля <> Неопределено 
			И ПолеКонтактнойИнформации.Значение <> Неопределено 
			И КонтактнаяИнформация.Свойство(ИмяПоля) Тогда
			КонтактнаяИнформация[ИмяПоля] = ПолеКонтактнойИнформации.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеDaData.block) Тогда
		КонтактнаяИнформация.Buildings.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(ДанныеDaData.block_type_full, ДанныеDaData.block));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеDaData.flat) Тогда
		КонтактнаяИнформация.Apartments.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(ДанныеDaData.flat_type_full, ДанныеDaData.flat));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформация.value) Тогда
		КонтактнаяИнформация.value = ПредставлениеАдреса;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

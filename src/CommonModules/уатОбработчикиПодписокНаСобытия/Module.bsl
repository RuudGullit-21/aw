///////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура вызывает обработчик, устанавливающий префикс номера документа 
// в зависимости от организации
//  Парам.
//  СтандартнаяОбработка - использование стандартной обработки
//  Источник - источник события
//  Префикс - префикс организации
Процедура уатПриУстановкеНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксОрганизации(Источник, Префикс);
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

// Процедура вызывает обработчик, устанавливающий префикс кода справочника
//  Парам.
//  СтандартнаяОбработка - использование стандартной обработки
//  Источник - источник события
//  Префикс - префикс организации  
Процедура уатПриУстановкеНовогоКодаСправочникаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

// Проверка прав перед записью документа УАТ
//
Процедура ПередЗаписьюДокументаПроверкаПрав(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если РежимПроведения = Неопределено Тогда
	//	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	//КонецЕсли;
	
	// проверка прав
	уатОбщегоНазначенияСервер.ПроверкаПравПередЗаписьюВДокументах(Источник, Отказ);
КонецПроцедуры

// Проверка прав перед записью справочника УАТ
//
Процедура ПередЗаписьюСправочникаПроверкаПрав(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// проверка прав
	уатОбщегоНазначенияСервер.ПроверкаПравПередЗаписьюВСправочниках(Источник, Отказ);
КонецПроцедуры

// Вызов данное процедуры происходит перед записью элемента типовых справочников
// Когда необходимо выполнить какие-либо проверки на возможность записи.
//
// Параметры:
//  Источник     - справочник объект - записываемый договор
//  Отказ        - признак отказа от записи.
//
Процедура уатПередЗаписьюЭлементаТиповыхСправочников(Источник,Отказ) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Вызов данное процедуры происходит перед записью элемента типовых справочников
// Когда необходимо выполнить какие-либо проверки на возможность записи.
//
// Параметры:
//  Источник     - справочник объект - записываемый договор
//  Отказ        - признак отказа от записи.
//
Процедура уатПриЗаписиЭлементаТиповыхСправочников(Источник,Отказ) Экспорт
	
	Заглушка = Истина;
	
	// В этой процедуре ранее размещалась установка прав и настроек 
	// для разрешения новому пользователю работы с программой и подсистемой экспедирования
	// в текущей версии используются настройки, подставляемые по умолчанию

КонецПроцедуры

// Проверяет корректность префикса номера документа по организации
// Источником подписки должен быть документ, в котором есть реквизит Организация
//
Процедура ПроверитьНомерОбъектаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные())
		И Источник.Ссылка.Организация.Префикс <> Источник.Организация.Префикс
		ИЛИ НЕ ПрефиксацияОбъектовСлужебный.ДатыОбъектаОдногоПериода(Источник.Ссылка.Дата, Источник.Дата, Источник.Ссылка) Тогда
		Источник.Номер = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет автоматическое создание напоминаний пользователю при создании задач по бизнес-процессу "уатСогласование"
//
Процедура уатСозданиеНапоминанийПоСогласованиямПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьНапоминанияПользователя.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.уатСогласование") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Источник.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НапоминанияПользователя.Источник
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Источник = &Источник";
	
	Если мЗапрос.Выполнить().Пустой() Тогда 
		МенЗап = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		МенЗап.Пользователь    						= Источник.Исполнитель;
		МенЗап.ВремяСобытия    						= Источник.СрокИсполнения;
		МенЗап.Источник        						= Источник.Ссылка;
		МенЗап.СрокНапоминания 						= ТекущаяДата();
		МенЗап.Описание        						= Источник.Наименование;
		МенЗап.ИнтервалВремениНапоминания			= 0;
		МенЗап.СпособУстановкиВремениНапоминания 	= Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		МенЗап.ВремяСобытия 						= МенЗап.СрокНапоминания ;
		МенЗап.ПредставлениеИсточника            	= ОбщегоНазначения.ПредметСтрокой(Источник.Ссылка);
		МенЗап.Записать(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатПриИзмененииИспользованияБизнесПроцессовИЗадач"
//
Процедура уатПриИзмененииИспользованияБизнесПроцессовИЗадач(Источник, Отказ) Экспорт
	
	Если Не Источник.Значение Тогда 
		Константы.уатИспользоватьСогласованиеДокументов.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатУстановитьИспользованиеПодсистемыCRM"
//
Процедура уатУстановитьИспользованиеПодсистемыCRMПриЗаписи(Источник, Отказ) Экспорт
	
	ИспользованиеCRM = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТекТип Из Метаданные.ПодпискиНаСобытия.уатУстановитьИспользованиеПодсистемыCRM.Источник.Типы() Цикл 
		МенеджерКонстанты = Новый(ТекТип);
		МенеджерКонстанты.Прочитать();
		
		Если МенеджерКонстанты.Значение Тогда 
			ИспользованиеCRM = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Константы.уатИспользоватьCRM.Установить(ИспользованиеCRM);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатОбработкаПроведенияДокументаОбновитьПланыРемонтныхРабот"
//
Процедура ОбработкаПроведенияДокументаОбновитьПланыРемонтныхРабот(Источник, Отказ, РежимПроведения) Экспорт
	
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТранспортныеСредства = Новый Массив();
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		ТранспортныеСредства.Добавить(Источник.ТранспортноеСредство);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатРемонтныйЛист") Тогда
		ТранспортныеСредства.Добавить(Источник.ТС);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатВводВЭксплуатациюТСиОборудования") Тогда
		Для Каждого ТекСтрока Из Источник.ТС Цикл
			ТранспортныеСредства.Добавить(ТекСтрока.ТС);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.уатВводНачальныхПоказаний") Тогда
		Для Каждого ТекСтрока Из Источник.Спидометр Цикл
			ТранспортныеСредства.Добавить(ТекСтрока.ТС);
		КонецЦикла;
		Для Каждого ТекСтрока Из Источник.ИсторияПрохожденияТО Цикл
			ТранспортныеСредства.Добавить(ТекСтрока.ТС);
		КонецЦикла;
	КонецЕсли;
	
	уатОбщегоНазначения.ОбновитьПланыРемонтныхРабот(ТранспортныеСредства);

КонецПроцедуры

// Процедура обработчик подписки на событие "уатОбработкаПолученияФормыОтчета"
//
Процедура уатОбработкаПолученияФормыОтчета(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ИмяОтчета") Тогда
		ИмяКлючевойОперации = "уатОтчеты." + Параметры.ИмяОтчета;
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик подписки на событие "уатОбработкаСобытийПоПеревозке"
//
Процедура уатОбработкаСобытийПоПеревозке(Источник, Отказ) Экспорт
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Источник",    Источник.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСобытияПоПеревозке_уэ.ТипСобытия КАК ТипСобытия,
	               |	уатСобытияПоПеревозке_уэ.ДокументПеревозки КАК ДокументПеревозки,
	               |	уатСобытияПоПеревозке_уэ.Событие КАК Событие,
	               |	уатСобытияПоПеревозке_уэ.ДатаПлан КАК ДатаПлан,
	               |	уатСобытияПоПеревозке_уэ.Сформировано КАК Сформировано,
	               |	уатСобытияПоПеревозке_уэ.Выполнено КАК Выполнено,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.Встреча)
	               |			ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОкончания
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЗапланированноеВзаимодействие)
	               |					ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.СообщениеSMS)
	               |							ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаКогдаОтправить
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ТелефонныйЗвонок)
	               |									ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата
	               |								ИНАЧЕ ВЫБОР
	               |										КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	               |											ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОтправления
	               |										ИНАЧЕ ВЫБОР
	               |												КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(БизнесПроцесс.Задание)
	               |													ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаЗавершения
	               |												ИНАЧЕ &ТекущаяДата
	               |											КОНЕЦ
	               |									КОНЕЦ
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ДатаФакт
	               |ИЗ
	               |	РегистрСведений.уатСобытияПоПеревозке_уэ КАК уатСобытияПоПеревозке_уэ
	               |ГДЕ
	               |	уатСобытияПоПеревозке_уэ.Событие = &Источник
	               |	И уатСобытияПоПеревозке_уэ.Выполнено = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.Встреча)
	               |				ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОкончания <= &ТекущаяДата
	               |						И уатСобытияПоПеревозке_уэ.Событие.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЗапланированноеВзаимодействие)
	               |						ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата <= &ТекущаяДата
	               |								И уатСобытияПоПеревозке_уэ.Событие.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.СообщениеSMS)
	               |								ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаКогдаОтправить <= &ТекущаяДата
	               |										И уатСобытияПоПеревозке_уэ.Событие.ДатаКогдаОтправить <> ДАТАВРЕМЯ(1, 1, 1)
	               |							ИНАЧЕ ВЫБОР
	               |									КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ТелефонныйЗвонок)
	               |										ТОГДА уатСобытияПоПеревозке_уэ.Событие.Дата <= &ТекущаяДата
	               |												И уатСобытияПоПеревозке_уэ.Событие.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	               |									ИНАЧЕ ВЫБОР
	               |											КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	               |												ТОГДА уатСобытияПоПеревозке_уэ.Событие.ДатаОтправления <= &ТекущаяДата
	               |														И уатСобытияПоПеревозке_уэ.Событие.ДатаОтправления <> ДАТАВРЕМЯ(1, 1, 1)
	               |											ИНАЧЕ ВЫБОР
	               |													КОГДА ТИПЗНАЧЕНИЯ(уатСобытияПоПеревозке_уэ.Событие) = ТИП(БизнесПроцесс.Задание)
	               |														ТОГДА уатСобытияПоПеревозке_уэ.Событие.Завершен
	               |													ИНАЧЕ ЛОЖЬ
	               |												КОНЕЦ
	               |										КОНЕЦ
	               |								КОНЕЦ
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.уатСобытияПоПеревозке_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
		НаборЗаписей.Отбор.ДокументПеревозки.Установить(Выборка.ДокументПеревозки);
		НаборЗаписей.Отбор.Событие.Установить(Выборка.Событие);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НаборЗаписей[0].Выполнено = Истина;
			НаборЗаписей[0].ДатаФакт  = Выборка.ДатаФакт;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызов данное процедуры происходит при записи документа ЭПД.
//
// Параметры:
//  Источник     - Документ объект
//  Отказ        - признак отказа от записи.
//
Процедура уатПриЗаписиДокументаЭПД(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("НеПересчитывать") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка КАК Ссылка,
		               |	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК ДокументОснование
		               |ПОМЕСТИТЬ втДокументыОснования
		               |ИЗ
		               |	Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования
		               |ГДЕ
		               |	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД,
		               |	уатСвязанныеДокументыЭПД.ЗаказНаТС КАК ЗаказНаТС,
		               |	уатСвязанныеДокументыЭПД.Рейс КАК Рейс,
		               |	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК ДокументОснованиеЗаказ,
		               |	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования1.ДокументОснование КАК ДокументОснованиеРейс
		               |ИЗ
		               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования
		               |		ПО уатСвязанныеДокументыЭПД.ЭПД = ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка
		               |			И уатСвязанныеДокументыЭПД.ЗаказНаТС = ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования1
		               |		ПО уатСвязанныеДокументыЭПД.ЭПД = ЭлектроннаяТранспортнаяНакладнаяДокументыОснования1.Ссылка
		               |			И уатСвязанныеДокументыЭПД.Рейс = ЭлектроннаяТранспортнаяНакладнаяДокументыОснования1.ДокументОснование
		               |ГДЕ
		               |	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	уатСвязанныеДокументыЭПД.ЭПД,
		               |	уатСвязанныеДокументыЭПД.ЗаказНаТС,
		               |	уатСвязанныеДокументыЭПД.Рейс,
		               |	ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка),
		               |	ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)
		               |ИЗ
		               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
		               |ГДЕ
		               |	уатСвязанныеДокументыЭПД.ЭПД = &Ссылка
		               |	И НЕ уатСвязанныеДокументыЭПД.ЗаказНаТС В
		               |				(ВЫБРАТЬ
		               |					втДокументыОснования.ДокументОснование КАК ДокументОснование
		               |				ИЗ
		               |					втДокументыОснования КАК втДокументыОснования)
		               |	И НЕ уатСвязанныеДокументыЭПД.Рейс В
		               |				(ВЫБРАТЬ
		               |					втДокументыОснования.ДокументОснование КАК ДокументОснование
		               |				ИЗ
		               |					втДокументыОснования КАК втДокументыОснования)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	уатСвязанныеДокументыЭПД.ЭПД,
		               |	уатСвязанныеДокументыЭПД.ЗаказНаТС,
		               |	уатСвязанныеДокументыЭПД.Рейс,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(втДокументыОснования.ДокументОснование) = ТИП(Документ.уатЗаказГрузоотправителя)
		               |			ТОГДА втДокументыОснования.ДокументОснование
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(втДокументыОснования.ДокументОснование) = ТИП(Документ.уатПутевойЛист)
		               |				ИЛИ ТИПЗНАЧЕНИЯ(втДокументыОснования.ДокументОснование) = ТИП(Документ.уатМаршрутныйЛист)
		               |				ИЛИ ТИПЗНАЧЕНИЯ(втДокументыОснования.ДокументОснование) = ТИП(Документ.уатЗаказПеревозчику_уэ)
		               |			ТОГДА втДокументыОснования.ДокументОснование
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)
		               |	КОНЕЦ
		               |ИЗ
		               |	втДокументыОснования КАК втДокументыОснования
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
		               |		ПО втДокументыОснования.Ссылка = уатСвязанныеДокументыЭПД.ЭПД
		               |			И (втДокументыОснования.ДокументОснование = уатСвязанныеДокументыЭПД.ЗаказНаТС
		               |				ИЛИ втДокументыОснования.ДокументОснование = уатСвязанныеДокументыЭПД.Рейс)
		               |ГДЕ
		               |	уатСвязанныеДокументыЭПД.ЭПД ЕСТЬ NULL";

		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивЗаказов    = Новый Массив();
		МассивРейсов     = Новый Массив();

		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ЭПД) Тогда
				// Требуется записать в регистр
				Если ЗначениеЗаполнено(Выборка.ДокументОснованиеЗаказ) Тогда  
					МассивЗаказов.Добавить(Выборка.ДокументОснованиеЗаказ);
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.ДокументОснованиеРейс) Тогда
					МассивРейсов.Добавить(Выборка.ДокументОснованиеРейс);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ЭПД) 
				И НЕ ЗначениеЗаполнено(Выборка.ДокументОснованиеЗаказ)
				И НЕ ЗначениеЗаполнено(Выборка.ДокументОснованиеРейс) Тогда
				// Требуется удалить запись
				НаборЗаписей = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЭПД.Установить(Выборка.ЭПД); 
				НаборЗаписей.Отбор.ЗаказНаТС.Установить(Выборка.ЗаказНаТС);
				НаборЗаписей.Отбор.Рейс.Установить(Выборка.Рейс);
				НаборЗаписей.Записать();
			ИначеЕсли ЗначениеЗаполнено(Выборка.ЭПД) Тогда 

				Если (ЗначениеЗаполнено(Выборка.ЗаказНаТС)
					И НЕ ЗначениеЗаполнено(Выборка.ДокументОснованиеЗаказ)) Тогда  
					
					НаборЗаписей = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ЭПД.Установить(Выборка.ЭПД); 
					НаборЗаписей.Отбор.Рейс.Установить(Выборка.Рейс);
					НаборЗаписей.Прочитать();
					
					Для каждого Запись из НаборЗаписей Цикл
						Запись.ЗаказНаТС = Неопределено;  
					КонецЦикла;
					НаборЗаписей.Записать();
				ИначеЕсли (ЗначениеЗаполнено(Выборка.Рейс)
					И НЕ ЗначениеЗаполнено(Выборка.ДокументОснованиеРейс)) Тогда
					НаборЗаписей = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ЭПД.Установить(Выборка.ЭПД); 
					НаборЗаписей.Отбор.ЗаказНаТС.Установить(Выборка.ЗаказНаТС);
					НаборЗаписей.Прочитать();
					
					Для каждого Запись из НаборЗаписей Цикл
						Запись.Рейс = Неопределено;  
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивЗаказов.Количество() <> 0
			И МассивРейсов.Количество() <> 0 Тогда 
			Для Каждого ТекЗаказ Из МассивЗаказов Цикл
				Запрос = Новый Запрос(); 
				Запрос.УстановитьПараметр("Заказ", ТекЗаказ);
				Запрос.УстановитьПараметр("МассивРейсов", МассивРейсов);

				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	СвязанныеДокументы.Ссылка КАК Рейс,
				               |	&Заказ КАК Заказ
				               |ИЗ
				               |	КритерийОтбора.СвязанныеДокументы(&Заказ) КАК СвязанныеДокументы
				               |ГДЕ
				               |	СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
				               |	И СвязанныеДокументы.Ссылка В(&МассивРейсов)";
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
					МенеджерЗаписи.ЭПД       = Источник.Ссылка;
					МенеджерЗаписи.ЗаказНаТС = ТекЗаказ;
					МенеджерЗаписи.Записать(Истина);
					
				Иначе 
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
						МенеджерЗаписи.ЭПД       = Источник.Ссылка;
						МенеджерЗаписи.ЗаказНаТС = ТекЗаказ;
						МенеджерЗаписи.Рейс      = Выборка.Рейс;
						МенеджерЗаписи.Записать(Истина);
						
						ТекРейс = МассивРейсов.Найти(Выборка.Рейс);
						Если ТекРейс <> Неопределено Тогда
							МассивРейсов.Удалить(ТекРейс);
						Конецесли;
					КонецЦикла;
					
					Для Каждого ДокументОснование Из МассивРейсов Цикл 
						МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
						МенеджерЗаписи.ЭПД       = Источник.Ссылка;
						МенеджерЗаписи.Рейс      = ДокументОснование;
						МенеджерЗаписи.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли МассивЗаказов.Количество() <> 0 Тогда
			
			Для Каждого ДокументОснование Из МассивЗаказов Цикл 
				
				МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
				МенеджерЗаписи.ЭПД       = Источник.Ссылка;
				МенеджерЗаписи.ЗаказНаТС = ДокументОснование;
				МенеджерЗаписи.Записать(Истина);
				
			КонецЦикла;
		ИначеЕсли МассивРейсов.Количество() <> 0 Тогда
			
			Для Каждого ДокументОснование Из МассивРейсов Цикл 
				
				МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
				МенеджерЗаписи.ЭПД       = Источник.Ссылка;
				МенеджерЗаписи.Рейс      = ДокументОснование;
				МенеджерЗаписи.Записать(Истина);
				
			КонецЦикла;  
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронныйПутевойЛист") Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронныйПутевойЛистДокументыОснования.Ссылка КАК Ссылка,
		|	ЭлектронныйПутевойЛистДокументыОснования.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.ЭлектронныйПутевойЛист.ДокументыОснования КАК ЭлектронныйПутевойЛистДокументыОснования
		|ГДЕ
		|	ЭлектронныйПутевойЛистДокументыОснования.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.ЭПД       = Источник.Ссылка;
			МенеджерЗаписи.Рейс      = Выборка.ДокументОснование;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Добавление команд создания ЭПД.
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//
Процедура ДобавитьКомандуЭТрНСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭПДКоманда";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьЭТН";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Электронная транспортная накладная';
														|en = 'Electronic shipping document'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.МножественныйВыбор  = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбменЭД";
		КомандаСоздатьНаОсновании.Важность            = "СмТакже";
	КонецЕсли;
	
КонецПроцедуры

// Добавление команд создания ЭПД.
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//
Процедура ДобавитьКомандуЭПЛСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт

	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронныйПутевойЛист) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭПДКоманда";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьЭПЛ";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Электронный путевой лист';
														|en = 'Electronic waybill'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.МножественныйВыбор  = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбменЭД";
		КомандаСоздатьНаОсновании.Важность            = "СмТакже";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДобавитьОснованиеЭТрН(ЭлектроннаяТранспортнаяНакладная, Основание) Экспорт
	
	ДокументОбъект = ЭлектроннаяТранспортнаяНакладная.ПолучитьОбъект();
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура("ДокументОснование", Основание);
	Если ДокументОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = Основание;
	
	ДокументОбъект.Записать();
КонецПроцедуры

Функция ДокументооборотНастроен(Организация, Контрагент) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("Организация",  Организация);
	ПараметрыЭД.Вставить("Контрагент",   Контрагент);
	ПараметрыЭД.Вставить("ТипДокумента", ОбменСКонтрагентами.ТипыДокументов().ЭТрН);
	ПараметрыЭД.Вставить("Направление",  Перечисления.НаправленияЭДО.Исходящий);
	
	Возврат ОбменСКонтрагентами.ДокументооборотНастроен(ПараметрыЭД);
КонецФункции

Функция ПолучитьЭПД(ОбъектУчета)  Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказНаТС", ОбъектУчета);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД,
	               |	СостоянияДокументовЭДО.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД,
	               |	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Состояние УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭПД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьМассивГрузов(ТабличнаяЧасть, РеквизитыТекущейВерсииТитула, Заказчик = Неопределено) Экспорт
	
	МассивГрузов = Новый Массив();
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("ВидТары");
	МассивИменРеквизитов.Добавить("ВидТарыНаименование");
	МассивИменРеквизитов.Добавить("КодТоварнойНоменклатуры");
	МассивИменРеквизитов.Добавить("СпособУпаковки"); 
	МассивИменРеквизитов.Добавить("СсылкаЗаказчик");
	МассивИменРеквизитов.Добавить("Ширина");
	МассивИменРеквизитов.Добавить("Высота");
	МассивИменРеквизитов.Добавить("Длина");
	МассивИменРеквизитов.Добавить("ДругаяИнформация");
	МассивИменРеквизитов.Добавить("КоличествоГрузовыхМест");
	МассивИменРеквизитов.Добавить("МассаБрутто");
	МассивИменРеквизитов.Добавить("МассаНетто");
	МассивИменРеквизитов.Добавить("ОбъемГруза");
	МассивИменРеквизитов.Добавить("ОтгрузочноеНаименованиеГруза");
	МассивИменРеквизитов.Добавить("СтоимостьГруза");
	МассивИменРеквизитов.Добавить("КодВалютыСтоимости");

	МассивИменРеквизитов.Добавить("ЗаказчикИП_ИНН");
	МассивИменРеквизитов.Добавить("ЗаказчикФЛ_ИНН");
	МассивИменРеквизитов.Добавить("ЗаказчикЮЛ_ИНН");

	КлассификаторУпаковки  = Новый Соответствие();
	ЭлементыКлассификатора = ПолучитьЗначенияКлассификатораУпаковкиИзМакета();
	Для Каждого Элемент Из ЭлементыКлассификатора Цикл
		КлассификаторУпаковки.Вставить(Элемент.Код, Элемент.Наименование);
	КонецЦикла;
	
	КоличествоСтрок = КоличествоСтрокВТаблицеСтруктурыРеквизитов(РеквизитыТекущейВерсииТитула, ТабличнаяЧасть);  
	
	Для ИндексСтроки = 1 По КоличествоСтрок Цикл
		ДанныеГруз = ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, РеквизитыТекущейВерсииТитула, ТабличнаяЧасть, ИндексСтроки);
		
		ВидТарыНаименование = КлассификаторУпаковки.Получить(ДанныеГруз.ВидТары);
		ДанныеГруз.Вставить("ГрузовоеМесто", НайтиСоздатьГрузовоеМесто(ДанныеГруз.ОтгрузочноеНаименованиеГруза,
			ВидТарыНаименование, ДанныеГруз.ДругаяИнформация));
			
		Если НЕ ЗначениеЗаполнено(Заказчик) Тогда 
			Если ЗначениеЗаполнено(ДанныеГруз.ЗаказчикИП_ИНН) Тогда
				ИНН = ДанныеГруз.ЗаказчикИП_ИНН;
			ИначеЕсли ЗначениеЗаполнено(ДанныеГруз.ЗаказчикЮЛ_ИНН) Тогда 
				ИНН = ДанныеГруз.ЗаказчикЮЛ_ИНН;  
			Иначе
				ИНН = ДанныеГруз.ЗаказчикФЛ_ИНН; 
			КонецЕсли;

			Заказчик = НайтиКонтрагента(ИНН);
		КонецЕсли;
		МассивГрузов.Добавить(ДанныеГруз);
	КонецЦикла;
	
	Возврат МассивГрузов;
	
КонецФункции

Функция ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяРеквизита, ИмяТаблицы = "", НомерСтроки = "") Экспорт

	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Ключ = ИмяРеквизита; 
	ИначеЕсли  НомерСтроки = "" Тогда
		Шаблон = "%1%2"; 
		Ключ = СтрШаблон(Шаблон, ИмяТаблицы, ИмяРеквизита);
	Иначе
		Шаблон = "%1__%2__%3"; 
		Ключ = СтрШаблон(Шаблон, ИмяТаблицы, НомерСтроки, ИмяРеквизита);
	КонецЕсли;
	
	Если СтрНайти(Ключ, ".") > 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если СтруктураСРеквизитами.Свойство(Ключ) Тогда
		Возврат СтруктураСРеквизитами[Ключ];
	Иначе
		Возврат Неопределено;	  
	КонецЕсли;

КонецФункции

Процедура ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(СтруктураСРеквизитами) Экспорт
	
	Если СтруктураСРеквизитами = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТаблицИЧислаСтрок = Новый Структура;
	
	Для Каждого КлючЗначение Из СтруктураСРеквизитами Цикл
		
		МассивЧастей = ОбменСГИСЭПДКлиентСервер.РазделитьСтрокуСоСложнымРазделителем(КлючЗначение.Ключ, "__");
		Если МассивЧастей.Количество() = 1 Тогда
			Продолжить;	
		КонецЕсли;
		
		ИмяТаблицы = МассивЧастей[0];
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			Продолжить;	
		КонецЕсли;	
		
		ЧислоСтрок = Число(МассивЧастей[1]);
		
		Если СоответствиеТаблицИЧислаСтрок.Свойство(ИмяТаблицы) Тогда
			Если ЧислоСтрок > СоответствиеТаблицИЧислаСтрок[ИмяТаблицы] Тогда
				СоответствиеТаблицИЧислаСтрок[ИмяТаблицы] = ЧислоСтрок;
			КонецЕсли;
		Иначе			
			СоответствиеТаблицИЧислаСтрок.Вставить(ИмяТаблицы, ЧислоСтрок);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураСРеквизитами = Новый Структура(СтруктураСРеквизитами);
	СтруктураСРеквизитами.Вставить("СоответствиеТаблицИЧислаСтрок", СоответствиеТаблицИЧислаСтрок);
	
КонецПроцедуры

// Дополняет структуру приемник полями структуры источника
//
// Параметры:
// 		СтруктураПриемник - Структура - Структура, в которую необходимо скопировать поля
// 		СтруктураИсточник - Структура - Структура, из которой необходимо скопировать поля
// 		КопироватьЗначения - Булево - Истина, если надо копировать значения.
//
Процедура ДополнитьСтруктуру(СтруктураПриемник, СтруктураИсточник, КопироватьЗначения=Ложь) Экспорт
	
	Для Каждого Элемент Из СтруктураИсточник Цикл
		СтруктураПриемник.Вставить(Элемент.Ключ, ?(КопироватьЗначения, Элемент.Значение, Неопределено));
	КонецЦикла;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейсЭТН

Процедура ДобавитьДокументОснование(ТранспортнаяНакладная, ДокументОснованиеСсылка) Экспорт
	
	Если ДокументОснованиеСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТранспортнаяНакладная) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")
		ИЛИ ТипЗнч(ТранспортнаяНакладная) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		ТранспортнаяНакладнаяОбъект = ТранспортнаяНакладная.ПолучитьОбъект();
	Иначе
		ТранспортнаяНакладнаяОбъект = ТранспортнаяНакладная;
		
	КонецЕсли;
	НайденныйДокумент = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Найти(ДокументОснованиеСсылка, "ДокументОснование");
	Если НайденныйДокумент = Неопределено Тогда
		НоваяСтрокаОснований = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Добавить();
		НоваяСтрокаОснований.ДокументОснование = ДокументОснованиеСсылка;
	КонецЕсли;
	Если ТипЗнч(ТранспортнаяНакладная) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")
		ИЛИ ТипЗнч(ТранспортнаяНакладная) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		ТранспортнаяНакладнаяОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвязанныеРейсы(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеДокументы.Ссылка КАК МаршрутныйЛист,
		|	&Ссылка КАК Заказ
		|ПОМЕСТИТЬ втМЛЗаказ
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЗакрытиеЗаказовНаТСПутевымиЛистами
		|				ТОГДА ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.уатПутевойЛист)
		|			ИНАЧЕ ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.уатМаршрутныйЛист)
		|				ИЛИ ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.уатЗаказПеревозчику_уэ)
		|		КОНЕЦ
		|	И СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМЛЗаказ.Заказ КАК Заказ,
		|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, ЛОЖЬ) КАК FTL,
		|	втМЛЗаказ.МаршрутныйЛист КАК МаршрутныйЛист
		|ИЗ
		|	втМЛЗаказ КАК втМЛЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|		ПО втМЛЗаказ.Заказ = уатЗаказГрузоотправителя.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);   
		
		ЗакрытиеЗаказовНаТСПутевымиЛистами = Константы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Получить();
		Запрос.УстановитьПараметр("ЗакрытиеЗаказовНаТСПутевымиЛистами", ЗакрытиеЗаказовНаТСПутевымиЛистами);
		
		Результат       = Запрос.Выполнить();
		тзРейсыИЗаказы  = Результат.Выгрузить();
		КоличествоСтрок = тзРейсыИЗаказы.Количество(); 
		
		СтруктураРезультат = Новый Структура();
		Если Ссылка.FTL Тогда
			// Создаются отдельные ТТД на грузы с разными пунктами отправления / назначения
			ЗапросFTL = Новый Запрос;
			ЗапросFTL.Текст = ГрузыFTLЗаказовТекстЗапроса();
			ЗапросFTL.УстановитьПараметр("ЗаказСсылка", Ссылка);
			РезультатЗапроса = ЗапросFTL.Выполнить(); 
			МассивРейсов = Новый Массив();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТаблицаГрузов = РезультатЗапроса.Выгрузить();
				Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
					СтруктураРейса = Новый Структура("Заказ,МаршрутныйЛист,Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
					|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма");
					ЗаполнитьЗначенияСвойств(СтруктураРейса, ТекСтрока);
					Если КоличествоСтрок = 0 Тогда
						СтруктураРейса.МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПустаяСсылка();
					ИначеЕсли КоличествоСтрок = 1 Тогда
						Рейс = тзРейсыИЗаказы[0].МаршрутныйЛист;
						Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
							Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
								СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Номенклатура, Пункт",
								ТекСтрока.Заказ, ТекСтрока.Груз, ТекСтрока.ПунктОтправления));
							Иначе
								СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Пункт",
								ТекСтрока.Заказ, ТекСтрока.ПунктОтправления));
							КонецЕсли;
							Если СтрокиРейса.Количество() <> 0 Тогда
								СтруктураРейса.МаршрутныйЛист = тзРейсыИЗаказы[0].МаршрутныйЛист;
							Иначе
								СтруктураРейса.МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПустаяСсылка();
							КонецЕсли;
						ИначеЕсли ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
							Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
								СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, Номенклатура, АдресУбытия",
								ТекСтрока.Заказ, ТекСтрока.Груз, ТекСтрока.ПунктОтправления));
							Иначе
								СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, АдресУбытия",
								ТекСтрока.Заказ, ТекСтрока.ПунктОтправления));
							КонецЕсли;
							Если СтрокиРейса.Количество() <> 0 Тогда
								СтруктураРейса.МаршрутныйЛист = тзРейсыИЗаказы[0].МаршрутныйЛист;
							Иначе
								СтруктураРейса.МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПустаяСсылка();
							КонецЕсли;
						ИначеЕсли НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
							И ТипЗнч(Рейс) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда 
							Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
								СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто",
								ТекСтрока.Заказ, ТекСтрока.Груз));
							Иначе
								СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ",
								ТекСтрока.Заказ));
							КонецЕсли;
							Если СтрокиРейса.Количество() <> 0 Тогда
								СтруктураРейса.МаршрутныйЛист = тзРейсыИЗаказы[0].МаршрутныйЛист;
							Иначе
								СтруктураРейса.МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПустаяСсылка();
							КонецЕсли;
						Иначе 
							СтруктураРейса.МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПустаяСсылка();
						КонецЕсли;
					Иначе 
						Для Каждого ТекСтрокаРейс Из тзРейсыИЗаказы Цикл 
							СтруктураРейса = Новый Структура("Заказ,МаршрутныйЛист,Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
							|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма");
							ЗаполнитьЗначенияСвойств(СтруктураРейса, ТекСтрока);

							Рейс = ТекСтрокаРейс.МаршрутныйЛист;
							Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
								Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
									СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Номенклатура, Пункт",
									ТекСтрока.Заказ, ТекСтрока.Груз, ТекСтрока.ПунктОтправления));
								Иначе
									СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Пункт",
									ТекСтрока.Заказ, ТекСтрока.ПунктОтправления));
								КонецЕсли;
								Если СтрокиРейса.Количество() <> 0 Тогда
									СтруктураРейса.МаршрутныйЛист = Рейс;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
								Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
									СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, Номенклатура, АдресУбытия",
									ТекСтрока.Заказ, ТекСтрока.Груз, ТекСтрока.ПунктОтправления));
								Иначе
									СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, АдресУбытия",
									ТекСтрока.Заказ, ТекСтрока.ПунктОтправления));
								КонецЕсли;
								Если СтрокиРейса.Количество() <> 0 Тогда
									СтруктураРейса.МаршрутныйЛист = Рейс;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
								И ТипЗнч(Рейс) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда 
								Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
									СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто",
									ТекСтрока.Заказ, ТекСтрока.Груз));
								Иначе
									СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ",
									ТекСтрока.Заказ));
								КонецЕсли;
								Если СтрокиРейса.Количество() <> 0 Тогда
									СтруктураРейса.МаршрутныйЛист = Рейс;
								Иначе
									Продолжить;
								КонецЕсли;
							Иначе 
								Продолжить;
							КонецЕсли;
							МассивРейсов.Добавить(СтруктураРейса);
						КонецЦикла;
					КонецЕсли;
					МассивРейсов.Добавить(СтруктураРейса);
				КонецЦикла;
			КонецЕсли; 
			Если МассивРейсов.Количество() = 1 Тогда
				СтруктураРезультат.Вставить("МаршрутныйЛист",   МассивРейсов[0].МаршрутныйЛист);
				СтруктураРезультат.Вставить("Заказ",            Ссылка);
				
				ДопПараметры = Новый Структура("Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
				|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма"); 
				ЗаполнитьЗначенияСвойств(ДопПараметры, МассивРейсов[0]);
				СтруктураРезультат.Вставить("ДопПараметры", ДопПараметры);
			Иначе
				СтруктураРезультат.Вставить("МассивРейсов", МассивРейсов); 
			КонецЕсли;
		Иначе
			Если КоличествоСтрок = 0 Тогда
				СтруктураРезультат.Вставить("МаршрутныйЛист", Документы.уатМаршрутныйЛист.ПустаяСсылка());
				СтруктураРезультат.Вставить("Заказ",          Ссылка);
			ИначеЕсли КоличествоСтрок = 1 Тогда   
				СтруктураРезультат.Вставить("МаршрутныйЛист", тзРейсыИЗаказы[0].МаршрутныйЛист);
				СтруктураРезультат.Вставить("Заказ", тзРейсыИЗаказы[0].Заказ);
			Иначе
				тзРейсыИЗаказы.Сортировать("Заказ");
				МассивРейсов = Новый Массив();
				Для Каждого ТекСтрока Из тзРейсыИЗаказы Цикл   
					СтруктураРейса = Новый Структура("Заказ,МаршрутныйЛист");
					ЗаполнитьЗначенияСвойств(СтруктураРейса, ТекСтрока);
					МассивРейсов.Добавить(СтруктураРейса);
				КонецЦикла;
				СтруктураРезультат.Вставить("МассивРейсов", МассивРейсов);
			КонецЕсли;
		КонецЕсли;
	Иначе   
		СтруктураРезультат = Новый Структура();
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	уатПутевойЛистЗадание.ЗаказНаТС КАК Заказ,
			               |	&Ссылка КАК МаршрутныйЛист
			               |ИЗ
			               |	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
			               |ГДЕ
			               |	уатПутевойЛистЗадание.Ссылка = &Ссылка";
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Заказ,
			               |	&Ссылка КАК МаршрутныйЛист
			               |ИЗ
			               |	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
			               |ГДЕ
			               |	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка";
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	уатЗаказПеревозчику_уэГрузы.Заказ КАК Заказ,
			               |	&Ссылка КАК МаршрутныйЛист
			               |ИЗ
			               |	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
			               |ГДЕ
			               |	уатЗаказПеревозчику_уэГрузы.Ссылка = &Ссылка";
		Иначе
			СтруктураРезультат.Вставить("МаршрутныйЛист", Ссылка);
			СтруктураРезультат.Вставить("Заказ",          Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
			Возврат СтруктураРезультат;
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);   
		
		Результат       = Запрос.Выполнить();
		тзРейсыИЗаказы  = Результат.Выгрузить();
		КоличествоСтрок = тзРейсыИЗаказы.Количество(); 
		
		Если КоличествоСтрок = 0 Тогда
			СтруктураРезультат.Вставить("МаршрутныйЛист", Ссылка);
			СтруктураРезультат.Вставить("Заказ",          Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
		ИначеЕсли КоличествоСтрок = 1 Тогда
			Если тзРейсыИЗаказы[0].Заказ.FTL Тогда
				// Создаются отдельные ТТД на грузы с разными пунктами отправления / назначения
				ЗапросFTL = Новый Запрос;
				ЗапросFTL.Текст = ГрузыFTLЗаказовТекстЗапроса();
				ЗапросFTL.УстановитьПараметр("ЗаказСсылка", тзРейсыИЗаказы[0].Заказ);
				РезультатЗапроса = ЗапросFTL.Выполнить(); 
				МассивРейсов = Новый Массив();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ТаблицаГрузов = РезультатЗапроса.Выгрузить();
					Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
						СтруктураРейса = Новый Структура("Заказ,МаршрутныйЛист,Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
						|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма");
						ЗаполнитьЗначенияСвойств(СтруктураРейса, ТекСтрока);
						Если КоличествоСтрок = 0 Тогда
							СтруктураРейса.МаршрутныйЛист = Ссылка;
						Иначе
							Рейс = Ссылка;
							Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
								Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
									СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Номенклатура, Пункт",
									ТекСтрока.Заказ, ТекСтрока.Груз, ТекСтрока.ПунктОтправления));
								Иначе
									СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Пункт",
									ТекСтрока.Заказ, ТекСтрока.ПунктОтправления));
								КонецЕсли;
								Если СтрокиРейса.Количество() <> 0 Тогда
									СтруктураРейса.МаршрутныйЛист = Рейс;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
								Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
									СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, Номенклатура, АдресУбытия",
									ТекСтрока.Заказ, ТекСтрока.Груз, ТекСтрока.ПунктОтправления));
								Иначе
									СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, АдресУбытия",
									ТекСтрока.Заказ, ТекСтрока.ПунктОтправления));
								КонецЕсли;
								Если СтрокиРейса.Количество() <> 0 Тогда
									СтруктураРейса.МаршрутныйЛист = Рейс;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
								И ТипЗнч(Рейс) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда 
								Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
									СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто",
									ТекСтрока.Заказ, ТекСтрока.Груз));
								Иначе
									СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ",
									ТекСтрока.Заказ));
								КонецЕсли;
								Если СтрокиРейса.Количество() <> 0 Тогда
									СтруктураРейса.МаршрутныйЛист = Рейс;
								Иначе
									Продолжить;
								КонецЕсли;
							Иначе
								Продолжить;
							КонецЕсли;

						КонецЕсли;
						МассивРейсов.Добавить(СтруктураРейса);
					КонецЦикла;
				КонецЕсли; 
				Если МассивРейсов.Количество() = 1 Тогда
					СтруктураРезультат.Вставить("МаршрутныйЛист",   Ссылка);
					СтруктураРезультат.Вставить("Заказ",            МассивРейсов[0].Заказ);
					
					ДопПараметры = Новый Структура("Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
					|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма"); 
					ЗаполнитьЗначенияСвойств(ДопПараметры, МассивРейсов[0]);
					СтруктураРезультат.Вставить("ДопПараметры", ДопПараметры);
				Иначе
					СтруктураРезультат.Вставить("МассивРейсов", МассивРейсов); 
				КонецЕсли;
				
			Иначе
				СтруктураРезультат.Вставить("МаршрутныйЛист", тзРейсыИЗаказы[0].МаршрутныйЛист);
				СтруктураРезультат.Вставить("Заказ", тзРейсыИЗаказы[0].Заказ);
			КонецЕсли;

		Иначе
			тзРейсыИЗаказы.Сортировать("Заказ");
			МассивРейсов = Новый Массив();
			Для Каждого ТекСтрока Из тзРейсыИЗаказы Цикл
				Если ТекСтрока.Заказ.FTL Тогда
					// Создаются отдельные ТТД на грузы с разными пунктами отправления / назначения
					ЗапросFTL = Новый Запрос;
					ЗапросFTL.Текст = ГрузыFTLЗаказовТекстЗапроса();
					ЗапросFTL.УстановитьПараметр("ЗаказСсылка", тзРейсыИЗаказы[0].Заказ);
					РезультатЗапроса = ЗапросFTL.Выполнить(); 
					МассивРейсов = Новый Массив();
					Если НЕ РезультатЗапроса.Пустой() Тогда
						ТаблицаГрузов = РезультатЗапроса.Выгрузить();
						Для Каждого ТекСтрокаГруз Из ТаблицаГрузов Цикл
							СтруктураРейса = Новый Структура("Заказ,МаршрутныйЛист,Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
							|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма");
							ЗаполнитьЗначенияСвойств(СтруктураРейса, ТекСтрокаГруз);
							Если КоличествоСтрок = 0 Тогда
								СтруктураРейса.МаршрутныйЛист = Ссылка;
							ИначеЕсли КоличествоСтрок = 1 Тогда
								СтруктураРейса.МаршрутныйЛист = Ссылка;
							Иначе
								Рейс = Ссылка;
								Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
									Если ЗначениеЗаполнено(ТекСтрокаГруз.Груз) Тогда
										СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Номенклатура, Пункт",
										ТекСтрокаГруз.Заказ, ТекСтрокаГруз.Груз, ТекСтрокаГруз.ПунктОтправления));
									Иначе
										СтрокиРейса = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Пункт",
										ТекСтрокаГруз.Заказ, ТекСтрокаГруз.ПунктОтправления));
									КонецЕсли;
									Если СтрокиРейса.Количество() <> 0 Тогда
										СтруктураРейса.МаршрутныйЛист = Рейс;
									Иначе
										Продолжить;
									КонецЕсли;
								ИначеЕсли ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
									Если ЗначениеЗаполнено(ТекСтрокаГруз.Груз) Тогда
										СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, Номенклатура, АдресУбытия",
										ТекСтрокаГруз.Заказ, ТекСтрокаГруз.Груз, ТекСтрокаГруз.ПунктОтправления));
									Иначе
										СтрокиРейса = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС, АдресУбытия",
										ТекСтрокаГруз.Заказ, ТекСтрокаГруз.ПунктОтправления));
									КонецЕсли;
									Если СтрокиРейса.Количество() <> 0 Тогда
										СтруктураРейса.МаршрутныйЛист = Рейс;
									Иначе
										Продолжить;
									КонецЕсли;
								ИначеЕсли НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
									И ТипЗнч(Рейс) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда 
									Если ЗначениеЗаполнено(ТекСтрокаГруз.Груз) Тогда
										СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто",
										ТекСтрокаГруз.Заказ, ТекСтрокаГруз.Груз));
									Иначе
										СтрокиРейса = Рейс.Грузы.НайтиСтроки(Новый Структура("Заказ",
										ТекСтрокаГруз.Заказ));
									КонецЕсли;
									Если СтрокиРейса.Количество() <> 0 Тогда
										СтруктураРейса.МаршрутныйЛист = Рейс;
									Иначе
										Продолжить;
									КонецЕсли;
								Иначе
									Продолжить;
								КонецЕсли;
								
							КонецЕсли;
							МассивРейсов.Добавить(СтруктураРейса);
						КонецЦикла;
					КонецЕсли; 					
				Иначе
					СтруктураРейса = Новый Структура("Заказ,МаршрутныйЛист");
					ЗаполнитьЗначенияСвойств(СтруктураРейса, ТекСтрока);
					МассивРейсов.Добавить(СтруктураРейса);
				КонецЕсли;
			КонецЦикла;
			Если МассивРейсов.Количество() = 1 Тогда
				СтруктураРезультат.Вставить("МаршрутныйЛист",   МассивРейсов[0].МаршрутныйЛист);
				СтруктураРезультат.Вставить("Заказ",            Ссылка);
				
				ДопПараметры = Новый Структура("Груз,ПунктОтправления,ПунктНазначения,Грузоотправитель,Грузополучатель,
				|Количество,КоличествоМест,КоличествоТоваров,КоличествоГрузовыхМест,ВесБрутто,Объем,Цена,Сумма"); 
				ЗаполнитьЗначенияСвойств(ДопПараметры, МассивРейсов[0]);
				СтруктураРезультат.Вставить("ДопПараметры", ДопПараметры);
			Иначе
				СтруктураРезультат.Вставить("МассивРейсов", МассивРейсов); 
			КонецЕсли;

			СтруктураРезультат.Вставить("МассивРейсов", МассивРейсов);
		КонецЕсли;

	КонецЕсли;
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ЗначенияЗаполненияЭлектронныеТранспортныеНакладные(МассивОбъектов, ДопДанные) Экспорт
	
	ДанныеДляЗаполненияЭПД = Новый Структура();
	ЗначенияЗаполнения     = ЗначенияЗаполненияЭТН(); 
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	ЗаказНаТС = Неопределено;
	Рейс      = Неопределено;
	Для Каждого ТекДокумент Из МассивОбъектов Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ЗаказНаТС = ТекДокумент;
		Иначе
			Рейс = ТекДокумент;
		КонецЕсли;
	КонецЦикла; 
	
	ДанныеДляЗаполнения = ПодготовитьДанныеДляСозданияЭлектронныхТранспортныхНакладных(ЗаказНаТС, Рейс, ДопДанные);
	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	ДополнитьСтруктуру(ЗначенияЗаполнения, ДанныеДляЗаполнения, Истина);
	ДанныеДляЗаполненияЭПД = ЗначенияЗаполнения;
	
	Возврат ДанныеДляЗаполненияЭПД;
		
КонецФункции

Функция КлючевыхРеквизитыЭТрНИзменены(ДокументОбъект) Экспорт
	
	Результат = Новый СписокЗначений;
	
	ЕстьИзменения = Ложь;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда
		мсвИзмененнныеРеквизиты = Новый Массив;
		Для Каждого ТекРеквизит Из Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты Цикл
			Если ДокументОбъект[ТекРеквизит.Имя] <> ДокументОбъект.Ссылка[ТекРеквизит.Имя] Тогда
				мсвИзмененнныеРеквизиты.Добавить(ТекРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		мсвРеквизитовТитула = Новый Массив();
		мсвРеквизитовТитула.Добавить("Организация");
		мсвРеквизитовТитула.Добавить("Контрагент");
		мсвРеквизитовТитула.Добавить("Грузоотправитель");
		мсвРеквизитовТитула.Добавить("Грузополучатель");
		мсвРеквизитовТитула.Добавить("АдресОтправления");
		мсвРеквизитовТитула.Добавить("АдресНазначения");
		
		мсвРеквизитовТитула.Добавить("ВесБрутто");
		мсвРеквизитовТитула.Добавить("Объем");
		мсвРеквизитовТитула.Добавить("КоличествоМест");
		мсвРеквизитовТитула.Добавить("ВалютаТоваров");
		Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
			Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		мсвИзмененнныеРеквизиты = Новый Массив;
		Для Каждого ТекРеквизит Из Метаданные.Документы.уатПутевойЛист.Реквизиты Цикл
			Если ДокументОбъект[ТекРеквизит.Имя] <> ДокументОбъект.Ссылка[ТекРеквизит.Имя] Тогда
				мсвИзмененнныеРеквизиты.Добавить(ТекРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СравнитьТабличныеЧасти(ДокументОбъект.Прицепы, ДокументОбъект.Ссылка.Прицепы, "ТС") Тогда
			мсвИзмененнныеРеквизиты.Добавить("Прицепы");
		КонецЕсли;   
		Если НЕ СравнитьТабличныеЧасти(ДокументОбъект.Задание, ДокументОбъект.Ссылка.Задание, "КоличествоТонн") Тогда
			мсвИзмененнныеРеквизиты.Добавить("Вес");
		КонецЕсли;
		Если НЕ СравнитьТабличныеЧасти(ДокументОбъект.Задание, ДокументОбъект.Ссылка.Задание, "Объем") Тогда
			мсвИзмененнныеРеквизиты.Добавить("Объем");
		КонецЕсли;
		Если НЕ СравнитьТабличныеЧасти(ДокументОбъект.Задание, ДокументОбъект.Ссылка.Задание, "Номенклатура") Тогда
			мсвИзмененнныеРеквизиты.Добавить("Номенклатура");
		КонецЕсли;
		мсвРеквизитовТитула = Новый Массив();
		мсвРеквизитовТитула.Добавить("ТС");
		мсвРеквизитовТитула.Добавить("Прицепы");
		мсвРеквизитовТитула.Добавить("Водитель1");
		мсвРеквизитовТитула.Добавить("Водитель2");
		мсвРеквизитовТитула.Добавить("Организация");

		мсвРеквизитовТитула.Добавить("Вес");
		мсвРеквизитовТитула.Добавить("Объем");
		мсвРеквизитовТитула.Добавить("Номенклатура");
		Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
			Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
		мсвИзмененнныеРеквизиты = Новый Массив;
		Для Каждого ТекРеквизит Из Метаданные.Документы.уатМаршрутныйЛист.Реквизиты Цикл
			Если ДокументОбъект[ТекРеквизит.Имя] <> ДокументОбъект.Ссылка[ТекРеквизит.Имя] Тогда
				мсвИзмененнныеРеквизиты.Добавить(ТекРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		мсвРеквизитовТитула = Новый Массив();
		мсвРеквизитовТитула.Добавить("ТС");
		мсвРеквизитовТитула.Добавить("Прицеп1");
		мсвРеквизитовТитула.Добавить("Прицеп2");
		мсвРеквизитовТитула.Добавить("Водитель1");
		мсвРеквизитовТитула.Добавить("Водитель2");
		мсвРеквизитовТитула.Добавить("Контрагент");

		мсвРеквизитовТитула.Добавить("ВесБрутто");
		мсвРеквизитовТитула.Добавить("Объем");
		мсвРеквизитовТитула.Добавить("КоличествоМест");
		Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
			Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказПеревозчику_уэ") Тогда
		мсвИзмененнныеРеквизиты = Новый Массив;
		Для Каждого ТекРеквизит Из Метаданные.Документы.уатЗаказПеревозчику_уэ.Реквизиты Цикл
			Если ДокументОбъект[ТекРеквизит.Имя] <> ДокументОбъект.Ссылка[ТекРеквизит.Имя] Тогда
				мсвИзмененнныеРеквизиты.Добавить(ТекРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		мсвРеквизитовТитула = Новый Массив();
		мсвРеквизитовТитула.Добавить("ТС");
		мсвРеквизитовТитула.Добавить("Прицеп1");
		мсвРеквизитовТитула.Добавить("Прицеп2");
		мсвРеквизитовТитула.Добавить("Водитель");
		мсвРеквизитовТитула.Добавить("Контрагент");

		Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
			Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат ЕстьИзменения;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейсЭПЛ

Функция ЗначенияЗаполненияЭлектронныеПутевыеЛисты(МассивОбъектов, ОписаниеРеквизитовФормы) Экспорт
	
	ДанныеДляЗаполненияЭПД = Новый Структура();
	ЗначенияЗаполнения     = ЗначенияЗаполненияЭПЛ(); 
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ПодготовитьДанныеДляСозданияЭлектронныхПутевыхЛистов(МассивОбъектов[0], ОписаниеРеквизитовФормы);
	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	ДополнитьСтруктуру(ЗначенияЗаполнения, ДанныеДляЗаполнения, Истина);
	ДанныеДляЗаполненияЭПД = ЗначенияЗаполнения;

	
	Возврат ДанныеДляЗаполненияЭПД;
		
КонецФункции

Функция ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если ДанныеДляЗаполнения = Неопределено Тогда
		ДанныеДляЗаполнения = Новый Структура();
	Конецесли;
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура();
	Конецесли;
	
	ПрефиксТитула = ""; 
	НомерВерсии   = 0;
	Если Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1") Тогда
		
		ПрефиксТитула = "ТитулОформление";

		МассивДокументОснование = Новый Массив();
		МассивДокументОснование.Добавить(ДокументОснование);
		ДанныеДляЗаполнения = уатОбменСГИСЭПД.ЗначенияЗаполненияЭлектронныеПутевыеЛисты(МассивДокументОснование, ОписаниеРеквизитовФормы);
		Если ДанныеДляЗаполнения.Свойство("ОформительНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("МедорганизацияНеПодключена") 
			ИЛИ ДанныеДляЗаполнения.Свойство("ТехконтрольНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("ПоказанияОдометраНеПодключен") Тогда
			Возврат Неопределено;
		КонецЕсли; 

		ЭПЛ = ТекЭПЛ;
		Если ЗначениеЗаполнено(ЭПЛ) Тогда
			ЭлектронныйПутевойЛист = ЭПЛ.ПолучитьОбъект();
		Иначе
			ЭлектронныйПутевойЛист = Документы.ЭлектронныйПутевойЛист.СоздатьДокумент();
		КонецЕсли;
				
		ДанныеДляЗаполнения.Вставить("ДокументыОснования", МассивДокументОснование);
		
		ЭлектронныйПутевойЛист.Заполнить(ДанныеДляЗаполнения); 
		ЭлектронныйПутевойЛист.Дата = ТекущаяДатаСеанса();
		
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура();
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",  ДанныеДляЗаполнения); 
		ПараметрыФормы.Вставить("ЗначениеКопирования", Документы.ЭлектронныйПутевойЛист.ПустаяСсылка());
		ПараметрыФормы.Вставить("Основание",           Неопределено);
		ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитовПоПараметрамФормы(ПараметрыФормы, СтруктураРеквизитов);  
		
		ВыбранныйТитул = ОбменСГИСЭПДКлиентСервер.ТитулПоПрефиксу("Документ.ЭлектронныйПутевойЛист", "ТитулОформление");
		Если ЗначениеЗаполнено(ВыбранныйТитул) Тогда	
			ТекРеквизитыТекущейВерсииТитула = ОбменСГИСЭПД.ПолучитьВерсиюТитулаДокумента(СтруктураРеквизитов, ВыбранныйТитул, 0);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлектронныйПутевойЛист, ТекРеквизитыТекущейВерсииТитула);
	    РеквизитыТекущейВерсииТитула = Новый Структура();
		Для Каждого ТекРеквизит Из ТекРеквизитыТекущейВерсииТитула Цикл
			РеквизитыТекущейВерсииТитула.Вставить(ТекРеквизит.Ключ, ТекРеквизит.Значение);
		КонецЦикла;
	    РеквизитыТекущейВерсииТитула.Вставить("ТитулОформлениеУИДМинтранс", ЭлектронныйПутевойЛист.УИДМинтранс);
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2") Тогда
		ПрефиксТитула = "ТитулМедосмотр";
		
		ПовторныйШаг = ДопПараметры.Свойство("ПовторныйШаг") И ДопПараметры.ПовторныйШаг = Истина;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ДокументОснованиеПЛ  = ДокументОснование;
			МедработникВыезд     = ДокументОснование.МедработникВыезд;
			ДатаИВремяПроведения = ТекущаяДатаСеанса();
			Водитель             = ?(ПовторныйШаг, ДокументОснование.Водитель2, ДокументОснование.Водитель1);
			
			ДокументЖурнал = Неопределено;
			флЖТД          = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
			Если флЖТД Тогда
				ДокументЖурнал = ПолучитьСоздатьЖурнал(ДокументОснованиеПЛ, Титул, ДатаИВремяПроведения, ПовторныйШаг); 
				Если НЕ ЗначениеЗаполнено(ДокументЖурнал) Тогда
					Возврат Неопределено;
				Конецесли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументЖурнал) Тогда
				МедработникВыезд     = ДокументЖурнал.МедицинскийРаботник;
				ДатаИВремяПроведения = ДокументЖурнал.Дата;
				Водитель             = ДокументЖурнал.Водитель;
			Конецесли;
		Иначе
			ДокументОснованиеПЛ  = ДокументОснование.ПутевойЛист;
			МедработникВыезд     = ДокументОснование.МедицинскийРаботник;
			ДатаИВремяПроведения = ДокументОснование.Дата;
			Водитель             = ДокументОснование.Водитель; 
		Конецесли;
	
		ЭПЛ = ТекЭПЛ; 
		
		МассивТитулов = Новый Массив();
		МассивТитулов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1"));
		
		СтруктураПодписей      = Новый Структура();
		ЭлектронныйПутевойЛист = уатЗащищенныеФункцииСервер.ПолучитьЭПЛТитула(ЭПЛ, СтруктураПодписей, МассивТитулов);
		Если ЭлектронныйПутевойЛист = Неопределено Тогда;
			Возврат Неопределено;
		КонецЕсли;
		ПодписьОформлениеBase64 = СтруктураПодписей.ПодписьОформлениеBase64;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЖурналМедицинскогоОсмотраВодителей") Тогда 
			Титул = ?(ДокументОснование.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено"),
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ"), Титул);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(МедработникВыезд) Тогда
			Если ЭлектронныйПутевойЛист.ИдентификаторОформителя = ЭлектронныйПутевойЛист.ИдентификаторМедорганизации Тогда
				ИмяХранимыхДанных    = "ХранимыеДанныеТитулМедосмотрШтатныйМедработник";
				РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыШтатныйМедработник;
				Тип       = "ШтатныйМедработникЭПЛ";
				ТипТитула = "ТитулМедосмотрШтатныйМедработник";
			Иначе
				ИмяХранимыхДанных    = "ХранимыеДанныеТитулМедосмотрСтороннийМедработник";
				РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыСтороннийМедработник;
				Тип = "СтороннийМедработникЭПЛ";
				ТипТитула = "ТитулМедосмотрСтороннийМедработник";
			КонецЕсли;
			
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьСотрудника(МедработникВыезд, "ЭлектронныйПутевойЛист",
			Тип, РеквизитыПодчиненнойФормы); 
			ХранимыеДанные = СтруктураДанных.ХранимыеДанные;
			ДанныеДляЗаполнения.Вставить(ИмяХранимыхДанных, ХранимыеДанные);
			
			ДанныеМедработник = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(
			ХранимыеДанные,
			Тип);
			Если ТипЗнч(ДанныеМедработник) = Тип("Структура")
				И ДанныеМедработник.Свойство("ДанныеЗаполненияРеквизитовФормы") Тогда
				ДанныеЗаполненияРеквизитовФормы = ДанныеМедработник.ДанныеЗаполненияРеквизитовФормы;
				Для Каждого ТекСтрока Из ДанныеЗаполненияРеквизитовФормы Цикл
					ДанныеДляЗаполнения.Вставить(ТипТитула + ТекСтрока.Ключ, ТекСтрока.Значение);
				КонецЦикла;
			КонецЕсли;

		КонецЕсли; 
		
		ЭлектронныйПутевойЛист.ТекущийТитул = Титул;
		ЗаполнитьИдентификациюФайлаОбмена(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрВидМедосмотра", "2"); // Предрейсовый
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрДатаИВремяПроведения", ДатаИВремяПроведения);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрДатаИВремяПроведенияИспользуетсяUTC", "1");
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрОтметкаОРезультатеПроведения",
			Нстр("ru = 'Прошел предсменный медицинский осмотр, к исполнению трудовых обязанностей допущен'"));
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрВодительИдентификаторСтроки", "");
		
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрФайлОформлениеИдентификаторФайла",     ЭлектронныйПутевойЛист.ТитулОформлениеИдентификаторФайла);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрФайлОформлениеДатаФормированияФайла",  ЭлектронныйПутевойЛист.ТитулОформлениеДатаФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрФайлОформлениеВремяФормированияФайла", ЭлектронныйПутевойЛист.ТитулОформлениеВремяФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрФайлОформлениеЭлектроннаяПодпись",     ПодписьОформлениеBase64);
		
		ЗаполнитьЗначенияСвойств(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура();
		ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитов(ЭлектронныйПутевойЛист.Ссылка, ЭлектронныйПутевойЛист.Организация, СтруктураРеквизитов);
		
		// Первый водитель
		ИндексВодителя = ?(ПовторныйШаг, 2, 1);
		Если СтруктураРеквизитов.Свойство("ТитулОформление") Тогда
			ТитулОформление = СтруктураРеквизитов.ТитулОформление;
			Если ТитулОформление.Количество() <> 0 Тогда
				ТитулОформление = СтруктураРеквизитов.ТитулОформление[0];
				Для Каждого ТекСтрока Из ТитулОформление Цикл
					Если СтрНайти(ТекСтрока.Ключ, "ТитулОформлениеВодители__" + ИндексВодителя + "__") <> 0 Тогда 
						Если ТекСтрока.Ключ = "ТитулОформлениеВодители__" + ИндексВодителя + "__ХранимыеДанныеВодитель" Тогда
							 ДанныеДляЗаполнения.Вставить("ХранимыеДанныеТитулМедосмотрВодитель", ТекСтрока.Значение);
						Иначе
							ДанныеДляЗаполнения.Вставить(СтрЗаменить(ТекСтрока.Ключ, "ТитулОформлениеВодители__" + ИндексВодителя + "__", "ТитулМедосмотрВодитель"), ТекСтрока.Значение);
						Конецесли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Уже есть существующий медосмотр
		Если СтруктураРеквизитов.Свойство("ТитулМедосмотр") 
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ТитулМедосмотр = СтруктураРеквизитов.ТитулМедосмотр; 
			Если ТитулМедосмотр.Количество() <> 0 Тогда
				ТитулМедосмотр1 = СтруктураРеквизитов.ТитулМедосмотр[0];
				Если ТитулМедосмотр1.ТитулМедосмотрВодительИдентификаторСтроки = ДанныеДляЗаполнения.ТитулМедосмотрВодительИдентификаторСтроки Тогда
					НомерВерсии = ?(ПовторныйШаг, 1, 0);
				ИначеЕсли ТитулМедосмотр.Количество() > 1 Тогда 
					НомерВерсии = 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НомерВерсии = ?(ПовторныйШаг, 1, 0);
		КонецЕсли;
		РеквизитыТекущейВерсииТитула = ДанныеДляЗаполнения;
		РеквизитыТекущейВерсииТитула.Вставить(ПрефиксТитула + "УИДМинтранс", ЭлектронныйПутевойЛист.УИДМинтранс);
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3") Тогда
		ПрефиксТитула = "ТитулВыпуск";
		
		ДатаИВремяПроведения = ТекущаяДатаСеанса();
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ДокументОснованиеПЛ = ДокументОснование;
			ВыпустилМеханик     = ДокументОснование.ВыпустилМеханик;
			Статус              = "1"; 
			
			ДокументЖурнал = Неопределено;
			флЖТД          = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
			Если флЖТД Тогда
				ДокументЖурнал = ПолучитьСоздатьЖурнал(ДокументОснованиеПЛ, Титул, ДатаИВремяПроведения); 
				Если НЕ ЗначениеЗаполнено(ДокументЖурнал) Тогда
					Возврат Неопределено;
				Конецесли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументЖурнал) Тогда
				ВыпустилМеханик      = ДокументЖурнал.Контролер;
				ДатаИВремяПроведения = ДокументЖурнал.Дата;
				Статус               = ?(ДокументЖурнал.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено"), "2", "1");
			Конецесли;
			
		Иначе
			ДокументОснованиеПЛ  = ДокументОснование.ПутевойЛист;
			ВыпустилМеханик      = ДокументОснование.Контролер;
			ДатаИВремяПроведения = ДокументОснование.Дата;
			Статус               = ?(ДокументОснование.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено"), "2", "1");
		Конецесли; 
		
		ЭПЛ = ТекЭПЛ; 
		
		МассивТитулов = Новый Массив();
		МассивТитулов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1"));
		
		СтруктураПодписей      = Новый Структура();
		ЭлектронныйПутевойЛист = уатЗащищенныеФункцииСервер.ПолучитьЭПЛТитула(ЭПЛ, СтруктураПодписей, МассивТитулов);
		Если ЭлектронныйПутевойЛист = Неопределено Тогда;
			Возврат Неопределено;
		КонецЕсли;
		ПодписьОформлениеBase64 = СтруктураПодписей.ПодписьОформлениеBase64; 

		Если ЗначениеЗаполнено(ВыпустилМеханик) Тогда	
			Тип          = "ОтветственныйЗаСостояниеТСЭПЛ";
			ИмяДокумента = "ЭлектронныйПутевойЛист";
			РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыОтветственныйЗаСостояниеТС;
			
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьСотрудника(ВыпустилМеханик, ИмяДокумента,
			Тип, РеквизитыПодчиненнойФормы); 
			ХранимыеДанные = СтруктураДанных.ХранимыеДанные;
			ДанныеДляЗаполнения.Вставить("ХранимыеДанныеТитулВыпускОтветственныйЗаСостояниеТС", ХранимыеДанные);
		КонецЕсли;
		ДанныеДляЗаполнения.Вставить("ТитулВыпускРезультатПроведенияПредсменногоКонтроля", Статус);
		
		ЭлектронныйПутевойЛист.ТекущийТитул = Титул;
		ЗаполнитьИдентификациюФайлаОбмена(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения.Вставить("ТитулВыпускФайлОформлениеИдентификаторФайла",     ЭлектронныйПутевойЛист.ТитулОформлениеИдентификаторФайла);
		ДанныеДляЗаполнения.Вставить("ТитулВыпускФайлОформлениеДатаФормированияФайла",  ЭлектронныйПутевойЛист.ТитулОформлениеДатаФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулВыпускФайлОформлениеВремяФормированияФайла", ЭлектронныйПутевойЛист.ТитулОформлениеВремяФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулВыпускФайлОформлениеЭлектроннаяПодпись",     ПодписьОформлениеBase64);
		
		ДанныеДляЗаполнения.Вставить("ТитулВыпускДатаИВремяВыпускаНаЛинию",        ДатаИВремяПроведения);
		ДанныеДляЗаполнения.Вставить("ТитулВыпускДатаИВремяПредрейсовогоКонтроля", ДатаИВремяПроведения); 
		ДанныеДляЗаполнения.Вставить("ТитулВыпускДатаИВремяПредрейсовогоКонтроляИспользуетсяUTC", "1");
		ДанныеДляЗаполнения.Вставить("ТитулВыпускДатаИВремяВыпускаНаЛиниюИспользуетсяUTC",        "1");
		
		ЗаполнитьЗначенияСвойств(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения); 
		
		Если ДанныеДляЗаполнения.Свойство("ХранимыеДанныеТитулВыпускОтветственныйЗаСостояниеТС") Тогда
			ДанныеОтветственныйЗаСостояниеТС = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(
				ДанныеДляЗаполнения.ХранимыеДанныеТитулВыпускОтветственныйЗаСостояниеТС,
				"ТитулВыпускОтветственныйЗаСостояниеТС");
			Если ТипЗнч(ДанныеОтветственныйЗаСостояниеТС) = Тип("Структура")
				И ДанныеОтветственныйЗаСостояниеТС.Свойство("ДанныеЗаполненияРеквизитовФормы") Тогда
				ДанныеЗаполненияРеквизитовФормы = ДанныеОтветственныйЗаСостояниеТС.ДанныеЗаполненияРеквизитовФормы;
				ДополнитьСтруктуру(ДанныеДляЗаполнения, ДанныеЗаполненияРеквизитовФормы, Истина);
			КонецЕсли;
		КонецЕсли;
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура();
		ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитов(ЭлектронныйПутевойЛист.Ссылка, ЭлектронныйПутевойЛист.Организация, СтруктураРеквизитов);
		
		Если СтруктураРеквизитов.Свойство("ТитулОформление") Тогда
			ТитулОформление = СтруктураРеквизитов.ТитулОформление;
			Если ТитулОформление.Количество() <> 0 Тогда
				ТитулОформление = СтруктураРеквизитов.ТитулОформление[0];
				Если ТитулОформление.Свойство("ХранимыеДанныеТитулОформлениеТранспортноеСредство") Тогда 
					ДанныеДляЗаполнения.Вставить("ХранимыеДанныеТитулВыпускТранспортноеСредство", ТитулОформление.ХранимыеДанныеТитулОформлениеТранспортноеСредство);
				КонецЕсли;
				Если ТитулОформление.Свойство("ТитулОформлениеТранспортноеСредствоТип") Тогда 
					ДанныеДляЗаполнения.Вставить("ТитулВыпускТранспортноеСредствоТип", ТитулОформление.ТитулОформлениеТранспортноеСредствоТип);
				КонецЕсли;
				Если ТитулОформление.Свойство("ТитулОформлениеТранспортноеСредствоИнвентарныйНомер") Тогда 
					ДанныеДляЗаполнения.Вставить("ТитулВыпускТранспортноеСредствоИнвентарныйНомер", ТитулОформление.ТитулОформлениеТранспортноеСредствоИнвентарныйНомер);
				КонецЕсли;
				Если ТитулОформление.Свойство("ТитулОформлениеТранспортноеСредствоМарка") Тогда 
					ДанныеДляЗаполнения.Вставить("ТитулВыпускТранспортноеСредствоМарка", ТитулОформление.ТитулОформлениеТранспортноеСредствоМарка);
				КонецЕсли;
				Если ТитулОформление.Свойство("ТитулОформлениеТранспортноеСредствоМодель") Тогда 
					ДанныеДляЗаполнения.Вставить("ТитулВыпускТранспортноеСредствоМодель", ТитулОформление.ТитулОформлениеТранспортноеСредствоМодель);
				КонецЕсли;
				Если ТитулОформление.Свойство("ТитулОформлениеТранспортноеСредствоРегистрационныйНомер") Тогда 
					ДанныеДляЗаполнения.Вставить("ТитулВыпускТранспортноеСредствоРегистрационныйНомер",
					ТитулОформление.ТитулОформлениеТранспортноеСредствоРегистрационныйНомер);
				КонецЕсли; 
				
				Для Каждого ТекСтрока Из ТитулОформление Цикл
					Если СтрНайти(ТекСтрока.Ключ, "ТитулОформлениеПрицепы") <> 0 Тогда
						ДанныеДляЗаполнения.Вставить(СтрЗаменить(ТекСтрока.Ключ, "ТитулОформлениеПрицепы", "ТитулВыпускПрицепы"), ТекСтрока.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		РеквизитыТекущейВерсииТитула = ДанныеДляЗаполнения; 
		РеквизитыТекущейВерсииТитула.Вставить(ПрефиксТитула + "УИДМинтранс", ЭлектронныйПутевойЛист.УИДМинтранс);
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4") Тогда
		ПрефиксТитула = "ТитулВыезд";
		
		ДатаИВремяПроведения = ТекущаяДатаСеанса();
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ДокументОснованиеПЛ = ДокументОснование;
			
			ДокументЖурнал = Неопределено;
			флЖТД          = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
			Если флЖТД Тогда
				ДокументЖурнал = ПолучитьСоздатьЖурнал(ДокументОснованиеПЛ, Титул, ДатаИВремяПроведения); 
				Если НЕ ЗначениеЗаполнено(ДокументЖурнал) Тогда
					Возврат Неопределено;
				Конецесли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументЖурнал) Тогда
				Уполномоченный       = ДокументЖурнал.Контролер;
				ПоказаниеОдометра    = ДокументЖурнал.ПоказаниеОдометра;
				ДатаИВремяПроведения = ДокументЖурнал.Дата;
			Иначе
				Уполномоченный       = ДокументОснованиеПЛ.УполномоченныйНаПроставлениеОдометраПриВыезде;
				ПоказаниеОдометра    = ДокументОснованиеПЛ.СпидометрВыезда;
			КонецЕсли;
			ДатаИВремяВыезда = ДокументОснованиеПЛ.ДатаВыезда;
		Иначе
			ДокументОснованиеПЛ  = ДокументОснование.ПутевойЛист;
			Уполномоченный       = ДокументОснование.Контролер;
			ДатаИВремяПроведения = ДокументОснование.Дата;
			ПоказаниеОдометра    = ДокументОснование.ПоказаниеОдометра;
			ДатаИВремяВыезда     = ДокументОснованиеПЛ.ДатаВыезда;
		Конецесли; 
		
		ЭПЛ = ТекЭПЛ; 
		
		МассивТитулов = Новый Массив();
		МассивТитулов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1"));
		МассивТитулов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3"));
		
		СтруктураПодписей      = Новый Структура();
		ЭлектронныйПутевойЛист = уатЗащищенныеФункцииСервер.ПолучитьЭПЛТитула(ЭПЛ, СтруктураПодписей, МассивТитулов);
		Если ЭлектронныйПутевойЛист = Неопределено Тогда;
			Возврат Неопределено;
		КонецЕсли;
		ПодписьОформлениеBase64 = СтруктураПодписей.ПодписьОформлениеBase64;
		ПодписьВыпускBase64     = СтруктураПодписей.ПодписьВыпускBase64;
		
		Если ЗначениеЗаполнено(Уполномоченный) Тогда	
			Тип          = "УполномоченныйНаПроставлениеДанныхЭПЛ";
			ИмяДокумента = "ЭлектронныйПутевойЛист";
			РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыУполномоченныйНаПроставлениеДанныхЭПЛ;
			
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьСотрудника(Уполномоченный, ИмяДокумента,
			Тип, РеквизитыПодчиненнойФормы); 
			ХранимыеДанные = СтруктураДанных.ХранимыеДанные;
			ДанныеДляЗаполнения.Вставить("ХранимыеДанныеТитулВыездУполномоченныйНаПроставлениеДанных", ХранимыеДанные);
		КонецЕсли;
		Если ДанныеДляЗаполнения.Свойство("ХранимыеДанныеТитулВыездУполномоченныйНаПроставлениеДанных") Тогда
			ДанныеУполномоченныйНаПроставлениеДанных = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(
				ДанныеДляЗаполнения.ХранимыеДанныеТитулВыездУполномоченныйНаПроставлениеДанных,
				"УполномоченныйНаПроставлениеДанныхЭПЛ");
			Если ТипЗнч(ДанныеУполномоченныйНаПроставлениеДанных) = Тип("Структура")
				И ДанныеУполномоченныйНаПроставлениеДанных.Свойство("ДанныеЗаполненияРеквизитовФормы") Тогда
				ДанныеЗаполненияРеквизитовФормы = ДанныеУполномоченныйНаПроставлениеДанных.ДанныеЗаполненияРеквизитовФормы;
				Для Каждого ТекСтрока Из ДанныеЗаполненияРеквизитовФормы Цикл
					ДанныеДляЗаполнения.Вставить("ТитулВыездУполномоченныйНаПроставлениеДанных" + ТекСтрока.Ключ, ТекСтрока.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура();
		ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитов(ЭлектронныйПутевойЛист.Ссылка, ЭлектронныйПутевойЛист.Организация, СтруктураРеквизитов);
		Если СтруктураРеквизитов.Свойство("ТитулОформление") Тогда
			ТитулОформление = СтруктураРеквизитов.ТитулОформление;
			Если ТитулОформление.Количество() <> 0 Тогда
				ТитулОформление = СтруктураРеквизитов.ТитулОформление[0];
				Если ТитулОформление.Свойство("ТитулОформлениеПризнакНачалаРейса") Тогда 
					ДанныеДляЗаполнения.Вставить("ТитулВыездПризнакНачалаРейса", ТитулОформление.ТитулОформлениеПризнакНачалаРейса);
				КонецЕсли;
			КонецЕсли;
		Конецесли;
		
		ЭлектронныйПутевойЛист.ТекущийТитул = Титул;
		ЗаполнитьИдентификациюФайлаОбмена(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		
		Если ДанныеДляЗаполнения.ТитулВыездПризнакНачалаРейса = "2" Тогда 
			ДанныеДляЗаполнения.Вставить("ТитулВыездДатаИВремяПриема",                ДатаИВремяВыезда);
			ДанныеДляЗаполнения.Вставить("ТитулВыездДатаИВремяПриемаИспользуетсяUTC", "1"); 
			ДанныеДляЗаполнения.Вставить("ТитулВыездПоказанияОдометраПриПриеме",      Цел(ПоказаниеОдометра));
		
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлОформлениеИдентификаторФайла",     ЭлектронныйПутевойЛист.ТитулОформлениеИдентификаторФайла);
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлОформлениеДатаФормированияФайла",  ЭлектронныйПутевойЛист.ТитулОформлениеДатаФормированияФайла);
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлОформлениеВремяФормированияФайла", ЭлектронныйПутевойЛист.ТитулОформлениеВремяФормированияФайла);
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлОформлениеЭлектроннаяПодпись",     ПодписьОформлениеBase64);
		Иначе
			ДанныеДляЗаполнения.Вставить("ТитулВыездДатаИВремяВыезда",                ДатаИВремяВыезда);
			ДанныеДляЗаполнения.Вставить("ТитулВыездДатаИВремяВыездаИспользуетсяUTC", "1"); 
			ДанныеДляЗаполнения.Вставить("ТитулВыездПоказанияОдометраПриВыезде",      Цел(ПоказаниеОдометра));
			
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлВыпускИдентификаторФайла",     ЭлектронныйПутевойЛист.ТитулВыпускИдентификаторФайла);
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлВыпускДатаФормированияФайла",  ЭлектронныйПутевойЛист.ТитулВыпускДатаФормированияФайла);
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлВыпускВремяФормированияФайла", ЭлектронныйПутевойЛист.ТитулВыпускВремяФормированияФайла);
			ДанныеДляЗаполнения.Вставить("ТитулВыездФайлВыпускЭлектроннаяПодпись",     ПодписьВыпускBase64);
		Конецесли; 
		
		ЗаполнитьЗначенияСвойств(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения); 
		
		РеквизитыТекущейВерсииТитула = ДанныеДляЗаполнения;
		РеквизитыТекущейВерсииТитула.Вставить(ПрефиксТитула + "УИДМинтранс", ЭлектронныйПутевойЛист.УИДМинтранс);
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") Тогда
		ПрефиксТитула = "ТитулЗаезд";
		
		ДатаИВремяПроведения = ТекущаяДатаСеанса();
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ДокументОснованиеПЛ = ДокументОснование;
			
			ДокументЖурнал = Неопределено;
			флЖТД          = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
			Если флЖТД Тогда
				ДокументЖурнал = ПолучитьСоздатьЖурнал(ДокументОснованиеПЛ, Титул, ДатаИВремяПроведения); 
				Если НЕ ЗначениеЗаполнено(ДокументЖурнал) Тогда
					Возврат Неопределено;
				Конецесли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументЖурнал) Тогда
				Уполномоченный       = ДокументЖурнал.Контролер;
				ПоказаниеОдометра    = ДокументЖурнал.ПоказаниеОдометра;
				ДатаИВремяПроведения = ДокументЖурнал.Дата;
			Иначе
				Уполномоченный       = ДокументОснованиеПЛ.УполномоченныйНаПроставлениеОдометраПриВыезде;
				ПоказаниеОдометра    = ДокументОснованиеПЛ.СпидометрВозвращения;
			КонецЕсли;
			ДатаИВремяВозвращения = ДокументОснованиеПЛ.ДатаВозвращения;
		Иначе
			ДокументОснованиеПЛ  = ДокументОснование.ПутевойЛист;
			Уполномоченный       = ДокументОснование.Контролер;
			ДатаИВремяПроведения = ДокументОснование.Дата;
			ПоказаниеОдометра    = ДокументОснование.ПоказаниеОдометра;
			ДатаИВремяВозвращения = ДокументОснованиеПЛ.ДатаВозвращения;
		Конецесли; 
		
		ЭПЛ = ТекЭПЛ; 
		МассивТитулов = Новый Массив();
		МассивТитулов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4"));
		
		СтруктураПодписей      = Новый Структура();
		ЭлектронныйПутевойЛист = уатЗащищенныеФункцииСервер.ПолучитьЭПЛТитула(ЭПЛ, СтруктураПодписей, МассивТитулов);
		Если ЭлектронныйПутевойЛист = Неопределено Тогда;
			Возврат Неопределено;
		КонецЕсли;
		ПодписьВыездBase64 = СтруктураПодписей.ПодписьВыездBase64; 

		Если ЗначениеЗаполнено(Уполномоченный) Тогда	
			Тип          = "УполномоченныйНаПроставлениеДанныхЭПЛ";
			ИмяДокумента = "ЭлектронныйПутевойЛист";
			РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыУполномоченныйНаПроставлениеДанныхЭПЛ;
			
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьСотрудника(Уполномоченный, ИмяДокумента,
			Тип, РеквизитыПодчиненнойФормы); 
			ХранимыеДанные = СтруктураДанных.ХранимыеДанные;
			ДанныеДляЗаполнения.Вставить("ХранимыеДанныеТитулЗаездУполномоченныйНаПроставлениеДанных", ХранимыеДанные);
		КонецЕсли;
		Если ДанныеДляЗаполнения.Свойство("ХранимыеДанныеТитулЗаездУполномоченныйНаПроставлениеДанных") Тогда
			ДанныеУполномоченныйНаПроставлениеДанных = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(
				ДанныеДляЗаполнения.ХранимыеДанныеТитулЗаездУполномоченныйНаПроставлениеДанных,
				"УполномоченныйНаПроставлениеДанныхЭПЛ");
			Если ТипЗнч(ДанныеУполномоченныйНаПроставлениеДанных) = Тип("Структура")
				И ДанныеУполномоченныйНаПроставлениеДанных.Свойство("ДанныеЗаполненияРеквизитовФормы") Тогда
				ДанныеЗаполненияРеквизитовФормы = ДанныеУполномоченныйНаПроставлениеДанных.ДанныеЗаполненияРеквизитовФормы;
				Для Каждого ТекСтрока Из ДанныеЗаполненияРеквизитовФормы Цикл
					ДанныеДляЗаполнения.Вставить("ТитулЗаездУполномоченныйНаПроставлениеДанных" + ТекСтрока.Ключ, ТекСтрока.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеДляЗаполнения.Вставить("ТитулЗаездПризнакОкончанияРейса",           "1");
		ДанныеДляЗаполнения.Вставить("ТитулЗаездДатаИВремяЗаезда",                 ДатаИВремяВозвращения);
		ДанныеДляЗаполнения.Вставить("ТитулЗаездДатаИВремяЗаездаИспользуетсяUTC",  "1"); 
		ДанныеДляЗаполнения.Вставить("ТитулЗаездПоказанияОдометраПриЗаезде",       Цел(ПоказаниеОдометра));
		
		ЭлектронныйПутевойЛист.ТекущийТитул = Титул;
		ЗаполнитьИдентификациюФайлаОбмена(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		
		ДанныеДляЗаполнения.Вставить("ТитулЗаездФайлВыездИдентификаторФайла",     ЭлектронныйПутевойЛист.ТитулВыездИдентификаторФайла);
		ДанныеДляЗаполнения.Вставить("ТитулЗаездФайлВыездДатаФормированияФайла",  ЭлектронныйПутевойЛист.ТитулВыездДатаФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулЗаездФайлВыездВремяФормированияФайла", ЭлектронныйПутевойЛист.ТитулВыездВремяФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулЗаездФайлВыездЭлектроннаяПодпись",     ПодписьВыездBase64);
		
		ЗаполнитьЗначенияСвойств(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения); 
		РеквизитыТекущейВерсииТитула = ДанныеДляЗаполнения;    
		РеквизитыТекущейВерсииТитула.Вставить(ПрефиксТитула + "УИДМинтранс", ЭлектронныйПутевойЛист.УИДМинтранс);
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
		ПрефиксТитула = "ТитулМедосмотрПосле";
		
		ПовторныйШаг = ДопПараметры.Свойство("ПовторныйШаг") И ДопПараметры.ПовторныйШаг = Истина;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ДокументОснованиеПЛ  = ДокументОснование;
			МедработникВыезд     = ДокументОснование.МедработникВыезд;
			ДатаИВремяПроведения = ТекущаяДатаСеанса();
			Водитель             = ?(ПовторныйШаг, ДокументОснование.Водитель2, ДокументОснование.Водитель1);
			
			ДокументЖурнал = Неопределено;
			флЖТД          = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
			Если флЖТД Тогда
				ДокументЖурнал = ПолучитьСоздатьЖурнал(ДокументОснованиеПЛ, Титул, ДатаИВремяПроведения, ПовторныйШаг); 
				Если НЕ ЗначениеЗаполнено(ДокументЖурнал) Тогда
					Возврат Неопределено;
				Конецесли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументЖурнал) Тогда
				МедработникВозврат   = ДокументЖурнал.МедицинскийРаботник;
				ДатаИВремяПроведения = ДокументЖурнал.Дата;
				Водитель             = ДокументЖурнал.Водитель;
			Конецесли;
		Иначе
			ДокументОснованиеПЛ  = ДокументОснование.ПутевойЛист;
			МедработникВозврат   = ДокументОснование.МедицинскийРаботник;
			ДатаИВремяПроведения = ДокументОснование.Дата;
			Водитель             = ДокументОснование.Водитель; 
		Конецесли;
	
		ЭПЛ = ТекЭПЛ;   
		МассивТитулов = Новый Массив();
		МассивТитулов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5"));
		
		СтруктураПодписей      = Новый Структура();
		ЭлектронныйПутевойЛист = уатЗащищенныеФункцииСервер.ПолучитьЭПЛТитула(ЭПЛ, СтруктураПодписей, МассивТитулов);
		Если ЭлектронныйПутевойЛист = Неопределено Тогда;
			Возврат Неопределено;
		КонецЕсли;
		ПодписьЗаездBase64 = СтруктураПодписей.ПодписьЗаездBase64;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЖурналМедицинскогоОсмотраВодителей") Тогда 
			Титул = ?(ДокументОснование.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено"),
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_ОткМ"), Титул);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(МедработникВозврат) Тогда
			Если ЭлектронныйПутевойЛист.ИдентификаторОформителя = ЭлектронныйПутевойЛист.ИдентификаторМедорганизации Тогда
				ИмяХранимыхДанных    = "ХранимыеДанныеТитулМедосмотрПослеШтатныйМедработник";
				РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыШтатныйМедработник;
				Тип       = "ШтатныйМедработникЭПЛ";
				ТипТитула = "ТитулМедосмотрПослеШтатныйМедработник";
			Иначе
				ИмяХранимыхДанных    = "ХранимыеДанныеТитулМедосмотрПослеСтороннийМедработник";
				РеквизитыПодчиненнойФормы = ОписаниеРеквизитовФормы.ОписаниеРеквизитовФормыСтороннийМедработник;
				Тип = "СтороннийМедработникЭПЛ";
				ТипТитула = "ТитулМедосмотрПослеСтороннийМедработник";
			КонецЕсли;
			
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьСотрудника(МедработникВозврат, "ЭлектронныйПутевойЛист",
			Тип, РеквизитыПодчиненнойФормы); 
			ХранимыеДанные = СтруктураДанных.ХранимыеДанные;
			ДанныеДляЗаполнения.Вставить(ИмяХранимыхДанных, ХранимыеДанные);
			
			ДанныеМедработник = ОбменСГИСЭПДВызовСервера.ПолучитьОписаниеХранимыхДанныхЭПДПоСсылке(
			ХранимыеДанные,
			Тип);
			Если ТипЗнч(ДанныеМедработник) = Тип("Структура")
				И ДанныеМедработник.Свойство("ДанныеЗаполненияРеквизитовФормы") Тогда
				ДанныеЗаполненияРеквизитовФормы = ДанныеМедработник.ДанныеЗаполненияРеквизитовФормы;
				Для Каждого ТекСтрока Из ДанныеЗаполненияРеквизитовФормы Цикл
					ДанныеДляЗаполнения.Вставить(ТипТитула + ТекСтрока.Ключ, ТекСтрока.Значение);
				КонецЦикла;
			КонецЕсли;

		КонецЕсли; 
		
		ЭлектронныйПутевойЛист.ТекущийТитул = Титул;
		ЗаполнитьИдентификациюФайлаОбмена(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеВидМедосмотра", "2"); // Предрейсовый
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеДатаИВремяПроведения", ДатаИВремяПроведения);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеДатаИВремяПроведенияИспользуетсяUTC", "1");
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеОтметкаОРезультатеПроведения",
			Нстр("ru = 'Прошел послерейсовый медицинский осмотр'"));
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеВодительИдентификаторСтроки", "");
		
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеФайлЗаездИдентификаторФайла",     ЭлектронныйПутевойЛист.ТитулЗаездИдентификаторФайла);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеФайлЗаездДатаФормированияФайла",  ЭлектронныйПутевойЛист.ТитулЗаездДатаФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеФайлЗаездВремяФормированияФайла", ЭлектронныйПутевойЛист.ТитулЗаездВремяФормированияФайла);
		ДанныеДляЗаполнения.Вставить("ТитулМедосмотрПослеФайлЗаездЭлектроннаяПодпись",     ПодписьЗаездBase64);
		
		ЗаполнитьЗначенияСвойств(ЭлектронныйПутевойЛист, ДанныеДляЗаполнения);
		
		СтруктураРеквизитов = Новый ФиксированнаяСтруктура();
		ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитов(ЭлектронныйПутевойЛист.Ссылка, ЭлектронныйПутевойЛист.Организация, СтруктураРеквизитов);
		
		// Первый водитель
		ИндексВодителя = ?(ПовторныйШаг, 2, 1);
		Если СтруктураРеквизитов.Свойство("ТитулОформление") Тогда
			ТитулОформление = СтруктураРеквизитов.ТитулОформление;
			Если ТитулОформление.Количество() <> 0 Тогда
				ТитулОформление = СтруктураРеквизитов.ТитулОформление[0];
				Для Каждого ТекСтрока Из ТитулОформление Цикл
					Если СтрНайти(ТекСтрока.Ключ, "ТитулОформлениеВодители__" + ИндексВодителя + "__") <> 0 Тогда 
						Если ТекСтрока.Ключ = "ТитулОформлениеВодители__" + ИндексВодителя + "__ХранимыеДанныеВодитель" Тогда
							 ДанныеДляЗаполнения.Вставить("ХранимыеДанныеТитулМедосмотрПослеВодитель", ТекСтрока.Значение);
						Иначе
							ДанныеДляЗаполнения.Вставить(СтрЗаменить(ТекСтрока.Ключ, "ТитулОформлениеВодители__" + ИндексВодителя + "__", "ТитулМедосмотрПослеВодитель"), ТекСтрока.Значение);
						Конецесли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Уже есть существующий медосмотр
		Если СтруктураРеквизитов.Свойство("ТитулМедосмотрПосле") 
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ТитулМедосмотр = СтруктураРеквизитов.ТитулМедосмотрПосле; 
			Если ТитулМедосмотр.Количество() <> 0 Тогда
				ТитулМедосмотр1 = СтруктураРеквизитов.ТитулМедосмотрПосле[0];
				Если ТитулМедосмотр1.ТитулМедосмотрПослеВодительИдентификаторСтроки = ДанныеДляЗаполнения.ТитулМедосмотрПослеВодительИдентификаторСтроки Тогда
					НомерВерсии = ?(ПовторныйШаг, 1, 0);
				ИначеЕсли ТитулМедосмотр.Количество() > 1 Тогда 
					НомерВерсии = 1;
				КонецЕсли;
			КонецЕсли; 
		Иначе
			НомерВерсии = ?(ПовторныйШаг, 1, 0);
		КонецЕсли;
		РеквизитыТекущейВерсииТитула = ДанныеДляЗаполнения;
		РеквизитыТекущейВерсииТитула.Вставить(ПрефиксТитула + "УИДМинтранс", ЭлектронныйПутевойЛист.УИДМинтранс);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ВерсияТитула = Новый Структура;
	ВерсияТитула.Вставить("ДатаВерсии",         ДанныеДляЗаполнения[ПрефиксТитула + "ДатаФормированияФайла"]);
	ВерсияТитула.Вставить("ИдентификаторФайла", ДанныеДляЗаполнения[ПрефиксТитула + "ИдентификаторФайла"]);
	ВерсияТитула.Вставить("НомерВерсии",        НомерВерсии);
	ВерсияТитула.Вставить("Титул",              Титул);
		
	ЭлектронныйПутевойЛист.ДополнительныеСвойства.Вставить("НеТребуетсяИдентификацияФайла");
	ЭлектронныйПутевойЛист.ДополнительныеСвойства.Вставить("ВерсияТитула", ВерсияТитула);
	ЭлектронныйПутевойЛист.ДополнительныеСвойства.Вставить("НомерВерсии",  НомерВерсии);
	ЭлектронныйПутевойЛист.ДополнительныеСвойства.Вставить("СтруктураРеквизитов", РеквизитыТекущейВерсииТитула);

	Попытка 
		ЭлектронныйПутевойЛист.Записать(РежимЗаписиДокумента.Запись);
		Возврат ЭлектронныйПутевойЛист.Ссылка;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьСостоянияПЛ(мсвПутевыеЛисты, СостоянияПодписейПЛ, СоответвиеПЛЭД) Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвПутевыеЛисты", мсвПутевыеЛисты);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСостоянияПодписиПутевыхЛистов.МедработникПредрейсовый КАК МедработникПредрейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.МедработникПослерейсовый КАК МедработникПослерейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.МедработникВодитель2Предрейсовый КАК МедработникВодитель2Предрейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.МедработникВодитель2Послерейсовый КАК МедработникВодитель2Послерейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.КонтролерПредрейсовый КАК КонтролерПредрейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.КонтролерПослерейсовый КАК КонтролерПослерейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.УполномоченныйНаПроставлениеОдометраПредрейсовый КАК УполномоченныйНаПроставлениеОдометраПредрейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.УполномоченныйНаПроставлениеОдометраПослерейсовый КАК УполномоченныйНаПроставлениеОдометраПослерейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.ПутевойЛист КАК ПутевойЛист,
	               |	уатСостоянияПодписиПутевыхЛистов.ДиспетчерПредрейсовый КАК ДиспетчерПредрейсовый,
	               |	уатСостоянияПодписиПутевыхЛистов.ДиспетчерПослерейсовый КАК ДиспетчерПослерейсовый
	               |ИЗ
	               |	РегистрСведений.уатСостоянияПодписиПутевыхЛистов КАК уатСостоянияПодписиПутевыхЛистов
	               |ГДЕ
	               |	уатСостоянияПодписиПутевыхЛистов.ПутевойЛист В(&мсвПутевыеЛисты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПЛ,
	               |	уатСвязанныеДокументыЭПД.Рейс КАК Рейс,
	               |	уатСвязанныеДокументыЭПД.ЭПД.Дата КАК ЭПДДата,
	               |	уатСвязанныеДокументыЭПД.ЭПД.ТекущийТитул КАК ТекущийТитул,
	               |	ИСТИНА КАК ЕстьТитул1,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(уатСвязанныеДокументыЭПД.ЭПД.ТитулМедосмотрИдентификаторФайла КАК СТРОКА(50))) <> """"
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьТитул2,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(уатСвязанныеДокументыЭПД.ЭПД.ТитулВыпускИдентификаторФайла КАК СТРОКА(50))) <> """"
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьТитул3,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(уатСвязанныеДокументыЭПД.ЭПД.ТитулВыездИдентификаторФайла КАК СТРОКА(50))) <> """"
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьТитул4,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(уатСвязанныеДокументыЭПД.ЭПД.ТитулЗаездИдентификаторФайла КАК СТРОКА(50))) <> """"
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьТитул5,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(уатСвязанныеДокументыЭПД.ЭПД.ТитулМедосмотрПослеИдентификаторФайла КАК СТРОКА(50))) <> """"
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьТитул6,
	               |	уатСвязанныеДокументыЭПД.ЭПД.РольУчастника КАК РольУчастника
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.Рейс В(&мсвПутевыеЛисты)
	               |	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектронныйПутевойЛист)
	               |	И НЕ уатСвязанныеДокументыЭПД.ЭПД.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЭПДДата"; 
	
	ВыборкаСтатусы = Запрос.ВыполнитьПакет()[0].Выбрать(); 
	СостоянияПодписейПЛ = Новый Соответствие();
	Пока ВыборкаСтатусы.Следующий() Цикл 
		СостояниеПодписейПЛ = Новый Структура("МедработникПредрейсовый,МедработникПослерейсовый,МедработникВодитель2Предрейсовый,МедработникВодитель2Послерейсовый,
		|КонтролерПредрейсовый,КонтролерПослерейсовый,УполномоченныйНаПроставлениеОдометраПредрейсовый,УполномоченныйНаПроставлениеОдометраПослерейсовый,
		|ДиспетчерПредрейсовый,ДиспетчерПослерейсовый");
		ЗаполнитьЗначенияСвойств(СостояниеПодписейПЛ, ВыборкаСтатусы);
		СостоянияПодписейПЛ.Вставить(ВыборкаСтатусы.ПутевойЛист, СостояниеПодписейПЛ);
	КонецЦикла; 
	ВыборкаЭД = Запрос.ВыполнитьПакет()[1].Выбрать(); 
	СоответвиеПЛЭД = Новый Соответствие();
	Пока ВыборкаЭД.Следующий() Цикл 
		СостояниеПодписейПЛ = Новый Структура("ЭПЛ,РольУчастника,ЕстьТитул1,ЕстьТитул2,ЕстьТитул3,ЕстьТитул4,ЕстьТитул5,ЕстьТитул6,
		|Титул1Подписан,Титул2Подписан,Титул3Подписан,Титул4Подписан,Титул5Подписан,Титул6Подписан");
		ЗаполнитьЗначенияСвойств(СостояниеПодписейПЛ, ВыборкаЭД); 
		ЭПЛ = СостояниеПодписейПЛ.ЭПЛ;
		
		ПодписьОформлениеBase64     = ПолучитьПодписьТитулаBase64(ЭПЛ, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1"));
		ПодписьМедосмотрBase64      = ПолучитьПодписьТитулаBase64(ЭПЛ, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2"));
		ПодписьВыпускBase64         = ПолучитьПодписьТитулаBase64(ЭПЛ, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3"));
		ПодписьВыездBase64          = ПолучитьПодписьТитулаBase64(ЭПЛ, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4"));
		ПодписьЗаездBase64          = ПолучитьПодписьТитулаBase64(ЭПЛ, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5"));
		ПодписьМедосмотрПослеBase64 = ПолучитьПодписьТитулаBase64(ЭПЛ, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6"));
		
		СостояниеПодписейПЛ.Титул1Подписан = ЗначениеЗаполнено(ПодписьОформлениеBase64);
		
		Если НЕ СостояниеПодписейПЛ.ЕстьТитул2 Тогда
			СостояниеПодписейПЛ.ЕстьТитул2 = ЗначениеЗаполнено(ПодписьОформлениеBase64);
		КонецЕсли; 
		Если НЕ СостояниеПодписейПЛ.ЕстьТитул3 Тогда
			СостояниеПодписейПЛ.ЕстьТитул3 = ЗначениеЗаполнено(ПодписьОформлениеBase64);
		КонецЕсли; 
		СостояниеПодписейПЛ.Титул2Подписан = ЗначениеЗаполнено(ПодписьМедосмотрBase64);
		СостояниеПодписейПЛ.Титул3Подписан = ЗначениеЗаполнено(ПодписьВыпускBase64);
		
		Если НЕ СостояниеПодписейПЛ.ЕстьТитул4 Тогда
			СостояниеПодписейПЛ.ЕстьТитул4 = ЗначениеЗаполнено(ПодписьОформлениеBase64) И ЗначениеЗаполнено(ПодписьВыпускBase64);
		КонецЕсли;
		СостояниеПодписейПЛ.Титул4Подписан = ЗначениеЗаполнено(ПодписьВыездBase64);  
		
		Если НЕ СостояниеПодписейПЛ.ЕстьТитул5 Тогда
			СостояниеПодписейПЛ.ЕстьТитул5 = ЗначениеЗаполнено(ПодписьВыездBase64);
		КонецЕсли;
		СостояниеПодписейПЛ.Титул5Подписан = ЗначениеЗаполнено(ПодписьЗаездBase64);
		
		Если НЕ СостояниеПодписейПЛ.ЕстьТитул6 
			И СостояниеПодписейПЛ.ЭПЛ.ТитулОформлениеОбязательностьМедОсмотраПосле = "1" Тогда
			СостояниеПодписейПЛ.ЕстьТитул6 = ЗначениеЗаполнено(ПодписьЗаездBase64);
		КонецЕсли; 
		СостояниеПодписейПЛ.Титул6Подписан = ЗначениеЗаполнено(ПодписьМедосмотрПослеBase64);
		
		СоответвиеПЛЭД.Вставить(ВыборкаСтатусы.ПутевойЛист, СостояниеПодписейПЛ);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИзмененияКлючевыхРеквизитовЭПЛ(ДокументОбъект) Экспорт
	
	Результат = Новый СписокЗначений;
	
	СоответвиеПЛЭД      = Новый Соответствие();
	СостоянияПодписейПЛ = Новый Соответствие();
	мсвПутевыеЛисты     = Новый Массив();
	мсвПутевыеЛисты.Добавить(ДокументОбъект.Ссылка);
	уатОбменСГИСЭПД.ЗаполнитьСостоянияПЛ(мсвПутевыеЛисты, СостоянияПодписейПЛ, СоответвиеПЛЭД);
	ДанныеЭПЛ = СоответвиеПЛЭД.Получить(ДокументОбъект.Ссылка);
	
	Если ДанныеЭПЛ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	мсвИзмененнныеРеквизиты = Новый Массив;
	Для Каждого ТекРеквизит Из Метаданные.Документы.уатПутевойЛист.Реквизиты Цикл
		Если ДокументОбъект[ТекРеквизит.Имя] <> ДокументОбъект.Ссылка[ТекРеквизит.Имя] Тогда
			мсвИзмененнныеРеквизиты.Добавить(ТекРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Если НЕ СравнитьТабличныеЧасти(ДокументОбъект.Прицепы, ДокументОбъект.Ссылка.Прицепы, "ТС") Тогда
		мсвИзмененнныеРеквизиты.Добавить("Прицепы");
	КонецЕсли;
	
	мсвРеквизитовТитула = Новый Массив();
	Если ДанныеЭПЛ.ЕстьТитул1 Тогда
		мсвРеквизитовТитула.Добавить("Организация");
		мсвРеквизитовТитула.Добавить("Номер");
		мсвРеквизитовТитула.Добавить("Дата");
		мсвРеквизитовТитула.Добавить("ДействителенДо");
		мсвРеквизитовТитула.Добавить("ВидПеревозки");
		мсвРеквизитовТитула.Добавить("ВидСообщения");
		мсвРеквизитовТитула.Добавить("Медорганизация");
		мсвРеквизитовТитула.Добавить("КонтрольТранспорта");
		мсвРеквизитовТитула.Добавить("ПоказанияОдометра");
		мсвРеквизитовТитула.Добавить("ОбязательныйПослерейсовыйМедосмотр");
		мсвРеквизитовТитула.Добавить("Водитель1");
		мсвРеквизитовТитула.Добавить("Водитель2");
		мсвРеквизитовТитула.Добавить("Прицепы");
		мсвРеквизитовТитула.Добавить("ТС");
		Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
			Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
				Результат.Добавить(ДанныеЭПЛ.ЭПЛ, "ДиспетчерПредрейсовый");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Если ДанныеЭПЛ.Титул1Подписан
	//	И ДанныеЭПЛ.ЕстьТитул2 Тогда
	//	мсвРеквизитовТитула.Добавить("МедработникВыезд"); 
	//	мсвРеквизитовТитула.Добавить("Медорганизация");
	//	мсвРеквизитовТитула.Добавить("Водитель1");
	//	мсвРеквизитовТитула.Добавить("Водитель2");
	//	
	//	Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
	//		Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
	//			Рез.Добавить(ДанныеЭПЛ.ЭПЛ, "МедработникПредрейсовый");
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли; 
	//Если ДанныеЭПЛ.Титул1Подписан
	//	И ДанныеЭПЛ.ЕстьТитул3 Тогда
	//	мсвРеквизитовТитула.Добавить("ВыпустилМеханик"); 
	//	мсвРеквизитовТитула.Добавить("КонтрольТранспорта");
	//	мсвРеквизитовТитула.Добавить("ТС");
	//	Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
	//		Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
	//			Рез.Добавить(ДанныеЭПЛ.ЭПЛ, "КонтролерПредрейсовый");
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//Если ДанныеЭПЛ.Титул3Подписан
	//	И ДанныеЭПЛ.ЕстьТитул4 Тогда
	//	мсвРеквизитовТитула.Добавить("УполномоченныйНаПроставлениеОдометраПриВыезде"); 
	//	мсвРеквизитовТитула.Добавить("ПоказанияОдометра");
	//	мсвРеквизитовТитула.Добавить("ТС"); 
	//	мсвРеквизитовТитула.Добавить("СпидометрВыезда");
	//	
	//	Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
	//		Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
	//			Рез.Добавить(ДанныеЭПЛ.ЭПЛ, "УполномоченныйНаПроставлениеОдометраПредрейсовый");
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//Если ДанныеЭПЛ.Титул4Подписан
	//	И ДанныеЭПЛ.ЕстьТитул5 Тогда
	//	мсвРеквизитовТитула.Добавить("УполномоченныйНаПроставлениеОдометраПриВозврате"); 
	//	мсвРеквизитовТитула.Добавить("ПоказанияОдометра");
	//	мсвРеквизитовТитула.Добавить("ТС"); 
	//	мсвРеквизитовТитула.Добавить("СпидометрВозвращения");
	//	
	//	Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
	//		Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
	//			Рез.Добавить(ДанныеЭПЛ.ЭПЛ, "УполномоченныйНаПроставлениеОдометраПослерейсовый");
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли; 
	//Если ДанныеЭПЛ.Титул5Подписан
	//	И ДанныеЭПЛ.ЕстьТитул6 Тогда
	//	мсвРеквизитовТитула.Добавить("МедработникВозврат"); 
	//	мсвРеквизитовТитула.Добавить("Медорганизация");
	//	мсвРеквизитовТитула.Добавить("Водитель1");
	//	мсвРеквизитовТитула.Добавить("Водитель2");
	//	
	//	Для Каждого ТекРеквизит Из мсвРеквизитовТитула Цикл
	//		Если мсвИзмененнныеРеквизиты.Найти(ТекРеквизит) <> Неопределено Тогда
	//			Рез.Добавить(ДанныеЭПЛ.ЭПЛ, "МедработникПослерейсовый");
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьQRЭПЛ(ЭПЛ, Отправитель, УИДМинтранс) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЭПЛ", ЭПЛ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатСвязанныеДокументыЭПД.QR КАК QR
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД = &ЭПЛ";
	Выборка = Запрос.Выполнить().Выбрать(); 

	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.QR) Тогда
			Возврат Выборка.QR;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТокеныАвторизацииЭПД.Токен КАК Токен
	|ИЗ
	|	РегистрСведений.ТокеныАвторизацииЭПД КАК ТокеныАвторизацииЭПД
	|ГДЕ
	|	ТокеныАвторизацииЭПД.Отправитель = &Отправитель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Base64QR = "";
	Если Выборка.Следующий() Тогда
		Попытка
			ДвоичныеДанныеQR = ОбменСГИСЭПД.ПолучитьQRКодОтОператора(Отправитель, УИДМинтранс, Выборка.Токен);
			Base64QR         = Base64Строка(ДвоичныеДанныеQR);
		Исключение
		КонецПопытки;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Base64QR) Тогда
		НаборЗаписей = РегистрыСведений.уатСвязанныеДокументыЭПД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭПД.Установить(ЭПЛ); 
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись из НаборЗаписей Цикл
			Запись.QR = Base64QR;
		КонецЦикла; 
		НаборЗаписей.Записать(); 
	КонецЕсли;
	Возврат СтрЗаменить(Base64QR, Символы.ПС, "");
	
КонецФункции

Функция ПолучитьПрицепПЛ(ТекПЛ, НомерПрицепа) Экспорт
	Возврат ТекПЛ.Прицепы[НомерПрицепа].ТС;
КонецФункции

Процедура ОбработатьФайлПереносаПЛ() Экспорт
	//ПолноеИмяФайла = "C:\Users\tatiyk\Desktop\Газпром\ЭДО\Новая папка (2)\ЭПД\утевыеЛисты_тест_ Астрал ООО08092023021503.txt";
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.Прочитать(ПолноеИмяФайла, КодировкаТекста.UTF8);
	//ТекстJSON = ТекстовыйФайл.ПолучитьТекст();
	//
	//ЧтениеJSON = Новый ЧтениеJSON();
	//ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	//СоответвиеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	//ЧтениеJSON.Закрыть();
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭТН

Функция ЗначенияЗаполненияЭТН()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяГрузополучатель",  Справочники.Контрагенты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяДоверенностьНомер",      "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяДоверенностьДата",       Дата(1,1,1));
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяВалюта",           Справочники.Валюты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяКодВалюты",              "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяНаименованиеВалюты",     "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяСтоимостьГруза",         0);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяМассаБруттоГруза",       0);
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяПеревозчик",       Справочники.Контрагенты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ЭтоКонтейнернаяПеревозка",                    Ложь);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяПодписантКодСтатуса",    "1");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяАдресПогрузки",                ""); 
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяГрузополучательАдресДоставки", "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяЗаявленныеДатаВремяПодачиИспользуетсяUTC",  Истина);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяФактическиеДатаВремяПодачиИспользуетсяUTC", Истина);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяФактическиеДатаВремяУбытияИспользуетсяUTC", Истина);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяКодМетодаОпределенияМассыГруза",            "03"); 
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяЛицоОсуществляющееПогрузкуЯвляетсяГрузоотправителем", "1");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяВладелецПунктаПогрузкиЯвляетсяГрузоотправителем",     "1");
	
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяЛицоИмеющееПолномочияПереадресовки",    "Грузоотправитель");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяСпособПередачиУказанияНаПереадресовку", "Электронное уведомление перевозчика о переадресовке");

	
	// Табличные части
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяВодители", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяПрицепы",  Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяГрузы",    Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяВодительНомераТелефонов", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяПереченьМаркировокГруза", Новый Массив());
	ЗначенияЗаполнения.Вставить("ДокументыОснования", Новый Массив());

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ПодготовитьДанныеДляСозданияЭлектронныхТранспортныхНакладных(ЗаказНаТС, Рейс, ДопДанные)
	
	ИмяДокумента = "ЭлектроннаяТранспортнаяНакладная";
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Запрос.УстановитьПараметр("Рейс",      Рейс); 
	Запрос.УстановитьПараметр("ТекДата",   ТекущаяДатаСеанса());
	Запрос.Текст = ПолучитьТекстЗапросаДляСозданияЭлектронныхТранспортныхНакладных();
	
	ДанныеЗаполнения = Запрос.ВыполнитьПакет()[4].Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДанныеПоДокументамОснованиям = Новый Структура();
	ДанныеПоДокументамОснованиям.Вставить("Организация", ДанныеЗаполнения.Организация); 
	ДанныеПоДокументамОснованиям.Вставить("Дата",        ДанныеЗаполнения.Дата);
	ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяЗаказНомер", ДанныеЗаполнения.Номер);
	ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяЗаказДата",  ДанныеЗаполнения.Дата);
	
	Грузоотправитель               = ДанныеЗаполнения.Грузоотправитель;
	Грузополучатель                = ДанныеЗаполнения.Грузополучатель; 
	АдресОтправленияЗначениеАдреса = ДанныеЗаполнения.АдресОтправленияЗначениеАдреса;
	АдресНазначенияЗначениеАдреса  = ДанныеЗаполнения.АдресНазначенияЗначениеАдреса;
	Заказчик                       = ДанныеЗаполнения.Заказчик;
	Груз                           = Неопределено;
	ПунктОтправления               = Неопределено;
    ПунктНазначения                = Неопределено;
	
	Если ДопДанные.Свойство("ДопПараметрыСоздания") Тогда
		ДопПараметрыСоздания           = ДопДанные.ДопПараметрыСоздания;
		Грузоотправитель               = ДопПараметрыСоздания.Грузоотправитель;
		Грузополучатель                = ДопПараметрыСоздания.Грузополучатель;
		ПунктОтправления               = ДопПараметрыСоздания.ПунктОтправления;
		ПунктНазначения                = ДопПараметрыСоздания.ПунктНазначения;
		АдресОтправленияЗначениеАдреса = ДопПараметрыСоздания.ПунктОтправления.ЗначениеАдреса;
		АдресНазначенияЗначениеАдреса  = ДопПараметрыСоздания.ПунктНазначения.ЗначениеАдреса; 
		Груз                           = ДопПараметрыСоздания.Груз;
	КонецЕсли;
		
	// Грузоотправитель
	Если НЕ ЗначениеЗаполнено(Грузоотправитель) Тогда 
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", ДанныеЗаполнения.Организация);
	ИначеЕсли ТипЗнч(Грузоотправитель) = Тип("СправочникСсылка.Склады") Тогда  
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", ДанныеЗаполнения.Организация);
	ИначеЕсли ЗначениеЗаполнено(Грузоотправитель)
		И ДанныеЗаполнения.ГрузоотправительОрганизация Тогда
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", ДанныеЗаполнения.Организация);
	Иначе
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", Грузоотправитель); 
	КонецЕсли;
	Если НЕ СинхронизацияЭДО.ЕстьУчетныеЗаписи(
		ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузоотправитель) Тогда
		ДанныеПоДокументамОснованиям.Вставить("ГрузоотправительНеПодключен", Истина);
	КонецЕсли;    
	
	РеквизитыУчастника = ПолучитьРеквизитыУчастника(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузоотправитель,
		"ТитулГрузоотправителяГрузоотправитель");  
	ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, РеквизитыУчастника, Истина);
	
	Если ДанныеПоДокументамОснованиям.ТитулГрузоотправителяГрузоотправительНомераТелефонов.Количество() <> 0 Тогда
		ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяОтветственныйЗаПереадресовкуНомераТелефонов__1__Телефон",
			ДанныеПоДокументамОснованиям.ТитулГрузоотправителяГрузоотправительНомераТелефонов[0].Телефон);
	КонецЕсли;
	
	// Грузополучатель
	Если НЕ ЗначениеЗаполнено(Грузополучатель) Тогда 
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", ДанныеЗаполнения.Организация);
	ИначеЕсли ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.Склады") Тогда  
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", ДанныеЗаполнения.Организация); 
	ИначеЕсли ЗначениеЗаполнено(Грузополучатель)
		И ДанныеЗаполнения.ГрузополучательОрганизация Тогда
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", ДанныеЗаполнения.Организация);
	ИначеЕсли ЗначениеЗаполнено(Грузополучатель) Тогда
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", Грузополучатель); 
	КонецЕсли;
	Если ТипЗнч(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузополучатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту(
			ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузополучатель) Тогда
			ДанныеПоДокументамОснованиям.Вставить("ГрузополучательНеПодключен", Истина);
		КонецЕсли; 
	КонецЕсли;
    РеквизитыУчастника = ПолучитьРеквизитыУчастника(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузополучатель,
		"ТитулГрузоотправителяГрузополучатель");
	ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, РеквизитыУчастника, Истина);
	
	// Перевозчик
	Если ЗначениеЗаполнено(Рейс) Тогда
		ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяПеревозчик", ДанныеЗаполнения.Перевозчик); 
		РеквизитыУчастника = ПолучитьРеквизитыУчастника(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяПеревозчик,
		"ТитулГрузоотправителяПеревозчик");  
		ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, РеквизитыУчастника, Истина);
		
		Если ЗначениеЗаполнено(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяПеревозчик)
			И НЕ ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту(
			ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяПеревозчик) Тогда
			ДанныеПоДокументамОснованиям.Вставить("ПеревозчикНеПодключен", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Заказчик
	Если ТипЗнч(Заказчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту(
			ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузополучатель) Тогда
			ДанныеПоДокументамОснованиям.Вставить("Заказчик", Заказчик);
			ДанныеПоДокументамОснованиям.Вставить("ЗаказчикНеПодключен", Истина);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ДанныеПоДокументамОснованиям.Свойство("ГрузоотправительНеПодключен")
		ИЛИ ДанныеПоДокументамОснованиям.Свойство("ГрузополучательНеПодключен")
		ИЛИ ДанныеПоДокументамОснованиям.Свойство("ЗаказчикНеПодключен")
		ИЛИ ДанныеПоДокументамОснованиям.Свойство("ПеревозчикНеПодключен") Тогда
		Возврат ДанныеПоДокументамОснованиям;
	КонецЕсли;
	
	ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулГрузоотправителяВалюта", ДанныеЗаполнения.ВалютаТоваров);
	
	Если ТипЗнч(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяВалюта) = Тип("СправочникСсылка.Валюты")  Тогда
		ДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяВалюта, "Ссылка, Код, Наименование");
		ВалютаТоваров  = ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяВалюта;
	Иначе
		Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
			мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
		Иначе
			мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		ДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(мВалютаУпрУчета, "Ссылка, Код, Наименование");
		ВалютаТоваров  = мВалютаУпрУчета;
	КонецЕсли;
	ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяКодВалюты",          ДанныепоВалюте.Код);
	ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяНаименованиеВалюты", ДанныепоВалюте.Наименование);
	
	ДатаКурса     = ДанныеЗаполнения.ДатаКурса; 
	
	СтруктураАдреса = Новый Структура();
	ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, 
				ДанныеЗаполненияАдрес(АдресОтправленияЗначениеАдреса, "ТитулГрузоотправителяАдресПогрузки",
				СтруктураАдреса, Истина, ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузоотправитель),
				Истина);
				
	ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, 
				ДанныеЗаполненияАдрес(АдресНазначенияЗначениеАдреса, "ТитулГрузоотправителяГрузополучательАдресДоставки",
				СтруктураАдреса, Истина, ДанныеПоДокументамОснованиям.СсылкаТитулГрузоотправителяГрузополучатель),
				Истина);   
				
	ВыборкаГруз = Запрос.ВыполнитьПакет()[8].Выбрать();
	
	СоответвиеГрузовЗаказа = Новый Соответствие();
	Пока ВыборкаГруз.Следующий() Цикл
		
		Если Груз <> Неопределено Тогда
			Если ВыборкаГруз.ИсходныйГруз <> Груз
				ИЛИ ВыборкаГруз.ПунктОтправления <> ПунктОтправления
				ИЛИ ВыборкаГруз.ПунктНазначения <> ПунктНазначения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаГруз.Валюта) Тогда
			Валюта = ВалютаТоваров;
		Иначе
			Валюта = ВыборкаГруз.Валюта;
		КонецЕсли;
		Если Валюта <> ВалютаТоваров Тогда  
			СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
			СтруктураКурса     = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаТоваров, ДатаКурса); 
			
			Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ВыборкаГруз.Цена,
			Валюта, ВалютаТоваров,
			СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность); 
		Иначе
			Цена = ВыборкаГруз.Цена;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура("Груз,Цена,Ширина,Высота,Длина,ВесНетто,ВесТары,ОбъемГруза,Количество,КоличествоГрузовыхМест,ЕдиницаИзмерения",
			ВыборкаГруз.ИсходныйГруз, 0, 0, 0, 0, 0, 0, 0, 0, 0, ВыборкаГруз.ЕдиницаИзмерения);
		ТекГруз = СоответвиеГрузовЗаказа.Получить(ВыборкаГруз.ИсходныйГруз);
		Если ТекГруз <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекГруз);
		КонецЕсли;
		
		СтруктураДанных.Груз                   = ВыборкаГруз.ИсходныйГруз;
		СтруктураДанных.Количество             = СтруктураДанных.Количество + ВыборкаГруз.Количество;
		СтруктураДанных.ВесНетто               = СтруктураДанных.ВесНетто + ВыборкаГруз.ВесНетто;
		СтруктураДанных.ВесТары                = СтруктураДанных.ВесТары + ВыборкаГруз.ВесТары;
		СтруктураДанных.ОбъемГруза             = СтруктураДанных.ОбъемГруза + ВыборкаГруз.ОбъемГруза;
		СтруктураДанных.КоличествоГрузовыхМест = СтруктураДанных.КоличествоГрузовыхМест + ВыборкаГруз.КоличествоГрузовыхМест;
		СтруктураДанных.Ширина                 = Макс(СтруктураДанных.Ширина, ВыборкаГруз.Ширина);
		СтруктураДанных.Высота                 = Макс(СтруктураДанных.Высота, ВыборкаГруз.Высота);
		СтруктураДанных.Длина                  = Макс(СтруктураДанных.Длина,  ВыборкаГруз.Длина); 
		СтруктураДанных.Цена                   = Цена;
			
		СоответвиеГрузовЗаказа.Вставить(ВыборкаГруз.ИсходныйГруз, СтруктураДанных);
	КонецЦикла;
				
	Если ЗначениеЗаполнено(Рейс) Тогда
		
		ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяВодители",         Новый Массив());
		ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяВодительНомераТелефонов", Новый Массив());
		
		// Водители
		ГруппаДанных            = "Водитель";
		ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыВодитель;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Водитель1) Тогда
			СтруктураВодитель = Новый Структура("Ссылка, ФИО, ИНН, ФизическоеЛицо");
			СтруктураВодитель.Ссылка         = ДанныеЗаполнения.Водитель1;
			СтруктураВодитель.ФИО            = ДанныеЗаполнения.Водитель1ФИО;
			СтруктураВодитель.ИНН            = ДанныеЗаполнения.Водитель1ИНН;
			СтруктураВодитель.ФизическоеЛицо = ДанныеЗаполнения.Водитель1ФизическоеЛицо;
			
			НоваяСтрока = ЗаполнитьСотрудника(СтруктураВодитель, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
			НоваяСтрока.Вставить("ХранимыеДанныеВодитель", НоваяСтрока.ХранимыеДанные);
			НоваяСтрока.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));  
			НоваяСтрока.Удалить("ХранимыеДанные");   
			
			НомераТелефонов = НоваяСтрока.НомераТелефонов;
			НоваяСтрока.Удалить("НомераТелефонов"); 
			Для Каждого ТекТелефон Из НомераТелефонов Цикл
				НоваяСтрокаТелефон = Новый Структура("ИдентификаторСтрокиРодителя, Телефон");
				НоваяСтрокаТелефон.ИдентификаторСтрокиРодителя = НоваяСтрока.ИдентификаторСтроки;
				НоваяСтрокаТелефон.Телефон                     = ТекТелефон.Телефон; 
				ДанныеПоДокументамОснованиям.ТитулГрузоотправителяВодительНомераТелефонов.Добавить(НоваяСтрокаТелефон);
			КонецЦикла;
			
			ДанныеПоДокументамОснованиям.ТитулГрузоотправителяВодители.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Водитель2) Тогда
			СтруктураВодитель = Новый Структура("Ссылка, ФИО, ИНН, ФизическоеЛицо");
			СтруктураВодитель.Ссылка         = ДанныеЗаполнения.Водитель2;
			СтруктураВодитель.ФИО            = ДанныеЗаполнения.Водитель2ФИО;
			СтруктураВодитель.ИНН            = ДанныеЗаполнения.Водитель2ИНН;
			СтруктураВодитель.ФизическоеЛицо = ДанныеЗаполнения.Водитель2ФизическоеЛицо;
			
			НоваяСтрока = ЗаполнитьСотрудника(СтруктураВодитель, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
			НоваяСтрока.Вставить("ХранимыеДанныеВодитель", НоваяСтрока.ХранимыеДанные);
			НоваяСтрока.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));  
			НоваяСтрока.Удалить("ХранимыеДанные");
			
			НомераТелефонов = НоваяСтрока.НомераТелефонов;
			НоваяСтрока.Удалить("НомераТелефонов");
			Для Каждого ТекТелефон Из НомераТелефонов Цикл
				НоваяСтрокаТелефон = Новый Структура("ИдентификаторСтрокиРодителя, Телефон");
				НоваяСтрокаТелефон.ИдентификаторСтрокиРодителя = НоваяСтрока.ИдентификаторСтроки;
				НоваяСтрокаТелефон.Телефон                     = ТекТелефон.Телефон; 
				ДанныеПоДокументамОснованиям.ТитулГрузоотправителяВодительНомераТелефонов.Добавить(НоваяСтрокаТелефон);
			КонецЦикла;
			
			ДанныеПоДокументамОснованиям.ТитулГрузоотправителяВодители.Добавить(НоваяСтрока);

		КонецЕсли;
		
		// Прицепы
		МассивПрицепов          = Новый Массив(); 
		ГруппаДанных            = "Прицеп";
		ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыПрицеп;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Прицеп1) Тогда 
			СтруктураТС = Новый Структура("Ссылка, СТС, VIN, ГосударственныйНомер, Марка, Грузоподъемность, ОбъемКузова, ВидТС, ТипВладенияТС");
			СтруктураТС.Ссылка               = ДанныеЗаполнения.Прицеп1;
			СтруктураТС.СТС                  = СтрЗаменить(ДанныеЗаполнения.Прицеп1СТС, " ", "");
			СтруктураТС.VIN                  = ДанныеЗаполнения.Прицеп1VIN;
			СтруктураТС.ГосударственныйНомер = ДанныеЗаполнения.Прицеп1ГосударственныйНомер;
			СтруктураТС.Марка                = ДанныеЗаполнения.Прицеп1Марка;
			СтруктураТС.Грузоподъемность     = ДанныеЗаполнения.Прицеп1Грузоподъемность;
			СтруктураТС.ОбъемКузова          = ДанныеЗаполнения.Прицеп1ОбъемКузова; 
			СтруктураТС.ВидТС                = ДанныеЗаполнения.Прицеп1ВидТС;
			СтруктураТС.ТипВладенияТС        = ДанныеЗаполнения.Прицеп1ТипВладенияТС;
			
			НоваяСтрокаПрицеп = ЗаполнитьТС(СтруктураТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
			НоваяСтрокаПрицеп.Вставить("ХранимыеДанныеПрицеп",   НоваяСтрокаПрицеп.ХранимыеДанные);
			НоваяСтрокаПрицеп.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));
			НоваяСтрокаПрицеп.Удалить("ХранимыеДанные");

			МассивПрицепов.Добавить(НоваяСтрокаПрицеп);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Прицеп2) Тогда 
			СтруктураТС = Новый Структура("Ссылка, СТС, VIN, ГосударственныйНомер, Марка, Грузоподъемность, ОбъемКузова, ВидТС, ТипВладенияТС");
			СтруктураТС.Ссылка               = ДанныеЗаполнения.Прицеп2;
			СтруктураТС.СТС                  = СтрЗаменить(ДанныеЗаполнения.Прицеп2СТС, " ", "");
			СтруктураТС.VIN                  = ДанныеЗаполнения.Прицеп2VIN;
			СтруктураТС.ГосударственныйНомер = ДанныеЗаполнения.Прицеп2ГосударственныйНомер;
			СтруктураТС.Марка                = ДанныеЗаполнения.Прицеп2Марка;
			СтруктураТС.Грузоподъемность     = ДанныеЗаполнения.Прицеп2Грузоподъемность;
			СтруктураТС.ОбъемКузова          = ДанныеЗаполнения.Прицеп2ОбъемКузова; 
			СтруктураТС.ВидТС                = ДанныеЗаполнения.Прицеп2ВидТС; 
			СтруктураТС.ТипВладенияТС        = ДанныеЗаполнения.Прицеп2ТипВладенияТС;
			
			НоваяСтрокаПрицеп = ЗаполнитьТС(СтруктураТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
			НоваяСтрокаПрицеп.Вставить("ХранимыеДанныеПрицеп",   НоваяСтрокаПрицеп.ХранимыеДанные);
			НоваяСтрокаПрицеп.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));
			НоваяСтрокаПрицеп.Удалить("ХранимыеДанные");

			МассивПрицепов.Добавить(НоваяСтрокаПрицеп);
		КонецЕсли;
		
		Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
			ВыборкаПрицеп = Запрос.ВыполнитьПакет()[9].Выбрать(); 
			Пока ВыборкаПрицеп.Следующий() Цикл   
				СтруктураТС = Новый Структура("Ссылка, СТС, VIN, ГосударственныйНомер, Марка, Грузоподъемность, ОбъемКузова, ВидТС");
				СтруктураТС.Ссылка               = ДанныеЗаполнения.Прицеп;
				СтруктураТС.СТС                  = СтрЗаменить(ДанныеЗаполнения.ПрицепСТС, " ", "");
				СтруктураТС.VIN                  = ДанныеЗаполнения.ПрицепVIN;
				СтруктураТС.ГосударственныйНомер = ДанныеЗаполнения.ПрицепГосударственныйНомер;
				СтруктураТС.Марка                = ДанныеЗаполнения.ПрицепМарка;
				СтруктураТС.Грузоподъемность     = ДанныеЗаполнения.ПрицепГрузоподъемность;
				СтруктураТС.ОбъемКузова          = ДанныеЗаполнения.ПрицепОбъемКузова;
				СтруктураТС.ВидТС                = ДанныеЗаполнения.ПрицепВидТС;
			    СтруктураТС.ТипВладенияТС        = ДанныеЗаполнения.ПрицепТипВладенияТС;
				
				НоваяСтрокаПрицеп = ЗаполнитьТС(СтруктураТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
				НоваяСтрокаПрицеп.Вставить("ХранимыеДанныеПрицеп",   НоваяСтрокаПрицеп.ХранимыеДанные);
				НоваяСтрокаПрицеп.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));
				НоваяСтрокаПрицеп.Удалить("ХранимыеДанные");
				
				МассивПрицепов.Добавить(НоваяСтрокаПрицеп);
			КонецЦикла;
		КонецЕсли;
		ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяПрицепы", МассивПрицепов);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ТС) Тогда
			СтруктураТС = Новый Структура("Ссылка, СТС, VIN, ГосударственныйНомер, Марка, Грузоподъемность, ОбъемКузова, ВидТС, ТипВладенияТС");
			СтруктураТС.Ссылка               = ДанныеЗаполнения.ТС;
			СтруктураТС.СТС                  = СтрЗаменить(ДанныеЗаполнения.ТССТС, " ", "");
			СтруктураТС.VIN                  = ДанныеЗаполнения.ТСVIN;
			СтруктураТС.ГосударственныйНомер = ДанныеЗаполнения.ТСГосударственныйНомер;
			СтруктураТС.Марка                = ДанныеЗаполнения.ТСМарка;
			СтруктураТС.Грузоподъемность     = ДанныеЗаполнения.ТСГрузоподъемность;
			СтруктураТС.ОбъемКузова          = ДанныеЗаполнения.ТСОбъемКузова;
			СтруктураТС.ВидТС                = ДанныеЗаполнения.ТСВидТС;
			СтруктураТС.ТипВладенияТС        = ДанныеЗаполнения.ТСТипВладенияТС;
			
			ГруппаДанных            = "ТитулГрузоотправителяТранспортноеСредство";
			ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыТС;
			ДанныеТС = ЗаполнитьТС(СтруктураТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы, МассивПрицепов);
			ДанныеТС.Вставить("ХранимыеДанныеТитулГрузоотправителяТранспортноеСредство", ДанныеТС.ХранимыеДанные);
			ДанныеТС.Удалить("ХранимыеДанные");
			
			ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, ДанныеТС, Истина);
		КонецЕсли;

		Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			Для Каждого ТекСтрока Из Рейс.Задание Цикл
				Если ТекСтрока.ЗаказНаТС = ЗаказНаТС Тогда
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяФактическиеДатаВремяПодачи", ТекСтрока.ВремяПрибытия);
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяФактическиеДатаВремяУбытия", ТекСтрока.ВремяУбытия); 
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяМассаБруттоГруза",           ТекСтрока.КоличествоТонн);
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяКоличествоГрузовыхМест",     ТекСтрока.Количество);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Рейс) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			Для Каждого ТекСтрока Из Рейс.Заказы Цикл
				Если ТекСтрока.ЗаказГрузоотправителя = ЗаказНаТС Тогда
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяЗаявленныеДатаВремяПодачи",  ТекСтрока.ПрибытиеПлан);
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяФактическиеДатаВремяПодачи", ТекСтрока.ПрибытиеФакт);
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяФактическиеДатаВремяУбытия", ТекСтрока.УбытиеФакт); 
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяМассаБруттоГруза",           ТекСтрока.ВесБрутто - ТекСтрока.ВесТары);
					ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяКоличествоГрузовыхМест",     ТекСтрока.Количество);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		МассивГрузовРейс = Новый Массив(); 
		СоответвиеГрузов = Новый Соответствие();
		Если ТипЗнч(Рейс) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда 
			МассивЗаказов = Рейс.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя", ЗаказНаТС));
			
			СоответвиеГрузов = Новый Соответствие();
			Для Каждого ТекСтрока Из МассивЗаказов Цикл
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда 
					
					Ширина = 0;
					Высота = 0;
					Длина  = 0;
					Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
						Груз               = "Товары народного потребления";
						Валюта             = ВалютаТоваров;
						КодВалюты          = ДанныепоВалюте.Код;
						НаименованиеВалюты = ДанныепоВалюте.Наименование;
						ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
						Ширина = 0;
						Высота = 0;
						Длина  = 0;
					ИначеЕсли ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
						И ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидГруза) Тогда
						Груз = ТекСтрока.Номенклатура.уатВидГруза;
						ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(ТекСтрока.Номенклатура);
						ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
						Если ВесОбъем.Свойство("Длина") Тогда
							Длина  = ВесОбъем.Длина;
							Ширина = ВесОбъем.Ширина;
							Высота = ВесОбъем.Высота;
						КонецЕсли;
					Иначе
						Груз = ТекСтрока.Номенклатура;
						ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
						Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
							Если ТекГрузЗаказа <> Неопределено Тогда
								Длина  = ТекГрузЗаказа.Длина;
								Ширина = ТекГрузЗаказа.Ширина;
								Высота = ТекГрузЗаказа.Высота;
							Конецесли;
						Иначе
							ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
							Если ВесОбъем.Свойство("Длина") Тогда
								Длина  = ВесОбъем.Длина;
								Ширина = ВесОбъем.Ширина;
								Высота = ВесОбъем.Высота;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					ТекГруз = СоответвиеГрузов.Получить(Груз);
					СтруктураДанных = Новый Структура("Груз,ВесНетто,ВесТары,ОбъемГруза,КоличествоГрузовыхМест,
					|СтоимостьГруза,Ширина,Высота,Длина",
					Груз, 0, 0, 0, 0, 0, 0, 0, 0, ДанныепоВалюте.Код, ДанныепоВалюте.Наименование); 
					Если ТекГруз <> Неопределено Тогда 
						ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекГруз);
					КонецЕсли;
					
					СтруктураДанных.Груз                   = Груз; 
					СтруктураДанных.ВесНетто               = СтруктураДанных.ВесНетто + ТекСтрока.ВесБрутто;
					СтруктураДанных.ВесТары                = СтруктураДанных.ВесТары  + ТекСтрока.ВесТары;
					СтруктураДанных.ОбъемГруза             = СтруктураДанных.ОбъемГруза + ТекСтрока.Объем;
					СтруктураДанных.КоличествоГрузовыхМест = СтруктураДанных.КоличествоГрузовыхМест + ТекСтрока.Количество;
					СтруктураДанных.Ширина                 = Макс(СтруктураДанных.Ширина, Ширина);
					СтруктураДанных.Высота                 = Макс(СтруктураДанных.Высота, Высота);
					СтруктураДанных.Длина                  = Макс(СтруктураДанных.Длина,  Длина); 
					СтруктураДанных.СтоимостьГруза         = СтруктураДанных.СтоимостьГруза + ?(ТекГрузЗаказа <> Неопределено, ТекГрузЗаказа.Цена * ТекСтрока.Количество, 0);
					
					СоответвиеГрузов.Вставить(Груз, СтруктураДанных);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Рейс) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
			МассивЗаказов = Рейс.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС", ЗаказНаТС));
			
			СоответвиеГрузов = Новый Соответствие();
			Для Каждого ТекСтрока Из МассивЗаказов Цикл
				
				Ширина = 0;
				Высота = 0;
				Длина  = 0;
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
					Груз               = "Товары народного потребления";
					Валюта             = ВалютаТоваров;
					КодВалюты          = ДанныепоВалюте.Код;
					НаименованиеВалюты = ДанныепоВалюте.Наименование;
					ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
					Ширина = 0;
					Высота = 0;
					Длина  = 0;
				ИначеЕсли ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					И ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидГруза) Тогда
					Груз = ТекСтрока.Номенклатура.уатВидГруза;
					ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(ТекСтрока.Номенклатура);
					Если ТекГрузЗаказа <> Неопределено
						И ТекГрузЗаказа.Валюта <> ВалютаТоваров Тогда
						ТекДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекГрузЗаказа.Валюта, "Ссылка, Код, Наименование"); 
						Валюта             = ТекГрузЗаказа.Валюта;
						КодВалюты          = ТекДанныепоВалюте.Код;
						НаименованиеВалюты = ТекДанныепоВалюте.Наименование;
					Иначе 
						Валюта             = ВалютаТоваров;
						КодВалюты          = ДанныепоВалюте.Код;
						НаименованиеВалюты = ДанныепоВалюте.Наименование;
					КонецЕсли;
					ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
					Если ВесОбъем.Свойство("Длина") Тогда
						Длина  = ВесОбъем.Длина;
						Ширина = ВесОбъем.Ширина;
						Высота = ВесОбъем.Высота;
					КонецЕсли;
				Иначе
					Груз = ТекСтрока.Номенклатура;
					ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
					Если ТекГрузЗаказа <> Неопределено
						И ТекГрузЗаказа.Валюта <> ВалютаТоваров Тогда
						ТекДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекГрузЗаказа.Валюта, "Ссылка, Код, Наименование"); 
						Валюта             = ТекГрузЗаказа.Валюта;
						КодВалюты          = ТекДанныепоВалюте.Код;
						НаименованиеВалюты = ТекДанныепоВалюте.Наименование; 
					Иначе 
						Валюта             = ВалютаТоваров;
						КодВалюты          = ДанныепоВалюте.Код;
						НаименованиеВалюты = ДанныепоВалюте.Наименование;
					КонецЕсли;
					Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
						Если ТекГрузЗаказа <> Неопределено Тогда
							Длина  = ТекГрузЗаказа.Длина;
							Ширина = ТекГрузЗаказа.Ширина;
							Высота = ТекГрузЗаказа.Высота;
						Конецесли;
					Иначе
						ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
						Если ВесОбъем.Свойство("Длина") Тогда
							Длина  = ВесОбъем.Длина;
							Ширина = ВесОбъем.Ширина;
							Высота = ВесОбъем.Высота;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ТекГруз = СоответвиеГрузов.Получить(Груз);
				СтруктураДанных = Новый Структура("Груз,ВесНетто,ВесТары,ОбъемГруза,КоличествоГрузовыхМест,
				|СтоимостьГруза,Ширина,Высота,Длина",
				Груз, 0, 0, 0, 0, 0, 0, 0, 0, ДанныепоВалюте.Код, ДанныепоВалюте.Наименование); 
				Если ТекГруз <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекГруз);
				КонецЕсли;
				
				СтруктураДанных.Груз                   = Груз; 
				СтруктураДанных.ВесНетто               = СтруктураДанных.ВесНетто + (ТекСтрока.КоличествоТонн * 1000);
				СтруктураДанных.ВесТары                = СтруктураДанных.ВесТары  + 0;
				СтруктураДанных.ОбъемГруза             = СтруктураДанных.ОбъемГруза + ТекСтрока.Объем;
				СтруктураДанных.КоличествоГрузовыхМест = СтруктураДанных.КоличествоГрузовыхМест + ТекСтрока.Количество;
				СтруктураДанных.Ширина                 = Макс(СтруктураДанных.Ширина, Ширина);
				СтруктураДанных.Высота                 = Макс(СтруктураДанных.Высота, Высота);
				СтруктураДанных.Длина                  = Макс(СтруктураДанных.Длина,  Длина); 
				СтруктураДанных.СтоимостьГруза         = СтруктураДанных.СтоимостьГруза + ?(ТекГрузЗаказа <> Неопределено, ТекГрузЗаказа.Цена * ТекСтрока.Количество, 0);
				
				СоответвиеГрузов.Вставить(Груз, СтруктураДанных);
			КонецЦикла;
		Иначе
			СоответвиеГрузов = Новый Соответствие();
			Для Каждого ТекГруз Из СоответвиеГрузовЗаказа Цикл
				
				ИсходныйГруз      = ТекГруз.Ключ;
				ВыборкаГруз       = ТекГруз.Значение;
				
				Ширина = 0;
				Высота = 0;
				Длина  = 0;
				Если НЕ ЗначениеЗаполнено(ИсходныйГруз) Тогда
					Груз               = "Товары народного потребления";
					Валюта             = ВалютаТоваров;
					КодВалюты          = ДанныепоВалюте.Код;
					НаименованиеВалюты = ДанныепоВалюте.Наименование;
					ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
					Ширина = 0;
					Высота = 0;
					Длина  = 0;
				ИначеЕсли ТипЗнч(ИсходныйГруз) = Тип("СправочникСсылка.Номенклатура")
					И ЗначениеЗаполнено(ИсходныйГруз.уатВидГруза) Тогда
					Груз = ИсходныйГруз.уатВидГруза;
					ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(ИсходныйГруз);
					ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ИсходныйГруз, ВыборкаГруз.ЕдиницаИзмерения, ВыборкаГруз.Количество);
					Если ВесОбъем.Свойство("Длина") Тогда
						Длина  = ВесОбъем.Длина;
						Ширина = ВесОбъем.Ширина;
						Высота = ВесОбъем.Высота;
					КонецЕсли;
				Иначе
					Груз = ИсходныйГруз;
					ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
					Если ТипЗнч(ИсходныйГруз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
						Если ТекГрузЗаказа <> Неопределено Тогда
							Длина  = ТекГрузЗаказа.Длина;
							Ширина = ТекГрузЗаказа.Ширина;
							Высота = ТекГрузЗаказа.Высота;
						Конецесли;
					ИначеЕсли ТипЗнч(ИсходныйГруз) = Тип("СправочникСсылка.Номенклатура") Тогда
						ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ИсходныйГруз, ВыборкаГруз.ЕдиницаИзмерения, ВыборкаГруз.Количество);
						Если ВесОбъем.Свойство("Длина") Тогда
							Длина  = ВесОбъем.Длина;
							Ширина = ВесОбъем.Ширина;
							Высота = ВесОбъем.Высота;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ТекГрузСоответвие = СоответвиеГрузов.Получить(ВыборкаГруз.Груз);
				СтруктураДанных = Новый Структура("Груз,ВесНетто,ВесТары,ОбъемГруза,КоличествоГрузовыхМест,
				|СтоимостьГруза,Ширина,Высота,Длина",
				Груз, 0, 0, 0, 0, 0, 0, 0, 0, ДанныепоВалюте.Код, ДанныепоВалюте.Наименование); 
				Если ТекГрузСоответвие <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекГрузСоответвие);
				КонецЕсли;
				
				СтруктураДанных.Груз                   = Груз; 
				СтруктураДанных.ВесНетто               = СтруктураДанных.ВесНетто + ВыборкаГруз.ВесНетто;
				СтруктураДанных.ВесТары                = СтруктураДанных.ВесТары  + ВыборкаГруз.ВесТары;
				СтруктураДанных.ОбъемГруза             = СтруктураДанных.ОбъемГруза + ВыборкаГруз.ОбъемГруза;
				СтруктураДанных.КоличествоГрузовыхМест = СтруктураДанных.КоличествоГрузовыхМест + ВыборкаГруз.КоличествоГрузовыхМест;
				СтруктураДанных.Ширина                 = Макс(СтруктураДанных.Ширина, Ширина);
				СтруктураДанных.Высота                 = Макс(СтруктураДанных.Высота, Высота);
				СтруктураДанных.Длина                  = Макс(СтруктураДанных.Длина,  Длина); 
				СтруктураДанных.СтоимостьГруза         = СтруктураДанных.СтоимостьГруза + ?(ТекГрузЗаказа <> Неопределено, ТекГрузЗаказа.Цена * ВыборкаГруз.Количество, 0);
				
				СоответвиеГрузов.Вставить(Груз, СтруктураДанных); 
			КонецЦикла;
		КонецЕсли;
		
		СтоимостьГруза = 0;
		МассивГрузов   = Новый Массив();
		
		ГруппаДанных = "Груз";  
		ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыГруз;
		Для Каждого ТекСтрокаГруз Из СоответвиеГрузов Цикл 
			
			ТекСтрока = ТекСтрокаГруз.Значение;
			
			НоваяСтрока = ЗначенияЗаполненияТитулГрузоотправителяГрузы();
			НоваяСтрока.ИдентификаторСтроки    = Строка(Новый УникальныйИдентификатор());
			
			ДанныеГруз = ЗаполнитьГруз(ТекСтрока.Груз, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);

			НоваяСтрока.ХранимыеДанныеГруз           = ДанныеГруз.ХранимыеДанные;
			НоваяСтрока.ОтгрузочноеНаименованиеГруза = ДанныеГруз.ОтгрузочноеНаименованиеГруза;
			НоваяСтрока.КодВалютыСтоимости           = ДанныепоВалюте.Код;
			НоваяСтрока.НаименованиеВалютыСтоимости  = ДанныепоВалюте.Наименование;  
			НоваяСтрока.МассаБрутто = ТекСтрока.ВесНетто + ?(ЗначениеЗаполнено(ТекСтрока.ВесТары), ТекСтрока.ВесТары, 0);
			НоваяСтрока.МассаНетто  = ?(ЗначениеЗаполнено(ТекСтрока.ВесТары), ТекСтрока.ВесНетто, 0);
			НоваяСтрока.ОбъемГруза  = ТекСтрока.ОбъемГруза;
			НоваяСтрока.КоличествоГрузовыхМест = ТекСтрока.КоличествоГрузовыхМест;
			НоваяСтрока.СтоимостьГруза         = ТекСтрока.СтоимостьГруза;
			НоваяСтрока.Ширина                 = ТекСтрока.Ширина;
			НоваяСтрока.Высота                 = ТекСтрока.Высота;
			НоваяСтрока.Длина                  = ТекСтрока.Длина;
			
			Если ЗначениеЗаполнено(Заказчик) Тогда
				РеквизитыУчастника = ПолучитьРеквизитыУчастника(Заказчик,
				"Заказчик"); 
				РеквизитыУчастника.Вставить("СсылкаЗаказчик", Заказчик);
				ДополнитьСтруктуру(НоваяСтрока, РеквизитыУчастника, Истина); 
			КонецЕсли;
			
			СтоимостьГруза = СтоимостьГруза + НоваяСтрока.СтоимостьГруза;
			МассивГрузов.Добавить(НоваяСтрока);
		КонецЦикла;   
		Если МассивГрузов.Количество() <> 0 Тогда
			ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяГрузы", МассивГрузов);
			ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяСтоимостьГруза", СтоимостьГруза);
		КонецЕсли;
	Иначе
		
		СоответвиеГрузов = Новый Соответствие();
		Для Каждого ТекГруз Из СоответвиеГрузовЗаказа Цикл
			
			ИсходныйГруз      = ТекГруз.Ключ;
			ВыборкаГруз       = ТекГруз.Значение;
			
			Ширина = 0;
			Высота = 0;
			Длина  = 0;
			Если НЕ ЗначениеЗаполнено(ИсходныйГруз) Тогда
				Груз               = "Товары народного потребления";
				Валюта             = ВалютаТоваров;
				КодВалюты          = ДанныепоВалюте.Код;
				НаименованиеВалюты = ДанныепоВалюте.Наименование;
				ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
				Ширина = 0;
				Высота = 0;
				Длина  = 0;
			ИначеЕсли ТипЗнч(ИсходныйГруз) = Тип("СправочникСсылка.Номенклатура")
				И ЗначениеЗаполнено(ИсходныйГруз.уатВидГруза) Тогда
				Груз = ИсходныйГруз.уатВидГруза;
				ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(ИсходныйГруз);
				ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ИсходныйГруз, ВыборкаГруз.ЕдиницаИзмерения, ВыборкаГруз.Количество);
				Если ВесОбъем.Свойство("Длина") Тогда
					Длина  = ВесОбъем.Длина;
					Ширина = ВесОбъем.Ширина;
					Высота = ВесОбъем.Высота;
				КонецЕсли;
			Иначе
				Груз = ИсходныйГруз;
				ТекГрузЗаказа = СоответвиеГрузовЗаказа.Получить(Груз);
				Если ТипЗнч(ИсходныйГруз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
					Если ТекГрузЗаказа <> Неопределено Тогда
						Длина  = ТекГрузЗаказа.Длина;
						Ширина = ТекГрузЗаказа.Ширина;
						Высота = ТекГрузЗаказа.Высота;
					Конецесли;
				ИначеЕсли ТипЗнч(ИсходныйГруз) = Тип("СправочникСсылка.Номенклатура") Тогда
					ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ИсходныйГруз, ВыборкаГруз.ЕдиницаИзмерения, ВыборкаГруз.Количество);
					Если ВесОбъем.Свойство("Длина") Тогда
						Длина  = ВесОбъем.Длина;
						Ширина = ВесОбъем.Ширина;
						Высота = ВесОбъем.Высота;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекГрузСоответвие = СоответвиеГрузов.Получить(ВыборкаГруз.Груз);
			СтруктураДанных = Новый Структура("Груз,ВесНетто,ВесТары,ОбъемГруза,КоличествоГрузовыхМест,
			|СтоимостьГруза,Ширина,Высота,Длина",
			Груз, 0, 0, 0, 0, 0, 0, 0, 0, ДанныепоВалюте.Код, ДанныепоВалюте.Наименование); 
			Если ТекГрузСоответвие <> Неопределено Тогда 
				ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекГрузСоответвие);
			КонецЕсли;
			
			СтруктураДанных.Груз                   = Груз; 
			СтруктураДанных.ВесНетто               = СтруктураДанных.ВесНетто + ВыборкаГруз.ВесНетто;
			СтруктураДанных.ВесТары                = СтруктураДанных.ВесТары  + ВыборкаГруз.ВесТары;
			СтруктураДанных.ОбъемГруза             = СтруктураДанных.ОбъемГруза + ВыборкаГруз.ОбъемГруза;
			СтруктураДанных.КоличествоГрузовыхМест = СтруктураДанных.КоличествоГрузовыхМест + ВыборкаГруз.КоличествоГрузовыхМест;
			СтруктураДанных.Ширина                 = Макс(СтруктураДанных.Ширина, Ширина);
			СтруктураДанных.Высота                 = Макс(СтруктураДанных.Высота, Высота);
			СтруктураДанных.Длина                  = Макс(СтруктураДанных.Длина,  Длина); 
			СтруктураДанных.СтоимостьГруза         = СтруктураДанных.СтоимостьГруза + ?(ТекГрузЗаказа <> Неопределено, ТекГрузЗаказа.Цена * ВыборкаГруз.Количество, 0);
			
			СоответвиеГрузов.Вставить(Груз, СтруктураДанных); 
		КонецЦикла;
		
		СтоимостьГруза = 0;
		МассивГрузов   = Новый Массив();
		
		ГруппаДанных = "Груз";  
		ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыГруз;
		Для Каждого ТекСтрокаГруз Из СоответвиеГрузов Цикл 
			
			ТекСтрока = ТекСтрокаГруз.Значение;
			
			НоваяСтрока = ЗначенияЗаполненияТитулГрузоотправителяГрузы();
			НоваяСтрока.ИдентификаторСтроки    = Строка(Новый УникальныйИдентификатор());
			
			ДанныеГруз = ЗаполнитьГруз(ТекСтрока.Груз, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
			
			НоваяСтрока.ХранимыеДанныеГруз           = ДанныеГруз.ХранимыеДанные;
			НоваяСтрока.ОтгрузочноеНаименованиеГруза = ДанныеГруз.ОтгрузочноеНаименованиеГруза;
			НоваяСтрока.КодВалютыСтоимости           = ДанныепоВалюте.Код;
			НоваяСтрока.НаименованиеВалютыСтоимости  = ДанныепоВалюте.Наименование;  
			НоваяСтрока.МассаБрутто = ТекСтрока.ВесНетто + ?(ЗначениеЗаполнено(ТекСтрока.ВесТары), ТекСтрока.ВесТары, 0);
			НоваяСтрока.МассаНетто  = ?(ЗначениеЗаполнено(ТекСтрока.ВесТары), ТекСтрока.ВесНетто, 0);
			НоваяСтрока.ОбъемГруза  = ТекСтрока.ОбъемГруза;
			НоваяСтрока.КоличествоГрузовыхМест = ТекСтрока.КоличествоГрузовыхМест;
			НоваяСтрока.СтоимостьГруза         = ТекСтрока.СтоимостьГруза;
			НоваяСтрока.Ширина                 = ТекСтрока.Ширина;
			НоваяСтрока.Высота                 = ТекСтрока.Высота;
			НоваяСтрока.Длина                  = ТекСтрока.Длина;
			
			Если ЗначениеЗаполнено(Заказчик) Тогда
				РеквизитыУчастника = ПолучитьРеквизитыУчастника(Заказчик,
				"Заказчик");
				РеквизитыУчастника.Вставить("СсылкаЗаказчик", Заказчик);
				ДополнитьСтруктуру(НоваяСтрока, РеквизитыУчастника, Истина); 
			КонецЕсли;
			
			СтоимостьГруза = СтоимостьГруза + НоваяСтрока.СтоимостьГруза;
			МассивГрузов.Добавить(НоваяСтрока);
		КонецЦикла; 
		
		Если МассивГрузов.Количество() <> 0 Тогда
			ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяГрузы", МассивГрузов);
			ДанныеПоДокументамОснованиям.Вставить("ТитулГрузоотправителяСтоимостьГруза", Окр(СтоимостьГруза, 2));
		КонецЕсли;

	КонецЕсли;  
	
	Возврат ДанныеПоДокументамОснованиям;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляСозданияЭлектронныхТранспортныхНакладных()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
	               |	уатМаршрутныйЛист.Водитель1 КАК Водитель1,
	               |	уатМаршрутныйЛист.Водитель2 КАК Водитель2,
	               |	уатМаршрутныйЛист.ТС КАК ТС,
	               |	уатМаршрутныйЛист.Прицеп1 КАК Прицеп1,
	               |	уатМаршрутныйЛист.Прицеп2 КАК Прицеп2,
	               |	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	               |	&ЗаказНаТС КАК ЗаказНаТС
	               |ПОМЕСТИТЬ втЗначенияЗаполнения
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	уатМаршрутныйЛист.Ссылка = &Рейс
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатПутевойЛист.Организация,
	               |	уатПутевойЛист.Водитель1,
	               |	уатПутевойЛист.Водитель2,
	               |	уатПутевойЛист.ТранспортноеСредство,
	               |	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	               |	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	               |	уатПутевойЛист.Ссылка,
	               |	&ЗаказНаТС
	               |ИЗ
	               |	Документ.уатПутевойЛист КАК уатПутевойЛист
	               |ГДЕ
	               |	уатПутевойЛист.Ссылка = &Рейс
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатЗаказПеревозчику_уэ.Контрагент,
	               |	уатЗаказПеревозчику_уэ.Водитель,
	               |	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
	               |	уатЗаказПеревозчику_уэ.ТС,
	               |	уатЗаказПеревозчику_уэ.Прицеп1,
	               |	уатЗаказПеревозчику_уэ.Прицеп2,
	               |	уатЗаказПеревозчику_уэ.Ссылка,
	               |	&ЗаказНаТС
	               |ИЗ
	               |	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	               |ГДЕ
	               |	уатЗаказПеревозчику_уэ.Ссылка = &Рейс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатЗаказГрузоотправителя.Организация КАК Организация,
	               |	уатЗаказГрузоотправителя.Контрагент КАК Заказчик,
	               |	уатЗаказГрузоотправителя.Дата КАК Дата,
	               |	уатЗаказГрузоотправителя.Номер КАК Номер,
	               |	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	               |	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	               |	уатЗаказГрузоотправителя.ВалютаТоваров КАК ВалютаТоваров,
	               |	уатЗаказГрузоотправителя.ДатаКурса КАК ДатаКурса,
	               |	уатЗаказГрузоотправителя.Грузоотправитель.ИНН = уатЗаказГрузоотправителя.Организация.ИНН КАК ГрузоотправительОрганизация,
	               |	уатЗаказГрузоотправителя.Грузополучатель.ИНН = уатЗаказГрузоотправителя.Организация.ИНН КАК ГрузополучательОрганизация,
	               |	уатЗаказГрузоотправителя.АдресНазначения.ЗначениеАдреса КАК АдресНазначенияЗначениеАдреса,
	               |	уатЗаказГрузоотправителя.АдресОтправления.ЗначениеАдреса КАК АдресОтправленияЗначениеАдреса,
	               |	уатЗаказГрузоотправителя.НомерПоУчетуЗаказчика КАК НомерПоУчетуЗаказчика,
	               |	уатЗаказГрузоотправителя.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втЗаказ
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка = &ЗаказНаТС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЗначенияЗаполнения.Перевозчик КАК Перевозчик,
	               |	МАКСИМУМ(Контрагенты.Ссылка) КАК Контрагент
	               |ПОМЕСТИТЬ втПеревозчики
	               |ИЗ
	               |	втЗначенияЗаполнения КАК втЗначенияЗаполнения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО втЗначенияЗаполнения.Перевозчик.ИНН = Контрагенты.ИНН
	               |			И (НЕ Контрагенты.ПометкаУдаления)
	               |			И (Контрагенты.ИНН <> """")
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗначенияЗаполнения.Перевозчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов,
	               |	МАКСИМУМ(уатРегистрационныеДокументы.Серия + уатРегистрационныеДокументы.Номер) КАК Номер
	               |ПОМЕСТИТЬ втСТС
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)
	               |	И уатРегистрационныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	               |	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаОкончания >= &ТекДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаВыдачи <= &ТекДата
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатРегистрационныеДокументы.ВладелецДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказ.Организация КАК Организация,
	               |	втЗаказ.Заказчик КАК Заказчик,
	               |	втЗаказ.Дата КАК Дата,
	               |	втЗаказ.Грузоотправитель КАК Грузоотправитель,
	               |	втЗаказ.Грузополучатель КАК Грузополучатель,
	               |	втЗаказ.ГрузоотправительОрганизация КАК ГрузоотправительОрганизация,
	               |	втЗаказ.ГрузополучательОрганизация КАК ГрузополучательОрганизация,
	               |	втЗаказ.АдресНазначенияЗначениеАдреса КАК АдресНазначенияЗначениеАдреса,
	               |	втЗаказ.АдресОтправленияЗначениеАдреса КАК АдресОтправленияЗначениеАдреса,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Перевозчик) = ТИП(Справочник.Организации)
	               |			ТОГДА ЕСТЬNULL(втПеревозчики.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	               |		ИНАЧЕ втЗначенияЗаполнения.Перевозчик
	               |	КОНЕЦ КАК Перевозчик,
	               |	втЗначенияЗаполнения.Водитель1 КАК Водитель1,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Водитель1) = ТИП(Справочник.Сотрудники)
	               |			ТОГДА втЗначенияЗаполнения.Водитель1.ФизическоеЛицо.ФИО
	               |		ИНАЧЕ втЗначенияЗаполнения.Водитель1.ФИО
	               |	КОНЕЦ КАК Водитель1ФИО,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Водитель1) = ТИП(Справочник.Сотрудники)
	               |			ТОГДА втЗначенияЗаполнения.Водитель1.ФизическоеЛицо.ИНН
	               |		ИНАЧЕ втЗначенияЗаполнения.Водитель1.ИНН
	               |	КОНЕЦ КАК Водитель1ИНН,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Водитель1) = ТИП(Справочник.Сотрудники)
	               |			ТОГДА втЗначенияЗаполнения.Водитель1.ФизическоеЛицо
	               |		ИНАЧЕ втЗначенияЗаполнения.Водитель1
	               |	КОНЕЦ КАК Водитель1ФизическоеЛицо,
	               |	втЗначенияЗаполнения.Водитель2 КАК Водитель2,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Водитель2) = ТИП(Справочник.Сотрудники)
	               |			ТОГДА втЗначенияЗаполнения.Водитель2.ФизическоеЛицо.ФИО
	               |		ИНАЧЕ втЗначенияЗаполнения.Водитель2.ФИО
	               |	КОНЕЦ КАК Водитель2ФИО,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Водитель2) = ТИП(Справочник.Сотрудники)
	               |			ТОГДА втЗначенияЗаполнения.Водитель2.ФизическоеЛицо.ИНН
	               |		ИНАЧЕ втЗначенияЗаполнения.Водитель2.ИНН
	               |	КОНЕЦ КАК Водитель2ИНН,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(втЗначенияЗаполнения.Водитель2) = ТИП(Справочник.Сотрудники)
	               |			ТОГДА втЗначенияЗаполнения.Водитель2.ФизическоеЛицо
	               |		ИНАЧЕ втЗначенияЗаполнения.Водитель2
	               |	КОНЕЦ КАК Водитель2ФизическоеЛицо,
	               |	втЗначенияЗаполнения.ТС КАК ТС,
	               |	втЗначенияЗаполнения.ТС.VIN КАК ТСVIN,
	               |	втЗначенияЗаполнения.ТС.Марка.Наименование КАК ТСМарка,
	               |	втЗначенияЗаполнения.ТС.ГосударственныйНомер КАК ТСГосударственныйНомер,
	               |	втЗначенияЗаполнения.ТС.Модель.Грузоподъемность КАК ТСГрузоподъемность,
	               |	втЗначенияЗаполнения.ТС.Модель.ОбъемКузова КАК ТСОбъемКузова,
	               |	втСТС.Номер КАК ТССТС,
	               |	втЗначенияЗаполнения.ТС.ТипТС.ВидТС КАК ТСВидТС,
	               |	втЗначенияЗаполнения.ТС.ТипВладенияТС КАК ТСТипВладенияТС,
	               |	втЗначенияЗаполнения.Прицеп1 КАК Прицеп1,
	               |	втЗначенияЗаполнения.Прицеп1.VIN КАК Прицеп1VIN,
	               |	втЗначенияЗаполнения.Прицеп1.Марка.Наименование КАК Прицеп1Марка,
	               |	втЗначенияЗаполнения.Прицеп1.ГосударственныйНомер КАК Прицеп1ГосударственныйНомер,
	               |	втЗначенияЗаполнения.Прицеп1.Модель.Грузоподъемность КАК Прицеп1Грузоподъемность,
	               |	втЗначенияЗаполнения.Прицеп1.Модель.ОбъемКузова КАК Прицеп1ОбъемКузова,
	               |	втСТС1.Номер КАК Прицеп1СТС,
	               |	втЗначенияЗаполнения.Прицеп1.ТипТС.ВидТС КАК Прицеп1ВидТС,
	               |	втЗначенияЗаполнения.Прицеп1.ТипВладенияТС КАК Прицеп1ТипВладенияТС,
	               |	втЗначенияЗаполнения.Прицеп2 КАК Прицеп2,
	               |	втЗначенияЗаполнения.Прицеп2.VIN КАК Прицеп2VIN,
	               |	втЗначенияЗаполнения.Прицеп2.Марка.Наименование КАК Прицеп2Марка,
	               |	втЗначенияЗаполнения.Прицеп2.ГосударственныйНомер КАК Прицеп2ГосударственныйНомер,
	               |	втЗначенияЗаполнения.Прицеп2.Модель.Грузоподъемность КАК Прицеп2Грузоподъемность,
	               |	втЗначенияЗаполнения.Прицеп2.Модель.ОбъемКузова КАК Прицеп2ОбъемКузова,
	               |	втСТС2.Номер КАК Прицеп2СТС,
	               |	втЗначенияЗаполнения.Прицеп2.ТипТС.ВидТС КАК Прицеп2ВидТС,
	               |	втЗначенияЗаполнения.Прицеп2.ТипВладенияТС КАК Прицеп2ТипВладенияТС,
	               |	втЗаказ.НомерПоУчетуЗаказчика КАК НомерПоУчетуЗаказчика,
	               |	втЗаказ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	втЗаказ.Номер КАК Номер,
	               |	втЗаказ.ДатаКурса КАК ДатаКурса,
	               |	втЗаказ.ВалютаТоваров КАК ВалютаТоваров
	               |ИЗ
	               |	втЗаказ КАК втЗаказ
	               |		ПОЛНОЕ СОЕДИНЕНИЕ втЗначенияЗаполнения КАК втЗначенияЗаполнения
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втПеревозчики КАК втПеревозчики
	               |			ПО втЗначенияЗаполнения.Перевозчик = втПеревозчики.Перевозчик
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС
	               |			ПО втЗначенияЗаполнения.ТС = втСТС.ВладелецДокументов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС1
	               |			ПО втЗначенияЗаполнения.Прицеп1 = втСТС1.ВладелецДокументов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС2
	               |			ПО втЗначенияЗаполнения.Прицеп2 = втСТС2.ВладелецДокументов
	               |		ПО втЗаказ.Ссылка = втЗначенияЗаполнения.ЗаказНаТС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА ВЫБОР
	               |					КОГДА уатЗаказГрузоотправителяТовары.Номенклатура.уатВидГруза <> ЗНАЧЕНИЕ(Справочник.уатВидыГрузов.ПустаяСсылка)
	               |						ТОГДА уатЗаказГрузоотправителяТовары.Номенклатура.уатВидГруза
	               |					ИНАЧЕ уатЗаказГрузоотправителяТовары.Номенклатура
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	               |				ИНАЧЕ ""Товары народного потребления""
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Груз,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.ВесБрутто
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто
	               |				ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВесНетто,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.Объем
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Объем
	               |				ИНАЧЕ уатЗаказГрузоотправителя.Объем
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ОбъемГруза,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.КоличествоМест
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест
	               |				ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест
	               |			КОНЕЦ
	               |	КОНЕЦ КАК КоличествоГрузовыхМест,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.ВесТары
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.ВесТары
	               |				ИНАЧЕ уатЗаказГрузоотправителя.ВесТары
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВесТары,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.Сумма
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Стоимость
	               |				ИНАЧЕ уатЗаказГрузоотправителя.СтоимостьГруза
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтоимостьГруза,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Высота
	               |				ИНАЧЕ 0
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Высота,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Ширина
	               |				ИНАЧЕ 0
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Ширина,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Длина
	               |				ИНАЧЕ 0
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Длина,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.ГрузовоеМесто.Валюта
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто.Валюта
	               |				ИНАЧЕ уатЗаказГрузоотправителя.ВалютаТоваров
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Валюта,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.Цена
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Стоимость / уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест
	               |				ИНАЧЕ уатЗаказГрузоотправителя.СтоимостьГруза
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Цена,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.Номенклатура
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
	               |				ИНАЧЕ ""Товары народного потребления""
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ИсходныйГруз,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ЕдиницаИзмерения,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.Количество
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест
	               |				ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Количество,
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	               |			ТОГДА уатЗаказГрузоотправителяТовары.НомерСтроки
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	               |					ТОГДА уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки
	               |				ИНАЧЕ 0
	               |			КОНЕЦ
	               |	КОНЕЦ КАК НомерСтрокиГруза
	               |ПОМЕСТИТЬ втГрузыЗаказа
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	               |		ПО (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	               |			И уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяТовары.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ПО уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	               |			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка = &ЗаказНаТС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втГрузыЗаказа.Груз КАК Груз,
	               |	втГрузыЗаказа.ВесНетто КАК ВесНетто,
	               |	втГрузыЗаказа.ОбъемГруза КАК ОбъемГруза,
	               |	втГрузыЗаказа.КоличествоГрузовыхМест КАК КоличествоГрузовыхМест,
	               |	втГрузыЗаказа.ВесТары КАК ВесТары,
	               |	втГрузыЗаказа.СтоимостьГруза КАК СтоимостьГруза,
	               |	втГрузыЗаказа.Высота КАК Высота,
	               |	втГрузыЗаказа.Ширина КАК Ширина,
	               |	втГрузыЗаказа.Длина КАК Длина,
	               |	втГрузыЗаказа.Валюта КАК Валюта,
	               |	втГрузыЗаказа.Цена КАК Цена,
	               |	втГрузыЗаказа.ИсходныйГруз КАК ИсходныйГруз,
	               |	втГрузыЗаказа.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	втГрузыЗаказа.Количество КАК Количество,
	               |	МИНИМУМ(ЕСТЬNULL(уатЗаказГрузоотправителяОтрезкиПути.ПунктОтправления, 0)) КАК ПунктОтправления,
	               |	МАКСИМУМ(ЕСТЬNULL(уатЗаказГрузоотправителяОтрезкиПути.ПунктНазначения, 0)) КАК ПунктНазначения,
	               |	втГрузыЗаказа.Ссылка КАК Ссылка,
	               |	втГрузыЗаказа.НомерСтрокиГруза КАК НомерСтрокиГруза
	               |ПОМЕСТИТЬ втГрузыЗаказаСОтрезками
	               |ИЗ
	               |	втГрузыЗаказа КАК втГрузыЗаказа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ОтрезкиПути КАК уатЗаказГрузоотправителяОтрезкиПути
	               |		ПО втГрузыЗаказа.Ссылка = уатЗаказГрузоотправителяОтрезкиПути.Ссылка
	               |			И втГрузыЗаказа.НомерСтрокиГруза = уатЗаказГрузоотправителяОтрезкиПути.Груз
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втГрузыЗаказа.ИсходныйГруз,
	               |	втГрузыЗаказа.Ссылка,
	               |	втГрузыЗаказа.Валюта,
	               |	втГрузыЗаказа.ЕдиницаИзмерения,
	               |	втГрузыЗаказа.Груз,
	               |	втГрузыЗаказа.Цена,
	               |	втГрузыЗаказа.ВесНетто,
	               |	втГрузыЗаказа.ВесТары,
	               |	втГрузыЗаказа.Высота,
	               |	втГрузыЗаказа.Длина,
	               |	втГрузыЗаказа.Количество,
	               |	втГрузыЗаказа.КоличествоГрузовыхМест,
	               |	втГрузыЗаказа.ОбъемГруза,
	               |	втГрузыЗаказа.СтоимостьГруза,
	               |	втГрузыЗаказа.Ширина,
	               |	втГрузыЗаказа.НомерСтрокиГруза
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втГрузыЗаказаСОтрезками.Груз КАК Груз,
	               |	СУММА(втГрузыЗаказаСОтрезками.ВесНетто) КАК ВесНетто,
	               |	СУММА(втГрузыЗаказаСОтрезками.ОбъемГруза) КАК ОбъемГруза,
	               |	СУММА(втГрузыЗаказаСОтрезками.КоличествоГрузовыхМест) КАК КоличествоГрузовыхМест,
	               |	СУММА(втГрузыЗаказаСОтрезками.ВесТары) КАК ВесТары,
	               |	СУММА(втГрузыЗаказаСОтрезками.СтоимостьГруза) КАК СтоимостьГруза,
	               |	МАКСИМУМ(втГрузыЗаказаСОтрезками.Высота) КАК Высота,
	               |	МАКСИМУМ(втГрузыЗаказаСОтрезками.Ширина) КАК Ширина,
	               |	МАКСИМУМ(втГрузыЗаказаСОтрезками.Длина) КАК Длина,
	               |	втГрузыЗаказаСОтрезками.Валюта КАК Валюта,
	               |	втГрузыЗаказаСОтрезками.Цена КАК Цена,
	               |	втГрузыЗаказаСОтрезками.ИсходныйГруз КАК ИсходныйГруз,
	               |	втГрузыЗаказаСОтрезками.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	СУММА(втГрузыЗаказаСОтрезками.Количество) КАК Количество,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК ПунктОтправления,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК ПунктНазначения,
	               |	втГрузыЗаказаСОтрезками.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втГрузыЗаказаСПунктами
	               |ИЗ
	               |	втГрузыЗаказаСОтрезками КАК втГрузыЗаказаСОтрезками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	               |		ПО втГрузыЗаказаСОтрезками.Ссылка = уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка
	               |			И втГрузыЗаказаСОтрезками.ПунктОтправления = уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты1
	               |		ПО втГрузыЗаказаСОтрезками.Ссылка = уатЗаказГрузоотправителяПромежуточныеПункты1.Ссылка
	               |			И втГрузыЗаказаСОтрезками.ПунктНазначения = уатЗаказГрузоотправителяПромежуточныеПункты1.НомерСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втГрузыЗаказаСОтрезками.Груз,
	               |	втГрузыЗаказаСОтрезками.ЕдиницаИзмерения,
	               |	втГрузыЗаказаСОтрезками.ИсходныйГруз,
	               |	втГрузыЗаказаСОтрезками.Валюта,
	               |	втГрузыЗаказаСОтрезками.Ссылка,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)),
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)),
	               |	втГрузыЗаказаСОтрезками.Цена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втГрузыЗаказаСПунктами.Груз КАК Груз,
	               |	втГрузыЗаказаСПунктами.ВесНетто КАК ВесНетто,
	               |	втГрузыЗаказаСПунктами.ОбъемГруза КАК ОбъемГруза,
	               |	втГрузыЗаказаСПунктами.КоличествоГрузовыхМест КАК КоличествоГрузовыхМест,
	               |	втГрузыЗаказаСПунктами.ВесТары КАК ВесТары,
	               |	втГрузыЗаказаСПунктами.СтоимостьГруза КАК СтоимостьГруза,
	               |	втГрузыЗаказаСПунктами.Высота КАК Высота,
	               |	втГрузыЗаказаСПунктами.Ширина КАК Ширина,
	               |	втГрузыЗаказаСПунктами.Длина КАК Длина,
	               |	втГрузыЗаказаСПунктами.Валюта КАК Валюта,
	               |	втГрузыЗаказаСПунктами.Цена КАК Цена,
	               |	втГрузыЗаказаСПунктами.ИсходныйГруз КАК ИсходныйГруз,
	               |	втГрузыЗаказаСПунктами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	втГрузыЗаказаСПунктами.Количество КАК Количество,
	               |	втГрузыЗаказаСПунктами.ПунктОтправления КАК ПунктОтправления,
	               |	втГрузыЗаказаСПунктами.ПунктНазначения КАК ПунктНазначения
	               |ИЗ
	               |	втГрузыЗаказаСПунктами КАК втГрузыЗаказаСПунктами
	               |ГДЕ
	               |	втГрузыЗаказаСПунктами.Ссылка.FTL
	               |	И НЕ втГрузыЗаказаСПунктами.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втГрузыЗаказа.Груз,
	               |	втГрузыЗаказа.ВесНетто,
	               |	втГрузыЗаказа.ОбъемГруза,
	               |	втГрузыЗаказа.КоличествоГрузовыхМест,
	               |	втГрузыЗаказа.ВесТары,
	               |	втГрузыЗаказа.СтоимостьГруза,
	               |	втГрузыЗаказа.Высота,
	               |	втГрузыЗаказа.Ширина,
	               |	втГрузыЗаказа.Длина,
	               |	втГрузыЗаказа.Валюта,
	               |	втГрузыЗаказа.Цена,
	               |	втГрузыЗаказа.ИсходныйГруз,
	               |	втГрузыЗаказа.ЕдиницаИзмерения,
	               |	втГрузыЗаказа.Количество,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	втГрузыЗаказа КАК втГрузыЗаказа
	               |ГДЕ
	               |	(НЕ втГрузыЗаказа.Ссылка.FTL
	               |			ИЛИ втГрузыЗаказа.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатПутевойЛистПрицепы.ТС КАК Прицеп,
	               |	уатПутевойЛистПрицепы.ТС.VIN КАК ПрицепVIN,
	               |	уатПутевойЛистПрицепы.ТС.Марка.Наименование КАК ПрицепМарка,
	               |	уатПутевойЛистПрицепы.ТС.ГосударственныйНомер КАК ПрицепГосударственныйНомер,
	               |	уатПутевойЛистПрицепы.ТС.Модель.Грузоподъемность КАК ПрицепГрузоподъемность,
	               |	уатПутевойЛистПрицепы.ТС.Модель.ОбъемКузова КАК ПрицепОбъемКузова,
	               |	втСТС.Номер КАК ПрицепСТС,
	               |	уатПутевойЛистПрицепы.ТС.ТипТС.ВидТС КАК ПрицепВидТС,
	               |	уатПутевойЛистПрицепы.ТС.ТипВладенияТС КАК ПрицепТипВладенияТС
	               |ИЗ
	               |	втЗначенияЗаполнения КАК втЗначенияЗаполнения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС
	               |			ПО уатПутевойЛистПрицепы.ТС = втСТС.ВладелецДокументов
	               |		ПО втЗначенияЗаполнения.Ссылка = уатПутевойЛистПрицепы.Ссылка";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗначенияЗаполненияТитулГрузоотправителяГрузы()
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ИдентификаторСтроки", "");
	ЗначенияЗаполнения.Вставить("ХранимыеДанныеГруз", "");
	ЗначенияЗаполнения.Вставить("ОтгрузочноеНаименованиеГруза", "");
	ЗначенияЗаполнения.Вставить("ВидТары", "00");
	ЗначенияЗаполнения.Вставить("СостояниеГруза", "Надлежащее");
	ЗначенияЗаполнения.Вставить("СпособУпаковки", "Без упаковки");
	ЗначенияЗаполнения.Вставить("МассаБрутто", 0);
	ЗначенияЗаполнения.Вставить("МассаНетто", 0);
	ЗначенияЗаполнения.Вставить("КоличествоГрузовыхМест", 0);
	ЗначенияЗаполнения.Вставить("СтоимостьГруза", 0);
	ЗначенияЗаполнения.Вставить("ОбъемГруза", 0);
	ЗначенияЗаполнения.Вставить("Плотность", 0);
	ЗначенияЗаполнения.Вставить("СсылкаВалютаСтоимости", Справочники.Валюты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("КодВалютыСтоимости", "");
	ЗначенияЗаполнения.Вставить("НаименованиеВалютыСтоимости", "");
	ЗначенияЗаполнения.Вставить("Ширина", 0);
	ЗначенияЗаполнения.Вставить("Высота", 0);
	ЗначенияЗаполнения.Вставить("Длина", 0);
	ЗначенияЗаполнения.Вставить("ИмеетУчетВГИС", Ложь);
	ЗначенияЗаполнения.Вставить("ЗаполнитьТитулГрузоотправителяПереченьМаркировокГруза", "Отсутствует");

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияГруз()
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ВидТары",                      "00");
	ЗначенияЗаполнения.Вставить("ИмеетУчетВГИС",                Ложь);
	ЗначенияЗаполнения.Вставить("КодТоварнойНоменклатуры",      "");
	ЗначенияЗаполнения.Вставить("ОтгрузочноеНаименованиеГруза", "");
	ЗначенияЗаполнения.Вставить("Плотность",                    0);
	ЗначенияЗаполнения.Вставить("СпособУпаковки",               "Без упаковки");

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияСотрудник()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Фамилия",         "");
	ЗначенияЗаполнения.Вставить("Имя",             "");
	ЗначенияЗаполнения.Вставить("Отчество",        "");
	ЗначенияЗаполнения.Вставить("ДатаВыдачиВУ",    Дата(1,1,1));
	ЗначенияЗаполнения.Вставить("ДатаОкончанияВУ", Дата(1,1,1));
	ЗначенияЗаполнения.Вставить("НомерВУ",         "");
	ЗначенияЗаполнения.Вставить("СерияВУ",         "");
	ЗначенияЗаполнения.Вставить("ИНН",             "");
	ЗначенияЗаполнения.Вставить("Почта",           "");
	ЗначенияЗаполнения.Вставить("ЛицензияДатаВыдачи",         "");
	ЗначенияЗаполнения.Вставить("ЛицензияНомер",              "");
	ЗначенияЗаполнения.Вставить("ЛицензияСерия",              "");
	ЗначенияЗаполнения.Вставить("ЛицензияСрокОкончания",      "");
	ЗначенияЗаполнения.Вставить("МедорганизацияНаименование", "");
	ЗначенияЗаполнения.Вставить("Должность",                  "");

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияТС()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("VIN",                  "");
	ЗначенияЗаполнения.Вставить("ОбъемКузова",           0);
	ЗначенияЗаполнения.Вставить("Грузоподъемность",      0); 
	ЗначенияЗаполнения.Вставить("Модель",               "");
	ЗначенияЗаполнения.Вставить("Марка",                "");
	ЗначенияЗаполнения.Вставить("НомерСТС",             "");
	ЗначенияЗаполнения.Вставить("ГосударственныйНомер", "");
	ЗначенияЗаполнения.Вставить("Тип",                  "Грузовой автомобиль общего назначения");
	ЗначенияЗаполнения.Вставить("ТипВладения",           "1"); // Собственность;
	ЗначенияЗаполнения.Вставить("ИнвентарныйНомер",     "");
	Возврат ЗначенияЗаполнения
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭПЛ

Функция ЗначенияЗаполненияЭПЛ()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ТитулОформлениеПризнакНачалаРейса",            "1");  // Выезд с парковки
	ЗначенияЗаполнения.Вставить("ТитулОформлениеСведенияОВидеПеревозки",        "СН"); // Перевозка для собственных нужд
	ЗначенияЗаполнения.Вставить("ТитулОформлениеВидСообщения",                  "Г");  // Городское
	ЗначенияЗаполнения.Вставить("ТитулОформлениеОформительСтатус",              "С");  // Собственник транспортного средства
	ЗначенияЗаполнения.Вставить("ТитулОформлениеОбязательностьМедОсмотраПосле", "2");  // Не обязателен
	ЗначенияЗаполнения.Вставить("ТитулОформлениеПризнакФормированияПутевогоЛистаНаОдинДень", "1");  // На один день

	ЗначенияЗаполнения.Вставить("СсылкаТитулОформлениеОформитель",        Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулОформлениеМедорганизация",    Справочники.Контрагенты.ПустаяСсылка()); 
	ЗначенияЗаполнения.Вставить("СсылкаТитулОформлениеТехконтроль",       Справочники.Контрагенты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулОформлениеПоказанияОдометра", Справочники.Контрагенты.ПустаяСсылка());
	
	ЗначенияЗаполнения.Вставить("ТитулОформлениеНомерПутевогоЛиста",      "");
	ЗначенияЗаполнения.Вставить("ТитулОформлениеДатаПутевогоЛиста",       Дата(1,1,1));
	
	// Табличные части
	ЗначенияЗаполнения.Вставить("ТитулОформлениеВодители", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулОформлениеПрицепы",  Новый Массив());
	ЗначенияЗаполнения.Вставить("ДокументыОснования",      Новый Массив());

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ПодготовитьДанныеДляСозданияЭлектронныхПутевыхЛистов(ДокументОснование, ДопДанные)
	
	ИмяДокумента = "ЭлектронныйПутевойЛист";
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование); 
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Запрос.Текст = ПолучитьТекстЗапросаДляСозданияЭлектронныхПутевыхЛистов();

	ДанныеЗаполнения = Запрос.ВыполнитьПакет()[2].Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДанныеПоДокументамОснованиям = Новый Структура(); 
	ДанныеПоДокументамОснованиям.Вставить("Организация",                      ДанныеЗаполнения.Оформитель);
	ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулОформлениеОформитель",  ДанныеЗаполнения.Оформитель);
	Если НЕ СинхронизацияЭДО.ЕстьУчетныеЗаписи(
		ДанныеПоДокументамОснованиям.СсылкаТитулОформлениеОформитель) Тогда
		ДанныеПоДокументамОснованиям.Вставить("ОформительНеПодключен", Истина);
	КонецЕсли;
	РеквизитыУчастника = ПолучитьРеквизитыУчастника(ДанныеПоДокументамОснованиям.СсылкаТитулОформлениеОформитель,
	"ТитулОформлениеОформитель");  
	ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, РеквизитыУчастника, Истина);
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеНомерПутевогоЛиста", ДанныеЗаполнения.Номер);
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеДатаПутевогоЛиста",  ДанныеЗаполнения.Дата);  
	
	
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеСведенияОВидеПеревозки", ?(ЗначениеЗаполнено(ДанныеЗаполнения.ВидПеревозки),
		ДанныеЗаполнения.ВидПеревозки, "СН"));
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеВидСообщения", ?(ЗначениеЗаполнено(ДанныеЗаполнения.ВидСообщения),
		ДанныеЗаполнения.ВидСообщения, "Г"));
		
	ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулОформлениеМедорганизация",   ДанныеЗаполнения.Медорганизация);
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Медорганизация)
		И НЕ ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту(
		ДанныеПоДокументамОснованиям.СсылкаТитулОформлениеМедорганизация) Тогда
		ДанныеПоДокументамОснованиям.Вставить("МедорганизацияНеПодключена", Истина);
	КонецЕсли; 
	ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулОформлениеТехконтроль",   ДанныеЗаполнения.КонтрольТранспорта);
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КонтрольТранспорта)
		И НЕ ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту(
		ДанныеПоДокументамОснованиям.СсылкаТитулОформлениеТехконтроль) Тогда
		ДанныеПоДокументамОснованиям.Вставить("ТехконтрольНеПодключен", Истина);
	КонецЕсли; 
	
	ДанныеПоДокументамОснованиям.Вставить("СсылкаТитулОформлениеПоказанияОдометра",   ДанныеЗаполнения.ПоказанияОдометра);
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ПоказанияОдометра)
		И НЕ ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту(
		ДанныеПоДокументамОснованиям.СсылкаТитулОформлениеПоказанияОдометра) Тогда
		ДанныеПоДокументамОснованиям.Вставить("ПоказанияОдометраНеПодключен", Истина);
	КонецЕсли;
	
	Если ДанныеПоДокументамОснованиям.Свойство("ОформительНеПодключен")
		ИЛИ ДанныеПоДокументамОснованиям.Свойство("МедорганизацияНеПодключена")
		ИЛИ ДанныеПоДокументамОснованиям.Свойство("ТехконтрольНеПодключен")
		ИЛИ ДанныеПоДокументамОснованиям.Свойство("ПоказанияОдометраНеПодключен")Тогда
		Возврат ДанныеПоДокументамОснованиям;
	КонецЕсли;
	
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеОбязательностьМедОсмотраПосле", ?(ДанныеЗаполнения.ОбязательныйПослерейсовыйМедосмотр,
		"1", "2"));  
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеПризнакФормированияПутевогоЛистаНаОдинДень",
		?(НачалоДня(ДанныеЗаполнения.ДействителенДо) = НачалоДня(ДанныеЗаполнения.Дата), "1", "2"));
		
	Если ДанныеПоДокументамОснованиям.ТитулОформлениеПризнакФормированияПутевогоЛистаНаОдинДень = "1" Тогда
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеДатаВТечениеКоторойПутевойЛистМожетБытьИспользован", НачалоДня(ДанныеЗаполнения.Дата));
	Иначе
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеДатаНачалаСрокаИспользованияПутевогоЛиста",    НачалоДня(ДанныеЗаполнения.Дата));
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеДатаОкончанияСрокаИспользованияПутевогоЛиста", НачалоДня(ДанныеЗаполнения.ДействителенДо));
	КонецЕсли;
	
	// Водители
	ГруппаДанных            = "Водитель";
	ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыВодитель;
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеВодители", Новый Массив());
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Водитель1) Тогда
		СтруктураВодитель = Новый Структура("Ссылка, ФИО, ИНН, ФизическоеЛицо");
		СтруктураВодитель.Ссылка         = ДанныеЗаполнения.Водитель1;
		СтруктураВодитель.ФИО            = ДанныеЗаполнения.Водитель1ФИО;
		СтруктураВодитель.ИНН            = ДанныеЗаполнения.Водитель1ИНН;
		СтруктураВодитель.ФизическоеЛицо = ДанныеЗаполнения.Водитель1ФизическоеЛицо;
		
		НоваяСтрока = ЗаполнитьСотрудника(СтруктураВодитель, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НомерВУ) Тогда
			НоваяСтрока.НомерВУ = "Не заполнено";
		Конецесли;
		НоваяСтрока.Вставить("ХранимыеДанныеВодитель", НоваяСтрока.ХранимыеДанные);
		НоваяСтрока.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));  
		НоваяСтрока.Удалить("ХранимыеДанные");   
		
		ДанныеПоДокументамОснованиям.ТитулОформлениеВодители.Добавить(НоваяСтрока);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Водитель2) Тогда
		СтруктураВодитель = Новый Структура("Ссылка, ФИО, ИНН, ФизическоеЛицо");
		СтруктураВодитель.Ссылка         = ДанныеЗаполнения.Водитель2;
		СтруктураВодитель.ФИО            = ДанныеЗаполнения.Водитель2ФИО;
		СтруктураВодитель.ИНН            = ДанныеЗаполнения.Водитель2ИНН;
		СтруктураВодитель.ФизическоеЛицо = ДанныеЗаполнения.Водитель2ФизическоеЛицо;
		
		НоваяСтрока = ЗаполнитьСотрудника(СтруктураВодитель, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НомерВУ) Тогда
			НоваяСтрока.НомерВУ = "Не заполнено";
		Конецесли;
		НоваяСтрока.Вставить("ХранимыеДанныеВодитель", НоваяСтрока.ХранимыеДанные);
		НоваяСтрока.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));  
		НоваяСтрока.Удалить("ХранимыеДанные");
		
		ДанныеПоДокументамОснованиям.ТитулОформлениеВодители.Добавить(НоваяСтрока);
		
	КонецЕсли;
		
	// Прицепы
	МассивПрицепов          = Новый Массив(); 
	ГруппаДанных            = "Прицеп";
	ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыПрицеп;
	
	ВыборкаПрицеп = Запрос.ВыполнитьПакет()[3].Выбрать(); 
	Пока ВыборкаПрицеп.Следующий() Цикл   
		СтруктураТС = Новый Структура("Ссылка, СТС, VIN, ГосударственныйНомер, Марка, Модель, Грузоподъемность, ОбъемКузова, ВидТС, ТипВладенияТС");
		СтруктураТС.Ссылка               = ВыборкаПрицеп.Прицеп;
		СтруктураТС.СТС                  = СтрЗаменить(ВыборкаПрицеп.ПрицепСТС, " ", "");
		СтруктураТС.VIN                  = ВыборкаПрицеп.ПрицепVIN;
		СтруктураТС.ГосударственныйНомер = ВыборкаПрицеп.ПрицепГосударственныйНомер;
		СтруктураТС.Марка                = ВыборкаПрицеп.ПрицепМарка;
		СтруктураТС.Грузоподъемность     = ВыборкаПрицеп.ПрицепГрузоподъемность;
		СтруктураТС.ОбъемКузова          = ВыборкаПрицеп.ПрицепОбъемКузова;
		СтруктураТС.ВидТС                = ВыборкаПрицеп.ПрицепВидТС;
		СтруктураТС.ТипВладенияТС        = ВыборкаПрицеп.ПрицепТипВладенияТС;
		СтруктураТС.Модель               = ВыборкаПрицеп.ПрицепМодель;

		НоваяСтрокаПрицеп = ЗаполнитьТС(СтруктураТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы);
		НоваяСтрокаПрицеп.Вставить("ХранимыеДанныеПрицеп",   НоваяСтрокаПрицеп.ХранимыеДанные);
		НоваяСтрокаПрицеп.Вставить("ИдентификаторСтроки",    Строка(Новый УникальныйИдентификатор()));
		НоваяСтрокаПрицеп.Удалить("ХранимыеДанные");
		
		МассивПрицепов.Добавить(НоваяСтрокаПрицеп);
	КонецЦикла;
	ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеПрицепы", МассивПрицепов);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ТС) Тогда
		СтруктураТС = Новый Структура("Ссылка, СТС, VIN, ГосударственныйНомер, Марка, Модель, Грузоподъемность, ОбъемКузова, ВидТС, ТипВладенияТС");
		СтруктураТС.Ссылка               = ДанныеЗаполнения.ТС;
		СтруктураТС.СТС                  = СтрЗаменить(ДанныеЗаполнения.ТССТС, " ", "");
		СтруктураТС.VIN                  = ДанныеЗаполнения.ТСVIN;
		СтруктураТС.ГосударственныйНомер = ДанныеЗаполнения.ТСГосударственныйНомер;
		СтруктураТС.Марка                = ДанныеЗаполнения.ТСМарка;
		СтруктураТС.Грузоподъемность     = ДанныеЗаполнения.ТСГрузоподъемность;
		СтруктураТС.ОбъемКузова          = ДанныеЗаполнения.ТСОбъемКузова;
		СтруктураТС.ВидТС                = ДанныеЗаполнения.ТСВидТС;
		СтруктураТС.ТипВладенияТС        = ДанныеЗаполнения.ТСТипВладенияТС;
		СтруктураТС.Модель               = ДанныеЗаполнения.ТСМодель;
		
		ГруппаДанных            = "ТранспортноеСредствоЭПЛ";
		ОписаниеРеквизитовФормы = ДопДанные.ОписаниеРеквизитовФормыТС;
		ДанныеТС = ЗаполнитьТС(СтруктураТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы, МассивПрицепов);
		ДанныеТС.Вставить("ХранимыеДанныеТитулОформлениеТранспортноеСредство", ДанныеТС.ХранимыеДанные);
		ДанныеТС.Удалить("ХранимыеДанные");
		
		ДополнитьСтруктуру(ДанныеПоДокументамОснованиям, ДанныеТС, Истина);
		
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеТранспортноеСредствоТип",                  ДанныеТС.Тип);
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеТранспортноеСредствоМарка",                ДанныеТС.Марка);
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеТранспортноеСредствоМодель",               ДанныеТС.Модель);
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеТранспортноеСредствоРегистрационныйНомер", ДанныеТС.РегистрационныйНомер); 
		ДанныеПоДокументамОснованиям.Вставить("ТитулОформлениеТранспортноеСредствоИнвентарныйНомер",     "");

	КонецЕсли;
 
	
	Возврат ДанныеПоДокументамОснованиям;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляСозданияЭлектронныхПутевыхЛистов()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатПутевойЛист.Номер КАК Номер,
	               |	уатПутевойЛист.Дата КАК Дата,
	               |	уатПутевойЛист.ВидПеревозки.ВидПеревозкиДляЭПЛ КАК ВидПеревозки,
	               |	уатПутевойЛист.ВидСообщения.ВидCообщенияДляЭПЛ КАК ВидСообщения,
	               |	уатПутевойЛист.Организация КАК Оформитель,
	               |	уатПутевойЛист.Медорганизация КАК Медорганизация,
	               |	уатПутевойЛист.КонтрольТранспорта КАК КонтрольТранспорта,
	               |	уатПутевойЛист.ПоказанияОдометра КАК ПоказанияОдометра,
	               |	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	               |	уатПутевойЛист.Водитель1 КАК Водитель1,
	               |	уатПутевойЛист.Водитель2 КАК Водитель2,
	               |	уатПутевойЛист.ОбязательныйПослерейсовыйМедосмотр КАК ОбязательныйПослерейсовыйМедосмотр,
	               |	уатПутевойЛист.ДействителенДо КАК ДействителенДо,
	               |	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	               |	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	               |	уатПутевойЛист.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втЗначенияЗаполнения
	               |ИЗ
	               |	Документ.уатПутевойЛист КАК уатПутевойЛист
	               |ГДЕ
	               |	уатПутевойЛист.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов,
	               |	МАКСИМУМ(уатРегистрационныеДокументы.Серия + уатРегистрационныеДокументы.Номер) КАК Номер
	               |ПОМЕСТИТЬ втСТС
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)
	               |	И уатРегистрационныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	               |	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаОкончания >= &ТекДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаВыдачи <= &ТекДата
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатРегистрационныеДокументы.ВладелецДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗначенияЗаполнения.Номер КАК Номер,
	               |	втЗначенияЗаполнения.Дата КАК Дата,
	               |	втЗначенияЗаполнения.ВидПеревозки КАК ВидПеревозки,
	               |	втЗначенияЗаполнения.ВидСообщения КАК ВидСообщения,
	               |	втЗначенияЗаполнения.Оформитель КАК Оформитель,
	               |	втЗначенияЗаполнения.Медорганизация КАК Медорганизация,
	               |	втЗначенияЗаполнения.КонтрольТранспорта КАК КонтрольТранспорта,
	               |	втЗначенияЗаполнения.ПоказанияОдометра КАК ПоказанияОдометра,
	               |	втЗначенияЗаполнения.Водитель1 КАК Водитель1,
	               |	втЗначенияЗаполнения.Водитель1.ФизическоеЛицо.ФИО КАК Водитель1ФИО,
	               |	втЗначенияЗаполнения.Водитель1.ФизическоеЛицо.ИНН КАК Водитель1ИНН,
	               |	втЗначенияЗаполнения.Водитель1.ФизическоеЛицо КАК Водитель1ФизическоеЛицо,
	               |	втЗначенияЗаполнения.Водитель2 КАК Водитель2,
	               |	втЗначенияЗаполнения.Водитель2.ФизическоеЛицо.ФИО КАК Водитель2ФИО,
	               |	втЗначенияЗаполнения.Водитель2.ФизическоеЛицо.ИНН КАК Водитель2ИНН,
	               |	втЗначенияЗаполнения.Водитель2.ФизическоеЛицо КАК Водитель2ФизическоеЛицо,
	               |	втЗначенияЗаполнения.ТС КАК ТС,
	               |	втЗначенияЗаполнения.ТС.VIN КАК ТСVIN,
	               |	втЗначенияЗаполнения.ТС.Модель.Наименование КАК ТСМодель,
	               |	втЗначенияЗаполнения.ТС.Марка.Наименование КАК ТСМарка,
	               |	втЗначенияЗаполнения.ТС.ГосударственныйНомер КАК ТСГосударственныйНомер,
	               |	втЗначенияЗаполнения.ТС.Модель.Грузоподъемность КАК ТСГрузоподъемность,
	               |	втЗначенияЗаполнения.ТС.Модель.ОбъемКузова КАК ТСОбъемКузова,
	               |	втСТС.Номер КАК ТССТС,
	               |	втЗначенияЗаполнения.ТС.ТипТС.ВидТС КАК ТСВидТС,
	               |	втЗначенияЗаполнения.ТС.ТипВладенияТС КАК ТСТипВладенияТС,
	               |	втЗначенияЗаполнения.ОбязательныйПослерейсовыйМедосмотр КАК ОбязательныйПослерейсовыйМедосмотр,
	               |	втЗначенияЗаполнения.ДействителенДо КАК ДействителенДо,
	               |	втЗначенияЗаполнения.ДатаВыезда КАК ДатаВыезда,
	               |	втЗначенияЗаполнения.ДатаВозвращения КАК ДатаВозвращения,
	               |	втЗначенияЗаполнения.Ссылка КАК Ссылка
	               |ИЗ
	               |	втЗначенияЗаполнения КАК втЗначенияЗаполнения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС
	               |		ПО втЗначенияЗаполнения.ТС = втСТС.ВладелецДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатПутевойЛистПрицепы.ТС КАК Прицеп,
	               |	уатПутевойЛистПрицепы.ТС.VIN КАК ПрицепVIN,
	               |	уатПутевойЛистПрицепы.ТС.Модель.Наименование КАК ПрицепМодель,
	               |	уатПутевойЛистПрицепы.ТС.Марка.Наименование КАК ПрицепМарка,
	               |	уатПутевойЛистПрицепы.ТС.ГосударственныйНомер КАК ПрицепГосударственныйНомер,
	               |	уатПутевойЛистПрицепы.ТС.Модель.Грузоподъемность КАК ПрицепГрузоподъемность,
	               |	уатПутевойЛистПрицепы.ТС.Модель.ОбъемКузова КАК ПрицепОбъемКузова,
	               |	втСТС.Номер КАК ПрицепСТС,
	               |	уатПутевойЛистПрицепы.ТС.ТипТС.ВидТС КАК ПрицепВидТС,
	               |	уатПутевойЛистПрицепы.ТС.ТипВладенияТС КАК ПрицепТипВладенияТС
	               |ИЗ
	               |	втЗначенияЗаполнения КАК втЗначенияЗаполнения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС
	               |			ПО уатПутевойЛистПрицепы.ТС = втСТС.ВладелецДокументов
	               |		ПО втЗначенияЗаполнения.Ссылка = уатПутевойЛистПрицепы.Ссылка";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти  

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначенияКлассификатораУпаковкиИзМакета()
	
	ТаблицаПоказателей = Справочники.КлассификаторУпаковкиЭПД.ТаблицаКлассификатораУпаковки();
	Возврат ТаблицаПоказателей;
	
КонецФункции 

Функция КоличествоСтрокВТаблицеСтруктурыРеквизитов(СтруктураСРеквизитами, ИмяТаблицы)

	Если СтруктураСРеквизитами.СоответствиеТаблицИЧислаСтрок.Свойство(ИмяТаблицы) Тогда
		ЧислоСтрок = СтруктураСРеквизитами.СоответствиеТаблицИЧислаСтрок[ИмяТаблицы];
	Иначе
		ЧислоСтрок = 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок;	

КонецФункции

Функция ПолучитьХранимыеДанныеЭПД(МассивИменРеквизитов, СтруктураРеквизитов, ТабличнаяЧасть = "", НомерСтроки = "") 
	Если ТипЗнч(СтруктураРеквизитов) = Тип("Структура") Тогда
		ДанныеЭПД = Неопределено;
	Иначе
		ДанныеЭПД = СтруктураРеквизитов.Данные; 
	КонецЕсли;
	Индекс = 1; 
	
	СтруктураРезультат = Новый Структура();
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл 
		Если ДанныеЭПД <> Неопределено Тогда
			ТекСтроки = ДанныеЭПД.НайтиСтроки(Новый Структура("Имя", ИмяРеквизита)); 
			Значение  = ТекСтроки[0].Значение;
		Иначе
			Значение  = ЗначениеРеквизитаСтруктурыРеквизитов(СтруктураРеквизитов, ИмяРеквизита, ТабличнаяЧасть, НомерСтроки);
		КонецЕсли; 
		СтруктураРезультат.Вставить(ИмяРеквизита, Значение);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

Функция НайтиСоздатьГрузовоеМесто(НаименованиеГруза, ВидТары, ОписаниеГруза)
	
	Если НЕ ЗначениеЗаполнено(НаименованиеГруза) Тогда 
		Возврат Справочники.уатГрузовыеМеста_уэ.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруза); 
	Запрос.УстановитьПараметр("ВидТары",      ВидТары);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатГрузовыеМеста_уэ.Ссылка КАК Ссылка,
	|	2 КАК Приоритет
	|ИЗ
	|	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|ГДЕ
	|	уатГрузовыеМеста_уэ.Наименование = &Наименование
	|	И НЕ уатГрузовыеМеста_уэ.ЭтоГруппа
	|	И НЕ уатГрузовыеМеста_уэ.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСоответствиеГрузовЭПД.ГрузовоеМесто,
	|	1
	|ИЗ
	|	РегистрСведений.уатСоответствиеГрузовЭПД КАК уатСоответствиеГрузовЭПД
	|ГДЕ
	|	уатСоответствиеГрузовЭПД.ОтгрузочноеНаименованиеГруза = &Наименование
	|	И уатСоответствиеГрузовЭПД.ВидТары = &ВидТары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Приоритет = 2 Тогда
			МенеджерЗаписи = РегистрыСведений.уатСоответствиеГрузовЭПД.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.ГрузовоеМесто                = Выборка.Ссылка;
			МенеджерЗаписи.ОтгрузочноеНаименованиеГруза = НаименованиеГруза;
			МенеджерЗаписи.ВидТары                      = ВидТары;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ГрузовоеМестоОбъект = Справочники.уатГрузовыеМеста_уэ.СоздатьЭлемент();
	ГрузовоеМестоОбъект.Наименование   = НаименованиеГруза;
	ГрузовоеМестоОбъект.ВидУпаковки    = НайтиСоздатьВидУпаковки(ВидТары);
	ГрузовоеМестоОбъект.КоличествоМест = 1;
	ГрузовоеМестоОбъект.ОписаниеГруза  = ОписаниеГруза;
	ГрузовоеМестоОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.уатСоответствиеГрузовЭПД.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.ГрузовоеМесто                = ГрузовоеМестоОбъект.Ссылка;
	МенеджерЗаписи.ОтгрузочноеНаименованиеГруза = НаименованиеГруза;
	МенеджерЗаписи.ВидТары                      = ВидТары;
	МенеджерЗаписи.Записать(Истина);

	Возврат ГрузовоеМестоОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьВидУпаковки(ВидТары)
	
	Если НЕ ЗначениеЗаполнено(ВидТары) Тогда 
		Возврат Справочники.уатВидыУпаковки_уэ.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидТары",      ВидТары);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатВидыУпаковки_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|ГДЕ
	|	уатВидыУпаковки_уэ.Наименование = &ВидТары
	|	И НЕ уатВидыУпаковки_уэ.ЭтоГруппа
	|	И НЕ уатВидыУпаковки_уэ.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ВидУпаковкиОбъект = Справочники.уатВидыУпаковки_уэ.СоздатьЭлемент();
	ВидУпаковкиОбъект.Наименование   = ВидТары;
	
	ВидУпаковкиОбъект.Записать();
	
	Возврат ВидУпаковкиОбъект.Ссылка;
	
КонецФункции

Функция НайтиКонтрагента(ИНН)
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда 
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.ИНН = &ИНН";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Функция ДанныеЗаполненияАдрес(JSONСтрокаАдреса, Префикс, СтруктураАдреса, ЗаписатьАдресДоставкиЭПД = Истина, УчастникЭДО = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	
	СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(JSONСтрокаАдреса);
	
	Если СтруктураАдреса.ТипАдреса = "ВСвободнойФорме" Тогда
		ДанныеЗаполнения.Вставить(Префикс + "Представление",   СтруктураАдреса.Представление);
		ДанныеЗаполнения.Вставить(Префикс + "КодСтраны",       СтруктураАдреса.КодСтраны);
	Иначе	
		ДанныеЗаполнения.Вставить(Префикс + "Индекс",          СтруктураАдреса.Индекс);
		ДанныеЗаполнения.Вставить(Префикс + "КодРегиона",      СтруктураАдреса.КодРегиона);
		ДанныеЗаполнения.Вставить(Префикс + "Город",           СтруктураАдреса.Город + ?(СтруктураАдреса.ГородТипКраткий = "", "", " ") + СтруктураАдреса.ГородТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "Район",           СтруктураАдреса.Район + ?(СтруктураАдреса.РайонТипКраткий = "", "", " ") + СтруктураАдреса.РайонТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "НаселенныйПункт", СтруктураАдреса.НаселенныйПункт + ?(СтруктураАдреса.НаселенныйПунктТипКраткий = "", "", " ") + СтруктураАдреса.НаселенныйПунктТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "Улица",           СтруктураАдреса.Улица + ?(СтруктураАдреса.УлицаТипКраткий = "", "", " ") + СтруктураАдреса.УлицаТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "Дом",             СтруктураАдреса.Здание.Номер);
		Если СтруктураАдреса.Корпуса.Количество() > 0 Тогда
			ДанныеЗаполнения.Вставить(Префикс + "Корпус",      СтруктураАдреса.Корпуса[0].Номер);
		КонецЕсли;
	КонецЕсли;
	
	// Отображаются только адреса которые есть в регистре
	Если ЗаписатьАдресДоставкиЭПД
		И ЗначениеЗаполнено(СтруктураАдреса.Представление)
		И ЗначениеЗаполнено(УчастникЭДО) Тогда
		МенеджерЗаписи = РегистрыСведений.АдресаДоставкиЭПД.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.УчастникЭДО         = УчастникЭДО; 
		МенеджерЗаписи.Представление       = СтруктураАдреса.Представление; 
		МенеджерЗаписи.Адрес               = JSONСтрокаАдреса; 
		МенеджерЗаписи.ПредставлениеАдреса = СтруктураАдреса.Представление;
		МенеджерЗаписи.Записать(Истина);  
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
КонецФункции

Функция ЗаполнитьСотрудника(Водитель, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы) Экспорт
	
	Если ТипЗнч(Водитель) = Тип("Структура") Тогда
		ВодительСсылка  = Водитель.Ссылка;
		ВодительФизЛицо = Водитель.ФизическоеЛицо;
		ФИОВодителя     = Водитель.ФИО;
		ИНН             = Водитель.ИНН; 
	ИначеЕсли ТипЗнч(Водитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВодительСсылка  = Водитель;
		ВодительФизЛицо = Водитель.ФизическоеЛицо;
		ФИОВодителя     = ВодительФизЛицо.ФИО;
		ИНН             = ВодительФизЛицо.ИНН;
		
	Иначе
		ВодительСсылка  = Водитель;
		ВодительФизЛицо = Водитель;
		ФИОВодителя     = ВодительФизЛицо.ФИО;
		ИНН             = ВодительФизЛицо.ИНН;
	КонецЕсли;
	
	ДанныеСотрудник = ЗначенияЗаполненияСотрудник();
	ДанныеСотрудник.Вставить("ВодительФизЛицо", ВодительФизЛицо);
	
	ЗаполнитьЗначенияСвойств(ДанныеСотрудник, ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОВодителя)); 
	ЗаполнитьУдостоверениеВодителя(ДанныеСотрудник, ВодительСсылка); 
	ЗаполнитьЛицензиюМедорганизации(ДанныеСотрудник, ВодительСсылка);
	
	ДанныеСотрудник.ИНН    = ИНН;
	ДанныеСотрудник.Почта  = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ВодительФизЛицо, 
			Справочники.ВидыКонтактнойИнформации.EmailФизЛица
		);

	ДанныеЗаполненияЭДО = уатЗащищенныеФункцииСервер.ПолучитьДанныеЗаполненияЭПД(ДанныеСотрудник, ОписаниеРеквизитовФормы, "Сотрудник");
	ДанныеЗаполнения            = ДанныеЗаполненияЭДО.ДанныеЗаполнения;
	ДанныеЗаполненияТаблицФормы = ДанныеЗаполненияЭДО.ДанныеЗаполненияТаблицФормы;
	НомераТелефонов             = ДанныеЗаполненияЭДО.НомераТелефонов;
		
	// Запишем данные
	ХранимыеДанныеВодитель = ПолучитьХранимыеДанныеПоОбъектуУАТ(ВодительФизЛицо, ГруппаДанных, ИмяДокумента,
		ДанныеЗаполнения, ДанныеЗаполненияТаблицФормы, ОписаниеРеквизитовФормы); 
	ДанныеЗаполнения.Вставить("ХранимыеДанные",  ХранимыеДанныеВодитель);
	ДанныеЗаполнения.Вставить("НомераТелефонов", НомераТелефонов);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ЗаполнитьТС(ТС, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы, МассивПрицепов = Неопределено) Экспорт
	
	ДанныеТС = ЗначенияЗаполненияТС();
	
	Если ТипЗнч(ТС) = Тип("Структура") Тогда
		РеквизитыТС = ТС;
	Иначе
		РеквизитыТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТС,
			"VIN,ГосударственныйНомер,ГаражныйНомер,Марка,Модель,Грузоподъемность,ОбъемКузова,ТипВладенияТС,ТипТС,Ссылка");
		Если НЕ ЗначениеЗаполнено(РеквизитыТС.Грузоподъемность) Тогда
			РеквизитыТС.Грузоподъемность = РеквизитыТС.Модель.Грузоподъемность;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыТС.ОбъемКузова) Тогда
			РеквизитыТС.ОбъемКузова = РеквизитыТС.Модель.ОбъемКузова;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеТС, РеквизитыТС);
	ДанныеТС.ТипВладения = ПолучитьТипВладенияТС(ТС.ТипВладенияТС);

	Если РеквизитыТС.Свойство("СТС") Тогда
		ДанныеТС.НомерСТС = РеквизитыТС.СТС;
	Иначе
		ДанныеТС.НомерСТС = ПолучитьСТС(РеквизитыТС.Ссылка);
	КонецЕсли;
	Если ИмяДокумента = "ЭлектронныйПутевойЛист" Тогда 
		ДанныеТС.Тип = Строка(РеквизитыТС.Ссылка.ТипТС);
	Иначе
		Если РеквизитыТС.Свойство("ВидТС") Тогда
			ДанныеТС.Тип = ПолучитьТипТС(РеквизитыТС.ВидТС);
		Иначе
			ДанныеТС.Тип = ПолучитьТипТС(РеквизитыТС.ТипТС.ВидТС);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеТС.ГосударственныйНомер) Тогда
		Если РеквизитыТС.Свойство("ГаражныйНомер") Тогда
			ДанныеТС.ИнвентарныйНомер = РеквизитыТС.ГаражныйНомер;
		ИначеЕсли РеквизитыТС.Свойство("Ссылка") Тогда
			ДанныеТС.ИнвентарныйНомер = РеквизитыТС.Ссылка.ГаражныйНомер;
		КонецЕсли; 
	КонецЕсли;
	ДанныеТС.Вставить("МассивПрицепов", МассивПрицепов); 
	
	ДанныеЗаполненияЭДО = уатЗащищенныеФункцииСервер.ПолучитьДанныеЗаполненияЭПД(ДанныеТС, ОписаниеРеквизитовФормы, "ТС");
	ДанныеЗаполнения            = ДанныеЗаполненияЭДО.ДанныеЗаполнения;
	ДанныеЗаполненияТаблицФормы = ДанныеЗаполненияЭДО.ДанныеЗаполненияТаблицФормы;
		
	// Запишем данные 
	ХранимыеДанныеТС = ПолучитьХранимыеДанныеПоОбъектуУАТ(ТС.Ссылка, ГруппаДанных, ИмяДокумента,
		ДанныеЗаполнения, ДанныеЗаполненияТаблицФормы, ОписаниеРеквизитовФормы);
		
	ДанныеЗаполнения.Вставить("ХранимыеДанные", ХранимыеДанныеТС);
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ЗаполнитьГруз(Груз, ИмяДокумента, ГруппаДанных, ОписаниеРеквизитовФормы) Экспорт
	
	ДанныеГруз = ЗначенияЗаполненияГруз(); 
	
	Если ТипЗнч(Груз) = Тип("Строка") Тогда 
		ДанныеГруз.ОтгрузочноеНаименованиеГруза = Груз;
		ДанныеГруз.Вставить("ХранимыеДанные", Груз);
	ИначеЕсли ЗначениеЗаполнено(Груз) Тогда
		ДанныеГруз.ОтгрузочноеНаименованиеГруза = Груз.Наименование; 
		
		ДанныеЗаполненияЭДО = уатЗащищенныеФункцииСервер.ПолучитьДанныеЗаполненияЭПД(ДанныеГруз, ОписаниеРеквизитовФормы, "Груз");
		ДанныеЗаполнения            = ДанныеЗаполненияЭДО.ДанныеЗаполнения;
		ДанныеЗаполненияТаблицФормы = ДанныеЗаполненияЭДО.ДанныеЗаполненияТаблицФормы;
		
		// Запишем данные в регистр
		ХранимыеДанныеГруз = ПолучитьХранимыеДанныеПоОбъектуУАТ(Груз.Ссылка, ГруппаДанных, ИмяДокумента,
			ДанныеЗаполнения, ДанныеЗаполненияТаблицФормы, ОписаниеРеквизитовФормы);
		
		ДанныеЗаполнения.Вставить("ХранимыеДанные", ХранимыеДанныеГруз);
		Возврат ДанныеЗаполнения;
	Иначе
		ДанныеГруз.ОтгрузочноеНаименованиеГруза = "Товары народного потребления";
		ДанныеГруз.Вставить("ХранимыеДанные", ДанныеЗаполнения.ОтгрузочноеНаименованиеГруза);
	КонецЕсли;
	
	Возврат ДанныеГруз;
	
КонецФункции

Функция ПолучитьХранимыеДанныеПоОбъектуУАТ(ОбъектУАТ, ГруппаДанных, ИмяДокумента, ДанныеЗаполнения, ДанныеЗаполненияТаблицФормы, ОписаниеРеквизитовФормы) Экспорт  
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОбъектУАТ",    ОбъектУАТ);
	Запрос.УстановитьПараметр("ГруппаДанных", ГруппаДанных);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатСоответствиеХранимыхДанныхЭПД.ХранимыеДанныеЭПД КАК ХранимыеДанныеЭПД
	               |ИЗ
	               |	РегистрСведений.уатСоответствиеХранимыхДанныхЭПД КАК уатСоответствиеХранимыхДанныхЭПД
	               |ГДЕ
	               |	уатСоответствиеХранимыхДанныхЭПД.ОбъектУАТ = &ОбъектУАТ
	               |	И уатСоответствиеХранимыхДанныхЭПД.ХранимыеДанныеЭПД.ГруппаДанных = &ГруппаДанных";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеДанных = Новый Структура();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОписаниеДанных.Вставить("Ключ", Выборка.ХранимыеДанныеЭПД); 
	КонецЕсли;
	
	ОписаниеДанных.Вставить("ДанныеЗаполненияРеквизитовФормы", ДанныеЗаполнения); 
	ОписаниеДанных.Вставить("ДанныеЗаполненияТаблицФормы",     ДанныеЗаполненияТаблицФормы);
	ОписаниеДанных.Вставить("ИмяФормы",                        "Документ." + ИмяДокумента +".Форма." + ГруппаДанных);
	ОписаниеДанных.Вставить("ОписаниеРеквизитовФормы",         ОписаниеРеквизитовФормы); 
	СправочникСсылка = ОбменСГИСЭПД.ЗаписатьХранимыеДанныеЭПД(ГруппаДанных,,,,ОписаниеДанных);
	
	Если РезультатЗапроса.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.уатСоответствиеХранимыхДанныхЭПД.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.ХранимыеДанныеЭПД = СправочникСсылка; 
		МенеджерЗаписи.ОбъектУАТ         = ОбъектУАТ; 
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
		
	Возврат СправочникСсылка; 

КонецФункции

Процедура ЗаполнитьУдостоверениеВодителя(СтруктураЗаполнения, Водитель)
	Если ТипЗнч(Водитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Сотрудники = СотрудникиФормы.СотрудникиФизическогоЛица(Водитель);
		Если Сотрудники.Количество() <> 0 Тогда
			ТекВодитель = Сотрудники[0].Сотрудник;
		Иначе
			ТекВодитель = Водитель;
		КонецЕсли;
		уатОбщегоНазначения.уатУдостоверениеВодителя(ТекВодитель, СтруктураЗаполнения.СерияВУ,
			СтруктураЗаполнения.НомерВУ, "", СтруктураЗаполнения.ДатаВыдачиВУ);
	ИначеЕсли ТипЗнч(Водитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель, СтруктураЗаполнения.СерияВУ,
			СтруктураЗаполнения.НомерВУ, "", СтруктураЗаполнения.ДатаВыдачиВУ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСТС(ТС)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов,
	               |	МАКСИМУМ(уатРегистрационныеДокументы.Серия + уатРегистрационныеДокументы.Номер) КАК Номер
	               |ПОМЕСТИТЬ втСТС
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)
	               |	И уатРегистрационныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	               |	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаОкончания >= &ТекДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА уатРегистрационныеДокументы.ДатаВыдачи = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатРегистрационныеДокументы.ДатаВыдачи <= &ТекДата
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатРегистрационныеДокументы.ВладелецДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	втСТС.Номер КАК СТС
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСТС КАК втСТС
	               |		ПО уатТС.Ссылка = втСТС.ВладелецДокументов";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		Возврат СтрЗаменить(Выборка.СТС, " ", "");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипТС(ВидТС)

	СоответвиеТипов = Новый Соответствие();
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.ГрузовойБортовой, Нстр("ru = 'Грузовой автомобиль общего назначения'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.ГрузовойФургон,   Нстр("ru = 'Грузовой автомобиль общего назначения'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Контейнеровоз,    Нстр("ru = 'Специальный грузовой автомобиль'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Легковой,         Нстр("ru = 'Легковой автомобиль общего назначения'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Полуприцеп,       Нстр("ru = 'Грузовой полуприцеп общего назначения'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Прицеп,           Нстр("ru = 'Грузовой прицеп общего назначения'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.ПрицепСамосвал,   Нстр("ru = 'Специальный прицеп'"));  
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.ПрицепЦистерна,   Нстр("ru = 'Специальный прицеп'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Рефрижератор,     Нстр("ru = 'Специальный грузовой автомобиль'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Самосвал,         Нстр("ru = 'Специальный грузовой автомобиль'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.СедельныйТягач,   Нстр("ru = 'Седельный тягач'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Специальный,      Нстр("ru = 'Специальный грузовой автомобиль'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Цистерна,         Нстр("ru = 'Специальный грузовой автомобиль'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.Строительный,     Нстр("ru = 'Специальный грузовой автомобиль'"));
	СоответвиеТипов.Вставить(Перечисления.уатВидыТС.ПустаяСсылка(),   Нстр("ru = 'Грузовой автомобиль общего назначения'"));
	
	ТипТС = СоответвиеТипов.Получить(ВидТС);
	Если ТипТС = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ТипТС;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипВладенияТС(ТипВладения)

	СоответвиеТипов = Новый Соответствие();
	СоответвиеТипов.Вставить(Перечисления.уатТипыВладенияТС.Аренда,                          "3");
	СоответвиеТипов.Вставить(Перечисления.уатТипыВладенияТС.БезвозмездноеПользование,        "5");
	СоответвиеТипов.Вставить(Перечисления.уатТипыВладенияТС.Лизинг,                          "4");
	СоответвиеТипов.Вставить(Перечисления.уатТипыВладенияТС.Собственность,                   "1");
	СоответвиеТипов.Вставить(Перечисления.уатТипыВладенияТС.СовместнаяСобственностьСупругов, "2");
	СоответвиеТипов.Вставить(Перечисления.уатТипыВладенияТС.ПустаяСсылка(),                  "1");
	
	ТипТС = СоответвиеТипов.Получить(ТипВладения);
	Если ТипТС = Неопределено Тогда
		Возврат "1";
	Иначе
		Возврат ТипТС;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоличествоЭПД(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Запрос = Новый Запрос(); 
		Запрос.УстановитьПараметр("ЗаказНаТС", Документ);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД,
		|	уатСвязанныеДокументыЭПД.ЗаказНаТС КАК ЗаказНаТС
		|ИЗ
		|	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
		|ГДЕ
		|	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС
		|	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектроннаяТранспортнаяНакладная)
		|
		|СГРУППИРОВАТЬ ПО
		|	уатСвязанныеДокументыЭПД.ЭПД,
		|	уатСвязанныеДокументыЭПД.ЗаказНаТС";
	Иначе
		
		Запрос = Новый Запрос(); 
		Запрос.УстановитьПараметр("Рейс", Документ);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД,
		|	уатСвязанныеДокументыЭПД.Рейс КАК Рейс
		|ИЗ
		|	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
		|ГДЕ
		|	уатСвязанныеДокументыЭПД.Рейс = &Рейс
		|
		|СГРУППИРОВАТЬ ПО
		|	уатСвязанныеДокументыЭПД.ЭПД,
		|	уатСвязанныеДокументыЭПД.Рейс"; 
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Количество();
	
КонецФункции

Функция ПолучитьРеквизитыУчастника(Участник, Префикс)
	
	Результат = СтруктураУчастникаЭПД(Префикс);
	
	Если ЗначениеЗаполнено(Участник) Тогда
		СведенияОбУчастнике  = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Участник, СведенияОбУчастнике);
		
		СтранаРегистрации = Неопределено;
		СведенияОбУчастнике.Свойство("СтранаРегистрации", СтранаРегистрации);
		
		ЮрФизЛицо = Неопределено;
		СведенияОбУчастнике.Свойство("ЮридическоеФизическоеЛицо", ЮрФизЛицо);		
		Если ЮрФизЛицо = Неопределено Тогда
			СведенияОбУчастнике.Свойство("ЮрФизЛицо", ЮрФизЛицо);	
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(СтранаРегистрации) 
			И СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			Результат.Вставить(Префикс + "ИнострЛицоБезУчетаСтрана", СтранаРегистрации);
			Результат.Вставить(Префикс + "ИнострЛицоБезУчетаИдентификатор", СведенияОбУчастнике.ОГРН);
		Иначе
			Если Строка(ЮрФизЛицо) = "Физическое лицо" Тогда
				Если СведенияОбУчастнике.Свойство("ФИОФизлица") Тогда
					ЧастиФИО = СтрРазделить(СведенияОбУчастнике.ФИОФизлица, " ");
					Фамилия = ЧастиФИО[0];
					Имя = ?(ЧастиФИО.Количество() > 1, ЧастиФИО[1], "");
					Отчество = ?(ЧастиФИО.Количество() > 2, ЧастиФИО[2], "");
				Иначе
					Фамилия = СведенияОбУчастнике.Фамилия;
					Имя = СведенияОбУчастнике.Имя;
					Отчество = СведенияОбУчастнике.Отчество;	
				КонецЕсли;
				Результат.Вставить(Префикс + "ИПФамилия", Фамилия);
				Результат.Вставить(Префикс + "ИПИмя", Имя);
				Результат.Вставить(Префикс + "ИПОтчество", Отчество);	
				Результат.Вставить(Префикс + "ИЛ_ИНН", СведенияОбУчастнике.ИНН);
				Результат.Вставить(Префикс + "ОГРНИП", СведенияОбУчастнике.ОГРН);
			Иначе
				Результат.Вставить(Префикс + "ЮЛНаименование", СведенияОбУчастнике.ПолноеНаименование);
				Результат.Вставить(Префикс + "ЮЛ_ИНН",  СведенияОбУчастнике.ИНН);
				Результат.Вставить(Префикс + "ЮЛ_КПП",  СведенияОбУчастнике.КПП); 
				Результат.Вставить(Префикс + "ЮЛ_ОГРН", СведенияОбУчастнике.ОГРН);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат.Вставить(Префикс + "НомераТелефонов", Новый Массив());
		Результат.Вставить(Префикс + "АдресаЭлектроннойПочты", Новый Массив());
		Возврат Результат;
	КонецЕсли;
	
	ТекМассивТлф = СтрРазделить(СведенияОбУчастнике.Телефоны, ",", Ложь);
	
	МассивТлф = Новый Массив();
	Для Каждого ТекТелефон Из ТекМассивТлф Цикл
		МассивТлф.Добавить(Новый Структура("Телефон", ТекТелефон))
	КонецЦикла;
	Результат.Вставить(Префикс + "НомераТелефонов", МассивТлф);
	
	Email = Неопределено;
	СведенияОбУчастнике.Свойство(Префикс + "Email", Email);
	Если Email = Неопределено Тогда
		СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", Email);	
	КонецЕсли;
	
	МассивEmail = Новый Массив;
	Если ЗначениеЗаполнено(Email) Тогда	
		МассивEmail.Добавить(Новый Структура("АдресЭлектроннойПочты", Email));
	КонецЕсли;
	Результат.Вставить(Префикс + "АдресаЭлектроннойПочты", МассивEmail);   
	
	ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Ложь, Истина, Истина);
		
	АдресВоВнутреннемФормате = Неопределено;
	СведенияОбУчастнике.Свойство("ЗначениеJSONЮридическийАдрес", АдресВоВнутреннемФормате);
	Если АдресВоВнутреннемФормате = Неопределено Тогда
		СведенияОбУчастнике.Свойство("ЮридическийАдресXML", АдресВоВнутреннемФормате);	
	КонецЕсли;
	АдресОтправителяСтруктура = РаботаСАдресами.СведенияОбАдресе(АдресВоВнутреннемФормате, ДополнительныеПараметры);
	
	Результат.Вставить(Префикс + "АдресИндекс", АдресОтправителяСтруктура.Индекс);
	Результат.Вставить(Префикс + "АдресКодРегиона", АдресОтправителяСтруктура.КодРегиона);
	Если АдресОтправителяСтруктура.КодРегиона = "77" Или АдресОтправителяСтруктура.КодРегиона = "78" Или АдресОтправителяСтруктура.КодРегиона = "92" Тогда
		Результат.Вставить(Префикс + "АдресГород", АдресОтправителяСтруктура.Регион + ?(АдресОтправителяСтруктура.РегионТипКраткий = "", "", " ") + АдресОтправителяСтруктура.РегионТипКраткий);	
	Иначе
		Результат.Вставить(Префикс + "АдресГород", АдресОтправителяСтруктура.Город + ?(АдресОтправителяСтруктура.ГородТипКраткий = "", "", " ") + АдресОтправителяСтруктура.ГородТипКраткий);
	КонецЕсли;	
	Результат.Вставить(Префикс + "АдресРайон", АдресОтправителяСтруктура.Район + ?(АдресОтправителяСтруктура.РайонТипКраткий = "", "", " ") + АдресОтправителяСтруктура.РайонТипКраткий);
	Результат.Вставить(Префикс + "АдресНаселенныйПункт", АдресОтправителяСтруктура.НаселенныйПункт + ?(АдресОтправителяСтруктура.НаселенныйПунктТипКраткий = "", "", " ") + АдресОтправителяСтруктура.НаселенныйПунктТипКраткий);
	Результат.Вставить(Префикс + "АдресУлица", АдресОтправителяСтруктура.Улица + ?(АдресОтправителяСтруктура.УлицаТипКраткий = "", "", " ") + АдресОтправителяСтруктура.УлицаТипКраткий);
	Результат.Вставить(Префикс + "АдресДом", АдресОтправителяСтруктура.Здание.Номер);
	Если АдресОтправителяСтруктура.Корпуса.Количество() > 0 Тогда
		Результат.Вставить(Префикс + "АдресКорпус", АдресОтправителяСтруктура.Корпуса[0].Номер);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СтруктураУчастникаЭПД(Префикс)
	
	Результат = Новый Структура;
	
	Результат.Вставить(Префикс + "ИнострЛицоБезУчетаСтрана");
	Результат.Вставить(Префикс + "ИнострЛицоБезУчетаИдентификатор");
	
	Результат.Вставить(Префикс + "ИПФамилия");
	Результат.Вставить(Префикс + "ИПИмя");
	Результат.Вставить(Префикс + "ИПОтчество");	
	Результат.Вставить(Префикс + "ИЛ_ИНН");
	Результат.Вставить(Префикс + "ОГРНИП");
	Результат.Вставить(Префикс + "ЮЛНаименование");
	Результат.Вставить(Префикс + "ЮЛ_ИНН");
	Результат.Вставить(Префикс + "ЮЛ_КПП");
	Результат.Вставить(Префикс + "ОГРН");

	Результат.Вставить(Префикс + "АдресИндекс");
	Результат.Вставить(Префикс + "АдресКодРегиона");
	Результат.Вставить(Префикс + "АдресГород");	
	Результат.Вставить(Префикс + "АдресРайон");
	Результат.Вставить(Префикс + "АдресНаселенныйПункт");
	Результат.Вставить(Префикс + "АдресУлица");
	Результат.Вставить(Префикс + "АдресДом");
	Результат.Вставить(Префикс + "АдресКорпус");
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса для определения грузов по FTL заказам
Функция ГрузыFTLЗаказовТекстЗапроса() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК Груз,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ЕдиницаИзмерения,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто КАК ВесБрутто,
	               |	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК Количество,
	               |	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК КоличествоМест,
	               |	уатЗаказГрузоотправителяГрузовойСостав.Объем КАК Объем,
	               |	уатЗаказГрузоотправителяГрузовойСостав.Стоимость / уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК Цена,
	               |	уатЗаказГрузоотправителяГрузовойСостав.Стоимость КАК Сумма,
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки КАК НомерСтрокиГруза,
	               |	0 КАК КоличествоТоваров,
	               |	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК КоличествоГрузовыхМест
	               |ПОМЕСТИТЬ втГрузыЗаказа
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ПО (уатЗаказГрузоотправителя.Ссылка В (&ЗаказСсылка))
	               |			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	               |			И уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатЗаказГрузоотправителяТовары.Номенклатура,
	               |	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	               |	уатЗаказГрузоотправителяТовары.ВесБрутто,
	               |	уатЗаказГрузоотправителяТовары.Количество,
	               |	уатЗаказГрузоотправителяТовары.КоличествоМест,
	               |	уатЗаказГрузоотправителяТовары.Объем,
	               |	уатЗаказГрузоотправителяТовары.Цена,
	               |	уатЗаказГрузоотправителяТовары.Сумма,
	               |	уатЗаказГрузоотправителя.Ссылка,
	               |	уатЗаказГрузоотправителяТовары.НомерСтроки,
	               |	уатЗаказГрузоотправителяТовары.Количество,
	               |	0
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |		ПО (уатЗаказГрузоотправителя.Ссылка В (&ЗаказСсылка))
	               |			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	               |			И уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втГрузыЗаказа.Ссылка КАК Ссылка,
	               |	втГрузыЗаказа.Груз КАК Груз,
	               |	втГрузыЗаказа.НомерСтрокиГруза КАК НомерСтрокиГруза,
	               |	втГрузыЗаказа.КоличествоМест КАК КоличествоМест,
	               |	втГрузыЗаказа.Количество КАК Количество,
	               |	МИНИМУМ(ЕСТЬNULL(уатЗаказГрузоотправителяОтрезкиПути.ПунктОтправления, 0)) КАК ПунктОтправленияНомерСтроки,
	               |	МАКСИМУМ(ЕСТЬNULL(уатЗаказГрузоотправителяОтрезкиПути.ПунктНазначения, 0)) КАК ПунктНазначенияНомерСтроки,
	               |	втГрузыЗаказа.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	втГрузыЗаказа.ВесБрутто КАК ВесБрутто,
	               |	втГрузыЗаказа.Объем КАК Объем,
	               |	втГрузыЗаказа.Цена КАК Цена,
	               |	втГрузыЗаказа.Сумма КАК Сумма,
	               |	втГрузыЗаказа.КоличествоТоваров КАК КоличествоТоваров,
	               |	втГрузыЗаказа.КоличествоГрузовыхМест КАК КоличествоГрузовыхМест
	               |ПОМЕСТИТЬ втГрузыЗаказаСОтрезками
	               |ИЗ
	               |	втГрузыЗаказа КАК втГрузыЗаказа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ОтрезкиПути КАК уатЗаказГрузоотправителяОтрезкиПути
	               |		ПО втГрузыЗаказа.Ссылка = уатЗаказГрузоотправителяОтрезкиПути.Ссылка
	               |			И втГрузыЗаказа.НомерСтрокиГруза = уатЗаказГрузоотправителяОтрезкиПути.Груз
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втГрузыЗаказа.Груз,
	               |	втГрузыЗаказа.НомерСтрокиГруза,
	               |	втГрузыЗаказа.Количество,
	               |	втГрузыЗаказа.КоличествоМест,
	               |	втГрузыЗаказа.Ссылка,
	               |	втГрузыЗаказа.ЕдиницаИзмерения,
	               |	втГрузыЗаказа.ВесБрутто,
	               |	втГрузыЗаказа.Объем,
	               |	втГрузыЗаказа.Цена,
	               |	втГрузыЗаказа.Сумма,
	               |	втГрузыЗаказа.КоличествоТоваров,
	               |	втГрузыЗаказа.КоличествоГрузовыхМест
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втГрузыЗаказаСОтрезками.Ссылка КАК Ссылка,
	               |	втГрузыЗаказаСОтрезками.Груз КАК Груз,
	               |	СУММА(втГрузыЗаказаСОтрезками.КоличествоМест) КАК КоличествоМест,
	               |	СУММА(втГрузыЗаказаСОтрезками.Количество) КАК Количество,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК ПунктОтправления,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК ПунктНазначения,
	               |	втГрузыЗаказаСОтрезками.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	СУММА(втГрузыЗаказаСОтрезками.ВесБрутто) КАК ВесБрутто,
	               |	СУММА(втГрузыЗаказаСОтрезками.Объем) КАК Объем,
	               |	втГрузыЗаказаСОтрезками.Цена КАК Цена,
	               |	СУММА(втГрузыЗаказаСОтрезками.Сумма) КАК Сумма,
	               |	СУММА(втГрузыЗаказаСОтрезками.КоличествоТоваров) КАК КоличествоТоваров,
	               |	СУММА(втГрузыЗаказаСОтрезками.КоличествоГрузовыхМест) КАК КоличествоГрузовыхМест,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.ОтправительПолучатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Грузоотправитель,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.ОтправительПолучатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Грузополучатель
	               |ПОМЕСТИТЬ втГрузыЗаказаСПунктами
	               |ИЗ
	               |	втГрузыЗаказаСОтрезками КАК втГрузыЗаказаСОтрезками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	               |		ПО втГрузыЗаказаСОтрезками.Ссылка = уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка
	               |			И втГрузыЗаказаСОтрезками.ПунктОтправленияНомерСтроки = уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты1
	               |		ПО втГрузыЗаказаСОтрезками.Ссылка = уатЗаказГрузоотправителяПромежуточныеПункты1.Ссылка
	               |			И втГрузыЗаказаСОтрезками.ПунктНазначенияНомерСтроки = уатЗаказГрузоотправителяПромежуточныеПункты1.НомерСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втГрузыЗаказаСОтрезками.Ссылка,
	               |	втГрузыЗаказаСОтрезками.Груз,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)),
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)),
	               |	втГрузыЗаказаСОтрезками.ЕдиницаИзмерения,
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.ОтправительПолучатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	               |	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.ОтправительПолучатель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	               |	втГрузыЗаказаСОтрезками.Цена
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втГрузыЗаказаСПунктами.Ссылка КАК Заказ,
	               |	втГрузыЗаказаСПунктами.Груз КАК Груз,
	               |	ВЫБОР
	               |		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	               |			ТОГДА втГрузыЗаказаСПунктами.Количество
	               |		ИНАЧЕ втГрузыЗаказаСПунктами.Количество * втГрузыЗаказаСПунктами.КоличествоМест / втГрузыЗаказаСПунктами.КоличествоМест
	               |	КОНЕЦ КАК Количество,
	               |	втГрузыЗаказаСПунктами.КоличествоМест КАК КоличествоМест,
	               |	втГрузыЗаказаСПунктами.ПунктОтправления КАК ПунктОтправления,
	               |	втГрузыЗаказаСПунктами.ПунктНазначения КАК ПунктНазначения,
	               |	втГрузыЗаказаСПунктами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	втГрузыЗаказаСПунктами.ВесБрутто КАК ВесБрутто,
	               |	ВЫБОР
	               |		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	               |			ТОГДА втГрузыЗаказаСПунктами.Объем
	               |		ИНАЧЕ втГрузыЗаказаСПунктами.Объем * втГрузыЗаказаСПунктами.КоличествоМест / втГрузыЗаказаСПунктами.КоличествоМест
	               |	КОНЕЦ КАК Объем,
	               |	втГрузыЗаказаСПунктами.Цена КАК Цена,
	               |	втГрузыЗаказаСПунктами.Сумма КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	               |			ТОГДА втГрузыЗаказаСПунктами.КоличествоТоваров
	               |		ИНАЧЕ втГрузыЗаказаСПунктами.КоличествоТоваров * втГрузыЗаказаСПунктами.КоличествоМест / втГрузыЗаказаСПунктами.КоличествоМест
	               |	КОНЕЦ КАК КоличествоТоваров,
	               |	ВЫБОР
	               |		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	               |			ТОГДА втГрузыЗаказаСПунктами.КоличествоГрузовыхМест
	               |		ИНАЧЕ втГрузыЗаказаСПунктами.КоличествоГрузовыхМест * втГрузыЗаказаСПунктами.КоличествоМест / втГрузыЗаказаСПунктами.КоличествоМест
	               |	КОНЕЦ КАК КоличествоГрузовыхМест,
	               |	втГрузыЗаказаСПунктами.Грузоотправитель КАК Грузоотправитель,
	               |	втГрузыЗаказаСПунктами.Грузополучатель КАК Грузополучатель
	               |ИЗ
	               |	втГрузыЗаказаСПунктами КАК втГрузыЗаказаСПунктами
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатЗаказГрузоотправителя.Ссылка,
	               |	НЕОПРЕДЕЛЕНО,
	               |	0,
	               |	уатЗаказГрузоотправителя.КоличествоМест,
	               |	уатЗаказГрузоотправителя.АдресОтправления,
	               |	уатЗаказГрузоотправителя.АдресНазначения,
	               |	НЕОПРЕДЕЛЕНО,
	               |	уатЗаказГрузоотправителя.ВесБрутто,
	               |	уатЗаказГрузоотправителя.Объем,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	уатЗаказГрузоотправителя.Грузоотправитель,
	               |	уатЗаказГрузоотправителя.Грузополучатель
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка В(&ЗаказСсылка)
	               |	И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПунктОтправления,
	               |	ПунктНазначения";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьЛицензиюМедорганизации(СтруктураЗаполнения, Сотрудник)
	уатОбщегоНазначения.уатЛицензияМедорганизации(Сотрудник, СтруктураЗаполнения.ЛицензияСерия,
	СтруктураЗаполнения.ЛицензияНомер, СтруктураЗаполнения.ЛицензияДатаВыдачи, СтруктураЗаполнения.ЛицензияСрокОкончания, СтруктураЗаполнения.МедорганизацияНаименование);
КонецПроцедуры

Процедура ЗаполнитьУчастников(Объект) Экспорт
	
	МассивНастроек = Новый Массив;
	
	ТипОрганизация = ОбменСГИСЭПДВызовСервера.ПолучитьТипОрганизация();
	КлючНастроекОтправкиМед = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправкиМед.ВидДокумента = Объект.ВидДокумента;
	КлючНастроекОтправкиМед.Отправитель = Объект.СсылкаТитулОформлениеОформитель;
	Если ЗначениеЗаполнено(Объект.СсылкаТитулОформлениеМедорганизация) Тогда
		КлючНастроекОтправкиМед.Получатель = Объект.СсылкаТитулОформлениеМедорганизация; 	
	Иначе
		КлючНастроекОтправкиМед.Получатель = Объект.СсылкаТитулОформлениеОформитель;
	КонецЕсли;
	МассивНастроек.Добавить(КлючНастроекОтправкиМед);
	
	Если ЗначениеЗаполнено(Объект.СсылкаТитулОформлениеТехконтроль) Тогда
		КлючНастроекОтправкиТК = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправкиТК.ВидДокумента = Объект.ВидДокумента;
		КлючНастроекОтправкиТК.Отправитель = Объект.СсылкаТитулОформлениеОформитель;
		КлючНастроекОтправкиТК.Получатель = Объект.СсылкаТитулОформлениеТехконтроль;
		МассивНастроек.Добавить(КлючНастроекОтправкиТК);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СсылкаТитулОформлениеПоказанияОдометра) Тогда
		КлючНастроекОтправкиОД = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроекОтправкиОД.ВидДокумента = Объект.ВидДокумента;
		КлючНастроекОтправкиОД.Отправитель = Объект.СсылкаТитулОформлениеОформитель;
		КлючНастроекОтправкиОД.Получатель = Объект.СсылкаТитулОформлениеПоказанияОдометра;
		МассивНастроек.Добавить(КлючНастроекОтправкиОД);
	КонецЕсли;
	
	ПараметрыНастройкиОбменаСКонтрагентом = Новый Структура;
	ПараметрыНастройкиОбменаСКонтрагентом.Вставить("НастройкаОдногоДокумента", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивНастроек", МассивНастроек);
	ДополнительныеПараметры.Вставить("ИндексНастройки", 1);
	ДополнительныеПараметры.Вставить("ПараметрыНастройкиОбменаСКонтрагентом", ПараметрыНастройкиОбменаСКонтрагентом);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", Новый Структура);
	ДополнительныеПараметры.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя(Объект));
	
	Если МассивНастроек.Количество() > 0 Тогда
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйВызовСервера.НастройкиОтправки(МассивНастроек[0]);
		ЗаполнитьУчастников_ПослеНастроек(Объект, ДополнительныеПараметры, НастройкиОтправки); 
	Иначе
		ЗаполнитьУчастников_ПослеНастроек(Объект, ДополнительныеПараметры); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификациюФайлаОбмена(ДокументОбъект, ДанныеДляЗаполнения) Экспорт
	ИнформацияПоПрефиксамТитула = ОбменСГИСЭПДКлиентСервер.ПрефиксТитулаПоЭлементуРегламентаЭДО(ДокументОбъект.ТекущийТитул);
	
	ПрефикТитула                = ИнформацияПоПрефиксамТитула.ВПрограмме;
	ДатаИВремяФормирования      = ТекущаяДатаСеанса();
	ДатаФормирования            = НачалоДня(ДатаИВремяФормирования);
	ВремяФормированияФайла      = Дата('00010101') + (ДатаИВремяФормирования - ДатаФормирования);
	
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ДатаФормированияФайла",  ДатаИВремяФормирования);
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ВремяФормированияФайла", ВремяФормированияФайла);
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ИдентификаторФайла",     ПолучитьИмяФайла(ИнформацияПоПрефиксамТитула.ШаблонИмениФайла, 
																				ДокументОбъект.ИдентификаторОформителя,
																				ДокументОбъект.ИдентификаторМедорганизации,
																				ДокументОбъект.ИдентификаторТехконтроль,
																				ДокументОбъект.ИдентификаторПоказанияОдометра));
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ВерсияПрограммы",        ОбменСГИСЭПДКлиентСервер.ВерсияПрограммы());
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ВерсияФормата",          ОбменСГИСЭПДКлиентСервер.ВерсияФормата());
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "КодДокументаПоКНД",      ИнформацияПоПрефиксамТитула.КНД); 
	
	ДанныеСертификатаУчетнойЗаписиЭДО = ОбменСГИСЭПДКлиентСервер.ДанныеСертификатаУчетнойЗаписиЭДО(ИдентификаторОтправителя(ДокументОбъект));
	
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантТипПодписи",       "1");
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантСпособПодтвержденияПолномочий", "1");
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантФамилия",   ДанныеСертификатаУчетнойЗаписиЭДО.Фамилия);
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантИмя",       ДанныеСертификатаУчетнойЗаписиЭДО.Имя); 
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантОтчество",  ДанныеСертификатаУчетнойЗаписиЭДО.Отчество);
	ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантДолжность", ДанныеСертификатаУчетнойЗаписиЭДО.Должность);
	
	Если ДокументОбъект.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1")
		И НЕ ЗначениеЗаполнено(ДокументОбъект.УИДМинтранс) Тогда
		ПолучитьГУИДОтОператора(ДокументОбъект, ДокументОбъект.ИдентификаторОформителя);
	ИначеЕсли ДокументОбъект.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.УИДМинтранс) Тогда
			ПолучитьГУИДОтОператора(ДокументОбъект, ДокументОбъект.ИдентификаторПолучателя, Истина);
		КонецЕсли;
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "УИДМинтранс", ДокументОбъект.УИДМинтранс);
	ИначеЕсли ДокументОбъект.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3")
		ИЛИ ДокументОбъект.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4")
		ИЛИ ДокументОбъект.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") 
		ИЛИ ДокументОбъект.ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "УИДМинтранс", ДокументОбъект.УИДМинтранс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСертификатаУчетнойЗаписиЭДО.НомерДоверенности) Тогда 
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантДоверенностьЭлектронная__1__Номер", ДанныеСертификатаУчетнойЗаписиЭДО.НомерДоверенности);
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантДоверенностьЭлектронная__1__Дата",  ДанныеСертификатаУчетнойЗаписиЭДО.ДатаДоверенности);
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантДоверенностьЭлектронная__1__НомерВнутр", ДанныеСертификатаУчетнойЗаписиЭДО.ПорядковыйНомерДоверенности);
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантДоверенностьЭлектронная__1__ИнформационнаяСистема", ДанныеСертификатаУчетнойЗаписиЭДО.СведенияОбИнформационнойСистеме);
		ДанныеДляЗаполнения.Вставить(ПрефикТитула + "ПодписантСпособПодтвержденияПолномочий", "2");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУчастников_ПослеНастроек(Объект, ДополнительныеПараметры, Настройка = Неопределено)
	
	МассивНастроек = Неопределено;
	ДополнительныеПараметры.Свойство("МассивНастроек", МассивНастроек);
	ЕстьНастройки = МассивНастроек <> Неопределено И МассивНастроек.Количество() > 0;
	
	Если ЕстьНастройки = Истина Тогда
		Если Настройка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Настройка.Отправитель = Объект.СсылкаТитулОформлениеОформитель Тогда
			Объект.ИдентификаторОформителя = Настройка.ИдентификаторОтправителя;
		КонецЕсли;
		
		Если Настройка.Отправитель = Объект.СсылкаТитулОформлениеМедорганизация Тогда
			Объект.ИдентификаторМедорганизации = Настройка.ИдентификаторОтправителя;
		КонецЕсли;
		
		Если Настройка.Отправитель = Объект.СсылкаТитулОформлениеТехконтроль Тогда
			Объект.ИдентификаторТехконтроль = Настройка.ИдентификаторОтправителя;
		КонецЕсли;
		
		Если Настройка.Отправитель = Объект.СсылкаТитулОформлениеПоказанияОдометра Тогда
			Объект.ИдентификаторПоказанияОдометра = Настройка.ИдентификаторОтправителя;
		КонецЕсли;
	
	
		Если Настройка.Получатель = Объект.СсылкаТитулОформлениеОформитель Тогда
			Объект.ИдентификаторОформителя = Настройка.ИдентификаторПолучателя;
		КонецЕсли;
		
		Если Настройка.Получатель = Объект.СсылкаТитулОформлениеМедорганизация Тогда
			Объект.ИдентификаторМедорганизации = Настройка.ИдентификаторПолучателя;
		КонецЕсли;
		
		Если Настройка.Получатель = Объект.СсылкаТитулОформлениеТехконтроль Тогда
			Объект.ИдентификаторТехконтроль = Настройка.ИдентификаторПолучателя;
		КонецЕсли;
		
		Если Настройка.Получатель = Объект.СсылкаТитулОформлениеПоказанияОдометра Тогда
			Объект.ИдентификаторПоказанияОдометра = Настройка.ИдентификаторПолучателя;
		КонецЕсли;

		ИндексНастройки = 0;
		
		Если ДополнительныеПараметры <> Неопределено 
		И МассивНастроек <> Неопределено
		И ДополнительныеПараметры.Свойство("ИндексНастройки", ИндексНастройки) = Истина
		И МассивНастроек.ВГраница() >= ИндексНастройки Тогда
			ДополнительныеПараметрыСледующий = Новый Структура;
			Для Каждого КиЗ Из ДополнительныеПараметры Цикл
				ДополнительныеПараметрыСледующий.Вставить(КиЗ.Ключ, КиЗ.Значение);	
			КонецЦикла;
			ДополнительныеПараметрыСледующий.Вставить("ИндексНастройки", ИндексНастройки + 1);
			НастройкиОтправкиСледующий = НастройкиОтправкиЭДОСлужебныйВызовСервера.НастройкиОтправки(МассивНастроек[ИндексНастройки]);	
			ЗаполнитьУчастников_ПослеНастроек(Объект, ДополнительныеПараметрыСледующий, НастройкиОтправкиСледующий);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СсылкаТитулОформлениеМедорганизация) = Ложь Тогда
		Объект.ИдентификаторМедорганизации = Объект.ИдентификаторОформителя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СсылкаТитулОформлениеТехконтроль) = Ложь Тогда
		Объект.ИдентификаторТехконтроль = Объект.ИдентификаторОформителя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СсылкаТитулОформлениеПоказанияОдометра) = Ложь Тогда
		Объект.ИдентификаторПоказанияОдометра = Объект.ИдентификаторОформителя;
	КонецЕсли;
	ИзмененСоставУчастников = Ложь;
	
КонецПроцедуры

Функция ПолучитьИмяФайла(Шаблон, ИдОформителя, ИдМедорганизации, ИдТехконтроль, ИдОдометр, НаличиеДругихПолучателей = Ложь)
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Результат = Шаблон;
	Результат = СтрЗаменить(Результат, "ИдОФ", ИдОформителя);
	Результат = СтрЗаменить(Результат, "ИдМО", ИдМедорганизации);
	Результат = СтрЗаменить(Результат, "ИдТК", ИдТехконтроль);
	Результат = СтрЗаменить(Результат, "ИдОД", ИдОдометр);
	Результат = СтрЗаменить(Результат, "GGGGMMDD", Формат(ТекущаяДатаСеанса, "ДФ=ггггММдд"));
	Результат = СтрЗаменить(Результат, "ГУИДФайла", Строка(Новый УникальныйИдентификатор()));
	Результат = СтрЗаменить(Результат, "НалДр", ?(НаличиеДругихПолучателей = Истина, "1", "0"));
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторОтправителя(Объект) Экспорт

	Результат = Неопределено;
	
	ТипОрганизация = ОбменСГИСЭПДВызовСервера.ПолучитьТипОрганизация();
	Если ТипЗнч(Объект.СсылкаТитулОформлениеМедорганизация) = ТипОрганизация Тогда
		Результат = Объект.ИдентификаторМедорганизации;
	ИначеЕсли ТипЗнч(Объект.СсылкаТитулОформлениеМедорганизация) = ТипОрганизация Тогда
		Результат = Объект.ИдентификаторТехконтроль;
	ИначеЕсли ТипЗнч(Объект.СсылкаТитулОформлениеПоказанияОдометра) = ТипОрганизация Тогда
		Результат = Объект.ИдентификаторПоказанияОдометра;
	Иначе
		Результат = Объект.ИдентификаторОформителя;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьГУИДОтОператора(Объект, ИдентификаторАбонента, ЭтоВторойТитул = Ложь)
	
	Если ЭтоВторойТитул = Истина Тогда
		Объект.УИДМинтранс = ОбменСГИСЭПДВызовСервера.ПолучитьИдентификаторЧерезСервисОператораЭДО(ИдентификаторАбонента, ЭтоВторойТитул, Объект.Ссылка);
	Иначе
		Объект.УИДМинтранс = ОбменСГИСЭПДВызовСервера.ПолучитьИдентификаторЧерезСервисОператораЭДО(ИдентификаторАбонента, ЭтоВторойТитул);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПодписьТитулаBase64(Ссылка, ТипЭлементаРегламента) Экспорт
	
	ПодписьBase64 = "";
	
	СообщениеТитула = ОбменСГИСЭПД.ПолучитьСообщениеТитула(Ссылка, ТипЭлементаРегламента);
	
	Если ЗначениеЗаполнено(СообщениеТитула) Тогда
		УстановленныеПодписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СообщениеТитула);
		Для Каждого ОписаниеПодписи Из УстановленныеПодписи Цикл
			ПодписьBase64 = Base64Строка(ОписаниеПодписи.Подпись);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПодписьBase64;
	
КонецФункции

Функция ПолучитьСоздатьЖурнал(ТекПЛ, Титул, ДатаИВремяПроведения, флВодитель2 = Ложь) 
	Если Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2") Тогда
		СозданныеДокументы = уатЖурналыТранспортныхДокументов.СозданныеДокументыМедосмотраПоПЛ(ТекПЛ);
		СозданныйДокумент  = ?(флВодитель2, СозданныеДокументы.Предрейсовый2, СозданныеДокументы.Предрейсовый1);
		ЖурналНаименование = "уатЖурналМедицинскогоОсмотраВодителей";
	ИначеЕсли Титул =  ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
		СозданныеДокументы = уатЖурналыТранспортныхДокументов.СозданныеДокументыМедосмотраПоПЛ(ТекПЛ);
		СозданныйДокумент  = ?(флВодитель2, СозданныеДокументы.Послерейсовый2, СозданныеДокументы.Предрейсовый1);
		ЖурналНаименование = "уатЖурналМедицинскогоОсмотраВодителей";
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3") Тогда
		СозданныеДокументы = уатЖурналыТранспортныхДокументов.СозданныеДокументыКонтроляТСПоПЛ(ТекПЛ);
		СозданныйДокумент  = СозданныеДокументы.Предрейсовый; 
		ЖурналНаименование = "уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС";
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4") Тогда
		СозданныеДокументы = уатЖурналыТранспортныхДокументов.СозданныеДокументыОсмотровОдометровПоПЛ(ТекПЛ);
		СозданныйДокумент  = СозданныеДокументы.Предрейсовый; 
		ЖурналНаименование = "уатЖурналУчетаПоказанийОдометра";
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") Тогда
		СозданныеДокументы = уатЖурналыТранспортныхДокументов.СозданныеДокументыОсмотровОдометровПоПЛ(ТекПЛ);
		СозданныйДокумент  = СозданныеДокументы.Послерейсовый; 
		ЖурналНаименование = "уатЖурналУчетаПоказанийОдометра";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СоздатьДокумент = НЕ ЗначениеЗаполнено(СозданныйДокумент); 
	
	Если Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2")
		ИЛИ Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3")
		ИЛИ Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4") Тогда
		ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый;
	Иначе
		ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Послерейсовый;
	КонецЕсли;
	
	Если СоздатьДокумент Тогда
		ЗаписьЖурнала = Документы[ЖурналНаименование].СоздатьДокумент();
		ЗаписьЖурнала.Заполнить(ТекПЛ);
		ЗаписьЖурнала.Дата        = ДатаИВремяПроведения;
		ЗаписьЖурнала.ВидКонтроля = ВидКонтроля;
		
		СтруктураНастройки = Новый Структура("Организация, Подразделение", ЗаписьЖурнала.Организация, ЗаписьЖурнала.Подразделение);
		Если Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2") Тогда
			Если флВодитель2
				И ЗаписьЖурнала.Водитель <> ТекПЛ.Водитель2 Тогда
				ЗаписьЖурнала.Водитель = ТекПЛ.Водитель2;
			КонецЕсли;
			ЗаписьЖурнала.Статус = Справочники.уатСтатусы_уэ.Пройдено;
			ЗаписьЖурнала.Заключение = Справочники.уатЗаключенияОРезультатахМедицинскогоОсмотра.Разрешено;
			ЗаписьЖурнала.Журнал     = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки,
					ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналПредрейсовогоМедицинскогоОсмотра);
			ЗаполнитьРезультатыОсмотраПоШаблону(ЗаписьЖурнала, ЗаписьЖурнала.Журнал.ШаблонРезультатовОсмотра);
		ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
			Если флВодитель2
				И ЗаписьЖурнала.Водитель <> ТекПЛ.Водитель2 Тогда
				ЗаписьЖурнала.Водитель = ТекПЛ.Водитель2;
			КонецЕсли;
			ЗаписьЖурнала.Статус = Справочники.уатСтатусы_уэ.Пройдено;
			ЗаписьЖурнала.Заключение = Справочники.уатЗаключенияОРезультатахМедицинскогоОсмотра.Разрешено;
			ЗаписьЖурнала.Журнал = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки,
					ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналПослерейсовогоМедицинскогоОсмотра);
			ЗаполнитьРезультатыОсмотраПоШаблону(ЗаписьЖурнала, ЗаписьЖурнала.Журнал.ШаблонРезультатовОсмотра);
		ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3") Тогда
			ЗаписьЖурнала.Статус = Справочники.уатСтатусы_уэ.Пройдено;
			ЗаписьЖурнала.Журнал = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналПредрейсовогоИПослерейсовогоКонтроля); 
			ЗаполнитьРезультатыОсмотраПоШаблону(ЗаписьЖурнала, ЗаписьЖурнала.Журнал.ШаблонРезультатовОсмотра);
		ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4") 
			ИЛИ Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") Тогда 
			ЗаписьЖурнала.Журнал = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналУчетаПоказанийОдометра);
		КонецЕсли;
	
		Попытка
			ЗаписьЖурнала.Записать(РежимЗаписиДокумента.Проведение);
			Возврат ЗаписьЖурнала.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 
		Возврат Неопределено;
	Иначе
		Возврат СозданныйДокумент;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьРезультатыОсмотраПоШаблону(ЗаписьЖурнала, Шаблон)
	Для Каждого ТекСтрока Из Шаблон.ПереченьТребований Цикл
		НоваяСтрока = ЗаписьЖурнала.РезультатыОсмотра.Добавить();
		НоваяСтрока.Требование = ТекСтрока.Требование;
		НоваяСтрока.Результат  = ЗаполнитьЗначениеРезультатаТребования(НоваяСтрока.Требование);
		НоваяСтрока.Статус     = Справочники.уатСтатусы_уэ.Пройдено;
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьЗначениеРезультатаТребования(Требование)
	Рез = Неопределено;
	
	Если Требование.ТипЗначенияТребования = Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Булево Тогда
		Рез = Истина;
	ИначеЕсли Требование.ТипЗначенияТребования = Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Число Тогда
		Рез = 0;
	ИначеЕсли Требование.ТипЗначенияТребования = Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Строка Тогда
		Рез = ""; 
	КонецЕсли;
	Возврат Рез;
	
КонецФункции

Функция СравнитьТабличныеЧасти(ТЧ1, ТЧ2, ПолеСравнения)
	Если ТЧ1.Количество() <> ТЧ2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч = 0 По ТЧ1.Количество()-1 Цикл
		Если ТЧ1[Сч][ПолеСравнения] <> ТЧ2[Сч][ПолеСравнения] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти
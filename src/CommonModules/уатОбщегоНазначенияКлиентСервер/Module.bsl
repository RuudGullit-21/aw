////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает структуру документа
// Используется при расчете доходов и расходов в документах логистики
//
Функция СтруктураДокумента(Объект, ИмяДокумента, ДопПараметры = Неопределено) Экспорт
	Рез = Новый Структура;
	Рез.Вставить("ИмяДокумента", ИмяДокумента);
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ЗаполнятьТЧДоходы") Тогда
		ДопПараметры.Вставить("ЗаполнятьТЧДоходы", Истина);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ЗаполнятьТЧРасходы") Тогда
		ДопПараметры.Вставить("ЗаполнятьТЧРасходы", Истина);
	КонецЕсли;
	Если ИмяДокумента = "уатПотребностьВПеревозке_уэ" И НЕ ДопПараметры.Свойство("IDСтрокиПотребности") Тогда
		ДопПараметры.Вставить("IDСтрокиПотребности", "");
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ЗаполнятьТЧОтрезкиПути") Тогда
		ДопПараметры.Вставить("ЗаполнятьТЧОтрезкиПути", Ложь);
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ЗаполнятьВсеКолонкиТЧТовары") Тогда
		ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧТовары", Ложь);
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ЗаполнятьВсеКолонкиТЧГрузовойСостав") Тогда
		ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧГрузовойСостав", Ложь);
	КонецЕсли;
	
	мсвРеквизитыШапки = уатРаботаСМетаданными.РеквизитыШапкиДокумента(ИмяДокумента);
	Для Каждого ТекРеквизитИмя Из мсвРеквизитыШапки Цикл
		Рез.Вставить(ТекРеквизитИмя, Объект[ТекРеквизитИмя]);
	КонецЦикла;
		
	Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		РасходыСтруктураСтроки = Новый Структура;
		РасходыСтруктураСтроки.Вставить("Количество", 0);
		РасходыСтруктураСтроки.Вставить("КоличествоПлан", 0);
		РасходыСтруктураСтроки.Вставить("Цена", 0);
		РасходыСтруктураСтроки.Вставить("ЦенаПлан", 0);
		РасходыСтруктураСтроки.Вставить("Сумма", 0);
		РасходыСтруктураСтроки.Вставить("СуммаПлан", 0);
		РасходыСтруктураСтроки.Вставить("СуммаНДС", 0);
		РасходыСтруктураСтроки.Вставить("СуммаНДСПлан", 0);
		РасходыСтруктураСтроки.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Курс", 0);
		РасходыСтруктураСтроки.Вставить("Кратность", 0);
		РасходыСтруктураСтроки.Вставить("УчитыватьНДС", Ложь);
		РасходыСтруктураСтроки.Вставить("СуммаВключаетНДС", Ложь);
		РасходыСтруктураСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Содержание", "");
		РасходыСтруктураСтроки.Вставить("Тариф", Неопределено);
		РасходыСтруктураСтроки.Вставить("ЗаказНаТС", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("ЗаказПеревозчику", ПредопределенноеЗначение("Документ.уатЗаказПеревозчику_уэ.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Договор", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СтатьяРасходов", ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СписокФильтров", Неопределено);
		РасходыСтруктураСтроки.Вставить("ЗначенияГруппировок", Неопределено);
		
		Рез.Вставить("РасходыСтруктураСтроки", РасходыСтруктураСтроки);
		
		ДоходыСтруктураСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасходыСтруктураСтроки);
		ДоходыСтруктураСтроки.Тариф = ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка");
		ДоходыСтруктураСтроки.Удалить("ЗаказПеревозчику");
		ДоходыСтруктураСтроки.Удалить("Контрагент");
		ДоходыСтруктураСтроки.Удалить("Договор");
		ДоходыСтруктураСтроки.Удалить("СтатьяРасходов");
		ДоходыСтруктураСтроки.Вставить("СтатьяДоходов", ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ПустаяСсылка"));
				
		Рез.Вставить("ДоходыСтруктураСтроки", ДоходыСтруктураСтроки);
		
		мсвЗаказы = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			СтруктураСтрокиЗаказы = Новый Структура("НомерСтроки, GUIDСтроки,Выполнен, ДатаВыполнения,
			|ЗаказГрузоотправителя, Пункт, ТипТочкиМаршрута, ВесБрутто, Объем, Время, Расстояние,
			|ПробегПорожний, ПробегСГрузом, Стоянка, СтоянкаИзПункта, Выработка1, Выработка2,Выработка3,Выработка4,Выработка5,
			|ПараметрВыработки1,ПараметрВыработки2,ПараметрВыработки3,ПараметрВыработки4,ПараметрВыработки5,
			|ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество, КоличествоМест, Контрагент,
			|Номенклатура, ПрибытиеПлан, ПрибытиеФакт, УбытиеПлан, УбытиеФакт, Ожидание,СтоянкаФакт,ОжиданиеФакт,РасстояниеФакт,ВремяФакт"
			,,,,,,,,,,,,,,,,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиЗаказы, ТекСтрока);
			мсвЗаказы.Добавить(СтруктураСтрокиЗаказы);
		КонецЦикла;
		Рез.Вставить("Заказы", мсвЗаказы);
		
		мсвВыработка = Новый Массив;
		Для Каждого ТекСтрока Из Объект.УдалитьВыработка Цикл
			СтруктураСтрокиВыработка = Новый Структура("ПараметрВыработки, Значение",, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиВыработка, ТекСтрока);
			мсвВыработка.Добавить(СтруктураСтрокиВыработка);
		КонецЦикла;
		Рез.Вставить("УдалитьВыработка", мсвВыработка);
		
		мсвВыработкаТСиСотрудников = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ВыработкаТСиСотрудников Цикл
			СтруктураСтрокиВыработкаТСиСотрудников = Новый Структура(
				"НомерСтроки, ЗаказГрузоотправителя, ПараметрВыработки, КоличествоПлан, КоличествоФакт"
				+ ", Контрагент, Подразделение, Маршрут, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки, ДопАналитика");
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиВыработкаТСиСотрудников, ТекСтрока);
			мсвВыработкаТСиСотрудников.Добавить(СтруктураСтрокиВыработкаТСиСотрудников);
		КонецЦикла;
		Рез.Вставить("ВыработкаТСиСотрудников", мсвВыработкаТСиСотрудников);
		
		// ТЧ Доходы
		мсвТЧ = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧДоходы Тогда
			Для Каждого ТекСтрока Из Объект.Доходы Цикл
				СтруктураСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДоходыСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
				мсвТЧ.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Доходы", мсвТЧ);
		
		// ТЧ Расходы
		мсвТЧ = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧРасходы Тогда
			Для Каждого ТекСтрока Из Объект.Расходы Цикл
				СтруктураСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасходыСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
				мсвТЧ.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Расходы", мсвТЧ);
		
	ИначеЕсли ИмяДокумента = "уатЗаказГрузоотправителя" Тогда
		УслугиСтруктураСтроки = Новый Структура;
		УслугиСтруктураСтроки.Вставить("Количество", 0);
		УслугиСтруктураСтроки.Вставить("КоличествоПлан", 0);
		УслугиСтруктураСтроки.Вставить("Цена", 0);
		УслугиСтруктураСтроки.Вставить("ЦенаПлан", 0);
		УслугиСтруктураСтроки.Вставить("Сумма", 0);
		УслугиСтруктураСтроки.Вставить("СуммаПлан", 0);
		УслугиСтруктураСтроки.Вставить("СуммаНДС", 0);
		УслугиСтруктураСтроки.Вставить("СуммаНДСПлан", 0);
		УслугиСтруктураСтроки.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("Курс", 0);
		УслугиСтруктураСтроки.Вставить("Кратность", 0);
		УслугиСтруктураСтроки.Вставить("Содержание", "");
		УслугиСтруктураСтроки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("Тариф", ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("СтатьяДоходов", ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("СписокФильтров", Неопределено);
		УслугиСтруктураСтроки.Вставить("ЗначенияГруппировок", Неопределено);
		УслугиСтруктураСтроки.Вставить("ПроцентСкидки", 0);
		УслугиСтруктураСтроки.Вставить("СуммаСкидки", 0);
		УслугиСтруктураСтроки.Вставить("СуммаСкидкиПлан", 0);
		УслугиСтруктураСтроки.Вставить("ВидДокумента", ПредопределенноеЗначение("Перечисление.уатВидыДокументовШаблонаДоходовРасходов_уэ.ПустаяСсылка"));
		Рез.Вставить("УслугиСтруктураСтроки", УслугиСтруктураСтроки);
		
		РасходыСтруктураСтроки = Новый Структура;
		РасходыСтруктураСтроки.Вставить("Количество", 0);
		РасходыСтруктураСтроки.Вставить("КоличествоПлан", 0);
		РасходыСтруктураСтроки.Вставить("Цена", 0);
		РасходыСтруктураСтроки.Вставить("ЦенаПлан", 0);
		РасходыСтруктураСтроки.Вставить("Сумма", 0);
		РасходыСтруктураСтроки.Вставить("СуммаПлан", 0);
		РасходыСтруктураСтроки.Вставить("СуммаНДС", 0);
		РасходыСтруктураСтроки.Вставить("СуммаНДСПлан", 0);
		РасходыСтруктураСтроки.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("УчитыватьНДС", Ложь);
		РасходыСтруктураСтроки.Вставить("СуммаВключаетНДС", Ложь);
		РасходыСтруктураСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Содержание", "");
		РасходыСтруктураСтроки.Вставить("Тариф", Неопределено);
		РасходыСтруктураСтроки.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Договор", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СтатьяРасходов", ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СписокФильтров", Неопределено);
		РасходыСтруктураСтроки.Вставить("ЗначенияГруппировок", Неопределено);
		РасходыСтруктураСтроки.Вставить("ВидДокумента", ПредопределенноеЗначение("Перечисление.уатВидыДокументовШаблонаДоходовРасходов_уэ.ПустаяСсылка"));
		Рез.Вставить("РасходыСтруктураСтроки", РасходыСтруктураСтроки);
		
		мсвВыработка = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Выработка Цикл
			СтруктураСтрокиВыработка = Новый Структура("ПараметрВыработки, Значение",, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиВыработка, ТекСтрока);
			мсвВыработка.Добавить(СтруктураСтрокиВыработка);
		КонецЦикла;
		Рез.Вставить("Выработка", мсвВыработка);
		
		// ТЧ Доходы
		мсвУслуги = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧДоходы Тогда
			Для Каждого ТекСтрока Из Объект.Услуги Цикл
				СтруктураСтрокиУслуги = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(УслугиСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиУслуги, ТекСтрока);
				мсвУслуги.Добавить(СтруктураСтрокиУслуги);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Услуги", мсвУслуги);
		
		// ТЧ Расходы
		мсвТЧ = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧРасходы Тогда
			Для Каждого ТекСтрока Из Объект.Расходы Цикл
				СтруктураСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасходыСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
				мсвТЧ.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Расходы", мсвТЧ);
		
		Если Объект.FTL Тогда
			мсвПункты = Новый Массив;
			Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
				СтруктураСтрокиПромежуточныеПункты = Новый Структура(
					"Пункт, ТипТочкиМаршрута, ОтправительПолучатель, КонтактноеЛицо, Ожидание,
					|ПрибытиеПлан, УбытиеПлан, Стоянка, Расстояние, Время, Длительность"
				);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиПромежуточныеПункты, ТекСтрока);
				мсвПункты.Добавить(СтруктураСтрокиПромежуточныеПункты);
			КонецЦикла;
			Рез.Вставить("ПромежуточныеПункты", мсвПункты);
			
			мсвОтрезкиПути = Новый Массив;
			Для Каждого ТекСтрока Из Объект.ОтрезкиПути Цикл
				Если ДопПараметры.ЗаполнятьТЧОтрезкиПути Тогда
					СтруктураСтрокиОтрезкиПути = Новый Структура("id, ПунктОтправления, ПунктНазначения, Груз");
					ЗаполнитьЗначенияСвойств(СтруктураСтрокиОтрезкиПути, ТекСтрока);
					мсвОтрезкиПути.Добавить(СтруктураСтрокиОтрезкиПути);
				КонецЕсли;
			КонецЦикла;
			Рез.Вставить("ОтрезкиПути", мсвОтрезкиПути);
		КонецЕсли;
		
		//Если Объект.ДетализацияЗакрытия =
		//ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		мсвТовары = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			Если ДопПараметры.ЗаполнятьВсеКолонкиТЧТовары Тогда
				СтруктураСтрокиТовары = Новый Структура("Номенклатура, ЕдиницаИзмерения, ГрузовоеМесто, Количество, Комментарий,
					|ВесБрутто, Объем, КоличествоМест, Цена, Сумма, СтавкаНДС, СуммаНДС, ВесТары, ПричинаЗакрытия");
			Иначе
				СтруктураСтрокиТовары = Новый Структура("Номенклатура, ЕдиницаИзмерения, ГрузовоеМесто, Количество, КоличествоМест");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиТовары, ТекСтрока);
			мсвТовары.Добавить(СтруктураСтрокиТовары);
		КонецЦикла;
		Рез.Вставить("Товары", мсвТовары);
		//КонецЕсли;
		
		//Если Объект.ДетализацияЗакрытия =
		//ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		мсвГрузовойСостав = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Если ДопПараметры.ЗаполнятьВсеКолонкиТЧГрузовойСостав Тогда
				СтруктураСтрокиГрузовойСостав = Новый Структура("ГрузовоеМесто, ВидУпаковки, ВесБрутто, Объем, КоличествоМест,
					|Высота, Длина, Ширина, Стоимость, ОписаниеГруза, ВесТары, ПричинаЗакрытия");
			Иначе
				СтруктураСтрокиГрузовойСостав = Новый Структура("ГрузовоеМесто, ВидУпаковки, ВесБрутто, Объем, КоличествоМест,
					|Высота, Длина, Ширина");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиГрузовойСостав, ТекСтрока);
			мсвГрузовойСостав.Добавить(СтруктураСтрокиГрузовойСостав);
		КонецЦикла;
		Рез.Вставить("ГрузовойСостав", мсвГрузовойСостав);
		//КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
		РасходыСтруктураСтроки = Новый Структура;
		РасходыСтруктураСтроки.Вставить("Количество", 0);
		РасходыСтруктураСтроки.Вставить("КоличествоПлан", 0);
		РасходыСтруктураСтроки.Вставить("Цена", 0);
		РасходыСтруктураСтроки.Вставить("ЦенаПлан", 0);
		РасходыСтруктураСтроки.Вставить("Сумма", 0);
		РасходыСтруктураСтроки.Вставить("СуммаПлан", 0);
		РасходыСтруктураСтроки.Вставить("СуммаНДС", 0);
		РасходыСтруктураСтроки.Вставить("СуммаНДСПлан", 0);
		РасходыСтруктураСтроки.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Курс", 0);
		РасходыСтруктураСтроки.Вставить("Кратность", 0);
		РасходыСтруктураСтроки.Вставить("Груз", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Тариф", ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СтатьяРасходов", ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СписокФильтров", Неопределено);
		РасходыСтруктураСтроки.Вставить("ЗначенияГруппировок", Неопределено);
		
		Рез.Вставить("РасходыСтруктураСтроки", РасходыСтруктураСтроки);
		
		мсвВыработка = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Выработка Цикл
			СтруктураСтрокиВыработка = Новый Структура("ПараметрВыработки, Значение",, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиВыработка, ТекСтрока);
			мсвВыработка.Добавить(СтруктураСтрокиВыработка);
		КонецЦикла;
		Рез.Вставить("Выработка", мсвВыработка);
		
		мсвГрузы = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Грузы Цикл
			СтруктураСтрокиГрузы = Новый Структура("Заказ, ГрузовоеМесто, Количество, ЕдиницаИзмерения",,, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиГрузы, ТекСтрока);
			мсвГрузы.Добавить(СтруктураСтрокиГрузы);
		КонецЦикла;
		Рез.Вставить("Грузы", мсвГрузы);
		
		мсвРасходы = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧРасходы Тогда
			Для Каждого ТекСтрока Из Объект.Расходы Цикл
				СтруктураСтрокиРасходы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасходыСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиРасходы, ТекСтрока);
				мсвРасходы.Добавить(СтруктураСтрокиРасходы);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Расходы", мсвРасходы);
		
	ИначеЕсли ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
		РасходыСтруктураСтроки = Новый Структура;
		РасходыСтруктураСтроки.Вставить("Количество",       0);
		РасходыСтруктураСтроки.Вставить("Цена",             0);
		РасходыСтруктураСтроки.Вставить("Сумма",            0);
		РасходыСтруктураСтроки.Вставить("СуммаНДС",         0);
		РасходыСтруктураСтроки.Вставить("Валюта",           ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Курс",             0);
		РасходыСтруктураСтроки.Вставить("Кратность",        0);
		РасходыСтруктураСтроки.Вставить("ЗаказНаТС",        ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Номенклатура",     ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СтавкаНДС",        ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("Тариф",            ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("СтатьяРасходов",   ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ПустаяСсылка"));
		РасходыСтруктураСтроки.Вставить("УчитыватьНДС",     Ложь);
		РасходыСтруктураСтроки.Вставить("СуммаВключаетНДС", Ложь);
		РасходыСтруктураСтроки.Вставить("Ставка",           0);
		РасходыСтруктураСтроки.Вставить("СписокФильтров", Неопределено);
		РасходыСтруктураСтроки.Вставить("ЗначенияГруппировок", Неопределено);
		
		Рез.Вставить("РасходыСтруктураСтроки", РасходыСтруктураСтроки);
		
		мсвГрузы = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Грузы Цикл
			СтруктураСтрокиГрузы = Новый Структура("Заказ, ГрузовоеМесто, Количество, ЕдиницаИзмерения, СтоимостьГруза, Валюта,
			|ВесБрутто,Объем,КоличествоМест",,, 0, 0,,0,0,0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиГрузы, ТекСтрока);
			СтруктураСтрокиГрузы.Заказ          = ТекСтрока.ЗаказНаТС;
			СтруктураСтрокиГрузы.ГрузовоеМесто  = ТекСтрока.Номенклатура;
			СтруктураСтрокиГрузы.СтоимостьГруза = ТекСтрока.СтоимостьГруза;
			СтруктураСтрокиГрузы.Валюта         = ТекСтрока.Валюта;
			СтруктураСтрокиГрузы.ВесБрутто      = ТекСтрока.ВесБрутто;
			СтруктураСтрокиГрузы.Объем          = ТекСтрока.Объем;
			СтруктураСтрокиГрузы.КоличествоМест = ТекСтрока.КоличествоМест;
			мсвГрузы.Добавить(СтруктураСтрокиГрузы);
		КонецЦикла;
		Рез.Вставить("Грузы", мсвГрузы);
		
		мсвРасходы = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧРасходы Тогда
			Для Каждого ТекСтрока Из Объект.Расходы Цикл
				СтруктураСтрокиРасходы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасходыСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиРасходы, ТекСтрока);
				мсвРасходы.Добавить(СтруктураСтрокиРасходы);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Расходы", мсвРасходы);
	
	ИначеЕсли ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
		УслугиСтруктураСтроки = Новый Структура;
		УслугиСтруктураСтроки.Вставить("ID", "");
		УслугиСтруктураСтроки.Вставить("Количество", 0);
		УслугиСтруктураСтроки.Вставить("Цена", 0);
		УслугиСтруктураСтроки.Вставить("Сумма", 0);
		УслугиСтруктураСтроки.Вставить("СуммаНДС", 0);
		УслугиСтруктураСтроки.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("Курс", 0);
		УслугиСтруктураСтроки.Вставить("Кратность", 0);
		УслугиСтруктураСтроки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("Тариф", ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка"));
		УслугиСтруктураСтроки.Вставить("СписокФильтров", Неопределено);
		УслугиСтруктураСтроки.Вставить("ЗначенияГруппировок", Неопределено);
		УслугиСтруктураСтроки.Вставить("ПроцентСкидки", 0);
		УслугиСтруктураСтроки.Вставить("СуммаСкидки", 0);
		УслугиСтруктураСтроки.Вставить("СуммаСкидкиПлан", 0);
		
		Рез.Вставить("УслугиСтруктураСтроки", УслугиСтруктураСтроки);
		
		мсвПункты = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
			СтруктураСтрокиПромежуточныеПункты = Новый Структура(
				"ID, Пункт, ТипТочкиМаршрута, ОтправительПолучатель, КонтактноеЛицо, Ожидание,
				|ПрибытиеПлан, УбытиеПлан, Стоянка, Расстояние, Время, Длительность"
			);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиПромежуточныеПункты, ТекСтрока);
			мсвПункты.Добавить(СтруктураСтрокиПромежуточныеПункты);
		КонецЦикла;
		Рез.Вставить("ПромежуточныеПункты", мсвПункты);
		
		мсвПунктыНазначения = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл
			СтруктураСтрокиПунктыНазначения = Новый Структура(
			"ВесБрутто, Объем, КоличествоМест, Расстояние, ПробегСГрузом, ПробегПорожний, Время, Стоянка, СтоимостьГруза,"
			" СтоянкаПунктОтправления, СтоянкаПунктНазначения, ID, НомерСтроки, Грузоотправитель, Грузополучатель,"
			" АдресОтправления, АдресНазначения, ОбъектСтроительства, ТребованиеКТС, ТребованиеКТСТипТС, ДатаОтправления,"
			" ДатаПрибытия, ВидПеревозки, НаправлениеПеревозки, FTL, Маршрут, ВидДоставки, ОтправлениеС, ПрибытиеПо");
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиПунктыНазначения, ТекСтрока);
			мсвПунктыНазначения.Добавить(СтруктураСтрокиПунктыНазначения);
		КонецЦикла;
		Рез.Вставить("ПунктыНазначения", мсвПунктыНазначения);
		
		мсвТовары = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
			СтруктураСтрокиТоварныйСостав = Новый Структура("ID, Номенклатура, КоличествоМест, ГрузовоеМесто",,, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиТоварныйСостав, ТекСтрока);
			мсвТовары.Добавить(СтруктураСтрокиТоварныйСостав);
		КонецЦикла;
		Рез.Вставить("ТоварныйСостав", мсвТовары);
		
		мсвГрузовойСостав = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			СтруктураСтрокиГрузовойСостав = Новый Структура("ID, ГрузовоеМесто, ВидУпаковки, КоличествоМест",,,, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиГрузовойСостав, ТекСтрока);
			мсвГрузовойСостав.Добавить(СтруктураСтрокиГрузовойСостав);
		КонецЦикла;
		Рез.Вставить("ГрузовойСостав", мсвГрузовойСостав);
		
		мсвВыработка = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Выработка Цикл
			СтруктураСтрокиВыработка = Новый Структура("ID, ПараметрВыработки, Значение",,, 0);
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиВыработка, ТекСтрока);
			мсвВыработка.Добавить(СтруктураСтрокиВыработка);
		КонецЦикла;
		Рез.Вставить("Выработка", мсвВыработка);
		
		мсвДоходы = Новый Массив;
		Если ДопПараметры.ЗаполнятьТЧДоходы Тогда
			Для Каждого ТекСтрока Из Объект.Услуги Цикл
				Если ЗначениеЗаполнено(ДопПараметры.IDСтрокиПотребности)
					И ТекСтрока.ID <> ДопПараметры.IDСтрокиПотребности Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСтрокиУслуги = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(УслугиСтруктураСтроки);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиУслуги, ТекСтрока);
				мсвДоходы.Добавить(СтруктураСтрокиУслуги);
			КонецЦикла;
		КонецЕсли;
		Рез.Вставить("Услуги", мсвДоходы);
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Обрезает полное имя формы до имени объекта метаданных
//
// Параметры:
//  ИмяФормы - Строка - Полное имя формы
// 
// Возвращаемое значение:
//   - 
//
Функция ОбрезатьИмяФормы(ИмяФормы) Экспорт
	
	МассивСтрок = СтрРазделить(ИмяФормы,".");
	Если МассивСтрок.Количество() > 1 Тогда
		Возврат МассивСтрок[1];
	Иначе
		Возврат ИмяФормы;
	КонецЕсли;
	
КонецФункции

// Процедура отображает иконку статуса сопроводительных документов в списках Маршрутных листов и Заказов на ТС.
// Вызывается из события дин. списка ПриПолученииДанныхНаСервере.
// 
Процедура ОтобразитьСтатусСДПриПолученииДанныхНаСервере(СтрокиДинамическогоСписка, ИмяКолонкиСтатус = "СтатусВыполненияДокументов") Экспорт
	// 1) получаем список оснований СД по всем строкам
	мсвОснования = Новый Массив;
	Для Каждого ТекСтрока Из СтрокиДинамическогоСписка Цикл
		// В данных строки может не оказаться ссылки, это нестандартная ситуация, вывести статус невозможно
		Попытка
			ТекДанныеКартинки = ТекСтрока.Значение.Данные[ИмяКолонкиСтатус];
			мсвОснования.Добавить(ТекСтрока.Значение.Данные.Ссылка);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	// 2) по списку оснований СД получаем итоговые статусы СД
	соотвСтатусыОснований = уатОбщегоНазначения_проф.ПолучитьСоответствиеСтатусовСДпоДокументам(мсвОснования);
	
	// 3) устанавливаем значения иконки статусов в данные строк
	Для Каждого ТекСтрока Из СтрокиДинамическогоСписка Цикл
		ТекИконка = соотвСтатусыОснований.Получить(ТекСтрока.Значение.Данные.Ссылка);
		Если ТекИконка = Неопределено Тогда
			ТекИконка = 0;
		КонецЕсли;
		ТекСтрока.Значение.Данные[ИмяКолонкиСтатус] = ТекИконка;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает номер документа без префикса организации и лидирующих нулей в записи
// для размещения на печатной форме
//
// Параметры:
//    НомерОбъекта - Строка - номер или код объекта, который преобразуется для вывода на печать.
//    УдалитьПрефиксИнформационнойБазы - Булево - признак удаления префикса информационной базы.
//    УдалитьПользовательскийПрефикс - Булево - признак удаления пользовательского префикса.
// 
// Возвращаемое значение:
//   - Строка - Отформатированный номер документа
//
Функция НомерДокументаНаПечать(Знач НомерОбъекта, УдалитьПрефиксИнформационнойБазы = Ложь, УдалитьПользовательскийПрефикс = Ложь) Экспорт	
	Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс);
КонецФункции

#КонецОбласти
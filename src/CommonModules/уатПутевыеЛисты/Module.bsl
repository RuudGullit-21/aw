////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции, используемые в документах "Путевой лист"
// и "Технологический путевой лист"
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПеренесенныеИзОбщегоМодуляуатОбщегоНазначения

// Функция возвращает список видов пут. листов
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатВидыПЛ() ЭКСПОРТ
	
	мСписокВидовПЛ = Новый СписокЗначений;
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3,НСтр("en='3 (cars)';ru='3 (легковой)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3спец,НСтр("en='3C (spec. car)';ru='3С (спец. автомобиля)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4М,НСтр("en='4M (long distance)';ru='4М (междугородний)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4П,НСтр("en='4P (timed)';ru='4П (повременный)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4С,НСтр("en='4C (piecework)';ru='4С (сдельный)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._6С,НСтр("en='6S bus (non-public)';ru='6С (автобус необщего пользования)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ2,НСтр("en='ESM2 (building)';ru='ЭСМ2 (строительный)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПЛ1,НСтр("en='WB1 (cars IE)';ru='ПЛ1 (легковой ЧП)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПГ1,НСтр("en='Truck waybill1 (cargo IE)';ru='ПГ1 (грузовой ЧП)'"));
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПА1,НСтр("en='ПА1 (bus, PE)';ru='ПА1 (автобус ЧП)'"));
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() ИЛИ уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		МодульЗащищенныеФункцииСерверПроф = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_проф");
		МодульЗащищенныеФункцииСерверПроф.ДобавитьВидыПЛСТ(мСписокВидовПЛ);
		МодульЗащищенныеФункцииСерверПроф.ДобавитьВидыПЛПП(мСписокВидовПЛ);
	КонецЕсли;	
		
	мСписокВидовПЛ.СортироватьПоПредставлению();
	
	Возврат мСписокВидовПЛ;
	
КонецФункции // уатВидыПЛ       

// Функция возвращает таблицу значений параметров выработки ТС 
// Параметры: 	ТС - ссылка на справочник ОС
// Возвращаемое значение: Список значений
Функция уатПараметрыВыработкиТС() ЭКСПОРТ
	
	мсвЗапрещенныеКВыбору = Новый Массив();
	
	Если Не Метаданные.НайтиПоПолномуИмени("Константа.уатИспользоватьМониторинг") = Неопределено Тогда 
		Если Не Константы.уатИспользоватьМониторинг.Получить() Тогда 
			мсвЗапрещенныеКВыбору.Добавить(Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
			мсвЗапрещенныеКВыбору.Добавить(Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПараметрыВыработки.Ссылка КАК ПараметрВыработки,
	|	уатПараметрыВыработки.Временный КАК Временный
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|
	|ГДЕ
	|	НЕ уатПараметрыВыработки.Ссылка В (&ЗапрещенныеКВыбору)
	|	И уатПараметрыВыработки.ПометкаУдаления = &ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаТС = &ДействуетНаТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПараметрыВыработки.Наименование";
	
	Запрос.УстановитьПараметр("ЗапрещенныеКВыбору", мсвЗапрещенныеКВыбору);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ДействуетНаТС", Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПараметрыВыработкиТС

// Функция возвращает грузоподъемность сцепки ТС+Прицепы, работающих по Путевому или Маршрутному листу
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатГрузоподъемностьПоПЛ(ДокументОбъект) Экспорт
	Попытка
		ТекТС = ДокументОбъект.ТС;
		флЭтоМЛ = Истина;
	Исключение
		ТекТС = ДокументОбъект.ТранспортноеСредство;
		флЭтоМЛ = Ложь;
	КонецПопытки;
		
	Если флЭтоМЛ Тогда
		Результат = ТекТС.Модель.Грузоподъемность;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
			Результат = Результат + ДокументОбъект.Прицеп1.Модель.Грузоподъемность;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
			Результат = Результат + ДокументОбъект.Прицеп2.Модель.Грузоподъемность;
		КонецЕсли;
	Иначе
		Результат = ТекТС.Модель.Грузоподъемность;
		Для Каждого ТекСтр Из ДокументОбъект.Прицепы Цикл
			Результат = Результат + ТекСтр.ТС.Модель.Грузоподъемность;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции //уатГрузоподъемностьПоПЛ

// Функция возвращает ОбъемКузова сцепки ТС+Прицепы, работающих по Путевому или Маршрутному листу
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатОбъемКузоваПоПЛ(ДокументОбъект) Экспорт
	Попытка
		ТекТС = ДокументОбъект.ТС;
		флЭтоМЛ = Истина;
	Исключение
		ТекТС = ДокументОбъект.ТранспортноеСредство;
		флЭтоМЛ = Ложь;
	КонецПопытки;
	
	Если флЭтоМЛ Тогда
		Результат = ТекТС.Модель.ОбъемКузова;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
			Результат = Результат + ДокументОбъект.Прицеп1.Модель.ОбъемКузова;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
			Результат = Результат + ДокументОбъект.Прицеп2.Модель.ОбъемКузова;
		КонецЕсли;
	Иначе
		Результат = ТекТС.Модель.ОбъемКузова;
		Для Каждого ТекСтр Из ДокументОбъект.Прицепы Цикл
			Результат = Результат + ТекСтр.ТС.Модель.ОбъемКузова;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции //уатОбъемКузоваПоПЛ

// Функция возвращает таблицу ТТД для заданного пут. листа
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатТТДДляПЛ(ПутевойЛист) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(ПутевойЛист) Тогда
		мПустаяТаблица = Новый ТаблицаЗначений;
		мПустаяТаблица.Колонки.Добавить("Проведен");
		мПустаяТаблица.Колонки.Добавить("Номер");
		мПустаяТаблица.Колонки.Добавить("Дата");
		мПустаяТаблица.Колонки.Добавить("Контрагент");
		мПустаяТаблица.Колонки.Добавить("ТТД");
		Возврат мПустаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТД.Проведен,
	|	уатТТД.Номер,
	|	уатТТД.Дата,
	|	уатТТД.Контрагент,
	|	уатТТД.Ссылка КАК ТТД
	|ИЗ
	|	Документ.уатТТД КАК уатТТД
	|ГДЕ
	|	уатТТД.Выработка.ПутЛист = &ПутЛист И
	|	(НЕ уатТТД.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ПутЛист", ПутевойЛист);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатНайтиТТДДляПЛ       

// Функция проверяет ТС и оборудование на необходимость прохождения ТО и замену агрегатов.
//
// Параметры:
//  Дата - Дата - дата Путевого листа.
//  СписокТСиОборудований - СписокЗначений - список ТС и оборудований, которые необходимо проверить
//                                           на необходимость прохождения ТО и замены агрегатов.
//  МассивСтруктурТСиАгрегатов - Массив - массив который хранит структуры содержащие ТС,
//                               которым необходимо пройти ТО и агрегаты, которые необходимо заменить.
//
// Возвращаемое значение:
//  Булево - Истина, если МассивСтруктурТСиАгрегатов.Количество() > 0.
//
Функция ПроверитьНеобходимостьТОиЗаменыАгрегатовТС(Дата, СписокТСиОборудований, МассивСтруктурТСиАгрегатов = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокТС",      СписокТСиОборудований);
	Запрос.УстановитьПараметр("ДатаОкончания", Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникуатТС.Ссылка КАК ТС,
	|	ЕСТЬNULL(ДанныеПоТО.Осталось, 0) КАК ТО,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК Агрегат,
	|	ВЫБОР
	|		КОГДА уатАгрегатыТССрезПоследних.СерияНоменклатуры ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА уатАгрегатыТССрезПоследних.СерияНоменклатуры.ГоденДо < &ДатаОкончания
	|				И (уатАгрегатыТССрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|					ИЛИ уатАгрегатыТССрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Замена,
	|	ДанныеПоТО.ВидОбслуживания КАК ВидОбслуживания
	|ИЗ
	|	Справочник.уатТС КАК СправочникуатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатПлановыеДатыТО.ТС КАК ТС,
	|			МИНИМУМ(РАЗНОСТЬДАТ(&ДатаОкончания, уатПлановыеДатыТО.Дата, ДЕНЬ)) КАК Осталось,
	|			уатПлановыеДатыТО.ТО КАК ВидОбслуживания
	|		ИЗ
	|			РегистрСведений.уатПлановыеДатыТО КАК уатПлановыеДатыТО
	|		ГДЕ
	|			уатПлановыеДатыТО.Плановая = ЛОЖЬ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатПлановыеДатыТО.ТС,
	|			уатПлановыеДатыТО.ТО) КАК ДанныеПоТО
	|		ПО СправочникуатТС.Ссылка = ДанныеПоТО.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаОкончания, СерияНоменклатуры.ГоденДо <> ДАТАВРЕМЯ(1, 1, 1)) КАК уатАгрегатыТССрезПоследних
	|		ПО СправочникуатТС.Ссылка = уатАгрегатыТССрезПоследних.ТС
	|ГДЕ
	|	СправочникуатТС.Ссылка В(&СписокТС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТО";
	
	Если МассивСтруктурТСиАгрегатов = Неопределено Тогда
		МассивСтруктурТСиАгрегатов = Новый Массив;
	КонецЕсли;
	
	ТС = Неопределено;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Если Результат.ТО < 0 И ТС <> Результат.ТС  Тогда
			Структура = Новый Структура();
			Структура.Вставить("ТС",              Результат.ТС);
			Структура.Вставить("ВидОбслуживания", Результат.ВидОбслуживания);
			Структура.Вставить("Агрегат",         Неопределено);
			МассивСтруктурТСиАгрегатов.Добавить(Структура);
			ТС = Результат.ТС;
		КонецЕсли;
		Если Результат.Замена = 0 Тогда
			Структура = Новый Структура();
			Структура.Вставить("ТС",              Результат.ТС);
			Структура.Вставить("ВидОбслуживания", Неопределено);
			Структура.Вставить("Агрегат",         Результат.Агрегат);
			Структура.Вставить("ГоденДо",         Результат.Агрегат.ГоденДо);
			МассивСтруктурТСиАгрегатов.Добавить(Структура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтруктурТСиАгрегатов.Количество() > 0 Тогда
		Запрет = Истина;
	Иначе 
		Запрет = Ложь;
	КонецЕсли;
	
	Возврат Запрет;
	
КонецФункции

// Функция проверяет наличие выписанных ремонтных листов за указанный период по списку ТС.
//
Функция ПроверитьНаличиеТекущихРемонтовДляПЛ(СписокТСиОборудования, ДатаВыезда, ДатаВозвращения, ТекущиеРемонтныеЛисты) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокТС",        СписокТСиОборудования);
	Запрос.УстановитьПараметр("ДатаВыезда",      ДатаВыезда);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДатаВозвращения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрСостояниеТС.Регистратор КАК РемонтныйЛист,
	|	РегистрСостояниеТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатСостояниеТС КАК РегистрСостояниеТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатСостояниеТС КАК СправочникСостояний
	|		ПО РегистрСостояниеТС.Состояние = СправочникСостояний.Ссылка
	|			И (СправочникСостояний.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.уатВидыСостоянийТС.ВРемонте))
	|			И (РегистрСостояниеТС.ТС В (&СписокТС))
	|			И (РегистрСостояниеТС.Период <= &ДатаВозвращения)
	|			И (РегистрСостояниеТС.ДатаОкончания >= &ДатаВыезда)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ТС",            Выборка.ТС);
		ДанныеСтроки.Вставить("РемонтныйЛист", Выборка.РемонтныйЛист);
		ТекущиеРемонтныеЛисты.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат Не ТекущиеРемонтныеЛисты.Количество() = 0;
	
КонецФункции // ПроверитьНаличиеТекущихРемонтовДляПЛ()

// Процедура получает коэффициент изменения нормы расхода ГСМ в зависимости от 
// температуры.
//
// Параметры:
//  Температура  - температура для которой необходимо получить коэффициент
Функция уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Температура) ЭКСПОРТ
	// Параметры: Температура
	// Возвращаемое значение: процент изменения нормы расхода топлива
	Результат = 0;
	спрТемпературы = Справочники.уатТемпературныеКоэффициентыГСМ;
	ВыборкаТемпературы = спрТемпературы.Выбрать(,,,"ТемператураМеньше Возр");
	Пока ВыборкаТемпературы.Следующий() Цикл
		Если Температура < ВыборкаТемпературы.ТемператураМеньше Тогда
			Результат = ВыборкаТемпературы.Процент;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Результат;
КонецФункции // уатСписокМаселАС       

#КонецОбласти


#Область ПеренесенныеИзМодуляМенеджераПутевогоЛиста

// Устанавливает даты выезда и возвращения ПЛ по умолчанию
// Параметры:
//  ТекущийДокумент - документ-объект или объект формы
//
Процедура УстановитьДатыВыездаВозвращения(ТекущийДокумент, ТехнологическийПЛ = Ложь) Экспорт
	// запомним для проверки на ночной режим
	мДатаВыезда = НачалоДня(ТекущийДокумент.ДатаВыезда + 24*3600);
	мДатаВозвращения = НачалоДня(ТекущийДокумент.ДатаВозвращения);
		
	Если (НачалоДня(ТекущийДокумент.ДатаВыезда) = '00010101' ИЛИ ТекущийДокумент.Ссылка.Пустая() ИЛИ ТекущийДокумент.Ссылка.Дата = ТекущийДокумент.ДатаВыезда)
		И (ТехнологическийПЛ ИЛИ НЕ (ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) И ТипЗнч(ТекущийДокумент.ДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист"))) Тогда
		
		ТекущийДокумент.ДатаВыезда = ТекущийДокумент.Дата;
	КонецЕсли;
	Если НачалоДня(ТекущийДокумент.ДатаВозвращения) = '00010101' Тогда
		ТекущийДокумент.ДатаВозвращения = ТекущийДокумент.Дата;
	КонецЕсли;
	Если НЕ ТехнологическийПЛ И ЗначениеЗаполнено(ТекущийДокумент.РежимРаботыТС) Тогда
		НачалоРаботы_ = ТекущийДокумент.РежимРаботыТС.НачалоРаботы;
		КонецРаботы_  = ТекущийДокумент.РежимРаботыТС.КонецРаботы;
	Иначе
		НастройкиПользователя = Новый Структура();
		НастройкиПользователя.Вставить("Организация",   ТекущийДокумент.Организация);
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) Тогда
			ПодразделениеНастройки = ТекущийДокумент.Подразделение;
		Иначе
			ПодразделениеНастройки = уатОбщегоНазначения.МестонахождениеТС(
				?(ТехнологическийПЛ, ТекущийДокумент.ТС, ТекущийДокумент.ТранспортноеСредство)).Подразделение;
		КонецЕсли;
	
		НастройкиПользователя.Вставить("Подразделение", ПодразделениеНастройки);
				
		НачалоРаботы_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ"));
		КонецРаботы_ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(НастройкиПользователя,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ"));
	КонецЕсли;
	
	// приравняем дату возвращения к дате выезда
	Если ТекущийДокумент.ДатаВыезда > ТекущийДокумент.ДатаВозвращения Тогда
		ТекущийДокумент.ДатаВозвращения = ТекущийДокумент.ДатаВыезда;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоРаботы_) ИЛИ ЗначениеЗаполнено(КонецРаботы_) Тогда
		ТекущийДокумент.ДатаВыезда = НачалоДня(ТекущийДокумент.ДатаВыезда) + (НачалоРаботы_ - '00010101');
		ТекущийДокумент.ДатаВозвращения	= НачалоДня(ТекущийДокумент.ДатаВозвращения) + (КонецРаботы_ - '00010101');
	КонецЕсли;
	
	// поправка на ночной режим работы (добавляем сутки к времени возвращения)
	Если ТекущийДокумент.ДатаВыезда > ТекущийДокумент.ДатаВозвращения И НачалоРаботы_ > КонецРаботы_ Тогда
		ТекущийДокумент.ДатаВозвращения	= ТекущийДокумент.ДатаВозвращения + 24*3600;
	ИначеЕсли НачалоДня(ТекущийДокумент.ДатаВыезда) < НачалоДня(ТекущийДокумент.ДатаВозвращения) И НачалоРаботы_ < КонецРаботы_ И
			мДатаВыезда = мДатаВозвращения Тогда
		// с ночного перещелкнули на дневной (отнимаем сутки от времени возвращения)
		ТекущийДокумент.ДатаВозвращения = ТекущийДокумент.ДатаВозвращения - 24*3600;
	КонецЕсли;
	
	ТекущийДокумент.ДатаВыезда = уатОбщегоНазначения.уатДатаБезСекунд(ТекущийДокумент.ДатаВыезда);
	ТекущийДокумент.ДатаВозвращения	= уатОбщегоНазначения.уатДатаБезСекунд(ТекущийДокумент.ДатаВозвращения);
КонецПроцедуры

// Функция расчета времени по документу
// Возвращает таблицу с колонками:
//	- ВидВремени - Строка - возможные значения: Явка, РаботаНочныеЧасы, Простой
//  - ДатаРаботы - Дата работ
//  - Продолжительность - время работ в секундах
// Внимание! Время в работе (вид Работа) = Время дневное + Время ночное (вид Ночные)
//
Функция РасчетВремени(ДатаВыезда, ДатаВозвращения, Организация, РежимРаботыТС, Простои) Экспорт
	// переводим время из формата Дата в количество секунд
	мВремяДоОбеда = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ВремяДоОбеда") - '00010101';
	мПродолжительностьОбеда = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПродолжительностьОбеда") - '00010101';
	мПродолжительностьРабочегоДня = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПродолжительностьРабочегоДня") - '00010101';
	Если мПродолжительностьРабочегоДня = 0 Тогда
		мПродолжительностьРабочегоДня = 86400;
	КонецЕсли;
	
	резТаблица = Новый ТаблицаЗначений;
	резТаблица.Колонки.Добавить("ВидВремени");
	резТаблица.Колонки.Добавить("ДатаРаботы");
	резТаблица.Колонки.Добавить("Продолжительность");
	резТаблица.Колонки.Добавить("ПростойСВклДвиг", Новый ОписаниеТипов("Булево"));
	
	ТекДата = НачалоДня(ДатаВыезда);
	Сч = 1;
	флОбедУжеРассчитан = Ложь;
	Пока ТекДата <= НачалоДня(ДатаВозвращения) Цикл
		СтруктураВремениЗаДень = СтруктураВремениЗаДень(ДатаВыезда, ДатаВозвращения, Сч, РежимРаботыТС, Простои,
			мПродолжительностьРабочегоДня, мПродолжительностьОбеда, мВремяДоОбеда, флОбедУжеРассчитан);
			
		Для Каждого ТекВидВремени Из СтруктураВремениЗаДень Цикл
			Если ТекВидВремени.Значение > 0 Тогда
				НоваяСтрока = резТаблица.Добавить();
				НоваяСтрока.ДатаРаботы = ТекДата;
				НоваяСтрока.Продолжительность = СтруктураВремениЗаДень[ТекВидВремени.Ключ];
				
				Если ТекВидВремени.Ключ = "ПростойСВклДвиг" Тогда
					НоваяСтрока.ПростойСВклДвиг = Истина;
					НоваяСтрока.ВидВремени = Справочники.уатВидыИспользованияРабочегоВремени.Простой;
				ИначеЕсли ТекВидВремени.Ключ = "Дневные" Тогда
					НоваяСтрока.ВидВремени = "Дневные";
				Иначе		
					НоваяСтрока.ВидВремени = Справочники.уатВидыИспользованияРабочегоВремени[ТекВидВремени.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекДата = ТекДата + 86400;
		Сч = Сч + 1;
		
		//// выходим, если ПЛ однодневный
		//Если (ДатаВозвращения - ДатаВыезда) <= 86400 Тогда
		//	Прервать;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат резТаблица;
КонецФункции

// Возвращает таблицу остатков ТЖ на ТС
Функция ОстаткиТЖнаТС(ТС, МоментВремени) Экспорт
	тблНормыРасходаТЖ = уатОбщегоНазначения.ПолучитьНормыРасходаТЖ(ТС, МоментВремени);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НормыРасходаТЖ.ГСМ КАК ТЖ
	|ПОМЕСТИТЬ НормыРасходаТЖ
	|ИЗ
	|	&тблНормыРасходаТЖ КАК НормыРасходаТЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(уатОстаткиТЖнаТС.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(НормыРасходаТЖ.ТЖ, уатОстаткиТЖнаТС.ТЖ) КАК ТЖ
	|ИЗ
	|	РегистрНакопления.уатОстаткиТЖнаТС.Остатки(&Момент, ТС = &ТС) КАК уатОстаткиТЖнаТС
	|		ПОЛНОЕ СОЕДИНЕНИЕ НормыРасходаТЖ КАК НормыРасходаТЖ
	|		ПО уатОстаткиТЖнаТС.ТЖ = НормыРасходаТЖ.ТЖ";
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("тблНормыРасходаТЖ", тблНормыРасходаТЖ);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Возврат Рез;
КонецФункции

// Возвращает таблицу заполнения Задания в ПЛ по входящему Заказу ТС
//
Процедура ЗаполнитьЗаданиеПоЗаказам(ДанныеЗаказов, ДокументОбъект) Экспорт
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда // в ПРОФ и КОРП используется отдельный алгоритм
		ОМуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
		ОМуатОбщегоНазначения_проф.ЗаполнитьЗаданиеПоЗаказам(ДанныеЗаказов, ДокументОбъект);
		Возврат;
	КонецЕсли;
	
	Основание     = ДанныеЗаказов;
	флЗаказыВПЛ   = ПолучитьФункциональнуюОпцию("уатУчетЗаказовНаТСвПутевыхЛистах");
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	НоваяСтрока = ДокументОбъект.Задание.Добавить();                                                       
	НоваяСтрока.Контрагент       = Основание.Контрагент;
	НоваяСтрока.АдресПрибытия    = Основание.АдресОтправления;
	НоваяСтрока.ВремяПрибытия    = ДокументОбъект.ДатаВыезда;
	НоваяСтрока.АдресУбытия      = Основание.АдресНазначения;
	НоваяСтрока.ВремяУбытия      = ДокументОбъект.ДатаВозвращения;
	НоваяСтрока.КоличествоЕздок  = 1;
	НоваяСтрока.КоличествоТонн	 = Основание.ВесБрутто / КоэфВеса;
	НоваяСтрока.Объем			 = Основание.Объем / КоэфОбъема;
	НоваяСтрока.УсловиеРаботы    = ДокументОбъект.УсловиеРаботы;
	
	Если ТипЗнч(Основание.Контрагент) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		НоваяСтрока.Подразделение = Основание.Контрагент;
	КонецЕсли;
	Если флЗаказыВПЛ Тогда
		НоваяСтрока.ЗаказНаТС     = Основание.Ссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(НоваяСтрока.АдресУбытия) И ЗначениеЗаполнено(НоваяСтрока.АдресПрибытия) Тогда
		мсвПункты = Новый Массив();
		мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", НоваяСтрока.АдресПрибытия, НоваяСтрока.АдресУбытия));
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		
		Если мсвПункты.Количество() Тогда 
			НоваяСтрока.КоличествоКмГруз = мсвПункты[0].Расстояние;
			НоваяСтрока.КоличествоЧасов  = мсвПункты[0].Время;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры // ЗаполнитьЗаданиеПоЗаказам()

// Получение ответственных лиц согласно учетной политике
//
Функция ОтветственныеЛицаПоУмолчанию(ОбъектыНастроек, ДатаСреза) Экспорт

	Если ТипЗнч(ОбъектыНастроек) = Тип("Структура") Тогда
		ТекОрганизация = Неопределено;
		ОбъектыНастроек.Свойство("Организация", ТекОрганизация);
	Иначе
		ТекОрганизация = ОбъектыНастроек;	
	КонецЕсли;	
	
	ОтветствЛица = Новый Структура("Медорганизация, МедработникВыезд, МедработникВозврат, 
	|КонтрольТранспорта, ПринялМеханик, ВыпустилМеханик,
	|ВыдалДиспетчер, ПринялДиспетчер,
	|ПоказанияОдометра, УполномоченныйНаПроставлениеОдометраПриВыезде, УполномоченныйНаПроставлениеОдометраПриВозврате"); 
	ОтветствЛица.Медорганизация = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "Медорганизация");
	
	ОтветствЛица.МедработникВыезд = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "МедработникВыезд");
	Если ТипЗнч(ОтветствЛица.МедработникВыезд) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.МедработникВыезд, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.МедработникВыезд = Неопределено;
	КонецЕсли;
	ОтветствЛица.МедработникВозврат = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "МедработникВозврат");
	Если ТипЗнч(ОтветствЛица.МедработникВозврат) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.МедработникВозврат, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.МедработникВозврат = Неопределено;
	КонецЕсли;
	ОтветствЛица.ВыдалДиспетчер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "ВыдалДиспетчер");
	Если ТипЗнч(ОтветствЛица.ВыдалДиспетчер) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ВыдалДиспетчер, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ВыдалДиспетчер = Неопределено;
	КонецЕсли;
	ОтветствЛица.ПринялДиспетчер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "ПринялДиспетчер");
	Если ТипЗнч(ОтветствЛица.ПринялДиспетчер) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ПринялДиспетчер, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ПринялДиспетчер = Неопределено;
	КонецЕсли;    
	
	ОтветствЛица.КонтрольТранспорта = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "КонтрольТранспорта");
	
	ОтветствЛица.ВыпустилМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "ВыпустилМеханик");
	Если ТипЗнч(ОтветствЛица.ВыпустилМеханик) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ВыпустилМеханик, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ВыпустилМеханик = Неопределено;
	КонецЕсли;
	ОтветствЛица.ПринялМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "ПринялМеханик");
	Если ТипЗнч(ОтветствЛица.ПринялМеханик) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.ПринялМеханик, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.ПринялМеханик = Неопределено;
	КонецЕсли;
	
	ОтветствЛица.ПоказанияОдометра = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "ПоказанияОдометра");
	
	ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВыезде =
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "УполномоченныйНаПроставлениеОдометраПриВыезде");
	Если ТипЗнч(ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВыезде) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВыезде, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВыезде = Неопределено;
	КонецЕсли;
	ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВозврате
		= уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектыНастроек, "УполномоченныйНаПроставлениеОдометраПриВозврате");
	Если ТипЗнч(ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВозврате) = Тип("СправочникСсылка.Сотрудники")
		И НЕ СотрудникЗакрепленЗаОрганизацией(ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВозврате, ТекОрганизация, ДатаСреза) Тогда
		ОтветствЛица.УполномоченныйНаПроставлениеОдометраПриВозврате = Неопределено;
	КонецЕсли;
	
	Возврат ОтветствЛица;
	
КонецФункции

Процедура ЗаполнитьЗаданиеПоДаннымМЛ(Объект, ДокументМЛ, РежимЗаполнения = Неопределено, ПланФакт = Неопределено) Экспорт
	
	флВводНаОсновании = Ложь;
	
	Если НЕ ЗначениеЗаполнено(РежимЗаполнения) Тогда
		флВводНаОсновании = Истина;
		
		РежимЗаполнения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			"ЗаполнениеЗаданияПЛпоМЛ");
		Если НЕ ЗначениеЗаполнено(РежимЗаполнения) Тогда
			РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки;
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	флУчетПланФактПЛ = НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
	флУчетПланФакт = флУчетПланФактПЛ
		И Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
		
	флЗаполнениеЗаказаВЗадании = ПолучитьФункциональнуюОпцию("уатУчетЗаказовНаТСвПутевыхЛистах")
		И Константы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Получить() = Ложь;
	
	МЛПоЗаказам = (ДокументМЛ.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя);
	
	ВариантЗаполнения = 0;
	Если флУчетПланФакт Тогда
		Если флВводНаОсновании Тогда
			ВариантЗаполнения = 1;
		ИначеЕсли ПланФакт = "План" Тогда
			ВариантЗаполнения = 2;
		ИначеЕсли ПланФакт = "Факт" Тогда
			ВариантЗаполнения = 3;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки И МЛПоЗаказам Тогда 
		мНулевойПробегВыезда      = 0;
		мНулевойПробегВозвращения = 0;
		
		ВремяРасстояниеПоЗаказам = Документы.уатМаршрутныйЛист.ПолучитьТаблицуВремениРасстоянияПоЗаказам(
			ДокументМЛ, мНулевойПробегВыезда, мНулевойПробегВозвращения, ВариантЗаполнения);
		ТаблицаПлановыхДат       = ПолучитьПлановыеДатыПоЗаказам(ДокументМЛ);
		
		Если ВремяРасстояниеПоЗаказам.Количество() Тогда 
			Объект.НулевойПробегВыезда      = мНулевойПробегВыезда;
			Объект.НулевойПробегВозвращения = мНулевойПробегВозвращения;
		КонецЕсли;
	Иначе 
		ВремяРасстояниеПоЗаказам = Неопределено;
		ТаблицаПлановыхДат       = Документы.уатМаршрутныйЛист.ПолучитьПлановыеФактическиеДатыПосещенияПунктов(ДокументМЛ);
	КонецЕсли;
	
	ТаблЗаполнения = Новый ТаблицаЗначений();
	ТаблЗаполнения.Колонки.Добавить("Подразделения",        Новый ОписаниеТипов("Массив"));
	ТаблЗаполнения.Колонки.Добавить("Контрагенты",          Новый ОписаниеТипов("Массив"));
	ТаблЗаполнения.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("Массив"));
	ТаблЗаполнения.Колонки.Добавить("АдресПрибытия",        Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТаблЗаполнения.Колонки.Добавить("АдресУбытия",          Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТаблЗаполнения.Колонки.Добавить("ВремяПрибытияПлан",    Новый ОписаниеТипов("Дата"));
	ТаблЗаполнения.Колонки.Добавить("ВремяУбытияПлан",      Новый ОписаниеТипов("Дата"));
	ТаблЗаполнения.Колонки.Добавить("ВремяПрибытияФакт",    Новый ОписаниеТипов("Дата"));
	ТаблЗаполнения.Колонки.Добавить("ВремяУбытияФакт",      Новый ОписаниеТипов("Дата"));
	ТаблЗаполнения.Колонки.Добавить("КоличествоКмГруз",     Новый ОписаниеТипов("Число"));
	ТаблЗаполнения.Колонки.Добавить("КоличествоЧасов",      Новый ОписаниеТипов("Число"));
	ТаблЗаполнения.Колонки.Добавить("КоличествоТонн",       Новый ОписаниеТипов("Число"));
	ТаблЗаполнения.Колонки.Добавить("Объем",                Новый ОписаниеТипов("Число"));
	ТаблЗаполнения.Колонки.Добавить("НомерЕздки",           Новый ОписаниеТипов("Число"));
	ТаблЗаполнения.Колонки.Добавить("ЗаказГрузоотправителя",Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблЗаполнения.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		ТаблЗаполнения.Колонки.Добавить("ВидыПеревозки",        Новый ОписаниеТипов("Массив"));
		ТаблЗаполнения.Колонки.Добавить("НаправленияПеревозки", Новый ОписаниеТипов("Массив"));
		ТаблЗаполнения.Колонки.Добавить("Маршруты",             Новый ОписаниеТипов("Массив"));
		ТаблЗаполнения.Колонки.Добавить("ОбъектыСтроительства", Новый ОписаниеТипов("Массив"));
		ТаблЗаполнения.Колонки.Добавить("ДетализацияЗакрытия",  Новый ОписаниеТипов("ПеречислениеСсылка.уатДетализацияЗаказаГрузоотправителя_уэ"));
		ТаблЗаполнения.Колонки.Добавить("ТекВес",               Новый ОписаниеТипов("Число"));
		ТаблЗаполнения.Колонки.Добавить("ТекОбъем",             Новый ОписаниеТипов("Число"));
	КонецЕсли;
		
	ТекИндексыПунктов = Новый ТаблицаЗначений();
	ТекИндексыПунктов.Колонки.Добавить("Пункт",     Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТекИндексыПунктов.Колонки.Добавить("ТекИндекс", Новый ОписаниеТипов("Число"));
	
	тблПройденоТочекПогрузки = Новый ТаблицаЗначений();
	тблПройденоТочекПогрузки.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблПройденоТочекПогрузки.Колонки.Добавить("ТекИндекс", Новый ОписаниеТипов("Число"));
	
	ПунктТолькоРазгрузка = Неопределено;
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	ТекВес    = 0;
	ТекОбъем  = 0;
	
	Для Каждого ТекСтрока Из ДокументМЛ.Заказы Цикл 
		Если РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки И МЛПоЗаказам Тогда 
			ТекЗаказ = ТекСтрока.ЗаказГрузоотправителя;
		Иначе 
			ТекЗаказ = Неопределено;
		КонецЕсли;
		
		Если РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки
			И ТекСтрока.ТипТочкиМаршрута <> Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			
			Если ПредЗаказ = ТекЗаказ
				И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
				И ПредПункт <> ТекСтрока.Пункт Тогда
				
				ПунктТолькоРазгрузка = ТекСтрока.Пункт;
				ПредПункт = ТекСтрока.Пункт;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ПредПункт = ТекСтрока.Пункт Или Не ПредЗаказ = ТекЗаказ Или ПунктТолькоРазгрузка = ТекСтрока.Пункт Тогда 
			Если Не ПредПункт = ТекСтрока.Пункт Или ПунктТолькоРазгрузка = ТекСтрока.Пункт Тогда
				Если ТекЗаказ <> Неопределено Тогда
					НайдСтрока = тблПройденоТочекПогрузки.Найти(ТекЗаказ, "Заказ");
					Если НайдСтрока = Неопределено Тогда 
						НайдСтрока = тблПройденоТочекПогрузки.Добавить();
						НайдСтрока.Заказ = ТекЗаказ;
						НайдСтрока.ТекИндекс = 0;
					Иначе 
						НайдСтрока.ТекИндекс = НайдСтрока.ТекИндекс + 1;
					КонецЕсли;	
				Иначе
					НайдСтрока = ТекИндексыПунктов.Найти(ТекСтрока.Пункт, "Пункт");
					Если НайдСтрока = Неопределено Тогда 
						НайдСтрока = ТекИндексыПунктов.Добавить();
						НайдСтрока.Пункт     = ТекСтрока.Пункт;
						НайдСтрока.ТекИндекс = 0;
					Иначе 
						НайдСтрока.ТекИндекс = НайдСтрока.ТекИндекс + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЗаполнения = ТаблЗаполнения.Добавить();
			
			ПредПункт = ТекСтрока.Пункт;
			ПредЗаказ = ТекЗаказ;
			ПунктТолькоРазгрузка = Неопределено;
		КонецЕсли;
		
		Если МЛПоЗаказам Тогда 
			СтрокаЗаполнения.Подразделения.Добавить(ТекСтрока.ЗаказГрузоотправителя.Подразделение);
			Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда 
				СтрокаЗаполнения.Контрагенты.Добавить(ТекСтрока.ЗаказГрузоотправителя.Контрагент);
			КонецЕсли;
			
			СтрокаЗаполнения.ЗаказГрузоотправителя = ТекСтрока.ЗаказГрузоотправителя;
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				СтрокаЗаполнения.ВидыПеревозки.Добавить(ТекСтрока.ЗаказГрузоотправителя.ВидПеревозки);
				СтрокаЗаполнения.НаправленияПеревозки.Добавить(ТекСтрока.ЗаказГрузоотправителя.НаправлениеПеревозки);
				СтрокаЗаполнения.Маршруты.Добавить(ТекСтрока.ЗаказГрузоотправителя.Маршрут);
				СтрокаЗаполнения.ОбъектыСтроительства.Добавить(ТекСтрока.ЗаказГрузоотправителя.ОбъектСтроительства);
				СтрокаЗаполнения.ДетализацияЗакрытия = ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия;
			КонецЕсли;
		Иначе 
			СтрокаЗаполнения.Подразделения.Добавить(ДокументМЛ.Подразделение);
			СтрокаЗаполнения.Контрагенты.Добавить(ТекСтрока.Контрагент);
			
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				СтрокаЗаполнения.ВидыПеревозки.Добавить(ДокументМЛ.ВидПеревозки);
				СтрокаЗаполнения.НаправленияПеревозки.Добавить(ДокументМЛ.НаправлениеПеревозки);
				СтрокаЗаполнения.Маршруты.Добавить(ДокументМЛ.Маршрут);
				СтрокаЗаполнения.ОбъектыСтроительства.Добавить(ДокументМЛ.ОбъектСтроительства);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаЗаполнения.Номенклатура.Добавить(ТекСтрока.Номенклатура);
		
		Если РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки И МЛПоЗаказам Тогда
			НайдСтроки = ТаблицаПлановыхДат.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.ЗаказГрузоотправителя));
			
			флагОднаСтрока = Ложь;
			Если ТаблицаПлановыхДат.Количество() = 1 Тогда
				флагОднаСтрока = Истина;
			КонецЕсли; 
			
			Если НайдСтроки.Количество() = 1 Тогда 
				ИндСтроки = 0;
				
			ИначеЕсли НайдСтроки.Количество() Тогда
				Если ТекЗаказ <> Неопределено Тогда
					СтрокаИндСтроки = тблПройденоТочекПогрузки.Найти(ТекЗаказ, "Заказ");
				Иначе
					СтрокаИндСтроки = ТекИндексыПунктов.Найти(ТекСтрока.Пункт, "Пункт");
				КонецЕсли;
				Если Не СтрокаИндСтроки = Неопределено Тогда 
					ИндСтроки = СтрокаИндСтроки.ТекИндекс;
					Если ИндСтроки > (НайдСтроки.Количество() - 1) Тогда 
						ИндСтроки = НайдСтроки.Количество() - 1;
					КонецЕсли;
				КонецЕсли;
				
			Иначе 
				ИндСтроки = Неопределено;
			КонецЕсли;
			
			Если ИндСтроки <> Неопределено Тогда 
				// Алгоритм изменен в пользу унификации работы во всех вариантах заполнения
				//СтрокаЗаполнения.ВремяПрибытияПлан = ?(флагОднаСтрока, Объект.ДатаВыезда,      НайдСтроки[ИндСтроки].ПрибытиеПлан);
				//СтрокаЗаполнения.ВремяУбытияПлан   = ?(флагОднаСтрока, Объект.ДатаВозвращения, НайдСтроки[ИндСтроки].УбытиеПлан);
				
				СтрокаЗаполнения.ВремяПрибытияПлан = НайдСтроки[ИндСтроки].ПрибытиеПлан;
				СтрокаЗаполнения.ВремяУбытияПлан   = НайдСтроки[ИндСтроки].УбытиеПлан;

				СтрокаЗаполнения.ВремяПрибытияФакт = НайдСтроки[ИндСтроки].ПрибытиеФакт;
				СтрокаЗаполнения.ВремяУбытияФакт   = НайдСтроки[ИндСтроки].УбытиеФакт;
				
				СтрокаЗаполнения.НомерЕздки = НайдСтроки[ИндСтроки].НомерЭтапа;
			КонецЕсли;
			
			Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
				ИЛИ флагОднаСтрока
				ИЛИ ИндСтроки = Неопределено
				ИЛИ ТаблицаПлановыхДат.Колонки.Найти("ПунктОтправления") = Неопределено Тогда
				СтрокаЗаполнения.АдресПрибытия = ТекСтрока.ЗаказГрузоотправителя.АдресОтправления;
				СтрокаЗаполнения.АдресУбытия   = ТекСтрока.ЗаказГрузоотправителя.АдресНазначения;
			Иначе
				СтрокаЗаполнения.АдресПрибытия = НайдСтроки[ИндСтроки].ПунктОтправления;
				СтрокаЗаполнения.АдресУбытия   = НайдСтроки[ИндСтроки].ПунктНазначения;
			КонецЕсли;
			
			НайдСтрока = ВремяРасстояниеПоЗаказам.Найти(ТекСтрока.ЗаказГрузоотправителя, "ЗаказНаТС");
			Если НайдСтрока <> Неопределено Тогда 
				СтрокаЗаполнения.КоличествоКмГруз = НайдСтрока.Расстояние;
				СтрокаЗаполнения.КоличествоЧасов  = НайдСтрока.Время;
			КонецЕсли;
			
		Иначе 
			НайдСтроки = ТаблицаПлановыхДат.НайтиСтроки(Новый Структура("Пункт", ТекСтрока.Пункт));
			
			Если НайдСтроки.Количество() = 1 Тогда 
				ИндСтроки = 0;
				
			ИначеЕсли НайдСтроки.Количество() Тогда 
				Если ТекЗаказ <> Неопределено Тогда
					СтрокаИндСтроки = тблПройденоТочекПогрузки.Найти(ТекЗаказ, "Заказ");
				Иначе
					СтрокаИндСтроки = ТекИндексыПунктов.Найти(ТекСтрока.Пункт, "Пункт");
				КонецЕсли;
				Если Не СтрокаИндСтроки = Неопределено Тогда 
					ИндСтроки = СтрокаИндСтроки.ТекИндекс;
					Если ИндСтроки > (НайдСтроки.Количество() - 1) Тогда 
						ИндСтроки = НайдСтроки.Количество() - 1;
					КонецЕсли;
				КонецЕсли;
				
			Иначе 
				ИндСтроки = Неопределено;
			КонецЕсли;
			
			Если ИндСтроки <> Неопределено Тогда 
				СтрокаЗаполнения.НомерЕздки = НайдСтроки[ИндСтроки].НомерЭтапа;
				
				Если РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки И Не МЛПоЗаказам Тогда
					СтрокаЗаполнения.ВремяПрибытияПлан = ТекСтрока.ПрибытиеПлан;
					СтрокаЗаполнения.ВремяПрибытияФакт = ТекСтрока.ПрибытиеФакт;
				Иначе 
					СтрокаЗаполнения.ВремяПрибытияПлан = НайдСтроки[ИндСтроки].ПрибытиеПлан;
					СтрокаЗаполнения.ВремяУбытияПлан   = НайдСтроки[ИндСтроки].УбытиеПлан;
					СтрокаЗаполнения.ВремяПрибытияФакт = НайдСтроки[ИндСтроки].ПрибытиеФакт;
					СтрокаЗаполнения.ВремяУбытияФакт   = НайдСтроки[ИндСтроки].УбытиеФакт;
				КонецЕсли;
			КонецЕсли;
			
			Если ВариантЗаполнения = 1
				И Документы.уатМаршрутныйЛист.ЗаказДоставлен(ДокументМЛ, ТекСтрока.ЗаказГрузоотправителя)
				ИЛИ ВариантЗаполнения = 3 Тогда
				
				СтрокаЗаполнения.КоличествоКмГруз = ТекСтрока.РасстояниеФакт;
				СтрокаЗаполнения.КоличествоЧасов  = ТекСтрока.ВремяФакт;
			Иначе
				СтрокаЗаполнения.КоличествоКмГруз = ТекСтрока.Расстояние;
				СтрокаЗаполнения.КоличествоЧасов  = ТекСтрока.Время;
			КонецЕсли;
			
			СтрокаЗаполнения.АдресПрибытия = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
			СтрокаЗаполнения.КоличествоТонн = СтрокаЗаполнения.КоличествоТонн + (ТекСтрока.ВесБрутто / КоэфВеса);
			СтрокаЗаполнения.Объем          = СтрокаЗаполнения.Объем + (ТекСтрока.Объем / КоэфОбъема);
			СтрокаЗаполнения.Количество     = ТекСтрока.Количество;
		КонецЕсли;
		
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				ТекВес   = ТекВес + (ТекСтрока.ВесБрутто / КоэфВеса);
				ТекОбъем = ТекВес + (ТекСтрока.Объем / КоэфОбъема);
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
				ТекВес   = ТекВес - (ТекСтрока.ВесБрутто / КоэфВеса);
				ТекОбъем = ТекВес - (ТекСтрока.Объем / КоэфОбъема);
			КонецЕсли;
			СтрокаЗаполнения.ТекВес = ТекВес;
			СтрокаЗаполнения.ТекОбъем = ТекОбъем;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗаполнения = Перечисления.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПарныеПункты Тогда
		Для Сч = 0 По ТаблЗаполнения.Количество() - 2 Цикл 
			ТекСтрока  = ТаблЗаполнения[Сч];
			СледСтрока = ТаблЗаполнения[Сч + 1];
			
			ТекСтрока.АдресУбытия = СледСтрока.АдресПрибытия;
			ТекСтрока.ВремяУбытияПлан = СледСтрока.ВремяПрибытияПлан;
			ТекСтрока.ВремяУбытияФакт = СледСтрока.ВремяПрибытияФакт;
			
			ТекСтрокаЗаказГрузоотправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ЗаказГрузоотправителя,
					"Подразделение, Контрагент");
			СледСтрокаЗаказГрузоотправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СледСтрока.ЗаказГрузоотправителя,
					"Подразделение, Контрагент");
				
			Если ТекСтрока.ЗаказГрузоотправителя <> СледСтрока.ЗаказГрузоотправителя Тогда
				Если ТекСтрокаЗаказГрузоотправителя.Подразделение <> СледСтрокаЗаказГрузоотправителя.Подразделение Тогда
					ТекСтрока.Подразделения = Новый Массив();
				КонецЕсли;
				Если ТекСтрокаЗаказГрузоотправителя.Контрагент <> СледСтрокаЗаказГрузоотправителя.Контрагент Тогда
					ТекСтрока.Контрагенты = Новый Массив();
				КонецЕсли;
			КонецЕсли;
				
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				ТекСтрокаЗаказГрузоотправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ЗаказГрузоотправителя,
					"ВидПеревозки, НаправлениеПеревозки, ОбъектСтроительства, Маршрут, ДетализацияЗакрытия");
				СледСтрокаЗаказГрузоотправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СледСтрока.ЗаказГрузоотправителя,
					"ВидПеревозки, НаправлениеПеревозки, ОбъектСтроительства, Маршрут, ДетализацияЗакрытия");
				Если ТекСтрока.ЗаказГрузоотправителя <> СледСтрока.ЗаказГрузоотправителя Тогда
					Если ТекСтрокаЗаказГрузоотправителя.ВидПеревозки <> СледСтрокаЗаказГрузоотправителя.ВидПеревозки Тогда
						ТекСтрока.ВидыПеревозки = Новый Массив();
					КонецЕсли;
					Если ТекСтрокаЗаказГрузоотправителя.ОбъектСтроительства <> СледСтрокаЗаказГрузоотправителя.ОбъектСтроительства Тогда
						ТекСтрока.ОбъектыСтроительства = Новый Массив();
					КонецЕсли;
					Если ТекСтрокаЗаказГрузоотправителя.НаправлениеПеревозки <> СледСтрокаЗаказГрузоотправителя.НаправлениеПеревозки Тогда
						ТекСтрока.НаправленияПеревозки = Новый Массив();
					КонецЕсли;
					Если ТекСтрокаЗаказГрузоотправителя.Маршрут <> СледСтрокаЗаказГрузоотправителя.Маршрут Тогда
						ТекСтрока.Маршруты = Новый Массив();
					КонецЕсли;
						Если ТекСтрокаЗаказГрузоотправителя.ДетализацияЗакрытия <> СледСтрокаЗаказГрузоотправителя.ДетализацияЗакрытия Тогда
						ТекСтрока.ДетализацияЗакрытия = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
		Если ТаблЗаполнения.Количество() > 0 Тогда
			ТаблЗаполнения.Удалить(ТаблЗаполнения.Количество() - 1);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблЗаполнения Цикл 
		НоваяСтрока = Объект.Задание.Добавить();
		НоваяСтрока.Подразделение        = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.Подразделения);
		НоваяСтрока.Контрагент           = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.Контрагенты);
		НоваяСтрока.Номенклатура         = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.Номенклатура);
		НоваяСтрока.АдресПрибытия        = ТекСтрока.АдресПрибытия;
		НоваяСтрока.АдресУбытия          = ТекСтрока.АдресУбытия;
		
		НоваяСтрока.ВремяПрибытия = ТекСтрока.ВремяПрибытияПлан;
		НоваяСтрока.ВремяУбытия   = ТекСтрока.ВремяУбытияПлан;
		Если флУчетПланФакт И (ВариантЗаполнения = 1
			И Документы.уатМаршрутныйЛист.ЗаказДоставлен(ДокументМЛ, ТекСтрока.ЗаказГрузоотправителя)
			ИЛИ ВариантЗаполнения = 3) Тогда
			НоваяСтрока.ВремяПрибытияФакт = ТекСтрока.ВремяПрибытияФакт;
			НоваяСтрока.ВремяУбытияФакт   = ТекСтрока.ВремяУбытияФакт;
		КонецЕсли;
		Если НЕ флУчетПланФактПЛ
			И Документы.уатМаршрутныйЛист.ЗаказДоставлен(ДокументМЛ, ТекСтрока.ЗаказГрузоотправителя) Тогда
			НоваяСтрока.ВремяПрибытия = ТекСтрока.ВремяПрибытияФакт;
			НоваяСтрока.ВремяУбытия   = ТекСтрока.ВремяУбытияФакт;
		КонецЕсли;
		
		//Если ВариантЗаполнения = 0 Тогда
		//	НоваяСтрока.ВремяПрибытия     = ТекСтрока.ВремяПрибытияПлан;
		//	НоваяСтрока.ВремяУбытия       = ТекСтрока.ВремяУбытияПлан;
		//ИначеЕсли ВариантЗаполнения = 1
		//	И НЕ Документы.уатМаршрутныйЛист.ЗаказДоставлен(ДокументМЛ, ТекСтрока.ЗаказГрузоотправителя)
		//	ИЛИ ВариантЗаполнения = 3 Тогда
		//	
		//	НоваяСтрока.ВремяПрибытия     = ТекСтрока.ВремяПрибытияПлан;
		//	НоваяСтрока.ВремяУбытия       = ТекСтрока.ВремяУбытияПлан;
		//Иначе
		//	НоваяСтрока.ВремяПрибытия     = ТекСтрока.ВремяПрибытияФакт;
		//	НоваяСтрока.ВремяУбытия       = ТекСтрока.ВремяУбытияФакт;
		//КонецЕсли;
		
		НоваяСтрока.КоличествоЕздок      = 1;
		НоваяСтрока.УсловиеРаботы        = Объект.УсловиеРаботы;
		
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			НоваяСтрока.ВидПеревозки         = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.ВидыПеревозки);
			НоваяСтрока.НаправлениеПеревозки = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.НаправленияПеревозки);
			НоваяСтрока.Маршрут              = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.Маршруты);
			НоваяСтрока.ОбъектСтроительства  = ПолучитьЗначениеТаблЗаполненияДляПодстановки(ТекСтрока.ОбъектыСтроительства);
		КонецЕсли;
		
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			НоваяСтрока.КоличествоКмГруз     = ?(ТекСтрока.КоличествоТонн > 0 Или ТекСтрока.Объем > 0 ИЛИ ТекСтрока.Количество > 0, ТекСтрока.КоличествоКмГруз, 0);
			НоваяСтрока.КоличествоКмПорожний = ?(ТекСтрока.КоличествоТонн > 0 Или ТекСтрока.Объем > 0 ИЛИ ТекСтрока.Количество > 0, 0, ТекСтрока.КоличествоКмГруз);
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ДетализацияЗакрытия)
			И ТекСтрока.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			Если ТекСтрока.КоличествоТонн > 0 ИЛИ ТекСтрока.Объем > 0 ИЛИ ТекСтрока.Количество > 0 Тогда
				НоваяСтрока.КоличествоКмГруз = ТекСтрока.КоличествоКмГруз;
			ИначеЕсли ТекСтрока.ЗаказГрузоотправителя.Объем > 0 ИЛИ ТекСтрока.ЗаказГрузоотправителя.ВесБрутто > 0 Тогда
				НоваяСтрока.КоличествоКмГруз     = ?(ТекСтрока.ТекВес > 0 ИЛИ ТекСтрока.ТекОбъем > 0 ИЛИ ТекСтрока.Количество > 0, ТекСтрока.КоличествоКмГруз, 0);
				НоваяСтрока.КоличествоКмПорожний = ?(ТекСтрока.ТекВес > 0 ИЛИ ТекСтрока.ТекОбъем > 0 ИЛИ ТекСтрока.Количество > 0, 0, ТекСтрока.КоличествоКмГруз);
			Иначе
				НоваяСтрока.КоличествоКмГруз     = ТекСтрока.КоличествоКмГруз;
				НоваяСтрока.КоличествоКмПорожний = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока.КоличествоКмГруз     = ?(ТекСтрока.ТекВес > 0 ИЛИ ТекСтрока.ТекОбъем > 0 ИЛИ ТекСтрока.Количество > 0, ТекСтрока.КоличествоКмГруз, 0);
			НоваяСтрока.КоличествоКмПорожний = ?(ТекСтрока.ТекВес > 0 ИЛИ ТекСтрока.ТекОбъем > 0 ИЛИ ТекСтрока.Количество > 0, 0, ТекСтрока.КоличествоКмГруз);
		КонецЕсли;
		
		НоваяСтрока.КоличествоЧасов      = ТекСтрока.КоличествоЧасов;
		НоваяСтрока.КоличествоТонн       = ТекСтрока.КоличествоТонн;
		НоваяСтрока.Объем                = ТекСтрока.Объем;
		НоваяСтрока.НомерЕздки           = ТекСтрока.НомерЕздки;
		
		Если флЗаполнениеЗаказаВЗадании Тогда
			НоваяСтрока.ЗаказНаТС  = ТекСтрока.ЗаказГрузоотправителя;
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.Количество = ТекСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлановыеДатыПоЗаказам(МаршрутныйЛист)
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Заказ",            Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблицаЗаказов.Колонки.Добавить("ПрибытиеПлан",     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗаказов.Колонки.Добавить("УбытиеПлан",       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗаказов.Колонки.Добавить("ПрибытиеФакт",     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗаказов.Колонки.Добавить("УбытиеФакт",       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗаказов.Колонки.Добавить("НомерЭтапа",       Новый ОписаниеТипов("Число"));
	ТаблицаЗаказов.Колонки.Добавить("ПунктОтправления", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТаблицаЗаказов.Колонки.Добавить("ПунктНазначения",  Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	
	ДеревоЗаказов = Новый ДеревоЗначений();
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеФакт",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеФакт",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ВремяФакт",              Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Стоянка",                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СтоянкаИзПункта",        Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СтоянкаФакт",            Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Ожидание",               Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ОжиданиеФакт",           Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ТипТочкиМаршрута",       Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ДеревоЗаказов.Колонки.Добавить("НомерЭтапа",             Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Количество",             Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ВесБрутто",              Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Объем",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("КоличествоМест",         Новый ОписаниеТипов("Число"));
	
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ВремяФакт              = ТекСтрока.ВремяФакт;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаПункт.Количество             = ТекСтрока.Количество;
			НовСтрокаПункт.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаПункт.Объем                  = ТекСтрока.Объем;
			НовСтрокаПункт.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.ОжиданиеФакт           = ТекСтрока.ОжиданиеФакт;
			НовСтрокаПункт.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаПункт.СтоянкаФакт            = ТекСтрока.СтоянкаФакт;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекПункт <> ПредПункт ИЛИ СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ВремяФакт              = ТекСтрока.ВремяФакт;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.ОжиданиеФакт           = ТекСтрока.ОжиданиеФакт;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если ТекСтрока.ЗаказГрузоотправителя <> ПредЗаказ
			ИЛИ (ПредСтрока <> Неопределено И ТекСтрока.ТипТочкиМаршрута <> ПредСтрока.ТипТочкиМаршрута)
			ИЛИ СменилсяПункт Тогда
			
			НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		НовСтрокаЗаказ.Количество     = НовСтрокаЗаказ.Количество + ТекСтрока.Количество;
		НовСтрокаЗаказ.ВесБрутто      = НовСтрокаЗаказ.ВесБрутто + ТекСтрока.ВесБрутто;
		НовСтрокаЗаказ.Объем          = НовСтрокаЗаказ.Объем + ТекСтрока.Объем;
		НовСтрокаЗаказ.КоличествоМест = НовСтрокаЗаказ.КоличествоМест + ТекСтрока.КоличествоМест;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ПредКоличество     = 0;
	ПредВесБрутто      = 0;
	ПредОбъем          = 0;
	ПредКоличествоМест = 0;
	ТекНомерЭтапа      = 0;
	
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		Если ТекСтрокаПункт.Строки.Количество() = 0 Тогда 
			Если ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда 
				ПредКоличество     = ПредКоличество - ТекСтрокаПункт.Количество;
				ПредВесБрутто      = ПредВесБрутто - ТекСтрокаПункт.ВесБрутто;
				ПредОбъем          = ПредОбъем - ТекСтрокаПункт.Объем;
				ПредКоличествоМест = ПредКоличествоМест - ТекСтрокаПункт.КоличествоМест;
			КонецЕсли;
			
			Если Не (ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0 И ТипЗнч(ТекСтрокаПункт.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения")
					И ТекСтрокаПункт.ПунктЗаказНоменклатура.Гараж) Тогда 
				Если ПредКоличество = 0 И ПредВесБрутто = 0 И ПредОбъем = 0 И ПредКоличествоМест = 0 Тогда 
					ТекНомерЭтапа = ТекНомерЭтапа + 1;
				КонецЕсли;
				ТекСтрокаПункт.НомерЭтапа = ТекНомерЭтапа;
			КонецЕсли;
			
			Если ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
				ПредКоличество     = ПредКоличество + ТекСтрокаПункт.Количество;
				ПредВесБрутто      = ПредВесБрутто + ТекСтрокаПункт.ВесБрутто;
				ПредОбъем          = ПредОбъем + ТекСтрокаПункт.Объем;
				ПредКоличествоМест = ПредКоличествоМест + ТекСтрокаПункт.КоличествоМест;
			КонецЕсли;
			
		Иначе 
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
				Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда 
					ПредКоличество     = ПредКоличество - ТекСтрокаЗаказ.Количество;
					ПредВесБрутто      = ПредВесБрутто - ТекСтрокаЗаказ.ВесБрутто;
					ПредОбъем          = ПредОбъем - ТекСтрокаЗаказ.Объем;
					ПредКоличествоМест = ПредКоличествоМест - ТекСтрокаЗаказ.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
			
			Если ПредКоличество = 0 И ПредВесБрутто = 0 И ПредОбъем = 0 И ПредКоличествоМест = 0 Тогда 
				ТекНомерЭтапа = ТекНомерЭтапа + 1;
			КонецЕсли;
			ТекСтрокаПункт.НомерЭтапа = ТекНомерЭтапа;
			
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
				Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
					ПредКоличество     = ПредКоличество + ТекСтрокаЗаказ.Количество;
					ПредВесБрутто      = ПредВесБрутто + ТекСтрокаЗаказ.ВесБрутто;
					ПредОбъем          = ПредОбъем + ТекСтрокаЗаказ.Объем;
					ПредКоличествоМест = ПредКоличествоМест + ТекСтрокаЗаказ.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПредВремяОтпрПлан = Неопределено;
	ПредПунктСтрока   = Неопределено;
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		СуммарноеВремяСтоянкиПлан = 0;
		
		ЭлементыПункта = ТекСтрокаПункт.Строки;
		Если ЭлементыПункта.Количество() = 0 Тогда
			СуммарноеВремяСтоянкиПлан = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянкиПлан, ТекСтрокаПункт.Стоянка);
		Конецесли;
		
		Для Каждого ТекСтрокаЗаказ Из ЭлементыПункта Цикл 
			СуммарноеВремяСтоянкиПлан = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянкиПлан, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянкиПлан = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянкиПлан, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянкиПлан;
		
		Если ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(МаршрутныйЛист.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянкиПлан);
			ТекСтрокаПункт.УбытиеПлан   = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
		Иначе 
			ТекПрибытиеПлан             = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпрПлан, ПредПунктСтрока.Время);
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянкиПлан);
		КонецЕсли;
		
		ПредВремяОтпрПлан = ТекСтрокаПункт.УбытиеПлан;
		ПредПунктСтрока   = ТекСтрокаПункт;
	КонецЦикла;
	
	Для СчПунктПогрузка = 0 По ДеревоЗаказов.Строки.Количество() - 1 Цикл
		СтрокаПунктПогрузка = ДеревоЗаказов.Строки[СчПунктПогрузка];
		
		Для СчЗаказПогрузка = 0 По СтрокаПунктПогрузка.Строки.Количество() - 1 Цикл 
			СтрокаЗаказПогрузка = СтрокаПунктПогрузка.Строки[СчЗаказПогрузка];
			
			Если СтрокаЗаказПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
				УбытиеПлан = Неопределено;
				УбытиеФакт = Неопределено;
				Для СчПунктРазгрузка = СчПунктПогрузка + 1 По ДеревоЗаказов.Строки.Количество() - 1 Цикл
					Если УбытиеПлан <> Неопределено И УбытиеФакт <> Неопределено Тогда 
						Прервать;
					КонецЕсли;
					
					СтрокаПунктРазгрузка = ДеревоЗаказов.Строки[СчПунктРазгрузка];
					
					Для СчЗаказРазгрузка = 0 По СтрокаПунктРазгрузка.Строки.Количество() - 1 Цикл 
						СтрокаЗаказРазгрузка = СтрокаПунктРазгрузка.Строки[СчЗаказРазгрузка];
						
						Если СтрокаЗаказРазгрузка.ПунктЗаказНоменклатура = СтрокаЗаказПогрузка.ПунктЗаказНоменклатура
							И СтрокаЗаказРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда 
							
							Если УбытиеПлан = Неопределено Тогда
								УбытиеПлан = СтрокаПунктРазгрузка.УбытиеПлан;
							КонецЕсли;
							Если УбытиеФакт = Неопределено Тогда
								УбытиеФакт = СтрокаПунктРазгрузка.УбытиеФакт;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
								
				Если СтрокаПунктРазгрузка = Неопределено Тогда
					СтрокаПунктРазгрузка = СтрокаПунктПогрузка;
				КонецЕсли;
				
				НовСтрока = ТаблицаЗаказов.Добавить();
				НовСтрока.Заказ            = СтрокаЗаказПогрузка.ПунктЗаказНоменклатура;
				НовСтрока.ПрибытиеПлан     = СтрокаПунктПогрузка.ПрибытиеПлан;
				НовСтрока.УбытиеПлан       = УбытиеПлан;
				НовСтрока.ПрибытиеФакт     = СтрокаПунктПогрузка.ПрибытиеФакт;
				НовСтрока.УбытиеФакт       = УбытиеФакт;
				НовСтрока.НомерЭтапа       = СтрокаПунктПогрузка.НомерЭтапа;
				НовСтрока.ПунктОтправления = СтрокаПунктПогрузка.ПунктЗаказНоменклатура;
				НовСтрока.ПунктНазначения  = СтрокаПунктРазгрузка.ПунктЗаказНоменклатура
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

#КонецОбласти


#Область ПеренесенныеИзМодуляОбъектаПутевогоЛиста

// Процедура добавляет строку выработки ТС
// ЗначенияАналитик: структура, содержащая ключи Подразделение, Контрагент, ОбъектСтроительства, Маршрут
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ЗначенияАналитик, но также и все остальные строки, для которых
//		значения ТС и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
//
Процедура ЗаписатьСтрокуВыработкиТС(ВыработкаТС, ТС, ПараметрВыработки, КоличествоВыработки, ЗначенияАналитик = Неопределено, ДопПараметры = Неопределено) Экспорт
	Если ЗначенияАналитик = Неопределено Тогда
		ЗначенияАналитик = Новый Структура;
	КонецЕсли;
	Если НЕ ЗначенияАналитик.Свойство("Подразделение") Тогда
		ЗначенияАналитик.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если НЕ ЗначенияАналитик.Свойство("Контрагент") Тогда
		ЗначенияАналитик.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Если НЕ ЗначенияАналитик.Свойство("ОбъектСтроительства") Тогда
			ЗначенияАналитик.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
		КонецЕсли;
		Если НЕ ЗначенияАналитик.Свойство("Маршрут") Тогда
			ЗначенияАналитик.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
		КонецЕсли;
		Если НЕ ЗначенияАналитик.Свойство("ВидПеревозки") Тогда
			ЗначенияАналитик.Вставить("ВидПеревозки", Справочники.уатВидыПеревозок.ПустаяСсылка());
		КонецЕсли;
		Если НЕ ЗначенияАналитик.Свойство("НаправлениеПеревозки") Тогда
			ЗначенияАналитик.Вставить("НаправлениеПеревозки", Справочники.уатНаправленияПеревозок.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("флЗамещать") Тогда
		ДопПараметры.Вставить("флЗамещать", Истина);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("флУдалитьСтрокиБезДопАналитик") Тогда
		ДопПараметры.Вставить("флУдалитьСтрокиБезДопАналитик", Ложь);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("флЭтоТПЛ") Тогда
		ДопПараметры.Вставить("флЭтоТПЛ", Ложь);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ТС, ПараметрВыработки", ТС, ПараметрВыработки);
	Для Каждого ТекАналитика Из ЗначенияАналитик Цикл
		Если ДопПараметры.флЭтоТПЛ
			И ТекАналитика.Ключ <> "Подразделение"
			И ТекАналитика.Ключ <> "ОбъектСтроительства" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(ТекАналитика.Ключ, ТекАналитика.Значение);
	КонецЦикла;

	мМассивСтрок = ВыработкаТС.НайтиСтроки(СтруктураПоиска);
	
	Если мМассивСтрок.Количество() = 0 Тогда
		ТекСтрокаВыработки = ВыработкаТС.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрокаВыработки, СтруктураПоиска);
	Иначе
		ТекСтрокаВыработки = мМассивСтрок[0];
	КонецЕсли;
	Если ДопПараметры.флЗамещать Тогда
		// очистим все строки с указанным ТС и парам. выработки, кроме найденной строки
		Если ДопПараметры.флУдалитьСтрокиБезДопАналитик Тогда
			СтруктураОтбора = Новый Структура("ТС, ПараметрВыработки", ТС, ПараметрВыработки);
			мМассивСтрок = ВыработкаТС.НайтиСтроки(СтруктураОтбора);
			Для Каждого ТекСтрока Из мМассивСтрок Цикл
				Если ТекСтрока <> ТекСтрокаВыработки Тогда
					ВыработкаТС.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			// чистим заодно и доп. аналитики
			Если ДопПараметры.флЭтоТПЛ Тогда
				ТекСтрокаВыработки.Подразделение        = Неопределено;
				ТекСтрокаВыработки.ОбъектСтроительства  = Неопределено;
			Иначе
				ТекСтрокаВыработки.Подразделение        = Неопределено;
				ТекСтрокаВыработки.Контрагент           = Неопределено;
				Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
					ТекСтрокаВыработки.ОбъектСтроительства  = Неопределено;
					ТекСтрокаВыработки.Маршрут              = Неопределено;
					ТекСтрокаВыработки.ВидПеревозки         = Неопределено;
					ТекСтрокаВыработки.НаправлениеПеревозки = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТекСтрокаВыработки.Количество = КоличествоВыработки;
	Иначе //приплюсуем к тому что есть уже
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + КоличествоВыработки;
	КонецЕсли;
	
	Если ТекСтрокаВыработки.Количество = 0 Тогда
		ВыработкаТС.Удалить(ТекСтрокаВыработки);
	Иначе
		мПараметрВыработки = уатПутевыеЛисты.уатПараметрыВыработкиТС();
		мМассивПараметров = мПараметрВыработки.НайтиСтроки(Новый Структура("ПараметрВыработки", ТекСтрокаВыработки.ПараметрВыработки));
		Если мМассивПараметров.Количество() = 0 Тогда
			ВыработкаТС.Удалить(ТекСтрокаВыработки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуВыработкиТС()

// Функция возвращает параметры, необходимые для расчета ГСМ
//
Функция ПолучитьПараметрыРасчетаРасходаГСМ(Объект) Экспорт
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ТочностьРасчета",          уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ТочностьОстатковТоплива"));
	ПараметрыРасчета.Вставить("КоэффициентУР",            Объект.УсловиеРаботы.КоэффициентИзменениеНормыРасхода);
	ПараметрыРасчета.Вставить("УсловиеРаботыМЧ",          Объект.УсловиеРаботы.ДействуетНаТСсоСчетчикомМЧ);
	ПараметрыРасчета.Вставить("КоэффициентТМ",            уатПутевыеЛисты.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Объект.Температура));
	ПараметрыРасчета.Вставить("Организация",              Объект.Организация);
	ПараметрыРасчета.Вставить("ДатаРасчета",              Объект.Дата);
	
	Если флЭтоТПЛ Тогда
		ПараметрыРасчета.Вставить("ЭтоПЛ",                                Ложь);
		ПараметрыРасчета.Вставить("ТС",                                   Объект.ТС);
		ПараметрыРасчета.Вставить("РежимРасчетаВыработки",                Неопределено);
		ПараметрыРасчета.Вставить("РаботаНаДвухВидахТоплива",             Ложь);
		ПараметрыРасчета.Вставить("РаботаНаДвухВидахТопливаОдновременно", Ложь);
		ПараметрыРасчета.Вставить("ВремяРаботыОтопителя",                 0);
		ПараметрыРасчета.Вставить("КоличествоЗапусков",                   0);
		ПараметрыРасчета.Вставить("ПробегОбщийПоЗаданию",                 0);
		ПараметрыРасчета.Вставить("ВремяВРаботеПоЗаданию",                0);
		ПараметрыРасчета.Вставить("ВремяВПростоеВклДвиг",                 0);
	Иначе
		ПараметрыРасчета.Вставить("ЭтоПЛ",                                Истина);
		ПараметрыРасчета.Вставить("ТС",                                   Объект.ТранспортноеСредство);
		ПараметрыРасчета.Вставить("РежимРасчетаВыработки",                Объект.РежимРасчетаВыработки);
		ПараметрыРасчета.Вставить("РаботаНаДвухВидахТоплива",             Объект.РаботаНаДвухВидахТоплива);
		ПараметрыРасчета.Вставить("РаботаНаДвухВидахТопливаОдновременно", Объект.РаботаНаДвухВидахТопливаОдновременно);
		ПараметрыРасчета.Вставить("ВремяРаботыОтопителя",                 Объект.ВремяРаботыОтопителя);
		ПараметрыРасчета.Вставить("КоличествоЗапусков",                   Объект.КоличествоЗапусков);
		ПараметрыРасчета.Вставить("ПробегОбщийПоЗаданию",                 0);
		ПараметрыРасчета.Вставить("ВремяВРаботеПоЗаданию",                0);
		ПараметрыРасчета.Вставить("ВремяВПростоеВклДвиг",                 0);
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("ДетальныйУчетУсловийРаботы",
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДетальныйУчетУсловийРаботы"));
		
	мсвПрицепы = Новый Массив;
	Если НЕ флЭтоТПЛ Тогда
		Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
			мсвПрицепы.Добавить(Новый Структура("СобственныйВес, ПрицепСамосвал, Грузоподъемность, ЗагрузкаСамосвала",
				?(ТекПрицеп.ТС.СобственныйВес = 0, ТекПрицеп.ТС.Модель.СобственныйВес, ТекПрицеп.ТС.СобственныйВес),
				ТекПрицеп.ТС.Модель.ТипТС.Самосвал,
				ТекПрицеп.ТС.Модель.Грузоподъемность,
				ТекПрицеп.ТС.Модель.НормируемаяЗагрузкаСамосвала));
		КонецЦикла;
	КонецЕсли;
	ПараметрыРасчета.Вставить("Прицепы", мсвПрицепы);
	
	мсвЗадание = Новый Массив;
	Если НЕ флЭтоТПЛ Тогда
		Для Каждого ТекЗадание Из Объект.Задание Цикл
			СтруктураСтроки = Новый Структура("Выполнено, НомерСтроки, НомерЕздки, КоэффициентУР, УсловиеРаботыМЧ, КоличествоЕздок, КоличествоКмГруз, КоличествоКмПорожний, КоличествоЧасов, КоличествоТонн");
			Для Сч = 1 По 5 Цикл //добавляются спец. работы
				СтруктураСтроки.Вставить("СпецРабота" + Сч);
				СтруктураСтроки.Вставить("СпецРабота" + Сч + "Временный", ТекЗадание["СпецРабота" + Сч].Временный);
				СтруктураСтроки.Вставить("КоличествоСпецРаботы" + Сч, ТекЗадание["КоличествоСпецРаботы" + Сч]);
			КонецЦикла;
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				СтруктураСтроки.Вставить("Прицеп1", ТекЗадание.Прицеп1);
				СтруктураСтроки.Вставить("КоличествоЧасовПрицеп1", ТекЗадание.КоличествоЧасовПрицеп1);
				СтруктураСтроки.Вставить("Прицеп1СобственныйВес", ?(ТекЗадание.Прицеп1.СобственныйВес = 0, ТекЗадание.Прицеп1.Модель.СобственныйВес, ТекЗадание.Прицеп1.СобственныйВес));
				СтруктураСтроки.Вставить("Прицеп1Самосвал", ТекЗадание.Прицеп1.Модель.ТипТС.Самосвал);
				СтруктураСтроки.Вставить("Прицеп1Грузоподъемность", ТекЗадание.Прицеп1.Модель.Грузоподъемность);
				СтруктураСтроки.Вставить("Прицеп1ЗагрузкаСамосвала", ТекЗадание.Прицеп1.Модель.НормируемаяЗагрузкаСамосвала);
				СтруктураСтроки.Вставить("Прицеп2", ТекЗадание.Прицеп2);
				СтруктураСтроки.Вставить("КоличествоЧасовПрицеп2", ТекЗадание.КоличествоЧасовПрицеп2);
				СтруктураСтроки.Вставить("Прицеп2СобственныйВес", ?(ТекЗадание.Прицеп2.СобственныйВес = 0, ТекЗадание.Прицеп2.Модель.СобственныйВес, ТекЗадание.Прицеп2.СобственныйВес));
				СтруктураСтроки.Вставить("Прицеп2Самосвал", ТекЗадание.Прицеп2.Модель.ТипТС.Самосвал);
				СтруктураСтроки.Вставить("Прицеп2Грузоподъемность", ТекЗадание.Прицеп2.Модель.Грузоподъемность);
				СтруктураСтроки.Вставить("Прицеп2ЗагрузкаСамосвала", ТекЗадание.Прицеп2.Модель.НормируемаяЗагрузкаСамосвала);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекЗадание);
			СтруктураСтроки.КоэффициентУР = ТекЗадание.УсловиеРаботы.КоэффициентИзменениеНормыРасхода;
			СтруктураСтроки.УсловиеРаботыМЧ = ТекЗадание.УсловиеРаботы.ДействуетНаТСсоСчетчикомМЧ;
			мсвЗадание.Добавить(СтруктураСтроки);
			
			Если ТекЗадание.Выполнено И Объект.РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
				ПараметрыРасчета.ПробегОбщийПоЗаданию = ПараметрыРасчета.ПробегОбщийПоЗаданию + (ТекЗадание.КоличествоКмГруз+ТекЗадание.КоличествоКмПорожний)*ТекЗадание.КоличествоЕздок;
				ПараметрыРасчета.ВремяВРаботеПоЗаданию = ПараметрыРасчета.ВремяВРаботеПоЗаданию + уатОбщегоНазначения.уатВремяВСекунды(ТекЗадание.КоличествоЧасов);
			КонецЕсли;
			
			// Расчет усредненного коэффициента УР в строке задания выполняется по формуле:
			// К = (К1 * S1 + К2 * S2 + ... + КN * SN) / S,
			// где S - итоговый пробег по строке, КN - детальные условия работы, SN - пробеги по детальным условиям работы
			Если ПараметрыРасчета.ДетальныйУчетУсловийРаботы Тогда
				мсвСтрокиУсловияРаботы = Объект.УсловияРаботыДетально.НайтиСтроки(Новый Структура("ID", ТекЗадание.ID));
				Если мсвСтрокиУсловияРаботы.Количество() > 0
					И ТекЗадание.КоличествоКмГруз + ТекЗадание.КоличествоКмПорожний > 0 Тогда 
					
					ТекПробегОбщийПоУсловиям   = 0;
					ТекПробегСГрузомПоУсловиям = 0;
					Для Каждого ТекСтрокаУсловиеРаботы Из мсвСтрокиУсловияРаботы Цикл
						ТекПробегОбщийПоУсловиям = ТекПробегОбщийПоУсловиям
							+ ТекСтрокаУсловиеРаботы.УсловиеРаботы.КоэффициентИзменениеНормыРасхода
							* (ТекСтрокаУсловиеРаботы.КоличествоКмГруз + ТекСтрокаУсловиеРаботы.КоличествоКмПорожний);
						ТекПробегСГрузомПоУсловиям = ТекПробегСГрузомПоУсловиям
							+ ТекСтрокаУсловиеРаботы.УсловиеРаботы.КоэффициентИзменениеНормыРасхода
							* ТекСтрокаУсловиеРаботы.КоличествоКмГруз;
					КонецЦикла;
					
					СтруктураСтроки.Вставить("КоэффициентУРПробегОбщий", ТекПробегОбщийПоУсловиям /
						(ТекЗадание.КоличествоКмГруз + ТекЗадание.КоличествоКмПорожний));
						
					Если ТекЗадание.КоличествоКмГруз > 0 Тогда
						СтруктураСтроки.Вставить("КоэффициентУРПробегСГрузом",
							ТекПробегСГрузомПоУсловиям / ТекЗадание.КоличествоКмГруз);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыРасчета.Вставить("Задание", мсвЗадание);
	
	// формирование таблицы оборудования со всеми нормами
	мсвОборудование = Новый Массив;
	Если НЕ флЭтоТПЛ Тогда
		тблОборудование = Новый ТаблицаЗначений; //промежуточная таблица для объединения оборудования из шапки и из ТЧ Задание
		тблОборудование.Колонки.Добавить("ТС");
		тблОборудование.Колонки.Добавить("Наработка");
		тблОборудование.Колонки.Добавить("НомерСтрокиЗадания");
		Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
			Если ТекПрицеп.ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Оборудование
				И НЕ ТекПрицеп.ТС.Модель.НаличиеТопливногоБака Тогда
				НоваяСтр = тблОборудование.Добавить();
				НоваяСтр.ТС = ТекПрицеп.ТС;
				НоваяСтр.Наработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекПрицеп.СчетчикМЧВыезда, ТекПрицеп.СчетчикМЧВозвращения));
				НоваяСтр.НомерСтрокиЗадания = 0;
			КонецЕсли;
		КонецЦикла;
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() И ПараметрыРасчета.РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
			Для Каждого ТекСтрокаЗадания Из ПараметрыРасчета.Задание Цикл
				Если НЕ ТекСтрокаЗадания.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1)
					И ЗначениеЗаполнено(ТекСтрокаЗадания.КоличествоЧасовПрицеп1)
					И ТекСтрокаЗадания.Прицеп1.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Оборудование
					И НЕ ТекСтрокаЗадания.Прицеп1.Модель.НаличиеТопливногоБака Тогда
					
					НоваяСтр = тблОборудование.Добавить();
					НоваяСтр.ТС = ТекСтрокаЗадания.Прицеп1;
					НоваяСтр.Наработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасовПрицеп1);
					НоваяСтр.НомерСтрокиЗадания = ТекСтрокаЗадания.НомерСтроки;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2)
					И ЗначениеЗаполнено(ТекСтрокаЗадания.КоличествоЧасовПрицеп2)
					И ТекСтрокаЗадания.Прицеп2.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Оборудование
					И НЕ ТекСтрокаЗадания.Прицеп2.Модель.НаличиеТопливногоБака Тогда
					
					НоваяСтр = тблОборудование.Добавить();
					НоваяСтр.ТС = ТекСтрокаЗадания.Прицеп2;
					НоваяСтр.Наработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасовПрицеп2);
					НоваяСтр.НомерСтрокиЗадания = ТекСтрокаЗадания.НомерСтроки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КэшНормыОборудования = Новый Соответствие;
		Для Каждого ТекОборудование Из тблОборудование Цикл
			НормыРасходаГСМОборудование = КэшНормыОборудования.Получить(ТекОборудование.ТС);
			Если НормыРасходаГСМОборудование = Неопределено Тогда
				НормыРасходаГСМОборудование = уатОбщегоНазначения.ПолучитьНормыРасходаГСМ(
					ТекОборудование.ТС,	ТекОборудование.ТС.Модель.ОсновноеТопливо, ПараметрыРасчета);
				КэшНормыОборудования.Вставить(ТекОборудование.ТС, НормыРасходаГСМОборудование);
			КонецЕсли;
				
			СтруктураОборудование = Новый Структура;
			СтруктураОборудование.Вставить("НомерСтрокиЗадания", ТекОборудование.НомерСтрокиЗадания);
			СтруктураОборудование.Вставить("Количество",         ТекОборудование.Наработка);
			СтруктураОборудование.Вставить("НаличиеСпидометра",  ТекОборудование.ТС.Модель.НаличиеСпидометра);
			СтруктураОборудование.Вставить("НормыРасходаГСМ",    НормыРасходаГСМОборудование);
						
			мсвОборудование.Добавить(СтруктураОборудование);
		КонецЦикла;
	КонецЕсли;
	ПараметрыРасчета.Вставить("Оборудование", мсвОборудование);
	
	мсвВыработкаТС = Новый Массив;
	Для Каждого ТекВыработка Из Объект.ВыработкаТС Цикл
		СтруктураСтроки = Новый Структура("ТС, ПараметрВыработки, Количество");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекВыработка);
		мсвВыработкаТС.Добавить(СтруктураСтроки);
	КонецЦикла;
	ПараметрыРасчета.Вставить("ВыработкаТС", мсвВыработкаТС);
	
	мсвРасходГСМ = Новый Массив;
	Для Каждого ТекРасходГСМ Из Объект.РасходГСМ Цикл
		мсвРасходГСМ.Добавить(Новый Структура("Пробег, ТС, ГСМ", ТекРасходГСМ.Пробег, ТекРасходГСМ.ТС, ТекРасходГСМ.ГСМ));
	КонецЦикла;
	ПараметрыРасчета.Вставить("РасходГСМ", мсвРасходГСМ);
	
	Если НЕ флЭтоТПЛ Тогда
		мсвПростои = Новый Массив;
		Для Каждого ТекПростой Из Объект.Простои Цикл
			мсвПростои.Добавить(Новый Структура("ВключенДвигатель, ВремяПростоя", ТекПростой.ВключенДвигатель, ТекПростой.ВремяПростоя));
			
			Если ТекПростой.ВключенДвигатель Тогда
				ПараметрыРасчета.ВремяВПростоеВклДвиг = ПараметрыРасчета.ВремяВПростоеВклДвиг + (ТекПростой.ВремяПростоя - НачалоДня(ТекПростой.ВремяПростоя));
			КонецЕсли;
		КонецЦикла;
		ПараметрыРасчета.Вставить("Простои", мсвПростои);
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
КонецФункции

// Процедура проверяет корректность заполнения ПЛ.
//
// Параметры:
//	Объект - документ-объект Путевой лист;
//	Отказ - сюда передается флаг корректности заполнения;
//	Заголовок - представление документа при выполнении проверки.
//
Процедура ПроверитьЗаполнениеДокумента(Объект, Отказ) Экспорт
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Объект);
	
	флВариантПоставкиСТД = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	флЭтоТПЛ = Ложь;
	Если НЕ флВариантПоставкиСТД
		И ТипЗнч(Объект) = Тип("ДокументОбъект.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если флЭтоТПЛ Тогда
		СтруктураОбязательныхПолей = Новый Структура("Организация, ТС, ДатаВыезда");
		Если Объект.Рассчитан Тогда
			СтруктураОбязательныхПолей.Вставить("ДатаВозвращения");
		КонецЕсли;
		ТранспортноеСредство = Объект.ТС;
		ОдометрВыезда = Объект.ОдометрВыезда;
		ОдометрВозвращения = Объект.ОдометрВозвращения;
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Организация, ТранспортноеСредство, Водитель1, ДатаВыезда, ВидПЛ");
		Если Объект.Рассчитан Тогда
			СтруктураОбязательныхПолей.Вставить("ДатаЗакрытия");
		КонецЕсли;
		ТранспортноеСредство = Объект.ТранспортноеСредство;
		ОдометрВыезда = Объект.СпидометрВыезда;
		ОдометрВозвращения = Объект.СпидометрВозвращения;
	КонецЕсли;
		
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(Объект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Объект.Организация, Объект.Подразделение, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ флЭтоТПЛ И ТранспортноеСредство.ВидМоделиТС <> Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
		ТекстНСТР = НСтр("en='Selected vehicle is not a motor transport (selected equipment)!';ru='Выбранное ТС не является автотранспортом (выбрано оборудование)!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если Объект.Рассчитан Тогда
		ИмяТабличнойЧасти = "РасходГСМ";
		СтруктураОбязательныхПолей = Новый Структура("ТС, ГСМ");
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(Объект, ИмяТабличнойЧасти,
			СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		Если НЕ флЭтоТПЛ Тогда	
			ТекстСообщОшибки = "";
			Если Не Объект.ПроверитьТаблицуВыработкиТС(ТекстСообщОшибки) Тогда
				ТекстНСТР = НСтр("en='Incorrectly completed table of vehicle output: ';ru='Неправильно заполнена таблица выработки ТС: '") + ТекстСообщОшибки;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			ТекстСообщОшибки = "";
			Если Не Объект.ПроверитьТаблицуПростоев(ТекстСообщОшибки) Тогда
				ТекстНСТР = НСтр("en='Incorrectly completed downtime table: ';ru='Неправильно заполнена таблица простоев: '") + ТекстСообщОшибки;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				ТекстСообщОшибки = "";
				ПроверитьТаблицуФОВ(Объект, ТекстСообщОшибки, Отказ);
				Если ЗначениеЗаполнено(ТекстСообщОшибки) Тогда
					ТекстНСТР = НСтр("en='Incorrectly completed table of actually worked time: ';ru='Неправильно заполнена таблица фактически отработанного времени: '") + ТекстСообщОшибки;
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			
			ПроверитьТаблицуЗП(Объект);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДатаВозвращения < Объект.ДатаВыезда Тогда
		ТекстНСТР = НСтр("en='Return date cannot be earlier than the date of departure!';ru='Дата возвращения не может быть раньше даты выезда!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	КонецЕсли;	
	
	// проверка на максимальный суточный пробег по учетной политике
	Если Объект.Рассчитан И Объект.ДатаВозвращения >= Объект.ДатаВыезда Тогда
		флАвтоСоСпидометром = (НЕ ЗначениеЗаполнено(ТранспортноеСредство)) ИЛИ ТранспортноеСредство.Модель.НаличиеСпидометра;
		мДни = (НачалоДня(Объект.ДатаВозвращения) - НачалоДня(Объект.ДатаВыезда))/24/3600 + 1;
		мСуточныйПробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ОдометрВыезда, ОдометрВозвращения) / мДни;
		мМаксимальныйСуточныйПробег = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, 
			ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальныйСуточныйПробег);
		мМаксимальнаяСуточнаяНаработкаМоточасов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальнаяСуточнаяНаработкаМоточасов);
		Если мМаксимальныйСуточныйПробег > 0 И флАвтоСоСпидометром И мСуточныйПробег > мМаксимальныйСуточныйПробег Тогда
			ТекстНСТР = НСтр("en='Daily mileage on waybill';ru='Суточный пробег по путевому листу'") +" (" + мСуточныйПробег + 
				") " + НСтр("en='exceeds the maximum allowed';ru='превышает максимальный разрешенный'") + " (" + мМаксимальныйСуточныйПробег + ")!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		ИначеЕсли мМаксимальнаяСуточнаяНаработкаМоточасов > 0 И (НЕ флАвтоСоСпидометром) 
				И мСуточныйПробег > мМаксимальнаяСуточнаяНаработкаМоточасов Тогда
			ТекстНСТР = НСтр("en='Daily operation time in moto hours by waybill';ru='Суточная наработка в моточасах по путевому листу'") + " (" + мСуточныйПробег
			+ ") " + НСтр("en='exceeds the maximum allowed';ru='превышает максимально разрешенную'") + " (" + мМаксимальнаяСуточнаяНаработкаМоточасов + ")!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// проверка на максимальную продолжительность путевого листа
	мМаксимальнаяПродолжительностьПутЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальнаяПродолжительностьПутЛиста);
	Если мМаксимальнаяПродолжительностьПутЛиста > 0 Тогда
		мДниПЛ = (НачалоДня(Объект.ДатаВозвращения) - НачалоДня(Объект.ДатаВыезда))/24/3600 + 1;
		Если мДниПЛ > мМаксимальнаяПродолжительностьПутЛиста Тогда
			ТекстНСТР = НСтр("en='Duration of waybill';ru='Продолжительность по путевому листу'") + " (" + мДниПЛ
				+ " " + НСтр("en='days.';ru='дн.'") + ") " + НСтр("en='exceeds the maximum allowed';ru='превышает максимально разрешенную'") + " (" + мМаксимальнаяПродолжительностьПутЛиста + " дн.)!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ флЭтоТПЛ Тогда
		мПробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ОдометрВыезда, ОдометрВозвращения);
		Если мПробег < (Объект.НулевойПробегВыезда + Объект.НулевойПробегВозвращения) Тогда
			ТекстНСТР = НСтр("en='Zero mileage on waybill exceeds total mileage!';ru='Нулевой пробег по путевому листу превышает общий пробег!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ флЭтоТПЛ И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "КонтрольКорректностиЗаданияПЛ") Тогда
		флУчетПланФактВремени = НЕ флВариантПоставкиСТД И Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
		
		// проверка попадания времени прибытия в период ПЛ
		Для Каждого ТекСтрока Из Объект.Задание Цикл
			Если НЕ ТекСтрока.Выполнено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекВремяПрибытия = ?(флУчетПланФактВремени, ТекСтрока.ВремяПрибытияФакт, ТекСтрока.ВремяПрибытия);
			ТекВремяУбытия   = ?(флУчетПланФактВремени,   ТекСтрока.ВремяУбытияФакт, ТекСтрока.ВремяУбытия);
			
			Если ЗначениеЗаполнено(ТекВремяПрибытия) Тогда
				Если ТекВремяПрибытия < Объект.ДатаВыезда Тогда
					ТекстНСТР = НСтр("en='Arrival time in the line No.';ru='Время прибытия в строке №'") + ТекСтрока.НомерСтроки +
						" " + НСтр("en='tab ""Job"" is less than departure time';ru='закладки ""Задание"" меньше времени выезда'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
					Отказ = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ДатаВозвращения) И ТекВремяПрибытия > Объект.ДатаВозвращения Тогда
					ТекстНСТР = НСтр("en='Arrival time in the line No.';ru='Время прибытия в строке №'") + ТекСтрока.НомерСтроки +
						" " + НСтр("en='Tab ""Job"" more time return';ru='закладки ""Задание"" больше времени возвращения'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекВремяУбытия) Тогда
				Если ТекВремяУбытия < Объект.ДатаВыезда Тогда
					ТекстНСТР = НСтр("en='Departure time in the line No.';ru='Время убытия в строке №'") + ТекСтрока.НомерСтроки +
						" " + НСтр("en='tab ""Job"" is less than departure time';ru='закладки ""Задание"" меньше времени выезда'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
					Отказ = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ДатаВозвращения) И ТекВремяУбытия > Объект.ДатаВозвращения Тогда
					ТекстНСТР = НСтр("en='Departure time in line №';ru='Время убытия в строке №'") + ТекСтрока.НомерСтроки +
					" " + НСтр("en='Tab ""Job"" more time return';ru='закладки ""Задание"" больше времени возвращения'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// проверка на убытие > прибытия
			Если ЗначениеЗаполнено(ТекВремяУбытия) И ТекВремяПрибытия > ТекВремяУбытия Тогда
				ТекстНСТР = НСтр("en='Arrival time in the line No.';ru='Время прибытия в строке №'") + ТекСтрока.НомерСтроки +
					" " + НСтр("en='tab ""Job"" more than departure time';ru='закладки ""Задание"" больше времени убытия'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Отказ = Истина;
			КонецЕсли;
			
			// отдельная проверка убытие план > прибытия план
			Если флУчетПланФактВремени
				И ЗначениеЗаполнено(ТекСтрока.ВремяУбытия) И ТекСтрока.ВремяПрибытия > ТекСтрока.ВремяУбытия Тогда
				ТекстНСТР = НСтр("en='Arrival plan time in the line No.';ru='Время прибытия (план) в строке №'") + ТекСтрока.НомерСтроки +
					" " + НСтр("en='tab ""Job"" more than departure plan time';ru='закладки ""Задание"" больше времени убытия (план)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ПробегСГрузом_СуммированиеПоЭтапам  = (Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособРасчетаПоНомеруЭтапа = 0);
		ПробегПорожний_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ПробегПорожний.СпособРасчетаПоНомеруЭтапа = 0);
		мПробегОбщийПоЗаданию = 0;
		мЭтапыЗадания = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Задание Цикл
			Если мЭтапыЗадания.Найти(ТекСтрока.НомерЕздки) = Неопределено Тогда
				мЭтапыЗадания.Добавить(ТекСтрока.НомерЕздки);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекНомерЭтапа Из мЭтапыЗадания Цикл
			ТекПробегСГрузом  = 0;
			ТекПробегПорожний = 0;
			
			Для Каждого ТекСтрока Из Объект.Задание Цикл
				Если НЕ ТекСтрока.Выполнено ИЛИ ТекСтрока.НомерЕздки <> ТекНомерЭтапа Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ПробегСГрузом_СуммированиеПоЭтапам И ТекСтрока.НомерЕздки <> 0 Тогда
					ТекПробегСГрузом = Макс(ТекПробегСГрузом, ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок);
				Иначе
					ТекПробегСГрузом = ТекПробегСГрузом + ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
				КонецЕсли;
				
				Если НЕ ПробегПорожний_СуммированиеПоЭтапам И ТекСтрока.НомерЕздки <> 0 Тогда
					ТекПробегПорожний = Макс(ТекПробегПорожний, ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок);
				Иначе
					ТекПробегПорожний = ТекПробегПорожний + ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок;
				КонецЕсли;
				
				// добавляем спецработы
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ДобавочныйПробегСпецработ(ТекСтрока);
			КонецЦикла;
			
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегСГрузом + ТекПробегПорожний;
		КонецЦикла;
		
		Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
			мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ОдометрВыезда, ОдометрВозвращения);
			Если мПробегПоОдометру < мПробегОбщийПоЗаданию Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Пробег по заданию превышает пробег по одометру");
				Отказ = Истина;
			КонецЕсли;
		Иначе //проверка превышения общего времени спецработ по заданию над наработкой по счетчику м/ч
			тблСпецРаботы = Новый ТаблицаЗначений;
			тблСпецРаботы.Колонки.Добавить("НомерСтроки");
			тблСпецРаботы.Колонки.Добавить("НомерЕздки");
			тблСпецРаботы.Колонки.Добавить("СпецРабота");
			тблСпецРаботы.Колонки.Добавить("Количество");
			Для Каждого ТекСтрока Из Объект.Задание Цикл
				Если НЕ ТекСтрока.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				Для СчСпец = 1 По 5 Цикл
					ТекСпецРабота = ТекСтрока["СпецРабота" + СчСпец];
					Если ТекСпецРабота.Временный Тогда
						НоваяСтрока = тблСпецРаботы.Добавить();
						НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
						НоваяСтрока.НомерЕздки = ТекСтрока.НомерЕздки;
						НоваяСтрока.СпецРабота = ТекСтрока["СпецРабота" + СчСпец];
						НоваяСтрока.Количество = ТекСтрока["КоличествоСпецРаботы" + СчСпец];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			тблСпецРаботы.Сортировать("СпецРабота, НомерЕздки, Количество Убыв");
			ПредСпецРабота = Неопределено;
			ПредНомерЕздки = 0;
			мВремяСпецПоЗаданию = 0;
			Для Каждого ТекСтрока Из тблСпецРаботы Цикл
				Если ТекСтрока.СпецРабота.СпособРасчетаПоНомеруЭтапа = 0 ИЛИ ТекСтрока.НомерЕздки = 0 Тогда
					мВремяСпецПоЗаданию = мВремяСпецПоЗаданию + ТекСтрока.Количество;
				Иначе
					Если ТекСтрока.СпецРабота = ПредСпецРабота И ТекСтрока.НомерЕздки = ПредНомерЕздки Тогда
					Иначе
						мВремяСпецПоЗаданию = мВремяСпецПоЗаданию + ТекСтрока.Количество;
					КонецЕсли;
				КонецЕсли;
				
				ПредСпецРабота = ТекСтрока.СпецРабота;
				ПредНомерЕздки = ТекСтрока.НомерЕздки;
			КонецЦикла;
			
			мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ОдометрВыезда, ОдометрВозвращения);
			Если мПробегПоОдометру < мВремяСпецПоЗаданию/3600 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Общее время спецработ по заданию превышает наработку по счетчику м/ч");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// проверки для Проф и Корп
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Если ТранспортноеСредство.ДатаВводаВЭксплуатацию = '00010101'
			ИЛИ ТранспортноеСредство.ДатаВводаВЭксплуатацию > Объект.ДатаВыезда Тогда
			ТекстНСТР = НСтр("en='Vehicle';ru='Транспортное средство'")+" """ + Строка(ТранспортноеСредство)
				+ """ " + НСтр("en='not set in operation on departure date!';ru='не введено в эксплуатацию на дату выезда!'");
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
		Если ТранспортноеСредство.ДатаВыбытия <> '00010101'
			И ТранспортноеСредство.ДатаВыбытия < Объект.ДатаВозвращения Тогда
			ТекстНСТР = НСтр("en='Vehicle';ru='Транспортное средство'")+" """ + Строка(ТранспортноеСредство)
				+ """ " + НСтр("en='decommissioned until the date of return!';ru='выведено из эксплуатации до даты возвращения!'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ флЭтоТПЛ Тогда
			Для Каждого ТекСтрокаПрицеп Из Объект.Прицепы Цикл
				Для Каждого ТекСтрока Из Объект.Задание Цикл
					Если ТекСтрокаПрицеп.ТС = ТекСтрока.Прицеп1 ИЛИ ТекСтрокаПрицеп.ТС = ТекСтрока.Прицеп2 Тогда
						ТекстНСТР= НСтр("en='Trailer/equipment';ru='Прицеп/оборудование'")+" """ + Строка(ТекСтрокаПрицеп.ТС)
							+ """ " + НСтр("en='it should not be both in tabular section ""Trailer"" and in tabular section ""Job""!';ru='не должно одновременно находиться и в табличной части ""Прицепы"", и в табличной части ""Задание""!'");
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
						Отказ = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПредупрежденияРазрешены = Истина;
	Если Объект.ДополнительныеСвойства.Свойство("МодифицированностьДокумента") Тогда
		ПредупрежденияРазрешены	= Объект.ДополнительныеСвойства.МодифицированностьДокумента;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		ЭтоТерминал = Ложь;
	Иначе
		ОбщийМодульуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
		ЭтоТерминал = ОбщийМодульуатОбщегоНазначения_проф.НеобходимоОткрытиеТерминалаПЛприСтарте();
	КонецЕсли;
		
	КонтрольТОиАгрегатов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияПЛприТОилиЗаменыАгрегатов);
	Если НЕ ЭтоТерминал И (КонтрольТОиАгрегатов = Перечисления.уатВидыКонтроля.Запрещать 
		ИЛИ (ПредупрежденияРазрешены И КонтрольТОиАгрегатов = Перечисления.уатВидыКонтроля.Предупреждать)) Тогда
		ЕстьЗапрет = Ложь;
		
		СписокТСиОборудования = Новый СписокЗначений;
		СписокТСиОборудования.Добавить(ТранспортноеСредство);
		Если НЕ флЭтоТПЛ Тогда
			Для Каждого ТекСтрока Из Объект.Прицепы Цикл
				СписокТСиОборудования.Добавить(ТекСтрока.ТС);
			КонецЦикла;
		КонецЕсли;
		
		МассивСтруктурТСиАгрегатов = Неопределено;  
		Если ПроверитьНеобходимостьТОиЗаменыАгрегатовТС(Объект.ДатаВыезда, СписокТСиОборудования, МассивСтруктурТСиАгрегатов) Тогда
			ЕстьЗапрет = Истина;
			Для Каждого ТекСтрока Из МассивСтруктурТСиАгрегатов Цикл
				Если ТекСтрока.Агрегат = Неопределено Тогда
					ТекстНСТР = НСтр("en='For vehicle ""%1"" release term of maintenance: %2';ru='Для ТС ""%1"" наступил срок ТО: %2'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.ТС, ТекСтрока.ВидОбслуживания);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Агрегат) Тогда
					ТекстНСТР = НСтр("en='For vehicle ""%1"" it is necessary to change car part ""%2"" (exp %3)';ru='Для ТС ""%1"" необходимо заменить агрегат ""%2"" (годен до %3)'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.ТС, ТекСтрока.Агрегат, ТекСтрока.ГоденДо);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		Если ЕстьЗапрет И КонтрольТОиАгрегатов = Перечисления.уатВидыКонтроля.Запрещать Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	мДниДоОкончанияДействияДокументовТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовТС);
		
	мДниДоОкончанияДействияДокументовВодителей = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ДниДоОкончанияДействияДокументовВодителей);
		
	КонтрольДокументов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияПЛприНаличииИстекшихДокументов);
	Если НЕ ЭтоТерминал И (КонтрольДокументов = Перечисления.уатВидыКонтроля.Запрещать 
		ИЛИ (ПредупрежденияРазрешены И КонтрольДокументов = Перечисления.уатВидыКонтроля.Предупреждать)) Тогда
		ЕстьЗапрет = Ложь;
		
		ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовТС, ТранспортноеСредство, ЕстьЗапрет);
		
		Если флЭтоТПЛ Тогда
			ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовВодителей, Объект.Водитель, ЕстьЗапрет);
		Иначе
			Для Каждого ТекСтрока Из Объект.Прицепы Цикл
				ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовТС, ТекСтрока.ТС, ЕстьЗапрет);
			КонецЦикла;
			ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовВодителей, Объект.Водитель1, ЕстьЗапрет);
			ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовВодителей, Объект.Водитель2, ЕстьЗапрет);
			ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовВодителей, Объект.Сотрудник1, ЕстьЗапрет);
			ПроверитьДокументыТСВодителя(Объект, мДниДоОкончанияДействияДокументовВодителей, Объект.Сотрудник2, ЕстьЗапрет);
		КонецЕсли;
		Если ЕстьЗапрет И КонтрольДокументов = Перечисления.уатВидыКонтроля.Запрещать Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КонтрольОтсутствияОбязательныхДокументов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияПЛприОтсутствииОбязательныхДокументов);
	Если НЕ ЭтоТерминал И (КонтрольОтсутствияОбязательныхДокументов = Перечисления.уатВидыКонтроля.Запрещать 
		ИЛИ (ПредупрежденияРазрешены И КонтрольОтсутствияОбязательныхДокументов = Перечисления.уатВидыКонтроля.Предупреждать)) Тогда
		ЕстьОтсутствующие = Ложь;
		
		ПроверитьОбязательныеДокументы(Объект, мДниДоОкончанияДействияДокументовТС, мДниДоОкончанияДействияДокументовВодителей, ЕстьОтсутствующие);
		
		Если ЕстьОтсутствующие И КонтрольОтсутствияОбязательныхДокументов = Перечисления.уатВидыКонтроля.Запрещать Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КонтрольЗанятостиТС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияПЛприЗанятостиТС);
	Если НЕ ЭтоТерминал И (КонтрольЗанятостиТС = Перечисления.уатВидыКонтроля.Запрещать 
		ИЛИ (ПредупрежденияРазрешены И КонтрольЗанятостиТС = Перечисления.уатВидыКонтроля.Предупреждать)) Тогда
		ЕстьЗапрет = Ложь;
		МассивДокументов = Новый Массив();
		Если уатОбщегоНазначения.уатТСЗанято(Объект.ДатаВыезда, Объект.ДатаВозвращения, ТранспортноеСредство, МассивДокументов, Объект.Ссылка) Тогда
			ЕстьЗапрет = Истина;
			ТекстНСТР  = НСтр("en='For vehicle ""%1"" on the period of validity of the waybill is formed waybills:';ru='Для ТС ""%1"" на периоде действия путевого листа есть сформированные путевые листы:'");
			Для Каждого ТекДок Из МассивДокументов Цикл
				ТекстНСТР = ТекстНСТР + Символы.ПС + """" + ТекДок + """";
			КонецЦикла;
			
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТранспортноеСредство);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
		КонецЕсли;
		
		МассивСостояний = уатОбщегоНазначения.ПолучитьТекущиеСостоянияТС(ТранспортноеСредство, Объект.ДатаВыезда, Объект.ДатаВозвращения);
		Если МассивСостояний.Количество() <> 0 Тогда
			ЕстьЗапрет = Истина;
			Для Каждого ТекСост Из МассивСостояний Цикл
				ТексСообщения = Нстр("ru = 'Для ТС ""%1"" в периоде действия путевого листа есть действующее состояние ""%2"" установленное документом ""%3"".'");
				ТексСообщения = СтрШаблон(ТексСообщения, ТранспортноеСредство, ТекСост.Состояние, ТекСост.Документ);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТексСообщения);
			КонецЦикла;
		КонецЕсли;
			
		Если НЕ флЭтоТПЛ Тогда
			Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
				Если уатОбщегоНазначения.уатТСЗанято(Объект.ДатаВыезда, Объект.ДатаВозвращения, ТекПрицеп.ТС, МассивДокументов, Объект.Ссылка) Тогда
					ЕстьЗапрет = Истина;
					ТекстНСТР  = НСтр("en='For Trailer / equipment ""%1"" on the period of validity of the waybill is formed waybills:';ru='Для прицепа/оборудования ""%1"" на периоде действия путевого листа есть сформированные путевые листы:'");
					Для Каждого ТекДок Из МассивДокументов Цикл
						ТекстНСТР = ТекстНСТР + Символы.ПС + """" + ТекДок + """";
					КонецЦикла;
					
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекПрицеп.ТС);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
				КонецЕсли;
				
				МассивСостояний = уатОбщегоНазначения.ПолучитьТекущиеСостоянияТС(ТекПрицеп.ТС, Объект.ДатаВыезда, Объект.ДатаВозвращения);
				Если МассивСостояний.Количество() <> 0 Тогда
					ЕстьЗапрет = Истина;
					Для Каждого ТекСост Из МассивСостояний Цикл
						ТексСообщения = Нстр("ru = 'Для прицепа ""%1"" в периоде действия путевого листа есть действующее состояние ""%2"" установленное документом ""%3"".'");
						ТексСообщения = СтрШаблон(ТексСообщения, ТекПрицеп.ТС, ТекСост.Состояние, ТекСост.Документ);
						уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТексСообщения);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьЗапрет И КонтрольЗанятостиТС = Перечисления.уатВидыКонтроля.Запрещать Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КонтрольЗанятостиСотрудников = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияПЛприЗанятостиСотрудника);
	Если НЕ ЭтоТерминал И (КонтрольЗанятостиСотрудников = Перечисления.уатВидыКонтроля.Запрещать 
		ИЛИ (ПредупрежденияРазрешены И КонтрольЗанятостиСотрудников = Перечисления.уатВидыКонтроля.Предупреждать)) Тогда
		ЕстьЗапрет = Ложь;
		
		мсвВодители = Новый Массив;
		Если флЭтоТПЛ Тогда
			мсвВодители.Добавить(Новый Структура("Ссылка, Представление", Объект.Водитель,   НСтр("en='driver';ru='водителя'")));
		Иначе
			мсвВодители.Добавить(Новый Структура("Ссылка, Представление", Объект.Водитель1,  НСтр("en='driver';ru='водителя'")));
			мсвВодители.Добавить(Новый Структура("Ссылка, Представление", Объект.Водитель2,  НСтр("en='driver';ru='водителя'")));
			мсвВодители.Добавить(Новый Структура("Ссылка, Представление", Объект.Сотрудник1, НСтр("en='employee';ru='сотрудника'")));
			мсвВодители.Добавить(Новый Структура("Ссылка, Представление", Объект.Сотрудник2, НСтр("en='employee';ru='сотрудника'")));
		КонецЕсли;
		
		Для Каждого ТекВодитель Из мсвВодители Цикл
			МассивДокументов = Новый Массив;
			Если уатОбщегоНазначения.уатСотрудникЗанят(Объект.ДатаВыезда, Объект.ДатаВозвращения, ТекВодитель.Ссылка, МассивДокументов, Объект.Ссылка) Тогда
				ЕстьЗапрет = Истина;
				ТекстНСТР  = НСтр("en='For %1 ""%2"" on the period of validity of the Waybill is formed documents:';"
					+ "ru='Для %1 ""%2"" на периоде действия Путевого листа есть сформированные документы:'");
				Для Каждого ТекДок Из МассивДокументов Цикл
					ТекстНСТР = ТекстНСТР + Символы.ПС + """" + ТекДок + """";
				КонецЦикла;
				
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекВодитель.Представление, ТекВодитель.Ссылка);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЗапрет И КонтрольЗанятостиСотрудников = Перечисления.уатВидыКонтроля.Запрещать Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на одинаковые условия работы во всех строках по каждому этапу,
	// то есть не должно быть разных условий работ в пределах одного этапа
	Если НЕ флЭтоТПЛ И НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДетальныйУчетУсловийРаботы") Тогда
		тблЕздки = Объект.Задание.Выгрузить().Скопировать();
		тблЕздки.Свернуть("НомерЕздки");
		мсвЕздки = тблЕздки.ВыгрузитьКолонку("НомерЕздки");
		Для Каждого ТекНомерЭтапа Из мсвЕздки Цикл
			Если ТекНомерЭтапа = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УсловиеРаботы1 = Неопределено;
			
			мсвСтрокиЗадания = Объект.Задание.НайтиСтроки(Новый Структура("НомерЕздки", ТекНомерЭтапа));
			Для Каждого ТекСтрокаЗадания Из мсвСтрокиЗадания Цикл
				Если НЕ ТекСтрокаЗадания.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				
				Если УсловиеРаботы1 = Неопределено Тогда
					УсловиеРаботы1 = ТекСтрокаЗадания.УсловиеРаботы;
				ИначеЕсли ТекСтрокаЗадания.УсловиеРаботы <> УсловиеРаботы1 Тогда
					ТекстНСТР = "По этапу №" + ТекНомерЭтапа + " задания присутствуют разные условия работы (в рамках этапа должно быть указано одно значение)!
						|Это может повлиять на корректность расчета нормативного расхода ГСМ!";
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура рассчитывает время по путевому листу
//
Процедура РасчитатьВременныеПараметры(Объект) Экспорт
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект) = Тип("ДокументОбъект.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если флЭтоТПЛ Тогда
		РежимРаботыТС = Справочники.уатРежимыРаботыТС.ПустаяСсылка();
		тблПростои = Новый ТаблицаЗначений;
	Иначе
		РежимРаботыТС = Объект.РежимРаботыТС;
		тблПростои = Объект.Простои.Выгрузить();
	КонецЕсли;
		
	тблРабочееВремя = РасчетВремени(Объект.ДатаВыезда, Объект.ДатаВозвращения, Объект.Организация, РежимРаботыТС, тблПростои);
	
	// В СТД в ПЛ нет ТЧ ФОВ, поэтому для учета работы сотрудников в выходные и праздники используется отдельная переменная объекта
	РассчитатьВыходныеПраздникиДляСТД(тблРабочееВремя, Объект);
		
	тблРабочееВремя.Свернуть("ВидВремени, ПростойСВклДвиг", "Продолжительность");
	
	// работу и ночные часы берем из таблицы рабочего времени, простои тоже
	Объект.мВремяВРаботе = 0;
	Объект.мВремяНочь = 0;
	Объект.мВремяВПростое = 0;
	Объект.мВремяВПростоеСВклДвигателем = 0;
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Объект.мВремяДень = 0;
	КонецЕсли;
	Для Каждого ТекСтрокаРабВремя Из тблРабочееВремя Цикл
		Если ТекСтрокаРабВремя.ВидВремени = Справочники.уатВидыИспользованияРабочегоВремени.Явка Тогда
			Объект.мВремяВРаботе = Объект.мВремяВРаботе + ТекСтрокаРабВремя.Продолжительность;
		ИначеЕсли ТекСтрокаРабВремя.ВидВремени = Справочники.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
			Объект.мВремяНочь = Объект.мВремяНочь + ТекСтрокаРабВремя.Продолжительность;
		ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() И ТекСтрокаРабВремя.ВидВремени = "Дневные" Тогда
			Объект.мВремяДень = Объект.мВремяДень + ТекСтрокаРабВремя.Продолжительность;
		ИначеЕсли ТекСтрокаРабВремя.ВидВремени = Справочники.уатВидыИспользованияРабочегоВремени.Простой Тогда
			Если ТекСтрокаРабВремя.ПростойСВклДвиг Тогда
				Объект.мВремяВПростоеСВклДвигателем = Объект.мВремяВПростоеСВклДвигателем + ТекСтрокаРабВремя.Продолжительность;
			Иначе
				Объект.мВремяВПростое = Объект.мВремяВПростое + ТекСтрокаРабВремя.Продолжительность;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	// общее количество дней по ПЛ
	Объект.мКоличествоДней = (НачалоДня(Объект.ДатаВозвращения) - НачалоДня(Объект.ДатаВыезда))/86400 + 1;
	
	// время в наряде
	Если Объект.ДатаВозвращения - Объект.ДатаВыезда > 86400 Тогда //многодневный ПЛ
		Если ЗначениеЗаполнено(РежимРаботыТС) Тогда
			мПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы - РежимРаботыТС.НачалоРаботы;
			Если РежимРаботыТС.НачалоРаботы <= РежимРаботыТС.КонецРаботы Тогда //дневной
				мПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы - РежимРаботыТС.НачалоРаботы;
			Иначе //ночной
				мПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы + 86400 - РежимРаботыТС.НачалоРаботы;
			КонецЕсли;
		Иначе
			мПродолжительностьРабочегоДня = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ПродолжительностьРабочегоДня") - '00010101';
			Если мПродолжительностьРабочегоДня = 0 Тогда
				мПродолжительностьРабочегоДня = 86400;
			КонецЕсли;
		КонецЕсли;
		
		Объект.мВремяВНаряде = ?(Объект.ДатаВыезда - НачалоДня(Объект.ДатаВыезда) > 86400 - мПродолжительностьРабочегоДня,
			86400 -	(Объект.ДатаВыезда - НачалоДня(Объект.ДатаВыезда)), мПродолжительностьРабочегоДня)
		+ ?(Объект.ДатаВозвращения - НачалоДня(Объект.ДатаВозвращения) > мПродолжительностьРабочегоДня,
			мПродолжительностьРабочегоДня, Объект.ДатаВозвращения - НачалоДня(Объект.ДатаВозвращения))
		+ мПродолжительностьРабочегоДня*((НачалоДня(Объект.ДатаВозвращения) -
			НачалоДня(Объект.ДатаВыезда))/86400 - 1);
	Иначе //однодневный ПЛ
		Объект.мВремяВНаряде = Объект.ДатаВозвращения - Объект.ДатаВыезда;
	КонецЕсли;
КонецПроцедуры

// Процедура рассчитывает кол-во выданного топлива в таб. части Заправки ГСМ и заносит это
// значение в табл. часть Расход ГСМ в реквизит Выдано
Процедура ПересчетВыданногоГСМ(Объект, ТаблицаЗаправкиГСМ = Неопределено) Экспорт
	
	ТочностьОстатковТоплива = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если ТаблицаЗаправкиГСМ = Неопределено Тогда
		ТаблицаЗаправкиГСМ = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	КонецЕсли;
	
	Если НЕ флЭтоТПЛ Тогда
		ТаблицаСливыНаТС = уатОбщегоНазначения.уатПолучитьСливыНаТСДляПЛ(Объект.Ссылка);
	КонецЕсли;
		
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		// выбрали строки заправок для ТС
		мМассивСтрокЗаправкиГСМ = ТаблицаЗаправкиГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чВыдано = 0;
		Для сч = 0 По мМассивСтрокЗаправкиГСМ.Количество() - 1 Цикл
			// если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокЗаправкиГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			// Заправка заданнымГСМ или его аналогом
			// Если заправка была по талонам, то определяем ГСМ талона и кол-во литров по талону
			Если мМассивСтрокЗаправкиГСМ[сч].ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
				мГСМТалон = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(мМассивСтрокЗаправкиГСМ[сч].ГСМ);
				мГСМ		= мГСМТалон.ГСМТалона;
				мКоличество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(мМассивСтрокЗаправкиГСМ[сч].Дата,
					мМассивСтрокЗаправкиГСМ[сч].АЗС, мГСМТалон, мМассивСтрокЗаправкиГСМ[сч].Количество);
			Иначе
				мГСМ		= мМассивСтрокЗаправкиГСМ[сч].ГСМ;
				мКоличество = мМассивСтрокЗаправкиГСМ[сч].Количество;
			КонецЕсли;	
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чВыдано = чВыдано + Окр(мКоличество, ТочностьОстатковТоплива);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флЭтоТПЛ Тогда
			мМассивСтрокСливовНаТС = ТаблицаСливыНаТС.НайтиСтроки(Новый Структура("АЗС", ТекСтрока.ТС));
			Для сч = 0 По мМассивСтрокСливовНаТС.Количество() - 1 Цикл
				Если Не мМассивСтрокСливовНаТС[сч].Ссылка.Проведен Тогда
					Продолжить;
				КонецЕсли;
				
				мГСМ        = мМассивСтрокСливовНаТС[сч].ГСМ;
				мКоличество = мМассивСтрокСливовНаТС[сч].Количество;
				
				Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или мГСМ = ТекСтрока.ГСМ Тогда
					чВыдано = чВыдано + Окр(мКоличество, ТочностьОстатковТоплива);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекСтрока.Выдано <> Окр(чВыдано, 3) Тогда
			ТекСтрока.Выдано = чВыдано;
			Если Объект.Рассчитан И НЕ уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				ТекСтрока.РасходПоФакту = ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано;
				Если НЕ флЭтоТПЛ Тогда
					ТекСтрока.РасходПоФакту = ТекСтрока.РасходПоФакту - ТекСтрока.Сдано;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПересчетВыданногоГСМ()

#КонецОбласти


#Область ПеренесенныеИзМодуляФормыПутевогоЛиста

Процедура ИзменитьВремяЗаправокПЛ(Объект) Экспорт
	Если НЕ Объект.Ссылка.Пустая()
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ПроверятьПопаданиеЗаправкиСливаВПериодПутевогоЛиста")
		= Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.ПерепроводитьЗаправку Тогда
		
		ЗапросЗаправкиПЛ = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатЗаправкаГСМЗаправки.Ссылка,
		|	уатЗаправкаГСМЗаправки.ГСМ,
		|	уатЗаправкаГСМЗаправки.ТС,
		|	ВЫБОР
		|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаправкаПоТалонам
		|ИЗ
		|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		|ГДЕ
		|	уатЗаправкаГСМЗаправки.Ссылка.Проведен
		|	И НЕ уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления
		|	И уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатСливГСМ.Ссылка,
		|	уатСливГСМ.ГСМ,
		|	уатСливГСМ.ТС,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.уатСливГСМ КАК уатСливГСМ
		|ГДЕ
		|	уатСливГСМ.Проведен
		|	И НЕ уатСливГСМ.ПометкаУдаления
		|	И уатСливГСМ.ПутевойЛист = &ПутевойЛист");
		
		ЗапросЗаправкиПЛ.УстановитьПараметр("ДатаНач",     Объект.ДатаВыезда);
		ЗапросЗаправкиПЛ.УстановитьПараметр("ДатаКон",     Объект.ДатаВозвращения);
		ЗапросЗаправкиПЛ.УстановитьПараметр("ПутевойЛист", Объект.Ссылка);
		
		ВыборкаЗаправкиПЛ = ЗапросЗаправкиПЛ.Выполнить().Выбрать();
		Пока ВыборкаЗаправкиПЛ.Следующий() Цикл
			ЗаправкаОбъект = ВыборкаЗаправкиПЛ.Ссылка.ПолучитьОбъект();
			
			флПерепровести = Ложь;
			НЗОстатки = ЗаправкаОбъект.Движения.уатОстаткиГСМнаТС;
			НЗОстатки.Прочитать();
			Для Каждого ТекЗапись Из НЗОстатки Цикл
				Если ТекЗапись.Период < Объект.ДатаВыезда ИЛИ ЗначениеЗаполнено(Объект.ДатаВозвращения) И ТекЗапись.Период > Объект.ДатаВозвращения Тогда
					флПерепровести = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флПерепровести Тогда
				Попытка
					ЗаправкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Организация, ДокСсылка, ДатаВыезда, ДатаВозвращения) Экспорт
	Если ДокСсылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	НастройкаПроверки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ПроверятьПопаданиеЗаправкиСливаВПериодПутевогоЛиста");
	Если НастройкаПроверки = Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.НеПроверять
		ИЛИ НастройкаПроверки = Перечисления.уатВидыПроверкиПопаданияЗаправкиВПериодПЛ.ПерепроводитьЗаправку Тогда
		Возврат Истина;
	КонецЕсли;
			
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатЗаправкаГСМЗаправки.Ссылка
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка.Проведен
	|	И НЕ уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления
	|	И уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
	|	И (уатЗаправкаГСМЗаправки.Дата > &ДатаКон
	|			ИЛИ уатЗаправкаГСМЗаправки.Дата < &ДатаНач)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСливГСМ.Ссылка
	|ИЗ
	|	Документ.уатСливГСМ КАК уатСливГСМ
	|ГДЕ
	|	уатСливГСМ.Проведен
	|	И НЕ уатСливГСМ.ПометкаУдаления
	|	И уатСливГСМ.ПутевойЛист = &ПутевойЛист
	|	И (уатСливГСМ.Дата > &ДатаКон
	|			ИЛИ уатСливГСМ.Дата < &ДатаНач)");
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаВыезда);
	Запрос.УстановитьПараметр("ДатаКон", ?(ДатаВозвращения < ДатаВыезда, ДатаВыезда, ДатаВозвращения));
	Запрос.УстановитьПараметр("ПутевойЛист", ДокСсылка);
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

Функция ПолучитьЗаправкиДляПЛ(ДокСсылка) Экспорт
	тблЗаправки = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(ДокСсылка);
	мсвЗаправок = уатОбщегоНазначенияСервер.ПреобразоватьТаблицуВМассивСтрок(тблЗаправки);
	
	Возврат мсвЗаправок;
КонецФункции

Процедура ЗаполнитьГСМПоGPSСервер(Объект, ПараметрыРасчетаГСМ, РезультатСтруктура, флВыезд = Ложь) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийМодульуатЗащищенныеФункцииСервер_проф = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_проф");
	
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если флЭтоТПЛ Тогда
		ТранспортноеСредство = Объект.ТС;
	Иначе
		ТранспортноеСредство = Объект.ТранспортноеСредство;
	КонецЕсли;
		
	ОтказЗаполнениеРасходаПоGPS = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВыезда) Тогда 
		ТекстНСТР = НСтр("en='Specify date of departure';ru='Необходимо указать дату выезда'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.ДатаВыезда",, ОтказЗаполнениеРасходаПоGPS);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда 
		ТекстНСТР = НСтр("en='It is necessary to specify the return date';ru='Необходимо указать дату возвращения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.ДатаВозвращения",, ОтказЗаполнениеРасходаПоGPS);
	КонецЕсли;
	
	Если ОтказЗаполнениеРасходаПоGPS Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасхода Из Объект.РасходГСМ Цикл 
		ТекОсновноеТопливо = СтрокаРасхода.ТС.Модель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС) И ЗначениеЗаполнено(ТекОсновноеТопливо) И СтрокаРасхода.ГСМ = ТекОсновноеТопливо Тогда
			Отказ = Ложь;
			Если Константы.уатИспользоватьOmnicomm.Получить()
				И СтрокаРасхода.ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm Тогда
				ТекстОшибки = "";
				
				ТС = Новый ТаблицаЗначений();
				ТС.Колонки.Добавить("ТС");
				ТС.Колонки.Добавить("ИдВСистемеНавигации");
				НоваяСтрока = ТС.Добавить();
				НоваяСтрока.ТС = СтрокаРасхода.ТС;
				НоваяСтрока.ИдВСистемеНавигации = СтрокаРасхода.ТС.ИДвСистемеНавигации;
				
				Omnicomm_ЧасовойПоясПоПодразделению = Ложь;
				Omnicomm_ЧасовойПояс = 3;
				
				ПараметрыOmnicomm = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Получить().Получить();
				Если Не ПараметрыOmnicomm = Неопределено Тогда 
					Если ПараметрыOmnicomm.Свойство("ЧасовойПоясПоПодразделению") Тогда
						Omnicomm_ЧасовойПоясПоПодразделению = ПараметрыOmnicomm.ЧасовойПоясПоПодразделению;
					КонецЕсли;
					
					Если ПараметрыOmnicomm.Свойство("ЧасовойПояс") Тогда
						Omnicomm_ЧасовойПояс = ПараметрыOmnicomm.ЧасовойПояс;
					КонецЕсли;
				КонецЕсли;
				
				Если Omnicomm_ЧасовойПоясПоПодразделению Тогда 
					Omnicomm_ЧасовойПояс = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
					СтрокаРасхода.ТС.Подразделение,
					ПланыВидовХарактеристик.уатПраваИНастройки.КорректировкаВремениДляЗагрузкиOmnicomm
					);
				КонецЕсли;
				
				ТаблицаСобытий = ОбщийМодульуатЗащищенныеФункцииСервер_проф.ПолучитьДанныеПоТСOmnicomm(
					Объект.ДатаВыезда, 
					Объект.ДатаВозвращения, 
					ТС, 
					ТекстОшибки, 
					Новый Структура("КорректировкаВремени", Omnicomm_ЧасовойПояс),
					СтрокаРасхода.ТС.УчетнаяЗаписьСистемыМониторинга
					);
				
				Если ТаблицаСобытий = 1 Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Иначе
					Если флВыезд Тогда
						Если ТаблицаСобытий.Количество() > 0 Тогда
							СтрокаРасхода.ОстатокПриВыезде = ТаблицаСобытий[0]["startFuelLevel"];
						КонецЕсли;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд", СтрокаРасхода.ОстатокПриВыезде)
						КонецЕсли
					Иначе
						СтрокаРасхода.Активен       = Истина;
						СтрокаРасхода.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Отказ);
						СтрокаРасхода.РасходПоGPS   = ТаблицаСобытий.Итог("fuelRate");
						
						Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPSОстаток Тогда
							Если ТаблицаСобытий.Количество() > 0 Тогда
								СтрокаРасхода.ОстатокПриВозвращении = ТаблицаСобытий[ТаблицаСобытий.Количество()-1]["endFuelLevel"];
							КонецЕсли;
							
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.ОстатокПриВозвращении + СтрокаРасхода.Выдано;
						
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоФакту - СтрокаРасхода.Сдано;
							КонецЕсли;
						Иначе
							Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
							ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
							КонецЕсли;
						
							СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано;
							
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВозвращении - СтрокаРасхода.Сдано;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", СтрокаРасхода.ОстатокПриВозвращении)
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
							
			ИначеЕсли Константы.уатИспользоватьСКАУТ.Получить()
				И СтрокаРасхода.ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSСКАУТ = ОбщийМодульуатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаПоТССКАУТЧерезВебСервис(Объект.ДатаВыезда, 
					Объект.ДатаВозвращения, СтрокаРасхода.ТС,
					ТекстОшибки, СтрокаРасхода.ТС.УчетнаяЗаписьСистемыМониторинга);
				
				Если ТипЗнч(СтруктураДанныхТСGPSСКАУТ) <> Тип("Структура") Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Иначе 
					Если флВыезд Тогда
						СтрокаРасхода.ОстатокПриВыезде = СтруктураДанныхТСGPSСКАУТ.НачальныйОстаток;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд", СтрокаРасхода.ОстатокПриВыезде)
						КонецЕсли
					Иначе
						СтрокаРасхода.Активен       = Истина;
						СтрокаРасхода.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Отказ);
						СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSСКАУТ.РасходТоплива;
						
						Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPSОстаток Тогда
							СтрокаРасхода.ОстатокПриВозвращении = СтруктураДанныхТСGPSСКАУТ.КонечныйОстаток;
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.ОстатокПриВозвращении + СтрокаРасхода.Выдано;
							
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоФакту - СтрокаРасхода.Сдано;
							КонецЕсли;
						Иначе
							Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
							ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
							КонецЕсли;
							
							СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано;
							
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВозвращении - СтрокаРасхода.Сдано;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", СтрокаРасхода.ОстатокПриВозвращении)
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьWialon.Получить()
				И СтрокаРасхода.ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSWialon = ОбщийМодульуатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаДляПЛПоТСWialon(Объект.ДатаВыезда, 
					Объект.ДатаВозвращения, СтрокаРасхода.ТС,
					ТекстОшибки, СтрокаРасхода.ТС.УчетнаяЗаписьСистемыМониторинга, флВыезд);
				
				Если ТипЗнч(СтруктураДанныхТСGPSWialon) <> Тип("Структура") Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Иначе
					Если флВыезд Тогда
						СтрокаРасхода.ОстатокПриВыезде = СтруктураДанныхТСGPSWialon.НачальныйОстаток;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд", СтрокаРасхода.ОстатокПриВыезде)
						КонецЕсли
					Иначе
						СтрокаРасхода.Активен       = Истина;
						СтрокаРасхода.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Отказ);
						СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSWialon.РасходТоплива;
						
						Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPSОстаток Тогда
							СтрокаРасхода.ОстатокПриВозвращении = СтруктураДанныхТСGPSWialon.КонечныйОстаток;
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.ОстатокПриВозвращении + СтрокаРасхода.Выдано;
						
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоФакту - СтрокаРасхода.Сдано;
							КонецЕсли;
						Иначе
							Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
							ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
							КонецЕсли;
							
							СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано;
							
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВозвращении - СтрокаРасхода.Сдано;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", СтрокаРасхода.ОстатокПриВозвращении)
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Константы.уатИспользоватьАвтоГРАФ.Получить()
				И СтрокаРасхода.ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
				ТекстОшибки = "";
				
				СтруктураДанныхТСGPSАвтоГРАФ = ОбщийМодульуатЗащищенныеФункцииСервер_проф.ПолучитьРасходТопливаДляПЛПоТСАвтоГРАФ(Объект.ДатаВыезда, 
					Объект.ДатаВозвращения, СтрокаРасхода.ТС,
					ТекстОшибки, СтрокаРасхода.ТС.УчетнаяЗаписьСистемыМониторинга);
				
				Если ТипЗнч(СтруктураДанныхТСGPSАвтоГРАФ) <> Тип("Структура") Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Иначе 
					Если флВыезд Тогда
						СтрокаРасхода.ОстатокПриВыезде = СтруктураДанныхТСGPSАвтоГРАФ.НачальныйОстаток;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд", СтрокаРасхода.ОстатокПриВыезде)
						КонецЕсли
					Иначе
						СтрокаРасхода.Активен       = Истина;
						СтрокаРасхода.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Отказ);
						СтрокаРасхода.РасходПоGPS   = СтруктураДанныхТСGPSАвтоГРАФ.РасходТоплива;
						
						Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPSОстаток Тогда
							СтрокаРасхода.ОстатокПриВозвращении = СтруктураДанныхТСGPSАвтоГРАФ.КонечныйОстаток;
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.ОстатокПриВозвращении + СтрокаРасхода.Выдано;
						
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоФакту - СтрокаРасхода.Сдано;
							КонецЕсли;
						Иначе
							Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
							ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
								СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
							КонецЕсли;
							
							СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано;
							
							Если НЕ флЭтоТПЛ Тогда
								СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВозвращении - СтрокаРасхода.Сдано;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", СтрокаРасхода.ОстатокПриВозвращении)
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				// ITOB +++
			ИначеЕсли Константы.уатИспользоватьЦСМ.Получить()
				И СтрокаРасхода.ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы._1СЦСМ Тогда				
				
				Если РезультатСтруктура = Неопределено Тогда
					ТекстОшибки = "";
					ОбщийМодульItobИнтерфейсДанныхМониторинга = ОбщегоНазначения.ОбщийМодуль("ItobИнтерфейсДанныхМониторинга");
					ДанныеПоТопливу = ОбщийМодульItobИнтерфейсДанныхМониторинга.СводныеДанныеОДвиженииИРасходеТопливаОбъектаМониторинга(СтрокаРасхода.ТС, 
					Объект.ДатаВыезда,
					Объект.ДатаВозвращения,
					ТекстОшибки);				
					Если ДанныеПоТопливу = Ложь 
						ИЛИ НЕ ТипЗнч(ДанныеПоТопливу) = Тип("Структура") 
						ИЛИ НЕ ПустаяСтрока(ТекстОшибки) Тогда
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						Продолжить;
					КонецЕсли;
					
					ФактРасходТоплива = ДанныеПоТопливу.РасходТоплива;
					ОстатокПриВыезде  = ДанныеПоТопливу.УровеньТопливаНачало;
				Иначе
					ФактРасходТоплива = РезультатСтруктура.РасходТоплива;
					ОстатокПриВыезде  = РезультатСтруктура.ОстатокТопливаВыезд;
				КонецЕсли;
				
				Если ФактРасходТоплива = Неопределено Тогда
					ТекстНСТР = НСтр("en='Fuel consumption is not defined!';ru='Расход топлива не определен!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Иначе
					Если флВыезд Тогда
						СтрокаРасхода.ОстатокПриВыезде = ОстатокПриВыезде;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд", СтрокаРасхода.ОстатокПриВыезде)
						КонецЕсли
					Иначе
						
						СтрокаРасхода.Активен       = Истина;
						СтрокаРасхода.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, СтрокаРасхода.ТС, СтрокаРасхода.ГСМ, Отказ);
						СтрокаРасхода.РасходПоGPS   = ФактРасходТоплива;
						
						Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда 
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоНорме;
						ИначеЕсли Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
							СтрокаРасхода.РасходПоФакту = СтрокаРасхода.РасходПоGPS;
						КонецЕсли;
						
						СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВыезде - СтрокаРасхода.РасходПоФакту + СтрокаРасхода.Выдано;
						
						Если НЕ флЭтоТПЛ Тогда
							СтрокаРасхода.ОстатокПриВозвращении = СтрокаРасхода.ОстатокПриВозвращении - СтрокаРасхода.Сдано;
						КонецЕсли;
						
						СтрокаРасхода.Экономия = СтрокаРасхода.РасходПоНорме - СтрокаРасхода.РасходПоФакту;
						
						Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда
							ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", СтрокаРасхода.ОстатокПриВозвращении);
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
				// ITOB ---

			ИначеЕсли ЗначениеЗаполнено(СтрокаРасхода.ТС.ИспользуемаяСистемаGPS) Тогда
				ТекстОшибки = "";
				
				ТС = Новый ТаблицаЗначений();
				ТС.Колонки.Добавить("ТС");
				ТС.Колонки.Добавить("ИдВСистемеНавигации");
				ТС.Колонки.Добавить("Ссылка");
				
				НоваяСтрока = ТС.Добавить();
				НоваяСтрока.ТС                  = СтрокаРасхода.ТС;
				НоваяСтрока.ИдВСистемеНавигации = СтрокаРасхода.ТС.ИДвСистемеНавигации;
				НоваяСтрока.Ссылка              = СтрокаРасхода.ТС.Ссылка;
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ЭтотОбъект", Новый Структура("Объект, ОстатокТопливаВыезд, ОстатокТопливаВозврат", Объект, 0, 0));
				ДопПараметры.Вставить("ПараметрыРасчетаГСМ", ПараметрыРасчетаГСМ);
				ДопПараметры.Вставить("Отказ", Отказ);
				ДопПараметры.Вставить("флВыезд", флВыезд);
				ДопПараметры.Вставить("ИспользуемаяСистемаGPS",
					?(ТипЗнч(СтрокаРасхода.ТС.ИспользуемаяСистемаGPS) = Тип("Строка"),
					СтрокаРасхода.ТС.ИспользуемаяСистемаGPS,
					СтрокаРасхода.ТС.ИспользуемаяСистемаGPS.НаименованиеПС));
						
				уатРаботаСРасширениями.ПСМ_ЗаполнитьГСМПоGPS(
					СтрокаРасхода,
					Объект.ДатаВыезда, 
					Объект.ДатаВозвращения, 
					ТС, 
					ТекстОшибки,
					ДопПараметры
					);
					
					Если ТранспортноеСредство = СтрокаРасхода.ТС И ТекОсновноеТопливо = СтрокаРасхода.ГСМ Тогда	
						ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВыезд",   ДопПараметры.ЭтотОбъект.ОстатокТопливаВыезд);
						ПараметрыРасчетаГСМ.Вставить("ОстатокТопливаВозврат", ДопПараметры.ЭтотОбъект.ОстатокТопливаВозврат);
					КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяПолучениеДанныхПоGPS(Объект, НаименованиеССМ) Экспорт
	
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если флЭтоТПЛ Тогда
		ТранспортноеСредство = Объект.ТС;
	Иначе
		ТранспортноеСредство = Объект.ТранспортноеСредство;
	КонецЕсли;
	
	ТребуетсяПолучениеДанныхПоGPS = Ложь;
	
	СтруктураОбъектовНастроек = Новый Структура();
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТранспортноеСредство.Подразделение);
	КонецЕсли;
	
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	
	АвтообновлениеПЛпоGPS = уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS", ПраваОрганизации);
	
	Если Не АвтообновлениеПЛпоGPS Тогда 
		Возврат ТребуетсяПолучениеДанныхПоGPS;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.уатИспользоватьOmnicomm.Получить()
		И ТранспортноеСредство.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm Тогда
		ТребуетсяПолучениеДанныхПоGPS = Истина;
		НаименованиеССМ = Строка(ТранспортноеСредство.ИспользуемаяСистемаGPS);
		
	ИначеЕсли Константы.уатИспользоватьСКАУТ.Получить()
		И ТранспортноеСредство.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ Тогда
		ТребуетсяПолучениеДанныхПоGPS = Истина;
		НаименованиеССМ = Строка(ТранспортноеСредство.ИспользуемаяСистемаGPS);
		
	ИначеЕсли Константы.уатИспользоватьWialon.Получить()
		И ТранспортноеСредство.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon Тогда
		ТребуетсяПолучениеДанныхПоGPS = Истина;
		НаименованиеССМ = Строка(ТранспортноеСредство.ИспользуемаяСистемаGPS);
		
	ИначеЕсли Константы.уатИспользоватьАвтоГРАФ.Получить()
		И ТранспортноеСредство.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
		ТребуетсяПолучениеДанныхПоGPS = Истина;
		НаименованиеССМ = Строка(ТранспортноеСредство.ИспользуемаяСистемаGPS);
		
	ИначеЕсли Константы.уатИспользоватьЦСМ.Получить()
		И ТранспортноеСредство.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы._1СЦСМ Тогда
		ТребуетсяПолучениеДанныхПоGPS = Истина;
		НаименованиеССМ = Строка(ТранспортноеСредство.ИспользуемаяСистемаGPS);
	КонецЕсли;
	
	Возврат ТребуетсяПолучениеДанныхПоGPS;
	
КонецФункции // ТребуетсяПолучениеДанныхПоGPS()

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция рассчитывает время в работе за указанный день
// Возвращает значение в секундах
Функция СтруктураВремениЗаДень(ДатаВыезда, ДатаВозвращения, НомерДня, РежимРаботыТС, Простои,
	Знач ПродолжительностьРабочегоДня, Знач ПродолжительностьОбеда, ВремяДоОбеда, флОбедУжеРассчитан = Ложь)
	
	флРежимРаботыНочной = (РежимРаботыТС.НачалоРаботы > РежимРаботыТС.КонецРаботы);
	флОднодневныйПЛ = (ДатаВозвращения - ДатаВыезда) <= 86400;
	флОднодневныйНочнойПЛ = флОднодневныйПЛ И НачалоДня(ДатаВыезда) <> НачалоДня(ДатаВозвращения);
	КоличествоДней = (НачалоДня(ДатаВозвращения) - НачалоДня(ДатаВыезда))/86400 + 1;
	
	Если ЗначениеЗаполнено(РежимРаботыТС) Тогда
		Если флРежимРаботыНочной Тогда
			ПродолжительностьРабочегоДня = 86400 - (РежимРаботыТС.НачалоРаботы - РежимРаботыТС.КонецРаботы);
		Иначе
			ПродолжительностьРабочегоДня = РежимРаботыТС.КонецРаботы - РежимРаботыТС.НачалоРаботы;
		КонецЕсли;
		Если ЗначениеЗаполнено(РежимРаботыТС.Обед) Тогда //заполнена продолжительность обеда
			ПродолжительностьОбеда = РежимРаботыТС.Обед - '00010101';
		ИначеЕсли РежимРаботыТС.НачалоОбеда > РежимРаботыТС.КонецОбеда Тогда //это ночной обед
			ПродолжительностьОбеда = (РежимРаботыТС.КонецОбеда + 86400) - РежимРаботыТС.НачалоОбеда;
		Иначе //типичный дневной обед
			ПродолжительностьОбеда = РежимРаботыТС.КонецОбеда - РежимРаботыТС.НачалоОбеда;
		КонецЕсли;
	КонецЕсли;
	
	ТекДата = НачалоДня(ДатаВыезда) + 86400*(НомерДня-1);
	
	//простои
	тблПростои = РасчетПростоевНаДень(ТекДата, Простои);
	
	// обеденные часы
	тблОбеды = РасчетОбедовНаДень(ТекДата, РежимРаботыТС, ПродолжительностьОбеда, ВремяДоОбеда, тблПростои, ДатаВыезда, ДатаВозвращения, флОднодневныйНочнойПЛ);
	
	// обеды пересекаются простоями всегда
	ПересечениеИнтервалов(тблОбеды, тблПростои);
	
	// Простои пересекаются обедами, если в простое установлен флаг УменьшатьПростойНаВремяОбеда
	ПересечениеИнтервалов(тблПростои, тблОбеды,, Истина);
	
	тблРабочееВремя = Новый ТаблицаЗначений;
	тблРабочееВремя.Колонки.Добавить("ВидВремени");
	тблРабочееВремя.Колонки.Добавить("Начало");
	тблРабочееВремя.Колонки.Добавить("Конец");
	тблРабочееВремя.Колонки.Добавить("Продолжительность");
	
	Если флОднодневныйПЛ И НЕ флОднодневныйНочнойПЛ Тогда //однодневные дневные
		// рабочий интервал
		Если ДатаВозвращения >= НачалоДня(ДатаВозвращения) + 6*3600 И ДатаВыезда <= НачалоДня(ДатаВыезда) + 22*3600 Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Явка";
			НоваяСтрока.Начало = ДатаВыезда;
			НоваяСтрока.Конец = ДатаВозвращения;
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
		
		// часть ночного интервала от 0:00 до 6:00
		Если ДатаВыезда < НачалоДня(ДатаВыезда) + 6*3600 Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
			НоваяСтрока.Начало = ДатаВыезда;
			НоваяСтрока.Конец = Мин(ДатаВозвращения, НачалоДня(ДатаВыезда) + 6*3600);
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
		// часть ночного интервала от 22:00 до 0:00
		Если ДатаВозвращения > НачалоДня(ДатаВозвращения) + 22*3600 Тогда
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
			НоваяСтрока.Начало = Макс(ДатаВыезда, НачалоДня(ДатаВыезда) + 22*3600);
			НоваяСтрока.Конец = ДатаВозвращения;
			НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
		КонецЕсли;
				
	Иначе //многодневные и однодневные ночные
		Если НомерДня = 1 Тогда //первый день, считаем рабочее время без учета режима работы ТС
			// рабочий интервал
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Явка";
			НоваяСтрока.Начало = ДатаВыезда;
			Если ДатаВыезда - НачалоДня(ДатаВыезда) + ПродолжительностьРабочегоДня > 86400 Тогда // продолжительность рабочего времени по настройкам меньше промежутка от выезда до конца дня
				НоваяСтрока.Конец = КонецДня(ДатаВыезда)+1;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			Иначе
				НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня;
				НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
			КонецЕсли;
			КонецРаботы = НоваяСтрока.Конец;
			
			// часть ночного интервала от 0:00
			Если ДатаВыезда < НачалоДня(ДатаВыезда) + 6*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
				НоваяСтрока.Начало = ДатаВыезда;
				НоваяСтрока.Конец = НачалоДня(ДатаВыезда) + 6*3600;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
			
			// часть ночного интервала до 0:00
			Если ДатаВыезда + ПродолжительностьРабочегоДня > НачалоДня(ДатаВыезда) + 22*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
				НоваяСтрока.Начало = Макс(ДатаВыезда, НачалоДня(ДатаВыезда) + 22*3600);
				НоваяСтрока.Конец = Мин(ДатаВыезда + ПродолжительностьРабочегоДня, КонецДня(ДатаВыезда)+1);
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
			
		ИначеЕсли НомерДня = КоличествоДней Тогда //последний день, считаем рабочее время без учета режима работы ТС
			// рабочий интервал
			НоваяСтрока = тблРабочееВремя.Добавить();
			НоваяСтрока.ВидВремени = "Явка";
			НоваяСтрока.Конец = ДатаВозвращения;
			Если ДатаВозвращения - НачалоДня(ДатаВозвращения) < ПродолжительностьРабочегоДня Тогда // продолжительность рабочего времени по настройкам меньше промежутка от начала дня возвращения до времени возвращения
				НоваяСтрока.Начало = НачалоДня(ДатаВозвращения);
				НоваяСтрока.Продолжительность = ДатаВозвращения - НачалоДня(ДатаВозвращения);
			Иначе
				НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня;
				НоваяСтрока.Начало = НоваяСтрока.Конец - ПродолжительностьРабочегоДня;
			КонецЕсли;
			
			// часть ночного интервала от 0:00
			Если ДатаВозвращения - ПродолжительностьРабочегоДня < НачалоДня(ДатаВозвращения) + 6*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
				НоваяСтрока.Начало = Макс(ДатаВозвращения - ПродолжительностьРабочегоДня, НачалоДня(ДатаВозвращения));
				НоваяСтрока.Конец = Мин(НачалоДня(ДатаВозвращения) + 6*3600, ДатаВозвращения);
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
			
			// часть ночного интервала до 0:00
			Если ДатаВозвращения > НачалоДня(ДатаВозвращения) + 22*3600 Тогда
				НоваяСтрока = тблРабочееВремя.Добавить();
				НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
				НоваяСтрока.Начало = НачалоДня(ДатаВозвращения) + 22*3600;
				НоваяСтрока.Конец = ДатаВозвращения;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			КонецЕсли;
			
		Иначе //промежуточные дни
			Если ЗначениеЗаполнено(РежимРаботыТС) Тогда //режим работы указан
				Если флРежимРаботыНочной Тогда
					// часть рабочего интервала от 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Явка";
					НоваяСтрока.Начало = НачалоДня(ТекДата);
					НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботыТС.КонецРаботы - '00010101');
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					
					// часть рабочего интервала до 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Явка";
					НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботыТС.НачалоРаботы - '00010101');
					НоваяСтрока.Конец = КонецДня(ТекДата) + 1;
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					
					// часть ночного интервала от 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
					НоваяСтрока.Начало = НачалоДня(ТекДата);
					Если (РежимРаботыТС.КонецРаботы - '00010101') >= 6*3600 Тогда //конец интервала по режиму больше 6:00
						НоваяСтрока.Продолжительность = 6*3600;
					Иначе //конец интервала по режиму меньше 6:00
						НоваяСтрока.Продолжительность = (РежимРаботыТС.КонецРаботы - '00010101');
					КонецЕсли;
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					
					// часть ночного интервала до 0:00
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
					НоваяСтрока.Конец = КонецДня(ТекДата) + 1;
					Если (РежимРаботыТС.НачалоРаботы - '00010101') <= 22*3600 Тогда //начало интервала по режиму меньше 22:00
						НоваяСтрока.Продолжительность = 2*3600;
					Иначе //начало интервала по режиму больше 22:00
						НоваяСтрока.Продолжительность = 24*3600 - (РежимРаботыТС.НачалоРаботы - '00010101');
					КонецЕсли;
					НоваяСтрока.Начало = НоваяСтрока.Конец - НоваяСтрока.Продолжительность;
					
				Иначе
					// рабочий интервал
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Явка";
					НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботыТС.НачалоРаботы - '00010101');
					НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботыТС.КонецРаботы - '00010101');
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					
					// часть ночного интервала от 0:00
					Если (РежимРаботыТС.НачалоРаботы - '00010101') < 6*3600 Тогда
						НоваяСтрока = тблРабочееВремя.Добавить();
						НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
						НоваяСтрока.Начало = НачалоДня(ТекДата);
						НоваяСтрока.Продолжительность = 6*3600 - (РежимРаботыТС.НачалоРаботы - '00010101');
						НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					КонецЕсли;
					
					// часть ночного интервала до 0:00
					Если (РежимРаботыТС.КонецРаботы - '00010101') > 22*3600 Тогда
						НоваяСтрока = тблРабочееВремя.Добавить();
						НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
						НоваяСтрока.Начало = НачалоДня(ТекДата) + 22*3600;
						НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботыТС.КонецРаботы - '00010101');
						НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Рабочий интервал
				// !Внимание! ночной интервал для промежуточных дней для неуказанного режима работы не заполняем
				// если продолжительность раб. дня захватывает ночные (больше 16), то заполняем
				Если ПродолжительностьРабочегоДня > 57600 Тогда
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Явка";
					НоваяСтрока.Продолжительность = 57600;
					//НоваяСтрока.Начало = НачалоДня(ТекДата) + 6*3600;
					//НоваяСтрока.Конец = НачалоДня(ТекДата) + 22*3600;
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "РаботаНочныеЧасы";
					НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня - 57600;
				Иначе
					НоваяСтрока = тблРабочееВремя.Добавить();
					НоваяСтрока.ВидВремени = "Явка";
					НоваяСтрока.Продолжительность = ПродолжительностьРабочегоДня;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// исключаем из всего рабочего времени ночные - получаем дневное время
	тблНочные = тблРабочееВремя.Скопировать();
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблНочные Цикл
		Если ТекСтрока.ВидВремени <> "РаботаНочныеЧасы" Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблНочные.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	ПересечениеИнтервалов(тблРабочееВремя, тблНочные, "Явка");
	
	// удаляем строки с нулевой продолжительностью
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблНочные Цикл
		Если ТекСтрока.Продолжительность = 0 Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблНочные.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблРабочееВремя Цикл
		Если ТекСтрока.Продолжительность = 0 Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблРабочееВремя.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
		
	// исключение обеда и простоев из дневного и ночного времени
	ПересечениеИнтервалов(тблРабочееВремя, тблПростои);
	ПересечениеИнтервалов(тблРабочееВремя, тблОбеды);
	
	// удаляем строки с нулевой продолжительностью
	мсвСтрокиУдалить = Новый Массив;
	Для Каждого ТекСтрока Из тблНочные Цикл
		Если ТекСтрока.Продолжительность = 0 Тогда
			мсвСтрокиУдалить.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблНочные.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	// пересчет итоговой продолжительности
	ВремяДневное = 0;
	ВремяНочное = 0;
	Для Каждого ТекСтрока Из тблРабочееВремя Цикл
		Если ТекСтрока.ВидВремени = "Явка" Тогда
			ВремяДневное = ВремяДневное + ТекСтрока.Продолжительность;
		ИначеЕсли ТекСтрока.ВидВремени = "РаботаНочныеЧасы" Тогда
			ВремяНочное = ВремяНочное + ТекСтрока.Продолжительность;
		КонецЕсли;
	КонецЦикла;
	ВремяПростои = 0;
	ВремяПростоиСВклДвиг = 0;
	Для Каждого ТекПростой Из тблПростои Цикл
		ВремяПростои = ВремяПростои + ТекПростой.Продолжительность;
		Если ТекПростой.ПростойСВклДвиг Тогда
			ВремяПростоиСВклДвиг = ВремяПростоиСВклДвиг + ТекПростой.Продолжительность;
		КонецЕсли;
	КонецЦикла;
	
	// доп. обработка
	Если тблРабочееВремя.Количество() > 0 Тогда
		Если НЕ ЗначениеЗаполнено(тблРабочееВремя[0].Начало) Тогда //промежуточный день многодневного ПЛ, считаем что простой/обед полностью входят в рабочий интервал
			Если ВремяДневное + ВремяНочное > ВремяДоОбеда Тогда
				Если флРежимРаботыНочной Тогда
					ВремяНочное = ВремяНочное - тблОбеды.Итог("Продолжительность");
				Иначе
					ВремяДневное = ВремяДневное - тблОбеды.Итог("Продолжительность");
				КонецЕсли;
			КонецЕсли;
			ВремяДневное = ВремяДневное - ВремяПростои;
		ИначеЕсли НЕ ЗначениеЗаполнено(РежимРаботыТС) ИЛИ РежимРаботыТС.Обед <> '00010101' Тогда //рабочий интервал указан, но не известен интервал обеда (не известна продолжительность) - тогда нужно убрать продолжительность обеда
			Если ВремяДневное + ВремяНочное > ВремяДоОбеда Тогда
				Для Каждого ТекОбед Из тблОбеды Цикл
					Если ТекОбед.Начало = Неопределено Тогда
						Если ВремяДневное >= ВремяДоОбеда + ТекОбед.Продолжительность Тогда
							Если НЕ флОднодневныйНочнойПЛ ИЛИ НЕ флОбедУжеРассчитан Тогда
								ВремяДневное = ВремяДневное - ТекОбед.Продолжительность;
								Если флОднодневныйНочнойПЛ Тогда
									флОбедУжеРассчитан = Истина;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ВремяНочное >= ВремяДоОбеда + ТекОбед.Продолжительность Тогда
							Если НЕ флОднодневныйНочнойПЛ ИЛИ НЕ флОбедУжеРассчитан Тогда
								ВремяНочное = ВремяНочное - ТекОбед.Продолжительность;
								Если флОднодневныйНочнойПЛ Тогда
									флОбедУжеРассчитан = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Явка, Дневные, РаботаНочныеЧасы, Простой, ПростойСВклДвиг",
		ВремяДневное + ВремяНочное, ВремяДневное, ВремяНочное, ВремяПростои, ВремяПростоиСВклДвиг);
КонецФункции

// Функция расчета времени простоев по заданному дню
// Возвращает таблицу интервалов простоев и продолжительность в секундах
//
Функция РасчетПростоевНаДень(ТекДата, Простои)
	тблРез = Новый ТаблицаЗначений;
	тблРез.Колонки.Добавить("ВидВремени");
	тблРез.Колонки.Добавить("Начало");
	тблРез.Колонки.Добавить("Конец");
	тблРез.Колонки.Добавить("Продолжительность");
	тблРез.Колонки.Добавить("УменьшатьПростойНаВремяОбеда");
	тблРез.Колонки.Добавить("ПростойСВклДвиг");
	тблРез.Колонки.Добавить("ВидПростоя");
	
	Для Каждого ТекСтрока Из Простои Цикл
		Если НачалоДня(ТекДата) <> НачалоДня(ТекСтрока.НачалоПростоя) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = тблРез.Добавить();
		НоваяСтрока.Начало                       = НачалоДня(ТекДата)
			+ (ТекСтрока.НачалоПростоя - НачалоДня(ТекСтрока.НачалоПростоя));
		НоваяСтрока.Продолжительность            = Текстрока.ВремяПростоя - НачалоДня(Текстрока.ВремяПростоя);
		НоваяСтрока.Конец                        = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
		НоваяСтрока.УменьшатьПростойНаВремяОбеда = ТекСтрока.ВидПростоя.УменьшатьПростойНаВремяОбеда;
		НоваяСтрока.ПростойСВклДвиг              = ТекСтрока.ВключенДвигатель;
		НоваяСтрока.ВидПростоя                   = ТекСтрока.ВидПростоя;
	КонецЦикла;
	
	тблРез.ЗаполнитьЗначения("Простой", "ВидВремени");
	
	Возврат тблРез;
КонецФункции	

// Функция рассчитывает обеденное время для ПЛ с указанным режимом работы ТС
// Учитывает пересечение с простоями - интервалы обеда замещаются пересекающимися простоями
// Возвращает таблицу интервалов простоев и продолжительность в секундах
//
Функция РасчетОбедовНаДень(ТекДата, РежимРаботы, ПродолжительностьОбеда, ВремяДоОбеда, Простои, ДатаВыезда, ДатаВозвращения, флОднодневныйНочнойПЛ) Экспорт
	тблРез = Новый ТаблицаЗначений;
	тблРез.Колонки.Добавить("ВидВремени");
	тблРез.Колонки.Добавить("Начало");
	тблРез.Колонки.Добавить("Конец");
	тблРез.Колонки.Добавить("Продолжительность");
	
	Если ЗначениеЗаполнено(РежимРаботы) Тогда
		Если ЗначениеЗаполнено(РежимРаботы.Обед) Тогда // указана продолжительность обеда, интервал не заполнен
			НоваяСтрока = тблРез.Добавить();
			НоваяСтрока.Продолжительность = РежимРаботы.Обед - '00010101';
			Если ВремяДоОбеда = 0 Тогда //не указано время до обеда, считаем что обед точно должен быть, но когда неизвестно
				НоваяСтрока.Начало = Неопределено;
				НоваяСтрока.Конец = Неопределено;
			Иначе
				Если ДатаВозвращения - ДатаВыезда <= 86400 Тогда //однодневный ПЛ
					НоваяСтрока.Начало = ДатаВыезда + ВремяДоОбеда;
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
				Иначе
					Если НачалоДня(ТекДата) = НачалоДня(ДатаВыезда) Тогда //многодневный ПЛ - первый день
						НоваяСтрока.Начало = ДатаВыезда + ВремяДоОбеда;
						НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					Иначе //многодневный ПЛ - второй и последующие дни
						НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботы.НачалоРаботы - '00010101') + ВремяДоОбеда;
						Если НачалоДня(НоваяСтрока.Начало) > НачалоДня(ТекДата) Тогда //ночной режим
							НоваяСтрока.Начало = НоваяСтрока.Начало - 86400;
						КонецЕсли;
						НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // продолжительность обеда не заполнена - берем интервал, продолжительность рассчитываем
			Если РежимРаботы.НачалоОбеда <= РежимРаботы.КонецОбеда Тогда //дневной обед
				НоваяСтрока = тблРез.Добавить();
				НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботы.НачалоОбеда - '00010101');
				НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботы.КонецОбеда - '00010101');
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
			Иначе //ночной обед
				// часть ночного обеда до 0:00
				НоваяСтрока = тблРез.Добавить();
				НоваяСтрока.Начало = НачалоДня(ТекДата) + (РежимРаботы.НачалоОбеда - '00010101');
				НоваяСтрока.Конец = КонецДня(ТекДата)+1;
				НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
				// часть ночного обеда с 0:00
				Если РежимРаботы.КонецОбеда <> '00010101' Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Начало = НачалоДня(ТекДата);
					НоваяСтрока.Конец = НачалоДня(ТекДата) + (РежимРаботы.КонецОбеда - '00010101');
					НоваяСтрока.Продолжительность = НоваяСтрока.Конец - НоваяСтрока.Начало;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	Иначе //режим работы не указан, расчет ведем по ВремяДоОбеда и ПродолжительностьОбеда
		Если (ДатаВозвращения - ДатаВыезда) <= 86400 Тогда //однодневный ПЛ
			Если НачалоДня(ТекДата) = НачалоДня(ДатаВыезда) Тогда //дневной и первый день ночного ПЛ
				ОтВыездаДоПолуночи = (КонецДня(ДатаВыезда) + 1) - ДатаВыезда;
				Если ОтВыездаДоПолуночи > ВремяДоОбеда Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Начало = ДатаВыезда + ВремяДоОбеда;
					НоваяСтрока.Продолжительность = Мин(ПродолжительностьОбеда, ОтВыездаДоПолуночи - ВремяДоОбеда);
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
				КонецЕсли;
			ИначеЕсли НачалоДня(ТекДата) = НачалоДня(ДатаВозвращения) Тогда //второй день ночного ПЛ
				ОтПолуночиДоВозврата = ДатаВозвращения - НачалоДня(ДатаВозвращения);
				Если ОтПолуночиДоВозврата > ВремяДоОбеда Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Начало = НачалоДня(ДатаВозвращения) + ВремяДоОбеда;
					НоваяСтрока.Продолжительность = Мин(ПродолжительностьОбеда, ОтПолуночиДоВозврата - ВремяДоОбеда);
					НоваяСтрока.Конец = НоваяСтрока.Начало + НоваяСтрока.Продолжительность;
				КонецЕсли;
			КонецЕсли;
		Иначе //многодневный ПЛ
			НоваяСтрока = тблРез.Добавить();
			НоваяСтрока.Начало = Неопределено;
			НоваяСтрока.Конец = Неопределено;
			НоваяСтрока.Продолжительность = ПродолжительностьОбеда;
		КонецЕсли;
		
	КонецЕсли;
	
	// удаление обедов с нулевой продолжительностью
	мсвСтрокиУдалить = тблРез.НайтиСтроки(Новый Структура("Продолжительность", 0));
	Для Каждого СтрокаУдалить Из мсвСтрокиУдалить Цикл
		тблРез.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	тблРез.ЗаполнитьЗначения("Обед", "ВидВремени");

	Возврат тблРез;
КонецФункции //РасчетОбедовНаДень()

// Процедура выполняет пересечение таблиц интервалов
// Исходный интервал может изменяться: вырезаться начало/конец/середина интервала, либо полностью замещаться
// Параметры:
//   тблИсходныеИнтервалы - ТаблицаЗначений - исходная таблица интервалов
//   тблПересечения - ТаблицаЗначений - таблица интервалов для пересечения исходной таблицы
//   флОбед - признак того, что исходная таблица - это таблица обедов
//
Процедура ПересечениеИнтерваловСтарая(тблИсходныеИнтервалы, тблПересечения, ВидВремени = Неопределено, флТЧПростои = Ложь) Экспорт
	КоличИсх = тблИсходныеИнтервалы.Количество();
	
	Для Сч = 0 По КоличИсх - 1 Цикл
		ИсходныйИнтервал = тблИсходныеИнтервалы[Сч];
		
		Если НЕ ЗначениеЗаполнено(ИсходныйИнтервал.Начало) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидВремени) И ИсходныйИнтервал.ВидВремени <> ВидВремени Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекПересечение Из тблПересечения Цикл
			Если НЕ ЗначениеЗаполнено(ТекПересечение.Начало) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (флТЧПростои ИЛИ ИсходныйИнтервал.ВидВремени = "Простой") И ТекПересечение.ВидВремени = "Обед" И НЕ ИсходныйИнтервал.УменьшатьПростойНаВремяОбеда
				ИЛИ ИсходныйИнтервал.ВидВремени = "Обед" И ТекПересечение.ВидВремени = "Простой" И ТекПересечение.УменьшатьПростойНаВремяОбеда Тогда
				Продолжить;
			КонецЕсли;
		
			Если ТекПересечение.Начало >= ИсходныйИнтервал.Начало И ТекПересечение.Начало <= ИсходныйИнтервал.Конец
				И ТекПересечение.Конец >= ИсходныйИнтервал.Конец Тогда
				// интервал пересечения срезает конец рабочего интервала
				ИсходныйИнтервал.Конец             = ТекПересечение.Начало;
				ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
				
			ИначеЕсли ТекПересечение.Начало <= ИсходныйИнтервал.Начало И ТекПересечение.Конец <= ИсходныйИнтервал.Конец
				И ТекПересечение.Конец >= ИсходныйИнтервал.Начало Тогда
				// интервал пересечения срезает начало рабочего интервала
				ИсходныйИнтервал.Начало            = ТекПересечение.Конец;
				ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
				
			ИначеЕсли ИсходныйИнтервал.Начало >= ТекПересечение.Начало И ИсходныйИнтервал.Конец <= ТекПересечение.Конец Тогда
				// рабочий интервал внутри интервала пересечения
				ИсходныйИнтервал.Начало            = Неопределено;
				ИсходныйИнтервал.Конец             = Неопределено;
				ИсходныйИнтервал.Продолжительность = 0;
				
			ИначеЕсли ИсходныйИнтервал.Начало <= ТекПересечение.Начало И ИсходныйИнтервал.Конец >= ТекПересечение.Конец Тогда
				// интервал пересечения внутри рабочего интервала
				КонецИсхВрем                       = ИсходныйИнтервал.Конец;
				ИсходныйИнтервал.Конец             = ТекПересечение.Начало;
				ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
				
				НовыйРабИнтервал                   = тблИсходныеИнтервалы.Добавить();
				НовыйРабИнтервал.ВидВремени        = ИсходныйИнтервал.ВидВремени;
				НовыйРабИнтервал.Начало            = ТекПересечение.Конец;
				НовыйРабИнтервал.Конец             = КонецИсхВрем;
				НовыйРабИнтервал.Продолжительность = НовыйРабИнтервал.Конец - НовыйРабИнтервал.Начало;
				Если флТЧПростои Тогда
					НовыйРабИнтервал.ВидПростоя                   = ИсходныйИнтервал.ВидПростоя;
					НовыйРабИнтервал.ПростойСВклДвиг              = ИсходныйИнтервал.ПростойСВклДвиг;
					НовыйРабИнтервал.УменьшатьПростойНаВремяОбеда = ИсходныйИнтервал.УменьшатьПростойНаВремяОбеда;
				КонецЕсли;
								
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет пересечение таблиц интервалов
// Исходный интервал может изменяться: вырезаться начало/конец/середина интервала, либо полностью замещаться
// Параметры:
//   тблИсходныеИнтервалы - ТаблицаЗначений - исходная таблица интервалов
//   тблПересечения - ТаблицаЗначений - таблица интервалов для пересечения исходной таблицы
//   флОбед - признак того, что исходная таблица - это таблица обедов
//
Процедура ПересечениеИнтервалов(тблИсходныеИнтервалы, тблПересечения, ВидВремени = Неопределено, флТЧПростои = Ложь) Экспорт
	Для Каждого ТекПересечение Из тблПересечения Цикл
		Если НЕ ЗначениеЗаполнено(ТекПересечение.Начало) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличИсх = тблИсходныеИнтервалы.Количество();
		Для Сч = 0 По КоличИсх - 1 Цикл
			ИсходныйИнтервал = тблИсходныеИнтервалы[Сч];
			
			Если (флТЧПростои ИЛИ ИсходныйИнтервал.ВидВремени = "Простой") И ТекПересечение.ВидВремени = "Обед" И НЕ ИсходныйИнтервал.УменьшатьПростойНаВремяОбеда
				ИЛИ ИсходныйИнтервал.ВидВремени = "Обед" И ТекПересечение.ВидВремени = "Простой" И ТекПересечение.УменьшатьПростойНаВремяОбеда Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИсходныйИнтервал.Начало) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВидВремени) И ИсходныйИнтервал.ВидВремени <> ВидВремени Тогда
				Продолжить;
			КонецЕсли;
		
			Если ТекПересечение.Начало >= ИсходныйИнтервал.Начало И ТекПересечение.Начало <= ИсходныйИнтервал.Конец
				И ТекПересечение.Конец >= ИсходныйИнтервал.Конец Тогда
				// интервал пересечения срезает конец рабочего интервала
				ИсходныйИнтервал.Конец             = ТекПересечение.Начало;
				ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
				
			ИначеЕсли ТекПересечение.Начало <= ИсходныйИнтервал.Начало И ТекПересечение.Конец <= ИсходныйИнтервал.Конец
				И ТекПересечение.Конец >= ИсходныйИнтервал.Начало Тогда
				// интервал пересечения срезает начало рабочего интервала
				ИсходныйИнтервал.Начало            = ТекПересечение.Конец;
				ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
				
			ИначеЕсли ИсходныйИнтервал.Начало >= ТекПересечение.Начало И ИсходныйИнтервал.Конец <= ТекПересечение.Конец Тогда
				// рабочий интервал внутри интервала пересечения
				ИсходныйИнтервал.Начало            = Неопределено;
				ИсходныйИнтервал.Конец             = Неопределено;
				ИсходныйИнтервал.Продолжительность = 0;
				
			ИначеЕсли ИсходныйИнтервал.Начало <= ТекПересечение.Начало И ИсходныйИнтервал.Конец >= ТекПересечение.Конец Тогда
				// интервал пересечения внутри рабочего интервала
				КонецИсхВрем                       = ИсходныйИнтервал.Конец;
				ИсходныйИнтервал.Конец             = ТекПересечение.Начало;
				ИсходныйИнтервал.Продолжительность = ИсходныйИнтервал.Конец - ИсходныйИнтервал.Начало;
				
				НовыйРабИнтервал                   = тблИсходныеИнтервалы.Добавить();
				НовыйРабИнтервал.ВидВремени        = ИсходныйИнтервал.ВидВремени;
				НовыйРабИнтервал.Начало            = ТекПересечение.Конец;
				НовыйРабИнтервал.Конец             = КонецИсхВрем;
				НовыйРабИнтервал.Продолжительность = НовыйРабИнтервал.Конец - НовыйРабИнтервал.Начало;
				Если флТЧПростои Тогда
					НовыйРабИнтервал.ВидПростоя                   = ИсходныйИнтервал.ВидПростоя;
					НовыйРабИнтервал.ПростойСВклДвиг              = ИсходныйИнтервал.ПростойСВклДвиг;
					НовыйРабИнтервал.УменьшатьПростойНаВремяОбеда = ИсходныйИнтервал.УменьшатьПростойНаВремяОбеда;
				КонецЕсли;
								
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Проверка закрепления сотрудника за организацией
//
// Параметры:
//  Сотрудник	 - 	 - 
//  Организация	 - 	 - 
//  ДатаСреза	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция СотрудникЗакрепленЗаОрганизацией(Сотрудник, Организация, ДатаСреза)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
	|			&ТекДата,
	|			Сотрудник = &Сотрудник
	|				И Организация = &Организация) КАК уатКадроваяИсторияСотрудников
	|ГДЕ
	|	(уатКадроваяИсторияСотрудников.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатКадроваяИсторияСотрудников.Сотрудник.ДатаУвольнения > &ТекДата)");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекДата", ДатаСреза);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция ПолучитьЗначениеТаблЗаполненияДляПодстановки(мсвИсходныеЗначения)
	
	ТаблДанных = Новый ТаблицаЗначений();
	ТаблДанных.Колонки.Добавить("ИсхЗначение");
	
	Для Каждого ТекЭлемент Из мсвИсходныеЗначения Цикл 
		НовСтрока = ТаблДанных.Добавить();
		НовСтрока.ИсхЗначение = ТекЭлемент;
	КонецЦикла;
	
	ТаблДанных.Свернуть("ИсхЗначение");
	
	Если ТаблДанных.Количество() = 1 Тогда 
		Возврат ТаблДанных[0].ИсхЗначение;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура проверяет корректность заполнения таблицы ФОВ
//
Процедура ПроверитьТаблицуФОВ(Объект, ТекстСообщения = "", Отказ)
	// проверка на заполненость хотя бы одного из времени дневного или ночного
	Для Каждого ТекСтрокаФОВ Из Объект.ФактическиОтработанноеВремя Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяДневное) И НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяНочное) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("en=' - in line №%1 not specified time!';ru='	- в строке №%1 не указано время!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТекСтрокаФОВ.НомерСтроки);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РасчитатьВременныеПараметры(Объект);
	
	// Проверка на превышение времени по каждому сотруднику общего времени по путевому листу
	тблФОВсвернутая = Объект.ФактическиОтработанноеВремя.Выгрузить().Скопировать();
	тблФОВсвернутая.Свернуть("Сотрудник", "ВремяДневное, ВремяНочное");
	Для Каждого ТекСтрФОВ Из тблФОВсвернутая Цикл
		Если ТекСтрФОВ.ВремяДневное > Объект.мВремяВНаряде Тогда
			ТекстНСТР = НСтр("en=' - working time on employee ""%1"" (%2) is longer than time on duty on waybill (%3)!';ru='	- рабочее время по сотруднику ""%1"" (%2) превышает время в наряде по путевому листу (%3)!'");
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстНСТР;
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТекСтрокаФОВ.Сотрудник,
				Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрФОВ.ВремяДневное), "ЧДЦ=2; ЧРД=:"),
				Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(Объект.мВремяВНаряде), "ЧДЦ=2; ЧРД=:"));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрФОВ Из Объект.ФактическиОтработанноеВремя Цикл
		Если ТекСтрФОВ.ВремяНочное > 8*3600 Тогда
			ТекстНСТР = НСтр("en=' - night time by employee ""%1"" on date %2 (%3) exceed 8h/day!';ru='	- ночное время по сотруднику ""%1"" на дату %2 (%3) превышает 8ч/сут!'");
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстНСТР;
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТекСтрокаФОВ.Сотрудник,
				Формат(ТекСтрФОВ.Дата, "ДФ = дд.ММ.гггг"),
				Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрФОВ.ВремяНочное), "ЧДЦ=2; ЧРД=:"));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура проверяет таблицу з/п.
// В таблице удаляются строки, для которых нет водителей и сотрудников в п/л
//
Процедура ПроверитьТаблицуЗП(Объект)
	сч = 0;
	Пока сч  <= Объект.Зарплата.Количество() - 1 Цикл
		Если Объект.Зарплата[сч].Сотрудник <> Объект.Водитель1 И
			Объект.Зарплата[сч].Сотрудник <> Объект.Водитель2 И
			Объект.Зарплата[сч].Сотрудник <> Объект.Сотрудник1 И
			Объект.Зарплата[сч].Сотрудник <> Объект.Сотрудник2 Тогда
			Объект.Зарплата.Удалить(сч);
		Иначе	
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры //ПроверитьТаблицуЗП

Процедура ПроверитьОбязательныеДокументы(Объект, ДопускДнейТС, ДопускДнейВодители, ЕстьОтсутствующие = Ложь)
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	мсвВодители = Новый Массив;
	Если флЭтоТПЛ Тогда
		Если ЗначениеЗаполнено(Объект.Водитель) Тогда
			мсвВодители.Добавить(Объект.Водитель);
		КонецЕсли;
		ТранспортноеСредство = Объект.ТС;
	Иначе
		Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
			мсвВодители.Добавить(Объект.Водитель1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
			мсвВодители.Добавить(Объект.Водитель2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
			мсвВодители.Добавить(Объект.Сотрудник1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
			мсвВодители.Добавить(Объект.Сотрудник2);
		КонецЕсли;
		ТранспортноеСредство = Объект.ТранспортноеСредство;
	КонецЕсли;
	тблОбязДокументы = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыезда) И НЕ ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда
		ДатаКонтроля = Объект.Дата;
	Иначе 
		ДатаКонтроля = Макс(Объект.ДатаВыезда, Объект.ДатаВозвращения);
	КонецЕсли;
		
	Если ОтсутствуютОбязательныеДокументыТС(ДатаКонтроля, ДопускДнейТС, ДопускДнейВодители, ТранспортноеСредство, мсвВодители, тблОбязДокументы) Тогда
		ЕстьОтсутствующие = Истина;
		ШаблонСообщ = "Для %1 ""%2"" отсутствует действующий документ ""%3""";
		Для Каждого ТекСтрока Из тблОбязДокументы Цикл
			ТекстСообщ = СтрШаблон(ШаблонСообщ, ТекСтрока.ТипОбъекта, ТекСтрока.Объект, ТекСтрока.ВидДокумента);
			Если ЗначениеЗаполнено(ТекСтрока.КатегорияДокумента) Тогда
				ТекстСообщ = ТекстСообщ + " категории """ + ТекСтрока.КатегорияДокумента + """";
			КонецЕсли;
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Функция проверяет наличие обязательных документов ТС и водителей
//
Функция ОтсутствуютОбязательныеДокументыТС(ДатаКонтроля, ДопускДнейТС, ДопускДнейВодители, ТС, мсвВодители, ТаблицаДокументов = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКонтроляТС",       НачалоДня(ДатаКонтроля) + ДопускДнейТС * 24 * 60 * 60);
	Запрос.УстановитьПараметр("ДатаКонтроляВодители", НачалоДня(ДатаКонтроля) + ДопускДнейВодители * 24 * 60 * 60);
	Запрос.УстановитьПараметр("ТС",         ТС);
	Запрос.УстановитьПараметр("Водители",   мсвВодители);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Водители
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Водители)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ТС"" КАК ТипОбъекта,
	|	&ТС КАК Объект,
	|	уатТСОбязательныеВидыДокументов.ВидДокумента КАК ВидДокумента,
	|	уатТСОбязательныеВидыДокументов.КатегорияДокумента КАК КатегорияДокумента
	|ИЗ
	|	Справочник.уатТС.ОбязательныеВидыДокументов КАК уатТСОбязательныеВидыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК уатДокументыТС
	|		ПО уатТСОбязательныеВидыДокументов.Принадлежность = уатДокументыТС.ПринадлежностьДокументов
	|			И уатТСОбязательныеВидыДокументов.ВидДокумента = уатДокументыТС.ВидДокумента
	|			И (уатДокументыТС.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.Действует))
	|			И (НЕ уатДокументыТС.ПометкаУдаления)
	|			И (уатДокументыТС.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ уатДокументыТС.ДатаОкончания >= &ДатаКонтроляТС)
	|			И (уатДокументыТС.ВладелецДокументов = &ТС)
	|ГДЕ
	|	уатТСОбязательныеВидыДокументов.Ссылка = &ТС
	|	И уатТСОбязательныеВидыДокументов.Принадлежность = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС)
	|	И уатДокументыТС.Статус ЕСТЬ NULL
	|	И уатТСОбязательныеВидыДокументов.КатегорияДокумента = ЗНАЧЕНИЕ(Справочник.уатКатегорииДокументов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТС"",
	|	&ТС,
	|	уатТСОбязательныеВидыДокументов.ВидДокумента,
	|	уатТСОбязательныеВидыДокументов.КатегорияДокумента
	|ИЗ
	|	Справочник.уатТС.ОбязательныеВидыДокументов КАК уатТСОбязательныеВидыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы.Категории КАК уатДокументыТСКатегории
	|		ПО уатТСОбязательныеВидыДокументов.Принадлежность = уатДокументыТСКатегории.Ссылка.ПринадлежностьДокументов
	|			И уатТСОбязательныеВидыДокументов.ВидДокумента = уатДокументыТСКатегории.Ссылка.ВидДокумента
	|			И уатТСОбязательныеВидыДокументов.КатегорияДокумента = уатДокументыТСКатегории.Категория
	|			И уатДокументыТСКатегории.Открыта
	|			И (уатДокументыТСКатегории.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.Действует))
	|			И (НЕ уатДокументыТСКатегории.Ссылка.ПометкаУдаления)
	|			И (уатДокументыТСКатегории.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ уатДокументыТСКатегории.Ссылка.ДатаОкончания >= &ДатаКонтроляТС)
	|			И (уатДокументыТСКатегории.Ссылка.ВладелецДокументов = &ТС)
	|ГДЕ
	|	уатТСОбязательныеВидыДокументов.Ссылка = &ТС
	|	И уатТСОбязательныеВидыДокументов.Принадлежность = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыТС)
	|	И уатДокументыТСКатегории.Ссылка.Статус ЕСТЬ NULL
	|	И уатТСОбязательныеВидыДокументов.КатегорияДокумента <> ЗНАЧЕНИЕ(Справочник.уатКатегорииДокументов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""водителя"",
	|	Водители.Ссылка,
	|	уатТСОбязательныеВидыДокументов.ВидДокумента,
	|	уатТСОбязательныеВидыДокументов.КатегорияДокумента
	|ИЗ
	|	Водители КАК Водители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС.ОбязательныеВидыДокументов КАК уатТСОбязательныеВидыДокументов
	|		ПО (уатТСОбязательныеВидыДокументов.Принадлежность = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы КАК уатДокументыВодителей
	|		ПО (уатТСОбязательныеВидыДокументов.Принадлежность = уатДокументыВодителей.ПринадлежностьДокументов)
	|			И (уатТСОбязательныеВидыДокументов.ВидДокумента = уатДокументыВодителей.ВидДокумента)
	|			И (уатДокументыВодителей.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.Действует))
	|			И (НЕ уатДокументыВодителей.ПометкаУдаления)
	|			И (уатДокументыВодителей.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ уатДокументыВодителей.ДатаОкончания >= &ДатаКонтроляВодители)
	|			И Водители.Ссылка = уатДокументыВодителей.ВладелецДокументов
	|ГДЕ
	|	уатТСОбязательныеВидыДокументов.Ссылка = &ТС
	|	И уатДокументыВодителей.Статус ЕСТЬ NULL
	|	И уатТСОбязательныеВидыДокументов.КатегорияДокумента = ЗНАЧЕНИЕ(Справочник.уатКатегорииДокументов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""водителя"",
	|	Водители.Ссылка,
	|	уатТСОбязательныеВидыДокументов.ВидДокумента,
	|	уатТСОбязательныеВидыДокументов.КатегорияДокумента
	|ИЗ
	|	Водители КАК Водители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС.ОбязательныеВидыДокументов КАК уатТСОбязательныеВидыДокументов
	|		ПО (уатТСОбязательныеВидыДокументов.Принадлежность = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРегистрационныеДокументы.Категории КАК уатДокументыВодителейКатегории
	|		ПО (уатТСОбязательныеВидыДокументов.Принадлежность = уатДокументыВодителейКатегории.Ссылка.ПринадлежностьДокументов)
	|			И (уатТСОбязательныеВидыДокументов.ВидДокумента = уатДокументыВодителейКатегории.Ссылка.ВидДокумента)
	|			И уатТСОбязательныеВидыДокументов.КатегорияДокумента = уатДокументыВодителейКатегории.Категория
	|			И уатДокументыВодителейКатегории.Открыта
	|			И (уатДокументыВодителейКатегории.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыдействия.Действует))
	|			И (НЕ уатДокументыВодителейКатегории.Ссылка.ПометкаУдаления)
	|			И (уатДокументыВодителейКатегории.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ уатДокументыВодителейКатегории.Ссылка.ДатаОкончания >= &ДатаКонтроляВодители)
	|			И Водители.Ссылка = уатДокументыВодителейКатегории.Ссылка.ВладелецДокументов
	|ГДЕ
	|	уатТСОбязательныеВидыДокументов.Ссылка = &ТС
	|	И уатДокументыВодителейКатегории.Ссылка.Статус ЕСТЬ NULL
	|	И уатТСОбязательныеВидыДокументов.КатегорияДокумента <> ЗНАЧЕНИЕ(Справочник.уатКатегорииДокументов.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		ТаблицаДокументов = РезультатЗапроса;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтсутствуютОбязательныеДокументыТС()

Процедура ПроверитьДокументыТСВодителя(Объект, ДопускДней, ТСВодитель, ЕстьЗапрет)
	флЭтоТПЛ = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ТипЗнч(Объект) = Тип("ДокументОбъект.уатТехнологическийПутевойЛист") Тогда
		флЭтоТПЛ = Истина;
	КонецЕсли;
	
	Если флЭтоТПЛ Тогда
		ТранспортноеСредство = Объект.ТС;
		Водитель1 = Объект.Водитель;
		Водитель2 = Неопределено;
	Иначе
		ТранспортноеСредство = Объект.ТранспортноеСредство;
		Водитель1 = Объект.Водитель1;
		Водитель2 = Объект.Водитель2;
	КонецЕсли;
		
	ЭтоТС = (ТипЗнч(ТСВодитель) = Тип("СправочникСсылка.уатТС"));
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыезда) И НЕ ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда
		ДатаКонтроля = Объект.Дата;
	Иначе 
		ДатаКонтроля = Макс(Объект.ДатаВыезда, Объект.ДатаВозвращения);
	КонецЕсли;
	
	Если ЭтоТС И уатОбщегоНазначения.уатПросроченныеДокументыТС(ДатаКонтроля, ДопускДней, ТСВодитель)
		ИЛИ (НЕ ЭтоТС) И уатОбщегоНазначения.уатПросроченныеДокументыВодителя(ДатаКонтроля, ДопускДней, ТСВодитель) Тогда 
		ЕстьЗапрет = Истина;
		
		ТекстНСТР = НСтр("en='%1 ""%2"" has documents that expired.';ru='Для %1 ""%2"" есть документы с истекшим сроком действия.'");
		
		Если ЭтоТС Тогда
			Если ТСВодитель = ТранспортноеСредство Тогда
				СтрокаШаблона1 = НСтр("en='Vehicle'; ru='ТС'");
			Иначе
				СтрокаШаблона1 = НСтр("en='Trailer / equipment'; ru='прицепа/оборудования'");
			КонецЕсли;
		Иначе
			Если ТСВодитель = Водитель1 ИЛИ ТСВодитель = Водитель2 Тогда
				СтрокаШаблона1 = НСтр("en='Driver'; ru='водителя'");
			Иначе
				СтрокаШаблона1 = НСтр("en='Employee'; ru='сотрудника'");
			КонецЕсли;
		КонецЕсли;
		ТекстНСТР = СтрШаблон(ТекстНСТР, СтрокаШаблона1, ТСВодитель);
		
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

Функция ДобавочныйПробегСпецработ(ТекСтрока) Экспорт
	Рез = 0;
	Для Сч = 1 По 5 Цикл
		ТекСпецРабота = ТекСтрока["СпецРабота" + Сч];
		Если ТекСпецРабота.УвеличитьОбщийПробегНаПробегСпец Тогда
			Рез = Рез + ТекСтрока["КоличествоСпецРаботы" + Сч];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

Функция ПраздникПоГрафику(ТекСотрудник, Организация, ДатаСведений) Экспорт
	флПраздник = Ложь;
	
	ГрафикРаботыСотрудника = ГрафикРаботыСотрудника(ТекСотрудник, Организация, ДатаСведений);
	
	Если ЗначениеЗаполнено(ГрафикРаботыСотрудника)
		И ЗначениеЗаполнено(ГрафикРаботыСотрудника.ПроизводственныйКалендарь) Тогда
		
		ЗапросПраздник = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &ДатаГрафика
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)");
		ЗапросПраздник.УстановитьПараметр("ДатаГрафика", НачалоДня(ДатаСведений));
		ЗапросПраздник.УстановитьПараметр("ПроизводственныйКалендарь", ГрафикРаботыСотрудника.ПроизводственныйКалендарь);
		ВыборкаПраздник = ЗапросПраздник.Выполнить().Выбрать();
		
		Если ВыборкаПраздник.Следующий() Тогда
			флПраздник = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат флПраздник;
КонецФункции

Функция ВыходнойПоГрафику(ТекСотрудник, Организация, ДатаСведений) Экспорт
	флВыходной = Ложь;
	
	ГрафикРаботыСотрудника = ГрафикРаботыСотрудника(ТекСотрудник, Организация, ДатаСведений);
	
	Если ЗначениеЗаполнено(ГрафикРаботыСотрудника) Тогда
		ЗапросВыходной = Новый Запрос(
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.ДатаГрафика = &ДатаГрафика
		|	И КалендарныеГрафики.Календарь = &Календарь
		|	И НЕ КалендарныеГрафики.ДеньВключенВГрафик");
		ЗапросВыходной.УстановитьПараметр("ДатаГрафика", НачалоДня(ДатаСведений));
		ЗапросВыходной.УстановитьПараметр("Календарь", ГрафикРаботыСотрудника);
		ВыборкаВыходной = ЗапросВыходной.Выполнить().Выбрать();
		
		Если ВыборкаВыходной.Следующий() Тогда
			флВыходной = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат флВыходной;
КонецФункции

Функция ГрафикРаботыСотрудника(Сотрудник, Организация, ДатаСведений)
	ЗапросСведенияСотрудник = Новый Запрос(
	"ВЫБРАТЬ
	|	уатКадроваяИсторияСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК уатКадроваяИсторияСотрудниковСрезПоследних");
	ЗапросСведенияСотрудник.УстановитьПараметр("Период", ДатаСведений);
	ЗапросСведенияСотрудник.УстановитьПараметр("Организация", Организация);
	ЗапросСведенияСотрудник.УстановитьПараметр("Сотрудник", Сотрудник);
	ВыборкаСведения = ЗапросСведенияСотрудник.Выполнить().Выбрать();
	Если ВыборкаСведения.Следующий() Тогда
		Возврат ВыборкаСведения.ГрафикРаботы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура РассчитатьВыходныеПраздникиДляСТД(тблРабочееВремя, Объект)
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Возврат;
	КонецЕсли;
	
	мсвСотрудники = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		мсвСотрудники.Добавить(Объект.Водитель1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) И мсвСотрудники.Найти(Объект.Водитель2) = Неопределено Тогда
		мсвСотрудники.Добавить(Объект.Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) И мсвСотрудники.Найти(Объект.Сотрудник1) = Неопределено Тогда
		мсвСотрудники.Добавить(Объект.Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) И мсвСотрудники.Найти(Объект.Сотрудник2) = Неопределено Тогда
		мсвСотрудники.Добавить(Объект.Сотрудник2);
	КонецЕсли;
	
	Объект.мВремяВыходныеПраздники = Новый Соответствие;
	Для Каждого ТекСотрудник Из мсвСотрудники Цикл
		мВремяВыходнойСотрудника = 0;
		мВремяПраздникСотрудника = 0;
		Для Каждого ТекСтрока Из тблРабочееВремя Цикл
			Если ТекСтрока.ВидВремени = Справочники.уатВидыИспользованияРабочегоВремени.Явка Тогда
				флПраздник = ПраздникПоГрафику(ТекСотрудник, Объект.Организация, ТекСтрока.ДатаРаботы);
				Если флПраздник Тогда
					мВремяПраздникСотрудника = мВремяПраздникСотрудника + ТекСтрока.Продолжительность;
				Иначе
					флВыходной = ВыходнойПоГрафику(ТекСотрудник, Объект.Организация, ТекСтрока.ДатаРаботы);
					Если флВыходной Тогда
						мВремяВыходнойСотрудника = мВремяВыходнойСотрудника + ТекСтрока.Продолжительность;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Объект.мВремяВыходныеПраздники.Вставить(ТекСотрудник,
		Новый Структура("Выходной, Праздник", мВремяВыходнойСотрудника, мВремяПраздникСотрудника));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

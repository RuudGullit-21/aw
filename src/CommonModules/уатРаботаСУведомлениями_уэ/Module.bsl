////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Работа с уведомлениями.
// 
// Содержит код, используемый в варианте поставке КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура преобразует запись регистра сведений "Очередь уведомлений" в документ, задачу или напоминание
Процедура ОбработатьУведомление(УведомлениеМенеджерЗаписи) Экспорт
	
	Если ТипЗнч(УведомлениеМенеджерЗаписи) <> Тип("РегистрСведенийМенеджерЗаписи.уатОчередьУведомлений_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		УведомлениеМенеджерЗаписи.ПравилоФормированияУведомлений,
		"ВидУведомления, АвторУведомления, ОтветственныйУведомления,
		|УчетнаяЗаписьЭлектроннойПочты, НастройкаКомплектовДокументов, ТипСобытия,Ссылка"
	);
	
	ПараметрыУведомления.Вставить("ШаблонСообщения", УведомлениеМенеджерЗаписи.Шаблон);  
	ПараметрыУведомления.Вставить("Документ", УведомлениеМенеджерЗаписи.Документ);  
	
	АвторУведомления = ПараметрыУведомления.АвторУведомления;
	ОтветственныйУведомления = ПараметрыУведомления.ОтветственныйУведомления;
	
	Если Не ЗначениеЗаполнено(УведомлениеМенеджерЗаписи.ТекстСообщения)
		Или (ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо 
		И Не ЗначениеЗаполнено(УведомлениеМенеджерЗаписи.ТемаПисьма)) Тогда
		ПараметрыСообщения = Новый Структура("ДополнительныйДокумент, GUIDСтрокиМЛ, ДатаУстановкиСтатуса, СтатусДокумента, УбытиеПлан, ГрузовоеМесто");
		ЗаполнитьЗначенияСвойств(ПараметрыСообщения, УведомлениеМенеджерЗаписи);
		
		Сообщение = ШаблоныСообщений.СформироватьСообщение(
						ПараметрыУведомления.ШаблонСообщения,
						УведомлениеМенеджерЗаписи.Документ,
						Новый УникальныйИдентификатор,
						ПараметрыСообщения
					);
					
		Если ЗначениеЗаполнено(УведомлениеМенеджерЗаписи.ТекстСообщения) Тогда
			ИтоговыйТекстСообщения = УведомлениеМенеджерЗаписи.ТекстСообщения;
		Иначе
			ИтоговыйТекстСообщения = Сообщение.Текст;
		КонецЕсли;
		Если ЗначениеЗаполнено(УведомлениеМенеджерЗаписи.ТемаПисьма) Тогда
			ИтоговаяТемаПисьма = УведомлениеМенеджерЗаписи.ТемаПисьма;
		Иначе
			ИтоговаяТемаПисьма = Сообщение.Тема;
		КонецЕсли;
	Иначе
		Сообщение = Неопределено;
		ИтоговыйТекстСообщения = УведомлениеМенеджерЗаписи.ТекстСообщения;
		ИтоговаяТемаПисьма = УведомлениеМенеджерЗаписи.ТемаПисьма;
	КонецЕсли;
	
	Событие = Неопределено;
	Если ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо
		ИЛИ ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов Тогда
		
		// Проверка запрета отправки электронных писем
		ЗапретОтправки = Ложь;
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЗапретОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УведомлениеМенеджерЗаписи.Получатель, "ЗапретОтправкиЭлектроннойПочты");
		ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УведомлениеМенеджерЗаписи.Получатель, "ЗапретОтправкиЭлектроннойПочты, ОбъектВладелец");
			Если ЗначенияРеквизитов.ЗапретОтправкиЭлектроннойПочты Тогда
				ЗапретОтправки = Истина;
			ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.ОбъектВладелец) 
				И ТипЗнч(ЗначенияРеквизитов.ОбъектВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
				// Также проверяется запрет отправки контрагенту-владельцу этого контактного лица
				ЗапретОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ОбъектВладелец, "ЗапретОтправкиЭлектроннойПочты");
			КонецЕсли;
		КонецЕсли;
		Если ЗапретОтправки Тогда
			УведомлениеМенеджерЗаписи.Удалить();
			Возврат;
		КонецЕсли;
		
		НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		НовоеЭлектронноеПисьмо.Дата = ТекущаяДата();
		НовоеЭлектронноеПисьмо.Автор = АвторУведомления;
		НовоеЭлектронноеПисьмо.Ответственный = ОтветственныйУведомления;
		
		// Заполнение получателя
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("Строка") Тогда
			НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
			НоваяСтрокаПолучателей.Адрес         = УведомлениеМенеджерЗаписи.Получатель;
			НоваяСтрокаПолучателей.Представление = УведомлениеМенеджерЗаписи.Получатель;
		Иначе
			стрНастройкиВидовКонтактнойИнформации = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
			Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailПользователя;
			ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтактногоЛица;
			ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтрагента;
			ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailФизическогоЛица;
			КонецЕсли;
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(УведомлениеМенеджерЗаписи.Получатель, ВидКонтактнойИнформации);
			НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
			НоваяСтрокаПолучателей.Адрес = КонтактнаяИнформация;
			НоваяСтрокаПолучателей.Представление = Строка(УведомлениеМенеджерЗаписи.Получатель) + "<" + КонтактнаяИнформация + ">";
			НоваяСтрокаПолучателей.Контакт = УведомлениеМенеджерЗаписи.Получатель;
		КонецЕсли;
		
		Если НовоеЭлектронноеПисьмо.ПолучателиПисьма.Количество() > 0 Тогда
			НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = НовоеЭлектронноеПисьмо.ПолучателиПисьма[0].Представление;
		КонецЕсли;
		
		НовоеЭлектронноеПисьмо.УчетнаяЗапись = ПараметрыУведомления.УчетнаяЗаписьЭлектроннойПочты;
		НовоеЭлектронноеПисьмо.ОтправительПредставление = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НовоеЭлектронноеПисьмо.УчетнаяЗапись,
			"Представление"
		);
		
		НовоеЭлектронноеПисьмо.Тема					    = ИтоговаяТемаПисьма;
		// Письмо готово к отправке и будет отправлено регл. заданием автоматически.
		НовоеЭлектронноеПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		НовоеЭлектронноеПисьмо.Кодировка				= "utf-8";
		НовоеЭлектронноеПисьмо.Важность 				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		
		ПисьмоHTML = СтрНачинаетсяС(ИтоговыйТекстСообщения, "<!DOCTYPE html") ИЛИ СтрНачинаетсяС(ИтоговыйТекстСообщения, "<html");
		Если ПисьмоHTML Тогда
			НовоеЭлектронноеПисьмо.ТекстHTML = ИтоговыйТекстСообщения;
			НовоеЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Иначе
			НовоеЭлектронноеПисьмо.Текст     = ИтоговыйТекстСообщения;
			НовоеЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		КонецЕсли;
		
		// Вложения
		Если ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов Тогда
			// Получаем вложения из настройки комплектов. Нам нужно сформировать  вложения по настройкам, при этом 
			// сначала надо получить все связанные документы которые есть
			НастройкиПечати = ПараметрыУведомления.НастройкаКомплектовДокументов.НастройкиПечатиХранилище.Получить(); 
			МассивДокументов = Новый ТаблицаЗначений;
			МассивДокументов.Колонки.Добавить("Ссылка");
			МассивДокументов.Колонки.Добавить("Группа");
			МассивДокументов.Колонки.Добавить("ДокСоздан");
			ЗаполнитьСписокПодчиненныхОбъектов(ПараметрыУведомления.Документ, МассивДокументов);
			СформироватьВложенияПоНастройкеКомплектов(ПараметрыУведомления.НастройкаКомплектовДокументов, МассивДокументов ,НовоеЭлектронноеПисьмо,ПараметрыУведомления.Документ,ПараметрыУведомления.ШаблонСообщения); 
		Иначе
			Если ПараметрыУведомления.ШаблонСообщения.ПечатныеФормыИВложения.Количество() > 0 Тогда
				Если Сообщение = Неопределено Тогда
					Сообщение = ШаблоныСообщений.СформироватьСообщение(
					ПараметрыУведомления.ШаблонСообщения,
					УведомлениеМенеджерЗаписи.Документ,
					Новый УникальныйИдентификатор
					);
				КонецЕсли;
				НовоеЭлектронноеПисьмо.ЕстьВложения = Сообщение.Вложения.Количество() > 0;
				НовоеЭлектронноеПисьмо.Записать();
				Событие = НовоеЭлектронноеПисьмо.Ссылка;
				Для Каждого Вложение Из Сообщение.Вложения Цикл
					УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					НовоеЭлектронноеПисьмо.Ссылка,
					Вложение.АдресВоВременномХранилище,
					Новый Структура("ИмяФайла", Вложение.Представление),
					0
					);
				КонецЦикла;
			Иначе
				НовоеЭлектронноеПисьмо.Записать();
				Событие = НовоеЭлектронноеПисьмо.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		// Регистрация предмета взаимодейтсвия
		МенеджерЗаписиПредмет = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
		МенеджерЗаписиПредмет.Взаимодействие = НовоеЭлектронноеПисьмо.Ссылка;
		МенеджерЗаписиПредмет.Предмет = УведомлениеМенеджерЗаписи.Документ;
		МенеджерЗаписиПредмет.Записать();
		
	ИначеЕсли ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.SMSСообщение Тогда
		
		// Проверка запрета отправки SMS
		ЗапретОтправки = Ложь;
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЗапретОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УведомлениеМенеджерЗаписи.Получатель, "ЗапретОтправкиSMS");
		ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УведомлениеМенеджерЗаписи.Получатель, "ЗапретОтправкиSMS, ОбъектВладелец");
			Если ЗначенияРеквизитов.ЗапретОтправкиSMS Тогда
				ЗапретОтправки = Истина;
			ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.ОбъектВладелец) 
				И ТипЗнч(ЗначенияРеквизитов.ОбъектВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
				// Также проверяется запрет отправки контрагенту-владельцу этого контактного лица
				ЗапретОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ОбъектВладелец, "ЗапретОтправкиSMS");
			КонецЕсли;
		КонецЕсли;
		Если ЗапретОтправки Тогда
			УведомлениеМенеджерЗаписи.Удалить();
			Возврат;
		КонецЕсли;
		
		НовоеSMS = Документы.СообщениеSMS.СоздатьДокумент();
		НовоеSMS.Дата = ТекущаяДата();
		НовоеSMS.Автор = АвторУведомления;
		НовоеSMS.Ответственный = ОтветственныйУведомления;
		
		// Заполнение получателя
		НоваяСтрокаПолучателей = НовоеSMS.Адресаты.Добавить();
		НоваяСтрокаПолучателей.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее;
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("Строка") Тогда
			НоваяСтрокаПолучателей.КакСвязаться = УведомлениеМенеджерЗаписи.Получатель;
			НоваяСтрокаПолучателей.ПредставлениеКонтакта = УведомлениеМенеджерЗаписи.Получатель;
		Иначе
			стрНастройкиВидовКонтактнойИнформации = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
			Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонПользователя;
			ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтактногоЛица;
			ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонКонтрагента;
			ИначеЕсли ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииТелефонФизическогоЛица;
			КонецЕсли;
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(УведомлениеМенеджерЗаписи.Получатель, ВидКонтактнойИнформации);
			НоваяСтрокаПолучателей.КакСвязаться = КонтактнаяИнформация;
			НоваяСтрокаПолучателей.ПредставлениеКонтакта = Строка(УведомлениеМенеджерЗаписи.Получатель) + "<" + КонтактнаяИнформация + ">";
			НоваяСтрокаПолучателей.Контакт = УведомлениеМенеджерЗаписи.Получатель;
		КонецЕсли;
		
		НовоеSMS.ТекстСообщения = ИтоговыйТекстСообщения;
		// SMS готово к отправке и будет отправлено регл. заданием автоматически.
		НовоеSMS.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
		НовоеSMS.ОтправлятьВТранслите = ПараметрыУведомления.ШаблонСообщения.ОтправлятьВТранслите;
				
		НовоеSMS.Записать();
		Событие = НовоеSMS.Ссылка;

		// Регистрация предмета взаимодейтсвия
		МенеджерЗаписиПредмет = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
		МенеджерЗаписиПредмет.Взаимодействие = НовоеSMS;
		МенеджерЗаписиПредмет.Предмет = УведомлениеМенеджерЗаписи.Документ;
		МенеджерЗаписиПредмет.Записать();
		
	ИначеЕсли ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЗаданиеПользователю Тогда
		
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) <> Тип("СправочникСсылка.Пользователи")
			И ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
			// Ставить задания можно только пользователям и ролям исполнителей.
			УведомлениеМенеджерЗаписи.Удалить();
			Возврат;
		КонецЕсли;
		
		НовоеЗадание = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
		НовоеЗадание.Автор = АвторУведомления;
		НовоеЗадание.АвторСтрокой = Строка(АвторУведомления);
		НовоеЗадание.Дата = ТекущаяДата();
		НовоеЗадание.Исполнитель = УведомлениеМенеджерЗаписи.Получатель;
		НовоеЗадание.Наименование = "Наименование бизнес-процесса";
		НовоеЗадание.Предмет = УведомлениеМенеджерЗаписи.Документ;
		НовоеЗадание.Содержание = ИтоговыйТекстСообщения;
		НовоеЗадание.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		
		ДопПараметрыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УведомлениеМенеджерЗаписи.ПравилоФормированияУведомлений,
			"ЗаданиеНаименование, ЗаданиеВажность, ЗаданиеПроверяющий, СрокДней, СрокЧасов, СрокМинут");
		НовоеЗадание.Важность = ДопПараметрыПравила.ЗаданиеВажность;
		НовоеЗадание.Наименование = ДопПараметрыПравила.ЗаданиеНаименование;
		Если ЗначениеЗаполнено(ДопПараметрыПравила.ЗаданиеПроверяющий) Тогда
			НовоеЗадание.НаПроверке = Истина;
			НовоеЗадание.Проверяющий = ДопПараметрыПравила.ЗаданиеПроверяющий;
		КонецЕсли;
		ВремяИсполнения = ДопПараметрыПравила.СрокДней*3600*24 + ДопПараметрыПравила.СрокЧасов*3600 + ДопПараметрыПравила.СрокМинут*60;
		НовоеЗадание.СрокИсполнения = НовоеЗадание.Дата + ВремяИсполнения;
		
		НовоеЗадание.Записать();
		НовоеЗадание.Старт();
		
		Событие = НовоеЗадание.Ссылка;
	ИначеЕсли ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.Напоминание Тогда
		
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) <> Тип("СправочникСсылка.Пользователи") Тогда
			// Создавать напоминания можно только пользователям.
			УведомлениеМенеджерЗаписи.Удалить();
			Возврат;
		КонецЕсли;
		
		ПараметрыНапоминания = Новый Структура;
		ПараметрыНапоминания.Вставить("Пользователь", УведомлениеМенеджерЗаписи.Получатель);
		ПараметрыНапоминания.Вставить("Источник", УведомлениеМенеджерЗаписи.Документ);
		ПараметрыНапоминания.Вставить("Описание", ИтоговыйТекстСообщения);
		ПараметрыНапоминания.Вставить("ВремяСобытия", УведомлениеМенеджерЗаписи.Дата);
		
		ДопПараметрыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УведомлениеМенеджерЗаписи.ПравилоФормированияУведомлений,
			"СрокДней, СрокЧасов, СрокМинут");
		ВремяНапоминания = ДопПараметрыПравила.СрокДней*3600*24 + ДопПараметрыПравила.СрокЧасов*3600 + ДопПараметрыПравила.СрокМинут*60;
		ПараметрыНапоминания.Вставить("СрокНапоминания", УведомлениеМенеджерЗаписи.Дата + ВремяНапоминания);
		
		НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
	ИначеЕсли ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.СообщениеМобильногоПриложения Тогда
		Если ТипЗнч(УведомлениеМенеджерЗаписи.Получатель) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Создавать напоминания можно только физическим лицам водителей.
			УведомлениеМенеджерЗаписи.Удалить();
			Возврат;
		КонецЕсли;
		
		РегистрыСведений.уатЧатыСВодителями.СоздатьСообщениеМобильногоПриложения(УведомлениеМенеджерЗаписи.Получатель, ИтоговыйТекстСообщения);
	Иначе
		// Неправильный тип сообщения
		УведомлениеМенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	// Теперь нужно удалить запись из регистра
	УведомлениеМенеджерЗаписи.Удалить();
	
	Если ПараметрыУведомления.ТипСобытия = Перечисления.уатТипыСобытийДляУведомления_уэ.ОбработкаСобытия Тогда
		
		Для Каждого ТекСтрока Из ПараметрыУведомления.Ссылка.ОбластиПрименения Цикл
			Если ТипЗнч(ТекСтрока.ЗначениеОбластиПрименения) = Тип("СправочникСсылка.уатТипыСобытий_уэ") Тогда
				Если ЗначениеЗаполнено(Событие) Тогда
					НаборЗаписей = РегистрыСведений.уатСобытияПоПеревозке_уэ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ТипСобытия.Установить(ТекСтрока.ЗначениеОбластиПрименения);
					НаборЗаписей.Отбор.ДокументПеревозки.Установить(ПараметрыУведомления.Документ);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() <> 0 Тогда
						НаборЗаписей[0].Событие = Событие;
						Попытка
							НаборЗаписей.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				ИначеЕсли ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.СообщениеМобильногоПриложения 
					ИЛИ ПараметрыУведомления.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.Напоминание Тогда
					НаборЗаписей = РегистрыСведений.уатСобытияПоПеревозке_уэ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ТипСобытия.Установить(ТекСтрока.ЗначениеОбластиПрименения);
					НаборЗаписей.Отбор.ДокументПеревозки.Установить(ПараметрыУведомления.Документ);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() <> 0 Тогда
						НаборЗаписей[0].ДатаФакт  = ТекущаяДатаСеанса();
						НаборЗаписей[0].Выполнено = Истина;
						Попытка
							НаборЗаписей.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает запись регистра сведений "Очередь уведомлений"
Процедура СформироватьУведомление(Документ, Событие, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ТекстСозданияУведомления") Тогда
		ДополнительныеПараметры.Вставить("ТекстСозданияУведомления", "");
	КонецЕсли;
	ТекстСозданияУведомления = "";
		
	мсвПравилаФормированияУведомлений = ПодобратьПравилаФормированияУведомлений(Документ, Событие, ДополнительныеПараметры);
	Если НЕ ЗначениеЗаполнено(мсвПравилаФормированияУведомлений) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ПравилоФормированияУведомлений Из мсвПравилаФормированияУведомлений Цикл
		Если НЕ ЗначениеЗаполнено(ПравилоФормированияУведомлений.НастройкаКомплектовДокументов) Тогда 
			мсвПолучатели = ПолучитьПолучателейПоПравилуФормированияУведомлений(ПравилоФормированияУведомлений, Документ, ДополнительныеПараметры);
			ШаблонСсылка = ПравилоФормированияУведомлений.ШаблонСообщения;
			
			НаборЗаписей = РегистрыСведений.уатОчередьУведомлений_уэ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Документ);
			НаборЗаписей.Отбор.ПравилоФормированияУведомлений.Установить(ПравилоФормированияУведомлений);
			
			ПараметрыСообщения = Новый Структура;
			Если ДополнительныеПараметры.Свойство("ДополнительныйДокумент") Тогда
				ПараметрыСообщения.Вставить("ДополнительныйДокумент", ДополнительныеПараметры.ДополнительныйДокумент);
				НаборЗаписей.Отбор.ДополнительныйДокумент.Установить(ДополнительныеПараметры.ДополнительныйДокумент);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("Статус") Тогда
				ПараметрыСообщения.Вставить("СтатусДокумента", ДополнительныеПараметры.Статус);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("ДатаУстановкиСтатуса") Тогда
				ПараметрыСообщения.Вставить("ДатаУстановкиСтатуса", ДополнительныеПараметры.ДатаУстановкиСтатуса);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("GUIDСтроки") Тогда
				ПараметрыСообщения.Вставить("GUIDСтрокиМЛ", ДополнительныеПараметры.GUIDСтроки);
				НаборЗаписей.Отбор.GUIDСтрокиМЛ.Установить(ДополнительныеПараметры.GUIDСтроки);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("ГрузовоеМесто") Тогда
				ПараметрыСообщения.Вставить("ГрузовоеМесто", ДополнительныеПараметры.ГрузовоеМесто);
				НаборЗаписей.Отбор.ГрузовоеМесто.Установить(ДополнительныеПараметры.ГрузовоеМесто);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("УбытиеПлан") Тогда
				ПараметрыСообщения.Вставить("УбытиеПлан", ДополнительныеПараметры.УбытиеПлан);
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ТемаПисьма") Тогда
				ПараметрыСообщения.Вставить("ТемаПисьма", ДополнительныеПараметры.ТемаПисьма);
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ТекстСообщения") Тогда
				ПараметрыСообщения.Вставить("ТекстСообщения", ДополнительныеПараметры.ТекстСообщения);
			КонецЕсли;
			
			ТекстСозданияУведомленияПолучатели = "";
			
			Для Каждого Получатель Из мсвПолучатели Цикл
				Если ПроверитьРазрешениеОтправкиУведомлений(Получатель, ПравилоФормированияУведомлений.ВидУведомления) Тогда
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, ПараметрыСообщения);
					Запись.Дата = ТекущаяДата();
					Запись.Документ = Документ;
					Запись.Получатель = Получатель;
					Запись.ПравилоФормированияУведомлений = ПравилоФормированияУведомлений;
					Запись.Шаблон = ШаблонСсылка;
					ТекстСозданияУведомленияПолучатели = ТекстСозданияУведомленияПолучатели + ", " + Получатель;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
			Если НЕ ПустаяСтрока(ТекстСозданияУведомленияПолучатели) Тогда
				ТекстСозданияУведомления = ТекстСозданияУведомления + Символы.ПС
				+ СтрШаблон(" ""%1"" для получателей %2",
				ПравилоФормированияУведомлений, Сред(ТекстСозданияУведомленияПолучатели, 3));
			КонецЕсли;
		Иначе
			// сначала формируем документы
			НастройкиКомплекта = ПравилоФормированияУведомлений.НастройкаКомплектовДокументов;
			СформироватьКомплектыДокументовПоНастройке(НастройкиКомплекта,Документ);
			мсвПолучатели = ПолучитьПолучателейПоПравилуФормированияУведомлений(ПравилоФормированияУведомлений, Документ, ДополнительныеПараметры);
			НастройкиПолучателейИзКомплекта = НастройкиКомплекта.НастройкиХранилище.Получить().СтруктураПолучатели;
			ШаблоныНастройкиКомплектаТЗ = Новый ТаблицаЗначений;
			ШаблоныНастройкиКомплектаТЗ.Колонки.Добавить("ШаблонЭлектронногоПисьма");
			Для каждого ЭлементМассива из НастройкиПолучателейИзКомплекта Цикл
				НоваяСтрокаТЗ = ШаблоныНастройкиКомплектаТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ,ЭлементМассива);
			КонецЦикла;
			ШаблоныНастройкиКомплектаТЗ.Свернуть("ШаблонЭлектронногоПисьма");
			Для каждого Шаблон из ШаблоныНастройкиКомплектаТЗ Цикл
				ШаблонСсылка = Шаблон.ШаблонЭлектронногоПисьма;
								
				НаборЗаписей = РегистрыСведений.уатОчередьУведомлений_уэ.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Документ);
				НаборЗаписей.Отбор.ПравилоФормированияУведомлений.Установить(ПравилоФормированияУведомлений);
				НаборЗаписей.Отбор.Шаблон.Установить(ШаблонСсылка);
				
				ПараметрыСообщения = Новый Структура;
				Если ДополнительныеПараметры.Свойство("ДополнительныйДокумент") Тогда
					ПараметрыСообщения.Вставить("ДополнительныйДокумент", ДополнительныеПараметры.ДополнительныйДокумент);
					НаборЗаписей.Отбор.ДополнительныйДокумент.Установить(ДополнительныеПараметры.ДополнительныйДокумент);
				КонецЕсли;
				Если ДополнительныеПараметры.Свойство("Статус") Тогда
					ПараметрыСообщения.Вставить("СтатусДокумента", ДополнительныеПараметры.Статус);
				КонецЕсли;
				Если ДополнительныеПараметры.Свойство("ДатаУстановкиСтатуса") Тогда
					ПараметрыСообщения.Вставить("ДатаУстановкиСтатуса", ДополнительныеПараметры.ДатаУстановкиСтатуса);
				КонецЕсли;
				Если ДополнительныеПараметры.Свойство("GUIDСтроки") Тогда
					ПараметрыСообщения.Вставить("GUIDСтрокиМЛ", ДополнительныеПараметры.GUIDСтроки);
					НаборЗаписей.Отбор.GUIDСтрокиМЛ.Установить(ДополнительныеПараметры.GUIDСтроки);
				КонецЕсли;
				Если ДополнительныеПараметры.Свойство("ГрузовоеМесто") Тогда
					ПараметрыСообщения.Вставить("ГрузовоеМесто", ДополнительныеПараметры.ГрузовоеМесто);
					НаборЗаписей.Отбор.ГрузовоеМесто.Установить(ДополнительныеПараметры.ГрузовоеМесто);
				КонецЕсли;
				Если ДополнительныеПараметры.Свойство("УбытиеПлан") Тогда
					ПараметрыСообщения.Вставить("УбытиеПлан", ДополнительныеПараметры.УбытиеПлан);
				КонецЕсли;
				
				Если ДополнительныеПараметры.Свойство("ТемаПисьма") Тогда
					ПараметрыСообщения.Вставить("ТемаПисьма", ДополнительныеПараметры.ТемаПисьма);
				КонецЕсли;
				
				Если ДополнительныеПараметры.Свойство("ТекстСообщения") Тогда
					ПараметрыСообщения.Вставить("ТекстСообщения", ДополнительныеПараметры.ТекстСообщения);
				КонецЕсли;
				
				ТекстСозданияУведомленияПолучатели = "";
				
				Для Каждого Получатель Из мсвПолучатели Цикл
					Если ПроверитьРазрешениеОтправкиУведомлений(Получатель, ПравилоФормированияУведомлений.ВидУведомления) Тогда
						// проверяем что это нужный шаблон для текущего получателя
						Если ПроверитьСоответствиеШаблонаИПолучателя(ШаблонСсылка, Получатель, НастройкиПолучателейИзКомплекта, Документ) Тогда
							Запись = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(Запись, ПараметрыСообщения);
							Запись.Дата = ТекущаяДата();
							Запись.Документ = Документ;
							Запись.Получатель = Получатель;
							Запись.ПравилоФормированияУведомлений = ПравилоФормированияУведомлений;
							Запись.Шаблон = ШаблонСсылка;
							ТекстСозданияУведомленияПолучатели = ТекстСозданияУведомленияПолучатели + ", " + Получатель;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Записать(Истина);
				
				Если НЕ ПустаяСтрока(ТекстСозданияУведомленияПолучатели) Тогда
					ТекстСозданияУведомления = ТекстСозданияУведомления + Символы.ПС
					+ СтрШаблон(" ""%1"" для получателей %2",
					ПравилоФормированияУведомлений, Сред(ТекстСозданияУведомленияПолучатели, 3));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстСозданияУведомления) Тогда
		ТекстСозданияУведомления = Сред(ТекстСозданияУведомления, 2);
		Если СтрНайти(ТекстСозданияУведомления, Символы.ПС) = 0 Тогда // одно уведомление
			ДополнительныеПараметры.ТекстСозданияУведомления = "Создано уведомление" + ТекстСозданияУведомления;
		Иначе // 2 и более уведомлений
			ДополнительныеПараметры.ТекстСозданияУведомления = "Созданы уведомления" + ТекстСозданияУведомления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив правил формирования уведомлений для данного типа события документа
Функция ПодобратьПравилаФормированияУведомлений(Документ, ТипСобытия, ДополнительныеПараметры)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПравилаФормированияУведомлений_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПравилаФормированияУведомлений_уэ КАК уатПравилаФормированияУведомлений_уэ
	|ГДЕ
	|	уатПравилаФормированияУведомлений_уэ.ПравилоИспользуется = ИСТИНА
	|	И уатПравилаФормированияУведомлений_уэ.ПометкаУдаления = ЛОЖЬ
	|	И уатПравилаФормированияУведомлений_уэ.ТипСобытия = &ТипСобытия
	|	И уатПравилаФормированияУведомлений_уэ.ТипОбъекта = &ТипОбъекта");
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатПотребностьВПеревозке_уэ") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатТендер_уэ") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.Тендер;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.АктОтгрузки;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.АктПриемки;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.уатТС") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ТС;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.уатСопроводительныеДокументы") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ПакетСопроводительныхДокументов;
	Иначе
		ТипОбъекта = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ПустаяСсылка();
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия);
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвПравилаФормированияУведомлений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если ПравилоФормированияУведомленийВОбластиПрименения(Выборка.Ссылка, Документ, ДополнительныеПараметры) Тогда
			мсвПравилаФормированияУведомлений.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат мсвПравилаФормированияУведомлений;
	
КонецФункции

// Функция проверяет, находится ли документ в области применения правила формирования уведомлений
Функция ПравилоФормированияУведомленийВОбластиПрименения(Правило, Документ, ДополнительныеПараметры)
	
	ПравилоПодходит                 = Истина;
	флАдресОтправленияВСписке       = Неопределено;
	флАдресПрибытияВСписке          = Неопределено;
	флВидДоставкиВСписке            = Неопределено;
	флВидПеревозкиВСписке           = Неопределено;
	флДоговорВСписке                = Неопределено;
	флКонтрагентВСписке             = Неопределено;
	флМаршрутВСписке                = Неопределено;
	флНаправлениеПеревозкиВСписке   = Неопределено;
	флОбъектСтроительстваВСписке    = Неопределено;
	флОрганизацияВСписке            = Неопределено;
	флОтветственныйВСписке          = Неопределено;
	флОтправительВСписке            = Неопределено;
	флПолучательВСписке             = Неопределено;
	флСтатусВСписке                 = Неопределено;
	флСтатусОтправленияВСписке      = Неопределено;
	флСтатусПолученияВСписке        = Неопределено;
	
	флПунктВСписке                  = Неопределено;
	флТипПунктаВСписке              = Неопределено;
	флТипТочкиМаршрутаВСписке       = Неопределено;
	
	флАдресОтправленияЗаказаВСписке = Неопределено;
	флАдресПрибытияЗаказаВСписке    = Неопределено;
	флДоговорЗаказаВСписке          = Неопределено;
	флКонтрагентЗаказаВСписке       = Неопределено;
	флОтправительЗаказаВСписке      = Неопределено;
	флПолучательЗаказаВСписке       = Неопределено;
	флСкладВСписке                  = Неопределено;
	флВладелецДокументаВСписке      = Неопределено;
	флТипСобытияВСписке             = Неопределено;

	Если ДополнительныеПараметры.Свойство("ДополнительныйДокумент")
		И ТипЗнч(ДополнительныеПараметры.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		И ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		
		флСтрокаМаршрутногоЛиста = Истина;
		ПараметрыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныеПараметры.ДополнительныйДокумент,
			"АдресОтправления, АдресНазначения, ДоговорКонтрагента, Контрагент, Грузоотправитель, Грузополучатель",
			Истина
		);
	Иначе	
		флСтрокаМаршрутногоЛиста = Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Статус") Тогда
		Статус = ДополнительныеПараметры.Статус;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатПотребностьВПеревозке_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ") Тогда
		Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СтатусВыполнения");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Статус");
	Иначе
		Статус = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
		СтатусОтправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СтатусОтправления");
		СтатусПолучения   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СтатусПолучения");
	Иначе
		СтатусОтправления = Неопределено;
		СтатусПолучения   = Неопределено;
	КонецЕсли;
	
	Пункт            = Неопределено;
	ТипПункта        = Неопределено;
	ТипТочкиМаршрута = Неопределено;
	ТипСобытия       = Неопределено;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ") Тогда
		Пункт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Пункт");
		ТипПункта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пункт, "ТипПункта");
	Иначе
		ДополнительныеПараметры.Свойство("Пункт",            Пункт);
		ДополнительныеПараметры.Свойство("ТипПункта",        ТипПункта);
		ДополнительныеПараметры.Свойство("ТипТочкиМаршрута", ТипТочкиМаршрута);
		ДополнительныеПараметры.Свойство("ТипСобытия",       ТипСобытия);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Правило.ОбластиПрименения Цикл
		
		Если НЕ ПравилоПодходит Тогда
			Прервать;
		КонецЕсли;
		
		// Области действия "Равно"
		Если ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.АдресОтправления;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.АдресНазначения;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.ВидДоставки;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.ВидПеревозки;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ДоговорРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.ДоговорКонтрагента;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.КонтрагентРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Контрагент;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.МаршрутРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Маршрут;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.НаправлениеПеревозки;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.ОбъектСтроительства;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОрганизацияРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Организация;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОтветственныйРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Ответственный;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОтправительРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Грузоотправитель;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ПолучательРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Грузополучатель;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СтатусРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Статус;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = СтатусОтправления;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = СтатусПолучения;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ПунктРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Пункт;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ТипПунктаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ТипПункта;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ТипТочкиМаршрута;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.АдресОтправления;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.АдресНазначения;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.ДоговорКонтрагента;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.Контрагент;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.Грузоотправитель;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.Грузополучатель;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СкладРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.Склад;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = Документ.ВладелецДокумента;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ТипСобытияРавно Тогда
			ПравилоПодходит = ТекСтрока.ЗначениеОбластиПрименения = ТипСобытия;
		КонецЕсли;
		
		// Области действия "В списке"
		Если ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.АдресОтправления Тогда
				флАдресОтправленияВСписке = Истина
			Иначе
				флАдресОтправленияВСписке = ?(флАдресОтправленияВСписке = Истина, Истина, Ложь);
			КонецЕсли;	
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.АдресНазначения Тогда
				флАдресПрибытияВСписке = Истина
			Иначе
				флАдресПрибытияВСписке = ?(флАдресПрибытияВСписке = Истина, Истина, Ложь);
			КонецЕсли;	
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ВидДоставкиВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.ВидДоставки Тогда
				флВидДоставкиВСписке = Истина
			Иначе
				флВидДоставкиВСписке = ?(флВидДоставкиВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ВидПеревозкиВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.ВидПеревозки Тогда
				флВидПеревозкиВСписке = Истина
			Иначе
				флВидПеревозкиВСписке = ?(флВидПеревозкиВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ДоговорВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.ДоговорКонтрагента Тогда
				флДоговорВСписке = Истина
			Иначе
				флДоговорВСписке = ?(флДоговорВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.КонтрагентВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Контрагент Тогда
				флКонтрагентВСписке = Истина
			Иначе
				флКонтрагентВСписке = ?(флКонтрагентВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.МаршрутВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Маршрут Тогда
				флМаршрутВСписке = Истина
			Иначе
				флМаршрутВСписке = ?(флМаршрутВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.НаправлениеПеревозкиВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.НаправлениеПеревозки Тогда
				флНаправлениеПеревозкиВСписке = Истина
			Иначе
				флНаправлениеПеревозкиВСписке = ?(флНаправлениеПеревозкиВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОбъектСтроительстваВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.ОбъектСтроительства Тогда
				флОбъектСтроительстваВСписке = Истина
			Иначе
				флОбъектСтроительстваВСписке = ?(флОбъектСтроительстваВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОрганизацияВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Организация Тогда
				флОрганизацияВСписке = Истина
			Иначе
				флОрганизацияВСписке = ?(флОрганизацияВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОтветственныйВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Ответственный Тогда
				флОтветственныйВСписке = Истина
			Иначе
				флОтветственныйВСписке = ?(флОтветственныйВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОтправительВСписке Тогда
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
				Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Отправитель Тогда
					флОтправительВСписке = Истина;
				Иначе
					флОтправительВСписке = ?(флОтправительВСписке = Истина, Истина, Ложь);
				КонецЕсли;
			Иначе
				Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Грузоотправитель Тогда
					флОтправительВСписке = Истина
				Иначе
					флОтправительВСписке = ?(флОтправительВСписке = Истина, Истина, Ложь);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ПолучательВСписке Тогда
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
				Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Получатель Тогда
					флПолучательВСписке = Истина
				Иначе
					флПолучательВСписке = ?(флПолучательВСписке = Истина, Истина, Ложь);
				КонецЕсли;
			Иначе
				Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Грузополучатель Тогда
					флПолучательВСписке = Истина
				Иначе
					флПолучательВСписке = ?(флПолучательВСписке = Истина, Истина, Ложь);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СтатусВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Статус Тогда
				флСтатусВСписке = Истина
			Иначе
				флСтатусВСписке = ?(флСтатусВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СтатусОтправленияВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = СтатусОтправления Тогда
				флСтатусОтправленияВСписке = Истина;
			Иначе
				флСтатусОтправленияВСписке = ?(флСтатусОтправленияВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СтатусПолученияВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = СтатусПолучения Тогда
				флСтатусПолученияВСписке = Истина;
			Иначе
				флСтатусПолученияВСписке = ?(флСтатусПолученияВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ПунктВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Пункт Тогда
				флПунктВСписке = Истина
			Иначе
				флПунктВСписке = ?(флПунктВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ТипПунктаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ТипПункта Тогда
				флТипПунктаВСписке = Истина
			Иначе
				флТипПунктаВСписке = ?(флТипПунктаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ТипТочкиМаршрутаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ТипТочкиМаршрута Тогда
				флТипТочкиМаршрутаВСписке = Истина
			Иначе
				флТипТочкиМаршрутаВСписке = ?(флТипТочкиМаршрутаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресОтправленияЗаказаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.АдресОтправления Тогда
				флАдресОтправленияЗаказаВСписке = Истина
			Иначе
				флАдресОтправленияЗаказаВСписке = ?(флАдресОтправленияЗаказаВСписке = Истина, Истина, Ложь);
			КонецЕсли;	
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.АдресПрибытияЗаказаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.АдресНазначения Тогда
				флАдресПрибытияЗаказаВСписке = Истина
			Иначе
				флАдресПрибытияЗаказаВСписке = ?(флАдресПрибытияЗаказаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ДоговорЗаказаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.ДоговорКонтрагента Тогда
				флДоговорЗаказаВСписке = Истина
			Иначе
				флДоговорЗаказаВСписке = ?(флДоговорЗаказаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.КонтрагентЗаказаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.Контрагент Тогда
				флКонтрагентЗаказаВСписке = Истина
			Иначе
				флКонтрагентЗаказаВСписке = ?(флКонтрагентЗаказаВСписке = Истина, Истина, Ложь);
			КонецЕсли;	
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ОтправительЗаказаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.Грузоотправитель Тогда
				флОтправительЗаказаВСписке = Истина
			Иначе
				флОтправительЗаказаВСписке = ?(флОтправительЗаказаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли флСтрокаМаршрутногоЛиста
			И ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ПолучательЗаказаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ПараметрыЗаказа.Грузополучатель Тогда
				флПолучательЗаказаВСписке = Истина
			Иначе
				флПолучательЗаказаВСписке = ?(флПолучательЗаказаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ТипСобытияВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = ТипСобытия Тогда
				флТипСобытияВСписке = Истина;
			Иначе
				флТипСобытияВСписке = ?(флТипСобытияВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.СкладВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.Склад Тогда
				флСкладВСписке = Истина
			Иначе
				флСкладВСписке = ?(флСкладВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		ИначеЕсли ТекСтрока.ВидОбластиПрименения = Перечисления.уатВидыОбластейПримененияПравил_уэ.ВладелецДокументаВСписке Тогда
			Если ТекСтрока.ЗначениеОбластиПрименения = Документ.ВладелецДокумента Тогда
				флВладелецДокументаВСписке = Истина;
			Иначе
				флВладелецДокументаВСписке = ?(флВладелецДокументаВСписке = Истина, Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если фильтр "В списке" по какой-то области не указан, то проверка по этой области успешна
	флАдресОтправленияВСписке       = ?(флАдресОтправленияВСписке        = Неопределено, Истина, флАдресОтправленияВСписке);
	флАдресПрибытияВСписке          = ?(флАдресПрибытияВСписке           = Неопределено, Истина, флАдресПрибытияВСписке);
	флВидДоставкиВСписке            = ?(флВидДоставкиВСписке             = Неопределено, Истина, флВидДоставкиВСписке);
	флВидПеревозкиВСписке           = ?(флВидПеревозкиВСписке            = Неопределено, Истина, флВидПеревозкиВСписке);
	флДоговорВСписке                = ?(флДоговорВСписке                 = Неопределено, Истина, флДоговорВСписке);
	флКонтрагентВСписке             = ?(флКонтрагентВСписке              = Неопределено, Истина, флКонтрагентВСписке);
	флМаршрутВСписке                = ?(флМаршрутВСписке                 = Неопределено, Истина, флМаршрутВСписке);
	флНаправлениеПеревозкиВСписке   = ?(флНаправлениеПеревозкиВСписке    = Неопределено, Истина, флНаправлениеПеревозкиВСписке);
	флОбъектСтроительстваВСписке    = ?(флОбъектСтроительстваВСписке     = Неопределено, Истина, флОбъектСтроительстваВСписке);
	флОрганизацияВСписке            = ?(флОрганизацияВСписке             = Неопределено, Истина, флОрганизацияВСписке);
	флОтветственныйВСписке          = ?(флОтветственныйВСписке           = Неопределено, Истина, флОтветственныйВСписке);
	флОтправительВСписке            = ?(флОтправительВСписке             = Неопределено, Истина, флОтправительВСписке);
	флПолучательВСписке             = ?(флПолучательВСписке              = Неопределено, Истина, флПолучательВСписке);
	флСтатусВСписке                 = ?(флСтатусВСписке                  = Неопределено, Истина, флСтатусВСписке);
	флСтатусОтправленияВСписке      = ?(флСтатусОтправленияВСписке       = Неопределено, Истина, флСтатусОтправленияВСписке);
	флСтатусПолученияВСписке        = ?(флСтатусПолученияВСписке         = Неопределено, Истина, флСтатусПолученияВСписке);
	флПунктВСписке                  = ?(флПунктВСписке                   = Неопределено, Истина, флПунктВСписке);
	флТипПунктаВСписке              = ?(флТипПунктаВСписке               = Неопределено, Истина, флТипПунктаВСписке);
	флТипТочкиМаршрутаВСписке       = ?(флТипТочкиМаршрутаВСписке        = Неопределено, Истина, флТипТочкиМаршрутаВСписке);
	флСкладВСписке                  = ?(флСкладВСписке                   = Неопределено, Истина, флСкладВСписке);
	
	флАдресОтправленияЗаказаВСписке = ?(флАдресОтправленияЗаказаВСписке  = Неопределено, Истина, флАдресОтправленияЗаказаВСписке);
	флАдресПрибытияЗаказаВСписке    = ?(флАдресПрибытияЗаказаВСписке     = Неопределено, Истина, флАдресПрибытияЗаказаВСписке);
	флДоговорЗаказаВСписке          = ?(флДоговорЗаказаВСписке           = Неопределено, Истина, флДоговорЗаказаВСписке);
	флКонтрагентЗаказаВСписке       = ?(флКонтрагентЗаказаВСписке        = Неопределено, Истина, флКонтрагентЗаказаВСписке);
	флОтправительЗаказаВСписке      = ?(флОтправительЗаказаВСписке       = Неопределено, Истина, флОтправительЗаказаВСписке);
	флПолучательЗаказаВСписке       = ?(флПолучательЗаказаВСписке        = Неопределено, Истина, флПолучательЗаказаВСписке);
	флВладелецДокументаВСписке      = ?(флВладелецДокументаВСписке       = Неопределено, Истина, флВладелецДокументаВСписке);
	флТипСобытияВСписке             = ?(флТипСобытияВСписке       = Неопределено, Истина, флТипСобытияВСписке);
	
	Возврат ПравилоПодходит И флАдресОтправленияВСписке И флАдресПрибытияВСписке И флВидДоставкиВСписке
		И флВидПеревозкиВСписке И флДоговорВСписке И флКонтрагентВСписке И флМаршрутВСписке 
		И флНаправлениеПеревозкиВСписке И флОбъектСтроительстваВСписке И флОрганизацияВСписке
		И флОтветственныйВСписке И флОтправительВСписке И флПолучательВСписке
		И флАдресОтправленияЗаказаВСписке И флАдресПрибытияЗаказаВСписке И флДоговорЗаказаВСписке
		И флКонтрагентЗаказаВСписке И флОтправительЗаказаВСписке И флПолучательЗаказаВСписке
		И флСтатусВСписке И флПунктВСписке И флТипПунктаВСписке И флТипТочкиМаршрутаВСписке И флСкладВСписке
		И флСтатусОтправленияВСписке И флСтатусПолученияВСписке И флВладелецДокументаВСписке И флТипСобытияВСписке;
	
КонецФункции

// Функция получает массив получателей по правилу формирования уведомлений и документу
Функция ПолучитьПолучателейПоПравилуФормированияУведомлений(Правило, Документ, ДополнительныеПараметры)
	
	мсвПолучатели = Новый Массив;
	
	ПолучателиУведомлений = Правило.ПолучателиУведомлений;
	ВидУведомления = Правило.ВидУведомления;
	
	Если ЗначениеЗаполнено(Правило.НастройкаКомплектовДокументов) Тогда
		НастройкиКомплекта = Правило.НастройкаКомплектовДокументов.НастройкиХранилище.Получить();
		ПолучателиУведомлений = НастройкиКомплекта.СтруктураПолучатели;
		ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо;
	Иначе
		ПолучателиУведомлений = Правило.ПолучателиУведомлений;
		ВидУведомления = Правило.ВидУведомления;
	КонецЕсли;	
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.уатТС") Тогда
		Если ЗначениеЗаполнено(Документ.ПолучательУведомленийПриОтсутствииДанных) Тогда
			мсвПолучатели.Добавить(Документ.ПолучательУведомленийПриОтсутствииДанных);
		КонецЕсли;
	Иначе
		Для Каждого ТекСтрока Из Документ.ПолучателиУведомлений Цикл
			// Получатели могут быть запрещены в документе
			Если Не ТекСтрока.ПосылатьУведомления Тогда
				Продолжить;
			КонецЕсли;
			
			// Если получатель взят из заказа одной из строк Маршрутного листа, то он применяется 
			// либо для всего документа в целом, либо для строки, содержащей этот заказ
			Если (ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист")
				Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
				Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ"))
				И ДополнительныеПараметры.Свойство("ДополнительныйДокумент")
				И ТипЗнч(ДополнительныеПараметры.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
				И ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучательИзЗаказа Тогда 
				
				// Для каждого индивидуального получателя из Заказа на ТС надо проверить, есть ли он в Заказе из текущей строки,
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказГрузоотправителяПолучателиУведомлений.Значение КАК Значение
				|ИЗ
				|	Документ.уатЗаказГрузоотправителя.ПолучателиУведомлений КАК уатЗаказГрузоотправителяПолучателиУведомлений
				|ГДЕ
				|	уатЗаказГрузоотправителяПолучателиУведомлений.Ссылка = &Ссылка
				|	И уатЗаказГрузоотправителяПолучателиУведомлений.ТипПолучателя = &ТипПолучателя");
				Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДополнительныйДокумент);
				Запрос.УстановитьПараметр("ТипПолучателя", Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель);
				Выборка = Запрос.Выполнить().Выбрать();
				ПолучательЕстьВТекущейСтроке = Ложь;
								
				Пока Выборка.Следующий() И Не ПолучательЕстьВТекущейСтроке Цикл
					ПолучательЕстьВТекущейСтроке = ПолучательЕстьВТекущейСтроке ИЛИ (Выборка.Значение = ТекСтрока.Значение);
				КонецЦикла;

			
				Если Не ПолучательЕстьВТекущейСтроке Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист")
				Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
				Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ"))
				И ДополнительныеПараметры.Свойство("ДополнительныйДокумент")
				И ТипЗнч(ДополнительныеПараметры.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
				И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.Водитель
				И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.Перевозчик
				И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика 
				И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель
				И (ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.Ответственный
				ИЛИ ТекСтрока.Значение <> Документ.Ответственный) Тогда
				
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
				|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя КАК КонтактноеЛицоГрузоотправителя,
				|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
				|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя КАК КонтактноеЛицоГрузополучателя,
				|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
				|	уатЗаказГрузоотправителя.Ответственный КАК Ответственный,
				|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.Грузоотправитель КАК Справочник.Контрагенты).ОсновнойМенеджерПокупателя КАК ОтветственныйМенеджерГрузоотправителя,
				|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.Грузополучатель КАК Справочник.Контрагенты).ОсновнойМенеджерПокупателя КАК ОтветственныйМенеджерГрузополучателя,
				|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.Контрагент КАК Справочник.Контрагенты).ОсновнойМенеджерПокупателя КАК ОтветственныйМенеджерКонтрагента
				|ИЗ
				|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
				|ГДЕ
				|	уатЗаказГрузоотправителя.Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДополнительныйДокумент);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() И ((ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Грузоотправитель
					И ТекСтрока.Значение <> Выборка.Грузоотправитель)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Грузополучатель
					И ТекСтрока.Значение <> Выборка.Грузополучатель)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя
					И ТекСтрока.Значение <> Выборка.КонтактноеЛицоГрузоотправителя)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя
					И ТекСтрока.Значение <> Выборка.КонтактноеЛицоГрузополучателя)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя
					И ТекСтрока.Значение <> Выборка.ОтветственныйМенеджерГрузоотправителя)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя
					И ТекСтрока.Значение <> Выборка.ОтветственныйМенеджерГрузополучателя)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента
					И ТекСтрока.Значение <> Выборка.ОтветственныйМенеджерКонтрагента)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Контрагент
					И ТекСтрока.Значение <> Выборка.Контрагент)
					ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Ответственный
					И ТекСтрока.Значение <> Выборка.Ответственный И ТекСтрока.Значение <> Документ.Ответственный)) Тогда
					// Получатель не имеет отношения к текущей строке Маршрутного листа
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель
				ИЛИ ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучательИзЗаказа Тогда
				// Добавление индивидуальных получателей из документа, если у них подходящий тип контактной информации
				Если ТекСтрока.ВидУведомления = ВидУведомления 
					ИЛИ Не ЗначениеЗаполнено(ТекСтрока.ВидУведомления) Тогда
					мсвПолучатели.Добавить(ТекСтрока.Значение);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Правило.НастройкаКомплектовДокументов) Тогда
					Для каждого ЭлементМассива из ПолучателиУведомлений Цикл
						Если ЭлементМассива.ТипПолучателя = ТекСтрока.ТипПолучателя Тогда
							мсвПолучатели.Добавить(ТекСтрока.Значение);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если ПолучателиУведомлений.Найти(ТекСтрока.ТипПолучателя,"ТипПолучателя") <> Неопределено Тогда
						// Добавление неиндивидуальных получателей из документа, если это разрешено правилом
						мсвПолучатели.Добавить(ТекСтрока.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Добавление индивидуальных получателей из справочника, если у них подходящий тип контактной информации
	Если ЗначениеЗаполнено(Правило.НастройкаКомплектовДокументов) Тогда
		Для Каждого ТекСтрока Из ПолучателиУведомлений Цикл
			Если ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель Тогда
				мсвПолучатели.Добавить(ТекСтрока.Получатель);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из ПолучателиУведомлений Цикл
			Если ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель Тогда
				мсвПолучатели.Добавить(ТекСтрока.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Свертка массива получателей
	СвернутыйМассивПолучатели = Новый Массив;
	Для Каждого ТекПолучатель Из мсвПолучатели Цикл
		Если СвернутыйМассивПолучатели.Найти(ТекПолучатель) = Неопределено Тогда
			СвернутыйМассивПолучатели.Добавить(ТекПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвернутыйМассивПолучатели;
	
КонецФункции

// Процедура формирует сообщения по записям в регистре сведений "Очередь уведомлений".
// Вызывается регламентным заданием "Рассылка уведомлений".
Процедура РассылкаУведомлений() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	// Уведомления рассылаются не раньше, чем через 10 минут после формирования записи в регистре.
	ЗадержкаРассылкиУведомлений = 600;
	МаксимальнаяДата = ТекущаяДата() - ЗадержкаРассылкиУведомлений;
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Sending notifications';ru='Рассылка уведомлений'");
	
	ТекстНСТР = НСтр("en='Creating message texts';ru='Заполнение текстов сообщений'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	НаборЗаписей = РегистрыСведений.уатОчередьУведомлений_уэ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	тзУникальныеУведомления = Новый ТаблицаЗначений;
	тзУникальныеУведомления.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	тзУникальныеУведомления.Колонки.Добавить("ТемаПисьма", Новый ОписаниеТипов("Строка"));
	тзУникальныеУведомления.Колонки.Добавить("ВидУведомления", Новый ОписаниеТипов("СправочникСсылка.уатСпособыВзаимодействий_уэ"));
	тзУникальныеУведомления.Колонки.Добавить("Получатель");
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.Дата > МаксимальнаяДата Тогда
			Продолжить;
		КонецЕсли;
		
		// Формирование текста сообщения
		Если Не ЗначениеЗаполнено(Запись.ТекстСообщения)
			Или ((Запись.ПравилоФормированияУведомлений.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо или Запись.ПравилоФормированияУведомлений.ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ОформлениеКомплектаДокументов)
			И Не ЗначениеЗаполнено(Запись.ТемаПисьма)) Тогда
			ПараметрыСообщения = Новый Структура("ДополнительныйДокумент, GUIDСтрокиМЛ, ДатаУстановкиСтатуса, СтатусДокумента, УбытиеПлан, ГрузовоеМесто");
			ЗаполнитьЗначенияСвойств(ПараметрыСообщения, Запись);
			Сообщение = ШаблоныСообщений.СформироватьСообщение(
							Запись.Шаблон,
							Запись.Документ,
							Новый УникальныйИдентификатор,
							ПараметрыСообщения
						);
			Если Не ЗначениеЗаполнено(Запись.ТекстСообщения) Тогда
				Запись.ТекстСообщения = Сообщение.Текст;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.ТемаПисьма) Тогда
				Запись.ТемаПисьма = Сообщение.Тема;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка наличия дубликата уведомления в наборе записей
		ПараметрыПоиска = Новый Структура("ТекстСообщения, ТемаПисьма, Получатель, ВидУведомления");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Запись);
		ПараметрыПоиска.ВидУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ПравилоФормированияУведомлений, "ВидУведомления");
		
		Если тзУникальныеУведомления.НайтиСтроки(ПараметрыПоиска).Количество() > 0 Тогда
			// Сообщение не уникально
			НаборЗаписей.Удалить(Запись);
		Иначе
			НовоеУникальноеУведомление = тзУникальныеУведомления.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеУникальноеУведомление, ПараметрыПоиска);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	ТекстНСТР = НСтр("en='Beginning to send';ru='Начало рассылки уведомлений'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Не Запись.Дата > МаксимальнаяДата Тогда
			Попытка
				УведомлениеМенеджерЗаписи = РегистрыСведений.уатОчередьУведомлений_уэ.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(УведомлениеМенеджерЗаписи, Запись);
				УведомлениеМенеджерЗаписи.Прочитать();
				ОбработатьУведомление(УведомлениеМенеджерЗаписи);
			Исключение
				ТекстНСТР = НСтр("en='An error has occurred ';ru='Произошла ошибка при формировании уведомления '")
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ТекстНСТР);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНСТР = НСтр("en='Sending finished';ru='Окончание рассылки уведомлений'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

// Функция формирует список получателей уведомлений по документу
Функция СформироватьСписокПолучателейУведомлений(Документ, ТипДокумента = Неопределено) Экспорт
	
	ПолучателиУведомлений = Документ.ПолучателиУведомлений;
	ПараметрыОтбора = Новый Структура("ТипПолучателя, Значение");
	тблВладельцыКонтактныхЛиц = Новый ТаблицаЗначений;
	тблВладельцыКонтактныхЛиц.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	тблВладельцыКонтактныхЛиц.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыПолучателейУведомлений_уэ"));
	
	// Тип документа
	флЗаказНаТС = ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатЗаказГрузоотправителя")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС;
	флЗаказПеревозчику = ТипЗнч(Документ) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатЗаказПеревозчику_уэ")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику;
	флМаршрутныйЛист = ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатМаршрутныйЛист")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист;
	флПотребностьВПеревозке = ТипЗнч(Документ) = Тип("ДокументСсылка.уатПотребностьВПеревозке_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатПотребностьВПеревозке_уэ")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке;
	флСтраховойСертификат    = ТипЗнч(Документ) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатСтраховойСертификат_уэ")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат;
	флТендер = ТипЗнч(Документ) = Тип("ДокументСсылка.уатТендер_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатТендер_уэ")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.Тендер;
	флАктПриемки = ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатАктПриемки_уэ")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.АктПриемки;
	флАктОтгрузки = ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатАктОтгрузки_уэ")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.АктОтгрузки;
	флТС = ТипЗнч(Документ) = Тип("СправочникСсылка.уатТС")
		Или ТипЗнч(Документ) = Тип("СправочникОбъект.уатТС")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ТС;
	флСопроводительныйДокумент = ТипЗнч(Документ) = Тип("СправочникСсылка.уатСопроводительныеДокументы")
		Или ТипЗнч(Документ) = Тип("СправочникОбъект.уатСопроводительныеДокументы")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент;
	флПакетСД = ТипЗнч(Документ) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов")
		Или ТипЗнч(Документ) = Тип("ДокументОбъект.уатПакетСопроводительныхДокументов")
		Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") И ТипДокумента = Перечисления.уатТипыОбъектовДляУведомлений_уэ.ПакетСопроводительныхДокументов;
		
	// Удаляем все строки, кроме добавленных пользователем вручную
	Сч = ПолучателиУведомлений.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если ПолучателиУведомлений[Сч].ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель
			И ПолучателиУведомлений[Сч].ПосылатьУведомления Тогда
			ПолучателиУведомлений.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// Ответственный
	Если флСопроводительныйДокумент Тогда
		Если ЗначениеЗаполнено(Документ.Основание) И ЗначениеЗаполнено(Документ.Основание.Ответственный) Тогда
			ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Основание.Ответственный, Перечисления.уатТипыПолучателейУведомлений_уэ.Ответственный);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Документ.Ответственный) Тогда
			ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Ответственный, Перечисления.уатТипыПолучателейУведомлений_уэ.Ответственный);
		КонецЕсли;
	КонецЕсли;
	
	// Контрагент, его контактное лицо и ответственный менеджер
	Если (флПотребностьВПеревозке Или флЗаказНаТС Или флСтраховойСертификат) И ЗначениеЗаполнено(Документ.Контрагент) Тогда
		Если флСтраховойСертификат Тогда
			ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Страховщик;
		Иначе
			ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Контрагент;
		КонецЕсли;
		Если ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Контрагент, ТипПолучателя) 
			И ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент, 
				"ОсновноеКонтактноеЛицо, ОсновнойМенеджерПокупателя", Истина);
			КонтактноеЛицоКонтрагента = РеквизитыКонтрагента.ОсновноеКонтактноеЛицо;
			ОтветственныйМенеджерКонтрагента = РеквизитыКонтрагента.ОсновнойМенеджерПокупателя;
			Если флПотребностьВПеревозке И ЗначениеЗаполнено(КонтактноеЛицоКонтрагента) Тогда 
				ДобавитьОдногоПолучателя(ПолучателиУведомлений, КонтактноеЛицоКонтрагента, Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоКонтрагента);
			ИначеЕсли флСтраховойСертификат И ЗначениеЗаполнено(КонтактноеЛицоКонтрагента) Тогда 
				ДобавитьОдногоПолучателя(ПолучателиУведомлений, КонтактноеЛицоКонтрагента, Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоСтраховщика);
			КонецЕсли;
			Если (флПотребностьВПеревозке Или флЗаказНаТС) И ЗначениеЗаполнено(ОтветственныйМенеджерКонтрагента) Тогда
				ДобавитьОдногоПолучателя(ПолучателиУведомлений, ОтветственныйМенеджерКонтрагента, 
					Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента);
			ИначеЕсли флСтраховойСертификат И ЗначениеЗаполнено(ОтветственныйМенеджерКонтрагента) Тогда
				ДобавитьОдногоПолучателя(ПолучателиУведомлений, ОтветственныйМенеджерКонтрагента, 
					Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерСтраховщика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если флЗаказНаТС И ЗначениеЗаполнено(Документ.Грузоотправитель) 
		И ТипЗнч(Документ.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		// Грузоотправитель
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Грузоотправитель, Перечисления.уатТипыПолучателейУведомлений_уэ.Грузоотправитель);
		
		// Ответственный менеджер грузоотправителя
		ОтветственныйМенеджерГрузоотправителя = Документ.Грузоотправитель.ОсновнойМенеджерПокупателя;
		Если ЗначениеЗаполнено(ОтветственныйМенеджерГрузоотправителя) Тогда
			ДобавитьОдногоПолучателя(ПолучателиУведомлений, ОтветственныйМенеджерГрузоотправителя, 
				Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя);
		КонецЕсли;
	КонецЕсли;
	
	// Контактное лицо грузоотправителя
	Если флЗаказНаТС И ЗначениеЗаполнено(Документ.КонтактноеЛицоГрузоотправителя)
		И ТипЗнч(Документ.КонтактноеЛицоГрузоотправителя) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.КонтактноеЛицоГрузоотправителя, Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя);
	КонецЕсли;
		
	Если флЗаказНаТС И ЗначениеЗаполнено(Документ.Грузополучатель) 
		И ТипЗнч(Документ.Грузополучатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		// Грузополучатель
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Грузополучатель, Перечисления.уатТипыПолучателейУведомлений_уэ.Грузополучатель);
		
		// Ответственный менеджер грузополучателя
		ОтветственныйМенеджерГрузополучателя = Документ.Грузополучатель.ОсновнойМенеджерПокупателя;
		Если ЗначениеЗаполнено(ОтветственныйМенеджерГрузополучателя) Тогда
			ДобавитьОдногоПолучателя(ПолучателиУведомлений, ОтветственныйМенеджерГрузополучателя, 
				Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя);
		КонецЕсли;
	КонецЕсли;
	
	// Контактное лицо грузополучателя
	Если флЗаказНаТС И ЗначениеЗаполнено(Документ.КонтактноеЛицоГрузополучателя)
		И ТипЗнч(Документ.КонтактноеЛицоГрузополучателя) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.КонтактноеЛицоГрузополучателя, Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя);
	КонецЕсли;
	
	// Водитель
	Если флМаршрутныйЛист И ЗначениеЗаполнено(Документ.Водитель1) Тогда
		Если ТипЗнч(Документ.Водитель1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФизическоеЛицоВодителя = Документ.Водитель1;
		Иначе
			ФизическоеЛицоВодителя = Документ.Водитель1.ФизическоеЛицо;
		КонецЕсли;
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, ФизическоеЛицоВодителя, Перечисления.уатТипыПолучателейУведомлений_уэ.Водитель);
	КонецЕсли;
	
	// Перевозчик
	Если (флМаршрутныйЛист И Документ.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Или флЗаказПеревозчику)
		И ЗначениеЗаполнено(Документ.Контрагент) И ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Контрагент, Перечисления.уатТипыПолучателейУведомлений_уэ.Перевозчик) Тогда
			КонтактноеЛицоПеревозчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Контрагент, "ОсновноеКонтактноеЛицо", Истина);
			Если ЗначениеЗаполнено(КонтактноеЛицоПеревозчика) Тогда
				ДобавитьОдногоПолучателя(ПолучателиУведомлений, КонтактноеЛицоПеревозчика, Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Добавление получателей из связанных заказов на ТС 
	Если флМаршрутныйЛист Или флЗаказПеревозчику  ИЛИ флСтраховойСертификат Или флАктОтгрузки Или флАктПриемки Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказГрузоотправителяПолучателиУведомлений.ВидУведомления КАК ВидУведомления,
		|	уатЗаказГрузоотправителяПолучателиУведомлений.Значение КАК Значение,
		|	уатЗаказГрузоотправителяПолучателиУведомлений.ТипПолучателя КАК ТипПолучателя
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя.ПолучателиУведомлений КАК уатЗаказГрузоотправителяПолучателиУведомлений
		|ГДЕ
		|	уатЗаказГрузоотправителяПолучателиУведомлений.Ссылка В(&Заказы)
		|	И уатЗаказГрузоотправителяПолучателиУведомлений.ПосылатьУведомления = ИСТИНА");
		Если флМаршрутныйЛист Тогда
			Запрос.УстановитьПараметр("Заказы", Документ.Заказы.Выгрузить(,"ЗаказГрузоотправителя"));
		ИначеЕсли флСтраховойСертификат Тогда
			Запрос.УстановитьПараметр("Заказы", Документ.Грузы.Выгрузить(,"ЗаказНаТС"));
		Иначе
			Запрос.УстановитьПараметр("Заказы", Документ.Грузы.Выгрузить(,"Заказ"));
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ДобавитьОдногоПолучателя(ПолучателиУведомлений, Выборка.Значение, Выборка.ТипПолучателя) 
				И Выборка.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель Тогда
				ПолучателиУведомлений[ПолучателиУведомлений.Количество()-1].ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучательИзЗаказа;
				ПолучателиУведомлений[ПолучателиУведомлений.Количество()-1].ВидУведомления = Выборка.ВидУведомления;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Владелец СД
	Если флСопроводительныйДокумент И ЗначениеЗаполнено(Документ.ВладелецДокумента) Тогда
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.ВладелецДокумента, Перечисления.уатТипыПолучателейУведомлений_уэ.Контрагент);
	КонецЕсли;
	
	// Отправитель Пакета СД
	Если флПакетСД И ЗначениеЗаполнено(Документ.Отправитель) Тогда
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Отправитель, Перечисления.уатТипыПолучателейУведомлений_уэ.Отправитель);
	КонецЕсли;
	
	// Получатель Пакета СД
	Если флПакетСД И ЗначениеЗаполнено(Документ.Получатель) Тогда
		ДобавитьОдногоПолучателя(ПолучателиУведомлений, Документ.Получатель, Перечисления.уатТипыПолучателейУведомлений_уэ.Получатель);
	КонецЕсли;
	
	Результат = ПолучателиУведомлений.Выгрузить();
	Возврат Результат;
	
КонецФункции

Функция ДобавитьОдногоПолучателя(ПолучателиУведомлений, Получатель, ТипПолучателя)
	
	ПолучательДобавлен = Ложь;
	
	ПараметрыОтбора = Новый Структура("Значение, ТипПолучателя", Получатель, ТипПолучателя);
	Если ПолучателиУведомлений.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
		НоваяСтрока = ПолучателиУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбора);
		НоваяСтрока.ПосылатьУведомления = Истина;
		ПолучательДобавлен = Истина;
	КонецЕсли;
	
	Возврат ПолучательДобавлен;
	
КонецФункции

Функция ПроверитьРазрешениеОтправкиУведомлений(Получатель, ВидУведомления)
	Если ТипЗнч(Получатель) <> Тип("СправочникСсылка.КонтактныеЛица")
		И ТипЗнч(Получатель) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.ЭлектронноеПисьмо Тогда
		ИмяРеквизита = "ЗапретОтправкиЭлектроннойПочты";
	ИначеЕсли ВидУведомления = Справочники.уатСпособыВзаимодействий_уэ.SMSСообщение Тогда
		ИмяРеквизита = "ЗапретОтправкиSMS";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ЗапретОтправки = Ложь;
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗапретОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, ИмяРеквизита);
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, ИмяРеквизита + ", ОбъектВладелец");
		Если ЗначенияРеквизитов[ИмяРеквизита] Тогда
			ЗапретОтправки = Истина;
		ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.ОбъектВладелец) 
			И ТипЗнч(ЗначенияРеквизитов.ОбъектВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			// Также проверяется запрет отправки контрагенту-владельцу этого контактного лица
			ЗапретОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ОбъектВладелец, ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	Возврат Не ЗапретОтправки;
		
КонецФункции

// Процедура вызывается из процедур ПриПодготовкеШаблонаСообщения в модулях менеджера документов
// для заполнения данных связанного с документом Заказа на ТС
Процедура ПриПодготовкеШаблонаСообщения_ДобавитьДанныеЗаказаНаТС(Реквизиты, ИмяДокумента) Экспорт
	
	НовРеквизитыГруппа = Реквизиты.Добавить();
	НовРеквизитыГруппа.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС";
	НовРеквизитыГруппа.Представление = " Данные Заказа на ТС";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.Номер";
	НовРеквизит.Представление = "Номер Заказа";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.НомерРодительскогоЗаказа";
	НовРеквизит.Представление = "Номер родительского Заказа";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.Дата";
	НовРеквизит.Представление = "Дата";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.Контрагент";
	НовРеквизит.Представление = "Контрагент";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.ДоговорКонтрагента";
	НовРеквизит.Представление = "Договор контрагента";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.ВидПеревозки";
	НовРеквизит.Представление = "Вид перевозки";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.ВидДоставки";
	НовРеквизит.Представление = "Вид доставки";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.НаправлениеПеревозки";
	НовРеквизит.Представление = "Направление перевозки";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.Маршрут";
	НовРеквизит.Представление = "Маршрут";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.Грузоотправитель";
	НовРеквизит.Представление = "Грузоотправитель";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.Грузополучатель";
	НовРеквизит.Представление = "Грузополучатель";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.АдресОтправления";
	НовРеквизит.Представление = "Адрес отправления";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеЗаказаНаТС.АдресНазначения";
	НовРеквизит.Представление = "Адрес назначения";
		
КонецПроцедуры

// Процедура вызывается из процедур ПриПодготовкеШаблонаСообщения в модулях менеджера документов
// для заполнения данных связанного с документом Заказа на ТС
Процедура ПриПодготовкеШаблонаСообщения_ДобавитьДанныеСтрокиТЧГрузы(Реквизиты, ИмяДокумента) Экспорт
	
	// Данные строки ТЧ Грузы
	НовРеквизитыГруппа = Реквизиты.Добавить();
	НовРеквизитыГруппа.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы";
	НовРеквизитыГруппа.Представление = " Параметры груза с расхождениями";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.ГрузовоеМесто";
	НовРеквизит.Представление = "Грузовое место / Номенклатура";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.ЕдиницаИзмерения";
	НовРеквизит.Представление = "Единица измерения";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.Статус";
	НовРеквизит.Представление = "Статус";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.Состояние";
	НовРеквизит.Представление = "Состояние";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.ВесБруттоПлан";
	НовРеквизит.Представление = "Вес брутто (план)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.ВесБруттоФакт";
	НовРеквизит.Представление = "Вес брутто (факт)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.ОбъемПлан";
	НовРеквизит.Представление = "Объем (план)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.ОбъемФакт";
	НовРеквизит.Представление = "Объем (факт)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.КоличествоПлан";
	НовРеквизит.Представление = "Количество (план)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.КоличествоФакт";
	НовРеквизит.Представление = "Количество (факт)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.КоличествоМестПлан";
	НовРеквизит.Представление = "Количество упаковок (план)";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = ИмяДокумента + ".ДанныеСтрокиТЧГрузы.КоличествоМестФакт";
	НовРеквизит.Представление = "Количество упаковок (факт)";
	
КонецПроцедуры

// Процедура вызывается из процедур ПриФормированииСообщения в модулях менеджера документов
// для заполнения данных связанного с документом Заказа на ТС
Процедура ПриФормированииСообщения_ДобавитьДанныеЗаказаНаТС(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	ДанныеЗаказаНаТС = Новый Соответствие;
	ДанныеЗаказаНаТС.Вставить("Номер", "");
	ДанныеЗаказаНаТС.Вставить("Дата", "");
	ДанныеЗаказаНаТС.Вставить("Контрагент", "");
	ДанныеЗаказаНаТС.Вставить("ДоговорКонтрагента", "");
	ДанныеЗаказаНаТС.Вставить("ВидДоставки", "");
	ДанныеЗаказаНаТС.Вставить("ВидПеревозки", "");
	ДанныеЗаказаНаТС.Вставить("НаправлениеПеревозки", "");
	ДанныеЗаказаНаТС.Вставить("Маршрут", "");
	ДанныеЗаказаНаТС.Вставить("Грузоотправитель", "");
	ДанныеЗаказаНаТС.Вставить("Грузополучатель", "");
	ДанныеЗаказаНаТС.Вставить("АдресНазначения", "");
	ДанныеЗаказаНаТС.Вставить("АдресОтправления", "");
	ДанныеЗаказаНаТС.Вставить("НомерРодительскогоЗаказа", "");
	
	Если ДополнительныеПараметры.Свойство("ПараметрыСообщения") Тогда
		ПараметрыСообщения = ДополнительныеПараметры.ПараметрыСообщения;
	Иначе
		ПараметрыСообщения = Новый Структура;
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("ДополнительныйДокумент")
		И ЗначениеЗаполнено(ПараметрыСообщения.ДополнительныйДокумент)
		И ТипЗнч(ПараметрыСообщения.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		СтруктураДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСообщения.ДополнительныйДокумент,
			"Номер, Дата, Контрагент, ДоговорКонтрагента, ВидПеревозки, ВидДоставки, НаправлениеПеревозки, Маршрут, "
			+ "Грузоотправитель, Грузополучатель, АдресНазначения, АдресОтправления, РодительскийЗаказ");
		ДанныеЗаказаНаТС.Вставить("Номер", СтруктураДанныеЗаказа.Номер);
		ДанныеЗаказаНаТС.Вставить("Дата", СтруктураДанныеЗаказа.Дата);
		ДанныеЗаказаНаТС.Вставить("Контрагент", СтруктураДанныеЗаказа.Контрагент);
		ДанныеЗаказаНаТС.Вставить("ДоговорКонтрагента", СтруктураДанныеЗаказа.ВидПеревозки);
		ДанныеЗаказаНаТС.Вставить("ВидДоставки", СтруктураДанныеЗаказа.ВидДоставки);
		ДанныеЗаказаНаТС.Вставить("ВидПеревозки", СтруктураДанныеЗаказа.ВидПеревозки);
		ДанныеЗаказаНаТС.Вставить("НаправлениеПеревозки", СтруктураДанныеЗаказа.НаправлениеПеревозки);
		ДанныеЗаказаНаТС.Вставить("Маршрут", СтруктураДанныеЗаказа.Маршрут);
		ДанныеЗаказаНаТС.Вставить("Грузоотправитель", СтруктураДанныеЗаказа.Грузоотправитель);
		ДанныеЗаказаНаТС.Вставить("Грузополучатель", СтруктураДанныеЗаказа.Грузополучатель);
		ДанныеЗаказаНаТС.Вставить("АдресНазначения", СтруктураДанныеЗаказа.АдресНазначения);
		ДанныеЗаказаНаТС.Вставить("АдресОтправления", СтруктураДанныеЗаказа.АдресОтправления);
		НомерРодительскогоЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанныеЗаказа.РодительскийЗаказ, "Номер");
		ДанныеЗаказаНаТС.Вставить("НомерРодительскогоЗаказа", НомерРодительскогоЗаказа);
	КонецЕсли;
	
	Сообщение.ЗначенияРеквизитов.Вставить("ДанныеЗаказаНаТС", ДанныеЗаказаНаТС);
	
КонецПроцедуры

// Процедура вызывается из процедур ПриФормированииСообщения в модулях менеджера документов
// для заполнения данных связанного с документом Заказа на ТС
Процедура ПриФормированииСообщения_ДобавитьДанныеСтрокиТЧГрузы(Сообщение, ПредметСообщения, ДополнительныеПараметры, ИмяДокумента) Экспорт
	
	ДанныеСтрокиТЧГрузы = Новый Соответствие;
	
	Если ДополнительныеПараметры.Свойство("ПараметрыСообщения") Тогда
		ПараметрыСообщения = ДополнительныеПараметры.ПараметрыСообщения;
	Иначе
		ПараметрыСообщения = Новый Структура;
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("ДополнительныйДокумент")
		И ТипЗнч(ПараметрыСообщения.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		И ПараметрыСообщения.Свойство("ГрузовоеМесто") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаГрузы.ВесБрутто КАК ВесБрутто,
		|	ТаблицаГрузы.ВесБруттоПлан КАК ВесБруттоПлан,
		|	ТаблицаГрузы.ГрузовоеМесто КАК ГрузовоеМесто,
		|	ТаблицаГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаГрузы.Количество КАК Количество,
		|	ТаблицаГрузы.КоличествоМест КАК КоличествоМест,
		|	ТаблицаГрузы.КоличествоМестПлан КАК КоличествоМестПлан,
		|	ТаблицаГрузы.КоличествоПлан КАК КоличествоПлан,
		|	ТаблицаГрузы.Объем КАК Объем,
		|	ТаблицаГрузы.ОбъемПлан КАК ОбъемПлан,
		|	ТаблицаГрузы.Состояние КАК Состояние,
		|	ТаблицаГрузы.Статус КАК Статус
		|ИЗ
		|	Документ.<ИмяДокумента>.Грузы КАК ТаблицаГрузы
		|ГДЕ
		|	ТаблицаГрузы.Ссылка = &Ссылка
		|	И ТаблицаГрузы.Заказ = &Заказ
		|	И ТаблицаГрузы.ГрузовоеМесто = &ГрузовоеМесто");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<ИмяДокумента>", ИмяДокумента);
		Запрос.УстановитьПараметр("Ссылка", ПредметСообщения);
		Запрос.УстановитьПараметр("Заказ", ПараметрыСообщения.ДополнительныйДокумент);
		Запрос.УстановитьПараметр("ГрузовоеМесто", ПараметрыСообщения.ГрузовоеМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеСтрокиТЧГрузы = Новый Соответствие;
			ДанныеСтрокиТЧГрузы.Вставить("ВесБруттоПлан", Выборка.ВесБруттоПлан);
			ДанныеСтрокиТЧГрузы.Вставить("ВесБруттоФакт", Выборка.ВесБрутто);
			ДанныеСтрокиТЧГрузы.Вставить("КоличествоПлан", Выборка.КоличествоПлан);
			ДанныеСтрокиТЧГрузы.Вставить("КоличествоФакт", Выборка.Количество);
			ДанныеСтрокиТЧГрузы.Вставить("КоличествоМестПлан", Выборка.КоличествоМестПлан);
			ДанныеСтрокиТЧГрузы.Вставить("КоличествоМестФакт", Выборка.КоличествоМест);
			ДанныеСтрокиТЧГрузы.Вставить("ОбъемПлан", Выборка.ОбъемПлан);
			ДанныеСтрокиТЧГрузы.Вставить("ОбъемФакт", Выборка.Объем);
			ДанныеСтрокиТЧГрузы.Вставить("Состояние", Выборка.Состояние);
			ДанныеСтрокиТЧГрузы.Вставить("Статус", Выборка.Статус);
			ДанныеСтрокиТЧГрузы.Вставить("ГрузовоеМесто", Выборка.ГрузовоеМесто);
			ДанныеСтрокиТЧГрузы.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЕсли;
	
	Сообщение.ЗначенияРеквизитов.Вставить("ДанныеСтрокиТЧГрузы", ДанныеСтрокиТЧГрузы);
	
КонецПроцедуры

// Функция сопоставляет получателя письма и указанный для него шаблон сообщения в настройках комплектов документов
Функция ПроверитьСоответствиеШаблонаИПолучателя(Шаблон, Получатель, НастройкиКомплекта, Документ)
	
	ПолучательВДокументе = Документ.ПолучателиУведомлений.НайтиСтроки(Новый Структура("Значение", Получатель));
	Если ПолучательВДокументе = Неопределено или ПолучательВДокументе.Количество() = 0 Тогда //т.е. это индивидуальный получатель 
		Для каждого Настройка из НастройкиКомплекта Цикл
			Если Настройка.ШаблонЭлектронногоПисьма = Шаблон и Настройка.Получатель = Получатель Тогда
				Возврат Истина;                                                   
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТипПолучателя = ПолучательВДокументе[0].ТипПолучателя;
		Для каждого Настройка из НастройкиКомплекта Цикл
			Если Настройка.ШаблонЭлектронногоПисьма = Шаблон и Настройка.ТипПолучателя = ТипПолучателя Тогда
				Возврат Истина;                                                   
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция формирует документы согласно настройке комплектов и документу
Функция СформироватьКомплектыДокументовПоНастройке(Настройки, ДокументОснование) Экспорт
	
	НастройкиКомплекта = Настройки.НастройкиХранилище.Получить();
		
	СоздатьСчетНаОплатуПокупателю      = НастройкиКомплекта.ФлагСчетНаОплатуПокупателю И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	СоздатьРеализацияУслуг             = НастройкиКомплекта.ФлагРеализацияУслуг И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	СоздатьПлатежноеПоручениеВходящее  = НастройкиКомплекта.ФлагПлатежноеПоручениеВходящее И НастройкиКомплекта.ФлагРеализацияУслуг И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	СоздатьПриходныйКассовыйОрдер      = НастройкиКомплекта.ФлагПриходныйКассовыйОрдер И НастройкиКомплекта.ФлагРеализацияУслуг;
	СоздатьСчетНаОплатуПоставщика      = НастройкиКомплекта.ФлагСчетНаОплатуПоставщика;
	СоздатьПоступлениеМатериаловУслуг  = НастройкиКомплекта.ФлагПоступлениеМатериаловУслуг;
	СоздатьПлатежноеПоручениеИсходящее = НастройкиКомплекта.ФлагПлатежноеПоручениеИсходящее И СоздатьПоступлениеМатериаловУслуг;
	СоздатьРасходныйКассовыйОрдер      = НастройкиКомплекта.ФлагРасходныйКассовыйОрдер И СоздатьПоступлениеМатериаловУслуг;
	СоздатьЗаявкаНаРасходованиеДС      = НастройкиКомплекта.ФлагЗаявкаНаРасходованиеДС И (СоздатьПоступлениеМатериаловУслуг ИЛИ СоздатьСчетНаОплатуПоставщика);
	СоздатьТТД						   = НастройкиКомплекта.ФлагТТД И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	СоздатьДоверенность  			   = НастройкиКомплекта.ФлагДоверенность И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	
	РежимЗаписи = ?(НастройкиКомплекта.ФлагПровестиДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	Объекты     = Новый Массив();
	Перевозчики = Неопределено;
	
	СтрокиДокументовЗаказчика = Новый СписокЗначений;	
	СтрокиДокументовПеревозчика= Новый СписокЗначений;
	// сделать условие чтобы не всегда они формировались
	КонтрагентыПеревозчика = Новый Структура("мсвКонтрагенты, ТаблицаУслуги, СохраненныеКонтрагенты",
	Новый СписокЗначений(), Новый СписокЗначений(), Новый Массив());
	КонтрагентыЗаказчика   = Новый Структура("мсвКонтрагенты, ТаблицаУслуги, СохраненныеКонтрагенты",
	Новый СписокЗначений(), Новый СписокЗначений(), Новый Массив());
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ЗаполнитьЗначенияСвойств(КонтрагентыЗаказчика, КонтрагентыДокументов("Услуги", ДокументОснование.Услуги, ДокументОснование));
	Иначе
		ЗаполнитьЗначенияСвойств(КонтрагентыЗаказчика, КонтрагентыДокументов("Доходы", ДокументОснование.Доходы, ДокументОснование));
	КонецЕсли;
	
	ПолучитьСтрокиДокументов(КонтрагентыЗаказчика.мсвКонтрагенты, КонтрагентыЗаказчика.ТаблицаУслуги, СтрокиДокументовЗаказчика,
	КонтрагентыЗаказчика.СохраненныеКонтрагенты, 0,ДокументОснование);
	
	ЗаполнитьЗначенияСвойств(КонтрагентыПеревозчика, КонтрагентыДокументов("Расходы", ДокументОснование.Расходы, ДокументОснование));
	ПолучитьСтрокиДокументов(КонтрагентыПеревозчика.мсвКонтрагенты, КонтрагентыПеревозчика.ТаблицаУслуги, СтрокиДокументовПеревозчика,
	КонтрагентыПеревозчика.СохраненныеКонтрагенты, 1,ДокументОснование);

	
	Если СоздатьСчетНаОплатуПокупателю Тогда
		ВыполнитьСозданиеСчетНаОплатуПокупателю(ДокументОснование, Объекты, РежимЗаписи, СтрокиДокументовЗаказчика);
	КонецЕсли;
	
	Если СоздатьРеализацияУслуг Тогда
		ВыполнитьСозданиеРеализацияУслуг(ДокументОснование, Объекты, РежимЗаписи, СтрокиДокументовЗаказчика);
	КонецЕсли;
	
	Если СоздатьПлатежноеПоручениеВходящее Тогда
		ВыполнитьСозданиеПлатежноеПоручениеВходящее(ДокументОснование, Объекты, РежимЗаписи);
	КонецЕсли;
	
	Если СоздатьПриходныйКассовыйОрдер Тогда
		ВыполнитьСозданиеПриходныйКассовыйОрдер(ДокументОснование, Объекты, РежимЗаписи);
	КонецЕсли;
	
	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист") И ПроверитьТС(ДокументОснование)) Тогда
		
		Если СоздатьСчетНаОплатуПоставщика Тогда
			ВыполнитьСозданиеСчетНаОплатуПоставщика(ДокументОснование, Объекты, РежимЗаписи, СтрокиДокументовПеревозчика);
		КонецЕсли;
		
		Если СоздатьПоступлениеМатериаловУслуг Тогда
			ВыполнитьСозданиеПоступлениеТоваровУслуг(ДокументОснование, Объекты, РежимЗаписи, СтрокиДокументовПеревозчика);
		КонецЕсли;
		
		Если СоздатьПлатежноеПоручениеИсходящее Тогда
			ВыполнитьСозданиеПлатежноеПоручениеИсходящее(ДокументОснование, Объекты, РежимЗаписи);
		КонецЕсли;
		
		Если СоздатьРасходныйКассовыйОрдер Тогда
			ВыполнитьСозданиеРасходныйКассовыйОрдер(ДокументОснование, Объекты, РежимЗаписи);
		КонецЕсли;
		
		Если СоздатьЗаявкаНаРасходованиеДС Тогда
			ВыполнитьСозданиеЗаявкаНаРасходованиеДС(ДокументОснование, Объекты, РежимЗаписи, СоздатьПоступлениеМатериаловУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоздатьТТД Тогда
		ВыполнитьСозданиеТТД(ДокументОснование, Объекты, РежимЗаписи);
	КонецЕсли;
	
	Если СоздатьДоверенность Тогда
		ВыполнитьСозданиеДоверенность(ДокументОснование, Объекты, РежимЗаписи);
	КонецЕсли;
			
	Возврат Объекты;
КонецФункции

// Процедура формирует печатные формы для документов, созданных ранее, и добавляет их в электронное письмо 
Процедура СформироватьВложенияПоНастройкеКомплектов(НастройкаКомплектовДокументов, МассивДокументов, НовоеЭлектронноеПисьмо, ДокументОснование, ШаблонПисьма, ЭтоРучноеСоздание = Ложь) Экспорт
	
	ФорматыСохранения = Новый Массив;
	ФорматыСохранения.Добавить(СтандартныеПодсистемыСервер.ТипФайлаТабличногоДокументаPDF());
	
	ПараметрыОтправки = ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(ШаблонПисьма, ДокументОснование, Новый УникальныйИдентификатор); 	
	ПараметрыШаблона = ШаблоныСообщенийСлужебный.ПараметрыШаблона(ПараметрыОтправки.Шаблон);
	ПараметрыШаблона.ВыбранныеВложения.Очистить();
	
	ПараметрыТекстаСообщения = ШаблоныСообщенийСлужебный.ПараметрыИзТекстаСообщения(ПараметрыШаблона);
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения = ФорматыСохранения;
	НастройкиСохранения.УпаковатьВАрхив = ПараметрыШаблона.УпаковатьВАрхив;
	НастройкиСохранения.ПереводитьИменаФайловВТранслит = ПараметрыШаблона.ТранслитерироватьИменаФайлов;
	НастройкиСохранения.ПодписьИПечать = ПараметрыШаблона.ПодписьИПечать;

	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла");
	ТаблицаВложений.Колонки.Добавить("АдресВоВременномХранилище");
	
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		Если ЭтоРучноеСоздание Тогда
			Если НЕ ТекДокумент.ФлагВыбора Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ИмяМенеджераПечати = ПолучитьМенеджерПечати(ТекДокумент.Ссылка); 
		ИменаМакетов = ПодготовитьНастройкиДляПечати("Документ." + ИмяМенеджераПечати, НастройкаКомплектовДокументов);
		ИменаМакетов = Сред(ИменаМакетов, 2);
		
		Если ЗначениеЗаполнено(ИменаМакетов) Тогда
			мДокумент = Новый Массив();
			мДокумент.Добавить(ТекДокумент.Ссылка);
			
			КомандаПечати = Новый Структура;
			КомандаПечати.Вставить("Идентификатор", ИменаМакетов);
			КомандаПечати.Вставить("МенеджерПечати", ИмяМенеджераПечати);
			КомандаПечати.Вставить("ДополнительныеПараметры", "");
			
			КоллекцияПечатныхФорм = УправлениеПечатью.НапечататьВФайл(КомандаПечати, мДокумент, НастройкиСохранения);
			
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПечатнаяФорма.ДвоичныеДанные, Новый УникальныйИдентификатор);
				нстр = ТаблицаВложений.Добавить();
				нстр.ИмяФайла = ПечатнаяФорма.ИмяФайла;
				нстр.АдресВоВременномХранилище = АдресВоВременномХранилище;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НовоеЭлектронноеПисьмо.Записать();
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		НовоеЭлектронноеПисьмо.Ссылка,
		Вложение.АдресВоВременномХранилище,
		Новый Структура("ИмяФайла", Вложение.ИмяФайла),
		0
		);
	КонецЦикла;

КонецПроцедуры

// Функция возвращает одного получателя уведомления по документу 
Функция ПолучитьПолучателяПоНастройкеКомплектов(ТипПолучателя, Документ, Получатель = Неопределено, ДополнительныеПараметры = неопределено) Экспорт
	
	мсвПолучатели = Новый Массив;
	
	Если ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель Тогда
		Возврат Получатель;
	КонецЕсли;

	Для Каждого ТекСтрока Из Документ.ПолучателиУведомлений Цикл
		// Получатели могут быть запрещены в документе
		Если Не ТекСтрока.ПосылатьУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		// Если получатель взят из заказа одной из строк Маршрутного листа, то он применяется 
		// либо для всего документа в целом, либо для строки, содержащей этот заказ
		Если (ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ"))
			И ДополнительныеПараметры.Свойство("ДополнительныйДокумент")
			И ТипЗнч(ДополнительныеПараметры.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
			И ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучательИзЗаказа Тогда 
			
			// Для каждого индивидуального получателя из Заказа на ТС надо проверить, есть ли он в Заказе из текущей строки,
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаказГрузоотправителяПолучателиУведомлений.Значение КАК Значение
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя.ПолучателиУведомлений КАК уатЗаказГрузоотправителяПолучателиУведомлений
			|ГДЕ
			|	уатЗаказГрузоотправителяПолучателиУведомлений.Ссылка = &Ссылка
			|	И уатЗаказГрузоотправителяПолучателиУведомлений.ТипПолучателя = &ТипПолучателя");
			Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДополнительныйДокумент);
			Запрос.УстановитьПараметр("ТипПолучателя", Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель);
			Выборка = Запрос.Выполнить().Выбрать();
			ПолучательЕстьВТекущейСтроке = Ложь;
			Пока Выборка.Следующий() И Не ПолучательЕстьВТекущейСтроке Цикл
				ПолучательЕстьВТекущейСтроке = ПолучательЕстьВТекущейСтроке ИЛИ (Выборка.Значение = ТекСтрока.Значение);
			КонецЦикла;
			
			Если Не ПолучательЕстьВТекущейСтроке Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.уатАктПриемки_уэ"))
			И ДополнительныеПараметры.Свойство("ДополнительныйДокумент")
			И ТипЗнч(ДополнительныеПараметры.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
			И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.Водитель
			И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.Перевозчик
			И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика 
			И ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель
			И (ТекСтрока.ТипПолучателя <> Перечисления.уатТипыПолучателейУведомлений_уэ.Ответственный
			ИЛИ ТекСтрока.Значение <> Документ.Ответственный) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
			|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя КАК КонтактноеЛицоГрузоотправителя,
			|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
			|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя КАК КонтактноеЛицоГрузополучателя,
			|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
			|	уатЗаказГрузоотправителя.Ответственный КАК Ответственный,
			|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.Грузоотправитель КАК Справочник.Контрагенты).ОсновнойМенеджерПокупателя КАК ОтветственныйМенеджерГрузоотправителя,
			|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.Грузополучатель КАК Справочник.Контрагенты).ОсновнойМенеджерПокупателя КАК ОтветственныйМенеджерГрузополучателя,
			|	ВЫРАЗИТЬ(уатЗаказГрузоотправителя.Контрагент КАК Справочник.Контрагенты).ОсновнойМенеджерПокупателя КАК ОтветственныйМенеджерКонтрагента
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|ГДЕ
			|	уатЗаказГрузоотправителя.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И ((ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Грузоотправитель
				И ТекСтрока.Значение <> Выборка.Грузоотправитель)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Грузополучатель
				И ТекСтрока.Значение <> Выборка.Грузополучатель)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя
				И ТекСтрока.Значение <> Выборка.КонтактноеЛицоГрузоотправителя)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя
				И ТекСтрока.Значение <> Выборка.КонтактноеЛицоГрузополучателя)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя
				И ТекСтрока.Значение <> Выборка.ОтветственныйМенеджерГрузоотправителя)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя
				И ТекСтрока.Значение <> Выборка.ОтветственныйМенеджерГрузополучателя)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента
				И ТекСтрока.Значение <> Выборка.ОтветственныйМенеджерКонтрагента)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Контрагент
				И ТекСтрока.Значение <> Выборка.Контрагент)
				ИЛИ (ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.Ответственный
				И ТекСтрока.Значение <> Выборка.Ответственный И ТекСтрока.Значение <> Документ.Ответственный)) Тогда
				// Получатель не имеет отношения к текущей строке Маршрутного листа
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель
			ИЛИ ТекСтрока.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучательИзЗаказа Тогда
			// Добавление индивидуальных получателей из документа, если у них подходящий тип контактной информации
			Возврат ТекСтрока.Значение;
		ИначеЕсли ТипПолучателя = ТекСтрока.ТипПолучателя Тогда
			// Добавление неиндивидуальных получателей из документа, если это разрешено правилом
			Возврат ТекСтрока.Значение;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

Функция ПодготовитьНастройкиДляПечати(МенеджерПечати, НастройкаКомплектовДокументов) Экспорт
	
	СохраненныеНастройкиПечатныхФорм = НастройкаКомплектовДокументов.НастройкиПечатиХранилище.Получить();      
	ИменаМакетов = "";
	
	Если СохраненныеНастройкиПечатныхФорм <> Неопределено Тогда
		Для Каждого ПечатнаяФорма Из СохраненныеНастройкиПечатныхФорм Цикл
			Если ПечатнаяФорма.Печатать И ПечатнаяФорма.МенеджерПечати = МенеджерПечати Тогда
				ПечатнаяФорма.Копий = 1;
				
				Если ПечатнаяФорма.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
					ИмяМакета = "ВнешняяПечатнаяФорма." + ПечатнаяФорма.Имя;
				Иначе
					ИмяМакета = ПечатнаяФорма.МенеджерПечати + "." + ПечатнаяФорма.Имя;
				КонецЕсли;
				ИменаМакетов = ИменаМакетов +"," + ИмяМакета;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИменаМакетов;
КонецФункции

Процедура ВыполнитьСозданиеСчетНаОплатуПокупателю(ТекДокумент, Объекты, РежимЗаписи, СтрокиДокументов) Экспорт
	
	МенеджерПечати  = "Документ.уатСчетНаОплатуПокупателю";
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") ИЛИ 
		ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Для Каждого ТекСтрока Из СтрокиДокументов Цикл
			мсвТаблицаУслуги = ТекСтрока.Значение.Услуги;
			НовыйДокумент = Документы.уатСчетНаОплатуПокупателю.СоздатьДокумент();
			НовыйДокумент.ДокументОснование = ТекДокумент;
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.ДатаКурса = НовыйДокумент.Дата;
			НовыйДокумент.ОбработкаЗаполненияИзФормыВыбораКонтрагента(ТекДокумент, мсвТаблицаУслуги);
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПокупателем");
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
				НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
				НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
				НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.СтруктурнаяЕдиница) 
				ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.СтруктурнаяЕдиница) <> НовыйДокумент.Организация) Тогда
				НовыйДокумент.СтруктурнаяЕдиница = уатОбщегоНазначенияТиповыеСервер.ПолучитьОсновнойСчетПоОрганизации(НовыйДокумент.Организация);
			КонецЕсли;
			
			Если НовыйДокумент.ДоговорКонтрагента.Организация <> НовыйДокумент.Организация Тогда
				СписокДоговоров = Новый СписокЗначений;
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
					СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
				Иначе
					СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				КонецЕсли;
				СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров",СписокДоговоров);
				НовыйДокумент.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовыйДокумент.Организация, НовыйДокумент.Контрагент, СтрПараметров);
			КонецЕсли;
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
			
		КонецЦикла;
	Иначе
		НовыйДокумент = Документы.уатСчетНаОплатуПокупателю.СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекДокумент);
		НовыйДокумент.Дата = ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
			НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПокупателем");
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
			НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
			НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.СтруктурнаяЕдиница) 
			ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.СтруктурнаяЕдиница) <> НовыйДокумент.Организация) Тогда
			НовыйДокумент.СтруктурнаяЕдиница = уатОбщегоНазначенияТиповыеСервер.ПолучитьОсновнойСчетПоОрганизации(НовыйДокумент.Организация);
		КонецЕсли;
		
		Если НовыйДокумент.ДоговорКонтрагента.Организация <> НовыйДокумент.Организация Тогда
			СписокДоговоров = Новый СписокЗначений;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
				СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
			Иначе
				СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			КонецЕсли;
			СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров",СписокДоговоров);
			НовыйДокумент.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовыйДокумент.Организация, НовыйДокумент.Контрагент, СтрПараметров);
		КонецЕсли;
		ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
		Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеРеализацияУслуг(ТекДокумент, Объекты, РежимЗаписи, СтрокиДокументов) Экспорт
	
	МенеджерПечати  = "Документ.уатРеализацияУслуг";
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Для Каждого ТекСтрока Из СтрокиДокументов Цикл
			мсвТаблицаУслуги = ТекСтрока.Значение.Услуги;
			НовыйДокумент = Документы.уатРеализацияУслуг.СоздатьДокумент();
			НовыйДокумент.ДокументОснование = ТекДокумент;
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.ДатаКурса = НовыйДокумент.Дата;
			
			НовыйДокумент.ОбработкаЗаполненияИзФормыВыбораКонтрагента(ТекДокумент, мсвТаблицаУслуги);
			
			НовыйДокумент.ДатаНач = ?(НовыйДокумент.ДатаНач = '00010101', НачалоМесяца(ТекущаяДата()), НовыйДокумент.ДатаНач);
			НовыйДокумент.ДатаКон = ?(НовыйДокумент.ДатаКон = '00010101', ТекущаяДата(), НовыйДокумент.ДатаКон);
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.Контрагент) тогда
				НовыйДокумент.Контрагент = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовыйДокумент.Организация) Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДокумент.БанковскийСчетОрганизации) 
					ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.БанковскийСчетОрганизации) <> НовыйДокумент.Организация) Тогда
					
					НовыйДокумент.БанковскийСчетОрганизации = ПолучитьСчетПоОрганизацииНаСервере(НовыйДокумент.Организация);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
					НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПокупателем");
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
					НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
					НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
					НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				КонецЕсли;
			КонецЕсли;
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЦикла;
	Иначе
		НовыйДокумент = Документы.уатРеализацияУслуг.СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекДокумент);
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.ДатаКурса = НовыйДокумент.Дата;
		НовыйДокумент.ДатаНач = ?(НовыйДокумент.ДатаНач = '00010101', НачалоМесяца(ТекущаяДата()), НовыйДокумент.ДатаНач);
		НовыйДокумент.ДатаКон = ?(НовыйДокумент.ДатаКон = '00010101', ТекущаяДата(), НовыйДокумент.ДатаКон);
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Контрагент) тогда
			НовыйДокумент.Контрагент = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйДокумент.Организация) Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.БанковскийСчетОрганизации) 
				ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.БанковскийСчетОрганизации) <> НовыйДокумент.Организация) Тогда
				
				НовыйДокумент.БанковскийСчетОрганизации = ПолучитьСчетПоОрганизацииНаСервере(НовыйДокумент.Организация);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПокупателем");
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
				НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
				НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
				НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			КонецЕсли;
		КонецЕсли;
		ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
		Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьСозданиеПлатежноеПоручениеВходящее(ТекДокумент, Объекты, РежимЗаписи)Экспорт
	
	Для Каждого ТекСтрока Из Объекты Цикл
		Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.уатРеализацияУслуг") Тогда
			МенеджерПечати  = "Документ.уатПлатежноеПоручениеВходящее";
			НовыйДокумент = Документы.уатПлатежноеПоручениеВходящее.СоздатьДокумент();
			НовыйДокумент.Заполнить(ТекСтрока.Объект);
			НовыйДокумент.Дата = ТекущаяДата();
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.БанковскийСчет)
				ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.БанковскийСчет) <> НовыйДокумент.Организация) Тогда
				
				НовыйДокумент.БанковскийСчет = ПолучитьСчетПоОрганизацииНаСервере(НовыйДокумент.Организация);
				
			КонецЕсли;
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеПриходныйКассовыйОрдер(ТекДокумент, Объекты, РежимЗаписи)Экспорт
	
	Для Каждого ТекСтрока Из Объекты Цикл
		Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.уатРеализацияУслуг") Тогда
			МенеджерПечати = "Документ.уатПриходныйКассовыйОрдер";
			НовыйДокумент  = Документы.уатПриходныйКассовыйОрдер.СоздатьДокумент();
			НовыйДокумент.Заполнить(ТекСтрока.Объект);
			НовыйДокумент.Дата = ТекущаяДата();
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеСчетНаОплатуПоставщика(ТекДокумент, Объекты, РежимЗаписи, СтрокиДокументов)Экспорт
	МенеджерПечати  = "Документ.уатСчетНаОплатуПоставщика";
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") ИЛИ ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ (Метаданные.Документы.Найти("уатЗаказПеревозчику_уэ") <> Неопределено 
		И ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ")) Тогда
		Для Каждого ТекСтрока Из СтрокиДокументов Цикл
			мсвТаблицаУслуги = ТекСтрока.Значение.Услуги;
			НовыйДокумент = Документы.уатСчетНаОплатуПоставщика.СоздатьДокумент();
			НовыйДокумент.ДокументОснование = ТекДокумент;
			НовыйДокумент.Дата = ТекущаяДата();

			НовыйДокумент.ОбработкаЗаполненияИзФормыВыбораКонтрагента(ТекДокумент, мсвТаблицаУслуги);
			Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
					НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПоставщиком");
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
					НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
					НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
					НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.СтруктурнаяЕдиница) 
				ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.СтруктурнаяЕдиница) <> НовыйДокумент.Организация) Тогда
				НовыйДокумент.СтруктурнаяЕдиница = уатОбщегоНазначенияТиповыеСервер.ПолучитьОсновнойСчетПоОрганизации(НовыйДокумент.Организация);
			КонецЕсли;
			
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЦикла;
	Иначе
		НовыйДокумент = Документы.уатСчетНаОплатуПоставщика.СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекДокумент);
		НовыйДокумент.Дата = ТекущаяДата();
		Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПоставщиком");
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
				НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
				НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
				НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.СтруктурнаяЕдиница) 
			ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.СтруктурнаяЕдиница) <> НовыйДокумент.Организация) Тогда
			НовыйДокумент.СтруктурнаяЕдиница = уатОбщегоНазначенияТиповыеСервер.ПолучитьОсновнойСчетПоОрганизации(НовыйДокумент.Организация);
		КонецЕсли;
		
		Если НовыйДокумент.ДоговорКонтрагента.Организация <> НовыйДокумент.Организация Тогда
			СписокДоговоров = Новый СписокЗначений;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ТипДоговора", "ДоговорыКонтрагентов") Тогда
				СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
			Иначе
				СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			КонецЕсли;
			СтрПараметров   = Новый Структура("СписокДопустимыхВидовДоговоров",СписокДоговоров);
			
			НовыйДокумент.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовыйДокумент.Организация, НовыйДокумент.Контрагент, СтрПараметров);
		КонецЕсли;
		ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
		Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьСозданиеПоступлениеТоваровУслуг(ТекДокумент, Объекты, РежимЗаписи, СтрокиДокументов)Экспорт
	МенеджерПечати  = "Документ.уатПоступлениеТоваровУслуг";
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") ИЛИ ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ (Метаданные.Документы.Найти("уатЗаказПеревозчику_уэ") <> Неопределено 
		И ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ")) Тогда
		Для Каждого ТекСтрока Из СтрокиДокументов Цикл
			мсвТаблицаУслуги = ТекСтрока.Значение.Услуги;
			НовыйДокумент = Документы.уатПоступлениеТоваровУслуг.СоздатьДокумент();
			НовыйДокумент.ДокументОснование = ТекДокумент;
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.ОбработкаЗаполненияИзФормыВыбораКонтрагента(ТекДокумент, мсвТаблицаУслуги);
			Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
					НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПоставщиком");
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
					НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
					НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
					НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.Склад) Тогда
				Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
				НовыйДокумент.Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
			КонецЕсли;
			
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЦикла;
	Иначе
		НовыйДокумент = Документы.уатПоступлениеТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекДокумент);
		НовыйДокумент.Дата = ТекущаяДата();
		Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(НовыйДокумент.Контрагент, "СПоставщиком");
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.ДатаКурса);
				НовыйДокумент.КурсВзаиморасчетов      = СтруктураКурса.Курс;
				НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Склад) Тогда
			Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
			НовыйДокумент.Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
		КонецЕсли;
		
		ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
		Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьСозданиеПлатежноеПоручениеИсходящее(ТекДокумент, Объекты, РежимЗаписи)Экспорт
	Для Каждого ТекСтрока Из Объекты Цикл
		Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
			МенеджерПечати  = "Документ.уатПлатежноеПоручениеИсходящее";
			НовыйДокумент = Документы.уатПлатежноеПоручениеИсходящее.СоздатьДокумент();
			НовыйДокумент.Заполнить(ТекСтрока.Объект);
			НовыйДокумент.Дата = ТекущаяДата();
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.БанковскийСчет) 
				ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(НовыйДокумент.БанковскийСчет) <> НовыйДокумент.Организация) Тогда
				
				НовыйДокумент.БанковскийСчет = ПолучитьСчетПоОрганизацииНаСервере(НовыйДокумент.Организация);
				
			КонецЕсли;
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьСозданиеРасходныйКассовыйОрдер(ТекДокумент, Объекты, РежимЗаписи)Экспорт
	Для Каждого ТекСтрока Из Объекты Цикл
		Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
			МенеджерПечати = "Документ.уатРасходныйКассовыйОрдер";
			НовыйДокумент  = Документы.уатРасходныйКассовыйОрдер.СоздатьДокумент();
			НовыйДокумент.Заполнить(ТекСтрока.Объект);
			НовыйДокумент.Дата = ТекущаяДата();
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьСозданиеЗаявкаНаРасходованиеДС(ТекДокумент, Объекты, РежимЗаписи, Знач ФлагПоступлениеМатериаловУслуг)Экспорт
	
	Если ФлагПоступлениеМатериаловУслуг Тогда
		ТипДокумента = "ДокументСсылка.уатПоступлениеТоваровУслуг";
	Иначе
		ТипДокумента = "ДокументСсылка.уатСчетНаОплатуПоставщика";
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объекты Цикл
		Если ТипЗнч(ТекСтрока.Объект) = Тип(ТипДокумента) Тогда
			МенеджерПечати = "Документ.уатЗаявкаНаРасходованиеДС";
			НовыйДокумент  = Документы.уатЗаявкаНаРасходованиеДС.СоздатьДокумент();
			НовыйДокумент.Заполнить(ТекСтрока.Объект);
			НовыйДокумент.Дата	 = ТекущаяДата();
			
			Если Не ЗначениеЗаполнено(НовыйДокумент.БанковскийСчетКасса) Тогда
				НовыйДокумент.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
				
				Если НовыйДокумент.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Наличные")
					И ЕстьСправочникКассы() Тогда
					
					мКасса = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяКасса");
					Если мКасса <> Неопределено Тогда
						ВалютаКассы = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(мКасса, "ВалютаДенежныхСредств");
					Иначе
						ВалютаКассы = Неопределено;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
						НовыйДокумент.БанковскийСчетКасса = мКасса;
						НовыйДокумент.ВалютаДокумента     = ВалютаКассы;
					ИначеЕсли ВалютаКассы = НовыйДокумент.ВалютаДокумента Тогда
						НовыйДокумент.БанковскийСчетКасса = мКасса;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			СтруктураКурсаВалютаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, НовыйДокумент.Дата);
			НовыйДокумент.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
			НовыйДокумент.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
			
			
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", НовыйДокумент.Организация);
			
			ВидДокументаДляСогласования = уатСогласованиеДокументовСервер.ВидДокументаДляСогласования(НовыйДокумент);
			НовыйДокумент.ТребуетСогласования = уатСогласованиеДокументовСервер.ДокументТребуетСогласования(
				ВидДокументаДляСогласования, СтруктураОбъектовНастроек);
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьСозданиеТТД(ТекДокумент, Объекты, РежимЗаписи)Экспорт
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") ИЛИ ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		МенеджерПечати = "Документ.уатТТД";
		НовыйДокумент  = Документы.уатТТД.СоздатьДокумент();
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Основание", ТекДокумент);
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ДанныеЗаполнения.Вставить("флВыбратьЗаказ", Истина);
			флВыборЗаказа = Ложь;
		Иначе
			ДанныеЗаполнения.Вставить("флВыбратьМЛ", Истина);
			флВыборЗаказа = Истина;
		КонецЕсли;
				
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		Отказ = Ложь;
		
		ДополнительныеТТД = Новый Массив;
		Если НовыйДокумент.ДополнительныеСвойства.Свойство("тзМаршрутныеЛистыИЗаказы") Тогда
			тзМаршрутныеЛистыИЗаказы = НовыйДокумент.ДополнительныеСвойства.тзМаршрутныеЛистыИЗаказы;
			
			// ТзМаршрутныеЛистыИЗаказы содержит Маршрутный Лист, Заказ на ТС и ТТД.
			// Так что если требуется не создавать новый ТТД, если уже есть старый, это надо делать здесь.
			тзМаршрутныеЛистыИЗаказы.Свернуть("Заказ, МаршрутныйЛист");
			Для Каждого СтрокаТаблицы Из тзМаршрутныеЛистыИЗаказы Цикл
				ДополнительныеТТД = НовыйДокумент.ОбработкаЗаполненияЗаказМЛ(СтрокаТаблицы.Заказ, СтрокаТаблицы.МаршрутныйЛист, Отказ);
				Если Не Отказ Тогда
					ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
					Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
				КонецЕсли;
				НовыйДокумент  = Документы.уатТТД.СоздатьДокумент();
			КонецЦикла;
			Возврат;
		КонецЕсли;
		Если  НовыйДокумент.ДополнительныеСвойства.Свойство("Заказ") И  НовыйДокумент.ДополнительныеСвойства.Свойство("МаршрутныйЛист") Тогда
			ДополнительныеТТД = НовыйДокумент.ОбработкаЗаполненияЗаказМЛ(НовыйДокумент.ДополнительныеСвойства.Заказ, НовыйДокумент.ДополнительныеСвойства.МаршрутныйЛист, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НовыйДокумент.Дата = ТекущаяДата();
		ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
		Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		
		Для Каждого ДопТТД Из ДополнительныеТТД Цикл
			ДопТТД.Дата = ТекущаяДата();
			ДопТТД.УстановитьНовыйНомер();
			ЗаписатьНовыйДокумент(ДопТТД, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", ДопТТД.Ссылка, МенеджерПечати));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьСозданиеДоверенность(ТекДокумент, Объекты, РежимЗаписи)Экспорт
	
	МенеджерПечати = "Документ.уатДоверенность";
	
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		НовыйДокумент  = Документы.уатДоверенность.СоздатьДокумент();
		НовыйДокумент.Заполнить(ТекДокумент);
		НовыйДокумент.Дата = ТекущаяДата();
		ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
		Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		
	ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		
		// если ТС виртуальное, то нужно прекратить заполнение
		Если ТекДокумент.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Виртуальное Тогда
			ТекстНСТР = НСтр("en='';ru='В текущем Маршрутном листе не назначен перевозчик. Создание Доверенностей запрещено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Выработка");
			Возврат;
		КонецЕсли;
		
		// На основании каждого  Заказа на ТС из Маршрутного листа формируется отдельная Доверенность
		МассивДоверенностей = Новый Массив;
		ЗапросМЛ = Новый Запрос;
		ЗапросМЛ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                 |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Заказ
		                 |ИЗ
		                 |	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		                 |ГДЕ
		                 |	уатМаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
		                 |	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)";
		ЗапросМЛ.УстановитьПараметр("МаршрутныйЛист", ТекДокумент);
		Результат = ЗапросМЛ.Выполнить();
		тзМаршрутныеЛистыИЗаказы = Результат.Выгрузить();
		
		// если Маршрутный лист не содержит Заказов на ТС, нужно прекратить заполнение
		КоличествоСтрок = тзМаршрутныеЛистыИЗаказы.Количество();
		Если КоличествоСтрок = 0 Тогда
			ТекстНСТР = НСтр("en='';ru='Не найдены Заказы на ТС в текущем Маршрутном листе. Создание Доверенностей запрещено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Выработка");
			Возврат;
		КонецЕсли;
		
		// формирование новый документов
		Для Каждого ТекСтрока Из тзМаршрутныеЛистыИЗаказы Цикл
			НовыйДокумент  = Документы.уатДоверенность.СоздатьДокумент();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ОснованиеМаршрутныйЛист",ТекДокумент);
			НовыйДокумент.Заполнить(ТекСтрока.Заказ);
			НовыйДокумент.Дата = ТекущаяДата();
			ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи);
			Объекты.Добавить(Новый Структура("Объект, МенеджерПечати", НовыйДокумент.Ссылка, МенеджерПечати));
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьТС(ТекДокумент) Экспорт
	Возврат ТекДокумент.ТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
КонецФункции

Функция ПолучитьОрганизациюПоСчетуНаСервере(ТекСчет)

	Если ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат ТекСчет.Владелец;
	Иначе 
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Функция ПолучитьСчетПоОрганизацииНаСервере(ТекОрганизация)

	Если ЗначениеЗаполнено(ТекОрганизация)
		И ТипЗнч(ТекОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", "Организации") Тогда
			Возврат ТекОрганизация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписи)
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписи);
	Исключение
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстНстр = Нстр("ru='Не удалось записать документ';en='Failed to save the document'") + " " + НовыйДокумент;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
			КонецПопытки;
		Иначе
			ТекстНстр = Нстр("ru='Не удалось записать документ';en='Failed to save the document'") + " " + НовыйДокумент;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Функция ЕстьСправочникКассы()
	
	Если Метаданные.Справочники.Найти("Кассы") = Неопределено Тогда 
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция КонтрагентыДокументов(НаименованиеТч, Знач таблЧасть,ДокументОснование)
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
	ДанныеЗаполнения.Вставить("Основание", ДокументОснование);
	ДанныеЗаполнения.Вставить(НаименованиеТч, таблЧасть);
	
	ДополнительныеСвойства = Новый Структура();
	уатОбщегоНазначения.ОбработкаЗаполненияФормаВыборКонтрагента(ДанныеЗаполнения, ДополнительныеСвойства);
	
	СтруктураРезультата = Новый Структура("мсвКонтрагенты, ТаблицаУслуги");
	СтруктураРезультата.мсвКонтрагенты = Новый СписокЗначений();
	СтруктураРезультата.ТаблицаУслуги  = Новый СписокЗначений();
	Если ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда
		тзКонтрагенты = ДополнительныеСвойства.мсвКонтрагенты;
		СтруктураРезультата.мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
		
		тзТаблицаУслуги = ДополнительныеСвойства.ТаблицаУслуги;
		СтруктураРезультата.ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
	ИначеЕсли ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
		тзКонтрагенты = ДополнительныеСвойства.мсвКонтрагент;
		СтруктураРезультата.мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
		
		тзТаблицаУслуги = ДополнительныеСвойства.мсвТаблицаУслуги;
		СтруктураРезультата.ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
	КонецЕсли;
	
	Возврат СтруктураРезультата;
КонецФункции

Процедура ПолучитьСтрокиДокументов(КонтрагентыДокумента, Услуги, СтрокиДокументов, СохраненныеКонтрагенты, ВидОперации = 0, ДокументОснование) Экспорт
	
	Контрагенты = Новый ТаблицаЗначений();
	Контрагенты.Колонки.Добавить("ФлагВыбора",		 Новый ОписаниеТипов("Булево"));
	Контрагенты.Колонки.Добавить("НомерКомплекта",	 Новый ОписаниеТипов("Число"));
	Контрагенты.Колонки.Добавить("Заказ",			 Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	Контрагенты.Колонки.Добавить("Контрагент",		 Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты"));
	Контрагенты.Колонки.Добавить("Договор",			 Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Контрагенты.Колонки.Добавить("Услуга",			 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	Для Каждого ТекКонтрагент Из КонтрагентыДокумента Цикл
		НоваяСтрока = Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекКонтрагент.Значение);
		НоваяСтрока.ФлагВыбора = Истина;
	КонецЦикла;

	тзКонтрагенты = Контрагенты.Скопировать();
	тзКонтрагенты.Свернуть("ФлагВыбора, НомерКомплекта, Заказ, Контрагент, Договор");
	тзКонтрагенты.Сортировать("ФлагВыбора, НомерКомплекта");
	
	мсвКонтрагенты	 = Новый Массив();
	МассивПараметров = Новый Массив();
	
	Для Каждого текСтрока Из тзКонтрагенты Цикл
		Если НЕ текСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		Комплект   = Контрагенты.НайтиСтроки(Новый Структура("ФлагВыбора, НомерКомплекта, Заказ, Контрагент, Договор",
			Истина, текСтрока.НомерКомплекта, текСтрока.Заказ, текСтрока.Контрагент, текСтрока.Договор));
		Контрагент = текСтрока.Контрагент;
		Договор    = текСтрока.Договор;
		Заказ      = текСтрока.Заказ;
		мсвУслуги  = Новый Массив();
		Для Каждого текСтрокаКомплект Из Комплект Цикл
			
			Для Каждого Услуга Из Услуги Цикл
				ТекУслуга = Услуга.Значение;
				Если НЕ ТекУслуга.Свойство("НоменклатураУслуги")
					И ТекУслуга.Номенклатура <> текСтрокаКомплект.Услуга Тогда
					Продолжить;
				ИначеЕсли ТекУслуга.Свойство("НоменклатураУслуги")
						И ТекУслуга.НоменклатураУслуги <> текСтрокаКомплект.Услуга Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВидОперации = 0 Тогда
					Если ТекУслуга.Свойство("ЗаказНаТС") Тогда
						СтруктураЗаказ = ПолучитьКонтрагентаиДоговор(ТекУслуга.ЗаказНаТС);
						мДоговор       = СтруктураЗаказ.ДоговорКонтрагента;
						мКонтрагент    = СтруктураЗаказ.Контрагент;
					Иначе
						мДоговор    = Договор;
						мКонтрагент = Контрагент;
					Конецесли;
				Иначе
					Если ТекУслуга.Свойство("Договор") Тогда
						мДоговор = ТекУслуга.Договор;
					Иначе
						мДоговор = Договор;
					КонецЕсли;
					Если ТекУслуга.Свойство("Контрагент") Тогда
						мКонтрагент = ТекУслуга.Контрагент;
					Иначе
						мКонтрагент = Контрагент;
					КонецЕсли;
				КонецЕсли;
				Если мКонтрагент = Контрагент
					И мДоговор = Договор Тогда
					мсвУслуги.Добавить(ТекУслуга);
				КонецЕсли;
			КонецЦикла;
			мсвКонтрагенты.Добавить(Новый Структура("НомерКомплекта, Заказ, Контрагент, Договор, Услуга",
				текСтрокаКомплект.НомерКомплекта, текСтрокаКомплект.Заказ, текСтрокаКомплект.Контрагент, текСтрокаКомплект.Договор, текСтрокаКомплект.Услуга));
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("ДокументОснование, Услуги, Контрагент, Договор, ЗаказГрузоотправителя",
		ДокументОснование, мсвУслуги, Контрагент, Договор, Заказ);
		МассивПараметров.Добавить(ПараметрыФормы);
	КонецЦикла;
	
	СтрокиДокументов.ЗагрузитьЗначения(МассивПараметров);
	СохраненныеКонтрагенты = мсвКонтрагенты;
	
КонецПроцедуры

Функция ПолучитьКонтрагентаиДоговор(ЗаказНаТС) Экспорт
	Если ЗаказНаТС = Документы.уатЗаказГрузоотправителя.ПустаяСсылка() 
		ИЛИ ЗаказНаТС = Неопределено Тогда
		мКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		мДоговор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		мКонтрагент = ЗаказНаТС.Контрагент;
		мДоговор    = ЗаказНаТС.ДоговорКонтрагента;
	КонецЕсли;
	Возврат Новый Структура("Контрагент, ДоговорКонтрагента", мКонтрагент, мДоговор);
КонецФункции

Процедура ЗаполнитьСписокПодчиненныхОбъектов(ДокументОснование, МассивДокументов)
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ОбъектыПоКритериюОтбора(ДокументОснование);
	Если РезультатЗапроса = Неопределено ИЛИ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	СчетчикДокументов = 1;
	
	ТипСчетНаОплатуПокупателю      = Тип("ДокументСсылка.уатСчетНаОплатуПокупателю");
	ТипРеализацияУслуг             = Тип("ДокументСсылка.уатРеализацияУслуг");
	ТипПлатежноеПоручениеВходящее  = Тип("ДокументСсылка.уатПлатежноеПоручениеВходящее");
	ТипПриходныйКассовыйОрдер      = Тип("ДокументСсылка.уатПриходныйКассовыйОрдер");
	ТипСчетНаОплатуПоставщика      = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика");
	ТипПоступлениеТоваровУслуг     = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг");
	ТипЗаявкаНаРасходованиеДС      = Тип("ДокументСсылка.уатЗаявкаНаРасходованиеДС");
	ТипПлатежноеПоручениеИсходящее = Тип("ДокументСсылка.уатПлатежноеПоручениеИсходящее");
	ТипРасходныйКассовыйОрдер      = Тип("ДокументСсылка.уатРасходныйКассовыйОрдер");
	ТипТТД                         = Тип("ДокументСсылка.уатТТД");
	ТипДоверенность                = Тип("ДокументСсылка.уатДоверенность");
	
	СоответсвиеДокументов = Новый Соответствие();
	//СоответсвиеДокументов.Вставить(ТипСчетНаОплатуПокупателю,      Элементы.ГруппаСчетНаОплатуПокупателюДокументы);
	//СоответсвиеДокументов.Вставить(ТипРеализацияУслуг,             Элементы.ГруппаРеализацияУслугДокументы);
	//СоответсвиеДокументов.Вставить(ТипПлатежноеПоручениеВходящее,  Элементы.ГруппаПлатежноеПоручениеВходящееДокументы);
	//СоответсвиеДокументов.Вставить(ТипПриходныйКассовыйОрдер,      Элементы.ГруппаПриходныйКассовыйОрдерДокументы);
	//СоответсвиеДокументов.Вставить(ТипСчетНаОплатуПоставщика,      Элементы.ГруппаСчетНаОплатуПоставщикаДокументы);
	//СоответсвиеДокументов.Вставить(ТипПоступлениеТоваровУслуг,     Элементы.ГруппаПоступлениеТоваровУслугДокументы);
	//СоответсвиеДокументов.Вставить(ТипЗаявкаНаРасходованиеДС,      Элементы.ГруппаЗаявкаНаРасходованиеДСДокументы);
	//СоответсвиеДокументов.Вставить(ТипПлатежноеПоручениеИсходящее, Элементы.ГруппаПлатежноеПоручениеИсходящееДокументы);
	//СоответсвиеДокументов.Вставить(ТипРасходныйКассовыйОрдер,      Элементы.ГруппаРасходныйКассовыйОрдерДокументы);
	//СоответсвиеДокументов.Вставить(ТипТТД,                         Элементы.ГруппаТТДДокументы);
	//СоответсвиеДокументов.Вставить(ТипДоверенность,                Элементы.ГруппаДоверенностьДокументы);

	Пока Выборка.Следующий() Цикл
		
		//Группа = СоответсвиеДокументов.Получить(ТипЗнч(Выборка.Ссылка)); 
		//Если Группа <> Неопределено Тогда
		//	ЗаполнитьСписокПодчиненныхОбъектов(Выборка.Ссылка);
		//Иначе
		//	Продолжить;
		//КонецЕсли;
		
		мМассивДокументов = МассивДокументов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		Если мМассивДокументов.Количество() = 0 Тогда
			НоваяСтрока = МассивДокументов.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.Группа = "Документ" + СчетчикДокументов;
			НоваяСтрока.ДокСоздан = Истина;
		КонецЕсли;
		
		СчетчикДокументов = СчетчикДокументов + 1;
		
	КонецЦикла;
	
	МассивДокументов.Сортировать("Ссылка");
	
КонецПроцедуры

Функция ОбъектыПоКритериюОтбора(ЗначениеКритерияОтбора)Экспорт
	
	Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанныеДокументы.Ссылка КАК Ссылка,
	               |	СвязанныеДокументы.Ссылка.Представление КАК Представление
	               |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
	
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);
	Возврат Запрос.Выполнить();

КонецФункции

Функция ПолучитьМенеджерПечати(Ссылка)
	ОбъектОписания = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Возврат ОбъектОписания.Имя;
КонецФункции
#КонецОбласти

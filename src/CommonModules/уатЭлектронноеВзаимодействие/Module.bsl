
#Область СлужебныйПрограммныйИнтерфейс

// Обработчик подписки на событие КонтрольНеразделенныхНаборовЗаписейПриЗаписи.
//
Процедура КонтрольНеразделенныхНаборовЗаписейПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	// ОбменДанными.Загрузка не требуется.
	// Запись неразделенных данных из разделенного сеанса запрещена.
	
КонецПроцедуры

// Обработчик подписки на событие КонтрольНеразделенныхОбъектовПриЗаписи.
//
Процедура КонтрольНеразделенныхОбъектовПриЗаписи(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка не требуется.
	// Запись неразделенных данных из разделенного сеанса запрещена.
	
КонецПроцедуры

#Область ПроверкаКлючевыхРеквизитовОбъекта

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента()
//
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, ТребуетсяКонтрольАктуальности, Отказ) Экспорт
	
	// Если для документа доступна только отправка печатных форм по ЭДО,
	// то не требуется отображать эти документы в Текущих делах ЭДО в разделе "Создать".
	Если ДоступнаТолькоОтправкаПечатныхФорм(Объект) Тогда
		ПодлежитОбменуЭД = Ложь;
		Возврат;
	КонецЕсли;
	
	// Для ЭПД никакие проверки не нужны
	Если ЭтоЭлектронныеПеревозочныеДокументы(Объект) Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлектронныйДокументСформирован = ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента);
	
	Если (Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Объект.ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
			И Не ЭлектронныйДокументСформирован) Тогда
		ПодлежитОбменуЭД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЭДО

Процедура КомандыЭДО_ФормаСпискаПриСоздании(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма					 = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд	 = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);

КонецПроцедуры

Процедура КомандыЭДО_ФормаЭлементаПриСоздании(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма					 = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд	 = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);

КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

Функция ДокументПоддерживаетВнутреннийЭДО(Источник) Экспорт
	
	Результат = Ложь;
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.уатПутевойЛист")
			ИЛИ ТипИсточника = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменСКонтрагентами

Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Компании.Ссылка КАК Ссылка
	|ИЗ
	|	&Компании КАК Компании
	|ГДЕ
	|	Компании.ИНН = &ИНН
	|	И &УсловиеПоКПП
	|	И НЕ Компании.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Компании", "Справочник." + ТипОбъекта); 
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Компании.КПП = &КПП"); 
		Запрос.УстановитьПараметр("КПП", КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Истина"); 
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаОрганизациюПоНаименованию(Наименование) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Компании.Ссылка КАК Ссылка,
	|	Компании.Наименование КАК Наименование,
	|	Компании.НаименованиеПолное КАК НаименованиеПолное,
	|	Компании.НаименованиеСокращенное КАК НаименованиеСокращенное
	|ИЗ
	|	Справочник.Организации КАК Компании
	|ГДЕ
	|	НЕ Компании.ПометкаУдаления";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПриведенноеНаименование = ПодготовитьСтроку(Наименование);
	Пока Выборка.Следующий() Цикл
		Если ПриведенноеНаименование = ПодготовитьСтроку(Выборка.НаименованиеПолное)
			Или ПриведенноеНаименование  = ПодготовитьСтроку(Выборка.Наименование)
			Или ПриведенноеНаименование  = ПодготовитьСтроку(Выборка.НаименованиеСокращенное) Тогда
			Результат = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Перевод текста в нижний регистр и удаление из нее крайних пробелов и других спец. символов.
Функция ПодготовитьСтроку(Знач Стр, УдалятьПробелы = Истина)
	
	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		Возврат Стр;
	КонецЕсли;
	
	Стр = СокрЛП(НРег(Стр));
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = "-"
			ИЛИ (УдалятьПробелы И СимволСтроки = " ")
			ИЛИ СимволСтроки = "№"
			ИЛИ СимволСтроки = """"
			ИЛИ СимволСтроки = ","
			ИЛИ СимволСтроки = "."
			ИЛИ СимволСтроки = ":"
			ИЛИ СимволСтроки = ";"
			ИЛИ СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК
			ИЛИ СимволСтроки = "/"
			ИЛИ СимволСтроки = "("
			ИЛИ СимволСтроки = ")"
			ИЛИ СимволСтроки = "\"
			ИЛИ СимволСтроки = "|" Тогда 
				
			Продолжить;
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция ДоступнаТолькоОтправкаПечатныхФорм(Объект)
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоЭлектронныеПеревозочныеДокументы(Объект)
	ТипОбъекта = ТипЗнч(Объект);
	
	Возврат ТипОбъекта = Тип("ДокументОбъект.ЭлектроннаяСопроводительнаяВедомость")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектроннаяТранспортнаяНакладная")
		Или ТипОбъекта = Тип("ДокументОбъект.ЭлектронныйЗаказНаряд");
		
КонецФункции

Функция ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента)

	Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияДокументовЭДО.НеСформирован;

КонецФункции

#КонецОбласти 

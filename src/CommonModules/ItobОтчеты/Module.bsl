////////////////////////////////////////////////////////////////////////////////
// Серверные события формы отчета.
//
////////////////////////////////////////////////////////////////////////////////
 
#Область ПрограммныйИнтерфейс

#Область ОтчетПоТопливу

// Получает данные выбора для датчика отчета по топливу.
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка.ItobВодители, 
//						СправочникСсылка.ItobТранспортныеСредства - Текущий объект мониторинга.
//  НачПериода		 - Дата	- Начало периода.
// 
// Возвращаемое значение:
//  СписокЗначений - Список выбора датчиков.
//
Функция ОтчетПоТопливуСписокВыбораДатчиков(ТекущийОбъект, НачПериода) Экспорт
	
	Терминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ТекущийОбъект,НачалоДня(НачПериода)-1);
	
	СписокВыбора = Новый СписокЗначений();
	
	Если ЗначениеЗаполнено(Терминал) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Терминал", Терминал);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ItobТерминалыДатчики.Назначение,
		               |	ItobТерминалыДатчики.Назначение.Представление,
		               |	NULL КАК Ссылка
		               |ИЗ
		               |	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
		               |ГДЕ
		               |	ItobТерминалыДатчики.Ссылка = &Терминал
		               |	И ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Топливо)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ItobТерминалыДатчики.Назначение,
		               |	ItobТерминалыДатчики.Назначение.Представление
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ItobТерминалыДатчики.Назначение,
		               |	ItobТерминалыДатчики.Назначение.Представление,
		               |	NULL
		               |ИЗ
		               |	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
		               |ГДЕ
		               |	ItobТерминалыДатчики.Ссылка = &Терминал
		               |	И ItobТерминалыДатчики.Назначение.ДатчикТоплива
		               |	И НЕ ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Топливо)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ItobТерминалыДатчики.Назначение,
		               |	ItobТерминалыДатчики.Назначение.Представление";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.Назначение, Выборка.НазначениеПредставление);
		КонецЦикла;	
	КонецЕсли;
	
	
	Возврат СписокВыбора;
	
КонецФункции

// Функция определяет Терминал, Датчик и КалибровочныйГрафик для переданного объекта.
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка.ItobВодители, СправочникСсылка.ItobТранспортныеСредства	 - Объект мониторинга.
//  Назначение		 - СправочникСсылка.ItobНазначенияДатчиков, Строка							 - Назначение.
//  НачПериода		 - Дата																		 - Начало период.
// 
// Возвращаемое значение:
//  Структура - Параметры датчика топлива:
//  * Терминал - СправочникСсылка.ItobТерминалы - Терминал.
//  * Датчик - СправочникСсылка.ItobДатчики - Датчик.
//  * КалибровочныйГрафик - СправочникСсылка.ItobКалибровочныеГрафики - Калибровочный график.
//
Функция ПолучитьПараметрыДатчикаТоплива(ТекущийОбъект, Назначение, НачПериода) Экспорт
	
	Результат = Новый Структура("Терминал,Датчик,КалибровочныйГрафик", 
		Справочники.ItobТерминалы.ПустаяСсылка(), Справочники.ItobДатчики.ПустаяСсылка(),
		                            Справочники.ItobКалибровочныеГрафики.ПустаяСсылка());
	
	Терминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ТекущийОбъект,НачалоДня(НачПериода)-1);
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда
		Возврат Результат;		
	КонецЕсли;
	
	Результат.Терминал = Терминал;
	
	СтрокаДатчики = Терминал.Датчики.Найти(Назначение,"Назначение");
	Если СтрокаДатчики = Неопределено Тогда
		Возврат Результат;	
	КонецЕсли;
	
	Результат.Датчик = СтрокаДатчики.Датчик;	
	Результат.КалибровочныйГрафик = СтрокаДатчики.КалибровочныйГрафик;
	
	Возврат Результат;	

КонецФункции

// Заполняем список выбора датчика топлива.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета по топливу.
//  ПараметрОбъект - СправочникСсылка.ItobВодители, 
//		СправочникСсылка.ItobТранспортныеСредства - Значение параметра "Объект".
//
Процедура ОтчетПоТопливу_ЗаполнитьСписокДатчиков(ФормаОтчета, ПараметрОбъект = Неопределено) Экспорт
	
	ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(ФормаОтчета);
	
	Если ПараметрОбъект = Неопределено Тогда
		ПараметрОбъект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	КонецЕсли; 
	
	ПараметрНачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	ПараметрДатчикТоплива = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "ДатчикТоплива", НСтр("ru = 'Датчик топлива'"));
	
	ЭлементДатчикТоплива = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(ФормаОтчета, "Датчик топлива");
	Если ЭлементДатчикТоплива = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЭлементДатчикТоплива.КнопкаСоздания = Ложь;
	ЭлементДатчикТоплива.РежимВыбораИзСписка = Истина;
	ЭлементДатчикТоплива.ВыбиратьТип = Ложь;
	
	ЭлементДатчикТоплива.СписокВыбора.Очистить();	
	СписокВыбора = ОтчетПоТопливуСписокВыбораДатчиков(ПараметрОбъект, ПараметрНачПериода);
	
	Для каждого ЭлементСпискаВыбора Из СписокВыбора Цикл
		ЭлементДатчикТоплива.СписокВыбора.Добавить(ЭлементСпискаВыбора.Значение, ЭлементСпискаВыбора.Представление);
	КонецЦикла; 
	
	УстанавливаемоеЗначениеДатчикаТоплива = Неопределено;
	РазмерСпискаБольше0 = (ЭлементДатчикТоплива.СписокВыбора.Количество() > 0);
	Если РазмерСпискаБольше0 Тогда
		Если ЭлементДатчикТоплива.СписокВыбора.Количество() > 1 Тогда
			ЭлементДатчикТоплива.СписокВыбора.Вставить(0, "ПоВсем", НСтр("ru = 'По всем'; en = 'All'"));			
		КонецЕсли;
		
		УстанавливаемоеЗначениеДатчикаТоплива = ЭлементДатчикТоплива.СписокВыбора[0].Значение;	
	КонецЕсли;
	
	ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, 
													   "ДатчикТоплива", 
													   УстанавливаемоеЗначениеДатчикаТоплива, 
												  	   НСтр("ru = 'Датчик топлива'"));
	
	ЭлементДатчикТоплива.Доступность = РазмерСпискаБольше0;
	
	ОтчетПоТопливу_УстановитьДоступностьКомандыОткрытияКалибровочногоГрафика(ФормаОтчета); 
		
КонецПроцедуры

// Заполняем список выбора датчика топлива.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - Форма отчета по топливу.
//  ОчиститьДатчик	 - Булево
//  ПараметрОбъект	 - СправочникСсылка - Объект мониторинга.
//
Процедура ОтчетПоДатчикамУстановитьПараметрыВыбораДатчика(Форма, ОчиститьДатчик = Ложь, ПараметрОбъект = Неопределено) Экспорт
	
	ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
	
	Если ПараметрОбъект = Неопределено Тогда
		ПараметрОбъект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	КонецЕсли;
	
	МодельТерминала = ItobОперативныйМониторинг.ПолучитьМодельТерминалаПоОбъекту(ПараметрОбъект);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", МодельТерминала);
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(НовыйПараметр);
	
	ЭлементДатчик = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Датчик");
	Если ЭлементДатчик = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ЭлементДатчик.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);	

	Если ОчиститьДатчик Тогда
		ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Датчик", Неопределено, НСтр("ru = 'Датчик'"));
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команды открытия калибровочного графика по значениям связанных полей (для отчета по топливу).
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Форма отчета по топливу. 
//
Процедура ОтчетПоТопливу_УстановитьДоступностьКомандыОткрытияКалибровочногоГрафика(ФормаОтчета) Экспорт
	
	ЭлементКомандаОткрытияКалибровочногоГрафика = ФормаОтчета.Элементы.Найти("ОткрытьКалибровочныйГрафик");
	Если НЕ ЭлементКомандаОткрытияКалибровочногоГрафика = Неопределено Тогда	
		ЭлементДатчикТоплива = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(ФормаОтчета, "Датчик топлива");
		Если ЭлементДатчикТоплива = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		Настройка_ДатчикТоплива = ItobОтчетыКлиентСервер.ЭлементНастройкиПоЭлементуФормы(ЭлементДатчикТоплива, ФормаОтчета);
		Если Настройка_ДатчикТоплива = Неопределено Тогда
			Возврат;	
		КонецЕсли; 
		
		ЗначениеНастройки_ДатчикТоплива = Настройка_ДатчикТоплива.Значение;
		
		ЭлементКомандаОткрытияКалибровочногоГрафика.Доступность = (ЗначениеЗаполнено(ЗначениеНастройки_ДатчикТоплива) 
																   И НЕ ЗначениеНастройки_ДатчикТоплива = "ПоВсем");	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Находит в дополнительных настройках отчета настройку оси точек диаграммы.
//
// Параметры:
//	ИмяНастройки - Строка - Имя настройки, которую требуется найти (как в синтакс-помощнике). Требуется имя самой настройки,
//							без пути до родительских настроек: например, "ОсьТочек", а не "ТипДиаграммы.ОсьТочек".
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - Настройки отчета, полученные через КомпоновщикНастроек.ПолучитьНастройки()
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Найденная и доступная для редактирования настройка 
//									или Неопределено в случае неуспешного поиска.
//
Функция НайтиНастройкуДиаграммы(ИмяНастройки, НастройкиКомпоновки) Экспорт
	
	НайденнаяНастройка = Неопределено;
	
	ПараметрКомпоновки_ТипДиаграммы = Новый ПараметрКомпоновкиДанных("ТипДиаграммы");
	
	ДопНастройки = НастройкиКомпоновки.ПараметрыВывода;
	ГруппаНастроекДиаграммы = Неопределено;
	Для каждого ДопНастройка_Группа Из ДопНастройки.Элементы Цикл
		Если ДопНастройка_Группа.Параметр = ПараметрКомпоновки_ТипДиаграммы Тогда
			ГруппаНастроекДиаграммы = ДопНастройка_Группа;
			
			Прервать;
		КонецЕсли; 	
	КонецЦикла; 
	
	Если ГруппаНастроекДиаграммы = Неопределено Тогда
		Возврат НайденнаяНастройка;	
	КонецЕсли; 
	
	ИмяПараметраКомпоновки = "ТипДиаграммы" + "." + ИмяНастройки;
	ПараметрКомпоновки_ОсьТочек = Новый ПараметрКомпоновкиДанных(ИмяПараметраКомпоновки);
	Для каждого НастройкаДиаграммы Из ГруппаНастроекДиаграммы.ЗначенияВложенныхПараметров Цикл
		Если НастройкаДиаграммы.Параметр = ПараметрКомпоновки_ОсьТочек
			 И НастройкаДиаграммы.Использование Тогда
			 
			НайденнаяНастройка = НастройкаДиаграммы.Значение;	
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат НайденнаяНастройка;
		
КонецФункции
 
// Находит в дополнительных настройках отчета настройку оси точек диаграммы.
//
// Параметры:
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - Настройки отчета, полученные через КомпоновщикНастроек.ПолучитьНастройки()
// 
// Возвращаемое значение:
//  ОсьДиаграммы, Неопределено - Доступная для редактирования настройка оси точек или Неопределено в случае неуспешного поиска.
//
Функция НайтиНастройкуОсиШкалыТочек(НастройкиКомпоновки) Экспорт
	
	Возврат НайтиНастройкуДиаграммы("ОсьТочек", НастройкиКомпоновки);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЭлементНастройкиПриИзмененииСервер(ФормаОтчета, ИмяИзмененногоЭлемента, ЗаголовокИзмененногоЭлемента) Экспорт
	
	Если ЗаголовокИзмененногоЭлемента = "Объект" Тогда
		ДействияПриИзмененииРеквизитаОбъект(ФормаОтчета);	
	КонецЕсли;
	
	Если ItobОтчетыКлиентСервер.ЭтоОтчетПоТопливу(ФормаОтчета) Тогда
		ОтчетПоТопливуЭлементНастройкиПриИзменении(ФормаОтчета, ЗаголовокИзмененногоЭлемента);
	КонецЕсли;
	
	ИзмененныйЭлемент = ФормаОтчета.Элементы.Найти(ИмяИзмененногоЭлемента);
	Если ИзмененныйЭлемент = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ItobОтчетыКлиентСервер.ЭтоОтчетСРегулированиемПериода(ФормаОтчета) Тогда	
		ПереопределитьЗаполнениеПараметраКонецПериода(ФормаОтчета, ИзмененныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в форме отчета после динамического создания элементов, связанных с пользовательскими настройками.
//
// Параметры:
//  ФормаОтчета		 - ФормаКлиентскогоПриложения - форма отчета. 
//  НастройкиОтчета	 - Структура - настройки отчета.
//
Процедура ПослеСозданияЭлементовНастроек(ФормаОтчета, НастройкиОтчета, ПервоеОткрытиеФормы = Истина) Экспорт
		
	Если ItobОтчетыКлиентСервер.ЭтоОтчетСРегулированиемПериода(ФормаОтчета)
		 ИЛИ ItobОтчетыКлиентСервер.ЭтоОтчетВизуализацияКалибровочногоГрафика(ФормаОтчета) Тогда		  
		 
		ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ИзменитьФормуПослеСозданияЭлементовНастроек(ФормаОтчета, ПервоеОткрытиеФормы);	
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДействияПриИзмененииРеквизитаОбъект(ФормаОтчета)
	
	НаименованиеОтчета = ItobОтчетыКлиентСервер.ПолучитьНаименованиеОтчета(ФормаОтчета);
	Если НаименованиеОтчета = "Отчет.ItobОтчетПоТопливу" Тогда
		ОтчетПоТопливу_ЗаполнитьСписокДатчиков(ФормаОтчета);	
		
	ИначеЕсли НаименованиеОтчета = "Отчет.ItobОтчетПоДискретнымДатчикам" 
		  	  ИЛИ НаименованиеОтчета = "Отчет.ItobОтчетПоАналоговымДатчикам" Тогда
			  
		ОчищатьДатчикПриИзмененииОбъекта = Истина;	  
		ОтчетПоДатчикамУстановитьПараметрыВыбораДатчика(ФормаОтчета, ОчищатьДатчикПриИзмененииОбъекта);
	КонецЕсли;

КонецПроцедуры

Процедура ОтчетПоТопливуЭлементНастройкиПриИзменении(ФормаОтчета, ЗаголовокИзмененногоЭлемента)
	
	Если ЗаголовокИзмененногоЭлемента = "Датчик топлива" Тогда
		ОтчетПоТопливу_УстановитьДоступностьКомандыОткрытияКалибровочногоГрафика(ФормаОтчета);	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПереопределитьЗаполнениеПараметраКонецПериода(ФормаОтчета, Элемент)
			
	ЭлементКонецПериода = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(ФормаОтчета, "Конец периода");
	
	Если Элемент = ЭлементКонецПериода Тогда	
		Настройка = ItobОтчетыКлиентСервер.ЭлементНастройкиПоЭлементуФормы(Элемент, ФормаОтчета);	
		Если Настройка = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		ЭтоСтандартнаяДатаНачала = (ТипЗнч(Настройка.Значение) = Тип("СтандартнаяДатаНачала"));
		ЗначениеНастройки = ?(ЭтоСтандартнаяДатаНачала, 
							  Настройка.Значение.Дата, 
							  Настройка.Значение);
		
		// Если в периоде изменялась дата, а не время.
		Если ЗначениеНастройки = НачалоДня(ЗначениеНастройки) Тогда	
			НовоеЗначениеНастройки = КонецДня(ЗначениеНастройки);
			Если ЭтоСтандартнаяДатаНачала Тогда
				Настройка.Значение.Дата = НовоеЗначениеНастройки;
			Иначе
				Настройка.Значение = НовоеЗначениеНастройки;
			КонецЕсли;
			
			Настройка.Использование = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 
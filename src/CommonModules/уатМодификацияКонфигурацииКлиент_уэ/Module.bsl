////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры, вызываемые из обработчиков форм, таких как:
// "ПриСозданииНаСервере".
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеОбработчиковФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          см. справочную информацию по событиям управляемой формы.
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ПоляФорм

// Переопределяемая процедура, вызываемая из обработчика события "ПриИзменении" поля формы.
// Вызов происходит из подключаемой процедуры "Подключаемый_ПолеПриИзменении".
//
// Параметры:
//  Форма   - форма, из обработчика события которой происходит вызов процедуры.
//            см. справочную информацию по событиям управляемой формы.
//  Элемент - элемент формы, вызвавший указанный обработчик.
//
Процедура ПолеФормыПриИзменении(Форма, Элемент) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатТС.Форма.ФормаЭлемента" И Элемент.Имя = "ПринадлежностьТС" Тогда 
		СправочникУатТСФормаЭлементаПринадлежностьПриИзменении(Форма, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из обработчика события "НачалоВыбора" поля формы.
// Вызов происходит из подключаемой процедуры "Подключаемый_ПолеНачалоВыбора".
//
// Параметры:
//  Форма                - форма, из обработчика события которой происходит вызов процедуры.
//                         см. справочную информацию по событиям управляемой формы.
//  Элемент              - элемент формы, вызвавший указанный обработчик.
//  ДанныеВыбора         - данные для выбора.
//  СтандартнаяОбработка - признак выполнения стандартной (системной) обработки события.
//
Процедура ПолеФормыНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатТС.Форма.ФормаЭлемента" И Элемент.Имя = "Водитель" Тогда 
		СправочникУатТСФормаЭлементаВодительНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из обработчика события "ОбработкаВыбора" поля формы.
// Вызов происходит из подключаемой процедуры "Подключаемый_ПолеНачалоВыбора".
//
// Параметры:
//  Форма                - форма, из обработчика события которой происходит вызов процедуры.
//                         см. справочную информацию по событиям управляемой формы.
//  Элемент              - элемент формы, вызвавший указанный обработчик.
//  ВыбранноеЗначение    - выбранное значение, которое будет установлено как значения поля ввода.
//  СтандартнаяОбработка - признак выполнения стандартной (системной) обработки события.
//
Процедура ПолеФормыОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатТС.Форма.ФормаЭлемента" И Элемент.Имя = "Водитель" Тогда 
		СправочникУатТСФормаЭлементаВодительОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из обработчика события "АвтоПодбор" поля формы.
//
Процедура ПолеФормыАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатТС.Форма.ФормаЭлемента" И Элемент.Имя = "Водитель" Тогда 
		СправочникУатТСФормаЭлементаВодительАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из обработчика события "ОкончаниеВводаТекста" поля формы.
//
Процедура ПолеФормыОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатТС.Форма.ФормаЭлемента" И Элемент.Имя = "Водитель" Тогда 
		СправочникУатТСФормаЭлементаВодительОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Элемент     - ПолеФормы        - Табличный документ.
//   Расшифровка          - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Если ФормаОтчета.ИмяФормы = "Отчет.уатАнализКластеровБезРасстояний_уэ.Форма" Тогда 
		ОбработкаРасшифровкиАнализКластеровБезРасстояний(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Переопределяемая процедура, вызываемая из обработчика события "Подключаемый_ВыполнитьКоманду" команд формы.
//
// Параметры:
//  Форма   - форма, из обработчика события которой происходит вызов процедуры.
//            см. справочную информацию по событиям управляемой формы.
//  Команда - выполняемая команда.
//
Процедура ВыполнитьПодключаемуюКоманду(Форма, Команда) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.уатПунктыНазначения.Форма.ФормаСписка" Тогда
		ФормаСпискаУатПунктыНазначенияВыполнитьПодключаемуюКоманду(Форма, Команда);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.уатРасстоянияМеждуПунктами.Форма.ФормаСписка" Тогда
		РегистрСведенийУатРасстоянияМеждуПунктамиФормаСписка(Форма, Команда);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СправочникУатТСФормаЭлементаПринадлежностьПриИзменении(Форма, Элемент)
	
	СправочникУатТСФормаЭлементаПринадлежностьПриИзмененииУстановитьВидимостьДоступность(Форма);
	
КонецПроцедуры

Процедура СправочникУатТСФормаЭлементаПринадлежностьПриИзмененииУстановитьВидимостьДоступность(Форма, ДопПараметры=Неопределено)
	
	Если Форма.Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт")
			Или Форма.Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт")
			Или Форма.Объект.ВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт") Тогда 
		Форма.Объект.Водитель = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")
			И ТипЗнч(Форма.Объект.ВладелецТС) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Форма.Объект.ВладелецТС = Неопределено;
	ИначеЕсли Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")
			И ТипЗнч(Форма.Объект.ВладелецТС) = Тип("СправочникСсылка.Организации") Тогда 
		Форма.Объект.ВладелецТС = Неопределено;
	ИначеЕсли Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
		Форма.Объект.ВладелецТС = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
		Форма.Объект.ИспользуемаяСистемаGPS = Неопределено;
		Форма.Объект.ИДвСистемеНавигации    = Неопределено;
	КонецЕсли;
	
	Если Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное")
			Или Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
		Форма.Объект.Организация                                 = Неопределено;
		Форма.Объект.Подразделение                               = Неопределено;
		Форма.Объект.Колонна                                     = Неопределено;
		Форма.Объект.НачальныйПробег                             = Неопределено;
		Форма.Объект.ДатаПостановкиНаУчетГИБДД                   = Неопределено;
		Форма.КоэффициентИзмененияНормТоплива                    = Неопределено;
		Форма.Объект.АвтоматическиСписыватьРасходТопливаНаЗапуск = Неопределено;
		Форма.Объект.ЗаполнятьПутевойЛистСпискомОборудования     = Неопределено;
		Форма.Объект.ИконкаНаКарте                               = Неопределено;
		Форма.Объект.ОсновноеСредство                            = Неопределено;
		Форма.Объект.КодПоКлассификатору                         = Неопределено;
		Форма.Объект.БалансоваяСтоимость                         = Неопределено;
		Форма.Объект.СрокИспользования                           = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникУатТСФормаЭлементаВодительНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("пРежимВыбора", Истина);
	
	ФормаВыбора = ПолучитьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрыОткрытия, Элемент);
	
	Если ЗначениеЗаполнено(Форма.Объект.ВладелецТС) Тогда
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Форма.Объект.ВладелецТС;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Параметры.РежимВыбора         = Истина;
	ФормаВыбора.ЗакрыватьПриВыборе            = Истина;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СправочникУатТСФормаЭлементаВодительОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеПоВодителю = уатМодификацияКонфигурацииВызовСервера_уэ.СправочникУатТСФормаЭлементаВодительОбработкаВыбораНаСервере(ВыбранноеЗначение);
		ДанныеПоВодителю.Свойство("Водитель", Форма.Объект.Водитель);
		Если Не ЗначениеЗаполнено(Форма.Объект.ВладелецТС) Тогда
			ДанныеПоВодителю.Свойство("ВладелецТС", Форма.Объект.ВладелецТС);
		КонецЕсли;
	КонецЕслИ;
	
КонецПроцедуры

Процедура СправочникУатТСФормаЭлементаВодительАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ПривлеченноеТС", Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
	Если Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров.Вставить("Организация", Форма.Объект.Организация);
		СтруктураПараметров.Вставить("ДатаСреза", ТекущаяДата());
	Иначе
		СтруктураПараметров.Вставить("ВладелецТС", Форма.Объект.ВладелецТС);
	КонецЕсли;
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

Процедура СправочникУатТСФормаЭлементаВодительОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("ПривлеченноеТС", Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
	Если Форма.Объект.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров.Вставить("Организация", Форма.Объект.Организация);
		СтруктураПараметров.Вставить("ДатаСреза", ТекущаяДата());
	Иначе
		СтруктураПараметров.Вставить("ВладелецТС", Форма.Объект.ВладелецТС);
	КонецЕсли;
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

Процедура ОбработкаРасшифровкиАнализКластеровБезРасстояний(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ФормаОтчета.НастройкиОтчета.ПолноеИмя <> "Отчет.уатАнализКластеровБезРасстояний_уэ" Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаДляРасшифровки = уатМодификацияКонфигурацииВызовСервера_уэ.ПолучитьЗначениеПоляРасшифровкиОтчетаАнализКластеровБезРасстояний(
		ФормаОтчета.ОтчетДанныеРасшифровки, 
		Расшифровка
	);
	
	Если СсылкаДляРасшифровки = Неопределено Или Не ТипЗнч(СсылкаДляРасшифровки) = Тип("СправочникСсылка.уатКластеры_уэ") Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура("Отбор, СформироватьПриОткрытии", Новый Структура("Кластер", СсылкаДляРасшифровки), Истина);
	ОткрытьФорму("Отчет.уатАнализКластеров_уэ.Форма", Параметры, ФормаОтчета);
	
КонецПроцедуры

Процедура ФормаСпискаУатПунктыНазначенияВыполнитьПодключаемуюКоманду(Форма, Команда)
	
	Если Команда.Имя = "ОбновитьВремяРасстояниеМеждуПунктами" Тогда
		ВыполнитьПодключаемуюКомандуОбновитьВремяРасстояниеМеждуПунктами(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрСведенийУатРасстоянияМеждуПунктамиФормаСписка(Форма, Команда)
	
	Если Команда.Имя = "ОбновитьВремяРасстояниеМеждуПунктами" Тогда
		ВыполнитьПодключаемуюКомандуОбновитьВремяРасстояниеМеждуПунктами(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПодключаемуюКомандуОбновитьВремяРасстояниеМеждуПунктами(Форма)
	
	ПараметрыФормы = Новый Структура("РежимОбновления", "ЗагрузкаВПункты");
	ОткрытьФорму("ОбщаяФорма.уатОбновлениеВремениРасстояния", ПараметрыФормы, Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы ФизическогоЛица

Процедура ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	ЛичныеДанныеФизическогоЛицаОбработкаОповещения(ИмяСобытия, Параметр, Форма, Форма.ФизическоеЛицоСсылка);
	
	Если ИмяСобытия = "ОтредактированаИстория" И Форма.ФизическоеЛицоСсылка = Источник Тогда
		Если (Параметр.ИмяРегистра = "ДокументыФизическихЛиц"
			ИЛИ Параметр.ИмяРегистра = "ФИОФизическихЛиц")
			И Форма[Параметр.ИмяРегистра + "НаборЗаписейПрочитан"] Тогда
			Если Параметр.ИмяРегистра = "ДокументыФизическихЛиц" Тогда
				ОбработкаОповещенияОтредактированаИсторияДокументыФизическихЛиц(Форма, Форма.ФизическоеЛицоСсылка, ИмяСобытия, Параметр, Источник);
				СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия ,Форма.Элементы.ДокументыФизическихЛицСерия, Форма);
				СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер ,Форма.Элементы.ДокументыФизическихЛицНомер, Форма);
				СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
			Иначе
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(Форма, Форма.ФизическоеЛицоСсылка, ИмяСобытия, Параметр, Источник);
				Если Параметр.ИмяРегистра = "ФИОФизическихЛиц" Тогда
					НаименованиеПоМенеджеруЗаписи = Форма.ФИОФизическихЛиц.Фамилия + " " + Форма.ФИОФизическихЛиц.Имя + " " + Форма.ФИОФизическихЛиц.Отчество;
					Если Не ПустаяСтрока(НаименованиеПоМенеджеруЗаписи) И Форма.Объект.ФИО <> НаименованиеПоМенеджеруЗаписи Тогда
						Форма.Объект.ФИО = НаименованиеПоМенеджеруЗаписи;
					КонецЕсли; 
					//СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	// Проверка реквизита Наименование на заполнение
	Если Не ЗначениеЗаполнено(Форма.Объект.ФИО) Тогда 
		ТекстОшибки = "Необходимо заполнить реквизит ""Наименование""";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"Объект.ФИО",,Отказ);
	КонецЕсли;
	
	// Запрос про полное имя
	ЗапроситьРежимИзмененияФИО(Форма, Форма.ФИОФизическихЛиц, Форма.ФИОФизическихЛицНоваяЗапись, Отказ, НСтр("en='employee';ru='сотрудника'"));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// если внесли изменение в ФИО
	//Если Форма.ФИОФизическихЛицНоваяЗапись И Форма.ВыполненаКомандаСменыФИО = Ложь Тогда
	//	ИзменитьФИОФизическогоЛица(Форма, Истина);
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	ФизическоеЛицо = Форма.Объект;
	
	ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	
	ДанныеФизическогоЛица = Новый Структура("ФизическоеЛицо, Фамилия, Имя, Отчество, ДатаРождения", 
										ФизическоеЛицо.Ссылка, 
										"", // Фамилия
										"", // Имя
										"", // Отчество
										ФизическоеЛицо.ДатаРождения);
										
	ДанныеФизическогоЛица.Фамилия       = Форма.ФИОФизическихЛиц.Фамилия;
	ДанныеФизическогоЛица.Имя           = Форма.ФИОФизическихЛиц.Имя;
	ДанныеФизическогоЛица.Отчество      = Форма.ФИОФизическихЛиц.Отчество;
	
	ДанныеФизическогоЛица.Вставить("ВидДокумента");
	ДанныеФизическогоЛица.Вставить("Серия", "");
	ДанныеФизическогоЛица.Вставить("Номер", "");
	ДанныеФизическогоЛица.Вставить("КемВыдан", "");
	ДанныеФизическогоЛица.Вставить("ДатаВыдачи", '00010101');
	ДанныеФизическогоЛица.Вставить("КодПодразделения", "");
	ДанныеФизическогоЛица.Вставить("ПредставлениеДокумента", "");
	
	ДанныеФизическогоЛица.ВидДокумента           = Форма.ДокументыФизическихЛиц.ВидДокумента;
	ДанныеФизическогоЛица.Серия                  = Форма.ДокументыФизическихЛиц.Серия;
	ДанныеФизическогоЛица.Номер                  = Форма.ДокументыФизическихЛиц.Номер;
	ДанныеФизическогоЛица.КемВыдан               = Форма.ДокументыФизическихЛиц.КемВыдан;
	ДанныеФизическогоЛица.ДатаВыдачи             = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
	ДанныеФизическогоЛица.КодПодразделения       = Форма.ДокументыФизическихЛиц.КодПодразделения;
	ДанныеФизическогоЛица.ПредставлениеДокумента = Форма.ДокументыФизическихЛиц.Представление;
	
	Оповестить("ИзменениеДанныхФизическогоЛица", ДанныеФизическогоЛица, ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

// Функция раскладывает Наименование в массив из трех элементов
//
// Параметры
//  ФИО  - строка - наименование
//
// Возвращаемое значение:
//   Массив   - массив из трех элементов, Фамилия, Имя, Отчество
//
Функция ПолучитьМассивФИО(Знач ФИО) Экспорт

	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
		Если Индекс < 3 Тогда
			МассивФИО[Индекс] = МассивПодстрок[Индекс];
		Иначе
			МассивФИО[2] = МассивФИО[2] + " " + МассивПодстрок[Индекс];
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФИО;
	
КонецФункции

// Выводит модальное окно, содержащее пояснение к предупреждающим полям
Процедура ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Подсказка = Элемент.Подсказка;
	
	Если Не ПустаяСтрока(Элемент.Заголовок) И Элемент.Заголовок <> "Ошибка" И Элемент.Заголовок <> "Почему?" И 
			Элемент.Заголовок <> Подсказка Тогда
	
		Подсказка = СтрПолучитьСтроку(Элемент.Заголовок, 1) + Символы.ПС + Подсказка;
	
	КонецЕсли;
	
	ПоказатьПредупреждение(Неопределено, Подсказка);
	
КонецПроцедуры

Процедура СформироватьНаименованиеФизическогоЛица(Форма) Экспорт
	ИзменитьНаименованиеФизическогоЛица(Форма);
	Форма.Заголовок = Форма.Объект.Наименование;
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.Заголовок, Форма);
КонецПроцедуры

Процедура ЗаблокироватьФизическоеЛицоПриРедактировании(Знач Оповещение, Форма, СообщатьОНевозможностиБлокировки = Истина) Экспорт
	Если НЕ Форма.ФизическоеЛицоЗаблокировано Тогда
		Если НЕ СотрудникиВызовСервера.ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(Форма.ФизическоеЛицоСсылка, Форма.ФизическоеЛицоВерсияДанных, Форма.УникальныйИдентификатор) Тогда
			Если СообщатьОНевозможностиБлокировки Тогда
				ТекстНСТР = НСтр("en=""Can not make changes to the employee's personal data. Perhaps, the personal data of the employee is edited by another user."";ru='Не удается внести изменения в личные данные сотрудника. Возможно, личные данные сотрудника редактируются другим пользователем.'");
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаблокироватьФизическоеЛицоПриРедактированииЗавершение", ЭтотОбъект, Новый Структура("Оповещение, Форма", Оповещение, Форма)), ТекстНСТР);
				Возврат;
			КонецЕсли; 
			// заблокировать не удалось - обновить данные физлица
			ЗаблокироватьФизическоеЛицоПриРедактированииФрагмент(Оповещение, Форма);

			Возврат;
		Иначе
			Форма.ФизическоеЛицоЗаблокировано = Истина;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Возврат;
КонецПроцедуры

Процедура ЗаблокироватьФизическоеЛицоПриРедактированииЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	Форма = ДополнительныеПараметры.Форма;
	
	
	ЗаблокироватьФизическоеЛицоПриРедактированииФрагмент(Оповещение, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает свойство Наименование объекту Сотрудник
// Параметры:
//		Фамилия, Имя, Отчество
//		УточнениеНаименования - строка, дополняющая имя сотрудника
Функция ПолучитьПолноеНаименованиеСотрудника(Фамилия, Имя, Отчество, УточнениеНаименования) Экспорт
	
	ПолноеНаименование = Фамилия;
	
	Если ЗначениеЗаполнено(Имя) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчество) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + Отчество;
	КонецЕсли;
	Если ЗначениеЗаполнено(УточнениеНаименования) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + УточнениеНаименования;
	КонецЕсли;
	
	Возврат ПолноеНаименование;
	
КонецФункции

Процедура СформироватьНаименованиеСотрудника(Форма) Экспорт
	Форма.Сотрудник.Наименование = ПолучитьПолноеНаименованиеСотрудника(Форма.ФИОФизическихЛиц.Фамилия, Форма.ФИОФизическихЛиц.Имя, 
		Форма.ФИОФизическихЛиц.Отчество, Форма.Сотрудник.УточнениеНаименования);
	Форма.СотрудникНаименование  = Форма.Сотрудник.Наименование;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обслуживания личных данных физического лица

Процедура УточнениеНаименованияПриИзменении(Форма, Элемент) Экспорт
	СформироватьНаименованиеСотрудника(Форма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обслуживания данных о ФИО

Процедура ПриИзмененииФИО(ФизическоеЛицо, МенеджерЗаписиФИО) Экспорт
	
	МассивФИОНаименование = ПолучитьМассивФИО(ФизическоеЛицо.Наименование);
	МассивФИОФИО          = ПолучитьМассивФИО(ФизическоеЛицо.ФИО);
	
	Если уатОбщегоНазначенияТиповые.МассивыИдентичны(МассивФИОНаименование, МассивФИОФИО) Тогда
		Если ЗначениеЗаполнено(МассивФИОНаименование[0]) Тогда 
			МассивФИО = МассивФИОНаименование;
		Иначе 
			МассивФИО = МассивФИОФИО;
		КонецЕсли;
	Иначе 
		Если ЗначениеЗаполнено(МассивФИОФИО[0]) Тогда 
			МассивФИО = МассивФИОФИО;
		Иначе 
			МассивФИО = МассивФИОНаименование;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивФИО.Количество() > 0 Тогда
		МенеджерЗаписиФИО.Фамилия  = МассивФИО[0];
		Если МассивФИО.Количество() > 1 Тогда
			МенеджерЗаписиФИО.Имя      = МассивФИО[1];
		КонецЕсли;
		Если МассивФИО.Количество() > 2 Тогда
			МенеджерЗаписиФИО.Отчество = МассивФИО[2];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
			Если ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = ФизическоеЛицо.ДатаРождения;
			Иначе
				МенеджерЗаписиФИО.Период = '19800101';
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьФИОФизическогоЛицаПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	мФорма = ДополнительныеПараметры.Форма;
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		// нажали ОК
		Если РезультатЗакрытия.ДатаИзменения >= мФорма["ФИОФизическихЛиц"].Период Тогда
			// изменим имя только если это - хронологически последняя запись регистра ФИО
			НовоеНаименование = РезультатЗакрытия.Фамилия + " " + РезультатЗакрытия.Имя + " " + РезультатЗакрытия.Отчество;
		Иначе
			// Вернем прежнее имя если это - ввод хронологически не последней записи регистра ФИО
			НовоеНаименование = мФорма["ФИОФизическихЛиц"].Фамилия + " " + мФорма["ФИОФизическихЛиц"].Имя + " " + мФорма["ФИОФизическихЛиц"].Отчество;
		КонецЕсли;
		
		ИзменениеЗаднимЧислом = РезультатЗакрытия.ДатаИзменения < мФорма["ФИОФизическихЛиц"].Период;
		ДатаТекущейЗаписи     = мФорма["ФИОФизическихЛиц"].Период;
		
		мФорма["ФИОФизическихЛиц"].Фамилия  = РезультатЗакрытия.Фамилия;
		мФорма["ФИОФизическихЛиц"].Имя      = РезультатЗакрытия.Имя;
		мФорма["ФИОФизическихЛиц"].Отчество = РезультатЗакрытия.Отчество;
		мФорма["ФИОФизическихЛиц"].Период   = РезультатЗакрытия.ДатаИзменения;
		
		мФорма.Модифицированность = Истина;
		мФорма.ВыполненаКомандаСменыФИО = Истина;
		
		Если Не ИзменениеЗаднимЧислом Тогда
			мФорма.Объект.ФИО = НовоеНаименование;
			СформироватьНаименованиеФизическогоЛица(мФорма);
		КонецЕсли; 
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗакрытьФорму Тогда 
		мФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииФИОФизическогоЛица(Форма) Экспорт
	
	ПриИзмененииФИО(Форма.Объект, Форма.ФИОФизическихЛиц);
	
	ИзменитьНаименованиеФизическогоЛица(Форма);
	Форма.Заголовок = Форма.Объект.Наименование;
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.Заголовок, Форма);
	
КонецПроцедуры

Процедура ФизическоеЛицоИзменилФИОНажатие(Форма) Экспорт
	
	ИзменитьФИОФизическогоЛица(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление отображением и доступностью документа удостоверяющего личность

Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Форма) Экспорт
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
	СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия ,Форма.Элементы.ДокументыФизическихЛицСерия, Форма);
	СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер ,Форма.Элементы.ДокументыФизическихЛицНомер, Форма);
КонецПроцедуры

Процедура ДокументыФизическихЛицСерияПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
	СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия, Элемент,  Форма);
КонецПроцедуры

Процедура ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
	СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер, Элемент,  Форма);
КонецПроцедуры

Процедура ДокументыФизическихЛицВидДокументаНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
		Форма.ДокументыФизическихЛиц.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли; 
КонецПроцедуры

Процедура ОткрытьСписокВсехДокументовФизическогоЛица(Форма, ФизическоеЛицоСсылка) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Физлицо", ФизическоеЛицоСсылка);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица", ПараметрыОткрытияФормы, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр истории

Процедура СотрудникиОткрытьФормуРедактированияИстории(Знач Оповещение, ИмяРегистра, Форма) Экспорт
	ФизлицоЗаблокировано = Неопределено;
	
	ЗаблокироватьФизическоеЛицоПриРедактировании(Новый ОписаниеОповещения("СотрудникиОткрытьФормуРедактированияИсторииЗавершение", ЭтотОбъект, Новый Структура("ИмяРегистра, Оповещение, Форма", ИмяРегистра, Оповещение, Форма)), Форма, Ложь);
	
КонецПроцедуры

Процедура СотрудникиОткрытьФормуРедактированияИсторииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРегистра = ДополнительныеПараметры.ИмяРегистра;
	Оповещение = ДополнительныеПараметры.Оповещение;
	Форма = ДополнительныеПараметры.Форма;
	
	
	ФизлицоЗаблокировано = Результат;
	Если ИмяРегистра = "ДокументыФизическихЛиц" Тогда
		СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(ИмяРегистра, Форма.ФизическоеЛицоСсылка, Форма, Форма.ТолькоПросмотр ИЛИ НЕ ФизлицоЗаблокировано);
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияИстории(ИмяРегистра, ВедущийОбъект, Форма) Экспорт
	ТолькоПросмотрИстории = Форма.ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			Форма.ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 
	Если ИмяРегистра = "ДокументыФизическихЛиц" Тогда
		СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);
	КонецЕсли;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(ИмяРегистра, ВедущийОбъект, Форма, ТолькоПросмотрИстории);
КонецПроцедуры

Процедура ФИОФизическихЛицИстория(ФизическоеЛицоСсылка, Форма, ФизическоеЛицоЗаблокировано, ФизическоеЛицоВерсияДанных) Экспорт
	Отказ = Ложь;
	ЗапроситьРежимИзмененияФИО(Форма, Форма.ФИОФизическихЛиц, Форма.ФИОФизическихЛицНоваяЗапись, Отказ, НСтр("en='employee';ru='сотрудника'"));
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	МассивЗаписей = Форма.МассивЗаписейИстории("ФИОФизическихЛиц");
КонецПроцедуры

Процедура ОбработкаОповещенияОтредактированаИсторияДокументыФизическихЛиц(Форма, ВедущийОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
	КоллекцииИдентичны = РедактированиеПериодическихСведенийКлиент.КоллекцииНаборовИдентичны(Форма[Параметр.ИмяРегистра + "НаборЗаписей"], Параметр.МассивЗаписей, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Форма[Параметр.ИмяРегистра + "Прежняя"]));
	Если НЕ КоллекцииИдентичны Тогда
		НаборЗаписей = Форма[Параметр.ИмяРегистра + "НаборЗаписей"];
		НаборЗаписей.Очистить();
		Для Каждого Строка Из Параметр.МассивЗаписей Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		НаборЗаписей.Сортировать("Период");
		ПоследняяЗапись = Неопределено;
		Если НаборЗаписей.Количество() > 0 Тогда
			Для СмещениеИндекса = 0 По НаборЗаписей.Количество()-1 Цикл
				Запись = НаборЗаписей[НаборЗаписей.Количество() - 1 - СмещениеИндекса];
				Если Запись.ЯвляетсяДокументомУдостоверяющимЛичность Тогда
					ПоследняяЗапись = Запись;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Если ПоследняяЗапись <> Неопределено Тогда
			СтруктураЗаписи = Новый Структура();
			Для Каждого КлючЗначение Из Форма[Параметр.ИмяРегистра + "Прежняя"] Цикл
				СтруктураЗаписи.Вставить(КлючЗначение.Ключ, ПоследняяЗапись[КлючЗначение.Ключ]);
			КонецЦикла;
			Форма[Параметр.ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
		Иначе
			МенеджерЗаписи = РедактированиеПериодическихСведенийВызовСервера.СтруктураМенеджераЗаписи(Параметр.ИмяРегистра, ВедущийОбъект);
			СтруктураЗаписи = Новый Структура();
			Для Каждого КлючЗначение Из Форма[Параметр.ИмяРегистра + "Прежняя"] Цикл
				СтруктураЗаписи.Вставить(КлючЗначение.Ключ, МенеджерЗаписи[КлючЗначение.Ключ]);
			КонецЦикла;
			Форма[Параметр.ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Форма[Параметр.ИмяРегистра], Форма[Параметр.ИмяРегистра + "Прежняя"]);
		Форма.Модифицированность = Истина;
		РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, Параметр.ИмяРегистра, ВедущийОбъект);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьНаименованиеФизическогоЛица(Форма)
	
	ПолноеНаименование = Форма.ФИОФизическихЛиц.Фамилия;
	
	Если ЗначениеЗаполнено(Форма.ФИОФизическихЛиц.Имя) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + Форма.ФИОФизическихЛиц.Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ФИОФизическихЛиц.Отчество) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + Форма.ФИОФизическихЛиц.Отчество;
	КонецЕсли;
	
	Форма.Объект.Наименование = ПолноеНаименование;
	
КонецПроцедуры

Процедура ЗаблокироватьФизическоеЛицоПриРедактированииФрагмент(Знач Оповещение, Знач Форма)
	
	Форма.ПрочитатьДанныеСвязанныеСФизлицом();
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, ФизическоеЛицоСсылка)
	//Если Форма.ИзмененыЛичныеДанные Тогда
	//	Оповестить("ИзменениеЛичныхДанных", ФизическоеЛицоСсылка);
	//КонецЕсли;	
КонецПроцедуры	

Процедура ЛичныеДанныеФизическогоЛицаОбработкаОповещения(ИмяСобытия, Параметр, Форма, ФизическоеЛицоСсылка)
	Если ИмяСобытия = "ИзменениеЛичныхДанных" и Параметр = ФизическоеЛицоСсылка Тогда
		Форма.Прочитать();
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьФИОФизическогоЛица(Форма, ЗакрытьФорму=Ложь)
	
	МассивФИО = ПолучитьМассивФИО(Форма.Объект.Наименование);
	ПараметрыФормы = Новый Структура("Фамилия,Имя,Отчество,ДатаИзменения", МассивФИО[0], 
		?(МассивФИО.Количество() > 1, МассивФИО[1], ""), ?(МассивФИО.Количество() > 2, МассивФИО[2], ""), ТекущаяДата());
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ЗакрытьФорму", ЗакрытьФорму);
	
	ОповещениеОСменеФИО = Новый ОписаниеОповещения("ИзменитьФИОФизическогоЛицаПродолжение", СотрудникиКлиент, ДопПараметры);
	
	ОткрытьФорму("ОбщаяФорма.СменаФИО", ПараметрыФормы, Форма,,,, ОповещениеОСменеФИО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Проверка модифицированности гражданства, инвалидности, удостоверения личности
//
Процедура ЗапроситьРежимИзмененияФИО(Форма, МенеджерЗаписиФИО, НоваяЗапись, Отказ, ПредставлениеСущности) 
	// Если на вопрос про ввод новой записи еще не ответили
	Если НоваяЗапись = Ложь Тогда
		НоваяДатаФИО = ТекущаяДата();
		
		// Требуется запрашивать пользователя об изменении только если еще не принято решение, что запись - новая
		Если Форма["ФИОФизическихЛицНоваяЗапись"] = Истина Тогда
			Возврат;
		КонецЕсли;
		
		// Требуется запрашивать пользователя об изменении только если задана дата записи
		Если НЕ ЗначениеЗаполнено(Форма["ФИОФизическихЛиц"].Период) Тогда
			Возврат;
		КонецЕсли;
		
		// Требуется запрашивать пользователя об изменении только если была считана прежняя запись
		Если НЕ ЗначениеЗаполнено(Форма["ФИОФизическихЛицПрежняя"].Период) Тогда
			Возврат;
		КонецЕсли;
		
		ИзменилсяПериод = (Форма["ФИОФизическихЛиц"].Период <> Форма["ФИОФизическихЛицПрежняя"].Период);
		ИзменилисьДанные = Ложь;
		Для Каждого Поле Из Форма["ФИОФизическихЛицПрежняя"] Цикл
			Если Поле.Ключ = "Период" Тогда
				Продолжить;
			КонецЕсли;
			ИзменилисьДанные = Форма["ФИОФизическихЛиц"][Поле.Ключ] <> Поле.Значение;
			Если ИзменилисьДанные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Требуется запрашивать пользователя об изменении - изменили и текущие данные, и дату записи
		Если ИзменилисьДанные Тогда
			Форма["ФИОФизическихЛицНоваяЗапись"] = Истина;
			МенеджерЗаписиФИО.Период = НоваяДатаФИО;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

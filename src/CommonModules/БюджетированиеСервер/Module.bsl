
#Область СлужебныйПрограммныйИнтерфейс

// Процедура формирует бюджетные задачи.
//
Процедура ФормированиеБюджетныхЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Задачи.БюджетнаяЗадача.ФормированиеБюджетныхЗадач();
	
КонецПроцедуры

// Возвращает параметры получения факта по умолчанию.
//
// Возвращаемое значение:
// 	 Параметры - Структура - параметры получения факта по статьям и показателя бюджетов.
//
Функция ПараметрыПолученияФакта() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ВалютаОтчета");
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");  // Периодичность детализации данных за период. Неопределено - без детализации.
	Параметры.Вставить("ОстаткиТолькоНаНачалоПериода", Ложь);   // Получение факт только на начало периода (для остатков), 
																// в противном случае данные получаются на конец каждого из подпериодов.
	Параметры.Вставить("ВозвращатьСуммуВВалюте", Истина); // Вернуть сумму в валюте в соответствии с настройками статьи / показателя.
	
	Параметры.Вставить("ВозвращатьПравилоПолученияДанных", Ложь);
	
	// Показатели данных
	Параметры.Вставить("Показатели", Новый Структура("Количество, Сумма"));
	
	// Разрезы данных
	Параметры.Вставить("ВидыАналитик", Новый Массив); // Аналитика (Номенклатура, Контрагенты...), в разрезе которой необходимо получить факт.
	Параметры.Вставить("ПоОрганизациям", Ложь); // Развернуть по организациям.
	Параметры.Вставить("ПоПодразделениям", Ложь); // Развернуть по подразделениям.
	Параметры.Вставить("РазворачиватьПоРегистратору", Ложь); // Разверуть факт по регистратору (для оборотов).
	
	Параметры.Вставить("ДополнительныйОтбор"); // Дополнительный (к основному отбору правила) отбор, который накладывается на данные источника.
	
	// Валюты
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
		
	Параметры.Вставить("ВалютаУпр",        ВалютаУправленческогоУчета);
	Параметры.Вставить("ВалютаРегл",       Константы.ВалютаРегламентированногоУчета.Получить());
	Параметры.Вставить("ВалютаМеждународ", ВалютаУправленческогоУчета);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает факт по статьям бюджетов в соответствии с настроенными правилами.
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - настройки отбора правил.
// 	Параметры - Структура - параметры получения фактических данных.
// 	ПересчитыватьВВалюту - Булево - признак необходимости пересчета из валюты хранения в валюту статьи.
//
// Возвращаемое значение:
// 	ФактПоСтатьямБюджетов - ТаблицаЗначения - Фактические данные по статьям бюджетов.
//
Функция ФактПоСтатьямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовим таблицу факта
	ФактПоСтатьямБюджетов = ТаблицаФактаПоСтатьямБюджетов(Параметры);
	
	// Подготовим таблицу правил
	СхемаКомпоновкиДанных = РегистрыСведений.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
	// Получим факт в соотвествии с правилами
	Для каждого Правило Из ТаблицаПравил Цикл
		ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ФактПоСтатьямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту статьи
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, Параметры);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ФактПоСтатьямБюджетов;
	
КонецФункции

// Возвращает факт по показателям бюджетов в соответствии с настроенными правилами.
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - настройки отбора правил.
// 	Параметры - Структура - параметры получения фактических данных.
// 	ПересчитыватьВВалюту - Булево - признак необходимости пересчета факта в валюту отчета.
//
// Возвращаемое значение:
// 	ФактПоПоказателямБюджетов - ТаблицаЗначения - фактические данные по показателям бюджетов.
//
Функция ФактПоПоказателямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПериодов = Планирование.ПолучитьТаблицуПериодов();
	
	Если Параметры.ОстаткиТолькоНаНачалоПериода Или Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, Параметры.Периодичность, Параметры.Период.ДатаНачала, Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	                                                      
	// Подготовим таблицу факта
	ФактПоПоказателямБюджетов = ТаблицаФактаПоПоказателямБюджетов(Параметры);
	
	// Подготовим таблицу правил
	СхемаКомпоновкиДанных = РегистрыСведений.ПравилаПолученияФактаПоПоказателямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
	// Получим факт в соотвествии с правилами
	Для каждого Правило Из ТаблицаПравил Цикл
		ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ФактПоПоказателямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту показателей бюджетов
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоПоказателямБюджетов, Параметры);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

// Возвращает факт по статьям и показателям бюджетов, а также значения нефинансовых показателей,
//  входящих в структуру вида бюджета.
//
// Параметры:
// 	ПараметрыДанных - Структура - отборы, определенные на уровне бюджетного отчета.
// 	ИсточникиДанных -  Массив - источников данных вида бюджета.
// 	ВалютаОтчета    - СправочникСсылка.Валюты - валюта, в которой необходимо вернуть факт.
//
// Возвращаемое значение:
// 	ФактПоВидуБюджета - ТаблицаЗначений.
//
Функция ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета) Экспорт
	
	КолонкиТаблицыДанныхВидаБюджета = БюджетнаяОтчетностьСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ПараметрыДанных.ВидБюджета);
	
	// Получаем факт только в разрезе минимальной периодичности
	Периодичность = Перечисления.Периодичность.МинимальнаяПериодичность(КолонкиТаблицыДанныхВидаБюджета.Периодичности);
	
	ВидыАналитик = КолонкиТаблицыДанныхВидаБюджета.ВидыАналитик;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	Параметры = ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям);
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	
	ТаблицаДанныхПоВидуБюджета = ТаблицаДанныхПоВидуБюджета(Параметры);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		
		ПолучатьФактическиеДанные = ИсточникДанных.ПредполагаетФактическиеДанные Или СценарийОтчетаФактическиеДанные;
		
		Если ИсточникДанных.ТипИсточника = "Обороты" И ПолучатьФактическиеДанные Тогда
			ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		ИначеЕсли ИсточникДанных.ТипИсточника = "Остатки" И ПолучатьФактическиеДанные Тогда
			ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ПересчитатьТаблицуДанныхВВалюту(ТаблицаДанныхПоВидуБюджета, Параметры);
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

// Устанавливает в тексте запроса выражения заполнения аналитики в зависимости от доступных типов объекта.
//
// Параметры:
// 	ТекстЗапроса - Строка - текст запроса для обработки.
// 	СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - статья бюджетов, определяющая аналитику.
// 	МенеджерОбъекта - ДокументМенеджер - источник заполнения аналитики.
//
Процедура УстановитьВЗапросеВыраженияЗаполненияАналитики(ДокументСсылка, ТекстЗапроса, СтатьяБюджетов, МенеджерОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеТипы = МенеджерОбъекта.ДоступныеТипыАналитикБюджетирования(ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК НомерАналитики,
	|	СтатьиБюджетов.ВидАналитики1 КАК ВидАналитики
	|ПОМЕСТИТЬ ВидыАналитик
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СтатьиБюджетов.ВидАналитики2
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	СтатьиБюджетов.ВидАналитики3
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	СтатьиБюджетов.ВидАналитики4
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	СтатьиБюджетов.ВидАналитики5
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	СтатьиБюджетов.ВидАналитики6
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыАналитик.НомерАналитики КАК НомерАналитики,
	|	ВидыАналитик.ВидАналитики КАК ВидАналитики,
	|	АналитикиСтатейБюджетов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ВидыАналитик КАК ВидыАналитик
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|	ПО
	|		ВидыАналитик.ВидАналитики = АналитикиСтатейБюджетов.Ссылка";
	
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Выражение = "НЕОПРЕДЕЛЕНО";
		Если ЗначениеЗаполнено(Выборка.ВидАналитики) Тогда
			Для каждого Тип Из Выборка.ТипЗначения.Типы() Цикл
				Если ДоступныеТипы[Тип] <> Неопределено Тогда
					Выражение = ДоступныеТипы[Тип];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Аналитика" + Выборка.НомерАналитики, Выражение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьВспомогательныеРеквизитыПередЗаписью(СтатьяИлиПоказатель) Экспорт
	
	ВидыАналитик = Новый Структура("ВидАналитики1, ВидАналитики2, ВидАналитики3, ВидАналитики4, ВидАналитики5, ВидАналитики6");
	ЗаполнитьЗначенияСвойств(ВидыАналитик, СтатьяИлиПоказатель);
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("ИмяАналитики");
	ТаблицаАналитик.Колонки.Добавить("ЗначениеАналитики");
	Для Каждого КлючИЗначение из ВидыАналитик Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаАналитик.Найти(КлючИЗначение.Значение, "ЗначениеАналитики") = Неопределено Тогда
			НоваяСтрока = ТаблицаАналитик.Добавить();
			НоваяСтрока.ИмяАналитики = КлючИЗначение.Ключ;
			НоваяСтрока.ЗначениеАналитики = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	ТаблицаАналитик.Сортировать("ИмяАналитики");
	
	Для Сч = 0 по ТаблицаАналитик.Количество() - 1 Цикл
		СтатьяИлиПоказатель["ВидАналитики" + (Сч + 1)] = ТаблицаАналитик[Сч].ЗначениеАналитики;
	КонецЦикла;
	
	Для ОставшиесяАналитики = ТаблицаАналитик.Количество() + 1 По 6 Цикл
		СтатьяИлиПоказатель["ВидАналитики" + ОставшиесяАналитики] = Неопределено;
	КонецЦикла;
	
	СтатьяИлиПоказатель.КоличествоИспользуемыхАналитик = ТаблицаАналитик.Количество();
	
	АдресАналитикиВалюта = 0;
	Если СтатьяИлиПоказатель.ВалютаОпределяетсяАналитикой Тогда
		Если СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики1 Тогда
			АдресАналитикиВалюта = 1;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики2 Тогда
			АдресАналитикиВалюта = 2;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики3 Тогда
			АдресАналитикиВалюта = 3;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики4 Тогда
			АдресАналитикиВалюта = 4;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики5 Тогда
			АдресАналитикиВалюта = 5;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики6 Тогда
			АдресАналитикиВалюта = 6;
		КонецЕсли;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиВалюта = АдресАналитикиВалюта;
	
	АдресАналитикиКоличество = 0;
	Если СтатьяИлиПоказатель.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Если СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики1 Тогда
			АдресАналитикиКоличество = 1;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики2 Тогда
			АдресАналитикиКоличество = 2;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики3 Тогда
			АдресАналитикиКоличество = 3;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики4 Тогда
			АдресАналитикиКоличество = 4;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики5 Тогда
			АдресАналитикиКоличество = 5;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики6 Тогда
			АдресАналитикиКоличество = 6;
		КонецЕсли;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиКоличество = АдресАналитикиКоличество;
	
КонецПроцедуры

#Область АналитическиеОтчеты

Процедура ДополнитьСхемуКомпоновкиДанныхАналитикойПоВиду(СхемаКомпоновкиДанных, ИсточникАналитики) Экспорт
	
	ВидыАналитик = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	Для каждого ВидАналитики Из ВидыАналитик Цикл
		
		ИмяПоляАналитики = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики.Ссылка);
		ВыражениеАналитики = БюджетнаяОтчетностьСервер.ПолучитьТекстПоляВидаАналитики(ИмяПоляАналитики);
		
		ВыражениеАналитики = СтрЗаменить(ВыражениеАналитики, "СтатьяБюджетов", ИсточникАналитики);
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
			СхемаКомпоновкиДанных, 
			ИмяПоляАналитики, 
			ВыражениеАналитики, 
			ВидАналитики.Представление);
		
		НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		НовыйПараметр.Имя = ИмяПоляАналитики;
		НовыйПараметр.Значение = ВидАналитики.Ссылка;
		НовыйПараметр.ОграничениеИспользования = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, ПользовательскиеНастройки) Экспорт
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаАктуальностиДанных");
	Если Параметр <> Неопределено Тогда
		ИдентификаторПользовательскойНастройки = Параметр.ИдентификаторПользовательскойНастройки;
		ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскойНастройки <> Неопределено Тогда
			ЭлементПользовательскойНастройки.Значение = Дата('00010101');
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПравилПолученияДанных

Процедура ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, ИмяТаблицы) Экспорт
	
	ВидыАналитики = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	
	ТекстНСТР = НСтр("en='<other %1>';ru='<прочие %1>'");
	
	Для каждого ВидАналитики Из ВидыАналитики Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ВидАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = ВидАналитики.Ссылка;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ЗначениеАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбораДанных.Использование = Истина;
		
		Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
		Оформление.Использование = Истина;
		Оформление.Значение = СтрШаблон(ТекстНСТР, ВидАналитики.Представление);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ЗначениеАналитики");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
		Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		
		Счет = Правило.ИсточникДанных;
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ПолеГруппаСчет = ПоляНабораДанных.Найти("ГруппаСчет");
		Если ПолеГруппаСчет <> Неопределено Тогда
			РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Код, Наименование");
			ПолеГруппаСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
		КонецЕсли;
		
		ВидыКорСубконто = Неопределено;
		Если Правило.Свойство("КорСчет") И ЗначениеЗаполнено(Правило.КорСчет) Тогда
			ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
			ПолеГруппаКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет");
			Если ПолеГруппаКорСчет <> Неопределено Тогда
				РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.КорСчет, "Код, Наименование");
				ПолеГруппаКорСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
			КонецЕсли;
			
			ПолеКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет.КорСчет");
			Если ПолеКорСчет <> Неопределено Тогда
				ПолеКорСчет.ОграничениеИспользования.Условие = Истина;
				ПолеКорСчет.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто);
		
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено 
		 Или СхемаКомпоновкиДанных.НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПолеНабора Из СхемаКомпоновкиДанных.НаборыДанных[0].Поля Цикл
		
		ЭтоПолеНедоступноеДляЗаполненияАналитики = 
			(ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И Не ЗначениеЗаполнено(ПолеНабора.ТипЗначения));
		
		Если ЭтоПолеНедоступноеДляЗаполненияАналитики Тогда
			ПолеНабора.ОграничениеИспользования.Поле = Истина;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеНастроекЗаполненияАналитики(УсловноеОформление) Экспорт
	
	ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, "НастройкиЗаполненияАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитики");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиНетВДоступныхПолях");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗначениеАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("en='Specified value';ru='Указанным значением'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("en='From data source';ru='Из источника данных'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(Форма, Правило, ВидыАналитик) Экспорт
	
	НастройкиЗаполненияАналитики = Форма.НастройкиЗаполненияАналитики;
	
	НастройкиЗаполненияАналитики.Очистить();
	
	Если Не Правило.РасширеныйРежимНастройкиЗаполненияАналитики Тогда
		Возврат;
	КонецЕсли;
	
	МассивВидовАналитик = Новый Массив;
	Для каждого ВидАналитки Из ВидыАналитик Цикл
		МассивВидовАналитик.Добавить(ВидАналитки.Значение);
	КонецЦикла;
	
	ДополнительныеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовАналитик, "ДополнительноеСвойство");
	
	Для НомерАналитики = 1 По 6 Цикл
		
		ВидАналитики = ВидыАналитик["ВидАналитики" + НомерАналитики];
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастройки = НастройкиЗаполненияАналитики.Добавить();
		СтрокаНастройки.НомерАналитики               = НомерАналитики;
		СтрокаНастройки.ВидАналитики                 = ВидАналитики;
		СтрокаНастройки.ДополнительноеСвойство       = ДополнительныеСвойства[ВидАналитики];
		СтрокаНастройки.ЗаполнятьУказаннымЗначением  = Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики];
		СтрокаНастройки.ЗначениеАналитики            = Правило["ЗначениеАналитики" + НомерАналитики];
		СтрокаНастройки.ВыражениеЗаполненияАналитики = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкиЗаполненияАналитикиАвтоматически(Форма) Экспорт
	
	НастройкиЗаполненияАналитики = Форма.НастройкиЗаполненияАналитики;
	АдресСхемыКомпоновкиДанных = Форма.АдресСхемыКомпоновкиДанных;
	КомпоновщикНастроек = Форма.КомпоновщикНастроек;
	
	ВидыАналитик = НастройкиЗаполненияАналитики.Выгрузить(, "НомерАналитики, ВидАналитики");
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик);
	
	Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
		Отбор = Новый Структура("НомерАналитики, ВидАналитики");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНастройки);
		РезультатПоиска = ВыраженияЗаполненияАналитики.НайтиСтроки(Отбор)[0];
		
		Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
			СтрокаНастройки.ВыражениеЗаполненияАналитики = РезультатПоиска.Выражение;
			СтрокаНастройки.ЗаполнятьУказаннымЗначением = Ложь;
		Иначе
			СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
			СтрокаНастройки.ЗаполнятьУказаннымЗначением = Истина;
		КонецЕсли;
		
		ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДоступностьПолейЗаполненияАналитики(Форма, Правило, ОчищатьНедоступныеНастройки = Ложь) Экспорт
	
	Если Не Правило.РасширеныйРежимНастройкиЗаполненияАналитики Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиЗаполненияАналитики = Форма.НастройкиЗаполненияАналитики;
	КомпоновщикНастроек = Форма.КомпоновщикНастроек;
	Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
		ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек, ОчищатьНедоступныеНастройки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьНастройкиЗаполненияАналитикиВПравило(Форма, Правило) Экспорт
	
	НастройкиЗаполненияАналитики = Форма.НастройкиЗаполненияАналитики;
	
	Для НомерАналитики = 1 По 6 Цикл
		Правило["ЗначениеАналитики" + НомерАналитики]                    = Неопределено;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = Неопределено;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики]              = Неопределено;
	КонецЦикла;
	
	Если Правило.РасширеныйРежимНастройкиЗаполненияАналитики Тогда
		Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
			НомерАналитики = СтрокаНастройки.НомерАналитики;
			Правило["ЗначениеАналитики" + НомерАналитики]                    = СтрокаНастройки.ЗначениеАналитики;
			Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = СтрокаНастройки.ЗаполнятьУказаннымЗначением;
			Правило["ВыражениеЗаполненияАналитики" + НомерАналитики]         = СтрокаНастройки.ВыражениеЗаполненияАналитики;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитикиПослеВыбора(Форма, ИдентификаторСтроки) Экспорт 
	
	НастройкиЗаполненияАналитики = Форма.НастройкиЗаполненияАналитики;
	АдресСхемыКомпоновкиДанных   = Форма.АдресСхемыКомпоновкиДанных;
	КомпоновщикНастроек          = Форма.КомпоновщикНастроек;
	
	СтрокаНастройки = НастройкиЗаполненияАналитики.НайтиПоИдентификатору(ИдентификаторСтроки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек, ОчищатьНедоступныеНастройки = Ложь)
	
	Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
		СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
	КонецЕсли;
	
	Если СтрокаНастройки.ВыражениеЗаполненияАналитики = "" Тогда
		СтрокаНастройки.НетВДоступныхПолях = Ложь;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = "";
		Возврат;
	КонецЕсли;
	
	СтрокаНастройки.НетВДоступныхПолях = Ложь;
	
	Поле = Новый ПолеКомпоновкиДанных(СтрокаНастройки.ВыражениеЗаполненияАналитики);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле);
	Если ДоступноеПоле = Неопределено Тогда
		Если ОчищатьНедоступныеНастройки Тогда
			СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
		Иначе
			СтрокаНастройки.НетВДоступныхПолях = Истина; 
		КонецЕсли;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	Иначе
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = ДоступноеПоле.Заголовок;  
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиНастроекЗаполненияАналитики(НастройкиЗаполненияАналитики, Отказ) Экспорт
	
	ТекстНСТР = НСтр("en='Configure the filling analysts ""%1""';ru='Настройте заполнение аналитики ""%1""'");
	ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
	
	Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
		
		Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаНастройки.НетВДоступныхПолях И СтрокаНастройки.ВыражениеЗаполненияАналитики <> "" Тогда
			Продолжить;
		КонецЕсли;
			
		Сообщение = СтрШаблон(ТекстНСТР, СтрокаНастройки.ВидАналитики);
		Поле = СтрШаблон(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле, , Отказ); 
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям

Процедура ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		СтатьиБюджетов = Новый СписокЗначений;
		СтатьиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "СтатьяБюджетов", СтатьиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил, ПараметрыПоИсточнику, Ложь);
	Для каждого Строка Из ФактПоСтатьямБюджетов Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
		НоваяСтрока.Сценарий = Справочники.Сценарии.ФактическиеДанные;
		НоваяСтрока.СуммаПриход = Строка.Сумма;
		НоваяСтрока.СуммаВалПриход = Строка.СуммаВВалюте;
		НоваяСтрока.КоличествоПриход = Строка.Количество;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		ПоказателиБюджетов = Новый СписокЗначений;
		ПоказателиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, "ПоказательБюджетов", ПоказателиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	ФактПоПоказателямБюджетов = ФактПоПоказателямБюджетов(ОтборПравил, ПараметрыПоИсточнику, Ложь);
	ФактПоСтатьямБюджетов = ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, ПараметрыПоИсточнику, Ложь, Ложь);
	
	Сценарии = Справочники.Сценарии.СценарииСУчетомОтбора(ПараметрыПоИсточнику.ДополнительныйОтбор);
	Если Сценарии.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='Not defined scripts of data source';ru='Не определены сценарии источника данных'");
		ВызватьИсключение ТекстНСТР;
	КонецЕсли;
	
	Для каждого СтрокаСценарии Из Сценарии Цикл
		Для каждого СтрокаФакт Из ФактПоПоказателямБюджетов Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока.Сценарий = СтрокаСценарии.Сценарий;
			НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
			НоваяСтрока.КоличествоНачальныйОстаток = СтрокаФакт.Количество;
			НоваяСтрока.СуммаНачальныйОстаток = СтрокаФакт.Сумма;
			НоваяСтрока.СуммаВВалютеНачальныйОстаток = СтрокаФакт.СуммаВВалюте;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаФакт Из ФактПоСтатьямБюджетов Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
		НоваяСтрока.Сценарий = Справочники.Сценарии.ФактическиеДанные;
		НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	ПараметрыПоИсточнику.Вставить("ВыражениеНачалоПериода",      ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеНачалоПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеКонецПериода",       ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеКонецПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеПериодаГруппировки", ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеПериодаГруппировки));
	ПараметрыПоИсточнику.Вставить("ГраницаФактДанных",           ПараметрыДанных.ГраницаФактДанных);
	
	ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(ИсточникДанных.ДополнительныйОтбор.Отбор, 
												ДополнительныйОтбор.Отбор);
	Если ДополнительныйОтбор <> Неопределено И ПараметрыДанных <> Неопределено Тогда
		БюджетнаяОтчетностьСервер.ДополнитьНастройкиСКДПередВыводом(ДополнительныйОтбор, ПараметрыДанных);
	КонецЕсли;
	ПараметрыПоИсточнику.ДополнительныйОтбор = ДополнительныйОтбор;
	
	Возврат ПараметрыПоИсточнику;
	
КонецФункции

Функция ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям)
	
	Параметры = ПараметрыПолученияФакта();
	
	Параметры.ВалютаОтчета = ВалютаОтчета;
	Параметры.ВозвращатьСуммуВВалюте = Истина;
	Параметры.Период = Период; 
	Параметры.Периодичность = Периодичность;
	Если ВидыАналитик <> Неопределено Тогда
		Параметры.Вставить("ВидыАналитик", ВидыАналитик);
	КонецЕсли;
	Параметры.ПоОрганизациям = ПоОрганизациям;
	Параметры.ПоПодразделениям = ПоПодразделениям;
	Параметры.ОстаткиТолькоНаНачалоПериода = Истина;
	
	Возврат Параметры;
	
КонецФункции

Функция ТаблицаФактаПоСтатьямБюджетов(Параметры)
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	
	Если Параметры.ВозвращатьПравилоПолученияДанных Тогда
		
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(
			"СправочникСсылка.НастройкиХозяйственныхОпераций, 
			|Строка");
		
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		ТаблицаФакта.Колонки.Добавить("КорСчет");
		ТаблицаФакта.Колонки.Добавить("ИсточникСуммыОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ПоказателиАналитическихРегистров"));
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
	КонецЕсли;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

Функция ТаблицаФактаПоПоказателямБюджетов(Параметры)
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	
	Если Параметры.ВозвращатьПравилоПолученияДанных Тогда
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

Функция ТаблицаДанныхПоВидуБюджета(Параметры)
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЗначениеНефинансовогоПоказателя = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)); 
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	ТаблицаФакта.Колонки.Добавить("ИД_Источника", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
	
	ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	ТаблицаФакта.Колонки.Добавить("КоличествоНачальныйОстаток", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаНачальныйОстаток", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВВалютеНачальныйОстаток", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоПриход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаПриход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалПриход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоРасход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаРасход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалРасход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЗначениеНефинансовогоПоказателя);
	ТаблицаФакта.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	Возврат ТаблицаФакта;
	
КонецФункции

Процедура ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта)
	
	СхемаКомпоновкиДанных = 
		РегистрыСведений.ПравилаПолученияФактаПоСтатьямБюджетов.СхемаПолученияДанных(Правило);
		
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		  Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		 ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		 ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
		 УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто); 
	КонецЕсли;
	
	НастройкиОтбора = Правило.КомпоновщикНастроек.Получить();
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода",  Параметры.Период.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода",   Параметры.Период.ДатаОкончания);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ХозяйственнаяОперация", Правило.ХозяйственнаяОперация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Правило.КорСчет) Тогда
		ПараметрКорСчет = СхемаКомпоновкиДанных.Параметры.Найти("КорСчет");
		ПараметрКорСчет.Значение = Правило.КорСчет;
		ПараметрКорСчет.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
		ПараметрНачалоПериода.Выражение = Параметры.ВыражениеНачалоПериода;
	КонецЕсли;
	Если Параметры.Свойство("ВыражениеКонецПериода") Тогда
		ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
		ПараметрКонецПериода.Выражение = Параметры.ВыражениеКонецПериода;
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	ПараметрОборотПоАналитикеРасхода = СхемаКомпоновкиДанных.Параметры.Найти("ОборотПоАналитикеРасхода");
	Если ПараметрОборотПоАналитикеРасхода <> Неопределено Тогда
		ПараметрОборотПоАналитикеРасхода.Значение = Правило.ОборотПоАналитикеРасхода;
	КонецЕсли;
	
	Если Параметры.Периодичность <> Неопределено Тогда
		
		ИмяПоляПериод = "Период" + Параметры.Периодичность;
		ЕстьПолеНеобходимойПериодичности = (НаборДанных.Поля.Найти(ИмяПоляПериод) <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеНеобходимойПериодичности Тогда
			ВыражениеПериод = ИмяПоляПериод;
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НАЧАЛОПЕРИОДА(Период, ""%1"")", 
				Параметры.Периодичность); 
		Иначе
			ТекстНСТР = НСтр("en='There is no period field in data source schema."
"Data receipt in context of period is not possible.';ru='В схема источника данных отсутствует поле периода. "
"Получение данных в разрезе периода невозможно.'");
			ВызватьИсключение ТекстНСТР;
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериод = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериод);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "Период");
		
	КонецЕсли;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ЕстьПолеРегистратор = (НаборДанных.Поля.Найти("Регистратор") <> Неопределено);
		Если Не ЕстьПолеРегистратор Тогда
			ТекстНСТР = НСтр("en='In the data source schema, there is no registrar field."
"Receipt of data in the context of the registrar is impossible.';ru='В схема источника данных отсутствует поле регистратор. "
"Получение данных в разрезе регистратора невозможно.'");
			ВызватьИсключение ТекстНСТР;
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
		
	КонецЕсли;
	
	ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
	КонецЦикла;
	
КонецПроцедуры

Процедура ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта)
	
	СхемаКомпоновкиДанных = РегистрыСведений.ПравилаПолученияФактаПоПоказателямБюджетов.СхемаПолученияДанных(Правило);
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		 Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных); 
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто); 
	КонецЕсли;

	НастройкиОтбора = Правило.КомпоновщикНастроек.Получить();
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	// Инициализируем параметр, чтобы он появился в макете компоновки данных
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "СтатьяАктивовПассивов", Правило.ИсточникДанных);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("Период");
		ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД");
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		
		ВыражениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"НАЧАЛОПЕРИОДА(&Период, ""%1"")", Параметры.Периодичность);  
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериода = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериода);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериода);
		ДобавитьПолеГруппировки(Настройки, "Период");
	КонецЕсли;
	
	ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	Для каждого СтрокаПериод Из Параметры.ТаблицаПериодов Цикл
		Период = ?(Параметры.ОстаткиТолькоНаНачалоПериода, СтрокаПериод.ДатаНачала, СтрокаПериод.ДатаОкончания);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Период", Период);
		РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
		Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
			НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьТаблицуДанныхВВалюту(ТаблицаДанных, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.ВалютаХранения,
	|	//ВозвращатьСуммуВВалюте ТаблицаДанных.Валюта,
	|	ТаблицаДанных.ПериодКурса
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДанных.ПериодКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.ПериодКурса КАК Период,
	|	ТаблицаДанных.ВалютаХранения КАК ВалютаХранения,
	|	//ВозвращатьСуммуВВалюте ТаблицаДанных.Валюта КАК Валюта,
	|	&ВалютаОтчета КАК ВалютаОтчета
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.ВалютаХранения <> &ВалютаОтчета
	|	//ВозвращатьСуммуВВалюте ИЛИ ТаблицаДанных.ВалютаХранения <> ТаблицаДанных.Валюта
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВалютаХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Валюты.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	Валюты КАК Валюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО 
	|			Валюты.Период >= КурсыВалют.Период
	|			И  КурсыВалют.Валюта В (
	|					Валюты.ВалютаХранения, 
	|					//ВозвращатьСуммуВВалюте Валюты.Валюта,
	|					Валюты.ВалютаОтчета)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Валюты.Период,
	|	КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюты.Период,
	|	КурсыВалют.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыКурсовВалют.Период КАК Период,
	|	ПериодыКурсовВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс / КурсыВалют.Кратность КАК Курс
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО 
	|			ПериодыКурсовВалют.ПериодКурса = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ВалютаОтчета", Параметры.ВалютаОтчета);
	
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВозвращатьСуммуВВалюте", "");
	КонецЕсли;
	
	КурсыВалют = Запрос.Выполнить();
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаОтчета", Параметры.ВалютаОтчета);
	
	НаборТаблицаФакт = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	НаборТаблицаФакт.ИмяОбъекта = "ТаблицаДанных";
	
	ПоляСуммы = Новый Массив;
	ПоляСуммы.Добавить("Сумма");
	ПоляСуммы.Добавить("СуммаПриход");
	ПоляСуммы.Добавить("СуммаРасход");
	
	ПоляЗначенияНефинансовогоПоказателя = Новый Массив;
	ПоляЗначенияНефинансовогоПоказателя.Добавить("ЗначениеПоказателя");
	
	ПоляСуммыВВалюте = Новый Массив;
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		ПоляСуммыВВалюте.Добавить("СуммаВВалюте");
		ПоляСуммыВВалюте.Добавить("СуммаВалПриход");
		ПоляСуммыВВалюте.Добавить("СуммаВалРасход");
	КонецЕсли;
	
	ПоляКоличества = Новый Массив;
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ПоляКоличества.Добавить("Количество");
		ПоляКоличества.Добавить("КоличествоПриход");
		ПоляКоличества.Добавить("КоличествоРасход");
	КонецЕсли;
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборТаблицаФакт.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		Если ПоляСуммы.Найти(ИмяПоля) = Неопределено 
			И ПоляСуммыВВалюте.Найти(ИмяПоля) = Неопределено 
			И ПоляКоличества.Найти(ИмяПоля) = Неопределено
			И ИмяПоля <> "ПериодКурса" 
			И ИмяПоля <> "ВалютаХранения" Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	НаборыКурсовВалют = Новый Структура;
	НаборыКурсовВалют.Вставить("КурсыВалютыХранения", "ВалютаХранения");
	НаборыКурсовВалют.Вставить("КурсыВалютОтчета", "&ВалютаОтчета");
	НаборыКурсовВалют.Вставить("КурсыВалют", "Валюта");
	
	Для каждого Набор Из НаборыКурсовВалют Цикл
		
		ИмяНабора = Набор.Ключ;
		ПолеВалюты = Набор.Значение; 
		
		НаборКурсыВалют = ФинансоваяОтчетностьСервер.НовыйНабор(
			СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), ИмяНабора);
		НаборКурсыВалют.ИмяОбъекта = "КурсыВалют";
		Для каждого Колонка Из КурсыВалют.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НовоеПоле = НаборКурсыВалют.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = ИмяПоля;
			НовоеПоле.ПутьКДанным = ИмяНабора + "_" + ИмяПоля;
		КонецЦикла;
		
		// Связь с набором данных
		Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ТаблицаДанных";
		Связь.ВыражениеИсточник = "ПериодКурса";
		Связь.НаборДанныхПриемник = ИмяНабора;
		Связь.ВыражениеПриемник = ИмяНабора + "_" + "Период";
		
		Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ТаблицаДанных";
		Связь.ВыражениеИсточник = ПолеВалюты;
		Связь.НаборДанныхПриемник = ИмяНабора;
		Связь.ВыражениеПриемник = ИмяНабора + "_" + "Валюта";
		
	КонецЦикла;
	
	Для каждого Поле Из ПоляСуммы Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалютОтчета_Курс, 1)";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляЗначенияНефинансовогоПоказателя Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1)";
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляСуммыВВалюте Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1)";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляКоличества Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаКомпоновкиДанных, Поле, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ТаблицаДанных", ТаблицаДанных);
	ВнешниеНаборы.Вставить("КурсыВалют",   КурсыВалют);
	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборы);
	
КонецПроцедуры

Процедура ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Валюта, ВозвращатьСуммуВВалюте)
	
	ПоляСуммы = Новый Массив;
	ПоляСуммы.Добавить("Сумма");
	Если ВозвращатьСуммуВВалюте Тогда
		ПоляСуммы.Добавить("СуммаВВалюте");
	КонецЕсли;
	
	Для каждого ИмяПоля Из ПоляСуммы Цикл
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, ИмяПоля, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ИмяПоля);
	КонецЦикла;
	
	ИмяПоляВалюта = "ВалютаХранения";
	Если ТипЗнч(Валюта) = Тип("Строка") Тогда
		ВыражениеВалюта = Валюта;
	Иначе                             
		ВыражениеВалюта = "&ВалютаХранения";
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаХранения", Валюта);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоляВалюта, ВыражениеВалюта);
	ДобавитьПолеГруппировки(Настройки, ИмяПоляВалюта);
	
КонецПроцедуры

Процедура ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ВидыАналитик = Новый ТаблицаЗначений;
	ВидыАналитик.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВидыАналитик.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	Для НомерАналитики = 1 По 6 Цикл
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.НомерАналитики = НомерАналитики;
		НоваяСтрока.ВидАналитики = Правило["ВидАналитики" + НомерАналитики];
	КонецЦикла;
	
	Если Правило.РасширеныйРежимНастройкиЗаполненияАналитики Тогда
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоПравилу(Правило, ВидыАналитик, СхемаКомпоновкиДанных);
	Иначе
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик);
	КонецЕсли;
	
	ВычисялемыеПоля = СхемаКомпоновкиДанных.ВычисляемыеПоля;
	
	// Добавим аналитику "по номеру"
	Для НомерАналитики = 1 По 6 Цикл
		
		ПолеАналитикиПоНомеру = "Аналитика" + НомерАналитики;
		
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(НомерАналитики, "НомерАналитики");
		
		ВычисляемоеПоле = ВычисялемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоНомеру;
		Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
			ТипЗначения = РезультатПоиска.ТипЗначения;
			Выражение   = РезультатПоиска.Выражение;
		Иначе
			ТипыПустогоЗначения = Новый Массив;
			ТипыПустогоЗначения.Добавить(Тип("Неопределено"));
			ТипыПустогоЗначения.Добавить(Тип("Null"));
			ТипЗначения = Новый ОписаниеТипов(ТипыПустогоЗначения);
			Выражение = ?(ЗначениеЗаполнено(РезультатПоиска.ВидАналитики), "НЕОПРЕДЕЛЕНО", "NULL")
		КонецЕсли;
		ВычисляемоеПоле.Выражение   = Выражение;
		ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		
		ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоНомеру);
		
	КонецЦикла;
	
	// Добавим аналитику "по виду"
	Если Параметры.Свойство("Аналитики") Тогда
		Аналитики = Параметры.Аналитики;
	Иначе
		Выборка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Выбрать();
		Аналитики = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Аналитики.Добавить(Выборка.Ссылка);
		КонецЦикла;
		Параметры.Вставить("Аналитики", Аналитики);
	КонецЕсли;
	
	Для Каждого ВидАналитики из Аналитики Цикл
		
		ПолеАналитикиПоВиду = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики);
		Выражение   = "NULL";
		ТипЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения");
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(ВидАналитики, "ВидАналитики");
		Если РезультатПоиска <> Неопределено Тогда
			Выражение   = ?(ЗначениеЗаполнено(РезультатПоиска.Выражение), РезультатПоиска.Выражение, "НЕОПРЕДЕЛЕНО");
		КонецЕсли;
		
		ВычисляемоеПоле = ВычисялемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоВиду;
		ВычисляемоеПоле.Выражение   = Выражение;
		ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		
		Если Параметры.ВидыАналитик.Найти(ВидАналитики) <> Неопределено Тогда
			ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоВиду);
		КонецЕсли;
		
	КонецЦикла;
	
	// Аналитика Валюта
	Если Параметры.ВозвращатьСуммуВВалюте И Правило.ЗаполнениеВалюты <> "НеЗаполнять" Тогда
		
		ВВалютеОтчета = Ложь;
		ВычисляемоеПолеВалюта = ВычисялемыеПоля.Добавить();
		ВычисляемоеПолеВалюта.ПутьКДанным = "Валюта";
		
		Если Правило.ЗаполнениеВалюты = "ОпределяетсяПоАналитике" Тогда
			
			ВыражениеАналитики = ВычисялемыеПоля.Найти("Аналитика" + Правило.АдресАналитикиВалюта);
			
			ВычисляемоеПолеВалюта.Выражение = 
			"БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
			|	&КэшЗначенийАналитик, 
			|	" + ВыражениеАналитики.Выражение + ", 
			|	""" + Правило.ПолеВалютыАналитики + """,
			|	&Валюта)";
			
			ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
			
		ИначеЕсли Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" Тогда 
			
			ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
			
			ВВалютеИсточника = Истина;
			Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
				  И Не Правило.ИсточникВалютный Тогда
				ВычисляемоеПолеВалюта.Выражение = "&ВалютаРегл";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаРегл", Параметры.ВалютаРегл);
				ВВалютеИсточника = Ложь;
			ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
				  И Не Правило.ИсточникВалютный Тогда
				ВычисляемоеПолеВалюта.Выражение = "&ВалютаМеждународ";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаМеждународ", Параметры.ВалютаМеждународ);
				ВВалютеИсточника = Ложь;
			КонецЕсли;
			
			Если ВВалютеИсточника Тогда
				Если ПоляНабора.Найти("Валюта") <> Неопределено Тогда
					ВычисляемоеПолеВалюта.Выражение = "Валюта";
				Иначе
					ВВалютеОтчета = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Правило.ЗаполнениеВалюты = "ОпределяетсяВалютойОтчета" Тогда 
			ВВалютеОтчета = Истина;
		КонецЕсли;
		
		Если ВВалютеОтчета Тогда
			ВычисляемоеПолеВалюта.Выражение = "&Валюта";
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Валюта");
		
	КонецЕсли;
	
	// Аналитика ЕдиницаИзмерения
	Если Правило.ЗаполнениеЕдиницыИзмерения <> "НеЗаполнять" Тогда
		
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Если ПоляНабора.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			Выражение = "ЕдиницаИзмерения";
		Иначе
			Если Правило.ЗаполнениеЕдиницыИзмерения = "ОпределяетсяПоАналитике" Тогда
				ВыражениеАналитики = ВычисялемыеПоля.Найти("Аналитика" + Правило.АдресАналитикиЕдиницаИзмерения);
				Выражение = 
					"БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
					|	&КэшЗначенийАналитик, " + ВыражениеАналитики.Выражение + ", """ + Правило.ПолеЕдиницыИзмеренияАналитики + """)";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ИначеЕсли Правило.ЗаполнениеЕдиницыИзмерения = "ФиксированноеЗначение" Тогда 
				Выражение = "&ЕдиницаИзмерения";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ЕдиницаИзмерения", Правило.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		ВычисляемоеПолеЕдИзмерения = ВычисялемыеПоля.Добавить();
		ВычисляемоеПолеЕдИзмерения.ПутьКДанным = "ЕдиницаИзмерения";
		ВычисляемоеПолеЕдИзмерения.Выражение = Выражение;
		ДобавитьПолеГруппировки(Настройки, "ЕдиницаИзмерения");
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если Параметры.ПоОрганизациям И ПоляНабора.Найти("Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Параметры.ПоПодразделениям И ПоляНабора.Найти("Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ИмяНабораДанных = НаборДанных.Имя; // Имя набора данных соответсвует регистру операции
		ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИмяНабораДанных);
		РесурсыИсточникаСуммы = ПоказателиРегистра.Получить(Правило.ИсточникСуммыОперации).Ресурсы;
		Если РесурсыИсточникаСуммы = Неопределено Тогда
			ТекстНСТР = НСтр("en='For source amount %1 of economic operation %2 not found the appropriate resources in data source.';ru='Для источника суммы %1 хозяйственной операции %2 не найдены соотвествующие ресурсы в источнике данных.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Правило.ИсточникСуммыОперации, Правило.ИсточникДанных);
			ВызватьИсключение ТекстНСТР;
		КонецЕсли;
		
		Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
			ПолеСуммы = Ресурс["Имя"];
			Если НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
				// Ресурс не выбирается в источнике
				Продолжить;
			КонецЕсли;
			Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
				ИсточникиСуммы.Вставить("Упр", ПолеСуммы);
			ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
				ИсточникиСуммы.Вставить("Регл", ПолеСуммы);
			Иначе
				ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных);
	КонецЕсли;
	
	УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	// Период курса
	ЕстьПолеПериодДень = (НаборДанных.Поля.Найти("ПериодДень") <> Неопределено);
	ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
	Если ЕстьПолеПериодДень Тогда
		ВыражениеПоляПериодКурса = "ПериодДень";
	ИначеЕсли ЕстьПолеПериод Тогда
		ВыражениеПоляПериодКурса = "Период";
	Иначе
		ВыражениеПоляПериодКурса = "&КонецПериода";
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", ВыражениеПоляПериодКурса);
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных);
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных);
	КонецЕсли;
	
	УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", "&Период");
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	ПолеКоличество = "Количество";
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ПолеКоличество = ПолеРесурсаБухгалтерии("Количество", Правило.ТипИтога)
	КонецЕсли;
	
	Если ПоляНабора.Найти(ПолеКоличество) <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", ПолеКоличество, "Сумма");
	Иначе
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", "NULL", "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Количество");
	
КонецПроцедуры

Процедура ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Значение = Неопределено)
	
	Если СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.Имя = ИмяПараметра;
	Параметр.ОграничениеИспользования = Истина;
	
	Если Значение <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.ВключатьВДоступныеПоля = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьВыводОбщихИтогов(Настройки)
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(
		Настройки, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(
		Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
КонецПроцедуры

Процедура УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры)
	
	Если Параметры.Показатели.Свойство("Сумма") И Параметры.Показатели.Свойство("Количество") Тогда
		Отбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Настройки.Отбор.Элементы,
			"ГруппаОтбор",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
	Иначе
		Отбор = Настройки.Отбор;
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "Сумма", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "Количество", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, Параметры, РазворачиватьПериод = Ложь, ПересчитыватьВВалюту = Истина) Экспорт
	
	// Дополним отбором, обеспечивающим выбор только статей, влиящих на показатели
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборПравил.Отбор, "ПоказательБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил, Параметры, Ложь);
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	// Наборы данных схемы
	НаборСвязиПоказателейБюджетов = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "СвязиПоказателейБюджетов");
	НаборСвязиПоказателейБюджетов.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиБюджетов.Ссылка КАК ПоказательБюджетов,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	ПоказателиБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ПолеВалютыАналитики,
	|	СвязиПоказателейБюджетов.СтатьяБюджетов,
	|	СвязиПоказателейБюджетов.Расход,
	|	СвязиПоказателейБюджетов.Коэффициент,
	|	СвязиПоказателейБюджетов.Аналитика1 КАК ЗначениеАналитика1,
	|	СвязиПоказателейБюджетов.Аналитика2 КАК ЗначениеАналитика2,
	|	СвязиПоказателейБюджетов.Аналитика3 КАК ЗначениеАналитика3,
	|	СвязиПоказателейБюджетов.Аналитика4 КАК ЗначениеАналитика4,
	|	СвязиПоказателейБюджетов.Аналитика5 КАК ЗначениеАналитика5,
	|	СвязиПоказателейБюджетов.Аналитика6 КАК ЗначениеАналитика6,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику1,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику2,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику3,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику4,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику5,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику6,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики1,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики2,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики3,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики4,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики5,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики6
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|	ПО
	|		СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов = ПоказателиБюджетов.Ссылка";
	
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "ПоказательБюджетов"); 
	
	НаборФактПоСтатьямБюджетов = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ФактПоСтатьямБюджетов");
	НаборФактПоСтатьямБюджетов.ИмяОбъекта = "ФактПоСтатьямБюджетов";
	
	Ресурсы = Новый Структура;
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		Ресурсы.Вставить("Сумма", "Сумма");
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			Ресурсы.Вставить("СуммаВал", "СуммаВВалюте");
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Показатели.Свойство("Количество") Тогда
		Ресурсы.Вставить("Количество", "Количество");
	КонецЕсли;
	
	Для каждого Колонка Из ФактПоСтатьямБюджетов.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборФактПоСтатьямБюджетов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		НовоеПоле.ОграничениеИспользования.Условие = Истина;
		Если Не Ресурсы.Свойство(ИмяПоля) Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	// Связи наборов данных
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ФактПоСтатьямБюджетов";
	Связь.ВыражениеИсточник = "СтатьяБюджетов";
	Связь.НаборДанныхПриемник = "СвязиПоказателейБюджетов";
	Связь.ВыражениеПриемник = "СтатьяБюджетов";
	
	Если РазворачиватьПериод Тогда
		Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
			ЕстьПолеРегистратор = НаборФактПоСтатьямБюджетов.Поля.Найти("Регистратор") <> Неопределено;
			ЕстьПолеПериод = НаборФактПоСтатьямБюджетов.Поля.Найти("Период") <> Неопределено;
			Если Не ЗначениеЗаполнено(Периодичность) Тогда
				Поле = "Регистратор";
				Если ЕстьПолеРегистратор Тогда
					Выражение = "Регистратор";
				Иначе
					Выражение = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
			Иначе
				Поле = "Период" + Периодичность;
				Если ЕстьПолеПериод Тогда 
					Выражение = СтрЗаменить("НАЧАЛОПЕРИОДА(Период, ""%Периодичность"")", "%Периодичность", Периодичность);
				Иначе
					Выражение = "ДАТАВРЕМЯ(1,1,1)";
				КонецЕсли;
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, Поле, Выражение);
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, Поле);
		КонецЦикла;
	КонецЕсли;
	
	// Вычисляемые поля аналитики
	ВыраженияАналитики = Новый Структура;
	ШаблонВыражения =
	"ВЫБОР
	|	КОГДА КоличествоИспользуемыхАналитик < %НомерАналитики
	|		ТОГДА NULL
	|	КОГДА НЕ ТранслироватьАналитику%НомерАналитики
	|		ТОГДА ЗначениеАналитика%НомерАналитики
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 1
	|		ТОГДА Аналитика1
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 2
	|		ТОГДА Аналитика2
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 3
	|		ТОГДА Аналитика3
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 4
	|		ТОГДА Аналитика4
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 5
	|		ТОГДА Аналитика5
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 6
	|		ТОГДА Аналитика6
	|КОНЕЦ";
	Для НомерАналитики = 1 По 6 Цикл
		Выражение = СтрЗаменить(ШаблонВыражения, "%НомерАналитики", НомерАналитики);
		ИмяПоля = "Аналитика" + НомерАналитики;
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоля, Выражение);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля); 
		ВыраженияАналитики.Вставить(ИмяПоля, Выражение);
	КонецЦикла;
	
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		ВыражениеВалюта = 
		"ВЫБОР 
		|	КОГДА НЕ ВалютаОпределяетсяАналитикой 
		|		ТОГДА Валюта
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, 
		|			ВЫБОР 
		|				КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ВыраженияАналитики.Аналитика1 + "
		|				КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ВыраженияАналитики.Аналитика2 + "
		|				КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ВыраженияАналитики.Аналитика3 + "
		|				КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ВыраженияАналитики.Аналитика4 + "
		|				КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ВыраженияАналитики.Аналитика5 + "
		|				КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ВыраженияАналитики.Аналитика6 + "
		|			КОНЕЦ, 
		|			ПолеВалютыАналитики,
		|			Валюта)
		|	КОНЕЦ";
		ПолеВалюта = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Валюта", ВыражениеВалюта);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "Валюта");
		
		ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
	КонецЕсли;
	
	ВыражениеПриход = "ВЫБОР КОГДА Расход ТОГДА 0 ИНАЧЕ Коэффициент * %Поле КОНЕЦ";
	ВыражениеРасход = "ВЫБОР КОГДА Расход ТОГДА Коэффициент * %Поле ИНАЧЕ 0 КОНЕЦ";
	Для каждого Ресурс Из Ресурсы Цикл
		
		РесурсПриход = Ресурс.Ключ + "Приход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсПриход, 
			СтрЗаменить(ВыражениеПриход, "%Поле", Ресурс.Значение), 
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсПриход);
		
		РесурсРасход = Ресурс.Ключ + "Расход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсРасход, 
			СтрЗаменить(ВыражениеРасход, "%Поле", Ресурс.Значение),
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсРасход);
		
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ОтборПравил);
	ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ФактПоСтатьямБюджетов", ФактПоСтатьямБюджетов);
	
	ТаблицаФакт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборыДанных);
	
	МассивВалютаХранения = ТаблицаФакт.ВыгрузитьКолонку("Валюта");
	ТаблицаФакт.Колонки.Удалить("Валюта");
	ТаблицаФакт.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакт.ЗагрузитьКолонку(МассивВалютаХранения, "Валюта");
	
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ТаблицаФакт, Параметры);
	КонецЕсли;
	
	Возврат ТаблицаФакт;
	
КонецФункции

Функция ПолеРесурсаБухгалтерии(ПолеСумма, ТипИтога)
	
	Возврат СтрЗаменить(ПолеСумма + Строка(ТипИтога), " ","");
	
КонецФункции

Процедура ДобавитьПолеГруппировки(Настройки, Поле)
	
	Если Настройки.Структура.Количество() = 0 Тогда
		Группировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(Настройки.Структура);
	Иначе
		Группировка = Настройки.Структура[0];
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(Группировка, Поле);
	
КонецПроцедуры

Функция ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, Строка, Правило)
	
	НоваяСтрока = ТаблицаФакта.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Правило);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
	Для НомерАналитики = 1 По 6 Цикл
		Если ЗначениеЗаполнено(Правило["ВидАналитики" + НомерАналитики])
			И Не ЗначениеЗаполнено(НоваяСтрока["Аналитика" + НомерАналитики]) Тогда
			НоваяСтрока["Аналитика" + НомерАналитики] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ПолеЗаполненияСуммыУстановлено = Ложь;
	
	Выражение = Неопределено;
	ВозвращатьСуммуВВалюте = Параметры.ВозвращатьСуммуВВалюте;
	
	Если ИсточникиСуммы.Свойство("Валюта") Тогда
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		ПолеНабораДанныхВалюта = ПоляНабораДанных.Найти("Валюта");
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ТипЗначеничВалюты = Тип("СправочникСсылка.Валюты");
			Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
				Если ПолеНабораДанных.ТипЗначения.СодержитТип(ТипЗначеничВалюты) Тогда
					ПолеНабораДанныхВалюта = ПолеНабораДанных;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ТекстНСТР = НСтр("en='No currency is specified to receive the currency amount.';ru='Не определена валюта для получения валютной суммы.'");
			ВызватьИсключение ТекстНСТР;
		Иначе
			ПутьКДаннымВалюта = ПолеНабораДанныхВалюта.ПутьКДанным;
		КонецЕсли;
	КонецЕсли;
	
	// Подберем наиболее подходящее поле заполнения суммы
	Если ИсточникиСуммы.Свойство("Валюта", Выражение) 
		И (Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных"
			ИЛИ Правило.ЗаполнениеВалюты = "ОпределяетсяПоАналитике") Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, ПутьКДаннымВалюта, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаУпр 
		И ИсточникиСуммы.Свойство("Упр", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаУпр, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаМеждународ 
		И ИсточникиСуммы.Свойство("Международ", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаМеждународ, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаРегл
		И ИсточникиСуммы.Свойство("Регл", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаРегл, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли ИсточникиСуммы.Свойство("Валюта", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, ПутьКДаннымВалюта, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	КонецЕсли;
	
	// Если не удалось подобрать наиболее подходящее поле - заполним из первого
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		Для каждого ИсточникСуммы Из ИсточникиСуммы Цикл
			Выражение = ИсточникСуммы.Значение;
			Если ИсточникСуммы.Ключ = "Регл" Тогда
				Валюта = Параметры.ВалютаРегл;
			ИначеЕсли ИсточникСуммы.Ключ = "Упр" Тогда
				Валюта = Параметры.ВалютаУпр;
			ИначеЕсли ИсточникСуммы.Ключ = "Международ" Тогда
				Валюта = Параметры.ВалютаМеждународ;
			КонецЕсли;
			
			ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Валюта, ВозвращатьСуммуВВалюте);
			ПолеЗаполненияСуммыУстановлено = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, "NULL", Параметры.ВалютаОтчета, ВозвращатьСуммуВВалюте);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных)
	
	ПоляНабораСхемы = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если ПоляНабораСхемы.Найти("СуммаРегл") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Регл", "СуммаРегл");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаУпр") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Упр", "СуммаУпр");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаМеждународ") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Международ", "СуммаМеждународ");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаВВалюте") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Валюта", "СуммаВВалюте");
	КонецЕсли;
	
КонецПроцедуры

Функция ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик)
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	
	ИсточникиЗаполненияАналитики = Новый Соответствие;
	Если СхемаКомпоновкиДанных <> Неопределено 
		 И СхемаКомпоновкиДанных.НаборыДанных.Количество() <> 0 Тогда
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Для каждого ПолеНабора Из ПоляНабора Цикл
			Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеНабора.ТипЗначения) Тогда
				ИсточникиЗаполненияАналитики.Вставить(ПолеНабора.ПутьКДанным, ПолеНабора.ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		ВидАналитики = СтрокаВидАналитики.ВидАналитики;
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[ВидАналитики];
		
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоНомеру = "Аналитика" + СтрокаВидАналитики.НомерАналитики;
		
		ОднозначноПодходящееПоле = Неопределено; // Поле, описание типов которого совпадает с описанием типов аналитики
		УсловноПодходящиеПоля = Новый Массив; // Поля, описание типов которых содержат типы аналитики
		
		Если ИсточникиЗаполненияАналитики[ПолеАналитикиПоНомеру] <> Неопределено Тогда
			ОднозначноПодходящееПоле = ПолеАналитикиПоНомеру;
		Иначе
			// Попробуем подобрать поле заполнение аналитики "по типу"
			ОписаниеТиповАналитики = ОписаниеТиповАналитик[ВидАналитики];
			Для каждого ИсточникЗаполненияАналитики Из ИсточникиЗаполненияАналитики Цикл
				Если ОписаниеТиповАналитики = ИсточникЗаполненияАналитики.Значение Тогда
					ОднозначноПодходящееПоле = ИсточникЗаполненияАналитики.Ключ;
					Прервать;
				КонецЕсли;
				Для каждого Тип Из ИсточникЗаполненияАналитики.Значение.Типы() Цикл
					Если ОписаниеТиповАналитики.СодержитТип(Тип) Тогда
						УсловноПодходящиеПоля.Добавить(ИсточникЗаполненияАналитики.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если ОднозначноПодходящееПоле <> Неопределено Тогда
			НоваяСтрока.Выражение = ОднозначноПодходящееПоле;
		ИначеЕсли УсловноПодходящиеПоля.Количество() <> 0 Тогда
			НоваяСтрока.Выражение = УсловноПодходящиеПоля[0];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

Функция ВыраженияЗаполненияАналитикиПоПравилу(Правило, ВидыАналитик, СхемаКомпоновкиДанных)
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[СтрокаВидАналитики.ВидАналитики];
		
		НомерАналитики = СтрокаВидАналитики.НомерАналитики;
		
		Если Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
			ИмяПараметра = "ЗначениеАналитики" + НомерАналитики;
			ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Правило[ИмяПараметра]);
			Выражение = "&" + ИмяПараметра;
		Иначе
			Выражение = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
		КонецЕсли;
		
		НоваяСтрока.Выражение = Выражение;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

Процедура УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто = Неопределено)
	
	ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	Для НомерСубконто = 1 По 3 Цикл
		УстановитьСвойстваПоляСубконто(НомерСубконто, Ложь, ПоляНабораДанных, ВидыСубконто);
		Если ВидыКорСубконто <> Неопределено Тогда
			УстановитьСвойстваПоляСубконто(НомерСубконто, Истина, ПоляНабораДанных, ВидыКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПоляСубконто(НомерСубконто, КорСубконто, ПоляНабораДанных, ВидыСубконто)
	
	Если КорСубконто Тогда
		ИмяПоля = "КорСубконто" + НомерСубконто;
	Иначе
		ИмяПоля = "Субконто" + НомерСубконто;
	КонецЕсли;
	
	ОграниченияИспользования = Новый Массив;
	ОграниченияИспользования.Добавить("Поле");
	ОграниченияИспользования.Добавить("Условие");
	ОграниченияИспользования.Добавить("Группировка");
	ОграниченияИспользования.Добавить("Порядок");
	
	Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
		Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ПолеНабораДанных.Поле <> ИмяПоля Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидСубконто = ВидыСубконто.Найти(НомерСубконто, "НомерСубконто");
		Если СтрокаВидСубконто <> Неопределено Тогда
			ПолеНабораДанных.ТипЗначения = СтрокаВидСубконто.ТипЗначения;
			ПолеНабораДанных.Заголовок = Строка(СтрокаВидСубконто.ВидСубконто);
		Иначе
			Для каждого Ограничение Из ОграниченияИспользования Цикл
				ПолеНабораДанных.ОграничениеИспользования[Ограничение] = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов[Ограничение] = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьВВыражениеСКД(ВыражениеЯзыкаЗапросов) Экспорт
	
	ВыражениеСКД = ВРег(ВыражениеЯзыкаЗапросов); 
	
	Периоды = Новый Структура;
	Периоды.Вставить("ДЕНЬ",      """ДЕНЬ""");
	Периоды.Вставить("НЕДЕЛЯ",    """НЕДЕЛЯ""");
	Периоды.Вставить("ДЕКАДА",    """ДЕКАДА""");
	Периоды.Вставить("МЕСЯЦ",     """МЕСЯЦ""");
	Периоды.Вставить("КВАРТАЛ",   """КВАРТАЛ""");
	Периоды.Вставить("ПОЛУГОДИЕ", """ПОЛУГОДИЕ""");
	Периоды.Вставить("ГОД",       """ГОД""");
	
	Для каждого Период Из Периоды Цикл
		ВыражениеСКД = СтрЗаменить(ВыражениеСКД, Период.Ключ, Период.Значение);
	КонецЦикла;
	
	Возврат ВыражениеСКД;
	
КонецФункции

#КонецОбласти

#КонецОбласти
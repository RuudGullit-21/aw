
#Область ПрограммныйИнтерфейс

// Проверить и создать ЭПД (команда).
// 
// Параметры:
//  ПроверяемыеОбъекты - Массив из ДокументСсылка, ДокументОбъект.ЭлектроннаяТранспортнаяНакладная, ДокументОбъект.ЭлектронныйЗаказНаряд
//  ПараметрыВыполнения - см. ПодключаемыеКомандыКлиентСервер.ПараметрыВыполненияКоманды
Процедура ПроверитьИСоздатьЭПДКоманда(ПроверяемыеОбъекты, ПараметрыВыполнения) Экспорт
	
	ОписаниеКоманды    = ПараметрыВыполнения.ОписаниеКоманды; // Структура
	ОперацияВыполнения = ОписаниеКоманды.Идентификатор;
	
	Если ПроверяемыеОбъекты.Количество() > 1 Тогда
		ТекстПредупреждения = НСтр("ru = 'Пакетное формирование электронных перевозочных документов не доступно. Выберите один документ основание.';
									|en = 'Batch generation of electronic shipping documents is not available. Select one base document.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат; 
	КонецЕсли;

	Если ОперацияВыполнения = "СоздатьЭТН" Тогда
		ПроверитьИСоздатьЭТрН(ПроверяемыеОбъекты[0], ПараметрыВыполнения.Форма);
	ИначеЕсли ОперацияВыполнения = "СоздатьЭПЛ" Тогда
		ПроверитьИСоздатьЭПЛ(ПроверяемыеОбъекты[0], ПараметрыВыполнения.Форма);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Проверить и создать ЭПД.
// 
// Параметры:
//  ДокументОснование - ДокументСсылка
//  ЭтотОбъект        - ДокументСсылка - Объект, для которого создается ЭТрН
// 
Процедура ПроверитьИСоздатьЭТрН(ДокументОснование, ЭтотОбъект) Экспорт
	
	СтруктураРезультат = уатОбменСГИСЭПД.ПолучитьСвязанныеРейсы(ДокументОснование);  
	
	Если СтруктураРезультат.Свойство("МассивРейсов") Тогда
		МассивРейсов = СтруктураРезультат.МассивРейсов;    
		
		ПараметрыФормыВыбора = Новый Структура("флВыборЭПД, мсвМаршрутныеЛистыИЗаказы", Истина, МассивРейсов);
		ОткрытьФорму("Документ.уатТТД.Форма.ФормаВыборЗаказа", ПараметрыФормыВыбора, ЭтотОбъект);  
	Иначе
		
		МассивДокументОснование = Новый Массив();
		МассивДокументОснование.Добавить(СтруктураРезультат.Заказ); 
		Если ЗначениеЗаполнено(СтруктураРезультат.МаршрутныйЛист) Тогда
			МассивДокументОснование.Добавить(СтруктураРезультат.МаршрутныйЛист); 
		КонецЕсли;
		
		ДопПараметры = Неопределено;
		Если СтруктураРезультат.Свойство("ДопПараметры") Тогда
			ДопПараметры = СтруктураРезультат.ДопПараметры;
		КонецЕсли;
		СоздатьЭПД(Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная"), МассивДокументОснование, ЭтотОбъект, ДопПараметры);
	КонецЕсли;

КонецПроцедуры

// Процедура - Проверить и создать ЭПЛ
//
// Параметры:
//  ДокументОснование	 - ДокументСсылка - Документ-основание для создания ЭПЛ
//  ЭтотОбъект			 - ДокументСсылка - Объект, для которого создается ЭПЛ
//
Процедура ПроверитьИСоздатьЭПЛ(ДокументОснование, ЭтотОбъект) Экспорт
	
	МассивДокументОснование = Новый Массив();
	МассивДокументОснование.Добавить(ДокументОснование); 
	СоздатьЭПД(Тип("ДокументСсылка.ЭлектронныйПутевойЛист"), МассивДокументОснование, ЭтотОбъект);

КонецПроцедуры

// Проверить и создать ЭПД.
// 
// Параметры:
//  ТипЭпд - Тип
//  МассивДокументОснование - Массив
//  ЭтотОбъект - ДокументСсылка
//  ДопПараметры - Структура
//  ЕстьОшибки - Булево
// 
Процедура СоздатьЭПД(ТипЭпд, МассивДокументОснование, ЭтотОбъект, ДопПараметры = Неопределено, ЕстьОшибки = Ложь) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	Если ТипЭпд = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		ФормаОбъекта = "Документ.ЭлектроннаяТранспортнаяНакладная.ФормаОбъекта";
		
		ДопДанные = Новый Структура();
		Если ДопПараметры <> Неопределено Тогда
			ДопДанные.Вставить("ДопПараметрыСоздания", ДопПараметры);
		КонецЕсли;
		
		ИмяФормы = "Документ.ЭлектроннаяТранспортнаяНакладная.Форма.Водитель";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыВодитель", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ТитулГрузоотправителяТранспортноеСредство";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыТС", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ТитулГрузоотправителяПрицеп";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыПрицеп", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектроннаяТранспортнаяНакладная.Форма.Груз";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыГруз", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		
		ДанныеДляЗаполнения = уатОбменСГИСЭПД.ЗначенияЗаполненияЭлектронныеТранспортныеНакладные(МассивДокументОснование, ДопДанные); 
		
		Если ДанныеДляЗаполнения.Свойство("ГрузоотправительНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("ГрузополучательНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("ЗаказчикНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("ПеревозчикНеПодключен") Тогда
			
			Если ДанныеДляЗаполнения.Свойство("ГрузоотправительНеПодключен")
				И ЗначениеЗаполнено(ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель) Тогда 
				ПараметрыСоздания = СинхронизацияЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
				ПараметрыСоздания.Организация   = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель; 
				ПараметрыСоздания.ВладелецФормы = ЭтотОбъект;
				СинхронизацияЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			Если ДанныеДляЗаполнения.Свойство("ГрузополучательНеПодключен")
				И ЗначениеЗаполнено(ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузополучатель)
				И НЕ ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузополучатель = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель Тогда  
				ПараметрыСоздания = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
				ПараметрыСоздания.Вставить("ВладелецФормы", ЭтотОбъект);
				
				КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки(); 
				КлючНастроек.Отправитель = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель;
				КлючНастроек.Получатель  = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузополучатель;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек,, ПараметрыСоздания); 
				ЕстьОшибки = Истина;
			КонецЕсли;
			Если ДанныеДляЗаполнения.Свойство("ЗаказчикНеПодключен")
				И ЗначениеЗаполнено(ДанныеДляЗаполнения.Заказчик)
				И НЕ ДанныеДляЗаполнения.Заказчик = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель Тогда  
				ПараметрыСоздания = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
				ПараметрыСоздания.Вставить("ВладелецФормы", ЭтотОбъект);
				
				КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки(); 
				КлючНастроек.Отправитель = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель;
				КлючНастроек.Получатель  = ДанныеДляЗаполнения.Заказчик;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек,, ПараметрыСоздания); 
				ЕстьОшибки = Истина;
			КонецЕсли;
			Если ДанныеДляЗаполнения.Свойство("ПеревозчикНеПодключен")
				И ЗначениеЗаполнено(ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяПеревозчик) Тогда
				ПараметрыСоздания = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
				ПараметрыСоздания.Вставить("ВладелецФормы", ЭтотОбъект);
				
				КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки(); 
				КлючНастроек.Отправитель = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель;
				КлючНастроек.Получатель  = ДанныеДляЗаполнения.СсылкаТитулГрузоотправителяПеревозчик;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек,, ПараметрыСоздания);
				ЕстьОшибки = Истина;
			КонецЕсли;
		Иначе
			ДанныеДляЗаполнения.Вставить("ДокументыОснования", МассивДокументОснование); 
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",  ДанныеДляЗаполнения); 
			ОткрытьФорму(ФормаОбъекта, ПараметрыФормы,, Новый УникальныйИдентификатор);
		Конецесли;

	ИначеЕсли ТипЭпд = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		ФормаОбъекта = "Документ.ЭлектронныйПутевойЛист.ФормаОбъекта";
		
		ДопДанные = Новый Структура();
		
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.Водитель";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыВодитель", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.ТранспортноеСредство";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыТС", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.Прицеп";
		ДопДанные.Вставить("ОписаниеРеквизитовФормыПрицеп", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		
		ДанныеДляЗаполнения = уатОбменСГИСЭПД.ЗначенияЗаполненияЭлектронныеПутевыеЛисты(МассивДокументОснование, ДопДанные);
		
		Если ДанныеДляЗаполнения.Свойство("ОформительНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("МедорганизацияНеПодключена")
			ИЛИ ДанныеДляЗаполнения.Свойство("ТехконтрольНеПодключен")
			ИЛИ ДанныеДляЗаполнения.Свойство("ПоказанияОдометраНеПодключен") Тогда
			
			Если ДанныеДляЗаполнения.Свойство("ОформительНеПодключен") Тогда 
				ПараметрыСоздания = СинхронизацияЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
				ПараметрыСоздания.Организация   = ДанныеДляЗаполнения.СсылкаТитулОформлениеОформитель; 
				ПараметрыСоздания.ВладелецФормы = ЭтотОбъект;
				СинхронизацияЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
				Возврат;
			КонецЕсли;
			Если ДанныеДляЗаполнения.Свойство("МедорганизацияНеПодключена") Тогда  
				ПараметрыСоздания = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
				ПараметрыСоздания.Вставить("ВладелецФормы", ЭтотОбъект);
				
				КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки(); 
				КлючНастроек.Отправитель = ДанныеДляЗаполнения.СсылкаТитулОформлениеОформитель;
				КлючНастроек.Получатель  = ДанныеДляЗаполнения.СсылкаТитулОформлениеМедорганизация;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек,, ПараметрыСоздания);
			КонецЕсли;
			Если ДанныеДляЗаполнения.Свойство("ТехконтрольНеПодключен") Тогда
				ПараметрыСоздания = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
				ПараметрыСоздания.Вставить("ВладелецФормы", ЭтотОбъект);
				
				КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки(); 
				КлючНастроек.Отправитель = ДанныеДляЗаполнения.СсылкаТитулОформлениеОформитель;
				КлючНастроек.Получатель  = ДанныеДляЗаполнения.СсылкаТитулОформлениеТехконтроль;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек,, ПараметрыСоздания);
			КонецЕсли;
			Если ДанныеДляЗаполнения.Свойство("ПоказанияОдометраНеПодключен") Тогда
				ПараметрыСоздания = НастройкиЭДОКлиент.НовыеПараметрыНастройкиОбменаСКонтрагентом();
				ПараметрыСоздания.Вставить("ВладелецФормы", ЭтотОбъект);
				
				КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки(); 
				КлючНастроек.Отправитель = ДанныеДляЗаполнения.СсылкаТитулОформлениеОформитель;
				КлючНастроек.Получатель  = ДанныеДляЗаполнения.СсылкаТитулОформлениеПоказанияОдометра;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек,, ПараметрыСоздания);
			КонецЕсли;
		Иначе
			ДанныеДляЗаполнения.Вставить("ДокументыОснования", МассивДокументОснование); 
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",  ДанныеДляЗаполнения); 
			ОткрытьФорму(ФормаОбъекта, ПараметрыФормы,, Новый УникальныйИдентификатор);
		Конецесли;
	Иначе
		Возврат;
	КонецЕсли;  
		
КонецПроцедуры
 
// Функция - Оформить ЭПЛ
//
// Параметры:
//  ДокументОснование	 - ДокументСсылка - Документ основание для создания ЭПЛ
//  Титул				 - ПеречислениеСсылка - Вид титула ЭПЛ
//  ТекЭПЛ				 - ДокументСсылка - Ссылка на текущий ЭПЛ
//  ДопПараметры		 - Структура - Структура дополнителньых параметров
// 
// Возвращаемое значение:
//   - ДокументСсылка - Созданный ЭПЛ
//
Функция ОформитьЭПЛ(ДокументОснование, Титул, ТекЭПЛ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура();
	Конецесли;

	ДанныеДляЗаполнения = Новый Структура();
	ЭПЛ = Неопределено;
	Если Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1") Тогда
		ОписаниеРеквизитовФормы = Новый Структура();
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.Водитель";
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыВодитель", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.ТранспортноеСредство";
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыТС", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.Прицеп";
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыПрицеп", ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));
		
		ЭПЛ = уатОбменСГИСЭПД.ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения); 
		
		Если ДанныеДляЗаполнения.Свойство("ОформительНеПодключен") Тогда
			ДопПараметры.Вставить("ОформительНеПодключен", ДанныеДляЗаполнения.СсылкаТитулОформлениеОформитель);
		КонецЕсли;
		Если ДанныеДляЗаполнения.Свойство("МедорганизацияНеПодключена") Тогда
			ДопПараметры.Вставить("МедорганизацияНеПодключена", ДанныеДляЗаполнения.СсылкаТитулОформлениеМедорганизация);
		КонецЕсли; 
		Если ДанныеДляЗаполнения.Свойство("ТехконтрольНеПодключен") Тогда
			ДопПараметры.Вставить("ТехконтрольНеПодключен", ДанныеДляЗаполнения.СсылкаТитулОформлениеТехконтроль);
		КонецЕсли; 
		Если ДанныеДляЗаполнения.Свойство("ПоказанияОдометраНеПодключен") Тогда
			ДопПараметры.Вставить("ПоказанияОдометраНеПодключен", ДанныеДляЗаполнения.СсылкаТитулОформлениеПоказанияОдометра);
		КонецЕсли;
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2") Тогда

		ОписаниеРеквизитовФормы = Новый Структура();
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.ШтатныйМедработник";
		Форма                     = ПолучитьФорму(ИмяФормы);
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыШтатныйМедработник",
			Форма.ОписаниеРеквизитовФормы());
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.СтороннийМедработник";
		Форма                     = ПолучитьФорму(ИмяФормы);
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыСтороннийМедработник",
			Форма.ОписаниеРеквизитовФормы());
			
		ЭПЛ = уатОбменСГИСЭПД.ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения, ДопПараметры); 
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3") Тогда
		
		ОписаниеРеквизитовФормы = Новый Структура();
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.ТитулВыпускОтветственныйЗаСостояниеТС";
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыОтветственныйЗаСостояниеТС",
			ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));

		ЭПЛ = уатОбменСГИСЭПД.ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения); 
		
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4") Тогда
		
		ОписаниеРеквизитовФормы = Новый Структура();
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.УполномоченныйНаПроставлениеДанных";
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыУполномоченныйНаПроставлениеДанныхЭПЛ",
			ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));

		ЭПЛ = уатОбменСГИСЭПД.ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения); 
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") Тогда
		
		ОписаниеРеквизитовФормы = Новый Структура();
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.УполномоченныйНаПроставлениеДанных";
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыУполномоченныйНаПроставлениеДанныхЭПЛ",
			ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы));

		ЭПЛ = уатОбменСГИСЭПД.ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения);
	ИначеЕсли Титул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
		
		ОписаниеРеквизитовФормы = Новый Структура();
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.ШтатныйМедработник";
		Форма                     = ПолучитьФорму(ИмяФормы);
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыШтатныйМедработник",
			Форма.ОписаниеРеквизитовФормы());
		ИмяФормы = "Документ.ЭлектронныйПутевойЛист.Форма.СтороннийМедработник";
		Форма                     = ПолучитьФорму(ИмяФормы);
		ОписаниеРеквизитовФормы.Вставить("ОписаниеРеквизитовФормыСтороннийМедработник",
			Форма.ОписаниеРеквизитовФормы());
			
		ЭПЛ = уатОбменСГИСЭПД.ОформитьЭПЛ(ДокументОснование, Титул, ОписаниеРеквизитовФормы, ТекЭПЛ, ДанныеДляЗаполнения, ДопПараметры);
		
 	КонецЕсли;

	Возврат ЭПЛ;
	
КонецФункции

// Функция - Открытие формы по гиперссылке завершение
//
// Параметры:
//  РезультатВыбора	 - Произвольный - Результат выбора
//  ВходящийКонтекст - ГруппаФормы - Группировка формы
// 
// Возвращаемое значение:
//   - Произвольный - Результат выбора
//
Функция ОткрытиеФормыПоГиперссылке_Завершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.Сотрудники")
		ИЛИ ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")
		ИЛИ ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.уатТС") Тогда 
		ИмяОбъекта           = ОбменСГИСЭПДКлиент.ИмяОбъектаФормы(ВходящийКонтекст.Форма.ИмяФормы);
		ОписаниеГруппыДанных = ОбменСГИСЭПДКлиентСервер.ОписаниеГруппыДанных(ВходящийКонтекст.ГруппаДанных, ИмяОбъекта);
		
		Тип          = ОписаниеГруппыДанных.Тип;
		ИмяФормы     = ОписаниеГруппыДанных.ИмяФормы;
		ИмяДокумента = ИмяДокумента(ИмяФормы);
		Если ВходящийКонтекст.ГруппаДанных = "ТитулМедосмотрШтатныйМедработник" 
			ИЛИ ВходящийКонтекст.ГруппаДанных = "ТитулМедосмотрСтороннийМедработник"
			ИЛИ ВходящийКонтекст.ГруппаДанных = "ХранимыеДанныеТитулВыпускОтветственныйЗаСостояниеТС"
			ИЛИ ВходящийКонтекст.ГруппаДанных = "ХранимыеДанныеТитулВыездУполномоченныйНаПроставлениеДанных"
			ИЛИ ВходящийКонтекст.ГруппаДанных = "ХранимыеДанныеТитулЗаездУполномоченныйНаПроставлениеДанных" Тогда
			Форма                     = ПолучитьФорму(ИмяФормы);
			РеквизитыПодчиненнойФормы = Форма.ОписаниеРеквизитовФормы();
		Иначе
			РеквизитыПодчиненнойФормы = ОбменСГИСЭПДКлиентПовтИсп.РеквизитыПодчиненнойФормы(ИмяФормы);
		КонецЕсли;  
		
		Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.уатТС") Тогда
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьТС(РезультатВыбора, ИмяДокумента,
				Тип, РеквизитыПодчиненнойФормы);
		ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьГруз(РезультатВыбора, ИмяДокумента,
				Тип, РеквизитыПодчиненнойФормы);
		Иначе
			СтруктураДанных = уатОбменСГИСЭПД.ЗаполнитьСотрудника(РезультатВыбора, ИмяДокумента,
				Тип, РеквизитыПодчиненнойФормы);
		КонецЕсли;
		РезультатВыбора = СтруктураДанных.ХранимыеДанные;
	Иначе
		Возврат РезультатВыбора;
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции

// Функция - Показать хранимые данные ЭПД
//
// Параметры:
//  ИмяКоманды			 - Строка - Наименование команды
//  Форма				 - Форма - Форма владелец
//  ОписаниеОповещения	 - ОписаниеОповещения - Описание оповещения, которое будет вызвано по завершении функции
//  Отказ				 - Булево - Флаг отказа
// 
// Возвращаемое значение:
//   - Булево - Выполняется ли стандартная обработка или нет
//
Функция ПоказатьХранимыеДанныеЭПД(ИмяКоманды, Форма, ОписаниеОповещения, Отказ) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если уатОбщегоНазначенияПовтИсп.ИспользоватьСправочникиЭДО() Тогда
		СтандартнаяОбработка = Истина;
		Возврат СтандартнаяОбработка;
	КонецЕсли;
	
	МассивФизЛиц      = уатОбменСГИСЭПДКлиент.ПолучитьМассивИменРеквизитовДляВыбораФизическихЛиц();
	МассивСотрудников = уатОбменСГИСЭПДКлиент.ПолучитьМассивИменРеквизитовДляВыбораСотрудников();
	МассивТС          = уатОбменСГИСЭПДКлиент.ПолучитьМассивИменРеквизитовДляВыбораТС();
	МассивГМ          = уатОбменСГИСЭПДКлиент.ПолучитьМассивИменРеквизитовДляВыбораГМ();
	
	Если МассивФизЛиц.Найти(ИмяКоманды) <> Неопределено Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",, Форма, , , , ОписаниеОповещения);
		Отказ = Истина;
	ИначеЕсли МассивСотрудников.Найти(ИмяКоманды) <> Неопределено Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",, Форма, , , , ОписаниеОповещения);
		Отказ = Истина;
	ИначеЕсли МассивТС.Найти(ИмяКоманды) <> Неопределено Тогда
		ОткрытьФорму("Справочник.уатТС.ФормаВыбора",, Форма, , , , ОписаниеОповещения);
		Отказ = Истина;
	ИначеЕсли МассивГМ.Найти(ИмяКоманды) <> Неопределено Тогда
		ОткрытьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора",, Форма, , , , ОписаниеОповещения);
		Отказ = Истина;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	Возврат СтандартнаяОбработка;
КонецФункции

// Функция - Ввод адреса
//
// Параметры:
//  ПараметрыФормыВводаАдреса	 - Структура - Структура параметров
//  ИмяЭлемента					 - Строка - Элемент, куда вводится адрес
//  Форма						 - Форма - Форма владелец
//  Оповещение					 - ОписаниеОповещения - Описание оповещения о закрытии
// 
// Возвращаемое значение:
//   - Булево - Выполняется ли стандартная обработка или нет
//
Функция ВводАдреса(ПараметрыФормыВводаАдреса, ИмяЭлемента, Форма, Оповещение) Экспорт

	СтандартнаяОбработка = Ложь;
	Если уатОбщегоНазначенияПовтИсп.ИспользоватьСправочникиЭДО() Тогда
		СтандартнаяОбработка = Истина;
		Возврат СтандартнаяОбработка;
	КонецЕсли;

	Попытка
		ЗначениеЗаполнено = ЗначениеЗаполнено(Форма[ИмяЭлемента]);
	Исключение
		Возврат Истина;
	КонецПопытки; 
	
	Если НЕ ЗначениеЗаполнено Тогда
		ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора",, Форма, , , , Оповещение);
	Иначе
		СтандартнаяОбработка = Истина;
	Конецесли;

	Возврат СтандартнаяОбработка;
	
КонецФункции

// Функция - Ввод адреса завершение
//
// Параметры:
//  Результат				 - СправочникСсылка - Пункт назначения
//  ДополнительныеПараметры	 - Структура - Структура дополнительных параметров
// 
// Возвращаемое значение:
//   - Структура - Результат ввода адреса
//
Функция ВводАдреса_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		СтруктураРезультат = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Результат, "Адрес, ЗначениеАдреса");
		РезультатВыбора = Новый Структура();
		РезультатВыбора.Вставить("Представление", СтруктураРезультат.Адрес); 
		РезультатВыбора.Вставить("Значение",      СтруктураРезультат.ЗначениеАдреса);
		Возврат РезультатВыбора;
	Иначе
		Возврат Результат;
	КонецЕсли;
		
КонецФункции

// Процедура - Подписать титул ЭПЛ
//
// Параметры:
//  ЭтотОбъект			 - Объект - Объект, для которого создается ЭПЛ
//  мсвПутевыхЛистов	 - Массив - Массив путевых листов
//  ТекущийШаг			 - Число - Текущий щаг
//  ТекущийТитул		 - ПеречислениеСсылка - Титул ЭПЛ
//  СостоянияПодписейПЛ	 - Массив - Коллекция состояний подписей ПЛ
//  СоответвиеПЛЭД		 - Соответствие - Соответвие ПЛЭД
//  ОшибкиЗаполнения	 - Массив - Коллекция ошибок заполнения
//  ЕстьОшибки			 - Булево - Флаг наличия или отсутствия ошибок
//
Процедура ПодписатьТитулЭПЛ(ЭтотОбъект, мсвПутевыхЛистов, ТекущийШаг, ТекущийТитул, СостоянияПодписейПЛ, СоответвиеПЛЭД, ОшибкиЗаполнения, ЕстьОшибки, ПовторныйШаг = Ложь) Экспорт
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("Источник",       ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ТекущийТитул",   ТекущийТитул);
	ДополнительныеПараметры.Вставить("ТекущийШаг",     ТекущийШаг);
	
	ТитулЭПЛ                = Неопределено;
	мсвДокументовДляПодписи = СформироватьМассивЭДДляПодписи(мсвПутевыхЛистов, ТекущийШаг, СостоянияПодписейПЛ,
		СоответвиеПЛЭД, ОшибкиЗаполнения, ЕстьОшибки, ТитулЭПЛ, ПовторныйШаг);
	
	Если мсвДокументовДляПодписи.Количество() <> 0 Тогда
		ДополнительныеПараметры.Вставить("ОбъектыУчета",         мсвДокументовДляПодписи);
		ДополнительныеПараметры.Вставить("ТитулЭПЛ",             ТитулЭПЛ);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьКомплекснуюОбработкуАктуальныхЭлектронныхДокументовОбъектовУчета(мсвДокументовДляПодписи, ТекущийШаг, Оповещение);
	ИначеЕсли ЕстьОшибки Тогда
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Титул ""%1"" не отправлен, обнаржены ошибки заполнения. Исправьте ошибки и повторите попытку.'"), ТекущийТитул);
		ЗаголовокОповещения = НСтр("ru = 'Электронные документы'");	
		ДействиеПриНажатии = Неопределено;
		КартинкаОповещения = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48; 
		#Если НЕ МобильноеПриложениеКлиент Тогда
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, ДействиеПриНажатии, ТекстОповещения, КартинкаОповещения,
			СтатусОповещенияПользователя.Важное);
		#КонецЕсли
	ИначеЕсли ПовторныйШаг Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(Оповещение, Новый Структура("ВыполнитьПодписаниеСледующегоТитула", Истина));
	Иначе
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Нет подходящих документов для подписи титула ""%1""'"), ТекущийТитул);
		ЗаголовокОповещения = НСтр("ru = 'Электронные документы'");	
		ДействиеПриНажатии = Неопределено;
		КартинкаОповещения = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48; 
		#Если НЕ МобильноеПриложениеКлиент Тогда
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, ДействиеПриНажатии, ТекстОповещения, КартинкаОповещения,
			СтатусОповещенияПользователя.Важное);
		#КонецЕсли
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(Оповещение, Новый Структура("ВыполнитьПодписаниеСледующегоТитула", Истина));
	КонецЕсли;
КонецПроцедуры

// Функция - Есть возможность подписания ЭПЛ
//
// Параметры:
//  ПутевойЛист		 - ДокументСсылка - Путевой лист
//  Титул			 - ПеречислениеСсылка - Текущий титул ЭПЛ
//  СоответвиеПЛЭД	 - Соответствие - Соответствие ПЛЭД
// 
// Возвращаемое значение:
//   - Булево - Подписание возможно или нет
//
Функция ЕстьВозможностьПодписанияЭПЛ(ПутевойЛист, Титул, СоответвиеПЛЭД = Неопределено) Экспорт
	ЕстьВозможностьПодписания = Ложь;
	Если НЕ ЗначениеЗаполнено(ПутевойЛист) Тогда 
		Возврат ЕстьВозможностьПодписания;
	Конецесли;
	Если СоответвиеПЛЭД = Неопределено Тогда 
		СоответвиеПЛЭД      = Новый Соответствие();
		СостоянияПодписейПЛ = Новый Соответствие();
		мсвПутевыеЛисты     = Новый Массив();
		мсвПутевыеЛисты.Добавить(ПутевойЛист);
		уатОбменСГИСЭПД.ЗаполнитьСостоянияПЛ(мсвПутевыеЛисты, СостоянияПодписейПЛ, СоответвиеПЛЭД);
	КонецЕсли;
	
	ЭПЛ_Титул1 = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1");
	ЭПЛ_Титул2 = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2");
	ЭПЛ_Титул3 = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3");
	ЭПЛ_Титул4 = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4");
	ЭПЛ_Титул5 = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5");
	ЭПЛ_Титул6 = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6");
	
	ДанныеЭПЛ = СоответвиеПЛЭД.Получить(ПутевойЛист);
	Если ДанныеЭПЛ = Неопределено Тогда
		Возврат ЕстьВозможностьПодписания;
	Конецесли;
	
	Если Титул = ЭПЛ_Титул1 Тогда
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 1) Тогда
			ЕстьВозможностьПодписания = НЕ ДанныеЭПЛ.Титул1Подписан;
		КонецЕсли;
	ИначеЕсли Титул = ЭПЛ_Титул2 Тогда
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 2) Тогда
			ЕстьВозможностьПодписания = ДанныеЭПЛ.Титул1Подписан И НЕ ДанныеЭПЛ.Титул2Подписан;
		КонецЕсли;
	ИначеЕсли Титул = ЭПЛ_Титул3 Тогда
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 4) Тогда
			ЕстьВозможностьПодписания = ДанныеЭПЛ.Титул1Подписан И НЕ ДанныеЭПЛ.Титул3Подписан;
		КонецЕсли;
	ИначеЕсли Титул = ЭПЛ_Титул4 Тогда
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 8) Тогда
			ЕстьВозможностьПодписания = ДанныеЭПЛ.Титул2Подписан И ДанныеЭПЛ.Титул3Подписан И НЕ ДанныеЭПЛ.Титул4Подписан;
		КонецЕсли;
	ИначеЕсли Титул = ЭПЛ_Титул5 Тогда
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 8) Тогда
			ЕстьВозможностьПодписания = ДанныеЭПЛ.Титул4Подписан И НЕ ДанныеЭПЛ.Титул5Подписан;
		КонецЕсли;
	ИначеЕсли Титул = ЭПЛ_Титул6 Тогда
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 2) Тогда
			ЕстьВозможностьПодписания = ДанныеЭПЛ.Титул5Подписан И НЕ ДанныеЭПЛ.Титул6Подписан;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьВозможностьПодписания;
	
КонецФункции

// Создает, утверждает, подписывает и отправляет электронный документ. Выполняются только те действия,
// которые действительно требуются для электронного документа (еще не были выполнены и допустимы). Используется как для
// исходящих, так и для входящих документов.
//
// Параметры:
//  ОбъектыУчета       - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета, электронные 
//                       документы которого нужно обработать.
//  ТекущийШаг         - Строка
//  ОписаниеОповещения - ОписаниеОповещения - обработчик оповещения, который вызывается по окончании операции.
//						 В качестве результата возвращается ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО().
Процедура ВыполнитьКомплекснуюОбработкуАктуальныхЭлектронныхДокументовОбъектовУчета(ОбъектыУчета, ТекущийШаг, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТекущийШаг = "Диспетчер" Тогда
		НаборДействий = Новый Соответствие;	
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	Иначе
		НаборДействий = Новый Соответствие;	
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	КонецЕсли;

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбъектыУчета", ОбъектыУчета);
	ПараметрыОповещения.Вставить("ОповещениеУспешногоЗавершения", ОписаниеОповещения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ОбъектыУчета;
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

// Функция - Получить массив имен реквизитов для выбора физических лиц
// 
// Возвращаемое значение:
//   - Массив - Коллекция имен реквизитов
//
Функция ПолучитьМассивИменРеквизитовДляВыбораФизическихЛиц() Экспорт
	МассивФизЛиц = Новый Массив();
	МассивФизЛиц.Добавить("ХранимыеДанныеВодитель");
	МассивФизЛиц.Добавить("ХранимыеДанныеТитулМедосмотрСтороннийМедработник");
	МассивФизЛиц.Добавить("ХранимыеДанныеТитулВыпускОтветственныйЗаСостояниеТС");
	МассивФизЛиц.Добавить("ХранимыеДанныеТитулВыездУполномоченныйНаПроставлениеДанных");
	МассивФизЛиц.Добавить("ХранимыеДанныеТитулЗаездУполномоченныйНаПроставлениеДанных");
	Возврат МассивФизЛиц;
КонецФункции

// Функция - Получить массив имен реквизитов для выбора ТС
// 
// Возвращаемое значение:
//   - Массив - Коллекция имен реквизитов
//
Функция ПолучитьМассивИменРеквизитовДляВыбораТС() Экспорт
	МассивТС = Новый Массив();
	МассивТС.Добавить("ХранимыеДанныеТитулГрузоотправителяТранспортноеСредство"); 
	МассивТС.Добавить("ХранимыеДанныеТитулПеревозчикаТранспортноеСредство");
	МассивТС.Добавить("ХранимыеДанныеТитулОформлениеТранспортноеСредство");
	МассивТС.Добавить("ХранимыеДанныеТитулФрахтовщикаТранспортноеСредство");
	МассивТС.Добавить("ХранимыеДанныеПрицеп");
	МассивТС.Добавить("ХранимыеДанныеТитулПеревозчикаПрицеп"); 
	Возврат МассивТС;
КонецФункции

// Функция - Получить массив имен реквизитов для выбора сотрудников
// 
// Возвращаемое значение:
//   - Массив - Коллекция имен реквизитов
//
Функция ПолучитьМассивИменРеквизитовДляВыбораСотрудников() Экспорт
	МассивСотрудников = Новый Массив();
	МассивСотрудников.Добавить("ХранимыеДанныеТитулМедосмотрШтатныйМедработник");
	Возврат МассивСотрудников;
КонецФункции

// Функция - Получить массив имен реквизитов для выбора ГМ
// 
// Возвращаемое значение:
//   - Массив - Коллекция имен реквизитов
//
Функция ПолучитьМассивИменРеквизитовДляВыбораГМ() Экспорт
	МассивГМ = Новый Массив();
	МассивГМ.Добавить("ХранимыеДанныеГруз");
	Возврат МассивГМ;
КонецФункции

#Область СлужебныеПроцедурыИФункцииЭТН

Функция ИмяДокумента(ИмяФормы)
	
	МассивЧастейИмениФормы = СтрРазделить(ИмяФормы, ".");
	ИмяОбъекта = МассивЧастейИмениФормы[1];
	
	Возврат ИмяОбъекта;
	
КонецФункции
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииЭПЛ

Функция СформироватьМассивЭДДляПодписи(мсвПутевыхЛистов, Титул, СостоянияПодписейПЛ, СоответвиеПЛЭД, ОшибкиЗаполнения, ЕстьОшибки, ТитулЭПЛ, ПовторныйШаг = Ложь)
	
	мсвДокументовДляПодписи = Новый Массив();
	
	ОшибкиЗаполнения.Очистить();
	Для Каждого ТекПЛ Из мсвПутевыхЛистов Цикл

		СостояниеПодписейПЛ = СостоянияПодписейПЛ.Получить(ТекПЛ);
		ДанныеЭПЛ           = СоответвиеПЛЭД.Получить(ТекПЛ); 
		ЕстьЭПЛ             = ДанныеЭПЛ <> Неопределено;
		Если ЕстьЭПЛ Тогда
			ТекЭПЛ = ДанныеЭПЛ.ЭПЛ;
		Иначе
			ТекЭПЛ = Неопределено;
		КонецЕсли;
		
		Если Титул = "Диспетчер"
			И (НЕ ЕстьЭПЛ ИЛИ
			(ЕстьЭПЛ И НЕ ДанныеЭПЛ.Титул2Подписан И ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 1)
			И НЕ ДанныеЭПЛ.Титул1Подписан)) Тогда
			ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1");
			
			ДопПараметры = Новый Структура();
			ЭПЛ = уатОбменСГИСЭПДКлиент.ОформитьЭПЛ(ТекПЛ,
				ТитулЭПЛ, ТекЭПЛ, ДопПараметры);
			Если ЗначениеЗаполнено(ЭПЛ) Тогда
				НоваяСтрокаОшибок = ОшибкиЗаполнения.Добавить();
				НоваяСтрокаОшибок.Текст = СтрШаблон(Нстр("ru = 'Ошибки заполнения %1 (Оформление):'"), ЭПЛ);
				Если ОбменСГИСЭПДКлиент.ЗаполнитьТаблицуОшибокЭПД(ЭПЛ, ОшибкиЗаполнения, Ложь) Тогда
					ОбработатьТаблицуОшибок(ОшибкиЗаполнения, ЭПЛ, ТекПЛ);
					ЕстьОшибки = Истина;
				Иначе
					мсвДокументовДляПодписи.Добавить(ЭПЛ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЕстьЭПЛ И Титул = "Медработник"
			И ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 2) Тогда
			Если ДанныеЭПЛ.Титул1Подписан 
				И НЕ ДанныеЭПЛ.Титул2Подписан Тогда 
				ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2");
			ИначеЕсли ДанныеЭПЛ.Титул5Подписан
				И НЕ ДанныеЭПЛ.Титул6Подписан Тогда
				ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6");
			ИначеЕсли ПовторныйШаг 
				И НЕ ДанныеЭПЛ.Титул5Подписан Тогда
				ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2");
			ИначеЕсли ПовторныйШаг Тогда
				ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6");
			Иначе
				Продолжить;
			Конецесли;
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("ПовторныйШаг", ПовторныйШаг);
			ЭПЛ = уатОбменСГИСЭПДКлиент.ОформитьЭПЛ(ТекПЛ,
				ТитулЭПЛ, ТекЭПЛ, ДопПараметры);
			Если ЗначениеЗаполнено(ЭПЛ) Тогда
				НоваяСтрокаОшибок = ОшибкиЗаполнения.Добавить();
				НоваяСтрокаОшибок.Текст = СтрШаблон(Нстр("ru = 'Ошибки заполнения %1 (Медосмотр):'"), ЭПЛ);
				Если ОбменСГИСЭПДКлиент.ЗаполнитьТаблицуОшибокЭПД(ЭПЛ, ОшибкиЗаполнения, Ложь) Тогда
					ОбработатьТаблицуОшибок(ОшибкиЗаполнения, ЭПЛ, ТекПЛ);
					ЕстьОшибки = Истина;
				Иначе
					мсвДокументовДляПодписи.Добавить(ЭПЛ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЕстьЭПЛ И Титул = "Контролер"
			И ДанныеЭПЛ.Титул1Подписан
			И НЕ ДанныеЭПЛ.Титул3Подписан
			И ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 4) Тогда

			ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3");
			ДопПараметры = Новый Структура();
			ЭПЛ = уатОбменСГИСЭПДКлиент.ОформитьЭПЛ(ТекПЛ,
				ТитулЭПЛ, ТекЭПЛ, ДопПараметры);
			Если ЗначениеЗаполнено(ЭПЛ) Тогда
				НоваяСтрокаОшибок = ОшибкиЗаполнения.Добавить();
				НоваяСтрокаОшибок.Текст = СтрШаблон(Нстр("ru = 'Ошибки заполнения %1 (Предрейсовый контроль):'"), ЭПЛ);
				Если ОбменСГИСЭПДКлиент.ЗаполнитьТаблицуОшибокЭПД(ЭПЛ, ОшибкиЗаполнения, Ложь) Тогда
					ОбработатьТаблицуОшибок(ОшибкиЗаполнения, ЭПЛ, ТекПЛ);
					ЕстьОшибки = Истина;
				Иначе
					мсвДокументовДляПодписи.Добавить(ЭПЛ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЕстьЭПЛ И Титул = "УполномоченныйНаПроставлениеОдометра"
			И ДанныеЭПЛ.Титул2Подписан
			И ДанныеЭПЛ.Титул3Подписан 
			И ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ДанныеЭПЛ.РольУчастника, 8) Тогда
			
			Если НЕ ДанныеЭПЛ.Титул4Подписан Тогда 
				ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4");
			ИначеЕсли НЕ ДанныеЭПЛ.Титул5Подписан Тогда
				ТитулЭПЛ = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5");
			Иначе
				Продолжить;
			Конецесли;
			
			ДопПараметры = Новый Структура();
			ЭПЛ = уатОбменСГИСЭПДКлиент.ОформитьЭПЛ(ТекПЛ,
				ТитулЭПЛ, ТекЭПЛ, ДопПараметры);
			Если ЗначениеЗаполнено(ЭПЛ) Тогда
				НоваяСтрокаОшибок = ОшибкиЗаполнения.Добавить();
				НоваяСтрокаОшибок.Текст = СтрШаблон(Нстр("ru = 'Ошибки заполнения %1 (Показания одометра):'"), ЭПЛ);
				Если ОбменСГИСЭПДКлиент.ЗаполнитьТаблицуОшибокЭПД(ЭПЛ, ОшибкиЗаполнения, Ложь) Тогда
					ОбработатьТаблицуОшибок(ОшибкиЗаполнения, ЭПЛ, ТекПЛ);
					ЕстьОшибки = Истина;
				Иначе
					мсвДокументовДляПодписи.Добавить(ЭПЛ);
				КонецЕсли;
			КонецЕсли;


		КонецЕсли;
	КонецЦикла;
	
	Возврат мсвДокументовДляПодписи;
	
КонецФункции

Процедура ОбработатьТаблицуОшибок(ОшибкиЗаполнения, ЭПЛ, ТекПЛ)
	ТекПЛДанные = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекПЛ, "ВидСообщения,ВидПеревозки,ТранспортноеСредство,Организация,
	|Водитель1,Водитель2");
	Для Каждого ТекОшибка Из ОшибкиЗаполнения Цикл 
		ТекОшибка.ОбъектПерехода = ЭПЛ;
		Если НЕ ЗначениеЗаполнено(ТекОшибка.Текст) Тогда 
			ТекОшибка.Текст = Нстр("ru = 'Перейти в форму документа'");
		КонецЕсли;
		Если СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвТС/ТС") <> 0 Тогда
			ТекОшибка.ОбъектПерехода = ТекПЛДанные.ТранспортноеСредство;
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвТС/Прицеп[") <> 0 Тогда
			Попытка
				НомерПрицепа = СтрЗаменить(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвТС/Прицеп[", "");
				КонецИндекса = СтрНайти(НомерПрицепа, "]");
				НомерПрицепа = Лев(СтрЗаменить(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвТС/Прицеп[", ""), КонецИндекса-1);
				НомерПрицепа = Число(НомерПрицепа);
				ТекОшибка.ОбъектПерехода = уатОбменСГИСЭПД.ПолучитьПрицепПЛ(ТекПЛ, НомерПрицепа);
			Исключение 
				Продолжить;
			КонецПопытки;
			
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвВодит[") <> 0 Тогда
			Попытка
				НомерВодителя = СтрЗаменить(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвВодит[", "");
				КонецИндекса  = СтрНайти(НомерВодителя, "]");
				НомерВодителя = Лев(СтрЗаменить(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвВодит[", ""), КонецИндекса-1);
				НомерВодителя = Число(НомерВодителя);
				ТекОшибка.ОбъектПерехода = ?(НомерВодителя = 0, ТекПЛДанные.Водитель1, ТекПЛДанные.Водитель2);
			Исключение 
				ТекОшибка.ОбъектПерехода = ТекПЛДанные.Водитель1;
			КонецПопытки;

		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/ВидСообщ") <> 0 Тогда
			Если ЗначениеЗаполнено(ТекПЛДанные.ВидСообщения) Тогда
				ТекОшибка.ОбъектПерехода = ТекПЛДанные.ВидСообщения;
			Иначе
				ТекОшибка.ОбъектПерехода = ТекПЛ;
			КонецЕсли; 
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/ВидПрв") <> 0 Тогда
			Если ЗначениеЗаполнено(ТекПЛДанные.ВидПеревозки) Тогда
				ТекОшибка.ОбъектПерехода = ТекПЛДанные.ВидПеревозки;
			Иначе
				ТекОшибка.ОбъектПерехода = ТекПЛ;
			КонецЕсли;
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвЛицПЛ") <> 0 Тогда
			Если СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвЛицПЛ/Адрес") <> 0 Тогда
				ТекОшибка.Текст = ТекОшибка.Текст + " " + Нстр("ru = 'в юридическом адресе организации'");
			ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвЛицПЛ/Контакт/Тлф") <> 0 Тогда
				ТекОшибка.Текст = ТекОшибка.Текст + " " + Нстр("ru = 'в юридическом адресе организации'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекПЛДанные.Организация) Тогда
				ТекОшибка.ОбъектПерехода = ТекПЛДанные.Организация;
			Иначе
				ТекОшибка.ОбъектПерехода = ТекПЛ;
			КонецЕсли;
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфСоб/СвВодит") <> 0 Тогда
			
			Если ЗначениеЗаполнено(ТекПЛДанные.Водитель1)
				И НЕ ЗначениеЗаполнено(ТекПЛДанные.Водитель2) Тогда
				ТекОшибка.ОбъектПерехода = ТекПЛДанные.Водитель1;
			Иначе
				ТекОшибка.ОбъектПерехода = ТекПЛ;
			КонецЕсли; 
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфМО/СвМедРаб") <> 0
			ИЛИ СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфМО/СвМедОрг") <> 0 Тогда
			ТекОшибка.ОбъектПерехода = ТекПЛ;  
			
		ИначеЕсли СтрНайти(ТекОшибка.Узел, "//Файл/Документ/СодИнфТехСост/СвОтвЛиц") <> 0 Тогда
			ТекОшибка.Текст = ТекОшибка.Текст + " " + Нстр("ru = 'ответственного за состояние ТС при выезде'");
			ТекОшибка.ОбъектПерехода = ТекПЛ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Работа с географическими сервисами (сервер, обновление информационной базы).
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
	
Процедура ПеревестиГеографическиеСервисыНаВерсию_2_0() Экспорт
	
	ОбновитьГеографическиеСервисы();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПомощникНастройкиГеосервисов") Тогда
		Обработки["ItobПомощникНастройкиГеосервисов"].НастроитьПомощникПриОбновленииИБ();	
	КонецЕсли; 
		
	ИзменитьПометкуУдаленияОбработчикаГеосервисаПоАктуальности("ItobОбработчикПрямогоГеокодирования");
	ИзменитьПометкуУдаленияОбработчикаГеосервисаПоАктуальности("ItobОбработчикОбратногоГеокодирования");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
		
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.		
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.УправлениеОбработчиками = Истина;
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ItobГеографическиеСервисыОбновлениеИнформационнойБазы.ЗаполнитьОбработчикиРазделенныхДанных";	
	Иначе
		ДобавитьОбщиеОбработчикиДляМоделиСервисаИЛокальногоРежима(Обработчики);
	КонецЕсли;
		
КонецПроцедуры

// Заполняет обработчик разделенных данных, зависимый от изменения неразделенных данных.
//
// Параметры:
//   Обработчики - ТаблицаЗначений, Неопределено - см. описание
//    функции НоваяТаблицаОбработчиковОбновления общего модуля
//    ОбновлениеИнформационнойБазы.
//    В случае прямого вызова (не через механизм обновления
//    версии ИБ) передается Неопределено.
// 
Процедура ЗаполнитьОбработчикиРазделенныхДанных(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Обработчики = Параметры.РазделенныеОбработчики;
		ДобавитьОбщиеОбработчикиДляМоделиСервисаИЛокальногоРежима(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет информацию о географических сервисах.
//
Процедура ОбновитьГеографическиеСервисы(Параметры = Неопределено) Экспорт
	
	Для Каждого ИмяПредопределенного Из Метаданные.Справочники.ItobГеографическиеСервисы.ПолучитьИменаПредопределенных() Цикл
		ОбновитьГеографическийСервис(ИмяПредопределенного);
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОбщиеОбработчикиДляМоделиСервисаИЛокальногоРежима(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobГеографическиеСервисыОбновлениеИнформационнойБазы.ОбновитьГеографическиеСервисы";
	
КонецПроцедуры
 
Процедура ОбновитьГеографическийСервис(ИмяПредопределенного)

	ГеографическийСервис = Справочники.ItobГеографическиеСервисы[ИмяПредопределенного];
	
	// Получаем хеш-сумму макета.
	Макет = Справочники.ItobГеографическиеСервисы.ПолучитьМакет(ИмяПредопределенного);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Макет.Записать(ИмяВременногоФайла);
	ХешСуммаМакета = ItobГеографическиеСервисыСлужебный.ХешСуммаФайла(ИмяВременногоФайла);	
	УдалитьФайлы(ИмяВременногоФайла);
	
	// Если хеш-сумма сервиса отличается от макета, то обновляем его.
	Если Не ГеографическийСервис.ХешСумма = ХешСуммаМакета Тогда
	    ГеографическийСервисОбъект = ГеографическийСервис.ПолучитьОбъект();
		ГеографическийСервисОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(Макет);
		
		// Заполняем краткую информацию о сервисе.
		МетаданныеМакет = Метаданные.Справочники.ItobГеографическиеСервисы.Макеты[ИмяПредопределенного];
		ГеографическийСервисОбъект.Наименование = МетаданныеМакет.Синоним;
		ГеографическийСервисОбъект.ИмяОбработки = МетаданныеМакет.Имя;
		МетаданныеМакет = Неопределено;
		
		// Сохраняем сервис, чтобы у нас была ссылка на элемент справочника.
		ГеографическийСервисОбъект.Записать();
		СервисСсылка = ГеографическийСервисОбъект.Ссылка;
		
		// Получаем информацию о внешней обработке.
		ВнешняяОбработкаОбъект = ItobГеографическиеСервисыПовтИсп.ВнешняяОбработка(СервисСсылка);
		
		// Заполняем параметры инициализации.
		ПараметрыИнициализации = ВнешняяОбработкаОбъект.ВернутьПараметрыИнициализации();
		ГеографическийСервисОбъект.Версия = ПараметрыИнициализации.Версия;
		ГеографическийСервисОбъект.СервисПрямогоГеокодирования = ПараметрыИнициализации.СервисПрямогоГеокодирования;
		ГеографическийСервисОбъект.СервисОбратногоГеокодирования = ПараметрыИнициализации.СервисОбратногоГеокодирования;
		ГеографическийСервисОбъект.СервисРасчетаМаршрута = ПараметрыИнициализации.СервисРасчетаМаршрута;
		ГеографическийСервисОбъект.СервисРасчетаРасстояния = ПараметрыИнициализации.СервисРасчетаРасстояния;
		
		// Заполняем таблицу параметров.
		ТаблицаПараметров = Неопределено;
		ПользовательскиеПараметрыКопия = ГеографическийСервисОбъект.Параметры.Выгрузить();
		ГеографическийСервисОбъект.Параметры.Очистить();
		Если ПараметрыИнициализации.Свойство("ТаблицаПараметров", ТаблицаПараметров) Тогда
			Для каждого СтрТаблицыПоставщика Из ТаблицаПараметров Цикл   // "Загрузить()" не используется для обратной совместимости.
				НоваяСтрока = ГеографическийСервисОбъект.Параметры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТаблицыПоставщика);
				
				// Переносим старые настройки.
				НайденнаяСтрока = ПользовательскиеПараметрыКопия.Найти(СтрТаблицыПоставщика.Имя, "Имя");
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);		
				КонецЕсли; 
			КонецЦикла; 			
		КонецЕсли;
		
		// Заполнение доступных для выбора ключей ограничений.
		ГеографическийСервисОбъект.ВидыДоступныхОграничений.Очистить();
		Если ПараметрыИнициализации.Свойство("ВидыДоступныхОграничений") Тогда
			Для каждого КлючОграничения Из ПараметрыИнициализации.ВидыДоступныхОграничений Цикл
				НовСтрока = ГеографическийСервисОбъект.ВидыДоступныхОграничений.Добавить();
				НовСтрока.КлючОграничения = КлючОграничения;
			КонецЦикла; 	
		КонецЕсли; 
		
		// Сохраняем информацию о сервисе.
		ГеографическийСервисОбъект.Записать();		
	КонецЕсли; 
	
КонецПроцедуры
	
Процедура ИзменитьПометкуУдаленияОбработчикаГеосервисаПоАктуальности(ИмяКонстанты)

	Обработчик = Константы[ИмяКонстанты].Получить();	
	Если НЕ ЗначениеЗаполнено(Обработчик) Тогда
		Возврат;	
	КонецЕсли; 
	
	СвойстваОбработчика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обработчик, "ПометкаУдаления, Предопределенный");
	Если НЕ СвойстваОбработчика.Предопределенный И СвойстваОбработчика.ПометкаУдаления Тогда
		ОбработчикОбъект = Обработчик.ПолучитьОбъект();
		ОбработчикОбъект.УстановитьПометкуУдаления(Ложь);
		ОбработчикОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ПечатьИсторияЗаказа

// Выполняет построение и вывод на печать отчета "История заказа на ТС"
Функция ПечатьИсторияЗаказа(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказНаТС";
	
	ДатаПостроенияОтчета = ТекущаяДата();
	УчетПланФакта = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатЗаказГрузоотправителя_ЗаказНаТСИсторияЗаказа";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаказГрузоотправителя.ПФ_MXL_ИсторияЗаказа");
		
		ОбластьШапки                      = "ШапкаОсновное";
		ОбластьШапкиМаршрут               = "ШапкаМаршрут";
		ОбластьШапкиВидДоставки           = "ШапкаВидДоставки";
		ОбластьИтоговыеПараметры          = "ИтоговыеПараметрыЗаказа";
		ОбластьОтправлениеПрибытие        = "ОтправлениеПрибытие";
		ОбластьПрибыль                    = "Прибыль";
		ОбластьУслугиШапка                = "УслугиШапка";
		ОбластьУслугиСтрока               = "УслугиСтрока";
		ОбластьДвижениеГрузовШапка        = "ДвижениеГрузовШапка";
		ОбластьДвижениеГрузовСтрока       = "ДвижениеГрузовСтрока";
		ОбластьСостояниеДокументовШапка   = "СостояниеДокументовШапка";
		ОбластьСостояниеДокументовСтрока  = "СостояниеДокументовСтрока";
		ОбластьСостояниеЗаказаШапка       = "СостояниеШапка";
		ОбластьСостояниеЗаказаСтрока      = "СостояниеСтрока";
		ОбластьСоставЗаказаШапка          = "СоставШапка";
		ОбластьСоставЗаказаСтрока         = "СоставСтрока";
		ОбластьСоставЗаказаСтрокаПланФакт = "СоставСтрокаПланФакт";
		ОбластьДиаграммы                  = "ДиаграммыПробегВремяПрибыль";
		ОбластьИсторияСтатусовШапка       = "ИсторияИзмененияСтатусовШапка";
		ОбластьИсторияСтатусовСтрока      = "ИсторияИзмененияСтатусовСтрока";
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК ЗаказГрузоотправителя
		|ПОМЕСТИТЬ втЗаказы
		|ИЗ
		|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
		|ГДЕ
		|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
		|	И уатЭтапыМультимодальныхПеревозок_уэ.Этап.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ЗаказГрузоотправителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(уатДоходыОбороты.СуммаУпрПриход), 0) КАК ДоходыФакт
		|ИЗ
		|	РегистрНакопления.уатДоходы.Обороты(
		|			,
		|			,
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|				ИЗ
		|					втЗаказы КАК втЗаказы)) КАК уатДоходыОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(уатРасходыОбороты.СуммаУпрПриход), 0) КАК РасходыФакт
		|ИЗ
		|	РегистрНакопления.уатРасходы.Обороты(
		|			,
		|			,
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|				ИЗ
		|					втЗаказы КАК втЗаказы)) КАК уатРасходыОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(уатПлановыеУслуги_уэОбороты.СуммаУпрОборот), 0) КАК РасходыПлан
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация)
		|				И ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
		|				И ЗаказНаТС В
		|					(ВЫБРАТЬ
		|						втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|					ИЗ
		|						втЗаказы КАК втЗаказы)) КАК уатПлановыеУслуги_уэОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(уатПлановыеУслуги_уэОбороты.СуммаУпрОборот), 0) КАК ДоходыПлан
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент)
		|				И ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
		|				И ЗаказНаТС В
		|					(ВЫБРАТЬ
		|						втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|					ИЗ
		|						втЗаказы КАК втЗаказы)) КАК уатПлановыеУслуги_уэОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(уатВыставленныеУслугиОбороты.КоличествоОборот, 0) КАК ВыставленоКоличество,
		|	ЕСТЬNULL(уатВыставленныеУслугиОбороты.СуммаОборот, 0) КАК ВыставленоСумма,
		|	ЕСТЬNULL(уатПредоставленныеУслугиОбороты.КоличествоОборот, 0) КАК ПредоставленоКоличество,
		|	ЕСТЬNULL(уатПредоставленныеУслугиОбороты.СуммаОборот, 0) КАК ПредоставленоСумма,
		|	ЕСТЬNULL(уатВыставленныеУслугиОбороты.Валюта, уатПредоставленныеУслугиОбороты.Валюта) КАК Валюта,
		|	ЕСТЬNULL(уатПредоставленныеУслугиОбороты.КоличествоОборот, 0) - ЕСТЬNULL(уатВыставленныеУслугиОбороты.КоличествоОборот, 0) КАК НеВыставленоКоличество,
		|	ЕСТЬNULL(уатПредоставленныеУслугиОбороты.СуммаОборот, 0) - ЕСТЬNULL(уатВыставленныеУслугиОбороты.СуммаОборот, 0) КАК НеВыставленоСумма,
		|	ЕСТЬNULL(уатВыставленныеУслугиОбороты.Номенклатура, уатПредоставленныеУслугиОбороты.Номенклатура) КАК Услуга
		|ИЗ
		|	РегистрНакопления.уатПредоставленныеУслуги.Обороты(
		|			,
		|			,
		|			,
		|			ЗаказНаТС В
		|				(ВЫБРАТЬ
		|					втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|				ИЗ
		|					втЗаказы КАК втЗаказы)) КАК уатПредоставленныеУслугиОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыставленныеУслуги.Обороты(
		|				,
		|				,
		|				,
		|				ЗаказНаТС В
		|					(ВЫБРАТЬ
		|						втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|					ИЗ
		|						втЗаказы КАК втЗаказы)) КАК уатВыставленныеУслугиОбороты
		|		ПО уатПредоставленныеУслугиОбороты.Номенклатура = уатВыставленныеУслугиОбороты.Номенклатура
		|			И уатПредоставленныеУслугиОбороты.Валюта = уатВыставленныеУслугиОбороты.Валюта
		|ИТОГИ
		|	СУММА(ВыставленоКоличество),
		|	СУММА(ВыставленоСумма),
		|	СУММА(ПредоставленоКоличество),
		|	СУММА(ПредоставленоСумма),
		|	СУММА(НеВыставленоКоличество),
		|	СУММА(НеВыставленоСумма)
		|ПО
		|	Услуга,
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСкладскоеХранениеГрузов_уэСрезПервых.Заказ КАК Заказ,
		|	уатСкладскоеХранениеГрузов_уэСрезПервых.Склад КАК Склад,
		|	уатСкладскоеХранениеГрузов_уэСрезПервых.ГрузовоеМесто КАК Груз,
		|	уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации КАК ВидОперации,
		|	уатСкладскоеХранениеГрузов_уэСрезПервых.Период КАК Прибытие,
		|	ВЫБОР
		|		КОГДА уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Отгрузка)
		|				ИЛИ уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Разукомплектация)
		|				ИЛИ уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Комплектация)
		|			ТОГДА уатСкладскоеХранениеГрузов_уэСрезПоследних.Период
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Выбытие,
		|	ВЫБОР
		|		КОГДА уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Отгрузка)
		|				ИЛИ уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Разукомплектация)
		|				ИЛИ уатСкладскоеХранениеГрузов_уэСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Комплектация)
		|			ТОГДА РАЗНОСТЬДАТ(уатСкладскоеХранениеГрузов_уэСрезПервых.Период, уатСкладскоеХранениеГрузов_уэСрезПоследних.Период, ДЕНЬ) + 1
		|		ИНАЧЕ РАЗНОСТЬДАТ(уатСкладскоеХранениеГрузов_уэСрезПервых.Период, &ТекущаяДата, ДЕНЬ) + 1
		|	КОНЕЦ КАК ДнейХранения
		|ИЗ
		|	РегистрСведений.уатСкладскоеХранениеГрузов_уэ.СрезПервых(
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|				ИЗ
		|					втЗаказы КАК втЗаказы)) КАК уатСкладскоеХранениеГрузов_уэСрезПервых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатСкладскоеХранениеГрузов_уэ.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|					ИЗ
		|						втЗаказы КАК втЗаказы)) КАК уатСкладскоеХранениеГрузов_уэСрезПоследних
		|		ПО уатСкладскоеХранениеГрузов_уэСрезПервых.Заказ = уатСкладскоеХранениеГрузов_уэСрезПоследних.Заказ
		|			И уатСкладскоеХранениеГрузов_уэСрезПервых.Склад = уатСкладскоеХранениеГрузов_уэСрезПоследних.Склад
		|			И уатСкладскоеХранениеГрузов_уэСрезПервых.ГрузовоеМесто = уатСкладскоеХранениеГрузов_уэСрезПоследних.ГрузовоеМесто
		|ИТОГИ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ВидДокумента КАК ВидДокумента,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.НомерДокумента КАК НомерДокумента,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ДатаДокумента КАК ДатаДокумента,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ВладелецДокумента КАК ВладелецДокумента,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.КоличествоЭкземпляров КАК Количество,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Комментарий КАК Комментарий,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.Статус КАК Статус,
		|	уатСтатусыСопроводительныхДокументовСрезПоследних.Период КАК ДатаСтатуса
		|ИЗ
		|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(
		|			,
		|			СопроводительныйДокумент.Основание В
		|				(ВЫБРАТЬ
		|					втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|				ИЗ
		|					втЗаказы КАК втЗаказы)) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
		|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
		|	уатЗаказГрузоотправителя.АдресОтправления КАК ПунктОтправления,
		|	уатЗаказГрузоотправителя.АдресНазначения КАК ПунктПрибытия,
		|	уатЗаказГрузоотправителя.ОтправлениеС КАК ОкноОтправленияС,
		|	уатЗаказГрузоотправителя.ОтправлениеПо КАК ОкноОтправленияПо,
		|	уатЗаказГрузоотправителя.ДоставкаС КАК ОкноПрибытияС,
		|	уатЗаказГрузоотправителя.ДоставкаПо КАК ОкноПрибытияПо,
		|	уатЗаказГрузоотправителя.Номер КАК НомерЗаказа,
		|	ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто, НЕОПРЕДЕЛЕНО) КАК Груз,
		|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
		|	уатЗаказГрузоотправителя.Ссылка КАК ЗаказГрузоотправителя
		|ПОМЕСТИТЬ втСостоянияГрузов
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|					ИЗ
		|						втЗаказы КАК втЗаказы)) КАК уатСтатусыГрузов_уэСрезПоследних
		|		ПО уатЗаказГрузоотправителя.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
		|ГДЕ
		|	уатЗаказГрузоотправителя.Ссылка В
		|			(ВЫБРАТЬ
		|				втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|			ИЗ
		|				втЗаказы КАК втЗаказы)
		|	И (НЕ уатЗаказГрузоотправителя.Мультимодальный
		|			ИЛИ уатЗаказГрузоотправителя.ЭтоЭтап)
		|	И (ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
		|			ИЛИ уатЗаказГрузоотправителя.ДетализацияЗакрытия <> ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСостоянияГрузов.Грузоотправитель КАК Грузоотправитель,
		|	втСостоянияГрузов.Грузополучатель КАК Грузополучатель,
		|	втСостоянияГрузов.ПунктОтправления КАК ПунктОтправления,
		|	втСостоянияГрузов.ПунктПрибытия КАК ПунктПрибытия,
		|	втСостоянияГрузов.ОкноОтправленияС КАК ОкноОтправленияС,
		|	втСостоянияГрузов.ОкноОтправленияПо КАК ОкноОтправленияПо,
		|	втСостоянияГрузов.ОкноПрибытияС КАК ОкноПрибытияС,
		|	втСостоянияГрузов.ОкноПрибытияПо КАК ОкноПрибытияПо,
		|	втСостоянияГрузов.НомерЗаказа КАК НомерЗаказа,
		|	втСостоянияГрузов.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
		|	втСостоянияГрузов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|ИЗ
		|	втСостоянияГрузов КАК втСостоянияГрузов
		|
		|СГРУППИРОВАТЬ ПО
		|	втСостоянияГрузов.ОкноПрибытияС,
		|	втСостоянияГрузов.НомерЗаказа,
		|	втСостоянияГрузов.ЗаказГрузоотправителя,
		|	втСостоянияГрузов.Грузоотправитель,
		|	втСостоянияГрузов.Грузополучатель,
		|	втСостоянияГрузов.ПунктОтправления,
		|	втСостоянияГрузов.ПунктПрибытия,
		|	втСостоянияГрузов.ОкноПрибытияПо,
		|	втСостоянияГрузов.ДетализацияЗакрытия,
		|	втСостоянияГрузов.ОкноОтправленияС,
		|	втСостоянияГрузов.ОкноОтправленияПо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втМаршрутныеЛисты
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|ГДЕ
		|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя В
		|			(ВЫБРАТЬ
		|				втСостоянияГрузов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|			ИЗ
		|				втСостоянияГрузов КАК втСостоянияГрузов)
		|	И уатМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	уатМаршрутныйЛистЗаказы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатМаршрутныйЛист.Номер КАК МаршрутныйЛистНомер,
		|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
		|	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
		|	уатМаршрутныйЛист.ТС КАК ТС,
		|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
		|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
		|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
		|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
		|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
		|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
		|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
		|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
		|	уатМаршрутныйЛистЗаказы.Выполнен КАК Выполнен,
		|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
		|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
		|	уатМаршрутныйЛистЗаказы.Расстояние КАК Расстояние,
		|	ЕСТЬNULL(втСостоянияГрузов.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ПустаяСсылка)) КАК Статус,
		|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
		|	уатМаршрутныйЛистЗаказы.Время КАК Время,
		|	уатМаршрутныйЛистЗаказы.Ожидание КАК ОжиданиеПлан,
		|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
		|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
		|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСостоянияГрузов КАК втСостоянияГрузов
		|		ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = втСостоянияГрузов.ЗаказГрузоотправителя
		|			И (втСостоянияГрузов.Груз = уатМаршрутныйЛистЗаказы.Номенклатура
		|				ИЛИ втСостоянияГрузов.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
		|				ИЛИ втСостоянияГрузов.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
		|ГДЕ
		|	уатМаршрутныйЛист.Ссылка В
		|			(ВЫБРАТЬ
		|				втМаршрутныеЛисты.Ссылка КАК Ссылка
		|			ИЗ
		|				втМаршрутныеЛисты КАК втМаршрутныеЛисты)
		|	И уатМаршрутныйЛист.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	МаршрутныйЛист,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСтатусыГрузов_уэ.Заказ КАК Заказ,
		|	уатСтатусыГрузов_уэ.Статус КАК Статус,
		|	уатСтатусыГрузов_уэ.Период КАК Период,
		|	уатСтатусыГрузов_уэ.ГрузовоеМесто КАК ГрузовоеМесто
		|ИЗ
		|	РегистрСведений.уатСтатусыГрузов_уэ КАК уатСтатусыГрузов_уэ
		|ГДЕ
		|	уатСтатусыГрузов_уэ.Заказ В
		|			(ВЫБРАТЬ
		|				втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
		|			ИЗ
		|				втЗаказы КАК втЗаказы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Период");
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ТекущийДокумент);
		Запрос.УстановитьПараметр("ТекущаяДата", ДатаПостроенияОтчета);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
				
		// Шапка
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ОбластьМакета.Параметры.Заполнить(ТекущийДокумент); 
		
		ТекстЗаголовка = Документы.уатЗаказГрузоотправителя.СформироватьНазваниеДокументаДляПечати(ТекущийДокумент);
		ОбластьМакета.Параметры.ТекстЗаголовка 		 = ТекстЗаголовка;
		ОбластьМакета.Параметры.ТекстЗаголовкаСсылка = ТекущийДокумент;
		ОбластьМакета.Параметры.ОтправительСКонтактнымЛицом = Строка(ТекущийДокумент.Грузоотправитель);
		Если ЗначениеЗаполнено(ТекущийДокумент.Грузоотправитель) И ЗначениеЗаполнено(ТекущийДокумент.КонтактноеЛицоГрузоотправителя) Тогда
			ОбластьМакета.Параметры.ОтправительСКонтактнымЛицом = Строка(ТекущийДокумент.Грузоотправитель) + ", " + Строка(ТекущийДокумент.КонтактноеЛицоГрузоотправителя);
		Иначе
			ОбластьМакета.Параметры.ОтправительСКонтактнымЛицом = Строка(ТекущийДокумент.Грузоотправитель) + Строка(ТекущийДокумент.КонтактноеЛицоГрузоотправителя);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийДокумент.Грузополучатель) И ЗначениеЗаполнено(ТекущийДокумент.КонтактноеЛицоГрузополучателя) Тогда
			ОбластьМакета.Параметры.ПолучательСКонтактнымЛицом  = Строка(ТекущийДокумент.Грузополучатель) + ", " + Строка(ТекущийДокумент.КонтактноеЛицоГрузополучателя);
		Иначе
			ОбластьМакета.Параметры.ПолучательСКонтактнымЛицом  = Строка(ТекущийДокумент.Грузополучатель) + Строка(ТекущийДокумент.КонтактноеЛицоГрузополучателя);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Маршрут) Или ЗначениеЗаполнено(ТекущийДокумент.НаправлениеПеревозки)  Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиМаршрут);
			ОбластьМакета.Параметры.Заполнить(ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.ВидДоставки) Или ЗначениеЗаполнено(ТекущийДокумент.ВидПеревозки)  Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиВидДоставки);
			ОбластьМакета.Параметры.Заполнить(ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ТаблицаДанныеМаршрутныхЛистов = РезультатЗапроса[11].Выгрузить();
		
		// Итоговые параметры
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьДиаграммы);
		ПечатьИсторияЗаказаИтоговыеПараметры(ОбластьМакета, ТекущийДокумент, РезультатЗапроса, ТаблицаДанныеМаршрутныхЛистов);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Состояние этапов
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСостояниеЗаказаШапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТаблицаГрузы = ТаблицаДанныеМаршрутныхЛистов.Скопировать(,"ЗаказГрузоотправителя, ДетализацияЗакрытия, Номенклатура, Статус");
		ТаблицаГрузы.Свернуть("ЗаказГрузоотправителя, ДетализацияЗакрытия, Номенклатура, Статус");
		
		ВыборкаШапкиЗаказов = РезультатЗапроса[9].Выбрать();
		Пока ВыборкаШапкиЗаказов.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСостояниеЗаказаСтрока);
			ОбластьМакета.Параметры.Этап = СтрШаблон(НСтр("en = 'Stage №%1'; ru = 'Этап №%1'"), ВыборкаШапкиЗаказов.НомерЗаказа);
			ОбластьМакета.Параметры.Заполнить(ВыборкаШапкиЗаказов);
			ОбластьМакета.Параметры.ОкноОтправления = Формат(ВыборкаШапкиЗаказов.ОкноОтправленияС, "ДФ='dd.MM.yyyy HH:mm'") 
				+ НСтр("ru=' по ';en=' to '") 
				+ Формат(ВыборкаШапкиЗаказов.ОкноОтправленияПо, "ДФ='dd.MM.yyyy HH:mm'");
			ОбластьМакета.Параметры.ОкноПрибытия = Формат(ВыборкаШапкиЗаказов.ОкноПрибытияС, "ДФ='dd.MM.yyyy HH:mm'") 
				+ НСтр("ru=' по ';en=' to '") 
				+ Формат(ВыборкаШапкиЗаказов.ОкноПрибытияПо, "ДФ='dd.MM.yyyy HH:mm'");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСоставЗаказаШапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НайденныеСтрокиГрузов = ТаблицаГрузы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя", ВыборкаШапкиЗаказов.ЗаказГрузоотправителя));
			Для Каждого ТекСтрока Из НайденныеСтрокиГрузов Цикл
				Если ТекСтрока.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
					И Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
					// Удаление лишних строк, чтобы они не отображались в отчете
					Продолжить;
				КонецЕсли;
				
				// В этот массив возвращаются номера строк, связанных с местоположением
				мсвСтрокиМестоположения = Новый Массив;
				Местоположение = МестоположениеПоМаршрутномуЛисту(ТаблицаДанныеМаршрутныхЛистов, ДатаПостроенияОтчета,
					ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.Номенклатура, УчетПланФакта, мсвСтрокиМестоположения);
					
				Если УчетПланФакта Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСоставЗаказаСтрокаПланФакт);
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСоставЗаказаСтрока);
				КонецЕсли;
				ОбластьМакета.Параметры.МестоположениеПоМаршрутномуЛисту = Местоположение;
				Если мсвСтрокиМестоположения.Количество() = 1 
					И Не ЗначениеЗаполнено(Местоположение) Тогда
					// Груз по маршрутному листу еще не отправлен
					ОбластьМакета.Параметры.Заполнить(мсвСтрокиМестоположения[0]);
					ОбластьМакета.Параметры.МаршрутныйЛист = мсвСтрокиМестоположения[0].МаршрутныйЛистНомер;
					ОбластьМакета.Параметры.ПрибытиеПлан = Неопределено;
					ОбластьМакета.Параметры.УбытиеПлан = Неопределено;
					Если УчетПланФакта Тогда
						ОбластьМакета.Параметры.ПрибытиеФакт = Неопределено;
						ОбластьМакета.Параметры.УбытиеФакт = Неопределено;
					КонецЕсли;
				ИначеЕсли мсвСтрокиМестоположения.Количество() = 1 Тогда
					ОбластьМакета.Параметры.Заполнить(мсвСтрокиМестоположения[0]);
					ОбластьМакета.Параметры.МаршрутныйЛист = мсвСтрокиМестоположения[0].МаршрутныйЛистНомер;
				ИначеЕсли мсвСтрокиМестоположения.Количество() = 2 Тогда
					ОбластьМакета.Параметры.Заполнить(мсвСтрокиМестоположения[0]);
					ОбластьМакета.Параметры.МаршрутныйЛист = мсвСтрокиМестоположения[0].МаршрутныйЛистНомер;
					// Груз в пути между 2 пунктами, дата прибытия берется из 2-го пункта
					ОбластьМакета.Параметры.ПрибытиеПлан = мсвСтрокиМестоположения[1].ПрибытиеПлан;
					Если УчетПланФакта Тогда
						ОбластьМакета.Параметры.ПрибытиеФакт = мсвСтрокиМестоположения[1].ПрибытиеФакт;
					КонецЕсли;
				КонецЕсли;
				ОбластьМакета.Параметры.Груз = ТекСтрока.Номенклатура;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЦикла;
		
		// Предоставленные и выставленные услуги
		Если Не РезультатЗапроса[5].Пустой() Тогда
			ВыборкаУслуги = РезультатЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьУслугиШапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Пока ВыборкаУслуги.Следующий() Цикл 
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьУслугиСтрока);
				ОбластьМакета.Параметры.Услуга = ВыборкаУслуги.Услуга;
				ОбластьМакета.Параметры.ПредоставленоКоличество = ВыборкаУслуги.ПредоставленоКоличество;
				ОбластьМакета.Параметры.ВыставленоКоличество = ВыборкаУслуги.ВыставленоКоличество;
				ОбластьМакета.Параметры.НеВыставленоКоличество = ВыборкаУслуги.НеВыставленоКоличество;
				ВыборкаВалюты = ВыборкаУслуги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВалюты.Следующий() Цикл
					Если ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредоставленоСумма) Тогда
						ОбластьМакета.Параметры.ПредоставленоСумма = ОбластьМакета.Параметры.ПредоставленоСумма + Символы.ПС;
					Иначе
						ОбластьМакета.Параметры.ПредоставленоСумма = "";
					КонецЕсли;
					Если ВыборкаВалюты.ПредоставленоСумма <> 0 Тогда
						ОбластьМакета.Параметры.ПредоставленоСумма = ОбластьМакета.Параметры.ПредоставленоСумма + Строка(ВыборкаВалюты.ПредоставленоСумма) + " " + Строка(ВыборкаВалюты.Валюта);
					КонецЕсли;
					Если ЗначениеЗаполнено(ОбластьМакета.Параметры.ВыставленоСумма) Тогда
						ОбластьМакета.Параметры.ВыставленоСумма = ОбластьМакета.Параметры.ВыставленоСумма + Символы.ПС;
					Иначе
						ОбластьМакета.Параметры.ВыставленоСумма = "";
					КонецЕсли;
					Если ВыборкаВалюты.ВыставленоСумма <> 0 Тогда
						ОбластьМакета.Параметры.ВыставленоСумма = ОбластьМакета.Параметры.ВыставленоСумма + Строка(ВыборкаВалюты.ВыставленоСумма) + " " + Строка(ВыборкаВалюты.Валюта);
					КонецЕсли;
					Если ЗначениеЗаполнено(ОбластьМакета.Параметры.НеВыставленоСумма) Тогда
						ОбластьМакета.Параметры.НеВыставленоСумма = ОбластьМакета.Параметры.НеВыставленоСумма + Символы.ПС;
					Иначе
						ОбластьМакета.Параметры.НеВыставленоСумма = "";
					КонецЕсли;
					Если ВыборкаВалюты.НеВыставленоСумма <> 0 Тогда
						ОбластьМакета.Параметры.НеВыставленоСумма = ОбластьМакета.Параметры.НеВыставленоСумма + Строка(ВыборкаВалюты.НеВыставленоСумма) + " " + Строка(ВыборкаВалюты.Валюта);
					КонецЕсли;
				КонецЦикла;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ВыборкаИтоги = РезультатЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьУслугиСтрока);
			ОбластьМакета.Параметры.Услуга = НСтр("ru = 'Итого'; en= 'Total:'");
			ОбластьМакета.Параметры.ПредоставленоКоличество = 0;
			ОбластьМакета.Параметры.ВыставленоКоличество = 0;
			ОбластьМакета.Параметры.НеВыставленоКоличество = 0;
			Пока ВыборкаИтоги.Следующий() Цикл
				ОбластьМакета.Параметры.ПредоставленоКоличество = ОбластьМакета.Параметры.ПредоставленоКоличество + ВыборкаИтоги.ПредоставленоКоличество;
				ОбластьМакета.Параметры.ВыставленоКоличество = ОбластьМакета.Параметры.ВыставленоКоличество + ВыборкаИтоги.ВыставленоКоличество;
				ОбластьМакета.Параметры.НеВыставленоКоличество = ОбластьМакета.Параметры.НеВыставленоКоличество + ВыборкаИтоги.НеВыставленоКоличество;
				Если ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредоставленоСумма) Тогда
					ОбластьМакета.Параметры.ПредоставленоСумма = ОбластьМакета.Параметры.ПредоставленоСумма + Символы.ПС;
				Иначе
					ОбластьМакета.Параметры.ПредоставленоСумма = "";
				КонецЕсли;
				Если ВыборкаИтоги.ПредоставленоСумма <> 0 Тогда
					ОбластьМакета.Параметры.ПредоставленоСумма = ОбластьМакета.Параметры.ПредоставленоСумма + Строка(ВыборкаИтоги.ПредоставленоСумма) + " " + Строка(ВыборкаИтоги.Валюта);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбластьМакета.Параметры.ВыставленоСумма) Тогда
					ОбластьМакета.Параметры.ВыставленоСумма = ОбластьМакета.Параметры.ВыставленоСумма + Символы.ПС;
				Иначе
					ОбластьМакета.Параметры.ВыставленоСумма = "";
				КонецЕсли;
				Если ВыборкаИтоги.ВыставленоСумма <> 0 Тогда
					ОбластьМакета.Параметры.ВыставленоСумма = ОбластьМакета.Параметры.ВыставленоСумма + Строка(ВыборкаИтоги.ВыставленоСумма) + " " + Строка(ВыборкаИтоги.Валюта);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбластьМакета.Параметры.НеВыставленоСумма) Тогда
					ОбластьМакета.Параметры.НеВыставленоСумма = ОбластьМакета.Параметры.НеВыставленоСумма + Символы.ПС;
				Иначе
					ОбластьМакета.Параметры.НеВыставленоСумма = "";
				КонецЕсли;
				Если ВыборкаИтоги.НеВыставленоСумма <> 0 Тогда
					ОбластьМакета.Параметры.НеВыставленоСумма = ОбластьМакета.Параметры.НеВыставленоСумма + Строка(ВыборкаИтоги.НеВыставленоСумма) + " " + Строка(ВыборкаИтоги.Валюта);
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Движение грузов на складах
		СекундВДне = 60*60*24;
		Если Не РезультатЗапроса[6].Пустой() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьДвижениеГрузовШапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаСклады = РезультатЗапроса[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСклады.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьДвижениеГрузовСтрока);
				ОбластьМакета.Параметры.СкладЗаказ = ВыборкаСклады.Склад;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.НачатьГруппуСтрок();
				НормаБесплатногоХранения = уатОбщегоНазначения_уэ.ПолучитьНормуБесплатногоХранения(ДатаПостроенияОтчета, ВыборкаСклады.Склад, ТекущийДокумент.Контрагент, ТекущийДокумент.Организация);
				ВыборкаДетали = ВыборкаСклады.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьДвижениеГрузовСтрока);
					ОбластьМакета.Параметры.СкладЗаказ = ВыборкаДетали.Заказ;
					ОбластьМакета.Параметры.Груз = ВыборкаДетали.Груз;
					ОбластьМакета.Параметры.Прибытие = ВыборкаДетали.Прибытие;
					ОбластьМакета.Параметры.Выбытие = ВыборкаДетали.Выбытие;
					ОбластьМакета.Параметры.Статус = ВыборкаДетали.ВидОперации;
					ОбластьМакета.Параметры.ДнейХранения = ВыборкаДетали.ДнейХранения;
					ОбластьМакета.Параметры.НормаХранения = НормаБесплатногоХранения;
					ОбластьМакета.Параметры.ПревышениеНормы = Макс(0, ОбластьМакета.Параметры.ДнейХранения - ОбластьМакета.Параметры.НормаХранения);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЦикла;
		КонецЕсли;
		
		// Состояние документов
		Если Не РезультатЗапроса[7].Пустой() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСостояниеДокументовШапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Выборка = РезультатЗапроса[7].Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСостояниеДокументовСтрока);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Выборка);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// История изменения статусов
		Если НЕ РезультатЗапроса[12].Пустой() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИсторияСтатусовШапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Выборка = РезультатЗапроса[12].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СоответствиеСтатусы = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				// Для каждого груза вычисялем текущий статус в каждый момент изменения статусов
				ВыборкаДетали = Выборка.Выбрать();
				ЗаказГрузоотправителя = Неопределено;
				ГрузовоеМесто = Неопределено;
				Пока ВыборкаДетали.Следующий() Цикл
					СоответствиеСтатусы.Вставить(ВыборкаДетали.ГрузовоеМесто, ВыборкаДетали.Статус);
					ЗаказГрузоотправителя = ВыборкаДетали.Заказ;
					ГрузовоеМесто = ВыборкаДетали.ГрузовоеМесто;
				КонецЦикла;
				
				// Затем получаем список всех активых статусов и выводим его
				мсвСтатусы = Новый Массив;
				Для Каждого КлючИЗначение Из СоответствиеСтатусы Цикл
					Если мсвСтатусы.Найти(КлючИЗначение.Значение) = Неопределено Тогда
						мсвСтатусы.Добавить(КлючИЗначение.Значение);
					КонецЕсли;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИсторияСтатусовСтрока);
				ОбластьМакета.Параметры.Период = Выборка.Период;
				ОбластьМакета.Параметры.Местоположение = МестоположениеПоМаршрутномуЛисту(ТаблицаДанныеМаршрутныхЛистов, Выборка.Период, ЗаказГрузоотправителя, ГрузовоеМесто, УчетПланФакта);
				Если мсвСтатусы.Количество() = 1 Тогда
					ОбластьМакета.Параметры.Статус = мсвСтатусы[0];
				ИначеЕсли мсвСтатусы.Количество() > 1 Тогда
					СтрокаСтатуса = Строка(Справочники.уатСтатусы_уэ.Составной) + "(" + СтрСоединить(мсвСтатусы, ", ") + ")";
					ОбластьМакета.Параметры.Статус = СтрокаСтатуса;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ОтображатьГруппировки = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	// Убираем лишние рамки вокруг диаграмм
	Для Каждого ТекРисунок Из ТабличныйДокумент.Рисунки Цикл
		ТекРисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	КонецЦикла;

	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ПечатьИсторияЗаказаИтоговыеПараметры(ОбластьМакета, ТекущийДокумент, РезультатЗапроса, ТаблицаДанныеМаршрутныхЛистов)
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДоходыФакт = Выборка.ДоходыФакт;
	Иначе
		ДоходыФакт = 0;
	КонецЕсли;
	Выборка = РезультатЗапроса[2].Выбрать();
	Если Выборка.Следующий() Тогда
		РасходыФакт = Выборка.РасходыФакт;
	Иначе
		РасходыФакт = 0;
	КонецЕсли;
	Выборка = РезультатЗапроса[3].Выбрать();
	Если Выборка.Следующий() Тогда
		РасходыПлан = Выборка.РасходыПлан;
	Иначе
		РасходыПлан = 0;
	КонецЕсли;
	Выборка = РезультатЗапроса[4].Выбрать();
	Если Выборка.Следующий() Тогда
		ДоходыПлан = Выборка.ДоходыПлан;
	Иначе
		ДоходыПлан = 0;
	КонецЕсли;
	ПрибыльПлан = ДоходыПлан - РасходыПлан;
	ПрибыльФакт = ДоходыФакт - РасходыФакт;
	
	ПробегОбщий = 0;
	ПробегПорожний = 0;
	ПробегСГрузом = 0;
	ВремяВПути = 0;
	ВремяСтоянки = 0;
	ВремяОбщее = 0;
	
	ПредЗаказ = Неопределено;
	ПредПункт = Неопределено;
	ПредТипТочкиМаршрута = Неопределено;
	
	// Таблица для определения порожнего пробега. Считаем что машина идет порожняком, если таблица пуста.
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	Для Каждого ТекСтрока Из ТаблицаДанныеМаршрутныхЛистов Цикл
		
		Если Не ТекСтрока.Выполнен Тогда
			Продолжить;
		КонецЕсли;
		
		// Обновляем таблицу грузов для расчета порожнего пробега.
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				Или ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка)
				И ТекСтрока.Количество > 0 Тогда
			
			// Добавляем строку груза.
			НоваяСтрока = тблГрузы.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Количество * ?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка, 1, -1);
			тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
			
			// Теперь нужно удалить строки с количеством = 0.
			мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
				тблГрузы.Удалить(ТекСтрокаГруз);
			КонецЦикла;
		КонецЕсли;
		
		// Время стоянки, указываемое в заказах, прибавляется по каждому заказу.
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя 
			Или ПредТипТочкиМаршрута <> ТекСтрока.ТипТочкиМаршрута Тогда
			ВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяСтоянки, ТекСтрока.Стоянка);
			ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
			ПредТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
		КонецЕсли;
		
		// Время в пути, время стоянки.
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			// Время стоянки, указываемое в пунктах, прибавляется для каждого пункта.
			ВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяСтоянки, ТекСтрока.СтоянкаИзПункта);
			ВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяВПути, ТекСтрока.Время);
			ПредПункт  = ТекСтрока.Пункт;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом.
		Если ТекСтрока.НомерСтроки < ТаблицаДанныеМаршрутныхЛистов.Количество()
			И ТекСтрока.МаршрутныйЛист = ТаблицаДанныеМаршрутныхЛистов[ТекСтрока.НомерСтроки].МаршрутныйЛист Тогда
			СледПункт = ТаблицаДанныеМаршрутныхЛистов[ТекСтрока.НомерСтроки].Пункт;
		Иначе
			СледПункт = Неопределено;
		КонецЕсли;
		
		Если СледПункт <> ТекСтрока.Пункт Тогда
			Если тблГрузы.Количество() = 0 Тогда
				ПробегПорожний = ПробегПорожний + ТекСтрока.Расстояние;
			Иначе
				ПробегСГрузом = ПробегСГрузом + ТекСтрока.Расстояние;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВремяОбщее = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяСтоянки, ВремяВПути); 
	ПробегОбщий = уатЗащищенныеФункцииСервер.СложитьВремя(ПробегПорожний, ПробегСГрузом);
	
	ДиаграммаПробег = ОбластьМакета.Рисунки.D1.Объект;
	ТекущаяТочка = ДиаграммаПробег.УстановитьТочку("Пробег");
	ТекущаяСерия = ДиаграммаПробег.УстановитьСерию("Порожний пробег");
	ТекущаяСерия.Текст = СтрШаблон(НСтр("ru='Порожний - %1 км'; en='Empty - %1 km'"), ПробегПорожний);
	ТекущаяСерия.Цвет = Новый Цвет(255, 212, 101);
	ДиаграммаПробег.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ПробегПорожний);
	ТекущаяСерия = ДиаграммаПробег.УстановитьСерию("Пробег с грузом");
	ТекущаяСерия.Текст = СтрШаблон(НСтр("ru='С грузом - %1 км'; en='With cargo - %1 km'"), ПробегСГрузом);
	ТекущаяСерия.Цвет = Новый Цвет(255, 138, 101);
	ДиаграммаПробег.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ПробегСГрузом);
	ДиаграммаПробег.ОбластьЗаголовка.Текст = СтрШаблон(НСтр("ru='Пробег - %1 км'; en='Distance - %1 km'"), ПробегОбщий);
	
	ДиаграммаВремя = ОбластьМакета.Рисунки.D2.Объект;
	ТекущаяТочка = ДиаграммаВремя.УстановитьТочку("Время");
	ТекущаяСерия = ДиаграммаВремя.УстановитьСерию("Время в пути");
	ТекущаяСерия.Текст = СтрШаблон(НСтр("ru='В пути - %1 ч'; en='En route - %1 h'"), Формат(ВремяВПути, "ЧДЦ=2; ЧРД=:"));
	ТекущаяСерия.Цвет = Новый Цвет(255, 212, 101);
	ДиаграммаВремя.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ВремяВПути);
	ТекущаяСерия = ДиаграммаВремя.УстановитьСерию("Время стоянки");
	ТекущаяСерия.Текст = СтрШаблон(НСтр("ru='Стоянка - %1 ч'; en='Parking - %1 h'"), Формат(ВремяСтоянки, "ЧДЦ=2; ЧРД=:"));
	ТекущаяСерия.Цвет = Новый Цвет(255, 138, 101);
	ДиаграммаВремя.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ВремяСтоянки);
	ДиаграммаВремя.ОбластьЗаголовка.Текст = СтрШаблон(НСтр("ru='Время - %1 ч'; en='Time - %1 h'"), Формат(ВремяОбщее, "ЧДЦ=2; ЧРД=:"));
	
	ОбластьМакета.Параметры.Вес = Строка(ТекущийДокумент.ВесБрутто) + " " + уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	ОбластьМакета.Параметры.Объем = Строка(ТекущийДокумент.Объем) + " " + уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	ОбластьМакета.Параметры.КоличествоУпаковок = Строка(ТекущийДокумент.КоличествоМест);
	ОбластьМакета.Параметры.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
	ОбластьМакета.Параметры.ВесТары = Строка(ТекущийДокумент.ВесТары) + " " + уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	ОбластьМакета.Параметры.Стоимость = Строка(ТекущийДокумент.СтоимостьГруза) + " " + Строка(ТекущийДокумент.ВалютаТоваров);
	
	// Прибыль
	ОбластьМакета.Параметры.ДоходыПлан = ДоходыПлан;
	ОбластьМакета.Параметры.РасходыПлан = РасходыПлан;
	ОбластьМакета.Параметры.ПрибыльПлан = ПрибыльПлан;
	ОбластьМакета.Параметры.ДоходыФакт = ДоходыФакт;
	ОбластьМакета.Параметры.РасходыФакт = РасходыФакт;
	ОбластьМакета.Параметры.ПрибыльФакт = ПрибыльФакт;
	ОбластьМакета.Параметры.ПрибыльЗаголовок = НСтр("ru='Прибыль в '; en='Income, '") + Константы.ВалютаУправленческогоУчета.Получить();
	
	ДиаграммаПрибыль = ОбластьМакета.Рисунки.D3.Объект;
	ТекущаяТочка = ДиаграммаПрибыль.УстановитьТочку("План");
	ТекущаяТочка.Текст = НСтр("ru='План'; en='Plan'");
	ТекущаяСерия = ДиаграммаПрибыль.УстановитьСерию("Доходы");
	ТекущаяСерия.Текст = НСтр("ru='Доходы'; en='Income'");
	ТекущаяСерия.Цвет = Новый Цвет(58, 89, 204);
	ДиаграммаПрибыль.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ДоходыПлан);
	ТекущаяСерия = ДиаграммаПрибыль.УстановитьСерию("Расходы");
	ТекущаяСерия.Текст = НСтр("ru='Расходы'; en='Expenses'");
	ТекущаяСерия.Цвет = Новый Цвет(237, 1, 0);
	ДиаграммаПрибыль.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, РасходыПлан);
	ТекущаяСерия = ДиаграммаПрибыль.УстановитьСерию("Прибыль");
	ТекущаяСерия.Текст = НСтр("ru='Прибыль'; en='Profits'");
	ТекущаяСерия.Цвет = Новый Цвет(255, 145, 2);
	ДиаграммаПрибыль.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ПрибыльПлан);
	ТекущаяТочка = ДиаграммаПрибыль.УстановитьТочку("Факт");
	ТекущаяТочка.Текст = НСтр("ru='Факт'; en='Fact'");
	ТекущаяСерия = ДиаграммаПрибыль.УстановитьСерию("Доходы");
	ДиаграммаПрибыль.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ДоходыФакт);
	ТекущаяСерия = ДиаграммаПрибыль.УстановитьСерию("Расходы");
	ДиаграммаПрибыль.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, РасходыФакт);
	ТекущаяСерия = ДиаграммаПрибыль.УстановитьСерию("Прибыль");
	ДиаграммаПрибыль.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ПрибыльФакт);
	
КонецПроцедуры

Функция МестоположениеПоМаршрутномуЛисту(ТаблицаДанныеМаршрутныхЛистов, ДатаМестоположения, ЗаказГрузоотправителя,
	Номенклатура, УчетПланФакта, мсвСтрокиМестоположения = Неопределено) Экспорт
	
	МестоположениеПоМЛ = "";
	мсвСтрокиМестоположения = Новый Массив;
	
	// Определяем местоположение по маршрутному листу. 
	// Для этого ищем строку МЛ, которая по фактическому времени соответствует времени построения отчета
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура", ЗаказГрузоотправителя, Номенклатура);
	Иначе
		СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя", ЗаказГрузоотправителя);
	КонецЕсли;
	СтрокаПоследнееУбытие = -1;
	СтрокаПоследнееПрибытие = -1;
	СтрокаПервоеНеПрибытие = -1;
	НайденныеСтрокиМаршрутныхЛистов = ТаблицаДанныеМаршрутныхЛистов.НайтиСтроки(СтруктураПоиска);
	Для Сч = 0 По НайденныеСтрокиМаршрутныхЛистов.Количество()-1 Цикл
		Если УчетПланФакта
			И НайденныеСтрокиМаршрутныхЛистов[Сч].Выполнен 
			И НайденныеСтрокиМаршрутныхЛистов[Сч].ПрибытиеФакт <= ДатаМестоположения
			И ДатаМестоположения <= НайденныеСтрокиМаршрутныхЛистов[Сч].УбытиеФакт Тогда
			// По данным МЛ, груз сейчас находится в данном пункте
			мсвСтрокиМестоположения = Новый Массив;
			мсвСтрокиМестоположения.Добавить(НайденныеСтрокиМаршрутныхЛистов[Сч]);
			МестоположениеПоМЛ = НайденныеСтрокиМаршрутныхЛистов[Сч].Пункт;
		ИначеЕсли НайденныеСтрокиМаршрутныхЛистов[Сч].Выполнен 
			И (Не УчетПланФакта Или НайденныеСтрокиМаршрутныхЛистов[Сч].УбытиеФакт <= ДатаМестоположения) Тогда
			// По данным МЛ, груз уехал из данного пункта
			СтрокаПоследнееУбытие = Сч;
			СтрокаПоследнееПрибытие = -1;
			СтрокаПервоеНеПрибытие = -1;
		ИначеЕсли УчетПланФакта
			И НайденныеСтрокиМаршрутныхЛистов[Сч].Выполнен 
			И НайденныеСтрокиМаршрутныхЛистов[Сч].ПрибытиеФакт <= ДатаМестоположения Тогда
			// По данным МЛ, груз приехал в данный пункт
			СтрокаПоследнееПрибытие = Сч;
		ИначеЕсли (Не НайденныеСтрокиМаршрутныхЛистов[Сч].Выполнен
			Или (УчетПланФакта И НайденныеСтрокиМаршрутныхЛистов[Сч].ПрибытиеФакт >= ДатаМестоположения))
			И СтрокаПервоеНеПрибытие = -1 Тогда
			// По данным МЛ, груз еще не прибыл в данный пункт
			СтрокаПервоеНеПрибытие = Сч;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МестоположениеПоМЛ) Тогда
		Возврат МестоположениеПоМЛ;
	КонецЕсли;
	
	Если СтрокаПоследнееУбытие >= 0 И СтрокаПервоеНеПрибытие >= 0 Тогда
		// Груз находится в пути
		мсвСтрокиМестоположения.Добавить(НайденныеСтрокиМаршрутныхЛистов[СтрокаПоследнееУбытие]);
		мсвСтрокиМестоположения.Добавить(НайденныеСтрокиМаршрутныхЛистов[СтрокаПервоеНеПрибытие]);
		МестоположениеПоМЛ = Строка(НайденныеСтрокиМаршрутныхЛистов[СтрокаПоследнееУбытие].Пункт)
			+ " - " + Строка(НайденныеСтрокиМаршрутныхЛистов[СтрокаПервоеНеПрибытие].Пункт);
	ИначеЕсли СтрокаПоследнееПрибытие >= 0 Тогда
		// Груз куда-то прибыл, и еще не уехал
		мсвСтрокиМестоположения.Добавить(НайденныеСтрокиМаршрутныхЛистов[СтрокаПоследнееПрибытие]);
		МестоположениеПоМЛ = НайденныеСтрокиМаршрутныхЛистов[СтрокаПоследнееПрибытие].Пункт;
	ИначеЕсли СтрокаПоследнееУбытие >= 0 Тогда
		// Груз откуда-то уехал и следующего пункта нет (возможно, потому что МЛ закончился)
		мсвСтрокиМестоположения.Добавить(НайденныеСтрокиМаршрутныхЛистов[СтрокаПоследнееУбытие]);
		МестоположениеПоМЛ = НайденныеСтрокиМаршрутныхЛистов[СтрокаПоследнееУбытие].Пункт;
	ИначеЕсли НайденныеСтрокиМаршрутныхЛистов.Количество() > 0 Тогда
		// Груз никуда не отправлен по МЛ
		мсвСтрокиМестоположения.Добавить(НайденныеСтрокиМаршрутныхЛистов[0]);
	КонецЕсли;

	Возврат МестоположениеПоМЛ;
	
КонецФункции

Функция ТекстЗапросаСтатусовПеревозкиПоТрекНомеру() Экспорт 
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА уатШтрихкоды.ЗаказГрузоотправителя ЕСТЬ NULL
	|			ТОГДА уатШтрихкоды.Объект
	|		ИНАЧЕ уатШтрихкоды.ЗаказГрузоотправителя
	|	КОНЕЦ КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатШтрихкоды.ЗаказГрузоотправителя) = ТИП(Документ.уатЗаказГрузоотправителя)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втЗаказы
	|ИЗ
	|	РегистрСведений.уатШтрихкоды КАК уатШтрихкоды
	|ГДЕ
	|	уатШтрихкоды.Штрихкод = &Штрихкод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК ПунктОтправления,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК ПунктПрибытия,
	|	уатЗаказГрузоотправителя.ОтправлениеС КАК ОкноОтправленияС,
	|	уатЗаказГрузоотправителя.ОтправлениеПо КАК ОкноОтправленияПо,
	|	уатЗаказГрузоотправителя.ДоставкаС КАК ОкноПрибытияС,
	|	уатЗаказГрузоотправителя.ДоставкаПо КАК ОкноПрибытияПо,
	|	уатЗаказГрузоотправителя.Номер КАК НомерЗаказа,
	|	ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ПустаяСсылка)) КАК Статус,
	|	ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто, НЕОПРЕДЕЛЕНО) КАК Груз,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	уатЗаказГрузоотправителя.Ссылка КАК ЗаказГрузоотправителя
	|ПОМЕСТИТЬ втСостоянияГрузов
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|					ИЗ
	|						втЗаказы КАК втЗаказы)) КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В
	|			(ВЫБРАТЬ
	|				втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|			ИЗ
	|				втЗаказы КАК втЗаказы)
	|	И (НЕ уатЗаказГрузоотправителя.Мультимодальный
	|			ИЛИ уатЗаказГрузоотправителя.ЭтоЭтап)
	|	И (ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|			ИЛИ уатЗаказГрузоотправителя.ДетализацияЗакрытия <> ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМаршрутныеЛисты
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя В
	|			(ВЫБРАТЬ
	|				втСостоянияГрузов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|			ИЗ
	|				втСостоянияГрузов КАК втСостоянияГрузов)
	|	И уатМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Номер КАК МаршрутныйЛистНомер,
	|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.Выполнен КАК Выполнен,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.Расстояние КАК Расстояние,
	|	ЕСТЬNULL(втСостоянияГрузов.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ПустаяСсылка)) КАК Статус,
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.Ожидание КАК ОжиданиеПлан,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСостоянияГрузов КАК втСостоянияГрузов
	|		ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = втСостоянияГрузов.ЗаказГрузоотправителя
	|			И (втСостоянияГрузов.Груз = уатМаршрутныйЛистЗаказы.Номенклатура
	|				ИЛИ втСостоянияГрузов.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|				ИЛИ втСостоянияГрузов.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				втМаршрутныеЛисты.Ссылка КАК Ссылка
	|			ИЗ
	|				втМаршрутныеЛисты КАК втМаршрутныеЛисты)
	|	И уатМаршрутныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйЛист,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыГрузов_уэ.Заказ КАК Заказ,
	|	уатСтатусыГрузов_уэ.Статус КАК Статус,
	|	уатСтатусыГрузов_уэ.Период КАК Период,
	|	уатСтатусыГрузов_уэ.ГрузовоеМесто КАК ГрузовоеМесто
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ КАК уатСтатусыГрузов_уэ
	|ГДЕ
	|	уатСтатусыГрузов_уэ.Заказ В
	|			(ВЫБРАТЬ
	|				втЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|			ИЗ
	|				втЗаказы КАК втЗаказы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Период"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

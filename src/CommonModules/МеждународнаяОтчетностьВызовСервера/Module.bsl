////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, обеспечивающие работу генератора финансовых отчетов
//  для получения финансовой отчетности
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает валюты учета международного учета
// 
// Возвращаемое значение:
//   - 
//
Функция УчетнаяВалюта() Экспорт
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Возврат Новый Структура("Функциональная, Представления", ВалютаУправленческогоУчета, ВалютаУправленческогоУчета);
	
КонецФункции

// Помещает данные переданной строки вида отчета во временное хранилище формы.
//
// Параметры:
//  ПомещаемыйОбъект - Произвольный - помещаемый объект
//  АдресХранилища - Строка - адрес временного хранилища
//  ОчиститьСсылки - Булево - Если истина тогда ссылка элемента справочника и ссылка владельца отчета будут очищены.
//                            При записи такого элемента отчета будет сформирована новая ссылка т.о. помещаемый элемент
//                            будет скопирован.
//
// Возвращаемое значение:
//   Строка   - Адрес элемента в хранилище.
//
Функция ПоместитьЭлементВХранилище(ПомещаемыйОбъект, АдресХранилища = Неопределено, ОчиститьСсылки = Ложь) Экспорт
	
	СтруктураЭлемента = ДанныеЭлементаОтчета(ПомещаемыйОбъект);
	Если ОчиститьСсылки Тогда
		СтруктураЭлемента.Ссылка = Неопределено;
		СтруктураЭлемента.Владелец = Неопределено;
		
		Операнды = Новый Массив;
		Для Каждого СтрокаОперанда Из СтруктураЭлемента.ОперандыФормулы Цикл
			Если ТипЗнч(СтрокаОперанда.Операнд) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
				Операнды.Добавить(СтрокаОперанда.Операнд);
			КонецЕсли;
		КонецЦикла;
		Если Операнды.Количество() = 0 Тогда
			ЗначенияРеквизитов = Неопределено;
		Иначе 
			СвойстваЭлементов  = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
			ПолучаемыеЗначения = "";
			Для каждого КлючИЗначение Из СвойстваЭлементов Цикл
				ПолучаемыеЗначения = ПолучаемыеЗначения + ?(ПолучаемыеЗначения = "", "", ", ") + КлючИЗначение.Ключ;
			КонецЦикла; 
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Операнды, ПолучаемыеЗначения);
		КонецЕсли;
		
		Для Каждого СтрокаОперанда Из СтруктураЭлемента.ОперандыФормулы Цикл
			Данные = ДанныеЭлементаОтчета(СтрокаОперанда.Операнд, ЗначенияРеквизитов);
			Данные.Ссылка = Неопределено;
			Данные.Владелец = Неопределено;
			СтрокаОперанда.АдресСтруктурыЭлемента = ПоместитьВоВременноеХранилище(Данные, АдресХранилища);
			СтрокаОперанда.Операнд = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураЭлемента, АдресХранилища);
	
КонецФункции

// Возвращает данные элемента отчета для помещения во временное хранилище
//
// Параметры:
//  ЭлементОтчета - СправочникОбъект.ЭлементыФинансовыхОтчетов, СправочникСсылка.ЭлементыФинансовыхОтчетов, 
//                - Структура - Элемент отчета для получения данных.
//
//  ЗначенияРеквизитов - Неопределено,
//                     - Соответствие - Закешированное соответствие значений реквизитов элементов финансовых отчетов
//                       * Ключ - СправочникСсылка.ЭлементыФинансовыхОтчетов
//                       * Значение - Структура, см. описание функции ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета.
// 
// Возвращаемое значение:
//   Структура   - заполненная структура реквизитов элемента отчета.
//
Функция ДанныеЭлементаОтчета(ЭлементОтчета, ЗначенияРеквизитов = Неопределено) Экспорт
	
	СтруктураЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
	Если ТипЗнч(ЭлементОтчета) = Тип("СправочникОбъект.ЭлементыФинансовыхОтчетов") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементОтчета);
		КопироватьТаблицыЭлемента(ЭлементОтчета, СтруктураЭлемента);
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Если ЗначениеЗаполнено(ЭлементОтчета) Тогда
			НайденноеЗначениеКеша = Неопределено;
			Если ЗначенияРеквизитов <> Неопределено Тогда
				НайденноеЗначениеКеша = ЗначенияРеквизитов.Получить(ЭлементОтчета);
			КонецЕсли;
		КонецЕсли;
		Если НайденноеЗначениеКеша = Неопределено Тогда
			СтруктураЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОтчета, СтруктураЭлемента);
		Иначе
			СтруктураЭлемента = НайденноеЗначениеКеша;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураЭлемента.Ссылка) Тогда
			КопироватьТаблицыЭлемента(СтруктураЭлемента, СтруктураЭлемента);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементОтчета);
		//Для Каждого КлючИЗначение Из ЭлементОтчета Цикл
		//	Если СтрНайти(КлючИЗначение.Ключ, "ДополнительныйРеквизит_") Тогда
		//		ИмяДополнительногоРеквизита = СтрЗаменить(КлючИЗначение.Ключ, "ДополнительныйРеквизит_", "");
		//		УстановитьЗначениеДополнительногоРеквизита(СтруктураЭлемента, ИмяДополнительногоРеквизита, КлючИЗначение.Значение)
		//	КонецЕсли;
		//КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определен тип помещаемого объекта';
								|en = 'Placed object type is not determined'");
	КонецЕсли;
	
	СтруктураЭлемента.Вставить("ЭтоСвязанный", ЗначениеЗаполнено(СтруктураЭлемента.СвязанныйЭлемент));
	
	Если ТипЗнч(СтруктураЭлемента.ОперандыФормулы) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ОперандыФормулы = Новый ТаблицаЗначений;
		СтруктураЭлемента.ОперандыФормулы.Колонки.Добавить("Идентификатор");
		СтруктураЭлемента.ОперандыФормулы.Колонки.Добавить("Операнд");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.РеквизитыВидаЭлемента) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.РеквизитыВидаЭлемента = Новый ТаблицаЗначений;
		СтруктураЭлемента.РеквизитыВидаЭлемента.Колонки.Добавить("Реквизит");
		СтруктураЭлемента.РеквизитыВидаЭлемента.Колонки.Добавить("Значение");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ЭлементыТаблицы) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ЭлементыТаблицы = Новый ТаблицаЗначений;
		СтруктураЭлемента.ЭлементыТаблицы.Колонки.Добавить("Строка");
		СтруктураЭлемента.ЭлементыТаблицы.Колонки.Добавить("Колонка");
		СтруктураЭлемента.ЭлементыТаблицы.Колонки.Добавить("Элемент");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ДополнительныеПоля) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ДополнительныеПоля = Новый ТаблицаЗначений;
		СтруктураЭлемента.ДополнительныеПоля.Колонки.Добавить("Реквизит");
		СтруктураЭлемента.ДополнительныеПоля.Колонки.Добавить("Наименование");
		СтруктураЭлемента.ДополнительныеПоля.Колонки.Добавить("ВыводитьЗаголовок");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ЭлементыОформления) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ЭлементыОформления = Новый ТаблицаЗначений;
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("Оформление");
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("Условие");
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("ТипОформляемойОбласти");
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("КлючЭлементаОформления");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ОформляемыеСтроки) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ОформляемыеСтроки = Новый ТаблицаЗначений;
		СтруктураЭлемента.ОформляемыеСтроки.Колонки.Добавить("ЭлементОтчета");
		СтруктураЭлемента.ОформляемыеСтроки.Колонки.Добавить("КлючЭлементаОформления");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ОформляемыеКолонки) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ОформляемыеКолонки = Новый ТаблицаЗначений;
		СтруктураЭлемента.ОформляемыеКолонки.Колонки.Добавить("ЭлементОтчета");
		СтруктураЭлемента.ОформляемыеКолонки.Колонки.Добавить("КлючЭлементаОформления");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.РасшифровкаПолейОтбораЭО) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО = Новый ТаблицаЗначений;
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("КлючЭлементаОформления");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("ЭлементОтчета");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяПоляОтбора");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяРесурса");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ИсточникиЗначений) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ИсточникиЗначений = Новый ТаблицаЗначений;
		СтруктураЭлемента.ИсточникиЗначений.Колонки.Добавить("Источник");
		СтруктураЭлемента.ИсточникиЗначений.Колонки.Добавить("ДобавляемыеЗначенияДокумента");
	КонецЕсли;
	
	Если СтруктураЭлемента.ОперандыФормулы.Колонки.Найти("АдресСтруктурыЭлемента") = Неопределено Тогда
		СтруктураЭлемента.ОперандыФормулы.Колонки.Добавить("АдресСтруктурыЭлемента");
	КонецЕсли;
	
	Возврат СтруктураЭлемента;
	
КонецФункции

#Область РаботаСФормулами

// Функция добавляет сохраненные операнды в таблицу операндов
//
// Параметры:
//  Операнд							 - 	 - 
//  ИдентификаторГлавногоХранилища	 - 	 - 
// 
// Возвращаемое значение:
//  Массив - массив добавленных строк таблицы операндов
//
Функция ДобавитьСохраненныйОперанд(Операнд, ИдентификаторГлавногоХранилища) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьВызовСервера;
	АдресСтруктурыЭлемента = ПоместитьЭлементВХранилище(
								Операнд.СвязанныйЭлемент,
								ИдентификаторГлавногоХранилища);
	ДанныеОперанда = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
	НовыеОперанды = Новый Массив;
	Если ДанныеОперанда.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
		
		НовыйОперанд = ДобавитьОперанд(Операнд, АдресСтруктурыЭлемента);
		НовыйОперанд.СчетПоказательИзмерение = Операнд.СчетПланаСчетов;
		НовыйОперанд.Код = ФинОтчеты.ЗначениеРеквизитаОбъекта(НовыйОперанд.СчетПоказательИзмерение,"Порядок");
		НовыеОперанды.Добавить(НовыйОперанд);
		
	ИначеЕсли ДанныеОперанда.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		
		НовыйОперанд = ДобавитьОперанд(Операнд, АдресСтруктурыЭлемента);
		НовыйОперанд.СчетПоказательИзмерение = Операнд.НемонетарныйПоказатель;
		НовыйОперанд.Код = ФинОтчеты.ЗначениеРеквизитаОбъекта(НовыйОперанд.СчетПоказательИзмерение,"Код");
		НовыеОперанды.Добавить(НовыйОперанд);
		
	ИначеЕсли ДанныеОперанда.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
		Формула = ФинОтчеты.ЗначениеДополнительногоРеквизита(ДанныеОперанда,"Формула");
		Для Каждого ОперандФормулы Из ДанныеОперанда.ОперандыФормулы Цикл
			
			АдресОперанда = ПоместитьЭлементВХранилище(
								ОперандФормулы.Операнд,
								ИдентификаторГлавногоХранилища);
								
			Данные = ПолучитьИзВременногоХранилища(АдресОперанда);
			НовыйОперанд = ДобавитьОперанд(Данные, АдресОперанда);
			НовыйОперанд.Идентификатор = ОперандФормулы.Идентификатор;
			Если Данные.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
				НовыйОперанд.СчетПоказательИзмерение = ФинОтчеты.ЗначениеДополнительногоРеквизита(Данные,"СчетПланаСчетов");
				НовыйОперанд.СчетПланаСчетов = НовыйОперанд.СчетПоказательИзмерение;
				НовыйОперанд.ТипИтога = ФинОтчеты.ЗначениеДополнительногоРеквизита(Данные,"ТипИтога");
				НовыйОперанд.НачальноеСальдо = ФинОтчеты.ЗначениеДополнительногоРеквизита(Данные,"НачальноеСальдо");
			ИначеЕсли Данные.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
				НовыйОперанд.СчетПоказательИзмерение = ФинОтчеты.ЗначениеДополнительногоРеквизита(Данные,"НемонетарныйПоказатель");
			КонецЕсли;
			
			НовыеОперанды.Добавить(НовыйОперанд);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("Формула,НовыеОперанды",Формула,НовыеОперанды);
	
КонецФункции

// Проверяет формулу фин. отчетности
//
// Параметры:
//  Формула		 - 		 - Формула фин. отчетности
//  Операнды	 - 		 - Операнды формулы
//  Отказ		 - 		 - Флаг отказа. Истина если получена ошибка
//  Поле		 - Строка	 - Имя элемента формы
//  ПутьКДанным	 - Строка	 - Путь к данным элемента формы
//
Процедура ПроверитьФормулу(Формула, Операнды, Отказ, Поле = "", ПутьКДанным = "") Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	ЗначенияОперандов = ПустаяТаблицаЭлементаПоказателя();
	
	Если ПустаяСтрока(Формула) Тогда
		ТекстНСТР = НСтр("en='Do not specify text of formula.';ru='Не указан текст формулы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, , Поле, ПутьКДанным,);
	КонецЕсли;
	
	ПериодВыборки = МеждународнаяОтчетностьСервер.ПериодОтчета(Дата('00010101'), Дата('00010101'));
	ИнтервалыОтчета = Справочники.ЭлементыФинансовыхОтчетов.ИнтервалыОтчета(ПериодВыборки);
	
	СхемаКД = Справочники.ЭлементыФинансовыхОтчетов.ПолучитьМакет("ПроизводныйПоказатель");
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	ПсТаб = Символы.ПС + Символы.Таб;
	НеИспользуемыеОперанды = "";
	Монетарный = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель;
	Для Каждого Операнд Из Операнды Цикл
		НовоеПолеНабора = ФинОтчеты.НовоеПолеНабора(СхемаКД.НаборыДанных.ЗначенияОперандов, Операнд.Идентификатор,,,ТипЧисло);
		ЗначенияОперандов.Колонки.Добавить(Операнд.Идентификатор, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2)));
		Идентификатор = "["+Операнд.Идентификатор+"]";
		Если Найти(Формула, Идентификатор) = 0 Тогда
			НеИспользуемыеОперанды = НеИспользуемыеОперанды + Идентификатор + " " + Операнд.НаименованиеДляПечати + ПсТаб;
		КонецЕсли;
		Если Операнд.ВидЭлемента = Монетарный И НЕ ЗначениеЗаполнено(Операнд.СчетПланаСЧетов) Тогда
			ТекстНСТР = НСтр("en='In operand settings [%1] %2"
"not specified account of chart of accounts.';ru='В настройках операнда [%1] %2"
"не указан счет плана счетов.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Операнд.Идентификатор, Операнд.НаименованиеДляПечати);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, , Поле, ПутьКДанным,);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(НеИспользуемыеОперанды) Тогда
		ТекстНСТР  = НСтр("en='Found not used operands:';ru='Найдены не используемые операнды:'") + ПсТаб + НеИспользуемыеОперанды;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР , , Поле, ПутьКДанным,);
	КонецЕсли;
	ПолеЗначения = СхемаКД.ВычисляемыеПоля[0];
	ПолеЗначения.Выражение = ?(ЗначениеЗаполнено(Формула),Формула,"0");
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	Настройки = Компоновщик.ПолучитьНастройки();
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЗначенияОперандов", ЗначенияОперандов);
	ВнешниеНаборы.Вставить("ИнтервалыОтчета", ИнтервалыОтчета);
	
	Попытка
		ДанныеПоказателя = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаКД, Настройки, ВнешниеНаборы);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОписанияОшибки = Инфо.Причина.Причина.Описание;
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОписанияОшибки,
					,
					Поле,
					ПутьКДанным,);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиЭлементовОтчета

// Возвращает признак того, что есть ссылки на элемент фин. отчета
//
// Параметры:
//  ЭлементОтчета	 - 	 - Элемент фин. отчета
//  КоличествоСсылко - 	 - Количество ссылок
// 
// Возвращаемое значение:
//  Булево - Признак того, что есть ссылки
//
Функция ЕстьСсылки(ЭлементОтчета, КоличествоСсылко = 0) Экспорт

	Возврат Ложь;
	
	//ЕстьСсылки = Ложь;
	//Запрос = Новый Запрос;
	//МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ТаблицаИндексовКартинок();
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Запрос.Текст = МеждународнаяОтчетностьСервер.ТекстЗапросаСсылокНаЭлементОтчета();
	//Запрос.УстановитьПараметр("ЭлементОтчета", ЭлементОтчета);
	//Запрос.УстановитьПараметр("Владелец", ЭлементОтчета.Владелец);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//КоличествоСсылко = Выборка.Количество();
	//Если Выборка.Следующий() Тогда
	//	ЕстьСсылки = Истина;
	//КонецЕсли;
	//Возврат ЕстьСсылки;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРасшифровкиОтчета

// Возвращает параметры расшифровки отчета
//
// Параметры:
//  Расшифровка		 - 	 - Расшифровка отчета
//  ПараметрыОтчета	 - 	 - Параметры отчета
// 
// Возвращаемое значение:
//  Структура - Параметры расшифровки
//
Функция ПараметрыРасшифровкиОтчета(Расшифровка, ПараметрыОтчета) Экспорт
	
	ПараметрыРасшифровки = НовыеПараметрыРасшифровкиОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ПараметрыОтчета);
	ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки.Отбор, ПараметрыОтчета);
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ПараметрыРасшифровки.Показатель = Расшифровка.Показатель;
		Если Расшифровка.Свойство("Субконто1") Тогда
			ПараметрыРасшифровки.Отбор.Вставить("Субконто1", Расшифровка.Субконто1);
			ПараметрыРасшифровки.ВидСубконто = Расшифровка.ВидСубконто;
		КонецЕсли;
	Иначе
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыОтчета.ДанныеРасшифровки);
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляРасшифровки = ЭлементРасшифровки.ПолучитьПоля();
			Для Каждого Поле Из ПоляРасшифровки Цикл
				Если ПараметрыРасшифровки.Свойство(Поле.Поле) И ЗначениеЗаполнено(Поле.Значение) Тогда
					ПараметрыРасшифровки[Поле.Поле] = Поле.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Родители = ЭлементРасшифровки.ПолучитьРодителей();
		Для Каждого Родитель Из Родители Цикл
			Если ТипЗнч(Родитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
				ПоляРодителя = Родитель.ПолучитьПоля();
				Для Каждого Поле Из ПоляРодителя Цикл
					Если Найти(Поле.Поле,"Группа") > 0 Тогда
						Возврат Неопределено;
					КонецЕсли;
					Если Поле.Поле = "Субконто1" Тогда
						ПараметрыРасшифровки.Отбор.Вставить("Субконто1", Поле.Значение);
					КонецЕсли;
				КонецЦикла;// по полям родителя
			КонецЕсли;// родитель содержит подчиненные поля
		КонецЦикла;// по родителям поля расшифровки
	КонецЕсли;
	
	Если ПараметрыРасшифровки.Показатель = Неопределено Тогда
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ПараметрыРасшифровки.НачалоПериода;
	ПериодОтчета.ДатаОкончания = ПараметрыРасшифровки.КонецПериода;
	ПараметрыРасшифровки.Удалить("НачалоПериода");
	ПараметрыРасшифровки.Удалить("КонецПериода");
	ПараметрыРасшифровки.Вставить("ПериодОтчета", ПериодОтчета);
	
	РеквизитыПоказателя = РеквизитыПоказателя(ПараметрыРасшифровки.Показатель);
	РеквизитыПоказателя.Вставить("Значение", ПараметрыОтчета.Значение);
	Если ПараметрыРасшифровки.Отбор.Свойство("Субконто1") Тогда
		РеквизитыПоказателя.Вставить("Субконто1", ПараметрыРасшифровки.Отбор.Субконто1);
		РеквизитыПоказателя.Вставить("ВидСубконто", ПараметрыРасшифровки.ВидСубконто);
	КонецЕсли;
	ПараметрыРасшифровки.Показатель = РеквизитыПоказателя;
	ПараметрыРасшифровки.Вставить("ПустаяСсылка", Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка());
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Выполняет настройки отчета расшифровки
//
// Параметры:
//  Параметры	 - 	 - Параметры настроек
// 
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных - Настройка отчета
//
Функция НастроитьОтчетРасшифровки(Знач Параметры) Экспорт
	
	// Настройки вызывающего отчета
	НастройкиОтчета = Параметры.КомпоновщикНастроек.ПолучитьНастройки();
	ПользовательскиеНастройкиОтчета = Параметры.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	// Настройки отчета расшифровки
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИмяСхемы = Метаданные.Отчеты[Параметры.ОтчетРасшифровки].ОсновнаяСхемаКомпоновкиДанных.Имя;
	СхемаРасшифровки = Отчеты[Параметры.ОтчетРасшифровки].ПолучитьМакет(ИмяСхемы);
	НастройкиВарианта = СхемаРасшифровки.ВариантыНастроек[Параметры.КлючВарианта].Настройки;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	ПользовательскийОтбор = КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскийОтбор = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	// Перенесем параметры вызывающего отчета
	Для Каждого Элемент Из ПользовательскиеНастройкиОтчета.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			КлючПараметра =  Строка(Элемент.Параметр);
			ЗначениеПараметра = Элемент.Значение;
			
			ЗначениеПараметраНастроек = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройки, КлючПараметра);
			Если НЕ ЗначениеПараметраНастроек = Неопределено Тогда
				ТипЗначенияПараметрыНастроек = ТипЗнч(ЗначениеПараметраНастроек.Значение);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, КлючПараметра, ЗначениеПараметра);
			КонецЕсли;
			
		КонецЕсли;// это параметр отчета
	КонецЦикла;// по пользовательским настройкам вызывающего отчета
	
	// Перенесем отборы вызывающего отчета
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(
			НастройкиОтчета.Отбор,
			ПользовательскийОтбор,
			Истина,
			Параметры.ПоляРасшифровки);
	
	// Добавим отборы по полям расшифровки
	Для Каждого Поле Из Параметры.ПоляРасшифровки Цикл
		НовыйОтбор = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле.Ключ);
		НовыйОтбор.ПравоеЗначение = Поле.Значение;
	КонецЦикла;
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииРасшифровкиОтчета

Функция РеквизитыПоказателя(Знач Показатель)
	
	ДанныеЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
	Реквизиты = "СчетПланаСчетов,НемонетарныйПоказатель,Формула";
	Если ЗначениеЗаполнено(Показатель.СвязанныйЭлемент) Тогда
		Показатель = Показатель.СвязанныйЭлемент;
	КонецЕсли;
	
	ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(Показатель, Реквизиты);
	ЗаполнитьЗначенияСвойств(ДанныеЭлемента, Показатель,,"РеквизитыВидаЭлемента,ОперандыФормулы,ЭлементыТаблицы");
	Для Каждого Реквизит Из ДопРеквизиты Цикл
		ДанныеЭлемента.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	Возврат ДанныеЭлемента;
	
КонецФункции

Функция НовыеПараметрыРасшифровкиОтчета()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОтчета");
	Результат.Вставить("КомплектОтчетности");
	Результат.Вставить("Показатель");
	Результат.Вставить("НачалоПериода");
	Результат.Вставить("КонецПериода");
	Результат.Вставить("Ресурс");
	Результат.Вставить("Значение");
	Результат.Вставить("ВидСубконто");
	
	Отбор = Новый Структура("Организация,Подразделение");
	Результат.Вставить("Отбор", Отбор);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПустаяТаблицаЭлементаПоказателя()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.УдалитьЭлементыФинОтчетов"));
	Результат.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	Результат.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	Результат.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2)));
	Возврат Результат;
	
КонецФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ДобавитьОперанд(ДанныеОперанда, АдресСтруктурыЭлемента)
	
	НовыйОперанд = МеждународнаяОтчетностьКлиентСервер.НовыеДанныеОперанда();
	ЗаполнитьЗначенияСвойств(НовыйОперанд, ДанныеОперанда,,"СвязанныйЭлемент");
	НовыйОперанд.АдресСтруктурыЭлемента = АдресСтруктурыЭлемента;
	НовыйОперанд.ЭтоСвязанный = Ложь;
	НовыйОперанд.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ДанныеОперанда.ВидЭлемента);
	
	Возврат НовыйОперанд;
	
КонецФункции

Процедура КопироватьТаблицыЭлемента(Источник, Приемник)
	
	Приемник.Вставить("ОперандыФормулы",			Источник.ОперандыФормулы.Выгрузить());
	Приемник.Вставить("РеквизитыВидаЭлемента",		Источник.РеквизитыВидаЭлемента.Выгрузить());
	Приемник.Вставить("ЭлементыТаблицы",			Источник.ЭлементыТаблицы.Выгрузить());
	Приемник.Вставить("ДополнительныеПоля",			Источник.ДополнительныеПоля.Выгрузить());
	Приемник.Вставить("ЭлементыОформления",			Источник.ЭлементыОформления.Выгрузить());
	Приемник.Вставить("ОформляемыеСтроки",			Источник.ОформляемыеСтроки.Выгрузить());
	Приемник.Вставить("ОформляемыеКолонки",			Источник.ОформляемыеКолонки.Выгрузить());
	Приемник.Вставить("РасшифровкаПолейОтбораЭО",	Источник.РасшифровкаПолейОтбораЭО.Выгрузить());
	Приемник.Вставить("ИсточникиЗначений",			Источник.ИсточникиЗначений.Выгрузить());
	ПереопределитьТипКолонокТаблицКэша(Приемник);
	
КонецПроцедуры

Процедура ПереопределитьТипКолонокТаблицКэша(СтруктураЭлемента)
	
	СтруктураТаблиц = Новый Структура("ОперандыФормулы, РеквизитыВидаЭлемента, ЭлементыТаблицы, 
										|ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений");
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Таблица = СтруктураЭлемента[КлючИЗначение.Ключ];
		СтруктураЭлемента[КлючИЗначение.Ключ] = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Таблица.Колонки Цикл
			СтруктураЭлемента[КлючИЗначение.Ключ].Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, СтруктураЭлемента[КлючИЗначение.Ключ]);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Работа с расширениями конфигурации.
// 
// Содержит код, используемый в варианте поставке ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура при записи объекта из формы.
//
// Параметры
//  Объект - Записываемый объект
//
Процедура ПСМ_УчетныеЗаписиСистемыМониторингаПриЗаписиНаСервере(Объект) Экспорт
	Заглушка = Истина;
Конецпроцедуры

#Область ПроцедурыИФункцииДляРаботыПСМ

// Процедура заполняет предопределенные данные внешней системы.
//
Процедура ПСМ_ЗаполнитьПредопределенныеДанные() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивПСМ = Новый Массив();
	ПСМ_ЗаполнитьМассивПСМ(МассивПСМ);
	Если МассивПСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеПС", МассивПСМ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатВнешниеСистемы.НаименованиеПС КАК НаименованиеПС,
	               |	уатВнешниеСистемы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатВнешниеСистемы КАК уатВнешниеСистемы
	               |ГДЕ
	               |	уатВнешниеСистемы.НаименованиеПС В(&НаименованиеПС)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НаименованиеПС";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСистема = МассивПСМ.Найти(Выборка.НаименованиеПС);
		Если ТекСистема <> Неопределено Тогда
			МассивПСМ.Удалить(ТекСистема);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекСистема Из МассивПСМ Цикл
		НоваяВнешняяСистема = Справочники.уатВнешниеСистемы.СоздатьЭлемент();
		НоваяВнешняяСистема.Наименование		 = ТекСистема;
		НоваяВнешняяСистема.НаименованиеПС		 = ТекСистема;
		НоваяВнешняяСистема.ТипВнешнейСистемы	 = Перечисления.уатТипыВнешнихСистем.СистемаМониторинга;
		НоваяВнешняяСистема.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура заполняет массив подключаемых систем мониторинга.
//
// Параметры
//  МассивРасширений - Массив- Массив содержащий все наименования расширений.
//
Процедура ПСМ_ЗаполнитьМассивПСМ(МассивПСМ) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

// Процедура заполняет массив подключаемых систем мониторинга.
//
// Параметры
//  МассивРасширений - Массив- Массив содержащий все наименования расширений.
//
Процедура ПСМ_ЗаполнитьМассивВнешихСистем(МассивПСМ) Экспорт
	
	Если ТипЗнч(МассивПСМ) <> Тип("Массив") Тогда
		МассивПСМ = Новый Массив();
	КонецЕсли;

	ПСМ_ЗаполнитьМассивПСМ(МассивПСМ);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеПС", МассивПСМ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатВнешниеСистемы.НаименованиеПС КАК НаименованиеПС,
	               |	уатВнешниеСистемы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатВнешниеСистемы КАК уатВнешниеСистемы
	               |ГДЕ
	               |	уатВнешниеСистемы.НаименованиеПС В(&НаименованиеПС)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НаименованиеПС";
	Выборка = Запрос.Выполнить().Выбрать();
	МассивПСМ.Очистить();
	Пока Выборка.Следующий() Цикл
		МассивПСМ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет подключены ли ПСМ.
//
// Параметры
//  МассивРасширений - Массив- Массив содержащий все наименования расширений.
//
Функция ПСМ_ПроверитьПодключение(МассивПСМ = Неопределено) Экспорт
	
	Если ТипЗнч(МассивПСМ) <> Тип("Массив") Тогда
		МассивПСМ = Новый Массив();
	КонецЕсли;

	ПСМ_ЗаполнитьМассивПСМ(МассивПСМ);
	Возврат МассивПСМ.Количество();
	
КонецФункции

Процедура ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия, СистемаМониторинга, УчетнаяЗапись = Неопределено, ТекстОшибки = "", ДопПараметры = Неопределено) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаДанныхПСМ.
//
Процедура ПСМ_ЗагрузкаДанных() Экспорт
	
	МассивПСМ = Новый Массив();
	ПСМ_ЗаполнитьМассивПСМ(МассивПСМ);
	
	Для Каждого ТекСтрока Из МассивПСМ Цикл
		// Фиксация операции для статистики
		ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПолнаяЗагрузка." + ТекСтрока;
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	КонецЦикла;

	Заглушка = Истина;
	
КонецПроцедуры

// Функция получает описание каждого ТС из подключаемой системы мониторинга.
//
// Параметры
//  ТабДанных   - таблица значений, содержащая все имеющиеся данные по каждому ТС
//  ТекстОшибки - строка, текст ошибки
//
Процедура ПСМ_ПолучитьДанныеВсехТС(ТабДанных, ТекстОшибки, УчетнаяЗапись = Неопределено) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

// Процедура заполняет предопределенный элемент справочника "Учетные записи системы мониторинга"
// для подключаемой системы мониторинга.
//
Процедура ПСМ_ЗаполнитьУчетнуюЗаписьСистемыМониторинга(НаименованиеПСМ) Экспорт
	
	СпрОбъект = Справочники.уатУчетныеЗаписиСистемыМониторинга.ПСМ.ПолучитьОбъект();
	СпрОбъект.Наименование			 = НаименованиеПСМ;
	СпрОбъект.СистемаМониторинга	 = НаименованиеПСМ;
	СпрОбъект.Записать();
	
КонецПроцедуры

Функция ПСМ_НайтиВнешнююСистемуПоСтроке(НаименованиеПС = "") Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НаименованиеПС", НаименованиеПС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатВнешниеСистемы.НаименованиеПС КАК НаименованиеПС,
	               |	уатВнешниеСистемы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатВнешниеСистемы КАК уатВнешниеСистемы
	               |ГДЕ
	               |	уатВнешниеСистемы.НаименованиеПС = &НаименованиеПС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НаименованиеПС";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

	НоваяВнешняяСистема = Справочники.уатВнешниеСистемы.СоздатьЭлемент();
	НоваяВнешняяСистема.Наименование		 = НаименованиеПС;
	НоваяВнешняяСистема.НаименованиеПС		 = НаименованиеПС;
	НоваяВнешняяСистема.ТипВнешнейСистемы	 = Перечисления.уатТипыВнешнихСистем.СистемаМониторинга;
	НоваяВнешняяСистема.Записать();
	
	Возврат НоваяВнешняяСистема.Ссылка;
	
КонецФункции

// Функция выполняет загрузку местоположения ТС в регистр сведений уатТекущееМестоположениеТСПоМониторингу.
//
// Параметры
//  ДатаС       - дата начала выгрузки
//  ДатаПо      - дата окончания выгрузки
//  массивТС    - массив ТС для выгрузки по ним данных
//  ТекстОшибки - текст описания ошибки (в случае возникновения)
//
// Возвращаемое значение:
//   Число   - код возврата. Если 0 - ошибок нет, если 1 - ошибка.
//
Функция ПСМ_ЗагрузитьТекущееМестоположениеТС(ДатаС, ДатаПо, массивТС, ТекстОшибки, УчетнаяЗаписьСистемыМониторинга = Неопределено) Экспорт
	
	Возврат 0;
	
КонецФункции

// Получает сводные данные мониторинга в интервале из ПСМ
//
// Параметры:
//  ТаблицаДанных - Колонки - ТС, Пробег, ВремяРаботыДвигателя, ЗначениеОдометра, 
//								РасходТоплива, НачальныйУровеньТоплива и КонечныйУровеньТоплива
//  ДатаНачала - дата, с которой необходимо получить данные;
//  ДатаОкончания - дата, до которой необходимо получить данные;
//  ПараметрыПроцедуры - Структура - см. функцию ПолучитьНастройкиМониторинга;
//  СтруктураПараметровУчетнойЗаписи - Структура - см. функцию ПолучитьСтруктуруПараметровДляРаботыССистемойМониторинга;
//  ЕстьОшибки - Булево.
//
Процедура ПСМ_ПолучитьСводныеДанныеМониторинга(ТаблицаДанных, ДатаНачала, ДатаОкончания, ПараметрыПроцедуры, СтруктураПараметровУчетнойЗаписи, ЕстьОшибки) Экспорт
	
	ИспользуемаяСистема = СтруктураПараметровУчетнойЗаписи.СистемаМониторинга;
	Если ТипЗнч(ИспользуемаяСистема) = Тип("СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга") Тогда
		ИспользуемаяСистема = ИспользуемаяСистема.СистемаМониторинга.НаименованиеПС;
		Если ЗначениеЗаполнено(ИспользуемаяСистема) Тогда
			ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист." + ИспользуемаяСистема;
			ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
		КонецЕсли;
	КонецЕсли;

	Заглушка = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать:
//  уатРаботаСРасширениями.ПСМ_ПолучитьСводныеДанныеМониторинга.
//
Процедура ПСМ_РассчитатьСпидометрПоGPS(Результат, ДатаС, ДатаПо, ТС, ТекстОшибки,СтруктураДопПараметров = Неопределено) Экспорт
	
	ИспользуемаяСистема = СтруктураДопПараметров.ПутевойЛист.ТранспортноеСредство.УчетнаяЗаписьСистемыМониторинга;
	Если ТипЗнч(ИспользуемаяСистема) = Тип("СправочникСсылка.уатУчетныеЗаписиСистемыМониторинга") Тогда
		ИспользуемаяСистема = ИспользуемаяСистема.СистемаМониторинга.НаименованиеПС;
		Если ЗначениеЗаполнено(ИспользуемаяСистема) Тогда
			ИмяКлючевойОперации = "уатОперации.ЗагрузкаДанныхИзМониторинга.ПутевойЛист." + ИспользуемаяСистема;
			ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
		КонецЕсли;
	КонецЕсли;

	Заглушка = Истина;
	
КонецПроцедуры

// Устарела. Следует использовать:
//  уатРаботаСРасширениями.ПСМ_ПолучитьСводныеДанныеМониторинга.
//
Процедура ПСМ_ЗаполнитьГСМПоGPS(Результат, ДатаС, ДатаПо, ТС, ТекстОшибки,СтруктураДопПараметров = Неопределено) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// Процедуры и функции подсистемы Журналы транспортных документов.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает ссылки на созданные документы "Журнал контроля ТС"
//
// Параметры:
//  ПутевойЛист	 - ДокументСсылка.уатПутевойЛист - Путевой лист
// 
// Возвращаемое значение:
//  Структура - каждый элемент структуры содержит ссылку на созданный документ
//		или Неопределено, если документ не создан
//
Функция СозданныеДокументыКонтроляТСПоПЛ(ПутевойЛист, ТекДокумент = Неопределено) Экспорт
	Рез = Новый Структура("Предрейсовый, Послерейсовый");
	
	Если ПутевойЛист.Пустая() Тогда
		Возврат Рез;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Ссылка КАК Ссылка,
	|	""Предрейсовый"" КАК ВидКонтроля
	|ИЗ
	|	Документ.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС КАК уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС
	|ГДЕ
	|	уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Предрейсовый)
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Проведен
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Ссылка <> &ТекДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Ссылка,
	|	""Послерейсовый""
	|ИЗ
	|	Документ.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС КАК уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС
	|ГДЕ
	|	уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Послерейсовый)
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Проведен
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Ссылка <> &ТекДокумент");
	
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Рез.Вставить(Выборка.ВидКонтроля, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Рез;	
КонецФункции

// Функция получает ссылки на созданные документы "Журнал медоосмотра"
//
// Параметры:
//  ПутевойЛист	 - ДокументСсылка.уатПутевойЛист - Путевой лист
// 
// Возвращаемое значение:
//  Структура - каждый элемент структуры содержит ссылку на созданный документ
//		или Неопределено, если документ не создан
//
Функция СозданныеДокументыМедосмотраПоПЛ(ПутевойЛист, ТекДокумент = Неопределено) Экспорт
	Рез = Новый Структура("Предрейсовый1, Предрейсовый2, Послерейсовый1, Послерейсовый2");
	
	Если ПутевойЛист.Пустая() Тогда
		Возврат Рез;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналМедицинскогоОсмотраВодителей.Ссылка КАК Ссылка,
	|	""Предрейсовый1"" КАК ВидКонтроля
	|ИЗ
	|	Документ.уатЖурналМедицинскогоОсмотраВодителей КАК уатЖурналМедицинскогоОсмотраВодителей
	|ГДЕ
	|	уатЖурналМедицинскогоОсмотраВодителей.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналМедицинскогоОсмотраВодителей.Водитель = &Водитель1
	|	И уатЖурналМедицинскогоОсмотраВодителей.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Предрейсовый)
	|	И уатЖурналМедицинскогоОсмотраВодителей.Проведен
	|	И уатЖурналМедицинскогоОсмотраВодителей.Ссылка <> &ТекДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналМедицинскогоОсмотраВодителей.Ссылка,
	|	""Послерейсовый1""
	|ИЗ
	|	Документ.уатЖурналМедицинскогоОсмотраВодителей КАК уатЖурналМедицинскогоОсмотраВодителей
	|ГДЕ
	|	уатЖурналМедицинскогоОсмотраВодителей.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналМедицинскогоОсмотраВодителей.Водитель = &Водитель1
	|	И уатЖурналМедицинскогоОсмотраВодителей.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Послерейсовый)
	|	И уатЖурналМедицинскогоОсмотраВодителей.Проведен
	|	И уатЖурналМедицинскогоОсмотраВодителей.Ссылка <> &ТекДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналМедицинскогоОсмотраВодителей.Ссылка,
	|	""Предрейсовый2""
	|ИЗ
	|	Документ.уатЖурналМедицинскогоОсмотраВодителей КАК уатЖурналМедицинскогоОсмотраВодителей
	|ГДЕ
	|	уатЖурналМедицинскогоОсмотраВодителей.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналМедицинскогоОсмотраВодителей.Водитель = &Водитель2
	|	И уатЖурналМедицинскогоОсмотраВодителей.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Предрейсовый)
	|	И уатЖурналМедицинскогоОсмотраВодителей.Проведен
	|	И уатЖурналМедицинскогоОсмотраВодителей.Ссылка <> &ТекДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналМедицинскогоОсмотраВодителей.Ссылка,
	|	""Послерейсовый2""
	|ИЗ
	|	Документ.уатЖурналМедицинскогоОсмотраВодителей КАК уатЖурналМедицинскогоОсмотраВодителей
	|ГДЕ
	|	уатЖурналМедицинскогоОсмотраВодителей.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналМедицинскогоОсмотраВодителей.Водитель = &Водитель2
	|	И уатЖурналМедицинскогоОсмотраВодителей.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Послерейсовый)
	|	И уатЖурналМедицинскогоОсмотраВодителей.Проведен
	|	И уатЖурналМедицинскогоОсмотраВодителей.Ссылка <> &ТекДокумент");
	
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("Водитель1", ПутевойЛист.Водитель1);
	Запрос.УстановитьПараметр("Водитель2", ПутевойЛист.Водитель2);
	Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Рез.Вставить(Выборка.ВидКонтроля, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Рез;	
КонецФункции

// Функция получает ссылки на созданные документы "Журнал осмотров одометров"
//
// Параметры:
//  ПутевойЛист	 - ДокументСсылка.уатПутевойЛист - Путевой лист
// 
// Возвращаемое значение:
//  Структура - каждый элемент структуры содержит ссылку на созданный документ
//		или Неопределено, если документ не создан
//
Функция СозданныеДокументыОсмотровОдометровПоПЛ(ПутевойЛист, ТекДокумент = Неопределено) Экспорт
	Рез = Новый Структура("Предрейсовый, Послерейсовый");
	
	Если ПутевойЛист.Пустая() Тогда
		Возврат Рез;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатЖурналУчетаПоказанийОдометра.Ссылка КАК Ссылка,
	|	""Предрейсовый"" КАК ВидКонтроля
	|ИЗ
	|	Документ.уатЖурналУчетаПоказанийОдометра КАК уатЖурналУчетаПоказанийОдометра
	|ГДЕ
	|	уатЖурналУчетаПоказанийОдометра.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналУчетаПоказанийОдометра.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Предрейсовый)
	|	И уатЖурналУчетаПоказанийОдометра.Проведен
	|	И уатЖурналУчетаПоказанийОдометра.Ссылка <> &ТекДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналУчетаПоказанийОдометра.Ссылка,
	|	""Послерейсовый""
	|ИЗ
	|	Документ.уатЖурналУчетаПоказанийОдометра КАК уатЖурналУчетаПоказанийОдометра
	|ГДЕ
	|	уатЖурналУчетаПоказанийОдометра.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналУчетаПоказанийОдометра.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.уатВидыКонтроляТранспортныхДокументов.Послерейсовый)
	|	И уатЖурналУчетаПоказанийОдометра.Проведен
	|	И уатЖурналУчетаПоказанийОдометра.Ссылка <> &ТекДокумент");
	
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Рез.Вставить(Выборка.ВидКонтроля, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Рез;	
КонецФункции

// Функция возвращает флаг наличия уже созданного документа "Журнал контроля ТС"
//
// Параметры:
//  ПутевойЛист	 - ДокументСсылка.уатПутевойЛист - Путевой лист 
//  ВидКонтроля	 - ПеречислениеСсылка.уатВидыКонтроляТранспортныхДокументов - Предрейсовый или Послерейсовый
// 
// Возвращаемое значение:
//  Булево - Флаг наличия созданного документа
//
Функция УжеСозданДокументКонтроляТС(ПутевойЛист, ВидКонтроля, ТекДокумент = Неопределено) Экспорт
	СозданныеДокументы = СозданныеДокументыКонтроляТСПоПЛ(ПутевойЛист, ТекДокумент);
	
	Если ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый Тогда
		Рез = (СозданныеДокументы.Предрейсовый <> Неопределено);
	Иначе
		Рез = (СозданныеДокументы.Послерейсовый <> Неопределено);
	КонецЕсли;
		
	Возврат Рез;
КонецФункции

// Функция возвращает флаг наличия уже созданного документа "Журнал осмотров одометров"
//
// Параметры:
//  ПутевойЛист	 - ДокументСсылка.уатПутевойЛист - Путевой лист 
//  ВидКонтроля	 - ПеречислениеСсылка.уатВидыКонтроляТранспортныхДокументов - Предрейсовый или Послерейсовый
// 
// Возвращаемое значение:
//  Булево - Флаг наличия созданного документа
//
Функция УжеСозданДокументОсмотровОдометров(ПутевойЛист, ВидКонтроля, ТекДокумент = Неопределено) Экспорт
	СозданныеДокументы = СозданныеДокументыОсмотровОдометровПоПЛ(ПутевойЛист, ТекДокумент);
	
	Если ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый Тогда
		Рез = (СозданныеДокументы.Предрейсовый <> Неопределено);
	Иначе
		Рез = (СозданныеДокументы.Послерейсовый <> Неопределено);
	КонецЕсли;
		
	Возврат Рез;
КонецФункции

// Функция возвращает флаг наличия уже созданного документа "Журнал медоосмотра"
//
// Параметры:
//  ПутевойЛист	 - ДокументСсылка.уатПутевойЛист - Путевой лист 
//  Водитель	 - СправочникСсылка.Сотрудники - Водитель1 или Водитель2
//  ВидКонтроля	 - ПеречислениеСсылка.уатВидыКонтроляТранспортныхДокументов - Предрейсовый или Послерейсовый
//  ИмяДокумента - Строка - имя документа "Журнал ..." в метаданных
// 
// Возвращаемое значение:
//  Булево - Флаг наличия созданного документа
//
Функция УжеСозданДокументМедосмотраПоВодителю(ПутевойЛист, Водитель, ВидКонтроля, ТекДокумент = Неопределено) Экспорт
	СозданныеДокументы = СозданныеДокументыМедосмотраПоПЛ(ПутевойЛист, ТекДокумент);
	
	Если ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый Тогда
		Рез = (Водитель = ПутевойЛист.Водитель1 И СозданныеДокументы.Предрейсовый1 <> Неопределено
			ИЛИ Водитель = ПутевойЛист.Водитель2 И СозданныеДокументы.Предрейсовый2 <> Неопределено)
	Иначе
		Рез = (Водитель = ПутевойЛист.Водитель1 И СозданныеДокументы.Послерейсовый1 <> Неопределено
			ИЛИ Водитель = ПутевойЛист.Водитель2 И СозданныеДокументы.Послерейсовый2 <> Неопределено)
	КонецЕсли;
		
	Возврат Рез;
КонецФункции

// Функция возвращает флаг подписания всех указанных документов.
//  Если хотя бы один документ не подписан, возвращается Ложь.
//  Из массива документов удаляются подписанные
//
// Параметры:
//  мсвДокументы - МассивЗначений - массив документов, проверяемых на факт подписания
// 
// Возвращаемое значение:
//  Булево - факт подписания всех документов
//
Функция ДокументыПодписаны(мсвДокументы, СообщитьОбОшибке = Истина, ДопПараметры = Неопределено) Экспорт
	
	ВидОтветственногоЛицаСтруктура = ВидОтветственногоЛица(мсвДокументы[0], ДопПараметры);
	
	мсвПодписанные = Новый Массив;
	
	тблСостоянияПЛ = СостояниеПодписейПЛ(мсвДокументы);
	
	Для Каждого ТекДокумент Из мсвДокументы Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ТекПЛ = ТекДокумент;
		Иначе
			ТекПЛ = ТекДокумент.ПутевойЛист;
		КонецЕсли;
		
		СтрокаПоиск = тблСостоянияПЛ.Найти(ТекПЛ, "ПутевойЛист");
		Если СтрокаПоиск = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если ВидОтветственногоЛицаСтруктура.Наименование = "Медработник" Тогда
			ТекДокументПредрейсовый = (ТекДокумент.ВидКонтроля
				= Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый);
			
			Если ТекДокумент.Водитель = СтрокаПоиск.Водитель1
				И (ТекДокументПредрейсовый И СтрокаПоиск.МедработникПредрейсовый
				ИЛИ НЕ ТекДокументПредрейсовый И СтрокаПоиск.МедработникПослерейсовый)
				ИЛИ ТекДокумент.Водитель = СтрокаПоиск.Водитель2
				И (ТекДокументПредрейсовый И СтрокаПоиск.МедработникВодитель2Предрейсовый
				ИЛИ НЕ ТекДокументПредрейсовый И СтрокаПоиск.МедработникВодитель2Послерейсовый) Тогда
					
				Если мсвПодписанные.Найти(ТекДокумент) = Неопределено Тогда
					мсвПодписанные.Добавить(ТекДокумент);
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Контролер" Тогда
			ТекДокументПредрейсовый = (ТекДокумент.ВидКонтроля
				= Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый);
				
			Если ТекДокументПредрейсовый И СтрокаПоиск.КонтролерПредрейсовый
				ИЛИ НЕ ТекДокументПредрейсовый И СтрокаПоиск.КонтролерПослерейсовый Тогда
					
				Если мсвПодписанные.Найти(ТекДокумент) = Неопределено Тогда
					мсвПодписанные.Добавить(ТекДокумент);
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "УполномоченныйНаПроставлениеОдометра" Тогда
			ТекДокументПредрейсовый = (ТекДокумент.ВидКонтроля
				= Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый);
				
			Если ТекДокументПредрейсовый И СтрокаПоиск.УполномоченныйНаПроставлениеОдометраПредрейсовый
				ИЛИ НЕ ТекДокументПредрейсовый И СтрокаПоиск.УполномоченныйНаПроставлениеОдометраПослерейсовый Тогда
					
				Если мсвПодписанные.Найти(ТекДокумент) = Неопределено Тогда
					мсвПодписанные.Добавить(ТекДокумент);
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Водитель" Тогда
			Если СтрокаПоиск.ВодительПредрейсовый И СтрокаПоиск.ВодительПослерейсовый Тогда
				Если мсвПодписанные.Найти(ТекДокумент) = Неопределено Тогда
					мсвПодписанные.Добавить(ТекДокумент);
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Диспетчер" Тогда
			Если СтрокаПоиск.ДиспетчерПредрейсовый И СтрокаПоиск.ДиспетчерПослерейсовый Тогда
				Если мсвПодписанные.Найти(ТекДокумент) = Неопределено Тогда
					мсвПодписанные.Добавить(ТекДокумент);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсеДокументыПодписаны = (мсвДокументы.Количество() = мсвПодписанные.Количество());
	СтрокаОшибки = "";
	Для Каждого ТекДокументПодписанный Из мсвПодписанные Цикл
		СтрокаОшибки = СтрокаОшибки + ", """ + ТекДокументПодписанный + """";
		мсвДокументы.Удалить(мсвДокументы.Найти(ТекДокументПодписанный));
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаОшибки) И ВсеДокументыПодписаны И СообщитьОбОшибке Тогда
		СтрокаОшибки = Сред(СтрокаОшибки, 3);
		Если мсвПодписанные.Количество() = 1 Тогда
			ТекстНСТР = СтрШаблон("Документ %1 уже подписан %2.", СтрокаОшибки, ВидОтветственногоЛицаСтруктура.ДопТекст);
		Иначе
			ТекстНСТР = СтрШаблон("Документы %1 уже подписаны %2.", СтрокаОшибки, ВидОтветственногоЛицаСтруктура.ДопТекст);
		КонецЕсли;
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
	КонецЕсли;
	
	Возврат ВсеДокументыПодписаны;
	
КонецФункции

Функция НайтиДобавитьФайлыДляПодписи(мсвДокументы, ДопПараметры = Неопределено) Экспорт
	
	соотвФайлыДляПодписи = Новый Соответствие;
	
	Если мсвДокументы.Количество() = 0 Тогда
		Возврат соотвФайлыДляПодписи;
	КонецЕсли;
	
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	ВидОтветственногоЛицаСтруктура = ВидОтветственногоЛица(мсвДокументы[0], ДопПараметры);
	тблСостоянияПЛ = СостояниеПодписейПЛ(мсвДокументы);
	
	флЭтоТерминалПЛ = ДопПараметры <> Неопределено И (ДопПараметры.Свойство("ТерминалПарольПодписи")
		ИЛИ ДопПараметры.Свойство("ДопПараметры") И ДопПараметры.ДопПараметры <> Неопределено
		И ДопПараметры.ДопПараметры.Свойство("ТерминалПарольПодписи"));
		
	флТолькоПоискФайлов = (ДопПараметры <> Неопределено И ДопПараметры.Свойство("ТолькоПоискПодписанныхФайлов"));
	
	Если ВидОтветственногоЛицаСтруктура.Наименование = "Медработник" Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатЖурналМедицинскогоОсмотраВодителейПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла В (&мсвДокументы)
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления");
	ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Контролер" Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТСПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла В (&мсвДокументы)
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления");
	ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "УполномоченныйНаПроставлениеОдометра" Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатЖурналУчетаПоказанийОдометраПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла В (&мсвДокументы)
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления");

	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла В (&мсвДокументы)
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления");
		Если флТолькоПоискФайлов Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ПрисоединенныеФайлы.ПодписанЭП";
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("мсвДокументы", мсвДокументы);
		
	тблФайлы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекДокумент Из мсвДокументы Цикл
		Если ВидОтветственногоЛицаСтруктура.Наименование = "Диспетчер"
			ИЛИ ВидОтветственногоЛицаСтруктура.Наименование = "Водитель" Тогда
			
			Если флЭтоТерминалПЛ Тогда
				ВидКонтроляПЛ = "послерейсовый";
			Иначе
				СтрокаПоиск = тблСостоянияПЛ.Найти(ТекДокумент, "ПутевойЛист");
				Если СтрокаПоиск = Неопределено
					ИЛИ (ВидОтветственногоЛицаСтруктура.Наименование = "Водитель"
					И НЕ СтрокаПоиск.ВодительПредрейсовый)
					ИЛИ (ВидОтветственногоЛицаСтруктура.Наименование = "Диспетчер"
					И НЕ СтрокаПоиск.ДиспетчерПредрейсовый) Тогда
					ВидКонтроляПЛ = "предрейсовый";
				Иначе
					ВидКонтроляПЛ = "послерейсовый";
				КонецЕсли;
			КонецЕсли;
			
			НаименованиеФайла = СтрШаблон("Служебный для подписи %1 (%2)", ВидОтветственногоЛицаСтруктура.ДопТекст, ВидКонтроляПЛ);
		Иначе
			НаименованиеФайла = СтрШаблон("Служебный для подписи %1", ВидОтветственногоЛицаСтруктура.ДопТекст);
		КонецЕсли;
		
		мсвСтрокиПоиска = тблФайлы.НайтиСтроки(Новый Структура("ВладелецФайла, Наименование", ТекДокумент, НаименованиеФайла));
		
		Если флТолькоПоискФайлов Тогда
			Если мсвСтрокиПоиска.Количество() = 0 Тогда
				Возврат соотвФайлыДляПодписи;
			Иначе
				ДобавленныйФайл = мсвСтрокиПоиска[0].Ссылка;
			КонецЕсли;
		Иначе
			Если мсвСтрокиПоиска.Количество() = 0 Тогда
				ПутьВоВременномХранилище = уатЗащищенныеФункцииСервер_проф.СериализоватьДляЗаписи(ТекДокумент.ПолучитьОбъект());
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", ТекПользователь);
				ПараметрыФайла.Вставить("ВладелецФайлов", ТекДокумент);
				ПараметрыФайла.Вставить("ИмяБезРасширения", НаименованиеФайла);
				ПараметрыФайла.Вставить("РасширениеБезТочки", "json");
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата());
				
				Если ВидОтветственногоЛицаСтруктура.Наименование = "Медработник" Тогда
					Описание = СтрШаблон("Служебный файл для электронной подписи документа ""%1"" %2 ""%3""",
						ТекДокумент, ВидОтветственногоЛицаСтруктура.ДопТекст, ТекДокумент.МедицинскийРаботник);
				ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Контролер" Тогда
					Описание = СтрШаблон("Служебный файл для электронной подписи документа ""%1"" %2 ""%3""",
						ТекДокумент, ВидОтветственногоЛицаСтруктура.ДопТекст, ТекДокумент.Контролер);
				Иначе
					Описание = СтрШаблон("Служебный файл для электронной подписи документа ""%1"" %2 (%3)",
						ТекДокумент, ВидОтветственногоЛицаСтруктура.ДопТекст, ВидКонтроляПЛ);
				КонецЕсли;
				
				ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПутьВоВременномХранилище, "", Описание);
			Иначе
				ДобавленныйФайл = мсвСтрокиПоиска[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
			
		соотвФайлыДляПодписи.Вставить(ТекДокумент, ДобавленныйФайл);
		
	КонецЦикла;
	
	Возврат соотвФайлыДляПодписи;
	
КонецФункции

Процедура ИзменитьСостоянияПодписейПЛ(ДокументСсылка, ДопПараметры = Неопределено) Экспорт
	
	флУстановитьПодпись = (ДопПараметры <> Неопределено И ДопПараметры.Свойство("УстановитьПодпись"));
	
	ВидОтветственногоЛицаСтруктура = ВидОтветственногоЛица(ДокументСсылка, ДопПараметры);
	
	ЭтоПЛ = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатПутевойЛист"));
	Если ЭтоПЛ Тогда
		ТекПЛ = ДокументСсылка;
	Иначе
		ТекПЛ = ДокументСсылка.ПутевойЛист;
	КонецЕсли;
	
	флАннулированиеПодписей = Ложь;
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("АннулируемыеПодписи") Тогда
		флАннулированиеПодписей = Истина;
		Если ДопПараметры.АннулируемыеПодписи = Неопределено Тогда // аннулировать все подписи
			ДокументыКонтроляТС        = СозданныеДокументыКонтроляТСПоПЛ(ТекПЛ);
			ДокументыМедосмотра        = СозданныеДокументыМедосмотраПоПЛ(ТекПЛ);
			ДокументыОсмотровОдометров = СозданныеДокументыОсмотровОдометровПоПЛ(ТекПЛ);
			
			АннулируемыеПодписи = Новый СписокЗначений;
			АннулируемыеПодписи.Добавить(ДокументыМедосмотра.Предрейсовый1,  "МедработникПредрейсовый");
			АннулируемыеПодписи.Добавить(ДокументыМедосмотра.Послерейсовый1, "МедработникПослерейсовый");
			АннулируемыеПодписи.Добавить(ДокументыМедосмотра.Предрейсовый2,  "МедработникВодитель2Предрейсовый");
			АннулируемыеПодписи.Добавить(ДокументыМедосмотра.Послерейсовый2, "МедработникВодитель2Послерейсовый");
			АннулируемыеПодписи.Добавить(ДокументыКонтроляТС.Предрейсовый,   "КонтролерПредрейсовый");
			АннулируемыеПодписи.Добавить(ДокументыКонтроляТС.Послерейсовый,  "КонтролерПослерейсовый");
			АннулируемыеПодписи.Добавить(ДокументыОсмотровОдометров.Предрейсовый,  "УполномоченныйНаПроставлениеОдометраПредрейсовый");
			АннулируемыеПодписи.Добавить(ДокументыОсмотровОдометров.Послерейсовый, "УполномоченныйНаПроставлениеОдометраПослерейсовый");
			АннулируемыеПодписи.Добавить(Неопределено, "ВодительПредрейсовый");
			АннулируемыеПодписи.Добавить(Неопределено, "ВодительПослерейсовый");
			АннулируемыеПодписи.Добавить(Неопределено, "ДиспетчерПредрейсовый");
			АннулируемыеПодписи.Добавить(Неопределено, "ДиспетчерПослерейсовый");
			АннулируемыеПодписи.Добавить(Неопределено, "УполномоченныйНаПроставлениеОдометраПредрейсовый");
			АннулируемыеПодписи.Добавить(Неопределено, "УполномоченныйНаПроставлениеОдометраПослерейсовый");
		Иначе
			АннулируемыеПодписи = ДопПараметры.АннулируемыеПодписи;
		КонецЕсли;
	КонецЕсли;
	
	флЭтоТерминалПЛ = ДопПараметры <> Неопределено И (ДопПараметры.Свойство("ТерминалПарольПодписи")
		ИЛИ ДопПараметры.Свойство("ДопПараметры") И ДопПараметры.ДопПараметры <> Неопределено
		И ДопПараметры.ДопПараметры.Свойство("ТерминалПарольПодписи"));
		
	ВидПодписи = Неопределено;
	СостояниеПодписей = Неопределено;
	мсвАннулируемыеПодписи = Новый Массив;
	Если флАннулированиеПодписей Тогда
		Для Каждого ТекПодпись Из АннулируемыеПодписи Цикл
			// Устанавливается статус Аннулирован в документах медосмотра и техконтроля
			// состояние подписи в регистре будет автоматически обновлено при записи документов
		    Если (СтрНайти(ТекПодпись.Представление, "Медработник") <> 0
				ИЛИ СтрНайти(ТекПодпись.Представление, "Контролер") <> 0)
				И ЗначениеЗаполнено(ТекПодпись.Значение)
				И ТекПодпись.Значение.Статус <> Справочники.уатСтатусы_уэ.Аннулировано Тогда
								
				ДокОбъект = ТекПодпись.Значение.ПолучитьОбъект();
				ДокОбъект.Статус = Справочники.уатСтатусы_уэ.Аннулировано;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если ТекПодпись.Представление = "ДиспетчерПредрейсовый"
				ИЛИ ТекПодпись.Представление = "ДиспетчерПослерейсовый"
				ИЛИ ТекПодпись.Представление = "ВодительПредрейсовый"
				ИЛИ ТекПодпись.Представление = "ВодительПослерейсовый" Тогда
				
				мсвАннулируемыеПодписи.Добавить(ТекПодпись.Представление);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ЭтоПЛ Тогда
			Если флУстановитьПодпись Тогда
				СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.Подписан;
			ИначеЕсли НЕ ДокументСсылка.Проведен Тогда
				СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.ПустаяСсылка();
			КонецЕсли;
			
			Если СостояниеПодписей <> Неопределено Тогда
				Если ВидОтветственногоЛицаСтруктура.Наименование = "Водитель" Тогда
					ВидПодписи = "Водитель";
				ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Диспетчер" Тогда
					ВидПодписи = "Диспетчер";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВидКонтроляПредрейсовый = (ДокументСсылка.ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый);
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналУчетаПоказанийОдометра") Тогда
				Если НЕ ДокументСсылка.Проведен Тогда
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.ПустаяСсылка();
				ИначеЕсли флУстановитьПодпись Тогда
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.Подписан;
				Иначе
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.Создан;
				КонецЕсли;
			Иначе
				Если НЕ ДокументСсылка.Проведен Тогда
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.ПустаяСсылка();
				ИначеЕсли ДокументСсылка.Статус = Справочники.уатСтатусы_уэ.НеПройдено
					ИЛИ ДокументСсылка.Статус = Справочники.уатСтатусы_уэ.Аннулировано Тогда
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден;
				ИначеЕсли флУстановитьПодпись Тогда
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.Подписан;
				Иначе
					СостояниеПодписей = Перечисления.уатСостоянияТранспортныхДокументов.Создан;
				КонецЕсли; 
			КонецЕсли;
			
			Если ВидОтветственногоЛицаСтруктура.Наименование = "Медработник" Тогда
				Если ДокументСсылка.Водитель = ТекПЛ.Водитель1 Тогда
					Если ВидКонтроляПредрейсовый Тогда
						ВидПодписи = "МедработникПредрейсовый";
					Иначе
						ВидПодписи = "МедработникПослерейсовый";
					КонецЕсли;
				ИначеЕсли ДокументСсылка.Водитель = ТекПЛ.Водитель2 Тогда
					Если ВидКонтроляПредрейсовый Тогда
						ВидПодписи = "МедработникВодитель2Предрейсовый";
					Иначе
						ВидПодписи = "МедработникВодитель2Послерейсовый";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "Контролер" Тогда
				Если ВидКонтроляПредрейсовый Тогда
					ВидПодписи = "КонтролерПредрейсовый";
				Иначе
					ВидПодписи = "КонтролерПослерейсовый";
				КонецЕсли;
			ИначеЕсли ВидОтветственногоЛицаСтруктура.Наименование = "УполномоченныйНаПроставлениеОдометра" Тогда
				Если ВидКонтроляПредрейсовый Тогда
					ВидПодписи = "УполномоченныйНаПроставлениеОдометраПредрейсовый";
				Иначе
					ВидПодписи = "УполномоченныйНаПроставлениеОдометраПослерейсовый";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	ДопПараметрыПодписи = Новый Структура("ЭтоТерминалПЛ, АннулируемыеПодписи",
		флЭтоТерминалПЛ, мсвАннулируемыеПодписи);
	уатЗащищенныеФункцииСервер_проф.ОбновитьСостояниеПодписейЖурналы(ТекПЛ, ВидПодписи, СостояниеПодписей, ДопПараметрыПодписи);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПолейСтатусов(УсловноеОформление) Экспорт
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЖурналыТранспортныхДокументов";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка условного оформления колонки динамического списка
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовШапки";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Статус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция СостояниеПодписейПЛ(мсвДокументы, Знач Статус = Неопределено) Экспорт
	Если Статус = Неопределено Тогда
		Статус = Перечисления.уатСостоянияТранспортныхДокументов.Подписан;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСостоянияПодписиПутевыхЛистов.ПутевойЛист КАК ПутевойЛист,
	|	уатСостоянияПодписиПутевыхЛистов.ПутевойЛист.Водитель1 КАК Водитель1,
	|	уатСостоянияПодписиПутевыхЛистов.ПутевойЛист.Водитель2 КАК Водитель2,
	|	уатСостоянияПодписиПутевыхЛистов.МедработникПредрейсовый = &Статус КАК МедработникПредрейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.МедработникПослерейсовый = &Статус КАК МедработникПослерейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.МедработникВодитель2Предрейсовый = &Статус КАК МедработникВодитель2Предрейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.МедработникВодитель2Послерейсовый = &Статус КАК МедработникВодитель2Послерейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.КонтролерПредрейсовый = &Статус КАК КонтролерПредрейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.КонтролерПослерейсовый = &Статус КАК КонтролерПослерейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.УполномоченныйНаПроставлениеОдометраПредрейсовый = &Статус КАК УполномоченныйНаПроставлениеОдометраПредрейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.УполномоченныйНаПроставлениеОдометраПослерейсовый = &Статус КАК УполномоченныйНаПроставлениеОдометраПослерейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.ВодительПредрейсовый = &Статус КАК ВодительПредрейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.ВодительПослерейсовый = &Статус КАК ВодительПослерейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.ДиспетчерПредрейсовый = &Статус КАК ДиспетчерПредрейсовый,
	|	уатСостоянияПодписиПутевыхЛистов.ДиспетчерПослерейсовый = &Статус КАК ДиспетчерПослерейсовый
	|ИЗ
	|	РегистрСведений.уатСостоянияПодписиПутевыхЛистов КАК уатСостоянияПодписиПутевыхЛистов
	|ГДЕ
	|	уатСостоянияПодписиПутевыхЛистов.ПутевойЛист В(&мсвПутевыеЛисты)");
	
	Запрос.УстановитьПараметр("Статус", Статус);
	мсвПутевыеЛисты = Новый Массив;
	Для Каждого ТекДокумент Из мсвДокументы Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			ТекПЛ = ТекДокумент;
		Иначе
			ТекПЛ = ТекДокумент.ПутевойЛист;
		КонецЕсли;
		Если мсвПутевыеЛисты.Найти(ТекПЛ) = Неопределено Тогда
			мсвПутевыеЛисты.Добавить(ТекПЛ);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("мсвПутевыеЛисты", мсвПутевыеЛисты);
	тблСостоянияПЛ = Запрос.Выполнить().Выгрузить();
	
	Возврат тблСостоянияПЛ;
КонецФункции

Функция СостояниеПодписейПЛСтруктура(ДокументСсылка, Знач Статус = Неопределено) Экспорт
	Рез = Новый Структура;
	Рез.Вставить("ВодительПредрейсовый",     Ложь);
	Рез.Вставить("ВодительПослерейсовый",    Ложь);
	Рез.Вставить("ДиспетчерПредрейсовый",    Ложь);
	Рез.Вставить("ДиспетчерПослерейсовый",   Ложь);
	Рез.Вставить("КонтролерПредрейсовый",    Ложь);
	Рез.Вставить("КонтролерПослерейсовый",   Ложь);
	Рез.Вставить("УполномоченныйНаПроставлениеОдометраПредрейсовый",  Ложь);
	Рез.Вставить("УполномоченныйНаПроставлениеОдометраПослерейсовый", Ложь);
	Рез.Вставить("МедработникПредрейсовый",  Ложь);
	Рез.Вставить("МедработникПослерейсовый", Ложь);
	Рез.Вставить("МедработникВодитель2Предрейсовый", Ложь);
	Рез.Вставить("МедработникВодитель2Послерейсовый", Ложь);
	Рез.Вставить("Врач",     Ложь);
	Рез.Вставить("Водитель", Ложь);
	
	Если ДокументСсылка.Пустая() Тогда
		Возврат Рез;
	КонецЕсли;
	
	мсвДокументы = Новый Массив;
	мсвДокументы.Добавить(ДокументСсылка);
	
	тблСостоянияПЛ = СостояниеПодписейПЛ(мсвДокументы, Статус);
	
	Если тблСостоянияПЛ.Количество() = 0 Тогда
		Возврат Рез;
	КонецЕсли;
	
	Рез.ВодительПредрейсовый     = тблСостоянияПЛ[0].ВодительПредрейсовый;
	Рез.ВодительПослерейсовый    = тблСостоянияПЛ[0].ВодительПослерейсовый;
	Рез.ДиспетчерПредрейсовый    = тблСостоянияПЛ[0].ДиспетчерПредрейсовый;
	Рез.ДиспетчерПослерейсовый   = тблСостоянияПЛ[0].ДиспетчерПослерейсовый;
	Рез.КонтролерПредрейсовый    = тблСостоянияПЛ[0].КонтролерПредрейсовый;
	Рез.КонтролерПослерейсовый   = тблСостоянияПЛ[0].КонтролерПослерейсовый;
	Рез.УполномоченныйНаПроставлениеОдометраПредрейсовый  = тблСостоянияПЛ[0].УполномоченныйНаПроставлениеОдометраПредрейсовый;
	Рез.УполномоченныйНаПроставлениеОдометраПослерейсовый = тблСостоянияПЛ[0].УполномоченныйНаПроставлениеОдометраПослерейсовый;
	Рез.МедработникПредрейсовый  = тблСостоянияПЛ[0].МедработникПредрейсовый;
	Рез.МедработникПослерейсовый = тблСостоянияПЛ[0].МедработникПослерейсовый;
	Рез.МедработникВодитель2Предрейсовый  = тблСостоянияПЛ[0].МедработникВодитель2Предрейсовый;
	Рез.МедработникВодитель2Послерейсовый = тблСостоянияПЛ[0].МедработникВодитель2Послерейсовый;
	
	Рез.Врач                     = Рез.МедработникПредрейсовый ИЛИ Рез.МедработникПослерейсовый;
	Рез.Водитель                 = Рез.ВодительПредрейсовый ИЛИ Рез.ВодительПослерейсовый;
			
	Возврат Рез;
КонецФункции

Функция ПолучитьАннулируемыеПодписи(ДокументОбъект) Экспорт
	Рез = Новый СписокЗначений;
	
	СостояниеПодписейПЛ = СостояниеПодписейПЛСтруктура(ДокументОбъект.Ссылка);
	флЕстьПодписи = Ложь;
	Для Каждого ТекПодпись Из СостояниеПодписейПЛ Цикл
		Если ТекПодпись.Значение Тогда
			флЕстьПодписи = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ флЕстьПодписи Тогда
		Возврат Рез;
	КонецЕсли;
	
	мсвИзмененнныеРеквизиты = Новый Массив;
	Для Каждого ТекРеквизит Из Метаданные.Документы.уатПутевойЛист.Реквизиты Цикл
		Если ДокументОбъект[ТекРеквизит.Имя] <> ДокументОбъект.Ссылка[ТекРеквизит.Имя] Тогда
			мсвИзмененнныеРеквизиты.Добавить(ТекРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Если НЕ СравнитьТабличныеЧасти(ДокументОбъект.Прицепы, ДокументОбъект.Ссылка.Прицепы, "ТС") Тогда
		мсвИзмененнныеРеквизиты.Добавить("Прицепы");
	КонецЕсли;
	
	Если СостояниеПодписейПЛ.ДиспетчерПредрейсовый
		И (мсвИзмененнныеРеквизиты.Найти("ТС") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Водитель1") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Водитель2") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Прицепы") <> Неопределено) Тогда // ТС, водители, прицепы
		Рез.Добавить(Неопределено, "ДиспетчерПредрейсовый");
	КонецЕсли;
	Если СостояниеПодписейПЛ.ДиспетчерПослерейсовый
		И мсвИзмененнныеРеквизиты.Количество() <> 0 Тогда // все реквизиты
		Рез.Добавить(Неопределено, "ДиспетчерПослерейсовый");
	КонецЕсли;
	Если СостояниеПодписейПЛ.КонтролерПредрейсовый
		И (мсвИзмененнныеРеквизиты.Найти("ТС") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Прицепы") <> Неопределено) Тогда
		ДокументКонтроль = ЗаписьТехконтроляПутевогоЛиста(ДокументОбъект.Ссылка, Истина);
		Если ЗначениеЗаполнено(ДокументКонтроль) 
			И (ДокументОбъект.ТранспортноеСредство <> ДокументКонтроль.ТС
			ИЛИ НЕ СравнитьТабличныеЧасти(ДокументОбъект.Прицепы, ДокументКонтроль.Прицепы, "ТС")) Тогда
			
			Рез.Добавить(ДокументКонтроль, "КонтролерПредрейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.КонтролерПослерейсовый
		И (мсвИзмененнныеРеквизиты.Найти("ТС") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Прицепы") <> Неопределено) Тогда
		ДокументКонтроль = ЗаписьТехконтроляПутевогоЛиста(ДокументОбъект.Ссылка, Ложь);
		Если ЗначениеЗаполнено(ДокументКонтроль) 
			И (ДокументОбъект.ТранспортноеСредство <> ДокументКонтроль.ТС
			ИЛИ НЕ СравнитьТабличныеЧасти(ДокументОбъект.Прицепы, ДокументКонтроль.Прицепы, "ТС")) Тогда
			
			Рез.Добавить(ДокументКонтроль, "КонтролерПослерейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.УполномоченныйНаПроставлениеОдометраПредрейсовый
		И (мсвИзмененнныеРеквизиты.Найти("СпидометрВыезда") <> Неопределено) Тогда
		ДокументКонтроль = ЗаписьОсмотровОдометровПутевогоЛиста(ДокументОбъект.Ссылка, Истина);
		Если ЗначениеЗаполнено(ДокументКонтроль) 
			И (ДокументОбъект.СпидометрВыезда <> ДокументКонтроль.ПоказаниеОдометра) Тогда
			
			Рез.Добавить(ДокументКонтроль, "УполномоченныйНаПроставлениеОдометраПредрейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.УполномоченныйНаПроставлениеОдометраПослерейсовый
		И (мсвИзмененнныеРеквизиты.Найти("СпидометрВозвращения") <> Неопределено) Тогда
		ДокументКонтроль = ЗаписьОсмотровОдометровПутевогоЛиста(ДокументОбъект.Ссылка, Ложь);
		Если ЗначениеЗаполнено(ДокументКонтроль) 
			И (ДокументОбъект.СпидометрВозвращения <> ДокументКонтроль.ПоказаниеОдометра) Тогда
			
			Рез.Добавить(ДокументКонтроль, "УполномоченныйНаПроставлениеОдометраПослерейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.МедработникПредрейсовый Тогда
		ДокументМедосмотр = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка, ДокументОбъект.Водитель1, Истина);
		Если НЕ ЗначениеЗаполнено(ДокументМедосмотр) Тогда
			ДокументМедосмотрСтарый = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка,
				ДокументОбъект.Ссылка.Водитель1, Истина);
			Рез.Добавить(ДокументМедосмотрСтарый, "МедработникПредрейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.МедработникПослерейсовый Тогда
		ДокументМедосмотр = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка, ДокументОбъект.Водитель1, Ложь);
		Если НЕ ЗначениеЗаполнено(ДокументМедосмотр) Тогда
			ДокументМедосмотрСтарый = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка,
				ДокументОбъект.Ссылка.Водитель1, Ложь);
			Рез.Добавить(ДокументМедосмотрСтарый, "МедработникПослерейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.МедработникВодитель2Предрейсовый Тогда
		ДокументМедосмотр = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка, ДокументОбъект.Водитель2, Истина);
		Если НЕ ЗначениеЗаполнено(ДокументМедосмотр) Тогда
			ДокументМедосмотрСтарый = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка,
				ДокументОбъект.Ссылка.Водитель2, Истина);
			Рез.Добавить(ДокументМедосмотрСтарый, "МедработникВодитель2Предрейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.МедработникВодитель2Послерейсовый Тогда
		ДокументМедосмотр = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка, ДокументОбъект.Водитель2, Ложь);
		Если НЕ ЗначениеЗаполнено(ДокументМедосмотр) Тогда
			ДокументМедосмотрСтарый = ЗаписьМедосмотраПутевогоЛиста(ДокументОбъект.Ссылка,
				ДокументОбъект.Ссылка.Водитель2, Ложь);
			Рез.Добавить(ДокументМедосмотрСтарый, "МедработникВодитель2Послерейсовый");
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПодписейПЛ.ВодительПредрейсовый
		И (мсвИзмененнныеРеквизиты.Найти("ТС") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Водитель1") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Водитель2") <> Неопределено
		ИЛИ мсвИзмененнныеРеквизиты.Найти("Прицепы") <> Неопределено) Тогда // ТС, водители, прицепы
		Рез.Добавить(Неопределено, "ВодительПредрейсовый");
	КонецЕсли;	
	Если СостояниеПодписейПЛ.ВодительПослерейсовый
		И мсвИзмененнныеРеквизиты.Количество() <> 0	Тогда // все реквизиты
		Рез.Добавить(Неопределено, "ВодительПослерейсовый");
	КонецЕсли;
		
	Возврат Рез;
КонецФункции

Функция ПроверитьСоответствиеОтветственногоЛица(мсвДокументы) Экспорт
	
	Если мсвДокументы.Количество() = 0 ИЛИ ТипЗнч(мсвДокументы[0]) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Рез = Истина;
	
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	КоличДокументов = мсвДокументы.Количество();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа");
	Запрос.УстановитьПараметр("ФизическоеЛицо", ТекПользователь.ФизическоеЛицо);
	мсвСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого ТекДокумент Из мсвДокументы Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЖурналМедицинскогоОсмотраВодителей") Тогда
			ВидДокумента = 1;
			ИмяНастройки = "ПроверятьСоответствиеМедицинскогоРаботникаПриУстановкеПодписи";
		ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС") Тогда
			ВидДокумента = 2;
			ИмяНастройки = "ПроверятьСоответствиеКонтролераТСПриУстановкеПодписи";
		Иначе
			ВидДокумента = 3;
			ИмяНастройки = "ПроверятьСоответствиеУполномоченногоНаПроставлениеОдометраПриУстановкеПодписи";
		КонецЕсли; 
		
		СтруктураНастройки = Новый Структура("Организация, Подразделение", ТекДокумент.Организация, ТекДокумент.Подразделение);
		флПроверять = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки, ИмяНастройки);
		
		Если НЕ флПроверять Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДокумента = "";
		Если КоличДокументов > 1 Тогда
			ПредставлениеДокумента = СтрШаблон(" ""№%1 от %2""", ТекДокумент.Номер, Формат(ТекДокумент.Дата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
				
		Если ВидДокумента = 1 Тогда
			Если мсвСотрудники.Найти(ТекДокумент.МедицинскийРаботник) = Неопределено Тогда
				ТекстНСТР = СтрШаблон(
					"Текущий пользователь не соответствует медицинскому работнику, указанному в документе%1. Подпись запрещена!",
					ПредставлениеДокумента);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
				Рез = Ложь;
			КонецЕсли;
		ИначеЕсли ВидДокумента = 2 Тогда
			Если мсвСотрудники.Найти(ТекДокумент.Контролер) = Неопределено Тогда
				ТекстНСТР = СтрШаблон(
					"Текущий пользователь не соответствует контролеру ТС, указанному в документе%1. Подпись запрещена!",
					ПредставлениеДокумента);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
				Рез = Ложь;
			КонецЕсли; 
			
		Иначе
			Если мсвСотрудники.Найти(ТекДокумент.Контролер) = Неопределено Тогда
				ТекстНСТР = СтрШаблон(
					"Текущий пользователь не соответствует уполномоченому на проставление одометра, указанному в документе%1. Подпись запрещена!",
					ПредставлениеДокумента);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
				Рез = Ложь;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьСертификатИзНастроекТерминала(Сотрудник) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПараметрыАвторизацииТерминала.СертификатПодписи КАК СертификатПодписи
	|ИЗ
	|	РегистрСведений.уатПараметрыАвторизацииТерминала КАК уатПараметрыАвторизацииТерминала
	|ГДЕ
	|	уатПараметрыАвторизацииТерминала.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СертификатПодписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЗапретОткрытияФормыОбъекта(Отказ, СтандартнаяОбработка, МетаданныеОбъекта) Экспорт
	Если НЕ ПравоДоступа("Изменение", МетаданныеОбъекта) Тогда
		ТекстСообщения = "";
		Если МетаданныеОбъекта.Имя = "уатПутевойЛист" Тогда
			//Если уатЖурналыТранспортныхДокументов.ТекущийПользовательВодитель() Тогда
			//	ТекстСообщения = "Водителю запрещен просмотр Путевых листов";
			//Иначе 
			ПравоДоступаРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.уатПутевойЛист);
			Если уатЖурналыТранспортныхДокументов.ТекущийПользовательКонтролерТС() 
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Контролеру состояния ТС запрещен просмотр Путевых листов";
			ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательМедработник()
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Медицинскому работнику запрещен просмотр Путевых листов";
			ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательУполномоченныйНаПроставлениеОдометра() 
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Уполномоченному на проставление одометра запрещен просмотр Путевых листов";
			КонецЕсли;
		ИначеЕсли МетаданныеОбъекта.Имя = "уатТС" Тогда
			ПравоДоступаРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.уатТС);
			Если уатЖурналыТранспортныхДокументов.ТекущийПользовательКонтролерТС()
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Контролеру состояния ТС запрещен просмотр данных Транспортных средств";
			ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательМедработник() 
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Медицинскому работнику запрещен просмотр данных Транспортных средств";
			ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательУполномоченныйНаПроставлениеОдометра()
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Уполномоченному на проставление одометра запрещен просмотр данных Транспортных средств";
			КонецЕсли;
		ИначеЕсли МетаданныеОбъекта.Имя = "уатМоделиТС" Тогда
			ПравоДоступаРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.уатМоделиТС);
			Если уатЖурналыТранспортныхДокументов.ТекущийПользовательКонтролерТС() 
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Контролеру состояния ТС запрещен просмотр данных Моделей ТС";
			ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательМедработник()
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Медицинскому работнику запрещен просмотр данных Моделей ТС";
			ИначеЕсли уатЖурналыТранспортныхДокументов.ТекущийПользовательУполномоченныйНаПроставлениеОдометра()
				И НЕ ПравоДоступаРедактирование Тогда
				ТекстСообщения = "Уполномоченному на проставление одометра запрещен просмотр данных Моделей ТС";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ,, СтатусСообщения.Внимание);
			СтандартнаяОбработка = Ложь;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПроверитьЧтоПроведенПередПодписью(мсвДокументы) Экспорт
	ЕстьНеПроведенные = Ложь;
	
	Для Каждого ТекДокумент Из мсвДокументы Цикл
		Если НЕ ТекДокумент.Проведен Тогда
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Запрещена подпись не проведенных документов.");
			ЕстьНеПроведенные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ЕстьНеПроведенные;
КонецФункции

Функция ПроверитьСтатусПередПодписью(мсвДокументы) Экспорт
	ЕстьНекорректные = Ложь;
	ВидОтветственногоЛица = ВидОтветственногоЛица(мсвДокументы[0]);
	
	Для Каждого ТекДокумент Из мсвДокументы Цикл
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			СостояниеПодписейПЛ = СостояниеПодписейПЛСтруктура(ТекДокумент,
				Перечисления.уатСостоянияТранспортныхДокументов.НеПройден);
			Если ВидОтветственногоЛица.Наименование = "Диспетчер" И СостояниеПодписейПЛ.ДиспетчерПослерейсовый
				ИЛИ ВидОтветственногоЛица.Наименование = "Водитель" И СостояниеПодписейПЛ.ВодительПослерейсовый Тогда
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Запрещена установка ранее аннулированной подписи Путевого листа.
					|Для отмены аннулировании нужно открыть запись регистра сведений ""Состояния подписи Путевых листов""
					|по текущему документу и очистить значение соответствующей подписи");
				ЕстьНекорректные = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если ТекДокумент.Статус = Справочники.уатСтатусы_уэ.Аннулировано
				ИЛИ ТекДокумент.Статус = Справочники.уатСтатусы_уэ.НеПройдено Тогда
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Запрещена подпись записей журналов со статусами ""Аннулировано"" и ""Не пройдено"".");
				ЕстьНекорректные = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ЕстьНекорректные;
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетаРезультатыМедосмотраКонтроля(ДокументСсылка) Экспорт
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналМедицинскогоОсмотраВодителей") Тогда
		СхемаКомпоновкиДанных = Отчеты.уатРезультатыМедицинскогоОсмотраВодителей.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		ПолеОтбора = "Водитель";
	Иначе
		СхемаКомпоновкиДанных = Отчеты.уатРезультатыКонтроляТехническогоСостоянияТС.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		ПолеОтбора = "ТС";
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если Строка(ТекЭлем.Параметр) = "ДатаНач" Тогда
			ТекЭлем.Значение = НачалоДня(ДобавитьМесяц(ДокументСсылка.Дата, -1));
		ИначеЕсли Строка(ТекЭлем.Параметр) = "ДатаКон" Тогда
			ТекЭлем.Значение = КонецДня(ДокументСсылка.Дата);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если ТекЭлем.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора) Тогда
			ТекЭлем.Использование = Истина;
			ТекЭлем.ПравоеЗначение = ДокументСсылка[ПолеОтбора];
		КонецЕсли;
	КонецЦикла;
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат ПараметрыОтчета;
КонецФункции

Функция ТекущийПользовательКонтролерТС() Экспорт
	Возврат РольДоступна(Метаданные.Роли.уатПрикладнаяРольКонтролерТехническогоСостоянияТС);
КонецФункции

Функция ТекущийПользовательМедработник() Экспорт
	Возврат РольДоступна(Метаданные.Роли.уатПрикладнаяРольМедицинскийРаботник);
КонецФункции

Функция ТекущийПользовательУполномоченныйНаПроставлениеОдометра() Экспорт
	Возврат РольДоступна(Метаданные.Роли.уатПрикладнаяРольУполномоченныйНаПроставлениеОдометра);
КонецФункции

Функция ТекущийПользовательВодитель() Экспорт
	Возврат РольДоступна(Метаданные.Роли.уатПрикладнаяРольВодитель)
		ИЛИ РольДоступна(Метаданные.Роли.уатТерминалПутевыхЛистов);
КонецФункции

// Обновляет иконки набора записей состояния подписи ПЛ
//
Процедура ОбновитьИконкиСостоянийПодписи(НЗСостоянияПодписейПЛ) Экспорт
	
	Для Каждого ТекЗапись Из НЗСостоянияПодписейПЛ Цикл
		ОбновитьИконкиСостоянияПодписи(ТекЗапись);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет иконки записи состояния подписи ПЛ
//
Процедура ОбновитьИконкиСостоянияПодписи(ТекЗапись) Экспорт
	
	Если ТекЗапись.ВодительПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
	    ТекЗапись.ВодительИконка = 6;
	ИначеЕсли ТекЗапись.ВодительПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.ВодительИконка = 4;	
	ИначеЕсли ТекЗапись.ВодительПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
	    ТекЗапись.ВодительИконка = 5;
	ИначеЕсли ТекЗапись.ВодительПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.ВодительИконка = 3;
	Иначе
		ТекЗапись.ВодительИконка = 0;
	КонецЕсли;
	
	Если ТекЗапись.ДиспетчерПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
	    ТекЗапись.ДиспетчерИконка = 6;
	ИначеЕсли ТекЗапись.ДиспетчерПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.ДиспетчерИконка = 4;	
	ИначеЕсли ТекЗапись.ДиспетчерПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
	    ТекЗапись.ДиспетчерИконка = 5;
	ИначеЕсли ТекЗапись.ДиспетчерПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.ДиспетчерИконка = 3;
	ИначеЕсли ТекЗапись.ДиспетчерПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		ТекЗапись.ДиспетчерИконка = 1;
	Иначе
		ТекЗапись.ДиспетчерИконка = 0;
	КонецЕсли;
	
	Если ТекЗапись.КонтролерПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
		ТекЗапись.КонтролерИконка = 6;
	ИначеЕсли ТекЗапись.КонтролерПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.КонтролерИконка = 4;
	ИначеЕсли ТекЗапись.КонтролерПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		ТекЗапись.КонтролерИконка = 2;
	ИначеЕсли ТекЗапись.КонтролерПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
		ТекЗапись.КонтролерИконка = 5;
	ИначеЕсли ТекЗапись.КонтролерПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.КонтролерИконка = 3;
	ИначеЕсли ТекЗапись.КонтролерПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		ТекЗапись.КонтролерИконка = 1;
	Иначе
		ТекЗапись.КонтролерИконка = 0;
	КонецЕсли;
	
	Если ТекЗапись.МедработникПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
		МедработникИконка = 6;
	ИначеЕсли ТекЗапись.МедработникПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		МедработникИконка = 4;
	ИначеЕсли ТекЗапись.МедработникПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		МедработникИконка = 2;
	ИначеЕсли ТекЗапись.МедработникПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
		МедработникИконка = 5;
	ИначеЕсли ТекЗапись.МедработникПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		МедработникИконка = 3;
	ИначеЕсли ТекЗапись.МедработникПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		МедработникИконка = 1;
	Иначе
		МедработникИконка = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекЗапись.ПутевойЛист.Водитель2) Тогда
		Если ТекЗапись.МедработникПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
			МедработникВодитель2Иконка = 6;
		ИначеЕсли ТекЗапись.МедработникПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
			МедработникВодитель2Иконка = 4;
		ИначеЕсли ТекЗапись.МедработникПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
			МедработникВодитель2Иконка = 2;
		ИначеЕсли ТекЗапись.МедработникПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
			МедработникВодитель2Иконка = 5;
		ИначеЕсли ТекЗапись.МедработникПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
			МедработникВодитель2Иконка = 3;
		ИначеЕсли ТекЗапись.МедработникПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
			МедработникВодитель2Иконка = 1;
		Иначе
			МедработникВодитель2Иконка = 0;
		КонецЕсли;
	Иначе
		МедработникВодитель2Иконка = МедработникИконка;
	КонецЕсли;
	
	ТекЗапись.МедработникИконка = Мин(МедработникИконка, МедработникВодитель2Иконка);
	
	Если ТекЗапись.УполномоченныйНаПроставлениеОдометраПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 6;
	ИначеЕсли ТекЗапись.УполномоченныйНаПроставлениеОдометраПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 4;
	ИначеЕсли ТекЗапись.УполномоченныйНаПроставлениеОдометраПослерейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 2;
	ИначеЕсли ТекЗапись.УполномоченныйНаПроставлениеОдометраПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Подписан Тогда
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 5;
	ИначеЕсли ТекЗапись.УполномоченныйНаПроставлениеОдометраПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.НеПройден Тогда
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 3;
	ИначеЕсли ТекЗапись.УполномоченныйНаПроставлениеОдометраПредрейсовый = Перечисления.уатСостоянияТранспортныхДокументов.Создан Тогда
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 1;
	Иначе
		ТекЗапись.УполномоченныйНаПроставлениеОдометраИконка = 0;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ВидОтветственногоЛица(ДокументСсылка, ДопПараметры = Неопределено)
	Рез = Новый Структура("Наименование, ДопТекст");
	
	флЭтоТерминалПЛ = ДопПараметры <> Неопределено И (ДопПараметры.Свойство("ТерминалПарольПодписи")
		ИЛИ ДопПараметры.Свойство("ДопПараметры") И ДопПараметры.ДопПараметры <> Неопределено
		И ДопПараметры.ДопПараметры.Свойство("ТерминалПарольПодписи"));
		
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналМедицинскогоОсмотраВодителей") Тогда
		Рез.Наименование = "Медработник";
		Рез.ДопТекст = "медработником";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС") Тогда
		Рез.Наименование = "Контролер";
		Рез.ДопТекст = "контролером";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналУчетаПоказанийОдометра") Тогда
		Рез.Наименование = "УполномоченныйНаПроставлениеОдометра";
		Рез.ДопТекст = "уполномоченным на проставление одометра";
	ИначеЕсли ТекущийПользовательВодитель()	ИЛИ флЭтоТерминалПЛ Тогда
		Рез.Наименование = "Водитель";
		Рез.ДопТекст = "водителем";
	Иначе
		Рез.Наименование = "Диспетчер";
		Рез.ДопТекст = "диспетчером";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Функция СравнитьТабличныеЧасти(ТЧ1, ТЧ2, ПолеСравнения)
	Если ТЧ1.Количество() <> ТЧ2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч = 0 По ТЧ1.Количество()-1 Цикл
		Если ТЧ1[Сч][ПолеСравнения] <> ТЧ2[Сч][ПолеСравнения] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаписьМедосмотраПутевогоЛиста(ПутевойЛист, Водитель, Предрейсовый = Истина)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналМедицинскогоОсмотраВодителей.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЖурналМедицинскогоОсмотраВодителей КАК уатЖурналМедицинскогоОсмотраВодителей
	|ГДЕ
	|	уатЖурналМедицинскогоОсмотраВодителей.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналМедицинскогоОсмотраВодителей.Проведен
	|	И уатЖурналМедицинскогоОсмотраВодителей.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Аннулировано)
	|	И уатЖурналМедицинскогоОсмотраВодителей.ВидКонтроля = &ВидКонтроля
	|	И уатЖурналМедицинскогоОсмотраВодителей.Водитель = &Водитель");
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ВидКонтроля", ?(Предрейсовый,        
		Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый,
		Перечисления.уатВидыКонтроляТранспортныхДокументов.Послерейсовый));
	Запрос.УстановитьПараметр("Водитель", Водитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЗаписьТехконтроляПутевогоЛиста(ПутевойЛист, Предрейсовый = Истина)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС КАК уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС
	|ГДЕ
	|	уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Проведен
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Аннулировано)
	|	И уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.ВидКонтроля = &ВидКонтроля");
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ВидКонтроля", ?(Предрейсовый,
		Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый,
		Перечисления.уатВидыКонтроляТранспортныхДокументов.Послерейсовый));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции 

Функция ЗаписьОсмотровОдометровПутевогоЛиста(ПутевойЛист, Предрейсовый = Истина)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЖурналУчетаПоказанийОдометра.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЖурналУчетаПоказанийОдометра КАК уатЖурналУчетаПоказанийОдометра
	|ГДЕ
	|	уатЖурналУчетаПоказанийОдометра.ПутевойЛист = &ПутевойЛист
	|	И уатЖурналУчетаПоказанийОдометра.Проведен
	|	И уатЖурналУчетаПоказанийОдометра.ВидКонтроля = &ВидКонтроля");
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ВидКонтроля", ?(Предрейсовый,
		Перечисления.уатВидыКонтроляТранспортныхДокументов.Предрейсовый,
		Перечисления.уатВидыКонтроляТранспортныхДокументов.Послерейсовый));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
	
#КонецОбласти

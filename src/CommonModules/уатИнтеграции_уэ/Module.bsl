////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции для интеграции с внешними системами.
// 
// Вариант поставки КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АТИ

// Процедура выполняет регламентное задание уатЗагрузкаДанныхАТИ.
//
Процедура АТИ_ЗагрузкаДанныхВТендер(Тендер = Неопределено, ТекстОшибки = "") Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТендер_уэ.Ссылка КАК Ссылка,
	               |	уатТендер_уэ.Организация КАК Организация,
	               |	уатТендер_уэ.Ответственный КАК Ответственный,
	               |	уатТендер_уэ.ИдентификаторАТИ КАК ИдентификаторАТИ,
	               |	уатТендер_уэ.Биржа КАК Биржа,
	               |	уатТендер_уэ.УчетнаяЗапись КАК УчетнаяЗапись
	               |ИЗ
	               |	Документ.уатТендер_уэ КАК уатТендер_уэ
	               |ГДЕ
	               |	НЕ уатТендер_уэ.ПометкаУдаления
	               |	И уатТендер_уэ.ИдентификаторАТИ <> """"
	               |	И уатТендер_уэ.СтатусТендера <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Завершено)
	               |	И уатТендер_уэ.СтатусТендера <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Архив)";
	Если ЗначениеЗаполнено(Тендер) Тогда
		Запрос.УстановитьПараметр("Тендер", Тендер);
		Запрос.Текст = Запрос.Текст + "
		 |	И уатТендер_уэ.Ссылка = &Ссылка";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = "";
		Тендер = Выборка.Ссылка.ПолучитьОбъект();
		
		АТИ_ОбновитьСтатусГруза(Тендер, Выборка.УчетнаяЗапись, Выборка.ИдентификаторАТИ, ТекстОшибки);

		ТекстОшибки = "";
		МассивGUID  = Новый Массив();
		АТИ_ЗаполнитьОтзывыНаГруз(Тендер, Выборка.УчетнаяЗапись, Выборка.ИдентификаторАТИ, МассивGUID, ТекстОшибки);
		
		ТекстОшибки = "";
		АТИ_ЗаполнитьБезоговорочныеСделки(Тендер, Выборка.УчетнаяЗапись, Выборка.ИдентификаторАТИ, МассивGUID, ТекстОшибки);
		
		ЗаписатьДокумент = Ложь;
		Для Каждого ТекСтрока Из Тендер.Перевозчики Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.GUID) Тогда
				Продолжить;
			КонецЕсли;
			Если МассивGUID.Найти(ТекСтрока.GUID) = Неопределено Тогда
				ТекСтрока.Ответ  = Перечисления.уатРезультатТендера_уэ.Отклонен;
				ЗаписатьДокумент = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаписатьДокумент Тогда
			Попытка
				Тендер.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет статус груза.
//
Процедура АТИ_ОбновитьСтатусГруза(Тендер, УчетнаяЗапись, ИдентификаторАТИ, ТекстОшибки) Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ИдентификаторАТИ);

	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "unpublished-loads", ТекстОшибки, ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	Иначе
		Если СтруктураОтвета.Свойство("Deal")
			И СтруктураОтвета.Deal.Свойство("FixedRates") 
			И СтруктураОтвета.Deal.FixedRates.Количество() <> 0 Тогда
			Возврат;
		КонецЕсли;

		Тендер.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Архив");
		Попытка
			Тендер.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет встречные предложения.
//
Процедура АТИ_ЗаполнитьОтзывыНаГруз(Тендер, УчетнаяЗапись, ИдентификаторАТИ, МассивGUID, ТекстОшибки) Экспорт 
	
	МассивОтзывов   = АТИ_ПолучениеОтзывовНаГруз(УчетнаяЗапись, ИдентификаторАТИ, ТекстОшибки);
	
	Перевозчики = Тендер.Перевозчики;
	
	Для Каждого ТекСтрока Из МассивОтзывов Цикл
		МассивGUID.Добавить(ТекСтрока.ResponseId);
		Если ТекСтрока.IsOutdated Тогда
			Продолжить;
		КонецЕсли;
		
		ФлагОтколнен = Ложь;
		AtiId        = ТекСтрока.SenderFirmInfo.AtiId;
		МассивСтрок  = Перевозчики.НайтиСтроки(Новый Структура("GUID", ТекСтрока.ResponseId));
		Если МассивСтрок.Количество() <> 0 Тогда
			Строка = МассивСтрок[0];
			Если Строка.Ответ <> Перечисления.уатРезультатТендера_уэ.НеОбработан  Тогда
				Тендер.ДополнительныеСвойства.Вставить("флИзменениеСтатуса", Истина);
				Если Строка.Ответ = Перечисления.уатРезультатТендера_уэ.Обработан
					И Строка.ЭтоПобедитель Тогда
					ФлагОтколнен = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строка = Перевозчики.Добавить();
			Тендер.ДополнительныеСвойства.Вставить("флИзменениеСтатуса", Истина);
		КонецЕсли;
		
		СтруктураПараметров   = Новый Структура();
		
		Перевозчик            = АТИ_ПолучитьПеревозчикаПоКоду(AtiId);
		Если НЕ ЗначениеЗаполнено(Перевозчик) Тогда
			Строка.Перевозчик = ТекСтрока.FirmInfo.FullFirmName;
			
			НаборЗаписей = РегистрыСведений.уатСведенияОКонтрагентах_уэ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Контрагент.Установить(Строка.Перевозчик);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Контрагент = Строка.Перевозчик;
			НоваяЗапись.Перевозчик = Истина;
			НоваяЗапись.КодАТИ     = AtiId;
			НаборЗаписей.Записать(Истина);
		Иначе
			Строка.Перевозчик = Перевозчик;
		КонецЕсли;
		
		ДанныеПеревозчика     = уатЗащищенныеФункцииСервер_уэ.ПолучитьДанныеПеревозчика(Строка.Перевозчик);
		Строка.Услуга         = ДанныеПеревозчика.Услуга;
		Если ЗначениеЗаполнено(ДанныеПеревозчика.СтавкаНДС) Тогда 
			Строка.СтавкаНДС = ДанныеПеревозчика.СтавкаНДС;
		КонецЕсли;
		
		НаВыгрузку = Ложь;
		Строка.СтрокаЗапроса  = уатИнтеграцияБиржиАТИ_уэ.АТИ_ЗаполнитьСтрокуЗапросаПриглашенияНаСделку(ТекСтрока, Строка.Ставка, Строка.Валюта, НаВыгрузку);
		
		ТемаПисьма = СтрШаблон(Нстр("ru = 'Изменение по тендеру №%1 от %2'"), Тендер.Номер, Тендер.Дата);
		
		Тендер.ДополнительныеСвойства.Вставить("ТемаПисьма", ТемаПисьма);
		
		Телефон = ТекСтрока.FirmInfo.Contact.Mobile;		
		
		Строка.Ответ          = Перечисления.уатРезультатТендера_уэ.НеОбработан;
		Строка.ДатаОтвета     = АТИ_ПолучитьДату(ТекСтрока.UpdatedAt);
		Строка.СпособЗапроса  = Справочники.уатСпособыВзаимодействий_уэ.БиржаГрузоперевозок;
		Строка.GUID           = ТекСтрока.ResponseId;
		
		Строка.Комментарий    = "";
		
		Если ЗначениеЗаполнено(ТекСтрока.PrepayPercent) Тогда
			Строка.Комментарий   = Нстр("ru = 'предоплата '") + ТекСтрока.PrepayPercent + "%" + ?(НаВыгрузку, Нстр("ru = ', на выгрузку'"), "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.PayAfterMaxBankDays) Тогда
			Строка.Комментарий  = ?(ЗначениеЗаполнено(Строка.Комментарий), Строка.Комментарий + ", ", "Предоплата ")
			+ Нстр("ru = 'через '") + ТекСтрока.PayAfterMaxBankDays + Нстр("ru = ' банк. дней'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.LoadingDate) Тогда
			ДатаОтвета         = АТИ_ПолучитьДату(ТекСтрока.LoadingDate);
			Строка.Комментарий = ?(ЗначениеЗаполнено(Строка.Комментарий), Строка.Комментарий + ". ", "Перевозчик ")
			+ Нстр("ru = 'Перевозчик хочет перевезти груз '") + Формат(ДатаОтвета, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Note) Тогда
			Строка.Комментарий  = ?(ЗначениеЗаполнено(Строка.Комментарий), Строка.Комментарий + Символы.ПС, "")
			+ ТекСтрока.Note;
		КонецЕсли;
		
		Если НЕ ФлагОтколнен Тогда
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Поступило встречное предложение на Тендер  №%6 от %7
			|Ставка: %5
			|Дополнительно: %8
			|Фирма: ""%1""
			|Контакт:
			|%2
			|
			|%3, Телефон: %4'"), Строка.Перевозчик, ТекСтрока.FirmInfo.Contact.Name,
			ТекСтрока.FirmInfo.Contact.Location.ShortName, ?(ЗначениеЗаполнено(Телефон), Телефон + ";", ТекСтрока.FirmInfo.Contact.Telephone),
			Строка.Ставка, Тендер.Номер, Тендер.Дата, Строка.Комментарий);
		Иначе
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Перевозчик ""%1"" отклонил ваше предложение на груз по Тендеру  №%5 от %6
			|Контакт:
			|%2
			|
			|%3, Телефон: %4'"), Строка.Перевозчик, ТекСтрока.FirmInfo.Contact.Name,
			ТекСтрока.FirmInfo.Contact.Location.ShortName, ?(ЗначениеЗаполнено(Телефон), Телефон + ";", ТекСтрока.FirmInfo.Contact.Telephone), Тендер.Номер, Тендер.Дата);
			Строка.Ответ          = Перечисления.уатРезультатТендера_уэ.Отклонен;
			Строка.ЭтоПобедитель  = Ложь;
		КонецЕсли;
		
		Тендер.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщения);

		
		Попытка
			Тендер.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет безоговорочные сделки.
//
Процедура АТИ_ЗаполнитьБезоговорочныеСделки(Тендер, УчетнаяЗапись, ИдентификаторАТИ, МассивGUID, ТекстОшибки) Экспорт 
	
	МассивСделок = АТИ_ПолучениеИнформацииПоБезоговорочнымСделкам(УчетнаяЗапись, ТекстОшибки);
	Перевозчики  = Тендер.Перевозчики;

	Для Каждого ТекСтрока Из МассивСделок Цикл
		Если ИдентификаторАТИ <> ТекСтрока.Deal.LoadId Тогда
			Продолжить;
		Конецесли;
		
		МассивСтрок = Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
		Если МассивСтрок.Количество() <> 0 Тогда
			Строка = МассивСтрок[0];
		Иначе
			Тендер.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Согласование");
			
			Строка = Перевозчики.Добавить();
			Строка.ЭтоПобедитель = 1;
			
			AtiId                 = ТекСтрока.Deal.TakerAtiId;
			Перевозчик            = АТИ_ПолучитьПеревозчикаПоКоду(ТекСтрока.Deal.TakerAtiId);
			Если НЕ ЗначениеЗаполнено(Перевозчик) Тогда
				Строка.Перевозчик = ТекСтрока.Account.FullFirmName;
				
				НаборЗаписей = РегистрыСведений.уатСведенияОКонтрагентах_уэ.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Контрагент.Установить(Строка.Перевозчик);
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Контрагент = Строка.Перевозчик;
				НоваяЗапись.Перевозчик = Истина;
				НоваяЗапись.КодАТИ     = AtiId;
				НаборЗаписей.Записать(Истина);
			Иначе
				Строка.Перевозчик = Перевозчик;
			КонецЕсли;
			
			ДанныеПеревозчика     = уатЗащищенныеФункцииСервер_уэ.ПолучитьДанныеПеревозчика(Строка.Перевозчик);
			Строка.Услуга         = ДанныеПеревозчика.Услуга;
			Если ЗначениеЗаполнено(ДанныеПеревозчика.СтавкаНДС) Тогда 
				Строка.СтавкаНДС = ДанныеПеревозчика.СтавкаНДС;
			КонецЕсли;
			
			НаВыгрузку = Ложь;
			Строка.СтрокаЗапроса  = уатИнтеграцияБиржиАТИ_уэ.АТИ_ЗаполнитьСтрокуЗапросаПриглашенияНаСделку(ТекСтрока.Deal, Строка.Ставка, Строка.Валюта, НаВыгрузку, 1);
		
			Строка.ДатаОтвета     = АТИ_ПолучитьДату(ТекСтрока.Deal.UpdatedAt);
			Строка.СпособЗапроса  = Справочники.уатСпособыВзаимодействий_уэ.БиржаГрузоперевозок;

			Строка.Комментарий    = "";
			
			Payment = ТекСтрока.Deal.Payment;
			
			Если ЗначениеЗаполнено(Payment.PrepayPercent) Тогда
				Строка.Комментарий   = Нстр("ru = 'предоплата '") + Payment.PrepayPercent + "%" + ?(НаВыгрузку, Нстр("ru = ', на выгрузку'"), "");
			КонецЕсли;
			Если ЗначениеЗаполнено(Payment.PayDays) Тогда
				Строка.Комментарий  = ?(ЗначениеЗаполнено(Строка.Комментарий), Строка.Комментарий + ", ", "Предоплата ")
				+ Нстр("ru = 'через '") + Payment.PayDays + Нстр("ru = ' банк. дней'");
			КонецЕсли;
		КонецЕсли;
		Строка.GUID = ТекСтрока.Deal.DealId;
		МассивGUID.Добавить(Строка.GUID);
		
		Если ТекСтрока.Deal.Status = 1 ИЛИ ТекСтрока.Deal.Status = 2 Тогда
			Если Строка.Ответ <> Перечисления.уатРезультатТендера_уэ.Подтвержден Тогда
				Тендер.ДополнительныеСвойства.Вставить("флИзменениеСтатуса", Истина);
			КонецЕсли;
			Строка.Ответ          = Перечисления.уатРезультатТендера_уэ.Подтвержден;
			Строка.ПодтвержденПеревозчиком = Истина;
			ТемаПисьма = СтрШаблон(Нстр("ru = 'Изменение по тендеру №%1 от %2'"), Тендер.Номер, Тендер.Дата);
			
			Тендер.ДополнительныеСвойства.Вставить("ТемаПисьма", ТемаПисьма);
			
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Перевозчик %1 взял груз.'"), Строка.Перевозчик);
			
			Тендер.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщения);
			
		ИначеЕсли ТекСтрока.Deal.Status = 4 Тогда
			Если Строка.Ответ <> Перечисления.уатРезультатТендера_уэ.ПеревозчикОдобрилДокумент Тогда
				Тендер.ДополнительныеСвойства.Вставить("флИзменениеСтатуса", Истина);
			КонецЕсли;
			Строка.Ответ          = Перечисления.уатРезультатТендера_уэ.ПеревозчикОдобрилДокумент;
			Строка.ПодтвержденПеревозчиком = Истина;
			Тендер.СтатусТендера           = Справочники.уатСтатусы_уэ.ВИсполнении;
			
			ТемаПисьма = СтрШаблон(Нстр("ru = 'Изменение по тендеру №%1 от %2'"), Тендер.Номер, Тендер.Дата);
			
			Тендер.ДополнительныеСвойства.Вставить("ТемаПисьма", ТемаПисьма);
			
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Перевозчик %1 одобрил документ.'"), Строка.Перевозчик);
			
			Тендер.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщения);
			
		ИначеЕсли ТекСтрока.Deal.Status = -1
			ИЛИ ТекСтрока.Deal.Status = -2 
			ИЛИ ТекСтрока.Deal.Status = -3
			ИЛИ ТекСтрока.Deal.Status = -4 Тогда
			Если Строка.Ответ <> Перечисления.уатРезультатТендера_уэ.Отклонен Тогда
				Тендер.ДополнительныеСвойства.Вставить("флИзменениеСтатуса", Истина);
			КонецЕсли;
			Строка.Ответ          = Перечисления.уатРезультатТендера_уэ.Отклонен;
			
			ТемаПисьма = СтрШаблон(Нстр("ru = 'Изменение по тендеру №%1 от %2'"), Тендер.Номер, Тендер.Дата);
			
			Тендер.ДополнительныеСвойства.Вставить("ТемаПисьма", ТемаПисьма);
			
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Перевозчик %1 отклонил ваше приглашение на сделку.'"), Строка.Перевозчик);
			Тендер.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщения);
		ИначеЕсли ТекСтрока.Deal.Status = 5 Тогда
			Если Тендер.СтатусТендера <> Справочники.уатСтатусы_уэ.Завершено Тогда
				Тендер.ДополнительныеСвойства.Вставить("флИзменениеСтатуса", Истина);
			КонецЕсли;
			
			Тендер.СтатусТендера = Справочники.уатСтатусы_уэ.Завершено;
			
			ТемаПисьма = СтрШаблон(Нстр("ru = 'Изменение по тендеру №%1 от %2'"), Тендер.Номер, Тендер.Дата);
			
			Тендер.ДополнительныеСвойства.Вставить("ТемаПисьма", ТемаПисьма);
			
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Перевозчик %1 отклонил ваше приглашение на сделку.'"), Строка.Перевозчик);
			Тендер.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщения);
		КонецЕсли;
		Строка.ДатаОтвета         = АТИ_ПолучитьДату(ТекСтрока.Deal.UpdatedAt);
		
		
		Попытка
			Тендер.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Функция производит получение информации об аккаунте.
//
Функция АТИ_ПолучениеИнформацииОбАккаунте(УчетнаяЗапись = Неопределено, ТекстОшибки = "") Экспорт 
	ИнформацияОбАккаунте = Новый Структура();
	ИнформацияОбАккаунте = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "account", ТекстОшибки);

	Возврат ИнформацияОбАккаунте;
	
КонецФункции

// Функция производит получение списка наименований грузов.
//
Функция АТИ_ПолучениеCпискаНаименованийГрузов(ТекстОшибки = "") Экспорт 
	
	СтруктураНаименованийГрузов = Новый СписокЗначений;
	
	МассивНаименованийГрузов = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(, "cargoTypes", ТекстОшибки);
	ПоследняяСтрока = Неопределено;
	Для Каждого ТекСтрока Из МассивНаименованийГрузов Цикл
		Если ТекСтрока.Name = "Другой" Тогда
			ПоследняяСтрока = ТекСтрока;
			Продолжить;
		КонецЕсли;
		СтруктураНаименованийГрузов.Добавить(ТекСтрока.Id, Нстр("en = '" + ТекСтрока.NameEng + "'; ru = '" + ТекСтрока.Name + "'"));
	КонецЦикла;
	
	СтруктураНаименованийГрузов.СортироватьПоПредставлению();
	Если ЗначениеЗаполнено(ПоследняяСтрока) Тогда
		СтруктураНаименованийГрузов.Добавить(ПоследняяСтрока.Id, Нстр("en = '" + ПоследняяСтрока.NameEng + "'; ru = '" + ПоследняяСтрока.Name + "'"));
	КонецЕсли;

	Возврат СтруктураНаименованийГрузов;
	
КонецФункции

// Функция производит получение марки ТС.
//
Функция АТИ_ПолучениеМаркиТС(УчетнаяЗапись, id, ТекстОшибки = "") Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id", id);
	ПараметрыЗапроса.Вставить("ПрочитатьВСоответвие", Истина);
	
	Марка = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "truckbrands", ТекстОшибки, ПараметрыЗапроса);
	Возврат Марка;
	
КонецФункции

// Функция производит получение списка наименований упаковок.
//
Функция АТИ_ПолучениеCпискаНаименованийУпаковок(ТекстОшибки = "") Экспорт 
	
	СтруктураНаименованийГрузов = Новый СписокЗначений;
	
	CписокНаименованийГрузов = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(, "packTypes", ТекстОшибки);
	Для Каждого ТекСтрока Из CписокНаименованийГрузов Цикл
		СтруктураНаименованийГрузов.Добавить(ТекСтрока.Id, Нстр("en = '" + ТекСтрока.NameEng + "'; ru = '" + ТекСтрока.Name + "'"));
	КонецЦикла;
	
	Возврат СтруктураНаименованийГрузов;
	
КонецФункции

// Функция производит получение списка кузовов.
//
Функция АТИ_ПолучениеСпискаКузовов(ТекстОшибки = "") Экспорт 
	
	ТаблицаКузовов = Новый ТаблицаЗначений;
	ТаблицаКузовов.Колонки.Добавить("Идентификатор",		Новый ОписаниеТипов("Строка"));
	ТаблицаКузовов.Колонки.Добавить("ИдентификаторТипа",	Новый ОписаниеТипов("Строка"));
	ТаблицаКузовов.Колонки.Добавить("Наименование");
	ТаблицаКузовов.Колонки.Добавить("Позиция");
			
	МассивКузовов = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(, "carTypes", ТекстОшибки);
	Для Каждого ТекСтрока Из МассивКузовов Цикл
		НоваяСтрока = ТаблицаКузовов.Добавить();
		НоваяСтрока.Идентификатор     = СтрЗаменить(СтрЗаменить(Строка(ТекСтрока.ID), " ", ""), Символы.НПП, "");
		НоваяСтрока.ИдентификаторТипа = СтрЗаменить(СтрЗаменить(Строка(ТекСтрока.TypeId), " ", ""), Символы.НПП, "");
		НоваяСтрока.Наименование      = Нстр("en = '" + ТекСтрока.NameEng + "'; ru = '" + ТекСтрока.Name + "'");
		НоваяСтрока.Позиция           = ТекСтрока.Position;
	КонецЦикла;
	ТаблицаКузовов.Сортировать("Позиция");
	
	Возврат ТаблицаКузовов;
	
КонецФункции

// Функция производит получение списка вариантов загрузки.
//
Функция АТИ_ПолучениеСпискаВариантовЗагрузки(ТекстОшибки = "") Экспорт 
	
	СписокВариантовЗагрузки = Новый СписокЗначений;
		
	МассивВариантовЗагрузки = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(, "loadingTypes", ТекстОшибки);
	Для Каждого ТекСтрока Из МассивВариантовЗагрузки Цикл
		СписокВариантовЗагрузки.Добавить(ТекСтрока.ID, Нстр("en = '" + ТекСтрока.NameEng + "'; ru = '" + ТекСтрока.Name + "'"));
	КонецЦикла;
	
	Возврат СписокВариантовЗагрузки;
	
КонецФункции

// Функция производит получение списка вариантов разгрузки.
//
Функция АТИ_ПолучениеСпискаВариантовРазгрузки(ТекстОшибки = "") Экспорт 
	
	СписокВариантовРазгрузки = Новый СписокЗначений;
	
	МассивВариантовРазгрузки = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(, "unloadingTypes", ТекстОшибки);
	Для Каждого ТекСтрока Из МассивВариантовРазгрузки Цикл
		СписокВариантовРазгрузки.Добавить(ТекСтрока.ID, Нстр("en = '" + ТекСтрока.NameEng + "'; ru = '" + ТекСтрока.Name + "'"));
	КонецЦикла;
	
	Возврат СписокВариантовРазгрузки;
	
КонецФункции

// Функция производит получение списка вариантов разгрузки.
//
Функция АТИ_ПолучениеСпискаВалют(ТекстОшибки = "") Экспорт 
	
	СписокВариантовРазгрузки = Новый СписокЗначений;
	
	МассивВалют = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(, "currencyTypes", ТекстОшибки);
	Для Каждого ТекСтрока Из МассивВалют Цикл
		СписокВариантовРазгрузки.Добавить(Новый Структура("Идентификатор, Код",ТекСтрока.ID, ТекСтрока.Iso4217DigitalCode),
			Нстр("en = '" + ТекСтрока.NameEng + "'; ru = '" + ТекСтрока.Name + "'"));
	КонецЦикла;
	
	Возврат СписокВариантовРазгрузки;
	
КонецФункции


// Функция производит получение списка городов.
//
Функция АТИ_ПолучениеCпискаГородов(УчетнаяЗапись = Неопределено, НаименованиеГорода, ТекстОшибки = "") Экспорт 
	
	СписокГородов = Новый СписокЗначений;
	
	ТаблицаГородов = Новый ТаблицаЗначений;
	ТаблицаГородов.Колонки.Добавить("FullName",				Новый ОписаниеТипов("Строка"));
	ТаблицаГородов.Колонки.Добавить("CityId",				Новый ОписаниеТипов("Число"));
	ТаблицаГородов.Колонки.Добавить("IsRegionalCenter",		Новый ОписаниеТипов("Булево"));
	ТаблицаГородов.Колонки.Добавить("CitySize",				Новый ОписаниеТипов("Число"));

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("name", НаименованиеГорода);

	МассивГородов = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "cities", ТекстОшибки, ПараметрыЗапроса);
	Для Каждого ТекСтрока Из МассивГородов Цикл
		НоваяСтрока = ТаблицаГородов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ТаблицаГородов.Сортировать("IsRegionalCenter УБЫВ, CitySize УБЫВ");

	Для Каждого ТекСтрока Из ТаблицаГородов Цикл
		 СписокГородов.Добавить(ТекСтрока.CityId, ТекСтрока.FullName);
	КонецЦикла;
	
	Возврат СписокГородов;
	
КонецФункции

// Функция производит получение списка ближайших городов.
//
Функция АТИ_ПолучениеCпискаБлижайшихГородов(УчетнаяЗапись = Неопределено, cityId, ТекстОшибки = "") Экспорт 
	
	СписокГородов = Новый СписокЗначений;
	
	ТаблицаГородов = Новый ТаблицаЗначений;
	ТаблицаГородов.Колонки.Добавить("CityName",				Новый ОписаниеТипов("Строка"));
	ТаблицаГородов.Колонки.Добавить("CityId",				Новый ОписаниеТипов("Число"));
	ТаблицаГородов.Колонки.Добавить("IsRegionalCenter",		Новый ОписаниеТипов("Булево"));
	ТаблицаГородов.Колонки.Добавить("CitySize",				Новый ОписаниеТипов("Число"));
	ТаблицаГородов.Колонки.Добавить("Distance",				Новый ОписаниеТипов("Число"));

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("cityId", cityId);
	
	МассивГородов = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "cities_near", ТекстОшибки, ПараметрыЗапроса);
	Для Каждого ТекСтрока Из МассивГородов Цикл
		СтруктураГорода = АТИ_ПолучениеГорода(УчетнаяЗапись, СтрЗаменить(Строка(ТекСтрока.CityId), Символы.НПП, ""), ТекстОшибки);
		НоваяСтрока = ТаблицаГородов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураГорода);
		Если НЕ СтруктураГорода.Свойство("CityName") Тогда
			НоваяСтрока.CityName = Нстр("ru = '" + ТекСтрока.Name + "'");
		КонецЕсли;
		НоваяСтрока.Distance = ТекСтрока.Distance;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаГородов Цикл
		СписокГородов.Добавить(СтрЗаменить(Строка(ТекСтрока.CityId), Символы.НПП, ""), Нстр("ru = '" + ТекСтрока.CityName + "'")
			+ ?(ЗначениеЗаполнено(ТекСтрока.Distance), " (" + ТекСтрока.Distance + "км)",""));
	КонецЦикла;
	
	Возврат СписокГородов;
	
КонецФункции

// Функция производит получение конкретного города по его идентификатору.
//
Функция АТИ_ПолучениеГорода(УчетнаяЗапись = Неопределено, cityId, ТекстОшибки = "") Экспорт 
	
	СтруктураГорода = Новый Структура;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("cityId", cityId);
	
	СтруктураГородаОтвет = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "cities", ТекстОшибки, ПараметрыЗапроса);
	Если ТипЗнч(СтруктураГородаОтвет) = Тип("Структура") Тогда
		Возврат СтруктураГородаОтвет;
	Иначе
		Возврат СтруктураГорода;
	КонецЕсли;
	
КонецФункции

// Функция производит получение списка площадок, доступных для размещения грузов.
//
Функция АТИ_ПолучениеСпискаПлощадокДляРазмещения(УчетнаяЗапись = Неопределено, ТекстОшибки = "") Экспорт 
	
	МассивПлощадокДляРазмещения = Новый Массив;
	
	ДанныеЗапроса = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "board_canAdd", ТекстОшибки);
	Для Каждого ТекСтрока Из ДанныеЗапроса Цикл
		Если ТекСтрока.ID = "a0a0a0a0a0a0a0a0a0a0a0a0" Тогда
			Продолжить;
		КонецЕсли;
		ИнформацииОплощадке = Новый Структура("Идентификатор, Наименование, Цвет, Представление");
		ИнформацииОплощадке.Идентификатор = ТекСтрока.ID;
		ИнформацииОплощадке.Наименование  = ТекСтрока.Name;
		ИнформацииОплощадке.Цвет          = ТекСтрока.Color;
		ИнформацииОплощадке.Представление = ТекСтрока.Name;
		МассивПлощадокДляРазмещения.Добавить(ИнформацииОплощадке);
	КонецЦикла;
	
	ИнформацииОплощадке = Новый Структура("Идентификатор, Наименование, Цвет, Представление");
	ИнформацииОплощадке.Идентификатор = "a0a0a0a0a0a0a0a0a0a0a0a0";
	ИнформацииОплощадке.Наименование  = "Общая";
	ИнформацииОплощадке.Цвет          = "#8c969d";
	ИнформацииОплощадке.Представление = Нстр("ru = 'Все Участники АТИ участвуют в этой площадке'");
	МассивПлощадокДляРазмещения.Добавить(ИнформацииОплощадке);
		
	Возврат МассивПлощадокДляРазмещения;
	
КонецФункции

// Функция производит получение информации о площадке.
//
Функция АТИ_ПолучениеИнформацииОплощадке(УчетнаяЗапись = Неопределено, IDПлощадки, ТекстОшибки = "") Экспорт 
	
	СтруктураНаименованийГрузов = Новый СписокЗначений;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("IDПлощадки", IDПлощадки);
	
	CписокНаименованийГрузов = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "board", ТекстОшибки, ПараметрыЗапроса);
	
	Возврат CписокНаименованийГрузов;
	
КонецФункции


// Функция производит добавление груза.
//
Функция АТИ_ДобавлениеГруза(УчетнаяЗапись = Неопределено, ПараметрыЗапроса, ТекстОшибки = "") Экспорт 
	
	Id = "";
	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "loads", ТекстОшибки, ПараметрыЗапроса);
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
		И СтруктураОтвета.Свойство("Id") <> Неопределено Тогда
		Id = СтруктураОтвета.Id;
	КонецЕсли;
	
	Возврат Id;
	
КонецФункции

// Процедура производит удаление груза.
//
Процедура АТИ_УдалениеГруза(УчетнаяЗапись = Неопределено, ID, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ID);
	СтруктураОтвета  = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "loads_DELETE", ТекстОшибки, ПараметрыЗапроса);
	
КонецПроцедуры

// Функция позволяет отклоненить заявку грузовладельцем.
//
Функция АТИ_ОтклонениеЗаявкиГрузовладельцем(УчетнаяЗапись = Неопределено, ID, ПричинаОтклонения, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ID);
	ПараметрыЗапроса.Вставить("ПричинаОтклонения", ПричинаОтклонения);
	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "DELETE", ТекстОшибки, ПараметрыЗапроса);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Функция производит получение ссылки на попап редактирования документа
//
Функция АТИ_СозданиеЗаявки(УчетнаяЗапись = Неопределено, ИдентификаторАТИ, ТекстОшибки = "") Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ИдентификаторАТИ);

	Ссылка = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "redirect_to_deal", ТекстОшибки, ПараметрыЗапроса);

	Возврат Ссылка;
	
КонецФункции


// Функция позволяет удалить груз с указанным id.
//
Функция АТИ_УдалениеГрузаИзАрхива(УчетнаяЗапись = Неопределено, ID, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ID);
	
	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "unpublished_DELETE", ТекстОшибки, ПараметрыЗапроса);

	Возврат СтруктураОтвета;
	
КонецФункции

// Функция выставляет статус заявки "Перевозка завершена грузоотправителем" при отправке запроса с аккаунта грузоотправителя.
//
Функция АТИ_ЗавершениеПеревозки(УчетнаяЗапись = Неопределено, ID, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", ID);
	
	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "finish", ТекстОшибки, ПараметрыЗапроса);

	Возврат СтруктураОтвета;
	
КонецФункции


// Функция отправляет приглашение оформить сделку.
//
Функция АТИ_ПриглашениеНаСделку(УчетнаяЗапись = Неопределено, ID, ResponseId, СтрокаЗапроса, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID",            ID);
	ПараметрыЗапроса.Вставить("ResponseId",    ResponseId);
	ПараметрыЗапроса.Вставить("СтрокаЗапроса", СтрокаЗапроса);
	
	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "counter_offer", ТекстОшибки, ПараметрыЗапроса);

	СтрокаОтвета = СтрЗаменить(Сред(СтруктураОтвета, СтрНайти(СтруктураОтвета, "#makedeal/"), СтрДлина(СтруктураОтвета)), "#makedeal/", "");
	СтрокаОтвета = Сред(СтрокаОтвета, 0, 36);
	Возврат СтрокаОтвета;
	
КонецФункции

// Смена статуса безоговорочной сделки на "Просмотрено".
//
Функция АТИ_СменаСтатусаБезоговорочнойСделкиНаПросмотрено(УчетнаяЗапись = Неопределено, id_безоговорочной_сделки, ТекстОшибки = "") Экспорт 
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", id_безоговорочной_сделки);
	
	Ответ = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "fixedrate_view", ТекстОшибки, ПараметрыЗапроса);
	Возврат Ответ;
	
КонецФункции

// Функция позволяет получение отзывы на груз.
//
Функция АТИ_ПолучениеОтзывовНаГруз(УчетнаяЗапись = Неопределено, id, ТекстОшибки = "") Экспорт 
	
	МассивОтзывов = Новый Массив();
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", id);

	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "responses", ТекстОшибки,ПараметрыЗапроса);
	Если ТипЗнч(СтруктураОтвета) = Тип("Массив") Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	Возврат МассивОтзывов;
	
КонецФункции

// Функция позволяет получить информацию по безоговорочным сделкам.
//
Функция АТИ_ПолучениеИнформацииПоБезоговорочнымСделкам(УчетнаяЗапись = Неопределено, id, ТекстОшибки = "") Экспорт 
	
	МассивСделок = Новый Массив();

	СтруктураОтвета = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "fixedrate");
	Если ТипЗнч(СтруктураОтвета) = Тип("Массив") Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	Возврат МассивСделок;
	
КонецФункции

// Функция позволяет получить Заказ, в котором пользователь принимает участие.
//
Функция АТИ_ПолучениеИнформацииПоЗаказу(УчетнаяЗапись, id, ТекстОшибки = "") Экспорт 
	
	РезультатЗапроса = Новый Соответствие();
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", id);
	ПараметрыЗапроса.Вставить("ПрочитатьВСоответвие", Истина);
	
	РезультатЗапроса = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "orders", ТекстОшибки, ПараметрыЗапроса);
	Если ТипЗнч(РезультатЗапроса) = Тип("Соответствие") Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция позволяет получить Заказ, в котором пользователь принимает участие.
//
Функция АТИ_ПолучениеИнформацииТСВодитель(УчетнаяЗапись, id, Организация, Подразделение, Победитель, ТекстОшибки = "") Экспорт 
	
	Результат = Новый Структура("ТС,Прицеп1,Прицеп2,Водитель");
	
	РезультатЗапроса = АТИ_ПолучениеИнформацииПоЗаказу(УчетнаяЗапись, id, ТекстОшибки); 

	ОсновнаяИнформацияОЗаказе = РезультатЗапроса.Получить("deal");
	ИнформацияОТС             = ОсновнаяИнформацияОЗаказе.Получить("truck");
	ИнформацияОПрицепе        = ОсновнаяИнформацияОЗаказе.Получить("trailer");
	ИнформацияОПрицепе2       = ОсновнаяИнформацияОЗаказе.Получить("semi_trailer");
	ИнформацияОВодителе       = ОсновнаяИнформацияОЗаказе.Получить("driver");

	Если НЕ ЗначениеЗаполнено(Победитель) 
		ИЛИ ТипЗнч(Победитель) = Тип("Строка") Тогда 
		Попытка 
			РеквизитыПеревозчика = ОсновнаяИнформацияОЗаказе.Получить("taker_requisites");
			Победитель = АТИ_НайтиСоздатьКонтрагента(УчетнаяЗапись, РеквизитыПеревозчика, Победитель);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Определим ТС
	Если ЗначениеЗаполнено(ИнформацияОТС) Тогда
		Попытка
			Результат.ТС = АТИ_НайтиСоздатьТС(УчетнаяЗапись, ИнформацияОТС, Организация, Подразделение, Победитель);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияОПрицепе) Тогда  
		Попытка
			Результат.Прицеп1 = АТИ_НайтиСоздатьТС(УчетнаяЗапись, ИнформацияОПрицепе, Организация, Подразделение, Победитель);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияОПрицепе) Тогда 
		Попытка
			Результат.Прицеп2 = АТИ_НайтиСоздатьТС(УчетнаяЗапись, ИнформацияОПрицепе2, Организация, Подразделение, Победитель);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияОВодителе) Тогда   
		Попытка
			Результат.Водитель = АТИ_НайтиСоздатьВодителя(УчетнаяЗапись, ИнформацияОВодителе, Организация, Подразделение, Победитель);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область WMS

// Процедура выполняет регламентное задание уатСинхронизацияДанныхСWMS_уэ.
//
Процедура СинхронизацияДанныхСWMS() Экспорт
	ВыгрузитьДанныеВWMS();
	ОбработатьЗагруженныеДанныеИзWMS();
КонецПроцедуры

// Процедура обходит регистр уатОчередьВыгрузкиВWMS_уэ и для каждой записи отправляет сообщение в http-сервис WMS
// 
Процедура ВыгрузитьДанныеВWMS() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	АдресПубликацииWMS = "";
	HTTPСоединение = Неопределено;
	Если Не УстановитьHttpСоединениеWMS(HTTPСоединение, ТекстОшибки, АдресПубликацииWMS) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с WMS: Критическая ошибка'"),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатОчередьВыгрузкиВWMS_уэ.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	уатОчередьВыгрузкиВWMS_уэ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатОчередьВыгрузкиВWMS_уэ.ДанныеСообщения КАК ДанныеСообщения,
	|	уатОчередьВыгрузкиВWMS_уэ.ДатаСоздания КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА уатСтатусыСинхронизацииСWMSСрезПоследних.СтатусВыгрузкиВWMS ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНовыйЗаказПРР
	|ИЗ
	|	РегистрСведений.уатОчередьВыгрузкиВWMS_уэ КАК уатОчередьВыгрузкиВWMS_уэ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.СрезПоследних(, СтатусВыгрузкиВWMS = ЗНАЧЕНИЕ(Перечисление.уатСтатусыОбменаСWMS_уэ.Отправлено)) КАК уатСтатусыСинхронизацииСWMSСрезПоследних
	|		ПО уатОчередьВыгрузкиВWMS_уэ.МаршрутныйЛист = уатСтатусыСинхронизацииСWMSСрезПоследних.МаршрутныйЛист
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания
	|ИТОГИ
	|	МАКСИМУМ(ЭтоНовыйЗаказПРР)
	|ПО
	|	МаршрутныйЛист");
	ВыборкаМаршрутныеЛисты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаршрутныеЛисты.Следующий() Цикл
		ВыборкаДетали = ВыборкаМаршрутныеЛисты.Выбрать();
		ЭтоНовыйЗаказПРР = ВыборкаМаршрутныеЛисты.ЭтоНовыйЗаказПРР;
		Пока ВыборкаДетали.Следующий() Цикл
			ВыгружаемыеДанные = ВыборкаДетали.ДанныеСообщения.Получить();
			Если ВыгружаемыеДанные = Неопределено Тогда
				// В хранилище значений находятся некорректные данные. Пропускаем эту запись.
				Продолжить;
			КонецЕсли;
			
			ИдентификаторЗаказаПРРСтрокой = Строка(ВыборкаДетали.МаршрутныйЛист.УникальныйИдентификатор());
			ПередатьЗаказПРРНаСерверWMS(HTTPСоединение, АдресПубликацииWMS, ВыгружаемыеДанные, ЭтоНовыйЗаказПРР, ИдентификаторЗаказаПРРСтрокой, ВыборкаДетали.МаршрутныйЛист);
			
			// После обработки в WMS предыдущего сообщения Заказ ПРР будет создан
			ЭтоНовыйЗаказПРР = Ложь;
		КонецЦикла;
		
		// Очистка записей регистра по обработанному маршрутному листу
		НаборЗаписей = РегистрыСведений.уатОчередьВыгрузкиВWMS_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МаршрутныйЛист.Установить(ВыборкаМаршрутныеЛисты.МаршрутныйЛист);
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура обходит регистр уатОчередьЗагрузкиИзWMS_уэ с данными, полученными из WMS, и для каждой записи 
// изменяет фактическое время прибытия в Маршрутном листе по данным WMS
Процедура ОбработатьЗагруженныеДанныеИзWMS() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ") Тогда
		Возврат;
	КонецЕсли;
	
	СкладWMS = Константы.уатСкладДляОбменаСWMS_уэ.Получить();
	Если ЗначениеЗаполнено(СкладWMS) Тогда
		МенЗаписи = РегистрыСведений.уатАдресаСкладов_уэ.СоздатьМенеджерЗаписи();
		МенЗаписи.Склад = СкладWMS;
		МенЗаписи.Прочитать();
		АдресСкладаWMS = МенЗаписи.Адрес;
	Иначе
		ТекстОшибки = НСтр("ru='В настройках WMS не заполнен склад'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с WMS: Критическая ошибка'"),
			УровеньЖурналаРегистрации.Ошибка,,,	ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресСкладаWMS) Тогда
		ТекстОшибки = НСтр("ru='У склада WMS ""%1"" не заполнен адрес'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СкладWMS);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с WMS: Критическая ошибка'"),
			УровеньЖурналаРегистрации.Ошибка,,,	ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатОчередьЗагрузкиИзWMS_уэ.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	уатОчередьЗагрузкиИзWMS_уэ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатОчередьЗагрузкиИзWMS_уэ.ДанныеСообщения КАК ДанныеСообщения,
	|	уатОчередьЗагрузкиИзWMS_уэ.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.уатОчередьЗагрузкиИзWMS_уэ КАК уатОчередьЗагрузкиИзWMS_уэ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания
	|ИТОГИ ПО
	|	МаршрутныйЛист");
	ВыборкаМаршрутныеЛисты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаршрутныеЛисты.Следующий() Цикл
		ВыборкаДетали = ВыборкаМаршрутныеЛисты.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ЗагруженныеДанные = ВыборкаДетали.ДанныеСообщения.Получить();
			Если ЗагруженныеДанные = Неопределено Тогда
				// В хранилище значений находятся некорректные данные. Пропускаем эту запись.
				Продолжить;
			КонецЕсли;
			
			УстановитьПрохождениеСклада(ВыборкаДетали.МаршрутныйЛист, АдресСкладаWMS, ЗагруженныеДанные);
		КонецЦикла;
		
		// Очистка записей регистра по обработанному маршрутному листу
		НаборЗаписей = РегистрыСведений.уатОчередьЗагрузкиИзWMS_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МаршрутныйЛист.Установить(ВыборкаМаршрутныеЛисты.МаршрутныйЛист);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЗаписьОчередиВыгрузки(МаршрутныйЛист, СтруктураДанных) Экспорт
	
	// Перевод данных из ссылочных в строковые, чтобы не возникло проблем с битыми ссылками в Хранилище значений.
	ДанныеСообщения = Новый Структура;
	Если СтруктураДанных.Свойство("Активность") Тогда
		ДанныеСообщения.Вставить("Активность", СтруктураДанных.Активность);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Организация") Тогда
		ДанныеОрганизации = ИнициализироватьДанныеОрганизации();
		ДанныеОрганизации.Ид = Строка(СтруктураДанных.Организация.УникальныйИдентификатор());
		ДанныеОрганизации.ПолноеНаименование = СтруктураДанных.Организация.НаименованиеПолное;
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, СтруктураДанных.Организация);
		ДанныеСообщения.Вставить("Организация", ДанныеОрганизации);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Водитель") Тогда
		ДанныеВодителя = ИнициализироватьДанныеСотрудника();
		Если ТипЗнч(СтруктураДанных.Водитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			ФизЛицоВодителя = СтруктураДанных.Водитель.ФизическоеЛицо;
		Иначе
			ФизЛицоВодителя = СтруктураДанных.Водитель;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДанныеВодителя, ФизЛицоВодителя);
		ДанныеВодителя.Ид = Строка(ФизЛицоВодителя.УникальныйИдентификатор());
		ДанныеВодителя.Пол = КонвертироватьПолВСтроку(ДанныеВодителя.Пол);
		ДанныеВодителя.Телефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ФизЛицоВодителя,
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,,, Новый Структура("ТолькоПервая", Истина));
		ДанныеВодителя.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ФизЛицоВодителя,
			Справочники.ВидыКонтактнойИнформации.EmailФизЛица,,, Новый Структура("ТолькоПервая", Истина));
		ДанныеСообщения.Вставить("Водитель", ДанныеВодителя);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ДокументВодителя") Тогда
		ДанныеСообщения.Вставить("ДокументВодителя", СтруктураДанных.ДокументВодителя);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ТС") Тогда
		ДанныеТС = ИнициализироватьДанныеТС();
		ДанныеТС.Ид = Строка(СтруктураДанных.ТС.УникальныйИдентификатор());
		ДанныеТС.Наименование = СтруктураДанных.ТС.Наименование;
		ДанныеТС.РегНомер = СтруктураДанных.ТС.ГосударственныйНомер;
		МодельТС = СтруктураДанных.ТС.Модель;
		Если ЗначениеЗаполнено(МодельТС) Тогда
			ДанныеМодели = ИнициализироватьДанныеМоделиТС();
			ЗаполнитьЗначенияСвойств(ДанныеМодели, МодельТС);
			ДанныеМодели.Ид = Строка(МодельТС.УникальныйИдентификатор());
			ДанныеМодели.Объем = МодельТС.ОбъемКузова;
			ДанныеМодели.КоличествоМест = МодельТС.МаксимальноеКоличествоУпаковок;
			// API требует передавать грузоподъемность в тоннах, а объем кузова ТС - в кубометрах
			Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
				ДанныеМодели.Грузоподъемность = ДанныеМодели.Грузоподъемность * 1000;
			КонецЕсли;
			Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
				ДанныеМодели.Объем = ДанныеМодели.Объем * 1000;
			КонецЕсли;
			ДанныеТС.Модель = ДанныеМодели;
		КонецЕсли;
		ДанныеСообщения.Вставить("ТранспортноеСредство", ДанныеТС);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ФИОЭкспедитора") Тогда
		ДанныеСообщения.Вставить("ФИОЭкспедитора", СтруктураДанных.ФИОЭкспедитора);
	КонецЕсли;
	Если СтруктураДанных.Свойство("СоставЗаказа") Тогда
		СоставЗаказа = Новый Массив;
		Для Каждого ТекДанныеЗаказа Из СтруктураДанных.СоставЗаказа Цикл
			СоставЗаказа.Добавить(ТекДанныеЗаказа);
		КонецЦикла;
		ДанныеСообщения.Вставить("СоставЗаказа", СоставЗаказа);
	КонецЕсли;
	
	// Создание записи регистра
	Запись = РегистрыСведений.уатОчередьВыгрузкиВWMS_уэ.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторСообщения = Новый УникальныйИдентификатор;
	Запись.ДанныеСообщения = Новый ХранилищеЗначения(ДанныеСообщения, Новый СжатиеДанных(9));
	Запись.ДатаСоздания = ТекущаяДатаСеанса();
	Запись.МаршрутныйЛист = МаршрутныйЛист;
	Запись.Записать();

КонецФункции

Функция СериализоватьВJSON(ДанныеДляСериализации) Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляСериализации);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ДесериализоватьJSON(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);	
	ДесериализованныеДанные = ПрочитатьJSON(ЧтениеJSON);
	
	
	Возврат ДесериализованныеДанные;
	
КонецФункции

Функция ДесериализоватьДатуISO(ДатаISOСтрокой) Экспорт
	
	Возврат XMLЗначение(Тип("Дата"), ДатаISOСтрокой);
	
КонецФункции

Функция ПроверитьСоединениеСWMS(ТекстОшибки) Экспорт
	
	Результат = Истина;
	
	АдресПубликацииWMS = "";
	HTTPСоединение = Неопределено;
	Если Не УстановитьHttpСоединениеWMS(HTTPСоединение, ТекстОшибки, АдресПубликацииWMS) Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Метод = "GET";
	АдресРесурса = АдресПубликацииWMS + "/hs/tms_api/test";
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса);
	
	Попытка		
		ОтветСервера = HTTPСоединение.ВызватьHTTPМетод(Метод, ЗапросHTTP);
		Если ОтветСервера = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ответ от сервера WMS не получен'");
			Результат = Ложь;
		Иначе
			ОтветСтрокой = ОтветСервера.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ОтветСтрокой) И ЭтоСтрокаJSON(ОтветСтрокой) Тогда
				ДанныеОтвета = ДесериализоватьJSON(ОтветСтрокой);
				Если Не (ТипЗнч(ДанныеОтвета) = Тип("Структура")
					И ДанныеОтвета.Свойство("ОК")
					И ДанныеОтвета.ОК) Тогда
					ТекстОшибки = ДанныеОтвета.ПолучитьТелоКакСтроку();
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ОтветСтрокой) Тогда
				ТекстОшибки = НСтр("ru = 'Ответ сервера WMS: %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ОтветСтрокой);
				ТекстОшибки = ОтветСтрокой;
				Результат = Ложь;
			Иначе
				ТекстОшибки = НСтр("ru = 'Ответ сервера WMS пустой, код ошибки http %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ОтветСервера.КодСостояния);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(Инфо);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'При проверке подключения произошла ошибка. Подключение не установлено'");
		КонецЕсли;
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеТипаТочкиМаршрутаДляWMS(ТипТочкиМаршрута) Экспорт
	
	Если ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
		Или ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
		Результат = "погрузка";
	ИначеЕсли
		ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
		Или ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
		Результат = "разгрузка";
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Процедура выполняет регламентное задание уатЗагрузкаДанныхАТИ.
//
Процедура АТИ_ЗагрузкаДанных() Экспорт 
	
	ИмяСобытияВЖурналеРегистрации = НСтр("en='Download АТИ data';ru='Загрузка данных АТИ'");
	
	ТекстНСТР = НСтр("en='Start the download session';ru='Начало сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);

	АТИ_ЗагрузкаДанныхВТендер();
	
	ТекстНСТР = НСтр("en='The end of the download session';ru='Окончание сеанса загрузки'");
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
	
КонецПроцедуры

#КонецОбласти

#Область АТИ

Функция ПолучитьУчетнуюЗапись(Биржа, Организация, Ответственный) Экспорт
	
	УчетнаяЗапись = Справочники.уатУчетныеЗаписиБирж.ПустаяСсылка();
	УчетныеЗаписи = Биржа.УчетныеЗаписи;
	НужныеСтроки  = УчетныеЗаписи.НайтиСтроки(Новый Структура("Организация, Пользователь", Организация, Ответственный));
	Если НужныеСтроки.Количество() = 0 Тогда
		НужныеСтроки  = УчетныеЗаписи.НайтиСтроки(Новый Структура("Организация", Организация));
		Если НужныеСтроки.Количество() <> 0 Тогда
			УчетнаяЗапись = НужныеСтроки[0].УчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	Возврат УчетнаяЗапись;
	
КонецФункции

Функция АТИ_ПолучитьПеревозчикаПоКоду(КодАТИ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодАТИ", КодАТИ);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	уатСведенияОКонтрагентах_уэ.Контрагент КАК Ссылка,
	               |	уатСведенияОКонтрагентах_уэ.КодАТИ КАК КодАТИ
	               |ИЗ
	               |	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	               |ГДЕ
	               |	уатСведенияОКонтрагентах_уэ.КодАТИ = &КодАТИ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции
	
Функция АТИ_ПолучитьДату(ДатаСтрока)

	ТребуемаяДата = СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаСтрока, "-", ""), "T", ""), ":", "");
	Попытка
		ТребуемаяДата = Дата(Сред(ТребуемаяДата, 0, СтрНайти(ТребуемаяДата, ".")-1));
		Возврат МестноеВремя(ТребуемаяДата, ЧасовойПояс());
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
КонецФункции

Функция АТИ_ПолучитьВалюту(ВалютаID) Экспорт

	Валюта      = "";
	ТекстОшибки = "";
	СписокВалют = АТИ_ПолучениеСпискаВалют(ТекстОшибки);
	Для Каждого ТекСтрока Из СписокВалют Цикл
		Если ТекСтрока.Значение.Идентификатор = ВалютаID Тогда
			Валюта = ТекСтрока.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Валюта;
	
КонецФункции

Функция АТИ_ПолучитьКодАТИПеревозчика(Перевозчик) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Перевозчик", Перевозчик);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	уатСведенияОКонтрагентах_уэ.Контрагент КАК Ссылка,
	               |	уатСведенияОКонтрагентах_уэ.КодАТИ КАК КодАТИ
	               |ИЗ
	               |	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	               |ГДЕ
	               |	уатСведенияОКонтрагентах_уэ.Контрагент = &Перевозчик";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодАТИ;
	КонецЕсли;

КонецФункции

Функция АТИ_НайтиСоздатьВодителя(УчетнаяЗапись, ИнформацияОВодитетеле, Организация, Подразделение, Победитель) 
	// Поля для поиска
	Имя           = ИнформацияОВодитетеле.Получить("first_name"); 
	Отчество      = ИнформацияОВодитетеле.Получить("patronymic");
	Фамилия       = ИнформацияОВодитетеле.Получить("second_name");
	ИНН           = ИнформацияОВодитетеле.Получить("driver_inn");
	НомерПаспорта = ИнформацияОВодитетеле.Получить("passport_number"); 
	СерияПаспорта = ИнформацияОВодитетеле.Получить("passport_series");
	НомерВД       = ИнформацияОВодитетеле.Получить("driver_license_number");
	
	Если НЕ ЗначениеЗаполнено(Имя)
		И НЕ ЗначениеЗаполнено(Отчество) 
		И НЕ ЗначениеЗаполнено(Фамилия)
		И НЕ ЗначениеЗаполнено(ИНН)
		И НЕ ЗначениеЗаполнено(НомерПаспорта)
		И НЕ ЗначениеЗаполнено(НомерВД) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.ИНН КАК ИНН,
	|	ФизическиеЛица.ФИО КАК ФИО,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ПО (ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|				,
	|				ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение)
	|					ИЛИ ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО (ДокументыФизическихЛицСрезПоследних.Физлицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	НЕ ФизическиеЛица.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если (ЗначениеЗаполнено(Имя)
			И ЗначениеЗаполнено(Выборка.Имя) 
			И СтрЗаменить(НРег(Имя), " ", "") = СтрЗаменить(НРег(Выборка.Имя), " ", ""))
			И (ЗначениеЗаполнено(Фамилия)
			И ЗначениеЗаполнено(Выборка.Фамилия) 
			И СтрЗаменить(НРег(Фамилия), " ", "") = СтрЗаменить(НРег(Выборка.Фамилия), " ", "")) Тогда
			
			Если ЗначениеЗаполнено(Отчество) Тогда
				Если ЗначениеЗаполнено(Выборка.Отчество) 
					И СтрЗаменить(НРег(Отчество), " ", "") = СтрЗаменить(НРег(Выборка.Отчество), " ", "") Тогда
					Возврат Выборка.Ссылка;
				КонецЕсли;
			Иначе
				Возврат Выборка.Ссылка; 
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ИНН)
			И ЗначениеЗаполнено(Выборка.ИНН) 
			И СтрЗаменить(НРег(ИНН), " ", "") = СтрЗаменить(НРег(Выборка.ИНН), " ", "") Тогда
			Возврат Выборка.Ссылка;
		ИначеЕсли Выборка.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение Тогда 
			Если ЗначениеЗаполнено(НомерВД)
				И ЗначениеЗаполнено(Выборка.Номер) 
				И СтрЗаменить(НРег(НомерВД), " ", "") = СтрЗаменить(НРег(Выборка.Номер), " ", "") Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		ИначеЕсли Выборка.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			Если ЗначениеЗаполнено(НомерПаспорта)
				И ЗначениеЗаполнено(Выборка.Номер) 
				И СтрЗаменить(НРег(НомерПаспорта), " ", "") = СтрЗаменить(НРег(Выборка.Номер), " ", "")
				И СтрЗаменить(НРег(СерияПаспорта), " ", "") = СтрЗаменить(НРег(Выборка.Серия), " ", "") Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		Конецесли;
	КонецЦикла;
	
	ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФизЛицоОбъект.Наименование  = Фамилия + " " + Имя + " " + Отчество;
	ФизЛицоОбъект.ДатаРождения  = уатИнтеграции_проф.ПреобразоватьДатуИзСтроки(ИнформацияОВодитетеле.Получить("date_of_birth"));
	ФизЛицоОбъект.ФИО           = Фамилия + " " + Имя + " " + Отчество; 
	ФизЛицоОбъект.ИНН           = ИНН;

	Если ИнформацияОВодитетеле.Получить("in_cargo_owner_black_list") = Истина Тогда
		ФизЛицоОбъект.Комментарий  = НСТР("ru = 'Водитель есть в Черном списке'"); 
		Если ЗначениеЗаполнено(ИнформацияОВодитетеле.Получить("black_list_reasons")) Тогда
			ФизЛицоОбъект.Комментарий  = ФизЛицоОбъект.Комментарий + ИнформацияОВодитетеле.Получить("black_list_reasons");
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИнформацияОВодитетеле.Получить("description")) Тогда
		ФизЛицоОбъект.Комментарий  = ?(ЗначениеЗаполнено(ФизЛицоОбъект.Комментарий), ФизЛицоОбъект.Комментарий + " ", "") +
			ИнформацияОВодитетеле.Получить("description");
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияОВодитетеле.Получить("phone_number")) Тогда 
		НовСтрока = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
		НовСтрока.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовСтрока.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
		НовСтрока.Представление = ИнформацияОВодитетеле.Получить("phone_number");
		НовСтрока.НомерТелефона = НовСтрока.Представление;
		НовСтрока.НомерТелефонаБезКодов = НовСтрока.Представление;
	КонецЕсли;

	ФизЛицоОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.уатСотрудникиКонтрагентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизЛицо        = ФизЛицоОбъект.Ссылка;
	МенеджерЗаписи.Контрагент     = Победитель;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период         = '19700101';
	МенеджерЗаписи.ФизическоеЛицо = ФизЛицоОбъект.Ссылка;
	МенеджерЗаписи.Фамилия        = Фамилия;
	МенеджерЗаписи.Имя            = Имя;
	МенеджерЗаписи.Отчество       = Отчество;
	МенеджерЗаписи.Записать(Истина);
	
	Если ЗначениеЗаполнено(НомерПаспорта) Тогда 
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период           = ТекущаяДатаСеанса();
		МенеджерЗаписи.ФизЛицо          = ФизЛицоОбъект.Ссылка;
		МенеджерЗаписи.ВидДокумента     = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;   
		МенеджерЗаписи.Серия            = ИнформацияОВодитетеле.Получить("passport_series");
		МенеджерЗаписи.Номер            = ИнформацияОВодитетеле.Получить("passport_number");
		МенеджерЗаписи.КемВыдан         = ИнформацияОВодитетеле.Получить("passport_issued_by");
		МенеджерЗаписи.КодПодразделения = ИнформацияОВодитетеле.Получить("department_code_in_passport");

		МенеджерЗаписи.ДатаВыдачи     = уатИнтеграции_проф.ПреобразоватьДатуИзСтроки(ИнформацияОВодитетеле.Получить("passport_when_issued"));
		МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение 
		КонецПопытки;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(НомерВД) Тогда 
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Период         = ТекущаяДатаСеанса();
		МенеджерЗаписи.ФизЛицо        = ФизЛицоОбъект.Ссылка;
		МенеджерЗаписи.ВидДокумента   = Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение;   
		МенеджерЗаписи.Номер          = ИнформацияОВодитетеле.Получить("driver_license_number"); 
		Если НЕ ЗначениеЗаполнено(НомерПаспорта) Тогда
			МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина; 
		КонецЕсли;
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение 
		КонецПопытки;
	
	Конецесли;
	
	Сканы = ИнформацияОВодитетеле.Получить("scans"); 
	Если ТипЗнч(Сканы) = Тип("Массив") Тогда 
		ТекстОшибкиФайл = "";
		ВременныйФайл   = ПолучитьИмяВременногоФайла("html");
		Для Каждого ТекДокумент Из Сканы Цикл 
			Попытка  
				url      = ТекДокумент.Получить("path");
				ИмяФайла = ТекДокумент.Получить("name");
				
				РасширениеФайла = ПолучитьРасширениеФайла(ИмяФайла);
				ИмяФайла        = СтрЗаменить(Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца)+1,
					СтрДлина(ИмяФайла)),"." + РасширениеФайла, "");
				
				Результат = уатИнтеграцияБиржиАТИ_уэ.АТИ_ЗагрузитьФайлССервера(
				УчетнаяЗапись,
				url,
				ВременныйФайл,
				ТекстОшибкиФайл
				);
				ДанныеФайла = Новый ДвоичныеДанные(ВременныйФайл);
				
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
				СведенияОФайле.РасширениеБезТочки             = РасширениеФайла;
				СведенияОФайле.ВремяИзменения                 = ТекущаяДатаСеанса();
				СведенияОФайле.ВремяИзмененияУниверсальное    = ТекущаяУниверсальнаяДата();
				СведенияОФайле.Размер                         = ДанныеФайла.Размер();
				СведенияОФайле.АдресВременногоХранилищаФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла);
				СведенияОФайле.АдресВременногоХранилищаТекста = "";
				
				ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ФизЛицоОбъект.Ссылка, СведенияОФайле);
			Исключение
			КонецПопытки;
		КонецЦикла;
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ФизЛицоОбъект.Ссылка;
	
КонецФункции

Функция АТИ_НайтиСоздатьКонтрагента(УчетнаяЗапись, РеквизитыПеревозчика, Победитель) 
	// Поля для поиска
	requisite_id = РеквизитыПеревозчика.Получить("requisite_id"); 

	Если НЕ ЗначениеЗаполнено(requisite_id) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	РезультатЗапроса = Новый Соответствие();
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ID", requisite_id);
	ПараметрыЗапроса.Вставить("ПрочитатьВСоответвие", Истина);
	
	ТекстОшибки = "";
	РезультатЗапроса = уатИнтеграцияБиржиАТИ_уэ.АТИ_ВыполнитьЗапросДанных(УчетнаяЗапись, "firms", ТекстОшибки, ПараметрыЗапроса);
	Если НЕ ТипЗнч(РезультатЗапроса) = Тип("Соответствие") Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Наименование = ?(ТипЗнч(Победитель) = Тип("Строка"), Победитель, РезультатЗапроса.Получить("legal_name"));
	ИНН          = РезультатЗапроса.Получить("inn");
	ОГРН         = РезультатЗапроса.Получить("ogrn");
	КПП          = РезультатЗапроса.Получить("kpp");
	Телефон      = РезультатЗапроса.Получить("phone");
	email        = РезультатЗапроса.Получить("email");
	КодПоОКПО    = РезультатЗапроса.Получить("okpo");
	КодАТИ       = РезультатЗапроса.Получить("ati_id");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ИНН = &ИНН
	               |	И Контрагенты.КПП = &КПП
	               |	И НЕ Контрагенты.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		Попытка
			СпрОб = Справочники.Контрагенты.СоздатьЭлемент();
			СпрОб.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			СпрОб.Наименование              = Наименование;
			СпрОб.НаименованиеПолное        = Наименование;
			СпрОб.КодПоОКТМО                = КодПоОКПО;
			СпрОб.КПП                       = КПП;
			СпрОб.ИНН                       = ИНН;  
			
			Если ЗначениеЗаполнено(Телефон) Тогда 
				НовСтрока = СпрОб.КонтактнаяИнформация.Добавить();
				НовСтрока.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НовСтрока.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				НовСтрока.Представление = Телефон;
				НовСтрока.НомерТелефона = НовСтрока.Представление;
				НовСтрока.НомерТелефонаБезКодов = НовСтрока.Представление;
			КонецЕсли;   
			
			СпрОб.Записать();
			
			НаборЗаписей = РегистрыСведений.уатСведенияОКонтрагентах_уэ.СоздатьНаборЗаписей(); 
			Если ТипЗнч(Победитель) = Тип("Строка") Тогда
				НаборЗаписей.Отбор.Контрагент.Установить(Победитель);
			Иначе
				НаборЗаписей.Отбор.Контрагент.Установить(СпрОб.Ссылка); 
			КонецЕсли;
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(Истина);
			
			МенеджерЗаписи = РегистрыСведений.уатСведенияОКонтрагентах_уэ.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Контрагент = СпрОб.Ссылка;
			МенеджерЗаписи.Перевозчик = Истина;
			МенеджерЗаписи.КодАТИ     = КодАТИ;
			МенеджерЗаписи.Записать(Истина);
			
			Возврат СпрОб.Ссылка;
		Исключение 
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция АТИ_НайтиСоздатьТС(УчетнаяЗапись, ИнформацияОТС, Организация, Подразделение, Победитель) 
	// Поля для поиска
	ГосНомер = ИнформацияОТС.Получить("number"); 
	VIN      = ИнформацияОТС.Получить("vin");
	СТС      = ИнформацияОТС.Получить("vrc");

	Если НЕ ЗначениеЗаполнено(ГосНомер)
		И НЕ ЗначениеЗаполнено(VIN) 
		И НЕ ЗначениеЗаполнено(СТС) Тогда
		Возврат Справочники.уатТС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРегистрационныеДокументы.ВладелецДокументов КАК ВладелецДокументов,
	|	МАКСИМУМ(уатРегистрационныеДокументы.Серия + уатРегистрационныеДокументы.Номер) КАК Номер
	|ПОМЕСТИТЬ втСТС
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	|ГДЕ
	|	уатРегистрационныеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.СТС)
	|	И уатРегистрационныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	|	И НЕ уатРегистрационныеДокументы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРегистрационныеДокументы.ВладелецДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.VIN КАК VIN,
	|	уатТС.ГосударственныйНомер КАК ГосНомер,
	|	втСТС.Номер КАК СТС
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСТС КАК втСТС
	|		ПО (втСТС.ВладелецДокументов = уатТС.Ссылка)
	|ГДЕ
	|	НЕ уатТС.ЭтоГруппа
	|	И НЕ уатТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если ЗначениеЗаполнено(ГосНомер)
			И ЗначениеЗаполнено(Выборка.ГосНомер) 
			И СтрЗаменить(НРег(ГосНомер), " ", "") = СтрЗаменить(НРег(Выборка.ГосНомер), " ", "") Тогда
			Возврат Выборка.Ссылка;
		ИначеЕсли ЗначениеЗаполнено(VIN)
			И ЗначениеЗаполнено(Выборка.VIN) 
			И СтрЗаменить(НРег(VIN), " ", "") = СтрЗаменить(НРег(Выборка.VIN), " ", "") Тогда
			Возврат Выборка.Ссылка;
		ИначеЕсли ЗначениеЗаполнено(СТС)
			И ЗначениеЗаполнено(Выборка.СТС) 
			И СтрЗаменить(НРег(СТС), " ", "") = СтрЗаменить(НРег(Выборка.СТС), " ", "") Тогда
			Возврат Выборка.Ссылка;
		Конецесли;
	КонецЦикла;
	
	ТСОбъект = Справочники.уатТС.СоздатьЭлемент();
	ТСОбъект.Наименование           = ГосНомер;
	ТСОбъект.ГосударственныйНомер   = ГосНомер;
	ТСОбъект.VIN                    = VIN;
	
	ownership_type = ИнформацияОТС.Получить("ownership_type");
	
	ТСОбъект.ПринадлежностьТС       = Перечисления.уатПринадлежностьТС.Привлеченное;	
	ТСОбъект.Комментарий            = ИнформацияОТС.Получить("description");
	
	ТСОбъект.Грузоподъемность       = ИнформацияОТС.Получить("capacity"); 
	ТСОбъект.ОбъемКузова            = ИнформацияОТС.Получить("volume");

	ТСОбъект.ГабаритныйРазмерВысота = ИнформацияОТС.Получить("height");
	ТСОбъект.ГабаритныйРазмерДлина  = ИнформацияОТС.Получить("length");
	ТСОбъект.ГабаритныйРазмерШирина = ИнформацияОТС.Получить("width"); 
	
	ТСОбъект.ГодВыпуска             = ИнформацияОТС.Получить("manufacture_year");
	ТСОбъект.НомерКузова            = ИнформацияОТС.Получить("body_number");
	
	Марка = АТИ_ПолучениеМаркиТС(УчетнаяЗапись, ИнформацияОТС.Получить("brand_id"));
	Если ТипЗнч(Марка) = Тип("Соответствие") 
		И Марка.Получить(Формат(ИнформацияОТС.Получить("brand_id"), "ЧГ=0")) <> Неопределено Тогда
		МаркаНаименование = Марка.Получить(Формат(ИнформацияОТС.Получить("brand_id"), "ЧГ=0")).Получить("name");
		Если ЗначениеЗаполнено(МаркаНаименование) Тогда
			ТСОбъект.Марка = АТИ_НайтиСоздатьМаркуТС(МаркаНаименование);
		Конецесли;
	КонецЕсли;
	
	МодельТС  = ?(ЗначениеЗаполнено(ИнформацияОТС.Получить("model")), ИнформацияОТС.Получить("model"), "МодельТС");
	
	ТСОбъект.Модель                 = АТИ_НайтиСоздатьМодельТС(МодельТС, ТСОбъект.Марка, ИнформацияОТС.Получить("type"));
	ТСОбъект.СобственныйВес         = ТСОбъект.Модель.СобственныйВес;
	ТСОбъект.ВидМоделиТС            = ТСОбъект.Модель.ВидМоделиТС;
	
	Если ТСОбъект.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда 
		ТСОбъект.ВладелецТС    = Организация;
		ТСОбъект.Организация   = Организация;
		ТСОбъект.Подразделение = Подразделение;
	Иначе 
		ТСОбъект.ВладелецТС    = Победитель;
		ТСОбъект.Организация   = Неопределено;
		ТСОбъект.Подразделение = Неопределено;
	КонецЕсли;
	
	Наименование = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатТС", ТСОбъект);
	Если ЗначениеЗаполнено(Наименование) Тогда
		ТСОбъект.Наименование = Наименование;
	КонецЕсли;
	
	ТСОбъект.Записать(); 
	
	СТССсылка = Неопределено;
	Если ЗначениеЗаполнено(СТС) Тогда 
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ВидДокумента",       Справочники.уатВидыДокументов.СТС);
		ДанныеЗаполнения.Вставить("ВладелецДокументов", ТСОбъект.Ссылка);
		ДанныеЗаполнения.Вставить("Серия",              "");
		ДанныеЗаполнения.Вставить("Номер",              СТС); 
		ДанныеЗаполнения.Вставить("ПринадлежностьДокументов", Перечисления.уатПринадлежностьДокументов.ДокументыТС);
		СТССсылка = АТИ_НайтиСоздатьДокумент(ДанныеЗаполнения, Организация, Подразделение);
	КонецЕсли;
	
	ПТС       = ИнформацияОТС.Получить("truck_passport_number");
	ПТССсылка = Неопределено;
	Если ЗначениеЗаполнено(ПТС) Тогда 
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ВидДокумента",       Справочники.уатВидыДокументов.ПТС);
		ДанныеЗаполнения.Вставить("ВладелецДокументов", ТСОбъект.Ссылка);
		ДанныеЗаполнения.Вставить("Серия",              "");
		ДанныеЗаполнения.Вставить("Номер",              ПТС);    
		ДанныеЗаполнения.Вставить("ПринадлежностьДокументов", Перечисления.уатПринадлежностьДокументов.ДокументыТС);
		ПТССсылка = АТИ_НайтиСоздатьДокумент(ДанныеЗаполнения, Организация, Подразделение);
	КонецЕсли;
	
	Сканы = ИнформацияОТС.Получить("scans"); 
	Если ТипЗнч(Сканы) = Тип("Массив") Тогда 
		ТекстОшибкиФайл = "";
		ВременныйФайл   = ПолучитьИмяВременногоФайла("html");
		Для Каждого ТекДокумент Из Сканы Цикл 
			Попытка  
				url      = ТекДокумент.Получить("path");
				ИмяФайла = ТекДокумент.Получить("name");
				
				РасширениеФайла = ПолучитьРасширениеФайла(ИмяФайла);
				ИмяФайла        = СтрЗаменить(Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца)+1,
					СтрДлина(ИмяФайла)),"." + РасширениеФайла, "");
					
				Результат = уатИнтеграцияБиржиАТИ_уэ.АТИ_ЗагрузитьФайлССервера( 
				УчетнаяЗапись,
				url,
				ВременныйФайл,
				ТекстОшибкиФайл
				);
				ДанныеФайла = Новый ДвоичныеДанные(ВременныйФайл);
				
				СохранятьОсновнуюКартинку = Истина;
				Если ТекДокумент.Получить("type") = 3
					И ЗначениеЗаполнено(ПТССсылка) Тогда
					ВладелецДокумента = ПТССсылка;  
				ИначеЕсли ТекДокумент.Получить("type") = 4
					И ЗначениеЗаполнено(СТССсылка) Тогда
					ВладелецДокумента = СТССсылка; 
				Иначе
					ВладелецДокумента = ТСОбъект.Ссылка; 
					СохранятьОсновнуюКартинку = Ложь;
				КонецЕсли;
				
				СведенияОФайле = РаботаСФайлами.ПараметрыДобавленияФайла();
				СведенияОФайле.ИмяБезРасширения               = ИмяФайла;
				СведенияОФайле.РасширениеБезТочки             = РасширениеФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное    = ТекущаяУниверсальнаяДата();
				СведенияОФайле.ВладелецФайлов                 = ВладелецДокумента;  
				
				ФайлСсылка = РаботаСФайлами.ДобавитьФайл(СведенияОФайле, ПоместитьВоВременноеХранилище(ДанныеФайла)); 
				Если СохранятьОсновнуюКартинку Тогда 
					СпрОбъект = ВладелецДокумента.ПолучитьОбъект();
					СпрОбъект.ОсновнаяКартинка = ФайлСсылка;
					СпрОбъект.Записать();
				Конецесли;
			Исключение 
			КонецПопытки;
		КонецЦикла;
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТСОбъект.Ссылка;
	
КонецФункции

Функция АТИ_НайтиСоздатьДокумент(ДанныеЗаполнения, Организация, Подразделение)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидДокумента",		 ДанныеЗаполнения.ВидДокумента);
	Запрос.УстановитьПараметр("Номер", 				 ДанныеЗаполнения.Номер);
	Запрос.УстановитьПараметр("Серия",				 ДанныеЗаполнения.Серия);
	Запрос.УстановитьПараметр("ВладелецДокументов",  ДанныеЗаполнения.ВладелецДокументов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРегистрационныеДокументы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатРегистрационныеДокументы КАК уатРегистрационныеДокументы
	               |ГДЕ
	               |	уатРегистрационныеДокументы.ВидДокумента = &ВидДокумента
	               |	И уатРегистрационныеДокументы.Номер = &Номер
	               |	И уатРегистрационныеДокументы.Серия = &Серия
	               |	И уатРегистрационныеДокументы.ВладелецДокументов = &ВладелецДокументов";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе
		РегистрационныйДокумент = Справочники.уатРегистрационныеДокументы.СоздатьЭлемент();
		РегистрационныйДокумент.ПринадлежностьДокументов = ДанныеЗаполнения.ПринадлежностьДокументов;
		РегистрационныйДокумент.Статус                   = Перечисления.уатСтатусыДействия.Действует;
		РегистрационныйДокумент.Организация              = Организация;
		РегистрационныйДокумент.Подразделение            = Подразделение;
		ЗаполнитьЗначенияСвойств(РегистрационныйДокумент, ДанныеЗаполнения);
		РегистрационныйДокумент.Записать();  
		Возврат РегистрационныйДокумент.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция АТИ_НайтиСоздатьМаркуТС(Марка)
	
	Если НЕ ЗначениеЗаполнено(Марка) Тогда
		Возврат Справочники.уатМарки.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Марка", Марка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	уатМарки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатМарки КАК уатМарки
	               |ГДЕ
	               |	уатМарки.Наименование = &Марка
	               |	И НЕ уатМарки.ПометкаУдаления";   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе   
		МаркаОбъект = Справочники.уатМарки.СоздатьЭлемент();
		МаркаОбъект.Наименование = Марка;
		МаркаОбъект.Записать();
		Возврат МаркаОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция АТИ_НайтиСоздатьМодельТС(Модель, Марка, ВидМоделиТС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Наименование", Модель);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМоделиТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМоделиТС КАК уатМоделиТС
	|ГДЕ
	|	уатМоделиТС.Наименование = &Наименование
	|	И НЕ уатМоделиТС.ЭтоГруппа
	|	И НЕ уатМоделиТС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	МодельОбъект = Справочники.уатМоделиТС.СоздатьЭлемент();
	МодельОбъект.Наименование      = Модель;
	МодельОбъект.Марка             = Марка; 
	МодельОбъект.НаличиеСпидометра = Истина;
	
	Если ВидМоделиТС = 1 
		ИЛИ ВидМоделиТС = 2 Тогда
		МодельОбъект.ВидМоделиТС  = Перечисления.уатВидыМоделейТС.Автотранспорт;
	Иначе
		МодельОбъект.ВидМоделиТС  = Перечисления.уатВидыМоделейТС.Прицеп;
	КонецЕсли;
	
	МодельОбъект.Записать();
	Возврат МодельОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьРасширениеФайла(Знач ИмяФайла)
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции

#КонецОбласти

#Область WMS

Функция ПередатьЗаказПРРНаСерверWMS(HTTPСоединение, АдресПубликацииWMS, ДанныеЗаказаПРР, ЭтоНовыйЗаказПРР, ИдентификаторЗаказаПРРСтрокой, МаршрутныйЛист)
	
	Метод = ?(ЭтоНовыйЗаказПРР, "POST", "PUT");
	Ресурс = "CargoHandlingOrder/" + ИдентификаторЗаказаПРРСтрокой;
	ДанныеJSON = СериализоватьВJSON(ДанныеЗаказаПРР);
	АдресРесурса = АдресПубликацииWMS + "/hs/tms_api/v1/" + Ресурс;
	
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса);
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
	ЗапросHTTP.УстановитьТелоИзСтроки(ДанныеJSON);
	
	ТекстОшибки = "";
	Попытка		
		ОтветСервера = HTTPСоединение.ВызватьHTTPМетод(Метод, ЗапросHTTP);
		Если ОтветСервера = Неопределено Тогда
			СтатусВыгрузкиВWMS = Перечисления.уатСтатусыОбменаСWMS_уэ.ОшибкаПриОтправке;
			ТекстОшибки = НСтр("ru = 'Ответ от сервера WMS не получен'");
		Иначе
			ДанныеОтвета = ДесериализоватьJSON(ОтветСервера.ПолучитьТелоКакСтроку());
			Если ТипЗнч(ДанныеОтвета) = Тип("Структура")
				И ДанныеОтвета.Свойство("ОК")
				И ДанныеОтвета.Ок Тогда
				СтатусВыгрузкиВWMS = Перечисления.уатСтатусыОбменаСWMS_уэ.Отправлено;
			ИначеЕсли ТипЗнч(ДанныеОтвета) = Тип("Структура")
				И ДанныеОтвета.Свойство("ОК")
				И Не ДанныеОтвета.Ок
				И ДанныеОтвета.Свойство("Комментарий") Тогда
				СтатусВыгрузкиВWMS = Перечисления.уатСтатусыОбменаСWMS_уэ.ОшибкаПриОтправке;
				ТекстОшибки = ДанныеОтвета.Комментарий;
			Иначе
				СтатусВыгрузкиВWMS = Перечисления.уатСтатусыОбменаСWMS_уэ.ОшибкаПриОтправке;
				ТекстОшибки = ДанныеОтвета.ПолучитьТелоКакСтроку();
			КонецЕсли;
		КонецЕсли;
	Исключение
		СтатусВыгрузкиВWMS = Перечисления.уатСтатусыОбменаСWMS_уэ.ОшибкаПриОтправке;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Для Каждого ТекДанныеЗаказа Из ДанныеЗаказаПРР.СоставЗаказа Цикл
		СтатусОбмена = РегистрыСведений.уатСтатусыСинхронизацииСWMS_уэ.СоздатьМенеджерЗаписи();
		СтатусОбмена.Период = ТекущаяДатаСеанса();
		СтатусОбмена.МаршрутныйЛист = МаршрутныйЛист;
		СтатусОбмена.ЗаказНаТС = Документы.уатЗаказГрузоотправителя.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекДанныеЗаказа.Ид));
		СтатусОбмена.ИДЗаданияПРР = ТекДанныеЗаказа.Ид;
		СтатусОбмена.ДатаНачалаОперации = ТекДанныеЗаказа.ДатаНачалаОперации;
		СтатусОбмена.ДатаОкончанияОперации = ТекДанныеЗаказа.ДатаОкончанияОперации;
		СтатусОбмена.ИнформацияОбОшибке = ТекстОшибки;
		СтатусОбмена.СтатусВыгрузкиВWMS = СтатусВыгрузкиВWMS;
		СтатусОбмена.Записать();
	КонецЦикла;
	
КонецФункции

Процедура УстановитьПрохождениеСклада(МаршрутныйЛист, АдресСкладаWMS, ЗагруженныеДанные)
	
	ТекстОшибки = "";
	ДокументМодифицирован = Ложь;
	ДокументОбъект = МаршрутныйЛист.ПолучитьОбъект();
	
	Попытка
		УникальныйИдентификаторЗаказа = Новый УникальныйИдентификатор(ЗагруженныеДанные.ИДЗаказаНаТССтрокой);
		ЗаказНаТС = Документы.уатЗаказГрузоотправителя.ПолучитьСсылку(УникальныйИдентификаторЗаказа);
	Исключение
		// При получении сообщения в http-сервисе заказ по УИДу был найден, но теперь его найти не удалется.
		// Такая проблема могла возникнуть, если между записью сообщения в регистр и его обработкой Заказ на ТС был удален.
		ЗаказНаТС = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
	КонецПопытки;
	
	СтруктураПоиска = Новый Структура("Пункт", АдресСкладаWMS);
	НайденныеСтроки = ДокументОбъект.Заказы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВремяПрибытияНаСкладПлан = НайденныеСтроки[0].ПрибытиеПлан;
	Иначе
		ВремяПрибытияНаСкладПлан = '00010101';
	КонецЕсли;
	
	// Поиск первого прибытия на склад. Ситуация, когда прибытий на склад больше 1, считается некорректной.
	СтруктураПоиска.Вставить("ПрибытиеПлан", ВремяПрибытияНаСкладПлан);
	НайденныеСтроки = ДокументОбъект.Заказы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекСтрока = НайденныеСтроки[0];
		ДокументМодифицирован = ТекСтрока.Выполнен <> ЗагруженныеДанные.ТочкаВыполнена
			Или ТекСтрока.ПрибытиеФакт <> ЗагруженныеДанные.ПрибытиеФакт
			Или ТекСтрока.УбытиеФакт <> ЗагруженныеДанные.УбытиеФакт;
		Если ДокументМодифицирован Тогда
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.Выполнен = ЗагруженныеДанные.ТочкаВыполнена;
				Если ТекСтрока.Выполнен Тогда
					ТекСтрока.ПрибытиеФакт = ЗагруженныеДанные.ПрибытиеФакт;
					ТекСтрока.УбытиеФакт = ЗагруженныеДанные.УбытиеФакт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтатусОбработкиДанных = Перечисления.уатСтатусыОбменаСWMS_уэ.Принято;
	Иначе
		СтатусОбработкиДанных = Перечисления.уатСтатусыОбменаСWMS_уэ.ОшибкаПриПолучении;
		ТекстОшибки = НСтр("ru = 'В маршрутном листе не найдено посещение склада'");
	КонецЕсли;
	
	Если ДокументМодифицирован Тогда
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		ДокументОбъект.ДополнительныеСвойства.Вставить("РазрешенОбменСWMS", Ложь);
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			СтатусОбработкиДанных = Перечисления.уатСтатусыОбменаСWMS_уэ.ОшибкаПриПолучении;
			ТекстОшибки = НСтр("ru = 'Ошибка записи маршрутного листа %1'; 
				|en = 'Error while saving Routing list %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, МаршрутныйЛист.Представление);
		КонецПопытки;
	КонецЕсли;
	
	СтатусОбмена = РегистрыСведений.уатСтатусыСинхронизацииСWMS_уэ.СоздатьМенеджерЗаписи();
	СтатусОбмена.Период = ТекущаяДатаСеанса();
	СтатусОбмена.МаршрутныйЛист = МаршрутныйЛист;
	СтатусОбмена.ЗаказНаТС = ЗаказНаТС;
	СтатусОбмена.ИДЗаданияПРР = ЗагруженныеДанные.ИДЗаказаНаТССтрокой;
	СтатусОбмена.ДатаНачалаОперации = ЗагруженныеДанные.ПрибытиеФакт;
	СтатусОбмена.ДатаОкончанияОперации = ЗагруженныеДанные.УбытиеФакт;
	СтатусОбмена.СтатусВыгрузкиВWMS = СтатусОбработкиДанных;
	СтатусОбмена.СтатусЗаданияПРР = ЗагруженныеДанные.СтатусЗаданияПРР;
	СтатусОбмена.ИнформацияОбОшибке = ТекстОшибки;
	СтатусОбмена.Записать();
	
КонецПроцедуры

Функция КонвертироватьПолВСтроку(Пол)
	
	Результат = "";
	
	Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Результат = "m";
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда 
		Результат = "f";	
	КонецЕсли; 
	
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьДанныеОрганизации()
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Ид");
	ДанныеОрганизации.Вставить("Наименование");
	ДанныеОрганизации.Вставить("ПолноеНаименование", "");
	ДанныеОрганизации.Вставить("ИНН", "");
	ДанныеОрганизации.Вставить("КПП", "");
	
	Возврат ДанныеОрганизации;
	
КонецФункции

Функция ИнициализироватьДанныеСотрудника()
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Ид");
	ДанныеСотрудника.Вставить("Наименование");
	ДанныеСотрудника.Вставить("ДатаРождения", '00010101');
	ДанныеСотрудника.Вставить("Пол");
	ДанныеСотрудника.Вставить("Телефон", "");
	ДанныеСотрудника.Вставить("ЭлектроннаяПочта", "");
	
	Возврат ДанныеСотрудника;
	
КонецФункции

Функция ИнициализироватьДанныеТС()
	
	ДанныеТС = Новый Структура;
	ДанныеТС.Вставить("Ид");
	ДанныеТС.Вставить("Наименование");
	ДанныеТС.Вставить("РегНомер");
	ДанныеТС.Вставить("Модель", ИнициализироватьДанныеМоделиТС());
	
	Возврат ДанныеТС;
	
КонецФункции

Функция ИнициализироватьДанныеМоделиТС()
	
	ДанныеМодели = Новый Структура;
	ДанныеМодели.Вставить("Ид");
	ДанныеМодели.Вставить("Наименование");
	ДанныеМодели.Вставить("Грузоподъемность", 0);
	ДанныеМодели.Вставить("Объем", 0);
	ДанныеМодели.Вставить("КоличествоМест", 0);
	
	Возврат ДанныеМодели;
	
КонецФункции

Функция УстановитьHttpСоединениеWMS(HTTPСоединение, ТекстОшибки, АдресПубликацииWMS)
	
	АдресБазыWMS = Константы.уатАдресСервераWMS_уэ.Получить();
	АдресПубликацииWMS = Константы.уатАдресПубликацииWMS_уэ.Получить();
	ЛогинВСистемеWMS = Константы.уатЛогинВСистемеWMS_уэ.Получить();
	Если Не ЗначениеЗаполнено(АдресБазыWMS) 
		Или Не ЗначениеЗаполнено(АдресПубликацииWMS)
		Или Не ЗначениеЗаполнено(ЛогинВСистемеWMS) Тогда
		ТекстОшибки = НСтр("ru = 'Настройки синхронизации с WMS заполнены некорректно. Синхронизация данных невозможна'");
		Возврат Ложь;
	КонецЕсли;
	
	ПарольВСистемеWMS = Константы.уатПарольВСистемеWMS_уэ.Получить();
	ПортСервисаWMS = Константы.уатПортСервисаWMS_уэ.Получить();
	ПротоколСервисаWMS = Константы.уатПротоколСервисаWMS_уэ.Получить();
	Если Не ЗначениеЗаполнено(ПротоколСервисаWMS) Тогда
		ПротоколСервисаWMS = "http";
	КонецЕсли;
	Если ПортСервисаWMS = 0 Тогда
		Если ПротоколСервисаWMS = "https" Тогда
			ПортСервисаWMS = 443;
		Иначе
			ПортСервисаWMS = 80;
		КонецЕсли; 	
	КонецЕсли; 
	
	Таймаут = 60;
	Попытка
		HTTPСоединение = Новый HTTPСоединение(АдресБазыWMS,
			ПортСервисаWMS,
			ЛогинВСистемеWMS,
			ПарольВСистемеWMS,, 
			Таймаут, 
			?(ПротоколСервисаWMS = "https", Новый ЗащищенноеСоединениеOpenSSL, Неопределено)
		);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка при установке соединения с сервером. Описание ошибки:'") + " " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоСтрокаJSON(Знач Текст)
	Возврат ТипЗнч(Текст) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Текст), "{");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для гражданства
//
// Параметры:
//	ИнформацияОГражданстве - объект, имеющий свойства 
//		Страна
//		
Функция ГражданствоПоУмолчанию(ИнформацияОГражданстве) Экспорт
	
	Возврат ИнформацияОГражданстве.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
			
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для удостоверения личности
//
// Параметры:
//	ИнформацияОбУдостоверенииЛичности - объект, имеющий свойства 
//		ВидДокумента
//		Серия
//		Номер
//		ДатаВыдачи
//		КемВыдан
//		КодПодразделения
//		
Функция УдостоверениеЛичностиПоУмолчанию(ИнформацияОбУдостоверенииЛичности) Экспорт
	Возврат (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ВидДокумента))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Серия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Номер))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.СрокДействия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КемВыдан))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КодПодразделения));
		
КонецФункции

// Функция раскладывает Наименование в массив из трех элементов
//
// Параметры
//  ФИО  - строка - наименование
//
// Возвращаемое значение:
//   Массив   - массив из трех элементов, Фамилия, Имя, Отчество
//
Функция ПолучитьМассивФИО(Знач ФИО) Экспорт

	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
		Если Индекс < 3 Тогда
			МассивФИО[Индекс] = МассивПодстрок[Индекс];
		Иначе
			МассивФИО[2] = МассивФИО[2] + " " + МассивПодстрок[Индекс];
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки на соответствие адреса формату ФНС

// Формирует структуру полей адреса из списка значений или строки строке
//
// Параметры:
// 	СписокПолей	- СписокЗначений, содержит значение поля адреса и его представление
//				  Строка, содержит имена полей и их значения, перечисленные через запятую
//
// Возвращаемое значение:
//		Структура - ключи - имена полей, значения поля
//
Функция СтруктураПолейАдресаИзСпискаПолейКонтактнойИнформации(Знач СписокПолей, ПредставлениеАдреса) Экспорт
	
	Если ТипЗнч(СписокПолей) = Тип("Строка") Тогда
		СписокПолей = ПреобразоватьСтрокуВСписокПолей(СписокПолей);
	КонецЕсли;
	
	СтруктураПолейАдреса = Новый Структура;
	СтруктураПолейАдреса.Вставить("Представление", ПредставлениеАдреса);
	СтруктураПолейАдреса.Вставить("Страна", "");
	СтруктураПолейАдреса.Вставить("НаименованиеСтраны", "");
	СтруктураПолейАдреса.Вставить("КодСтраны","");
	СтруктураПолейАдреса.Вставить("Индекс","");
	СтруктураПолейАдреса.Вставить("Регион","");
	СтруктураПолейАдреса.Вставить("Район","");
	СтруктураПолейАдреса.Вставить("Город","");
	СтруктураПолейАдреса.Вставить("НаселенныйПункт","");
	СтруктураПолейАдреса.Вставить("Улица","");
	СтруктураПолейАдреса.Вставить("Дом","");
	СтруктураПолейАдреса.Вставить("Корпус","");
	СтруктураПолейАдреса.Вставить("Квартира","");
	СтруктураПолейАдреса.Вставить("ТипДома","");
	СтруктураПолейАдреса.Вставить("ТипКорпуса","");
	СтруктураПолейАдреса.Вставить("ТипКвартиры","");
	
	Для Каждого ЭлСписокПолей Из СписокПолей Цикл
		СтруктураПолейАдреса.Вставить(ЭлСписокПолей.Представление, ЭлСписокПолей.Значение);
	КонецЦИкла;
	
	Если СтруктураПолейАдреса.Страна = "РОССИЯ" ИЛИ СтруктураПолейАдреса.КодСтраны = "643" Тогда
		СтруктураПолейАдреса.Страна = "";
		СтруктураПолейАдреса.КодСтраны = "";
	КонецЕсли; 
	
	Если ПустаяСтрока(СтруктураПолейАдреса.Страна) И НЕ ПустаяСтрока(СтруктураПолейАдреса.КодСтраны) Тогда
		СтруктураПолейАдреса.Страна = ЗарплатаКадрыВызовСервера.ПолучитьПредставлениеСтраныПоКоду(СтруктураПолейАдреса.КодСтраны);
		СтруктураПолейАдреса.НаименованиеСтраны = СтруктураПолейАдреса.Страна;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураПолейАдреса.НаименованиеСтраны) И Не ПустаяСтрока(СтруктураПолейАдреса.Страна) Тогда
		СтруктураПолейАдреса.Свойство("Страна", СтруктураПолейАдреса.НаименованиеСтраны);
	КонецЕсли; 
	
	Возврат СтруктураПолейАдреса;
	
КонецФункции

// Определяет соответствие основных параметров адреса требованиям ФНС
//
// Параметры:
//	СтруктураАдрес 		- Структура,СписокЗначений, Строка, содержащая поля адресной информации
//						  СписокЗначений, содержит имена полей адреса и их значения
//						  Строка - содержит строки с именами полей и их значениями
//	СообщенияПроверки 	- строка, которая заполнится информацией о причинах
//						  несоответствия адреса требованиям ФНС
//
// Возвращаемое значение:
//   Булево				- Истина - адрес соответствует требованиям
//						  Ложь - адрес не соответствует требованиям
//
Функция ПредставлениеАдресаИПоляАдресаСоответствуютТребованиям(Знач СтруктураПолейАдреса, СообщенияПроверки = "", Знач ПредставлениеАдреса = "") Экспорт
	
	Если ТипЗнч(СтруктураПолейАдреса) = Тип("Строка") 
		ИЛИ ТипЗнч(СтруктураПолейАдреса) = Тип("СписокЗначений") Тогда
		СтруктураПолейАдреса = СтруктураПолейАдресаИзСпискаПолейКонтактнойИнформации(СтруктураПолейАдреса, ПредставлениеАдреса);
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеАдреса) Тогда
		ПредставлениеАдреса = "";
		УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейАдреса, ПредставлениеАдреса);
	КонецЕсли;
	Если (Не СтруктураПолейАдреса.Свойство("Представление") ИЛИ ПустаяСтрока(СтруктураПолейАдреса.Представление)) И Не ПустаяСтрока(ПредставлениеАдреса) Тогда
		СтруктураПолейАдреса.Вставить("Представление", ПредставлениеАдреса);
	КонецЕсли;
	
	СообщенияПроверкиСоответствияПредставления = "";
	РезультатПроверки = ПредставлениеАдресаСоответствуетПредставлениюПоЗначениямПолей(СтруктураПолейАдреса, СообщенияПроверкиСоответствияПредставления);
	
	РезультатПроверки = РезультатПроверки И АдресСоответствуетТребованиямКАдреснойИнформацииФНС(СтруктураПолейАдреса, СообщенияПроверки);
	
	Если НЕ ПустаяСтрока(СообщенияПроверкиСоответствияПредставления) Тогда
		СообщенияПроверки = СообщенияПроверкиСоответствияПредставления + ?(ПустаяСтрока(СообщенияПроверки),"",Символы.ПС + СообщенияПроверки);
	КонецЕсли;
	 
	Возврат РезультатПроверки;
КонецФункции	

Процедура ОбработкаИзмененияДанныхФизическогоЛица(Объект, ДанныеФизическогоЛица, СтрокиПоСотруднику, Модифицированность = Ложь)Экспорт
	Перем ИмяПоляВДокументе, ЗначениеСвойстваСотрудника; 	
	ТипДокумента = ТипЗнч(Объект.Ссылка);	

	СоответсвиеДанных = СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента);	
	Для Каждого СтрокаСотрудника Из СтрокиПоСотруднику Цикл
		Для Каждого КлючЗначение Из ДанныеФизическогоЛица Цикл
			Если СоответсвиеДанных.Свойство(КлючЗначение.Ключ, ИмяПоляВДокументе) Тогда
				
				ДанныеСтрокиСотрудника = Новый Структура;
				ДанныеСтрокиСотрудника.Вставить(ИмяПоляВДокументе);
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиСотрудника, СтрокаСотрудника);
				Если ДанныеСтрокиСотрудника[ИмяПоляВДокументе] <> Неопределено Тогда	
					Если ЗначениеСвойстваСотрудника <> КлючЗначение.Значение Тогда
						Модифицированность = Истина;
						СтрокаСотрудника[ИмяПоляВДокументе] = КлючЗначение.Значение;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

Процедура УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяЭлемента, ТекстПодсказки) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// Возвращает список значений. Преобразует строку полей в список значений.
//
// Параметры:
//	СтрокаПолей - Строка - строка полей.
//
// Возвращаемое значение - Список значений - список значений полей.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если Лев(ПолученнаяСтрока, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(ПолученнаяСтрока, 2);
			КонецЕсли;
		Иначе
			ПозицияСимвола = Найти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(ПолученнаяСтрока, ПозицияСимвола + 1), Лев(ПолученнаяСтрока, ПозицияСимвола - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам
// 
// Параметры
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени
//	ПравилаПроверки		- структура, в которой ключем является проверяемое свойство, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю
//								
//	Возвращаемое значение:
//		Булево. Истина - ошибок не обнаружено, Ложь - в противном случае. 
//			
Функция СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		
		Если НЕ ЗначениеЗаполнено(ПроверяемыйОбъект[ПравилоПроверки.Ключ]) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Значение, ПроверяемыйОбъект, НарушенноеПравило.Ключ);
		КонецЦикла	
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам
// 
// Параметры
//	Форма			- управляемая форма
//	ПравилаПроверки	- список значение, в которой значением является путь к данными, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю
//								
//	Возвращаемое значение:
//		Булево. Истина - все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваФормыЗаполнены(Форма, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПравилоПроверки.Значение);
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Представление, , НарушенноеПравило.Значение);
		КонецЦикла	
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки на соответствие адреса формату ФНС

// Проверка соответствия представления адреса, значениям в полях
Функция ПредставлениеАдресаСоответствуетПредставлениюПоЗначениямПолей(СтруктураПолейАдреса, СообщенияПроверки = "")
	ПредставлениеАдресаПоСтруктуреПолей = "";
	УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейАдреса, ПредставлениеАдресаПоСтруктуреПолей);
	Если СтруктураПолейАдреса.Представление <> ПредставлениеАдресаПоСтруктуреПолей Тогда
		ТекстНСТР = НСтр("en='Address does not match to values in set of fields';ru='Адрес не соответствует значениям в наборе полей'");
		СообщенияПроверки = ТекстНСТР;
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Проверка адреса на принадлежность к адресам за пределами РФ
Функция АдресСоответствуетТребованиямКАдресамЗаПределамиРФ(СтруктураПолейАдреса)
	Если НЕ ПустаяСтрока(СтруктураПолейАдреса.Страна) 
			И НЕ ПустаяСтрока(СтруктураПолейАдреса.КодСтраны) 
			И СтруктураПолейАдреса.КодСтраны <> "643" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Проверка адреса на соответствие требованиям к адресной информации ФНС, ПФР  и др.
Функция АдресСоответствуетТребованиямКАдреснойИнформацииФНС(СтруктураПолейАдреса, СообщенияПроверки = "")
	
	Если АдресСоответствуетТребованиямКАдресамЗаПределамиРФ(СтруктураПолейАдреса) Тогда
		ТекстНСТР = НСтр("en='Address outside Russian Federation';ru='Введен адрес за пределами РФ'");
		СообщенияПроверки = ТекстНСТР;
		Возврат Истина;
	КонецЕсли;
	
	СообщениеОбязательныеПоля = "";
	СообщениеСокращения = "";
	СообщениеДлиныПолей = "";
	СообщениеДлиныПолей10 = "";
	СообщениеДлиныПолей50 = "";
	СообщениеРусскиеИЛатинскиеБуквы = "";
	
	РезультатПроверки = Истина;
	
	Город = СтруктураПолейАдреса.Город;
	Город = СтрЗаменить(Город,"с/с","");
	Город = СтрЗаменить(Город,"с/а","");  
	Город = СтрЗаменить(Город,"с/мо","");
	Город = СтрЗаменить(Город,"с/о",""); 
	Город = СтрЗаменить(Город,"с/п",""); 
	Город = СтрЗаменить(Город,"/",""); 
	НаселенныйПункт = СтруктураПолейАдреса.НаселенныйПункт;
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д_","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д","");  
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/р","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/ст",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/о",""); 
	
	// Элементы классификатора KLADR. Встречаются элементы с "/". "(", ")".
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"/","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"(",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,")",""); 
	
	Улица = СтруктураПолейАдреса.Улица; 
	
	// Элементы классификатора сокращений.
	Улица = СтрЗаменить(Улица,"ж/д_","");
	Улица = СтрЗаменить(Улица,"ж/д","");  
	Улица = СтрЗаменить(Улица,"п/о","");
	Улица = СтрЗаменить(Улица,"п/ст",""); 
	Улица = СтрЗаменить(Улица,"п/р","");
	
	// Элементы классификатора STREET. Встречаются улицы с "/". "(", ")". 
	Улица = СтрЗаменить(Улица,"/","");
	Улица = СтрЗаменить(Улица,"(","");
	Улица = СтрЗаменить(Улица,")","");
	
	РегионСокращениеНеЗаполнено = ЗначениеЗаполнено(СтруктураПолейАдреса.Регион)  И НЕ ЗначениеЗаполнено(ПолучитьАдресноеСокращение(СтруктураПолейАдреса.Регион));
	РайонСокращениеНеЗаполнено = ЗначениеЗаполнено(СтруктураПолейАдреса.Район)  И НЕ ЗначениеЗаполнено(ПолучитьАдресноеСокращение(СтруктураПолейАдреса.Район));
	ГородСокращениеНеЗаполнено = ЗначениеЗаполнено(СтруктураПолейАдреса.Город)  И НЕ ЗначениеЗаполнено(ПолучитьАдресноеСокращение(СтруктураПолейАдреса.Город));
	НаселенныйПунктСокращениеНеЗаполнено = ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт)  И НЕ ЗначениеЗаполнено(ПолучитьАдресноеСокращение(СтруктураПолейАдреса.НаселенныйПункт));
	УлицаСокращениеНеЗаполнено = ЗначениеЗаполнено(СтруктураПолейАдреса.Улица)  И НЕ ЗначениеЗаполнено(ПолучитьАдресноеСокращение(СтруктураПолейАдреса.Улица));
	
	Если РегионСокращениеНеЗаполнено Тогда
		СообщениеСокращения =  СообщениеСокращения + ", " + НСтр("en='Region';ru='Регион'");
	КонецЕсли;
	Если РайонСокращениеНеЗаполнено Тогда
		СообщениеСокращения =  СообщениеСокращения + ", " + НСтр("en='District';ru='Район'");
	КонецЕсли;
	Если ГородСокращениеНеЗаполнено Тогда
		СообщениеСокращения = СообщениеСокращения + ", " + НСтр("en='City';ru='Город'");
	КонецЕсли;
	Если НаселенныйПунктСокращениеНеЗаполнено Тогда
		СообщениеСокращения = СообщениеСокращения + ", " + НСтр("en='Locality';ru='Населенный пункт'");
	КонецЕсли;
	Если УлицаСокращениеНеЗаполнено Тогда
		СообщениеСокращения = СообщениеСокращения + ", " + НСтр("en='Street';ru='Улица'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураПолейАдреса.КодСтраны) И СтрДлина(СтруктураПолейАдреса.КодСтраны) > 3
		ИЛИ ПустаяСтрока(СтруктураПолейАдреса.КодСтраны) И НЕ ПустаяСтрока(СтруктураПолейАдреса.Страна) И СтрДлина(СтруктураПолейАдреса.Страна) > 3 Тогда   // код страны не > 3 символов
		СообщениеДлиныПолей = СообщениеДлиныПолей + ", " + НСтр("en='Country code must consist of 3 digits';ru='Код страны должен состоять из 3-х цифр'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураПолейАдреса.Индекс) Тогда
		СообщениеОбязательныеПоля = СообщениеОбязательныеПоля +  ", " + НСтр("en='Index';ru='Индекс'");
		РезультатПроверки = Ложь;
	Иначе
		Если СтрДлина(СокрЛП(СтруктураПолейАдреса.Индекс)) <> 6 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураПолейАдреса.Индекс) Тогда   // в индексе ровно 6 символов
			СообщениеДлиныПолей = СообщениеДлиныПолей +  ", " + НСтр("en='Index should consist of 6 digits';ru='Индекс должен cостоять из 6-и цифр'");
			РезультатПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Регион) > 50 Тогда   // наим.региона не > 50 символов
		СообщениеДлиныПолей50 = СообщениеДлиныПолей50 +  ", " + НСтр("en='Region';ru='Регион'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Район) > 50 Тогда   // наим.района не > 50 символов
		СообщениеДлиныПолей50 = СообщениеДлиныПолей50 +  ", " + НСтр("en='District';ru='Район'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	// наим.района написано не русскими буквами
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(СтруктураПолейАдреса.Район, Ложь, Символ(184) + "~,-. 0123456789_") Тогда
		СообщениеРусскиеИЛатинскиеБуквы = СообщениеРусскиеИЛатинскиеБуквы +  ", " + НСтр("en='District';ru='Район'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Город) > 50 Тогда   // наим.города не > 50 символов
		СообщениеДлиныПолей50 = СообщениеДлиныПолей50 +  ", " + НСтр("en='City';ru='Город'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	// наим.города написано не русскими буквами
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Город, Ложь, Символ(184) + "~,-. 0123456789_") Тогда
		СообщениеРусскиеИЛатинскиеБуквы = СообщениеРусскиеИЛатинскиеБуквы +  ", " + НСтр("en='City';ru='Город'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.НаселенныйПункт) > 50 Тогда   // наим.нас.пункта не > 50 символов
		СообщениеДлиныПолей50 = СообщениеДлиныПолей50 +  ", " + НСтр("en='Locality';ru='Населенный пункт'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	// наим.нас.пункта написано не русскими буквами
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаселенныйПункт, Ложь, Символ(184) + "~,-. 0123456789_") Тогда
		СообщениеРусскиеИЛатинскиеБуквы = СообщениеРусскиеИЛатинскиеБуквы +  ", " + НСтр("en='Locality';ru='Населенный пункт'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Улица) > 50 Тогда   // наим.улицы не > 50 символов
		СообщениеДлиныПолей50 = СообщениеДлиныПолей50 +  ", " + НСтр("en='Street';ru='Улица'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	// наим.улицы написано не русскими буквами
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Улица, Ложь, Символ(184) + "~,-. 0123456789_") Тогда
		СообщениеРусскиеИЛатинскиеБуквы = СообщениеРусскиеИЛатинскиеБуквы +  ", " + НСтр("en='Street';ru='Улица'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Дом) > 10 Тогда   // номер дома не > 10 символов
		СообщениеДлиныПолей10 = СообщениеДлиныПолей10 +  ", " + НСтр("en='House number';ru='Номер дома'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Корпус) > 10 Тогда   // номер корпуса не > 10 символов
		СообщениеДлиныПолей10 = СообщениеДлиныПолей10 +  ", " + НСтр("en='Body';ru='Корпус'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если СтрДлина(СтруктураПолейАдреса.Квартира)> 10 Тогда   // номер квартиры не > 10 символов
		СообщениеДлиныПолей10 = СообщениеДлиныПолей10 +  ", " + НСтр("en='Apartment';ru='Квартира'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если  (Не ЗначениеЗаполнено(СокрЛП(СтруктураПолейАдреса.Регион))) Тогда
		СообщениеОбязательныеПоля = СообщениеОбязательныеПоля +  ", " + НСтр("en='Region';ru='Регион'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ЗначениеЗаполнено(СокрЛП(СтруктураПолейАдреса.Город))) И (Не ЗначениеЗаполнено(СокрЛП(СтруктураПолейАдреса.НаселенныйПункт))) И (ВРег(СокрЛП(СтруктураПолейАдреса.Регион)) <> "МОСКВА Г" И ВРег(СокрЛП(СтруктураПолейАдреса.Регион)) <> "САНКТ-ПЕТЕРБУРГ Г") Тогда
		СообщениеОбязательныеПоля = СообщениеОбязательныеПоля +  ", " + НСтр("en='City, Locality';ru='Город, Населенный пункт'");
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если (Не ЗначениеЗаполнено(СокрЛП(СтруктураПолейАдреса.НаселенныйПункт))) И(НЕ ЗначениеЗаполнено(СокрЛП(СтруктураПолейАдреса.Улица))) Тогда
		СообщениеОбязательныеПоля = СообщениеОбязательныеПоля +  ", " + НСтр("en='Street';ru='Улица'");
		РезультатПроверки = Ложь;	
	КонецЕсли;
	Если РегионСокращениеНеЗаполнено ИЛИ РайонСокращениеНеЗаполнено ИЛИ ГородСокращениеНеЗаполнено ИЛИ НаселенныйПунктСокращениеНеЗаполнено ИЛИ УлицаСокращениеНеЗаполнено Тогда 	
		РезультатПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(СтруктураПолейАдреса.Дом) Тогда   // номер дома не > 10 символов
		СообщениеОбязательныеПоля = СообщениеОбязательныеПоля +  ", " + НСтр("en='House number';ru='Номер дома'");
		РезультатПроверки = Ложь;
	КонецЕсли;
		
	// В первой строке, дополнительно нужно указать, что представление адреса не соответствует представлению, полученному на основе полей
	Если НЕ РезультатПроверки Тогда
		
		СообщенияПроверки = НСтр("en='Address does not match the requirements to the format of the address information';ru='Адрес не соответствует требованиям к формату адресной информации'");
		
		Если НЕ ПустаяСтрока(СообщениеОбязательныеПоля) Тогда
			СообщенияПроверки = СообщенияПроверки + Символы.ПС + НСтр("en='Not filled all required fields: ';ru='Не заполнены все обязательные поля: '") + Сред(СообщениеОбязательныеПоля, 3);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СообщениеСокращения) Тогда
			СообщенияПроверки = СообщенияПроверки + Символы.ПС + НСтр("en='Not specified abbreviations for fields: ';ru='Не указаны сокращения для полей: '") + Сред(СообщениеСокращения, 3);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СообщениеРусскиеИЛатинскиеБуквы) Тогда
			СообщенияПроверки = СообщенияПроверки + Символы.ПС + НСтр("en='Titles must be specified in Russian letters: ';ru='Наименования должны быть указаны русскими буквами: '") + Сред(СообщениеРусскиеИЛатинскиеБуквы, 3);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СообщениеДлиныПолей) ИЛИ НЕ ПустаяСтрока(СообщениеДлиныПолей10) ИЛИ НЕ ПустаяСтрока(СообщениеДлиныПолей50) Тогда
			СообщенияПроверки = СообщенияПроверки + Символы.ПС + НСтр("en='Length of fields does not match the installed: ';ru='Длина полей не соответствует установленной: '");
			Если НЕ ПустаяСтрока(СообщениеДлиныПолей) Тогда
				СообщенияПроверки = СообщенияПроверки + Сред(СообщениеДлиныПолей, 3); 
			КонецЕсли;
			Если НЕ ПустаяСтрока(СообщениеДлиныПолей10) Тогда
				СообщенияПроверки = СообщенияПроверки + ?(ПустаяСтрока(СообщениеДлиныПолей), "", "; ")  + Сред(СообщениеДлиныПолей10, 3); 
			КонецЕсли;
			Если НЕ ПустаяСтрока(СообщениеДлиныПолей50) Тогда
				СообщенияПроверки = СообщенияПроверки + ?(ПустаяСтрока(СообщениеДлиныПолей10), "", "; ") + Сред(СообщениеДлиныПолей50, 3); 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат РезультатПроверки;
		
КонецФункции	

Функция ПолучитьАдресноеСокращение(Знач ГеографическоеНазвание)
	Пока Найти(ГеографическоеНазвание, "  ") > 0 Цикл
		ГеографическоеНазвание = СтрЗаменить(ГеографическоеНазвание, "  ", " ");
	КонецЦикла;
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ГеографическоеНазвание, " ");
	Если МассивСлов.Количество() > 1 Тогда
		Возврат МассивСлов[МассивСлов.Количество() - 1];
	КонецЕсли;
	Возврат "";
КонецФункции	

Функция СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента)
	СтруктураСоответствия = Новый Структура();	
	СтруктураСоответствия.Вставить("Фамилия", "Фамилия");
	СтруктураСоответствия.Вставить("Имя", "Имя");
	СтруктураСоответствия.Вставить("Отчество", "Отчество");
	СтруктураСоответствия.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
	СтруктураСоответствия.Вставить("Пол", "Пол");	
	СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРождения");
	СтруктураСоответствия.Вставить("МестоРождения", "МестоРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставление");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
	СтруктураСоответствия.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформированияПредставление");
	СтруктураСоответствия.Вставить("АдресРегистрации", "АдресРегистрации");
	СтруктураСоответствия.Вставить("АдресФактический", "АдресФактический");
	СтруктураСоответствия.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
	СтруктураСоответствия.Вставить("Гражданство", "Гражданство");
	СтруктураСоответствия.Вставить("Телефоны", "Телефоны");
	СтруктураСоответствия.Вставить("ИНН", "ИНН");
	
	СтруктураСоответствия.Вставить("ВидДокумента", "ВидДокумента");
	СтруктураСоответствия.Вставить("Серия", "СерияДокумента");
	СтруктураСоответствия.Вставить("Номер", "НомерДокумента");
	СтруктураСоответствия.Вставить("ДатаВыдачи", "ДатаВыдачи");
	СтруктураСоответствия.Вставить("КемВыдан", "КемВыдан");
	СтруктураСоответствия.Вставить("СтатусНалогоплательщика", "СтатусНалогоплательщика");
	Возврат СтруктураСоответствия;
КонецФункции	

#КонецОбласти


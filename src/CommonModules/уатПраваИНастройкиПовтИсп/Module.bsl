//////////////////////////////////////////////////////////////////
//        ФУНКЦИИ РАБОТЫ ПРАВАМИ И НАСТРОЙКАМИ
//////////////////////////////////////////////////////////////////  

#Область СлужебныйПрограммныйИнтерфейс

// Получает текущие значения прав и настроек из регистра ПраваИНастройки.
// Выбираются все права и настройки текущего пользователя, всех организаций и всех подразделений,
// права и настройки других пользователей не кэшируются в целях защиты информации
//
Функция ПолучитьЗначенияВсехПравНастроек(Знач ТекущийПользователь) Экспорт
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ЗапросПраваНастройки = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланВидовХарактеристикПраваИНастройки.Ссылка,
	|	ПланВидовХарактеристикПраваИНастройки.ТипЗначения,
	|	ПланВидовХарактеристикПраваИНастройки.Назначение,
	|	ПланВидовХарактеристикПраваИНастройки.ЗначениеПоУмолчанию,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаКомпании,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаОрганизации,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаПодразделения,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаПользователя
	|ИЗ
	|	ПланВидовХарактеристик.уатПраваИНастройки КАК ПланВидовХарактеристикПраваИНастройки
	|ГДЕ
	|	(ПланВидовХарактеристикПраваИНастройки.Предопределенный
	|	ИЛИ ПланВидовХарактеристикПраваИНастройки.Родитель = &ГруппаПВХНастройкаДоступностиСправочники
	|	ИЛИ	ПланВидовХарактеристикПраваИНастройки.Родитель = &ГруппаПВХНастройкаДоступностиДокументы)
	|	И (НЕ ПланВидовХарактеристикПраваИНастройки.ЭтоГруппа)");
	ЗапросПраваНастройки.УстановитьПараметр("ГруппаПВХНастройкаДоступностиСправочники", уатПраваИНастройки.уатПолучитьСсылкуПВХПравИНастроек(НСтр("en='ACCESS RIGHTS OF CATALOGS';ru='ПРАВА ДОСТУПА СПРАВОЧНИКОВ'")));
	ЗапросПраваНастройки.УстановитьПараметр("ГруппаПВХНастройкаДоступностиДокументы", уатПраваИНастройки.уатПолучитьСсылкуПВХПравИНастроек(НСтр("en='ACCESS RIGHTS OF DOCUMENTS';ru='ПРАВА ДОСТУПА ДОКУМЕНТОВ'")));
	ВыборкаПраваНастройки = ЗапросПраваНастройки.Выполнить().Выбрать();
	
	ЗапросЗначенияНастроек = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПраваИНастройки.Объект КАК Объект,
	|	уатПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	уатПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК уатПраваИНастройки");
	тблЗначенияПравИНастроек = ЗапросЗначенияНастроек.Выполнить().Выгрузить();
	
	СтруктураПравНастроек = Новый Соответствие;
	
	Пока ВыборкаПраваНастройки.Следующий() Цикл
		СтрокиЗначенияПравИНастроек = тблЗначенияПравИНастроек.НайтиСтроки(Новый Структура("ПравоНастройка", ВыборкаПраваНастройки.Ссылка));
		
		СОбъектыПрава = Новый Соответствие;
		Для Каждого ТекСтрокаЗначение Из СтрокиЗначенияПравИНастроек Цикл
			Если ВыборкаПраваНастройки.НастройкаПользователя И (ТипЗнч(ТекСтрокаЗначение.Объект) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ТекСтрокаЗначение.Объект) = Тип("СправочникСсылка.ВнешниеПользователи"))
					И Не ТекСтрокаЗначение.Объект = ТекущийПользователь Тогда 
				Продолжить;
			КонецЕсли;
			
			СОбъектыПрава.Вставить(ТекСтрокаЗначение.Объект, ТекСтрокаЗначение.Значение);
		КонецЦикла;
		
		// добавляем значение по умолчанию
		ЗначениеПоУмолчанию = ВыборкаПраваНастройки.ЗначениеПоУмолчанию;
		// если и по умолчанию ничего нет, то типизируем (на всякий случай)
		Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			ЗначениеПоУмолчанию = ВыборкаПраваНастройки.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;
		СОбъектыПрава.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
		
		СтруктураПравНастроек.Вставить(ВыборкаПраваНастройки.Ссылка, СОбъектыПрава);
	КонецЦикла;
	
	// Запрос для кэширования дополнительных настроек доступа справочников и документов
	// из регистров сведений ДоступКСправочникам и ДоступКДокументам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступКСправочникам.Объект КАК Объект,
	|	ДоступКСправочникам.ДоступЕсть КАК ДоступЕсть,
	|	ДоступКСправочникам.Право КАК Право
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК ПраваИНастройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатДоступКСправочникам КАК ДоступКСправочникам
	|		ПО ПраваИНастройки.Объект = ДоступКСправочникам.Пользователь
	|			И ПраваИНастройки.ПравоНастройка = ДоступКСправочникам.Право
	|ГДЕ
	|	ПраваИНастройки.Объект = &Пользователь
	|	И ПраваИНастройки.Значение = &ВыбЗначенияПравСправочников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступКДокументам.Объект,
	|	ДоступКДокументам.ДоступЕсть,
	|	ДоступКДокументам.Право
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК ПраваИНастройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатДоступКДокументам КАК ДоступКДокументам
	|		ПО ПраваИНастройки.Объект = ДоступКДокументам.Пользователь
	|			И ПраваИНастройки.ПравоНастройка = ДоступКДокументам.Право
	|ГДЕ
	|	ПраваИНастройки.Объект = &Пользователь
	|	И ПраваИНастройки.Значение В(&ВыбЗначенияПравДокументов)
	|ИТОГИ
	|	МАКСИМУМ(ДоступЕсть)
	|ПО
	|	Право,
	|	Объект");
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбЗначенияПравСправочников", Перечисления.уатВидыПравДляСправочников.РедактированиеПоГруппам);
	масВидыПравДляДокументов = Новый Массив;
	масВидыПравДляДокументов.Добавить(Перечисления.уатВидыПравДляДокументов.РедактированиеПоПользователям); 
	Запрос.УстановитьПараметр("ВыбЗначенияПравДокументов", масВидыПравДляДокументов);
	
	РезультатПраво = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Перебор полученных значений и формирование соответствия прав
	Пока РезультатПраво.Следующий() Цикл
		РезультатОбъект = РезультатПраво.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СОбъектыПрава = Новый Соответствие;
		Пока РезультатОбъект.Следующий() Цикл
			СОбъектыПрава.Вставить(РезультатОбъект.Объект, РезультатОбъект.ДоступЕсть);
		КонецЦикла;
		ЗначениеТекст = НСтр("en='Values';ru='Значения'") + " ";
		СтруктураПравНастроек.Вставить(ЗначениеТекст + РезультатПраво.Право.Наименование, СОбъектыПрава);
	КонецЦикла;
	
	Возврат СтруктураПравНастроек;
КонецФункции

#КонецОбласти

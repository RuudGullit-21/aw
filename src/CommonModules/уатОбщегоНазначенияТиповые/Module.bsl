////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция уатСформироватьСуммуПрописью(Сумма, Валюта) Экспорт
	
	Если Валюта.ПараметрыПрописи = "" Тогда
		Возврат уатФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописи);
	КонецЕсли;
	
КонецФункции //уатСформироватьСуммуПрописью()

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция уатСформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт
	
	ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
	
	Если ПечатьПрефиксовВключена Тогда
		ТекНомер = ДокументОбъект.Номер;
	Иначе
		ТекНомер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ДокументОбъект.Номер, Истина, Истина);
	КонецЕсли;
	
	Возврат НазваниеДокумента + " № " + ТекНомер
	+ " " + НСтр("en='from';ru='от'") + " " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'") + НСтр("en='';ru=' г.'");
	
КонецФункции // СформироватьЗаголовокДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // уатЕстьРеквизитДокумента()

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры: 
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ЕстьТабЧастьДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт
	
	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);
	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
	Иначе
		Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Позволяет определить есть ли такой регистр сведения
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьДокумент(НаименованиеДокумента) Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("Документ."+СокрЛП(НаименованиеДокумента)) = Неопределено Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;;	
	
	Возврат Результат;
	
КонецФункции

// Позволяет определить есть ли такой регистр сведения
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьКонстанта(НаименованиеКонстанты) Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("Константа."+СокрЛП(НаименованиеКонстанты)) = Неопределено Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;;	
	
	Возврат Результат;
	
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки справочника
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  СправочникОбъект - объект / ссылка на справочник / имя справочника в метаданных
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьРеквизитСправочника(ИмяРеквизита, Справочник) Экспорт
	
	Попытка
		Если ТипЗнч(Справочник) = Тип("Строка") Тогда
			МетаданныеСправочника = Метаданные.Справочники[Справочник];
		Иначе
			МетаданныеСправочника = Справочник.Метаданные();
		КонецЕсли;
		
		Если МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли; 
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции // ЕстьРеквизитСправочника()

// Позволяет определить есть ли среди реквизитов шапки справочника
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьИзмерениеРегистра(ИмяРеквизита, Регистр) Экспорт
	
	Попытка
		Если Регистр.Метаданные().Измерения.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли; 
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции // 

// Функция возвращает строковое представление отбора
// Параметры:
//   Отбор  	  - объект типа Отбор (напр.СправочникСписок.Отбор)
// Возвращаемое значение:
//   Строка       - Строковое представление отбора
//
Функция уатПолучитьПредставлениеОтбора(Отборы) Экспорт
	Если ТипЗнч(Отборы) = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат уатПолучитьПредставлениеОтбораКомпоновщика(Отборы);
	КонецЕсли;
	
	Результат = "";
	Для Каждого Отбор из Отборы Цикл
		Если Отбор.Использование Тогда
			
			Если Отбор.ТипЗначения = Новый ОписаниеТипов("Дата") и уатОбщегоНазначения.уатЗначениеНеЗаполнено(Отбор.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Результат + Символы.НПП;
			Результат = Результат + СтрЗаменить(Отбор.Представление, "_", " ")  + Символы.НПП;
			
			Если Отбор.ВидСравнения = ВидСравнения.Равно Тогда
				Результат = Результат + "= " + СокрЛП(Отбор.Значение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Больше Тогда
				Результат = Результат + "> " + СокрЛП(Отбор.Значение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Меньше Тогда
				Результат = Результат + "< " + СокрЛП(Отбор.Значение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
				Результат = Результат + " > ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + Символы.НПП + НСтр("en='I';ru='И'") +" < ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
				Результат = Результат + " >= ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + Символы.НПП + НСтр("en='I';ru='И'") + " <= ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
				Результат = Результат + " >= ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + Символы.НПП + НСтр("en='I';ru='И'") + " < ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				Результат = Результат + " > ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + Символы.НПП + НСтр("en='I';ru='И'") + " <= ";
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке
				Или Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
				Или Отбор.ВидСравнения = ВидСравнения.НеВСписке
				Или Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				Результат = Результат + Нрег(Отбор.ВидСравнения) + " (" + СокрЛП(Отбор.Значение) + ")";
			Иначе
				Результат = Результат + Нрег(Отбор.ВидСравнения) + Символы.НПП + СокрЛП(Отбор.Значение);
			КонецЕсли;
			Результат = Результат + ";";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция уатПолучитьПредставлениеОтбораКомпоновщика(ОтборКомпоновки)
	Результат = "";
	
	Колич = ОтборКомпоновки.Элементы.Количество();
	Сч = 0;
	
	Для Каждого Отбор из ОтборКомпоновки.Элементы Цикл
		Сч = Сч + 1;
		
		Если Отбор.Использование Тогда
			Если ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				вложПредставление = СокрЛП(уатПолучитьПредставлениеОтбораКомпоновщика(Отбор));
				Если Прав(вложПредставление, 1) = ";" Тогда
					вложПредставление = Лев(вложПредставление, СтрДлина(вложПредставление)-1);
				КонецЕсли;
				
				Результат = Результат + " Группа И [" + вложПредставление + "]";
				
				Если Сч < Колич Тогда
					Результат = Результат + ";";
				КонецЕсли;
			
				Продолжить;
			КонецЕсли;
			
			Результат = Результат + " ";
			
			ТекИмя = Отбор.Представление;
			Если НЕ ЗначениеЗаполнено(ТекИмя) Тогда
				ТекИмя = Отбор.ЛевоеЗначение;
				ТекИмя = ИмяПредставленияОтбораКомпоновщика(Строка(ТекИмя));
			КонецЕсли;
			
			Результат = Результат + СтрЗаменить(ТекИмя, "_", " ")  + " ";
			
			Если Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				Результат = Результат + "= " + СокрЛП(Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				Результат = Результат + "<> " + СокрЛП(Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				Результат = Результат + "> " + СокрЛП(Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				Результат = Результат + "< " + СокрЛП(Отбор.ПравоеЗначение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
				Или Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				Или Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
				Или Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				
				// 1С-ка обрезает представление списка при количестве элементов свыше 10
				ПравоеЗначениеПредставление = "";
				Для Каждого ТекЭлем Из Отбор.ПравоеЗначение Цикл
					ПравоеЗначениеПредставление = ПравоеЗначениеПредставление + ТекЭлем.Значение + "; ";
				КонецЦикла;
				Если НЕ ПустаяСтрока(ПравоеЗначениеПредставление) Тогда
					ПравоеЗначениеПредставление = Лев(ПравоеЗначениеПредставление, СтрДлина(ПравоеЗначениеПредставление)-2);
				КонецЕсли;
				
				Результат = Результат + Нрег(Отбор.ВидСравнения) + " (" + СокрЛП(ПравоеЗначениеПредставление) + ")";
			Иначе
				Результат = Результат + Нрег(Отбор.ВидСравнения) + " " + СокрЛП(Отбор.ПравоеЗначение);
			КонецЕсли;
			
			Если Сч < Колич Тогда
				Результат = Результат + ";";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

// Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция уатОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры,
	|РуководительСсылка, ГлавныйБухгалтерСсылка");
	
	Если Организация <> Неопределено тогда
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		
		Если уатРаботаСМетаданными.уатЕстьРегистрСведений("ОтветственныеЛицаОрганизаций") Тогда
			Если уатРаботаСМетаданными.уатЕстьРегистрСведений("ФИОФизическихЛиц") Тогда
				ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
				                      |	ВЫБОР
				                      |		КОГДА ФИОФизЛицСрезПоследних.ФизическоеЛицо ЕСТЬ NULL
				                      |			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
				                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ
				                      |	КОНЕЦ КАК ФИОПолное,
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
				                      |ИЗ
				                      |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
				                      |		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо";
			Иначе
				ЗапросПоЛицам.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК ФИОПолное,
				|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
			КонецЕсли;
		Иначе
			ЗапросПоЛицам.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
			|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Наименование КАК ФИОПолное,
			|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо
			|ИЗ
			|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
			|ГДЕ
			|	&ДатаСреза > ОтветственныеЛицаОрганизаций.ДатаНачала
			|	И (&ДатаСреза < КОНЕЦПЕРИОДА(ОтветственныеЛицаОрганизаций.ДатаОкончания, ДЕНЬ) ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1,1,1))
			|	И ОтветственныеЛицаОрганизаций.Владелец = &Организация";
			
		КонецЕсли;
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;
				Результат.РуководительСсылка      = Выборка.ФизическоеЛицо;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
				Результат.ГлавныйБухгалтерСсылка  = Выборка.ФизическоеЛицо;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;

			КонецЕсли;

		КонецЦикла;

		Если Исполнитель <> Неопределено тогда

			ЗапросПоИсполнителям = Новый Запрос();
			ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
			ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
			ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
						
			Если уатРаботаСМетаданными.уатЕстьРегистрСведений("ФИОФизическихЛиц") Тогда
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатКадроваяИсторияСотрудниковСрезПоследних.Должность.Наименование КАК Должность,
				|	ВЫБОР
				|		КОГДА ФИОФизЛицСрезПоследних.ФизическоеЛицо ЕСТЬ NULL
				|			ТОГДА уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо.Наименование
				|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				|				ИНАЧЕ """"
				|			КОНЕЦ + ВЫБОР
				|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				|				ИНАЧЕ """"
				|			КОНЕЦ
				|	КОНЕЦ КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
				|			&ДатаСреза,
				|			Сотрудник.ФизическоеЛицо = &Исполнитель
				|				И Организация = &Организация) КАК уатКадроваяИсторияСотрудниковСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ФизическоеЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо";
			Иначе
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
				|	РаботникиОрганизацииСрезПоследних.Сотрудник.ФизическоеЛицо.Наименование КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
				|			&ДатаСреза,
				|			Сотрудник.ФизическоеЛицо = &Исполнитель
				|				И Организация = &Организация) КАК РаботникиОрганизацииСрезПоследних";
			КонецЕсли;
			
			ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

			Если ВыборкаИсполнителей.Следующий() тогда
				Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
				Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;
КонецФункции // РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций()

// Функция "расщепляет" строку на подстроки заданной длины.
//
//	Параметры: 
//		ИсходнаяСтрока - строка, которую необходимо разложить на подстроки. 
//						 Параметр передается по значению.
//		ДлинаПодстроки - число, длина требуемой подстроки.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция уатРазбитьСтрокуНаПодстроки(ИсходнаяСтрока, ДлинаПодстроки) Экспорт
	МассивСтрок = Новый Массив;
	СтрокаРазделителей = Новый Массив;
	СтрокаРазделителей.Добавить(" ");
	СтрокаРазделителей.Добавить(",");
	СтрокаРазделителей.Добавить(".");
	// СтрокаРазделителей.Добавить("-");
	СтрокаРазделителей.Добавить(":");
	СтрокаРазделителей.Добавить(";");
	
	Сч1 = ДлинаПодстроки;
	Пока СтрДлина(ИсходнаяСтрока) > ДлинаПодстроки Цикл
		НайденРазделитель = 0;
		ЧастьСтроки = Лев(ИсходнаяСтрока, ДлинаПодстроки);
		Пока Сч1 <> 1 Цикл
			Для Каждого Разделитель Из СтрокаРазделителей Цикл
				Если Найти(Сред(ЧастьСтроки, Сч1, 1), Разделитель) > 0 Тогда
					НайденРазделитель = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденРазделитель Тогда
				Прервать
			КонецЕсли;
			Сч1 = Сч1 - 1;
		КонецЦикла;
		Если НайденРазделитель Тогда
			МассивСтрок.Добавить(Лев(ИсходнаяСтрока, Сч1));
			ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Сч1 + 1, СтрДлина(ИсходнаяСтрока)));
		Иначе
			МассивСтрок.Добавить(Лев(ИсходнаяСтрока, ДлинаПодстроки-1) + "-");
			ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, ДлинаПодстроки, СтрДлина(ИсходнаяСтрока)));
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок.Добавить(ИсходнаяСтрока);
	
	Возврат МассивСтрок;
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт

	// добавлен код для возврата значений для пустой ссылки
	Попытка
		Если Ссылка.Пустая() Тогда
			Возврат Ссылка;
		КонецЕсли;
	Исключение
		Возврат Новый Структура(ИменаРеквизитов);
	КонецПопытки;
		
	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='Wrong type second parameter of ИменаИлиСтруктураРеквизитов: %1';ru='Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
			Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
КонецФункции

// Функция ПолучитьЗначениеРеквизита возвращает значение
// реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	// Сформируем массив совпадающих колонок.
	МассивСовпадающихКолонок = Новый Массив();
	Для каждого Колонка Из ТаблицаПриемник.Колонки Цикл
		
		Если ТаблицаИсточник.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			
			МассивСовпадающихКолонок.Добавить(Колонка.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		
		// Заполним значения в совпадающих колонках.
		Для каждого ЭлементМассива Из МассивСовпадающихКолонок Цикл
			
			СтрокаТаблицыПриемника[ЭлементМассива] = СтрокаТаблицыИсточника[ЭлементМассива];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

// Функция возвращает имя представления отбора компоновщика на нужном языке
Функция ИмяПредставленияОтбораКомпоновщика(ТекИмя) Экспорт
	
	Попытка
		ТекИмя = Перечисления.уатВидыОбластейДействияТарифовТС[ТекИмя];
	Исключение
		Если ТекИмя = "Раздел" Тогда
			ТекИмя = НСтр("en='Section';ru='Раздел'");
		КонецЕсли;
		Возврат ТекИмя;
	КонецПопытки;
	
	Возврат ТекИмя;
	
КонецФункции

// Функция возвращает должность сотрудника 
Функция ПолучитьДолжностьСотрудника(Сотрудник, ДатаСреза = Неопределено, Контрагент = Неопределено) Экспорт
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Должность = "";
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ФизЛицо",    Сотрудник);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	уатСотрудникиКонтрагентов.Должность КАК Должность
		               |ИЗ
		               |	РегистрСведений.уатСотрудникиКонтрагентов КАК уатСотрудникиКонтрагентов
		               |ГДЕ
		               |	уатСотрудникиКонтрагентов.ФизЛицо = &ФизЛицо
		               |	И уатСотрудникиКонтрагентов.Контрагент = &Контрагент"; 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Должность = Выборка.Должность;
		КонецЕсли;
	Иначе
		СтруктураДанных = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Сотрудник, ДатаСреза); 
		Должность       = СтруктураДанных.Должность
	Конецесли;
	
	Возврат Должность;
КонецФункции // РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций()

////////////////////////////////////////////////////////////////////////////////
// НУМЕРАЦИЯ И ПРЕФИКСАЦИЯ

// Процедура устанавливает значение префикса для документа
//
// Параметры:
//	ДокументОбъект - ссылка на документ, для которого требуется сформировать префикс
//	Префикс - параметры ссылка,для возврата значения префикса
//
Процедура уатДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если Не уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	 Или НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда

		Префикс = "0";

	Иначе

		Префикс = ДокументОбъект.Организация.Префикс;

	КонецЕсли;
	
Конецпроцедуры

// Процедура выполняет добавление префикса узла
//
// Параметры:
//  Префикс      - добавляемый префикс
Процедура уатДобавитьПрефиксУзла(Префикс) Экспорт
	Если Метаданные.Константы.Найти("ПрефиксУзлаРаспределеннойИнформационнойБазы") <> Неопределено Тогда
		ПрефиксУзла = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
		Если НЕ ПустаяСтрока(ПрефиксУзла) Тогда
			Префикс = ПрефиксУзла + Префикс;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//	Процедура очистки введенного кода/номера объекта
// Параметры
//  ЭтотОбъект  - объект.
//	КодНомер - имя обрабатываемого реквизита (Код или Номер)
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура уатСброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, КодНомер, ПодменюДействия = Неопределено, ПолеВводаНомера) Экспорт
	
	ОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	Если ОбъектМетаданные.Реквизиты.Найти("Организация") = Неопределено Тогда
		ЭтотОбъект[КодНомер] = "";
	Иначе
		ДлинаПрефикса = СтрДлина(ЭтотОбъект.Организация.Префикс);
		Если ДлинаПрефикса = 0 ИЛИ Лев(ПолеВводаНомера.Значение, ДлинаПрефикса) <> ЭтотОбъект.Организация.Префикс Тогда
			ЭтотОбъект[КодНомер] = "";
		КонецЕсли;
	КонецЕсли;
	
	//Если ЭтотОбъект[КодНомер] = "" Тогда
	//	ОбновитьПодсказкуКодНомерОбъекта(ОбъектМетаданные, ПодменюДействия, ПолеВводаНомера);
	//КонецЕсли;
		
КонецПроцедуры // СброситьУстановленныйКодНомерОбъекта()


////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ДОКУМЕНТОВ

// Выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений               - набор движений регистра,
//  ПустыеКолонкиСоставногоТипа - структура, содержащая имена измерений,ресурсов и
//  реквизитов составного типа, которые могут содержать пустые ссылки.
//
Процедура уатВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено,
	ПустыеКолонкиСоставногоТипа = Неопределено) Экспорт
	
	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеКолонкиСоставногоТипа = Неопределено Тогда
		ПустыеКолонкиСоставногоТипа = Новый Структура;
	КонецЕсли;
	
	//
	КолонкиТаблицы = ТаблицаДвижений.Колонки;
	
	//
	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;
	ИзмеренияСостТипаСтр = "";
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если (МетаИзм.Тип.Типы().Количество() > 1)
			И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаИзм.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаИзм.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаИзм.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРек Из МетаРег.Реквизиты Цикл
		Если (МетаРек.Тип.Типы().Количество() > 1)
			И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРек.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРек.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРек.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРек.Имя;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если (МетаРес.Тип.Типы().Количество() > 1)
			И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРес.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРес.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРес.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРес.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмеренияСостТипаСтр <> "" Тогда
		ИзмеренияСостТипаСтр = Сред(ИзмеренияСостТипаСтр, 3);
	КонецЕсли;
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипДата = Тип("Дата");
	
	ЕстьПериод = НЕ ТаблицаДвижений.Колонки.Найти("Период") = Неопределено;
	
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		Движение = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения, ,ИзмеренияСостТипаСтр);
		
		Если ВидДвижения <> Неопределено Тогда
			Движение.ВидДвижения = ВидДвижения;
		КонецЕсли;
		
		Если ЕстьПериод И НЕ СтрокаДвижения.Период = '00010101000000' Тогда
			Движение.Период = СтрокаДвижения.Период;
		ИначеЕсли НаборДвижений.мПериод <> Неопределено Тогда
			Движение.Период = НаборДвижений.мПериод;
		КонецЕсли; 
		Движение.Активность = Истина;
		
		Для Каждого КлючИЗначение ИЗ ИзмеренияСостТипа Цикл
			ЗначениеВКолонке = СтрокаДвижения[КлючИЗначение.Ключ];
			
			Если ЗначениеВКолонке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияВКолонке = ТипЗнч(ЗначениеВКолонке);
			
			Если ТипЗначенияВКолонке = ТипЧисло Тогда
				Если ЗначениеВКолонке = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипСтрока Тогда
				Если ЗначениеВКолонке = "" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипДата Тогда
				Если ЗначениеВКолонке = '00010101000000' Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеВКолонке.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Движение[КлючИЗначение.Ключ] = ЗначениеВКолонке;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // уатВыполнитьДвижениеПоРегистру()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ

// Проверяет, что в табличной части нет товаров.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура уатПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Если ТаблицаЗначений <> Неопределено И ТаблицаЗначений.Количество() > 0 Тогда
		ТаблицаПроверки_ = ТаблицаЗначений;
	Иначе
		ТаблицаПроверки_ = ДокументОбъект[ИмяТабличнойЧасти]
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПроверки_ Цикл
		СтрокаНачалаСообщенияОбОшибке = НСтр("en='Row number';ru='В строке номер'") + " """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			""" " + НСтр("en='of tabular section';ru='табличной части'") +" """ + ПредставлениеТабличнойЧасти + """: ";
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И НЕ уатОбщегоНазначения.ВидНоменклатурыУслуга(СтрокаТаблицы.Номенклатура) Тогда
			
			ТекстНСТР = СтрокаНачалаСообщенияОбОшибке + НСтр("en='contains products and services that is not a service. There may be only services!';ru='содержится номенклатура, не являющаяся услугой. Здесь могут быть только услуги!'");
			СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЧтоНетТоваров

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			
			СтрокаНачалаСообщенияОбОшибке = НСтр("en='Row number';ru='В строке номер'") +" """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ " + НСтр("en='of tabular section';ru='табличной части'") +" """ + ПредставлениеТабличнойЧасти + """: ";
			
			Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Услуга Тогда
			   
					ТекстНСТР = СтрокаНачалаСообщенияОбОшибке + НСтр("en='contains service.';ru='содержится услуга.'") + " " + НСтр("en='Services should not be here!';ru='Услуг здесь быть не должно!'");
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для Каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			
			СтрокаНачалаСообщенияОбОшибке = НСтр("en='Row number';ru='В строке номер'") +" """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ " + НСтр("en='of tabular section';ru='табличной части'") +" """ + ПредставлениеТабличнойЧасти + """: ";
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
				И уатОбщегоНазначения.ВидНоменклатурыУслуга(СтрокаТаблицы.Номенклатура) Тогда 
				
				ТекстНСТР = СтрокаНачалаСообщенияОбОшибке + НСтр("en='contains service.';ru='содержится услуга.'") + " " + НСтр("en='Services should not be here!';ru='Услуг здесь быть не должно!'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПроверитьЧтоНетУслуг()

// Проверяет, что в табличной части уникальные грузовые места не дублируются.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетДублейУникальныхГМ(ДокументОбъект, ИмяТабличнойЧасти, Отказ, Заголовок) Экспорт
	
	МассивГрузов         = Новый Массив();
	СоответветсвиеГрузов = Новый Соответствие();
	
	НомерСтроки = 1;
	
	ТЧ = Новый ТаблицаЗначений;
	ТЧ.Колонки.Добавить("ГрузовоеМесто", Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ"));
	ТЧ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		Если НЕ ТекСтрока.ГрузовоеМесто.УникальноеГрузовоеМесто Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТЧ.Добавить();
		НоваяСтрока.ГрузовоеМесто = ТекСтрока.ГрузовоеМесто;
		НоваяСтрока.НомерСтроки   = НомерСтроки;
		СоответветсвиеГрузов.Вставить(ТекСтрока.ГрузовоеМесто, НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТЧ", ТЧ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЧ.ГрузовоеМесто КАК ГрузовоеМесто,
	               |	1 КАК Количество
	               |ПОМЕСТИТЬ втГрузы
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втГрузы.ГрузовоеМесто КАК ГрузовоеМесто,
	               |	СУММА(втГрузы.Количество) КАК Количество
	               |ПОМЕСТИТЬ втИтог
	               |ИЗ
	               |	втГрузы КАК втГрузы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втГрузы.ГрузовоеМесто
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втИтог.ГрузовоеМесто КАК ГрузовоеМесто
	               |ИЗ
	               |	втИтог КАК втИтог
	               |ГДЕ
	               |	втИтог.Количество > 1";
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерСтроки = СоответветсвиеГрузов.Получить(Выборка.ГрузовоеМесто);
		СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер'") +" """+ СокрЛП(НомерСтроки) +
		""" " + НСтр("ru='табличной части'") +" """ + ПредставлениеТабличнойЧасти + """: ";
		ТекстНСТР = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='обнаружен дубль уникального грузового места.'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПЕРИОДАМИ

// Выравнивает дату по началу периода.
//
// Параметры:
//  ДатаПланирования  - выравниваемая дата
//  Периодичность     - тип интервала для выравнивания
//  НазваниеДаты 	  - наименование вида даты для вывода сообщения
//  ВыводитьСообщение - признак необходимости вывода сообщения о выравнивании
//
Процедура уатВыровнятьДатуПоНачалуПериода(ДатаПланирования, Периодичность, НазваниеДаты = Неопределено, ВыводитьСообщение=Ложь) Экспорт
	
	Если НазваниеДаты = Неопределено Тогда
		
		НазваниеДаты = НСтр("en='Period start date';ru='Дата начала периода'")
		
	КонецЕсли;
	
	ДатаИзменена = Ложь;
	ДатаНачПериода = ДатаПланирования;
	уатВыровнятьПериод(ДатаНачПериода,, Периодичность);
	
	Если ДатаПланирования <> ДатаНачПериода Тогда
		
		ДатаПланирования = ДатаНачПериода;
		ДатаИзменена = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщение и ДатаИзменена Тогда
		
		ТекстНСТР = НазваниеДаты + " " + НСтр("en='changed in accordance with periodicity.';ru='изменена в соответствии с установленной периодичностью.'");
		СообщитьОбОшибке(ТекстНСТР);
		
	КонецЕсли;
	
КонецПроцедуры // ВыровнятьДатуПоНачалуПериода()

// Процедура выравнивает начальную и конечную даты по границам указанной периодичности
// 		ДатаНачПериода - дата, которую нужно выровнять по началу указанной периодичностью
// 		ДатаКонПериода - дата, которую нужно выровнять по окончанию указанной периодичностью
// 		Периодичность - периодичность, определяющая границы выравнивания
// 
Процедура уатВыровнятьПериод(ДатаНачПериода = Неопределено, ДатаКонПериода = Неопределено, Периодичность = Неопределено) Экспорт
	
	Если ТипЗнч(Периодичность) <> Тип("ПеречислениеСсылка.Периодичность") ИЛИ Периодичность = Перечисления.Периодичность.ПустаяСсылка() Тогда
		
		ТекущаяПериодичность = Перечисления.Периодичность.День;
		
	Иначе
		
		ТекущаяПериодичность = Периодичность;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(&ДатаНач, " + Строка(ТекущаяПериодичность) + ") КАК ДатаНач,
	|	КОНЕЦПЕРИОДА(&ДатаКон, " + Строка(ТекущаяПериодичность) + ") КАК ДатаКон");
	
	Запрос.УстановитьПараметр("ДатаНач", ?(ТипЗнч(ДатаНачПериода) <> Тип("Дата"), Дата('00010101'), ДатаНачПериода));
	Запрос.УстановитьПараметр("ДатаКон", ?(ТипЗнч(ДатаКонПериода) <> Тип("Дата"), Дата('00010101'), ДатаКонПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДатаНачПериода = Выборка.ДатаНач;
	ДатаКонПериода = Выборка.ДатаКон;
	
КонецПроцедуры // ВыровнятьПериод()

// Выравнивает дату по окончанию периода.
//
// Параметры:
//  ДатаПланирования  - выравниваемая дата
//  Периодичность     - тип интервала для выравнивания
//  НазваниеДаты 	  - наименование вида даты для вывода сообщения
//  ВыводитьСообщение - признак необходимости вывода сообщения о выравнивании
//
Процедура уатВыровнятьДатуПоКонцуПериода(ДатаПланирования, Периодичность, НазваниеДаты = Неопределено, ВыводитьСообщение = Ложь) Экспорт
	
	Если НазваниеДаты = Неопределено Тогда
		
		НазваниеДаты = НСтр("en='End of period date';ru='Дата окончания периода'")
		
	КонецЕсли;

	ДатаИзменена = Ложь;
	ДатаКонПериода = ДатаПланирования;
	уатВыровнятьПериод(, ДатаКонПериода, Периодичность);
	
	Если ДатаПланирования <> ДатаКонПериода Тогда
		
		ДатаПланирования = ДатаКонПериода;
		ДатаИзменена = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщение и ДатаИзменена Тогда
		
		ТекстНСТР = НазваниеДаты + " " + НСтр("en='changed in accordance with periodicity.';ru='изменена в соответствии с установленной периодичностью.'");
		СообщитьОбОшибке(ТекстНСТР);
		
	КонецЕсли;
	
КонецПроцедуры // уатВыровнятьДатуПоКонцуПериода()


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕСЧЕТЫ СУММ В ДОКУМЕНТАХ

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//	флПлан			  - булево - если Истина, то расчитывается плановая сумма документа
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция уатПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина, флПлан = Ложь) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		МетаданныеДокумента = Метаданные.Документы[ДокументОбъект.ИмяДокумента];
	Иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	флПереводитьИзВалютыСтроки = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И (МетаданныеДокумента.Имя = "уатЗаказГрузоотправителя"
		ИЛИ МетаданныеДокумента.Имя = "уатЗаказПеревозчику_уэ"
		ИЛИ МетаданныеДокумента.Имя = "уатПотребностьВПеревозке_уэ"
		ИЛИ МетаданныеДокумента.Имя = "уатМаршрутныйЛист") Тогда
		
		флПереводитьИзВалютыСтроки = Истина;
		
		Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = Новый Структура("Курс, Кратность", ДокументОбъект.КурсВзаиморасчетов, ДокументОбъект.КратностьВзаиморасчетов);
		Иначе
			СтруктураКурсаДокумента = Новый Структура("Курс, Кратность", ДокументОбъект.Курс, ДокументОбъект.Кратность);
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяТабличнойЧасти = Неопределено Тогда
		мсвТЧ = МетаданныеДокумента.ТабличныеЧасти;
	Иначе
		мсвТЧ = Новый Массив;
		мсвТЧ.Добавить(МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти]);
	КонецЕсли;
	
	флДобавлятьНДСкСумме = уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		И ДокументОбъект.УчитыватьНДС
		И НЕ ДокументОбъект.СуммаВключаетНДС;
				
	СуммаДокумента = 0;
	Для каждого ТЧОбъекта Из мсвТЧ Цикл
		Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		флУчетНДСвТабЧастиДокумента = НЕ флДобавлятьНДСкСумме
			И ЕстьРеквизитТабЧастиДокумента("УчитыватьНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
			И ЕстьРеквизитТабЧастиДокумента("СуммаВключаетНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
			И ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя);
			
		Для Каждого ТекСтрока Из ДокументОбъект[ТЧОбъекта.Имя] Цикл
			флДобавлятьНДСкСумме = флДобавлятьНДСкСумме ИЛИ флУчетНДСвТабЧастиДокумента
				И ТекСтрока.УчитыватьНДС И НЕ ТекСтрока.СуммаВключаетНДС;
				
			ТекСуммаНДС = 0;
			Если флПереводитьИзВалютыСтроки Тогда
				ВалютаСтроки = ТекСтрока.Валюта;
				
				Если НЕ ЗначениеЗаполнено(ВалютаСтроки) Тогда
					ВалютаСтроки = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
								
				СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаСтроки, ДокументОбъект.ДатаКурса);
				
				Если флПлан Тогда
					ТекСумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаПлан,
					ВалютаСтроки, ДокументОбъект.ВалютаДокумента,
					СтруктураКурсаСтроки.Курс, СтруктураКурсаДокумента.Курс,
					СтруктураКурсаСтроки.Кратность, СтруктураКурсаДокумента.Кратность);	
				Иначе
					ТекСумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ВалютаСтроки, ДокументОбъект.ВалютаДокумента,
					СтруктураКурсаСтроки.Курс, СтруктураКурсаДокумента.Курс,
					СтруктураКурсаСтроки.Кратность, СтруктураКурсаДокумента.Кратность);	
				КонецЕсли;
					
				Если флДобавлятьНДСкСумме Тогда
					
					Если флПлан Тогда
						ТекСуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСПлан,
						ВалютаСтроки, ДокументОбъект.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс, СтруктураКурсаДокумента.Курс,
						СтруктураКурсаСтроки.Кратность, СтруктураКурсаДокумента.Кратность);
					Иначе
						ТекСуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
						ВалютаСтроки, ДокументОбъект.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс, СтруктураКурсаДокумента.Курс,
						СтруктураКурсаСтроки.Кратность, СтруктураКурсаДокумента.Кратность);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если флПлан Тогда
					ТекСумма = ТекСтрока.СуммаПлан;
				Иначе
					ТекСумма = ТекСтрока.Сумма;
				КонецЕсли;
				
				Если флДобавлятьНДСкСумме Тогда
					ТекСуммаНДС = ТекСтрока.СуммаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаДокумента = СуммаДокумента + ТекСумма + ТекСуммаНДС;

		КонецЦикла;
	КонецЦикла;
	
	Возврат СуммаДокумента;
	
КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		МетаданныеДокумента = Метаданные.Документы[ДокументОбъект.ИмяДокумента];
	Иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
		
	флПереводитьИзВалютыСтроки = Ложь;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И (МетаданныеДокумента.Имя = "уатЗаказГрузоотправителя"
		ИЛИ МетаданныеДокумента.Имя = "уатЗаказПеревозчику_уэ"
		ИЛИ МетаданныеДокумента.Имя = "уатПотребностьВПеревозке_уэ"
		ИЛИ МетаданныеДокумента.Имя = "уатСтраховойСертификат_уэ") Тогда
		флПереводитьИзВалютыСтроки = Истина;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = Неопределено Тогда
		мсвТЧ = МетаданныеДокумента.ТабличныеЧасти;
	Иначе
		мсвТЧ = Новый Массив;
		мсвТЧ.Добавить(МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти]);
	КонецЕсли;
		
	СуммаНДС = 0;
	Для каждого ТЧОбъекта Из мсвТЧ Цикл
		Если НЕ ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ДокументОбъект[ТЧОбъекта.Имя] Цикл
			Если флПереводитьИзВалютыСтроки И ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
				СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ДокументОбъект.ДатаКурса);
				
				ТекСуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ТекСтрока.Валюта, ДокументОбъект.ВалютаДокумента,
					СтруктураКурсаСтроки.Курс, ДокументОбъект.КурсВзаиморасчетов,
					СтруктураКурсаСтроки.Кратность, ДокументОбъект.КратностьВзаиморасчетов);
			Иначе
				ТекСуммаНДС = ТекСтрока.СуммаНДС;
			КонецЕсли;
			
			СуммаНДС = СуммаНДС + ТекСуммаНДС;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СуммаНДС;
	
КонецФункции // ПолучитьСуммуДокументаСНДС()

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция уатПолучитьСтавкуНДС(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	ИначеЕсли Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20") <> Неопределено
		И СтавкаНДС = Перечисления.СтавкиНДС.НДС20
		ИЛИ Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20_120") <> Неопределено
		И СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ПолучитьСтавкуНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция уатРассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция уатФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
	?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
	?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции // ФорматСумм()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция уатКратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Если есть реквизит Кратность - его и вернем
		Если уатЕстьРеквизитДокумента("Кратность", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.Кратность;
		КонецЕсли;
		
		// Если есть реквизит КратностьДокумента - его и вернем
		Если уатЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		КонецЕсли;
		
		// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КратностьВзаиморасчетов - его и вернем.
		Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		КонецЕсли;
		
		// Если вообще нет реквизита кратность, но валюта документа то есть.
		// Нужно получать значение из регистра КурсыВалют
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		Возврат СтруктураКурса.Кратность;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КратностьДокумента()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция уатКурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Если есть реквизит Курс - его и вернем
		Если уатЕстьРеквизитДокумента("Курс", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.Курс;
		КонецЕсли;
		
		// Если есть реквизит КурсДокумента - его и вернем
		Если уатЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсДокумента;
		КонецЕсли;
		
		// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КурсВзаиморасчетов - его и вернем.
		Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		КонецЕсли;
		
		// Если вообще нет реквизита курс, но валюта документа то есть.
		// Нужно получать значение из регистра КурсыВалют
		Если уатЕстьРеквизитДокумента("ДатаКурса", МетаданныеДокумента) Тогда
			ДатаКурса = ДокументОбъект.ДатаКурса;
		Иначе
			ДатаКурса = ДокументОбъект.Дата;
		КонецЕсли;
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДатаКурса);
		Возврат СтруктураКурса.Курс;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КурсДокумента()

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция уатПредставлениеДокументаПриПроведении(Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	ВидОперацииСтр = "";
	Если уатЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		ВидОперацииСтр = " (" + Документ.ВидОперации + ")";
	КонецЕсли;
	
	Возврат НСтр("en='Posting document:';ru='Проведение документа:'") + " " + СокрЛП(Документ) + ВидОперацииСтр;
	
КонецФункции // ПредставлениеДокументаПриПроведении()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура уатПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	//ПроверитьПринадлежностьКВидамУчета();
	
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				ТекстНСТР = НСтр("en='The attribute value is not set';ru='Не заполнено значение реквизита'") + " """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				ТекстНСТР = КлючЗначение.Значение;
			КонецЕсли;
			СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура уатПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
	Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СтрокаНачалаСообщенияОбОшибке = НСтр("en='Row number';ru='В строке номер'") + " """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" " + НСтр("en='of tabular section';ru='табличной части'") + " """ + ПредставлениеТабличнойЧасти + """: ";
		
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = НСтр("en='The attribute value is not set';ru='Не заполнено значение реквизита'") +" """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ТекстНСТР = СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения;
				СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

// Функция - Данные печати итогов НДС
// Получает шаблон строки НДС для заполнения печетных форм документов
// 
// Параметры:
//  СуммаНДС		 - Число - Сумма НДС документа
//  СтавкиНДС		 - Масси - Массив ставок НДС документа
//  СуммаВключаетНДС - Булево - Включает ли документ НДМ или нет
//  Разделитель		 - Строка - Разделитель строк
// 
// Возвращаемое значение:
//	ДанныеПечатиИтогоНДС - Строка - Шаблон строки для печатной формы документа
//
Функция уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, СуммаВключаетНДС, Разделитель = "") Экспорт
	ДанныеПечатиИтогоНДС = Новый Структура("НДС, ВсегоНДС","","");
	
	Если СуммаНДС <> 0 Тогда
		Если СуммаВключаетНДС Тогда
			СтрокаШаблона = НСтр("ru='В том числе НДС%1%2'")
		Иначе
			СтрокаШаблона = НСтр("ru='Сумма НДС%1%2'");
		КонецЕсли; 
		
		Если СтавкиНДС.Количество() = 1 Тогда
			СтавкаНДССтрокой = СтрШаблон(" %1%%", уатПолучитьСтавкуНДС(СтавкиНДС[0]));
			
			ДанныеПечатиИтогоНДС.НДС = СтрШаблон(СтрокаШаблона,СтавкаНДССтрокой, Разделитель);
		Иначе
			ДанныеПечатиИтогоНДС.НДС = СтрШаблон(СтрокаШаблона, "", Разделитель);
		КонецЕсли; 
		
		ДанныеПечатиИтогоНДС.ВсегоНДС = уатФорматСумм(СуммаНДС);
	Иначе
		Если СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС0) <> Неопределено Тогда
			ДанныеПечатиИтогоНДС.НДС      = НСтр("ru='НДС 0%'");
		Иначе
			ДанныеПечатиИтогоНДС.НДС      = НСтр("ru='Без налога (НДС)'");
		КонецЕсли; 
		ДанныеПечатиИтогоНДС.ВсегоНДС = НСтр("ru='-'");
	КонецЕсли;
	
	Возврат ДанныеПечатиИтогоНДС;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СОТРУДНИКИ И ФИЗИЧЕСКИЕ ЛИЦА

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры:
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция уатФамилияИнициалыФизЛица(Объект = Неопределено, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") ИЛИ ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") ИЛИ ТипОбъекта = Тип("СправочникОбъект.Организации") Тогда 
		Возврат Объект.Наименование;
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
		Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
		"")
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
	Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
	"");
	
КонецФункции

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция уатПолучитьСледующийНомер(ПоследнийНомер) Экспорт 

	ДлинаНомера = СтрДлина(ПоследнийНомер);
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()


////////////////////////////////////////////////////////////////////////////////
// ВАЛЮТЫ

// Эта функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон
//
// Параметры:      
//	Сумма          - сумма, которую следует пересчитать;
//	ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюты из которой надо пересчитывать;
//	ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюты в которую надо пересчитывать;
// 	ПоКурсуНач     - курс из которого надо пересчитать, может быть указана дата для валюты нач;
// 	ПоКурсуКон     - курс в который надо пересчитать, может быть указана дата для валюты кон;
// 	ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1);
// 	ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, Знач ПоКурсуНач, Знач ПоКурсуКон,
	Знач ПоКратностьНач = 1, Знач ПоКратностьКон = 1, Знач ОкруглятьРезультат = Истина) Экспорт
	
	//Если ВалютаНач = ВалютаКон Тогда
	//	// Считаем, что пересчет не нужен.
	//	Возврат Сумма;
	//КонецЕсли;
	Если ВалютаНач = ВалютаКон И ПоКурсуНач = ПоКурсуКон И ПоКратностьНач = ПоКратностьКон Тогда
		// Считаем, что пересчет не нужен.
		Возврат Сумма;
	КонецЕсли;
	
	// Если входные параметры - даты расчета курсов, то по ним курс и кратность считаем уже здесь
	Если ЗначениеЗаполнено(ВалютаНач) И ТипЗнч(ПоКурсуНач) = Тип("Дата") Тогда
		СтруктураНачКурс = ПолучитьКурсВалюты(ВалютаНач, ПоКурсуНач);
		ПоКурсуНач       = СтруктураНачКурс.Курс;
		ПоКратностьНач   = СтруктураНачКурс.Кратность;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВалютаНач) И ТипЗнч(ПоКурсуКон) = Тип("Дата") Тогда
		СтруктураКонКурс = ПолучитьКурсВалюты(ВалютаКон, ПоКурсуКон);
		ПоКурсуКон       = СтруктураКонКурс.Курс;
		ПоКратностьКон   = СтруктураКонКурс.Кратность;
	КонецЕсли;
	
	// Если валюта пустая, принимаем курс = 1 и кратность = 1
	Если НЕ ЗначениеЗаполнено(ВалютаНач) Тогда
		Если ПоКурсуНач = 0 Тогда
			ПоКурсуНач = 1;
		КонецЕсли;
		Если ПоКратностьНач = 0 Тогда
			ПоКратностьНач = 1;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаКон) Тогда
		Если ПоКурсуКон = 0 Тогда
			ПоКурсуКон = 1;
		КонецЕсли;
		Если ПоКратностьКон = 0 Тогда
			ПоКратностьКон = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоКурсуНач = ПоКурсуКон И ПоКратностьНач = ПоКратностьКон Тогда
		// ну, тут и считать нечего...
		Возврат Сумма;
	КонецЕсли;
	
	Если ПоКурсуНач = 0 ИЛИ ПоКратностьНач = 0 Тогда
		ТекстНСТР = НСтр("en='Zero rate or a multiplicity of currency werw detected while recalculation';ru='При пересчете обнаружен нулевой курс или кратность валюты'") + " """ + ВалютаНач + """!";
		СообщитьОбОшибке(ТекстНСТР);
		Возврат 0;
	КонецЕсли;
	Если ПоКурсуКон = 0 ИЛИ ПоКратностьКон = 0 Тогда
		ТекстНСТР = НСтр("en='Zero rate or a multiplicity of currency werw detected while recalculation';ru='При пересчете обнаружен нулевой курс или кратность валюты'") + " """ + ВалютаКон + """!";
		СообщитьОбОшибке(ТекстНСТР);
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	флЕС = Константы.уатКонфигурацияДляЕС.Получить();
	
	Если флЕС Тогда
		Рез = (Сумма * ПоКурсуКон * ПоКратностьНач) / (ПоКурсуНач * ПоКратностьКон);
	Иначе
		Рез = (Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач);
	КонецЕсли;
	
	Если ОкруглятьРезультат Тогда
		Рез = Окр(Рез, 2);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции //ПересчитатьИзВалютыВВалюту()

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, Знач ДатаКурса) Экспорт
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	Возврат Структура;
	
КонецФункции // ПолучитьКурсВалюты()

// Проверяет наличие установленного курс аи кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт
	
	ДатаКурса = Дата(1980, 1, 1);
	СтруктураКурса = ПолучитьКурсВалюты(Валюта, ДатаКурса);
	
	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда
		
		// Установим курс и кратность = 1 на 01.01.1980, чтобы не было ошибок при создании документов
		
		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
		РегистрКурсыВалют.Период    = ДатаКурса;
		РегистрКурсыВалют.Валюта    = Валюта;
		РегистрКурсыВалют.Курс      = 1;
		РегистрКурсыВалют.Кратность = 1;
		РегистрКурсыВалют.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьКурсаНа01_01_1980()


//////////////////////////////////////////////////////////////////////////
// СООБЩЕНИЯ ОБ ОШИБКЕ

// Функция убирает из текста сообщения служебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт
	
	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
		
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);
	
КонецФункции // ()

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//  Заголовок - заголовок сообщения
//  Статус - статус сообщения
//
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено) Экспорт
	
	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		
		Если  ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	#Иначе                             
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()


//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОКУМЕНТОВ

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета,
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются,
//  ПараметрОбъектКопирования      - ссылка на объект копирования,
//  ПараметрОснование              - ссылка на объект-основание.
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", ПараметрОбъектКопирования = Неопределено, ПараметрОснование = Неопределено) Экспорт

	Перем ТипЦен;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ДатаДокумента = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Дата), ТекущаяДата(), ДокументОбъект.Дата);
	
	Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Попытка
		Если уатЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
			ДокументОбъект.ПодразделениеОрганизации = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если уатЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", ДокументОбъект.Организация) Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
	  ДокументОбъект.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Склад)) Тогда
		ДокументОбъект.Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
		ДокументОбъект.СкладОрдер = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("СтавкаНДС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)) Тогда
		ДокументОбъект.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
	   И уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
		И уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", ДокументОбъект.Организация) Тогда
		ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
	    СтруктураКурсаДокумента      = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если уатЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)) Тогда
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДокумента);
		ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;

		Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;
	
	флСуммаВключаетНДС = Истина;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда

		// Если тип цен оказался не заполненным, то берем его из установок пользователя
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) И ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда

			// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
			// то флаги включения налогов надо брать из базовой цены
			Если ТипЗнч(ДокументОбъект.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") 
			   И уатЕстьРеквизитДокумента("БазовыйТипЦен",ДокументОбъект.ТипЦен.Метаданные()) 
			   И уатЕстьРеквизитДокумента("Рассчитывается",ДокументОбъект.ТипЦен.Метаданные()) И ДокументОбъект.ТипЦен.Рассчитывается Тогда
				флСуммаВключаетНДС = ДокументОбъект.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
			Иначе
				флСуммаВключаетНДС = ДокументОбъект.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
	   И (Не ДокументОбъект.УчитыватьНДС) Тогда

		ДокументОбъект.УчитыватьНДС = Истина;

		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
			ДокументОбъект.СуммаВключаетНДС = флСуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ЗанимаемыхСтавок", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ЗанимаемыхСтавок)) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ДатаС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаС)) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;
	
	# Если Клиент Тогда

	Если уатЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(РабочаяДата);
	КонецЕсли;

	#КонецЕсли


КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт
	
	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
	
	// Организация.
	Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;
	
	// Подразделение.
	Если уатЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("Подразделение", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;
	
	// Ответственный.
	Если уатЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
	КонецЕсли;
	
	// Склад.
	Если уатЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	
	// Контрагент.
	Если уатЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;
	
	// ДоговорКонтрагента.
	Если уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
		И (НЕ уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
		ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда
		
		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		
		// КурсВзаиморасчетов.
		Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(
				ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
			
			// КратностьВзаиморасчетов.
			Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Банковский счет 
	Если уатЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
		
		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если уатЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
				И (уатРаботаСМетаданными.ЕстьСправочник("БанковскиеСчета") И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли уатЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Банковский счет организации
	Если уатЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
			И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	// ВалютаДокумента.
	Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда
		
		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если уатЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли уатЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
			КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;
		
		// КурсДокумента.
		Если уатЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ТекущаяДата());
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;
			
			// КратностьДокумента.
			Если уатЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// ТипЦен.
	Если уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;
	
	// Тип скидки.
	Если уатЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипСкидкиНаценки = ДокументОснование.ТипСкидкиНаценки;
	КонецЕсли;
	// Тип скидки.
	Если уатЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДисконтнаяКарта = ДокументОснование.ДисконтнаяКарта;
	КонецЕсли;
	
	// УчитыватьНДС.
	Если уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;
	
	// СуммаВключаетНДС.
	Если уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		И уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;
	
	Если уатЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокумента) Тогда
		Если уатЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ИспользоватьПлановуюСебестоимость = ДокументОснование.ИспользоватьПлановуюСебестоимость;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ

// Сравнивает два массива однотипных значений (кроме коллекций значений)
//
// Параметры: 
//  ПервыйМассив,ВторойМассив - сравниваемые массивы
//
// Возвращаемое значение:
//  булево.
//
Функция МассивыИдентичны(ПервыйМассив,ВторойМассив) Экспорт
	
	ЭлементовМассива = ПервыйМассив.Количество();
	МассивыСовпадают = (ЭлементовМассива = ВторойМассив.Количество()); 
	
	Если МассивыСовпадают Тогда
		Для Сч = 1 По ЭлементовМассива Цикл
			Если ПервыйМассив[Сч-1] <> ВторойМассив[Сч-1] Тогда
				Возврат Ложь
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;
	
	Возврат МассивыСовпадают;
	
КонецФункции // МассивыИдентичны()

#КонецОбласти
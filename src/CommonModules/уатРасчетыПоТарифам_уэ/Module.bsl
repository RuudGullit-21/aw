////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции расчета доходов и расходов по тарифам на транспортные услуги.
// 
// Содержит код, используемый в вариантах поставки ПРОФ и КОРП
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

// Выполняет полный расчет табличной части Доходы/Расходы в документах Логистики (Заказ, МЛ, Заказ перевозчику,
// Потребность в перевозке и т.д.)
//
// Параметры:
//  ДокументОбъект - Структура, содержащая данные документа - реквизиты и табличные части (ТЧ заполняются в виде массива
//                                                            структур)
//  ИмяТЧ - Строка - имя ТЧ, которую нужно рассчитать (Доходы, Расходы)
//  НомерСтрокиДокумента - Число - имеет смысл для МЛ, это номер строки ТЧ Заказы при расчете выработки по заказам.
//     Если не указан, то расчет ведется по документу вцелом
//  IDСтрокиПотребности - Число - номер строки ТЧ Заказы Потребности
//  ДопПараметры - Структура - структура дополнительных параметров для расчета
//  КэшУскорения - Структура - временная переменная для ускорения расчета по тарифам
//
Процедура РасчитатьТаблицуУслугВДокументе(ДокументОбъект, ИмяТЧ, НомерСтрокиДокумента = "", IDСтрокиПотребности = Неопределено, ДопПараметры = Неопределено, КэшУскорения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ИмяДокумента = ИмяДокумента(ДокументОбъект);
	
	Если ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
		ДопПараметры.Вставить("IDСтрокиПотребности", IDСтрокиПотребности);
	КонецЕсли;
		
	флПлан = ДопПараметры.Свойство("План") И ДопПараметры.План;
	ИмяКолонкиСумма = ?(флПлан, "СуммаПлан", "Сумма");
	ИмяКолонкиЦена = ?(флПлан, "ЦенаПлан", "Цена");
	ИмяКолонкиСуммаНДС = ?(флПлан, "СуммаНДСПлан", "СуммаНДС");
	ИмяКолонкиКоличество = ?(флПлан, "КоличествоПлан", "Количество");
	Если ИмяДокумента = "уатМаршрутныйЛист" ИЛИ ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
		ИмяКолонкиЗаказ = "ЗаказНаТС";
	ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
		ИмяКолонкиЗаказ = "Груз";
	Иначе
		ИмяКолонкиЗаказ = "";
	КонецЕсли;
	
	ПрейскурантПоставщика = (ИмяТЧ = "Расходы");
	
	ПараметрыВыработкиТарифов = ПолучитьТаблицуПараметровВыработкиТарифов(ДокументОбъект, ИмяТЧ, НомерСтрокиДокумента, IDСтрокиПотребности, ДопПараметры);
	
	// Формируем список складов для построения списка фильтров
	тблСклады = ПараметрыВыработкиТарифов.СкопироватьКолонки("Склад");
	Для Каждого ТекПараметрВыработки Из ПараметрыВыработкиТарифов Цикл
		Если ЗначениеЗаполнено(ТекПараметрВыработки.Склад) Тогда
			НоваяСтрока = тблСклады.Добавить();
			НоваяСтрока.Склад = ТекПараметрВыработки.Склад;
		КонецЕсли;
	КонецЦикла;
	тблСклады.Свернуть("Склад");
	Если тблСклады.Количество() = 0 Тогда
		списСклады = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли тблСклады.Количество() = 1 Тогда
		списСклады = тблСклады[0].Склад;
	Иначе
		списСклады = Новый СписокЗначений;
		списСклады.ЗагрузитьЗначения(тблСклады.ВыгрузитьКолонку("Склад"));
	КонецЕсли;
	
	Для Каждого ТекПараметрВыработки Из ПараметрыВыработкиТарифов Цикл
		Если ТекПараметрВыработки.Количество = 0 
			ИЛИ ТекПараметрВыработки.Исключить Тогда
			Продолжить;
		КонецЕсли;
		
		// Флаг флТолькоСкладскаяОбработка используется при пересчете сумм в строке,
		// когда нас интересует только складская обработка.
		Если ДопПараметры.Свойство("флТолькоСкладскаяОбработка")
			И НЕ (ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка
			И ДопПараметры.ВидСкладскойОперации = ТекПараметрВыработки.ВидСкладскойОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекПараметрВыработки.ПараметрВыработки <> Справочники.уатПараметрыВыработки.ПустаяСсылка() Тогда
			Если (ИмяДокумента = "уатЗаказПеревозчику_уэ" ИЛИ ИмяДокумента = "уатЗаказГрузоотправителя"
				ИЛИ ИмяДокумента = "уатПотребностьВПеревозке_уэ" ИЛИ ИмяДокумента = "уатСтраховойСертификат_уэ")
				И (НЕ ТекПараметрВыработки.ПараметрВыработки.ИспользоватьДляЗаказовИПотребности)
				ИЛИ ИмяДокумента = "уатМаршрутныйЛист"
				И (НЕ ТекПараметрВыработки.ПараметрВыработки.ИспользоватьДляМаршрутныхЛистов) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// формируется список фильтров
		ДопПараметры.Вставить("План", флПлан);
		ДопПараметры.Вставить("ПрейскурантПоставщика", ПрейскурантПоставщика);
		Если ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") И ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("Перевозчик") Тогда
			ДопПараметры.Вставить("Контрагент", ДопПараметры.ПараметрыЗаказаДляРасчета.Перевозчик);
		Иначе
			ДопПараметры.Вставить("Контрагент", ДокументОбъект.Контрагент);
		КонецЕсли;
		ДопПараметры.Вставить("ПараметрВыработки",    ТекПараметрВыработки.ПараметрВыработки);
		ДопПараметры.Вставить("ТипПункта",            ТекПараметрВыработки.ТипПункта);
		ДопПараметры.Вставить("ТипТочкиМаршрута",     ТекПараметрВыработки.ТипТочкиМаршрута);
		ДопПараметры.Вставить("ВидУпаковки",          ТекПараметрВыработки.ВидУпаковки);
		ДопПараметры.Вставить("ТипКонтейнера",        ТекПараметрВыработки.ТипКонтейнера);
		ДопПараметры.Вставить("ВидСкладскойОперации", ТекПараметрВыработки.ВидСкладскойОперации);
		Если ЗначениеЗаполнено(ТекПараметрВыработки.Склад) Тогда
			ДопПараметры.Вставить("Склад",            ТекПараметрВыработки.Склад);
		Иначе
			ДопПараметры.Вставить("Склад",            списСклады);
		КонецЕсли;
		СписокФильтров = СформироватьСписокФильтровДляПоискаТарифов(ДокументОбъект, ИмяТЧ, НомерСтрокиДокумента, IDСтрокиПотребности, ДопПараметры, КэшУскорения);
		
		//ПОИСК ТАРИФОВ
		мТаблицаПрейскурант = Новый ТаблицаЗначений;
		Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
			Если ДопПараметры.Свойство("ПривлеченноеТС") И ДопПараметры.ПривлеченноеТС Тогда
				мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, ДопПараметры, КэшУскорения);
			Иначе
				Если ИмяТЧ = "Расходы" И НЕ ДопПараметры.Свойство("ЗаказПеревозчику") Тогда
					ДобавитьТарифыСебестоимости(мТаблицаПрейскурант, СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, Истина, ДопПараметры);
					// В колонку "Прейскурант" выводится не прейскурант, а статья калькуляции
				Иначе
					мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, ДопПараметры, КэшУскорения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, ДопПараметры, КэшУскорения);
		КонецЕсли;
		
		// Не нашли тарифы - считаем отдельно по количеству упаковок
		Если мТаблицаПрейскурант.Количество() = 0 И ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок Тогда 
			ТекКоэф = ТекПараметрВыработки.ВидУпаковки.Коэффициент;
			ТекПараметрВыработки.Количество = ?(ТекКоэф = 0, 0, ТекПараметрВыработки.Количество / ТекКоэф);
			ТекПараметрВыработки.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
			ДопПараметры.ВидУпаковки = ТекПараметрВыработки.ВидУпаковки;
			
			СписокФильтров = СформироватьСписокФильтровДляПоискаТарифов(ДокументОбъект, ИмяТЧ, НомерСтрокиДокумента, IDСтрокиПотребности, ДопПараметры, КэшУскорения);
			Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
				Если ДопПараметры.Свойство("ПривлеченноеТС") И ДопПараметры.ПривлеченноеТС Тогда
					мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, ДопПараметры, КэшУскорения);
				Иначе
					Если ИмяТЧ = "Расходы" И НЕ ДопПараметры.Свойство("ЗаказПеревозчику") Тогда
						ДобавитьТарифыСебестоимости(мТаблицаПрейскурант, СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, Истина, ДопПараметры);
						// в колонку "Прейскурант" выводится не прейскурант, а статья калькуляции
					Иначе
						мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, ДопПараметры, КэшУскорения);
					КонецЕсли;
				КонецЕсли;
			Иначе
				мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДокументОбъект.Организация, ДокументОбъект.Дата, ДопПараметры, КэшУскорения);
			КонецЕсли;
			
		КонецЕсли;
		
		// Пустой параметр выработки - фиктивный, используется только для расчета
		// по фикс. тарифам с условием применения "Всегда"
		Если ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПустаяСсылка() Тогда
			Сч = мТаблицаПрейскурант.Количество()-1;
			Пока Сч >= 0 Цикл
				мСсылкаТариф = мТаблицаПрейскурант[Сч].Тариф;
				Если НЕ (ТипЗнч(мСсылкаТариф) = Тип("СправочникСсылка.уатТарифыТС")
					И мСсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
					И мСсылкаТариф.УсловиеПримененияФиксТарифа = 1)	Тогда
					мТаблицаПрейскурант.Удалить(Сч);
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
		КонецЕсли;
		
		Если мТаблицаПрейскурант.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Запоминаем начальную строку ТЧ документа
		НомерНачальнойСтроки = ДокументОбъект[ИмяТЧ].Количество();
		
		// нашли тарифы, перебираем
		Для Каждого ТекСтрокаТариф из мТаблицаПрейскурант Цикл
			мСсылкаТариф = ТекСтрокаТариф.Тариф;
			мПрейскурант = ТекСтрокаТариф.Прейскурант;
			
			флТарифТС = (ТипЗнч(мСсылкаТариф) = Тип("СправочникСсылка.уатТарифыТС"));
			
			мВалютаТарифа = ?(флТарифТС, мПрейскурант.Валюта, мСсылкаТариф.Валюта);
			
			// расчет значений группировок для сложных тарифов
			ЗначенияГруппировок = Новый Соответствие;
			мСтоимостьГруза = 0;
			мВалютаГруза = Неопределено;
			мГрузоподъемность = 0;
			мОбъемКузова = 0;
			мКлассГруза = 0;
			Если ИмяДокумента = "уатЗаказГрузоотправителя" Тогда
				мСтоимостьГруза = ДокументОбъект.СтоимостьГруза;
				мВалютаГруза = ДокументОбъект.ВалютаТоваров;
			ИначеЕсли ИмяДокумента = "уатМаршрутныйЛист" Тогда
				// По отдельному заказу
				Если НомерСтрокиДокумента <> "" Тогда
					мСтоимостьГруза = ДопПараметры.ПараметрыЗаказаДляРасчета.СтоимостьГруза;
					мВалютаГруза = ДопПараметры.ПараметрыЗаказаДляРасчета.ВалютаТоваров;
				КонецЕсли;
				мГрузоподъемность = ГрузоподъемностьПоМЛ(ДокументОбъект);
				мОбъемКузова = ОбъемКузоваПоМЛ(ДокументОбъект);
			ИначеЕсли ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
				//ТекСтрокаЗаказ = ДокументОбъект.ПунктыНазначения.Найти(IDСтрокиПотребности, "ID");
				Для Каждого ТекСтрокаЗаказ Из ДокументОбъект.ПунктыНазначения Цикл
					Если ТекСтрокаЗаказ.ID = IDСтрокиПотребности Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				мСтоимостьГруза = ТекСтрокаЗаказ.СтоимостьГруза;
				мВалютаГруза = ДокументОбъект.ВалютаТоваров;
			ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
				мСтоимостьГруза = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя.СтоимостьГруза;
				мВалютаГруза = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя.ВалютаТоваров;
			ИначеЕсли ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
				мСтоимостьГруза = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя.СтоимостьГруза;
				мВалютаГруза    = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя.ВалютаТоваров;
			КонецЕсли;
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, мКлассГруза);
					
			// переведем стоимость груза в валюту прейскуранта
			Если ЗначениеЗаполнено(мВалютаГруза) И мВалютаГруза <> мВалютаТарифа Тогда
				мСтоимостьГруза = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСтоимостьГруза,
					мВалютаГруза, мВалютаТарифа, 
					ДокументОбъект.Дата, ДокументОбъект.Дата);
				ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.СтоимостьГруза, мСтоимостьГруза);
			КонецЕсли;
				
			СтрокаКолМест = ПараметрыВыработкиТарифов.Найти(Справочники.уатПараметрыВыработки.КоличествоУпаковок, "ПараметрВыработки");
			Если СтрокаКолМест = Неопределено Тогда 
				мКоличествоМест = 0;
			Иначе 
				мКоличествоМест = СтрокаКолМест.Количество;
			КонецЕсли;
			
			// добавляем значения группировок сложных тарифов по произвольным параметрам выработки
			ДобавитьВыработкуВЗначенияГруппировок(ЗначенияГруппировок, ПараметрыВыработкиТарифов, мСсылкаТариф);
				        	
			Если флТарифТС Тогда
				Если ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка Тогда
					// Для складских операций база сложного тарифа рассчитывается 
					// по значениям веса, объема и количества мест из текущей строки.
					ПараметрыВыработкиТарифовСкладскаяОперация = ПолучитьТаблицуПараметровВыработкиТарифовСкладскаяОперация(
						ДокументОбъект,
						ПараметрыВыработкиТарифов,
						ТекПараметрВыработки,
						ДопПараметры
					);
					Для Каждого ТекСтрока Из ПараметрыВыработкиТарифовСкладскаяОперация Цикл
						ЗначенияГруппировок.Вставить(ТекСтрока.ПараметрВыработки, ТекСтрока.Количество);
					КонецЦикла;
				КонецЕсли;
				
				мТариф = уатРасчетыПоТарифам.ЗначениеТарифа(мСсылкаТариф, ЗначенияГруппировок, ТекСтрокаТариф.ID);
				
				Если мСсылкаТариф.ТарифнаяСетка Тогда
					ДопПараметры.Вставить("IDстроки", ТекСтрокаТариф.ID);
				КонецЕсли;
			Иначе
				мТариф = мСсылкаТариф.Тариф;
			КонецЕсли;
			
			Если флТарифТС
				И мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка
				И (мСсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки
					ИЛИ мСсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой) Тогда
				// Для складской обработки надо еще добавить параметры базы (вес, объем или кол-во упаковок) из таблицы выработки
				Если мСсылкаТариф.БазаТарифа = Перечисления.уатБазыСкладскихТарифов_уэ.ВесГруза Тогда
					ЗначениеБазыТарифаДни = ТекПараметрВыработки.ВесДни;
					ЗначениеБазыТарифа = ТекПараметрВыработки.Вес;
				ИначеЕсли мСсылкаТариф.БазаТарифа = Перечисления.уатБазыСкладскихТарифов_уэ.ОбъемГруза Тогда
					ЗначениеБазыТарифаДни = ТекПараметрВыработки.ОбъемДни;
					ЗначениеБазыТарифа = ТекПараметрВыработки.Объем;
				ИначеЕсли мСсылкаТариф.БазаТарифа = Перечисления.уатБазыСкладскихТарифов_уэ.КоличествоМест Тогда
					ЗначениеБазыТарифаДни = ТекПараметрВыработки.КоличествоМестДни;
					ЗначениеБазыТарифа = ТекПараметрВыработки.КоличествоМест;
				ИначеЕсли мСсылкаТариф.БазаТарифа = Перечисления.уатБазыСкладскихТарифов_уэ.КоличествоКонтейнеров Тогда
					ЗначениеБазыТарифаДни = ТекПараметрВыработки.КоличествоМестДни;
					ЗначениеБазыТарифа = ТекПараметрВыработки.КоличествоМест;
				КонецЕсли;
				ДопПараметры.Вставить("ЗначениеБазыТарифа", ЗначениеБазыТарифа);
				ДопПараметры.Вставить("ЗначениеБазыТарифаДни", ЗначениеБазыТарифаДни);
				ДопПараметры.Вставить("Организация", ДокументОбъект.Организация);
			КонецЕсли;
			
			Если флТарифТС
				И мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза
				И НЕ ДопПараметры.Свойство("СтоимостьГруза") Тогда
				ТаблицаВыработкиПоЗаказам = ДопПараметры.ПараметрыЗаказаДляРасчета.ТаблицаВыработкиПоЗаказам;
				СтрокиТаблицаВыработкиПоЗаказам = ТаблицаВыработкиПоЗаказам.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.СтоимостьГруза));
				Если СтрокиТаблицаВыработкиПоЗаказам.Количество() <> 0 Тогда
					ДопПараметры.Вставить("СтоимостьГруза", СтрокиТаблицаВыработкиПоЗаказам[0].СтоимостьГРуза);
					ДопПараметры.Вставить("ВалютаТоваров", СтрокиТаблицаВыработкиПоЗаказам[0].ВалютаТоваров);
				КонецЕсли;
			КонецЕсли;
			
			ИндексСтрокиСтоимости = ДобавитьСтрокуСтоимости(ДокументОбъект, ИмяТЧ, мПрейскурант, мСсылкаТариф, мТариф, ТекПараметрВыработки.Количество, ДопПараметры);
			
			// служебные поля структуры строки для расчета тарифов процентом
			Если флТарифТС И ИндексСтрокиСтоимости <> -1 Тогда
				СтруктураСтрокиТЧ = ДокументОбъект[ИмяТЧ][ИндексСтрокиСтоимости];
				СтруктураСтрокиТЧ.Вставить("СписокФильтров", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СписокФильтров));
				СтруктураСтрокиТЧ.Вставить("ЗначенияГруппировок", ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ЗначенияГруппировок));
				Если мСсылкаТариф.ТарифнаяСетка Тогда
					СтруктураСтрокиТЧ.Вставить("IDСтроки", ТекСтрокаТариф.ID);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем лишние тарифы на складскую обработку согласно настройке приоритета тарифов по стоимости в прейскуранте
		НомерКонечнойСтроки = ДокументОбъект[ИмяТЧ].Количество()-1;
		Если ТекПараметрВыработки.ПараметрВыработки <> Справочники.уатПараметрыВыработки.СкладскаяОбработка Или 
			НомерНачальнойСтроки >= НомерКонечнойСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиСумма = ?(ДопПараметры.Свойство("План") И ДопПараметры.План, "СуммаПлан", "Сумма");
		НомерВыбраннойСтроки = НомерНачальнойСтроки;
		Для Сч = НомерНачальнойСтроки По НомерКонечнойСтроки Цикл
			ТекСтрокаСтоимость = ДокументОбъект[ИмяТЧ][Сч];
			Для СчВнутр = НомерНачальнойСтроки По НомерКонечнойСтроки Цикл
				Если Сч = СчВнутр Тогда
					Продолжить;
				КонецЕсли;
				ТекСтрокаПоиска = ДокументОбъект[ИмяТЧ][СчВнутр];
				Если (ТекСтрокаСтоимость.Тариф.Владелец.ПриоритетТарифов = 0 И ТекСтрокаСтоимость[ИмяКолонкиСумма] <= ТекСтрокаПоиска[ИмяКолонкиСумма]
					ИЛИ ТекСтрокаСтоимость.Тариф.Владелец.ПриоритетТарифов = 1 И ТекСтрокаСтоимость[ИмяКолонкиСумма] >= ТекСтрокаПоиска[ИмяКолонкиСумма]) Тогда
					НомерВыбраннойСтроки = СчВнутр;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Теперь нужно удалить все строки ТЧ документа с НомерНачальнойСтроки по НомерКонечнойСтроки,
		// кроме НомерВыбраннойСтроки и строк тарифов прейскурантов, для которых надо сохранять все строки тарифов.
		ВыбраннаяСтрока = ДокументОбъект[ИмяТЧ][НомерВыбраннойСтроки];
		Для Сч = НомерНачальнойСтроки По НомерКонечнойСтроки Цикл
			Если Сч >= ДокументОбъект[ИмяТЧ].Количество() Тогда
				Прервать;
			КонецЕсли;
			Если ДокументОбъект[ИмяТЧ][Сч] = ВыбраннаяСтрока
				Или ДокументОбъект[ИмяТЧ][Сч].Тариф.Владелец.ПриоритетТарифов = 2 Тогда
				Продолжить;
			КонецЕсли;
			ДокументОбъект[ИмяТЧ].Удалить(Сч);
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем лишние тарифы согласно настройке приоритета тарифов по стоимости в прейскуранте
	Сч = ДокументОбъект[ИмяТЧ].Количество();
	Пока Сч >= 1 Цикл
		Сч = Сч - 1;
		
		ТекСтрокаСтоимость = ДокументОбъект[ИмяТЧ][Сч];
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаСтоимость.Тариф) // пустой тариф
			ИЛИ ТипЗнч(ТекСтрокаСтоимость.Тариф) <> Тип("СправочникСсылка.уатТарифыТС") // тариф себестоимости
			ИЛИ ТекСтрокаСтоимость.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы // тарифы процентом оставляем все
			ИЛИ ТекСтрокаСтоимость.Тариф.Владелец.ПриоритетТарифов = 2 // Настройка прейскуранта, когда необходимо оставлять все тарифы
			Тогда
			Продолжить;
		КонецЕсли;
		
		СчВнутр = -1;
		Для Каждого ТекСтрокаПоиска Из ДокументОбъект[ИмяТЧ] Цикл
			СчВнутр = СчВнутр + 1;
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаПоиска.Тариф) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СчВнутр <> Сч И ТекСтрокаПоиска.Тариф = ТекСтрокаСтоимость.Тариф
				И ТекСтрокаПоиска.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка
				И (ИмяКолонкиЗаказ = "" ИЛИ ТекСтрокаПоиска[ИмяКолонкиЗаказ] = ТекСтрокаСтоимость[ИмяКолонкиЗаказ]) Тогда
				
				// Для складской обработки расчет происходит построчно, и здесь строки тарифов нужно не удалять, а сворачивать
				ТекСтрокаПоиска[ИмяКолонкиСумма]    = ТекСтрокаПоиска[ИмяКолонкиСумма]    + ТекСтрокаСтоимость[ИмяКолонкиСумма];
				ТекСтрокаПоиска[ИмяКолонкиСуммаНДС] = ТекСтрокаПоиска[ИмяКолонкиСуммаНДС] + ТекСтрокаСтоимость[ИмяКолонкиСуммаНДС];
				ТекСтрокаПоиска[ИмяКолонкиЦена]     = ТекСтрокаПоиска[ИмяКолонкиЦена]     + ТекСтрокаСтоимость[ИмяКолонкиЦена];
				ТекСтрокаПоиска[имяКолонкиКоличество] = 1;
				
				ДокументОбъект[ИмяТЧ].Удалить(Сч);
				Прервать;
				
			ИначеЕсли СчВнутр <> Сч
				И ТекСтрокаПоиска.Тариф.Владелец = ТекСтрокаСтоимость.Тариф.Владелец
				И ТекСтрокаПоиска.Тариф.ПараметрВыработки = ТекСтрокаСтоимость.Тариф.ПараметрВыработки
				// Складская обработка рассмотрена выше
				И ТекСтрокаПоиска.Тариф.ПараметрВыработки <> Справочники.уатПараметрыВыработки.СкладскаяОбработка
				И ТекСтрокаПоиска.Тариф.ВидУпаковки = ТекСтрокаСтоимость.Тариф.ВидУпаковки
				И ТекСтрокаПоиска.Тариф.ТипКонтейнера = ТекСтрокаСтоимость.Тариф.ТипКонтейнера
				И ТекСтрокаПоиска.Тариф.ТипПункта = ТекСтрокаСтоимость.Тариф.ТипПункта
				И ТекСтрокаПоиска.Тариф.ТипТочкиМаршрута = ТекСтрокаСтоимость.Тариф.ТипТочкиМаршрута
				И ТекСтрокаПоиска.Тариф.ВидСкладскойОперации = ТекСтрокаСтоимость.Тариф.ВидСкладскойОперации
				И (ИмяКолонкиЗаказ = "" ИЛИ ТекСтрокаПоиска[ИмяКолонкиЗаказ] = ТекСтрокаСтоимость[ИмяКолонкиЗаказ])
				И (ТекСтрокаСтоимость.Тариф.Владелец.ПриоритетТарифов = 0 И ТекСтрокаСтоимость[ИмяКолонкиСумма] <= ТекСтрокаПоиска[ИмяКолонкиСумма]
					ИЛИ ТекСтрокаСтоимость.Тариф.Владелец.ПриоритетТарифов = 1 И ТекСтрокаСтоимость[ИмяКолонкиСумма] >= ТекСтрокаПоиска[ИмяКолонкиСумма]) Тогда
				
				ДокументОбъект[ИмяТЧ].Удалить(Сч);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Удаляем строки складского хранения с нулевой суммой.
	// Они могут появляться из-за нормы бесплатного хранения или бесплатных единиц.
	Сч = ДокументОбъект[ИмяТЧ].Количество();
	Пока Сч >= 1 Цикл
		Сч = Сч - 1;
		ТекСтрокаПоиска = ДокументОбъект[ИмяТЧ][Сч];
		Если ТипЗнч(ТекСтрокаСтоимость.Тариф) = Тип("СправочникСсылка.уатТарифыТС") 
			И ТекСтрокаПоиска[ИмяКолонкиСумма] = 0 Тогда
			
			ДокументОбъект[ИмяТЧ].Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
	
	// добавляем тарифы процентом от других тарифов
	Если НЕ ДопПараметры.Свойство("НеУчитыватьТарифыПроцентом") Тогда
		// Соотв. [ИндексСтрокиТЧ, СтруктураСтрокиЗамены] нужно для корректировки строк ТЧ при расчет скидок
		// Измененные данные ТекСтрока не сохраняются непосредственно в ДокументОбъект
		СоответствиеСтрокСоСкидками = Новый Соответствие;
		
		// ТЧ Доходы, Затраты в документах логистики
		Сч = 0;
		Колич = ДокументОбъект[ИмяТЧ].Количество();
		//КолонкиТЧ = ДокументОбъект[ИмяТЧ].Выгрузить().Колонки;
				
		Пока Сч < Колич Цикл
			ТекСтрока = ДокументОбъект[ИмяТЧ][Сч];
			Сч = Сч + 1;
			
			// Тариф процентом всегда расчитывается по строке с заполненным тарифом
			// (прейскурант базового тарифа и тарифа процентом должны совпадать)
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Тариф) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяДокумента = "уатМаршрутныйЛист" ИЛИ ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
				ТекЗаказ = ТекСтрока.ЗаказНаТС;
			ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
				ТекЗаказ = ТекСтрока.Груз;
			Иначе
				ТекЗаказ = Неопределено;
			КонецЕсли;
			
			ЗаказРасчета = ?(ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета"),
				?(ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя"),
				ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя, Неопределено), Неопределено);
			Если ЗначениеЗаполнено(ЗаказРасчета) И ТекЗаказ <> ЗаказРасчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТЧ = "Расходы" Тогда
				ДопПараметры.Вставить("Контрагент", ДокументОбъект.Контрагент);
			Иначе
				ДопПараметры.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
			КонецЕсли;
			ДопПараметры.Вставить("План", флПлан);
			
			Если ТипЗнч(ТекСтрока.Тариф) = Тип("СправочникСсылка.уатТарифыСебестоимости_уэ") Тогда
				мсвТарифыПроцентом = НайтиТарифыСебестоимостиПроцентом(ТекСтрока.СтатьяРасходов, ДокументОбъект.Дата);
				Для Каждого ТекТарифПроцентом Из мсвТарифыПроцентом Цикл
					Если ЗначениеЗаполнено(ТекТарифПроцентом) Тогда
						ДопПараметры.Вставить("БазоваяСтоимость", ?(флПлан, ТекСтрока.СуммаПлан, ТекСтрока.Сумма));
						ДопПараметры.Вставить("Заказ", ТекЗаказ);
						ДопПараметры.Вставить("Валюта", ТекСтрока.Валюта);
						//ДопПараметры.Вставить("КурсВзаиморасчетов", ТекСтрока.КурсВзаиморасчетов);
						//ДопПараметры.Вставить("КратностьВзаиморасчетов", ТекСтрока.КратностьВзаиморасчетов);
						ДобавитьСтрокуСтоимости(ДокументОбъект, ИмяТЧ, ТекСтрока.СтатьяРасходов, ТекТарифПроцентом.Тариф,
							ТекТарифПроцентом.Тариф.Тариф, ?(флПлан, ТекСтрока.КоличествоПлан, ТекСтрока.Количество), ДопПараметры);
					КонецЕсли;
				КонецЦикла;
			Иначе
				мсвТарифыПроцентом = уатРасчетыПоТарифам.НайтиТарифыПроцентом(ТекСтрока.Тариф, ТекСтрока.СписокФильтров, ПрейскурантПоставщика);
				ОтобратьТарифыПроцентомПоПервымЗаказам(мсвТарифыПроцентом, ДокументОбъект);
			
				Для Каждого ТекТарифПроцентом Из мсвТарифыПроцентом Цикл
					Если НЕ ЗначениеЗаполнено(ТекТарифПроцентом) Тогда
						Продолжить;
					КонецЕсли;
					
					ДопПараметры.Вставить("БазоваяСтоимость", ?(флПлан, ТекСтрока.СуммаПлан, ТекСтрока.Сумма));
					
					Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
						ДопПараметры.Вставить("Заказ", ТекЗаказ);
						ДопПараметры.Вставить("Валюта", ТекСтрока.Валюта);
						//ДопПараметры.Вставить("КурсВзаиморасчетов", ТекСтрока.КурсВзаиморасчетов);
						//ДопПараметры.Вставить("КратностьВзаиморасчетов", ТекСтрока.КратностьВзаиморасчетов);
					ИначеЕсли ИмяДокумента = "уатЗаказГрузоотправителя" Тогда
						ДопПараметры.Вставить("Заказ", ДокументОбъект);
						ДопПараметры.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);
						ДопПараметры.Вставить("КурсВзаиморасчетов", ДокументОбъект.КурсВзаиморасчетов);
						ДопПараметры.Вставить("КратностьВзаиморасчетов", ДокументОбъект.КратностьВзаиморасчетов);
					ИначеЕсли ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
						ДопПараметры.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);
						ДопПараметры.Вставить("КурсВзаиморасчетов", ДокументОбъект.КурсВзаиморасчетов);
						ДопПараметры.Вставить("КратностьВзаиморасчетов", ДокументОбъект.КратностьВзаиморасчетов);
					ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
						ДопПараметры.Вставить("Заказ", ТекЗаказ);
						ДопПараметры.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);
						ДопПараметры.Вставить("КурсВзаиморасчетов", ДокументОбъект.КурсВзаиморасчетов);
						ДопПараметры.Вставить("КратностьВзаиморасчетов", ДокументОбъект.КратностьВзаиморасчетов);
					КонецЕсли;
					
					Если ТекСтрока.Свойство("IDСтроки") Тогда
						IDСтроки = ТекСтрока.IDСтроки;
					Иначе
						IDСтроки = Неопределено;
					КонецЕсли;
					
					мТариф = уатРасчетыПоТарифам.ЗначениеТарифа(ТекТарифПроцентом,
						ТекСтрока.ЗначенияГруппировок, IDСтроки);
						
					Если ИмяТЧ = "Услуги" И (ИмяДокумента = "уатЗаказГрузоотправителя" ИЛИ ИмяДокумента = "уатПотребностьВПеревозке_уэ")
						И НЕ ТекТарифПроцентом.ДобавлятьСкидкуНаценкуОтдельнойСтрокой Тогда
						
						ТекСтрока.ПроцентСкидки = ТекСтрока.ПроцентСкидки + ?(ТекТарифПроцентом.Скидка, мТариф, -мТариф);
					Иначе
						ДобавитьСтрокуСтоимости(ДокументОбъект, ИмяТЧ, ТекСтрока.Тариф.Владелец, ТекТарифПроцентом, мТариф,
							?(флПлан, ТекСтрока.КоличествоПлан, ТекСтрока.Количество), ДопПараметры);
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяТЧ = "Услуги" И (ИмяДокумента = "уатЗаказГрузоотправителя" ИЛИ ИмяДокумента = "уатПотребностьВПеревозке_уэ") Тогда
					ПересчитатьСтрокуПоСкидкамНаценкам(ТекСтрока, флПлан, ДокументОбъект.УчитыватьНДС, ДокументОбъект.СуммаВключаетНДС);
					СтруктураСтрокиСкидки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ТекСтрока);
					СоответствиеСтрокСоСкидками.Вставить(Сч-1, СтруктураСтрокиСкидки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаСкидки Из СоответствиеСтрокСоСкидками Цикл
			ДокументОбъект[ИмяТЧ][ТекСтрокаСкидки.Ключ] = ТекСтрокаСкидки.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет пересчет суммовых показателей в строке ТЧ Услуги (Доходы или Расходы)
// При этом тариф в строке остается прежний, пересчитываются только цена, сумма и т.п.
// а также Количество, если ДопПараметры.Свойство("ПересчетКоличества")
// СтруктураСтроки - строка ТЧ или структура с полями [Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Всего]
//Процедура РассчитатьСтоимостьУслуги(Тариф, Цена, Количество, Сумма, ДопПараметры) Экспорт
Процедура РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураСтроки.Цена = 0;
	СтруктураСтроки.Сумма = 0;
	
	ИмяДокумента = ИмяДокумента(ДопПараметры.ДокументОбъект);
	
	Если СтруктураСтроки.Тариф = Неопределено Тогда
		СтруктураСтроки.Тариф = Справочники.уатТарифыТС.ПустаяСсылка();
	КонецЕсли;
	
	флТарифТС = (ТипЗнч(СтруктураСтроки.Тариф) = Тип("СправочникСсылка.уатТарифыТС"));
	флПлан = (ДопПараметры.Свойство("флПлан") И ДопПараметры.флПлан);
	
	Если флТарифТС Тогда
		Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
			КоэфВеса = 1000;
		Иначе 
			КоэфВеса = 1;
		КонецЕсли;
		Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
			КоэфОбъема = 1000;
		Иначе 
			КоэфОбъема = 1;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияГруппировок = Новый Соответствие;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		//мРасстояниеГруз = ДопПараметры.Расстояние;
		//Если ТипЗнч(ДопПараметры.Время) = Тип("Дата") Тогда
		//	мВремяРаботы = ДопПараметры.Время - НачалоДня(ДопПараметры.Время);
		//Иначе
		//	мВремяРаботы = ДопПараметры.Время;
		//КонецЕсли;
		Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, ГрузоподъемностьПоМЛ(ДопПараметры.ДокументОбъект));
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, ОбъемКузоваПоМЛ(ДопПараметры.ДокументОбъект));
		Иначе
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, ДопПараметры.Грузоподъемность);
			Если ДопПараметры.Свойство("ОбъемКузова") Тогда
				мОбъемКузова = ДопПараметры.ОбъемКузова;
			Иначе
				мОбъемКузова = 0;
			КонецЕсли;
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
		КонецЕсли;
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, ДопПараметры.КлассГруза);
		//мВесГруза = ДопПараметры.ВесГруза;
		//мОбъемГруза = ДопПараметры.ОбъемГруза;
		//мКоличествоМест = ДопПараметры.КоличествоМест;
		мСтоимостьГруза = ДопПараметры.СтоимостьГруза;
		ВалютаПересчета = ДопПараметры.ВалютаДокумента;
		СтруктураКурсПересчета = Новый Структура("Курс, Кратность", ДопПараметры.КурсДокумента, ДопПараметры.КратностьДокумента);
		Дата = ДопПараметры.Дата;
		Если ДопПараметры.Свойство("ПересчетКоличества") Тогда
			флПересчетКоличества = ДопПараметры.ПересчетКоличества;
		Иначе
			флПересчетКоличества = Ложь;
		КонецЕсли;
		
	Иначе
		мГрузоподъемность = 0;
		мОбъемКузова = 0;
		мКлассГруза = 0;
		мСтоимостьГруза = 0;
		ВалютаПересчета = Неопределено;
		СтруктураКурсПересчета = Новый Структура("Курс, Кратность", 1, 1);
		Дата = ТекущаяДата();
		флПересчетКоличества = Ложь;
		
	КонецЕсли;
	
	Если ДопПараметры.Свойство("РаспределениеПоЗаказам") Тогда
		ТекСтрокаДокумента = ДопПараметры.ДокументОбъект.РезультатРаспределения[ДопПараметры.НомерСтрокиДокумента];
	Иначе
		ТекСтрокаДокумента = ДопПараметры.ДокументОбъект[ДопПараметры.ИмяТЧ][ДопПараметры.НомерСтрокиДокумента];
	КонецЕсли;
	
	Если НЕ ДопПараметры.Свойство("Организация") Тогда
		ДопПараметры.Вставить("Организация", ДопПараметры.ДокументОбъект.Организация);
	КонецЕсли;
		
	Если ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
		IDСтрокиПотребности = ТекСтрокаДокумента.ID;
	Иначе
		IDСтрокиПотребности = Неопределено;
	КонецЕсли;
	
	СписокФильтров = СформироватьСписокФильтровДляПоискаТарифов(ДопПараметры.ДокументОбъект, ДопПараметры.ИмяТЧ, ДопПараметры.НомерСтрокиДокумента, IDСтрокиПотребности, ДопПараметры);
	
	IDстроки = "";
	
	// Передается пустой тариф, значит нужно его найти
	// второй вариант - передается тариф типа "сетка", нужно найти строку тарифа
	Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Тариф) ИЛИ флТарифТС И СтруктураСтроки.Тариф.ТарифнаяСетка Тогда
		ДопПараметры_уэ = Новый Структура;
		ДопПараметры_уэ.Вставить("ПрейскурантПоставщика", (ДопПараметры.ИмяТЧ = "Расходы"));
		ДопПараметры_уэ.Вставить("ПараметрВыработки", Неопределено);
		ДопПараметры_уэ.Вставить("ТипПункта", Неопределено);
		ДопПараметры_уэ.Вставить("ТипТочкиМаршрута", Неопределено);
		ДопПараметры_уэ.Вставить("ВидУпаковки", Неопределено);
		ДопПараметры_уэ.Вставить("ТипКонтейнера", Неопределено);
		
		Если ДопПараметры.Свойство("Контрагент") Тогда
			ДопПараметры_уэ.Вставить("Контрагент", ДопПараметры.Контрагент);
		Иначе
			Попытка
				ДопПараметры_уэ.Вставить("Контрагент", ТекСтрокаДокумента.Контрагент);
			Исключение
				ДопПараметры_уэ.Вставить("Контрагент", Неопределено);
			КонецПопытки;
		КонецЕсли;
		
		Если флТарифТС Тогда
			ТекУслуга = ТекСтрокаДокумента.Номенклатура;
			ДопПараметры_уэ.Вставить("Услуга", ТекУслуга);
		КонецЕсли;
		
		Если СтруктураСтроки.Тариф.ТарифнаяСетка Тогда
			ДопПараметры_уэ.Вставить("Тариф", СтруктураСтроки.Тариф);
		КонецЕсли;
				
		Если флТарифТС Тогда
			мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, ДопПараметры.Организация, ДопПараметры.Дата, ДопПараметры_уэ);
		Иначе
			мТаблицаПрейскурант = Неопределено;
			ДобавитьТарифыСебестоимости(мТаблицаПрейскурант, СписокФильтров, ДопПараметры.Организация, ДопПараметры.Дата, Истина, ДопПараметры_уэ);
			// в колонку "Прейскурант" выводится не прейскурант, а статья расходов
		КонецЕсли;
		
		Если мТаблицаПрейскурант.Количество() = 0 Тогда
			ДопПараметры.Вставить("ВалютаТарифа", Справочники.Валюты.ПустаяСсылка());
			ДопПараметры.Вставить("Курс", 1);
			ДопПараметры.Вставить("Кратность", 1);
			Возврат;
		КонецЕсли;
		
		// Берется первый попавшийся тариф, считается что для одной указанной услуги существует только один тариф
		СтруктураСтроки.Тариф = мТаблицаПрейскурант[0].Тариф;
		Если СтруктураСтроки.Тариф.ТарифнаяСетка Тогда
			IDстроки = мТаблицаПрейскурант[0].ID;
		КонецЕсли;
	Иначе
		мТаблицаПрейскурант = Новый ТаблицаЗначений;
		мТаблицаПрейскурант.Колонки.Добавить("Тариф");
		мТаблицаПрейскурант.Колонки.Добавить("ID");
		НоваяСтрока = мТаблицаПрейскурант.Добавить();
		НоваяСтрока.Тариф = СтруктураСтроки.Тариф;
		НоваяСтрока.ID = "";
	КонецЕсли;
	
	СсылкаПрейскурант = СтруктураСтроки.Тариф.Владелец;
		
	Если ИмяДокумента = "уатМаршрутныйЛист"
		ИЛИ ИмяДокумента = "уатЗаказГрузоотправителя" И ДопПараметры.ИмяТЧ = "Расходы" Тогда
		УчитыватьНДС = ТекСтрокаДокумента.УчитыватьНДС;
		СуммаВключаетНДС = ТекСтрокаДокумента.СуммаВключаетНДС;
	Иначе
		УчитыватьНДС = ДопПараметры.ДокументОбъект.УчитыватьНДС;
		СуммаВключаетНДС = ДопПараметры.ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		ИмяКолонкиЗаказ = "ЗаказНаТС";
	ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
		ИмяКолонкиЗаказ = "Груз";
	Иначе
		ИмяКолонкиЗаказ = "";
	КонецЕсли;
	
	// валюта тарифа - исходная валюта, из которой будут пересчитаны цены и суммы
	Если флТарифТС Тогда //тарифы ТС
		ВалютаТарифа = СсылкаПрейскурант.Валюта;
	Иначе //тарифы себестоимости
		ВалютаТарифа = СтруктураСтроки.Тариф.Валюта;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаТарифа) Тогда
		ВалютаТарифа = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ДатаКурса = Неопределено;
	Попытка
		ДатаКурса = ДопПараметры.ДокументОбъект.ДатаКурса;
	Исключение
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(ДатаКурса) Тогда
		ДатаКурса = ДопПараметры.ДокументОбъект.Дата;
	КонецЕсли;
	СтруктураКурсТарифа = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаТарифа, ДатаКурса);
	
	// валюта пересчета - конечная валюта, в которую будут пересчитаны цены и суммы
	ВалютаПересчета = ВалютаТарифа;
	СтруктураКурсПересчета = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаПересчета, ДатаКурса);
			
	Если флТарифТС Тогда //тарифы ТС
		ДопПараметры.Вставить("ВалютаТарифа", ВалютаПересчета);
		ДопПараметры.Вставить("Курс", СтруктураКурсПересчета.Курс);
		ДопПараметры.Вставить("Кратность", СтруктураКурсПересчета.Кратность);
	Иначе //тарифы себестоимости
		ДопПараметры.Вставить("ВалютаТарифа", ВалютаТарифа);
		ДопПараметры.Вставить("Курс", СтруктураКурсТарифа.Курс);
		ДопПараметры.Вставить("Кратность", СтруктураКурсТарифа.Кратность);
	КонецЕсли;
	
	// пересчет стоимости грузы из валюты документа в валюту тарифа
	Если мСтоимостьГруза > 0 Тогда
		Если ДопПараметры.Свойство("ВалютаТоваров") Тогда
			ВалютаТоваров = ДопПараметры.ВалютаТоваров;
		Иначе
			ВалютаТоваров = ДопПараметры.ВалютаДокумента;
		КонецЕсли;
		СтруктураКурсКратностьТоваров = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаТоваров, ДатаКурса);
		
		мСтоимостьГруза = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСтоимостьГруза, 
			ВалютаТоваров, ВалютаТарифа,
			СтруктураКурсКратностьТоваров.Курс, СтруктураКурсТарифа.Курс,
			СтруктураКурсКратностьТоваров.Кратность, СтруктураКурсТарифа.Кратность);
		ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.СтоимостьГруза, мСтоимостьГруза);
	КонецЕсли;
	
	// заполним ставку НДС в строке, если не заполнена
	Если УчитыватьНДС И НЕ ЗначениеЗаполнено(СтруктураСтроки.СтавкаНДС) Тогда
		СтруктураСтроки.СтавкаНДС = ТекСтрокаДокумента.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	// заполним валюту в строке по валюте
	Если СтруктураСтроки.Свойство("Валюта") Тогда
		СтруктураСтроки.Валюта = ВалютаПересчета;
	КонецЕсли;
	
	// Проверяем, является ли тариф тарифом на складскую обработку по параметру выработки.
	флСкладскаяОбработка = Ложь;
	Если СтруктураСтроки.Тариф = Неопределено Тогда
		СтруктураСтроки.Тариф = Справочники.уатТарифыТС.ПустаяСсылка();
	ИначеЕсли СтруктураСтроки.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка
		И СтруктураСтроки.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки Тогда
		флСкладскаяОбработка = Истина;
	КонецЕсли;
	
	// Для складской обработки принцип работы построчный - нужно получить новые значения 
	// во всех строках складской обработки, их может быть несколько.
	Если флСкладскаяОбработка Тогда
		ДопПараметры1 = Неопределено;
		Если ДопПараметры.Свойство("ИмяТЧ") И ДопПараметры.ИмяТЧ = "Расходы" Тогда
			ДопПараметры1 = Новый Структура;
			ДопПараметры1.Вставить("ЗаполнятьТЧДоходы", Ложь);
			ДопПараметры1.Вставить("ЗаполнятьТЧРасходы", Истина);
		КонецЕсли;
		
		СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ДопПараметры.ДокументОбъект, ИмяДокумента, ДопПараметры1);
		ДопПараметры1 = Новый Структура;
		ДопПараметры1.Вставить("флТолькоСкладскаяОбработка", Истина);
		ДопПараметры1.Вставить("ВидСкладскойОперации", ТекСтрокаДокумента.Тариф.ВидСкладскойОперации);
		ДопПараметры1.Вставить("НеУчитыватьТарифыПроцентом", Истина);
		ПараметрыЗаказаДляРасчета = Новый Структура;
		Если ДопПараметры.Свойство("Контрагент") Тогда
			ПараметрыЗаказаДляРасчета.Вставить("Перевозчик", ДопПараметры.Контрагент);
		КонецЕсли;

		Если ИмяКолонкиЗаказ <> "" Тогда
			ПараметрыЗаказаДляРасчета.Вставить("ЗаказГрузоотправителя", ТекСтрокаДокумента[ИмяКолонкиЗаказ]);
		КонецЕсли;
		ДопПараметры1.Вставить("ПараметрыЗаказаДляРасчета", ПараметрыЗаказаДляРасчета);
		
		// Пересчитываем всю стоимость складской обработки
		РасчитатьТаблицуУслугВДокументе(СтруктураДокумента, ДопПараметры.ИмяТЧ,,, ДопПараметры1);
		
		// Теперь ищем строку с тем же самым тарифом (и заказом, если он есть)
		ИмяКолонкиЦена = ?(ДопПараметры.Свойство("План") И ДопПараметры.План, "ЦенаПлан", "Цена");
		Для Каждого Строка Из СтруктураДокумента[ДопПараметры.ИмяТЧ] Цикл
			Если Строка.Тариф = СтруктураСтроки.Тариф 
				И (ИмяКолонкиЗаказ = "" Или ТекСтрокаДокумента[ИмяКолонкиЗаказ] = Строка[ИмяКолонкиЗаказ]) Тогда
				СтруктураСтроки.Цена = Строка[ИмяКолонкиЦена];
			КонецЕсли;
		КонецЦикла;
		
		СтруктураСтроки.Количество = 1;
		СтруктураСтроки.Сумма = СтруктураСтроки.Цена;
		Возврат;
	КонецЕсли;
	
	// получаем таблицу ПараметрыВыработкиТарифов и добавляем выработку в ЗначенияГруппировок для расчета сложных тарифов
	Если ДопПараметры.Свойство("IDСтрокиПотребности") Тогда
		IDСтрокиПотребности = ДопПараметры.IDСтрокиПотребности;
	Иначе
		IDСтрокиПотребности = Неопределено;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") Тогда
		ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", Новый Структура);
	КонецЕсли;
	Если ИмяКолонкиЗаказ <> "" Тогда
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("ЗаказГрузоотправителя", ТекСтрокаДокумента[ИмяКолонкиЗаказ]);
	КонецЕсли;
	ПараметрыВыработкиТарифов = ПолучитьТаблицуПараметровВыработкиТарифов(ДопПараметры.ДокументОбъект,
		ДопПараметры.ИмяТЧ, ДопПараметры.НомерСтрокиДокумента, IDСтрокиПотребности, ДопПараметры);
		
	// добавляем значения группировок сложных тарифов по произвольным параметрам выработки	
	ДобавитьВыработкуВЗначенияГруппировок(ЗначенияГруппировок, ПараметрыВыработкиТарифов, СтруктураСтроки.Тариф);
	
	Если СтруктураСтроки.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
		БазоваяСтоимость = 0;
		флТарифСебестоимости = (ТипЗнч(СтруктураСтроки.Тариф) = Тип("СправочникСсылка.уатТарифыСебестоимости_уэ"));
		КэшУскорения = Неопределено;
		
		Для Каждого ТекСтрокаТЧ Из ДопПараметры.ДокументОбъект[ДопПараметры.ИмяТЧ] Цикл
			Если (НЕ флТарифСебестоимости И ТекСтрокаТЧ.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
				ИЛИ ТекСтрокаТЧ.Тариф.Владелец <> СтруктураСтроки.Тариф.Владелец Тогда
				Продолжить;
			КонецЕсли;
			
			Если флТарифСебестоимости Тогда
				// Добавляем в базу для расчета только те строки, в которых статья расходов содержится в ТЧ "Базовые статьи" тарифа процентом
				Если СтруктураСтроки.Тариф.БазовыеСтатьиКалькуляции.Найти(ТекСтрокаТЧ.СтатьяРасходов, "СтатьяРасходов") <> Неопределено Тогда
					Если ТекСтрокаТЧ.Тариф.МетодРасчета <> Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда //тариф не процентом
						БазоваяСтоимость = БазоваяСтоимость + ?(флПлан, ТекСтрокаТЧ.СуммаПлан, ТекСтрокаТЧ.Сумма);
					ИначеЕсли ДопПараметры.СтатьяРасходов <> ТекСтрокаТЧ.СтатьяРасходов Тогда //тариф процентом, он идет в базу только для тарифа со статьей, отличающейся от базовой
						БазоваяСтоимость = БазоваяСтоимость + ?(флПлан, ТекСтрокаТЧ.СуммаПлан, ТекСтрокаТЧ.Сумма);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если (ИмяДокумента <> "уатМаршрутныйЛист" ИЛИ СтруктураСтроки.ЗаказНаТС = ТекСтрокаТЧ.ЗаказНаТС)
					И СтруктураСтроки.Тариф.БазовыеУслуги.Найти(ТекСтрокаТЧ.Номенклатура) <> Неопределено Тогда
					
					СписокФильтров = СформироватьСписокФильтровДляПоискаТарифов(ДопПараметры.ДокументОбъект, ДопПараметры.ИмяТЧ,
						ТекСтрокаТЧ.НомерСтроки, IDСтрокиПотребности, ДопПараметры, КэшУскорения);
						
					тблТарифыПроцентом = Новый ТаблицаЗначений;
					тблТарифыПроцентом.Колонки.Добавить("Тариф");
					тблТарифыПроцентом.Колонки.Добавить("ОбластьДействия");
					тблТарифыПроцентом.Колонки.Добавить("СтепеньСовпаденияФильтров", Новый ОписаниеТипов("Число"));
					НоваяСтрокаТариф = тблТарифыПроцентом.Добавить();
					НоваяСтрокаТариф.Тариф = СтруктураСтроки.Тариф;
					НоваяСтрокаТариф.ОбластьДействия = СтруктураСтроки.Тариф.ОбластьДействия;
										
					уатРасчетыПоТарифам.ОтобратьТарифыПоОбластямДействия(тблТарифыПроцентом, СписокФильтров,
						Истина, ДопПараметры.ИмяТЧ = "Расходы");
			        					
					Если тблТарифыПроцентом.Количество() > 0 Тогда
						БазоваяСтоимость = БазоваяСтоимость + ?(флПлан, ТекСтрокаТЧ.КоличествоПлан * ТекСтрокаТЧ.ЦенаПлан,
							ТекСтрокаТЧ.Количество * ТекСтрокаТЧ.Цена);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если флПересчетКоличества Тогда
			СтруктураСтроки.Количество = 1;
		КонецЕсли;
		
		Если флТарифСебестоимости Тогда
			мТариф = СтруктураСтроки.Тариф.Тариф;
		Иначе //тариф на услуги
			мТариф = уатРасчетыПоТарифам.ЗначениеТарифа(СтруктураСтроки.Тариф, ЗначенияГруппировок);
		КонецЕсли;
		
		СтруктураСтроки.Цена  = БазоваяСтоимость * мТариф / 100;
		СтруктураСтроки.Сумма = СтруктураСтроки.Цена * СтруктураСтроки.Количество;
		
		Если ДопПараметры.ИмяТЧ = "Услуги" И (ИмяДокумента = "уатЗаказГрузоотправителя"
			ИЛИ ИмяДокумента = "уатПотребностьВПеревозке_уэ") Тогда
			
			СтруктураСтроки.ПроцентСкидки = 0;
			СтруктураСтроки.СуммаСкидки = 0;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// В переменную будем запоминать итоговую структуру строки по приоритету тарифов (макс. или мин. по стоимости)
	СтруктураСтрокиДоп = КопияСтруктурыСтроки(СтруктураСтроки);
				
	СчТарифы = 0;
	Для Каждого ТекСтрокаТариф Из мТаблицаПрейскурант Цикл
		СчТарифы = СчТарифы + 1;
		
		//Если СчТарифы > 1 И (НЕ флТарифТС) Тогда
		//	Продолжить;
		//КонецЕсли;
		Если СчТарифы > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// пересчет количества в текущей строке по выработке
		Если флПересчетКоличества Тогда
			Если ТекСтрокаТариф.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки Тогда
				СтруктураПоиск = Новый Структура("ПараметрВыработки", ТекСтрокаТариф.Тариф.ПараметрВыработки);
				
				// добавляем доп. аналитику для поиска
				Если ТекСтрокаТариф.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ТипПункта) Тогда
					СтруктураПоиск.Вставить("ТипПункта", ТекСтрокаТариф.Тариф.ТипПункта);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ПараметрВыработки.ТипПункта) Тогда
					СтруктураПоиск.Вставить("ТипПункта", ТекСтрокаТариф.Тариф.ПараметрВыработки.ТипПункта);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ТипТочкиМаршрута) Тогда
					СтруктураПоиск.Вставить("ТипТочкиМаршрута", ТекСтрокаТариф.Тариф.ТипТочкиМаршрута);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ПараметрВыработки.ТипТочкиМаршрута) Тогда
					СтруктураПоиск.Вставить("ТипТочкиМаршрута", ТекСтрокаТариф.Тариф.ПараметрВыработки.ТипТочкиМаршрута);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ВидУпаковки) Тогда
					СтруктураПоиск.Вставить("ВидУпаковки", ТекСтрокаТариф.Тариф.ВидУпаковки);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ПараметрВыработки.ВидУпаковки) Тогда
					СтруктураПоиск.Вставить("ВидУпаковки", ТекСтрокаТариф.Тариф.ПараметрВыработки.ВидУпаковки);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ТипКонтейнера) Тогда
					СтруктураПоиск.Вставить("ТипКонтейнера", ТекСтрокаТариф.Тариф.ТипКонтейнера);
				ИначеЕсли ТекСтрокаТариф.Тариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера
					И ЗначениеЗаполнено(ТекСтрокаТариф.Тариф.ПараметрВыработки.ТипКонтейнера) Тогда
					СтруктураПоиск.Вставить("ТипКонтейнера", ТекСтрокаТариф.Тариф.ПараметрВыработки.ТипКонтейнера);
				КонецЕсли;
				
				мсвСтрокиПоиска = ПараметрыВыработкиТарифов.НайтиСтроки(СтруктураПоиск);
				Если мсвСтрокиПоиска.Количество() <> 0 Тогда
					СтруктураСтроки.Количество = мсвСтрокиПоиска[0].Количество;
					
					// Учитывается количество бесплатных единиц
					Если флТарифТС Тогда
						СтруктураСтроки.Количество = Макс(0, СтруктураСтроки.Количество - ТекСтрокаТариф.Тариф.КоличествоБесплатныхЕдиниц);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтруктураСтроки.Количество = 1;
			КонецЕсли;
		КонецЕсли;
		
		//Если СтруктураСтроки.Количество = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
				
		Если флТарифТС Тогда //тариф на услуги
			мТариф = уатРасчетыПоТарифам.ЗначениеТарифа(ТекСтрокаТариф.Тариф, ЗначенияГруппировок, ТекСтрокаТариф.ID);
		Иначе //тариф себестоимости
			мТариф = СтруктураСтроки.Тариф.Тариф;
		КонецЕсли;
		
		Если мТариф > 0 Тогда
			Если СтруктураСтроки.Тариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
				СтруктураСтроки.Количество = 1;
				СтруктураСтроки.Цена = мСтоимостьГруза * мТариф / 100;
			Иначе
				СтруктураСтроки.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мТариф, 
					ВалютаТарифа, ВалютаПересчета,
					СтруктураКурсТарифа.Курс, СтруктураКурсПересчета.Курс,
					СтруктураКурсТарифа.Кратность, СтруктураКурсПересчета.Кратность);
			КонецЕсли;
		КонецЕсли;
		
		// Если параметры учета НДС в прейскуранте и документе не совпадают, то нужно сделать пересчет цены и суммы по тарифу
		Если УчитыватьНДС И ЗначениеЗаполнено(СтруктураСтроки.СтавкаНДС)
			И СтруктураСтроки.Тариф.ПараметрВыработки <> Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
			
			НДСЦены = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтруктураСтроки.Цена, Истина,
				ТекСтрокаТариф.Тариф.Владелец.СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтруктураСтроки.СтавкаНДС));
			
			//ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтруктураСтроки.Сумма,
			//	Истина, СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
			Если НЕ СуммаВключаетНДС И ТекСтрокаТариф.Тариф.Владелец.СуммаВключаетНДС Тогда
				СтруктураСтроки.Цена = СтруктураСтроки.Цена - НДСЦены;
			ИначеЕсли СуммаВключаетНДС И НЕ ТекСтрокаТариф.Тариф.Владелец.СуммаВключаетНДС Тогда
				СтруктураСтроки.Цена = СтруктураСтроки.Цена + НДСЦены;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСтроки.Сумма = СтруктураСтроки.Цена * СтруктураСтроки.Количество;
		
		// учет минимальной выработки
		Если ТекСтрокаТариф.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки Тогда
			Если ТипЗнч(ТекСтрокаТариф.Тариф) = Тип("СправочникСсылка.уатТарифыСебестоимости_уэ") Тогда
				Если ТекСтрокаТариф.Тариф.МинимальнаяВыработка > СтруктураСтроки.Количество Тогда
					СуммаПоТарифу = ТекСтрокаТариф.Тариф.МинимальнаяВыработка * мТариф;
					СтруктураСтроки.Цена = ?(СтруктураСтроки.Количество = 0, 0, СуммаПоТарифу / СтруктураСтроки.Количество);
				КонецЕсли;
			Иначе
				Если ТекСтрокаТариф.Тариф.ТарифнаяСетка Тогда
					СтрокаТарифа = ТекСтрокаТариф.Тариф.СтрокиТарифнойСетки.Найти(ТекСтрокаТариф.ID, "ID");
					Если СтрокаТарифа = Неопределено Тогда
						МинСтоим = 0;
						МинВыраб = 0;
						СпособЗаполн = 0;
					Иначе
						МинСтоим = СтрокаТарифа.МинимальнаяСтоимость;
						МинВыраб = СтрокаТарифа.МинимальнаяВыработка;
						СпособЗаполн = СтрокаТарифа.СпособЗаполненияКоличества;
					КонецЕсли;
				Иначе
					МинСтоим = ТекСтрокаТариф.Тариф.МинимальнаяСтоимость;
					МинВыраб = ТекСтрокаТариф.Тариф.МинимальнаяВыработка;
					СпособЗаполн = ТекСтрокаТариф.Тариф.СпособЗаполненияКоличества;
				КонецЕсли;
				
				МинСтоимостьВалютаДок = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(МинСтоим, 
					ВалютаТарифа, ВалютаПересчета,
					СтруктураКурсТарифа.Курс, СтруктураКурсПересчета.Курс,
					СтруктураКурсТарифа.Кратность, СтруктураКурсПересчета.Кратность);
				
				Если МинСтоимостьВалютаДок > СтруктураСтроки.Сумма Тогда
					СтруктураСтроки.Сумма = МинСтоимостьВалютаДок;
					Если СпособЗаполн = 0 Тогда
						СтруктураСтроки.Цена = ?(СтруктураСтроки.Количество = 0, СтруктураСтроки.Сумма, СтруктураСтроки.Сумма / СтруктураСтроки.Количество);
					ИначеЕсли СпособЗаполн = 1 Тогда
						СтруктураСтроки.Количество = ?(СтруктураСтроки.Цена = 0, 1, СтруктураСтроки.Сумма / СтруктураСтроки.Цена);
					Иначе
						СтруктураСтроки.Количество = 1;
						СтруктураСтроки.Цена = СтруктураСтроки.Сумма;
					КонецЕсли;
					
				ИначеЕсли МинВыраб > СтруктураСтроки.Количество Тогда
					СтруктураСтроки.Сумма = СтруктураСтроки.Цена * МинВыраб;
					Если СпособЗаполн = 0 Тогда
						СтруктураСтроки.Цена = ?(СтруктураСтроки.Количество = 0, СтруктураСтроки.Сумма, СтруктураСтроки.Сумма / СтруктураСтроки.Количество);
					ИначеЕсли СпособЗаполн = 1 Тогда
						СтруктураСтроки.Количество = МинВыраб;
					Иначе
						СтруктураСтроки.Количество = 1;
						СтруктураСтроки.Цена = СтруктураСтроки.Сумма;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Получение скидок и наценок по базовой услуге (базовому тарифу)
		Если ДопПараметры.ИмяТЧ = "Услуги" И (ИмяДокумента = "уатЗаказГрузоотправителя"
			ИЛИ ИмяДокумента = "уатПотребностьВПеревозке_уэ") Тогда
			
			мсвТарифыПроцентом = уатРасчетыПоТарифам.НайтиТарифыПроцентом(ТекСтрокаТариф.Тариф, СписокФильтров);
			ОтобратьТарифыПроцентомПоПервымЗаказам(мсвТарифыПроцентом, ДопПараметры.ДокументОбъект);
			
			СтруктураСтроки.ПроцентСкидки = 0;
			Для Каждого ТекТарифПроцентом Из мсвТарифыПроцентом Цикл
				Если НЕ ЗначениеЗаполнено(ТекТарифПроцентом)
					ИЛИ ТекТарифПроцентом.ДобавлятьСкидкуНаценкуОтдельнойСтрокой Тогда
					Продолжить;
				КонецЕсли;
				
				мТариф = уатРасчетыПоТарифам.ЗначениеТарифа(ТекТарифПроцентом, ЗначенияГруппировок, IDСтроки);
					
				СтруктураСтроки.ПроцентСкидки = СтруктураСтроки.ПроцентСкидки + ?(ТекТарифПроцентом.Скидка, мТариф, -мТариф);
			КонецЦикла;
			
			ПересчитатьСтрокуПоСкидкамНаценкам(СтруктураСтроки, Ложь, УчитыватьНДС, СуммаВключаетНДС);
		КонецЕсли;
		
		Если флТарифТС Тогда
			Если СчТарифы = 1
				ИЛИ ТекСтрокаТариф.Тариф.Владелец.ПриоритетТарифов = 0 И СтруктураСтрокиДоп.Сумма < СтруктураСтроки.Сумма
				ИЛИ ТекСтрокаТариф.Тариф.Владелец.ПриоритетТарифов = 1 И СтруктураСтрокиДоп.Сумма > СтруктураСтроки.Сумма Тогда
				
				СтруктураСтрокиДоп = КопияСтруктурыСтроки(СтруктураСтроки);
				СтруктураСтрокиДоп.Тариф = ТекСтрокаТариф.Тариф;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если флТарифТС  Тогда
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтруктураСтрокиДоп);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьВыработкуВЗначенияГруппировок(ЗначенияГруппировок, ПараметрыВыработкиТарифов, мСсылкаТариф)
	Для Каждого ТекПараметрВыработки Из ПараметрыВыработкиТарифов Цикл
		Если ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта	Тогда
			Если мСсылкаТариф.ТипПункта = ТекПараметрВыработки.ТипПункта
				ИЛИ мСсылкаТариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта
				И мСсылкаТариф.ПараметрВыработки.ТипПункта = ТекПараметрВыработки.ТипПункта Тогда
				ЗначенияГруппировок.Вставить(ТекПараметрВыработки.ПараметрВыработки, ТекПараметрВыработки.Количество);
			КонецЕсли;
		ИначеЕсли ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации Тогда
			Если мСсылкаТариф.ТипТочкиМаршрута = ТекПараметрВыработки.ТипТочкиМаршрута
				ИЛИ мСсылкаТариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута
				И мСсылкаТариф.ПараметрВыработки.ТипТочкиМаршрута = ТекПараметрВыработки.ТипТочкиМаршрута Тогда
				ЗначенияГруппировок.Вставить(ТекПараметрВыработки.ПараметрВыработки, ТекПараметрВыработки.Количество);
			КонецЕсли;
		ИначеЕсли ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок Тогда
			Если мСсылкаТариф.ВидУпаковки = ТекПараметрВыработки.ВидУпаковки
				ИЛИ мСсылкаТариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки
				И мСсылкаТариф.ПараметрВыработки.ВидУпаковки = ТекПараметрВыработки.ВидУпаковки Тогда
				ЗначенияГруппировок.Вставить(ТекПараметрВыработки.ПараметрВыработки, ТекПараметрВыработки.Количество);
			КонецЕсли;
		ИначеЕсли ТекПараметрВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров Тогда
			Если мСсылкаТариф.ТипКонтейнера = ТекПараметрВыработки.ТипКонтейнера
				ИЛИ мСсылкаТариф.ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера
				И мСсылкаТариф.ПараметрВыработки.ТипКонтейнера = ТекПараметрВыработки.ТипКонтейнера Тогда
				ЗначенияГруппировок.Вставить(ТекПараметрВыработки.ПараметрВыработки, ТекПараметрВыработки.Количество);
			КонецЕсли;
		Иначе
			ЗначенияГруппировок.Вставить(ТекПараметрВыработки.ПараметрВыработки, ТекПараметрВыработки.Количество);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
// Возвращает признак того, что доставка ночная. Доставка является ночной, если:
// 1) корректно заполнены интервалы самой доставки в документе
// 2) указаны хотя бы одно из значений настроек организации начало/конец периода ночной доставки
// 3) интервалы документа и настроек пересекаются
//
// Параметры:
//  НачалоИнтервала - дата и время - начало интервала доставки по документу
//  КонецИнтервала  - дата и время - конец интервала доставки по документу
//  Организация - организация документа
//
Функция ЭтоНочнаяДоставка(НачалоИнтервала, КонецИнтервала, Организация) Экспорт
	НачалоНочи = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.НачалоПериодаНочнойДоставки);
	КонецНочи = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ОкончаниеПериодаНочнойДоставки);
		
	Если НЕ ЗначениеЗаполнено(НачалоНочи) И НЕ ЗначениеЗаполнено(КонецНочи)
		ИЛИ НЕ ЗначениеЗаполнено(НачалоИнтервала)
		ИЛИ НЕ ЗначениеЗаполнено(КонецИнтервала)
		ИЛИ НачалоИнтервала = КонецИнтервала Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мсвНочныеПериоды = Новый Массив;
	Если НачалоНочи > КонецНочи Тогда //ночной интервал корректный - переходит через полночь
		мсвНочныеПериоды.Добавить(Новый Структура("Начало, Конец",
			НачалоДня(НачалоИнтервала) - 24*3600 + (НачалоНочи - '00010101'),
			НачалоДня(НачалоИнтервала) + (КонецНочи - '00010101')));
		мсвНочныеПериоды.Добавить(Новый Структура("Начало, Конец",
			НачалоДня(НачалоИнтервала) + (НачалоНочи - '00010101'),
			НачалоДня(НачалоИнтервала) + 24*3600 + (КонецНочи - '00010101')));
	Иначе //ночной интервал некорректный - не переходит через полночь, это фактически дневной интервал
		мсвНочныеПериоды.Добавить(Новый Структура("Начало, Конец",
			НачалоДня(НачалоИнтервала) + (НачалоНочи - '00010101'),
			НачалоДня(НачалоИнтервала) + (КонецНочи - '00010101')));
		мсвНочныеПериоды.Добавить(Новый Структура("Начало, Конец",
			НачалоДня(НачалоИнтервала) + 24*3600 + (НачалоНочи - '00010101'),
			НачалоДня(НачалоИнтервала) + 24*3600 + (КонецНочи - '00010101')));
	КонецЕсли;
	
	флПересечение = Ложь;
	Для Каждого ТекПериод Из мсвНочныеПериоды Цикл
		Если ТекПериод.Начало < КонецИнтервала И ТекПериод.Конец > НачалоИнтервала Тогда
			флПересечение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флПересечение;
КонецФункции		

Процедура ДополнитьТарифнойСеткой(тблТарифы, СписокФильтров, ДопПараметрыРасчетСетки, КэшУскорения) Экспорт
	СтруктураВидовОбластейТарифа = уатРасчетыПоТарифам.СтруктураВидовОбластейТарифа(
		ДопПараметрыРасчетСетки.ПрейскурантПоставщика);
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПрейскурантыТС.Прейскурант КАК Прейскурант,
	|	ТарифыТС.Ссылка КАК Тариф,
	|	ТарифыТС.ID КАК ID,
	|	0 КАК СтепеньСовпаденияФильтров,
	|	ТарифыТС.Ссылка.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПрейскурантыТС.ДатаНачала
	|ИЗ
	|	Справочник.уатТарифыТС.СтрокиТарифнойСетки КАК ТарифыТС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.уатПрейскурантыТС КАК уатПрейскурантыТС
	|ПО ТарифыТС.Ссылка.Владелец = уатПрейскурантыТС.Прейскурант
	|ГДЕ
	|	ТарифыТС.Ссылка.ТарифнаяСетка
	|	И ТарифыТС.Ссылка.Владелец.Организация = &Организация
	|	И уатПрейскурантыТС.ДатаНачала <= &Дата
	|	И (КОНЕЦПЕРИОДА(уатПрейскурантыТС.ДатаОкончания, ДЕНЬ) >= &Дата
	|			ИЛИ уатПрейскурантыТС.ДатаОкончания = &ПустаяДата)
	|	И (НЕ ТарифыТС.Ссылка.ПометкаУдаления)
	|	И (НЕ ТарифыТС.Ссылка.ЭтоГруппа)
	|	И ТарифыТС.Ссылка.Владелец.ПрейскурантПоставщика = &ПрейскурантПоставщика_уэ";
	Если ДопПараметрыРасчетСетки.ПрейскурантПоставщика И ДопПараметрыРасчетСетки.Контрагент <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка.Владелец.Контрагент = &Контрагент_уэ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.ПараметрВыработки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка.ПараметрВыработки = &ПараметрВыработки_уэ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.Услуга) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка.НоменклатураУслуги = &Услуга_уэ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.ТипПункта) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка.ТипПункта = &ТипПункта_уэ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.ТипТочкиМаршрута) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка.ТипТочкиМаршрута = &ТипТочкиМаршрута_уэ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.ВидСкладскойОперации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка.ВидСкладскойОперации = &ВидСкладскойОперации_уэ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.ВидУпаковки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (ТарифыТС.Ссылка.ВидУпаковки = &ВидУпаковки_уэ
		|	ИЛИ (ТарифыТС.Ссылка.ПараметрВыработки = Значение(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
		|		И ТарифыТС.Ссылка.БазаТарифа <> Значение(Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоМест)))";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.ТипКонтейнера) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (ТарифыТС.Ссылка.ТипКонтейнера = &ТипКонтейнера_уэ
		|	ИЛИ (ТарифыТС.Ссылка.ПараметрВыработки = Значение(Справочник.уатПараметрыВыработки.СкладскаяОбработка)
		|		И ТарифыТС.Ссылка.БазаТарифа <> Значение(Перечисление.уатБазыСкладскихТарифов_уэ.КоличествоКонтейнеров)))";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметрыРасчетСетки.Тариф) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТарифыТС.Ссылка = &Тариф";
		Запрос.УстановитьПараметр("Тариф", ДопПараметрыРасчетСетки.Тариф);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	уатПрейскурантыТС.Прейскурант,
	|	уатПрейскурантыТС.ДатаНачала,
	|	ТарифыТС.Ссылка,
	|	ТарифыТС.ID
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПрейскурантыТС.ДатаНачала УБЫВ,
	|	ТарифыТС.Ссылка.Владелец.Код УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент_уэ", ДопПараметрыРасчетСетки.Контрагент);
	Запрос.УстановитьПараметр("ПрейскурантПоставщика_уэ", ДопПараметрыРасчетСетки.ПрейскурантПоставщика);
	Запрос.УстановитьПараметр("ПараметрВыработки_уэ", ДопПараметрыРасчетСетки.ПараметрВыработки);
	Запрос.УстановитьПараметр("Услуга_уэ", ДопПараметрыРасчетСетки.Услуга);
	Запрос.УстановитьПараметр("ТипПункта_уэ", ДопПараметрыРасчетСетки.ТипПункта);
	Запрос.УстановитьПараметр("ТипТочкиМаршрута_уэ", ДопПараметрыРасчетСетки.ТипТочкиМаршрута);
	Запрос.УстановитьПараметр("ВидУпаковки_уэ", ДопПараметрыРасчетСетки.ВидУпаковки);
	Запрос.УстановитьПараметр("ТипКонтейнера_уэ", ДопПараметрыРасчетСетки.ТипКонтейнера);
	Запрос.УстановитьПараметр("ВидСкладскойОперации_уэ", ДопПараметрыРасчетСетки.ВидСкладскойОперации);
	Запрос.УстановитьПараметр("Организация", ДопПараметрыРасчетСетки.Организация);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДопПараметрыРасчетСетки.Дата));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	тблТарифыСетка = Запрос.Выполнить().Выгрузить();
	
	// соответствие тарифов и ТЧ ОбластиТарифнойСетки для ускорения расчета
	КэшУскорения.Вставить("КэшОбластиДействияТарифов", Новый Соответствие);
	
	мсвСтрокУдаления = Новый Массив;
	
	Для Каждого ТекСтрокаТариф Из тблТарифыСетка Цикл
		Если КэшУскорения.КэшОбластиДействияТарифов.Получить(ТекСтрокаТариф.Тариф) = Неопределено Тогда
			тблОбластьДействия = ТекСтрокаТариф.Тариф.ОбластиТарифнойСетки.Выгрузить();
			КэшУскорения.КэшОбластиДействияТарифов.Вставить(ТекСтрокаТариф.Тариф, тблОбластьДействия);
		КонецЕсли;
		
		мсвОблДействияТарифа = КэшУскорения.КэшОбластиДействияТарифов[ТекСтрокаТариф.Тариф].НайтиСтроки(Новый Структура("ID", ТекСтрокаТариф.ID));
		
		// оставляем "общий" тариф - тариф с незаполненной областью действия
		Если мсвОблДействияТарифа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Удаляем тариф, у которого область содержит непустое значение, а во входном фильтре - пустое
		флТарифНеПодходит = Ложь;
		Для Каждого ТекВидОбластиДействия Из СтруктураВидовОбластейТарифа Цикл
			ИмяВидаОбластиДействия = ТекВидОбластиДействия.Ключ;
			
			ОбластьЕстьВТарифе = Ложь;
			Для Каждого ТекОбластьДействия Из мсвОблДействияТарифа Цикл
				Если ТекОбластьДействия.ВидОбластиДействия = КэшУскорения.Перечисление_уатВидыОбластейДействияТарифовТС[ИмяВидаОбластиДействия] Тогда
					ОбластьЕстьВТарифе = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗначениеФильтраЗаполнено = Ложь;
			Если ТипЗнч(СписокФильтров[ИмяВидаОбластиДействия]) = Тип("СписокЗначений") Тогда
				Для Каждого ТекФильтр Из СписокФильтров[ИмяВидаОбластиДействия] Цикл
					Если ЗначениеЗаполнено(ТекФильтр.Значение) Тогда
						ЗначениеФильтраЗаполнено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЗначениеФильтраЗаполнено = ЗначениеЗаполнено(СписокФильтров[ИмяВидаОбластиДействия]);
			КонецЕсли;
			
			Если ОбластьЕстьВТарифе И НЕ ЗначениеФильтраЗаполнено Тогда
				флТарифНеПодходит = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флТарифНеПодходит Тогда
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецЕсли;
		
		// В области действия могут содержаться несколько строк с одним видом области
		// в этом случае используется список значений, а не конкретное значение
		// в списке значений Пометка - это флаг группы значения области действия (ЭтоГруппа)
		списСтрокУдаленияОблДействия = Новый СписокЗначений;
		соотвОбластиСписЗнач = Новый Соответствие; //соответствие: ключ - номер строки ТЧ тарифа, значение - список значений области действия
		Для Сч1 = 0 По мсвОблДействияТарифа.Количество()-1 Цикл
			ТекОбластьДействия1 = мсвОблДействияТарифа[Сч1];
			
			Если списСтрокУдаленияОблДействия.НайтиПоЗначению(Сч1) <> Неопределено Тогда //уже помеченную на удаление строку пропускаем
				Продолжить;
			КонецЕсли;
			
			Для Сч2 = Сч1+1 По мсвОблДействияТарифа.Количество()-1 Цикл
				ТекОбластьДействия2 = мсвОблДействияТарифа[Сч2];
				Если ТекОбластьДействия1.ВидОбластиДействия = ТекОбластьДействия2.ВидОбластиДействия Тогда
					ОбластьСписЗнач = соотвОбластиСписЗнач.Получить(ТекОбластьДействия1.НомерСтроки);
					Если ОбластьСписЗнач = Неопределено Тогда
					    ОбластьСписЗнач = Новый СписокЗначений;
						ОбластьСписЗнач.Добавить(ТекОбластьДействия1.ЗначениеОбластиДействия,, ТекОбластьДействия1.ЭтоГруппа);
					КонецЕсли;
					ОбластьСписЗнач.Добавить(ТекОбластьДействия2.ЗначениеОбластиДействия,, ТекОбластьДействия2.ЭтоГруппа);
					соотвОбластиСписЗнач.Вставить(ТекОбластьДействия1.НомерСтроки, ОбластьСписЗнач);
					
					списСтрокУдаленияОблДействия.Добавить(Сч2);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		списСтрокУдаленияОблДействия.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого ТекОбластьУдалить Из списСтрокУдаленияОблДействия Цикл
			мсвОблДействияТарифа.Удалить(ТекОбластьУдалить.Значение);
		КонецЦикла;
		
		// Ниже обрабатыватся тарифы, у которых либо одна из областей действия отсутствует (общий случай совпадений, не
		// увеличивает степень совпадения фильтра), либо заполнены и область действия тарифа, и входящий фильтр, соотв. этой
		// области действия (частный случай совпадения, увеличивает степень совпадения фильтра)
		флФильтрПодходит = Истина;
		Для Каждого ТекОбластьДействия Из мсвОблДействияТарифа Цикл
			// добавляем отбор из входного фильтра
			ИмяВидаОбластиДействия = Метаданные.Перечисления.уатВидыОбластейДействияТарифовТС.ЗначенияПеречисления[
				Перечисления.уатВидыОбластейДействияТарифовТС.Индекс(ТекОбластьДействия.ВидОбластиДействия)].Имя;
				
			ТекВхЗначение = СписокФильтров[ИмяВидаОбластиДействия];
			Если ТипЗнч(ТекВхЗначение) <> Тип("СписокЗначений") Тогда
				ТекВхЗначение = Новый СписокЗначений;
				ТекВхЗначение.Добавить(СписокФильтров[ИмяВидаОбластиДействия]);
			КонецЕсли;
			
			Если ТекОбластьДействия.ЭтоГруппа Тогда
				флЭтоГруппа = Истина;
			Иначе
				флЭтоГруппа = Ложь;
			КонецЕсли;
			ТекОтборСписокЗначений = соотвОбластиСписЗнач.Получить(ТекОбластьДействия.НомерСтроки);
			флСписокЗначений = (ТекОтборСписокЗначений <> Неопределено);			
			
			флТекФильтрПодходит = Ложь;
			Для Каждого ТекФильтр Из ТекВхЗначение Цикл
				Если флСписокЗначений Тогда
					Если ТекОтборСписокЗначений.НайтиПоЗначению(ТекФильтр.Значение) <> Неопределено Тогда //значение входного фильтра найдено в списке значений области действия
						флТекФильтрПодходит = Истина;
						ТекСтрокаТариф.СтепеньСовпаденияФильтров = ТекСтрокаТариф.СтепеньСовпаденияФильтров + 1;
						Продолжить;
					Иначе //в отборе может быть список групп, каждую группу проверяем в цикле, а что поделаешь..
						Для Каждого ТекЭлОбластьДействия Из ТекОтборСписокЗначений Цикл
							Попытка
								Если ТекЭлОбластьДействия.Пометка Тогда //Пометка означает ЭтоГруппа
									мсвГрупп = КэшУскорения.ГруппыЗначенийФильтров.Получить(ТекФильтр.Значение);
									Если мсвГрупп.Найти(ТекЭлОбластьДействия.Значение) <> Неопределено Тогда
									    флТекФильтрПодходит = Истина;
										ТекСтрокаТариф.СтепеньСовпаденияФильтров = ТекСтрокаТариф.СтепеньСовпаденияФильтров + 1;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							Исключение
							КонецПопытки;
						КонецЦикла;
						Если флТекФильтрПодходит Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли флЭтоГруппа Тогда
					мсвГрупп = КэшУскорения.ГруппыЗначенийФильтров.Получить(ТекФильтр.Значение);
					Если мсвГрупп.Найти(ТекОбластьДействия.ЗначениеОбластиДействия) <> Неопределено Тогда
						флТекФильтрПодходит = Истина;
						ТекСтрокаТариф.СтепеньСовпаденияФильтров = ТекСтрокаТариф.СтепеньСовпаденияФильтров + 1;
						Продолжить;
					КонецЕсли;
					
				Иначе
					Если ТекФильтр.Значение = ТекОбластьДействия.ЗначениеОбластиДействия Тогда //сравнение значений области действия и входного фильтра
						флТекФильтрПодходит = Истина;
						ТекСтрокаТариф.СтепеньСовпаденияФильтров = ТекСтрокаТариф.СтепеньСовпаденияФильтров + 1;
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			флФильтрПодходит = флФильтрПодходит И флТекФильтрПодходит;
			Если НЕ флФильтрПодходит Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флФильтрПодходит Тогда //тариф не подходит
			мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// удаляем неподходящие сеточные тарифы
	Для Каждого ТекСтрокаУдаления Из мсвСтрокУдаления Цикл
		тблТарифыСетка.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
	// добавляем найденные тарифы во входящую таблицу
	Для Каждого ТекСтрока Из тблТарифыСетка Цикл
		НоваяСтрока = тблТарифы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры


#Область РасчетУслугВДокументах

// Выполняет расчет доходов по тарифам
//
// Параметры:
//  флПлан		 - Булево - план или факт
//  ДокументОбъект - объект документ уатЗаказГрузоотправителю или структура, содержащая данные документа
//
Процедура РассчитатьУслугиПоЗаказуНаТС(ДокументОбъект, флПлан = Ложь) Экспорт
	ДопПараметры = Новый Структура("План", флПлан);
	РасчитатьТаблицуУслугВДокументе(ДокументОбъект, "Услуги",,, ДопПараметры);
	
	// Свертка массива строк-структур, в отличие от свертки таблицы имеет алгоритм посложнее
	списСтрокУдалить = Новый СписокЗначений;
	Для Сч = 0 По ДокументОбъект.Услуги.Количество()-1 Цикл
		Если списСтрокУдалить.НайтиПоЗначению(Сч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока = ДокументОбъект.Услуги[Сч];
		
		Для СчВлож = Сч+1 По ДокументОбъект.Услуги.Количество()-1 Цикл
			ТекСтрокаВлож = ДокументОбъект.Услуги[СчВлож];
			Если ТекСтрокаВлож.Номенклатура = ТекСтрока.Номенклатура
				И ТекСтрокаВлож.Содержание = ТекСтрока.Содержание
				И ТекСтрокаВлож.СтатьяДоходов = ТекСтрока.СтатьяДоходов
				И ТекСтрокаВлож.Тариф = ТекСтрока.Тариф
				И ТекСтрокаВлож.СтавкаНДС = ТекСтрока.СтавкаНДС Тогда
				
				ТекСтрока.Количество = ТекСтрока.Количество + ТекСтрокаВлож.Количество;
				ТекСтрока.КоличествоПлан = ТекСтрока.КоличествоПлан + ТекСтрокаВлож.КоличествоПлан;
				ТекСтрока.Сумма = ТекСтрока.Сумма + ТекСтрокаВлож.Сумма;
				ТекСтрока.СуммаПлан = ТекСтрока.СуммаПлан + ТекСтрокаВлож.СуммаПлан;
				ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДС + ТекСтрокаВлож.СуммаНДС;
				ТекСтрока.СуммаНДСПлан = ТекСтрока.СуммаНДСПлан + ТекСтрокаВлож.СуммаНДСПлан;
				
				списСтрокУдалить.Добавить(СчВлож);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	списСтрокУдалить.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Для Каждого ТекСтрокаУдалить Из списСтрокУдалить Цикл
		ДокументОбъект.Услуги.Удалить(ТекСтрокаУдалить.Значение);
	КонецЦикла;
		
	//ДокументОбъект.Услуги.Свернуть("Номенклатура, Содержание, СтатьяДоходов, Тариф, СтавкаНДС"
	//	, "Количество, КоличествоПлан, Сумма, СуммаПлан, СуммаНДС, СуммаНДСПлан");
			
	Для Каждого ТекСтрока Из ДокументОбъект.Услуги Цикл
		Если НЕ флПлан И ТекСтрока.Цена = 0 И ТекСтрока.Количество <> 0 И ТекСтрока.Сумма <> 0 Тогда
			ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
		КонецЕсли;
		Если флПлан И ТекСтрока.ЦенаПлан = 0 И ТекСтрока.КоличествоПлан <> 0 И ТекСтрока.СуммаПлан <> 0 Тогда
			ТекСтрока.ЦенаПлан = ТекСтрока.СуммаПлан / ТекСтрока.КоличествоПлан;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выполняет расчет услуг (затрат, доходов, себестоимости) по тарифам
//
// Параметры:
//  ДокументОбъект	 - 	 - объект документ или структура, содержащая данные документа
//  ИмяТЧ			 - Строка	 - Имя ТЧ документа (Затраты, Доходы)
//  Перевозчик		 - 			 - Справочник Контрагенты - если указан, то будут использованы тарифы указанного перевозчика
//  ЗаказПеревозчику - 			 - 
//  флПлан			 - Булево	 - план или факт
//
Процедура РассчитатьУслугиПоМаршрутномуЛисту(ДокументОбъект, ИмяТЧ, Перевозчик = Неопределено, ЗаказПеревозчику = Неопределено, флПлан = Ложь) Экспорт
	
	мсвЗаказы = Новый Массив;
	Для Каждого ТекЗаказ Из ДокументОбъект.Заказы Цикл
		// Добавлена проверка на пустой заказ.
		// Без этого проверки выработка, рассчитываемая по документу в целом, задваивается.
		Если ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя)
			И мсвЗаказы.Найти(ТекЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	тблВыработка = Документы.уатМаршрутныйЛист.ПолучитьВыработкуПоЗаказам(ДокументОбъект, ?(флПлан, "План", "Факт"));
	тблВыработка.Свернуть("Заказ, ПараметрВыработки, ВидУпаковки, ТипКонтейнера, ТипПункта, ТипТочкиМаршрута, ВидСкладскойОперации, Вес, Объем, КоличествоМест, ВесДни, ОбъемДни, КоличествоМестДни, Склад", "Количество");
		
	тблВыработкаСвернутая = Новый ТаблицаЗначений;
	тблВыработкаСвернутая = тблВыработка.Скопировать();
	тблВыработкаСвернутая.Свернуть("Заказ, ПараметрВыработки", "Количество");
	
	// Удаляем из выработки для расчета услуг строки с ПараметрВыработки.ДействуетНаТСМЛ = Ложь
	Сч = тблВыработка.Количество()-1;
	Пока Сч >= 0 Цикл
		// Оставляем складскую выработку и параметры выработки, по которым должен быть расчет в МЛ.
		Если (НЕ тблВыработка[Сч].ПараметрВыработки.ДействуетНаТСМЛ) 
			И тблВыработка[Сч].ПараметрВыработки <> Справочники.уатПараметрыВыработки.СкладскаяОбработка Тогда
			тблВыработка.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("План", флПлан);
	ДопПараметры.Вставить("ПривлеченноеТС", ДокументОбъект.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное);
	Если ЗначениеЗаполнено(ЗаказПеревозчику) Тогда
		ДопПараметры.Вставить("ЗаказПеревозчику", ЗаказПеревозчику);
	КонецЕсли;
	
	ПараметрыЗаказаДляРасчета = Новый Структура;
	ПараметрыЗаказаДляРасчета.Вставить("ТаблицаВыработкиПоЗаказам", тблВыработка);
	
	КэшУскорения = Новый Структура;
	
	// расчет по параметрам выработки по каждому заказу
	НомерСтроки = 0;
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		НомерСтроки = НомерСтроки + 1;
		
		ПараметрыЗаказаДляРасчета.Вставить("ЗаказГрузоотправителя", ТекЗаказ);
		Если Перевозчик <> Неопределено Тогда
			ПараметрыЗаказаДляРасчета.Вставить("Перевозчик", Перевозчик);
		КонецЕсли;
		ПараметрыЗаказаДляРасчета.Вставить("Расстояние", 0);
		ПараметрыЗаказаДляРасчета.Вставить("Время", 0);
		ПараметрыЗаказаДляРасчета.Вставить("Объем", 0);
		ПараметрыЗаказаДляРасчета.Вставить("ВесБрутто", 0);
		ПараметрыЗаказаДляРасчета.Вставить("ПробегСГрузом", 0);
		ПараметрыЗаказаДляРасчета.Вставить("ПробегПорожний", 0);
		ПараметрыЗаказаДляРасчета.Вставить("Стоянка", 0);
		ПараметрыЗаказаДляРасчета.Вставить("СтоимостьГруза", ТекЗаказ.СтоимостьГруза);
		ПараметрыЗаказаДляРасчета.Вставить("ВалютаТоваров", ТекЗаказ.ВалютаТоваров);
		
		мсвСтрокиВыработкиПоЗаказу = тблВыработкаСвернутая.НайтиСтроки(Новый Структура("Заказ", ТекЗаказ));
		Для Каждого ТекСтрока Из мсвСтрокиВыработкиПоЗаказу Цикл
			Если ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
				ПараметрыЗаказаДляРасчета.ВесБрутто = ПараметрыЗаказаДляРасчета.ВесБрутто + ТекСтрока.Количество;
			ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
				ПараметрыЗаказаДляРасчета.Объем = ПараметрыЗаказаДляРасчета.Объем + ТекСтрока.Количество;
			ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое Тогда
				ПараметрыЗаказаДляРасчета.Стоянка = ПараметрыЗаказаДляРасчета.Стоянка + ТекСтрока.Количество/3600;
			ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
				ПараметрыЗаказаДляРасчета.Время = ПараметрыЗаказаДляРасчета.Время + ТекСтрока.Количество/3600;
			ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
				ПараметрыЗаказаДляРасчета.ПробегСГрузом = ПараметрыЗаказаДляРасчета.ПробегСГрузом + ТекСтрока.Количество;
				ПараметрыЗаказаДляРасчета.Расстояние = ПараметрыЗаказаДляРасчета.Расстояние + ТекСтрока.Количество;
			ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний Тогда
				ПараметрыЗаказаДляРасчета.ПробегПорожний = ПараметрыЗаказаДляРасчета.ПробегПорожний + ТекСтрока.Количество;
				ПараметрыЗаказаДляРасчета.Расстояние = ПараметрыЗаказаДляРасчета.Расстояние + ТекСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
		
		ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", ПараметрыЗаказаДляРасчета);
		ДопПараметры.Вставить("НеУчитыватьТарифыПроцентом", Истина);
				
		РасчитатьТаблицуУслугВДокументе(ДокументОбъект, ИмяТЧ, НомерСтроки,, ДопПараметры, КэшУскорения);
	КонецЦикла;
	
	// расчет по параметрам выработки в целом по МЛ
	ПараметрыЗаказаДляРасчета = Новый Структура;
	ПараметрыЗаказаДляРасчета.Вставить("Время", ДокументОбъект.ВремяВПути/3600);
	ПараметрыЗаказаДляРасчета.Вставить("Расстояние", ДокументОбъект.Расстояние);
	ПараметрыЗаказаДляРасчета.Вставить("ПробегСГрузом", ДокументОбъект.ПробегСГрузом);
	ПараметрыЗаказаДляРасчета.Вставить("ПробегПорожний", ДокументОбъект.ПробегПорожний);
	ПараметрыЗаказаДляРасчета.Вставить("ВесБрутто", ДокументОбъект.ВесБрутто);
	Если Перевозчик <> Неопределено Тогда
		ПараметрыЗаказаДляРасчета.Вставить("Перевозчик", Перевозчик);
	КонецЕсли;
	ПараметрыЗаказаДляРасчета.Вставить("ЗаказГрузоотправителя", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	ПараметрыЗаказаДляРасчета.Вставить("ТаблицаВыработкиПоЗаказам", тблВыработка);
	
	ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", ПараметрыЗаказаДляРасчета);
	ДопПараметры.Удалить("НеУчитыватьТарифыПроцентом");
	
	РасчитатьТаблицуУслугВДокументе(ДокументОбъект, ИмяТЧ,,, ДопПараметры, КэшУскорения);
	
	// Свертка массива строк-структур, в отличие от свертки таблицы имеет алгоритм посложнее
	Если ИмяТЧ = "Доходы" Тогда
		списСтрокУдалить = Новый СписокЗначений;
		Для Сч = 0 По ДокументОбъект.Доходы.Количество()-1 Цикл
			Если списСтрокУдалить.НайтиПоЗначению(Сч) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрока = ДокументОбъект.Доходы[Сч];
			
			Для СчВлож = Сч+1 По ДокументОбъект.Доходы.Количество()-1 Цикл
				ТекСтрокаВлож = ДокументОбъект.Доходы[СчВлож];
				Если ТекСтрокаВлож.Валюта = ТекСтрока.Валюта
					И ТекСтрокаВлож.ЗаказНаТС = ТекСтрока.ЗаказНаТС
					И ТекСтрокаВлож.Номенклатура = ТекСтрока.Номенклатура
					И ТекСтрокаВлож.СтатьяДоходов = ТекСтрока.СтатьяДоходов
					И ТекСтрокаВлож.СтавкаНДС = ТекСтрока.СтавкаНДС
					И ТекСтрокаВлож.СуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС
					И ТекСтрокаВлож.Тариф = ТекСтрока.Тариф
					И ТекСтрокаВлож.УчитыватьНДС = ТекСтрока.УчитыватьНДС
					//И ТекСтрокаВлож.Цена = ТекСтрока.Цена
					Тогда
					
					ТекСтрока.Количество = ТекСтрока.Количество + ТекСтрокаВлож.Количество;
					ТекСтрока.Сумма = ТекСтрока.Сумма + ТекСтрокаВлож.Сумма;
					ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДС + ТекСтрокаВлож.СуммаНДС;
					
					списСтрокУдалить.Добавить(СчВлож);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		списСтрокУдалить.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого ТекСтрокаУдалить Из списСтрокУдалить Цикл
			ДокументОбъект.Доходы.Удалить(ТекСтрокаУдалить.Значение);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ДокументОбъект.Доходы Цикл
			Если НЕ флПлан И ТекСтрока.Цена = 0 И ТекСтрока.Количество <> 0 И ТекСтрока.Сумма <> 0 Тогда
				ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
			КонецЕсли;
			Если флПлан И ТекСтрока.ЦенаПлан = 0 И ТекСтрока.КоличествоПлан <> 0 И ТекСтрока.СуммаПлан <> 0 Тогда
				ТекСтрока.ЦенаПлан = ТекСтрока.СуммаПлан / ТекСтрока.КоличествоПлан;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		списСтрокУдалить = Новый СписокЗначений;
		Для Сч = 0 По ДокументОбъект.Расходы.Количество()-1 Цикл
			Если списСтрокУдалить.НайтиПоЗначению(Сч) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрока = ДокументОбъект.Расходы[Сч];
			
			Для СчВлож = Сч+1 По ДокументОбъект.Расходы.Количество()-1 Цикл
				ТекСтрокаВлож = ДокументОбъект.Расходы[СчВлож];
				Если ТекСтрокаВлож.Валюта = ТекСтрока.Валюта
					И ТекСтрокаВлож.Контрагент = ТекСтрока.Контрагент
					И ТекСтрокаВлож.Договор = ТекСтрока.Договор
					И ТекСтрокаВлож.ЗаказПеревозчику = ТекСтрока.ЗаказПеревозчику
					И ТекСтрокаВлож.ЗаказНаТС = ТекСтрока.ЗаказНаТС
					И ТекСтрокаВлож.Номенклатура = ТекСтрока.Номенклатура
					И ТекСтрокаВлож.СтатьяРасходов = ТекСтрока.СтатьяРасходов
					И ТекСтрокаВлож.СтавкаНДС = ТекСтрока.СтавкаНДС
					И ТекСтрокаВлож.СуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС
					И ТекСтрокаВлож.Тариф = ТекСтрока.Тариф
					И ТекСтрокаВлож.УчитыватьНДС = ТекСтрока.УчитыватьНДС Тогда
					
					ТекСтрока.Количество = ТекСтрока.Количество + ТекСтрокаВлож.Количество;
					ТекСтрока.КоличествоПлан = ТекСтрока.КоличествоПлан + ТекСтрокаВлож.КоличествоПлан;
					ТекСтрока.Сумма = ТекСтрока.Сумма + ТекСтрокаВлож.Сумма;
					ТекСтрока.СуммаПлан = ТекСтрока.СуммаПлан + ТекСтрокаВлож.СуммаПлан;
					ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДС + ТекСтрокаВлож.СуммаНДС;
					ТекСтрока.СуммаНДСПлан = ТекСтрока.СуммаНДСПлан + ТекСтрокаВлож.СуммаНДСПлан;
					
					списСтрокУдалить.Добавить(СчВлож);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		списСтрокУдалить.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого ТекСтрокаУдалить Из списСтрокУдалить Цикл
			ДокументОбъект.Расходы.Удалить(ТекСтрокаУдалить.Значение);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ДокументОбъект.Расходы Цикл
			Если НЕ флПлан И ТекСтрока.Цена = 0 И ТекСтрока.Количество <> 0 И ТекСтрока.Сумма <> 0 Тогда
				ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
			КонецЕсли;
			Если флПлан И ТекСтрока.ЦенаПлан = 0 И ТекСтрока.КоличествоПлан <> 0 И ТекСтрока.СуммаПлан <> 0 Тогда
				ТекСтрока.ЦенаПлан = ТекСтрока.СуммаПлан / ТекСтрока.КоличествоПлан;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДокументОбъект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			ТекСтрока.Содержание = ТекСтрока.Номенклатура.НаименованиеПолное;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Выполняет расчет услуг (затрат) по тарифам
//
// Параметры:
//  ДокументОбъект	 - 	 - 
//  флПлан			 - 	 - 
//
Процедура РассчитатьУслугиПоЗаказуПеревозчику(ДокументОбъект, флПлан = Ложь) Экспорт
	Если ЗначениеЗаполнено(ДокументОбъект.МаршрутныйЛист) Тогда // По маршрутным листам.
		ДокМЛ = ДокументОбъект.МаршрутныйЛист.ПолучитьОбъект();
		
		ДопПараметры = Новый Структура("ЗаполнятьТЧРасходы", Ложь);
		СтруктураДокМЛ = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ДокМЛ, "уатМаршрутныйЛист", ДопПараметры);
	
		РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокМЛ, "Расходы", ДокументОбъект.Контрагент, ДокументОбъект.Ссылка, флПлан);
		
		Для Каждого ТекСтрока Из СтруктураДокМЛ.Расходы Цикл 
			РасходыСтруктураСтроки = Новый Структура;
			РасходыСтруктураСтроки.Вставить("Количество", 0);
			РасходыСтруктураСтроки.Вставить("КоличествоПлан", 0);
			РасходыСтруктураСтроки.Вставить("Цена", 0);
			РасходыСтруктураСтроки.Вставить("ЦенаПлан", 0);
			РасходыСтруктураСтроки.Вставить("Сумма", 0);
			РасходыСтруктураСтроки.Вставить("СуммаПлан", 0);
			РасходыСтруктураСтроки.Вставить("СуммаНДС", 0);
			РасходыСтруктураСтроки.Вставить("СуммаНДСПлан", 0);
			РасходыСтруктураСтроки.Вставить("Груз", ПредопределенноеЗначение("Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка"));
			РасходыСтруктураСтроки.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			РасходыСтруктураСтроки.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
			РасходыСтруктураСтроки.Вставить("Тариф", ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка"));
			РасходыСтруктураСтроки.Вставить("СтатьяРасходов", ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ПустаяСсылка"));
	 
			ЗаполнитьЗначенияСвойств(РасходыСтруктураСтроки, ТекСтрока);
			РасходыСтруктураСтроки.Груз = ТекСтрока.ЗаказНаТС;
			ДокументОбъект.Расходы.Добавить(РасходыСтруктураСтроки);
		КонецЦикла;
	Иначе
		тблВыработка = Документы.уатЗаказПеревозчику_уэ.РассчитатьВыработкуПоЗаказам(ДокументОбъект);
		
		мсвЗаказы = Новый Массив;
		Для Каждого ТекЗаказ Из ДокументОбъект.Грузы Цикл
			Если мсвЗаказы.Найти(ТекЗаказ.Заказ) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекЗаказ.Заказ);
			КонецЕсли;
		КонецЦикла;
		мсвЗаказы.Добавить(Документы.уатЗаказГрузоотправителя.ПустаяСсылка()); //для пустого заказа будут расчитываться услуги по доп. выработке
		
		НомерСтроки = 0;
		Для Каждого ТекЗаказ Из мсвЗаказы Цикл
			Если ТекЗаказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка() Тогда
				НомерСтроки = "";
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
						
			тблВыработкаПоЗаказу = тблВыработка.Скопировать();
			Сч = тблВыработка.Количество()-1;
			Пока Сч >= 0 Цикл
				Если тблВыработкаПоЗаказу[Сч].Заказ <> ТекЗаказ Тогда
					тблВыработкаПоЗаказу.Удалить(Сч);
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
			
			ПараметрыЗаказаДляРасчета = Новый Структура;
			ПараметрыЗаказаДляРасчета.Вставить("ЗаказГрузоотправителя", ТекЗаказ);
			ПараметрыЗаказаДляРасчета.Вставить("ТаблицаВыработкиПоЗаказам", тблВыработкаПоЗаказу);
			ПараметрыЗаказаДляРасчета.Вставить("Перевозчик", ДокументОбъект.Контрагент);
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", ПараметрыЗаказаДляРасчета);
			ДопПараметры.Вставить("План", флПлан);
			Если НомерСтроки <> "" Тогда
				ДопПараметры.Вставить("НеУчитыватьТарифыПроцентом", Истина);
			КонецЕсли;
			
			РасчитатьТаблицуУслугВДокументе(ДокументОбъект, "Расходы", НомерСтроки,, ДопПараметры);
		КонецЦикла;
		
		// Свертка массива строк-структур, в отличие от свертки таблицы имеет алгоритм посложнее
		списСтрокУдалить = Новый СписокЗначений;
		Для Сч = 0 По ДокументОбъект.Расходы.Количество()-1 Цикл
			Если списСтрокУдалить.НайтиПоЗначению(Сч) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрока = ДокументОбъект.Расходы[Сч];
			
			Для СчВлож = Сч+1 По ДокументОбъект.Расходы.Количество()-1 Цикл
				ТекСтрокаВлож = ДокументОбъект.Расходы[СчВлож];
				Если ТекСтрокаВлож.Груз = ТекСтрока.Груз
					И ТекСтрокаВлож.Номенклатура = ТекСтрока.Номенклатура
					И ТекСтрокаВлож.СтатьяРасходов = ТекСтрока.СтатьяРасходов
					И ТекСтрокаВлож.СтавкаНДС = ТекСтрока.СтавкаНДС
					И ТекСтрокаВлож.Тариф = ТекСтрока.Тариф Тогда
					
					ТекСтрока.Количество = ТекСтрока.Количество + ТекСтрокаВлож.Количество;
					ТекСтрока.КоличествоПлан = ТекСтрока.КоличествоПлан + ТекСтрокаВлож.КоличествоПлан;
					ТекСтрока.Сумма = ТекСтрока.Сумма + ТекСтрокаВлож.Сумма;
					ТекСтрока.СуммаПлан = ТекСтрока.СуммаПлан + ТекСтрокаВлож.СуммаПлан;
					ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДС + ТекСтрокаВлож.СуммаНДС;
					ТекСтрока.СуммаНДСПлан = ТекСтрока.СуммаНДСПлан + ТекСтрокаВлож.СуммаНДСПлан;
					
					списСтрокУдалить.Добавить(СчВлож);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		списСтрокУдалить.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого ТекСтрокаУдалить Из списСтрокУдалить Цикл
			ДокументОбъект.Расходы.Удалить(ТекСтрокаУдалить.Значение);
		КонецЦикла;
		//Расходы.Свернуть("Груз, Номенклатура, СтатьяРасходов, СтавкаНДС, Тариф"
		//	, "Количество, КоличествоПлан, Сумма, СуммаПлан, СуммаНДС, СуммаНДСПлан");
			
		Для Каждого ТекСтрока Из ДокументОбъект.Расходы Цикл
			Если НЕ флПлан И ТекСтрока.Цена = 0 И ТекСтрока.Количество <> 0 И ТекСтрока.Сумма <> 0 Тогда
				ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
			КонецЕсли;
			Если флПлан И ТекСтрока.ЦенаПлан = 0 И ТекСтрока.КоличествоПлан <> 0 И ТекСтрока.СуммаПлан <> 0 Тогда
				ТекСтрока.ЦенаПлан = ТекСтрока.СуммаПлан / ТекСтрока.КоличествоПлан;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет услуг (затрат) по тарифам
//
// Параметры:
//  ДокументОбъект	 - 	 - 
//  флПлан			 - 	 - 
//
Процедура РассчитатьУслугиПоСтраховомуСертификату(ДокументОбъект) Экспорт
	тблВыработка = Документы.уатСтраховойСертификат_уэ.РассчитатьВыработкуПоЗаказам(ДокументОбъект);
	
	мсвЗаказы = Новый Массив;
	Для Каждого ТекЗаказ Из ДокументОбъект.Грузы Цикл
		Если мсвЗаказы.Найти(ТекЗаказ.Заказ) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.Заказ);
		КонецЕсли;
	КонецЦикла;
	
	НомерСтроки = 0;
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		Если ТекЗаказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка() Тогда
			НомерСтроки = "";
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		
		тблВыработкаПоЗаказу = тблВыработка.Скопировать();
		Сч = тблВыработка.Количество()-1;
		Пока Сч >= 0 Цикл
			Если тблВыработкаПоЗаказу[Сч].Заказ <> ТекЗаказ Тогда
				тблВыработкаПоЗаказу.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
		ПараметрыЗаказаДляРасчета = Новый Структура("ЗаказГрузоотправителя", ТекЗаказ);
		ПараметрыЗаказаДляРасчета.Вставить("ТаблицаВыработкиПоЗаказам", тблВыработкаПоЗаказу);
		ДопПараметры = Новый Структура("ПараметрыЗаказаДляРасчета", ПараметрыЗаказаДляРасчета);
		ДопПараметры.Вставить("План", Ложь);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("Перевозчик", ДокументОбъект.Контрагент);
		
		РасчитатьТаблицуУслугВДокументе(ДокументОбъект, "Расходы", НомерСтроки,, ДопПараметры);
	КонецЦикла;
	
	// Свертка массива строк-структур, в отличие от свертки таблицы имеет алгоритм посложнее
	списСтрокУдалить = Новый СписокЗначений;
	Для Сч = 0 По ДокументОбъект.Расходы.Количество()-1 Цикл
		Если списСтрокУдалить.НайтиПоЗначению(Сч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока = ДокументОбъект.Расходы[Сч];
		
		Для СчВлож = Сч+1 По ДокументОбъект.Расходы.Количество()-1 Цикл
			ТекСтрокаВлож = ДокументОбъект.Расходы[СчВлож];
			Если ТекСтрокаВлож.ЗаказНаТС = ТекСтрока.ЗаказНаТС
				И ТекСтрокаВлож.Номенклатура = ТекСтрока.Номенклатура
				И ТекСтрокаВлож.СтатьяРасходов = ТекСтрока.СтатьяРасходов
				И ТекСтрокаВлож.СтавкаНДС = ТекСтрока.СтавкаНДС
				И ТекСтрокаВлож.Тариф = ТекСтрока.Тариф Тогда
				
				ТекСтрока.Количество   = ТекСтрока.Количество + ТекСтрокаВлож.Количество;
				ТекСтрока.Сумма        = ТекСтрока.Сумма + ТекСтрокаВлож.Сумма;
				ТекСтрока.СуммаНДС     = ТекСтрока.СуммаНДС + ТекСтрокаВлож.СуммаНДС;
				
				списСтрокУдалить.Добавить(СчВлож);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	списСтрокУдалить.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Для Каждого ТекСтрокаУдалить Из списСтрокУдалить Цикл
		ДокументОбъект.Расходы.Удалить(ТекСтрокаУдалить.Значение);
	КонецЦикла;
	//Расходы.Свернуть("Груз, Номенклатура, СтатьяРасходов, СтавкаНДС, Тариф"
	//	, "Количество, КоличествоПлан, Сумма, СуммаПлан, СуммаНДС, СуммаНДСПлан");
	
	Для Каждого ТекСтрока Из ДокументОбъект.Расходы Цикл
		Если ТекСтрока.Цена = 0 И ТекСтрока.Количество <> 0 И ТекСтрока.Сумма <> 0 Тогда
			ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


// Распределение доходов и расходов внутри Заказа на ТС между заказами из ТЧ "Распределение по заказам"
// Параметры:
// - ДокументСсылка - ссылка на документ уатРаспределениеЗатрат, уатПутевойЛист
//		если ссылка на ПЛ, то распределение выполняется по выработке только этого ПЛ
// - ТаблицаЗатратПромежуточная - входная таблица затрат по ТС
// - ТаблицаЗатрат - выходная таблица распределенных затрат между аналитиками
//
Процедура РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаИсходная, мсвОшибки = Неопределено) Экспорт
	
	Если ТаблицаИсходная.Колонки.Найти("Статья") <> Неопределено Тогда
		ИмяКолонкиСтатья = "Статья";
	ИначеЕсли ТаблицаИсходная.Колонки.Найти("СтатьяДоходов") <> Неопределено Тогда
		ИмяКолонкиСтатья = "СтатьяДоходов";
	ИначеЕсли ТаблицаИсходная.Колонки.Найти("СтатьяРасходов") <> Неопределено Тогда
		ИмяКолонкиСтатья = "СтатьяРасходов";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если мсвОшибки = Неопределено Тогда
		мсвОшибки = Новый Массив;
	КонецЕсли;
	
	Если ТаблицаИсходная.Колонки.Найти("НоменклатураУслуги") <> Неопределено Тогда
		ИмяКолонкиНоменклатура = "НоменклатураУслуги";
	Иначе
		ИмяКолонкиНоменклатура = "Номенклатура";
	КонецЕсли;
	
	Если ТаблицаИсходная.Колонки.Найти("Договор") <> Неопределено Тогда
		ИмяКолонкиДоговор = "Договор";
	ИначеЕсли ТаблицаИсходная.Колонки.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		ИмяКолонкиДоговор = "ДоговорКонтрагента";
	Иначе
		ИмяКолонкиДоговор = Неопределено;
	КонецЕсли;
	флКолонкаКонтрагент = (ТаблицаИсходная.Колонки.Найти("Контрагент") <> Неопределено);
	
	Если ТаблицаИсходная.Колонки.Найти("Сумма") = Неопределено Тогда
		ТаблицаИсходная.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	Если ТаблицаИсходная.Колонки.Найти("СуммаУпр") = Неопределено Тогда
		ТаблицаИсходная.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	Если ТаблицаИсходная.Колонки.Найти("СуммаНДСУпр") = Неопределено Тогда
		ТаблицаИсходная.Колонки.Добавить("СуммаНДСУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	
	флКолонкаЗаказНаТС = Ложь;
	Если ТаблицаИсходная.Колонки.Найти("ЗаказНаТС") <> Неопределено Тогда
		ТаблицаИсходная.Колонки.ЗаказНаТС.Имя = "Заказ";
		флКолонкаЗаказНаТС = Истина;
	КонецЕсли;
	
	ТаблицаРаспределенная = ТаблицаИсходная.Скопировать();
	ТаблицаРаспределенная.Очистить();
	
	тблВыработкаПоЗаказам = Новый ТаблицаЗначений;
	тблВыработкаПоЗаказам.Колонки.Добавить("Заказ");
	тблВыработкаПоЗаказам.Колонки.Добавить("Выработка", Новый ОписаниеТипов("Число"));
			
	Для Каждого ТекСтрокаДоходыРасходы Из ТаблицаИсходная Цикл
		флРаспределять = Истина;
		
		Если ТаблицаИсходная.Колонки.Найти("СтатьяДоходов") <> Неопределено
			И ТаблицаИсходная.Колонки.Найти("СтатьяРасходов") <> Неопределено Тогда
			флДоходы = ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.СтатьяДоходов);
			СтатьяДоходовРасходов = ?(флДоходы, ТекСтрокаДоходыРасходы.СтатьяДоходов, ТекСтрокаДоходыРасходы.СтатьяРасходов);
		Иначе
			СтатьяДоходовРасходов = ТекСтрокаДоходыРасходы[ИмяКолонкиСтатья];
			флДоходы = (ТипЗнч(СтатьяДоходовРасходов) = Тип("СправочникСсылка.уатСтатьиДоходов"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаДоходыРасходы.Заказ)
			ИЛИ НЕ ЗначениеЗаполнено(СтатьяДоходовРасходов)
			ИЛИ НЕ ЗначениеЗаполнено(СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуЗаказами)	Тогда
			флРаспределять = Ложь;
		ИначеЕсли ТекСтрокаДоходыРасходы.Заказ.РаспределениеПоЗаказам.Количество() = 0 Тогда
			флРаспределять = Ложь;
		ИначеЕсли ТекСтрокаДоходыРасходы.Заказ.РаспределениеПоЗаказам.Количество() = 1 Тогда
			ТекСтрокаДоходыРасходы.Заказ = ТекСтрокаДоходыРасходы.Заказ.РаспределениеПоЗаказам[0].ЗаказГрузоотправителя;
			флРаспределять = Ложь;
		КонецЕсли;
		
		Если НЕ флРаспределять Тогда
			НоваяСтрокаРаспределенная = ТаблицаРаспределенная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределенная, ТекСтрокаДоходыРасходы);
			Продолжить;
		КонецЕсли;
		
		// заполнение коэффициентов по выработке из заказов
		тблВыработкаПоЗаказам.Очистить();
		Для Каждого ТекЗаказ Из ТекСтрокаДоходыРасходы.Заказ.РаспределениеПоЗаказам Цикл
			НоваяСтрокаВыработкаПоЗаказам = тблВыработкаПоЗаказам.Добавить();
			НоваяСтрокаВыработкаПоЗаказам.Заказ = ТекЗаказ.ЗаказГрузоотправителя;
			Если СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуЗаказами = Справочники.уатПараметрыВыработки.ВесГруза Тогда
				НоваяСтрокаВыработкаПоЗаказам.Выработка = ТекЗаказ.ЗаказГрузоотправителя.ВесБрутто;
			ИначеЕсли СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуЗаказами = Справочники.уатПараметрыВыработки.Объем Тогда
				НоваяСтрокаВыработкаПоЗаказам.Выработка = ТекЗаказ.ЗаказГрузоотправителя.Объем;
			ИначеЕсли СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуЗаказами = Справочники.уатПараметрыВыработки.КоличествоЗаказов Тогда
				НоваяСтрокаВыработкаПоЗаказам.Выработка = 1;
			КонецЕсли;
		КонецЦикла;
		тблВыработкаПоЗаказам.Свернуть("Заказ", "Выработка");
		
		// распределение
		Если тблВыработкаПоЗаказам.Количество() > 0 Тогда
			мОбщаяВыработка   = тблВыработкаПоЗаказам.Итог("Выработка");
			мОбщаяСуммаУпр    = ТекСтрокаДоходыРасходы.СуммаУпр;
			мОбщаяСуммаРегл   = ТекСтрокаДоходыРасходы.СуммаРегл;
			мОбщаяСуммаНДСУпр = ТекСтрокаДоходыРасходы.СуммаНДСУпр;
			мОбщаяСуммаНДС	  = ТекСтрокаДоходыРасходы.СуммаНДС;
			мОбщаяСумма 	  = ТекСтрокаДоходыРасходы.Сумма;
							
			Если мОбщаяВыработка > 0 Тогда
				Для Каждого ТекСтрокаВыработки Из тблВыработкаПоЗаказам Цикл 
					НоваяСтрокаРаспределенная = ТаблицаРаспределенная.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределенная, ТекСтрокаДоходыРасходы);
					
					Если флДоходы Тогда
						Если флКолонкаКонтрагент Тогда
							НоваяСтрокаРаспределенная.Контрагент = ТекСтрокаВыработки.Заказ.Контрагент;
						КонецЕсли;
						Если ИмяКолонкиДоговор <> Неопределено Тогда
							НоваяСтрокаРаспределенная[ИмяКолонкиДоговор] = ТекСтрокаВыработки.Заказ.ДоговорКонтрагента;
						КонецЕсли;
					КонецЕсли;
						
					НоваяСтрокаРаспределенная.Заказ       = ТекСтрокаВыработки.Заказ;
					
					НоваяСтрокаРаспределенная.СуммаУпр    = ТекСтрокаДоходыРасходы.СуммаУпр    * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
					НоваяСтрокаРаспределенная.СуммаРегл   = ТекСтрокаДоходыРасходы.СуммаРегл   * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
					НоваяСтрокаРаспределенная.СуммаНДСУпр = ТекСтрокаДоходыРасходы.СуммаНДСУпр * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
					НоваяСтрокаРаспределенная.СуммаНДС    = ТекСтрокаДоходыРасходы.СуммаНДС    * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
					НоваяСтрокаРаспределенная.Сумма       = ТекСтрокаДоходыРасходы.Сумма       * ТекСтрокаВыработки.Выработка / мОбщаяВыработка;
					
					мОбщаяСуммаУпр    = мОбщаяСуммаУпр  - НоваяСтрокаРаспределенная.СуммаУпр;
					мОбщаяСуммаРегл   = мОбщаяСуммаРегл - НоваяСтрокаРаспределенная.СуммаРегл;
					мОбщаяСуммаНДСУпр = мОбщаяСуммаНДС  - НоваяСтрокаРаспределенная.СуммаНДС;
					мОбщаяСуммаНДС    = мОбщаяСуммаНДС  - НоваяСтрокаРаспределенная.СуммаНДС;
					мОбщаяСумма       = мОбщаяСумма     - НоваяСтрокаРаспределенная.Сумма;
				КонецЦикла;	
				
				// последняя "копейка"
				Если мОбщаяСуммаУпр <> 0 Тогда
					НоваяСтрокаРаспределенная.СуммаУпр    = НоваяСтрокаРаспределенная.СуммаУпр    + мОбщаяСуммаУпр;
				КонецЕсли;
				Если мОбщаяСуммаРегл <> 0 Тогда
					НоваяСтрокаРаспределенная.СуммаРегл   = НоваяСтрокаРаспределенная.СуммаРегл   + мОбщаяСуммаРегл;
				КонецЕсли;
				Если мОбщаяСуммаНДСУпр <> 0 Тогда
					НоваяСтрокаРаспределенная.СуммаНДСУпр = НоваяСтрокаРаспределенная.СуммаНДСУпр + мОбщаяСуммаНДСУпр;
				КонецЕсли;
				Если мОбщаяСуммаНДС <> 0 Тогда
					НоваяСтрокаРаспределенная.СуммаНДС    = НоваяСтрокаРаспределенная.СуммаНДС    + мОбщаяСуммаНДС;
				КонецЕсли;
				Если мОбщаяСумма <> 0 Тогда
					НоваяСтрокаРаспределенная.Сумма       = НоваяСтрокаРаспределенная.Сумма       + мОбщаяСумма;
				КонецЕсли;
			Иначе
				ТекстНСТР = СтрШаблон("Распределение ""%1"", статья ""%2"" не выполнено: отсутствует выработка по параметру ""%3"" в распределяемых заказах.",
					ТекСтрокаДоходыРасходы[ИмяКолонкиНоменклатура], СтатьяДоходовРасходов,
					СтатьяДоходовРасходов.ПараметрВыработкиРаспределенияМеждуЗаказами);
					
				Если мсвОшибки.Найти(ТекстНСТР) = Неопределено Тогда
					мсвОшибки.Добавить(ТекстНСТР);
				КонецЕсли;
			КонецЕсли;	
		Иначе
			// нечего распределять по заказам
			НоваяСтрокаРаспределенная = ТаблицаРаспределенная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределенная, ТекСтрокаДоходыРасходы);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИсходная = ТаблицаРаспределенная;
	
	Если флКолонкаЗаказНаТС Тогда
		ТаблицаИсходная.Колонки.Заказ.Имя = "ЗаказНаТС";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет доходы и расходы в созданном документе Заказ на ТС или МЛ по шаблону
//
Процедура ЗаполнитьДоходыРасходыПоШаблону(ДокументОбъект, ШаблонЗаказа) Экспорт
	
	флМЛ = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист"));
	
	Если флМЛ Тогда
		мсвЗаказыМЛ = уатОбщегоНазначения_проф.ПолучитьЗаказыМЛ(ДокументОбъект);
		ИмяТЧДоходы = "Доходы";
	Иначе
		ИмяТЧДоходы = "Услуги";
	КонецЕсли;
	
	// заполнение Доходов
	ДокументОбъект[ИмяТЧДоходы].Очистить();
	Для Каждого ТекСтрока Из ШаблонЗаказа.Услуги Цикл
		Если флМЛ И ТекСтрока.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.МаршрутныйЛист
			ИЛИ НЕ флМЛ И ТекСтрока.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС Тогда
			
			НоваяСтрока = ДокументОбъект[ИмяТЧДоходы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.РучнойВвод = Ложь;
			
			Если флМЛ И мсвЗаказыМЛ.Количество() = 1 Тогда 
				НоваяСтрока.ЗаказНаТС = мсвЗаказыМЛ[0];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// заполнение Расходов
	ДокументОбъект.Расходы.Очистить();
	Для Каждого ТекСтрока Из ШаблонЗаказа.Расходы Цикл
		Если флМЛ И ТекСтрока.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.МаршрутныйЛист
			ИЛИ НЕ флМЛ И ТекСтрока.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС Тогда
			
			НоваяСтрока = ДокументОбъект.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.РучнойВвод = Ложь;
			
			Если флМЛ И мсвЗаказыМЛ.Количество() = 1 Тогда 
				НоваяСтрока.ЗаказНаТС = мсвЗаказыМЛ[0];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ШаблонЗаказа.ВариантРасчетаДоходовИРасходов = 1 Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьИтоги", Истина);
	КонецЕсли;
		
КонецПроцедуры
	
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуПараметровВыработкиТарифов(ДокументОбъект, ИмяТЧ, НомерСтрокиДокумента = "", IDСтрокиПотребности = Неопределено, ДопПараметры = Неопределено)
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Справочники.уатПараметрыВыработки.ВесГруза.ЕдиницаИзмерения)
		И НРег(СокрЛП(Справочники.уатПараметрыВыработки.ВесГруза.ЕдиницаИзмерения.Наименование)) = "кг" Тогда
		КоэфВесаПараметрВыработки = 1000;
	Иначе
		КоэфВесаПараметрВыработки = 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Справочники.уатПараметрыВыработки.Объем.ЕдиницаИзмерения)
		И НРег(СокрЛП(Справочники.уатПараметрыВыработки.Объем.ЕдиницаИзмерения.Наименование)) = "л" Тогда
		КоэфОбъемаПараметрВыработки = 1000;
	Иначе
		КоэфОбъемаПараметрВыработки = 1;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ИмяДокумента = ИмяДокумента(ДокументОбъект);
	
	ПрейскурантПоставщика = (ИмяТЧ = "Расходы");
	
	ПараметрыВыработкиТарифов = Новый ТаблицаЗначений;
	ПараметрыВыработкиТарифов.Колонки.Добавить("ПараметрВыработки", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ТипПункта", Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ТипТочкиМаршрута", Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ВидСкладскойОперации", Новый ОписаниеТипов("ПеречислениеСсылка.уатВидыСкладскихОпераций_уэ"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("КоличествоМест");
	ПараметрыВыработкиТарифов.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("КоличествоМестДни", Новый ОписаниеТипов("Число"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ВесДни", Новый ОписаниеТипов("Число"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("ОбъемДни", Новый ОписаниеТипов("Число"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ПараметрыВыработкиТарифов.Колонки.Добавить("Исключить", Новый ОписаниеТипов("Булево"));
		
	Если ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
		// вся выработка по текущему заказу
		Если НЕ ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") Тогда
			ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", Новый Структура);
		КонецЕсли;
		Если ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ТаблицаВыработкиПоЗаказам") Тогда
			тблВыработка = ДопПараметры.ПараметрыЗаказаДляРасчета.ТаблицаВыработкиПоЗаказам;
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.МаршрутныйЛист) Тогда 
			тблВыработка = Документы.уатМаршрутныйЛист.ПолучитьВыработкуПоЗаказам(ДокументОбъект.МаршрутныйЛист,
				?(ДокументОбъект.МаршрутныйЛист.Статус = "Рассчитан"
				ИЛИ НЕ Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить(), "Факт", "План"));
			//// добавление доп. выработки из шапки Заказа перевозчику
			//Если НомерСтрокиДокумента = "" Тогда
			//	Для Каждого ТекВыработка Из ДокументОбъект.Выработка Цикл
			//		Если ТекВыработка.Значение > 0 Тогда
			//			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			//			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыработка);
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;
		Иначе
			тблВыработка = Документы.уатЗаказПеревозчику_уэ.РассчитатьВыработкуПоЗаказам(ДокументОбъект);
		КонецЕсли;
		
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("Расстояние", 0);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("Время", 0);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("Объем", 0);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("ВесБрутто", 0);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("ПробегСГрузом", 0);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("ПробегПорожний", 0);
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("Стоянка", 0);
			
		Для Каждого ТекВыработка Из тблВыработка Цикл
			Если ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя")
				И ТекВыработка.Заказ <> ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыработка);
			Если ТекВыработка.ПараметрВыработки.Временный Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество / 3600;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.ВесБрутто = ДопПараметры.ПараметрыЗаказаДляРасчета.ВесБрутто + НоваяСтрока.Количество;
				НоваяСтрока.Количество = НоваяСтрока.Количество / КоэфВеса * КоэфВесаПараметрВыработки;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.Объем = ДопПараметры.ПараметрыЗаказаДляРасчета.Объем + НоваяСтрока.Количество;
				НоваяСтрока.Количество = НоваяСтрока.Количество / КоэфОбъема * КоэфОбъемаПараметрВыработки;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.Расстояние = ДопПараметры.ПараметрыЗаказаДляРасчета.Расстояние + НоваяСтрока.Количество;
				ДопПараметры.ПараметрыЗаказаДляРасчета.ПробегСГрузом = ДопПараметры.ПараметрыЗаказаДляРасчета.ПробегСГрузом + НоваяСтрока.Количество;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.Время = ДопПараметры.ПараметрыЗаказаДляРасчета.Время + НоваяСтрока.Количество;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.Стоянка = ДопПараметры.ПараметрыЗаказаДляРасчета.Стоянка + НоваяСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если НомерСтрокиДокумента = "" Тогда
			ДопПараметры.Вставить("СтоимостьГруза", 0);
			ДопПараметры.Вставить("ВалютаТоваров",  Неопределено);
		Иначе
			ДопПараметры.Вставить("СтоимостьГруза", ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя.СтоимостьГруза);
			ДопПараметры.Вставить("ВалютаТоваров",  ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя.ВалютаТоваров);
		КонецЕсли;
				
	ИначеЕсли ИмяДокумента = "уатЗаказГрузоотправителя" Тогда
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза;
		НоваяСтрока.Количество = ДокументОбъект.ВесБрутто / КоэфВеса * КоэфВесаПараметрВыработки;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем;
		НоваяСтрока.Количество = ДокументОбъект.Объем / КоэфОбъема * КоэфОбъемаПараметрВыработки;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза;
		НоваяСтрока.Количество = ДокументОбъект.СтоимостьГруза;
		ДопПараметры.Вставить("СтоимостьГруза", ДокументОбъект.СтоимостьГруза);
		ДопПараметры.Вставить("ВалютаТоваров", ДокументОбъект.ВалютаТоваров);
		
		КоличествоТочек = 0;
		тблПунктыПоТипам = Новый ТаблицаЗначений();
		тблПунктыПоТипам.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		тблПунктыПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		тблТочкиПоТипам = Новый ТаблицаЗначений();
		тблТочкиПоТипам.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
		тблТочкиПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		тблПунктыПробегВнеГеозоны = Новый ТаблицаЗначений();
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("Пункт",      Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

		Если ДокументОбъект.FTL Тогда 
			Для Каждого ТекПунктПоЗаказу Из ДокументОбъект.ПромежуточныеПункты Цикл 
				КоличествоТочек = КоличествоТочек + 1;
				
				Если ТипЗнч(ТекПунктПоЗаказу.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
					ТипПункта = ТекПунктПоЗаказу.Пункт.ТипПункта; 
					
					НовСтр = тблПунктыПоТипам.Добавить();
					НовСтр.ТипПункта  = ТипПункта;
					НовСтр.Количество = 1; 
					
					НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
					НовСтр.Пункт      = ТекПунктПоЗаказу.Пункт;
					НовСтр.ТипПункта  = ТипПункта;
					НовСтр.ТипТочки   = ТекПунктПоЗаказу.ТипТочкиМаршрута;
					НовСтр.Количество = ТекПунктПоЗаказу.Пункт.ПробегВнеГеозоны;
				КонецЕсли;
				
				НовСтр = тблТочкиПоТипам.Добавить();
				НовСтр.ТипТочки   = ТекПунктПоЗаказу.ТипТочкиМаршрута;
				НовСтр.Количество = 1;
			КонецЦикла;
			
		Иначе 
			КоличествоТочек = КоличествоТочек + 2;
			
			Если ТипЗнч(ДокументОбъект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				ТипПункта = ДокументОбъект.АдресОтправления.ТипПункта;
				
				НовСтр = тблПунктыПоТипам.Добавить();
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.Количество = 1;
				
				НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
				НовСтр.Пункт      = ДокументОбъект.АдресОтправления;
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтр.Количество = ДокументОбъект.АдресОтправления.ПробегВнеГеозоны;

			КонецЕсли;
			
			Если ТипЗнч(ДокументОбъект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				ТипПункта = ДокументОбъект.АдресНазначения.ТипПункта;
				
				НовСтр = тблПунктыПоТипам.Добавить();
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.Количество = 1; 
				
				НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
				НовСтр.Пункт      = ДокументОбъект.АдресНазначения;
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтр.Количество = ДокументОбъект.АдресНазначения.ПробегВнеГеозоны;

			КонецЕсли;
			
			НовСтр = тблТочкиПоТипам.Добавить();
			НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтр.Количество = 1;
			
			НовСтр = тблТочкиПоТипам.Добавить();
			НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтр.Количество = 1;
		КонецЕсли;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочек;
		НоваяСтрока.Количество        = КоличествоТочек;
		
		тблПунктыПоТипам.Свернуть("ТипПункта", "Количество");
		Для Каждого ТекПункт Из тблПунктыПоТипам Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта;
			НоваяСтрока.Количество        = ТекПункт.Количество;
			НоваяСтрока.ТипПункта         = ТекПункт.ТипПункта;
		КонецЦикла;
				
		тблТочкиПоТипам.Свернуть("ТипТочки", "Количество");
		Для Каждого ТекТочка Из тблТочкиПоТипам Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации;
			НоваяСтрока.Количество        = ТекТочка.Количество;
			НоваяСтрока.ТипТочкиМаршрута  = ТекТочка.ТипТочки;
		КонецЦикла;
		
		текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
		текТблПунктыПробегВнеГеозоны.Свернуть("ТипТочки", "Количество");
		Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта;
			НоваяСтрока.Количество        = ТекТочка.Количество;
			НоваяСтрока.ТипТочкиМаршрута  = ТекТочка.ТипТочки;
		КонецЦикла; 
		текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
		текТблПунктыПробегВнеГеозоны.Свернуть("ТипПункта", "Количество");
		Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации;
			НоваяСтрока.Количество        = ТекТочка.Количество;
			НоваяСтрока.ТипПункта         = ТекТочка.ТипПункта;
		КонецЦикла;  
		текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
		текТблПунктыПробегВнеГеозоны.Свернуть("Пункт", "Количество");
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить(); 
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоны;
		Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекТочка.Количество;
		КонецЦикла;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
		НоваяСтрока.Количество = ДокументОбъект.Расстояние;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		НоваяСтрока.Количество = ДокументОбъект.ПробегСГрузом;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний;
		НоваяСтрока.Количество = ДокументОбъект.ПробегПорожний;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		НоваяСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ДокументОбъект.Время)/3600;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое;
		НоваяСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ДокументОбъект.Стоянка)/3600;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм;
		НоваяСтрока.Количество = (ДокументОбъект.ВесБрутто / КоэфВеса) * ДокументОбъект.ПробегСГрузом;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм;
		НоваяСтрока.Количество = (ДокументОбъект.Объем / КоэфОбъема) * ДокументОбъект.ПробегСГрузом;
		
		// количество заказов
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЗаказов;
		НоваяСтрока.Количество = 1;
		
		//КоличествоУпаковок
		табКоличествоУпаковокПоВидам = Новый ТаблицаЗначений();
		табКоличествоУпаковокПоВидам.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		табКоличествоУпаковокПоВидам.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		// В эту табалицу помещается количество упаковок из документа без пересчета в основную единицу упаковки
		// для расчета пользовательских параметров выработки со способом расчета "Количество упаковок по виду упаковки"
		тблКоличествоУпаковокВДокументе = Новый ТаблицаЗначений();
		тблКоличествоУпаковокВДокументе.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		тблКоличествоУпаковокВДокументе.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		Если ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			НовСтр = табКоличествоУпаковокПоВидам.Добавить();
			НовСтр.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
			НовСтр.Количество  = ДокументОбъект.КоличествоМест;
			
			Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
				НовСтр = тблКоличествоУпаковокВДокументе.Добавить();
				НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				НовСтр.Количество  = СтрокаГруза.КоличествоМест;
			КонецЦикла;
		ИначеЕсли ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
			Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл 
				НовСтр = табКоличествоУпаковокПоВидам.Добавить();
				НовСтр.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
				НовСтр.Количество  = СтрокаТовара.КоличествоМест;
			КонецЦикла;
		ИначеЕсли ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
				Если НЕ СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					НовСтр = табКоличествоУпаковокПоВидам.Добавить();
					НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
					НовСтр.Количество  = СтрокаГруза.КоличествоМест;
					
					НовСтр = тблКоличествоУпаковокВДокументе.Добавить();
					НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
					НовСтр.Количество  = СтрокаГруза.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		тблКоличествоУпаковокВДокументе.Свернуть("ВидУпаковки", "Количество");
		табКоличествоУпаковокПоВидам.Свернуть("ВидУпаковки", "Количество");
		Для Каждого ТекСтрокаУпаковок Из табКоличествоУпаковокПоВидам Цикл 
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок;
			НоваяСтрока.ВидУпаковки       = ТекСтрокаУпаковок.ВидУпаковки;
			НоваяСтрока.Количество        = ТекСтрокаУпаковок.Количество;
		КонецЦикла;
		
		// Количество контейнеров
		табКоличествоКонтейнеровПоТипам = Новый ТаблицаЗначений;
		табКоличествоКонтейнеровПоТипам.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
		табКоличествоКонтейнеровПоТипам.Колонки.Добавить("Количество",    Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
			Если СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
				НовСтр = табКоличествоКонтейнеровПоТипам.Добавить();
				НовСтр.ТипКонтейнера = СтрокаГруза.ГрузовоеМесто.ТипКонтейнера;
				НовСтр.Количество    = СтрокаГруза.КоличествоМест;
			КонецЕсли;
		КонецЦикла;
		табКоличествоКонтейнеровПоТипам.Свернуть("ТипКонтейнера", "Количество");
		Для Каждого ТекСтрокаУпаковок Из табКоличествоКонтейнеровПоТипам Цикл 
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров;
			НоваяСтрока.ТипКонтейнера     = ТекСтрокаУпаковок.ТипКонтейнера;
			НоваяСтрока.Количество        = ТекСтрокаУпаковок.Количество;
		КонецЦикла;
		
		// Складская выработка
		Если ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			тблСкладскаяВыработка = уатОбщегоНазначения_уэ.ПолучитьСкладскуюВыработку(ДокументОбъект.Ссылка, Неопределено);
			Для Каждого СтрокаСкладскаяВыработка Из тблСкладскаяВыработка Цикл
				НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкладскаяВыработка);
			КонецЦикла;
		ИначеЕсли ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
			Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл 
				тблСкладскаяВыработка = уатОбщегоНазначения_уэ.ПолучитьСкладскуюВыработку(ДокументОбъект.Ссылка, СтрокаТовара.Номенклатура);
				Для Каждого СтрокаСкладскаяВыработка Из тблСкладскаяВыработка Цикл
					НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкладскаяВыработка);
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
				тблСкладскаяВыработка = уатОбщегоНазначения_уэ.ПолучитьСкладскуюВыработку(ДокументОбъект.Ссылка, СтрокаГруза.ГрузовоеМесто);
				Для Каждого СтрокаСкладскаяВыработка Из тблСкладскаяВыработка Цикл
					НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкладскаяВыработка);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// превышение габаритов и веса
		ПорогПревышенияПоВысоте = Справочники.уатПараметрыВыработки.ПревышениеВысоты.ПорогПревышения;
		ПорогПревышенияПоДлине  = Справочники.уатПараметрыВыработки.ПревышениеДлины.ПорогПревышения;
		ПорогПревышенияПоШирине = Справочники.уатПараметрыВыработки.ПревышениеШирины.ПорогПревышения;
		ПорогПревышенияПоВесу   = Справочники.уатПараметрыВыработки.ПревышениеВеса.ПорогПревышения;
		ПорогПревышенияПоОбъему = Справочники.уатПараметрыВыработки.ПревышениеОбъема.ПорогПревышения;
		ПревышениеПоВысоте = 0;
		ПревышениеПоДлине  = 0;
		ПревышениеПоШирине = 0;
		ПревышениеПоВесу   = 0;
		ПревышениеПоОбъему = 0;
		Если ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
			ИЛИ ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
				ПревышениеПоВысоте = Макс(СтрокаГруза.Высота    - ПорогПревышенияПоВысоте, ПревышениеПоВысоте);
				ПревышениеПоДлине  = Макс(СтрокаГруза.Длина     - ПорогПревышенияПоДлине,  ПревышениеПоДлине);
				ПревышениеПоШирине = Макс(СтрокаГруза.Ширина    - ПорогПревышенияПоШирине, ПревышениеПоШирине);
				ПревышениеПоВесу   = Макс(СтрокаГруза.ВесБрутто - ПорогПревышенияПоВесу,   ПревышениеПоВесу);
				ПревышениеПоОбъему = Макс(СтрокаГруза.Объем     - ПорогПревышенияПоОбъему, ПревышениеПоОбъему);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл 
				ПараметрыГруза = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(
					СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения, СтрокаТовара.Количество);
				ПревышениеПоВысоте = Макс(ПараметрыГруза.Высота - ПорогПревышенияПоВысоте, ПревышениеПоВысоте);
				ПревышениеПоДлине  = Макс(ПараметрыГруза.Длина  - ПорогПревышенияПоДлине,  ПревышениеПоДлине);
				ПревышениеПоШирине = Макс(ПараметрыГруза.Ширина - ПорогПревышенияПоШирине, ПревышениеПоШирине);
				ПревышениеПоВесу   = Макс(ПараметрыГруза.Вес    - ПорогПревышенияПоВесу,   ПревышениеПоВесу);
				ПревышениеПоОбъему = Макс(ПараметрыГруза.Объем  - ПорогПревышенияПоОбъему, ПревышениеПоОбъему);
			КонецЦикла;
		КонецЕсли;
		Если ПорогПревышенияПоВысоте > 0 И ПревышениеПоВысоте > 0 Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПревышениеВысоты;
			НоваяСтрока.Количество        = ПревышениеПоВысоте;
		КонецЕсли;
		Если ПорогПревышенияПоДлине > 0 И ПревышениеПоДлине > 0 Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПревышениеДлины;
			НоваяСтрока.Количество        = ПревышениеПоДлине;
		КонецЕсли;
		Если ПорогПревышенияПоШирине > 0 И ПревышениеПоШирине > 0 Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПревышениеШирины;
			НоваяСтрока.Количество        = ПревышениеПоШирине;
		КонецЕсли;
		Если ПорогПревышенияПоВесу > 0 И ПревышениеПоВесу > 0 Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПревышениеВеса;
			НоваяСтрока.Количество        = ПревышениеПоВесу;
		КонецЕсли;
		Если ПорогПревышенияПоОбъему > 0 И ПревышениеПоОбъему > 0 Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПревышениеОбъема;
			НоваяСтрока.Количество        = ПревышениеПоОбъему;
		КонецЕсли;
			
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВнеРасписания;
			Если ДокументОбъект.ДоставкаС = ДокументОбъект.ПрибытиеПоРасписанию Тогда
				НоваяСтрока.Количество = 0;
			Иначе
				НоваяСтрока.Количество = 1;
			КонецЕсли;
		КонецЕсли;
		
		// ночная доставка
		флНочнаяДоставка = ЭтоНочнаяДоставка(ДокументОбъект.ОтправлениеС, ДокументОбъект.ДоставкаПо, ДокументОбъект.Организация);
		Если флНочнаяДоставка Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.НочнаяДоставка;
			НоваяСтрока.Количество        = 1;	
		КонецЕсли;
		
		// доп. выработка
		Для Каждого ТекВыработка Из ДокументОбъект.Выработка Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = ТекВыработка.ПараметрВыработки;
			НоваяСтрока.Количество        = ТекВыработка.Значение;
		КонецЦикла;
		
		уатОбщегоНазначения_уэ.ЗаписатьПараметрыВыработкиСАналитикой(тблКоличествоУпаковокВДокументе, табКоличествоКонтейнеровПоТипам, тблПунктыПоТипам, тблТочкиПоТипам, ПараметрыВыработкиТарифов);
		
	ИначеЕсли ИмяДокумента = "уатСтраховойСертификат_уэ" И ИмяТЧ = "Расходы" Тогда
		// вся выработка по текущему заказу
		Если НЕ ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") Тогда
			ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", Новый Структура);
		КонецЕсли;
		Если ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ТаблицаВыработкиПоЗаказам") Тогда
			тблВыработка = ДопПараметры.ПараметрыЗаказаДляРасчета.ТаблицаВыработкиПоЗаказам;
		Иначе
			тблВыработка = Документы.уатСтраховойСертификат_уэ.РассчитатьВыработкуПоЗаказам(ДокументОбъект);
		КонецЕсли;
		
		ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("СтоимостьГруза", 0);
		
		Для Каждого ТекВыработка Из тблВыработка Цикл
			Если ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя")
				И ТекВыработка.Заказ <> ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыработка);
			Если ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.СтоимостьГруза = ДопПараметры.ПараметрыЗаказаДляРасчета.СтоимостьГруза;
				НоваяСтрока.Количество = НоваяСтрока.Количество;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество;
				НоваяСтрока.Исключить  = Истина;
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
		//ТекСтрокаПункт = ДокументОбъект.ПунктыНазначения.Найти(IDСтрокиПотребности, "ID");
		Для Каждого ТекСтрокаПункт Из ДокументОбъект.ПунктыНазначения Цикл
			Если ТекСтрокаПункт.ID = IDСтрокиПотребности Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза;
		НоваяСтрока.Количество = ТекСтрокаПункт.ВесБрутто / КоэфВеса * КоэфВесаПараметрВыработки;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем;
		НоваяСтрока.Количество = ТекСтрокаПункт.Объем / КоэфОбъема * КоэфОбъемаПараметрВыработки;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза;
		НоваяСтрока.Количество = ТекСтрокаПункт.СтоимостьГруза;
		ДопПараметры.Вставить("СтоимостьГруза", ТекСтрокаПункт.СтоимостьГруза);
		ДопПараметры.Вставить("ВалютаТоваров", ДокументОбъект.ВалютаТоваров);
		
		КоличествоТочек = 0;
		тблПунктыПоТипам = Новый ТаблицаЗначений();
		тблПунктыПоТипам.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		тблПунктыПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		тблТочкиПоТипам = Новый ТаблицаЗначений();
		тблТочкиПоТипам.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
		тблТочкиПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		тблПунктыПробегВнеГеозоны = Новый ТаблицаЗначений();
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("Пункт",      Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
		тблПунктыПробегВнеГеозоны.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Если ТекСтрокаПункт.FTL Тогда 
			ПромежуточныеПункты = Новый Массив();
			
			Для Каждого ТекСтрокаПункта Из ДокументОбъект.ПромежуточныеПункты Цикл 
				Если ТекСтрокаПункта.ID = IDСтрокиПотребности Тогда 
					ПромежуточныеПункты.Добавить(ТекСтрокаПункта);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекПунктПоЗаказу Из ПромежуточныеПункты Цикл 
				КоличествоТочек = КоличествоТочек + 1;
				
				Если ТипЗнч(ТекПунктПоЗаказу.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					ТипПункта = ТекПунктПоЗаказу.Пункт.ТипПункта;
					
					НовСтр = тблПунктыПоТипам.Добавить();
					НовСтр.ТипПункта  = ТипПункта;
					НовСтр.Количество = 1;
					
					НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
					НовСтр.Пункт      = ТекПунктПоЗаказу.Пункт;
					НовСтр.ТипПункта  = ТипПункта;
					НовСтр.ТипТочки   = ТекПунктПоЗаказу.ТипТочкиМаршрута;
					НовСтр.Количество = ТекПунктПоЗаказу.Пункт.ПробегВнеГеозоны;
				КонецЕсли;
				
				НовСтр = тблТочкиПоТипам.Добавить();
				НовСтр.ТипТочки   = ТекПунктПоЗаказу.ТипТочкиМаршрута;
				НовСтр.Количество = 1;
			КонецЦикла;
			
		Иначе 
			КоличествоТочек = КоличествоТочек + 2;
			
			Если ТипЗнч(ТекСтрокаПункт.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				ТипПункта = ТекСтрокаПункт.АдресОтправления.ТипПункта;

				НовСтр = тблПунктыПоТипам.Добавить();
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.Количество = 1; 
				
				НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
				НовСтр.Пункт      = ТекСтрокаПункт.АдресОтправления;
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтр.Количество = ТекСтрокаПункт.АдресОтправления.ПробегВнеГеозоны;
				
			КонецЕсли;
			
			Если ТипЗнч(ТекСтрокаПункт.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда  
				ТипПункта = ТекСтрокаПункт.АдресНазначения.ТипПункта;
				
				НовСтр = тблПунктыПоТипам.Добавить();
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.Количество = 1; 
				
				НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
				НовСтр.Пункт      = ТекСтрокаПункт.АдресНазначения;
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтр.Количество = ТекСтрокаПункт.АдресНазначения.ПробегВнеГеозоны;
			КонецЕсли;
			
			НовСтр = тблТочкиПоТипам.Добавить();
			НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтр.Количество = 1;
			
			НовСтр = тблТочкиПоТипам.Добавить();
			НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтр.Количество = 1;
		КонецЕсли;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочек;
		НоваяСтрока.Количество        = КоличествоТочек;
		
		тблПунктыПоТипам.Свернуть("ТипПункта", "Количество");
		Для Каждого ТекПункт Из тблПунктыПоТипам Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта;
			НоваяСтрока.Количество        = ТекПункт.Количество;
			НоваяСтрока.ТипПункта         = ТекПункт.ТипПункта;
		КонецЦикла;
		
		тблТочкиПоТипам.Свернуть("ТипТочки", "Количество");
		Для Каждого ТекТочка Из тблТочкиПоТипам Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации;
			НоваяСтрока.Количество        = ТекТочка.Количество;
			НоваяСтрока.ТипТочкиМаршрута  = ТекТочка.ТипТочки;
		КонецЦикла;
		
		текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
		текТблПунктыПробегВнеГеозоны.Свернуть("ТипТочки", "Количество");
		Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации;
			НоваяСтрока.Количество        = ТекТочка.Количество;
			НоваяСтрока.ТипТочкиМаршрута  = ТекТочка.ТипТочки;
		КонецЦикла; 
		текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
		текТблПунктыПробегВнеГеозоны.Свернуть("ТипПункта", "Количество");
		Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта;
			НоваяСтрока.Количество        = ТекТочка.Количество;
			НоваяСтрока.ТипПункта         = ТекТочка.ТипПункта;
		КонецЦикла;  
		текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
		текТблПунктыПробегВнеГеозоны.Свернуть("Пункт", "Количество");
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить(); 
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоны;
		Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекТочка.Количество;
		КонецЦикла;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
		НоваяСтрока.Количество = ТекСтрокаПункт.Расстояние;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом;
		НоваяСтрока.Количество = ТекСтрокаПункт.ПробегСГрузом;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний;
		НоваяСтрока.Количество = ТекСтрокаПункт.ПробегПорожний;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе;
		НоваяСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаПункт.Время)/3600;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое;
		НоваяСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаПункт.Стоянка)/3600;
		
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм;
		НоваяСтрока.Количество = (ТекСтрокаПункт.ВесБрутто / КоэфВеса) * ТекСтрокаПункт.ПробегСГрузом;
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм;
		НоваяСтрока.Количество = (ТекСтрокаПункт.Объем / КоэфОбъема) * ТекСтрокаПункт.ПробегСГрузом;
		
		// количество заказов
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЗаказов;
		НоваяСтрока.Количество = 1;
		
		//КоличествоУпаковок
		табКоличествоУпаковокПоВидам = Новый ТаблицаЗначений();
		табКоличествоУпаковокПоВидам.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		табКоличествоУпаковокПоВидам.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		// В эту табалицу помещается количество упаковок из документа без пересчета в основную единицу упаковки
		// для расчета пользовательских параметров выработки со способом расчета "Количество упаковок по виду упаковки"
		тблКоличествоУпаковокВДокументе = Новый ТаблицаЗначений();
		тблКоличествоУпаковокВДокументе.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		тблКоличествоУпаковокВДокументе.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		Если ДокументОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			НовСтр = табКоличествоУпаковокПоВидам.Добавить();
			НовСтр.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
			НовСтр.Количество  = ТекСтрокаПункт.КоличествоМест;
			
			Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
				НовСтр = тблКоличествоУпаковокВДокументе.Добавить();
				НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				НовСтр.Количество  = СтрокаГруза.КоличествоМест;
			КонецЦикла;
		ИначеЕсли ДокументОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
			//СтрокиТоваров = ДокументОбъект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", IDСтрокиПотребности));
			Для Каждого СтрокаТовара Из ДокументОбъект.ТоварныйСостав Цикл
				Если СтрокаТовара.ID = IDСтрокиПотребности Тогда
					НовСтр = табКоличествоУпаковокПоВидам.Добавить();
					НовСтр.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
					НовСтр.Количество  = СтрокаТовара.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ДокументОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			//СтрокиГрузов = ДокументОбъект.ГрузовойСостав.НайтиСтроки(Новый Структура("ID", IDСтрокиПотребности));
			Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
				Если СтрокаГруза.ID = IDСтрокиПотребности И НЕ СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					НовСтр = табКоличествоУпаковокПоВидам.Добавить();
					НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
					НовСтр.Количество  = СтрокаГруза.КоличествоМест;
					
					НовСтр = тблКоличествоУпаковокВДокументе.Добавить();
					НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
					НовСтр.Количество  = СтрокаГруза.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		тблКоличествоУпаковокВДокументе.Свернуть("ВидУпаковки", "Количество");
		табКоличествоУпаковокПоВидам.Свернуть("ВидУпаковки", "Количество");
		Для Каждого ТекСтрокаУпаковок Из табКоличествоУпаковокПоВидам Цикл 
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок;
			НоваяСтрока.ВидУпаковки       = ТекСтрокаУпаковок.ВидУпаковки;
			НоваяСтрока.Количество        = ТекСтрокаУпаковок.Количество;
		КонецЦикла;
		
		// Количество контейнеров
		табКоличествоКонтейнеровПоТипам = Новый ТаблицаЗначений;
		табКоличествоКонтейнеровПоТипам.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
		табКоличествоКонтейнеровПоТипам.Колонки.Добавить("Количество",    Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаГруза Из ДокументОбъект.ГрузовойСостав Цикл 
			Если СтрокаГруза.ID = IDСтрокиПотребности И СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
				НовСтр = табКоличествоКонтейнеровПоТипам.Добавить();
				НовСтр.ТипКонтейнера = СтрокаГруза.ГрузовоеМесто.ТипКонтейнера;
				НовСтр.Количество    = СтрокаГруза.КоличествоМест;
			КонецЕсли;
		КонецЦикла;
		табКоличествоКонтейнеровПоТипам.Свернуть("ТипКонтейнера", "Количество");
		Для Каждого ТекСтрокаУпаковок Из табКоличествоКонтейнеровПоТипам Цикл 
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров;
			НоваяСтрока.ТипКонтейнера     = ТекСтрокаУпаковок.ТипКонтейнера;
			НоваяСтрока.Количество        = ТекСтрокаУпаковок.Количество;
		КонецЦикла;
		
		// ночная доставка
		флНочнаяДоставка = уатРасчетыПоТарифам_уэ.ЭтоНочнаяДоставка(ТекСтрокаПункт.ОтправлениеС, ТекСтрокаПункт.ПрибытиеПо, ДокументОбъект.Организация);
		Если флНочнаяДоставка Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.НочнаяДоставка;
			НоваяСтрока.Количество        = 1;
		КонецЕсли;
		
		// доп. выработка
		Для Каждого ТекВыработка Из ДокументОбъект.Выработка Цикл
			Если ТекВыработка.ID = IDСтрокиПотребности Тогда
				НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
				НоваяСтрока.ПараметрВыработки = ТекВыработка.ПараметрВыработки;
				НоваяСтрока.Количество        = ТекВыработка.Значение;
			КонецЕсли;
		КонецЦикла;
		
		уатОбщегоНазначения_уэ.ЗаписатьПараметрыВыработкиСАналитикой(тблКоличествоУпаковокВДокументе, табКоличествоКонтейнеровПоТипам, тблПунктыПоТипам, тблТочкиПоТипам, ПараметрыВыработкиТарифов);
		
	ИначеЕсли ИмяДокумента = "уатМаршрутныйЛист" Тогда
		// Таблица выработки содержит как выработку по заказам, так и вцелом по документу, в зависимости от настройки в
		// параметре выработки пустой заказ в таблице как раз означает, что выработка расчитана вцелом по документу
		Если НЕ ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") Тогда
			ДопПараметры.Вставить("ПараметрыЗаказаДляРасчета", Новый Структура);
		КонецЕсли;
		Если ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ТаблицаВыработкиПоЗаказам") Тогда
			тблВыработка = ДопПараметры.ПараметрыЗаказаДляРасчета.ТаблицаВыработкиПоЗаказам;
		Иначе
			флПлан = (ДопПараметры.Свойство("флПлан") И ДопПараметры.флПлан);
			тблВыработка = Документы.уатМаршрутныйЛист.ПолучитьВыработкуПоЗаказам(ДокументОбъект, ?(флПлан, "План", "Факт"));
		КонецЕсли;
		
		Если НомерСтрокиДокумента = "" Тогда //вцелом по МЛ
			//// только доп. выработка по параметрам выработки со способом ввода "в целом по документу" 
			//Для Каждого ТекВыработка Из ДокументОбъект.Выработка Цикл
			//	Если ТекВыработка.ПараметрВыработки.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
			//		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			//		НоваяСтрока.ПараметрВыработки = ТекВыработка.ПараметрВыработки;
			//		НоваяСтрока.Количество        = ТекВыработка.Значение;
			//	КонецЕсли;
			//КонецЦикла;
			
		Иначе //отдельно по заказам
			Если НЕ ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя") Тогда
				ДопПараметры.ПараметрыЗаказаДляРасчета.Вставить("ЗаказГрузоотправителя", ДокументОбъект[ИмяТЧ][НомерСтрокиДокумента].ЗаказНаТС);
			КонецЕсли;
		КонецЕсли;
		
		мсвВыработкаПоЗаказам = тблВыработка.НайтиСтроки(Новый Структура("Заказ", ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя));
		Для Каждого ТекВыработка Из мсвВыработкаПоЗаказам Цикл
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыработка);
			Если ТекВыработка.ПараметрВыработки.Временный Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество / 3600;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество / КоэфВеса * КоэфВесаПараметрВыработки;
			ИначеЕсли ТекВыработка.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество / КоэфОбъема * КоэфОбъемаПараметрВыработки;
			КонецЕсли;
		КонецЦикла;
		
		Если НомерСтрокиДокумента <> "" Тогда
			Если НЕ ДопПараметры.Свойство("СтоимостьГруза") И ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета")
				И ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("СтоимостьГруза") Тогда
				ДопПараметры.Вставить("СтоимостьГруза", ДопПараметры.ПараметрыЗаказаДляРасчета.СтоимостьГруза);
			КонецЕсли;
			Если НЕ ДопПараметры.Свойство("ВалютаТоваров") И ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета")
				И ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ВалютаТоваров") Тогда
				ДопПараметры.Вставить("ВалютаТоваров", ДопПараметры.ПараметрыЗаказаДляРасчета.ВалютаТоваров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем фиктивную выработку для учета фиксированных тарифов без параметры выработки
	Если НЕ ((ИмяДокумента = "уатМаршрутныйЛист" ИЛИ ИмяДокумента = "уатЗаказПеревозчику_уэ") И НомерСтрокиДокумента <> "") Тогда
		НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
		НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПустаяСсылка();
		НоваяСтрока.Количество = 1;
	КонецЕсли;
	
	ПараметрыВыработкиТарифов.Свернуть("ПараметрВыработки, ТипПункта, ТипТочкиМаршрута, ВидУпаковки, ТипКонтейнера, ВидСкладскойОперации, Вес, Объем, КоличествоМест, Склад, ВесДни, ОбъемДни, КоличествоМестДни, Исключить", "Количество");
	
	// Для МЛ выработка по формулам рассчитывается при расчете выработке по заказам в самом МЛ
	Если ИмяДокумента <> "уатМаршрутныйЛист" Тогда
		РассчитатьПараметрыВыработкиПоФормулам(ПараметрыВыработкиТарифов, ДокументОбъект, ДопПараметры);
	КонецЕсли;
	
	Возврат ПараметрыВыработкиТарифов;
	
КонецФункции // ПолучитьТаблицуВыработкиДокумента()

Функция ДобавитьСтрокуСтоимости(ДокументОбъект, ИмяТЧ, СсылкаПрейскурант, СсылкаТариф, Тариф, Количество = 1, ДопПараметры)
	Если Тариф = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы
		И (ДопПараметры.БазоваяСтоимость = 0) Тогда
		Возврат -1;
	КонецЕсли;
	
	флТарифТС = (ТипЗнч(СсылкаТариф) = Тип("СправочникСсылка.уатТарифыТС"));
	
	ИмяДокумента = ИмяДокумента(ДокументОбъект);
	
	Если флТарифТС И СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы
		И СсылкаТариф.Скидка И НЕ (ИмяТЧ = "Услуги"
		И (ИмяДокумента = "уатЗаказГрузоотправителя" ИЛИ ИмяДокумента = "уатПотребностьВПеревозке_уэ")) Тогда
		Возврат -1;
	КонецЕсли;
	
	КоличествоЗначение = 0;
	ЦенаЗначение = 0;
	СуммаЗначение = 0;
	СуммаНДСЗначение = 0;
	
	// преобразования массива структур строк в таблицу значений
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ТЧДокумента = Новый ТаблицаЗначений;
		Для Каждого ТекКолонка Из ДокументОбъект[ИмяТЧ + "СтруктураСтроки"] Цикл
			мсвТипов = Новый Массив;
			мсвТипов.Добавить(ТипЗнч(ТекКолонка.Значение));
			ТЧДокумента.Колонки.Добавить(ТекКолонка.Ключ, Новый ОписаниеТипов(мсвТипов));
		КонецЦикла;
		Для Каждого ТекСтрока Из ДокументОбъект[ИмяТЧ] Цикл
			НоваяСтрока = ТЧДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	Иначе
		ТЧДокумента = ДокументОбъект[ИмяТЧ];
	КонецЕсли;
	
	флДобавитьНовуюСтроку = Ложь;
	Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
		Если ИмяДокумента = "уатМаршрутныйЛист" И НЕ флТарифТС Тогда
			СтруктураПоиска = Новый Структура("Тариф, СтатьяРасходов", СсылкаТариф, СсылкаПрейскурант);
		Иначе
			Если ИмяДокумента = "уатМаршрутныйЛист" И ДопПараметры.Свойство("Валюта") Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Тариф, Валюта", СсылкаТариф.НоменклатураУслуги, СсылкаТариф, ДопПараметры.Валюта);
			Иначе
				СтруктураПоиска = Новый Структура("Номенклатура, Тариф", СсылкаТариф.НоменклатураУслуги, СсылкаТариф);
			КонецЕсли;
		КонецЕсли;
		Если ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
			СтруктураПоиска.Вставить("ID", ДопПараметры.IDСтрокиПотребности);
		КонецЕсли;
		Если ИмяДокумента = "уатМаршрутныйЛист" И ДопПараметры.Свойство("Заказ") Тогда
			СтруктураПоиска.Вставить("ЗаказНаТС", ДопПараметры.Заказ);
		КонецЕсли;
		
		НоваяСтрока = Неопределено;
		Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
			Для Каждого ТекСтрока Из ТЧДокумента Цикл
				флСтрокаНайдена = Истина;
				Для Каждого ТекЭлемПоиска Из СтруктураПоиска Цикл
					флСтрокаНайдена = флСтрокаНайдена И (ТекСтрока[ТекЭлемПоиска.Ключ] = ТекЭлемПоиска.Значение);
				КонецЦикла;
				Если флСтрокаНайдена Тогда
					НоваяСтрока = ТекСтрока;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			мсвСтрокиПоиска = ТЧДокумента.НайтиСтроки(СтруктураПоиска);
			Если мсвСтрокиПоиска.Количество() > 0 Тогда
				НоваяСтрока = мсвСтрокиПоиска[0];
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрока = Неопределено Тогда
			флДобавитьНовуюСтроку = Истина;
		КонецЕсли;
	Иначе
		флДобавитьНовуюСтроку = Истина;
	КонецЕсли;
	
	Если флДобавитьНовуюСтроку Тогда
		НоваяСтрока = ТЧДокумента.Добавить();
		//Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		//	ТекЗаказ = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя;
		//	Если ЗначениеЗаполнено(ТекЗаказ) Тогда
		//		мсвСтрокиПоЗаказу = ТЧДокумента.НайтиСтроки(Новый Структура("ЗаказНаТС", ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя));
		//		Если мсвСтрокиПоЗаказу.Количество() = 0 Тогда
		//			НоваяСтрока = ТЧДокумента.Добавить();
		//		Иначе
		//			
		//		КонецЕсли;
		//	Иначе
		//		НоваяСтрока = ТЧДокумента.Добавить();
		//	КонецЕсли;
		//Иначе
		//	НоваяСтрока = ТЧДокумента.Добавить();
		//КонецЕсли;
		
		Если ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
			НоваяСтрока.ID = ДопПараметры.IDСтрокиПотребности;
		КонецЕсли;
	КонецЕсли;
	
	ИндексСтрокиСтоимости = ТЧДокумента.Индекс(НоваяСтрока);

	ВалютаТарифа = ?(флТарифТС, СсылкаПрейскурант.Валюта, СсылкаТариф.Валюта);
	Если НЕ ЗначениеЗаполнено(ВалютаТарифа) Тогда
		ВалютаТарифа = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ДатаКурса = Неопределено;
	Попытка
		ДатаКурса = ДокументОбъект.ДатаКурса;
	Исключение
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(ДатаКурса) Тогда
		ДатаКурса = ДокументОбъект.Дата;
	КонецЕсли;
	КурсКратностьВалютыТарифа = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаТарифа, ДатаКурса);
	
	НоваяСтрока.Тариф = СсылкаТариф;
	
	// заполняются реквизиты ТЧ: Услуга, Содержание, Статья
	Если флТарифТС Тогда
		НоваяСтрока.Номенклатура = СсылкаТариф.НоменклатураУслуги;
		Если ИмяДокумента = "уатЗаказГрузоотправителя" И ИмяТЧ = "Услуги"
			ИЛИ ИмяДокумента = "уатМаршрутныйЛист" И (ИмяТЧ = "Доходы" ИЛИ ИмяТЧ = "Расходы") Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		КонецЕсли;
		Если ИмяДокумента = "уатЗаказГрузоотправителя" И ИмяТЧ = "Услуги"
			ИЛИ ИмяДокумента = "уатМаршрутныйЛист" И ИмяТЧ = "Доходы" Тогда
			НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(СсылкаТариф.НоменклатураУслуги);
		КонецЕсли;
		Если ИмяДокумента = "уатМаршрутныйЛист" И ИмяТЧ = "Расходы"
			ИЛИ ИмяДокумента = "уатЗаказПеревозчику_уэ" И ИмяТЧ = "Расходы" 
			ИЛИ ИмяДокумента = "уатСтраховойСертификат_уэ" И ИмяТЧ = "Расходы" Тогда
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(СсылкаТариф.НоменклатураУслуги);
		КонецЕсли;
	Иначе
		Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			НоваяСтрока.СтатьяРасходов = СсылкаТариф.СтатьяРасходов;
		Иначе
			НоваяСтрока.СтатьяРасходов = СсылкаПрейскурант;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
			НоваяСтрока.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
		КонецЕсли;
	КонецЕсли;
	
	// заполняются параметры учета НДС и валюта
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		ТекСтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
	ТекЗаказ = Неопределено;
	Если ДопПараметры <> Неопределено И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("Заказ") Тогда
			ТекЗаказ = ДопПараметры.Заказ;
		ИначеЕсли ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") И ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя") Тогда
			ТекЗаказ = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаДокумента = ДокументОбъект.ВалютаДокумента;
	
	Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		Если ЗначениеЗаполнено(ТекЗаказ) Тогда
			НоваяСтрока.ЗаказНаТС = ТекЗаказ;
			УчитыватьНДС     = ТекЗаказ.УчитыватьНДС;
			СуммаВключаетНДС = ТекЗаказ.СуммаВключаетНДС;
			ВалютаДокумента  = ТекЗаказ.ВалютаДокумента;
		КонецЕсли;
		
		Если ИмяТЧ = "Доходы" Тогда
			Если НЕ ЗначениеЗаполнено(ВалютаДокумента) И ДопПараметры.Свойство("Валюта") Тогда
				ВалютаДокумента = ДопПараметры.Валюта;
			КонецЕсли;
			
			НоваяСтрока.Валюта = ВалютаДокумента;
			НоваяСтрока.УчитыватьНДС = УчитыватьНДС;
			НоваяСтрока.СуммаВключаетНДС = СуммаВключаетНДС;
			
		Иначе
			//ВалютаДокумента = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Если НЕ флТарифТС Тогда
				УчитыватьНДС     = Ложь;
				СуммаВключаетНДС = Ложь;
			ИначеЕсли ДопПараметры.Свойство("ЗаказПеревозчику") Тогда
				УчитыватьНДС     = ДопПараметры.ЗаказПеревозчику.УчитыватьНДС;
				СуммаВключаетНДС = ДопПараметры.ЗаказПеревозчику.СуммаВключаетНДС;
				ВалютаДокумента  = ДопПараметры.ЗаказПеревозчику.ВалютаДокумента;
			КонецЕсли;
			
			НоваяСтрока.Контрагент = ДокументОбъект.Контрагент;
			НоваяСтрока.Договор = ДокументОбъект.ДоговорКонтрагента;
			
			НоваяСтрока.УчитыватьНДС = УчитыватьНДС;
			НоваяСтрока.СуммаВключаетНДС = СуммаВключаетНДС;
			
		КонецЕсли;
				
	Иначе
		Если ИмяДокумента = "уатЗаказПеревозчику_уэ" И ЗначениеЗаполнено(ТекЗаказ) Тогда
			НоваяСтрока.Груз = ТекЗаказ;
		ИначеЕсли ИмяДокумента = "уатСтраховойСертификат_уэ" И ЗначениеЗаполнено(ТекЗаказ) Тогда
			НоваяСтрока.ЗаказНаТС = ТекЗаказ;
		КонецЕсли;
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Если Метаданные.Константы.Найти("ВалютаУправленческогоУчета") = Неопределено Тогда
			ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		Иначе
			ВалютаДокумента = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
			
	//ВалютаДокумента = ВалютаТарифа;
	//Если флТарифТС Тогда
	//	НоваяСтрока.Валюта = ВалютаДокумента;
	//Иначе
	//	НоваяСтрока.Валюта = ВалютаТарифа;
	//КонецЕсли;
	Если НЕ ДопПараметры.Свойство("МноговалютныйУчет") Тогда
		ДопПараметры.Вставить("МноговалютныйУчет", ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет"));
	КонецЕсли;
	Если ДопПараметры.МноговалютныйУчет = Истина ИЛИ НЕ флТарифТС Тогда
		НоваяСтрока.Валюта = ВалютаТарифа;
	Иначе
		НоваяСтрока.Валюта = ВалютаДокумента;
	КонецЕсли;
		
	Если УчитыватьНДС И ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
		НоваяСтрока.СтавкаНДС = ТекСтавкаНДС;
	КонецЕсли;
			
	Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
		Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
			НоваяСтрока.ЗаказНаТС = ДопПараметры.Заказ;
		ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
			НоваяСтрока.Груз = ДопПараметры.Заказ;
		КонецЕсли;
		
		КоличествоЗначение = 1;
		//ЦенаЗначение = ЦенаЗначение + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.БазоваяСтоимость, 
		//	ДопПараметры.Валюта, ВалютаТарифа,
		//	ДопПараметры.КурсВзаиморасчетов, КурсКратностьВалютыТарифа.Курс,
		//	ДопПараметры.КратностьВзаиморасчетов, КурсКратностьВалютыТарифа.Кратность) * Тариф / 100;
		ЦенаЗначение = ЦенаЗначение + ДопПараметры.БазоваяСтоимость * Тариф / 100;
		СуммаЗначение = ЦенаЗначение;
		
		Если УчитыватьНДС И ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
			СуммаНДСЗначение = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СуммаЗначение,
				Истина, СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(ТекСтавкаНДС));
		КонецЕсли;
			
		Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
			НоваяСтрока.Валюта    = ДопПараметры.Валюта;
		КонецЕсли;
	Иначе
		Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой Тогда
			Если флТарифТС
				И СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка
				И СсылкаТариф.ВидСкладскойОперации = Перечисления.уатВидыСкладскихОпераций_уэ.Хранение Тогда
				// Для складского хранения стоимость рассчитывается по количеству дней и с учетом нормы бесплатного хранения.
				НормаБесплатногоХранения = уатОбщегоНазначения_уэ.ПолучитьНормуБесплатногоХранения(ДокументОбъект.Дата, ДопПараметры.Склад, ДопПараметры.Контрагент, ДопПараметры.Организация);
				КоличествоЗначение = 1;
				ЦенаЗначение = Тариф * Макс(0, Количество - НормаБесплатногоХранения);
				СуммаЗначение = ЦенаЗначение;
			Иначе
				КоличествоЗначение = 1;
				ЦенаЗначение = Тариф;
				СуммаЗначение = Тариф;
			КонецЕсли;
		Иначе
			Если флТарифТС
				И СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка
				И СсылкаТариф.ВидСкладскойОперации = Перечисления.уатВидыСкладскихОпераций_уэ.Хранение Тогда
				// Для складского хранения стоимость хранения рассчитывается
				// с учетом нормы бесплатного хранения и базы тарифа.
				КоличествоЗначение = 1;
				НормаБесплатногоХранения = уатОбщегоНазначения_уэ.ПолучитьНормуБесплатногоХранения(ДокументОбъект.Дата, ДопПараметры.Склад, ДопПараметры.Контрагент, ДопПараметры.Организация);
				ЦенаЗначение = Тариф * Макс(0, ДопПараметры.ЗначениеБазыТарифаДни - НормаБесплатногоХранения*ДопПараметры.ЗначениеБазыТарифа);
				СуммаЗначение = ЦенаЗначение;
			ИначеЕсли флТарифТС И СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка Тогда
				// Для остальных видов складской обработки учитывается база тарифа
				КоличествоЗначение = 1;
				ЦенаЗначение = Тариф * Макс(0, ДопПараметры.ЗначениеБазыТарифа - СсылкаТариф.КоличествоБесплатныхЕдиниц);
				СуммаЗначение = ЦенаЗначение;
			ИначеЕсли флТарифТС И СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
				КоличествоЗначение = 1;
				СуммаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.СтоимостьГруза,
					ДопПараметры.ВалютаТоваров, ВалютаТарифа, ДокументОбъект.Дата, ДокументОбъект.Дата);
				Если ИмяДокумента <> "уатСтраховойСертификат_уэ" Тогда
					СуммаЗначение = СуммаЗначение * Тариф / 100;
				КонецЕсли;
				ЦенаЗначение  = СуммаЗначение;
			ИначеЕсли флТарифТС Тогда
				// Учитывается количество бесплатных единиц
				КоличествоЗначение = Макс(0, Количество - СсылкаТариф.КоличествоБесплатныхЕдиниц);
				СуммаЗначение = Тариф * КоличествоЗначение;
			Иначе
				КоличествоЗначение = Количество;
				СуммаЗначение = Тариф * Количество;
			КонецЕсли;
		КонецЕсли;
				
		Если флТарифТС Тогда
			Если СсылкаТариф.ТарифнаяСетка Тогда
				СтрокаТарифа = СсылкаТариф.СтрокиТарифнойСетки.Найти(ДопПараметры.IDстроки, "ID");
				Если СтрокаТарифа = Неопределено Тогда
					МинСтоим = 0;
					МинВыраб = 0;
					СпособЗаполн = 0;
				Иначе
					МинСтоим = СтрокаТарифа.МинимальнаяСтоимость;
					МинВыраб = СтрокаТарифа.МинимальнаяВыработка;
					СпособЗаполн = СтрокаТарифа.СпособЗаполненияКоличества;
				КонецЕсли;
			Иначе
				МинСтоим = СсылкаТариф.МинимальнаяСтоимость;
				МинВыраб = СсылкаТариф.МинимальнаяВыработка;
				СпособЗаполн = СсылкаТариф.СпособЗаполненияКоличества;
			КонецЕсли;
			
			Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой Тогда
				Если Количество < МинВыраб И СсылкаТариф.УсловиеПримененияФиксТарифа = 0 Тогда
					ТЧДокумента.Удалить(НоваяСтрока);
					Возврат -1;
				КонецЕсли;
			Иначе
				Если СуммаЗначение < МинСтоим Тогда //учет минимальной стоимости
					СуммаЗначение = МинСтоим;
					Если СпособЗаполн = 0 Тогда
						ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
					ИначеЕсли СпособЗаполн = 1 Тогда
						КоличествоЗначение = ?(МинВыраб = 0, ?(Тариф=0, 0, МинСтоим/Тариф), МинВыраб);
						ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
					Иначе
						КоличествоЗначение = 1;
						ЦенаЗначение = СуммаЗначение;
					КонецЕсли;
				ИначеЕсли Количество < МинВыраб Тогда //учет минимальной выработки
					СуммаЗначение = МинВыраб * Тариф;
					Если СпособЗаполн = 0 Тогда
						ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
					ИначеЕсли СпособЗаполн = 1 Тогда
						КоличествоЗначение = МинВыраб;
						ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
					Иначе
						КоличествоЗначение = 1;
						ЦенаЗначение = СуммаЗначение;
					КонецЕсли;
				ИначеЕсли ЦенаЗначение = 0 Тогда
					ЦенаЗначение = Тариф;
				КонецЕсли;
				Если СуммаЗначение = 0 ИЛИ ЦенаЗначение = 0 ИЛИ КоличествоЗначение = 0 Тогда
					СуммаЗначение = 0;
					ЦенаЗначение = 0;
					КоличествоЗначение = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЦенаЗначение = Тариф;
			
			//учет минимальной выработки
			МинВыраб = СсылкаТариф.МинимальнаяВыработка;
			Если Количество < МинВыраб Тогда
				СуммаЗначение = МинВыраб * Тариф;
				ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
			КонецЕсли;
		КонецЕсли;
		
		// Если параметры учета НДС в прейскуранте и документе не совпадают, то нужно сделать пересчет цены и суммы по тарифу
		Если УчитыватьНДС И ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
			Если флТарифТС И СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
				СуммаНДСЗначение = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СуммаЗначение,
					Истина, СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			Иначе
				СуммаНДСЗначение = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СуммаЗначение,
					Истина, СсылкаПрейскурант.СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				Если НЕ СуммаВключаетНДС И СсылкаПрейскурант.СуммаВключаетНДС Тогда
					СуммаЗначение = СуммаЗначение - СуммаНДСЗначение;
					ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
				ИначеЕсли СуммаВключаетНДС И НЕ СсылкаПрейскурант.СуммаВключаетНДС Тогда
					СуммаЗначение = СуммаЗначение + СуммаНДСЗначение;
					ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	КурсКратностьВалютыСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(НоваяСтрока.Валюта, ДатаКурса);

	Если СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
		Если ДопПараметры.Свойство("План") И ДопПараметры.План Тогда
			//НоваяСтрока.КоличествоПлан = НоваяСтрока.КоличествоПлан + КоличествоЗначение;
			НоваяСтрока.КоличествоПлан = 1;
			НоваяСтрока.СуммаПлан = НоваяСтрока.СуммаПлан + СуммаЗначение;
			НоваяСтрока.СуммаНДСПлан = НоваяСтрока.СуммаНДСПлан + СуммаНДСЗначение;
			НоваяСтрока.ЦенаПлан = ?(НоваяСтрока.КоличествоПлан = 0, 0, НоваяСтрока.СуммаПлан / НоваяСтрока.КоличествоПлан);
		Иначе
			//НоваяСтрока.Количество = НоваяСтрока.Количество + КоличествоЗначение;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СуммаЗначение;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + СуммаНДСЗначение;
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		КонецЕсли;
		
	Иначе
		ЦенаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ЦенаЗначение, 
			ВалютаТарифа,                        НоваяСтрока.Валюта,
			КурсКратностьВалютыТарифа.Курс,      КурсКратностьВалютыСтроки.Курс,
			КурсКратностьВалютыТарифа.Кратность, КурсКратностьВалютыСтроки.Кратность);
			
		СуммаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаЗначение, 
			ВалютаТарифа,                        НоваяСтрока.Валюта,
			КурсКратностьВалютыТарифа.Курс,      КурсКратностьВалютыСтроки.Курс,
			КурсКратностьВалютыТарифа.Кратность, КурсКратностьВалютыСтроки.Кратность);
			
		СуммаНДСЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаНДСЗначение, 
			ВалютаТарифа,                        НоваяСтрока.Валюта,
			КурсКратностьВалютыТарифа.Курс,      КурсКратностьВалютыСтроки.Курс,
			КурсКратностьВалютыТарифа.Кратность, КурсКратностьВалютыСтроки.Кратность);
			
		//Если флТарифТС И (ИмяДокумента = "уатМаршрутныйЛист" ИЛИ ИмяДокумента = "уатЗаказГрузоотправителя")
		//	И ЗначениеЗаполнено(ВалютаДокумента) Тогда
		//	НоваяСтрока.Валюта = ВалютаДокумента;
		//КонецЕсли;
		
		//Если СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза
		//	И ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
		//	
		//	Если ДопПараметры.Свойство("План") И ДопПараметры.План Тогда
		//		НоваяСтрока.КоличествоПлан = КоличествоЗначение;
		//		НоваяСтрока.ЦенаПлан       = ЦенаЗначение;
		//		НоваяСтрока.СуммаПлан      = (СуммаЗначение * Тариф) / 100;
		//		НоваяСтрока.СуммаНДСПлан   = (СуммаНДСЗначение * Тариф) / 100;
		//	Иначе
		//		НоваяСтрока.Количество = КоличествоЗначение;
		//		НоваяСтрока.Цена       = ЦенаЗначение;
		//		НоваяСтрока.Сумма      = (СуммаЗначение * Тариф) / 100;
		//		НоваяСтрока.СуммаНДС   = (СуммаНДСЗначение * Тариф) / 100;
		//		Если ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
		//			НоваяСтрока.Ставка = Тариф;
		//		КонецЕсли;
		//	КонецЕсли;
		//Иначе
			Если ДопПараметры.Свойство("План") И ДопПараметры.План Тогда
				НоваяСтрока.КоличествоПлан = КоличествоЗначение;
				НоваяСтрока.ЦенаПлан       = ЦенаЗначение;
				НоваяСтрока.СуммаПлан      = СуммаЗначение;
				НоваяСтрока.СуммаНДСПлан   = СуммаНДСЗначение;
			Иначе
				НоваяСтрока.Количество = КоличествоЗначение;
				НоваяСтрока.Цена       = ЦенаЗначение;
				НоваяСтрока.Сумма      = СуммаЗначение;
				НоваяСтрока.СуммаНДС   = СуммаНДСЗначение;
					
				Если ИмяДокумента = "уатСтраховойСертификат_уэ" Тогда
					Если СсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
						НоваяСтрока.Сумма    = (СуммаЗначение * Тариф) / 100;
						НоваяСтрока.СуммаНДС = (СуммаНДСЗначение * Тариф) / 100;
					КонецЕсли;
					НоваяСтрока.Ставка = Тариф;
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	//НоваяСтрока.Курс      = КурсКратностьВалютыСтроки.Курс;
	//НоваяСтрока.Кратность = КурсКратностьВалютыСтроки.Кратность;
	
	//// Округление сумм до 2 десятых после запятой для исключения ошибок округления при пересчете
	//// а) из формы документа, б) программном пересчете, например, из обработки АРМ Логиста
	//Если ДопПараметры.Свойство("План") И ДопПараметры.План Тогда
	//	НоваяСтрока.СуммаПлан = Окр(НоваяСтрока.СуммаПлан, 2);
	//	НоваяСтрока.СуммаНДСПлан = Окр(НоваяСтрока.СуммаНДСПлан, 2);
	//Иначе
	//	НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, 2);
	//	НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаНДС, 2);
	//КонецЕсли;	
	
	Если ИмяДокумента = "уатЗаказГрузоотправителя" И ДокументОбъект.ЭтоШаблонПеревозки Тогда
		Для Каждого ТекСтрока Из ТЧДокумента Цикл
			ТекСтрока.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС;
		КонецЦикла;
	КонецЕсли;
		
	// обратное преобразование таблицы значений в массив структур строк
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		мсвСтрок = Новый Массив;
		Для Каждого ТекСтрока Из ТЧДокумента Цикл
			СтруктураСтроки = Новый Структура;
			Для Каждого ТекЭлем Из ДокументОбъект[ИмяТЧ + "СтруктураСтроки"] Цикл
				СтруктураСтроки.Вставить(ТекЭлем.Ключ, ТекСтрока[ТекЭлем.Ключ]);
			КонецЦикла;
			//ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
			мсвСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		ДокументОбъект[ИмяТЧ] = мсвСтрок;
	КонецЕсли;
	
	Возврат ИндексСтрокиСтоимости;
КонецФункции

Функция КопияСтруктурыСтроки(ИсходнаяСтруктура)
	Рез = Новый Структура;
	Для Каждого ТекЭлем Из ИсходнаяСтруктура Цикл
		Рез.Вставить(ТекЭлем.Ключ, ТекЭлем.Значение);
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция СформироватьСписокФильтровДляПоискаТарифов(ДокументОбъект, ИмяТЧ, НомерСтрокиДокумента = Неопределено, IDСтрокиПотребности = Неопределено, ДопПараметры, КэшУскорения = Неопределено)
	
	ИмяДокумента = ИмяДокумента(ДокументОбъект);
			
	СписокФильтров = Новый Структура;
	
	Если ИмяДокумента = "уатЗаказГрузоотправителя" Тогда
		СписокФильтров.Вставить("Контрагент", ДокументОбъект.Контрагент);
		СписокФильтров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		Если ЗначениеЗаполнено(ДокументОбъект.ТребованиеКТС) Тогда
			СписокФильтров.Вставить("МодельТягача", ДокументОбъект.ТребованиеКТС);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ТребованиеКТСТипТС) Тогда
			СписокФильтров.Вставить("ТипТягача", ДокументОбъект.ТребованиеКТСТипТС);
		КонецЕсли;
		СписокФильтров.Вставить("ПунктОтправления", ДокументОбъект.АдресОтправления);
		СписокФильтров.Вставить("ПунктНазначения", ДокументОбъект.АдресНазначения);
		Если ЗначениеЗаполнено(ДокументОбъект.ВидПеревозки) Тогда
			СписокФильтров.Вставить("ВидПеревозки", ДокументОбъект.ВидПеревозки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.НаправлениеПеревозки) Тогда
			СписокФильтров.Вставить("НаправлениеПеревозки", ДокументОбъект.НаправлениеПеревозки);
		КонецЕсли;
		
		списВидыГрузов = Новый СписокЗначений;
		флДетализацияТовары = (ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам);
		флДетализацияГрузовыеМеста = (ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам);
		флДетализацияЗаказ = (ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам);
		
		списВидыУпаковок = Новый СписокЗначений;
		списТипыКонтейнеров = Новый СписокЗначений;
		
		списНоменклатураГруза = Новый СписокЗначений;
		Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
			Если списНоменклатураГруза.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				списНоменклатураГруза.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
			Если НЕ флДетализацияГрузовыеМеста Тогда
				Если списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрока.Номенклатура.уатВидГруза);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		списГрузовыеМеста = Новый СписокЗначений;
		Если флДетализацияТовары ИЛИ флДетализацияЗаказ Тогда
			Для Каждого ТекСтрокаТовар Из ДокументОбъект.Товары Цикл
				Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаТовар.ГрузовоеМесто) = Неопределено Тогда
					списГрузовыеМеста.Добавить(ТекСтрокаТовар.ГрузовоеМесто);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто.ВидГруза)
					И списВидыГрузов.НайтиПоЗначению(ТекСтрокаТовар.ГрузовоеМесто.ВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрокаТовар.ГрузовоеМесто.ВидГруза);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной)
					И списВидыУпаковок.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной) = Неопределено Тогда
					списВидыУпаковок.Добавить(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если флДетализацияГрузовыеМеста ИЛИ флДетализацияЗаказ Тогда
			Для Каждого ТекСтрокаГрузМесто Из ДокументОбъект.ГрузовойСостав Цикл
				Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто) = Неопределено Тогда
					списГрузовыеМеста.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза)
					И списВидыГрузов.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза);
				КонецЕсли;
				
				Если ТекСтрокаГрузМесто.ГрузовоеМесто.Контейнер Тогда
					Если списТипыКонтейнеров.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ТипКонтейнера) = Неопределено Тогда
						списТипыКонтейнеров.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ТипКонтейнера);
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ВидУпаковки)
						И списВидыУпаковок.НайтиПоЗначению(ТекСтрокаГрузМесто.ВидУпаковки) = Неопределено Тогда
						списВидыУпаковок.Добавить(ТекСтрокаГрузМесто.ВидУпаковки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если списНоменклатураГруза.Количество() > 0 Тогда
			СписокФильтров.Вставить("Номенклатура", списНоменклатураГруза);
		КонецЕсли;
		Если списГрузовыеМеста.Количество() > 0 Тогда
			СписокФильтров.Вставить("ГрузовоеМесто", списГрузовыеМеста);
		КонецЕсли;
		Если списВидыГрузов.Количество() > 0 Тогда
			СписокФильтров.Вставить("ВидГруза", списВидыГрузов);
		КонецЕсли;
		Если списВидыУпаковок.Количество() > 0 Тогда
			СписокФильтров.Вставить("ВидУпаковки", списВидыУпаковок);
		КонецЕсли;
		Если списТипыКонтейнеров.Количество() > 0 Тогда
			СписокФильтров.Вставить("ТипКонтейнера", списТипыКонтейнеров);
		КонецЕсли;
		
		СписокФильтров.Вставить("Маршрут", ДокументОбъект.Маршрут);
		СписокФильтров.Вставить("ОбъектСтроительства", ДокументОбъект.ОбъектСтроительства);
		
		Если ДопПараметры.Свойство("Склад") Тогда
			СписокФильтров.Вставить("Склад", ДопПараметры.Склад);
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "уатПотребностьВПеревозке_уэ" Тогда
		СписокФильтров.Вставить("Контрагент", ДокументОбъект.Контрагент);
		СписокФильтров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		
		//ТекСтрокаЗаказ = ДокументОбъект.ПунктыНазначения.Найти(IDСтрокиПотребности, "ID");
		Для Каждого ТекСтрокаЗаказ Из ДокументОбъект.ПунктыНазначения Цикл
			Если ТекСтрокаЗаказ.ID = IDСтрокиПотребности Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекСтрокаЗаказ.ТребованиеКТС) Тогда
			СписокФильтров.Вставить("МодельТягача", ТекСтрокаЗаказ.ТребованиеКТС);
		ИначеЕсли ЗначениеЗаполнено(ТекСтрокаЗаказ.ТребованиеКТСТипТС) Тогда
			СписокФильтров.Вставить("ТипТягача", ТекСтрокаЗаказ.ТребованиеКТСТипТС);
		КонецЕсли;
		СписокФильтров.Вставить("ПунктОтправления", ТекСтрокаЗаказ.АдресОтправления);
		СписокФильтров.Вставить("ПунктНазначения", ТекСтрокаЗаказ.АдресНазначения);
		Если ЗначениеЗаполнено(ТекСтрокаЗаказ.ВидПеревозки) Тогда
			СписокФильтров.Вставить("ВидПеревозки", ТекСтрокаЗаказ.ВидПеревозки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗаказ.НаправлениеПеревозки) Тогда
			СписокФильтров.Вставить("НаправлениеПеревозки", ТекСтрокаЗаказ.НаправлениеПеревозки);
		КонецЕсли;
		
		списВидыГрузов = Новый СписокЗначений;
		флДетализацияТовары = (ДокументОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам);
		флДетализацияГрузовыеМеста = (ДокументОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам);
		флДетализацияЗаказ = (ДокументОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам);
		
		списВидыУпаковок = Новый СписокЗначений;
		списТипыКонтейнеров = Новый СписокЗначений;
		
		списНоменклатураГруза = Новый СписокЗначений;
		Для Каждого ТекСтрока Из ДокументОбъект.ТоварныйСостав Цикл
			Если ТекСтрока.ID <> IDСтрокиПотребности Тогда
				Продолжить;
			КонецЕсли;
			Если списНоменклатураГруза.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				списНоменклатураГруза.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
			Если НЕ флДетализацияГрузовыеМеста Тогда
				Если списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрока.Номенклатура.уатВидГруза);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		списГрузовыеМеста = Новый СписокЗначений;
		Если флДетализацияТовары ИЛИ флДетализацияЗаказ Тогда
			Для Каждого ТекСтрокаТовар Из ДокументОбъект.ТоварныйСостав Цикл
				Если ТекСтрокаТовар.ID <> IDСтрокиПотребности Тогда
					Продолжить;
				КонецЕсли;
				Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаТовар.ГрузовоеМесто) = Неопределено Тогда
					списГрузовыеМеста.Добавить(ТекСтрокаТовар.ГрузовоеМесто);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто.ВидГруза)
					И списВидыГрузов.НайтиПоЗначению(ТекСтрокаТовар.ГрузовоеМесто.ВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрокаТовар.ГрузовоеМесто.ВидГруза);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной)
					И списВидыУпаковок.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной) = Неопределено Тогда
					списВидыУпаковок.Добавить(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если флДетализацияГрузовыеМеста ИЛИ флДетализацияЗаказ Тогда
			Для Каждого ТекСтрокаГрузМесто Из ДокументОбъект.ГрузовойСостав Цикл
				Если ТекСтрокаГрузМесто.ID <> IDСтрокиПотребности Тогда
					Продолжить;
				КонецЕсли;
				Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто) = Неопределено Тогда
					списГрузовыеМеста.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза)
					И списВидыГрузов.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза);
				КонецЕсли;
				
				Если ТекСтрокаГрузМесто.ГрузовоеМесто.Контейнер Тогда
					Если списТипыКонтейнеров.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ТипКонтейнера) = Неопределено Тогда
						списТипыКонтейнеров.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ТипКонтейнера);
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ВидУпаковки)
						И списВидыУпаковок.НайтиПоЗначению(ТекСтрокаГрузМесто.ВидУпаковки) = Неопределено Тогда
						списВидыУпаковок.Добавить(ТекСтрокаГрузМесто.ВидУпаковки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если списНоменклатураГруза.Количество() > 0 Тогда
			СписокФильтров.Вставить("Номенклатура", списНоменклатураГруза);
		КонецЕсли;
		Если списГрузовыеМеста.Количество() > 0 Тогда
			СписокФильтров.Вставить("ГрузовоеМесто", списГрузовыеМеста);
		КонецЕсли;
		Если списВидыГрузов.Количество() > 0 Тогда
			СписокФильтров.Вставить("ВидГруза", списВидыГрузов);
		КонецЕсли;
		Если списВидыУпаковок.Количество() > 0 Тогда
			СписокФильтров.Вставить("ВидУпаковки", списВидыУпаковок);
		КонецЕсли;
		Если списТипыКонтейнеров.Количество() > 0 Тогда
			СписокФильтров.Вставить("ТипКонтейнера", списТипыКонтейнеров);
		КонецЕсли;
		
		СписокФильтров.Вставить("Маршрут", ТекСтрокаЗаказ.Маршрут);
		СписокФильтров.Вставить("ОбъектСтроительства", ТекСтрокаЗаказ.ОбъектСтроительства);
		
	ИначеЕсли ИмяДокумента = "уатЗаказПеревозчику_уэ" Тогда
		СписокФильтров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		Если ЗначениеЗаполнено(ДокументОбъект.ТС) Тогда
			СписокФильтров.Вставить("Тягач", ДокументОбъект.ТС);
			СписокФильтров.Вставить("МодельТягача", ДокументОбъект.ТС.Модель);
			СписокФильтров.Вставить("ТипТягача", ДокументОбъект.ТС.ТипТС);
		КонецЕсли;
		
		//прицепы
		списПрицепы = Новый СписокЗначений;
		списМоделиПрицепов = Новый СписокЗначений;
		списТипыПрицепов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
			списПрицепы.Добавить(ДокументОбъект.Прицеп1);
			списМоделиПрицепов.Добавить(ДокументОбъект.Прицеп1.Модель);
			списТипыПрицепов.Добавить(ДокументОбъект.Прицеп1.ТипТС);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
			списПрицепы.Добавить(ДокументОбъект.Прицеп2);
			списМоделиПрицепов.Добавить(ДокументОбъект.Прицеп2.Модель);
			списТипыПрицепов.Добавить(ДокументОбъект.Прицеп2.ТипТС);
		КонецЕсли;
		Если списПрицепы.Количество() > 0 Тогда
			СписокФильтров.Вставить("Прицеп", списПрицепы);
			СписокФильтров.Вставить("МодельПрицепа", списМоделиПрицепов);
			СписокФильтров.Вставить("ТипПрицепа", списТипыПрицепов);
		КонецЕсли;
		
		мсвЗаказы = Новый Массив;
		списПунктыОтправления = Новый СписокЗначений;
		списПунктыНазначения = Новый СписокЗначений;
		
		Если ДопПараметры.Свойство("РаспределениеПоЗаказам") Тогда
			ТекЗаказ = ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя;
			мсвЗаказы.Добавить(ТекЗаказ);
			списПунктыОтправления.Добавить(ТекЗаказ.АдресОтправления);
			списПунктыНазначения.Добавить(ТекЗаказ.АдресНазначения);
			
			//Для Каждого ТекСтрокаГрузМесто Из ДокументОбъект.Грузы Цикл
			//	Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто) = Неопределено
			//		И ТекСтрокаГрузМесто.Заказ = ТекЗаказ Тогда
			//		списГрузовыеМеста.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто);
			//	КонецЕсли;
			//КонецЦикла;
			
		Иначе
			Для Каждого ТекСтрока Из ДокументОбъект.Грузы Цикл
				Если мсвЗаказы.Найти(ТекСтрока.Заказ) = Неопределено Тогда
					мсвЗаказы.Добавить(ТекСтрока.Заказ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ТекЗаказ Из мсвЗаказы Цикл
				Если ТипЗнч(ТекЗаказ.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					списПунктыОтправления.Добавить(ТекЗаказ.АдресОтправления);
				КонецЕсли;
				Если ТипЗнч(ТекЗаказ.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					списПунктыНазначения.Добавить(ТекЗаказ.АдресНазначения);
				КонецЕсли;
			КонецЦикла;
			
			//Для Каждого ТекСтрокаГрузМесто Из ДокументОбъект.Грузы Цикл
			//	Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто) = Неопределено Тогда
			//		списГрузовыеМеста.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто);
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЕсли;
		
		списВидыГрузов = Новый СписокЗначений;
		списНоменклатураГруза = Новый СписокЗначений;
		списГрузовыеМеста = Новый СписокЗначений;
		списВидыУпаковок = Новый СписокЗначений;
		списТипыКонтейнеров = Новый СписокЗначений;
		
		Для Каждого ТекСтрокаГрузМесто Из ДокументОбъект.Грузы Цикл
			Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ГрузовоеМесто) Тогда
				Если ТипЗнч(ТекСтрокаГрузМесто.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если списНоменклатураГруза.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто) = Неопределено Тогда
						списНоменклатураГруза.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто);
					КонецЕсли;

					Если списВидыГрузов.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.уатВидГруза) = Неопределено Тогда
						списВидыГрузов.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.уатВидГруза);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ГрузовоеМесто.уатВидУпаковкиОсновной)
						И списВидыУпаковок.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.уатВидУпаковкиОсновной) = Неопределено Тогда
						списВидыУпаковок.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.уатВидУпаковкиОсновной);
					КонецЕсли;
				
				ИначеЕсли ТипЗнч(ТекСтрокаГрузМесто.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
					Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто) = Неопределено Тогда
						списГрузовыеМеста.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто);
					КонецЕсли;

					Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза) 
						И списВидыГрузов.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза) = Неопределено Тогда
						списВидыГрузов.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидГруза);
					КонецЕсли;
					
					Если ТекСтрокаГрузМесто.ГрузовоеМесто.Контейнер Тогда
						Если списТипыКонтейнеров.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ТипКонтейнера) = Неопределено Тогда
							списТипыКонтейнеров.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ТипКонтейнера);
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидУпаковки)
							И списВидыУпаковок.НайтиПоЗначению(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидУпаковки) = Неопределено Тогда
							списВидыУпаковок.Добавить(ТекСтрокаГрузМесто.ГрузовоеМесто.ВидУпаковки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если списПунктыОтправления.Количество() > 0 Тогда
			СписокФильтров.Вставить("ПунктОтправления", списПунктыОтправления);
		КонецЕсли;
		Если списПунктыНазначения.Количество() > 0 Тогда
			СписокФильтров.Вставить("ПунктНазначения", списПунктыНазначения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.МаршрутныйЛист) Тогда
			СписокФильтров.Вставить("Маршрут", ДокументОбъект.МаршрутныйЛист.Маршрут);
			СписокФильтров.Вставить("ОбъектСтроительства", ДокументОбъект.МаршрутныйЛист.ОбъектСтроительства);
			Если ЗначениеЗаполнено(ДокументОбъект.МаршрутныйЛист.НаправлениеПеревозки) Тогда
				СписокФильтров.Вставить("НаправлениеПеревозки", ДокументОбъект.МаршрутныйЛист.НаправлениеПеревозки);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ВидПеревозки) Тогда
			СписокФильтров.Вставить("ВидПеревозки", ДокументОбъект.ВидПеревозки);
		КонецЕсли;
		
		Если списНоменклатураГруза.Количество() > 0 Тогда
			СписокФильтров.Вставить("Номенклатура", списНоменклатураГруза);
		КонецЕсли;
		Если списГрузовыеМеста.Количество() > 0 Тогда
			СписокФильтров.Вставить("ГрузовоеМесто", списГрузовыеМеста);
		КонецЕсли;
		Если списВидыГрузов.Количество() > 0 Тогда
			СписокФильтров.Вставить("ВидГруза", списВидыГрузов);
		КонецЕсли;
		Если списВидыУпаковок.Количество() > 0 Тогда
			СписокФильтров.Вставить("ВидУпаковки", списВидыУпаковок);
		КонецЕсли;
		Если списТипыКонтейнеров.Количество() > 0 Тогда
			СписокФильтров.Вставить("ТипКонтейнера", списТипыКонтейнеров);
		КонецЕсли;
		Если ДопПараметры.Свойство("Склад") Тогда
			СписокФильтров.Вставить("Склад", ДопПараметры.Склад);
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "уатМаршрутныйЛист" И ИмяТЧ = "Доходы" Тогда
		Если ДопПараметры.Свойство("РаспределениеПоЗаказам") Тогда
			ДопПараметры.Вставить("Контрагент", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.Контрагент);
			СписокФильтров.Вставить("Контрагент", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.Контрагент);
			СписокФильтров.Вставить("ДоговорКонтрагента", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ДоговорКонтрагента);
			Если ЗначениеЗаполнено(ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ТребованиеКТС) Тогда
				СписокФильтров.Вставить("МодельТягача", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ТребованиеКТС);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ТребованиеКТСТипТС) Тогда
				СписокФильтров.Вставить("ТипТягача", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ТребованиеКТСТипТС);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.АдресОтправления) Тогда
				СписокФильтров.Вставить("ПунктОтправления", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.АдресОтправления);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.АдресНазначения) Тогда
				СписокФильтров.Вставить("ПунктНазначения", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.АдресНазначения);
			КонецЕсли;
			//ТекНоменклатура = ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].Номенклатура;
			//Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
			//	Если ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			//		СписокФильтров.Вставить("Номенклатура", ТекНоменклатура);
			//	Иначе
			//		СписокФильтров.Вставить("ГрузовоеМесто", ТекНоменклатура);
			//	КонецЕсли;
			//КонецЕсли;
			СписокФильтров.Вставить("Маршрут", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.Маршрут);
			СписокФильтров.Вставить("ОбъектСтроительства", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ОбъектСтроительства);
			Если ЗначениеЗаполнено(ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ВидПеревозки) Тогда
				СписокФильтров.Вставить("ВидПеревозки", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ВидПеревозки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.НаправлениеПеревозки) Тогда
				СписокФильтров.Вставить("НаправлениеПеревозки", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.НаправлениеПеревозки);
			КонецЕсли;
		Иначе
			Если ДопПараметры.Свойство("ЗаказГрузоотправителя") Тогда
				ТекЗаказГрузоотправителя = ДопПараметры.ЗаказГрузоотправителя;
			ИначеЕсли ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") И ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя") Тогда
				ТекЗаказГрузоотправителя = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя;
			КонецЕсли;
			
			мсвЗаказы = Новый Массив;
			флЗаказУказан = Истина;
			Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя) Тогда
				мсвЗаказы.Добавить(ТекЗаказГрузоотправителя);
			Иначе
				Для Каждого ТекСтрокаЗаказ Из ДокументОбъект.Заказы Цикл
					Если мсвЗаказы.Найти(ТекСтрокаЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
						мсвЗаказы.Добавить(ТекСтрокаЗаказ.ЗаказГрузоотправителя);
					КонецЕсли;
				КонецЦикла;
				флЗаказУказан = Ложь;
			КонецЕсли;
			
			списКонтрагенты       = Новый СписокЗначений;
			списДоговоры          = Новый СписокЗначений;
			списМодели            = Новый СписокЗначений;
			списТипыТС            = Новый СписокЗначений;
			списПунктыОтправления = Новый СписокЗначений;
			списПунктыНазначения  = Новый СписокЗначений;
			списНоменклатура      = Новый СписокЗначений;
			списГрузовыеМеста     = Новый СписокЗначений;
			списВидыГрузов        = Новый СписокЗначений;
			списВидыУпаковок      = Новый СписокЗначений;
			списТипыКонтейнеров   = Новый СписокЗначений;
		
			Для Каждого ТекЗаказГрузоотправителя Из мсвЗаказы Цикл
				Если флЗаказУказан Тогда
					СписокФильтров.Вставить("Маршрут",              ТекЗаказГрузоотправителя.Маршрут);
					СписокФильтров.Вставить("ОбъектСтроительства",  ТекЗаказГрузоотправителя.ОбъектСтроительства);
					СписокФильтров.Вставить("ВидПеревозки",         ТекЗаказГрузоотправителя.ВидПеревозки);
					СписокФильтров.Вставить("НаправлениеПеревозки", ТекЗаказГрузоотправителя.НаправлениеПеревозки);
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя) Тогда
					ДопПараметры.Вставить("Контрагент", ТекЗаказГрузоотправителя.Контрагент);
					
					Если списКонтрагенты.НайтиПоЗначению(ТекЗаказГрузоотправителя.Контрагент) = Неопределено Тогда
						списКонтрагенты.Добавить(ТекЗаказГрузоотправителя.Контрагент);
					КонецЕсли;
				ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
					// Заказы не указываются, ручной ввод контрагентов
					Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
						Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
							ДопПараметры.Вставить("Контрагент", ТекСтрока.Контрагент);
							
							Если списКонтрагенты.НайтиПоЗначению(ТекСтрока.Контрагент) = Неопределено Тогда
								списКонтрагенты.Добавить(ТекСтрока.Контрагент);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если списДоговоры.НайтиПоЗначению(ТекЗаказГрузоотправителя.ДоговорКонтрагента) = Неопределено Тогда
					списДоговоры.Добавить(ТекЗаказГрузоотправителя.ДоговорКонтрагента);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя.ТребованиеКТС)
					И списМодели.НайтиПоЗначению(ТекЗаказГрузоотправителя.ТребованиеКТС) = Неопределено Тогда
					списМодели.Добавить(ТекЗаказГрузоотправителя.ТребованиеКТС);
				ИначеЕсли ЗначениеЗаполнено(ТекЗаказГрузоотправителя.ТребованиеКТСТипТС)
					И списТипыТС.НайтиПоЗначению(ТекЗаказГрузоотправителя.ТребованиеКТСТипТС) = Неопределено Тогда
					списТипыТС.Добавить(ТекЗаказГрузоотправителя.ТребованиеКТСТипТС);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя.АдресОтправления)
					И списПунктыОтправления.НайтиПоЗначению(ТекЗаказГрузоотправителя.АдресОтправления) = Неопределено Тогда
					списПунктыОтправления.Добавить(ТекЗаказГрузоотправителя.АдресОтправления);
				ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
					// Заказы не указываются, ручной ввод пунктов
					Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
						Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
							Или ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка)
							И ЗначениеЗаполнено(ТекСтрока.Пункт)
							И списПунктыОтправления.НайтиПоЗначению(ТекСтрока.Пункт) = Неопределено Тогда
							списПунктыОтправления.Добавить(ТекСтрока.Пункт);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя.АдресНазначения)
					И списПунктыНазначения.НайтиПоЗначению(ТекЗаказГрузоотправителя.АдресНазначения) = Неопределено Тогда
					списПунктыНазначения.Добавить(ТекЗаказГрузоотправителя.АдресНазначения);
				ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
					// Заказы не указываются, ручной ввод пунктов
					Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
						Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
							Или ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка)
							И ЗначениеЗаполнено(ТекСтрока.Пункт)
							И списПунктыНазначения.НайтиПоЗначению(ТекСтрока.Пункт) = Неопределено Тогда
							списПунктыНазначения.Добавить(ТекСтрока.Пункт);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Формируем список номенклатуры для указанного заказа (вся номенклатура, которая есть в МЛ по этому заказу)
				Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
					Если ТекСтрока.ЗаказГрузоотправителя = ТекЗаказГрузоотправителя	И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
						Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
							Если списНоменклатура.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
								списНоменклатура.Добавить(ТекСтрока.Номенклатура);
							КонецЕсли;
							Если списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидГруза) = Неопределено Тогда
								списВидыГрузов.Добавить(ТекСтрока.Номенклатура.уатВидГруза);
							КонецЕсли;
							Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной)
								И списВидыУпаковок.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной) = Неопределено Тогда
								списВидыУпаковок.Добавить(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной);
							КонецЕсли;
						ИначеЕсли ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
							Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
								списГрузовыеМеста.Добавить(ТекСтрока.Номенклатура);
							КонецЕсли;
							Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидГруза)
								И списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.ВидГруза) = Неопределено Тогда
								списВидыГрузов.Добавить(ТекСтрока.Номенклатура.ВидГруза);
							КонецЕсли;
							Если ТекСтрока.Номенклатура.Контейнер Тогда
								Если списТипыКонтейнеров.НайтиПоЗначению(ТекСтрока.Номенклатура.ТипКонтейнера) = Неопределено Тогда
									списТипыКонтейнеров.Добавить(ТекСтрока.Номенклатура.ТипКонтейнера);
								КонецЕсли;
							Иначе
								Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидУпаковки)
									И списВидыУпаковок.НайтиПоЗначению(ТекСтрока.Номенклатура.ВидУпаковки) = Неопределено Тогда
									списВидыУпаковок.Добавить(ТекСтрока.Номенклатура.ВидУпаковки);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НЕ флЗаказУказан Тогда
				СписокФильтров.Вставить("Маршрут",              ДокументОбъект.Маршрут);
				СписокФильтров.Вставить("ОбъектСтроительства",  ДокументОбъект.ОбъектСтроительства);
				СписокФильтров.Вставить("ВидПеревозки",         ДокументОбъект.ВидПеревозки);
				СписокФильтров.Вставить("НаправлениеПеревозки", ДокументОбъект.НаправлениеПеревозки);
			КонецЕсли;
				
			Если списКонтрагенты.Количество() > 0 Тогда
				СписокФильтров.Вставить("Контрагент", списКонтрагенты);
			КонецЕсли;
			Если списДоговоры.Количество() > 0 Тогда
				СписокФильтров.Вставить("ДоговорКонтрагента", списДоговоры);
			КонецЕсли;
			Если списМодели.Количество() > 0 Тогда
				СписокФильтров.Вставить("МодельТягача", списМодели);
			КонецЕсли;
			Если списТипыТС.Количество() > 0 Тогда
				СписокФильтров.Вставить("ТипТягача", списТипыТС);
			КонецЕсли;
			Если списПунктыОтправления.Количество() > 0 Тогда
				СписокФильтров.Вставить("ПунктОтправления", списПунктыОтправления);
			КонецЕсли;
			Если списПунктыНазначения.Количество() > 0 Тогда
				СписокФильтров.Вставить("ПунктНазначения", списПунктыНазначения);
			КонецЕсли;
			Если списНоменклатура.Количество() > 0 Тогда
				СписокФильтров.Вставить("Номенклатура", списНоменклатура);
			КонецЕсли;
			Если списГрузовыеМеста.Количество() > 0 Тогда
				СписокФильтров.Вставить("ГрузовоеМесто", списГрузовыеМеста);
			КонецЕсли;
			Если списВидыГрузов.Количество() > 0 Тогда
				СписокФильтров.Вставить("ВидГруза", списВидыГрузов);
			КонецЕсли;
			Если списВидыУпаковок.Количество() > 0 Тогда
				СписокФильтров.Вставить("ВидУпаковки", списВидыУпаковок);
			КонецЕсли;
			Если списТипыКонтейнеров.Количество() > 0 Тогда
				СписокФильтров.Вставить("ТипКонтейнера", списТипыКонтейнеров);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.ТС) Тогда
				СписокФильтров.Вставить("Тягач", ДокументОбъект.ТС);
				СписокФильтров.Вставить("МодельТягача", ДокументОбъект.ТС.Модель);
				СписокФильтров.Вставить("ТипТягача", ДокументОбъект.ТС.ТипТС);
			КонецЕсли;
									
		КонецЕсли;
		
		//прицепы
		списПрицепы = Новый СписокЗначений;
		списМоделиПрицепов = Новый СписокЗначений;
		списТипыПрицепов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
			списПрицепы.Добавить(ДокументОбъект.Прицеп1);
			списМоделиПрицепов.Добавить(ДокументОбъект.Прицеп1.Модель);
			списТипыПрицепов.Добавить(ДокументОбъект.Прицеп1.ТипТС);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
			списПрицепы.Добавить(ДокументОбъект.Прицеп2);
			списМоделиПрицепов.Добавить(ДокументОбъект.Прицеп2.Модель);
			списТипыПрицепов.Добавить(ДокументОбъект.Прицеп2.ТипТС);
		КонецЕсли;
		Если списПрицепы.Количество() > 0 Тогда
			СписокФильтров.Вставить("Прицеп", списПрицепы);
			СписокФильтров.Вставить("МодельПрицепа", списМоделиПрицепов);
			СписокФильтров.Вставить("ТипПрицепа", списТипыПрицепов);
		КонецЕсли;
		
		Если ДопПараметры.Свойство("Склад") Тогда
			СписокФильтров.Вставить("Склад", ДопПараметры.Склад);
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "уатМаршрутныйЛист" И ИмяТЧ = "Расходы" Тогда
		Если ДопПараметры.Свойство("РаспределениеПоЗаказам") Тогда
			СписокФильтров.Вставить("Контрагент", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].Контрагент);
			СписокФильтров.Вставить("ДоговорКонтрагента", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].Договор);
			СписокФильтров.Вставить("ПунктОтправления", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.АдресОтправления);
			СписокФильтров.Вставить("ПунктНазначения", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.АдресНазначения);
			СписокФильтров.Вставить("Маршрут", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.Маршрут);
			СписокФильтров.Вставить("ОбъектСтроительства", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ОбъектСтроительства);
			СписокФильтров.Вставить("ВидПеревозки", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.ВидПеревозки);
			СписокФильтров.Вставить("НаправлениеПеревозки", ДокументОбъект.РезультатРаспределения[НомерСтрокиДокумента].ЗаказГрузоотправителя.НаправлениеПеревозки);
		Иначе
			Если ДопПараметры.Свойство("ЗаказГрузоотправителя") Тогда
				ТекЗаказГрузоотправителя = ДопПараметры.ЗаказГрузоотправителя;
			ИначеЕсли ДопПараметры.Свойство("ПараметрыЗаказаДляРасчета") И ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя") Тогда
				ТекЗаказГрузоотправителя = ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя;
			КонецЕсли;
			
			мсвЗаказы = Новый Массив;
			флЗаказУказан = Истина;
			Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя) Тогда
				мсвЗаказы.Добавить(ТекЗаказГрузоотправителя);
			Иначе
				Для Каждого ТекСтрокаЗаказ Из ДокументОбъект.Заказы Цикл
					Если мсвЗаказы.Найти(ТекСтрокаЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
						мсвЗаказы.Добавить(ТекСтрокаЗаказ.ЗаказГрузоотправителя);
					КонецЕсли;
				КонецЦикла;
				флЗаказУказан = Ложь;
			КонецЕсли;
			
			списКонтрагенты       = Новый СписокЗначений;
			списДоговоры          = Новый СписокЗначений;
			списМодели            = Новый СписокЗначений;
			списТипыТС            = Новый СписокЗначений;
			списПунктыОтправления = Новый СписокЗначений;
			списПунктыНазначения  = Новый СписокЗначений;
			списНоменклатура      = Новый СписокЗначений;
			списГрузовыеМеста     = Новый СписокЗначений;
			списВидыГрузов        = Новый СписокЗначений;
			списВидыУпаковок      = Новый СписокЗначений;
			списТипыКонтейнеров   = Новый СписокЗначений;
			
			Для Каждого ТекЗаказГрузоотправителя Из мсвЗаказы Цикл
				Если флЗаказУказан Тогда
					СписокФильтров.Вставить("Маршрут",              ТекЗаказГрузоотправителя.Маршрут);
					СписокФильтров.Вставить("ОбъектСтроительства",  ТекЗаказГрузоотправителя.ОбъектСтроительства);
					СписокФильтров.Вставить("ВидПеревозки",         ТекЗаказГрузоотправителя.ВидПеревозки);
					СписокФильтров.Вставить("НаправлениеПеревозки", ТекЗаказГрузоотправителя.НаправлениеПеревозки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя) Тогда
					Если списКонтрагенты.НайтиПоЗначению(ТекЗаказГрузоотправителя.Контрагент) = Неопределено Тогда
						списКонтрагенты.Добавить(ТекЗаказГрузоотправителя.Контрагент);
					КонецЕсли;
				ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
					// Ручной ввод контрагентов
					Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
						Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
							ДопПараметры.Вставить("Контрагент", ТекСтрока.Контрагент);
							
							Если списКонтрагенты.НайтиПоЗначению(ТекСтрока.Контрагент) = Неопределено Тогда
								списКонтрагенты.Добавить(ТекСтрока.Контрагент);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если списДоговоры.НайтиПоЗначению(ТекЗаказГрузоотправителя.ДоговорКонтрагента) = Неопределено Тогда
					списДоговоры.Добавить(ТекЗаказГрузоотправителя.ДоговорКонтрагента);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя.ТребованиеКТС)
					И списМодели.НайтиПоЗначению(ТекЗаказГрузоотправителя.ТребованиеКТС) = Неопределено Тогда
					списМодели.Добавить(ТекЗаказГрузоотправителя.ТребованиеКТС);
				ИначеЕсли ЗначениеЗаполнено(ТекЗаказГрузоотправителя.ТребованиеКТСТипТС)
					И списТипыТС.НайтиПоЗначению(ТекЗаказГрузоотправителя.ТребованиеКТСТипТС) = Неопределено Тогда
					списТипыТС.Добавить(ТекЗаказГрузоотправителя.ТребованиеКТСТипТС);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя.АдресОтправления)
					И списПунктыОтправления.НайтиПоЗначению(ТекЗаказГрузоотправителя.АдресОтправления) = Неопределено Тогда
					списПунктыОтправления.Добавить(ТекЗаказГрузоотправителя.АдресОтправления);
				ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
					// Заказы не указываются, ручной ввод пунктов
					Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
						Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
							Или ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка)
							И ЗначениеЗаполнено(ТекСтрока.Пункт)
							И списПунктыОтправления.НайтиПоЗначению(ТекСтрока.Пункт) = Неопределено Тогда
							списПунктыОтправления.Добавить(ТекСтрока.Пункт);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЗаказГрузоотправителя.АдресНазначения)
					И списПунктыНазначения.НайтиПоЗначению(ТекЗаказГрузоотправителя.АдресНазначения) = Неопределено Тогда
					списПунктыНазначения.Добавить(ТекЗаказГрузоотправителя.АдресНазначения);
				ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
					// Заказы не указываются, ручной ввод пунктов
					Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
						Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
							Или ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка)
							И ЗначениеЗаполнено(ТекСтрока.Пункт)
							И списПунктыНазначения.НайтиПоЗначению(ТекСтрока.Пункт) = Неопределено Тогда
							списПунктыНазначения.Добавить(ТекСтрока.Пункт);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Формируем список номенклатуры для указанного заказа (вся номенклатура, которая есть в МЛ по этому заказу)
				Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
					Если ТекСтрока.ЗаказГрузоотправителя = ТекЗаказГрузоотправителя	И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
						Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
							Если списНоменклатура.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
								списНоменклатура.Добавить(ТекСтрока.Номенклатура);
							КонецЕсли;
							Если списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидГруза) = Неопределено Тогда
								списВидыГрузов.Добавить(ТекСтрока.Номенклатура.уатВидГруза);
							КонецЕсли;
							Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной)
								И списВидыУпаковок.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной) = Неопределено Тогда
								списВидыУпаковок.Добавить(ТекСтрока.Номенклатура.уатВидУпаковкиОсновной);
							КонецЕсли;
						ИначеЕсли ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
							Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
								списГрузовыеМеста.Добавить(ТекСтрока.Номенклатура);
							КонецЕсли;
							Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидГруза) 
								И списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.ВидГруза) = Неопределено Тогда
								списВидыГрузов.Добавить(ТекСтрока.Номенклатура.ВидГруза);
							КонецЕсли;
							Если ТекСтрока.Номенклатура.Контейнер Тогда
								Если списТипыКонтейнеров.НайтиПоЗначению(ТекСтрока.Номенклатура.ТипКонтейнера) = Неопределено Тогда
									списТипыКонтейнеров.Добавить(ТекСтрока.Номенклатура.ТипКонтейнера);
								КонецЕсли;
							Иначе
								Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидУпаковки)
									И списВидыУпаковок.НайтиПоЗначению(ТекСтрока.Номенклатура.ВидУпаковки) = Неопределено Тогда
									списВидыУпаковок.Добавить(ТекСтрока.Номенклатура.ВидУпаковки);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НЕ флЗаказУказан Тогда
				СписокФильтров.Вставить("Маршрут",              ДокументОбъект.Маршрут);
				СписокФильтров.Вставить("ОбъектСтроительства",  ДокументОбъект.ОбъектСтроительства);
				СписокФильтров.Вставить("ВидПеревозки",         ДокументОбъект.ВидПеревозки);
				СписокФильтров.Вставить("НаправлениеПеревозки", ДокументОбъект.НаправлениеПеревозки);
			КонецЕсли;
			
			Если списКонтрагенты.Количество() > 0 Тогда
				СписокФильтров.Вставить("Контрагент", списКонтрагенты);
			КонецЕсли;
			Если списДоговоры.Количество() > 0 Тогда
				СписокФильтров.Вставить("ДоговорКонтрагента", списДоговоры);
			КонецЕсли;
			Если списМодели.Количество() > 0 Тогда
				СписокФильтров.Вставить("МодельТягача", списМодели);
			КонецЕсли;
			Если списТипыТС.Количество() > 0 Тогда
				СписокФильтров.Вставить("ТипТягача", списТипыТС);
			КонецЕсли;
			Если списПунктыОтправления.Количество() > 0 Тогда
				СписокФильтров.Вставить("ПунктОтправления", списПунктыОтправления);
			КонецЕсли;
			Если списПунктыНазначения.Количество() > 0 Тогда
				СписокФильтров.Вставить("ПунктНазначения", списПунктыНазначения);
			КонецЕсли;
			Если списНоменклатура.Количество() > 0 Тогда
				СписокФильтров.Вставить("Номенклатура", списНоменклатура);
			КонецЕсли;
			Если списГрузовыеМеста.Количество() > 0 Тогда
				СписокФильтров.Вставить("ГрузовоеМесто", списГрузовыеМеста);
			КонецЕсли;
			Если списВидыГрузов.Количество() > 0 Тогда
				СписокФильтров.Вставить("ВидГруза", списВидыГрузов);
			КонецЕсли;
			Если списВидыУпаковок.Количество() > 0 Тогда
				СписокФильтров.Вставить("ВидУпаковки", списВидыУпаковок);
			КонецЕсли;
			Если списТипыКонтейнеров.Количество() > 0 Тогда
				СписокФильтров.Вставить("ТипКонтейнера", списТипыКонтейнеров);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументОбъект.ТС) Тогда
				СписокФильтров.Вставить("Тягач", ДокументОбъект.ТС);
				СписокФильтров.Вставить("МодельТягача", ДокументОбъект.ТС.Модель);
				СписокФильтров.Вставить("ТипТягача", ДокументОбъект.ТС.ТипТС);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ТС) Тогда
			СписокФильтров.Вставить("Тягач", ДокументОбъект.ТС);
			СписокФильтров.Вставить("МодельТягача", ДокументОбъект.ТС.Модель);
			СписокФильтров.Вставить("ТипТягача", ДокументОбъект.ТС.ТипТС);
		КонецЕсли;
		
		//прицепы
		списПрицепы = Новый СписокЗначений;
		списМоделиПрицепов = Новый СписокЗначений;
		списТипыПрицепов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
			списПрицепы.Добавить(ДокументОбъект.Прицеп1);
			списМоделиПрицепов.Добавить(ДокументОбъект.Прицеп1.Модель);
			списТипыПрицепов.Добавить(ДокументОбъект.Прицеп1.ТипТС);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
			списПрицепы.Добавить(ДокументОбъект.Прицеп2);
			списМоделиПрицепов.Добавить(ДокументОбъект.Прицеп2.Модель);
			списТипыПрицепов.Добавить(ДокументОбъект.Прицеп2.ТипТС);
		КонецЕсли;
		Если списПрицепы.Количество() > 0 Тогда
			СписокФильтров.Вставить("Прицеп", списПрицепы);
			СписокФильтров.Вставить("МодельПрицепа", списМоделиПрицепов);
			СписокФильтров.Вставить("ТипПрицепа", списТипыПрицепов);
		КонецЕсли;
		
		Если ДопПараметры.Свойство("Склад") Тогда
			СписокФильтров.Вставить("Склад", ДопПараметры.Склад);
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем отбор по геозонам, если пункты указаны и они входят в одну и более геозон
	Если КэшУскорения = Неопределено Тогда
		КэшУскорения = Новый Структура;
	КонецЕсли;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда //прописываем жестко для корректной работы псевдопрофа (КОРП с включенным вариантом поставки ПРОФ)
		КэшУскорения.Вставить("ИспользуютсяГеозоны", Ложь);
	КонецЕсли;
	Если НЕ КэшУскорения.Свойство("ИспользуютсяГеозоны") Тогда //не будем искать пунктов вхождение в геозоны, если геозоны вообще не используются в тарифах
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатТарифыТС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатТарифыТС КАК уатТарифыТС
		|ГДЕ
		|	уатТарифыТС.ИспользуютсяГеозоны
		|	И НЕ уатТарифыТС.ПометкаУдаления");
		КэшУскорения.Вставить("ИспользуютсяГеозоны", НЕ Запрос.Выполнить().Пустой());
	КонецЕсли;
	Если КэшУскорения.ИспользуютсяГеозоны Тогда
		Если СписокФильтров.Свойство("ПунктОтправления") Тогда
			ГеозоныПункта = уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(СписокФильтров.ПунктОтправления, КэшУскорения);
			Если ГеозоныПункта.Количество() > 0 Тогда
				СписокФильтров.Вставить("ГеозонаОтправления", ГеозоныПункта);
			КонецЕсли;
		КонецЕсли;
		Если СписокФильтров.Свойство("ПунктНазначения") Тогда
			ГеозоныПункта = уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(СписокФильтров.ПунктНазначения, КэшУскорения);
			Если ГеозоныПункта.Количество() > 0 Тогда
				СписокФильтров.Вставить("ГеозонаНазначения", ГеозоныПункта);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокФильтров;
КонецФункции

// Процедура добавляет к таблице тарифов тарифы себестоимости
//
// Параметры:
//  СписокФильтров:  Структура фильтров
//	ПолучатьТолькоОдинТарифПоПараметрамВыработки
//	ДопПараметры_уэ - Структура [ПрейскурантПоставщика, Контрагент, Услуга] - содержит доп. параметры логистики
//
// Алгоритм поиска прейскуранта: ищется последний по дате и больший по номеру прейскурант,
//	удовлетворяющий наибольшему количеству фильтров
//
Процедура ДобавитьТарифыСебестоимости(тблТарифыВх, Знач СписокФильтров, Знач Организация = Неопределено, Знач Дата = Неопределено,
	ПолучатьТолькоОдинТарифПоПараметрамВыработки = Ложь, ДопПараметры_уэ = Неопределено)
	
	ЭтоЛогистика = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	тблТарифыРез = Новый ТаблицаЗначений;
		тблТарифыРез.Колонки.Добавить("Тариф");
		тблТарифыРез.Колонки.Добавить("Прейскурант");
		// тблТарифыРез.Колонки.Добавить("СтепеньСовпаденияФильтров");
		тблТарифыРез.Колонки.Добавить("ПараметрВыработки");
		тблТарифыРез.Колонки.Добавить("ДатаНачала");
	Если тблТарифыВх <> Неопределено Тогда
		Для Каждого ТекСтрока Из тблТарифыВх Цикл
			НоваяСтрока = тблТарифыРез.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
			"ОсновнаяОрганизация");
	КонецЕсли;
	
	//логистика
	флДопПараметры_уэ = (ТипЗнч(ДопПараметры_уэ) = Тип("Структура"));
	Если флДопПараметры_уэ Тогда
		ПараметрВыработки_уэ = ДопПараметры_уэ.ПараметрВыработки;
		ТипПункта_уэ         = ДопПараметры_уэ.ТипПункта;
		ТипТочкиМаршрута_уэ  = ДопПараметры_уэ.ТипТочкиМаршрута;
		ВидУпаковки_уэ       = ДопПараметры_уэ.ВидУпаковки;
		ТипКонтейнера_уэ     = ДопПараметры_уэ.ТипКонтейнера;
	Иначе
		ПараметрВыработки_уэ = Неопределено;
		ТипПункта_уэ         = Неопределено;
		ТипТочкиМаршрута_уэ  = Неопределено;
		ВидУпаковки_уэ       = Неопределено;
		ТипКонтейнера_уэ     = Неопределено;
	КонецЕсли;
	
	// разбираем входной фильтр
	Если ТипЗнч(СписокФильтров) <> Тип("Структура") Тогда
		СписокФильтров = Новый Структура;
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Тягач") Тогда
		СписокФильтров.Вставить("Тягач", Справочники.уатТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельТягача") Тогда
		СписокФильтров.Вставить("МодельТягача", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипТягача") Тогда
		СписокФильтров.Вставить("ТипТягача", Справочники.уатТипыТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Прицеп") Тогда
		СписокФильтров.Вставить("Прицеп", Справочники.уатТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельПрицепа") Тогда
		СписокФильтров.Вставить("МодельПрицепа", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипПрицепа") Тогда
		СписокФильтров.Вставить("ТипПрицепа", Справочники.уатТипыТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Контрагент") Тогда
		СписокФильтров.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ДоговорКонтрагента") Тогда
		СписокФильтров.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Маршрут") Тогда
		СписокФильтров.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Номенклатура") Тогда
		СписокФильтров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ОбъектСтроительства") Тогда
		СписокФильтров.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ГрузовоеМесто") Тогда
		СписокФильтров.Вставить("ГрузовоеМесто", Справочники.уатГрузовыеМеста_уэ.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ПунктОтправления") Тогда
		СписокФильтров.Вставить("ПунктОтправления", Справочники.уатПунктыНазначения.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ПунктНазначения") Тогда
		СписокФильтров.Вставить("ПунктНазначения", Справочники.уатПунктыНазначения.ПустаяСсылка());
	КонецЕсли;
	Если ЭтоЛогистика Тогда
		Если НЕ СписокФильтров.Свойство("ГеозонаОтправления") Тогда
			СписокФильтров.Вставить("ГеозонаОтправления", Справочники.уатГеозоны_уэ.ПустаяСсылка());
		КонецЕсли;
		Если НЕ СписокФильтров.Свойство("ГеозонаНазначения") Тогда
			СписокФильтров.Вставить("ГеозонаНазначения", Справочники.уатГеозоны_уэ.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ВидГруза") Тогда
		СписокФильтров.Вставить("ВидГруза", Справочники.уатВидыГрузов.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ВидПеревозки") Тогда
		СписокФильтров.Вставить("ВидПеревозки", Справочники.уатВидыПеревозок.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("НаправлениеПеревозки") Тогда
		СписокФильтров.Вставить("НаправлениеПеревозки", Справочники.уатНаправленияПеревозок.ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТарифыСебестоимости_уэ.Тариф КАК Тариф,
	|	уатТарифыСебестоимости_уэ.Тариф.СтатьяРасходов КАК Прейскурант,
	|	0 КАК СтепеньСовпаденияФильтров,
	|	уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки КАК ПараметрВыработки,
	|	уатТарифыСебестоимости_уэ.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	РегистрСведений.уатТарифыСебестоимости_уэ КАК уатТарифыСебестоимости_уэ
	|ГДЕ
	|	НЕ уатТарифыСебестоимости_уэ.Тариф.ПометкаУдаления
	|	И НЕ уатТарифыСебестоимости_уэ.Тариф.ЭтоГруппа
	|	И уатТарифыСебестоимости_уэ.Регистратор.Организация = &Организация
	|	И уатТарифыСебестоимости_уэ.ДатаНачала <= &Дата
	|	И (КОНЕЦПЕРИОДА(уатТарифыСебестоимости_уэ.ДатаОкончания, ДЕНЬ) >= &Дата
	|			ИЛИ уатТарифыСебестоимости_уэ.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|	И (&ПараметрВыработки_уэ = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки = &ПараметрВыработки_уэ
	|				И (уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта)
	|						И уатТарифыСебестоимости_уэ.Тариф.ТипПункта = &ТипПункта_уэ
	|					ИЛИ уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации)
	|						И уатТарифыСебестоимости_уэ.Тариф.ТипТочкиМаршрута = &ТипТочкиМаршрута_уэ
	|					ИЛИ уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоУпаковок)
	|						И уатТарифыСебестоимости_уэ.Тариф.ВидУпаковки = &ВидУпаковки_уэ
	|					ИЛИ уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоКонтейнеров)
	|						И уатТарифыСебестоимости_уэ.Тариф.ТипКонтейнера = &ТипКонтейнера_уэ
	|					ИЛИ уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта)
	|						И уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации)
	|						И уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоУпаковок)
	|						И уатТарифыСебестоимости_уэ.Тариф.ПараметрВыработки <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоКонтейнеров)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатТарифыСебестоимости_уэ.ДатаНачала УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Дата",                 НачалоДня(Дата));
	Запрос.УстановитьПараметр("ПараметрВыработки_уэ", ПараметрВыработки_уэ);
	Запрос.УстановитьПараметр("ТипПункта_уэ",         ТипПункта_уэ);
	Запрос.УстановитьПараметр("ТипТочкиМаршрута_уэ",  ТипТочкиМаршрута_уэ);
	Запрос.УстановитьПараметр("ВидУпаковки_уэ",       ВидУпаковки_уэ);
	Запрос.УстановитьПараметр("ТипКонтейнера_уэ",     ТипКонтейнера_уэ);
	
	тблТарифы = Запрос.Выполнить().Выгрузить();
	
	уатРасчетыПоТарифам.ОтобратьТарифыПоОбластямДействия(тблТарифы, СписокФильтров, Ложь);
	
	КоличТарифов = тблТарифы.Количество();
	Если КоличТарифов > 0 Тогда
		мсвСтатьиКалькуляции = Новый Массив;
		Для Каждого ТекТариф Из тблТарифы Цикл
			Если мсвСтатьиКалькуляции.Найти(ТекТариф.Прейскурант) = Неопределено Тогда
				мсвСтатьиКалькуляции.Добавить(ТекТариф.Прейскурант);
			КонецЕсли;
		КонецЦикла;
		
		мсвСтрокУдаления = Новый Массив;
		
		Для Каждого ТекСтатьяКалькуляции Из мсвСтатьиКалькуляции Цикл
			тблТарифы.Сортировать("СтепеньСовпаденияФильтров УБЫВ");
			тблПараметрыВыработки = тблТарифы.Скопировать();
			тблПараметрыВыработки.Свернуть("ПараметрВыработки");
			Для Каждого ТекПараметрВыработки Из тблПараметрыВыработки Цикл
				МаксСтепеньСовпадения = 0;
				СчТариф = 0;
				Для Каждого ТекСтрока Из тблТарифы Цикл
					Если ТекПараметрВыработки.ПараметрВыработки <> ТекСтрока.ПараметрВыработки
						ИЛИ ТекСтрока.Прейскурант <> ТекСтатьяКалькуляции Тогда
						Продолжить;
					КонецЕсли;
					СчТариф = СчТариф + 1;
					
					МаксСтепеньСовпадения = Макс(ТекСтрока.СтепеньСовпаденияФильтров, МаксСтепеньСовпадения);
					
					Если ПолучатьТолькоОдинТарифПоПараметрамВыработки И СчТариф > 1 Тогда //оставим только один тариф по параметру выработки
						мсвСтрокУдаления.Добавить(ТекСтрока);
					ИначеЕсли ТекСтрока.СтепеньСовпаденияФильтров < МаксСтепеньСовпадения Тогда //оставим только тарифы с максимальной степенью совпадения фильтров
						мсвСтрокУдаления.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблТарифы Цикл
		НоваяСтрока = тблТарифыРез.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	тблТарифыВх = тблТарифыРез;
	
КонецПроцедуры // ДобавитьТарифыСебестоимости

// Функция возвращает тариф себестоимости процентом от суммы по заданным параметрам базового тарифа себестоимости
//
Функция НайтиТарифыСебестоимостиПроцентом(СтатьяРасходов, ДатаСреза = Неопределено)
	Если НЕ ЗначениеЗаполнено(ДатаСреза) Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Рез = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатТарифыСебестоимости_уэ.Тариф КАК Тариф,
	|	уатТарифыСебестоимости_уэ.Тариф.СтатьяРасходов КАК Статья
	|ИЗ РегистрСведений.уатТарифыСебестоимости_уэ КАК уатТарифыСебестоимости_уэ
	|ГДЕ
	|	уатТарифыСебестоимости_уэ.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|	И уатТарифыСебестоимости_уэ.ДатаНачала <= &Дата
	|	И (КОНЕЦПЕРИОДА(уатТарифыСебестоимости_уэ.ДатаОкончания, ДЕНЬ) >= &Дата	ИЛИ уатТарифыСебестоимости_уэ.ДатаОкончания = ДАТАВРЕМЯ(1,1,1))
	|	И уатТарифыСебестоимости_уэ.Тариф.БазовыеСтатьиКалькуляции.СтатьяРасходов = &СтатьяРасходов";
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	Запрос.УстановитьПараметр("Дата", ДатаСреза);
	
	тблТарифы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекТариф Из тблТарифы Цикл
		Рез.Добавить(Новый Структура("Тариф, Статья", ТекТариф.Тариф, ТекТариф.Статья));
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Функция возвращает грузоподъемность сцепки ТС+Прицепы по маршрутному листу
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция ГрузоподъемностьПоМЛ(МаршрутныйЛист)
	Возврат уатПутевыеЛисты.уатГрузоподъемностьПоПЛ(МаршрутныйЛист);
КонецФункции //ГрузоподъемностьПоМЛ

// Функция возвращает ОбъемКузова сцепки ТС+Прицепы по маршрутному листу
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция ОбъемКузоваПоМЛ(МаршрутныйЛист)
	Возврат уатПутевыеЛисты.уатОбъемКузоваПоПЛ(МаршрутныйЛист);
КонецФункции //ОбъемКузоваПоМЛ

// Расчет пользовательских параметров выработки по формулам
Процедура РассчитатьПараметрыВыработкиПоФормулам(ПараметрыВыработкиТарифов, ДокументОбъект, ДопПараметры, ДопПараметрыВыработкиТарифов = Неопределено) Экспорт
	ПараметрыВыработкиТарифов.Колонки.Добавить("ПараметрВыработкиНаименование", Новый ОписаниеТипов("Строка"));
	Для Каждого ТекСтрока Из ПараметрыВыработкиТарифов Цикл
		ТекСтрока.ПараметрВыработкиНаименование = ТекСтрока.ПараметрВыработки.Наименование;
	КонецЦикла;
	Если ДопПараметрыВыработкиТарифов <> Неопределено Тогда
		ДопПараметрыВыработкиТарифов.Колонки.Добавить("ПараметрВыработкиНаименование", Новый ОписаниеТипов("Строка"));
		Для Каждого ТекСтрока Из ДопПараметрыВыработкиТарифов Цикл
			ТекСтрока.ПараметрВыработкиНаименование = ТекСтрока.ПараметрВыработки.Наименование;
		КонецЦикла;
	КонецЕсли;

	ИмяДокумента = ИмяДокумента(ДокументОбъект);
		
	// 1. Получение параметров выработки для расчета.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра КАК АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ПорядокРасчета КАК ПорядокРасчета,
	|	уатПараметрыВыработки.Наименование КАК Наименование,
	|	уатПараметрыВыработки.Временный КАК Временный
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.Предопределенный = ЛОЖЬ
	|	И уатПараметрыВыработки.ПометкаУдаления = ЛОЖЬ
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = Значение(Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаказамИМаршрутнымЛистам)");
	Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатПараметрыВыработки.ДействуетНаТСМЛ = ИСТИНА";
		Если ДопПараметры.ПараметрыЗаказаДляРасчета.Свойство("ЗаказГрузоотправителя")
			И ЗначениеЗаполнено(ДопПараметры.ПараметрыЗаказаДляРасчета.ЗаказГрузоотправителя) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатПараметрыВыработки.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти)";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	И уатПараметрыВыработки.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу)";
		КонецЕсли;
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности = ИСТИНА";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	// 2. Расчет значений параметров.
	Пока Выборка.Следующий() Цикл
		ПроизвольныйПараметрВыработки = Новый Структура("Ссылка, АлгоритмРасчетаПараметра, Наименование, Временный");
		ЗаполнитьЗначенияСвойств(ПроизвольныйПараметрВыработки, Выборка);
		ДобавитьПроизвольныйПараметрВыработки(ДокументОбъект, ПроизвольныйПараметрВыработки, ПараметрыВыработкиТарифов, ДопПараметрыВыработкиТарифов);
	КонецЦикла;
	
	ПараметрыВыработкиТарифов.Колонки.Удалить("ПараметрВыработкиНаименование");
	Если ДопПараметрыВыработкиТарифов <> Неопределено Тогда
		ДопПараметрыВыработкиТарифов.Колонки.Удалить("ПараметрВыработкиНаименование");
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит расчет пользовательского параметра выработки по формуле
Процедура ДобавитьПроизвольныйПараметрВыработки(ДокументОбъект, ПроизвольныйПараметрВыработки, ПараметрыВыработкиТарифов, ДопПараметрыВыработкиТарифов)
	СтрокаЗамены = СтрЗаменить(ПроизвольныйПараметрВыработки.АлгоритмРасчетаПараметра, "[", "ДокументОбъект.");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	СтрокаЗамены = СтрЗаменить(ПроизвольныйПараметрВыработки.АлгоритмРасчетаПараметра, "{", "Подключаемый_ПолучитьПараметрВыработки(""");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "}", """, ПараметрыВыработкиТарифов, ДопПараметрыВыработкиТарифов)");
	
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Если ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
			ЗначениеПараметра = "ошибка";
		КонецЕсли;
	Исключение
		ЗначениеПараметра = "ошибка";
	КонецПопытки;
	
	Если ЗначениеПараметра = "ошибка" Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='When calculating the output parameter ""%1"" error occurred."
			+ " Check correctness of formula and input data.';ru='При расчете параметра выработки ""%1"" произошла ошибка."
			+ " Проверьте правильность формулы и введенных данных.'"), ПроизвольныйПараметрВыработки.Наименование);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
	Иначе
		НоваяСтрока = ПараметрыВыработкиТарифов.Найти(ПроизвольныйПараметрВыработки.Ссылка, "ПараметрВыработки");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ПараметрыВыработкиТарифов.Добавить();
			НоваяСтрока.ПараметрВыработки = ПроизвольныйПараметрВыработки.Ссылка;
			НоваяСтрока.ПараметрВыработкиНаименование = ПроизвольныйПараметрВыработки.Наименование;
			НоваяСтрока.Количество = 0;
		КонецЕсли;
		Если ПроизвольныйПараметрВыработки.Временный Тогда
			//// В МЛ выработка рассчитывается и хранится в секундах, в других документах - в часах
			//Если ИмяДокумента(ДокументОбъект) = "уатМаршрутныйЛист" Тогда
			//	ЗначениеПараметра = ЗначениеПараметра/3600;
			//КонецЕсли;
			
			// Переводим значение из секунд в часы
			НоваяСтрока.Количество = НоваяСтрока.Количество + ЗначениеПараметра/3600;
		Иначе
			НоваяСтрока.Количество = НоваяСтрока.Количество + ЗначениеПараметра;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Поиск значения параметра выработки в таблице параметров выработки
Функция Подключаемый_ПолучитьПараметрВыработки(ПараметрВыработкиНаименование, ПараметрыВыработкиТарифов, ДопПараметрыВыработкиТарифов)
	НайденнаяСтрока = ПараметрыВыработкиТарифов.Найти(ПараметрВыработкиНаименование, "ПараметрВыработкиНаименование");
	Если НайденнаяСтрока = Неопределено 
		И ЗначениеЗаполнено(ДопПараметрыВыработкиТарифов)
		И ТипЗнч(ДопПараметрыВыработкиТарифов) = Тип("ТаблицаЗначений") Тогда
		НайденнаяСтрока = ДопПараметрыВыработкиТарифов.Найти(ПараметрВыработкиНаименование, "ПараметрВыработкиНаименование");
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если НайденнаяСтрока.ПараметрВыработки.Временный Тогда
			// В формулах для временных параметров используется их значение в секундах, а не в часах
			Возврат НайденнаяСтрока.Количество * 3600;
		Иначе
			Возврат НайденнаяСтрока.Количество;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Процедура получает таблицу с параметрами выработки для складской операции,
// которые отличаются от уже вычисленных значений выработки
Функция ПолучитьТаблицуПараметровВыработкиТарифовСкладскаяОперация(ДокументОбъект, ПараметрыВыработкиТарифов, ТекПараметрВыработки, ДопПараметры)
	ПараметрыВыработкиТарифовСкладскаяОперация = ПараметрыВыработкиТарифов.СкопироватьКолонки();
	
	// Весообъемные характеристики хранятся непосредственно
	НоваяСтрока = ПараметрыВыработкиТарифовСкладскаяОперация.Добавить();
	НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза;
	НоваяСтрока.Количество = ТекПараметрВыработки.Вес;
	НоваяСтрока = ПараметрыВыработкиТарифовСкладскаяОперация.Добавить();
	НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем;
	НоваяСтрока.Количество = ТекПараметрВыработки.Объем;
	НоваяСтрока = ПараметрыВыработкиТарифовСкладскаяОперация.Добавить();
	НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок;
	НоваяСтрока.Количество = ТекПараметрВыработки.КоличествоМест;
	НоваяСтрока.ВидУпаковки = ТекПараметрВыработки.ВидУпаковки;
	НоваяСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров;
	НоваяСтрока.Количество = ТекПараметрВыработки.КоличествоМест;
	НоваяСтрока.ВидУпаковки = ТекПараметрВыработки.ТипКонтейнера;
	
	// Вычисление параметров выработки требующих расчета по формулам
	РассчитатьПараметрыВыработкиПоФормулам(ПараметрыВыработкиТарифовСкладскаяОперация, ДокументОбъект, ДопПараметры, ПараметрыВыработкиТарифов);
	
	Возврат ПараметрыВыработкиТарифовСкладскаяОперация;
	
КонецФункции

Процедура ПересчитатьСтрокуПоСкидкамНаценкам(СтрокаТабличнойЧасти, флПлан, УчитыватьНДС, СуммаВключаетНДС)
	Если флПлан Тогда
		СтрокаТабличнойЧасти.СуммаСкидкиПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан *
			СтрокаТабличнойЧасти.ПроцентСкидки / 100;
		СтрокаТабличнойЧасти.СуммаПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан -
			СтрокаТабличнойЧасти.СуммаСкидкиПлан;
	Иначе
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена *
			СтрокаТабличнойЧасти.ПроцентСкидки / 100;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена -
			СтрокаТабличнойЧасти.СуммаСкидки;
	КонецЕсли;
		
	Если УчитыватьНДС И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		Если флПлан Тогда
			СтрокаТабличнойЧасти.СуммаНДСПлан = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПлан,
				Истина, СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
				Истина, СуммаВключаетНДС, уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	Иначе
		Если флПлан Тогда
			СтрокаТабличнойЧасти.СуммаНДСПлан = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтобратьТарифыПроцентомПоПервымЗаказам(мсвТарифыПроцентом, ДокументОбъект)
	флЕстьОграничениеКоличествоПервыхЗаказов = Ложь;
	Для Каждого ТекТариф Из мсвТарифыПроцентом Цикл
		Если ТекТариф.КоличествоПервыхЗаказовНаТС > 0 Тогда
			флЕстьОграничениеКоличествоПервыхЗаказов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ флЕстьОграничениеКоличествоПервыхЗаказов Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|	И уатЗаказГрузоотправителя.Дата < &ДатаСреза
	|	И уатЗаказГрузоотправителя.Ссылка <> &ДокументСсылка
	|	И уатЗаказГрузоотправителя.ДоговорКонтрагента = &ДоговорКонтрагента");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДокументОбъект.Дата = '00010101', ТекущаяДата(), ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаказов = ВыборкаЗаказы.Количество() + 1;
	
	Сч = мсвТарифыПроцентом.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекТариф = мсвТарифыПроцентом[Сч];
		Если ТекТариф.КоличествоПервыхЗаказовНаТС > 0 И КоличествоЗаказов > ТекТариф.КоличествоПервыхЗаказовНаТС Тогда
			мсвТарифыПроцентом.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
КонецПроцедуры

Функция ИмяДокумента(ДокументОбъект)
	Если ТипЗнч(ДокументОбъект)  = Тип("Структура") Тогда
		Рез = ДокументОбъект.ИмяДокумента;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		Рез = ДокументОбъект.Ссылка.Метаданные().Имя;
	Иначе
		Рез = ДокументОбъект.Метаданные().Имя;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

#КонецОбласти

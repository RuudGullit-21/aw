
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПодписок

// Процедура - Обработка проведения путевого листа
//
// Параметры:
//  Источник		 - ОпределяемыйТип.ItobПутевойЛистОбъект - источник события.
//	Отказ			 - Булево - Флаг отказа.
//  РежимПроведения	 - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведенияПутевогоЛиста(Источник, Отказ, РежимПроведения) Экспорт
	
	ИспользоватьОбработчикЦСМ = Истина;
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		ItobЦентрСпутниковогоМониторингаПереопределяемый.ОбработкаПроведенияПутевогоЛиста(Источник, Отказ, РежимПроведения, ИспользоватьОбработчикЦСМ);	
	КонецЕсли; 
	
	Если ИспользоватьОбработчикЦСМ Тогда		
		ДвиженияПоСвойствамПЛ(Источник, Отказ, РежимПроведения);
		
		// Подсистема ItobУчетГСМ
		Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.УчетГСМ") Тогда
			МодульУчетГСМ = ОбщегоНазначения.ОбщийМодуль("ItobУчетГСМ");
			МодульУчетГСМ.ОбработкаПроведенияПутевогоЛистаГСМ(Источник, Отказ, РежимПроведения);
		КонецЕсли;
		// Конец Подсистема ItobУчетГСМ
	КонецЕсли;
	
	// ItobЦентрСпутниковогоМониторинга.ПланФакт. 
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
		Если МодульПланФакт.ПодключатьМаршрутныеЗаданияКПланФактуПриПроведении() Тогда
			АктуальныйСтатус = МодульПланФакт.АктуальныйСтатусПутевогоЛиста(Источник.Ссылка);
			Если АктуальныйСтатус = Перечисления["ItobСтатусыВыполненияПутевыхЛистов"].Открыт Тогда
				МодульПланФакт.НачатьУчетПланФактаДляПутевыхЛистов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка));	
			КонецЕсли; 	
		КонецЕсли;
	КонецЕсли;
	// Конец ItobЦентрСпутниковогоМониторинга.ПланФакт.

КонецПроцедуры

// Процедура - Обработка удаления проведения путевого листа
//
// Параметры:
//  Источник - ОпределяемыйТип.ItobПутевойЛистОбъект -  источник события. 
//	Отказ	 - Булево - Флаг отказа.
//
Процедура ОбработкаУдаленияПроведенияПутевогоЛиста(Источник, Отказ) Экспорт
	
	ИспользоватьОбработчикЦСМ = Истина;
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		ItobЦентрСпутниковогоМониторингаПереопределяемый.ОбработкаУдаленияПроведенияПутевогоЛиста(Источник, Отказ, ИспользоватьОбработчикЦСМ);	
	КонецЕсли; 
	
	Если ИспользоватьОбработчикЦСМ Тогда
		ОчиститьДвиженияПоСвойствамПЛ(Источник, Отказ);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Запись путевого листа
//
// Параметры:
//  Источник - ОпределяемыйТип.ItobПутевойЛистОбъект - источник события. 
//  Отказ	 - Булево- Флаг отказа.
//
Процедура ЗаписьПутевогоЛиста(Источник, Отказ) Экспорт
	
	ИспользоватьОбработчикЦСМ = Истина;
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		ItobЦентрСпутниковогоМониторингаПереопределяемый.ЗаписьПутевогоЛиста(Источник, Отказ, ИспользоватьОбработчикЦСМ);	
	КонецЕсли; 
	
	Если ИспользоватьОбработчикЦСМ Тогда
		Если ItobОбщегоНазначения.ЭтоЗаписьОбъектаПриЗагрузкеВМоделиСервиса(Источник) Тогда
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(Источник.ТранспортноеСредство) Тогда
			ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю("Необходимо заполнить реквизит ""Транспортное средство""!",,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияПутевогоЛиста(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
		Если МодульПланФакт.ПланФактИспользуется() Тогда
			ПроверкаДанныхПланФактаПутевогоЛиста(Источник, Отказ, ПроверяемыеРеквизиты);	
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти 

// Процедура - Установить актуальное имя путевого листа в тексте запроса
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура УстановитьАктуальноеИмяПутевогоЛистаВТекстеЗапроса(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
							   "Документ.ItobПутевойЛист", 
							   "Документ." + ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПутевойЛист"));	
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ДвиженияПоСвойствамПЛ(Источник, Отказ, РежимПроведения) Экспорт
	
	ЗаписатьМаршрутыТочки(Источник, Отказ);

	РегистрыСведений.ItobСвойстваМаршрутныхЗаданий.ОтразитьСвойстваМаршрута(Источник.Ссылка, Отказ);  // В ЦСМ передаем ссылку. В другой конфигурации - структуру.
	                       			
КонецПроцедуры

Процедура ОчиститьДвиженияПоСвойствамПЛ(Источник, Отказ) Экспорт
	
	ОчиститьМаршрутыТочки(Источник, Отказ);
	
	РегистрыСведений.ItobСвойстваМаршрутныхЗаданий.ОтразитьСвойстваМаршрута(Источник.Ссылка, Отказ, Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
		МодульПланФакт.ОчиститьВсеДвиженияПоПутевымЛистам(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка));
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура ЗаписатьМаршрутыТочки(Источник, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ItobМаршрутыТочки.СоздатьНаборЗаписей();
	Набор.Отбор.МаршрутноеЗадание.Установить(Источник.Ссылка);
	
	Порядок = 0;
	Если ЗначениеЗаполнено(Источник.ТочкаНачалаМаршрута) Тогда		
	    Запись = Набор.Добавить();
		Запись.МаршрутноеЗадание = Источник.Ссылка;
		Запись.ИдентификаторТочки = Источник.ТочкаНачалаМаршрутаИдентификатор;
		Запись.Порядок = Порядок;
		Запись.ТипТочки	= Перечисления.ItobТипыТочекМаршрута.ТочкаНачала;
		Запись.Адрес = Источник.ТочкаНачалаМаршрута;
		
		Координаты = ItobОбщегоНазначения.ПолучитьЗаписьРегистраСведений("ItobСвойстваПунктовНазначения", "ПунктНазначения", Источник.ТочкаНачалаМаршрута);
		Запись.Широта = Координаты.Широта;
		Запись.Долгота = Координаты.Долгота;
		
		Запись.ПрибытиеПлан = Источник.ДатаВыезда;
		Запись.УбытиеПлан = Источник.ДатаВыезда;		
		Порядок = Порядок + 1;
	КонецЕсли;
	
	Для каждого Точка Из Источник.Состав Цикл		
	    Запись = Набор.Добавить();
		Запись.МаршрутноеЗадание = Источник.Ссылка;
		Запись.ИдентификаторТочки = Точка.ИдентификаторТочки;
		Запись.Порядок = Порядок;
		Запись.ТипТочки = Перечисления.ItobТипыТочекМаршрута.КонтрольнаяТочка;
		Запись.Адрес = Точка.Адрес;
		
		Координаты = ItobОбщегоНазначения.ПолучитьЗаписьРегистраСведений("ItobСвойстваПунктовНазначения", "ПунктНазначения", Точка.Адрес);
		Запись.Широта = Координаты.Широта;
		Запись.Долгота = Координаты.Долгота;
		
		Запись.ПрибытиеПлан = Точка.ПрибытиеПлан;
		Запись.УбытиеПлан = Точка.УбытиеПлан;
		Запись.ПребываниеПлан = ?(Точка.УбытиеПлан - Точка.ПрибытиеПлан <= 0, 0, Точка.УбытиеПлан - Точка.ПрибытиеПлан);
		
		Запись.Контрагент = Точка.Контрагент;
		
		Порядок = Порядок + 1;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Источник.ТочкаКонцаМаршрута) Тогда
	    Запись = Набор.Добавить();
		Запись.МаршрутноеЗадание = Источник.Ссылка;
		Запись.ИдентификаторТочки = Источник.ТочкаКонцаМаршрутаИдентификатор;
		Запись.Порядок = Порядок;
		Запись.ТипТочки	= Перечисления.ItobТипыТочекМаршрута.ТочкаКонца;
		Запись.Адрес = Источник.ТочкаКонцаМаршрута;
		
		Координаты = ItobОбщегоНазначения.ПолучитьЗаписьРегистраСведений("ItobСвойстваПунктовНазначения", "ПунктНазначения", Источник.ТочкаКонцаМаршрута);
		Запись.Широта = Координаты.Широта;
		Запись.Долгота	= Координаты.Долгота;
		
		Запись.ПрибытиеПлан = Источник.ДатаВозвращения;
		Запись.УбытиеПлан = Источник.ДатаВозвращения;		
		Порядок = Порядок + 1;
	КонецЕсли;
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ОчиститьМаршрутыТочки(Источник, Отказ)
	
	Набор = РегистрыСведений.ItobМаршрутыТочки.СоздатьНаборЗаписей();
	Набор.Отбор.МаршрутноеЗадание.Установить(Источник.Ссылка);
	Набор.Записать();
	
КонецПроцедуры

Процедура ПроверкаДанныхПланФактаПутевогоЛиста(Источник, Отказ, ПроверяемыеРеквизиты)
	
	ОбщийМодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	ПроверкаВключенаВНастройках = ОбщийМодульПланФакт.ТребуетсяПроверкаДанныхПланФактаПриПроведенииМаршрутногоЗадания(); 
	ПроверкаТребуетсяВнеЗависимостиОтНастроек = (Источник.ДополнительныеСвойства.Свойство("ПроверитьЗаполнениеДанныхПланФактаПринудительно")
												 И Источник.ДополнительныеСвойства.ПроверитьЗаполнениеДанныхПланФактаПринудительно);
	ТребуетсяПроверкаДанныхПланФакта = (ПроверкаВключенаВНастройках
										ИЛИ ПроверкаТребуетсяВнеЗависимостиОтНастроек);	
	Если НЕ ТребуетсяПроверкаДанныхПланФакта Тогда
		Возврат;	
	КонецЕсли;

	ИспользоватьОбработчикЦСМ = Истина;
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		ОбщийМодульПланФактПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ItobПланФактПереопределяемый");
		ОбщийМодульПланФактПереопределяемый.ОбработкаПроверкиЗаполненияДанныхПланФактаПутевогоЛиста(Источник, 
																							 Отказ, 
																							 ПроверяемыеРеквизиты, 
																							 ИспользоватьОбработчикЦСМ);	
	КонецЕсли; 

	Если ИспользоватьОбработчикЦСМ Тогда		
		ПроверитьЗаполнениеДанныхПланФактаВПутевомЛисте(Источник, Отказ, ПроверяемыеРеквизиты);		
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПроверитьЗаполнениеДанныхПланФактаВПутевомЛисте(Источник, Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ТерминалДляПланФакта");
	ПроверяемыеРеквизиты.Добавить("ТранспортноеСредство");
	ПроверяемыеРеквизиты.Добавить("Водитель");
	ПроверяемыеРеквизиты.Добавить("ДатаВыезда");
	ПроверяемыеРеквизиты.Добавить("ДатаВозвращения");	
	ПроверяемыеРеквизиты.Добавить("Состав");
	
КонецПроцедуры
 
#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// Общего назначения (клиент)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОписанийОповещений
	
// Процедура - обработка события "ООПустая".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ООПустая(Результат, ДополнительныеПараметры) Экспорт
	// Пустая обработка оповещения.
КонецПроцедуры // ООПустая() 

// Процедура - обработчик события "ОписаниеОповещенияОбратнаяОповестить".
// Общая процедура для одинаковых объектов описания оповещения.
// Необходимо в дополнительные параметры добавить текстовый параметр "Процедура".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ОписаниеОповещенияОбратнаяОповестить(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено И ДополнительныеПараметры.Свойство("Процедура") Тогда
		Оповестить(ДополнительныеПараметры.Процедура, Результат);
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "ООВыбратьЦвет".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ООВыбратьЦвет(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		пЭтотОбъект         = ДополнительныеПараметры.ЭтотОбъект;
		Попытка
		    Объект 			= пЭтотОбъект.Объект;
			Ссылка 			= Объект.Ссылка;
		Исключение
		    Объект 			= пЭтотОбъект.Запись.Объект;
			Ссылка			= Объект;
		КонецПопытки; 
		ЭтаФорма 			= пЭтотОбъект.ЭтаФорма;
		ПодчиненныйОбъект 	= ДополнительныеПараметры.ПодчиненныйОбъект;
		
		Результат = ПолучитьАбсолютныйЦвет(Результат);
        
		УстановитьЦветМаршрутаНаКарте(пЭтотОбъект, Результат, ПодчиненныйОбъект);
		УстановитьВидимостьСправочниковВодителиТС(пЭтотОбъект);
			
		ЭтаФорма.Модифицированность = Истина;	
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ООВыбратьЦветНадписиПунктаНазначения".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ООВыбратьЦветНадписиПунктаНазначения(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		НовыйЦвет = ПолучитьАбсолютныйЦвет(Результат);
		Если НовыйЦвет.Вид = ВидЦвета.Абсолютный Тогда
			ДополнительныеПараметры.ЭтотОбъект[ДополнительныеПараметры.ПодчиненныйОбъект] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
				НовыйЦвет.Красный, НовыйЦвет.Зеленый, НовыйЦвет.Синий);
			Оповестить("УстановитьВидимость");		
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбораРасписания".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ОбработкаВыбораРасписания(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ Результат = Неопределено Тогда
		ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
		
		ЭтаФорма.Расписание = Результат;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "ОтветНаВопросСортировка".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ОтветНаВопросСортировка(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы = ДополнительныеПараметры.ЭтаФорма.Элементы;
		Объект = ДополнительныеПараметры.Объект;
		
		Объект.Показатели.Сортировать("Вход");	
		Элементы.Показатели.Обновить();
		
		ДополнительныеПараметры.ЭтаФорма.ПроверитьСортировку = Ложь;
		ДополнительныеПараметры.ЭтаФорма.Записать();
	КонецЕсли;
	Если ДополнительныеПараметры.ЭтаФорма.ЗакрываемФорму Тогда
	    ДополнительныеПараметры.ЭтаФорма.Закрыть();
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ООДиалогОткрытияФайла".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ООДиалогОткрытияФайла(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ИзменяемоеПоле = ДополнительныеПараметры.ИзменяемоеПоле;
		Объект = ДополнительныеПараметры.Объект;
		
		Объект[ИзменяемоеПоле] = Результат[0];
	КонецЕсли; 
КонецПроцедуры // ООДиалогОткрытияФайла()

// Процедура - обработчик события "ОписаниеОповещенияОчиститьКешГеокодераВопрос".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ОписаниеОповещенияОчиститьКешГеокодераВопрос(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
		
		ItobОбщегоНазначенияВызовСервера.ОчиститьЗаписиРегистров();
		ПоказатьПредупреждение(,НСтр("ru = 'Содержимое регистров удалено!'")); 
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ООФормаОпределенияПоложенияКнопкаОК".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ООФормаОпределенияПоложенияКнопкаОК(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.КодВозвратаДиалога = КодВозвратаДиалога.ОК Тогда
			Объект 	 = ДополнительныеПараметры.Объект;
			Элементы = ДополнительныеПараметры.Элементы;
			
			Объект.Масштаб = Результат.Масштаб;
			Объект.Широта  = Результат.Широта;
			Объект.Долгота = Результат.Долгота;
			Элементы.НадписьМасштаб.Заголовок = НСтр("ru = 'Первоначальный масштаб :'")+" "+Результат.Масштаб;
			Элементы.НадписьШирота.Заголовок  = НСтр("ru = 'Широта центра карты  :'")+" "+Формат(Результат.Широта,"ЧЦ=10; ЧДЦ=5");
			Элементы.НадписьДолгота.Заголовок = НСтр("ru = 'Долгота центра карты :'")+" "+Формат(Результат.Долгота,"ЧЦ=10; ЧДЦ=5");
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ООФормаОпределенияПоложенияКнопкаОК()

// Процедура - обработчик события "ОбработкаЗакрытияНайтиАдрес".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ОбработкаЗакрытияНайтиАдрес(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		ТекстСкрипта =
			"var Features = new Array;	
			|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.Долгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Результат.Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());			
			|var pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
			|					 graphicWidth: 21,
			|                    graphicHeight: 25,
			|                    graphicXOffset: -10,
			|                    graphicYOffset: -25,
			|                    externalGraphic: """+ДополнительныеПараметры.ВебСсылкаСервер+"img/marker-green.png"",
			|                    graphicOpacity: 1			
			|});			
			|Features.push(pointFeature);
			|geometryLayer.addFeatures(Features);
			|m_map.setCenter(pt, 15);";
		
		ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(ДополнительныеПараметры.Элементы.ПолеHTML, ТекстСкрипта);
		
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "УстановитьИнтервалДиалогПоказан".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура УстановитьИнтервалДиалогПоказан(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ДополнительныеПараметры.ДатаНачала = Результат.ДатаНачала;
		ДополнительныеПараметры.ДатаОкончания = Результат.ДатаОкончания;
		
		Объект = ДополнительныеПараметры.Объект;
		Если Объект.Свойство("ДатаНачала") И Объект.Свойство("ДатаОкончания") Тогда
			Объект.ДатаНачала = Результат.ДатаНачала;
			Объект.ДатаОкончания = Результат.ДатаОкончания;
		ИначеЕсли Объект.Свойство("НачалоПериода") И Объект.Свойство("КонецПериода") Тогда 
			Объект.НачалоПериода = Результат.ДатаНачала;
			Объект.КонецПериода = Результат.ДатаОкончания;	
		ИначеЕсли Объект.Свойство("НачПериода") И Объект.Свойство("КонПериода") Тогда 
			Объект.НачПериода = Результат.ДатаНачала;
			Объект.КонПериода = Результат.ДатаОкончания;	
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "ПутевойЛистОбработатьФормуЗакрытияЗаполнитьПоМаршруту".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ПутевойЛистОбработатьФормуЗакрытияЗаполнитьПоМаршруту(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		ДополнительныеПараметры.Объект.Маршрут = Результат;
		Если НЕ Результат.Пустая() Тогда
			Оповестить("Документ_ПутевойЛист_ЗаполнитьПоМаршруту");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "ПутевойЛистОбработатьВопросЗаполнитьПоМаршруту".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ПутевойЛистОбработатьВопросЗаполнитьПоМаршруту(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповестить("Документ_ПутевойЛист_ЗаполнитьПоМаршруту");
	КонецЕсли; 
КонецПроцедуры 

// Процедура - обработчик события "ОписаниеОповещенияОбработкаРасшифровкиАнализаРасходаТоплива".
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  НеизвестныйПараметр	 - Неопределено	 - Неизвестный параметр, всегда неопределено.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ОписаниеОповещенияОбработкаРасшифровкиАнализаРасходаТоплива(Результат, НеизвестныйПараметр, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Оповестить(ДополнительныеПараметры.Процедура, Новый Структура("Результат,ПараметрыОтчета", Результат, ДополнительныеПараметры.ПараметрыОтчета));
	КонецЕсли;
КонецПроцедуры 

// Процедура - обработчик события "ВыбранОбъектМониторинга"
//
// Параметры:
//  Результат				 - Произвольный	 - Результат выполнения процедуры.
//  ДополнительныеПараметры	 - Произвольный	 - Содержит дополнительные параметры.
//  	При вызове передается в указанную процедуру последним параметром.
//
Процедура ВыбранОбъектМониторинга(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Оповестить("ВыбранОбъектМониторинга", Результат);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиВыбораПериода

// Процедура - обработчик команды "УстановитьИнтервал".
//
// Параметры:
//  Объект		 - Объект - Объект.
//  НачПериода	 - Дата	  - Содержит дату, которая будет использоваться в качестве начала периода.
//  КонПериода	 - Дата	  - Содержит дату, которая будет использоваться в качестве конца периода.
//
Процедура УстановитьИнтервал(Объект, НачПериода, КонПериода) Экспорт
	 
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьИнтервалДиалогПоказан", 
		   												   ItobОбщегоНазначенияКлиент, 
														   Новый Структура("Объект, ДатаНачала, ДатаОкончания", 
														   				   Объект, НачПериода, КонПериода));
	
	УстановитьИнтервалДляОписанияОповещения(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Процедура - Установить интервал для описания оповещения
//
// Параметры:
//  ОписаниеОповещенияОЗакрытии	 - ОписаниеОповещения - описание оповещения.  
//
Процедура УстановитьИнтервалДляОписанияОповещения(ОписаниеОповещенияОЗакрытии) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;	
	Диалог.Период.ДатаНачала = ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.ДатаНачала;
	Диалог.Период.ДатаОкончания = ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.ДатаОкончания;
	
	Диалог.Показать(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры
 

// Обрабатывает изменение даты периода.
//
// Параметры:
//  Период				 - Дата		 - Период для изменения.
//  Направление			 - Число	 - Направление изменения периода.
//  СтандартнаяОбработка - Булево	 - СтандартнаяОбработка.
//
Процедура ИзменениеПериодаРегулирование(Период, Направление, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Период = Период + Направление*24*3600;	
КонецПроцедуры

// Обрабатывает выбор даты конца периода.
//
// Параметры:
//  Элемент				 - ПолеФормы - Поле формы конца периода.
//  Период				 - Дата		 - Период для изменения.
//  ВыбранноеЗначение	 - Дата		 - Выбранная дата периода.
//  СтандартнаяОбработка - Булево	 - СтандартнаяОбработка.
//
Процедура КонецПериодаОбработкаВыбора(Элемент, Период, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;	
	
	ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	Период = ВыбранноеЗначение;
КонецПроцедуры

#КонецОбласти 

// Процедура "УстановитьВидимостьСправочниковВодителиТС".
//
// Параметры:
//  пЭтотОбъект		 - УправляемаяФорма	 - Редактируема форма.
//
Процедура УстановитьВидимостьСправочниковВодителиТС(пЭтотОбъект) Экспорт

	Элементы = пЭтотОбъект.ЭтаФорма.Элементы;
	ТекущийЦвет = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
		пЭтотОбъект.ЦветМаршрутаНаКарте);
	
	Элементы.КнопкаВыбратьЦвет.ЦветФона = ТекущийЦвет;
	Элементы.КнопкаВыбратьЦвет.ЦветТекста = Новый Цвет(
		255-ТекущийЦвет.Красный, 255-ТекущийЦвет.Зеленый, 255-ТекущийЦвет.Синий);
		
	ТекущийЦветН = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
		пЭтотОбъект.ЦветНадписиНаКарте);
	
	Элементы.ВыбратьЦветНадписи.ЦветФона = ТекущийЦветН;
	Элементы.ВыбратьЦветНадписи.ЦветТекста = Новый Цвет(
		255-ТекущийЦветН.Красный, 255-ТекущийЦветН.Зеленый, 255-ТекущийЦветН.Синий);	
	
	УстановитьКартинки(пЭтотОбъект);

КонецПроцедуры

// Процедура для открытия формы настройки карт из интерфейса при работе в режиме обычного приложения.
//  (Интеграция ITOB+++).
//
Процедура ОткрытьФормуНастройкиКарт() Экспорт 
 	
	ОткрытьФорму("Обработка.ItobПанельАдминистрированияЦСМ.Форма.РазделНастройкиКарты");

КонецПроцедуры // ОткрытьФормуНастройкиКарт()

// Копирует поля отбора.
//
// Параметры:
//  Отбор		 - ОтборКомпоновкиДанных - Источник.
//  НовыйОтбор	 - ОтборКомпоновкиДанных - Приемник.
//
Процедура УстановитьОтбор(Отбор, НовыйОтбор) Экспорт
	Если НЕ Отбор = Неопределено Тогда
		Для Каждого Элемент Из Отбор.Элементы Цикл
			ТипЗначенияЭлемента = ТипЗнч(Элемент);
			ЭлементКомпоновкиДанных = НовыйОтбор.Элементы.Добавить(ТипЗначенияЭлемента);
			ЗаполнитьЗначенияСвойств(ЭлементКомпоновкиДанных, Элемент);
			Если ТипЗначенияЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				УстановитьОтбор(Элемент,ЭлементКомпоновкиДанных);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры // УстановитьОтбор()

// Функция возвращает признак загрузки HTML документа.
//
// Параметры:
//  ПолеHTML - ПолеФормы - Поле HTML.
// 
// Возвращаемое значение:
//  Булево - Результат загрузки карты.
//
Функция КартаЗагружена(ПолеHTML) Экспорт
	Результат = Ложь;
	
	Если ПолеHTML.Документ = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТекстСкрипта = 
			"try {
			|	document.form.result.value = mapLoaded;
			|}
			|catch(err) {}";
			
		ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(ПолеHTML, ТекстСкрипта);
		Если ПолеHTML.Документ.forms.length > 0 Тогда
			Результат = НРег(ПолеHTML.Документ.form.result.value) = "true";	
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // КартаЗагружена()

#Область ФормированиеОтчетов

// Заполняет параметры формы.
//  Функция вызывается при открытии формы отчета.
//
// Параметры:
//  Отчет	 - ОбъектОтчет	 - Отчет, на форме которой выполняется процедура ПриСозданииНаСервере.
//
Процедура ОтчетПриОткрытии(Отчет) Экспорт
	Если НЕ ЗначениеЗаполнено(Отчет.НачПериода) И НЕ ЗначениеЗаполнено(Отчет.КонПериода) Тогда
		Отчет.НачПериода = ItobОбщегоНазначенияВызовСервера.ПолучитьДатуВремяНачалаОтчетов();
		Отчет.КонПериода = Отчет.НачПериода + 24*3600;
	КонецЕсли;
КонецПроцедуры // ОтчетПриОткрытии()

// Обработка расшифровки поля табличного документа отчета.
//
// Параметры:
//  Расшифровка			 - Произвольный	 - Значение расшифровки точки, серии или значения диаграммы.
//  СтандартнаяОбработка - Булево		 - СтандартнаяОбработка.
//
Процедура ОтчетПолеТабличногоДокументаОбработкаРасшифровки(Расшифровка, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Оповестить("РежимМаршрута", Расшифровка);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры // ОтчетПолеТабличногоДокументаОбработкаРасшифровки()

#КонецОбласти 

#Область ПрисутствуетВызовСервера
	
// Показывает панель географической карты,
//  выполняя при этом необходимые проверки доступности сервиса CsmSvc.
//
// Параметры:
//  ЭтаФорма		 - УправляемаяФорма	 - Редактируемая форма.
//
Процедура ПоказатьГеографическуюКарту(ЭтаФорма) Экспорт
	
	ПараметрыСеансаItobАдресCsmSvc = ItobОбщегоНазначенияВызовСервера.ПолучитьItobАдресCsmSvc();
	
	Элементы 		= ЭтаФорма.Элементы;
	КартаДоступна 	= ЭтаФорма.КартаДоступна;
	ВебСсылкаСервер = ЭтаФорма.ВебСсылкаСервер;
	ПолеHTML 		= ЭтаФорма.ПолеHTML;
	ТекущийМасштаб 	= ЭтаФорма.ТекущийМасштаб;
	ТекущаяШирота 	= ЭтаФорма.ТекущаяШирота;
	ТекущаяДолгота 	= ЭтаФорма.ТекущаяДолгота;
	
	ОшибкаДоступаНаСервер = Ложь;
	ОписаниеОшибки = "";
			
	Если НЕ ПараметрыСеансаItobАдресCsmSvc.НастройкиОпределены = Истина Тогда
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |В настройках системы не указан адрес сервиса CsmSvc!
						 |Установите службу CsmSvc или проверьте настройки подключения к службе'");
		
	ИначеЕсли НЕ ItobОперативныйМониторингВызовСервера.ПроверитьДоступностьСервисаCsmSvc(
		ПараметрыСеансаItobАдресCsmSvc.СерверАдрес, ПараметрыСеансаItobАдресCsmSvc.СерверПорт) Тогда
		 
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = НСтр("ru = 'Ошибка отображения карты!
						 |Сервис CsmSvc не доступен!
						 |Установите службу CsmSvc или проверьте настройки подключения к службе'");
						 
	КонецЕсли;
					 
	Если ОшибкаДоступаНаСервер Тогда
		Элементы.НадписьОшибкаОтображенияКарты.Заголовок = ОписаниеОшибки;
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["СтраницаОшибкиОтображенияКарты"];
		КартаДоступна = Ложь;
		
	Иначе
		
		СсылкаБазы   = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		
		// Адреса CsmSvc с клиентской стороны
		АдресСервера = ПараметрыСеансаItobАдресCsmSvc.КлиентАдрес;
		ПортСервера  = Формат(ПараметрыСеансаItobАдресCsmSvc.КлиентПорт,"ЧГ=0");
		
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			ВебСсылкаСервер = "https://"+АдресСервера+":"+ПортСервера+"/map/";
		Иначе
			ВебСсылкаСервер = "http://"+АдресСервера+":"+ПортСервера+"/map/";		
		КонецЕсли;		
		
		АтрибутыКарты = "";
		// Необходимо установить координаты по умолчанию
		Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
			АтрибутыКарты = 
				"firstZoom = "+Формат(ТекущийМасштаб,"ЧГ=0")+";
				|firstLat = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+";
				|firstLon = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+";";			
			
		КонецЕсли;
			
		ИмяСлояПоУмолчанию = ItobОбщегоНазначенияВызовСервера.ПрочитатьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию");
		Если ЗначениеЗаполнено(ИмяСлояПоУмолчанию) Тогда
			АтрибутыКарты = АтрибутыКарты + "
				|firstLayerName = """+ИмяСлояПоУмолчанию+""";";
		
		КонецЕсли;
		
		ПолеHTML = ItobОперативныйМониторингВызовСервера.ПолучитьАдресКарты(АтрибутыКарты);
		
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["ГруппаКарта"];
		КартаДоступна = Истина;
	
	КонецЕсли;
	
	ЭтаФорма.КартаДоступна 		= КартаДоступна;
	ЭтаФорма.ВебСсылкаСервер 	= ВебСсылкаСервер;
	ЭтаФорма.ПолеHTML 			= ПолеHTML;
	ЭтаФорма.ТекущийМасштаб 	= ТекущийМасштаб;
	ЭтаФорма.ТекущаяШирота 		= ТекущаяШирота;
	ЭтаФорма.ТекущаяДолгота 	= ТекущаяДолгота;

	
КонецПроцедуры

// Возвращает абсолютный цвет из цвета стиля.
//
// Параметры:
//  Цвет - ЦветСтиля - Цвет.
// 
// Возвращаемое значение:
//  Цвет - Абсолютный цвет.
//
Функция ПолучитьАбсолютныйЦвет(Цвет) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ItobОбщегоНазначения.ПолучитьАбсолютныйЦвет(Цвет);
	#Иначе 	
		Возврат ItobОбщегоНазначенияВызовСервера.ПолучитьАбсолютныйЦвет(Цвет);
	#КонецЕсли
КонецФункции

// Возвращает список параметров отчета.
//
// Параметры:
//  ЭтотОбъект		 - УправляемаяФорма	 - Редактируемая форма.
//  ПараметрыОтчета	 - Структура		 - Параметры отчета.
// 
// Возвращаемое значение:
//  Структура - Параметры отчета.
//
Функция СобратьДанныеДляПостроенияОтчета(ЭтотОбъект, ПараметрыОтчета = Неопределено) Экспорт
	
	Объект = ЭтотОбъект.Объект;
	Элементы = ЭтотОбъект.Элементы;
	ТекущийРежим = ЭтотОбъект.ИмяТекущегоРежима;
	
	НачалоОтчета = Объект.ДатаНачала;
	КонецОтчета  = Объект.ДатаОкончания;
	
	Если ТекущийРежим = "OnLineСлежение" Тогда
		ИмяЭлемента  = "ДеревоОбъектовМониторинга";
		ItobОбщегоНазначенияВызовСервера.ПолучитьИнтервалСогласноПерсональнымНастройкам(Объект.ДатаНачала, НачалоОтчета, КонецОтчета);
	Иначе
		ИмяЭлемента  = "ДеревоОбъектовМаршруты";
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для просмотра отчета выберите в списке только один объект.'"));
		Возврат Неопределено;
	КонецЕсли;
		
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно открыть отчет для выбранного объекта.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийОбъект  = ТекущиеДанные.Объект;
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(НачалоОтчета,"НачПериода");
	СписокПараметров.Добавить(КонецОтчета,"КонПериода");
	СписокПараметров.Добавить(ТекущийОбъект,"Объект"); // Fixit объект добавлен 2 раза
	
	Если ПараметрыОтчета = Неопределено Тогда
		ПараметрыОтчета = Новый Структура();
	КонецЕсли; 
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	ПараметрыОтчета.Вставить("Терминал", ТекущиеДанные.Терминал);
	ПараметрыОтчета.Вставить("Объект", ТекущийОбъект);
	
	Возврат ПараметрыОтчета;

КонецФункции // СобратьДанныеДляПостроенияОтчета()

#КонецОбласти

// Возвращает текущую дату на клиенте.
// 
// Возвращаемое значение:
//  Дата - Текущую дату на клиенте.
//
Функция ТекущаяДатаНаКлиенте() Экспорт
	Возврат МестноеВремя('00010101'+(ТекущаяУниверсальнаяДатаВМиллисекундах()/1000));
КонецФункции // ТекущаяДатаНаКлиенте()

// Создает структура с параметрами формы владельца.
// 
// Возвращаемое значение:
//  Структура - Параметры формы владельца.
//
Функция СоздатьПараметрыФормыВладельца() Экспорт
	
	Возврат Новый Структура("Владелец, КлючУникальности, Окно", Неопределено, Неопределено, Неопределено);
	
КонецФункции // СоздатьПараметрыФормыВладельца()
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрисутствуетВызовСервера
	
// Процедура "УстановитьЦветМаршрутаНаКарте"
//
Процедура УстановитьЦветМаршрутаНаКарте(Объект, НовыйЦвет, ИмяРеквизита)
	
	Если НовыйЦвет.Вид = ВидЦвета.Абсолютный Тогда
		Объект[ИмяРеквизита] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
		НовыйЦвет.Красный, НовыйЦвет.Зеленый, НовыйЦвет.Синий);
	ИначеЕсли НовыйЦвет.Вид = ВидЦвета.WebЦвет Тогда
		
		Макет = ItobОбщегоНазначенияВызовСервера.ПолучитьМакет("ItobWebЦвета");
		Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
			Если НовыйЦвет = WebЦвета[Макет.Область(НомерСтроки,1).Текст] Тогда
				Объект[ИмяРеквизита] = ItobОбщегоНазначенияКлиентСервер.ПолучитьЗначениеХраненияЦвета(
				Макет.Область(НомерСтроки,2).Текст, 
				Макет.Область(НомерСтроки,3).Текст, 
				Макет.Область(НомерСтроки,4).Текст );
	
			КонецЕсли;			
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

Процедура УстановитьКартинки(пЭтотОбъект)
	
	пЭтотОбъект.АдресИконки = ПолучитьНавигационнуюСсылку(пЭтотОбъект.ИконкаНаКарте, "Иконка");
	пЭтотОбъект.АдресДополнительнойИконки = ПолучитьНавигационнуюСсылку(пЭтотОбъект.ДополнительнаяИконкаНаКарте, "Иконка");
	
КонецПроцедуры

#КонецОбласти

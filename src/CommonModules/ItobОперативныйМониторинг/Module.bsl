////////////////////////////////////////////////////////////////////////////////
// Оперативный мониторинг (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет адрес CsmSvc.
//
// Параметры:
//  СтрокаСоединенияКлиента	 - Строка	 - Строка соединения клиента.
// 
// Возвращаемое значение:
//  Неопределено - Неопределено.
//
Функция ОпределитьАдресCsmSvc(СтрокаСоединенияКлиента) Экспорт 
	
	ТекСтрокаСоединенияКлиента = НРег(СтрокаСоединенияКлиента);
	
	СерверАдрес = "127.0.0.1";
	СерверПорт = 8091;
	КлиентАдрес = СерверАдрес;
	КлиентПорт = СерверПорт;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobСервисыCsmSvc.ВидОбращения,
	               |	ItobСервисыCsmSvc.СерверОбращения,
	               |	ItobСервисыCsmSvc.АдресCsmService,
	               |	ItobСервисыCsmSvc.ПортCsmService
	               |ИЗ
	               |	РегистрСведений.ItobСервисыCsmSvc КАК ItobСервисыCsmSvc";
				   
	Таб = Запрос.Выполнить().Выгрузить();
	Таб.Колонки.Добавить("Приоритет");
	
	КоличествоЗаписей = Таб.Количество();
	
	МассивУдаления = Новый Массив;
	
	Для каждого СтрТаб Из Таб Цикл
		Если СтрТаб.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Клиент Тогда
			Если ПустаяСтрока(СтрТаб.СерверОбращения) Тогда
				СтрТаб.Приоритет = 10;
				
			ИначеЕсли Найти(ТекСтрокаСоединенияКлиента,НРег(СтрТаб.СерверОбращения)) > 0 Тогда
				СтрТаб.Приоритет = 0;
				
			Иначе
				МассивУдаления.Добавить(СтрТаб);				
			
			КонецЕсли;
			
		Иначе
			СтрТаб.Приоритет = 0;			
		
		КонецЕсли;	
	КонецЦикла;	
	
	Для каждого СтрУдаления Из МассивУдаления Цикл
		Таб.Удалить(СтрУдаления);	
	
	КонецЦикла;
	
	Таб.Сортировать("Приоритет Возр");
	НайденнаяСтрока = Таб.Найти(Перечисления.ItobВидыОбращенияCsmSvc.Сервер, "ВидОбращения");
	Если НайденнаяСтрока <> Неопределено Тогда
		СерверАдрес = НайденнаяСтрока.АдресCsmService;
		СерверПорт = НайденнаяСтрока.ПортCsmService;				
	
	КонецЕсли;
	
	НайденнаяСтрока = Таб.Найти(Перечисления.ItobВидыОбращенияCsmSvc.Клиент, "ВидОбращения");
	Если НайденнаяСтрока <> Неопределено Тогда
		КлиентАдрес = НайденнаяСтрока.АдресCsmService;
		КлиентПорт = НайденнаяСтрока.ПортCsmService;				
		
	Иначе
		КлиентАдрес = СерверАдрес;
		КлиентПорт = СерверПорт;	
	
	КонецЕсли;
			
	СоотвАдрес = Новый Соответствие;
	СоотвАдрес.Вставить("СерверАдрес", СерверАдрес);
	СоотвАдрес.Вставить("СерверПорт" , СерверПорт);
	СоотвАдрес.Вставить("КлиентАдрес", КлиентАдрес);
	СоотвАдрес.Вставить("КлиентПорт" , КлиентПорт);
	СоотвАдрес.Вставить("НастройкиОпределены", КоличествоЗаписей > 0);	
	
	ПараметрыСеанса.ItobАдресCsmSvc = Новый ФиксированноеСоответствие(СоотвАдрес);

КонецФункции // ОпределитьАдресCsmSvc()

#Область ФункцииОбщегоНазначения

// Процедура - обработчик регламентного задания "ItobВыполнениеНазначеннойКоманды".
//
// Параметры:
//  НазначеннаяКоманда	 - СправочникСсылка.ItobНазначенныеКоманды	 - Назначенная команда.
//
Процедура РегламентноеЗаданиеВыполнениеКоманды(НазначеннаяКоманда) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ЗначениеЗаполнено(НазначеннаяКоманда) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'НазначеннаяКоманда'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'РегламентноеЗаданиеВыполнениеКоманды, не указана команда'"));
		Возврат;	
	КонецЕсли;	
	
	// Формируем запрос к БД
	
	Запрос = Новый Запрос;
	
	СтрокаВыборкаЗапроса = "";
	СтрокаСоединенияЗапроса = "";
	
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.УстановитьПараметр("НазначеннаяКоманда", НазначеннаяКоманда);
	ЗапросПоказатели.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                         |	ItobНазначенныеКомандыУсловияОтбора.Показатель.Ссылка КАК Ссылка,
	                         |	ItobНазначенныеКомандыУсловияОтбора.Показатель.Код КАК Код
	                         |ИЗ
	                         |	Справочник.ItobНазначенныеКоманды.УсловияОтбора КАК ItobНазначенныеКомандыУсловияОтбора
	                         |ГДЕ
	                         |	ItobНазначенныеКомандыУсловияОтбора.Показатель ССЫЛКА Справочник.ItobНазначенияДатчиков
	                         |	И ItobНазначенныеКомандыУсловияОтбора.Ссылка = &НазначеннаяКоманда";
							 
	ВыборкаПоказатели = ЗапросПоказатели.Выполнить().Выбрать();
	Пока ВыборкаПоказатели.Следующий() Цикл
		
		ТекущийКод = СокрЛП(ВыборкаПоказатели.Код);
		
		СтрокаВыборкаЗапроса = СтрокаВыборкаЗапроса + "
			|	ItobТерминалыДатчики"+ТекущийКод+".Датчик.Код КАК КодДатчикаНазначение"+ТекущийКод+",";
		
		СтрокаСоединенияЗапроса = СтрокаСоединенияЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики"+ТекущийКод+"
			|ПО (ItobАктуальностьДанныхТерминалов.Терминал = ItobТерминалыДатчики"+ТекущийКод+".Ссылка)
			|	И (ItobТерминалыДатчики"+ТекущийКод+".Назначение = &Назначение"+ТекущийКод+")";			
		
		Запрос.УстановитьПараметр("Назначение"+ТекущийКод, ВыборкаПоказатели.Ссылка);	
			
	КонецЦикла;
	
	// Учет условий
	
	ЗапросУсловия = Новый Запрос;
	ЗапросУсловия.УстановитьПараметр("НазначеннаяКоманда", НазначеннаяКоманда);
	ЗапросУсловия.Текст = "ВЫБРАТЬ
						  |	ItobНазначенныеКомандыУсловияОтбора.Показатель,
						  |	ItobНазначенныеКомандыУсловияОтбора.ВидСравнения,
						  |	ItobНазначенныеКомандыУсловияОтбора.Значение
						  |ИЗ
						  |	Справочник.ItobНазначенныеКоманды.УсловияОтбора КАК ItobНазначенныеКомандыУсловияОтбора
						  |ГДЕ
						  |	ItobНазначенныеКомандыУсловияОтбора.Ссылка = &НазначеннаяКоманда";
	ТаблицаУсловийКоманды = ЗапросУсловия.Выполнить().Выгрузить(); 					  
		
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодUTC0", ТекущаяУниверсальнаяДата());	
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());
	Запрос.УстановитьПараметр("НазначеннаяКоманда", НазначеннаяКоманда);
	Запрос.УстановитьПараметр("ВыполнитьКоманду", НазначеннаяКоманда.ВыполнитьКоманду);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПривязкиТрекеровСрезПоследних.Объект КАК Объект,
	               |	ItobПривязкиТрекеровСрезПоследних.Терминал КАК Терминал,
				   |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Долгота, 0) КАК Долгота,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) КАК Скорость,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Направление, 0) КАК Направление,
				   |	ВЫБОР КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
				   |		ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение) 
			       |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка) 
				   |	КОНЕЦ КАК Состояние,
				   |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя,&ПериодUTC0,МИНУТА) КАК ОтсутствуютДанныеМинуты,
				   |	РАЗНОСТЬДАТ(ItobАктуальностьДанныхТерминалов.ДатаВремя,&ПериодUTC0,ЧАС) КАК ОтсутствуютДанныеЧасы,
	               |	ItobАктуальностьДанныхТерминалов.ДатаВремя КАК ПериодUTC0,
				   |	ItobПараметрыКомандДляТерминалов.Содержание КАК СодержаниеКоманды,
				   |	"+СтрокаВыборкаЗапроса+"
				   |	ItobАктуальностьДанныхТерминалов.ДанныеДатчиков КАК ДанныеДатчиков
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&Период,) КАК ItobПривязкиТрекеровСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	               |		ПО ItobПривязкиТрекеровСрезПоследних.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobПараметрыКомандДляТерминалов КАК ItobПараметрыКомандДляТерминалов
				   |		ПО ItobПараметрыКомандДляТерминалов.МодельТерминала = ItobПривязкиТрекеровСрезПоследних.Терминал.Модель
				   |			И ItobПараметрыКомандДляТерминалов.Команда = &ВыполнитьКоманду
				   |		"+СтрокаСоединенияЗапроса+"
	               |ГДЕ (НЕ ItobПараметрыКомандДляТерминалов.Содержание ЕСТЬ NULL) 
				   |	И ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен"+?(НазначеннаяКоманда.ОтборПоТрекерам," И ItobПривязкиТрекеровСрезПоследних.Терминал В (ВЫБРАТЬ Терминал ИЗ Справочник.ItobНазначенныеКоманды.Трекеры ГДЕ Ссылка = &НазначеннаяКоманда)","") ;
			
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтборКомандыВыполняется = Истина;
		Для каждого СтрУсловие Из ТаблицаУсловийКоманды Цикл
			
			ОтборКомандыВыполняется = УсловиеНазначеннойКомандыВыполняется(Выборка, СтрУсловие.Показатель, 
						СтрУсловие.ВидСравнения, СтрУсловие.Значение);
			
			Если НЕ ОтборКомандыВыполняется Тогда
		
				Прервать;
		
			КонецЕсли;						
		
		КонецЦикла;
		
		Если НЕ ОтборКомандыВыполняется Тогда
			Продолжить;		
		КонецЕсли;		
		
		ТекстОшибки = "";
		
		// Подсистема ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров
		ВыполнитьКомандуНаСервере(Выборка.Терминал, Выборка.СодержаниеКоманды, ТекстОшибки);		
	
	КонецЦикла;

КонецПроцедуры

// Возвращает модель терминала для переданного объекта.
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка - Объект мониторинга.
//  НаДату			 - Дата	- Учетная дата.
// 
// Возвращаемое значение:
//  СправочникСсылка.ItobМоделиТерминалов - Модель терминала.
//
Функция ПолучитьМодельТерминалаПоОбъекту(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Результат = Справочники.ItobМоделиТерминалов.ПустаяСсылка();
	
	Терминал = ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату);
	
	Если ЗначениеЗаполнено(Терминал) Тогда
		Результат = Терминал.Модель;			
	
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьМодельТерминалаПоОбъекту()

// Рассчитывает пробег по переданному массиву точек
//
// Параметры:
//  МассивТочек	 - Массив из Число - Точки.
// 
// Возвращаемое значение:
//  Число - Рассчитанный пробег.
//
Функция ПолучитьПробег(МассивТочек) Экспорт
	
	ОбщееРасстояние = 0;
	Для Счетчик = 1 По МассивТочек.Количество()/2-1 Цикл		
		
		НачШирота = МассивТочек[Счетчик*2-2];
		НачДолгота = МассивТочек[Счетчик*2-1];
		КонШирота = МассивТочек[Счетчик*2];
		КонДолгота = МассивТочек[Счетчик*2+1];
		
		ОбщееРасстояние = ОбщееРасстояние+ПолучитьРасстояниеМеждуТочками(НачШирота, НачДолгота, КонШирота, КонДолгота);
	
	КонецЦикла;	
	
	Возврат ОбщееРасстояние;

КонецФункции // ПолучитьПробег()

// Вычисляет поправочный коэффициент на пробег ТС.
//
// Параметры:
//  МаркаТС	 - СправочникСсылка.ItobМоделиТС		 - Ссылка на марку транспорта.
//  ТС		 - СправочникСсылка.ItobТранспортныеСредства - Ссылка на транспортное средство.
// 
// Возвращаемое значение:
//  Число - Поправочный коэффициент.
//
Функция ПолучитьПоправочныйКоэффициентПробега(МаркаТС, ТС) Экспорт
	
	МассивМаркаТС = Новый Массив;
	МассивТС = Новый Массив;
	
	МассивМаркаТС.Добавить(ItobОбщегоНазначения.ПустаяСсылкаОбъекта("МаркиТранспорта"));
	ПустоеТС = ItobОбщегоНазначения.ПустаяСсылкаОбъекта("ТранспортныеСредства");
	МассивТС.Добавить(ПустоеТС);
	
	Если ЗначениеЗаполнено(МаркаТС) Тогда
		МассивМаркаТС.Добавить(МаркаТС);		
	КонецЕсли;
	
	МассивТС.Добавить(ТС);
	СписокГрупп = ItobОбщегоНазначения.ПолучитьВышеСтоящиеГруппы(ТС);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивТС.Добавить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаркаТранспорта", МассивМаркаТС);
	Запрос.УстановитьПараметр("ТранспортноеСредство", МассивТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПоправочныеКоэффициентыПробега.МаркаТранспорта,
	               |	ItobПоправочныеКоэффициентыПробега.ТранспортноеСредство,
	               |	ItobПоправочныеКоэффициентыПробега.Коэффициент
	               |ИЗ
	               |	РегистрСведений.ItobПоправочныеКоэффициентыПробега КАК ItobПоправочныеКоэффициентыПробега
	               |ГДЕ
	               |	ItobПоправочныеКоэффициентыПробега.МаркаТранспорта В(&МаркаТранспорта)
	               |	И ItobПоправочныеКоэффициентыПробега.ТранспортноеСредство В(&ТранспортноеСредство)";
				   
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.ТранспортноеСредство = ПустоеТС Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = Строка.ТранспортноеСредство.Уровень()+1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, МаркаТранспорта Убыв");
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Результат = ТаблицаЗапроса[0].Коэффициент;
		
	Иначе
		Результат = 1;
		
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьПоправочныйКоэффициентПробега()

// Возвращает ближайший адрес, найденный на карте.
//
// Параметры:
//  Широта						 - Число - Географическая широта координаты точки.
//  Долгота						 - Число - Географическая долгота координаты точки.
//	РадиусФиксацииПоУмолчанию	 - Число - Для ускорения расчетов рекомендуется передать извне значение радиуса прихода на точку по умолчанию
//										   (см. ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку()).
// 
// Возвращаемое значение:
//  Строка - Строковое представление адреса.
//
Функция НайтиБлижайшийАдрес(Широта, Долгота, РадиусФиксацииПоУмолчанию = Неопределено) Экспорт
		
	Возврат ItobРаботаСКартой.ОпределитьБлижайшийОбъектНаКарте(Широта, Долгота, РадиусФиксацииПоУмолчанию);
	
КонецФункции

// Возвращает расстояние между точками.
//
// Параметры:
//  StartLat	 - Число - Начальная широта.
//  StartLong	 - Число - Начальная долгота.
//  EndLat		 - Число - Конечная широта.
//  EndLong		 - Число - Конечная долгота.
// 
// Возвращаемое значение:
//  Число - Расстояние между точками.
//
Функция ПолучитьРасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong) Экспорт
	
	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	
	КонецЕсли;
	
	Возврат ItobCsmHandler.Расстояние(StartLat, EndLat, StartLong, EndLong);	
	
КонецФункции

// Возвращает параметры стоянок для заданного терминала.
//
// Параметры:
//  Терминал - СправочникСсылка.ItobТерминалы	 - Исходные терминал.
// 
// Возвращаемое значение:
//  Структура - Параметры обработки данных терминала.
//
Функция ПолучитьПараметрыОбработкиДанных(Терминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	ItobПараметрыСтоянок.МинимальнаяСкоростьДвижения КАК МинимальнаяСкоростьДвижения,
	|	ItobПараметрыСтоянок.МинимальноеВремяСтоянки КАК МинимальноеВремяСтоянки,
	|	ItobПараметрыСтоянок.МинимальныйИнтервалОтправкиДанных КАК МинимальныйИнтервалОтправкиДанных,
	|	ItobПараметрыСтоянок.ОтключитьНормализациюТочекДвижения КАК ОтключитьНормализациюТочекДвижения,
	|	ItobПараметрыСтоянок.ДопустимыйРадиусСтоянки КАК ДопустимыйРадиусСтоянки,
	|	ItobПараметрыСтоянок.МаксимальнаяВалиднаяСкоростьДвижения КАК МаксимальнаяВалиднаяСкоростьДвижения,
	|	ItobПараметрыСтоянок.ОпределениеДвижения КАК ОпределениеДвижения
	|ИЗ
	|	РегистрСведений.ItobПараметрыОбработкиДанныхТрекеров КАК ItobПараметрыСтоянок
	|ГДЕ
	|	ItobПараметрыСтоянок.Терминал = &Терминал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ItobПараметрыСтоянок.МинимальнаяСкоростьДвижения,
	|	ItobПараметрыСтоянок.МинимальноеВремяСтоянки,
	|	ItobПараметрыСтоянок.МинимальныйИнтервалОтправкиДанных,
	|	ItobПараметрыСтоянок.ОтключитьНормализациюТочекДвижения,
	|	ItobПараметрыСтоянок.ДопустимыйРадиусСтоянки,
	|	ItobПараметрыСтоянок.МаксимальнаяВалиднаяСкоростьДвижения,
	|	ItobПараметрыСтоянок.ОпределениеДвижения
	|ИЗ
	|	РегистрСведений.ItobПараметрыОбработкиДанныхТрекеров КАК ItobПараметрыСтоянок
	|ГДЕ
	|	ItobПараметрыСтоянок.Терминал = ЗНАЧЕНИЕ(Справочник.ItobТерминалы.ПустаяСсылка)
	|	И ItobПараметрыСтоянок.МодельТерминала В
	|			(ВЫБРАТЬ
	|				Справочник.ItobТерминалы.Модель
	|			ИЗ
	|				Справочник.ItobТерминалы
	|			ГДЕ
	|				Справочник.ItobТерминалы.Ссылка = &Терминал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ItobПараметрыСтоянок.МинимальнаяСкоростьДвижения,
	|	ItobПараметрыСтоянок.МинимальноеВремяСтоянки,
	|	ItobПараметрыСтоянок.МинимальныйИнтервалОтправкиДанных,
	|	ItobПараметрыСтоянок.ОтключитьНормализациюТочекДвижения,
	|	ItobПараметрыСтоянок.ДопустимыйРадиусСтоянки,
	|	ItobПараметрыСтоянок.МаксимальнаяВалиднаяСкоростьДвижения,
	|	ItobПараметрыСтоянок.ОпределениеДвижения
	|ИЗ
	|	РегистрСведений.ItobПараметрыОбработкиДанныхТрекеров КАК ItobПараметрыСтоянок
	|ГДЕ
	|	ItobПараметрыСтоянок.Терминал = ЗНАЧЕНИЕ(Справочник.ItobТерминалы.ПустаяСсылка)
	|	И ItobПараметрыСтоянок.МодельТерминала = ЗНАЧЕНИЕ(Справочник.ItobМоделиТерминалов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	Константы.ItobМинимальнаяСкоростьДвижения,
	|	Константы.ItobМинимальноеВремяСтоянки,
	|	3600,
	|	ЛОЖЬ,
	|	Константы.ItobДопустимыйРадиусСтоянки,
	|	250,
	|	ЗНАЧЕНИЕ(Перечисление.ItobМетодыОпределенияДвижения.GpsСкорость)
	|ИЗ
	|	Константы КАК Константы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0 КАК Порядок,
	|	ТерминалыДатчики.Датчик КАК ДатчикЗажигания,
	|	ТерминалыДатчики.Датчик.Код КАК ДатчикЗажиганияКод
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ТерминалыДатчики
	|ГДЕ
	|	ТерминалыДатчики.Ссылка = &Терминал
	|	И ТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Зажигание)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЗНАЧЕНИЕ(Справочник.ItobДатчики.ПустаяСсылка),
	|	0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
				   
	НаборРезультатов = Запрос.ВыполнитьПакет();
	ИндексЗапросаПараметрыОбработкиДанных = 0;
	ИндексЗапросаДатчикЗажигания          = 1;			   
				   
	Выборка = НаборРезультатов[ИндексЗапросаПараметрыОбработкиДанных].Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Результат = СформироватьПараметрыОбработкиДанных(Выборка.МинимальнаяСкоростьДвижения, Выборка.МинимальноеВремяСтоянки,
														 Выборка.МинимальныйИнтервалОтправкиДанных, 
														 Выборка.ОтключитьНормализациюТочекДвижения, Выборка.ДопустимыйРадиусСтоянки, 
														 Выборка.МаксимальнаяВалиднаяСкоростьДвижения, Выборка.ОпределениеДвижения);
		
	Иначе
		Результат = СформироватьПараметрыОбработкиДанных(10, '00010101001000', 3600, Ложь, 0, 250, Перечисления.ItobМетодыОпределенияДвижения.GpsСкорость);
	КонецЕсли;
	
	ВыборкаДатчикЗажигания = НаборРезультатов[ИндексЗапросаДатчикЗажигания].Выбрать();
	ВыборкаДатчикЗажигания.Следующий();
	Результат.Вставить("ДатчикЗажигания",    ВыборкаДатчикЗажигания.ДатчикЗажигания);
	Результат.Вставить("ДатчикЗажиганияКод", ВыборкаДатчикЗажигания.ДатчикЗажиганияКод);
	
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ФункцииРаботыССервисомCsmCvs

// Возвращает адрес сервиса CsmSvc.
// 
// Возвращаемое значение:
//  Строка - Адрес сервиса.
//
Функция ПолучитьАдресСервисаCsmSvcКлиент() Экспорт

	Возврат ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентАдрес")+":"+Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("КлиентПорт"),"ЧГ=0");	

КонецФункции // ПолучитьАдресСервисаCsmSvcКлиент()

// Возвращает адрес сервиса CsmSvc.
// 
// Возвращаемое значение:
//  Строка - Адрес сервиса.
//
Функция ПолучитьАдресСервисаCsmSvcСервер() Экспорт

	Возврат ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес")+":"+Формат(ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт"),"ЧН=; ЧГ=0");	

КонецФункции // ПолучитьАдресСервисаCsmSvcСервер()

// Проверяет доступность сервера CsmSvc
//  При этом запрашивается тестовая страница по протоколу HTTP.
//
// Параметры:
//  АдресСервера - Строка	 - Адрес сервера.
//  ПортСервера	 - Число	 - Порт сервера.
// 
// Возвращаемое значение:
//  Булево - Истина если доступен, Ложь если не доступен.
//
Функция ПроверитьДоступностьСервисаCsmSvc(АдресСервера=Неопределено, ПортСервера=Неопределено) Экспорт
	
	Если АдресСервера = Неопределено Тогда
	 	АдресСервера = ПолучитьАдресСервисаCsmSvcСервер();
	КонецЕсли; 
	
	ПозицияДвиженияТч = Найти(АдресСервера,":"); 
	Если ПозицияДвиженияТч > 0 Тогда
		ИмяСервера = Лев(АдресСервера, ПозицияДвиженияТч-1);
		Порт = Число(Сред(АдресСервера, ПозицияДвиженияТч+1));
		
	Иначе
		ИмяСервера = АдресСервера;
		Порт = ?(ПортСервера=Неопределено, 80, ПортСервера);
	
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ИмяСервера,Порт,,,,10);
	Запрос = Новый HTTPЗапрос("/index.html");
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		Возврат Ответ.КодСостояния = 200;		
		
	Исключение
		Возврат Ложь;
	
	КонецПопытки;	

КонецФункции // ПроверитьДоступностьСервисаCsmSvc()

#КонецОбласти 

#Область ФункцииВзаимодействияСКартой

// Возвращает адрес карты.
//
// Параметры:
//  АтрибутыКарты	 - Строка	 - Атрибуты карты.
//  ДопСкриптHEAD	 - Строка	 - Дополнительный скрипт секции HEAD.
// 
// Возвращаемое значение:
//  Строка - Адрес карты.
//
Функция ПолучитьАдресКарты(АтрибутыКарты = "", ДопСкриптHEAD = "") Экспорт
				
	ТекстОшибкиHTML = ВыполнитьПроверкуCsmSvc();
	Если ЗначениеЗаполнено(ТекстОшибкиHTML) Тогда
		Возврат ТекстОшибкиHTML;	
	КонецЕсли; 
							
	ТекстHTML = ПолучитьОбщийМакет("ItobКарта").ПолучитьТекст();
	
	КонтентКарты = ПолучитьКонтентКарты();
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "// $MAPS", "// $MAPS" + Символы.ПС + КонтентКарты.КонтентMAPS);
	ТекстHTML = СтрЗаменить(ТекстHTML, "// $ATTRIBUTES", "// $ATTRIBUTES" + Символы.ПС + АтрибутыКарты);
	ТекстHTML = СтрЗаменить(ТекстHTML, "<!-- // $HEAD -->", "<!-- // $HEAD -->" + Символы.ПС + КонтентКарты.КонтентHEAD + Символы.ПС + ДопСкриптHEAD);
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда
		// Толстый, или тонкий клиент.
		// В качестве результата выдаем ссылку.
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"$MapServerName","/map");
		Результат = ПолучитьСсылкуНаСтраницуКарты(ТекстHTML);
		
	Иначе
		
		СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			Протокол = "https";
		Иначе
			Протокол = "http";
		КонецЕсли;
		
		АдресСервераОбращениеКлиента = ПолучитьАдресСервисаCsmSvcКлиент();
		
		// Веб клиент, в качестве результата - контент страницы.
		ТекстHTML = СтрЗаменить(ТекстHTML,"$MapServerName",Протокол+"://"+АдресСервераОбращениеКлиента+"/map");
		Результат = ТекстHTML;
		
	КонецЕсли;					
	
	Возврат Результат;

КонецФункции

// Функция - Выполнить проверку csm svc
// 
// Возвращаемое значение:
//	Строка
//
Функция ВыполнитьПроверкуCsmSvc() Экспорт 
	
	Если НЕ ПараметрыСеанса.ItobАдресCsmSvc.Получить("НастройкиОпределены") Тогда
		Результат = "<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<title>Ошибка отображения карты</title>
		|</head>
		|<body>
		|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
		|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
		|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
		|В настройках системы не указан<br>
		|адрес сервера CsmSvc!</font>
		|</div></div></body></html>";
		
		Возврат Результат;
		
	КонецЕсли;
	
	ВерсияCsmSvc = ПолучитьВерсиюCsmSvc();
	ПолныйНомерВерсииЧисло = 0;
	
	Если НЕ ПустаяСтрока(ВерсияCsmSvc) Тогда
		
		Стр2 = СтрЗаменить(ВерсияCsmSvc,".",Символы.ПС);
		
		Редакция = СтрПолучитьСтроку(Стр2,1);
		Подредакция  = СтрПолучитьСтроку(Стр2,2);
		Релиз = СтрПолучитьСтроку(Стр2,3);
		
		ПолныйНомерВерсииЧисло = Редакция*10000 + Подредакция*100 + Релиз;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияCsmSvc) Тогда
		
		АдресСервераОбращениеКлиента = ПолучитьАдресСервисаCsmSvcКлиент();	
		
		Результат = "<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<title>Ошибка отображения карты</title>
		|</head>
		|<body>
		|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
		|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
		|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
		|Не удается запросить номер версии карты,<br /> 
		|проверьте влияние прокси-сервера при обращении к адресу 
		|"+АдресСервераОбращениеКлиента+"/map/map.html</font>
		|</div></div></body></html>";
		
		Возврат Результат;
		
	ИначеЕсли ПолныйНомерВерсииЧисло < 10112 Тогда
		
		СсылкаНаНастройкиКарты = ItobCsmSvcКлиентСервер.ТекстГиперссылкиНастройкиКарты();
		
		Результат = "<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<title>Ошибка отображения карты</title>
		|</head>
		|<body>
		|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
		|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
		|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
		|Требуется версия CsmSvc не ниже 1.1.12<br>" + СсылкаНаНастройкиКарты + "					
		|</font>
		|</div></div></body></html>";
		
		Возврат Результат;			
		
	КонецЕсли;
	
	Возврат "";

КонецФункции

// Размещает файлы на сервере сервиса CsmSvc.
//
// Параметры:
//  ДвДанные - ДвоичныеДанные	 - Zip-файл, отправляемый на сервер.
// 
// Возвращаемое значение:
//  Структура - Результат размещения файлов на сервере сервиса CsmSvc:
//  * Результат - Булево - Результат размещения файлов.
//  * ОписаниеОшибки - Строка - Описание ошибки.
//  * ИмяКаталога - Строка - Имя каталога.
//  * НазваниеКаталога - Строка - Название каталога.
//
Функция РазместитьФайлыНаСервереCsmSvc(ДвДанные) Экспорт
	
	Сервер = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес");
	Порт   = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт");
	
	Результат = Новый Структура();
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИмяКаталога", "");
	Результат.Вставить("НазваниеКаталога", "");
		
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Запрос = Новый HTTPЗапрос("/CreateCacheDir");
	Запрос.УстановитьТелоИзДвоичныхДанных(ДвДанные);
	
	Попытка
		Ответ = HTTP.ВызватьHTTPМетод("POST",Запрос);
		Результат.ИмяКаталога = Ответ.ПолучитьТелоКакСтроку();
		Результат.Результат = Истина;
		
		ИмяКаталога = Результат.ИмяКаталога;
		Если Лев(ИмяКаталога,1) = "/" Тогда
			ИмяКаталога = Сред(ИмяКаталога,2);
		КонецЕсли;
		РазделеннаяСтрока = СтрЗаменить(ИмяКаталога,"/",Символы.ПС);
		Результат.НазваниеКаталога = СтрПолучитьСтроку(РазделеннаяСтрока,2);
		
	Исключение
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка размещения файла на сервере. Убедитесь что служба Csm Service включена.'");
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Удаляет каталог на сервере сервиса CsmSvc.
//
// Параметры:
//  ИмяКаталога	 - Строка	 - Наименование каталога с иконками.
//  ТекстОшибки	 - Строка	 - Текст ошибки.
// 
// Возвращаемое значение:
//  Булево - Результат удаления каталога на сервере.
//
Функция УдалитьКаталогНаСервереCsmSvc(ИмяКаталога, ТекстОшибки = "") Экспорт

	Сервер = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес");
	Порт   = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт");
	Результат = Ложь;
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Запрос = Новый HTTPЗапрос("/RemoveCacheDir?dir="+СокрЛП(ИмяКаталога));
	Попытка
		Ответ = HTTP.ВызватьHTTPМетод("GET",Запрос);
		Результат = СокрЛП(Ответ.ПолучитьТелоКакСтроку()) = "OK";				
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка размещения файлов:'")+" "+ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

#КонецОбласти 

#Область ФункцииРаботыСВременем

// Возвращает параметры сдвига времени.
//
// Параметры:
//  УниверсальноеВремя	 - Дата, Неопределено	 - Текущая универсальная дата.
// 
// Возвращаемое значение:
//  Структура - Параметры сдвига времени.
//
Функция ПолучитьПараметрыСдвигаВремени(УниверсальноеВремя = Неопределено) Экспорт
	УниверсальноеВремя = ?(УниверсальноеВремя = Неопределено ИЛИ НЕ ТипЗнч(УниверсальноеВремя) = Тип("Дата"), ТекущаяУниверсальнаяДата(), УниверсальноеВремя); 
	ЧасовойПоясСеанса = ЧасовойПоясСеанса();
	
	СдвигВремени = СмещениеСтандартногоВремени(ЧасовойПоясСеанса, УниверсальноеВремя);
	СдвигЛетнееВремя = СмещениеЛетнегоВремени(ЧасовойПоясСеанса, УниверсальноеВремя);
	Если СдвигЛетнееВремя > 0 Тогда
		ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский;		
	Иначе
		ВариантПереводаВремени = Неопределено;	
	КонецЕсли;
	
	Возврат Новый Структура("СдвигВремени,СдвигЛетнееВремя,ВариантПереводаВремени", СдвигВремени, СдвигЛетнееВремя, ВариантПереводаВремени);

КонецФункции // ПолучитьПараметрыСдвигаВремени()

// Приводит переданную дату к универсальному времени.
//  (Стандартная функция некорректно работает с летним временем).
//
// Параметры:
//  ДатаВремя	 - Дата	 - Исходная дата.
// 
// Возвращаемое значение:
//  Дата - Дата по Гринвичу.
//
Функция ПривестиКДатеВремениПоГринвичу(ДатаВремя) Экспорт
						
	Рез = ДатаВремя;
	
	Если НЕ ЗначениеЗаполнено(ДатаВремя) Тогда
		Возврат Рез;	
	КонецЕсли;
	
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
					
	ВариантПереводаВремени = ПараметрыСдвигаВремени.ВариантПереводаВремени;
	
	Если ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский Тогда
		
		// Перевод вперед в крайнее воскресенье марта в 2 часа
		НачалоИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),4,1,0,0,0))-7*24*3600)+3*3600;
		// перевод назад в крайнее воскресенье октября в 3 часа
		КонецИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),11,1,0,0,0))-7*24*3600)+3*3600;
		
		Если НачалоИнтервала <= ДатаВремя И ДатаВремя <= КонецИнтервала Тогда
			
			Рез = ДатаВремя - 60*60; 	
			
		КонецЕсли;
		
	ИначеЕсли ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Американский Тогда
		
		// Перевод вперед во второе воскресенье марта в 2:00
		НачалоИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),3,1,0,0,0))+7*24*3600)+3*3600;
		// Перевод назад в первое воскресенье ноября в 3:00
		КонецИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),11,1,0,0,0)))+3*3600;
		
		Если НачалоИнтервала <= ДатаВремя И ДатаВремя <= КонецИнтервала Тогда
			
			Рез = ДатаВремя - 60*60; 	
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат УниверсальноеВремя(Рез, ЧасовойПоясСеанса());	

КонецФункции // ПривестиКДатеВремениПоГринвичу()

// Производит установку часового пояса текущего сеанса.
//
// Параметры:
//  МестныйЧасовойПояс	 - Строка	 - Идентификатор часового пояса.
//
Процедура УстановкаЧасовогоПоясаСеанса(МестныйЧасовойПояс) Экспорт
	
	УстановитьЧасовойПоясСеанса(МестныйЧасовойПояс);
	
КонецПроцедуры

#КонецОбласти 

#Область ФункцииОбработкиДанныхТрекеров

// Возвращает данные датчика объекта мониторинга
//
// Параметры:
//  Объект								 - СправочникСсылка	 - Объект мониторинга.
//  НачДата								 - Дата				 - Период начала данных по датчику.
//  КонДата								 - Дата				 - Период окончания данных по датчику.
//  Датчик								 - СправочникСсылка.ItobДатчики	 - Ссылка на справочник "Датчики".
//  РасширитьГраницыКоличествоЗаписей	 - Число						 - Расширяет границу количества записей.
//  ДанныеТерминаловСРассчтаннымиТреками - Соответствие - Список терминалов с данными этих терминалов по периодам:
//		* Ключ - СправочникСсылка - Ссылка на терминал;
//		* Значение - Соответствие:
//			** Ключ - Дата - Период начала интервала набора данных;
//			** Значение - Структура - Данные Терминала.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные датчика.
//
Функция ПолучитьДанныеДатчикаОбъекта(Объект, НачДата, КонДата, Датчик, РасширитьГраницыКоличествоЗаписей = 0, ДанныеТерминаловСРассчтаннымиТреками = Неопределено) Экспорт
	
	ОбщаяТаблицаДанных = Новый ТаблицаЗначений;
	ОбщаяТаблицаДанных.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.ItobТерминалы"));
	ОбщаяТаблицаДанных.Колонки.Добавить("Датчик", Новый ОписаниеТипов("СправочникСсылка.ItobДатчики"));
	ОбщаяТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));	
	ОбщаяТаблицаДанных.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки()));
	
	// В качестве датчика может передаваться массив
	Если ТипЗнч(Датчик) = Тип("Массив") Тогда
		МассивДатчиков = Датчик;
		
	Иначе
		МассивДатчиков = Новый Массив;
		МассивДатчиков.Добавить(Датчик);
	
	КонецЕсли;
	
	ЕстьЗапрашиваемыеДатчики = Ложь;
	Для каждого ТекущийДатчик Из МассивДатчиков Цикл
		Если ТекущийДатчик = Неопределено Тогда
			Продолжить;	
		КонецЕсли; 
		
		ЕстьЗапрашиваемыеДатчики = Истина;
		
		КодДатчикаСтр = Формат(ТекущийДатчик.Код, "ЧН=0; ЧГ=0");
		ИмяКолонки = "Значение"+КодДатчикаСтр;
		Если ОбщаяТаблицаДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ОбщаяТаблицаДанных.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьЗапрашиваемыеДатчики Тогда
		ВызватьИсключение "Не указано ни одного датчика для получения данных";	
	КонецЕсли; 
	
	// Срез первых
	СрезНаНачало = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(НачалоДня(НачДата)-1, Новый Структура("Объект", Объект));
	
	ТекущаяСтруктураПривязки = Новый Структура("Период,Терминал,ТерминалУстановлен");
	ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, СрезНаНачало);	
	ТекущаяСтруктураПривязки.Период = НачДата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПривязкиТрекеров.Период КАК Период,
	               |	ItobПривязкиТрекеров.Терминал,
	               |	ItobПривязкиТрекеров.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТрекеров КАК ItobПривязкиТрекеров
	               |ГДЕ
	               |	ItobПривязкиТрекеров.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И &КонДата
	               |	И ItobПривязкиТрекеров.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтруктураПривязки.Период = Выборка.Период Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
			Продолжить;
		
		КонецЕсли;
				
		Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
			
			ПредварительноРассчитанныйТрек = Неопределено;
			Если НЕ ДанныеТерминаловСРассчтаннымиТреками = Неопределено
				 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал] = Неопределено
				 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период] = Неопределено Тогда
				ПредварительноРассчитанныйТрек = ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период].ТрекиТерминала.Расширенный;
			КонецЕсли;
			
			ТабДанных = ПолучитьДанныеДатчикаПоТерминалу(ТекущаяСтруктураПривязки.Период, НачалоДня(Выборка.Период)-1, ТекущаяСтруктураПривязки.Терминал,
								Датчик,	РасширитьГраницыКоличествоЗаписей, ПредварительноРассчитанныйТрек);
			Если ТабДанных <> Неопределено Тогда
				Для Каждого ТекСтрокаДанных Из ТабДанных Цикл
					ЗаполнитьЗначенияСвойств(ОбщаяТаблицаДанных.Добавить(), ТекСтрокаДанных);				
				КонецЦикла;
			
			КонецЕсли;
		
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	
	КонецЦикла;
	
	Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
		
		ПредварительноРассчитанныйТрек = Неопределено;
		Если НЕ ДанныеТерминаловСРассчтаннымиТреками = Неопределено 
			 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал] = Неопределено 
			 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период] = Неопределено Тогда
			ПредварительноРассчитанныйТрек = ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период].ТрекиТерминала.Расширенный;
		КонецЕсли;
		
		ТабДанных = ПолучитьДанныеДатчикаПоТерминалу(ТекущаяСтруктураПривязки.Период, КонДата, ТекущаяСтруктураПривязки.Терминал,
							Датчик,	РасширитьГраницыКоличествоЗаписей, ПредварительноРассчитанныйТрек);
		Если ТабДанных <> Неопределено Тогда
			Для Каждого ТекСтрокаДанных Из ТабДанных Цикл
				ЗаполнитьЗначенияСвойств(ОбщаяТаблицаДанных.Добавить(), ТекСтрокаДанных);
			КонецЦикла;			
		
		КонецЕсли;
	
	КонецЕсли;	
		
	Возврат ОбщаяТаблицаДанных;	

КонецФункции

// Формирует маршрут терминала по координатам трека.
//
// Параметры:
//  Терминал								 - СправочникСсылка.ItobТерминалы	 - Исходные терминал.
//  НачДата									 - Дата								 - Начало периода.
//  КонДата									 - Дата								 - Конец периода.
//  Маршрут									 - ТаблицаЗначений					 - Таблица маршрута.
//  ВыводитьСообщения						 - Булево
//  ВключатьДанныеДатчиков					 - Булево
//  ОпределятьМестоположение				 - Булево
//  ОпределятьРазрешенныеСкоростиПоПДД		 - Булево
//  ДобавитьДанныеВсехДатчиков				 - Булево
//  ПредварительноРассчитанныйТрекТерминала	 - ТаблицаЗначений - Предварительно рассчитанный трек терминала.
// 
// Возвращаемое значение:
//  Булево - Результат формирования маршрута терминала.
//
Функция СформироватьМаршрутПоТерминалу(Терминал, 
									   НачДата, 
									   КонДата, 
									   Маршрут, 
									   ВыводитьСообщения = Истина, 
									   ВключатьДанныеДатчиков = Неопределено, 
									   ОпределятьМестоположение = Ложь,
									   ОпределятьРазрешенныеСкоростиПоПДД = Ложь,
									   ДобавитьДанныеВсехДатчиков = Ложь,
									   ПредварительноРассчитанныйТрекТерминала = Неопределено) Экспорт
			
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	ПараметрыОбработкиДанныхТерминала = ПолучитьПараметрыОбработкиДанных(Терминал);	
	ТекущийМассивДатчиков = ВключатьДанныеДатчиков;	
	СостояниеСтоянка   = Перечисления.ItobСостоянияТерминалов.Стоянка;
	СостояниеДвижение  = Перечисления.ItobСостоянияТерминалов.Движение;
	СостояниеНетДанных = Перечисления.ItobСостоянияТерминалов.НетДанных;	
	
	// Включаем в массив датчиков - датчик зажигания, при необходимости
	Если ПараметрыОбработкиДанныхТерминала.ОпределениеДвижения = Перечисления.ItobМетодыОпределенияДвижения.ДатчикЗажигания Тогда		
		Если НЕ ПараметрыОбработкиДанныхТерминала.ДатчикЗажигания.Пустая() Тогда
			ТекущийМассивДатчиков = ?(ТипЗнч(ТекущийМассивДатчиков) = Тип("Массив"), ТекущийМассивДатчиков, Новый Массив);
			Если ТекущийМассивДатчиков.Найти(ПараметрыОбработкиДанныхТерминала.ДатчикЗажигания) = Неопределено Тогда
				ТекущийМассивДатчиков.Добавить(ПараметрыОбработкиДанныхТерминала.ДатчикЗажигания);						
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
	
	
	НачДатаUTC0 = ПривестиКДатеВремениПоГринвичу(НачДата);
	КонДатаUTC0 = ПривестиКДатеВремениПоГринвичу(КонДата);
	
	Если ПредварительноРассчитанныйТрекТерминала = Неопределено Тогда
		ПараметрыТрека = ItobРепликация.ПараметрыТрека();
		ПараметрыТрека.Терминал = Терминал;
		ПараметрыТрека.ДатаНачала = НачДатаUTC0;
		ПараметрыТрека.ДатаОкончания = КонДатаUTC0;
		ПараметрыТрека.ПреобразоватьДатыКUTC0 = Ложь;
		ПараметрыТрека.ОпределятьМестоположение = ОпределятьМестоположение;
		ПараметрыТрека.ОпределятьРазрешенныеСкоростиПоПДД = ОпределятьРазрешенныеСкоростиПоПДД;
		ПараметрыТрека.КоличествоДополнительныхЗаписей = 1;
		ПараметрыТрека.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные;
		ТаблицаТрека = ItobРепликация.ТрекТерминала(ПараметрыТрека);
	Иначе
		ТаблицаТрека = ПредварительноРассчитанныйТрекТерминала;
	КонецЕсли;
	
	ТаблицаТрека.Сортировать("Период");
	
	// Необходимо обработать крайние точки, т.к. основные точки уже могут соответствовать запрашиваемому периоду.
	КоличествоСтрокТрека = ТаблицаТрека.Количество();
	Если КоличествоСтрокТрека >= 2 И ТаблицаТрека[1].Период = НачДатаUTC0 Тогда
		ТаблицаТрека.Удалить(0);	
	КонецЕсли;
	КоличествоСтрокТрека = ТаблицаТрека.Количество();
	Если КоличествоСтрокТрека >= 2 И ТаблицаТрека[КоличествоСтрокТрека - 2].Период = КонДатаUTC0 Тогда
		ТаблицаТрека.Удалить(КоличествоСтрокТрека - 1);	
	КонецЕсли;
	
	
	Запрос = Новый Запрос;				
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", ПараметрыОбработкиДанныхТерминала.МинимальнаяСкоростьДвижения);	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("ТаблицаБазовыхДанных", ТаблицаТрека);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаБазовыхДанных.Период КАК Период,
	|	ТаблицаБазовыхДанных.Широта КАК Широта,
	|	ТаблицаБазовыхДанных.Долгота КАК Долгота,
	|	ТаблицаБазовыхДанных.Скорость КАК Скорость,
	|	ТаблицаБазовыхДанных.Направление КАК Направление,
	|	ТаблицаБазовыхДанных.ЧислоСпутников КАК ЧислоСпутников,
	|	ТаблицаБазовыхДанных.НевалидныеДанные КАК НевалидныеДанные,
	|	ТаблицаБазовыхДанных.ВерсияФормата КАК ВерсияФормата
	|ПОМЕСТИТЬ ДанныеТерминалов
	|ИЗ
	|	&ТаблицаБазовыхДанных КАК ТаблицаБазовыхДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Период,
	|	ДанныеТерминалов.Широта КАК Широта,
	|	ДанныеТерминалов.Долгота КАК Долгота,
	|	ДанныеТерминалов.Скорость КАК Скорость,
	|	ДанныеТерминалов.Направление КАК Направление,
	|	&Терминал КАК Терминал,
	|	ВЫБОР
	|		КОГДА ДанныеТерминалов.Скорость > &МинимальнаяСкоростьДвижения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	|	КОНЕЦ КАК Состояние,
	|	ДанныеТерминалов.Период КАК ПериодUTC0,
	|	ДанныеТерминалов.НевалидныеДанные КАК НевалидныеДанные,
	|	ДанныеТерминалов.ВерсияФормата КАК ВерсияФормата
	|ИЗ
	|	ДанныеТерминалов КАК ДанныеТерминалов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодUTC0";
				   
	ТаблицаТочекМаршрута = Запрос.Выполнить().Выгрузить();
	
	Если ОпределятьМестоположение Тогда
		ТаблицаТочекМаршрута.Колонки.Добавить("Местоположение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));
	КонецЕсли;
	Если ОпределятьРазрешенныеСкоростиПоПДД Тогда
		ТаблицаТочекМаршрута.Колонки.Добавить("РазрешеннаяСкоростьПоПДД",  Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
		ТаблицаТочекМаршрута.Колонки.Добавить("ШиротаДействияРазрешеннойСкорости", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
		ТаблицаТочекМаршрута.Колонки.Добавить("ДолготаДействияРазрешеннойСкорости", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	КонецЕсли;
	Если ДобавитьДанныеВсехДатчиков Тогда
		ТаблицаТочекМаршрута.Колонки.Добавить("ДанныеДатчиков_Обработанные", Новый ОписаниеТипов("Соответствие"));
	КонецЕсли; 
	
	КоличествоТочек = ТаблицаТочекМаршрута.Количество();
	
	Если КоличествоТочек = 0 Тогда
		Возврат Ложь;		
	ИначеЕсли КоличествоТочек = 1
		И (ТаблицаТочекМаршрута[0].Период < НачДата
		ИЛИ ТаблицаТочекМаршрута[0].Период > КонДата) Тогда
		// Данная точка не относится к запрашиваемому периоду
		Возврат Ложь;		
	ИначеЕсли КоличествоТочек = 2
		И ТаблицаТочекМаршрута[0].Период < НачДата
		И ТаблицаТочекМаршрута[1].Период > КонДата Тогда
		// Данные точки не относятся к запрашиваемому периоду, нет данных
		
		ТаблицаТочекМаршрута[0].Период     = НачДата;
		ТаблицаТочекМаршрута[0].ПериодUTC0 = ПривестиКДатеВремениПоГринвичу(НачДата);
		ТаблицаТочекМаршрута[0].Состояние  = СостояниеНетДанных;
		
		ТаблицаТочекМаршрута[1].Период     = КонДата;
		ТаблицаТочекМаршрута[1].ПериодUTC0 = ПривестиКДатеВремениПоГринвичу(КонДата);
		ТаблицаТочекМаршрута[1].Состояние  = СостояниеНетДанных;
	КонецЕсли;
	
	МассивКодыДатчиков = Новый Массив;
	Если ТипЗнч(ТекущийМассивДатчиков) = Тип("Массив") И ТекущийМассивДатчиков.Количество() > 0 Тогда			
		Для каждого Датчик Из ТекущийМассивДатчиков Цикл
			КодДатчикаСтрокой = Формат(Датчик.Код,"ЧН=0; ЧГ=0");
			ТаблицаТочекМаршрута.Колонки.Добавить("ЗначениеДатчика"+КодДатчикаСтрокой, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
			МассивКодыДатчиков.Добавить(КодДатчикаСтрокой);
		КонецЦикла;		
	КонецЕсли;
	
	Счетчик = 0;	
	Для каждого СтрОсновнойТаблицы Из ТаблицаТочекМаршрута Цикл
		ЗначенияДатчиков = ТаблицаТрека[Счетчик].ДанныеДатчиков_Обработанные;
		
		Для каждого КодДатчикаСтрокой Из МассивКодыДатчиков Цикл
			ИмяКолонкиЗначениеДатчика = "ЗначениеДатчика" + КодДатчикаСтрокой;
			ЗначениеДатчика = ЗначенияДатчиков[КодДатчикаСтрокой];
			Если НЕ ЗначениеДатчика = Неопределено Тогда
				СтрОсновнойТаблицы[ИмяКолонкиЗначениеДатчика] = ЗначениеДатчика;	
			КонецЕсли; 		
		КонецЦикла;
		
		Если ОпределятьМестоположение Тогда
			СтрОсновнойТаблицы.Местоположение = ТаблицаТрека[Счетчик].Местоположение;	
		КонецЕсли;
		Если ОпределятьРазрешенныеСкоростиПоПДД Тогда
			СтрОсновнойТаблицы.РазрешеннаяСкоростьПоПДД = ТаблицаТрека[Счетчик].РазрешеннаяСкоростьПоПДД;
			СтрОсновнойТаблицы.ШиротаДействияРазрешеннойСкорости = ТаблицаТрека[Счетчик].ШиротаДействияРазрешеннойСкорости;
			СтрОсновнойТаблицы.ДолготаДействияРазрешеннойСкорости = ТаблицаТрека[Счетчик].ДолготаДействияРазрешеннойСкорости;
		КонецЕсли;
		Если ДобавитьДанныеВсехДатчиков Тогда
			СтрОсновнойТаблицы.ДанныеДатчиков_Обработанные = ТаблицаТрека[Счетчик].ДанныеДатчиков_Обработанные;	
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
	КонецЦикла; 
	
	// Обработаем крайние точки
	Если КоличествоТочек >= 2 И ТаблицаТочекМаршрута[0].Период < НачДата
		И ТаблицаТочекМаршрута[1].Период > НачДата Тогда
		
		Если НачДата - ТаблицаТочекМаршрута[0].Период > ПараметрыОбработкиДанныхТерминала.МинимальныйИнтервалОтправкиДанных Тогда			
			ТаблицаТочекМаршрута[0].Период     = НачДата;
			ТаблицаТочекМаршрута[0].ПериодUTC0 = ПривестиКДатеВремениПоГринвичу(НачДата);
			ТаблицаТочекМаршрута[0].Состояние  = СостояниеНетДанных;		
		Иначе
			ПараметрыТочки = ПолучитьТочкуНаДату(ТаблицаТочекМаршрута[0],
				ТаблицаТочекМаршрута[1],НачДата);
			Если ПараметрыТочки.Широта <> 0 ИЛИ ПараметрыТочки.Долгота <> 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута[0],ПараметрыТочки);		
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоТочек >= 2 И ТаблицаТочекМаршрута[КоличествоТочек-1].Период > КонДата
		И ТаблицаТочекМаршрута[КоличествоТочек-2].Период < КонДата Тогда
		
		Если КонДата - ТаблицаТочекМаршрута[КоличествоТочек-2].Период > ПараметрыОбработкиДанныхТерминала.МинимальныйИнтервалОтправкиДанных Тогда		
			ТаблицаТочекМаршрута[КоличествоТочек-1].Период     = КонДата;
			ТаблицаТочекМаршрута[КоличествоТочек-1].ПериодUTC0 = ПривестиКДатеВремениПоГринвичу(КонДата);			
			ТаблицаТочекМаршрута[КоличествоТочек-1].Состояние  = СостояниеНетДанных;			
		Иначе			
			ПараметрыТочки = ПолучитьТочкуНаДату(ТаблицаТочекМаршрута[КоличествоТочек-2],
				ТаблицаТочекМаршрута[КоличествоТочек-1],КонДата);
			Если ПараметрыТочки.Широта <> 0 ИЛИ ПараметрыТочки.Долгота <> 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута[КоличествоТочек-1],ПараметрыТочки);
			КонецЕсли;			
		КонецЕсли;			
	КонецЕсли;
	
	// Если метод определения стоянок - зажигание, поставим признак "Стоянка" для точек с выключенным зажиганием.
	Если ПараметрыОбработкиДанныхТерминала.ОпределениеДвижения = Перечисления.ItobМетодыОпределенияДвижения.ДатчикЗажигания
		И НЕ ПараметрыОбработкиДанныхТерминала.ДатчикЗажигания.Пустая() Тогда
		
		ИмяКолонкиЗначениеДатчикЗажигания = "ЗначениеДатчика"+Формат(ПараметрыОбработкиДанныхТерминала.ДатчикЗажиганияКод, "ЧН=0; ЧГ=0");
		Для каждого СтрокаТаблицыТочекМаршрута Из ТаблицаТочекМаршрута Цикл
			Если СтрокаТаблицыТочекМаршрута.Состояние = СостояниеДвижение И СтрокаТаблицыТочекМаршрута[ИмяКолонкиЗначениеДатчикЗажигания] = 0 Тогда
				СтрокаТаблицыТочекМаршрута.Состояние = СостояниеСтоянка;			
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;
		
	Маршрут = ОбработатьМаршрутОбъекта(ТаблицаТочекМаршрута, ПараметрыОбработкиДанныхТерминала);
	
	// Калькуляция пробега	
	Маршрут.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,7)));
			
	// Получаем массивы координат.
	МассивШирота  = Маршрут.ВыгрузитьКолонку("Широта");
	МассивДолгота = Маршрут.ВыгрузитьКолонку("Долгота");
	
	// Выполняем расчет.
	Координаты = ItobCsmHandler.НовыйКоординаты(МассивШирота, МассивДолгота);
	Результат = ItobCsmHandler.МассивРасстояний(Координаты);
	
	// Обрабатываем результат.
	//Результат.Вставить(0, 0);
	Результат.Добавить(0);
	Маршрут.ЗагрузитьКолонку(Результат, "Пробег");
	
	СостоянияТерминаловДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	СостоянияТерминаловНетДанных = Перечисления.ItobСостоянияТерминалов.НетДанных;
	СостоянияТерминаловСтоянка = Перечисления.ItobСостоянияТерминалов.Стоянка;
	
	Для Счетчик = 0 По Маршрут.Количество()-2 Цикл	
		Если (Маршрут[Счетчик].Состояние = СостоянияТерминаловСтоянка) 
			И (Маршрут[Счетчик+1].Состояние = СостоянияТерминаловДвижение) Тогда
			
			Маршрут[Счетчик+1].Пробег = Маршрут[Счетчик+1].Пробег + Маршрут[Счетчик].Пробег;
			Маршрут[Счетчик].Пробег = 0;
		ИначеЕсли (Маршрут[Счетчик].Состояние = СостоянияТерминаловДвижение) 
			И (Маршрут[Счетчик+1].Состояние = СостоянияТерминаловСтоянка) Тогда
			
			//Маршрут[Счетчик+1].Пробег = 0;
			//Маршрут[Счетчик].Пробег = Маршрут[Счетчик+1].Пробег + Маршрут[Счетчик].Пробег;
		ИначеЕсли Маршрут[Счетчик].Состояние = СостоянияТерминаловДвижение
			И Маршрут[Счетчик+1].Состояние <> СостоянияТерминаловНетДанных Тогда
		Иначе
			Маршрут[Счетчик].Пробег = 0;
		КонецЕсли;								
	КонецЦикла;	
	
	
	Возврат Истина;
		
КонецФункции

// Возвращает таблицу значений маршрута объекта мониторинга.
//
// Параметры:
//  ОпределятьМестоположение - Булево - признак добавления колонки местоположения. 
//  ОпределятьРазрешенныеСкоростиПоПДД - Булево - признак добавления колонок "РазрешеннаяСкоростьПоПДД",
//												  "ШиротаДействияРазрешеннойСкорости", "ДолготаДействияРазрешеннойСкорости".
//  ДобавитьДанныеВсехДатчиков - Булево - признак добавления колонки "ДанныеДатчиков_Обработанные". 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Маршрут объекта мониторинга.
//
Функция СоздатьТаблицуЗначенийМаршрутОбъектаМониторинга(ОпределятьМестоположение = Ложь, 
														ОпределятьРазрешенныеСкоростиПоПДД = Ложь,
														ДобавитьДанныеВсехДатчиков = Ложь) Экспорт
	
	ОбщийМаршрут = Новый ТаблицаЗначений;
	ОбщийМаршрут.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщийМаршрут.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщийМаршрут.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщийМаршрут.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщийМаршрут.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.ItobСостоянияТерминалов"));	
	ОбщийМаршрут.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.ItobТерминалы"));
	ОбщийМаршрут.Колонки.Добавить("ПериодUTC0", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("Пробег", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,7)));
	ОбщийМаршрут.Колонки.Добавить("НаселенныйПункт", Новый ОписаниеТипов("СправочникСсылка.ItobКлассификаторНаселенныхПунктов"));
	ОбщийМаршрут.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(5)) );
	ОбщийМаршрут.Колонки.Добавить("Вектор", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
	ОбщийМаршрут.Колонки.Добавить("ПриближениеУдаление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
	
	Если ОпределятьМестоположение Тогда
		ОбщийМаршрут.Колонки.Добавить("Местоположение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));		
	КонецЕсли;
	
	Если ОпределятьРазрешенныеСкоростиПоПДД Тогда
		ОбщийМаршрут.Колонки.Добавить("РазрешеннаяСкоростьПоПДД",  Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
		ОбщийМаршрут.Колонки.Добавить("ШиротаДействияРазрешеннойСкорости", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
		ОбщийМаршрут.Колонки.Добавить("ДолготаДействияРазрешеннойСкорости", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	КонецЕсли;
	
	Если ДобавитьДанныеВсехДатчиков Тогда
		ОбщийМаршрут.Колонки.Добавить("ДанныеДатчиков_Обработанные", Новый ОписаниеТипов("Соответствие"));	
	КонецЕсли; 
	
	
	Возврат ОбщийМаршрут;
	
КонецФункции
 
// Формирует таблицу маршрута для заданного объекта мониторинга.
//
// Параметры:
//  Объект								- СправочникСсылка		 - Объект мониторинга.
//  НачДата								- Дата					 - Период начала маршрута.
//  КонДата								- Дата					 - Период окончания маршрута.
//  ВключатьДанныеДатчиков				- Булево, Неопределено	 - Включать данные датчиков.
//  ОпределятьМестоположение			- Булево				 - Определять местоположение.
//  ОпределятьРазрешенныеСкоростиПоПДД  - Булево
//  ДобавитьДанныеВсехДатчиков			- Булево
//  ДанныеТерминаловСРассчтаннымиТреками - Соответствие - Список терминалов с данными этих терминалов по периодам:
//		* Ключ - СправочникСсылка - Ссылка на терминал;
//		* Значение - Соответствие:
//			** Ключ - Дата - Период начала;
//			** Значение - Структура - Данные Терминала.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Маршрут объекта мониторинга.
//
Функция СформироватьМаршрутОбъектаМониторинга(Объект, 
											  НачДата, 
											  КонДата, 
											  ВключатьДанныеДатчиков = Неопределено, 
											  ОпределятьМестоположение = Ложь,
											  ОпределятьРазрешенныеСкоростиПоПДД = Ложь,
											  ДобавитьДанныеВсехДатчиков = Ложь,
											  ДанныеТерминаловСРассчтаннымиТреками = Неопределено) Экспорт
											  
											  
	ОбщийМаршрут = СоздатьТаблицуЗначенийМаршрутОбъектаМониторинга(ОпределятьМестоположение, 
																   ОпределятьРазрешенныеСкоростиПоПДД, 
																   ДобавитьДанныеВсехДатчиков);
	
	// Срез первых
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(НачДата)-1);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПривязкиТрекеровСрезПоследних.Период КАК Период,
	               |	ItobПривязкиТрекеровСрезПоследних.Терминал,
	               |	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&Период, Объект = &Объект) КАК ItobПривязкиТрекеровСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСтруктураПривязки = Новый Структура("Период,Терминал,ТерминалУстановлен");		
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	Иначе
		ТекущаяСтруктураПривязки.ТерминалУстановлен = Ложь;	
	КонецЕсли;
	ТекущаяСтруктураПривязки.Период = НачДата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobПривязкиТрекеров.Период КАК Период,
	               |	ItobПривязкиТрекеров.Терминал,
	               |	ItobПривязкиТрекеров.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТрекеров КАК ItobПривязкиТрекеров
	               |ГДЕ
	               |	ItobПривязкиТрекеров.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И &КонДата
	               |	И ItobПривязкиТрекеров.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтруктураПривязки.Период = Выборка.Период Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
			Продолжить;
		
		КонецЕсли;
		
		ФлагНетДанных = Ложь;		
		Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
			
			ПредварительноРассчитанныйТрек = Неопределено;
			Если НЕ ДанныеТерминаловСРассчтаннымиТреками = Неопределено
				 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал] = Неопределено 
				 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период] = Неопределено Тогда
					ПредварительноРассчитанныйТрек = ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период].ТрекиТерминала.Основной;
			КонецЕсли;
			
			ТекущийМаршрут = Неопределено;
			Рез = СформироватьМаршрутПоТерминалу(ТекущаяСтруктураПривязки.Терминал,
												 ТекущаяСтруктураПривязки.Период,
												 НачалоДня(Выборка.Период)-1,
												 ТекущийМаршрут,
												 Истина,
												 ВключатьДанныеДатчиков,
												 ОпределятьМестоположение,
												 ОпределятьРазрешенныеСкоростиПоПДД,
												 ДобавитьДанныеВсехДатчиков,
												 ПредварительноРассчитанныйТрек);
			Если Рез Тогда
				ДобавитьКолонкиДатчиков(ТекущийМаршрут, ОбщийМаршрут);
				Для Каждого ТекСтрокаМаршрута Из ТекущийМаршрут Цикл
					ЗаполнитьЗначенияСвойств(ОбщийМаршрут.Добавить(), ТекСтрокаМаршрута);
				КонецЦикла;
				
			Иначе
				ФлагНетДанных = Истина;
			
			КонецЕсли;
			
		Иначе
			ФлагНетДанных = Истина;
		
		КонецЕсли;
		
		Если ФлагНетДанных Тогда
			НовСтрока = ОбщийМаршрут.Добавить();
			НовСтрока.Период = ТекущаяСтруктураПривязки.Период;
			НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	
	КонецЦикла;
	
	ФлагНетДанных = Ложь;
	Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
		
		ПредварительноРассчитанныйТрек = Неопределено;
		Если НЕ ДанныеТерминаловСРассчтаннымиТреками = Неопределено
			 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал] = Неопределено
			 И НЕ ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период] = Неопределено Тогда
			ПредварительноРассчитанныйТрек = ДанныеТерминаловСРассчтаннымиТреками[ТекущаяСтруктураПривязки.Терминал][ТекущаяСтруктураПривязки.Период].ТрекиТерминала.Основной;
		КонецЕсли;
		
		ТекущийМаршрут = Неопределено;
		Рез = СформироватьМаршрутПоТерминалу(ТекущаяСтруктураПривязки.Терминал, 
											 ТекущаяСтруктураПривязки.Период, 
											 КонДата, 
											 ТекущийМаршрут, 
											 Истина, 
											 ВключатьДанныеДатчиков, 
											 ОпределятьМестоположение,
											 ОпределятьРазрешенныеСкоростиПоПДД,
											 ДобавитьДанныеВсехДатчиков,
											 ПредварительноРассчитанныйТрек);
		Если Рез Тогда
			ДобавитьКолонкиДатчиков(ТекущийМаршрут, ОбщийМаршрут);
			Для Каждого ТекСтрокаМаршрута Из ТекущийМаршрут Цикл
				ЗаполнитьЗначенияСвойств(ОбщийМаршрут.Добавить(), ТекСтрокаМаршрута);				
			КонецЦикла;
			
		Иначе
			ФлагНетДанных = Истина;			
		КонецЕсли;
		
	Иначе
		ФлагНетДанных = Истина;		
	КонецЕсли;
	
	Если ФлагНетДанных Тогда
		НовСтрока = ОбщийМаршрут.Добавить();
		НовСтрока.Период = ТекущаяСтруктураПривязки.Период;
		НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;		
	КонецЕсли;
	
	
	Возврат ОбщийМаршрут;

КонецФункции

// Функция - Получить данные по терминалу
//
// Параметры:
//  Терминал	 - СправочникСсылка.ItobТерминалы - терминал.
//  НачПериода	 - Дата - начало периода.
//  КонПериода	 - Дата - конец периода. 
// 
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьДанныеПоТерминалу(Терминал, Знач НачПериода, Знач КонПериода) Экспорт
			
	ПараметрыТрека = ItobРепликация.ПараметрыТрека();
	ПараметрыТрека.Терминал = Терминал;
	ПараметрыТрека.ДатаНачала = НачПериода;
	ПараметрыТрека.ДатаОкончания = КонПериода;
	ПараметрыТрека.ТолькоВалидные = Ложь;
	ПараметрыТрека.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные;
	ПараметрыТрека.ПреобразоватьОбработанныеДанныеДатчиковВСоответствие = Ложь;
	
	
	Возврат ItobРепликация.ТрекТерминала(ПараметрыТрека);
		
КонецФункции
 
// Функция - Получить актуальные данные по терминалам
//
// Параметры:
//  Терминалы - Массив из СправочникСсылка.ItobТерминалы, СправочникСсылка.ItobТерминалы - ссылки на терминалы.
// 
// Возвращаемое значение:
//	ТаблицаЗначений 
//
Функция ДанныеАктуальностиИзИБ(Терминалы) Экспорт
	
	ТерминалыСсылки = Новый Массив;
	Если ТипЗнч(Терминалы) = Тип("СправочникСсылка.ItobТерминалы") Тогда
		ТерминалыСсылки.Добавить(Терминалы);
	Иначе
		ТерминалыСсылки = Терминалы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СдвигВремени", ПолучитьПараметрыСдвигаВремени().СдвигВремени);
	Запрос.УстановитьПараметр("Терминалы", ТерминалыСсылки);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobАктуальностьДанныхТерминалов.Терминал КАК Терминал,
	|	ItobАктуальностьДанныхТерминалов.ДатаВремя КАК ПериодUTC0,
	|	ДОБАВИТЬКДАТЕ(ItobАктуальностьДанныхТерминалов.ДатаВремя, СЕКУНДА, &СдвигВремени) КАК Период,
	|	ItobАктуальностьДанныхТерминалов.Широта КАК Широта,
	|	ItobАктуальностьДанныхТерминалов.Долгота КАК Долгота,
	|	ItobАктуальностьДанныхТерминалов.Скорость КАК Скорость,
	|	ItobАктуальностьДанныхТерминалов.Направление КАК Направление,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки0 КАК ВидГруппировки0,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки1 КАК ВидГруппировки1,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки2 КАК ВидГруппировки2,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки3 КАК ВидГруппировки3,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки4 КАК ВидГруппировки4,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки5 КАК ВидГруппировки5,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки6 КАК ВидГруппировки6,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки7 КАК ВидГруппировки7,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки8 КАК ВидГруппировки8,
	|	ItobАктуальностьДанныхТерминалов.ВидГруппировки9 КАК ВидГруппировки9,
	|	ItobАктуальностьДанныхТерминалов.ДанныеДатчиков КАК ДанныеДатчиков,
	|	ItobАктуальностьДанныхТерминалов.КрайниеТочки КАК КрайниеТочки,
	|	ItobАктуальностьДанныхТерминалов.ПодходящийВариантДинамическогоОформления КАК ПодходящийВариантДинамическогоОформления,
	|	ItobАктуальностьДанныхТерминалов.ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных КАК ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных
	|ИЗ
	|	РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	|ГДЕ
	|	ItobАктуальностьДанныхТерминалов.Терминал В(&Терминалы)";

	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
#КонецОбласти 

#Область ФункцииПолученияСводнойИнформации

// Формирует таблицу интервалов движения для заданного объекта мониторинга.
//
// Параметры:
//  Объект					 - СправочникаСсылка.ItobТранспортныеСредства	 - Ссылка на справочник "Транспортные средства".
//  НачДата					 - Дата											 - Период начала формирования интервалов.
//  КонДата					 - Дата											 - Период окончания формирования интервалов.
//  ГеокодироватьАдреса		 - Булево, Неопределено							 - Геокодировать адреса.
//  ВключатьДанныеДатчиков	 - Булево, Неопределено							 - Включать данные датчиков.
//  ПараметрыБулево			 - Структура, Неопределено						 - Параметры:
//  						* ИспользоватьДанныеРегистраИнтервалыДвижения - Булево - Использовать данные регистра интервалы движения.
//  						* ИспользоватьПоправочныйКоэффициент - Булево - Использовать поправочный коэффициент.
//  						* ВключатьДанныеТерминала			 - Булево - Включать данные терминала.
//  						* РассчитыватьДанныеВыработки		 - Булево - Рассчитывать данные выработки.
//  ОпределятьМестоположение - Булево										 - Определять местоположение.
//  ДанныеТерминаловСРассчтаннымиТреками - Соответствие - Список терминалов с данными этих терминалов по периодам:
//		* Ключ - СправочникСсылка - Ссылка на терминал;
//		* Значение - Соответствие:
//			** Ключ - Дата - Период начала интервала набора данных;
//			** Значение - Структура - Данные Терминала.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица интервалов.
//
Функция ПолучитьИнтервалыДвижения(Объект,
								  НачДата,
								  КонДата,
								  ГеокодироватьАдреса = Ложь,
								  ВключатьДанныеДатчиков = Неопределено,
								  ПараметрыБулево = Неопределено,
								  ОпределятьМестоположение = Ложь,
								  ДанныеТерминаловСРассчтаннымиТреками = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыБулево) = Тип("Структура") Тогда
		ИспользоватьДанныеРегистраИнтервалыДвижения = ?(ПараметрыБулево.Свойство("ИспользоватьДанныеРегистраИнтервалыДвижения"), ПараметрыБулево.ИспользоватьДанныеРегистраИнтервалыДвижения, 	Истина);
		ИспользоватьПоправочныйКоэффициент 			= ?(ПараметрыБулево.Свойство("ИспользоватьПоправочныйКоэффициент"), 		 ПараметрыБулево.ИспользоватьПоправочныйКоэффициент, 			Истина);
		ВключатьДанныеТерминала 					= ?(ПараметрыБулево.Свойство("ВключатьДанныеТерминала"), 					 ПараметрыБулево.ВключатьДанныеТерминала, 						Истина);
		РассчитыватьДанныеВыработки 				= ?(ПараметрыБулево.Свойство("РассчитыватьДанныеВыработки"), 				 ПараметрыБулево.РассчитыватьДанныеВыработки, 					Ложь);
	Иначе
		ИспользоватьДанныеРегистраИнтервалыДвижения	= Истина;
		ИспользоватьПоправочныйКоэффициент			= Истина;
		ВключатьДанныеТерминала						= Истина;
		РассчитыватьДанныеВыработки					= Ложь;
	КонецЕсли; 	
	
	Если ТипЗнч(ВключатьДанныеДатчиков) = Тип("Массив") Тогда
		КешПоискаУникальныхДатчиков = Новый Соответствие;
		Для каждого ДатчикСсылка Из ВключатьДанныеДатчиков Цикл
			Если КешПоискаУникальныхДатчиков[ДатчикСсылка] = Неопределено Тогда
				КешПоискаУникальныхДатчиков.Вставить(ДатчикСсылка, Истина);		
			Иначе
				ТекстСообщенияОбОшибкеНачало = "По объекту ""%1"" не удалось рассчитать интервалы движения. 
											   |Датчик ""%2"" указан несколько раз. 
											   |Причиной могут быть некорректно настроенные параметры выработки (например, два одинаковых по смыслу параметра выработки)";
				ТекстСообщенияОбОшибке = СтрШаблон(ТекстСообщенияОбОшибкеНачало, Строка(Объект), Строка(ДатчикСсылка));
				ЗаписьЖурналаРегистрации("Ошибка при расчете интервалов движения",
										 УровеньЖурналаРегистрации.Ошибка,,,
										 ТекстСообщенияОбОшибке);
										 
				ВызватьИсключение ТекстСообщенияОбОшибке;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ТаблицаИнтервалов = Неопределено;	
	
	Если ИспользоватьДанныеРегистраИнтервалыДвижения
		И ВключатьДанныеДатчиков=Неопределено
		И (НЕ ВключатьДанныеТерминала)
		И НачДата=НачалоДня(НачДата)
		И (КонДата = КонецДня(КонДата) ИЛИ КонДата = НачалоДня(КонДата))
		И (НачалоДня(НачДата)=НачалоДня(КонДата) ИЛИ НачалоДня(НачДата)=НачалоДня(КонДата-1)) Тогда
		
		// Попробуем запросить данные у регистра
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата", НачДата);
		Запрос.УстановитьПараметр("КонДата", КонДата);
		Запрос.УстановитьПараметр("Объект" , Объект);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ItobИнтервалыДвижения.НачалоИнтервала КАК ВремяНач,
		               |	ItobИнтервалыДвижения.КонецИнтервала КАК ВремяКон,
		               |	ItobИнтервалыДвижения.Состояние,
		               |	ПРЕДСТАВЛЕНИЕ(ItobИнтервалыДвижения.Состояние) КАК СостояниеСтрока,
		               |	ItobИнтервалыДвижения.Длительность,
		               |	ItobИнтервалыДвижения.СредняяСкорость,
		               |	ItobИнтервалыДвижения.МаксимальнаяСкорость,
		               |	ItobИнтервалыДвижения.Пробег,
		               |	ItobИнтервалыДвижения.МестоСтоянки,
		               |	ItobИнтервалыДвижения.ДанныеВыработки
		               |ИЗ
		               |	РегистрНакопления.ItobИнтервалыДвижения КАК ItobИнтервалыДвижения
		               |ГДЕ
		               |	ItobИнтервалыДвижения.Период МЕЖДУ &НачДата И &КонДата
		               |	И ItobИнтервалыДвижения.Объект = &Объект
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВремяНач";
					   
		ТаблицаИнтервалов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаИнтервалов.Количество()=0 Тогда
			ТаблицаИнтервалов = Неопределено;	
		
		КонецЕсли;		
	
	КонецЕсли;
	
	Если ТаблицаИнтервалов = Неопределено Тогда
		ТаблицаИнтервалов = ПолучитьИнтервалыПоДаннымТерминала(Объект, НачДата, КонДата, ГеокодироватьАдреса,
			ВключатьДанныеДатчиков, РассчитыватьДанныеВыработки, ОпределятьМестоположение,,, ДанныеТерминаловСРассчтаннымиТреками);
		
	КонецЕсли;
	
	ПоправочныйКоэффициентНаПробег = ПолучитьПоправочныйКоэффициентПробегаСПроверкойМетаданных(Объект, ИспользоватьПоправочныйКоэффициент);
		
	Если НЕ ПоправочныйКоэффициентНаПробег = 1 Тогда
		Для каждого Стр Из ТаблицаИнтервалов Цикл
			Стр.Пробег = Стр.Пробег*ПоправочныйКоэффициентНаПробег;		
		КонецЦикла;		
	
	КонецЕсли;
	
	Возврат ТаблицаИнтервалов;

КонецФункции

// Возвращает коэффициент пробега объекта с учетом проверки метаданных.
//
// Параметры:
//  Объект								 - СправочникСсылка.ItobТранспортныеСредства - Указатель на транспортное средство.
//  ИспользоватьПоправочныйКоэффициент	 - Булево									 - Использовать поправочный коэффициент.
// 
// Возвращаемое значение:
//  Число - Поправочный коэффициент на пробег.
//
Функция ПолучитьПоправочныйКоэффициентПробегаСПроверкойМетаданных(Объект, ИспользоватьПоправочныйКоэффициент)
	
	ПоправочныйКоэффициентНаПробег = 1;
	Если ИспользоватьПоправочныйКоэффициент 
		 И ЗначениеЗаполнено(Объект) 
		 И ItobОбщегоНазначения.ЭтоТС(Объект) Тогда
		 
		ИмяСправочникаМоделиТС = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("МаркиТранспорта");
		ИмяРеквизитаМодели = ItobОбщегоНазначения.ИмяРеквизитаОбъектаПоТипу(Объект, Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка(), "Марка");
		
		ПоправочныйКоэффициентНаПробег = ПолучитьПоправочныйКоэффициентПробега(Объект[ИмяРеквизитаМодели], Объект);
	КонецЕсли; 
	
	
	Возврат ПоправочныйКоэффициентНаПробег;
			
КонецФункции
 
// Возвращает пробег объекта.
//
// Параметры:
//  ТекущийОбъект						 - СправочникСсылка - Объект мониторинга.
//  НачДата								 - Дата	- Начала периода пробега.
//  КонДата								 - Дата	- Окончание периода пробега.
//  ИспользоватьПоправочныйКоэффициент	 - Булево - Использование поправочного коэффициента.
// 
// Возвращаемое значение:
//  Число - Пробег
//
Функция ПолучитьПробегОбъекта(ТекущийОбъект, НачДата, КонДата, ИспользоватьПоправочныйКоэффициент = Истина) Экспорт
	
	// В сутках 60*60*2400 = 86400 секунд.
	Сутки = 86400;
	
	// Если получаем пробег за весь текущий день, конечная дата для правильного расчета должна быть текущим временем.
	КонДата = ItobОбщегоНазначенияКлиентСервер.МинЗнч(КонДата, ТекущаяДатаСеанса());
	
	// Получаем начало и конец периода по дням.
	НачалоПериода = НачалоДня(НачДата);
	КонецПериода  = КонецДня(КонДата);
	
	// Проверяем, являются ли необходимые периоды дневными.
	ПериодНачалоДня = (НачалоПериода = НачДата);
	ПериодКонецДня  = (КонецПериода = КонДата);
		
	Если НачалоДня(НачДата) = НачалоДня(КонДата) И НЕ (ПериодКонецДня Или ПериодНачалоДня) Тогда
		// Если необходимо получить внутри одного дня.
		ПробегИтог = ПолучитьИнтервалыДвижения(ТекущийОбъект, НачДата, КонДата).Итог("Пробег");
	Иначе
		
		// Получаем периоды для запроса
		ПериодЗапросаНачало = ?(ПериодНачалоДня, НачДата, НачалоПериода+Сутки);
		ПериодЗапросаКонец  = ?(ПериодКонецДня, КонДата, КонецПериода-Сутки)+1;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЕСТЬNULL(СУММА(ItobИнтервалыДвиженияОбороты.ПробегОборот), 0) КАК ПробегОборот
		                      |ИЗ
		                      |	РегистрНакопления.ItobИнтервалыДвижения.Обороты(&НачалоПериода, &КонецПериода, День, Объект = &Объект) КАК ItobИнтервалыДвиженияОбороты");
		Запрос.УстановитьПараметр("НачалоПериода", ПериодЗапросаНачало);
		Запрос.УстановитьПараметр("КонецПериода", ПериодЗапросаКонец);
		Запрос.УстановитьПараметр("Объект", ТекущийОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПоправочныйКоэффициентНаПробег = ПолучитьПоправочныйКоэффициентПробегаСПроверкойМетаданных(ТекущийОбъект, ИспользоватьПоправочныйКоэффициент);
		    ПробегИтог = Выборка.ПробегОборот*ПоправочныйКоэффициентНаПробег;
		КонецЕсли;
	
		// Получаем пробеги периодов, которые не вошли в запрос.
		Если НЕ ПериодНачалоДня Тогда
		    ПробегИтог = ПробегИтог+ПолучитьИнтервалыДвижения(ТекущийОбъект, НачДата, ПериодЗапросаНачало).Итог("Пробег");
		КонецЕсли; 
		Если НЕ ПериодКонецДня Тогда
		    ПробегИтог = ПробегИтог+ПолучитьИнтервалыДвижения(ТекущийОбъект, ПериодЗапросаКонец, КонДата).Итог("Пробег");
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ПробегИтог;	

КонецФункции // ПолучитьПробегОбъекта()

#КонецОбласти 

#Область УстаревшиеПроцедурыИФункции
	
// Устарела. Следует использовать новую (ItobОбщегоНазначения.ПолучитьПривязанныйТерминал).
//
// Параметры:
//  ТекущийОбъект	 - СправочникСсылка - Объект мониторинга.
//  НаДату			 - Дата	- Учетная дата.
// 
// Возвращаемое значение:
//  СправочникСсылка.ItobТерминалы - Привязанный терминал.
//
Функция ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Возврат ItobОбщегоНазначения.ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату);

КонецФункции // ПолучитьПривязанныйТерминал()

#КонецОбласти 
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ФункцииОбщегоНазначения

// Вычисляет промежуточную точку по правилам простых пропорций
//
Функция ПолучитьТочкуНаДату(Точка1,Точка2,НаДату)
	
	Результат = Новый Структура();
	Результат.Вставить("Период",НаДату);
	Результат.Вставить("ПериодUTC0",ПривестиКДатеВремениПоГринвичу(НаДату));
	Результат.Вставить("Широта",0);
	Результат.Вставить("Долгота",0);
	Результат.Вставить("Скорость",0);
	Результат.Вставить("Направление",0);
		
	Если НЕ (Точка1.Период < НаДату И НаДату < Точка2.Период) Тогда	
		Возврат Результат;
		
	КонецЕсли;
	
	x1 = Точка1.Долгота;
	y1 = Точка1.Широта;
	x2 = Точка2.Долгота;
	y2 = Точка2.Широта;
	
	t1 = Точка1.Период;
	t2 = Точка2.Период;
	
	dT = t2 - t1;
	dT3 = НаДату - t1;
		
	Результат.Широта = (y2-y1)*dT3/dT + y1;
	Результат.Долгота = (x2-x1)*dT3/dT + x1;
	Результат.Скорость = (Точка1.Скорость + Точка2.Скорость)/2;
	
	Возврат Результат;	

КонецФункции // ПолучитьТочкуНаДату()

Функция УсловиеНазначеннойКомандыВыполняется(ДанныеОбъекта, Показатель, ВидСравнения, Значение)
	
	ЛевоеЗначение = Неопределено;
	
	Если Показатель = "Состояние"
		 ИЛИ Показатель = "Скорость"
		 ИЛИ Показатель = "Направление" 
		 ИЛИ Показатель = "ОтсутствуютДанныеМинуты" 
		 ИЛИ Показатель = "ОтсутствуютДанныеЧасы" Тогда
		
		ЛевоеЗначение = ДанныеОбъекта[Показатель];				
	ИначеЕсли ТипЗнч(Показатель) = Тип("СправочникСсылка.ItobНазначенияДатчиков") Тогда	
		КодДатчика = ДанныеОбъекта["КодДатчикаНазначение"+СокрЛП(Показатель.Код)];
		СтруктураДанныеДатчиков = ItobОбщегоНазначения.ПреобразоватьСтрокуВДанныеДатчиков(ДанныеОбъекта.ДанныеДатчиков);
		ЛевоеЗначение = СтруктураДанныеДатчиков[КодДатчика];		
	КонецЕсли;
	
	Попытка		
		Если ВидСравнения = ПредопределенноеЗначение("Перечисление.ItobВидыСравнения.НеРавно") Тогда	
			Результат = Вычислить("НЕ (ЛевоеЗначение = Значение)");		
		Иначе
			Результат = Вычислить("ЛевоеЗначение "+Строка(ВидСравнения)+" Значение");		
		КонецЕсли;		
	Исключение
		Результат = Ложь;	
	КонецПопытки;
	
	
	Возврат Результат;	

КонецФункции

// Процедура добавляет колонки со значениями датчиков 
//
Процедура ДобавитьКолонкиДатчиков(Источник, Приемник)
	
	Для Счетчик = 0 По Источник.Колонки.Количество()-1 Цикл
		
		Если Найти(Источник.Колонки[Счетчик].Имя, "ЗначениеДатчика") > 0 Тогда
			
			Если Приемник.Колонки.Найти(Источник.Колонки[Счетчик].Имя) = Неопределено Тогда
				Приемник.Колонки.Добавить(Источник.Колонки[Счетчик].Имя, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20,0)));				
			
			КонецЕсли;			
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция СформироватьПараметрыОбработкиДанных(МинимальнаяСкоростьДвижения,МинимальноеВремяСтоянки,МинимальныйИнтервалОтправкиДанных,
											 ОтключитьНормализациюТочекДвижения,ДопустимыйРадиусСтоянки,МаксимальнаяВалиднаяСкоростьДвижения,
											 МетодОпределениеДвижения)
	Результат = Новый Структура();
	Результат.Вставить("МинимальнаяСкоростьДвижения", МинимальнаяСкоростьДвижения);
	Результат.Вставить("МинимальноеВремяСтоянки", МинимальноеВремяСтоянки);
	Результат.Вставить("МинимальныйИнтервалОтправкиДанных", МинимальныйИнтервалОтправкиДанных);
	Результат.Вставить("ОтключитьНормализациюТочекДвижения", ОтключитьНормализациюТочекДвижения);
	Результат.Вставить("ДопустимыйРадиусСтоянки", ДопустимыйРадиусСтоянки);
	Результат.Вставить("МаксимальнаяВалиднаяСкоростьДвижения", МаксимальнаяВалиднаяСкоростьДвижения);
	Результат.Вставить("ОпределениеДвижения", МетодОпределениеДвижения);
	
	Если НЕ ЗначениеЗаполнено(Результат.ОпределениеДвижения) Тогда
		Результат.ОпределениеДвижения = Перечисления.ItobМетодыОпределенияДвижения.GpsСкорость;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // СформироватьПараметрыОбработкиДанных()

#КонецОбласти

#Область ФункцииРаботыССервисомCsmCvs

// Возвращает версию сервиса CsmSvc
//
Функция ПолучитьВерсиюCsmSvc()
		
	Сервер = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес");
	Порт   = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт");
	
	Результат = "";
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	ЗапросHTTP = Новый HTTPЗапрос("/Version");
	Попытка
		ОтветHTTP = HTTP.ВызватьHTTPМетод("GET", ЗапросHTTP);		
		Результат = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'CsmSvc'","ru"),УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка обращения к странице /Version'"));
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ПолучитьВерсиюCsmSvc()

#КонецОбласти

#Область ФункцииВзаимодействияСКартой

// Возвращает ссылку на html страницу карты
//
Функция ПолучитьСсылкуНаСтраницуКарты(СодержаниеСтраницы)
	
	Сервер = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверАдрес");
	Порт   = ПараметрыСеанса.ItobАдресCsmSvc.Получить("СерверПорт");
	
	СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	АдресСервераОбращениеКлиента = ПолучитьАдресСервисаCsmSvcКлиент();
	
	Результат = Протокол+"://" + АдресСервераОбращениеКлиента + "/map/map.html";
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	ЗапросHTTP = Новый HTTPЗапрос("/SetMapData");
	ЗапросHTTP.УстановитьТелоИзСтроки(СодержаниеСтраницы, "UTF-8");
	Попытка
		ОтветHTTP = HTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
		СтрокаОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		Результат = Протокол+"://" + АдресСервераОбращениеКлиента + СтрПолучитьСтроку(СтрокаОтвета,1);				
	Исключение
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка установки карты:'")+" "+ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;	

КонецФункции // ПолучитьСсылкуНаСтраницуКарты()

// Возвращает контент HTML страницы карты
//
Функция ПолучитьКонтентКарты()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическиеКарты.Наименование КАК Наименование,
	               |	ItobГеографическиеКарты.Сервер,
	               |	ItobГеографическиеКарты.Правообладатель,
	               |	ItobГеографическиеКарты.СайтПравообладателя,
	               |	ItobГеографическиеКарты.Атрибуты,
	               |	ItobГеографическиеКарты.СлойПодложки,
	               |	ItobГеографическиеКарты.Идентификатор,
	               |	ItobГеографическиеКарты.СекцияHEAD,
	               |	ItobГеографическиеКарты.НестандартнаяПроекция,
	               |	ItobГеографическиеКарты.СлойПодложки.Атрибуты КАК СлойПодложкиАтрибуты,
	               |	ItobГеографическиеКарты.СлойПодложки.НестандартнаяПроекция КАК СлойПодложкиНестандартнаяПроекция,
	               |	ItobГеографическиеКарты.СлойПодложки.Сервер КАК СлойПодложкиСервер
	               |ИЗ
	               |	Справочник.ItobГеографическиеКарты КАК ItobГеографическиеКарты
	               |ГДЕ
	               |	(НЕ ItobГеографическиеКарты.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ItobГеографическиеКарты.Сортировка,
	               |	Наименование";
				   
	Результат = "";
	ТекстHEAD = "";
	
	СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
		
	Счетчик = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		АтрибутыКарты = Выборка.Атрибуты;
		
		Если НЕ Выборка.СлойПодложки.Пустая() Тогда
			
			АтрибутыПодложки = Выборка.СлойПодложкиАтрибуты;
			
			ИмяСлоя = "Layer"+Формат(Счетчик,"ЧГ=0");
			
			Если Выборка.СлойПодложкиНестандартнаяПроекция Тогда
				ТекАтрибуты = СокрЛП(Выборка.СлойПодложкиАтрибуты);
				Если Прав(ТекАтрибуты,1) = ")" Тогда
					ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
					Если Прав(ТекАтрибуты,1) = "}" Тогда
						ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
						ТекАтрибуты = ТекАтрибуты+Символы.ПС+",top_layer: "+ИмяСлоя+"})"					
					КонецЕсли;				
				КонецЕсли;
				СтрСкриптКартыПодложка = ТекАтрибуты+";";
			Иначе
				СтрСкриптКартыПодложка = 
					"new OpenLayers.Layer.MapEPSG_900913('"+СтрЗаменить(Выборка.Наименование,"'","''")+"',
					|	'"+СтрЗаменить(Выборка.СлойПодложкиСервер,"'","''")+"',
					|	{ 
					|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>',
					|		top_layer: "+ИмяСлоя+"
					|		"+?(ПустаяСтрока(АтрибутыПодложки),"",",")+АтрибутыПодложки+"					
					|	});";
					
			КонецЕсли;				
			
			Если Выборка.НестандартнаяПроекция Тогда
				ТекАтрибуты = СокрЛП(Выборка.Атрибуты);
				Если Прав(ТекАтрибуты,1) = ")" Тогда
					ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
					Если Прав(ТекАтрибуты,1) = "}" Тогда
						ТекАтрибуты = СокрЛП(Лев(ТекАтрибуты,СтрДлина(ТекАтрибуты)-1));
						ТекАтрибуты = ТекАтрибуты+Символы.ПС+",isBaseLayer:false, visibility:false, displayInLayerSwitcher:false })"
					КонецЕсли;				
				КонецЕсли;				
				СтрСкриптКарты = ТекАтрибуты+";";
			Иначе
				СтрСкриптКарты = 
					"new OpenLayers.Layer.MapEPSG_900913('"+ИмяСлоя+"',
					|	'"+СтрЗаменить(Выборка.Сервер,"'","''")+"',
					|	{ 
					|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>'
					|		,isBaseLayer:false, visibility:false, displayInLayerSwitcher:false
					|		"+?(ПустаяСтрока(АтрибутыКарты),"",",")+АтрибутыКарты+"					
					|	});";
					
			КонецЕсли;
			
			
			Результат = Результат + "	
			    |var "+ИмяСлоя+" = "+СтрСкриптКарты+"
				|layers.push("+ИмяСлоя+");
				|				
				|var Base"+ИмяСлоя+" = "+СтрСкриптКартыПодложка+"				
				|Base"+ИмяСлоя+".setName('"+СтрЗаменить(Выборка.Наименование,"'","''")+"');
				|
				|LayersWithBackingLayers.push(Base"+ИмяСлоя+");
				|layers.push(Base"+ИмяСлоя+");";
			
				
			Счетчик = Счетчик+1;
			
		Иначе
			
			Если Выборка.НестандартнаяПроекция Тогда
				СтрСкриптКарты = Выборка.Атрибуты;				
			Иначе				
				СтрСкриптКарты = 
					"new OpenLayers.Layer.MapEPSG_900913('"+СтрЗаменить(Выборка.Наименование,"'","''")+"',
					|	'"+СтрЗаменить(Выборка.Сервер,"'","''")+"',
					|	{ 
					|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>'
					|		"+?(ПустаяСтрока(АтрибутыКарты),"",",")+АтрибутыКарты+"					
					|	})";
				
			КонецЕсли;
			
			Результат = Результат + "	
				|layers.push("+СтрСкриптКарты+"				
				|);";
	
				
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(Выборка.СекцияHEAD) Тогда
			ТекстHEAD = ?(ТекстHEAD="","",ТекстHEAD+Символы.ПС) + СокрЛП(Выборка.СекцияHEAD);				
			
		КонецЕсли;
	
	КонецЦикла;
		
	Если ПустаяСтрока(Результат) Тогда
		Результат = 
			"layers.push(new OpenLayers.Layer.MapEPSG_900913(""OSM (Mapnik)"",
	        |        	""http://tile.openstreetmap.org/"",
			|			{ 
			|				attribution: '<a href=""http://www.openstreetmap.org/"">OpenStreetMap</a>',
			|				getTileAddress: function(bounds,x,y,z) {
			|					var subs = [ 'a', 'b', 'c' ];	
			|					return ""http://"" + subs[(x+y)%3] + "".tile.openstreetmap.org/"" + z + ""/"" + x + ""/"" + y + "".png"";
			|				}					
	        |           })				
			|		);";	
	
	КонецЕсли;
		
	Результат = 
		"try {
		|"+Результат+"
		|} catch(err) {}";	
		
	Возврат Новый Структура("КонтентMAPS,КонтентHEAD", Результат, ТекстHEAD);

КонецФункции

#КонецОбласти

#Область ФункцииОбработкиДанныхТрекеров

// Возвращает данные датчика по терминалу
//
Функция ПолучитьДанныеДатчикаПоТерминалу(Знач НачДата, Знач КонДата, Терминал, Датчик, КоличествоДополнительныхЗаписей = 0, ПредварительноРассчитанныйТрекТерминала = Неопределено)

	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	
	Если ТипЗнч(Датчик) = Тип("Массив") Тогда
		МассивДатчиков = Датчик;		
	Иначе
		МассивДатчиков = Новый Массив;
		МассивДатчиков.Добавить(Датчик);
	КонецЕсли;
	
	Если ПредварительноРассчитанныйТрекТерминала = Неопределено Тогда
		ПараметрыТрека = ItobРепликация.ПараметрыТрека();
		ПараметрыТрека.Терминал = Терминал;
		ПараметрыТрека.ДатаНачала = НачДата;
		ПараметрыТрека.ДатаОкончания = КонДата;
		ПараметрыТрека.ТолькоВалидные = Ложь;
		ПараметрыТрека.КоличествоДополнительныхЗаписей = КоличествоДополнительныхЗаписей;
		ПараметрыТрека.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные;
		ТаблицаБазовыхДанных = ItobРепликация.ТрекТерминала(ПараметрыТрека);
	Иначе
		ТаблицаБазовыхДанных = ПредварительноРассчитанныйТрекТерминала;
	КонецЕсли;

	ТаблицаБазовыхДанных.Индексы.Добавить("Период");
	ТаблицаБазовыхДанных.Сортировать("Период");	
	
	Если ТаблицаБазовыхДанных.Количество() > 0 Тогда		
		МассивУдаленияСтрок = Новый Массив;
		ТекДатаБД = ТаблицаБазовыхДанных[0].Период;
		Для Счетчик = 1 По ТаблицаБазовыхДанных.Количество() - 1 Цикл
			Если ТаблицаБазовыхДанных[Счетчик].Период = ТекДатаБД Тогда
				МассивУдаленияСтрок.Добавить(ТаблицаБазовыхДанных[Счетчик]);
			Иначе
				ТекДатаБД = ТаблицаБазовыхДанных[Счетчик].Период;
			КонецЕсли;
		КонецЦикла;	
		Для каждого СтрУдаления Из МассивУдаленияСтрок Цикл
			 ТаблицаБазовыхДанных.Удалить(СтрУдаления);
		КонецЦикла;			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаБазовыхДанных", ТаблицаБазовыхДанных);
	Запрос.УстановитьПараметр("Терминал", Терминал); 
	Запрос.УстановитьПараметр("Датчик", МассивДатчиков[0]);   // Для совместимости указываем первый датчик
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаБазовыхДанных.Период,
	|	ТаблицаБазовыхДанных.Широта,
	|	ТаблицаБазовыхДанных.Долгота,
	|	ТаблицаБазовыхДанных.Скорость,
	|	ТаблицаБазовыхДанных.Направление,
	|	ТаблицаБазовыхДанных.ЧислоСпутников,
	|	ТаблицаБазовыхДанных.НевалидныеДанные,
	|	ТаблицаБазовыхДанных.ВерсияФормата
	|ПОМЕСТИТЬ ДанныеТерминалов
	|ИЗ
	|	&ТаблицаБазовыхДанных КАК ТаблицаБазовыхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Терминал КАК Терминал,
	|	&Датчик КАК Датчик,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Период,	              
	|	ДанныеТерминалов.Широта,
	|	ДанныеТерминалов.Долгота,
	|	ДанныеТерминалов.Скорость,
	|	ДанныеТерминалов.Направление,
	|	ДанныеТерминалов.НевалидныеДанные,
	|	ДанныеТерминалов.ВерсияФормата,
	|	ДанныеТерминалов.Период КАК ПериодUTC0
	|ИЗ
	|	ДанныеТерминалов КАК ДанныеТерминалов	
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодUTC0
	|";
				   
	ТабДанных = Запрос.Выполнить().Выгрузить();
	
	ТипКолонкиЗначениеДатчика = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0));	
	
	ТабДанных.Колонки.Добавить("Значение", ТипКолонкиЗначениеДатчика);
	ТабДанных.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	
	МассивКодыДатчиков = Новый Массив;
	Для каждого ТекущийДатчик Из МассивДатчиков Цикл
		КодДатчикаСтрокой = Формат(ТекущийДатчик.Код, "ЧН=0; ЧГ=0");
		ТабДанных.Колонки.Добавить("Значение" + КодДатчикаСтрокой, ТипКолонкиЗначениеДатчика);	
		МассивКодыДатчиков.Добавить(КодДатчикаСтрокой);
	КонецЦикла;
	
	ПервыйДатчик = МассивДатчиков[0];
	КодПервогоДатчикаСтрокой = Формат(ПервыйДатчик.Код, "ЧН=0; ЧГ=0");
	ПервыйДатчикДискретный = (ПервыйДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Дискретный);
	СоответствиеРасшифровки = Новый Соответствие;
	Если ПервыйДатчикДискретный Тогда
		НайденнаяСтрокаДатчики = Терминал.Датчики.Найти(ПервыйДатчик, "Датчик");
		Если НайденнаяСтрокаДатчики <> Неопределено Тогда
			Назначение = НайденнаяСтрокаДатчики.Назначение;
			Если Не Назначение.Пустая() Тогда
				Для каждого СтрРасшифровкаПоказаний Из Назначение.РасшифровкаПоказаний Цикл
					СоответствиеРасшифровки.Вставить(СтрРасшифровкаПоказаний.Показание, СтрРасшифровкаПоказаний.Расшифровка);									
				КонецЦикла;			
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;
	
	МассивСтрокНаУдаление = Новый Массив;
	Счетчик = 0;
	Для каждого СтрОсновнойТаблицы Из ТабДанных Цикл
		ЗначенияДатчиков = ТаблицаБазовыхДанных[Счетчик].ДанныеДатчиков_Обработанные;
		
		СтрОсновнойТаблицы.Значение = ЗначенияДатчиков[КодПервогоДатчикаСтрокой];	
		Если СтрОсновнойТаблицы.Значение = Неопределено Тогда
			// Вынуждены удалить эту строку.			
			МассивСтрокНаУдаление.Добавить(СтрОсновнойТаблицы);				
		ИначеЕсли ПервыйДатчикДискретный Тогда
			СтрОсновнойТаблицы.Расшифровка = ?(СоответствиеРасшифровки[СтрОсновнойТаблицы.Значение] = Неопределено, "", СоответствиеРасшифровки[СтрОсновнойТаблицы.Значение]);				
		КонецЕсли;	
		
		Для каждого КодДатчикаСтрокой Из МассивКодыДатчиков Цикл
			ИмяКолонкиЗначениеДатчика = "Значение" + КодДатчикаСтрокой;
			ЗначениеДатчика = ЗначенияДатчиков[КодДатчикаСтрокой];
			Если НЕ ЗначениеДатчика = Неопределено Тогда
				СтрОсновнойТаблицы[ИмяКолонкиЗначениеДатчика] = ЗначениеДатчика;	
			КонецЕсли; 		
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
	КонецЦикла; 
	
	Для Каждого СтрУдаления Из МассивСтрокНаУдаление Цикл
		ТабДанных.Удалить(СтрУдаления);		
	КонецЦикла;
	
	
	Возврат ТабДанных;

КонецФункции

// Раскладывает маршрут объекта по состояниям - Движение/Стоянка
//
Функция ОбработатьМаршрутОбъекта(ТаблицаТочекМаршрута, ПараметрыОбработкиДанных)
			
	КоличествоТочек = ТаблицаТочекМаршрута.Количество();
	МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ = ПараметрыОбработкиДанных.МинимальныйИнтервалОтправкиДанных;
	СостоянияТерминаловСтоянка   = Перечисления.ItobСостоянияТерминалов.Стоянка;	
	СостоянияТерминаловДвижение  = Перечисления.ItobСостоянияТерминалов.Движение;	
	СостоянияТерминаловНетДанных = Перечисления.ItobСостоянияТерминалов.НетДанных;
	
	ФлагОпределениеДвиженияДатчикЗажигания = Ложь;
	ИмяКолонкиДатчикЗажигания = "";
	Если ПараметрыОбработкиДанных.ОпределениеДвижения = Перечисления.ItobМетодыОпределенияДвижения.ДатчикЗажигания
		И НЕ ПараметрыОбработкиДанных.ДатчикЗажигания.Пустая() Тогда
		
		ФлагОпределениеДвиженияДатчикЗажигания = Истина;
		ИмяКолонкиДатчикЗажигания = "ЗначениеДатчика"+Формат(ПараметрыОбработкиДанных.ДатчикЗажиганияКод,"ЧН=0; ЧГ=0");	
	КонецЕсли;	
	
	
	МинимальноеВремяСтоянкиСек = ПараметрыОбработкиДанных.МинимальноеВремяСтоянки-'00010101';
	НачалоСтоянки = Неопределено;
	
	МассивСтрокТекСтоянка = Новый Массив;
	
	Для Счетчик = 0 По КоличествоТочек-1 Цикл
		
		СтрокаТаб = ТаблицаТочекМаршрута[Счетчик];
		
		Если СтрокаТаб.Состояние = СостоянияТерминаловСтоянка Тогда
			
			МассивСтрокТекСтоянка.Добавить(СтрокаТаб);
			
			Если Счетчик = КоличествоТочек-1
				ИЛИ ТаблицаТочекМаршрута[Счетчик+1].Состояние <> СостоянияТерминаловСтоянка Тогда
									
				ПродолжительностьСтоянки = 
					МассивСтрокТекСтоянка[МассивСтрокТекСтоянка.Количество()-1].Период - МассивСтрокТекСтоянка[0].Период;
					
				Если ПродолжительностьСтоянки >= МинимальноеВремяСтоянкиСек
					ИЛИ (Счетчик < КоличествоТочек-1 И ТаблицаТочекМаршрута[Счетчик+1].Состояние = СостоянияТерминаловНетДанных) Тогда
					
					// это стоянка					
					ПроверитьИНормализоватьСтоянку(МассивСтрокТекСтоянка, ПараметрыОбработкиДанных);
															
				Иначе
					// по продолжительности это не стоянка
					Для СчетчикР = 0 По МассивСтрокТекСтоянка.Количество()-1 Цикл
						Если НЕ (ФлагОпределениеДвиженияДатчикЗажигания И МассивСтрокТекСтоянка[СчетчикР][ИмяКолонкиДатчикЗажигания]=0) Тогда
							МассивСтрокТекСтоянка[СчетчикР].Состояние = СостоянияТерминаловДвижение;							
						КонецЕсли;						
					КонецЦикла;
				
				КонецЕсли;				
				
				МассивСтрокТекСтоянка.Очистить();
			
			КонецЕсли;
		
		КонецЕсли;		
	
	КонецЦикла;
		
	// обработаем движение
	
	Если НЕ ПараметрыОбработкиДанных.ОтключитьНормализациюТочекДвижения Тогда
		МассивСтрокДвижения = Новый Массив;
		Счетчик = 0;
		Пока Счетчик <= КоличествоТочек-1 Цикл	
			
			Если ТаблицаТочекМаршрута[Счетчик].Состояние = СостоянияТерминаловДвижение Тогда
				МассивСтрокДвижения.Добавить(ТаблицаТочекМаршрута[Счетчик]);
			
			КонецЕсли;
			
			Если (ТаблицаТочекМаршрута[Счетчик].Состояние = СостоянияТерминаловСтоянка ИЛИ Счетчик = КоличествоТочек-1)
				И МассивСтрокДвижения.Количество() > 0 Тогда
				
				// смотрим продолжительность движения
				ПродолжительностьДвижения = МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1].Период - МассивСтрокДвижения[0].Период;
				Если ПродолжительностьДвижения < 60 Тогда
					
					// подсчет примерного пройденного расстояния
					ПройденноеРасстояние = 0;
					Для СчетчикМ = 1 По МассивСтрокДвижения.Количество()-1 Цикл
						ПройденноеРасстояние = ПройденноеРасстояние
							+73000*Pow(Pow(МассивСтрокДвижения[СчетчикМ].Широта-МассивСтрокДвижения[СчетчикМ-1].Широта,2)
							+Pow(МассивСтрокДвижения[СчетчикМ].Долгота-МассивСтрокДвижения[СчетчикМ-1].Долгота,2),0.5);
					
					КонецЦикла;
						
					Если ПройденноеРасстояние < 50 Тогда
						// Считаем данные точки - стоянкой					
						
						ЕстьСтоянкаДо = ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[0]) > 0;
						ЕстьСтоянкаПосле = ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1]) < КоличествоТочек-1;
						СтрокаСтоянкиДо = ?(ЕстьСтоянкаДо,ТаблицаТочекМаршрута[ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[0])-1],Неопределено);
						СтрокаСтоянкиПосле = ?(ЕстьСтоянкаПосле,ТаблицаТочекМаршрута[ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1])+1],Неопределено);
						
						ЕстьСтоянкаДо = ?(ЕстьСтоянкаДо, СтрокаСтоянкиДо.Состояние=СостоянияТерминаловСтоянка, ЕстьСтоянкаДо);
						ЕстьСтоянкаПосле = ?(ЕстьСтоянкаПосле, СтрокаСтоянкиПосле.Состояние=СостоянияТерминаловСтоянка, ЕстьСтоянкаПосле);
						
						Если ЕстьСтоянкаДо И ЕстьСтоянкаПосле Тогда
							СтрокаСтоянкиДо.Широта = (СтрокаСтоянкиДо.Широта + СтрокаСтоянкиПосле.Широта)/2;
							СтрокаСтоянкиДо.Долгота = (СтрокаСтоянкиДо.Долгота + СтрокаСтоянкиПосле.Долгота)/2;
							
							Для каждого СтрокаДвижения Из МассивСтрокДвижения Цикл
								СтрокаДвижения.Состояние = СостоянияТерминаловСтоянка;
							КонецЦикла;
							
							Счетчик = Счетчик - 1 - МассивСтрокДвижения.Количество();
							
						ИначеЕсли ЕстьСтоянкаДо Тогда
													
							Для каждого СтрокаДвижения Из МассивСтрокДвижения Цикл
								СтрокаДвижения.Состояние = СостоянияТерминаловСтоянка;
							КонецЦикла;
							
							Счетчик = Счетчик - МассивСтрокДвижения.Количество();
							
						ИначеЕсли ЕстьСтоянкаПосле Тогда
							СтрокаСтоянкиПосле.Период = МассивСтрокДвижения[0].Период;
													
							Для каждого СтрокаДвижения Из МассивСтрокДвижения Цикл
								СтрокаДвижения.Состояние = СостоянияТерминаловСтоянка;
							КонецЦикла;
							
							Счетчик = Счетчик - МассивСтрокДвижения.Количество();
						
						КонецЕсли;					
					
					КонецЕсли;	
				
				КонецЕсли;
				
				МассивСтрокДвижения.Очистить();
				
			КонецЕсли;
			
			Если НЕ ТаблицаТочекМаршрута[Счетчик].Состояние = СостоянияТерминаловДвижение Тогда
				МассивСтрокДвижения.Очистить();			
			КонецЕсли;
			
			Счетчик = Счетчик + 1;		
		КонецЦикла;	
	КонецЕсли;
	
	
	Если МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ > 0 Тогда	
		Счетчик = 1;
		Пока Счетчик <= КоличествоТочек-1 Цикл
			Если (НЕ ТаблицаТочекМаршрута[Счетчик-1].Состояние = СостоянияТерминаловНетДанных)
				И ТаблицаТочекМаршрута[Счетчик].Период-ТаблицаТочекМаршрута[Счетчик-1].Период > МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ Тогда
				
				ПредыдущаяСтрока = ТаблицаТочекМаршрута[Счетчик-1];
				
				НовСтрока = ТаблицаТочекМаршрута.Вставить(Счетчик);
				НовСтрока.Период  = ПредыдущаяСтрока.Период + 1;
				НовСтрока.ПериодUTC0 = ПредыдущаяСтрока.ПериодUTC0 + 1;				
				НовСтрока.Состояние = СостоянияТерминаловНетДанных;
				НовСтрока.Широта = ПредыдущаяСтрока.Широта;
				НовСтрока.Долгота = ПредыдущаяСтрока.Долгота;
			КонецЕсли;
			
			Счетчик = Счетчик+1;
		КонецЦикла;	
	КонецЕсли;
	
	
	Возврат ТаблицаТочекМаршрута;
	
КонецФункции

#КонецОбласти

#Область ФункцииПолученияСводнойИнформации

Функция ПолучитьИнтервалыПоДаннымТерминала(Объект, 
										   НачДата, 
										   КонДата, 
										   ГеокодироватьАдреса = Ложь, 
										   Знач ВключатьДанныеДатчиков=Неопределено, 
										   РассчитыватьДанныеВыработки=Ложь, 
										   ОпределятьМестоположение = Ложь, 
										   ОпределятьРазрешенныеСкоростиПоПДД = Ложь,
										   ДобавитьДанныеВсехДатчиков = Ложь,
										   ДанныеТерминаловСРассчтаннымиТреками = Неопределено) Экспорт

	РадиусФиксацииПоУмолчанию = ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку(50);
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("ВремяНач",        Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИнтервалов.Колонки.Добавить("ВремяКон",        Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИнтервалов.Колонки.Добавить("Состояние",       Новый ОписаниеТипов("ПеречислениеСсылка.ItobСостоянияТерминалов"));
	ТаблицаИнтервалов.Колонки.Добавить("СостояниеСтрока", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаИнтервалов.Колонки.Добавить("Длительность",    Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ТаблицаИнтервалов.Колонки.Добавить("СредняяСкорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаИнтервалов.Колонки.Добавить("МаксимальнаяСкорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаИнтервалов.Колонки.Добавить("Пробег",          Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,7)));
	ТаблицаИнтервалов.Колонки.Добавить("МестоСтоянки",    Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	ТаблицаИнтервалов.Колонки.Добавить("ДанныеТерминала");
	ТаблицаИнтервалов.Колонки.Добавить("ДанныеВыработки", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
	
	Если ОпределятьМестоположение Тогда    // *FIXIT* Нужно ли здесь местоположение? Как я понимаю, оно никогда не заполнится тут.
		ТаблицаИнтервалов.Колонки.Добавить("Местоположение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));  // *FIXIT* - Можно объединить с определением места стоянки по средним координатам
	КонецЕсли;
	 
	Если РассчитыватьДанныеВыработки Тогда		
		Если ВключатьДанныеДатчиков=Неопределено Тогда
			ВключатьДанныеДатчиков = Новый Массив;							
		КонецЕсли;
		
		ТаблицаДатчиков = ItobКалькуляцияПараметровВыработки.ПолучитьВозможныеПараметрыВыработкиОбъекта(Объект, КонДата);
		Для каждого СтрокаДатчиков Из ТаблицаДатчиков Цикл	
			ДатчикНайден = Ложь;
			Для каждого ТекущийДатчик Из ВключатьДанныеДатчиков Цикл
				Если ТекущийДатчик = СтрокаДатчиков.Датчик Тогда
					ДатчикНайден = Истина;
					Прервать;				
				КонецЕсли;			
			КонецЦикла;
			
			Если НЕ ДатчикНайден Тогда
				ВключатьДанныеДатчиков.Добавить(СтрокаДатчиков.Датчик);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Маршрут = СформироватьМаршрутОбъектаМониторинга(Объект, 
													НачДата, 
													КонДата, 
													ВключатьДанныеДатчиков, 
													ОпределятьМестоположение, 
													ОпределятьРазрешенныеСкоростиПоПДД,
													ДобавитьДанныеВсехДатчиков,
													ДанныеТерминаловСРассчтаннымиТреками);
	
	МаршрутКоличество = Маршрут.Количество();
	Если Маршрут = Неопределено ИЛИ МаршрутКоличество=0 Тогда
		Возврат ТаблицаИнтервалов;
	ИначеЕсли МаршрутКоличество = 1
		И (Маршрут[0].Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных
		ИЛИ Маршрут[0].Период < НачДата) Тогда
		
		Возврат ТаблицаИнтервалов;	
	КонецЕсли;
		
	ШаблонДанныеТерминала = Маршрут.СкопироватьКолонки();
	
	МассивСтрокСостояния = Новый Массив;
	МассивСтрокСостояния.Добавить(Маршрут[0]);
	
	ТекущееСостояние = Маршрут[0].Состояние;
	ТекущийПробег = 0;
	ТекущаяМаксСкорость = 0;
	
	СостоянияТерминаловДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	СостоянияТерминаловСтоянка = Перечисления.ItobСостоянияТерминалов.Стоянка;
	
	Для НомерСтроки = 0 По МаршрутКоличество-1 Цикл
		
		Если ТекущееСостояние <> Маршрут[НомерСтроки].Состояние
			 ИЛИ НомерСтроки = МаршрутКоличество-1 Тогда
			
			Если НомерСтроки = МаршрутКоличество-1 Тогда
				МассивСтрокСостояния.Добавить(Маршрут[НомерСтроки]);				
			КонецЕсли;
			
			НовСтрокаТаб = ТаблицаИнтервалов.Добавить();
			НовСтрокаТаб.ВремяНач = МассивСтрокСостояния[0].Период;
			НовСтрокаТаб.ВремяКон = МассивСтрокСостояния[МассивСтрокСостояния.Количество()-1].Период;
			НовСтрокаТаб.Состояние = ТекущееСостояние;
			НовСтрокаТаб.СостояниеСтрока = Строка(ТекущееСостояние);
			НовСтрокаТаб.МаксимальнаяСкорость = ТекущаяМаксСкорость;
			НовСтрокаТаб.Пробег = ТекущийПробег/1000;
			НовСтрокаТаб.МестоСтоянки = "";
			
			НеобходимоОпределитьМестоСтоянки = (ГеокодироватьАдреса 
											   И ТекущееСостояние=СостоянияТерминаловСтоянка
											   И МассивСтрокСостояния.Количество() > 0);
				
			СредняяШирота = 0;
			СредняяДолгота = 0;
				
			НовСтрокаТаб.ДанныеТерминала = ШаблонДанныеТерминала.Скопировать();
			Для каждого СтрокаМассива Из МассивСтрокСостояния Цикл
				ЗаполнитьЗначенияСвойств(НовСтрокаТаб.ДанныеТерминала.Добавить(), СтрокаМассива);			
				
				Если НеобходимоОпределитьМестоСтоянки Тогда
					СредняяШирота = СредняяШирота + СтрокаМассива.Широта;
					СредняяДолгота = СредняяДолгота + СтрокаМассива.Долгота;					
				КонецЕсли;	
			КонецЦикла;
			
			Если НеобходимоОпределитьМестоСтоянки Тогда                // *FIXIT* - Можно объединить с определением места стоянки по средним координатам
				СредняяШирота  = СредняяШирота/МассивСтрокСостояния.Количество();
				СредняяДолгота = СредняяДолгота/МассивСтрокСостояния.Количество();
				
				НовСтрокаТаб.МестоСтоянки = НайтиБлижайшийАдрес(СредняяШирота, СредняяДолгота, РадиусФиксацииПоУмолчанию);			
			КонецЕсли;
			
			МассивСтрокСостояния.Очистить();
			ТекущееСостояние = Маршрут[НомерСтроки].Состояние;
			ТекущийПробег = 0;
			ТекущаяМаксСкорость = 0;
		КонецЕсли;
		
		Если НомерСтроки > 0 Тогда
			МассивСтрокСостояния.Добавить(Маршрут[НомерСтроки]);			
		КонецЕсли;
						
		Если Маршрут[НомерСтроки].Состояние = СостоянияТерминаловДвижение Тогда			
			ТекущийПробег = ТекущийПробег + Маршрут[НомерСтроки].Пробег;
			ТекущаяМаксСкорость = МАКС(ТекущаяМаксСкорость, Маршрут[НомерСтроки].Скорость);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Нормализация времени в таблице
	ТаблицаИнтерваловКоличество = ТаблицаИнтервалов.Количество();
	Для Счетчик = 0 По ТаблицаИнтерваловКоличество-1 Цикл
		ТекСтрока = ТаблицаИнтервалов[Счетчик];
		
		Если Счетчик < ТаблицаИнтерваловКоличество-1 Тогда
			ТекСтрока.ВремяКон = ТаблицаИнтервалов[Счетчик+1].ВремяНач-1;
					
		КонецЕсли;		
		
		ТекСтрока.Длительность = ТекСтрока.ВремяКон-ТекСтрока.ВремяНач+?(Счетчик=ТаблицаИнтерваловКоличество-1,0,1);
		Если ТекСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
			ТекСтрока.СредняяСкорость = ?(ТекСтрока.Длительность=0,0,Окр(ТекСтрока.Пробег/ТекСтрока.Длительность*3600,1));	
			
		Иначе
			ТекСтрока.СредняяСкорость = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РассчитыватьДанныеВыработки Тогда	
		Для каждого СтрТаблицаИнтервалов Из ТаблицаИнтервалов Цикл
		
			ДанныеПараметровВыработки = Новый Соответствие;
			Для каждого СтрокаДатчиков Из ТаблицаДатчиков Цикл
				Если Не ТипЗнч(СтрокаДатчиков.КодПараметраВыработки) = Тип("Число")
					Или СтрокаДатчиков.КодПараметраВыработки > 255 Тогда
					// Код более 255 недопустим
					Продолжить;			
				КонецЕсли;
				
				ДанныеПараметра = 0;
				Если СтрокаДатчиков.ВидПараметраВыработки = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика Тогда
					ДанныеПараметра = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
						СтрТаблицаИнтервалов.ДанныеТерминала, СтрокаДатчиков.Терминал, СтрокаДатчиков.Назначение, СтрокаДатчиков.Датчик, 
						СтрокаДатчиков.КалибровочныйГрафик, СтрТаблицаИнтервалов.ВремяНач, Истина);
					
				ИначеЕсли СтрокаДатчиков.ВидПараметраВыработки = Перечисления.ItobВидыПараметровВыработки.ПодсчетИмпульсов Тогда
					ДанныеПараметра = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПодсчетИмпульсов(
						СтрТаблицаИнтервалов.ДанныеТерминала, СтрокаДатчиков.Терминал, СтрокаДатчиков.Назначение, СтрокаДатчиков.Датчик, 
						СтрокаДатчиков.КалибровочныйГрафик, Истина);					
					
				КонецЕсли;
				
				ДанныеПараметровВыработки[СтрокаДатчиков.КодПараметраВыработки] = Окр(ДанныеПараметра*1000,0);		
			КонецЦикла;
			
			СтрТаблицаИнтервалов.ДанныеВыработки = ItobОбщегоНазначенияКлиентСервер.ПреобразоватьДанныеДатчиковВСтроку(ДанныеПараметровВыработки);		
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат ТаблицаИнтервалов;	

КонецФункции

// Проверяет стоянку на соответствие настройкам
//
Процедура ПроверитьИНормализоватьСтоянку(МассивСтрокСтоянка, ПараметрыОбработкиДанных)

	СостояниеДвижение = Перечисления.ItobСостоянияТерминалов.Движение;
	СостояниеСтоянка  = Перечисления.ItobСостоянияТерминалов.Стоянка;
	
	КоличествоСтрок = МассивСтрокСтоянка.Количество();	
	Если КоличествоСтрок=0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоШирота = 0;
	ИтогоДолгота = 0;					
	
	Для Счетчик = 0 По КоличествоСтрок-1 Цикл
		ИтогоШирота = ИтогоШирота + МассивСтрокСтоянка[Счетчик].Широта;
		ИтогоДолгота = ИтогоДолгота + МассивСтрокСтоянка[Счетчик].Долгота;	
	КонецЦикла;
	
	ШиротаСтоянки = ИтогоШирота/КоличествоСтрок;
	ДолготаСтоянки = ИтогоДолгота/КоличествоСтрок;
	
	ФлагОпределениеДвиженияДатчикЗажигания = Ложь;
	ИмяКолонкиДатчикЗажигания = "";
	Если ПараметрыОбработкиДанных.ОпределениеДвижения = Перечисления.ItobМетодыОпределенияДвижения.ДатчикЗажигания
		И НЕ ПараметрыОбработкиДанных.ДатчикЗажигания.Пустая() Тогда
		
		ФлагОпределениеДвиженияДатчикЗажигания = Истина;
		ИмяКолонкиДатчикЗажигания = "ЗначениеДатчика"+Формат(ПараметрыОбработкиДанных.ДатчикЗажиганияКод,"ЧН=0; ЧГ=0");	
	КонецЕсли;
	
	Если ПараметрыОбработкиДанных.ДопустимыйРадиусСтоянки > 0 Тогда
		
		НайденыВыбивающиесяТочки = Ложь;
		
		// Расстояние одной точки стоянки от другой
		Для Счетчик = 0 По КоличествоСтрок-2 Цикл
			
			Если ФлагОпределениеДвиженияДатчикЗажигания И МассивСтрокСтоянка[Счетчик][ИмяКолонкиДатчикЗажигания]=0 Тогда
				// При выключенном зажигании - нельзя данную строку относить к движению
				Продолжить;			
			КонецЕсли;
			
			Если ПолучитьРасстояниеМеждуТочками(
				МассивСтрокСтоянка[Счетчик].Широта,МассивСтрокСтоянка[Счетчик].Долгота,
				МассивСтрокСтоянка[Счетчик+1].Широта,МассивСтрокСтоянка[Счетчик+1].Долгота) > ПараметрыОбработкиДанных.ДопустимыйРадиусСтоянки Тогда
				
				// Точка выбивается из радиуса стоянки, исключаем ее из стоянки
				МассивСтрокСтоянка[Счетчик].Состояние = СостояниеДвижение;
				НайденыВыбивающиесяТочки = Истина;
			
			КонецЕсли;			
		КонецЦикла;
		
		Если НЕ НайденыВыбивающиесяТочки Тогда
			// Расстояние точек стоянки от средней точки стоянки
			Для Счетчик = 0 По КоличествоСтрок-1 Цикл
				
				Если ФлагОпределениеДвиженияДатчикЗажигания И МассивСтрокСтоянка[Счетчик][ИмяКолонкиДатчикЗажигания]=0 Тогда
					// При выключенном зажигании - нельзя данную строку относить к движению
					Продолжить;			
				КонецЕсли;
			
				Если ПолучитьРасстояниеМеждуТочками(ШиротаСтоянки,ДолготаСтоянки,
					МассивСтрокСтоянка[Счетчик].Широта,МассивСтрокСтоянка[Счетчик].Долгота) > ПараметрыОбработкиДанных.ДопустимыйРадиусСтоянки Тогда
					
					// Точка выбивается из радиуса стоянки, исключаем ее из стоянки
					МассивСтрокСтоянка[Счетчик].Состояние = СостояниеДвижение;
					НайденыВыбивающиесяТочки = Истина;
				
				КонецЕсли;			
			КонецЦикла;				
		
		КонецЕсли;		
		
		Если НайденыВыбивающиесяТочки Тогда
			
			ТекСтрокиСтоянка = Новый Массив;
			
			Для Счетчик=0 По КоличествоСтрок-1 Цикл
				
				Если (Счетчик = КоличествоСтрок-1 ИЛИ МассивСтрокСтоянка[Счетчик].Состояние = СостояниеДвижение)
					И ТекСтрокиСтоянка.Количество() > 0 Тогда
					
					ПроверитьИНормализоватьСтоянку(ТекСтрокиСтоянка, ПараметрыОбработкиДанных);					
					ТекСтрокиСтоянка.Очистить();
				
				КонецЕсли;
				
				Если МассивСтрокСтоянка[Счетчик].Состояние = СостояниеСтоянка Тогда
					ТекСтрокиСтоянка.Добавить(МассивСтрокСтоянка[Счетчик]);						
				
				КонецЕсли;				
			
			КонецЦикла;
			
		Иначе
			
			Для Счетчик = 0 По КоличествоСтрок-1 Цикл		
				МассивСтрокСтоянка[Счетчик].Широта = ШиротаСтоянки;
				МассивСтрокСтоянка[Счетчик].Долгота = ДолготаСтоянки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		Для Счетчик = 0 По КоличествоСтрок-1 Цикл		
			МассивСтрокСтоянка[Счетчик].Широта = ШиротаСтоянки;
			МассивСтрокСтоянка[Счетчик].Долгота = ДолготаСтоянки;
			
		КонецЦикла;		
		
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти

#Область ПодсистемаItobЦентрСпутниковогоМониторингаКомандыДляТрекеров

// Процедура отправляет команду на трекер
//
Функция ВыполнитьКомандуНаСервере(Терминал, Команда, ТекстОшибки)
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.КомандыДляТрекеров") Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ItobКомандыДляТрекеров");
		ОбщийМодуль.ВыполнитьКомандуНаСервере(Терминал, Команда, ТекстОшибки, Истина);
	КонецЕсли; 
КонецФункции

#КонецОбласти

#КонецОбласти


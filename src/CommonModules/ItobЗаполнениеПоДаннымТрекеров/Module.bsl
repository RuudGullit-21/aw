////////////////////////////////////////////////////////////////////////////////
// Заполнение путевых листов (вызов сервера)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс 

#Область ПолучитьДанныеПоТС

// Возвращает данные по ТС.
//
// Параметры:
//  Параметры	 - Структура- Параметры транспортного средства. 
//  ТекстОшибки	 - 	Строка -  Текст ошибки.
// 
// Возвращаемое значение:
//  Структура - Данные по ТС.
//
Функция ПолучитьДанныеПоТС(Параметры, ТекстОшибки) Экспорт
	ПараметрыЗаполнения = ПолучитьПараметрыЗаполненияПоДаннымТрекеров(Параметры.Организация, Параметры.ТранспортноеСредство);
	
	Если НЕ ПараметрыЗаполнения.АдресИБ = Неопределено 
		 И НЕ ПараметрыЗаполнения.АдресИБ.Пустая()
		 И НЕ ПараметрыЗаполнения.АдресИБ = ПланыОбмена.ItobЗаполнениеПоДаннымТрекеров.ЭтотУзел() Тогда
		 
		Возврат ПолучитьДанныеПоТС_ИзВнешнейБазы(Параметры, ТекстОшибки, ПараметрыЗаполнения);
	Иначе
		Возврат ПолучитьДанныеПоТС_Локально(Параметры, ТекстОшибки, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецФункции

// Возвращает данные по ТС локально.
//
// Параметры:
//  Параметры				 - Структура - Параметры транспортного средства.
//  ТекстОшибки				 - Строка	 - Текст ошибки.
//  ПараметрыЗаполнения	 - Структура - Параметры заполнения путевых листов.
// 
// Возвращаемое значение:
//  Структура - Данные по ТС.
//
Функция ПолучитьДанныеПоТС_Локально(Параметры, ТекстОшибки, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ДанныеТерминаловДляРасчетаТрека = ДанныеТерминаловДляРасчетаТрека(Параметры, ПараметрыЗаполнения.ЗаполнятьУровеньБака, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	ДанныеТерминаловСРассчитаннымиТреками = ДанныеТерминаловСРассчитаннымиТреками(ДанныеТерминаловДляРасчетаТрека, ПараметрыЗаполнения.ЗаполнятьУровеньБака);
	
	ПривязанныйТерминал = Неопределено;
	Результат = ПолучитьДанныеПоТС_Локально_Обработка(Параметры, ТекстОшибки, ПараметрыЗаполнения, ПривязанныйТерминал, ДанныеТерминаловСРассчитаннымиТреками);
	Если Результат = Ложь Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение значений параметров выработки "Время работы ДВС в движении" и "Время работы ДВС в простое".
	ПолучитьВремяВДвиженииИПростоСВклДВС(Результат, Параметры, ПривязанныйТерминал, ДанныеТерминаловСРассчитаннымиТреками);
	
	Возврат Результат;

КонецФункции

// Вычисляет изменение значения датчика.
//
// Параметры:
//  НачДата				 - Дата										 - Начало периода.
//  КонДата				 - Дата										 - Конец периода.
//  Терминал			 - СправочникСсылка.ItobТерминалы			 - Ссылка на терминал.
//  Датчик				 - СправочникСсылка.ItobДатчики				 - Ссылка на датчик.
//  КалибровочныйГрафик	 - СправочникСсылка.ItobКалибровочныеГрафики - Ссылка на калибровочный график.
//  НазначениеДатчика	 - СправочникСсылка.ItobНазначенияДатчиков	 - Ссылка на назначение датчика.
// 
// Возвращаемое значение:
//  Число - Значение параметра.
//
Функция ВычислитьИзменениеЗначенияДатчика(НачДата, КонДата, Терминал, Датчик, КалибровочныйГрафик, НазначениеДатчика) Экспорт
	
	Если (НЕ НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаCAN)
		И (НЕ НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаИмпульсный) Тогда
	
		Возврат 0;
	
	КонецЕсли;
	
	МассивДатчиков = Новый Массив;
	МассивДатчиков.Добавить(Датчик);
	
	Маршрут = Неопределено;
	Если НЕ ItobОперативныйМониторинг.СформироватьМаршрутПоТерминалу(Терминал, НачДата, КонДата, Маршрут, Ложь, МассивДатчиков) Тогда
		Возврат 0;
	
	КонецЕсли;
	
	КодДатчика          = Формат(Датчик.Код, "ЧН=0; ЧГ=0");
			
	ДопускатьЗначенияВнеВходногоДиапазона = Истина;
	ДопустимоеЗначениеНачало = 0;
	ДопустимоеЗначениеКонец  = 0;
	
	Результат = 0;
	
	Если НЕ КалибровочныйГрафик.Пустая() Тогда
		ДопускатьЗначенияВнеВходногоДиапазона = КалибровочныйГрафик.ДопускатьЗначенияВнеВходногоДиапазона;
		Если НЕ ДопускатьЗначенияВнеВходногоДиапазона Тогда
			Показатели = КалибровочныйГрафик.Показатели.Выгрузить();
			Показатели.Сортировать("Вход Возр");
			
			Если Показатели.Количество() > 1 Тогда
				ДопустимоеЗначениеНачало = Показатели[0].Вход;	
				ДопустимоеЗначениеКонец  = Показатели[Показатели.Количество()-1].Вход;
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Если НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаCAN Тогда		
		Результат = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПоИзменениюЗначенияДатчика(
			Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик, НачДата);	
		
	ИначеЕсли НазначениеДатчика = Справочники.ItobНазначенияДатчиков.РасходТопливаИмпульсный Тогда		
		Результат = ItobКалькуляцияПараметровВыработки.ПолучитьЗначениеПараметраПодсчетИмпульсов(
			Маршрут, Терминал, НазначениеДатчика, Датчик, КалибровочныйГрафик);		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ВычислитьИзменениеЗначенияДатчика()

// Возвращает структуру части параметров путевых листов.
//
// Параметры:
//  ДатаВыезда			 - Дата										 - Дата выезда.
//  ДатаВозвращения		 - Дата										 - Дата возвращения.
//  ТранспортноеСредство - СправочникСсылка.ItobТранспортныеСредства - Указатель на транспортное средство.
//  Организация			 - СправочникСсылка.ItobОрганизации			 - Указатель на организацию.
// 
// Возвращаемое значение:
//  Структура - Параметры по ТС.
//
Функция ПолучитьШаблонПараметровПоТС(ДатаВыезда = '00010101', ДатаВозвращения = '00010101', ТранспортноеСредство = Неопределено, Организация = Неопределено) Экспорт
	Возврат Новый Структура("ДатаВыезда,ДатаВозвращения,ТранспортноеСредство,Организация", ДатаВыезда,ДатаВозвращения,ТранспортноеСредство,Организация);
КонецФункции // ПолучитьШаблонПараметровПоТС()

// Возвращает шаблон данных по ТС.
// 
// Возвращаемое значение:
//  Структура - Данные по ТС.
//
Функция ПолучитьШаблонДанныеПоТС() Экспорт
	Возврат Новый Структура("ПробегGPS,ПробегCAN,СпидометрВыездаCAN,СпидометрВозвращенияCAN,ВремяРаботыДвигателя,УровеньТопливаНачало,УровеньТопливаКонец,РасходТоплива,ОбъемЗаправок,ВремяВДвиженииСВклДВС,ВремяВПростоеСВклДВС,ПараметрыВыработки");
КонецФункции // ПолучитьШаблонДанныеПоТС()

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 
	
// Возвращает параметры заполнения путевого листа по данным GPS трекеров
//
Функция ПолучитьПараметрыЗаполненияПоДаннымТрекеров(Организация, ТС)
	
	ПустойРезультат = Новый Структура("ЗаполнятьОдометрПоПробегуGPS,ЗаполнятьУровеньБака,АдресИБ", Ложь, Ложь, Неопределено);
	
	ИмяСправочникаТС       = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства");
	ИмяСправочникаМоделиТС = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("МаркиТранспорта");
	
	Если ПустаяСтрока(ИмяСправочникаТС) ИЛИ ПустаяСтрока(ИмяСправочникаМоделиТС) Тогда
		Возврат ПустойРезультат;
	
	КонецЕсли;
	
	// Определим модель ТС
	Выборка = РегистрыСведений.ItobСвойстваТранспортныхСредств.Выбрать(Новый Структура("ТранспортноеСредство", ТС));
    МодельТС = Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка();
	Если ItobОбщегоНазначения.ВыборкаСледующий(Выборка) Тогда
       МодельТС = Выборка.МодельТС;
	Иначе
		МодельТС = Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка();
	КонецЕсли;	
	
	НаборПустыхЗначенийМодельТС = Новый Массив;
	НаборПустыхЗначенийМодельТС.Добавить(Справочники[ИмяСправочникаТС].ПустаяСсылка());
	НаборПустыхЗначенийМодельТС.Добавить(Справочники[ИмяСправочникаМоделиТС].ПустаяСсылка());
	НаборПустыхЗначенийМодельТС.Добавить(Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("МодельТС", МодельТС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяМодельТС", НаборПустыхЗначенийМодельТС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК Приоритет,
	               |	ПараметрыЗаполнения.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполнения.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполнения.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПоДаннымТрекеров КАК ПараметрыЗаполнения
	               |ГДЕ
	               |	ПараметрыЗаполнения.МодельТС = &ТС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	ПараметрыЗаполнения.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполнения.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполнения.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПоДаннымТрекеров КАК ПараметрыЗаполнения
	               |ГДЕ
	               |	ПараметрыЗаполнения.МодельТС = &МодельТС
	               |	И ПараметрыЗаполнения.Организация = &Организация
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ПараметрыЗаполнения.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполнения.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполнения.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПоДаннымТрекеров КАК ПараметрыЗаполнения
	               |ГДЕ
	               |	ПараметрыЗаполнения.МодельТС В(&ПустаяМодельТС)
	               |	И ПараметрыЗаполнения.Организация = &Организация
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3,
	               |	ПараметрыЗаполнения.ЗаполнятьОдометрПоПробегуGPS,
				   |	ПараметрыЗаполнения.ЗаполнятьУровеньБака,
				   |	ПараметрыЗаполнения.АдресИБ
	               |ИЗ
	               |	РегистрСведений.ItobПараметрыЗаполненияПоДаннымТрекеров КАК ПараметрыЗаполнения
	               |ГДЕ
	               |	ПараметрыЗаполнения.МодельТС В(&ПустаяМодельТС)
	               |	И ПараметрыЗаполнения.Организация = ЗНАЧЕНИЕ(Справочник.ItobОрганизации.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ItobОрганизации", "Справочник." + ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Организации"));			   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если ItobОбщегоНазначения.ВыборкаСледующий(Выборка) Тогда		
		Возврат Новый Структура("ЗаполнятьОдометрПоПробегуGPS,ЗаполнятьУровеньБака,АдресИБ", 
			Выборка.ЗаполнятьОдометрПоПробегуGPS, Выборка.ЗаполнятьУровеньБака, Выборка.АдресИБ);
		
	КонецЕсли;
	
	
	Возврат ПустойРезультат;
	
КонецФункции

Функция ПолучитьПривязанныйТерминал(Параметры, ТекстОшибки)
	ПривязанныйТерминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(Параметры.ТранспортноеСредство, Параметры.ДатаВозвращения);
	Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
		ТекстОшибки = "К транспортному средству не привязан терминал";
		Возврат Неопределено;		
	КонецЕсли;
	Возврат ПривязанныйТерминал;
КонецФункции // ПолучитьДанныеПоТС_Общая()

#Область ПолучитьДанныеПоТС
	
Функция ПолучитьДанныеПоТС_Локально_Обработка(Параметры, ТекстОшибки, ПараметрыЗаполнения, ПривязанныйТерминал, ДанныеТерминаловСРассчитаннымиТреками = Неопределено)
	
	Результат = ПолучитьШаблонДанныеПоТС();
	
	ПривязанныйТерминал = ПолучитьПривязанныйТерминал(Параметры, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
		Возврат Ложь;		
	КонецЕсли;

	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПолучитьПараметрыЗаполненияПоДаннымТрекеров(Параметры.Организация, Параметры.ТранспортноеСредство);
	КонецЕсли;
	
	ДатчикПробегCANНайден = Ложь;
	ДатчикЗажиганиеНайден = Истина;
	ДатчикиДвиженияТерминала = ДатчикиДвиженияТерминала(ПривязанныйТерминал);
	НайденныеДатчики = Новый Массив;
	Если ДатчикиДвиженияТерминала.Свойство("ДатчикЗажигание") Тогда
		ДатчикЗажиганиеНайден = Истина;
		НайденныеДатчики.Добавить(ДатчикиДвиженияТерминала.ДатчикЗажигание);	
	КонецЕсли;
	Если ДатчикиДвиженияТерминала.Свойство("ДатчикПробегCAN") Тогда
		ДатчикПробегCANНайден = Истина;
		НайденныеДатчики.Добавить(ДатчикиДвиженияТерминала.ДатчикПробегCAN);	
	КонецЕсли;
	Если НЕ НайденныеДатчики.Количество() = 0 Тогда
		ВключатьДанныеДатчиков = НайденныеДатчики;			
	КонецЕсли;
	
	ИнтервалыДвижения = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Параметры.ТранспортноеСредство, 
																			Параметры.ДатаВыезда, 
																			Параметры.ДатаВозвращения,
																			Ложь, 
																			ВключатьДанныеДатчиков,,, 
																			ДанныеТерминаловСРассчитаннымиТреками);
	
	Если ИнтервалыДвижения.Количество() = 0 Тогда
		ТекстОшибки = "Нет соответствующих данных";
		Возврат Ложь;
	Иначе
		Результат.ПробегGPS = Окр(ИнтервалыДвижения.Итог("Пробег"),1);
	КонецЕсли;

	Если ДатчикЗажиганиеНайден Тогда
		ДанныеДатчикаЗажигание = Новый ТаблицаЗначений;
		ДанныеДатчикаЗажигание.Колонки.Добавить("НачДата");
		ДанныеДатчикаЗажигание.Колонки.Добавить("КонДата");	
		ДанныеДатчикаЗажигание.Колонки.Добавить("Значение");
		ДанныеДатчикаЗажигание.Колонки.Добавить("Продолжительность");
		КодДатчикаЗажигание = Формат(ДатчикиДвиженияТерминала.ДатчикЗажигание.Код, "ЧН=0; ЧГ=0");
		ПолеЗначенияДатчикаЗажигание = "ЗначениеДатчика" + КодДатчикаЗажигание; 
		Для каждого Интервал Из ИнтервалыДвижения Цикл
			ДанныеТерминала = Интервал.ДанныеТерминала;
			СтрокаНачалаДиапазона = ДанныеТерминала[0];
			
			Для Счетчик = 1 По ДанныеТерминала.Количество()-1 Цикл
				Если ДанныеТерминала[Счетчик][ПолеЗначенияДатчикаЗажигание] <> СтрокаНачалаДиапазона[ПолеЗначенияДатчикаЗажигание]
					ИЛИ Счетчик = ДанныеТерминала.Количество()-1 Тогда
					
					НовСтрокаДанных = ДанныеДатчикаЗажигание.Добавить();
					НовСтрокаДанных.НачДата  = СтрокаНачалаДиапазона.Период;
					НовСтрокаДанных.КонДата  = ДанныеТерминала[Счетчик].Период-?(Счетчик = ДанныеТерминала.Количество()-1,0,1);				
					НовСтрокаДанных.Значение = СтрокаНачалаДиапазона[ПолеЗначенияДатчикаЗажигание];
					НовСтрокаДанных.Продолжительность = НовСтрокаДанных.КонДата - НовСтрокаДанных.НачДата + 1;
					СтрокаНачалаДиапазона = ДанныеТерминала[Счетчик];
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ВремяРаботыДвигателя = 0;
		Для Счетчик = 0 По ДанныеДатчикаЗажигание.Количество()-1 Цикл
			КрайнееЗначениеДатчика = -1;
			Если ДанныеДатчикаЗажигание[Счетчик].Значение = 1 Тогда
				ВремяРаботыДвигателя = ВремяРаботыДвигателя + ДанныеДатчикаЗажигание[Счетчик].Продолжительность;
				Если КрайнееЗначениеДатчика = ДанныеДатчикаЗажигание[Счетчик].Значение Тогда
					ПериодМеждуИнтервалами = ДанныеДатчикаЗажигание[Счетчик].НачДата -  ДанныеДатчикаЗажигание[Счетчик - 1].КонДата;
					ВремяРаботыДвигателя = ВремяРаботыДвигателя + ПериодМеждуИнтервалами; 
				КонецЕсли; 
			КонецЕсли;
			КрайнееЗначениеДатчика = ДанныеДатчикаЗажигание[Счетчик].Значение;
		КонецЦикла;
		
		Если ВремяРаботыДвигателя > 0 Тогда
			Результат.ВремяРаботыДвигателя = ВремяРаботыДвигателя;
		КонецЕсли;
		
	КонецЕсли; 
	
	// Пробег CAN
	Если ДатчикПробегCANНайден Тогда
		
		НайдСтрокаДатчиков = ДатчикиДвиженияТерминала.ДатчикЗажигание;
		КалибровочныйГрафик = НайдСтрокаДатчиков.КалибровочныйГрафик;
		
		ДанныеПробегCanНачало = Неопределено;
		ДанныеПробегCanКонец = Неопределено;
		ИмяКолонкиЗначениеДатчикаПробегCan = "ЗначениеДатчика" + НайдСтрокаДатчиков.Датчик.Код;
		
		// Поиск значения пробега на начало
		Для ИндексСтрокиИД = 0 По ИнтервалыДвижения.Количество()-1 Цикл
			ТзДанныеТерминала = ИнтервалыДвижения[ИндексСтрокиИД].ДанныеТерминала;
			Для ИндексСтрокиДанныеТерминала=0 По ТзДанныеТерминала.Количество()-1 Цикл
				ЗначДатчикаПробегCan =  ТзДанныеТерминала[ИндексСтрокиДанныеТерминала][ИмяКолонкиЗначениеДатчикаПробегCan];
				Если НЕ ЗначДатчикаПробегCan = Неопределено	И ЗначДатчикаПробегCan > 0 Тогда				
					ДанныеПробегCanНачало = ЗначДатчикаПробегCan;
					Прервать;				
				КонецЕсли;
			КонецЦикла;
			Если НЕ ДанныеПробегCanНачало = Неопределено Тогда
				Прервать;			
			КонецЕсли;		
		КонецЦикла;
		
		Если НЕ ДанныеПробегCanНачало = Неопределено Тогда
			
			// Поиск значения пробега на конец
			ИндексСтрокиИД = ИнтервалыДвижения.Количество()-1;
			Пока ИндексСтрокиИД >= 0 Цикл
				ТзДанныеТерминала = ИнтервалыДвижения[ИндексСтрокиИД].ДанныеТерминала;
				ИндексСтрокиДанныеТерминала = ТзДанныеТерминала.Количество()-1;
				Пока ИндексСтрокиДанныеТерминала >= 0 Цикл
					ЗначДатчикаПробегCan =  ТзДанныеТерминала[ИндексСтрокиДанныеТерминала][ИмяКолонкиЗначениеДатчикаПробегCan];
					Если НЕ ЗначДатчикаПробегCan = Неопределено	И ЗначДатчикаПробегCan > 0 Тогда				
						ДанныеПробегCanКонец = ЗначДатчикаПробегCan;
						Прервать;				
					КонецЕсли;
					ИндексСтрокиДанныеТерминала = ИндексСтрокиДанныеТерминала-1;
				КонецЦикла;
				Если НЕ ДанныеПробегCanКонец = Неопределено Тогда
					Прервать;			
				КонецЕсли;
				ИндексСтрокиИД = ИндексСтрокиИД-1;
			КонецЦикла;
			
			Если НЕ ДанныеПробегCanКонец = Неопределено Тогда				
				Результат.СпидометрВыездаCAN     = ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(
							ДанныеПробегCanНачало, КалибровочныйГрафик);
				Результат.СпидометрВозвращенияCAN = ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(
							ДанныеПробегCanКонец, КалибровочныйГрафик);
			    Результат.ПробегCAN = Результат.СпидометрВозвращенияCAN - Результат.СпидометрВыездаCAN;
			КонецЕсли;			
		
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнятьУровеньБака Тогда
		ТекстОшибкиТопливо = "";
		ДанныеПоТопливу = ПолучитьДанныеПоТопливуЦСМ(Параметры.ДатаВыезда, Параметры.ДатаВозвращения, Параметры.ТранспортноеСредство, ТекстОшибкиТопливо, 
					Истина, ПривязанныйТерминал, ДанныеТерминаловСРассчитаннымиТреками);
		Если ТипЗнч(ДанныеПоТопливу) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеПоТопливу);		
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьДанныеПоТС()

#КонецОбласти

	
// Возвращает параметры заполнения путевого листа из внешней базы
//
Функция ПолучитьДанныеПоТС_ИзВнешнейБазы(Параметры, ТекстОшибки, ПараметрыЗаполнения)
	АдресВебСервиса    = СокрЛП(ПараметрыЗаполнения.АдресИБ.АдресWebСервиса);
	ИмяПользователя    = ПараметрыЗаполнения.АдресИБ.Логин;
	ПарольПользователя = ПараметрыЗаполнения.АдресИБ.Пароль;		
	#Если НаКлиенте Тогда
		НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаКлиенте();
	#Иначе
		НастройкаПроксиСервера = ItobРаботаС_БСП.НастройкиПроксиНаСервере();
	#КонецЕсли
	Таймаут = 20;
	Если Лев(Нрег(АдресВебСервиса),5) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Определение = Новый WSОпределения(АдресВебСервиса+"?WSDL",ИмяПользователя,ПарольПользователя,НастройкаПроксиСервера,Таймаут,ЗащищенноеСоединение);
	Прокси = Новый WSПрокси(Определение, "http://www.itob.ru/csm/gpsdata", "ItobWSДанныеТрекеров", "ItobWSДанныеТрекеровSoap",
		НастройкаПроксиСервера,Таймаут,ЗащищенноеСоединение);
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = ПарольПользователя;
	
	ГосНомер = СокрЛП(Параметры.ТранспортноеСредство.ГосНомер);
	
	ДанныеПоТС = Прокси.ПолучитьДанныеПоТС(Параметры.ДатаВыезда, Параметры.ДатаВозвращения, "ГосНомер", ГосНомер);
	
	Результат = ПолучитьШаблонДанныеПоТС();
	ЗаполнитьЗначенияСвойств(Результат, ДанныеПоТС);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеПоТопливуЦСМ(ДатаВыезда, ДатаВозвращения, ТранспортноеСредство, ТекстОшибки, ТребуетсяУровень = Ложь, Терминал = Неопределено, ДанныеТерминаловСРассчитаннымиТреками = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("УровеньТопливаНачало",Неопределено);
	Результат.Вставить("УровеньТопливаКонец",Неопределено);
	Результат.Вставить("РасходТоплива",Неопределено);
	Результат.Вставить("ОбъемЗаправок",0);
	Результат.Вставить("ОбъемСливов",0);
		
	// Определяем привязанный терминал
	Если Терминал=Неопределено Тогда
		ПривязанныйТерминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ТранспортноеСредство, ДатаВозвращения);
		Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
			ТекстОшибки = НСтр("ru = 'К транспортному средству не привязан терминал'");
			Возврат Ложь;			
		КонецЕсли;		
	Иначе
		ПривязанныйТерминал = Терминал;	
	КонецЕсли;	
	
	// Если идут данные по расходу топлива - используем их
	НайденнаяСтрокаДатчиковРасходТопливаCAN = ПривязанныйТерминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.РасходТопливаCAN, "Назначение");
	НайденнаяСтрокаДатчиковРасходТопливаИмпульсный = ПривязанныйТерминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.РасходТопливаИмпульсный, "Назначение");
	ТабДатчиковУровеньТоплива = ПолучитьДатчикиУровняТопливаДляТерминала(ПривязанныйТерминал);
	
	ФактРасходТоплива = 0;
	СтрокаДатчикРасходаТоплива = Неопределено;
	
	Если НЕ НайденнаяСтрокаДатчиковРасходТопливаCAN = Неопределено Тогда
		СтрокаДатчикРасходаТоплива = НайденнаяСтрокаДатчиковРасходТопливаCAN;				
	ИначеЕсли НЕ НайденнаяСтрокаДатчиковРасходТопливаИмпульсный = Неопределено Тогда
		СтрокаДатчикРасходаТоплива = НайденнаяСтрокаДатчиковРасходТопливаИмпульсный;		
	КонецЕсли;
	
	Если НЕ СтрокаДатчикРасходаТоплива = Неопределено Тогда
		
		Результат.РасходТоплива = ВычислитьИзменениеЗначенияДатчика(
			ДатаВыезда, ДатаВозвращения, ПривязанныйТерминал, СтрокаДатчикРасходаТоплива.Датчик, 
			СтрокаДатчикРасходаТоплива.КалибровочныйГрафик, СтрокаДатчикРасходаТоплива.Назначение);
			
	КонецЕсли;
	
	Если ТабДатчиковУровеньТоплива.Количество() > 0 И (ТребуетсяУровень ИЛИ Результат.РасходТоплива = Неопределено) Тогда
		ТаблицаДанные = Неопределено;
		ТаблицаЗаправки = Неопределено;
		ТекстОшибкиПолучитьДанныеТопливо = "";
		
		ПараметрыРасчетаТоплива = Новый Структура();
		ПараметрыРасчетаТоплива.Вставить("НачПериода", ДатаВыезда);
		ПараметрыРасчетаТоплива.Вставить("КонПериода", ДатаВозвращения);
		ПараметрыРасчетаТоплива.Вставить("Объект", ТранспортноеСредство);
		ПараметрыРасчетаТоплива.Вставить("Метод", "Пробег");
		
		Если НЕ ItobОбработкаДанныхТопливоВызовСервера.ПолучитьДанныеТопливо(ПараметрыРасчетаТоплива, ТаблицаДанные, ТаблицаЗаправки, 
			ТекстОшибкиПолучитьДанныеТопливо, "ПоВсем",,, ДанныеТерминаловСРассчитаннымиТреками) Тогда
			
			ТекстОшибки = НСтр("ru = 'Ошибка обработки данных по топливу:'")+" "+ТекстОшибкиПолучитьДанныеТопливо;
			Возврат Ложь;
			
		КонецЕсли;
		
		СглаженноеЗначениеНачало = Неопределено;
		СглаженноеЗначениеКонец  = Неопределено;
		
		// Поиск крайних значений
		Для Счетчик = 1 По ТаблицаДанные.Количество()-1 Цикл
			Если ТаблицаДанные[Счетчик].Период > ДатаВыезда Тогда
				СглаженноеЗначениеНачало = ТаблицаДанные[Счетчик-1].ЗначениеСглаженное;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Счетчик = ТаблицаДанные.Количество()-2;
		Пока Счетчик > 0 Цикл
			Если ТаблицаДанные[Счетчик].Период < ДатаВозвращения Тогда
				СглаженноеЗначениеКонец = ТаблицаДанные[Счетчик+1].ЗначениеСглаженное;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (НЕ СглаженноеЗначениеНачало=Неопределено) И (НЕ СглаженноеЗначениеКонец=Неопределено) Тогда
						
			Результат.УровеньТопливаНачало = СглаженноеЗначениеНачало;			
			Результат.УровеньТопливаКонец = СглаженноеЗначениеКонец;
			
			Если Результат.РасходТоплива = Неопределено Тогда
				
				Результат.РасходТоплива = Результат.УровеньТопливаНачало-Результат.УровеньТопливаКонец;
				Для каждого СтрЗаправкиСливы Из ТаблицаЗаправки Цикл
					Если СтрЗаправкиСливы.Период >= ДатаВыезда И СтрЗаправкиСливы.Период <= ДатаВозвращения Тогда
						Результат.РасходТоплива = Результат.РасходТоплива + СтрЗаправкиСливы.ТопливоИзменение;
						Если СтрЗаправкиСливы.ТопливоИзменение > 0 Тогда
							Результат.ОбъемЗаправок = Результат.ОбъемЗаправок + СтрЗаправкиСливы.ТопливоИзменение;
						Иначе
							Результат.ОбъемСливов = Результат.ОбъемСливов - СтрЗаправкиСливы.ТопливоИзменение;
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоТопливуЦСМ()

Процедура ПолучитьВремяВДвиженииИПростоСВклДВС(Результат, Параметры, ПривязанныйТерминал, ДанныеТерминаловСРаcсчтаннымиТреками)
	
	// ПривязанныйТерминал - крайний привязанный терминал в период "снятия" данных (почему так ?) *fixit
	ПредварительноРассчитанныеТреки = Неопределено;
	Если НЕ ДанныеТерминаловСРаcсчтаннымиТреками = Неопределено 
		 И НЕ ДанныеТерминаловСРаcсчтаннымиТреками[ПривязанныйТерминал] = Неопределено Тогда
		 
		 Для каждого ДанныеТерминалаПоПериоду Из ДанныеТерминаловСРаcсчтаннымиТреками[ПривязанныйТерминал] Цикл
			ПредварительноРассчитанныеТреки = ДанныеТерминалаПоПериоду.Значение.ТрекиТерминала;
		КонецЦикла;
	КонецЕсли;
	ПредварительноРассчитанныйТрек = ?(ПредварительноРассчитанныеТреки = Неопределено, Неопределено, ПредварительноРассчитанныеТреки.Основной);
	
	ТаблицаПараметровВыработки = ItobКалькуляцияПараметровВыработки.ПолучитьВыработкуПоТерминалу(ПривязанныйТерминал,Параметры.ДатаВыезда,Параметры.ДатаВозвращения, ПредварительноРассчитанныйТрек);
	
	Для Каждого ПараметрВыработки Из ТаблицаПараметровВыработки Цикл
		// Получение параметров: "Время работы ДВС в движении (ВремяВПростоеСВклДвигателем)"
		Если ПараметрВыработки.ПараметрВыработки.ИмяПредопределенныхДанных = "ВремяВПростоеСВклДвигателем" Тогда
			Результат.ВремяВПростоеСВклДВС = ПараметрВыработки.Значение;
		КонецЕсли; 
		// Получение параметров: "Время работы ДВС в простое (ВремяВРаботеПоДаннымGPS) "
		Если ПараметрВыработки.ПараметрВыработки.ИмяПредопределенныхДанных = "ВремяВРаботеПоДаннымGPS" Тогда
			Результат.ВремяВДвиженииСВклДВС = ПараметрВыработки.Значение; 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

// Функция возвращает структуру части параметров путевых листов
//
Функция ПолучитьПараметрыДляПутевыхЛистов(ДатаВыезда, ДатаВозвращения, ТранспортноеСредство = Неопределено, Организация = Неопределено) Экспорт
	ДатаВыезда = ?(ДатаВыезда = Неопределено, '00010101', ДатаВыезда);
	ДатаВозвращения = ?(ДатаВозвращения = Неопределено, '00010101', ДатаВозвращения);
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаВыезда", ДатаВыезда);
	Результат.Вставить("ДатаВозвращения", ДатаВозвращения);
	Результат.Вставить("ТранспортноеСредство", ТранспортноеСредство);
	Результат.Вставить("Организация", Организация);
	
	Возврат Результат;
КонецФункции // ПолучитьПараметрыДляПутевыхЛистов()

Функция ПолучитьДатчикиУровняТопливаДляТерминала(ТекущийТерминал)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийТерминал", ТекущийТерминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobТерминалыДатчики.Датчик,
	               |	ItobТерминалыДатчики.Назначение,
	               |	ItobТерминалыДатчики.КалибровочныйГрафик
	               |ИЗ
	               |	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	               |ГДЕ
	               |	ItobТерминалыДатчики.Ссылка = &ТекущийТерминал
	               |	И ItobТерминалыДатчики.Назначение.ДатчикТоплива";
				   
	Возврат Запрос.Выполнить().Выгрузить();			   

КонецФункции // ПолучитьДатчикиУровняТопливаДляТерминала()

Функция ДатчикиДвиженияТерминала(Терминал)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Зажигание)
	|			ТОГДА ItobТерминалыДатчики.Датчик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатчикЗажигание,
	|	ВЫБОР
	|		КОГДА ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.ПробегCAN)
	|			ТОГДА ItobТерминалыДатчики.Датчик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатчикПробегCAN
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|ГДЕ
	|	ItobТерминалыДатчики.Ссылка = &Терминал
	|	И (ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Зажигание)
	|			ИЛИ ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Зажигание))";
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Результат.Свойство("ДатчикЗажигание") И НЕ Выборка.ДатчикЗажигание = Неопределено Тогда
			Результат.Вставить("ДатчикЗажиганияНайден", Истина);
			Результат.Вставить("ДатчикЗажигание", Выборка.ДатчикЗажигание);
		ИначеЕсли НЕ Результат.Свойство("ДатчикПробегCAN") И Выборка.ДатчикПробег = Неопределено Тогда 
			Результат.Вставить("ДатчикПробега", Истина);
			Результат.Вставить("ДатчикПробегCAN", Выборка.ДатчикПробегCAN);
		КонецЕсли; 
	КонецЦикла; 
 
	Возврат Результат;
	
КонецФункции


Функция ДанныеТерминаловДляРасчетаТрека(Параметры, ПолучатьДанныеТоплива, ТекстОшибки = "")

	ПериодНачало = Параметры.ДатаВыезда;
	ПериодОкончание = Параметры.ДатаВозвращения;
	
	ТерминалыОбъекта = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobПривязкиТрекеровСрезПоследних.Терминал КАК Терминал,
	|	ЕСТЬNULL(ItobТерминалыДатчики.КалибровочныйГрафик.ДлинаБуфераСглаживания, -1) КАК ДлинаБуфераСглаживания,
	|	ЕСТЬNULL(ItobТерминалыДатчики.КалибровочныйГрафик.ДанныеТолькоПриВключенномЗажигании, ЛОЖЬ) КАК ДанныеТолькоПриВключенномЗажигании
	|ИЗ
	|	РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&ПериодДляСрезПоследних, Объект = &ОбъектМониторинга) КАК ItobПривязкиТрекеровСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|		ПО ItobПривязкиТрекеровСрезПоследних.Терминал = ItobТерминалыДатчики.Ссылка
	|			И (ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Топливо))
	|ГДЕ
	|	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobПривязкиТрекеров.Период КАК Период,
	|	ItobПривязкиТрекеров.Терминал КАК Терминал,
	|	ItobПривязкиТрекеров.ТерминалУстановлен КАК ТерминалУстановлен,
	|	ЕСТЬNULL(ItobТерминалыДатчики.КалибровочныйГрафик.ДлинаБуфераСглаживания, -1) КАК ДлинаБуфераСглаживания,
	|	ЕСТЬNULL(ItobТерминалыДатчики.КалибровочныйГрафик.ДанныеТолькоПриВключенномЗажигании, ЛОЖЬ) КАК ДанныеТолькоПриВключенномЗажигании
	|ИЗ
	|	РегистрСведений.ItobПривязкиТрекеров КАК ItobПривязкиТрекеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|		ПО ItobПривязкиТрекеров.Терминал = ItobТерминалыДатчики.Ссылка
	|			И (ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Топливо))
	|ГДЕ
	|	ItobПривязкиТрекеров.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодНачало, ДЕНЬ) И &ПериодОкончание
	|	И ItobПривязкиТрекеров.Объект = &ОбъектМониторинга
	|	И ItobПривязкиТрекеров.ТерминалУстановлен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ОбъектМониторинга", Параметры.ТранспортноеСредство);
	Запрос.УстановитьПараметр("ПериодДляСрезПоследних", НачалоДня(ПериодНачало) - 1);
	Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодОкончание", ПериодОкончание);
		
	ИндексРезультата_ТерминалНаНачалоПериода = 0;
	ИндексРезультата_ЗаменыТерминалов = 1;
	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	ПредыдущийТерминал = Неопределено;
	ПредыдущийПериодС = Неопределено;
	
	ВыборкаТерминалНаНачалоПериода = НаборРезультатов[ИндексРезультата_ТерминалНаНачалоПериода].Выбрать();
	Если ВыборкаТерминалНаНачалоПериода.Следующий() Тогда
		ДанныеТерминала = ИнициализироватьДанныеТерминала();
		ДанныеТерминала.ТерминалСсылка = ВыборкаТерминалНаНачалоПериода.Терминал;
		ДанныеТерминала.ПериодНачало = ПериодНачало;
		ДанныеТерминала.ПериодОкончание = ПериодОкончание;
		
		Если ПолучатьДанныеТоплива И ВыборкаТерминалНаНачалоПериода.ДлинаБуфераСглаживания >= 0 Тогда
			ДополнительноеКоличествоТочек = ?(ВыборкаТерминалНаНачалоПериода.ДлинаБуфераСглаживания = 0, 40, ВыборкаТерминалНаНачалоПериода.ДлинаБуфераСглаживания) * 4;
			ДанныеТерминала.ДополнительноеКоличествоТочек = ?(ВыборкаТерминалНаНачалоПериода.ДанныеТолькоПриВключенномЗажигании,  
															  МАКС(ДополнительноеКоличествоТочек, 1500), 
															  ДополнительноеКоличествоТочек);
		КонецЕсли;
														  
		ДополнитьПредварительныеДанныеТерминаловОбъекта(ТерминалыОбъекта, ДанныеТерминала, ПредыдущийТерминал, ПредыдущийПериодС);
	КонецЕсли;
	
		
	ВыборкаЗаменаТерминаловОбъектаСлежения = НаборРезультатов[ИндексРезультата_ЗаменыТерминалов].Выбрать();
	Пока ВыборкаЗаменаТерминаловОбъектаСлежения.Следующий() Цикл
		Если НЕ ПредыдущийТерминал = Неопределено И НЕ ПредыдущийПериодС = Неопределено Тогда
			ТерминалыОбъекта[ПредыдущийТерминал][ПредыдущийПериодС].ПериодОкончание = ВыборкаЗаменаТерминаловОбъектаСлежения.Период - 1;
		КонецЕсли; 
		
		ДанныеТерминала = ИнициализироватьДанныеТерминала();
		ДанныеТерминала.ТерминалСсылка = ВыборкаЗаменаТерминаловОбъектаСлежения.Терминал;
		ДанныеТерминала.ПериодНачало = ВыборкаЗаменаТерминаловОбъектаСлежения.Период;
		ДанныеТерминала.ПериодОкончание = ПериодОкончание;
		
		Если ПолучатьДанныеТоплива И ВыборкаЗаменаТерминаловОбъектаСлежения.ДлинаБуфераСглаживания >= 0 Тогда
			ДополнительноеКоличествоТочек = ?(ВыборкаЗаменаТерминаловОбъектаСлежения.ДлинаБуфераСглаживания = 0, 40, ВыборкаЗаменаТерминаловОбъектаСлежения.ДлинаБуфераСглаживания) * 4;
			ДанныеТерминала.ДополнительноеКоличествоТочек = ?(ВыборкаЗаменаТерминаловОбъектаСлежения.ДанныеТолькоПриВключенномЗажигании,  
															  МАКС(ДополнительноеКоличествоТочек, 1500), 
															  ДополнительноеКоличествоТочек);
		КонецЕсли;
		
		ДополнитьПредварительныеДанныеТерминаловОбъекта(ТерминалыОбъекта, ДанныеТерминала, ПредыдущийТерминал, ПредыдущийПериодС)

	КонецЦикла;
	
	Если ТерминалыОбъекта.Количество() = 0 Тогда
		ТекстОшибки = "У объекта мониторинга отсутствуют привязанные терминалы";
	КонецЕсли; 

	
	Возврат ТерминалыОбъекта;
	
КонецФункции

Функция ИнициализироватьДанныеТерминала()
	
	ДанныеТерминала = Новый Структура;
	ДанныеТерминала.Вставить("ТерминалСсылка");
	ДанныеТерминала.Вставить("ПериодНачало");
	ДанныеТерминала.Вставить("ПериодОкончание");
	ДанныеТерминала.Вставить("ДополнительноеКоличествоТочек", 1);
	ДанныеТерминала.Вставить("ТрекиТерминала");
	
	
	Возврат ДанныеТерминала;
	
КонецФункции

Процедура ДополнитьПредварительныеДанныеТерминаловОбъекта(ТерминалыОбъекта, ДанныеТерминала, ПредыдущийТерминал, ПредыдущийПериодС)
	
	Если ТерминалыОбъекта[ДанныеТерминала.ТерминалСсылка] = Неопределено Тогда
		ДанныеТерминалаНачинаяС = Новый Соответствие;
	Иначе
		ДанныеТерминалаНачинаяС = ТерминалыОбъекта[ДанныеТерминала.ТерминалСсылка]
	КонецЕсли; 
	ДанныеТерминалаНачинаяС.Вставить(ДанныеТерминала.ПериодНачало, ДанныеТерминала);
	
	ТерминалыОбъекта.Вставить(ДанныеТерминала.ТерминалСсылка, ДанныеТерминалаНачинаяС);

	ПредыдущийТерминал = ДанныеТерминала.ТерминалСсылка;
	ПредыдущийПериодС = ДанныеТерминала.ПериодНачало;
	
КонецПроцедуры

Функция ДанныеТерминаловСРассчитаннымиТреками(ДанныеТерминаловДляРасчетаТрека, ПолучатьДанныеТоплива)
	
	Для каждого ПериодыРаботыПоТерминалам Из ДанныеТерминаловДляРасчетаТрека Цикл
		Терминал = ПериодыРаботыПоТерминалам.Ключ;
		ПериодыРаботыТерминала = ПериодыРаботыПоТерминалам.Значение;
		Для каждого ДанныеПериода Из ПериодыРаботыТерминала Цикл
			ПериодС = ДанныеПериода.Ключ;
			ДанныеТерминала = ДанныеПериода.Значение;
			ДанныеТерминала.ТрекиТерминала = ТрекиТерминалаОсновнойИРасширенный(Терминал,
																				ДанныеТерминала.ПериодНачало,
																				ДанныеТерминала.ПериодОкончание,
																				ПолучатьДанныеТоплива,
																				ДанныеТерминала.ДополнительноеКоличествоТочек);
		КонецЦикла; 
	КонецЦикла; 
	
	
	Возврат ДанныеТерминаловДляРасчетаТрека;
	
КонецФункции
 
Функция ТрекиТерминалаОсновнойИРасширенный(ТерминалСсылка, ПериодНачало, ПериодОкончание, ПолучатьДанныеТоплива, ДополнительноеКоличествоТочек)
	
	ТрекиТерминала = Новый Структура;
	ТрекиТерминала.Вставить("Основной");
	ТрекиТерминала.Вставить("Расширенный");
	
	
	ПериодНачалоUTC0 = ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(ПериодНачало);
	ПериодОкончаниеUTC0 = ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(ПериодОкончание);
	
	ПараметрыТрека = ItobРепликация.ПараметрыТрека();
	ПараметрыТрека.Терминал = ТерминалСсылка;
	ПараметрыТрека.ДатаНачала = ПериодНачалоUTC0;
	ПараметрыТрека.ДатаОкончания = ПериодОкончаниеUTC0;
	ПараметрыТрека.ТолькоВалидные = Истина;
	ПараметрыТрека.ПреобразоватьДатыКUTC0 = Ложь;
	ПараметрыТрека.КоличествоДополнительныхЗаписей = ДополнительноеКоличествоТочек;
	ПараметрыТрека.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные;
	ТаблицаБазовыхДанных = ItobРепликация.ТрекТерминала(ПараметрыТрека);
	
	Если НЕ ПолучатьДанныеТоплива Тогда
		ТрекиТерминала.Основной = ТаблицаБазовыхДанных;
		
		
		Возврат ТрекиТерминала;
	КонецЕсли; 
	
	ТрекиТерминала.Расширенный = ТаблицаБазовыхДанных;
	Если ДополнительноеКоличествоТочек > 1 И ТаблицаБазовыхДанных.Количество() > 0 Тогда
		ТрекиТерминала.Основной = ОсновнойТрекИзРасширенногоТрека(ТаблицаБазовыхДанных, ПериодНачалоUTC0, ПериодОкончаниеUTC0);
	Иначе
		ТрекиТерминала.Основной = ТаблицаБазовыхДанных.Скопировать();
	КонецЕсли;
	
	
	Возврат ТрекиТерминала;
	
КонецФункции

Функция ОсновнойТрекИзРасширенногоТрека(РасширенныйТрекТерминала, ПериодНачало, ПериодОкончание)
	
	ОсновнойТрек = РасширенныйТрекТерминала.СкопироватьКолонки();
	ТочкаНачала = РасширенныйТрекТерминала[0];
	ТочкаКонца = РасширенныйТрекТерминала[РасширенныйТрекТерминала.Количество() - 1];
	
	Если ТочкаНачала.Период < ПериодНачало ИЛИ ТочкаКонца.Период > ПериодОкончание Тогда
		Для каждого Точка Из РасширенныйТрекТерминала Цикл
			
			ТочкаКонца = Точка; // Самая близкая точка к ПериодОкончание вне периода (находящаяся справа от него)
			Если Точка.Период > ПериодОкончание Тогда
				
				Прервать;
			КонецЕсли;
			
			
			Если Точка.Период >= ПериодНачало Тогда
				
				Продолжить;
			КонецЕсли;
			
			ТочкаНачала = Точка; // Самая близкая точка к ПериодНачало вне периода (находящаяся слева от него)
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Точка Из РасширенныйТрекТерминала Цикл
		Если НЕ Точка = ТочкаНачала И ОсновнойТрек.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОсновнойТрек.Добавить(), Точка);
		
		Если Точка = ТочкаКонца Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат ОсновнойТрек;
	
КонецФункции
 
#КонецОбласти

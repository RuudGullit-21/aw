////////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обновление предупреждающих надписей

Процедура ОбновитьОтображениеПредупреждающихНадписей(Форма) Экспорт
	
	//ОбработатьОтображениеПоляИНН(Форма.ФизическоеЛицо.ИНН, Форма.Элементы.ФизлицоИНН, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для полей содержащих ИНН, СтраховойНомерПФР

// Осуществляет проверку заполненного элемента содержащему ИНН
Процедура ОбработатьОтображениеПоляИНН(ИНН, Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
	
		ИННУказанПравильно = ИННСоответствуетТребованиям(ИНН, Ложь, СообщенияПроверки);
		
		ТекстНСТР = НСтр("en='TIN is correct';ru='ИНН указан правильно'");
		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), ТекстНСТР, СообщенияПроверки);
		
		Если ИННУказанПравильно Тогда
			Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Иначе
			Картинка = БиблиотекаКартинок.Предупреждение;
			ТекстНадписи  = НСтр("en='Error';ru='Ошибка'");
			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
		
	Иначе
		
		СообщенияПроверки = НСтр("en='Not specified TIN, used in reporting under form 2-NDFL';ru='Не указан ИНН, используется в отчетности по форме 2-НДФЛ'");
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
			
	КонецЕсли;
	
	Форма.ФизическоеЛицоИННКартинка = Картинка;
	Форма.ФизическоеЛицоИНННадпись  = ТекстНадписи;
	Форма.Элементы.ФизическоеЛицоИНННадпись.Подсказка = СообщенияПроверки;
	Форма.Элементы.ФизическоеЛицоИНННадпись.ЦветТекста = ЭлементЦветТекста;
	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
	 
КонецПроцедуры

Процедура УстановитьВидимостьПолейФИО(Форма) Экспорт
	ФИОВведено = НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Фамилия)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Отчество);
	Если ФИОВведено Тогда
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмя;
	Иначе
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмяСкрытое;
	КонецЕсли;
КонецПроцедуры

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН          	- Строка - Проверяемый индивидуальный номер налогоплательщика.
//  ЭтоЮрЛицо   	- Булево - признак, является ли владелец ИНН юридическим лицом.
//  ТекстСообщения 	- Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Истина       - ИНН соответствует требованиям;
//  Ложь         - ИНН не соответствует требованиям.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ЭтоЮрЛицо, ТекстСообщения) Экспорт

	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";

	ИНН      = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);

	Если ЭтоЮрЛицо = Неопределено Тогда
	   	ТекстСообщения = ТекстСообщения + НСтр("en='TIN owner type is not specified.';ru='Не определен тип владельца ИНН.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("en='TIN contains only digits.';ru='ИНН должен состоять только из цифр.'");
	КонецЕсли;

	Если  ЭтоЮрЛицо  И ДлинаИНН <> 10 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
		               + НСтр("en='TIN of a legal entity must contain 10 digits.';ru='ИНН юридического лица должен состоять из 10 цифр.'");
	ИначеЕсли НЕ ЭтоЮрЛицо  И ДлинаИНН <> 12 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
		               + НСтр("en='TIN of an individual must contain 12 digits.';ru='ИНН физического лица должен состоять из 12 цифр.'");
	КонецЕсли;

	Если СоответствуетТребованиям Тогда

		Если ЭтоЮрЛицо Тогда

			КонтрольнаяСумма = 0;

			Для Н = 1 По 9 Цикл

				Если Н = 1 Тогда
					Множитель = 2;
				ИначеЕсли Н = 2 Тогда
					Множитель = 4;
				ИначеЕсли Н = 3 Тогда
					Множитель = 10;
				ИначеЕсли Н = 4 Тогда
					Множитель = 3;
				ИначеЕсли Н = 5 Тогда
					Множитель = 5;
				ИначеЕсли Н = 6 Тогда
					Множитель = 9;
				ИначеЕсли Н = 7 Тогда
					Множитель = 4;
				ИначеЕсли Н = 8 Тогда
					Множитель = 6;
				ИначеЕсли Н = 9 Тогда
					Множитель = 8;
				КонецЕсли;

				Цифра = Число(Сред(ИНН, Н, 1));
				КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;

			КонецЦикла;
			
			КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;

			Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("en='Control number for TIN is not the same as calculated.';ru='Контрольное число для ИНН не совпадает с рассчитанным.'");
			КонецЕсли;

		Иначе

			КонтрольнаяСумма11 = 0;
			КонтрольнаяСумма12 = 0;

			Для Н=1 По 11 Цикл

				// Расчет множителя для 11-го и 12-го разрядов
				Если Н = 1 Тогда
					Множитель11 = 7;
					Множитель12 = 3;
				ИначеЕсли Н = 2 Тогда
					Множитель11 = 2;
					Множитель12 = 7;
				ИначеЕсли Н = 3 Тогда
					Множитель11 = 4;
					Множитель12 = 2;
				ИначеЕсли Н = 4 Тогда
					Множитель11 = 10;
					Множитель12 = 4;
				ИначеЕсли Н = 5 Тогда
					Множитель11 = 3;
					Множитель12 = 10;
				ИначеЕсли Н = 6 Тогда
					Множитель11 = 5;
					Множитель12 = 3;
				ИначеЕсли Н = 7 Тогда
					Множитель11 = 9;
					Множитель12 = 5;
				ИначеЕсли Н = 8 Тогда
					Множитель11 = 4;
					Множитель12 = 9;
				ИначеЕсли Н = 9 Тогда
					Множитель11 = 6;
					Множитель12 = 4;
				ИначеЕсли Н = 10 Тогда
					Множитель11 = 8;
					Множитель12 = 6;
				ИначеЕсли Н = 11 Тогда
					Множитель11 = 0;
					Множитель12 = 8;
				КонецЕсли;

				Цифра = Число(Сред(ИНН, Н, 1));
				КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
				КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;

			КонецЦикла;

			КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
			КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;

			Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1)) ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("en='Control number for TIN is not the same as calculated.';ru='Контрольное число для ИНН не совпадает с рассчитанным.'");
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СоответствуетТребованиям;

КонецФункции

Процедура ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект) Экспорт
	Перем ЗаписьНабора;
	
	Если Не Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		
		Форма.ПрочитатьНаборЗаписейПериодическихСведений("ДокументыФизическихЛиц", ВедущийОбъект);
		
	КонецЕсли;
	
	СтруктураЗаписиСтрокой = "";
	ПрежняяЗапись = Новый Структура;
	НужнаЗапятая = Ложь;
	Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
		Если НужнаЗапятая Тогда
			СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + ",";
		КонецЕсли;
		СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + КлючЗначение.Ключ;
		НужнаЗапятая = Истина;
		ПрежняяЗапись.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма["ДокументыФизическихЛиц"].Период) Тогда
		ПериодИзменен = Форма["ДокументыФизическихЛиц"].Период > Форма["ДокументыФизическихЛицПрежняя"].Период;
		РесурсыИзменены = Ложь;
		Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
			Если КлючЗначение.Ключ = "Период" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючЗначение.Значение <> Форма["ДокументыФизическихЛиц"][КлючЗначение.Ключ] Тогда
				РесурсыИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей = Форма["ДокументыФизическихЛицНаборЗаписей"];
		Если (ПериодИзменен И РесурсыИзменены) ИЛИ НаборЗаписей.Количество() = 0 Тогда
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() = 0 Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли;
		Иначе
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() > 0 Тогда
				ЗаписьНабора = ЗаписьНаНовуюДату[0];
			Иначе
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗаписьНабора <> НеОпределено Тогда
			
			// Если в этом периоде уже есть документы являющиеся удостоверением личности - 
			// сбросим признак
			ЯвляющиесяУдостоверениямиЛичности = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ЯвляетсяДокументомУдостоверяющимЛичность", Форма["ДокументыФизическихЛиц"].Период, Истина));
			Для каждого УдостоверениеЛичности Из ЯвляющиесяУдостоверениямиЛичности Цикл
				Если УдостоверениеЛичности.ВидДокумента <> ЗаписьНабора.ВидДокумента Тогда
					УдостоверениеЛичности.ЯвляетсяДокументомУдостоверяющимЛичность = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Форма["ДокументыФизическихЛиц"]);
			НаборЗаписей.Сортировать("Период,ЯвляетсяДокументомУдостоверяющимЛичность");
			
			ЗаполнитьЗначенияСвойств(ПрежняяЗапись, Форма["ДокументыФизическихЛиц"]);
			Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ПрежняяЗапись);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для полей содержащих ИНН, СтраховойНомерПФР

Процедура УстановитьПодсказкуКДатеРождения(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ДатаРождения) Тогда
		
		Форма.ФизическоеЛицоДатаРожденияКартинка = Новый Картинка;
		Форма.ФизическоеЛицоДатаРожденияНадпись = "";
		ТекстПодсказки = "";
		
	Иначе
		
		Форма.ФизическоеЛицоДатаРожденияКартинка = БиблиотекаКартинок.Предупреждение;
		Форма.ФизическоеЛицоДатаРожденияНадпись = НСтр("en='Date of birth used"
"at calculating contributions';ru='Дата рождения используется"
"при расчете взносов'");
		ТекстПодсказки = НСтр("en='Date of birth used in the calculation of insurance contributions to the FIU."
"If date of birth is not filled, the fees will be calculated as for"
"persons 1966 year of birth and older.';ru='Дата рождения используется при расчете страховых взносов в ПФР."
"Если дата рождения не заполнена, взносы будут рассчитаны как для"
"лица 1966 года рождения и старше.'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизлицоДатаРождения",
		"Подсказка",
		ТекстПодсказки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицоДатаРожденияКартинка",
		"Подсказка",
		ТекстПодсказки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицоДатаРожденияНадпись",
		"Подсказка",
		ТекстПодсказки);
		
		
КонецПроцедуры

Процедура ОбновитьПолеУдостоверениеЛичностиПериод(Форма) Экспорт
	
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о сведениях об инвалидности еще нет
	Если ЗарплатаКадрыКлиентСервер.УдостоверениеЛичностиПоУмолчанию(Форма.ДокументыФизическихЛиц)
		И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
		Форма.ДокументыФизическихЛиц.Период = '00010101';
		Форма.Элементы.ДокументыФизическихЛицВидДокумента.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ДокументыФизическихЛицВидДокумента.ОтметкаНезаполненного = Ложь;
	Иначе
		Форма.Элементы.ДокументыФизическихЛицВидДокумента.АвтоОтметкаНезаполненного = Истина;
		Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
			Форма.Элементы.ДокументыФизическихЛицВидДокумента.ОтметкаНезаполненного = Ложь;
		Иначе
			Форма.Элементы.ДокументыФизическихЛицВидДокумента.ОтметкаНезаполненного = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Период) Тогда
			Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
				Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
			Иначе
				Форма.ДокументыФизическихЛиц.Период = НачалоДня(ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
		Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
		ДоступностьПоляПериод = Ложь;
	Иначе
		ДоступностьПоляПериод = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДокументыФизическихЛицПериод",
		"Доступность",
		ДоступностьПоляПериод);
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
	
КонецПроцедуры

Процедура ОбработатьОтображениеСерияДокументаФизическогоЛица(ВидДокумента, Серия ,Элемент, Форма) Экспорт
	СообщенияПроверки = "";
	ТипСерии = ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если ЗначениеЗаполнено(ВидДокумента) И ТипСерии > 0 Тогда
		Если НЕ ПустаяСтрока(Серия) Тогда
			СерияУказанаПравильно = СерияДокументаУказанаПравильно(ВидДокумента, Серия, СообщенияПроверки);
			СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("en='Series is correct';ru='Серия указана правильно'"), СообщенияПроверки);
			Если СерияУказанаПравильно Тогда
				Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
				ТекстНадписи  = "";
				ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Иначе
				Картинка = БиблиотекаКартинок.Предупреждение;
				ТекстНадписи  = НСтр("en='Error';ru='Ошибка'");
				ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			КонецЕсли;
		Иначе
			СообщенияПроверки = НСтр("en='Not specify series of document';ru='Не указана серия документа'");
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Картинка = Новый Картинка;
		КонецЕсли;
	Иначе
		СообщенияПроверки = НСтр("en='Document series';ru='Серия документа'");
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
	КонецЕсли;
	Форма[Элемент.Имя + "ИнфоКартинка"] = Картинка;
	Форма[Элемент.Имя + "ИнфоТекст"] = ТекстНадписи;
	Форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].ЦветТекста = ЭлементЦветТекста;
	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
КонецПроцедуры

Процедура ОбработатьОтображениеНомерДокументаФизическогоЛица(ВидДокумента, Номер ,Элемент, Форма) Экспорт
	СообщенияПроверки = "";
	ТипНомера = ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если ЗначениеЗаполнено(ВидДокумента) И ТипНомера > 0 Тогда
		Если НЕ ПустаяСтрока(Номер) Тогда
			СерияУказанаПравильно = НомерДокументаУказанПравильно(ВидДокумента, Номер, СообщенияПроверки);
			СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("en='Document number is correct';ru='Номер документа указан правильно'"), СообщенияПроверки);
			Если СерияУказанаПравильно Тогда
				Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
				ТекстНадписи  = "";
				ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Иначе
				Картинка = БиблиотекаКартинок.Предупреждение;
				ТекстНадписи  = НСтр("en='Error';ru='Ошибка'");
				ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			КонецЕсли;
		Иначе
			СообщенияПроверки = НСтр("en='Do not specify a document number';ru='Не указан номер документа'");
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Картинка = Новый Картинка;
		КонецЕсли;
	Иначе
		СообщенияПроверки = НСтр("en='Document number';ru='Номер документа'");
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
	КонецЕсли;
	Форма[Элемент.Имя + "ИнфоКартинка"] = Картинка;
	Форма[Элемент.Имя + "ИнфоТекст"] = ТекстНадписи;
	Форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].ЦветТекста = ЭлементЦветТекста;
	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с физическими лицами

// Возвращает тип серии документа удостоверяющего личность
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//	Число	- тип серии для документа, 0 - требований к серии нет
//
Функция ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента) Экспорт
	
	ТипДокумента = 0;
	Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортСССР")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении") Тогда
		ТипДокумента = 1;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.УдостоверениеОфицера")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМинморфлота")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилет")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМоряка")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса") Тогда
		ТипДокумента = 2;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ") Тогда
		ТипДокумента = 3;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ") Тогда
		ТипДокумента = 4;
		
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Возвращает тип номера документа удостоверяющего личность
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//	Число	- тип номера для документа, 0 - требований к номеру нет
//
Функция ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента) Экспорт
	
	ТипДокумента = 0;
	Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортСССР")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.УдостоверениеОфицера")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМинморфлота")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ") Тогда
		ТипДокумента = 1;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ") Тогда
		ТипДокумента = 2;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилет")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМоряка")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса") Тогда
		ТипДокумента = 3;
		
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Проверяет, что серия документа для переданного вида документа указана правильно.
//
// Параметры:
//	ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц	- вид документа, для которого необходимо
//																проверить правильность серии
//	Серия - Строка												- серия документа
//	ТекстОшибки - Строка										- текст ошибки, если серия указана неправильно
//
// Возвращаемое значение:
//	Булево - результат проверки, Истина - правильно, Ложь - нет.
//
Функция СерияДокументаУказанаПравильно(ВидДокумента, Знач Серия , ТекстОшибки) Экспорт
	
	ТипДокумента = ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	
	Серия = СокрЛП(Серия);
	
	Если ТипДокумента = 1 Тогда // паспорт СССР и свидетельство о рождении
		
		Поз = Найти(Серия, "-");
		Если Поз = 0 Тогда
			ТекстОшибки = НСтр("en='Series of the document should consist of two parts, separated by ""-"".';ru='Серия документа должна состоять из двух частей, разделенных символом ""-"".'");
			Возврат Ложь;
		КонецЕсли;
		
		ЧастьСерии1 = Лев(Серия, Поз - 1);
		ЧастьСерии2 = СокрЛП(Сред(Серия, Поз + 1));
		
		Поз = Найти(ЧастьСерии2, "-");
		Если Поз <> 0 Тогда
			ТекстОшибки = НСтр("en='In series of document should be only two groups of characters.';ru='В серии документа должно быть только две группы символов.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ЧастьСерии1) Тогда
			ТекстОшибки = НСтр("en='In a series of document is missing the numeric part.';ru='В серии документа отсутствует числовая часть.'");
			Возврат Ложь;
			
		ИначеЕсли  ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС", ЧастьСерии1, 
				"          ")) = 0 Тогда
			ТекстОшибки = НСтр("en='Numeric part of document should be indicated by symbols 1 У Х Л С or I V X L C.';ru='Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C.'");
			Возврат Ложь;
			
		ИначеЕсли СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC", ЧастьСерии1, "1УХЛС") <> 
				СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(
				СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВАрабскуюНотацию(
				СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC", ЧастьСерии1, "1УХЛС"))) Тогда
			ТекстОшибки = НСтр("en='Numeric part of document series are incorrect.';ru='Числовая часть серии документа указана некорректно.'");
			Возврат Ложь;
			
		ИначеЕсли СтрДлина(ЧастьСерии2) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
				"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", ЧастьСерии2, "                                 ")) Тогда
			ТекстОшибки = НСтр("en='After separator ""-"" in a series of document should be TWO Russian capitals.';ru='После разделителя ""-"" в серии документа должны быть ДВЕ pусcкие заглавные буквы.'");
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 2 Тогда // серия - две буквы: военный билет, ...
		Если СтрДлина(Серия) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
				"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", Серия, "                                 ")) Тогда
			ТекстОшибки = НСтр("en='In series of document there should be TWO Russian caps.';ru='В серии документа должны быть ДВЕ pусcкие заглавные буквы.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 3 Тогда // серия - две цифры: загранпаспорта
		Если СтрДлина(Серия) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789",
				Серия, "          ")) Тогда
			ТекстОшибки = НСтр("en='In the series of the document must be TWO digits.';ru='В серии документа должно быть ДВЕ цифры.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 4 Тогда // серия - две группы цифр: новый паспорт
		Поз = Найти(Серия, " ");
		Если Поз = 0 Тогда
			ТекстОшибки = НСтр("en='In series of document should be two sets of numbers.';ru='В серии документа должно быть две группы цифр.'");
			Возврат Ложь;
		КонецЕсли;
		
		ПерваяЧасть = Лев(Серия, Поз-1);
		ВтораяЧасть = СокрЛП(Сред(Серия, Поз+1));
		
		Поз = Найти(ВтораяЧасть, " ");
		Если Поз <> 0 Тогда
			ТекстОшибки = НСтр("en='In a series of document should be only two groups of numbers.';ru='В серии документа должно быть только две группы цифр.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрДлина(ПерваяЧасть) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
				"0123456789", ПерваяЧасть, "          ")) Тогда
			ТекстОшибки = НСтр("en='First group of characters in the document series must contain two digits.';ru='Первая группа символов серии документа должна содержать две цифры.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрДлина(ВтораяЧасть) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
				"0123456789", ВтораяЧасть, "          ")) Тогда
			ТекстОшибки = НСтр("en='Second group of symbols of the series of the document must contain two digits.';ru='Вторая группа символов серии документа должна содержать две цифры.'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что номер документа для переданного вида документа указан правильно.
//
// Параметры:
//	ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц	- вид документа, для которого необходимо
//																проверить правильность номера
//	Номер - Строка												- номер документа
//	ТекстОшибки - Строка										- текст ошибки, если номер указан неправильно
//
// Возвращаемое значение:
//	Булево - результат проверки, Истина - правильно, Ложь - нет.
//
Функция НомерДокументаУказанПравильно(ВидДокумента, Знач Номер, ТекстОшибки) Экспорт
	
	Если Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789", Номер, "          ")) Тогда
		ТекстОшибки = НСтр("en='Document number contains invalid symbols.';ru='В номере документа присутствуют недопустимые символы.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТипДокумента = ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	Если ТипДокумента = 1 Тогда
		Если ДлинаНомера <> 6 Тогда
			ТекстОшибки = НСтр("en='Document number should consist of 6 characters.';ru='Номер документа должен состоять из 6 символов.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 2 Тогда
		Если ДлинаНомера <> 7 Тогда
			ТекстОшибки = НСтр("en='Document number must consist of 7 characters.';ru='Номер документа должен состоять из 7 символов.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 3 Тогда
		Если (ДлинаНомера < 6 ) Или ( ДлинаНомера > 7 ) Тогда
			ТекстОшибки = НСтр("en='Document number should be 6 or 7 characters.';ru='Номер документа должен состоять из 6 или 7 символов.'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

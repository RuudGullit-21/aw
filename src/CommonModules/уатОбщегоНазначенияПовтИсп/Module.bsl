////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// Процедуры и функции общего назначения, перенесенные из типовых конфигураций.
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Получить значение ставки НДС.
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	ИначеЕсли Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20") <> Неопределено
		И СтавкаНДС = Перечисления.СтавкиНДС.НДС20
		ИЛИ Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти("НДС20_120") <> Неопределено
		И СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	КонецЕсли;
	
	Возврат 0;

КонецФункции // ПолучитьЗначениеСтавкиНДС()

// Функция возвращает ставку НДС - Без НДС.
//
Функция ПолучитьСтавкуНДСБезНДС() Экспорт
	
	Возврат Перечисления.СтавкиНДС.БезНДС;
		
КонецФункции // ПолучитьСтавкуНДСБезНДС()

// Функция возвращает ставку НДС - Ноль.
//
Функция ПолучитьСтавкуНДСНоль() Экспорт
	
	Возврат Перечисления.СтавкиНДС.НДС0;
	
КонецФункции // ПолучитьСтавкуНДСНоль()

// Возвращает ИСТИНА, если текущая конфигурация "Управление автотранспортом Стандарт"
//
Функция ВариантПоставкиСТД() Экспорт
	Возврат уатЗащищенныеФункцииСервер.ВариантПоставкиСТД();
КонецФункции // ВариантПоставкиСТД()

// Возвращает ИСТИНА, если текущая конфигурация "Управление автотранспортом ПРОФ"
//
Функция ВариантПоставкиПРОФ() Экспорт
	Возврат уатЗащищенныеФункцииСервер.ВариантПоставкиПРОФ();
КонецФункции // ВариантПоставкиПРОФ()

// Возвращает ИСТИНА, если текущая конфигурация "ТЛЭ и УАТ КОРП"
//
Функция ВариантПоставкиКОРП() Экспорт
	Возврат уатЗащищенныеФункцииСервер.ВариантПоставкиКОРП();
КонецФункции // ВариантПоставкиКОРП()

// Возвращает ИСТИНА, если пользователю доступно изменение варианта поставки
//
Функция РазрешеноИзменениеПоставки() Экспорт
	Возврат уатЗащищенныеФункцииСервер.РазрешеноИзменениеПоставки();
КонецФункции // РазрешеноИзменениеПоставки()

// Получение имени защищенной обработки по умолчанию
//
Функция ПолучитьИмяЗащищеннойОбработкиПоУмолчанию() Экспорт

	Если ВариантПоставкиКОРП() Тогда
		Возврат уатЗащищенныеФункцииСервер.ПолучитьИмяЗащищеннойОбработкиКОРП();
	ИначеЕсли ВариантПоставкиПРОФ() Тогда
		Возврат уатЗащищенныеФункцииСервер.ПолучитьИмяЗащищеннойОбработкиПРОФ();	
	Иначе
		Возврат уатЗащищенныеФункцииСервер.ПолучитьИмяЗащищеннойОбработкиСТД();	
	КонецЕсли;
	
КонецФункции // ПолучитьИмяЗащищеннойОбработкиПоУмолчанию()

// Возвращает флаг использования подсистемы защиты СЛК
//
Функция ИспользоватьЗащитуСЛК() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьПрямоеПодключениеСЛК = Константы.уатИспользоватьПрямоеПодключениеСЛК.Получить();
	
	Возврат ИспользоватьПрямоеПодключениеСЛК;
КонецФункции


//////////////////////////////////////////////////////////////////////////////// 
// НАСТРОЙКИ ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт
	
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		ИмяПользователяИБ = ПользовательИБ.Имя;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ЗначПоУмолч = Неопределено;
	
	тблНастройки = ПолучитьСписокНастроекПользователяУАТ();
	СтрокаПоискаНастройки = тблНастройки.Найти(Настройка, "ИмяНастройки");
	Если СтрокаПоискаНастройки <> Неопределено Тогда
		ЗначПоУмолч = СтрокаПоискаНастройки.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	// закоментарено из-за проверки на право СохранениеДанныхПользователя при чтении настроек. Такого запрета не должно быть
	// поскольку сохранение настроек ограничивает запись, а чтение доступно всегда
	//Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег(Настройка),, ЗначПоУмолч,, ИмяПользователяИБ);
	
	Если ВРег(Настройка) = ВРег("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда 
		Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ОбщиеНастройкиПользователя", 
			"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			,
			,
			ИмяПользователяИБ
		);
		
	Иначе
		Результат = ХранилищеОбщихНастроек.Загрузить(ВРег(Настройка), "", "", ИмяПользователяИБ);
		Если ВРег(Настройка) = ВРег("ОсновнаяСтавкаНДС") Тогда
			// значения перечислений возвращаем как есть, без проверок
		Иначе
			Попытка
				// Получение объекта выполняется для проверки доступности объекта для данного пользователя с учетом RLS.
				// Если объект не доступен - значение битой ссылки (Объект не найден) не подставляем.
				Об = Результат.ПолучитьОбъект();
				
				Если Результат = Неопределено Тогда
					Результат = ЗначПоУмолч;
				Иначе
					УстановитьПривилегированныйРежим(Истина);
					Если УдалитьБитыеСсылки(Результат) Тогда
						Результат = ЗначПоУмолч;
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				Возврат ЗначПоУмолч;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Удаляет битые ссылки из переменной.
//
// Параметры:
//   СсылкаИлиКоллекция - ЛюбаяСсылка, Произвольный - Проверяемый объект или очищаемая коллекция.
//
// Возвращаемое значение: 
//   Булево - 
//       * Истина - СсылкаИлиКоллекция ссылочного типа и объект не найден в базе данных.
//       * Ложь - Когда СсылкаИлиКоллекция не ссылочного типа или объект найден в базе данных.
//
Функция УдалитьБитыеСсылки(СсылкаИлиКоллекция)
	
	Тип = ТипЗнч(СсылкаИлиКоллекция);
	
	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Тип = Тип("Массив") Тогда
		
		Количество = СсылкаИлиКоллекция.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Значение = СсылкаИлиКоллекция[ОбратныйИндекс];
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из СсылкаИлиКоллекция Цикл
			Значение = КлючИЗначение.Значение;
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.
		
		Если СсылкаИлиКоллекция.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаИлиКоллекция, "Ссылка") = Неопределено Тогда
			СсылкаИлиКоллекция = Неопределено;
			Возврат Истина; // "Битая" ссылка.
		Иначе
			Возврат Ложь; // Объект найден.
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь; // Не ссылка.
		
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает новое значение настройки пользователя
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		ИмяПользователяИБ = ПользовательИБ.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВРег(Настройка) = ВРег("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда 
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбщиеНастройкиПользователя", 
			"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			Значение,
			,
			ИмяПользователяИБ,
			Истина
		);
		
	Иначе 
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, ИмяПользователяИБ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает новое значение настройки пользователя, если оно не указано
// Если значение по умолчанию указано, то новое значение не устанавливается
Процедура ЗаполнитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь) Экспорт
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		ИмяПользователяИБ = ПользовательИБ.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ВРег(Настройка) = ВРег("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда 
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбщиеНастройкиПользователя", 
			"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			Значение,
			,
			ИмяПользователяИБ,
			Истина
		);
		
	Иначе 
		ТекущаяНастройка = ХранилищеОбщихНастроек.Загрузить(Настройка,,,ИмяПользователяИБ);
		
		Если ТекущаяНастройка = Неопределено Тогда
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
				ИмяПользователяИБ = ПользовательИБ.Имя;
			Исключение
				Возврат;
			КонецПопытки;
			
			ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, ИмяПользователяИБ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает набор настроек пользователя УАТ
//
Функция ПолучитьСписокНастроекПользователяУАТ() Экспорт
	тблНастройки = Новый ТаблицаЗначений;
	тблНастройки.Колонки.Добавить("ИмяНастройки");
	тблНастройки.Колонки.Добавить("Представление");
	тблНастройки.Колонки.Добавить("ЗначениеПоУмолчанию");
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИзменятьСписокЭлектронныхПисемПриВыбореПапкиПисем";
	НоваяСтрока.Представление = НСтр("en='Change list of emails when you select mail folder';ru='Изменять список электронных писем при выборе папки писем'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "КоманднаяСтрокаДляЗапускаВнешнегоХТМЛРедактора";
	НоваяСтрока.Представление = НСтр("en='Command line to launch external HTML editor';ru='Командная строка для запуска внешнего HTML-редактора'");
	НоваяСтрока.ЗначениеПоУмолчанию = "";
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ПолучениеЭлектронныхПисемПриОткрытии";
	НоваяСтрока.Представление = НСтр("en='Receive emails when you open';ru='Получение электронных писем при открытии'");
	НоваяСтрока.ЗначениеПоУмолчанию = Истина;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяУчетнаяЗапись";
	НоваяСтрока.Представление = НСтр("en='Main account';ru='Основная учетная запись'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойВидОбъектаСобытия";
	НоваяСтрока.Представление = НСтр("en='Main type of event object';ru='Основной вид объекта события'");
	НоваяСтрока.ЗначениеПоУмолчанию = Неопределено;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИнтервалНапоминанияДоНачалаСобытия";
	НоваяСтрока.Представление = НСтр("en='Remind interval before the event';ru='Интервал напоминания до начала события'");
	НоваяСтрока.ЗначениеПоУмолчанию = 0;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИспользоватьНапоминания";
	НоваяСтрока.Представление = НСтр("en='Use reminders';ru='Использовать напоминания'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИспользоватьЗвуковыеОповещения";
	НоваяСтрока.Представление = НСтр("en='Use sound notifications';ru='Использовать звуковые оповещения'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы";
	НоваяСтрока.Представление = НСтр("en='Request confirmation at program termination';ru='Запрашивать подтверждение при завершении программы'");
	НоваяСтрока.ЗначениеПоУмолчанию = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойКаталогФайлов";
	НоваяСтрока.Представление = НСтр("en='Main files directory';ru='Основной каталог файлов'");
	НоваяСтрока.ЗначениеПоУмолчанию = "";
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ПечатьДокументовБезПредварительногоПросмотра";
	НоваяСтрока.Представление = НСтр("en='Print documents without preview';ru='Печать документов без предварительного просмотра'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ИзменениеПользователяВКалендареПользователя";
	НоваяСтрока.Представление = НСтр("en=""Change of user in user's calendar"";ru='Изменение пользователя в календаре пользователя'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяВалютаВзаиморасчетов";
	НоваяСтрока.Представление = НСтр("en='Main currency of mutual settlements';ru='Основная валюта взаиморасчетов'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Валюты.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяЕдиницаПоКлассификатору";
	НоваяСтрока.Представление = НСтр("en='Basic unit by classifier';ru='Основная единица по классификатору'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяОрганизация";
	НоваяСтрока.Представление = НСтр("en='Main company';ru='Основная организация'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнаяСтавкаНДС";
	НоваяСтрока.Представление = НСтр("en='Basic VAT rate';ru='Основная ставка НДС'");
	НоваяСтрока.ЗначениеПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновноеПодразделениеОрганизации";
	НоваяСтрока.Представление = НСтр("en='Basic department of company';ru='Основное подразделение организации'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойОтветственный";
	НоваяСтрока.Представление = НСтр("en='Main responsible';ru='Основной ответственный'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Пользователи.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойПокупатель";
	НоваяСтрока.Представление = НСтр("en='Main buyer';ru='Основной покупатель'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойПоставщик";
	НоваяСтрока.Представление = НСтр("en='Main supplier';ru='Основной поставщик'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОсновнойСклад";
	НоваяСтрока.Представление = НСтр("en='Main warehouse';ru='Основной склад'");
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОтражатьДокументыВБухгалтерскомУчете";
	НоваяСтрока.Представление = НСтр("en='Reflect documents in accounting';ru='Отражать документы в бухгалтерском учете'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОтражатьДокументыВНалоговомУчете";
	НоваяСтрока.Представление = НСтр("en='Reflect the documents in tax accounting';ru='Отражать документы в налоговом учете'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	НоваяСтрока = тблНастройки.Добавить();
	НоваяСтрока.ИмяНастройки = "ОтражатьДокументыВУправленческомУчете";
	НоваяСтрока.Представление = НСтр("en='Reflect documents in management accounting';ru='Отражать документы в управленческом учете'");
	НоваяСтрока.ЗначениеПоУмолчанию = Ложь;
	
	тблНастройки.Сортировать("Представление");
	
	Возврат тблНастройки;
КонецФункции


//////////////////////////////////////////////////////////////////////////////// 
// ЕДИНИЦЫ ИЗМЕРЕНИЯ ВЕСА И ОБЪЕМА

// Функция возвращает представление основной единицы измерения веса.
//
Функция ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса() Экспорт
	
	Возврат СокрЛП(Константы.уатЕдиницаИзмеренияВеса.Получить());
	
КонецФункции // ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса()

// Функция возвращает представление основной единицы измерения объема.
//
Функция ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема() Экспорт
	
	Возврат СокрЛП(Константы.уатЕдиницаИзмеренияОбъема.Получить());
	
КонецФункции // ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема()


//////////////////////////////////////////////////////////////////////////////// 
// ВЕДОМОСТЬ ТЭП

// Функция получает количество выходных дней по графику работы за указанный период
//
Функция КоличествоВыходныхПоГрафику(ГрафикРаботы, ДатаНач, ДатаКон) Экспорт
	Если НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &ГрафикТС
	|	И (НЕ КалендарныеГрафики.ДеньВключенВГрафик)
	|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &ДатаНач И &ДатаКон");
	Запрос.УстановитьПараметр("ГрафикТС", ГрафикРаботы);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Рез = Запрос.Выполнить().Выбрать().Количество();
	
	Возврат Рез;
КонецФункции

Функция ИспользоватьСправочникиЭДО() Экспорт
   Возврат Константы.уатИспользоватьСправочникиЭДО.Получить();
КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// 
// АРМ
// 
// Содержит код, используемый в варианте поставке СТД, ПРОФ, КОРП
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура запрещает использование указанных полей и всех их дочерних полей в настройках отбора АРМ.
//
&НаСервере
Процедура УстановитьОграниченияИспользованияВОтбореЗаказыСписок(Объект) Экспорт
	
	ЗапрещенныеВОтбореПоля = Новый Массив;
	ЗапрещенныеВОтбореПоля.Добавить("АдресНазначенияПредставление");
	ЗапрещенныеВОтбореПоля.Добавить("АдресОтправленияПредставление");
	ЗапрещенныеВОтбореПоля.Добавить("АдресНазначенияУказанНаКарте");
	ЗапрещенныеВОтбореПоля.Добавить("АдресОтправленияУказанНаКарте");
	ЗапрещенныеВОтбореПоля.Добавить("АдресОтправленияУказанНаКарте");
	ЗапрещенныеВОтбореПоля.Добавить("ЦветДокумента");
	ЗапрещенныеВОтбореПоля.Добавить("Использование");
	ЗапрещенныеВОтбореПоля.Добавить("ЛатОтправления");
	ЗапрещенныеВОтбореПоля.Добавить("ЛонОтправления");
	ЗапрещенныеВОтбореПоля.Добавить("ЛатНазначения");
	ЗапрещенныеВОтбореПоля.Добавить("ЛонНазначения");
	ЗапрещенныеВОтбореПоля.Добавить("Статус");
	ЗапрещенныеВОтбореПоля.Добавить("ПараметрыДанных");

	Объект.ЗаказыСписок.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	Объект.ЗаказыСписок.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеВОтбореПоля);
	
КонецПроцедуры

// Процедура устанавливает первоначальные значения переменных АРМ.
//
&НаСервере
Процедура УстановитьПервоначальныеЗначенияПеременныхСервер(Объект) Экспорт
		
	Объект.ТипКартографии		 = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	Объект.ВнешнийМаршрутизатор  = Объект.ТипКартографии = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
	
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	Объект.КоэффициентОбъемаКузова     = ВесоОбъемныеХарактеристики.КоэффициентОбъемаКузова;
	Объект.КоэффициентГрузоподъемности = ВесоОбъемныеХарактеристики.КоэффициентГрузоподъемности;

	Объект.ТекПользователь = Пользователи.АвторизованныйПользователь();
	Объект.ТекОрганизация  = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.ТекПользователь,
	"ОсновнаяОрганизация");
	
	Объект.СпособПересчетаПлановогоВремениПоУмолчанию = ХранилищеНастроекДанныхФорм.Загрузить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
		"ПересчетВремени"
	);
	
	Объект.ТипыТочекМаршрута_Погрузка    = Перечисления.уатТипыТочекМаршрута.Погрузка;
	Объект.ТипыТочекМаршрута_ДопПогрузка = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка;
	Объект.ТипыТочекМаршрута_Разгрузка   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
	Объект.ДетализацияЗакрытияПоЗаказам  = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
	
	ЭтоАРМЛогиста = Объект.Заголовок = Нстр("ru = 'АРМ Логиста'");
	Если ЭтоАРМЛогиста Тогда
		Объект.ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("МассивРаспределенныхЗаказов", Новый Массив());
	КонецЕсли;
	
	УстановитьЗаголовкиИПодсказкиКолонокТаблиц(Объект);
	ИнициализацияОтборовПоДопСвойствам(Объект);
	
	СхемаКомпановкиДанных      = Объект.Элементы.ЗаказыСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных  = Объект.Элементы.ЗаказыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	Объект.АдресСхемыКомпоновкиДанных     = ПоместитьВоВременноеХранилище(СхемаКомпановкиДанных, Новый УникальныйИдентификатор);
	Объект.АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);

КонецПроцедуры

// функция возвращает таблицу ТС с заданными отборами
// 
// Параметры:
//   Параметры - Структура - См. СтруктураПараметровДляПолученияТаблицыТС
//
// Возвращаемое значение:
//  Таблица ТС с их характеристиками
//
&НаСервере
Функция ПолучитьТаблицуТС(Параметры, ДатаПланирования, СоответсвиеМаршрутов = Неопределено, МассивТС = Неопределено, МассивМаршруты = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВыводитьПривлечТС",    Параметры.ПривлеченныеТС);
	Запрос.УстановитьПараметр("ВыводитьСобТС",        Параметры.СобственныеТС);
	Запрос.УстановитьПараметр("ДатаНач",              НачалоДня(ДатаПланирования));
	Запрос.УстановитьПараметр("ДатаКон",              КонецДня(ДатаПланирования));
	Запрос.УстановитьПараметр("КоэфГрузоподъемности", Параметры.КоэффициентГрузоподъемности);
	Запрос.УстановитьПараметр("КоэфОбъемаКузова",     Параметры.КоэффициентОбъемаКузова);
	Запрос.УстановитьПараметр("ЯндексМаршрутизация",  Параметры.НастройкаАлгоритмМаршрутизации = 3);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(Параметры.ЗаполнениеТСПриОткрытии, "ПЕРВЫЕ 301", "") + "
	|	уатТС.Ссылка КАК ТС,
	|	уатТС.Гараж КАК ГаражТС,
	|	уатТС.Гараж.Лат КАК ГаражТСЛат,
	|	уатТС.Гараж.Лон КАК ГаражТСЛон,
	|	уатТС.Организация КАК Организация,
	|	уатТС.Модель КАК Модель,
	|	уатТС.Модель.Наименование КАК НаименованиеМодели,
	|	уатТС.ОсновнойВидПеревозки КАК ВидПеревозки,
	|	ВЫБОР
	|		КОГДА уатТС.ОбъемКузова <> 0 И &ЯндексМаршрутизация
	|			ТОГДА уатТС.ОбъемКузова * &КоэфОбъемаКузова
	|		ИНАЧЕ уатТС.Модель.ОбъемКузова * &КоэфОбъемаКузова
	|	КОНЕЦ КАК ОбъемКузова,
	|	ВЫБОР
	|		КОГДА уатТС.МаксимальноеКоличествоУпаковок <> 0 И &ЯндексМаршрутизация
	|			ТОГДА уатТС.МаксимальноеКоличествоУпаковок
	|		ИНАЧЕ уатТС.Модель.МаксимальноеКоличествоУпаковок
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА уатТС.Грузоподъемность <> 0 И &ЯндексМаршрутизация
	|			ТОГДА уатТС.Грузоподъемность * &КоэфГрузоподъемности
	|		ИНАЧЕ уатТС.Модель.Грузоподъемность * &КоэфГрузоподъемности
	|	КОНЕЦ КАК Грузоподъемность,
	|	уатТС.Модель.МинимальныйВесГруза * &КоэфГрузоподъемности КАК МинимальныйВесГруза,
	|	уатТС.Модель.МинимальныйОбъемГруза * &КоэфОбъемаКузова КАК МинимальныйОбъемГруза,
	|	уатТС.Модель.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА уатТС.СобственныйВес <> 0
	|			ТОГДА уатТС.СобственныйВес
	|		ИНАЧЕ уатТС.Модель.СобственныйВес
	|	КОНЕЦ КАК СобственныйВес,
	|	ВЫБОР
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.АвиационныйТранспорт)
	|			ТОГДА 5
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.МорскойТранспорт)
	|			ТОГДА 9
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.ЖДТранспорт)
	|			ТОГДА 8
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|					ТОГДА 4
	|				КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	|					ТОГДА 6
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|			ТОГДА уатТС.Организация
	|		ИНАЧЕ уатТС.ВладелецТС
	|	КОНЕЦ КАК ВладелецТС,
	|	уатТС.Наименование КАК ПредставлениеТС,
	|	ВЫБОР
	|		КОГДА уатЭкипажТС.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьЭкипаж
	|ПОМЕСТИТЬ ВТ_СписокТС
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(уатЭкипажТС.Сотрудник) КАК Сотрудник,
	|			уатЭкипажТС.ТС КАК ТС,
	|			уатЭкипажТС.ЧленЭкипажа КАК ЧленЭкипажа
	|		ИЗ
	|			РегистрСведений.уатЭкипажТС КАК уатЭкипажТС
	|		ГДЕ
	|			уатЭкипажТС.ЧленЭкипажа = ЗНАЧЕНИЕ(Перечисление.уатЧленыЭкипажа.ОсновнойВодитель)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЭкипажТС.ТС,
	|			уатЭкипажТС.ЧленЭкипажа) КАК уатЭкипажТС
	|		ПО (уатЭкипажТС.ТС = уатТС.Ссылка)
	|ГДЕ
	|	уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт)
	|	И уатТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И (&ВыводитьПривлечТС
	|				И уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|			ИЛИ &ВыводитьСобТС
	|				И уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|			ИЛИ &ВыводитьПривлечТС
	|				И &ВыводитьСобТС
	|				И уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное))
	|	И НЕ уатТС.ПометкаУдаления";
	
	Если МассивТС <> Неопределено Тогда
		Запрос.УстановитьПараметр("МассивТС", МассивТС);
		Запрос.Текст = Запрос.Текст +"
		|	И уатТС.Ссылка В (&МассивТС)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +"
	|ИНДЕКСИРОВАТЬ ПО
	|ТС;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТС.Регистратор КАК Регистратор,
	|	уатСостояниеТС.ТС КАК ТС
	|ПОМЕСТИТЬ ВТ_СрезМаршрутныхЛистов
	|ИЗ
	|	РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	|ГДЕ
	|	уатСостояниеТС.Период <= &ДатаКон
	|	И уатСостояниеТС.ДатаОкончания >= &ДатаНач
	|	И уатСостояниеТС.Регистратор ССЫЛКА Документ.уатМаршрутныйЛист
	|
	|ИНДЕКСИРОВАТЬ ПО
	|ТС;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокТС.ТС КАК ТС,
	|	ВТ_СписокТС.Модель КАК Модель,
	|	ВТ_СписокТС.ГаражТС КАК ГаражТС,
	|	ВТ_СписокТС.ГаражТСЛат КАК ГаражТСЛат,
	|	ВТ_СписокТС.ГаражТСЛон КАК ГаражТСЛон,
	|	ВТ_СписокТС.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_СписокТС.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ВТ_СписокТС.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_СписокТС.СобственныйВес КАК СобственныйВес,
	|	ВТ_СписокТС.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|	ВТ_СписокТС.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|	ВТ_СписокТС.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ВТ_СписокТС.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_СписокТС.ВладелецТС КАК ВладелецТС,
	|	ЕСТЬNULL(ВТ_СрезМаршрутныхЛистов.Регистратор, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК МаршрутныйЛист,
	|	ВТ_СписокТС.ПредставлениеТС КАК ПредставлениеТС,
	|	ВТ_СписокТС.НаименованиеМодели КАК НаименованиеМодели,
	|	ВТ_СписокТС.Организация КАК Организация,
	|	ВТ_СписокТС.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_СписокТС.ЕстьЭкипаж КАК ЕстьЭкипаж
	|ПОМЕСТИТЬ ВТ_СписокТСрегистраторМЛ
	|ИЗ
	|	ВТ_СписокТС КАК ВТ_СписокТС
	|		" + ?(Параметры.ТСсМЛ, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ", "ЛЕВОЕ СОЕДИНЕНИЕ") + " ВТ_СрезМаршрутныхЛистов КАК ВТ_СрезМаршрутныхЛистов
	|		ПО ВТ_СписокТС.ТС = ВТ_СрезМаршрутныхЛистов.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатСоставТС.ВСоставе КАК ВСоставе,
	|	МИНИМУМ(уатСоставТС.ТС) КАК ТС
	|ПОМЕСТИТЬ Прицеп1
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
	|		ПО ВТ_СписокТСрегистраторМЛ.ТС = уатСоставТС.ВСоставе
	|ГДЕ
	|	НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И Выбор Когда уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное) Тогда
	|			НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		Иначе Истина Конец
	|	И (уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСоставТС.ВСоставе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатСоставТС.ВСоставе КАК ВСоставе,
	|	МИНИМУМ(уатСоставТС.ТС) КАК ТС
	|ПОМЕСТИТЬ Прицеп2
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Прицеп1 КАК Прицеп1
	|			ПО уатСоставТС.ТС <> Прицеп1.ТС
	|				И уатСоставТС.ВСоставе = Прицеп1.ВСоставе
	|		ПО ВТ_СписокТСрегистраторМЛ.ТС = уатСоставТС.ВСоставе
	|ГДЕ
	|	НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И Выбор Когда уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное) Тогда
	|			НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		Иначе Истина Конец
	|	И (уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСоставТС.ВСоставе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Прицеп1.ВСоставе КАК ВСоставе,
	|	Прицеп1.ТС КАК Прицеп1,
	|	Прицеп2.ТС КАК Прицеп2
	|ПОМЕСТИТЬ втПрицепы
	|ИЗ
	|	Прицеп1 КАК Прицеп1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Прицеп2 КАК Прицеп2
	|		ПО Прицеп1.ВСоставе = Прицеп2.ВСоставе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокТСрегистраторМЛ.ТС КАК ТС,
	|	ВТ_СписокТСрегистраторМЛ.Модель КАК МодельТС,
	|	ВТ_СписокТСрегистраторМЛ.ГаражТС КАК ГаражТС,
	|	ВТ_СписокТСрегистраторМЛ.ГаражТСЛат КАК ГаражТСЛат,
	|	ВТ_СписокТСрегистраторМЛ.ГаражТСЛон КАК ГаражТСЛон,
	|	ВТ_СписокТСрегистраторМЛ.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_СписокТСрегистраторМЛ.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ВТ_СписокТСрегистраторМЛ.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_СписокТСрегистраторМЛ.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|	ВТ_СписокТСрегистраторМЛ.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|	ВТ_СписокТСрегистраторМЛ.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ВТ_СписокТСрегистраторМЛ.СобственныйВес КАК СобственныйВес,
	|	ВТ_СписокТСрегистраторМЛ.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_СписокТСрегистраторМЛ.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_СписокТСрегистраторМЛ.ВладелецТС КАК ВладелецТС,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ВесБрутто КАК МаршрутныйЛистВесБрутто,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Объем КАК МаршрутныйЛистОбъем,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.КоличествоМест КАК МаршрутныйЛистКоличествоМест,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Расстояние КАК МаршрутныйЛистРасстояние,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ВремяВПути КАК МаршрутныйЛистВремяВПути,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Прицеп1 КАК МаршрутныйЛистПрицеп1,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Прицеп2 КАК МаршрутныйЛистПрицеп2,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ОбъектСтроительства КАК МаршрутныйЛистОбъектСтроительства,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Маршрут КАК МаршрутныйЛистМаршрут,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ВидПеревозки КАК МаршрутныйЛистВидПеревозки,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.НаправлениеПеревозки КАК МаршрутныйЛистНаправлениеПеревозки,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ДатаИВремяОтправления КАК МаршрутныйЛистДатаИВремяОтправления,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ПересчетВремени КАК МаршрутныйЛистПересчетВремени,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Номер КАК МаршрутныйЛистНомер,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Дата КАК МаршрутныйЛистДата,
	|	уатМаршрутныйЛист.Заказы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЗаказГрузоотправителя.Номер КАК ЗаказГрузоотправителяНомер,
	|		ЗаказГрузоотправителя.ОтправлениеС КАК ЗаказОтправлениеС,
	|		ЗаказГрузоотправителя.ОтправлениеПо КАК ЗаказОтправлениеПо,
	|		ЗаказГрузоотправителя.ДоставкаС КАК ЗаказДоставкаС,
	|		ЗаказГрузоотправителя.ДоставкаПо КАК ЗаказДоставкаПо,
	|		ЗаказГрузоотправителя.ДетализацияЗакрытия КАК ЗаказДетализацияЗакрытия,
	|		ЗаказГрузоотправителя.Контрагент КАК ЗаказГрузоотправителяКонтрагент,
	|		ЗаказГрузоотправителя.Грузоотправитель КАК ЗаказГрузоотправителяГрузоотправитель,
	|		ЗаказГрузоотправителя.Грузополучатель КАК ЗаказГрузоотправителяГрузополучатель,
	|		ЗаказГрузоотправителя.ЦветДокумента КАК ЗаказГрузоотправителяЦветДокумента,
	|		ЕстьNULL(ЗаказГрузоотправителя.FTL, Ложь) КАК ЗаказГрузоотправителяFTL,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		GUIDСтроки КАК GUIDСтроки,
	|		ВесБрутто КАК ВесБрутто,
	|		Время КАК Время,
	|		Выполнен КАК Выполнен,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу,
	|		ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|		Количество КАК Количество,
	|		КоличествоМест КАК КоличествоМест,
	|		Контрагент КАК Контрагент,
	|		Номенклатура КАК Номенклатура,
	|		Объем КАК Объем,
	|		ПрибытиеПлан КАК ПрибытиеПлан,
	|		ПрибытиеФакт КАК ПрибытиеФакт,
	|		Пункт КАК Пункт,
	|		Выбор Когда ТипЗначения(Пункт) = Тип(Строка) Тогда 0 Иначе Пункт.Лат Конец КАК ПунктЛат,
	|		Выбор Когда ТипЗначения(Пункт) = Тип(Строка) Тогда 0 Иначе Пункт.Лон Конец КАК ПунктЛон,
	|		Расстояние КАК Расстояние,
	|		Стоянка КАК Стоянка,
	|		СтоянкаИзПункта КАК СтоянкаИзПункта,
	|		ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|		УбытиеПлан КАК УбытиеПлан,
	|		УбытиеФакт КАК УбытиеФакт,
	|		Ожидание КАК Ожидание,
	|		Терминал КАК Терминал,
	|		ВесТары КАК ВесТары,
	|		Группа КАК Группа,
	|		Паллета КАК Паллета,
	|		Размещение КАК Размещение
	|	) КАК Заказы,
	|	уатМаршрутныйЛист.Секции.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		GUIDСтроки КАК GUIDСтроки,
	|		Секция КАК Секция,
	|		Объем КАК Объем
	|	) КАК Секции,
	|	ВТ_СписокТСрегистраторМЛ.ПредставлениеТС КАК ПредставлениеТС,
	|	ВТ_СписокТСрегистраторМЛ.НаименованиеМодели КАК НаименованиеМодели,
	|	ВТ_СписокТСрегистраторМЛ.Организация КАК Организация,
	|	ВТ_СписокТСрегистраторМЛ.ЕстьЭкипаж КАК ЕстьЭкипаж,
	|	ВТ_СписокТСрегистраторМЛ.ТС.ПринадлежностьТС КАК ПринадлежностьТС,
	|	1 КАК КоличествоВиртуальныхТС,
	|	втПрицепы.Прицеп1 КАК Прицеп1,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(втПрицепы.Прицеп1.Грузоподъемность, 0) <> 0 И &ЯндексМаршрутизация
	|			ТОГДА ЕстьNULL(втПрицепы.Прицеп1.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|		ИНАЧЕ ЕстьNULL(втПрицепы.Прицеп1.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности 
	|	КОНЕЦ КАК Прицеп1Грузоподъемность,	
	|	ВЫБОР
	|		КОГДА ЕстьNULL(втПрицепы.Прицеп1.ОбъемКузова, 0) <> 0 И &ЯндексМаршрутизация
	|			ТОГДА ЕстьNULL(втПрицепы.Прицеп1.ОбъемКузова, 0) * &КоэфОбъемаКузова 
	|		ИНАЧЕ ЕстьNULL(втПрицепы.Прицеп1.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова  
	|	КОНЕЦ КАК Прицеп1ОбъемКузова,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(втПрицепы.Прицеп1.МаксимальноеКоличествоУпаковок, 0) <> 0 И &ЯндексМаршрутизация
	|			ТОГДА ЕстьNULL(втПрицепы.Прицеп1.МаксимальноеКоличествоУпаковок, 0) 
	|		ИНАЧЕ ЕстьNULL(втПрицепы.Прицеп1.Модель.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК Прицеп1МаксимальноеКоличествоУпаковок,
	|	втПрицепы.Прицеп2 КАК Прицеп2,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(втПрицепы.Прицеп2.Грузоподъемность, 0) <> 0 И &ЯндексМаршрутизация
	|			ТОГДА ЕстьNULL(втПрицепы.Прицеп2.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|		ИНАЧЕ ЕстьNULL(втПрицепы.Прицеп2.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности 
	|	КОНЕЦ КАК Прицеп2Грузоподъемность,	
	|	ВЫБОР
	|		КОГДА ЕстьNULL(втПрицепы.Прицеп2.ОбъемКузова, 0) <> 0 И &ЯндексМаршрутизация
	|			ТОГДА ЕстьNULL(втПрицепы.Прицеп2.ОбъемКузова, 0) * &КоэфОбъемаКузова 
	|		ИНАЧЕ ЕстьNULL(втПрицепы.Прицеп2.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова  
	|	КОНЕЦ КАК Прицеп2ОбъемКузова,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(втПрицепы.Прицеп2.МаксимальноеКоличествоУпаковок, 0) <> 0 И &ЯндексМаршрутизация
	|			ТОГДА ЕстьNULL(втПрицепы.Прицеп2.МаксимальноеКоличествоУпаковок, 0) 
	|		ИНАЧЕ ЕстьNULL(втПрицепы.Прицеп2.Модель.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК Прицеп2МаксимальноеКоличествоУпаковок,
	|	ВТ_СписокТСрегистраторМЛ.ТС.Характеристики.(
	|		Характеристика КАК ТСХарактеристика
	|	) КАК ХарактеристикиТС
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО (ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист = уатМаршрутныйЛист.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрицепы КАК втПрицепы
	|		ПО (ВТ_СписокТСрегистраторМЛ.ТС = втПрицепы.ВСоставе)";
	Если Параметры.ТСсЭкипажем Тогда
		Запрос.Текст = Запрос.Текст +"
		|ГДЕ
		|	ВТ_СписокТСрегистраторМЛ.ЕстьЭкипаж";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексКартинки УБЫВ,
	|	ПредставлениеТС";
	
	тблТС = Запрос.Выполнить().Выгрузить();
	тблТС.Колонки.Добавить("ПредставлениеМЛдляOSM", Новый ОписаниеТипов("Строка"));
	тблТС.Колонки.Добавить("ПредставлениеМЛ",       Новый ОписаниеТипов("Строка"));
	Если Параметры.ЗаполнениеТСПриОткрытии Тогда
		КолВоТС = тблТС.Количество();
		Если КолВоТС > 300 Тогда
			Возврат Новый Массив();
		КонецЕсли;
	КонецЕсли;
	
	ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	флИспользоватьКартография      = ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.OSM
				ИЛИ ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
				
	Для Каждого ТекСтрока Из тблТС Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.МаршрутныйЛист) Тогда 
			Если флИспользоватьКартография Тогда 
				
				ТекСтрока.ПредставлениеМЛдляOSM = СформироватьПредставлениеДокументаДляКартыМаршруты(
				"уатМаршрутныйЛист", 
				Строка(ТекСтрока.МаршрутныйЛист.УникальныйИдентификатор()),
				ТекСтрока.МаршрутныйЛистНомер,
				ТекСтрока.МаршрутныйЛистДата
				);
			КонецЕсли;
			ТекСтрока.ПредставлениеМЛ = СтрШаблон(Нстр("ru = '%1 от %2'; en = '%1 from %2'"), ТекСтрока.МаршрутныйЛистНомер,
			ТекСтрока.МаршрутныйЛистДата); 
		КонецЕсли;
	КонецЦикла;

	Если СоответсвиеМаршрутов <> Неопределено Тогда
		СоответсвиеМаршрутов = ПривязанныеМаршрутыТС(тблТС, МассивМаршруты);
	КонецЕсли;

	Возврат тблТС;
	
КонецФункции

// Функция возвращает таблица ТС закрепленных за географическими зонами 
// 
// Параметры:
//  СписокЗон      - список зон по которым необходимо получить ТС
//  СобственныеТС  - признак выборки собственных ТС
//  ПривлеченныеТС - признак выборки привлеченных ТС
//
// Возвращаемое значение:
//  Таблица ТС с их характеристиками
&НаСервере
Функция ПолучитьТаблицуТСЗакрепленыхЗаЗонами(СписокЗон, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат = 0, СоответсвиеМаршрутов = Неопределено) Экспорт
	
	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("СписокЗон",             СписокЗон);
	мЗапрос.УстановитьПараметр("ВыводитьСобственныеТС", ПараметрыЗапросаТС.СобственныеТС);
	мЗапрос.УстановитьПараметр("ВыводитьПривлечТС",     ПараметрыЗапросаТС.ПривлеченныеТС);
	мЗапрос.УстановитьПараметр("ДатаНач",               НачалоДня(ДатаПланирования));
	мЗапрос.УстановитьПараметр("ДатаКон",               КонецДня(ДатаПланирования));
	мЗапрос.УстановитьПараметр("КоэфГрузоподъемности",  ПараметрыЗапросаТС.КоэффициентГрузоподъемности);
	мЗапрос.УстановитьПараметр("КоэфОбъемаКузова",      ПараметрыЗапросаТС.КоэффициентОбъемаКузова);
	мЗапрос.УстановитьПараметр("ЯндексМаршрутизация",   ПараметрыЗапросаТС.НастройкаАлгоритмМаршрутизации = 3);
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗоны_уэТС.ТС КАК ТС,
	|	уатЗоны_уэТС.ТС.Гараж КАК ГаражТС,
	|	уатЗоны_уэТС.ТС.Гараж.Лат КАК ГаражТСЛат,
	|	уатЗоны_уэТС.ТС.Гараж.Лон КАК ГаражТСЛон,
	|	ВЫБОР
	|		КОГДА уатЗоны_уэТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.АвиационныйТранспорт)
	|			ТОГДА 5
	|		КОГДА уатЗоны_уэТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.МорскойТранспорт)
	|			ТОГДА 9
	|		КОГДА уатЗоны_уэТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.ЖДТранспорт)
	|			ТОГДА 8
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗоны_уэТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|					ТОГДА 4
	|				КОГДА уатЗоны_уэТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	|					ТОГДА 6
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	уатЗоны_уэТС.ТС.Организация КАК Организация,
	|	уатЗоны_уэТС.ТС.Модель КАК Модель,
	|	уатЗоны_уэТС.ТС.Модель.Наименование КАК НаименованиеМодели,
	|	ВЫБОР
	|		КОГДА уатЗоны_уэТС.ТС.ОбъемКузова <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатЗоны_уэТС.ТС.ОбъемКузова * &КоэфОбъемаКузова
	|		ИНАЧЕ уатЗоны_уэТС.ТС.Модель.ОбъемКузова * &КоэфОбъемаКузова
	|	КОНЕЦ КАК ОбъемКузова,
	|	ВЫБОР
	|		КОГДА уатЗоны_уэТС.ТС.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатЗоны_уэТС.ТС.МаксимальноеКоличествоУпаковок
	|		ИНАЧЕ уатЗоны_уэТС.ТС.Модель.МаксимальноеКоличествоУпаковок
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА уатЗоны_уэТС.ТС.Грузоподъемность <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА уатЗоны_уэТС.ТС.Грузоподъемность * &КоэфГрузоподъемности
	|		ИНАЧЕ уатЗоны_уэТС.ТС.Модель.Грузоподъемность * &КоэфГрузоподъемности
	|	КОНЕЦ КАК Грузоподъемность,
	|	уатЗоны_уэТС.ТС.Модель.СобственныйВес КАК СобственныйВес,
	|	уатЗоны_уэТС.ТС.Модель.МинимальныйВесГруза * &КоэфГрузоподъемности КАК МинимальныйВесГруза,
	|	уатЗоны_уэТС.ТС.Модель.МинимальныйОбъемГруза * &КоэфОбъемаКузова КАК МинимальныйОбъемГруза,
	|	уатЗоны_уэТС.ТС.Модель.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА уатЗоны_уэТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|			ТОГДА уатЗоны_уэТС.ТС.Организация
	|		ИНАЧЕ уатЗоны_уэТС.ТС.ВладелецТС
	|	КОНЕЦ КАК ВладелецТС,
	|	уатЗоны_уэТС.ТС.Наименование КАК ПредставлениеТС
	|ПОМЕСТИТЬ ВТ_СписокТС
	|ИЗ
	|	Справочник.уатГеозоны_уэ.ТС КАК уатЗоны_уэТС
	|ГДЕ
	|	уатЗоны_уэТС.Ссылка В(&СписокЗон)
	|	И НЕ уатЗоны_уэТС.ТС.ПометкаУдаления
	|	И уатЗоны_уэТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И (&ВыводитьПривлечТС
	|				И уатЗоны_уэТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|			ИЛИ &ВыводитьСобственныеТС
	|				И уатЗоны_уэТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТС.Регистратор КАК Регистратор,
	|	уатСостояниеТС.ТС КАК ТС
	|ПОМЕСТИТЬ ВТ_СрезМаршрутныхЛистов
	|ИЗ
	|	РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	|ГДЕ
	|	уатСостояниеТС.Период <= &ДатаКон
	|	И уатСостояниеТС.ДатаОкончания >= &ДатаНач
	|	И уатСостояниеТС.Регистратор ССЫЛКА Документ.уатМаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокТС.ТС КАК ТС,
	|	ВТ_СписокТС.Модель КАК Модель,
	|	ВТ_СписокТС.ГаражТС КАК ГаражТС,
	|	ВТ_СписокТС.ГаражТСЛат КАК ГаражТСЛат,
	|	ВТ_СписокТС.ГаражТСЛон КАК ГаражТСЛон,
	|	ВТ_СписокТС.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_СписокТС.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ВТ_СписокТС.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_СписокТС.СобственныйВес КАК СобственныйВес,
	|	ВТ_СписокТС.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|	ВТ_СписокТС.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|	ВТ_СписокТС.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ВТ_СписокТС.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_СписокТС.ВладелецТС КАК ВладелецТС,
	|	ЕСТЬNULL(ВТ_СрезМаршрутныхЛистов.Регистратор, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК МаршрутныйЛист,
	|	ВТ_СписокТС.ПредставлениеТС КАК ПредставлениеТС,
	|	ВТ_СписокТС.НаименованиеМодели КАК НаименованиеМодели,
	|	ВТ_СписокТС.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СписокТСрегистраторМЛ
	|ИЗ
	|	ВТ_СписокТС КАК ВТ_СписокТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрезМаршрутныхЛистов КАК ВТ_СрезМаршрутныхЛистов
	|		ПО ВТ_СписокТС.ТС = ВТ_СрезМаршрутныхЛистов.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатСоставТС.ВСоставе КАК ВСоставе,
	|	МИНИМУМ(уатСоставТС.ТС) КАК ТС
	|ПОМЕСТИТЬ Прицеп1
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
	|		ПО ВТ_СписокТСрегистраторМЛ.ТС = уатСоставТС.ВСоставе
	|ГДЕ
	|	НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|				ТОГДА НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСоставТС.ВСоставе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатСоставТС.ВСоставе КАК ВСоставе,
	|	МИНИМУМ(уатСоставТС.ТС) КАК ТС
	|ПОМЕСТИТЬ Прицеп2
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСоставТС КАК уатСоставТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Прицеп1 КАК Прицеп1
	|			ПО уатСоставТС.ТС <> Прицеп1.ТС
	|				И уатСоставТС.ВСоставе = Прицеп1.ВСоставе
	|		ПО ВТ_СписокТСрегистраторМЛ.ТС = уатСоставТС.ВСоставе
	|ГДЕ
	|	НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|				ТОГДА НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСоставТС.ВСоставе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Прицеп1.ВСоставе КАК ВСоставе,
	|	Прицеп1.ТС КАК Прицеп1,
	|	Прицеп2.ТС КАК Прицеп2
	|ПОМЕСТИТЬ втПрицепы
	|ИЗ
	|	Прицеп1 КАК Прицеп1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Прицеп2 КАК Прицеп2
	|		ПО Прицеп1.ВСоставе = Прицеп2.ВСоставе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокТСрегистраторМЛ.ТС КАК ТС,
	|	ВТ_СписокТСрегистраторМЛ.ТС.ПринадлежностьТС КАК ПринадлежностьТС,
	|	ВТ_СписокТСрегистраторМЛ.Модель КАК МодельТС,
	|	ВТ_СписокТСрегистраторМЛ.ГаражТС КАК ГаражТС,
	|	ВТ_СписокТСрегистраторМЛ.ГаражТСЛат КАК ГаражТСЛат,
	|	ВТ_СписокТСрегистраторМЛ.ГаражТСЛон КАК ГаражТСЛон,
	|	ВТ_СписокТСрегистраторМЛ.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_СписокТСрегистраторМЛ.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ВТ_СписокТСрегистраторМЛ.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_СписокТСрегистраторМЛ.СобственныйВес КАК СобственныйВес,
	|	ВТ_СписокТСрегистраторМЛ.МинимальныйВесГруза КАК МинимальныйВесГруза,
	|	ВТ_СписокТСрегистраторМЛ.МинимальныйОбъемГруза КАК МинимальныйОбъемГруза,
	|	ВТ_СписокТСрегистраторМЛ.МинимальноеКоличествоУпаковок КАК МинимальноеКоличествоУпаковок,
	|	ВТ_СписокТСрегистраторМЛ.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_СписокТСрегистраторМЛ.ВладелецТС КАК ВладелецТС,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ВесБрутто КАК МаршрутныйЛистВесБрутто,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Объем КАК МаршрутныйЛистОбъем,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.КоличествоМест КАК МаршрутныйЛистКоличествоМест,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Расстояние КАК МаршрутныйЛистРасстояние,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ВремяВПути КАК МаршрутныйЛистВремяВПути,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Номер КАК МаршрутныйЛистНомер,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Дата КАК МаршрутныйЛистДата,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Прицеп1 КАК МаршрутныйЛистПрицеп1,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Прицеп2 КАК МаршрутныйЛистПрицеп2,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ОбъектСтроительства КАК МаршрутныйЛистОбъектСтроительства,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.Маршрут КАК МаршрутныйЛистМаршрут,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ВидПеревозки КАК МаршрутныйЛистВидПеревозки,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.НаправлениеПеревозки КАК МаршрутныйЛистНаправлениеПеревозки,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ДатаИВремяОтправления КАК МаршрутныйЛистДатаИВремяОтправления,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист.ПересчетВремени КАК МаршрутныйЛистПересчетВремени,
	|	уатМаршрутныйЛист.Заказы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЗаказГрузоотправителя.Номер КАК ЗаказГрузоотправителяНомер,
	|		ЗаказГрузоотправителя.ОтправлениеС КАК ЗаказОтправлениеС,
	|		ЗаказГрузоотправителя.ОтправлениеПо КАК ЗаказОтправлениеПо,
	|		ЗаказГрузоотправителя.ДоставкаС КАК ЗаказДоставкаС,
	|		ЗаказГрузоотправителя.ДоставкаПо КАК ЗаказДоставкаПо,
	|		ЗаказГрузоотправителя.ДетализацияЗакрытия КАК ЗаказДетализацияЗакрытия,
	|		ЗаказГрузоотправителя.Контрагент КАК ЗаказГрузоотправителяКонтрагент,
	|		ЗаказГрузоотправителя.Грузоотправитель КАК ЗаказГрузоотправителяГрузоотправитель,
	|		ЗаказГрузоотправителя.Грузополучатель КАК ЗаказГрузоотправителяГрузополучатель,
	|		ЗаказГрузоотправителя.ЦветДокумента КАК ЗаказГрузоотправителяЦветДокумента,
	|		ЕСТЬNULL(уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя.FTL, ЛОЖЬ) КАК ЗаказГрузоотправителяFTL,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		GUIDСтроки КАК GUIDСтроки,
	|		ВесБрутто КАК ВесБрутто,
	|		Время КАК Время,
	|		Выполнен КАК Выполнен,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу,
	|		ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|		Количество КАК Количество,
	|		КоличествоМест КАК КоличествоМест,
	|		Контрагент КАК Контрагент,
	|		Номенклатура КАК Номенклатура,
	|		Объем КАК Объем,
	|		ПрибытиеПлан КАК ПрибытиеПлан,
	|		ПрибытиеФакт КАК ПрибытиеФакт,
	|		Пункт КАК Пункт,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Заказы.Пункт) = ТИП(СТРОКА)
	|				ТОГДА 0
	|			ИНАЧЕ уатМаршрутныйЛист.Заказы.Пункт.Лат
	|		КОНЕЦ КАК ПунктЛат,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Заказы.Пункт) = ТИП(СТРОКА)
	|				ТОГДА 0
	|			ИНАЧЕ уатМаршрутныйЛист.Заказы.Пункт.Лон
	|		КОНЕЦ КАК ПунктЛон,
	|		Расстояние КАК Расстояние,
	|		Стоянка КАК Стоянка,
	|		СтоянкаИзПункта КАК СтоянкаИзПункта,
	|		ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|		УбытиеПлан КАК УбытиеПлан,
	|		УбытиеФакт КАК УбытиеФакт,
	|		Ожидание КАК Ожидание,
	|		Терминал КАК Терминал,
	|		ВесТары КАК ВесТары,
	|		Группа КАК Группа,
	|		Паллета КАК Паллета,
	|		Размещение КАК Размещение
	|	) КАК Заказы,
	|	уатМаршрутныйЛист.Секции.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		GUIDСтроки КАК GUIDСтроки,
	|		Секция КАК Секция,
	|		Объем КАК Объем
	|	) КАК Секции,
	|	ВТ_СписокТСрегистраторМЛ.ПредставлениеТС КАК ПредставлениеТС,
	|	ВТ_СписокТСрегистраторМЛ.НаименованиеМодели КАК НаименованиеМодели,
	|	ВТ_СписокТСрегистраторМЛ.Организация КАК Организация,
	|	1 КАК КоличествоВиртуальныхТС,
	|	втПрицепы.Прицеп1 КАК Прицеп1,
	|	втПрицепы.Прицеп2 КАК Прицеп2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПрицепы.Прицеп1.Грузоподъемность, 0) <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(втПрицепы.Прицеп1.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|		ИНАЧЕ ЕСТЬNULL(втПрицепы.Прицеп1.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|	КОНЕЦ КАК Прицеп1Грузоподъемность,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПрицепы.Прицеп1.ОбъемКузова, 0) <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(втПрицепы.Прицеп1.ОбъемКузова, 0) * &КоэфОбъемаКузова
	|		ИНАЧЕ ЕСТЬNULL(втПрицепы.Прицеп1.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова
	|	КОНЕЦ КАК Прицеп1ОбъемКузова,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПрицепы.Прицеп1.МаксимальноеКоличествоУпаковок, 0) <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(втПрицепы.Прицеп1.МаксимальноеКоличествоУпаковок, 0)
	|		ИНАЧЕ ЕСТЬNULL(втПрицепы.Прицеп1.Модель.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК Прицеп1МаксимальноеКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПрицепы.Прицеп2.Грузоподъемность, 0) <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(втПрицепы.Прицеп2.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|		ИНАЧЕ ЕСТЬNULL(втПрицепы.Прицеп2.Модель.Грузоподъемность, 0) * &КоэфГрузоподъемности
	|	КОНЕЦ КАК Прицеп2Грузоподъемность,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПрицепы.Прицеп2.ОбъемКузова, 0) <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(втПрицепы.Прицеп2.ОбъемКузова, 0) * &КоэфОбъемаКузова
	|		ИНАЧЕ ЕСТЬNULL(втПрицепы.Прицеп2.Модель.ОбъемКузова, 0) * &КоэфОбъемаКузова
	|	КОНЕЦ КАК Прицеп2ОбъемКузова,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПрицепы.Прицеп2.МаксимальноеКоличествоУпаковок, 0) <> 0
	|				И &ЯндексМаршрутизация
	|			ТОГДА ЕСТЬNULL(втПрицепы.Прицеп2.МаксимальноеКоличествоУпаковок, 0)
	|		ИНАЧЕ ЕСТЬNULL(втПрицепы.Прицеп2.Модель.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК Прицеп2МаксимальноеКоличествоУпаковок,
	|	ВТ_СписокТСрегистраторМЛ.ТС.Характеристики.(
	|		Характеристика КАК ТСХарактеристика
	|	) КАК ХарактеристикиТС
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист = уатМаршрутныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрицепы КАК втПрицепы
	|		ПО ВТ_СписокТСрегистраторМЛ.ТС = втПрицепы.ВСоставе
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексКартинки УБЫВ,
	|	ПредставлениеТС";
	
	тблТС = мЗапрос.Выполнить().Выгрузить();
	тблТС.Колонки.Добавить("ПредставлениеМЛ",       Новый ОписаниеТипов("Строка"));
	тблТС.Колонки.Добавить("ПредставлениеМЛдляOSM", Новый ОписаниеТипов("Строка"));
	
	Если НастройкаВремяАктуальностиКоординат <> 0 Тогда
		тблТСдоп = тблТС.Скопировать();
		тблТСдоп.Свернуть("ТС");
		МассивТС = тблТСдоп.ВыгрузитьКолонку("ТС");
		табКоординат = уатЗащищенныеФункцииСервер_проф.ПолучитьТекущиеКоординатыТС(МассивТС,
			ТекущаяДата() - НастройкаВремяАктуальностиКоординат*60);
		
		Сч = тблТС.Количество()-1;
		Пока Сч >= 0 Цикл
			Если табКоординат.Найти(тблТС[Сч].ТС, "ТС") = Неопределено Тогда
				тблТС.Удалить(Сч);
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
	
	ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	флИспользоватьКартография      = ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.OSM
		ИЛИ ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;

	Для Каждого ТекСтрока Из тблТС Цикл 
			
		Если ЗначениеЗаполнено(ТекСтрока.МаршрутныйЛист) Тогда 
			Если флИспользоватьКартография Тогда 
				
				ТекСтрока.ПредставлениеМЛдляOSM = СформироватьПредставлениеДокументаДляКартыМаршруты(
				"уатМаршрутныйЛист", 
				Строка(ТекСтрока.МаршрутныйЛист.УникальныйИдентификатор()),
				ТекСтрока.МаршрутныйЛистНомер,
				ТекСтрока.МаршрутныйЛистДата
				);
			КонецЕсли;
			ТекСтрока.ПредставлениеМЛ = СтрШаблон(Нстр("ru = '%1 от %2'; en = '%1 from %2'"), ТекСтрока.МаршрутныйЛистНомер,
			ТекСтрока.МаршрутныйЛистДата); 
		КонецЕсли;
	КонецЦикла;

	Если СоответсвиеМаршрутов <> Неопределено Тогда
		СоответсвиеМаршрутов = ПривязанныеМаршрутыТС(тблТС);
	КонецЕсли;
	
	Возврат тблТС;
	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеДокументаДляКартыМаршруты(ПредставлениеОбъекта, УникальныйИдентификатор, НомерДокумента, ДатаДокумента) Экспорт
	
	СтрокаДокумента = "<a href=""#"" onclick=""reporting(\'href\',\'0\',\'Href\',\'<type>Документы</type><object>"
	+ ПредставлениеОбъекта + "</object><guid>" + УникальныйИдентификатор + "</guid>\');"">" + НомерДокумента + " " + НСтр("en='from';ru='от'") + " " 
	+ Формат(ДатаДокумента, "ДФ=dd.MM.yyyy; ДП=01.01.0001") + "</a>";
	
	Возврат СтрокаДокумента;
	
КонецФункции

&НаСервере
Функция ПривязанныеМаршрутыТС(МассивТС, МассивМаршруты = Неопределено) Экспорт
	
	мсвМаршрутыТС = ПривязанныеМаршрутыТССервер(МассивТС, МассивМаршруты);
	
	СоответствиеМаршрутов = Новый Соответствие;
	
	Для Каждого СтруктураТС Из мсвМаршрутыТС Цикл
		
		СтруктураМаршрута = Новый Структура("Ссылка, ТС, Наименование");
		ЗаполнитьЗначенияСвойств(СтруктураМаршрута, СтруктураТС);

		Маршруты = СоответствиеМаршрутов.Получить(СтруктураТС.ТС);
		Если Маршруты <> Неопределено Тогда
			Маршруты.Добавить(СтруктураМаршрута);
			СоответствиеМаршрутов.Вставить(СтруктураТС.ТС, Маршруты);
		Иначе
			Маршруты = Новый Массив();
			Маршруты.Добавить(СтруктураМаршрута);
			СоответствиеМаршрутов.Вставить(СтруктураТС.ТС, Маршруты);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеМаршрутов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗонОтбора(ОтборЗоны) Экспорт
	СписокЗон = Новый Массив;
	Для Каждого ТекЗона ИЗ ОтборЗоны.ПолучитьЭлементы() Цикл
		Если НЕ ТекЗона.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекЗона.ЭтоГруппа Тогда
			СписокЗон.Добавить(ТекЗона.Зона);
		КонецЕсли;
		
		Для Каждого ТекЗона2 ИЗ ТекЗона.ПолучитьЭлементы() Цикл
			Если НЕ ТекЗона2.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СписокЗон.Добавить(ТекЗона2.Зона);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокЗон;
КонецФункции

&НаСервере
Функция ЗаполнитьПрицепы(ВСоставе) Экспорт
	
	Результат = Новый Структура("Прицеп1,Прицеп1Грузоподъемность,Прицеп1ОбъемКузова,Прицеп1МаксимальноеКоличествоУпаковок,
	|Прицеп2,Прицеп2Грузоподъемность,Прицеп2ОбъемКузова,Прицеп2МаксимальноеКоличествоУпаковок");
	
	// Заполнение прицепов.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВСоставе", ВСоставе);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	уатСоставТС.ТС КАК ТС,
	|	уатСоставТС.ТС.Модель.Грузоподъемность КАК Грузоподъемность,
	|	уатСоставТС.ТС.Модель.ОбъемКузова КАК ОбъемКузова,
	|	уатСоставТС.ТС.Модель.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ВСоставе = &ВСоставе
	|	И НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Собственное)
	|				ТОГДА НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						И уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))";
	
	НомерПрицепа = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если НомерПрицепа = 1 Тогда 
			Результат.Прицеп1 = Выборка.ТС;
			Результат.Прицеп1Грузоподъемность               = Выборка.Грузоподъемность;
			Результат.Прицеп1ОбъемКузова                    = Выборка.ОбъемКузова;
			Результат.Прицеп1МаксимальноеКоличествоУпаковок = Выборка.МаксимальноеКоличествоУпаковок;
			
		Иначе 
			Результат.Прицеп2 = Выборка.ТС;
			Результат.Прицеп2Грузоподъемность               = Выборка.Грузоподъемность;
			Результат.Прицеп2ОбъемКузова                    = Выборка.ОбъемКузова;
			Результат.Прицеп2МаксимальноеКоличествоУпаковок = Выборка.МаксимальноеКоличествоУпаковок;
			
		КонецЕсли;
		
		НомерПрицепа = НомерПрицепа + 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьСтрокиРазнарядки(Разнарядка) Экспорт
	
	мсвТС = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Разнарядка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатРазнарядкаРазнарядка.ТС КАК ТС,
	               |	уатРазнарядкаРазнарядка.Прицеп1 КАК Прицеп1,
	               |	уатРазнарядкаРазнарядка.Прицеп2 КАК Прицеп2
	               |ИЗ
	               |	Документ.уатРазнарядка.Разнарядка КАК уатРазнарядкаРазнарядка
	               |ГДЕ
	               |	уатРазнарядкаРазнарядка.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мсвТС.Добавить(Новый Структура("ТС, Прицеп1, Прицеп2", Выборка.ТС, Выборка.Прицеп1, Выборка.Прицеп2));
	КонецЦикла;
	
	Возврат мсвТС;
	
КонецФункции

&НаСервере
Функция ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
	МассивЗаказовСОтборомПоДопХарактеристикам = Неопределено,
	МассивГрузовСОтборомПоДопХарактеристикам = Неопределено,
	Знач ОтборПоСвойствамЗаказа = Неопределено,
	Знач ОтборПоСвойствамГруза = Неопределено,
	МассивЗаказов = Неопределено, ЭтоАРМДиспетчера = Ложь) Экспорт

	ПроцессорВывода = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных,
		АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
		МассивЗаказов,, ЭтоАРМДиспетчера);
		
	мсвЗаказов = Новый Массив();
	Для Каждого ТекЭлемент Из ПроцессорВывода Цикл
		
		Попытка
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.Статус) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;

		ОтборЗаказаПоДопХарактеристикам  = Истина;
		ОтборГрМестаПоДопХарактеристикам = Истина;
		
		Если МассивЗаказовСОтборомПоДопХарактеристикам <> Неопределено
			ИЛИ МассивГрузовСОтборомПоДопХарактеристикам <> Неопределено Тогда
			Если НЕ ЭтоАРМДиспетчера
				И ЗначениеЗаполнено(ТекЭлемент.Груз)
				И ТипЗнч(ТекЭлемент.Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
				ОтборГрМестаПоДопХарактеристикам = ПроверитьОтборГрузовогоМестаПоДопХарактеристикам(ТекЭлемент.Груз, ОтборПоСвойствамГруза);
			Иначе
				ОтборГрМестаПоДопХарактеристикам = Истина;
			КонецЕсли;
			
			Если НЕ ЭтоАРМДиспетчера
				И ОтборГрМестаПоДопХарактеристикам Тогда
				МассивГрузовСОтборомПоДопХарактеристикам.Добавить(ТекЭлемент.Груз);
			КонецЕсли;
			
			ОтборЗаказаПоДопХарактеристикам = ПроверитьОтборЗаказаПоДопХарактеристикам(ТекЭлемент.Ссылка, ОтборПоСвойствамЗаказа);
			Если ОтборЗаказаПоДопХарактеристикам Тогда
				МассивЗаказовСОтборомПоДопХарактеристикам.Добавить(ТекЭлемент.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтборЗаказаПоДопХарактеристикам
			ИЛИ НЕ ОтборГрМестаПоДопХарактеристикам Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтрокиСтруктура = ПолучитьПараметрыСтрокиЗаказов();
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиСтруктура, ТекЭлемент);
		ДанныеСтрокиСтруктура.FTL     = ?(НЕ ЗначениеЗаполнено(ДанныеСтрокиСтруктура.FTL),
			Ложь, ДанныеСтрокиСтруктура.FTL);
		ДанныеСтрокиСтруктура.ЭтоЭтап = ?(НЕ ЗначениеЗаполнено(ДанныеСтрокиСтруктура.ЭтоЭтап), 
			Ложь, ДанныеСтрокиСтруктура.ЭтоЭтап);
		мсвЗаказов.Добавить(ДанныеСтрокиСтруктура);
		
	КонецЦикла;
	
	Возврат мсвЗаказов;
	
КонецФункции

&НаСервере
Функция ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов,
	МассивРаспределенныхЗаказов,
	МассивЗаказов = Неопределено, ПредставлениеЗаказаДляКартыOSM = Ложь, ЭтоАРМДиспетчера = Ложь) Экспорт

	мсвЗаказов = Новый Массив();
	
	СхемаКомпановкиДанных     = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);	
	НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастройкиКомпоновкиДанных);
	
	Если НЕ ЭтоАРМДиспетчера Тогда
		МассивИзнЗаказов  	      = ПолучитьИзВременногоХранилища(АдресМассиваЗаказов);
		
		ПараметрыДанных           = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы;
		ПараметрМассивРаспределенныхЗаказов = ПараметрыДанных.Найти("МассивРаспределенныхЗаказов");
		ПараметрМассивРаспределенныхЗаказов.Значение = МассивРаспределенныхЗаказов;
		
		ПараметрМассивЗаказов = ПараметрыДанных.Найти("МассивЗаказов");
		Если ПараметрМассивЗаказов = Неопределено Тогда
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпановкиДанных)); 
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			
			НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
			ПараметрыДанных           = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы;
			ПараметрМассивРаспределенныхЗаказов = ПараметрыДанных.Найти("МассивРаспределенныхЗаказов");
			Если ПараметрМассивРаспределенныхЗаказов = Неопределено Тогда
				Возврат Новый Массив();
			КонецЕсли;
			ПараметрМассивРаспределенныхЗаказов.Значение = МассивРаспределенныхЗаказов;
			
			ПараметрМассивЗаказов = ПараметрыДанных.Найти("МассивЗаказов");
			Если ПараметрМассивЗаказов = Неопределено Тогда
				Возврат Новый Массив();
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрМассивЗаказов.Использование = Истина;
		ПараметрМассивЗаказов.Значение      = МассивИзнЗаказов;
		
		Если МассивЗаказов <> Неопределено Тогда
			ПараметрМассивЗаказов.Значение = МассивЗаказов;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНастройкиКомпоновки = НастройкиКомпоновкиДанных.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;	
		
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;
	
	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ЗаполнитьПоляКомпоновкиСпискаЗаказов(ВыбранныеПоля, ЭтоАРМДиспетчера);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпановкиДанных,
		НастройкиКомпоновкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Попытка
		Если ПроцессорВывода.Колонки.Найти("FTL") = Неопределено Тогда
			ПроцессорВывода.Колонки.Добавить("FTL", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	мсвЗаказов = ПреобразоватьТаблицуВМассивДляПередачиНаКлиент(ПроцессорВывода);

	Если ПредставлениеЗаказаДляКартыOSM Тогда
		МассивОбъектов = Новый Массив();
		ДополнительныеРеквизиты = Новый Соответствие();
		Индекс = 0; 
		
		ТаблицаДопПарметров = Новый ТаблицаЗначений;
		ТаблицаДопПарметров.Колонки.Добавить("Ссылка",                Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		ТаблицаДопПарметров.Колонки.Добавить("Пункт",                 Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		ТаблицаДопПарметров.Колонки.Добавить("ОтправительПолучатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Склады"));
		ТаблицаДопПарметров.Колонки.Добавить("ТипТочкиМаршрута",      Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	    ТаблицаДопПарметров.Колонки.Добавить("КонтактноеЛицо",        Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица"));
		ТаблицаДопПарметров.Колонки.Добавить("ПрибытиеПлан",          Новый ОписаниеТипов("Дата"));
		ТаблицаДопПарметров.Колонки.Добавить("УбытиеПлан",            Новый ОписаниеТипов("Дата"));
		ТаблицаДопПарметров.Колонки.Добавить("Стоянка",               Новый ОписаниеТипов("Число"));
		ТаблицаДопПарметров.Колонки.Добавить("ОкноС",                 Новый ОписаниеТипов("Дата"));
		ТаблицаДопПарметров.Колонки.Добавить("ОкноПо",                Новый ОписаниеТипов("Дата"));
		
		Для Каждого ТекСтрЗаказ Из мсвЗаказов Цикл 
			СтруктураДополнительныеПараметрыНадписи = Новый Структура("FTL,НомерПункта,АдресОтправления,АдресНазначения,Грузоотправитель,Грузополучатель,КонтактноеЛицоГрузоотправителя,КонтактноеЛицоГрузополучателя,
			|ОтправлениеС,ОтправлениеПо,ДоставкаС,ДоставкаПо,СтоянкаПунктНазначения,СтоянкаПунктОтправления,Ссылка");
			ЗаполнитьЗначенияСвойств(СтруктураДополнительныеПараметрыНадписи, ТекСтрЗаказ); 
			СтруктураДополнительныеПараметрыНадписи.FTL         = Ложь;
			СтруктураДополнительныеПараметрыНадписи.НомерПункта = 0;
			ДанныеПункта = ЗаполнитьДанныеПункта(СтруктураДополнительныеПараметрыНадписи);

			НоваяСтрока = ТаблицаДопПарметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПункта);
			НоваяСтрока.Ссылка = ТекСтрЗаказ.Ссылка;
			
			ДополнительныеРеквизиты.Вставить(ТекСтрЗаказ.Ссылка, СтруктураДополнительныеПараметрыНадписи);
			МассивОбъектов.Добавить(ТекСтрЗаказ.Ссылка);
		КонецЦикла;  
		ДополнительныеПараметрыНадписи = Новый Структура("ДанныеПункта", ТаблицаДопПарметров);
		СоответвиеНадписейОтправления = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблоновИнформацииДляКарты(МассивОбъектов, ДополнительныеПараметрыНадписи);
		
		ТаблицаДопПарметров.Очистить();
		Для Каждого ТекПараметр Из ДополнительныеРеквизиты Цикл
			ТекПараметр.Значение.НомерПункта = 1;
			ДанныеПункта = ЗаполнитьДанныеПункта(ТекПараметр.Значение);

			НоваяСтрока = ТаблицаДопПарметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПункта);
			НоваяСтрока.Ссылка = ТекПараметр.Значение.Ссылка;
		КонецЦикла;  
		ДополнительныеПараметрыНадписи = Новый Структура("ДанныеПункта", ТаблицаДопПарметров);
		СоответвиеНадписейНазначения = уатЭлектронныеКартыСервер.ПолучитьДанныеШаблоновИнформацииДляКарты(МассивОбъектов, ДополнительныеПараметрыНадписи);
		
		Для Каждого ТекСтрЗаказ Из мсвЗаказов Цикл
			ТекСтрЗаказ.Вставить("ПредставлениеЗаказаДляКартыOSM", Новый Массив());
			ТекСтрЗаказ.Вставить("ПредставлениеГиперссылкиРучнойМаршрутизации", "");
			
			МассивНадписей = Новый Массив();
			МассивНадписей.Добавить(СоответвиеНадписейОтправления.Получить(ТекСтрЗаказ.Ссылка));
			МассивНадписей.Добавить(СоответвиеНадписейНазначения.Получить(ТекСтрЗаказ.Ссылка));
			
			ТекСтрЗаказ.ПредставлениеЗаказаДляКартыOSM = МассивНадписей;
			
			Если ТекСтрЗаказ.Свойство("ИдентификаторСтроки") Тогда
				ТекСтрЗаказ.ПредставлениеГиперссылкиРучнойМаршрутизации = 
				СформироватьГиперссылкуДляРучнойМаршрутизации(ТекСтрЗаказ.Номер,
				ТекСтрЗаказ.ИдентификаторСтроки);
			Иначе
				ТекСтрЗаказ.ПредставлениеГиперссылкиРучнойМаршрутизации = 
				СформироватьГиперссылкуДляРучнойМаршрутизации(ТекСтрЗаказ.Номер,
				0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ ЭтоАРМДиспетчера Тогда
		ПараметрМассивЗаказов.Значение = МассивИзнЗаказов;
	КонецЕсли;

	Возврат мсвЗаказов;
	
КонецФункции

&НаСервере
Функция ПреобразоватьТаблицуВМассивДляПередачиНаКлиент(тбл) Экспорт
	мсв = Новый Массив;
	
	Для Каждого ТекСтрока Из тбл Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого ТекКолонка Из тбл.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		мсв.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсв;
КонецФункции

&НаСервере
Функция СформироватьПредставлениеДокументаДляКарты(ПредставлениеОбъекта, Ссылка, НомерДокумента, ДатаДокумента) Экспорт
	
	Идентификатор = Строка(Ссылка.УникальныйИдентификатор());
	
	СтрокаДокумента = "<a href=""#"" onclick=""reporting(\'href\',\'0\',\'Href\',\'<type>Документы</type><object>"
	+ ПредставлениеОбъекта + "</object><guid>" + Идентификатор + "</guid>\');"">" + НомерДокумента + " " + НСтр("en='from';ru='от'") + " " 
	+ Формат(ДатаДокумента, "ДФ=dd.MM.yyyy; ДП=01.01.0001") + "</a>";
	
	Возврат СтрокаДокумента;
	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеОбъектаДляКарты(ПредставлениеОбъекта, Ссылка, Наименование)  Экспорт
	
	Идентификатор = Строка(Ссылка.УникальныйИдентификатор());

	СтрокаДокумента = СтрШаблон("<a href=""#"" onclick=""reporting(\'href\',\'0\',\'Href\',\'<type>Справочники</type><object>%1</object><guid>",
	ПредставлениеОбъекта) + 
	Строка(Идентификатор) + СтрШаблон("</guid>\');"">%1</a>", Наименование);
	
	Возврат СтрокаДокумента;
	
КонецФункции

&НаСервере
Функция ПолучитьЦветДокументаПоКоллекции(Знач ИндексЦвета) Экспорт
	
	Если ИндексЦвета = 1 Тогда 
		// Синий.
		Возврат Новый Цвет(30, 152, 255);
		
	ИначеЕсли ИндексЦвета = 2 Тогда 
		// Красный.
		Возврат Новый Цвет(237, 69, 67);
		
	ИначеЕсли ИндексЦвета = 3 Тогда 
		// Темно-оранжевый.
		Возврат Новый Цвет(230, 118, 27);
		
	ИначеЕсли ИндексЦвета = 4 Тогда 
		// Ночной.
		Возврат Новый Цвет(14, 71, 121);
		
	ИначеЕсли ИндексЦвета = 5 Тогда 
		// Темно-синий.
		Возврат Новый Цвет(23, 123, 201);
		
	ИначеЕсли ИндексЦвета = 6 Тогда 
		// Розовый.
		Возврат Новый Цвет(243, 113, 209);
		
	ИначеЕсли ИндексЦвета = 7 Тогда 
		// Серый.
		Возврат Новый Цвет(179, 179, 179);
		
	ИначеЕсли ИндексЦвета = 8 Тогда 
		// Коричневый.
		Возврат Новый Цвет(121, 61, 14);
		
	ИначеЕсли ИндексЦвета = 9 Тогда 
		// Темно-зеленый.
		Возврат Новый Цвет(27, 173, 3);
		
	ИначеЕсли ИндексЦвета = 10 Тогда 
		// Фиолетовый.
		Возврат Новый Цвет(181, 30, 255);
		
	ИначеЕсли ИндексЦвета = 11 Тогда 
		// Черный.
		Возврат Новый Цвет(89, 89, 89);
		
	ИначеЕсли ИндексЦвета = 12 Тогда 
		// Желтый.
		Возврат Новый Цвет(255, 210, 30);
		
	ИначеЕсли ИндексЦвета = 13 Тогда 
		// Зеленый.
		Возврат Новый Цвет(86, 219, 64);
		
	ИначеЕсли ИндексЦвета = 14 Тогда 
		// Оранжевый.
		Возврат Новый Цвет(255, 147, 30);
		
	ИначеЕсли ИндексЦвета = 15 Тогда 
		// Светло-синий.
		Возврат Новый Цвет(130, 205, 255);
		
	ИначеЕсли ИндексЦвета = 16 Тогда 
		// Оливковый.
		Возврат Новый Цвет(151, 161, 0);
		
	Иначе 
		Возврат Новый Цвет();
	КонецЕсли;
	
КонецФункции // ПолучитьЦветДокументаПоКоллекции()

Функция ПолучитьПараметрыСтрокиЗаказов(ЭтоАРМДиспетчера = Ложь) Экспорт
	
	ПараметрыСтрокиЗаказов = "Ссылка, ЦветДокумента,
		|Номер, Дата, НомерПоУчетуЗаказчика, Контрагент,
		|АдресНазначения,
		|ВесБрутто, Объем, КоличествоМест,
		|АдресОтправления, Маршрут, НаправлениеПеревозки,
		|Грузоотправитель, Грузополучатель, ОтправлениеС,
		|ОтправлениеПо, ДоставкаС, ДоставкаПо,
		|FTL, АдресОтправленияПредставление,
		|АдресНазначенияПредставление, ЛатНазначения, ЛонНазначения, ЛатОтправления, ЛонОтправления,
		|АдресОтправленияУказанНаКарте, АдресНазначенияУказанНаКарте, ДетализацияЗакрытия,
		|ВидПеревозки, ОбъектСтроительства, ЭтоЭтап, КонтрагентПредставление";
	
	Если НЕ ЭтоАРМДиспетчера Тогда
		ПараметрыСтрокиЗаказов = ПараметрыСтрокиЗаказов + ", ИдентификаторСтроки, НомерСтроки,
		|Груз, Количество, ЕдиницаИзмерения";
	КонецЕсли;

	ДанныеСтрокиСтруктура = Новый Структура(ПараметрыСтрокиЗаказов);
	
	Возврат ДанныеСтрокиСтруктура;
	
Конецфункции

Функция СформироватьГиперссылкуДляРучнойМаршрутизации(НомерДокумента, ИдентификаторСтроки) Экспорт
	
	Идентификатор = НомерДокумента + ?(ИдентификаторСтроки = 0, "",
			"_" + ИдентификаторСтроки);

	ТекстНСТР = НСтр("en='Add to routing list';ru='Добавить в маршрутный лист'");
	СтрокаСсылки = "<a href=""#"" onclick=""reporting(\'ManualRouting\',\'0\',\'ManualRouting\',\'<guid></guid>\');"">"
	+ ТекстНСТР + "</a>";
	
	Возврат СтрокаСсылки;
	
КонецФункции

&НаСервере
Процедура ПолучитьСвязанныеПЛ(МЛСсылка, МассивПЛ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МЛ", МЛСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Представление КАК Представление
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.ДокументОснование = &МЛ
	|	И НЕ уатПутевойЛист.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивПЛ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТСвПЛсервер(МассивПЛ) Экспорт
	
	Для Каждого ТекСсылка Из МассивПЛ Цикл
		НовДокПЛ = ТекСсылка.ПолучитьОбъект();
		НовДокПЛ.Заполнить(ТекСсылка.ДокументОснование);
		НовДокПЛ.ВидСообщения          = НовДокПЛ.ТранспортноеСредство.ОсновнойВидСообщения;
		НовДокПЛ.ВидПеревозки          = НовДокПЛ.ТранспортноеСредство.ОсновнойВидПеревозки;

		ЕстьОшибкиЗаполнения = НЕ НовДокПЛ.ПроверитьЗаполнение();
		
		ТекстОшибкиЗаполнения = "";
		Если ЕстьОшибкиЗаполнения Тогда 
			МассивОшибок = ПолучитьСообщенияПользователю(Истина);
			Для Каждого ТекОшибка Из МассивОшибок Цикл 
				ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьОшибкиЗаполнения Тогда 
			РежимЗаписиПЛ = РежимЗаписиДокумента.Запись;
		Иначе 
			РежимЗаписиПЛ = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		Попытка 
			НовДокПЛ.Записать(РежимЗаписиПЛ);
		Исключение
			ТекстОшибкиЗаписи = ОписаниеОшибки();
			Попытка
				НовДокПЛ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовкиИПодсказкиКолонокТаблиц(Объект)
	
	Элементы = Объект.Элементы;
	
	ЭтоАРМЛогиста = Объект.Заголовок = Нстр("ru = 'АРМ Логиста'");
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		ЗаголовокКолонки = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		ПодсказкаКолонки = ЗаголовокКолонки + 
			Символы.ПС + Нстр("ru = '* - Максимальная грузоподъёмность умножается на количество маршрутных листов'");
			
		Элементы.ЗаказыСписокВесБрутто.Заголовок   = ЗаголовокКолонки;
		Элементы.ЗаказыСписокВесБрутто.Подсказка   = ЗаголовокКолонки;
		Элементы.МаршрутыСписокВесБрутто.Заголовок = ЗаголовокКолонки;
		Элементы.МаршрутыСписокВесБрутто.Подсказка = ЗаголовокКолонки;
		Если ЭтоАРМЛогиста Тогда
			Элементы.МаршрутыСписокЗаказовДеревоВесБрутто.Заголовок = ЗаголовокКолонки;
			Элементы.МаршрутыСписокЗаказовДеревоВесБрутто.Подсказка = ЗаголовокКолонки;
			Элементы.МаршрутыВесБрутто.Заголовок = ЗаголовокКолонки;
			Элементы.МаршрутыВесБрутто.Подсказка = ПодсказкаКолонки;
		Иначе
			Элементы.МаршрутыСписокЗаказовВесБрутто.Заголовок   = ЗаголовокКолонки;
			Элементы.МаршрутыСписокЗаказовВесБрутто.Подсказка   = ЗаголовокКолонки;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		ЗаголовокКолонки = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
		ПодсказкаКолонки = ЗаголовокКолонки + 
			Символы.ПС + Нстр("ru = '* - Максимальный объем кузова умножается на количество маршрутных листов'");
			
		Элементы.ЗаказыСписокОбъем.Заголовок   = ЗаголовокКолонки;
		Элементы.ЗаказыСписокОбъем.Подсказка   = ЗаголовокКолонки;
		Элементы.МаршрутыСписокОбъем.Заголовок = ЗаголовокКолонки;
		Элементы.МаршрутыСписокОбъем.Подсказка = ЗаголовокКолонки;
		Если ЭтоАРМЛогиста Тогда
			Элементы.МаршрутыСписокЗаказовДеревоОбъем.Заголовок = ЗаголовокКолонки;
			Элементы.МаршрутыСписокЗаказовДеревоОбъем.Подсказка = ЗаголовокКолонки;
			Элементы.МаршрутыОбъем.Заголовок = ЗаголовокКолонки;
			Элементы.МаршрутыОбъем.Подсказка = ПодсказкаКолонки;
		Иначе
			Элементы.МаршрутыСписокЗаказовОбъем.Заголовок   = ЗаголовокКолонки;
			Элементы.МаршрутыСписокЗаказовОбъем.Подсказка   = ЗаголовокКолонки;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеКоличествоМест = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Если ЗначениеЗаполнено(ПредставлениеКоличествоМест) Тогда
		ПодсказкаКолонки = ПредставлениеКоличествоМест + 
			Символы.ПС + Нстр("ru = '* - Максимальное количество мест умножается на количество маршрутных листов'");
		Элементы.ЗаказыСписокКоличествоМест.Заголовок   = ПредставлениеКоличествоМест;
		Элементы.ЗаказыСписокКоличествоМест.Подсказка   = ПредставлениеКоличествоМест;
		Элементы.МаршрутыСписокКолМест.Заголовок = ПредставлениеКоличествоМест;
		Элементы.МаршрутыСписокКолМест.Подсказка = ПредставлениеКоличествоМест;
		Если ЭтоАРМЛогиста Тогда
			Элементы.МаршрутыСписокЗаказовДеревоКолМест.Заголовок = ПредставлениеКоличествоМест;
			Элементы.МаршрутыСписокЗаказовДеревоКолМест.Подсказка = ПредставлениеКоличествоМест;
			Элементы.МаршрутыКолМест.Заголовок = ПредставлениеКоличествоМест;
			Элементы.МаршрутыКолМест.Подсказка = ПодсказкаКолонки;
		Иначе
			Элементы.МаршрутыСписокЗаказовКоличествоМест.Заголовок   = ПредставлениеКоличествоМест;
			Элементы.МаршрутыСписокЗаказовКоличествоМест.Подсказка   = ПредставлениеКоличествоМест;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияОтборовПоДопСвойствам(Объект)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	               |	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	               |	ДополнительныеРеквизитыИСведения.Заголовок КАК Заголовок,
	               |	ДополнительныеРеквизитыИСведения.НаборСвойств КАК НаборСвойств
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.НаборСвойств В(&НаборСвойств)
	               |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
	
	НаборСвойств = Новый Массив();
	НаборСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_уатГрузовыеМеста_уэ);
	НаборСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_уатЗаказГрузоотправителя);
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	ВыборкаДопРеквизиты = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДопРеквизиты.Следующий() Цикл
		
		Если ВыборкаДопРеквизиты.НаборСвойств = НаборСвойств[0] Тогда
			НоваяСтрока = Объект.ОтборПоСвойствамГруза.Добавить();
		Иначе
			НоваяСтрока = Объект.ОтборПоСвойствамЗаказа.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Свойство = ВыборкаДопРеквизиты.Ссылка;
		НоваяСтрока.СвойствоПредставление = ВыборкаДопРеквизиты.Заголовок;
		знчПоУмолчанию = ВыборкаДопРеквизиты.ТипЗначения.ПривестиЗначение(Неопределено);
		Если знчПоУмолчанию <> Неопределено Тогда 
			НоваяСтрока.Значение = знчПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПривязанныеМаршрутыТССервер(МассивТС, Маршруты = Неопределено)
	
	СписокТС = Новый СписокЗначений;
	Для Каждого СтруктураТС Из МассивТС Цикл
		СписокТС.Добавить(СтруктураТС.ТС);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатМаршруты.Ссылка КАК Ссылка,
	|	уатМаршрутыТранспортныеСредства.ТС КАК ТС,
	|	уатМаршруты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.уатМаршруты.ТранспортныеСредства КАК уатМаршрутыТранспортныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
	|		ПО уатМаршрутыТранспортныеСредства.Ссылка = уатМаршруты.Ссылка
	|ГДЕ
	|	уатМаршруты.ТранспортныеСредства.ТС В(&ТС)
	|	И уатМаршруты.ИспользоватьДляПланированияВАРМЛогиста = ИСТИНА
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ";
	Если ЗначениеЗаполнено(Маршруты) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатМаршруты.Ссылка В (&Маршруты)";
		Запрос.УстановитьПараметр("Маршруты", Маршруты);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТС", СписокТС);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКомпоновкиСпискаЗаказов(ВыбранныеПоля, ЭтоАРМДиспетчера)
	
	ДанныеСтрокиСтруктура = ПолучитьПараметрыСтрокиЗаказов(ЭтоАРМДиспетчера);
	Для Каждого ТекСтрока Из ДанныеСтрокиСтруктура Цикл
		ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Заголовок     = ТекСтрока.Ключ;
		ПолеКомпоновки.Использование = Истина;
		ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных(ТекСтрока.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОтборЗаказаПоДопХарактеристикам(Заказ, ОтборПоСвойствамЗаказа)
	Для Каждого ТекСвойство Из ОтборПоСвойствамЗаказа Цикл
		Если НЕ ТекСвойство.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		мсвДопСв = Заказ.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекСвойство.Свойство)); //Для дополнительных реквизитов
		знчДопСв = РегистрыСведений.ДополнительныеСведения.Получить(Новый Структура("Объект, Свойство", Заказ, ТекСвойство.Свойство)).Значение; //Для дополнительных сведений
		
		Если мсвДопСв.Количество() = 0
			И знчДопСв = Неопределено Тогда  // Свойства нет, значит оно установлено по умолчанию
			мсвТипов = Новый Массив;
			мсвТипов.Добавить(ТипЗнч(ТекСвойство.Значение));
			ОписТипов = Новый ОписаниеТипов(мсвТипов);
			ЗначениеСвПоУмолчанию = ОписТипов.ПривестиЗначение(Неопределено);
			Если ТекСвойство.Значение <> ЗначениеСвПоУмолчанию Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			
			Если мсвДопСв.Количество() И мсвДопСв[0].Значение <> ТекСвойство.Значение Тогда
				Возврат Ложь;		
			КонецЕсли;	
			Если знчДопСв <> Неопределено И знчДопСв <> ТекСвойство.Значение Тогда
				Возврат Ложь;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьОтборГрузовогоМестаПоДопХарактеристикам(ГрузовоеМесто, ОтборПоСвойствамГруза)
	Если ОтборПоСвойствамГруза.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ГрузовоеМесто) <> Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСвойство Из ОтборПоСвойствамГруза Цикл
		Если НЕ ТекСвойство.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		мсвДопСв = ГрузовоеМесто.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекСвойство.Свойство));  //Для дополнительных реквизитов
		знчДопСв = РегистрыСведений.ДополнительныеСведения.Получить(Новый Структура("Объект, Свойство", ГрузовоеМесто, ТекСвойство.Свойство)).Значение; //Для дополнительных сведений
		
		Если мсвДопСв.Количество() = 0 И знчДопСв = Неопределено Тогда //свойства нет, значит оно установлено по умолчанию
			мсвТипов = Новый Массив;
			мсвТипов.Добавить(ТипЗнч(ТекСвойство.Значение));
			ОписТипов = Новый ОписаниеТипов(мсвТипов);
			ЗначениеСвПоУмолчанию = ОписТипов.ПривестиЗначение(Неопределено);
			Если ТекСвойство.Значение <> ЗначениеСвПоУмолчанию Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			
			Если мсвДопСв.Количество() И мсвДопСв[0].Значение <> ТекСвойство.Значение Тогда
				Возврат Ложь;		
			КонецЕсли;	
			Если знчДопСв <> Неопределено И знчДопСв <> ТекСвойство.Значение Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеПункта(СтруктураДополнительныеПараметрыНадписи)
	ДанныеПункта = Новый Структура();
	Если СтруктураДополнительныеПараметрыНадписи.Свойство("НомерПункта") Тогда
		Если СтруктураДополнительныеПараметрыНадписи.FTL Тогда
			СтрокаПункта = СтруктураДополнительныеПараметрыНадписи.Ссылка.ПромежуточныеПункты[СтруктураДополнительныеПараметрыНадписи.НомерПункта];
			ДанныеПункта.Вставить("Пункт", СтрокаПункта.Пункт); 
			ДанныеПункта.Вставить("ОтправительПолучатель", СтрокаПункта.ОтправительПолучатель);
			ДанныеПункта.Вставить("ТипТочкиМаршрута", СтрокаПункта.ТипТочкиМаршрута);
			ДанныеПункта.Вставить("КонтактноеЛицо", СтрокаПункта.КонтактноеЛицо);
			ДанныеПункта.Вставить("ПрибытиеПлан", СтрокаПункта.ПрибытиеПлан);
			ДанныеПункта.Вставить("УбытиеПлан", СтрокаПункта.УбытиеПлан);
			ДанныеПункта.Вставить("Стоянка", СтрокаПункта.Стоянка);
			ДанныеПункта.Вставить("ОкноС", СтрокаПункта.ОкноС);
			ДанныеПункта.Вставить("ОкноПо", СтрокаПункта.ОкноПо);
		Иначе  
			Если СтруктураДополнительныеПараметрыНадписи.НомерПункта = 0 Тогда 
				ДанныеПункта.Вставить("Пункт", СтруктураДополнительныеПараметрыНадписи.АдресОтправления);
				ДанныеПункта.Вставить("ОтправительПолучатель", СтруктураДополнительныеПараметрыНадписи.Грузоотправитель);
				ДанныеПункта.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
				ДанныеПункта.Вставить("КонтактноеЛицо", СтруктураДополнительныеПараметрыНадписи.КонтактноеЛицоГрузоотправителя);
				ДанныеПункта.Вставить("ПрибытиеПлан", СтруктураДополнительныеПараметрыНадписи.ОтправлениеС);
				ДанныеПункта.Вставить("УбытиеПлан", СтруктураДополнительныеПараметрыНадписи.ОтправлениеПо);
				ДанныеПункта.Вставить("Стоянка", СтруктураДополнительныеПараметрыНадписи.СтоянкаПунктОтправления);  
				ДанныеПункта.Вставить("ОкноС", СтруктураДополнительныеПараметрыНадписи.ОтправлениеС);
				ДанныеПункта.Вставить("ОкноПо", СтруктураДополнительныеПараметрыНадписи.ОтправлениеПо);
			Иначе
				ДанныеПункта.Вставить("Пункт", СтруктураДополнительныеПараметрыНадписи.АдресНазначения);
				ДанныеПункта.Вставить("ОтправительПолучатель", СтруктураДополнительныеПараметрыНадписи.Грузополучатель); 
				ДанныеПункта.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Разгрузка);
				ДанныеПункта.Вставить("КонтактноеЛицо", СтруктураДополнительныеПараметрыНадписи.КонтактноеЛицоГрузополучателя);  
				ДанныеПункта.Вставить("ПрибытиеПлан", СтруктураДополнительныеПараметрыНадписи.ДоставкаС);
				ДанныеПункта.Вставить("УбытиеПлан", СтруктураДополнительныеПараметрыНадписи.ДоставкаПо); 
				ДанныеПункта.Вставить("Стоянка", СтруктураДополнительныеПараметрыНадписи.СтоянкаПунктНазначения);
				ДанныеПункта.Вставить("ОкноС", СтруктураДополнительныеПараметрыНадписи.ДоставкаС);
				ДанныеПункта.Вставить("ОкноПо", СтруктураДополнительныеПараметрыНадписи.ДоставкаПо);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого ТекСтрока Из СтруктураДополнительныеПараметрыНадписи Цикл
			ДанныеПункта.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат ДанныеПункта;
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации 1С:Центр спутникового мониторинга ГЛОНАСС/GPS.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает номер версии библиотеки.
// 
// Возвращаемое значение:
//  Строка - Версия библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.5.12";
	
КонецФункции

#Область СведенияОБиблиотекеИлиКонфигурации

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЦентрСпутниковогоМониторинга";
	Описание.Версия = ВерсияБиблиотеки();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ВыполнятьВсегдаПриСменеВерсии";
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПервыйЗапуск";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьГеографическиеКарты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.7.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьДатчикиТоплива";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.13";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновлениеНастроекОтображенияОбъектовИПереименованиеОбъектов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.105";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьКИОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.15";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПеревестиГеографическиеСервисыНаВерсию_2_0";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.21";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьКИВодителей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.42";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОтключитьЗащитуОтОпасныхДействийУВсехПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.149";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.НастроитьПредопределенныеВариантыДинамическогоОформления";
	
	// Обработчики, выполняемые при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьКрайниеДанныеТерминалов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.4.2";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьПараметрыСглаживанияКалибровочныхГрафиков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.32";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновлениеТиповДанныхЦСМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.52";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьАдресCSMSVC";
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.69";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ДобавитьПолноправнымПользователямРольАдминистратора";	
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.86";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПараметрыВыработкиЗаполнитьПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.97";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновлениеТиповДанныхЦСМ";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.115";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.СменитьТипИконокОбъектовСоСтрокиНаСправочник";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.117";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьИспользованиеДинамическихГруппировки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.131";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьТерминалВРегистреСвойстваМаршрутныхЗаданий";	
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("83d5c5dd-1462-4d72-ab98-f8f5dcc0664d");	
	Обработчик.Комментарий = НСтр("ru = 'Обновление поля ""Терминал"" в регистре сведений ItobСвойстваМаршрутныхЗаданий.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.26";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПеренестиНастройкиРепликацииВСправочник";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.26";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьСерверСбораДанныхУСуществующихТерминалов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.26";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьСерверСбораДанныхУМобильныхКлиентов";
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.13";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ПереопределитьПривязкиТерминалов";
		
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.0.2.42";
		Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УдалитьЛишниеРЗМобильногоКлиента";		
	КонецЕсли; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.53";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОчиститьДвиженияПланФакта";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.56";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьДвиженияВСвойствахМаршрутныхЗаданий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.57";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.СброситьНастройкиОтображенияПунктовНазначения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.97";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьСерверСбораДанныхУМобильныхКлиентов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.99";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьДополнительныеРеквизитыItobАЗС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.103";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьИспользованиеРазделенияЗаявокМобильногоКлиента";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.165";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьЗначенияНовыхКонстантПланФакта";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.48";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьЗначениеКонстанты_ВидыСвязейПосещенийТочекМаршрутаИГаражей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.49";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.УстановитьЗначениеКонстанты_ItobРадиусЗоныПриходаНаТочку";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.50";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьИконкиПунктовНазначения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.50";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ОбновитьСвойстваПунктовНазначения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.57";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазыЦСМ.ЗаполнитьШаблоныВидовТочекПоУмолчанию";

	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны
	ГеографическиеЗоныПриДобавленииОбработчиковОбновления(Обработчики);
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.События
	СобытияПриДобавленииОбработчиковОбновления(Обработчики);
	
	#Область ГеографическиеСервисы
	
	// Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеСервисы.
	
	// Если ЦСМ встроена в другую конфигурацию, то геосервисы должны обновляться при изменении версии основной конфигурации.
	Если ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда	
		ItobГеографическиеСервисыОбновлениеИнформационнойБазы.ПриДобавленииОбработчиковОбновления(Обработчики);	
	КонецЕсли;
	
	// Конец Подсистема ItobЦентрСпутниковогоМониторинга.ГеографическиеСервисы.
	
	#КонецОбласти 
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
			
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
		
КонецПроцедуры

#КонецОбласти
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	ПервичноеЗаполнение = Истина;
	
	НачатьТранзакцию();
	
	ОбновлениеТиповДанныхЦСМ();
	
	Константы.ItobАдресСервисаCsmSvc.Установить("localhost:8091");
	
	Константы.ItobМинимальнаяСкоростьДвижения.Установить(10);
	Константы.ItobМинимальноеВремяСтоянки.Установить('00010101001000');
	Константы.ItobОсновноеПредставлениеОбъектов.Установить(Перечисления.ItobПредставлениеТС.Наименование);
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		// Администратор для обычной работы с программой.
		ПервыйАдминистратор = Пользователи.СоздатьАдминистратора();
		
		// Пользователь ReplicationBot для репликации.
		Если ПользователиИнформационнойБазы.НайтиПоИмени("ReplicationBot") = Неопределено Тогда		
			ИмяПользователя = "ReplicationBot";
			РолиПользователя = Новый Массив;
			РолиПользователя.Добавить("АдминистраторСистемы");
			РолиПользователя.Добавить("ПолныеПрава");
			СвойстваПользователя = Пользователи.НовоеОписаниеПользователяИБ();
			СвойстваПользователя.Имя = ИмяПользователя;
			СвойстваПользователя.ПолноеИмя = "Replication Bot User";
			СвойстваПользователя.АутентификацияСтандартная = Истина;
			СвойстваПользователя.ЗапрещеноИзменятьПароль = Истина;
			СвойстваПользователя.Пароль = "ole123";
			СвойстваПользователя.Роли = РолиПользователя;
			Пользователи.УстановитьСвойстваПользователяИБ(ИмяПользователя, СвойстваПользователя, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	// Модели терминалов
	// Терминал - Teltonika FM
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Teltonika FM";
	НовМодельТерминалов.Записать();
	
	// Датчики
	ТаблицаДатчиков = 
		НСтр("ru = '1	Цифровой вход 1	Дискретный
		|2	Цифровой вход 2	Дискретный
		|3	Цифровой вход 3	Дискретный
		|4	Цифровой вход 4	Дискретный
		|9	Аналоговый вход 1	Аналоговый
		|10	Аналоговый вход 2	Аналоговый
		|11	Аналоговый вход 3	Аналоговый
		|19	Аналоговый вход 4	Аналоговый
		|21	GSM сигнал	Дискретный
		|22	Текущий профиль	Дискретный
		|66	Напряжение питания	Аналоговый
		|67	Напряжение резервного аккумулятора	Аналоговый
		|68	Сила тока резервного аккумулятора	Аналоговый
		|69	Состояние GPS	Дискретный
		|70	Температура блока	Аналоговый
		|72	Датчик температуры	Аналоговый
		|76	Счетчик топлива	Аналоговый
		|78	Вход iButton	Аналоговый
		|145	CAN 01	Аналоговый
		|146	CAN 02	Аналоговый
		|147	CAN 03	Аналоговый
		|148	CAN 04	Аналоговый
		|149	CAN 05	Аналоговый
		|150	CAN 06	Аналоговый
		|151	CAN 07	Аналоговый
		|152	CAN 08	Аналоговый
		|153	CAN 09	Аналоговый
		|154	CAN 10	Аналоговый'");
	
	Для Счетчик = 1 По СтрЧислоСтрок(ТаблицаДатчиков) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТаблицаДатчиков, Счетчик);
		ТекСтрока = СтрЗаменить(ТекСтрока, "	", Символы.ПС);
		
		НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();
		НовДатчик.Владелец = НовМодельТерминалов.Ссылка;
		НовДатчик.Код = СтрПолучитьСтроку(ТекСтрока,1);
		НовДатчик.Наименование = СтрПолучитьСтроку(ТекСтрока,2);
		Если СтрПолучитьСтроку(ТекСтрока,3) = "Дискретный" Тогда
			НовДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Дискретный;
		Иначе
			НовДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Аналоговый;
		КонецЕсли;
		НовДатчик.Записать();
		
	КонецЦикла;		
	
	// Терминал - Naviset GT30
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Naviset GT30/GT100";
	НовМодельТерминалов.Записать();
	
	ТаблицаДатчиков = 
		НСтр("ru = '1	Кнопка SOS	Дискретный
		|2	Кнопка B	Дискретный
		|3	Кнопка C	Дискретный
		|16	Низкий заряд батареи	Дискретный
		|17	Превышение скорости	Дискретный
		|18	Выход из географической зоны	Дискретный
		|20	Перезагрузка или включение питания	Дискретный
		|21	Отсутствует GPS сигнал	Дискретный
		|22	Возобновление GPS сигнала	Дискретный'");
	
	Для Счетчик = 1 По СтрЧислоСтрок(ТаблицаДатчиков) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТаблицаДатчиков, Счетчик);
		ТекСтрока = СтрЗаменить(ТекСтрока, "	", Символы.ПС);
		
		КодДатчика = Число(СтрПолучитьСтроку(ТекСтрока,1));
		НаименованиеДатчика = СтрПолучитьСтроку(ТекСтрока,2);
		ТипДатчика = Перечисления.ItobТипыДатчиков[?(СтрПолучитьСтроку(ТекСтрока,3) = "Дискретный", "Дискретный", "Аналоговый")];
		
		НайденныйДатчик = Справочники.ItobДатчики.НайтиПоКоду(КодДатчика,,,НовМодельТерминалов.Ссылка);
		Если НЕ НайденныйДатчик.Пустая() Тогда
			НовДатчик = НайденныйДатчик.ПолучитьОбъект();
			
		Иначе
			НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();	
			
		КонецЕсли;			
		
		НовДатчик.Владелец = НовМодельТерминалов.Ссылка;
		НовДатчик.Код = КодДатчика;
		НовДатчик.Наименование = НаименованиеДатчика;
		НовДатчик.ТипДатчика = ТипДатчика;
		НовДатчик.Записать();
		
	КонецЦикла;
	
	// Терминал - Portman GT2000
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Portman GT2000";
	НовМодельТерминалов.Записать();	
	
	// Назначения датчиков
	НазначениеДатчиковОбъект = Справочники.ItobНазначенияДатчиков.Зажигание.ПолучитьОбъект();
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 0;
	НовСтрока.Расшифровка = НСтр("ru = 'Зажигание выключено'");
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 1;
	НовСтрока.Расшифровка = НСтр("ru = 'Зажигание включено'");
	НазначениеДатчиковОбъект.Записать();
	
	НазначениеДатчиковОбъект = Справочники.ItobНазначенияДатчиков.ТревожнаяКнопка.ПолучитьОбъект();
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 0;
	НовСтрока.Расшифровка = НСтр("ru = 'Кнопка выключена'");
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 1;
	НовСтрока.Расшифровка = НСтр("ru = 'Кнопка включена'");
	НазначениеДатчиковОбъект.Записать();
	
	// Заполнение предопределенных элементов справочника "ItobПараметрыВыработки".
	ПараметрыВыработкиЗаполнитьПредопределенные(ПервичноеЗаполнение);
		
	ЗаполнитьПредопределенныеИконкиОбъектов();
	
	// Обновляем использование динамических группировок.
	ОбновитьИспользованиеДинамическихГруппировки();
	
	// Заполнение свойств предопределенного сервера сбора данных по умолчанию.
	ЗаполнитьСерверСбораДанныхПоУмолчанию();
	
	// Использование репликации.
	НастроитьИспользованиеРепликации();
	
	ПроставитьКорректныеНастройкиПланФакта();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.МобильныйКлиент") Тогда
		МодульМобильныйКлиент = ОбщегоНазначения.ОбщийМодуль("мкМобильныйКлиент");
		МодульМобильныйКлиент.ПервичнаяНастройкаПодсистемыМобильногоКлиента();	
	КонецЕсли;
	
	УстановитьЗначениеКонстанты_ItobРадиусЗоныПриходаНаТочку();
	
	// Заполнение шаблонов справочника "Виды точек маршрута" по умолчанию
	ЗаполнитьШаблоныВидовТочекПоУмолчанию();
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'","ru"), УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Ошибка обновления информационной базы:'")+" "+ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Процедура выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных.
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных.
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных.
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГеографическиеКарты() Экспорт // "1.1.3.2"
	
	// Очистка справочника
	Выборка = Справочники.ItobГеографическиеКарты.Выбрать();
	Если Выборка.Следующий() Тогда
		// Справочник не пустой - обновление не проводится
		Возврат;	
	КонецЕсли;
	
	// Заполним справочник "Географические карты"
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00001");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00001";
		НовыйОбъект.Наименование = "OSM (Mapnik)";
		НовыйОбъект.Сортировка = 10;
		НовыйОбъект.Идентификатор = "osm_mapnik";
		НовыйОбъект.Сервер = "http://tile.openstreetmap.org/";
		НовыйОбъект.Правообладатель = "OpenStreetMap";
		НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   var subs = [ 'a', 'b', 'c' ];   
		|   return ""http://"" + subs[(x+y)%3] + "".tile.openstreetmap.org/"" + z + ""/"" + x + ""/"" + y + "".png"";
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00002");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00002";
		НовыйОбъект.Наименование = "OSM (Mapquest)";
		НовыйОбъект.Сортировка = 20;
		НовыйОбъект.Идентификатор = "osm_mapquest";
		НовыйОбъект.Сервер = "http://otile.mqcdn.com/tiles";
		НовыйОбъект.Правообладатель = "OpenStreetMap";
		НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   var subs = [ '1', '2', '3', '4' ];   
		|   return ""http://otile"" + subs[(x+y)%4] + "".mqcdn.com/tiles/1.0.0/osm/"" + z + ""/"" + x + ""/"" + y + "".png"";
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00003");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00003";
		НовыйОбъект.Наименование = "OSM (OPNV-Karte)";
		НовыйОбъект.Сортировка = 30;
		НовыйОбъект.Идентификатор = "osm_opnvkart";
		НовыйОбъект.Сервер = "http://tile.xn--pnvkarte-m4a.de/tilegen";
		НовыйОбъект.Правообладатель = "OpenStreetMap";
		НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   return ""http://tile.xn--pnvkarte-m4a.de/tilegen/"" + z + ""/"" + x + ""/"" + y + "".png"";
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00004");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00004";
		НовыйОбъект.Наименование = "2GIS";
		НовыйОбъект.Сортировка = 40;
		НовыйОбъект.Идентификатор = "2gis";
		НовыйОбъект.Сервер = "http://maps.2gis.ru";
		НовыйОбъект.Правообладатель = "2GIS";
		НовыйОбъект.СайтПравообладателя = "http://maps.2gis.ru";
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   var subs = [ '0', '1', '2', '3' ];   
		|   return ""http://tile"" + subs[(x+y)%4] + "".maps.2gis.com/tiles?x="" + x + ""&y="" + y + ""&z="" + z + ""&v=4"";
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00005");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00005";
		НовыйОбъект.Наименование = "Google Схема";
		НовыйОбъект.Сортировка = 50;
		НовыйОбъект.Идентификатор = "google_map";
		НовыйОбъект.Сервер = "http://maps.google.com";
		НовыйОбъект.Правообладатель = "Google";
		НовыйОбъект.СайтПравообладателя = "http://google.com";
		НовыйОбъект.Атрибуты = "maxExtent: new OpenLayers.Bounds(-20037508.342789,-20037508.342789,20037508.342789,20037508.342789),
		|getTileAddress: function(bounds,x,y,z) {
		|   var strGalileo = ""Galileo"";
		|   var subs = [ '0', '1' ];    
		|   return ""http://mt"" + subs[(x+y)%2] + "".google.com/vt/lyrs=m@137&hl=ru&x="" + x + ""&y="" + y + ""&z="" + z + ""&s="" + strGalileo.substr(0, (3*x+y)%8 );
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00007");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00007";
		НовыйОбъект.Наименование = "Google Спутник";
		НовыйОбъект.Сортировка = 70;
		НовыйОбъект.Идентификатор = "google_sat";
		НовыйОбъект.Сервер = "http://maps.google.com";
		НовыйОбъект.Правообладатель = "Google";
		НовыйОбъект.СайтПравообладателя = "http://google.com";
		НовыйОбъект.Атрибуты = "maxExtent: new OpenLayers.Bounds(-20037508.342789,-20037508.342789,20037508.342789,20037508.342789),
		|getTileAddress: function(bounds,x,y,z) {
		|   var strGalileo = ""Galileo"";
		|   var subs = [ '0', '1' ];    
		|   return ""http://khm"" + subs[(x+y)%2] + "".google.ru/kh/v=74&x="" + x + ""&y="" + y + ""&z="" + z + ""&s="" + strGalileo.substr(0, (3*x+y)%8 );
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00008");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00008";
		НовыйОбъект.Наименование = "Google Гибрид";
		НовыйОбъект.Сортировка = 80;
		НовыйОбъект.Идентификатор = "google_hyb";
		НовыйОбъект.Сервер = "http://maps.google.com";
		НовыйОбъект.Правообладатель = "Google";
		НовыйОбъект.СайтПравообладателя = "http://google.com";
		НовыйОбъект.СлойПодложки = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00007");
		НовыйОбъект.Атрибуты = "maxExtent: new OpenLayers.Bounds(-20037508.342789,-20037508.342789,20037508.342789,20037508.342789),
		|getTileAddress: function(bounds,x,y,z) {
		|   var strGalileo = ""Galileo"";
		|   var subs = [ '0', '1' ];    
		|   return ""http://mt"" + subs[(x+y)%2] + "".google.com/vt/lyrs=h@137&hl=ru&x="" + x + ""&y="" + y + ""&z="" + z + ""&s="" + strGalileo.substr(0, (3*x+y)%8 );
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00009");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00009";
		НовыйОбъект.Наименование = "Visicom";
		НовыйОбъект.Сортировка = 90;
		НовыйОбъект.Идентификатор = "visicom";
		НовыйОбъект.Сервер = "http://tms.visicom.ua/1.0.3/world_ru/";
		НовыйОбъект.Правообладатель = "Visicom";
		НовыйОбъект.СайтПравообладателя = "http://maps.visicom.ua";
		НовыйОбъект.Атрибуты = "maxExtent: new OpenLayers.Bounds(-20037508.342789,-20037508.342789,20037508.342789,20037508.342789),
		|getTileAddress: function(bounds,x,y,z) {
		|   var subs = [ '0', '1', '2' ];
		|   return ""http://tms"" + subs[(x+y)%3] + "".visicom.ua/1.0.3/world_ru/"" + (z) + ""/"" + x + ""/"" + ((1 << (z)) - (y+1)) + "".png"";
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00010");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00010";
		НовыйОбъект.Наименование = "VE Спутник";
		НовыйОбъект.Сортировка = 110;
		НовыйОбъект.Идентификатор = "ve_sat";
		НовыйОбъект.Сервер = "http://a.ortho.tiles.virtualearth.net/tiles/";
		НовыйОбъект.Правообладатель = "Microsoft";
		НовыйОбъект.СайтПравообладателя = "http://virtualearth.net";
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   var sTile = '000000'; 
		|   sTile += (parseInt(y.toString(2) * 2) + parseInt(x.toString(2)));
		|   sTile = sTile.substring(sTile.length - z, sTile.length); 
		|   return 'http://a' + sTile.substring(sTile.length-1, sTile.length) + '.ortho.tiles.virtualearth.net/tiles/a' + sTile + '.jpeg?g=1';
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00011");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00011";
		НовыйОбъект.Наименование = "VE Схема";
		НовыйОбъект.Сортировка = 100;
		НовыйОбъект.Идентификатор = "ve_map";
		НовыйОбъект.Сервер = "http://a.ortho.tiles.virtualearth.net/tiles/";
		НовыйОбъект.Правообладатель = "Microsoft";
		НовыйОбъект.СайтПравообладателя = "http://virtualearth.net";
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   var sTile = '000000'; 
		|   sTile += (parseInt(y.toString(2) * 2) + parseInt(x.toString(2)));
		|   sTile = sTile.substring(sTile.length - z, sTile.length); 
		|   return 'http://r' + sTile.substring(sTile.length-1, sTile.length) + '.ortho.tiles.virtualearth.net/tiles/r' + sTile + '.jpeg?g=1';
		|}";	
		НовыйОбъект.Записать();
	КонецЕсли;
	
	СправочникСсылка = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00012");
	Если СправочникСсылка.Пустая() Тогда
		НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
		НовыйОбъект.Код = "00012";
		НовыйОбъект.Наименование = "VE Гибрид";
		НовыйОбъект.Сортировка = 120;
		НовыйОбъект.Идентификатор = "ve_hyb";
		НовыйОбъект.Сервер = "http://a.ortho.tiles.virtualearth.net/tiles/";
		НовыйОбъект.Правообладатель = "Microsoft";
		НовыйОбъект.СайтПравообладателя = "http://virtualearth.net";
		НовыйОбъект.СлойПодложки = Справочники.ItobГеографическиеКарты.НайтиПоКоду("00010");
		НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
		|   var sTile = '000000'; 
		|   sTile += (parseInt(y.toString(2) * 2) + parseInt(x.toString(2)));
		|   sTile = sTile.substring(sTile.length - z, sTile.length); 
		|   return 'http://h' + sTile.substring(sTile.length-1, sTile.length) + '.ortho.tiles.virtualearth.net/tiles/h' + sTile + '.jpeg?g=1';
		|}";
		НовыйОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатчикиТоплива() Экспорт // "1.1.7.1"
	
	// Для назначения "Топливо" установим флаг "ДатчикТоплива"	
	НазначениеОбъект = Справочники.ItobНазначенияДатчиков.Топливо.ПолучитьОбъект();
	НазначениеОбъект.ДатчикТоплива = Истина;
	НазначениеОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКрайниеДанныеТерминалов() Экспорт // "1.1.2.4"
	
	// Заполним регистр "Крайние данные терминалы"	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	*
	               |ИЗ
	               |	РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов";
				   
	НаборЗаписей = РегистрыСведений.ItobКрайниеДанныеТерминалов.СоздатьНаборЗаписей();			   
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);		
	
	КонецЦикла;
	
	НаборЗаписей.Записать();	
	
КонецПроцедуры

Процедура УстановитьПараметрыСглаживанияКалибровочныхГрафиков() Экспорт // "1.1.4.2"
	
	// Установка оптимальных параметров сглаживания в калибровочных графиках
	Выборка = Справочники.ItobКалибровочныеГрафики.Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СправочникОбъект.ДлинаБуфераСглаживания = 0 Тогда
			СправочникОбъект.ДлинаБуфераСглаживания = 40;
			СправочникОбъект.ПорогЗаправки = 10;
			СправочникОбъект.ПорогСлива = 10;
			СправочникОбъект.ОкноГраницыЗаправкиСлива = 3;
			СправочникОбъект.Записать();			
		
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеНастроекОтображенияОбъектовИПереименованиеОбъектов() Экспорт // "1.1.8.13"
	
	ОбновлениеТиповДанныхЦСМ();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ItobВодители.Ссылка,
		|	ItobВодители.УдалитьЦветМаршрутаНаКарте,
		|	ItobВодители.УдалитьЦветНадписиНаКарте,
		|	ItobВодители.УдалитьИконкаНаКарте
		|ПОМЕСТИТЬ втДанные
		|ИЗ
		|	Справочник.ItobВодители КАК ItobВодители
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ItobТранспортныеСредства.Ссылка,
		|	ItobТранспортныеСредства.УдалитьЦветМаршрутаНаКарте,
		|	ItobТранспортныеСредства.УдалитьЦветНадписиНаКарте,
		|	ItobТранспортныеСредства.УдалитьИконкаНаКарте
		|ИЗ
		|	Справочник.ItobТранспортныеСредства КАК ItobТранспортныеСредства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.Объект, втДанные.Ссылка) КАК Объект,
		|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.ДлинаШлейфаOnlineСлежение, 3) КАК ДлинаШлейфаOnlineСлежение,
		|	ЕСТЬNULL(ItobНастройкиОтображенияОбъектов.НеПоказыватьСтрелкуНаправленияДвижения, ЛОЖЬ) КАК НеПоказыватьСтрелкуНаправленияДвижения,
		|	втДанные.УдалитьЦветМаршрутаНаКарте КАК ЦветМаршрутаНаКарте,
		|	втДанные.УдалитьЦветНадписиНаКарте КАК ЦветНадписиНаКарте,
		|	втДанные.УдалитьИконкаНаКарте КАК ИконкаНаКарте
		|ИЗ
		|	втДанные КАК втДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobНастройкиОтображенияОбъектов КАК ItobНастройкиОтображенияОбъектов
		|		ПО ItobНастройкиОтображенияОбъектов.Объект = втДанные.Ссылка";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ItobТранспортныеСредства", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства"));
	Попытка
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		НаборЗаписей = РегистрыСведений.ItobНастройкиОтображенияОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Записывать = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Объект 								  = ВыборкаДетальныеЗаписи.Объект;
			Запись.ДлинаШлейфаOnlineСлежение 			  = ВыборкаДетальныеЗаписи.ДлинаШлейфаOnlineСлежение;
			Запись.НеПоказыватьСтрелкуНаправленияДвижения = ВыборкаДетальныеЗаписи.НеПоказыватьСтрелкуНаправленияДвижения;
			Запись.ЦветМаршрутаНаКарте 					  = ВыборкаДетальныеЗаписи.ЦветМаршрутаНаКарте;
			Запись.ЦветНадписиНаКарте 					  = ВыборкаДетальныеЗаписи.ЦветНадписиНаКарте;
			Запись.ИконкаНаКарте 						  = ВыборкаДетальныеЗаписи.ИконкаНаКарте;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление конфигурации до версии 1.1.8.13'","ru"),
									 УровеньЖурналаРегистрации.Ошибка,,,
									 НСтр("ru = 'Реквизиты водителей и транспортных средств исходной конфигурации не соответствуют обновленной'"));
	КонецПопытки; 

КонецПроцедуры

Процедура ДобавитьЭлементСоответствия(тзСоответствияИмен, ПолноеИмя, ИмяЦСМ)
	СтрокаСоответствияИмен = тзСоответствияИмен.Добавить();
	СтрокаСоответствияИмен.ПолноеИмя = ПолноеИмя;
	СтрокаСоответствияИмен.ИмяЦСМ    = ИмяЦСМ;
КонецПроцедуры

Процедура ОбновлениеТиповДанныхЦСМ() Экспорт // "1.1.8.32", "1.1.8.97"

	тзСоответствияИмен = Новый ТаблицаЗначений;
	тзСоответствияИмен.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
	тзСоответствияИмен.Колонки.Добавить("ИмяЦСМ", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));	
	Если Найти(Метаданные.Имя, "УправлениеАвтотранспортом")
		ИЛИ Метаданные.Имя = "ЦентрСпутниковогоМониторингаУАТ" Тогда
		
		// Управление автотранспортом Проф, редакция 2.0 (2.0.5.1).
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ВидыДокументовФизическихЛиц",	"ВидыДокументовСотрудников");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobВидыТранспорта",       		"ВидыТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Сотрудники",	        		"Водители");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobГеографическиеЗоны",	  	"ГеографическиеЗоны");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ДоговорыКонтрагентов",	  		"ДоговорыКонтрагентов");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Контрагенты",      				"Контрагенты");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.уатМоделиТС",           		"МаркиТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Номенклатура", 	  				"Номенклатура");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.уатПараметрыВыработки", 		"ПараметрыВыработки");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.уатПунктыНазначения",   		"ПунктыНазначения");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Склады",       					"Склады");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.уатТС",                 		"ТранспортныеСредства");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Документ.уатМаршрутныйЛист",               "ПутевойЛист");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobОрганизации",				"Организации");
		
	ИначеЕсли НЕ (Метаданные.Справочники.Найти("ргАвтомашины") = Неопределено
			  ИЛИ Метаданные.Справочники.Найти("ргПлощадки")   = Неопределено) Тогда	
		
		// РГ-СОФТ:Вывоз мусора.
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Сотрудники",  				"Водители");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ргАвтомашины", 				"ТранспортныеСредства");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ргМаркиМашин", 				"МаркиТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ргПлощадки",   				"ПунктыНазначения");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobОрганизации",			"Организации");
								
	ИначеЕсли Найти(Метаданные.Имя, "УправлениеПредприятием") Тогда
		
		// 1С:ERP Управление предприятием 2 (2.1.3.129).
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ВидыДокументовФизическихЛиц",	"ВидыДокументовСотрудников");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobВидыТранспорта",       		"ВидыТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Сотрудники",             		"Водители");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ЗоныДоставки",	  				"ГеографическиеЗоны");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ДоговорыКонтрагентов",	  		"ДоговорыКонтрагентов");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Контрагенты",      				"Контрагенты");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ТипыТранспортныхСредств",      	"МаркиТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Номенклатура", 	  				"Номенклатура");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobПунктыНазначения", 	  		"ПунктыНазначения");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobПараметрыВыработки",	  	"ПараметрыВыработки");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Склады",       					"Склады");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ТранспортныеСредства", 			"ТранспортныеСредства");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Документ.ItobПутевойЛист",               	"ПутевойЛист");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobОрганизации",				"Организации");
		
	ИначеЕсли Найти(Метаданные.Имя, "УправлениеТорговлей") Тогда
		
		// Управление торговлей, редакция 11.2 (11.2.3.129).
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ВидыДокументовФизическихЛиц",	"ВидыДокументовСотрудников");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobВидыТранспорта",       		"ВидыТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ФизическиеЛица",             	"Водители");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ЗоныДоставки",	  				"ГеографическиеЗоны");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ДоговорыКонтрагентов",	  		"ДоговорыКонтрагентов");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Контрагенты",      				"Контрагенты");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ТипыТранспортныхСредств",      	"МаркиТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Номенклатура", 	  				"Номенклатура");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobПунктыНазначения", 	  		"ПунктыНазначения");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobПараметрыВыработки",	  	"ПараметрыВыработки");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.Склады",       					"Склады");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ТранспортныеСредства", 			"ТранспортныеСредства");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Документ.ItobПутевойЛист",               	"ПутевойЛист");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobОрганизации",				"Организации");
		
	ИначеЕсли Найти(Метаданные.Имя, "ЦентрСпутниковогоМониторинга") Тогда
		
		// 1С:Центр спутникового мониторинга, редакция 1.1 (1.1.8.82).
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobВидыДокументовСотрудников",	"ВидыДокументовСотрудников");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobВидыТранспорта",       		"ВидыТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobВодители",             		"Водители");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobГеографическиеЗоны",	  	"ГеографическиеЗоны");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobДоговорыКонтрагентов",	  	"ДоговорыКонтрагентов");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobКонтрагенты",      			"Контрагенты");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobМаркиТранспорта",      		"МаркиТранспорта");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobНоменклатура", 	  			"Номенклатура");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobПараметрыВыработки",	  	"ПараметрыВыработки");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobПунктыНазначения", 	  		"ПунктыНазначения");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobСклады",       				"Склады");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobТранспортныеСредства", 		"ТранспортныеСредства");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Документ.ItobПутевойЛист",               	"ПутевойЛист");
		ДобавитьЭлементСоответствия(тзСоответствияИмен, "Справочник.ItobОрганизации",				"Организации");
		
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление конфигурации до версии 1.1.8.13'","ru"),
								 УровеньЖурналаРегистрации.Ошибка,,,
								 НСтр("ru = 'Работа невозможна, так как данная конфигурацией не соответствует обновляемой'"));
	КонецЕсли;
							 
	Если тзСоответствияИмен.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТабСоответствияИмен", тзСоответствияИмен);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабСоответствияИмен.ПолноеИмя,
		               |	ТабСоответствияИмен.ИмяЦСМ
		               |ПОМЕСТИТЬ СоответствияИмен
		               |ИЗ
		               |	&ТабСоответствияИмен КАК ТабСоответствияИмен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИдентификаторыОбъектовМетаданных.Ссылка,
		               |	СоответствияИмен.ИмяЦСМ
		               |ИЗ
		               |	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствияИмен КАК СоответствияИмен
		               |		ПО (СоответствияИмен.ПолноеИмя = ИдентификаторыОбъектовМетаданных.ПолноеИмя)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ СоответствияИмен";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл			
			Запись = РегистрыСведений.ItobСоответствияОбъектов.СоздатьМенеджерЗаписи();
			Запись.ОбъектЦСМ = Перечисления.ItobОбъектыСоответствия[ВыборкаДетальныеЗаписи.ИмяЦСМ];
			Запись.ИдентификаторМетаданных = ВыборкаДетальныеЗаписи.Ссылка;
			Запись.Записать(Истина);
		КонецЦикла;
						
	КонецЕсли;

КонецПроцедуры

// Процедура производит запись в регистр сведений "ItobСервисыCsmSvc"
//
Процедура ЗаполнитьАдресCSMSVC() Экспорт // "1.1.8.52"
	АдресCSMSVC = Константы.ItobАдресСервисаCsmSvc.Получить();
	Если АдресCSMSVC <> "" Тогда
		СтрокиАдреса = ItobРаботаС_БСП_КлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресCSMSVC,":");
		АдресCsmService  = СтрокиАдреса[0];
		
		Если СтрокиАдреса.Количество() >= 1 Тогда
			ПортCsmService = СтрокиАдреса[1];
		Иначе
			ПортCsmService = "";
		КонецЕсли; 
	Иначе Возврат;	
		
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ItobСервисыCsmSvc.ВидОбращения,
		|	ItobСервисыCsmSvc.СерверОбращения,
		|	ItobСервисыCsmSvc.АдресCsmService,
		|	ItobСервисыCsmSvc.ПортCsmService
		|ИЗ
		|	РегистрСведений.ItobСервисыCsmSvc КАК ItobСервисыCsmSvc";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой()  Тогда
		// Повторно заполним регистр ItobСервисыCsmSvc
		НаборЗаписей = РегистрыСведений.ItobСервисыCsmSvc.СоздатьНаборЗаписей();
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Сервер;
		НовЗапись.АдресCsmService = АдресCsmService;
		НовЗапись.ПортCsmService = ПортCsmService;
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ВидОбращения = Перечисления.ItobВидыОбращенияCsmSvc.Клиент;
		НовЗапись.АдресCsmService = АдресCsmService;
		НовЗапись.ПортCsmService = ПортCsmService;
		
		НаборЗаписей.Записать(Истина);	
	КонецЕсли; 
КонецПроцедуры // ЗаполнитьАдресCSMSVC()

// Процедура добавляет пользователю роль "Администратор системы"
//
Процедура ДобавитьПолноправнымПользователямРольАдминистратора() Экспорт // "1.1.8.69"
	
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		Возврат;	
	КонецЕсли;
	
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	Для каждого Пользователь Из МассивПользователей Цикл
		Если Пользователь.Роли.Содержит(РольПолныеПрава) И Не Пользователь.Роли.Содержит(РольАдминистратораСистемы) Тогда
			Пользователь.Роли.Добавить(РольАдминистратораСистемы);
			Пользователь.Записать();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ()

// Заполнение предопределенных элементов справочника "ItobПараметрыВыработки".
//
// Параметры:
//  ПервичноеЗаполнение	 - Булево	 -  Первичное заполнение.
//
Процедура ПараметрыВыработкиЗаполнитьПредопределенные(ПервичноеЗаполнение = Ложь) Экспорт // "1.1.8.86"
		
	НовоеИмяСпр = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки");
	ПараметрВыр = Неопределено;
	
	ЗапросПредопределенныеПараметры = Новый Запрос;
	ЗапросПредопределенныеПараметры.Текст = "ВЫБРАТЬ
	                                        |	ПараметрыВыработки.Ссылка
	                                        |ИЗ
	                                        |	Справочник.ItobПараметрыВыработки КАК ПараметрыВыработки
	                                        |ГДЕ
	                                        |	ПараметрыВыработки.Предопределенный";
	ЗапросПредопределенныеПараметры.Текст = СтрЗаменить(ЗапросПредопределенныеПараметры.Текст, "ItobПараметрыВыработки", НовоеИмяСпр);										
	Выборка = ЗапросПредопределенныеПараметры.Выполнить().Выбрать();
	
	// Заполнение данных для предопределенных элементов.
	Пока Выборка.Следующий() Цикл
		// Пробег GPS.
		Если Выборка.Ссылка.ИмяПредопределенныхДанных = "ПробегОбщийПоДаннымGPS" Тогда
			ПараметрВыр = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрВыр.Наименование = НСтр("ru = 'Пробег GPS'");
			ПараметрВыр.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.Пробег;  
			
			ПараметрВыр.Записать();	
		КонецЕсли;
		
		// Время в движении с включенным ДВС.
		Если Выборка.Ссылка.ИмяПредопределенныхДанных = "ВремяВРаботеПоДаннымGPS" Тогда
			ПараметрВыр = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрВыр.Наименование = НСтр("ru = 'Время в движении с вкл. ДВС'");
			ПараметрВыр.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.Время;
			
			НовСтрокаУсловий = ПараметрВыр.УсловияОтбора.Добавить();
			НовСтрокаУсловий.Показатель = "Состояние";
			НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
			НовСтрокаУсловий.Значение = Перечисления.ItobСостоянияТерминалов.Движение;
			
			НовСтрокаУсловий = ПараметрВыр.УсловияОтбора.Добавить();
			НовСтрокаУсловий.Показатель = Справочники.ItobНазначенияДатчиков.Зажигание;
			НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
			НовСтрокаУсловий.Значение = 1;
			
			ПараметрВыр.Записать();
		КонецЕсли;
		
		// Время в простое с включенным ДВС.
		Если Выборка.Ссылка.ИмяПредопределенныхДанных = "ВремяВПростоеСВклДвигателем" Тогда
			ПараметрВыр = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрВыр.Наименование = НСтр("ru = 'Время в простое с вкл. ДВС'");
			ПараметрВыр.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.Время;
			
			НовСтрокаУсловий = ПараметрВыр.УсловияОтбора.Добавить();	
			НовСтрокаУсловий.Показатель = "Состояние";
			НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
			НовСтрокаУсловий.Значение  = Перечисления.ItobСостоянияТерминалов.Стоянка;
			
			НовСтрокаУсловий = ПараметрВыр.УсловияОтбора.Добавить();
			НовСтрокаУсловий.Показатель = Справочники.ItobНазначенияДатчиков.Зажигание;
			НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
			НовСтрокаУсловий.Значение = 1;
			
			ПараметрВыр.Записать();
		КонецЕсли;
		
		// Расход топлива ДУТ.
		Если Выборка.Ссылка.ИмяПредопределенныхДанных = "РасходТопливаДУТ" Тогда
			ПараметрВыр = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрВыр.Наименование = НСтр("ru = 'Расход топлива ДУТ'");
			ПараметрВыр.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика;
			
			ПараметрВыр.Записать();
		КонецЕсли;

		// Расход топлива в движении.
		Если Выборка.Ссылка.ИмяПредопределенныхДанных = "РасходТопливаВДвижении" Тогда
			ПараметрВыр = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрВыр.Наименование = НСтр("ru = 'Расход топлива в движении'");
			ПараметрВыр.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика;
						
			ПараметрВыр.Записать();
		КонецЕсли;

		// Расход топлива в простое.
		Если Выборка.Ссылка.ИмяПредопределенныхДанных = "РасходТопливаВПростое" Тогда
			ПараметрВыр = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрВыр.Наименование = НСтр("ru = 'Расход топлива в простое'");
			ПараметрВыр.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.ИзменениеЗначенияДатчика;
						
			ПараметрВыр.Записать();
		КонецЕсли;
		
	КонецЦикла; 
	
	// Заполнение данных для пустой ИБД.
	Если ПервичноеЗаполнение Тогда
		ПараметрВыработкиОбъект = Справочники[НовоеИмяСпр].СоздатьЭлемент();
		ПараметрВыработкиОбъект.Наименование = НСтр("ru = 'Время в движении'");
		ПараметрВыработкиОбъект.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.Время;
		НовСтрокаУсловий = ПараметрВыработкиОбъект.УсловияОтбора.Добавить();
		НовСтрокаУсловий.Показатель = "Состояние";
		НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
		НовСтрокаУсловий.Значение = Перечисления.ItobСостоянияТерминалов.Движение;	
		ПараметрВыработкиОбъект.Записать();
		
		ПараметрВыработкиОбъект = Справочники[НовоеИмяСпр].СоздатьЭлемент();
		ПараметрВыработкиОбъект.Наименование = НСтр("ru = 'Время в простое'");
		ПараметрВыработкиОбъект.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.Время;
		НовСтрокаУсловий = ПараметрВыработкиОбъект.УсловияОтбора.Добавить();
		НовСтрокаУсловий.Показатель = "Состояние";
		НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
		НовСтрокаУсловий.Значение = Перечисления.ItobСостоянияТерминалов.Стоянка;	
		ПараметрВыработкиОбъект.Записать();
		
		ПараметрВыработкиОбъект = Справочники[НовоеИмяСпр].СоздатьЭлемент();
		ПараметрВыработкиОбъект.Наименование = НСтр("ru = 'Время работы двигателя'");
		ПараметрВыработкиОбъект.ВидПараметра = Перечисления.ItobВидыПараметровВыработки.Время;
		НовСтрокаУсловий = ПараметрВыработкиОбъект.УсловияОтбора.Добавить();
		НовСтрокаУсловий.Показатель = Справочники.ItobНазначенияДатчиков.Зажигание;
		НовСтрокаУсловий.ВидСравнения = Перечисления.ItobВидыСравнения.Равно;
		НовСтрокаУсловий.Значение = 1;
		ПараметрВыработкиОбъект.Записать();
	КонецЕсли; 
		
КонецПроцедуры

// Обновляет предопределенные виды КИ для справочника "Организации".
//
Процедура ОбновитьКИОрганизаций() Экспорт	// "1.1.8.105".
	
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		Возврат;	
	КонецЕсли;
	
	 Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
		
	// Юридический адрес.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	Если ПараметрыВида.Свойство("АдресТолькоРоссийский") Тогда
		ПараметрыВида.АдресТолькоРоссийский = Истина;
	ИначеЕсли ПараметрыВида.Свойство("ТолькоНациональныйАдрес") Тогда
		ПараметрыВида.ТолькоНациональныйАдрес = Истина;
	КонецЕсли; 
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Фактический адрес.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Телефон.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Факс.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	// Электронная почта.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Почтовый адрес.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Другое.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);	 
	 
КонецПроцедуры

// Обновляет настройки отображения объектов на новый стандарт.
//
Процедура СменитьТипИконокОбъектовСоСтрокиНаСправочник() Экспорт // "1.1.8.115"
	
	ЗаполнитьПредопределенныеИконкиОбъектов();
	
	// Получаем имена предопределенных.
	Предопределенные = Метаданные.Справочники.ItobИконкиОбъектов.ПолучитьИменаПредопределенных();
	
	// Перебираем все записи регистра сведений.
	Выборка = РегистрыСведений.ItobНастройкиОтображенияОбъектов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Если ТипЗнч(Запись.ИконкаНаКарте) = Тип("Строка") Тогда
			// Если иконка как и нужно является строкой.
			
			НаименованиеИконки = Сред(Запись.ИконкаНаКарте, 11);
			Если Предопределенные.Найти(НаименованиеИконки) = Неопределено Тогда
				// Если иконка отсутствует в списке предопределенных объектов.
			    Продолжить;
			КонецЕсли;
			
			// Обновляем иконку у объекта.
			Запись.ИконкаНаКарте = Справочники.ItobИконкиОбъектов[НаименованиеИконки];
			Запись.Записать();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обновляет использование динамических группировок.
//
Процедура ОбновитьИспользованиеДинамическихГруппировки() Экспорт // "1.1.8.117"
	
	// Присваиваем истина, чтобы в приложении осталось такое же поведение.
	Константы.ItobИспользоватьДинамическиеГруппировки.Установить(Истина); 
	
КонецПроцедуры

// Переносит настройки репликации из нескольких констант в предопределенный элемент "Основной" справочника "СерверыСбораДанных".
//	По умолчанию настройки переносятся только из основного потока репликации. Настройки резервного потока переносятся только если
//		настроен резервный поток, а основной не настроен.
//
Процедура ПеренестиНастройкиРепликацииВСправочник() Экспорт	// "2.0.1.26".
	
	СерверОсновногоССД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ItobСерверыСбораДанных.Основной, "Сервер");
	Если ЗначениеЗаполнено(СерверОсновногоССД) Тогда
		Возврат;	// Это повторное обновление, дополнительных действий не требуется.	
	КонецЕсли; 
	
	ТекНастройки = ItobРепликация.НастройкиРепликацииПоУмолчанию();
	
	ОсновнойПотокИспользуется = Ложь;
	НастройкиОсновногоПотокаЗаполнены = Ложь;
	ПараметрыРепликацииОсновнойПоток = Константы.УдалитьItobПараметрыРепликации.Получить().Получить();
	Если ТипЗнч(ПараметрыРепликацииОсновнойПоток) = Тип("Структура") Тогда
		ОсновнойПотокИспользуется = ПроверитьИспользованиеРепликации(ПараметрыРепликацииОсновнойПоток);
		НастройкиОсновногоПотокаЗаполнены = Истина;
	КонецЕсли; 
	
	РезервныйПотокИспользуется = Ложь;
	ПараметрыРепликацииРезервныйПоток = Константы.УдалитьItobПараметрыРепликацииРезервныйСервер.Получить().Получить();
	Если ТипЗнч(ПараметрыРепликацииРезервныйПоток) = Тип("Структура") Тогда
		РезервныйПотокИспользуется = ПроверитьИспользованиеРепликации(ПараметрыРепликацииРезервныйПоток);
	КонецЕсли;	
	
	// Условия не противоположны - следует обработать случай, при котором оба потока не используются.
	//	 В таком случае пытаемся взять настройки из основного потока.	
	Если ОсновнойПотокИспользуется ИЛИ НЕ РезервныйПотокИспользуется Тогда
		Если НастройкиОсновногоПотокаЗаполнены Тогда
			ЗаполнитьЗначенияСвойств(ТекНастройки, ПараметрыРепликацииОсновнойПоток);
		КонецЕсли;
		ТекНастройки.Отключить = НЕ ОсновнойПотокИспользуется;
		ТекНастройки.Логин = Константы.УдалитьItobЛогинРепликации.Получить();
		ТекНастройки.Пароль = Константы.УдалитьItobПарольРепликации.Получить();
	Иначе
		ЗаполнитьЗначенияСвойств(ТекНастройки, ПараметрыРепликацииРезервныйПоток);
		ТекНастройки.Отключить = Ложь;	
	КонецЕсли; 
	
	Если НЕ ТекНастройки.Отключить Тогда
		НайтиИПеренастроитьРЗРепликации(ОсновнойПотокИспользуется);	
	КонецЕсли; 
			
	ЗаполнитьСерверСбораДанныхПоУмолчанию(ТекНастройки);
	
КонецПроцедуры

Процедура НайтиИПеренастроитьРЗРепликации(ИспользуетсяОсновноеРЗ)
	
	Ключ = ?(ИспользуетсяОсновноеРЗ, "КлючРепликации", "КлючРепликацииРезерв");
	СуществующееРЗ = НайтиРЗРепликацииПоПараметрам(Ключ);
	Если НЕ СуществующееРЗ = Неопределено Тогда
		Если ТипЗнч(СуществующееРЗ.УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
			ПеренестиРасписаниеРЗРепликацииВПредопределенное(СуществующееРЗ.Расписание);	// Расписание имеет смысл только для локального режима.
		КонецЕсли; 
		
		РегламентныеЗаданияСервер.УдалитьЗадание(СуществующееРЗ.УникальныйИдентификатор);
	КонецЕсли; 
	
КонецПроцедуры

Функция НайтиРЗРепликацииПоПараметрам(Ключ = "", Использование = Истина)
	
	Результат = Неопределено;
	
	МетаданныеРЗРепликации = Метаданные.РегламентныеЗадания.ItobРепликация;
	Отбор = Новый Структура("Метаданные, Ключ, Использование", МетаданныеРЗРепликации, Ключ, Использование);
	НайденныеРЗ = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если НайденныеРЗ.Количество() > 0 Тогда
		Результат = НайденныеРЗ[0];	
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиРасписаниеРЗРепликацииВПредопределенное(СуществующееРасписание)
	
	ПредопределенноеРЗ = НайтиРЗРепликацииПоПараметрам();
	Если НЕ ПредопределенноеРЗ = Неопределено Тогда
		РегламентныеЗаданияСервер.ИзменитьЗадание(ПредопределенноеРЗ.УникальныйИдентификатор, Новый Структура("Расписание", СуществующееРасписание));	 	
	КонецЕсли; 
	
КонецПроцедуры

// У каждого терминала с незаполненным сервером сбора данных ставится предопределенное значение сервера сбора данных.
//	(кроме мобильных клиентов).
//
Процедура ЗаполнитьСерверСбораДанныхУСуществующихТерминалов() Экспорт  // "2.0.1.26".
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobТерминалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ItobТерминалы КАК ItobТерминалы
	|ГДЕ
	|	НЕ ItobТерминалы.Модель = ЗНАЧЕНИЕ(Справочник.ItobМоделиТерминалов.МобильныйКлиент)
	|	И ItobТерминалы.СерверСбораДанных = ЗНАЧЕНИЕ(Справочник.ItobСерверыСбораДанных.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкиКодаТерминала");
		СпрОбъект.СерверСбораДанных = Справочники.ItobСерверыСбораДанных.Основной;
		СпрОбъект.Записать();
	КонецЦикла; 
		
КонецПроцедуры

// Если мк уже использовался (есть терминалы с моделью "мобильный клиент", то
//	заполняет сервер сбора данных у этих терминалов предопределенным элементом "СВМУ",
//	настраивает этот предопределенный элемент в соответствии с текущими настройками подсистемы МК,
//	а так же заполняет сервер сбора данных у узла плана обмена с СВМУ.
//
Процедура ЗаполнитьСерверСбораДанныхУМобильныхКлиентов() Экспорт // "2.0.1.26", "2.0.2.97". 
	
	СерверСбораДанных = Справочники.ItobСерверыСбораДанных.СВМУ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobТерминалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ItobТерминалы КАК ItobТерминалы
	|ГДЕ
	|	ItobТерминалы.Модель = ЗНАЧЕНИЕ(Справочник.ItobМоделиТерминалов.МобильныйКлиент)
	|	И ItobТерминалы.СерверСбораДанных = ЗНАЧЕНИЕ(Справочник.ItobСерверыСбораДанных.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.СерверСбораДанных = СерверСбораДанных;
		СпрОбъект.Записать();
	КонецЦикла; 
		
	Константы.ItobИспользоватьНесколькоСерверовСбораДанных.Установить(Истина);
	
КонецПроцедуры

#Область ПодсистемаItobЦентрСпутниковогоМониторингаСобытия
	
Процедура ГеографическиеЗоныПриДобавленииОбработчиковОбновления(Обработчики)
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеЗоны") Тогда
		МодульГеографическиеЗоныОбновлениеИБ = ОбщегоНазначения.ОбщийМодуль("ItobГеографическиеЗоныОбновлениеИБ");
		МодульГеографическиеЗоныОбновлениеИБ.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
	
#Область ПодсистемаItobЦентрСпутниковогоМониторингаГеографическиеЗоны
	
Процедура СобытияПриДобавленииОбработчиковОбновления(Обработчики)
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.События") Тогда
		МодульОбработкаСобытийОбновлениеИБ = ОбщегоНазначения.ОбщийМодуль("ItobОбработкаСобытийОбновлениеИБ");
		МодульОбработкаСобытийОбновлениеИБ.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
 
#Область ПереносНастроекРепликации

Функция ПроверитьИспользованиеРепликации(ПараметрыРепликации)
	
	Возврат ПараметрыРепликации.Свойство("ИспользоватьРепликацию") И ПараметрыРепликации.ИспользоватьРепликацию;
	
КонецФункции

Процедура ЗаполнитьСерверСбораДанныхПоУмолчанию(ТекущиеНастройки = Неопределено)
	
	Настройки = ?(ТипЗнч(ТекущиеНастройки) = Тип("Структура"), ТекущиеНастройки, ItobРепликация.НастройкиРепликацииПоУмолчанию());
	
	СпрОбъект = Справочники.ItobСерверыСбораДанных.Основной.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(СпрОбъект, Настройки);
	СпрОбъект.Записать();
			
КонецПроцедуры

#КонецОбласти 

// Обновляет поле Терминал в регистре сведений ItobСвойстваМаршрутныхЗаданий
//
Процедура ОбновитьТерминалВРегистреСвойстваМаршрутныхЗаданий(Параметры = Неопределено) Экспорт // "1.1.8.131"
	
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		Возврат;	
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли; 
	Параметры.Вставить("ОбработкаЗавершена",Ложь);
	
	ВыборкаЗаписей = РегистрыСведений.ItobСвойстваМаршрутныхЗаданий.Выбрать();
	Пока ВыборкаЗаписей.Следующий() Цикл
		ЗначенияРеквизитовМаршрута = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаЗаписей.МаршрутноеЗадание, 
																				"ДатаВыезда,ТранспортноеСредство,Водитель,ТерминалДляПланФакта");
		Если ЗначениеЗаполнено(ЗначенияРеквизитовМаршрута.ТерминалДляПланФакта) Тогда
			Продолжить;		
		КонецЕсли;
		
		ЗаписьРегистра = ВыборкаЗаписей.ПолучитьМенеджерЗаписи();		
		Если НЕ ЗначенияРеквизитовМаршрута.ТерминалДляПланФакта.Пустая() Тогда
			ЗаписьРегистра.Терминал = ЗначенияРеквизитовМаршрута.ТерминалДляПланФакта;
		Иначе
			ТекущийТерминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ЗначенияРеквизитовМаршрута.ТранспортноеСредство,
																					ЗначенияРеквизитовМаршрута.ДатаВыезда);
			Если НЕ ЗначениеЗаполнено(ТекущийТерминал) Тогда
				ТекущийТерминал = ItobОперативныйМониторинг.ПолучитьПривязанныйТерминал(ЗначенияРеквизитовМаршрута.Водитель,
																						ЗначенияРеквизитовМаршрута.ДатаВыезда);			
			КонецЕсли;
			ЗаписьРегистра.Терминал = ТекущийТерминал;
		КонецЕсли;
		ЗаписьРегистра.Записать();	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры
 
// Перенос данных из независимого РС "Привязки терминалов" в подчиненный регистратору.
//
Процедура ПереопределитьПривязкиТерминалов() Экспорт	// "2.0.2.13".
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьItobПривязкиТерминаловСрезПоследних.Период КАК Период,
	|	УдалитьItobПривязкиТерминаловСрезПоследних.Объект КАК Объект,
	|	УдалитьItobПривязкиТерминаловСрезПоследних.Терминал КАК Терминал
	|ИЗ
	|	РегистрСведений.УдалитьItobПривязкиТерминалов.СрезПоследних КАК УдалитьItobПривязкиТерминаловСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ItobПоступлениеМобильныхУстройств КАК ItobПоступлениеМобильныхУстройств
	|		ПО УдалитьItobПривязкиТерминаловСрезПоследних.Терминал = ItobПоступлениеМобильныхУстройств.Терминал
	|			И (ItobПоступлениеМобильныхУстройств.Проведен)
	|ГДЕ
	|	УдалитьItobПривязкиТерминаловСрезПоследних.ТерминалУстановлен
	|	И ItobПоступлениеМобильныхУстройств.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		ПоступлениеМобильныхУстройств = Документы.ItobПоступлениеМобильныхУстройств.СоздатьДокумент();
		ПоступлениеМобильныхУстройств.ОбъектПривязки = Выборка.Объект;
		ПоступлениеМобильныхУстройств.ВидТерминала = ?(Выборка.Терминал.Модель = Справочники.ItobМоделиТерминалов.МобильныйКлиент, 0, 1);
		ПоступлениеМобильныхУстройств.Терминал = Выборка.Терминал;
		ПоступлениеМобильныхУстройств.Дата = Выборка.Период;
		ПоступлениеМобильныхУстройств.Статус = Перечисления.мкСтатусыРегистрацииМобильныхУстройств.Новый;

		ПоступлениеМобильныхУстройств.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
		
КонецПроцедуры

Процедура ПеревестиГеографическиеСервисыНаВерсию_2_0() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ГеографическиеСервисы") Тогда
		ItobГеографическиеСервисыОбновлениеИнформационнойБазы.ПеревестиГеографическиеСервисыНаВерсию_2_0();	
	КонецЕсли; 
	
КонецПроцедуры

// Обновляет предопределенные виды КИ для справочника "Водители".
//
Процедура ОбновитьКИВодителей() Экспорт	// "2.0.2.21".
	
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		Возврат;	
	КонецЕсли;
	
	 Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
		
	// Телефон.
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации["ТелефонВодителя"];
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура УдалитьЛишниеРЗМобильногоКлиента(Параметры = Неопределено) Экспорт // "2.0.2.42".
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.МобильныйКлиент") Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("мкМобильныйКлиент");
		ОбщийМодуль.УдалитьЛишниеРЗОбменаССВМУ();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтключитьЗащитуОтОпасныхДействийУВсехПользователей(Параметры = Неопределено) Экспорт // Первый запуск, "2.0.2.42".
	
	ItobОбщегоНазначения.ОтключитьЗащитуОтОпасныхДействийУВсехПользователей();	
	
КонецПроцедуры

Процедура ОчиститьДвиженияПланФакта(Параметры = Неопределено) Экспорт // "2.0.2.53".
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		Возврат;	
	КонецЕсли; 	
	
	МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	МодульПланФакт.ОчиститьВсеДвижения();
	
КонецПроцедуры

Процедура ОбновитьДвиженияВСвойствахМаршрутныхЗаданий(Параметры = Неопределено) Экспорт // "2.0.2.56".
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		Возврат;	
	КонецЕсли; 	
	
	МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	МодульПланФакт.ОбновитьСвойстваВсехМаршрутныхЗаданий();
	
КонецПроцедуры

Процедура СброситьНастройкиОтображенияПунктовНазначения(Параметры = Неопределено) Экспорт // "2.0.2.57".
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobНастройкиОтображенияПунктов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ItobНастройкиОтображенияПунктов КАК ItobНастройкиОтображенияПунктов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ХранилищеПользовательскихНастроекОтборов = Неопределено;
		СпрОбъект.Записать();
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроставитьКорректныеНастройкиПланФакта(Параметры = Неопределено) Экспорт // Первый запуск.
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		Возврат;	
	КонецЕсли;
	
	МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	МодульПланФакт.УстановитьНастройкиПодсистемыПоУмолчанию();
	
КонецПроцедуры

Процедура НастроитьИспользованиеРепликации()
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если ИнформационнаяБазаФайловая Тогда
		
		МетаданныеРЗРепликации = Метаданные.РегламентныеЗадания.ItobРепликация;
		Отбор = Новый Структура("Метаданные", МетаданныеРЗРепликации);
		НайденныеРЗ = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если НайденныеРЗ.Количество() > 0 Тогда
			Результат = НайденныеРЗ[0];
			Результат.Использование = Ложь;
			Результат.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДополнительныеРеквизитыItobАЗС(Параметры = Неопределено) Экспорт  // "2.0.2.99". 
	
	Если НЕ ItobЦентрСпутниковогоМониторинга.ЭтоКонфигурацияЦСМ() Тогда
		Возврат;	
	КонецЕсли;
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ItobАЗС");
		
КонецПроцедуры

Процедура УстановитьИспользованиеРазделенияЗаявокМобильногоКлиента(Параметры = Неопределено) Экспорт // "2.0.2.103".
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.МобильныйКлиент") Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы["мкИспользоватьПломбы"].Получить() Тогда
		Константы["мкРазделениеЗаявокСОднимАдресом"].Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПредопределенныеВариантыДинамическогоОформления(Параметры = Неопределено) Экспорт	// Первый запуск, "2.0.2.149".
	
	СпрОбъект = Справочники.ItobВариантыДинамическогоОформления.УстановитьДополнительнуюИконкуИЦветФонаПриВключенномЗажигании.ПолучитьОбъект();
	Если СпрОбъект.ДляКарты
		 ИЛИ СпрОбъект.ДляСписка
		 ИЛИ СпрОбъект.ПометкаУдаления Тогда
		 
		Возврат;
	КонецЕсли;
	 
	СпрОбъект.ДляКарты = Ложь;
	СпрОбъект.ДляСписка = Ложь;
	СпрОбъект.Приоритет = 99;
	СпрОбъект.Список_ЦветФона = 14745568;	// Салатовый: (224, 255, 224).
	СпрОбъект.Карта_ДействиеСТекущейИконкой = Перечисления.ItobДействияСИконкамиВДинамическомОформлении.ЗаменитьДополнительнойИконкой;
	
	СпрОбъект.Список_ЦветНадписи = -1;
	СпрОбъект.Карта_ЦветНадписи = -1;
	
	НовСтрока = СпрОбъект.УсловияОтбора.Добавить();
	НовСтрока.Показатель = Перечисления.ItobПоказательКоординат.Скорость;
	НовСтрока.ВидСравнения = Перечисления.ItobВидыСравнения.Больше;
	НовСтрока.Значение = 0;
	
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	
	СпрОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьЗначенияНовыхКонстантПланФакта(Параметры = Неопределено) Экспорт // "2.0.2.165".
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущееЗначениеКонстанты = Константы["ItobИсточникПериодаПриРасчетеПланФакта"].Получить();
	Если НЕ ЗначениеЗаполнено(ТекущееЗначениеКонстанты) Тогда
		Константы["ItobИсточникПериодаПриРасчетеПланФакта"].Установить(Перечисления["ItobВидыПериодовПланФакта"].ФактВведенныеЗатемПлановыеОкна);	
	КонецЕсли; 
	
	ТекущееЗначениеКонстанты = Константы["ItobИсточникПериодаПриВизуализацииФактМаршрута"].Получить();
	Если НЕ ЗначениеЗаполнено(ТекущееЗначениеКонстанты) Тогда
		Константы["ItobИсточникПериодаПриВизуализацииФактМаршрута"].Установить(Перечисления["ItobВидыПериодовПланФакта"].Авто);	
	КонецЕсли;
	
	Константы["ItobПодключатьМаршрутныеЗаданияКПланФактуПриПроведении"].Установить(Истина);
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстанты_ВидыСвязейПосещенийТочекМаршрутаИГаражей(Параметры = Неопределено) Экспорт	// "2.0.3.48".
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.ПланФакт") Тогда
		Возврат;	
	КонецЕсли;
	
	МодульПланФакт = ОбщегоНазначения.ОбщийМодуль("ItobПланФакт");
	
	ДопустимыеВидыСвязейПосещенийТочекМаршрутаИГаражей = МодульПланФакт.ДопустимыеВидыСвязейПосещенийТочекМаршрутаИГаражей();
	
	ТекущееЗначение = МодульПланФакт.ВидСвязиПосещенийТочекМаршрутаИГаражей();
	Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Константы["ItobВидСвязиПосещенийТочекМаршрутаИГаражей"].Установить(ДопустимыеВидыСвязейПосещенийТочекМаршрутаИГаражей.ИспользоватьДляТочкиСтартаИФиниша);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстанты_ItobРадиусЗоныПриходаНаТочку() Экспорт // Первый запуск, "2.0.3.49"
	
	Если Константы.ItobРадиусЗоныПриходаНаТочку.Получить() = 0 Тогда
		Константы["ItobРадиусЗоныПриходаНаТочку"].Установить(100);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеИконкиОбъектов() Экспорт // Первый запуск

	ИконкиОбъектов = ИнициализироватьЗаполнитьТаблицуИконокОбъектов();
	
	Для каждого ИконкаОбъекта Из ИконкиОбъектов Цикл
		ПредопределеннаяИконка = ИконкаОбъекта.ИконкаСсылка.ПолучитьОбъект();
		КартинкаОбъекта = ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки(ИконкаОбъекта.Имя);
	    ПредопределеннаяИконка.Иконка = Новый ХранилищеЗначения(КартинкаОбъекта);
	    ПредопределеннаяИконка.Записать();
 	КонецЦикла; 
	
КонецПроцедуры

Функция ИнициализироватьЗаполнитьТаблицуИконокОбъектов()
	
	ИконкиПунктовНазначения = Новый ТаблицаЗначений;
	ИконкиПунктовНазначения.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ИконкиПунктовНазначения.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ИконкиПунктовНазначения.Колонки.Добавить("ИконкаСсылка", Новый ОписаниеТипов("СправочникСсылка.ItobИконкиОбъектов"));
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКругКрасный";
	ИконкаПункта.Представление =  НСтр("ru = 'Круг красный'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаКругКрасный;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКругЖелтый";
	ИконкаПункта.Представление = НСтр("ru = 'Круг желтый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаКругЖелтый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКругЗеленый";
	ИконкаПункта.Представление = НСтр("ru = 'Круг зеленый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаКругЗеленый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаЗеленаяГалочка";
	ИконкаПункта.Представление = НСтр("ru = 'Зеленая галочка'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаЗеленаяГалочка;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаДорожныйКонус";
	ИконкаПункта.Представление = НСтр("ru = 'Дорожный конус'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаДорожныйКонус;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаВидеокамера";
	ИконкаПункта.Представление = НСтр("ru = 'Видеокамера'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаВидеокамера;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаФотоаппарат";
	ИконкаПункта.Представление = НСтр("ru = 'Фотоаппарат'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаФотоаппарат;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаАвтомобильЗеленый";
	ИконкаПункта.Представление = НСтр("ru = 'Автомобиль зеленый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.АвтомобильЗеленый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаАвтомобильЛегковой";
	ИконкаПункта.Представление = НСтр("ru = 'Автомобиль легковой'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.АвтомобильЛегковой;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаАвтомобильСпортивный";
	ИконкаПункта.Представление = НСтр("ru = 'Автомобиль спортивный'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.АвтомобильСпортивный;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаВертолет";
	ИконкаПункта.Представление = НСтр("ru = 'Вертолет'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Вертолет;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаФотоаппарат";
	ИконкаПункта.Представление = НСтр("ru = 'Фотоаппарат'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаФотоаппарат;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаВрач";
	ИконкаПункта.Представление = НСтр("ru = 'Врач'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Врач;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаГрузовик";
	ИконкаПункта.Представление = НСтр("ru = 'Грузовик'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Грузовик;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаГрузовикЖелтый";
	ИконкаПункта.Представление = НСтр("ru = 'Грузовик желтый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ГрузовикЖелтый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКабриолет";
	ИконкаПункта.Представление = НСтр("ru = 'Кабриолет'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Кабриолет;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКомбайн";
	ИконкаПункта.Представление = НСтр("ru = 'Комбайн'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Комбайн;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКорабль";
	ИконкаПункта.Представление = НСтр("ru = 'Корабль'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Корабль;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКран";
	ИконкаПункта.Представление = НСтр("ru = 'Кран'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Кран;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаМикроавтобус";
	ИконкаПункта.Представление = НСтр("ru = 'Микроавтобус'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Микроавтобус;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаМиксер";
	ИконкаПункта.Представление = НСтр("ru = 'Миксер'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Миксер;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаМилиционер";
	ИконкаПункта.Представление = НСтр("ru = 'Милиционер'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Милиционер;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаМилиция";
	ИконкаПункта.Представление = НСтр("ru = 'Милиция'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Милиция;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаПожарнаяМашина";
	ИконкаПункта.Представление = НСтр("ru = 'Пожарная машина'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ПожарнаяМашина;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаСкораяПомощь";
	ИконкаПункта.Представление = НСтр("ru = 'Скорая помощь'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.СкораяПомощь;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаТрактор";
	ИконкаПункта.Представление = НСтр("ru = 'Трактор'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Трактор;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаТягач";
	ИконкаПункта.Представление = НСтр("ru = 'Тягач'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Тягач;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаЧеловек";
	ИконкаПункта.Представление = НСтр("ru = 'Человек'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Человек;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаЭкскаватор";
	ИконкаПункта.Представление = НСтр("ru = 'Экскаватор'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Экскаватор;
	
	
	Возврат ИконкиПунктовНазначения;
	
КонецФункции

Процедура ОбновитьИконкиПунктовНазначения() Экспорт // "2.0.3.50"
	
	ИконкиПунктовНазначения = ИнициализироватьЗаполнитьТаблицуИконокПунктовНазначения();
	
	Для каждого ИконкаПункта Из ИконкиПунктовНазначения Цикл
		ИконкаОбъекта = ИконкаПункта.ИконкаСсылка.ПолучитьОбъект();
		КартинкаПункта = ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки(ИконкаПункта.Имя);
	    ИконкаОбъекта.Иконка = Новый ХранилищеЗначения(КартинкаПункта);
	    ИконкаОбъекта.Записать();
 	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьСвойстваПунктовНазначения() Экспорт // "2.0.3.50"
	
	ИконкиПунктовНазначения = ИнициализироватьЗаполнитьТаблицуИконокПунктовНазначения();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИконкиПунктовНазначения.Имя КАК Имя,
	|	ИконкиПунктовНазначения.ИконкаСсылка КАК ИконкаСсылка
	|ПОМЕСТИТЬ втИконкиПН
	|ИЗ
	|	&ИконкиПунктовНазначения КАК ИконкиПунктовНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ItobСвойстваПунктовНазначения.ПунктНазначения КАК ПунктНазначения,
	|	ЕСТЬNULL(втИконкиПН.ИконкаСсылка, ЗНАЧЕНИЕ(Справочник.ItobИконкиОбъектов.ПустаяСсылка)) КАК ИконкаСсылка
	|ИЗ
	|	РегистрСведений.ItobСвойстваПунктовНазначения КАК ItobСвойстваПунктовНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИконкиПН КАК втИконкиПН
	|		ПО ItobСвойстваПунктовНазначения.ИконкаНаКарте = втИконкиПН.Имя
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(ItobСвойстваПунктовНазначения.ИконкаНаКарте) = ТИП(СТРОКА)
	|			ИЛИ ItobСвойстваПунктовНазначения.ИконкаНаКарте = НЕОПРЕДЕЛЕНО)";
	Запрос.УстановитьПараметр("ИконкиПунктовНазначения", ИконкиПунктовНазначения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ItobСвойстваПунктовНазначения.СоздатьМенеджерЗаписи();
		Запись.ПунктНазначения = Выборка.ПунктНазначения;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.ИконкаНаКарте = Выборка.ИконкаСсылка;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьЗаполнитьТаблицуИконокПунктовНазначения()
	
	ИконкиПунктовНазначения = Новый ТаблицаЗначений;
	ИконкиПунктовНазначения.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ИконкиПунктовНазначения.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ИконкиПунктовНазначения.Колонки.Добавить("ИконкаСсылка", Новый ОписаниеТипов("СправочникСсылка.ItobИконкиОбъектов"));
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКругКрасный";
	ИконкаПункта.Представление =  НСтр("ru = 'Круг красный'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаКругКрасный;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКругЖелтый";
	ИконкаПункта.Представление = НСтр("ru = 'Круг желтый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаКругЖелтый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаКругЗеленый";
	ИконкаПункта.Представление = НСтр("ru = 'Круг зеленый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаКругЗеленый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаЗеленаяГалочка";
	ИконкаПункта.Представление = НСтр("ru = 'Зеленая галочка'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаЗеленаяГалочка;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаДорожныйКонус";
	ИконкаПункта.Представление = НСтр("ru = 'Дорожный конус'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаДорожныйКонус;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаВидеокамера";
	ИконкаПункта.Представление = НСтр("ru = 'Видеокамера'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаВидеокамера;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаФотоаппарат";
	ИконкаПункта.Представление = НСтр("ru = 'Фотоаппарат'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаФотоаппарат;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаАвтомобильЗеленый";
	ИконкаПункта.Представление = НСтр("ru = 'Автомобиль зеленый'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.АвтомобильЗеленый;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаАвтомобильЛегковой";
	ИконкаПункта.Представление = НСтр("ru = 'Автомобиль легковой'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.АвтомобильЛегковой;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаАвтомобильСпортивный";
	ИконкаПункта.Представление = НСтр("ru = 'Автомобиль спортивный'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.АвтомобильСпортивный;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаВертолет";
	ИконкаПункта.Представление = НСтр("ru = 'Вертолет'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.Вертолет;
	
	ИконкаПункта = ИконкиПунктовНазначения.Добавить();
	ИконкаПункта.Имя = "ItobИконкаФотоаппарат";
	ИконкаПункта.Представление = НСтр("ru = 'Фотоаппарат'");
	ИконкаПункта.ИконкаСсылка = Справочники.ItobИконкиОбъектов.ItobИконкаФотоаппарат;
		
	
	Возврат ИконкиПунктовНазначения;
	
КонецФункции

Процедура ЗаполнитьШаблоныВидовТочекПоУмолчанию() Экспорт // Первый запуск, "2.0.3.53" 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.МобильныйКлиент") Тогда
		МодульМобильныйКлиент = ОбщегоНазначения.ОбщийМодуль("мкМобильныйКлиент");
		МодульМобильныйКлиент.ЗаполнитьСтандартныйВидТочки();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

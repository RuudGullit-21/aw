////////////////////////////////////////////////////////////////////////////////
// Управление автотранспортом.
// Процедуры и функции подсистемы Журналы транспортных документов.
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

// Процедура создает файлы, присоединенные к выделенным документам, и подписывает их
//
// Параметры:
//  ЭлементыСписок		 - ЭлементФормы - список документов
//  ИдентификаторФормы	 - Строка - уникальный идентификатор формы
//
Процедура ПодписатьИзСписка(ЭлементыСписок, ИдентификаторФормы, ДопПараметры = Неопределено) Экспорт
	
	мсвДокументы = ЭлементыСписок.ВыделенныеСтроки;
	Если мсвДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если уатЖурналыТранспортныхДокументов.ДокументыПодписаны(мсвДокументы,, ДопПараметры) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьЧтоПроведенПередПодписью(мсвДокументы) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьСтатусПередПодписью(мсвДокументы) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьСоответствиеОтветственногоЛица(мсвДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриложения["СертификатДляГрупповойПодписи"] <> Неопределено Тогда
		ПараметрыПриложения.Удалить("СертификатДляГрупповойПодписи");
	КонецЕсли;
	
	ФайлыДляПодписи = уатЖурналыТранспортныхДокументов.НайтиДобавитьФайлыДляПодписи(мсвДокументы);
	УстановитьПодписиФайлов(ФайлыДляПодписи, ИдентификаторФормы, ДопПараметры);
	
КонецПроцедуры

// Процедура создает файл, присоединенные к текущему документу, и подписывает его
//
// Параметры:
//  ДокументСсылка		 - ДокументСсылка - ссылка на документ
//  ИдентификаторФормы	 - Строка - уникальный идентификатор формы
//
Процедура Подписать(ДокументСсылка, ИдентификаторФормы, ДопПараметры = Неопределено) Экспорт
	
	мсвДокументы = Новый Массив;
	мсвДокументы.Добавить(ДокументСсылка);
	
	Если уатЖурналыТранспортныхДокументов.ДокументыПодписаны(мсвДокументы,, ДопПараметры) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьЧтоПроведенПередПодписью(мсвДокументы) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьСтатусПередПодписью(мсвДокументы) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьСоответствиеОтветственногоЛица(мсвДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриложения["СертификатДляГрупповойПодписи"] <> Неопределено Тогда
		ПараметрыПриложения.Удалить("СертификатДляГрупповойПодписи");
	КонецЕсли;
	
	ФайлыДляПодписи = уатЖурналыТранспортныхДокументов.НайтиДобавитьФайлыДляПодписи(мсвДокументы, ДопПараметры);
	УстановитьПодписиФайлов(ФайлыДляПодписи, ИдентификаторФормы, ДопПараметры);
	
КонецПроцедуры

Процедура ОбработатьШтрихкод(ДанныеШтрихкода, ЭтаФорма, ИмяДокумента) Экспорт
	
	// проверки и получение значения штрихкода
	Если ДанныеШтрихкода[1] = Неопределено Тогда
		ШтрихкодПЛ = ДанныеШтрихкода[0];
	Иначе
		ШтрихкодПЛ = ДанныеШтрихкода[1][1];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШтрихкодПЛ) Тогда
		ТекПЛ = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(ШтрихкодПЛ);
		Если ТипЗнч(ТекПЛ) = Тип("ДокументСсылка.уатПутевойЛист") И ЗначениеЗаполнено(ТекПЛ) Тогда
			Если ИмяДокумента = "уатЖурналМедицинскогоОсмотраВодителей" Тогда
				ЗаписиЖурнала = уатЖурналыТранспортныхДокументов.СозданныеДокументыМедосмотраПоПЛ(ТекПЛ);
			ИначеЕсли ИмяДокумента = "уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС" Тогда
				ЗаписиЖурнала = уатЖурналыТранспортныхДокументов.СозданныеДокументыКонтроляТСПоПЛ(ТекПЛ);
			ИначеЕсли ИмяДокумента = "уатЖурналУчетаПоказанийОдометра" Тогда
				ЗаписиЖурнала = уатЖурналыТранспортныхДокументов.СозданныеДокументыОсмотровОдометровПоПЛ(ТекПЛ);
			КонецЕсли;
						
			мсвЗаписиЖурнала = Новый Массив;
			Для Каждого ТекЭлем Из ЗаписиЖурнала Цикл
				Если ЗначениеЗаполнено(ТекЭлем.Значение) Тогда
					мсвЗаписиЖурнала.Добавить(ТекЭлем.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Если мсвЗаписиЖурнала.Количество() = 1 Тогда
				ПоказатьЗначение(Неопределено, мсвЗаписиЖурнала[0]);
			Иначе
				ПараметрыФормы = Новый Структура;
				Если мсвЗаписиЖурнала.Количество() = 0 Тогда
					ПараметрыФормы.Вставить("Основание", ТекПЛ);
					ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы);
				Иначе
					РеквизитыПЛ = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекПЛ, "Номер, Дата");
					ПараметрыФормы.Вставить("Заголовок", СтрШаблон("Выберите запись журнала по Путевому листу №%1 от %2",
						РеквизитыПЛ.Номер, Формат(РеквизитыПЛ.Дата, "ДФ=dd.MM.yyyy")));
					ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", мсвЗаписиЖурнала));
					ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма);
				КонецЕсли;
			КонецЕсли;
		Иначе
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке("По данному штрихкоду не найден Путевой лист");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает отчет "Результаты медосмотров" или отчет "Результаты контроля ТС"
// с отбором по водителю или ТС за предыдущий месяц
//
// Параметры:
//  ДокументСсылка - ссылка на документ
//
Процедура ОткрытьОтчетРезультаты(ДокументСсылка) Экспорт
	ПараметрыОтчета = уатЖурналыТранспортныхДокументов.ПолучитьПараметрыОткрытияОтчетаРезультатыМедосмотраКонтроля(ДокументСсылка);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналМедицинскогоОсмотраВодителей") Тогда
		ОткрытьФорму("Отчет.уатРезультатыМедицинскогоОсмотраВодителей.Форма", ПараметрыОтчета);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС") Тогда
		ОткрытьФорму("Отчет.уатРезультатыКонтроляТехническогоСостоянияТС.Форма", ПараметрыОтчета);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПодписиФайлов(ФайлыДляПодписи, ИдентификаторФормы, ДопПараметры = Неопределено)
	Если ФайлыДляПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекФайлПодписи Из ФайлыДляПодписи Цикл
		Прервать;
	КонецЦикла;
		
	ДопПараметрыОповещения  = Новый Структура("ФайлыДляПодписи, ИдентификаторФормы, ДопПараметры",
		ФайлыДляПодписи, ИдентификаторФормы, ДопПараметры);
		
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекФайлПодписи.Значение, "ПодписанЭП") Тогда
		ПриПолученииПодписи(Истина, ДопПараметрыОповещения);	
	Иначе
		ОписаниеОповещения      = Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ДопПараметрыОповещения);
		ДополнительныеПараметры = Новый Структура("ОбработкаРезультата", ОписаниеОповещения);
		ПодписатьФайл(ТекФайлПодписи.Значение, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

// Процедура скопирована из общих модулей РаботаСФайламиКлиент И РаботаСФайламиСлужебныйКлиент для передачи параметров
// ОтборСертификатов и БезПодтверждения для подписи без открытия формы ввода сертификата и пароля
Процедура ПодписатьФайл(ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры)
			
	// ++ РаботаСФайламиКлиент
	
	//Процедура ПодписатьФайл(ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры = Неопределено)
	Если Не ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Чтобы добавить электронную подпись, включите"
"в настройках программы использование электронных подписей.'; en = 'To add digital signature, enable the use"
"of digital signatures in the application settings.'"));
		Возврат;
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("ДанныеФайла") Тогда
		ДополнительныеПараметры.Вставить("ДанныеФайла", РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(
			ПрисоединенныйФайл,, ИдентификаторФормы));
	КонецЕсли;
		
	// -- РаботаСФайламиКлиент
	
	// ++ РаботаСФайламиСлужебныйКлиент
	
	//Процедура ПодписатьФайл(ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы, ОбработчикЗавершения = Неопределено, ОбработчикПриПолученииПодписи = Неопределено) Экспорт
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ДополнительныеПараметры.ОбработкаРезультата);
	ПараметрыВыполнения.Вставить("ПрисоединенныйФайл",   ПрисоединенныйФайл);
	ПараметрыВыполнения.Вставить("ДанныеФайла",          ДополнительныеПараметры.ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы",   ИдентификаторФормы);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеДобавленияПодписей", РаботаСФайламиСлужебныйКлиент, ПараметрыВыполнения);
	//++ УАТ
	//Если Не РаботаСФайламиСлужебныйКлиент.ПроверитьВозможностьПодписания(ДанныеФайла, ОбработчикЗавершения, ОбработчикПродолжения, ПараметрыВыполнения) Тогда
	//	Возврат;
	//КонецЕсли;
	флПроверка = Истина;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеФайла.Редактирует) Тогда
		ТекстПредупреждения = РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла();
		флПроверка = Ложь;
	ИначеЕсли ДополнительныеПараметры.ДанныеФайла.Зашифрован Тогда
		ТекстПредупреждения = РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла();
		флПроверка = Ложь;
	КонецЕсли;
	Если НЕ флПроверка Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстПредупреждения);
		Если ПараметрыВыполнения.Обработчик <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикЗавершения, ПараметрыВыполнения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	//-- УАТ
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Подписание файла'; en = 'File signing'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'; en = 'File'"));
	ОписаниеДанных.Вставить("Представление",       ПрисоединенныйФайл);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Данные", ПараметрыВыполнения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ОписаниеДанных.Вставить("Объект", ПрисоединенныйФайл);
	
	//++ УАТ
	Если ДополнительныеПараметры.ОбработкаРезультата.ДополнительныеПараметры.ДопПараметры <> Неопределено
		И ДополнительныеПараметры.ОбработкаРезультата.ДополнительныеПараметры.ДопПараметры.Свойство("ТерминалПарольПодписи") Тогда
		ТекСертификат = уатЖурналыТранспортныхДокументов.ПолучитьСертификатИзНастроекТерминала(
			ДополнительныеПараметры.ОбработкаРезультата.ДополнительныеПараметры.ДопПараметры.ТерминалСотрудник);
			
		Если НЕ ЗначениеЗаполнено(ТекСертификат) И ПараметрыВыполнения.Обработчик <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикЗавершения, ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
		
		мсвСертификаты = Новый Массив;
		мсвСертификаты.Добавить(ТекСертификат);
		ОписаниеДанных.Вставить("ОтборСертификатов", мсвСертификаты);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
		
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(ТекСертификат,
			ДополнительныеПараметры.ОбработкаРезультата.ДополнительныеПараметры.ДопПараметры.ТерминалПарольПодписи);
	Иначе
		СертификатДляГрупповойПодписи = ПараметрыПриложения["СертификатДляГрупповойПодписи"];
		Если ЗначениеЗаполнено(СертификатДляГрупповойПодписи) Тогда
			мсвСертификаты = Новый Массив;
			мсвСертификаты.Добавить(СертификатДляГрупповойПодписи);
			ОписаниеДанных.Вставить("ОтборСертификатов", мсвСертификаты);
			ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
			//ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
		Иначе
			ОповещПередПодписанием = Новый ОписаниеОповещения("ФормаПодписиПередВыполнением", ЭтотОбъект, ДополнительныеПараметры);
			ОписаниеДанных.Вставить("ПередВыполнением", ОповещПередПодписанием);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ИдентификаторФормы, ОбработчикПродолжения);
	//-- УАТ
	
	// -- РаботаСФайламиСлужебныйКлиент
	
КонецПроцедуры

Процедура ФормаПодписиПередВыполнением(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Оповещение") Тогда
		ВыбранныйСертификат = Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка;
		Если ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
			ПараметрыПриложения.Вставить("СертификатДляГрупповойПодписи", ВыбранныйСертификат);
		КонецЕсли;
			
		ВыполнитьОбработкуОповещения(Результат.Оповещение, Новый Структура);
	КонецЕсли;
КонецПроцедуры

Процедура ПриПолученииПодписи(Результат, ДопПараметры) Экспорт
	
	ДопПараметры.Вставить("Результат", Результат);
	
	Если Результат Тогда
		Для Каждого ТекФайлПодписи Из ДопПараметры.ФайлыДляПодписи Цикл
			Прервать;
		КонецЦикла;
		ДокументСсылка = ТекФайлПодписи.Ключ;
		ДопПараметры.Вставить("УстановитьПодпись");
		уатЖурналыТранспортныхДокументов.ИзменитьСостоянияПодписейПЛ(ДокументСсылка, ДопПараметры);
		ДопПараметры.ФайлыДляПодписи.Удалить(ДокументСсылка);
		
		Если ДопПараметры.ФайлыДляПодписи.Количество() = 0 Тогда // все файлы подписаны
			Если ТипЗнч(ДопПараметры.ДопПараметры) = Тип("Структура")
				И ДопПараметры.ДопПараметры.Свойство("ОповеститьОЗавершении") Тогда
				
				Оповестить("ПриПолученииПодписи", ДопПараметры);
			КонецЕсли;
		Иначе //переход к подписи очередного файла
			УстановитьПодписиФайлов(ДопПараметры.ФайлыДляПодписи,
				ДопПараметры.ИдентификаторФормы, ДопПараметры.ДопПараметры);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДопПараметры.ДопПараметры) = Тип("Структура")
			И ДопПараметры.ДопПараметры.Свойство("ОповеститьОЗавершении") Тогда
			
			Оповестить("ПриПолученииПодписи", ДопПараметры);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

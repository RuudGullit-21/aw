////////////////////////////////////////////////////////////////////////////////
// Общего назначения (клиент, сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает модуль аргумента.
//
// Параметры:
//  Аргумент - Число - Исходное число.
// 
// Возвращаемое значение:
//  Число - Положительное число.
//
Функция МодульЗнч(Аргумент) Экспорт
	Возврат ?(Аргумент>=0, Аргумент, -Аргумент);
КонецФункции
 
// Определяет максимальное значение из полученных параметров.
//  Выполняется в 5 раз быстрее стандартной функции Макс(),
//  но позволяет сравнивать только 2 значения.
//
// Параметры:
//  Значение1	 - Число, Строка, Дата, Булево	 - Первый параметр для сравнения.
//  Значение2	 - Число, Строка, Дата, Булево	 - Второй параметр для сравнения.
// 
// Возвращаемое значение:
//  Число, Строка, Дата, Булево - Максимальное из полученных значений.
//
Функция МаксЗнч(Значение1, Значение2) Экспорт
	Возврат ?(Значение1>Значение2, Значение1, Значение2);
КонецФункции

// Определяет минимальное значение из полученных параметров.
//  Выполняется в 5 раз быстрее стандартной функции Мин(),
//  но позволяет сравнивать только 2 значения.
//
// Параметры:
//  Значение1	 - Число, Строка, Дата, Булево	 - Первый параметр для сравнения.
//  Значение2	 - Число, Строка, Дата, Булево	 - Второй параметр для сравнения.
// 
// Возвращаемое значение:
//  Число, Строка, Дата, Булево - Минимальное из полученных значений.
//
Функция МинЗнч(Значение1, Значение2) Экспорт
	Возврат ?(Значение1<Значение2, Значение1, Значение2);
КонецФункции

// Преобразование цвет в значение хранения.
//
// Параметры:
//  Красный	 - Число - Значение от 0 до 255.
//  Зеленый	 - Число - Значение от 0 до 255.
//  Синий	 - Число - Значение от 0 до 255.
// 
// Возвращаемое значение:
//  Число - Код цвета.
//
Функция ПолучитьЗначениеХраненияЦвета(Красный, Зеленый, Синий) Экспорт
    Возврат Синий*256*256 + Зеленый*256 + Красный;
КонецФункции

// Преобразование значения хранения в цвет.
//
// Параметры:
//  КодЦвета - Число - Код цвета.
// 
// Возвращаемое значение:
//  Цвет - Цвет.
//
Функция ПолучитьЦветПоЗначениюХранения(КодЦвета) Экспорт
	
	Синий = Цел(КодЦвета/(256*256));
	Синий256256 = Синий*256*256;
    Зеленый = Цел((КодЦвета - Синий256256)/256);
    Красный = КодЦвета - Синий256256 - Зеленый*256;
	
	Возврат Новый Цвет(Красный,Зеленый,Синий);
	
КонецФункции
 
// Выполняет форматирование географических координат.
//
// Параметры:
//  Парам1	 - Число, Строка - Координаты для форматирования.
// 
// Возвращаемое значение:
//  Строка - Форматированные координаты.
//
Функция ФорматироватьКоординаты(Парам1) Экспорт
	Если Парам1=0 Тогда
		Возврат "0";
	Иначе
		Рез = Строка(Парам1);
		Возврат СтрЗаменить(Рез,",",".");
	КонецЕсли;
КонецФункции // ФорматироватьКоординаты()

// Преобразовывает шестнадцатеричное в десятичное.
//
// Параметры:
//  Значение - Строка	 - Шестнадцатеричное значение.
// 
// Возвращаемое значение:
//  Число - Десятичное значение.
//
Функция ШестнадцатеричноеВДесятичное(Знач Значение="00") Экспорт
	
	Нотация = 16;
	
	Если Нотация <= 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Значение = СокрЛП(Значение);
	
	Если Значение="0" ИЛИ Значение="00" Тогда 
		Возврат 0; 
	КонецЕсли;
	
	Результат=0;
	Длина=СтрДлина(Значение);
	Для СчетчикХ=1 По Длина Цикл
		СчетчикМ=1;
		Для СчетчикУ=1 По Длина-СчетчикХ Цикл СчетчикМ=СчетчикМ*Нотация КонецЦикла;
		Результат=Результат+(Найти("0123456789ABCDEF",Сред(Значение,СчетчикХ,1))-1)*СчетчикМ;
	КонецЦикла;
	
	Возврат Окр(Результат);
	
КонецФункции

// Преобразовывает десятичное в двоичное.
//
// Параметры:
//  ИсхЧисло - Число - Десятичное значение.
// 
// Возвращаемое значение:
//  Строка - Двоичное значение.
//
Функция ДесятичноеВДвоичное(Знач ИсхЧисло) Экспорт
    
    ДвоичныйКод = "";
    Пока ИсхЧисло <> 0 Цикл
        ДвоичныйКод = "" + ИсхЧисло%2 + ДвоичныйКод ;
        ИсхЧисло = Цел(ИсхЧисло/2);
	КонецЦикла;
	
    Возврат ДвоичныйКод;
    
КонецФункции

// Преобразовывает двоичное в десятичное.
//
// Параметры:
//  Стр2 - Строка	 - Двоичное значение.
// 
// Возвращаемое значение:
//  Число - Десятичное значение.
//
Функция ДвоичноеВДесятичное(Знач Стр2) Экспорт
	
	Стр = СокрЛП(Стр2);
	Рез=0;
	
	Для Счетчик=1 По СтрДлина(Стр) Цикл
		Рез=Рез*2+Число(Сред(Стр,Счетчик,1));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

// Преобразовывает шестнадцатеричное в десятичное.
//
// Параметры:
//  Значение - Строка	 - Шестнадцатеричное значение.
// 
// Возвращаемое значение:
//  Число - Десятичное значение.
//
Функция HexData2Dec(Знач Значение="00") Экспорт
	
	Нотация = 16;	 
	Значение = СокрЛП(Значение);
	
	Если Значение = "0" ИЛИ Значение = "00" Тогда 
		Возврат 0;
	ИначеЕсли Значение = "1" ИЛИ Значение = "01" Тогда 
		Возврат 1;	
	КонецЕсли;
	
	ТекДлина = СтрДлина(Значение);
	
	Если ТекДлина/2 <> Цел(ТекДлина/2) Тогда
		Значение = "0"+Значение;
		ТекДлина = СтрДлина(Значение);
	КонецЕсли;
	
	// Инверсия значения
	ИнвЗначение = "";
	ЧислоБайт = Цел(ТекДлина/2);
	Для Счетчик = 1 По ЧислоБайт Цикл
		ИнвЗначение = Сред(Значение,2*Счетчик-1,2) + ИнвЗначение;	
	КонецЦикла;
	
	Результат = 0;	 
	Для СчетчикХ=1 По ТекДлина Цикл		
		СчетчикМ = Pow(Нотация,ТекДлина-СчетчикХ);		
		Результат = Результат+(Найти("0123456789ABCDEF",Сред(ИнвЗначение,СчетчикХ,1))-1)*СчетчикМ;		
	КонецЦикла;
	
	Возврат Окр(Результат);
	
КонецФункции

// Преобразовывает данные датчиков в строку.
//
// Параметры:
//  ДанныеДатчиков	 - Соответствие	 - Данные датчиков.
// 
// Возвращаемое значение:
//  Строка - Строка данных датчиков.
//
Функция ПреобразоватьДанныеДатчиковВСтроку(ДанныеДатчиков) Экспорт
	
	Результат = "";	
	КоличествоЗаписей = 0;
	
	Для Каждого ЭлементСоответствия Из ДанныеДатчиков Цикл
		Если ЭлементСоответствия.Ключ < 0 ИЛИ ЭлементСоответствия.Ключ > 255 Тогда
			Продолжить;			
		
		КонецЕсли;
		
		ЗначениеБинарное = Dex2HexData(ЭлементСоответствия.Значение);		
		Результат = Результат + Dex2HexData(ЭлементСоответствия.Ключ)+Dex2HexData(Цел(СтрДлина(ЗначениеБинарное)/2))+ЗначениеБинарное;
		
		КоличествоЗаписей = КоличествоЗаписей+1;
		
		Если КоличествоЗаписей >= 255 Тогда
			Прервать;		
		КонецЕсли;
	
	КонецЦикла;
	
	Результат = Dex2HexData(КоличествоЗаписей)+Результат;
	
	Возврат Результат;

КонецФункции // ПреобразоватьДанныеДатчиковВСтроку()

// Преобразовывает данные крайние точки в строку.
//
// Параметры:
//  ДанныеКрайниеТочки	 - Массив из Структура - Данные крайней точки.
// 
// Возвращаемое значение:
//  Строка - Крайние точки строкой.
//
Функция ПреобразоватьДанныеКрайниеТочкиВСтроку(ДанныеКрайниеТочки) Экспорт
	
	Рез = "";
	Счетчик = 1;
	Для Каждого Стр Из ДанныеКрайниеТочки Цикл
		
		Если Счетчик > 25 Тогда
			// Не более 25 записей
			Прервать;
		
		КонецЕсли;
		
		Рез = ?(Рез="","",Рез+"|") + Формат(Стр.Период-'20000101',"ЧН=0; ЧГ=0") + "," 
			+ Формат(Стр.Широта,"ЧЦ=10; ЧДЦ=6; ЧРД=.; ЧН=0") + "," + Формат(Стр.Долгота,"ЧЦ=10; ЧДЦ=6; ЧРД=.; ЧН=0") + ","
			+ Формат(Стр.Направление, "ЧН=0; ЧГ=0");		
			
		Счетчик = Счетчик + 1;	
		
	КонецЦикла;
		
	Возврат Рез;	

КонецФункции // ПреобразоватьДанныеКрайниеТочкиВСтроку()

// Преобразует строку в данные крайние точки.
//
// Параметры:
//  СтрокаКрайниеТочки	 - Строка	 - Крайние точки строкой.
//  ТаблицаДляЗаполнения - ТаблицаЗначений - (Необязательный).
// 
// Возвращаемое значение:
//  Массив - из Структура - Данные крайней точки.
//
Функция ПреобразоватьСтрокуВДанныеКрайниеТочки(СтрокаКрайниеТочки, ТаблицаДляЗаполнения = Неопределено) Экспорт
    		
	Результат = Новый Массив;
	
	Если ПустаяСтрока(СтрокаКрайниеТочки) Тогда
		Возврат Результат;		
	КонецЕсли;
	
	ТекДанные = СтрЗаменить(СтрокаКрайниеТочки,"|",Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(ТекДанные) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТекДанные,Счетчик);
		ТекСтрока = СтрЗаменить(ТекСтрока,",",Символы.ПС);
		
		Период      = '20000101' + Число(СтрПолучитьСтроку(ТекСтрока,1));
		Широта      = Число(СтрПолучитьСтроку(ТекСтрока,2));
		Долгота     = Число(СтрПолучитьСтроку(ТекСтрока,3));
		Направление = Число(СтрПолучитьСтроку(ТекСтрока,4));
		
		СтруктураВРезультат = Новый Структура();
		СтруктураВРезультат.Вставить("Период", Период);
		СтруктураВРезультат.Вставить("Широта", Широта);
		СтруктураВРезультат.Вставить("Долгота", Долгота);
		СтруктураВРезультат.Вставить("Направление", Направление);
		Результат.Добавить(СтруктураВРезультат);
		
		Если ЗначениеЗаполнено(ТаблицаДляЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтруктураВРезультат);	
		КонецЕсли; 
	КонецЦикла;
	
	
	Возврат Результат;

КонецФункции

// Преобразовывает десятичное в любое.
//
// Параметры:
//  Значение - Число - Десятичное значение.
//  Нотация	 - Число - Нотация числа.
// 
// Возвращаемое значение:
//  Строка - Двоичное значение.
//
Функция Из_10_В_Любую(Знач Значение=0,Нотация=36) Экспорт
	
	Если Значение=0 Тогда
		Результат = "00";
	Иначе
		Результат="";
		Пока Значение>0 Цикл
			Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%Нотация+1,1)+Результат;
			Значение=Цел(Значение/Нотация);
		КонецЦикла;
		Результат = ?(СтрДлина(Результат)=1,"0","")+Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // Из_10_В_Любую()

// Преобразовывает десятичное в шестнадцатеричное.
//
// Параметры:
//  Значение - Число - Десятичное значение.
// 
// Возвращаемое значение:
//  Строка - Шестнадцатеричное значение.
//
Функция ДесятичноеВШестнадцатеричную_СВедущимНулем(Знач Значение=0) Экспорт
	
	Нотация = 16;
	
	Если Значение = 0 Тогда
		Результат = "00";
	Иначе
		Результат = "";
		Пока Значение >0 Цикл
			Результат = Сред("0123456789ABCDEF", Значение % Нотация + 1, 1) + Результат;
			Значение = Цел(Значение / Нотация);
		КонецЦикла;
		Результат = ?(СтрДлина(Результат) % 2 = 0, Результат, "0" + Результат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Подобная функция из версии 1С 8.3.6, для совместимости с 8.3.7.
//
// Параметры:
//  Строка				 - Строка	 - Исходная строка.
//  ПодстрокаПоиска		 - Строка	 - Исходная подстрока.
//  НаправлениеПоиска	 - Число	 - Указывает направление поиска подстроки в строке.
//  	1 - с начала;
//  	0 - с конца.
//  НачальнаяПозиция	 - Число	 - Указывает позицию в строке, с которой начинается поиск.
//  	Если параметр не задан и в параметре НаправлениеПоиска указано значение СНачала,
//  	то значение по-умолчанию равно 1.
//  	Если параметр не задан и в параметре НаправлениеПоиска указано значение СКонца,
//  	то значение по умолчанию равно длине строки.
//  	Не может быть отрицательным. В случае указания отрицательного значения выдается исключительная ситуация
//  	"Неверное значение параметра".
//  НомерВхождения		 - Неопределено	 - Не используется.
// 
// Возвращаемое значение:
//  Число - Позиция первого знака найденной подстроки. Нумерация символов в строке начинается с 1.
//  Если строка не содержит указанной подстроки, то возвращается 0.
//
Функция СтрНайтиСтроку(Знач Строка, Знач ПодстрокаПоиска, Знач НаправлениеПоиска = 1, Знач НачальнаяПозиция = 1, Знач НомерВхождения = Неопределено) Экспорт
	// Задать необходимый результат, например Неопределено, 0 или -1.
	ОтрицательныйРезультат = 0;
	
	#Область ПроверкаПараметров
		
	// Если передается не строка.
	Если НЕ ТипЗнч(Строка) = Тип("Строка") Тогда
	    Возврат ОтрицательныйРезультат;
	КонецЕсли; 
	
	// Если начальная позиция не число.
	Если НЕ ТипЗнч(НачальнаяПозиция) = Тип("Число") Тогда
	    Возврат ОтрицательныйРезультат;
	КонецЕсли; 
	
	// Преобразование типа значения начальной позиции в целое число. 
	НачальнаяПозиция = Цел(НачальнаяПозиция);
	
	// Получение длины строки.
	ДлинаСтроки = СтрДлина(Строка);
	
	// Если начальная позиция больше длины строки.
	Если НачальнаяПозиция > ДлинаСтроки Тогда
		Возврат ОтрицательныйРезультат;
	КонецЕсли;
	
	// Если начальная позиция меньше единицы.
	Если НачальнаяПозиция < 1 Тогда
		Возврат ОтрицательныйРезультат;
	КонецЕсли;

	// Если направление поиска не число.
	Если НЕ ТипЗнч(НаправлениеПоиска) = Тип("Число") Тогда
	    Возврат ОтрицательныйРезультат;
	КонецЕсли; 
	
	// Если направление поиска не корректное.
	Если НЕ (НаправлениеПоиска = 0 ИЛИ НаправлениеПоиска = 1) Тогда
		Возврат ОтрицательныйРезультат;
	КонецЕсли;
	
	#КонецОбласти 
	
	Если НаправлениеПоиска = 0 Тогда
	    // Отклонение индекса в поиске.
		Отклонение = ДлинаСтроки-НачальнаяПозиция+(СтрДлина(ПодстрокаПоиска)-1);
		Строка = Лев(Строка, НачальнаяПозиция);
		
		Строка = СтрВОбратномПорядке(Строка);
		ПодстрокаПоиска = СтрВОбратномПорядке(ПодстрокаПоиска);
		Результат = Найти(Строка, ПодстрокаПоиска);
		Если Результат = 0 Тогда
		    Возврат ОтрицательныйРезультат;
		КонецЕсли;

		Результат = ДлинаСтроки-Результат-Отклонение+1;
	Иначе
		// Отклонение индекса в поиске.
		Отклонение = НачальнаяПозиция-1;
		
		Строка = Прав(Строка, ДлинаСтроки-Отклонение);
		Результат = Найти(Строка, ПодстрокаПоиска);
		Если Результат = 0 Тогда
		    Возврат ОтрицательныйРезультат;
		КонецЕсли;
		
		Результат = Результат+Отклонение;
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции // СтрНайтиСтроку()
 
// Возвращает картинку из библиотеки.
//
// Параметры:
//  Картинка - Строка	 - Картинка из библиотеки картинок.
// 
// Возвращаемое значение:
//  Картинка - Картинка из библиотеки картинок.
//
Функция ПолучитьКартинкуИзБиблиотеки(Картинка) Экспорт
	Результат = Неопределено;
	
	#Если ВнешнееСоединение Тогда
		// У внешнего соединения нет доступа к библиотеке картинок.
	    Результат = ItobОбщегоНазначенияВызовСервера.ПолучитьКартинкуИзБиблиотеки(Картинка);
	#Иначе
		Попытка
			Результат = БиблиотекаКартинок[Картинка];
		Исключение
			Результат = БиблиотекаКартинок.Остановить;
		КонецПопытки;  
	#КонецЕсли 
	
	Возврат Результат;
КонецФункции // ПолучитьКартинкуИзБиблиотеки() 

// Рассчитывает дату отгрузки.
//
// Параметры:
//  ДатаВыпискиДокумента - Дата	 - Дата выписки документа.
// 
// Возвращаемое значение:
//  Дата - Дата отгрузки.
//
Функция РассчитатьДатуОтгрузки(ДатаВыпискиДокумента) Экспорт
	
	Если ДеньНедели(ДатаВыпискиДокумента) = 6 Тогда
		Рез = ДатаВыпискиДокумента + 24*3600*2;
		
	Иначе
		Рез = ДатаВыпискиДокумента + 24*3600*1;
	
	КонецЕсли;
	
	Возврат НачалоДня(Рез);

КонецФункции // РассчитатьДатуОтгрузки()

// Возвращает представление периода.
//
// Параметры:
//  НачалоПериода	 - Дата	 - Начало периода.
//  КонецПериода	 - Дата	 - Конец периода.
//  ПериодТекст		 - Строка - Субъект в представлении периода.
// 
// Возвращаемое значение:
//  Строка - Представление периода.
//
Функция ПолучитьПериод(НачалоПериода, КонецПериода, ПериодТекст = "Период") Экспорт
	Результат = "";
	ТекущаяДатаНаКлиенте = ПолучитьТекущуюДату();
	ТекущаяДатаНаКлиентеНачалоДня = НачалоДня(ТекущаяДатаНаКлиенте);
	
	НачалоПериодНачалоДня = НачалоДня(НачалоПериода);
	ЭтоНачалоПериода = (НачалоПериода = НачалоПериодНачалоДня);
	ЭтоКонецПериода = (КонецПериода = КонецДня(КонецПериода));
	ЭтоИнтервалыНачалаИКонцаДня = (ЭтоНачалоПериода = ЭтоКонецПериода);
	ЭтоОдинДень = (НачалоПериодНачалоДня = НачалоДня(КонецПериода));
	РазницаВПериоде = ТекущаяДатаНаКлиентеНачалоДня - НачалоПериодНачалоДня;
	Если НачалоПериода > КонецПериода Тогда
	    Возврат "Не верный " + НРег(ПериодТекст) + "!";
	ИначеЕсли ЭтоОдинДень И ЭтоИнтервалыНачалаИКонцаДня И РазницаВПериоде = 0 Тогда
	    Результат = "сегодня";
	ИначеЕсли ЭтоОдинДень И ЭтоИнтервалыНачалаИКонцаДня И РазницаВПериоде = 86400 Тогда
	    Результат = "вчера";
	ИначеЕсли ЭтоОдинДень И ЭтоИнтервалыНачалаИКонцаДня И РазницаВПериоде = -86400 Тогда
	    Результат = "завтра";
	ИначеЕсли ЭтоОдинДень И ЭтоИнтервалыНачалаИКонцаДня Тогда
	    Результат = Формат(НачалоПериодНачалоДня, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЭтоИнтервалыНачалаИКонцаДня И (КонецПериода - НачалоПериода = 604799) Тогда
	    Результат = "неделю " + Формат(НачалоПериода, "ДФ=dd") + "-" + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
	Иначе
		Если ЭтоНачалоПериода И ЭтоКонецПериода Тогда
			Результат = Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
		Иначе
			Результат = Строка(НачалоПериода) + " - " + Строка(КонецПериода);	
		КонецЕсли; 
	КонецЕсли; 

	Возврат ПериодТекст + " за " + Результат;
КонецФункции // ПолучитьПериод()

// Возвращает текущую дату.
// 
// Возвращаемое значение:
//  Дата - Текущую дата.
//
Функция ПолучитьТекущуюДату() Экспорт
	Результат = Неопределено;
	
	#Если НаКлиенте Тогда
		Результат = ItobОбщегоНазначенияКлиент.ТекущаяДатаНаКлиенте();
	#Иначе
		Результат = ТекущаяДатаСеанса();
	#КонецЕсли
	
	Возврат Результат;
КонецФункции // ПолучитьТекущуюДату()

// Преобразует строку по правилам наименования переменной
//
// Параметры:
//  ПреобразуемаяСтрока	 - Строка 
// 
// Возвращаемое значение:
//   Строка 
//
Функция ПреобразоватьСтрокуПоПравиламНаименованияПеременной(ПреобразуемаяСтрока) Экспорт
	
	ДопустимыеСимволы = "abcdefghijklmnopqrstuvwxyz
					    |ABCDEFGHIJKLMNOPQRSTUVWXYZ
					    |абвгдеёжзийклмнопрстуфхцчшщъыьэюя
					    |АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ
					    |1234567890
					    |_";
	
	СтрокаЦифры = "1234567890";

	СтрокаИзДопустимыхСимволов = СтрСоединить(СтрРазделить(ПреобразуемаяСтрока, СтрСоединить(СтрРазделить(ПреобразуемаяСтрока, ДопустимыеСимволы))));
	
	Пока НЕ СтрокаИзДопустимыхСимволов = "" И СтрНайти(СтрокаЦифры, Лев(СтрокаИзДопустимыхСимволов, 1)) <> 0 Цикл
		СтрокаИзДопустимыхСимволов = Сред(СтрокаИзДопустимыхСимволов, 2);
	КонецЦикла; 	

	
	Возврат СтрокаИзДопустимыхСимволов;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции
	
// Устарела. Следует использовать МодульЗнч.
//
// Параметры:
//  Аргумент - Число - Исходное число.
// 
// Возвращаемое значение:
//  Число - Положительное число.
//
Функция Abs(Аргумент) Экспорт
	Возврат МодульЗнч(Аргумент);
КонецФункции

#КонецОбласти

#Область ФильтрыКарт

// Устанавливает "Зеленую галочку" для указанного элемента, для остальных элементов групп картинки убирает.
//
// Параметры:
//  Форма								 - 	УправляемаяФорма - форма.
//  ИмяГруппыОсновныхНастроек			 - 	Строка - имя группы общих настроек.
//  ИмяГруппыПользовательскихНастроек	 - 	Строка - имя группы пользовательских настроек.
//  ЭлементПометка						 - 	ЭлементФормы - элемент формы, которому будет установлена картинка "Зеленая галочка".
//
Процедура ОбновитьПометкуЭлемента(Форма, ИмяГруппыОсновныхНастроек, ИмяГруппыПользовательскихНастроек, ЭлементПометка) Экспорт 
	Для Каждого Элемент Из Форма.Элементы[ИмяГруппыОсновныхНастроек].ПодчиненныеЭлементы Цикл
		Элемент.Картинка = Новый Картинка;
	КонецЦикла;
	Для Каждого Элемент Из Форма.Элементы[ИмяГруппыПользовательскихНастроек].ПодчиненныеЭлементы Цикл
		Элемент.Картинка = Новый Картинка;
	КонецЦикла;
	УстановитьЗеленуюГалочкуНаЭлементФормы(ЭлементПометка);
КонецПроцедуры

// Устанавливает "Зеленую галочку" для указанного элемента.
//
// Параметры:
//  ЭлементФормы - 	ЭлементФормы - элемент формы, которому будет установлена картинка "Зеленая галочка".
//
Процедура УстановитьЗеленуюГалочкуНаЭлементФормы(ЭлементФормы) Экспорт 
	ЭлементФормы.Картинка = ItobОбщегоНазначенияКлиентСервер.ПолучитьКартинкуИзБиблиотеки("ItobИконкаЗеленаяГалочка");
КонецПроцедуры

#КонецОбласти

// Преобразует десятичный цвет (так обычно хранится цвет в ИБ) в шестнадцатеричный,
//	удобный для передачи во внешние API.
//
// Параметры:
//  Цвет10 - Число - B*256*256 + G*256 + R  
// 
// Возвращаемое значение:
//	Строка - Шестнадцатеричный цвет в виде строки.
//
Функция ДесятичныйЦветВШестнадцатеричный(Цвет10) Экспорт
	
	Цвет = ПолучитьЦветПоЗначениюХранения(Цвет10);
	Цвет16 = ДесятичноеВШестнадцатеричную_СВедущимНулем(Цвет.Красный)
			 + ДесятичноеВШестнадцатеричную_СВедущимНулем(Цвет.Зеленый)
			 + ДесятичноеВШестнадцатеричную_СВедущимНулем(Цвет.Синий);
	
	
	Возврат Цвет16;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрВОбратномПорядке(Знач Строка)
	
	// Если передается не строка.
	Если НЕ ТипЗнч(Строка) = Тип("Строка") Тогда
	    Возврат Строка;
	КонецЕсли; 
	
	// Получение длины строки.
	ДлинаСтроки = СтрДлина(Строка);
	
	Результат = "";
	Для Счетчик = 1 По ДлинаСтроки Цикл
	    Результат = Сред(Строка,Счетчик,1)+Результат;
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции // СтрВОбратномПорядке()

Функция Dex2HexData(Знач Значение=0)
	
	Результат = ДесятичноеВШестнадцатеричную_СВедущимНулем(Значение);
	
	// Инверсия значения
	ИнвРезультат = "";
	Для Счетчик = 1 По Цел(СтрДлина(Результат)/2) Цикл
		ИнвРезультат = Сред(Результат,2*Счетчик-1,2) + ИнвРезультат;	
	КонецЦикла;
	
	
	Возврат ИнвРезультат;

КонецФункции

// Возвращает остаток от деления
//
Функция ОстатокОтДеления(Число, Делитель) Экспорт
	Возврат Число-Делитель*Цел(Число/Делитель);
КонецФункции // ОстатокОтДеления()

#КонецОбласти

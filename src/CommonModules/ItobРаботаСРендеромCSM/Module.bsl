////////////////////////////////////////////////////////////////////////////////
// Работа с рендером CSM (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает шаблон таблицы точек.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица точек.
//
Функция ПолучитьШаблонТаблицыТочек() Экспорт
	
	ТабТочек = Новый ТаблицаЗначений;
    ТабТочек.Колонки.Добавить("Широта");
	ТабТочек.Колонки.Добавить("Долгота");	
	ТабТочек.Колонки.Добавить("Название");
	ТабТочек.Колонки.Добавить("Направление");
	ТабТочек.Колонки.Добавить("ЦветУчастка");
	
	
	Возврат ТабТочек;
	
КонецФункции

// Возвращает шаблон таблицы маршрутов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица Маршрутов.
//
Функция ПолучитьШаблонТаблицыМаршрутов() Экспорт
	ТабМаршрутов = Новый ТаблицаЗначений;
	ТабМаршрутов.Колонки.Добавить("НомерМаршрута");
	ТабМаршрутов.Колонки.Добавить("ЦветМаршрута");
	ТабМаршрутов.Колонки.Добавить("РазмерУказателяНаправления");
	ТабМаршрутов.Колонки.Добавить("СписокТочек");			
	ТабМаршрутов.Колонки.Добавить("СписокКартинок");				
	Возврат ТабМаршрутов;
КонецФункции

// Возвращает шаблон таблицы изображений
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица Точек.
//
Функция ПолучитьШаблонТаблицыИзображений() Экспорт
    ТабТочек = Новый ТаблицаЗначений;
    ТабТочек.Колонки.Добавить("Широта");
	ТабТочек.Колонки.Добавить("Долгота");	
	ТабТочек.Колонки.Добавить("ИмяКартинки");	
	ТабТочек.Колонки.Добавить("Надпись");	
	Возврат ТабТочек; 	
КонецФункции

// Выполняет рендеринг маршрута.
//
// Параметры:
//  ДанныеМаршрута		 - ТаблицаЗначений, Неопределено - Таблица точек маршрута.
//  КартинкиМаршрута	 - Картинка, Неопределено		 - Картинка маршрута.
//  ТекстДопСкрипта		 - Строка						 - Текст дополнительного скрипта.
//  ИмяСлоя				 - Строка						 - Имя слоя.
//  ПрофильНаСервисеCSM	 - Строка						 - Профиль рендеринга.
// 
// Возвращаемое значение:
//  Булево - Результат рендеринга.
//
Функция ВыполнитьРендерингМаршрута(ДанныеМаршрута, КартинкиМаршрута, ТекстДопСкрипта, ИмяСлоя, ПрофильНаСервисеCSM) Экспорт

	ТабМаршрутов = ПолучитьШаблонТаблицыМаршрутов();
	МасштабУказателяНаправления = ItobОбщегоНазначения.МасштабыОбъектовНаКарте()["МасштабУказателяНаправления"];
	
	СтрМаршрута = ТабМаршрутов.Добавить();
	СтрМаршрута.НомерМаршрута = "1";
	СтрМаршрута.ЦветМаршрута = "1"; // Черный цвет
	СтрМаршрута.РазмерУказателяНаправления = Цел(5 * МасштабУказателяНаправления);
	СтрМаршрута.СписокТочек = ?(ДанныеМаршрута = Неопределено,ПолучитьШаблонТаблицыТочек(), ДанныеМаршрута.Скопировать());	
	СтрМаршрута.СписокКартинок = ?(КартинкиМаршрута = Неопределено,ПолучитьШаблонТаблицыИзображений(),КартинкиМаршрута.Скопировать());
	
	Если СтрМаршрута.СписокТочек.Количество() >= 2 Тогда
		ПерваяСтрока  = СтрМаршрута.СписокТочек[0];
		КрайняяСтрока = СтрМаршрута.СписокТочек[СтрМаршрута.СписокТочек.Количество()-1];
		Если ПерваяСтрока.Широта=КрайняяСтрока.Широта
			И ПерваяСтрока.Долгота=КрайняяСтрока.Долгота Тогда			
			
			КрайняяСтрока.Широта = КрайняяСтрока.Широта + 0.00001;
			КрайняяСтрока.Долгота = КрайняяСтрока.Долгота + 0.00001;
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ВыполнитьРендерингПоТаблицеМаршрутов(ТабМаршрутов, ТекстДопСкрипта, ИмяСлоя, ПрофильНаСервисеCSM);
	
КонецФункции // ВыполнитьРендерингМаршрута()

// Выполняет рендеринг по таблице маршрутов.
//
// Параметры:
//  ТабМаршрутов		 - ТаблицаЗначений	 - Таблица маршрутов.
//  ТекстДопСкрипта		 - Строка			 - Текст дополнительного скрипта.
//  ИмяСлоя				 - Строка			 - Имя слоя.
//  ПрофильНаСервисеCSM	 - Произвольный		 - Не используется.
// 
// Возвращаемое значение:
//  Булево - Результат рендеринга.
//
Функция ВыполнитьРендерингПоТаблицеМаршрутов(ТабМаршрутов, ТекстДопСкрипта, ИмяСлоя, ПрофильНаСервисеCSM) Экспорт

	ТелоXmlЗапроса = "";
	Если (СформироватьXMLСтатичныхМаршрутов(ТабМаршрутов, ТелоXmlЗапроса) = 0) Тогда
    	Возврат Ложь;
	КонецЕсли;
	
	// Профиль рендеринга
	ПрофильНаСервисеCSM = ПолучитьНомерПрофиля(ТелоXmlЗапроса);	
	
	Если ИмяСлоя="" Тогда
		ИмяСлоя = "RendLayer"+УдалитьПробелыИПунктуациюИзСтроки(ПрофильНаСервисеCSM);
	КонецЕсли;
	
	АдресСервиса    = ItobОперативныйМониторинг.ПолучитьАдресСервисаCsmSvcКлиент();
	ТекстДопСкрипта = ПолучитьДопТекстСкрипта(АдресСервиса, ИмяСлоя, ПрофильНаСервисеCSM);
	
	Возврат Истина;	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ВспомогательнаяФункция для работы с xml.
Функция ДобавитьXMLЭлемент(pXML, ИмяЭлемента, ЗначениеЭлемента)
    pXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	pXML.ЗаписатьТекст(ЗначениеЭлемента);
    pXML.ЗаписатьКонецЭлемента();	
КонецФункции

Функция СформироватьXMLСтатичныхМаршрутов(ТабМаршрутов, ТелоXmlЗапроса)
	
	ТелоXmlЗапроса = "";
	
	pXML = Новый ЗаписьXML();
	pXML.УстановитьСтроку("UTF-8");
	pXML.ЗаписатьОбъявлениеXML();
	pXML.ЗаписатьНачалоЭлемента("PROFILE");
	
	Количество = 0;
	// Формирование XML
	Для Каждого ТекМаршрут Из ТабМаршрутов Цикл
		Если ТекМаршрут.СписокТочек.Количество() = 0
			И ТекМаршрут.СписокКартинок.Количество() = 0 Тогда
			Продолжить
		КонецЕсли;
		Количество = Количество + 1;
		// ====== Сам маршрут=======================.
		// =========================================.
		pXML.ЗаписатьНачалоЭлемента("ROUTE");
		// Определяем цвет и толщину	
		ВебЦветМаршрута = ТекМаршрут.ЦветМаршрута;
		ДобавитьXMLЭлемент(pXML, "ICOLOR", XMLСтрока(ВебЦветМаршрута));
		ДобавитьXMLЭлемент(pXML, "ISIZE", XMLСтрока(ТекМаршрут.РазмерУказателяНаправления));
		// Набор точек
		pXML.ЗаписатьНачалоЭлемента("POINTS");
		Для Каждого ТекТочка Из ТекМаршрут.СписокТочек Цикл
			pXML.ЗаписатьНачалоЭлемента("POINT");
			pXML.ЗаписатьАтрибут("X", Формат(ТекТочка.Долгота, "ЧРД=.; ЧН=0"));
			pXML.ЗаписатьАтрибут("Y", Формат(ТекТочка.Широта, "ЧРД=.; ЧН=0"));
			Если НЕ ТекТочка.Название = Неопределено И НЕ ПустаяСтрока(ТекТочка.Название) Тогда
				pXML.ЗаписатьАтрибут("CAPTION", Строка(ТекТочка.Название));
				pXML.ЗаписатьАтрибут("CAPTION_ALIGNMENT", "bottom_left");
				pXML.ЗаписатьАтрибут("IMG", "");
				pXML.ЗаписатьАтрибут("FONTSIZE", "10");
			КонецЕсли;
			Если НЕ ТекТочка.Направление = Неопределено Тогда
				pXML.ЗаписатьАтрибут("ANG", Строка(ТекТочка.Направление));
			КонецЕсли;
			Если НЕ ТекТочка.ЦветУчастка = Неопределено Тогда
				pXML.ЗаписатьАтрибут("LEG_COLOR", XMLСтрока(ТекТочка.ЦветУчастка));
			КонецЕсли;
			
			pXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		pXML.ЗаписатьКонецЭлемента(); // POINTS
		pXML.ЗаписатьКонецЭлемента(); //ROUTE
		// ====== Изображения маршрута.
		// =========================================.
        pXML.ЗаписатьНачалоЭлемента("STATE_IMG");
		// Набор точек
		pXML.ЗаписатьНачалоЭлемента("POINTS");
		Для Каждого ТекКартинка Из ТекМаршрут.СписокКартинок Цикл
				pXML.ЗаписатьНачалоЭлемента("POINT");
				pXML.ЗаписатьАтрибут("X", Формат(ТекКартинка.Долгота, "ЧРД=.; ЧН=0"));
				pXML.ЗаписатьАтрибут("Y", Формат(ТекКартинка.Широта, "ЧРД=.; ЧН=0"));
				Если ТекКартинка.Надпись <> "" Тогда
					pXML.ЗаписатьАтрибут("CAPTION", ТекКартинка.Надпись);
					pXML.ЗаписатьАтрибут("CAPTION_ALIGNMENT", "under_owner");
					pXML.ЗаписатьАтрибут("FILL_OPACITY", "85");
					pXML.ЗаписатьАтрибут("BORDER", "0");
				КонецЕсли;
				pXML.ЗаписатьАтрибут("IMG", ТекКартинка.ИмяКартинки);
				
				pXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		pXML.ЗаписатьКонецЭлемента(); // POINTS
		pXML.ЗаписатьКонецЭлемента(); // STATE_IMG
	
	КонецЦикла;
	pXML.ЗаписатьКонецЭлемента(); // PROFILE
	ТелоXmlЗапроса = pXML.Закрыть();
	
	Возврат Количество;
КонецФункции

Функция ПолучитьНомерПрофиля(ТелоЗапроса)

	АдресСервера = ItobОперативныйМониторинг.ПолучитьАдресСервисаCsmSvcСервер();
	Сервер = Лев(АдресСервера,  Найти(АдресСервера,":") - 1);
	Порт   = Сред(АдресСервера, Найти(АдресСервера,":") + 1);
	Порт   = ?(ПустаяСтрока(Порт),8091,Число(Порт));
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Запрос	= Новый HTTPЗапрос("/AddProfile");
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат = "";
	Попытка
		Ответ	= HTTP.ВызватьHTTPМетод("POST",Запрос);
		Результат = Ответ.ПолучитьТелоКакСтроку();		
	Исключение
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка рендеринга маршрута:'")+" " + ОписаниеОшибки());
	КонецПопытки;
		
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьДопТекстСкрипта(АдресСервиса, ИмяСлоя, ПрофильНаСервисеCSM)	
	
	Сервер = Лев(АдресСервиса,  Найти(АдресСервиса,":") - 1);
	Порт   = Сред(АдресСервиса, Найти(АдресСервиса,":") + 1);
	Порт   = ?(ПустаяСтрока(Порт),8091,Число(Порт));
	
	СсылкаБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
		
	// Запрос точек
    Возврат        "
				   | var find_lays3 = m_map.getLayersByName(""" + ИмяСлоя+ """);
				   | var vectorLayer3 = null;
				   | if (find_lays3.length != 0) {					 
				   |   m_map.removeLayer(find_lays3[0]);
				   |  }
				   |  var LayerPlanTransp = new OpenLayers.Layer.TMS("""+ ИмяСлоя + """, 
                   |                  """+Протокол+"://"+ АдресСервиса + """, 
				   |                  { type: 'png', getURL: function osm_getTileURL_Local3(bounds) {
	               |                       var res = m_map.getResolution();
	               |                       var x = Math.round((bounds.left - this.maxExtent.left) / (res * this.tileSize.w));
	               |                       var y = Math.round((this.maxExtent.top - bounds.top) / (res * this.tileSize.h));
	               |                       var z = m_map.getZoom();
	               |                       var limit = Math.pow(2, z);
	               |                       if (y < 0 || y >= limit) {
	               |                            return OpenLayers.Util.getImagesLocation() + ""404.png"";
	               |                       } else {
	               |                            x = ((x % limit) + limit) % limit;
				   |                            return """+Протокол+"://" + АдресСервиса + "/pic?itob_z="" + z + ""&itob_y="" + y + ""&itob_x="" + x 
				   |                                    + ""&itob_prof="+ ПрофильНаСервисеCSM + """;
	               |                       }
	               |                  },
                   |                     displayOutsideMaxExtent: true, transparent: true, isBaseLayer : false,
				   |                     displayInLayerSwitcher: false, transitionEffect: null,
                   |                     attribution: ''});
	               |   m_map.addLayer(LayerPlanTransp); 
				   |   m_map.setLayerIndex(LayerPlanTransp, 0); ";
				   

КонецФункции

Функция УдалитьПробелыИПунктуациюИзСтроки(Стр)
	
	Стр = СтрЗаменить(Стр," ","");
	Стр = СтрЗаменить(Стр,",","");
    Стр = СтрЗаменить(Стр,".","");

	Возврат Стр
	
КонецФункции

#КонецОбласти

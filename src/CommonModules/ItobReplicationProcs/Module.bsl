
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьРепликациюССервераСбораДанных(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	ПараметрыЗапроса = ItobРепликация.ПараметрыЗапросаКДаннымТерминалов();
	ПараметрыЗапроса.ИсточникНастроекСервераСбораДанных = ПараметрыПроцедуры.СерверСбораДанных;
	ПараметрыЗапроса.ДанныеЗапроса = ПараметрыПроцедуры.ДанныеТерминалов;
	ПараметрыЗапроса.ВключатьДанныеПредыдущейТочки = Истина;
	ПараметрыЗапроса.ПреобразоватьОбработанныеДанныеДатчиковВСоответствие = Ложь;
	ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные;
	ДанныеРепликации = ItobРепликация.ДанныеТерминалов(ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ДанныеРепликации) Тогда
		ОбработатьДанныеРепликации(ДанныеРепликации, ПараметрыПроцедуры.СерверСбораДанных, ПараметрыПроцедуры.ЗапущеноВФоне);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьАктуальныеДанныеССервераСбораДанных(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	КодыТерминалов = Новый Массив;
	Для каждого СтруктураДанныхТерминала Из ПараметрыПроцедуры.ДанныеТерминалов Цикл
		КодыТерминалов.Добавить(СтруктураДанныхТерминала.КодТерминала);	
	КонецЦикла; 

	Если НЕ ЗначениеЗаполнено(КодыТерминалов) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗапроса = ItobРепликация.ПараметрыЗапросаАктуальности();
	ПараметрыЗапроса.ИсточникНастроекСервераСбораДанных = ПараметрыПроцедуры.СерверСбораДанных;
	ПараметрыЗапроса.КодыТерминалов = КодыТерминалов;
	ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.СырыеИОбработанныеДанные;
	ПараметрыЗапроса.ОпределятьРазрешенныеСкоростиПоПДД = Истина;
	ДанныеАктуальности = ItobРепликация.ПолучитьДанныеАктуальности(ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ДанныеАктуальности) Тогда
		ОбработатьАктуальныеДанные(ДанныеАктуальности, ПараметрыПроцедуры.СерверСбораДанных);
	КонецЕсли; 
		
КонецПроцедуры
 
#Область ОбработчикиРегламентныхЗаданий

// Процедура вызова регламентного задания.
//
//
Процедура РепликацияРегламентноеЗадание(Параметры = Неопределено) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ItobРепликация);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ЗафиксироватьВзаимодействиеССерверомСбораДанных(УровеньЖурналаРегистрации.Ошибка,
														ИмяДействияРепликация(),
												   		"На файловой базе данных запрещено использование регламентных заданий для репликации."
															+ Символы.ПС
															+ "Репликацию на файловой базе следует настраивать через CsmSvc");
		Возврат;	
	КонецЕсли; 
	
	НачатьРепликацию(); 
	
КонецПроцедуры

Процедура ОбновлениеАктуальныхДанныхРегламентноеЗадание(Параметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ItobОбновлениеАктуальныхДанных);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ЗафиксироватьВзаимодействиеССерверомСбораДанных(УровеньЖурналаРегистрации.Ошибка,
														ИмяДействияРепликация(),
												   		"На файловой базе данных запрещено использование регламентных заданий для репликации."
															+ Символы.ПС
															+ "Репликацию на файловой базе следует настраивать через CsmSvc");
		Возврат;	
	КонецЕсли;
	
	НачатьОбновлениеАктуальностиДанных();
		
КонецПроцедуры

#КонецОбласти 

#Область ВызовИзВнешнейКомпоненты

Процедура StartReplication() Экспорт
	
	ЗапущеноЧерезРегламентноеЗадание = Ложь;
	НачатьРепликацию(ЗапущеноЧерезРегламентноеЗадание);
	
КонецПроцедуры

Процедура UpdateActuality() Экспорт
	
	НачатьОбновлениеАктуальностиДанных();
	
КонецПроцедуры
 
#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Репликация

Процедура НачатьРепликацию(ЗапущеноЧерезРегламентноеЗадание = Истина)
		
	ПараметрыВзаимодействия = ПараметрыВзаимодействияССерверомСбораДанных();
	ПараметрыВзаимодействия.ИмяМетода = "ItobReplicationProcs.ВыполнитьРепликациюССервераСбораДанных";
	ПараметрыВзаимодействия.Действие = ИмяДействияРепликация();
	ПараметрыВзаимодействия.ТребуемыеДанныеТерминалов = Новый Структура("КодТерминала, СчетчикАктуальности");
	ПараметрыВзаимодействия.ЗапуститьВФоне = ЗапущеноЧерезРегламентноеЗадание;	
	
	ВыполнитьВзаимодействиеССерверамиСбораДанных(ПараметрыВзаимодействия);
	
КонецПроцедуры

Процедура ОбработатьДанныеРепликации(ДанныеРепликации, СерверСбораДанных, ЗапущеноВФоне)
		
	РазмерПакетаДляОбработки = 500;
	ТаблицаДляОбработки = Новый ТаблицаЗначений;
	Для каждого КлючИЗначение Из ДанныеРепликации Цикл
		Если ТаблицаДляОбработки.Колонки.Количество() = 0 Тогда
			ТаблицаДляОбработки = КлючИЗначение.Значение.СкопироватьКолонки();	
		КонецЕсли; 
		
		Если КлючИЗначение.Значение.Количество() > РазмерПакетаДляОбработки Тогда
			ЗаписатьДанныеРепликации(КлючИЗначение.Значение, СерверСбораДанных, ЗапущеноВФоне);	// В текущей реализации большой пакет с данными по одному терминалу пишем сразу.
		Иначе
			Если ТаблицаДляОбработки.Количество() + КлючИЗначение.Значение.Количество() > РазмерПакетаДляОбработки Тогда
				ЗаписатьДанныеРепликации(ТаблицаДляОбработки, СерверСбораДанных, ЗапущеноВФоне);
				ТаблицаДляОбработки.Очистить();
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КлючИЗначение.Значение, ТаблицаДляОбработки);
		КонецЕсли; 	
	КонецЦикла;
	
	Если ТаблицаДляОбработки.Количество() > 0 Тогда
		ЗаписатьДанныеРепликации(ТаблицаДляОбработки, СерверСбораДанных, ЗапущеноВФоне);	
	КонецЕсли; 
		
КонецПроцедуры
 
// Регистрация данных репликации в базе данных
//
// ТаблицаДанных - тип ТаблицаЗначений, с наличием колонок
//   - КодТерминала
//   - Период
//   - Широта
//   - Долгота
//   - Высота
//   - Направление
//   - Скорость
//   - ЧислоСпутников
//   - Счетчик
//   - ДанныеДатчиков - массив массивов [[КодДатчика1, ЗначениеДатчика1],...,[КодДатчикаN, ЗначениеДатчикаN]]
//   - ВерсияФормата
//
Процедура ЗаписатьДанныеРепликации(ТаблицаДанных, СерверСбораДанных, ЗапущеноВФоне)
	
	Перем тзКешДатчиков;
	
	ТаблицаДанных.Сортировать("КодТерминала,Счетчик");
	ТаблицаДанных.Индексы.Добавить("КодТерминала, Счетчик");
	
	// Дата начала обработки
	лТекущаяДата = ТекущаяДатаСеанса();
	
	// Для регистрации периодов выработки
	тзПериодыДанных = Новый ТаблицаЗначений;
	тзПериодыДанных.Колонки.Добавить("Терминал");
	тзПериодыДанных.Колонки.Добавить("ПериодДата");
	
	// Служебная таблица для контроля событий
	тзТекущиеДанныеДляОбработки = ТаблицаДанных.СкопироватьКолонки();	
	тзТекущиеДанныеДляОбработки.Колонки.Добавить("ЗначенияДатчиков");
	
	Для Счетчик = 0 По ТаблицаДанных.Количество()-1 Цикл
		ТекущаяСтрока = ТаблицаДанных[Счетчик];
		
		// Терминал ссылка
		ТекущийТерминал = ItobВызовСервераПовтИсп.ПолучитьТерминалПоКоду(ТекущаяСтрока.КодТерминала, СерверСбораДанных);
		Если ТекущийТерминал.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// Грубая проверка валидности даты
		Если Год(ТекущаяСтрока.Период) > Год(лТекущаяДата)+1 Тогда
			Продолжить;		
		КонецЕсли;
		
		// Добавим запись в таблицу периодов, для регистрации периодов выработки
		НовСтрокаПериодыДанных 				= тзПериодыДанных.Добавить();
		НовСтрокаПериодыДанных.Терминал 	= ТекущийТерминал;
		НовСтрокаПериодыДанных.ПериодДата 	= НачалоДня(МестноеВремя(ТекущаяСтрока.Период));
		
		// Фиксируем текущие точки для контроля событий
		НовСтрокаТекущиеДанныеДляОбработки = тзТекущиеДанныеДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаТекущиеДанныеДляОбработки, ТекущаяСтрока);		
			
		МодельТерминала = ItobВызовСервераПовтИсп.ПолучитьМодельТерминала(ТекущийТерминал);
		Если МодельТерминала.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// Датчики.
		ЗначенияДатчиков = Новый Соответствие;
		Для каждого элемМассиваДатчиков Из ТекущаяСтрока.ДанныеДатчиков_Обработанные Цикл			
			КодДатчика = элемМассиваДатчиков[0];
			ЗначениеДатчика = элемМассиваДатчиков[1];
			Если КодДатчика <= 0 Тогда
				// Код датчика должен быть больше нуля
				Продолжить;
			КонецЕсли;				
			
			ТекущийДатчик = ЗарегистрироватьДатчик(КодДатчика, МодельТерминала, тзКешДатчиков);
			ЗначенияДатчиков.Вставить(ТекущийДатчик, ЗначениеДатчика);		
		КонецЦикла;
		
		НовСтрокаТекущиеДанныеДляОбработки.ЗначенияДатчиков = ЗначенияДатчиков;
				
		// 1 раз для каждого терминала.
    	Если Счетчик = ТаблицаДанных.Количество()-1 ИЛИ ТекущаяСтрока.КодТерминала <> ТаблицаДанных[Счетчик+1].КодТерминала Тогда
			ЗаписьРегистра = РегистрыСведений.ItobКрайниеДанныеТерминалов.СоздатьМенеджерЗаписи();
   			ЗаписьРегистра.Терминал = ТекущийТерминал;
			ЗаписьРегистра.ДатаВремя = ТекущаяСтрока.Период;
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ТекущаяСтрока);
			ЗаписьРегистра.Счетчик = ТекущаяСтрока.Счетчик;
			ЗаписьРегистра.Записать(); 
 
    		// Проверим на события
    		ПроверитьВыполнениеСобытий(ТекущийТерминал, тзТекущиеДанныеДляОбработки, ЗапущеноВФоне);
			
			// Очистка таблицы с записями по текущему терминалу.
			тзТекущиеДанныеДляОбработки.Очистить();										
    	КонецЕсли;			
	КонецЦикла;
	
	// Свернем периоды данных
	тзПериодыДанных.Свернуть("Терминал,ПериодДата",);
	
	// Зарегистрируем периоды для подсчета выработки
	ЗарегистрироватьПоступлениеДанныхДляПодсчетаВыработки(тзПериодыДанных);
		
	// Запись статистики
	ЗаписатьДанныеСтатистики(лТекущаяДата, ТаблицаДанных.Количество());	

КонецПроцедуры

Функция ЗарегистрироватьДатчик(КодДатчика, МодельТерминала, тзКешДатчиков)
	
	Если тзКешДатчиков = Неопределено Тогда
		тзКешДатчиков = Новый ТаблицаЗначений;
		тзКешДатчиков.Колонки.Добавить("КодДатчика");
		тзКешДатчиков.Колонки.Добавить("МодельТерминала");
		тзКешДатчиков.Колонки.Добавить("Датчик");
		тзКешДатчиков.Индексы.Добавить("КодДатчика,МодельТерминала");	
	КонецЕсли;
	
	НайденныеСтрокиКеш = тзКешДатчиков.НайтиСтроки(Новый Структура("КодДатчика,МодельТерминала", КодДатчика, МодельТерминала));
	Если НайденныеСтрокиКеш.Количество() > 0 Тогда
		Датчик = НайденныеСтрокиКеш[0].Датчик;
	Иначе
		Датчик = Справочники.ItobДатчики.НайтиПоКоду(КодДатчика,Ложь,,МодельТерминала);
		Если Датчик.Пустая() Тогда
			НовДатчик 				= Справочники.ItobДатчики.СоздатьЭлемент();
			НовДатчик.Владелец 		= МодельТерминала;
			НовДатчик.Код 			= КодДатчика;
			НовДатчик.Наименование 	= "#"+Формат(КодДатчика,"ЧН=0; ЧГ=0");
			НовДатчик.Записать();
			
			Датчик = НовДатчик.Ссылка;			
		КонецЕсли;		
		
		НовСтрокаКеш 					= ТЗКешДатчиков.Добавить();
		НовСтрокаКеш.КодДатчика 		= КодДатчика;
		НовСтрокаКеш.МодельТерминала 	= МодельТерминала;
		НовСтрокаКеш.Датчик 			= Датчик;							
	КонецЕсли;
	
	
	Возврат Датчик;

КонецФункции

Процедура ЗаписатьДанныеСтатистики(ТекущийПериод, КоличествоЗаписей)

	СтруктураОтбора = Новый Структура("Поток", "Основной");
	Выборка = РегистрыСведений.ItobСтатистикаРепликации.Выбрать(СтруктураОтбора);
	ВыборкаПустая = Истина;
	Пока Выборка.Следующий() Цикл
	    ЗаписьРегистра = Выборка.ПолучитьМенеджерЗаписи();		
		Если НачалоМесяца(ЗаписьРегистра.ПериодКрайнейРепликации) < НачалоМесяца(ТекущийПериод) Тогда
			ЗаписьРегистра.ЗаписейЗаМесяц = 0;
		КонецЕсли;		
		Если НачалоДня(ЗаписьРегистра.ПериодКрайнейРепликации) < НачалоДня(ТекущийПериод) Тогда
			ЗаписьРегистра.ЗаписейЗаСутки = 0;
		КонецЕсли;		
		Если НачалоЧаса(ЗаписьРегистра.ПериодКрайнейРепликации) < НачалоЧаса(ТекущийПериод) Тогда
			ЗаписьРегистра.ЗаписейЗаЧас = 0;
		КонецЕсли;		
		ВыборкаПустая = Ложь;
		Прервать;
	КонецЦикла;
	
	Если ВыборкаПустая Тогда
	    ЗаписьРегистра = РегистрыСведений.ItobСтатистикаРепликации.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Поток = "Основной";
	КонецЕсли;
	
	ЗаписьРегистра.ПериодКрайнейРепликации = ТекущийПериод;
	ЗаписьРегистра.ЗаписейВсего    = ЗаписьРегистра.ЗаписейВсего     + КоличествоЗаписей;
	ЗаписьРегистра.ЗаписейЗаМесяц  = ЗаписьРегистра.ЗаписейЗаМесяц   + КоличествоЗаписей;
	ЗаписьРегистра.ЗаписейЗаСутки  = ЗаписьРегистра.ЗаписейЗаСутки   + КоличествоЗаписей;
	ЗаписьРегистра.ЗаписейЗаЧас    = ЗаписьРегистра.ЗаписейЗаЧас     + КоличествоЗаписей;
	
	ЗаписьРегистра.Записать(Истина);
	

КонецПроцедуры

Процедура ЗарегистрироватьПоступлениеДанныхДляПодсчетаВыработки(ТабПериодыДанных)
	
	Для каждого СтрокаПериод Из ТабПериодыДанных Цикл		
		НовЗапись = РегистрыСведений.ItobПериодыРасчетаВыработки.СоздатьМенеджерЗаписи();
		НовЗапись.ПериодДата = СтрокаПериод.ПериодДата;
		НовЗапись.Терминал = СтрокаПериод.Терминал;
		НовЗапись.ВыработкаПодсчитана = Ложь;
		НовЗапись.Записать();	
	КонецЦикла;

КонецПроцедуры

Функция ИмяДействияРепликация()
	
	Возврат "Репликация данных терминалов";
	
КонецФункции

#КонецОбласти 

#Область АктуальностьДанных

Процедура НачатьОбновлениеАктуальностиДанных()
		
	ПараметрыВзаимодействия = ПараметрыВзаимодействияССерверомСбораДанных();
	ПараметрыВзаимодействия.ИмяМетода = "ItobReplicationProcs.ОбновитьАктуальныеДанныеССервераСбораДанных";
	ПараметрыВзаимодействия.Действие = ИмяДействияАктуальностьДанных();
	ПараметрыВзаимодействия.ТребуемыеДанныеТерминалов = Новый Структура("КодТерминала");	
	ПараметрыВзаимодействия.ЗапуститьВФоне = Ложь;   // Актуальность проверяем всегда в основном потоке.
	
	ВыполнитьВзаимодействиеССерверамиСбораДанных(ПараметрыВзаимодействия);
	
КонецПроцедуры

Процедура ОбработатьАктуальныеДанные(АктуальныеДанныеТерминалов, СерверСбораДанных)
	
	ТерминалыПоКодам = Новый Соответствие;
	ВсеНайденныеТерминалы = Новый Массив;
	Для каждого стрАктуальности Из АктуальныеДанныеТерминалов Цикл
		КодТерминала = стрАктуальности.КодТерминала;
		ТерминалСсылка = ItobВызовСервераПовтИсп.ПолучитьТерминалПоКоду(КодТерминала, СерверСбораДанных);
		
		ТерминалыПоКодам.Вставить(КодТерминала, ТерминалСсылка);
		
		Если НЕ ТерминалСсылка.Пустая() Тогда
			ВсеНайденныеТерминалы.Добавить(ТерминалСсылка);
		КонецЕсли; 
	КонецЦикла;
	
	ВыборкаДатчиковИДеревоВидовГруппировок = ВспомогательныеДанныеПоТерминалам(ВсеНайденныеТерминалы);
	
	ВыборкаДатчиковТерминала = ВыборкаДатчиковИДеревоВидовГруппировок.ВыборкаДатчиков;
	
	ДатчикиТекущегоТерминалаШаблон = Новый ТаблицаЗначений;
	ДатчикиТекущегоТерминалаШаблон.Колонки.Добавить("КодДатчика");
	ДатчикиТекущегоТерминалаШаблон.Колонки.Добавить("КодДатчикаСтрокой");
	ДатчикиТекущегоТерминалаШаблон.Колонки.Добавить("Назначение");
	
	ДеревоВидовГруппировок = ВыборкаДатчиковИДеревоВидовГруппировок.ДеревоВидовГруппировок;
	
	Для каждого стрАктуальности Из АктуальныеДанныеТерминалов Цикл
		ТерминалСсылка = ТерминалыПоКодам[стрАктуальности.КодТерминала];
		Если НЕ ЗначениеЗаполнено(ТерминалСсылка) Тогда
			Продолжить;		
		КонецЕсли;
		
		Запись = РегистрыСведений.ItobАктуальностьДанныхТерминалов.СоздатьМенеджерЗаписи();
		Запись.Терминал = ТерминалСсылка;
		Запись.Прочитать();
		
		Если Запись.Выбран() И Запись.Счетчик = стрАктуальности.Счетчик Тогда
			Продолжить;			
		КонецЕсли;
		
		Запись.Терминал = ТерминалСсылка;
		Запись.ДатаВремя = стрАктуальности.Период;
		ЗаполнитьЗначенияСвойств(Запись, стрАктуальности);
		
		Запись.КрайниеТочки = "";
		Запись.ДанныеДатчиков = стрАктуальности.ДанныеДатчиков_Сырые;
		
		ДатчикиТекущегоТерминала = Неопределено;
		ВыборкаДатчиковТерминала.Сбросить();
		Если ВыборкаДатчиковТерминала.НайтиСледующий(ТерминалСсылка, "Терминал") Тогда
			ДатчикиТекущегоТерминала = ДатчикиТекущегоТерминалаШаблон.СкопироватьКолонки();
			ВыборкаДетальныеЗаписи = ВыборкаДатчиковТерминала.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоваяСтрокаДатчиков = ДатчикиТекущегоТерминала.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДатчиков, ВыборкаДетальныеЗаписи);
				
				НоваяСтрокаДатчиков.КодДатчикаСтрокой = Формат(НоваяСтрокаДатчиков.КодДатчика,"ЧН=0; ЧГ=0");
			КонецЦикла; 
		КонецЕсли; 
		
		Запись.ПодходящийВариантДинамическогоОформления = Справочники.ItobВариантыДинамическогоОформления.Подобрать(Запись,
																													ТерминалСсылка,
																													ДатчикиТекущегоТерминала,
																													стрАктуальности.ДанныеДатчиков_Обработанные);
																													
		Запись.ПодходящийВариантДинамическогоОформленияПриЗадержкеДанных = Неопределено;
		ОчиститьГруппировкиВРегистреАктуальности(Запись);
		ЗаполнитьГруппировкиВРегистреАктуальности(Запись, 
												  ДеревоВидовГруппировок, 
												  ДатчикиТекущегоТерминала, 
												  стрАктуальности.ДанныеДатчиков_Обработанные);
		
		Запись.Записать();
	КонецЦикла; 
	
КонецПроцедуры

Функция ИмяДействияАктуальностьДанных()
	
	Возврат "Обновление актуальности данных терминалов";
	
КонецФункции

#Область ГруппировкаТС

Функция ВспомогательныеДанныеПоТерминалам(Терминалы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминалы", Терминалы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobВидыГруппировок.Индекс КАК Индекс,
	|	ItobВидыГруппировок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТРодители
	|ИЗ
	|	Справочник.ItobВидыГруппировок КАК ItobВидыГруппировок
	|ГДЕ
	|	ItobВидыГруппировок.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРодители.Индекс КАК РодительИндекс,
	|	ВТРодители.Ссылка КАК РодительСсылка,
	|	ItobВидыГруппировок.Ссылка КАК ЭлементСсылка
	|ПОМЕСТИТЬ ВТДети
	|ИЗ
	|	ВТРодители КАК ВТРодители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ItobВидыГруппировок КАК ItobВидыГруппировок
	|		ПО ВТРодители.Ссылка = ItobВидыГруппировок.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРодители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДети.РодительИндекс КАК РодительИндекс,
	|	ВТДети.РодительСсылка КАК РодительСсылка,
	|	ВТДети.ЭлементСсылка КАК ЭлементСсылка,
	|	ItobВидыГруппировокУсловияОтбора.Показатель КАК Показатель,
	|	ItobВидыГруппировокУсловияОтбора.ВидСравнения КАК ВидСравнения,
	|	ItobВидыГруппировокУсловияОтбора.Значение КАК Значение,
	|	ItobВидыГруппировокУсловияОтбора.Ссылка ЕСТЬ NULL КАК ТЧУсловийОтбораПустая
	|ИЗ
	|	ВТДети КАК ВТДети
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobВидыГруппировок.УсловияОтбора КАК ItobВидыГруппировокУсловияОтбора
	|		ПО ВТДети.ЭлементСсылка = ItobВидыГруппировокУсловияОтбора.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РодительИндекс
	|ИТОГИ ПО
	|	РодительСсылка,
	|	ЭлементСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ItobТерминалыДатчики.Назначение КАК Назначение,
	|	ItobТерминалыДатчики.Датчик.Код КАК КодДатчика,
	|	ItobТерминалыДатчики.Ссылка КАК Терминал
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|ГДЕ
	|	ItobТерминалыДатчики.Ссылка В(&Терминалы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ItobТерминалыДатчики.Ссылка
	|ИТОГИ ПО
	|	Терминал";
	
	Результат = Новый Структура("ВыборкаДатчиков, ДеревоВидовГруппировок");
	
	ИндексРезультата_ДеревоВидовГруппировок = 3;
	ИндексРезультата_ВыборкаДатчиков = 4;
	
	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	Результат.ВыборкаДатчиков = НаборРезультатов[ИндексРезультата_ВыборкаДатчиков].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Результат.ДеревоВидовГруппировок = НаборРезультатов[ИндексРезультата_ДеревоВидовГруппировок].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Возврат Результат; 
	
КонецФункции

Процедура ОчиститьГруппировкиВРегистреАктуальности(Запись)
	
	Для Счетчик = 0 По 9 Цикл
		Запись["ВидГруппировки" + Строка(Счетчик)] = Неопределено;
	КонецЦикла;
				
КонецПроцедуры

Процедура ЗаполнитьГруппировкиВРегистреАктуальности(Запись, ДеревоВидовГруппировок, ДатчикиТерминала, ЗначенияДатчиков)
		
	Для каждого СтрРодитель Из ДеревоВидовГруппировок.Строки Цикл
		Для каждого стрЭлемент Из СтрРодитель.Строки Цикл			
			Если ItobДинамическиеОтборы.ПроверитьУсловиеДинамическогоОтбора(стрЭлемент.Строки, 
																			Запись, 
																			ДатчикиТерминала, 
																			ЗначенияДатчиков) Тогда
																			
				ИмяРесурса = "ВидГруппировки" + стрЭлемент.Строки[0].РодительИндекс;	
				Запись[ИмяРесурса] = стрЭлемент.ЭлементСсылка;
				
				// Группа по "ИЛИ", поэтому прерываем проверку внутри группы при выполнении условия по элементу
				//	(полагая, что условия не пересекаются).
				Прервать;		
			КонецЕсли; 
		КонецЦикла;	
	КонецЦикла; 
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область События
	
// Проверяет набор данных на исполнение подписок на события
//
Процедура ПроверитьВыполнениеСобытий(Терминал, ТаблицаДанных, ЗапущеноВФоне)
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.События") Тогда
		МодульОбработкаСобытийПовтИсп = ОбщегоНазначения.ОбщийМодуль("ItobОбработкаСобытийПовтИсп");
		ТЗПодписок = МодульОбработкаСобытийПовтИсп.ПолучитьАктивныеПодпискиПоТерминалу(Терминал);
		
		Если ТЗПодписок = Неопределено ИЛИ ТЗПодписок.Количество() = 0 Тогда
			Возврат;		
		КонецЕсли;
		
		ТаблицаДанныхБезПредыдущейТочки = ТаблицаДанных.СкопироватьКолонки();
		ПредыдущаяТочка = ТаблицаДанных[0];
		Для Счетчик = 1 По ТаблицаДанных.Количество() - 1 Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанныхБезПредыдущейТочки.Добавить(), ТаблицаДанных[Счетчик]); 	
		КонецЦикла; 
		
		МодульОбработкаСобытий =  ОбщегоНазначения.ОбщийМодуль("ItobОбработкаСобытий");
		МодульОбработкаСобытий.ПроверитьВыполнениеСобытий(Терминал, ТаблицаДанных, ПредыдущаяТочка, ТЗПодписок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

Функция СформироватьТекстЗапросаПоТерминалам() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ItobТерминалы.СерверСбораДанных КАК СерверСбораДанных,
	|	ЕСТЬNULL(ItobКрайниеДанныеТерминалов.Счетчик, 0) КАК СчетчикАктуальности,
	|	ItobТерминалы.Код КАК КодТерминала
	|ИЗ
	|	Справочник.ItobТерминалы КАК ItobТерминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobКрайниеДанныеТерминалов КАК ItobКрайниеДанныеТерминалов
	|		ПО (ItobКрайниеДанныеТерминалов.Терминал = ItobТерминалы.Ссылка)
	|ГДЕ
	|	НЕ ItobТерминалы.ПометкаУдаления
	|	И НЕ ItobТерминалы.Код = 0
	|	И НЕ ItobТерминалы.СерверСбораДанных = ЗНАЧЕНИЕ(Справочник.ItobСерверыСбораДанных.ПустаяСсылка)
	|	И НЕ ЕСТЬNULL(ItobТерминалы.СерверСбораДанных.Отключить, ИСТИНА)
	|ИТОГИ ПО
	|	СерверСбораДанных";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВыполнитьВзаимодействиеССерверамиСбораДанных(ПараметрыВзаимодействия)
		
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ПараметрыВзаимодействия.ТекстПроизвольногоЗапроса) Тогда
		Запрос.Текст = ПараметрыВзаимодействия.ТекстПроизвольногоЗапроса;	
	Иначе
		Запрос.Текст = СформироватьТекстЗапросаПоТерминалам();	
	КонецЕсли; 
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗафиксироватьВзаимодействиеССерверомСбораДанных(УровеньЖурналаРегистрации.Предупреждение,
														ПараметрыВзаимодействия.Действие, 
														"Не обнаружено подходящих для репликации терминалов. Репликация отменена");
		Возврат;	
	КонецЕсли; 
	
	ВыборкаСерверыСбораДанных = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСерверыСбораДанных.Следующий() Цикл
		ДанныеТерминалов = Новый Массив;
		ВыборкаТерминалы = ВыборкаСерверыСбораДанных.Выбрать();
		Пока ВыборкаТерминалы.Следующий() Цикл
			ДанныеТерминала = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВзаимодействия.ТребуемыеДанныеТерминалов);
			ЗаполнитьЗначенияСвойств(ДанныеТерминала, ВыборкаТерминалы);
			ДанныеТерминалов.Добавить(ДанныеТерминала);		
		КонецЦикла;
		
        ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("СерверСбораДанных", ВыборкаСерверыСбораДанных.СерверСбораДанных);
		ПараметрыПроцедуры.Вставить("ДанныеТерминалов", ДанныеТерминалов);
		ПараметрыПроцедуры.Вставить("ЗапущеноВФоне", ПараметрыВзаимодействия.ЗапуститьВФоне);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);	
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыВзаимодействия.Действие + СтрШаблон(" ( сервер: %1)", ВыборкаСерверыСбораДанных.СерверСбораДанных);	 		
		ПараметрыВыполнения.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор);		
		ПараметрыВыполнения.ЗапуститьВФоне = ПараметрыВзаимодействия.ЗапуститьВФоне;
		ПараметрыВыполнения.ЗапуститьНеВФоне = НЕ ПараметрыВзаимодействия.ЗапуститьВФоне;   // При запуске через внешнее соединение выполняем непосредственно.
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(ПараметрыВзаимодействия.ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыВзаимодействияССерверомСбораДанных()
	
	Параметры = Новый Структура;
	
	// Обязательные.
	Параметры.Вставить("ИмяМетода");
	Параметры.Вставить("Действие");
	Параметры.Вставить("ТребуемыеДанныеТерминалов");
	
	// Необязательные.	
	Параметры.Вставить("ЗапуститьВФоне", Истина);
	Параметры.Вставить("ТекстПроизвольногоЗапроса", "");
	
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗафиксироватьВзаимодействиеССерверомСбораДанных(Уровень = Неопределено, Действие = "", ТекстОшибки = "", СерверСбораДанных = Неопределено)
	
	УровеньОшибки = ?(Уровень = Неопределено, УровеньЖурналаРегистрации.Ошибка, Уровень);
	ПредставлениеУровняОшибки = ?(УровеньОшибки = УровеньЖурналаРегистрации.Ошибка, ": Ошибка", "");
	
	ТекстДействие = ?(ЗначениеЗаполнено(Действие), 
					  Действие + ПредставлениеУровняОшибки, 
					  "Ошибка взаимодействия с сервером сбора данных");
	
	ТекстСерверСбораДанных = ?(ЗначениеЗаполнено(СерверСбораДанных), СтрШаблон(" (на сервере сбора данных ""%1""", ""), "");
	
	
	ЗаписьЖурналаРегистрации(ТекстДействие + ТекстСерверСбораДанных,
							 УровеньОшибки,,, 
							 ТекстОшибки);
				
КонецПроцедуры

#КонецОбласти

